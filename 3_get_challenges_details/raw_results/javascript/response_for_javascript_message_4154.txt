a["{\"msg\":\"result\",\"id\":\"832\",\"result\":{\"_id\":\"KxMhoaDkyC2CiNGQx\",\"author\":\"Werdna\",\"authorId\":\"buX4mCQhtXCfBjeno\",\"code\":\"function divingMinigame(arr) {\\n\\t\\n}\",\"difficulty\":1.5523809523809524,\"familyId\":\"8rWdxk2GojEJ93J3d\",\"instructions\":\"You will be given an array of numbers which represent your character's **altitude** above sea level at regular intervals:\\n* Positive numbers represent height above the water.\\n* 0 is sea level.\\n* Negative numbers represent depth below the water's surface.\\n\\n**Create a function which returns whether your character survives their unsupervised diving experience, given an array of integers.**\\n\\n1. Your character starts with a **breath meter of 10**, which is the maximum. When diving underwater, your breath meter **decreases by 2** per item in the array. Watch out! If your breath **diminishes to 0**, your character dies!\\n\\n2. To prevent this, you can **replenish your breath by 4 (up to the maximum of 10)** for each item in the array where you are at or above sea level.\\n\\n3. Your function should return `true` if your character survives, and `false` if not.\\n\\n### Worked Example\\n```\\ndivingMinigame([-5, -15, -4, 0, 5]) ➞ true\\n\\n// Breath meter starts at 10.\\n// -5 is below water, so breath meter decreases to 8.\\n// -15 is below water, so breath meter decreases to 6.\\n// -4 is below water, so breath meter decreases to 4.\\n// 0 is at sea level, so breath meter increases to 8.\\n// 5 is above sea level and breath meter is capped at 10 (would've been 12 otherwise).\\n// Character survives!\\n```\\n\\n### Examples\\n```\\ndivingMinigame([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ true\\n\\ndivingMinigame([-3, -6, -2, -6, -2]) ➞ false\\n\\ndivingMinigame([2, 1, 2, 1, -3, -4, -5, -3, -4]) ➞ false\\n```\\n\\n### Notes\\n* Lists may be of any length.\\n* All arrays are valid.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assertEquals(divingMinigame([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), true)\\nTest.assertEquals(divingMinigame([-5, -15, -4, 0, 5]), true)\\nTest.assertEquals(divingMinigame([0, -4, 0, -4, -5, -2]), true)\\nTest.assertEquals(divingMinigame([-4, -3, -4, -3, 5, 2, -5, -20, -42, -4, 5, 3, 5]), true)\\n\\nTest.assertEquals(divingMinigame([-3, -6, -2, -6, -2]), false)\\nTest.assertEquals(divingMinigame([-4, -5, -2, -7, 2, -1000, -2000, -1]), false)\\nTest.assertEquals(divingMinigame([1, 2, 1, 2, 1, 2, 1, 2, 1, -3, -4, -5, -3, -4]), false)\\nTest.assertEquals(divingMinigame([-5, -5, -5, -5, -5, 2, 2, 2, 2, 2, 2, 2, 2]), false)\\n\\n// Author: Joshua Señoron\",\"language\":\"javascript\",\"quality\":4.612244897959184,\"summary\":\"You will be given an array of numbers which represent your character's altitude above sea level at regular intervals:\\nPositive numbers represent height above the water.\\n0 is sea level.\\nNegative numbers represent depth below the water's surface.\\n\\nCreate a function which returns whether your character survives their unsupervised diving experience, given an array\",\"tags\":[\"conditions\",\"arrays\",\"numbers\",\"loops\",\"games\"],\"timestamp\":{\"$date\":1614963094150},\"title\":\"Hold Your Breath!\",\"stats\":{\"completed\":{\"total\":156,\"ratings\":[1,1,1,1,1,0,0,1,0,1,1,1,1,1,0,2,0,1,2,0,0,2,2,1,1,0,1,1,1,0,1,2,2,2,2,1,1,2,2,2,2,4,2,1,2,0,1,2,3,2,1,2,2,3,2,1,2,1,2,3,2,1,2,2,1,2,1,2,2,2,3,2,2,0,2,4,2,2,0,2,2,3,2,2,2,1,2,5,2,2,1,2,2,1,2,2,1,2,2,2,2,2,2,1,0],\"quality\":[5,2,5,5,4,5,5,3,5,5,3,5,5,5,5,2,5,5,5,5,2,5,5,4,5,5,5,5,5,5,5,5,3,5,4,5,5,5,5,5,5,5,5,5,4,5,5,5,5],\"rators\":[\"buX4mCQhtXCfBjeno\",\"2Qk2mFu9HBFzrB24i\",\"z5ebtimXwFFJdYxoa\",\"jcPZ5ySXseCB7Ec3x\",\"QRv96jmNaYsWkxQEG\",\"J7d397iB5GuWRAMfg\",\"pPpmP7xeJzGgK362R\",\"QGjY3hgPYPMmMjc7j\",\"qFJpEDM2Ep6v4tqPz\",\"srJ34BaybkQh3qRkM\",\"u9cRf5kvtpRB5ffB3\",\"k6QB6fzbj4LsWktRL\",\"x2Cz7S8rCKJqCE3Xe\",\"Ya3eHgs8x3unZRLpb\",\"yjtdwc2AC4jA2RWtn\",\"PAzNgJF54C2mYPkR9\",\"oDtGiNqDMHmhHE3J8\",\"AFfw7cGg83uYk2Miy\",\"65dbBZynphj53nXqA\",\"CNc6rmwhbxkxEhHAp\",\"evTTY9hwrtogaNxXn\",\"RE4Mm9T6Q9uygAxGS\",\"mHT2bJb5SByfJ8yKS\",\"tAF9Gf6PiGogbZuWs\",\"zw7g7T8wE5R5CBhXr\",\"Yp7uvStL97cC9fKkY\",\"XrqNzJ2FRG8HnGiR6\",\"dQd664XYR6QKHFvHW\",\"rbPEA2TFQw837Hmqg\",\"def8JLtHRkXB5PsMg\",\"oyCwjCyd6z6bntp9f\",\"SNiJRRosrmSWssLj4\",\"8BJyXvRWcrvN3nttS\",\"RQwuHHy4rBgaQCLte\",\"4LYmDzWXiTFhcMef6\",\"6BpBQnSGhzgvhXrEy\",\"cd9qF8xvFFstaR7mJ\",\"PuN6c5Gj3ueRmfwxm\",\"HH4z7ePDar3QsbvAd\",\"QHiEYtz3tX3s9nETo\",\"QhGdovYnRkhmNRidN\",\"FD8KJi44k5Fk2veeQ\",\"WZreC2ASAhnfiJ2Pr\",\"DXK9XcPeBBiuATk5W\",\"CaF26y5ArLFiTuCBw\",\"jKoHg2qkasoZangcZ\",\"qpQGRsEvjBG5PxK8z\",\"XxnBrCYK2m4R7dkTz\",\"7wtuhPesfhcYsfZaZ\",\"b5h9eABvQ24qotroi\",\"Swb2jDnZjviDXsQvB\",\"Wo8iSdXwSMfTtEkTW\",\"pR4H6GgZhL5id3zrw\",\"pKNY5PZzim8FrEsoa\",\"9bkYDSL5oa24h8aJC\",\"h9Rj73sXasTATXuJt\",\"bg7LzavnfjKDrfstG\",\"NyzE8br2S8Fz3GuuG\",\"YAYLExdpTkZ7szi25\",\"8hcuYhmbDdWWcpocg\",\"dmCSMrFMbGo4p6T3r\",\"7csRLd5Sx3Ew8bbFz\",\"QLNKahfd55GDSsN28\",\"nyh73Tr6GhqAat78g\",\"6Xb9esy2YRixMvADL\",\"sN2JyFeJCwfwwHPwF\",\"Q7Yxda7dqKeYPs2Db\",\"XujK3rHd3JcM9TLJy\",\"49XFttjKo2QhEWT3R\",\"HTAm62DZytAEFgSnu\",\"dFLCGqGJCage326Bd\",\"hCfruGWxw7v64teEr\",\"sZ2eCa6pF6EN9PMmd\",\"wppoAWjMWbhvhjz9n\",\"RoGGD5cpHb4ftdLDv\",\"pSDEGi9vYA6a9YYW8\",\"wd37CYd8dbfMZztHA\",\"sNcDN3s3rH9wcNg5n\",\"pNjEqvQRYAztXNkeK\",\"cLHZ5gSaZetSFwjWR\",\"fPxRg2Y7qXfG43Tju\",\"4skDBacNroo7gu4GB\",\"3TAFGjvMoTsxb5AH6\",\"RJS22bAq2aqv3Rs33\",\"649LDDhSKfmkPANRM\",\"CXaDDoXfcEEmdLQh4\",\"LwD3CyYSiBfg3mA4r\",\"uTfia5PnKgrfLJMKj\",\"HKJLaQfnENk3E4tLJ\",\"mdv6r687hYHFziB89\",\"wR6gmiHBcRoKSeHQq\",\"y2cf8jaBdN5nBdXpa\",\"E6DBfkTgHuPsDWdG8\",\"BdnE4RS5puoxo92mA\",\"ceMycDhXzsRojnr9F\",\"X5zZpDGEheWLEhoyS\",\"sfj3i3eEAfZa3f9kg\",\"Xk2g4CNFAnYcvxiSr\",\"jd9sRTnsyeKpPggba\",\"pdGuqmMyeN4wZaWwv\",\"pWJWQDhqzDSmfaFam\",\"CJBPyyfyaEeEo63sb\",\"zgoq9MhrL2h75DAMA\",\"kp2ZbCewZJAbfd7xv\",\"NGvCPuMiAP3xrRLfB\",\"AasGs8AeX9Lcb9xJn\",\"ahAe7pcyjYGzcDRm4\",\"QjGNkRM3Xc78yShJN\",\"8s5Bdrn7RTga7DL6x\",\"5NGxHLcQ8Af2RJ4TN\",\"vKch2w3b4keMd84jj\",\"JFiiZhAZTNQSvjzdp\",\"JW5J6sdJHAmDmfWnE\",\"LCn6qz2GoMr5577Rd\",\"n4Y5EEGCjmrK99yrt\",\"jyCByAZwu576xDwEL\",\"GqG4xjYTYzPinynv9\",\"nBJve5CzG6WAw7WFQ\",\"szQg8dxKNNre3v3Jk\",\"jLSZdBseR2kfjt8dL\",\"ckMvGF5TAyCwcxJBm\",\"wo4cpen33NYFHNca7\",\"PH32cNxBjrK4a28sn\",\"mpLFbFKjY6u3nsDMv\",\"FJsvM5yqKuK9yMk9P\",\"YSmLyP3eRhcFjJPzg\",\"CH53jGETBeJTummf3\",\"PTo9qt93YqGvL8fCa\",\"gXTAie79kiw28tx5u\",\"pi76g3eRpnKrhee2a\",\"ZKuwzkssrSsDGNPr5\",\"jyoLggHk8xQKZuoQC\",\"3WtHp4MBzciz4AE8M\",\"jicWFrNKadYuLhqxh\",\"bfYmA3LMvhSrK59cn\",\"oyB4Wr4EeZnoDaa8B\",\"9XnGoq9Tv6ut3zTtH\",\"sMcFMPkMJC4Kh6ymj\",\"QAZ5DGaWWYhku4BNz\",\"ttuGK7od8simjgmCJ\",\"rPsSEYqwmttMPEuvo\",\"z47JaNrQMgvuPx5HE\",\"uxKGACwmZ6FNZsMwE\",\"HCfkcKnPs9mrJojdG\",\"eomLS3wh6tQPN8jtH\",\"LPZ2QKCoB8q6rG25c\",\"osMsiScntRkWiw4gw\",\"aEm3Wvj2rFYRL8Lrb\",\"qAEumdjLRx2AGAmzw\"]},\"flags\":2},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"SoZ2s9wwizKo7hLHB\",\"language\":\"cpp\"},{\"_id\":\"KxMhoaDkyC2CiNGQx\",\"language\":\"javascript\"},{\"_id\":\"7SyqAcAMb5vuzzLW5\",\"language\":\"php\"},{\"_id\":\"ZsLDkJfLGFkmjS2jE\",\"language\":\"python3\"},{\"_id\":\"Esb3WiPxGpDktJp3z\",\"language\":\"ruby\"}]}}"]