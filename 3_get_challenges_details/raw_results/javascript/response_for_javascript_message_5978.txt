a["{\"msg\":\"result\",\"id\":\"1736\",\"result\":{\"_id\":\"vZ64kq7i28seXgXRK\",\"author\":\"er0s\",\"authorId\":\"5Zq3aGdvh4LHBvnJL\",\"code\":\"function strangerStrings(str) {\\n\\t\\n}\",\"difficulty\":2.36734693877551,\"editorId\":\"5Zq3aGdvh4LHBvnJL\",\"familyId\":\"fnnz68oMzgPWt64XP\",\"instructions\":\"In this challenge, every given string is made of three types of characters: blank spaces, digits, and strangers.\\n\\n```\\nThe Digits ➞ 0 1 2 3 4 5 6 7 8 9\\n\\nThe Strangers ➞ \ud835\udfd8 \ud835\udfd9 \ud835\udfda \ud835\udfdb \ud835\udfdc \ud835\udfdd \ud835\udfde \ud835\udfdf \ud835\udfe0 \ud835\udfe1\\n```\\n\\nThe goal is to remove the spaces, to separate the digits from the strangers, and to apply another transform in the two separated groups **without** using the `.replace()` string method.\\n\\nGiven a string `str`, implement a function that returns an array containing two values, in the order:\\n\\n- An `integer` being the **sum of all digits**. If the given string has no digits, the sum will be equal to zero.\\n- A `string` containing the strangers, sorted in **decrescent order**. If the given string has no strangers, the returned string will be an empty one.\\n\\n**Try doing this without using** `String.replace()`\\n\\n### Examples\\n```\\nstrangerStrings(\\\"\ud835\udfda2 \ud835\udfdb3 \ud835\udfd80 \ud835\udfd91\\\") ➞ [ 6, \\\"\ud835\udfdb\ud835\udfda\ud835\udfd9\ud835\udfd8\\\" ]\\n\\nstrangerStrings(\\\"\ud835\udfdd \ud835\udfda003   9\\\") ➞ [ 12, \\\"\ud835\udfdd\ud835\udfda\\\" ]\\n\\nstrangerStrings(\\\"32   000\ud835\udfdc0 0 00\ud835\udfd9\ud835\udfdf\\\") ➞ [ 5, \\\"\ud835\udfdf\ud835\udfdc\ud835\udfd9\\\" ]\\n```\\n\\n### Notes\\n- All given strings are valid, containing only the set of characters specified in the instructions: don't worry about validation handling.\\n- Credits: this was inspired by a comment (**@aligejtor**) on [this challenge] (https://edabit.com/challenge/nBW6ubsQCurPvhpWc).\",\"isHidden\":false,\"lab\":\"Test.assertSimilar(strangerStrings(\\\"\ud835\udfda2 \ud835\udfdb3 \ud835\udfd80 \ud835\udfd91\\\"), [6, \\\"\ud835\udfdb\ud835\udfda\ud835\udfd9\ud835\udfd8\\\"])\\nTest.assertSimilar(strangerStrings(\\\"\ud835\udfdd \ud835\udfda003   9\\\"), [12, \\\"\ud835\udfdd\ud835\udfda\\\"])\\nTest.assertSimilar(strangerStrings(\\\"32   000\ud835\udfdc0 0 00\ud835\udfd9\ud835\udfdf\\\"), [5, \\\"\ud835\udfdf\ud835\udfdc\ud835\udfd9\\\"])\\nTest.assertSimilar(strangerStrings(\\\"8 \ud835\udfe14 3\ud835\udfde\\\"), [15, \\\"\ud835\udfe1\ud835\udfde\\\"])\\nTest.assertSimilar(strangerStrings(\\\"9   2 21 8\\\"), [22, \\\"\\\"])\\nTest.assertSimilar(strangerStrings(\\\"7\ud835\udfdd   16\ud835\udfde \ud835\udfdf5\ud835\udfdf\\\"), [19, \\\"\ud835\udfdf\ud835\udfdf\ud835\udfde\ud835\udfdd\\\"])\\nTest.assertSimilar(strangerStrings(\\\"0\ud835\udfdd\ud835\udfde   \ud835\udfde\ud835\udfdf\ud835\udfe1 \ud835\udfe1\\\"), [0, \\\"\ud835\udfe1\ud835\udfe1\ud835\udfdf\ud835\udfde\ud835\udfde\ud835\udfdd\\\"])\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,2,2,0,0,2,2,2,2,2,2,3,3,2,4,4,3,4,1,3,3,2,3,3,1,3,2,3,3,3,1,2,3,3,2,2,2,4,5,3,1,0,3,4],\"rators\":[\"5Zq3aGdvh4LHBvnJL\",\"AasGs8AeX9Lcb9xJn\",\"yjtdwc2AC4jA2RWtn\",\"DHwbkbzYNpmkSFT7u\",\"zw7g7T8wE5R5CBhXr\",\"65dbBZynphj53nXqA\",\"6BpBQnSGhzgvhXrEy\",\"wcjknenWdPRhrRScv\",\"XKi8iZXBCHCaebSHh\",\"Y9Nz9yafaibz54W4o\",\"FJsvM5yqKuK9yMk9P\",\"RE4Mm9T6Q9uygAxGS\",\"byrKwHgawbFgyAcgo\",\"wTN95bZvXHLD8XXx6\",\"Cxdhr3m4fcLF8nepr\",\"MRedsQ5gbonhjmZzW\",\"AvKGKe9227yXpWusH\",\"usYptPR3LKY8QzCvD\",\"n5wubRfh6zh8QRymN\",\"CwaFByefKKABMHTP9\",\"EWn8w8P3nNh7knatY\",\"EAuL56kpyLytw4RcR\",\"uJZAPSB4nHT3a3JyY\",\"qr2eQBTg5eZdcMMdG\",\"pi76g3eRpnKrhee2a\",\"YER6iBcpJCuhgrYDN\",\"a7LBurCmz5n6gECbv\",\"mHT2bJb5SByfJ8yKS\",\"p5ZshR8zhTqmdhKDc\",\"buX4mCQhtXCfBjeno\",\"aEm3Wvj2rFYRL8Lrb\",\"s7Qqx4Jnuq85iB7Lw\",\"hyx8iH2z3QySmyRKT\",\"Kk3jdrvAbPENkw5Ft\",\"Akq3fQcPRgPrWfsye\",\"CNc6rmwhbxkxEhHAp\",\"c7uBxu2rgY77H5d79\",\"JsRTAwWK7Nikj4sKA\",\"f8rtN3nT2Cx2GKshG\",\"QRv96jmNaYsWkxQEG\",\"8BJyXvRWcrvN3nttS\",\"srJ34BaybkQh3qRkM\",\"rSJGLYSXMuu3RWjun\",\"oAnm26CRvq6uDEMN9\",\"J7d397iB5GuWRAMfg\",\"oDtGiNqDMHmhHE3J8\"],\"total\":48,\"quality\":[3,5]},\"flags\":0},\"summary\":\"In this challenge, every given string is made of three types of characters: blank spaces, digits, and strangers.\\n\\nThe Digits ➞ 0 1 2 3 4 5 6 7 8 9\\n\\nThe Strangers ➞ \ud835\udfd8 \ud835\udfd9 \ud835\udfda \ud835\udfdb \ud835\udfdc \ud835\udfdd \ud835\udfde \ud835\udfdf \ud835\udfe0 \ud835\udfe1\\n\\nThe goal is to remove the spaces, to separate the digits from the strangers, and to apply another transform in the two separated groups without using the .replace() st\",\"tags\":[\"strings\",\"formatting\",\"sorting\",\"regex\"],\"timestamp\":{\"$date\":1573338054453},\"title\":\"Stranger Strings\",\"quality\":4,\"family\":[{\"_id\":\"vZ64kq7i28seXgXRK\",\"language\":\"javascript\"}]}}"]