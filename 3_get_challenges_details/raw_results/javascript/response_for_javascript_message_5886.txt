a["{\"msg\":\"result\",\"id\":\"1691\",\"result\":{\"_id\":\"7b7Enrm4Xb5owFToe\",\"author\":\"Mubashir Hassan \",\"authorId\":\"T6iBEE2jp7f7iEF2P\",\"code\":\"function combinator(arr) {\\n\\t\\n}\",\"difficulty\":2.3333333333333335,\"familyId\":\"5CmZM5gdr9y9Tp7zr\",\"instructions\":\"Create a function that, given an array of string arrays, returns an array of all combinations as concatenated strings.\\n\\n1. The function is called with an array of arrays containing strings.\\n2. The task is to combine each string of each array with each string of each other array.\\n3. If one of the string arrays is empty, the function will return an empty array.\\n\\nThe function will accept an optional second string parameter. This parameter, if specified, is to be used to combine two strings.\\n\\n### Examples\\n```\\ncombinator([[\\\"a\\\", \\\"b\\\"], [\\\"c\\\", \\\"d\\\"]]) ➞ [\\\"ac\\\", \\\"ad\\\", \\\"bc\\\", \\\"bd\\\"]\\n\\ncombinator([[\\\"a\\\"], [\\\"a\\\", \\\"b\\\"], \\\"abc\\\"]) ➞ [\\\"aaa\\\", \\\"aab\\\", \\\"aac\\\", \\\"aba\\\", \\\"abb\\\", \\\"abc\\\"]\\n\\ncombinator([[\\\"foo\\\", \\\"bar\\\"], [\\\"baz\\\", \\\"bamboo\\\"]], \\\" \\\") ➞ [\\\"foo baz\\\", \\\"foo bamboo\\\", \\\"bar baz\\\", \\\"bar bamboo\\\"]\\n\\ncombinator([[]]) ➞ []\\n```\\n\\n### Notes\\n- The order of the given strings must be retained in the combinations.\\n- You can assume that:\\n  - The function is always called with an array of string arrays and arrays can be empty.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assertSimilar(combinator([['a']]), ['a'])\\nTest.assertSimilar(combinator([['ab'], ['ba']]), ['abba'])\\nTest.assertSimilar(combinator([['a', 'b']]), ['a', 'b'])\\nTest.assertSimilar(combinator([['a', 'b'], ['c', 'd']]), ['ac', 'ad', 'bc', 'bd'])\\nTest.assertSimilar(combinator([['a', 'b'], ['c', 'd'], ['e', 'f']]), ['ace', 'acf', 'ade', 'adf', 'bce', 'bcf', 'bde', 'bdf'])\\nTest.assertSimilar(combinator([['a'], ['a', 'b'], 'abc']), ['aaa', 'aab', 'aac', 'aba', 'abb', 'abc'])\\nTest.assertSimilar(combinator([['foo', 'bar'], ['baz', 'bamboo']], ' '), ['foo baz', 'foo bamboo', 'bar baz', 'bar bamboo'])\\nTest.assertSimilar(combinator(['abcd', 'efgh', 'ijkl']), ['aei', 'aej', 'aek', 'ael', 'afi', 'afj', 'afk', 'afl', 'agi', 'agj', 'agk', 'agl', 'ahi', 'ahj', 'ahk', 'ahl', 'bei', 'bej', 'bek', 'bel', 'bfi', 'bfj', 'bfk', 'bfl', 'bgi', 'bgj', 'bgk', 'bgl', 'bhi', 'bhj', 'bhk', 'bhl', 'cei', 'cej', 'cek', 'cel', 'cfi', 'cfj', 'cfk', 'cfl', 'cgi', 'cgj', 'cgk', 'cgl', 'chi', 'chj', 'chk', 'chl', 'dei', 'dej', 'dek', 'del', 'dfi', 'dfj', 'dfk', 'dfl', 'dgi', 'dgj', 'dgk', 'dgl', 'dhi', 'dhj', 'dhk', 'dhl'])\\nTest.assertSimilar(combinator([[]]), [])\\nTest.assertSimilar(combinator([['a', 'b'], [], ['e', 'f']]), [])\\nTest.assertSimilar(combinator([[], ['e', 'f']]), [])\",\"language\":\"javascript\",\"quality\":0,\"summary\":\"Create a function that, given an array of string arrays, returns an array of all combinations as concatenated strings.\\n\\nThe function is called with an array of arrays containing strings.\\nThe task is to combine each string of each array with each string of each other array.\\nIf one of the string arrays is empty, the function will return an empty array.\\n\\nThe func\",\"tags\":[\"strings\",\"algorithms\",\"arrays\"],\"timestamp\":{\"$date\":1607844766379},\"title\":\"Combinator\",\"stats\":{\"completed\":{\"total\":4,\"ratings\":[2,2,2,2,2,2,3,2,4],\"quality\":[],\"rators\":[\"yjtdwc2AC4jA2RWtn\",\"CNc6rmwhbxkxEhHAp\",\"86RhHD27rvvnBRRoc\",\"tAF9Gf6PiGogbZuWs\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"AB9Kr86brh3ePbmBJ\",\"language\":\"cpp\"},{\"_id\":\"7b7Enrm4Xb5owFToe\",\"language\":\"javascript\"},{\"_id\":\"YrNbakR7Y4vLz6bFs\",\"language\":\"python3\"},{\"_id\":\"ByCurYynkiWjWf6xS\",\"language\":\"ruby\"}]}}"]