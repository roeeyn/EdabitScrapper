a["{\"msg\":\"result\",\"id\":\"2040\",\"result\":{\"_id\":\"uqwmC7RJF98xr3TiD\",\"archived\":false,\"author\":\"Theodore\",\"authorId\":\"hi7Hvtq2mJfkXEGF2\",\"code\":\"function knapsack(capacity, items) {\\n\\t\\n}\",\"difficulty\":2.864864864864865,\"familyId\":\"vWTgzGeTwk6fLE2KL\",\"instructions\":\"Given a knapsack with a certain weight capacity, fill it with loot from a list of items to achieve the highest value possible.\\n\\nThe function takes two parameters: an int specifying the maximum weight the knapsack can hold, and an array of item Objects to choose from. Each item has a name, a weight, and a value. The total weight of all chosen items cannot exceed the capacity of the knapsack.\\n\\nThe function should return an object containing the capacity of the bag, a list of items that were added to the bag (in the same order that they were given), the total weight of those items, and the total value of the items.\\n\\n### Example\\n```\\nknapsack(0, items) âžž {\\n  capacity: 0,\\n  items: [],\\n  weight: 0,\\n  value: 0\\n}\\n  ```\\n  \\n  ### Notes\\n  N/A\",\"lab\":\"var items = [\\n  {name:\\\"desk lamp\\\",weight:2,value:12},\\n  {name:\\\"beach towel\\\",weight:1,value:10},\\n  {name:\\\"textbook\\\",weight:3,value:20},\\n  {name:\\\"wall clock\\\",weight:2,value:15},\\n  {name:\\\"frozen dinners\\\",weight:10,value:50},\\n  {name:\\\"tablet\\\",weight:7,value:1400},\\n  {name:\\\"smartphone\\\",weight:1,value:200},\\n  {name:\\\"paper\\\",weight:2,value:5},\\n  {name:\\\"laser printer\\\",weight:25,value:400},\\n  {name:\\\"shoes\\\",weight:1,value:79},\\n  {name:\\\"medicine\\\",weight:1,value:17},\\n  {name:\\\"decorative cushion\\\",weight:1,value:11},\\n  {name:\\\"gold necklace\\\",weight:1,value:2500},\\n  {name:\\\"toaster oven\\\",weight:5,value:129}\\n];\\nTest.assertSimilar(Test.inspect(knapsack(0, items)), Test.inspect({\\n  capacity: 0,\\n  items: [],\\n  weight: 0,\\n  value: 0\\n}));\\nTest.assertSimilar(Test.inspect(knapsack(1, items)), Test.inspect({\\n  capacity: 1,\\n  items: [\\n    {name:\\\"gold necklace\\\",weight:1,value:2500}\\n  ],\\n  weight: 1,\\n  value: 2500\\n}));\\nTest.assertSimilar(Test.inspect(knapsack(2, items)), Test.inspect({\\n  capacity: 2,\\n  items: [\\n    {name:\\\"smartphone\\\",weight:1,value:200},\\n    {name:\\\"gold necklace\\\",weight:1,value:2500}\\n  ],\\n  weight: 2,\\n  value: 2700\\n}));\\nTest.assertSimilar(Test.inspect(knapsack(5, items)), Test.inspect({\\n  capacity: 5,\\n  items: [\\n    {name:\\\"smartphone\\\",weight:1,value:200},\\n    {name:\\\"shoes\\\",weight:1,value:79},\\n  \\t{name:\\\"medicine\\\",weight:1,value:17},\\n  \\t{name:\\\"decorative cushion\\\",weight:1,value:11},\\n    {name:\\\"gold necklace\\\",weight:1,value:2500}\\n  ],\\n  weight: 5,\\n  value: 2807\\n}));\\nTest.assertSimilar(Test.inspect(knapsack(14, items)), Test.inspect({\\n  capacity: 14,\\n  items: [\\n    {name:\\\"tablet\\\",weight:7,value:1400},\\n    {name:\\\"smartphone\\\",weight:1,value:200},\\n    {name:\\\"gold necklace\\\",weight:1,value:2500},\\n    {name:\\\"toaster oven\\\",weight:5,value:129}\\n  ],\\n  weight: 14,\\n  value: 4229\\n}));\\nvar items2 = [\\n  {name:\\\"desk lamp\\\",weight:2,value:12},\\n  {name:\\\"textbook\\\",weight:3,value:20},\\n  {name:\\\"wall clock\\\",weight:2,value:15},\\n  {name:\\\"frozen dinners\\\",weight:10,value:50},\\n  {name:\\\"tablet\\\",weight:7,value:1400},\\n  {name:\\\"smartphone\\\",weight:1,value:200},\\n  {name:\\\"paper\\\",weight:2,value:5},\\n  {name:\\\"laser printer\\\",weight:25,value:400},\\n  {name:\\\"shoes\\\",weight:1,value:79},\\n  {name:\\\"medicine\\\",weight:1,value:17},\\n  {name:\\\"toaster oven\\\",weight:5,value:129}\\n];\\nTest.assertSimilar(Test.inspect(knapsack(31, items2)), Test.inspect({\\n  capacity: 31,\\n  items: [\\n    {name:\\\"textbook\\\",weight:3,value:20},\\n    {name:\\\"wall clock\\\",weight:2,value:15},\\n    {name:\\\"frozen dinners\\\",weight:10,value:50},\\n    {name:\\\"tablet\\\",weight:7,value:1400},\\n    {name:\\\"smartphone\\\",weight:1,value:200},\\n    {name:\\\"shoes\\\",weight:1,value:79},\\n    {name:\\\"medicine\\\",weight:1,value:17},\\n    {name:\\\"toaster oven\\\",weight:5,value:129}\\n  ],\\n  weight: 30,\\n  value: 1910\\n}));\\nTest.assertSimilar(Test.inspect(knapsack(36, items2)), Test.inspect({\\n  capacity: 36,\\n  items: [\\n    {name:\\\"tablet\\\",weight:7,value:1400},\\n    {name:\\\"smartphone\\\",weight:1,value:200},\\n    {name:\\\"laser printer\\\",weight:25,value:400},\\n    {name:\\\"shoes\\\",weight:1,value:79},\\n    {name:\\\"medicine\\\",weight:1,value:17}\\n  ],\\n  weight: 35,\\n  value: 2096\\n}));\\nTest.assertSimilar(Test.inspect(knapsack(100, items2)), Test.inspect({\\n  capacity: 100,\\n  items: [\\n    {name:\\\"desk lamp\\\",weight:2,value:12},\\n    {name:\\\"textbook\\\",weight:3,value:20},\\n    {name:\\\"wall clock\\\",weight:2,value:15},\\n    {name:\\\"frozen dinners\\\",weight:10,value:50},\\n    {name:\\\"tablet\\\",weight:7,value:1400},\\n    {name:\\\"smartphone\\\",weight:1,value:200},\\n    {name:\\\"paper\\\",weight:2,value:5},\\n    {name:\\\"laser printer\\\",weight:25,value:400},\\n    {name:\\\"shoes\\\",weight:1,value:79},\\n    {name:\\\"medicine\\\",weight:1,value:17},\\n    {name:\\\"toaster oven\\\",weight:5,value:129}\\n  ],\\n  weight: 59,\\n  value: 2327\\n}));\\n// from Niklas\\nvar items3 = [\\n {name:\\\"desk lamp\\\",weight:1,value:1000},\\n {name:\\\"beach towel\\\",weight:29,value:900},\\n {name:\\\"textbook\\\",weight:1,value:899},\\n {name:\\\"wall clock\\\",weight:1,value:850},\\n];\\nTest.assertSimilar(Test.inspect(knapsack(30, items3)), Test.inspect({\\n  capacity: 30,\\n  items: [\\n    {name:'desk lamp', weight:1,value:1000},\\n    {name:'textbook', weight:1,value:899},\\n    {name:'wall clock', weight:1,value:850}\\n  ],\\n  weight: 3,\\n  value: 2749\\n}));\",\"language\":\"javascript\",\"summary\":\"Given a knapsack with a certain weight capacity, fill it with loot from a list of items to achieve the highest value possible.\\n\\nThe function takes two parameters: an int specifying the maximum weight the knapsack can hold, and an array of item Objects to choose from. Each item has a name, a weight, and a value. The total weight of all chosen items cannot excee\",\"tags\":[\"algorithms\",\"recursion\",\"objects\"],\"timestamp\":{\"$date\":1489612904825},\"title\":\"A Knapsack\",\"stats\":{\"completed\":{\"total\":36,\"ratings\":[2,2,2,2,2,2,2,3,2,4,2,3,3,5,3,3,3,5,4,1,4,3,3,3,5,3,5,0,5,4,0,4,4,2,0,5,1],\"rators\":[\"hi7Hvtq2mJfkXEGF2\",\"9sFck4LMhD4qCJfQe\",\"6QR2QdW689ihtHjan\",\"xhztefZrh299JXeiM\",\"65dbBZynphj53nXqA\",\"PADbPTWHgi7KKhH7Q\",\"LDc8cMrTShPkzyEXd\",\"TwtgrBTHiCnkP584n\",\"AgQburWndXwEhgomM\",\"EXL3wKm6B3BgdaRn3\",\"CboSWibFb53fm9nJn\",\"eZbCrJJPXQo9RNgE3\",\"Rpnp2ogStgBnXbfop\",\"thEsZ7N6X8qfZMbcv\",\"6ir9H6TvDxyGL4kvG\",\"6rRSh53xaxhFqWpv5\",\"D8sujcqLQTqMTtFwj\",\"XHngE5iScvztMpnR2\",\"XcHCqYmeoqxDsoucx\",\"LF7rbv4xECxGiQaTA\",\"e8ftyJ6nKRtZDwGWJ\",\"4cpwKa845ckBqqSYB\",\"QCchMDx3z8NcqT8QJ\",\"m9qSGaZgDcLGperza\",\"eq9dWq4Q6bPCG4AsA\",\"yjtdwc2AC4jA2RWtn\",\"Grvxszx5jLiFFkTXK\",\"gGnDsJz5hr2t9MKCF\",\"ZiGqT85fEthnNiQMn\",\"cRpaCxYRmGcN3Nsoj\",\"h4jFmtbFn92eA4649\",\"eFjGhq7C7bBKXjT6X\",\"aEm3Wvj2rFYRL8Lrb\",\"vGKxRcDYDsXzTQuEQ\"],\"quality\":[5]},\"complaints\":{\"total\":2,\"reasons\":[[\"confusing\"],[\"confusing\"]],\"skippers\":[\"hi7Hvtq2mJfkXEGF2\",\"5jycY768sEzeFF7aJ\",\"sQJrrwXnTMds4ytjp\"]},\"instructions\":{\"score\":-3.9499999999999997,\"voters\":[\"KHLJJM4grqF6xmo5t\",\"Zma8ro642NQC4jZr9\",\"diPcF5ZoRknShPf6A\",\"jLwJD5muQdupRHviN\",\"fqcrn5MA9Yssmxiaj\",\"LF7rbv4xECxGiQaTA\",\"a9CKSzdeeoMCeSTcK\",\"5JFQgt6KFihmXfHKm\",\"yEo9a3rAhSRpycs2d\",\"yQLFbFdmKwdLC79bF\"]},\"tests\":{\"score\":-0.8,\"voters\":[\"4cpwKa845ckBqqSYB\"]},\"flags\":1},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":5,\"family\":[{\"_id\":\"uqwmC7RJF98xr3TiD\",\"language\":\"javascript\"},{\"_id\":\"oFwoAA62gRvX5agEN\",\"language\":\"python3\"}]}}"]