a["{\"msg\":\"result\",\"id\":\"2215\",\"result\":{\"_id\":\"GnF85aA7XgZdZYrZp\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"function isHappy(int n) {\\n\\t\\n}\",\"difficulty\":3.388888888888889,\"quality\":0,\"familyId\":\"49QQ7SqTT68etHGdA\",\"instructions\":\"A **happy number** is a number which yields a `1` by repeatedly summing up the square of its digit. If such a process results in an endless cycle of numbers containing `4`, the number is said to be an **unhappy number**.\\n\\nCreate a function that accepts a number and determines whether the number is a *happy number* or not. Return `true` if so, `false` otherwise.\\n\\n### Examples\\n```\\nisHappy(67) ➞ false\\n\\nisHappy(89) ➞ false\\n\\nisHappy(139) ➞ true\\n\\nisHappy(1327) ➞ false\\n\\nisHappy(2871) ➞ false\\n\\nisHappy(3970) ➞ true\\n```\\n\\n### Notes\\n- You are expected to solve this challenge via recursion.\\n- You can check on the **Resources** tab for more details about recursion.\\n- A non-recursive version of this challenge can be found [here](https://edabit.com/challenge/y3e9Xdemxr65JQFX8).\",\"isHidden\":false,\"lab\":\"const recursive = f => (`${f}`.match(RegExp(`${f.name}`,'gm'))||[]).length > +(/function/.test(f))\\nTest.assertNotEquals(recursive(isHappy), false, \\\"Recursion is required!\\\")\\n\\nlet [numVector, resVector] = [\\n  [1, 10, 44, 67, 89, 139, 1327, 2871, 3970, 5209, 6329, 8888, 9331, 10000],\\n  [true, true, true, false, false, true, false, false, true, false, true, false, true, true]\\n]\\nfor (let i in numVector) Test.assertEquals(isHappy(numVector[i]), resVector[i])\",\"language\":\"javascript\",\"summary\":\"A happy number is a number which yields a 1 by repeatedly summing up the square of its digit. If such a process results in an endless cycle of numbers containing 4, the number is said to be an unhappy number.\\n\\nCreate a function that accepts a number and determines whether the number is a happy number or not. Return true if so, false otherwise.\\n\\nExamples\\nisHapp\",\"tags\":[\"arrays\",\"recursion\",\"validation\"],\"timestamp\":{\"$date\":1601358608489},\"title\":\"Recursion: Happy Number\",\"stats\":{\"completed\":{\"total\":35,\"ratings\":[5,5,5,5,5,4,4,1,1,2,3,4,4,4,3,2,5,4,5,4,4,4,2,5,3,2,4,2,5,3,2,0,2,3,3,3],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"buX4mCQhtXCfBjeno\",\"iJC8PmpzSyTnEDqw5\",\"yjtdwc2AC4jA2RWtn\",\"mHT2bJb5SByfJ8yKS\",\"sYJKcRHeWxTBoAdaL\",\"bX6tpTCjwoi6XMMbK\",\"nmCGPMRuHbH99aEip\",\"DjChaA6HXG2vBe4fK\",\"va3fDAQm4sqSMoy3R\",\"aEm3Wvj2rFYRL8Lrb\",\"tAF9Gf6PiGogbZuWs\",\"Es4eX2stRpyoXeC7f\",\"u9cRf5kvtpRB5ffB3\",\"Ab7ZaCrjXSGeuuDHa\",\"Bu6P6GYejjbJ8EiA3\",\"6vfjruFp8ZpRSi3AT\",\"DPi9QGLctq2y76KuE\",\"QRv96jmNaYsWkxQEG\",\"AasGs8AeX9Lcb9xJn\",\"wJTDDTE3TrmSXKP4d\",\"s678Wirfor5uYL5T6\",\"PH32cNxBjrK4a28sn\",\"8BJyXvRWcrvN3nttS\",\"en7JTZ8xWqv2YHhz4\",\"CBRx8seBYyYKqvMi3\",\"84zK8v8QyNxWbEAk5\",\"fYb5FSoEXexprjDXA\",\"TtrXnGzi9MyhLvWiz\",\"mGaEDPw5FsDb3vdnq\",\"JZ7hzwyx5hgqyACcK\"]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"a777e8chPvJkY3tKa\",\"family\":[{\"_id\":\"oibF2LtNoiGsJuj6b\",\"language\":\"java\"},{\"_id\":\"GnF85aA7XgZdZYrZp\",\"language\":\"javascript\"},{\"_id\":\"J9fCHDa3yYJWnK3A7\",\"language\":\"python3\"}]}}"]