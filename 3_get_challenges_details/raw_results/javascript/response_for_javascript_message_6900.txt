a["{\"msg\":\"result\",\"id\":\"2193\",\"result\":{\"_id\":\"rGTJckjQsBDq2M8WL\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"function sudokuValidator(x) {\\n\\t\\n}\",\"difficulty\":3.3087248322147653,\"editorId\":\"mNMQvcxKSSvqqMYCH\",\"familyId\":\"xs3FoXXKyhgaJWpjL\",\"instructions\":\"Write a **sudoku validator**. This function should return `true` if the 2-D array represents a valid sudoku and `false` otherwise. To be a valid sudoku:\\n\\n1. Each row must have the digits from 1 to 9 exactly once.\\n2. Each column must have the digits from 1 to 9 exactly once.\\n3. Each 3x3 box must have the digits from 1 to 9 exactly once.\\n\\n### Examples\\n```\\nsudokuValidator([\\n  [ 1, 5, 2, 4, 8, 9, 3, 7, 6 ],\\n  [ 7, 3, 9, 2, 5, 6, 8, 4, 1 ],\\n  [ 4, 6, 8, 3, 7, 1, 2, 9, 5 ],\\n  [ 3, 8, 7, 1, 2, 4, 6, 5, 9 ],\\n  [ 5, 9, 1, 7, 6, 3, 4, 2, 8 ],\\n  [ 2, 4, 6, 8, 9, 5, 7, 1, 3 ],\\n  [ 9, 1, 4, 6, 3, 7, 5, 8, 2 ],\\n  [ 6, 2, 5, 9, 4, 8, 1, 3, 7 ],\\n  [ 8, 7, 3, 5, 1, 2, 9, 6, 4 ]\\n]) ➞ true\\n\\nsudokuValidator([\\n  [ 1, 1, 2, 4, 8, 9, 3, 7, 6 ],\\n  [ 7, 3, 9, 2, 5, 6, 8, 4, 1 ],\\n  [ 4, 6, 8, 3, 7, 1, 2, 9, 5 ],\\n  [ 3, 8, 7, 1, 2, 4, 6, 5, 9 ],\\n  [ 5, 9, 1, 7, 6, 3, 4, 2, 8 ],\\n  [ 2, 4, 6, 8, 9, 5, 7, 1, 3 ],\\n  [ 9, 1, 4, 6, 3, 7, 5, 8, 2 ],\\n  [ 6, 2, 5, 9, 4, 8, 1, 3, 7 ],\\n  [ 8, 7, 3, 5, 1, 2, 9, 6, 4 ]\\n]) ➞ false\\n```\\n\\n### Notes\\nN/A\",\"lab\":\"// Validate 3 x 3 Boxes\\nTest.assertEquals(sudokuValidator(\\n[ [ 1, 5, 2, 4, 8, 9, 3, 7, 6 ],\\n  [ 7, 3, 9, 2, 5, 6, 8, 4, 1 ],\\n  [ 4, 6, 5, 3, 7, 1, 2, 9, 8 ],\\n  [ 3, 8, 7, 1, 2, 4, 6, 5, 9 ],\\n  [ 8, 9, 1, 7, 6, 3, 4, 2, 5 ],\\n  [ 2, 4, 6, 5, 9, 8, 7, 1, 3 ],\\n  [ 9, 1, 4, 6, 3, 7, 5, 8, 2 ],\\n  [ 6, 2, 8, 9, 4, 5, 1, 3, 7 ],\\n  [ 5, 7, 3, 8, 1, 2, 9, 6, 4 ] ]), \\nfalse)\\n\\n//\\nTest.assertEquals(sudokuValidator(\\n[ [ 1, 5, 2, 4, 8, 9, 3, 7, 6 ],\\n  [ 7, 3, 9, 2, 5, 6, 8, 4, 1 ],\\n  [ 4, 6, 8, 3, 7, 1, 2, 9, 5 ],\\n  [ 3, 8, 7, 1, 2, 4, 6, 5, 9 ],\\n  [ 5, 9, 1, 7, 6, 3, 4, 2, 8 ],\\n  [ 2, 4, 6, 8, 9, 5, 7, 1, 3 ],\\n  [ 9, 1, 4, 6, 3, 7, 5, 8, 2 ],\\n  [ 6, 2, 5, 9, 4, 8, 1, 3, 7 ],\\n  [ 8, 7, 3, 5, 1, 2, 9, 6, 4 ] ]), \\ntrue)\\n\\nTest.assertEquals(sudokuValidator(\\n[ [ 8, 2, 7, 1, 5, 4, 3, 9, 6 ],\\n  [ 9, 6, 5, 3, 2, 7, 1, 4, 8 ],\\n  [ 3, 4, 1, 6, 8, 9, 7, 5, 2 ],\\n  [ 5, 9, 3, 4, 6, 8, 2, 7, 1 ],\\n  [ 4, 7, 2, 5, 1, 3, 6, 8, 9 ],\\n  [ 6, 1, 8, 9, 7, 2, 4, 3, 5 ],\\n  [ 7, 8, 6, 2, 3, 5, 9, 1, 4 ],\\n  [ 1, 5, 4, 7, 9, 6, 8, 2, 3 ],\\n  [ 2, 3, 9, 8, 4, 1, 5, 6, 7 ] ]), \\ntrue)\\nTest.assertEquals(sudokuValidator(\\n[ [ 8, 2, 7, 1, 5, 4, 3, 9, 6 ],\\n  [ 9, 6, 5, 3, 2, 7, 1, 4, 8 ],\\n  [ 3, 4, 1, 6, 8, 9, 7, 5, 2 ],\\n  [ 5, 9, 3, 4, 6, 8, 2, 7, 1 ],\\n  [ 4, 7, 2, 5, 1, 5, 6, 8, 9 ],\\n  [ 6, 1, 8, 9, 7, 2, 4, 3, 5 ],\\n  [ 7, 8, 6, 2, 3, 5, 9, 1, 4 ],\\n  [ 1, 5, 4, 7, 9, 6, 8, 2, 3 ],\\n  [ 2, 3, 9, 8, 4, 1, 5, 6, 7 ] ]), \\nfalse)\\n\\nTest.assertEquals(sudokuValidator(\\n[ [ 1, 5, 2, 4, 8, 9, 3, 7, 6 ],\\n  [ 3, 3, 9, 2, 5, 6, 8, 4, 1 ],\\n  [ 4, 6, 8, 3, 7, 1, 2, 9, 5 ],\\n  [ 3, 8, 7, 1, 2, 4, 6, 5, 9 ],\\n  [ 5, 9, 1, 7, 6, 3, 4, 2, 8 ],\\n  [ 2, 4, 6, 8, 9, 5, 7, 1, 3 ],\\n  [ 9, 1, 4, 6, 3, 7, 5, 8, 2 ],\\n  [ 6, 2, 5, 9, 4, 8, 1, 3, 7 ],\\n  [ 8, 7, 3, 5, 1, 2, 9, 6, 4 ] ]), \\nfalse)\\n\\n\\n\\n// Additional Tests \\nTest.assertEquals(sudokuValidator(\\n[ [ 5, 3, 4, 6, 7, 8, 9, 1, 2 ],\\n  [ 6, 7, 2, 1, 9, 5, 3, 4, 8 ],\\n  [ 1, 9, 8, 3, 4, 2, 5, 6, 7 ],\\n  [ 8, 5, 9, 7, 6, 1, 4, 2, 3 ],\\n  [ 4, 2, 6, 8, 5, 3, 7, 9, 1 ],\\n  [ 7, 1, 3, 9, 2, 4, 8, 5, 6 ],\\n  [ 9, 6, 1, 5, 3, 7, 2, 8, 4 ],\\n  [ 2, 8, 7, 4, 1, 9, 6, 3, 5 ],\\n  [ 3, 4, 5, 2, 8, 6, 1, 7, 9 ] ]), \\ntrue)\\n\\nTest.assertEquals(sudokuValidator(\\n[ [ 1, 5, 2, 4, 6, 9, 3, 7, 8 ],\\n  [ 7, 8, 9, 2, 1, 3, 4, 5, 6 ],\\n  [ 4, 3, 6, 5, 8, 7, 2, 9, 1 ],\\n  [ 6, 1, 3, 8, 7, 2, 5, 4, 9 ],\\n  [ 9, 7, 4, 1, 5, 6, 8, 2, 3 ],\\n  [ 8, 2, 5, 9, 3, 4, 1, 6, 7 ],\\n  [ 5, 6, 7, 3, 4, 8, 9, 1, 2 ],\\n  [ 2, 4, 8, 6, 9, 1, 7, 3, 5 ],\\n  [ 3, 9, 1, 7, 2, 5, 6, 8, 4 ] ]), \\ntrue)\\n\\nTest.assertEquals(sudokuValidator(\\n[ [ 2, 5, 1, 4, 6, 9, 3, 7, 8 ],\\n  [ 7, 8, 9, 2, 1, 3, 4, 5, 6 ],\\n  [ 4, 3, 6, 5, 8, 7, 2, 9, 1 ],\\n  [ 6, 1, 3, 8, 7, 2, 5, 4, 9 ],\\n  [ 9, 7, 4, 1, 5, 6, 8, 2, 3 ],\\n  [ 8, 2, 5, 9, 3, 4, 1, 6, 7 ],\\n  [ 5, 6, 7, 3, 4, 8, 9, 1, 2 ],\\n  [ 2, 4, 8, 6, 9, 1, 7, 3, 5 ],\\n  [ 3, 9, 1, 7, 2, 5, 6, 8, 4 ] ]), \\nfalse)\\n\\nTest.assertEquals(sudokuValidator(\\n[ [ 5, 3, 4, 6, 7, 8, 9, 1, 2 ],\\n  [ 6, 7, 2, 1, 9, 5, 3, 4, 8 ],\\n  [ 1, 9, 8, 3, 4, 2, 5, 6, 7 ],\\n  [ 8, 5, 9, 7, 6, 1, 4, 2, 3 ],\\n  [ 4, 2, 6, 8, 5, 3, 7, 9, 1 ],\\n  [ 7, 1, 3, 2, 9, 4, 8, 5, 6 ],\\n  [ 9, 6, 1, 5, 3, 7, 2, 8, 4 ],\\n  [ 2, 8, 7, 4, 1, 9, 6, 3, 5 ],\\n  [ 3, 4, 5, 2, 8, 6, 1, 7, 9 ] ]), \\nfalse)\\n\\nTest.assertEquals(sudokuValidator(\\n[ [ 1, 3, 4, 6, 7, 8, 9, 1, 2 ],\\n  [ 6, 7, 2, 1, 9, 5, 3, 4, 8 ],\\n  [ 5, 9, 8, 3, 4, 2, 5, 6, 7 ],\\n  [ 8, 5, 9, 7, 6, 1, 4, 2, 3 ],\\n  [ 4, 2, 6, 8, 5, 3, 7, 9, 1 ],\\n  [ 7, 1, 3, 9, 2, 4, 8, 5, 6 ],\\n  [ 9, 6, 1, 5, 3, 7, 2, 8, 4 ],\\n  [ 2, 8, 7, 4, 1, 9, 6, 3, 5 ],\\n  [ 3, 4, 5, 2, 8, 6, 1, 7, 9 ] ]), \\nfalse)\",\"language\":\"javascript\",\"summary\":\"Write a sudoku validator. This function should return true if the 2-D array represents a valid sudoku and false otherwise. To be a valid sudoku:\\n\\nEach row must have the digits from 1 to 9 exactly once.\\nEach column must have the digits from 1 to 9 exactly once.\\nEach 3x3 box must have the digits from 1 to 9 exactly once.\\n\\nExamples\\nsudokuValidator([\\n  [ 1, 5, 2,\",\"tags\":[\"higher_order_functions\",\"validation\",\"functional_programming\"],\"timestamp\":{\"$date\":1554145655612},\"title\":\"Sudoku Validation\",\"stats\":{\"completed\":{\"total\":169,\"ratings\":[3,3,3,3,3,3,3,3,3,3,2,4,3,5,3,4,0,1,4,4,0,3,4,2,3,5,4,3,4,3,5,2,2,1,2,3,3,4,4,5,3,2,3,4,2,5,5,3,5,5,2,5,2,3,5,2,2,4,3,3,2,4,1,2,5,5,3,0,0,5,3,4,0,5,5,0,5,3,5,5,5,5,5,4,5,4,2,5,2,4,5,3,3,2,1,3,3,5,3,4,3,2,3,3,3,2,4,2,5,3,3,5,3,5,5,5,5,3,5,2,4,4,3,2,4,5,1,2,3,1,3,3,3,5,3,3,2,5,2,5,5,2,2,5,5,5,5,3,2],\"rators\":[\"mNMQvcxKSSvqqMYCH\",\"65dbBZynphj53nXqA\",\"SDtZFL5NzAoCPofXk\",\"ZSmK3SkWSLknfrkfQ\",\"voSLsx6ik4Fm7BWas\",\"2dh3D93pXqFerJ48s\",\"nr7jKeHEE3TC9oyp4\",\"puF7tgr34fjsLXiDT\",\"eGbeApnmKSS65FDAt\",\"CJnuSjyCBMTbTiibD\",\"8xuMMGF7fyQWL2fKH\",\"hQ9kqSqvbjgvuZrXy\",\"n5wubRfh6zh8QRymN\",\"rSJGLYSXMuu3RWjun\",\"yjtdwc2AC4jA2RWtn\",\"mHT2bJb5SByfJ8yKS\",\"HrPgEHxQxom64ojNZ\",\"5Zq3aGdvh4LHBvnJL\",\"ihTSN4G98CHRmZqra\",\"ALxceXjbezypRqj7t\",\"EoNHgbWsF6ZQF4eYr\",\"jAJx9vk7M9nnFmZWz\",\"FgGwspAA6jGQm7kak\",\"YrfAw87X58rMYnznC\",\"ydEdzuCCZt4yny9Rq\",\"K6wDbDxqkKqf7Cx74\",\"cRpaCxYRmGcN3Nsoj\",\"YER6iBcpJCuhgrYDN\",\"vewKwcMeGuk3p3MsN\",\"Zbqfaz53qsXYEqpJS\",\"FJsvM5yqKuK9yMk9P\",\"zN2JsQE3qPn6AtKs7\",\"jczicn49tbsX2n9Wn\",\"a7LBurCmz5n6gECbv\",\"Sk8jRXuycZFn2ND6Z\",\"m2nxTAnzyqdtaNSEe\",\"kMNSe8E8jviNREjzr\",\"ZXRMRAJNP6eseLdbR\",\"mF4TfPQQMzbuN7XLg\",\"TbnsQJRPjkBdDagrx\",\"8Gw94yAJWfg4oxuPw\",\"TbazbALKGNXb9RdBx\",\"Es4eX2stRpyoXeC7f\",\"9sjJNmiEFf7HxTN4G\",\"C9vA9ih54wDMKhYYT\",\"rZTu8vyq4CzXBpspH\",\"eS876Rkwf2y38nt4a\",\"6d2EnWAuMGnhwyyc4\",\"zMCXYFZSsviDCvjnY\",\"nBo2LLuSMeEgd5f6G\",\"7dZm8yZnenQb7xEwn\",\"6rxwAhYBPX2bjLkCz\",\"ebPdPyTHed8opA6K7\",\"AMKkrzLGTmCKQD2fZ\",\"KbnMrx599baroip9W\",\"ByXaraYa5tzFG8Gmj\",\"MxMdWPJ6WHmk7mt3i\",\"7AjZRxyi2fsPAFksE\",\"8jjABMp8n3WYGhvNG\",\"RsGrFek744L68XCmT\",\"ignicEPWki6QJRAfm\",\"QfryzFn4wXsWp6vdM\",\"zPGWfS6GuoZegRyNk\",\"MNDLmXZmFMf8ASL2L\",\"wcgDoaKbZtbCGPu6K\",\"7TXyMDHFYjna3dyPb\",\"c2MrDxpuJ8JJzYWoR\",\"rfyYC78YGZWcBoio4\",\"Zosf6RusrBPxcp6c5\",\"PPwLTvgxQioFQhtgj\",\"PzEW65sZbgwQQdeTb\",\"Swwue5wuh9F4AZqsf\",\"twPteuytXJ8RrT8md\",\"4Na3H3x6Zq6w3Zxqu\",\"8raviPK67KKxzQWcF\",\"ziFucvfSdsH8D6AzK\",\"vKAN9PHyYPd6Nyt37\",\"TMCSwe7f7SjZgmXZm\",\"JGBCMpnbbi5ztuFoX\",\"XzptFLihXCumCkivS\",\"df5b3rdnsmThv6SfJ\",\"eFjGhq7C7bBKXjT6X\",\"auMqvWdfF3X9BPR8k\",\"7Nz3GAqN3SMgSiyTT\",\"zLgeNQ8KGB8HmQgZp\",\"sjpwS4oXNmbfWYYkA\",\"jaooQkwdysgrCcCcf\",\"7ruSdfLTRKgEXhhvA\",\"Ac6u9uxPiFD5D8tfr\",\"xTtXsWfKh8S5kEP2y\",\"SNt23Ei5dSNtfpEMd\",\"aEm3Wvj2rFYRL8Lrb\",\"x5Lr3XtLph7kpWN8y\",\"H7HdP6j4pTm7Gy3Cu\",\"sZ2eCa6pF6EN9PMmd\",\"KG5kJoP68PaZCASxF\",\"s5oTsLDcumWgkiAW6\",\"zXL5t2ZfLBMCrQXYM\",\"REnyGLLpfcMDHXsTS\",\"qvNk7pHSveLu3jqWw\",\"q6Q3zCAosPGX5T2Ji\",\"NoBwsf2ZYoRQaCD9J\",\"9qQEDELhzg58uSvjg\",\"xmMqX6Dkh7yxb7ycH\",\"NS3p5r2hLBcq3EdrQ\",\"hyx8iH2z3QySmyRKT\",\"a777e8chPvJkY3tKa\",\"Su3vDnttRBpxeyDen\",\"uP9SRKxpG4GjKkKq5\",\"buX4mCQhtXCfBjeno\",\"nmCGPMRuHbH99aEip\",\"ffB8T76Ye9ygL6QZZ\",\"jAB3aWnAqfpkehBqt\",\"7hXDHFcBp6ytxjA5f\",\"x6PSyGNmLLgDHRHJD\",\"WdgtZfWFz7WfwveXR\",\"bXaGdBM8FBLHf7N6Y\",\"ZcJm2kuqJnN3CXFaR\",\"sYJKcRHeWxTBoAdaL\",\"va3fDAQm4sqSMoy3R\",\"pWJWQDhqzDSmfaFam\",\"srRf3db4Pj7efra5z\",\"ZtksLbeNMGapNmJvD\",\"c8qtrDgBAsTfBAD3S\",\"u9cRf5kvtpRB5ffB3\",\"sNcDN3s3rH9wcNg5n\",\"f6K5wzQW2fzYvgE98\",\"BTdKRxKHXHDDD4934\",\"mDWNyaaQ9hvPCRzSd\",\"Ek9PiwGewEGH6fcqz\",\"yQtGE2egvwYnNQSFc\",\"8SYDBRtkZuW3pdPtG\",\"6DSdGxu5TeDtua7Fw\",\"qPqmhXzgTMmaFRy87\",\"ySiAP3b4Eb9edaff6\",\"5NGxHLcQ8Af2RJ4TN\",\"pgCvP4WZd85sjBbLN\",\"qQeLW3djaFSwXN5qn\",\"SPdyaDpL3yZjjkHcu\",\"yr822PZmmiDDenxpB\",\"2sLmHo7G2irSyrDB7\",\"QjGNkRM3Xc78yShJN\",\"Kk3jdrvAbPENkw5Ft\",\"QJM5KcENEwS24NDs7\",\"DTgPgvQN6jKLw4aQZ\",\"dWvav2ZS5cyqawdBt\",\"Xk2g4CNFAnYcvxiSr\",\"8TTdgJThtKTy8Y9rv\",\"bYcGBNrjmPSkeKyfJ\",\"YQdHYk5JsyjDyvkma\",\"pd8dm7sWLW9cY6dYW\",\"GMtbB3ckwdd66myNh\",\"tAF9Gf6PiGogbZuWs\",\"8BJyXvRWcrvN3nttS\",\"DPi9QGLctq2y76KuE\",\"xTjngWnFNWn4jJw7N\",\"7wtuhPesfhcYsfZaZ\",\"8qWJNTsbyLpqmwrme\"],\"quality\":[5,5,5,2,5,5,5,5,5,5,5,5,4,5,5,5,5,5]},\"tests\":{\"score\":0,\"voters\":[\"mNMQvcxKSSvqqMYCH\"]},\"instructions\":{\"score\":0,\"voters\":[\"mNMQvcxKSSvqqMYCH\"]},\"flags\":0},\"isHidden\":false,\"quality\":4.777777777777778,\"family\":[{\"_id\":\"pn98BSiyPAqyi2d5W\",\"language\":\"cpp\"},{\"_id\":\"rGTJckjQsBDq2M8WL\",\"language\":\"javascript\"},{\"_id\":\"4afgmFpLP6CpwtRMY\",\"language\":\"python3\"},{\"_id\":\"4zbniwkqGsisHFLnq\",\"language\":\"ruby\"},{\"_id\":\"8HvxzPPudwZfGnJux\",\"language\":\"swift\"}]}}"]