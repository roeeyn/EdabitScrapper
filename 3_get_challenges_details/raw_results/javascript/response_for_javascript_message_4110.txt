a["{\"msg\":\"result\",\"id\":\"809\",\"result\":{\"_id\":\"4BeTkEwBXeuSKJTYe\",\"author\":\"Harith\",\"authorId\":\"Ynw596LiAeaYq29os\",\"code\":\"function malthusian(foodGrowth, popMult) {\\n\\t\\n}\",\"difficulty\":1.5357142857142858,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"oCfJhjcSrkXh3T5ck\",\"instructions\":\"A man named Thomas Malthus described what is now called a _Malthusian Catastrophe_. According to him, food production grows by a fixed amount, but population grows by a percentage. So, the food supply would soon be insufficient for the population.\\n\\nYour job is to find out when that will occur. For this challenge, assume 1 population needs 1 unit of food production. Food production and population both start at 100. The year starts at 0.\\n\\nThe catastrophe happens when the population is larger than food production.\\n\\nThe function will pass:\\n\\n- `foodGrowth` \u2060— an integer \u2060— food production increase per year.\\n- `popMult` \u2060— a floating-point number \u2060— population growth multiplier per year.\\n\\n### Examples\\n```\\nmalthusian(4255, 1.41) ➞ 20\\n// { foodProd: 85,200, pop: 96,467.77..., year: 20 }\\n\\nmalthusian(9433, 1.09) ➞ 107\\n// { foodProd: 1,009,431, pop: 1,010,730.28..., year: 107 }\\n\\nmalthusian(5879, 1.77) ➞ 12\\n// { foodProd: 70,648, pop: 94,553.84..., year: 12 }\\n```\\n\\n### Notes\\n- Return the year that the overtake happens, not the next year.\\n- Make sure you don't make the mistake of adding a year,  _then_ calculating the changes to **food** and **population**. That way, you miss year 0.\\n- If the population and food production are equal, that is _not_ a catastrophe.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assertEquals(malthusian(3900, 1.26), 31)\\nTest.assertEquals(malthusian(3367, 1.16), 51)\\nTest.assertEquals(malthusian(2393, 1.86), 9)\\nTest.assertEquals(malthusian(6560, 1.66), 14)\\nTest.assertEquals(malthusian(8481, 1.35), 26)\\nTest.assertEquals(malthusian(3805, 1.98), 9)\\nTest.assertEquals(malthusian(9492, 1.06), 166)\\nTest.assertEquals(malthusian(8278, 1.35), 26)\\nTest.assertEquals(malthusian(1228, 1.91), 7)\\nTest.assertEquals(malthusian(4791, 1.25), 34)\\nTest.assertEquals(malthusian(8194, 1.12), 78)\\nTest.assertEquals(malthusian(7418, 1.63), 15)\\nTest.assertEquals(malthusian(8700, 1.18), 51)\\nTest.assertEquals(malthusian(1066, 1.78), 8)\\nTest.assertEquals(malthusian(811, 1.46), 13)\\nTest.assertEquals(malthusian(7836, 1.33), 27)\\nTest.assertEquals(malthusian(4082, 1.54), 15)\\nTest.assertEquals(malthusian(4859, 1.87), 10)\\nTest.assertEquals(malthusian(4656, 1.44), 19)\\nTest.assertEquals(malthusian(2214, 1.53), 14)\\nTest.assertEquals(malthusian(1240, 1.10), 72)\\nTest.assertEquals(malthusian(4434, 1.21), 40)\\nTest.assertEquals(malthusian(2995, 1.51), 15)\\nTest.assertEquals(malthusian(578, 1.10), 62)\\nTest.assertEquals(malthusian(9768, 1.47), 20)\\nTest.assertEquals(malthusian(1508, 1.10), 74)\\nTest.assertEquals(malthusian(6311, 1.54), 17)\\nTest.assertEquals(malthusian(5502, 1.70), 13)\\nTest.assertEquals(malthusian(3170, 1.68), 12)\\nTest.assertEquals(malthusian(7139, 1.10), 93)\\nTest.assertEquals(malthusian(7385, 1.56), 16)\\nTest.assertEquals(malthusian(5845, 1.66), 14)\\nTest.assertEquals(malthusian(9937, 1.74), 13)\\nTest.assertEquals(malthusian(6516, 1.13), 69)\\nTest.assertEquals(malthusian(1973, 1.85), 9)\\nTest.assertEquals(malthusian(8045, 1.65), 15)\\nTest.assertEquals(malthusian(9784, 1.12), 79)\\nTest.assertEquals(malthusian(4520, 1.11), 79)\\nTest.assertEquals(malthusian(217, 1.17), 26)\\nTest.assertEquals(malthusian(1840, 1.37), 19)\\nTest.assertEquals(malthusian(7702, 1.08), 119)\\nTest.assertEquals(malthusian(6217, 1.16), 55)\\nTest.assertEquals(malthusian(7812, 1.96), 10)\\nTest.assertEquals(malthusian(8381, 1.80), 12)\\nTest.assertEquals(malthusian(9284, 1.11), 87)\\nTest.assertEquals(malthusian(6068, 1.71), 13)\\nTest.assertEquals(malthusian(5486, 1.86), 11)\\nTest.assertEquals(malthusian(2197, 1.27), 27)\\nTest.assertEquals(malthusian(3182, 1.40), 20)\\nTest.assertEquals(malthusian(8196, 1.55), 17)\\nTest.assertEquals(malthusian(3513, 1.20), 40)\\nTest.assertEquals(malthusian(4152, 1.24), 34)\\nTest.assertEquals(malthusian(2886, 1.79), 10)\\nTest.assertEquals(malthusian(1646, 1.63), 11)\\nTest.assertEquals(malthusian(8030, 1.18), 51)\\nTest.assertEquals(malthusian(2514, 1.10), 80)\\nTest.assertEquals(malthusian(1345, 1.53), 12)\\nTest.assertEquals(malthusian(877, 1.96), 6)\\nTest.assertEquals(malthusian(2035, 1.26), 28)\\nTest.assertEquals(malthusian(6007, 1.52), 17)\\n\\n// By Harith Shah\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[1,1,1,1,1,0,2,1,1,0,0,3,0,1,1,1,2,1,2,1,2,2,1,2,1,1,2,2,1,2,1,1,0,2,2,2,1,2,2,1,2,1,2,2,1,1,2,1,1,2,1,2,2,1,0,3,2,1,1,2,1,1,2,2,2,1,2,1,2,2,2,1,1,0,2,2,1,2,2,2,2,0,2,0,3,2,1,3,1,2,1,2,0,3,2,2,2,2,2,2,2,2,2,0,2,2,1,0,0,2,2,2,1,3,2,2,2,2,0,2,1,2,2,2,1,2,2,2,1,1,1,3,2,2,1,2,2,1,2,1,2,2,2,2,1,1,1,2,2,2,2,1,2,2,2,2,5,1,1,2,2,1,2,2,2,1,0,1],\"rators\":[\"Ynw596LiAeaYq29os\",\"mHT2bJb5SByfJ8yKS\",\"ZKxZGNszGr96RjY5N\",\"5Zq3aGdvh4LHBvnJL\",\"yjtdwc2AC4jA2RWtn\",\"zd9FLSzsGz3evKafy\",\"jHoeFsp7YR24eRRtE\",\"DHwbkbzYNpmkSFT7u\",\"RX4NMnxKcQvDifp62\",\"d9LBRxvADNBB5QJMB\",\"5NE62nxhQGmzBWMhG\",\"hdEyGDD22xgkLZ2Pb\",\"7KkH4DWNkJirGuouK\",\"YER6iBcpJCuhgrYDN\",\"GdbfKLmDFpMmxECXA\",\"Lky8DMnnA2MNo8rAq\",\"p9xbSWBQFe5BMs9sx\",\"9XnGoq9Tv6ut3zTtH\",\"2CvHJcA9aXt9pvZwA\",\"cJwiiiX7qwSvgtmk8\",\"vtHbevf2tHqe6mRxX\",\"5PmsJ8jPhBkaMx7xP\",\"2innwjWqxJHo4eRGh\",\"zTZtM9jRsu8eXie6s\",\"w6g99NtkT8v53kMnh\",\"YzLMKaHE2cyZYKxLe\",\"umE8dRTGWzrZFp755\",\"s5zzhdSQFAa9PbYur\",\"7KSZzWdPgwR8t3nmX\",\"qwoCTiEq4TavzKAYE\",\"fTvkjxYbwaEuR7LBC\",\"MazNAQPtY83rbcwFT\",\"dBb6aHEGddvYffa35\",\"kSwn99qBApoSKTn8w\",\"dDFJpK4pXCsQYuHmc\",\"JLzfmQ5x4weTZKhLt\",\"CJBPyyfyaEeEo63sb\",\"RE4Mm9T6Q9uygAxGS\",\"ekhcgoKnvS2uGk5kb\",\"B9mZWnKRnwuArghSw\",\"4p2sARSZNNnKqjAT6\",\"xsDyJstYoBZRS8pJH\",\"kW2SwPFmKwcoiurhb\",\"LTFnNPEYnkt86uLGE\",\"GLHRN7GQx6ica9ivn\",\"pi76g3eRpnKrhee2a\",\"CJnuSjyCBMTbTiibD\",\"jTEYLAgPszjdEYgu2\",\"k5TGxBtLi9BXxeChT\",\"n5wubRfh6zh8QRymN\",\"MzwFbhCbZwQ3DSL6Q\",\"6BpBQnSGhzgvhXrEy\",\"7JCLyrrY6JYGpocac\",\"X5TMRv7TBf7zELSXF\",\"ABxxhaDFj85bzT4Xe\",\"SNt23Ei5dSNtfpEMd\",\"PGcR9NpeXfhc6DCyW\",\"5dhCdJPnZWFKTLuRK\",\"FJsvM5yqKuK9yMk9P\",\"zgoq9MhrL2h75DAMA\",\"tPtz279rzBX8kCWMr\",\"aPwbFGyNhDHK9Ee8T\",\"jYXFFTnuWFNo72Rc5\",\"EWn8w8P3nNh7knatY\",\"9t5uWDMaPBjMRS3hi\",\"EjPLq3QSJdGQFJdgW\",\"ko7oJ85JMftgcbkrr\",\"TwGxokqsSyfnnTY22\",\"wcjknenWdPRhrRScv\",\"A9r2jcHimgFhmi9C2\",\"ZtniSFrgec4oj6Pxm\",\"eQXwk5zGckM8tCWYH\",\"Po3v3dHCk6wYGKMwi\",\"BSkoT6o2GweZkqXbc\",\"YtGYxpMxbrHLFK8nq\",\"AasGs8AeX9Lcb9xJn\",\"4TuceAZ8oTDzsjhir\",\"M7kpJSXFx67HhrTaZ\",\"cp3X8hk8yNME7qoD9\",\"eomLS3wh6tQPN8jtH\",\"a777e8chPvJkY3tKa\",\"7wtuhPesfhcYsfZaZ\",\"Gc2bmsof5vD2Hsgqv\",\"vdCH9cEJBEX782dwd\",\"ipiC2qPhKZWsAouJf\",\"Q9KQomTTPBsrkAL6c\",\"2ZFoLTxcCARhwc8xX\",\"zw7g7T8wE5R5CBhXr\",\"65dbBZynphj53nXqA\",\"tAF9Gf6PiGogbZuWs\",\"xMxdp5oCxmeuYxhpa\",\"E6DBfkTgHuPsDWdG8\",\"z5ebtimXwFFJdYxoa\",\"XfirkadGrKABrZSBw\",\"svpXWhsSLLzYR8Rz4\",\"SNiJRRosrmSWssLj4\",\"ij9YRJvZz6WbqcGXS\",\"MdNjMi3vPSmWWjja5\",\"moe6ztrsNzFymC3A7\",\"sn9HmYyS3FStbca3b\",\"p5ZshR8zhTqmdhKDc\",\"omYeJkcewaSYj6mKZ\",\"4nFXeGakoCjm5GXYa\",\"WKkWj5KoNysLpZ2hJ\",\"sAhNjH3HZ9tSSSKTX\",\"4ntYzGHHBgqf58udP\",\"2tCCFm5iefjrRSaxv\",\"i5QeAsrM4m6hzPTku\",\"ckMvGF5TAyCwcxJBm\",\"jkumHyXfMkhGcPgqC\",\"Ya3eHgs8x3unZRLpb\",\"7gZKfvwaeqsGKXMEN\",\"C9LKGu2g5hSijvDzA\",\"coTsXQZW59EjCAB9d\",\"M4vq8ATaS9Jg5X7iP\",\"aEm3Wvj2rFYRL8Lrb\",\"GR6kz7u4s3Y96iBnB\",\"evTTY9hwrtogaNxXn\",\"s9qcJASB9WKPWaQzi\",\"jcPZ5ySXseCB7Ec3x\",\"AFfw7cGg83uYk2Miy\",\"wrxHLcdBEri4cyK6W\",\"pLpcDC3EYx2DDQSdt\",\"mwg8jvMHHmQiQRrbr\",\"u9cRf5kvtpRB5ffB3\",\"DaBQKtm4xSgrxqTYF\",\"kp2ZbCewZJAbfd7xv\",\"EnHwuQZnMTG7se7iF\",\"7iJbwKmKpQa3HKe8m\",\"ttuGK7od8simjgmCJ\",\"XkPEb97Tnnvvf5fAY\",\"nxycxLNEN4PXDotSh\",\"Gt5wnm9yMNo5pG22M\",\"CNc6rmwhbxkxEhHAp\",\"pGh7WykiPe26fHJYv\",\"DDokdbBKxv49M445o\",\"BdvdJYwHZr7JpkHsn\",\"jLSZdBseR2kfjt8dL\",\"pdGuqmMyeN4wZaWwv\",\"JW5J6sdJHAmDmfWnE\",\"75NY7vqimaATzRdAX\",\"2Ni3PzJAc5fAhqBkb\",\"3WtHp4MBzciz4AE8M\",\"jd9sRTnsyeKpPggba\",\"pWJWQDhqzDSmfaFam\",\"YmMgWhzhHhQLmGGgH\",\"bBRzXPk7u95YuDWEL\",\"Yp7uvStL97cC9fKkY\",\"e9Cknxbx6o7Nb6REs\",\"3Gf7ikLijfoxabiPY\",\"m6qKkBY4aPWziyJTj\",\"9owXgx4asNriobQuJ\",\"8BJyXvRWcrvN3nttS\",\"ZtTwZM9pQ2sAzhnMR\",\"DPi9QGLctq2y76KuE\",\"e5Jtdmvy4wtz2mEns\",\"f3RAbWvE6uESq7KE5\",\"ouabBNowvhzMnMKqa\",\"2Qk2mFu9HBFzrB24i\",\"cgCQDs9i7yChKeAjE\",\"K45zPJxsABuA3WSyj\",\"wJTDDTE3TrmSXKP4d\",\"KSWyFZdpFDCXLkP56\",\"srJ34BaybkQh3qRkM\",\"LwD3CyYSiBfg3mA4r\",\"TsorkZGW3fDYvNxs9\",\"NGvCPuMiAP3xrRLfB\",\"nBJve5CzG6WAw7WFQ\",\"oDtGiNqDMHmhHE3J8\",\"n4Y5EEGCjmrK99yrt\",\"gXTAie79kiw28tx5u\",\"jyoLggHk8xQKZuoQC\",\"bfYmA3LMvhSrK59cn\",\"H3yM3F3mukfdq9fit\",\"oyB4Wr4EeZnoDaa8B\",\"TtrXnGzi9MyhLvWiz\",\"sMcFMPkMJC4Kh6ymj\",\"ZKuwzkssrSsDGNPr5\",\"uxKGACwmZ6FNZsMwE\",\"HCfkcKnPs9mrJojdG\",\"x2Cz7S8rCKJqCE3Xe\",\"gf4xrfguK6KiEF9yi\",\"qAEumdjLRx2AGAmzw\"],\"total\":186,\"quality\":[4,4,3,5,5,5,5,5,5,5,5,5,3,5,3,4,5,5,5,5]},\"flags\":0},\"summary\":\"A man named Thomas Malthus described what is now called a Malthusian Catastrophe. According to him, food production grows by a fixed amount, but population grows by a percentage. So, the food supply would soon be insufficient for the population.\\n\\nYour job is to find out when that will occur. For this challenge, assume 1 population needs 1 unit of food producti\",\"tags\":[\"conditions\",\"dates\",\"math\",\"numbers\"],\"timestamp\":{\"$date\":1582310784563},\"title\":\"Malthusian Catastrophe\",\"quality\":4.55,\"family\":[{\"_id\":\"4BeTkEwBXeuSKJTYe\",\"language\":\"javascript\"},{\"_id\":\"zDei9LFWkX9d7wXyb\",\"language\":\"python3\"},{\"_id\":\"xCgbyMvWNfebFF2yS\",\"language\":\"ruby\"}]}}"]