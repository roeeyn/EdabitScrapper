a["{\"msg\":\"result\",\"id\":\"2167\",\"result\":{\"_id\":\"ZLTwdq8n5HK7DP9Eq\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"function staircase(n) {\\n\\t// recursive code here\\n}\",\"difficulty\":3.2181818181818183,\"familyId\":\"f2s4vAnbZ3jaQ7jTq\",\"instructions\":\"Create a function that will build a staircase using the underscore `_` and hash `#` symbols. A positive value denotes the staircase's upward direction and downwards for a negative value.\\n\\n### Examples\\n```\\nstaircase(3) ➞ \\\"__#\\\\n_##\\\\n###\\\"\\n__#\\n_##\\n###\\n\\nstaircase(7) ➞ \\\"______#\\\\n_____##\\\\n____###\\\\n___####\\\\n__#####\\\\n_######\\\\n#######\\\"\\n______#\\n_____##\\n____###\\n___####\\n__#####\\n_######\\n#######\\n\\nstaircase(2) ➞ \\\"_#\\\\n##\\\"\\n_#\\n##\\n\\nstaircase(-8) ➞ \\\"########\\\\n_#######\\\\n__######\\\\n___#####\\\\n____####\\\\n_____###\\\\n______##\\\\n_______#\\\"\\n########\\n_#######\\n__######\\n___#####\\n____####\\n_____###\\n______##\\n_______#\\n```\\n\\n### Notes\\n- All inputs are either positive or negative values.\\n- The string to be returned should be adjoined with the newline character `\\\\n`.\\n- You're expected to solve this challenge using a **recursive approach**.\\n- You can read more on recursion (see **Resources** tab) if you aren't familiar with it or haven't fully understood the concept before taking this challenge.\\n- An iterative version of this challenge can be found via this [link]( https://edabit.com/challenge/inecXu7CtXyvNekxu).\\n- A **collection** of recursive challenges in JS can be found via this [link](https://edabit.com/collection/YJH4pAyqDbhLc4STc).\",\"isHidden\":false,\"lab\":\"const recursive = f => (`${f}`.match(RegExp(`${f.name}`,'gm'))||[]).length > +(/function/.test(f))\\nTest.assertNotEquals(recursive(staircase), false, \\\"Recursion is required!\\\")\\n\\nlet [numVector, resVector] = [\\n  [3, 7, 2, -8, 4, -12, 11, -6], [\\n  \\\"__#\\\\n_##\\\\n###\\\",\\n  \\\"______#\\\\n_____##\\\\n____###\\\\n___####\\\\n__#####\\\\n_######\\\\n#######\\\",\\n  \\\"_#\\\\n##\\\",\\n  \\\"########\\\\n_#######\\\\n__######\\\\n___#####\\\\n____####\\\\n_____###\\\\n______##\\\\n_______#\\\",\\n  \\\"___#\\\\n__##\\\\n_###\\\\n####\\\",\\n  \\\"############\\\\n_###########\\\\n__##########\\\\n___#########\\\\n____########\\\\n_____#######\\\\n______######\\\\n_______#####\\\\n________####\\\\n_________###\\\\n__________##\\\\n___________#\\\",\\n  \\\"__________#\\\\n_________##\\\\n________###\\\\n_______####\\\\n______#####\\\\n_____######\\\\n____#######\\\\n___########\\\\n__#########\\\\n_##########\\\\n###########\\\",\\n  \\\"######\\\\n_#####\\\\n__####\\\\n___###\\\\n____##\\\\n_____#\\\"\\n]]\\nfor (let i in numVector) Test.assertEquals(staircase(numVector[i]), resVector[i])\",\"language\":\"javascript\",\"summary\":\"Create a function that will build a staircase using the underscore _ and hash # symbols. A positive value denotes the staircase's upward direction and downwards for a negative value.\\n\\nExamples\\nstaircase(3) ➞ \\\"_#\\\\n##\\\\n###\\\"\\n__\\n_\\n\\nstaircase(7) ➞ \\\"_#\\\\n##\\\\n###\\\\n####\\\\n#####\\\\n######\\\\n#######\\\"\\n__\\n_\\n__\\n_\\n__\\n_\\n\\nstaircase(2) ➞ \\\"_#\\\\n##\\\"\\n_\\n\\nstaircase(-8) ➞ \\\"########\\\\n#####\",\"tags\":[\"recursion\",\"strings\"],\"timestamp\":{\"$date\":1595100625120},\"title\":\"Recursion: Underscore-Hash Staircase\",\"stats\":{\"completed\":{\"total\":81,\"ratings\":[4,4,4,4,4,4,1,1,3,0,4,5,4,5,2,3,1,5,1,3,5,3,5,2,4,3,3,1,4,3,3,5,5,1,3,2,5,2,4,2,5,4,2,3,2,2,4,5,2,2,4,4,4,4,3],\"rators\":[\"a777e8chPvJkY3tKa\",\"aEm3Wvj2rFYRL8Lrb\",\"yjtdwc2AC4jA2RWtn\",\"mHT2bJb5SByfJ8yKS\",\"h4jFmtbFn92eA4649\",\"kp2ZbCewZJAbfd7xv\",\"mSn9AcLsuEYzLbfai\",\"6zsau8WHFof3wBGRy\",\"hyx8iH2z3QySmyRKT\",\"hLioapzBct8zyPYnY\",\"LuikDdPeH7PveSXDK\",\"nmCGPMRuHbH99aEip\",\"Akq3fQcPRgPrWfsye\",\"tE8iqyAxBJfEaWdxy\",\"iJC8PmpzSyTnEDqw5\",\"rtj3X4Wjz8xoL3phv\",\"pWJWQDhqzDSmfaFam\",\"n5wubRfh6zh8QRymN\",\"tq3WAEfc7kr7HYKux\",\"x6PSyGNmLLgDHRHJD\",\"8B8KQN2rvwFWK2mKQ\",\"naPADSK6YTP4KmmH9\",\"8SYDBRtkZuW3pdPtG\",\"BTpTn8N8kf9kbx8C4\",\"xhMNsZgeB8rBKjxLu\",\"EMED9x5CXGSevWAp4\",\"YfWyvMhdY3xcGrK5R\",\"va3fDAQm4sqSMoy3R\",\"JGBCMpnbbi5ztuFoX\",\"CCFLvLemoMwY7ttRb\",\"PRd3ZE6vHgzsezF7z\",\"Tu22KsScr9mykuy8N\",\"f6K5wzQW2fzYvgE98\",\"hcm8sL8mNJTSfTdgE\",\"Dv56fPRZzwFh8FTbt\",\"P6Nj8vL3bcTZFD2Xz\",\"LtTpCzF8kt6Rdth4X\",\"ucmfnLcCuq2XafErm\",\"3xoNXk3Pe6sHidvRq\",\"iCr5TEH8Xm3qRBnXW\",\"GsrjAqoAdLATJH9qD\",\"QjGNkRM3Xc78yShJN\",\"ZgdejAm3u2Q6tFpfg\",\"WznKtKrCp9BxvBAfg\",\"2sLmHo7G2irSyrDB7\",\"Nv5a34gxg5yvLKRW8\",\"zMCXYFZSsviDCvjnY\",\"cRpaCxYRmGcN3Nsoj\",\"qWZLE2s7aRDQsnZ4p\",\"Xk2g4CNFAnYcvxiSr\",\"pXyib7Mn7MngrYCKv\",\"s678Wirfor5uYL5T6\",\"PH32cNxBjrK4a28sn\",\"wo4cpen33NYFHNca7\",\"TM7yCWpBjzqueoK7r\",\"tAF9Gf6PiGogbZuWs\",\"GMtbB3ckwdd66myNh\",\"vSaDkyeZtiTJASBiS\",\"QrjMwbQKxTCxs6cXS\",\"8BJyXvRWcrvN3nttS\",\"LfFM7fEqRDziusD9j\",\"nw5vSuHw4NL9hBbLc\",\"WeubbPCiAFxoPrg3H\",\"FkZahnC9JGaEMhknQ\",\"oREyqmWpSRxa3meHb\",\"buX4mCQhtXCfBjeno\",\"Z9jhP3WeN7jSf4aFs\",\"fYpsjDdwYbefoifXQ\",\"yKw5Z3yuem5zjaZRG\",\"XQMsA45P55H4vSuSn\",\"TtrXnGzi9MyhLvWiz\",\"DPi9QGLctq2y76KuE\",\"4nhwDfGmERX7tBy4b\",\"oXtZbxP4p6p8fjWXD\"],\"quality\":[5,5,5,5,2,1,5,4,5,5,5,5,4,5,5,5,5,5,4,4,5,5,4,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"a777e8chPvJkY3tKa\",\"quality\":4.5,\"family\":[{\"_id\":\"ZLTwdq8n5HK7DP9Eq\",\"language\":\"javascript\"},{\"_id\":\"ntpgCFga2rRzB53QZ\",\"language\":\"python3\"}]}}"]