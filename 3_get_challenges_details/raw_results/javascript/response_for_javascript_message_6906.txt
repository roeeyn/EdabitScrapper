a["{\"msg\":\"result\",\"id\":\"2196\",\"result\":{\"_id\":\"y7xoBP9bgHRNTcELK\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"function cleave(str, words) {\\n\\t\\n}\",\"difficulty\":3.3292682926829267,\"familyId\":\"STvRTZX5WRZua4DAv\",\"instructions\":\"Create a function that takes a string (without spaces) and a word array, cleaves the string into words based on the array, and returns the correctly spaced version of the string (a sentence). If a section of the string is encountered that can't be found on the word array, return `\\\"Cleaving stalled: Word not found\\\"`.\\n\\n### Examples\\n```\\nconst words = [\\\"about\\\", \\\"be\\\", \\\"hell\\\", \\\"if\\\", \\\"is\\\", \\\"it\\\", \\\"me\\\", \\\"other\\\", \\\"outer\\\", \\\"people\\\", \\\"the\\\", \\\"to\\\", \\\"up\\\", \\\"where\\\"]\\n\\n\\ncleave(\\\"ifitistobeitisuptome\\\", words) ➞ \\\"if it is to be it is up to me\\\"\\n\\ncleave(\\\"hellisotherpeople\\\", words) ➞ \\\"hell is other people\\\"\\n\\ncleave(\\\"hellisotterpeople\\\", words) ➞ \\\"Cleaving stalled: Word not found\\\"\\n```\\n\\n### Notes\\nWords in the `words` array can appear more than once in the string. The `words` array is a reference guide, kind of like a dictionary that lists which words are allowed.\",\"lab\":\"const words = ['a', 'after', 'all', 'an', 'and', 'are', 'as', 'by', 'continued', 'deadlines', 'doubly', 'fish', 'for', 'go', 'happen', 'happened', 'i', 'illusion', 'is', 'long', 'love', 'lunchtime', 'make', 'moment', 'noise', 'nothing', 'of', 'or', 'people', 'problem', 'second', 'so', 'summarize', 'summary', 'thanks', 'the', 'then', 'they', 'time', 'to', 'whooshing']\\nconst s1 = 'solongandthanksforallthefish'\\nconst s2 = 'solongandthanksforalllthefish'\\nconst s3 = 'tosummarizethesummaryofthesummarypeopleareaproblem'\\nconst s4 = 'timeisanillusionlunchtimedoublyso'\\nconst s5 = 'ilovedeadlinesilovethewhooshingnoisetheymakeastheygoby'\\nconst s6 = 'ilovedeadlinesilovethewheezingnoisetheymakeastheygoby'\\nconst s7 = 'foramomentnothinghappenedthenafterasecondorsonothingcontinuedtohappen'\\n\\nTest.assertEquals(cleave(s1, words), 'so long and thanks for all the fish')\\nTest.assertEquals(cleave(s2, words), \\\"Cleaving stalled: Word not found\\\")\\nTest.assertEquals(cleave(s3, words), 'to summarize the summary of the summary people are a problem')\\nTest.assertEquals(cleave(s4, words), 'time is an illusion lunchtime doubly so')\\nTest.assertEquals(cleave(s5, words), 'i love deadlines i love the whooshing noise they make as they go by')\\nTest.assertEquals(cleave(s6, words), \\\"Cleaving stalled: Word not found\\\")\\nTest.assertEquals(cleave(s7, words), 'for a moment nothing happened then after a second or so nothing continued to happen')\\n\\n// Quotes credit: Douglas Adams\",\"language\":\"javascript\",\"summary\":\"Create a function that takes a string (without spaces) and a word array, cleaves the string into words based on the array, and returns the correctly spaced version of the string (a sentence). If a section of the string is encountered that can't be found on the word array, return \\\"Cleaving stalled: Word not found\\\".\\n\\nExamples\\nconst words = [\\\"about\\\", \\\"be\\\", \\\"hell\\\"\",\"tags\":[\"strings\",\"validation\"],\"timestamp\":{\"$date\":1559583890587},\"title\":\"String Cleaver\",\"stats\":{\"completed\":{\"total\":78,\"ratings\":[3,3,3,3,3,3,3,3,3,3,3,4,4,5,1,5,4,0,5,4,5,5,3,5,0,4,2,3,3,3,5,5,0,0,5,5,5,5,5,0,0,3,3,3,0,4,1,5,5,3,3,5,5,5,5,5,0,4,4,5,4,3,2,5,3,2,0,5,5,4,1,4,5,5,4,3,1,4,3,0,4,5],\"rators\":[\"BkPgkDQGHm66X4Qai\",\"SDtZFL5NzAoCPofXk\",\"MMorSqBfMgCRrJnMy\",\"Akq3fQcPRgPrWfsye\",\"DmixtCzTBSvJt8ASM\",\"Px7NHmsJfYrzqjvaG\",\"8xuMMGF7fyQWL2fKH\",\"65dbBZynphj53nXqA\",\"E85Wj9sa3Kjyrb7Qq\",\"iqbET4LnvMk64vS3p\",\"rSJGLYSXMuu3RWjun\",\"6RdqsZD2Tpe3uyRqs\",\"KXAz9mtqEuJGiKMdC\",\"zH4TTJLZK8SYk5vyu\",\"37Ys8WyApXM8rNeow\",\"FHSJnAYTbcsKFgeQa\",\"yjtdwc2AC4jA2RWtn\",\"TnghjFnjE3inKnWNK\",\"7PP6aGLEosDGsjRqW\",\"DQydHGyNtHKjNyrTZ\",\"JNErTghBhTDWdTSjY\",\"4aj4SEaSv44oA8j7K\",\"mHT2bJb5SByfJ8yKS\",\"5DsYhKJiNTaarWKkM\",\"h4jFmtbFn92eA4649\",\"5Zq3aGdvh4LHBvnJL\",\"BBP9BE5mKHRzaRpJr\",\"Wdjd6JMEFYzW9Ma5k\",\"mPGkQErhbN8rqbxaE\",\"t6dPTXJSjNaRQL46m\",\"b5a77qecAq32wTEaR\",\"vANHt6atuggdAMmkB\",\"aSAfdzR4ZoBK2Rief\",\"XaCrEk3Bz6j4HM5kZ\",\"P8bXFR4cHwFia9rNM\",\"MpNkytd7e4Ghx25ii\",\"LYtGKTAZkNWeqpNun\",\"Jd6KY7BxEJKbvZHen\",\"qJZsi5rhRnWA38FbA\",\"ePrQatjrpPQKpmwFf\",\"oJRbRjYJnWfsCdNHD\",\"yQtGE2egvwYnNQSFc\",\"g5noFWaoRtZNcEEAW\",\"YER6iBcpJCuhgrYDN\",\"zsNp9fk9BGDBiHr4G\",\"zWvcqDWdAmiQBJFTs\",\"eFjGhq7C7bBKXjT6X\",\"neZyS59yuwgR7X9dS\",\"ZXRMRAJNP6eseLdbR\",\"FJz752tBZgKEFv5dp\",\"Z9MJFFkQRXWwJJafu\",\"PjHvd2Q7GNZMeamtJ\",\"eTzbu6t7YpD3mK3PY\",\"mF4TfPQQMzbuN7XLg\",\"JGBCMpnbbi5ztuFoX\",\"hcm8sL8mNJTSfTdgE\",\"nBo2LLuSMeEgd5f6G\",\"MNDLmXZmFMf8ASL2L\",\"wcgDoaKbZtbCGPu6K\",\"7TXyMDHFYjna3dyPb\",\"HcYxcQ5J6dM4WkWHd\",\"zMCXYFZSsviDCvjnY\",\"aEm3Wvj2rFYRL8Lrb\",\"tAF9Gf6PiGogbZuWs\",\"x6PSyGNmLLgDHRHJD\",\"sYJKcRHeWxTBoAdaL\",\"va3fDAQm4sqSMoy3R\",\"u9cRf5kvtpRB5ffB3\",\"nr7jKeHEE3TC9oyp4\",\"cJ55nM8ybCDmGEZyB\",\"QjGNkRM3Xc78yShJN\",\"Tu22KsScr9mykuy8N\",\"QvEXmSEo3ANp3yPyH\",\"8SYDBRtkZuW3pdPtG\",\"Z9jhP3WeN7jSf4aFs\"],\"quality\":[5,5]},\"tests\":{\"score\":0,\"rators\":[\"BkPgkDQGHm66X4Qai\"]},\"instructions\":{\"score\":0,\"rators\":[\"BkPgkDQGHm66X4Qai\"]},\"flags\":0},\"isHidden\":false,\"quality\":5,\"family\":[{\"_id\":\"3QqJ3HLpeuKusdofS\",\"language\":\"cpp\"},{\"_id\":\"i4SSMeuxhnSR2QKtx\",\"language\":\"java\"},{\"_id\":\"y7xoBP9bgHRNTcELK\",\"language\":\"javascript\"},{\"_id\":\"FWh2fGH7aRWALMf3o\",\"language\":\"python3\"},{\"_id\":\"vaRiisYhMmaEndKCs\",\"language\":\"ruby\"}]}}"]