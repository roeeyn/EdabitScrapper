a["{\"msg\":\"result\",\"id\":\"2060\",\"result\":{\"_id\":\"uL2Hi8Aj3FDgW9F7q\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"function digitsCount(num) {\\n\\t// recursive code here\\n}\",\"difficulty\":2.8857142857142857,\"editorId\":\"a777e8chPvJkY3tKa\",\"familyId\":\"dk6TvR3BPp7M89Cav\",\"instructions\":\"Create a function that will **recursively** count the number of digits of a number. Conversion of the number to a string is not allowed, thus, the approach is recursive.\\n\\n### Examples\\n```\\ndigitsCount(4666) ➞ 4\\n\\ndigitsCount(544) ➞ 3\\n\\ndigitsCount(121317) ➞ 6\\n\\ndigitsCount(0) ➞ 1\\n\\ndigitsCount(12345) ➞ 5\\n\\ndigitsCount(1289396387328L) ➞ 13\\n```\\n\\n### Notes\\n- All inputs are integers but some are in exponential form,  deal with it accordingly.\\n- You are expected to come up with a solution using the concept of **recursion** or the so-called **recursive approach**.\\n- Check out the **Resources** for more topics about recursion to read on (if you aren't familiar with it yet or haven't fully understood the concept behind it before taking up this challenge or unless otherwise).\\n- An **iterative** version of this challenge can be found via this [link](https://edabit.com/challenge/bxJH7XXXnX6G5NTxT).\\n- A **collection** of challenges alike can be found via this [link](https://edabit.com/collection/YJH4pAyqDbhLc4STc).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"const noStrConvert = fn => !RegExp('`|String|\\\\'|\\\\\\\"', 'gm').test(fn)\\nTest.assertNotEquals(noStrConvert(digitsCount), false, \\\"String manipulation is not allowed.\\\")\\n\\nconst recursive = f => (`${f}`.match(RegExp(`${f.name}`,'gm'))||[]).length > +(/function/.test(f))\\nTest.assertNotEquals(recursive(digitsCount), false, \\\"Recursion is required!\\\")\\n\\nlet [actualParam, expectedParam] = [\\n\\t[ \\n  \\t0, 4666, 544, 121317, 12345, 1289396387328, -1232323, \\n\\t\\t3463463874638476, -231.2e6, 1283939312321, -231273683, \\n\\t\\t3.2e6, 314890e3 \\n\\t],\\n\\t[1, 4, 3, 6, 5, 13, 7, 16, 9, 13, 9, 7, 9]\\n]\\nfor (let i in actualParam) Test.assertEquals(digitsCount(actualParam[i]), expectedParam[i])\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,5,1,2,1,3,2,5,4,0,5,3,5,3,4,3,3,1,3,4,2,2,3,2,3,2,4,3,2,5,5,5,1,4,1,2,2,2,3,3,2,2,0,5,3,0,1,2,4,3,4,4,3,0,1,3,4,0,3,1,3,3,3,2,3,5],\"rators\":[\"a777e8chPvJkY3tKa\",\"yjtdwc2AC4jA2RWtn\",\"x5Lr3XtLph7kpWN8y\",\"aEm3Wvj2rFYRL8Lrb\",\"bX6tpTCjwoi6XMMbK\",\"mHT2bJb5SByfJ8yKS\",\"eoepTq5ES5tfgY9XT\",\"tAF9Gf6PiGogbZuWs\",\"QRv96jmNaYsWkxQEG\",\"NfCaZKTs4Pi6ahpSg\",\"n5wubRfh6zh8QRymN\",\"bXaGdBM8FBLHf7N6Y\",\"jrcbewyoTtSbEraFS\",\"Es4eX2stRpyoXeC7f\",\"va3fDAQm4sqSMoy3R\",\"JGBCMpnbbi5ztuFoX\",\"T6iBEE2jp7f7iEF2P\",\"SYEuojZtP6yLXryHv\",\"QhrvcKMsvcz8zsKZo\",\"X6G8jvpoas5oyWBD4\",\"xn7uGNKeAwPEkP9oA\",\"xsDyJstYoBZRS8pJH\",\"hcm8sL8mNJTSfTdgE\",\"MRbf5GMsCL6EYMTWN\",\"Akq3fQcPRgPrWfsye\",\"mwg8jvMHHmQiQRrbr\",\"pWJWQDhqzDSmfaFam\",\"f6K5wzQW2fzYvgE98\",\"av9jN3SbNRM7Xe2qw\",\"BTpTn8N8kf9kbx8C4\",\"sNcDN3s3rH9wcNg5n\",\"kp2ZbCewZJAbfd7xv\",\"XrN688tKMi8qqsNFK\",\"iids2FheQ5s3fRB5c\",\"u9cRf5kvtpRB5ffB3\",\"evfgbBzq7uiE8yYxm\",\"ScDZaeW8T6bbrr6BR\",\"P6Nj8vL3bcTZFD2Xz\",\"HmQu5Cd2KivaXhaR7\",\"8SYDBRtkZuW3pdPtG\",\"h4jFmtbFn92eA4649\",\"mDWNyaaQ9hvPCRzSd\",\"DPi9QGLctq2y76KuE\",\"A4GfdHKzEy82YWTK5\",\"hNEhHd8qodq4P3h2g\",\"ySiAP3b4Eb9edaff6\",\"PHM3KTkLE9TFn72RY\",\"yr822PZmmiDDenxpB\",\"HMbYitthfkcwnxvyE\",\"WXmH6ehmZ4yggc5oR\",\"8nDGmSLBHGL46Nq5u\",\"fW9Wv6As82sJLr9ig\",\"ydN9TuBDHRNfzbXyS\",\"vYWfmZAX6QzcLq4Qe\",\"5NGxHLcQ8Af2RJ4TN\",\"uCALYKALknRzcCadc\",\"GsrjAqoAdLATJH9qD\",\"QJM5KcENEwS24NDs7\",\"faYyw7jGsSeaMeYYd\",\"QjGNkRM3Xc78yShJN\",\"2Y7G2h4xS6qiSHhnd\",\"CFMRcnKeXaJJtRZ8b\",\"iWpJedj8EfKKbp4EK\",\"cqw8eQwo3JRnGRfHS\",\"jujuxGy5XFDoKQsiF\",\"wiDPW3RzSitnzKczx\",\"fF3fAnR8XBdshH6qY\",\"Ztn39QNKSAdtQYhDB\",\"CYwRYnmcNDFJcxysn\",\"gGTp7WhQrFKviCszN\",\"c7uBxu2rgY77H5d79\",\"srJ34BaybkQh3qRkM\",\"M4vq8ATaS9Jg5X7iP\",\"s678Wirfor5uYL5T6\",\"PH32cNxBjrK4a28sn\",\"huPdTDxcAgntMc6G6\",\"ucaDnFgvkB5hp5srb\",\"hKv4bzaFxsCjB32c3\",\"q8AJDiNYKRjurTsFQ\",\"TtrXnGzi9MyhLvWiz\",\"AFfw7cGg83uYk2Miy\",\"QvEXmSEo3ANp3yPyH\",\"qJTbsuToGEtaYnGxn\",\"pi76g3eRpnKrhee2a\",\"gSrqu8MsZMFSxxWAZ\",\"oDtGiNqDMHmhHE3J8\",\"TddjTMQps5KW9erZC\",\"Sfyn34syRLLjM9NnE\",\"46SBqYjYrHQhMzp2Y\",\"Z9jhP3WeN7jSf4aFs\"],\"total\":94,\"quality\":[5,5,5,4,5,5,5,5,1,3,5,1,5,5,5,3,4,5,5,4,4,5,5,1,4]},\"flags\":0},\"summary\":\"Create a function that will recursively count the number of digits of a number. Conversion of the number to a string is not allowed, thus, the approach is recursive.\\n\\nExamples\\ndigitsCount(4666) ➞ 4\\n\\ndigitsCount(544) ➞ 3\\n\\ndigitsCount(121317) ➞ 6\\n\\ndigitsCount(0) ➞ 1\\n\\ndigitsCount(12345) ➞ 5\\n\\ndigitsCount(1289396387328L) ➞ 13\\n\\nNotes\\nAll inputs are integers but some\",\"tags\":[\"recursion\",\"numbers\",\"math\"],\"timestamp\":{\"$date\":1594984003973},\"title\":\"Recursion: Count The Digits\",\"quality\":4.16,\"family\":[{\"_id\":\"vpSCPsQKcQwnFdMS4\",\"language\":\"java\"},{\"_id\":\"uL2Hi8Aj3FDgW9F7q\",\"language\":\"javascript\"},{\"_id\":\"cQJxwn6iCAuEJ3EKd\",\"language\":\"python3\"}]}}"]