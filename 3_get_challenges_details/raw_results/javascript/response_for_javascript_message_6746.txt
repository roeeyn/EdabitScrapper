a["{\"msg\":\"result\",\"id\":\"2116\",\"result\":{\"_id\":\"Hr6HTn3ngCbmJayd4\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"function final(r, c, i) {\\n\\t\\n}\",\"difficulty\":2.9473684210526314,\"familyId\":\"Anv86bZgaeeGENgCL\",\"instructions\":\"Write a function that takes in three parameters: `r, c, i`, where:\\n\\n- `r` and `c` are the number of **rows** and **columns** to initialize a zero matrix.\\n- `i` represents the **list of incrementing operations** (+1).\\n\\nAnd returns the resulting matrix after applying all the increment operations. Each increment operation will **add 1** to the rows or columns specified in the **incrementing list**.\\n\\nTo illustrate:\\n```\\nfinal(3, 3, [\\\"2r\\\", \\\"2c\\\", \\\"1r\\\", \\\"0c\\\"])\\n\\n# Initialize a 3 x 3 matrix of zeroes.\\n\\n[\\n  [0, 0, 0],\\n  [0, 0, 0],\\n  [0, 0, 0]\\n]\\n\\n# Apply \\\"2r\\\" (increment index 2 row).\\n\\n[\\n  [0, 0, 0],\\n  [0, 0, 0],\\n  [1, 1, 1]\\n]\\n\\n# Apply \\\"2c\\\" (increment index 2 column).\\n\\n[\\n  [0, 0, 1],\\n  [0, 0, 1],\\n  [1, 1, 2]\\n]\\n\\n# Apply \\\"1r\\\" (increment index 1 row).\\n\\n[\\n  [0, 0, 1],\\n  [1, 1, 2],\\n  [1, 1, 2]\\n]\\n\\n# Apply \\\"0c\\\" (increment index 0 column).\\n# This is the result you should return.\\n\\n[\\n  [1, 0, 1],\\n  [2, 1, 2],\\n  [2, 1, 2]\\n]\\n```\\n\\n### Examples\\n```\\nfinal(2, 2, [\\\"0r\\\", \\\"0r\\\", \\\"0r\\\", \\\"1c\\\"]) ➞ [\\n  [3, 4],\\n  [0, 1]\\n]\\n\\nfinal(2, 2, [\\\"0c\\\"]) ➞ [\\n  [1, 0],\\n  [1, 0]\\n]\\n\\nfinal(3, 3, [\\\"1c\\\", \\\"2c\\\", \\\"2c\\\", \\\"3c\\\", \\\"3c\\\", \\\"3c\\\"]) ➞ [\\n    [1, 2, 3],\\n    [1, 2, 3],\\n    [1, 2, 3]\\n]\\n\\nfinal(3, 3, []) ➞ [\\n  [0, 0, 0],\\n  [0, 0, 0],\\n  [0, 0, 0]\\n]\\n```\\n\\n### Notes\\n- The 2D matrix is 0-indexed.\\n- The matrix created will have at least one row and one column.\\n- All **increment operations**  will be exactly `+1`.\",\"lab\":\"Test.assertSimilar(final(2, 2, ['0r', '0r', '0r', '1c']), [\\n[3, 4], \\n[0, 1]\\n])\\n\\nTest.assertSimilar(final(2, 2, ['0c']), [\\n[1, 0], \\n[1, 0]\\n])\\n\\nTest.assertSimilar(final(3, 3, ['0c', '1c', '1c', '2c', '2c', '2c']), [\\n[1, 2, 3], \\n[1, 2, 3], \\n[1, 2, 3]\\n])\\n\\nTest.assertSimilar(final(3, 3, [\\\"2r\\\", \\\"2c\\\", \\\"1r\\\", \\\"0c\\\"]), [\\n[1, 0, 1], \\n[2, 1, 2], \\n[2, 1, 2]\\n])\\n\\nTest.assertSimilar(final(1, 1, []), [[0]])\\n\\nTest.assertSimilar(final(3, 3, ['0r', '2c', '1r', '2c', '1c', '1r', '1r']), [\\n[1, 2, 3], \\n[3, 4, 5], \\n[0, 1, 2]\\n])\\n\\nTest.assertSimilar(final(3, 3, []), [\\n[0, 0, 0], \\n[0, 0, 0], \\n[0, 0, 0]\\n])\\n\\nTest.assertSimilar(final(3, 4, ['1r', '1r', '1r', '3c', '3c', '3c']), [\\n[0, 0, 0, 3], \\n[3, 3, 3, 6], \\n[0, 0, 0, 3]\\n])\\n\\nTest.assertSimilar(final(10, 1, ['1r', '2r', '3r', '0c']), [\\n[1], \\n[2], \\n[2], \\n[2], \\n[1], \\n[1], \\n[1], \\n[1], \\n[1], \\n[1]\\n])\\n\\nTest.assertSimilar(final(2, 5, ['1r', '1r', '1r', '1c', '0c', '0c', '1r', '0c', '1r', '0c']), [\\n[4, 1, 0, 0, 0], \\n[9, 6, 5, 5, 5]\\n])\",\"language\":\"javascript\",\"summary\":\"Write a function that takes in three parameters: r, c, i, where:\\n\\nr and c are the number of rows and columns to initialize a zero matrix.\\ni represents the list of incrementing operations (+1).\\n\\nAnd returns the resulting matrix after applying all the increment operations. Each increment operation will add 1 to the rows or columns specified in the incrementing l\",\"tags\":[\"arrays\",\"higher_order_functions\"],\"timestamp\":{\"$date\":1557244842335},\"title\":\"Incrementing Rows and Columns\",\"stats\":{\"completed\":{\"total\":72,\"ratings\":[3,3,3,3,3,3,3,3,3,3,2,3,3,4,3,2,0,3,2,4,0,4,3,4,3,4,1,3,4,4,3,4,2,3,5,2,3,4,2,5,5,5,2,5,3,0,5,2,5,5,5,4,3,1,2,2,5,2,2,3,2,2,1,4,5,2,0,5,2,3,2,3,2,1,3,2],\"rators\":[\"mNMQvcxKSSvqqMYCH\",\"65dbBZynphj53nXqA\",\"n5wubRfh6zh8QRymN\",\"4itF2fjGR9Swc48Zp\",\"6AkHZRsnysi2k9izF\",\"4fWjvhaWSB89EtbEZ\",\"MEYTCCcM3nWYmyDRs\",\"pMBxipEcpsqkoopHX\",\"Jwu3i2k565y77L4aK\",\"yjtdwc2AC4jA2RWtn\",\"FJsvM5yqKuK9yMk9P\",\"ydEdzuCCZt4yny9Rq\",\"eQdnBfe8riy82SNrK\",\"mHT2bJb5SByfJ8yKS\",\"6ZSa6RhotuSSjE5ZC\",\"AasGs8AeX9Lcb9xJn\",\"XKi8iZXBCHCaebSHh\",\"cRpaCxYRmGcN3Nsoj\",\"2NJuDfSqdrF8kHHni\",\"Mt2bcrSQpQdxdqJn8\",\"JGBCMpnbbi5ztuFoX\",\"sBcsrC5paZm9nxjot\",\"Es4eX2stRpyoXeC7f\",\"Kc3SDafimwpZWrATJ\",\"p2woPCQKXuWJCwffJ\",\"F9iScttyWkzoPjs5B\",\"aEm3Wvj2rFYRL8Lrb\",\"qvNk7pHSveLu3jqWw\",\"v9KtC8YLbMWmXiW2H\",\"kp2ZbCewZJAbfd7xv\",\"buX4mCQhtXCfBjeno\",\"BdnE4RS5puoxo92mA\",\"a777e8chPvJkY3tKa\",\"8BJyXvRWcrvN3nttS\",\"pXyib7Mn7MngrYCKv\",\"ESxRjwBLEpvBkGpux\",\"ucaDnFgvkB5hp5srb\",\"keJih8hzMZg3ogLZq\",\"PH32cNxBjrK4a28sn\",\"ZTTJprKDvFqKGew7c\",\"8SYDBRtkZuW3pdPtG\",\"2sLmHo7G2irSyrDB7\",\"bXaGdBM8FBLHf7N6Y\",\"xMxc7557QDHT5mqoG\",\"KzfNm8M2n2iPjQxfw\",\"edMP2Y8T3HW89J4KN\",\"zMCXYFZSsviDCvjnY\",\"nzsrSdqMvPDcp9SfM\",\"mwg8jvMHHmQiQRrbr\",\"tAF9Gf6PiGogbZuWs\",\"pd8dm7sWLW9cY6dYW\",\"HD5ZaNoAFbzBShx9m\",\"XoTA5p8kRk34jqEyt\",\"2pZqdNEDHz5eMMHTW\",\"tBeNdq2nzaTRkBEf3\",\"spWQX5nSWbE7DH4ot\",\"oH7uJsBnZv9b2mHMS\",\"c8AaDi7eRtbHEjN6Z\",\"xHkBnrFQsBBgJrWwq\",\"G9j7rxThGok3b3i9w\",\"vSaDkyeZtiTJASBiS\",\"QfMgraeMfq7SkASs8\",\"9GaKqFDjQyX7LcP6P\",\"bFLra6QouwHYnGQz3\",\"3WuHa9mFvo9aJcvK8\",\"TqgcwzXfRYHuZWSd7\",\"WnogMFYXoyvmBmGkm\",\"P8bXFR4cHwFia9rNM\",\"46SBqYjYrHQhMzp2Y\"],\"quality\":[5,5]},\"tests\":{\"score\":0,\"rators\":[\"mNMQvcxKSSvqqMYCH\"]},\"instructions\":{\"score\":0,\"rators\":[\"mNMQvcxKSSvqqMYCH\"]},\"flags\":1},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":5,\"family\":[{\"_id\":\"MshtuGs6cstBqnhDu\",\"language\":\"cpp\"},{\"_id\":\"jvyJ6xmPyrWab2MeX\",\"language\":\"java\"},{\"_id\":\"Hr6HTn3ngCbmJayd4\",\"language\":\"javascript\"},{\"_id\":\"8BQKa98d3s9Kis4vv\",\"language\":\"python3\"},{\"_id\":\"Cmh2Kjr9iBKTnTPyx\",\"language\":\"ruby\"}]}}"]