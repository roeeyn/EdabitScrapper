a["{\"msg\":\"result\",\"id\":\"1946\",\"result\":{\"_id\":\"3dJicC9jWNzf7qgXb\",\"author\":\"zatoichi49\",\"authorId\":\"tAF9Gf6PiGogbZuWs\",\"code\":\"function postfix(expression) {\\n\\n}\",\"difficulty\":2.7586206896551726,\"familyId\":\"EGzXE9TbXn9snqQqK\",\"instructions\":\"Mathematical expressions are usually written with *infix* notation, where the operator is *in-between* the two operands. *Postfix* notation, on the other hand, is where the operator *follows* the operands. As we use operator precedence to determine the order of calculation (e.g. multiplication/division is evaluated before addition/subtraction), we can change the position of the operands and eliminate the need for parentheses:\\n\\n\\n```\\n2 + 5   # Infix\\n2 5 +   # Postfix\\n\\n5 + (1 + 2) * 4 - 3   # Infix\\n5 1 2 + 4 * + 3 -     # Postfix\\n```\\n\\n\\nPostfix expressions are evaluated by reading left-to-right. Any time an operator is reached, a calculation is performed on the previous two operands. The process repeats until there are no more calculations to perform:\\n\\n\\n```\\n2 3 4 * + 9 -   # evaluate 3x4\\n   2 12 + 9 -   # evaluate 2+12\\n       14 9 -   # evaluate 14-9\\n            5   # final answer\\n```\\n\\n\\nGiven a postfix expression as a string, return the evaluated expression. A single space separates each operator/operand.\\n\\n\\n\\n### Examples\\n\\n```\\npostfix(\\\"12 3 /\\\") ➞ 4\\n\\npostfix(\\\"5 3 4 * +\\\") ➞ 17\\n\\npostfix(\\\"5 3 + 4 *\\\") ➞ 32\\n\\n``` \\n\\n\\n### Notes\\nPostfix is also known as \\\"Reverse Polish Notation\\\". See the resources tab for more information.\",\"isHidden\":false,\"lab\":\"Test.assertEquals(postfix(\\\"8 1 +\\\"), 9)\\nTest.assertEquals(postfix(\\\"9 3 /\\\"), 3)\\nTest.assertEquals(postfix(\\\"8 2 5 * +\\\"), 18)\\nTest.assertEquals(postfix(\\\"8 2 + 5 *\\\"), 50)\\nTest.assertEquals(postfix(\\\"1 2 3 4 5 + + + +\\\"), 15)\\nTest.assertEquals(postfix(\\\"3 12 32 8 / / *\\\"), 9)\\nTest.assertEquals(postfix(\\\"2 3 1 * + 9 -\\\"), -4)\\nTest.assertEquals(postfix(\\\"3 4 + 2 * 7 /\\\"), 2)\\nTest.assertEquals(postfix(\\\"4 5 7 2 + - *\\\"), -16)\\nTest.assertEquals(postfix(\\\"10 8 + 3 4 * - 6 /\\\"), 1)\\nTest.assertEquals(postfix(\\\"13 6 7 8 4 / 9 * - + +\\\"), 8)\\nTest.assertEquals(postfix(\\\"5 7 - 6 9 + *\\\"), -30)\\nTest.assertEquals(postfix(\\\"6 2 + 5 * 8 4 / -\\\"), 38)\\nTest.assertEquals(postfix(\\\"9 2 * 3 + 12 -\\\"), 9)\\nTest.assertEquals(postfix(\\\"6 4 18 2 7 + / + -\\\"), 0)\\nTest.assertEquals(postfix(\\\"3 10 5 + *\\\"), 45)\\nTest.assertEquals(postfix(\\\"8 1 3 + 7 * + 6 -\\\"), 30)\\nTest.assertEquals(postfix(\\\"3 2 + 15 3 / 8 - *\\\"), -15)\\nTest.assertEquals(postfix(\\\"10 7 1 1 + - / 6 * 3 5 4 + - +\\\"), 6)\\nTest.assertEquals(postfix(\\\"6 45 - 3 12 6 2 / * + /\\\"), -1)\",\"language\":\"javascript\",\"summary\":\"Mathematical expressions are usually written with infix notation, where the operator is in-between the two operands. Postfix notation, on the other hand, is where the operator follows the operands. As we use operator precedence to determine the order of calculation (e.g. multiplication/division is evaluated before addition/subtraction), we can change the posit\",\"tags\":[\"logic\",\"math\"],\"timestamp\":{\"$date\":1576537302271},\"title\":\"Postfix Notation (Part 1: Evaluation)\",\"stats\":{\"completed\":{\"total\":30,\"ratings\":[3,3,3,3,3,2,2,2,3,2,3,2,4,3,2,2,4,2,4,4,0,4,2,4,4,4,2,1,3],\"rators\":[\"yjtdwc2AC4jA2RWtn\",\"n5wubRfh6zh8QRymN\",\"AasGs8AeX9Lcb9xJn\",\"65dbBZynphj53nXqA\",\"cRpaCxYRmGcN3Nsoj\",\"YER6iBcpJCuhgrYDN\",\"2innwjWqxJHo4eRGh\",\"EjPLq3QSJdGQFJdgW\",\"5Zq3aGdvh4LHBvnJL\",\"8tEikq8QhumvnbHXK\",\"dPM2Rk2iMkznyXNEt\",\"XSowcGMedgyp37Hts\",\"3xtJYwxrWmw63ibfF\",\"sBcsrC5paZm9nxjot\",\"a777e8chPvJkY3tKa\",\"h4jFmtbFn92eA4649\",\"M4vq8ATaS9Jg5X7iP\",\"aEm3Wvj2rFYRL8Lrb\",\"rC7kdm3SsSX9udEQk\",\"Nb6LYPoQP6KJZt8mz\",\"NczXsSrYNX6nDWhjF\",\"GvBX25jYPD6pgoNsL\",\"pGh7WykiPe26fHJYv\",\"mDWNyaaQ9hvPCRzSd\",\"QRv96jmNaYsWkxQEG\",\"PH32cNxBjrK4a28sn\"],\"quality\":[5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"quality\":5,\"family\":[{\"_id\":\"3dJicC9jWNzf7qgXb\",\"language\":\"javascript\"},{\"_id\":\"xWW8PMuLN8hmAgLMJ\",\"language\":\"python3\"},{\"_id\":\"mWdeZXpwBDzfzHdhK\",\"language\":\"ruby\"}]}}"]