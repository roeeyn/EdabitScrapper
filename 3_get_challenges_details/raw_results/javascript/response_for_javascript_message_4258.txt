a["{\"msg\":\"result\",\"id\":\"884\",\"result\":{\"_id\":\"7T2ytDgjgsh9CMq6D\",\"author\":\"MWO\",\"authorId\":\"Tu22KsScr9mykuy8N\",\"code\":\"function duplicates(str) {\\n\\t\\n}\",\"difficulty\":1.606060606060606,\"editorId\":\"J74DckDe4qdcCTxfL\",\"familyId\":\"Qo2PyszA2tHbYnyYm\",\"instructions\":\"Create a function that returns the amount of duplicate characters in a string. It will be case sensitive and spaces are included. If there are no duplicates, return `0`.\\n\\n### Examples\\n```\\nduplicates(\\\"Hello World!\\\") ➞ 3\\n// \\\"o\\\" = 2, \\\"l\\\" = 3.\\n// \\\"o\\\" is duplicated 1 extra time and \\\"l\\\" is duplicated 2 extra times.\\n// Hence 1 + 2 = 3\\n\\nduplicates(\\\"foobar\\\") ➞ 1\\n\\nduplicates(\\\"helicopter\\\") ➞ 1\\n\\nduplicates(\\\"birthday\\\") ➞ 0\\n// If there are no duplicates, return 0\\n```\\n\\n### Notes\\nMake sure to only start counting the second time a character appears.\",\"isHidden\":false,\"lab\":\"Test.assertEquals(duplicates(\\\"Hello World!\\\"), 3)\\nTest.assertEquals(duplicates(\\\"birthday\\\"), 0)\\nTest.assertEquals(duplicates(\\\"helicopter\\\"), 1)\\nTest.assertEquals(duplicates(\\\"foobar\\\"), 1)\\nTest.assertEquals(duplicates(\\\"The Quick Brown Fox Jumps Over the Lazy Dog\\\"), 14)\\nTest.assertEquals(duplicates(\\\"donald trump\\\"), 1)\\nTest.assertEquals(duplicates(\\\"Row, row, row your boat Gently down the stream Merrily merrily, merrily, merrily Life is but a dream.\\\"), 77)\\nTest.assertEquals(duplicates(\\\"Gen'rals gathered in their masses,Just like witches at black masses\\\"), 45)\\nTest.assertEquals(duplicates(\\\"Evil minds that plot destruction,Sorcerer of death's construction\\\"), 43)\\nTest.assertEquals(duplicates(\\\"gamer\\\"), 0)\\nTest.assertEquals(duplicates(\\\"gamer gang\\\"), 3)\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,1,1,1,2,0,2,0,2,1,1,1,2,2,1,2,1,1,0,2,2,2,1,2,2,2,1,2,2,0,2,2,1,1,2,0,0,1,1,2,2,1,0,3,3,2,0,1,2,2,2,2,2,1,0,2,2,2,3,4,1,2,2,0,2,2,0,0,1,2,2,0,2,1,0,2,2,1,0,1,2,2,2,0,1,1,2,2,2,2,0,1,2,1,1,2,2,2,0,2,2,2,2,2,2,2,1,2,1,1,2,2,2,3,2,0,2,2,2,1,1,0,2,2,2,2,1,2,2,2,2,2,2,2,3,1,2,1,2,2,2,2,2,1,1,1,2,3,2,2,1,0,2,0,2,0,2,2,3,2,2,1,2,1,0,2,2,1,2,2,2,2,2,2,2,1,2,2,3,2,2,2,2,2,2,1,2,3,2,1,2,2,2,3,2,1,3,2,1,2,2,2,1,2,5,0,1,1,1,2,3,0,2,1,2,2,3,2,2,2,2,1,2,2,1,0,2],\"rators\":[\"Tu22KsScr9mykuy8N\",\"pd8dm7sWLW9cY6dYW\",\"65dbBZynphj53nXqA\",\"5Zq3aGdvh4LHBvnJL\",\"Q9KQomTTPBsrkAL6c\",\"AasGs8AeX9Lcb9xJn\",\"yjtdwc2AC4jA2RWtn\",\"Y9Nz9yafaibz54W4o\",\"RKht8LDeYY5zFNycs\",\"HrJtdRbvHHNh7tMMo\",\"8BFSTCnoe2QggN64c\",\"7diYNLNsRmqMh5WSb\",\"RE4Mm9T6Q9uygAxGS\",\"z6QfbuG6TXE7GKynQ\",\"CJnuSjyCBMTbTiibD\",\"gzTs5oFrfZwh3Kfze\",\"H3yM3F3mukfdq9fit\",\"QRoAN6gdwipTo7fwD\",\"vThHLd8MLkmyJHox9\",\"2tCCFm5iefjrRSaxv\",\"zgoq9MhrL2h75DAMA\",\"zTZtM9jRsu8eXie6s\",\"R35tqE5etfTYTfmGr\",\"2CvHJcA9aXt9pvZwA\",\"j4KAqfRa6EsiE4Qv2\",\"wcjknenWdPRhrRScv\",\"FJsvM5yqKuK9yMk9P\",\"BdvdJYwHZr7JpkHsn\",\"vKch2w3b4keMd84jj\",\"MRedsQ5gbonhjmZzW\",\"gyB5wJihaSZCWKTCB\",\"tuTQhfZC5izTmXEgR\",\"aPX8qCXL6TmfpRfgy\",\"zd9FLSzsGz3evKafy\",\"mHaHudYExvi45DSRf\",\"jmKPGxuB2hRtE8egx\",\"XDSYuanswSsvMBNy4\",\"3K9yDMNkwanR9NWh3\",\"mHT2bJb5SByfJ8yKS\",\"rWQHZFJ2RKMdyZpAf\",\"fMqXimJLsPiuhT8A8\",\"n5wubRfh6zh8QRymN\",\"m4vwHoRAybAhCmFu7\",\"EjPLq3QSJdGQFJdgW\",\"BGQqaYbqYqmTo5Ehs\",\"Jh6sPsgj8yHy95joL\",\"8Z3dkvWBqtrMEE48N\",\"jqbm8L6895JgAtZ6H\",\"Y7xPTPKpNAEiM2jkH\",\"sbme4fRJjjBjYXRbY\",\"QGshpArSs3bHZZR7W\",\"6BpBQnSGhzgvhXrEy\",\"2innwjWqxJHo4eRGh\",\"AXcnPX68zdMiLNSmu\",\"SDtZFL5NzAoCPofXk\",\"XRRZ5kd8PvAQYtA4s\",\"EWn8w8P3nNh7knatY\",\"WdxWWwuM5PcZbTgxY\",\"bKPvJHLQ3ovQLt9MJ\",\"n5Z5LFzfFxyQDuk5N\",\"ih2aGaqkMaagTgyL2\",\"bzm5WayBjwad5jhdR\",\"9gEWz76H8KmhN4yJj\",\"f9gsQxwrJGBhyF5FF\",\"DTYzcPpymDgS2zXM2\",\"cp3X8hk8yNME7qoD9\",\"Df7GtT2JwMxJGASvW\",\"zAMR5yM6wpzfE3a4S\",\"yaL57wdXmgAZTvKfX\",\"RjNmWYMdng36ANKYt\",\"3aZvfgr2H2WF8Yog2\",\"2NJuDfSqdrF8kHHni\",\"Yx2w57JbzY92Q4DFP\",\"ygNnCnmzZfy3r2m6w\",\"g5noFWaoRtZNcEEAW\",\"MEZNjeGd7APtvA3SL\",\"Pwt5LQa5iBr4FuEji\",\"9XnGoq9Tv6ut3zTtH\",\"sutzxu4yTueBKE9Qp\",\"xMxdp5oCxmeuYxhpa\",\"5YCX58nhHT8oRCHyy\",\"tyNrtjfTi56j5Hw9b\",\"6gPHMpkEP8JuHxzpd\",\"YER6iBcpJCuhgrYDN\",\"zsNp9fk9BGDBiHr4G\",\"M7kpJSXFx67HhrTaZ\",\"FHzvDACEZuAjRwL7v\",\"pi76g3eRpnKrhee2a\",\"7JCLyrrY6JYGpocac\",\"49uuzwkpBg45xAwrN\",\"cJwiiiX7qwSvgtmk8\",\"k5TGxBtLi9BXxeChT\",\"DsFQazFAKZJ83RbtJ\",\"QnPD4Sv6W4LHc2Qng\",\"vWhgrr5oem8WtKdxm\",\"uAS9uKs8KQmp8uhqn\",\"6AkHZRsnysi2k9izF\",\"eANW47mfA359Y6JyP\",\"9Pzg45NEiRXhLtLh3\",\"SNiJRRosrmSWssLj4\",\"Y5H6Lp7Qou9XGptHH\",\"d9LBRxvADNBB5QJMB\",\"v2AzBqD64zLiRD9bP\",\"bX6tpTCjwoi6XMMbK\",\"vtHbevf2tHqe6mRxX\",\"9966k46pdpGeFjKSF\",\"eomLS3wh6tQPN8jtH\",\"CdXigydGTBLgA577m\",\"dDFJpK4pXCsQYuHmc\",\"a777e8chPvJkY3tKa\",\"YtGYxpMxbrHLFK8nq\",\"Gc2bmsof5vD2Hsgqv\",\"HwZx7c3QFWmt5x4oE\",\"eQXwk5zGckM8tCWYH\",\"4TuceAZ8oTDzsjhir\",\"ipiC2qPhKZWsAouJf\",\"2ZFoLTxcCARhwc8xX\",\"7wtuhPesfhcYsfZaZ\",\"rehehi2Tr2mwaEoJE\",\"z5ebtimXwFFJdYxoa\",\"zw7g7T8wE5R5CBhXr\",\"Lzj3w7QjdzikynsGG\",\"Ji84eQR54xeqRYceZ\",\"Yzh7zNiyG7LM9vnAj\",\"tAF9Gf6PiGogbZuWs\",\"Q75jsoXjhTXJRrw8z\",\"733qgZ7ZSSSrzbXGw\",\"Es4eX2stRpyoXeC7f\",\"zNN2fW2pJGpTxBgzx\",\"sBcsrC5paZm9nxjot\",\"NchnDcEmsLTeFZ4FH\",\"ij9YRJvZz6WbqcGXS\",\"ZcqshY58sGEEvgeaq\",\"agH7bpdN3Knjzb27C\",\"buX4mCQhtXCfBjeno\",\"98NmBCC7jEKw5j352\",\"Fhwnime223hGiaHaA\",\"8raviPK67KKxzQWcF\",\"MdNjMi3vPSmWWjja5\",\"GCsLzWAhLvniQqR3J\",\"vAh63eGRwkuJtoP8v\",\"HmauZApXKzNYTmPkA\",\"moe6ztrsNzFymC3A7\",\"BdnE4RS5puoxo92mA\",\"r7mZLgpQWzRiGddL5\",\"Sfb5RNdmiKSDyqyp4\",\"p5ZshR8zhTqmdhKDc\",\"Ya3eHgs8x3unZRLpb\",\"C9LKGu2g5hSijvDzA\",\"E2hpke7mHxAWsw5t9\",\"nkH3HfJXLMNcBMM79\",\"4ntYzGHHBgqf58udP\",\"6kz7jjJS8W4tikYQT\",\"7gZKfvwaeqsGKXMEN\",\"jcPZ5ySXseCB7Ec3x\",\"M4vq8ATaS9Jg5X7iP\",\"nAmJEX7BkHLd9LsG2\",\"jkumHyXfMkhGcPgqC\",\"MbbySGQmkzbjg373M\",\"pLpcDC3EYx2DDQSdt\",\"ApbStEsNf245buRZr\",\"N7fwDd5JRDsuX7EKa\",\"ZK6YmYMsfwXYtaZ9P\",\"Po3v3dHCk6wYGKMwi\",\"mfYrBKwDr4hXSFuuN\",\"evTTY9hwrtogaNxXn\",\"aEm3Wvj2rFYRL8Lrb\",\"jnyub52Fi79drGvow\",\"ttuGK7od8simjgmCJ\",\"mE2WrTtBBq4zuLdWp\",\"3pb8q4K4jv6jta45d\",\"it4R7mNQ7MTvJkLDm\",\"kp2ZbCewZJAbfd7xv\",\"CH53jGETBeJTummf3\",\"sj8yRK9uzJ5LLZABJ\",\"DaBQKtm4xSgrxqTYF\",\"AFfw7cGg83uYk2Miy\",\"s9qcJASB9WKPWaQzi\",\"u9cRf5kvtpRB5ffB3\",\"R9uaMzX2Y4ND8Cosm\",\"pGh7WykiPe26fHJYv\",\"DDokdbBKxv49M445o\",\"JZ5mQXCKxaFjrnGtq\",\"75NY7vqimaATzRdAX\",\"FGEeCTorXbX3WvjFW\",\"SY9Euc4kQfRgetXTd\",\"jLSZdBseR2kfjt8dL\",\"vewKwcMeGuk3p3MsN\",\"pdGuqmMyeN4wZaWwv\",\"2Ni3PzJAc5fAhqBkb\",\"srJ34BaybkQh3qRkM\",\"STipuJs6kBvPqqsSE\",\"Yp7uvStL97cC9fKkY\",\"gavnf7iyvHYMX9TZR\",\"3Gf7ikLijfoxabiPY\",\"RtPhDuwmvWNHiBxmG\",\"6J6g5TwWz67cN7Zy6\",\"m6qKkBY4aPWziyJTj\",\"DPi9QGLctq2y76KuE\",\"5hHf2e9zimbmxMqqF\",\"JsRTAwWK7Nikj4sKA\",\"s49G5h6964S2KoS64\",\"J7d397iB5GuWRAMfg\",\"RBdd9aaH38pjYDbBq\",\"6vfjruFp8ZpRSi3AT\",\"2Qk2mFu9HBFzrB24i\",\"npp5hesJrst6ghKSM\",\"cgCQDs9i7yChKeAjE\",\"wJTDDTE3TrmSXKP4d\",\"QjGNkRM3Xc78yShJN\",\"oDtGiNqDMHmhHE3J8\",\"N3CNtWZz4ovJfH9Aw\",\"QAZ5DGaWWYhku4BNz\",\"NGvCPuMiAP3xrRLfB\",\"LwD3CyYSiBfg3mA4r\",\"8BJyXvRWcrvN3nttS\",\"mpLFbFKjY6u3nsDMv\",\"n4Y5EEGCjmrK99yrt\",\"nBJve5CzG6WAw7WFQ\",\"gXTAie79kiw28tx5u\",\"34bE6mric984YYLZQ\",\"Q7Yxda7dqKeYPs2Db\",\"ZcJm2kuqJnN3CXFaR\",\"jyoLggHk8xQKZuoQC\",\"Kt6oGAfrymXmAnn2d\",\"bfYmA3LMvhSrK59cn\",\"SCYNpjgtLCE9rKpYB\",\"sN2JyFeJCwfwwHPwF\",\"oyB4Wr4EeZnoDaa8B\",\"d8JhF9zfpexkRnCea\",\"jicWFrNKadYuLhqxh\",\"z47JaNrQMgvuPx5HE\",\"sMcFMPkMJC4Kh6ymj\",\"rPsSEYqwmttMPEuvo\",\"jkkKzNT77bMStXhpW\",\"QguFWo84zgF3c8BGr\",\"PTo9qt93YqGvL8fCa\",\"ERKhKvZtbX7cXNRBP\",\"HCfkcKnPs9mrJojdG\",\"qhPKRxK3WsM7JTea5\",\"zoSGvhHbsBykZTuDc\",\"uxKGACwmZ6FNZsMwE\",\"LPZ2QKCoB8q6rG25c\",\"T5Ekv6JfjiBSD9cSb\",\"CHvzhtXnv8HTbPQ56\",\"DPpSwhhiuF4Y9YR2i\"],\"total\":261,\"quality\":[3,5,5,4,5,5,5,5,3,5,5,5,5,3,4,5,5,5,5,5]},\"flags\":0},\"summary\":\"Create a function that returns the amount of duplicate characters in a string. It will be case sensitive and spaces are included. If there are no duplicates, return 0.\\n\\nExamples\\nduplicates(\\\"Hello World!\\\") ➞ 3\\n// \\\"o\\\" = 2, \\\"l\\\" = 3.\\n// \\\"o\\\" is duplicated 1 extra time and \\\"l\\\" is duplicated 2 extra times.\\n// Hence 1 + 2 = 3\\n\\nduplicates(\\\"foobar\\\") ➞ 1\\n\\nduplicates(\\\"hel\",\"tags\":[\"arrays\",\"strings\",\"loops\"],\"timestamp\":{\"$date\":1575300756626},\"title\":\"Count the Number of Duplicate Characters\",\"quality\":4.6,\"family\":[{\"_id\":\"SS2T2QAsf5jWWZJ24\",\"language\":\"cpp\"},{\"_id\":\"zmbR8SKveCgJ6KB5G\",\"language\":\"java\"},{\"_id\":\"7T2ytDgjgsh9CMq6D\",\"language\":\"javascript\"},{\"_id\":\"mgBdGGw7StxF2tBqu\",\"language\":\"python3\"},{\"_id\":\"Jy2FmSTp3auxBCyok\",\"language\":\"ruby\"}]}}"]