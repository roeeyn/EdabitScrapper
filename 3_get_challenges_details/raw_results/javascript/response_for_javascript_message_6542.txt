a["{\"msg\":\"result\",\"id\":\"2016\",\"result\":{\"_id\":\"M9AmkND2m9B42PRAe\",\"author\":\"persolut\",\"authorId\":\"xn7uGNKeAwPEkP9oA\",\"code\":\"function intToVlq(n) {\\n\\t\\n}\\n\\nfunction vlqToInt(lst) {\\n\\t\\n}\",\"difficulty\":2.8333333333333335,\"familyId\":\"W4pEpF3XMyFtogCgF\",\"instructions\":\"In this challenge you have to create functions to encode and decode variable-length quantities. A variable-length quantity (VLQ) is a universal code that uses an arbitrary number of binary octets (eight-bit bytes) to represent an arbitrarily large integer. A VLQ is essentially a base-128 representation of an unsigned integer with the addition of the eighth bit to mark continuation of bytes.\\n\\nThe way it works is fairly simple. As a big-endian series of bytes, the most significant bit (MSB) of each byte is a 1 to indicate that another VLQ byte follows. The remaining 7 bits of each byte make up the decoded value.\\n\\n### Examples\\n```\\n# ENCODE:\\nintToVlq(127) ➞ [127]\\n// numbers between 0 and 127 are unchanged\\n// binary: [01111111]\\n\\nintToVlq(128) ➞ [129, 0]\\n// 1st byte = 1 + 128 equivalent to 1 * 128 with MSB set to 1 indicating byte follows\\n// 2nd byte = 0 \\n// 128 + 0 ➞ 128\\n// binary: [10000001, 00000000]\\n\\nintToVlq(106903) ➞ [134, 195, 23]\\n// 1st byte = 128 + 6 ➞ 6 * 128^2 ➞ 98304\\n// 2nd byte = 128 + 67 ➞ 67 * 128 ➞ 8576\\n// 3rd byte = 23 ➞ 23\\n// 98304 + 8576 + 23 = 106903\\n// binary: [10000110, 11000011, 00010111]\\n\\n# DECODE:\\nvlqToInt([229, 145, 63]) ➞ 1657023\\n// (229 - 128)*128^2 + (145 - 128)*128 + 63 = 1657023\\n\\n```\\n### Notes\\nInteger values for encoding will be in the range 0 <= n <= 2^63\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"// encode VLQ\\nTest.assertSimilar(intToVlq(0), [0])\\nTest.assertSimilar(intToVlq(12), [12])\\nTest.assertSimilar(intToVlq(128), [129, 0])\\nTest.assertSimilar(intToVlq(106903), [134, 195, 23])\\nTest.assertSimilar(intToVlq(268435455), [255, 255, 255, 127])\\nTest.assertSimilar(intToVlq(1234567890123), [163, 247, 143, 236, 137, 75])\\nTest.assertSimilar(intToVlq(562949953421312), [129, 128, 128, 128, 128, 128, 128, 0])\\nTest.assertSimilar(intToVlq(9223372036854775807), [255, 255, 255, 255, 255, 255, 255, 255, 127])\\n\\n// decode VLQ\\nTest.assertSimilar(vlqToInt([12]), 12 )\\nTest.assertSimilar(vlqToInt([129, 0]), 128)\\nTest.assertSimilar(vlqToInt([134, 195, 23]), 106903)\\nTest.assertSimilar(vlqToInt([255, 255, 255, 127]), 268435455)\\nTest.assertSimilar(vlqToInt([163, 247, 143, 236, 137, 75]), 1234567890123)\\nTest.assertSimilar(vlqToInt([129, 128, 128, 128, 128, 128, 128, 0]), 562949953421312)\\nTest.assertSimilar(vlqToInt([255, 255, 255, 255, 255, 255, 255, 255, 127]), 9223372036854775807)\",\"language\":\"javascript\",\"quality\":0,\"summary\":\"In this challenge you have to create functions to encode and decode variable-length quantities. A variable-length quantity (VLQ) is a universal code that uses an arbitrary number of binary octets (eight-bit bytes) to represent an arbitrarily large integer. A VLQ is essentially a base-128 representation of an unsigned integer with the addition of the eighth bit\",\"tags\":[\"algorithms\",\"bit_operations\",\"data_structures\"],\"timestamp\":{\"$date\":1610713259949},\"title\":\"Variable Length Quantity (VLQ) Encoding\",\"stats\":{\"completed\":{\"total\":3,\"ratings\":[3,3,3,3,3,2],\"quality\":[],\"rators\":[\"yjtdwc2AC4jA2RWtn\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"Jp6SYqJWdGi2ABRt4\",\"language\":\"csharp\"},{\"_id\":\"M9AmkND2m9B42PRAe\",\"language\":\"javascript\"},{\"_id\":\"Zx9L2dpHr2nMjaKXp\",\"language\":\"python3\"},{\"_id\":\"aJFuLJSiWjntA93tr\",\"language\":\"ruby\"},{\"_id\":\"td499qJDFSZkoNDSY\",\"language\":\"swift\"}]}}"]