a["{\"msg\":\"result\",\"id\":\"2374\",\"result\":{\"_id\":\"BspzBJjTCKRfgf3aM\",\"author\":\"BijogFc24\",\"authorId\":\"Nb6LYPoQP6KJZt8mz\",\"code\":\"function affineEncrypt(txt, f) {\\n\\t\\n}\",\"difficulty\":4.153846153846154,\"familyId\":\"z4N3ZPAjk64hgD77d\",\"instructions\":\"Create a function that takes a string of plain text (English alphabet) all in lowercase, encryption function, and converts the plain text into ciphertext using the **affine encryption** function.\\n\\n ### Encryption Function\\nIn the affine cipher, the letters of an alphabet of size m are first mapped to the integers in the range 0 … m − 1. It then uses modular arithmetic to transform the integer that each plaintext letter corresponds to into another integer that corresponds to a ciphertext letter.\\n\\nThe encryption function for a single letter is `E(x)=(ax+b)mod m` where modulus `m` is the size of the alphabet and `a` and `b` are the keys of the cipher. The value `a` must be chosen such that `a` and `m` are `coprime`.\\n\\nThe alphabet is going to be the letters `a` through `z` and will have the corresponding values  `a=0, b=1, c=2, d=3 ... z=25`.\\n\\n### Examples\\n```\\naffineEncrypt(\\\"salakpur\\\", \\\"(x+2)%26\\\") ➞ \\\"ucncmrwt\\\"\\n// a = 1 , b = 2\\n// Encryption function = \\\"(x+2)%26\\\"\\n// gcd(1, 26) = 1\\n// Therefore, we apply the encryption function for the letters.\\n\\naffineEncrypt(\\\"dang\\\", \\\"(2x+7)%26\\\") ➞ \\\"2 and 26 are not coprime\\\"\\n// a = 2, b = 7\\n// gcd(2, 26) = 2\\n```\\n\\n### Notes\\n- For the problem  1 =< a  <= 11 , 1 =< b <= 9 , m = 26\\n- Create your own gcd function.\",\"isHidden\":false,\"lab\":\"Test.assertEquals(affineEncrypt(\\\"salakpur\\\", \\\"(x+2)%26\\\"), \\\"ucncmrwt\\\")\\nTest.assertEquals(affineEncrypt(\\\"birjung\\\", \\\"(5x+7)%26\\\"), \\\"mvoadul\\\")\\nTest.assertEquals(affineEncrypt(\\\"dang\\\", \\\"(2x+7)%26\\\"), \\\"2 and 26 are not coprime\\\")\\nTest.assertEquals(affineEncrypt(\\\"biratnagar\\\", \\\"(3x+1)%26\\\"), \\\"ezabgobtba\\\")\\nTest.assertEquals(affineEncrypt(\\\"mustang\\\", \\\"(7x+5)%26\\\"), \\\"lpbifsv\\\")\\nTest.assertEquals(affineEncrypt(\\\"kathmandu\\\", \\\"(6x+8)%26\\\"), \\\"6 and 26 are not coprime\\\")\\nTest.assertEquals(affineEncrypt(\\\"pokhara\\\", \\\"(x+3)%26\\\"), \\\"srnkdud\\\")\\nTest.assertEquals(affineEncrypt(\\\"bhaktapur\\\", \\\"(9x+2)%26\\\"), \\\"lncorchaz\\\")\\nTest.assertEquals(affineEncrypt(\\\"janakpur\\\", \\\"(11x+9)%26\\\"), \\\"ejwjpsvo\\\")\\nTest.assertEquals(affineEncrypt(\\\"janakpur\\\", \\\"(10x+5)%26\\\"), \\\"10 and 26 are not coprime\\\")\\nTest.assertEquals(affineEncrypt(\\\"itahari\\\", \\\"(3x+2)%26\\\"), \\\"ahcxcba\\\")\\nTest.assertEquals(affineEncrypt(\\\"lalitpur\\\", \\\"(4x+7)%26\\\"), \\\"4 and 26 are not coprime\\\")\",\"language\":\"javascript\",\"summary\":\"Create a function that takes a string of plain text (English alphabet) all in lowercase, encryption function, and converts the plain text into ciphertext using the affine encryption function.\\n\\nEncryption Function\\nIn the affine cipher, the letters of an alphabet of size m are first mapped to the integers in the range 0 … m − 1. It then uses modular arithmetic t\",\"tags\":[\"math\",\"cryptography\",\"language_fundamentals\"],\"timestamp\":{\"$date\":1597119373683},\"title\":\"Affine Cipher Encrypt\",\"stats\":{\"completed\":{\"total\":10,\"ratings\":[5,5,5,5,5,5,2,4,1,4,5,5,3],\"rators\":[\"Nb6LYPoQP6KJZt8mz\",\"yjtdwc2AC4jA2RWtn\",\"tAF9Gf6PiGogbZuWs\",\"aEm3Wvj2rFYRL8Lrb\",\"va3fDAQm4sqSMoy3R\",\"YEjnBpgNjDLhnf4H7\",\"7XD8yqDQXa5n2znYx\",\"8BJyXvRWcrvN3nttS\"],\"quality\":[]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"Nb6LYPoQP6KJZt8mz\",\"quality\":0,\"family\":[{\"_id\":\"AQHcMKRr63ABCXNJo\",\"language\":\"cpp\"},{\"_id\":\"BspzBJjTCKRfgf3aM\",\"language\":\"javascript\"},{\"_id\":\"kZc52L98eWmNXyS6r\",\"language\":\"python3\"},{\"_id\":\"meW57kaRdoEmTyhNF\",\"language\":\"ruby\"},{\"_id\":\"tnFzaRMd6ofbSpjTA\",\"language\":\"swift\"}]}}"]