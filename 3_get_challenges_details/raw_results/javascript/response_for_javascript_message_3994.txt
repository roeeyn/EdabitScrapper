a["{\"msg\":\"result\",\"id\":\"754\",\"result\":{\"_id\":\"pkJWJAvpnqp6rCY9y\",\"author\":\"Werdna\",\"authorId\":\"buX4mCQhtXCfBjeno\",\"code\":\"function findSingleNumber(numbers) {\\n\\t\\n}\",\"difficulty\":1.504,\"familyId\":\"uKxbmJew2udFog84x\",\"instructions\":\"Create a function that takes an array of integers as an argument and returns a unique number from that array. All numbers except unique ones have *the same number of occurrences* in the array.\\n\\n### Examples\\n```\\nfindSingleNumber([2, 2, 2, 3, 4, 4, 4]) ➞ 3\\n\\nfindSingleNumber([2]) ➞ 2\\n\\nfindSingleNumber([]) ➞ null\\n\\nfindSingleNumber([7, 13, 3, 6, 5, 4, 4, 13, 5, 3, 6, 7, 6, 5, 3, 13, 4, 7, 13, 5, 7, 4, 3, 6, 8, 4, 3, 7, 5, 6, 13]) ➞ 8\\n\\nfindSingleNumber([1, 2, 3, 6, 5, 4, 4, 2, 5, 3, 6, 1, 6, 5, 3, 2, 4, 1, 2, 5, 1, 4, 3, 6, 101, 4, 3, 1, 5, 6, 2]) ➞ 101\\n```\\n\\n### Notes\\n- Don't forget to `return` the result.\\n- Be aware this challenge includes two validations:\\n    1. Empty input should return `null` (example #3).\\n    2. Single item arrays should return that item (example #2).\\n- There are always 1 or 0 unique numbers in the input. No two or three+ uniques.\\n- If you're stuck or your solution is over complicated check the **Resources** tab.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assertEquals(findSingleNumber([2,2,2, 3, 4,4,4]), 3)\\nTest.assertEquals(findSingleNumber([415]), 415)\\nTest.assertEquals(findSingleNumber([]), null)\\nTest.assertEquals(findSingleNumber([7,13,3,6,5,4,4,13,5,3,6,7,6,5,3,13,4,7,13,5,7,4,3,6,8,4,3,7,5,6,13]), 8)\\nTest.assertEquals(findSingleNumber([1, 2, 3, 6, 5, 4, 4, 2, 5, 3, 6, 1, 6, 5, 3, 2, 4, 1, 2, 5, 1, 4, 3, 6, 101, 4, 3, 1, 5, 6, 2]), 101)\\nTest.assertEquals(findSingleNumber([1, 2, 2, 3, 3]), 1)\\nTest.assertEquals(typeof(findSingleNumber([243, 70, 18, 60, 284, 148, 418, 360, 727, 791, 325])), 'number')\\nTest.assertEquals(findSingleNumber([364, 938, 123, 686, 111, 227, 802, 667, 35, 858, 364, 938, 123, 686, 111, 227, 802, 667, 35, 858, 364, 938, 123, 686, 111, 227, 802, 667, 35, 858, 364, 938, 123, 686, 111, 227, 802, 667, 35, 858, 364, 938, 123, 686, 111, 227, 802, 667, 35, 858, 497]), 497)\\nTest.assertEquals(findSingleNumber([116, 621, 698, 894, 96, 630, 291, 327, 911, 350, 116, 621, 698, 894, 96, 630, 291, 327, 911, 350, 521]), 521)\\n\\n// Original challenge for Serf's Python challenge\",\"language\":\"javascript\",\"quality\":4.716666666666667,\"summary\":\"Create a function that takes an array of integers as an argument and returns a unique number from that array. All numbers except unique ones have the same number of occurrences in the array.\\n\\nExamples\\nfindSingleNumber([2, 2, 2, 3, 4, 4, 4]) ➞ 3\\n\\nfindSingleNumber([2]) ➞ 2\\n\\nfindSingleNumber([]) ➞ null\\n\\nfindSingleNumber([7, 13, 3, 6, 5, 4, 4, 13, 5, 3, 6, 7, 6, 5\",\"tags\":[\"arrays\",\"numbers\",\"language_fundamentals\"],\"timestamp\":{\"$date\":1608756827332},\"title\":\"Find Unique Number in Array\",\"stats\":{\"completed\":{\"total\":183,\"ratings\":[1,1,1,1,1,0,1,0,0,1,0,0,2,1,1,1,0,1,0,2,0,2,1,0,2,2,2,2,2,2,1,1,2,2,2,3,2,2,1,2,2,3,1,1,2,3,2,0,0,0,3,2,2,1,2,1,2,0,2,2,2,2,3,4,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,2,1,2,2,0,2,2,2,2,2,2,2,2,2,0,2,1,5,1,2,1,0,2,1,2,1,2,0,1,2,1,2,2,1,2,3,1,1,1,2,2,0,0,2,1,2],\"quality\":[5,5,5,5,5,5,5,5,5,5,5,4,5,3,5,5,5,5,5,5,5,5,3,5,5,4,3,3,5,5,5,3,5,5,4,5,4,5,5,5,4,5,5,5,5,5,5,5,5,5,5,4,5,5,5,5,5,4,5,5],\"rators\":[\"J7d397iB5GuWRAMfg\",\"buX4mCQhtXCfBjeno\",\"jcPZ5ySXseCB7Ec3x\",\"PAzNgJF54C2mYPkR9\",\"srJ34BaybkQh3qRkM\",\"yjtdwc2AC4jA2RWtn\",\"7q8oBsCHwn48Ppnrq\",\"3h5dGS6W8akioYnWD\",\"RtPhDuwmvWNHiBxmG\",\"nyh73Tr6GhqAat78g\",\"QRv96jmNaYsWkxQEG\",\"g4NCSxxHqHCGMpWwT\",\"SNiJRRosrmSWssLj4\",\"AFfw7cGg83uYk2Miy\",\"3WtHp4MBzciz4AE8M\",\"RE4Mm9T6Q9uygAxGS\",\"mHT2bJb5SByfJ8yKS\",\"erQgJKaHaETRcqs4x\",\"8EJ4j2fcfjTJ7Zrzu\",\"u9cRf5kvtpRB5ffB3\",\"m6qKkBY4aPWziyJTj\",\"QGjY3hgPYPMmMjc7j\",\"5hHf2e9zimbmxMqqF\",\"feJZACGcZ6ytf3vxb\",\"Zh8tYn8e64NKu3cbh\",\"jkumHyXfMkhGcPgqC\",\"Ya3eHgs8x3unZRLpb\",\"sYvws3rpqSypjXMLT\",\"P2goAfyzZiEmR5XzX\",\"mxon25eMk7sDTRW9s\",\"QoTqbSG8WCoQXXzbx\",\"2Qk2mFu9HBFzrB24i\",\"TacvtnDQwCiTYMowv\",\"2FmAgd6nb4vEZCRv5\",\"qFJpEDM2Ep6v4tqPz\",\"87Q3XMWaxYqQfFJzm\",\"3SKmXhcLPPkmQhjip\",\"YKCx8gSnNYzPikLBe\",\"2fJKbzdAFeuytJBjb\",\"w9EvLj4BxsaRatuE9\",\"jLSZdBseR2kfjt8dL\",\"6BpBQnSGhzgvhXrEy\",\"H46gRHmkdz2CRrGH9\",\"gR2vYDNPKhAcxa2yk\",\"qXpMDqZhRyPxuBzMw\",\"NQPGhjQC7eJvuGwNd\",\"jmefBK7j5Yutty4hj\",\"zdxjhoaN2SmaqAWMu\",\"Yp7uvStL97cC9fKkY\",\"ouabBNowvhzMnMKqa\",\"FGEeCTorXbX3WvjFW\",\"zw7g7T8wE5R5CBhXr\",\"rdF6thfrJ4ZHeXMg5\",\"HTAm62DZytAEFgSnu\",\"PtpZzTyCnfqM2X7cL\",\"QAZ5DGaWWYhku4BNz\",\"fMbZnKta63wqpPsqN\",\"3hvDXodeT8HSF32Ns\",\"jTi6nYBxYHM8qcQcW\",\"x8z2xmm78AMHNomgh\",\"8s5Bdrn7RTga7DL6x\",\"f3RAbWvE6uESq7KE5\",\"pWJWQDhqzDSmfaFam\",\"MKQsH4dxSYj7s3YdN\",\"BjJhatTBaTWm3ZhCt\",\"AfDp77stBcoq3Xu6B\",\"FJsvM5yqKuK9yMk9P\",\"CH53jGETBeJTummf3\",\"CNc6rmwhbxkxEhHAp\",\"bNYtRYYdFmC3uudfX\",\"vPCEhwXHQEA3e8bvF\",\"fmGxoq2QvkMbt4kJn\",\"pi76g3eRpnKrhee2a\",\"4fykR5E2yzcGBd2Yt\",\"qzzyGD7fCCDjX25za\",\"qWR7eXxBiNee22A5u\",\"yq3MrJoHHMPNCu55C\",\"xges5rijESfvNfJ7w\",\"eQXwk5zGckM8tCWYH\",\"wFNPrwMtMZAJDRyAs\",\"ZTTJprKDvFqKGew7c\",\"XscFaD4g2aLhjk6oS\",\"MCw4jyHtpMqsK66bT\",\"HRpELhvG59jPywCdH\",\"94XQj7wutz9ySewYC\",\"dxFtJBqPxFSsh44Em\",\"CJBPyyfyaEeEo63sb\",\"8BJyXvRWcrvN3nttS\",\"Kntd2rSgWYWp8r4sP\",\"e9Cknxbx6o7Nb6REs\",\"5NGxHLcQ8Af2RJ4TN\",\"Qi3ZTiut4tWJPHibz\",\"YLTZRjM78Wi9J9Re4\",\"kp2ZbCewZJAbfd7xv\",\"oyB4Wr4EeZnoDaa8B\",\"nkH3HfJXLMNcBMM79\",\"4wR64Jaibcom7tbYf\",\"8Z3dkvWBqtrMEE48N\",\"evTTY9hwrtogaNxXn\",\"Po3v3dHCk6wYGKMwi\",\"z5ebtimXwFFJdYxoa\",\"LCn6qz2GoMr5577Rd\",\"2tCCFm5iefjrRSaxv\",\"STipuJs6kBvPqqsSE\",\"cp3X8hk8yNME7qoD9\",\"zgoq9MhrL2h75DAMA\",\"BdnE4RS5puoxo92mA\",\"Jwoe6heepP8r77Doj\",\"5uj4mTXdaDL3wLDWw\",\"YA4D6v2ZJJBGERPPx\",\"ApqWTmEEkTCsDou48\",\"E6DBfkTgHuPsDWdG8\",\"M4vq8ATaS9Jg5X7iP\",\"wJTDDTE3TrmSXKP4d\",\"Nb6LYPoQP6KJZt8mz\",\"npp5hesJrst6ghKSM\",\"K45zPJxsABuA3WSyj\",\"PTo9qt93YqGvL8fCa\",\"jyCByAZwu576xDwEL\",\"k6QB6fzbj4LsWktRL\",\"oDnPTXrzYF4snDPXY\",\"3xMRkNrEPHEw99y56\",\"LwD3CyYSiBfg3mA4r\",\"zEt6FvmkSPSHvCyGF\",\"jnyub52Fi79drGvow\",\"TtrXnGzi9MyhLvWiz\",\"R9uaMzX2Y4ND8Cosm\",\"eomLS3wh6tQPN8jtH\",\"65dbBZynphj53nXqA\",\"bX6tpTCjwoi6XMMbK\",\"o8F8jLRGk5eu6m6do\",\"DPi9QGLctq2y76KuE\",\"oDtGiNqDMHmhHE3J8\",\"vGKxRcDYDsXzTQuEQ\",\"yuLxi2qBJvMnwgdgJ\",\"QjGNkRM3Xc78yShJN\",\"tAF9Gf6PiGogbZuWs\",\"szQg8dxKNNre3v3Jk\",\"sNcDN3s3rH9wcNg5n\",\"yWSGujxphYSsL63Zq\",\"AasGs8AeX9Lcb9xJn\",\"NGvCPuMiAP3xrRLfB\",\"Q7Yxda7dqKeYPs2Db\",\"nBJve5CzG6WAw7WFQ\",\"mpLFbFKjY6u3nsDMv\",\"Kt6oGAfrymXmAnn2d\",\"N3CNtWZz4ovJfH9Aw\",\"gXTAie79kiw28tx5u\",\"PH32cNxBjrK4a28sn\",\"ZKuwzkssrSsDGNPr5\",\"7wtuhPesfhcYsfZaZ\",\"jyoLggHk8xQKZuoQC\",\"sN2JyFeJCwfwwHPwF\",\"jicWFrNKadYuLhqxh\",\"bfYmA3LMvhSrK59cn\",\"SCYNpjgtLCE9rKpYB\",\"9HZbxzkzgz4CvePtv\",\"M9FSBf8ozMi5MvYDT\",\"sMcFMPkMJC4Kh6ymj\",\"9XnGoq9Tv6ut3zTtH\",\"QHiEYtz3tX3s9nETo\",\"d8JhF9zfpexkRnCea\",\"rPsSEYqwmttMPEuvo\",\"uAS9uKs8KQmp8uhqn\",\"inbiBEY2tizFwkN84\",\"uxKGACwmZ6FNZsMwE\",\"z47JaNrQMgvuPx5HE\",\"x2Cz7S8rCKJqCE3Xe\",\"HCfkcKnPs9mrJojdG\",\"QguFWo84zgF3c8BGr\",\"aEm3Wvj2rFYRL8Lrb\",\"gf4xrfguK6KiEF9yi\",\"QnPD4Sv6W4LHc2Qng\",\"LPZ2QKCoB8q6rG25c\",\"zJTXDTdbwnopRazGo\",\"CHvzhtXnv8HTbPQ56\",\"qAEumdjLRx2AGAmzw\",\"RoGGD5cpHb4ftdLDv\",\"WnogMFYXoyvmBmGkm\",\"psdbt2PkjPv4qTwtr\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"yCYP2SB3utSJDqxYW\",\"language\":\"cpp\"},{\"_id\":\"pkJWJAvpnqp6rCY9y\",\"language\":\"javascript\"},{\"_id\":\"8wtTo5Czcgm9Q6bPc\",\"language\":\"python3\"},{\"_id\":\"LGkwJDXCp2grGwKqg\",\"language\":\"ruby\"}]}}"]