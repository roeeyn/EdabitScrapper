a["{\"msg\":\"result\",\"id\":\"1944\",\"result\":{\"_id\":\"6YfWWLSQyPJwz2Srg\",\"author\":\"Kálmán Vilisics\",\"authorId\":\"Es4eX2stRpyoXeC7f\",\"code\":\"function invert(arr) {\\n\\t\\n}\",\"difficulty\":2.7540983606557377,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"nC8hYs5gwPxuD6mMT\",\"instructions\":\"Images can be described as a 3D array.\\n\\n```\\n// This image has only one white pixel:\\n\\n[\\n  [[255, 255, 255]]\\n]\\n```\\n\\n```\\n// This one is a 2 by 2 black image:\\n\\n[\\n  [[0, 0, 0], [0, 0, 0]],\\n  [[0, 0, 0], [0, 0, 0]]\\n]\\n```\\n\\nYour task is to create a function that takes a 3D array representation of an image and returns the inverse of that.\\n\\nFor example, white becomes black, black becomes white, etc.\\n\\n### Examples\\n```\\ninvert([\\n  [[255, 255, 255], [255, 255, 255]],\\n  [[255, 255, 255], [255, 255, 255]]\\n]) ➞ [\\n  [[0, 0, 0], [0, 0, 0]],\\n  [[0, 0, 0], [0, 0, 0]]\\n]\\n```\\n\\n### Notes\\n- A valid RGB value ranges from 0 to 255 (inclusive).\\n- If the given array contains out of bound values, convert them to the nearest valid one.\\n- Next challenge in this series: [Image Manipulation: 255 Shades of Grey (Part 2)](https://edabit.com/challenge/BDbY3zSN8mcBN2Xrn)\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assertSimilar(invert([\\n\\t[[255,255,255], [255,255,255]],\\n\\t[[255,255,255], [255,255,255]]\\n]), [\\n\\t[[0,0,0], [0,0,0]],\\n\\t[[0,0,0], [0,0,0]]\\n])\\n\\nTest.assertSimilar(invert([\\n\\t[[0,0,0], [0,0,0], [0,0,0]],\\n\\t[[0,0,0], [0,0,0], [0,0,0]],\\n\\t[[0,0,0], [0,0,0], [0,0,0]]\\n]), [\\n\\t[[255,255,255], [255,255,255], [255,255,255]],\\n\\t[[255,255,255], [255,255,255], [255,255,255]],\\n\\t[[255,255,255], [255,255,255], [255,255,255]]\\n])\\n\\nTest.assertSimilar(invert([\\n\\t[[0,0,255], [0,0,0], [0,0,157], [100,229,4]],\\n\\t[[100,0,3], [1,100,0], [0,10,0], [0,168,0]],\\n\\t[[16,30,0], [0,125,0], [15,0,9], [0,139,0]],\\n\\t[[200,2,0], [0,125,0], [0,0,9], [0,200,0]]\\n]), [\\n\\t[[255,255,0], [255,255,255], [255,255,98], [155,26,251]],\\n\\t[[155,255,252], [254,155,255], [255,245,255], [255,87,255]],\\n\\t[[239,225,255], [255,130,255], [240,255,246], [255,116,255]],\\n\\t[[55,253,255], [255,130,255], [255,255,246], [255,55,255]]\\n])\\n\\nTest.assertSimilar(invert([\\n\\t[[0,255,255], [256,255,255]],\\n\\t[[255,-1,255], [255,255,255]]\\n]), [\\n\\t[[255,0,0], [0,0,0]],\\n\\t[[0,255,0], [0,0,0]]\\n])\",\"language\":\"javascript\",\"quality\":4.541666666666667,\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,3,5,5,5,1,4,1,3,5,4,2,3,2,5,2,3,5,3,3,2,2,2,2,3,5,2,2,5,3,3,3,4,2,2,4,2,4,1,2,2,2,0,2,2,3,1,3,0,2,0,3,3,3,3,2,3],\"quality\":[4,5,5,5,4,5,4,5,5,5,5,5,5,4,1,5,5,5,5,5,2,5,5,5],\"rators\":[\"Es4eX2stRpyoXeC7f\",\"QCSFTTvp47cwDCezs\",\"bXaGdBM8FBLHf7N6Y\",\"tAF9Gf6PiGogbZuWs\",\"yjtdwc2AC4jA2RWtn\",\"va3fDAQm4sqSMoy3R\",\"aEm3Wvj2rFYRL8Lrb\",\"pWJWQDhqzDSmfaFam\",\"tE8iqyAxBJfEaWdxy\",\"FMhGQDbfwWYQKGYeZ\",\"mHT2bJb5SByfJ8yKS\",\"sYJKcRHeWxTBoAdaL\",\"j3efFJpqiwjozrkBW\",\"mwg8jvMHHmQiQRrbr\",\"c8qtrDgBAsTfBAD3S\",\"NtecG2ZaXDiLf2KLN\",\"2okx54gGL8GqfxPG2\",\"kp2ZbCewZJAbfd7xv\",\"QhrvcKMsvcz8zsKZo\",\"PRd3ZE6vHgzsezF7z\",\"tR2bMDoKMCiujrkRi\",\"nphNJCcuiQKh8bNHq\",\"hcm8sL8mNJTSfTdgE\",\"iAZHNugzhr4w9MKMc\",\"qXjqhkyaenYycuoqJ\",\"f6K5wzQW2fzYvgE98\",\"REwjhANYpZvCgXt2b\",\"XrN688tKMi8qqsNFK\",\"uxCKp6j9NKkBKfJKs\",\"o5unhNGDunoN8zgk3\",\"SYEuojZtP6yLXryHv\",\"8bHCiKzt8NosF6brS\",\"38SETM3Gj3jdbwuiq\",\"EkaHge5WaoGpiCxpx\",\"Akq3fQcPRgPrWfsye\",\"T2EQEgnphzSQkne9k\",\"QRv96jmNaYsWkxQEG\",\"Lts22EbB5q962NkrD\",\"6DSdGxu5TeDtua7Fw\",\"u9cRf5kvtpRB5ffB3\",\"P6Nj8vL3bcTZFD2Xz\",\"zbJsuqMQMqwcNoNqZ\",\"nXToJ5kpsRfi4nyw2\",\"SSQyTQfxhabSd4pjG\",\"qeFAzzrvoEZBD2mfc\",\"fECdwynR7aZZTmDno\",\"n5wubRfh6zh8QRymN\",\"EJXaAcika2bAcRAta\",\"faYyw7jGsSeaMeYYd\",\"ZhusfKHYdLHnNGPh3\",\"y5RD8ZMaJJsR336bx\",\"2YF9pq5TMZcck8GxD\",\"Er39N3Lx3dx2nSpc9\",\"pRq37re3NG2n4pR7g\",\"zS7Z7MySb9NkwPgPW\",\"EHLyKPrnhFdNh3tDi\",\"rjGbHeZYY7pL7X9Ei\",\"cqXkkWPpTqJF2BvfW\",\"Cdxec5Nt8BMwdtH52\",\"eKSJgCaiy4ReJWXTg\",\"8SYDBRtkZuW3pdPtG\",\"PytNZK9mNiRiZxPrm\",\"M4vq8ATaS9Jg5X7iP\",\"wKPzgoYJTQMwSBSKo\",\"bX6tpTCjwoi6XMMbK\",\"ZgdejAm3u2Q6tFpfg\",\"DpGAjQJnGDnqx3tg5\",\"ovBPd28PNiWQQapBG\",\"okwyvNzWr9DsvEvcQ\",\"BjQkMMomdweG5Kxqv\",\"9XnGoq9Tv6ut3zTtH\",\"PH32cNxBjrK4a28sn\",\"P8bXFR4cHwFia9rNM\",\"9gEWz76H8KmhN4yJj\",\"YfWyvMhdY3xcGrK5R\",\"s678Wirfor5uYL5T6\",\"oDtGiNqDMHmhHE3J8\",\"jkkKzNT77bMStXhpW\",\"RE4Mm9T6Q9uygAxGS\",\"8BJyXvRWcrvN3nttS\"],\"total\":83},\"flags\":0},\"summary\":\"Images can be described as a 3D array.\\n\\n// This image has only one white pixel:\\n\\n[\\n  [[255, 255, 255]]\\n]\\n\\n// This one is a 2 by 2 black image:\\n\\n[\\n  [[0, 0, 0], [0, 0, 0]],\\n  [[0, 0, 0], [0, 0, 0]]\\n]\\n\\nYour task is to create a function that takes a 3D array representation of an image and returns the inverse of that.\\n\\nFor example, white becomes black, black becom\",\"tags\":[\"arrays\",\"loops\",\"logic\",\"data_structures\"],\"timestamp\":{\"$date\":1601884253227},\"title\":\"Image Manipulation: Invert (Part 1)\",\"family\":[{\"_id\":\"6YfWWLSQyPJwz2Srg\",\"language\":\"javascript\"},{\"_id\":\"57oGnnqP5sxW2KHi4\",\"language\":\"python3\"},{\"_id\":\"L6f5StWWro75d8k4P\",\"language\":\"ruby\"}]}}"]