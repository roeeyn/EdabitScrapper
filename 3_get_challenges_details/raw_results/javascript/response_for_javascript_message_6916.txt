a["{\"msg\":\"result\",\"id\":\"2203\",\"result\":{\"_id\":\"qQu4kxTEHapogmCgE\",\"archived\":false,\"author\":\"Craig McIlwrath\",\"authorId\":\"i5iQHDDRCH6PQ4uss\",\"code\":\"function navigate(roads, startingNode, endingNode) {\\n\\t\\n}\",\"difficulty\":3.3461538461538463,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"XuvdvzqLp739hGY5M\",\"instructions\":\"Road systems can be imagined as a graph of intersections connected by lines. The advantage of this is it makes it easier to find the shortest path between any two intersections.\\n\\n### Task\\nWrite a function that takes as arguments:\\n- A graph of the road system\\n- The starting intersection (node)\\n- The ending intersection (node)\\n\\nAnd returns an object containing information about the shortest path.\\n\\n### Format of the road graph\\nThe road graph follows the JSON graph specification linked in the **Resources** tab. As an example, this is what one road graph could look like (in JSON):\\n```json\\n{\\n  \\\"graph\\\": {\\n    \\\"directed\\\": false,\\n    \\\"nodes\\\": [\\n      { \\\"id\\\": 0 },\\n      { \\\"id\\\": 1 },\\n      { \\\"id\\\": 2 },\\n       { \\\"id\\\": 3 }\\n    ],\\n    \\\"edges\\\": [\\n      {\\n        \\\"source\\\": 0,\\n        \\\"target\\\": 1,\\n        \\\"metadata\\\": {\\n          \\\"distance\\\": 5\\n        }\\n      },\\n      {\\n        \\\"source\\\": 1,\\n        \\\"target\\\": 3,\\n        \\\"metadata\\\": {\\n          \\\"distance\\\": 9\\n        }\\n      },\\n      {\\n        \\\"source\\\": 3,\\n        \\\"target\\\": 2,\\n        \\\"metadata\\\": {\\n          \\\"distance\\\": 6\\n        }\\n      },\\n      {\\n        \\\"source\\\": 2,\\n        \\\"target\\\": 4,\\n        \\\"metadata\\\": {\\n          \\\"distance\\\": 3\\n        }\\n      },\\n      {\\n        \\\"source\\\": 4,\\n        \\\"target\\\": 3,\\n        \\\"metadata\\\": {\\n          \\\"distance\\\": 8\\n        },\\n      },\\n      {\\n       \\\"source\\\": 4,\\n       \\\"target\\\": 0,\\n       \\\"metadata\\\": {\\n         \\\"distance\\\": 2\\n       }\\n     }\\n    ]\\n  }\\n}\\n```\\nAdditionally, all edges  are **two way roads** (undirected), so you don't need to worry about that. Which node is in `source` and which is in `target` **does not matter**. Edges may contain the property `label`, which is just a street name and not necessary for you to use.\\n\\nAnd remember, the goal is to **minimize** the sum of all the `metadata.distance` properties of edges used.\\n\\n### Format of return value\\nThe return value should be an **object** with properties `distance` and `path`.\\n\\n`distance` should be the number that is the total sum of the distance metadata on each edge used.\\n\\n`path` should be an **array** of **numbers**, where each number is the id of a node used along the path from the start to the end.\\n\\nFor example, if the shortest path from node `1` to node id `2` was going from node 1 to node 3 to node 2, then the result should be `[1, 3, 2]`.  You **must** include the starting and ending nodes in the path.\\n\\nIf two paths have the same distance, it **does not matter** which one you return (which won't happen in the tests).\\n\\n### Example\\nIn the example road graph, if I asked you to find the path from node id 2 to node id 0, the function call would be\\n```js\\nnavigate(roads, 2, 0) // Where roads is the example graph structure\\n``` \\nAnd you should return\\n```json\\n{\\n  \\\"distance\\\": 5,\\n  \\\"path\\\": [ 2, 4, 0 ]\\n}\\n```\\n\\n### Notes\\n- If two paths have the same distance, it doesn't matter which one you return (which won't happen in the tests).\\n- Make sure to include the starting and ending nodes in the path.\\n- The order of the path array **does** matter.\\n- Distance between 2 nodes is located in the `metadata.distance` property of the edge connecting them.\",\"lab\":\"const graph = JSON.parse(`\\n{\\n  \\\"directed\\\": false,\\n  \\\"nodes\\\": [\\n    { \\\"id\\\": 0 },\\n    { \\\"id\\\": 1 },\\n    { \\\"id\\\": 2 },\\n    { \\\"id\\\": 3 },\\n    { \\\"id\\\": 4 },\\n    { \\\"id\\\": 5 },\\n    { \\\"id\\\": 6 },\\n    { \\\"id\\\": 7 },\\n    { \\\"id\\\": 8 },\\n    { \\\"id\\\": 9 }\\n  ],\\n  \\\"edges\\\": [\\n    {\\n      \\\"source\\\": 1,\\n      \\\"target\\\": 6,\\n      \\\"label\\\": \\\"Oak Street\\\",\\n      \\\"metadata\\\": {\\n        \\\"distance\\\": 5\\n      }\\n    },\\n    {\\n      \\\"source\\\": 6,\\n      \\\"target\\\": 8,\\n      \\\"label\\\": \\\"Oak Street\\\",\\n      \\\"metadata\\\": {\\n        \\\"distance\\\": 6\\n      }\\n    },\\n    {\\n      \\\"source\\\": 8,\\n      \\\"target\\\": 9,\\n      \\\"label\\\": \\\"Oak Street\\\",\\n      \\\"metadata\\\": {\\n        \\\"distance\\\": 11\\n      }\\n    },\\n    {\\n      \\\"source\\\": 8,\\n      \\\"target\\\": 7,\\n      \\\"label\\\": \\\"Robin Way\\\",\\n      \\\"metadata\\\": {\\n        \\\"distance\\\": 3\\n      }\\n    },\\n    {\\n      \\\"source\\\": 7,\\n      \\\"target\\\": 4,\\n      \\\"label\\\": \\\"Robin Way\\\",\\n      \\\"metadata\\\": {\\n        \\\"distance\\\": 5\\n      }\\n    },\\n    {\\n      \\\"source\\\": 6,\\n      \\\"target\\\": 7,\\n      \\\"label\\\": \\\"Mountain Road\\\",\\n      \\\"metadata\\\": {\\n        \\\"distance\\\": 8\\n      }\\n    },\\n    {\\n      \\\"source\\\": 7,\\n      \\\"target\\\": 9,\\n      \\\"label\\\": \\\"Mountain Road\\\",\\n      \\\"metadata\\\": {\\n        \\\"distance\\\": 9\\n      }\\n    },\\n    {\\n      \\\"source\\\": 4,\\n      \\\"target\\\": 3,\\n      \\\"label\\\": \\\"National Street\\\",\\n      \\\"metadata\\\": {\\n        \\\"distance\\\": 6\\n      }\\n    },\\n    {\\n      \\\"source\\\": 1,\\n      \\\"target\\\": 0,\\n      \\\"label\\\": \\\"Sunrise Drive\\\",\\n      \\\"metadata\\\": {\\n        \\\"distance\\\": 4\\n      }\\n    },\\n    {\\n      \\\"source\\\": 0,\\n      \\\"target\\\": 3,\\n      \\\"label\\\": \\\"Short Street\\\",\\n      \\\"metadata\\\": {\\n        \\\"distance\\\": 3\\n      }\\n    },\\n    {\\n      \\\"source\\\": 5,\\n      \\\"target\\\": 4,\\n      \\\"label\\\": \\\"Rickety Creek\\\",\\n      \\\"metadata\\\": {\\n        \\\"distance\\\": 7\\n      }\\n    },\\n    {\\n      \\\"source\\\": 4,\\n      \\\"target\\\": 0,\\n      \\\"label\\\": \\\"Rickety Creek\\\",\\n      \\\"metadata\\\": {\\n        \\\"distance\\\": 5\\n      }\\n    },\\n    {\\n      \\\"source\\\": 9,\\n      \\\"target\\\": 5,\\n      \\\"label\\\": \\\"Uphill Grove\\\",\\n      \\\"metadata\\\": {\\n        \\\"distance\\\": 6\\n      }\\n    },\\n    {\\n      \\\"source\\\": 5,\\n      \\\"target\\\": 2,\\n      \\\"label\\\": \\\"Uphill Grove\\\",\\n      \\\"metadata\\\": {\\n        \\\"distance\\\": 5\\n      }\\n    },\\n    {\\n      \\\"source\\\": 2,\\n      \\\"target\\\": 3,\\n      \\\"label\\\": \\\"Uphill Grove\\\",\\n      \\\"metadata\\\": {\\n        \\\"distance\\\": 7\\n      }\\n    }\\n  ]\\n}\\n`);\\nconst roads = {\\n  graph,\\n};\\n\\nconst testResult = (actual, expected) => {\\n  console.log(\\\"####################\\\");\\n  console.log(\\\"EXPECTED: \\\", JSON.stringify(expected));\\n  console.log(\\\"ACTUAL: \\\", JSON.stringify(actual));\\n  console.log(\\\"TEST: DISTANCE\\\")\\n\\tTest.assertEquals(actual.distance, expected.distance);\\n  console.log(\\\"TEST: PATH\\\")\\n\\texpected.path.forEach((id, i) => {\\n\\t\\tTest.assertEquals(actual.path[i], id);\\n\\t});\\n  console.log(\\\"####################\\\");\\n};\\n\\ntestResult(navigate(roads, 1, 5), {\\n  distance: 16,\\n  path: [ 1, 0, 4, 5 ],\\n});\\ntestResult(navigate(roads, 6, 2), {\\n\\tdistance: 19,\\n\\tpath: [ 6, 1, 0, 3, 2 ],\\n});\\ntestResult(navigate(roads, 3, 4), {\\n\\tdistance: 6,\\n\\tpath: [ 3, 4 ],\\n});\",\"language\":\"javascript\",\"summary\":\"Road systems can be imagined as a graph of intersections connected by lines. The advantage of this is it makes it easier to find the shortest path between any two intersections.\\n\\nTask\\nWrite a function that takes as arguments:\\nA graph of the road system\\nThe starting intersection (node)\\nThe ending intersection (node)\\n\\nAnd returns an object containing information\",\"tags\":[\"algorithms\",\"data_structures\"],\"timestamp\":{\"$date\":1523194412818},\"title\":\"Road Navigation\",\"stats\":{\"completed\":{\"total\":54,\"ratings\":[3,3,3,3,3,2,5,5,5,3,3,3,2,5,5,0,3,3,5,5,0,5,0,5,3,5,0,5,5,4,5,0,5,2,5,5,5,0,5,0,0,5,5,5,5,0,5,4,2,5,2,3],\"rators\":[\"i5iQHDDRCH6PQ4uss\",\"8CAGnKSAsKtjGDGC5\",\"thEsZ7N6X8qfZMbcv\",\"AcpT6wvCtYyquJZtS\",\"TQr37GYEacW9neZES\",\"yHbFP267fGBkfDm4n\",\"cjPctypCBwjdjPELh\",\"GSpikwcvuX4xmezXv\",\"n6RPwNZ7JGt4k8iG3\",\"vjmRR6x3mPXXYQQP8\",\"SGWtjgQ4egvxR6guc\",\"m9qSGaZgDcLGperza\",\"LF7rbv4xECxGiQaTA\",\"XcHCqYmeoqxDsoucx\",\"QCchMDx3z8NcqT8QJ\",\"65dbBZynphj53nXqA\",\"rKd6wRZjmhew4wxR8\",\"JXb2TpuretfMdHMvb\",\"4r64YQWjZL6F3E2bY\",\"sHdXbubqu6eChjuhC\",\"XTCebLPQLaxTt8N7C\",\"vDNHAFXgogPbiPikE\",\"6cF2nrD29Nn2AeKP7\",\"X9gzW6TkvYB4rbrx7\",\"rdNqeKKCwqmELuhvJ\",\"fJxTxm9e5XHcfNSmr\",\"DXTBMuzjmJFLy6W3B\",\"FHSJnAYTbcsKFgeQa\",\"yjtdwc2AC4jA2RWtn\",\"7PP6aGLEosDGsjRqW\",\"mh8vssnsRH2TmQk8D\",\"pk6F3C2fbECgZ8nKW\",\"5DsYhKJiNTaarWKkM\",\"BBP9BE5mKHRzaRpJr\",\"cRpaCxYRmGcN3Nsoj\",\"CChg5gezrGwuB9NNi\",\"knxCMCGP3rAkiatRo\",\"FJz752tBZgKEFv5dp\",\"ZXRMRAJNP6eseLdbR\",\"JGBCMpnbbi5ztuFoX\",\"wcgDoaKbZtbCGPu6K\",\"MNDLmXZmFMf8ASL2L\",\"7TXyMDHFYjna3dyPb\",\"aEm3Wvj2rFYRL8Lrb\",\"uaqF6yZ7r7rvq4Rb6\",\"ffB8T76Ye9ygL6QZZ\",\"Ek9PiwGewEGH6fcqz\",\"va3fDAQm4sqSMoy3R\",\"zMCXYFZSsviDCvjnY\"],\"quality\":[5]},\"complaints\":{\"total\":0,\"reasons\":[],\"skippers\":[\"i5iQHDDRCH6PQ4uss\"]},\"instructions\":{\"score\":0,\"voters\":[\"o5W6YzxhE5PsY2tNB\",\"X289CatbRjtbje4ZZ\"]},\"tests\":{\"score\":0,\"voters\":[]},\"flags\":0},\"isHidden\":false,\"quality\":5,\"family\":[{\"_id\":\"qQu4kxTEHapogmCgE\",\"language\":\"javascript\"},{\"_id\":\"uxLZMo6PBXJk7rmdC\",\"language\":\"python3\"}]}}"]