a["{\"msg\":\"result\",\"id\":\"1613\",\"result\":{\"_id\":\"2TKegjnoSQ3Xeo8CB\",\"author\":\"Bartosz Cytrowski\",\"authorId\":\"QCchMDx3z8NcqT8QJ\",\"code\":\"function getGroupsWithStudents(groups, students) {\\n\\t\\n}\",\"difficulty\":2.2804878048780486,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"t6HQu7yXZLshbEstf\",\"instructions\":\"Create a function that takes two arrays: `groups` and `students`. It should return one array with `groups` merged with `students` by `id`. Students within groups should be ordered in the same way the `studentIds` were ordered.\\n\\n### Examples\\n```\\ngetGroupsWithStudents([\\n  { \\n    id: 1,\\n    name: \\\"G1\\\",\\n    studentIds: [2, 1]\\n  }\\n], [\\n  { \\n    id: 1,\\n    name: \\\"John\\\"\\n  },\\n  {\\n    id: 2,\\n    name: \\\"Steve\\\"\\n  }\\n]) âžž [\\n  { \\n    id: 1,\\n    name: \\\"G1\\\",\\n    students: [\\n      {\\n        id: 2,\\n        name: \\\"Steve\\\"\\n      },\\n      { \\n        id: 1, \\n        name: \\\"John\\\"\\n      }\\n    ]\\n  }\\n]\\n```\\n\\n### Notes\\nTry doing it with an arrow function.\",\"lab\":\"const objectsAreEqual = (actual, expected) => Object.keys(expected).every(\\n  key => actual[key] === expected[key]\\n)\\nconst areEqual = (actual, expected, compare) => expected.every(\\n  (item, index) => compare(actual[index], item)\\n)\\nconst sets = [\\n  [\\n    [\\n      {\\n        id: 1,\\n        name: 'G1',\\n        studentIds: [2, 1]\\n      },\\n      {\\n        id: 2,\\n        name: 'G2',\\n        studentIds: [1]\\n      }\\n    ],\\n    [\\n      {\\n        id: 1,\\n        name: 'John'\\n      },\\n      {\\n        id: 2,\\n        name: 'Steve'\\n      }\\n    ]\\n  ]\\n].map(\\n  ([groups, students]) => ({ \\n    actual: getGroupsWithStudents(\\n      groups, students\\n    ), \\n    expected: groups.map(({studentIds, name, id}) => ({\\n      id,\\n      name,\\n      students: studentIds.map(studentId => students.find(student => student.id === studentId))\\n    }))\\n  })\\n).forEach(\\n  ({ actual, expected }) => {\\n    Test.expectNoError('Result should be an array', () => {\\n      Test.assertEquals(\\n        JSON.stringify(actual), \\n        JSON.stringify(expected), \\n        `Actual: ${JSON.stringify(actual)}, Expected: ${JSON.stringify(expected)}`)\\n    })\\n  }\\n)\",\"language\":\"javascript\",\"summary\":\"Create a function that takes two arrays: groups and students. It should return one array with groups merged with students by id. Students within groups should be ordered in the same way the studentIds were ordered.\\n\\nExamples\\ngetGroupsWithStudents([\\n  {\\n    id: 1,\\n    name: \\\"G1\\\",\\n    studentIds: [2, 1]\\n  }\\n], [\\n  {\\n    id: 1,\\n    name: \\\"John\\\"\\n  },\\n  {\\n    id: 2\",\"tags\":[\"arrays\",\"formatting\",\"objects\"],\"timestamp\":{\"$date\":1549048661410},\"title\":\"Get Groups with Students\",\"stats\":{\"completed\":{\"total\":83,\"ratings\":[2,2,2,2,2,2,2,2,2,2,2,3,2,2,2,1,2,2,2,2,2,2,1,3,3,3,3,3,3,0,1,2,3,2,3,2,3,3,3,2,3,3,3,2,0,3,4,2,3,3,3,2,2,0,3,3,3,3,3,2,2,3,2,3,3,4,3,1,3,1,3,2,3,0,2,1,3,3,3,0,3,2],\"rators\":[\"QCchMDx3z8NcqT8QJ\",\"65dbBZynphj53nXqA\",\"GqgyH3odtiFeQXSeY\",\"SDtZFL5NzAoCPofXk\",\"ak5aPiT6QWpmbnPzD\",\"RWoKRGLYvroLvhz79\",\"ou2hiyPBXea4s4oqC\",\"bNt9w9P5PfEXJXDPg\",\"AX6HbB8rARLjiAjtJ\",\"uLjxtusKSYd8eufeA\",\"T5Ekv6JfjiBSD9cSb\",\"XHngE5iScvztMpnR2\",\"2innwjWqxJHo4eRGh\",\"kYJupSpPXAe6SSFbR\",\"F4op7npQGaGoKy9Li\",\"PmmNQRKL9dH8hac2e\",\"SFTxrRYF8wjmKjXGc\",\"AQPt9kQZBLa2nb44L\",\"WQ87sDtTd8KxbN4tT\",\"oDoqT5cEh5THt3zBS\",\"h4jFmtbFn92eA4649\",\"n5wubRfh6zh8QRymN\",\"54Ka62KytXRsrLPhZ\",\"bjn5DTzzaWCP5BDgX\",\"4itF2fjGR9Swc48Zp\",\"gyB5wJihaSZCWKTCB\",\"JAe93nc5vNewSckSB\",\"9yD94GMBrZi5Hiy3T\",\"yjtdwc2AC4jA2RWtn\",\"3YsBF3wYvGfE9jRhC\",\"hi4T9cRdY7T37Dbuy\",\"Y9Nz9yafaibz54W4o\",\"46EqDiLEdJPtDFujt\",\"6BpBQnSGhzgvhXrEy\",\"mHT2bJb5SByfJ8yKS\",\"DHwbkbzYNpmkSFT7u\",\"5Zq3aGdvh4LHBvnJL\",\"AasGs8AeX9Lcb9xJn\",\"nB2zvS7Cwaz58JyfP\",\"TNgarxjWc35WFZXPu\",\"PXeZGXDAhGzCpgPy8\",\"4WgxcywfLRdxZ4gzP\",\"5pEWJyHf5kNDyu9fi\",\"Nc23QyxhdeFRwzj5W\",\"t65p92MzHvSXbBzEY\",\"FJsvM5yqKuK9yMk9P\",\"YER6iBcpJCuhgrYDN\",\"a777e8chPvJkY3tKa\",\"pxJDqe6Yzd4TzzhnJ\",\"sW78rbapvsS3AnuJe\",\"jqbm8L6895JgAtZ6H\",\"z8R4K9Cd7PNuh256A\",\"uigAJ9KT5muMWTDis\",\"E2hpke7mHxAWsw5t9\",\"5wWMqPaquGWz8SfQN\",\"eFjGhq7C7bBKXjT6X\",\"8BysgGGJEybvg3EWk\",\"RRFsDNRaKW6h9tF3Y\",\"aEm3Wvj2rFYRL8Lrb\",\"kp2ZbCewZJAbfd7xv\",\"4Xv87xmdSnpYhi8hz\",\"YLTZRjM78Wi9J9Re4\",\"PH32cNxBjrK4a28sn\",\"M4vq8ATaS9Jg5X7iP\",\"CNc6rmwhbxkxEhHAp\",\"vGKxRcDYDsXzTQuEQ\",\"QRv96jmNaYsWkxQEG\",\"9ToxdXBnATpLmNx2E\",\"dXRdeSLeiyYybTjzb\",\"8BJyXvRWcrvN3nttS\",\"ZcJm2kuqJnN3CXFaR\",\"QvEXmSEo3ANp3yPyH\",\"Q7Yxda7dqKeYPs2Db\",\"aS38JNngoPHWbSt8f\",\"76rZ57Yc5w8KcuR4S\",\"wmTajiXRyp5fwAsaJ\",\"oDtGiNqDMHmhHE3J8\",\"K45zPJxsABuA3WSyj\",\"mpLFbFKjY6u3nsDMv\",\"D3xmSa4k7NPX6XfuZ\"],\"quality\":[5,5,2,4,5,5,5]},\"tests\":{\"score\":0,\"voters\":[\"QCchMDx3z8NcqT8QJ\"]},\"instructions\":{\"score\":0,\"voters\":[\"QCchMDx3z8NcqT8QJ\"]},\"flags\":0},\"isHidden\":false,\"quality\":4.428571428571429,\"family\":[{\"_id\":\"2TKegjnoSQ3Xeo8CB\",\"language\":\"javascript\"}]}}"]