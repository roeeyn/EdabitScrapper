a["{\"msg\":\"result\",\"id\":\"2163\",\"result\":{\"_id\":\"Zf5a8fNYZ6hPJeXE4\",\"author\":\"Pustur\",\"authorId\":\"65dbBZynphj53nXqA\",\"code\":\"function convertFunctions(fn) {\\n\\t\\n}\",\"difficulty\":3.196078431372549,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"FQX5dDcd3aDiLYJKa\",\"instructions\":\"In JavaScript ES6 an arrow function expression is a syntactically compact alternative to a regular function expression.\\n\\nCreate a function that takes a string representing a function and converts between an arrow function and a regular function\\n\\n- If the input is a regular function, return an equivalent arrow function.\\n- If the input is a arrow function, return an equivalent regular function.\\n\\n### Examples\\n```\\n// Function to arrow\\n\\n\\\"function () {}\\\" ➞ \\\"() => {}\\\"\\n\\n\\\"function name() {}\\\" ➞ \\\"const name = () => {}\\\"\\n\\n\\\"function name(str) { console.log(str); }\\\" ➞ \\\"const name = (str) => { console.log(str); }\\\"\\n```\\n\\n```\\n// Arrow to function\\n\\n\\\"() => {}\\\" ➞ \\\"function () {}\\\"\\n\\n\\\"const name = () => {}\\\" ➞ \\\"function name() {}\\\"\\n\\n\\\"let name = (str) => { console.log(str); }\\\" ➞ \\\"function name(str) { console.log(str); }\\\"\\n```\\n\\n### Notes\\n\\n- The body of the function can be multiline.\\n- Be careful with spaces, sometimes they're optional.\\n- An arrow function can be declared using `const` / `let` / `var` or nothing at all. However, when converting a regular function to an arrow, always use `const` (unless you're dealing with an anonymous function).\",\"lab\":\"const funcs = [\\n  `function(){}`,\\n  `function () {}`,\\n  `function name() {}`,\\n  `function name () {}`,\\n  `function name() { console.log('Hello') }`,\\n  `function name(str){ console.log(str); }`,\\n  `function name(str, num) {console.log(str, num);}`,\\n  `function name( str, num ) {\\n\\tconsole.log(str, num);\\n}`,\\n];\\nconst arrowsExpected = [\\n  `() => {}`,\\n  `() => {}`,\\n  `const name = () => {}`,\\n  `const name = () => {}`,\\n  `const name = () => { console.log('Hello') }`,\\n  `const name = (str) => { console.log(str); }`,\\n  `const name = (str, num) => {console.log(str, num);}`,\\n  `const name = ( str, num ) => {\\n\\tconsole.log(str, num);\\n}`,\\n];\\n\\nconst arrows = [\\n  `()=>{}`,\\n  `() => {}`,\\n  `name=()=>{}`,\\n  `const name=()=>{}`,\\n  `const name = () => {}`,\\n  `let name = () => { console.log('Hello') }`,\\n  `let name = (str) => { console.log(str); }`,\\n  `var name = (str, num) => {console.log(str, num);}`,\\n  `var name = ( str, num ) => {\\n\\tconsole.log(str, num);\\n}`,\\n];\\nconst funcsExpected = [\\n  `function () {}`,\\n  `function () {}`,\\n  `function name() {}`,\\n  `function name() {}`,\\n  `function name() {}`,\\n  `function name() { console.log('Hello') }`,\\n  `function name(str) { console.log(str); }`,\\n  `function name(str, num) {console.log(str, num);}`,\\n  `function name( str, num ) {\\n\\tconsole.log(str, num);\\n}`,\\n];\\n\\nfuncs.forEach((func, i) =>\\n  Test.assertEquals(convertFunctions(func), arrowsExpected[i])\\n);\\narrows.forEach((arrow, i) =>\\n  Test.assertEquals(convertFunctions(arrow), funcsExpected[i])\\n);\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,4,4,4,4,3,2,2,3,3,5,3,3,3,5,5,2,3,0,5,4,3,5,5,2,4,4,3,0,3,4,5,5,5,3,5,0,5,0,2,5,3,3,2,4,4],\"rators\":[\"65dbBZynphj53nXqA\",\"EjPLq3QSJdGQFJdgW\",\"yjtdwc2AC4jA2RWtn\",\"n5wubRfh6zh8QRymN\",\"eQdnBfe8riy82SNrK\",\"2innwjWqxJHo4eRGh\",\"cRpaCxYRmGcN3Nsoj\",\"EAuL56kpyLytw4RcR\",\"dPM2Rk2iMkznyXNEt\",\"AasGs8AeX9Lcb9xJn\",\"ZcqshY58sGEEvgeaq\",\"aEm3Wvj2rFYRL8Lrb\",\"pGh7WykiPe26fHJYv\",\"M4vq8ATaS9Jg5X7iP\",\"mDWNyaaQ9hvPCRzSd\",\"pWJWQDhqzDSmfaFam\",\"5NGxHLcQ8Af2RJ4TN\",\"xF7zR5PQrEkC6otYa\",\"rgmhomEQqsnngdSJZ\",\"GsrjAqoAdLATJH9qD\",\"gtwFbqmYgdqvmRh5c\",\"8SYDBRtkZuW3pdPtG\",\"Ztn39QNKSAdtQYhDB\",\"ZgdejAm3u2Q6tFpfg\",\"ftXLsTaA7yHmhuEsY\",\"HxvmahMR4PwbDdYS4\",\"3zfg83pXukbJooh9R\",\"SgCtGSL9kAGwHj2p6\",\"Kk3jdrvAbPENkw5Ft\",\"bsG9axce9cpmXoZGB\",\"3jS6bCbbBbgAjiw9f\",\"2sLmHo7G2irSyrDB7\",\"TmrfRHWFFvnFKa5Lb\",\"qWZLE2s7aRDQsnZ4p\",\"eegrwGKCFG2DEhn2x\",\"zQ8zBaxHqenjENnsR\",\"YQdHYk5JsyjDyvkma\",\"wo4cpen33NYFHNca7\",\"QvEXmSEo3ANp3yPyH\",\"KzfNm8M2n2iPjQxfw\",\"ucaDnFgvkB5hp5srb\",\"BpiAkZfs6sXRMdArb\",\"Q6Z6pCzTYPLACwhj7\",\"tAF9Gf6PiGogbZuWs\",\"NXqX4Z85LHq8emiX9\",\"kqJ5bxst5QGn7QnMC\",\"h4jFmtbFn92eA4649\",\"SdEQsNapyg24YATuh\",\"22r7FGKYMhtSR4GBW\",\"b6EHvmJouxnnpAmy9\",\"oDtGiNqDMHmhHE3J8\",\"m2cE2ZzpNHJS8GedN\",\"g28jvWTvaQ9stqEZe\",\"KG7PaR4Kj5TzQep8P\",\"SGhPxX5bHGL8zZqtt\",\"9RCffqSvtQy6dBATw\"],\"total\":59,\"quality\":[4,4,3,5,5,4,5,5,4,5]},\"flags\":0},\"subscribers\":[\"65dbBZynphj53nXqA\"],\"summary\":\"In JavaScript ES6 an arrow function expression is a syntactically compact alternative to a regular function expression.\\n\\nCreate a function that takes a string representing a function and converts between an arrow function and a regular function\\n\\nIf the input is a regular function, return an equivalent arrow function.\\nIf the input is a arrow function, return an\",\"tags\":[\"strings\",\"regex\",\"formatting\"],\"timestamp\":{\"$date\":1566087918156},\"title\":\"Convert an Arrow Function to a Regular Function\",\"isHidden\":false,\"quality\":4.4,\"family\":[{\"_id\":\"Zf5a8fNYZ6hPJeXE4\",\"language\":\"javascript\"}]}}"]