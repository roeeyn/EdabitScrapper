a["{\"msg\":\"result\",\"id\":\"1803\",\"result\":{\"_id\":\"gjKemfXwedir9y7D4\",\"author\":\"Jon Ingram\",\"authorId\":\"rTRvHndHZKKRkb9w5\",\"code\":\"function selectLetters(s1, s2) {\\n\\t\\n}\",\"difficulty\":2.613861386138614,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"44Pn69JnDESbzBFwn\",\"instructions\":\"Given two strings, `s1` and `s2`, select only the characters in each string where the character in the same position in the **other** string is in uppercase. Return these as a single string.\\n\\nTo illustrate, given the strings `s1 = \\\"heLLo\\\"` and `s2 = \\\"GUlp\\\"`, we select the letters \\\"he\\\" from `s1`, because \\\"G\\\" and \\\"U\\\" are uppercase. We then select \\\"lp\\\" from `s2`, because \\\"LL\\\" is in uppercase. Finally, we join these together and return `\\\"help\\\"`.\\n\\n### Examples\\n```\\nselectLetters(\\\"heLLO\\\", \\\"GUlp\\\") ➞ \\\"help\\\"\\n\\nselectLetters(\\\"1234567\\\", \\\"XxXxX\\\")  ➞ \\\"135\\\"\\n\\nselectLetters(\\\"EVERYTHING\\\", \\\"SomeThings\\\") ➞  \\\"EYSomeThings\\\"\\n```\\n\\n### Notes\\n- The strings don't have to be the same length.\\n- Strings can contain non-alphabetic characters.\",\"lab\":\"Test.assertEquals(selectLetters(\\\"heLLO\\\", \\\"GUlp\\\"), \\\"help\\\")\\nTest.assertEquals(selectLetters(\\\"1234567\\\", \\\"XxXxX\\\"), \\\"135\\\")\\nTest.assertEquals(selectLetters(\\\"EVERYTHING\\\", \\\"SomeThings\\\"), \\\"EYSomeThings\\\")\\nTest.assertEquals(selectLetters(\\\"PaTtErN\\\", \\\"pAtTeRn\\\"), \\\"atrpten\\\")\\nTest.assertEquals(selectLetters(\\\"nothing\\\", \\\"nothing\\\"), \\\"\\\")\\nTest.assertEquals(selectLetters(\\\"What do you think of it so far?\\\", \\\"RUBBISH!\\\"), \\\"What doR\\\")\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,3,2,2,3,3,3,2,4,3,2,3,3,3,3,3,2,0,4,4,2,2,2,1,4,4,3,4,4,3,3,3,3,4,2,2,1,3,3,2,2,3,3,2,4,2,2,3,4,3,2,3,4,2,4,2,1,4,3,4,2,2,3,3,4,2,4,0,2,1,4,2,2,3,2,3,1,2,3,2,2,2,1,4,3,0,3,3,2,2,2,5,4,3,2,3],\"rators\":[\"rTRvHndHZKKRkb9w5\",\"fmLzKJTPWvtGRAaAN\",\"65dbBZynphj53nXqA\",\"n5wubRfh6zh8QRymN\",\"GCxj7RJCeWYNxj8oQ\",\"eomLS3wh6tQPN8jtH\",\"EWn8w8P3nNh7knatY\",\"yjtdwc2AC4jA2RWtn\",\"EjPLq3QSJdGQFJdgW\",\"5Zq3aGdvh4LHBvnJL\",\"av9jN3SbNRM7Xe2qw\",\"XKi8iZXBCHCaebSHh\",\"FJsvM5yqKuK9yMk9P\",\"cSx2bLg2Ytj5zYCoR\",\"eQdnBfe8riy82SNrK\",\"DQb57fGFbi3pkM6JC\",\"oJRbRjYJnWfsCdNHD\",\"atqvcc9d9dJNDXyYY\",\"SGdjbo5Jxpfescq34\",\"Qa3vzE4H2GeAHmEcQ\",\"TCtJwWLF6N35QoeF4\",\"N5CTmBv7d8s2NkzP6\",\"pk6F3C2fbECgZ8nKW\",\"mHT2bJb5SByfJ8yKS\",\"suvvbKqr2GRnDxtFN\",\"zeEXfanmGrukWo6Cu\",\"aTLb3YAvRxmTjYdrY\",\"rmTce3yfqhdnLhv8W\",\"FiK2ruyH8KeHLAgoA\",\"mrjNK8rS9CqstukL7\",\"4zdTCZvG47y9SaAP9\",\"h4jFmtbFn92eA4649\",\"AasGs8AeX9Lcb9xJn\",\"KZwXBsAy7DxvtvvNT\",\"6ZSa6RhotuSSjE5ZC\",\"St7dhE5Hot8btYGMy\",\"cRpaCxYRmGcN3Nsoj\",\"sfzNjh3KxGJtmYtwX\",\"2innwjWqxJHo4eRGh\",\"yQtGE2egvwYnNQSFc\",\"Y9Nz9yafaibz54W4o\",\"XSowcGMedgyp37Hts\",\"2NJuDfSqdrF8kHHni\",\"dPM2Rk2iMkznyXNEt\",\"MeAxsEkgFRvzmacbm\",\"SNt23Ei5dSNtfpEMd\",\"YER6iBcpJCuhgrYDN\",\"SxqAEMaYcE9Ps9eh6\",\"Xk2g4CNFAnYcvxiSr\",\"ZXRMRAJNP6eseLdbR\",\"pd8dm7sWLW9cY6dYW\",\"p2woPCQKXuWJCwffJ\",\"2ZFoLTxcCARhwc8xX\",\"uigAJ9KT5muMWTDis\",\"M4vq8ATaS9Jg5X7iP\",\"sBcsrC5paZm9nxjot\",\"zMCXYFZSsviDCvjnY\",\"a777e8chPvJkY3tKa\",\"yZ6K2xaPGGtuPC7cz\",\"eFjGhq7C7bBKXjT6X\",\"aEm3Wvj2rFYRL8Lrb\",\"rC7kdm3SsSX9udEQk\",\"qvNk7pHSveLu3jqWw\",\"4eYcGW2y9uPoz8DCf\",\"buX4mCQhtXCfBjeno\",\"xxaPHiRCDshzfEsp7\",\"bXaGdBM8FBLHf7N6Y\",\"pGh7WykiPe26fHJYv\",\"JsRTAwWK7Nikj4sKA\",\"QRv96jmNaYsWkxQEG\",\"7hvNHy7iBf3DTMqj8\",\"8BJyXvRWcrvN3nttS\",\"bX6tpTCjwoi6XMMbK\",\"3KfDpWtKBSYTutpyA\",\"PjAHibG68Zsn4JwRK\",\"DPi9QGLctq2y76KuE\",\"8cZCRtYFkr5RcjPzm\",\"s678Wirfor5uYL5T6\",\"Yp7uvStL97cC9fKkY\",\"NGvCPuMiAP3xrRLfB\",\"rSJGLYSXMuu3RWjun\",\"RKKuw76K7sRBMouKq\",\"aAFajcygMskKDBPsH\",\"HmReKfoJ3xXyXamSP\",\"ShrXg4RHgnyFjzJ8w\",\"c7uBxu2rgY77H5d79\",\"K3rq9dFGsQz8nZCz5\",\"tAF9Gf6PiGogbZuWs\",\"PH32cNxBjrK4a28sn\",\"WnogMFYXoyvmBmGkm\",\"GsrjAqoAdLATJH9qD\",\"oDtGiNqDMHmhHE3J8\",\"RE4Mm9T6Q9uygAxGS\",\"b6EHvmJouxnnpAmy9\",\"sN2JyFeJCwfwwHPwF\",\"Z9jhP3WeN7jSf4aFs\",\"9Pzg45NEiRXhLtLh3\",\"z5ebtimXwFFJdYxoa\",\"LwD3CyYSiBfg3mA4r\",\"TtrXnGzi9MyhLvWiz\"],\"total\":108,\"quality\":[5,5,5,5]},\"flags\":0},\"subscribers\":[\"rTRvHndHZKKRkb9w5\"],\"summary\":\"Given two strings, s1 and s2, select only the characters in each string where the character in the same position in the other string is in uppercase. Return these as a single string.\\n\\nTo illustrate, given the strings s1 = \\\"heLLo\\\" and s2 = \\\"GUlp\\\", we select the letters \\\"he\\\" from s1, because \\\"G\\\" and \\\"U\\\" are uppercase. We then select \\\"lp\\\" from s2, because \\\"LL\\\" is\",\"tags\":[\"strings\",\"formatting\"],\"timestamp\":{\"$date\":1561411060213},\"title\":\"A Capital Challenge\",\"isHidden\":false,\"quality\":5,\"family\":[{\"_id\":\"WyBgESqLetZKDW9sD\",\"language\":\"cpp\"},{\"_id\":\"AudsydHhvWpCCSuaN\",\"language\":\"java\"},{\"_id\":\"gjKemfXwedir9y7D4\",\"language\":\"javascript\"},{\"_id\":\"eBTCwYHpdaHciieuP\",\"language\":\"python3\"},{\"_id\":\"keqvTBiiKWznnkBQE\",\"language\":\"ruby\"}]}}"]