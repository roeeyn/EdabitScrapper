a["{\"msg\":\"result\",\"id\":\"2189\",\"result\":{\"_id\":\"YBZgzAxuyDtS9bomm\",\"archived\":false,\"author\":\"Pustur\",\"authorId\":\"65dbBZynphj53nXqA\",\"code\":\"function dartsSolver(sections, darts, target) {\\n\\t\\n}\",\"difficulty\":3.302325581395349,\"familyId\":\"ekZQb5FNE2Djm9xv5\",\"instructions\":\"You're given a dartboard divided into sections, each section has a **unique** score. That means there won't be two sections with the same score.\\n\\n![alt text](https://s3.amazonaws.com/edabit-images/dartboard.png \\\"Dart Board\\\")\\n\\nThrowing a certain amount of valid darts, find how many solutions there are to reach the target score. Your function will be passed three parameters...\\n\\n- **Sections**: An array of values for the sections (e.g. `[3, 6, 8, 11, 15, 19, 22]`, the array is already sorted).\\n\\n- **Darts**: The amount of darts to throw.\\n\\n- **Target**: The target score.\\n\\nReturn an empty array if no solution is found, otherwise an array of non-duplicate strings for each solution (e.g. `[\\\"3-11-18\\\", \\\"7-7-18\\\", \\\"7-11-14\\\"]`).\\n\\n### Examples\\nIf there are duplicate values, keep only the one sorted from smallest to biggest.\\n\\n```\\n\\\"8-19-8\\\"\\n\\n\\\"8-8-19\\\" <-- This is the one you would keep.\\n\\n\\\"19-8-8\\\"\\n```\\n\\nMultiple solutions should be sorted before returning them.\\n\\n```\\n[\\\"3-11-18\\\", \\\"7-7-18\\\", \\\"7-11-14\\\"] is ok.\\n\\n[\\\"7-11-14\\\", \\\"7-7-18\\\", \\\"3-11-18\\\"] is not ok.\\n```\\n\\n### Notes\\n- Multiple darts **can** land in the same section.\\n\\n- A dart **must** land in a valid section (it can't miss).\",\"lab\":\"// Base tests\\nTest.assertSimilar(\\n  dartsSolver([3, 6, 8, 11, 15, 19, 22], 3, 35),\\n  ['8-8-19']\\n);\\nTest.assertSimilar(\\n  dartsSolver([2, 4, 7, 10, 13, 18, 24], 3, 29),\\n  ['4-7-18']\\n);\\nTest.assertSimilar(\\n  dartsSolver([3, 7, 11, 14, 18, 20, 25], 3, 40),\\n  ['11-11-18']\\n);\\nTest.assertSimilar(\\n  dartsSolver([3, 7, 11, 14, 18, 20, 25], 3, 8),\\n  [],\\n  'Should return an empty array if there are no solutions'\\n);\\n\\n// Additional tests\\nTest.assertSimilar(\\n  dartsSolver([3, 7, 11, 14, 18, 20, 25], 3, 32),\\n  ['3-11-18', '7-7-18', '7-11-14'],\\n  'Should return multiple solutions in the correct order'\\n);\\nTest.assertSimilar(\\n  dartsSolver([3, 7, 11, 14, 18, 20, 25, 29, 34], 3, 67),\\n  ['18-20-29'],\\n  'Should work with more sections'\\n);\\nTest.assertSimilar(\\n  dartsSolver([3, 7, 11, 14, 18, 20, 25], 4, 23),\\n  ['3-3-3-14'],\\n  'Should work with 4 darts'\\n);\\n\",\"language\":\"javascript\",\"summary\":\"You're given a dartboard divided into sections, each section has a unique score. That means there won't be two sections with the same score.\\n\\nThrowing a certain amount of valid darts, find how many solutions there are to reach the target score. Your function will be passed three parameters...\\n\\nSections: An array of values for the sections (e.g. [3, 6, 8, 11, 1\",\"tags\":[\"arrays\",\"loops\",\"recursion\"],\"timestamp\":{\"$date\":1489333490998},\"title\":\"Throwing <N> Amount of Darts  Find All Possible Combinations to Reach a Target Score\",\"stats\":{\"completed\":{\"total\":92,\"ratings\":[3,3,3,3,3,2,2,2,2,2,2,3,3,2,3,4,5,5,3,4,3,4,3,5,5,5,3,5,5,3,2,4,3,3,5,0,5,0,0,5,5,5,3,4,5,5,5,5,0,4,3,4,4,0,4,0,2,0,3,5,5,3,5,3,4,3,4,5,3,0,5,5,5,0,3,0,3,5,5,5,5,3,5,1,5,1],\"rators\":[\"65dbBZynphj53nXqA\",\"xhztefZrh299JXeiM\",\"MJodRpziHHB8SwZ99\",\"hi7Hvtq2mJfkXEGF2\",\"6QR2QdW689ihtHjan\",\"9sFck4LMhD4qCJfQe\",\"LDc8cMrTShPkzyEXd\",\"JzcuZQNK6GD4B4pwB\",\"sQTaZGCCsE7BNQzyG\",\"XHngE5iScvztMpnR2\",\"CboSWibFb53fm9nJn\",\"bKSDKsWxkPnfM3PAS\",\"uv2waNP3JTrr8QsSw\",\"thEsZ7N6X8qfZMbcv\",\"JaQAvGc5F3xTbsXHm\",\"TKCP8tAY3kWLh7Hfm\",\"7tznAN3p3rzz24STs\",\"6ir9H6TvDxyGL4kvG\",\"wpPZSDY63FkyQ4fp9\",\"D8sujcqLQTqMTtFwj\",\"m9qSGaZgDcLGperza\",\"XcHCqYmeoqxDsoucx\",\"RYK9pNw3wuPf3DR9Q\",\"QCchMDx3z8NcqT8QJ\",\"e8ftyJ6nKRtZDwGWJ\",\"gK2ekPpcsiZXyoHRT\",\"YQqJk5EN4oM4HgsBT\",\"Zfe3JopWxhSSYcuZT\",\"efxRdoC5nNJfu4QuH\",\"bbbpNxM3hgGMCqMn8\",\"JXb2TpuretfMdHMvb\",\"4r64YQWjZL6F3E2bY\",\"nr7jKeHEE3TC9oyp4\",\"kEqpxhSmh68q2fbRj\",\"6cF2nrD29Nn2AeKP7\",\"X9gzW6TkvYB4rbrx7\",\"rdNqeKKCwqmELuhvJ\",\"8xuMMGF7fyQWL2fKH\",\"Px7NHmsJfYrzqjvaG\",\"E85Wj9sa3Kjyrb7Qq\",\"KXAz9mtqEuJGiKMdC\",\"EjPLq3QSJdGQFJdgW\",\"piQdjdZMiuhsWtYRW\",\"MEYTCCcM3nWYmyDRs\",\"FHSJnAYTbcsKFgeQa\",\"yjtdwc2AC4jA2RWtn\",\"7PP6aGLEosDGsjRqW\",\"DQydHGyNtHKjNyrTZ\",\"mHT2bJb5SByfJ8yKS\",\"5DsYhKJiNTaarWKkM\",\"ngZrypDEMRDqnsPcE\",\"BBP9BE5mKHRzaRpJr\",\"mPGkQErhbN8rqbxaE\",\"MpNkytd7e4Ghx25ii\",\"cRpaCxYRmGcN3Nsoj\",\"qJZsi5rhRnWA38FbA\",\"p77hXrYbfjW9xXdW3\",\"dPM2Rk2iMkznyXNEt\",\"knxCMCGP3rAkiatRo\",\"sutzxu4yTueBKE9Qp\",\"YER6iBcpJCuhgrYDN\",\"FJz752tBZgKEFv5dp\",\"eTzbu6t7YpD3mK3PY\",\"JGBCMpnbbi5ztuFoX\",\"nBo2LLuSMeEgd5f6G\",\"MNDLmXZmFMf8ASL2L\",\"7TXyMDHFYjna3dyPb\",\"wcgDoaKbZtbCGPu6K\",\"spLNFXZgrW2SCwLh7\",\"RsGrFek744L68XCmT\",\"aEm3Wvj2rFYRL8Lrb\",\"h4jFmtbFn92eA4649\",\"sQZaiAd85P3REppKe\",\"c2A6EsBcBwR4bbmAZ\",\"hyx8iH2z3QySmyRKT\",\"nphNJCcuiQKh8bNHq\",\"8B8KQN2rvwFWK2mKQ\",\"RhajfcRtgLpeeH4FX\",\"EMED9x5CXGSevWAp4\",\"va3fDAQm4sqSMoy3R\",\"PRd3ZE6vHgzsezF7z\",\"BTdKRxKHXHDDD4934\",\"kg4g59PDwHNsQMBLE\",\"bXaGdBM8FBLHf7N6Y\",\"zMCXYFZSsviDCvjnY\",\"WeubbPCiAFxoPrg3H\",\"J5MgLszeGgtciW56n\"],\"quality\":[5,3,5,5,5]},\"complaints\":{\"total\":3,\"reasons\":[[\"confusing\"],[\"confusing\"],[\"bad_resources\"]],\"skippers\":[\"65dbBZynphj53nXqA\",\"b63EsGEcdP6hCL7rH\",\"aYA3kHFcB2TAkCc8b\",\"uP45nrNKepR2nggn2\"]},\"instructions\":{\"score\":0.7499999999999999,\"voters\":[\"vsxmgZACKE2TafBhQ\",\"NLQvA5MuGLBZ7FuFR\"]},\"tests\":{\"score\":7.25,\"voters\":[\"pnAtzyEADSyPtHx2Q\",\"TKCP8tAY3kWLh7Hfm\",\"brgbECYtsrsJJFbxP\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.6,\"family\":[{\"_id\":\"JEY2rNankCJbF9Bxn\",\"language\":\"cpp\"},{\"_id\":\"5K28RRq4RZQB7r9tj\",\"language\":\"csharp\"},{\"_id\":\"YBZgzAxuyDtS9bomm\",\"language\":\"javascript\"},{\"_id\":\"pmYNSpKyijrq2i5nu\",\"language\":\"python3\"},{\"_id\":\"33R4eKjCGJQn7XEZF\",\"language\":\"ruby\"}]}}"]