a["{\"msg\":\"result\",\"id\":\"1771\",\"result\":{\"_id\":\"jXJZoEXNF5jBvc7j4\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"function charBox(size) {\\n\\t\\n}\",\"difficulty\":2.3980582524271843,\"familyId\":\"eqiz6AcvLR3SHtNxT\",\"instructions\":\"This is based on Helen Yu's [Making a Box](https://edabit.com/challenge/eqzf7Mtxqa6bgQX3o) challenge. This challenge is the same execpt that instead of an array of strings, your function should output a matrix of characters.\\n\\n### Examples\\n```\\ncharBox(1) ➞ [\\n  [\\\"#\\\"]\\n]\\n\\ncharBox(4) ➞ [\\n  [\\\"#\\\", \\\"#\\\", \\\"#\\\", \\\"#\\\"],\\n  [\\\"#\\\", \\\" \\\", \\\" \\\", \\\"#\\\"],\\n  [\\\"#\\\", \\\" \\\", \\\" \\\", \\\"#\\\"],\\n  [\\\"#\\\", \\\"#\\\", \\\"#\\\", \\\"#\\\"]\\n]\\n\\ncharBox(2) ➞ [\\n  [\\\"#\\\", \\\"#\\\"],\\n  [\\\"#\\\", \\\"#\\\"]\\n]\\n```\\n\\n### Notes\\nAs an added bonus, try making `charBox(0)` output `[[]]` and make any strings, non-integers, and negative numbers output `-1`.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"// standard cases\\nTest.assertSimilar(charBox(1), [[\\\"#\\\"]])\\nTest.assertSimilar(charBox(2), [[\\\"#\\\", \\\"#\\\"], [\\\"#\\\", \\\"#\\\"]])\\nTest.assertSimilar(charBox(4), [[\\\"#\\\", \\\"#\\\", \\\"#\\\", \\\"#\\\"], [\\\"#\\\", \\\" \\\", \\\" \\\", \\\"#\\\"], [\\\"#\\\", \\\" \\\", \\\" \\\", \\\"#\\\"], [\\\"#\\\", \\\"#\\\", \\\"#\\\", \\\"#\\\"]])\\nTest.assertSimilar(charBox(3), [[\\\"#\\\", \\\"#\\\", \\\"#\\\"], [\\\"#\\\", \\\" \\\", \\\"#\\\"], [\\\"#\\\", \\\"#\\\", \\\"#\\\"]])\\nTest.assertSimilar(charBoxn// special cases\\nTest.assertSimilar(charBox(0), [[]], \\\"Value at 0 should be empty\\\")\\nTest.assertSimilar(charBox(\\\"Hi\\\"), -1, \\\"String values should output -1\\\")\\nTest.assertSimilar(charBox(.23), -1, \\\"Decimal valus should output -1\\\")\\nTest.assertSimilar(charBox(-4), -1, \\\"Negative values should output -1\\\")\",\"language\":\"javascript\",\"quality\":4.428571428571429,\"summary\":\"This is based on Helen Yu's Making a Box challenge. This challenge is the same execpt that instead of an array of strings, your function should output a matrix of characters.\\n\\nExamples\\ncharBox(1) ➞ [\\n  [\\\"#\\\"]\\n]\\n\\ncharBox(4) ➞ [\\n  [\\\"#\\\", \\\"#\\\", \\\"#\\\", \\\"#\\\"],\\n  [\\\"#\\\", \\\" \\\", \\\" \\\", \\\"#\\\"],\\n  [\\\"#\\\", \\\" \\\", \\\" \\\", \\\"#\\\"],\\n  [\\\"#\\\", \\\"#\\\", \\\"#\\\", \\\"#\\\"]\\n]\\n\\ncharBox(2) ➞ [\\n  [\\\"#\\\", \\\"#\\\"],\\n  [\\\"#\\\", \\\"\",\"tags\":[\"validation\",\"formatting\"],\"timestamp\":{\"$date\":1603838785266},\"title\":\"Making a Box 2.0!\",\"stats\":{\"completed\":{\"total\":115,\"ratings\":[2,2,2,2,2,1,4,2,3,1,3,2,2,1,3,5,1,3,3,4,4,3,4,1,3,3,2,4,2,1,2,2,2,4,4,3,2,3,3,4,3,2,0,3,2,2,3,4,4,2,0,3,2,3,2,3,3,4,0,4,3,2,2,0,2,4,3,3,3,2,3,1,2,1,2,3,2,1,2,1,2,3,2,0,3,3,1,4,2,4,2,2,4,2,4,2,2,2,1,2,2,2,1],\"quality\":[4,5,5,5,5,3,4],\"rators\":[\"yjtdwc2AC4jA2RWtn\",\"2okx54gGL8GqfxPG2\",\"uxCKp6j9NKkBKfJKs\",\"gMigFYFKHDukmKNSN\",\"QRv96jmNaYsWkxQEG\",\"RKKuw76K7sRBMouKq\",\"mHT2bJb5SByfJ8yKS\",\"Gg7CHmXmzCEwcfT5C\",\"CNc6rmwhbxkxEhHAp\",\"kp2ZbCewZJAbfd7xv\",\"8BJyXvRWcrvN3nttS\",\"QYNjAji97bn9BBi6p\",\"YSmLyP3eRhcFjJPzg\",\"SYEuojZtP6yLXryHv\",\"TtrXnGzi9MyhLvWiz\",\"s678Wirfor5uYL5T6\",\"p8wsdB4dyMuzGQbxd\",\"2kk8t3kqNzWvwL7Jj\",\"zMCXYFZSsviDCvjnY\",\"nMqBcLbccmcSwJqxF\",\"HvpP3TJyxKbj6Giha\",\"AasGs8AeX9Lcb9xJn\",\"TrKGpNJFjGJseisT2\",\"gxN8e6EXyAJEy4pik\",\"hcm8sL8mNJTSfTdgE\",\"XAtaxh33rrQHqR5SN\",\"7X29efeuZz4oTTq5X\",\"Xk2g4CNFAnYcvxiSr\",\"K9ncwb6W27Ldj4yQ7\",\"8SYDBRtkZuW3pdPtG\",\"y2cf8jaBdN5nBdXpa\",\"4YvqzyMhSqeMwjmJk\",\"cYE8pJXBiRP6faBs8\",\"AzzzwpNTQgGrMyatx\",\"oFEG3RDs5J99JYtkZ\",\"M4vq8ATaS9Jg5X7iP\",\"PXeZGXDAhGzCpgPy8\",\"hxBkNxaXQWTxcrRse\",\"2Qk2mFu9HBFzrB24i\",\"NGvCPuMiAP3xrRLfB\",\"bYcGBNrjmPSkeKyfJ\",\"oDtGiNqDMHmhHE3J8\",\"wo4cpen33NYFHNca7\",\"Q6Z6pCzTYPLACwhj7\",\"h4jFmtbFn92eA4649\",\"rfyYC78YGZWcBoio4\",\"nkH3HfJXLMNcBMM79\",\"xsDyJstYoBZRS8pJH\",\"E6DBfkTgHuPsDWdG8\",\"WXH62RudYwuox8cNR\",\"5nhmyqLy8M2Yn2HMR\",\"vnLWRmtPq8ybukPmB\",\"nhBKC5ZwK9cfSs5HG\",\"a2FMe94SqGj32EyyW\",\"dYBfwvnSrmirZrEMo\",\"QLuzBR96XxmhTNdpW\",\"u3S4WeWgR7nu5jbBQ\",\"3E8YaHJkXHTuYKt8J\",\"ozhYXjBjiZsZnPMxR\",\"tAF9Gf6PiGogbZuWs\",\"QvEXmSEo3ANp3yPyH\",\"aknJkFEjdQHW2JbNY\",\"PH32cNxBjrK4a28sn\",\"Akq3fQcPRgPrWfsye\",\"WnogMFYXoyvmBmGkm\",\"JqkfZLC9Qnvz3prBF\",\"yJYi27qL7WsSYj4qv\",\"Hcyqetei9TKHGbLG9\",\"AFfw7cGg83uYk2Miy\",\"nceW5rvJha5KoyEed\",\"GsrjAqoAdLATJH9qD\",\"fJDzrh3jneQQXPGSE\",\"bcANcsYiJ47dwh4ja\",\"qWZLE2s7aRDQsnZ4p\",\"RE4Mm9T6Q9uygAxGS\",\"YDocJdX3HxmbLsZxp\",\"qQ2wtf7SQyJHj7KKp\",\"vbr7kAzCRQpd4ijTf\",\"owCuSH72N9gjFbra9\",\"7QcY3CLdo8PehxXwd\",\"EAfbnzxgmdXSLzrMp\",\"p6qLK4qS2dnFzDA7k\",\"AMpQSjKsRqhCDyS2j\",\"LfFM7fEqRDziusD9j\",\"zfGy4Est98rN68tg9\",\"EB4kpFJhW23QfYZqu\",\"nWND4LmgZTftyB8sN\",\"48DKfbSnoovp7nkWi\",\"PLTdm7zcH8m7Z3Rzz\",\"ShuaBDyCtDF8ozSti\",\"jEejH3Dn8ne7xvZbf\",\"PFhfSNs9fPGFGWJ3b\",\"eE6p5gaENokRKMTao\",\"JcyqK9AWozt3po3Te\",\"Ws844tJq3NPBvEDoS\",\"Df3MfQDnbbxGHqThM\",\"Swb2jDnZjviDXsQvB\",\"sxzKJwBBq4bsARfHM\",\"vFBkjBa9oK9y4Pv6j\",\"PciPnjemCFtD4wQS2\",\"7yGa7LxhReHkHfgWg\",\"qaR8DnWrTk8Mus5Q2\",\"yutBpqD4kgMPLH3h3\",\"DyunorHmNEeBgSGqs\",\"n8Zwk9wqztzjAhcYQ\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"jXJZoEXNF5jBvc7j4\",\"language\":\"javascript\"},{\"_id\":\"Rp6MLyZsGoTeM3QZQ\",\"language\":\"python3\"}]}}"]