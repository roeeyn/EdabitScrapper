a["{\"msg\":\"result\",\"id\":\"994\",\"result\":{\"_id\":\"mW3z9rJtR5gjcLpeu\",\"author\":\"Isaac Pak\",\"authorId\":\"yaL57wdXmgAZTvKfX\",\"code\":\"const REGEXP = /* YOU FILL IN */\",\"difficulty\":1.6741573033707866,\"editorId\":\"yaL57wdXmgAZTvKfX\",\"familyId\":\"tQ8NNmKJufH42NLq8\",\"instructions\":\"You are needed to finish a program that lists how many bad cookies are produced every day. A list of all the cookies produced for the day is given in an array. All that's needed is a regular expression that will make the function work correctly.\\n\\n```\\nconst cookies = [\\\"bad cookie\\\", \\\"good cookie\\\", \\\"bad cookie\\\", \\\"good cookie\\\", \\\"good cookie\\\"]\\n\\nfunction badCookies(res) {\\n  const REGEXP = /* YOU FILL IN */\\n  return res.filter( x => REGEXP.test(x)).length\\n}\\n\\nbadCookies(res) // should output 2\\n```\\n\\n### Challenge\\n- Write the regular expression to make the function output the correct number. \\n- You're required to use a **negative lookbehind** assertion in your expression.\\n\\n### Notes\\nCheck the **Resources** tab for details on **negative lookbehind** assertions.\",\"isHidden\":false,\"lab\":\"const cookies = [\\\"bad cookie\\\", \\\"good cookie\\\", \\\"bad cookie\\\", \\\"good cookie\\\", \\\"good cookie\\\"] \\n\\nconst validate = (REGEXP) => {\\n\\t if(!/\\\\(\\\\?\\\\<\\\\!/.test(String(REGEXP))) return () => \\\"negative lookbehind required\\\"\\n\\t return function testReg(cookies) {\\n\\t\\t return cookies.filter(x => REGEXP.test(x)).length\\n\\t }\\n} \\n\\nconst testExp = validate(REGEXP) \\n\\nTest.assertNotEquals(testExp(cookies), \\\"negative lookbehind required\\\", \\\"You are required to use a negative lookbehind in your expression.\\\")\\nTest.assertSimilar(testExp(cookies), 2)\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,0,1,0,1,1,3,2,1,2,2,3,1,2,3,1,2,2,2,2,0,2,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,2,2,1,0,2,3,2,2,2,2,2,0,1,2,2,1,3,2,0,2,2,2,2,2,1,0,2,1,0,2,2,1,2,2,2,2,2,2,5,2,1,1,2,1,2,0,2],\"rators\":[\"Y9Nz9yafaibz54W4o\",\"yjtdwc2AC4jA2RWtn\",\"5Zq3aGdvh4LHBvnJL\",\"QEhgdaBYvvTH4GpoN\",\"mHT2bJb5SByfJ8yKS\",\"pi76g3eRpnKrhee2a\",\"cJwiiiX7qwSvgtmk8\",\"6BpBQnSGhzgvhXrEy\",\"C34Y779CoL5NLTpsg\",\"vtHbevf2tHqe6mRxX\",\"yaL57wdXmgAZTvKfX\",\"g5noFWaoRtZNcEEAW\",\"YER6iBcpJCuhgrYDN\",\"AasGs8AeX9Lcb9xJn\",\"RE4Mm9T6Q9uygAxGS\",\"zgoq9MhrL2h75DAMA\",\"EWn8w8P3nNh7knatY\",\"2innwjWqxJHo4eRGh\",\"FJsvM5yqKuK9yMk9P\",\"PytNZK9mNiRiZxPrm\",\"EjPLq3QSJdGQFJdgW\",\"eomLS3wh6tQPN8jtH\",\"65dbBZynphj53nXqA\",\"TNo7w28xev2B5YWkF\",\"zW5JY78HhFCrSPEeE\",\"eNdxN376u6gM4qdXF\",\"Ji84eQR54xeqRYceZ\",\"Q75jsoXjhTXJRrw8z\",\"zw7g7T8wE5R5CBhXr\",\"a777e8chPvJkY3tKa\",\"eFjGhq7C7bBKXjT6X\",\"ij9YRJvZz6WbqcGXS\",\"C9LKGu2g5hSijvDzA\",\"aEm3Wvj2rFYRL8Lrb\",\"buX4mCQhtXCfBjeno\",\"7wtuhPesfhcYsfZaZ\",\"8raviPK67KKxzQWcF\",\"pLpcDC3EYx2DDQSdt\",\"4gb4tvaSCs9u2z3ZA\",\"jED84My7PjSKANQsX\",\"moe6ztrsNzFymC3A7\",\"7gZKfvwaeqsGKXMEN\",\"ZcmrtSpqFnCBEK5YE\",\"e9Cknxbx6o7Nb6REs\",\"Nb6LYPoQP6KJZt8mz\",\"ttuGK7od8simjgmCJ\",\"2zKQWLmEBw8FBs4ZL\",\"PGCDJpQMN8Sjn9Gm6\",\"Po3v3dHCk6wYGKMwi\",\"nkH3HfJXLMNcBMM79\",\"Ya3eHgs8x3unZRLpb\",\"2tCCFm5iefjrRSaxv\",\"s7Qqx4Jnuq85iB7Lw\",\"kp2ZbCewZJAbfd7xv\",\"rrkEbZtHE6xZiamyu\",\"evTTY9hwrtogaNxXn\",\"N3CNtWZz4ovJfH9Aw\",\"g4NCSxxHqHCGMpWwT\",\"CNc6rmwhbxkxEhHAp\",\"9SrwsygZbwzGbYZSK\",\"BdvdJYwHZr7JpkHsn\",\"CJvaWhQcMYz3B8TKx\",\"tAF9Gf6PiGogbZuWs\",\"vGKxRcDYDsXzTQuEQ\",\"AFfw7cGg83uYk2Miy\",\"wbzQwextPpnNBR7cG\",\"NchnDcEmsLTeFZ4FH\",\"Akq3fQcPRgPrWfsye\",\"Yp7uvStL97cC9fKkY\",\"ph4n4PXfb9r2CQyYD\",\"ZcqshY58sGEEvgeaq\",\"jpSy4qhuDNwPk9mrf\",\"3Gf7ikLijfoxabiPY\",\"yxh6CjdHCfkhJszj6\",\"Yfggc4Hr3fmtG4dsS\",\"RtPhDuwmvWNHiBxmG\",\"nyh73Tr6GhqAat78g\",\"u9cRf5kvtpRB5ffB3\",\"GsrjAqoAdLATJH9qD\",\"wJTDDTE3TrmSXKP4d\",\"J7d397iB5GuWRAMfg\",\"2Qk2mFu9HBFzrB24i\",\"jemTNShfp6ymAs3pj\",\"oDtGiNqDMHmhHE3J8\",\"NGvCPuMiAP3xrRLfB\",\"9HZbxzkzgz4CvePtv\",\"Fk47SQxbHEJRw4u76\",\"nBJve5CzG6WAw7WFQ\",\"gXTAie79kiw28tx5u\",\"HCfkcKnPs9mrJojdG\",\"LwD3CyYSiBfg3mA4r\",\"TtrXnGzi9MyhLvWiz\",\"jyoLggHk8xQKZuoQC\",\"8BJyXvRWcrvN3nttS\",\"bfYmA3LMvhSrK59cn\",\"jicWFrNKadYuLhqxh\",\"QGjY3hgPYPMmMjc7j\",\"rMc3LPajSgm68hNfC\",\"z47JaNrQMgvuPx5HE\",\"CHvzhtXnv8HTbPQ56\",\"uxKGACwmZ6FNZsMwE\"],\"total\":109,\"quality\":[5,5,3,5,5,5,5,3,5,4,5,5,4,5,5,5,5]},\"flags\":0},\"summary\":\"You are needed to finish a program that lists how many bad cookies are produced every day. A list of all the cookies produced for the day is given in an array. All that's needed is a regular expression that will make the function work correctly.\\n\\nconst cookies = [\\\"bad cookie\\\", \\\"good cookie\\\", \\\"bad cookie\\\", \\\"good cookie\\\", \\\"good cookie\\\"]\\n\\nfunction badCookies(res)\",\"tags\":[\"regex\",\"language_fundamentals\",\"formatting\"],\"timestamp\":{\"$date\":1580937886088},\"title\":\"RegEx: Boundary Assertions VII\",\"quality\":4.647058823529412,\"family\":[{\"_id\":\"mW3z9rJtR5gjcLpeu\",\"language\":\"javascript\"},{\"_id\":\"KQ5H9aFBZDKEJuP6C\",\"language\":\"python3\"}]}}"]