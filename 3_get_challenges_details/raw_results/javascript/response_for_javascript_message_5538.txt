a["{\"msg\":\"result\",\"id\":\"1518\",\"result\":{\"_id\":\"MevNu8jwsPC8ghS7B\",\"author\":\"Ruud Peter Boelens\",\"authorId\":\"Akq3fQcPRgPrWfsye\",\"code\":\"function blocks(step) {\\n\\t\\n}\",\"difficulty\":2.2058823529411766,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"YZAtG9Wf3wiWLrqEB\",\"instructions\":\"A block sequence in three dimensions. We can write a formula for this one:\\n\\n![Sequence Step 1 - 5](https://edabit-challenges.s3.amazonaws.com/3d_blocks.png \\\"Sequence Step 1 - 5\\\")\\n\\nCreate a function that takes a number (step) as an argument and returns the amount of blocks in that step.\\n\\n### Examples\\n```\\nblocks(1) ➞ 5\\n\\nblocks(5) ➞ 39\\n\\nblocks(2) ➞ 12\\n```\\n\\n### Notes\\n- Step 0 obviously has to return `0`.\\n- The input is always a positive integer.\\n- Check the **Resources** tab for a video on finding quadratic sequences.\",\"lab\":\"Test.assertEquals(blocks(77), 3387)\\nTest.assertEquals(blocks(33), 725)\\nTest.assertEquals(blocks(50), 1524)\\nTest.assertEquals(blocks(21), 335)\\nTest.assertEquals(blocks(12), 137)\\nTest.assertEquals(blocks(30), 614)\\nTest.assertEquals(blocks(93), 4835)\\nTest.assertEquals(blocks(53), 1695)\\nTest.assertEquals(blocks(71), 2910)\\nTest.assertEquals(blocks(36), 845)\\nTest.assertEquals(blocks(8), 75)\\nTest.assertEquals(blocks(100), 5549)\\nTest.assertEquals(blocks(95), 5034)\\nTest.assertEquals(blocks(46), 1310)\\nTest.assertEquals(blocks(63), 2330)\\nTest.assertEquals(blocks(54), 1754)\\nTest.assertEquals(blocks(15), 194)\\nTest.assertEquals(blocks(45), 1259)\\nTest.assertEquals(blocks(64), 2399)\\nTest.assertEquals(blocks(46), 1310)\\nTest.assertEquals(blocks(68), 2685)\\nTest.assertEquals(blocks(46), 1310)\\nTest.assertEquals(blocks(23), 390)\\nTest.assertEquals(blocks(62), 2262)\\nTest.assertEquals(blocks(55), 1814)\\nTest.assertEquals(blocks(95), 5034)\\nTest.assertEquals(blocks(72), 2987)\\nTest.assertEquals(blocks(76), 3305)\\nTest.assertEquals(blocks(24), 419)\\nTest.assertEquals(blocks(98), 5340)\\nTest.assertEquals(blocks(22), 362)\\nTest.assertEquals(blocks(39), 974)\\nTest.assertEquals(blocks(68), 2685)\\nTest.assertEquals(blocks(9), 89)\\nTest.assertEquals(blocks(22), 362)\\nTest.assertEquals(blocks(85), 4079)\\nTest.assertEquals(blocks(37), 887)\\nTest.assertEquals(blocks(98), 5340)\\nTest.assertEquals(blocks(18), 260)\\nTest.assertEquals(blocks(65), 2469)\\nTest.assertEquals(blocks(38), 930)\\nTest.assertEquals(blocks(70), 2834)\\nTest.assertEquals(blocks(84), 3989)\\nTest.assertEquals(blocks(21), 335)\\nTest.assertEquals(blocks(48), 1415)\\nTest.assertEquals(blocks(88), 4355)\\nTest.assertEquals(blocks(28), 545)\\nTest.assertEquals(blocks(8), 75)\\nTest.assertEquals(blocks(93), 4835)\\nTest.assertEquals(blocks(3), 20)\\nTest.assertEquals(blocks(99), 5444)\\nTest.assertEquals(blocks(69), 2759)\\nTest.assertEquals(blocks(1), 5)\\nTest.assertEquals(blocks(19), 284)\\nTest.assertEquals(blocks(83), 3900)\\nTest.assertEquals(blocks(39), 974)\\nTest.assertEquals(blocks(84), 3989)\\nTest.assertEquals(blocks(11), 120)\\nTest.assertEquals(blocks(2), 12)\\nTest.assertEquals(blocks(2), 12)\\nTest.assertEquals(blocks(62), 2262)\\nTest.assertEquals(blocks(93), 4835)\\nTest.assertEquals(blocks(59), 2064)\\nTest.assertEquals(blocks(81), 3725)\\nTest.assertEquals(blocks(50), 1524)\\nTest.assertEquals(blocks(11), 120)\\nTest.assertEquals(blocks(77), 3387)\\nTest.assertEquals(blocks(31), 650)\\nTest.assertEquals(blocks(37), 887)\\nTest.assertEquals(blocks(45), 1259)\\nTest.assertEquals(blocks(31), 650)\\nTest.assertEquals(blocks(15), 194)\\nTest.assertEquals(blocks(5), 39)\\nTest.assertEquals(blocks(33), 725)\\nTest.assertEquals(blocks(18), 260)\\nTest.assertEquals(blocks(92), 4737)\\nTest.assertEquals(blocks(94), 4934)\\nTest.assertEquals(blocks(11), 120)\\nTest.assertEquals(blocks(26), 480)\\nTest.assertEquals(blocks(28), 545)\\nTest.assertEquals(blocks(36), 845)\\nTest.assertEquals(blocks(72), 2987)\\nTest.assertEquals(blocks(20), 309)\\nTest.assertEquals(blocks(82), 3812)\\nTest.assertEquals(blocks(47), 1362)\\nTest.assertEquals(blocks(79), 3554)\\nTest.assertEquals(blocks(1), 5)\\nTest.assertEquals(blocks(20), 309)\\nTest.assertEquals(blocks(83), 3900)\\nTest.assertEquals(blocks(59), 2064)\\nTest.assertEquals(blocks(2), 12)\\nTest.assertEquals(blocks(43), 1160)\\nTest.assertEquals(blocks(23), 390)\\nTest.assertEquals(blocks(78), 3470)\\nTest.assertEquals(blocks(0), 0)\\nTest.assertEquals(blocks(92), 4737)\\nTest.assertEquals(blocks(83), 3900)\\nTest.assertEquals(blocks(96), 5135)\\nTest.assertEquals(blocks(95), 5034)\\nTest.assertEquals(blocks(6), 50)\",\"language\":\"javascript\",\"summary\":\"A block sequence in three dimensions. We can write a formula for this one:\\n\\nSequence Step 1 - 5\\n\\nCreate a function that takes a number (step) as an argument and returns the amount of blocks in that step.\\n\\nExamples\\nblocks(1) ➞ 5\\n\\nblocks(5) ➞ 39\\n\\nblocks(2) ➞ 12\\n\\nNotes\\nStep 0 obviously has to return 0.\\nThe input is always a positive integer.\\nCheck the Resources t\",\"tags\":[\"math\",\"numbers\",\"algorithms\"],\"timestamp\":{\"$date\":1560507183820},\"title\":\"3D Visual Block Sequence\",\"stats\":{\"completed\":{\"total\":64,\"ratings\":[2,2,2,2,2,2,2,2,2,2,2,3,2,2,3,3,2,2,2,1,2,0,0,3,2,2,3,3,4,3,1,2,2,0,3,2,3,2,1,1,2,3,2,3,2,3,3,2,3,1,5,3,3,2,3,3,2,1,3,2,1,3,0,3,3,3,2,3],\"rators\":[\"Akq3fQcPRgPrWfsye\",\"BTDyduiRYDSm5LyeD\",\"65dbBZynphj53nXqA\",\"SDtZFL5NzAoCPofXk\",\"8xuMMGF7fyQWL2fKH\",\"M92K3STP2PsTN67Xi\",\"n5wubRfh6zh8QRymN\",\"EjPLq3QSJdGQFJdgW\",\"EWn8w8P3nNh7knatY\",\"yjtdwc2AC4jA2RWtn\",\"XYEaiiYP79duAqwEM\",\"R4JQmeA6cYyfXbmLF\",\"zw7g7T8wE5R5CBhXr\",\"c2KHPrZ8kqJkscwa3\",\"Q9KQomTTPBsrkAL6c\",\"M5gwJtQXmSkdEmgkh\",\"6BpBQnSGhzgvhXrEy\",\"eomLS3wh6tQPN8jtH\",\"5Zq3aGdvh4LHBvnJL\",\"FJsvM5yqKuK9yMk9P\",\"AasGs8AeX9Lcb9xJn\",\"XKi8iZXBCHCaebSHh\",\"mHT2bJb5SByfJ8yKS\",\"oZJyqjsBxEHmtS9SL\",\"KZwXBsAy7DxvtvvNT\",\"2NJuDfSqdrF8kHHni\",\"BdvdJYwHZr7JpkHsn\",\"z6QfbuG6TXE7GKynQ\",\"cRpaCxYRmGcN3Nsoj\",\"aDm2ktTo2BBn7NWv8\",\"xsDyJstYoBZRS8pJH\",\"NoXhkuEzJ8XrxQCwo\",\"JGBCMpnbbi5ztuFoX\",\"Xk2g4CNFAnYcvxiSr\",\"zoDHPoPn9mhXpmka7\",\"YER6iBcpJCuhgrYDN\",\"a777e8chPvJkY3tKa\",\"cTLdetarRzvrxD4HP\",\"Es4eX2stRpyoXeC7f\",\"MtSGMTysiWHmv4CRE\",\"ZcqshY58sGEEvgeaq\",\"8raviPK67KKxzQWcF\",\"xX8GBotKi8DPauvP2\",\"GvM9x2bsvy6cgNefJ\",\"Nb6LYPoQP6KJZt8mz\",\"buX4mCQhtXCfBjeno\",\"QRv96jmNaYsWkxQEG\",\"aEm3Wvj2rFYRL8Lrb\",\"snFaY4RgJcFPFQ8bu\",\"RE4Mm9T6Q9uygAxGS\",\"gt72ofBStqvphGX6j\",\"CNc6rmwhbxkxEhHAp\",\"kp2ZbCewZJAbfd7xv\",\"zd9FLSzsGz3evKafy\",\"g4NCSxxHqHCGMpWwT\",\"hzHsgwjark5sZCQ2c\",\"AFfw7cGg83uYk2Miy\",\"NGvCPuMiAP3xrRLfB\",\"RtPhDuwmvWNHiBxmG\",\"srJ34BaybkQh3qRkM\",\"Yp7uvStL97cC9fKkY\",\"oDtGiNqDMHmhHE3J8\"],\"quality\":[5,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"isHidden\":false,\"quality\":5,\"family\":[{\"_id\":\"icEtzNmcTB4Kvwvwt\",\"language\":\"cpp\"},{\"_id\":\"JnGKayBeHJFDQ2oiu\",\"language\":\"java\"},{\"_id\":\"MevNu8jwsPC8ghS7B\",\"language\":\"javascript\"},{\"_id\":\"NtsqbRPqtPYhR8tJe\",\"language\":\"python3\"},{\"_id\":\"BbC4ZTq6RYpqF9bum\",\"language\":\"ruby\"}]}}"]