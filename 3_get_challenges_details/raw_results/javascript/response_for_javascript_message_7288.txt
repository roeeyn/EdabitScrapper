a["{\"msg\":\"result\",\"id\":\"2385\",\"result\":{\"_id\":\"JXwdqPmX3KTeoGNGi\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"function farey(s) {\\n\\t//your recursive implementation of the code\\n\\treturn farey(s)\\n}\",\"difficulty\":4.285714285714286,\"familyId\":\"au7LMrtaCrvEkeFfj\",\"instructions\":\"The Farey sequence of order `n` is the set of all fractions with a denominator between `1` and `n` (reduced to its lowest terms and ordered ascendingly). Given an `n`, write a function that returns the Farey sequence as an array with a string representation of each fraction of the form \\\"*numerator/denominator*\\\".\\n\\n### Examples\\n```\\nfarey(1) ➞ [\\\"0/1\\\", \\\"1/1\\\"]\\n\\nfarey(5) ➞ [\\\"0/1\\\", \\\"1/5\\\", \\\"1/4\\\", \\\"1/3\\\", \\\"2/5\\\", \\\"1/2\\\", \\\"3/5\\\", \\\"2/3\\\", \\\"3/4\\\", \\\"4/5\\\", \\\"1/1\\\"]\\n\\nfarey(7) ➞ [\\\"0/1\\\", \\\"1/7\\\", \\\"1/6\\\", \\\"1/5\\\", \\\"1/4\\\", \\\"2/7\\\", \\\"1/3\\\", \\\"2/5\\\", \\\"3/7\\\", \\\"1/2\\\", \\\"4/7\\\", \\\"3/5\\\", \\\"2/3\\\", \\\"5/7\\\", \\\"3/4\\\", \\\"4/5\\\", \\\"5/6\\\", \\\"6/7\\\", \\\"1/1\\\"]\\n```\\n\\n### Notes\\n- The sequence should always start with \\\"0/1\\\" and end with \\\"1/1\\\".\\n- It is expected from the challenge-takers to come up with a solution using the concept of **recursion** or the so-called **recursive approach**.\\n- You can read on more topics about recursion (see **Resources** tab) if you aren't familiar with it yet or hasn't fully understood the concept behind it before taking up this challenge or unless otherwise.\\n- There will be no exceptions to handle, all inputs are positive integers. \\n- A recursive approach is prone to **Uncaught RangeError** or exceededing the maximum call size of the stack.\\n- ***Optional***: Try to solve this with the least lines of code.\\n- If you think recursion is fun, you can find a collection of those challenges [here](https://edabit.com/collection/YJH4pAyqDbhLc4STc).\",\"isHidden\":false,\"lab\":\"const recursive = f => (`${f}`.match(RegExp(`${f.name}`,'gm'))||[]).length > +(/function/.test(f))\\nTest.assertEquals(recursive(farey), true)\\nTest.assertNotEquals(recursive(farey), false, \\\"Recursion is required!\\\")\\n\\nlet [seq, frac] = [[1, 3, 5, 7, 9, 10, 12, 14, 16], [\\n      ['0/1', '1/1'],\\n      ['0/1', '1/3', '1/2', '2/3', '1/1'],\\n      ['0/1', '1/5', '1/4', '1/3', '2/5', '1/2', '3/5', '2/3', '3/4', '4/5', '1/1'],\\n      ['0/1', '1/7', '1/6', '1/5', '1/4', '2/7', '1/3', '2/5', '3/7', '1/2', '4/7', '3/5', '2/3', '5/7', '3/4', '4/5', '5/6', '6/7', '1/1'],\\n      ['0/1', '1/9', '1/8', '1/7', '1/6', '1/5', '2/9', '1/4', '2/7', '1/3', '3/8', '2/5', '3/7', '4/9', '1/2', '5/9', '4/7', '3/5', '5/8', '2/3', '5/7', '3/4', '7/9', '4/5', '5/6', '6/7', '7/8', '8/9', '1/1'],\\n      ['0/1', '1/10', '1/9', '1/8', '1/7', '1/6', '1/5', '2/9', '1/4', '2/7', '3/10', '1/3', '3/8', '2/5', '3/7', '4/9', '1/2', '5/9', '4/7', '3/5', '5/8', '2/3', '7/10', '5/7', '3/4', '7/9', '4/5', '5/6', '6/7', '7/8', '8/9', '9/10', '1/1'],\\n      ['0/1', '1/12', '1/11', '1/10', '1/9', '1/8', '1/7', '1/6', '2/11', '1/5', '2/9', '1/4', '3/11', '2/7', '3/10', '1/3', '4/11', '3/8', '2/5', '5/12', '3/7', '4/9', '5/11', '1/2', '6/11', '5/9', '4/7', '7/12', '3/5', '5/8', '7/11', '2/3', '7/10', '5/7', '8/11', '3/4', '7/9', '4/5', '9/11', '5/6', '6/7', '7/8', '8/9', '9/10', '10/11', '11/12', '1/1'],\\n      ['0/1', '1/14', '1/13', '1/12', '1/11', '1/10', '1/9', '1/8', '1/7', '2/13', '1/6', '2/11', '1/5', '3/14', '2/9', '3/13', '1/4', '3/11', '2/7', '3/10', '4/13', '1/3', '5/14', '4/11', '3/8', '5/13', '2/5', '5/12', '3/7', '4/9', '5/11', '6/13', '1/2', '7/13', '6/11', '5/9', '4/7', '7/12', '3/5', '8/13', '5/8', '7/11', '9/14', '2/3', '9/13', '7/10', '5/7', '8/11', '3/4', '10/13', '7/9', '11/14', '4/5', '9/11', '5/6', '11/13', '6/7', '7/8', '8/9', '9/10', '10/11', '11/12', '12/13', '13/14', '1/1'],\\n      ['0/1', '1/16', '1/15', '1/14', '1/13', '1/12', '1/11', '1/10', '1/9', '1/8', '2/15', '1/7', '2/13', '1/6', '2/11', '3/16', '1/5', '3/14', '2/9', '3/13', '1/4', '4/15', '3/11', '2/7', '3/10', '4/13', '5/16', '1/3', '5/14', '4/11', '3/8', '5/13', '2/5', '5/12', '3/7', '7/16', '4/9', '5/11', '6/13', '7/15', '1/2', '8/15', '7/13', '6/11', '5/9', '9/16', '4/7', '7/12', '3/5', '8/13', '5/8', '7/11', '9/14', '2/3', '11/16', '9/13', '7/10', '5/7', '8/11', '11/15', '3/4', '10/13', '7/9', '11/14', '4/5', '13/16', '9/11', '5/6', '11/13', '6/7', '13/15', '7/8', '8/9', '9/10', '10/11', '11/12', '12/13', '13/14', '14/15', '15/16', '1/1']\\n    ]]\\nfor (let i in seq) Test.assertSimilar(farey(seq[i]), frac[i])\",\"language\":\"javascript\",\"summary\":\"The Farey sequence of order n is the set of all fractions with a denominator between 1 and n (reduced to its lowest terms and ordered ascendingly). Given an n, write a function that returns the Farey sequence as an array with a string representation of each fraction of the form \\\"numerator/denominator\\\".\\n\\nExamples\\nfarey(1) ➞ [\\\"0/1\\\", \\\"1/1\\\"]\\n\\nfarey(5) ➞ [\\\"0/1\\\", \\\"1\",\"tags\":[\"recursion\",\"arrays\",\"logic\"],\"timestamp\":{\"$date\":1593544490716},\"title\":\"Recursion: Farey Sequence\",\"stats\":{\"completed\":{\"total\":12,\"ratings\":[5,5,5,5,5,5,2,2,5,5,5,5,4,2],\"rators\":[\"a777e8chPvJkY3tKa\",\"yjtdwc2AC4jA2RWtn\",\"aEm3Wvj2rFYRL8Lrb\",\"buX4mCQhtXCfBjeno\",\"nr7jKeHEE3TC9oyp4\",\"va3fDAQm4sqSMoy3R\",\"JGBCMpnbbi5ztuFoX\",\"DPi9QGLctq2y76KuE\",\"PH32cNxBjrK4a28sn\"],\"quality\":[]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"a777e8chPvJkY3tKa\",\"quality\":0,\"family\":[{\"_id\":\"JXwdqPmX3KTeoGNGi\",\"language\":\"javascript\"},{\"_id\":\"tttgECA8YLYinLMED\",\"language\":\"python3\"}]}}"]