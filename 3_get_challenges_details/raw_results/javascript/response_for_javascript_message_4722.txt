a["{\"msg\":\"result\",\"id\":\"1115\",\"result\":{\"_id\":\"B4SRZm9TLgeYrgPtT\",\"author\":\"er0s\",\"authorId\":\"5Zq3aGdvh4LHBvnJL\",\"code\":\"function describeNum(n) {\\n\\t\\n}\",\"difficulty\":1.7904761904761906,\"familyId\":\"s3pKPBy8eGQBrf7Ce\",\"instructions\":\"Given a number `n`, return a sentence which describes the number in the following ways.\\n\\n- Always start the string with **\\\"The most \\\"**.\\n- If `n` is evenly divisible by 1, add **\\\"brilliant \\\"** to the sentence.\\n- If `n` is evenly divisble by 2, add **\\\"exciting \\\"** to the sentence.\\n- ... 3, add **\\\"fantastic \\\"** to the sentence.\\n- ... 4, add **\\\"virtuous \\\"** to the sentence.\\n- ... 5, add **\\\"heart-warming \\\"** ...\\n- ... 6, add **\\\"tear-jerking \\\"** ...\\n- ... 7, add **\\\"beautiful \\\"** ...\\n- ... 8, add **\\\"exhilarating \\\"** ...\\n- ... 9, add **\\\"emotional \\\"** ...\\n- If `n` is evenly divisible by 10, add **\\\"inspiring \\\"** to the sentence.\\n- Always end the string with **\\\"number is `n`!\\\"**.\\n\\n### Examples\\n```\\ndescribeNum(13) ➞ \\\"The most brilliant number is 13!\\\"\\n// 13 is evenly divisble by 1 only\\n\\ndescribeNum(4) ➞ \\\"The most brilliant exciting virtuous number is 4!\\\"\\n// 4 is evenly divisible by 1, 2 and 4\\n\\ndescribeNum(21) ➞ \\\"The most brilliant fantastic beautiful number is 21!\\\"\\n// 21 is evenly divisible by 1, 3 and 7\\n\\ndescribeNum(60) ➞ \\\"The most brilliant exciting fantastic virtuous heart-warming tear-jerking inspiring number is 60!\\\"\\n// 60 is evenly divisible by 1, 2, 3, 4, 5, 6 and 10\\n```\\n\\n### Notes\\n- Add words to the sentence in the order going down the list.\\n- Remember to add a space between each word.\\n- **BONUS:** Try to find the lowest number which uses all possible words in the sentence!\",\"isHidden\":false,\"lab\":\"Test.assertEquals(describeNum(13), 'The most brilliant number is 13!')\\nTest.assertEquals(describeNum(4), 'The most brilliant exciting virtuous number is 4!')\\nTest.assertEquals(describeNum(21), 'The most brilliant fantastic beautiful number is 21!')\\nTest.assertEquals(describeNum(60), 'The most brilliant exciting fantastic virtuous heart-warming tear-jerking inspiring number is 60!')\\nTest.assertEquals(describeNum(56), \\\"The most brilliant exciting virtuous beautiful exhilarating number is 56!\\\")\\nTest.assertEquals(describeNum(47), \\\"The most brilliant number is 47!\\\")\\nTest.assertEquals(describeNum(115), \\\"The most brilliant heart-warming number is 115!\\\")\\nTest.assertEquals(describeNum(300), \\\"The most brilliant exciting fantastic virtuous heart-warming tear-jerking inspiring number is 300!\\\")\\nTest.assertEquals(describeNum(201), \\\"The most brilliant fantastic number is 201!\\\")\\nTest.assertEquals(describeNum(224), \\\"The most brilliant exciting virtuous beautiful exhilarating number is 224!\\\")\\nTest.assertEquals(describeNum(42), \\\"The most brilliant exciting fantastic tear-jerking beautiful number is 42!\\\")\\nTest.assertEquals(describeNum(22), \\\"The most brilliant exciting number is 22!\\\")\\nTest.assertEquals(describeNum(23), \\\"The most brilliant number is 23!\\\")\\nTest.assertEquals(describeNum(108), \\\"The most brilliant exciting fantastic virtuous tear-jerking emotional number is 108!\\\")\\nTest.assertEquals(describeNum(58), \\\"The most brilliant exciting number is 58!\\\")\\nTest.assertEquals(describeNum(184), \\\"The most brilliant exciting virtuous exhilarating number is 184!\\\")\\nTest.assertEquals(describeNum(46), \\\"The most brilliant exciting number is 46!\\\")\\nTest.assertEquals(describeNum(43), \\\"The most brilliant number is 43!\\\")\\nTest.assertEquals(describeNum(178), \\\"The most brilliant exciting number is 178!\\\")\\nTest.assertEquals(describeNum(191), \\\"The most brilliant number is 191!\\\")\\nTest.assertEquals(describeNum(175), \\\"The most brilliant heart-warming beautiful number is 175!\\\")\\nTest.assertEquals(describeNum(264), \\\"The most brilliant exciting fantastic virtuous tear-jerking exhilarating number is 264!\\\")\\nTest.assertEquals(describeNum(130), \\\"The most brilliant exciting heart-warming inspiring number is 130!\\\")\\nTest.assertEquals(describeNum(213), \\\"The most brilliant fantastic number is 213!\\\")\\nTest.assertEquals(describeNum(25), \\\"The most brilliant heart-warming number is 25!\\\")\\nTest.assertEquals(describeNum(219), \\\"The most brilliant fantastic number is 219!\\\")\\nTest.assertEquals(describeNum(173), \\\"The most brilliant number is 173!\\\")\\nTest.assertEquals(describeNum(212), \\\"The most brilliant exciting virtuous number is 212!\\\")\\nTest.assertEquals(describeNum(116), \\\"The most brilliant exciting virtuous number is 116!\\\")\\nTest.assertEquals(describeNum(103), \\\"The most brilliant number is 103!\\\")\\nTest.assertEquals(describeNum(34), \\\"The most brilliant exciting number is 34!\\\")\\nTest.assertEquals(describeNum(89), \\\"The most brilliant number is 89!\\\")\\nTest.assertEquals(describeNum(40), \\\"The most brilliant exciting virtuous heart-warming exhilarating inspiring number is 40!\\\")\\nTest.assertEquals(describeNum(138), \\\"The most brilliant exciting fantastic tear-jerking number is 138!\\\")\\nTest.assertEquals(describeNum(153), \\\"The most brilliant fantastic emotional number is 153!\\\")\\nTest.assertEquals(describeNum(201), \\\"The most brilliant fantastic number is 201!\\\")\\nTest.assertEquals(describeNum(262), \\\"The most brilliant exciting number is 262!\\\")\\nTest.assertEquals(describeNum(232), \\\"The most brilliant exciting virtuous exhilarating number is 232!\\\")\\nTest.assertEquals(describeNum(128), \\\"The most brilliant exciting virtuous exhilarating number is 128!\\\")\\nTest.assertEquals(describeNum(129), \\\"The most brilliant fantastic number is 129!\\\")\\nTest.assertEquals(describeNum(264), \\\"The most brilliant exciting fantastic virtuous tear-jerking exhilarating number is 264!\\\")\\nTest.assertEquals(describeNum(24), \\\"The most brilliant exciting fantastic virtuous tear-jerking exhilarating number is 24!\\\")\\nTest.assertEquals(describeNum(124), \\\"The most brilliant exciting virtuous number is 124!\\\")\\nTest.assertEquals(describeNum(163), \\\"The most brilliant number is 163!\\\")\\nTest.assertEquals(describeNum(80), \\\"The most brilliant exciting virtuous heart-warming exhilarating inspiring number is 80!\\\")\\nTest.assertEquals(describeNum(130), \\\"The most brilliant exciting heart-warming inspiring number is 130!\\\")\\nTest.assertEquals(describeNum(46), \\\"The most brilliant exciting number is 46!\\\")\\nTest.assertEquals(describeNum(247), \\\"The most brilliant number is 247!\\\")\\nTest.assertEquals(describeNum(89), \\\"The most brilliant number is 89!\\\")\\nTest.assertEquals(describeNum(127), \\\"The most brilliant number is 127!\\\")\\nTest.assertEquals(describeNum(169), \\\"The most brilliant number is 169!\\\")\\nTest.assertEquals(describeNum(195), \\\"The most brilliant fantastic heart-warming number is 195!\\\")\\nTest.assertEquals(describeNum(192), \\\"The most brilliant exciting fantastic virtuous tear-jerking exhilarating number is 192!\\\")\\nTest.assertEquals(describeNum(146), \\\"The most brilliant exciting number is 146!\\\")\",\"language\":\"javascript\",\"summary\":\"Given a number n, return a sentence which describes the number in the following ways.\\n\\nAlways start the string with \\\"The most \\\".\\nIf n is evenly divisible by 1, add \\\"brilliant \\\" to the sentence.\\nIf n is evenly divisble by 2, add \\\"exciting \\\" to the sentence.\\n... 3, add \\\"fantastic \\\" to the sentence.\\n... 4, add \\\"virtuous \\\" to the sentence.\\n... 5, add \\\"heart-warmin\",\"tags\":[\"control_flow\",\"numbers\",\"strings\",\"math\"],\"timestamp\":{\"$date\":1579869186761},\"title\":\"The Most Brilliant Exciting Fantastic Number\",\"stats\":{\"completed\":{\"total\":125,\"ratings\":[2,2,2,2,2,2,1,2,2,1,1,2,2,1,2,2,2,2,2,2,2,1,2,2,2,2,2,1,2,2,2,3,1,1,2,3,0,2,2,0,1,2,1,3,3,3,0,4,1,1,2,2,1,2,2,2,2,0,2,2,0,2,2,2,2,1,2,3,3,2,1,1,2,2,3,2,0,2,5,2,3,2,1,2,0,2,2,0,3,2,1,3,3,1,2,1,2,2,2,0,1,2,2,2,2],\"rators\":[\"5Zq3aGdvh4LHBvnJL\",\"cRpaCxYRmGcN3Nsoj\",\"p2woPCQKXuWJCwffJ\",\"aFMst9xdc5NbYP8E9\",\"n5wubRfh6zh8QRymN\",\"AasGs8AeX9Lcb9xJn\",\"yQtGE2egvwYnNQSFc\",\"YGxdtMwcxMvB5kL2C\",\"yjtdwc2AC4jA2RWtn\",\"6BpBQnSGhzgvhXrEy\",\"5YCX58nhHT8oRCHyy\",\"RqMXPyskYgGs2TgZf\",\"rfsQxYTnovxYJ4s7Q\",\"FJsvM5yqKuK9yMk9P\",\"8w3FaLndaj35EMwAT\",\"ejaKYKNBT3Kvrgfui\",\"osER8G7bRZwgkS3g6\",\"QnPD4Sv6W4LHc2Qng\",\"3xtJYwxrWmw63ibfF\",\"mHT2bJb5SByfJ8yKS\",\"LXi8C8RDemoKhPGKS\",\"sKreeTS6MqjBnkfb2\",\"TtXJzByho48ydSyGT\",\"jYXFFTnuWFNo72Rc5\",\"RE4Mm9T6Q9uygAxGS\",\"aeNAL2xJZkRGsMAbR\",\"xKoMMhNyqWdbomgdJ\",\"av9jN3SbNRM7Xe2qw\",\"tPtz279rzBX8kCWMr\",\"EWn8w8P3nNh7knatY\",\"qMiiWsXSZF6ZEv2S8\",\"FK6dksjYDB2R5RRsW\",\"26FffMTJbDiBZX4Qy\",\"YER6iBcpJCuhgrYDN\",\"pi76g3eRpnKrhee2a\",\"EjPLq3QSJdGQFJdgW\",\"bX6tpTCjwoi6XMMbK\",\"7wtuhPesfhcYsfZaZ\",\"uAS9uKs8KQmp8uhqn\",\"GCsLzWAhLvniQqR3J\",\"2ZFoLTxcCARhwc8xX\",\"yNDBLJLzAHsvTgCN2\",\"a777e8chPvJkY3tKa\",\"BCmmGGt4SrWCENqCz\",\"zNN2fW2pJGpTxBgzx\",\"HFuNFZpdKCddzbuqc\",\"4ntYzGHHBgqf58udP\",\"ttuGK7od8simjgmCJ\",\"65dbBZynphj53nXqA\",\"vtHbevf2tHqe6mRxX\",\"pLpcDC3EYx2DDQSdt\",\"3pb8q4K4jv6jta45d\",\"QRv96jmNaYsWkxQEG\",\"7gZKfvwaeqsGKXMEN\",\"nhWLv6D8eZJ5ggKKX\",\"Po3v3dHCk6wYGKMwi\",\"tAF9Gf6PiGogbZuWs\",\"KxQ8LyGM7iudGLDkN\",\"2tCCFm5iefjrRSaxv\",\"AFfw7cGg83uYk2Miy\",\"aEm3Wvj2rFYRL8Lrb\",\"nAmJEX7BkHLd9LsG2\",\"kp2ZbCewZJAbfd7xv\",\"PGCDJpQMN8Sjn9Gm6\",\"2zKQWLmEBw8FBs4ZL\",\"u9cRf5kvtpRB5ffB3\",\"CNc6rmwhbxkxEhHAp\",\"vAh63eGRwkuJtoP8v\",\"BdvdJYwHZr7JpkHsn\",\"Akq3fQcPRgPrWfsye\",\"g4NCSxxHqHCGMpWwT\",\"qWR7eXxBiNee22A5u\",\"zw7g7T8wE5R5CBhXr\",\"r7mZLgpQWzRiGddL5\",\"M4vq8ATaS9Jg5X7iP\",\"E2hpke7mHxAWsw5t9\",\"evTTY9hwrtogaNxXn\",\"Yp7uvStL97cC9fKkY\",\"3Gf7ikLijfoxabiPY\",\"2Qk2mFu9HBFzrB24i\",\"YSmLyP3eRhcFjJPzg\",\"RtPhDuwmvWNHiBxmG\",\"JsRTAwWK7Nikj4sKA\",\"npp5hesJrst6ghKSM\",\"hyx8iH2z3QySmyRKT\",\"NGvCPuMiAP3xrRLfB\",\"oDtGiNqDMHmhHE3J8\",\"8BJyXvRWcrvN3nttS\",\"nBJve5CzG6WAw7WFQ\",\"p5ZshR8zhTqmdhKDc\",\"iQ7LDrEn8mtYTCAfC\",\"jyoLggHk8xQKZuoQC\",\"yH8hL8euwn2DrW34S\",\"iqmPb9JuJDgTFeR8Q\",\"QACJyAzrekxhNyXdW\",\"hfPaJens6dhKzTPFh\",\"zfGy4Est98rN68tg9\",\"Ztn39QNKSAdtQYhDB\",\"hzAfGkgtruEQcWtLD\",\"kLxNr8o3RdjANZTvy\",\"EB4kpFJhW23QfYZqu\",\"5nhmyqLy8M2Yn2HMR\",\"n4Y5EEGCjmrK99yrt\",\"7FqMzMM5Sqwqk86BQ\",\"eomLS3wh6tQPN8jtH\",\"LeLhhrLFzNDFxLdTf\",\"Cw4A7rDZ2p4ZRGRxc\",\"wTHQMNQGX5QvY7yqL\",\"9iD7J5qbbLudMcWB9\",\"uxKGACwmZ6FNZsMwE\",\"w96fn83f9bNszFjYj\",\"aeAhnHiT8GJ8Xcz3P\",\"vR3AoG2jWvZHd5KeW\",\"bfYmA3LMvhSrK59cn\",\"DfdkfQh8ctd2BaaRY\",\"FGEeCTorXbX3WvjFW\",\"LPZ2QKCoB8q6rG25c\",\"LwD3CyYSiBfg3mA4r\"],\"quality\":[5,5,5,5,5,5,5,5,4,5,5,4,1,5,5,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":4.666666666666667,\"family\":[{\"_id\":\"3RpFmycmCMgZcXaoQ\",\"language\":\"cpp\"},{\"_id\":\"B4SRZm9TLgeYrgPtT\",\"language\":\"javascript\"},{\"_id\":\"3JX75W5Xvun63RH9H\",\"language\":\"python3\"},{\"_id\":\"4BQaPRh9vyLD6j5xY\",\"language\":\"ruby\"}]}}"]