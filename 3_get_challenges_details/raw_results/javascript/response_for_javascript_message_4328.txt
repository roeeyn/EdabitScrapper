a["{\"msg\":\"result\",\"id\":\"919\",\"result\":{\"_id\":\"rpTEWc6boQEgQB8D6\",\"author\":\"er0s\",\"authorId\":\"5Zq3aGdvh4LHBvnJL\",\"code\":\"function tallestBuildingHeight(arr) {\\n\\t\\n}\",\"difficulty\":1.628930817610063,\"familyId\":\"yL5BFcffBowkSu8pJ\",\"instructions\":\"Given an array of strings (depicting a skyline of *several buildings*), return *in meters* the **height of the tallest building**. *Each line* in the list represents **20m**.\\n\\n### Examples\\n```\\ntallestBuildingHeight([\\n  \\\"            ##\\\",\\n  \\\"            ##\\\",\\n  \\\"            ##\\\",\\n  \\\"###   ###   ##\\\",\\n  \\\"###   ###   ###\\\",\\n  \\\"###   ###   ###\\\",\\n  \\\"###   ###   ###\\\"\\n]) ➞ \\\"140m\\\"\\n\\n// Tallest building is 7 rows\\n// 7 x 20m = 140m\\n\\ntallestBuildingHeight([\\n  \\\"               \\\",\\n  \\\"               \\\",\\n  \\\"               \\\",\\n  \\\"       #    ###\\\",\\n  \\\"      # #   ###\\\",\\n  \\\"###   ###   ###\\\",\\n  \\\"###   ###   ###\\\"\\n]) ➞ \\\"80m\\\"\\n\\n// tallest building is 4 rows\\n// 4 x 20m = 80m\\n\\ntallestBuildingHeight([\\n  \\\"                              \\\",\\n  \\\"                         ###  \\\",\\n  \\\"                         ###  \\\",\\n  \\\"###                    #####  \\\",\\n  \\\"###      #             #####  \\\",\\n  \\\"###     ###            #####  \\\",\\n  \\\"######  ###            #######\\\",\\n  \\\"######  ######  ###    #######\\\",\\n  \\\"###################    #######\\\",\\n  \\\"###############################\\\",\\n  \\\"###############################\\\"\\n]) ➞ \\\"200m\\\"\\n\\n// Tallest building is 10 rows\\n// 10 x 20m = 200m\\n```\\n\\n### Notes\\n- There may be some **open sky** above buildings (can't *just* find the length of the array).\\n- There may be multiple tallest buildings (see example #2).\",\"isHidden\":false,\"lab\":\"Test.assertEquals(tallestBuildingHeight([\\n\\t\\\"         \\\",\\n\\t\\\" ##      \\\",\\n\\t\\\" ##      \\\",\\n\\t\\\"###   ## \\\",\\n\\t\\\"###   ## \\\",\\n\\t\\\"###   ###\\\",\\n\\t\\\"###   ###\\\"\\n]), \\\"120m\\\")\\n\\nTest.assertEquals(tallestBuildingHeight([\\n\\t\\\"            ##\\\",\\n\\t\\\"            ##\\\",\\n\\t\\\"            ##\\\",\\n\\t\\\"###   ###   ##\\\",\\n\\t\\\"###   ###   ###\\\",\\n\\t\\\"###   ###   ###\\\",\\n\\t\\\"###   ###   ###\\\"\\n]), \\\"140m\\\")\\n\\nTest.assertEquals(tallestBuildingHeight([\\n\\t\\\"               \\\",\\n\\t\\\"               \\\",\\n\\t\\\"               \\\",\\n\\t\\\"       #    ###\\\",\\n\\t\\\"      # #   ###\\\",\\n\\t\\\"###   ###   ###\\\",\\n\\t\\\"###   ###   ###\\\"\\n]), \\\"80m\\\")\\n\\nTest.assertEquals(tallestBuildingHeight([\\n\\t\\\"               \\\",\\n\\t\\\"               \\\",\\n\\t\\\"               \\\",\\n\\t\\\"               \\\",\\n\\t\\\"               \\\",\\n\\t\\\"###   ###   ###\\\",\\n\\t\\\"###   ###   ###\\\"\\n]), \\\"40m\\\")\\n\\nTest.assertEquals(tallestBuildingHeight([\\n\\t\\\"                  \\\",\\n\\t\\\" #                \\\",\\n\\t\\\" #     #          \\\",\\n\\t\\\"###    #    ###   \\\",\\n\\t\\\"###   # #   ###   #\\\",\\n\\t\\\"###   ###   ###   #\\\",\\n\\t\\\"###   ###   ###   #\\\"\\n]), \\\"120m\\\")\\n\\nTest.assertEquals(tallestBuildingHeight([\\n\\t\\\"          \\\",\\n\\t\\\"###   # # \\\",\\n\\t\\\"###   ### \\\",\\n\\t\\\"###   ### \\\"\\n]), \\\"60m\\\")\\n\\nTest.assertEquals(tallestBuildingHeight([\\n\\t\\\"###                    #####  \\\",\\n\\t\\\"###      #             #####  \\\",\\n\\t\\\"###     ###            #####  \\\",\\n\\t\\\"######  ###            #######\\\",\\n\\t\\\"######  ######  ###    #######\\\",\\n\\t\\\"###################    #######\\\",\\n\\t\\\"###############################\\\",\\n\\t\\\"###############################\\\"\\n]), \\\"160m\\\")\\n\\nTest.assertEquals(tallestBuildingHeight([\\n\\t\\\"                              \\\",\\n\\t\\\"                              \\\",\\n\\t\\\"                              \\\",\\n\\t\\\"###                    #####  \\\",\\n\\t\\\"###      #             #####  \\\",\\n\\t\\\"###     ###            #####  \\\",\\n\\t\\\"######  ###            #######\\\",\\n\\t\\\"######  ######  ###    #######\\\",\\n\\t\\\"###################    #######\\\",\\n\\t\\\"###############################\\\",\\n\\t\\\"###############################\\\"\\n]), \\\"160m\\\")\\n\\nTest.assertEquals(tallestBuildingHeight([\\n\\t\\\"                              \\\",\\n\\t\\\"                         ###  \\\",\\n\\t\\\"                         ###  \\\",\\n\\t\\\"###                    #####  \\\",\\n\\t\\\"###      #             #####  \\\",\\n\\t\\\"###     ###            #####  \\\",\\n\\t\\\"######  ###            #######\\\",\\n\\t\\\"######  ######  ###    #######\\\",\\n\\t\\\"###################    #######\\\",\\n\\t\\\"###############################\\\",\\n\\t\\\"###############################\\\"\\n]), \\\"200m\\\")\\n\\n// made by @Joshua Señoron\",\"language\":\"javascript\",\"summary\":\"Given an array of strings (depicting a skyline of several buildings), return in meters the height of the tallest building. Each line in the list represents 20m.\\n\\nExamples\\ntallestBuildingHeight([\\n  \\\"            ##\\\",\\n  \\\"            ##\\\",\\n  \\\"            ##\\\",\\n  \\\"###   ###   ##\\\",\\n  \\\"###   ###   ###\\\",\\n  \\\"###   ###   ###\\\",\\n  \\\"###   ###   ###\\\"\\n]) ➞ \\\"140m\\\"\\n\\n// Tallest b\",\"tags\":[\"arrays\",\"strings\"],\"timestamp\":{\"$date\":1580769152313},\"title\":\"Height of the Tallest Building\",\"stats\":{\"completed\":{\"total\":195,\"ratings\":[1,1,1,1,1,1,1,1,2,2,2,2,0,1,2,3,1,2,1,1,2,1,2,1,1,2,2,2,2,1,0,1,2,1,2,2,2,0,2,2,1,1,2,1,0,2,2,2,1,2,0,2,2,1,2,0,0,5,1,2,1,2,1,2,2,2,2,2,2,2,2,1,1,2,2,1,2,2,1,0,2,0,2,2,1,3,0,2,0,2,2,1,2,3,2,2,2,2,3,2,2,0,2,2,2,2,1,3,0,2,2,2,3,2,2,2,1,0,1,2,3,2,2,2,1,2,2,2,2,2,1,0,2,2,2,2,1,1,2,2,2,2,2,2,5,2,1,2,1,2,2,2,3,2,2,2,0,2,2],\"rators\":[\"5Zq3aGdvh4LHBvnJL\",\"cRpaCxYRmGcN3Nsoj\",\"n5wubRfh6zh8QRymN\",\"xKoMMhNyqWdbomgdJ\",\"vtHbevf2tHqe6mRxX\",\"JvAB4Z3p2pzF7ooX4\",\"9Fw8SAgbHx5v8KvwP\",\"yjtdwc2AC4jA2RWtn\",\"k5TGxBtLi9BXxeChT\",\"F939uec2dYtYyNYy8\",\"4EiZNSWmNN9v5cr9M\",\"7JCLyrrY6JYGpocac\",\"g5noFWaoRtZNcEEAW\",\"zTZtM9jRsu8eXie6s\",\"pi76g3eRpnKrhee2a\",\"zAMR5yM6wpzfE3a4S\",\"xsDyJstYoBZRS8pJH\",\"CJnuSjyCBMTbTiibD\",\"nuYLLaJCtitSD5no5\",\"EGMDcfyfqqMZsN5pu\",\"vWhgrr5oem8WtKdxm\",\"zd9FLSzsGz3evKafy\",\"6gPHMpkEP8JuHxzpd\",\"RE4Mm9T6Q9uygAxGS\",\"zgoq9MhrL2h75DAMA\",\"9XnGoq9Tv6ut3zTtH\",\"mHT2bJb5SByfJ8yKS\",\"kDuH45yzb6PDtwhi6\",\"FJsvM5yqKuK9yMk9P\",\"tyNrtjfTi56j5Hw9b\",\"yaL57wdXmgAZTvKfX\",\"6BpBQnSGhzgvhXrEy\",\"cp3X8hk8yNME7qoD9\",\"SNiJRRosrmSWssLj4\",\"Y9Nz9yafaibz54W4o\",\"YER6iBcpJCuhgrYDN\",\"cJwiiiX7qwSvgtmk8\",\"xMxdp5oCxmeuYxhpa\",\"AasGs8AeX9Lcb9xJn\",\"3aZvfgr2H2WF8Yog2\",\"LrF8rMBdkJoZPJP5L\",\"QnPD4Sv6W4LHc2Qng\",\"fMqXimJLsPiuhT8A8\",\"hrMyNCp6vfPZXzWmT\",\"EjPLq3QSJdGQFJdgW\",\"xfxkLoQsbZBonmBGp\",\"2CvHJcA9aXt9pvZwA\",\"XKi8iZXBCHCaebSHh\",\"ihTSN4G98CHRmZqra\",\"uAS9uKs8KQmp8uhqn\",\"aPX8qCXL6TmfpRfgy\",\"eANW47mfA359Y6JyP\",\"6AkHZRsnysi2k9izF\",\"Ctya2wbXp2mQRWsit\",\"9Pzg45NEiRXhLtLh3\",\"w53eXh26bfnwL6whB\",\"d9LBRxvADNBB5QJMB\",\"fKib7vNdSgMtra6km\",\"9t5uWDMaPBjMRS3hi\",\"R35tqE5etfTYTfmGr\",\"bX6tpTCjwoi6XMMbK\",\"8Z3dkvWBqtrMEE48N\",\"Pfau42bJyRNy2eq6L\",\"jqbm8L6895JgAtZ6H\",\"eomLS3wh6tQPN8jtH\",\"a777e8chPvJkY3tKa\",\"YSb9gNuH9PEYS8QwW\",\"gzTs5oFrfZwh3Kfze\",\"Gc2bmsof5vD2Hsgqv\",\"dDFJpK4pXCsQYuHmc\",\"vn6nR36mdfY8z2zKx\",\"QGshpArSs3bHZZR7W\",\"YtGYxpMxbrHLFK8nq\",\"ipiC2qPhKZWsAouJf\",\"eQXwk5zGckM8tCWYH\",\"2ZFoLTxcCARhwc8xX\",\"4TuceAZ8oTDzsjhir\",\"HwZx7c3QFWmt5x4oE\",\"65dbBZynphj53nXqA\",\"z5ebtimXwFFJdYxoa\",\"7wtuhPesfhcYsfZaZ\",\"zw7g7T8wE5R5CBhXr\",\"Lzj3w7QjdzikynsGG\",\"Q9KQomTTPBsrkAL6c\",\"tAF9Gf6PiGogbZuWs\",\"733qgZ7ZSSSrzbXGw\",\"BSkoT6o2GweZkqXbc\",\"Es4eX2stRpyoXeC7f\",\"65LkKZmhdw7SJ5YAQ\",\"ij9YRJvZz6WbqcGXS\",\"inbiBEY2tizFwkN84\",\"nkH3HfJXLMNcBMM79\",\"buX4mCQhtXCfBjeno\",\"Wv9v7fHb8umujfg2j\",\"98NmBCC7jEKw5j352\",\"Nua6T3dBurBy3Qfg9\",\"moe6ztrsNzFymC3A7\",\"2tCCFm5iefjrRSaxv\",\"yrLBMbni8KDsC5K44\",\"r7mZLgpQWzRiGddL5\",\"jnyub52Fi79drGvow\",\"BdnE4RS5puoxo92mA\",\"C9LKGu2g5hSijvDzA\",\"QRv96jmNaYsWkxQEG\",\"Sfb5RNdmiKSDyqyp4\",\"Ya3eHgs8x3unZRLpb\",\"PGCDJpQMN8Sjn9Gm6\",\"CPiufkEmhMRhXduD8\",\"AFfw7cGg83uYk2Miy\",\"7gZKfvwaeqsGKXMEN\",\"nAmJEX7BkHLd9LsG2\",\"E2hpke7mHxAWsw5t9\",\"Po3v3dHCk6wYGKMwi\",\"aEm3Wvj2rFYRL8Lrb\",\"Tnj4Na9eiTiuqSzqF\",\"GzJjZygicDnQqNSYY\",\"evTTY9hwrtogaNxXn\",\"kp2ZbCewZJAbfd7xv\",\"jkumHyXfMkhGcPgqC\",\"ttuGK7od8simjgmCJ\",\"R9uaMzX2Y4ND8Cosm\",\"2zKQWLmEBw8FBs4ZL\",\"u9cRf5kvtpRB5ffB3\",\"v2w9GN4jHP2fgYdeE\",\"CNc6rmwhbxkxEhHAp\",\"g4NCSxxHqHCGMpWwT\",\"BdvdJYwHZr7JpkHsn\",\"DDokdbBKxv49M445o\",\"75NY7vqimaATzRdAX\",\"M4vq8ATaS9Jg5X7iP\",\"jLSZdBseR2kfjt8dL\",\"vewKwcMeGuk3p3MsN\",\"Yp7uvStL97cC9fKkY\",\"pdGuqmMyeN4wZaWwv\",\"2QifjAQzAEqqnk86G\",\"vGKxRcDYDsXzTQuEQ\",\"nyh73Tr6GhqAat78g\",\"nDCNsJvKvsAS5F8PS\",\"3Gf7ikLijfoxabiPY\",\"srJ34BaybkQh3qRkM\",\"RtPhDuwmvWNHiBxmG\",\"m6qKkBY4aPWziyJTj\",\"5f6oSeq4r5WTXLdCQ\",\"5hHf2e9zimbmxMqqF\",\"J7d397iB5GuWRAMfg\",\"jjNEEdSnY3fcQKMaY\",\"ApqWTmEEkTCsDou48\",\"2Qk2mFu9HBFzrB24i\",\"npp5hesJrst6ghKSM\",\"STipuJs6kBvPqqsSE\",\"cgCQDs9i7yChKeAjE\",\"CH53jGETBeJTummf3\",\"wJTDDTE3TrmSXKP4d\",\"FGEeCTorXbX3WvjFW\",\"hHEMpogFW5m7ioS7q\",\"oDtGiNqDMHmhHE3J8\",\"NGvCPuMiAP3xrRLfB\",\"LwD3CyYSiBfg3mA4r\",\"Kt6oGAfrymXmAnn2d\",\"rpNNPWzdFCc9TzKMz\",\"9HZbxzkzgz4CvePtv\",\"n4Y5EEGCjmrK99yrt\",\"nBJve5CzG6WAw7WFQ\",\"gXTAie79kiw28tx5u\",\"Q7Yxda7dqKeYPs2Db\",\"jyoLggHk8xQKZuoQC\",\"SCYNpjgtLCE9rKpYB\",\"bfYmA3LMvhSrK59cn\",\"mpLFbFKjY6u3nsDMv\",\"sN2JyFeJCwfwwHPwF\",\"oyB4Wr4EeZnoDaa8B\",\"z47JaNrQMgvuPx5HE\",\"jicWFrNKadYuLhqxh\",\"kew3Bi8gPTraTXoDF\",\"uxKGACwmZ6FNZsMwE\",\"pPpmP7xeJzGgK362R\",\"LPZ2QKCoB8q6rG25c\",\"CHvzhtXnv8HTbPQ56\",\"PTo9qt93YqGvL8fCa\",\"QHiEYtz3tX3s9nETo\"],\"quality\":[3,5,4,4,5,5,5,5,5,5,2,5,5,5,5,5,5,5,5,4,5,4,4,5,5,4]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":4.576923076923077,\"family\":[{\"_id\":\"Dkj3cvmzZiWtuZyNR\",\"language\":\"cpp\"},{\"_id\":\"rpTEWc6boQEgQB8D6\",\"language\":\"javascript\"},{\"_id\":\"NsRTPHigG4CPCST82\",\"language\":\"php\"},{\"_id\":\"LuBtaT9dwStbd7mnK\",\"language\":\"python3\"},{\"_id\":\"btYaWRMn4TSL56L8F\",\"language\":\"ruby\"}]}}"]