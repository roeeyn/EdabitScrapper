a["{\"msg\":\"result\",\"id\":\"2328\",\"result\":{\"_id\":\"ZshzQmvWACqgy7heQ\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"function isoGroup(arr) {\\n\\t// your recursive solution here\\n\\treturn isoGroup(arr)\\n}\",\"difficulty\":3.8076923076923075,\"editorId\":\"a777e8chPvJkY3tKa\",\"familyId\":\"kveNbDfyQmqQfS8K3\",\"instructions\":\"Write a function that extracts the max value of a number in an array. If there are **two or more** max values, return it **as an array**, otherwise, return the **number**. This process could be relatively easy with some of the built-in Array functions, but the required approach is **recursive**.\\n\\n### Examples\\n```\\nisoGroup([31, 7, 2, 13, 7, 9, 10, 13]) ➞ 31\\n\\nisoGroup([1, 3, 9, 5, 1, 7, 9, -9]) ➞ [9, 9]\\n\\nisoGroup([97, 19, -18, 97, 36, 23, -97]) ➞ [97, 97]\\n\\nisoGroup([-31, -7, -13, -7, -9, -13]) ➞ [-7, -7]\\n\\nisoGroup([-1, -3, -9, -5, -1, -7, -9, -9]) ➞ [-1, -1]\\n\\nisoGroup([107, 19, -18, 79, 36, 23, 97]) ➞ 107\\n```\\n\\n### Notes\\n- You can read more about recursion (see the **Resources** tab) if you aren't familiar with it yet or haven't fully understood the concept before taking up this challenge.\\n- If you think recursion is fun, you can find a collection of those challenges [here](https://edabit.com/collection/YJH4pAyqDbhLc4STc).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"const recursive = f => (`${f}`.match(RegExp(`${f.name}`,'gm'))||[]).length > +(/function/.test(f))\\nTest.assertNotEquals(recursive(isoGroup), false, \\\"Recursion is required!\\\")\\n\\nlet [numVector, resVector] = [[\\n  [31, 7, 2, 13, 7, 9, 10, 13],\\n  [1, 3, 9, 5, 1, 7, 9, -9],\\n  [97, 19, -18, 97, 36, 23, -97],\\n  [-31, -7, -13, -7, -9, -13],\\n  [-1, -3, -9, -5, -1, -7, -9, -9],\\n  [107, 19, -18, 79, 36, 23, 97],\\n  [10, -6, -3, 38, 12, 72, 59, 32]],\\n  [31, [9, 9], [97, 97], [-7, -7], [-1, -1], 107, 72]]\\nfor (let i in numVector) {\\n  !Array.isArray(resVector[i]) ?\\n  Test.assertEquals(isoGroup(numVector[i]), resVector[i]) :\\n  Test.assertSimilar(isoGroup(numVector[i]), resVector[i])\\n}\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,5,1,1,4,1,2,5,5,5,2,5,1,4,5,1,5,4,3,5,5,5],\"rators\":[\"a777e8chPvJkY3tKa\",\"aEm3Wvj2rFYRL8Lrb\",\"yjtdwc2AC4jA2RWtn\",\"mHT2bJb5SByfJ8yKS\",\"hcm8sL8mNJTSfTdgE\",\"n5wubRfh6zh8QRymN\",\"sdfo3WDPcuNc9hfbt\",\"buX4mCQhtXCfBjeno\",\"JGBCMpnbbi5ztuFoX\",\"HmQu5Cd2KivaXhaR7\",\"bX6tpTCjwoi6XMMbK\",\"DHGZgTxTdCZ2syhac\",\"DPi9QGLctq2y76KuE\",\"QRv96jmNaYsWkxQEG\",\"PH32cNxBjrK4a28sn\",\"s678Wirfor5uYL5T6\",\"tAF9Gf6PiGogbZuWs\",\"TtrXnGzi9MyhLvWiz\",\"8BJyXvRWcrvN3nttS\",\"zjD5tCskapMK4ax7N\",\"Z9jhP3WeN7jSf4aFs\"],\"total\":23,\"quality\":[]},\"flags\":0},\"summary\":\"Write a function that extracts the max value of a number in an array. If there are two or more max values, return it as an array, otherwise, return the number. This process could be relatively easy with some of the built-in Array functions, but the required approach is recursive.\\n\\nExamples\\nisoGroup([31, 7, 2, 13, 7, 9, 10, 13]) ➞ 31\\n\\nisoGroup([1, 3, 9, 5, 1, 7\",\"tags\":[\"recursion\",\"arrays\"],\"timestamp\":{\"$date\":1595631103348},\"title\":\"Recursion: Isolated or Grouped?\",\"quality\":0,\"family\":[{\"_id\":\"ZshzQmvWACqgy7heQ\",\"language\":\"javascript\"},{\"_id\":\"B6M8jqcq3nP4gDPEi\",\"language\":\"python3\"}]}}"]