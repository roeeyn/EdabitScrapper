a["{\"msg\":\"result\",\"id\":\"2289\",\"result\":{\"_id\":\"XyLRwKkiZnaAKAbXM\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"function canMove(piece, current, target) {\\n\\t\\n}\",\"difficulty\":3.6666666666666665,\"familyId\":\"Fw5iKeZRJ53jey8hx\",\"instructions\":\"Create a function that takes the name of a chess piece, its position and a target position. The function should return `true` if the piece can move to the target and `false` if it can't.\\n\\nThe possible inputs are \\\"Pawn\\\", \\\"Knight\\\", \\\"Bishop\\\", \\\"Rook\\\", \\\"Queen\\\" and \\\"King\\\".\\n\\n### Examples\\n```\\ncanMove(\\\"Rook\\\", \\\"A8\\\", \\\"H8\\\") ➞ true\\n\\ncanMove(\\\"Bishop\\\", \\\"A7\\\", \\\"G1\\\") ➞ true\\n\\ncanMove(\\\"Queen\\\", \\\"C4\\\", \\\"D6\\\") ➞ false\\n```\\n\\n### Notes\\n- Do not include pawn capture moves and en passant.\\n- Do not include castling.\\n- Remember to include pawns' two-square move on the second rank!\\n- Look for patterns in the movement of the pieces.\",\"lab\":\"Test.assertEquals(canMove(\\\"Pawn\\\", \\\"A5\\\", \\\"A6\\\"), true)\\nTest.assertEquals(canMove(\\\"Pawn\\\", \\\"G2\\\", \\\"G4\\\"), true)\\nTest.assertEquals(canMove(\\\"Pawn\\\", \\\"C6\\\", \\\"D7\\\"), false)\\nTest.assertEquals(canMove(\\\"Knight\\\", \\\"F5\\\", \\\"E3\\\"), true)\\nTest.assertEquals(canMove(\\\"Knight\\\", \\\"F6\\\", \\\"E5\\\"), false)\\nTest.assertEquals(canMove(\\\"Bishop\\\", \\\"B4\\\", \\\"E7\\\"), true)\\nTest.assertEquals(canMove(\\\"Bishop\\\", \\\"B6\\\", \\\"F5\\\"), false)\\nTest.assertEquals(canMove(\\\"Rook\\\", \\\"A8\\\", \\\"H8\\\"), true)\\nTest.assertEquals(canMove(\\\"Rook\\\", \\\"A8\\\", \\\"H7\\\"), false)\\nTest.assertEquals(canMove(\\\"Queen\\\", \\\"A8\\\", \\\"H1\\\"), true)\\nTest.assertEquals(canMove(\\\"Queen\\\", \\\"A6\\\", \\\"H4\\\"), false)\\nTest.assertEquals(canMove(\\\"King\\\", \\\"C4\\\", \\\"D5\\\"), true)\\nTest.assertEquals(canMove(\\\"King\\\", \\\"B7\\\", \\\"B5\\\"), false)\",\"language\":\"javascript\",\"summary\":\"Create a function that takes the name of a chess piece, its position and a target position. The function should return true if the piece can move to the target and false if it can't.\\n\\nThe possible inputs are \\\"Pawn\\\", \\\"Knight\\\", \\\"Bishop\\\", \\\"Rook\\\", \\\"Queen\\\" and \\\"King\\\".\\n\\nExamples\\ncanMove(\\\"Rook\\\", \\\"A8\\\", \\\"H8\\\") ➞ true\\n\\ncanMove(\\\"Bishop\\\", \\\"A7\\\", \\\"G1\\\") ➞ true\\n\\ncanMove(\\\"Queen\",\"tags\":[\"games\",\"logic\",\"algorithms\",\"validation\"],\"timestamp\":{\"$date\":1563986289190},\"title\":\"Chess Pieces\",\"stats\":{\"completed\":{\"total\":39,\"ratings\":[3,3,3,3,3,2,2,3,4,4,2,3,3,4,5,3,5,5,3,4,5,5,4,3,2,4,4,5,5,4,5,3,5,4,2,4,4,3,5],\"rators\":[\"65dbBZynphj53nXqA\",\"n5wubRfh6zh8QRymN\",\"qFPQzo4toFeKNvBGT\",\"FJsvM5yqKuK9yMk9P\",\"yjtdwc2AC4jA2RWtn\",\"qwgeLYFkLFi3kcuES\",\"5Zq3aGdvh4LHBvnJL\",\"PXeZGXDAhGzCpgPy8\",\"cRpaCxYRmGcN3Nsoj\",\"CaeKNEwd6pFQjAWpM\",\"oJRbRjYJnWfsCdNHD\",\"FTFpp4Q4iovdM6Pc9\",\"8tEikq8QhumvnbHXK\",\"yQtGE2egvwYnNQSFc\",\"Czph6ZM3JY2t9f2jD\",\"PvzjWEiMJZDt7pxiq\",\"hB8Er9xKambEA8Hv9\",\"2wbpfhv5TxMgJECFe\",\"Z2TFRP2tneAgzuDTP\",\"zsNp9fk9BGDBiHr4G\",\"YER6iBcpJCuhgrYDN\",\"ZXRMRAJNP6eseLdbR\",\"JGBCMpnbbi5ztuFoX\",\"FQDwscZZbqMZNcazT\",\"bK3h5Yv6eEQh2LhkR\",\"7TXyMDHFYjna3dyPb\",\"mHT2bJb5SByfJ8yKS\",\"eoepTq5ES5tfgY9XT\",\"aEm3Wvj2rFYRL8Lrb\",\"Jd6KY7BxEJKbvZHen\",\"48YFSgQ6yNHTWErHA\",\"va3fDAQm4sqSMoy3R\",\"tAF9Gf6PiGogbZuWs\",\"DPi9QGLctq2y76KuE\",\"psXaERa5yLMhtP6Y4\"],\"quality\":[4]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"isHidden\":false,\"quality\":4,\"family\":[{\"_id\":\"DqaLizN7DtKDRRrxv\",\"language\":\"cpp\"},{\"_id\":\"A8xQZTqzkn88cLCmj\",\"language\":\"java\"},{\"_id\":\"XyLRwKkiZnaAKAbXM\",\"language\":\"javascript\"},{\"_id\":\"i5KL9xzKt6WSBsds9\",\"language\":\"python3\"},{\"_id\":\"ze3FSebL3fiWx3K4D\",\"language\":\"ruby\"}]}}"]