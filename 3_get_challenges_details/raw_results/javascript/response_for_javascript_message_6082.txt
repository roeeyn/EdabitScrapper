a["{\"msg\":\"result\",\"id\":\"1788\",\"result\":{\"_id\":\"y3e9Xdemxr65JQFX8\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"function isHappy(n) {\\n\\t\\n}\",\"difficulty\":2.5737704918032787,\"quality\":4.4,\"familyId\":\"E9cqZE3HYjNDqWeT9\",\"instructions\":\"A **happy number** is a number which yields a `1` by repeatedly summing up the square of its digits. If such a process results in an endless cycle of numbers containing `4`, the number is said to be an **unhappy number**.\\n\\nCreate a function that accepts a number and determines whether the number is a *happy number* or not. Return `true` if so, `false` otherwise.\\n\\n### Examples\\n```\\nisHappy(67) ➞ false\\n\\nisHappy(89) ➞ false\\n\\nisHappy(139) ➞ true\\n\\nisHappy(1327) ➞ false\\n\\nisHappy(2871) ➞ false\\n\\nisHappy(3970) ➞ true\\n```\\n\\n### Notes\\n- **Hint**: Your loop terminates if the value of `n` is either `1` or `4`.\\n- **Optionally**, you can solve this challenge via a recursive approach.\\n-  A recursive version of this challenge can be found [here](https://edabit.com/challenge/GnF85aA7XgZdZYrZp).\",\"isHidden\":false,\"lab\":\"let [numVector, resVector] = [\\n  [1, 10, 44, 67, 89, 139, 1327, 2871, 3970, 5209, 6329, 8888, 9331, 10000],\\n  [true, true, true, false, false, true, false, false, true, false, true, false, true, true]\\n]\\nfor (let i in numVector) Test.assertEquals(isHappy(numVector[i]), resVector[i])\",\"language\":\"javascript\",\"summary\":\"A happy number is a number which yields a 1 by repeatedly summing up the square of its digits. If such a process results in an endless cycle of numbers containing 4, the number is said to be an unhappy number.\\n\\nCreate a function that accepts a number and determines whether the number is a happy number or not. Return true if so, false otherwise.\\n\\nExamples\\nisHap\",\"tags\":[\"strings\",\"arrays\",\"loops\",\"math\",\"validation\"],\"timestamp\":{\"$date\":1601552619123},\"title\":\"Happy Number\",\"stats\":{\"completed\":{\"total\":73,\"ratings\":[3,3,3,3,3,3,4,2,1,3,3,0,1,3,3,1,4,3,4,3,1,0,3,2,3,5,4,1,2,2,3,4,4,4,2,2,3,3,3,3,1,3,2,3,3,3,2,2,2,2,2,3,3,2,2,3,3,2,1,2,4],\"quality\":[5,5,5,5,3,5,4,5,5,2],\"rators\":[\"a777e8chPvJkY3tKa\",\"buX4mCQhtXCfBjeno\",\"mHT2bJb5SByfJ8yKS\",\"yjtdwc2AC4jA2RWtn\",\"RhajfcRtgLpeeH4FX\",\"tAF9Gf6PiGogbZuWs\",\"v9KtC8YLbMWmXiW2H\",\"7qXTveg67vdwDRxxT\",\"sYJKcRHeWxTBoAdaL\",\"5nHtgdY8F2FbAMawq\",\"RKKuw76K7sRBMouKq\",\"bX6tpTCjwoi6XMMbK\",\"WfA7u3xCw6vpda4P8\",\"DjChaA6HXG2vBe4fK\",\"Es4eX2stRpyoXeC7f\",\"R9CvsfEZWGuHDKM28\",\"YEjnBpgNjDLhnf4H7\",\"kp2ZbCewZJAbfd7xv\",\"8SYDBRtkZuW3pdPtG\",\"6GyFETYj2mia5EYsM\",\"8BJyXvRWcrvN3nttS\",\"ct42f2gGpMXSd9hXM\",\"4XxJxQkB5mNTLY2qk\",\"vuDP7uD5oSmHL7zYd\",\"BTdKRxKHXHDDD4934\",\"zS7Z7MySb9NkwPgPW\",\"dxFtJBqPxFSsh44Em\",\"Po3v3dHCk6wYGKMwi\",\"i49enk79wAajcgi7a\",\"TvLPYMqkTQK7iZdFC\",\"Ab7ZaCrjXSGeuuDHa\",\"azAzSkvJd7eyXY9x9\",\"NoXodHiiDfKq8r4kD\",\"MsXtuZ6LNcvz33Pod\",\"j3JZyXPSLrrSo6qrq\",\"hPFt6N2p3Zofykw8d\",\"6vfjruFp8ZpRSi3AT\",\"ZTTJprKDvFqKGew7c\",\"WnogMFYXoyvmBmGkm\",\"QRv96jmNaYsWkxQEG\",\"PjAHibG68Zsn4JwRK\",\"DPi9QGLctq2y76KuE\",\"sZ2eCa6pF6EN9PMmd\",\"AasGs8AeX9Lcb9xJn\",\"NGvCPuMiAP3xrRLfB\",\"rSJGLYSXMuu3RWjun\",\"PH32cNxBjrK4a28sn\",\"M4vq8ATaS9Jg5X7iP\",\"s678Wirfor5uYL5T6\",\"AFfw7cGg83uYk2Miy\",\"cyxQxitLRfAYjCEX4\",\"CBRx8seBYyYKqvMi3\",\"RE4Mm9T6Q9uygAxGS\",\"RvRSbZt95z7BJdh7p\",\"8spkaoEHNxmRzyjTh\",\"fYb5FSoEXexprjDXA\",\"ctjHYddBN5dLSFtL2\",\"LwD3CyYSiBfg3mA4r\",\"oDtGiNqDMHmhHE3J8\",\"ecEBGmi9dPBxyxfYz\",\"mGaEDPw5FsDb3vdnq\",\"vwTy7y6pLbJpL7aqQ\",\"JZ7hzwyx5hgqyACcK\",\"Ro48geFkzMGRiMPxG\",\"gj87yXyoJxhoQLetq\",\"f7X4ymW7D3Gfy8Top\"]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":1},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"S5y88pjHnpr3qd5BD\",\"language\":\"java\"},{\"_id\":\"y3e9Xdemxr65JQFX8\",\"language\":\"javascript\"},{\"_id\":\"rGAcibgZ6u9MtasfW\",\"language\":\"python3\"}]}}"]