a["{\"msg\":\"result\",\"id\":\"2059\",\"result\":{\"_id\":\"Hs9MayvcfE7gHzuLT\",\"archived\":false,\"author\":\"Pustur\",\"authorId\":\"65dbBZynphj53nXqA\",\"code\":\"function minesweeperNumbers(board) {\\n\\t\\n}\",\"difficulty\":2.8857142857142857,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"tJs8rGxGPx2Cm53Af\",\"instructions\":\"Create a function that takes an array representation of a Minesweeper board, and returns another board where the value of each cell is the amount of its neighbouring mines.\\n\\n### Examples\\nThe input may look like this:\\n\\n```\\n[\\n  [0, 1, 0, 0],\\n  [0, 0, 1, 0],\\n  [0, 1, 0, 1],\\n  [1, 1, 0, 0],\\n]\\n```\\n\\nThe `0` represents an **empty space**  .\\nThe `1` represents a **mine**.\\n\\nYou will have to replace each **mine** with a `9` and each **empty space** with the number of adjacent mines, the output will look like this:\\n\\n```\\n[\\n  [1, 9, 2, 1],\\n  [2, 3, 9, 2],\\n  [3, 9, 4, 9],\\n  [9, 9, 3, 1],\\n]\\n```\\n\\n### Notes\\n- Since in the output the numbers `0-8` are used to determine the amount of adjacent mines, the number `9` will be used to identify the mines instead.\\n- A wikipedia page explaining how Minesweeper works is available in the **Resources** tab.\",\"lab\":\"Test.assertSimilar(minesweeperNumbers([]), [])\\n\\nTest.assertSimilar(minesweeperNumbers([\\n  [1, 1, 1],\\n  [1, 0, 1],\\n  [1, 1, 1]\\n]), [\\n  [9, 9, 9],\\n  [9, 8, 9],\\n  [9, 9, 9]\\n])\\n\\nTest.assertSimilar(minesweeperNumbers([\\n  [0, 0, 0, 1],\\n  [0, 1, 0, 0],\\n  [1, 0, 0, 0],\\n  [0, 0, 1, 0]\\n]), [\\n  [1, 1, 2, 9],\\n  [2, 9, 2, 1],\\n  [9, 3, 2, 1],\\n  [1, 2, 9, 1]\\n])\\n\\nTest.assertSimilar(minesweeperNumbers([\\n\\t[0, 1, 0, 0],\\n  [0, 0, 1, 0],\\n  [0, 1, 0, 1],\\n  [1, 1, 0, 0],\\n]), [\\n  [1, 9, 2, 1],\\n  [2, 3, 9, 2],\\n  [3, 9, 4, 9],\\n  [9, 9, 3, 1],\\n])\\n\\nTest.assertSimilar(minesweeperNumbers([\\n  [1, 0, 0, 0, 0, 0, 1, 0],\\n  [1, 0, 1, 0, 1, 0, 0, 0],\\n  [0, 0, 0, 0, 0, 0, 1, 0],\\n  [0, 1, 0, 1, 0, 0, 0, 1],\\n  [0, 0, 0, 1, 0, 1, 1, 0],\\n  [0, 1, 1, 0, 0, 0, 1, 1],\\n  [1, 0, 0, 0, 0, 0, 0, 0],\\n  [0, 0, 1, 0, 0, 1, 0, 1],\\n]), [\\n  [9, 3, 1, 2, 1, 2, 9, 1],\\n  [9, 3, 9, 2, 9, 3, 2, 2],\\n  [2, 3, 3, 3, 2, 2, 9, 2],\\n  [1, 9, 3, 9, 3, 3, 4, 9],\\n  [2, 3, 5, 9, 3, 9, 9, 4],\\n  [2, 9, 9, 2, 2, 3, 9, 9],\\n  [9, 4, 3, 2, 1, 2, 4, 3],\\n  [1, 2, 9, 1, 1, 9, 2, 9],\\n])\\n\\nTest.assertSimilar(minesweeperNumbers([\\n  [1, 1, 0, 0, 0, 0, 0, 0],\\n  [1, 1, 0, 0, 0, 0, 0, 0],\\n  [0, 0, 0, 0, 0, 0, 1, 0],\\n  [1, 1, 0, 0, 0, 0, 0, 0],\\n  [0, 0, 0, 1, 1, 1, 1, 0],\\n  [0, 1, 0, 0, 0, 0, 1, 1],\\n  [1, 0, 0, 0, 1, 0, 0, 0],\\n  [0, 0, 1, 0, 1, 0, 1, 1],\\n]), [\\n  [9, 9, 2, 0, 0, 0, 0, 0],\\n  [9, 9, 2, 0, 0, 1, 1, 1],\\n  [4, 4, 2, 0, 0, 1, 9, 1],\\n  [9, 9, 2, 2, 3, 4, 3, 2],\\n  [3, 3, 3, 9, 9, 9, 9, 3],\\n  [2, 9, 2, 3, 4, 5, 9, 9],\\n  [9, 3, 2, 3, 9, 4, 4, 4],\\n  [1, 2, 9, 3, 9, 3, 9, 9],\\n])\",\"language\":\"javascript\",\"summary\":\"Create a function that takes an array representation of a Minesweeper board, and returns another board where the value of each cell is the amount of its neighbouring mines.\\n\\nExamples\\nThe input may look like this:\\n\\n[\\n  [0, 1, 0, 0],\\n  [0, 0, 1, 0],\\n  [0, 1, 0, 1],\\n  [1, 1, 0, 0],\\n]\\n\\nThe 0 represents an empty space  .\\nThe 1 represents a mine.\\n\\nYou will have to r\",\"tags\":[\"arrays\",\"games\",\"loops\",\"functional_programming\",\"numbers\"],\"timestamp\":{\"$date\":1525814886257},\"title\":\"Minesweeper Number of Neighbouring Mines\",\"stats\":{\"completed\":{\"total\":76,\"ratings\":[2,2,2,2,2,2,3,2,1,3,2,2,3,3,2,3,4,2,3,4,2,2,2,3,4,1,3,3,3,3,3,2,2,3,3,4,2,4,3,4,5,3,3,3,2,3,3,4,4,3,4,3,3,4,2,2,3,4,3,4,3,3,1,3,4,3,4,3,4,4],\"rators\":[\"65dbBZynphj53nXqA\",\"BkPgkDQGHm66X4Qai\",\"9LmD2bj22RANXoyDB\",\"64npbbqRmkRnKA4Ej\",\"AgQburWndXwEhgomM\",\"GiWEB8bDSqRWrKouW\",\"thEsZ7N6X8qfZMbcv\",\"XHngE5iScvztMpnR2\",\"FGEeCTorXbX3WvjFW\",\"RNKWjAHrXt9AiMc3g\",\"yHjpDrX6o6RLzAfYb\",\"DSiiNsKkQhQgPfsQn\",\"KTYoZkpx3aEfRyQWG\",\"ak5aPiT6QWpmbnPzD\",\"crpgyry7fwiZqkRsB\",\"SDtZFL5NzAoCPofXk\",\"XcHCqYmeoqxDsoucx\",\"gsNrqAHNwLe5sEGfK\",\"wkxYjg28PC4xdWH69\",\"7Jb7YWAWX8TJzbLqp\",\"Njd5iJRAHzeTNamkK\",\"wp2HAuFyovGn3eC8P\",\"nr7jKeHEE3TC9oyp4\",\"6XbwEXgskYHLL7Lu3\",\"DS3pgWCR2d2FAWQzw\",\"cArEpJB32Nu5TTMG2\",\"n5wubRfh6zh8QRymN\",\"JcXaeRLDW85JgFLDN\",\"DszZSuRTD7ynLoZch\",\"Hz8mnq7xFJZKLymTh\",\"FJsvM5yqKuK9yMk9P\",\"CfXgiJuq2KxqL7Y7r\",\"8xuMMGF7fyQWL2fKH\",\"wcjknenWdPRhrRScv\",\"BTDyduiRYDSm5LyeD\",\"7WPf9TjQcYuJnEo4T\",\"aL6Sa35YweG8FbMY8\",\"SMr35gqRLyTf7dkyC\",\"6ufBNgfHKDAu9Tbh2\",\"9ESrAneEJgbpuad8v\",\"fZsxvcfz8Fdskge3Y\",\"yjtdwc2AC4jA2RWtn\",\"EjPLq3QSJdGQFJdgW\",\"5Zq3aGdvh4LHBvnJL\",\"mHT2bJb5SByfJ8yKS\",\"AasGs8AeX9Lcb9xJn\",\"P8bXFR4cHwFia9rNM\",\"5HRPnrWvfDLAiEGFc\",\"nKcsKogvPHfmiogtT\",\"cRpaCxYRmGcN3Nsoj\",\"Kc3SDafimwpZWrATJ\",\"sBcsrC5paZm9nxjot\",\"eFjGhq7C7bBKXjT6X\",\"o7LFNBScxLWD5pfav\",\"LTxPfYyzLtPRZhFvR\",\"bXaGdBM8FBLHf7N6Y\",\"Ek9PiwGewEGH6fcqz\",\"ffB8T76Ye9ygL6QZZ\",\"Es4eX2stRpyoXeC7f\",\"uP9SRKxpG4GjKkKq5\",\"RP9ET2shjhrGRQ4da\",\"pGh7WykiPe26fHJYv\",\"M4vq8ATaS9Jg5X7iP\",\"mDWNyaaQ9hvPCRzSd\",\"QvXPEKpEtYCowpgMo\",\"w32idALSdtih656kd\",\"dpDFNsknxvEYi5YkA\",\"DPi9QGLctq2y76KuE\",\"oDtGiNqDMHmhHE3J8\"],\"quality\":[5,5,5,5]},\"complaints\":{\"total\":0,\"reasons\":[],\"skippers\":[\"65dbBZynphj53nXqA\"]},\"instructions\":{\"score\":-0.34999999999999987,\"voters\":[\"GiWEB8bDSqRWrKouW\",\"BkPgkDQGHm66X4Qai\"]},\"tests\":{\"score\":9.85,\"voters\":[\"BkPgkDQGHm66X4Qai\",\"xkD2ctfcwsGbidRtD\"]},\"flags\":0},\"isHidden\":false,\"quality\":5,\"family\":[{\"_id\":\"vb9BDiGC9noYLdyCF\",\"language\":\"cpp\"},{\"_id\":\"Hs9MayvcfE7gHzuLT\",\"language\":\"javascript\"},{\"_id\":\"v2eHXTn2qobw2WYJP\",\"language\":\"python3\"},{\"_id\":\"sQrchMe3BeQHebS7M\",\"language\":\"ruby\"}]}}"]