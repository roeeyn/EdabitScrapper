a["{\"msg\":\"result\",\"id\":\"1971\",\"result\":{\"_id\":\"cZReb2PbqAcfRserf\",\"author\":\"er0s\",\"authorId\":\"5Zq3aGdvh4LHBvnJL\",\"code\":\"function routeTracer(grid, input) {\\n\\t\\n\\treturn {route: [], items: \\\"\\\"}\\n}\",\"difficulty\":2.784313725490196,\"editorId\":\"5Zq3aGdvh4LHBvnJL\",\"familyId\":\"D7vLSXR4vqRR7gMcv\",\"instructions\":\"In this challenge, the work area will be a 4x4 matrix containing three types of characters:\\n\\n- `@`  Your position.\\n- `-`  A blank spot.\\n- `&, #, $`  Collectible items.\\n\\nFrom your starting point in the grid, you have to trace a route placing a `x` in every spot visited, following a sequence of letters with the directions to take:\\n\\n- `l`  Left\\n- `r`  Right\\n- `u`  Up\\n- `d`  Down\\n\\n```\\ninput = \\\"luur\\\"\\n// left, up, up, right\\n\\ngrid = [\\n[\\\"-\\\", \\\"-\\\", \\\"-\\\", \\\"#\\\"]\\n[\\\"-\\\", \\\"-\\\", \\\"$\\\", \\\"-\\\"]\\n[\\\"-\\\", \\\"-\\\", \\\"-\\\", \\\"@\\\"]\\n[\\\"-\\\", \\\"&\\\", \\\"-\\\", \\\"-\\\"] ]\\n\\nresult = { route = [\\n[\\\"-\\\", \\\"-\\\", \\\"x\\\", \\\"x\\\"],\\n[\\\"-\\\", \\\"-\\\", \\\"x\\\", \\\"-\\\"],\\n[\\\"-\\\", \\\"-\\\", \\\"x\\\", \\\"@\\\"],\\n[\\\"-\\\", \\\"&\\\", \\\"-\\\", \\\"-\\\"] ],\\nitems: \\\"$#\\\" }\\n```\\n\\nWhen moves are finished, you will have a new grid with the traced given route (a route made of `x` chars), and a series of items collected along the way.\\n\\nGiven a matrix `grid` and a string with the directions to take `input`, implement a function that returns an object literal containing the traced route as a new matrix and the items collected as a string.\\n\\n### Examples\\n```\\nfunction routeTracer([\\n  [\\\"-\\\", \\\"#\\\", \\\"-\\\", \\\"-\\\"],\\n  [\\\"$\\\", \\\"#\\\", \\\"@\\\", \\\"&\\\"],\\n  [\\\"-\\\", \\\"#\\\", \\\"$\\\", \\\"&\\\"],\\n  [\\\"$\\\", \\\"-\\\", \\\"&\\\", \\\"-\\\"]\\n], \\\"lddr\\\",) âžž {\\n  route: [\\n [\\\"-\\\", \\\"#\\\", \\\"-\\\", \\\"-\\\"],\\n  [\\\"$\\\", \\\"x\\\", \\\"@\\\", \\\"&\\\"],\\n  [\\\"-\\\", \\\"x\\\", \\\"$\\\", \\\"&\\\"],\\n  [\\\"$\\\", \\\"x\\\", \\\"x\\\", \\\"-\\\"]\\n  ],\\n  items: \\\"##&\\\"\\n}\\n```\\n\\n### Notes\\n- The starting position must not be changed in the new matrix.\\n- The `x` will overwite the symbol already present in the spot visited.\\n- In the returned string, items have to appear in the order you collected them. Watch out for the blank spots: they're not collectible!\\n- Don't worry about \\\"out of bounds\\\" cases, instruction strings contain only valid routes.\\n- Instruction strings will have different lengths.\",\"isHidden\":false,\"lab\":\"const grid1 =  \\t[ [\\\"-\\\", \\\"#\\\", \\\"-\\\", \\\"-\\\"],\\n\\t\\t\\t\\t\\t\\t\\t\\t  [\\\"$\\\", \\\"#\\\", \\\"@\\\", \\\"&\\\"],\\n\\t\\t\\t\\t\\t\\t\\t \\t  [\\\"-\\\", \\\"#\\\", \\\"$\\\", \\\"&\\\"],\\n\\t\\t\\t\\t\\t\\t\\t  \\t[\\\"$\\\", \\\"-\\\", \\\"&\\\", \\\"-\\\"] ],\\n\\t\\t\\tinpt1 =   \\\"lddr\\\",\\n\\t\\t\\t// Test #1\\n\\t\\t\\tansw1 =   {route:\\n\\t\\t\\t\\t\\t\\t\\t\\t[ [ '-', '#', '-', '-' ],\\n    \\t\\t\\t\\t\\t\\t\\t[ '$', 'x', '@', '&' ],\\n    \\t\\t\\t\\t\\t\\t\\t[ '-', 'x', '$', '&' ],\\n    \\t\\t\\t\\t\\t\\t\\t[ '$', 'x', 'x', '-' ] ],\\n\\t\\t\\t\\t\\t\\t\\t  items: '##&'},\\t\\n\\t\\t\\tgrid2 =  \\t[ [\\\"-\\\", \\\"-\\\", \\\"&\\\", \\\"-\\\"],\\n\\t\\t\\t\\t\\t\\t\\t\\t  [\\\"-\\\", \\\"-\\\", \\\"&\\\", \\\"-\\\"],\\n\\t\\t\\t\\t\\t\\t\\t \\t  [\\\"$\\\", \\\"#\\\", \\\"-\\\", \\\"#\\\"],\\n\\t\\t\\t\\t\\t\\t\\t  \\t[\\\"-\\\", \\\"@\\\", \\\"-\\\", \\\"$\\\"] ],\\n\\t\\t\\tinpt2 =   \\\"ulurrr\\\",\\n\\t\\t\\t// Test #2\\n\\t\\t\\tansw2 = \\t{route:\\n\\t\\t\\t\\t\\t\\t\\t  [ [ '-', '-', '&', '-' ],\\n\\t\\t\\t\\t\\t\\t\\t    [ 'x', 'x', 'x', 'x' ],\\n\\t\\t\\t\\t\\t\\t\\t\\t  [ 'x', 'x', '-', '#' ],\\n\\t\\t\\t\\t\\t\\t\\t\\t  [ '-', '@', '-', '$' ] ],\\n  \\t\\t\\t\\t\\t\\t\\titems: '#$&'},\\n\\t\\t\\tgrid3 =  \\t[ [\\\"-\\\", \\\"#\\\", \\\"&\\\", \\\"-\\\"],\\n\\t\\t\\t\\t\\t\\t\\t\\t  [\\\"-\\\", \\\"#\\\", \\\"-\\\", \\\"$\\\"],\\n\\t\\t\\t\\t\\t\\t\\t \\t  [\\\"@\\\", \\\"#\\\", \\\"&\\\", \\\"&\\\"],\\n\\t\\t\\t\\t\\t\\t\\t  \\t[\\\"-\\\", \\\"$\\\", \\\"-\\\", \\\"$\\\"] ],\\n\\t\\t\\tinpt3 =   \\\"druulurrrd\\\",\\n\\t\\t\\t// Test #3\\n\\t\\t\\tansw3 =\\t\\t{route:\\n\\t\\t\\t\\t\\t\\t\\t\\t[ [ 'x', 'x', 'x', 'x' ],\\n\\t\\t\\t\\t\\t\\t\\t\\t  [ 'x', 'x', '-', 'x' ],\\n\\t\\t\\t\\t\\t\\t\\t\\t  [ '@', 'x', '&', '&' ],\\n\\t\\t\\t\\t\\t\\t\\t\\t  [ 'x', 'x', '-', '$' ] ],\\n\\t\\t\\t\\t\\t\\t\\t  items: '$###&$'}\\n\\nTest.assertSimilar(routeTracer(grid1, inpt1), answ1)\\nTest.assertSimilar(routeTracer(grid2, inpt2), answ2)\\nTest.assertSimilar(routeTracer(grid3, inpt3), answ3)\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,3,2,0,3,3,4,3,3,3,4,2,1,4,4,2,2,2,4,3,2,4,3,2,2,4,4,3,2,3,2,3,4,4,4,4,1,2,0,4,3,3,4,2,4,4,3],\"rators\":[\"5Zq3aGdvh4LHBvnJL\",\"yjtdwc2AC4jA2RWtn\",\"zw7g7T8wE5R5CBhXr\",\"RE4Mm9T6Q9uygAxGS\",\"wR45YbZo35nkcJDqT\",\"mHT2bJb5SByfJ8yKS\",\"3awyiorYPgCqqP7Sr\",\"AasGs8AeX9Lcb9xJn\",\"65dbBZynphj53nXqA\",\"7gMSpBiibbLWzrtky\",\"tzMrYd2ZBTM4trK7a\",\"3oCaqpdk7TxMpmjKx\",\"EjPLq3QSJdGQFJdgW\",\"vewKwcMeGuk3p3MsN\",\"t6bXCX76smm7B3bEN\",\"zXBNhThj26Qg2QYbH\",\"gsXJaTS9eyEqvcaLD\",\"ZiGqT85fEthnNiQMn\",\"Tu22KsScr9mykuy8N\",\"FJsvM5yqKuK9yMk9P\",\"AgdM7GMsMBBsxyF4s\",\"PMq4KbGXQ53dRTYag\",\"n5wubRfh6zh8QRymN\",\"cRpaCxYRmGcN3Nsoj\",\"pd8dm7sWLW9cY6dYW\",\"frrtYBJaRni78g74E\",\"oJRbRjYJnWfsCdNHD\",\"dPM2Rk2iMkznyXNEt\",\"hbjAs4qr5Cb22qDai\",\"SxqAEMaYcE9Ps9eh6\",\"ZXRMRAJNP6eseLdbR\",\"jzYbGnnTmdTkuX9bC\",\"6muLXGwJ2hjpLoytA\",\"dWSd8Nccp6qqee8vW\",\"gxLZqrqkRJDgXTsMs\",\"Kc3SDafimwpZWrATJ\",\"TrLZWqifQpEasrTkt\",\"h4jFmtbFn92eA4649\",\"eFjGhq7C7bBKXjT6X\",\"M4vq8ATaS9Jg5X7iP\",\"XtZfZuXwcaivjtS3T\",\"LCZb2sr7TYn2EFFgx\",\"aEm3Wvj2rFYRL8Lrb\",\"Xk2g4CNFAnYcvxiSr\",\"4Xv87xmdSnpYhi8hz\",\"pGh7WykiPe26fHJYv\",\"Es4eX2stRpyoXeC7f\",\"mDWNyaaQ9hvPCRzSd\",\"8BJyXvRWcrvN3nttS\",\"oDtGiNqDMHmhHE3J8\"],\"total\":54,\"quality\":[5,5,5,5]},\"flags\":0},\"summary\":\"In this challenge, the work area will be a 4x4 matrix containing three types of characters:\\n\\n@  Your position.\\n-  A blank spot.\\n&, #, $  Collectible items.\\n\\nFrom your starting point in the grid, you have to trace a route placing a x in every spot visited, following a sequence of letters with the directions to take:\\n\\nl  Left\\nr  Right\\nu  Up\\nd  Down\\n\\ninput = \\\"luu\",\"tags\":[\"loops\",\"data_structures\",\"arrays\",\"formatting\"],\"timestamp\":{\"$date\":1573007578878},\"title\":\"Route Tracer\",\"quality\":5,\"family\":[{\"_id\":\"cZReb2PbqAcfRserf\",\"language\":\"javascript\"}]}}"]