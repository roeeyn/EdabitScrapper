a["{\"msg\":\"result\",\"id\":\"1893\",\"result\":{\"_id\":\"oPcmocNP9BDwbN43L\",\"author\":\"er0s\",\"authorId\":\"5Zq3aGdvh4LHBvnJL\",\"code\":\"function isEarlyBird(range, n) {\\n\\t\\n}\",\"difficulty\":2.697674418604651,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"uMWwGX4xQEfXHfn4X\",\"instructions\":\"A **Natural Number String Sequence** is a string containing all numbers, starting from 0, joined without spaces or other delimitators between them.\\n\\n```\\n\\\"01234567891011121314151617181920...\\\"\\n```\\n\\nIf you think of the sequence as an array, any number has a natural position index it occupies within a string long enough to contain it based on the real position in the numeric sequence. Looking at the example above, numbers from 0 to 9 are equals to their index position in the string; starting from 10, every number has a string natural index position different from itself (number 10 has a position of 10|11 because it has two digits, number 11 has a position of 12|13, and so on).\\n\\nWhen a number appears in the sequence **before** its natural position is an **Early Bird**. Suppose that we want to know if number 12 is an Early Bird in the above example sequence:\\n\\n```\\n01234567891011121314151617181920\\n_!!___________!!________________\\n```\\n\\nNatural position index of 12 is **|14, 15|** (after 11 and before 13 in the numeric sequence), but, if we look closely at the sequence, it appears before its natural position, at index **|1, 2|** (after 0 and before 3): 12 is then an Early Bird number (and the first to appear, also).\\n\\nYou are given two integers as parameters: `range` is the ending number of the string sequence to generate, and `n` is the number to analyze. You must implement a function that returns an array that contains the position indexes of `n` (with every position index being an array in turn), and the string `\\\"Early Bird!\\\"` as the last element of the array only if `n` is an Early Bird. If `n` it's not an Early Bird and the returned array has to contain just the array with its natural position index.\\n\\n### Examples\\n```\\nisEarlyBird(20, 14) ➞ [[18, 19]]\\n\\nisEarlyBird(20, 12) ➞ [[1, 2], [14, 15], \\\"Early Bird!\\\"]\\n\\nisEarlyBird(101, 101) ➞ [[10, 11, 12], [193, 194, 195], \\\"Early Bird!\\\"]\\n```\\n\\n### Notes\\n- In every given case, the range will be high enough to obtain the natural position of the number, don't worry about exceptions handling. \\n- The given number `n` will be greater than 9 for every case, as trivially every single-digit number appears at the same index in the numeric sequence and in the string sequence.\\n- The position indexes have to be in the order they appear in the string sequence.\\n- The string at the end of the array has to be present only if  `n` is an Early Bird.\\n- Check the **Resources** tab for more info on this sequence.\",\"isHidden\":false,\"lab\":\"Test.assertSimilar(isEarlyBird(20, 12), [[1, 2], [14, 15], 'Early Bird!'], \\\"Example in Instructions tab\\\")\\nTest.assertSimilar(isEarlyBird(20, 14), [[18, 19]])\\nTest.assertSimilar(isEarlyBird(101, 101), [[10, 11, 12], [193, 194, 195], 'Early Bird!'])\\nTest.assertSimilar(isEarlyBird(50, 34), [[3, 4], [58, 59], [77, 78], 'Early Bird!'])\\nTest.assertSimilar(isEarlyBird(212, 156), [[358, 359, 360]])\\nTest.assertSimilar(isEarlyBird(400, 240), [[610, 611, 612]])\\nTest.assertSimilar(isEarlyBird(900, 888), [[166, 167, 168], [2554, 2555, 2556], [2555, 2556, 2557], [2556, 2557, 2558], 'Early Bird!'])\\nTest.assertSimilar(isEarlyBird(1200, 745), [[1263, 1264, 1265], [1613, 1614, 1615], [2125, 2126, 2127], 'Early Bird!'])\\nTest.assertSimilar(isEarlyBird(2000, 666), [[122, 123, 124], [1888, 1889, 1890], [1889, 1890, 1891], [1890, 1891, 1892], [5555, 5556, 5557], 'Early Bird!'])\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,3,3,3,3,4,3,2,3,2,2,4,3,1,2,3,4,2,5,3,2,1,0,4,4,3,4,3,1,2,3,3,2,3,3,3,3,3,4],\"rators\":[\"5Zq3aGdvh4LHBvnJL\",\"yjtdwc2AC4jA2RWtn\",\"AasGs8AeX9Lcb9xJn\",\"FJsvM5yqKuK9yMk9P\",\"EWn8w8P3nNh7knatY\",\"GLtQXwTpmFc9e6BRh\",\"65dbBZynphj53nXqA\",\"c5EduxyLmBAwRX4nL\",\"ydEdzuCCZt4yny9Rq\",\"XFc7uGTzcLry23rTq\",\"7gMSpBiibbLWzrtky\",\"cRpaCxYRmGcN3Nsoj\",\"si79iiZMMKahcxR7u\",\"Hq97X7u2WsWGLa8fX\",\"EjPLq3QSJdGQFJdgW\",\"yQtGE2egvwYnNQSFc\",\"mMrajmhrTWdkyLk8E\",\"n5wubRfh6zh8QRymN\",\"dPM2Rk2iMkznyXNEt\",\"AnahAy6RmvegPhmbh\",\"h4jFmtbFn92eA4649\",\"vi7yWBWJ5BBXEkwR7\",\"a777e8chPvJkY3tKa\",\"FHBBZM5DMQi5ZjAxw\",\"8raviPK67KKxzQWcF\",\"rC7kdm3SsSX9udEQk\",\"aEm3Wvj2rFYRL8Lrb\",\"ZcJm2kuqJnN3CXFaR\",\"pGh7WykiPe26fHJYv\",\"wXaZcABvM87XBabxn\",\"EjYWHaWnYBaKn2xpi\",\"M4vq8ATaS9Jg5X7iP\",\"4XxJxQkB5mNTLY2qk\",\"THoTJTpHE2D4TGWAJ\",\"CNc6rmwhbxkxEhHAp\",\"Xk2g4CNFAnYcvxiSr\",\"pWJWQDhqzDSmfaFam\",\"s678Wirfor5uYL5T6\",\"Yp7uvStL97cC9fKkY\",\"DPi9QGLctq2y76KuE\",\"RE4Mm9T6Q9uygAxGS\",\"oDtGiNqDMHmhHE3J8\"],\"total\":47,\"quality\":[5,5,5,5,5]},\"flags\":0},\"subscribers\":[\"5Zq3aGdvh4LHBvnJL\"],\"summary\":\"A Natural Number String Sequence is a string containing all numbers, starting from 0, joined without spaces or other delimitators between them.\\n\\n\\\"01234567891011121314151617181920...\\\"\\n\\nIf you think of the sequence as an array, any number has a natural position index it occupies within a string long enough to contain it based on the real position in the numeric\",\"tags\":[\"numbers\",\"strings\",\"arrays\",\"regex\"],\"timestamp\":{\"$date\":1572628773216},\"title\":\"Early Birds\",\"quality\":5,\"family\":[{\"_id\":\"oPcmocNP9BDwbN43L\",\"language\":\"javascript\"},{\"_id\":\"hCAStny5sJwYP3evS\",\"language\":\"python3\"},{\"_id\":\"FRoMcXz2WQZnsBfFL\",\"language\":\"ruby\"}]}}"]