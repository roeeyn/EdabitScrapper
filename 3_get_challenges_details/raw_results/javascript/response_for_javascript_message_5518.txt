a["{\"msg\":\"result\",\"id\":\"1509\",\"result\":{\"_id\":\"Sdj4jE7tHuoiyNKFv\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"function bwTransform(text) {\\n\\t\\n}\",\"difficulty\":2.2,\"familyId\":\"tiTqzjMKfEuMFqQE4\",\"instructions\":\"Burrows-Wheeler transform (BWT) is an algorithm which is used in data compression. Given a string `text`, BWT of `text` is a modified version of the string with same length as `text`. It can then be used to efficiently find substrings of `text` (which won't be covered here). We will just find the BWT of `text`.\\n\\n1. Build Burrows-Wheeler-Matrix (BWM) containing all rotations of `text`.\\n2. Sort BWM lexicographically ($ < a < b < ... < z).\\n3. BWT is the last coloumn of BWM and gets returned.\\n\\n```\\n// Example with text = \\\"banana$\\\"\\n\\n// BWM (all rotations of text):\\nbanana$\\nanana$b\\nnana$ba\\nana$ban\\nna$bana\\na$banan\\n$banana\\n\\n// BWM sorted lexicographically:\\n$banana\\na$banan\\nana$ban\\nanana$b\\nbanana$\\nna$bana\\nnana$ba\\n\\n// BWT (last coloumn of BWM):\\nannb$aa\\n```\\n\\n### Examples\\n```\\nbwTransform(\\\"banana$\\\") ➞ \\\"annb$aa\\\"\\n\\nbwTransform(\\\"mississippi$\\\") ➞ \\\"ipssm$pissii\\\"\\n\\nbwTransform(\\\"acccgtttgtttcaatagatccatcaa$\\\") ➞ \\\"aacc$tacgttctaccatcaatatttgg\\\"\\n```\\n\\n### Notes\\nConsider `$` as the terminator character at the end of every input `text`.\",\"isHidden\":false,\"lab\":\"Test.assertEquals(bwTransform(\\\"banana$\\\"), \\\"annb$aa\\\")\\nTest.assertEquals(bwTransform(\\\"mississippi$\\\"), \\\"ipssm$pissii\\\")\\nTest.assertEquals(bwTransform(\\\"abaaba$\\\"), \\\"abba$aa\\\")\\nTest.assertEquals(bwTransform(\\\"acccgtttgtttcaatagatccatcaa$\\\"), \\\"aacc$tacgttctaccatcaatatttgg\\\")\",\"language\":\"javascript\",\"summary\":\"Burrows-Wheeler transform (BWT) is an algorithm which is used in data compression. Given a string text, BWT of text is a modified version of the string with same length as text. It can then be used to efficiently find substrings of text (which won't be covered here). We will just find the BWT of text.\\n\\nBuild Burrows-Wheeler-Matrix (BWM) containing all rotation\",\"tags\":[\"cryptography\",\"formatting\",\"strings\",\"sorting\"],\"timestamp\":{\"$date\":1589761910362},\"title\":\"Burrows-Wheeler Transform\",\"stats\":{\"completed\":{\"total\":28,\"ratings\":[2,2,2,2,2,1,2,2,2,3,2,3,3,2,3,3,2,3,2,2,1,3,0,2,5,2,0,3,2,3],\"rators\":[\"yjtdwc2AC4jA2RWtn\",\"RE4Mm9T6Q9uygAxGS\",\"KRXv3iEyDLbKEENLA\",\"5NGxHLcQ8Af2RJ4TN\",\"GCsLzWAhLvniQqR3J\",\"q9vSxiaByRaNeYxJh\",\"sBcsrC5paZm9nxjot\",\"QMq9dcvgpyNK6RAze\",\"FJsvM5yqKuK9yMk9P\",\"a777e8chPvJkY3tKa\",\"PdrTekDKnSi38xbLa\",\"mHT2bJb5SByfJ8yKS\",\"7xZdHDypd44S3YSjx\",\"n5wubRfh6zh8QRymN\",\"65dbBZynphj53nXqA\",\"aEm3Wvj2rFYRL8Lrb\",\"buX4mCQhtXCfBjeno\",\"kp2ZbCewZJAbfd7xv\",\"bXaGdBM8FBLHf7N6Y\",\"QRv96jmNaYsWkxQEG\",\"CNc6rmwhbxkxEhHAp\",\"8BJyXvRWcrvN3nttS\",\"u9cRf5kvtpRB5ffB3\",\"g4NCSxxHqHCGMpWwT\",\"AFfw7cGg83uYk2Miy\",\"Ya3eHgs8x3unZRLpb\",\"oDtGiNqDMHmhHE3J8\"],\"quality\":[5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":5,\"family\":[{\"_id\":\"dXXwkbxYu5JaPkzb3\",\"language\":\"cpp\"},{\"_id\":\"Sdj4jE7tHuoiyNKFv\",\"language\":\"javascript\"},{\"_id\":\"aQ3mnvDmcaTJfSbZh\",\"language\":\"python3\"},{\"_id\":\"ZZzhLgbBuaqQTjSHa\",\"language\":\"ruby\"},{\"_id\":\"MLRunxj3a6Ks6Avay\",\"language\":\"swift\"}]}}"]