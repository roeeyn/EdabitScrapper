a["{\"msg\":\"result\",\"id\":\"2422\",\"result\":{\"_id\":\"PKfAvKeg9a8c9xAcF\",\"author\":\"vinays84\",\"authorId\":\"TY4zJ4MXnvEngsHkz\",\"code\":\"function kenKenHelper(cage, target, operator) {\\n\\t\\n}\",\"difficulty\":4.777777777777778,\"quality\":0,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"fyKvioFN4SKFPXPei\",\"instructions\":\"Ken-Ken is a puzzle game similar to Sudoku. It consists board filled with digits 1-9 and can have no two identical digits in the same row or column. The board is then split into jigsaw-like shapes (cages), each with a target number and mathematical operator, for which the digits that fill it (order doesn't matter) must match.\\n\\n- For addition `+`, the digits must sum to `target`.\\n- For multiplication `*`, the digits must multiply to `target`.\\n- For subtraction `-`, the digits must have a difference of `target`. Only cages of size 2 are allowed for subtraction.\\n- For division `/`, the digits must have a quotient of `target`. Only cages of size 2 are allowed for division.\\n- For no operator `\\\"\\\"`, the digits can fill it for any of the operators. If a cage has more than 2 cells, it can only have operators of `+` or `*`.\\n\\nFor example, with and `operator` of `/` and `target` of `4`, with a `2x1 cage`, possible digits to fill it are `2` and `8`.\\n\\nThe `cage` shape is indicated by `1`'s. Provided a `cage`, `target`, and `operator`, your goal is to return an array of all possible digit combinations (as a JSON string).\\n\\n### Example\\n```\\ncage = [\\n  [0, 1],\\n  [1, 1]\\n]\\n```\\n\\n`target = 24`, and `operator = \\\"*\\\"`, the output should be:\\n\\n```\\n\\\"[[1,3,8],[1,4,6],[2,2,6],[2,3,4]]\\\"\\n```\\n\\n### Inputs\\n- cage (`[][]integer`)\\n\\nThe shape of the cage indicated by `1`'s and `0`'s. `1` indicates a cell of the cage.\\n\\n*Guaranteed constraints:*\\n\\n- `1 ≤ cage.length ≤ 3`\\n- `1 ≤ cage[i].length ≤ 6`\\n- `2 ≤ cage size (# of 1's) ≤ 8`\\n\\n- target (`integer`)\\n- operator (`string`)\\n\\nOperator will be `+`, `-`, `*`, `/` or `\\\"\\\"`\\n\\nTo match the tests expected output, sort both the inner and outer arrays and then return as a JSON string.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assertEquals(kenKenHelper([[0,1],[1,1]],24,\\\"*\\\"),'[[1,3,8],[1,4,6],[2,2,6],[2,3,4]]')\\nTest.assertEquals(kenKenHelper([[1,1]],3,\\\"/\\\"),'[[1,3],[2,6],[3,9]]')\\nTest.assertEquals(kenKenHelper([[1,1]],4,\\\"-\\\"),'[[1,5],[2,6],[3,7],[4,8],[5,9]]')\\nTest.assertEquals(kenKenHelper([[1,1,1]],6,\\\"\\\"),'[[1,2,3]]')\\nTest.assertEquals(kenKenHelper([[1,0],[1,1]],8,\\\"\\\"),'[[1,1,6],[1,1,8],[1,2,4],[1,2,5],[1,3,4],[2,2,4],[2,3,3]]')\\nTest.assertEquals(kenKenHelper([[1,1,1],[1,0,0]],26,\\\"*\\\"),'[]')\\nTest.assertEquals(kenKenHelper([[1,1,1],[0,1,0]],252,\\\"\\\"),'[[1,4,7,9],[1,6,6,7],[2,2,7,9],[2,3,6,7],[3,3,4,7]]')\\nTest.assertEquals(kenKenHelper([[1,1,1,1,1]],32,\\\"\\\"),'[[2,6,7,8,9],[3,5,7,8,9],[4,5,6,8,9]]')\\nTest.assertEquals(kenKenHelper([[1,1,1],[1,0,0]],32,\\\"\\\"),'[[1,1,4,8],[1,2,2,8],[1,2,4,4],[6,8,9,9],[7,8,8,9]]')\\nTest.assertEquals(kenKenHelper([[0,0,0,0,1],[1,1,1,1,1]],6804,\\\"*\\\"),'[[1,2,6,7,9,9],[1,3,4,7,9,9],[1,3,6,6,7,9],[2,3,3,6,7,9]]')\\nTest.assertEquals(kenKenHelper([[1,1,0,0,0,1],[0,1,1,1,1,1]],56,\\\"+\\\"),'[[2,6,7,7,8,8,9,9],[3,5,7,7,8,8,9,9],[3,6,6,7,8,8,9,9],[4,5,6,7,8,8,9,9],[4,6,6,7,7,8,9,9],[5,5,6,7,7,8,9,9],[5,6,6,7,7,8,8,9]]')\\nTest.assertEquals(kenKenHelper([[1,1,0],[0,1,0],[0,1,1]],40,\\\"\\\"),'[[1,1,1,5,8],[1,1,2,4,5],[1,2,2,2,5],[5,8,9,9,9],[6,7,9,9,9],[6,8,8,9,9],[7,7,8,9,9],[7,8,8,8,9]]')\\nTest.assertEquals(kenKenHelper([[1,1,1],[1,0,1],[1,0,1]],181440,\\\"*\\\"),'[[1,5,7,8,8,9,9],[2,4,5,7,8,9,9],[2,5,6,6,7,8,9],[3,3,5,7,8,8,9],[3,4,5,6,7,8,9],[3,5,6,6,6,7,8],[4,4,4,5,7,9,9],[4,4,5,6,6,7,9]]')\\nTest.assertEquals(kenKenHelper([[1,1,1],[1,0,1],[1,1,1]],61,\\\"+\\\"),'[[3,7,8,8,8,9,9,9],[4,6,8,8,8,9,9,9],[4,7,7,8,8,9,9,9],[5,5,8,8,8,9,9,9],[5,6,7,8,8,9,9,9],[5,7,7,7,8,9,9,9],[5,7,7,8,8,8,9,9],[6,6,6,8,8,9,9,9],[6,6,7,7,8,9,9,9],[6,6,7,8,8,8,9,9],[6,7,7,7,8,8,9,9]]')\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,5,5,3,5],\"quality\":[],\"rators\":[\"yjtdwc2AC4jA2RWtn\",\"TY4zJ4MXnvEngsHkz\",\"va3fDAQm4sqSMoy3R\",\"mDWNyaaQ9hvPCRzSd\"],\"total\":6},\"flags\":1},\"summary\":\"Ken-Ken is a puzzle game similar to Sudoku. It consists board filled with digits 1-9 and can have no two identical digits in the same row or column. The board is then split into jigsaw-like shapes (cages), each with a target number and mathematical operator, for which the digits that fill it (order doesn't matter) must match.\\n\\nFor addition +, the digits must s\",\"tags\":[\"algorithms\",\"arrays\",\"logic\",\"math\",\"numbers\"],\"timestamp\":{\"$date\":1601833929446},\"title\":\"Ken-Ken Helper\",\"family\":[{\"_id\":\"rcxw6eZsuXb4tGXAY\",\"language\":\"cpp\"},{\"_id\":\"PKfAvKeg9a8c9xAcF\",\"language\":\"javascript\"},{\"_id\":\"nNgzWWhy2zqEv6vZM\",\"language\":\"python3\"},{\"_id\":\"Wf25XxTNrN3fR3oBX\",\"language\":\"ruby\"}]}}"]