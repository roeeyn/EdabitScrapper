a["{\"msg\":\"result\",\"id\":\"1250\",\"result\":{\"_id\":\"uQAYSdC3HFtGp3NY8\",\"author\":\"Jeroen Ndh\",\"authorId\":\"75NY7vqimaATzRdAX\",\"code\":\"function fire(matrix, coordinates) {\\n\\t\\n}\",\"difficulty\":2.078125,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"3GSP875bLLpgFF4zH\",\"instructions\":\"Remember the game Battleship? Ships are floating in a matrix. You have to fire torpedos at their suspected coordinates, to try and hit them.\\n\\nCreate a function that takes an array of arrays (matrix) and a coordinate as a string. If the coordinate contains only water  `\\\" . \\\"`, return `\\\"splash\\\"` and if the coordinate contains a ship `\\\" * \\\"`, return `\\\"BOOM\\\"`.\\n\\nInstruction text contains two blank spaces between quotation marks; the code/test does not. See examples below.\\n\\n### Examples\\n```\\n[\\n  [\\\".\\\", \\\".\\\", \\\".\\\", \\\"*\\\", \\\"*\\\"],\\n  [\\\".\\\", \\\"*\\\", \\\".\\\", \\\".\\\", \\\".\\\"],\\n  [\\\".\\\", \\\"*\\\", \\\".\\\", \\\".\\\", \\\".\\\"],\\n  [\\\".\\\", \\\"*\\\", \\\".\\\", \\\".\\\", \\\".\\\"],\\n  [\\\".\\\", \\\".\\\", \\\"*\\\", \\\"*\\\", \\\".\\\"],\\n]\\n\\nfire(matrix, \\\"A1\\\") ➞ \\\"splash\\\"\\n\\nfire(matrix, \\\"A4\\\") ➞ \\\"BOOM\\\"\\n\\nfire(matrix, \\\"D2\\\") ➞ \\\"BOOM\\\"\\n```\\n\\n### Notes\\n- The provided matrix is always a square.\\n- The provided matrix will not be larger than 5 \\\\* 5 ( A1 \\\\* E5).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assertEquals(fire([\\n\\t[\\\".\\\", \\\".\\\", \\\".\\\", \\\"*\\\", \\\"*\\\"],\\n\\t[\\\".\\\", \\\"*\\\", \\\".\\\", \\\".\\\", \\\".\\\"],\\n\\t[\\\".\\\", \\\"*\\\", \\\".\\\", \\\".\\\", \\\".\\\"],\\n\\t[\\\".\\\", \\\"*\\\", \\\".\\\", \\\".\\\", \\\".\\\"],\\n\\t[\\\".\\\", \\\".\\\", \\\"*\\\", \\\"*\\\", \\\".\\\"],\\n],\\\"A1\\\"), \\\"splash\\\", \\\"A1: target first nested array, first element\\\")\\n\\nTest.assertEquals(fire([\\n\\t[\\\".\\\", \\\".\\\", \\\".\\\", \\\"*\\\", \\\"*\\\"],\\n\\t[\\\".\\\", \\\"*\\\", \\\".\\\", \\\".\\\", \\\".\\\"],\\n\\t[\\\".\\\", \\\"*\\\", \\\".\\\", \\\".\\\", \\\".\\\"],\\n\\t[\\\".\\\", \\\"*\\\", \\\".\\\", \\\".\\\", \\\".\\\"],\\n\\t[\\\".\\\", \\\".\\\", \\\"*\\\", \\\"*\\\", \\\".\\\"],\\n],\\\"C2\\\"), \\\"BOOM\\\", \\\"C2: target third nested array, second element\\\")\\n\\nTest.assertEquals(fire([\\n\\t[\\\".\\\", \\\".\\\"],\\n\\t[\\\"*\\\", \\\"*\\\"]\\n],\\\"B1\\\"), \\\"BOOM\\\")\\n\\nTest.assertEquals(fire([\\n\\t[\\\".\\\", \\\".\\\"],\\n\\t[\\\"*\\\", \\\"*\\\"]\\n],\\\"A2\\\"), \\\"splash\\\")\\n\\nTest.assertEquals(fire([\\n\\t[\\\"*\\\", \\\".\\\", \\\".\\\"],\\n\\t[\\\".\\\", \\\".\\\", \\\".\\\"],\\n\\t[\\\".\\\", \\\"*\\\", \\\"*\\\"],\\n],\\\"C3\\\"), \\\"BOOM\\\")\\n\\nTest.assertEquals(fire([\\n\\t[\\\"*\\\", \\\".\\\", \\\".\\\"],\\n\\t[\\\".\\\", \\\".\\\", \\\".\\\"],\\n\\t[\\\".\\\", \\\"*\\\", \\\"*\\\"],\\n],\\\"A3\\\"), \\\"splash\\\")\\n\\nTest.assertEquals(fire([\\n\\t[\\\".\\\", \\\".\\\", \\\".\\\", \\\".\\\"],\\n\\t[\\\".\\\", \\\"*\\\", \\\"*\\\", \\\".\\\"],\\n\\t[\\\".\\\", \\\".\\\", \\\".\\\", \\\".\\\"],\\n\\t[\\\".\\\", \\\".\\\", \\\".\\\", \\\".\\\"],\\n],\\\"B3\\\"), \\\"BOOM\\\")\\n\\nTest.assertEquals(fire([\\n\\t[\\\".\\\", \\\".\\\", \\\".\\\", \\\".\\\"],\\n\\t[\\\".\\\", \\\"*\\\", \\\"*\\\", \\\".\\\"],\\n\\t[\\\".\\\", \\\".\\\", \\\".\\\", \\\".\\\"],\\n\\t[\\\".\\\", \\\".\\\", \\\".\\\", \\\".\\\"],\\n],\\\"B4\\\"), \\\"splash\\\")\\n\\nTest.assertEquals(fire([\\n\\t[\\\"*\\\"]\\n],\\\"A1\\\"), \\\"BOOM\\\")\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,2,1,3,3,2,2,3,0,5,2,1,3,1,0,0,3,2,2,2,2,3,3,2,0,3,2,2,3,3,3,2,2,2,3,3,2,2,0,2,3,2,1,3,2,2,0,0,2,1,3,3,5,2,3,2,2,1,3],\"rators\":[\"75NY7vqimaATzRdAX\",\"ttuGK7od8simjgmCJ\",\"n5wubRfh6zh8QRymN\",\"RzmXx77rzobF7Gtsj\",\"4xdSc245S8vAvgDK9\",\"Kk3jdrvAbPENkw5Ft\",\"mHT2bJb5SByfJ8yKS\",\"buX4mCQhtXCfBjeno\",\"yjtdwc2AC4jA2RWtn\",\"Nb6LYPoQP6KJZt8mz\",\"pwewwLqCKnaXCTHun\",\"aEm3Wvj2rFYRL8Lrb\",\"v2w9GN4jHP2fgYdeE\",\"QRv96jmNaYsWkxQEG\",\"6BpBQnSGhzgvhXrEy\",\"477x24BHagvCWeCsS\",\"pd8dm7sWLW9cY6dYW\",\"TpdJJWZ8XNtRCLFes\",\"8BJyXvRWcrvN3nttS\",\"tAF9Gf6PiGogbZuWs\",\"BdvdJYwHZr7JpkHsn\",\"bX6tpTCjwoi6XMMbK\",\"CNc6rmwhbxkxEhHAp\",\"kp2ZbCewZJAbfd7xv\",\"ct42f2gGpMXSd9hXM\",\"zw7g7T8wE5R5CBhXr\",\"qWR7eXxBiNee22A5u\",\"g4NCSxxHqHCGMpWwT\",\"yWSkPDughkerk3JYv\",\"rzFnGjc339rPB8bSd\",\"N82kEBvpFE5FjbHrk\",\"8Z3dkvWBqtrMEE48N\",\"WdLW2YLhL2kmSqKgK\",\"i49enk79wAajcgi7a\",\"E6DBfkTgHuPsDWdG8\",\"nCd4XfGyDThj8uHzu\",\"q2tzvkrLASvSjkek9\",\"p8HHykjPoXxSLZuQQ\",\"5NGxHLcQ8Af2RJ4TN\",\"q4otBYDcDSipXGbLe\",\"e9Cknxbx6o7Nb6REs\",\"7tSTYbfyZ3uNWoeAt\",\"u9cRf5kvtpRB5ffB3\",\"9oPfGpc74rAstazB6\",\"2ZabBuAKvgS9qTSM7\",\"4XxJxQkB5mNTLY2qk\",\"dd8jo9omAn583sZCj\",\"ThGTEw4SiMApKtxik\",\"6wcsoqgMKfZ7xjSgn\",\"omn98QP6uBd923Azp\",\"mDWNyaaQ9hvPCRzSd\",\"f3RAbWvE6uESq7KE5\",\"FJsvM5yqKuK9yMk9P\",\"sS72aKpQYfYrjY5pC\",\"Es4eX2stRpyoXeC7f\",\"cosoYtzKo6pKgrTJZ\",\"M7hvr8q4QKXkK8PsH\",\"Y2TigFPEeADd2Q4Qe\",\"HKnRzsKdp4epaPXpb\",\"nWND4LmgZTftyB8sN\",\"YfWyvMhdY3xcGrK5R\",\"8s5Bdrn7RTga7DL6x\",\"xges5rijESfvNfJ7w\",\"hcm8sL8mNJTSfTdgE\",\"MT26yxj3YX95DsyLj\",\"Ms4ubMhq5tjsAeMLF\",\"eKSJgCaiy4ReJWXTg\",\"pShbXAiaW3NCvmjd3\",\"5hHf2e9zimbmxMqqF\",\"DPi9QGLctq2y76KuE\",\"M4vq8ATaS9Jg5X7iP\",\"PytNZK9mNiRiZxPrm\",\"pHp9XWwL6QBTRSWPY\",\"YMYtNJvfTkuGnNwpX\",\"ugcyR9E4YECBD6rez\",\"2Qk2mFu9HBFzrB24i\",\"Xk2g4CNFAnYcvxiSr\",\"RtPhDuwmvWNHiBxmG\",\"fjBB8rBHeCeMGELvW\",\"Y42BDNy2eiTYNuMJp\",\"AFfw7cGg83uYk2Miy\",\"2wRYspBSmpmPEcxuE\",\"NGvCPuMiAP3xrRLfB\",\"ZcJm2kuqJnN3CXFaR\",\"3CznH547ZcoitQ8No\",\"ftXLsTaA7yHmhuEsY\",\"wo4cpen33NYFHNca7\",\"9gEWz76H8KmhN4yJj\",\"Ya3eHgs8x3unZRLpb\",\"p5ZshR8zhTqmdhKDc\",\"RoGGD5cpHb4ftdLDv\",\"QGjY3hgPYPMmMjc7j\",\"nkH3HfJXLMNcBMM79\",\"QvEXmSEo3ANp3yPyH\",\"pMxDFFGrSfHCQAW2k\",\"RnY25enEBE8T9P5GS\",\"Yp7uvStL97cC9fKkY\",\"9Pzg45NEiRXhLtLh3\",\"iQ7LDrEn8mtYTCAfC\",\"jyoLggHk8xQKZuoQC\",\"oDtGiNqDMHmhHE3J8\",\"z5ebtimXwFFJdYxoa\",\"osMsiScntRkWiw4gw\",\"8xaTLiFGg4mfPbhwG\",\"5QN8R22z43SrwoHDz\",\"qw8ErNhhJcFQeQDNf\"],\"total\":112,\"quality\":[5,5,5,5,5,5,5,5,3,5,3,5,5,5,5,5,3,5,5,5,5,5,3,5,5,5,5,1,5,5,5,3,5,4,5,5,5,5,2,5,1,5,5,5,5,5,5]},\"flags\":0},\"summary\":\"Remember the game Battleship? Ships are floating in a matrix. You have to fire torpedos at their suspected coordinates, to try and hit them.\\n\\nCreate a function that takes an array of arrays (matrix) and a coordinate as a string. If the coordinate contains only water  \\\" . \\\", return \\\"splash\\\" and if the coordinate contains a ship \\\" * \\\", return \\\"BOOM\\\".\\n\\nInstructio\",\"tags\":[\"games\",\"arrays\",\"language_fundamentals\",\"validation\"],\"timestamp\":{\"$date\":1598516563585},\"title\":\"You Sunk My Battleship!\",\"quality\":4.531914893617022,\"family\":[{\"_id\":\"fRvgzR5krQWXKKMqq\",\"language\":\"cpp\"},{\"_id\":\"uQAYSdC3HFtGp3NY8\",\"language\":\"javascript\"},{\"_id\":\"cGqjxKhNqZPZ76zac\",\"language\":\"python3\"},{\"_id\":\"NBo7xcKqiDmzHsceF\",\"language\":\"ruby\"}]}}"]