a["{\"msg\":\"result\",\"id\":\"855\",\"result\":{\"_id\":\"8ZQmveyijozCKFGTB\",\"author\":\"Mubashir Hassan \",\"authorId\":\"T6iBEE2jp7f7iEF2P\",\"code\":\"function calculateArrowhead(arr) {\\n\\t\\n}\",\"difficulty\":1.588785046728972,\"familyId\":\"o4t47QssTTndxzMq8\",\"instructions\":\"In a board game, a player may pick up a card with several left or right facing arrows, with the number of arrows indicating the number of tiles to move. The player should move either left or right, depending on the arrow's direction.\\n\\nGiven an array of the arrows contained on a player's cards, return a singular string of arrowheads that are equivalent to all of the arrowheads.\\n\\n### Worked Example\\n```\\ncalculateArrowhead([\\\">>\\\", \\\"<<\\\", \\\"<<<\\\"]) ➞ \\\"<<<\\\"\\n// >> means to move 2 places right\\n// << means to move 2 places left (cancelling out >>)\\n// <<< means to move a further 3 places left\\n// overall, the movement can be written as <<<\\n```\\n\\n### Examples\\n```\\ncalculateArrowhead([\\\">>>>\\\", \\\"<\\\", \\\"<\\\", \\\"<\\\"]) ➞ \\\">\\\"\\n\\ncalculateArrowhead([\\\">\\\", \\\"<\\\", \\\">>\\\", \\\"<\\\", \\\"<<<\\\"]) ➞ \\\"<<\\\"\\n\\ncalculateArrowhead([\\\">>>\\\", \\\"<<<\\\"]) ➞ \\\"\\\"\\n```\\n\\n### Notes\\nReturn an **empty string** if all the arrowheads cancel out.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assertEquals(calculateArrowhead([\\\">>>>\\\", \\\"<\\\", \\\"<\\\", \\\"<\\\"]), \\\">\\\")\\nTest.assertEquals(calculateArrowhead([\\\">\\\", \\\"<\\\", \\\">>\\\", \\\"<\\\", \\\"<<<\\\"]), \\\"<<\\\")\\nTest.assertEquals(calculateArrowhead([\\\">>>\\\", \\\"<<<\\\"]), \\\"\\\")\\nTest.assertEquals(calculateArrowhead([\\\">>\\\", \\\"<<\\\", \\\"<<<\\\"]), \\\"<<<\\\")\\nTest.assertEquals(calculateArrowhead([\\\">\\\", \\\">>>>>\\\", \\\">>>>\\\", \\\">>>>>>>\\\", \\\">>>>>>>>\\\", \\\">>>>\\\", \\\">>>>>>>>\\\"]), \\\">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\\\")\\nTest.assertEquals(calculateArrowhead([\\\"<\\\", \\\">>>>>>\\\", \\\"<<<<<<<<\\\", \\\"<<<<<<<<<<\\\", \\\">>>>>>>\\\", \\\">>>\\\"]), \\\"<<<\\\")\\nTest.assertEquals(calculateArrowhead([\\\"<<<<\\\", \\\">>>>>\\\"]), \\\">\\\")\\nTest.assertEquals(calculateArrowhead([\\\"<<<<<<<<<\\\", \\\"<<<<\\\", \\\">>>\\\", \\\">>>>>>>>\\\", \\\">>>>>>>\\\", \\\"<<<<<\\\"]), \\\"\\\")\\nTest.assertEquals(calculateArrowhead([\\\">>>>>>>>>>\\\", \\\"<<\\\", \\\">>>>>>>>>>\\\"]), \\\">>>>>>>>>>>>>>>>>>\\\")\\nTest.assertEquals(calculateArrowhead([\\\">\\\", \\\"<<<\\\", \\\">>>>>>>>>>\\\", \\\">>>>>\\\"]), \\\">>>>>>>>>>>>>\\\")\\nTest.assertEquals(calculateArrowhead([\\\"<<<<<<<<<\\\", \\\">>>\\\", \\\"<<<<<\\\"]), \\\"<<<<<<<<<<<\\\")\\nTest.assertEquals(calculateArrowhead([\\\">\\\", \\\"<<\\\"]), \\\"<\\\")\\nTest.assertEquals(calculateArrowhead([\\\"<<<\\\", \\\"<<\\\", \\\"<\\\"]), \\\"<<<<<<\\\")\\nTest.assertEquals(calculateArrowhead([\\\"<<\\\", \\\"<<<<<<<\\\", \\\">>>>>>>>>\\\"]), \\\"\\\")\\nTest.assertEquals(calculateArrowhead([\\\">>>>>\\\", \\\">>>>>>>>\\\", \\\"<<<<<<\\\", \\\"<<<<\\\", \\\"<<<<<<<\\\"]), \\\"<<<<\\\")\\nTest.assertEquals(calculateArrowhead([\\\">>\\\", \\\"<<<<<<<<<\\\", \\\">>>>>>\\\", \\\"<<<<<\\\"]), \\\"<<<<<<\\\")\\nTest.assertEquals(calculateArrowhead([\\\">>>>>>>>>>\\\", \\\">>>\\\", \\\"<\\\"]), \\\">>>>>>>>>>>>\\\")\\nTest.assertEquals(calculateArrowhead([\\\"<<\\\", \\\">>>>>>\\\", \\\"<<\\\", \\\">\\\", \\\">>>\\\", \\\"<<<\\\"]), \\\">>>\\\")\\nTest.assertEquals(calculateArrowhead([\\\">\\\", \\\">>>>>>>>>>\\\", \\\"<\\\", \\\"<<\\\"]), \\\">>>>>>>>\\\")\\nTest.assertEquals(calculateArrowhead([\\\"<<<<\\\", \\\">>>>\\\", \\\">>\\\", \\\"<<<<<<<<<\\\"]), \\\"<<<<<<<\\\")\\nTest.assertEquals(calculateArrowhead([\\\">>>>>>>\\\", \\\">>\\\", \\\"<<<<<<<<<<\\\", \\\">>>>\\\", \\\">>>>>>>>>\\\", \\\"<<\\\", \\\">>>>>>>>>\\\"]), \\\">>>>>>>>>>>>>>>>>>>\\\")\\nTest.assertEquals(calculateArrowhead([\\\"<<<<<<<<<\\\", \\\">>>>>>\\\", \\\">>\\\", \\\"<<<<<<<\\\"]), \\\"<<<<<<<<\\\")\\nTest.assertEquals(calculateArrowhead([\\\">>>\\\", \\\"<<<\\\", \\\">>>>>>>>>>\\\", \\\">>\\\", \\\">>>\\\", \\\"<<\\\", \\\"<<<<<<\\\"]), \\\">>>>>>>\\\")\\nTest.assertEquals(calculateArrowhead([\\\">>>>>>>>>\\\", \\\">>>>>>>>>\\\", \\\"<<<<<\\\", \\\">>>>>>>>\\\", \\\">>>>>>>\\\"]), \\\">>>>>>>>>>>>>>>>>>>>>>>>>>>>\\\")\",\"language\":\"javascript\",\"quality\":4.659574468085107,\"summary\":\"In a board game, a player may pick up a card with several left or right facing arrows, with the number of arrows indicating the number of tiles to move. The player should move either left or right, depending on the arrow's direction.\\n\\nGiven an array of the arrows contained on a player's cards, return a singular string of arrowheads that are equivalent to all o\",\"tags\":[\"strings\",\"algorithms\",\"arrays\"],\"timestamp\":{\"$date\":1605673543591},\"title\":\"Back and Forth\",\"stats\":{\"completed\":{\"total\":153,\"ratings\":[1,1,1,1,1,1,1,1,0,0,2,1,0,0,2,2,0,0,2,2,1,2,2,2,2,4,1,2,2,1,1,0,1,5,2,1,2,1,3,1,1,2,2,2,1,0,2,0,2,0,2,1,2,1,3,2,1,2,2,2,1,2,2,2,2,3,2,2,1,2,1,1,2,2,2,2,2,2,2,2,3,1,2,2,1,1,5,2,1,2,2,1,2,1,2,1,2,2,2,3,2,2,2,1,2,1,0],\"quality\":[5,5,3,3,3,5,5,5,5,5,5,5,5,5,5,5,5,4,4,5,5,5,5,5,5,5,5,5,5,5,5,4,4,5,4,5,5,5,5,5,4,4,5,2,5,5,5],\"rators\":[\"ttuGK7od8simjgmCJ\",\"BjJhatTBaTWm3ZhCt\",\"CyFfrFHjA7sLQohY9\",\"g4NCSxxHqHCGMpWwT\",\"AFfw7cGg83uYk2Miy\",\"CjbNeQBmSTnZnfzSv\",\"z5ebtimXwFFJdYxoa\",\"LobHjKEdgWi5xfqzj\",\"hA2xt2ouuEr5xrfEh\",\"5hHf2e9zimbmxMqqF\",\"AeZfR5dt45GYsMt8L\",\"QRv96jmNaYsWkxQEG\",\"TTsiKukYnTL6yenZs\",\"oMKKtKDHntiFhTGTH\",\"m6qKkBY4aPWziyJTj\",\"MvW4Kqnf3ee9QBGR9\",\"HGM2DByMj3omuQoSK\",\"RE4Mm9T6Q9uygAxGS\",\"u9cRf5kvtpRB5ffB3\",\"Yp7uvStL97cC9fKkY\",\"49Sy4J2KvNx66geAe\",\"68WA72CwfjC6Q3miQ\",\"6wcsoqgMKfZ7xjSgn\",\"bX6tpTCjwoi6XMMbK\",\"8sREc62vdi9MnA284\",\"4wR64Jaibcom7tbYf\",\"3Gf7ikLijfoxabiPY\",\"nzAbdaGbJwgvkkEYj\",\"zKC5T9XSg4byAJKKK\",\"8BJyXvRWcrvN3nttS\",\"PLsGDCqNvz6fJ6gwn\",\"AsipYXYSWwYMscMn3\",\"saG5qfXFwH74sK8Tg\",\"Q2bpsTCWEDKuLzELf\",\"NQ5mDfc5wJbcie93r\",\"CNc6rmwhbxkxEhHAp\",\"BQZ7aje2pA6Y99g89\",\"qWR7eXxBiNee22A5u\",\"vGKxRcDYDsXzTQuEQ\",\"Akq3fQcPRgPrWfsye\",\"Zp93Tit7CTRdkCMqp\",\"csgxwerMgZXe2wLqh\",\"QpBEndbkq6opq4DBN\",\"LRxyZwXywbwzt255M\",\"yjtdwc2AC4jA2RWtn\",\"e26Kqj7vtx9mZP7fa\",\"mHT2bJb5SByfJ8yKS\",\"SNiJRRosrmSWssLj4\",\"jyCByAZwu576xDwEL\",\"kp2ZbCewZJAbfd7xv\",\"srJ34BaybkQh3qRkM\",\"3WtHp4MBzciz4AE8M\",\"8s5Bdrn7RTga7DL6x\",\"RGN3QTb5LXj4ZPPkj\",\"MLj5EZFi87oKbePn3\",\"Kt6oGAfrymXmAnn2d\",\"buX4mCQhtXCfBjeno\",\"CJnuSjyCBMTbTiibD\",\"YLTZRjM78Wi9J9Re4\",\"bHX48t6EJJ2tntqjn\",\"nBJve5CzG6WAw7WFQ\",\"zw7g7T8wE5R5CBhXr\",\"szQg8dxKNNre3v3Jk\",\"za7cuyZmjkaFWeQHk\",\"qzzyGD7fCCDjX25za\",\"oyB4Wr4EeZnoDaa8B\",\"Es4eX2stRpyoXeC7f\",\"fRzheK6GzMrmHQ4Kf\",\"PNaLsSGwFfxXmrsG9\",\"dxFtJBqPxFSsh44Em\",\"ZtTwZM9pQ2sAzhnMR\",\"PGCDJpQMN8Sjn9Gm6\",\"mpLFbFKjY6u3nsDMv\",\"zgoq9MhrL2h75DAMA\",\"Po3v3dHCk6wYGKMwi\",\"aarsZPCAfm59DiJEZ\",\"Ya3eHgs8x3unZRLpb\",\"CH53jGETBeJTummf3\",\"FJsvM5yqKuK9yMk9P\",\"evTTY9hwrtogaNxXn\",\"jLSZdBseR2kfjt8dL\",\"NtLvQMsFtWC3tsfFo\",\"jpSy4qhuDNwPk9mrf\",\"vtHbevf2tHqe6mRxX\",\"hMgzDECiobEWuxns3\",\"75NY7vqimaATzRdAX\",\"pWJWQDhqzDSmfaFam\",\"H46gRHmkdz2CRrGH9\",\"2e4Rom2DKp6QrdG2s\",\"nkH3HfJXLMNcBMM79\",\"BdnE4RS5puoxo92mA\",\"Qi3ZTiut4tWJPHibz\",\"jd9sRTnsyeKpPggba\",\"DPi9QGLctq2y76KuE\",\"2Ni3PzJAc5fAhqBkb\",\"J7d397iB5GuWRAMfg\",\"qmFiEavRGtyhemj2H\",\"HQGa7hTdPaAB7XogW\",\"YSmLyP3eRhcFjJPzg\",\"FGEeCTorXbX3WvjFW\",\"2Qk2mFu9HBFzrB24i\",\"cgCQDs9i7yChKeAjE\",\"6BpBQnSGhzgvhXrEy\",\"R9uaMzX2Y4ND8Cosm\",\"M4vq8ATaS9Jg5X7iP\",\"ApqWTmEEkTCsDou48\",\"npp5hesJrst6ghKSM\",\"K45zPJxsABuA3WSyj\",\"wJTDDTE3TrmSXKP4d\",\"LwD3CyYSiBfg3mA4r\",\"erQgJKaHaETRcqs4x\",\"STipuJs6kBvPqqsSE\",\"65dbBZynphj53nXqA\",\"pi76g3eRpnKrhee2a\",\"oDtGiNqDMHmhHE3J8\",\"KFWxXJKbyr3KWQTqP\",\"mDWNyaaQ9hvPCRzSd\",\"AasGs8AeX9Lcb9xJn\",\"QjGNkRM3Xc78yShJN\",\"NGvCPuMiAP3xrRLfB\",\"tAF9Gf6PiGogbZuWs\",\"vEapufGjE49e5JSch\",\"JXyZyJTEFqwZMxiFR\",\"avmmW42xNbGbekDY4\",\"wo4cpen33NYFHNca7\",\"gXTAie79kiw28tx5u\",\"Q7Yxda7dqKeYPs2Db\",\"7wtuhPesfhcYsfZaZ\",\"jyoLggHk8xQKZuoQC\",\"3NMLapak8TEqA4ToK\",\"bfYmA3LMvhSrK59cn\",\"SCYNpjgtLCE9rKpYB\",\"sMcFMPkMJC4Kh6ymj\",\"9XnGoq9Tv6ut3zTtH\",\"9HZbxzkzgz4CvePtv\",\"rPsSEYqwmttMPEuvo\",\"ZKuwzkssrSsDGNPr5\",\"HpfaNWBYpnsQRAPQn\",\"z47JaNrQMgvuPx5HE\",\"uxKGACwmZ6FNZsMwE\",\"jnyub52Fi79drGvow\",\"eomLS3wh6tQPN8jtH\",\"DfdkfQh8ctd2BaaRY\",\"HCfkcKnPs9mrJojdG\",\"inbiBEY2tizFwkN84\",\"aEm3Wvj2rFYRL8Lrb\",\"LPZ2QKCoB8q6rG25c\",\"WnogMFYXoyvmBmGkm\",\"sN2JyFeJCwfwwHPwF\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"4evqAi8a5bnGCsPR2\",\"language\":\"cpp\"},{\"_id\":\"8ZQmveyijozCKFGTB\",\"language\":\"javascript\"},{\"_id\":\"mhcjnns2WWiHWexP7\",\"language\":\"python3\"},{\"_id\":\"wvjxK9c2JjWLK6uLq\",\"language\":\"ruby\"}]}}"]