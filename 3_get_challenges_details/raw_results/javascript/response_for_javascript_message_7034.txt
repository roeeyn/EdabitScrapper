a["{\"msg\":\"result\",\"id\":\"2259\",\"result\":{\"_id\":\"PpqEjypCJ7a4RwxLH\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"function collect(s, n) {\\n\\t// your recursive solution here\\n}\",\"difficulty\":3.5416666666666665,\"familyId\":\"D44GgRRjLqMtg2E9B\",\"instructions\":\"Write a function that returns an array of strings populated from the slices of **n-length** characters of the given word (a slice after another while **n-length** applies onto the word).\\n\\n\\n### Examples\\n```\\ncollect(\\\"intercontinentalisationalism\\\", 6)\\n➞ [\\\"ationa\\\", \\\"interc\\\", \\\"ntalis\\\", \\\"ontine\\\"]\\n\\ncollect(\\\"strengths\\\", 3)\\n➞ [\\\"eng\\\", \\\"str\\\", \\\"ths\\\"]\\n\\ncollect(\\\"pneumonoultramicroscopicsilicovolcanoconiosis\\\", 15)\\n➞ [\\\"croscopicsilico\\\", \\\"pneumonoultrami\\\", \\\"volcanoconiosis\\\"]\\n```\\n\\n\\n### Notes\\n- Ensure that the resulting array is lexicographically ordered.\\n- Return an **empty** array if the *given string* is less than `n`.\\n- You are expected to solve this challenge via a **recursive** approach.\\n- You can check on the **Resources** tab for more details about recursion.\\n- An iterative version of this challenge can be found via this [link](https://edabit.com/challenge/A8GLfBCjWv6TvpsGr).\\n- A **collection** of challenges in recursion can be found via this [link](https://edabit.com/collection/YJH4pAyqDbhLc4STc).\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"const recursive = f => (`${f}`.match(RegExp(`${f.name}`,'gm'))||[]).length > +(/function/.test(f))\\nTest.assertNotEquals(recursive(collect), false, \\\"Recursion is required!\\\")\\n\\nlet [strVector, numVector, resVector] = [[\\n  \\\"intercontinentalisationalism\\\", \\\"strengths\\\", \\\"pneumonoultramicroscopicsilicovolcanoconiosis\\\",\\n  \\\"lexicographically\\\", \\\"anesthesiologists\\\", \\\"subdermatoglyphic\\\", \\\"sesquipedalianism\\\",\\n  \\\"recollection\\\", \\\"pseudopseudohypoparathyroidism\\\", \\\"floccinaucinihilipilification\\\",\\n  \\\"antidisestablishmentarianism\\\", \\\"supercalifragilisticexpialidocious\\\", \\\"incomprehensibilities\\\",\\n  \\\"astrophysicists\\\", \\\"honorificabilitudinitatibus\\\", \\\"unimaginatively\\\", \\\"euouae\\\", \\\"tsktsk\\\",\\n  \\\"uncopyrightable\\\" ], [ 6, 3, 15, 4, 6, 6, 6, 3, 7, 2, 5, 3, 9, 4, 12, 8, 7, 6, 11 ], [\\n  [\\\"ationa\\\", \\\"interc\\\", \\\"ntalis\\\", \\\"ontine\\\"], [\\\"eng\\\", \\\"str\\\", \\\"ths\\\"],\\n  [\\\"croscopicsilico\\\", \\\"pneumonoultrami\\\", \\\"volcanoconiosis\\\"],\\n  [\\\"aphi\\\", \\\"call\\\", \\\"cogr\\\", \\\"lexi\\\"], [\\\"anesth\\\", \\\"esiolo\\\"], [\\\"matogl\\\", \\\"subder\\\"],\\n  [\\\"pedali\\\", \\\"sesqui\\\"], [\\\"ect\\\", \\\"ion\\\", \\\"oll\\\", \\\"rec\\\"], [\\\"hyroidi\\\", \\\"poparat\\\", \\\"pseudop\\\", \\\"seudohy\\\"],\\n  [\\\"at\\\", \\\"ci\\\", \\\"fl\\\", \\\"ic\\\", \\\"if\\\", \\\"ih\\\", \\\"il\\\", \\\"il\\\", \\\"in\\\", \\\"io\\\", \\\"ip\\\", \\\"na\\\", \\\"oc\\\", \\\"uc\\\"],\\n  [\\\"ablis\\\", \\\"antid\\\", \\\"arian\\\", \\\"hment\\\", \\\"isest\\\"],\\n  [\\\"ali\\\", \\\"ali\\\", \\\"doc\\\", \\\"erc\\\", \\\"fra\\\", \\\"gil\\\", \\\"ice\\\", \\\"iou\\\", \\\"ist\\\", \\\"sup\\\", \\\"xpi\\\"],\\n  [\\\"ensibilit\\\", \\\"incompreh\\\"], [\\\"astr\\\", \\\"ophy\\\", \\\"sici\\\"], [\\\"honorificabi\\\", \\\"litudinitati\\\"],\\n  [\\\"unimagin\\\"], [], [\\\"tsktsk\\\"], [\\\"uncopyright\\\"]\\n]]\\nfor (let i in strVector) Test.assertSimilar(collect(strVector[i], numVector[i]), resVector[i])\",\"language\":\"javascript\",\"quality\":0,\"summary\":\"Write a function that returns an array of strings populated from the slices of n-length characters of the given word (a slice after another while n-length applies onto the word).\\n\\nExamples\\ncollect(\\\"intercontinentalisationalism\\\", 6)\\n➞ [\\\"ationa\\\", \\\"interc\\\", \\\"ntalis\\\", \\\"ontine\\\"]\\n\\ncollect(\\\"strengths\\\", 3)\\n➞ [\\\"eng\\\", \\\"str\\\", \\\"ths\\\"]\\n\\ncollect(\\\"pneumonoultramicroscopicsili\",\"tags\":[\"recursion\",\"sorting\",\"strings\",\"arrays\"],\"timestamp\":{\"$date\":1602885071244},\"title\":\"Recursion: N-Length Letter Groups\",\"stats\":{\"completed\":{\"total\":21,\"ratings\":[4,4,4,4,4,4,1,4,4,5,0,5,5,2,4,1,3,5,4,3,4,2,4,5],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"yjtdwc2AC4jA2RWtn\",\"buX4mCQhtXCfBjeno\",\"tAF9Gf6PiGogbZuWs\",\"Es4eX2stRpyoXeC7f\",\"aEm3Wvj2rFYRL8Lrb\",\"JGBCMpnbbi5ztuFoX\",\"u9cRf5kvtpRB5ffB3\",\"5NGxHLcQ8Af2RJ4TN\",\"DPi9QGLctq2y76KuE\",\"A4GfdHKzEy82YWTK5\",\"QRv96jmNaYsWkxQEG\",\"pWJWQDhqzDSmfaFam\",\"s678Wirfor5uYL5T6\",\"PH32cNxBjrK4a28sn\",\"TtrXnGzi9MyhLvWiz\",\"vic9SZ9qqj9WhRkbd\",\"GsrjAqoAdLATJH9qD\",\"8BJyXvRWcrvN3nttS\"]},\"flags\":0},\"editorId\":\"a777e8chPvJkY3tKa\",\"family\":[{\"_id\":\"DbqdoQDMv88NHSgi4\",\"language\":\"java\"},{\"_id\":\"PpqEjypCJ7a4RwxLH\",\"language\":\"javascript\"},{\"_id\":\"TcKZnbdgx7q6LLoFR\",\"language\":\"python3\"}]}}"]