a["{\"msg\":\"result\",\"id\":\"1211\",\"result\":{\"_id\":\"zLSsBEKyu2HLTZYd8\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"function longest7SegmentWord(arr) {\\n\\t\\n}\",\"difficulty\":2.033333333333333,\"familyId\":\"rd3JijGmFTgtktSFm\",\"instructions\":\"Given an *array of words*, return the **longest word** which can fit on a *7 segment display*.\\n\\n![Image of a 7 segment display](https://edabit-challenges.s3.amazonaws.com/clock_xkmdxe.jpeg)\\n\\n- Letters which do not fit on a *7 segment display* are **k**, **m**, **v**, **w** and **x**.\\n- Therefore, do not count words which include these letters.\\n\\n### Examples\\n```\\nlongest7SegmentWord([\\\"knighthood\\\", \\\"parental\\\", \\\"fridge\\\", \\\"clingfilm\\\"]) ➞ \\\"parental\\\"\\n\\nlongest7SegmentWord([\\\"coding\\\", \\\"crackers\\\", \\\"edabit\\\", \\\"celebration\\\"]) ➞ \\\"celebration\\\"\\n\\nlongest7SegmentWord([\\\"velocity\\\", \\\"mackerel\\\", \\\"woven\\\", \\\"kingsmen\\\"]) ➞ \\\"\\\"\\n```\\n\\n### Notes\\n- All words will be given in lowercase.\\n- Return an *empty string* if no words are eligible (see example #3).\\n- If multiple valid words have the same length, return the **first word that appears**.\",\"isHidden\":false,\"lab\":\"Test.assertEquals(longest7SegmentWord([\\\"knighthood\\\", \\\"parental\\\", \\\"fridge\\\", \\\"clingfilm\\\"]), \\\"parental\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"coding\\\", \\\"crackers\\\", \\\"edabit\\\", \\\"celebration\\\"]), \\\"celebration\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"velocity\\\", \\\"mackerel\\\", \\\"woven\\\", \\\"kingsmen\\\"]), \\\"\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"embarrassment\\\", \\\"perceive\\\", \\\"front\\\"]), \\\"front\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"truck\\\", \\\"accessible\\\", \\\"undermine\\\", \\\"unique\\\", \\\"tear\\\", \\\"cat\\\", \\\"avenue\\\", \\\"labour\\\", \\\"goat\\\", \\\"dance\\\", \\\"rise\\\", \\\"scale\\\"]), \\\"accessible\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"act\\\", \\\"adjust\\\", \\\"proud\\\", \\\"battery\\\", \\\"tear\\\", \\\"beautiful\\\", \\\"avenue\\\", \\\"thoughtful\\\", \\\"victory\\\", \\\"mobile\\\", \\\"straight\\\"]), \\\"thoughtful\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"fair\\\", \\\"tear\\\", \\\"truck\\\"]), \\\"fair\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"scale\\\", \\\"pass\\\", \\\"act\\\", \\\"sector\\\", \\\"vain\\\", \\\"scale\\\"]), \\\"sector\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"vegetarian\\\", \\\"unique\\\", \\\"sensitivity\\\", \\\"goat\\\", \\\"nature\\\", \\\"attract\\\", \\\"suntan\\\", \\\"mobile\\\", \\\"pillow\\\", \\\"economist\\\", \\\"arrest\\\", \\\"galaxy\\\", \\\"proud\\\", \\\"proud\\\"]), \\\"attract\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"vat\\\", \\\"suntan\\\", \\\"murder\\\", \\\"dance\\\", \\\"course\\\", \\\"institution\\\"]), \\\"institution\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"adjust\\\", \\\"garlic\\\", \\\"preoccupation\\\", \\\"nature\\\", \\\"garlic\\\", \\\"undermine\\\", \\\"pavement\\\", \\\"payment\\\", \\\"fair\\\", \\\"twin\\\", \\\"expertise\\\", \\\"pillow\\\", \\\"dance\\\", \\\"economist\\\", \\\"establish\\\", \\\"nervous\\\", \\\"sector\\\"]), \\\"preoccupation\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"embarrassment\\\", \\\"bell\\\", \\\"obese\\\", \\\"width\\\", \\\"singer\\\", \\\"strikebreaker\\\", \\\"width\\\", \\\"preoccupation\\\", \\\"nervous\\\"]), \\\"preoccupation\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"winner\\\", \\\"twin\\\", \\\"establish\\\"]), \\\"establish\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"fair\\\", \\\"institution\\\", \\\"vegetarian\\\", \\\"electron\\\", \\\"suntan\\\", \\\"settle\\\", \\\"royalty\\\", \\\"bracket\\\", \\\"conductor\\\", \\\"blade\\\", \\\"camp\\\", \\\"potential\\\", \\\"human body\\\"]), \\\"institution\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"width\\\", \\\"straight\\\", \\\"sign\\\", \\\"inspire\\\", \\\"lay\\\", \\\"pavement\\\", \\\"settle\\\", \\\"undermine\\\", \\\"cat\\\", \\\"labour\\\", \\\"adjust\\\", \\\"admire\\\", \\\"scramble\\\", \\\"pavement\\\", \\\"limited\\\", \\\"payment\\\", \\\"withdrawal\\\", \\\"full\\\", \\\"brave\\\"]), \\\"straight\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"limited\\\", \\\"arrest\\\", \\\"harm\\\", \\\"tear\\\", \\\"vain\\\", \\\"bracket\\\", \\\"settle\\\", \\\"settle\\\", \\\"spine\\\", \\\"mobile\\\", \\\"potential\\\", \\\"cat\\\", \\\"winner\\\", \\\"tear\\\"]), \\\"potential\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"front\\\", \\\"economist\\\", \\\"sector\\\", \\\"camp\\\"]), \\\"sector\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"murder\\\", \\\"vain\\\", \\\"fair\\\", \\\"sign\\\", \\\"establish\\\", \\\"flow\\\", \\\"bell\\\", \\\"truck\\\", \\\"winner\\\", \\\"tear\\\", \\\"avenue\\\", \\\"move\\\", \\\"pillow\\\", \\\"murder\\\", \\\"gesture\\\", \\\"garlic\\\", \\\"unique\\\", \\\"brave\\\", \\\"pass\\\", \\\"avenue\\\"]), \\\"establish\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"full\\\", \\\"suntan\\\", \\\"strikebreaker\\\", \\\"front\\\", \\\"truck\\\", \\\"vegetarian\\\", \\\"maze\\\", \\\"shine\\\", \\\"potential\\\", \\\"conductor\\\", \\\"width\\\", \\\"economist\\\", \\\"lounge\\\", \\\"pound\\\", \\\"camp\\\", \\\"sensitivity\\\"]), \\\"potential\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"party\\\", \\\"width\\\", \\\"sector\\\", \\\"withdrawal\\\", \\\"limited\\\", \\\"victory\\\", \\\"presidency\\\", \\\"pillow\\\", \\\"beautiful\\\", \\\"shine\\\"]), \\\"presidency\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"front\\\", \\\"mirror\\\", \\\"shine\\\", \\\"spine\\\", \\\"lay\\\", \\\"obese\\\", \\\"shine\\\", \\\"singer\\\", \\\"straight\\\", \\\"establish\\\", \\\"embarrassment\\\", \\\"admire\\\", \\\"vain\\\", \\\"presidency\\\", \\\"winner\\\", \\\"dance\\\", \\\"inject\\\", \\\"proud\\\", \\\"establish\\\"]), \\\"presidency\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"pound\\\", \\\"scramble\\\", \\\"labour\\\", \\\"vegetarian\\\", \\\"obese\\\", \\\"delicate\\\", \\\"dictionary\\\", \\\"act\\\", \\\"nature\\\", \\\"shine\\\"]), \\\"dictionary\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"goat\\\", \\\"institution\\\", \\\"move\\\", \\\"twin\\\", \\\"lay\\\", \\\"embarrassment\\\", \\\"labour\\\"]), \\\"institution\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"victory\\\", \\\"embarrassment\\\", \\\"truck\\\", \\\"presidency\\\", \\\"maze\\\", \\\"truck\\\"]), \\\"presidency\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"accessible\\\", \\\"embarrassment\\\", \\\"embarrassment\\\", \\\"extort\\\", \\\"width\\\", \\\"garlic\\\"]), \\\"accessible\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"shine\\\", \\\"admire\\\"]), \\\"shine\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"sector\\\", \\\"conductor\\\", \\\"arrest\\\", \\\"inspire\\\", \\\"harm\\\", \\\"grain\\\", \\\"tear\\\", \\\"vat\\\", \\\"shine\\\", \\\"course\\\", \\\"admire\\\", \\\"shine\\\", \\\"attract\\\", \\\"victory\\\"]), \\\"conductor\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"rise\\\", \\\"dance\\\", \\\"dance\\\", \\\"undermine\\\", \\\"vain\\\", \\\"blade\\\", \\\"pillow\\\", \\\"economist\\\", \\\"freight\\\", \\\"goat\\\", \\\"pavement\\\"]), \\\"freight\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"institution\\\", \\\"pillow\\\", \\\"straight\\\", \\\"suntan\\\", \\\"presidency\\\", \\\"exception\\\", \\\"expertise\\\", \\\"sensitivity\\\"]), \\\"institution\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"grain\\\", \\\"fair\\\", \\\"settle\\\", \\\"thoughtful\\\", \\\"vain\\\", \\\"admire\\\", \\\"sign\\\"]), \\\"thoughtful\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"presidency\\\", \\\"bracket\\\", \\\"flavor\\\", \\\"payment\\\", \\\"nervous\\\", \\\"extort\\\", \\\"sector\\\", \\\"garlic\\\", \\\"limited\\\"]), \\\"presidency\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"twin\\\", \\\"pillow\\\", \\\"blade\\\", \\\"mobile\\\", \\\"royalty\\\", \\\"undermine\\\", \\\"lay\\\", \\\"front\\\", \\\"fair\\\", \\\"flow\\\", \\\"party\\\", \\\"withdrawal\\\", \\\"sign\\\", \\\"scramble\\\", \\\"accessible\\\", \\\"vain\\\"]), \\\"accessible\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"labour\\\", \\\"pass\\\", \\\"camp\\\", \\\"vegetarian\\\", \\\"freight\\\", \\\"victory\\\", \\\"avenue\\\", \\\"flow\\\", \\\"garlic\\\", \\\"gesture\\\", \\\"nervous\\\", \\\"vat\\\", \\\"preoccupation\\\", \\\"maze\\\", \\\"arrest\\\", \\\"camp\\\", \\\"dictionary\\\", \\\"inspire\\\"]), \\\"preoccupation\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"vegetarian\\\", \\\"expertise\\\", \\\"straight\\\", \\\"harm\\\", \\\"course\\\", \\\"network\\\", \\\"preoccupation\\\", \\\"cat\\\", \\\"extort\\\", \\\"full\\\", \\\"limited\\\", \\\"flex\\\", \\\"unique\\\", \\\"singer\\\", \\\"avenue\\\", \\\"establish\\\", \\\"bracket\\\", \\\"mobile\\\"]), \\\"preoccupation\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"admire\\\", \\\"scale\\\", \\\"goat\\\", \\\"vat\\\", \\\"rise\\\", \\\"attract\\\", \\\"vegetarian\\\", \\\"economist\\\", \\\"admire\\\", \\\"act\\\", \\\"flavor\\\", \\\"flow\\\", \\\"preoccupation\\\"]), \\\"preoccupation\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"shine\\\", \\\"scale\\\", \\\"freight\\\", \\\"extort\\\", \\\"withdrawal\\\", \\\"suntan\\\", \\\"grain\\\", \\\"preoccupation\\\", \\\"arrest\\\", \\\"habit\\\", \\\"party\\\", \\\"habit\\\", \\\"sign\\\", \\\"electron\\\", \\\"harm\\\", \\\"grain\\\", \\\"rise\\\", \\\"gesture\\\", \\\"chimney\\\"]), \\\"preoccupation\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"beautiful\\\", \\\"victory\\\", \\\"electron\\\", \\\"goat\\\", \\\"proud\\\", \\\"preoccupation\\\", \\\"nature\\\", \\\"network\\\", \\\"proud\\\", \\\"full\\\", \\\"sensitivity\\\", \\\"royalty\\\", \\\"dance\\\", \\\"scramble\\\"]), \\\"preoccupation\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"vain\\\", \\\"nature\\\", \\\"garlic\\\", \\\"garlic\\\", \\\"inspire\\\", \\\"thoughtful\\\", \\\"winner\\\", \\\"blade\\\", \\\"pillow\\\", \\\"fair\\\", \\\"goat\\\", \\\"bell\\\", \\\"lounge\\\", \\\"fair\\\"]), \\\"thoughtful\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"expertise\\\", \\\"payment\\\", \\\"exception\\\", \\\"attract\\\", \\\"habit\\\", \\\"institution\\\", \\\"embarrassment\\\", \\\"pavement\\\", \\\"accessible\\\", \\\"accessible\\\", \\\"bell\\\", \\\"perceive\\\", \\\"scale\\\"]), \\\"institution\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"spine\\\", \\\"presidency\\\", \\\"scale\\\", \\\"goat\\\", \\\"beautiful\\\", \\\"harm\\\", \\\"flavor\\\", \\\"proud\\\", \\\"limited\\\", \\\"battery\\\", \\\"unique\\\", \\\"scramble\\\", \\\"pound\\\", \\\"nature\\\", \\\"flavor\\\", \\\"avenue\\\", \\\"pound\\\"]), \\\"presidency\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"institution\\\", \\\"sign\\\", \\\"pass\\\", \\\"cat\\\", \\\"cook\\\", \\\"nervous\\\", \\\"habit\\\", \\\"accessible\\\", \\\"nervous\\\", \\\"lounge\\\", \\\"unique\\\", \\\"undermine\\\", \\\"royalty\\\", \\\"chimney\\\", \\\"obese\\\", \\\"bracket\\\", \\\"habit\\\", \\\"potential\\\", \\\"sector\\\"]), \\\"institution\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"galaxy\\\", \\\"presidency\\\", \\\"camp\\\", \\\"pillow\\\", \\\"labour\\\", \\\"pass\\\", \\\"pillow\\\", \\\"suntan\\\", \\\"payment\\\", \\\"economist\\\", \\\"unique\\\"]), \\\"presidency\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"maze\\\", \\\"human body\\\", \\\"move\\\", \\\"perceive\\\", \\\"maze\\\", \\\"scramble\\\", \\\"flavor\\\", \\\"delicate\\\", \\\"accessible\\\"]), \\\"accessible\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"freight\\\", \\\"limited\\\", \\\"straight\\\", \\\"settle\\\", \\\"obese\\\", \\\"shy\\\", \\\"establish\\\", \\\"galaxy\\\", \\\"avenue\\\", \\\"victory\\\", \\\"proud\\\", \\\"dictionary\\\", \\\"conductor\\\", \\\"spine\\\", \\\"pillow\\\", \\\"economist\\\", \\\"habit\\\", \\\"royalty\\\", \\\"strikebreaker\\\", \\\"winner\\\"]), \\\"dictionary\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"vegetarian\\\", \\\"labour\\\", \\\"course\\\", \\\"grain\\\", \\\"freight\\\", \\\"pavement\\\", \\\"nervous\\\", \\\"unique\\\", \\\"mirror\\\", \\\"galaxy\\\", \\\"beautiful\\\", \\\"winner\\\", \\\"winner\\\", \\\"cat\\\", \\\"pillow\\\", \\\"spine\\\", \\\"course\\\", \\\"murder\\\", \\\"pavement\\\", \\\"withdrawal\\\"]), \\\"beautiful\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"vat\\\", \\\"mirror\\\", \\\"winner\\\", \\\"human body\\\", \\\"potential\\\", \\\"front\\\"]), \\\"potential\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"blade\\\", \\\"victory\\\", \\\"thoughtful\\\", \\\"undermine\\\", \\\"royalty\\\", \\\"nature\\\", \\\"pillow\\\"]), \\\"thoughtful\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"electron\\\", \\\"act\\\", \\\"blade\\\", \\\"bell\\\", \\\"straight\\\", \\\"extort\\\", \\\"battery\\\", \\\"maze\\\", \\\"galaxy\\\", \\\"act\\\", \\\"embarrassment\\\"]), \\\"electron\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"network\\\", \\\"potential\\\", \\\"maze\\\", \\\"move\\\", \\\"chimney\\\", \\\"straight\\\", \\\"party\\\", \\\"thoughtful\\\", \\\"freight\\\", \\\"obese\\\", \\\"dance\\\", \\\"inspire\\\", \\\"proud\\\", \\\"harm\\\", \\\"human body\\\", \\\"strikebreaker\\\"]), \\\"thoughtful\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"course\\\", \\\"galaxy\\\", \\\"garlic\\\", \\\"pillow\\\", \\\"camp\\\", \\\"brave\\\", \\\"extort\\\", \\\"conductor\\\", \\\"mirror\\\", \\\"full\\\", \\\"goat\\\", \\\"twin\\\", \\\"cat\\\"]), \\\"conductor\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"inject\\\", \\\"sensitivity\\\", \\\"party\\\", \\\"withdrawal\\\", \\\"establish\\\", \\\"potential\\\", \\\"rise\\\", \\\"presidency\\\", \\\"galaxy\\\", \\\"tear\\\", \\\"party\\\", \\\"vegetarian\\\", \\\"economist\\\", \\\"cat\\\", \\\"maze\\\", \\\"truck\\\", \\\"lounge\\\", \\\"conductor\\\"]), \\\"presidency\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"spine\\\", \\\"sign\\\", \\\"vegetarian\\\", \\\"victory\\\", \\\"inject\\\", \\\"flex\\\", \\\"embarrassment\\\", \\\"accessible\\\", \\\"battery\\\", \\\"network\\\", \\\"avenue\\\", \\\"singer\\\", \\\"lay\\\", \\\"move\\\"]), \\\"accessible\\\")\\nTest.assertEquals(longest7SegmentWord([\\\"extort\\\", \\\"galaxy\\\", \\\"garlic\\\", \\\"winner\\\"]), \\\"garlic\\\")\",\"language\":\"javascript\",\"summary\":\"Given an array of words, return the longest word which can fit on a 7 segment display.\\n\\nImage of a 7 segment display\\n\\nLetters which do not fit on a 7 segment display are K, M, V, W and X.\\nTherefore, do not count words which include these letters.\\n\\nExamples\\nlongest7SegmentWord([\\\"knighthood\\\", \\\"parental\\\", \\\"fridge\\\", \\\"clingfilm\\\"]) ➞ \\\"parental\\\"\\n\\nlongest7SegmentWord(\",\"tags\":[\"arrays\",\"loops\",\"strings\"],\"timestamp\":{\"$date\":1582180943737},\"title\":\"Longest Word in a 7 Segment Display\",\"stats\":{\"completed\":{\"total\":217,\"ratings\":[1,1,1,1,1,2,2,2,2,2,2,1,2,1,3,1,2,2,1,2,0,0,2,1,2,2,2,1,2,3,2,2,2,2,2,3,3,0,2,2,2,2,2,2,2,2,2,2,3,0,2,2,2,2,3,2,2,1,2,2,2,2,2,3,2,2,1,2,2,2,1,2,2,2,2,2,3,3,2,3,3,1,3,3,3,3,3,2,3,3,2,0,2,3,3,0,2,3,0,1,2,3,0,3,2,3,2,2,3,2,0,3,3,3,2,0,1,2,2,3,2,3,3,2,2,3,2,3,0,2,2,3,2,3,4,0,3,2,2,2,3,3,2,2,3,2,2,3,3,5],\"rators\":[\"7JCLyrrY6JYGpocac\",\"yjtdwc2AC4jA2RWtn\",\"5Zq3aGdvh4LHBvnJL\",\"Y9Nz9yafaibz54W4o\",\"RE4Mm9T6Q9uygAxGS\",\"6BpBQnSGhzgvhXrEy\",\"pi76g3eRpnKrhee2a\",\"CJnuSjyCBMTbTiibD\",\"mHT2bJb5SByfJ8yKS\",\"g5noFWaoRtZNcEEAW\",\"n5wubRfh6zh8QRymN\",\"zTZtM9jRsu8eXie6s\",\"2CvHJcA9aXt9pvZwA\",\"k5TGxBtLi9BXxeChT\",\"2innwjWqxJHo4eRGh\",\"FJsvM5yqKuK9yMk9P\",\"cp3X8hk8yNME7qoD9\",\"zgoq9MhrL2h75DAMA\",\"YER6iBcpJCuhgrYDN\",\"9Pzg45NEiRXhLtLh3\",\"eANW47mfA359Y6JyP\",\"EWn8w8P3nNh7knatY\",\"9XnGoq9Tv6ut3zTtH\",\"EjPLq3QSJdGQFJdgW\",\"tyNrtjfTi56j5Hw9b\",\"Y5H6Lp7Qou9XGptHH\",\"bX6tpTCjwoi6XMMbK\",\"AasGs8AeX9Lcb9xJn\",\"eomLS3wh6tQPN8jtH\",\"vtHbevf2tHqe6mRxX\",\"uAS9uKs8KQmp8uhqn\",\"2ZFoLTxcCARhwc8xX\",\"zw7g7T8wE5R5CBhXr\",\"a777e8chPvJkY3tKa\",\"65dbBZynphj53nXqA\",\"ij9YRJvZz6WbqcGXS\",\"oopQyJEtuzvc9rx9D\",\"Lzj3w7QjdzikynsGG\",\"buX4mCQhtXCfBjeno\",\"8raviPK67KKxzQWcF\",\"C9LKGu2g5hSijvDzA\",\"KAwnrRNbgiZ2uAr8v\",\"pLpcDC3EYx2DDQSdt\",\"QRv96jmNaYsWkxQEG\",\"ixabGTE2JSw9QLbJS\",\"z5ebtimXwFFJdYxoa\",\"7gZKfvwaeqsGKXMEN\",\"ttuGK7od8simjgmCJ\",\"nAmJEX7BkHLd9LsG2\",\"6o7rKs3S3Cb8RkLoa\",\"tAF9Gf6PiGogbZuWs\",\"PGCDJpQMN8Sjn9Gm6\",\"aEm3Wvj2rFYRL8Lrb\",\"2tCCFm5iefjrRSaxv\",\"Ya3eHgs8x3unZRLpb\",\"iMTXmSTD2Q4SDvdZs\",\"kp2ZbCewZJAbfd7xv\",\"CNc6rmwhbxkxEhHAp\",\"BdvdJYwHZr7JpkHsn\",\"g4NCSxxHqHCGMpWwT\",\"qWR7eXxBiNee22A5u\",\"nkH3HfJXLMNcBMM79\",\"Yp7uvStL97cC9fKkY\",\"eKSJgCaiy4ReJWXTg\",\"4p2sARSZNNnKqjAT6\",\"Po3v3dHCk6wYGKMwi\",\"SxqAEMaYcE9Ps9eh6\",\"d6HiobHKnNnA9b3SC\",\"3Gf7ikLijfoxabiPY\",\"vewKwcMeGuk3p3MsN\",\"WoBoDBtt6XDRrACBC\",\"DPi9QGLctq2y76KuE\",\"CH53jGETBeJTummf3\",\"u9cRf5kvtpRB5ffB3\",\"RtPhDuwmvWNHiBxmG\",\"AQ3EvTmJPu6cJrShF\",\"PTo9qt93YqGvL8fCa\",\"H46gRHmkdz2CRrGH9\",\"s678Wirfor5uYL5T6\",\"fnYmxYDDnFTikeswQ\",\"w2FE8cvovKD2tykWQ\",\"jd9sRTnsyeKpPggba\",\"umE8dRTGWzrZFp755\",\"93bfWw6Y8cqkiyhod\",\"oyB4Wr4EeZnoDaa8B\",\"eGmzRsSATFsE2wjJa\",\"8BJyXvRWcrvN3nttS\",\"srJ34BaybkQh3qRkM\",\"STipuJs6kBvPqqsSE\",\"J7d397iB5GuWRAMfg\",\"hyx8iH2z3QySmyRKT\",\"M4vq8ATaS9Jg5X7iP\",\"8s5Bdrn7RTga7DL6x\",\"ZtdfsRksXyiWN7Bu5\",\"fDwLaGDc4LqjcvAXT\",\"8SYDBRtkZuW3pdPtG\",\"iB9km8MrwpDY39QG2\",\"vSPc7MGK5Poy8tSFp\",\"wJTDDTE3TrmSXKP4d\",\"cLHZ5gSaZetSFwjWR\",\"YKs5EMDp5hSt4YvM4\",\"rpnhMdtcR9LHHbQSd\",\"nF9SSxfmXGeNNyNeZ\",\"QNoxPDAB5LmbrzQEm\",\"uaMviCTeXF4haBY3u\",\"d9TugDNK8fMrTXDEq\",\"tgeYXJLppBpdJPfqs\",\"Xk2g4CNFAnYcvxiSr\",\"ceMycDhXzsRojnr9F\",\"E3fkFzNeAGctuvqA2\",\"ZvEevbPERXXzq4AHM\",\"TsFGjBwMjMg5y5ED5\",\"WhE5NJqfkGrown5k8\",\"szQg8dxKNNre3v3Jk\",\"hCfruGWxw7v64teEr\",\"ZcJm2kuqJnN3CXFaR\",\"RKKuw76K7sRBMouKq\",\"5NGxHLcQ8Af2RJ4TN\",\"yuLxi2qBJvMnwgdgJ\",\"zvhWpHAEk7YgxXaQd\",\"RnY25enEBE8T9P5GS\",\"sHnfwDzKzmeApjTv8\",\"bF2DKZ4drK2dg8NbD\",\"zMCXYFZSsviDCvjnY\",\"BSAXdmC6CcPKWPFQp\",\"nCxRATdxmJXpwhAWX\",\"E6DBfkTgHuPsDWdG8\",\"PNqL9etwCzCgvH9S5\",\"qaR8DnWrTk8Mus5Q2\",\"pd8dm7sWLW9cY6dYW\",\"sfj3i3eEAfZa3f9kg\",\"bmTwdgpszZMZPBbXK\",\"oFEG3RDs5J99JYtkZ\",\"jBAPas2EyR2h3E8MD\",\"8JcacTGkCSt8RWysx\",\"sZ2eCa6pF6EN9PMmd\",\"JW5J6sdJHAmDmfWnE\",\"vGKxRcDYDsXzTQuEQ\",\"WnogMFYXoyvmBmGkm\",\"NGvCPuMiAP3xrRLfB\",\"MW4gsgPJfaMEMyXPy\",\"dXyxenKKyeupz5J8h\",\"oDtGiNqDMHmhHE3J8\",\"Q7Yxda7dqKeYPs2Db\",\"KirGLxzcjjtqR2cJs\",\"RSZmq4pgydJ87wErN\",\"CJBPyyfyaEeEo63sb\",\"nWND4LmgZTftyB8sN\",\"r9seLLH2zLkN8msP8\",\"QAZ5DGaWWYhku4BNz\",\"CXaDDoXfcEEmdLQh4\",\"sN2JyFeJCwfwwHPwF\",\"ojiEx2Rk3qp6F9mZK\",\"ax6vpPEaXjhRqqpHf\",\"hcm8sL8mNJTSfTdgE\",\"XwdBzGAR6kY7Tvb9Z\",\"k6QB6fzbj4LsWktRL\",\"EhGc6wHFnkSoqnNLn\",\"K54ipu2Y5pZfPngmk\",\"X5zZpDGEheWLEhoyS\",\"QJ4Mdu9bxuAfhsgyB\",\"Dg6iARxGiyk27HC3i\",\"8op7s67jE2nYdo4js\",\"GwM84Sdp4cYa7NX7y\",\"n9z5RhR49zDpo6S6p\",\"ahAe7pcyjYGzcDRm4\",\"zEt6FvmkSPSHvCyGF\",\"3TAFGjvMoTsxb5AH6\",\"keod3hjXPYdv7rRhJ\",\"LCn6qz2GoMr5577Rd\",\"49XFttjKo2QhEWT3R\",\"fHeDEpQHm6sKGjKL7\",\"vEFs82JACx6q53sqg\",\"sj8yRK9uzJ5LLZABJ\",\"oYwGvRujQWZmjSDkF\",\"FioqXbWFJxdCop35Z\",\"3sRCJAvRgePEDmNje\",\"Bphdbnk2v6XuJD37P\",\"c7Hf6dz44RqWdYNZS\",\"G3kR2YsagvncKkbmH\",\"wo4cpen33NYFHNca7\",\"xrXEfMcqwo2EyuBaE\",\"xsDyJstYoBZRS8pJH\",\"rtCpEsEymyErYLPRo\",\"7HmtZQ2BEvmawsCtF\",\"PH32cNxBjrK4a28sn\",\"3JL2FYn6xC2vwgkg4\",\"F6XGbhXXnTNbGd62m\",\"k8rMJnaejG3dX4ute\",\"37Ys8WyApXM8rNeow\",\"xopC2rkZLhruZAect\",\"E947TPBt5nqvRRwWw\",\"9gEWz76H8KmhN4yJj\",\"7DXJ3mvKMHHqBLt92\",\"MafBynAYGxiWWwP8E\",\"ouG4ntqbYowTpJYjn\",\"ShrXg4RHgnyFjzJ8w\",\"RoGGD5cpHb4ftdLDv\",\"HHNSBLTaSsZjsWG3D\",\"FGEeCTorXbX3WvjFW\",\"CvjWNHy65tvGKQfeP\",\"34bE6mric984YYLZQ\",\"H3yM3F3mukfdq9fit\",\"8DsMHvxeoun9m3RpY\",\"iqmPb9JuJDgTFeR8Q\",\"GsrjAqoAdLATJH9qD\",\"jyoLggHk8xQKZuoQC\"],\"quality\":[3,5,5,5,5,5,5,5,5,5,4,5,5,5,5,4,5,5,5,5,4,5,5,5,5,5,5,4,5,2,5,5,5,5,5,5,5,5,4,5,2,5,5,5,5,5,5,5,4,5,5,5,4,3,4,3,5,1,5,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"quality\":4.612903225806452,\"family\":[{\"_id\":\"JGycbtPjyG2Kf46F5\",\"language\":\"cpp\"},{\"_id\":\"zLSsBEKyu2HLTZYd8\",\"language\":\"javascript\"},{\"_id\":\"CDktdXXtmEwMuDdku\",\"language\":\"php\"},{\"_id\":\"kAQT4vMX2iEAcs8uJ\",\"language\":\"python3\"},{\"_id\":\"qCuPki2DzKED63ifM\",\"language\":\"ruby\"}]}}"]