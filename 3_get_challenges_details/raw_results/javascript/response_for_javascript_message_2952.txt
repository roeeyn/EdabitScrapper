a["{\"msg\":\"result\",\"id\":\"237\",\"result\":{\"_id\":\"EEWcSX7Rz5cWzes5d\",\"author\":\"alexdevero\",\"authorId\":\"RQwuHHy4rBgaQCLte\",\"code\":\"function cleanUpArray(arr) {\\n\\t\\n}\",\"difficulty\":0.7616580310880829,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"PPmAYKBjed6gw34TK\",\"instructions\":\"Create a function that takes an array. This array will contain numbers represented as strings.\\n\\nYour function should split this array into two new arrays. The first array should contain only even numbers. The second only odd. Then, wrap these two arrays in one main array and return it.\\n\\nReturn an empty array if there are no even numbers, or odd.\\n\\n### Examples\\n```\\ncleanUpArray([\\\"8\\\"]) ➞ [[8], []]\\n\\ncleanUpArray([\\\"11\\\"]) ➞ [[], [11]]\\n\\ncleanUpArray([\\\"7\\\", \\\"4\\\", \\\"8\\\"]) ➞ [[4, 8], [7]]\\n\\ncleanUpArray([\\\"9\\\", \\\"4\\\", \\\"5\\\", \\\"8\\\"]) ➞ [[4, 8], [9, 5]]\\n```\\n\\n### Notes\\nAll numbers will be positive integers.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assertSimilar(cleanUpArray(['9', '4', '5', '8']), [[4, 8], [9, 5]])\\nTest.assertSimilar(cleanUpArray(['1', '4', '5', '4', '5', '8', '9']), [[4, 4, 8], [1, 5, 5, 9]])\\nTest.assertSimilar(cleanUpArray(['38', '80', '13', '73', '66', '70', '83', '6', '93', '9', '7', '8', '41']), [[38, 80, 66, 70, 6, 8], [13, 73, 83, 93, 9, 7, 41]])\\nTest.assertSimilar(cleanUpArray(['3', '8', '0', '15', '2']), [[8, 0, 2], [3, 15]])\\nTest.assertSimilar(cleanUpArray(['5', '1', '7', '4', '8', '8']), [[4, 8, 8], [5, 1, 7]])\\nTest.assertSimilar(cleanUpArray(['8']), [[8], []])\\nTest.assertSimilar(cleanUpArray(['2', '64', '16', '4', '72']), [[2, 64, 16, 4, 72], []])\\nTest.assertSimilar(cleanUpArray(['7', '4', '8']), [[4, 8], [7]])\\nTest.assertSimilar(cleanUpArray(['13', '16', '8', '22', '4', '29', '6', '20', '25']), [[16, 8, 22, 4, 6, 20], [13, 29, 25]])\\nTest.assertSimilar(cleanUpArray(['9', '3', '7', '4']), [[4], [9, 3, 7]])\\nTest.assertSimilar(cleanUpArray(['15', '23', '14', '1', '27', '28', '30', '9']), [[14, 28, 30], [15, 23, 1, 27, 9]])\\nTest.assertSimilar(cleanUpArray(['9', '3', '8']), [[8], [9, 3]])\\nTest.assertSimilar(cleanUpArray(['3', '26', '18', '17', '6', '8', '30']), [[26, 18, 6, 8, 30], [3, 17]])\\nTest.assertSimilar(cleanUpArray(['9', '5', '1', '3', '3', '8', '3', '6', '9']), [[8, 6], [9, 5, 1, 3, 3, 3, 9]])\\nTest.assertSimilar(cleanUpArray(['2', '11', '23', '22', '20', '9', '5', '7', '27']), [[2, 22, 20], [11, 23, 9, 5, 7, 27]])\\nTest.assertSimilar(cleanUpArray(['2', '1', '7', '4', '9', '6', '11']), [[2, 4, 6], [1, 7, 9, 11]])\\nTest.assertSimilar(cleanUpArray(['9', '4', '13', '1', '6', '5', '0', '3']), [[4, 6, 0], [9, 13, 1, 5, 3]])\\nTest.assertSimilar(cleanUpArray(['11']), [[], [11]])\\nTest.assertSimilar(cleanUpArray(['3', '7', '21', '33', '5']), [[], [3, 7, 21, 33, 5]])\",\"language\":\"javascript\",\"quality\":4.6911764705882355,\"stats\":{\"completed\":{\"ratings\":[0,0,0,0,0,0,0,0,1,3,2,0,0,1,0,1,2,2,1,0,0,2,0,1,0,0,1,0,0,0,1,1,1,0,0,2,1,0,2,3,1,0,0,0,0,0,0,1,0,0,0,1,2,1,0,0,0,2,0,0,1,1,0,2,0,0,1,0,0,2,1,2,1,1,1,0,0,2,0,0,1,0,1,0,1,1,2,0,1,0,0,1,0,2,1,1,5,2,0,0,1,1,1,0,0,1,0,0,1,0,0,2,1,0,1,0,0,1,0,1,2,2,0,1,0,0,1,2,1,0,2,1,1,0,3,0,1,3,1,0,2,0,1,0,1,1,0,0,2,3,0,0,0,2,2,0,1,0,1,1,0,0,1,2,1,1,1,1,0,2,3,0,0,2,0,1,0,0,0,0,2,1,0,2,0,1,1,1,1,0,0,2,2],\"quality\":[5,4,5,3,5,5,5,5,5,5,5,5,5,5,5,5,5,4,5,5,5,5,5,5,5,5,5,5,5,5,1,5,3,5,5,5,5,5,5,4,5,5,1,5,5,2,5,5,5,5,5,4,5,5,5,5,5,5,5,5,5,5,4,4,5,5,5,5],\"rators\":[\"mpLFbFKjY6u3nsDMv\",\"s2Y76rR2h2fPKibsK\",\"WY4P43N828dqTmBST\",\"zYfPHEZpaMQrzroAa\",\"A4MYphJwf8WfKqNgE\",\"QRv96jmNaYsWkxQEG\",\"fEkbg6upT6S4LnYAB\",\"kDNwLNhZEuWwMBizv\",\"FGEeCTorXbX3WvjFW\",\"srJ34BaybkQh3qRkM\",\"65dbBZynphj53nXqA\",\"8Z3dkvWBqtrMEE48N\",\"Ya3eHgs8x3unZRLpb\",\"oDtGiNqDMHmhHE3J8\",\"jyCByAZwu576xDwEL\",\"2Qk2mFu9HBFzrB24i\",\"u9cRf5kvtpRB5ffB3\",\"buX4mCQhtXCfBjeno\",\"J7d397iB5GuWRAMfg\",\"PAzNgJF54C2mYPkR9\",\"jcPZ5ySXseCB7Ec3x\",\"RQwuHHy4rBgaQCLte\",\"jnyub52Fi79drGvow\",\"FRN2W8RYpJ6GPhgRy\",\"eYJPzBp2ieqd7cf8B\",\"z8R4K9Cd7PNuh256A\",\"RtPhDuwmvWNHiBxmG\",\"rbPEA2TFQw837Hmqg\",\"sN2JyFeJCwfwwHPwF\",\"CNc6rmwhbxkxEhHAp\",\"RE4Mm9T6Q9uygAxGS\",\"QGjY3hgPYPMmMjc7j\",\"AFfw7cGg83uYk2Miy\",\"zw7g7T8wE5R5CBhXr\",\"SNiJRRosrmSWssLj4\",\"9HZbxzkzgz4CvePtv\",\"szQg8dxKNNre3v3Jk\",\"aWNggJDngk9DhC4Sg\",\"DPi9QGLctq2y76KuE\",\"mHT2bJb5SByfJ8yKS\",\"tAF9Gf6PiGogbZuWs\",\"iqtpazNSCBNgDvQFa\",\"k8rMJnaejG3dX4ute\",\"yjtdwc2AC4jA2RWtn\",\"aGDwPibzJ4oM5tq47\",\"cBQW9TogFc67QrxpC\",\"733qgZ7ZSSSrzbXGw\",\"z5ebtimXwFFJdYxoa\",\"dSa4K4DM6hiksarHv\",\"vB88fCn7Ke9osRdZx\",\"aLKHc5k4sM3GijhmE\",\"vGKxRcDYDsXzTQuEQ\",\"N3CNtWZz4ovJfH9Aw\",\"xrqK8P7zH83wjo3L4\",\"STipuJs6kBvPqqsSE\",\"9qoWqLcHGiDX429rE\",\"cp3X8hk8yNME7qoD9\",\"vEapufGjE49e5JSch\",\"pPpmP7xeJzGgK362R\",\"zNN2fW2pJGpTxBgzx\",\"Yp7uvStL97cC9fKkY\",\"Es4eX2stRpyoXeC7f\",\"6BpBQnSGhzgvhXrEy\",\"3h5dGS6W8akioYnWD\",\"NJCmkbH5e7qbtZYhd\",\"GwLzzrCFdYfQXhAWN\",\"XrqNzJ2FRG8HnGiR6\",\"F5X9tBsRJ2E3zSJxw\",\"j5FSQCayX3By73CCw\",\"x2Cz7S8rCKJqCE3Xe\",\"y2cf8jaBdN5nBdXpa\",\"evTTY9hwrtogaNxXn\",\"vKch2w3b4keMd84jj\",\"jkkKzNT77bMStXhpW\",\"fbENjdwBMsPH3M7f4\",\"d9LBRxvADNBB5QJMB\",\"w8geFfsnhEfLPjBCq\",\"98499DDQYDLiQSxkK\",\"LJoLLideh5Aw93oSx\",\"6GwP5Mbvq3gssdKCH\",\"A9jWZtLerXEXYvdRk\",\"MLozTdL5Ld3r2LWq7\",\"z47JaNrQMgvuPx5HE\",\"aEm3Wvj2rFYRL8Lrb\",\"MATsqGvdZgvQ4JwCo\",\"AXcnPX68zdMiLNSmu\",\"6oNkXuuDRBTFvpr8y\",\"ihTSN4G98CHRmZqra\",\"eRyp3gmqkb7MdXpEu\",\"zd9FLSzsGz3evKafy\",\"PsCAMxtGrea9son9q\",\"CdXigydGTBLgA577m\",\"mcPJaijagxzbA5HpH\",\"jLSZdBseR2kfjt8dL\",\"e9Cknxbx6o7Nb6REs\",\"qFJpEDM2Ep6v4tqPz\",\"PKJWzgQKwneuaS3Ap\",\"hT8T426rinDzZytaC\",\"JW5J6sdJHAmDmfWnE\",\"dQd664XYR6QKHFvHW\",\"B9LYirjMoidrmEtQa\",\"z5GXzFD9Wwgnm9Kxf\",\"pi76g3eRpnKrhee2a\",\"Ef3McfqD44hj4Est9\",\"ACCFtQJzwpbmpaBT5\",\"pdGuqmMyeN4wZaWwv\",\"KypQdzThzogKXwkXE\",\"Xj6R2zqhgumffQCAN\",\"HduWrqt8YcQ2B5PWu\",\"2a56F4KyQHRgTubPL\",\"QHiEYtz3tX3s9nETo\",\"QguFWo84zgF3c8BGr\",\"3WtHp4MBzciz4AE8M\",\"o5vwZSj8H7Wngp9oZ\",\"hyx8iH2z3QySmyRKT\",\"8BJyXvRWcrvN3nttS\",\"7kENXQQ8ABiPGfBRD\",\"Swb2jDnZjviDXsQvB\",\"nyh73Tr6GhqAat78g\",\"7gZKfvwaeqsGKXMEN\",\"P2vAyWNH3wjoP5tXc\",\"9ciW3hoQ6JPWmL7c5\",\"oF6TNdvfqZfppqSgK\",\"M4vq8ATaS9Jg5X7iP\",\"ahxmaYtSDuZmhrMBZ\",\"5nhmyqLy8M2Yn2HMR\",\"2tCCFm5iefjrRSaxv\",\"CJBPyyfyaEeEo63sb\",\"GxABy7LkQ5YRmqowE\",\"gFEpzrgWhzCZHeifj\",\"rhhGJj3s9pMzzfpan\",\"TaGqKjJ5Cj4ohRH9y\",\"JnYehNpm7BvefLuee\",\"AasGs8AeX9Lcb9xJn\",\"iqXdPLFDQvr9jKrnn\",\"XujK3rHd3JcM9TLJy\",\"jtzNdgDCzsekkdpxA\",\"HCfkcKnPs9mrJojdG\",\"z6rWbk4FWtqs7qHvm\",\"vic9SZ9qqj9WhRkbd\",\"F3mffDfGmCrgAXoYf\",\"6BFP6MA58afErnoKC\",\"cZt8odCWFhudnDJoe\",\"hwdJZXT3sgEK9uo2s\",\"m6qKkBY4aPWziyJTj\",\"66xmfovMsobJQkRa7\",\"86kMtj2c6DG7paeqg\",\"QAZ5DGaWWYhku4BNz\",\"8op7s67jE2nYdo4js\",\"kcjvgRk4iqMcvmo9H\",\"3XQfH2tybuGQRGMei\",\"rzzFkBdQWcRjH2eKi\",\"9pzFiFK3ANLjQfnr2\",\"2wRYspBSmpmPEcxuE\",\"Q6gEE9dG8ERy2Xu3c\",\"xhrJ9BGQFaMJCEG6F\",\"7wtuhPesfhcYsfZaZ\",\"etKaPYBW5AfmY5zxe\",\"vfgX36gBnxPuEHZpi\",\"vmad5Pz6mu3CRt22J\",\"2cq2HYsJJEcPWuqdz\",\"tseyDEv9zaHBMvLL3\",\"jyoLggHk8xQKZuoQC\",\"7DXJ3mvKMHHqBLt92\",\"tmB8Xatt4AstQSWWv\",\"oyB4Wr4EeZnoDaa8B\",\"ZK6YmYMsfwXYtaZ9P\",\"Fk47SQxbHEJRw4u76\",\"4fjSgcqhQQZM2ZFRP\",\"g4NCSxxHqHCGMpWwT\",\"XRRZ5kd8PvAQYtA4s\",\"SpzAprfWq9EYZcjqa\",\"2ptN2mhjFwFcHyPZd\",\"gKhGony2qmzMdKBHv\",\"jE4ci5yYHPKZTrrbf\",\"BghXDk97iRM34suMN\",\"jSKbvkb6T6sNsjYYE\",\"KJkAZterkNX7j6ntk\",\"kqd3cgnP2yBTj5pSv\",\"NLYHTNm4qcJYtd8QZ\",\"GkdvNCbHP7GzHTkjH\",\"PH32cNxBjrK4a28sn\",\"mER4kEsRRxwbFgPRC\",\"EFcjwsAkQxfGW95jH\",\"3M7Yxz4dk24DnuzNs\",\"PXAcsKkssS2yLyDv2\",\"N2wnZXkhDH86mgjQ8\",\"bfYmA3LMvhSrK59cn\",\"fPRe6kTeGM3yWGfY6\",\"75NY7vqimaATzRdAX\",\"8PWe4RLFk3MRvbn68\",\"Xjx9eRvHSpwffg9Hb\",\"Zk7zYsonf4TQ6d27R\",\"YfHnTYr4sD69ZACS2\",\"QJqntLLpkx72XhQEz\",\"K45zPJxsABuA3WSyj\",\"PC3pLs36zNzpRDSuE\",\"kKsz4H86mtJEB8Wvs\",\"34bE6mric984YYLZQ\",\"aZNjGyAd82zbPzWuv\",\"oB74SK9pYyuDTTEEp\",\"GiQCH5nvo5A2pnREZ\",\"6wfLLbJS7yfRyDchG\",\"ddK4zymKDYAikiMzc\",\"RahovDytzL2Q3fAYP\",\"Zp93Tit7CTRdkCMqp\",\"H3yM3F3mukfdq9fit\",\"4XECdehgfPLTQ5sHA\",\"sMcFMPkMJC4Kh6ymj\",\"autAvCRgkHFkLEC5F\",\"WpNHMgfjZE8aNN2MP\",\"4dZPNCZjG2ZiQhSDi\",\"wuKfeXFuTNpgEyEs2\",\"9XnGoq9Tv6ut3zTtH\",\"QKaNJmXgBMsTmig6S\",\"3LiSLdtN58n46NEqg\",\"tAGT5hJmz4aZ2Jz6Q\",\"nC4sPB69yYuTSks9T\",\"v2w9GN4jHP2fgYdeE\",\"7q8oBsCHwn48Ppnrq\",\"LPZ2QKCoB8q6rG25c\",\"qjd7Y3B7nNxdx5PgM\",\"fccfTyHBaoFGEaKxh\",\"FJsvM5yqKuK9yMk9P\",\"EsYKpvPGPnYN4jfTm\",\"4WYjScmBWK9eXRzvd\",\"o8qnnFEqZkX9mriSB\",\"opcrDAS4AgXqrJXnb\",\"rpNNPWzdFCc9TzKMz\",\"pGv3nd6THyJQADf22\",\"ZuuRPZRW4r3Bp2fSS\",\"CHvzhtXnv8HTbPQ56\",\"T6Rm8mREPMZSftzrC\",\"vpoTHSqFwCb5jmST9\",\"YcCLwitFMAEJSnxAW\",\"HrJtdRbvHHNh7tMMo\",\"YSb9gNuH9PEYS8QwW\",\"qgtso8jfXRD52Th7C\",\"kzKScgma9NnX6YwAs\",\"t4ci2PC2wYh53kENW\",\"EBg5AYkj9YEhjGwst\",\"ey7weiXtrrTWSnjtJ\",\"ySNimfwMcCFvEjkN7\",\"cy8Y6xHqycmrFFE5Q\",\"HjP75DWvMXBqcxwfv\",\"6vdn7gegY7xXxYCbe\",\"Ya9pKG9rkWi4eZaG7\",\"Jw6b8tc3mRTBqQE6Y\",\"kAfXgLMWe4WH8gY6Z\",\"4wR64Jaibcom7tbYf\",\"ptjgJ67Pgp45xaQdv\",\"NJuBx55XXbaAjaiwX\",\"duojX8qpS884knk4m\",\"mdRQaGT98ycMt87S2\",\"9JPCL9dtKwDERRXDZ\",\"6ua6w8vYDMAHGyD9q\"],\"total\":269},\"flags\":0},\"summary\":\"Create a function that takes an array. This array will contain numbers represented as strings.\\n\\nYour function should split this array into two new arrays. The first array should contain only even numbers. The second only odd. Then, wrap these two arrays in one main array and return it.\\n\\nReturn an empty array if there are no even numbers, or odd.\\n\\nExamples\\nclea\",\"tags\":[\"arrays\",\"numbers\",\"strings\",\"conditions\"],\"timestamp\":{\"$date\":1615626077701},\"title\":\"Cleaning Up Messy Arrays\",\"family\":[{\"_id\":\"EEWcSX7Rz5cWzes5d\",\"language\":\"javascript\"},{\"_id\":\"gmBqGDRFvQgH6maLH\",\"language\":\"php\"},{\"_id\":\"YA5sLYuTzQpWLF8xP\",\"language\":\"python3\"},{\"_id\":\"m6zKvtgS8fqLKmxhb\",\"language\":\"ruby\"}]}}"]