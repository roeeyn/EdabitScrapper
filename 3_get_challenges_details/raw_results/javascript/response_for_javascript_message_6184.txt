a["{\"msg\":\"result\",\"id\":\"1839\",\"result\":{\"_id\":\"LQvRrzwHzc2BAXBQx\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"function validate(s) {\\n\\t\\n}\",\"difficulty\":2.6481481481481484,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"eiYwT38Ya7tMvCAcb\",\"instructions\":\"Write a function that returns `true` if the phone number is in a valid format. Valid formats are as follows:\\n\\n**With Country Code** | **Without Country Code**\\n--- | ---\\n+1-892-445-7663 | 892-445-7663\\n1-892-445-7663 | (892) 445-7663\\n1 (892) 445-7663 | 892.567.8901\\n1.892.567.8901 | 1/892/567/8901\\n1 892 567 8901 | 892/567/8901\\n18925678901 | 892 567 8901\\n\\n### Examples\\n```\\nvalidate(\\\"578-332-1114\\\") ➞ true\\n\\nvalidate(\\\"57-332-1114\\\") ➞ false\\n\\nvalidate(\\\"577 332  1114\\\") ➞ false\\n// More than one space in between digits clusters.\\n\\nvalidate(\\\"57 332 1114\\\") ➞ false\\n// Unacceptable digit cluster length.\\n\\nvalidate(\\\"157%332-1114\\\") ➞ false\\n// Unacceptable delimiter.\\n```\\n\\n### Notes\\n- The country code will always be `+1` or `1`.\\n- Each phone number will contain either 10 or 11 digits (depending on whether the country code exists).\\n- There must either be exactly one space, a delimiter, or no space at all between the digit clusters.\\n- You do not have to worry about extensions.\",\"lab\":\"Test.assertEquals(validate(\\\"+1-892-445-7663\\\"), true)\\nTest.assertEquals(validate(\\\"1-892-445-7663\\\"), true)\\nTest.assertEquals(validate(\\\"1 (892) 445-7663\\\"), true)\\nTest.assertEquals(validate(\\\"1.892.567.8901\\\"), true)\\nTest.assertEquals(validate(\\\"1/892/567/8901\\\"), true)\\nTest.assertEquals(validate(\\\"1 892 567 8901\\\"), true)\\nTest.assertEquals(validate(\\\"18925678901\\\"), true)\\nTest.assertEquals(validate(\\\"892-445-7663\\\"), true)\\nTest.assertEquals(validate(\\\"(892) 445-7663\\\"), true)\\nTest.assertEquals(validate(\\\"892.567.8901\\\"), true)\\nTest.assertEquals(validate(\\\"892/567/8901\\\"), true)\\nTest.assertEquals(validate(\\\"892 567 8901\\\"), true)\\nTest.assertEquals(validate(\\\"8925678901\\\"), true)\\nTest.assertEquals(validate(\\\"89-445-7663\\\"), false, \\\"Invalid digit clusters.\\\")\\nTest.assertEquals(validate(\\\"(892) 4454-7663\\\"), false, \\\"Invalid digit clusters.\\\")\\nTest.assertEquals(validate(\\\"892  567 8901\\\"), false, \\\"Additional space.\\\")\\nTest.assertEquals(validate(\\\"892?567?8901\\\"), false, \\\"Invalid delimiter.\\\")\\nTest.assertEquals(validate(\\\"!1-892-567-8901\\\"), false, \\\"Invalid international code.\\\")\\nTest.assertEquals(validate(\\\"(8924) 445-7663\\\"), false, \\\"Invalid digit clusters.\\\")\\nTest.assertEquals(validate(\\\"12 892 445-7663\\\"), false, \\\"Invalid international code.\\\")\\nTest.assertEquals(validate(\\\"1&892&445-7663\\\"), false, \\\"Invalid delimiter.\\\")\\nTest.assertEquals(validate(\\\"894-445-766\\\"), false, \\\"Invalid digit clusters.\\\")\\nTest.assertEquals(validate(\\\"894 445 766\\\"), false, \\\"Invalid digit clusters.\\\")\",\"language\":\"javascript\",\"summary\":\"Write a function that returns true if the phone number is in a valid format. Valid formats are as follows:\\n\\nWith Country Code | Without Country Code\\n--- | ---\\n+1-892-445-7663 | 892-445-7663\\n1-892-445-7663 | (892) 445-7663\\n1 (892) 445-7663 | 892.567.8901\\n1.892.567.8901 | 1/892/567/8901\\n1 892 567 8901 | 892/567/8901\\n18925678901 | 892 567 8901\\n\\nExamples\\nvalidate(\",\"tags\":[\"regex\",\"strings\",\"validation\"],\"timestamp\":{\"$date\":1555698194251},\"title\":\"Validate Phone Numbers\",\"stats\":{\"completed\":{\"total\":56,\"ratings\":[2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,4,3,0,3,1,0,2,3,3,3,3,1,4,3,3,3,2,3,3,3,2,4,4,4,5,3,3,3,3,4,3,4,1,3],\"rators\":[\"mNMQvcxKSSvqqMYCH\",\"65dbBZynphj53nXqA\",\"SDtZFL5NzAoCPofXk\",\"EjPLq3QSJdGQFJdgW\",\"8xuMMGF7fyQWL2fKH\",\"bjn5DTzzaWCP5BDgX\",\"CJnuSjyCBMTbTiibD\",\"Hz8mnq7xFJZKLymTh\",\"n5wubRfh6zh8QRymN\",\"yjtdwc2AC4jA2RWtn\",\"EWn8w8P3nNh7knatY\",\"drzQ7837o4ZJbkkDS\",\"vewKwcMeGuk3p3MsN\",\"h4jFmtbFn92eA4649\",\"Y9Nz9yafaibz54W4o\",\"n5Z5LFzfFxyQDuk5N\",\"EAuL56kpyLytw4RcR\",\"Nv5a34gxg5yvLKRW8\",\"Ehrta9env9HXyrGbW\",\"a777e8chPvJkY3tKa\",\"PytNZK9mNiRiZxPrm\",\"AasGs8AeX9Lcb9xJn\",\"QRv96jmNaYsWkxQEG\",\"mHT2bJb5SByfJ8yKS\",\"mDWNyaaQ9hvPCRzSd\",\"aEm3Wvj2rFYRL8Lrb\",\"s7Qqx4Jnuq85iB7Lw\",\"CNc6rmwhbxkxEhHAp\",\"2Qk2mFu9HBFzrB24i\",\"AFfw7cGg83uYk2Miy\",\"M4vq8ATaS9Jg5X7iP\",\"K5TKTbA3XNgRStk69\",\"8SYDBRtkZuW3pdPtG\",\"Xk2g4CNFAnYcvxiSr\",\"AQSqD9oNv2uPfxZCR\",\"s678Wirfor5uYL5T6\",\"8fEgJojXuaWCMzZo9\",\"buX4mCQhtXCfBjeno\",\"xfxkLoQsbZBonmBGp\",\"pWJWQDhqzDSmfaFam\",\"QjGNkRM3Xc78yShJN\",\"wJTDDTE3TrmSXKP4d\",\"jemTNShfp6ymAs3pj\",\"QvEXmSEo3ANp3yPyH\",\"2kk8t3kqNzWvwL7Jj\",\"gxN8e6EXyAJEy4pik\",\"RKKuw76K7sRBMouKq\",\"e3tLGbyqGQ2Zn2GPH\",\"tAF9Gf6PiGogbZuWs\",\"oDtGiNqDMHmhHE3J8\",\"rgmhomEQqsnngdSJZ\",\"P8bXFR4cHwFia9rNM\",\"RE4Mm9T6Q9uygAxGS\"],\"quality\":[5,5,4,3,5,4,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"isHidden\":false,\"quality\":4.5,\"family\":[{\"_id\":\"6v7NRKsdPCCGFnQkG\",\"language\":\"cpp\"},{\"_id\":\"kJu2Hvsr4L2BRZqHW\",\"language\":\"java\"},{\"_id\":\"LQvRrzwHzc2BAXBQx\",\"language\":\"javascript\"},{\"_id\":\"amYH2SMto4yZw9E6n\",\"language\":\"python3\"},{\"_id\":\"9gF4g6zkrMuM3hyTJ\",\"language\":\"ruby\"}]}}"]