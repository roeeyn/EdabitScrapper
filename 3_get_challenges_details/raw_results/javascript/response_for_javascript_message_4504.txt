a["{\"msg\":\"result\",\"id\":\"1006\",\"result\":{\"_id\":\"ALy97jpKC2CPRJsYR\",\"author\":\"er0s\",\"authorId\":\"5Zq3aGdvh4LHBvnJL\",\"code\":\"function constructDeconstruct(str) {\\n\\t\\n}\",\"difficulty\":1.6821192052980132,\"familyId\":\"mh6Sg873h7PBxYqgF\",\"instructions\":\"Given a string, create a function which outputs an array, **building** and **deconstructing** the string *letter by letter*. See the examples below for some helpful guidance.\\n\\n### Examples\\n```\\nconstructDeconstruct(\\\"Hello\\\") ➞ [\\n  \\\"H\\\",\\n  \\\"He\\\",\\n  \\\"Hel\\\",\\n  \\\"Hell\\\",\\n  \\\"Hello\\\",\\n  \\\"Hell\\\",\\n  \\\"Hel\\\",\\n  \\\"He\\\",\\n  \\\"H\\\"\\n]\\n\\nconstructDeconstruct(\\\"edabit\\\") ➞ [\\n  \\\"e\\\",\\n  \\\"ed\\\",\\n  \\\"eda\\\",\\n  \\\"edab\\\",\\n  \\\"edabi\\\",\\n  \\\"edabit\\\",\\n  \\\"edabi\\\",\\n  \\\"edab\\\",\\n  \\\"eda\\\",\\n  \\\"ed\\\",\\n  \\\"e\\\"\\n]\\n\\nconstructDeconstruct(\\\"the sun\\\") ➞ [\\n  \\\"t\\\",\\n  \\\"th\\\",\\n  \\\"the\\\",\\n  \\\"the \\\",\\n  \\\"the s\\\",\\n  \\\"the su\\\",\\n  \\\"the sun\\\",\\n  \\\"the su\\\",\\n  \\\"the s\\\",\\n  \\\"the \\\",\\n  \\\"the\\\",\\n  \\\"th\\\",\\n  \\\"t\\\"\\n]\\n```\\n\\n### Notes\\nInclude spaces (see example #3).\",\"isHidden\":false,\"lab\":\"Test.assertSimilar(constructDeconstruct(\\\"Hello\\\"), [\\n  \\\"H\\\",\\n  \\\"He\\\",\\n  \\\"Hel\\\",\\n  \\\"Hell\\\",\\n  \\\"Hello\\\",\\n  \\\"Hell\\\",\\n  \\\"Hel\\\",\\n  \\\"He\\\",\\n  \\\"H\\\"\\n])\\n\\nTest.assertSimilar(constructDeconstruct(\\\"edabit\\\"), [\\n  \\\"e\\\",\\n  \\\"ed\\\",\\n  \\\"eda\\\",\\n  \\\"edab\\\",\\n  \\\"edabi\\\",\\n  \\\"edabit\\\",\\n  \\\"edabi\\\",\\n  \\\"edab\\\",\\n  \\\"eda\\\",\\n  \\\"ed\\\",\\n  \\\"e\\\"\\n])\\n\\nTest.assertSimilar(constructDeconstruct(\\\"the sun\\\"), [\\n  \\\"t\\\",\\n  \\\"th\\\",\\n  \\\"the\\\",\\n  \\\"the \\\",\\n  \\\"the s\\\",\\n  \\\"the su\\\",\\n  \\\"the sun\\\",\\n  \\\"the su\\\",\\n  \\\"the s\\\",\\n  \\\"the \\\",\\n  \\\"the\\\",\\n  \\\"th\\\",\\n  \\\"t\\\"\\n])\\n\\nTest.assertSimilar(constructDeconstruct(\\\"so long partner\\\"), [\\\"s\\\", \\\"so\\\", \\\"so \\\", \\\"so l\\\", \\\"so lo\\\", \\\"so lon\\\", \\\"so long\\\", \\\"so long \\\", \\\"so long p\\\", \\\"so long pa\\\", \\\"so long par\\\", \\\"so long part\\\", \\\"so long partn\\\", \\\"so long partne\\\", \\\"so long partner\\\", \\\"so long partne\\\", \\\"so long partn\\\", \\\"so long part\\\", \\\"so long par\\\", \\\"so long pa\\\", \\\"so long p\\\", \\\"so long \\\", \\\"so long\\\", \\\"so lon\\\", \\\"so lo\\\", \\\"so l\\\", \\\"so \\\", \\\"so\\\", \\\"s\\\"])\\nTest.assertSimilar(constructDeconstruct(\\\"s p a c e s\\\"), [\\\"s\\\", \\\"s \\\", \\\"s p\\\", \\\"s p \\\", \\\"s p a\\\", \\\"s p a \\\", \\\"s p a c\\\", \\\"s p a c \\\", \\\"s p a c e\\\", \\\"s p a c e \\\", \\\"s p a c e s\\\", \\\"s p a c e \\\", \\\"s p a c e\\\", \\\"s p a c \\\", \\\"s p a c\\\", \\\"s p a \\\", \\\"s p a\\\", \\\"s p \\\", \\\"s p\\\", \\\"s \\\", \\\"s\\\"])\\nTest.assertSimilar(constructDeconstruct(\\\"edabit is a awesome\\\"), [\\\"e\\\", \\\"ed\\\", \\\"eda\\\", \\\"edab\\\", \\\"edabi\\\", \\\"edabit\\\", \\\"edabit \\\", \\\"edabit i\\\", \\\"edabit is\\\", \\\"edabit is \\\", \\\"edabit is a\\\", \\\"edabit is a \\\", \\\"edabit is a a\\\", \\\"edabit is a aw\\\", \\\"edabit is a awe\\\", \\\"edabit is a awes\\\", \\\"edabit is a aweso\\\", \\\"edabit is a awesom\\\", \\\"edabit is a awesome\\\", \\\"edabit is a awesom\\\", \\\"edabit is a aweso\\\", \\\"edabit is a awes\\\", \\\"edabit is a awe\\\", \\\"edabit is a aw\\\", \\\"edabit is a a\\\", \\\"edabit is a \\\", \\\"edabit is a\\\", \\\"edabit is \\\", \\\"edabit is\\\", \\\"edabit i\\\", \\\"edabit \\\", \\\"edabit\\\", \\\"edabi\\\", \\\"edab\\\", \\\"eda\\\", \\\"ed\\\", \\\"e\\\"])\\nTest.assertSimilar(constructDeconstruct(\\\"123456789\\\"), [\\\"1\\\", \\\"12\\\", \\\"123\\\", \\\"1234\\\", \\\"12345\\\", \\\"123456\\\", \\\"1234567\\\", \\\"12345678\\\", \\\"123456789\\\", \\\"12345678\\\", \\\"1234567\\\", \\\"123456\\\", \\\"12345\\\", \\\"1234\\\", \\\"123\\\", \\\"12\\\", \\\"1\\\"])\\nTest.assertSimilar(constructDeconstruct(\\\"\\\"), [])\\nTest.assertSimilar(constructDeconstruct(\\\"        \\\"), [\\\" \\\", \\\"  \\\", \\\"   \\\", \\\"    \\\", \\\"     \\\", \\\"      \\\", \\\"       \\\", \\\"        \\\", \\\"       \\\", \\\"      \\\", \\\"     \\\", \\\"    \\\", \\\"   \\\", \\\"  \\\", \\\" \\\"])\\n\\n// made by @Joshua Señoron\",\"language\":\"javascript\",\"summary\":\"Given a string, create a function which outputs an array, building and deconstructing the string letter by letter. See the examples below for some helpful guidance.\\n\\nExamples\\nconstructDeconstruct(\\\"Hello\\\") ➞ [\\n  \\\"H\\\",\\n  \\\"He\\\",\\n  \\\"Hel\\\",\\n  \\\"Hell\\\",\\n  \\\"Hello\\\",\\n  \\\"Hell\\\",\\n  \\\"Hel\\\",\\n  \\\"He\\\",\\n  \\\"H\\\"\\n]\\n\\nconstructDeconstruct(\\\"edabit\\\") ➞ [\\n  \\\"e\\\",\\n  \\\"ed\\\",\\n  \\\"eda\\\",\\n  \\\"edab\\\",\\n  \\\"\",\"tags\":[\"language_fundamentals\",\"strings\",\"arrays\",\"loops\"],\"timestamp\":{\"$date\":1581792233464},\"title\":\"Construct and Deconstruct\",\"stats\":{\"completed\":{\"total\":178,\"ratings\":[1,1,1,1,1,1,0,1,1,2,1,1,2,1,2,0,2,1,2,1,2,2,1,1,1,2,2,1,2,2,2,0,2,2,1,0,2,2,2,1,0,3,2,3,0,3,2,1,2,2,3,2,1,3,2,2,2,1,1,2,2,2,2,2,1,2,3,2,2,2,2,1,2,2,0,2,2,1,1,2,2,2,0,2,2,2,2,1,3,2,2,2,2,2,0,2,2,2,3,1,3,2,1,2,3,2,2,2,0,1,1,2,1,2,2,2,2,4,2,0,2,2,0,2,2,3,2,1,2,1,2,1,2,2,2,2,2,2,2,5,1,1,2,0,2,2,2,2,2,2,2],\"rators\":[\"5Zq3aGdvh4LHBvnJL\",\"rehehi2Tr2mwaEoJE\",\"n5wubRfh6zh8QRymN\",\"yjtdwc2AC4jA2RWtn\",\"QnPD4Sv6W4LHc2Qng\",\"k5TGxBtLi9BXxeChT\",\"vWhgrr5oem8WtKdxm\",\"Y9Nz9yafaibz54W4o\",\"DPpSwhhiuF4Y9YR2i\",\"AasGs8AeX9Lcb9xJn\",\"zd9FLSzsGz3evKafy\",\"Ynw596LiAeaYq29os\",\"mHT2bJb5SByfJ8yKS\",\"2innwjWqxJHo4eRGh\",\"6BpBQnSGhzgvhXrEy\",\"PNGoni4SgDhkiqFq4\",\"Ctya2wbXp2mQRWsit\",\"RE4Mm9T6Q9uygAxGS\",\"svZJaYSRLJkQjRwDq\",\"zTZtM9jRsu8eXie6s\",\"FKxxtEFynPauWSnFd\",\"xML2sYKr3jpfoTqtJ\",\"7JCLyrrY6JYGpocac\",\"Ehrta9env9HXyrGbW\",\"4p2sARSZNNnKqjAT6\",\"c9sDr9KTB6ZATof4b\",\"xfxkLoQsbZBonmBGp\",\"umE8dRTGWzrZFp755\",\"pi76g3eRpnKrhee2a\",\"Bi3HcWgZm98GEKRec\",\"3aZvfgr2H2WF8Yog2\",\"9Mx6SNtsS82T5hiK5\",\"s5zzhdSQFAa9PbYur\",\"3WQ4Gq36s2N6XcTQT\",\"eANW47mfA359Y6JyP\",\"FJsvM5yqKuK9yMk9P\",\"3uZquLGJm364ZvBZR\",\"SNiJRRosrmSWssLj4\",\"g5noFWaoRtZNcEEAW\",\"cp3X8hk8yNME7qoD9\",\"9Pzg45NEiRXhLtLh3\",\"eFjGhq7C7bBKXjT6X\",\"YER6iBcpJCuhgrYDN\",\"CJnuSjyCBMTbTiibD\",\"tyNrtjfTi56j5Hw9b\",\"2CvHJcA9aXt9pvZwA\",\"uAS9uKs8KQmp8uhqn\",\"9XnGoq9Tv6ut3zTtH\",\"CdJpiqDfdwy9CA4gq\",\"zgoq9MhrL2h75DAMA\",\"EWn8w8P3nNh7knatY\",\"EjPLq3QSJdGQFJdgW\",\"r6FtLwiu6SpgnJJzw\",\"Gxmqy9CyWapTgZTCR\",\"8Z3dkvWBqtrMEE48N\",\"bX6tpTCjwoi6XMMbK\",\"tuTQhfZC5izTmXEgR\",\"E6DBfkTgHuPsDWdG8\",\"d9LBRxvADNBB5QJMB\",\"vtHbevf2tHqe6mRxX\",\"R35tqE5etfTYTfmGr\",\"eomLS3wh6tQPN8jtH\",\"a777e8chPvJkY3tKa\",\"HwZx7c3QFWmt5x4oE\",\"dDFJpK4pXCsQYuHmc\",\"vRsovmMfvfvnR5miw\",\"ipiC2qPhKZWsAouJf\",\"2ZFoLTxcCARhwc8xX\",\"65dbBZynphj53nXqA\",\"zw7g7T8wE5R5CBhXr\",\"z5ebtimXwFFJdYxoa\",\"zXPNAhngtGiZuT2GW\",\"3PenGZ4cKCxZcnd9G\",\"Q9KQomTTPBsrkAL6c\",\"tAF9Gf6PiGogbZuWs\",\"Q75jsoXjhTXJRrw8z\",\"Lzj3w7QjdzikynsGG\",\"4TuceAZ8oTDzsjhir\",\"7wtuhPesfhcYsfZaZ\",\"ub8rqqsdqowCrcxPi\",\"ij9YRJvZz6WbqcGXS\",\"oopQyJEtuzvc9rx9D\",\"BSkoT6o2GweZkqXbc\",\"Wv9v7fHb8umujfg2j\",\"inbiBEY2tizFwkN84\",\"r7mZLgpQWzRiGddL5\",\"2zKQWLmEBw8FBs4ZL\",\"buX4mCQhtXCfBjeno\",\"ZcqshY58sGEEvgeaq\",\"moe6ztrsNzFymC3A7\",\"4ntYzGHHBgqf58udP\",\"eoepTq5ES5tfgY9XT\",\"QRv96jmNaYsWkxQEG\",\"PGCDJpQMN8Sjn9Gm6\",\"nyh73Tr6GhqAat78g\",\"8raviPK67KKxzQWcF\",\"M4vq8ATaS9Jg5X7iP\",\"C9LKGu2g5hSijvDzA\",\"7gZKfvwaeqsGKXMEN\",\"yrLBMbni8KDsC5K44\",\"uwizaEGYJWoyDPfpQ\",\"nAmJEX7BkHLd9LsG2\",\"pLpcDC3EYx2DDQSdt\",\"Po3v3dHCk6wYGKMwi\",\"E2hpke7mHxAWsw5t9\",\"aEm3Wvj2rFYRL8Lrb\",\"2tCCFm5iefjrRSaxv\",\"nkH3HfJXLMNcBMM79\",\"Ya3eHgs8x3unZRLpb\",\"3pb8q4K4jv6jta45d\",\"mfYrBKwDr4hXSFuuN\",\"evTTY9hwrtogaNxXn\",\"kp2ZbCewZJAbfd7xv\",\"u9cRf5kvtpRB5ffB3\",\"vAh63eGRwkuJtoP8v\",\"qWR7eXxBiNee22A5u\",\"g4NCSxxHqHCGMpWwT\",\"CNc6rmwhbxkxEhHAp\",\"BdvdJYwHZr7JpkHsn\",\"JZ5mQXCKxaFjrnGtq\",\"DDokdbBKxv49M445o\",\"AFfw7cGg83uYk2Miy\",\"vGKxRcDYDsXzTQuEQ\",\"jLSZdBseR2kfjt8dL\",\"vewKwcMeGuk3p3MsN\",\"ttuGK7od8simjgmCJ\",\"R9uaMzX2Y4ND8Cosm\",\"Yp7uvStL97cC9fKkY\",\"e9Cknxbx6o7Nb6REs\",\"3Gf7ikLijfoxabiPY\",\"eKSJgCaiy4ReJWXTg\",\"6J6g5TwWz67cN7Zy6\",\"YSmLyP3eRhcFjJPzg\",\"STipuJs6kBvPqqsSE\",\"CH53jGETBeJTummf3\",\"2Qk2mFu9HBFzrB24i\",\"ApqWTmEEkTCsDou48\",\"npp5hesJrst6ghKSM\",\"pPpmP7xeJzGgK362R\",\"J7d397iB5GuWRAMfg\",\"cgCQDs9i7yChKeAjE\",\"JsRTAwWK7Nikj4sKA\",\"wJTDDTE3TrmSXKP4d\",\"jkumHyXfMkhGcPgqC\",\"wBwh8mScSj2dsWK4d\",\"srJ34BaybkQh3qRkM\",\"8BJyXvRWcrvN3nttS\",\"oDtGiNqDMHmhHE3J8\",\"NGvCPuMiAP3xrRLfB\",\"pdsiGN5LX8wu9R9sD\",\"rpNNPWzdFCc9TzKMz\",\"mpLFbFKjY6u3nsDMv\",\"nBJve5CzG6WAw7WFQ\",\"gXTAie79kiw28tx5u\",\"FGEeCTorXbX3WvjFW\",\"LwD3CyYSiBfg3mA4r\",\"jyoLggHk8xQKZuoQC\",\"bfYmA3LMvhSrK59cn\",\"jicWFrNKadYuLhqxh\",\"PTo9qt93YqGvL8fCa\",\"sN2JyFeJCwfwwHPwF\",\"z47JaNrQMgvuPx5HE\",\"oyB4Wr4EeZnoDaa8B\",\"4Ja6cWzfBYL4BDy6Q\",\"LPZ2QKCoB8q6rG25c\",\"uxKGACwmZ6FNZsMwE\",\"jnyub52Fi79drGvow\",\"QHiEYtz3tX3s9nETo\"],\"quality\":[3,5,3,5,5,5,5,5,5,5,5,5,5,5,5,5,4,5,4,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":4.7272727272727275,\"family\":[{\"_id\":\"jikcGNCLLGNpeLKEP\",\"language\":\"cpp\"},{\"_id\":\"ALy97jpKC2CPRJsYR\",\"language\":\"javascript\"},{\"_id\":\"e3RdbwNqcso47X3gu\",\"language\":\"php\"},{\"_id\":\"rwPguhgju54AMR2kM\",\"language\":\"python3\"},{\"_id\":\"M5ENGZahmefiky5Xk\",\"language\":\"ruby\"}]}}"]