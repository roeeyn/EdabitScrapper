a["{\"msg\":\"result\",\"id\":\"1680\",\"result\":{\"_id\":\"Nc75jSjR5nuBfx7TK\",\"author\":\"David Newman\",\"authorId\":\"Po3v3dHCk6wYGKMwi\",\"code\":\"// class Twitter ...\",\"difficulty\":2.3255813953488373,\"editorId\":\"Po3v3dHCk6wYGKMwi\",\"familyId\":\"Jt4D34aCxxGeBpfJk\",\"instructions\":\"One of the most useful new features of JavaScript is *private* class fields. By writing a class like:\\n\\n```\\nclass Person {\\n  #secretMessage = \\\"shhhh!\\\"\\n  constructor(name) {\\n    this.name = name\\n  }\\n}\\n```\\nwe create a private property (`#secretMessage`) that is *only* accessible to stuff inside the class. So while:\\n\\n```\\n class Person {\\n  #secretMessage = \\\"shhhh!\\\"\\n  constructor(name) {\\n    this.name = name\\n    console.log(\\\"I can access the private field!\\\",this.#secretMessage)\\n  }\\n  someClassMethod() {\\n    console.log(\\\"And so can I!\\\",this.#secretMessage)\\n  }\\n}\\n```\\n\\nwill work, the following:\\n\\n```\\nclass Person {\\n #secretMessage = \\\"shhhh!\\\"\\n  constructor(name) {\\n   this.name = name\\n  }\\n}\\nconst bob = new Person(\\\"bob\\\")\\nconsole.log(bob.#secretMessage)\\n```\\n\\nwill *not*. The property `#secretMessage` isn't \\\"available\\\" to outside scopes. So why is this a useful thing?\\n\\n### Use Cases\\nBy using private fields (possibly in conjunction with getters and setters) we can, in essence, allow \\\"protected\\\" access to those fields. Two use cases where this might be important:\\n\\n**Preventing direct modification:**\\n\\n Imagine your class needs a particular array, `myClassArray`, to store some sort of information. However, you don't want external JavaScript to be able to use \\\"normal\\\" array methods to modify the array. Maybe you want to prevent `pop()`ing from the array. With a private field and a getter, we could do that:\\n\\n ```\\n class Person {\\n  #myClassArray = []\\n  constructor(name) {\\n    this.name = name\\n  }\\n  set arrItem(data) {\\n    this.#myClassArray.push(data)\\n  }\\n  get arr() {\\n    return [...this.#myClassArray]\\n  }\\n}\\n```\\n\\nIn the above example, attempting to run `classInstance.myClassArray` would return an error, and there's no way to run a `.pop()` method on the array from outside. The contents of the array are still visible - thanks to our getter `get arr()` - but running `arr.pop()` *does not modify the internal array*.\\n\\n**Hiding fields:**\\nAs the name \\\"private\\\" sort of implies, another major use of private fields is that they can be used to hide certain sensitive data. For example, if we want to store a password in our `Person` class above, one *unsafe* way of doing it would be as follows:\\n\\n```\\nclass Person {\\n  constructor(name, password) {\\n    this.name = name\\n    this.password = password\\n  }\\n}\\n```\\n\\nEven if we encrypt the password, it's still visible for anyone (or any *program*) to attempt to crack. Instead, we can use a private class field, with only a `checkPassword()` method and *no* getter or setter, to add password functionality without risk of exposing our password:\\n\\n```\\nclass Person {\\n  #password\\n  constructor(name, password) {\\n    this.name = name\\n    this.#password = this.encryptMe(password)\\n  }\\n  encryptMe(str) {\\n    // assume this encrypts a string\\n    return encryptedString\\n  }\\n  checkPassword(candidate) {\\n    return this.encryptMe(candidate) == this.#password\\n  }\\n}\\n```\\n\\nNotice that the `#password` field is *never* visible to the outside, and yet we can still use it for authentication!\\n\\nAlright, enough blabbering. What's your goal?\\n\\n### Your Goal\\nDesign a Twitter class. Your class must:\\n\\n - **Private password:** A private password string. Since this is *private*, you can name it whatever you want (as long as it's private!).\\n - **Private tweets array:** A private tweets array. Again, feel free to name this whatever you want (I should *not* have access to it!)\\n - **Constructor(user, pass):** A constructor that takes two arguments - a user and a pass(word) - and sets the *publicly visible* field `this.user` to the incoming user argument.\\n - **Constructor sets password:** It should also set the value of the private password field. Feel free to pass this through an encryption method if you're feeling extra fancy.\\n - **checkPassword() Method:** This method has one parameter - a string - and checks that parameter against the stored, private password, returning a boolean that basically says whether your supplied string matches the stored password.\\n - **\\\"blanked\\\" password setter and getter:** Attempting to read `classInstance.password` should just return four asterisks (`****`). Attempting to set the password (e.g., `classInstance.password = \\\"myNewPassword\\\"`) should do nothing. That is, setting the password to a new value should *not* affect what \\\"works\\\" in the above password checker.\\n - **tweet setter:** This accepts a string and pushes the stringinto the private tweets array. \\n - **tweet getter:** Returns a *copy* of the array of tweets.\\n - **tweetArray.pop() doesn't work:** Running `.pop()` on your tweets array shouldn't 'work'. That is, if I have 5 tweets, run `.pop()`, and then get the length of my tweets array, it should *still read 5*.\\n\\n### Notes\\nThere are a few variables/methods: for this exercise that will need to be named exactly:\\n - `classInstance.user`: the username.\\n - `classInstance.tweet`: The setter for a new tweet.\\n - `classInstance.tweets`: The getter for the list of tweets\\n - `classInstance.checkPassword(str)`: Checks a candidate password against the stored password.\\n - `classInstance.password`: getter that just returns four asterisks (`****`)\\n\\nNotice the difference between \\\"tweet\\\" (the setter) and \\\"tweet**s**\\\" (the getter)!\",\"isFree\":false,\"isHidden\":false,\"lab\":\"console.log('\\\\n---GENERAL:---\\\\n')\\nconsole.log('Did you actually create a Twitter class?')\\nTest.assertEquals(typeof Twitter,'function',`I can't seem to find your Twitter class!`)\\n\\nconst luke = new Twitter('luke','empireSucks'); \\n\\nconsole.log('\\\\n----\\\\nDoes your Twitter class have one and only one public property, \\\"user\\\"?')\\nTest.assertSimilar(Object.keys(luke),['user'],`You have too few or too many publicly visible properties!`)\\n\\nconsole.log('\\\\n---PASSWORD:---\\\\n')\\nconsole.log('\\\\nDoes your Twitter class have a checkPassword method?')\\nTest.assertEquals(typeof luke.checkPassword,'function',`I can't find a checkPassword method!`)\\n\\nconsole.log('\\\\n----\\\\nDoes it return \\\"true\\\" for the correct password?')\\nTest.assertEquals(luke.checkPassword('empireSucks'),true,`Your password checker doesn't seem to work with the correct password!`)\\n\\nconsole.log('\\\\n----\\\\nDoes it return \\\"false\\\" for the wrong password?')\\nTest.assertEquals(luke.checkPassword('palpatineIsMyHomie'),false,`Your password checker is too lenient!`)\\n\\nconsole.log(`\\\\n----\\\\nI'm a malicious party, and I wanna see your password! Can I?`)\\nTest.assertEquals(luke.password,'****',`Hey wait a minute! I shouldn't be able to see your password!`)\\n\\nconsole.log(`\\\\n----\\\\nI see how it is. Well I'm just going to change your password!`)\\nluke.password='palpatineIsMyHomie';\\nTest.assertEquals(luke.checkPassword('palpatineIsMyHomie') || !luke.checkPassword('empireSucks'),false,`I shouldn't be able to change your password!`)\\nconsole.log('\\\\n---TWEETS:---\\\\n')\\nconsole.log(`\\\\nDoes your Twitter class have a setter for \\\"tweet\\\" that does *not* write to a public property?`)\\nluke.tweet=\\\"use the force!\\\";\\nconsole.log(luke)\\nTest.assertEquals(Object.keys(luke).length==1,true,`Your 'tweet' setter must not write to a publicly visible property.`)\\n\\nconsole.log('\\\\n----\\\\nAdd another tweet:')\\nluke.tweet=\\\"I <3 my xwing\\\"\\nTest.assertSimilar(luke.tweets,['use the force!','I <3 my xwing'],`Either your tweet setter isn't adding tweets correctly, or your tweets getter is not reading them correctly.`)\\n\\nconsole.log('\\\\n----\\\\nAnd why not one more, just for fun?')\\nluke.tweet=\\\"#team solo\\\"\\nTest.assertSimilar(luke.tweets,['use the force!','I <3 my xwing','#team solo'],`Either your tweet setter isn't adding tweets correctly, or your tweets getter is not reading them correctly.`)\\n\\nconsole.log('\\\\n----\\\\nLast test: attempting to modify the internal tweets array should *not* work!')\\nluke.tweets.pop();\\nluke.tweets.push('This account has been commandeered by the Galactic Empire');\\nTest.assertSimilar(luke.tweets,['use the force!','I <3 my xwing','#team solo'],`Your tweets getter should not allow direct modifcation of the tweets array.`)\",\"language\":\"javascript\",\"quality\":0,\"stats\":{\"completed\":{\"ratings\":[4,4,4,4,4,0,2,2,0,4,3,3,2,3,1,2,2,5,1,3,4,1,2,2,2,3,2,3,1,1,1,1,2,2,0,3,2,3,3,3,2,2,2],\"quality\":[],\"rators\":[\"Po3v3dHCk6wYGKMwi\",\"vGKxRcDYDsXzTQuEQ\",\"enmqcTwbG9CDNJPe9\",\"PH32cNxBjrK4a28sn\",\"pWJWQDhqzDSmfaFam\",\"z8R4K9Cd7PNuh256A\",\"YLTZRjM78Wi9J9Re4\",\"c7uBxu2rgY77H5d79\",\"eMuCpJ2spXWkJjWNz\",\"Y7xPTPKpNAEiM2jkH\",\"yjtdwc2AC4jA2RWtn\",\"jemTNShfp6ymAs3pj\",\"AasGs8AeX9Lcb9xJn\",\"EexyYR7YAZsTz3iJv\",\"s678Wirfor5uYL5T6\",\"CtonpEZSnh7ZcR4wa\",\"ypKoHDhKkDKTyfqfB\",\"sNcDN3s3rH9wcNg5n\",\"nfd8Rq4PTMfe7a6Ep\",\"M4vq8ATaS9Jg5X7iP\",\"YMYtNJvfTkuGnNwpX\",\"b3pYKiYdjjrJWTZE2\",\"TtrXnGzi9MyhLvWiz\",\"8SYDBRtkZuW3pdPtG\",\"9gEWz76H8KmhN4yJj\",\"3Ry7DQLyLTrHMJKcu\",\"edMP2Y8T3HW89J4KN\",\"AMpQSjKsRqhCDyS2j\",\"QP26bMsAeKw7kKntH\",\"ZJMgDHgh3o6gYpfkG\",\"YSmLyP3eRhcFjJPzg\",\"j5FSQCayX3By73CCw\",\"NpAjngKpPXGwYjSyC\",\"i5QeAsrM4m6hzPTku\",\"w4uwcPc6SGDS4XEGM\",\"sW78rbapvsS3AnuJe\",\"CNc6rmwhbxkxEhHAp\",\"D5Zw8cg3N8FDCe5Dk\"],\"total\":43},\"flags\":0},\"summary\":\"One of the most useful new features of JavaScript is private class fields. By writing a class like:\\n\\nclass Person {\\n  #secretMessage = \\\"shhhh!\\\"\\n  constructor(name) {\\n    this.name = name\\n  }\\n}\\nwe create a private property (#secretMessage) that is only accessible to stuff inside the class. So while:\\n\\n class Person {\\n  #secretMessage = \\\"shhhh!\\\"\\n  constructor(nam\",\"tags\":[\"classes\",\"objects\",\"scope\",\"interview\"],\"timestamp\":{\"$date\":1608148404553},\"title\":\"Private Fields: Designing Twitter\",\"family\":[{\"_id\":\"Nc75jSjR5nuBfx7TK\",\"language\":\"javascript\"}]}}"]