a["{\"msg\":\"result\",\"id\":\"2081\",\"result\":{\"_id\":\"uPMuscpXZgwvZmTer\",\"author\":\"er0s\",\"authorId\":\"5Zq3aGdvh4LHBvnJL\",\"code\":\"function edaPlatform(level, input) {\\n\\t\\n}\",\"difficulty\":2.9166666666666665,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"S5rvSqHTgLzEPsyQi\",\"instructions\":\"In this challenge, process the inputs given by a player playing a simple platform game. Each level of the game is represented by a matrix that contains two sub-arrays:\\n\\n- The first (or upper) array is the _sky_.\\n- The second (or lower) array is the _ground_.\\n\\nEach sub-array contains ten elements, being either collectible items (in the _sky_) or walkeable tiles, pitfalls and enemies (in the _ground_).\\n\\n```\\nlevel1 = [\\n  [\\\" \\\", \\\"°\\\", \\\" \\\", \\\"%\\\", \\\" \\\", \\\" \\\", \\\"°\\\", \\\" \\\", \\\"°\\\", \\\" \\\"],\\n  [\\\"_\\\", \\\"!\\\", \\\"_\\\", \\\"_\\\", \\\" \\\", \\\"_\\\", \\\"_\\\", \\\" \\\", \\\"_\\\", \\\"_\\\"]\\n]\\n```\\n\\nIn the _sky_, there are empty cells (a single space `\\\" \\\"`), coins (a degree symbol `\\\"°\\\"`) and double coins (a percentage symbol `\\\"%\\\"`):\\n\\n- A **coin** is worthy **25 points**.\\n- A **double coin** is worthy **50 points**.\\n\\nIn the _ground_, there are walkeable tiles (an underscore `\\\"_\\\"`), pitfalls (a single space `\\\" \\\"`) and enemies (an exclamation mark `\\\"!\\\"`):\\n\\n- If the player goes through a pitfall or if he touches an enemy, the game ends.\\n\\nThe player starts at the first _ground_ tile (the first cell of the second sub-array), and through its inputs he can do three different moves:\\n\\n`\\\"F\\\"` is for \\\"**F**orward\\\", the player moves to the next tile in the _ground_.\\n\\n```\\n// The \\\"x\\\" is to represent the position of player\\n\\n// With input \\\"F\\\" player moves forward (1 tile)\\n// He touches the enemy\\n\\nlevel1 = [\\n  [\\\" \\\", \\\"°\\\", \\\" \\\", ...],\\n  [\\\"x_\\\", \\\"!\\\", \\\"_\\\", ...]\\n]\\n\\nlevel1 = [\\n  [\\\" \\\", \\\"°\\\", \\\" \\\", ...],\\n  [\\\"_\\\", \\\"x!\\\", \\\"_\\\", ...]\\n]\\n```\\n `\\\"U\\\"` is for \\\"**U**p\\\", the player jumps up from a _ground_ tile touching the _sky_ and falling back in the same _ground_ tile\\n\\n```\\n// The \\\"x\\\" is to represent the position of player\\n\\n// With input \\\"U\\\" the player jumps up and falls back in the same tile\\n// He collects nothing, because there's empty sky\\n\\nlevel1 = [\\n  [\\\" \\\", \\\"°\\\", \\\" \\\" ...],\\n  [\\\"x_\\\", \\\"!\\\", \\\"_\\\" ...]\\n]\\n\\nlevel1 = [\\n  [\\\"x\\\", \\\"°\\\", \\\" \\\" ...],\\n  [\\\"_\\\", \\\"!\\\", \\\"_\\\" ...]\\n]\\n\\nlevel1 = [\\n  [\\\"_\\\", \\\"°\\\", \\\" \\\" ...],\\n  [\\\"x_\\\", \\\"!\\\", \\\"_\\\" ...]\\n]\\n```\\n\\n`\\\"J\\\"` is for \\\"**J**ump\\\", the player jumps up and right from a _ground_ tile reaching the _sky_ in the next frame, and falling at the _ground_ two tiles after its starting position.\\n\\n```\\n// The \\\"x\\\" is to represent the position of player\\n\\n// With input \\\"J\\\" the player jumps up and right\\n// He reach the sky of next frame, and he falls at ground two tiles on the right\\n// He collects a coin avoiding the enemy\\n\\nlevel1 = [\\n  [\\\" \\\", \\\"°\\\", \\\" \\\" ...],\\n  [\\\"x_\\\", \\\"!\\\", \\\"_\\\" ...]\\n]\\n\\nlevel1 = [\\n  [\\\" \\\", \\\"x\\\", \\\" \\\" ...],\\n  [\\\"_\\\", \\\"!\\\", \\\"_\\\" ...]\\n]\\n\\nlevel1 = [\\n  [\\\" \\\", \\\" \\\", \\\" \\\" ...],\\n  [\\\"_\\\", \\\"!\\\", \\\"x_\\\" ...]\\n]\\n```\\n\\nA player submits 10 inputs, and if he reaches the last _ground_ tile (or if he trespass it), the level is completed. If he touches an enemy or falls through a pitfall, it's game over. If the player completes the level (or die) before the tenth input, the game stops so that the inputs in excess are not considered.\\n\\nGiven a matrix `level` and a string of ten uppercase letters `input`, implement a function that returns:\\n\\n- The string `\\\"Level completed! Your score: XXX!\\\"` if the player completes the level.\\n- The string `\\\"Game over! Your score: XXX!\\\"` if the player falls or touches an enemy.\\n\\nReplacing _XXX_ with the score given by the coins and double coins collected before the game stops.\\n\\n### Example 1\\n```\\n// The \\\"x\\\" is to represent the position of player after a move\\n\\nedaPlatform([\\n  [\\\" \\\", \\\"°\\\", \\\" \\\", \\\"%\\\", \\\" \\\", \\\" \\\", \\\"°\\\", \\\" \\\", \\\"°\\\", \\\" \\\"],\\n  [\\\"_\\\", \\\"!\\\", \\\"_\\\", \\\"_\\\", \\\" \\\", \\\"_\\\", \\\"_\\\", \\\" \\\", \\\"_\\\", \\\"_\\\"]\\n], \\\"JFUJFUJUFF\\\") ➞ \\\"Level completed! Your score: 125!\\\"\\n\\n// J: Player jumps up and right to avoid the enemy, collecting a coin for 25 points\\n\\n[\\n  [\\\" \\\", \\\" \\\", \\\" \\\", \\\"%\\\", \\\" \\\", \\\" \\\", \\\"°\\\", \\\" \\\", \\\"°\\\", \\\" \\\"],\\n  [\\\"_\\\", \\\"!\\\", \\\"x\\\", \\\"_\\\", \\\" \\\", \\\"_\\\", \\\"_\\\", \\\" \\\", \\\"_\\\", \\\"_\\\"]\\n]\\n\\n// F: Player goes forward\\n\\n[\\n  [\\\" \\\", \\\" \\\", \\\" \\\", \\\"%\\\", \\\" \\\", \\\" \\\", \\\"°\\\", \\\" \\\", \\\"°\\\", \\\" \\\"],\\n  [\\\"_\\\", \\\"!\\\", \\\"_\\\", \\\"x\\\", \\\" \\\", \\\"_\\\", \\\"_\\\", \\\" \\\", \\\"_\\\", \\\"_\\\"]\\n]\\n\\n// U: Player jumps up collecting a double coin for 50 points\\n\\n[\\n  [\\\" \\\", \\\" \\\", \\\" \\\", \\\" \\\", \\\" \\\", \\\" \\\", \\\"°\\\", \\\" \\\", \\\"°\\\", \\\" \\\"],\\n  [\\\"_\\\", \\\"!\\\", \\\"_\\\", \\\"x\\\", \\\" \\\", \\\"_\\\", \\\"_\\\", \\\" \\\", \\\"_\\\", \\\"_\\\"]\\n]\\n\\n// J: Player jumps up and right to avoid the pitfall\\n\\n[\\n  [\\\" \\\", \\\" \\\", \\\" \\\", \\\" \\\", \\\" \\\", \\\" \\\", \\\"°\\\", \\\" \\\", \\\"°\\\", \\\" \\\"],\\n  [\\\"_\\\", \\\"!\\\", \\\"_\\\", \\\" \\\", \\\" \\\", \\\"x\\\", \\\"_\\\", \\\" \\\", \\\"_\\\", \\\"_\\\"]\\n]\\n\\n// F: Player goes forward\\n\\n[\\n  [\\\" \\\", \\\" \\\", \\\" \\\", \\\" \\\", \\\" \\\", \\\" \\\", \\\"°\\\", \\\" \\\", \\\"°\\\", \\\" \\\"],\\n  [\\\"_\\\", \\\"!\\\", \\\"_\\\", \\\" \\\", \\\" \\\", \\\"_\\\", \\\"x\\\", \\\" \\\", \\\"_\\\", \\\"_\\\"]\\n]\\n\\n// U: Player jumps up collecting a coin for 25 points\\n\\n[\\n  [\\\" \\\", \\\" \\\", \\\" \\\", \\\" \\\", \\\" \\\", \\\" \\\", \\\" \\\", \\\" \\\", \\\"°\\\", \\\" \\\"],\\n  [\\\"_\\\", \\\"!\\\", \\\"_\\\", \\\" \\\", \\\" \\\", \\\"_\\\", \\\"x\\\", \\\" \\\", \\\"_\\\", \\\"_\\\"]\\n]\\n\\n// J: Player jumps up and right to avoid the pitfall\\n\\n[\\n  [\\\" \\\", \\\" \\\", \\\" \\\", \\\" \\\", \\\" \\\", \\\" \\\", \\\" \\\", \\\" \\\", \\\"°\\\", \\\" \\\"],\\n  [\\\"_\\\", \\\"!\\\", \\\"_\\\", \\\" \\\", \\\" \\\", \\\"_\\\", \\\"_\\\", \\\" \\\", \\\"x\\\", \\\"_\\\"]\\n]\\n\\n// U: Player jumps up to collect a coin\\n\\n[\\n  [\\\" \\\", \\\" \\\", \\\" \\\", \\\" \\\", \\\" \\\", \\\" \\\", \\\" \\\", \\\" \\\", \\\" \\\", \\\" \\\"],\\n  [\\\"_\\\", \\\"!\\\", \\\"_\\\", \\\" \\\", \\\" \\\", \\\"_\\\", \\\"_\\\", \\\" \\\", \\\"x\\\", \\\"_\\\"]\\n]\\n\\n// F: Player goes forward to the last tile and completes the level\\n\\n[\\n  [\\\" \\\", \\\" \\\", \\\" \\\", \\\" \\\", \\\" \\\", \\\" \\\", \\\" \\\", \\\" \\\", \\\" \\\", \\\" \\\"],\\n  [\\\"_\\\", \\\"!\\\", \\\"_\\\", \\\" \\\", \\\" \\\", \\\"_\\\", \\\"_\\\", \\\" \\\", \\\"_\\\", \\\"x\\\"]\\n]\\n\\n// The last input \\\"F\\\" is not considered because the level has been completed\\n\\n```\\n### Example 2\\n```\\n// The \\\"x\\\" is to represent the position of player after a move\\n\\nedaPlatform([\\n  [\\\" \\\", \\\"°\\\", \\\" \\\", \\\"%\\\", \\\" \\\", \\\" \\\", \\\"°\\\", \\\" \\\", \\\"°\\\", \\\" \\\"],\\n  [\\\"_\\\", \\\"!\\\", \\\"_\\\", \\\"_\\\", \\\" \\\", \\\"_\\\", \\\"_\\\", \\\" \\\", \\\"_\\\", \\\"_\\\"]\\n], \\\"JFFJUJJUFF\\\") ➞ \\\"Game over! Your score: 25!\\\"\\n\\n// J: Player jumps up and right to avoid the enemy, collecting a coin for 25 points\\n\\n[\\n  [\\\" \\\", \\\" \\\", \\\" \\\", \\\"%\\\", \\\" \\\", \\\" \\\", \\\"°\\\", \\\" \\\", \\\"°\\\", \\\" \\\"],\\n  [\\\"_\\\", \\\"!\\\", \\\"x\\\", \\\"_\\\", \\\" \\\", \\\"_\\\", \\\"_\\\", \\\" \\\", \\\"_\\\", \\\"_\\\"]\\n]\\n\\n// F: Player goes forward\\n\\n[\\n  [\\\" \\\", \\\" \\\", \\\" \\\", \\\"%\\\", \\\" \\\", \\\" \\\", \\\"°\\\", \\\" \\\", \\\"°\\\", \\\" \\\"],\\n  [\\\"_\\\", \\\"!\\\", \\\"_\\\", \\\"x\\\", \\\" \\\", \\\"_\\\", \\\"_\\\", \\\" \\\", \\\"_\\\", \\\"_\\\"]\\n]\\n\\n// F: Player goes forward and falls through the pitfall\\n\\n[\\n  [\\\" \\\", \\\" \\\", \\\" \\\", \\\"%\\\", \\\" \\\", \\\" \\\", \\\"°\\\", \\\" \\\", \\\"°\\\", \\\" \\\"],\\n  [\\\"_\\\", \\\"!\\\", \\\"_\\\", \\\"_\\\", \\\"fall\\\", \\\"_\\\", \\\"_\\\", \\\" \\\", \\\"_\\\", \\\"_\\\"]\\n]\\n\\n// The other seven inputs are not considered because it's game over\\n```\\n\\n### Example 3\\n```\\n// The \\\"x\\\" is to represent the position of player after a move\\n\\nedaPlatform([\\n  [\\\" \\\", \\\"°\\\", \\\" \\\", \\\"%\\\", \\\" \\\", \\\" \\\", \\\"°\\\", \\\" \\\", \\\"°\\\", \\\" \\\"],\\n  [\\\"_\\\", \\\"!\\\", \\\"_\\\", \\\"_\\\", \\\" \\\", \\\"_\\\", \\\"_\\\", \\\" \\\", \\\"_\\\", \\\"_\\\"]\\n], \\\"FFFFJJUJJJ\\\") ➞ \\\"Game over! Your score: 0!\\\"\\n\\n// F: Player goes forward and touches the enemy\\n\\n[\\n  [\\\" \\\", \\\"°\\\", \\\" \\\", \\\"%\\\", \\\" \\\", \\\" \\\", \\\"°\\\", \\\" \\\", \\\"°\\\", \\\" \\\"],\\n  [\\\"_\\\", \\\"enemy\\\", \\\"_\\\", \\\"_\\\", \\\" \\\", \\\"_\\\", \\\"_\\\", \\\" \\\", \\\"_\\\", \\\"_\\\"]\\n]\\n\\n// The other 9 inputs are not considered\\n```\\n\\n### Notes\\n- Remember that a level is completed if the player reaches the last _ground_ tile or if he trespass it through a **J**UMP.\\n- Data (levels and inputs) will be always valid. You can assume that an end is always assured (through completing the level or through a game over).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"let level1 = [\\n\\t[\\\" \\\", \\\"°\\\", \\\" \\\", \\\"%\\\", \\\" \\\", \\\" \\\", \\\"°\\\", \\\" \\\", \\\"°\\\", \\\" \\\"],\\n\\t[\\\"_\\\", \\\"!\\\", \\\"_\\\", \\\"_\\\", \\\" \\\", \\\"_\\\", \\\"_\\\", \\\" \\\", \\\"_\\\", \\\"_\\\"]\\n],\\n\\t\\tinput1a = \\\"JFUJFUJUFF\\\",\\n\\t\\tinput1b = \\\"JFJFJFFFFF\\\",\\n\\t\\tinput1c = \\\"JFFJUJJUFF\\\",\\n\\t\\tinput1d = \\\"FFFFJJUJJJ\\\";\\n\\nTest.assertEquals(edaPlatform(level1, input1a), \\\"Level completed! Your score: 125!\\\");\\nTest.assertEquals(edaPlatform(level1, input1b), \\\"Level completed! Your score: 25!\\\");\\nTest.assertEquals(edaPlatform(level1, input1c), \\\"Game over! Your score: 25!\\\");\\nTest.assertEquals(edaPlatform(level1, input1d), \\\"Game over! Your score: 0!\\\");\\n\\nlet level2 = [\\n\\t[\\\" \\\", \\\"°\\\", \\\"°\\\", \\\" \\\", \\\" \\\", \\\" \\\", \\\"°\\\", \\\" \\\", \\\" \\\", \\\"%\\\"],\\n\\t[\\\"_\\\", \\\"_\\\", \\\" \\\", \\\"_\\\", \\\"_\\\", \\\"!\\\", \\\"_\\\", \\\"!\\\", \\\"_\\\", \\\"_\\\"]\\n],\\n\\t\\tinput2a = \\\"FUJFJUJJFF\\\",\\n\\t\\tinput2b = \\\"FJFJJFJJUF\\\",\\n\\t\\tinput2c = \\\"JFUFFFJUUU\\\",\\n\\t\\tinput2d = \\\"FJFFUJJFUJ\\\";\\n\\nTest.assertEquals(edaPlatform(level2, input2a), \\\"Level completed! Your score: 125!\\\");\\nTest.assertEquals(edaPlatform(level2, input2b), \\\"Level completed! Your score: 25!\\\");\\nTest.assertEquals(edaPlatform(level2, input2c), \\\"Game over! Your score: 25!\\\");\\nTest.assertEquals(edaPlatform(level2, input2d), \\\"Game over! Your score: 25!\\\");\\n\\nlet level3 = [\\n\\t[\\\" \\\", \\\"°\\\", \\\" \\\", \\\"%\\\", \\\" \\\", \\\" \\\", \\\"°\\\", \\\" \\\", \\\" \\\", \\\"%\\\"],\\n\\t[\\\"_\\\", \\\"_\\\", \\\" \\\", \\\"_\\\", \\\"_\\\", \\\" \\\", \\\"_\\\", \\\"!\\\", \\\"_\\\", \\\"_\\\"]\\n],\\n\\t\\tinput3a = \\\"FUJUFJUJJU\\\",\\n\\t\\tinput3b = \\\"FJFJJFJJUF\\\",\\n\\t\\tinput3c = \\\"FFUJJFFJUF\\\",\\n\\t\\tinput3d = \\\"FJUFFJFJUJ\\\";\\n\\nTest.assertEquals(edaPlatform(level3, input3a), \\\"Level completed! Your score: 150!\\\");\\nTest.assertEquals(edaPlatform(level3, input3b), \\\"Level completed! Your score: 0!\\\");\\nTest.assertEquals(edaPlatform(level3, input3c), \\\"Game over! Your score: 0!\\\");\\nTest.assertEquals(edaPlatform(level3, input3d), \\\"Game over! Your score: 50!\\\");\\n\\nlet level4 = [\\n\\t[\\\" \\\", \\\" \\\", \\\" \\\", \\\"%\\\", \\\" \\\", \\\" \\\", \\\"°\\\", \\\" \\\", \\\"%\\\", \\\" \\\"],\\n\\t[\\\"_\\\", \\\"_\\\", \\\"!\\\", \\\"_\\\", \\\"!\\\", \\\"_\\\", \\\"!\\\", \\\"_\\\", \\\" \\\", \\\"_\\\"]\\n],\\n\\t\\tinput4a = \\\"FJUJJJUUFF\\\",\\n\\t\\tinput4b = \\\"FFJJJFFUJF\\\",\\n\\t\\tinput4c = \\\"JJUFFJJUJF\\\",\\n\\t\\tinput4d = \\\"FJUFFJUJFF\\\";\\n\\nTest.assertEquals(edaPlatform(level4, input4a), \\\"Level completed! Your score: 125!\\\");\\nTest.assertEquals(edaPlatform(level4, input4b), \\\"Game over! Your score: 0!\\\");\\nTest.assertEquals(edaPlatform(level4, input4c), \\\"Game over! Your score: 0!\\\");\\nTest.assertEquals(edaPlatform(level4, input4d), \\\"Game over! Your score: 50!\\\");\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,3,2,3,3,4,2,4,4,3,3,4,4,4,3,5,0,3,4],\"rators\":[\"5Zq3aGdvh4LHBvnJL\",\"yjtdwc2AC4jA2RWtn\",\"n5wubRfh6zh8QRymN\",\"6BpBQnSGhzgvhXrEy\",\"FJsvM5yqKuK9yMk9P\",\"2innwjWqxJHo4eRGh\",\"GCsLzWAhLvniQqR3J\",\"mM4qMQLar7brXtfwG\",\"ZXRMRAJNP6eseLdbR\",\"u37upKZSmCKTQvQqX\",\"pd8dm7sWLW9cY6dYW\",\"JGBCMpnbbi5ztuFoX\",\"M4vq8ATaS9Jg5X7iP\",\"mHT2bJb5SByfJ8yKS\",\"aEm3Wvj2rFYRL8Lrb\",\"8BJyXvRWcrvN3nttS\",\"h4jFmtbFn92eA4649\",\"7wtuhPesfhcYsfZaZ\",\"oDtGiNqDMHmhHE3J8\"],\"total\":21,\"quality\":[]},\"flags\":0},\"summary\":\"In this challenge, process the inputs given by a player playing a simple platform game. Each level of the game is represented by a matrix that contains two sub-arrays:\\n\\nThe first (or upper) array is the sky.\\nThe second (or lower) array is the ground.\\n\\nEach sub-array contains ten elements, being either collectible items (in the sky) or walkeable tiles, pitfalls\",\"tags\":[\"arrays\",\"loops\",\"data_structures\",\"games\"],\"timestamp\":{\"$date\":1581959738049},\"title\":\"Edabit Platform\",\"quality\":0,\"family\":[{\"_id\":\"uPMuscpXZgwvZmTer\",\"language\":\"javascript\"}]}}"]