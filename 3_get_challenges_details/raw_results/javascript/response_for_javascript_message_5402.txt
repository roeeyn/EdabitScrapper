a["{\"msg\":\"result\",\"id\":\"1451\",\"result\":{\"_id\":\"nSg24HbusyCQKn9xk\",\"author\":\"jmichael12\",\"authorId\":\"CJnuSjyCBMTbTiibD\",\"code\":\"function getBestStudent(grades) {\\n\\t\\n}\",\"difficulty\":2.1658767772511847,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"XFJqLacdNYCzYp5FA\",\"instructions\":\"Given an object with students and the grades that they made on the tests that they took, determine which student has the best Test Average. The `key` will be the student's name and the `value` will be an array of their grades. You will only have to **return the student's name**. You do not need to return their Test Average.\\n\\n### Examples\\n```\\ngetBestStudent({\\n  John: [100, 90, 80],\\n  Bob: [100, 70, 80]\\n}) ➞ \\\"John\\\"\\n\\n// John's avg = 90\\n// Bob's avg = 83.33\\n\\ngetBestStudent({\\n  Susan: [67, 84, 75, 63],\\n  Mike: [87, 98, 64, 71],\\n  Jim: [90, 58, 73, 86]\\n}) ➞ \\\"Mike\\\"\\n```\\n\\n### Notes\\nAll students in an object will have the same amount of test scores. So no student will have taken more tests than another.\",\"isHidden\":false,\"lab\":\"Test.assertSimilar(getBestStudent({\\n\\tJohn: [100, 90, 80],\\n\\tBob: [100, 70, 80]\\n}), \\\"John\\\", \\\"Example #1\\\")\\n\\nTest.assertSimilar(getBestStudent({\\n\\tSusan: [67, 84, 75, 63],\\n  Mike: [87, 98, 64, 71],\\n  Jim: [90, 58, 73, 86]\\n}), \\\"Mike\\\", \\\"Example #2\\\")\\n\\nTest.assertSimilar(getBestStudent({\\n\\tTim: [93, 84, 49, 71, 76, 83],\\n  Nick: [88, 91, 74, 72, 63, 68],\\n  Brad: [100, 94, 72, 64, 58, 81],\\n\\tAnnie: [79, 93, 82, 82, 63, 87]\\n}), \\\"Annie\\\")\\n\\nTest.assertSimilar(getBestStudent({\\n\\tEddie: [65, 85, 72, 76],\\n  Brock: [55, 97, 82, 91],\\n  Jessica: [78, 62, 79, 99]\\n}), \\\"Brock\\\")\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,2,2,2,2,1,3,0,1,2,2,3,2,3,2,0,2,2,2,2,2,2,1,2,2,3,3,3,1,3,2,3,5,2,3,1,2,2,2,1,1,2,2,1,3,3,2,2,1,2,1,2,0,1,4,2,2,2,3,2,0,2,3,1,3,3,3,2,2,1,3,3,3,3,2,3,2,3,3,3,3,3,3,3,0,3,2,2,3,0,3,2,0,3,4,2,2,1,1,2,3,3,1,2,3,3,2,3,3,1,3,2,2,3,2,0,2,3,2,3,1,2,2,1,2,2,3,3,2,1,3,3,1,5,2,0,3,0,3,1,2,3,3,2,2,3,2,2,3,0,2,3,3,2,2,2,2,2,2,3,1,2,2,3,3,2,2,3,3,2,3,3,3,3,2,1,3,2,3,1,2,3,3,0,3,3,3,3,1,2,2,2,2,2,2,2,2,2,3,3,2,2,3,2,2,3],\"rators\":[\"CJnuSjyCBMTbTiibD\",\"5Zq3aGdvh4LHBvnJL\",\"RSZmq4pgydJ87wErN\",\"NWoKXTZmvmP22BQfx\",\"65dbBZynphj53nXqA\",\"yjtdwc2AC4jA2RWtn\",\"uAFSW7ft6t7uK4kGc\",\"DHwbkbzYNpmkSFT7u\",\"ksNkXwuYAy7TNQGYr\",\"mHT2bJb5SByfJ8yKS\",\"AbmpHAgPa7viMxucA\",\"YAwDJqjpWzQbMZZLr\",\"HqGhxkD6xG5nmfG77\",\"8BRs32CR2AuYbtazR\",\"EjPLq3QSJdGQFJdgW\",\"AXcnPX68zdMiLNSmu\",\"bzdxZkcwjY2SFZRxf\",\"28w8SkjEi55Kbo2kb\",\"jYWQBr8A2NiTy5hSX\",\"XKi8iZXBCHCaebSHh\",\"FJsvM5yqKuK9yMk9P\",\"AasGs8AeX9Lcb9xJn\",\"Q9KQomTTPBsrkAL6c\",\"byrKwHgawbFgyAcgo\",\"mEikjStfMto2ucpxX\",\"jAJx9vk7M9nnFmZWz\",\"Y9Nz9yafaibz54W4o\",\"39JiAZzrxpBGFib5o\",\"h4jFmtbFn92eA4649\",\"RE4Mm9T6Q9uygAxGS\",\"MRedsQ5gbonhjmZzW\",\"J45LRB5Zfvynst62D\",\"Cxdhr3m4fcLF8nepr\",\"fGsCtqXCmxLKbNimY\",\"6BpBQnSGhzgvhXrEy\",\"n5wubRfh6zh8QRymN\",\"nPksTLLtK84HKK8Zz\",\"nB2zvS7Cwaz58JyfP\",\"jqbm8L6895JgAtZ6H\",\"cRpaCxYRmGcN3Nsoj\",\"pd8dm7sWLW9cY6dYW\",\"9wvfNn9QxssM7EdL8\",\"zgoq9MhrL2h75DAMA\",\"yuP37ekySEJ9iW6Za\",\"BdvdJYwHZr7JpkHsn\",\"EWn8w8P3nNh7knatY\",\"2NJuDfSqdrF8kHHni\",\"2innwjWqxJHo4eRGh\",\"TQPurWBLefqKu2HKM\",\"nuYLLaJCtitSD5no5\",\"5pEWJyHf5kNDyu9fi\",\"2NGSwAJk9NHt3toCo\",\"4YQYMKAinTbZjed9D\",\"z6QfbuG6TXE7GKynQ\",\"RyAFEHBBXcHpAf8Qv\",\"EJXaAcika2bAcRAta\",\"KcpfY4XZ7fNamyLd3\",\"vThHLd8MLkmyJHox9\",\"vGZZ4JnFEwAoFTLtd\",\"5m3Z7YdQXJriuq7JG\",\"TPrfNreYTj6pQQBh7\",\"9XnGoq9Tv6ut3zTtH\",\"74fAx6fd26LEPEKmi\",\"rSJGLYSXMuu3RWjun\",\"R35tqE5etfTYTfmGr\",\"NuYBzuKMdMGYZhiqG\",\"dP6Hqxfg3BYQ7xwYz\",\"yFjWRGvstfQYKfwfA\",\"yQtGE2egvwYnNQSFc\",\"7mLTn6DXHCcoHztgM\",\"nGmLgqNsb7F3JdKmE\",\"fxe5vvH6WnsXwDqYp\",\"u5d63NujAhP97RXex\",\"bcKe5zMGZMnqHyuyr\",\"49uuzwkpBg45xAwrN\",\"QrsnzdvnH9bh4FxCe\",\"zTZtM9jRsu8eXie6s\",\"tyNrtjfTi56j5Hw9b\",\"5yrfEbCSTrbsGPKt5\",\"6bdrbeWGHM65ybcCm\",\"YER6iBcpJCuhgrYDN\",\"g8FoJejyZNJdL9yNw\",\"qfNfcHcD2sEyjgKQD\",\"E3qTTy7ZJqFyok6a3\",\"3aZvfgr2H2WF8Yog2\",\"a777e8chPvJkY3tKa\",\"pi76g3eRpnKrhee2a\",\"AR3Fxqo7Z66S9Dwuf\",\"zFt5tvJjusuHyRvkw\",\"Gjusxf7tuPbSiz67J\",\"42nmwQg324z7g2qNW\",\"PhgNujGtv72KdaFF6\",\"cp3X8hk8yNME7qoD9\",\"dTYkEvzTGNngfE9hn\",\"HwZx7c3QFWmt5x4oE\",\"4NqJ45RTYdWLfXgf7\",\"3AoqMu5gB99yjbKNY\",\"oM5uLqsaNZu9taNXh\",\"GCsLzWAhLvniQqR3J\",\"8Z3dkvWBqtrMEE48N\",\"733qgZ7ZSSSrzbXGw\",\"eQXwk5zGckM8tCWYH\",\"E2hpke7mHxAWsw5t9\",\"rC7kdm3SsSX9udEQk\",\"rfpGGJ6wxCCisiMdi\",\"qbJadqN4xbQHx4RK4\",\"Zk9YD2iBys7tptWeZ\",\"buX4mCQhtXCfBjeno\",\"GRyC4YedF54tTnD7o\",\"aEm3Wvj2rFYRL8Lrb\",\"ZcqshY58sGEEvgeaq\",\"4deyTem4Z3zgPLEv7\",\"kjHKdTBzc77g63Y6P\",\"r7mZLgpQWzRiGddL5\",\"vbkL4GnKbcNEcKNtX\",\"QRv96jmNaYsWkxQEG\",\"RRFsDNRaKW6h9tF3Y\",\"8raviPK67KKxzQWcF\",\"dzSfaxKjksW83ipMk\",\"P3mnfZ2oegg72SmBS\",\"QozwRCt9hwyqeFB5i\",\"vt88eKvFz6ES8sbrD\",\"ETT2KDW4pvro7zNRc\",\"y6wd5dd3thLtfr7Rk\",\"3pb8q4K4jv6jta45d\",\"hEMT8i5crpSPtRXy6\",\"eFjGhq7C7bBKXjT6X\",\"8BJyXvRWcrvN3nttS\",\"9Eaf6Bnk3rLGsSgtH\",\"FioqXbWFJxdCop35Z\",\"dk2aGfRcWM4ybXLaP\",\"RzmXx77rzobF7Gtsj\",\"4fiWpdPMsXkC8nJK4\",\"ro4W36ttXuSLWfvnx\",\"Df6D5WEasHwoPYDwq\",\"MTjPQRWY6abEbMTXM\",\"PNaLsSGwFfxXmrsG9\",\"y6CXH4vDBokGZCbMc\",\"6i28riQA2TMvTboE9\",\"8jM9k53NtydaDgeyy\",\"f989z9n399T33z3eX\",\"Ghu2S7AbFehRgfgRd\",\"g3Bq6N2TtNzEk8oPm\",\"bX6tpTCjwoi6XMMbK\",\"LMqMrKGmiG5WnuSDW\",\"YLTZRjM78Wi9J9Re4\",\"tAF9Gf6PiGogbZuWs\",\"CNc6rmwhbxkxEhHAp\",\"PGCDJpQMN8Sjn9Gm6\",\"5DJwdKWJxmsxDHZHk\",\"sySmCuRJCCi2dtLLM\",\"acHSYL6uQAgpgFMjp\",\"Y7xPTPKpNAEiM2jkH\",\"zw7g7T8wE5R5CBhXr\",\"DEyEWZanqxg8vsLu7\",\"ct42f2gGpMXSd9hXM\",\"hFtPRTy5nwHG3mdGT\",\"yK7zzK2aGJwuWKHRL\",\"vGKxRcDYDsXzTQuEQ\",\"XtZfZuXwcaivjtS3T\",\"sHnfwDzKzmeApjTv8\",\"PH32cNxBjrK4a28sn\",\"oyPQ39i4BiFdj3M2E\",\"zxPjtzb9YDudyLfqJ\",\"hckziKa5JJ2AYLEfT\",\"B9DPj5QaxKwp9cZTS\",\"eEZ8zeWX8b3SWs84P\",\"LCn6qz2GoMr5577Rd\",\"x85b48MBrjnBk6syq\",\"MDB8SEdK38bnRjzYi\",\"XAGJuJRsgxZNiAN9C\",\"YRdu63HNTKd6YmWpd\",\"g4NCSxxHqHCGMpWwT\",\"yQTEno4MW9cRkBYct\",\"bHsthPTZofn9qWAxG\",\"YtFKHKLcYNbMESmrR\",\"6vfjruFp8ZpRSi3AT\",\"e9Cknxbx6o7Nb6REs\",\"PTo9qt93YqGvL8fCa\",\"u9cRf5kvtpRB5ffB3\",\"srJ34BaybkQh3qRkM\",\"SKdjpMNXDwnRAWSBD\",\"ybT9GndYoDiiXfiPr\",\"3JWh9viLkgt2FgQbL\",\"BR286kod9kynY9MCB\",\"jYJXqDYoXsvk5ayBN\",\"cP8vRmcM32oCPieys\",\"pPZ9q4w2TKbkNPgyC\",\"d8JhF9zfpexkRnCea\",\"ftXLsTaA7yHmhuEsY\",\"7mb98wycMN73KRcpo\",\"qaTBhX3GmKtDpF6gk\",\"aavYnYfTkbjzaAByg\",\"wJTDDTE3TrmSXKP4d\",\"2Qk2mFu9HBFzrB24i\",\"TsFGjBwMjMg5y5ED5\",\"ZLYBfAascpgGofCPk\",\"Q7Yxda7dqKeYPs2Db\",\"9RXzpe6MbhApKeiQY\",\"mSXdgt48tnZ2xWAuG\",\"qt8twQA7KhhXHD2w2\",\"LZ9fqQk8rThDXEe8R\",\"NGvCPuMiAP3xrRLfB\",\"jphKCLddWR4Mbmfwi\",\"Jf2CJyrjenaqixHcB\",\"ipTmetLBmD4M5XhRs\",\"SHadEqXxgvYb92STW\",\"QguFWo84zgF3c8BGr\",\"7DXJ3mvKMHHqBLt92\",\"utE54kE6D3ZnSN8Zb\",\"ShrXg4RHgnyFjzJ8w\",\"ZszXiwrziF8L8ayQH\",\"Xk2g4CNFAnYcvxiSr\",\"HHNSBLTaSsZjsWG3D\",\"J7d397iB5GuWRAMfg\",\"mnyrXvdFpDG4iZS75\",\"NJCmkbH5e7qbtZYhd\",\"eubunaiBju422gmhF\",\"b9tvo98TTakd7ZQuM\",\"igxTNbFK88DewDdDd\",\"oDtGiNqDMHmhHE3J8\",\"8DsMHvxeoun9m3RpY\",\"Ya3eHgs8x3unZRLpb\",\"sN2JyFeJCwfwwHPwF\",\"MNPkQR6AKTX4uc8yG\",\"76rZ57Yc5w8KcuR4S\",\"qxJsveeK8j6L38MtP\",\"WnogMFYXoyvmBmGkm\",\"2qS2N7bLZGXrWuQcg\",\"nw3rZ4ap8trEDtPRX\",\"M2XabkCfwshCxWnse\",\"Jaa42WatFnthgTtSM\",\"hMJTbbc24SiMauj7i\",\"ua4C5qhCa6jL8K6N4\",\"gSrqu8MsZMFSxxWAZ\",\"5FWeZaz4PwgYgdkh4\",\"z3JCuFqRbMmpRJecC\",\"46SBqYjYrHQhMzp2Y\",\"ERKhKvZtbX7cXNRBP\",\"zoSGvhHbsBykZTuDc\",\"cMrC2pMsBg7TLEMBA\",\"nzrc7fWFve7zCiABR\",\"swfgw7ekP26tzNPfS\",\"ThaiAKWWDw2W4QfJh\",\"FY7atTfxaahfAHtJv\",\"GAD2uPxRGpiHuvFDb\",\"AEJxxLFCeCeBDDbT2\",\"vwTy7y6pLbJpL7aqQ\",\"6NsnBgRebiPP2ZwsS\",\"Mc6jrJLswgZGYBqzZ\"],\"total\":288,\"quality\":[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,5,5,5,5,5,5]},\"flags\":0},\"summary\":\"Given an object with students and the grades that they made on the tests that they took, determine which student has the best Test Average. The key will be the student's name and the value will be an array of their grades. You will only have to return the student's name. You do not need to return their Test Average.\\n\\nExamples\\ngetBestStudent({\\n  John: [100, 90,\",\"tags\":[\"objects\",\"arrays\",\"sorting\",\"loops\"],\"timestamp\":{\"$date\":1574282524328},\"title\":\"Get Student with Best Test Avg.\",\"quality\":4.909090909090909,\"family\":[{\"_id\":\"nSg24HbusyCQKn9xk\",\"language\":\"javascript\"},{\"_id\":\"pnd7xPYuvogkNfHg6\",\"language\":\"python3\"},{\"_id\":\"ALrBpait7dY5W49oJ\",\"language\":\"ruby\"}]}}"]