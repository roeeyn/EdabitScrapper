a["{\"msg\":\"result\",\"id\":\"992\",\"result\":{\"_id\":\"5cahgiMrJ6M52XbNa\",\"author\":\"Isaac Pak\",\"authorId\":\"yaL57wdXmgAZTvKfX\",\"code\":\"let key = \\\"foo\\\"\\nconst str = `({[key] : \\\"foo\\\"} = {foo: \\\"Jessie\\\"}).toString()`\",\"difficulty\":1.6717557251908397,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"c36b7KLjCeZYJMtA5\",\"instructions\":\"In normal object literals you can create dynamic property names by using **computed** values:\\n\\n```\\nlet key = \\\"name\\\"\\nlet foo = {[key]: \\\"bar\\\"}\\n\\nconsole.log(foo.name); // \\\"bar\\\"\\n```\\n\\nHowever, in object destructuring it works a little different:\\n\\n```\\nlet key = \\\"foo\\\"\\nlet {[key]: \\\"foo\\\"} = {foo: \\\"Jessie\\\"}\\n\\nconsole.log(foo)  // Invalid destructuring assignment target\\n```\\n\\nThe error above is caused by the literal string \\\"foo\\\".  You cannot rename variables this way. You can read the MDN Docs **Computed object property names and destructuring** section to find the correct way.\\n\\nFix the function so `console.log(foo)` returns `Jessie`. Leave all variable names unchanged. Ignore the `.toString(`) function (used for validation).\\n\\n### Example\\n```\\nconsole.log(foo) âžž \\\"Jessie\\\"\\n```\\n\\n### Notes\\nIf you know how to use object destructuring, go ahead and complete this challenge, otherwise check the **Resources** tab for some examples.\",\"isHidden\":false,\"lab\":\"eval(str)\\n\\nfunction testStructure() {\\n  return  /\\\\{.*\\\\[.*key.*\\\\].*\\\\:.*(?!\\\\\\\")foo/.test(str) ? \\\"valid\\\" : \\\"not valid\\\"\\t\\n}  \\n\\nconsole.log(\\\"console.log(foo) outputs \\\" + foo)\\n\\nTest.assertEquals(testStructure(), \\\"valid\\\", \\\"Assigning foo outside the template string is not allowed.\\\")\\nTest.assertEquals(foo, \\\"Jessie\\\")\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,1,0,0,2,3,2,2,2,1,1,2,2,2,2,1,1,2,1,2,2,2,2,2,2,0,2,2,0,1,0,2,2,1,2,2,0,0,2,0,2,2,2,2,2,2,4,0,2,2,2,1,0,2,2,1,2,4,1,2,2,0,0,0,2,2,1,2,2,2,1,2,2,2,2,1,2,2,0,2,0,2,2,2,0,1,0,1,3,1,1,4,2,1,5,3,2,1,3,2,2,2,2,2,2,1,1,2,5,1,3,2,2,1,2,2,3,2,1,1,2,2,2,1,2,2,2],\"rators\":[\"yaL57wdXmgAZTvKfX\",\"ihTSN4G98CHRmZqra\",\"yjtdwc2AC4jA2RWtn\",\"cJwiiiX7qwSvgtmk8\",\"FJsvM5yqKuK9yMk9P\",\"2innwjWqxJHo4eRGh\",\"6BpBQnSGhzgvhXrEy\",\"Y9Nz9yafaibz54W4o\",\"n5wubRfh6zh8QRymN\",\"mHT2bJb5SByfJ8yKS\",\"g5noFWaoRtZNcEEAW\",\"EjPLq3QSJdGQFJdgW\",\"RE4Mm9T6Q9uygAxGS\",\"8w3FaLndaj35EMwAT\",\"Cvud77ixamY2f5nra\",\"pi76g3eRpnKrhee2a\",\"EWn8w8P3nNh7knatY\",\"jHkg3yJnq9oE4kqmd\",\"YER6iBcpJCuhgrYDN\",\"vbXLhCLjKMKPfnaP7\",\"z8R4K9Cd7PNuh256A\",\"AasGs8AeX9Lcb9xJn\",\"AtLD3QqZTkNfHy4ps\",\"Wj7pXLPYSkQ7AEcnP\",\"3aZvfgr2H2WF8Yog2\",\"vtHbevf2tHqe6mRxX\",\"E6DBfkTgHuPsDWdG8\",\"53DAaxcGW2KPpvtqi\",\"NczXsSrYNX6nDWhjF\",\"LreCskdE4MTjTyhAM\",\"szQg8dxKNNre3v3Jk\",\"YSmLyP3eRhcFjJPzg\",\"Q75jsoXjhTXJRrw8z\",\"65dbBZynphj53nXqA\",\"SNiJRRosrmSWssLj4\",\"zw7g7T8wE5R5CBhXr\",\"bK2jZcwjCS3WnKHs8\",\"Lzj3w7QjdzikynsGG\",\"Q9KQomTTPBsrkAL6c\",\"giSTAYFa29zMunbJf\",\"vn6nR36mdfY8z2zKx\",\"a777e8chPvJkY3tKa\",\"tAF9Gf6PiGogbZuWs\",\"XfirkadGrKABrZSBw\",\"ij9YRJvZz6WbqcGXS\",\"aEm3Wvj2rFYRL8Lrb\",\"ZkARynWkf64cazsa8\",\"QAZ5DGaWWYhku4BNz\",\"8raviPK67KKxzQWcF\",\"SY9Euc4kQfRgetXTd\",\"z6rWbk4FWtqs7qHvm\",\"moe6ztrsNzFymC3A7\",\"zTZtM9jRsu8eXie6s\",\"pLpcDC3EYx2DDQSdt\",\"nkH3HfJXLMNcBMM79\",\"jkumHyXfMkhGcPgqC\",\"ZcqshY58sGEEvgeaq\",\"msrRGxcGDya8dZdRr\",\"7gZKfvwaeqsGKXMEN\",\"kp2ZbCewZJAbfd7xv\",\"y6wd5dd3thLtfr7Rk\",\"EcvftxnptJk32vTju\",\"2zKQWLmEBw8FBs4ZL\",\"2tCCFm5iefjrRSaxv\",\"evTTY9hwrtogaNxXn\",\"Po3v3dHCk6wYGKMwi\",\"bX6tpTCjwoi6XMMbK\",\"e9Cknxbx6o7Nb6REs\",\"Ya3eHgs8x3unZRLpb\",\"EN3EkhKLQiYqBB4kx\",\"qJTbsuToGEtaYnGxn\",\"JCyKyZoxySDY2F5d4\",\"DaBQKtm4xSgrxqTYF\",\"ttuGK7od8simjgmCJ\",\"yCeddtASCT5NFPJTP\",\"MbbySGQmkzbjg373M\",\"aDrjGTkZWi3ZSMFc7\",\"QRv96jmNaYsWkxQEG\",\"aYFi825Ff4CGKDjmf\",\"pGh7WykiPe26fHJYv\",\"WBBN35jGBzzHWeLn5\",\"BdvdJYwHZr7JpkHsn\",\"M4vq8ATaS9Jg5X7iP\",\"PsccWumihMv4fv3ri\",\"YLTZRjM78Wi9J9Re4\",\"2QziknsznNeMPRh3g\",\"pdGuqmMyeN4wZaWwv\",\"Gc2bmsof5vD2Hsgqv\",\"AFfw7cGg83uYk2Miy\",\"jd9sRTnsyeKpPggba\",\"Rrb84KWhN5tjhMGMA\",\"bPC4LFMEhoXn8qEWA\",\"2Ni3PzJAc5fAhqBkb\",\"c3ixxp9yXLsvFuJdj\",\"RFRqPRqiufEc9MDoJ\",\"c7uBxu2rgY77H5d79\",\"9uaYS8fz4rEtNtGFg\",\"pWJWQDhqzDSmfaFam\",\"Yp7uvStL97cC9fKkY\",\"k3qMBfzQDyoC5vxEz\",\"3Gf7ikLijfoxabiPY\",\"XeNskNoh5DcHuKTWX\",\"B4br3kM6uvv6PxQrD\",\"k6a2Y8qobCq2qRdps\",\"K45zPJxsABuA3WSyj\",\"ZtTwZM9pQ2sAzhnMR\",\"CPMT5rbZ83vjP6HBD\",\"HiaNcCErXfRdqMzec\",\"sRt2L9qxPZZHG2YbP\",\"mDWNyaaQ9hvPCRzSd\",\"npp5hesJrst6ghKSM\",\"cgCQDs9i7yChKeAjE\",\"wJTDDTE3TrmSXKP4d\",\"TtrXnGzi9MyhLvWiz\",\"ZLqSx8xvsioFvy3Jo\",\"R9uaMzX2Y4ND8Cosm\",\"2QifjAQzAEqqnk86G\",\"oDtGiNqDMHmhHE3J8\",\"ApfuspYCvPTDwyZBr\",\"NGvCPuMiAP3xrRLfB\",\"STipuJs6kBvPqqsSE\",\"sNcDN3s3rH9wcNg5n\",\"PH32cNxBjrK4a28sn\",\"7DXJ3mvKMHHqBLt92\",\"zd9FLSzsGz3evKafy\",\"3M7Yxz4dk24DnuzNs\",\"nBJve5CzG6WAw7WFQ\",\"gXTAie79kiw28tx5u\",\"jyoLggHk8xQKZuoQC\",\"ymWvGjFbaJbzA2JBh\",\"AMpQSjKsRqhCDyS2j\",\"9SEvR5mBRBi27QooN\",\"mpLFbFKjY6u3nsDMv\",\"jicWFrNKadYuLhqxh\",\"z47JaNrQMgvuPx5HE\",\"bfYmA3LMvhSrK59cn\",\"eomLS3wh6tQPN8jtH\",\"QGjY3hgPYPMmMjc7j\",\"g5txYGWqRNSrS7MED\",\"rpNNPWzdFCc9TzKMz\",\"oyB4Wr4EeZnoDaa8B\",\"LPZ2QKCoB8q6rG25c\",\"qgtso8jfXRD52Th7C\",\"QHiEYtz3tX3s9nETo\",\"ThaiAKWWDw2W4QfJh\",\"uxKGACwmZ6FNZsMwE\",\"NJCmkbH5e7qbtZYhd\"],\"total\":158,\"quality\":[4,5,5,5,4,5,4,5,5,2,2,3,5,5,5,5,5,5,4,4,5]},\"flags\":0},\"summary\":\"In normal object literals you can create dynamic property names by using computed values:\\n\\nlet key = \\\"name\\\"\\nlet foo = {[key]: \\\"bar\\\"}\\n\\nconsole.log(foo.name); // \\\"bar\\\"\\n\\nHowever, in object destructuring it works a little different:\\n\\nlet key = \\\"foo\\\"\\nlet {[key]: \\\"foo\\\"} = {foo: \\\"Jessie\\\"}\\n\\nconsole.log(foo)  // Invalid destructuring assignment target\\n\\nThe error above\",\"tags\":[\"language_fundamentals\",\"formatting\",\"objects\",\"bugs\"],\"timestamp\":{\"$date\":1580869246194},\"title\":\"ES6: Destructuring Objects VII\",\"quality\":4.380952380952381,\"family\":[{\"_id\":\"5cahgiMrJ6M52XbNa\",\"language\":\"javascript\"}]}}"]