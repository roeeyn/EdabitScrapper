a["{\"msg\":\"result\",\"id\":\"2134\",\"result\":{\"_id\":\"ysMrKPGby3FXiYtQn\",\"author\":\"Pustur\",\"authorId\":\"65dbBZynphj53nXqA\",\"code\":\"function pathDataParser(str) {\\n\\t\\n}\",\"difficulty\":2.966666666666667,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"WkhARpE3Ak9LgfxNs\",\"instructions\":\"A `<path>` element can usually be found inside an `<svg>` element and has an attribute `d` that represents the definition of the outline of a shape.\\n\\nA brief summary about this attribute:\\n\\n- It contains commands (letters) and coordinates (numbers)\\n- All instructions are expressed as one character (e.g., a moveto is expressed as an `M`).\\n- Superfluous white space and separators such as commas can be eliminated (e.g., `M 10 10 L 20 20` contains unnecessary spaces and could be expressed more compactly as `M10 10L20 20`).\\n- The command letter can be eliminated on subsequent commands if the same command is used multiple times in a row (e.g., you can drop the second `L` in `M 10 20 L 20 10 L -10 -20` and use `M 10 20 L 20 10 -10 -20` instead).\\n\\nYour job is to build a parser that will convert this string in an array of commands, where each array element is an object with the `command` letter and an array of `parameters`.\\n\\nThis summary is incomplete but should get you started, for more information please refer to the W3C specification found in the resources tab.\\n\\n### Examples\\n```\\npathDataParser(\\\"\\\") ➞ []\\n\\npathDataParser(\\\"M 0 0\\\") ➞ [{command: 'M', parameters: [0, 0]}]\\n\\npathDataParser(\\\"M 1 1.5 L 0 1.5 0 0.5 1 0.5 0.5 0 0 0.5 1 1.5 1 0.5 0 1.5\\\" ➞ [\\n  {command: \\\"M\\\", parameters: [1, 1.5]},\\n  {command: \\\"L\\\", parameters: [0, 1.5, 0, 0.5, 1, 0.5, 0.5, 0, 0, 0.5, 1, 1.5, 1, 0.5, 0, 1.5]}\\n]\\n\\npathDataParser(\\\"M 0,1 h 1 v -1 h 1 v 1 h 1 C 2,1 3,3 1.5,3 C 0,3 1,1 0,1 z\\\" ➞ [\\n  {command: \\\"M\\\", parameters: [0, 1]},\\n  {command: \\\"h\\\", parameters: [1]},\\n  {command: \\\"v\\\", parameters: [-1]},\\n  {command: \\\"h\\\", parameters: [1]},\\n  {command: \\\"v\\\", parameters: [1]},\\n  {command: \\\"h\\\", parameters: [1]},\\n  {command: \\\"C\\\", parameters: [2, 1, 3, 3, 1.5, 3]},\\n  {command: \\\"C\\\", parameters: [0, 3, 1, 1, 0, 1]},\\n  {command: \\\"z\\\", parameters: []}\\n]\\n```\\n\\n### Notes\\n- Return an empty array if no commands are found (example #1)\\n- The `z` (or `Z`) command is the only one without `parameters`, in this case return an empty array (see last command of example #4)\\n- The `parameters` array contains numbers, not strings, so you'll have to convert them\\n- Sometimes numbers can be very compressed to save space, let's look at some examples that might trip you up:\\n  - Decimal numbers can start with a dot: `.4` is the same as `0.4`\\n  - If a negative number comes after another number, the space is optional: `0-4` is equal to `0 -4`\\n  - Multiple decimal numbers in a row can be very tricky, remember that a number **CAN NOT** have more than 1 dot, so this: `1.2.34` is actually 2 different numbers: `1.2` and `0.34`\\n- Some examples have commas, some do not, some have multiline strings, some are a single line, remember to take into account all valid cases! Check out the tests tab to find out more.\",\"lab\":\"const a1 = pathDataParser('');\\nconst e1 = [];\\n\\nconst a2 = pathDataParser('M 1 1.5 L 0 1.5 0 0.5 1 0.5 0.5 0 0 0.5 1 1.5 1 0.5 0 1.5');\\nconst e2 = [{ command: 'M', parameters: [1, 1.5] }, { command: 'L', parameters: [0, 1.5, 0, 0.5, 1, 0.5, 0.5, 0, 0, 0.5, 1, 1.5, 1, 0.5, 0, 1.5] }];\\n\\nconst a3 = pathDataParser('M 0,1 h 1 v -1 h 1 v 1 h 1 C 2,1 3,3 1.5,3 C 0,3 1,1 0,1 z');\\nconst e3 = [{ command: 'M', parameters: [0, 1] }, { command: 'h', parameters: [1] }, { command: 'v', parameters: [-1] }, { command: 'h', parameters: [1] }, { command: 'v', parameters: [1] }, { command: 'h', parameters: [1] }, { command: 'C', parameters: [2, 1, 3, 3, 1.5, 3] }, { command: 'C', parameters: [0, 3, 1, 1, 0, 1] }, { command: 'z', parameters: [] }];\\n\\nconst a4 = pathDataParser('M 0,1 h 1 v -1 h 1 v 1 h 1 c -1,0 0,2 -1.5,2 c -1.5,0 -0.5,-2 -1.5,-2 z');\\nconst e4 = [{ command: 'M', parameters: [0, 1] }, { command: 'h', parameters: [1] }, { command: 'v', parameters: [-1] }, { command: 'h', parameters: [1] }, { command: 'v', parameters: [1] }, { command: 'h', parameters: [1] }, { command: 'c', parameters: [-1, 0, 0, 2, -1.5, 2] }, { command: 'c', parameters: [-1.5, 0, -0.5, -2, -1.5, -2] }, { command: 'z', parameters: [] }];\\n\\nconst a5 = pathDataParser('M 0,1 l 1,0 0,-1, 1,0 0,1 1,0 c -1,0 0,2 -1.5,2 c -1.5,0 -0.5,-2 -1.5,-2 z');\\nconst e5 = [{ command: 'M', parameters: [0, 1] }, { command: 'l', parameters: [1, 0, 0, -1, 1, 0, 0, 1, 1, 0] }, { command: 'c', parameters: [-1, 0, 0, 2, -1.5, 2] }, { command: 'c', parameters: [-1.5, 0, -0.5, -2, -1.5, -2] }, { command: 'z', parameters: [] }];\\n\\nconst a6 = pathDataParser('M 0,1 l 1,0 0,-1, 1,0 0,1 1,0 c -1,0 0,2 -1.5,2 c -1.5,0 -0.5,-2 -1.5,-2 z M 0,0 l 0.5,0.5 -0.5,0 z M 3,0 l -0.5,0.5 0.5,0 z');\\nconst e6 = [{ command: 'M', parameters: [0, 1] }, { command: 'l', parameters: [1, 0, 0, -1, 1, 0, 0, 1, 1, 0] }, { command: 'c', parameters: [-1, 0, 0, 2, -1.5, 2] }, { command: 'c', parameters: [-1.5, 0, -0.5, -2, -1.5, -2] }, { command: 'z', parameters: [] }, { command: 'M', parameters: [0, 0] }, { command: 'l', parameters: [0.5, 0.5, -0.5, 0] }, { command: 'z', parameters: [] }, { command: 'M', parameters: [3, 0] }, { command: 'l', parameters: [-0.5, 0.5, 0.5, 0] }, { command: 'z', parameters: [] }];\\n\\nconst a7 = pathDataParser('M1 0H0v1h.6H0v1h1.5V0c1 0 1 2 0 2h1L3 0l.25 1h-.5.5l.25 1H4V0c.7 0 .7 1 0 1 1 0 1 1 0 1h1.3V0v2h1V0h-.5 1');\\nconst e7 = [\\n  { command: 'M', parameters: [1, 0] },\\n  { command: 'H', parameters: [0] },\\n  { command: 'v', parameters: [1] },\\n  { command: 'h', parameters: [0.6] },\\n  { command: 'H', parameters: [0] },\\n  { command: 'v', parameters: [1] },\\n  { command: 'h', parameters: [1.5] },\\n  { command: 'V', parameters: [0] },\\n  { command: 'c', parameters: [1, 0, 1, 2, 0, 2] },\\n  { command: 'h', parameters: [1] },\\n  { command: 'L', parameters: [3, 0] },\\n  { command: 'l', parameters: [0.25, 1] },\\n  { command: 'h', parameters: [-0.5, 0.5] },\\n  { command: 'l', parameters: [0.25, 1] },\\n  { command: 'H', parameters: [4] },\\n  { command: 'V', parameters: [0] },\\n  { command: 'c', parameters: [0.7, 0, 0.7, 1, 0, 1, 1, 0, 1, 1, 0, 1] },\\n  { command: 'h', parameters: [1.3] },\\n  { command: 'V', parameters: [0] },\\n  { command: 'v', parameters: [2] },\\n  { command: 'h', parameters: [1] },\\n  { command: 'V', parameters: [0] },\\n  { command: 'h', parameters: [-0.5, 1] }\\n];\\n\\nconst a8 = pathDataParser(`M 38.2 22.6\\nc -.667 -3.6 -1.85 -6.333 -3.55 -8.2 -1.7 -1.867 -4.283 -2.8 -7.75 -2.8 -2.267 0 -4.15 .383 -5.65 1.15 -1.5 .767 -2.7 1.717 -3.6 2.85 -.9 1.133 -1.533 2.333 -1.9 3.6\\ns -.583 2.4 -.65 3.4\\nh 23.1\\nz\\nm -23.1 9\\nc .2 4.6 1.367 7.933 3.5 10\\ns 5.2 3.1 9.2 3.1\\nc 2.867 0 5.333 -.717 7.4 -2.15 2.067 -1.433 3.333 -2.95 3.8 -4.55\\nh 12.5\\nc -2 6.2 -5.067 10.633 -9.2 13.3 -4.133 2.667 -9.133 4 -15 4 -4.067 0 -7.733 -.65 -11 -1.95 -3.267 -1.3 -6.033 -3.15 -8.3 -5.55 -2.267 -2.4 -4.017 -5.267 -5.25 -8.6 -1.233 -3.333 -1.85 -7 -1.85 -11 0 -3.867 .633 -7.467 1.9 -10.8 1.267 -3.333 3.067 -6.217 5.4 -8.65\\nC 10.533 6.317 13.317 4.4 16.55 3 19.783 1.6 23.367 .9 27.3 .9\\nc 4.4 0 8.233 .85 11.5 2.55 3.267 1.7 5.95 3.983 8.05 6.85 2.1 2.867 3.617 6.133 4.55 9.8 .933 3.667 1.267 7.5 1 11.5\\nH 15.1\\nz`);\\nconst e8 = [\\n  { command: 'M', parameters: [38.2, 22.6] },\\n  { command: 'c', parameters: [-0.667, -3.6, -1.85, -6.333, -3.55, -8.2, -1.7, -1.867, -4.283, -2.8, -7.75, -2.8, -2.267, 0, -4.15, 0.383, -5.65, 1.15, -1.5, 0.767, -2.7, 1.717, -3.6, 2.85, -0.9, 1.133, -1.533, 2.333, -1.9, 3.6] },\\n  { command: 's', parameters: [-0.583, 2.4, -0.65, 3.4] },\\n  { command: 'h', parameters: [23.1] },\\n  { command: 'z', parameters: [] },\\n  { command: 'm', parameters: [-23.1, 9] },\\n  { command: 'c', parameters: [0.2, 4.6, 1.367, 7.933, 3.5, 10] },\\n  { command: 's', parameters: [5.2, 3.1, 9.2, 3.1] },\\n  { command: 'c', parameters: [2.867, 0, 5.333, -0.717, 7.4, -2.15, 2.067, -1.433, 3.333, -2.95, 3.8, -4.55] },\\n  { command: 'h', parameters: [12.5] },\\n  { command: 'c', parameters: [-2, 6.2, -5.067, 10.633, -9.2, 13.3, -4.133, 2.667, -9.133, 4, -15, 4, -4.067, 0, -7.733, -0.65, -11, -1.95, -3.267, -1.3, -6.033, -3.15, -8.3, -5.55, -2.267, -2.4, -4.017, -5.267, -5.25, -8.6, -1.233, -3.333, -1.85, -7, -1.85, -11, 0, -3.867, 0.633, -7.467, 1.9, -10.8, 1.267, -3.333, 3.067, -6.217, 5.4, -8.65] },\\n  { command: 'C', parameters: [10.533, 6.317, 13.317, 4.4, 16.55, 3, 19.783, 1.6, 23.367, 0.9, 27.3, 0.9] },\\n  { command: 'c', parameters: [4.4, 0, 8.233, 0.85, 11.5, 2.55, 3.267, 1.7, 5.95, 3.983, 8.05, 6.85, 2.1, 2.867, 3.617, 6.133, 4.55, 9.8, 0.933, 3.667, 1.267, 7.5, 1, 11.5] },\\n  { command: 'H', parameters: [15.1] },\\n  { command: 'z', parameters: [] }\\n];\\n\\nconst a9 = pathDataParser(`M23.4 16.3\\nh10.4\\nv9.5\\nH23.4\\nv25.6\\nc0 2.4.4 4 1.2 4.8.8.8 2.4 1.2 4.8 1.2.8 0 1.567-.033 2.3-.1\\na19.893 19.893 0 0 0 2.1-.3\\nv11\\nc-1.2.2-2.533.333-4 .4\\ns-2.9.1-4.3.1\\nc-2.2 0-4.283-.15-6.25-.45-1.967-.3-3.7-.883-5.2-1.75\\ns-2.683-2.1-3.55-3.7-1.3-3.7-1.3-6.3\\nV25.8\\nH.6\\nv-9.5\\nh8.6\\nV.8\\nh14.2\\nv15.5\\nz`);\\nconst e9 = [\\n  { command: 'M', parameters: [23.4, 16.3] },\\n  { command: 'h', parameters: [10.4] },\\n  { command: 'v', parameters: [9.5] },\\n  { command: 'H', parameters: [23.4] },\\n  { command: 'v', parameters: [25.6] },\\n  { command: 'c', parameters: [0, 2.4, 0.4, 4, 1.2, 4.8, 0.8, 0.8, 2.4, 1.2, 4.8, 1.2, 0.8, 0, 1.567, -0.033, 2.3, -0.1] },\\n  { command: 'a', parameters: [19.893, 19.893, 0, 0, 0, 2.1, -0.3] },\\n  { command: 'v', parameters: [11] },\\n  { command: 'c', parameters: [-1.2, 0.2, -2.533, 0.333, -4, 0.4] },\\n  { command: 's', parameters: [-2.9, 0.1, -4.3, 0.1] },\\n  { command: 'c', parameters: [-2.2, 0, -4.283, -0.15, -6.25, -0.45, -1.967, -0.3, -3.7, -0.883, -5.2, -1.75] },\\n  { command: 's', parameters: [-2.683, -2.1, -3.55, -3.7, -1.3, -3.7, -1.3, -6.3] },\\n  { command: 'V', parameters: [25.8] },\\n  { command: 'H', parameters: [0.6] },\\n  { command: 'v', parameters: [-9.5] },\\n  { command: 'h', parameters: [8.6] },\\n  { command: 'V', parameters: [0.8] },\\n  { command: 'h', parameters: [14.2] },\\n  { command: 'v', parameters: [15.5] },\\n  { command: 'z', parameters: [] }\\n];\\n\\nTest.assertSimilar(a1, e1);\\nTest.assertSimilar(a2, e2);\\nTest.assertSimilar(a3, e3);\\nTest.assertSimilar(a4, e4);\\nTest.assertSimilar(a5, e5);\\nTest.assertSimilar(a6, e6);\\nTest.assertSimilar(a7, e7);\\nTest.assertSimilar(a8, e8);\\nTest.assertSimilar(a9, e9);\\n\",\"language\":\"javascript\",\"summary\":\"A ` element can usually be found inside an  element and has an attribute d` that represents the definition of the outline of a shape.\\n\\nA brief summary about this attribute:\\n\\nIt contains commands (letters) and coordinates (numbers)\\nAll instructions are expressed as one character (e.g., a moveto is expressed as an M).\\nSuperfluous white space and separators such \",\"tags\":[\"regex\",\"strings\",\"arrays\"],\"timestamp\":{\"$date\":1543274178757},\"title\":\"SVG Path Data Parser\",\"stats\":{\"completed\":{\"total\":34,\"ratings\":[3,3,3,3,3,3,3,3,3,3,3,2,2,3,5,0,4,3,2,3,3,4,4,4,4,4,4,0,1,4],\"rators\":[\"65dbBZynphj53nXqA\",\"XHngE5iScvztMpnR2\",\"hy63rX7K3hEfyp8B4\",\"LF7rbv4xECxGiQaTA\",\"XcHCqYmeoqxDsoucx\",\"QCchMDx3z8NcqT8QJ\",\"yEftMmYz82Cgk7XsA\",\"yjtdwc2AC4jA2RWtn\",\"cRpaCxYRmGcN3Nsoj\",\"EAuL56kpyLytw4RcR\",\"mHaHudYExvi45DSRf\",\"dPM2Rk2iMkznyXNEt\",\"n5wubRfh6zh8QRymN\",\"r3kcEcDHqzSMYdNGK\",\"aEm3Wvj2rFYRL8Lrb\",\"kp2ZbCewZJAbfd7xv\",\"mHT2bJb5SByfJ8yKS\",\"Pq2WHNfLbsS2TigCc\",\"nmCGPMRuHbH99aEip\",\"8B8KQN2rvwFWK2mKQ\",\"naPADSK6YTP4KmmH9\",\"hhPW2N2WWpt7MxKo9\",\"Ms4ubMhq5tjsAeMLF\",\"dqwatKFAeGpjmf5dm\",\"Pibec96NpvMB5GqAt\",\"8SYDBRtkZuW3pdPtG\",\"pGh7WykiPe26fHJYv\",\"mDWNyaaQ9hvPCRzSd\"],\"quality\":[3,3,1,5,5,5,3]},\"tests\":{\"score\":0,\"voters\":[\"65dbBZynphj53nXqA\"]},\"instructions\":{\"score\":0,\"voters\":[\"65dbBZynphj53nXqA\"]},\"flags\":0},\"isHidden\":false,\"quality\":3.5714285714285716,\"family\":[{\"_id\":\"ysMrKPGby3FXiYtQn\",\"language\":\"javascript\"}]}}"]