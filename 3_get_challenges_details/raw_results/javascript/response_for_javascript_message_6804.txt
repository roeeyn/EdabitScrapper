a["{\"msg\":\"result\",\"id\":\"2145\",\"result\":{\"_id\":\"YFkyAh5sm9Guqth85\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"function cannotCapture(board) {\\n\\t\\n}\",\"difficulty\":2.996309963099631,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"56hxdQkZWT6TQkiQq\",\"instructions\":\"Write a function that returns `true` if the knights are placed on a chessboard such that **no knight can capture another knight**. Here, `0`s represent empty squares and `1`s represent knights.\\n\\n### Examples\\n```\\ncannotCapture([\\n  [0, 0, 0, 1, 0, 0, 0, 0],\\n  [0, 0, 0, 0, 0, 0, 0, 0],\\n  [0, 1, 0, 0, 0, 1, 0, 0],\\n  [0, 0, 0, 0, 1, 0, 1, 0],\\n  [0, 1, 0, 0, 0, 1, 0, 0],\\n  [0, 0, 0, 0, 0, 0, 0, 0],\\n  [0, 1, 0, 0, 0, 0, 0, 1],\\n  [0, 0, 0, 0, 1, 0, 0, 0]\\n]) ➞ true\\n\\ncannotCapture([\\n  [1, 0, 1, 0, 1, 0, 1, 0],\\n  [0, 1, 0, 1, 0, 1, 0, 1],\\n  [0, 0, 0, 0, 1, 0, 1, 0],\\n  [0, 0, 1, 0, 0, 1, 0, 1],\\n  [1, 0, 0, 0, 1, 0, 1, 0],\\n  [0, 0, 0, 0, 0, 1, 0, 1],\\n  [1, 0, 0, 0, 1, 0, 1, 0],\\n  [0, 0, 0, 1, 0, 1, 0, 1]\\n]) ➞ false\\n```\\n\\n### Notes\\n- Knights can be present in any of the 64 squares.\\n- No other pieces except knights exist.\",\"lab\":\"Test.assertEquals(cannotCapture([\\n[0, 0, 0, 1, 0, 0, 0, 0],\\n[0, 0, 0, 0, 0, 0, 0, 0],\\n[0, 1, 0, 0, 0, 1, 0, 0],\\n[0, 0, 0, 0, 1, 0, 1, 0],\\n[0, 1, 0, 0, 0, 1, 0, 0],\\n[0, 0, 0, 0, 0, 0, 0, 0],\\n[0, 1, 0, 0, 0, 0, 0, 1],\\n[0, 0, 0, 0, 1, 0, 0, 0]\\n]), true)\\n\\nTest.assertEquals(cannotCapture([\\n[1, 0, 1, 0, 1, 0, 1, 0],\\n[0, 1, 0, 1, 0, 1, 0, 1],\\n[0, 0, 1, 0, 1, 0, 1, 0],\\n[0, 0, 0, 1, 0, 1, 0, 1],\\n[0, 0, 0, 0, 1, 0, 1, 0],\\n[0, 0, 0, 0, 0, 1, 0, 1],\\n[0, 0, 0, 0, 0, 0, 1, 0],\\n[0, 0, 0, 0, 0, 0, 0, 1]\\n]), true)\\n\\nTest.assertEquals(cannotCapture([\\n[1, 0, 1, 0, 1, 0, 1, 0],\\n[0, 1, 0, 1, 0, 1, 0, 1],\\n[1, 0, 1, 0, 1, 0, 1, 0],\\n[0, 0, 0, 1, 0, 1, 0, 1],\\n[1, 0, 0, 0, 1, 0, 1, 0],\\n[1, 0, 0, 0, 0, 1, 0, 1],\\n[1, 0, 0, 0, 0, 0, 1, 0],\\n[1, 0, 0, 0, 0, 0, 0, 1]\\n]), true)\\n\\nTest.assertEquals(cannotCapture([\\n[1, 0, 1, 0, 1, 0, 1, 0],\\n[0, 1, 0, 1, 0, 1, 0, 1],\\n[1, 0, 1, 0, 1, 0, 1, 0],\\n[0, 0, 0, 1, 0, 1, 0, 1],\\n[1, 0, 0, 0, 1, 0, 1, 0],\\n[0, 0, 0, 0, 0, 1, 0, 1],\\n[1, 0, 0, 0, 1, 0, 1, 0],\\n[0, 0, 0, 1, 0, 1, 0, 1]\\n]), true)\\n\\nTest.assertEquals(cannotCapture([\\n[1, 0, 1, 0, 1, 0, 1, 0],\\n[0, 1, 0, 1, 0, 1, 0, 1],\\n[1, 0, 1, 0, 1, 0, 1, 0],\\n[0, 0, 0, 1, 0, 1, 0, 1],\\n[1, 0, 0, 0, 1, 0, 1, 0],\\n[0, 0, 0, 0, 0, 1, 0, 1],\\n[1, 0, 1, 0, 1, 0, 1, 0],\\n[0, 0, 0, 1, 0, 0, 0, 1]\\n]), true)\\n\\nTest.assertEquals(cannotCapture([\\n[1, 0, 1, 0, 1, 0, 1, 0],\\n[0, 1, 0, 1, 0, 1, 0, 1],\\n[1, 0, 1, 0, 1, 0, 1, 0],\\n[0, 0, 0, 1, 0, 1, 0, 1],\\n[1, 0, 0, 0, 1, 0, 1, 0],\\n[0, 0, 0, 0, 0, 1, 0, 1],\\n[1, 0, 1, 0, 1, 0, 1, 0],\\n[1, 0, 0, 1, 0, 0, 0, 1]\\n]), false)\\n\\nTest.assertEquals(cannotCapture([\\n[1, 0, 1, 0, 1, 0, 1, 0],\\n[0, 1, 0, 1, 0, 1, 0, 1],\\n[1, 0, 1, 0, 1, 1, 1, 0],\\n[0, 0, 0, 1, 0, 1, 0, 1],\\n[1, 0, 0, 0, 1, 0, 1, 0],\\n[0, 0, 0, 0, 0, 1, 0, 1],\\n[1, 0, 1, 0, 1, 0, 1, 0],\\n[0, 0, 0, 1, 0, 0, 0, 1]\\n]), false)\\n\\nTest.assertEquals(cannotCapture([\\n[1, 0, 1, 0, 1, 0, 1, 0],\\n[0, 1, 0, 1, 0, 1, 0, 1],\\n[0, 0, 0, 0, 1, 0, 1, 0],\\n[0, 0, 1, 0, 0, 1, 0, 1],\\n[1, 0, 0, 0, 1, 0, 1, 0],\\n[0, 0, 0, 0, 0, 1, 0, 1],\\n[1, 0, 0, 0, 1, 0, 1, 0],\\n[0, 0, 0, 1, 0, 1, 0, 1]\\n]), false)\\n\\nTest.assertEquals(cannotCapture([\\n[1, 0, 1, 0, 1, 0, 1, 0],\\n[0, 1, 0, 1, 0, 1, 0, 1],\\n[0, 0, 0, 0, 1, 1, 1, 0],\\n[0, 0, 0, 0, 0, 0, 0, 1],\\n[1, 0, 0, 0, 1, 0, 1, 0],\\n[0, 0, 0, 0, 0, 1, 0, 1],\\n[1, 0, 0, 0, 1, 0, 1, 0],\\n[0, 0, 0, 1, 0, 1, 0, 1]\\n]), false)\\n\\nTest.assertEquals(cannotCapture([\\n[1, 0, 1, 0, 1, 0, 1, 0],\\n[0, 1, 0, 1, 0, 1, 0, 1],\\n[0, 0, 0, 0, 1, 0, 1, 0],\\n[0, 0, 0, 0, 0, 0, 0, 1],\\n[1, 0, 0, 0, 1, 0, 1, 0],\\n[0, 0, 0, 0, 0, 1, 0, 1],\\n[1, 0, 0, 0, 1, 0, 1, 0],\\n[0, 0, 1, 1, 0, 1, 0, 1]\\n]), false)\\n\\nTest.assertEquals(cannotCapture([\\n[0, 0, 0, 1, 0, 0, 0, 0],\\n[0, 0, 0, 0, 0, 0, 0, 0],\\n[0, 1, 0, 0, 0, 1, 1, 0],\\n[0, 0, 0, 0, 1, 0, 1, 0],\\n[0, 1, 0, 0, 0, 1, 0, 0],\\n[0, 0, 0, 0, 0, 0, 0, 0],\\n[0, 1, 0, 0, 0, 0, 0, 1],\\n[0, 0, 0, 0, 1, 0, 0, 0]\\n]), false)\",\"language\":\"javascript\",\"summary\":\"Write a function that returns true if the knights are placed on a chessboard such that no knight can capture another knight. Here, 0s represent empty squares and 1s represent knights.\\n\\nExamples\\ncannotCapture([\\n  [0, 0, 0, 1, 0, 0, 0, 0],\\n  [0, 0, 0, 0, 0, 0, 0, 0],\\n  [0, 1, 0, 0, 0, 1, 0, 0],\\n  [0, 0, 0, 0, 1, 0, 1, 0],\\n  [0, 1, 0, 0, 0, 1, 0, 0],\\n  [0, 0, 0,\",\"tags\":[\"validation\",\"arrays\",\"games\"],\"timestamp\":{\"$date\":1556485573198},\"title\":\"Knights on a Board\",\"stats\":{\"completed\":{\"total\":284,\"ratings\":[3,3,3,3,3,3,3,3,3,3,3,3,4,3,3,2,5,5,5,2,5,1,0,2,3,5,5,4,2,3,5,5,2,0,5,3,4,2,3,2,2,5,1,4,5,5,5,5,1,4,5,3,5,2,5,3,3,3,4,2,5,5,1,2,3,4,3,5,2,4,0,5,5,5,0,3,0,3,1,2,2,0,2,4,3,4,0,5,1,3,4,3,3,3,3,5,3,0,5,3,2,5,3,2,2,2,5,4,3,5,0,5,5,2,2,1,5,5,5,0,3,4,5,3,5,5,0,5,0,3,2,0,2,4,0,3,3,4,3,2,0,0,2,3,2,2,3,0,3,3,4,1,4,5,3,2,4,4,2,3,5,4,5,4,3,4,5,3,2,2,2,2,5,5,3,3,2,5,3,2,3,2,5,5,5,5,5,3,2,0,5,0,5,5,3,2,3,3,4,2,3,5,3,3,2,3,1,0,3,5,3,1,2,1,3,4,3,2,3,5,5,2,2,1,3,3,3,4,5,2,2,4,3,0,3,2,5,0,5,3,2,4,3,0,4,2,5,2,1,0,4,2,5,3,2,2,4,1,3,4,0,3,5,4,2,4,2,3,3,4,0],\"rators\":[\"65dbBZynphj53nXqA\",\"mgNv3hs6tHXAgH7JW\",\"2XPTRdfsLewPXeMHa\",\"8gL9T6sxSJEF8hvwJ\",\"XrzvNadiHFD5oWyLZ\",\"n5wubRfh6zh8QRymN\",\"HhLGvPRCyHeforjRk\",\"wqa82caF3vzQP6gEB\",\"8xuMMGF7fyQWL2fKH\",\"7swio9FFT8jEJXubj\",\"kEqpxhSmh68q2fbRj\",\"bbbpNxM3hgGMCqMn8\",\"6cF2nrD29Nn2AeKP7\",\"CfXgiJuq2KxqL7Y7r\",\"HaZkGH3ajr8B8QdFX\",\"X9gzW6TkvYB4rbrx7\",\"rdNqeKKCwqmELuhvJ\",\"DmixtCzTBSvJt8ASM\",\"3sgNkbJF7rve559S4\",\"wcjknenWdPRhrRScv\",\"T2iNiHxRWvdzWAuJx\",\"7WPf9TjQcYuJnEo4T\",\"aL6Sa35YweG8FbMY8\",\"JqfX9Eiq9vrzGZBtQ\",\"narA66rwpj9yxMNHj\",\"qFPQzo4toFeKNvBGT\",\"iqbET4LnvMk64vS3p\",\"YcrBroAWEwFwtoZk4\",\"FRgTyygtYuSjh2Pv6\",\"utR5vCJTqGdYitCpP\",\"hN8ayTg3SFTh9Fh2x\",\"jMof5DdBZGJ9nrHQ3\",\"EjPLq3QSJdGQFJdgW\",\"xwzfLcZwwTaD3mmt4\",\"6RdqsZD2Tpe3uyRqs\",\"KXAz9mtqEuJGiKMdC\",\"qSAw7pG5toQoLo6J2\",\"zau2i68shu6Pdhjum\",\"MetmQTXsfwRtcW9K8\",\"ydEdzuCCZt4yny9Rq\",\"piQdjdZMiuhsWtYRW\",\"XPJWZdqhdqrKHMCkp\",\"hcti8afrkC4abdpqe\",\"zH4TTJLZK8SYk5vyu\",\"MEYTCCcM3nWYmyDRs\",\"4itF2fjGR9Swc48Zp\",\"DvX7TqnFbctAFqvMu\",\"puGGRMuHWcmEAMbfH\",\"xGRd5EMXHix8DhDss\",\"bto9pwvPJweistJKA\",\"trqpBPnwHcR8bKQWv\",\"Z8PK6TLxW9v5axnMj\",\"w6mAzMhiiWXsgW2Gi\",\"bcANcsYiJ47dwh4ja\",\"KTYoZkpx3aEfRyQWG\",\"3ofH6kzKJTrFtfaa7\",\"qKPrG6ir8yQHGGS2Q\",\"JHShz4ZcgWHDormRu\",\"S9QpBECWyrpeEchXf\",\"7LPg6bCRPWBJatJ38\",\"iTDZTaTYMy9P8Qqiz\",\"Jwu3i2k565y77L4aK\",\"3jZT5pNnS3gzRcpQo\",\"NzATJFL69uQkJMQsh\",\"FHSJnAYTbcsKFgeQa\",\"D8sujcqLQTqMTtFwj\",\"Dpw42dGMFiZSLFijo\",\"yjtdwc2AC4jA2RWtn\",\"oJRbRjYJnWfsCdNHD\",\"imSLr7ctTnk2xH7GJ\",\"TnghjFnjE3inKnWNK\",\"7PP6aGLEosDGsjRqW\",\"FJsvM5yqKuK9yMk9P\",\"EQkZvdpc4SGbMt34W\",\"GPfmGfcw67j8dxfFp\",\"mh8vssnsRH2TmQk8D\",\"nqmaWxPWJstCytFkw\",\"GToNjAriT8DvFJov2\",\"DQydHGyNtHKjNyrTZ\",\"6EhffizzDGWMvwxf8\",\"8meaK5BhWva2ALzMx\",\"mHT2bJb5SByfJ8yKS\",\"is38cPrdKbF6nAaQn\",\"qJZsi5rhRnWA38FbA\",\"ZXr5vcLyWuQpb8ziT\",\"c8Bm2gfGm7o6Z7Wqb\",\"W5TMQwwqxiox29A7R\",\"GBYpwx58ocg4MgiH8\",\"FNxfvyK65LPK7hXHu\",\"5DsYhKJiNTaarWKkM\",\"SjQAE26MyrsfbX697\",\"ppfQK4eXqkQqSKi4r\",\"vuxNW5Q3kb6TC6CjR\",\"3xTP5LHEMpQWB4knW\",\"jWW9YLuYPdAR6uR4c\",\"3QmTLSKrXrH4B5DMF\",\"GLtQXwTpmFc9e6BRh\",\"XTQhY3eSG43SErp3E\",\"6EZJdRsJkNGmnpdie\",\"fwF5jXDYvuJisBSgk\",\"ob3vWqmpSw3mfqDag\",\"jkdyZo4oaYmLuMKeK\",\"YrfAw87X58rMYnznC\",\"SjDDGozmWjqnHpebd\",\"BBP9BE5mKHRzaRpJr\",\"33MjHMHTW4MEngujr\",\"dnFydnamqnEpMEngu\",\"AasGs8AeX9Lcb9xJn\",\"Wdjd6JMEFYzW9Ma5k\",\"BdPD582HGdPjAt5gJ\",\"cB2KP9vAboPGeRXxP\",\"H54RnqvudBKfKQ9mt\",\"JyCuvdmtZPNZ4hEpW\",\"5iahXC5N3rWvbzFt6\",\"b5a77qecAq32wTEaR\",\"y9rbo4r88bGEtxXf2\",\"XFzh5apB4X8Q82WgB\",\"vANHt6atuggdAMmkB\",\"SjY6a2v6jMjGraDKz\",\"ZgdejAm3u2Q6tFpfg\",\"68Kr7x7JvSfYHqaN5\",\"xduxHvTSegggxeuye\",\"tcuBoYKNWncRYSrbE\",\"yvhAhZEJaxNyjDQGY\",\"cAdwt6HpD55dviPaF\",\"cRpaCxYRmGcN3Nsoj\",\"rwXw2SgBjGALNdd9M\",\"MpNkytd7e4Ghx25ii\",\"5ipPJqMoG5XXDQWpR\",\"mEjQemJA8My7drPPT\",\"AuyLaD2RH3PdiWyM5\",\"XjuaFaxajTTRdwD9e\",\"Jd6KY7BxEJKbvZHen\",\"G7KoSLMKAoHyaJN2k\",\"Czph6ZM3JY2t9f2jD\",\"5Zq3aGdvh4LHBvnJL\",\"Es4eX2stRpyoXeC7f\",\"ignicEPWki6QJRAfm\",\"8raviPK67KKxzQWcF\",\"ZcqshY58sGEEvgeaq\",\"sNcDN3s3rH9wcNg5n\",\"aEm3Wvj2rFYRL8Lrb\",\"oW2Ad8Rajf7fPkDYs\",\"vSFGnErEsTyfE68Tp\",\"5y3g8Ye2M8D7dHkPG\",\"bFLyDF4XdxhAtCfaj\",\"x5SPKePPmKmqHhjxf\",\"HcYxcQ5J6dM4WkWHd\",\"SWbaoFPBAeu6g376j\",\"2innwjWqxJHo4eRGh\",\"7ruSdfLTRKgEXhhvA\",\"qKpxw2YCJbHDQgCGp\",\"BDBKiedvLgnTWXEhg\",\"3kbRQZWnKeZuREopF\",\"2YWXNP5TsFH9x9tFo\",\"ymwJGK4Tb6WHpJuiC\",\"4XbEm9fY625cwnfqS\",\"nBo2LLuSMeEgd5f6G\",\"7xZdHDypd44S3YSjx\",\"Puw5gArp8qHbkbbKE\",\"db7Exachqfow7fpZa\",\"SNt23Ei5dSNtfpEMd\",\"aidPcPAieHHHz7JxA\",\"T6iBEE2jp7f7iEF2P\",\"SXX6Xp75KYmR9fa7y\",\"5NGxHLcQ8Af2RJ4TN\",\"bqEv98pzcZT37izi4\",\"x5Lr3XtLph7kpWN8y\",\"zCNzntSgCnWKJFzJu\",\"uShzxFC4E5QLDdiLY\",\"XTt3KhpTfdhJX5za9\",\"cxKWzvsMxST8ZmFhw\",\"DEDnwhxA7EgF5TFAN\",\"hmRFjEj2h82uxSyXo\",\"oqz5E4daZyuCnhqZG\",\"BrET8RyfbALZDJDFL\",\"i2ZTAuh4fvRMtg5XT\",\"J7TsohLyQ8eZ6qLWm\",\"i3KMCo35rTDpg9xB8\",\"3Lmd7vqAsiudJfY4r\",\"c3Qgcn3Tn7yhNw28M\",\"2L2hFycoxcJBrDXWg\",\"H7HdP6j4pTm7Gy3Cu\",\"GJMDLcqB498dLie9L\",\"iWFnMqigTGtP4HMan\",\"sQZaiAd85P3REppKe\",\"zXL5t2ZfLBMCrQXYM\",\"Xk2g4CNFAnYcvxiSr\",\"f5aSE63SumzbtNCEy\",\"QJM5KcENEwS24NDs7\",\"AkQW4ZoEvj6pan6MN\",\"ZcD6Xg4r5oM8JXhPg\",\"gFZLwFo84i5izgmTz\",\"h4jFmtbFn92eA4649\",\"pCYSfwgAKhsP5X9dD\",\"ismDtpzYxzEhw6AQ2\",\"kp2ZbCewZJAbfd7xv\",\"gBwoRxnCDD7Hbnkr7\",\"K7AbLHdYWpiMeTCFa\",\"h54jBuP9aZG2Sy62v\",\"Rdft6oSHkumWMv8KD\",\"iCr5TEH8Xm3qRBnXW\",\"BpiAkZfs6sXRMdArb\",\"RRtwWHSFXu9z3a6dd\",\"xn7uGNKeAwPEkP9oA\",\"EkaHge5WaoGpiCxpx\",\"QwwDGxGAat9hL2zGs\",\"nHEkhPaY5NPYmxN8E\",\"QwYn9aGpRgXCnAHJv\",\"mssBgauSJyf79Dr3H\",\"jaooQkwdysgrCcCcf\",\"dkipp4h6cphWxgH4F\",\"fvSXt94QXQ69FwwPe\",\"wDNLia96SzvRLy5we\",\"pWtxhELmYYppvBoBh\",\"vt88eKvFz6ES8sbrD\",\"yhr245F6Az4XWfJGi\",\"ZhmWK95p5dnFzWErX\",\"WiecqqbvadQfwKvkr\",\"tByQXaA63dR5wXtEu\",\"ty8t3WPe7wexE2H6f\",\"4CaJmEKnQQXW5aBgr\",\"otTuEQ3baGJfbLcJ7\",\"ipXWQ8DkccZyHT6YW\",\"hhPW2N2WWpt7MxKo9\",\"bdBstPFmNSgRjEcjh\",\"nsAQhtijzsokixTg8\",\"KKjSDhCuL7BRJT6b8\",\"2BhzoBHcGL7G6kLZF\",\"GLaTgsB9sXwamLikd\",\"JF24voZt6YGBTDZ9L\",\"s7Qqx4Jnuq85iB7Lw\",\"8Gw94yAJWfg4oxuPw\",\"RqR94bm6F8TZW4Fkq\",\"a88kYE9Ht3zrfYuGW\",\"rvY545CnFvGmx6wjZ\",\"8TecKtaMHNqWNdCrQ\",\"DQtxf6RzQTAjfYwtQ\",\"gGGbkS9jjjskGEhxX\",\"4RsakkyRXyYGwFxEa\",\"xmMqX6Dkh7yxb7ycH\",\"3FsNqhEKmvPJCXaXg\",\"83CBbtEwuHsknD29B\",\"dHbPvXY59zFY8HDtu\",\"sCNwsE6j79TCHeCAC\",\"P6kJCn48khDx4uPvq\",\"fmjFvm6z35C69KqoB\",\"bXaGdBM8FBLHf7N6Y\",\"p5ZshR8zhTqmdhKDc\",\"dwBiZMtNTsxY7NWs6\",\"9dAB9yF2rukm22EnA\",\"M4vq8ATaS9Jg5X7iP\",\"rqLR7hpM4mApzzLpn\",\"a777e8chPvJkY3tKa\",\"mDWNyaaQ9hvPCRzSd\",\"ex3paaLjGKBeii2wy\",\"suF78SsAKgixXfGZE\",\"M4iPvF7xRWWmEwj5s\",\"ySiAP3b4Eb9edaff6\",\"935G5j4tDFNXvqkB7\",\"XfMxfiF4T6icZCszb\",\"P3yuu5gsZZiGonYgo\",\"hEXangjLgGS4rymgC\",\"dz4stAGxFGawPRfob\",\"WqfZ9nEYiHFEj98vg\",\"eaawZ9WFh7kv7rW4H\",\"i5d4P3ypz5JwXb2ya\",\"xavnCy7CjcNLodciA\",\"Dr3K6jyXzLR3WLWdG\"],\"quality\":[5,5,2,5,4,4,5,5,5,5,4,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"isHidden\":false,\"quality\":4.5,\"family\":[{\"_id\":\"ZKWXigCFnEFf7tAad\",\"language\":\"cpp\"},{\"_id\":\"EwAXuk4urzK8WkRGw\",\"language\":\"csharp\"},{\"_id\":\"Ebw8nnRzgFcWgY5p8\",\"language\":\"java\"},{\"_id\":\"YFkyAh5sm9Guqth85\",\"language\":\"javascript\"},{\"_id\":\"grT2qADBtQaby7qYb\",\"language\":\"php\"},{\"_id\":\"C4nht9fQk7tN8mkPa\",\"language\":\"python3\"},{\"_id\":\"CSKhET7BW6v2D4EYv\",\"language\":\"ruby\"}]}}"]