a["{\"msg\":\"result\",\"id\":\"2112\",\"result\":{\"_id\":\"aEWotdg3r6eB2QLWK\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"function fibStr(n, str) {\\n  // recursive code here\\n}\",\"difficulty\":2.9411764705882355,\"editorId\":\"a777e8chPvJkY3tKa\",\"familyId\":\"W6uhfQfGmxKTBL32H\",\"instructions\":\"A Fibonacci string is a precedence of the Fibonacci series. It works with any two characters of the English alphabet (as opposed to the numbers `0` and `1` in the Fibonacci series) as the initial items and concatenates them together as it progresses similarly to that of the Fibonacci series. See examples for more details.\\n\\n### Examples\\n```\\nfibStr(3, [\\\"j\\\", \\\"h\\\"]) ➞ \\\"j, h, hj\\\"\\n\\nfibStr(5, [\\\"e\\\", \\\"a\\\"]) ➞ \\\"e, a, ae, aea, aeaae\\\"\\n\\nfibStr(6, [\\\"n\\\", \\\"k\\\"]) ➞ \\\"n, k, kn, knk, knkkn, knkknknk\\\"\\n```\\n\\n### Notes\\n- All values for `n` will be at least 2.\\n- It is expected from the challenge-takers to come up with a solution using the concept of **recursion** or the so-called **recursive approach**.\\n- You can read more topics about recursion (see **Resources** tab) if you aren't familiar with it yet or haven't fully understood the concept behind it before taking up this challenge or unless otherwise.\\n- A recursive approach is prone to **Uncaught RangeError** or exceeding the maximum call size of the stack, deal with it accordingly and appropriately.\\n- An **iterative** version of this challenge can be found via this [link](https://edabit.com/challenge/dZcAcu86rBtXLvXWD).\\n- A **collection** of challenges in **recursion** can be found via this [link](https://edabit.com/collection/YJH4pAyqDbhLc4STc).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"const recursive = f => (`${f}`.match(RegExp(`${f.name}`,'gm'))||[]).length > +(/function/.test(f))\\nTest.assertNotEquals(recursive(fibStr), false, \\\"Recursion is required!\\\")\\n\\nlet [actualParam, expectedParam] = [\\n  [\\n    [3, ['j', 'h']],\\n    [5, ['e', 'a']],\\n    [6, ['n', 'k']],\\n    [7, ['f', 'c']],\\n    [9, ['b', 'a']],\\n    [11, ['z', 'x']],\\n    [12, ['t', 'd']]\\n  ], [\\n    \\\"j, h, hj\\\",\\n    \\\"e, a, ae, aea, aeaae\\\",\\n    \\\"n, k, kn, knk, knkkn, knkknknk\\\",\\n    \\\"f, c, cf, cfc, cfccf, cfccfcfc, cfccfcfccfccf\\\",\\n    \\\"b, a, ab, aba, abaab, abaababa, abaababaabaab, abaababaabaababaababa, abaababaabaababaababaabaababaabaab\\\",\\n    \\\"z, x, xz, xzx, xzxxz, xzxxzxzx, xzxxzxzxxzxxz, xzxxzxzxxzxxzxzxxzxzx, xzxxzxzxxzxxzxzxxzxzxxzxxzxzxxzxxz, xzxxzxzxxzxxzxzxxzxzxxzxxzxzxxzxxzxzxxzxzxxzxxzxzxxzxzx, xzxxzxzxxzxxzxzxxzxzxxzxxzxzxxzxxzxzxxzxzxxzxxzxzxxzxzxxzxxzxzxxzxxzxzxxzxzxxzxxzxzxxzxxz\\\",\\n    \\\"t, d, dt, dtd, dtddt, dtddtdtd, dtddtdtddtddt, dtddtdtddtddtdtddtdtd, dtddtdtddtddtdtddtdtddtddtdtddtddt, dtddtdtddtddtdtddtdtddtddtdtddtddtdtddtdtddtddtdtddtdtd, dtddtdtddtddtdtddtdtddtddtdtddtddtdtddtdtddtddtdtddtdtddtddtdtddtddtdtddtdtddtddtdtddtddt, dtddtdtddtddtdtddtdtddtddtdtddtddtdtddtdtddtddtdtddtdtddtddtdtddtddtdtddtdtddtddtdtddtddtdtddtdtddtddtdtddtdtddtddtdtddtddtdtddtdtddtddtdtddtdtd\\\"\\n]]\\nfor (let i in actualParam) Test.assertEquals(fibStr(...actualParam[i]), expectedParam[i])\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,5,1,2,1,3,3,2,3,0,1,2,3,2,4,5,0,4,0,2,3,3,5,4,3,0,5,4,2,3],\"rators\":[\"a777e8chPvJkY3tKa\",\"yjtdwc2AC4jA2RWtn\",\"mHT2bJb5SByfJ8yKS\",\"aEm3Wvj2rFYRL8Lrb\",\"65dbBZynphj53nXqA\",\"qvNk7pHSveLu3jqWw\",\"n5wubRfh6zh8QRymN\",\"veKWMS3ACmRWTjiLK\",\"h4jFmtbFn92eA4649\",\"LojZZnLB8pD8d9JkA\",\"nmCGPMRuHbH99aEip\",\"xhMNsZgeB8rBKjxLu\",\"tmTAbizpJLnZDZ5JJ\",\"bX6tpTCjwoi6XMMbK\",\"nr7xgXJALKT6pCzQv\",\"sYJKcRHeWxTBoAdaL\",\"cnDqaMoaxPXvGvJv5\",\"KypQdzThzogKXwkXE\",\"nr7jKeHEE3TC9oyp4\",\"pWJWQDhqzDSmfaFam\",\"r4Pvmzy48TyAj6dZE\",\"gEMvZMiynfTfrQuPt\",\"K45zPJxsABuA3WSyj\",\"EMED9x5CXGSevWAp4\",\"JGBCMpnbbi5ztuFoX\",\"YEjnBpgNjDLhnf4H7\",\"bC9LkKYMeH2cwigfy\",\"tE8iqyAxBJfEaWdxy\",\"va3fDAQm4sqSMoy3R\",\"bGCmQGAQZEDs5u5ke\",\"Es4eX2stRpyoXeC7f\",\"vKch2w3b4keMd84jj\",\"YPNbhQxe8jHobXqB4\",\"u9cRf5kvtpRB5ffB3\",\"M4vq8ATaS9Jg5X7iP\",\"ftXLsTaA7yHmhuEsY\",\"QRv96jmNaYsWkxQEG\",\"s678Wirfor5uYL5T6\",\"wKn7Rc8y2GiDZzXkC\",\"PH32cNxBjrK4a28sn\",\"8BJyXvRWcrvN3nttS\",\"tAF9Gf6PiGogbZuWs\",\"pi76g3eRpnKrhee2a\",\"P8bXFR4cHwFia9rNM\"],\"total\":49,\"quality\":[5,4,1,5,3,5,5,5,5,4,5,5,5,4,5]},\"flags\":0},\"summary\":\"A Fibonacci string is a precedence of the Fibonacci series. It works with any two characters of the English alphabet (as opposed to the numbers 0 and 1 in the Fibonacci series) as the initial items and concatenates them together as it progresses similarly to that of the Fibonacci series. See examples for more details.\\n\\nExamples\\nfibStr(3, [\\\"j\\\", \\\"h\\\"]) ➞ \\\"j, h, h\",\"tags\":[\"recursion\",\"strings\"],\"timestamp\":{\"$date\":1595022344336},\"title\":\"Recursion: Fibonacci String\",\"quality\":4.4,\"family\":[{\"_id\":\"2MR6qaWfxR4pYpGGo\",\"language\":\"java\"},{\"_id\":\"aEWotdg3r6eB2QLWK\",\"language\":\"javascript\"},{\"_id\":\"H7Z8enQWipfBMXTx7\",\"language\":\"python3\"}]}}"]