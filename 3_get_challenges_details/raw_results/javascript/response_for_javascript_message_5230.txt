a["{\"msg\":\"result\",\"id\":\"1365\",\"result\":{\"_id\":\"2xLmzBEjBzg4LSygs\",\"author\":\"Isaac Pak\",\"authorId\":\"yaL57wdXmgAZTvKfX\",\"code\":\"const REGEXP = /* Write your expression here */i\",\"difficulty\":2.1285714285714286,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"Jocz3bCm9sjk7ZuPx\",\"instructions\":\"**Groups and ranges** indicate groups and ranges of expression characters. **Capturing groups** matches x in (x) and remembers the match.\\n\\n```\\n\\\"foo bar\\\".match(/(foo)/) ➞ matches and remembers \\\"foo\\\"\\n```\\n\\nCapturing groups often are used along with quantifiers.  Quantifiers will use the capturing group as a whole.\\n\\n```\\n\\\"Gogogo now!\\\".match(/(go)+/i) ➞ \\\"Gogogo\\\"\\n```\\n\\n**Caveat:** Capturing groups have a performance penalty. If you don't need the matched substring to be recalled, prefer non-capturing parentheses.\\n\\nMAC-address of a network interface consists of 6 two-digit hex numbers separated by a colon (e.g. **01:32:54:67:89:AB**). Write a RegExp that checks whether a string is MAC-address.\\n\\n```\\nlet regexp = /your regexp/\\n\\nregexp.test(\\\"01:32:54:67:89:AB\\\") ➞ true\\nregexp.test(\\\"0132546789AB\\\") ➞ false\\n```\\n\\n### Notes\\nCheck the **Resources** tab if you get stuck.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"const str1 = '01:32:54:67:89:AB'\\nconst str2 = '0132546789AB'\\nconst str3 = '01:32:54:67:89'\\nconst str4 = '01:32:54:67:89:ZZ'\\n\\nconst validate = (REGEXP) => {\\n return function testReg(str) {\\n\\t\\treturn REGEXP.test(str);\\n\\t }\\n}\\n\\nconst testExp = validate(REGEXP)\\n\\nTest.assertSimilar(testExp(str1), true)\\nTest.assertSimilar(testExp(str2), false, \\\"no colons\\\")\\nTest.assertSimilar(testExp(str3), false, \\\"5 numbers, need 6\\\")\\nTest.assertSimilar(testExp(str4), false, \\\"ZZ at the end\\\")\\n\\n// credits to https://javascript.info/regexp-groups\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,1,3,1,1,1,2,1,2,3,1,2,2,3,2,3,3,2,3,3,2,3,2,1,2,2,3,3,3,0,1,2,3,2,3,3,3,0,2,3,0,0,0,2,2,3,3,3,3,2,1,2,1,3,3,2,3,2,3,2,3,5,3,3,1],\"rators\":[\"yaL57wdXmgAZTvKfX\",\"n5wubRfh6zh8QRymN\",\"ubmKBCqpcY4fZrkNg\",\"CuY5BaTCcu7Mp9tDu\",\"5Zq3aGdvh4LHBvnJL\",\"yjtdwc2AC4jA2RWtn\",\"RE4Mm9T6Q9uygAxGS\",\"pi76g3eRpnKrhee2a\",\"2innwjWqxJHo4eRGh\",\"6BpBQnSGhzgvhXrEy\",\"Nv5a34gxg5yvLKRW8\",\"EWn8w8P3nNh7knatY\",\"YER6iBcpJCuhgrYDN\",\"AasGs8AeX9Lcb9xJn\",\"Ehrta9env9HXyrGbW\",\"SWbaoFPBAeu6g376j\",\"faYyw7jGsSeaMeYYd\",\"tAF9Gf6PiGogbZuWs\",\"a777e8chPvJkY3tKa\",\"eomLS3wh6tQPN8jtH\",\"a7LBurCmz5n6gECbv\",\"2ZFoLTxcCARhwc8xX\",\"aMR4wm2qP7azwSigk\",\"Q75jsoXjhTXJRrw8z\",\"Es4eX2stRpyoXeC7f\",\"5NGxHLcQ8Af2RJ4TN\",\"Xk2g4CNFAnYcvxiSr\",\"FJsvM5yqKuK9yMk9P\",\"mHT2bJb5SByfJ8yKS\",\"jcPZ5ySXseCB7Ec3x\",\"aEm3Wvj2rFYRL8Lrb\",\"buX4mCQhtXCfBjeno\",\"PTo9qt93YqGvL8fCa\",\"65dbBZynphj53nXqA\",\"ZcqshY58sGEEvgeaq\",\"F8xkNyMFrY9BvrYEh\",\"e9Cknxbx6o7Nb6REs\",\"EAuL56kpyLytw4RcR\",\"s7Qqx4Jnuq85iB7Lw\",\"JGBCMpnbbi5ztuFoX\",\"WBBN35jGBzzHWeLn5\",\"qJTbsuToGEtaYnGxn\",\"QRv96jmNaYsWkxQEG\",\"BdvdJYwHZr7JpkHsn\",\"CNc6rmwhbxkxEhHAp\",\"dGugwhA6uwwjPGAa5\",\"g4NCSxxHqHCGMpWwT\",\"wbzQwextPpnNBR7cG\",\"NchnDcEmsLTeFZ4FH\",\"zw7g7T8wE5R5CBhXr\",\"sYJKcRHeWxTBoAdaL\",\"M4vq8ATaS9Jg5X7iP\",\"Akq3fQcPRgPrWfsye\",\"eSewzYmhWeS4HWutm\",\"7JCLyrrY6JYGpocac\",\"jcGEghaWQAKEh5k8L\",\"XB7fB6SRML67sDDoX\",\"XrN688tKMi8qqsNFK\",\"kp2ZbCewZJAbfd7xv\",\"6P9KgzXeJtZ6ejQcu\",\"bX6tpTCjwoi6XMMbK\",\"Yfggc4Hr3fmtG4dsS\",\"MT26yxj3YX95DsyLj\",\"AFfw7cGg83uYk2Miy\",\"wJTDDTE3TrmSXKP4d\",\"QjGNkRM3Xc78yShJN\",\"jemTNShfp6ymAs3pj\",\"oDtGiNqDMHmhHE3J8\",\"NGvCPuMiAP3xrRLfB\",\"Yp7uvStL97cC9fKkY\",\"2Qk2mFu9HBFzrB24i\",\"PsccWumihMv4fv3ri\",\"3rQ3fN5SM2eGHmTi5\",\"49XFttjKo2QhEWT3R\",\"hCfruGWxw7v64teEr\",\"8s5Bdrn7RTga7DL6x\",\"wT5gGgvjKc5wz59AQ\",\"Ya3eHgs8x3unZRLpb\",\"J7d397iB5GuWRAMfg\",\"TtrXnGzi9MyhLvWiz\",\"RoGGD5cpHb4ftdLDv\",\"jyoLggHk8xQKZuoQC\",\"ThaiAKWWDw2W4QfJh\",\"QGjY3hgPYPMmMjc7j\",\"rMc3LPajSgm68hNfC\"],\"total\":93,\"quality\":[4,5,5,4,5,5,5,5,5,5,5,5,5,2,5,4,5,5,5,5]},\"flags\":0},\"summary\":\"Groups and ranges indicate groups and ranges of expression characters. Capturing groups matches x in (x) and remembers the match.\\n\\n\\\"foo bar\\\".match(/(foo)/) ➞ matches and remembers \\\"foo\\\"\\n\\nCapturing groups often are used along with quantifiers.  Quantifiers will use the capturing group as a whole.\\n\\n\\\"Gogogo now!\\\".match(/(go)+/i) ➞ \\\"Gogogo\\\"\\n\\nCaveat: Capturing grou\",\"tags\":[\"regex\",\"formatting\"],\"timestamp\":{\"$date\":1583344338753},\"title\":\"RegEx XIX : Group Ranges - Capturing groups (x)\",\"quality\":4.7,\"family\":[{\"_id\":\"2xLmzBEjBzg4LSygs\",\"language\":\"javascript\"},{\"_id\":\"r8yrCWBqQrb3wmYo5\",\"language\":\"python3\"}]}}"]