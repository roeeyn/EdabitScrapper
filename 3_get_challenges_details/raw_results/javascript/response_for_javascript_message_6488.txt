a["{\"msg\":\"result\",\"id\":\"1989\",\"result\":{\"_id\":\"ydgurBgEdGkueNmmp\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"class CoffeeShop {\\n\\tconstructor (name, menu, orders) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":2.8043478260869565,\"familyId\":\"98yLJQdHBTnwFLnbF\",\"instructions\":\"Write a **class** called **CoffeeShop**, which has **three instance variables**:\\n\\n1. **name** : a string (basically, of the shop)\\n2. **menu** : an array of items (of object type), with each item containing the **item** (name of the item), **type** (whether _food_ or a _drink_) and **price**.\\n3. **orders** : an empty array\\n\\nand **seven methods**:\\n\\n1. **addOrder**: adds the **name** of the item to the end of the **orders** array if it exists on the **menu**. Otherwise, return `\\\"This item is currently unavailable!\\\"`\\n2. **fulfillOrder**: if the **orders** array is **not empty**, return `\\\"The {item} is ready!\\\"`. If the **orders** array is empty, return `\\\"All orders have been fulfilled!\\\"`\\n3. **listOrders**: returns the list of **orders** taken, otherwise, an **empty** array.\\n4. **dueAmount**: returns the total amount due for the **orders** taken.\\n5. **cheapestItem**: returns the **name** of the cheapest item on the menu.\\n6. **drinksOnly**: returns only the _item_ **names** of _type_ **drink** from the menu.\\n7. **foodOnly**: returns only the _item_ **names** of _type_ **food** from the menu.\\n\\n**IMPORTANT**: Orders are fulfilled in a **FIFO** (first-in, first-out) order.\\n\\n\\n### Examples\\n```\\ntcs.addOrder(\\\"hot cocoa\\\") ➞ \\\"This item is currently unavailable!\\\"\\n// Tesha's coffee shop does not sell hot cocoa\\ntcs.addOrder(\\\"iced tea\\\") ➞ \\\"This item is currently unavailable!\\\"\\n// specifying the variant of \\\"iced tea\\\" will help the process\\n\\ntcs.addOrder(\\\"cinnamon roll\\\") ➞  \\\"Order added!\\\"\\ntcs.addOrder(\\\"iced coffee\\\") ➞ \\\"Order added!\\\"\\ntcs.listOrders ➞ [\\\"cinnamon roll\\\", \\\"iced coffee\\\"]\\n// the list of all the items in the current order\\n\\ntcs.dueAmount() ➞ 2.17\\n\\ntcs.fulfillOrder() ➞ \\\"The cinnamon roll is ready!\\\"\\ntcs.fulfillOrder() ➞ \\\"The iced coffee is ready!\\\"\\ntcs.fulfillOrder() ➞ \\\"All orders have been fulfilled!\\\"\\n// all orders have been presumably served\\n\\ntcs.listOrders() ➞ []\\n// an empty array is returned if all orders have been exhausted\\n\\ntcs.dueAmount() ➞ 0.0\\n// no new orders taken, expect a zero payable\\n\\ntcs.cheapestItem() ➞ \\\"lemonade\\\"\\ntcs.drinksOnly() ➞ [\\\"orange juice\\\", \\\"lemonade\\\", \\\"cranberry juice\\\", \\\"pineapple juice\\\", \\\"lemon iced tea\\\", \\\"vanilla chai latte\\\", \\\"hot chocolate\\\", \\\"iced coffee\\\"]\\ntcs.foodOnly() ➞ [\\\"tuna sandwich\\\", \\\"ham and cheese sandwich\\\", \\\"bacon and egg\\\", \\\"steak\\\", \\\"hamburger\\\", \\\"cinnamon roll\\\"]\\n```\\n\\n### Notes\\nRound off **due amount** up to **two decimal** places.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"let [menuA, menuB, menuC] = [\\n  [\\n    [\\\"orange juice\\\", \\\"drink\\\", 2.13], [\\\"lemonade\\\", \\\"drink\\\", 0.85], [\\\"cranberry juice\\\", \\\"drink\\\", 3.36],\\n    [\\\"pineapple juice\\\", \\\"drink\\\", 1.89], [\\\"lemon iced tea\\\", \\\"drink\\\", 1.28], [\\\"apple iced tea\\\", \\\"drink\\\", 1.28],\\n    [\\\"vanilla chai latte\\\", \\\"drink\\\", 2.48], [\\\"hot chocolate\\\", \\\"drink\\\", 0.99], [\\\"iced coffee\\\", \\\"drink\\\", 1.12],\\n    [\\\"tuna sandwich\\\", \\\"food\\\", 0.95], [\\\"ham and cheese sandwich\\\", \\\"food\\\", 1.35], [\\\"bacon and egg\\\", \\\"food\\\", 1.15],\\n    [\\\"steak\\\", \\\"food\\\", 3.28], [\\\"hamburger\\\", \\\"food\\\", 1.05], [\\\"cinnamon roll\\\", \\\"food\\\", 1.05]\\n  ],\\n  [\\n    [\\\"turkey english muffin\\\", \\\"food\\\", 7.99], [\\\"avocado toast\\\", \\\"food\\\", 5.05], [\\\"chocolate croissant\\\", \\\"food\\\", 3.00],\\n    [\\\"espresso\\\", \\\"drink\\\", 2.99], [\\\"iced caramel macchiato\\\", \\\"drink\\\", 4.50], [\\\"cortado\\\", \\\"drink\\\", 4.00],\\n    [\\\"nitro cold brew tester\\\", \\\"drink\\\", 8.00]\\n  ],\\n  [\\n    [\\\"cheeseburger with fries\\\", \\\"food\\\", 5.44],\\n    [\\\"cinnamon roll\\\", \\\"food\\\", 4.99],\\n    [\\\"hot chocolate\\\", \\\"drink\\\", 2.99],\\n    [\\\"lemon tea\\\", \\\"drink\\\", 2.50],\\n    [\\\"iced coffee\\\", \\\"drink\\\", 3.00],\\n    [\\\"vanilla chai latte\\\", \\\"drink\\\", 4.00]\\n  ]\\n].reduce((a, r) => [...a, [...r.map(([n, t, p]) => ({item: n, type: t, price: p}))]], []),\\n\\n[shopA, shopB, shopC] = [\\n  new CoffeeShop(\\\"*** Deep Into Coffee ***\\\", menuA, []),\\n  new CoffeeShop(\\\"*** Xavier's ***\\\", menuB, []),\\n  new CoffeeShop(\\\"*** Tesha's ***\\\", menuC, [])\\n]\\n\\nTest.assertEquals(shopA.addOrder(\\\"cinnamon roll\\\"), \\\"Order added!\\\")\\nTest.assertEquals(shopA.addOrder(\\\"iced coffee\\\"), \\\"Order added!\\\")\\nTest.assertSimilar(shopA.listOrders(), [\\\"cinnamon roll\\\", \\\"iced coffee\\\"])\\nTest.assertEquals(shopA.dueAmount(), 2.17)\\nTest.assertEquals(shopA.fulfillOrder(), \\\"The cinnamon roll is ready!\\\")\\nTest.assertEquals(shopA.fulfillOrder(), \\\"The iced coffee is ready!\\\")\\nTest.assertEquals(shopA.fulfillOrder(), \\\"All orders have been fulfilled!\\\")\\nTest.assertEquals(shopA.addOrder(\\\"hot cocoa\\\"), \\\"This item is currently unavailable!\\\")\\nTest.assertEquals(shopA.addOrder(\\\"iced tea\\\"), \\\"This item is currently unavailable!\\\")\\nTest.assertSimilar(shopA.listOrders(), [])\\nTest.assertEquals(shopA.dueAmount(), 0.0)\\nTest.assertEquals(shopA.cheapestItem(), \\\"lemonade\\\")\\nTest.assertSimilar(shopA.drinksOnly(), [\\\"orange juice\\\", \\\"lemonade\\\", \\\"cranberry juice\\\", \\\"pineapple juice\\\", \\\"lemon iced tea\\\", \\\"apple iced tea\\\", \\\"vanilla chai latte\\\", \\\"hot chocolate\\\", \\\"iced coffee\\\"])\\nTest.assertSimilar(shopA.foodOnly(), [\\\"tuna sandwich\\\", \\\"ham and cheese sandwich\\\", \\\"bacon and egg\\\", \\\"steak\\\", \\\"hamburger\\\", \\\"cinnamon roll\\\"])\\n\\nTest.assertEquals(shopB.addOrder(\\\"cortado\\\"), \\\"Order added!\\\")\\nTest.assertEquals(shopB.fulfillOrder(), \\\"The cortado is ready!\\\")\\nTest.assertEquals(shopB.fulfillOrder(), \\\"All orders have been fulfilled!\\\")\\nTest.assertEquals(shopB.addOrder(\\\"avocado toast\\\"), \\\"Order added!\\\")\\nTest.assertSimilar(shopB.listOrders(), [\\\"avocado toast\\\"])\\nTest.assertEquals(shopB.dueAmount(), 5.05)\\nTest.assertEquals(shopB.cheapestItem(), \\\"espresso\\\")\\nTest.assertSimilar(shopB.drinksOnly(), [\\\"espresso\\\", \\\"iced caramel macchiato\\\", \\\"cortado\\\", \\\"nitro cold brew tester\\\"])\\nTest.assertSimilar(shopB.foodOnly(), [\\\"turkey english muffin\\\", \\\"avocado toast\\\", \\\"chocolate croissant\\\"])\\n\\nTest.assertEquals(shopC.addOrder(\\\"hot cocoa\\\"), \\\"This item is currently unavailable!\\\")\\nTest.assertEquals(shopC.dueAmount(), 0.0)\\nTest.assertEquals(shopC.addOrder(\\\"cheeseburger with fries\\\"), \\\"Order added!\\\")\\nTest.assertEquals(shopC.addOrder(\\\"lemon tea\\\"), \\\"Order added!\\\")\\nTest.assertEquals(shopC.addOrder(\\\"iced coffee\\\"), \\\"Order added!\\\")\\nTest.assertSimilar(shopC.listOrders(), [\\\"cheeseburger with fries\\\", \\\"lemon tea\\\", \\\"iced coffee\\\"])\\nTest.assertEquals(shopC.dueAmount(), 10.94)\\nTest.assertEquals(shopC.fulfillOrder(), \\\"The cheeseburger with fries is ready!\\\")\\nTest.assertEquals(shopC.fulfillOrder(), \\\"The lemon tea is ready!\\\")\\nTest.assertEquals(shopC.fulfillOrder(), \\\"The iced coffee is ready!\\\")\\nTest.assertSimilar(shopC.listOrders(), [])\\nTest.assertEquals(shopC.cheapestItem(), \\\"lemon tea\\\")\\nTest.assertSimilar(shopC.drinksOnly(), [\\\"hot chocolate\\\", \\\"lemon tea\\\", \\\"iced coffee\\\", \\\"vanilla chai latte\\\"])\\nTest.assertSimilar(shopC.foodOnly(), [\\\"cheeseburger with fries\\\", \\\"cinnamon roll\\\"])\",\"language\":\"javascript\",\"quality\":4.25,\"summary\":\"Write a class called CoffeeShop, which has three instance variables:\\n\\nname : a string (basically, of the shop)\\nmenu : an array of items (of object type), with each item containing the item (name of the item), type (whether food or a drink) and price.\\norders : an empty array\\n\\nand seven methods:\\n\\naddOrder: adds the name of the item to the end of the orders array\",\"tags\":[\"classes\",\"objects\",\"arrays\"],\"timestamp\":{\"$date\":1609373255148},\"title\":\"Coffee Shop\",\"stats\":{\"completed\":{\"total\":51,\"ratings\":[4,4,4,4,4,4,2,3,2,1,3,3,2,5,2,4,4,0,2,2,0,3,3,2,2,3,3,4,1,2,2,5,3,5,3,2,5,2,4,0,2,2,4,4,3,1],\"quality\":[5,2,5,5],\"rators\":[\"a777e8chPvJkY3tKa\",\"vGKxRcDYDsXzTQuEQ\",\"YLTZRjM78Wi9J9Re4\",\"Po3v3dHCk6wYGKMwi\",\"hNEhHd8qodq4P3h2g\",\"kp2ZbCewZJAbfd7xv\",\"xoR3u8pfR3vWbrte3\",\"8SYDBRtkZuW3pdPtG\",\"rwtyaL4ZnkgFSf2ze\",\"rw8soEwCdMwxsab5m\",\"z8R4K9Cd7PNuh256A\",\"9Pzg45NEiRXhLtLh3\",\"SMuRJTkPmKk79CM32\",\"SYEuojZtP6yLXryHv\",\"WDW9yPbGgTLYuxLy7\",\"M4vq8ATaS9Jg5X7iP\",\"cp3X8hk8yNME7qoD9\",\"eMuCpJ2spXWkJjWNz\",\"yjtdwc2AC4jA2RWtn\",\"wJTDDTE3TrmSXKP4d\",\"sNcDN3s3rH9wcNg5n\",\"JDLtv8kNLjkf7hNSY\",\"CtonpEZSnh7ZcR4wa\",\"nZL6qRwiWXHmhZWEE\",\"BEq2obR9C34YiXLud\",\"AasGs8AeX9Lcb9xJn\",\"nfd8Rq4PTMfe7a6Ep\",\"PH32cNxBjrK4a28sn\",\"3wahC8CNcbakiHkPj\",\"TtrXnGzi9MyhLvWiz\",\"8BJyXvRWcrvN3nttS\",\"qvCppNAZjAkNdBSu6\",\"Kujn4WghBYxeRS9fs\",\"fkGMyDoYs7PkxZy2G\",\"pi76g3eRpnKrhee2a\",\"GiQCH5nvo5A2pnREZ\",\"QP26bMsAeKw7kKntH\",\"CTJcx26fd6GELw5p7\",\"QvEXmSEo3ANp3yPyH\",\"deyyMnwnhR6TkAanm\",\"P8bXFR4cHwFia9rNM\",\"NpAjngKpPXGwYjSyC\",\"rGpPd6PvpzLaqps4g\",\"eYDGESiajGbKB4vLG\",\"z6rWbk4FWtqs7qHvm\"]},\"flags\":0},\"editorId\":\"a777e8chPvJkY3tKa\",\"family\":[{\"_id\":\"k3pg4uMgKcDA95sqb\",\"language\":\"java\"},{\"_id\":\"ydgurBgEdGkueNmmp\",\"language\":\"javascript\"},{\"_id\":\"PYEuCAdGJsRS9AABA\",\"language\":\"python3\"},{\"_id\":\"RsciMbmhrJCSkeoq4\",\"language\":\"ruby\"}]}}"]