a["{\"msg\":\"result\",\"id\":\"738\",\"result\":{\"_id\":\"vqwqCwfJ3r4zFvzPn\",\"author\":\"Isaac Pak\",\"authorId\":\"yaL57wdXmgAZTvKfX\",\"code\":\"const REGEXP = /* Write your expression here */g\",\"difficulty\":1.5,\"editorId\":\"yaL57wdXmgAZTvKfX\",\"familyId\":\"DJGD5jfhrYhXE3tMH\",\"instructions\":\"**Groups and ranges** indicate groups and ranges of expression characters. **Character Sets** match any characters inside of brackets `[ ] `. You can specify a **range** of characters by using a **hyphen**.\\n\\n```\\n/[abcd]/ === /[a-d]/\\n```\\n\\nIf the hyphen appears as the **first** or **last** character then it is considered a **literal** hyphen.\\n\\n```\\n\\\"non-profit\\\".match(/[abc-]/g)  // \\\"-\\\"\\n\\\"non-profit\\\".match(/[-abc]/g)  // \\\"-\\\"\\n```\\n\\nYou can also use **character classes** in a character set. So instead of this:\\n\\n```\\n/[A-Za-z0-9_-]/\\n```\\n\\nYou can do this:\\n\\n```\\n/[\\\\w]/\\n```\\n\\nCreate a **regex** to match the letter \\\"x\\\" followed by two characters, each of which may be any digit or any character from A to F. Case sensitive.\\n\\n### Examples\\n```\\n\\\"Exception 0xAF\\\".match(REGEXP) ➞ \\\"xAF\\\"\\n\\n\\\"Exception 0xD3\\\".match(REGEXP) ➞ \\\"xD3\\\"\\n\\n\\\"Exception 0xd3\\\".match(REGEXP) ➞ null\\n\\n\\\"Exception 0xZZ\\\".match(REGEXP) ➞ null\\n```\\n\\n### Notes\\nCheck the **Resources** tab if you get stuck.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"const str1 = \\\"Exception 0xAF\\\"\\nconst str2 = \\\"Exception 0x1A\\\"\\nconst str3 = \\\"Exception 0x22\\\"\\nconst str4 = \\\"Exception 0xF9\\\"\\nconst str5 = \\\"Exception 0xG0\\\"\\nconst str6 = \\\"Exception 0xH9\\\"\\nconst str7 = \\\"Exception 0xF9\\\"\\nconst str8 = \\\"Exception 0xF9\\\"\\n\\nconst validate = (REGEXP) => {\\n\\t if(/\\\\[\\\\]/.test(String(REGEXP))) return () => \\\"invalid\\\" \\n\\t return function testReg(str) {\\n\\t\\treturn str.match(REGEXP) && str.match(REGEXP)[0];\\n\\t }\\n}\\n\\nconst testExp = validate(REGEXP)\\n\\nTest.assertNotEquals(testExp(str1), \\\"invalid\\\", \\\"You are require to use a character set your expression.\\\")\\nTest.assertSimilar(testExp(str1), \\\"xAF\\\")\\nTest.assertSimilar(testExp(str2), \\\"x1A\\\")\\nTest.assertSimilar(testExp(str3), \\\"x22\\\")\\nTest.assertSimilar(testExp(str4), \\\"xF9\\\")\\nTest.assertSimilar(testExp(str5), null)\\nTest.assertSimilar(testExp(str6), null)\\nTest.expectError(\\\"Letters must be upper case\\\", testExp(str7))\\nTest.expectError(\\\"Must allow digits and letters\\\", testExp(str8))\\n\\n// credits to https://javascript.info/regexp-character-sets-and-ranges\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,0,2,1,2,0,1,1,1,2,2,2,0,0,1,2,1,0,1,1,2,1,0,1,2,0,2,1,1,2,1,2,2,1,2,1,2,1,1,2,2,1,2,2,1,1,2,1,2,1,2,1,0,2,1,2,1,0,2,2,1,2,0,0,2,1,1,1,1,2,2,1,1,2,2,2,1,2,1,0,2,2,2,1,2,1,2,1,1,1,1,2,1,1,2,2,0,1,2,1,2,2,2,1,2,1,1,1,1,1,2,2,1,2,0,1,1,2,2,1,2,2,2,1,2,2,0,1,1,2,2,1,1,2,2,3,1,2,1,2,2,2,2,2,1,1,0,1,2,2,2,0,1,1,2,1,2,2,2,3,2,0,1,2,2,2,2,3,2,2,2,2,2,2,2,2,2,1,2,2,2,0,2,2,2,2,2,2,2,0,2,3,2,2,0,2,2,2,2,1,2,1,2,0,0,2,2,1,5,2,3,1,1,1,1,1,2,2,2,2,2,2,2,2,0,1,1,2,2,3,2,2,2,5,1,1,1,2,2,2,0,1,1,2,2,1,1,1,2,2,2,1,0,2,3,1,2,1,2,1,0,0,0,2,2,2,2],\"rators\":[\"yaL57wdXmgAZTvKfX\",\"yjtdwc2AC4jA2RWtn\",\"Y9Nz9yafaibz54W4o\",\"QEhgdaBYvvTH4GpoN\",\"RE4Mm9T6Q9uygAxGS\",\"n5wubRfh6zh8QRymN\",\"mHT2bJb5SByfJ8yKS\",\"5Zq3aGdvh4LHBvnJL\",\"pi76g3eRpnKrhee2a\",\"cJwiiiX7qwSvgtmk8\",\"2CvHJcA9aXt9pvZwA\",\"6BpBQnSGhzgvhXrEy\",\"aPX8qCXL6TmfpRfgy\",\"k5TGxBtLi9BXxeChT\",\"YER6iBcpJCuhgrYDN\",\"9Pzg45NEiRXhLtLh3\",\"PAzNgJF54C2mYPkR9\",\"eANW47mfA359Y6JyP\",\"9XnGoq9Tv6ut3zTtH\",\"SNt23Ei5dSNtfpEMd\",\"5NGxHLcQ8Af2RJ4TN\",\"SNiJRRosrmSWssLj4\",\"jcPZ5ySXseCB7Ec3x\",\"nZnc6Hx435hxxYWP9\",\"yFGcFfNsHt2Z4G5a9\",\"FJsvM5yqKuK9yMk9P\",\"EjPLq3QSJdGQFJdgW\",\"Pjzuh4nWsA5EovxbY\",\"vQ5JYxiPeSnGpTdEF\",\"Fh4HrCa5r5j3Kajni\",\"ZZ3JYmkR4dNtCwviD\",\"qZFHrwR35PfMTyWbd\",\"PTo9qt93YqGvL8fCa\",\"P4jeiN4MnamFDkGNo\",\"HZztnCYPM6s8EwWum\",\"zgoq9MhrL2h75DAMA\",\"i2cWuXf5udysYk9vS\",\"jqbm8L6895JgAtZ6H\",\"TiqnGGfTYcXZengMZ\",\"vWhgrr5oem8WtKdxm\",\"mYtKxYPbLLnePeJH3\",\"EWn8w8P3nNh7knatY\",\"iSQYxSJ4MDQ6GntcS\",\"2innwjWqxJHo4eRGh\",\"7JCLyrrY6JYGpocac\",\"9QrEePwr32Mia6xfo\",\"ZtniSFrgec4oj6Pxm\",\"DSJ8m2k2yk5QtQaMT\",\"GZGvYkdHBssXCdrae\",\"TpGA9q73qQPFbQcSv\",\"s3mTvPw28MPAbv4E4\",\"gGETo2x9dY5TsWc2b\",\"zcDDFdkQvaAr2WipD\",\"QAZ5DGaWWYhku4BNz\",\"eQXwk5zGckM8tCWYH\",\"kRvw5sGF6vG3Hweww\",\"v2AzBqD64zLiRD9bP\",\"rehehi2Tr2mwaEoJE\",\"R35tqE5etfTYTfmGr\",\"eTzbu6t7YpD3mK3PY\",\"BSkoT6o2GweZkqXbc\",\"jYXFFTnuWFNo72Rc5\",\"q9BzXDtYdTAANjqMJ\",\"Po3v3dHCk6wYGKMwi\",\"TSrggGFgGWmXrXoEy\",\"HyKRY7xroLjYKF7PH\",\"scBSd6NJup7edDSGK\",\"tuTQhfZC5izTmXEgR\",\"hTaa8XvWuAJmKnfTt\",\"rEYAvrghcvftDK6eQ\",\"EYAHWarHxubW8AXgF\",\"QMq9dcvgpyNK6RAze\",\"EPeA837HC2cXj3PEy\",\"CavCwBcmu7ff2KamP\",\"oGtMzuAJrnFwiMhdf\",\"vzGzRkLe4WGS9zMSz\",\"7wtuhPesfhcYsfZaZ\",\"65dbBZynphj53nXqA\",\"dDFJpK4pXCsQYuHmc\",\"Q9KQomTTPBsrkAL6c\",\"RqnvM77EkZZD9W2Q3\",\"Pfau42bJyRNy2eq6L\",\"AasGs8AeX9Lcb9xJn\",\"GCsLzWAhLvniQqR3J\",\"szQg8dxKNNre3v3Jk\",\"gaae2D7mjaLgWJWcr\",\"eomLS3wh6tQPN8jtH\",\"tAF9Gf6PiGogbZuWs\",\"vn6nR36mdfY8z2zKx\",\"YLqdr7bYjwew2KM4N\",\"KbnMrx599baroip9W\",\"ncxv2Z5EvzW2j4NT7\",\"Wnom3NDu29r6odkah\",\"LreCskdE4MTjTyhAM\",\"a777e8chPvJkY3tKa\",\"Gc2bmsof5vD2Hsgqv\",\"9HZbxzkzgz4CvePtv\",\"dNqjHnaTsgqBFDxTC\",\"oyB4Wr4EeZnoDaa8B\",\"MS7Syf6ZdRjse4nCA\",\"Xk2g4CNFAnYcvxiSr\",\"auQP3FLMujGNJ5pQP\",\"6oNkXuuDRBTFvpr8y\",\"EufkHMbcMbW6eR3Ca\",\"HYKd99NY3juhKwrxe\",\"S6n5P7pGiEu2mQuFD\",\"YSmLyP3eRhcFjJPzg\",\"qaR8DnWrTk8Mus5Q2\",\"2oNCBeLCQ974DKvb8\",\"A9dfqpKocKsJi3icP\",\"2ZFoLTxcCARhwc8xX\",\"NySgAuwdWHnwrXS5k\",\"QozwRCt9hwyqeFB5i\",\"RcFJfYquW9quJDnp5\",\"mf8xW5DhPjfXaCEsQ\",\"kDuH45yzb6PDtwhi6\",\"LCn6qz2GoMr5577Rd\",\"GovJdALyZMga74WeE\",\"k8rMJnaejG3dX4ute\",\"ipiC2qPhKZWsAouJf\",\"BjJhatTBaTWm3ZhCt\",\"PbqJfdwQjPPqiu9GF\",\"mLKy6YSNJ2MyXuaq2\",\"GB3NHPPMge2CshbY6\",\"z5ebtimXwFFJdYxoa\",\"sAhNjH3HZ9tSSSKTX\",\"zw7g7T8wE5R5CBhXr\",\"a7LBurCmz5n6gECbv\",\"M4vq8ATaS9Jg5X7iP\",\"k6kqu7gRZRyb4Auu2\",\"uDL732cxhJPfvnyn5\",\"XfirkadGrKABrZSBw\",\"CJBPyyfyaEeEo63sb\",\"TNo7w28xev2B5YWkF\",\"9LDTSLezN3xk4hpAx\",\"3JSKE56FSBxj6ZCY7\",\"eNdxN376u6gM4qdXF\",\"sBcsrC5paZm9nxjot\",\"Q75jsoXjhTXJRrw8z\",\"G2wwuLBf5WET8MMYA\",\"ij9YRJvZz6WbqcGXS\",\"rJGzFvBGYxdukwt8X\",\"Bcn7THBq3BiZANSyN\",\"er5HvLSjtwaYKoZ2F\",\"inbiBEY2tizFwkN84\",\"svpXWhsSLLzYR8Rz4\",\"edaKYaap6ugMKpRT8\",\"nkH3HfJXLMNcBMM79\",\"p5ZshR8zhTqmdhKDc\",\"Es4eX2stRpyoXeC7f\",\"75MZjJQdxm9uExWHP\",\"4nFXeGakoCjm5GXYa\",\"fzHwF2zdGs9m9q6FK\",\"noZDgMMXkcPCLN8Ye\",\"jnyub52Fi79drGvow\",\"FGEeCTorXbX3WvjFW\",\"733qgZ7ZSSSrzbXGw\",\"34bE6mric984YYLZQ\",\"cCPrEfTcM4mqscd9A\",\"Wv9v7fHb8umujfg2j\",\"Ya3eHgs8x3unZRLpb\",\"moe6ztrsNzFymC3A7\",\"73eF6MtD723njvn3y\",\"eFjGhq7C7bBKXjT6X\",\"jkumHyXfMkhGcPgqC\",\"2d7ToTiuvHtd6WnGx\",\"evTTY9hwrtogaNxXn\",\"sn9HmYyS3FStbca3b\",\"2tCCFm5iefjrRSaxv\",\"8raviPK67KKxzQWcF\",\"Sfb5RNdmiKSDyqyp4\",\"dihnR2wb8sn4isuvA\",\"PGCDJpQMN8Sjn9Gm6\",\"2zKQWLmEBw8FBs4ZL\",\"C9LKGu2g5hSijvDzA\",\"ckMvGF5TAyCwcxJBm\",\"ZcqshY58sGEEvgeaq\",\"aEm3Wvj2rFYRL8Lrb\",\"pLpcDC3EYx2DDQSdt\",\"s9qcJASB9WKPWaQzi\",\"4ntYzGHHBgqf58udP\",\"KcFLFK5GqrC89bxZL\",\"SWbaoFPBAeu6g376j\",\"4gb4tvaSCs9u2z3ZA\",\"DaBQKtm4xSgrxqTYF\",\"7gZKfvwaeqsGKXMEN\",\"nhWLv6D8eZJ5ggKKX\",\"bX6tpTCjwoi6XMMbK\",\"mwg8jvMHHmQiQRrbr\",\"jED84My7PjSKANQsX\",\"e9Cknxbx6o7Nb6REs\",\"ZcmrtSpqFnCBEK5YE\",\"Nua6T3dBurBy3Qfg9\",\"QnPD4Sv6W4LHc2Qng\",\"QRv96jmNaYsWkxQEG\",\"ttuGK7od8simjgmCJ\",\"kp2ZbCewZJAbfd7xv\",\"MbbySGQmkzbjg373M\",\"vewKwcMeGuk3p3MsN\",\"vRsovmMfvfvnR5miw\",\"AFfw7cGg83uYk2Miy\",\"s7Qqx4Jnuq85iB7Lw\",\"Kntd2rSgWYWp8r4sP\",\"PH32cNxBjrK4a28sn\",\"XkPEb97Tnnvvf5fAY\",\"4Xv87xmdSnpYhi8hz\",\"3WtHp4MBzciz4AE8M\",\"qWR7eXxBiNee22A5u\",\"j4JYXWLmkTDH6iqHr\",\"CNc6rmwhbxkxEhHAp\",\"g4NCSxxHqHCGMpWwT\",\"pGh7WykiPe26fHJYv\",\"DDokdbBKxv49M445o\",\"BdvdJYwHZr7JpkHsn\",\"jLSZdBseR2kfjt8dL\",\"hyx8iH2z3QySmyRKT\",\"QpBEndbkq6opq4DBN\",\"9SrwsygZbwzGbYZSK\",\"iE4gk7JCQ5mfpRTru\",\"CC7Z9sKKLCkHhp6MW\",\"bukdJM6J6TAmZC8Wc\",\"8kC69AiRv6XA3xnyD\",\"Akq3fQcPRgPrWfsye\",\"vGKxRcDYDsXzTQuEQ\",\"6wcsoqgMKfZ7xjSgn\",\"Yp7uvStL97cC9fKkY\",\"wbzQwextPpnNBR7cG\",\"HJhxYdXKZqNic6PBz\",\"YmMgWhzhHhQLmGGgH\",\"2Ni3PzJAc5fAhqBkb\",\"pWJWQDhqzDSmfaFam\",\"pER3Z29q2fkQdcxTw\",\"R9uaMzX2Y4ND8Cosm\",\"2QifjAQzAEqqnk86G\",\"f52uK7D6PGGdzjtdZ\",\"XGngZST3B7zpotX9b\",\"3Gf7ikLijfoxabiPY\",\"m6qKkBY4aPWziyJTj\",\"sNcDN3s3rH9wcNg5n\",\"6P9KgzXeJtZ6ejQcu\",\"3xp28hqvKhDZSCtgu\",\"jpSy4qhuDNwPk9mrf\",\"u9cRf5kvtpRB5ffB3\",\"yxh6CjdHCfkhJszj6\",\"Yfggc4Hr3fmtG4dsS\",\"ZtTwZM9pQ2sAzhnMR\",\"DaaYgfivvuHBk4kbg\",\"DHwbkbzYNpmkSFT7u\",\"srJ34BaybkQh3qRkM\",\"J7d397iB5GuWRAMfg\",\"kETR48v7gF3navX86\",\"2Qk2mFu9HBFzrB24i\",\"npp5hesJrst6ghKSM\",\"k6QB6fzbj4LsWktRL\",\"K45zPJxsABuA3WSyj\",\"wJTDDTE3TrmSXKP4d\",\"LwD3CyYSiBfg3mA4r\",\"rbPEA2TFQw837Hmqg\",\"c7uBxu2rgY77H5d79\",\"oDtGiNqDMHmhHE3J8\",\"jemTNShfp6ymAs3pj\",\"Xbw55RbiWZcvB2Lef\",\"mpLFbFKjY6u3nsDMv\",\"NGvCPuMiAP3xrRLfB\",\"nBJve5CzG6WAw7WFQ\",\"j5FSQCayX3By73CCw\",\"wT5gGgvjKc5wz59AQ\",\"gXTAie79kiw28tx5u\",\"Fk47SQxbHEJRw4u76\",\"ZKuwzkssrSsDGNPr5\",\"jyoLggHk8xQKZuoQC\",\"HCfkcKnPs9mrJojdG\",\"jicWFrNKadYuLhqxh\",\"bfYmA3LMvhSrK59cn\",\"TtrXnGzi9MyhLvWiz\",\"8BJyXvRWcrvN3nttS\",\"NJCmkbH5e7qbtZYhd\",\"rPsSEYqwmttMPEuvo\",\"8op7s67jE2nYdo4js\",\"p6qLK4qS2dnFzDA7k\",\"uxKGACwmZ6FNZsMwE\",\"z47JaNrQMgvuPx5HE\",\"x2Cz7S8rCKJqCE3Xe\",\"ThaiAKWWDw2W4QfJh\",\"jzdjJtfQiCYmiyvzh\",\"nC4sPB69yYuTSks9T\",\"eKHQ5g8uEdoBgdafr\",\"AGn7W6RMgfZPmMCTZ\",\"RbBEqArJC6CJ3SqkL\",\"4WYjScmBWK9eXRzvd\",\"QGjY3hgPYPMmMjc7j\",\"3rQ3fN5SM2eGHmTi5\",\"gf4xrfguK6KiEF9yi\",\"jkkKzNT77bMStXhpW\",\"rMc3LPajSgm68hNfC\",\"zJTXDTdbwnopRazGo\",\"NQ85ztbHjuiifxMqZ\",\"CHvzhtXnv8HTbPQ56\",\"qAEumdjLRx2AGAmzw\",\"sN2JyFeJCwfwwHPwF\",\"psdbt2PkjPv4qTwtr\",\"RoGGD5cpHb4ftdLDv\",\"8JJHJfbYpxvDiPpBn\",\"uQSXqABGeqaPtN9S4\"],\"total\":327,\"quality\":[3,5,5,5,5,3,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,5,5,5,5,5,1,5,5,5]},\"flags\":0},\"summary\":\"Groups and ranges indicate groups and ranges of expression characters. Character Sets match any characters inside of brackets [ ] . You can specify a range of characters by using a hyphen.\\n\\n/[abcd]/ === /[a-d]/\\n\\nIf the hyphen appears as the first or last character then it is considered a literal hyphen.\\n\\n\\\"non-profit\\\".match(/[abc-]/g)  // \\\"-\\\"\\n\\\"non-profit\\\".match\",\"tags\":[\"regex\"],\"timestamp\":{\"$date\":1582569347460},\"title\":\"RegEx XIV: Group Ranges - Character Sets\",\"quality\":4.675675675675675,\"family\":[{\"_id\":\"vqwqCwfJ3r4zFvzPn\",\"language\":\"javascript\"},{\"_id\":\"ffeLkHfoGDbApgNSA\",\"language\":\"python3\"}]}}"]