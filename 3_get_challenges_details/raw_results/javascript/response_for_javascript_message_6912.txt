a["{\"msg\":\"result\",\"id\":\"2199\",\"result\":{\"_id\":\"2eeiWCm9APTAortcv\",\"author\":\"Mubashir Hassan \",\"authorId\":\"T6iBEE2jp7f7iEF2P\",\"code\":\"function order(arr) {\\n\\t\\n}\",\"difficulty\":3.3333333333333335,\"familyId\":\"R7SDhRiwFuCMcx2Eo\",\"instructions\":\"R, a programming language used for Statistics and Data Analysis, has the function `order`, which returns a list with the indices needed to sort the original vector(∗).\\n\\nFor example:\\n```\\nmy_arr = [1, 3, 3, 9, 8]\\n// Ordered would be: [0, 1, 2, 4, 3]\\n```\\n\\nIn plain words, `order` tells you what elements to look at in your original vector to sort it. The list `my_arr[0] + my_arr[1] + my_arr[2] + my_arr[4] + my_arr[3]` is equivalent to `sorted(my_arr)`.\\n\\nIf two or more elements have the same order, their original order is preserved. Here, `[0, 1, 2, 4, 3]` and `[0, 2, 1, 4, 3]` would both sort the vector, but only the first one preserves the original order for the two `3`s.\\n\\nImplement the function `order()` so that it works the same way it does in R.\\n\\n### Examples\\n```\\norder([9, 1, 4, 5, 4]) ➞ [1, 2, 4, 3, 0]\\n\\norder([\\\"z\\\", \\\"c\\\", \\\"f\\\", \\\"b\\\", \\\"c\\\"]) ➞ [3, 1, 4, 2, 0]\\n\\norder([\\\"order\\\", \\\"my\\\", \\\"words\\\"]) ➞ [1, 0, 2]\\n```\\n\\n### Notes\\n- Expect numbers and lower-case alphabetic characters only.\\n- Find Part II: Rank [here](https://edabit.com/challenge/WTH9NveTMed5vtyaA).\\n- Vectors in R are similar to a list. Although vectors in R are 1-indexed, your function should be 0-indexed. Other differences between vectors and lists will be ignored for the scope of this challenge.\\n- If you implement your own algorithm, it must be **stable**, meaning that the order of identical elements doesn't get switched around.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assertSimilar(order([1, 3, 3, 9, 8]), [0, 1, 2, 4, 3])\\nTest.assertSimilar(order([9, 1, 4, 5, 4]), [1, 2, 4, 3, 0])\\nTest.assertSimilar(order([1, 1, 1, 1, 1]), [0, 1, 2, 3, 4])\\nTest.assertSimilar(order([1, 2, 0, 3, 7, 1, 11, 1, 2]), [2, 0, 5, 7, 1, 8, 3, 4, 6])\\nTest.assertSimilar(order([1, -4, 5.5, -1, 4, 7.5]), [1, 3, 0, 4, 2, 5])\\nTest.assertSimilar(order([\\\"z\\\", \\\"c\\\", \\\"f\\\", \\\"b\\\", \\\"c\\\"]), [3, 1, 4, 2, 0])\\nTest.assertSimilar(order([\\\"d\\\", \\\"f\\\", \\\"g\\\", \\\"a\\\", \\\"d\\\", \\\"a\\\", \\\"d\\\", \\\"y\\\"]), [3, 5, 0, 4, 6, 1, 2, 7])\\nTest.assertSimilar(order([\\\"order\\\", \\\"my\\\", \\\"words\\\"]), [1, 0, 2])\\nTest.assertSimilar(order([\\\"a\\\", \\\"rose\\\", \\\"is\\\", \\\"a\\\", \\\"rose\\\", \\\"is\\\", \\\"a\\\", \\\"rose\\\"]), [0, 3, 6, 2, 5, 1, 4, 7])\\nTest.assertSimilar(order([\\\"z\\\", \\\"zz\\\", \\\"zzz\\\"]), [0, 1, 2])\",\"language\":\"javascript\",\"quality\":0,\"summary\":\"R, a programming language used for Statistics and Data Analysis, has the function order, which returns a list with the indices needed to sort the original vector(∗).\\n\\nFor example:\\nmy_arr = [1, 3, 3, 9, 8]\\n// Ordered would be: [0, 1, 2, 4, 3]\\n\\nIn plain words, order tells you what elements to look at in your original vector to sort it. The list myarr[0] + myarr[\",\"tags\":[\"sorting\",\"arrays\"],\"timestamp\":{\"$date\":1605169478768},\"title\":\"Sorting in R: Order (Part I)\",\"stats\":{\"completed\":{\"total\":5,\"ratings\":[3,3,3,3,3,5,5,1,4],\"quality\":[],\"rators\":[\"8BJyXvRWcrvN3nttS\",\"bXaGdBM8FBLHf7N6Y\",\"yjtdwc2AC4jA2RWtn\",\"tAF9Gf6PiGogbZuWs\"]},\"flags\":2},\"editorId\":\"T6iBEE2jp7f7iEF2P\",\"family\":[{\"_id\":\"2eeiWCm9APTAortcv\",\"language\":\"javascript\"},{\"_id\":\"kQayLoFNx4QgWahHu\",\"language\":\"python3\"},{\"_id\":\"ptM9nR6KSAcAQxjfY\",\"language\":\"ruby\"}]}}"]