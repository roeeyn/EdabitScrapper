a["{\"msg\":\"result\",\"id\":\"895\",\"result\":{\"_id\":\"xsaGheX3yQ4g4Tb8b\",\"author\":\"Isaac Pak\",\"authorId\":\"yaL57wdXmgAZTvKfX\",\"code\":\"var result = \\\"\\\"\\n\\nlet promise = new Promise(() => {\\n})\\n\\npromise.then()\",\"difficulty\":1.6124031007751938,\"editorId\":\"yaL57wdXmgAZTvKfX\",\"familyId\":\"G4YHDT6RSbn8KY4tp\",\"instructions\":\"So we can use **resolve** and **reject** callbacks to help us store async results whether successful or unsuccessful, but what good are those if we don't have access to those results. Thus we have the **then** function which **returns a promise** that appends either a fulfilled or rejection handler(callback) or just returns the **settled value**.\\n\\n```\\nlet promise = new Promise( (resolve, reject) => {\\n  setTimeout(( ) => {\\n     resolve(\\\"success!\\\")\\n  }, 1000)\\n})\\n\\npromise.then() // returns the settled value\\npromise.then((val) => console.log(val)) // logs the result of the **onFufilled** callback\\n```\\n### Challenge\\n- Add the necessary pieces to fix the promise and the **then** function.\\n- It should resolve to a message **success!**.\\n- Re-assign the **result** to the settled value inside the then function.\\n\\n### Notes\\nCheck the **Resources** tab for more info on promises.\",\"isHidden\":false,\"lab\":\"function promiseState(p) {\\n  const t = {};\\n  return Promise.race([p, t]).then(v => (v === t)? \\\"pending\\\" : \\\"fulfilled\\\", () => \\\"rejected\\\");\\n}\\n\\nTest.assertEquals(result, \\\"\\\", \\\"You are only allowed to reassign 'result' inside of the 'onFulfilled' callback.\\\")\\npromiseState(promise).then(state => Test.assertEquals(state, \\\"fulfilled\\\", \\\"Did pass in the resolve callback to your promise?\\\"))\\npromise.then(x => Test.assertEquals(result, \\\"success!\\\"))\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,1,0,1,2,2,2,2,2,1,1,2,2,1,1,1,1,1,1,3,2,0,0,0,1,0,2,2,1,2,2,0,2,2,3,0,2,2,1,1,2,1,2,2,2,2,1,2,2,2,2,3,2,1,1,1,2,2,2,2,1,2,0,3,4,2,1,1,1,2,3,2,1,2,0,2,1,2,2,4,1,2,1,2,1,0,2,2,1,1,4,2,2,2,2,1,2,1,1,2,0,2,1,1,0,1,2,2,1,1,2,2,2,2,2,3,2,2,2,1,2,3,2,2],\"rators\":[\"yaL57wdXmgAZTvKfX\",\"yjtdwc2AC4jA2RWtn\",\"yuLxi2qBJvMnwgdgJ\",\"mHT2bJb5SByfJ8yKS\",\"n5wubRfh6zh8QRymN\",\"cJwiiiX7qwSvgtmk8\",\"6BpBQnSGhzgvhXrEy\",\"Y9Nz9yafaibz54W4o\",\"EjPLq3QSJdGQFJdgW\",\"Y7xPTPKpNAEiM2jkH\",\"pi76g3eRpnKrhee2a\",\"E6DBfkTgHuPsDWdG8\",\"EWn8w8P3nNh7knatY\",\"Ww9oTX8jX5sF99e7f\",\"AvEiDZKLHCEQ6n9Ma\",\"vtHbevf2tHqe6mRxX\",\"QAZ5DGaWWYhku4BNz\",\"NRYNuaQhH6Hife3nf\",\"LaJT5wv5rrYtWuAvv\",\"qJs53JzhwtYQttNHh\",\"65dbBZynphj53nXqA\",\"a7LBurCmz5n6gECbv\",\"zw7g7T8wE5R5CBhXr\",\"4TuceAZ8oTDzsjhir\",\"sBcsrC5paZm9nxjot\",\"qMk7JaZwmEWLbTeRZ\",\"bK2jZcwjCS3WnKHs8\",\"gShMGBdg5KhD5f245\",\"Q9KQomTTPBsrkAL6c\",\"ij9YRJvZz6WbqcGXS\",\"xMxdp5oCxmeuYxhpa\",\"jcPZ5ySXseCB7Ec3x\",\"DXKGcepy6JjezbF5k\",\"fngeyb3ggLPHgMSpz\",\"AasGs8AeX9Lcb9xJn\",\"4wKQqMG8gPc53ppdg\",\"uDL732cxhJPfvnyn5\",\"p5ZshR8zhTqmdhKDc\",\"4nFXeGakoCjm5GXYa\",\"aFMst9xdc5NbYP8E9\",\"2d7ToTiuvHtd6WnGx\",\"5Lix7bTXY8oyAEbtQ\",\"PGCDJpQMN8Sjn9Gm6\",\"2zKQWLmEBw8FBs4ZL\",\"HFuNFZpdKCddzbuqc\",\"csXjXMhiQfbCQ9L7b\",\"RQwuHHy4rBgaQCLte\",\"jkumHyXfMkhGcPgqC\",\"xMxrziDLvH5ZfCFPZ\",\"Ya3eHgs8x3unZRLpb\",\"7gZKfvwaeqsGKXMEN\",\"kKEdtoo4zb5jCgYno\",\"ZcqshY58sGEEvgeaq\",\"aEm3Wvj2rFYRL8Lrb\",\"NczXsSrYNX6nDWhjF\",\"msrRGxcGDya8dZdRr\",\"QRv96jmNaYsWkxQEG\",\"evTTY9hwrtogaNxXn\",\"qvNk7pHSveLu3jqWw\",\"MbbySGQmkzbjg373M\",\"Kk3jdrvAbPENkw5Ft\",\"pLpcDC3EYx2DDQSdt\",\"Po3v3dHCk6wYGKMwi\",\"r5oh2akuGTDrJdRML\",\"wBeghLKGGfX44nMZe\",\"kp2ZbCewZJAbfd7xv\",\"5yvKyWSJfhuJu8KFg\",\"3oZKDoY9FdANBZJqM\",\"9wQqRbs7QBpfW8nC5\",\"M4vq8ATaS9Jg5X7iP\",\"DZB4tXLY9bNwWNyng\",\"CNc6rmwhbxkxEhHAp\",\"yCeddtASCT5NFPJTP\",\"qJTbsuToGEtaYnGxn\",\"BdvdJYwHZr7JpkHsn\",\"zMCXYFZSsviDCvjnY\",\"ccHAPAfdET3cnyPaG\",\"wGensyaMPwQjoR8XX\",\"2QziknsznNeMPRh3g\",\"sNcDN3s3rH9wcNg5n\",\"pdGuqmMyeN4wZaWwv\",\"Fv8MSJTMX2J7j8Chm\",\"hoFhBuPdPNMAyD7P4\",\"aysKzNXyen74pgufp\",\"9QhoadfJpbCZkoyMX\",\"2Ni3PzJAc5fAhqBkb\",\"vmTj4abpqWCBzaqpM\",\"c7uBxu2rgY77H5d79\",\"Yp7uvStL97cC9fKkY\",\"rmMrWxMDFpoiPK6nf\",\"3Gf7ikLijfoxabiPY\",\"j5FSQCayX3By73CCw\",\"P6eiziWQ7DqgyMBAZ\",\"HnoDeuYM8h3PkXtSz\",\"83o9yriWfuxLznoZT\",\"e2AzEy4BAetcHNjKF\",\"5r3bmtq97ozEwHrmr\",\"jpSy4qhuDNwPk9mrf\",\"32BP5pGjkAM278JhZ\",\"cF8nvyGwfFKE5b2iy\",\"febWyDjvMKSZsjrBR\",\"J7d397iB5GuWRAMfg\",\"wJTDDTE3TrmSXKP4d\",\"HTAm62DZytAEFgSnu\",\"WTL6b4eEMrwfa5Nri\",\"oDtGiNqDMHmhHE3J8\",\"bX6tpTCjwoi6XMMbK\",\"PH32cNxBjrK4a28sn\",\"cC7ADzrNtuNM4MZyH\",\"nBJve5CzG6WAw7WFQ\",\"ymWvGjFbaJbzA2JBh\",\"GZGvYkdHBssXCdrae\",\"pCxejeWqeLt93bBgf\",\"yxeRMw3h9NGTKFJgR\",\"3M7Yxz4dk24DnuzNs\",\"ZEzExwSpJDJWiJwAj\",\"xhrJ9BGQFaMJCEG6F\",\"bfYmA3LMvhSrK59cn\",\"AMpQSjKsRqhCDyS2j\",\"FGEeCTorXbX3WvjFW\",\"9XnGoq9Tv6ut3zTtH\",\"oyB4Wr4EeZnoDaa8B\",\"jicWFrNKadYuLhqxh\",\"ptoWxuabq9qjswpFY\",\"ur2xbXwQ5c9JEBvhq\",\"3jkZkED29kaXmRohH\",\"2v6kmccZDRPbPNDyf\",\"EvBbNLFDbbPo7b6Jd\",\"3WtHp4MBzciz4AE8M\",\"HCfkcKnPs9mrJojdG\",\"STipuJs6kBvPqqsSE\",\"9qJwfSnwqzDYYRqTP\",\"uxKGACwmZ6FNZsMwE\",\"jnyub52Fi79drGvow\",\"QGjY3hgPYPMmMjc7j\",\"mpLFbFKjY6u3nsDMv\",\"DfdkfQh8ctd2BaaRY\",\"urQM9S858JxHec93Q\",\"vdrDCxMWpqCY3yxfj\",\"ZKuwzkssrSsDGNPr5\",\"ThaiAKWWDw2W4QfJh\",\"6DqfWyDnp5nd6CZoQ\",\"nr6NdAwpgMJcL2Wue\",\"pKai8GCtY7DH7Rrht\",\"zg4Cur4s4qQkSiQGo\",\"NJCmkbH5e7qbtZYhd\"],\"total\":157,\"quality\":[3,4,4,5,5,3,5,2,5,4,5,5,1,3,3,5,1,4,2,5,4,5]},\"flags\":0},\"summary\":\"So we can use resolve and reject callbacks to help us store async results whether successful or unsuccessful, but what good are those if we don't have access to those results. Thus we have the then function which returns a promise that appends either a fulfilled or rejection handler(callback) or just returns the settled value.\\n\\nlet promise = new Promise( (reso\",\"tags\":[\"functional_programming\"],\"timestamp\":{\"$date\":1581654547692},\"title\":\"Promises V: Then\",\"quality\":3.772727272727273,\"family\":[{\"_id\":\"xsaGheX3yQ4g4Tb8b\",\"language\":\"javascript\"}]}}"]