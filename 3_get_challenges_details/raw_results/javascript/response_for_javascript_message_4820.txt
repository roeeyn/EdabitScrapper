a["{\"msg\":\"result\",\"id\":\"1165\",\"result\":{\"_id\":\"3mKNTsZ5f7b9hHTky\",\"author\":\"er0s\",\"authorId\":\"5Zq3aGdvh4LHBvnJL\",\"code\":\"function transposeMatrix(mtx) {\\n\\t\\n}\",\"difficulty\":1.9861111111111112,\"editorId\":\"5Zq3aGdvh4LHBvnJL\",\"familyId\":\"uo3HcBe6cw6EBFZgh\",\"instructions\":\"In this challenge, you have to obtain a sentence from the elements of a given matrix. In the matrix, each word of the sentence follows a columnar order from the top to the bottom, instead of the usual left-to-right order: it's time for **transposition**!\\n\\nGiven a matrix `mtx`, implement a function that returns the complete sentence as a string, with the words separated by a space between them.\\n\\n### Examples\\n```\\ntransposeMatrix([\\n  [\\\"Enter\\\"],\\n  [\\\"the\\\"],\\n  [\\\"Matrix!\\\"]\\n]) ➞ \\\"Enter the Matrix!\\\"\\n\\ntransposeMatrix([\\n  [\\\"The\\\", \\\"are\\\"],\\n  [\\\"columns\\\", \\\"rows.\\\"]\\n]) ➞ \\\"The columns are rows.\\\"\\n\\ntransposeMatrix([\\n  [\\\"You\\\", \\\"the\\\"],\\n  [\\\"must\\\", \\\"table\\\"],\\n  [\\\"transpose\\\", \\\"order.\\\"]\\n]) ➞ \\\"You must transpose the table order.\\\"\\n```\\n\\n### Notes\\n- All given matrices are regular, as to say that each column has the same length.\\n- Punctuation is already given, you just have to add the spaces in the returned string.\",\"isHidden\":false,\"lab\":\"Test.assertEquals(transposeMatrix([\\n\\t[\\\"Enter\\\"],\\n\\t[\\\"the\\\"],\\n\\t[\\\"Matrix.\\\"]\\n]), \\\"Enter the Matrix.\\\")\\n\\nTest.assertEquals(transposeMatrix([\\n\\t[\\\"Unfortunately,\\\", \\\"be\\\", \\\"is.\\\", \\\"see\\\"], \\n\\t[\\\"no\\\", \\\"told\\\", \\\"You'll\\\", \\\"it\\\"], \\n\\t[\\\"one\\\", \\\"what\\\", \\\"have\\\", \\\"for\\\"], \\n\\t[\\\"can\\\", \\\"Matrix\\\", \\\"to\\\", \\\"yourself.\\\"]\\n]), \\\"Unfortunately, no one can be told what Matrix is. You'll have to see it for yourself.\\\")\\n\\nTest.assertEquals(transposeMatrix([\\n\\t[\\\"Matrix\\\", \\\"that\\\"],\\n\\t[\\\"is\\\", \\\"system\\\"],\\n\\t[\\\"a\\\", \\\"is\\\"],\\n\\t[\\\"system\\\", \\\"our\\\"],\\n\\t[\\\"Neo,\\\", \\\"enemy.\\\"]\\n]), \\\"Matrix is a system Neo, that system is our enemy.\\\")\\n\\nTest.assertEquals(transposeMatrix([\\n\\t[\\\"If\\\", \\\"killed\\\", \\\"you\\\"],\\n\\t[\\\"you\\\", \\\"in\\\", \\\"die\\\"],\\n\\t[\\\"are\\\", \\\"Matrix\\\", \\\"here?\\\"]\\n]), \\\"If you are killed in Matrix you die here?\\\")\\n\\nTest.assertEquals(transposeMatrix([\\n\\t[\\\"As\\\", \\\"human\\\"],\\n\\t[\\\"long\\\", \\\"race\\\"],\\n\\t[\\\"as\\\", \\\"will\\\"],\\n\\t[\\\"Matrix\\\", \\\"never\\\"],\\n\\t[\\\"exists,\\\", \\\"be\\\"],\\n\\t[\\\"the\\\", \\\"free.\\\"]\\n]), \\\"As long as Matrix exists, the human race will never be free.\\\")\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[1,1,1,1,1,1,2,0,2,2,2,1,2,2,2,0,2,1,2,2,2,2,2,2,3,1,4,0,2,2,1,2,2,1,1,3,3,1,2,1,2,2,2,2,2,2,0,1,2,2,2,2,2,2,2,1,0,2,1,2,2,3,0,2,2,2,2,2,2,2,2,2,3,2,2,2,3,0,2,3,2,2,2,2,1,3,0,2,2,2,3,2,2,2,2,0,3,2,2,2,2,3,2,2,2,5,3,3,1,3,2,3,3,3,2,2,3,3,3,3,3,3,2,2,3,2,2,3,3,2,3,3,1,2,3,1,3,3,3,1,3,2,1,3],\"rators\":[\"5Zq3aGdvh4LHBvnJL\",\"65dbBZynphj53nXqA\",\"DHwbkbzYNpmkSFT7u\",\"294HEYhNpHusCRBXQ\",\"3awyiorYPgCqqP7Sr\",\"Cd8YD52SpvTTrwwCK\",\"FJsvM5yqKuK9yMk9P\",\"L9XxCiDxYJGcMQvxF\",\"EjPLq3QSJdGQFJdgW\",\"R35tqE5etfTYTfmGr\",\"w7WurFm6aZi3JeheA\",\"AasGs8AeX9Lcb9xJn\",\"yjtdwc2AC4jA2RWtn\",\"EWn8w8P3nNh7knatY\",\"Y9Nz9yafaibz54W4o\",\"PJu3WcTpfRrvHfQiS\",\"mHT2bJb5SByfJ8yKS\",\"RE4Mm9T6Q9uygAxGS\",\"XKi8iZXBCHCaebSHh\",\"CJnuSjyCBMTbTiibD\",\"Q9KQomTTPBsrkAL6c\",\"sbme4fRJjjBjYXRbY\",\"SDtZFL5NzAoCPofXk\",\"6BpBQnSGhzgvhXrEy\",\"oFckF5bB5dGBQKneS\",\"zgoq9MhrL2h75DAMA\",\"H3yM3F3mukfdq9fit\",\"2tCCFm5iefjrRSaxv\",\"wcjknenWdPRhrRScv\",\"n5wubRfh6zh8QRymN\",\"BdvdJYwHZr7JpkHsn\",\"EoNHgbWsF6ZQF4eYr\",\"cRpaCxYRmGcN3Nsoj\",\"MEZNjeGd7APtvA3SL\",\"9gEWz76H8KmhN4yJj\",\"ih2aGaqkMaagTgyL2\",\"2innwjWqxJHo4eRGh\",\"2CvHJcA9aXt9pvZwA\",\"zd9FLSzsGz3evKafy\",\"8BFSTCnoe2QggN64c\",\"ir7tHg94xmXe69K6S\",\"6gPHMpkEP8JuHxzpd\",\"zAMR5yM6wpzfE3a4S\",\"XRRZ5kd8PvAQYtA4s\",\"5YCX58nhHT8oRCHyy\",\"QnPD4Sv6W4LHc2Qng\",\"g5noFWaoRtZNcEEAW\",\"M9zJkCtveFNMX8aZE\",\"pi76g3eRpnKrhee2a\",\"YER6iBcpJCuhgrYDN\",\"cp3X8hk8yNME7qoD9\",\"xMLCsZbeTFRpnXeZe\",\"vWhgrr5oem8WtKdxm\",\"vtHbevf2tHqe6mRxX\",\"QozwRCt9hwyqeFB5i\",\"2ZFoLTxcCARhwc8xX\",\"zw7g7T8wE5R5CBhXr\",\"tAF9Gf6PiGogbZuWs\",\"vn6nR36mdfY8z2zKx\",\"Es4eX2stRpyoXeC7f\",\"a777e8chPvJkY3tKa\",\"Lzj3w7QjdzikynsGG\",\"Ji84eQR54xeqRYceZ\",\"WEHtisHTKn6v67nNB\",\"X67qAYJvDuBh3xzEf\",\"ij9YRJvZz6WbqcGXS\",\"Wv9v7fHb8umujfg2j\",\"8raviPK67KKxzQWcF\",\"r7mZLgpQWzRiGddL5\",\"vRsovmMfvfvnR5miw\",\"C9LKGu2g5hSijvDzA\",\"QRv96jmNaYsWkxQEG\",\"7gZKfvwaeqsGKXMEN\",\"yrLBMbni8KDsC5K44\",\"pLpcDC3EYx2DDQSdt\",\"nAmJEX7BkHLd9LsG2\",\"Yzh7zNiyG7LM9vnAj\",\"STipuJs6kBvPqqsSE\",\"aEm3Wvj2rFYRL8Lrb\",\"PGCDJpQMN8Sjn9Gm6\",\"Po3v3dHCk6wYGKMwi\",\"Ya3eHgs8x3unZRLpb\",\"mfYrBKwDr4hXSFuuN\",\"2zKQWLmEBw8FBs4ZL\",\"kp2ZbCewZJAbfd7xv\",\"CNc6rmwhbxkxEhHAp\",\"g4NCSxxHqHCGMpWwT\",\"nkH3HfJXLMNcBMM79\",\"AFfw7cGg83uYk2Miy\",\"M4vq8ATaS9Jg5X7iP\",\"u9cRf5kvtpRB5ffB3\",\"2QifjAQzAEqqnk86G\",\"fuKrbHrj9KMJS9HX8\",\"evTTY9hwrtogaNxXn\",\"2Qk2mFu9HBFzrB24i\",\"3Gf7ikLijfoxabiPY\",\"azAzSkvJd7eyXY9x9\",\"SY9Euc4kQfRgetXTd\",\"Yp7uvStL97cC9fKkY\",\"RtPhDuwmvWNHiBxmG\",\"Pbe8ak9pg7LZgKLC7\",\"Y42BDNy2eiTYNuMJp\",\"srJ34BaybkQh3qRkM\",\"N3CNtWZz4ovJfH9Aw\",\"NGvCPuMiAP3xrRLfB\",\"rpNNPWzdFCc9TzKMz\",\"8BJyXvRWcrvN3nttS\",\"oDtGiNqDMHmhHE3J8\",\"nBJve5CzG6WAw7WFQ\",\"gXTAie79kiw28tx5u\",\"jyoLggHk8xQKZuoQC\",\"5nhmyqLy8M2Yn2HMR\",\"iqmPb9JuJDgTFeR8Q\",\"xsDyJstYoBZRS8pJH\",\"chzgiWZQt3ZHevcPD\",\"5NGxHLcQ8Af2RJ4TN\",\"erzAf7RDcqN3aSg5t\",\"Swb2jDnZjviDXsQvB\",\"DPi9QGLctq2y76KuE\",\"KQNRec88MkMcPeCYK\",\"9DEtdY6vMJq7Nrnjh\",\"gFEpzrgWhzCZHeifj\",\"k8rMJnaejG3dX4ute\",\"RoGGD5cpHb4ftdLDv\",\"d8JhF9zfpexkRnCea\",\"J7EE5zLjbtBYGSnBa\",\"SCY9Qyb83vz8ePBrZ\",\"FGEeCTorXbX3WvjFW\",\"vTAPGCxtvEKjbewQo\",\"rpcGn2u5Sv8RpkDyh\",\"oS8RbMKnP2RQyKh2A\",\"nWND4LmgZTftyB8sN\",\"9iQPvj8xuB6nxCsbX\",\"PC3pLs36zNzpRDSuE\",\"ASmejNsQhpvdv6gbP\",\"aX8rPvMjdbh3CoDmB\",\"LwD3CyYSiBfg3mA4r\",\"5m8bFwNcrMcu4zWHQ\",\"uxKGACwmZ6FNZsMwE\",\"9Pzg45NEiRXhLtLh3\",\"46SBqYjYrHQhMzp2Y\",\"bX6tpTCjwoi6XMMbK\",\"z5ebtimXwFFJdYxoa\",\"ThaiAKWWDw2W4QfJh\",\"WnogMFYXoyvmBmGkm\",\"gz2XrqjBpB2A2yrzq\",\"PvfuMJD2zT3zywjc7\",\"7JCLyrrY6JYGpocac\",\"jnyub52Fi79drGvow\"],\"total\":158,\"quality\":[3,5,5,5,4,5,5,5,5,5,5]},\"flags\":0},\"summary\":\"In this challenge, you have to obtain a sentence from the elements of a given matrix. In the matrix, each word of the sentence follows a columnar order from the top to the bottom, instead of the usual left-to-right order: it's time for transposition!\\n\\nGiven a matrix mtx, implement a function that returns the complete sentence as a string, with the words separa\",\"tags\":[\"arrays\",\"strings\",\"formatting\"],\"timestamp\":{\"$date\":1573915561819},\"title\":\"Enter the Matrix\",\"quality\":4.7272727272727275,\"family\":[{\"_id\":\"HC6h6dT3xMg7qEk2S\",\"language\":\"cpp\"},{\"_id\":\"YGFhsF3veFwqKyp4x\",\"language\":\"java\"},{\"_id\":\"3mKNTsZ5f7b9hHTky\",\"language\":\"javascript\"},{\"_id\":\"kdhgEC2ECXAfoXWQP\",\"language\":\"python3\"},{\"_id\":\"QAYrydsMzoxNtgiMp\",\"language\":\"ruby\"}]}}"]