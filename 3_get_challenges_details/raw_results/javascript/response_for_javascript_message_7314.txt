a["{\"msg\":\"result\",\"id\":\"2394\",\"result\":{\"_id\":\"Yr5RgqT7bfdSscfbK\",\"author\":\"Kenny Fraser\",\"authorId\":\"jWW9YLuYPdAR6uR4c\",\"code\":\"function gather(str) {\\n\\t\\n}\",\"difficulty\":4.3125,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"nevQq3GGfAXpmSe6r\",\"instructions\":\"Create a `gather` function that accepts a string argument and returns another function.\\nThe function calls should support continued chaining until `order` is called.\\n\\n`order` should accept a number as an argument and return another function. The function calls should support continued chaining until `get` is called.\\n\\n`get` should return all of the arguments provided to the gather functions as a string in the order specified in the order functions.\\n\\n### Examples\\n```\\ngather(\\\"a\\\")(\\\"b\\\")(\\\"c\\\").order(0)(1)(2).get() ➞ \\\"abc\\\"\\n\\ngather(\\\"a\\\")(\\\"b\\\")(\\\"c\\\").order(2)(1)(0).get() ➞ \\\"cba\\\"\\n\\ngather(\\\"e\\\")(\\\"l\\\")(\\\"o\\\")(\\\"l\\\")(\\\"!\\\")(\\\"h\\\").order(5)(0)(1)(3)(2)(4).get()  ➞ \\\"hello!\\\"\\n```\\n\\n### Notes\\nExpect `gather` and `order` to chain any number of times, but always with the same number of invocations for each (i.e both fuctions will always be chained the same nubmer of times).\",\"isHidden\":false,\"lab\":\"Test.assertEquals(gather(\\\"a\\\")(\\\"b\\\")(\\\"c\\\").order(0)(1)(2).get(), \\\"abc\\\")\\nTest.assertEquals(gather(\\\"a\\\")(\\\"b\\\")(\\\"c\\\").order(2)(1)(0).get(), \\\"cba\\\")\\nTest.assertEquals(gather(\\\"a\\\")(\\\"b\\\")(\\\"c\\\")(\\\"d\\\")(\\\"e\\\")(\\\"f\\\").order(1)(0)(2)(3)(4)(5).get(), \\\"bacdef\\\")\\nTest.assertEquals(gather(\\\"h\\\")(\\\"i\\\")(\\\"j\\\")(\\\"k\\\")(\\\"l\\\")(\\\"m\\\").order(0)(4)(3)(5)(1)(2).get(), \\\"hlkmij\\\")\\nTest.assertEquals(gather(\\\"e\\\")(\\\"l\\\")(\\\"o\\\")(\\\"l\\\")(\\\"!\\\")(\\\"h\\\").order(5)(0)(1)(3)(2)(4).get(), \\\"hello!\\\")\\nTest.assertEquals(gather(\\\"e\\\")(\\\"a\\\")(\\\"d\\\")(\\\"b\\\")(\\\"i\\\")(\\\"!\\\")(\\\"t\\\")(\\\"!\\\").order(0)(2)(1)(3)(4)(6)(5)(7).get(), \\\"edabit!!\\\")\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,5,4,5,0,5,5,4,4,4,3,5],\"rators\":[\"jWW9YLuYPdAR6uR4c\",\"yjtdwc2AC4jA2RWtn\",\"mHT2bJb5SByfJ8yKS\",\"h4jFmtbFn92eA4649\",\"JGBCMpnbbi5ztuFoX\",\"7TXyMDHFYjna3dyPb\",\"aEm3Wvj2rFYRL8Lrb\",\"va3fDAQm4sqSMoy3R\",\"QhrvcKMsvcz8zsKZo\",\"bHnhWtTzxPopvmyv2\",\"krZ6nT623MZFty7tB\"],\"total\":11,\"quality\":[]},\"flags\":0},\"summary\":\"Create a gather function that accepts a string argument and returns another function.\\nThe function calls should support continued chaining until order is called.\\n\\norder should accept a number as an argument and return another function. The function calls should support continued chaining until get is called.\\n\\nget should return all of the arguments provided to\",\"tags\":[\"functional_programming\",\"higher_order_functions\",\"recursion\",\"scope\"],\"timestamp\":{\"$date\":1573153312699},\"title\":\"Puzzle: Gather and Order\",\"quality\":0,\"family\":[{\"_id\":\"Yr5RgqT7bfdSscfbK\",\"language\":\"javascript\"}]}}"]