a["{\"msg\":\"result\",\"id\":\"1031\",\"result\":{\"_id\":\"hQtRsdNykZgNEZp9J\",\"author\":\"Isaac Pak\",\"authorId\":\"yaL57wdXmgAZTvKfX\",\"code\":\"const REGEXP = /* YOU FILL IN */\",\"difficulty\":1.6944444444444444,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"yroJGcuwbBHyJ7aLj\",\"instructions\":\"You're needed to finish a program that lists how many tall people work in your company. All that is needed is a **regular expression** that will make the function work correctly.\\n\\n```\\nconst res = [\\\"tall height\\\", \\\"tall height\\\", \\\"short height\\\", \\\"medium height\\\", \\\"tall height\\\"]\\n\\nfunction countTall(res) {\\n  const REGEXP = /* YOU FILL IN */\\n  return res.filter( x => REGEXP.test(x)).length\\n}\\n\\ncountTall(res) // should output 3\\n```\\n\\nWrite the **regular expression** to make the function output the correct number. You're required to use a **positive lookbehind** assertion in your expression.\\n\\n### Notes\\nCheck the **Resources** tab for details on **lookbehind** assertions.\",\"isHidden\":false,\"lab\":\"const res = [\\\"tall height\\\", \\\"tall height\\\", \\\"short height\\\", \\\"medium height\\\", \\\"tall height\\\"] \\n\\nconst validate = (REGEXP) => {\\n\\t if(!/\\\\(\\\\?\\\\<\\\\=/.test(String(REGEXP))) return () => \\\"positive lookbehind required\\\"\\n\\t return function testReg(res) {\\n\\t\\t return res.filter(x => REGEXP.test(x)).length\\n\\t }\\n} \\n\\nconst testExp = validate(REGEXP) \\n\\nTest.assertNotEquals(testExp(res), \\\"positive lookbehind required\\\", \\\"You are required to use a positive lookbehind in your expression.\\\")\\nTest.assertSimilar(testExp(res), 3)\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,1,3,2,0,1,1,2,2,2,1,2,2,1,2,1,1,2,1,2,2,2,2,3,2,2,1,2,2,2,2,1,2,2,2,2,2,2,2,2,3,3,3,3,1,3,2,3,1,0,2,0,2,1,3,2,3,2,2,2,2,3,2,2,2,0,2,2,1,2,1,2,0,0,1,2,2,1,2,0,0,2,0,2,2,1,0,1,0,2,2,2,2,2,2,2,5,1,1,1,1,2,0],\"rators\":[\"yaL57wdXmgAZTvKfX\",\"n5wubRfh6zh8QRymN\",\"yuLxi2qBJvMnwgdgJ\",\"Y9Nz9yafaibz54W4o\",\"yjtdwc2AC4jA2RWtn\",\"jqbm8L6895JgAtZ6H\",\"5Zq3aGdvh4LHBvnJL\",\"dPM2Rk2iMkznyXNEt\",\"6BpBQnSGhzgvhXrEy\",\"QnPD4Sv6W4LHc2Qng\",\"mHT2bJb5SByfJ8yKS\",\"RE4Mm9T6Q9uygAxGS\",\"cJwiiiX7qwSvgtmk8\",\"pi76g3eRpnKrhee2a\",\"EWn8w8P3nNh7knatY\",\"YER6iBcpJCuhgrYDN\",\"FJsvM5yqKuK9yMk9P\",\"EjPLq3QSJdGQFJdgW\",\"v2AzBqD64zLiRD9bP\",\"AasGs8AeX9Lcb9xJn\",\"eomLS3wh6tQPN8jtH\",\"vtHbevf2tHqe6mRxX\",\"65dbBZynphj53nXqA\",\"a777e8chPvJkY3tKa\",\"zW5JY78HhFCrSPEeE\",\"eNdxN376u6gM4qdXF\",\"Q75jsoXjhTXJRrw8z\",\"E6DBfkTgHuPsDWdG8\",\"eFjGhq7C7bBKXjT6X\",\"HFuNFZpdKCddzbuqc\",\"C9LKGu2g5hSijvDzA\",\"aEm3Wvj2rFYRL8Lrb\",\"buX4mCQhtXCfBjeno\",\"eoepTq5ES5tfgY9XT\",\"8raviPK67KKxzQWcF\",\"EoNHgbWsF6ZQF4eYr\",\"qaR8DnWrTk8Mus5Q2\",\"pLpcDC3EYx2DDQSdt\",\"ij9YRJvZz6WbqcGXS\",\"7gZKfvwaeqsGKXMEN\",\"ZcmrtSpqFnCBEK5YE\",\"pGmFexazR4FeTCuWD\",\"KN8ZCWtP4aBp9HNJi\",\"s9qcJASB9WKPWaQzi\",\"iJC8PmpzSyTnEDqw5\",\"dk2aGfRcWM4ybXLaP\",\"Kntd2rSgWYWp8r4sP\",\"bX6tpTCjwoi6XMMbK\",\"qvNk7pHSveLu3jqWw\",\"jED84My7PjSKANQsX\",\"e9Cknxbx6o7Nb6REs\",\"kKEdtoo4zb5jCgYno\",\"aBi4GtZ6t3wFQD9v5\",\"rC7kdm3SsSX9udEQk\",\"8ckG2gipYtieiDY4z\",\"Nb6LYPoQP6KJZt8mz\",\"jkumHyXfMkhGcPgqC\",\"5NGxHLcQ8Af2RJ4TN\",\"PTo9qt93YqGvL8fCa\",\"7JCLyrrY6JYGpocac\",\"TJLQds4MwsNbQouKy\",\"G9D7k5M9wb3s2wxc3\",\"tTXAQ722Dk6oTuE74\",\"z6rWbk4FWtqs7qHvm\",\"edtyLBmmcW2bqd86X\",\"kd3FfCRjmYR8hB7bw\",\"5nHtgdY8F2FbAMawq\",\"2QNs5hQaDgo792ztf\",\"m3iaYoubtTShmReLD\",\"vewKwcMeGuk3p3MsN\",\"nxycxLNEN4PXDotSh\",\"p6qLK4qS2dnFzDA7k\",\"rr8eSDoAKixZznsEZ\",\"jcPZ5ySXseCB7Ec3x\",\"s7Qqx4Jnuq85iB7Lw\",\"2tCCFm5iefjrRSaxv\",\"kp2ZbCewZJAbfd7xv\",\"nyh73Tr6GhqAat78g\",\"hyx8iH2z3QySmyRKT\",\"CNc6rmwhbxkxEhHAp\",\"BdvdJYwHZr7JpkHsn\",\"nkH3HfJXLMNcBMM79\",\"g4NCSxxHqHCGMpWwT\",\"zw7g7T8wE5R5CBhXr\",\"AFfw7cGg83uYk2Miy\",\"tAF9Gf6PiGogbZuWs\",\"wbzQwextPpnNBR7cG\",\"Akq3fQcPRgPrWfsye\",\"evTTY9hwrtogaNxXn\",\"NchnDcEmsLTeFZ4FH\",\"pER3Z29q2fkQdcxTw\",\"Yp7uvStL97cC9fKkY\",\"3Gf7ikLijfoxabiPY\",\"yxh6CjdHCfkhJszj6\",\"4wR64Jaibcom7tbYf\",\"RtPhDuwmvWNHiBxmG\",\"u9cRf5kvtpRB5ffB3\",\"M4vq8ATaS9Jg5X7iP\",\"npp5hesJrst6ghKSM\",\"GsrjAqoAdLATJH9qD\",\"oDtGiNqDMHmhHE3J8\",\"N3CNtWZz4ovJfH9Aw\",\"2Qk2mFu9HBFzrB24i\",\"NGvCPuMiAP3xrRLfB\",\"9HZbxzkzgz4CvePtv\",\"nBJve5CzG6WAw7WFQ\",\"gXTAie79kiw28tx5u\",\"HCfkcKnPs9mrJojdG\",\"t7pipHrTKZgGQn875\",\"TtrXnGzi9MyhLvWiz\",\"jyoLggHk8xQKZuoQC\",\"bfYmA3LMvhSrK59cn\",\"jicWFrNKadYuLhqxh\",\"QGjY3hgPYPMmMjc7j\",\"rMc3LPajSgm68hNfC\",\"oyB4Wr4EeZnoDaa8B\",\"CHvzhtXnv8HTbPQ56\"],\"total\":126,\"quality\":[3,3,5,5,4,3,5,3,4,5,4,5,5,5]},\"flags\":0},\"summary\":\"You're needed to finish a program that lists how many tall people work in your company. All that is needed is a regular expression that will make the function work correctly.\\n\\nconst res = [\\\"tall height\\\", \\\"tall height\\\", \\\"short height\\\", \\\"medium height\\\", \\\"tall height\\\"]\\n\\nfunction countTall(res) {\\n  const REGEXP = /* YOU FILL IN */\\n  return res.filter( x => REGEXP.\",\"tags\":[\"language_fundamentals\",\"formatting\",\"regex\"],\"timestamp\":{\"$date\":1580936662992},\"title\":\"RegEx: Boundary Assertions VI\",\"quality\":4.214285714285714,\"family\":[{\"_id\":\"hQtRsdNykZgNEZp9J\",\"language\":\"javascript\"},{\"_id\":\"pDQ8sTXDxesqiTRuY\",\"language\":\"python3\"}]}}"]