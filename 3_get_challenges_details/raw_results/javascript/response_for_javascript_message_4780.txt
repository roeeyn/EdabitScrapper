a["{\"msg\":\"result\",\"id\":\"1142\",\"result\":{\"_id\":\"9tJ97HK3c4Koy3KsF\",\"author\":\"er0s\",\"authorId\":\"5Zq3aGdvh4LHBvnJL\",\"code\":\"function createTest(a, b) {\\n\\t\\n}\",\"difficulty\":1.963855421686747,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"yMg7TCTnHjPvYzuQ2\",\"instructions\":\"You are given two values `a` and `b` of identical type: numbers, strings or arrays. The result will be:\\n- The **sum** of `a` and `b` if the parameters are numbers.\\n    - a = 1 | b = 1 ➞ Result = 2\\n- The **join** in a single string of `a` and `b` if the parameters are strings.\\n    - a = \\\"1\\\" | b = \\\"1\\\" ➞ Result = \\\"11\\\"\\n- The **concatenation** of the values of `a` and `b` in a single array if the parameters are arrays.\\n    - a = \\\\[\\\"String\\\"] | b = \\\\[\\\"String\\\"] ➞ Result = \\\\[\\\"String\\\", \\\"String\\\"]\\n\\nIn any case, you don't have to simply return the result. This challenge will be a little different from usual because your function is going to return the same Test Case that verifies the correctness of your function!\\n\\nWhen you try to solve a challenge your function is passed to a Test function, that accepts three parameters: your function with its related parameters, the expected result, and an optional comment (not used in this exercise).\\n\\nThere are two different types for a Test function:\\n\\n```\\nTest.assertEquals(yourFunctionName(firstParameter, ..., lastParameter), result)\\n```\\n\\nThis is used when the value type of the expected result is primitive (numbers, strings, booleans or special values like `undefined`, `null` and `NaN`).\\n\\n```\\nTest.assertSimilar(yourFunctionName(firstParameter, ..., lastParameter), result)\\n```\\n\\nThis is used when the value type of the expected result is an object (arrays or object literals).\\n\\nYou must return a string containing the Test function that verifies the correctness of the result that you got. See the  examples below for a better explanation.\\n\\n### Examples\\n```\\ncreateTest(1, 1) ➞ 'Test.assertEquals(createTest(1, 1), 2)'\\n// Parameters are numbers, so result will be their sum: Test function verifies equality.\\n\\ncreateTest(\\\"a\\\", \\\"b\\\") ➞ 'Test.assertEquals(createTest(\\\"a\\\", \\\"b\\\"), \\\"ab\\\")'\\n// Parameters are strings, so result will be their join: Test function verifies equality.\\n\\ncreateTest([\\\"String\\\"], [\\\"String\\\"]) ➞ 'Test.assertSimilar(createTest([\\\"String\\\"], [\\\"String\\\"]), [\\\"String\\\", \\\"String\\\"])'\\n// Parameters are arrays, so result will be the concatenation of the values inside the arrays: Test function verifies similarity.\\n```\\n\\n### Notes\\n- When parameters, results or values inside arrays are strings, they need the double quotation marks `\\\"` around them in the returned string.\\n- Look at **Tests** tab if you need help!\",\"isHidden\":false,\"lab\":\"Test.assertEquals(createTest(\\\"a\\\", \\\"b\\\"), 'Test.assertEquals(createTest(\\\"a\\\", \\\"b\\\"), \\\"ab\\\")')\\nTest.assertEquals(createTest(\\\"Te\\\", \\\"st\\\"), 'Test.assertEquals(createTest(\\\"Te\\\", \\\"st\\\"), \\\"Test\\\")')\\nTest.assertEquals(createTest(\\\"1\\\", \\\"1\\\"), 'Test.assertEquals(createTest(\\\"1\\\", \\\"1\\\"), \\\"11\\\")')\\nTest.assertEquals(createTest(1, 1), 'Test.assertEquals(createTest(1, 1), 2)')\\nTest.assertEquals(createTest(99, 1), 'Test.assertEquals(createTest(99, 1), 100)')\\nTest.assertEquals(createTest(0, 0), 'Test.assertEquals(createTest(0, 0), 0)')\\nTest.assertEquals(createTest([1], [1]), 'Test.assertSimilar(createTest([1], [1]), [1, 1])')\\nTest.assertEquals(createTest([\\\"1\\\"], [\\\"1\\\"]), 'Test.assertSimilar(createTest([\\\"1\\\"], [\\\"1\\\"]), [\\\"1\\\", \\\"1\\\"])')\\nTest.assertEquals(createTest([\\\"String\\\"], [\\\"String\\\"]), 'Test.assertSimilar(createTest([\\\"String\\\"], [\\\"String\\\"]), [\\\"String\\\", \\\"String\\\"])')\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[1,1,1,1,1,2,1,0,0,2,0,2,2,1,2,2,1,2,1,3,3,0,5,2,0,2,2,2,2,2,2,2,1,2,3,3,2,1,2,2,3,1,2,3,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,3,2,2,3,2,3,2,2,2,3,2,3,3,3,4,0,3,1,3,1,3,3,4],\"rators\":[\"5Zq3aGdvh4LHBvnJL\",\"yjtdwc2AC4jA2RWtn\",\"DHwbkbzYNpmkSFT7u\",\"2jF5tzqkoDjT9fr86\",\"3awyiorYPgCqqP7Sr\",\"SDtZFL5NzAoCPofXk\",\"mHaHudYExvi45DSRf\",\"Q9KQomTTPBsrkAL6c\",\"EWn8w8P3nNh7knatY\",\"6BpBQnSGhzgvhXrEy\",\"R35tqE5etfTYTfmGr\",\"jWXdurfxtiaCq64sz\",\"L9XxCiDxYJGcMQvxF\",\"vKch2w3b4keMd84jj\",\"mHT2bJb5SByfJ8yKS\",\"ui2o8PXTWLXbF9CZ7\",\"zw7g7T8wE5R5CBhXr\",\"3QmTLSKrXrH4B5DMF\",\"65dbBZynphj53nXqA\",\"FJQH9eyzX84d9Fdmf\",\"BGQqaYbqYqmTo5Ehs\",\"a5SYsAFj5km9yZkAQ\",\"krkDcjCjgG7oP6Lv4\",\"EjPLq3QSJdGQFJdgW\",\"MuJJrdMceCFuJmwB2\",\"oFckF5bB5dGBQKneS\",\"MRedsQ5gbonhjmZzW\",\"EzZ3Z9CqpwbbLfr9m\",\"SuGxk6Q76hri3vGjS\",\"6gjzvscyjCy6DNf32\",\"Wimia23SLcdR5cvRs\",\"g5TGZXtvwT44rHda9\",\"5HRPnrWvfDLAiEGFc\",\"eC7zfaqWK5pBjRgAE\",\"GNmuSxHrwjB5QcdWc\",\"AvkbJw6egHp38NK9w\",\"n5wubRfh6zh8QRymN\",\"BdvdJYwHZr7JpkHsn\",\"ih2aGaqkMaagTgyL2\",\"5YCX58nhHT8oRCHyy\",\"pi76g3eRpnKrhee2a\",\"vtHbevf2tHqe6mRxX\",\"a777e8chPvJkY3tKa\",\"buX4mCQhtXCfBjeno\",\"2zKQWLmEBw8FBs4ZL\",\"pLpcDC3EYx2DDQSdt\",\"7gZKfvwaeqsGKXMEN\",\"v9vhh4ZaGWYSdYDkq\",\"tAF9Gf6PiGogbZuWs\",\"aEm3Wvj2rFYRL8Lrb\",\"Ya3eHgs8x3unZRLpb\",\"CNc6rmwhbxkxEhHAp\",\"g4NCSxxHqHCGMpWwT\",\"nkH3HfJXLMNcBMM79\",\"3Gf7ikLijfoxabiPY\",\"vGKxRcDYDsXzTQuEQ\",\"Yp7uvStL97cC9fKkY\",\"u9cRf5kvtpRB5ffB3\",\"M4vq8ATaS9Jg5X7iP\",\"Ef3McfqD44hj4Est9\",\"mpLFbFKjY6u3nsDMv\",\"y3idnotLMyufTA6DB\",\"nBJve5CzG6WAw7WFQ\",\"Afnps7TJQuS9sipMb\",\"oDtGiNqDMHmhHE3J8\",\"uxKGACwmZ6FNZsMwE\",\"8BJyXvRWcrvN3nttS\",\"kxFNPgaeGtKCjZeF5\",\"NwPCDbFATdvXuxnxJ\",\"WSkWtwATgMh7hvG8D\",\"qxbvpNsm2PPPzR83Q\",\"XY6ES4C6L8EMnuBRE\",\"NDPrB3PrL3KDSRL3j\",\"t7gsrAszuJPS5eq6M\",\"LwD3CyYSiBfg3mA4r\",\"3WtHp4MBzciz4AE8M\",\"vSPc7MGK5Poy8tSFp\",\"ThaiAKWWDw2W4QfJh\",\"7JCLyrrY6JYGpocac\",\"RKKuw76K7sRBMouKq\",\"sLuBiDGuMZGK4KmCs\",\"MEpzPM32956s6X7T2\",\"Cc4MTDzF46xzM8oLi\",\"GXH2DNCRdiGaGCPBy\"],\"total\":87,\"quality\":[4,3,5,5,5,5]},\"flags\":0},\"subscribers\":[\"5Zq3aGdvh4LHBvnJL\"],\"summary\":\"You are given two values a and b of identical type: numbers, strings or arrays. The result will be:\\nThe sum of a and b if the parameters are numbers.\\n    a = 1 | b = 1 ➞ Result = 2\\nThe join in a single string of a and b if the parameters are strings.\\n    a = \\\"1\\\" | b = \\\"1\\\" ➞ Result = \\\"11\\\"\\nThe concatenation of the values of a and b in a single array if the param\",\"tags\":[\"scope\",\"higher_order_functions\",\"strings\",\"validation\"],\"timestamp\":{\"$date\":1572141073269},\"title\":\"Metaprogramming: Making a Test Case\",\"quality\":4.5,\"family\":[{\"_id\":\"9tJ97HK3c4Koy3KsF\",\"language\":\"javascript\"}]}}"]