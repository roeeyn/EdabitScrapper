a["{\"msg\":\"result\",\"id\":\"1750\",\"result\":{\"_id\":\"KTrcDJkkW9inXesDy\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"function maxItems(prices, budget) {\\n\\t\\n}\",\"difficulty\":2.3846153846153846,\"familyId\":\"TFy45y6zoH6f2pdYp\",\"instructions\":\"_On a vacation abroad, you see a souvenir shop and decide to head inside. There are snow globes, postcards, fridge magnets and all the other goodies you'd typically find._\\n\\nGiven an array of _prices of things in the store_ and _the amount of money you have_, return the **maximum** number of items you could possibly buy.\\n\\n### Examples\\n```\\nmaxItems([\\\"$1\\\", \\\"$1\\\", \\\"$2\\\"], \\\"$3\\\") ➞ 2\\n\\nmaxItems([\\\"$10\\\", \\\"$7\\\", \\\"$2\\\", \\\"$60\\\"], \\\"$20\\\") ➞ 3\\n\\nmaxItems([\\\"$15\\\", \\\"$5\\\", \\\"$30\\\", \\\"$30\\\", \\\"$10\\\"], \\\"$2\\\") ➞ \\\"Not enough funds!\\\"\\n```\\n\\n### Notes\\n- If you cannot afford anything, return `\\\"Not enough funds!\\\"`\\n- Prices will be whole numbers.\",\"isHidden\":false,\"lab\":\"Test.assertEquals(maxItems([\\\"$1\\\", \\\"$1\\\", \\\"$2\\\"], \\\"$3\\\"), 2)\\nTest.assertEquals(maxItems([\\\"$10\\\", \\\"$7\\\", \\\"$2\\\", \\\"$60\\\"], \\\"$20\\\"), 3)\\nTest.assertEquals(maxItems([\\\"$15\\\", \\\"$5\\\", \\\"$30\\\", \\\"$30\\\", \\\"$10\\\"], \\\"$2\\\"), \\\"Not enough funds!\\\")\\nTest.assertEquals(maxItems([\\\"$99\\\", \\\"$8\\\"], \\\"$9\\\"), 1)\\nTest.assertEquals(maxItems([\\\"$85\\\", \\\"$88\\\", \\\"$72\\\", \\\"$77\\\", \\\"$53\\\"], \\\"$56\\\"), 1)\\nTest.assertEquals(maxItems([\\\"$12\\\", \\\"$2\\\", \\\"$49\\\", \\\"$21\\\", \\\"$76\\\", \\\"$64\\\"], \\\"$37\\\"), 3)\\nTest.assertEquals(maxItems([\\\"$3\\\", \\\"$17\\\", \\\"$12\\\", \\\"$98\\\", \\\"$12\\\", \\\"$91\\\", \\\"$41\\\", \\\"$73\\\"], \\\"$116\\\"), 5)\\nTest.assertEquals(maxItems([\\\"$18\\\", \\\"$16\\\", \\\"$32\\\", \\\"$30\\\", \\\"$43\\\", \\\"$80\\\", \\\"$13\\\"], \\\"$86\\\"), 4)\\nTest.assertEquals(maxItems([\\\"$20\\\", \\\"$11\\\", \\\"$8\\\", \\\"$59\\\", \\\"$64\\\", \\\"$36\\\", \\\"$41\\\", \\\"$99\\\", \\\"$98\\\"], \\\"$357\\\"), 8)\\nTest.assertEquals(maxItems([\\\"$12\\\", \\\"$98\\\", \\\"$56\\\", \\\"$88\\\"], \\\"$489\\\"), 4)\\nTest.assertEquals(maxItems([\\\"$12\\\"], \\\"$26\\\"), 1)\\nTest.assertEquals(maxItems([\\\"$65\\\", \\\"$78\\\", \\\"$78\\\", \\\"$61\\\", \\\"$51\\\", \\\"$91\\\", \\\"$76\\\", \\\"$27\\\", \\\"$85\\\", \\\"$70\\\"], \\\"$64\\\"), 1)\\nTest.assertEquals(maxItems([\\\"$28\\\", \\\"$64\\\"], \\\"$404\\\"), 2)\\nTest.assertEquals(maxItems([\\\"$69\\\"], \\\"$188\\\"), 1)\\nTest.assertEquals(maxItems([\\\"$59\\\", \\\"$99\\\", \\\"$59\\\", \\\"$90\\\", \\\"$75\\\", \\\"$19\\\", \\\"$36\\\", \\\"$56\\\", \\\"$79\\\", \\\"$5\\\"], \\\"$74\\\"), 3)\\nTest.assertEquals(maxItems([\\\"$73\\\", \\\"$7\\\", \\\"$75\\\", \\\"$33\\\", \\\"$7\\\", \\\"$95\\\", \\\"$11\\\"], \\\"$463\\\"), 7)\\nTest.assertEquals(maxItems([\\\"$58\\\", \\\"$64\\\", \\\"$85\\\", \\\"$21\\\", \\\"$91\\\", \\\"$1\\\"], \\\"$333\\\"), 6)\\nTest.assertEquals(maxItems([\\\"$89\\\", \\\"$7\\\", \\\"$27\\\"], \\\"$451\\\"), 3)\\nTest.assertEquals(maxItems([\\\"$10\\\", \\\"$63\\\", \\\"$25\\\", \\\"$2\\\", \\\"$10\\\", \\\"$59\\\", \\\"$71\\\", \\\"$60\\\", \\\"$88\\\"], \\\"$129\\\"), 5)\\nTest.assertEquals(maxItems([\\\"$23\\\", \\\"$82\\\", \\\"$75\\\", \\\"$17\\\", \\\"$67\\\", \\\"$67\\\", \\\"$95\\\", \\\"$48\\\", \\\"$15\\\"], \\\"$185\\\"), 5)\\nTest.assertEquals(maxItems([\\\"$86\\\", \\\"$22\\\", \\\"$92\\\", \\\"$8\\\", \\\"$44\\\", \\\"$97\\\"], \\\"$102\\\"), 3)\\nTest.assertEquals(maxItems([\\\"$16\\\"], \\\"$136\\\"), 1)\\nTest.assertEquals(maxItems([\\\"$37\\\", \\\"$46\\\", \\\"$68\\\", \\\"$7\\\", \\\"$75\\\", \\\"$53\\\", \\\"$79\\\"], \\\"$20\\\"), 1)\\nTest.assertEquals(maxItems([\\\"$71\\\", \\\"$36\\\", \\\"$5\\\", \\\"$56\\\", \\\"$33\\\", \\\"$66\\\", \\\"$91\\\", \\\"$49\\\"], \\\"$120\\\"), 3)\\nTest.assertEquals(maxItems([\\\"$43\\\", \\\"$70\\\", \\\"$25\\\", \\\"$100\\\", \\\"$47\\\", \\\"$95\\\", \\\"$8\\\"], \\\"$66\\\"), 2)\\nTest.assertEquals(maxItems([\\\"$70\\\", \\\"$11\\\", \\\"$87\\\", \\\"$65\\\", \\\"$6\\\", \\\"$9\\\", \\\"$63\\\", \\\"$55\\\", \\\"$90\\\", \\\"$95\\\"], \\\"$177\\\"), 5)\\nTest.assertEquals(maxItems([\\\"$24\\\", \\\"$90\\\", \\\"$100\\\", \\\"$31\\\", \\\"$99\\\"], \\\"$287\\\"), 4)\\nTest.assertEquals(maxItems([\\\"$34\\\", \\\"$62\\\", \\\"$62\\\", \\\"$98\\\", \\\"$100\\\"], \\\"$101\\\"), 2)\\nTest.assertEquals(maxItems([\\\"$59\\\", \\\"$90\\\", \\\"$97\\\", \\\"$34\\\", \\\"$31\\\", \\\"$37\\\", \\\"$31\\\", \\\"$97\\\", \\\"$52\\\", \\\"$70\\\"], \\\"$224\\\"), 5)\\nTest.assertEquals(maxItems([\\\"$29\\\", \\\"$71\\\", \\\"$23\\\", \\\"$27\\\", \\\"$46\\\", \\\"$33\\\"], \\\"$100\\\"), 3)\\nTest.assertEquals(maxItems([\\\"$34\\\", \\\"$6\\\"], \\\"$263\\\"), 2)\\nTest.assertEquals(maxItems([\\\"$36\\\", \\\"$34\\\", \\\"$74\\\", \\\"$90\\\", \\\"$14\\\", \\\"$21\\\", \\\"$96\\\", \\\"$24\\\", \\\"$67\\\"], \\\"$306\\\"), 7)\\nTest.assertEquals(maxItems([\\\"$78\\\", \\\"$83\\\"], \\\"$239\\\"), 2)\\nTest.assertEquals(maxItems([\\\"$6\\\", \\\"$8\\\", \\\"$67\\\", \\\"$64\\\"], \\\"$349\\\"), 4)\\nTest.assertEquals(maxItems([\\\"$95\\\", \\\"$59\\\", \\\"$58\\\", \\\"$28\\\", \\\"$82\\\", \\\"$38\\\", \\\"$65\\\", \\\"$33\\\", \\\"$29\\\"], \\\"$247\\\"), 6)\\nTest.assertEquals(maxItems([\\\"$57\\\", \\\"$97\\\", \\\"$47\\\", \\\"$91\\\", \\\"$70\\\", \\\"$78\\\"], \\\"$440\\\"), 6)\\nTest.assertEquals(maxItems([\\\"$45\\\"], \\\"$319\\\"), 1)\\nTest.assertEquals(maxItems([\\\"$5\\\", \\\"$89\\\", \\\"$78\\\", \\\"$73\\\", \\\"$44\\\", \\\"$93\\\", \\\"$57\\\", \\\"$80\\\"], \\\"$402\\\"), 6)\\nTest.assertEquals(maxItems([\\\"$1\\\", \\\"$26\\\", \\\"$54\\\", \\\"$12\\\", \\\"$5\\\", \\\"$61\\\"], \\\"$47\\\"), 4)\\nTest.assertEquals(maxItems([\\\"$16\\\", \\\"$50\\\"], \\\"$331\\\"), 2)\\nTest.assertEquals(maxItems([\\\"$6\\\", \\\"$51\\\"], \\\"$88\\\"), 2)\\nTest.assertEquals(maxItems([\\\"$74\\\", \\\"$91\\\"], \\\"$493\\\"), 2)\\nTest.assertEquals(maxItems([\\\"$51\\\", \\\"$81\\\", \\\"$64\\\", \\\"$51\\\"], \\\"$47\\\"), \\\"Not enough funds!\\\")\\nTest.assertEquals(maxItems([\\\"$32\\\", \\\"$60\\\", \\\"$12\\\", \\\"$93\\\", \\\"$82\\\"], \\\"$242\\\"), 4)\\nTest.assertEquals(maxItems([\\\"$92\\\", \\\"$55\\\", \\\"$35\\\", \\\"$78\\\", \\\"$1\\\"], \\\"$421\\\"), 5)\\nTest.assertEquals(maxItems([\\\"$46\\\", \\\"$41\\\", \\\"$47\\\", \\\"$52\\\", \\\"$99\\\", \\\"$62\\\", \\\"$50\\\", \\\"$62\\\", \\\"$65\\\", \\\"$38\\\"], \\\"$5\\\"), \\\"Not enough funds!\\\")\\nTest.assertEquals(maxItems([\\\"$33\\\", \\\"$4\\\", \\\"$4\\\"], \\\"$475\\\"), 3)\\nTest.assertEquals(maxItems([\\\"$78\\\", \\\"$11\\\", \\\"$37\\\", \\\"$95\\\", \\\"$60\\\", \\\"$11\\\", \\\"$53\\\", \\\"$58\\\", \\\"$97\\\"], \\\"$231\\\"), 6)\\nTest.assertEquals(maxItems([\\\"$20\\\", \\\"$69\\\", \\\"$46\\\", \\\"$91\\\", \\\"$42\\\", \\\"$49\\\", \\\"$54\\\", \\\"$44\\\", \\\"$96\\\"], \\\"$476\\\"), 8)\\nTest.assertEquals(maxItems([\\\"$60\\\", \\\"$42\\\", \\\"$93\\\", \\\"$47\\\", \\\"$67\\\"], \\\"$478\\\"), 5)\\nTest.assertEquals(maxItems([\\\"$81\\\", \\\"$14\\\", \\\"$12\\\", \\\"$89\\\", \\\"$69\\\"], \\\"$377\\\"), 5)\\nTest.assertEquals(maxItems([\\\"$16\\\", \\\"$67\\\", \\\"$76\\\", \\\"$78\\\", \\\"$72\\\", \\\"$19\\\"], \\\"$288\\\"), 5)\\nTest.assertEquals(maxItems([\\\"$47\\\", \\\"$55\\\", \\\"$27\\\", \\\"$73\\\", \\\"$72\\\"], \\\"$461\\\"), 5)\",\"language\":\"javascript\",\"summary\":\"On a vacation abroad, you see a souvenir shop and decide to head inside. There are snow globes, postcards, fridge magnets and all the other goodies you'd typically find.\\n\\nGiven an array of prices of things in the store and the amount of money you have, return the maximum number of items you could possibly buy.\\n\\nExamples\\nmaxItems([\\\"$1\\\", \\\"$1\\\", \\\"$2\\\"], \\\"$3\\\") ➞ 2\\n\\n\",\"tags\":[\"loops\",\"arrays\",\"algorithms\"],\"timestamp\":{\"$date\":1590029727795},\"title\":\"Souvenir Shop\",\"stats\":{\"completed\":{\"total\":43,\"ratings\":[2,2,2,2,2,1,2,2,2,2,4,2,2,3,2,3,2,3,3,3,3,3,2,1,2,3,2,3,1,3,2,3,2,4,3,2,3,2,3],\"rators\":[\"yjtdwc2AC4jA2RWtn\",\"pd8dm7sWLW9cY6dYW\",\"tAF9Gf6PiGogbZuWs\",\"CJBPyyfyaEeEo63sb\",\"BSkoT6o2GweZkqXbc\",\"9Pzg45NEiRXhLtLh3\",\"AasGs8AeX9Lcb9xJn\",\"sBcsrC5paZm9nxjot\",\"2ZFoLTxcCARhwc8xX\",\"Es4eX2stRpyoXeC7f\",\"RE4Mm9T6Q9uygAxGS\",\"QRv96jmNaYsWkxQEG\",\"PytNZK9mNiRiZxPrm\",\"FJsvM5yqKuK9yMk9P\",\"a777e8chPvJkY3tKa\",\"8raviPK67KKxzQWcF\",\"p5ZshR8zhTqmdhKDc\",\"XFykQA7JuQW4eQeMY\",\"n5wubRfh6zh8QRymN\",\"mHT2bJb5SByfJ8yKS\",\"mSn9AcLsuEYzLbfai\",\"65dbBZynphj53nXqA\",\"buX4mCQhtXCfBjeno\",\"aEm3Wvj2rFYRL8Lrb\",\"4Xv87xmdSnpYhi8hz\",\"MT26yxj3YX95DsyLj\",\"pGh7WykiPe26fHJYv\",\"kp2ZbCewZJAbfd7xv\",\"c7uBxu2rgY77H5d79\",\"yrPqtJt7KRfGhN4k6\",\"CNc6rmwhbxkxEhHAp\",\"JuGJgYuj4eHc5xdaz\",\"qWR7eXxBiNee22A5u\",\"JsRTAwWK7Nikj4sKA\",\"M4vq8ATaS9Jg5X7iP\",\"wJTDDTE3TrmSXKP4d\",\"8BJyXvRWcrvN3nttS\",\"RDesnxbcnyHKT6AW8\",\"STipuJs6kBvPqqsSE\",\"oDtGiNqDMHmhHE3J8\",\"gSrqu8MsZMFSxxWAZ\",\"TtrXnGzi9MyhLvWiz\"],\"quality\":[5,2,5,5,4,3,5,4]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"quality\":4.125,\"family\":[{\"_id\":\"HWEDMyddfkihb3PqZ\",\"language\":\"cpp\"},{\"_id\":\"KTrcDJkkW9inXesDy\",\"language\":\"javascript\"},{\"_id\":\"yCGJEcij4LaXLcKXE\",\"language\":\"python3\"},{\"_id\":\"2HwPe8umRksX8t4jx\",\"language\":\"ruby\"}]}}"]