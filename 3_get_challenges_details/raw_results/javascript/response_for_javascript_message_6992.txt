a["{\"msg\":\"result\",\"id\":\"2238\",\"result\":{\"_id\":\"pbeqf95r3H4PRQKJr\",\"author\":\"er0s\",\"authorId\":\"5Zq3aGdvh4LHBvnJL\",\"code\":\"/*\\nCHARACTERS SET\\n○    ➞ blank\\n●    ➞ ship\\n☼    ➞ miss\\n☀   ➞ hit\\n*/\\n\\nclass Battleship {\\n\\tconstructor(scheme, input) {}\\n\\tboard() {}\\n\\thits() {}\\n\\tsunk() {}\\n\\tpoints() {}\\n}\",\"difficulty\":3.467741935483871,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"HbrXJjcPkCvLurujS\",\"instructions\":\"In this challenge, you have to build a `Class` that will store and manipulate the data of a simplified clone of **Battleship**, the popular strategy game.\\n\\nThe game is played on a square board, **5x5** sized. The rows of the grid are identified by uppercase letters from **A to E** (from top to bottom), and the columns are identified by numbers from **1 to 5** (from left to right).\\n\\n### Rules of the Game\\n- There are two types of ship: the **Patrol** and the **Cruiser**. The Patrol occupies a single cell, the Cruiser occupies two cells, horizontally or vertically.\\n- Three Patrols and three Cruisers will be placed randomly in the grid, **without ships adjacent in rows and columns** (see the notes below).\\n- The user _calls_ six different cells, trying to guess if there's a Patrol or a Cruiser in it.\\n- Hits and misses are recorded on the board. For every hit Patrol or Cruiser, a point is gained, and if a Cruiser is sunk, two additional points are gained.\\n\\n### Class \\\"Battleship\\\"\\nEach instance in the **Tests** tab will be declared with two variable parameters so the constructor has to be initialized with:\\n- `scheme` is the link to an array containing **9** strings being the coordinates indicating where the ships are placed in the grid.\\n- `input` is the link to an array containing **6** strings being the guesses made by the user.\\n\\n### What do you have to implement?\\nThe **Tests** will verify the existence and the correctness of the data through an instance that will use the  `Battleship` Class created by you, calling its four different methods:\\n\\n- `board()` will return the final state of the board, based on the placement of the ship and the results of the user guesses, as a matrix of 5x5 size. To represent the graphic of the game, you will use four different characters:\\n\\n  - ○  =  a blank space on the board.\\n  - ●  =  a space occupied by a ship.\\n  - ☼  =  a miss (wrong guess).\\n  - ☀  =  a hit (a correct guess).\\n\\n- `hits()`  will return the **total number of hits** made by the user (correct guesses), either on Patrols or on Cruisers.\\n- `sunk()` will return the **total number of sunk** Cruisers (two adjacent guesses, in horizontal or vertical).\\n- `points()` will return the **total number of points** gained by the user (1 for every hit, 2 for every sunk Cruiser).\\n\\n### Examples\\n```\\n// scheme =\\n[\\\"A1\\\", \\\"C1\\\", \\\"B2\\\",\\n\\\"B3\\\", \\\"D2\\\", \\\"E2\\\",\\n\\\"E4\\\", \\\"E5\\\", \\\"A5\\\"]\\n\\n// input = [\\\"A1\\\", \\\"B2\\\", \\\"C3\\\", \\\"D4\\\", \\\"E5\\\", \\\"E4\\\"]\\n\\nbattleship.board() ➞ [\\n  [☀, ○, ○, ○, ●],\\n  [○, ☀, ●, ○, ○],\\n  [●, ○, ☼, ○, ○],\\n  [○, ●, ○, ☼, ○],\\n  [○, ●, ○, ☀, ☀]\\n]\\n\\nbattleship.hits() ➞ 4\\n// Total hits.\\n\\nbattleship.sunk() ➞ 1\\n// Sunk Cruisers, not Patrols.\\n\\nbattleship.points() ➞ 6\\n// Hits + additional points given by Sunk Cruisers.\\n```\\n### Notes\\n- If two cruisers are in the same row or the same column, there will be a blank cell between them, so that it will be possible to treat them as different ships.\\n- The board **is not** given, you have to build it.\\n- In the **Examples** above, the symbols of the board are not between quotation marks for readability, but they are strings. The set of characters used for the challenge is already in the **Code** tab.\",\"isHidden\":false,\"lab\":\"const scheme1 = [\\\"A1\\\", \\\"C1\\\", \\\"B2\\\", \\\"B3\\\", \\\"D2\\\", \\\"E2\\\", \\\"E4\\\", \\\"E5\\\", \\\"A5\\\"],\\n\\t\\t\\tscheme2 = [\\\"A1\\\", \\\"B1\\\", \\\"D1\\\", \\\"E1\\\", \\\"A3\\\", \\\"A4\\\", \\\"D3\\\", \\\"E4\\\", \\\"D5\\\"],\\n\\t\\t\\tscheme3 = [\\\"A2\\\", \\\"A4\\\", \\\"C1\\\", \\\"C2\\\", \\\"E3\\\", \\\"C4\\\", \\\"C5\\\", \\\"D3\\\", \\\"E5\\\"],\\n\\t\\t\\tinput1 = [\\\"A1\\\", \\\"B2\\\", \\\"C3\\\", \\\"D4\\\", \\\"E5\\\", \\\"E4\\\"],\\n\\t\\t\\tinput2 = [\\\"A2\\\", \\\"B4\\\", \\\"C1\\\", \\\"D3\\\", \\\"E5\\\", \\\"A5\\\"],\\n\\t\\t\\tinput3 = [\\\"A1\\\", \\\"B1\\\", \\\"D1\\\", \\\"E1\\\", \\\"A3\\\", \\\"A4\\\"];\\n\\nlet battleship1 = new Battleship(scheme1, input1);\\nTest.assertSimilar(battleship1.board(), [\\n  [ '☀', '○', '○', '○', '●' ],\\n  [ '○', '☀', '●', '○', '○' ],\\n  [ '●', '○', '☼', '○', '○' ],\\n  [ '○', '●', '○', '☼', '○' ],\\n  [ '○', '●', '○', '☀', '☀' ]\\n], \\\"Instructions/Example\\\");\\nTest.assertEquals(battleship1.hits(), 4, \\\"Instructions/Example\\\");\\nTest.assertEquals(battleship1.sunk(), 1, \\\"Instructions/Example\\\");\\nTest.assertEquals(battleship1.points(), 6, \\\"Instructions/Example\\\");\\n\\nlet battleship2 = new Battleship(scheme1, input2);\\nTest.assertSimilar(battleship2.board(), [\\n  [ '●', '☼', '○', '○', '☀' ],\\n  [ '○', '●', '●', '☼', '○' ],\\n  [ '☀', '○', '○', '○', '○' ],\\n  [ '○', '●', '☼', '○', '○' ],\\n  [ '○', '●', '○', '●', '☀' ]\\n]);\\nTest.assertEquals(battleship2.hits(), 3);\\nTest.assertEquals(battleship2.sunk(), 0);\\nTest.assertEquals(battleship2.points(), 3);\\n\\nlet battleship3 = new Battleship(scheme2, input3)\\nTest.assertSimilar(battleship3.board(), [\\n  [ '☀', '○', '☀', '☀', '○' ],\\n  [ '☀', '○', '○', '○', '○' ],\\n  [ '○', '○', '○', '○', '○' ],\\n  [ '☀', '○', '●', '○', '●' ],\\n  [ '☀', '○', '○', '●', '○' ]\\n])\\n\\nTest.assertEquals(battleship3.hits(), 6);\\nTest.assertEquals(battleship3.sunk(), 3);\\nTest.assertEquals(battleship3.points(), 12);\\n\\nlet battleship4 = new Battleship(scheme2, input2)\\nTest.assertSimilar(battleship4.board(), [\\n  [ '●', '☼', '●', '●', '☼' ],\\n  [ '●', '○', '○', '☼', '○' ],\\n  [ '☼', '○', '○', '○', '○' ],\\n  [ '●', '○', '☀', '○', '●' ],\\n  [ '●', '○', '○', '●', '☼' ]\\n])\\n\\nTest.assertEquals(battleship4.hits(), 1)\\nTest.assertEquals(battleship4.sunk(), 0)\\nTest.assertEquals(battleship4.points(), 1)\\n\\nlet battleship5 = new Battleship(scheme3, input1)\\nTest.assertSimilar(battleship5.board(), [\\n  [ '☼', '●', '○', '●', '○' ],\\n  [ '○', '☼', '○', '○', '○' ],\\n  [ '●', '●', '☼', '●', '●' ],\\n  [ '○', '○', '●', '☼', '○' ],\\n  [ '○', '○', '●', '☼', '☀' ]\\n])\\n\\nTest.assertEquals(battleship5.hits(), 1)\\nTest.assertEquals(battleship5.sunk(), 0)\\nTest.assertEquals(battleship5.points(), 1)\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,3,2,3,5,1,3,3,3,3,3,5,3,5,2,2,4,3,3,3,2,4,5,3,2,2,3,3,5,0,2,5,5,4,5,5,3,5,2,2,5,3,4,4,5,3,5,5,5,5,5,5,4,4,3,5,3,1],\"rators\":[\"5Zq3aGdvh4LHBvnJL\",\"yjtdwc2AC4jA2RWtn\",\"65dbBZynphj53nXqA\",\"3xTP5LHEMpQWB4knW\",\"5HRPnrWvfDLAiEGFc\",\"n5wubRfh6zh8QRymN\",\"CDnYmNKzQaSJMP5by\",\"D7t9e8p792Q9eJ9MK\",\"bSp24G84Wxd5ovDsQ\",\"LCRnmcetnCx3Wp7GN\",\"Trz6y5gZ8Xzi7hp7r\",\"TXtg7ws3R6hh97Csb\",\"cRpaCxYRmGcN3Nsoj\",\"SyisfY2tK8JbXPygG\",\"XBMHSddG7DFTZ4GZy\",\"TnghjFnjE3inKnWNK\",\"SKvbMMB5LnJJppXgh\",\"B762NDPTL7PZvmnNh\",\"hNetWrA6zvytax4hM\",\"Pt4jHPSLkrmYjvvkb\",\"G7gHu7qEx8TBZWkvH\",\"kjYaZ3arxCEq6crj4\",\"7nohK2B7yHzG3k9t4\",\"vEPnf5YGyuoXiy3kP\",\"BuwbgJHBLHovKRXSH\",\"frx4Kkg7MayMPupHR\",\"bZzMqB9qNNJ9AdpGp\",\"BBP9BE5mKHRzaRpJr\",\"5jyDQyBKhMhkNGCWQ\",\"mjvutuM9aEkfyp2cK\",\"aYuKFKSE7oKvBGHKr\",\"5NGxHLcQ8Af2RJ4TN\",\"Gss69WunuxyyoKp6Q\",\"knxCMCGP3rAkiatRo\",\"sutzxu4yTueBKE9Qp\",\"7RFLoRMcYhRzjoN7s\",\"dPM2Rk2iMkznyXNEt\",\"eTzbu6t7YpD3mK3PY\",\"FJsvM5yqKuK9yMk9P\",\"FJz752tBZgKEFv5dp\",\"GCsLzWAhLvniQqR3J\",\"ToiiR2nHcTwLyZi5P\",\"Z9MJFFkQRXWwJJafu\",\"Gosr8fhiPxmj6nr27\",\"8SYDBRtkZuW3pdPtG\",\"FQDwscZZbqMZNcazT\",\"JGBCMpnbbi5ztuFoX\",\"mHT2bJb5SByfJ8yKS\",\"a777e8chPvJkY3tKa\",\"sNcDN3s3rH9wcNg5n\",\"aEm3Wvj2rFYRL8Lrb\",\"kp2ZbCewZJAbfd7xv\",\"va3fDAQm4sqSMoy3R\",\"T3PKMQddZBd4AJ3p4\",\"eKSJgCaiy4ReJWXTg\",\"y75CxdSxD7TxwjBvc\",\"PH32cNxBjrK4a28sn\",\"eMuCpJ2spXWkJjWNz\",\"jemTNShfp6ymAs3pj\",\"MdzdERMRtXEvQywsn\",\"J5MgLszeGgtciW56n\"],\"total\":68,\"quality\":[5,5,5,2,5]},\"flags\":0},\"summary\":\"In this challenge, you have to build a Class that will store and manipulate the data of a simplified clone of Battleship, the popular strategy game.\\n\\nThe game is played on a square board, 5x5 sized. The rows of the grid are identified by uppercase letters from A to E (from top to bottom), and the columns are identified by numbers from 1 to 5 (from left to righ\",\"tags\":[\"classes\",\"arrays\",\"data_structures\",\"games\"],\"timestamp\":{\"$date\":1573857994285},\"title\":\"Do Classes Dream of Electric Ship?\",\"quality\":4.4,\"family\":[{\"_id\":\"Y6hNbTncED6dp6gFu\",\"language\":\"java\"},{\"_id\":\"pbeqf95r3H4PRQKJr\",\"language\":\"javascript\"},{\"_id\":\"pN7iSYmghjdnHiMvT\",\"language\":\"python3\"}]}}"]