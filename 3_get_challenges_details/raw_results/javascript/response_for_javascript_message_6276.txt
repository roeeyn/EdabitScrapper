a["{\"msg\":\"result\",\"id\":\"1883\",\"result\":{\"_id\":\"4BKEcK9Y4WW6o64Mt\",\"author\":\"er0s\",\"authorId\":\"5Zq3aGdvh4LHBvnJL\",\"code\":\"function pyramidalString(string, type) {\\n\\t\\n}\",\"difficulty\":2.688888888888889,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"qSuJtBivYar8SXNx4\",\"instructions\":\"In this challenge, you have to obtain a pyramidal version of a given string, transforming the string into an array containing a series of string slices that progressively increase or decrease **steadily** from the left to the right. Every slice containing two or more characters must have **a space between every pair of characters**, to permit a hypothetical vertical alignment. See the example below:\\n\\n```\\n// REGULAR pyramidal version of \\\"EDABIT\\\"\\n\\n[ \\\"E\\\",\\n \\\"D A\\\",\\n\\\"B I T\\\" ]\\n```\\n\\nDepending on the given `type`, you have to obtain a **regular** pyramid starting from its vertex (`type === \\\"REG\\\"`) as in the example above, or a **reversed** pyramid  starting from its base (`type === \\\"REV\\\"`) as in the example below:\\n\\n```\\n// REVERSED pyramidal version of \\\"EDABIT\\\"\\n\\n[\\\"E D A\\\",\\n  \\\"B I\\\",\\n   \\\"T\\\"  ]\\n```\\n\\nEvery pyramid must follow the same steadily increment/decrement of its slices (or rows) by exactly one character (excluding spaces), so that not every string can be transformed in a pyramid! See the example below:\\n\\n```\\n// Regular pyramidal version of \\\"PYRAMID\\\"\\n\\n[ \\\"P\\\",\\n \\\"Y R\\\",\\n\\\"A M I\\\" ]\\n\\n// Letter \\\"D\\\" can't be placed in the pyramid\\n```\\n\\nGiven as parameters a `string` and a `type`, implement a function that returns:\\n- A string `\\\"Error!\\\"` if the pyramidal version can't be obtained from the given `string`.\\n- An array containing the regular pyramidal version of the `string` if the given `type` is equal to `\\\"REG\\\"`.\\n- An array containing the reversed pyramidal version of the `string` if the given `type` is equal to `\\\"REV\\\"`.\\n\\n### Examples\\n```\\npyramidalString(\\\"EDABIT\\\", \\\"REG\\\") ➞ [\\\"E\\\", \\\"D A\\\", \\\"B I T\\\"]\\n\\npyramidalString(\\\"EDABIT\\\", \\\"REV\\\") ➞ [\\\"E D A\\\", \\\"B I\\\", \\\"T\\\"]\\n\\npyramidalString(\\\"PYRAMID\\\", \\\"REG\\\") ➞ \\\"Error!\\\"\\n\\npyramidalString(\\\"!\\\", \\\"REV\\\") ➞ [\\\"!\\\"]\\n\\npyramidalString(\\\"\\\", \\\"REG\\\") ➞ []\\n```\\n\\n### Notes\\n- If the given `string` has just one character, the returned array will contain that single character. If the given `string` is empty, the returned array will be empty. \\n- Remember to insert a space between every character inside the rows containing two or more characters.\\n- The increment and the decrement of the rows in a pyramidal string are equal to one character more or less than the previous, depending on the given `type`.\\n- You have to find a discriminant rule to establish if a string can be transformed into a pyramid, without creating single exceptions for every given case. What is suggesting to you the shape of a pyramid seen frontally?\",\"isHidden\":false,\"lab\":\"// Regular pyramids\\nTest.assertSimilar(pyramidalString(\\\"\\\", \\\"REG\\\"), [])\\nTest.assertSimilar(pyramidalString(\\\"ZAPHODBEEBLEBROX\\\", \\\"REG\\\"), \\\"Error!\\\")\\nTest.assertSimilar(pyramidalString(\\\"THEHITCHIKERGUIDETOTHEGALAXY\\\", \\\"REG\\\"), [\\\"T\\\", \\\"H E\\\", \\\"H I T\\\", \\\"C H I K\\\", \\\"E R G U I\\\", \\\"D E T O T H\\\", \\\"E G A L A X Y\\\"])\\nTest.assertSimilar(pyramidalString(\\\"HOTBLACKDESIATO\\\", \\\"REG\\\"), [\\\"H\\\", \\\"O T\\\", \\\"B L A\\\", \\\"C K D E\\\", \\\"S I A T O\\\"])\\nTest.assertSimilar(pyramidalString(\\\"TRILLIAN\\\", \\\"REG\\\"), \\\"Error!\\\")\\nTest.assertSimilar(pyramidalString(\\\"APERFECTLYNORMALBEAST\\\", \\\"REG\\\"), [\\\"A\\\", \\\"P E\\\", \\\"R F E\\\", \\\"C T L Y\\\", \\\"N O R M A\\\", \\\"L B E A S T\\\"])\\nTest.assertSimilar(pyramidalString(\\\"RESTAURANTATTHEENDOFTHEUNIVERSE\\\", \\\"REG\\\"), \\\"Error!\\\")\\n\\n// Reversed pyramids\\nTest.assertSimilar(pyramidalString(\\\"?\\\", \\\"REV\\\"), [ \\\"?\\\" ])\\nTest.assertSimilar(pyramidalString(\\\"ARTHURDENT\\\", \\\"REV\\\"), [\\\"A R T H\\\", \\\"U R D\\\", \\\"E N\\\", \\\"T\\\"])\\nTest.assertSimilar(pyramidalString(\\\"DONTPANIC\\\", \\\"REV\\\"), \\\"Error!\\\")\\nTest.assertSimilar(pyramidalString(\\\"MARVIN\\\", \\\"REV\\\"), [\\\"M A R\\\", \\\"V I\\\", \\\"N\\\"])\\nTest.assertSimilar(pyramidalString(\\\"42\\\", \\\"REV\\\"), \\\"Error!\\\")\\nTest.assertSimilar(pyramidalString(\\\"LIFETHEUNIVERSEANDEVERYTHING\\\", \\\"REV\\\"), [\\\"L I F E T H E\\\", \\\"U N I V E R\\\", \\\"S E A N D\\\", \\\"E V E R\\\", \\\"Y T H\\\", \\\"I N\\\", \\\"G\\\"])\\nTest.assertSimilar(pyramidalString(\\\"FORDPREFECT\\\", \\\"REV\\\"), \\\"Error!\\\")\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,3,0,3,4,1,3,2,3,3,3,3,4,2,4,3,2,3,4,3,3,5,4,3,4,2,0,3,4,2,2,4,3,2,3,3,0,3,3,3],\"rators\":[\"5Zq3aGdvh4LHBvnJL\",\"AasGs8AeX9Lcb9xJn\",\"DHwbkbzYNpmkSFT7u\",\"65dbBZynphj53nXqA\",\"yjtdwc2AC4jA2RWtn\",\"XKi8iZXBCHCaebSHh\",\"uKv6ghxAFuZ5Rb3tD\",\"n5wubRfh6zh8QRymN\",\"2innwjWqxJHo4eRGh\",\"EWn8w8P3nNh7knatY\",\"8diKsSyZ7XCNaecap\",\"vtHbevf2tHqe6mRxX\",\"dPM2Rk2iMkznyXNEt\",\"iapvMBwWivxXaybye\",\"7FquzeWAzF4aj6v44\",\"cRpaCxYRmGcN3Nsoj\",\"gAQqKcWvJB2GD84zR\",\"q85PNa8zG7ZTRgFvX\",\"eFjGhq7C7bBKXjT6X\",\"SxqAEMaYcE9Ps9eh6\",\"978CFDwQoiXR6xcq5\",\"YER6iBcpJCuhgrYDN\",\"p2woPCQKXuWJCwffJ\",\"FJsvM5yqKuK9yMk9P\",\"Kc3SDafimwpZWrATJ\",\"h4jFmtbFn92eA4649\",\"mHT2bJb5SByfJ8yKS\",\"a777e8chPvJkY3tKa\",\"QMq9dcvgpyNK6RAze\",\"aEm3Wvj2rFYRL8Lrb\",\"nphNJCcuiQKh8bNHq\",\"bXaGdBM8FBLHf7N6Y\",\"buX4mCQhtXCfBjeno\",\"Es4eX2stRpyoXeC7f\",\"2Qk2mFu9HBFzrB24i\",\"M4vq8ATaS9Jg5X7iP\",\"YYPLnrQmxe6h8qk9T\",\"8BJyXvRWcrvN3nttS\",\"QvEXmSEo3ANp3yPyH\",\"xsDyJstYoBZRS8pJH\",\"DPi9QGLctq2y76KuE\",\"RE4Mm9T6Q9uygAxGS\"],\"total\":45,\"quality\":[5,5,5]},\"flags\":0},\"summary\":\"In this challenge, you have to obtain a pyramidal version of a given string, transforming the string into an array containing a series of string slices that progressively increase or decrease steadily from the left to the right. Every slice containing two or more characters must have a space between every pair of characters, to permit a hypothetical vertical a\",\"tags\":[\"formatting\",\"strings\",\"math\"],\"timestamp\":{\"$date\":1574163642499},\"title\":\"Pyramidal Strings\",\"quality\":5,\"family\":[{\"_id\":\"4BKEcK9Y4WW6o64Mt\",\"language\":\"javascript\"},{\"_id\":\"snZDZ8nxwGCJCka5M\",\"language\":\"python3\"},{\"_id\":\"7yWXe7cZw67snCcjC\",\"language\":\"ruby\"}]}}"]