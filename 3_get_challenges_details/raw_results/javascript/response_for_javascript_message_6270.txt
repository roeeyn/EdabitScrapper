a["{\"msg\":\"result\",\"id\":\"1881\",\"result\":{\"_id\":\"nm5jyuTK9KdgtYEjJ\",\"author\":\"zatoichi49\",\"authorId\":\"tAF9Gf6PiGogbZuWs\",\"code\":\"function validWordNest(word, nest) {\\n\\t\\n}\",\"difficulty\":2.6875,\"familyId\":\"EAbQqeZkgna25J7Cs\",\"instructions\":\"A word nest is created by taking a starting word, and generating a new string by placing the word inside itself. This process is then repeated.\\n\\nNesting 3 times with the word \\\"incredible\\\":\\n\\n```\\nstart  = incredible\\nfirst  = incre(incredible)dible\\nsecond = increin(incredible)credibledible\\nthird  = increinincr(incredible)ediblecredibledible\\n```\\n\\nThe final nest is `increinincrincredibleediblecredibledible` (depth = 3)\\n\\nValid word nests can always be *collapsed* to show the starting word, by reversing the process above:\\n\\n```\\nword = \\\"incredible\\\"\\nnest = \\\"increinincrincredibleediblecredibledible\\\"\\n\\nSteps:\\n=> \\\"increinincrincredibleediblecredibledible\\\"   # starting nest\\n=> \\\"increinincr(incredible)ediblecredibledible\\\" # find word in nest\\n=> \\\"increinincr            ediblecredibledible\\\" # remove word\\n=> \\\"increinincrediblecredibledible\\\"             # join remaining halves\\n=> \\\"increin(incredible)credibledible\\\"           # find word in nest...\\n\\n... repeat steps until single word remains\\n\\n=> \\\"incredible\\\" (return true as \\\"incredible\\\" = word)\\n```\\n\\nWhen *in*valid word nests are collapsed, the starting word isn't found:\\n\\n```\\nword = \\\"spring\\\"\\nnest = \\\"sprspspspringringringg\\\"\\n\\nSteps:\\n=> \\\"sprspspspringringringg\\\"   # starting nest\\n=> \\\"sprspsp(spring)ringringg\\\" # find word in nest\\n=> \\\"sprspsp        ringringg\\\" # remove word\\n=> \\\"sprspspringringg\\\"         # join remaining halves\\n=> \\\"sprsp(spring)ringg\\\"       # find word in nest...\\n\\n... repeat steps until single word remains\\n\\n=> \\\"sprg\\\" (return false as \\\"sprig\\\" != \\\"spring\\\")\\n```\\n\\nGiven a *starting word* and a *final word nest*, return `true` if the word nest is valid. Return `false` otherwise.\\n\\n### Examples\\n```\\nvalidWordNest(\\\"deep\\\", \\\"deep\\\") ➞ true\\n\\nvalidWordNest(\\\"novel\\\", \\\"nonnonovnovnovelelelvelovelvel\\\") ➞ true\\n\\nvalidWordNest(\\\"painter\\\", \\\"ppaintppapaipainterinternteraintererainter\\\") ➞ false\\n// Doesn't show starting word after being collapsed.\\n\\nvalidWordNest(\\\"shape\\\", \\\"sssshapeshapehahapehpeape\\\") ➞ false\\n// Word placed outside, not inside itself.\\n```\\n\\n### Notes\\nValid word nests can only be created by repeatedly placing the word inside *itself*, so at any point when collapsing the nest, there should only be *one* instance of the word to be found.\",\"lab\":\"Test.assertEquals(validWordNest(\\\"redeem\\\", \\\"rederedredrredredrerrrederedeememedeemedeemedeeemeemmedeemeemeemem\\\"), false)\\nTest.assertEquals(validWordNest(\\\"survey\\\", \\\"sursursurvsurvssurssursusurveyrveyveyurveyveyurveyeyeyveyvey\\\"), true)\\nTest.assertEquals(validWordNest(\\\"sensation\\\", \\\"sensatissenssensastssenensensasenssensensensationsationsationationtionsationatioionantionensationon\\\"), false)\\nTest.assertEquals(validWordNest(\\\"feed\\\", \\\"feefeeded\\\"), false)\\nTest.assertEquals(validWordNest(\\\"station\\\", \\\"ststatstasstatistationontationtionionation\\\"), true)\\nTest.assertEquals(validWordNest(\\\"quarrel\\\", \\\"quaquarrquarrelrerell\\\"), false)\\nTest.assertEquals(validWordNest(\\\"broadcast\\\", \\\"broadcbroadcastbroadcastast\\\"), false)\\nTest.assertEquals(validWordNest(\\\"current\\\", \\\"currccurrcurcurrcucucurrentrrentrrententrententurrentent\\\"), true)\\nTest.assertEquals(validWordNest(\\\"diet\\\", \\\"diet\\\"), true)\\nTest.assertEquals(validWordNest(\\\"park\\\", \\\"pppappappapapapapparkarkarkrkrkrkrkkarkrkrarkark\\\"), false)\\nTest.assertEquals(validWordNest(\\\"undermine\\\", \\\"undermiundermundermiunununderundermineminederminedermineneinene\\\"), true)\\nTest.assertEquals(validWordNest(\\\"nail\\\", \\\"nannnailnailailil\\\"), false)\\nTest.assertEquals(validWordNest(\\\"show\\\", \\\"sshssshowhowhowowhow\\\"), true)\\nTest.assertEquals(validWordNest(\\\"demand\\\", \\\"dedemdeamademademandndndmandnd\\\"), false)\\nTest.assertEquals(validWordNest(\\\"publicity\\\", \\\"publicppublicityublicityity\\\"), true)\\nTest.assertEquals(validWordNest(\\\"relief\\\", \\\"rrerelirerreerrereliefliefelielifliefliefefliefelfeief\\\"), false)\\nTest.assertEquals(validWordNest(\\\"pipe\\\", \\\"ppppppipeipeipeipeipeipe\\\"), true)\\nTest.assertEquals(validWordNest(\\\"diagram\\\", \\\"diargdiadidiadiagramgramagramgramam\\\"), false)\\nTest.assertEquals(validWordNest(\\\"salt\\\", \\\"ssaltalt\\\"), true)\\nTest.assertEquals(validWordNest(\\\"pioneer\\\", \\\"pionpippipioppionpiopipioneeroneerneereerioneerneeroneerioneeroneereer\\\"), true)\",\"language\":\"javascript\",\"summary\":\"A word nest is created by taking a starting word, and generating a new string by placing the word inside itself. This process is then repeated.\\n\\nNesting 3 times with the word \\\"incredible\\\":\\n\\nstart  = incredible\\nfirst  = incre(incredible)dible\\nsecond = increin(incredible)credibledible\\nthird  = increinincr(incredible)ediblecredibledible\\n\\nThe final nest is increin\",\"tags\":[\"conditions\",\"strings\",\"language_fundamentals\",\"regex\"],\"timestamp\":{\"$date\":1563223722160},\"title\":\"Word Nests (Part 2)\",\"stats\":{\"completed\":{\"total\":55,\"ratings\":[3,3,3,3,3,2,3,2,2,3,4,3,1,2,2,2,4,2,1,3,4,1,4,3,2,3,3,3,2,3,4,0,2,3,3,3,3,2,4,4,0,3,3,3,2,4,4,3],\"rators\":[\"65dbBZynphj53nXqA\",\"n5wubRfh6zh8QRymN\",\"yjtdwc2AC4jA2RWtn\",\"SDtZFL5NzAoCPofXk\",\"eQdnBfe8riy82SNrK\",\"FJsvM5yqKuK9yMk9P\",\"AasGs8AeX9Lcb9xJn\",\"cRpaCxYRmGcN3Nsoj\",\"yQtGE2egvwYnNQSFc\",\"2innwjWqxJHo4eRGh\",\"dPM2Rk2iMkznyXNEt\",\"q85PNa8zG7ZTRgFvX\",\"SxqAEMaYcE9Ps9eh6\",\"apyi6oXgmDnnq7qw9\",\"vewKwcMeGuk3p3MsN\",\"YER6iBcpJCuhgrYDN\",\"FqpshF963WY3G8G7F\",\"Lur4ggqDWjGMzb3bH\",\"5GmszQFtfcQzTL5kz\",\"naXz5TWLrucWALufZ\",\"u37upKZSmCKTQvQqX\",\"ZXRMRAJNP6eseLdbR\",\"tAF9Gf6PiGogbZuWs\",\"5TaDhLHuqYCxyy96r\",\"eFjGhq7C7bBKXjT6X\",\"a777e8chPvJkY3tKa\",\"h4jFmtbFn92eA4649\",\"aEm3Wvj2rFYRL8Lrb\",\"BuGWvGZGiJELoMy5G\",\"mHT2bJb5SByfJ8yKS\",\"rC7kdm3SsSX9udEQk\",\"CJBPyyfyaEeEo63sb\",\"M4vq8ATaS9Jg5X7iP\",\"kp2ZbCewZJAbfd7xv\",\"4Xv87xmdSnpYhi8hz\",\"Ac6u9uxPiFD5D8tfr\",\"8BJyXvRWcrvN3nttS\",\"v9KtC8YLbMWmXiW2H\",\"Akq3fQcPRgPrWfsye\",\"mDWNyaaQ9hvPCRzSd\",\"CNc6rmwhbxkxEhHAp\",\"QRv96jmNaYsWkxQEG\",\"s678Wirfor5uYL5T6\",\"sLWHghjrTMkm3gW6y\",\"Xk2g4CNFAnYcvxiSr\",\"DPi9QGLctq2y76KuE\",\"RE4Mm9T6Q9uygAxGS\"],\"quality\":[5,1,4,3]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":3.25,\"family\":[{\"_id\":\"MJRsKyhL9MTNCmrXi\",\"language\":\"cpp\"},{\"_id\":\"qRRYmmyTRBhJJNMwq\",\"language\":\"java\"},{\"_id\":\"nm5jyuTK9KdgtYEjJ\",\"language\":\"javascript\"},{\"_id\":\"ZwmfET5azpvBTWoQT\",\"language\":\"python3\"},{\"_id\":\"sM4LWbKsjCrdEfKRC\",\"language\":\"ruby\"}]}}"]