a["{\"msg\":\"result\",\"id\":\"2228\",\"result\":{\"_id\":\"5WEzjzSrJ9W7t6dLX\",\"author\":\"Mubashir Hassan \",\"authorId\":\"T6iBEE2jp7f7iEF2P\",\"code\":\"function nPr(n, r) {\\n\\t\\n}\\n\\nfunction nCr(n, r) {\\n\\t\\n}\",\"difficulty\":3.4444444444444446,\"familyId\":\"mZbADgn6exoBNSmx7\",\"instructions\":\"Write a function that efficiently calculates **nPr** (number of permutations of `r` items from a set of size `n`) and another function that efficiently calculates **nCr** (number of combinations of `r` items from a set of size `n`, regardless of order).\\n\\n- The formula for calculating nPr is `n!/(n-r)!` (`\\\"!\\\"` is the factorial operation).\\n- The formula for calculating nCr is `n!/(r!(n-r)!)`.\\n\\nYour functions should work efficiently for cases where `n!` or `r!` are very large compared to the result. Simply calculating the factorials and dividing will cause your program to time out. See if you can think of a more efficient method.\\n\\n### Examples\\n```\\n// Permutations\\n\\nnPr(7, 4) ➞ 840\\nnPr(300, 3) ➞ 26730600\\n\\n// Combinations\\n\\nnCr(7, 4) ➞ 35\\nnCr(300, 3) ➞ 4455100\\nnCr(300, 297) ➞ 4455100\\n```\\n\\n### Notes\\n- `n` and `r` will always be positive integers where `n` >= `r`.\\n- Think about what factors will cancel out when dividing the factorials.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assertEquals(nPr(7, 4), 840)\\nTest.assertEquals(nPr(8, 5), 6720)\\nTest.assertEquals(nPr(4, 3), 24)\\nTest.assertEquals(nPr(7, 7), 5040)\\nTest.assertEquals(nPr(7, 1), 7)\\nTest.assertEquals(nPr(300, 3), 26730600)\\nTest.assertEquals(nPr(1000000, 2), 999999000000)\\nTest.assertEquals(nPr(1000000000, 1), 1000000000)\\n\\nTest.assertEquals(nCr(7, 4), 35)\\nTest.assertEquals(nCr(8, 5), 56)\\nTest.assertEquals(nCr(4, 3), 4)\\nTest.assertEquals(nCr(7, 7), 1)\\nTest.assertEquals(nCr(7, 1), 7)\\nTest.assertEquals(nCr(300, 3), 4455100)\\nTest.assertEquals(nCr(300, 297), 4455100)\\nTest.assertEquals(nCr(1000000, 2), 499999500000)\\nTest.assertEquals(nCr(1000000, 999998), 499999500000)\\nTest.assertEquals(nCr(1000000000, 1), 1000000000)\\nTest.assertEquals(nCr(1000000000, 1000000000), 1)\",\"language\":\"javascript\",\"quality\":0,\"summary\":\"Write a function that efficiently calculates nPr (number of permutations of r items from a set of size n) and another function that efficiently calculates nCr (number of combinations of r items from a set of size n, regardless of order).\\n\\nThe formula for calculating nPr is n!/(n-r)! (\\\"!\\\" is the factorial operation).\\nThe formula for calculating nCr is n!/(r!(n-\",\"tags\":[\"numbers\",\"math\",\"algebra\"],\"timestamp\":{\"$date\":1610025620896},\"title\":\"nPr and nCr\",\"stats\":{\"completed\":{\"total\":6,\"ratings\":[4,4,4,4,4,5,1,2,3],\"quality\":[],\"rators\":[\"zza5WjC8QrHcoDZBF\",\"yjtdwc2AC4jA2RWtn\",\"J5MgLszeGgtciW56n\",\"P8bXFR4cHwFia9rNM\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"4nzN7RuhPKD5TZfwJ\",\"language\":\"cpp\"},{\"_id\":\"5WEzjzSrJ9W7t6dLX\",\"language\":\"javascript\"},{\"_id\":\"DottLgHxGke8fW8uK\",\"language\":\"python3\"},{\"_id\":\"EqE8iMyWK4vQXuJof\",\"language\":\"ruby\"}]}}"]