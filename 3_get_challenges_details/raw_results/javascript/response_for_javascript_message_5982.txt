a["{\"msg\":\"result\",\"id\":\"1738\",\"result\":{\"_id\":\"vDjaMK5n47NHHpMR2\",\"author\":\"David Newman\",\"authorId\":\"Po3v3dHCk6wYGKMwi\",\"code\":\"function fibonacci(n) {\\n\\tif (n === 1 || n === 0) {\\n\\t\\treturn 1\\n\\t} else {\\n\\t\\treturn fibonacci(n - 2) + fibonacci(n - 1)\\n\\t}\\n}\",\"difficulty\":2.3703703703703702,\"quality\":5,\"editorId\":\"Po3v3dHCk6wYGKMwi\",\"familyId\":\"Wzt5PQM3YnDGorYkN\",\"instructions\":\"One of the first algorithmic sequences you may encounter as a new programmer is the Fibonacci Sequence.\\n\\nAs a (very brief) refresher, the Fibonacci sequence starts with `0` and `1`, and subsequently, every *n*th number is the previous two numbers added together. So `0` and `1` is `1`, then `1` and `1` is `2`, then `1` and `2` is `3`, and so on.\\n\\nThe first seven numbers:\\n\\n```\\n1, 1, 2, 3, 5, 8, 13\\n```\\n\\n ### The Issue\\nThe normal, so-called *naive* way to calculate the Fibonacci sequence involves some bifurcating recursion. For each number, we need to calculate (recursively!) the *two* numbers before it.\\n\\nThat's great, but the number of recursive calls `fibonacci` has to make balloons pretty ridiculously; to calculate the 20th number would require running your Fibonacci sequence over *twenty thousand times*!\\n - Random facto: If we wrote a function that performed 1 calculation every millisecond, calculating `fibonacci(100)` would take about 7.9E17 seconds, which is *longer than the known age of the universe*!\\n\\n### The Solution\\nHere's a hint: we don't *need* to run the `fibonacci` function that many times. Using a clever programming technique called Dynamic Programming, we can reduce the number of calls to our `fibonacci` function drastically!\\n\\n### Your Job\\nThe current Fibonacci function works fine-ish for really small numbers below about 10. But for anything above about 15-20, it's pretty horrible to your poor little computer. And for numbers above about 40, Edabit's code runner may just give up!\\n\\nUsing Dynamic Programming, see if you can give that function an oil change, some new tires, and some racing stripes!\\n\\nRewrite the `fibonacci` function to calculate *all* of the given numbers (5, 25, 35, 40, 75) in *linear time* (that is, *less* than about 30 ms each)!\\n\\n### Notes\\n- Your function should run in `O(n)` time.\\n - Because Edabit places a 12 second maximum allowed time on code run through it, the current function will fail for larger numbers. This is to be expected.\\n  - Check the **Resources** tab if you're stuck.\\n  - This is my first challenge; feel free to suggest changes!\",\"isFree\":false,\"isHidden\":false,\"lab\":\"const nums = [{num:5,expected:5},{num:25,expected:75025},{num:35,expected:9227465},{num:40,expected:102334155},{num:75,expected:2111485077978050}],\\n    callFn = function (n) {\\n        n = n - 1; //fix n\\n        const start = Date.now(),\\n            result = fibonacci(n);\\n        return { result: result, time: Date.now() - start }\\n    }\\nlet testRez = null;\\n\\n\\nfor (candidate of nums){\\n    console.log(`-- Number: ${candidate.num} --`);\\n    testRez = callFn(candidate.num);\\n\\t\\tconsole.log(\\\"Correct answer?:\\\")\\n    Test.assertEquals(testRez.result, candidate.expected, `Incorrect answer for ${candidate.num}th fibonnaci number!`);\\n\\t\\tconsole.log(\\\"Within time limit (15ms)?:\\\")\\n    Test.assertEquals(testRez.time < 15, true, `Calculating ${candidate.num}th fibonnaci number took too long (${testRez.time} ms) !`);\\n\\t\\tconsole.log('---------')\\n}\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,3,1,3,3,2,1,3,2,2,2,3,2,1,1,1,3,3,4,1,3,2,3],\"quality\":[5],\"rators\":[\"Po3v3dHCk6wYGKMwi\",\"yjtdwc2AC4jA2RWtn\",\"aEm3Wvj2rFYRL8Lrb\",\"KrxMEsh93bmJ8rAZW\",\"n5wubRfh6zh8QRymN\",\"buX4mCQhtXCfBjeno\",\"tAF9Gf6PiGogbZuWs\",\"EBTrwJbNx8XkRnmNc\",\"sYJKcRHeWxTBoAdaL\",\"RKKuw76K7sRBMouKq\",\"cxKq6EFK4k4RmJoAt\",\"nr7jKeHEE3TC9oyp4\",\"T2zxG7BqZfjgmjrNs\",\"pAPR6ry4GSanF2aQC\",\"nphNJCcuiQKh8bNHq\",\"CNc6rmwhbxkxEhHAp\",\"e9Cknxbx6o7Nb6REs\",\"SYEuojZtP6yLXryHv\",\"QRv96jmNaYsWkxQEG\",\"8TTdgJThtKTy8Y9rv\",\"ZcJm2kuqJnN3CXFaR\",\"j5FSQCayX3By73CCw\",\"oDtGiNqDMHmhHE3J8\"],\"total\":24},\"flags\":0},\"summary\":\"One of the first algorithmic sequences you may encounter as a new programmer is the Fibonacci Sequence.\\n\\nAs a (very brief) refresher, the Fibonacci sequence starts with 0 and 1, and subsequently, every nth number is the previous two numbers added together. So 0 and 1 is 1, then 1 and 1 is 2, then 1 and 2 is 3, and so on.\\n\\nThe first seven numbers:\\n\\n1, 1, 2, 3,\",\"tags\":[\"algorithms\",\"recursion\",\"numbers\",\"language_fundamentals\"],\"timestamp\":{\"$date\":1600316788775},\"title\":\"Time Complexity: The Fibonacci Sequence\",\"family\":[{\"_id\":\"vDjaMK5n47NHHpMR2\",\"language\":\"javascript\"}]}}"]