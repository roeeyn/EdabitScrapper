a["{\"msg\":\"result\",\"id\":\"1904\",\"result\":{\"_id\":\"dydxdTCEpELGMRWeB\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"function isNew(n) {\\n\\t\\n}\",\"difficulty\":2.7096774193548385,\"familyId\":\"kPYtEn6nFXjjzg8A8\",\"instructions\":\"A new number is a number that is not a permutation of any smaller number.  869 is **not** a new number because it is just a permutation of smaller numbers, 689 and 698. 509 is a new number because it can't be formed by a permutation of any smaller number (leading zeros not allowed).\\n\\nWrite a function that takes a non-negative integer and returns `true` if the integer is a new number and `false` if it is not.\\n\\n### Examples\\n```\\nisNew(3) ➞ true\\n\\nisNew(30) ➞ true\\n\\nisNew(321) ➞ false\\n\\nisNew(123) ➞ true\\n```\\n\\n### Notes\\nA curious fact: out of the first one million integers, only 8002 are new.\",\"lab\":\"Test.assertEquals(isNew(0), true)\\nTest.assertEquals(isNew(90), true)\\nTest.assertEquals(isNew(601), false) \\nTest.assertEquals(isNew(123), true)\\nTest.assertEquals(isNew(321), false)\\nTest.assertEquals(isNew(40567), true)\\nTest.assertEquals(isNew(10783), false)\\nTest.assertEquals(isNew(4444), true)\\nTest.assertEquals(isNew(102), true)\\nTest.assertEquals(isNew(30004), true)\\nTest.assertEquals(isNew(40003), false)\\nTest.assertEquals(isNew(125609), false)\\nTest.assertEquals(isNew(23401), false)\",\"language\":\"javascript\",\"summary\":\"A new number is a number that is not a permutation of any smaller number.  869 is not a new number because it is just a permutation of smaller numbers, 689 and 698. 509 is a new number because it can't be formed by a permutation of any smaller number (leading zeros not allowed).\\n\\nWrite a function that takes a non-negative integer and returns true if the intege\",\"tags\":[\"numbers\",\"validation\",\"math\"],\"timestamp\":{\"$date\":1570034788329},\"title\":\"New Numbers\",\"stats\":{\"completed\":{\"total\":29,\"ratings\":[2,2,2,2,2,5,2,4,0,2,3,2,3,1,3,3,1,3,2,4,2,4,2,3,2,4,4,4,4,3,4],\"rators\":[\"5Zq3aGdvh4LHBvnJL\",\"yjtdwc2AC4jA2RWtn\",\"EWn8w8P3nNh7knatY\",\"zw7g7T8wE5R5CBhXr\",\"65dbBZynphj53nXqA\",\"EjPLq3QSJdGQFJdgW\",\"AasGs8AeX9Lcb9xJn\",\"2innwjWqxJHo4eRGh\",\"aEm3Wvj2rFYRL8Lrb\",\"RE4Mm9T6Q9uygAxGS\",\"PytNZK9mNiRiZxPrm\",\"CNc6rmwhbxkxEhHAp\",\"u9cRf5kvtpRB5ffB3\",\"M4vq8ATaS9Jg5X7iP\",\"8BJyXvRWcrvN3nttS\",\"HmReKfoJ3xXyXamSP\",\"s678Wirfor5uYL5T6\",\"9gEWz76H8KmhN4yJj\",\"2SrnihpstXNKcekq7\",\"nkH3HfJXLMNcBMM79\",\"z3BPGRYMaQygDtqTq\",\"649LDDhSKfmkPANRM\",\"5nhmyqLy8M2Yn2HMR\",\"tAF9Gf6PiGogbZuWs\",\"buX4mCQhtXCfBjeno\",\"oDtGiNqDMHmhHE3J8\"],\"quality\":[]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":0,\"family\":[{\"_id\":\"xFymdYS9bnmspEyYA\",\"language\":\"cpp\"},{\"_id\":\"JyskomdFw4tYgAELT\",\"language\":\"java\"},{\"_id\":\"dydxdTCEpELGMRWeB\",\"language\":\"javascript\"},{\"_id\":\"9WZcCNNCbaLvmHR3P\",\"language\":\"python3\"},{\"_id\":\"sS5mgMgyj7Fs9rRAC\",\"language\":\"ruby\"}]}}"]