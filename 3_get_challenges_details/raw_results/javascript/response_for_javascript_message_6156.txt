a["{\"msg\":\"result\",\"id\":\"1826\",\"result\":{\"_id\":\"o7WSAxLni29m6iKBQ\",\"author\":\"BijogFc24\",\"authorId\":\"Nb6LYPoQP6KJZt8mz\",\"code\":\"class Node {\\n  constructor(data) {\\n    this.data = data;\\n    this.right = null;\\n    this.left = null;\\n  }\\n}\\n\\nclass BST {\\n  constructor() {\\n    this.root = null;\\n  }\\n  insert(element) {\\n    const node = new Node(element);\\n    if (!this.root) {\\n      this.root = node;\\n    } else {\\n      this.insertNode(this.root, node);\\n    }\\n  }\\n  insertNode(node, newNode) {\\n    if (node.data > newNode.data) {\\n      if (!node.left) {\\n        node.left = newNode;\\n      } else {\\n        this.insertNode(node.left, newNode);\\n      }\\n    } else {\\n      if (!node.right) {\\n        node.right = newNode;\\n      } else {\\n        this.insertNode(node.right, newNode);\\n      }\\n    }\\n  }\\n  // Write your code here\\n\\ttraverse() {\\n    \\n  }\\n\\t// End\\n}\",\"difficulty\":2.64,\"familyId\":\"NPggnk94hHe8SGCvJ\",\"instructions\":\"Given a **Binary Search Tree** (BST) implementation, complete the traverse function which is present in the BST class. Here you have to perform the level-order traversal on BST which is another term for **Breadth First Traversal**.\\n\\n\\n### Examples\\n```\\ntraverse() ➞  [10, 4, 20, 1, 5]\\n\\n      10\\n      /   \\\\\\n    4    20\\n  /  \\\\\\n1    5\\n\\ntraverse() ➞ [100, 70, 200, 34, 80, 300]\\n\\n       100\\n       /    \\\\\\n    70    200\\n  /    \\\\          \\\\\\n34   80      300\\n```\\n\\n### Notes\\nMake sure you don't modify the code that is already in the **Code** tab. Only complete the `traverse()` function and return an array.\",\"isHidden\":false,\"lab\":\"// Author: Shreeansh\\n\\nconst b = new BST()\\nb.insert(100)\\nb.insert(200)\\nb.insert(70)\\nb.insert(34)\\nb.insert(80)\\nb.insert(85)\\nb.insert(85)\\nb.insert(111)\\nTest.assertSimilar(b.traverse(), [100, 70, 200, 34, 80, 111, 85, 85])\\n\\nconst b1 = new BST()\\nb1.insert(1)\\nTest.assertSimilar(b1.traverse(), [1])\\n\\nconst b2 = new BST()\\nb2.insert(100)\\nb2.insert(25)\\nb2.insert(22)\\nb2.insert(75)\\nb2.insert(122)\\nb2.insert(111)\\nb2.insert(112)\\nb2.insert(55)\\nTest.assertSimilar(b2.traverse(), [100, 25, 122, 22, 75, 111, 55, 112])\",\"language\":\"javascript\",\"summary\":\"Given a Binary Search Tree (BST) implementation, complete the traverse function which is present in the BST class. Here you have to perform the level-order traversal on BST which is another term for Breadth First Traversal.\\n\\nExamples\\ntraverse() ➞  [10, 4, 20, 1, 5]\\n\\n      10\\n      /   \\\\\\n    4    20\\n  /  \\\\\\n1    5\\n\\ntraverse() ➞ [100, 70, 200, 34, 80, 300]\",\"tags\":[\"loops\",\"logic\",\"data_structures\"],\"timestamp\":{\"$date\":1598841859057},\"title\":\"Level Order Traversal\",\"stats\":{\"completed\":{\"total\":24,\"ratings\":[3,3,3,3,3,0,3,2,3,3,0,3,3,2,3,2,3,4,4,5,2,5,2,0,2],\"rators\":[\"Nb6LYPoQP6KJZt8mz\",\"aEm3Wvj2rFYRL8Lrb\",\"yjtdwc2AC4jA2RWtn\",\"nphNJCcuiQKh8bNHq\",\"n5wubRfh6zh8QRymN\",\"h4jFmtbFn92eA4649\",\"65dbBZynphj53nXqA\",\"ZcJm2kuqJnN3CXFaR\",\"tmTAbizpJLnZDZ5JJ\",\"8s7EByT9ahbL6geNM\",\"rrgSzvujo36ziGKoa\",\"qvNk7pHSveLu3jqWw\",\"hf4j58METWajduNSE\",\"9xWK7QPDsJYKE4avo\",\"faYyw7jGsSeaMeYYd\",\"Po3v3dHCk6wYGKMwi\",\"BTdKRxKHXHDDD4934\",\"vGKxRcDYDsXzTQuEQ\",\"QRv96jmNaYsWkxQEG\",\"M4vq8ATaS9Jg5X7iP\",\"PH32cNxBjrK4a28sn\",\"gg58fBNLc8EsxHKbA\"],\"quality\":[5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"Nb6LYPoQP6KJZt8mz\",\"quality\":5,\"family\":[{\"_id\":\"o7WSAxLni29m6iKBQ\",\"language\":\"javascript\"},{\"_id\":\"rFK7WftrcrEu6rbu8\",\"language\":\"python3\"}]}}"]