a["{\"msg\":\"result\",\"id\":\"1693\",\"result\":{\"_id\":\"do9CKFbqmuTwR49c8\",\"author\":\"benmcl@shaw.ca\",\"authorId\":\"SYEuojZtP6yLXryHv\",\"code\":\"function property(path) {\\n\\t\\n}\",\"difficulty\":2.3333333333333335,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"5ZERXdD96n9Qh426w\",\"instructions\":\"Write your own version of the lodash `_.property` function using vanilla JavaScript.\\n\\nIt receives a string or an array representing a path in an object, it returns a function that receives an object. The new function will then return the value at the end of the path.\\n\\nFor instance when using the normal javascript map method you could map an array like so:\\n\\n```\\narrayOfCars.map(car => car.engine.sparkPlugs.replacementYear)\\nreturns [2020, 2021]\\n```\\n\\nBut if you were using property you could write it like this:\\n\\n```\\narrayOfCars.map(property('engine.sparkPlugs.replacementYear'))\\nalso returns [2020, 2021]\\n```\\n\\nThis is a helper function that is often used by other more advanced lodash functions. As we write more of our own lodash functions, we need to use this.\\n\\nFor instance, the \\\"takeWhile\\\" lodash function maps an array of objects and returns the ones that are a match. You can write it as `_.takeWhile(users, 'active')` and it will know that you wanting to use the \\\"property\\\" helper function because it received a string. It will then apply it to each value in the array and if 'active' is true it returns it. This is helpful when trying to write descriptive functions that describe what is happening at each step in your code.\\n\\n### Arguments\\n- **path** (Array or String): The path of the property to get.\\n- **returns:** A new function.\\n\\n### Examples\\n```\\nconst objects = [\\n  { \\\"a\\\": { \\\"b\\\": 2 } },\\n  { \\\"a\\\": { \\\"b\\\": 1 } }\\n]\\n\\nobjects.map(object, _.property(\\\"a.b\\\"));\\n// => [2, 1]\\n\\nobjects.map(object, _.property([\\\"a\\\", \\\"b\\\"]));\\n// => [2, 1]\\n```\\n\\n### Notes\\n- Please don't import lodash, your challenge is to write your own version.\\n- This entire series of challenges can be found [here](https://edabit.com/collection/vLR3aCkPwZKSobGCi).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"const _ = require(\\\"lodash\\\")\\n\\n// Please don't import lodash into your answer.\\n\\nconst cars = [\\n  {\\n    manufacturer: \\\"toyota\\\",\\n    engine: {\\n      sparkPlugs: {\\n        number: 4,\\n        replacementYear: 2022,\\n      },\\n      timingBelt: {\\n        make: \\\"powerDrive\\\",\\n        replacementYear: 2024,\\n        size: {\\n          inches: 30,\\n          milimeters: 762,\\n        },\\n      },\\n      isDomestic: false,\\n    },\\n  },\\n  {\\n    manufacturer: \\\"mazda\\\",\\n    engine: {\\n      sparkPlugs: {\\n        number: 4,\\n        replacementYear: 2020,\\n      },\\n      timingBelt: {\\n        make: \\\"goodYear\\\",\\n        replacementYear: 2021,\\n        size: {\\n          inches: 32,\\n          milimeters: 812.8,\\n        },\\n      },\\n      isDomestic: true,\\n    },\\n  },\\n]\\n\\nTest.assertSimilar(cars.map(_.property(\\\"engine.sparkPlugs.number\\\")), cars.map(property(\\\"engine.sparkPlugs.number\\\")))\\nTest.assertSimilar(\\n  cars.map(_.property([\\\"engine\\\", \\\"sparkPlugs\\\", \\\"number\\\"])),\\n  cars.map(property([\\\"engine\\\", \\\"sparkPlugs\\\", \\\"number\\\"]))\\n)\\nTest.assertSimilar(cars.find(_.property([\\\"engine\\\", \\\"isDomestic\\\"])), cars.find(property([\\\"engine\\\", \\\"isDomestic\\\"])))\\nTest.assertSimilar(cars.find(_.property(\\\"engine.isDomestic\\\")), cars.find(property(\\\"engine.isDomestic\\\")))\\nTest.assertSimilar(cars.map(_.property(\\\"manufacturer\\\")), cars.map(property(\\\"manufacturer\\\")))\",\"language\":\"javascript\",\"quality\":0,\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,1,4,2,2,3,4],\"quality\":[],\"rators\":[\"SYEuojZtP6yLXryHv\",\"yjtdwc2AC4jA2RWtn\",\"hEXangjLgGS4rymgC\",\"CNc6rmwhbxkxEhHAp\",\"M4vq8ATaS9Jg5X7iP\",\"65dbBZynphj53nXqA\",\"oDtGiNqDMHmhHE3J8\"],\"total\":7},\"flags\":0},\"summary\":\"Write your own version of the lodash _.property function using vanilla JavaScript.\\n\\nIt receives a string or an array representing a path in an object, it returns a function that receives an object. The new function will then return the value at the end of the path.\\n\\nFor instance when using the normal javascript map method you could map an array like so:\\n\\narray\",\"tags\":[\"objects\"],\"timestamp\":{\"$date\":1611593066290},\"title\":\"Learn Lodash: Write the \\\"Property\\\" Function - Return Value at the End String in an Object\",\"family\":[{\"_id\":\"do9CKFbqmuTwR49c8\",\"language\":\"javascript\"}]}}"]