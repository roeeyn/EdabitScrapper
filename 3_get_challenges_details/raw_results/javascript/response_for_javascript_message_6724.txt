a["{\"msg\":\"result\",\"id\":\"2105\",\"result\":{\"_id\":\"2GQ4MishQPNA8FPKr\",\"archived\":false,\"author\":\"0osh4d0wo0\",\"authorId\":\"XHngE5iScvztMpnR2\",\"code\":\"const regExp = /Your regex/;\\n\\nfunction dataRegexLovely(str) {\\n\\t\\n}\",\"difficulty\":2.9375,\"familyId\":\"p45PePzc3p5xZ3jem\",\"instructions\":\"You are to create a special regex that will detect if an HTML GET request is valid or not (with some gotchas). Strings are formated like so:\\n\\n```\\nname1=val1&name2=val2&name3=val3&name4=val4\\n```\\n\\nYou need to detect requests with the four names: _\\\"val\\\", \\\"id\\\", \\\"desc\\\", \\\"time\\\"_ (each value can have a different order).\\n\\n### Example #1\\n```\\n\\\"val=val1&id=val2&desc=val3&time=val4\\\"\\n\\n\\\"id=val2&val=val1&time=val4&desc=val3\\\"\\n```\\n\\nEach name has a specific value:\\n\\n1. **val** could contain  string a to z and number 0 to 9 (any case accepted).\\n2. **id** is a number from 0 to 10.\\n3. **desc** could contain strings a to z.\\n4. **time** is formated value (00:00 to 99:99).\\n\\n### Example #2\\n```\\n\\\"val=test1151&id=5&desc=helloWorld&time=54:33\\\"\\n\\n\\\"id=10&val=123test&time=99:00&desc=itsok\\\"\\n```\\n\\nWhen the regex checker is finished, you need to put all names and their values from the request into an object and return it with the given function `dataRegexLovely()`. The parameter `str` is a valid GET request (no gotchas).\\n\\n### Notes\\n- The regex length is limited to < 161 characters ( \\\"/\\\" and \\\\[flags] included).\\n- You might get an empty string `\\\"\\\"` when users don't send a request.\\n- Warning about data object value types.\",\"lab\":\"Object.prototype.sameObject = function(o){\\n  var key = Object.keys(o);\\n  for (var i = 0; i < key.length;i++){\\n    if(!this.hasOwnProperty(key[i])||!(o[key[i]]===this[key[i]])){return false}\\n  }\\n\\treturn true\\n}\\n\\nconsole.log(\\\"########Anti-cheat#########\\\");\\nTest.assertEquals(/^\\\\/.+\\\\/[gmixsuajd]*$/.test(regExp.toString()),true,`<-- Not valid regex -->`);\\nTest.assertEquals(regExp.toString().length<161,true,`<-- Regex length ${regExp.toString().length}/160 -->`)\\nconsole.log(\\\"#########################\\\");\\nTest.assertEquals(regExp.test(\\\"val=xyz54&id=1&time=01:41&desc=dzgr\\\"),true)\\nTest.assertEquals(regExp.test(\\\"time=01:41&val=xyz54&id=1&desc=dzgr\\\"),true)\\nTest.assertEquals(regExp.test(\\\"time=01:41&id=1&val=xyz54&desc=dzgr\\\"),true)\\nTest.assertEquals(regExp.test(\\\"time=01:41&id=1&desc=dzgr&val=xyz54\\\"),true)\\nTest.assertEquals(regExp.test(\\\"id=1&time=01:41&desc=dzgr&val=xyz54\\\"),true)\\nTest.assertEquals(regExp.test(\\\"id=1&desc=dzgr&time=01:41&val=xyz54\\\"),true)\\nTest.assertEquals(regExp.test(\\\"id=1&desc=dzgr&val=xyz54&time=01:41\\\"),true)\\nTest.assertEquals(regExp.test(\\\"desc=dzgr&id=1&val=xyz54&time=01:41\\\"),true)\\nTest.assertEquals(regExp.test(\\\"desc=dzgr&val=xyz54&id=1&time=01:41\\\"),true)\\nTest.assertEquals(regExp.test(\\\"desc=dzgr&val=xyz54&time=01:41&id=1\\\"),true)\\nTest.assertEquals(regExp.test(\\\"val=xyz54&desc=dzgr&time=01:41&id=1\\\"),true)\\nTest.assertEquals(regExp.test(\\\"val=xyz54&time=01:41&desc=dzgr&id=1\\\"),true)\\nTest.assertEquals(regExp.test(\\\"val=xyz54&time=01:41&id=1&desc=dzgr\\\"),true)\\nTest.assertEquals(regExp.test(\\\"val=54&id=10&time=11:41&desc=dzgrggr999\\\"),false)\\nTest.assertEquals(regExp.test(\\\"time=01:41&val=xyz54-l&id=1&desc=dzgr\\\"),false)\\nTest.assertEquals(regExp.test(\\\"time=01:41&id=1&val=xy z54&desc=dzgr\\\"),false)\\nTest.assertEquals(regExp.test(\\\"time=1:41&id=1&desc=dzgr&val=xyz54\\\"),false)\\nTest.assertEquals(regExp.test(\\\"id=1&time=01:410&desc=dzgr&val=xyz54\\\"),false)\\nTest.assertEquals(regExp.test(\\\"id=11&desc=dzgr&time=01:41&val=xyz54\\\"),false)\\nTest.assertEquals(regExp.test(\\\"id=1&desc=dzgr1&val=xyz54&time=01:41\\\"),false)\\nTest.assertEquals(regExp.test(\\\"desc=dzgr&id=1&val=xyz54&time=01:4148\\\"),false)\\nTest.assertEquals(regExp.test(\\\"desc=dzgr&&val=xyz54&id=1&time=01:41\\\"),false)\\nTest.assertEquals(regExp.test(\\\"desc=dzgr&val=xyz54&time=01:41&id=1,\\\"),false)\\nTest.assertEquals(regExp.test(\\\"val=xyz54&desc=dzgr&time=01:41&id=1&\\\"),false)\\nTest.assertEquals(regExp.test(\\\"&val=xyz54&time=01:41&desc=dzgr&id=1\\\"),false)\\nTest.assertEquals(regExp.test(\\\"val=xyz54&times=01:41&id=1&desc=dzgr\\\"),false)\\nTest.assertEquals(regExp.test(\\\"val=xyz54&times=01:41&ids=1&desc=dzgr\\\"),false)\\nTest.assertEquals(regExp.test(\\\"val=xyz54&times=01:41&id=1&descs=dzgr\\\"),false)\\nTest.assertEquals(regExp.test(\\\"val==xyz54&times=01:41&id=1&desc=dzgr\\\"),false)\\nTest.assertEquals(regExp.test(\\\"val==xyz54&times==01:41&id=1&desc=dzgr\\\"),false)\\nTest.assertEquals(regExp.test(\\\"val==xyz54&times=01:41&id==1&desc=dzgr\\\"),false)\\nTest.assertEquals(regExp.test(\\\"val==xyz54&times=01:41&id=1&desc==dzgr\\\"),false)\\nTest.assertEquals(regExp.test(\\\"val==xyz54&times=01:41&id=1&desc==dzgr\\\"),false)\\nTest.assertEquals(regExp.test(\\\"val==xyz54&times=01:41&id=1&desc==dzgr&val==xyz54&\\\"),false)\\nTest.assertEquals(regExp.test(\\\"val==xyz54&id=1&desc==dzgr&val==xyz54&\\\"),false)\\nTest.assertEquals(regExp.test(\\\"val==xyz54&times=01:41&id=1&times=01:41\\\"),false)\\nTest.assertEquals(regExp.test(\\\"desc==dzgr&times=01:41&id=1&desc==dzgr\\\"),false)\\nTest.assertEquals(regExp.test(\\\"id=1&times=01:41&id=1&desc==dzgr\\\"),false)\\nTest.assertEquals(regExp.test(\\\"\\\"),false)\\nTest.assertEquals(dataRegexLovely(\\\"desc=dzgr&val=xyz54&time=01:41&id=1\\\").sameObject({desc:\\\"dzgr\\\",val:\\\"xyz54\\\",time:\\\"01:41\\\",id:1}),true)\\nTest.assertEquals(dataRegexLovely(\\\"time=01:41&id=1&desc=dzgr&val=xyz54\\\").sameObject({desc:\\\"dzgr\\\",val:\\\"xyz54\\\",time:\\\"01:41\\\",id:1}),true)\\nTest.assertEquals(dataRegexLovely(\\\"time=11:41&id=10&desc=dzgraa&val=54\\\").sameObject({desc:\\\"dzgraa\\\",val:\\\"54\\\",time:\\\"11:41\\\",id:10}),true)\",\"language\":\"javascript\",\"summary\":\"You are to create a special regex that will detect if an HTML GET request is valid or not (with some gotchas). Strings are formated like so:\\n\\nname1=val1&name2=val2&name3=val3&name4=val4\\n\\nYou need to detect requests with the four names: \\\"val\\\", \\\"id\\\", \\\"desc\\\", \\\"time\\\" (each value can have a different order).\\n\\nExample #1\\n\\\"val=val1&id=val2&desc=val3&time=val4\\\"\\n\\n\\\"id=v\",\"tags\":[\"regex\",\"strings\",\"validation\"],\"timestamp\":{\"$date\":1499429462512},\"title\":\"Regex HTML Get Request Checker\",\"stats\":{\"completed\":{\"total\":28,\"ratings\":[3,3,3,3,3,2,2,4,0,4,2,3,5,2,5,5,3,5,5,5,3,3,0,3,0,0,3,2,3,4,2,4],\"rators\":[\"XHngE5iScvztMpnR2\",\"hi7Hvtq2mJfkXEGF2\",\"sQTaZGCCsE7BNQzyG\",\"65dbBZynphj53nXqA\",\"thEsZ7N6X8qfZMbcv\",\"tuyDaJzFy78jxvhCY\",\"SDtZFL5NzAoCPofXk\",\"XcHCqYmeoqxDsoucx\",\"QCchMDx3z8NcqT8QJ\",\"ak5aPiT6QWpmbnPzD\",\"n5wubRfh6zh8QRymN\",\"yjtdwc2AC4jA2RWtn\",\"N4etRh6MSQf79ETt2\",\"EQkZvdpc4SGbMt34W\",\"6PmHkD8bMHguJTwpp\",\"5DsYhKJiNTaarWKkM\",\"c69dbcvnNb8BB5294\",\"57SQPeXej763r8tgd\",\"BBP9BE5mKHRzaRpJr\",\"iGCyzBZ9rxC5cdWME\",\"JyCuvdmtZPNZ4hEpW\",\"Pibec96NpvMB5GqAt\",\"cRpaCxYRmGcN3Nsoj\",\"EAuL56kpyLytw4RcR\",\"dPM2Rk2iMkznyXNEt\",\"LojZZnLB8pD8d9JkA\",\"aEm3Wvj2rFYRL8Lrb\",\"oDtGiNqDMHmhHE3J8\"],\"quality\":[]},\"complaints\":{\"total\":1,\"reasons\":[[\"confusing\"]],\"skippers\":[\"XHngE5iScvztMpnR2\",\"kHps8oHPGWhRmir9u\"]},\"instructions\":{\"score\":-1.35,\"voters\":[\"NJFwquxQe58KQMmCX\",\"72RkYjdDzRupHxJwn\"]},\"tests\":{\"score\":0,\"voters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":0,\"family\":[{\"_id\":\"2GQ4MishQPNA8FPKr\",\"language\":\"javascript\"},{\"_id\":\"Rww5GiNRH3b2BRC83\",\"language\":\"python3\"}]}}"]