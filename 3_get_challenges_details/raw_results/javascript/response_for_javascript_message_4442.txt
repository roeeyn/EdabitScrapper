a["{\"msg\":\"result\",\"id\":\"975\",\"result\":{\"_id\":\"6y3Ew3v7GzdQhNrgm\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"let x = /* Fill in regular expression */\",\"difficulty\":1.66,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"KqHenv47KswCpBmEe\",\"instructions\":\"Write a **regular expression** that matches any **valid Canadian postal code** with any of the following formats:\\n```\\nA1A 1A1\\nA1A-1A1\\nA1A1B1\\n```\\n\\nMake the match **case insensitive**.\\n\\n### Examples\\n```\\n\\\"M3M 0A9\\\" ➞ true\\n\\n\\\"m4c-1t1\\\" ➞ true\\n\\n\\\"m45 1t1\\\" ➞ false\\n\\n\\\"M4C-1T1Z\\\" ➞ false\\n```\\n\\n### Notes\\nThis challenge is designed to use **Regex only**.\",\"lab\":\"function validate(zip) {\\n\\treturn x.test(zip)\\n}\\n\\nTest.expect(validate(\\\"M3M 0A9\\\"), \\\"M3M 0A9 is a valid zip.\\\")\\nTest.expect(validate(\\\"M3M-0A9\\\"), \\\"M3M-0A9 is a valid zip.\\\")\\nTest.expect(validate(\\\"M3M0A9\\\"), \\\"M3M0A9 is a valid zip.\\\")\\nTest.expect(validate(\\\"m4c 1t1\\\"), \\\"m4c 1t1 is a valid zip.\\\")\\nTest.expect(validate(\\\"m4c-1t1\\\"), \\\"m4c-1t1 is a valid zip.\\\")\\nTest.expect(validate(\\\"m4c1t1\\\"), \\\"m4c1t1 is a valid zip.\\\")\\n\\nTest.expect(!validate(\\\"m45 1t1\\\"), \\\"m45 1t1 is not in the correct format.\\\")\\nTest.expect(!validate(\\\"M4F 1TY\\\"), \\\"M4F 1TY is not in the correct format.\\\")\\nTest.expect(!validate(\\\"M4C A1T\\\"), \\\"M4C A1T is not in the correct format.\\\")\\nTest.expect(!validate(\\\"M4C-1T1Z\\\"), \\\"M4C-1T1Z is too long.\\\")\\nTest.expect(!validate(\\\"M4C1T1Z\\\"), \\\"M4C1T1Z is too long.\\\")\\nTest.expect(!validate(\\\"M4C 1T\\\"), \\\"M4C 1T is too short.\\\")\\nTest.expect(!validate(\\\"M4C  1T2\\\"), \\\"M4C  1T2 has too many whitespaces.\\\")\\nTest.expect(!validate(\\\"M3M ?A9\\\"), \\\"M3M ?A9 uses an unacceptable character.\\\")\\nTest.expect(!validate(\\\"M3M~8A9\\\"), \\\"M3M~8A9 uses an unacceptable delimiter.\\\")\\nTest.expect(!validate(\\\"M3M^ 8A9\\\"), \\\"M3M^ 8A9 uses an unacceptable delimiter.\\\")\",\"language\":\"javascript\",\"summary\":\"Write a regular expression that matches any valid Canadian postal code with any of the following formats:\\nA1A 1A1\\nA1A-1A1\\nA1A1B1\\n\\nMake the match case insensitive.\\n\\nExamples\\n\\\"M3M 0A9\\\" ➞ true\\n\\n\\\"m4c-1t1\\\" ➞ true\\n\\n\\\"m45 1t1\\\" ➞ false\\n\\n\\\"M4C-1T1Z\\\" ➞ false\\n\\nNotes\\nThis challenge is designed to use Regex only.\",\"tags\":[\"strings\",\"regex\"],\"timestamp\":{\"$date\":1556312444184},\"title\":\"Regex Series: Canadian Postal Codes\",\"stats\":{\"completed\":{\"total\":213,\"ratings\":[1,1,1,1,1,1,1,1,1,1,1,2,0,1,2,2,1,1,2,0,1,2,2,1,0,1,1,2,1,1,1,2,2,1,5,2,2,2,0,0,2,2,2,2,1,2,3,0,1,2,1,2,2,2,2,2,0,2,2,2,0,2,2,3,2,2,2,2,3,2,2,1,1,3,3,0,0,2,2,1,1,2,1,3,1,1,2,1,3,2,2,2,1,2,2,1,2,2,1,2,2,0,0,2,2,3,2,2,2,2,1,2,2,2,1,2,2,2,2,2,0,2,2,5,2,2,2,1,3,1,2,1,0,1,2,2,2,0,2,1,3,1,2,2,2,3,2,2,2,1,2,1,2,1,2,2,1,2,2,2,2,0,2,2,1,1,2,2,2,3,1,0,2,2,1,2,2,2,1,3,2,2,2,2,1,2,2,2,2,5,2,1,3,1,2,0,3,2,2,2],\"rators\":[\"mNMQvcxKSSvqqMYCH\",\"KPDPaGaJ4jGtRusF2\",\"65dbBZynphj53nXqA\",\"SDtZFL5NzAoCPofXk\",\"9K238uQo5ZffBQxzj\",\"N7P4AnS8nzK4oupHv\",\"4uPCFC6LBJYZ74uYu\",\"wcjknenWdPRhrRScv\",\"oFckF5bB5dGBQKneS\",\"hcNbHccysCEQ9yhGp\",\"n5wubRfh6zh8QRymN\",\"vKch2w3b4keMd84jj\",\"HrJtdRbvHHNh7tMMo\",\"K8retouBZnftajjFi\",\"4pagg6vw2Cjepv7tN\",\"KpXzNmd3gyz2Mwka5\",\"eomLS3wh6tQPN8jtH\",\"bbbpNxM3hgGMCqMn8\",\"tQwDooQpBeuprEcRK\",\"Rgdjr9tBGabXFdoXL\",\"fmLzKJTPWvtGRAaAN\",\"gkfjZWLHtuC3RR4QY\",\"7gZKfvwaeqsGKXMEN\",\"a835PgGTZqd554oNH\",\"EjPLq3QSJdGQFJdgW\",\"e8ftyJ6nKRtZDwGWJ\",\"RE4Mm9T6Q9uygAxGS\",\"bjn5DTzzaWCP5BDgX\",\"iTh4digAQ2EnhYegk\",\"XHngE5iScvztMpnR2\",\"dDFJpK4pXCsQYuHmc\",\"FGEeCTorXbX3WvjFW\",\"2WkWxAEetbCzddQzK\",\"EWn8w8P3nNh7knatY\",\"KzMMvGnXcWGTmRE7F\",\"zgoq9MhrL2h75DAMA\",\"22b9CfE2MHMkxKwSs\",\"9AdMR4uBsHxRcd86Q\",\"CDMRRwcZ3h4NJ5tww\",\"S7R7voZRxnWjCn8pi\",\"2innwjWqxJHo4eRGh\",\"cTasoJQG2iA6FvuK4\",\"Akq3fQcPRgPrWfsye\",\"SYEuojZtP6yLXryHv\",\"78GGtabNSgpJ4Xz8v\",\"nYQhPi7DNdiBxBbPS\",\"mp8EDcvBkYFJyfaA3\",\"h4jFmtbFn92eA4649\",\"GwneECHznE5JzHD74\",\"3u7mhwNxuummKkYts\",\"mci2DcCEjeehHqHhH\",\"FkWttuZTGpYwAZ4wi\",\"J67hC7LSEYS5JwhPj\",\"5GWkiNRN6xMuRu7Dg\",\"M3z4ZPgywPqX9eoS4\",\"rTRvHndHZKKRkb9w5\",\"qFjv6BvgF3v3BRWq2\",\"AxZpaHuZptKWTQj8y\",\"CJnuSjyCBMTbTiibD\",\"J6DZ4ePyc3evuLine\",\"iERYTAAJo3rBJ8Rok\",\"E3fyZ23p26CcvHvuR\",\"Q9KQomTTPBsrkAL6c\",\"XKi8iZXBCHCaebSHh\",\"jmKPGxuB2hRtE8egx\",\"538PKNyqMiCwLWYWK\",\"zw7g7T8wE5R5CBhXr\",\"R4JQmeA6cYyfXbmLF\",\"rMa8q8fB7xyTN5R2e\",\"arYfZZakzSHEnsu4i\",\"wcRpnBcwEJCs88aHq\",\"2DfWvsPT8TPPNbQpt\",\"L9XxCiDxYJGcMQvxF\",\"LakfCqLicLxKfwdPC\",\"bKPvJHLQ3ovQLt9MJ\",\"5Zq3aGdvh4LHBvnJL\",\"yjtdwc2AC4jA2RWtn\",\"ZYWbTA92yKZ98rhEZ\",\"Jwu3i2k565y77L4aK\",\"66gXXy97s3jxAeS9q\",\"6BpBQnSGhzgvhXrEy\",\"jcPZ5ySXseCB7Ec3x\",\"gSpcNJ8znvGGfWsQH\",\"AasGs8AeX9Lcb9xJn\",\"oERDdk8GeuQMDdNCK\",\"nRht5DZA6YcH2kAo6\",\"fGpXRhmx7joSymYi5\",\"3awyiorYPgCqqP7Sr\",\"D5mmNN34xQFyXTM37\",\"6gPHMpkEP8JuHxzpd\",\"PJu3WcTpfRrvHfQiS\",\"7Nz3GAqN3SMgSiyTT\",\"DHwbkbzYNpmkSFT7u\",\"aPX8qCXL6TmfpRfgy\",\"sbme4fRJjjBjYXRbY\",\"Y9Nz9yafaibz54W4o\",\"FgGwspAA6jGQm7kak\",\"AeGoKjpCRNZB4SnYJ\",\"FJQH9eyzX84d9Fdmf\",\"jqbm8L6895JgAtZ6H\",\"H3yM3F3mukfdq9fit\",\"j5FSQCayX3By73CCw\",\"BGQqaYbqYqmTo5Ehs\",\"2tCCFm5iefjrRSaxv\",\"Wmq8QjysTQYskk4m7\",\"z6QfbuG6TXE7GKynQ\",\"MEZNjeGd7APtvA3SL\",\"BdvdJYwHZr7JpkHsn\",\"zd9FLSzsGz3evKafy\",\"mHT2bJb5SByfJ8yKS\",\"ih2aGaqkMaagTgyL2\",\"9gEWz76H8KmhN4yJj\",\"zTZtM9jRsu8eXie6s\",\"8BFSTCnoe2QggN64c\",\"CgKzxkiiEQcemKKaj\",\"g5noFWaoRtZNcEEAW\",\"ygNnCnmzZfy3r2m6w\",\"5YCX58nhHT8oRCHyy\",\"zsNp9fk9BGDBiHr4G\",\"SntPQ5GpYErgWtCof\",\"QEhgdaBYvvTH4GpoN\",\"pi76g3eRpnKrhee2a\",\"k5TGxBtLi9BXxeChT\",\"Nv5a34gxg5yvLKRW8\",\"YER6iBcpJCuhgrYDN\",\"v2AzBqD64zLiRD9bP\",\"uAS9uKs8KQmp8uhqn\",\"PytNZK9mNiRiZxPrm\",\"yK7zzK2aGJwuWKHRL\",\"SNiJRRosrmSWssLj4\",\"mf8xW5DhPjfXaCEsQ\",\"2ZFoLTxcCARhwc8xX\",\"Q75jsoXjhTXJRrw8z\",\"tAF9Gf6PiGogbZuWs\",\"a777e8chPvJkY3tKa\",\"QRv96jmNaYsWkxQEG\",\"Wv9v7fHb8umujfg2j\",\"eFjGhq7C7bBKXjT6X\",\"ij9YRJvZz6WbqcGXS\",\"eQXwk5zGckM8tCWYH\",\"2zKQWLmEBw8FBs4ZL\",\"7wtuhPesfhcYsfZaZ\",\"BSkoT6o2GweZkqXbc\",\"C9LKGu2g5hSijvDzA\",\"kKEdtoo4zb5jCgYno\",\"buX4mCQhtXCfBjeno\",\"SWbaoFPBAeu6g376j\",\"aEm3Wvj2rFYRL8Lrb\",\"PGCDJpQMN8Sjn9Gm6\",\"8raviPK67KKxzQWcF\",\"4ntYzGHHBgqf58udP\",\"pLpcDC3EYx2DDQSdt\",\"Po3v3dHCk6wYGKMwi\",\"ttuGK7od8simjgmCJ\",\"e9Cknxbx6o7Nb6REs\",\"NczXsSrYNX6nDWhjF\",\"nkH3HfJXLMNcBMM79\",\"mfYrBKwDr4hXSFuuN\",\"Ya3eHgs8x3unZRLpb\",\"evTTY9hwrtogaNxXn\",\"kp2ZbCewZJAbfd7xv\",\"s7Qqx4Jnuq85iB7Lw\",\"PH32cNxBjrK4a28sn\",\"vAh63eGRwkuJtoP8v\",\"g4NCSxxHqHCGMpWwT\",\"CNc6rmwhbxkxEhHAp\",\"SY9Euc4kQfRgetXTd\",\"M4vq8ATaS9Jg5X7iP\",\"DDokdbBKxv49M445o\",\"AFfw7cGg83uYk2Miy\",\"vewKwcMeGuk3p3MsN\",\"jLSZdBseR2kfjt8dL\",\"oE8rNagYonFzFvKH5\",\"Yp7uvStL97cC9fKkY\",\"R9uaMzX2Y4ND8Cosm\",\"f52uK7D6PGGdzjtdZ\",\"Es4eX2stRpyoXeC7f\",\"3Gf7ikLijfoxabiPY\",\"RtPhDuwmvWNHiBxmG\",\"mDWNyaaQ9hvPCRzSd\",\"CH53jGETBeJTummf3\",\"s678Wirfor5uYL5T6\",\"N3CNtWZz4ovJfH9Aw\",\"u9cRf5kvtpRB5ffB3\",\"2Qk2mFu9HBFzrB24i\",\"MqKBQRgQ6KDSFu4yM\",\"J7d397iB5GuWRAMfg\",\"PLAW6hHCDwfFyi5yx\",\"wJTDDTE3TrmSXKP4d\",\"jemTNShfp6ymAs3pj\",\"oDtGiNqDMHmhHE3J8\",\"srJ34BaybkQh3qRkM\",\"mpLFbFKjY6u3nsDMv\",\"NGvCPuMiAP3xrRLfB\",\"9HZbxzkzgz4CvePtv\",\"LwD3CyYSiBfg3mA4r\",\"nBJve5CzG6WAw7WFQ\",\"gXTAie79kiw28tx5u\",\"jyoLggHk8xQKZuoQC\",\"NJCmkbH5e7qbtZYhd\",\"bfYmA3LMvhSrK59cn\",\"RJHWMjDH2PvvNavF8\",\"jicWFrNKadYuLhqxh\",\"oyB4Wr4EeZnoDaa8B\",\"CHvzhtXnv8HTbPQ56\",\"PTo9qt93YqGvL8fCa\",\"uxKGACwmZ6FNZsMwE\",\"LPZ2QKCoB8q6rG25c\",\"DPpSwhhiuF4Y9YR2i\"],\"quality\":[5,5,3,5,5,5,4,5,5,5,5,5,5,4,5,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"isHidden\":false,\"quality\":4.777777777777778,\"family\":[{\"_id\":\"6y3Ew3v7GzdQhNrgm\",\"language\":\"javascript\"},{\"_id\":\"NK6Xmwt3nCEwFgQXC\",\"language\":\"ruby\"}]}}"]