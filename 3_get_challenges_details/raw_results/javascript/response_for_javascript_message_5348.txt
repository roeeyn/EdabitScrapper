a["{\"msg\":\"result\",\"id\":\"1424\",\"result\":{\"_id\":\"iKdJfMrxkWsBcEKEL\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"function lookAndSay(n) {\\n\\t\\n}\",\"difficulty\":2.15,\"familyId\":\"uzS7M5WkANoSB3k3b\",\"instructions\":\"Given an integer, return a new **integer** according to the rules below:\\n\\n- Split the number into groups of two digit numbers. If the number has an *odd* number of digits, return `\\\"invalid\\\"`.\\n- For each group of two digit numbers, concatenate the *last digit* to a new string the same number of times as the value of the *first digit*.\\n- Return the result as an *integer*.\\n\\n```\\nlookAndSay(3132) ➞ 111222\\n\\n// By reading the number digit by digit, you get three \\\"1\\\" and three \\\"2\\\".\\n// Therefore, you put three ones and three two's together.\\n// Remember to return an integer.\\n```\\n\\n### Examples\\n```\\nlookAndSay(95) ➞ 555555555\\n\\nlookAndSay(1213141516171819) ➞ 23456789\\n\\nlookAndSay(120520) ➞ 200\\n\\nlookAndSay(231) ➞ \\\"invalid\\\"\\n```\\n\\n### Notes\\n- Note that the number **0** can be included (see example #3).\\n- Check the **Resources** tab for a TED-Ed video for extra clarity.\",\"isHidden\":false,\"lab\":\"Test.assertEquals(lookAndSay(95), 555555555)\\nTest.assertEquals(lookAndSay(1213141516171819), 23456789)\\nTest.assertEquals(lookAndSay(231), 'invalid')\\nTest.assertEquals(lookAndSay(3132), 111222)\\nTest.assertEquals(lookAndSay(313317), 1113337)\\nTest.assertEquals(lookAndSay(786497), 8888888444444777777777)\\nTest.assertEquals(lookAndSay(591173), 9999913333333)\\nTest.assertEquals(lookAndSay(404094), 444444444)\\nTest.assertEquals(lookAndSay(473536), 7777555666)\\nTest.assertEquals(lookAndSay(880440), 888888880000)\\nTest.assertEquals(lookAndSay(724767), 22222227777777777)\\nTest.assertEquals(lookAndSay(830926), 3333333366)\\nTest.assertEquals(lookAndSay(665956), 6666669999966666)\\nTest.assertEquals(lookAndSay(441746), 444476666)\\nTest.assertEquals(lookAndSay(888322), 888888883333333322)\\nTest.assertEquals(lookAndSay(614193), 1111111111333333333)\\nTest.assertEquals(lookAndSay(733257), 333333322277777)\\nTest.assertEquals(lookAndSay(689301), 888888333333333)\\nTest.assertEquals(lookAndSay(614318), 11111133338)\\nTest.assertEquals(lookAndSay(936667), 333333333666666777777)\\nTest.assertEquals(lookAndSay(890917), 999999997)\\nTest.assertEquals(lookAndSay(417528), 1111555555588)\\nTest.assertEquals(lookAndSay(830756), 3333333366666)\\nTest.assertEquals(lookAndSay(297807), 998888888)\\nTest.assertEquals(lookAndSay(285728), 887777788)\\nTest.assertEquals(lookAndSay(664940), 66666699990000)\\nTest.assertEquals(lookAndSay(476240), 77772222220000)\\nTest.assertEquals(lookAndSay(933525), 33333333355555)\\nTest.assertEquals(lookAndSay(788200), 888888822222222)\\nTest.assertEquals(lookAndSay(163210), 62220)\\nTest.assertEquals(lookAndSay(708543), 555555553333)\\nTest.assertEquals(lookAndSay(296562), 99555555222222)\\nTest.assertEquals(lookAndSay(866934), 66666666999999444)\\nTest.assertEquals(lookAndSay(615664), 11111166666444444)\\nTest.assertEquals(lookAndSay(832349), 33333333339999)\\nTest.assertEquals(lookAndSay(938773), 333333333777777773333333)\\nTest.assertEquals(lookAndSay(345878), 444888888888888)\\nTest.assertEquals(lookAndSay(332533), 33355333)\\nTest.assertEquals(lookAndSay(74457), 'invalid')\\nTest.assertEquals(lookAndSay(798734), 999999977777777444)\\nTest.assertEquals(lookAndSay(17363), 'invalid')\\nTest.assertEquals(lookAndSay(72495), 'invalid')\\nTest.assertEquals(lookAndSay(418145), 1111111111115555)\\nTest.assertEquals(lookAndSay(76129), 'invalid')\\nTest.assertEquals(lookAndSay(436441), 33334444441111)\\nTest.assertEquals(lookAndSay(382177), 888117777777)\\nTest.assertEquals(lookAndSay(729472), 22222224444444442222222)\\nTest.assertEquals(lookAndSay(450718), 55558)\\nTest.assertEquals(lookAndSay(837641), 3333333366666661111)\\nTest.assertEquals(lookAndSay(285078), 88000008888888)\\nTest.assertEquals(lookAndSay(420899), 2222999999999)\\nTest.assertEquals(lookAndSay(894468), 999999994444888888)\\nTest.assertEquals(lookAndSay(580787), 8888877777777)\\nTest.assertEquals(lookAndSay(123559), 255599999)\\nTest.assertEquals(lookAndSay(909861), 888888888111111)\\nTest.assertEquals(lookAndSay(347173), 44411111113333333)\\nTest.assertEquals(lookAndSay(296201), 99222222)\\nTest.assertEquals(lookAndSay(217241), 1122222221111)\\nTest.assertEquals(lookAndSay(156414), 54444444)\\nTest.assertEquals(lookAndSay(842309), 4444444433)\\nTest.assertEquals(lookAndSay(851385), 55555555355555555)\\nTest.assertEquals(lookAndSay(317137), 1111111111777)\\nTest.assertEquals(lookAndSay(217693), 116666666333333333)\\nTest.assertEquals(lookAndSay(44255), 'invalid')\\nTest.assertEquals(lookAndSay(155400), 544444)\\nTest.assertEquals(lookAndSay(556470), 555554444440000000)\\nTest.assertEquals(lookAndSay(430222), 333322)\\nTest.assertEquals(lookAndSay(61912), 'invalid')\\nTest.assertEquals(lookAndSay(270019), 779)\\nTest.assertEquals(lookAndSay(151117), 517)\\nTest.assertEquals(lookAndSay(701552), 522222)\\nTest.assertEquals(lookAndSay(976363), 777777777333333333333)\\nTest.assertEquals(lookAndSay(75282), 'invalid')\\nTest.assertEquals(lookAndSay(641719), 44444479)\\nTest.assertEquals(lookAndSay(476865), 7777888888555555)\\nTest.assertEquals(lookAndSay(926748), 2222222227777778888)\\nTest.assertEquals(lookAndSay(238443), 33444444443333)\\nTest.assertEquals(lookAndSay(180236), 8666)\\nTest.assertEquals(lookAndSay(72293), 'invalid')\\nTest.assertEquals(lookAndSay(70404), 'invalid')\\nTest.assertEquals(lookAndSay(613247), 1111112227777)\\nTest.assertEquals(lookAndSay(818412), 11111111444444442)\\nTest.assertEquals(lookAndSay(859381), 5555555533333333311111111)\\nTest.assertEquals(lookAndSay(826222), 2222222222222222)\\nTest.assertEquals(lookAndSay(163909), 6999)\\nTest.assertEquals(lookAndSay(392936), 99999666)\\nTest.assertEquals(lookAndSay(13167), 'invalid')\\nTest.assertEquals(lookAndSay(953823), 55555555588833)\\nTest.assertEquals(lookAndSay(493000), 9999000)\\nTest.assertEquals(lookAndSay(346453), 44444444433333)\\nTest.assertEquals(lookAndSay(536460), 33333444444000000)\\nTest.assertEquals(lookAndSay(163026), 600066)\\nTest.assertEquals(lookAndSay(169775), 67777777775555555)\\nTest.assertEquals(lookAndSay(103131), 111111)\\nTest.assertEquals(lookAndSay(541146), 4444416666)\\nTest.assertEquals(lookAndSay(162067), 600777777)\\nTest.assertEquals(lookAndSay(522767), 2222277777777)\\nTest.assertEquals(lookAndSay(488280), 88882222222200000000)\\nTest.assertEquals(lookAndSay(775203), 777777722222)\\nTest.assertEquals(lookAndSay(226413), 224444443)\\nTest.assertEquals(lookAndSay(725455), 22222224444455555)\\nTest.assertEquals(lookAndSay(446972), 44449999992222222)\\nTest.assertEquals(lookAndSay(101532), 5222)\\nTest.assertEquals(lookAndSay(634315), 33333333335)\\nTest.assertEquals(lookAndSay(120520), 200)\",\"language\":\"javascript\",\"summary\":\"Given an integer, return a new integer according to the rules below:\\n\\nSplit the number into groups of two digit numbers. If the number has an odd number of digits, return \\\"invalid\\\".\\nFor each group of two digit numbers, concatenate the last digit to a new string the same number of times as the value of the first digit.\\nReturn the result as an integer.\\n\\nlookAndS\",\"tags\":[\"math\",\"numbers\",\"algorithms\"],\"timestamp\":{\"$date\":1590012054834},\"title\":\"Look and Say Numbers\",\"stats\":{\"completed\":{\"total\":94,\"ratings\":[2,2,2,2,2,1,2,4,0,2,2,3,2,2,2,3,3,3,3,3,0,2,1,1,2,2,0,3,0,3,2,3,3,2,3,3,3,1,2,1,0,1,2,2,3,2,1,3,3,1,3,1,2,3,3,1,3,2,3,3,3,2,2,3,3,1,1,3,3,3,2,2,2,2,2,2,3,3,3,3],\"rators\":[\"yjtdwc2AC4jA2RWtn\",\"tAF9Gf6PiGogbZuWs\",\"ou59JYLGm3Mt26556\",\"q4JdPWPeogAun4skw\",\"SxqAEMaYcE9Ps9eh6\",\"ZZ3JYmkR4dNtCwviD\",\"WZtccgHDu6QmNHmsD\",\"FGEeCTorXbX3WvjFW\",\"RE4Mm9T6Q9uygAxGS\",\"TjwyRbkPanQTP7AYs\",\"Xk2g4CNFAnYcvxiSr\",\"2ZFoLTxcCARhwc8xX\",\"Es4eX2stRpyoXeC7f\",\"sW78rbapvsS3AnuJe\",\"FJsvM5yqKuK9yMk9P\",\"n5wubRfh6zh8QRymN\",\"zNN2fW2pJGpTxBgzx\",\"a777e8chPvJkY3tKa\",\"pd8dm7sWLW9cY6dYW\",\"mHT2bJb5SByfJ8yKS\",\"z5ebtimXwFFJdYxoa\",\"MtSGMTysiWHmv4CRE\",\"CJBPyyfyaEeEo63sb\",\"yuLxi2qBJvMnwgdgJ\",\"FiK2ruyH8KeHLAgoA\",\"W5DHrpTxRq7WWcbDt\",\"fjBB8rBHeCeMGELvW\",\"pKd2jqeFwpf2cTeHz\",\"R8DyjjcaAEg4mnLgB\",\"ZcqshY58sGEEvgeaq\",\"bX6tpTCjwoi6XMMbK\",\"buX4mCQhtXCfBjeno\",\"xX8GBotKi8DPauvP2\",\"Dn5QN5F7y54y4kzp9\",\"aEm3Wvj2rFYRL8Lrb\",\"QRv96jmNaYsWkxQEG\",\"DMKGmgv3dXruCSjXi\",\"8s5Bdrn7RTga7DL6x\",\"4deyTem4Z3zgPLEv7\",\"jkumHyXfMkhGcPgqC\",\"N82kEBvpFE5FjbHrk\",\"NchnDcEmsLTeFZ4FH\",\"N7fwDd5JRDsuX7EKa\",\"veKWMS3ACmRWTjiLK\",\"noaBx5QyY6pTS5bja\",\"szQg8dxKNNre3v3Jk\",\"iJC8PmpzSyTnEDqw5\",\"2innwjWqxJHo4eRGh\",\"4Xv87xmdSnpYhi8hz\",\"oDnPTXrzYF4snDPXY\",\"rSJGLYSXMuu3RWjun\",\"eFjGhq7C7bBKXjT6X\",\"rC7kdm3SsSX9udEQk\",\"8BJyXvRWcrvN3nttS\",\"QnPD4Sv6W4LHc2Qng\",\"faKt2ad3GNGH2gYB9\",\"65dbBZynphj53nXqA\",\"MT26yxj3YX95DsyLj\",\"acHSYL6uQAgpgFMjp\",\"r7mZLgpQWzRiGddL5\",\"BdvdJYwHZr7JpkHsn\",\"CNc6rmwhbxkxEhHAp\",\"pGh7WykiPe26fHJYv\",\"ct42f2gGpMXSd9hXM\",\"zw7g7T8wE5R5CBhXr\",\"g4NCSxxHqHCGMpWwT\",\"p8X4RFTTsnQzB7vmQ\",\"qWR7eXxBiNee22A5u\",\"i49enk79wAajcgi7a\",\"QYNjAji97bn9BBi6p\",\"qLxYpxoo35DTyuxni\",\"2Qk2mFu9HBFzrB24i\",\"u9cRf5kvtpRB5ffB3\",\"e9Cknxbx6o7Nb6REs\",\"RtPhDuwmvWNHiBxmG\",\"M4vq8ATaS9Jg5X7iP\",\"wJTDDTE3TrmSXKP4d\",\"srJ34BaybkQh3qRkM\",\"ZcJm2kuqJnN3CXFaR\",\"NGvCPuMiAP3xrRLfB\",\"oDtGiNqDMHmhHE3J8\",\"Ya3eHgs8x3unZRLpb\",\"hvTAyFPy4pJHdrYJX\",\"mdv6r687hYHFziB89\",\"AFfw7cGg83uYk2Miy\",\"TtrXnGzi9MyhLvWiz\",\"KDB68hrzscRmCrdLh\",\"rXteqJeJGgF5wxn4t\"],\"quality\":[4,5,3,5,5,5,5,5,5,5,5,4,4]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"quality\":4.615384615384615,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"NaLJhudfbSk5ENWYt\",\"language\":\"cpp\"},{\"_id\":\"D3MvMGRxTsN3mtNkH\",\"language\":\"java\"},{\"_id\":\"iKdJfMrxkWsBcEKEL\",\"language\":\"javascript\"},{\"_id\":\"6hnrKRh7fZfMC5CKY\",\"language\":\"python3\"},{\"_id\":\"b6pYoi6uT2gPfsL2z\",\"language\":\"ruby\"}]}}"]