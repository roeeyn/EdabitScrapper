a["{\"msg\":\"result\",\"id\":\"1219\",\"result\":{\"_id\":\"R8atdhgsG4B69AZzR\",\"author\":\"Isaac Pak\",\"authorId\":\"yaL57wdXmgAZTvKfX\",\"code\":\"function saySomething(str) {\\n\\tthrow \\\"what the heck\\\"\\n}\\n\\nlet ERR = \\\"\\\"\\n\\nconst wait = () => new (   => setTimeout(  , 1000))\\n\\nwait().then(() => saySomething(\\\"1 second has passed\\\"))\",\"difficulty\":2.0425531914893615,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"fhMCzDsHnwsepfPEd\",\"instructions\":\"You may run into some old asynchronous API that requires you to pass in a callback. Take the `setTimeout()` function for example:\\n\\n```\\nsetTimeout(() => saySomething(\\\"1 second passed\\\"), 1000)\\n```\\n\\nWhat if an error occured in the `saySomething()` function. How could you handle it? Wrap it with a Promise!\\n\\nThere are some elements missing in the **wait** function, it should return a **promise**. Create an error handler and assign the error to **ERR** inside the handler.\\n\\n### Notes\\n- Do not change the function `saySomething()`.\\n- You should not have to erase any of the existing code.\\n- Check **Resources** if you get stuck.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"function promiseState(p) {\\n  const t = {};\\n  return Promise.race([p, t]).then(v => (v === t)? \\\"pending\\\" : \\\"fulfilled\\\", () => \\\"rejected\\\");\\n}\\n\\nTest.assertEquals(ERR, \\\"\\\", \\\"You are only allowed to reassign 'ERR' in the error handler.\\\")\\npromiseState(wait).then(state => Test.assertEquals(state, \\\"fulfilled\\\"))\\nwait().then(x => Test.assertEquals(ERR, \\\"what the heck\\\"))\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,1,3,2,3,3,1,3,2,4,0,2,2,2,2,3,2,3,3,0,1,2,3,2,4,0,2,0,2,1,1,3,3,2,2,2,2,0,2,3,3,3],\"rators\":[\"yaL57wdXmgAZTvKfX\",\"yjtdwc2AC4jA2RWtn\",\"yFGcFfNsHt2Z4G5a9\",\"mHT2bJb5SByfJ8yKS\",\"6BpBQnSGhzgvhXrEy\",\"md3YH25fssDnuBWMr\",\"AvEiDZKLHCEQ6n9Ma\",\"EWn8w8P3nNh7knatY\",\"NRYNuaQhH6Hife3nf\",\"fngeyb3ggLPHgMSpz\",\"sBcsrC5paZm9nxjot\",\"aEm3Wvj2rFYRL8Lrb\",\"65dbBZynphj53nXqA\",\"NczXsSrYNX6nDWhjF\",\"msrRGxcGDya8dZdRr\",\"Kk3jdrvAbPENkw5Ft\",\"3oZKDoY9FdANBZJqM\",\"PGCDJpQMN8Sjn9Gm6\",\"qJTbsuToGEtaYnGxn\",\"zMCXYFZSsviDCvjnY\",\"NwtTNvu6nt6siouZF\",\"n5wubRfh6zh8QRymN\",\"CNc6rmwhbxkxEhHAp\",\"ccHAPAfdET3cnyPaG\",\"BdvdJYwHZr7JpkHsn\",\"kp2ZbCewZJAbfd7xv\",\"sNcDN3s3rH9wcNg5n\",\"LjoNTyGEMfBpMHHus\",\"M4vq8ATaS9Jg5X7iP\",\"eANW47mfA359Y6JyP\",\"8s5Bdrn7RTga7DL6x\",\"PH32cNxBjrK4a28sn\",\"GZGvYkdHBssXCdrae\",\"pCxejeWqeLt93bBgf\",\"34bE6mric984YYLZQ\",\"f3RAbWvE6uESq7KE5\",\"PTo9qt93YqGvL8fCa\",\"AMpQSjKsRqhCDyS2j\",\"FGEeCTorXbX3WvjFW\",\"9XnGoq9Tv6ut3zTtH\",\"2Sa2SY7WKtxYpmPym\",\"2v6kmccZDRPbPNDyf\",\"9qJwfSnwqzDYYRqTP\",\"cGhFHezqgmhL9L5yn\",\"QGjY3hgPYPMmMjc7j\",\"ThaiAKWWDw2W4QfJh\"],\"total\":48,\"quality\":[1,3,3,2]},\"flags\":0},\"summary\":\"You may run into some old asynchronous API that requires you to pass in a callback. Take the setTimeout() function for example:\\n\\nsetTimeout(() => saySomething(\\\"1 second passed\\\"), 1000)\\n\\nWhat if an error occured in the saySomething() function. How could you handle it? Wrap it with a Promise!\\n\\nThere are some elements missing in the wait function, it should retur\",\"tags\":[\"functional_programming\"],\"timestamp\":{\"$date\":1582172357658},\"title\":\"Promises VIII: Old Callback API\",\"quality\":2.25,\"family\":[{\"_id\":\"R8atdhgsG4B69AZzR\",\"language\":\"javascript\"}]}}"]