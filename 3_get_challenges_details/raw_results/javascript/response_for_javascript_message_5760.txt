a["{\"msg\":\"result\",\"id\":\"1628\",\"result\":{\"_id\":\"o7fs6wQvjfu9iZE2j\",\"author\":\"0osh4d0wo0\",\"authorId\":\"XHngE5iScvztMpnR2\",\"code\":\"class Console {\\n    constructor() {\\n    }\\n\\n    log(args) {\\n    }\\n\\n    history(range) {\\n    }\\n\\n    clearHistory() {\\n    }\\n}\",\"difficulty\":2.2916666666666665,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"HncE5ExzhQffPLifc\",\"instructions\":\"The objective of this challenge is to create a console `Object`. You should write three working functions inside to complete this challenge:\\n\\n- Create a `log` function that takes user arguments and returns them as a string.\\n- Create a `history` function that takes an optional range as an argument.\\n- Create a `clearHistory` function to remove the history memory.\\n\\n### Examples\\n```\\nmyConsole.log([0,1,2,3]) ➞ \\\"[0,1,2,3]\\\"\\n\\nmyConsole.log(\\\"ok : \\\",function(){ return \\\"hello world !\\\"}) ➞ \\\"ok : function(){ return \\\\\\\"hello world !\\\\\\\"}\\\"\\n\\nmyConsole.history() ➞ \\\"[0,1,2,3]\\\\nok : function(){ return \\\\\\\"hello world !\\\\\\\"}''\\n\\nmyConsole.clearHistory() ➞ true\\n\\nmyConsole.history() ➞ \\\"\\\"\\n```\\n\\n### Notes\\n- The range of history function:\\n  - Should be an `Array`.\\n  - Cannot have negative numbers as range. e.g. If start number is negative set it to 0, if end number is negative ignore it and set it to max history length.\\n  - The end range can't be lower than the start range, else set it to start at value + 1.\\n  - The start range can't be greater than history length even he need to be set to length -1.\\n  - The start range does not start at 0.\\n  - If the range of history is not set then all history will be show.\\n  - Each history lines (with and without range) have newline at the end except last line.\\n  - If no argument was passed to history function all history will be showed.\\n- The log function has no limit of arguments.\",\"lab\":\"var argList = [\\n  [\\\"first test\\\",1],\\n  [\\\"second test\\\", [2]],\\n  [\\\"object test ! \\\", {myObjectIsHere : true}],\\n  [\\\"and my function ? \\\", function(){ return \\\"hello challengers\\\" }],\\n  [\\\" alll ??? \\\", [1,2,3,4], {here : true}, function(){return 1}],\\n  [null]\\n]\\nvar answerList = [\\n  \\\"first test1\\\",\\n  \\\"second test[2]\\\",\\n  \\\"object test ! {\\\\\\\"myObjectIsHere\\\\\\\":true}\\\",\\n  \\\"and my function ? function (){ return \\\\\\\"hello challengers\\\\\\\" }\\\",\\n  \\\" alll ??? [1,2,3,4]{\\\\\\\"here\\\\\\\":true}function (){return 1}\\\",\\n  \\\"null\\\"\\n]\\n\\nvar myConsole = new Console();\\n\\nfor (var i = 0; i < argList.length; i++){\\n  Test.assertEquals(myConsole.log.apply(myConsole,argList[i]), answerList[i])\\n}\\nTest.assertEquals(myConsole.history([1,2]), \\\"first test1\\\\nsecond test[2]\\\");\\nTest.assertEquals(myConsole.history([2,3]), \\\"second test[2]\\\\nobject test ! {\\\\\\\"myObjectIsHere\\\\\\\":true}\\\");\\nTest.assertEquals(myConsole.history([3,2]), \\\"object test ! {\\\\\\\"myObjectIsHere\\\\\\\":true}\\\");\\nTest.assertEquals(myConsole.history([-1]), \\\"first test1\\\\nsecond test[2]\\\\nobject test ! {\\\\\\\"myObjectIsHere\\\\\\\":true}\\\\nand my function ? function (){ return \\\\\\\"hello challengers\\\\\\\" }\\\\n alll ??? [1,2,3,4]{\\\\\\\"here\\\\\\\":true}function (){return 1}\\\\nnull\\\");\\nTest.assertEquals(myConsole.history([-1,2]), \\\"first test1\\\\nsecond test[2]\\\");\\nTest.assertEquals(myConsole.history([5,100000000]), \\\" alll ??? [1,2,3,4]{\\\\\\\"here\\\\\\\":true}function (){return 1}\\\\nnull\\\");\\nTest.assertEquals(myConsole.history(), \\\"first test1\\\\nsecond test[2]\\\\nobject test ! {\\\\\\\"myObjectIsHere\\\\\\\":true}\\\\nand my function ? function (){ return \\\\\\\"hello challengers\\\\\\\" }\\\\n alll ??? [1,2,3,4]{\\\\\\\"here\\\\\\\":true}function (){return 1}\\\\nnull\\\");\\nTest.assertEquals(myConsole.clearHistory(),true);\\nTest.assertEquals(myConsole.history(), \\\"\\\");\\nmyConsole.log(\\\"last\\\");\\nTest.assertEquals(myConsole.history(), \\\"last\\\");\",\"language\":\"javascript\",\"summary\":\"The objective of this challenge is to create a console Object. You should write three working functions inside to complete this challenge:\\n\\nCreate a log function that takes user arguments and returns them as a string.\\nCreate a history function that takes an optional range as an argument.\\nCreate a clearHistory function to remove the history memory.\\n\\nExamples\\nmy\",\"tags\":[\"objects\",\"classes\"],\"timestamp\":{\"$date\":1529335212519},\"title\":\"Write a Simple Console Object\",\"stats\":{\"completed\":{\"total\":41,\"ratings\":[1,1,1,1,1,1,1,1,1,1,1,4,3,2,0,2,2,3,3,4,1,1,2,3,3,1,3,4,2,3,3,3,3,5,3,1,4,0,3,4,2,1,3,4,2,3,5,4],\"rators\":[\"XHngE5iScvztMpnR2\",\"ZZA6JdLEBxHGozyWP\",\"tuyDaJzFy78jxvhCY\",\"65dbBZynphj53nXqA\",\"vKSgskHCJz9skQC5J\",\"thEsZ7N6X8qfZMbcv\",\"hi7Hvtq2mJfkXEGF2\",\"AgQburWndXwEhgomM\",\"khzfFceSLf4vmCBX3\",\"eYaxKg5Tg2Nj5QGSL\",\"enuhRD8zZn4QDNTc4\",\"SjY6a2v6jMjGraDKz\",\"TzA2B5NYnbpJDxL2y\",\"hy63rX7K3hEfyp8B4\",\"ak5aPiT6QWpmbnPzD\",\"SDtZFL5NzAoCPofXk\",\"G7bdEb5gSLLR59Fvn\",\"bbbpNxM3hgGMCqMn8\",\"2innwjWqxJHo4eRGh\",\"P8bXFR4cHwFia9rNM\",\"66WwKKFRhAc7FXwKH\",\"54Ka62KytXRsrLPhZ\",\"qF8Fv2oaZmc98M5qx\",\"Zpkiht6RjCTAL8BuA\",\"n5wubRfh6zh8QRymN\",\"yjtdwc2AC4jA2RWtn\",\"R4JQmeA6cYyfXbmLF\",\"XKi8iZXBCHCaebSHh\",\"DHwbkbzYNpmkSFT7u\",\"a5SYsAFj5km9yZkAQ\",\"mHT2bJb5SByfJ8yKS\",\"M7kpJSXFx67HhrTaZ\",\"g3unxwpmKKJHgLSk2\",\"Rrb84KWhN5tjhMGMA\",\"aEm3Wvj2rFYRL8Lrb\",\"CNc6rmwhbxkxEhHAp\",\"DNxSie8o54gzdirzQ\",\"aeAhnHiT8GJ8Xcz3P\",\"oDtGiNqDMHmhHE3J8\"],\"quality\":[]},\"tests\":{\"score\":-5,\"voters\":[\"XHngE5iScvztMpnR2\",\"vKSgskHCJz9skQC5J\"]},\"instructions\":{\"score\":-75.75,\"voters\":[\"XHngE5iScvztMpnR2\",\"q5tmdxT7igAgisTfr\",\"v9zmtRARfWL5TB9iM\",\"hi7Hvtq2mJfkXEGF2\",\"FEz6RxMHwcpXRthDc\",\"GiWEB8bDSqRWrKouW\",\"6ir9H6TvDxyGL4kvG\",\"gxZdDpFCZyKaJgwbm\"]},\"flags\":0},\"isHidden\":false,\"quality\":0,\"family\":[{\"_id\":\"o7fs6wQvjfu9iZE2j\",\"language\":\"javascript\"}]}}"]