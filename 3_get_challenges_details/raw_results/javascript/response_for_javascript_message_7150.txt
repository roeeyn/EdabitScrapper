a["{\"msg\":\"result\",\"id\":\"2314\",\"result\":{\"_id\":\"Ceuoo7Bfnrs3fSbxN\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"function qualify(arr) {\\n\\tfunction palindrome(s) {\\n\\t\\t// your recursive implemenentation\\n\\t\\treturn palindrome(s)\\n\\t}\\n\\t// your recursive implemenentation\\n\\treturn qualify(arr)\\n}\",\"difficulty\":3.7333333333333334,\"editorId\":\"a777e8chPvJkY3tKa\",\"familyId\":\"iWDZ3E9ZgzPkm9xEe\",\"instructions\":\"In this challenge, we'll take recursion to the next level, where we will embed a recursive function **within** a recursive function.\\n\\nWrite a function that sorts the strings in an array (if the string is a palindrome, it will become part of the sorted array) and finds the longest non-palindromic string.\\n\\nAlthough these tasks are achievable with the use of some built-in Array functions, the purpose and intent of this challenge is for you to solve it recursively.\\n\\n### Output Structure\\n```\\n{longest: longest_non_palindromic, length: longest_length, palindromes: [...palindromic_strings]}\\n```\\n\\n### Examples\\n```\\nqualify([\\\"wow\\\", \\\"relevance\\\", \\\"radar\\\", \\\"soundly\\\", \\\"intelligence\\\", \\\"racecar\\\", \\\"gradually\\\"]) ➞ {\\\"longest\\\": \\\"intelligence\\\", \\\"length\\\": 12, \\\"palindromes\\\": [\\\"racecar\\\", \\\"radar\\\", \\\"wow\\\"]}\\n\\nqualify([\\\"persistence\\\", \\\"anna\\\", \\\"civic\\\", \\\"perseverance\\\", \\\"kayak\\\", \\\"irrefutability\\\"]) ➞ {\\\"longest\\\": \\\"irrefutability\\\", \\\"length\\\": 14, \\\"palindromes\\\": [\\\"anna\\\", \\\"civic\\\", \\\"kayak\\\"]}\\n\\nqualify([\\\"level\\\", \\\"resistance\\\", \\\"madam\\\", \\\"arrogance\\\", \\\"unconsiderably\\\", \\\"mom\\\", \\\"noon\\\"]) ➞ {\\\"longest\\\": \\\"unconsiderably\\\", \\\"length\\\": 14, \\\"palindromes\\\": [\\\"level\\\", \\\"madam\\\", \\\"mom\\\", \\\"noon\\\"]}\\n```\\n\\n### Notes\\n- All items in the array are lowercase.\\n- In cases where two longest words are found, return the first.\\n- The use of `reduce()`, `reduceRight()`, `map()`, `filter()`, `indexOf()` and `max()` functions are restricted.\\n- You can read more about recursion (see **Resources** tab) if you aren't familiar with it yet or haven't fully understood the concept before taking up this challenge.\\n- If you think recursion is fun, check out this [collection](https://edabit.com/collection/YJH4pAyqDbhLc4STc).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"const excludes = f => !RegExp('indexOf|max|filter|map|reduceRight|reduce|reverse').test(f)\\nconst recurDou = f => (`${f}`.match(RegExp(`${f.name}`,'gm'))||[]).length > +(/function/.test(f)) &&\\n  (`${f}`.match(/palindrome/gm)||[]).length >= 3\\nTest.assertNotEquals(excludes(qualify), false, \\\"A restricted function is found!\\\")\\nTest.assertNotEquals(recurDou(qualify), false, \\\"A recursion within a recursion is required!\\\")\\n\\nlet strVector = [\\n  [\\\"wow\\\", \\\"relevance\\\", \\\"radar\\\", \\\"soundly\\\", \\\"intelligence\\\", \\\"racecar\\\", \\\"gradually\\\"],\\n  [\\\"persistence\\\", \\\"anna\\\", \\\"civic\\\", \\\"perseverance\\\", \\\"kayak\\\", \\\"irrefutability\\\"],\\n  [\\\"level\\\", \\\"resistance\\\", \\\"madam\\\", \\\"arrogance\\\", \\\"unconsiderably\\\", \\\"mom\\\", \\\"noon\\\"],\\n  [\\\"radicalities\\\", \\\"redder\\\", \\\"refer\\\", \\\"unlikely\\\", \\\"repaper\\\", \\\"rotator\\\", \\\"unbecoming\\\"],\\n  [\\\"rotor\\\", \\\"irrevocable\\\", \\\"robustly\\\", \\\"sagas\\\", \\\"solos\\\", \\\"stats\\\", \\\"tenet\\\", \\\"irrelevance\\\"],\\n  [\\\"gravitational\\\", \\\"maxam\\\", \\\"dad\\\", \\\"exceptionally\\\", \\\"salas\\\", \\\"accountability\\\", \\\"maam\\\", \\\"seremdipity\\\"]],\\nresVector = [\\n  {\\\"longest\\\": \\\"intelligence\\\", \\\"length\\\": 12, \\\"palindromes\\\": [\\\"racecar\\\", \\\"radar\\\", \\\"wow\\\"]},\\n  {\\\"longest\\\": \\\"irrefutability\\\", \\\"length\\\": 14, \\\"palindromes\\\": [\\\"anna\\\", \\\"civic\\\", \\\"kayak\\\"]},\\n  {\\\"longest\\\": \\\"unconsiderably\\\", \\\"length\\\": 14, \\\"palindromes\\\": [\\\"level\\\", \\\"madam\\\", \\\"mom\\\", \\\"noon\\\"]},\\n  {\\\"longest\\\": \\\"radicalities\\\", \\\"length\\\": 12, \\\"palindromes\\\": [\\\"redder\\\", \\\"refer\\\", \\\"repaper\\\", \\\"rotator\\\"]},\\n  {\\\"longest\\\": \\\"irrevocable\\\", \\\"length\\\": 11, \\\"palindromes\\\": [\\\"rotor\\\", \\\"sagas\\\", \\\"solos\\\", \\\"stats\\\", \\\"tenet\\\"]},\\n  {\\\"longest\\\": \\\"accountability\\\", \\\"length\\\": 14, \\\"palindromes\\\": [\\\"dad\\\", \\\"maam\\\", \\\"maxam\\\", \\\"salas\\\"]}]\\nfor (let i in strVector) Test.assertSimilar(qualify(strVector[i]), resVector[i])\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,5,0,2,2,4,5,5,1,5,2],\"rators\":[\"a777e8chPvJkY3tKa\",\"aEm3Wvj2rFYRL8Lrb\",\"yjtdwc2AC4jA2RWtn\",\"n5wubRfh6zh8QRymN\",\"va3fDAQm4sqSMoy3R\",\"buX4mCQhtXCfBjeno\",\"JGBCMpnbbi5ztuFoX\",\"PH32cNxBjrK4a28sn\",\"8BJyXvRWcrvN3nttS\",\"P8bXFR4cHwFia9rNM\"],\"total\":12,\"quality\":[]},\"flags\":0},\"summary\":\"In this challenge, we'll take recursion to the next level, where we will embed a recursive function within a recursive function.\\n\\nWrite a function that sorts the strings in an array (if the string is a palindrome, it will become part of the sorted array) and finds the longest non-palindromic string.\\n\\nAlthough these tasks are achievable with the use of some bui\",\"tags\":[\"recursion\",\"sorting\",\"arrays\"],\"timestamp\":{\"$date\":1596482615508},\"title\":\"Recursion: Sort and Find\",\"quality\":0,\"family\":[{\"_id\":\"Ceuoo7Bfnrs3fSbxN\",\"language\":\"javascript\"}]}}"]