a["{\"msg\":\"result\",\"id\":\"1955\",\"result\":{\"_id\":\"g2QxB5HCE9hN3PS75\",\"author\":\"zatoichi49\",\"authorId\":\"tAF9Gf6PiGogbZuWs\",\"code\":\"function competitionRank(results, person) {\\n\\t\\n}\",\"difficulty\":2.764044943820225,\"familyId\":\"HWuLwjhDgJGDk7765\",\"instructions\":\"Standard competition ranking (also known as \\\"1224\\\" ranking) assigns the same rank to matching values. Rank numbers are increased each time, so ranks are sometimes *skipped*. If we have 5 scores (the highest score having a rank of 1):\\n\\nNo matching values:\\n```\\nScores = [99, 98, 97, 96, 95]\\nRank = 1,  2,  3,  4,  5\\n```\\n\\nWith matching values:\\n```\\nScores = [99, 98, 98, 96, 95]\\nRank = 1,  2,  2,  4,  5\\n\\n// Second and third scores are equal, so rank \\\"3\\\" is skipped.\\n```\\n\\nGiven an object containing the names and scores of 5 competitors, and a competitor name, return the *rank* of that competitor after applying competition ranking.\\n\\n### Examples\\n```\\ncompetition_rank({\\n  George: 96,\\n  Emily: 95,\\n  Susan: 93,\\n  Jane: 89,\\n  Brett: 82\\n  }, \\\"Jane\\\") ➞ 4\\n\\ncompetition_rank({\\n  Kate: 92,\\n  Carol: 92,\\n  Jess: 87,\\n  Bruce: 87,\\n  Scott: 84\\n  }, \\\"Bruce\\\") ➞ 3\\n```\\n\\n### Notes\\nThe highest score has a rank value of 1.\",\"lab\":\"Test.assertEquals(competitionRank({Aria: 90, Brooke: 90, Olivia: 90, Eve: 74, Ellie: 87}, \\\"Ellie\\\"), 4)\\nTest.assertEquals(competitionRank({Ryan: 97, Thomas: 85, Kai: 95, Aiden: 87, Logan: 90}, \\\"Logan\\\"), 3)\\nTest.assertEquals(competitionRank({Lilly: 91, Harris: 87, Archie: 93, Lexi: 100, Ava: 88}, \\\"Lilly\\\"), 3)\\nTest.assertEquals(competitionRank({Jayden: 90, Josh: 90, Rebecca: 96, Jack: 89, Max: 96}, \\\"Rebecca\\\"), 1)\\nTest.assertEquals(competitionRank({Ben: 78, Quinn: 84, Lena: 84, Isla: 92, Kayla: 72}, \\\"Ben\\\"), 4)\\nTest.assertEquals(competitionRank({Lucy: 81, Ella: 90, Summer: 91, Harper: 81, Sadie: 85}, \\\"Ella\\\"), 2)\\nTest.assertEquals(competitionRank({Cole: 96, Carson: 92, Gabriel: 91, Hollie: 97, Penelope: 85}, \\\"Hollie\\\"), 1)\\nTest.assertEquals(competitionRank({Michael: 89, Noah: 98, Reuben: 88, Sam: 91, Mia: 91}, \\\"Mia\\\"), 2)\\nTest.assertEquals(competitionRank({James: 93, Maria: 91, Lewis: 95, Joseph: 96, Imogen: 90}, \\\"Lewis\\\"), 2)\\nTest.assertEquals(competitionRank({Jessica: 90, Emily: 99, Hope: 91, Charlie: 96, Lucas: 87}, \\\"Hope\\\"), 3)\\nTest.assertEquals(competitionRank({Sophie: 86, Piper: 98, Elliot: 100, Erica: 90, Freya: 100}, \\\"Freya\\\"), 1)\\nTest.assertEquals(competitionRank({Grace: 93, Henry: 90, Florence: 98, Millie: 89, David: 99}, \\\"Henry\\\"), 4)\\nTest.assertEquals(competitionRank({Alfie: 90, Elijah: 90, Cara: 85, Isaac: 96, Bella: 92}, \\\"Elijah\\\"), 3)\\nTest.assertEquals(competitionRank({Clara: 85, Matilda: 86, Amelia: 98, Oliver: 95, Adam: 94}, \\\"Clara\\\"), 5)\\nTest.assertEquals(competitionRank({Nina: 81, Tommy: 79, Tyler: 84, Leo: 79, Hallie: 79}, \\\"Nina\\\"), 2)\\nTest.assertEquals(competitionRank({Violet: 99, Finn: 100, Eden: 99, Frankie: 98, Rory: 98}, \\\"Frankie\\\"), 4)\\nTest.assertEquals(competitionRank({Robbie: 70, Julia: 76, Owen: 70, Phoebe: 92, Jacob: 79}, \\\"Owen\\\"), 4)\\nTest.assertEquals(competitionRank({Andrew: 95, Louis: 95, Riley: 95, Amy: 95, Charlotte: 95}, \\\"Charlotte\\\"), 1)\\nTest.assertEquals(competitionRank({Harry: 81, Elsie: 81, Grayson: 84, John: 84, Alex: 81}, \\\"Elsie\\\"), 3)\\nTest.assertEquals(competitionRank({Innes: 76, Lola: 85, Anna: 92, Cooper: 93, Daniel: 93}, \\\"Cooper\\\"), 1)\",\"language\":\"javascript\",\"summary\":\"Standard competition ranking (also known as \\\"1224\\\" ranking) assigns the same rank to matching values. Rank numbers are increased each time, so ranks are sometimes skipped. If we have 5 scores (the highest score having a rank of 1):\\n\\nNo matching values:\\nScores = [99, 98, 97, 96, 95]\\nRank = 1,  2,  3,  4,  5\\n\\nWith matching values:\\nScores = [99, 98, 98, 96, 95]\\nR\",\"tags\":[\"data_structures\",\"objects\"],\"timestamp\":{\"$date\":1564672458099},\"title\":\"Standard Competition Ranking\",\"stats\":{\"completed\":{\"total\":102,\"ratings\":[2,2,2,2,2,3,4,3,2,1,4,1,3,2,3,2,3,3,0,3,3,1,3,2,3,3,3,4,1,4,1,3,4,4,4,0,3,1,3,5,3,1,4,4,2,2,3,2,3,3,4,5,2,1,3,2,3,2,3,2,3,5,4,2,4,1,3,1,4,4,5,3,4,4,2,1,4,3,2,4,3,2,2,5,4,3,3,2,3],\"rators\":[\"ny5qnZXjZNedZp85F\",\"n5wubRfh6zh8QRymN\",\"4itF2fjGR9Swc48Zp\",\"65dbBZynphj53nXqA\",\"6yxbKDuGvFF9NEuNy\",\"6AkHZRsnysi2k9izF\",\"wcjknenWdPRhrRScv\",\"gyB5wJihaSZCWKTCB\",\"hi4T9cRdY7T37Dbuy\",\"yjtdwc2AC4jA2RWtn\",\"aMNhTh35QQAs33ycQ\",\"EWn8w8P3nNh7knatY\",\"EjPLq3QSJdGQFJdgW\",\"h4jFmtbFn92eA4649\",\"5Zq3aGdvh4LHBvnJL\",\"kKxTMPfvvACxifCnS\",\"AasGs8AeX9Lcb9xJn\",\"mHT2bJb5SByfJ8yKS\",\"hr3kdJKthGFr5jRQB\",\"rJQitgihW44ti6Y5Y\",\"pTdL7WGXWPr6zvXAX\",\"xsDyJstYoBZRS8pJH\",\"dP6Hqxfg3BYQ7xwYz\",\"cRpaCxYRmGcN3Nsoj\",\"PNGoni4SgDhkiqFq4\",\"dPM2Rk2iMkznyXNEt\",\"Y9Nz9yafaibz54W4o\",\"bXw5z9Mw4MS6npu3K\",\"2cMec4mEskMiGgfhh\",\"YER6iBcpJCuhgrYDN\",\"Df7GtT2JwMxJGASvW\",\"FJsvM5yqKuK9yMk9P\",\"8tEikq8QhumvnbHXK\",\"QYmRgAbSBX4bi6DNY\",\"qJZsi5rhRnWA38FbA\",\"wfNHE2WDiRFQiyb9k\",\"h4MRqm88urfevv3Y7\",\"cyiikjQh3y8coW4t4\",\"mMrajmhrTWdkyLk8E\",\"yRskNPuxXZfwixGuw\",\"FhdrvkBXzQZxsJYNL\",\"5NGxHLcQ8Af2RJ4TN\",\"yQtGE2egvwYnNQSFc\",\"2NJuDfSqdrF8kHHni\",\"wo4cpen33NYFHNca7\",\"FKygx25WhPWku46T2\",\"FCX3STMvP2JfQLdbN\",\"2innwjWqxJHo4eRGh\",\"JGBCMpnbbi5ztuFoX\",\"eFjGhq7C7bBKXjT6X\",\"SxqAEMaYcE9Ps9eh6\",\"KcpfY4XZ7fNamyLd3\",\"qAmNEGSdXs73cytHT\",\"hbjAs4qr5Cb22qDai\",\"yuLxi2qBJvMnwgdgJ\",\"zvYa5b9wsiMYJZ2yS\",\"FHSoQpNx3nc5RT82t\",\"Xk2g4CNFAnYcvxiSr\",\"GZGvYkdHBssXCdrae\",\"MqNQMijb6ckT2gXQf\",\"2d6fufcQy4F3awkF3\",\"p2woPCQKXuWJCwffJ\",\"Kc3SDafimwpZWrATJ\",\"Cm4JrWudbgMB85Axn\",\"a777e8chPvJkY3tKa\",\"iHaSQP2bhfL7ByBJB\",\"oChrXdrYeYenBTKks\",\"kjHKdTBzc77g63Y6P\",\"3AZvaNxeQaYaxbDPm\",\"QMq9dcvgpyNK6RAze\",\"aEm3Wvj2rFYRL8Lrb\",\"kp2ZbCewZJAbfd7xv\",\"rC7kdm3SsSX9udEQk\",\"xn7uGNKeAwPEkP9oA\",\"4Xv87xmdSnpYhi8hz\",\"hf4j58METWajduNSE\",\"r7mZLgpQWzRiGddL5\",\"bXaGdBM8FBLHf7N6Y\",\"YLTZRjM78Wi9J9Re4\",\"nphNJCcuiQKh8bNHq\",\"vGKxRcDYDsXzTQuEQ\",\"gt72ofBStqvphGX6j\",\"RKKuw76K7sRBMouKq\",\"z8R4K9Cd7PNuh256A\",\"iyNqxcRq2za3p2D2c\",\"QRv96jmNaYsWkxQEG\",\"M4vq8ATaS9Jg5X7iP\",\"sNcDN3s3rH9wcNg5n\",\"8BJyXvRWcrvN3nttS\",\"DPi9QGLctq2y76KuE\",\"oDtGiNqDMHmhHE3J8\",\"hBxceyRZcFodNGC6r\",\"aAMkoofS9nvsPu2rv\",\"RE4Mm9T6Q9uygAxGS\"],\"quality\":[5,5,5,5,5,5,5,4,5,4]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.8,\"family\":[{\"_id\":\"g2QxB5HCE9hN3PS75\",\"language\":\"javascript\"},{\"_id\":\"2hk7hFz6haBahtnof\",\"language\":\"python3\"},{\"_id\":\"4FxgBApJsTJjE9BNZ\",\"language\":\"ruby\"}]}}"]