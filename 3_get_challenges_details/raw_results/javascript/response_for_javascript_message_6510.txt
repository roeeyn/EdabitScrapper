a["{\"msg\":\"result\",\"id\":\"2000\",\"result\":{\"_id\":\"oAv74xPhmMNZvEfHK\",\"author\":\"er0s\",\"authorId\":\"5Zq3aGdvh4LHBvnJL\",\"code\":\"function getQuartiles(arr, method) {\\n\\t\\n}\",\"difficulty\":2.8125,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"PeZpbGbhTqqcyXRLk\",\"instructions\":\"In statistic a quartile is a type of *quantile*, more specifically is any of the three values (q1, q2 or q3) that divide the items of a sorted frequency distribution (that starts at *q0* with the lowest value and ends at *q4* with the highest value) into four classes with each containing one fourth of the total population.\\n\\nThere are three main methods used for calculate the quartiles of a dataset: **Tukey** (*abbr.* **T**), **Moore & McCabe** (*abbr.* **MM**) and **Mendenhall & Sincich** (*abbr.* **MS**). (see ***Resources*** tab for more informations about quartiles and other calculation methods).\\n\\n- As already said, in a dataset **q0 is the lowest value** and **q4 is the highest value**.\\n- All methods share one common statement: **q2 is equal to the median of the set.**\\n- Using T or MM you split the dataset in two parts:\\n  - If dataset has an odd  population **T includes the median** appending it at the end of the lower half and at the beginning of the upper half, while **MM excludes the median** from both parts.\\n  - If dataset has an even population is splitted in two equal parts by both methods.\\n  - With the dataset split in two **q1 is equal to the median of the lower half** and **q3 is equal to the median of the upper half**.\\n\\n- Using MS you don't split the dataset:\\n  -   **q1 is equal to the nth term of the dataset** with n equal to `(population length + 1) / 4`, _rounded to the nearest integer_, unless the decimal part is equal to `0.5`, in that case it should be _rounded **up** to the nearest integer_.\\n  -   **q3 is equal to the nth term of the dataset** with n equal to `3 * (population length + 1) / 4`  _rounded to the nearest integer_, unless the decimal part is equal to `0.5`, in that case it should be _rounded **down** to the nearest integer_.\\n\\nGiven an array of values and a string with one of the three possible methods (\\\"T\\\", \\\"MM\\\" or \\\"MS\\\") return an array in the form `[q0, q1, q2, q3, q4]`.\\n\\n### Examples\\n```\\ngetQuartiles([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], \\\"T\\\") ➞ [1, 3.5, 6, 8.5, 11]\\n// T includes the median (q2 = 6) in lower half (1 to 6, q1 = mean of 3+4)\\n// and in upper half (6 to 11, q3 = mean of 8+9).\\n\\ngetQuartiles([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], \\\"MM\\\") ➞ [1, 3, 6, 9, 11]\\n// MM excludes the median in lower half (1 to 5, q1 = 3) and in upper\\n// half (7 to 11, q3 = 9).\\n\\ngetQuartiles([1, 2, 3, 4, 5, 6, 7, 8, 9] ➞ [1, 3, 5, 7, 9]\\n// With MS q1 = population + 1 = 11 / 4 = 2.75 rounded up to 3 = third\\n// number of dataset, and q2 = population + 1 = 11 * 3 = 33 / 4 = 8.25\\n// rounded down to 8 = eighth number of dataset.\\n```\\n\\n### Notes\\n- Try [this challenge](https://edabit.com/challenge/36cEmt2BiGTtZ9SDx) if you need to get familiar with medians.\\n- The dataset has to be sorted in ascending order.\\n- Values can be either positive or negative integers.\\n- All given arrays are valid, no exceptions to handle.\",\"lab\":\"Test.assertSimilar(getQuartiles([4, 1, 7, 8, 3, 6, 5, 2], \\\"T\\\"), [1, 2.5, 4.5, 6.5, 8])\\nTest.assertSimilar(getQuartiles([4, 1, 7, 8, 3, 6, 5, 2], \\\"MS\\\"), [1, 2, 4.5, 7, 8])\\nTest.assertSimilar(getQuartiles([2, 6, 1, 8, 5, 9, 7, 4, 3], \\\"MM\\\"), [1, 2.5, 5, 7.5, 9])\\nTest.assertSimilar(getQuartiles([2, 6, 1, 8, 5, 9, 7, 4, 3], \\\"MS\\\"), [1, 3, 5, 7, 9])\\nTest.assertSimilar(getQuartiles([10, 3, 1, 8, 6, 4, 7, 5, 2, 9], \\\"T\\\"), [1, 3, 5.5, 8, 10])\\nTest.assertSimilar(getQuartiles([10, 3, 1, 8, 6, 4, 7, 5, 2, 9], \\\"MM\\\"), [1, 3, 5.5, 8, 10])\\nTest.assertSimilar(getQuartiles([10, 3, 1, 8, 6, 4, 7, 5, 2, 9], \\\"MS\\\"), [1, 3, 5.5, 8, 10])\\nTest.assertSimilar(getQuartiles([3, 9, 11, 2, 4, 1, 8, 6, 10, 5, 7], \\\"T\\\"), [1, 3.5, 6, 8.5, 11])\\nTest.assertSimilar(getQuartiles([3, 9, 11, 2, 4, 1, 8, 6, 10, 5, 7], \\\"MM\\\"), [1, 3, 6, 9, 11])\\nTest.assertSimilar(getQuartiles([41, 33, 10, 26, 52, 77, 20, 39, 33, 33], \\\"T\\\"), [10, 26, 33, 41, 77])\\nTest.assertSimilar(getQuartiles([-4, -25, -33, 12, 37, 12], \\\"MM\\\"), [-33, -25, 4, 12, 37])\\nTest.assertSimilar(getQuartiles([-121, 8, -3, 12, 412, -66], \\\"MS\\\"), [-121, -66, 2.5, 12, 412])\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,3,4,3,4,4,0,3,4,2,4,4],\"rators\":[\"5Zq3aGdvh4LHBvnJL\",\"yjtdwc2AC4jA2RWtn\",\"65dbBZynphj53nXqA\",\"n5wubRfh6zh8QRymN\",\"eQdnBfe8riy82SNrK\",\"3WtXius4r7RMTTyyp\",\"cRpaCxYRmGcN3Nsoj\",\"u5d63NujAhP97RXex\",\"aEm3Wvj2rFYRL8Lrb\",\"CNc6rmwhbxkxEhHAp\",\"s678Wirfor5uYL5T6\"],\"total\":12,\"quality\":[]},\"flags\":0},\"subscribers\":[\"5Zq3aGdvh4LHBvnJL\"],\"summary\":\"In statistic a quartile is a type of quantile, more specifically is any of the three values (q1, q2 or q3) that divide the items of a sorted frequency distribution (that starts at q0 with the lowest value and ends at q4 with the highest value) into four classes with each containing one fourth of the total population.\\n\\nThere are three main methods used for calc\",\"tags\":[\"math\",\"numbers\",\"arrays\"],\"timestamp\":{\"$date\":1568649744745},\"title\":\"Calculate the Quartiles\",\"isHidden\":false,\"quality\":0,\"family\":[{\"_id\":\"5eetzWsQCMPe3asxH\",\"language\":\"cpp\"},{\"_id\":\"oAv74xPhmMNZvEfHK\",\"language\":\"javascript\"},{\"_id\":\"35oc64XJBuysTs2h9\",\"language\":\"python3\"},{\"_id\":\"ztAm8D38oYFJzbKdj\",\"language\":\"ruby\"}]}}"]