a["{\"msg\":\"result\",\"id\":\"590\",\"result\":{\"_id\":\"hcXPiNgjXDhs8mGmq\",\"author\":\"Mubashir Hassan \",\"authorId\":\"T6iBEE2jp7f7iEF2P\",\"code\":\"function simpleEncoder(str) {\\n\\t\\n}\",\"difficulty\":1.4157303370786516,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"RzKtmDnxSn6zYH9oz\",\"instructions\":\"Create a function that takes a string `str` and performs simple encoding as per the following method:\\n\\n- Replace all single occurrence characters with `[`\\n- Replace all characters with **two or more** occurrences with `]`\\n\\nReturn the final string after modification.\\n\\n### Examples\\n```\\nsimpleEncoder(\\\"Mubashir\\\") ➞ \\\"[[[[[[[[\\\"\\n// '[' for each character\\n\\nsimpleEncoder(\\\"Matt\\\") ➞ \\\"[[]]\\\"\\n// ']' for both 't'\\n\\nsimpleEncoder(\\\"eD  aBiT\\\") ➞ \\\"[[]][[[[\\\"\\n// Two spaces in between\\n```\\n\\n### Notes\\n- Strings can contain lower and uppercase letters. Treat them equally (i.e. A = a, B = b).\\n- Spaces are also characters.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assertEquals(simpleEncoder(\\\"Mubashir\\\"), \\\"[[[[[[[[\\\")\\nTest.assertEquals(simpleEncoder(\\\"Matt\\\"), \\\"[[]]\\\")\\nTest.assertEquals(simpleEncoder(\\\"Mu ba sh ir Ha ss an\\\"), \\\"[[][]]]]][[]]]]]]]][\\\")\\nTest.assertEquals(simpleEncoder(\\\"HelEn\\\"), \\\"[][][\\\")\\nTest.assertEquals(simpleEncoder(\\\"Air  force\\\"), \\\"[[]]][[][[\\\")\\nTest.assertEquals(simpleEncoder(\\\"Pakistan\\\"), \\\"[][[[[][\\\")\\nTest.assertEquals(simpleEncoder(\\\"eD  aBiT\\\"), \\\"[[]][[[[\\\")\\nTest.assertEquals(simpleEncoder(\\\"Success\\\"), \\\"][]][]]\\\")\\nTest.assertEquals(simpleEncoder(\\\"iiiiii\\\"), \\\"]]]]]]\\\")\\n// Mubashir\",\"language\":\"javascript\",\"quality\":4.833333333333333,\"stats\":{\"completed\":{\"ratings\":[0,0,0,0,0,1,1,1,0,2,2,2,1,0,2,0,2,0,1,1,2,1,2,0,0,1,2,1,0,0,0,2,1,0,1,1,0,1,0,0,0,1,0,2,2,2,0,2,2,0,1,2,1,2,1,2,1,2,1,2,2,1,2,1,1,2,2,1,2,2,2,3,3,2,1,2,1,1,2,2,2,0,2,2,1,1,2,0,2,0,0,1,1,1,1,2,1,1,0,1,2,2,2,1,1,1,1,0,2,2,2,2,2,1,0,1,1,2,2,2,1,0,2,2,0,3,2,1,2,2,2,1,2,2,2,2,3,1,2,3,1,2,2,2,3,2,2,2,2,2,3,1,2,1,2,2,3,2,3,2,3,1,2,2,2,2,2,1,1,2,2,2,2,2,1,2,2,3],\"quality\":[5,5,5,5,5,5,5,5,5,4,5,5,5,5,5,5,3,5],\"rators\":[\"T6iBEE2jp7f7iEF2P\",\"QGjY3hgPYPMmMjc7j\",\"QRv96jmNaYsWkxQEG\",\"g4NCSxxHqHCGMpWwT\",\"AQSqhiQtcws6dp9HF\",\"8BJyXvRWcrvN3nttS\",\"u9cRf5kvtpRB5ffB3\",\"RtPhDuwmvWNHiBxmG\",\"Yp7uvStL97cC9fKkY\",\"mHT2bJb5SByfJ8yKS\",\"65dbBZynphj53nXqA\",\"J7d397iB5GuWRAMfg\",\"srJ34BaybkQh3qRkM\",\"yjtdwc2AC4jA2RWtn\",\"RE4Mm9T6Q9uygAxGS\",\"WfP3R9mTtHn2JjuX4\",\"CNc6rmwhbxkxEhHAp\",\"ApqWTmEEkTCsDou48\",\"buX4mCQhtXCfBjeno\",\"AFfw7cGg83uYk2Miy\",\"z5ebtimXwFFJdYxoa\",\"3WtHp4MBzciz4AE8M\",\"qFJpEDM2Ep6v4tqPz\",\"hNEhHd8qodq4P3h2g\",\"7gZKfvwaeqsGKXMEN\",\"8EJ4j2fcfjTJ7Zrzu\",\"6BpBQnSGhzgvhXrEy\",\"SNiJRRosrmSWssLj4\",\"evTTY9hwrtogaNxXn\",\"jyCByAZwu576xDwEL\",\"7q8oBsCHwn48Ppnrq\",\"K45zPJxsABuA3WSyj\",\"jnyub52Fi79drGvow\",\"pdGuqmMyeN4wZaWwv\",\"Ya3eHgs8x3unZRLpb\",\"dQd664XYR6QKHFvHW\",\"aLKHc5k4sM3GijhmE\",\"vGKxRcDYDsXzTQuEQ\",\"zw7g7T8wE5R5CBhXr\",\"tAF9Gf6PiGogbZuWs\",\"2Qk2mFu9HBFzrB24i\",\"XrqNzJ2FRG8HnGiR6\",\"zNN2fW2pJGpTxBgzx\",\"RQwuHHy4rBgaQCLte\",\"rbPEA2TFQw837Hmqg\",\"mpLFbFKjY6u3nsDMv\",\"9qoWqLcHGiDX429rE\",\"733qgZ7ZSSSrzbXGw\",\"e9Cknxbx6o7Nb6REs\",\"FGEeCTorXbX3WvjFW\",\"KypQdzThzogKXwkXE\",\"M4vq8ATaS9Jg5X7iP\",\"zd9FLSzsGz3evKafy\",\"w8geFfsnhEfLPjBCq\",\"AasGs8AeX9Lcb9xJn\",\"gFEpzrgWhzCZHeifj\",\"QguFWo84zgF3c8BGr\",\"aWNggJDngk9DhC4Sg\",\"9HZbxzkzgz4CvePtv\",\"5nhmyqLy8M2Yn2HMR\",\"JW5J6sdJHAmDmfWnE\",\"jyoLggHk8xQKZuoQC\",\"pi76g3eRpnKrhee2a\",\"BdnE4RS5puoxo92mA\",\"HCfkcKnPs9mrJojdG\",\"4fjSgcqhQQZM2ZFRP\",\"j5FSQCayX3By73CCw\",\"bfYmA3LMvhSrK59cn\",\"7wtuhPesfhcYsfZaZ\",\"oyB4Wr4EeZnoDaa8B\",\"vmad5Pz6mu3CRt22J\",\"34bE6mric984YYLZQ\",\"e5Wi4TC6XST7Gqthj\",\"26wiPFKguwyuY9Fpi\",\"zMDgQ2ypkmcMdbmWN\",\"3KA3AjE87dRCW4ZHb\",\"u9sJZNbXzfFrq6asP\",\"aWCg5tWK6xWrEE3Qm\",\"7NDvfmjGLKYeHiAwx\",\"R3d7uwuc4ZHENDyhx\",\"ipQacnKbyAx55bkAf\",\"zvBD6Puy5YFd8HuMA\",\"SCY9Qyb83vz8ePBrZ\",\"iugrSwT5ja7bmF3qj\",\"Ri3eK3JmeNFM3CdLt\",\"J7FY9pPsauuiRhX8c\",\"k8rMJnaejG3dX4ute\",\"rPsSEYqwmttMPEuvo\",\"76rZ57Yc5w8KcuR4S\",\"QHiEYtz3tX3s9nETo\",\"9XnGoq9Tv6ut3zTtH\",\"GxZfoXiM868kdddC6\",\"sfj3i3eEAfZa3f9kg\",\"QAZ5DGaWWYhku4BNz\",\"aEm3Wvj2rFYRL8Lrb\",\"iQ7LDrEn8mtYTCAfC\",\"KQNRec88MkMcPeCYK\",\"H3yM3F3mukfdq9fit\",\"hCfruGWxw7v64teEr\",\"8PWe4RLFk3MRvbn68\",\"d8JhF9zfpexkRnCea\",\"h9CbFMHNNw7PTDQbt\",\"WpNHMgfjZE8aNN2MP\",\"XujK3rHd3JcM9TLJy\",\"Rrb84KWhN5tjhMGMA\",\"eE6p5gaENokRKMTao\",\"BBHKgNQBKjnzoGsew\",\"HpfaNWBYpnsQRAPQn\",\"o9Bj4dXiHwtDMTcLc\",\"netfXkzkQT7XEgpNP\",\"PTo9qt93YqGvL8fCa\",\"eQXwk5zGckM8tCWYH\",\"Y7xPTPKpNAEiM2jkH\",\"8BFSTCnoe2QggN64c\",\"gjQR6MyWjSE2cDvDk\",\"DCbBp3YgpefPrERvp\",\"STipuJs6kBvPqqsSE\",\"fBpbZBqvckHuXeazy\",\"oS8RbMKnP2RQyKh2A\",\"QnPD4Sv6W4LHc2Qng\",\"sN2JyFeJCwfwwHPwF\",\"jkkKzNT77bMStXhpW\",\"9qJwfSnwqzDYYRqTP\",\"pPpmP7xeJzGgK362R\",\"xhrJ9BGQFaMJCEG6F\",\"szQg8dxKNNre3v3Jk\",\"PC3pLs36zNzpRDSuE\",\"v2w9GN4jHP2fgYdeE\",\"JnYehNpm7BvefLuee\",\"Q7Yxda7dqKeYPs2Db\",\"av9mr7kgAqkCqv2D2\",\"DyunorHmNEeBgSGqs\",\"MaHyKMEDdtLMQeJ4b\",\"LPZ2QKCoB8q6rG25c\",\"eANW47mfA359Y6JyP\",\"LCn6qz2GoMr5577Rd\",\"DPi9QGLctq2y76KuE\",\"CHvzhtXnv8HTbPQ56\",\"sW5jMhqofmo3kFBou\",\"d6w7S49nhKzCTWLp6\",\"vic9SZ9qqj9WhRkbd\",\"mdv6r687hYHFziB89\",\"9gyJr8fFp83MEP3bN\",\"GGprTwrkjuccmrQRg\",\"X2qPMHbxS79hMfBf8\",\"qDWrxxa4McMWdYgFD\",\"D9hyhxyEdQxDvgcuK\",\"tMnRsjv3LysqZBrHZ\",\"mHyH4qKKkcrccdhD7\",\"dQoeRxSkKb7htBqhw\",\"gf4xrfguK6KiEF9yi\",\"P7xsjYRQHsxTuu2eD\",\"h74QG3k7RmXCGvWf9\",\"dSd7wHgXGQeG5BQ2P\",\"u8nSMMF2mExwrA7k9\",\"9iASbYtBJTpQvC7ba\",\"hGjTqWnbrBGFYfpW7\",\"wAxAAoYJKH3xKAtwJ\",\"inbiBEY2tizFwkN84\",\"Rxaabe6uQ4gZwJQxZ\",\"4WYjScmBWK9eXRzvd\",\"uxKGACwmZ6FNZsMwE\",\"dqvuSRRFqodNPNLjg\",\"QyqHXv7sZWz4dJrgt\",\"GB3NHPPMge2CshbY6\",\"gcn939WNtHannCqkZ\",\"9LHJx3mEvsqoRecYw\",\"FchzDbqCN4nAyr5D6\",\"LwD3CyYSiBfg3mA4r\",\"DhfJPSiAYrK9hWLxQ\",\"RoGGD5cpHb4ftdLDv\",\"ia7erHrHPvCpHP5Gp\",\"nC4sPB69yYuTSks9T\",\"8JJHJfbYpxvDiPpBn\",\"qAEumdjLRx2AGAmzw\",\"zgoq9MhrL2h75DAMA\",\"psdbt2PkjPv4qTwtr\",\"8s5Bdrn7RTga7DL6x\",\"c3iasS7TCyE2tQLpH\",\"Wmpd7mDp6F2utoqFh\",\"4wR64Jaibcom7tbYf\",\"9ix7NBMXyb2bxrTYG\",\"Fk47SQxbHEJRw4u76\",\"E6DBfkTgHuPsDWdG8\",\"sNcDN3s3rH9wcNg5n\",\"YfHnTYr4sD69ZACS2\",\"ThaiAKWWDw2W4QfJh\",\"sgjcbfroKXPSSDob8\",\"7JCLyrrY6JYGpocac\",\"NJuBx55XXbaAjaiwX\",\"qNAx3g5vaJXc6Edvp\"],\"total\":202},\"flags\":0},\"summary\":\"Create a function that takes a string str and performs simple encoding as per the following method:\\n\\nReplace all single occurrence characters with [\\nReplace all characters with two or more occurrences with ]\\n\\nReturn the final string after modification.\\n\\nExamples\\nsimpleEncoder(\\\"Mubashir\\\") ➞ \\\"[[[[[[[[\\\"\\n// '[' for each character\\n\\nsimpleEncoder(\\\"Matt\\\") ➞ \\\"[[]]\\\"\\n//\",\"tags\":[\"cryptography\",\"arrays\",\"strings\",\"language_fundamentals\"],\"timestamp\":{\"$date\":1610794941639},\"title\":\"Simple Encoder\",\"family\":[{\"_id\":\"tPE5FvBoum9N6r2hS\",\"language\":\"cpp\"},{\"_id\":\"hcXPiNgjXDhs8mGmq\",\"language\":\"javascript\"},{\"_id\":\"5pBHzWb8Psot9EQNk\",\"language\":\"python3\"},{\"_id\":\"2DFN2eEJuruQD2KoC\",\"language\":\"ruby\"}]}}"]