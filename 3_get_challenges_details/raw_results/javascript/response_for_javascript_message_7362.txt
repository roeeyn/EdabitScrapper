a["{\"msg\":\"result\",\"id\":\"2421\",\"result\":{\"_id\":\"sF9a4Dkh5yiWtbJd6\",\"author\":\"DanielosC\",\"authorId\":\"vn6nR36mdfY8z2zKx\",\"code\":\"const isAdditive = n => {\\n\\t\\n}\",\"difficulty\":4.6875,\"editorId\":\"vn6nR36mdfY8z2zKx\",\"familyId\":\"NuCdJaLB2ERWzdY6y\",\"instructions\":\"Write a function that checks if a given string contains an **additive sequence** or not. A string contains an additive sequence if its digits can make a sequence of numbers in which every number is the sum of  the previous two numbers. A valid additive sequence should contain at least three numbers.\\n\\n### Examples\\n```\\nisAdditive(\\\"112358\\\") ➞ true\\n// The digits can form an additive sequence: 1, 1, 2, 3, 5, 8. \\n// 1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8\\n\\nisAdditive(\\\"129881000\\\") ➞ true\\n// Each number can contain 1 or more digits: 12, 988, 1000.\\n// 12 + 988 = 1000\\n\\nisAdditive(\\\"12988110101891\\\") ➞ true\\n// 129 + 881 = 1010, 881 + 1010 = 1891\\n\\nisAdditive(\\\"123456789\\\") ➞ false\\n\\nisAdditive(\\\"300045007500\\\") ➞ true\\n```\\n\\n### Notes\\n- The string will contain only digits `0 ➞ 9`\\n- Numbers in the additive sequence **cannot** have leading zeros, so sequence `1, 2, 03` or `1, 02, 3` is invalid.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assertEquals(isAdditive('112358'), true)\\nTest.assertEquals(isAdditive('129881000'), true)\\nTest.assertEquals(isAdditive('12988110101891'), true)\\nTest.assertEquals(isAdditive('123456789'), false)\\nTest.assertEquals(isAdditive('123'), true)\\nTest.assertEquals(isAdditive('10112132'), true)\\nTest.assertEquals(isAdditive('5566121186'), false)\\nTest.assertEquals(isAdditive('5566121188'), false)\\nTest.assertEquals(isAdditive('5566121187'), true)\\nTest.assertEquals(isAdditive('1000150025004000'), true)\\nTest.assertEquals(isAdditive('10001501150'), true)\\nTest.assertEquals(isAdditive('10001500250'), false)\\nTest.assertEquals(isAdditive('4812203243'), false)\\nTest.assertEquals(isAdditive('1758998571116160'), true)\\nTest.assertEquals(isAdditive('1894587012189458703189458705378917408'), true)\\nTest.assertEquals(isAdditive('1000100010100010001010101010'), true)\\nTest.assertEquals(isAdditive('189458701218945873189458705378917408'), false)\\nTest.assertEquals(isAdditive('10001000101000100010010101010'), false)\\nTest.assertEquals(isAdditive('991819919'), true)\\nTest.assertEquals(isAdditive('99182746'), false)\\nTest.assertEquals(isAdditive('58013'), false)\\nTest.assertEquals(isAdditive('0369'), false, \\\"Starts with '0'\\\")\\nTest.assertEquals(isAdditive('34'), false, \\\"Too short\\\")\\nTest.assertEquals(isAdditive(''), false)\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,4,5,4,3,5,5,5,5,4,5,5],\"rators\":[\"yjtdwc2AC4jA2RWtn\",\"vn6nR36mdfY8z2zKx\",\"cRpaCxYRmGcN3Nsoj\",\"aEm3Wvj2rFYRL8Lrb\",\"tAF9Gf6PiGogbZuWs\",\"mHT2bJb5SByfJ8yKS\",\"LojZZnLB8pD8d9JkA\",\"xsDyJstYoBZRS8pJH\",\"va3fDAQm4sqSMoy3R\",\"nr7jKeHEE3TC9oyp4\",\"mDWNyaaQ9hvPCRzSd\"],\"total\":13,\"quality\":[]},\"flags\":0},\"summary\":\"Write a function that checks if a given string contains an additive sequence or not. A string contains an additive sequence if its digits can make a sequence of numbers in which every number is the sum of  the previous two numbers. A valid additive sequence should contain at least three numbers.\\n\\nExamples\\nisAdditive(\\\"112358\\\") ➞ true\\n// The digits can form an a\",\"tags\":[\"algebra\",\"algorithms\",\"math\",\"numbers\",\"validation\"],\"timestamp\":{\"$date\":1592640108922},\"title\":\"Additive Number\",\"quality\":0,\"family\":[{\"_id\":\"m4tEei3DxgME4xuvK\",\"language\":\"cpp\"},{\"_id\":\"sF9a4Dkh5yiWtbJd6\",\"language\":\"javascript\"},{\"_id\":\"F4dSNMqPCa2QztPWw\",\"language\":\"python3\"},{\"_id\":\"ZpdEWoFNTr5bEXuCQ\",\"language\":\"ruby\"}]}}"]