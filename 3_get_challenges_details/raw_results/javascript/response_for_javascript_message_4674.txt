a["{\"msg\":\"result\",\"id\":\"1090\",\"result\":{\"_id\":\"GwdGioqhZGdGRD2FJ\",\"author\":\"er0s\",\"authorId\":\"5Zq3aGdvh4LHBvnJL\",\"code\":\"function getDiagonals(arr) {\\n\\t\\n}\",\"difficulty\":1.7542372881355932,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"2nPeK9BKQC3EocFrw\",\"instructions\":\"Given a square array (_n_\\\\*_n_ size) implement a function that returns a new array containing two arrays equal to the two diagonals, in the following order:\\n\\n```\\ndiagonal 1 = from upper-left to lower-right corner\\ndiagonal 2 = from upper-right to lower-left corner\\n```\\n\\n### Examples\\n```\\ngetDiagonals([ [1, 2], [3, 4] ]) ➞ [ [1, 4], [2, 3] ]\\n\\ngetDiagonals([ [\\\"a\\\", \\\"b\\\", \\\"c\\\"], [\\\"d\\\", \\\"e\\\", \\\"f\\\"], [\\\"g\\\", \\\"h\\\", \\\"i\\\"] ]) ➞ [ [\\\"a\\\", \\\"e\\\", \\\"i\\\"], [\\\"c\\\", \\\"e\\\", \\\"g\\\"] ]\\n\\ngetDiagonals([ [true] ]) ➞ [ [true], [true] ]\\n```\\n\\n### Notes\\n- Your function must also work with single elements or empty arrays.\\n- Try to build both diagonals with a single loop.\",\"lab\":\"Test.assertSimilar(getDiagonals([\\n\\t[1, 2, 3],\\n\\t[4, 5, 6],\\n\\t[7, 8, 9]\\n]), [\\n\\t[1, 5, 9], \\n\\t[3, 5, 7]\\n])\\n\\nTest.assertSimilar(getDiagonals([\\n\\t[\\\"e\\\", \\\"z\\\", \\\"y\\\", \\\"o\\\", \\\"p\\\", \\\"t\\\"],\\n\\t[\\\"b\\\", \\\"d\\\", \\\"a\\\", \\\"t\\\", \\\"i\\\", \\\"w\\\"],\\n\\t[\\\"u\\\", \\\"l\\\", \\\"a\\\", \\\"n\\\", \\\"s\\\", \\\"k\\\"],\\n\\t[\\\"s\\\", \\\"v\\\", \\\"k\\\", \\\"b\\\", \\\"r\\\", \\\"z\\\"],\\n\\t[\\\"h\\\", \\\"e\\\", \\\"w\\\", \\\"c\\\", \\\"i\\\", \\\"j\\\"],\\n\\t[\\\"r\\\", \\\"p\\\", \\\"y\\\", \\\"d\\\", \\\"x\\\", \\\"t\\\"]\\n]), [\\n\\t[\\\"e\\\", \\\"d\\\", \\\"a\\\", \\\"b\\\", \\\"i\\\", \\\"t\\\"], \\n\\t[\\\"t\\\", \\\"i\\\", \\\"n\\\", \\\"k\\\", \\\"e\\\", \\\"r\\\"]\\n])\\n\\nTest.assertSimilar(getDiagonals([\\n\\t[true, false, true, false],\\n\\t[false, true, false, true],\\n\\t[true, false, true, false],\\n\\t[false, false, false, true]\\n]), [\\n\\t[true, true, true, true], \\n\\t[false, false, false, false]\\n])\\n\\nTest.assertSimilar(getDiagonals([\\n\\t[0, 1, 1, 0, 1, 1, 1, 0, 1, 0],\\n\\t[0, 0, 1, 0, 0, 1, 0, 1, 1, 1],\\n\\t[0, 0, 0, 0, 1, 1, 1, 1, 0, 0],\\n\\t[1, 0, 1, 1, 1, 0, 0, 1, 0, 1],\\n\\t[1, 0, 0, 1, 0, 0, 1, 1, 0, 0],\\n\\t[0, 0, 1, 0, 1, 0, 0, 1, 1, 1],\\n\\t[1, 1, 1, 1, 0, 1, 0, 0, 0, 1],\\n\\t[0, 0, 1, 1, 0, 1, 1, 0, 0, 0],\\n\\t[0, 1, 1, 1, 0, 1, 1, 1, 0, 0],\\n\\t[1, 0, 0, 0, 1, 1, 1, 1, 1, 1]\\n]), [\\n\\t[0, 0, 0, 1, 0, 0, 0, 0, 0, 1], \\n\\t[0, 1, 1, 0, 0, 1, 1, 1, 1, 1]\\n])\\n\\nTest.assertSimilar(getDiagonals([[\\\"Trivial\\\"]]), [ [\\\"Trivial\\\"], [\\\"Trivial\\\"]])\\nTest.assertSimilar(getDiagonals([]), [ [], [] ])\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[1,1,1,1,1,1,1,1,2,3,2,1,2,1,1,3,2,2,2,0,0,0,2,2,1,2,2,2,2,2,2,1,2,2,2,0,1,3,2,2,1,2,2,2,2,2,0,1,2,1,2,4,2,0,2,2,4,2,2,2,2,2,1,1,0,2,1,2,1,2,1,3,1,2,2,2,3,2,2,2,3,2,2,2,2,2,2,0,2,2,2,3,1,0,2,3,2,0,3,2,1,2,2,1,2,2,2,2,2,3,2,2,5,2,1,3,2,2],\"rators\":[\"5Zq3aGdvh4LHBvnJL\",\"N7P4AnS8nzK4oupHv\",\"yjtdwc2AC4jA2RWtn\",\"AasGs8AeX9Lcb9xJn\",\"RE4Mm9T6Q9uygAxGS\",\"EWn8w8P3nNh7knatY\",\"tPtz279rzBX8kCWMr\",\"3awyiorYPgCqqP7Sr\",\"6gPHMpkEP8JuHxzpd\",\"aPX8qCXL6TmfpRfgy\",\"NPgpEtw6Ly8LToLco\",\"zgoq9MhrL2h75DAMA\",\"Akq3fQcPRgPrWfsye\",\"XKi8iZXBCHCaebSHh\",\"h4jFmtbFn92eA4649\",\"zw7g7T8wE5R5CBhXr\",\"SDtZFL5NzAoCPofXk\",\"xs9AMSZsmo2Crk9aa\",\"EAuL56kpyLytw4RcR\",\"SfdDzsZSwmLudopjk\",\"GhSndzfibXRe8oKTB\",\"65dbBZynphj53nXqA\",\"zTZtM9jRsu8eXie6s\",\"FJsvM5yqKuK9yMk9P\",\"Y7xPTPKpNAEiM2jkH\",\"CJnuSjyCBMTbTiibD\",\"Q9KQomTTPBsrkAL6c\",\"sbme4fRJjjBjYXRbY\",\"7Nz3GAqN3SMgSiyTT\",\"EjPLq3QSJdGQFJdgW\",\"DHwbkbzYNpmkSFT7u\",\"tqAwv3dkCrt3c8T9v\",\"vKch2w3b4keMd84jj\",\"L9XxCiDxYJGcMQvxF\",\"2innwjWqxJHo4eRGh\",\"6BpBQnSGhzgvhXrEy\",\"mHT2bJb5SByfJ8yKS\",\"BGQqaYbqYqmTo5Ehs\",\"oFckF5bB5dGBQKneS\",\"2tCCFm5iefjrRSaxv\",\"z6QfbuG6TXE7GKynQ\",\"n5wubRfh6zh8QRymN\",\"gzTs5oFrfZwh3Kfze\",\"BdvdJYwHZr7JpkHsn\",\"8BFSTCnoe2QggN64c\",\"zd9FLSzsGz3evKafy\",\"mHaHudYExvi45DSRf\",\"ih2aGaqkMaagTgyL2\",\"9gEWz76H8KmhN4yJj\",\"bzm5WayBjwad5jhdR\",\"qWhHEo675G4mw8RFK\",\"g5noFWaoRtZNcEEAW\",\"5YCX58nhHT8oRCHyy\",\"DsFQazFAKZJ83RbtJ\",\"PytNZK9mNiRiZxPrm\",\"QnPD4Sv6W4LHc2Qng\",\"pi76g3eRpnKrhee2a\",\"k5TGxBtLi9BXxeChT\",\"YER6iBcpJCuhgrYDN\",\"cp3X8hk8yNME7qoD9\",\"bX6tpTCjwoi6XMMbK\",\"9XnGoq9Tv6ut3zTtH\",\"vtHbevf2tHqe6mRxX\",\"7JCLyrrY6JYGpocac\",\"RKmNjobxC8mXFMJCq\",\"ipiC2qPhKZWsAouJf\",\"2ZFoLTxcCARhwc8xX\",\"eQXwk5zGckM8tCWYH\",\"Nua6T3dBurBy3Qfg9\",\"RGN3QTb5LXj4ZPPkj\",\"z5ebtimXwFFJdYxoa\",\"Lzj3w7QjdzikynsGG\",\"eFjGhq7C7bBKXjT6X\",\"a777e8chPvJkY3tKa\",\"tAF9Gf6PiGogbZuWs\",\"Wv9v7fHb8umujfg2j\",\"ij9YRJvZz6WbqcGXS\",\"X67qAYJvDuBh3xzEf\",\"buX4mCQhtXCfBjeno\",\"8raviPK67KKxzQWcF\",\"2zKQWLmEBw8FBs4ZL\",\"pLpcDC3EYx2DDQSdt\",\"QRv96jmNaYsWkxQEG\",\"7gZKfvwaeqsGKXMEN\",\"r7mZLgpQWzRiGddL5\",\"nAmJEX7BkHLd9LsG2\",\"7wtuhPesfhcYsfZaZ\",\"aEm3Wvj2rFYRL8Lrb\",\"Po3v3dHCk6wYGKMwi\",\"mfYrBKwDr4hXSFuuN\",\"kp2ZbCewZJAbfd7xv\",\"Nb6LYPoQP6KJZt8mz\",\"q4athc6PwBbxfheCf\",\"PGCDJpQMN8Sjn9Gm6\",\"Ya3eHgs8x3unZRLpb\",\"CNc6rmwhbxkxEhHAp\",\"g4NCSxxHqHCGMpWwT\",\"qWR7eXxBiNee22A5u\",\"STipuJs6kBvPqqsSE\",\"vGKxRcDYDsXzTQuEQ\",\"u9cRf5kvtpRB5ffB3\",\"R9uaMzX2Y4ND8Cosm\",\"AFfw7cGg83uYk2Miy\",\"Yp7uvStL97cC9fKkY\",\"e9Cknxbx6o7Nb6REs\",\"3Gf7ikLijfoxabiPY\",\"cxKboRciPWPfPpv37\",\"2Qk2mFu9HBFzrB24i\",\"ApqWTmEEkTCsDou48\",\"M4vq8ATaS9Jg5X7iP\",\"npp5hesJrst6ghKSM\",\"wJTDDTE3TrmSXKP4d\",\"cgCQDs9i7yChKeAjE\",\"srJ34BaybkQh3qRkM\",\"NGvCPuMiAP3xrRLfB\",\"jbnxxXuAgzfQttoJA\",\"rpNNPWzdFCc9TzKMz\",\"oDtGiNqDMHmhHE3J8\",\"8BJyXvRWcrvN3nttS\",\"nBJve5CzG6WAw7WFQ\",\"gXTAie79kiw28tx5u\",\"jyoLggHk8xQKZuoQC\",\"mpLFbFKjY6u3nsDMv\",\"bfYmA3LMvhSrK59cn\",\"LwD3CyYSiBfg3mA4r\",\"LPZ2QKCoB8q6rG25c\",\"CH53jGETBeJTummf3\"],\"total\":133,\"quality\":[4,5,4,3,4,5,5,5,5,5,5,4,4,5]},\"flags\":0},\"subscribers\":[\"5Zq3aGdvh4LHBvnJL\"],\"summary\":\"Given a square array (n\\\\*n size) implement a function that returns a new array containing two arrays equal to the two diagonals, in the following order:\\n\\ndiagonal 1 = from upper-left to lower-right corner\\ndiagonal 2 = from upper-right to lower-left corner\\n\\nExamples\\ngetDiagonals([ [1, 2], [3, 4] ]) ➞ [ [1, 4], [2, 3] ]\\n\\ngetDiagonals([ [\\\"a\\\", \\\"b\\\", \\\"c\\\"], [\\\"d\\\", \\\"e\\\"\",\"tags\":[\"arrays\",\"loops\",\"language_fundamentals\"],\"timestamp\":{\"$date\":1571261030684},\"title\":\"Get the Diagonals\",\"isHidden\":false,\"quality\":4.5,\"family\":[{\"_id\":\"GwdGioqhZGdGRD2FJ\",\"language\":\"javascript\"},{\"_id\":\"LQgpGFMK9t9MELvph\",\"language\":\"python3\"},{\"_id\":\"JK3QkHgJyyAfpE2gM\",\"language\":\"ruby\"}]}}"]