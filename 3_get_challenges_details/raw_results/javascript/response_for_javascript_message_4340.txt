a["{\"msg\":\"result\",\"id\":\"925\",\"result\":{\"_id\":\"HpmC7qQpLeGqj6RCg\",\"author\":\"er0s\",\"authorId\":\"5Zq3aGdvh4LHBvnJL\",\"code\":\"function completeBinary(str) {\\n\\t\\n}\",\"difficulty\":1.6319444444444444,\"familyId\":\"f3jxz6A7Baa3oYWSP\",\"instructions\":\"Create a function which adds *zeros* to the **start** of a binary string, so that its length is a **multiple of 8**.\\n\\n### Examples\\n```\\ncompleteBinary(\\\"1100\\\") ➞ \\\"00001100\\\"\\n\\ncompleteBinary(\\\"1101100\\\") ➞ \\\"01101100\\\"\\n\\ncompleteBinary(\\\"110010100010\\\") ➞ \\\"0000110010100010\\\"\\n```\\n\\n### Notes\\nReturn the same string if its length is already a multiple of 8.\",\"isHidden\":false,\"lab\":\"Test.assertEquals(completeBinary(\\\"1100\\\"), \\\"00001100\\\")\\nTest.assertEquals(completeBinary(\\\"1101100\\\"), \\\"01101100\\\")\\nTest.assertEquals(completeBinary(\\\"110010100010\\\"), \\\"0000110010100010\\\")\\nTest.assertEquals(completeBinary(\\\"1001110001111011100101\\\"), \\\"001001110001111011100101\\\")\\nTest.assertEquals(completeBinary(\\\"111101100011001111100111010001001110010101011001000000001101100\\\"), \\\"0111101100011001111100111010001001110010101011001000000001101100\\\")\\nTest.assertEquals(completeBinary(\\\"1100110111000000010000110011001\\\"), \\\"01100110111000000010000110011001\\\")\\nTest.assertEquals(completeBinary(\\\"011001100101100100100001110101110\\\"), \\\"0000000011001100101100100100001110101110\\\")\\nTest.assertEquals(completeBinary(\\\"10000010100000011\\\"), \\\"000000010000010100000011\\\")\\nTest.assertEquals(completeBinary(\\\"0010100101011110000000101010010\\\"), \\\"00010100101011110000000101010010\\\")\\nTest.assertEquals(completeBinary(\\\"1111000010000101010011001110110000\\\"), \\\"0000001111000010000101010011001110110000\\\")\\nTest.assertEquals(completeBinary(\\\"100111110111011110101100\\\"), \\\"100111110111011110101100\\\")\\nTest.assertEquals(completeBinary(\\\"1111011011010101000001010001000011110000001100100001111110111110001100\\\"), \\\"001111011011010101000001010001000011110000001100100001111110111110001100\\\")\\nTest.assertEquals(completeBinary(\\\"000101011101010110000011100011000001001111001001000101111101011\\\"), \\\"0000101011101010110000011100011000001001111001001000101111101011\\\")\\nTest.assertEquals(completeBinary(\\\"01000000011101110001100011101111111011100110011\\\"), \\\"001000000011101110001100011101111111011100110011\\\")\\nTest.assertEquals(completeBinary(\\\"0001001100011100111101000111111011001001111100100000\\\"), \\\"00000001001100011100111101000111111011001001111100100000\\\")\\nTest.assertEquals(completeBinary(\\\"11011111000001001000\\\"), \\\"000011011111000001001000\\\")\\nTest.assertEquals(completeBinary(\\\"111011100010111000\\\"), \\\"000000111011100010111000\\\")\\nTest.assertEquals(completeBinary(\\\"11000011100111000001110100\\\"), \\\"00000011000011100111000001110100\\\")\\nTest.assertEquals(completeBinary(\\\"010001100100001110000001001000000001111111101010010111\\\"), \\\"00010001100100001110000001001000000001111111101010010111\\\")\\nTest.assertEquals(completeBinary(\\\"110101101100010110010000100100110110010010000000101000110101010101100\\\"), \\\"000110101101100010110010000100100110110010010000000101000110101010101100\\\")\\nTest.assertEquals(completeBinary(\\\"1010\\\"), \\\"00001010\\\")\\nTest.assertEquals(completeBinary(\\\"11010010010\\\"), \\\"0000011010010010\\\")\\nTest.assertEquals(completeBinary(\\\"1010010101001010011000110101101101100011100010111101110110\\\"), \\\"0000001010010101001010011000110101101101100011100010111101110110\\\")\\nTest.assertEquals(completeBinary(\\\"10011101001100001\\\"), \\\"000000010011101001100001\\\")\\nTest.assertEquals(completeBinary(\\\"1011001110011101010011101110001000010011011\\\"), \\\"000001011001110011101010011101110001000010011011\\\")\\nTest.assertEquals(completeBinary(\\\"111110101111100011010001111110100001101110101011001110111001\\\"), \\\"0000111110101111100011010001111110100001101110101011001110111001\\\")\\nTest.assertEquals(completeBinary(\\\"000100110001110011011111101101000110010101\\\"), \\\"000000000100110001110011011111101101000110010101\\\")\\nTest.assertEquals(completeBinary(\\\"01101000110000111100110001\\\"), \\\"00000001101000110000111100110001\\\")\\nTest.assertEquals(completeBinary(\\\"110011010\\\"), \\\"0000000110011010\\\")\\nTest.assertEquals(completeBinary(\\\"10100000100\\\"), \\\"0000010100000100\\\")\\nTest.assertEquals(completeBinary(\\\"01110110101101110000111000010100\\\"), \\\"01110110101101110000111000010100\\\")\\nTest.assertEquals(completeBinary(\\\"00111101101110001111010100011000011101111110110000001110\\\"), \\\"00111101101110001111010100011000011101111110110000001110\\\")\\nTest.assertEquals(completeBinary(\\\"1000101011011110110100001010000111100010001111110\\\"), \\\"00000001000101011011110110100001010000111100010001111110\\\")\\nTest.assertEquals(completeBinary(\\\"00110001001110111010111000100101011011100110101010\\\"), \\\"00000000110001001110111010111000100101011011100110101010\\\")\\nTest.assertEquals(completeBinary(\\\"11100110010001110111111000100000011011011110110\\\"), \\\"011100110010001110111111000100000011011011110110\\\")\\nTest.assertEquals(completeBinary(\\\"001111010010101111101001111100010110011001000011101011100101\\\"), \\\"0000001111010010101111101001111100010110011001000011101011100101\\\")\\nTest.assertEquals(completeBinary(\\\"00110001000110011100\\\"), \\\"000000110001000110011100\\\")\\nTest.assertEquals(completeBinary(\\\"10011101101011111101101010\\\"), \\\"00000010011101101011111101101010\\\")\\nTest.assertEquals(completeBinary(\\\"0110000001001010101100111101010100010010\\\"), \\\"0110000001001010101100111101010100010010\\\")\\nTest.assertEquals(completeBinary(\\\"01001111001110010001010111101000\\\"), \\\"01001111001110010001010111101000\\\")\\nTest.assertEquals(completeBinary(\\\"00111000010010110111001111011010001010000111010000011110111\\\"), \\\"0000000111000010010110111001111011010001010000111010000011110111\\\")\\nTest.assertEquals(completeBinary(\\\"1101100011100110101000000010101011100001001001101\\\"), \\\"00000001101100011100110101000000010101011100001001001101\\\")\\nTest.assertEquals(completeBinary(\\\"0101110010100001111\\\"), \\\"000000101110010100001111\\\")\\nTest.assertEquals(completeBinary(\\\"01010\\\"), \\\"00001010\\\")\\nTest.assertEquals(completeBinary(\\\"0110010000001010110111011110101111000011111101000001110\\\"), \\\"00110010000001010110111011110101111000011111101000001110\\\")\\nTest.assertEquals(completeBinary(\\\"10100110110110000101011010111101000111100\\\"), \\\"000000010100110110110000101011010111101000111100\\\")\\nTest.assertEquals(completeBinary(\\\"001101011110011111011010111000001\\\"), \\\"0000000001101011110011111011010111000001\\\")\\nTest.assertEquals(completeBinary(\\\"111000011001101100110010101010110100101\\\"), \\\"0111000011001101100110010101010110100101\\\")\\nTest.assertEquals(completeBinary(\\\"1010000111001010001001011110000110000010\\\"), \\\"1010000111001010001001011110000110000010\\\")\\nTest.assertEquals(completeBinary(\\\"1001100111111001010101110\\\"), \\\"00000001001100111111001010101110\\\")\\nTest.assertEquals(completeBinary(\\\"11101010001011011010001101000001010000000101\\\"), \\\"000011101010001011011010001101000001010000000101\\\")\\nTest.assertEquals(completeBinary(\\\"0101000\\\"), \\\"00101000\\\")\\nTest.assertEquals(completeBinary(\\\"100101000000000001101100001111100\\\"), \\\"0000000100101000000000001101100001111100\\\")\\n\\n// made by @Joshua Señoron\",\"language\":\"javascript\",\"summary\":\"Create a function which adds zeros to the start of a binary string, so that its length is a multiple of 8.\\n\\nExamples\\ncompleteBinary(\\\"1100\\\") ➞ \\\"00001100\\\"\\n\\ncompleteBinary(\\\"1101100\\\") ➞ \\\"01101100\\\"\\n\\ncompleteBinary(\\\"110010100010\\\") ➞ \\\"0000110010100010\\\"\\n\\nNotes\\nReturn the same string if its length is already a multiple of 8.\",\"tags\":[\"language_fundamentals\",\"strings\",\"formatting\"],\"timestamp\":{\"$date\":1582125603376},\"title\":\"Complete the Binary Number\",\"stats\":{\"completed\":{\"total\":169,\"ratings\":[1,1,1,1,1,2,0,2,0,2,2,1,1,2,2,2,0,1,2,2,2,1,1,1,1,2,2,2,2,0,2,0,2,5,0,2,2,1,1,1,2,1,2,2,2,0,2,0,1,1,2,2,2,2,1,2,1,0,1,2,2,2,1,2,2,2,2,2,2,2,2,0,0,2,2,2,2,2,2,2,3,3,2,0,1,4,2,2,2,1,2,3,2,2,2,1,2,2,0,2,1,1,2,2,3,1,2,2,1,2,1,1,1,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,2,2,5,2,2,2,2,1,2,2,2,2,2,2,0],\"rators\":[\"5Zq3aGdvh4LHBvnJL\",\"cp3X8hk8yNME7qoD9\",\"MzwFbhCbZwQ3DSL6Q\",\"yaL57wdXmgAZTvKfX\",\"2qZhQb7FiDtaThXE9\",\"5PmsJ8jPhBkaMx7xP\",\"YER6iBcpJCuhgrYDN\",\"6BpBQnSGhzgvhXrEy\",\"zd9FLSzsGz3evKafy\",\"R35tqE5etfTYTfmGr\",\"Rrb84KWhN5tjhMGMA\",\"yjtdwc2AC4jA2RWtn\",\"rn2JRBwv4ytAoT9zu\",\"XSowcGMedgyp37Hts\",\"vWhgrr5oem8WtKdxm\",\"pi76g3eRpnKrhee2a\",\"7JCLyrrY6JYGpocac\",\"xsDyJstYoBZRS8pJH\",\"RE4Mm9T6Q9uygAxGS\",\"mHT2bJb5SByfJ8yKS\",\"2CvHJcA9aXt9pvZwA\",\"TwGxokqsSyfnnTY22\",\"4p2sARSZNNnKqjAT6\",\"tyNrtjfTi56j5Hw9b\",\"xfxkLoQsbZBonmBGp\",\"Rgh8jW6SAtoiq3WrY\",\"eANW47mfA359Y6JyP\",\"c9sDr9KTB6ZATof4b\",\"CGESubreWGAnvrJze\",\"s5zzhdSQFAa9PbYur\",\"zTZtM9jRsu8eXie6s\",\"cJwiiiX7qwSvgtmk8\",\"QnPD4Sv6W4LHc2Qng\",\"k5TGxBtLi9BXxeChT\",\"n5wubRfh6zh8QRymN\",\"Y9Nz9yafaibz54W4o\",\"9XnGoq9Tv6ut3zTtH\",\"SNiJRRosrmSWssLj4\",\"XKi8iZXBCHCaebSHh\",\"9Pzg45NEiRXhLtLh3\",\"AasGs8AeX9Lcb9xJn\",\"2innwjWqxJHo4eRGh\",\"FJsvM5yqKuK9yMk9P\",\"SNt23Ei5dSNtfpEMd\",\"zgoq9MhrL2h75DAMA\",\"EjPLq3QSJdGQFJdgW\",\"d9LBRxvADNBB5QJMB\",\"EWn8w8P3nNh7knatY\",\"jqbm8L6895JgAtZ6H\",\"tPtz279rzBX8kCWMr\",\"vtHbevf2tHqe6mRxX\",\"4TuceAZ8oTDzsjhir\",\"BSkoT6o2GweZkqXbc\",\"eQXwk5zGckM8tCWYH\",\"YtGYxpMxbrHLFK8nq\",\"eomLS3wh6tQPN8jtH\",\"a777e8chPvJkY3tKa\",\"gzTs5oFrfZwh3Kfze\",\"Gc2bmsof5vD2Hsgqv\",\"7wtuhPesfhcYsfZaZ\",\"ipiC2qPhKZWsAouJf\",\"2ZFoLTxcCARhwc8xX\",\"Y5H6Lp7Qou9XGptHH\",\"Lzj3w7QjdzikynsGG\",\"65dbBZynphj53nXqA\",\"GCsLzWAhLvniQqR3J\",\"zw7g7T8wE5R5CBhXr\",\"Q9KQomTTPBsrkAL6c\",\"tAF9Gf6PiGogbZuWs\",\"bX6tpTCjwoi6XMMbK\",\"qxg4tZMxM4HqrSwgr\",\"Yu5Kc5oSL2D2rwA5o\",\"svpXWhsSLLzYR8Rz4\",\"eFjGhq7C7bBKXjT6X\",\"QRv96jmNaYsWkxQEG\",\"Wv9v7fHb8umujfg2j\",\"buX4mCQhtXCfBjeno\",\"wqcZEfuTgoae3WwLF\",\"moe6ztrsNzFymC3A7\",\"BdnE4RS5puoxo92mA\",\"GJnrdkLZk6QYzcjwX\",\"2tCCFm5iefjrRSaxv\",\"Ya3eHgs8x3unZRLpb\",\"8raviPK67KKxzQWcF\",\"E2hpke7mHxAWsw5t9\",\"C9LKGu2g5hSijvDzA\",\"p5ZshR8zhTqmdhKDc\",\"eoepTq5ES5tfgY9XT\",\"ZcqshY58sGEEvgeaq\",\"2zKQWLmEBw8FBs4ZL\",\"mwDdQwbZN6tXwAbBA\",\"jkumHyXfMkhGcPgqC\",\"7gZKfvwaeqsGKXMEN\",\"Po3v3dHCk6wYGKMwi\",\"pLpcDC3EYx2DDQSdt\",\"mfYrBKwDr4hXSFuuN\",\"aEm3Wvj2rFYRL8Lrb\",\"evTTY9hwrtogaNxXn\",\"ttuGK7od8simjgmCJ\",\"kp2ZbCewZJAbfd7xv\",\"nyh73Tr6GhqAat78g\",\"AFfw7cGg83uYk2Miy\",\"u9cRf5kvtpRB5ffB3\",\"CNc6rmwhbxkxEhHAp\",\"g4NCSxxHqHCGMpWwT\",\"vAh63eGRwkuJtoP8v\",\"BdvdJYwHZr7JpkHsn\",\"DDokdbBKxv49M445o\",\"jLSZdBseR2kfjt8dL\",\"SY9Euc4kQfRgetXTd\",\"pdGuqmMyeN4wZaWwv\",\"vGKxRcDYDsXzTQuEQ\",\"Yp7uvStL97cC9fKkY\",\"2Ni3PzJAc5fAhqBkb\",\"7WLMAbNnNgopTeqQE\",\"e9Cknxbx6o7Nb6REs\",\"3Gf7ikLijfoxabiPY\",\"m6qKkBY4aPWziyJTj\",\"STipuJs6kBvPqqsSE\",\"2Qk2mFu9HBFzrB24i\",\"YSmLyP3eRhcFjJPzg\",\"npp5hesJrst6ghKSM\",\"pPpmP7xeJzGgK362R\",\"srJ34BaybkQh3qRkM\",\"cgCQDs9i7yChKeAjE\",\"TtrXnGzi9MyhLvWiz\",\"wJTDDTE3TrmSXKP4d\",\"PAnur8xLTthNL3epT\",\"8BJyXvRWcrvN3nttS\",\"hHEMpogFW5m7ioS7q\",\"M4vq8ATaS9Jg5X7iP\",\"CH53jGETBeJTummf3\",\"974cv448kw6Wu2JF6\",\"c7uBxu2rgY77H5d79\",\"oDtGiNqDMHmhHE3J8\",\"NGvCPuMiAP3xrRLfB\",\"LwD3CyYSiBfg3mA4r\",\"cYE8pJXBiRP6faBs8\",\"FGEeCTorXbX3WvjFW\",\"nBJve5CzG6WAw7WFQ\",\"gXTAie79kiw28tx5u\",\"PTo9qt93YqGvL8fCa\",\"ZcJm2kuqJnN3CXFaR\",\"jyoLggHk8xQKZuoQC\",\"mpLFbFKjY6u3nsDMv\",\"z47JaNrQMgvuPx5HE\",\"oyB4Wr4EeZnoDaa8B\",\"9HZbxzkzgz4CvePtv\",\"bfYmA3LMvhSrK59cn\",\"QAZ5DGaWWYhku4BNz\",\"wo4cpen33NYFHNca7\",\"3rQ3fN5SM2eGHmTi5\",\"uxKGACwmZ6FNZsMwE\",\"rMc3LPajSgm68hNfC\",\"LPZ2QKCoB8q6rG25c\",\"sN2JyFeJCwfwwHPwF\"],\"quality\":[3,5,5,5,5,5,5,5,5,5,5,5,4,5,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":4.823529411764706,\"family\":[{\"_id\":\"pfa5aLiAi62BBp4Cr\",\"language\":\"cpp\"},{\"_id\":\"HpmC7qQpLeGqj6RCg\",\"language\":\"javascript\"},{\"_id\":\"tXxiWs6sxWWvgC7QH\",\"language\":\"php\"},{\"_id\":\"Jgeq7puc9mBBgr9SF\",\"language\":\"python3\"},{\"_id\":\"7rh7SvYRkDujCEWbb\",\"language\":\"ruby\"}]}}"]