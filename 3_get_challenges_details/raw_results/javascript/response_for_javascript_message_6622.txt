a["{\"msg\":\"result\",\"id\":\"2055\",\"result\":{\"_id\":\"uKkGLkDZSAaRAxwya\",\"author\":\"er0s\",\"authorId\":\"5Zq3aGdvh4LHBvnJL\",\"code\":\"class Big {\\n\\t\\n}\",\"difficulty\":2.8823529411764706,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"CcwSJfiEXgt6HLyCQ\",\"instructions\":\"In this challenge, you have to create a `class` to deal with Big Integers. It will be used just a single **static** method called `max`, used to find the Big Integer with the highest value among the given data.\\n\\nYou'll have to manage also a series of exceptions, establishing if the given input is valid:\\n- A given **Big Integer** will be always valid.\\n- A given **integer** lower or equal than the JS `MAX_SAFE_INTEGER` will be converted into a Big Integer (before calculating the max value).\\n- A given **string containing an integer** lower or equal than the JS `MAX_SAFE_INTEGER` will be converted into a Big Integer (before calculating the max value).\\n- If no input is given, the function must returns `null`.\\n- If none of the previous conditions is satisfied, the given input is not valid.\\n\\nThe `max` method applied to the input has to returns:\\n\\n- If the input is valid, the highest given value **as a Big Integer**.\\n- `null` if no input is given.\\n- A string `\\\"Big Error\\\"` if the input contains invalid data.\\n\\n### Examples\\n```\\nBig.max(1n, 10n, 5n) ➞ 10n\\n\\nBig.max(\\\"10\\\", 5n, 1) ➞ 10n\\n\\nBig.max() ➞ null\\n\\nBig.max(2 ** 53 - 1) ➞ 9007199254740991n\\n\\nBig.max(2 ** 53) ➞ \\\"Big Error\\\"\\n\\nBig.max(\\\"10\\\" / 3) ➞ \\\"Big Error\\\"\\n\\nBig.max(\\\"10\\\" / 2) ➞ 5n\\n\\nBig.max(10 - 12, 10 - 10, 10 - 11) ➞ 0n\\n\\nBig.max(0n) ➞ 0n\\n\\nBig.max(\\\"\\\") ➞ \\\"Big Error\\\"\\n```\\n### Note\\n- Reading the specific link about BigInt behaviors (look at the **Resources** tab) is **highly** recommended.\\n- Inputs and values will be given in various ways trying to represent a real scenario. For coding easiness, tests are grouped separately.\",\"isHidden\":false,\"lab\":\"// Testing big integers\\nTest.assertEquals(Big.max(1n, 5n, 3n), 5n)\\nTest.assertEquals(Big.max(11n, 5n, 13n), 13n)\\nTest.assertEquals(Big.max(-11n, -5n, -13n), -5n)\\nTest.assertEquals(Big.max(...[8n ** 100n, 10n ** 100n, 9n ** 100n]), 10n ** 100n)\\nTest.assertEquals(Big.max(-2n, -1n, 0n), 0n)\\n\\n// Testing convertible values\\nTest.assertEquals(Big.max(1, 2, 3), 3n)\\nTest.assertEquals(Big.max(100 - 80, 19n, \\\"2\\\"), 20n)\\nTest.assertEquals(Big.max(2 ** 53 - 1), BigInt(2 ** 53 - 1))\\nTest.assertEquals(Big.max(\\\"50\\\" * \\\"8\\\", \\\"50\\\" * \\\"9\\\", \\\"50\\\" / \\\"10\\\"), 450n)\\nTest.assertEquals(Big.max(\\\"1\\\", \\\"3\\\", \\\"2\\\"), 3n)\\n\\n// Testing empty inputs\\nTest.assertEquals(Big.max(...[]), null)\\nTest.assertEquals(Big.max(), null)\\n\\n// Testing invalid inputs\\nTest.assertEquals(Big.max(\\\"\\\"), \\\"Big Error\\\")\\nTest.assertEquals(Big.max([]), \\\"Big Error\\\")\\nTest.assertEquals(Big.max([11n, 5n, 13n]), \\\"Big Error\\\")\\nTest.assertEquals(Big.max({a: 10n}), \\\"Big Error\\\")\\nTest.assertEquals(Big.max(\\\"10n * 5n\\\"), \\\"Big Error\\\")\\nTest.assertEquals(Big.max(2 ** 53 - 1, 3 ** 50, 2 ** 54), \\\"Big Error\\\")\\nTest.assertEquals(Big.max(\\\"50\\\" / \\\"8\\\", \\\"50\\\" / \\\"9\\\", \\\"50\\\" / \\\"10\\\"), \\\"Big Error\\\")\\nTest.assertEquals(Big.max(\\\"1000000000000000000000000001\\\"), \\\"Big Error\\\")\\nTest.assertEquals(Big.max(\\\"50n\\\"), \\\"Big Error\\\")\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,3,3,3,4,2,4,2,5,4,3,3,3],\"rators\":[\"5Zq3aGdvh4LHBvnJL\",\"yjtdwc2AC4jA2RWtn\",\"n5wubRfh6zh8QRymN\",\"EWn8w8P3nNh7knatY\",\"cRpaCxYRmGcN3Nsoj\",\"65dbBZynphj53nXqA\",\"dPM2Rk2iMkznyXNEt\",\"fgoCjGSeBSktMpg4G\",\"a7LBurCmz5n6gECbv\",\"aEm3Wvj2rFYRL8Lrb\",\"YLTZRjM78Wi9J9Re4\",\"TtrXnGzi9MyhLvWiz\"],\"total\":15,\"quality\":[]},\"flags\":0},\"summary\":\"In this challenge, you have to create a class to deal with Big Integers. It will be used just a single static method called max, used to find the Big Integer with the highest value among the given data.\\n\\nYou'll have to manage also a series of exceptions, establishing if the given input is valid:\\nA given Big Integer will be always valid.\\nA given integer lower o\",\"tags\":[\"classes\",\"functional_programming\",\"conditions\"],\"timestamp\":{\"$date\":1579099785600},\"title\":\"Big Integers, Big Errors\",\"quality\":0,\"family\":[{\"_id\":\"uKkGLkDZSAaRAxwya\",\"language\":\"javascript\"}]}}"]