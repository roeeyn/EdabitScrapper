a["{\"msg\":\"result\",\"id\":\"1635\",\"result\":{\"_id\":\"4cvBphZgxvGTdc3F7\",\"author\":\"Mubashir Hassan \",\"authorId\":\"T6iBEE2jp7f7iEF2P\",\"code\":\"function longestAbecedarian(arr) {\\n\\t\\n}\",\"difficulty\":2.2941176470588234,\"familyId\":\"r7a5Zdw45ZX6zwuM4\",\"instructions\":\"An abecedarian word is a word where all of its letters are arranged in alphabetical order. Examples of these words include:\\n- Empty\\n- Forty\\n- Almost\\n\\nGiven an array of words, create a function which returns the longest abecedarian word. If no word in an array  matches the criterea, return *an empty string*.\\n\\n### Examples\\n```\\nlongestAbecedarian([\\\"ace\\\", \\\"spades\\\", \\\"hearts\\\", \\\"clubs\\\"]) ➞ \\\"ace\\\"\\n\\nlongestAbecedarian([\\\"forty\\\", \\\"choppy\\\", \\\"ghost\\\"]) ➞ \\\"choppy\\\"\\n\\nlongestAbecedarian([\\\"one\\\", \\\"two\\\", \\\"three\\\"]) ➞ \\\"\\\"\\n```\\n\\n### Notes\\n- All words will be given in lowercase.\\n- If two abecedarian words have the same length, return the word which appeared first in the array.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assertEquals(longestAbecedarian([\\\"ace\\\", \\\"spades\\\", \\\"hearts\\\", \\\"clubs\\\"]), \\\"ace\\\")\\nTest.assertEquals(longestAbecedarian([\\\"forty\\\", \\\"choppy\\\", \\\"ghost\\\"]), \\\"choppy\\\")\\nTest.assertEquals(longestAbecedarian([\\\"one\\\", \\\"two\\\", \\\"three\\\"]), \\\"\\\")\\nTest.assertEquals(longestAbecedarian([\\\"almost\\\", \\\"accept\\\", \\\"access\\\"]), \\\"almost\\\")\\nTest.assertEquals(longestAbecedarian([\\\"aa\\\", \\\"bbb\\\", \\\"cccc\\\"]), \\\"cccc\\\")\",\"language\":\"javascript\",\"quality\":0,\"summary\":\"An abecedarian word is a word where all of its letters are arranged in alphabetical order. Examples of these words include:\\nEmpty\\nForty\\nAlmost\\n\\nGiven an array of words, create a function which returns the longest abecedarian word. If no word in an array  matches the criterea, return an empty string.\\n\\nExamples\\nlongestAbecedarian([\\\"ace\\\", \\\"spades\\\", \\\"hearts\\\", \\\"clu\",\"tags\":[\"arrays\",\"strings\",\"loops\"],\"timestamp\":{\"$date\":1605684718869},\"title\":\"Longest Abecedarian Word\",\"stats\":{\"completed\":{\"total\":31,\"ratings\":[2,2,2,2,2,1,2,3,2,5,3,2,3,1,3,3,3,1,3,2,3,2,3,2,3,0,1,2,2,2,3,2,3,3],\"quality\":[],\"rators\":[\"yjtdwc2AC4jA2RWtn\",\"mXsqvC48ZWh5sXKRG\",\"cyHWbRK7EZGXQHGjS\",\"FGEeCTorXbX3WvjFW\",\"8BJyXvRWcrvN3nttS\",\"buX4mCQhtXCfBjeno\",\"mHT2bJb5SByfJ8yKS\",\"5hHf2e9zimbmxMqqF\",\"CNc6rmwhbxkxEhHAp\",\"AFfw7cGg83uYk2Miy\",\"6ebrCvp8uXBsTuwrA\",\"u9cRf5kvtpRB5ffB3\",\"dzhAZaXMg2n7Hhw37\",\"s678Wirfor5uYL5T6\",\"c7uBxu2rgY77H5d79\",\"QRv96jmNaYsWkxQEG\",\"JsRTAwWK7Nikj4sKA\",\"srJ34BaybkQh3qRkM\",\"ZcJm2kuqJnN3CXFaR\",\"aAFajcygMskKDBPsH\",\"PH32cNxBjrK4a28sn\",\"BdnE4RS5puoxo92mA\",\"RE4Mm9T6Q9uygAxGS\",\"z5ebtimXwFFJdYxoa\",\"oDtGiNqDMHmhHE3J8\",\"J7d397iB5GuWRAMfg\",\"gSrqu8MsZMFSxxWAZ\",\"Ya3eHgs8x3unZRLpb\",\"kKNq2Kcp3o3xocn4m\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"WA3CLqBrGrsJk7afJ\",\"language\":\"cpp\"},{\"_id\":\"nLjn3M5h3ZX3PoipQ\",\"language\":\"csharp\"},{\"_id\":\"4cvBphZgxvGTdc3F7\",\"language\":\"javascript\"},{\"_id\":\"S9A7PeacnDpvXLgYe\",\"language\":\"python3\"},{\"_id\":\"sFtRpKkP8qTMrKDgK\",\"language\":\"ruby\"},{\"_id\":\"Kicp9rdzDQQY3tzr8\",\"language\":\"swift\"}]}}"]