a["{\"msg\":\"result\",\"id\":\"1241\",\"result\":{\"_id\":\"eCmEgrKNtnfhpssQp\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"function happinessNumber(s) {\\n\\t\\n}\",\"difficulty\":2.0568181818181817,\"quality\":4.593220338983051,\"familyId\":\"y5cCQrCq7L8NDgktj\",\"instructions\":\"You will be given a string of characters containing only the following characters: `():`\\n\\nCreate a function that returns a number based on the number of sad and smiley faces there are.\\n- The happy faces `:)` and `(:` are worth **1.**\\n- The sad faces `:(` and `):` are worth **-1**.\\n\\n\\n### Working Example\\n```\\nhappinessNumber(\\\":):(\\\") ➞ -1\\n// The first 2 characters are :)        +1      Total: 1\\n// The next 2 are ):                    -1      Total: 0\\n// The last 2 are :(                    -1       Total: -1\\n```\\n\\n### Examples\\n```\\nhappinessNumber(\\\":):(\\\") ➞ -1\\n\\nhappinessNumber(\\\"(:)\\\") ➞ 2\\n\\nhappinessNumber(\\\"::::\\\") ➞ 0\\n```\\n\\n### Notes\\nAll test cases will be valid.\",\"isHidden\":false,\"lab\":\"Test.assertEquals(happinessNumber(':):('), -1)\\nTest.assertEquals(happinessNumber('(:)'), 2)\\nTest.assertEquals(happinessNumber('::::'), 0)\\nTest.assertEquals(happinessNumber(':)::(()::'), -2)\\nTest.assertEquals(happinessNumber('))):'), -1)\\nTest.assertEquals(happinessNumber(':):)('), 1)\\nTest.assertEquals(happinessNumber(':(:(:()):'), -2)\\nTest.assertEquals(happinessNumber('()((:())):'), -1)\\nTest.assertEquals(happinessNumber(':(:)'), 1)\\nTest.assertEquals(happinessNumber('(:):(:)(('), 2)\\nTest.assertEquals(happinessNumber(':(:(:'), 0)\\nTest.assertEquals(happinessNumber(')())(()'), 0)\\nTest.assertEquals(happinessNumber(':()):'), -2)\\nTest.assertEquals(happinessNumber('():(('), -2)\\nTest.assertEquals(happinessNumber('::::(():('), -3)\\nTest.assertEquals(happinessNumber(')(():((::'), -1)\\nTest.assertEquals(happinessNumber('(::):('), 0)\\nTest.assertEquals(happinessNumber('):()::('), -4)\\nTest.assertEquals(happinessNumber(':::(:('), -1)\\nTest.assertEquals(happinessNumber(')((:'), 1)\\nTest.assertEquals(happinessNumber('(:::(:('), 0)\\nTest.assertEquals(happinessNumber('))(:(:'), 1)\\nTest.assertEquals(happinessNumber('::))(:('), 1)\\nTest.assertEquals(happinessNumber('(((())))'), 0)\",\"language\":\"javascript\",\"summary\":\"You will be given a string of characters containing only the following characters: ():\\n\\nCreate a function that returns a number based on the number of sad and smiley faces there is.\\nThe happy faces :) and (: are worth 1.\\nThe sad faces :( and ): are worth -1.\\n\\nWorking Example\\nhappinessNumber(\\\":):(\\\") ➞ -1\\n// The first 2 characters are :)        +1      Total: 1\",\"tags\":[\"strings\",\"language_fundamentals\"],\"timestamp\":{\"$date\":1599478784801},\"title\":\"Smiley Faces :)\",\"stats\":{\"completed\":{\"total\":209,\"ratings\":[1,1,1,1,1,2,2,3,1,2,2,2,2,3,3,0,0,1,2,2,2,3,2,2,2,3,3,2,0,1,5,3,2,3,3,2,3,2,1,0,2,0,2,2,2,3,1,2,2,2,2,2,1,1,3,2,1,2,2,2,2,1,1,3,2,3,3,1,2,3,2,2,2,2,2,3,3,3,2,3,4,2,4,3,3,2,3,3],\"quality\":[5,5,5,4,5,3,5,3,3,5,5,5,5,5,5,5,5,5,4,4,4,5,5,4,5,5,5,5,5,4,5,5,5,5,5,4,5,4,4,4,4,5,5,5,4,5,5,3,5,3,5,5,5,3,5,5,5,5,5],\"rators\":[\"4rtkBGJRy7WTjeyjp\",\"n6ixwfmF83uWKsqPH\",\"tpbhfmv8fmpo6cRo9\",\"yjtdwc2AC4jA2RWtn\",\"H46gRHmkdz2CRrGH9\",\"CNc6rmwhbxkxEhHAp\",\"qWR7eXxBiNee22A5u\",\"7gZKfvwaeqsGKXMEN\",\"jcPZ5ySXseCB7Ec3x\",\"ttuGK7od8simjgmCJ\",\"rBkb5ypqnFTvNhmXe\",\"75NY7vqimaATzRdAX\",\"kp2ZbCewZJAbfd7xv\",\"bjn5DTzzaWCP5BDgX\",\"QRv96jmNaYsWkxQEG\",\"QpBEndbkq6opq4DBN\",\"rrkEbZtHE6xZiamyu\",\"3miomeMM4QHx9yava\",\"cxcvQpC4uYfacSiGT\",\"Brn5GJcvqt3uJbRLA\",\"Ya3eHgs8x3unZRLpb\",\"pdGuqmMyeN4wZaWwv\",\"ETgnRw9moyv7zhbTD\",\"r47cBPj3ayCftA6c3\",\"rS982wANYcogEvzai\",\"udnBAhozJg9EFgs5v\",\"BRcu62q4Nu7Tcfy9z\",\"xLibLiovYxzFoXzJW\",\"APHWiMJcKDjdNmHvq\",\"7YAiLjJb9aGiS4mmx\",\"mx58K4xY8JZjvYCoZ\",\"BdvdJYwHZr7JpkHsn\",\"ywDSobPgL4ZqsuXyM\",\"vrg65WQ5CrJx8HcoK\",\"p5ZshR8zhTqmdhKDc\",\"aEm3Wvj2rFYRL8Lrb\",\"kuCQeknZkt7vmwsJZ\",\"wrxHLcdBEri4cyK6W\",\"FZY6t6XEmbS6ykLaL\",\"LkD2zqsaR77LCM8Y8\",\"NczXsSrYNX6nDWhjF\",\"PNaLsSGwFfxXmrsG9\",\"cDn3RDi7yHvaCBm9y\",\"iRWkFFriwxk5oAbDg\",\"8BJyXvRWcrvN3nttS\",\"daD4PtrAmXk4Q9jG7\",\"3PSjjmcj4zZSYzXHW\",\"vewKwcMeGuk3p3MsN\",\"6BpBQnSGhzgvhXrEy\",\"7wtuhPesfhcYsfZaZ\",\"qFJpEDM2Ep6v4tqPz\",\"QnPD4Sv6W4LHc2Qng\",\"RGN3QTb5LXj4ZPPkj\",\"vAh63eGRwkuJtoP8v\",\"SY9Euc4kQfRgetXTd\",\"WSLPmXqJzRjtYkuwf\",\"bAvZKuLAnKq8mSp5B\",\"Yp7uvStL97cC9fKkY\",\"e9Cknxbx6o7Nb6REs\",\"wzsQExQ77eRqYt5ym\",\"3Gf7ikLijfoxabiPY\",\"m6qKkBY4aPWziyJTj\",\"DPi9QGLctq2y76KuE\",\"2Ni3PzJAc5fAhqBkb\",\"nkH3HfJXLMNcBMM79\",\"2Qk2mFu9HBFzrB24i\",\"Po3v3dHCk6wYGKMwi\",\"npp5hesJrst6ghKSM\",\"Wpn95NqWxncQrwNgz\",\"wJTDDTE3TrmSXKP4d\",\"jnyub52Fi79drGvow\",\"srJ34BaybkQh3qRkM\",\"oDtGiNqDMHmhHE3J8\",\"mDWNyaaQ9hvPCRzSd\",\"vGKxRcDYDsXzTQuEQ\",\"kw9vvJuyKNeDSaiMp\",\"AasGs8AeX9Lcb9xJn\",\"pi76g3eRpnKrhee2a\",\"gXTAie79kiw28tx5u\",\"J7d397iB5GuWRAMfg\",\"AyrNeQTgDWPF233Cv\",\"kqJ5bxst5QGn7QnMC\",\"xsDyJstYoBZRS8pJH\",\"iqmPb9JuJDgTFeR8Q\",\"jyoLggHk8xQKZuoQC\",\"nE9R55oh9wLnDdtyq\",\"wcd6236wYeEb99Yof\",\"5nhmyqLy8M2Yn2HMR\",\"Swb2jDnZjviDXsQvB\",\"nWND4LmgZTftyB8sN\",\"PTo9qt93YqGvL8fCa\",\"XjTQg7oGYkhAXjsbf\",\"KQNRec88MkMcPeCYK\",\"z6QS4ZGp5jXGgEnrE\",\"9XnGoq9Tv6ut3zTtH\",\"h4jFmtbFn92eA4649\",\"SCY9Qyb83vz8ePBrZ\",\"6usNDpvnsA8ZnptKf\",\"5NGxHLcQ8Af2RJ4TN\",\"d8JhF9zfpexkRnCea\",\"3C87RqwJYTp8xYpyf\",\"KB5BFvHhR9gqHtPF7\",\"nHj7SC5cnmkTApbgY\",\"FGEeCTorXbX3WvjFW\",\"sN2JyFeJCwfwwHPwF\",\"Z4aDEgX4dv9Cm4P8C\",\"qvCppNAZjAkNdBSu6\",\"jzdjJtfQiCYmiyvzh\",\"chzgiWZQt3ZHevcPD\",\"d5GufiYnwAfgsBKkq\",\"uJKR2hGaQSRjALLNF\",\"uxKGACwmZ6FNZsMwE\",\"pxgAHHB8hNEegCYXm\",\"LwD3CyYSiBfg3mA4r\",\"DyunorHmNEeBgSGqs\",\"RnY25enEBE8T9P5GS\",\"ubpa2f6ma7dJDtYYj\",\"QC8MR2EkGDmoRgjYv\",\"uBksExZkSGjTi9oQz\",\"RoGGD5cpHb4ftdLDv\",\"7aRBdr5ZsEsh8tzNo\",\"rFmHi9QLRG7NzHJnX\",\"oS8RbMKnP2RQyKh2A\",\"b28yTpzsjdFcB6yeA\",\"Q3nNbrtL67peqr9bX\",\"yxmmeuiacuKzkf9QA\",\"qycf9BxScMM4mjPET\",\"Hn3PNxpmB3EqiGBkB\",\"2McP9v3NBHtsu9bRf\",\"PC3pLs36zNzpRDSuE\",\"NwPCDbFATdvXuxnxJ\",\"nw3rZ4ap8trEDtPRX\",\"K2QCa4CqcSviYr9TQ\",\"wo4cpen33NYFHNca7\",\"RDujAbg2Y76k9zdiE\",\"z5ebtimXwFFJdYxoa\",\"eomLS3wh6tQPN8jtH\",\"Akq3fQcPRgPrWfsye\",\"ThaiAKWWDw2W4QfJh\",\"xeNCx49eJQzAiagEf\",\"8s5Bdrn7RTga7DL6x\",\"2LHhMWfijNfotPkXf\"]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"eCmEgrKNtnfhpssQp\",\"language\":\"javascript\"},{\"_id\":\"8qD23E6XRMaWhyJ5z\",\"language\":\"python3\"},{\"_id\":\"4nHvN9RzrMu6oDgnb\",\"language\":\"ruby\"}]}}"]