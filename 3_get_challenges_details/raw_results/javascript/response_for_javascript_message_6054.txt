a["{\"msg\":\"result\",\"id\":\"1774\",\"result\":{\"_id\":\"WyuiphFcBXZSoKpEt\",\"archived\":false,\"author\":\"Theodore\",\"authorId\":\"hi7Hvtq2mJfkXEGF2\",\"code\":\"class StackCalc {\\n  constructor() {\\n\\t\\t\\n  }\\n  run(instructions) {\\n\\t\\t\\n  }\\n  get value() {\\n\\t\\t\\n  }\\n}\",\"difficulty\":2.518987341772152,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"5Dn9mqWScqxsht9Nz\",\"instructions\":\"A stack machine processes instructions by pushing and popping values to an internal stack. A simple example of this is a calculator.\\n\\nThe argument passed to `run(instructions)` will always be a string containing a series of instructions.  \\nThe instruction set of the calculator will be this:  \\n- `+`: Pop the last 2 values from the stack, add them, and push the result onto the stack.\\n- `-`: Pop the last 2 values from the stack, subtract the lower one from the topmost one, and push the result.\\n- `*`: Pop the last 2 values, multiply, and push the result.\\n- `/`: Pop the last 2 values, divide the topmost one by the lower one, and push the result.\\n- `DUP`: Duplicate (not double) the top value on the stack.\\n- `POP`: Pop the last value from the stack and discard it.\\n- `PSH`: Performed whenever a number appears as an instruction. Push the number to the stack.\\n- Any other instruction (for example, a letter) should result in the value \\\"Invalid instruction: \\\\[instruction]\\\"\\n\\n### Examples\\n```\\nStackCalc(\\\"\\\") ➞ 0\\n\\nStackCalc(\\\"5 6 +\\\") ➞ 11\\n\\nStackCalc(\\\"3 DUP +\\\") ➞ 6\\n\\nStackCalc(\\\"6 5 5 7 * - /\\\") ➞ 5\\n\\nStackCalc(\\\"x y +\\\") ➞ Invalid instruction: x\\n```\\n\\n### Notes\\n- If there are no instructions, the value should remain 0.\\n- The return value of `get value()` should be the topmost value on the stack.\",\"lab\":\"const tests = [\\n  {\\n    arg: '12', ans: 12\\n  }, {\\n    arg: '5 6 +', ans: 11\\n  }, {\\n    arg: '3 6 -', ans: 3\\n  }, {\\n    arg: '3 DUP +', ans: 6\\n  }, {\\n    arg: '2 5 - 5 + DUP +', ans: 16\\n  }, {\\n    arg: '9 14 DUP + - 3 POP', ans: 19\\n  }, {\\n    arg: '1 2 3 4 5 POP POP POP', ans: 2\\n  }, {\\n    arg: '13 DUP 4 POP 5 DUP + DUP + -', ans: 7\\n  }, {\\n    arg: '6 5 5 7 * - /', ans: 5\\n  }, {\\n    arg: '4 2 4 * 3 + 5 + / 5 -', ans: 1\\n  }, {\\n    arg: '5 8 + 4 5 1 + POP 13 +', ans: 17\\n  }, {\\n    arg: 'x', ans: 'Invalid instruction: x'\\n  }, {\\n    arg: '4 6 + x', ans: 'Invalid instruction: x'\\n  }, {\\n    arg: 'y x *', ans: 'Invalid instruction: y'\\n  }, {\\n    arg: '', ans: 0\\n  }, {\\n    arg: '4 POP', ans: 0\\n  }\\n];\\nlet machine;\\nfor (let {arg, ans} of tests) {\\n\\tmachine = new StackCalc();\\n  machine.run(arg);\\n  Test.assertEquals(machine.value, ans);\\n}\",\"language\":\"javascript\",\"summary\":\"A stack machine processes instructions by pushing and popping values to an internal stack. A simple example of this is a calculator.\\n\\nThe argument passed to run(instructions) will always be a string containing a series of instructions.\\nThe instruction set of the calculator will be this:\\n+: Pop the last 2 values from the stack, add them, and push the result ont\",\"tags\":[\"algorithms\",\"math\",\"numbers\",\"classes\",\"data_structures\"],\"timestamp\":{\"$date\":1517456762273},\"title\":\"Stack Calculator\",\"stats\":{\"completed\":{\"total\":86,\"ratings\":[1,1,1,1,1,3,2,2,2,3,0,2,2,2,3,3,3,3,2,3,2,2,3,2,3,3,3,0,3,3,0,3,3,2,4,4,1,3,3,3,2,4,4,2,3,3,3,2,2,3,2,3,3,3,3,5,2,3,3,2,4,1,2,2,3,3,3,1,3,4,2,2,4,0,3,3,4,4,4],\"rators\":[\"hi7Hvtq2mJfkXEGF2\",\"XovjY6a5SDrypxG6k\",\"65dbBZynphj53nXqA\",\"AgQburWndXwEhgomM\",\"c5FoJ26xo6Jer46Cv\",\"CdfRdeo2affeoRqE2\",\"thEsZ7N6X8qfZMbcv\",\"ZZA6JdLEBxHGozyWP\",\"XHngE5iScvztMpnR2\",\"eYaxKg5Tg2Nj5QGSL\",\"mf8xW5DhPjfXaCEsQ\",\"enuhRD8zZn4QDNTc4\",\"6ir9H6TvDxyGL4kvG\",\"hy63rX7K3hEfyp8B4\",\"SDtZFL5NzAoCPofXk\",\"XcHCqYmeoqxDsoucx\",\"Jh6sPsgj8yHy95joL\",\"n5wubRfh6zh8QRymN\",\"8xuMMGF7fyQWL2fKH\",\"rTRvHndHZKKRkb9w5\",\"bjn5DTzzaWCP5BDgX\",\"4itF2fjGR9Swc48Zp\",\"yjtdwc2AC4jA2RWtn\",\"zw7g7T8wE5R5CBhXr\",\"mHT2bJb5SByfJ8yKS\",\"Q9KQomTTPBsrkAL6c\",\"DHwbkbzYNpmkSFT7u\",\"qJZsi5rhRnWA38FbA\",\"nRht5DZA6YcH2kAo6\",\"a5SYsAFj5km9yZkAQ\",\"krkDcjCjgG7oP6Lv4\",\"AasGs8AeX9Lcb9xJn\",\"5HRPnrWvfDLAiEGFc\",\"uKv6ghxAFuZ5Rb3tD\",\"2innwjWqxJHo4eRGh\",\"dP6Hqxfg3BYQ7xwYz\",\"EGMDcfyfqqMZsN5pu\",\"YtGYxpMxbrHLFK8nq\",\"g3unxwpmKKJHgLSk2\",\"NRYNuaQhH6Hife3nf\",\"a777e8chPvJkY3tKa\",\"m86y4gi8hMzGz8js7\",\"5wWMqPaquGWz8SfQN\",\"sNcDN3s3rH9wcNg5n\",\"vic9SZ9qqj9WhRkbd\",\"aEm3Wvj2rFYRL8Lrb\",\"y75CxdSxD7TxwjBvc\",\"Po3v3dHCk6wYGKMwi\",\"YLTZRjM78Wi9J9Re4\",\"CNc6rmwhbxkxEhHAp\",\"mDWNyaaQ9hvPCRzSd\",\"DNxSie8o54gzdirzQ\",\"eMuCpJ2spXWkJjWNz\",\"wJTDDTE3TrmSXKP4d\",\"jAB6ZbTiijgefk6As\",\"NpAjngKpPXGwYjSyC\",\"o6zGcZczMXbizGHsT\",\"rSJGLYSXMuu3RWjun\",\"m5BhiBHteEiC6HMRx\",\"2nyYiDATKWBPqvM4P\",\"64KvwkCTaEh7c6K8W\",\"PodevcFnQDZXueccc\",\"yr822PZmmiDDenxpB\",\"HgGgKsLaA2hdXCgHY\",\"Tk6q4mDrjt24ZFeSo\",\"xjjAoAKkEXN3T2HSt\",\"TtrXnGzi9MyhLvWiz\",\"m2cE2ZzpNHJS8GedN\",\"oTzAAWvTj9f5iApZT\",\"kpzP9egzZitbgtGQr\",\"FchzDbqCN4nAyr5D6\",\"JcxFuLRtAmNCwCCq3\",\"jg2DcMFf4DXf24jnd\",\"oXtZbxP4p6p8fjWXD\",\"rgmhomEQqsnngdSJZ\",\"MnkGJccaTxbwJTdZz\",\"ChBASAhzswJq6Beg4\",\"J36dvrzA6Xz4W4q4K\",\"wmD7M52GjumxpdzPK\",\"psdbt2PkjPv4qTwtr\"],\"quality\":[5,5,4,5,4]},\"complaints\":{\"total\":1,\"reasons\":[[\"confusing\"]],\"skippers\":[\"hi7Hvtq2mJfkXEGF2\",\"GiWEB8bDSqRWrKouW\"]},\"instructions\":{\"score\":-27.65,\"voters\":[\"xv2WGQMNBh8xxXheW\",\"gb2Fr2NWvg5SJNjqj\",\"hy63rX7K3hEfyp8B4\"]},\"tests\":{\"score\":0,\"voters\":[]},\"flags\":0},\"isHidden\":false,\"quality\":4.6,\"family\":[{\"_id\":\"WyuiphFcBXZSoKpEt\",\"language\":\"javascript\"},{\"_id\":\"wEDHiAcALvS2KuRBJ\",\"language\":\"python3\"}]}}"]