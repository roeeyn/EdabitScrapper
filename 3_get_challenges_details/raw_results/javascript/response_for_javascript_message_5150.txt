a["{\"msg\":\"result\",\"id\":\"1324\",\"result\":{\"_id\":\"HSprZxYCc3KxysAoK\",\"author\":\"Mubashir Hassan \",\"authorId\":\"T6iBEE2jp7f7iEF2P\",\"code\":\"function exitMaze(maze, directions) {\\n\\t\\n}\",\"difficulty\":2.108108108108108,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"M3myAmsFyLnuPGLRM\",\"instructions\":\"Given a two-dimensional array of `maze` and an array of `directions`. Your task is to follow the given directions.\\n- If you can reach the endpoint before all your moves have gone, return `\\\"Finish\\\"`.\\n- If you hit any walls or go outside the maze border, return `\\\"Dead\\\"`.\\n- If you find yourself still in the maze after using all the moves, return `\\\"Lost\\\"`.\\n\\nThe maze array will look like this:\\n\\n```\\nmaze = [\\n  [1, 1, 1, 1, 1, 1, 1, 1, 0, 1],\\n  [1, 3, 1, 0, 1, 0, 0, 0, 0, 1],\\n  [1, 0, 1, 0, 0, 0, 1, 1, 0, 1],\\n  [1, 0, 1, 1, 1, 1, 1, 0, 0, 1],\\n  [1, 0, 1, 0, 0, 0, 0, 0, 0, 1],\\n  [1, 0, 1, 0, 1, 0, 1, 0, 0, 1],\\n  [1, 0, 1, 0, 1, 0, 0, 0, 0, 0],\\n  [1, 0, 1, 0, 1, 0, 1, 1, 0, 1],\\n  [1, 0, 0, 0, 1, 0, 0, 0, 0, 1],\\n  [1, 1, 1, 0, 1, 1, 1, 1, 2, 1]\\n]\\n\\n// 0 = Safe place to walk\\n// 1 = Wall\\n// 2 = Start Point\\n// 3 = Finish Point\\n// N = North, E = East, W = West and S = South\\n ```\\n\\nSee the below examples for a better understanding:\\n\\n### Examples\\n```\\nexitMaze(maze, [\\\"N\\\", \\\"E\\\", \\\"E\\\"]) ➞ \\\"Dead\\\"\\n// Hitting the wall should return \\\"Dead\\\".\\n\\nexitMaze(maze, [\\\"N\\\", \\\"N\\\", \\\"N\\\", \\\"E\\\"]) ➞ \\\"Lost\\\"\\n// Couldn't reach the finish point.\\n\\nexitMaze(maze, [\\\"N\\\", \\\"W\\\", \\\"W\\\", \\\"W\\\", \\\"N\\\", \\\"N\\\", \\\"N\\\", \\\"N\\\", \\\"W\\\", \\\"W\\\", \\\"S\\\", \\\"S\\\", \\\"S\\\", \\\"S\\\", \\\"W\\\", \\\"W\\\", \\\"N\\\", \\\"N\\\", \\\"N\\\", \\\"N\\\", \\\"N\\\", \\\"N\\\", \\\"N\\\"]) ➞ \\\"Finish\\\"\\n```\\n\\n### Notes\\nN/A\",\"isFree\":false,\"isHidden\":false,\"lab\":\"maze = [\\n\\t[1,1,1,1,1,1,1,1,0,1],\\n\\t[1,3,1,0,1,0,0,0,0,1],\\n\\t[1,0,1,0,0,0,1,1,0,1],\\n\\t[1,0,1,1,1,1,1,0,0,1],\\n\\t[1,0,1,0,0,0,0,0,0,1],\\n\\t[1,0,1,0,1,0,1,0,0,1],\\n\\t[1,0,1,0,1,0,0,0,0,0],\\n\\t[1,0,1,0,1,0,1,1,0,1],\\n\\t[1,0,0,0,1,0,0,0,0,1],\\n\\t[1,1,1,0,1,1,1,1,2,1]\\n]\\n\\nTest.assertEquals(exitMaze(maze,[\\\"N\\\",\\\"N\\\",\\\"N\\\",\\\"W\\\",\\\"W\\\",\\\"W\\\",\\\"N\\\",\\\"N\\\",\\\"W\\\",\\\"W\\\",\\\"S\\\",\\\"S\\\",\\\"S\\\",\\\"S\\\",\\\"W\\\",\\\"W\\\",\\\"N\\\",\\\"N\\\",\\\"N\\\",\\\"N\\\",\\\"N\\\",\\\"N\\\",\\\"N\\\"]), \\\"Finish\\\")\\nTest.assertEquals(exitMaze(maze,[\\\"N\\\",\\\"N\\\",\\\"N\\\",\\\"N\\\",\\\"N\\\",\\\"N\\\",\\\"N\\\",\\\"N\\\",\\\"W\\\",\\\"W\\\",\\\"W\\\",\\\"S\\\",\\\"W\\\",\\\"W\\\",\\\"N\\\"]), \\\"Lost\\\")\\nTest.assertEquals(exitMaze(maze,[\\\"N\\\",\\\"N\\\",\\\"N\\\",\\\"N\\\",\\\"N\\\",\\\"E\\\",\\\"E\\\",\\\"S\\\",\\\"S\\\",\\\"S\\\",\\\"S\\\",\\\"S\\\",\\\"S\\\"]), \\\"Dead\\\")\\nTest.assertEquals(exitMaze(maze,[\\\"N\\\",\\\"W\\\",\\\"W\\\",\\\"W\\\",\\\"W\\\"]), \\\"Dead\\\")\\nTest.assertEquals(exitMaze(maze,[\\\"N\\\",\\\"N\\\",\\\"N\\\",\\\"N\\\",\\\"N\\\",\\\"N\\\",\\\"N\\\",\\\"N\\\",\\\"N\\\",\\\"S\\\",\\\"S\\\",\\\"S\\\",\\\"S\\\",\\\"S\\\",\\\"S\\\",\\\"S\\\",\\\"S\\\",\\\"S\\\"]), \\\"Lost\\\")\\nTest.assertEquals(exitMaze(maze,[\\\"N\\\",\\\"E\\\",\\\"E\\\"]), \\\"Dead\\\")\\nTest.assertEquals(exitMaze(maze,[\\\"N\\\",\\\"W\\\",\\\"W\\\",\\\"W\\\",\\\"N\\\",\\\"N\\\",\\\"N\\\",\\\"N\\\",\\\"W\\\",\\\"W\\\",\\\"S\\\",\\\"S\\\",\\\"S\\\",\\\"S\\\",\\\"W\\\",\\\"W\\\",\\\"N\\\",\\\"N\\\",\\\"N\\\",\\\"N\\\",\\\"N\\\",\\\"N\\\",\\\"N\\\",\\\"S\\\",\\\"S\\\"]), \\\"Finish\\\")\\nTest.assertEquals(exitMaze(maze,[\\\"N\\\",\\\"W\\\",\\\"W\\\",\\\"W\\\",\\\"N\\\",\\\"N\\\"]), \\\"Lost\\\")\\nTest.assertEquals(exitMaze(maze,[\\\"N\\\",\\\"N\\\",\\\"N\\\",\\\"E\\\"]), \\\"Lost\\\")\\nTest.assertEquals(exitMaze(maze,[\\\"N\\\",\\\"N\\\",\\\"N\\\",\\\"W\\\",\\\"W\\\",\\\"W\\\",\\\"N\\\",\\\"N\\\",\\\"W\\\",\\\"W\\\",\\\"S\\\",\\\"S\\\",\\\"S\\\",\\\"S\\\",\\\"S\\\",\\\"S\\\"]), \\\"Dead\\\")\\nTest.assertEquals(exitMaze(maze,[\\\"N\\\",\\\"W\\\",\\\"W\\\",\\\"W\\\",\\\"N\\\",\\\"N\\\",\\\"N\\\",\\\"N\\\",\\\"W\\\",\\\"W\\\",\\\"S\\\",\\\"S\\\",\\\"S\\\",\\\"S\\\",\\\"W\\\",\\\"W\\\",\\\"N\\\",\\\"N\\\",\\\"N\\\",\\\"N\\\",\\\"N\\\",\\\"N\\\",\\\"N\\\"]), \\\"Finish\\\")\",\"language\":\"javascript\",\"quality\":5,\"stats\":{\"completed\":{\"ratings\":[1,1,1,1,1,2,3,2,2,3,0,0,2,3,3,2,2,2,4,3,2,3,3,2,3,3,2,3,3,3,0,0,5,3,2,1,2],\"quality\":[5,5],\"rators\":[\"6ixfX5gbXeqiqSD6v\",\"3WtHp4MBzciz4AE8M\",\"mHT2bJb5SByfJ8yKS\",\"ZqDujtDWGY2kYuTsQ\",\"Yp7uvStL97cC9fKkY\",\"g4NCSxxHqHCGMpWwT\",\"zw7g7T8wE5R5CBhXr\",\"m6qKkBY4aPWziyJTj\",\"zd9FLSzsGz3evKafy\",\"dg7mFJMKheFwyBRuy\",\"yjtdwc2AC4jA2RWtn\",\"CNc6rmwhbxkxEhHAp\",\"u9cRf5kvtpRB5ffB3\",\"tmNCt5RQHnPm9wTEb\",\"MmYAgjtRNfD22Y7BT\",\"PXh9wLMpeqJoqDiQN\",\"wJTDDTE3TrmSXKP4d\",\"8s5Bdrn7RTga7DL6x\",\"Po3v3dHCk6wYGKMwi\",\"jd9sRTnsyeKpPggba\",\"FJsvM5yqKuK9yMk9P\",\"pd8dm7sWLW9cY6dYW\",\"bX6tpTCjwoi6XMMbK\",\"QRv96jmNaYsWkxQEG\",\"ceMycDhXzsRojnr9F\",\"RE4Mm9T6Q9uygAxGS\",\"AFfw7cGg83uYk2Miy\",\"pMxDFFGrSfHCQAW2k\",\"QvEXmSEo3ANp3yPyH\",\"jyoLggHk8xQKZuoQC\",\"oDtGiNqDMHmhHE3J8\",\"HpfaNWBYpnsQRAPQn\",\"WnogMFYXoyvmBmGkm\",\"Q78NJZkqtLp5qz4sr\"],\"total\":37},\"flags\":0},\"summary\":\"Given a two-dimensional array of maze and an array of directions. Your task is to follow the given directions.\\nIf you can reach the endpoint before all your moves have gone, return \\\"Finish\\\".\\nIf you hit any walls or go outside the maze border, return \\\"Dead\\\".\\nIf you find yourself still in the maze after using all the moves, return \\\"Lost\\\".\\n\\nThe maze array will lo\",\"tags\":[\"games\",\"arrays\",\"logic\",\"loops\"],\"timestamp\":{\"$date\":1607589268579},\"title\":\"Maze Escape\",\"family\":[{\"_id\":\"aeKeTPyv8h9PjFugi\",\"language\":\"cpp\"},{\"_id\":\"HSprZxYCc3KxysAoK\",\"language\":\"javascript\"},{\"_id\":\"tbz5ji3ocwzAeLQNa\",\"language\":\"python3\"},{\"_id\":\"4muETAtifYGeGzomy\",\"language\":\"ruby\"}]}}"]