a["{\"msg\":\"result\",\"id\":\"2387\",\"result\":{\"_id\":\"ZkYHTLivZgtn2SZwr\",\"author\":\"Mubashir Hassan \",\"authorId\":\"T6iBEE2jp7f7iEF2P\",\"code\":\"function remainders(arr) {\\n\\t\\n}\\t\",\"difficulty\":4.285714285714286,\"familyId\":\"JAw9dC3fEMTxbSvf5\",\"instructions\":\"Create a function that finds a number _n_ so that _n mod y = x_,  given an array of _x-y pairs_, where (0 ≤ _n_ ≤ product of all _y_'s).\\n\\nThis challenge is related to the [Chinese Remainder Theorem](https://en.wikipedia.org/wiki/Chinese_remainder_theorem), which states that there is one and only one integer _n_ that is congruent with a number of divisors (called _moduli_) and their remainders for _n_ so long as those moduli are coprime, where _n_ is comprised between 0 and the product of all moduli.\\n\\nFor example, there is only one value between 0 and 3 × 4 × 5 = 60 for _n_ so that:\\n- n mod 3 = 0\\n- n mod 4 = 3\\n- n mod 5 = 4\\n\\nHere, _n_ = 39 because 39 mod 3 = 0, 39 mod 4 = 3, and 39 mod 5 = 4, and 3 and 4 are coprime, and so are 3 and 5, and 4 and 5.  The numbers -21 and 99 would also be congruent with the moduli and remainders given, but we will not be considering those as they aren't in the range (0, 60).\\n\\nYour input will be an array with a number of tuples in the form `(remainder, modulo)` and the output should be a number _n_ congruent with those moduli and remainders.\\n\\n### Examples\\n```\\nremainders([[0, 3], [3, 4], [4, 5]]) ➞ 39\\n// 39 mod 3 = 0, 39 mod 4 = 3 and 39 mod 5 = 4\\n\\nremainders([[1, 2],  [8, 9]]) ➞ 17\\n// 17 mod 2 = 1 and 17 mod 9 = 8\\n\\nremainders([[0, 15], [7, 16], [2, 17]]) ➞ 2535\\n// 2535 mod 15 = 0, 2535 mod 16 = 7 and 2535 mod 17 = 2\\n```\\n\\n### Notes\\n- You don't need to check for co-primality. Assume all moduli in the input will be coprime.\\n- An input will be at least one tuple.\\n- Test cases will include large numbers (check for efficiency).\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assertEquals(remainders([[6, 10]]), 6)\\nTest.assertEquals(remainders([[0, 500]]), 0)\\nTest.assertEquals(remainders([[0, 3], [3, 4], [4, 5]]), 39)\\nTest.assertEquals(remainders([[1, 2],  [8, 9]]), 17)\\nTest.assertEquals(remainders([[0, 15], [7, 16], [2, 17]]), 2535)\\nTest.assertEquals(remainders([[4, 7], [2, 3], [2, 4], [3, 11], [8, 17]]), 1334)\\nTest.assertEquals(remainders([[7, 14], [15, 23], [3, 5]]), 1533)\\nTest.assertEquals(remainders([[26, 100], [523, 809]]), 54726)\\nTest.assertEquals(remainders([[2, 83], [845, 991], [166, 200]]), 1220766)\\nTest.assertEquals(remainders([[56, 79], [8, 9], [102, 169], [8, 10], [14, 49]]), 21215348)\\nTest.assertEquals(remainders([[8, 9], [2, 4], [1, 5], [0, 13], [40, 43], [0, 7], [1, 11], [5, 29]]), 145587806)\\nTest.assertEquals(remainders([[1, 3], [4, 5], [4, 13], [4, 43], [4, 7], [0, 2], [4, 29]]), 4)\",\"language\":\"javascript\",\"quality\":0,\"summary\":\"Create a function that finds a number n so that n mod y = x,  given an array of x-y pairs, where (0 ≤ n ≤ product of all y's).\\n\\nThis challenge is related to the Chinese Remainder Theorem, which states that there is one and only one integer n that is congruent with a number of divisors (called moduli) and their remainders for n so long as those moduli are copri\",\"tags\":[\"math\",\"numbers\",\"algorithms\"],\"timestamp\":{\"$date\":1608805751648},\"title\":\"Chinese Remainders\",\"stats\":{\"completed\":{\"total\":4,\"ratings\":[5,5,5,5,5,1,4],\"quality\":[],\"rators\":[\"yjtdwc2AC4jA2RWtn\",\"8BJyXvRWcrvN3nttS\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"kGJZN2g4NeRAz2zKZ\",\"language\":\"cpp\"},{\"_id\":\"ZkYHTLivZgtn2SZwr\",\"language\":\"javascript\"},{\"_id\":\"tNBgMoebvrhQ7ft6J\",\"language\":\"python3\"},{\"_id\":\"wgtJGMRX2t7Zbghg3\",\"language\":\"ruby\"}]}}"]