a["{\"msg\":\"result\",\"id\":\"1493\",\"result\":{\"_id\":\"ZYJNYe2tKhG2kb7Sh\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"function possiblyPerfect(key, answers) {\\n\\t\\n}\",\"difficulty\":2.183673469387755,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"wKwmRgvzD2NYTB6Mz\",\"instructions\":\"Suppose a student can earn 100% on an exam by getting the answers all correct or all incorrect. Given a **potentially incomplete** answer key and the student's answers, write a function that determines whether or not a student can still score 100%. Questions with missing answers are marked with an underscore, `\\\"_\\\"`.\\n\\n```\\n[\\\"A\\\", \\\"_\\\", \\\"C\\\", \\\"_\\\", \\\"B\\\"]   // answer key\\n[\\\"A\\\", \\\"D\\\", \\\"C\\\", \\\"E\\\", \\\"B\\\"]   // student's solution\\n\\n➞ true\\n\\n// Possible for student to get all questions correct.\\n\\n[\\\"B\\\", \\\"_\\\", \\\"B\\\"]   // answer key\\n[\\\"B\\\", \\\"D\\\", \\\"C\\\"]   // student's solution\\n\\n➞ false\\n\\n// First question is correct but third is wrong, so not possible to score 100%.\\n\\n[\\\"T\\\", \\\"_\\\", \\\"F\\\", \\\"F\\\", \\\"F\\\"]   // answer key\\n[\\\"F\\\", \\\"F\\\", \\\"T\\\", \\\"T\\\", \\\"T\\\"]   // student's solution\\n\\n➞ true\\n\\n// Possible for student to get all questions incorrect.\\n```\\n\\n### Examples\\n```\\npossiblyPerfect([\\\"B\\\", \\\"A\\\", \\\"_\\\", \\\"_\\\"], [\\\"B\\\", \\\"A\\\", \\\"C\\\", \\\"C\\\"]) ➞ true\\n\\npossiblyPerfect([\\\"A\\\", \\\"B\\\", \\\"A\\\", \\\"_\\\"], [\\\"B\\\", \\\"A\\\", \\\"C\\\", \\\"C\\\"]) ➞ true\\n\\npossiblyPerfect([\\\"A\\\", \\\"B\\\", \\\"C\\\", \\\"_\\\"], [\\\"B\\\", \\\"A\\\", \\\"C\\\", \\\"C\\\"]) ➞ false\\n\\npossiblyPerfect([\\\"B\\\", \\\"_\\\"], [\\\"C\\\", \\\"A\\\"]) ➞ true\\n\\npossiblyPerfect([\\\"B\\\", \\\"A\\\"], [\\\"C\\\", \\\"A\\\"]) ➞ false\\n\\npossiblyPerfect([\\\"B\\\"], [\\\"B\\\"]) ➞ true\\n```\\n\\n### Notes\\nTest has at least one question.\",\"lab\":\"Test.assertEquals(possiblyPerfect(['A', '_', 'C', '_', 'B'], ['A', 'D', 'C', 'E', 'B']), true)\\nTest.assertEquals(possiblyPerfect(['B', '_', 'B'], ['B', 'D', 'C']), false)\\nTest.assertEquals(possiblyPerfect(['T', '_', 'F', 'F', 'F'], ['F', 'F', 'T', 'T', 'T']), true)\\n\\nTest.assertEquals(possiblyPerfect(['B', 'A', '_', '_'], ['B', 'A', 'C', 'C']), true)\\nTest.assertEquals(possiblyPerfect(['A', 'B', 'A', '_'], ['B', 'A', 'C', 'C']), true)\\nTest.assertEquals(possiblyPerfect(['A', 'B', 'C', '_'], ['B', 'A', 'C', 'C']), false)\\n\\nTest.assertEquals(possiblyPerfect(['B', '_'], ['C', 'A']), true)\\nTest.assertEquals(possiblyPerfect(['B', 'A'], ['C', 'A']), false)\\nTest.assertEquals(possiblyPerfect(['B'], ['B']), true)\\n\\nTest.assertEquals(possiblyPerfect(['_', 'T', '_', '_'], ['T', 'F', 'F', 'F']), true)\\nTest.assertEquals(possiblyPerfect(['_', 'T', '_', '_'], ['T', 'T', 'F', 'T']), true)\\nTest.assertEquals(possiblyPerfect(['_', 'T', 'T', 'T'], ['T', 'T', 'F', 'T']), false)\\nTest.assertEquals(possiblyPerfect(['_', 'T', 'T', 'T'], ['T', 'T', 'T', 'T']), true)\\nTest.assertEquals(possiblyPerfect(['_', 'T', 'T', 'T'], ['F', 'F', 'F', 'F']), true)\",\"language\":\"javascript\",\"summary\":\"Suppose a student can earn 100% on an exam by getting the answers all correct or all incorrect. Given a potentially incomplete answer key and the student's answers, write a function that determines whether or not a student can still score 100%. Questions with missing answers are marked with an underscore, \\\"_\\\".\\n\\n[\\\"A\\\", \\\"\\\", \\\"C\\\", \\\"\\\", \\\"B\\\"]   // answer key\\n[\\\"A\\\", \\\"D\\\"\",\"tags\":[\"arrays\",\"validation\"],\"timestamp\":{\"$date\":1552779823181},\"title\":\"All or Nothing\",\"stats\":{\"completed\":{\"total\":51,\"ratings\":[2,2,2,2,2,2,2,2,2,2,2,3,3,1,3,2,2,3,3,2,2,3,2,3,2,3,2,0,2,2,4,3,2,2,2,3,2,1,1,0,3,3,3,2,3,2,2,3,1],\"rators\":[\"mNMQvcxKSSvqqMYCH\",\"65dbBZynphj53nXqA\",\"KzMMvGnXcWGTmRE7F\",\"2innwjWqxJHo4eRGh\",\"SDtZFL5NzAoCPofXk\",\"8xuMMGF7fyQWL2fKH\",\"n5wubRfh6zh8QRymN\",\"CJnuSjyCBMTbTiibD\",\"GCxj7RJCeWYNxj8oQ\",\"EjPLq3QSJdGQFJdgW\",\"wcjknenWdPRhrRScv\",\"EWn8w8P3nNh7knatY\",\"Y9Nz9yafaibz54W4o\",\"yjtdwc2AC4jA2RWtn\",\"5Zq3aGdvh4LHBvnJL\",\"AasGs8AeX9Lcb9xJn\",\"6BpBQnSGhzgvhXrEy\",\"mHT2bJb5SByfJ8yKS\",\"DHwbkbzYNpmkSFT7u\",\"FJsvM5yqKuK9yMk9P\",\"bYmXzsJMCWjCQyfeW\",\"YER6iBcpJCuhgrYDN\",\"a777e8chPvJkY3tKa\",\"sBcsrC5paZm9nxjot\",\"XmfWzucPorqRb97C8\",\"RE4Mm9T6Q9uygAxGS\",\"buX4mCQhtXCfBjeno\",\"xn7uGNKeAwPEkP9oA\",\"aEm3Wvj2rFYRL8Lrb\",\"4Xv87xmdSnpYhi8hz\",\"kp2ZbCewZJAbfd7xv\",\"M4vq8ATaS9Jg5X7iP\",\"CNc6rmwhbxkxEhHAp\",\"KQCRAD6qhAqeAbWYu\",\"8BJyXvRWcrvN3nttS\",\"g4NCSxxHqHCGMpWwT\",\"DPi9QGLctq2y76KuE\",\"8Z3dkvWBqtrMEE48N\",\"6ebrCvp8uXBsTuwrA\",\"QRv96jmNaYsWkxQEG\",\"2Qk2mFu9HBFzrB24i\",\"RtPhDuwmvWNHiBxmG\",\"zza5WjC8QrHcoDZBF\",\"9YZicvjt6mJATyBjZ\",\"NGvCPuMiAP3xrRLfB\",\"J7d397iB5GuWRAMfg\",\"BKyhP7chJmfBvs6eC\",\"oDtGiNqDMHmhHE3J8\",\"Ya3eHgs8x3unZRLpb\",\"ogS7n36gadn92Gz4u\",\"oT4WpbonbZGojoBja\"],\"quality\":[5,5,4,4,5,3,5,5,2,3,5]},\"tests\":{\"score\":0,\"voters\":[\"mNMQvcxKSSvqqMYCH\"]},\"instructions\":{\"score\":0,\"voters\":[\"mNMQvcxKSSvqqMYCH\"]},\"flags\":0},\"isHidden\":false,\"quality\":4.181818181818182,\"family\":[{\"_id\":\"K7Qq7HXhJWh3tgwKD\",\"language\":\"cpp\"},{\"_id\":\"ZYJNYe2tKhG2kb7Sh\",\"language\":\"javascript\"},{\"_id\":\"c68jXSBRRmhcmFSLm\",\"language\":\"php\"},{\"_id\":\"26P2iwW5WfwPGJyWE\",\"language\":\"python3\"},{\"_id\":\"ATciu97J3bMgwHQyk\",\"language\":\"ruby\"}]}}"]