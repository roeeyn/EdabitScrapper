a["{\"msg\":\"result\",\"id\":\"2407\",\"result\":{\"_id\":\"8ezPNZZpLTzCHotmw\",\"author\":\"xAlien95\",\"authorId\":\"cRpaCxYRmGcN3Nsoj\",\"code\":\"function polygonName(n) {\\n\\t\\n}\",\"difficulty\":4.5,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"qMFzFBHHFAt5WYLK8\",\"instructions\":\"Every **polygon** has an official name. Individual polygons are named according to the number of sides, combining a Greek-derived numerical prefix with the suffix _-gon_, e.g. _pentagon_, _dodecagon_.\\n\\nWrite a function that takes an integer `n` as argument and returns the official name of a n-sided polygon.\\n\\nThe following prefixes table is used to construct the name of a polygon.\\n\\n|| Ones || Tens || Hundreds\\n-:| - | -:| - | -:| -\\n1 | hena-, hen- | 10 | deca- | 100 | hecta-\\n2 | di-, do- | 20 | icosi-, icosa- | 200 | dohecta-\\n3 | tri-, tria- | 30 | triaconta- | 300 | triahecta-\\n4 | tetra- | 40 | tetraconta- | 400 | tetrahecta-\\n5 | penta- | 50 | pentaconta- | 500 | pentahecta-\\n6 | hexa- | 60 | hexaconta- | 600 | hexahecta-\\n7 | hepta- | 70 | heptaconta- | 700 | heptahecta-\\n8 | octa- | 80 | octaconta- | 800 | octahecta-\\n9 | ennea- | 90 | enneaconta- | 900 | enneahecta-\\n\\nFor polygons with 3 through 9 sides, simply add \\\"-gon\\\" to the ones prefixes. For 10 through 99 sides, you return the tens prefix followed by the ones prefix and then by \\\"-gon\\\". For 100 through 999 sides, you start from the hundreds prefix, then add the tens prefix and finally the ones prefix followed by \\\"-gon\\\".\\n\\nFor polygons with more than 999 sides, the following prefixes are used similarly to how \\\"conta-\\\" and \\\"hecta-\\\" are used for tens and hundreds places respectively:\\n\\nPlace | Prefix\\n-:| -\\n10 | conta-\\n100 | hecta-\\n1000 | chilia-\\n10,000 | myria-\\n100,000 | decamyria-\\n200,000 | icosamyria-\\n300,000 | triacontamyria-\\n1,000,000 | mega-\\n1,000,000,000 | giga-\\n1,000,000,000,000 | tera-\\n\\nAnd finally, the 10¹⁰⁰-gon is called **googolgon** and the ∞-gon (with a countable infinite number of sides) is called **apeirogon**.\\n\\n### Examples\\n```\\npolygonName(3) ➞ \\\"triangle\\\"\\n// exception of: tri-gon\\n\\npolygonName(4) ➞ \\\"quadrilateral\\\"\\n// exception of: tetra-gon\\n\\npolygonName(5) ➞ \\\"pentagon\\\"\\n// penta-gon\\n\\npolygonName(7) ➞ \\\"heptagon\\\"\\n// hepta-gon\\n\\npolygonName(19) ➞ \\\"enneadecagon\\\"\\n// ennea-deca-gon\\n\\npolygonName(36) ➞ \\\"triacontahexagon\\\"\\n// triaconta-hexa-gon\\n\\npolygonName(428) ➞ \\\"tetrahectaicosioctagon\\\"\\n// tetrahecta-icosi-octa-gon\\n\\npolygonName(12345) ➞ \\\"myriadichiliatriahectatetracontapentagon\\\"\\n// myria-dichilia-triahecta-tetraconta-penta-gon\\n```\\n\\n### Notes\\n- The triangle, quadrilateral and nonagon are exceptions, although the regular forms _trigon_, _tetragon_, and _enneagon_ are sometimes encountered as well.\\n- Check **Tests** to spot other exceptions.\",\"isHidden\":false,\"lab\":\"Test.assertEquals(polygonName(1), \\\"henagon\\\")\\nTest.assertEquals(polygonName(2), \\\"digon\\\")\\nTest.assertEquals(polygonName(3), \\\"triangle\\\")\\nTest.assertEquals(polygonName(4), \\\"quadrilateral\\\")\\nTest.assertEquals(polygonName(5), \\\"pentagon\\\")\\nTest.assertEquals(polygonName(6), \\\"hexagon\\\")\\nTest.assertEquals(polygonName(7), \\\"heptagon\\\")\\nTest.assertEquals(polygonName(8), \\\"octagon\\\")\\nTest.assertEquals(polygonName(9), \\\"nonagon\\\")\\nTest.assertEquals(polygonName(10), \\\"decagon\\\")\\nTest.assertEquals(polygonName(11), \\\"hendecagon\\\")\\nTest.assertEquals(polygonName(12), \\\"dodecagon\\\")\\nTest.assertEquals(polygonName(13), \\\"tridecagon\\\")\\nTest.assertEquals(polygonName(14), \\\"tetradecagon\\\")\\nTest.assertEquals(polygonName(15), \\\"pentadecagon\\\")\\nTest.assertEquals(polygonName(16), \\\"hexadecagon\\\")\\nTest.assertEquals(polygonName(17), \\\"heptadecagon\\\")\\nTest.assertEquals(polygonName(18), \\\"octadecagon\\\")\\nTest.assertEquals(polygonName(19), \\\"enneadecagon\\\")\\nTest.assertEquals(polygonName(20), \\\"icosagon\\\")\\nTest.assertEquals(polygonName(21), \\\"icosihenagon\\\")\\nTest.assertEquals(polygonName(22), \\\"icosidigon\\\")\\nTest.assertEquals(polygonName(23), \\\"icositrigon\\\")\\nTest.assertEquals(polygonName(24), \\\"icositetragon\\\")\\nTest.assertEquals(polygonName(25), \\\"icosipentagon\\\")\\nTest.assertEquals(polygonName(26), \\\"icosihexagon\\\")\\nTest.assertEquals(polygonName(27), \\\"icosiheptagon\\\")\\nTest.assertEquals(polygonName(28), \\\"icosioctagon\\\")\\nTest.assertEquals(polygonName(29), \\\"icosienneagon\\\")\\nTest.assertEquals(polygonName(30), \\\"triacontagon\\\")\\nTest.assertEquals(polygonName(31), \\\"triacontahenagon\\\")\\nTest.assertEquals(polygonName(32), \\\"triacontadigon\\\")\\nTest.assertEquals(polygonName(33), \\\"triacontatrigon\\\")\\nTest.assertEquals(polygonName(34), \\\"triacontatetragon\\\")\\nTest.assertEquals(polygonName(35), \\\"triacontapentagon\\\")\\nTest.assertEquals(polygonName(36), \\\"triacontahexagon\\\")\\nTest.assertEquals(polygonName(37), \\\"triacontaheptagon\\\")\\nTest.assertEquals(polygonName(38), \\\"triacontaoctagon\\\")\\nTest.assertEquals(polygonName(39), \\\"triacontaenneagon\\\")\\nTest.assertEquals(polygonName(40), \\\"tetracontagon\\\")\\nTest.assertEquals(polygonName(41), \\\"tetracontahenagon\\\")\\nTest.assertEquals(polygonName(42), \\\"tetracontadigon\\\")\\nTest.assertEquals(polygonName(47), \\\"tetracontaheptagon\\\")\\nTest.assertEquals(polygonName(73), \\\"heptacontatrigon\\\")\\nTest.assertEquals(polygonName(88), \\\"octacontaoctagon\\\")\\nTest.assertEquals(polygonName(89), \\\"octacontaenneagon\\\")\\nTest.assertEquals(polygonName(90), \\\"enneacontagon\\\")\\nTest.assertEquals(polygonName(99), \\\"enneacontaenneagon\\\")\\nTest.assertEquals(polygonName(100), \\\"hectagon\\\")\\nTest.assertEquals(polygonName(101), \\\"hectahenagon\\\")\\nTest.assertEquals(polygonName(102), \\\"hectadigon\\\")\\nTest.assertEquals(polygonName(110), \\\"hectadecagon\\\")\\nTest.assertEquals(polygonName(111), \\\"hectahendecagon\\\")\\nTest.assertEquals(polygonName(112), \\\"hectadodecagon\\\")\\nTest.assertEquals(polygonName(113), \\\"hectatridecagon\\\")\\nTest.assertEquals(polygonName(118), \\\"hectaoctadecagon\\\")\\nTest.assertEquals(polygonName(120), \\\"hectaicosagon\\\")\\nTest.assertEquals(polygonName(121), \\\"hectaicosihenagon\\\")\\nTest.assertEquals(polygonName(127), \\\"hectaicosiheptagon\\\")\\nTest.assertEquals(polygonName(130), \\\"hectatriacontagon\\\")\\nTest.assertEquals(polygonName(164), \\\"hectahexacontatetragon\\\")\\nTest.assertEquals(polygonName(183), \\\"hectaoctacontatrigon\\\")\\nTest.assertEquals(polygonName(195), \\\"hectaenneacontapentagon\\\")\\nTest.assertEquals(polygonName(200), \\\"dohectagon\\\")\\nTest.assertEquals(polygonName(250), \\\"dohectapentacontagon\\\")\\nTest.assertEquals(polygonName(255), \\\"dohectapentacontapentagon\\\")\\nTest.assertEquals(polygonName(360), \\\"triahectahexacontagon\\\")\\nTest.assertEquals(polygonName(722), \\\"heptahectaicosidigon\\\")\\nTest.assertEquals(polygonName(999), \\\"enneahectaenneacontaenneagon\\\")\\nTest.assertEquals(polygonName(1000), \\\"chiliagon\\\")\\nTest.assertEquals(polygonName(1001), \\\"chiliahenagon\\\")\\nTest.assertEquals(polygonName(1011), \\\"chiliahendecagon\\\")\\nTest.assertEquals(polygonName(1111), \\\"chiliahectahendecagon\\\")\\nTest.assertEquals(polygonName(2222), \\\"dichiliadohectaicosidigon\\\")\\nTest.assertEquals(polygonName(3333), \\\"trichiliatriahectatriacontatrigon\\\")\\nTest.assertEquals(polygonName(4567), \\\"tetrachiliapentahectahexacontaheptagon\\\")\\nTest.assertEquals(polygonName(7090), \\\"heptachiliaenneacontagon\\\")\\nTest.assertEquals(polygonName(10_000), \\\"myriagon\\\")\\nTest.assertEquals(polygonName(10_002), \\\"myriadigon\\\")\\nTest.assertEquals(polygonName(10_203), \\\"myriadohectatrigon\\\")\\nTest.assertEquals(polygonName(11_111), \\\"myriachiliahectahendecagon\\\")\\nTest.assertEquals(polygonName(12_345), \\\"myriadichiliatriahectatetracontapentagon\\\")\\nTest.assertEquals(polygonName(22_222), \\\"dimyriadichiliadohectaicosidigon\\\")\\nTest.assertEquals(polygonName(30_000), \\\"trimyriagon\\\")\\nTest.assertEquals(polygonName(56_789), \\\"pentamyriahexachiliaheptahectaoctacontaenneagon\\\")\\nTest.assertEquals(polygonName(100_000), \\\"decamyriagon\\\")\\nTest.assertEquals(polygonName(123_123), \\\"dodecamyriatrichiliahectaicositrigon\\\")\\nTest.assertEquals(polygonName(136_136), \\\"tridecamyriahexachiliahectatriacontahexagon\\\")\\nTest.assertEquals(polygonName(148_148), \\\"tetradecamyriaoctachiliahectatetracontaoctagon\\\")\\nTest.assertEquals(polygonName(200_000), \\\"icosamyriagon\\\")\\nTest.assertEquals(polygonName(202_020), \\\"icosamyriadichiliaicosagon\\\")\\nTest.assertEquals(polygonName(242_424), \\\"icositetramyriadichiliatetrahectaicositetragon\\\")\\nTest.assertEquals(polygonName(369_369), \\\"triacontahexamyriaenneachiliatriahectahexacontaenneagon\\\")\\nTest.assertEquals(polygonName(700_000), \\\"heptacontamyriagon\\\")\\nTest.assertEquals(polygonName(1_000_000), \\\"megagon\\\")\\nTest.assertEquals(polygonName(1_000_001), \\\"megahenagon\\\")\\nTest.assertEquals(polygonName(1_010_101), \\\"megamyriahectahenagon\\\")\\nTest.assertEquals(polygonName(2_233_445), \\\"dimegaicositrimyriatrichiliatetrahectatetracontapentagon\\\")\\nTest.assertEquals(polygonName(3_456_789), \\\"trimegatetracontapentamyriahexachiliaheptahectaoctacontaenneagon\\\")\\nTest.assertEquals(polygonName(23_456_789), \\\"icositrimegatetracontapentamyriahexachiliaheptahectaoctacontaenneagon\\\")\\nTest.assertEquals(polygonName(123_456_789), \\\"hectaicositrimegatetracontapentamyriahexachiliaheptahectaoctacontaenneagon\\\")\\nTest.assertEquals(polygonName(246_369_000), \\\"dohectatetracontahexamegatriacontahexamyriaenneachiliagon\\\")\\nTest.assertEquals(polygonName(1_000_000_000), \\\"gigagon\\\")\\nTest.assertEquals(polygonName(2_101_232_101), \\\"digigahectahenamegaicositrimyriadichiliahectahenagon\\\")\\nTest.assertEquals(polygonName(22_022_022_022), \\\"icosidigigaicosidimegadimyriadichiliaicosidigon\\\")\\nTest.assertEquals(polygonName(1_000_000_000_000), \\\"teragon\\\")\\nTest.assertEquals(polygonName(999_999_999_999_999), \\\"enneahectaenneacontaenneateraenneahectaenneacontaenneagigaenneahectaenneacontaenneamegaenneacontaenneamyriaenneachiliaenneahectaenneacontaenneagon\\\")\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,5,5,5,5,5,5,0,3,5],\"rators\":[\"cRpaCxYRmGcN3Nsoj\",\"yjtdwc2AC4jA2RWtn\",\"YER6iBcpJCuhgrYDN\",\"a777e8chPvJkY3tKa\",\"7TXyMDHFYjna3dyPb\",\"aEm3Wvj2rFYRL8Lrb\",\"Ygy4NA6ih4QK7DpmJ\",\"va3fDAQm4sqSMoy3R\",\"mDWNyaaQ9hvPCRzSd\"],\"total\":10,\"quality\":[]},\"flags\":0},\"summary\":\"Every polygon has an official name. Individual polygons are named according to the number of sides, combining a Greek-derived numerical prefix with the suffix -gon, e.g. pentagon, dodecagon.\\n\\nWrite a function that takes an integer n as argument and returns the official name of a n-sided polygon.\\n\\nThe following prefixes table is used to construct the name of a\",\"tags\":[\"strings\",\"data_structures\"],\"timestamp\":{\"$date\":1580569091811},\"title\":\"Who's That Polygon?\",\"quality\":0,\"family\":[{\"_id\":\"2mDESM9ex6wvuN4BZ\",\"language\":\"cpp\"},{\"_id\":\"8ezPNZZpLTzCHotmw\",\"language\":\"javascript\"},{\"_id\":\"LkD2sM45i269Nr8NL\",\"language\":\"python3\"},{\"_id\":\"xqsJZLzEQSdihewEt\",\"language\":\"ruby\"}]}}"]