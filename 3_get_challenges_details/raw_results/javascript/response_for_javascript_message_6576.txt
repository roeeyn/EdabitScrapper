a["{\"msg\":\"result\",\"id\":\"2032\",\"result\":{\"_id\":\"ifDM26p25bqS8EsFu\",\"author\":\"David Newman\",\"authorId\":\"Po3v3dHCk6wYGKMwi\",\"code\":\"class Player {\\n\\t\\n}\",\"difficulty\":2.857142857142857,\"editorId\":\"Po3v3dHCk6wYGKMwi\",\"familyId\":\"tKf8YPkK6SqRiQ7me\",\"instructions\":\"Having gotten rather sick of always being paired together in sciency literature, Alice and Bob have decided to finally settle their differences with a magical duel. They'll each learn some skills and then battle it out.\\n\\n### Your Goal\\nYour job is to write the class `Player` which will handle all the combat mechanics. \\n\\n\\n### Properties\\nLet's look at the `Player` class's properties first. You'll need:\\n - A private health variable `hp`. Make sure it's private!\\n - A private maxHealth variable `maxHp`. Again, make sure it's private.\\n - A private energy variable `en`. Again, make sure it's private.\\n - A private maxEnergy variable `maxEn`. You know the drill by now.\\n - Getters and setters for health and energy:\\n    - These should be named `hp` and `en`, respectively. \\n    - They should be \\\"capped\\\". That is, you cannot have less than 0 health or energy, and your health and/or energy cannot be greater than their respective \\\"max\\\" values.\\n - An armor value. This is public.\\n - A name. This is also public.\\n - A getter for health percent, called `hpPerc`. Please return this value rounded to two decimal places.\\n\\nNow that that's out of the way, let's look at our single method (other than the aforementioned getters and setters):\\n\\n---\\n\\n### `learnSkill()` Method\\nYour class must implement a single method called `learnSkill`. \\n\\n### Basics/Functionality\\nThis method takes two parameters: a skill name (e.g., \\\"fireball\\\"), and an object containing skill statistics (more on that below!).\\n\\nMost importantly, after adding a skill:\\n\\n```\\nalice.learnSkill(\\\"fireball\\\",{ //stats (see below)})\\n```\\n\\nyou should then be able to *call* that skill as you'd normally call a method on your Player instance, with the target passed as a parameter:\\n\\n```\\nalice.fireball(bob);\\n```\\nwhere the name of the method is merely the skill name passed in. Keep in mind that some skills may have two-part names, so you'll need to factor that in when creating your method.\\n\\nIn general, using the skill should return a string describing what happened, as well as changing the relevant numbers on both the target and \\\"caster\\\".\\n\\n### `stats` Object\\nYour stats object has the following properties:\\n```\\n{\\n    damage: the raw damage done (assuming 0 effective armor),\\n    description: the description of the attack (for humans to read),\\n    penetration: Armor penetration amount (see \\\"Armor\\\" below),\\n    cost: Cost, in energy points,\\n    heal: Optional heal value (some skills heal the caster on cast!)\\n}\\n```\\n\\n### Logic\\n**Armor:** Your `learnSkill` method will start out by subtracting an armor `penetration` stat from the target's armor value to get an \\\"effective armor\\\" value. That is, if Alice attacks Bob with a skill with 5 armor penetration, and Bob's armor is 50, then Bob's effective armor for this attack is 50-5 = 45.\\n\\n**Energy:**\\nIf the skill costs more energy than the character currently has, return `(player name) attempted to use (skill name), but didn't have enough energy!`. Otherwise, subtract the energy cost from the character's energy, and continue.\\n\\n**Damage:**\\nDamage here is pretty easy. Consider that the minimum armor value is 0, the maximum is 100, and each percent effective armor decreases damage by one percent. An example:\\n```\\nAlice attacks Bob for 50 damage. Bob's effective armor rating is 25.\\nAlice does 50*((100-25)/100) = 37.5 damage.\\n```\\n\\n**Attack String:**\\nYou'll need to return a string describing what happened.\\nThe first part of the returned string should describe the attack itself, and should look like this: `(attacking player name) used skill (skill name), (skill description), against (target name), doing (calculated damage) damage! `. For the damage calculation, please round your value to *two* decimal places.\\n\\nNext, if the skill healed, append `(attacking player name) healed for (heal amount) health. `. \\n\\nFinally, if the target player died, append `(target name) died.`. Otherwise, append `(target name is at (targ hpPerc) % health.`\\n\\nReturn this string, and don't forget to actually apply the damage/health changes!\\n\\n\\n### Example\\n```\\nconst alice = new Player(\\\"Alice\\\", 110, 50, 10)\\nconst bob = new Player(\\\"Bob\\\", 100, 60, 20)\\n\\nalice.learnSkill(\\\"fireball\\\", {\\n    damage: 23,\\n    penetration: 1.2,\\n    heal: 5,\\n    cost: 15,\\n    desc: \\\"a firey magical attack\\\"\\n})\\n\\nconsole.log(alice.fireball(bob))\\n// Alice used fireball, a firey magical attack, against Bob, doing\\n// 18.68 damage! Alice healed for 5 health! Bob is at 81.32% health.\\n\\nbob.learnSkill(\\\"superbeam\\\", {\\n  damage:200,\\n  penetration:50,\\n  heal:50,\\n  cost:75,\\n  desc: \\\"an overpowered attack, pls nerf\\\"\\n})\\n\\nconsole.log(bob.superbeam(alice))\\n// Bob attempted to use superbeam, but didn't have enough energy!\\n```\\n\\n### Notes\\n - In many fighting games, skills \\\"pick\\\" from a *range* of possible damage values. For the sake of simplicity (and testing!), assume that each skill does a specific, set damage number (factoring everything else in, of course).\\n  - Don't worry about preventing a \\\"dead\\\" player from attacking.\\n  - Pay *very* close attention to the exact format of the returned \\\"attack\\\" string! I'm comparing that directly with an expected result string, so even something like a missing space could ruin your answer.\\n  - Your `Player` instances will be constructed as `new Player(name,health,energy,armor)`\",\"isFree\":false,\"isHidden\":false,\"lab\":\"console.log('----FIGHT!----')\\n//player class exists\\nconst alice = new Player('Alice',110,50,10);\\nconst bob = new Player('Bob',100,60,20);\\nconsole.log('Does our Player class exist?')\\nTest.assertEquals(bob instanceof Player && alice instanceof Player, true,`Alice and Bob don't seem to be instances of the player class.`)\\n\\n//learn skill\\nconsole.log(\\\"\\\\n----\\\\nCan our competitors learn new skills?\\\")\\nTest.assertEquals(typeof alice.learnSkill,'function','Missing `learnSkill` method!')\\n\\n//skill is function\\nconsole.log('\\\\n----\\\\nDoes the learnSkill method allow us to add a skill?')\\nalice.learnSkill('fireball',{\\n    damage: 23,\\n    penetration: 1.2,\\n    heal: 0,\\n    cost: 15,\\n    desc: 'a firey magical attack'\\n});\\nTest.assertEquals(typeof alice.fireball,'function','Could not learn skill \\\"Fireball\\\"!')\\n\\n//cast skill\\nconsole.log('\\\\n----\\\\nCan we cast our new skill?')\\n\\nTest.assertEquals(alice.fireball(bob),'Alice used fireball, a firey magical attack, against Bob, doing 18.68 damage! Bob is at 81.32% health.','Using Fireball returned the wrong string!')\\n\\n//too high energy cost?\\nconsole.log('\\\\n----\\\\nWhat about skills with too high an energy cost?')\\nbob.learnSkill('superbeam',{\\n\\tdamage:200,\\n  penetration:50,\\n  heal:50,\\n  cost:75,\\n  desc: \\\"an overpowered attack, pls nerf\\\"\\n})\\n\\nTest.assertEquals(bob.superbeam(alice),`Bob attempted to use superbeam, but didn't have enough energy!`,'Bob should return that he cannot use this skill!')\\n\\n//can get a player's HP percent and energy\\nconsole.log(\\\"\\\\n----\\\\nAfter that devastating attack, let's check in on Alice and Bob:\\\")\\nTest.assertEquals(bob.hpPerc+'% health','81.32% health',`Bob should be at 81.32% health`)\\nTest.assertEquals(alice.en+' energy','35 energy',`Alice's energy should be 35.`)\\n\\n//Combo attack\\nconsole.log(\\\"\\\\n----\\\\nBut wait! Bob's back in action!\\\")\\nbob.learnSkill('Meteor Strike',{\\n\\tdamage:118,\\n  penetration:4,\\n  heal:5,\\n  cost:20,\\n  desc: \\\"an attack that basically ends the game (gg)\\\"\\n})\\n\\nTest.assertEquals(bob['Meteor Strike'](alice),\\\"Bob used Meteor Strike, an attack that basically ends the game (gg), against Alice, doing 110.92 damage! Bob healed for 5 health! Alice died. \\\")\\n\\nconsole.log('\\\\n----\\\\nAre the four health and energy properties private?');\\n['hp','maxHp','en','maxEn'].forEach(prop=>{\\n\\tTest.assertEquals(bob['#'+prop],undefined,`Property #${prop} should not be publically accessible!`)\\n})\",\"language\":\"javascript\",\"quality\":0,\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,1,2,0,0,4,3,3,3,5,3,3,4,4,4,2,4,4,3,4,4,3,3,4],\"quality\":[],\"rators\":[\"CNc6rmwhbxkxEhHAp\",\"WBjWw8BQQMCbQjTt8\",\"Po3v3dHCk6wYGKMwi\",\"3Gf7ikLijfoxabiPY\",\"mHT2bJb5SByfJ8yKS\",\"y75CxdSxD7TxwjBvc\",\"kYTNiHbrumX9StBDt\",\"JguR89pycKo3xCSzH\",\"q8DDTmFg5T2HNTBTo\",\"D7TvGuqRFSJPsFfPf\",\"maRsEDnMA7c2aeLmy\",\"9ZJcz9xwfXdutoCcK\",\"pi5zLHu8hko2XXD7B\",\"KcpfY4XZ7fNamyLd3\",\"uXWr3ameML9i2cpAD\",\"PE2p9cqj9cYCN92Bk\",\"qpoax6Z5y7BHLewzh\",\"yjtdwc2AC4jA2RWtn\",\"YLTZRjM78Wi9J9Re4\",\"RrqYXwa7f4eLm4vYM\",\"sNcDN3s3rH9wcNg5n\",\"WXGT4PytJNX5bkDkR\",\"gJWhP2hGHHFX7jwyK\"],\"total\":26},\"flags\":0},\"summary\":\"Having gotten rather sick of always being paired together in sciency literature, Alice and Bob have decided to finally settle their differences with a magical duel. They'll each learn some skills and then battle it out.\\n\\nYour Goal\\nYour job is to write the class Player which will handle all the combat mechanics.\\n\\nProperties\\nLet's look at the Player class's prop\",\"tags\":[\"objects\",\"classes\",\"games\",\"logic\",\"scope\"],\"timestamp\":{\"$date\":1606170419126},\"title\":\"PvP Battle: Alice vs Bob\",\"family\":[{\"_id\":\"ifDM26p25bqS8EsFu\",\"language\":\"javascript\"}]}}"]