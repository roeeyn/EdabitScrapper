a["{\"msg\":\"result\",\"id\":\"1612\",\"result\":{\"_id\":\"v46dEzuJvHKawduxb\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"function inclusiveArray(startNum, endNum) {\\n  // recursive code here\\n}\",\"difficulty\":2.283333333333333,\"familyId\":\"gCtDGWFi239KEnXkL\",\"instructions\":\"Write a function that, given the start `startNum` and end `endNum` values, return an array containing all the numbers **inclusive** to that range. See examples below.\\n\\n### Examples\\n```\\ninclusiveArray(1, 5) ➞ [1, 2, 3, 4, 5]\\n\\ninclusiveArray(2, 8) ➞ [2, 3, 4, 5, 6, 7, 8]\\n\\ninclusiveArray(10, 20) ➞ [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\\n\\ninclusiveArray(17, 5) ➞ [17]\\n```\\n\\n### Notes\\n- The numbers in the array are sorted in ascending order.\\n- If `startNum` is greater than `endNum`, return an array with the higher value. See example #4.\\n- You are expected to solve this challenge via a **recursive** approach.\\n- An **iterative** version of this challenge can be found via this [link](https://edabit.com/challenge/5sdtyMNdLw2FK4fHp).\\n- A **collection** of challenges in recursion can be found via this [link](https://edabit.com/collection/YJH4pAyqDbhLc4STc).\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"const isRecursive = src => (`${src}`.match(RegExp(`${src.name}`, 'gm'))||[]).length > +(/function/.test(src));\\nconst isKeywordPresent = (src, kw) => RegExp(`(${kw.join('|')})`, 'gm').test(src);\\n\\nlet keywords = [\\\"\\\\\\\\bArray\\\", \\\"fill\\\", \\\"from\\\", \\\"of\\\", \\\"reverse\\\"]\\nTest.assertNotEquals(isKeywordPresent(inclusiveArray, keywords),\\n  true, \\\"The use of these keywords [\\\" + keywords.join(\\\", \\\") + \\\"] is not allowed!\\\")\\nTest.assertNotEquals(isRecursive(inclusiveArray), false, \\\"Recursion is required!\\\")\\n\\nlet [actual, expected] = [\\n  [[1, 5], [2, 8], [10, 20], [17, 5], [40, 50], [1, 41], [24, 17], [11, 66], [9, 3], [6, 16]],\\n  [[1, 2, 3, 4, 5],\\n  [2, 3, 4, 5, 6, 7, 8],\\n  [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],\\n  [17],\\n  [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50],\\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41],\\n  [24],\\n  [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66],\\n  [9],\\n  [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\\n]\\nfor (let i in actual) Test.assertSimilar(inclusiveArray(...actual[i]), expected[i])\",\"language\":\"javascript\",\"quality\":5,\"summary\":\"Write a function that, given the start startNum and end endNum values, return an array containing all the numbers inclusive to that range. See examples below.\\n\\nExamples\\ninclusiveArray(1, 5) ➞ [1, 2, 3, 4, 5]\\n\\ninclusiveArray(2, 8) ➞ [2, 3, 4, 5, 6, 7, 8]\\n\\ninclusiveArray(10, 20) ➞ [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\\n\\ninclusiveArray(17, 5) ➞ [17]\\n\\nNotes\",\"tags\":[\"recursion\",\"arrays\",\"sorting\"],\"timestamp\":{\"$date\":1604605075329},\"title\":\"Recursion: Inclusive Array Ranges\",\"stats\":{\"completed\":{\"total\":66,\"ratings\":[3,3,3,3,3,3,0,0,2,1,0,2,2,3,3,0,2,2,2,4,2,0,2,3,2,3,2,2,3,3,2,3,3,3,4,2,0,1,4,3,3,2,3,3,3,3,2,0,3,2,3,3,2,2,3,3,3,0,3,3],\"quality\":[5,5,5,5,5,5,5],\"rators\":[\"a777e8chPvJkY3tKa\",\"yjtdwc2AC4jA2RWtn\",\"ScDZaeW8T6bbrr6BR\",\"mHT2bJb5SByfJ8yKS\",\"CNc6rmwhbxkxEhHAp\",\"QRv96jmNaYsWkxQEG\",\"5nHtgdY8F2FbAMawq\",\"c7uBxu2rgY77H5d79\",\"buX4mCQhtXCfBjeno\",\"kp2ZbCewZJAbfd7xv\",\"zw7g7T8wE5R5CBhXr\",\"cyHWbRK7EZGXQHGjS\",\"5NGxHLcQ8Af2RJ4TN\",\"4p2sARSZNNnKqjAT6\",\"bX6tpTCjwoi6XMMbK\",\"u9cRf5kvtpRB5ffB3\",\"g4NCSxxHqHCGMpWwT\",\"Ms4ubMhq5tjsAeMLF\",\"BMp3yjCJXr4fLDcJr\",\"SYEuojZtP6yLXryHv\",\"kCwNiQvTqrwKE5fv6\",\"P6Nj8vL3bcTZFD2Xz\",\"E8no6hxjqtRLLpFYg\",\"FbjJ74HpxC6YhbDxQ\",\"acHSYL6uQAgpgFMjp\",\"DPi9QGLctq2y76KuE\",\"ZTTJprKDvFqKGew7c\",\"nuYLLaJCtitSD5no5\",\"LDvDr7njE7rp53y7r\",\"RDesnxbcnyHKT6AW8\",\"pi76g3eRpnKrhee2a\",\"mDWNyaaQ9hvPCRzSd\",\"ekQh3jzgGLsEMbKo3\",\"yK7zzK2aGJwuWKHRL\",\"HXwnJvQfHYTWcujEz\",\"N3CNtWZz4ovJfH9Aw\",\"zMCXYFZSsviDCvjnY\",\"XkPEb97Tnnvvf5fAY\",\"zJTXDTdbwnopRazGo\",\"FiK2ruyH8KeHLAgoA\",\"s678Wirfor5uYL5T6\",\"srJ34BaybkQh3qRkM\",\"PH32cNxBjrK4a28sn\",\"HTAm62DZytAEFgSnu\",\"TtrXnGzi9MyhLvWiz\",\"tAF9Gf6PiGogbZuWs\",\"RE4Mm9T6Q9uygAxGS\",\"J7d397iB5GuWRAMfg\",\"ssRWEAjvdtfxkvH4S\",\"p5ZshR8zhTqmdhKDc\",\"AFfw7cGg83uYk2Miy\",\"qJTbsuToGEtaYnGxn\",\"oDtGiNqDMHmhHE3J8\",\"z5ebtimXwFFJdYxoa\",\"RdarYiA99rvGEPTmk\",\"oS8RbMKnP2RQyKh2A\",\"W3iKFwcuYkEf52psm\",\"i8rND7EkbgsSwaLRh\",\"46SBqYjYrHQhMzp2Y\",\"CHvzhtXnv8HTbPQ56\",\"Ya3eHgs8x3unZRLpb\",\"34bE6mric984YYLZQ\"]},\"flags\":1},\"editorId\":\"a777e8chPvJkY3tKa\",\"family\":[{\"_id\":\"uqZD99bDGx3LnSv6w\",\"language\":\"java\"},{\"_id\":\"v46dEzuJvHKawduxb\",\"language\":\"javascript\"},{\"_id\":\"CoSFaDzSxrSjsZ8F6\",\"language\":\"python3\"}]}}"]