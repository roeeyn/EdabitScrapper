a["{\"msg\":\"result\",\"id\":\"1688\",\"result\":{\"_id\":\"d9u29SPX4qWnyvnEF\",\"author\":\"Mubashir Hassan \",\"authorId\":\"T6iBEE2jp7f7iEF2P\",\"code\":\"function elapsedTime(sa, st) {\\n\\t\\n}\",\"difficulty\":2.3333333333333335,\"familyId\":\"NbYA5qjZraoraJkoX\",\"instructions\":\"Create a function that takes a timestamp for the start time `sa` and stop time `st` in **HH:MM:SS** format and returns the measured amount of **elapsed time** between start and stop times.\\n\\n### Examples\\n```\\nelapsedTime(\\\"11:00:00\\\", \\\"12:00:00\\\") ➞ \\\"01:00:00\\\"\\n\\nelapsedTime(\\\"13:01:43\\\", \\\"21:41:57\\\") ➞ \\\"08:40:14\\\"\\n\\nelapsedTime(\\\"17:34:43\\\", \\\"17:34:42\\\") ➞ \\\"23:59:59\\\"\\n```\\n\\n### Notes\\n- All times will be provided in 24 Hrs format.\\n- Consider Elapsed time will always be less than 24 Hrs.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assertEquals(elapsedTime(\\\"11:00:00\\\", \\\"12:00:00\\\"), \\\"01:00:00\\\") \\nTest.assertEquals(elapsedTime(\\\"13:01:43\\\", \\\"21:41:57\\\"), \\\"08:40:14\\\")\\nTest.assertEquals(elapsedTime(\\\"17:34:43\\\", \\\"17:34:42\\\"), \\\"23:59:59\\\") \\nTest.assertEquals(elapsedTime(\\\"15:01:27\\\", \\\"02:51:33\\\"), \\\"11:50:06\\\") \\nTest.assertEquals(elapsedTime(\\\"00:00:01\\\", \\\"17:34:42\\\"), \\\"17:34:41\\\") \\nTest.assertEquals(elapsedTime(\\\"07:59:59\\\", \\\"08:00:00\\\"), \\\"00:00:01\\\") \\nTest.assertEquals(elapsedTime(\\\"23:59:59\\\", \\\"00:00:00\\\"), \\\"00:00:01\\\") \\nTest.assertEquals(elapsedTime(\\\"15:00:00\\\", \\\"15:01:00\\\"), \\\"00:01:00\\\") \\nTest.assertEquals(elapsedTime(\\\"06:12:27\\\", \\\"10:34:13\\\"), \\\"04:21:46\\\") \\nTest.assertEquals(elapsedTime(\\\"03:22:44\\\", \\\"18:04:11\\\"), \\\"14:41:27\\\")\\n\\n//Mubashir\",\"language\":\"javascript\",\"quality\":0,\"summary\":\"Create a function that takes a timestamp for the start time sa and stop time st in HH:MM:SS format and returns the measured amount of elapsed time between start and stop times.\\n\\nExamples\\nelapsedTime(\\\"11:00:00\\\", \\\"12:00:00\\\") ➞ \\\"01:00:00\\\"\\n\\nelapsedTime(\\\"13:01:43\\\", \\\"21:41:57\\\") ➞ \\\"08:40:14\\\"\\n\\nelapsedTime(\\\"17:34:43\\\", \\\"17:34:42\\\") ➞ \\\"23:59:59\\\"\\n\\nNotes\\nAll times will be p\",\"tags\":[\"numbers\",\"strings\"],\"timestamp\":{\"$date\":1603540485290},\"title\":\"Calculate Elapsed Time\",\"stats\":{\"completed\":{\"total\":19,\"ratings\":[2,2,2,2,2,3,1,3,3,1,0,2,3,3,2,0,3,4,3,3,3,3,3,3],\"quality\":[],\"rators\":[\"xn7uGNKeAwPEkP9oA\",\"yjtdwc2AC4jA2RWtn\",\"eD63zchjA6Sn5qeud\",\"buX4mCQhtXCfBjeno\",\"CNc6rmwhbxkxEhHAp\",\"zw7g7T8wE5R5CBhXr\",\"4p2sARSZNNnKqjAT6\",\"8s5Bdrn7RTga7DL6x\",\"PTo9qt93YqGvL8fCa\",\"kp2ZbCewZJAbfd7xv\",\"g4NCSxxHqHCGMpWwT\",\"MT26yxj3YX95DsyLj\",\"LtTpCzF8kt6Rdth4X\",\"QRv96jmNaYsWkxQEG\",\"NGvCPuMiAP3xrRLfB\",\"RE4Mm9T6Q9uygAxGS\",\"DPi9QGLctq2y76KuE\",\"oDtGiNqDMHmhHE3J8\",\"Ya3eHgs8x3unZRLpb\"]},\"flags\":0},\"editorId\":\"T6iBEE2jp7f7iEF2P\",\"family\":[{\"_id\":\"GDRaujTACyHZnnrPk\",\"language\":\"cpp\"},{\"_id\":\"d9u29SPX4qWnyvnEF\",\"language\":\"javascript\"},{\"_id\":\"5EeHDHMx9WbjnnbJZ\",\"language\":\"python3\"},{\"_id\":\"s2QAKiHP6Mdhq3ZiP\",\"language\":\"ruby\"}]}}"]