a["{\"msg\":\"result\",\"id\":\"1993\",\"result\":{\"_id\":\"oJs9RW9rjQosxT8Xu\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"function shuffleCount(num) {\\n\\t\\n}\",\"difficulty\":2.8076923076923075,\"familyId\":\"BjxLmhy4tTJy75wgg\",\"instructions\":\"An **out-shuffle**, also known as an _out faro shuffle_ or a _perfect shuffle_, is a controlled method for shuffling playing cards. It is performed by splitting the deck into two equal halves and interleaving them together perfectly, with the condition that the top card of the deck remains in place.\\n\\nUsing an array to represent a deck of cards, an out-shuffle looks like:\\n\\n```\\n[1, 2, 3, 4, 5, 6, 7, 8] ➞ [1, 5, 2, 6, 3, 7, 4, 8]\\n// Card 1 remains in the first position.\\n```\\n\\nIf we repeat the process, the deck eventually returns to original order.\\n\\nShuffle 1:\\n```\\n[1, 2, 3, 4, 5, 6, 7, 8] ➞ [1, 5, 2, 6, 3, 7, 4, 8]\\n```\\n\\nShuffle 2:\\n```\\n[1, 5, 2, 6, 3, 7, 4, 8] ➞ [1, 3, 5, 7, 2, 4, 6, 8]\\n```\\n\\nShuffle 3:\\n```\\n[1, 3, 5, 7, 2, 4, 6, 8] ➞ [1, 2, 3, 4, 5, 6, 7, 8]\\n// Back where we started.\\n```\\n\\nWrite a function that takes a positive even integer representing the number of the cards in a deck, and returns the number of out-shuffles required to return the deck to its original order.\\n\\n### Examples\\n```\\nshuffleCount(8) ➞ 3\\n\\nshuffleCount(14) ➞ 12\\n\\nshuffleCount(52) ➞ 8\\n```\\n\\n### Notes\\n- The number of cards is always **even** and **greater than one**. Thus, the smallest possible deck size is **two**.\\n- A **recursive** version of this challenge can be found [here](https://edabit.com/challenge/X4NdX2PhAc97Pd8mN).\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"let [numVector, resVector] = [\\n  [2, 8, 14, 26, 52, 70, 104, 208],\\n  [1, 3, 12, 20, 8, 22, 51, 66]\\n]\\nfor (let i in numVector) Test.assertEquals(shuffleCount(numVector[i]), resVector[i])\",\"language\":\"javascript\",\"quality\":0,\"summary\":\"An out-shuffle, also known as an out faro shuffle or a perfect shuffle, is a controlled method for shuffling playing cards. It is performed by splitting the deck into two equal halves and interleaving them together perfectly, with the condition that the top card of the deck remains in place.\\n\\nUsing an array to represent a deck of cards, an out-shuffle looks li\",\"tags\":[\"loops\",\"logic\",\"validation\"],\"timestamp\":{\"$date\":1604431936957},\"title\":\"The Out-Shuffle\",\"stats\":{\"completed\":{\"total\":23,\"ratings\":[2,2,2,2,2,2,2,2,1,3,5,3,2,3,3,3,3,3,3,4,4,3,3,4,4,3],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"mHT2bJb5SByfJ8yKS\",\"CNc6rmwhbxkxEhHAp\",\"yjtdwc2AC4jA2RWtn\",\"bX6tpTCjwoi6XMMbK\",\"8BJyXvRWcrvN3nttS\",\"AeGoKjpCRNZB4SnYJ\",\"M4vq8ATaS9Jg5X7iP\",\"QRv96jmNaYsWkxQEG\",\"2Qk2mFu9HBFzrB24i\",\"s678Wirfor5uYL5T6\",\"ceMycDhXzsRojnr9F\",\"8p9vnmSpSKLYF8sop\",\"49hGfiPesC8q6FjNS\",\"Xk2g4CNFAnYcvxiSr\",\"nWND4LmgZTftyB8sN\",\"Yp7uvStL97cC9fKkY\",\"NGvCPuMiAP3xrRLfB\",\"PH32cNxBjrK4a28sn\",\"qJTbsuToGEtaYnGxn\",\"P8bXFR4cHwFia9rNM\"]},\"flags\":0},\"editorId\":\"a777e8chPvJkY3tKa\",\"family\":[{\"_id\":\"CxQRCDQHv5Ps8HnR6\",\"language\":\"java\"},{\"_id\":\"oJs9RW9rjQosxT8Xu\",\"language\":\"javascript\"},{\"_id\":\"KLke67efuam6ajLrt\",\"language\":\"python3\"}]}}"]