a["{\"msg\":\"result\",\"id\":\"2365\",\"result\":{\"_id\":\"EvwTt6AMwcMNWFoxc\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"function bitwiseIndex(arr) {\\n\\t// your recursive solution here\\n\\treturn bitwiseIndex(arr)\\n}\",\"difficulty\":4.066666666666666,\"editorId\":\"a777e8chPvJkY3tKa\",\"familyId\":\"Y7bhP4RzJLtkr79we\",\"instructions\":\"Finding an even integer in an array is kind of trivial and superficial to most programming enthusiasts. This challenge will take it to the next level.\\n\\nWrite a function that returns the largest even integer in an array with its corresponding index and the parity of that index, but determining the parity of that index is **limited to not using** the **modulo operator** `%`. Therefore, devise a way to resolve it.\\n\\nAlthough these tasks are achievable with the use of some built-in Array functions, the purpose and intent of this challenge is for your to solve it recursively.\\n\\n### Output Structure\\n```\\n{\\\"@odd|even index \\\" + index_of_largest: largest_integer}\\n```\\n\\n### Examples\\n```\\nbitwiseIndex([107, 19, 36, -18, -78, 24, 97]) ➞ {\\\"@even index 2\\\": 36}\\n\\nbitwiseIndex([31, 7, 2, 13, 7, 9, 10, 13]) ➞ {\\\"@even index 6\\\": 10}\\n\\nbitwiseIndex([4, 4, 4, 4, 4, 4]) ➞ {\\\"@even index 0\\\": 4}\\n\\nbitwiseIndex([-31, -7, -13, -7, -9, -13]) ➞ \\\"No even integer found!\\\"\\n```\\n\\n### Notes\\n- The use of the modulo operator `%`, `indexOf()` and `max()` functions are restricted.\\n- You can read more about recursion (see **Resources** tab) if you aren't familiar with it yet or haven't fully understood the concept before taking up this challenge.\\n- If you think recursion is fun, you can find a collection of those challenges [here](https://edabit.com/collection/YJH4pAyqDbhLc4STc).\\n- A non-recursive version of this challenge can be found [here](https://edabit.com/challenge/rwWaie7W2jmHQFfJA).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"const noIndexOfMaxMod = f => !RegExp('indexOf|max|%','gm').test(f)\\nconst nonRecur = f => (`${f}`.match(RegExp(`${f.name}`,'gm'))||[]).length > +(/function/.test(f))\\nTest.assertNotEquals(noIndexOfMaxMod(bitwiseIndex), false,\\n    \\\"The use of modulo operator (%), max() or indexOf() functions aren't allowed!\\\")\\nTest.assertNotEquals(nonRecur(bitwiseIndex), false, \\\"Recursion is required!\\\")\\n\\nlet [numVector, resVector] = [[\\n    [107, 19, 36, -18, -78, 24, 97],\\n    [31, 7, 2, 13, 7, 9, 10, 13],\\n    [4, 4, 4, 4, 4, 4],\\n    [-31, -7, -13, -7, -9, -13],\\n    [1, 128, 9, 56, -1, 7, 18, 49],\\n    [63, 12, 77, 112, 75, 92],\\n    [6, 6, 6, 6, 6, 6],\\n    [1, 129, 91, 5, -1, 7, 11, 9],\\n    [-84, -42, 0, -2, -94, -8]], [\\n    {\\\"@even index 2\\\": 36},\\n    {\\\"@even index 6\\\": 10},\\n    {\\\"@even index 0\\\": 4},\\n    \\\"No even integer found!\\\",\\n    {\\\"@odd index 1\\\": 128},\\n    {\\\"@odd index 3\\\": 112},\\n    {\\\"@even index 0\\\": 6},\\n    \\\"No even integer found!\\\",\\n    {\\\"@even index 2\\\": 0}]]\\nfor (let i in numVector) {\\n  typeof resVector[i] == 'string' ?\\n  Test.assertEquals(bitwiseIndex(numVector[i]), resVector[i]):\\n  Test.assertSimilar(bitwiseIndex(numVector[i]), resVector[i])\\n}\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,5,3,2,3,3,5,4,5,4,2],\"rators\":[\"a777e8chPvJkY3tKa\",\"aEm3Wvj2rFYRL8Lrb\",\"yjtdwc2AC4jA2RWtn\",\"mHT2bJb5SByfJ8yKS\",\"va3fDAQm4sqSMoy3R\",\"buX4mCQhtXCfBjeno\",\"Es4eX2stRpyoXeC7f\",\"YEjnBpgNjDLhnf4H7\",\"DPi9QGLctq2y76KuE\",\"PH32cNxBjrK4a28sn\"],\"total\":12,\"quality\":[]},\"flags\":0},\"summary\":\"Finding an even integer in an array is kind of trivial and superficial to most programming enthusiasts. This challenge will take it to the next level.\\n\\nWrite a function that returns the largest even integer in an array with its corresponding index and the parity of that index, but determining the parity of that index is limited to not using the modulo operator\",\"tags\":[\"recursion\",\"arrays\",\"numbers\"],\"timestamp\":{\"$date\":1595787580491},\"title\":\"Recursion: Index Parity of Largest Even\",\"quality\":0,\"family\":[{\"_id\":\"EvwTt6AMwcMNWFoxc\",\"language\":\"javascript\"},{\"_id\":\"pMbki4f2BA8R5vbXs\",\"language\":\"python3\"}]}}"]