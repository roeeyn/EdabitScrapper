a["{\"msg\":\"result\",\"id\":\"2085\",\"result\":{\"_id\":\"SAjCvAiKyqTEhrbJe\",\"author\":\"Pascal Tovohery\",\"authorId\":\"p6qLK4qS2dnFzDA7k\",\"code\":\"function Node(n) {\\n\\tthis.value = n;\\n\\tthis.next = null;\\n}\\nfunction LinkedList() {\\n  this.first = null;\\n\\tthis.last = null;\\n}\\n\\nLinkedList.prototype.addFirst = function (num){\\n\\t// Implement this method\\n}\\n\\nLinkedList.prototype.addLast = function (num){\\n\\t// Implement this method\\n}\\n\\nLinkedList.prototype.deleteFirst = function(){\\n\\t// Implement this method\\n}\\n\\nLinkedList.prototype.deleteLast = function(){\\n\\t// Implement this method\\n}\\n\\nLinkedList.prototype.contains = function(num){\\n\\t// Implement this method\\n}\\n\\nLinkedList.prototype.indexOf = function(num){\\n\\t// Implement this method\\n}\\n\\nLinkedList.prototype.toString = function (){\\n\\t// Transform this kind of linked list to string\\n}\",\"difficulty\":2.9166666666666665,\"editorId\":\"p6qLK4qS2dnFzDA7k\",\"familyId\":\"rtBnSGumC24uvJy2T\",\"instructions\":\"Implement a `LinkedList` function.\\n\\n### Method to Implementation\\n  - addFirst(n): Add an item to the head of the list.\\n  - addLast(n): Add an item to the tail of the list.\\n  - deleteFirst(): delete the head of the list.\\n  - deleteLast(): remove the tail of the list\\n  - contains(value): return a boolean as to whether a particular value is in the list\\n  - indexOf(value): return the \\\"index\\\" of the passed-in value.\\n\\nNote that all inputs will be valid. That is, `deleteFirst` and `deleteLast` will never be called on an empty list, and the value searched for with `indexOf` will always exist within the given list.\\n\\n### Examples\\n```\\nlist.addFirst(10) ➞ \\\"[10]\\\"\\n\\nlist.addLast(20) ➞ \\\"[10, 20]\\\"\\n\\nlist.addFirst(30) ➞ \\\"[30, 10, 20]\\\"\\n\\nlist.deleteLast() ➞ \\\"[10, 20, 30]\\\"\\n```\\n\\n### Notes\\n - Pay special attention to the `toString()` function that's supplied in the test tab! Your submission will fail if you don't.\\n - Feel free to write this as an ES6 class instead.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"var actual = new LinkedList();\\nactual.addLast(10);\\nactual.addLast(20);\\nactual.addFirst(5);\\nactual.addLast(30);\\n\\nTest.assertEquals(actual.toString(), \\\"[5, 10, 20, 30]\\\")\\nTest.assertEquals(actual.contains(10), true)\\nTest.assertEquals(actual.indexOf(10), 1)\\n\\nactual.deleteLast();\\n\\nTest.assertEquals(actual.toString(), \\\"[5, 10, 20]\\\")\\n\\nactual.addLast(50);\\n\\nTest.assertEquals(actual.toString(), \\\"[5, 10, 20, 50]\\\")\\nTest.assertEquals(actual.indexOf(50), 3)\\n\\nactual.deleteLast()\\nTest.assertEquals(actual.contains(5), false);\\nTest.assertEquals(actual.toString(), \\\"[10, 20, 50]\\\")\\n\\nactual.deleteFirst();\\nTest.assertEquals(actual.contains(10), false);\\nTest.assertEquals(actual.toString(), \\\"[20, 50]\\\")\",\"language\":\"javascript\",\"quality\":0,\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,5,4,5,5,3,2,1],\"quality\":[],\"rators\":[\"CNc6rmwhbxkxEhHAp\",\"mDWNyaaQ9hvPCRzSd\",\"Po3v3dHCk6wYGKMwi\",\"2sLmHo7G2irSyrDB7\",\"W4A4DGnpGKZtYg9zW\",\"yjtdwc2AC4jA2RWtn\",\"qWZLE2s7aRDQsnZ4p\"],\"total\":7},\"flags\":6},\"summary\":\"Implement a LinkedList function.\\n\\nMethod to Implementation\\n  addFirst(n): Add an item to the head of the list.\\n  addLast(n): Add an item to the tail of the list.\\n  deleteFirst(): delete the head of the list.\\n  deleteLast(): remove the tail of the list\\n  contains(value): return a boolean as to whether a particular value is in the list\\n  indexOf(value): return t\",\"tags\":[\"arrays\",\"data_structures\"],\"timestamp\":{\"$date\":1611843910165},\"title\":\"Implementation Linked List\",\"family\":[{\"_id\":\"SAjCvAiKyqTEhrbJe\",\"language\":\"javascript\"}]}}"]