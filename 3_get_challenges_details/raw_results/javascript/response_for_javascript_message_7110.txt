a["{\"msg\":\"result\",\"id\":\"2297\",\"result\":{\"_id\":\"Lv9SkDPAvtnbqPzxp\",\"author\":\"BijogFc24\",\"authorId\":\"Nb6LYPoQP6KJZt8mz\",\"code\":\"function eightBit(exp) {\\n\\t\\n}\",\"difficulty\":3.6923076923076925,\"familyId\":\"5j8ZZn79G5jHWvNSQ\",\"instructions\":\"You will be given a simple string expression representing an addition or subtraction in 8-bit 2's complement arithmetic.  Write a function that returns the result in base 10 followed by a binary representation. If any of the values are outside the range of 8-bit 2's complement, return `\\\"Overflow\\\"`.\\n\\n### Examples\\n```\\neightBit(\\\"3 + 12\\\") ➞ [15, \\\"11 + 1100 = 1111\\\"]\\n\\neightBit(\\\"3 - 12\\\") ➞ [-9, \\\"11 - 1100 = 11110111\\\"]\\n\\neightBit(\\\"-18 - 6\\\") ➞ [-24, \\\"11101110 - 110 = 11101000\\\"]\\n\\neightBit(\\\"65 + 70\\\") ➞ \\\"Overflow\\\"\\n\\neightBit(\\\"-127 + 127\\\") ➞ [0, \\\"10000001 + 1111111 = 0\\\"]\\n```\\n\\n### Notes\\nNumbers in 8-bit 2's complement notation can range from -128 to 127. The eighth (leftmost) bit signifies a negative number. See **Resources** for details.\",\"isHidden\":false,\"lab\":\"Test.assertSimilar(eightBit('0 + 0'),[0, '0 + 0 = 0'])\\nTest.assertSimilar(eightBit('0 - 1'),[-1, '0 - 1 = 11111111'] )\\nTest.assertSimilar(eightBit('1 + 126'),[127, '1 + 1111110 = 1111111'])\\nTest.assertSimilar(eightBit('128 - 56'),'Overflow')\\nTest.assertSimilar(eightBit('92 - 108'),[-16, '1011100 - 1101100 = 11110000'])\\nTest.assertSimilar(eightBit('111 - 39'),[72, '1101111 - 100111 = 1001000'])\\nTest.assertSimilar(eightBit('-99 - 30'),'Overflow')\\nTest.assertSimilar(eightBit('-45 + 100'),[55, '11010011 + 1100100 = 110111'])\\nTest.assertSimilar(eightBit('-10 - 118'),[-128, '11110110 - 1110110 = 10000000'])\\nTest.assertSimilar(eightBit('-128 + 127'),[-1, '10000000 + 1111111 = 11111111'])\",\"language\":\"javascript\",\"summary\":\"You will be given a simple string expression representing an addition or subtraction in 8-bit 2's complement arithmetic.  Write a function that returns the result in base 10 followed by a binary representation. If any of the values are outside the range of 8-bit 2's complement, return \\\"Overflow\\\".\\n\\nExamples\\neightBit(\\\"3 + 12\\\") ➞ [15, \\\"11 + 1100 = 1111\\\"]\\n\\neightBi\",\"tags\":[\"bit_operations\",\"numbers\"],\"timestamp\":{\"$date\":1593491880924},\"title\":\"8 Bit Arithmetic\",\"stats\":{\"completed\":{\"total\":11,\"ratings\":[4,4,4,4,4,5,1,2,3,5,2,5,5],\"rators\":[\"Nb6LYPoQP6KJZt8mz\",\"yjtdwc2AC4jA2RWtn\",\"cRpaCxYRmGcN3Nsoj\",\"aEm3Wvj2rFYRL8Lrb\",\"Es4eX2stRpyoXeC7f\",\"va3fDAQm4sqSMoy3R\",\"bXaGdBM8FBLHf7N6Y\",\"WXGT4PytJNX5bkDkR\"],\"quality\":[]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":0,\"family\":[{\"_id\":\"Lv9SkDPAvtnbqPzxp\",\"language\":\"javascript\"},{\"_id\":\"cXoBRe9RdDGeLNfaD\",\"language\":\"python3\"}]}}"]