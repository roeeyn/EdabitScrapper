a["{\"msg\":\"result\",\"id\":\"1484\",\"result\":{\"_id\":\"TCfRGQMcwYuCFq3nA\",\"author\":\"zatoichi49\",\"authorId\":\"tAF9Gf6PiGogbZuWs\",\"code\":\"function lookAndSay(term) {\\n\\t\\n}\",\"difficulty\":2.1791044776119404,\"familyId\":\"gLWwzZJcBSA2fH4bX\",\"instructions\":\"The look-and-say sequence is generated by _describing_ each group of identical digits in the previous term. If we start at \\\"1\\\", the first five terms in the sequence are:\\n\\n```\\n\\\"1\\\" = \\\"one 1\\\" = \\\"11\\\"\\n\\\"11\\\" = \\\"two 1's\\\" = \\\"21\\\"\\n\\\"21\\\" = \\\"one 2, one 1\\\" = \\\"1211\\\"\\n\\\"1211\\\" = \\\"one 1, one 2, two 1's\\\" = \\\"111221\\\"\\n\\\"111221\\\" = \\\"three 1's, two 2's, one 1\\\" = \\\"312211\\\"\\n```\\n\\nGiven a term (as a string), return the _next term_ in the sequence.\\n\\n### Examples\\n```\\nlookAndSay(\\\"1211\\\") ➞ \\\"111221\\\"\\n\\nlookAndSay(\\\"111221\\\") ➞ \\\"312211\\\"\\n\\nlookAndSay(\\\"31131211131221\\\") ➞ \\\"13211311123113112211\\\"\\n```\\n\\n### Notes\\nTerms will only include the digits 1, 2, and 3.\",\"lab\":\"Test.assertEquals(lookAndSay(\\\"13112221\\\"), \\\"1113213211\\\")\\nTest.assertEquals(lookAndSay(\\\"1113213211\\\"), \\\"31131211131221\\\")\\nTest.assertEquals(lookAndSay(\\\"31131211131221\\\"), \\\"13211311123113112211\\\")\\nTest.assertEquals(lookAndSay(\\\"13211311123113112211\\\"), \\\"11131221133112132113212221\\\")\\nTest.assertEquals(lookAndSay(\\\"11131221133112132113212221\\\"), \\\"3113112221232112111312211312113211\\\")\\nTest.assertEquals(lookAndSay(\\\"3113112221232112111312211312113211\\\"), \\\"1321132132111213122112311311222113111221131221\\\")\\nTest.assertEquals(lookAndSay(\\\"1321132132111213122112311311222113111221131221\\\"), \\\"11131221131211131231121113112221121321132132211331222113112211\\\")\\nTest.assertEquals(lookAndSay(\\\"11131221131211131231121113112221121321132132211331222113112211\\\"), \\\"311311222113111231131112132112311321322112111312211312111322212311322113212221\\\")\\nTest.assertEquals(lookAndSay(\\\"311311222113111231131112132112311321322112111312211312111322212311322113212221\\\"), \\\"132113213221133112132113311211131221121321131211132221123113112221131112311332111213211322211312113211\\\")\\nTest.assertEquals(lookAndSay(\\\"132113213221133112132113311211131221121321131211132221123113112221131112311332111213211322211312113211\\\"), \\\"11131221131211132221232112111312212321123113112221121113122113111231133221121321132132211331121321231231121113122113322113111221131221\\\")\",\"language\":\"javascript\",\"summary\":\"The look-and-say sequence is generated by describing each group of identical digits in the previous term. If we start at \\\"1\\\", the first five terms in the sequence are:\\n\\n\\\"1\\\" = \\\"one 1\\\" = \\\"11\\\"\\n\\\"11\\\" = \\\"two 1's\\\" = \\\"21\\\"\\n\\\"21\\\" = \\\"one 2, one 1\\\" = \\\"1211\\\"\\n\\\"1211\\\" = \\\"one 1, one 2, two 1's\\\" = \\\"111221\\\"\\n\\\"111221\\\" = \\\"three 1's, two 2's, one 1\\\" = \\\"312211\\\"\\n\\nGiven a term (as a str\",\"tags\":[\"language_fundamentals\",\"strings\"],\"timestamp\":{\"$date\":1563034275467},\"title\":\"Look-And-Say Sequence\",\"stats\":{\"completed\":{\"total\":67,\"ratings\":[2,2,2,2,2,2,3,2,4,2,3,0,1,2,2,3,0,1,2,3,3,2,2,3,0,0,4,2,3,1,3,2,3,3,2,3,3,1,2,3,0,3,1,3,2,3,0,2,3,3,2,1,3,3,2,4,3,3,3,2,3,3,2,0,2,2,3],\"rators\":[\"65dbBZynphj53nXqA\",\"EWn8w8P3nNh7knatY\",\"n5wubRfh6zh8QRymN\",\"EjPLq3QSJdGQFJdgW\",\"yjtdwc2AC4jA2RWtn\",\"5Zq3aGdvh4LHBvnJL\",\"h4jFmtbFn92eA4649\",\"AasGs8AeX9Lcb9xJn\",\"Q9KQomTTPBsrkAL6c\",\"XKi8iZXBCHCaebSHh\",\"RE4Mm9T6Q9uygAxGS\",\"zw7g7T8wE5R5CBhXr\",\"GDaHezHeXdAoCNEce\",\"mHT2bJb5SByfJ8yKS\",\"vvv3n9F7PBDE33dry\",\"Y9Nz9yafaibz54W4o\",\"zgoq9MhrL2h75DAMA\",\"byrKwHgawbFgyAcgo\",\"FJsvM5yqKuK9yMk9P\",\"DHwbkbzYNpmkSFT7u\",\"R4JQmeA6cYyfXbmLF\",\"Mmcc4rBLPKJkzLzET\",\"zeEXfanmGrukWo6Cu\",\"N4NFyim2Y7Z7HAYsA\",\"ydEdzuCCZt4yny9Rq\",\"46EqDiLEdJPtDFujt\",\"zNN2fW2pJGpTxBgzx\",\"vThHLd8MLkmyJHox9\",\"6BpBQnSGhzgvhXrEy\",\"2innwjWqxJHo4eRGh\",\"BdvdJYwHZr7JpkHsn\",\"2NJuDfSqdrF8kHHni\",\"cRpaCxYRmGcN3Nsoj\",\"eFjGhq7C7bBKXjT6X\",\"YER6iBcpJCuhgrYDN\",\"pi76g3eRpnKrhee2a\",\"oQuMFxud452FMPYyP\",\"wcjknenWdPRhrRScv\",\"a777e8chPvJkY3tKa\",\"pd8dm7sWLW9cY6dYW\",\"ycwMaH5hCLctXA4J9\",\"EAuL56kpyLytw4RcR\",\"FGEeCTorXbX3WvjFW\",\"Xk2g4CNFAnYcvxiSr\",\"p5ZshR8zhTqmdhKDc\",\"aEm3Wvj2rFYRL8Lrb\",\"E2hpke7mHxAWsw5t9\",\"bX6tpTCjwoi6XMMbK\",\"4Xv87xmdSnpYhi8hz\",\"tAF9Gf6PiGogbZuWs\",\"CNc6rmwhbxkxEhHAp\",\"kp2ZbCewZJAbfd7xv\",\"8BJyXvRWcrvN3nttS\",\"M4vq8ATaS9Jg5X7iP\",\"ct42f2gGpMXSd9hXM\",\"QRv96jmNaYsWkxQEG\",\"e9Cknxbx6o7Nb6REs\",\"DPi9QGLctq2y76KuE\",\"g4NCSxxHqHCGMpWwT\",\"AFfw7cGg83uYk2Miy\",\"NGvCPuMiAP3xrRLfB\",\"STipuJs6kBvPqqsSE\",\"9gEWz76H8KmhN4yJj\",\"RtPhDuwmvWNHiBxmG\",\"Ya3eHgs8x3unZRLpb\",\"oDtGiNqDMHmhHE3J8\"],\"quality\":[3,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.5,\"family\":[{\"_id\":\"TDv5ZEXXyQiekopx2\",\"language\":\"cpp\"},{\"_id\":\"PRWwoRZnnh5eyyRbD\",\"language\":\"java\"},{\"_id\":\"TCfRGQMcwYuCFq3nA\",\"language\":\"javascript\"},{\"_id\":\"rzburChL8YYe98vaP\",\"language\":\"python3\"},{\"_id\":\"ZG5qC6Bv6nZsNf5c2\",\"language\":\"ruby\"}]}}"]