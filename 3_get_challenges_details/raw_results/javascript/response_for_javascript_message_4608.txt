a["{\"msg\":\"result\",\"id\":\"1057\",\"result\":{\"_id\":\"5DfJYH9bXn4fG4Zui\",\"author\":\"zatoichi49\",\"authorId\":\"tAF9Gf6PiGogbZuWs\",\"code\":\"function schoty(frame) {\\n\\t\\n}\",\"difficulty\":1.7131782945736433,\"familyId\":\"BDXGZGoB4oQXznckd\",\"instructions\":\"The Russian *schoty* is type of abacus (counting tool) that is used by sliding threaded beads along horizontal wires. An example schoty would have 7 wires, each holding 10 beads. Each bead, when moved to the *left*, would count as 1 unit. Starting from the bottom wire and moving up, the units increase by a factor of 10. If we use \\\"O\\\" for a bead and \\\"-\\\" to show the wire, we can represent the schoty as follows:\\n\\n```\\n---OOOOOOOOOO  millions\\n---OOOOOOOOOO  hundred-thousands\\n---OOOOOOOOOO  ten-thousands\\n---OOOOOOOOOO  thousands\\n---OOOOOOOOOO  hundreds\\n---OOOOOOOOOO  tens \\n---OOOOOOOOOO  ones\\n```\\n\\nTo read the number, we count the beads on the left-hand side of each wire. In the example below, the number is **501264**:\\n\\n```\\n---OOOOOOOOOO  0\\nOOOOO---OOOOO  5\\n---OOOOOOOOOO  0\\nO---OOOOOOOOO  1\\nOO---OOOOOOOO  2\\nOOOOOO---OOOO  6\\nOOOO---OOOOOO  4\\n```\\n\\nGiven an array of strings representing each wire in the schoty, return the *number* being displayed.\\n\\n### Examples\\n```\\nschoty([\\n  \\\"---OOOOOOOOOO\\\",\\n  \\\"---OOOOOOOOOO\\\",\\n  \\\"---OOOOOOOOOO\\\",\\n  \\\"OOO---OOOOOOO\\\",\\n  \\\"O---OOOOOOOOO\\\",\\n  \\\"OOOOOOOOO---O\\\",\\n  \\\"OO---OOOOOOOO\\\"\\n]) ➞ 3192\\n\\nschoty([\\n  \\\"OO---OOOOOOOO\\\",\\n  \\\"O---OOOOOOOOO\\\",\\n  \\\"OOOOO---OOOOO\\\",\\n  \\\"---OOOOOOOOOO\\\",\\n  \\\"---OOOOOOOOOO\\\",\\n  \\\"---OOOOOOOOOO\\\",\\n  \\\"---OOOOOOOOOO\\\"\\n]) ➞ 2150000\\n```\\n\\n### Notes\\nFor more info on how to use a schoty, please check the **Resources** tab. This challenge ignores the traditional 4-bead wires used for quarter-ruble and quarter-kopek calculations.\",\"lab\":\"Test.assertEquals(schoty(['OOOOO---OOOOO', '---OOOOOOOOOO', 'O---OOOOOOOOO', 'O---OOOOOOOOO', '---OOOOOOOOOO', 'OOOOOOOO---OO', 'OO---OOOOOOOO']), 5011082)\\nTest.assertEquals(schoty(['OOOOOO---OOOO', 'OOOOOO---OOOO', 'OOOO---OOOOOO', 'OOOOOOO---OOO', 'O---OOOOOOOOO', 'OOOOOOO---OOO', 'OOOOOOO---OOO']), 6647177)\\nTest.assertEquals(schoty(['---OOOOOOOOOO', '---OOOOOOOOOO', '---OOOOOOOOOO', 'OO---OOOOOOOO', 'O---OOOOOOOOO', '---OOOOOOOOOO', 'OOOOOOOOO---O']), 2109)\\nTest.assertEquals(schoty(['O---OOOOOOOOO', 'OOO---OOOOOOO', 'OOOOOOO---OOO', '---OOOOOOOOOO', 'OOOOOOOO---OO', 'OO---OOOOOOOO', 'OOOOOOO---OOO']), 1370827)\\nTest.assertEquals(schoty(['---OOOOOOOOOO', 'OOOOOOOOO---O', 'OOO---OOOOOOO', '---OOOOOOOOOO', 'OO---OOOOOOOO', 'OOOOOO---OOOO', 'OOOOO---OOOOO']), 930265)\\nTest.assertEquals(schoty(['---OOOOOOOOOO', 'OOOOOO---OOOO', 'OOOOOOO---OOO', 'OOOOOOO---OOO', '---OOOOOOOOOO', '---OOOOOOOOOO', 'OOOOOOOO---OO']), 677008)\\nTest.assertEquals(schoty(['OOOOOOOOO---O', 'OOOOOOO---OOO', 'OOOOO---OOOOO', 'OOOOOOO---OOO', '---OOOOOOOOOO', 'O---OOOOOOOOO', 'OOO---OOOOOOO']), 9757013)\\nTest.assertEquals(schoty(['OOOOOOO---OOO', 'O---OOOOOOOOO', 'OOOO---OOOOOO', 'O---OOOOOOOOO', 'OO---OOOOOOOO', 'O---OOOOOOOOO', 'OOOOOOO---OOO']), 7141217)\\nTest.assertEquals(schoty(['---OOOOOOOOOO', '---OOOOOOOOOO', 'OOOO---OOOOOO', 'OOOOOOO---OOO', 'O---OOOOOOOOO', 'OOOOOOOO---OO', 'OOO---OOOOOOO']), 47183)\\nTest.assertEquals(schoty(['OOOOOO---OOOO', '---OOOOOOOOOO', '---OOOOOOOOOO', 'O---OOOOOOOOO', 'OOOOOOOOO---O', 'OOOOO---OOOOO', '---OOOOOOOOOO']), 6001950)\\nTest.assertEquals(schoty(['---OOOOOOOOOO', '---OOOOOOOOOO', 'OOOOOOOOO---O', 'OOOOOOOO---OO', 'OOOOOOOOO---O', 'OO---OOOOOOOO', 'OOOOOOOO---OO']), 98928)\\nTest.assertEquals(schoty(['OOOOO---OOOOO', 'OOOOOOOO---OO', 'OOOOOOOOO---O', 'OOO---OOOOOOO', 'O---OOOOOOOOO', 'OOOOOOOOO---O', 'OOOOOO---OOOO']), 5893196)\\nTest.assertEquals(schoty(['OO---OOOOOOOO', 'OOOOOO---OOOO', 'OOOOOOOOO---O', 'OOOOOOO---OOO', 'OOOOOOOO---OO', 'OOOOO---OOOOO', 'OOOOOOOO---OO']), 2697858)\\nTest.assertEquals(schoty(['---OOOOOOOOOO', '---OOOOOOOOOO', 'OOOOOO---OOOO', '---OOOOOOOOOO', 'OOOO---OOOOOO', 'O---OOOOOOOOO', 'OOOO---OOOOOO']), 60414)\\nTest.assertEquals(schoty(['OO---OOOOOOOO', 'OOOOOO---OOOO', 'OOO---OOOOOOO', 'OOO---OOOOOOO', 'OOO---OOOOOOO', 'OO---OOOOOOOO', '---OOOOOOOOOO']), 2633320)\\nTest.assertEquals(schoty(['OOOOOOOOO---O', '---OOOOOOOOOO', 'OOOOO---OOOOO', 'O---OOOOOOOOO', 'OOOOOOOO---OO', '---OOOOOOOOOO', 'OOOOOOOOO---O']), 9051809)\\nTest.assertEquals(schoty(['OO---OOOOOOOO', 'OO---OOOOOOOO', 'OOOOOOO---OOO', '---OOOOOOOOOO', 'OOOOOOO---OOO', 'OOOO---OOOOOO', 'OOOOOOOOO---O']), 2270749)\\nTest.assertEquals(schoty(['OOOOOOO---OOO', 'OOOOOOOOO---O', '---OOOOOOOOOO', '---OOOOOOOOOO', 'OO---OOOOOOOO', '---OOOOOOOOOO', 'OOOO---OOOOOO']), 7900204)\\nTest.assertEquals(schoty(['OOOOOO---OOOO', 'OOOO---OOOOOO', 'OOOOOO---OOOO', 'OOOOOOOO---OO', '---OOOOOOOOOO', 'OOOOOOO---OOO', 'OOOOOO---OOOO']), 6468076)\\nTest.assertEquals(schoty(['OOOOOOOO---OO', 'OOOOOOOOO---O', 'OOOO---OOOOOO', 'OOOOOO---OOOO', 'OOOOO---OOOOO', '---OOOOOOOOOO', 'OOOO---OOOOOO']), 8946504)\",\"language\":\"javascript\",\"summary\":\"The Russian schoty is type of abacus (counting tool) that is used by sliding threaded beads along horizontal wires. An example schoty would have 7 wires, each holding 10 beads. Each bead, when moved to the left, would count as 1 unit. Starting from the bottom wire and moving up, the units increase by a factor of 10. If we use \\\"O\\\" for a bead and \\\"-\\\" to show the\",\"tags\":[\"strings\",\"arrays\",\"loops\"],\"timestamp\":{\"$date\":1564683639779},\"title\":\"Read the Abacus (Part 1: Russian Schoty)\",\"stats\":{\"completed\":{\"total\":146,\"ratings\":[2,2,2,2,2,1,1,2,1,2,2,2,2,0,2,2,1,2,2,0,0,5,1,1,1,1,2,3,2,0,1,2,1,2,2,2,1,2,0,2,1,2,2,2,1,2,2,2,1,2,2,2,3,2,2,1,2,1,1,2,2,2,2,1,0,2,2,3,1,2,2,2,2,1,2,3,2,1,2,2,2,0,2,2,2,2,2,1,2,0,2,2,1,2,2,1,1,2,2,1,0,1,2,2,2,3,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,5,3,1,2,2,1,2],\"rators\":[\"EjPLq3QSJdGQFJdgW\",\"iLQZ4qEqi9yQJ993Y\",\"n5wubRfh6zh8QRymN\",\"65dbBZynphj53nXqA\",\"EWn8w8P3nNh7knatY\",\"Y9Nz9yafaibz54W4o\",\"zgoq9MhrL2h75DAMA\",\"fmLzKJTPWvtGRAaAN\",\"wcjknenWdPRhrRScv\",\"7gZKfvwaeqsGKXMEN\",\"RE4Mm9T6Q9uygAxGS\",\"Q9KQomTTPBsrkAL6c\",\"6BpBQnSGhzgvhXrEy\",\"CJnuSjyCBMTbTiibD\",\"zw7g7T8wE5R5CBhXr\",\"R4JQmeA6cYyfXbmLF\",\"e8ftyJ6nKRtZDwGWJ\",\"SDtZFL5NzAoCPofXk\",\"XKi8iZXBCHCaebSHh\",\"yjtdwc2AC4jA2RWtn\",\"5Zq3aGdvh4LHBvnJL\",\"66gXXy97s3jxAeS9q\",\"a4iFHPKrzAyvbLiDW\",\"Akq3fQcPRgPrWfsye\",\"ydEdzuCCZt4yny9Rq\",\"AasGs8AeX9Lcb9xJn\",\"gSpcNJ8znvGGfWsQH\",\"FJsvM5yqKuK9yMk9P\",\"538PKNyqMiCwLWYWK\",\"gGnDsJz5hr2t9MKCF\",\"3awyiorYPgCqqP7Sr\",\"6gPHMpkEP8JuHxzpd\",\"E3fyZ23p26CcvHvuR\",\"DHwbkbzYNpmkSFT7u\",\"k5n6ohCqWKDcMSyhR\",\"oFckF5bB5dGBQKneS\",\"wm7pQ6y7ochkhYokS\",\"8WgxvXHrPmtycQing\",\"2tCCFm5iefjrRSaxv\",\"BGQqaYbqYqmTo5Ehs\",\"BdvdJYwHZr7JpkHsn\",\"3txctHTasvC9FW3ZZ\",\"z6QfbuG6TXE7GKynQ\",\"HrJtdRbvHHNh7tMMo\",\"sbme4fRJjjBjYXRbY\",\"zd9FLSzsGz3evKafy\",\"ih2aGaqkMaagTgyL2\",\"9gEWz76H8KmhN4yJj\",\"2innwjWqxJHo4eRGh\",\"2CvHJcA9aXt9pvZwA\",\"8BFSTCnoe2QggN64c\",\"5YCX58nhHT8oRCHyy\",\"pi76g3eRpnKrhee2a\",\"k5TGxBtLi9BXxeChT\",\"vtHbevf2tHqe6mRxX\",\"tPtz279rzBX8kCWMr\",\"YER6iBcpJCuhgrYDN\",\"uAS9uKs8KQmp8uhqn\",\"8Z3dkvWBqtrMEE48N\",\"cp3X8hk8yNME7qoD9\",\"SNiJRRosrmSWssLj4\",\"LCn6qz2GoMr5577Rd\",\"2ZFoLTxcCARhwc8xX\",\"gjwRCPPYvn2tp393i\",\"Ji84eQR54xeqRYceZ\",\"tAF9Gf6PiGogbZuWs\",\"9FLMWGFdnkKWxM4ds\",\"a777e8chPvJkY3tKa\",\"mHT2bJb5SByfJ8yKS\",\"Lzj3w7QjdzikynsGG\",\"Wv9v7fHb8umujfg2j\",\"HFuNFZpdKCddzbuqc\",\"oM5uLqsaNZu9taNXh\",\"buX4mCQhtXCfBjeno\",\"NchnDcEmsLTeFZ4FH\",\"pLpcDC3EYx2DDQSdt\",\"QRv96jmNaYsWkxQEG\",\"r7mZLgpQWzRiGddL5\",\"7wtuhPesfhcYsfZaZ\",\"z5ebtimXwFFJdYxoa\",\"ij9YRJvZz6WbqcGXS\",\"BSkoT6o2GweZkqXbc\",\"Dn5QN5F7y54y4kzp9\",\"4ntYzGHHBgqf58udP\",\"moe6ztrsNzFymC3A7\",\"ZcqshY58sGEEvgeaq\",\"nAmJEX7BkHLd9LsG2\",\"Kk3jdrvAbPENkw5Ft\",\"yrLBMbni8KDsC5K44\",\"2zKQWLmEBw8FBs4ZL\",\"FDqfqHn8ww9QoSFhb\",\"vic9SZ9qqj9WhRkbd\",\"aFMst9xdc5NbYP8E9\",\"jtzNdgDCzsekkdpxA\",\"nkH3HfJXLMNcBMM79\",\"Po3v3dHCk6wYGKMwi\",\"aEm3Wvj2rFYRL8Lrb\",\"ttuGK7od8simjgmCJ\",\"mfYrBKwDr4hXSFuuN\",\"AFfw7cGg83uYk2Miy\",\"kp2ZbCewZJAbfd7xv\",\"evTTY9hwrtogaNxXn\",\"Nb6LYPoQP6KJZt8mz\",\"JsRTAwWK7Nikj4sKA\",\"qWR7eXxBiNee22A5u\",\"CNc6rmwhbxkxEhHAp\",\"g4NCSxxHqHCGMpWwT\",\"BniK9rAaXqYbLhwcW\",\"DDokdbBKxv49M445o\",\"u9cRf5kvtpRB5ffB3\",\"vewKwcMeGuk3p3MsN\",\"jLSZdBseR2kfjt8dL\",\"Yp7uvStL97cC9fKkY\",\"YLwJkF2wuL3n9o6a2\",\"3Gf7ikLijfoxabiPY\",\"c7uBxu2rgY77H5d79\",\"ApqWTmEEkTCsDou48\",\"npp5hesJrst6ghKSM\",\"eomLS3wh6tQPN8jtH\",\"wJTDDTE3TrmSXKP4d\",\"2Qk2mFu9HBFzrB24i\",\"oDtGiNqDMHmhHE3J8\",\"NGvCPuMiAP3xrRLfB\",\"xcqM7Hyfog5d7kyxg\",\"8BJyXvRWcrvN3nttS\",\"M4vq8ATaS9Jg5X7iP\",\"nBJve5CzG6WAw7WFQ\",\"gXTAie79kiw28tx5u\",\"n4Y5EEGCjmrK99yrt\",\"jyoLggHk8xQKZuoQC\",\"LwD3CyYSiBfg3mA4r\",\"bfYmA3LMvhSrK59cn\",\"jRinr5PgDeymdcu3E\",\"LPZ2QKCoB8q6rG25c\",\"FGEeCTorXbX3WvjFW\",\"oyB4Wr4EeZnoDaa8B\"],\"quality\":[5,3,5,5,5,5,5,5,5,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.833333333333333,\"family\":[{\"_id\":\"sSkPhsQjsHdT6Ri34\",\"language\":\"csharp\"},{\"_id\":\"5DfJYH9bXn4fG4Zui\",\"language\":\"javascript\"},{\"_id\":\"F64txHnfYj4e4MpAN\",\"language\":\"python3\"},{\"_id\":\"tpo7d9co5otR85QPS\",\"language\":\"ruby\"},{\"_id\":\"pJdajKuwYaAvRqALd\",\"language\":\"swift\"}]}}"]