a["{\"msg\":\"result\",\"id\":\"1364\",\"result\":{\"_id\":\"TCEYq7KYJE3ogvt9j\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"function digitCount(num) {\\n\\t\\n}\",\"difficulty\":2.128440366972477,\"familyId\":\"wi8uRzqS5NpjTutG8\",\"instructions\":\"Given a number, create a function which returns a new number based on the following rules:\\n- For each digit, replace it by the number of times it appears in the number.\\n- The final instance of the number will be an integer, not a string.\\n\\nThe following is a working example:\\n```\\ndigitCount(136116) ➞ 312332\\n// The number 1 appears thrice, so replace all 1s with 3s.\\n// The number 3 appears only once, so replace all 3s with 1s.\\n// The number 6 appears twice, so replace all 6s with 2s.\\n```\\n\\n### Examples\\n```\\ndigitCount(221333) ➞ 221333\\n\\ndigitCount(136116) ➞ 312332\\n\\ndigitCount(2) ➞ 1\\n```\\n\\n### Notes\\nEach test will have a positive whole number in its parameter.\",\"isHidden\":false,\"lab\":\"Test.assertEquals(digitCount(221333), 221333)\\nTest.assertEquals(digitCount(136116), 312332)\\nTest.assertEquals(digitCount(2), 1)\\nTest.assertEquals(digitCount(3410515780), 1122222112)\\nTest.assertEquals(digitCount(24677734541), 13133313131)\\nTest.assertEquals(digitCount(79825929634), 13121323111)\\nTest.assertEquals(digitCount(36123594675), 22112211212)\\nTest.assertEquals(digitCount(62849835970), 11212211211)\\nTest.assertEquals(digitCount(29081455325), 21111133123)\\nTest.assertEquals(digitCount(94717270184), 12323131212)\\nTest.assertEquals(digitCount(72017589759), 31113212322)\\nTest.assertEquals(digitCount(53569357419), 32312231112)\\nTest.assertEquals(digitCount(33879999825), 22214444211)\\nTest.assertEquals(digitCount(33600360627), 33333333311)\\nTest.assertEquals(digitCount(12594580129), 22221211222)\\nTest.assertEquals(digitCount(36852564216), 13122231213)\\nTest.assertEquals(digitCount(34415793631), 32221113132)\\nTest.assertEquals(digitCount(76384607724), 32112213312)\\nTest.assertEquals(digitCount(8604519582), 2111211221)\\nTest.assertEquals(digitCount(70209476552), 22221121222)\\nTest.assertEquals(digitCount(20036302062), 34422243423)\\nTest.assertEquals(digitCount(77674727011), 55151515122)\\nTest.assertEquals(digitCount(17597066090), 12122322323)\\nTest.assertEquals(digitCount(79082080537), 21321323112)\\nTest.assertEquals(digitCount(30187177000), 14213233444)\\nTest.assertEquals(digitCount(72916170033), 21121222222)\\nTest.assertEquals(digitCount(11314637247), 33232122122)\\nTest.assertEquals(digitCount(69095956141), 23132322212)\\nTest.assertEquals(digitCount(66117263379), 33222132221)\\nTest.assertEquals(digitCount(30491133624), 31212233112)\",\"language\":\"javascript\",\"summary\":\"Given a number, create a function which returns a new number based on the following rules:\\nFor each digit, replace it by the number of times it appears in the number.\\nThe final instance of the number will be an integer, not as a string.\\n\\nThe following is a working example:\\ndigitCount(136116) ➞ 312332\\n// The number 1 appears thrice, so replace all 1s with 3s.\\n/\",\"tags\":[\"numbers\",\"language_fundamentals\",\"loops\",\"arrays\"],\"timestamp\":{\"$date\":1594732704320},\"title\":\"Keeping Count\",\"stats\":{\"completed\":{\"total\":156,\"ratings\":[1,1,1,1,1,3,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,3,2,3,2,3,3,3,3,1,1,2,1,3,1,2,2,3,3,3,2,3,3,2,3,3,0,3,3,0,1,1,1,2,2,2,3,2,3,1,3,3,3,1,2,1,2,0,3,3,3,3,3,2,3,2,2,2,3,1,0,2,3,3,2,2,3,3,1,3,3,2,3,3,3,1,2,4,3,2,2,2,2,2],\"rators\":[\"p5ZshR8zhTqmdhKDc\",\"mHT2bJb5SByfJ8yKS\",\"DaBQKtm4xSgrxqTYF\",\"a777e8chPvJkY3tKa\",\"65dbBZynphj53nXqA\",\"FJsvM5yqKuK9yMk9P\",\"jnyub52Fi79drGvow\",\"yjtdwc2AC4jA2RWtn\",\"RE4Mm9T6Q9uygAxGS\",\"n5wubRfh6zh8QRymN\",\"eoepTq5ES5tfgY9XT\",\"tAF9Gf6PiGogbZuWs\",\"buX4mCQhtXCfBjeno\",\"6BpBQnSGhzgvhXrEy\",\"C9LKGu2g5hSijvDzA\",\"8raviPK67KKxzQWcF\",\"pLpcDC3EYx2DDQSdt\",\"ij9YRJvZz6WbqcGXS\",\"7gZKfvwaeqsGKXMEN\",\"z5ebtimXwFFJdYxoa\",\"BSkoT6o2GweZkqXbc\",\"NchnDcEmsLTeFZ4FH\",\"hQNQrGc5CYaYRnJfL\",\"bX6tpTCjwoi6XMMbK\",\"TkmmqoMvRBcA6b7Ci\",\"fMqXimJLsPiuhT8A8\",\"veKWMS3ACmRWTjiLK\",\"YLuJ7h27mr2GMcMt6\",\"8Z3dkvWBqtrMEE48N\",\"pd8dm7sWLW9cY6dYW\",\"aEm3Wvj2rFYRL8Lrb\",\"s9qcJASB9WKPWaQzi\",\"eQXwk5zGckM8tCWYH\",\"GCsLzWAhLvniQqR3J\",\"iJC8PmpzSyTnEDqw5\",\"8AxEqauKj45qrkoqu\",\"mSn9AcLsuEYzLbfai\",\"H46gRHmkdz2CRrGH9\",\"6vhaFn9jMTwCeoZgC\",\"4xdSc245S8vAvgDK9\",\"xFxiPMktEDaX5BYZu\",\"Nb6LYPoQP6KJZt8mz\",\"QnPD4Sv6W4LHc2Qng\",\"QRv96jmNaYsWkxQEG\",\"8BJyXvRWcrvN3nttS\",\"4Xv87xmdSnpYhi8hz\",\"zNN2fW2pJGpTxBgzx\",\"Xk2g4CNFAnYcvxiSr\",\"PGCDJpQMN8Sjn9Gm6\",\"kp2ZbCewZJAbfd7xv\",\"i3kndQfrF2RowSqc4\",\"BdvdJYwHZr7JpkHsn\",\"CNc6rmwhbxkxEhHAp\",\"acHSYL6uQAgpgFMjp\",\"4RsakkyRXyYGwFxEa\",\"dGugwhA6uwwjPGAa5\",\"8s5Bdrn7RTga7DL6x\",\"PCXJRGqhzaF64uELh\",\"E2hpke7mHxAWsw5t9\",\"JX3z5Mx8p4KN8GLud\",\"ZcJm2kuqJnN3CXFaR\",\"K9aHdd5ReP4JJwNKA\",\"BYq2TF7ncfLZxGBA3\",\"7JCLyrrY6JYGpocac\",\"WzEhzQcMwc4sw8z7T\",\"nWND4LmgZTftyB8sN\",\"db5MGFecSR4RKjZYf\",\"PNaLsSGwFfxXmrsG9\",\"bXaGdBM8FBLHf7N6Y\",\"S5ZJy8yeYqWbeidB8\",\"2ZabBuAKvgS9qTSM7\",\"xMxdp5oCxmeuYxhpa\",\"4xwh4EZJPcG4dSe3W\",\"jkumHyXfMkhGcPgqC\",\"zw7g7T8wE5R5CBhXr\",\"5ETJzzAbWHw9GkWCn\",\"ThGTEw4SiMApKtxik\",\"4XxJxQkB5mNTLY2qk\",\"g4NCSxxHqHCGMpWwT\",\"tfYpJ66Lq7Y432Nzq\",\"qWR7eXxBiNee22A5u\",\"M4vq8ATaS9Jg5X7iP\",\"omn98QP6uBd923Azp\",\"yCeddtASCT5NFPJTP\",\"Es4eX2stRpyoXeC7f\",\"DjChaA6HXG2vBe4fK\",\"e9Cknxbx6o7Nb6REs\",\"BjJhatTBaTWm3ZhCt\",\"eqEJPqfuDzt8xJRyr\",\"pGh7WykiPe26fHJYv\",\"u9cRf5kvtpRB5ffB3\",\"cosoYtzKo6pKgrTJZ\",\"Fyd3be8zFJb8BfCHM\",\"c7uBxu2rgY77H5d79\",\"E6DBfkTgHuPsDWdG8\",\"hMgwdeNZwDutAFutj\",\"eEZ8zeWX8b3SWs84P\",\"ZTTJprKDvFqKGew7c\",\"eKSJgCaiy4ReJWXTg\",\"rcTxMiqGiX7waNPiH\",\"f3RAbWvE6uESq7KE5\",\"z5b7fkD4dCMyjP4i5\",\"LtTpCzF8kt6Rdth4X\",\"5hHf2e9zimbmxMqqF\",\"WZfoFMKheK5gojfZe\",\"6vfjruFp8ZpRSi3AT\",\"AeGoKjpCRNZB4SnYJ\",\"vewKwcMeGuk3p3MsN\",\"srJ34BaybkQh3qRkM\",\"RnY25enEBE8T9P5GS\",\"pi76g3eRpnKrhee2a\",\"zza5WjC8QrHcoDZBF\",\"aavYnYfTkbjzaAByg\",\"9AojRc9ZE5NEQP22b\",\"NGvCPuMiAP3xrRLfB\",\"CH53jGETBeJTummf3\",\"oDtGiNqDMHmhHE3J8\",\"Yp7uvStL97cC9fKkY\",\"wo4cpen33NYFHNca7\",\"sN2JyFeJCwfwwHPwF\",\"QvEXmSEo3ANp3yPyH\",\"AasGs8AeX9Lcb9xJn\",\"J7d397iB5GuWRAMfg\",\"PTo9qt93YqGvL8fCa\",\"FGEeCTorXbX3WvjFW\",\"Hq8v7ffCKdgbErDxt\",\"Ya3eHgs8x3unZRLpb\",\"BKyhP7chJmfBvs6eC\",\"SCYNpjgtLCE9rKpYB\",\"RoGGD5cpHb4ftdLDv\",\"uAS9uKs8KQmp8uhqn\",\"gR2vYDNPKhAcxa2yk\",\"YSmLyP3eRhcFjJPzg\",\"gDRg9a8hMrDefRkcB\",\"EFcA6HS9BnooMCeSk\",\"C8yR2sSnDkr8XfAjb\",\"nkH3HfJXLMNcBMM79\",\"gJud6vyDSFMbHxT3c\",\"84zK8v8QyNxWbEAk5\",\"MWt6kziH2PQA8Pmbu\",\"fYb5FSoEXexprjDXA\",\"ecEBGmi9dPBxyxfYz\",\"vwTy7y6pLbJpL7aqQ\",\"NYpfJBfeQDwvGEMd4\"],\"quality\":[5,4,5,4,4,5,5,5,5,5,4,5,5,5,5,5,5,5,5,5,5,4,5,5,5,5,5,5,5,4,5,2,5,5,5,5,5,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":4.775,\"family\":[{\"_id\":\"6xJMo3NerTFXXWSz2\",\"language\":\"cpp\"},{\"_id\":\"apYBsyuhCDH33hQSW\",\"language\":\"csharp\"},{\"_id\":\"TCEYq7KYJE3ogvt9j\",\"language\":\"javascript\"},{\"_id\":\"frRRffQGSrPTknfxY\",\"language\":\"python3\"},{\"_id\":\"aPj72xNiKrTyACz5R\",\"language\":\"ruby\"},{\"_id\":\"JHRPC8FdcroLRosXZ\",\"language\":\"swift\"}]}}"]