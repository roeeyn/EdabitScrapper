a["{\"msg\":\"result\",\"id\":\"1743\",\"result\":{\"_id\":\"ycNLF4XMmQub5AeTt\",\"author\":\"Sweet\",\"authorId\":\"BpiAkZfs6sXRMdArb\",\"code\":\"function nodeType(N, P, n) {\\n\\t\\n}\",\"difficulty\":2.375,\"isHidden\":false,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"JfFJYTA6pffwN4txP\",\"instructions\":\"We have two arrays `N` and `P`,  where `N` represents the value of a node in **Binary Tree**, and `P` is the parent of `N`.\\n\\nN | P\\n--- | ---\\n1 | 2\\n3 | 2\\n6 | 8\\n9 | 8\\n2 | 5\\n8 | 5\\n5 | -1\\n\\nWrite a function to find the node type of the node within this Binary Tree, ordered by the value of the node. Output one of the following:\\n\\n- `Root`: If node is root node.\\n- `Leaf`: If node is leaf node.\\n- `Inner`: If node is neither root nor leaf node.\\n- `Not exist`: If node not exist.\\n\\n```\\nnodeType([1, 3, 6, 9, 2, 8, 5], [2, 2, 8, 8, 5, 5, -1], 5) ➞ \\\"Root\\\"\\n\\nnodeType([1, 3, 6, 9, 2, 8, 5], [2, 2, 8, 8, 5, 5, -1], 6) ➞ \\\"Leaf\\\"\\n\\nnodeType([1, 3, 6, 9, 2, 8, 5], [2, 2, 8, 8, 5, 5, -1], 2) ➞ \\\"Inner\\\"\\n\\nnodeType([1, 3, 6, 9, 2, 8, 5], [2, 2, 8, 8, 5, 5, -1], 10) ➞ \\\"Not exist\\\"\\n```\\n\\n![Binary Tree Example](https://edabit-challenges.s3.amazonaws.com/binary-tree-example.png)\\n\\n### Notes\\nAll values of `N` array are unique.\",\"lab\":\"Test.assertSimilar(nodeType([1, 3, 6, 9, 2, 8, 5], [2, 2, 8, 8, 5, 5, -1], 1 ), \\\"Leaf\\\")\\nTest.assertSimilar(nodeType([1, 3, 6, 9, 2, 8, 5], [2, 2, 8, 8, 5, 5, -1], 2), \\\"Inner\\\")\\nTest.assertSimilar(nodeType([1, 3, 6, 9, 2, 8, 5], [2, 2, 8, 8, 5, 5, -1], 3), \\\"Leaf\\\")\\nTest.assertSimilar(nodeType([1, 3, 6, 9, 2, 8, 5], [2, 2, 8, 8, 5, 5, -1], 5), \\\"Root\\\")\\nTest.assertSimilar(nodeType([1, 3, 6, 9, 2, 8, 5], [2, 2, 8, 8, 5, 5, -1], 6), \\\"Leaf\\\")\\nTest.assertSimilar(nodeType([1, 3, 6, 9, 2, 8, 5], [2, 2, 8, 8, 5, 5, -1], 8), \\\"Inner\\\")\\nTest.assertSimilar(nodeType([1, 3, 6, 9, 2, 8, 5], [2, 2, 8, 8, 5, 5, -1], 9), \\\"Leaf\\\")\\nTest.assertSimilar(nodeType([1, 3, 6, 9, 2, 8, 5], [2, 2, 8, 8, 5, 5, -1], 10), \\\"Not exist\\\")\\nTest.assertSimilar(nodeType([6, 3, 1, 2, 5, 7, 4, 6, 8], [3, 1, 6, 1, 2, 3, 8, -1, 6], 8), \\\"Inner\\\")\\nTest.assertSimilar(nodeType([5, 6, 8, 7, 1, 9, 4, 11, 10, 2], [8, 8, -1, 8, 7, 4, 5, 4, 1, 1], 11), \\\"Leaf\\\")\\nTest.assertSimilar(nodeType([3, 2, 4, 9, 11, 10, 8, 5, 6, 7], [-1, 3, 3, 2, 3, 4, 4, 9, 10, 8], 3 ), \\\"Root\\\")\\nTest.assertSimilar(nodeType([5, 6, 8, 7, 1, 9, 4, 11, 10, 2], [8, 8, -1, 8, 7, 4, 5, 4, 1, 1], 4), \\\"Inner\\\")\\nTest.assertSimilar(nodeType([3, 2, 4, 9, 11, 10, 8, 5, 6, 7], [-1, 3, 3, 2, 3, 4, 4, 9, 10, 8], 6), \\\"Leaf\\\")\\nTest.assertSimilar(nodeType([6, 3, 1, 2, 5, 7, 4, 6, 8], [3, 1, 6, 1, 2, 3, 8, -1, 6], 5), \\\"Leaf\\\")\\nTest.assertSimilar(nodeType([5, 6, 8, 7, 1, 9, 4, 11, 10, 2], [8, 8, -1, 8, 7, 4, 5, 4, 1, 1], 8), \\\"Root\\\")\\nTest.assertSimilar(nodeType([3, 2, 4, 9, 11, 10, 8, 5, 6, 7], [-1, 3, 3, 2, 3, 4, 4, 9, 10, 8], 10), \\\"Inner\\\")\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[4,4,4,4,4,3,1,3,3,2,2,0,2,4,3,2,0,3,2,0,3,2,2,3,4,1,0,4,3,4,0,4,2,1,4,4,5,1,3,2,2,4,4,4,1,2,2,3,3,4,4,2,0,3,2,1,3,2,2,1,3,2,2,2,2,1,2,1,2,3,3,3,2,1,3,3,1,3,4,2,2,2,3,4,0,0,3,3,1,2,2,0,5,3,0,3,3,2,2,3,2,2,2,2],\"rators\":[\"BpiAkZfs6sXRMdArb\",\"yjtdwc2AC4jA2RWtn\",\"HJ9nGZBJ2QYKf5BkD\",\"PMQg2NecsexhXQCwZ\",\"Aksy3eQsfsL5rDb3g\",\"65dbBZynphj53nXqA\",\"2YEYFDWxAZtqzBpJX\",\"jWW9YLuYPdAR6uR4c\",\"gGnDsJz5hr2t9MKCF\",\"AasGs8AeX9Lcb9xJn\",\"n5wubRfh6zh8QRymN\",\"cRpaCxYRmGcN3Nsoj\",\"frx4Kkg7MayMPupHR\",\"PwZzdspFoc9SX7Y3H\",\"zsNp9fk9BGDBiHr4G\",\"8tEikq8QhumvnbHXK\",\"qcHNEmZ5q2NYWemcx\",\"tpSdW5C7xPKQj32d2\",\"5NGxHLcQ8Af2RJ4TN\",\"cyiikjQh3y8coW4t4\",\"dPM2Rk2iMkznyXNEt\",\"h4MRqm88urfevv3Y7\",\"EjPLq3QSJdGQFJdgW\",\"XSowcGMedgyp37Hts\",\"q85PNa8zG7ZTRgFvX\",\"s5zzhdSQFAa9PbYur\",\"mjvutuM9aEkfyp2cK\",\"JGBCMpnbbi5ztuFoX\",\"AnxsFwS56aA9qoYaK\",\"Gss69WunuxyyoKp6Q\",\"wQ25xzXqh4y3A8NBB\",\"2d6fufcQy4F3awkF3\",\"SjY6a2v6jMjGraDKz\",\"54Ka62KytXRsrLPhZ\",\"CfzZZizBXwJJkowmS\",\"yuLxi2qBJvMnwgdgJ\",\"Lur4ggqDWjGMzb3bH\",\"zvYa5b9wsiMYJZ2yS\",\"Xk2g4CNFAnYcvxiSr\",\"HHLi7u8RdCaM2NQyy\",\"GCsLzWAhLvniQqR3J\",\"5G8Hddrw8aubnsjng\",\"5fTTTkks5HDWnphxT\",\"MyzWcaogmTDjmukNx\",\"ZXRMRAJNP6eseLdbR\",\"FJsvM5yqKuK9yMk9P\",\"E3qTTy7ZJqFyok6a3\",\"FGmoacYgc9S8Kmgey\",\"CMPqZzRxXA7RrXGzt\",\"MwmLZcBF75zaoFx3C\",\"F9iScttyWkzoPjs5B\",\"QMq9dcvgpyNK6RAze\",\"7bJzEjnS5pdmgysmx\",\"Po3v3dHCk6wYGKMwi\",\"hNEhHd8qodq4P3h2g\",\"BCfWzbu8SowAQZtZs\",\"ezqMxYZGNPh2MDTtf\",\"Fihu6Nfanw5gAgXMK\",\"oqz5E4daZyuCnhqZG\",\"aEm3Wvj2rFYRL8Lrb\",\"aidPcPAieHHHz7JxA\",\"MW4gsgPJfaMEMyXPy\",\"vic9SZ9qqj9WhRkbd\",\"GJMDLcqB498dLie9L\",\"MxhEnn7XAwCMpKXwP\",\"SNt23Ei5dSNtfpEMd\",\"cnmj8mAbLcMnKaqLS\",\"73AGQGmFwje6sAupk\",\"KPM6XyeJSbTJDDpih\",\"jnewuuwstbRaRm8Kq\",\"73Axvj2aN2PXNPbd5\",\"BedTuZQcg7mCmqjMK\",\"qXSomgBwHa7YBHAez\",\"jBJYZ3GHujuKJ5stt\",\"EnTxYcdvci6dwW7ma\",\"sNcDN3s3rH9wcNg5n\",\"cJpe7Ya4PiB4peFmu\",\"zH5dKCLs7domGcxFt\",\"dgKxbP99h2ELwrGsr\",\"9rjDnhrBd63RHzJo6\",\"ftXLsTaA7yHmhuEsY\",\"SXAKKFagansJbFgWm\",\"eFKCpE4Xw2juJmidb\",\"Avu6jXxvsCFTpTaMr\",\"iK3EpmpwvxS4cSPea\",\"94XQj7wutz9ySewYC\",\"fYNRXCGkfc9ycDDGN\",\"c2A6EsBcBwR4bbmAZ\",\"4Xv87xmdSnpYhi8hz\",\"Ygy4NA6ih4QK7DpmJ\",\"dGugwhA6uwwjPGAa5\",\"iRWkFFriwxk5oAbDg\",\"xn7uGNKeAwPEkP9oA\",\"kp2ZbCewZJAbfd7xv\",\"z5ebtimXwFFJdYxoa\",\"o7wywYtTemznwe8FT\",\"ZiAo5JWD4aDC4wmh2\",\"Yp7uvStL97cC9fKkY\",\"kg4g59PDwHNsQMBLE\",\"46EqDiLEdJPtDFujt\",\"mDWNyaaQ9hvPCRzSd\",\"ZLYBfAascpgGofCPk\",\"x9vfoQGoNZh8NXA22\",\"c7uBxu2rgY77H5d79\",\"e9Cknxbx6o7Nb6REs\",\"QRv96jmNaYsWkxQEG\",\"StSFXy92jCt59kcnQ\",\"BdnE4RS5puoxo92mA\",\"ouHDmyNF4rwejyNgs\",\"6ZkWFsNfQj4fEZ3xj\",\"AMpQSjKsRqhCDyS2j\"],\"total\":118,\"quality\":[4,5,5,5,5,5,5,5,5,5,5,5]},\"flags\":0},\"subscribers\":[\"BpiAkZfs6sXRMdArb\"],\"summary\":\"We have two arrays N and P,  where N represents the value of a node in Binary Tree, and P is the parent of N.\\n\\nN | P\\n--- | ---\\n1 | 2\\n3 | 2\\n6 | 8\\n9 | 8\\n2 | 5\\n8 | 5\\n5 | -1\\n\\nWrite a function to find the node type of the node within this Binary Tree, ordered by the value of the node. Output one of the following:\\n\\nRoot: If node is root node.\\nLeaf: If node is leaf n\",\"tags\":[\"algorithms\",\"arrays\",\"conditions\",\"interview\"],\"timestamp\":{\"$date\":1572035081562},\"title\":\"Binary Tree Nodes\",\"quality\":4.916666666666667,\"family\":[{\"_id\":\"rEmRjCzmJ9BwQhpst\",\"language\":\"cpp\"},{\"_id\":\"ycNLF4XMmQub5AeTt\",\"language\":\"javascript\"},{\"_id\":\"Cp3JRpooAqfA4kGkv\",\"language\":\"python3\"},{\"_id\":\"h2CsmKYyrq3GKEkWK\",\"language\":\"ruby\"}]}}"]