a["{\"msg\":\"result\",\"id\":\"1874\",\"result\":{\"_id\":\"yeevEvr7SKTtbekKm\",\"author\":\"er0s\",\"authorId\":\"5Zq3aGdvh4LHBvnJL\",\"code\":\"function constraint(txt) {\\n\\t\\n}\",\"difficulty\":2.6808510638297873,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"uzhLgPGmAbXBt6BSq\",\"instructions\":\"In this challenge, establish which type of constrained writing is applied to a sentence. There are four possible types to detect:\\n\\n- **Pangram**: the sentence contains all the 26 letters of the English alphabet.\\n- **Heterogram**: the sentence doesn't have multiple instances of its letters (as to say that every letter is unique).\\n- **Tautogram**: every word of the sentence starts with the same letter.\\n- **Transgram**: all words of the sentence share at least a common letter.\\n\\nGiven a string `txt` being a sentence, implement a function that returns the strings `\\\"Pangram\\\"`, `\\\"Heterogram\\\"`, `\\\"Tautogram\\\"` or `\\\"Transgram\\\"` accordingly to the above definitions and following the same given order to establish the result. If no constrained writing is detected, return the string `\\\"Sentence\\\"`.\\n\\n### Examples\\n```\\nconstraint(\\\"The quick brown fox jumps over the lazy dog.\\\") ➞ \\\"Pangram\\\"\\n// The sentence contains every letter of the alphabet.\\n// Repetitions are not considered.\\n\\nconstraint(\\\"The big dwarf only jumps.\\\") ➞ \\\"Heterogram\\\"\\n// The sentence has only unique characters.\\n\\nconstraint(\\\"Todd told Tom to take the tiny turtles.\\\") ➞ \\\"Tautogram\\\"\\n// Every word starts with the letter \\\"t\\\".\\n\\nconstraint(\\\"A cannibal alligator has attacked an unaware vegan alligator.\\\") ➞ \\\"Transgram\\\"\\n// Every word contains the letter \\\"a\\\".\\n\\nconstraint(\\\"The unbearable lightness of coding...\\\") ➞ \\\"Sentence\\\"\\n// No constraint is applied to the sentence.\\n```\\n\\n### Notes\\n- Remember to respect the given order to establish the result: a **Pangram** has to be detected before a **Heterogram**, and a **Tautogram** has to be detected before a **Transgram**.\\n- Sentences will contain letters (either uppercase or lowercase) and punctuation. Your function must be case-insensitive.\",\"isHidden\":false,\"lab\":\"Test.assertEquals(constraint(\\\"The quick brown fox jumps over the lazy dog.\\\"), \\\"Pangram\\\")\\nTest.assertEquals(constraint(\\\"The big dwarf only jumps.\\\"), \\\"Heterogram\\\")\\nTest.assertEquals(constraint(\\\"Todd told Tom to take the tiny turtles.\\\"), \\\"Tautogram\\\")\\nTest.assertEquals(constraint(\\\"A cannibal alligator has attacked an unaware vegan alligator.\\\"), \\\"Transgram\\\")\\nTest.assertEquals(constraint(\\\"The unbearable lightness of coding...\\\"), \\\"Sentence\\\")\\nTest.assertEquals(constraint(\\\"Pack my box with five dozen liquor jugs.\\\"), \\\"Pangram\\\")\\nTest.assertEquals(constraint(\\\"The dog is crazy.\\\"), \\\"Heterogram\\\")\\nTest.assertEquals(constraint(\\\"It is indeed included instantly!\\\"), \\\"Tautogram\\\")\\nTest.assertEquals(constraint(\\\"Those loops could work without constants sometimes.\\\"), \\\"Transgram\\\")\\nTest.assertEquals(constraint(\\\"Sphinx of black quartz, judge my vow.\\\"), \\\"Pangram\\\")\\nTest.assertEquals(constraint(\\\"Mind the gap!\\\"), \\\"Heterogram\\\")\\nTest.assertEquals(constraint(\\\"Put some more tobacco inside it next time, it's just too strong!\\\"), \\\"Sentence\\\")\\nTest.assertEquals(constraint(\\\"Thursdays: the time to teach them the truth.\\\"), \\\"Tautogram\\\")\\nTest.assertEquals(constraint(\\\"Would you mind pass me that axe, Eugene?\\\"), \\\"Sentence\\\")\\nTest.assertEquals(constraint(\\\"AbCdEfGhIjKlMnOpQrStUvWxYz\\\"), \\\"Pangram\\\")\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,0,2,2,2,2,3,3,2,3,3,2,3,3,3,3,3,1,3,3,3,3,3,2,3,4,3,5,3,4,4,1,2,3,2,4,4,4,5,2,0,3,3],\"rators\":[\"5Zq3aGdvh4LHBvnJL\",\"n5wubRfh6zh8QRymN\",\"yjtdwc2AC4jA2RWtn\",\"6BpBQnSGhzgvhXrEy\",\"RE4Mm9T6Q9uygAxGS\",\"CuY5BaTCcu7Mp9tDu\",\"KcpfY4XZ7fNamyLd3\",\"mHT2bJb5SByfJ8yKS\",\"FJsvM5yqKuK9yMk9P\",\"2innwjWqxJHo4eRGh\",\"pd8dm7sWLW9cY6dYW\",\"YER6iBcpJCuhgrYDN\",\"EWn8w8P3nNh7knatY\",\"a777e8chPvJkY3tKa\",\"3PenGZ4cKCxZcnd9G\",\"mZNCpLwZ7sY3adk66\",\"AasGs8AeX9Lcb9xJn\",\"65dbBZynphj53nXqA\",\"vt88eKvFz6ES8sbrD\",\"QRv96jmNaYsWkxQEG\",\"aEm3Wvj2rFYRL8Lrb\",\"buX4mCQhtXCfBjeno\",\"rr8eSDoAKixZznsEZ\",\"vn6nR36mdfY8z2zKx\",\"eFjGhq7C7bBKXjT6X\",\"Ac6u9uxPiFD5D8tfr\",\"YQ39kq5kadqqttyyc\",\"BHqfwLYjGSFRHcxjL\",\"CJBPyyfyaEeEo63sb\",\"5R44BNkysEmF647ag\",\"zMCXYFZSsviDCvjnY\",\"eGmzRsSATFsE2wjJa\",\"bXaGdBM8FBLHf7N6Y\",\"kp2ZbCewZJAbfd7xv\",\"477x24BHagvCWeCsS\",\"2kFQBkta2yaF97gLG\",\"Es4eX2stRpyoXeC7f\",\"pGh7WykiPe26fHJYv\",\"RKKuw76K7sRBMouKq\",\"8HZPcvfYetgFDkkig\",\"bX6tpTCjwoi6XMMbK\",\"8SYDBRtkZuW3pdPtG\",\"BTdKRxKHXHDDD4934\",\"mDWNyaaQ9hvPCRzSd\",\"8BJyXvRWcrvN3nttS\",\"M4vq8ATaS9Jg5X7iP\",\"WnogMFYXoyvmBmGkm\",\"s678Wirfor5uYL5T6\",\"DPi9QGLctq2y76KuE\"],\"total\":53,\"quality\":[5,5,5,5,5,5,5]},\"flags\":1},\"summary\":\"In this challenge, establish which type of constrained writing is applied to a sentence. There are four possible types to detect:\\n\\nPangram: the sentence contains all the 26 letters of the English alphabet.\\nHeterogram: the sentence doesn't have multiple instances of its letters (as to say that every letter is unique).\\nTautogram: every word of the sentence start\",\"tags\":[\"strings\",\"validation\",\"logic\"],\"timestamp\":{\"$date\":1581439035602},\"title\":\"Constrained Writing\",\"quality\":5,\"family\":[{\"_id\":\"g7cbJYaRkq5P36Ewy\",\"language\":\"cpp\"},{\"_id\":\"yeevEvr7SKTtbekKm\",\"language\":\"javascript\"},{\"_id\":\"JmyD5D4KnhzmMPEKz\",\"language\":\"python3\"},{\"_id\":\"kR8zocQMyQwvExiY5\",\"language\":\"ruby\"}]}}"]