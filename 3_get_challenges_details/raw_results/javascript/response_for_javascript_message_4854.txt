a["{\"msg\":\"result\",\"id\":\"1182\",\"result\":{\"_id\":\"3rGuRbe8nZ3mXdBRN\",\"author\":\"benmcl@shaw.ca\",\"authorId\":\"SYEuojZtP6yLXryHv\",\"code\":\"const _ = require(\\\"lodash\\\")\\n// note: _.matches, _.matchesProperty, and _.property are permitted\\n\\nfunction partition(collection, check) {\\n\\t\\n}\",\"difficulty\":2,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"pCzmFhjNCZc5JWoYL\",\"instructions\":\"Write your own version of the lodash `_.partition` function. Partition receives a \\\"collection\\\", which can be an array or object, and a function that will check each item in the collection, it returns an array containing two arrays, one of the values that passed the check and the other with values that didn't.\\n\\n```\\nconst array = [{item: true}, {item: true}, {item: false}]\\npartition(array) ➞ [[{item: true}, {item: true}], [{item: false}]]\\n```\\n\\n### Arguments\\n- **collection (Array|Object):** The collection to iterate over.\\n- **\\\\[check]**(Function): The function invoked per iteration.\\n\\n### Returns\\n- **(Array):** Returns the array containing two arrays each holding either those that passed and those that didn't.\\n\\nThe function passed in can be a regular function, but it can also be what the lodash writers refer to as _shorthand_. Shorthand means that if a particular value is passed (e.g. a string or an array), the partition function will know to use a lodash helper function. For this challenge, you're permitted to import the helpers mentioned in the examples below.\\n\\n### Examples\\n\\n ```\\nconst users = [\\n  { 'user': 'barney',  'age': 36, 'active': false },\\n  { 'user': 'fred',    'age': 40, 'active': true },\\n  { 'user': 'pebbles', 'age': 1,  'active': false }\\n];\\n ```\\n\\nUsing just a normal function passed int.\\n\\n ```\\n_.partition(users, d => d.active; }) ➞ objects for [['fred'], ['barney', 'pebbles']]\\n  ```\\n\\nUsing the `_.matches` shorthand - just an object.\\n\\n ```\\n_.partition(users, { 'age': 1, 'active': false })\\n➞  objects for [['pebbles'], ['barney', 'fred']]\\n  ```\\n\\nUsing `_.matchesProperty`  shorthand - an array representing a key-value pair.\\n\\n ```\\n_.partition(users, ['active', false]) \\n➞ objects for [['barney', 'pebbles'], ['fred']]\\n  ```\\n\\nUsing  `_.property` shorthand - just a string.\\n\\n ```\\n_.partition(users, 'active')\\n➞  objects for [['fred'], ['barney', 'pebbles']]\\n```\\n\\n### Notes\\nWe've already written our own versions of these helpers\\n[property](https://edabit.com/challenge/do9CKFbqmuTwR49c8)\\n[matchesProperty](https://edabit.com/challenge/uSfPtCRcjhE9daPok)\\n\\n- Please don't import lodash, your challenge is to write your own version. I can write\\ncomplicated checking functions to prevent you from importing lodash but it makes it can cause problems in the tests. If you do cheat and just import partition, everyone will be able to see it.\\n- This entire series of challenges can be found [here](https://edabit.com/collection/vLR3aCkPwZKSobGCi).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"const _ = require(\\\"lodash\\\")\\nconst vehicles = [\\n  { make: \\\"toyota\\\", year: 2021, isUsed: false },\\n  { make: \\\"toyota\\\", year: 2019, isUsed: true },\\n  { make: \\\"ford\\\", year: 2012, isUsed: true },\\n  { make: \\\"ford\\\", year: 2021, isUsed: false },\\n  { make: \\\"ford\\\", year: 2017, isUsed: true },\\n  { make: \\\"mazda\\\", year: 2021, isUsed: false },\\n  { make: \\\"mazda\\\", year: 2018, isUsed: true },\\n]\\n\\nconst vehiclesObject = {\\n  stall1: { make: \\\"toyota\\\", year: 2021, isUsed: false },\\n  stall2: { make: \\\"toyota\\\", year: 2019, isUsed: true },\\n  stall3: { make: \\\"ford\\\", year: 2012, isUsed: true },\\n  stall4: { make: \\\"ford\\\", year: 2021, isUsed: false },\\n  stall5: { make: \\\"ford\\\", year: 2017, isUsed: true },\\n  stall6: { make: \\\"mazda\\\", year: 2021, isUsed: false },\\n  stall7: { make: \\\"mazda\\\", year: 2018, isUsed: true },\\n}\\n\\nTest.assertSimilar(\\n  _.partition(vehicles, (d) => d.make === \\\"toyota\\\"),\\n  partition(vehicles, (d) => d.make === \\\"toyota\\\")\\n)\\nTest.assertSimilar(\\n  _.partition(vehicles, { make: \\\"toyota\\\", isUsed: false }),\\n  partition(vehicles, { make: \\\"toyota\\\", isUsed: false })\\n)\\nTest.assertSimilar(\\n  _.partition(vehiclesObject, { make: \\\"toyota\\\", isUsed: false }),\\n  partition(vehiclesObject, { make: \\\"toyota\\\", isUsed: false })\\n)\\nTest.assertSimilar(_.partition(vehicles, [\\\"isUsed\\\", false]), partition(vehicles, [\\\"isUsed\\\", false]))\\nTest.assertSimilar(_.partition(vehicles, \\\"isUsed\\\"), partition(vehicles, \\\"isUsed\\\"))\\n\\n\\nTest.assertSimilar(\\n  _.partition(vehiclesObject, (d) => d.year < 2018),\\n  partition(vehiclesObject, (d) => d.year < 2018)\\n)\\n\\nTest.assertSimilar(\\n  _.partition(vehiclesObject, { make: \\\"toyota\\\", year: 2021, isUsed: false }),\\n  partition(vehiclesObject, { make: \\\"toyota\\\", year: 2021, isUsed: false })\\n)\\n\\nTest.assertSimilar(_.partition(vehiclesObject, \\\"toyota\\\"), partition(vehiclesObject, \\\"toyota\\\"))\\n\\n\\nTest.assertSimilar(_.partition(vehiclesObject, null), partition(vehiclesObject, null))\",\"language\":\"javascript\",\"quality\":0,\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,2,0,0,2,2,4,2,2,3,3],\"quality\":[],\"rators\":[\"SYEuojZtP6yLXryHv\",\"yjtdwc2AC4jA2RWtn\",\"CNc6rmwhbxkxEhHAp\",\"g4NCSxxHqHCGMpWwT\",\"65dbBZynphj53nXqA\",\"gXTAie79kiw28tx5u\",\"9qJwfSnwqzDYYRqTP\",\"uxKGACwmZ6FNZsMwE\",\"DHwbkbzYNpmkSFT7u\",\"vy5pxeCeiusayeXTL\",\"mgNKZu2P7NyRzTFPF\"],\"total\":12},\"flags\":0},\"summary\":\"Write your own version of the lodash _.partition function. Partition receives a \\\"collection\\\", which can be an array or object, and a function that will check each item in the collection, it returns an array containing two arrays, one of the values that passed the check and the other with values that didn't.\\n\\nconst array = [{item: true}, {item: true}, {item: fa\",\"tags\":[\"objects\",\"arrays\",\"functional_programming\"],\"timestamp\":{\"$date\":1611679281736},\"title\":\"Learn Lodash: Write Your Own Version of Partition, Split an Array in Two\",\"family\":[{\"_id\":\"3rGuRbe8nZ3mXdBRN\",\"language\":\"javascript\"}]}}"]