a["{\"msg\":\"result\",\"id\":\"1418\",\"result\":{\"_id\":\"mTT8M47D6EuEdTXLv\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"function fullKeyName(piece) {\\n\\t\\n}\",\"difficulty\":2.1481481481481484,\"familyId\":\"HKbDJCXsEkD2MhMLY\",\"instructions\":\"Given a string containing a *key signature* **written in shorthand**, create a function which replaces the *shorthand* with its **full written name**.\\n\\n- A **lowercase** letter denotes a **minor key**.\\n- An **uppercase** letter denotes a **major key**.\\n\\nSee the examples below for a more helpful guide!\\n\\n### Examples\\n```\\nfullKeyName(\\\"Prelude in C\\\") ➞ \\\"Prelude in C major\\\"\\n\\nfullKeyName(\\\"Fugue in c\\\") ➞ \\\"Fugue in C minor\\\"\\n\\nfullKeyName(\\\"Toccata and Fugue in d\\\") ➞ \\\"Toccata and Fugue in D minor\\\"\\n\\nfullKeyName(\\\"Sonata in eb\\\") ➞ \\\"Sonata in Eb minor\\\"\\n```\\n\\n### Notes\\n- Write the *letter* name in **uppercase** (ignore **b** and **#**).\\n- Write `\\\"major\\\"` or `\\\"minor\\\"` in all **lowercase** (rather than `\\\"Major\\\"` or `\\\"Minor\\\"`).\\n\\n### Hint\\nThe first letter of the term should always be capital, even if it's \\\"b\\\".\",\"isHidden\":false,\"lab\":\"Test.assertEquals(fullKeyName(\\\"Prelude in C\\\"), \\\"Prelude in C major\\\")\\nTest.assertEquals(fullKeyName(\\\"Fugue in c\\\"), \\\"Fugue in C minor\\\")\\nTest.assertEquals(fullKeyName(\\\"Toccata and Fugue in d\\\"), \\\"Toccata and Fugue in D minor\\\")\\nTest.assertEquals(fullKeyName(\\\"a Fugue in c\\\"), \\\"a Fugue in C minor\\\")\\nTest.assertEquals(fullKeyName(\\\"Sonata in D\\\"), \\\"Sonata in D major\\\")\\nTest.assertEquals(fullKeyName(\\\"Opera in eb\\\"), \\\"Opera in Eb minor\\\")\\nTest.assertEquals(fullKeyName(\\\"Toccata in ab\\\"), \\\"Toccata in Ab minor\\\")\\nTest.assertEquals(fullKeyName(\\\"Toccata in f\\\"), \\\"Toccata in F minor\\\")\\nTest.assertEquals(fullKeyName(\\\"Symphony in C#\\\"), \\\"Symphony in C# major\\\")\\nTest.assertEquals(fullKeyName(\\\"Mass in c\\\"), \\\"Mass in C minor\\\")\\nTest.assertEquals(fullKeyName(\\\"Toccata in c\\\"), \\\"Toccata in C minor\\\")\\nTest.assertEquals(fullKeyName(\\\"Prelude in Ab\\\"), \\\"Prelude in Ab major\\\")\\nTest.assertEquals(fullKeyName(\\\"Concerto in f#\\\"), \\\"Concerto in F# minor\\\")\\nTest.assertEquals(fullKeyName(\\\"Symphony in eb\\\"), \\\"Symphony in Eb minor\\\")\\nTest.assertEquals(fullKeyName(\\\"Sonata in a\\\"), \\\"Sonata in A minor\\\")\\nTest.assertEquals(fullKeyName(\\\"Sonata in e\\\"), \\\"Sonata in E minor\\\")\\nTest.assertEquals(fullKeyName(\\\"Concerto in c#\\\"), \\\"Concerto in C# minor\\\")\\nTest.assertEquals(fullKeyName(\\\"Opera in f\\\"), \\\"Opera in F minor\\\")\\nTest.assertEquals(fullKeyName(\\\"Mass in c\\\"), \\\"Mass in C minor\\\")\\nTest.assertEquals(fullKeyName(\\\"Symphony in D\\\"), \\\"Symphony in D major\\\")\\nTest.assertEquals(fullKeyName(\\\"Fugue in d\\\"), \\\"Fugue in D minor\\\")\\nTest.assertEquals(fullKeyName(\\\"Fugue in eb\\\"), \\\"Fugue in Eb minor\\\")\\nTest.assertEquals(fullKeyName(\\\"Fugue in F\\\"), \\\"Fugue in F major\\\")\\nTest.assertEquals(fullKeyName(\\\"Mass in c#\\\"), \\\"Mass in C# minor\\\")\\nTest.assertEquals(fullKeyName(\\\"Requiem in C\\\"), \\\"Requiem in C major\\\")\\nTest.assertEquals(fullKeyName(\\\"Prelude in Eb\\\"), \\\"Prelude in Eb major\\\")\\nTest.assertEquals(fullKeyName(\\\"Prelude in Bb\\\"), \\\"Prelude in Bb major\\\")\\nTest.assertEquals(fullKeyName(\\\"Fugue in g\\\"), \\\"Fugue in G minor\\\")\\nTest.assertEquals(fullKeyName(\\\"Requiem in c#\\\"), \\\"Requiem in C# minor\\\")\\nTest.assertEquals(fullKeyName(\\\"Opera in f\\\"), \\\"Opera in F minor\\\")\\nTest.assertEquals(fullKeyName(\\\"Prelude in G\\\"), \\\"Prelude in G major\\\")\\nTest.assertEquals(fullKeyName(\\\"Symphony in Eb\\\"), \\\"Symphony in Eb major\\\")\\nTest.assertEquals(fullKeyName(\\\"Symphony in eb\\\"), \\\"Symphony in Eb minor\\\")\\nTest.assertEquals(fullKeyName(\\\"Sonata in e\\\"), \\\"Sonata in E minor\\\")\\nTest.assertEquals(fullKeyName(\\\"Fugue in g\\\"), \\\"Fugue in G minor\\\")\\nTest.assertEquals(fullKeyName(\\\"Sonata in A\\\"), \\\"Sonata in A major\\\")\\nTest.assertEquals(fullKeyName(\\\"Requiem in b\\\"), \\\"Requiem in B minor\\\")\\nTest.assertEquals(fullKeyName(\\\"Sonata in eb\\\"), \\\"Sonata in Eb minor\\\")\\nTest.assertEquals(fullKeyName(\\\"Prelude in c#\\\"), \\\"Prelude in C# minor\\\")\\nTest.assertEquals(fullKeyName(\\\"Fugue in F\\\"), \\\"Fugue in F major\\\")\\nTest.assertEquals(fullKeyName(\\\"Concerto in ab\\\"), \\\"Concerto in Ab minor\\\")\\nTest.assertEquals(fullKeyName(\\\"Toccata in F#\\\"), \\\"Toccata in F# major\\\")\\nTest.assertEquals(fullKeyName(\\\"Symphony in Bb\\\"), \\\"Symphony in Bb major\\\")\\nTest.assertEquals(fullKeyName(\\\"Waltz in f#\\\"), \\\"Waltz in F# minor\\\")\\nTest.assertEquals(fullKeyName(\\\"Prelude in Eb\\\"), \\\"Prelude in Eb major\\\")\\nTest.assertEquals(fullKeyName(\\\"Requiem in b\\\"), \\\"Requiem in B minor\\\")\\nTest.assertEquals(fullKeyName(\\\"Concerto in Bb\\\"), \\\"Concerto in Bb major\\\")\\nTest.assertEquals(fullKeyName(\\\"Fugue in G\\\"), \\\"Fugue in G major\\\")\\nTest.assertEquals(fullKeyName(\\\"Mass in eb\\\"), \\\"Mass in Eb minor\\\")\\nTest.assertEquals(fullKeyName(\\\"Symphony in Ab\\\"), \\\"Symphony in Ab major\\\")\\nTest.assertEquals(fullKeyName(\\\"Symphony in f\\\"), \\\"Symphony in F minor\\\")\\nTest.assertEquals(fullKeyName(\\\"Fugue in f#\\\"), \\\"Fugue in F# minor\\\")\\nTest.assertEquals(fullKeyName(\\\"Prelude in D\\\"), \\\"Prelude in D major\\\")\\nTest.assertEquals(fullKeyName(\\\"Concerto in bb\\\"), \\\"Concerto in Bb minor\\\")\",\"language\":\"javascript\",\"summary\":\"Given a string containing a key signature written in shorthand, create a function which replaces the shorthand with its full written name.\\n\\nA lowercase letter denotes a minor key.\\nAn uppercase letter denotes a major key.\\n\\nSee the examples below for a more helpful guide!\\n\\nExamples\\nfullKeyName(\\\"Prelude in C\\\") ➞ \\\"Prelude in C major\\\"\\n\\nfullKeyName(\\\"Fugue in c\\\") ➞ \\\"\",\"tags\":[\"strings\",\"formatting\"],\"timestamp\":{\"$date\":1581899161444},\"title\":\"Shorthand for Key Signatures\",\"stats\":{\"completed\":{\"total\":64,\"ratings\":[2,2,2,2,2,2,1,2,2,2,2,2,2,2,3,2,2,2,3,2,3,2,1,2,2,3,2,3,2,2,3,2,3,2,3,2,1,3,2,1,2,2,0,3,3,2,3,0,3,2,3,3,2,3],\"rators\":[\"Y9Nz9yafaibz54W4o\",\"yjtdwc2AC4jA2RWtn\",\"pd8dm7sWLW9cY6dYW\",\"KcpfY4XZ7fNamyLd3\",\"2innwjWqxJHo4eRGh\",\"jqbm8L6895JgAtZ6H\",\"8BFSTCnoe2QggN64c\",\"n5wubRfh6zh8QRymN\",\"K9aHdd5ReP4JJwNKA\",\"Ehrta9env9HXyrGbW\",\"yuLxi2qBJvMnwgdgJ\",\"5Zq3aGdvh4LHBvnJL\",\"RSZmq4pgydJ87wErN\",\"6BpBQnSGhzgvhXrEy\",\"mHT2bJb5SByfJ8yKS\",\"EjPLq3QSJdGQFJdgW\",\"FJsvM5yqKuK9yMk9P\",\"pi76g3eRpnKrhee2a\",\"RE4Mm9T6Q9uygAxGS\",\"EWn8w8P3nNh7knatY\",\"YER6iBcpJCuhgrYDN\",\"AasGs8AeX9Lcb9xJn\",\"Es4eX2stRpyoXeC7f\",\"3PenGZ4cKCxZcnd9G\",\"zNN2fW2pJGpTxBgzx\",\"QRv96jmNaYsWkxQEG\",\"65dbBZynphj53nXqA\",\"8raviPK67KKxzQWcF\",\"t9FFAu6ML9xuEtMsN\",\"buX4mCQhtXCfBjeno\",\"vt88eKvFz6ES8sbrD\",\"aEm3Wvj2rFYRL8Lrb\",\"r7mZLgpQWzRiGddL5\",\"JsRTAwWK7Nikj4sKA\",\"hR4xXL3zwbr2LRx5C\",\"MEZNjeGd7APtvA3SL\",\"BdvdJYwHZr7JpkHsn\",\"bX6tpTCjwoi6XMMbK\",\"CNc6rmwhbxkxEhHAp\",\"M4vq8ATaS9Jg5X7iP\",\"pGh7WykiPe26fHJYv\",\"nr7jKeHEE3TC9oyp4\",\"vqD6ERedxEyXyT3Sx\",\"zw7g7T8wE5R5CBhXr\",\"qWR7eXxBiNee22A5u\",\"8BJyXvRWcrvN3nttS\",\"g4NCSxxHqHCGMpWwT\",\"acHSYL6uQAgpgFMjp\",\"Akq3fQcPRgPrWfsye\",\"AFfw7cGg83uYk2Miy\",\"srJ34BaybkQh3qRkM\",\"RtPhDuwmvWNHiBxmG\",\"2Qk2mFu9HBFzrB24i\",\"9gEWz76H8KmhN4yJj\",\"Xk2g4CNFAnYcvxiSr\",\"oDtGiNqDMHmhHE3J8\",\"DPi9QGLctq2y76KuE\",\"J7d397iB5GuWRAMfg\",\"Ya3eHgs8x3unZRLpb\",\"4K9CeS4Q7WWYBmjJD\"],\"quality\":[4,5,5,3,4,5,5,5,1,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"quality\":4.2727272727272725,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"fEi6b88Yugymk6yti\",\"language\":\"cpp\"},{\"_id\":\"mTT8M47D6EuEdTXLv\",\"language\":\"javascript\"},{\"_id\":\"zPWJNuuGGM6Sxbmgn\",\"language\":\"php\"},{\"_id\":\"yqeCTqSemWx5rJ7LZ\",\"language\":\"python3\"},{\"_id\":\"Qkk4FxKtZakn4H7sg\",\"language\":\"ruby\"}]}}"]