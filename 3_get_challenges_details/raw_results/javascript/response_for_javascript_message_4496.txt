a["{\"msg\":\"result\",\"id\":\"1004\",\"result\":{\"_id\":\"Cve45maGdj5XtQXgo\",\"author\":\"Miguel Carvalho\",\"authorId\":\"8Z3dkvWBqtrMEE48N\",\"code\":\"function filterValues(obj) {\\n\\t\\n}\",\"difficulty\":1.6666666666666667,\"quality\":4.811320754716981,\"editorId\":\"J74DckDe4qdcCTxfL\",\"familyId\":\"A4uTCWTBnRmHpEo2g\",\"instructions\":\"The insurance guy calls, the policy you chose doesn't cover values below 5000€, it wouldn't dignify your status you said at the time. Given an object with a list of the stolen items, return a **copy** of that list **without** the values below 5000.\\n\\n### Examples\\n```\\n{ tv: 4999, guitar:5000, fork: 5001 } ➞ { guitar:5000, fork: 5001 }\\n\\n{ tv: 4999 } ➞ {}\\n\\n{ guitar: 5000 } ➞ { guitar: 5000 }\\n\\n{} ➞ {}\\n```\\n\\n### Notes\\nN / A\",\"isFree\":false,\"isHidden\":false,\"lab\":\"const random = Math.random() * 10000, random2 = Test.randomNumber() * 100\\nconst obj = {piano: 4999, skate: 5000, stereo: random, \\\"rubber duck\\\": random2}\\nlet obj2 = Object.entries(obj).filter(item => item[1] >= 5000)\\nobj2 = Object.fromEntries(obj2);\\nconst check = Object.is(filterValues(obj), obj)\\n\\nTest.assertEquals(check, false)\\nTest.assertSimilar(filterValues(obj), obj2)\\nTest.assertSimilar(filterValues({}), {})\\nTest.assertSimilar(filterValues({piano: 300}), {})\\nTest.assertSimilar(filterValues({tv: 4999, guitar:5000, fork: 5001 }), {guitar:5000, fork: 5001 })\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,2,0,1,2,0,2,1,2,2,1,1,2,2,2,2,2,2,2,2,2,1,0,2,2,2,1,1,2,2,2,2,1,3,0,2,1,2,2,0,1,2,2,2,1,1,1,1,1,3,2,2,3,2,2,2,2,2,2,1,1,2,2,2,1,2,1,0,2,2,2,3,4,2,1,2,2,0,2,2,2,2,3,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,5,2,0,2,1,2,2,0,1,1,0,1,1,2,2,2,2,2,2,2,3,1,0,3,1,2,2,2,2,1,2,2,2,1,2,0,2,0,2,1,0,1,2,2,1,2,2,3,2,0],\"quality\":[5,4,5,4,5,5,5,5,5,4,5,5,5,4,5,2,5,5,5,5,5,5,5,5,5,5,5,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,5,5,4,5],\"rators\":[\"8Z3dkvWBqtrMEE48N\",\"RE4Mm9T6Q9uygAxGS\",\"yjtdwc2AC4jA2RWtn\",\"QRv96jmNaYsWkxQEG\",\"65dbBZynphj53nXqA\",\"g4NCSxxHqHCGMpWwT\",\"BdvdJYwHZr7JpkHsn\",\"n5wubRfh6zh8QRymN\",\"Ya3eHgs8x3unZRLpb\",\"tAF9Gf6PiGogbZuWs\",\"nkH3HfJXLMNcBMM79\",\"CNc6rmwhbxkxEhHAp\",\"QnPD4Sv6W4LHc2Qng\",\"7gZKfvwaeqsGKXMEN\",\"kp2ZbCewZJAbfd7xv\",\"PGCDJpQMN8Sjn9Gm6\",\"vAh63eGRwkuJtoP8v\",\"buX4mCQhtXCfBjeno\",\"Po3v3dHCk6wYGKMwi\",\"zPXra2B3ee8AGTnWL\",\"mHT2bJb5SByfJ8yKS\",\"daD4PtrAmXk4Q9jG7\",\"7wtuhPesfhcYsfZaZ\",\"evTTY9hwrtogaNxXn\",\"jkumHyXfMkhGcPgqC\",\"vtHbevf2tHqe6mRxX\",\"Y7xPTPKpNAEiM2jkH\",\"qJTbsuToGEtaYnGxn\",\"zw7g7T8wE5R5CBhXr\",\"sHnfwDzKzmeApjTv8\",\"YLTZRjM78Wi9J9Re4\",\"r7mZLgpQWzRiGddL5\",\"7ThZXvg8KWhMRjL5B\",\"AFfw7cGg83uYk2Miy\",\"etk4ZTTo4rr6BEPD9\",\"sbd94Sccp4gwqWty4\",\"wbzQwextPpnNBR7cG\",\"jd9sRTnsyeKpPggba\",\"qzRW4szB6trBk4QFA\",\"vewKwcMeGuk3p3MsN\",\"ttA7egwFTcPgE4QGW\",\"Rrb84KWhN5tjhMGMA\",\"R9uaMzX2Y4ND8Cosm\",\"jLSZdBseR2kfjt8dL\",\"STipuJs6kBvPqqsSE\",\"c3ixxp9yXLsvFuJdj\",\"v5Fia7ctFNJCwM75m\",\"nyh73Tr6GhqAat78g\",\"SYEuojZtP6yLXryHv\",\"EJXaAcika2bAcRAta\",\"sitJxAJgbreZnrtKo\",\"9uaYS8fz4rEtNtGFg\",\"2tCCFm5iefjrRSaxv\",\"EuvARjMRgLFoQhGEF\",\"Yp7uvStL97cC9fKkY\",\"SY9Euc4kQfRgetXTd\",\"Xjc8YFLBYfNTbFCkz\",\"y7v2yNvJFTbnz8R5t\",\"zgoq9MhrL2h75DAMA\",\"sAhNjH3HZ9tSSSKTX\",\"N7fwDd5JRDsuX7EKa\",\"YSmLyP3eRhcFjJPzg\",\"3rQ3fN5SM2eGHmTi5\",\"fjBB8rBHeCeMGELvW\",\"mER4kEsRRxwbFgPRC\",\"oqsAWELw446L89XYg\",\"u9cRf5kvtpRB5ffB3\",\"3Gf7ikLijfoxabiPY\",\"QAZ5DGaWWYhku4BNz\",\"yK7zzK2aGJwuWKHRL\",\"B4br3kM6uvv6PxQrD\",\"bX6tpTCjwoi6XMMbK\",\"z8R4K9Cd7PNuh256A\",\"pRHtHzrgRvxycwu3a\",\"eEZ8zeWX8b3SWs84P\",\"gLt9Nzpe4oqDx6i2e\",\"JsRTAwWK7Nikj4sKA\",\"8w9zCrPo2sS3qzMRK\",\"Nb6LYPoQP6KJZt8mz\",\"gGwDyEJeAMCrbhprW\",\"RtPhDuwmvWNHiBxmG\",\"m6qKkBY4aPWziyJTj\",\"yYoNEQDb6epCboN2c\",\"qDT7RLgsKnjnS63Wi\",\"2Ni3PzJAc5fAhqBkb\",\"mp4S3vay6oAz6YyLQ\",\"5hHf2e9zimbmxMqqF\",\"wd5DCqLoMZNsQooJN\",\"vEapufGjE49e5JSch\",\"jtzNdgDCzsekkdpxA\",\"e9Cknxbx6o7Nb6REs\",\"c7uBxu2rgY77H5d79\",\"CH53jGETBeJTummf3\",\"6P3gYyqiGnqKijwF8\",\"PTo9qt93YqGvL8fCa\",\"2QziknsznNeMPRh3g\",\"Z6MEfx6NC927y4KQc\",\"w3giEnhBSYTbrE7d3\",\"2Qk2mFu9HBFzrB24i\",\"xrqK8P7zH83wjo3L4\",\"ApqWTmEEkTCsDou48\",\"srJ34BaybkQh3qRkM\",\"fRbWFpcowR2RK6J5h\",\"cgCQDs9i7yChKeAjE\",\"B8DssRcDs4XF8JqAX\",\"WRax3ebxd7NXxC5iC\",\"J7d397iB5GuWRAMfg\",\"TtrXnGzi9MyhLvWiz\",\"wJTDDTE3TrmSXKP4d\",\"pBPeMTaRmdFWQezW3\",\"qLv6iMQAGkgFv5qki\",\"733qgZ7ZSSSrzbXGw\",\"AasGs8AeX9Lcb9xJn\",\"jemTNShfp6ymAs3pj\",\"oDtGiNqDMHmhHE3J8\",\"Q7Yxda7dqKeYPs2Db\",\"GqG4xjYTYzPinynv9\",\"ApfuspYCvPTDwyZBr\",\"NGvCPuMiAP3xrRLfB\",\"M4vq8ATaS9Jg5X7iP\",\"6BpBQnSGhzgvhXrEy\",\"NbQkNhTGSwCtqCrY7\",\"LZjcNtijMJb5B9Pc2\",\"QguFWo84zgF3c8BGr\",\"8BJyXvRWcrvN3nttS\",\"oramCK3qG7AQa7GSm\",\"ucaDnFgvkB5hp5srb\",\"MCeeEog3jmmZAErZC\",\"ahAe7pcyjYGzcDRm4\",\"7DXJ3mvKMHHqBLt92\",\"PH32cNxBjrK4a28sn\",\"RpiqoBZBTeHTrNRs7\",\"j5FSQCayX3By73CCw\",\"GkdvNCbHP7GzHTkjH\",\"KpHrC7WPEojnzgEtz\",\"nHj7SC5cnmkTApbgY\",\"hvdKAwFwoKQxemmre\",\"q8522yzH6tXq9Jmds\",\"8s5Bdrn7RTga7DL6x\",\"HXFNKjiXAzEokjzmK\",\"NJCmkbH5e7qbtZYhd\",\"nBJve5CzG6WAw7WFQ\",\"inmjjfsii2M4CMf34\",\"mpLFbFKjY6u3nsDMv\",\"gXTAie79kiw28tx5u\",\"ZJMgDHgh3o6gYpfkG\",\"qLpTPbG9C2qxCDgno\",\"8op7s67jE2nYdo4js\",\"ZcJm2kuqJnN3CXFaR\",\"SCYNpjgtLCE9rKpYB\",\"GZzXpJT7XGBbscYHu\",\"jyoLggHk8xQKZuoQC\",\"76rZ57Yc5w8KcuR4S\",\"9XnGoq9Tv6ut3zTtH\",\"oEkjGm8S4zEujEmBa\",\"NpAjngKpPXGwYjSyC\",\"nw3rZ4ap8trEDtPRX\",\"9HZbxzkzgz4CvePtv\",\"Y6QpyBRsnhGnXBDz2\",\"gSrqu8MsZMFSxxWAZ\",\"y3RQa2B8icKCj69dr\",\"C8yR2sSnDkr8XfAjb\",\"mgW2B62TsEHWKyqow\",\"fseKTJpNT9SDjnoe5\",\"QGjY3hgPYPMmMjc7j\",\"DQoaxGxfRdYr2gjWL\",\"ymWvGjFbaJbzA2JBh\",\"LwD3CyYSiBfg3mA4r\",\"QHiEYtz3tX3s9nETo\",\"jicWFrNKadYuLhqxh\",\"eKHQ5g8uEdoBgdafr\",\"eomLS3wh6tQPN8jtH\",\"bfYmA3LMvhSrK59cn\",\"sN2JyFeJCwfwwHPwF\",\"oDhufEjQYA4zzaGdP\",\"kpHd8RuXfe9YRm3jX\",\"opcrDAS4AgXqrJXnb\",\"wemncwEcQAZPbe9Wc\",\"ThaiAKWWDw2W4QfJh\",\"tgr46kgjxtDftEixJ\",\"DxuqhaydirduQWB4C\",\"LPZ2QKCoB8q6rG25c\",\"obYs9ieiGHXuLZs3s\",\"6rbtL9oHWGGckDBfu\",\"sj8yRK9uzJ5LLZABJ\",\"Wmpd7mDp6F2utoqFh\",\"8ENJFKi8TnQ9Ei7Jw\",\"oyB4Wr4EeZnoDaa8B\",\"6vdn7gegY7xXxYCbe\",\"F9i3rC3YpdnEpqvYg\",\"7caeeuLvk7cXJfbFN\",\"CHvzhtXnv8HTbPQ56\",\"z47JaNrQMgvuPx5HE\",\"cknpEQiTvSChkSkBH\",\"EDr8dq2JPX4qJ2Jjy\",\"A3nYh5PjkN8e5K8eE\",\"FKuSrzCiYPXvKmgip\",\"vwTy7y6pLbJpL7aqQ\",\"7bn7dz4D58vngBKBL\",\"uxKGACwmZ6FNZsMwE\",\"sgjcbfroKXPSSDob8\"],\"total\":222},\"flags\":0},\"summary\":\"The insurance guy calls, the policy you chose doesn't cover values below 5000€, it wouldn't dignify your status you said at the time. Given an object with a list of the stolen items, return a copy of that list without the values below 5000.\\n\\nExamples\\n{ tv: 4999, guitar:5000, fork: 5001 } ➞ { guitar:5000, fork: 5001 }\\n\\n{ tv: 4999 } ➞ {}\\n\\n{ guitar: 5000 } ➞ { gu\",\"tags\":[\"objects\",\"loops\",\"arrays\"],\"timestamp\":{\"$date\":1600326740265},\"title\":\"Burglary Series (09): Filter Values\",\"family\":[{\"_id\":\"Cve45maGdj5XtQXgo\",\"language\":\"javascript\"}]}}"]