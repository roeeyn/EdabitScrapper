a["{\"msg\":\"result\",\"id\":\"2423\",\"result\":{\"_id\":\"5uWRWmCwPcBg2ff2v\",\"author\":\"Factor\",\"authorId\":\"Kk3jdrvAbPENkw5Ft\",\"code\":\"/**\\n * @param {Object} instance - instance of the class\\n * @param {Array} passed - arguments (values) passed to arguments of constructor\\n * \\n * @returns {void(0)}  \\n */\\n\\nfunction thisify(instance, passed)\\n{\\n\\t// your code here\\n}\",\"difficulty\":4.777777777777778,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"jzZty5TXYJeP7Jt7H\",\"instructions\":\"Consider a constructor function, `foo`:\\n\\n```\\nconst foo = function(x, y, z)\\n{\\n  this.x = x\\n  this.y = y\\n  this.z = z\\n}\\n```\\n\\n`foo` takes three parameters, `x, y, z`. Upon an instance of `foo` being created, the instance receives the properties `x, y, z`.\\n\\n```\\nconst bar = new foo(1, 2, 3)\\n// bar.x = 1\\n// bar.y = 2\\n// bar.z = 3\\n```\\n\\nThe goal of this challenge is to accomplish an equivalent result **without** assigning the properties explicitly. Instead, create a function `thisify` to do it automatically and dynamically.\\n\\nHere is what `foo` should look like:\\n\\n```\\nconst foo = function(x, y, z)\\n{\\n  thisify(this, Object.values(arguments))\\n}\\n// same as before!\\n\\nconst bar = new foo(1, 2, 3)\\n// bar.x = 1\\n// bar.y = 2\\n// bar.z = 3\\n```\\n\\n`thisify` will take two arguments:\\n\\n```\\n/**\\n * @param {Object} instance - instance of the class\\n * @param {Array} passed - arguments (values) passed to parameters of constructor\\n *\\n * @returns {void(0)}\\n */\\n\\nfunction thisify(instance, passed)\\n{\\n  // your code here\\n}\\n```\\n\\nWhen run, `thisify` is expected to assign properties with the same name and value as the argument. For example, if the `x` argument is given a value of `2`, the object should have a property \\\"x\\\" with a value of 2.\\n\\n### Examples\\n```\\nconst rectangle = function(l, w, color)\\n{\\n  thisify(this, Object.values(arguments))\\n}\\n\\nconsole.log(new rectangle(5, 10, \\\"Red\\\")) ➞\\n{\\n  l: 5,\\n  w: 10,\\n  color: \\\"Red\\\"\\n}\\n\\nconsole.log(new rectangle(3, 4)) ➞\\n{\\n  l: 3,\\n  w: 4,\\n  color: undefined\\n}\\n```\\n\\n### Notes\\n- If any arguments are left undefined, assign them `undefined`.\\n- Use the **Resources** section if you need help.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"const rectangle = function(l, w, color)\\n{\\n\\tthisify(this, Object.values(arguments));\\n}\\nconst person = function(firstName, lastName, birthYear)\\n{\\n\\tthisify(this, Object.values(arguments));\\n}\\nconst rects = [\\n\\tnew rectangle(12, 30, \\\"Blue\\\"),\\n\\tnew rectangle(20, 5, \\\"Red\\\"),\\n\\tnew rectangle(0, 0)\\n].map(a => Object.assign({}, a));\\nconst people = [\\n\\tnew person(\\\"John\\\", \\\"Proctor\\\", 1989),\\n\\tnew person(\\\"William\\\", \\\"Hobbs\\\", 1900),\\n\\tnew person(\\\"Sarah\\\", \\\"Good\\\", 1999)\\n].map(a => Object.assign({}, a));\\n\\nTest.assertSimilar(rects[0], {l: 12, w:30, color: \\\"Blue\\\"});\\nTest.assertSimilar(rects[1], {l: 20, w:5, color: \\\"Red\\\"});\\nTest.assertSimilar(rects[2], {l: 0, w:0, color: undefined});\\nTest.assertSimilar(people[0], {firstName: \\\"John\\\", lastName: \\\"Proctor\\\", birthYear: 1989});\\nTest.assertSimilar(people[1], {firstName: \\\"William\\\", lastName: \\\"Hobbs\\\", birthYear: 1900});\\nTest.assertSimilar(people[2], {firstName: \\\"Sarah\\\", lastName: \\\"Good\\\", birthYear: 1999});\",\"language\":\"javascript\",\"quality\":0,\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,5,3,5,5],\"quality\":[],\"rators\":[\"Kk3jdrvAbPENkw5Ft\",\"yjtdwc2AC4jA2RWtn\",\"bXaGdBM8FBLHf7N6Y\",\"xfN4K7Z5inrN4ZNk3\"],\"total\":4},\"flags\":0},\"summary\":\"Consider a constructor function, foo:\\n\\nconst foo = function(x, y, z)\\n{\\n  this.x = x\\n  this.y = y\\n  this.z = z\\n}\\n\\nfoo takes three parameters, x, y, z. Upon an instance of foo being created, the instance receives the properties x, y, z.\\n\\nconst bar = new foo(1, 2, 3)\\n// bar.x = 1\\n// bar.y = 2\\n// bar.z = 3\\n\\nThe goal of this challenge is to accomplish an equivalent\",\"tags\":[\"objects\",\"regex\",\"strings\"],\"timestamp\":{\"$date\":1607539173501},\"title\":\"Thisify \u2060— Convert Arguments to Properties\",\"family\":[{\"_id\":\"5uWRWmCwPcBg2ff2v\",\"language\":\"javascript\"}]}}"]