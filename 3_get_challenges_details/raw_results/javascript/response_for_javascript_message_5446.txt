a["{\"msg\":\"result\",\"id\":\"1472\",\"result\":{\"_id\":\"4NKNkPZtN39cqCQMk\",\"author\":\"Mubashir Hassan \",\"authorId\":\"T6iBEE2jp7f7iEF2P\",\"code\":\"function stringExpansion(txt) {\\n\\t\\n}\",\"difficulty\":2.127659574468085,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"PkLjMmiDYgzdnCwL7\",\"instructions\":\"Create a function which takes a string `txt` and expands it as per following rules:\\n\\n1. The numeric values represent the occurrence of each letter preceding that numeric value.\\n\\n```\\nstringExpansion(\\\"3M2u5b2a1s1h2i1r\\\") ➞ \\\"MMMuubbbbbaashiir\\\"\\n```\\n\\n2. The first occurrence of a numeric value should be the **number of times each character behind it is repeated**, until the next numeric value appears.\\n\\n```\\nstringExpansion(\\\"3Mat\\\")➞ \\\"MMMaaattt\\\"      // correct\\n\\nstringExpansion(\\\"3Mat\\\") ➞ \\\"MMMat\\\"          // wrong\\nstringExpansion(\\\"3Mat\\\") ➞ \\\"MatMatMat\\\"      // wrong\\n```\\n\\n3. If there are consecutive numeric characters, ignore them all except **last one**.\\n\\n```\\nstringExpansion(\\\"3M123u42b12a\\\") ➞ \\\"MMMuuubbaa\\\"\\n```\\n\\n4. If there are **two consecutive alphabetic characters** then the string will remain unchanged.\\n\\n```\\nstringExpansion(\\\"airforce\\\") ➞ \\\"airforce\\\"\\n```\\n\\n5. Empty strings should return an empty string.\\n\\n```\\nstringExpansion(\\\"\\\") ➞ \\\"\\\"\\n```\\n\\n### Notes\\nN/A\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assertEquals(stringExpansion(\\\"3M2u5b2a1s1h2i1r\\\"),\\\"MMMuubbbbbaashiir\\\")\\nTest.assertEquals(stringExpansion(\\\"3Mat\\\"),\\\"MMMaaattt\\\")\\nTest.assertEquals(stringExpansion(\\\"3M123u42b12a\\\"),\\\"MMMuuubbaa\\\")\\nTest.assertEquals(stringExpansion(\\\"3n6s7f3n\\\"),\\\"nnnssssssfffffffnnn\\\")\\nTest.assertEquals(stringExpansion(\\\"0d4n8d2b\\\"),\\\"nnnnddddddddbb\\\")\\nTest.assertEquals(stringExpansion(\\\"0c3b1n7m\\\"),\\\"bbbnmmmmmmm\\\")\\nTest.assertEquals(stringExpansion(\\\"7m3j4ik2a\\\"),\\\"mmmmmmmjjjiiiikkkkaa\\\")\\nTest.assertEquals(stringExpansion(\\\"3A5m3B3Y\\\"),\\\"AAAmmmmmBBBYYY\\\")\\nTest.assertEquals(stringExpansion(\\\"5M0L8P1\\\"),\\\"MMMMMPPPPPPPP\\\")\\nTest.assertEquals(stringExpansion(\\\"2B\\\"),\\\"BB\\\")\\nTest.assertEquals(stringExpansion(\\\"7M1n3K\\\"),\\\"MMMMMMMnKKK\\\")\\nTest.assertEquals(stringExpansion(\\\"A4g1b4d\\\"),\\\"Aggggbdddd\\\")\\nTest.assertEquals(stringExpansion(\\\"111111\\\"),\\\"\\\")\\nTest.assertEquals(stringExpansion(\\\"4d324n2\\\"),\\\"ddddnnnn\\\")\\nTest.assertEquals(stringExpansion(\\\"5919nf3u\\\"),\\\"nnnnnnnnnfffffffffuuu\\\")\\nTest.assertEquals(stringExpansion(\\\"2n1k523n4i\\\"),\\\"nnknnniiii\\\")\\nTest.assertEquals(stringExpansion(\\\"6o23M32d\\\"),\\\"ooooooMMMdd\\\")\\nTest.assertEquals(stringExpansion(\\\"1B44n3r\\\"),\\\"Bnnnnrrr\\\")\\nTest.assertEquals(stringExpansion(\\\"M21d1r32\\\"),\\\"Mdr\\\")\\nTest.assertEquals(stringExpansion(\\\"23M31r2r2\\\"),\\\"MMMrrr\\\")\\nTest.assertEquals(stringExpansion(\\\"8494mM25K2A\\\"),\\\"mmmmMMMMKKKKKAA\\\")\\nTest.assertEquals(stringExpansion(\\\"4A46D6B3C\\\"),\\\"AAAADDDDDDBBBBBBCCC\\\")\\nTest.assertEquals(stringExpansion(\\\"23D42B3A\\\"),\\\"DDDBBAAA\\\")\\nTest.assertEquals(stringExpansion(\\\"143D36C1A\\\"),\\\"DDDCCCCCCA\\\")\\nTest.assertEquals(stringExpansion(\\\"asdf\\\"),\\\"asdf\\\")\\nTest.assertEquals(stringExpansion(\\\"23jbjl1eb\\\"),\\\"jjjbbbjjjllleb\\\")\\nTest.assertEquals(stringExpansion(\\\"43ibadsr3\\\"),\\\"iiibbbaaadddsssrrr\\\")\\nTest.assertEquals(stringExpansion(\\\"123p9cdbjs\\\"),\\\"pppcccccccccdddddddddbbbbbbbbbjjjjjjjjjsssssssss\\\")\\nTest.assertEquals(stringExpansion(\\\"2309ew7eh\\\"),\\\"eeeeeeeeewwwwwwwwweeeeeeehhhhhhh\\\")\\nTest.assertEquals(stringExpansion(\\\"312987rfebd\\\"),\\\"rrrrrrrfffffffeeeeeeebbbbbbbddddddd\\\")\\nTest.assertEquals(stringExpansion(\\\"126cgec\\\"),\\\"ccccccggggggeeeeeecccccc\\\")\\nTest.assertEquals(stringExpansion(\\\"1chwq3rfb\\\"),\\\"chwqrrrfffbbb\\\")\\nTest.assertEquals(stringExpansion(\\\"389fg21c\\\"),\\\"fffffffffgggggggggc\\\")\\nTest.assertEquals(stringExpansion(\\\"239vbsac\\\"),\\\"vvvvvvvvvbbbbbbbbbsssssssssaaaaaaaaaccccccccc\\\")\\nTest.assertEquals(stringExpansion(\\\"davhb327vuc\\\"),\\\"davhbvvvvvvvuuuuuuuccccccc\\\")\\nTest.assertEquals(stringExpansion(\\\"cvyb239bved2dv\\\"),\\\"cvybbbbbbbbbbvvvvvvvvveeeeeeeeedddddddddddvv\\\")\\nTest.assertEquals(stringExpansion(\\\"\\\"),\\\"\\\")\\n// Mubashir\",\"language\":\"javascript\",\"quality\":4.666666666666667,\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,1,3,1,2,2,0,1,0,3,2,2,2,1,2,2,3,2,2,2,3,2,4,2,4,0,3,2,2,2,3,3,3,3,3,3,3,2,2,2,3,3,0],\"quality\":[4,5,5,4,5,5,4,5,5],\"rators\":[\"T6iBEE2jp7f7iEF2P\",\"sRt2L9qxPZZHG2YbP\",\"yjtdwc2AC4jA2RWtn\",\"imZmhnoo3Hd9Qc8sx\",\"u9cRf5kvtpRB5ffB3\",\"zMCXYFZSsviDCvjnY\",\"CNc6rmwhbxkxEhHAp\",\"g4NCSxxHqHCGMpWwT\",\"pWJWQDhqzDSmfaFam\",\"mHT2bJb5SByfJ8yKS\",\"wJTDDTE3TrmSXKP4d\",\"QRv96jmNaYsWkxQEG\",\"nkH3HfJXLMNcBMM79\",\"Yp7uvStL97cC9fKkY\",\"M4vq8ATaS9Jg5X7iP\",\"J7d397iB5GuWRAMfg\",\"Ya3eHgs8x3unZRLpb\",\"AQSqD9oNv2uPfxZCR\",\"6BpBQnSGhzgvhXrEy\",\"hyx8iH2z3QySmyRKT\",\"4cvqeJydiNYr6dDvq\",\"X5zZpDGEheWLEhoyS\",\"8s5Bdrn7RTga7DL6x\",\"8BJyXvRWcrvN3nttS\",\"oyB4Wr4EeZnoDaa8B\",\"yuLxi2qBJvMnwgdgJ\",\"hCfruGWxw7v64teEr\",\"AasGs8AeX9Lcb9xJn\",\"8SYDBRtkZuW3pdPtG\",\"5NGxHLcQ8Af2RJ4TN\",\"StSFXy92jCt59kcnQ\",\"Sr7i2sEewLgZnY2Yj\",\"srJ34BaybkQh3qRkM\",\"FGEeCTorXbX3WvjFW\",\"mDWNyaaQ9hvPCRzSd\",\"RE4Mm9T6Q9uygAxGS\",\"NGvCPuMiAP3xrRLfB\",\"ahAe7pcyjYGzcDRm4\",\"oDtGiNqDMHmhHE3J8\",\"PTo9qt93YqGvL8fCa\",\"65dbBZynphj53nXqA\",\"49XFttjKo2QhEWT3R\",\"wo4cpen33NYFHNca7\",\"buX4mCQhtXCfBjeno\",\"RT4GwzLKJAC7w9Pgm\",\"Akq3fQcPRgPrWfsye\",\"sN2JyFeJCwfwwHPwF\",\"AMpQSjKsRqhCDyS2j\",\"NEShKffnpHBnAHgrd\",\"ThaiAKWWDw2W4QfJh\",\"CHvzhtXnv8HTbPQ56\"],\"total\":52},\"flags\":0},\"summary\":\"Create a function which takes a string txt and expands it as per following rules:\\n\\nThe numeric values represent the occurrence of each letter preceding that numeric value.\\n\\nstringExpansion(\\\"3M2u5b2a1s1h2i1r\\\") ➞ \\\"MMMuubbbbbaashiir\\\"\\n\\nThe first occurrence of a numeric value should be the number of times each character behind it is repeated, until the next numeric\",\"tags\":[\"strings\",\"language_fundamentals\",\"interview\",\"logic\",\"regex\"],\"timestamp\":{\"$date\":1611120412207},\"title\":\"String Expansion\",\"family\":[{\"_id\":\"G69GKiTu6ELTykSTZ\",\"language\":\"cpp\"},{\"_id\":\"4NKNkPZtN39cqCQMk\",\"language\":\"javascript\"},{\"_id\":\"XcQ5zTsFiHh6m28FW\",\"language\":\"python3\"},{\"_id\":\"en53iSDnbQLLT4WSu\",\"language\":\"ruby\"}]}}"]