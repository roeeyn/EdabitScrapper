a["{\"msg\":\"result\",\"id\":\"1949\",\"result\":{\"_id\":\"meN5CH6RztnwXCXBz\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"function isHarshad(n) {\\n\\t\\n}\",\"difficulty\":2.76,\"quality\":0,\"familyId\":\"pzeJeTZv7aaa6yEiZ\",\"instructions\":\"A number is said to be **Harshad** if it's *exactly divisible* by the **sum** of its digits. Create a function that determines whether a number is a Harshad or not.\\n\\n### Examples\\n```\\nisHarshad(75) ➞ false\\n// 7 + 5 = 12\\n// 75 is not exactly divisible by 12\\n \\nisHarshad(171) ➞ true\\n// 1 + 7 + 1 = 9\\n// 9 exactly divides 171\\n \\nisHarshad(481) ➞ true\\n\\nisHarshad(89) ➞ false\\n\\nisHarshad(516) ➞ true\\n\\nisHarshad(200) ➞ true\\n```\\n\\n### Notes\\n- You are expected to solve this challenge via **recursion**.\\n- You can check on the **Resources** tab for more details about *recursion*.\\n- An iterative version of this challenge can be found via this [link](https://edabit.com/challenge/Rrauvu8afRbjqPM8L).\\n- A collection of challenges in recursion can be found via this [link](https://edabit.com/collection/YJH4pAyqDbhLc4STc).\",\"isHidden\":false,\"lab\":\"const recursive = f => (`${f}`.match(RegExp(`${f.name}`,'gm'))||[]).length > +(/function/.test(f))\\nTest.assertNotEquals(recursive(isHarshad), false, \\\"Recursion is required!\\\")\\n\\nlet [numVector, resVector] = [\\n  [75, 171, 481, 89, 516, 200, 209, 12345, 53, 27],\\n  [false, true, true, false, true, true, true, true, false, true]\\n]\\nfor (let i in numVector) Test.assertEquals(isHarshad(numVector[i]), resVector[i])\",\"language\":\"javascript\",\"summary\":\"A number is said to be Harshad if it's exactly divisible by the sum of its digits. Create a function that determines whether a number is a Harshad or not.\\n\\nExamples\\nisHarshad(75) ➞ false\\n// 7 + 5 = 12\\n// 75 is not exactly divisible by 12\\n\\nisHarshad(171) ➞ true\\n// 1 + 7 + 1 = 9\\n// 9 exactly divides 171\\n\\nisHarshad(481) ➞ true\\n\\nisHarshad(89) ➞ false\\n\\nisHarshad(51\",\"tags\":[\"recursion\",\"strings\",\"numbers\",\"math\",\"validation\"],\"timestamp\":{\"$date\":1601649137703},\"title\":\"Recursion: Harshad Number\",\"stats\":{\"completed\":{\"total\":22,\"ratings\":[3,3,3,3,3,3,2,4,2,1,2,4,1,4,1,4,3,3,3,5,2,3,1,3,3],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"Es4eX2stRpyoXeC7f\",\"buX4mCQhtXCfBjeno\",\"xhMNsZgeB8rBKjxLu\",\"yjtdwc2AC4jA2RWtn\",\"zBsoTJbK8bqLGxnBc\",\"JGBCMpnbbi5ztuFoX\",\"pGh7WykiPe26fHJYv\",\"bX6tpTCjwoi6XMMbK\",\"ro4W36ttXuSLWfvnx\",\"SYEuojZtP6yLXryHv\",\"QRv96jmNaYsWkxQEG\",\"DPi9QGLctq2y76KuE\",\"PH32cNxBjrK4a28sn\",\"8BJyXvRWcrvN3nttS\",\"M4vq8ATaS9Jg5X7iP\",\"TtrXnGzi9MyhLvWiz\",\"pi76g3eRpnKrhee2a\",\"oDtGiNqDMHmhHE3J8\",\"RE4Mm9T6Q9uygAxGS\"]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"a777e8chPvJkY3tKa\",\"family\":[{\"_id\":\"sjsHWXs7fNStCdrNr\",\"language\":\"java\"},{\"_id\":\"meN5CH6RztnwXCXBz\",\"language\":\"javascript\"},{\"_id\":\"RdenTLqyWW9a6L5aL\",\"language\":\"python3\"}]}}"]