a["{\"msg\":\"result\",\"id\":\"1973\",\"result\":{\"_id\":\"rCBGDCTmDMypW6LLa\",\"author\":\"zatoichi49\",\"authorId\":\"tAF9Gf6PiGogbZuWs\",\"code\":\"function soroban(frame) {\\n\\t\\n}\",\"difficulty\":2.7857142857142856,\"familyId\":\"8rT4yqLxSh48myGac\",\"instructions\":\"The Japanese *soroban* is type of abacus (counting tool) that is used by sliding threaded beads up and down wires. The soroban is divided into an upper deck (where each bead is worth 5 units) and a lower deck (where beads are worth 1 unit). Working from the right and moving to the left, units increase by a factor of 10. If we use \\\"O\\\" for a bead and \\\"|\\\" to show the wire, we can represent the soroban as follows:\\n\\n```\\nOOOOOOO\\n|||||||  Upper deck\\n-------  Dividing line\\n|||||||  Lower deck\\nOOOOOOO\\nOOOOOOO\\nOOOOOOO\\nOOOOOOO\\n```\\n\\nTo read the number, we count the value of the number of beads that have been moved *towards* the dividing line. The values for the upper and lower deck are added together. In the example below, the number is **30651**:\\n\\n```\\nOOOO||O\\n||||OO|\\n-------\\n||O|O|O\\nOOOO|O|\\nOOOOOOO\\nOO|OOOO\\nOOOOOOO\\n\\n0000550  Upper deck\\n0030101  Lower deck\\n  30651  Total\\n```\\n\\nGiven an array of strings representing the soroban, return the *number* being displayed.\\n\\n### Examples\\n```\\nsoroban([\\n  \\\"OOOO||O\\\",\\n  \\\"||||OO|\\\",\\n  \\\"-------\\\",\\n  \\\"|||O|OO\\\",\\n  \\\"OOOOOOO\\\",\\n  \\\"OOO|OOO\\\",\\n  \\\"OOOOO|O\\\",\\n  \\\"OOOOOO|\\\"\\n]) ➞ 2584\\n\\nsoroban([\\n  \\\"||OO||O\\\",\\n  \\\"OO||OO|\\\",\\n  \\\"-------\\\",\\n  \\\"OO|OO||\\\",\\n  \\\"OOO|OOO\\\",\\n  \\\"OOOO|OO\\\",\\n  \\\"|OOOOOO\\\",\\n  \\\"O|OOOOO\\\"\\n]) ➞ 8901750\\n```\\n\\n### Notes\\nFor more info on how to use a soroban, please check the **Resources** tab.\",\"lab\":\"Test.assertEquals(soroban(['|O|O|O|', 'O|O|O|O', '-------', '||O|OO|', 'OOOO||O', 'OO|OOOO', 'OOOOOOO', 'OOOOOOO']), 5070615)\\nTest.assertEquals(soroban(['OOO||OO', '|||OO||', '-------', 'OOOOO||', 'OOO||OO', 'OO|OOOO', 'OOOOOOO', '||OOOOO']), 4426600)\\nTest.assertEquals(soroban(['|O|O|OO', 'O|O|O||', '-------', 'OO||||O', 'O|OOOOO', '|OOOOOO', 'OOOOOO|', 'OOOOOOO']), 7150503)\\nTest.assertEquals(soroban(['|OOO|OO', 'O|||O||', '-------', '|||OO|O', 'OOOO|OO', 'OOO|OOO', 'OOOOOOO', 'OOOOOO|']), 5002604)\\nTest.assertEquals(soroban(['O|OOO|O', '|O|||O|', '-------', 'OOO|OO|', '|OOOOOO', 'OO|OOOO', 'O|OOO|O', 'OOOO|OO']), 1820480)\\nTest.assertEquals(soroban(['OOO|OO|', '|||O||O', '-------', 'OOOOO|O', '|OOO|O|', 'OO|OOOO', 'OOO|OOO', 'O|OOOOO']), 1428106)\\nTest.assertEquals(soroban(['OOOOOOO', '|||||||', '-------', '||OO|OO', 'OO|OO|O', 'OOOOOOO', 'OOO|OOO', 'OOOOOO|']), 13014)\\nTest.assertEquals(soroban(['|OOO|||', 'O|||OOO', '-------', 'O||OOOO', 'OOOOOOO', 'OOOOO|O', '|OO||O|', 'OOOOOOO']), 8003878)\\nTest.assertEquals(soroban(['O|OOOOO', '|O|||||', '-------', '||OO|||', 'OOOOOOO', 'OOOOOOO', 'OO|OOOO', 'OOO|OOO']), 534000)\\nTest.assertEquals(soroban(['OOOO|||', '||||OOO', '-------', '|OO||OO', 'OOOOOOO', 'OOOOOO|', 'OO|OO|O', 'O|OOOOO']), 430587)\\nTest.assertEquals(soroban(['OOO|||O', '|||OOO|', '-------', '||OOOO|', 'OOOOOOO', 'OOOOO|O', 'OO|OOOO', 'OOO||OO']), 39970)\\nTest.assertEquals(soroban(['O||OO||', '|OO||OO', '-------', 'OO|OOO|', 'O|OOOOO', 'OOOOOOO', 'OOOO|OO', '|OO|O|O']), 4654395)\\nTest.assertEquals(soroban(['OOO|OO|', '|||O||O', '-------', '|||OO||', 'OOOOOOO', 'OOO|OOO', 'OOOOOOO', 'OOOO|OO']), 7405)\\nTest.assertEquals(soroban(['|O|OOOO', 'O|O||||', '-------', 'OO|OO|O', '|OOOOOO', 'OOO||OO', 'OOOOOOO', 'O|OOOO|']), 6452204)\\nTest.assertEquals(soroban(['O|OO|O|', '|O||O|O', '-------', 'OOOOO|O', 'OOOOOO|', '||O||OO', 'OOOOOOO', 'OO|OOOO']), 2742706)\\nTest.assertEquals(soroban(['OO|OOOO', '||O||||', '-------', 'OO|O|||', 'OOOOOOO', 'O|OOOOO', 'OOOOOOO', '|OO|OOO']), 4254000)\\nTest.assertEquals(soroban(['|OOOOO|', 'O|||||O', '-------', 'OOOOO|O', 'O|OOOO|', '|OOOOOO', 'OOOO|OO', 'OO||OOO']), 7144306)\\nTest.assertEquals(soroban(['OO|OO||', '||O||OO', '-------', 'O|||O|O', 'OOOOOOO', '|OOOOOO', 'OOOO|O|', 'OOOOOOO']), 2050358)\\nTest.assertEquals(soroban(['||O|OOO', 'OO|O|||', '-------', 'O||||OO', '|OOOOOO', 'OOOOOO|', 'OOOOO|O', 'OOOOOOO']), 6505032)\\nTest.assertEquals(soroban(['|OOOO|O', 'O||||O|', '-------', '|O||OO|', 'OOOOOOO', 'O|OOOOO', 'OOOOOOO', 'OOOO||O']), 5200490)\",\"language\":\"javascript\",\"summary\":\"The Japanese soroban is type of abacus (counting tool) that is used by sliding threaded beads up and down wires. The soroban is divided into an upper deck (where each bead is worth 5 units) and a lower deck (where beads are worth 1 unit). Working from the right and moving to the left, units increase by a factor of 10. If we use \\\"O\\\" for a bead and \\\"|\\\" to show t\",\"tags\":[\"strings\",\"arrays\",\"loops\"],\"timestamp\":{\"$date\":1564683899085},\"title\":\"Read the Abacus (Part 2: Japanese Soroban)\",\"stats\":{\"completed\":{\"total\":25,\"ratings\":[2,2,2,2,2,3,2,3,2,2,3,3,3,2,3,2,4,3,4,1,4,2,4,4,3,3,3,5],\"rators\":[\"n5wubRfh6zh8QRymN\",\"65dbBZynphj53nXqA\",\"EWn8w8P3nNh7knatY\",\"SDtZFL5NzAoCPofXk\",\"yjtdwc2AC4jA2RWtn\",\"EjPLq3QSJdGQFJdgW\",\"5Zq3aGdvh4LHBvnJL\",\"AasGs8AeX9Lcb9xJn\",\"2innwjWqxJHo4eRGh\",\"sW78rbapvsS3AnuJe\",\"QfryzFn4wXsWp6vdM\",\"FJsvM5yqKuK9yMk9P\",\"rC7kdm3SsSX9udEQk\",\"CeG7HoyDtx7b5N2g7\",\"aEm3Wvj2rFYRL8Lrb\",\"KN8ZCWtP4aBp9HNJi\",\"AgabABAboDyjcafvo\",\"4Xv87xmdSnpYhi8hz\",\"eFjGhq7C7bBKXjT6X\",\"mDWNyaaQ9hvPCRzSd\",\"M4vq8ATaS9Jg5X7iP\",\"s678Wirfor5uYL5T6\",\"8BJyXvRWcrvN3nttS\"],\"quality\":[]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":0,\"family\":[{\"_id\":\"oyueonWr7h4S24nwm\",\"language\":\"cpp\"},{\"_id\":\"oQosaxZjdzcwR9gQE\",\"language\":\"csharp\"},{\"_id\":\"rCBGDCTmDMypW6LLa\",\"language\":\"javascript\"},{\"_id\":\"ivSPJNgW4ChfbrKbR\",\"language\":\"python3\"},{\"_id\":\"4dCtZ6dmyo62XcvhP\",\"language\":\"ruby\"}]}}"]