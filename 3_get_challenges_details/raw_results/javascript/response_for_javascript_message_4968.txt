a["{\"msg\":\"result\",\"id\":\"1236\",\"result\":{\"_id\":\"tG8feBkvmQtsv7s6m\",\"author\":\"Isaac Pak\",\"authorId\":\"yaL57wdXmgAZTvKfX\",\"code\":\"let carLot = {}\\n\\nconst carMaker = (make) => {\\n\\t\\n}\",\"difficulty\":2.054054054054054,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"3ZjtqM9YPWJscgzCB\",\"instructions\":\"One of the pratical use cases for **currying** a function in JavaScript is to reduce duplication:\\n\\n```\\nfunction add5(num) {\\n  return num + 5\\n}\\n\\nfunction add6(num) {\\n  return num + 6\\n}\\n\\nadd5(2) // 7\\nadd6(3) // 9\\n```\\n\\nInstead of having to create a new function for every new number we can just create a function that **returns** a new function and pass in the any number we want to add.\\n\\n```\\nfunction add(add) {\\n  return function(num) {\\n    return num + add\\n  }\\n}\\n\\nconst add5 = add(5)\\nadd5(2) // 7\\nconst add6 = add(6)\\nadd6(3) // 9\\n```\\n\\nCreate a function using **currying** that will add a car maker name as a property to the carLot object if it doesn't have one.  Then have the function add up the number we pass in when we call the **curried** function.\\n\\n```\\nfunction toyotaCars(\\\"Toyota\\\")\\nfunction hyundaiCars(\\\"Hyundai\\\")\\n\\nkiaCars(3)\\nkiaCars(4)\\nhyundaiCars(2)\\nhyundaiCars(1)\\n\\nconsole.log(carLot) // { Kia: 7, Hyundai: 3}\\n```\\n\\n### Notes\\n- You only have to create the `carMaker()` function, not the **curried** function.\\n- Check the **Resources** for more info on currying.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"carLot = {}\\n\\nconst toyotaCars = carMaker(\\\"Toyota\\\")\\nconst fordCars = carMaker(\\\"Ford\\\")\\n\\ntoyotaCars(5)\\ntoyotaCars(3)\\ntoyotaCars(13)\\nfordCars(3)\\nfordCars(8)\\nfordCars(9)\\n\\nTest.assertSimilar(carLot, { Toyota: 21, Ford: 20})\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,1,2,1,2,3,3,3,2,2,2,3,1,1,1,2,2,2,2,0,4,3,3,2,3,2,1,2,1,2,2,3,1,1,3,3,3,2,2,2,2,3,2,3,2,2,1,0,3,1,3,3,2,3,2,0,2,2,2,3,3,3,2,3,0,0,3,3,2],\"rators\":[\"yaL57wdXmgAZTvKfX\",\"yjtdwc2AC4jA2RWtn\",\"AasGs8AeX9Lcb9xJn\",\"KcpfY4XZ7fNamyLd3\",\"n5wubRfh6zh8QRymN\",\"pi76g3eRpnKrhee2a\",\"oEt8RvKQHmQqGQADd\",\"6BpBQnSGhzgvhXrEy\",\"5Zq3aGdvh4LHBvnJL\",\"cJwiiiX7qwSvgtmk8\",\"mHT2bJb5SByfJ8yKS\",\"EjPLq3QSJdGQFJdgW\",\"NegPTmHfHTjKv3Fhq\",\"FJsvM5yqKuK9yMk9P\",\"SxqAEMaYcE9Ps9eh6\",\"5GmszQFtfcQzTL5kz\",\"GZGvYkdHBssXCdrae\",\"Ehrta9env9HXyrGbW\",\"rfsQxYTnovxYJ4s7Q\",\"yuLxi2qBJvMnwgdgJ\",\"gmPPTegJZNogrL7vp\",\"2innwjWqxJHo4eRGh\",\"9Pzg45NEiRXhLtLh3\",\"byrKwHgawbFgyAcgo\",\"RE4Mm9T6Q9uygAxGS\",\"EWn8w8P3nNh7knatY\",\"rSJGLYSXMuu3RWjun\",\"HHLi7u8RdCaM2NQyy\",\"AvEiDZKLHCEQ6n9Ma\",\"ze5uQfR4tkjbR96ei\",\"yNHJhAxGqApZBHp3X\",\"2ZFoLTxcCARhwc8xX\",\"PT5pu7kJsgp9TDNGv\",\"HJSPxBG6bTrtTket2\",\"Xk2g4CNFAnYcvxiSr\",\"rJGzFvBGYxdukwt8X\",\"bK2jZcwjCS3WnKHs8\",\"4wKQqMG8gPc53ppdg\",\"bZxmwxYzarqa4kvE5\",\"5NGxHLcQ8Af2RJ4TN\",\"aqzWajZcBZtTiyTqK\",\"CJBPyyfyaEeEo63sb\",\"acHSYL6uQAgpgFMjp\",\"a777e8chPvJkY3tKa\",\"65dbBZynphj53nXqA\",\"PXiLcoA5dSMnajP2g\",\"aEm3Wvj2rFYRL8Lrb\",\"Po3v3dHCk6wYGKMwi\",\"jkumHyXfMkhGcPgqC\",\"iJC8PmpzSyTnEDqw5\",\"7gZKfvwaeqsGKXMEN\",\"Kntd2rSgWYWp8r4sP\",\"psmFRmiMHhjwFF9nB\",\"kp2ZbCewZJAbfd7xv\",\"NWKgf85RoPhZyw83J\",\"QRv96jmNaYsWkxQEG\",\"ccHAPAfdET3cnyPaG\",\"xMLCsZbeTFRpnXeZe\",\"CNc6rmwhbxkxEhHAp\",\"BdvdJYwHZr7JpkHsn\",\"2QziknsznNeMPRh3g\",\"M5Wwg7T6b4RkHrENN\",\"zw7g7T8wE5R5CBhXr\",\"g4NCSxxHqHCGMpWwT\",\"nphNJCcuiQKh8bNHq\",\"7iJbwKmKpQa3HKe8m\",\"Cmegk7pEANLwdWb34\",\"c7uBxu2rgY77H5d79\",\"XeNskNoh5DcHuKTWX\",\"4XxJxQkB5mNTLY2qk\",\"P6eiziWQ7DqgyMBAZ\",\"PGCDJpQMN8Sjn9Gm6\",\"MX7s7bjsvySLFKoP7\",\"fTtBJaXv5n9CTZfmt\",\"oq5p58Qay9vTN7dtR\",\"foytX6kH9wiSYqLtT\",\"HTAm62DZytAEFgSnu\",\"KAwfSkaC6masJK9gY\",\"hvTAyFPy4pJHdrYJX\",\"oDtGiNqDMHmhHE3J8\",\"PH32cNxBjrK4a28sn\",\"9gEWz76H8KmhN4yJj\",\"E6DBfkTgHuPsDWdG8\",\"Ef3McfqD44hj4Est9\",\"QGjY3hgPYPMmMjc7j\"],\"total\":90,\"quality\":[5,3,5,3,5,5,4,5,5,2,5,5,5,4,4,2]},\"flags\":0},\"summary\":\"One of the pratical use cases for currying a function in JavaScript is to reduce duplication:\\n\\nfunction add5(num) {\\n  return num + 5\\n}\\n\\nfunction add6(num) {\\n  return num + 6\\n}\\n\\nadd5(2) // 7\\nadd6(3) // 9\\n\\nInstead of having to create a new function for every new number we can just create a function that returns a new function and pass in the any number we want t\",\"tags\":[\"functional_programming\"],\"timestamp\":{\"$date\":1581906605068},\"title\":\"Don't Be in Such a Curry\",\"quality\":4.1875,\"family\":[{\"_id\":\"tG8feBkvmQtsv7s6m\",\"language\":\"javascript\"}]}}"]