a["{\"msg\":\"result\",\"id\":\"2232\",\"result\":{\"_id\":\"PQvuPYTZ5gGL4WYJo\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"function flatten(r) {\\n\\t// Your recursive solution here.\\n\\treturn flatten(r)\\t\\n}\",\"difficulty\":3.4615384615384617,\"familyId\":\"eu9ejyrePk6moD6xX\",\"instructions\":\"The nesting of arrays can be viewed indirectly as curves and barriers of the real data embedded in arrays, thus, defeats the very purpose of directly accessing them thru indexes and slices. In this challenge, a function is required to **flatten those curves** (i.e. level, iron, compress, raze, topple) and expose those data as a **single array** and not as an *array of arrays*.\\n\\n### Examples\\n```\\nflatten([[[[[[\\\"direction\\\"], [372], [\\\"one\\\"], [[[[[[\\\"Era\\\"]]]], \\\"Sruth\\\", 3337]]], \\\"First\\\"]]]])\\n➞ [\\\"direction\\\", 372, \\\"one\\\", \\\"Era\\\", \\\"Sruth\\\", 3337, \\\"First\\\"]\\n\\nflatten([[4666], [5394], [466], [[[\\\"Saskia\\\", [[[[[\\\"DXTD\\\"]], \\\"Lexi\\\"]]]]]]])\\n➞ [4666, 5394, 466, \\\"Saskia\\\", \\\"DXTD\\\", \\\"Lexi\\\"]\\n\\nflatten([[696], [\\\"friend\\\"], [\\\"power\\\"], [[[[\\\"Marcus\\\"]]]], [\\\"philus\\\"]])\\n➞ [696, \\\"friend\\\", \\\"power\\\", \\\"Marcus\\\", \\\"philus\\\"]\\n\\nflatten([[[\\\"deep\\\"], [[[\\\"ocean\\\"]]], [[\\\"Marge\\\"]], [\\\"rase\\\", 876]]])\\n➞ [\\\"deep\\\", \\\"ocean\\\", \\\"Marge\\\", \\\"rase\\\", 876]\\n```\\n\\n### Notes\\n- There are no empty arrays to handle.\\n- You're expected to solve this challenge using a **recursive approach**.\\n- You can read on more topics about recursion (see **Resources** tab) if you aren't familiar with it yet or haven't fully understood the concept behind it before taking up this challenge.\\n- A collection of challenges about recursion can be found via this [link](https://edabit.com/collection/YJH4pAyqDbhLc4STc).\",\"isHidden\":false,\"lab\":\"const noFlat = f => !RegExp('Infinity|\\\\bflat(.+)\\\\b','gm').test(f)\\nconst nonRecur = f => (`${f}`.match(RegExp(`${f.name}`,'gm'))||[]).length > +(/function/.test(f))\\nTest.assertNotEquals(noFlat(flatten), false, \\\"The use of flat() function isn't allowed!\\\")\\nTest.assertNotEquals(nonRecur(flatten), false, \\\"Recursion is required!\\\")\\n\\nlet arrVectors = [\\n  [[[[[['direction'], [372], ['one'], [[[[[['Era']]]], 'Sruth', 3337]]], 'First']]]],\\n  [[4666], [5394], [466], [[['Saskia', [[[[['DXTD']], 'Lexi']]]]]]],\\n  [[696], ['friend'], ['power'], [[[['Marcus']]]], ['philus']],\\n  [[['deep'], [[['ocean']]], [['Marge']], ['rase', 876]]],\\n  ['I', [19.79, 'love', [12.17], \\\"edabit\\\"]],\\n  [['The', ['first', ['of', [\\\"May\\\", 0.0, 1, ]]], 2, 3, 4]],\\n  [7, [11, 'lived', [[229]]]],\\n  ['and', 6, [3, 'scores', ['six', 100]]]],\\nresVectors = [\\n  ['direction', 372, 'one', 'Era', 'Sruth', 3337, 'First'],\\n  [4666, 5394, 466, 'Saskia', 'DXTD', 'Lexi'],\\n  [696, 'friend', 'power', 'Marcus', 'philus'],\\n  ['deep', 'ocean', 'Marge', 'rase', 876],\\n  ['I', 19.79, 'love', 12.17, 'edabit'],\\n  ['The', 'first', 'of', 'May', 0.0, 1, 2, 3, 4],\\n  [7, 11, 'lived', 229],\\n  ['and', 6, 3, 'scores', 'six', 100]\\n]\\nfor (let i in arrVectors) Test.assertSimilar(flatten(arrVectors[i]), resVectors[i])\",\"language\":\"javascript\",\"summary\":\"The nesting of arrays can be viewed indirectly as curves and barriers of the real data embedded in arrays, thus, defeats the very purpose of directly accessing them thru indexes and slices. In this challenge, a function is required to flatten those curves (i.e. level, iron, compress, raze, topple) and expose those data as a single array and not as an array of\",\"tags\":[\"recursion\",\"arrays\"],\"timestamp\":{\"$date\":1595173681467},\"title\":\"Recursion: Flatten the Curves\",\"stats\":{\"completed\":{\"total\":24,\"ratings\":[5,5,5,5,5,5,1,1,1,2,5,5,3,4,5,2,5,3,4,4,2,0,4,3,4,2],\"rators\":[\"a777e8chPvJkY3tKa\",\"aEm3Wvj2rFYRL8Lrb\",\"yjtdwc2AC4jA2RWtn\",\"QRv96jmNaYsWkxQEG\",\"mHT2bJb5SByfJ8yKS\",\"bXaGdBM8FBLHf7N6Y\",\"buX4mCQhtXCfBjeno\",\"nphNJCcuiQKh8bNHq\",\"va3fDAQm4sqSMoy3R\",\"Es4eX2stRpyoXeC7f\",\"HmQu5Cd2KivaXhaR7\",\"JGBCMpnbbi5ztuFoX\",\"mDWNyaaQ9hvPCRzSd\",\"A4GfdHKzEy82YWTK5\",\"DPi9QGLctq2y76KuE\",\"hcm8sL8mNJTSfTdgE\",\"qWZLE2s7aRDQsnZ4p\",\"s678Wirfor5uYL5T6\",\"PH32cNxBjrK4a28sn\",\"GsrjAqoAdLATJH9qD\",\"GAnWtNX4Wy9c7Pj43\"],\"quality\":[]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"a777e8chPvJkY3tKa\",\"quality\":0,\"family\":[{\"_id\":\"5s8AXfbk4X2Dmimrk\",\"language\":\"java\"},{\"_id\":\"PQvuPYTZ5gGL4WYJo\",\"language\":\"javascript\"},{\"_id\":\"2nciiXZN4HCuNEmAi\",\"language\":\"python3\"}]}}"]