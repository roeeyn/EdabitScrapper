a["{\"msg\":\"result\",\"id\":\"1255\",\"result\":{\"_id\":\"8FG9myNKdmtdxWoNN\",\"author\":\"Isaac Pak\",\"authorId\":\"yaL57wdXmgAZTvKfX\",\"code\":\"let REGEXP = /* Write your expression here */g\",\"difficulty\":2.066666666666667,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"7xnqFbWyxk6nuLZGf\",\"instructions\":\"**Groups and ranges** indicate groups and ranges of expression characters.  **Named capturing groups** matches \\\"x\\\" in **(?\\\\<Name>x)** and stores it on the groups property of the returned matches under the name specified by **\\\\<Name>**. The angle brackets, `<` and `>`, are required for group name.\\n\\nTo extract the United States area code from a phone number, we could use:\\n\\n```\\nlet match = \\\"(214) 987-6482\\\".match(/\\\\((?<area>\\\\d\\\\d\\\\d)\\\\)/)\\nconsole.log(match.groups.area) ➞ 214\\n```\\n\\nGrab the **year, month** and **day** from a string of dates. Name your groups with **year, month, and day** and in that order in your expression. You only have to come up with the **regular expression**.  The `replace()` function is already implemented in the test.\\n\\n```\\nlet REGEXP = your solution\\nlet str = \\\"2019-10-30, 2020-01-01\\\"\\n\\nstr.replace(REGEXP, \\\"$<day>.$<month>.$<year>\\\") ➞ \\\"30.10.2019, 01.01.2020\\\"\\n```\\n\\n### Notes\\n- Dates do not go back before 1900.\\n- Dates always come in year-month-day format.\\n- Check the **Resources** tab if you get stuck.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"const str1 = \\\"2019-10-30, 2020-01-01\\\";\\nconst str2 = \\\"2020-11-14, 1947-01-30, 1955-04-12\\\";\\nconst str3 = \\\"2001-03-09, 1988-12-19, 1918-03-20, 1969-08-15\\\";\\n\\nconst validate = (REGEXP) => {\\n\\t if(!/(year)+.*(month)+.*(day)+/.test(String(REGEXP))) return () => \\\"invalid\\\" \\n\\t return function testReg(str) {\\n\\t\\t\\treturn str.replace(REGEXP, '$<day>.$<month>.$<year>');\\n\\t }\\n}\\n\\nconst testExp = validate(REGEXP)\\n\\nTest.assertNotEquals(testExp(str1), \\\"invalid\\\", \\\"Only the named groups are allowed: year, month, day\\\")\\nTest.assertEquals(testExp(str1), \\\"30.10.2019, 01.01.2020\\\")\\nTest.assertEquals(testExp(str2), \\\"14.11.2020, 30.01.1947, 12.04.1955\\\")\\nTest.assertEquals(testExp(str3), \\\"09.03.2001, 19.12.1988, 20.03.1918, 15.08.1969\\\")\\n\\n// credits to https://javascript.info/regexp-groups\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,0,1,2,2,2,2,2,2,3,2,3,1,3,2,2,2,2,1,3,3,1,1,3,1,1,1,1,2,3,1,1,2,2,3,3,1,1,1,1,2,1,3,2,2,3,2,2,3,3,1,3,3,1,2,2,0,2,2,2,2,1,2,3,2,0,3,3,3,1,2,3,3,3,2,1,2,2,1,2,1,1,5,2,4,3,1,0,1,2,2,3,1,3,5,3,3,3,2,2,3,3,3,0,2,3,2,3,3,3,5,3,3,1,0],\"rators\":[\"yaL57wdXmgAZTvKfX\",\"n5wubRfh6zh8QRymN\",\"yjtdwc2AC4jA2RWtn\",\"RE4Mm9T6Q9uygAxGS\",\"pi76g3eRpnKrhee2a\",\"6BpBQnSGhzgvhXrEy\",\"2innwjWqxJHo4eRGh\",\"EWn8w8P3nNh7knatY\",\"vtHbevf2tHqe6mRxX\",\"AasGs8AeX9Lcb9xJn\",\"oyB4Wr4EeZnoDaa8B\",\"dKEpqsNT6HHoLfttp\",\"65dbBZynphj53nXqA\",\"ZtniSFrgec4oj6Pxm\",\"5NE62nxhQGmzBWMhG\",\"Ehrta9env9HXyrGbW\",\"GCsLzWAhLvniQqR3J\",\"faYyw7jGsSeaMeYYd\",\"PTo9qt93YqGvL8fCa\",\"a777e8chPvJkY3tKa\",\"8BFSTCnoe2QggN64c\",\"a7LBurCmz5n6gECbv\",\"PAzNgJF54C2mYPkR9\",\"Xk2g4CNFAnYcvxiSr\",\"5NGxHLcQ8Af2RJ4TN\",\"eNdxN376u6gM4qdXF\",\"Q75jsoXjhTXJRrw8z\",\"BSkoT6o2GweZkqXbc\",\"dXXrCKPcCmFFYZp44\",\"tAF9Gf6PiGogbZuWs\",\"jcPZ5ySXseCB7Ec3x\",\"MWFXck5KtMzWh5Bhg\",\"sBcsrC5paZm9nxjot\",\"zQLHZ9pKvvSWmmqYt\",\"BjJhatTBaTWm3ZhCt\",\"5AGQfZTFJ5vhitCfW\",\"wiNdaipiqS7tDmB7m\",\"nBo2LLuSMeEgd5f6G\",\"mHT2bJb5SByfJ8yKS\",\"FJsvM5yqKuK9yMk9P\",\"ucaDnFgvkB5hp5srb\",\"RRtwWHSFXu9z3a6dd\",\"a8ZhCFx7FcQHfEggd\",\"Db5pEHxNf87WJ9gLQ\",\"8s5Bdrn7RTga7DL6x\",\"8raviPK67KKxzQWcF\",\"aPctbuudzmcaxceJA\",\"CE2dkKHk3FNKErgCh\",\"szQg8dxKNNre3v3Jk\",\"3WtHp4MBzciz4AE8M\",\"54Ka62KytXRsrLPhZ\",\"NPpQtgLBrLcD2xbZB\",\"jkumHyXfMkhGcPgqC\",\"aEm3Wvj2rFYRL8Lrb\",\"MW4gsgPJfaMEMyXPy\",\"buX4mCQhtXCfBjeno\",\"iJC8PmpzSyTnEDqw5\",\"BedTuZQcg7mCmqjMK\",\"AP9C658FdY6ss9xao\",\"aWKJsp2GTG3GxKSp9\",\"CmRAmkw6kqvazgGEj\",\"QJM5KcENEwS24NDs7\",\"aBi4GtZ6t3wFQD9v5\",\"bX6tpTCjwoi6XMMbK\",\"qvNk7pHSveLu3jqWw\",\"K2ntBEwvnks86BpW6\",\"4A8w2X3K7NCHewd3K\",\"ZcmrtSpqFnCBEK5YE\",\"ZcqshY58sGEEvgeaq\",\"jED84My7PjSKANQsX\",\"e9Cknxbx6o7Nb6REs\",\"7gZKfvwaeqsGKXMEN\",\"Nb6LYPoQP6KJZt8mz\",\"dk2aGfRcWM4ybXLaP\",\"eFjGhq7C7bBKXjT6X\",\"HDbAqFKwbcLD2y5NY\",\"WdLW2YLhL2kmSqKgK\",\"p6qLK4qS2dnFzDA7k\",\"s7Qqx4Jnuq85iB7Lw\",\"t68Z8QoDjbsL4m73h\",\"NczXsSrYNX6nDWhjF\",\"Ryodq598CxEMM2ZFW\",\"CJBPyyfyaEeEo63sb\",\"gYcCXFCmXYRA3Q65f\",\"WBBN35jGBzzHWeLn5\",\"ZTTJprKDvFqKGew7c\",\"F8xkNyMFrY9BvrYEh\",\"ttajk69ZA47egmks5\",\"NchnDcEmsLTeFZ4FH\",\"tpbhfmv8fmpo6cRo9\",\"PWKD2nWyqcRgnBrjK\",\"dGugwhA6uwwjPGAa5\",\"Po3v3dHCk6wYGKMwi\",\"RyLmqZbY5sQNzZQbL\",\"9SrwsygZbwzGbYZSK\",\"CNc6rmwhbxkxEhHAp\",\"rvvEEYKgQBfSPpJ67\",\"BdvdJYwHZr7JpkHsn\",\"HkF7neZuG4AfT7sod\",\"ZcJm2kuqJnN3CXFaR\",\"QRv96jmNaYsWkxQEG\",\"4XxJxQkB5mNTLY2qk\",\"g4NCSxxHqHCGMpWwT\",\"wbzQwextPpnNBR7cG\",\"m3hDrjgTwir8Ldwhu\",\"zw7g7T8wE5R5CBhXr\",\"sYJKcRHeWxTBoAdaL\",\"pGh7WykiPe26fHJYv\",\"5ASZBWzFBDmnnF9C7\",\"4p2sARSZNNnKqjAT6\",\"76pPJeva5C9vikYza\",\"6wcsoqgMKfZ7xjSgn\",\"8SYDBRtkZuW3pdPtG\",\"WGKpjDMbEhmGdkorb\",\"sySmCuRJCCi2dtLLM\",\"75NY7vqimaATzRdAX\",\"XB7fB6SRML67sDDoX\",\"JkM75SjiunSXQutCW\",\"XrN688tKMi8qqsNFK\",\"wzsQExQ77eRqYt5ym\",\"vmTj4abpqWCBzaqpM\",\"hCfruGWxw7v64teEr\",\"M4vq8ATaS9Jg5X7iP\",\"rfmeZ5ECCXD5ZdFPH\",\"6P9KgzXeJtZ6ejQcu\",\"5nHtgdY8F2FbAMawq\",\"jxrNsaFHMAsozg3T7\",\"grpoFx4PJW3E7pDrQ\",\"fPQyGGiaJhox82ba6\",\"DaaYgfivvuHBk4kbg\",\"Yfggc4Hr3fmtG4dsS\",\"AFfw7cGg83uYk2Miy\",\"wJTDDTE3TrmSXKP4d\",\"YSmLyP3eRhcFjJPzg\",\"RtPhDuwmvWNHiBxmG\",\"QjGNkRM3Xc78yShJN\",\"2Qk2mFu9HBFzrB24i\",\"jemTNShfp6ymAs3pj\",\"GM2X83qnuLXTHe5zA\",\"oDtGiNqDMHmhHE3J8\",\"NGvCPuMiAP3xrRLfB\",\"49XFttjKo2QhEWT3R\",\"PH32cNxBjrK4a28sn\",\"Ya3eHgs8x3unZRLpb\",\"RoGGD5cpHb4ftdLDv\",\"HCfkcKnPs9mrJojdG\",\"J7d397iB5GuWRAMfg\",\"TtrXnGzi9MyhLvWiz\",\"Yp7uvStL97cC9fKkY\",\"jyoLggHk8xQKZuoQC\",\"ThaiAKWWDw2W4QfJh\",\"QGjY3hgPYPMmMjc7j\",\"rMc3LPajSgm68hNfC\",\"CHvzhtXnv8HTbPQ56\"],\"total\":169,\"quality\":[5,5,5,2,4,5,5,5,5,5,4,5,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,3,5,5,5,5,5,5,5,3,5]},\"flags\":0},\"summary\":\"Groups and ranges indicate groups and ranges of expression characters.  Named capturing groups matches \\\"x\\\" in (?\\\\x) and stores it on the groups property of the returned matches under the name specified by \\\\. The angle brackets, ``, are required for group name.\\n\\nTo extract the United States area code from a phone number, we could use:\\n\\nlet match = \\\"(214) 987-64\",\"tags\":[\"regex\",\"formatting\"],\"timestamp\":{\"$date\":1583429118185},\"title\":\"RegEx XX : Group Ranges \u2060— Named Capturing Groups (?<Name>x)\",\"quality\":4.6923076923076925,\"family\":[{\"_id\":\"8FG9myNKdmtdxWoNN\",\"language\":\"javascript\"},{\"_id\":\"LMJ6HEjMuLpTd6Zzs\",\"language\":\"python3\"}]}}"]