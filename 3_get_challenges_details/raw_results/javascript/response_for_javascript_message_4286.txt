a["{\"msg\":\"result\",\"id\":\"898\",\"result\":{\"_id\":\"YE9n7my9REKyReMjP\",\"author\":\"Mubashir Hassan \",\"authorId\":\"T6iBEE2jp7f7iEF2P\",\"code\":\"function noPermsDigits(n){\\n  \\n}\",\"difficulty\":1.6097560975609757,\"familyId\":\"WXzPxRnKYM88E58ua\",\"instructions\":\"Given a known number of unique items, how many ways could we arrange them in a row?\\n\\nCreate a function that takes an integer `n` and returns the number of digits of the number of possible permutations for `n` unique items. For instance, 5 unique items could be arranged in 120 unique ways. 120 has 3 digits, hence the integer `3` is returned.\\n\\n\\n### Examples\\n```\\nnoPermsDigits(0) ➞ 1\\n\\nnoPermsDigits(1) ➞ 1\\n\\nnoPermsDigits(5) ➞ 3\\n\\nnoPermsDigits(8) ➞ 5\\n```\\n\\n### Notes\\nThis challenge requires some understanding of combinatorics.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assertEquals(noPermsDigits(0), 1)\\nTest.assertEquals(noPermsDigits(1), 1)\\nTest.assertEquals(noPermsDigits(2), 1)\\nTest.assertEquals(noPermsDigits(3), 1)\\nTest.assertEquals(noPermsDigits(4), 2)\\nTest.assertEquals(noPermsDigits(5), 3)\\nTest.assertEquals(noPermsDigits(6), 3)\\nTest.assertEquals(noPermsDigits(7), 4)\\nTest.assertEquals(noPermsDigits(8), 5)\\nTest.assertEquals(noPermsDigits(9), 6)\\nTest.assertEquals(noPermsDigits(10), 7)\\nTest.assertEquals(noPermsDigits(11), 8)\\nTest.assertEquals(noPermsDigits(12), 9)\\nTest.assertEquals(noPermsDigits(13), 10)\\nTest.assertEquals(noPermsDigits(14), 11)\\nTest.assertEquals(noPermsDigits(15), 13)\\nTest.assertEquals(noPermsDigits(16), 14)\\nTest.assertEquals(noPermsDigits(17), 15)\\nTest.assertEquals(noPermsDigits(18), 16)\\nTest.assertEquals(noPermsDigits(19), 18)\\nTest.assertEquals(noPermsDigits(25), 26)\\nTest.assertEquals(noPermsDigits(50), 65)\\nTest.assertEquals(noPermsDigits(75), 110)\\nTest.assertEquals(noPermsDigits(100), 158)\\nTest.assertEquals(noPermsDigits(125), 210)\\nTest.assertEquals(noPermsDigits(150), 263)\\nTest.assertEquals(noPermsDigits(175), 319)\\nTest.assertEquals(noPermsDigits(200), 375)\\nTest.assertEquals(noPermsDigits(225), 434)\\nTest.assertEquals(noPermsDigits(250), 493)\\nTest.assertEquals(noPermsDigits(275), 554)\\nTest.assertEquals(noPermsDigits(300), 615)\\nTest.assertEquals(noPermsDigits(325), 677)\\nTest.assertEquals(noPermsDigits(350), 741)\\nTest.assertEquals(noPermsDigits(375), 805)\\nTest.assertEquals(noPermsDigits(400), 869)\\nTest.assertEquals(noPermsDigits(425), 935)\\nTest.assertEquals(noPermsDigits(450), 1001)\\nTest.assertEquals(noPermsDigits(475), 1067)\\nTest.assertEquals(noPermsDigits(500), 1135)\\nTest.assertEquals(noPermsDigits(525), 1202)\\nTest.assertEquals(noPermsDigits(550), 1271)\\nTest.assertEquals(noPermsDigits(575), 1339)\\nTest.assertEquals(noPermsDigits(600), 1409)\\nTest.assertEquals(noPermsDigits(625), 1478)\\nTest.assertEquals(noPermsDigits(650), 1548)\\nTest.assertEquals(noPermsDigits(675), 1619)\\nTest.assertEquals(noPermsDigits(700), 1690)\\nTest.assertEquals(noPermsDigits(725), 1761)\\nTest.assertEquals(noPermsDigits(750), 1833)\\nTest.assertEquals(noPermsDigits(775), 1905)\\nTest.assertEquals(noPermsDigits(800), 1977)\\nTest.assertEquals(noPermsDigits(825), 2050)\\nTest.assertEquals(noPermsDigits(850), 2123)\\nTest.assertEquals(noPermsDigits(875), 2197)\\nTest.assertEquals(noPermsDigits(900), 2270)\\nTest.assertEquals(noPermsDigits(925), 2344)\\nTest.assertEquals(noPermsDigits(950), 2419)\\nTest.assertEquals(noPermsDigits(975), 2493)\",\"language\":\"javascript\",\"quality\":0,\"summary\":\"Given a known number of unique items, how many ways could we arrange them in a row?\\n\\nCreate a function that takes an integer n and returns the number of digits of the number of possible permutations for n unique items. For instance, 5 unique items could be arranged in 120 unique ways. 120 has 3 digits, hence the integer 3 is returned.\\n\\nExamples\\nnoPermsDigits(0\",\"tags\":[\"recursion\",\"higher_order_functions\",\"math\"],\"timestamp\":{\"$date\":1606298827942},\"title\":\"Combinatorial Exploration\",\"stats\":{\"completed\":{\"total\":36,\"ratings\":[1,1,1,1,1,2,2,2,3,0,0,3,2,2,1,2,2,1,2,2,2,2,2,2,2,2,2,2,0,0,2,2,2,2,2,2,2,2,0,2,1],\"quality\":[],\"rators\":[\"u9cRf5kvtpRB5ffB3\",\"G2Tp8KQzq4TQp2JfJ\",\"HmQu5Cd2KivaXhaR7\",\"mHT2bJb5SByfJ8yKS\",\"g4NCSxxHqHCGMpWwT\",\"3Gf7ikLijfoxabiPY\",\"2ZFoLTxcCARhwc8xX\",\"RE4Mm9T6Q9uygAxGS\",\"buX4mCQhtXCfBjeno\",\"CNc6rmwhbxkxEhHAp\",\"6BpBQnSGhzgvhXrEy\",\"AFfw7cGg83uYk2Miy\",\"yjtdwc2AC4jA2RWtn\",\"Yp7uvStL97cC9fKkY\",\"QRv96jmNaYsWkxQEG\",\"2Ni3PzJAc5fAhqBkb\",\"srJ34BaybkQh3qRkM\",\"2Qk2mFu9HBFzrB24i\",\"c7uBxu2rgY77H5d79\",\"Ya3eHgs8x3unZRLpb\",\"wJTDDTE3TrmSXKP4d\",\"QjGNkRM3Xc78yShJN\",\"65dbBZynphj53nXqA\",\"PH32cNxBjrK4a28sn\",\"zw7g7T8wE5R5CBhXr\",\"pi76g3eRpnKrhee2a\",\"gXTAie79kiw28tx5u\",\"nBJve5CzG6WAw7WFQ\",\"AasGs8AeX9Lcb9xJn\",\"oDtGiNqDMHmhHE3J8\",\"7wtuhPesfhcYsfZaZ\",\"tAF9Gf6PiGogbZuWs\",\"z47JaNrQMgvuPx5HE\",\"K45zPJxsABuA3WSyj\",\"aEm3Wvj2rFYRL8Lrb\",\"bfYmA3LMvhSrK59cn\"]},\"flags\":0},\"family\":[{\"_id\":\"YE9n7my9REKyReMjP\",\"language\":\"javascript\"},{\"_id\":\"oQ99uE4iPNbEnf9QZ\",\"language\":\"python3\"},{\"_id\":\"8hpcexAyrjqLEqroN\",\"language\":\"ruby\"}]}}"]