a["{\"msg\":\"result\",\"id\":\"2231\",\"result\":{\"_id\":\"nNPTevXWPjQMLGG3v\",\"author\":\"David Newman\",\"authorId\":\"Po3v3dHCk6wYGKMwi\",\"code\":\"function enoughRoom(grid, desired) {\\n\\t\\n}\",\"difficulty\":3.4545454545454546,\"editorId\":\"Po3v3dHCk6wYGKMwi\",\"familyId\":\"r3AXXmwYuuamQsHif\",\"instructions\":\"Having spent decades doing dangerous stuff like running away from explosions, running towards explosions, running alongside explosions, and other Cool Spy Things, Commander James Bond has finally decided to retire. Mr. Bond wishes to follow (somewhat) in Dr. No's footsteps, and buy a private island.\\n\\nFortunately, the illustrious archipelago nation of Edabitia has decided to offer its land up for sale. The problem, however, is that most of the unoccupied islands of Edabitia are... rather small. As in, they wouldn't even be able to fit a broom closet, much less the sprawling mansion deserving of Bond!\\n\\nBond, not wanting to deal with all this nasty real estate stuff, hires you to find him an island.\\n\\n### Your Job\\nGiven a `grid` of an area of Edabitia, and a `desired` that describes the area Bond desires for his mansion, determine whether there exists, on that map, an island that would be suitable.\\n\\n### Map\\nThe map will be represented by a 2-dimensional array with two possible values for each \\\"cell\\\": \\n - `1`: The cell is land.\\n  - `0`: The cell is water.\\n\\n### Build Rules\\nBond's house base will be built up of square subsections, with each subsection occupying *one cell of the map*. So that Bond can actually walk between sections, each section *must* be connected to other sections in the house by a *full* wall. In other words, two cells connected by *only* a diagonal don't \\\"count\\\". In \\\"math\\\" terms: \\n *Two cells A and B are part of the same island *only if* B is directly north, east, south, or west of A.*\\n\\nOther than that, a mansion can be any shape.\\n\\nConfused? Let's look at a few examples:\\n\\n```\\nenoughRoom([\\n  [0, 0, 0, 0, 0],\\n  [0, 1, 1, 0, 0],\\n  [0, 1, 1, 0, 0],\\n  [0, 0, 0, 0, 0]\\n],  5) ➞ false\\n\\n\\nenoughRoom([\\n  [0, 0, 0, 0, 0],\\n  [0, 1, 1, 0, 0],\\n  [0, 0, 0, 1, 0],\\n  [0, 0, 0, 1, 0]\\n],  4) ➞ false\\n\\n\\nenoughRoom([\\n  [1, 1, 1, 0, 0],\\n  [0, 0, 1, 0, 0],\\n  [0, 0, 1, 1, 0],\\n  [0, 0, 0, 1, 0]\\n],  6) ➞ true\\n```\\n\\nIn the first example, we only have a 4x4 square. We're asked to find an area for a mansion of *5* cells in size, so that won't work.\\n\\nIn the second example, while we do have 4 total squares of land (our desired land total), the two islands (one \\\"wide\\\" and one \\\"tall\\\") are only connected by a diagonal, and so *must be treated as two separate islands*.\\n\\nIn the third example, even though the island itself is a weird, snakey, z-shape, it still is *one* island of area = 7, which is more than enough for our needs.\\n\\n### Notes\\n- For the sake of this problem, assume that Bond can build his house right up against the water's edge. That is, while normally you'd want to avoid building *right* at the water (because of, you know, erosion), you can safely ignore that here.\\n- Again, other than the No Diagonals rule, Bond's house can be *any* shape.\\n- Assume that the current map you're looking at is entirely surrounded by water. That is, assume that the only nearby land available is the land you *see*.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"const scenarios = [{\\n\\tmap:[ [ 0, 0, 1 ], [ 1, 0, 0 ], [ 1, 0, 0 ] ],\\n\\tdesired:2,\\n\\texpected:true,\\n\\treason:`Just a simple island. Welcome home.`\\n},{\\n\\tmap:[\\n  [ 0, 0, 0, 0, 0, 0 ],\\n  [ 0, 1, 1, 1, 1, 0 ],\\n  [ 0, 1, 1, 0, 1, 0 ],\\n  [ 0, 1, 1, 1, 1, 0 ],\\n  [ 0, 0, 0, 0, 0, 0 ],\\n  [ 0, 0, 0, 0, 0, 0 ]\\n],\\n\\tdesired:8,\\n\\texpected:true,\\n\\treason:'A bigger island. Room to stretch out!'\\n},{\\n\\tmap:[[0,0,0,0,0],\\n [0,1,1,0,0],\\n [0,1,1,0,0],\\n [0,0,0,0,0]],\\n\\tdesired:5,\\n\\texpected:false,\\n\\treason:'Land too small'\\n},{\\n\\tmap:[[0,0,0,0,0],\\n [0,1,1,0,0],\\n [0,0,0,1,0],\\n [0,0,0,1,0]],\\n\\tdesired:4,\\n\\texpected:false,\\n\\treason:`Diagonally connected islands don't count!`\\n},{\\n\\tmap:[\\n  [ 1, 0, 1, 0, 0 ],\\n  [ 1, 1, 0, 1, 0 ],\\n  [ 0, 0, 0, 1, 0 ],\\n  [ 0, 0, 0, 0, 0 ],\\n  [ 1, 0, 1, 0, 0 ],\\n  [ 0, 1, 0, 0, 0 ]\\n],\\n\\tdesired:6,\\n\\texpected:false,\\n\\treason:`Just because a map is big doesn't mean it \\\"works\\\"!`\\n},{\\n\\tmap:[\\n  [ 1, 0, 1, 0, 1 ],\\n  [ 0, 1, 0, 1, 0 ],\\n  [ 1, 0, 1, 0, 1 ],\\n  [ 0, 1, 0, 1, 0 ],\\n  [ 1, 0, 1, 0, 1 ],\\n  [ 0, 1, 0, 1, 0 ]\\n],\\n\\tdesired:3,\\n\\texpected:false,\\n\\treason:`Mr. Bond does not appreciate playing chess with his island.`\\n},{\\n\\tmap:[\\n  [\\n    1, 0, 1, 1, 1,\\n    0, 0, 0, 0, 0\\n  ],\\n  [\\n    1, 1, 0, 0, 1,\\n    0, 0, 0, 0, 0\\n  ]\\n],\\n\\tdesired:4,\\n\\texpected:true,\\n\\treason:`A thin map... but it works!`\\n}]\\n\\nconst drawIsland = grid=>{\\n\\tgrid.forEach(row=>{\\n\\t\\tconsole.log(row.map(cell=>!!cell?'▓':`░`).join(''))\\n\\t})\\n}\\nscenarios.forEach(sc=>{\\n\\tdrawIsland(sc.map)\\n\\tTest.assertEquals(enoughRoom(sc.map,sc.desired),sc.expected,sc.reason)\\n})\",\"language\":\"javascript\",\"quality\":0,\"stats\":{\"completed\":{\"ratings\":[4,4,4,4,4,3,3,5,2,3,2],\"quality\":[],\"rators\":[\"Po3v3dHCk6wYGKMwi\",\"mDWNyaaQ9hvPCRzSd\",\"bXaGdBM8FBLHf7N6Y\",\"yjtdwc2AC4jA2RWtn\",\"mq6mwZfgzeyxYhFpD\",\"J5MgLszeGgtciW56n\"],\"total\":8},\"flags\":0},\"summary\":\"Having spent decades doing dangerous stuff like running away from explosions, running towards explosions, running alongside explosions, and other Cool Spy Things, Commander James Bond has finally decided to retire. Mr. Bond wishes to follow (somewhat) in Dr. No's footsteps, and buy a private island.\\n\\nFortunately, the illustrious archipelago nation of Edabitia\",\"tags\":[\"algorithms\",\"arrays\",\"logic\",\"recursion\"],\"timestamp\":{\"$date\":1607111005200},\"title\":\"Mr Bond Buys an Island\",\"family\":[{\"_id\":\"nNPTevXWPjQMLGG3v\",\"language\":\"javascript\"}]}}"]