a["{\"msg\":\"result\",\"id\":\"2254\",\"result\":{\"_id\":\"B2v5qnwvYK929TnWB\",\"author\":\"persolut\",\"authorId\":\"xn7uGNKeAwPEkP9oA\",\"code\":\"function expressFactors(n) {\\n\\t\\n}\",\"difficulty\":3.52,\"familyId\":\"3SCSPcJX94fzq4FY2\",\"instructions\":\"Create a function that takes a positive integer and returns a string expressing how the number can be made by multiplying powers of its prime factors.\\n\\n### Examples\\n```\\nexpressFactors(2) ➞ \\\"2\\\"\\n\\nexpressFactors(4) ➞ \\\"2^2\\\"\\n\\nexpressFactors(10) ➞ \\\"2 x 5\\\"\\n\\nexpressFactors(60) ➞ \\\"2^2 x 3 x 5\\\"\\n```\\n\\n### Notes\\n- All inputs will be positive integers in the range 1 < n < 10,000.\\n- If a factor is repeated express it in the form **\\\"x^y\\\"** where **x** is the factor and **y** is the number of repetitions of the factor.\\n- If `n` is a prime number, return `n` as a string as in example #1 above.\\n- Factors should appear in ascending order in the expression.\\n- Make sure you include the space either side of the multiplication sign, `\\\" x \\\"`.\\n- Check the **Resources** if you need to understand **Prime Factorization**.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assertEquals(expressFactors(2), \\\"2\\\")\\nTest.assertEquals(expressFactors(4), \\\"2^2\\\")\\nTest.assertEquals(expressFactors(10), \\\"2 x 5\\\")\\nTest.assertEquals(expressFactors(11), \\\"11\\\")\\nTest.assertEquals(expressFactors(29), \\\"29\\\")\\nTest.assertEquals(expressFactors(60), \\\"2^2 x 3 x 5\\\")\\nTest.assertEquals(expressFactors(100), \\\"2^2 x 5^2\\\")\\nTest.assertEquals(expressFactors(151), \\\"151\\\")\\nTest.assertEquals(expressFactors(323), \\\"17 x 19\\\")\\nTest.assertEquals(expressFactors(997), \\\"997\\\")\\nTest.assertEquals(expressFactors(3349), \\\"17 x 197\\\")\\nTest.assertEquals(expressFactors(5040), \\\"2^4 x 3^2 x 5 x 7\\\")\\nTest.assertEquals(expressFactors(6097), \\\"7 x 13 x 67\\\")\\nTest.assertEquals(expressFactors(8192), \\\"2^13\\\")\\nTest.assertEquals(expressFactors(9870), \\\"2 x 3 x 5 x 7 x 47\\\")\\nTest.assertEquals(expressFactors(9973), \\\"9973\\\")\\nTest.assertEquals(expressFactors(9999), \\\"3^2 x 11 x 101\\\")\",\"language\":\"javascript\",\"quality\":0,\"summary\":\"Create a function that takes a positive integer and returns a string expressing how the number can be made by multiplying powers of its prime factors.\\n\\nExamples\\nexpressFactors(2) ➞ \\\"2\\\"\\n\\nexpressFactors(4) ➞ \\\"2^2\\\"\\n\\nexpressFactors(10) ➞ \\\"2 x 5\\\"\\n\\nexpressFactors(60) ➞ \\\"2^2 x 3 x 5\\\"\\n\\nNotes\\nAll inputs will be positive integers in the range 1 < n < 10,000.\\nIf a factor\",\"tags\":[\"algorithms\",\"formatting\",\"math\"],\"timestamp\":{\"$date\":1603192349782},\"title\":\"Powerful Prime Factor\",\"stats\":{\"completed\":{\"total\":23,\"ratings\":[3,3,3,3,3,1,4,4,5,4,3,3,5,2,4,4,4,2,3,3,5,4,4,4,5],\"quality\":[],\"rators\":[\"yjtdwc2AC4jA2RWtn\",\"xn7uGNKeAwPEkP9oA\",\"buX4mCQhtXCfBjeno\",\"YEjnBpgNjDLhnf4H7\",\"pWJWQDhqzDSmfaFam\",\"aEm3Wvj2rFYRL8Lrb\",\"PDLN24TNff82siRTg\",\"tAF9Gf6PiGogbZuWs\",\"f78HgawC4zHTn8oxZ\",\"xsDyJstYoBZRS8pJH\",\"mHT2bJb5SByfJ8yKS\",\"PRd3ZE6vHgzsezF7z\",\"HmQu5Cd2KivaXhaR7\",\"kp2ZbCewZJAbfd7xv\",\"DPi9QGLctq2y76KuE\",\"dz4stAGxFGawPRfob\",\"srJ34BaybkQh3qRkM\",\"QRv96jmNaYsWkxQEG\",\"7FkWhj8mQsdmhrb4H\",\"8BJyXvRWcrvN3nttS\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"RZwB74ERGqa6FY3C2\",\"language\":\"cpp\"},{\"_id\":\"cR976ve6HR7bzBaEa\",\"language\":\"csharp\"},{\"_id\":\"B2v5qnwvYK929TnWB\",\"language\":\"javascript\"},{\"_id\":\"dix2XgYpxcsmaukA7\",\"language\":\"python3\"},{\"_id\":\"FmprgBBEMz3pTGbpa\",\"language\":\"ruby\"}]}}"]