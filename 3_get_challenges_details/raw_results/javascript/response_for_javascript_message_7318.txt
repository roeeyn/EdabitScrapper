a["{\"msg\":\"result\",\"id\":\"2399\",\"result\":{\"_id\":\"wCoYo3oGqq4MnA8EA\",\"author\":\"BijogFc24\",\"authorId\":\"Nb6LYPoQP6KJZt8mz\",\"code\":\"function affineDecrypt(str, f) {\\n\\t\\n}\",\"difficulty\":4.357142857142857,\"familyId\":\"FAqweChCv57v8HvAj\",\"instructions\":\"Create a function that takes a string of ciphertext (English alphabet) all in lowercase, encryption function, and converts it into plain text using the **affine decryption** function.\\n\\n ### Decryption Function\\nIn the affine cipher, the letters of an alphabet of size m are first mapped to the integers in the range 0 … m − 1. It then uses modular arithmetic to transform the integer that each plaintext letter corresponds to into another integer that corresponds to a ciphertext letter. The encryption function for a single letter is `E(x)=(ax+b)mod m` where modulus `m` is the size of the alphabet and `a` and `b` are the keys of the cipher. The value `a` must be chosen such that `a` and `m` are `coprime`.\\n\\nThe decryption function is `D(x)=a^(-1)*(x-b)mod m` where `a^(-1)` is the modular multiplicative inverse of a modulo m `ie a * a^(-1) mod m == 1`. The multiplicative inverse of `a` only exists if `a and m are coprime`. Hence without the restriction on `a`, decryption might not be possible.\\n\\nThe alphabet is going to be the letters `a` through `z` and will have the corresponding values  `a=0, b=1, c=2, d=3 ... z=25`.\\n\\n### Examples\\n```\\naffineDecrypt(\\\"ucncmrwt\\\", \\\"(x+2)%26\\\") ➞ \\\"salakpur\\\"\\n// a = 1, b = 2, encryption = \\\"(x+2)%26\\\".\\n// Modular Multiplicative Inverse of 1 =  1.\\n// We apply the decryption function for the letters.\\n\\naffineDecrypt(\\\"hezmrc\\\", \\\"(3x+4)%26\\\") ➞ \\\"bahuni\\\"\\n// a = 3, b = 4, encryption = \\\"(x+2)%26\\\".\\n// Modular Multiplicative Inverse of 3 = 9.\\n// We apply the decryption function for the letters.\\n```\\n\\n### Notes\\nFor the problem  1 =< a  <= 11 , 1 =< b <= 9 , m = 26\",\"isHidden\":false,\"lab\":\"Test.assertEquals(affineDecrypt(\\\"hezmrc\\\", \\\"(3x+4)%26\\\"), \\\"bahuni\\\")\\nTest.assertEquals(affineDecrypt(\\\"ucncmrwt\\\", \\\"(x+2)%26\\\"), \\\"salakpur\\\")\\nTest.assertEquals(affineDecrypt(\\\"mvoadul\\\", \\\"(5x+7)%26\\\"), \\\"birjung\\\")\\nTest.assertEquals(affineDecrypt(\\\"ezabgobtba\\\", \\\"(3x+1)%26\\\"), \\\"biratnagar\\\")\\nTest.assertEquals(affineDecrypt(\\\"lpbifsv\\\", \\\"(7x+5)%26\\\"), \\\"mustang\\\")\\nTest.assertEquals(affineDecrypt(\\\"srnkdud\\\", \\\"(x+3)%26\\\"), \\\"pokhara\\\")\\nTest.assertEquals(affineDecrypt(\\\"lncorchaz\\\", \\\"(9x+2)%26\\\"), \\\"bhaktapur\\\")\\nTest.assertEquals(affineDecrypt(\\\"ejwjpsvo\\\", \\\"(11x+9)%26\\\"), \\\"janakpur\\\")\\nTest.assertEquals(affineDecrypt(\\\"ahcxcba\\\", \\\"(3x+2)%26\\\"), \\\"itahari\\\")\\nTest.assertEquals(affineDecrypt(\\\"ohofmapg\\\", \\\"(3x+7)%26\\\"), \\\"lalitpur\\\")\",\"language\":\"javascript\",\"summary\":\"Create a function that takes a string of ciphertext (English alphabet) all in lowercase, encryption function, and converts it into plain text using the affine decryption function.\\n\\nDecryption Function\\nIn the affine cipher, the letters of an alphabet of size m are first mapped to the integers in the range 0 … m − 1. It then uses modular arithmetic to transform\",\"tags\":[\"cryptography\",\"math\",\"language_fundamentals\"],\"timestamp\":{\"$date\":1597134501635},\"title\":\"Affine Cipher Decrypt\",\"stats\":{\"completed\":{\"total\":11,\"ratings\":[5,5,5,5,5,5,3,4,2,3,5,5,4,5],\"rators\":[\"Nb6LYPoQP6KJZt8mz\",\"yjtdwc2AC4jA2RWtn\",\"tAF9Gf6PiGogbZuWs\",\"aEm3Wvj2rFYRL8Lrb\",\"va3fDAQm4sqSMoy3R\",\"7XD8yqDQXa5n2znYx\",\"xn7uGNKeAwPEkP9oA\",\"P8bXFR4cHwFia9rNM\",\"8BJyXvRWcrvN3nttS\"],\"quality\":[]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":0,\"family\":[{\"_id\":\"Y2px2N8aACNBrwcGf\",\"language\":\"cpp\"},{\"_id\":\"wCoYo3oGqq4MnA8EA\",\"language\":\"javascript\"},{\"_id\":\"wHASn6mJgBYGXxLJ6\",\"language\":\"python3\"},{\"_id\":\"JP3uRyJLLWh3gb7hQ\",\"language\":\"ruby\"}]}}"]