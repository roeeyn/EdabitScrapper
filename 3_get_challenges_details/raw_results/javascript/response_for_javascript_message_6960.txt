a["{\"msg\":\"result\",\"id\":\"2222\",\"result\":{\"_id\":\"ogDHjfpAcE896kN4H\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"function canExit(arr) {\\n\\t\\n}\",\"difficulty\":3.4237288135593222,\"editorId\":\"mNMQvcxKSSvqqMYCH\",\"familyId\":\"hpJkzKvSXyfSMq8ww\",\"instructions\":\"A maze can be represented by a 2D matrix, where `0`s represent **walkeable** areas, and `1`s represent walls. You start on the upper left corner and the exit is on the most lower right cell.\\n\\nCreate a function that returns `true` if you can walk from one end of the maze to the other. You can only move up, down, left and right. You **cannot move diagonally**.\\n\\n### Examples\\n```\\ncanExit([\\n  [0, 1, 1, 1, 1, 1, 1],\\n  [0, 0, 1, 1, 0, 1, 1],\\n  [1, 0, 0, 0, 0, 1, 1],\\n  [1, 1, 1, 1, 0, 0, 1],\\n  [1, 1, 1, 1, 1, 0, 0]\\n]) ➞ true\\n\\ncanExit([\\n  [0, 1, 1, 1, 1, 1, 1],\\n  [0, 0, 1, 0, 0, 1, 1],\\n  [1, 0, 0, 0, 0, 1, 1],\\n  [1, 1, 0, 1, 0, 0, 1],\\n  [1, 1, 0, 0, 1, 1, 1]\\n]) ➞ false\\n\\n// This maze only has dead ends!\\n\\ncanExit([\\n  [0, 1, 1, 1, 1, 0, 0],\\n  [0, 0, 0, 0, 1, 0, 0],\\n  [1, 1, 1, 0, 0, 0, 0],\\n  [1, 1, 1, 1, 1, 1, 0],\\n  [1, 1, 1, 1, 1, 1, 1]\\n]) ➞ false\\n\\n// Exit only one block away, but unreachable!\\n\\ncanExit([\\n  [0, 1, 1, 1, 1, 0, 0],\\n  [0, 0, 0, 0, 1, 0, 0],\\n  [1, 1, 1, 0, 0, 0, 0],\\n  [1, 0, 0, 0, 1, 1, 0],\\n  [1, 1, 1, 1, 1, 1, 0]\\n]) ➞ true\\n```\\n\\n### Notes\\n- In a maze of size `m x n`, you enter at `[0, 0]` and exit at `[m-1, n-1]`.\\n- There can be dead ends in a maze - one exit path is sufficient.\",\"lab\":\"Test.assertEquals(canExit([\\n\\t[0, 1, 1, 1, 1, 1, 1], \\n\\t[0, 0, 1, 1, 0, 1, 1], \\n\\t[1, 0, 0, 0, 0, 1, 1], \\n\\t[1, 1, 1, 1, 0, 0, 1], \\n\\t[1, 1, 1, 1, 1, 0, 0]\\n]), true)\\n\\nTest.assertEquals(canExit([\\n\\t[0, 1, 1, 1, 1, 1, 1], \\n\\t[0, 0, 1, 0, 0, 1, 1], \\n\\t[1, 0, 0, 0, 0, 1, 1], \\n\\t[1, 1, 0, 1, 0, 0, 1], \\n\\t[1, 1, 0, 0, 1, 1, 1]\\n]), false)\\n\\nTest.assertEquals(canExit([\\n\\t[0, 1, 1, 1, 1, 0, 0], \\n\\t[0, 0, 0, 0, 1, 0, 0], \\n\\t[1, 1, 1, 0, 0, 0, 0], \\n\\t[1, 1, 1, 1, 1, 1, 0], \\n\\t[1, 1, 1, 1, 1, 1, 1]\\n]), false)\\n\\nTest.assertEquals(canExit([\\n\\t[0, 1, 1, 1, 1, 0, 0], \\n\\t[0, 0, 0, 0, 1, 0, 0], \\n\\t[1, 1, 1, 0, 0, 0, 0], \\n\\t[1, 0, 0, 0, 1, 1, 0], \\n\\t[1, 1, 1, 1, 1, 1, 0]\\n]), true)\\n\\nTest.assertEquals(canExit([\\n\\t[0, 1, 1, 1, 1, 0, 0], \\n\\t[0, 0, 0, 0, 1, 0, 0], \\n\\t[1, 1, 1, 0, 0, 0, 0], \\n\\t[1, 0, 0, 0, 0, 1, 1], \\n\\t[1, 1, 1, 1, 0, 0, 0]\\n]), true)\\n\\nTest.assertEquals(canExit([\\n\\t[0, 1, 1, 1, 1, 0, 1], \\n\\t[0, 0, 0, 0, 1, 0, 1], \\n\\t[1, 1, 1, 0, 0, 0, 1], \\n\\t[1, 0, 0, 0, 0, 1, 1], \\n\\t[1, 1, 1, 1, 0, 1, 1]\\n]), false)\\n\\nTest.assertEquals(canExit([\\n\\t[0, 0, 0, 0, 0, 0, 0], \\n\\t[0, 0, 0, 0, 1, 0, 0], \\n\\t[1, 1, 1, 0, 0, 0, 0], \\n\\t[1, 0, 0, 0, 0, 1, 0], \\n\\t[1, 1, 1, 1, 0, 1, 0]\\n]), true)\\n\\nTest.assertEquals(canExit([\\n\\t[0, 0, 0, 0, 0, 0, 0], \\n\\t[0, 1, 1, 1, 1, 1, 0], \\n\\t[0, 1, 1, 1, 1, 1, 0], \\n\\t[0, 1, 1, 1, 1, 1, 0], \\n\\t[0, 0, 0, 0, 0, 0, 1]\\n]), false)\\n\\nTest.assertEquals(canExit([\\n\\t[0, 0, 1, 1, 1, 1, 1], \\n\\t[1, 0, 0, 1, 1, 1, 1], \\n\\t[1, 1, 0, 0, 1, 1, 1], \\n\\t[1, 1, 1, 0, 0, 0, 0], \\n\\t[1, 1, 1, 1, 1, 1, 0]\\n]), true)\\n\\n// More False Tests\\nTest.assertEquals(canExit([\\n\\t[0, 0, 0, 0, 0, 0, 0], \\n\\t[0, 1, 1, 1, 1, 1, 0], \\n\\t[0, 1, 1, 1, 1, 1, 0], \\n\\t[0, 1, 1, 1, 1, 1, 1], \\n\\t[0, 0, 0, 0, 0, 1, 0]\\n]), false)\\n\\nTest.assertEquals(canExit([\\n\\t[0, 1, 0, 0, 0, 0, 0], \\n\\t[0, 1, 1, 1, 1, 1, 0], \\n\\t[0, 1, 1, 1, 1, 1, 0], \\n\\t[0, 1, 1, 1, 1, 1, 0], \\n\\t[0, 0, 0, 0, 0, 1, 0]\\n]), false)\",\"language\":\"javascript\",\"summary\":\"A maze can be represented by a 2D matrix, where 0s represent walkeable areas, and 1s represent walls. You start on the upper left corner and the exit is on the most lower right cell.\\n\\nCreate a function that returns true if you can walk from one end of the maze to the other. You can only move up, down, left and right. You cannot move diagonally.\\n\\nExamples\\ncanEx\",\"tags\":[\"arrays\",\"functional_programming\",\"higher_order_functions\",\"games\"],\"timestamp\":{\"$date\":1554574341931},\"title\":\"Can You Exit the Maze?\",\"stats\":{\"completed\":{\"total\":54,\"ratings\":[4,4,4,4,4,4,4,4,4,4,4,3,2,5,5,2,5,4,2,0,2,5,5,4,5,3,1,5,5,0,0,1,4,3,5,2,5,5,4,4,4,3,2,4,4,5,5,1,5,4,2,2,5,5,5,0,1,3,2],\"rators\":[\"mNMQvcxKSSvqqMYCH\",\"65dbBZynphj53nXqA\",\"bbbpNxM3hgGMCqMn8\",\"SDtZFL5NzAoCPofXk\",\"YoCuvPrfoTW58imPa\",\"Fa69Gq8FX5jretBtz\",\"LTD7KCHFuXrmTWpQ4\",\"n79d9vBvnfFYWGnki\",\"2dh3D93pXqFerJ48s\",\"7swio9FFT8jEJXubj\",\"6cF2nrD29Nn2AeKP7\",\"CfXgiJuq2KxqL7Y7r\",\"8xuMMGF7fyQWL2fKH\",\"7WPf9TjQcYuJnEo4T\",\"MEYTCCcM3nWYmyDRs\",\"n5wubRfh6zh8QRymN\",\"yjtdwc2AC4jA2RWtn\",\"nqmaWxPWJstCytFkw\",\"mHT2bJb5SByfJ8yKS\",\"gGnDsJz5hr2t9MKCF\",\"BBP9BE5mKHRzaRpJr\",\"b5a77qecAq32wTEaR\",\"SjY6a2v6jMjGraDKz\",\"cAdwt6HpD55dviPaF\",\"cRpaCxYRmGcN3Nsoj\",\"p77hXrYbfjW9xXdW3\",\"LYtGKTAZkNWeqpNun\",\"EjPLq3QSJdGQFJdgW\",\"dtv7Fz2PEoBkJAcpF\",\"2NJuDfSqdrF8kHHni\",\"qRhXvCaA7qgDoeFnr\",\"iJzwsJmrD35g7dHbL\",\"dPM2Rk2iMkznyXNEt\",\"zsNp9fk9BGDBiHr4G\",\"oJRbRjYJnWfsCdNHD\",\"ZXRMRAJNP6eseLdbR\",\"Es4eX2stRpyoXeC7f\",\"wcgDoaKbZtbCGPu6K\",\"MNDLmXZmFMf8ASL2L\",\"7TXyMDHFYjna3dyPb\",\"eFjGhq7C7bBKXjT6X\",\"7ruSdfLTRKgEXhhvA\",\"aEm3Wvj2rFYRL8Lrb\",\"eoepTq5ES5tfgY9XT\",\"va3fDAQm4sqSMoy3R\",\"eKSJgCaiy4ReJWXTg\",\"mDWNyaaQ9hvPCRzSd\",\"h4jFmtbFn92eA4649\",\"qPqmhXzgTMmaFRy87\",\"eHcgvkTGsH7ZziqBo\",\"vG53vYGTfNimnsjza\",\"J5MgLszeGgtciW56n\"],\"quality\":[5,5]},\"tests\":{\"score\":0,\"voters\":[\"mNMQvcxKSSvqqMYCH\"]},\"instructions\":{\"score\":0,\"voters\":[\"mNMQvcxKSSvqqMYCH\"]},\"flags\":0},\"isHidden\":false,\"quality\":5,\"family\":[{\"_id\":\"PR5D7Lp42FGtE5tqD\",\"language\":\"cpp\"},{\"_id\":\"ogDHjfpAcE896kN4H\",\"language\":\"javascript\"},{\"_id\":\"PzyssSgqopkBjzTY2\",\"language\":\"python3\"},{\"_id\":\"NhbQ9Qcci9GeGRQBy\",\"language\":\"ruby\"}]}}"]