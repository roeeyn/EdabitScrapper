a["{\"msg\":\"result\",\"id\":\"2283\",\"result\":{\"_id\":\"LKTiopxKdDRARMvri\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"function reversibleInclusiveList(startOfRange, endOfRange) {\\n\\t\\n}\",\"difficulty\":3.625,\"familyId\":\"x42gWRa66MB7y8SRb\",\"instructions\":\"Write a function that, given the `startOfRange` and `endOfRange` values, returns an array containing all the numbers **inclusive** to that range. See examples below.\\n\\n### Examples\\n```\\nreversibleInclusiveList(1, 5) ➞ [1, 2, 3, 4, 5]\\n\\nreversibleInclusiveList(2, 8) ➞ [2, 3, 4, 5, 6, 7, 8]\\n\\nreversibleInclusiveList(10, 20) ➞[10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\\n\\nreversibleInclusiveList(24, 17) ➞[24, 23, 22, 21, 20, 19, 18, 17]\\n```\\n\\n### Notes\\n- The sort order of the resulting array is dependent of the input values.\\n- All inputs provided in the test scenarios are valid.\\n- If `startOfRange` is greater than `endOfRange`, return an **descendingly** sorted array, otherwise, **ascendingly** sorted.\\n- You are expected to solve this challenge via a **recursive** approach.\\n- A iterative version of this challenge can be found via this [link](https://edabit.com/challenge/2HZ8DqCaZxLHN6cP6).\\n- A collection of challenges in recursion can be found via this [link](https://edabit.com/collection/YJH4pAyqDbhLc4STc).\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"const funcCheck = f => (`${f}`.match(/Array|fill|from|of|reverse/gm) || []).length < 1\\nconst recurCheck = f => (`${f}`.match(RegExp(`${f.name}`, 'gm')) || []).length > +(/function/.test(f))\\n\\nTest.assertNotEquals(funcCheck(reversibleInclusiveList), false, \\\"A recursive approach is required!\\\")\\nTest.assertNotEquals(recurCheck(reversibleInclusiveList), false, \\\"Recursion is required!\\\")\\n\\nlet [actualParam, expectedParam] = [\\n  [[5, 1], [6, 2], [10, 20], [24, 17], [40, 50], [51, 41], [11, 66], [9, 3], [6, 16]],\\n  [[5, 4, 3, 2, 1],\\n  [6, 5, 4, 3, 2],\\n  [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],\\n  [24, 23, 22, 21, 20, 19, 18, 17],\\n  [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50],\\n  [51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41],\\n  [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\\n   40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66],\\n  [9, 8, 7, 6, 5, 4, 3],\\n  [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\\n]\\nfor (let i in actualParam) Test.assertSimilar(reversibleInclusiveList(...actualParam[i]), expectedParam[i])\",\"language\":\"javascript\",\"quality\":0,\"summary\":\"Write a function that, given the startOfRange and endOfRange values, returns an array containing all the numbers inclusive to that range. See examples below.\\n\\nExamples\\nreversibleInclusiveList(1, 5) ➞ [1, 2, 3, 4, 5]\\n\\nreversibleInclusiveList(2, 8) ➞ [2, 3, 4, 5, 6, 7, 8]\\n\\nreversibleInclusiveList(10, 20) ➞[10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\\n\\nreversibleI\",\"tags\":[\"recursion\",\"numbers\",\"logic\",\"math\"],\"timestamp\":{\"$date\":1604909510582},\"title\":\"Recursion: Reversible Inclusive List Ranges\",\"stats\":{\"completed\":{\"total\":22,\"ratings\":[5,5,5,5,5,5,1,1,2,4,5,2,3,3,4,2,5,4,3,5,5,4,2,2],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"aEm3Wvj2rFYRL8Lrb\",\"yjtdwc2AC4jA2RWtn\",\"RE4Mm9T6Q9uygAxGS\",\"buX4mCQhtXCfBjeno\",\"u9cRf5kvtpRB5ffB3\",\"5NGxHLcQ8Af2RJ4TN\",\"fS6pjyyPvPyqPCiYx\",\"mDWNyaaQ9hvPCRzSd\",\"DPi9QGLctq2y76KuE\",\"bX6tpTCjwoi6XMMbK\",\"QRv96jmNaYsWkxQEG\",\"PH32cNxBjrK4a28sn\",\"s678Wirfor5uYL5T6\",\"8BJyXvRWcrvN3nttS\",\"ZqqeirvNx5o4jKfyn\",\"tAF9Gf6PiGogbZuWs\",\"TtrXnGzi9MyhLvWiz\",\"P8bXFR4cHwFia9rNM\"]},\"flags\":0},\"editorId\":\"a777e8chPvJkY3tKa\",\"family\":[{\"_id\":\"h3rDzi2j5t2h7jtJi\",\"language\":\"java\"},{\"_id\":\"LKTiopxKdDRARMvri\",\"language\":\"javascript\"},{\"_id\":\"3ucrYGBkvJwjbFL4G\",\"language\":\"python3\"}]}}"]