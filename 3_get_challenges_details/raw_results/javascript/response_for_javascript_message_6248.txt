a["{\"msg\":\"result\",\"id\":\"1870\",\"result\":{\"_id\":\"NMCc4pcDx6d7hkvcu\",\"author\":\"er0s\",\"authorId\":\"5Zq3aGdvh4LHBvnJL\",\"code\":\"function happyAlgorithm(num) {\\n\\t\\n}\",\"difficulty\":2.6794871794871793,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"ZabXBMvQ95daB6rAZ\",\"instructions\":\"In this challenge, you have to implement an algorithm to establish if a given positive integer `num` is a Happy number, and how many steps of the algorithm are needed to establish it.\\n\\nYou have to repeatedly transform the given `num` into the sum of its squared digits:\\n- If after the transformation the new number is equal to `1`, `num` is a Happy number and the algorithm stops.\\n- If after the transformation, the new number is not equal to `1`, you have to transform it again.\\n\\n![Happy Numbers](https://edabit-challenges.s3.amazonaws.com/happyjcnc.png)\\n\\nIf a number can't be reduced to `1`, sooner or later the algorithm will enter into an infinitely repeating loop:\\n\\n```\\n... 20, 4, 16, 37, 58, 89, 145, 42, 20, 4 ...\\n```\\n\\nGiven a positive integer `num`, implement a function that returns:\\n- If `num` is a Happy number, the string `\\\"HAPPY x\\\"` with the \\\"**x**\\\" being the number of steps necessary to reduce `num` to 1.\\n- If `num` is not a Happy number, the string `\\\"SAD x\\\"` with the \\\"**x**\\\" being the number of steps necessary to enter into the infinite loop reaching so any number in the series `4, 16, 37, 58, 89, 145, 42, 20`, plus the number of steps necessary to obtain again that number.\\n\\nLook at the examples below for a better visualization.\\n\\n### Examples\\n```\\nhappyAlgorithm(139) ➞ \\\"HAPPY 5\\\"\\n\\n// Step 1: Transform 139\\n// 1² + 3² + 9² = 1 + 9 + 81 = 91\\n\\n// Step 2: Transform 91\\n// 9² + 1² = 81 + 1 = 82\\n\\n// Step 3: Transform 82\\n// 8² + 2² = 64 + 4 = 68\\n\\n// Step 4: Transform 68\\n// 6² + 8² = 36 + 64 = 100\\n\\n// Step 5: Transform 100\\n// 1² + 0² + 0² = 1 + 0 + 0 = 1\\n\\n// The algorithm stops at step 5: 139 is a Happy number\\n\\nhappyAlgorithm(67) ➞ \\\"SAD 10\\\"\\n\\n// Step 1: Transform 67\\n// 6² + 7² = 36 + 49 = 85\\n\\n// Step 2: Transform 85\\n// 8² + 5² = 64 + 25 = 89\\n// It entered into the infinite loop...\\n// ...but we have to demonstrate that is a loop!\\n\\n// Step 3: Transform 89\\n// 8² + 9² = 64 + 81 = 145\\n\\n// Step 4: Transform 145: result is 42\\n// Step 5: Transform 42: result is 20\\n// Step 6: Transform 20: result is 4\\n// Step 7: Transform 4: result is 16\\n// Step 8: Transform 16: result is 37\\n// Step 9: Transform 37: result is 58\\n// Step 10: Transform 58: result is 89\\n\\n// 89 was the result of step 2: it's a loop\\n// The algorithm stops at step 10: 67 is not a Happy number\\n\\nhappyAlgorithm(1) ➞ \\\"HAPPY 1\\\"\\n\\n// Step 1: Transform 1\\n// 1² = 1\\n\\n// The algorithm stops at step 1: 1 is a Happy number\\n\\nhappyAlgorithm(89) ➞ \\\"SAD 8\\\"\\n\\n// Step 1: Transform 89: result is 145\\n// Step 2: Transform 145: result is 42\\n// Step 3: Transform 42: result is 20\\n// Step 4: Transform 20: result is 4\\n// Step 5: Transform 4: result is 16\\n// Step 6: Transform 16: result is 37\\n// Step 7: Transform 37: result is 58\\n// Step 8: Transform 58: result is 89\\n\\n// 89 was the original number: it's a loop\\n// The algorithm stops at step 8: 89 is not a Happy number\\n```\\n\\n### Notes\\n- The transformation of a single-digit number is, trivially, the square of the digit (see example #3).\\n- If the given number is `1`, a step is needed to establish if it's Happy (see example #3).\\n- To establish if a number is not happy, you have to find the number of steps necessary to obtain again a number already found (it can be a number obtained through a transformation as in example #2 or the same given number as in example #4).\\n- You can expect only positive integers as input, without exceptions to handle.\",\"isHidden\":false,\"lab\":\"Test.assertEquals(happyAlgorithm(139), \\\"HAPPY 5\\\", \\\"Example #1\\\")\\nTest.assertEquals(happyAlgorithm(67), \\\"SAD 10\\\", \\\"Example #2\\\")\\nTest.assertEquals(happyAlgorithm(1), \\\"HAPPY 1\\\", \\\"Example #3\\\")\\nTest.assertEquals(happyAlgorithm(44), \\\"HAPPY 4\\\")\\nTest.assertEquals(happyAlgorithm(89), \\\"SAD 8\\\")\\nTest.assertEquals(happyAlgorithm(10), \\\"HAPPY 1\\\")\\nTest.assertEquals(happyAlgorithm(1327), \\\"SAD 17\\\")\\nTest.assertEquals(happyAlgorithm(2871), \\\"SAD 17\\\")\\nTest.assertEquals(happyAlgorithm(3970), \\\"HAPPY 6\\\")\\nTest.assertEquals(happyAlgorithm(5209), \\\"SAD 11\\\")\\nTest.assertEquals(happyAlgorithm(6329), \\\"HAPPY 3\\\")\\nTest.assertEquals(happyAlgorithm(8888), \\\"SAD 12\\\")\\nTest.assertEquals(happyAlgorithm(9331), \\\"HAPPY 2\\\")\\nTest.assertEquals(happyAlgorithm(10000), \\\"HAPPY 1\\\")\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,1,1,1,2,2,3,2,3,1,2,3,3,3,3,3,2,2,2,4,3,3,3,3,3,2,3,0,3,3,3,1,3,2,4,4,3,2,3,3,3,4,2,4,2,4,4,1,4,3,2,4,4,3,4,3,2,4,3,3,4,2,3,4,5,0,4,3,3,2,2,1,3,3],\"rators\":[\"5Zq3aGdvh4LHBvnJL\",\"n5wubRfh6zh8QRymN\",\"yjtdwc2AC4jA2RWtn\",\"6BpBQnSGhzgvhXrEy\",\"FJsvM5yqKuK9yMk9P\",\"RE4Mm9T6Q9uygAxGS\",\"s5zzhdSQFAa9PbYur\",\"CJnuSjyCBMTbTiibD\",\"SjY6a2v6jMjGraDKz\",\"yuLxi2qBJvMnwgdgJ\",\"jEGq9ycYvdYvp3cvC\",\"nB2zvS7Cwaz58JyfP\",\"yFjWRGvstfQYKfwfA\",\"8w3FaLndaj35EMwAT\",\"2NJuDfSqdrF8kHHni\",\"2innwjWqxJHo4eRGh\",\"pd8dm7sWLW9cY6dYW\",\"7Nz3GAqN3SMgSiyTT\",\"YER6iBcpJCuhgrYDN\",\"EWn8w8P3nNh7knatY\",\"pi76g3eRpnKrhee2a\",\"a777e8chPvJkY3tKa\",\"M4vq8ATaS9Jg5X7iP\",\"ze5uQfR4tkjbR96ei\",\"E3qTTy7ZJqFyok6a3\",\"gt72ofBStqvphGX6j\",\"h4jFmtbFn92eA4649\",\"mHT2bJb5SByfJ8yKS\",\"65dbBZynphj53nXqA\",\"veKWMS3ACmRWTjiLK\",\"aEm3Wvj2rFYRL8Lrb\",\"tAF9Gf6PiGogbZuWs\",\"QozwRCt9hwyqeFB5i\",\"a88kYE9Ht3zrfYuGW\",\"Rkx7iZDae2cxstbBT\",\"GJMDLcqB498dLie9L\",\"oH7uJsBnZv9b2mHMS\",\"YLuJ7h27mr2GMcMt6\",\"xrXEfMcqwo2EyuBaE\",\"rC7kdm3SsSX9udEQk\",\"FrQHRxFML7tY6Lft8\",\"4Xv87xmdSnpYhi8hz\",\"buX4mCQhtXCfBjeno\",\"f8QwyrF6DLggnhE6P\",\"kp2ZbCewZJAbfd7xv\",\"iCr5TEH8Xm3qRBnXW\",\"hhSKYujojYnHiKFy7\",\"ffB8T76Ye9ygL6QZZ\",\"Ac6u9uxPiFD5D8tfr\",\"RkWxtC9EdPNiQ9sTC\",\"DWDRyWp4f2ph7FtxA\",\"eFjGhq7C7bBKXjT6X\",\"bXaGdBM8FBLHf7N6Y\",\"hf4j58METWajduNSE\",\"ccHAPAfdET3cnyPaG\",\"bX6tpTCjwoi6XMMbK\",\"ZcJm2kuqJnN3CXFaR\",\"EBTrwJbNx8XkRnmNc\",\"pGh7WykiPe26fHJYv\",\"Es4eX2stRpyoXeC7f\",\"xn7uGNKeAwPEkP9oA\",\"hseQSt2EJ5uvb2pQv\",\"u9cRf5kvtpRB5ffB3\",\"iTAom24zPcyLmoKEN\",\"aHZm9tzs76uH4sHSc\",\"mDWNyaaQ9hvPCRzSd\",\"QRv96jmNaYsWkxQEG\",\"PH32cNxBjrK4a28sn\",\"8BJyXvRWcrvN3nttS\",\"TtrXnGzi9MyhLvWiz\",\"DPi9QGLctq2y76KuE\",\"5GiG3e7Mh2raQXpbA\",\"tPurSbkdQsLLrGiB2\",\"WnogMFYXoyvmBmGkm\",\"s678Wirfor5uYL5T6\",\"jAKp3iwAnjny4foA5\"],\"total\":82,\"quality\":[5,4,5]},\"flags\":0},\"summary\":\"In this challenge, you have to implement an algorithm to establish if a given positive integer num is a Happy number, and how many steps of the algorithm are needed to establish it.\\n\\nYou have to repeatedly transform the given num into the sum of its squared digits:\\nIf after the transformation the new number is equal to 1, num is a Happy number and the algorith\",\"tags\":[\"algorithms\",\"numbers\",\"loops\",\"recursion\"],\"timestamp\":{\"$date\":1580483199567},\"title\":\"The Happy Function\",\"quality\":4.666666666666667,\"family\":[{\"_id\":\"KAkXmQFM4vPxnKo7P\",\"language\":\"cpp\"},{\"_id\":\"q5tAZPFbLzuERDybw\",\"language\":\"java\"},{\"_id\":\"NMCc4pcDx6d7hkvcu\",\"language\":\"javascript\"},{\"_id\":\"4hFDo2uytDJmvKMfG\",\"language\":\"python3\"},{\"_id\":\"xysoQkEHcuBCxBrZ6\",\"language\":\"ruby\"}]}}"]