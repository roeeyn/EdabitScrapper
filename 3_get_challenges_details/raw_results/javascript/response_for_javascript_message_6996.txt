a["{\"msg\":\"result\",\"id\":\"2240\",\"result\":{\"_id\":\"cHLjt2gv4vbguXm4x\",\"author\":\"David Newman\",\"authorId\":\"Po3v3dHCk6wYGKMwi\",\"code\":\"//class User {\\n    //user stuff goes here\\n//}\\n\\n//class DeathStar {\\n    //This class is now the ultimate power in this challenge.\\n    //I suggest you use it.\\n//}\",\"difficulty\":3.4705882352941178,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"AjXTdDm9FN7L2Wsux\",\"instructions\":\"Emperor Palpatine wants you to create a new login system for the Death Star. Gotta keep out those pesky rebel scum somehow. To that end, your login system must do a number of things.\\n\\n### New Users\\nFirstly, we need to be able to create a **new account** for any users attempting to register. However, since we don't want those silly Jedi-loving rebels being able to register, only users with the official imperial password `palpatineIsMyHomeboy` should be able to register.\\nEach new attempt to register a new account needs to either store or at least provide some information:\\n - The above passphrase\\n - The username\\n - The password (to be encrypted!)\\n - The user's rank\\n - The number of incorrect login attempts (initially, zero)\\n\\nUpon successfully creating a user, return \\\"User added!\\\". If the passphrase provided is incorrect, return \\\"You rebel scum!\\\". Otherwise, return \\\"Invalid account!\\\"\\n\\n### Login\\nNext, once the account is created, we need to be able to login into that account.\\nYou should be able to pass a username and password to the `DeathStar.login()` class method (see below for specific structure) and get either a \\\"Welcome back *username*\\\" or an \\\"Invalid login\\\". For each incorrect login, note the following section.\\n\\n### Locked Accounts\\nEach time a login fails, that account (if it exists) should keep track of the total number of failed logins. If that login fail number hits **4**, *any* login attempts on that account should return \\\"Account locked!\\\".\\n\\nEach time you log in *successfully*, reset that incorrect login number to zero!\\n\\n### Security\\nThis exercise requires private variables (see the resources tab if you need a refresher!)\\n\\nYou should *not* be able to access a \\\"password\\\" property on the User class from outside. That is, listing `DeathStar.users` should return usernames and ranks, but *that's it*. \\n\\nYou should only be able to access the users' list and the logged-in status if you're logged in. Otherwise, attempting to access either should just return \\\"Not logged in!\\\". \\n\\n### Class Structure\\n*(a.k.a., the bit you're probably actually looking for!)*\\n\\nThis exercise requires two classes. Here's a brief breakdown of what each requires:\\n\\n\\n**DeathStar:**\\n\\n    - Public variables:\\n        - None!\\n\\n    - Methods:\\n        - `addUser` (user,password,passphrase):\\n            - creates new instance of the User class *if* the above requirements in \\\"New users\\\" are met\\n\\n        - `login` (user,password):\\n            - if valid username, but too many failed logins:\\n                - return \\\"Account locked!\\\".\\n            - if valid username/password combo:\\n                - set login to true\\n                - reset this user's failed login attempts to 0\\n                - return \\\"Welcome back, <username>!\\\"\\n            - if invalid username/password combo:\\n                - set login to false\\n                - +1 to this user's failed login attemtps (if the user exists!)\\n\\n        - `logout`:\\n            - should set \\\"loggedIn\\\" to false.\\n\\n    - \\\"dynamic\\\" getter variables:\\n        - `loggedIn`:\\n            - should only return true if the user is logged in. In other words, you should *never* be able to read \\\"DeathStar.loggedIn == false\\\"! Otherwise, should return \\\"Not logged in!\\\".\\n\\n        - `userList`:\\n            - similarly, should *only* return the users if we're logged in. Otherwise, should return \\\"Not logged in!\\\".\\n\\n**User:**\\n\\n    - Private variables:\\n       - password (encrypted)\\n      - Number of incorrect logins\\n\\n    - Non-private ('public') variables:\\n        - `username`\\n        - `rank`\\n        - `locked` (was the account locked due to too many login attempts?)\\n\\n    - Methods:\\n        - isCorrectPassword(candidate):\\n            - should compare to the user's password. Remember that you *should not* be able to directly access user.password, so simply doing `if (user.password==candidate)` outside your User class should *not* work!\\n\\n### Notes\\n- There are some pretty huge security risks in this code. Can you spot any?\\n- For encrypting the password, use whatever method you want. The point is more that the password should never be publicly readable.\\n- If you're logged in (and thus the userList is accessible), note that it should *not* directly return the private `DeathStar.userList` variable (instead, it should return an array of `{username, rank}` objects). Can you think why?\",\"isFree\":false,\"isHidden\":false,\"lab\":\"//Test.assertEquals(actual, expected, message)\\n//Test.assertSimilar(actual, expected, message)\\nconsole.log('---Class structure tests:---')\\nconsole.log(`\\\\nFirst, let's make sure you included all the correct classes *and* their methods/public vars\\\\nDeathStar first`);\\nTest.assertEquals(typeof DeathStar,'function','Could not find a DeathStar ES6 class or constructor function! Did the Maw Installation shut down?');\\nconst dsStructure = new DeathStar();\\nTest.assertEquals(typeof dsStructure.login,'function','Cannot find login method for DeathStar!');\\nTest.assertEquals(typeof dsStructure.logout,'function','Cannot find logout method for DeathStar!');\\nTest.assertEquals(typeof dsStructure.addUser,'function','Cannot find logout method for DeathStar!');\\nTest.assertEquals(typeof dsStructure.loggedIn,'string','Your class does not seem to have a \\\"loggedIn\\\" status variable!');\\nTest.assertEquals(typeof dsStructure.userList,'string','The imperial user list records are inaccessible!');\\nTest.assertSimilar(Object.keys(dsStructure),[],'The DeathStar class should expose zero public properties.')\\n\\n\\nconsole.log(`\\\\n---\\\\nNow, let's check the User class:`)\\nTest.assertEquals(typeof User,'function','Could not find a User ES6 class or constructor function! Are the Imperial Academies still recruiting?');\\nconst dsTestUser= new User('piett','abc123','admiral');\\nTest.assertEquals(dsTestUser.username,'piett','Your User class does not seem to store or expose a username property!');\\nTest.assertEquals(dsTestUser.rank,'admiral','Your User class does not seem to store or expose a rank property!');\\nTest.assertEquals(typeof dsTestUser.isCorrectPassword,'function','How are we supposed to validate passwords without an \\\"isCorrectPassword\\\" method?');\\nTest.assertSimilar(Object.keys(dsTestUser),['username','rank','locked'],'The User class should expose three public properties.')\\n\\nconsole.log('\\\\n\\\\n---Account creation tests:---')\\n\\nconst DS1 = new DeathStar();\\n\\nconsole.log(`\\\\n\\\\nWe've created a new DeathStar instance. Let's try adding some users:`)\\n\\nTest.assertEquals(DS1.addUser('Luke Skywallker','yoda123','UseTheForce','Grand Master'),'You rebel scum!',`We shouldn't be allowing Luke Skywalker to register!`);\\nTest.assertEquals(DS1.addUser('Firmus Piett','abc123','palpatineIsMyHomeboy','Admiral'),'User added!',`Piett should be able to register!`);\\nTest.assertEquals(DS1.addUser('Kendal Ozzel','ghj567','palpatineIsMyHomeboy','Admiral'),'User added!',`Ozzel's stupid, but he should still be able to register!`);\\n\\nTest.assertEquals(DS1.userList,'Not logged in!',`Should not be able to view users without logging in first.`);\\nTest.assertEquals(DS1.loggedIn,'Not logged in!',`Should not be able to view loggedIn variable explicitly without logging in.`);\\n\\nconsole.log('\\\\n---\\\\n---Login tests:---')\\n\\nconsole.log(`\\\\n---\\\\nNow let's try some logins:`)\\n//login fails\\nTest.assertEquals(DS1.login('Yoda','theForce'),'Invalid login!',`Incorrect logins should not work.`);\\n\\n//logins with wrong password, multiple times:\\nTest.assertEquals(DS1.login('Kendal Ozzel','hothCmdr'),'Invalid login!',`Incorrect logins should not work (even if the account exists!)`);\\n\\n//No, Ozzel, spamming the same username/password will not work.\\nDS1.login('Kendal Ozzel','hothCmdr');\\nDS1.login('Kendal Ozzel','hothCmdr');\\nDS1.login('Kendal Ozzel','hothCmdr');\\nTest.assertEquals(DS1.login('Kendal Ozzel','ghj567'),'Account locked!',`Supplying the wrong password 4+ times should lock the account, even *if* the correct password is then supplied!`);\\n\\nTest.assertEquals(DS1.login('Firmus Piett','abc123'),'Welcome back, Firmus Piett!',`Correct login credentials should work.`);\\n\\n// Test.assertEquals(DS1.userList,'Not logged in!',`Should not be able to view users without logging in first.`);\\n\\nconsole.log('\\\\n\\\\n---Sensitive info tests:---')\\n\\nTest.assertEquals(DS1.loggedIn,true,`After logging in, we should... be logged in.`);\\n\\nTest.assertSimilar(DS1.userList,[{ username: 'Firmus Piett', rank: 'Admiral' }, { username: 'Kendal Ozzel', rank: 'Admiral' }],'User list should lists all users and their ranks')\",\"language\":\"javascript\",\"quality\":0,\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,3,4,4,2,5,3,1,4,5,5,3,5],\"quality\":[],\"rators\":[\"Po3v3dHCk6wYGKMwi\",\"xoR3u8pfR3vWbrte3\",\"YLTZRjM78Wi9J9Re4\",\"3nt4WsRt2vQNrARCs\",\"c7uBxu2rgY77H5d79\",\"yjtdwc2AC4jA2RWtn\",\"qWZLE2s7aRDQsnZ4p\",\"y2cf8jaBdN5nBdXpa\",\"CtonpEZSnh7ZcR4wa\",\"sNcDN3s3rH9wcNg5n\",\"LrcMEPYSk5Mfcrf25\",\"xfN4K7Z5inrN4ZNk3\"],\"total\":14},\"flags\":0},\"summary\":\"Emperor Palpatine wants you to create a new login system for the Death Star. Gotta keep out those pesky rebel scum somehow. To that end, your login system must do a number of things.\\n\\nNew Users\\nFirstly, we need to be able to create a new account for any users attempting to register. However, since we don't want those silly Jedi-loving rebels being able to regi\",\"tags\":[\"classes\",\"scope\"],\"timestamp\":{\"$date\":1610051376267},\"title\":\"Login System (Private Variables)\",\"family\":[{\"_id\":\"cHLjt2gv4vbguXm4x\",\"language\":\"javascript\"}]}}"]