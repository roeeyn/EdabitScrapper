a["{\"msg\":\"result\",\"id\":\"1132\",\"result\":{\"_id\":\"Np7R8F24PaqBShZc5\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"function colorPatternTimes(cols) {\\n\\t\\n}\",\"difficulty\":1.951048951048951,\"familyId\":\"TdtkwYojin8XhWunC\",\"instructions\":\"When coloring a striped pattern, you may start by coloring each square *sequentially*, meaning you spend time needing to *switch coloring pencils*.\\n\\nCreate a function where given an *array of colors* `cols`, return how long it takes to color the whole pattern. Note the following times:\\n\\n- It takes **1 second** to *switch between pencils*.\\n- It takes **2 seconds** to * color a square*.\\n\\nSee the example below for clarification.\\n\\n```\\ncolor_pattern_times([\\\"Red\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Red\\\"]) ➞ 14\\n\\n// There are 5 colors so it takes 2 seconds to color each one (2 x 5 = 10).\\n// You need to switch the pencils 4 times and it takes 1 second to switch (1 x 4 = 4).\\n// 10 + 4 = 14\\n```\\n\\n### Examples\\n```\\ncolorPatternTimes([\\\"Blue\\\"]) ➞ 2\\n\\ncolorPatternTimes([\\\"Red\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Blue\\\"]) ➞ 11\\n\\ncolorPatternTimes([\\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Red\\\", \\\"Red\\\"]) ➞ 13\\n```\\n\\n### Notes\\n- Only change coloring pencils if the next color is different to the color before it.\\n- Return a number in *seconds*.\",\"isHidden\":false,\"lab\":\"Test.assertEquals(colorPatternTimes([\\\"Red\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Green\\\", \\\"Green\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Green\\\", \\\"Red\\\", \\\"Red\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Blue\\\"]), 70)\\nTest.assertEquals(colorPatternTimes([\\\"Red\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Green\\\", \\\"Red\\\"]), 44)\\nTest.assertEquals(colorPatternTimes([\\\"Yellow\\\", \\\"Green\\\", \\\"Blue\\\"]), 8)\\nTest.assertEquals(colorPatternTimes([\\\"Green\\\", \\\"Green\\\", \\\"Red\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Red\\\", \\\"Green\\\", \\\"Red\\\", \\\"Green\\\"]), 27)\\nTest.assertEquals(colorPatternTimes([\\\"Red\\\"]), 2)\\nTest.assertEquals(colorPatternTimes([\\\"Red\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Green\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Red\\\"]), 30)\\nTest.assertEquals(colorPatternTimes([\\\"Green\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Red\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Green\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Green\\\", \\\"Green\\\", \\\"Blue\\\"]), 83)\\nTest.assertEquals(colorPatternTimes([\\\"Red\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Red\\\"]), 33)\\nTest.assertEquals(colorPatternTimes([\\\"Yellow\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Yellow\\\"]), 10)\\nTest.assertEquals(colorPatternTimes([\\\"Blue\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Green\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Green\\\", \\\"Blue\\\"]), 56)\\nTest.assertEquals(colorPatternTimes([\\\"Red\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Yellow\\\"]), 33)\\nTest.assertEquals(colorPatternTimes([\\\"Blue\\\", \\\"Red\\\", \\\"Red\\\"]), 7)\\nTest.assertEquals(colorPatternTimes([\\\"Red\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Green\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Green\\\", \\\"Red\\\", \\\"Green\\\", \\\"Red\\\", \\\"Green\\\", \\\"Red\\\", \\\"Red\\\", \\\"Green\\\", \\\"Red\\\", \\\"Red\\\", \\\"Green\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Red\\\"]), 83)\\nTest.assertEquals(colorPatternTimes([\\\"Yellow\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Blue\\\"]), 17)\\nTest.assertEquals(colorPatternTimes([\\\"Yellow\\\", \\\"Red\\\", \\\"Green\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Green\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Red\\\", \\\"Yellow\\\"]), 43)\\nTest.assertEquals(colorPatternTimes([\\\"Red\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Red\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Blue\\\"]), 78)\\nTest.assertEquals(colorPatternTimes([\\\"Yellow\\\", \\\"Red\\\", \\\"Green\\\"]), 8)\\nTest.assertEquals(colorPatternTimes([\\\"Green\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Green\\\", \\\"Red\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Red\\\"]), 59)\\nTest.assertEquals(colorPatternTimes([\\\"Yellow\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Red\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Blue\\\"]), 35)\\nTest.assertEquals(colorPatternTimes([\\\"Green\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Red\\\"]), 34)\\nTest.assertEquals(colorPatternTimes([\\\"Yellow\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Blue\\\"]), 10)\\nTest.assertEquals(colorPatternTimes([\\\"Green\\\", \\\"Red\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Red\\\", \\\"Red\\\", \\\"Green\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Yellow\\\"]), 82)\\nTest.assertEquals(colorPatternTimes([\\\"Red\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Blue\\\"]), 20)\\nTest.assertEquals(colorPatternTimes([\\\"Green\\\", \\\"Red\\\", \\\"Green\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Green\\\", \\\"Red\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Yellow\\\"]), 37)\\nTest.assertEquals(colorPatternTimes([\\\"Yellow\\\", \\\"Red\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Green\\\", \\\"Red\\\"]), 30)\\nTest.assertEquals(colorPatternTimes([\\\"Yellow\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Green\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Green\\\", \\\"Green\\\"]), 37)\\nTest.assertEquals(colorPatternTimes([\\\"Green\\\", \\\"Green\\\", \\\"Red\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Green\\\"]), 30)\\nTest.assertEquals(colorPatternTimes([\\\"Yellow\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Red\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Blue\\\"]), 46)\\nTest.assertEquals(colorPatternTimes([\\\"Red\\\", \\\"Green\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Green\\\", \\\"Green\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Blue\\\"]), 40)\\nTest.assertEquals(colorPatternTimes([\\\"Yellow\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Red\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Green\\\"]), 56)\\nTest.assertEquals(colorPatternTimes([\\\"Green\\\", \\\"Green\\\", \\\"Red\\\", \\\"Green\\\", \\\"Blue\\\"]), 13)\\nTest.assertEquals(colorPatternTimes([\\\"Red\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Red\\\", \\\"Red\\\", \\\"Green\\\", \\\"Blue\\\"]), 27)\\nTest.assertEquals(colorPatternTimes([\\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Red\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Green\\\"]), 45)\\nTest.assertEquals(colorPatternTimes([\\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Yellow\\\"]), 45)\\nTest.assertEquals(colorPatternTimes([\\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Yellow\\\"]), 25)\\nTest.assertEquals(colorPatternTimes([\\\"Green\\\", \\\"Red\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\"]), 15)\\nTest.assertEquals(colorPatternTimes([\\\"Red\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Yellow\\\"]), 22)\\nTest.assertEquals(colorPatternTimes([\\\"Blue\\\", \\\"Red\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Red\\\", \\\"Red\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Green\\\"]), 64)\\nTest.assertEquals(colorPatternTimes([\\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Yellow\\\"]), 9)\\nTest.assertEquals(colorPatternTimes([\\\"Red\\\", \\\"Red\\\", \\\"Blue\\\"]), 7)\\nTest.assertEquals(colorPatternTimes([\\\"Green\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Blue\\\"]), 32)\\nTest.assertEquals(colorPatternTimes([\\\"Green\\\", \\\"Red\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Green\\\"]), 20)\\nTest.assertEquals(colorPatternTimes([\\\"Green\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Red\\\", \\\"Red\\\", \\\"Green\\\", \\\"Green\\\"]), 76)\\nTest.assertEquals(colorPatternTimes([\\\"Blue\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Green\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Red\\\"]), 75)\\nTest.assertEquals(colorPatternTimes([\\\"Blue\\\", \\\"Red\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Red\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Red\\\"]), 81)\\nTest.assertEquals(colorPatternTimes([\\\"Yellow\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Green\\\", \\\"Red\\\"]), 15)\\nTest.assertEquals(colorPatternTimes([\\\"Blue\\\", \\\"Red\\\", \\\"Yellow\\\"]), 8)\\nTest.assertEquals(colorPatternTimes([\\\"Blue\\\", \\\"Red\\\", \\\"Red\\\", \\\"Green\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Red\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Yellow\\\"]), 50)\\nTest.assertEquals(colorPatternTimes([\\\"Yellow\\\", \\\"Green\\\", \\\"Red\\\", \\\"Green\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Green\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Red\\\", \\\"Green\\\", \\\"Red\\\"]), 71)\\nTest.assertEquals(colorPatternTimes([\\\"Green\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Red\\\", \\\"Red\\\", \\\"Red\\\", \\\"Red\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Red\\\", \\\"Red\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Yellow\\\"]), 52)\\nTest.assertEquals(colorPatternTimes([\\\"Yellow\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Yellow\\\"]), 47)\\nTest.assertEquals(colorPatternTimes([\\\"Yellow\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Green\\\", \\\"Green\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Green\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Red\\\"]), 53)\\nTest.assertEquals(colorPatternTimes([\\\"Green\\\", \\\"Yellow\\\", \\\"Yellow\\\"]), 7)\\nTest.assertEquals(colorPatternTimes([\\\"Blue\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Green\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Red\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Red\\\"]), 54)\\nTest.assertEquals(colorPatternTimes([\\\"Green\\\"]), 2)\\nTest.assertEquals(colorPatternTimes([\\\"Green\\\", \\\"Blue\\\"]), 5)\\nTest.assertEquals(colorPatternTimes([\\\"Green\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Red\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Red\\\", \\\"Red\\\", \\\"Red\\\", \\\"Red\\\"]), 56)\\nTest.assertEquals(colorPatternTimes([\\\"Blue\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Yellow\\\"]), 83)\\nTest.assertEquals(colorPatternTimes([\\\"Yellow\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Red\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Red\\\", \\\"Red\\\", \\\"Yellow\\\"]), 58)\\nTest.assertEquals(colorPatternTimes([\\\"Blue\\\", \\\"Red\\\"]), 5)\\nTest.assertEquals(colorPatternTimes([\\\"Blue\\\", \\\"Red\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Green\\\", \\\"Green\\\"]), 18)\\nTest.assertEquals(colorPatternTimes([\\\"Red\\\", \\\"Green\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Red\\\", \\\"Red\\\"]), 72)\\nTest.assertEquals(colorPatternTimes([\\\"Yellow\\\", \\\"Green\\\", \\\"Green\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Red\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Yellow\\\"]), 59)\\nTest.assertEquals(colorPatternTimes([\\\"Blue\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Green\\\", \\\"Red\\\"]), 25)\\nTest.assertEquals(colorPatternTimes([\\\"Yellow\\\"]), 2)\\nTest.assertEquals(colorPatternTimes([\\\"Green\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Green\\\", \\\"Green\\\", \\\"Red\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Red\\\"]), 39)\\nTest.assertEquals(colorPatternTimes([\\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\"]), 6)\\nTest.assertEquals(colorPatternTimes([\\\"Green\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Red\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Green\\\", \\\"Blue\\\"]), 59)\\nTest.assertEquals(colorPatternTimes([\\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\"]), 8)\\nTest.assertEquals(colorPatternTimes([\\\"Red\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Red\\\", \\\"Red\\\", \\\"Green\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Yellow\\\"]), 85)\",\"language\":\"javascript\",\"summary\":\"When coloring a striped pattern, you may start by coloring each square sequentially, meaning you spend time needing to switch coloring pencils.\\n\\nCreate a function where given an array of colors cols, return how long it takes to color the whole pattern. Note the following times:\\n\\nIt takes 1 second to switch between pencils.\\nIt takes 2 seconds to * color a squar\",\"tags\":[\"arrays\",\"algorithms\"],\"timestamp\":{\"$date\":1581554636100},\"title\":\"Switching Between Pencils\",\"stats\":{\"completed\":{\"total\":315,\"ratings\":[2,2,2,2,2,1,2,0,3,1,2,2,1,2,2,2,0,2,2,2,2,2,2,2,1,2,2,2,2,0,2,3,1,3,0,3,2,2,2,0,1,2,1,2,1,2,1,3,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,1,2,1,2,1,2,1,2,3,2,1,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,5,3,3,2,2,2,3,1,2,3,2,3,2,1,2,2,3,2,3,2,0,3,2,2,2,2,2,2,3,2,2,1,1,2,5,1,3,3,2,2,2,2,2,0,3,1,2,3,2,2,1,2,2,3,2,2,2,0,1,1,3,2,3,3,2,3,2,2,2,2,1,2,3,2,2,1,1,2,1,2,2,2,3,3,2,2,2,0,0,2,2,3,1,3,2,3,0,1,2,2,3,3,3,1,3,1,3,3,2,2,0,2,3,1,2,1,2,1,3,0,3,3,2,2,0,3,2,3,3,3,3,2,3,1,2,2,3,2,2,3,1,1,3,0,2,2,2,2,1,3,3,3,3,2,3,1,1,2,1,1,1,3,2,3,2,1,3,1,2,3,3,1,2,2,2,2,1,1,3,3,1,2,2,2,1,2,3,3,2],\"rators\":[\"yjtdwc2AC4jA2RWtn\",\"jqbm8L6895JgAtZ6H\",\"s5zzhdSQFAa9PbYur\",\"yFGcFfNsHt2Z4G5a9\",\"n5wubRfh6zh8QRymN\",\"6BpBQnSGhzgvhXrEy\",\"FJsvM5yqKuK9yMk9P\",\"5Zq3aGdvh4LHBvnJL\",\"AasGs8AeX9Lcb9xJn\",\"Y9Nz9yafaibz54W4o\",\"QnPD4Sv6W4LHc2Qng\",\"ZRw4JrGymiv2zsSAh\",\"mHaHudYExvi45DSRf\",\"RE4Mm9T6Q9uygAxGS\",\"mHT2bJb5SByfJ8yKS\",\"YdRHMewLR8AZEzkd3\",\"pi76g3eRpnKrhee2a\",\"EWn8w8P3nNh7knatY\",\"2innwjWqxJHo4eRGh\",\"pd8dm7sWLW9cY6dYW\",\"zgoq9MhrL2h75DAMA\",\"YER6iBcpJCuhgrYDN\",\"pANKrvL74wFf2mZX2\",\"uAS9uKs8KQmp8uhqn\",\"2FCEnAeZvpjYAznQQ\",\"2d6fufcQy4F3awkF3\",\"eomLS3wh6tQPN8jtH\",\"EjPLq3QSJdGQFJdgW\",\"E69SHKaxeBz77c6t6\",\"cp3X8hk8yNME7qoD9\",\"2ZFoLTxcCARhwc8xX\",\"E6DBfkTgHuPsDWdG8\",\"a777e8chPvJkY3tKa\",\"bX6tpTCjwoi6XMMbK\",\"8BuyZF7pzBbiJZJ2t\",\"acNgK5WkFEpLy4DHc\",\"vtHbevf2tHqe6mRxX\",\"nkH3HfJXLMNcBMM79\",\"65dbBZynphj53nXqA\",\"z5ebtimXwFFJdYxoa\",\"QRv96jmNaYsWkxQEG\",\"y7P28ovPYCvvuEnCG\",\"Wv9v7fHb8umujfg2j\",\"p5ZshR8zhTqmdhKDc\",\"LjoNTyGEMfBpMHHus\",\"Lzj3w7QjdzikynsGG\",\"eQXwk5zGckM8tCWYH\",\"buX4mCQhtXCfBjeno\",\"C9LKGu2g5hSijvDzA\",\"r7mZLgpQWzRiGddL5\",\"4ntYzGHHBgqf58udP\",\"nAmJEX7BkHLd9LsG2\",\"zP37vCnLYB8XRuE2t\",\"ij9YRJvZz6WbqcGXS\",\"STipuJs6kBvPqqsSE\",\"taW6XBDuFC9dbfQme\",\"7gZKfvwaeqsGKXMEN\",\"pLpcDC3EYx2DDQSdt\",\"PGCDJpQMN8Sjn9Gm6\",\"ZcqshY58sGEEvgeaq\",\"ttuGK7od8simjgmCJ\",\"jtzNdgDCzsekkdpxA\",\"tAF9Gf6PiGogbZuWs\",\"6kz7jjJS8W4tikYQT\",\"fA2DRWfFSHJ2s3Hh4\",\"aEm3Wvj2rFYRL8Lrb\",\"AFfw7cGg83uYk2Miy\",\"JsRTAwWK7Nikj4sKA\",\"2tCCFm5iefjrRSaxv\",\"kp2ZbCewZJAbfd7xv\",\"M4vq8ATaS9Jg5X7iP\",\"CNc6rmwhbxkxEhHAp\",\"BdvdJYwHZr7JpkHsn\",\"qWR7eXxBiNee22A5u\",\"g4NCSxxHqHCGMpWwT\",\"JZ5mQXCKxaFjrnGtq\",\"6i28riQA2TMvTboE9\",\"WSLPmXqJzRjtYkuwf\",\"zw7g7T8wE5R5CBhXr\",\"u9cRf5kvtpRB5ffB3\",\"nyh73Tr6GhqAat78g\",\"XzMxsyYj2ZeZ6Jmis\",\"evTTY9hwrtogaNxXn\",\"Ya3eHgs8x3unZRLpb\",\"Yp7uvStL97cC9fKkY\",\"d8JhF9zfpexkRnCea\",\"FGEeCTorXbX3WvjFW\",\"3Gf7ikLijfoxabiPY\",\"FwZCycooNrioAQRbd\",\"YSmLyP3eRhcFjJPzg\",\"srJ34BaybkQh3qRkM\",\"e9Cknxbx6o7Nb6REs\",\"2Qk2mFu9HBFzrB24i\",\"npp5hesJrst6ghKSM\",\"R9uaMzX2Y4ND8Cosm\",\"oKKPaXEjAtqqZSrhg\",\"CH53jGETBeJTummf3\",\"J7d397iB5GuWRAMfg\",\"8BJyXvRWcrvN3nttS\",\"PAnur8xLTthNL3epT\",\"NGvCPuMiAP3xrRLfB\",\"DPi9QGLctq2y76KuE\",\"rpNNPWzdFCc9TzKMz\",\"oDtGiNqDMHmhHE3J8\",\"nBJve5CzG6WAw7WFQ\",\"gXTAie79kiw28tx5u\",\"jyoLggHk8xQKZuoQC\",\"g9EiyfN7fCibJK53Z\",\"RoGGD5cpHb4ftdLDv\",\"FFdk54XypgFEWTtML\",\"iqmPb9JuJDgTFeR8Q\",\"MxWXoJZ4aMYvGgddK\",\"erzAf7RDcqN3aSg5t\",\"WnogMFYXoyvmBmGkm\",\"Swb2jDnZjviDXsQvB\",\"GGQDpkXJGa2eLMnKT\",\"TtrXnGzi9MyhLvWiz\",\"5nhmyqLy8M2Yn2HMR\",\"KQNRec88MkMcPeCYK\",\"6HKc35oCesbTnhtxA\",\"TPNpixcqTbRqJZcMc\",\"HYn6FhRjBtb6wjtJq\",\"k8rMJnaejG3dX4ute\",\"gFEpzrgWhzCZHeifj\",\"nWND4LmgZTftyB8sN\",\"wo4cpen33NYFHNca7\",\"RE8p6yXgeCarQENdf\",\"wCCgxTLa7C5m3hSCw\",\"Zr6LmjhFZtAFkdWZX\",\"248KGraG8CJNjfM7F\",\"mcrihjwHwDJcchknM\",\"SHT4Ddo9KJb4rf4Ms\",\"Hd4PCS6FkxZuotmAR\",\"2moKzqgvxpPtfr3FP\",\"MSGeXrkmJ5z39tdcS\",\"9jF4GhevpopMu8bfG\",\"qPA5JcrjhoaCsaomz\",\"xsDyJstYoBZRS8pJH\",\"9XnGoq9Tv6ut3zTtH\",\"nGNepz4Ty5x4rWTWu\",\"acHSYL6uQAgpgFMjp\",\"ffbpq6MoS3NdGYmkp\",\"PWgJYTuM784YyoywK\",\"PTo9qt93YqGvL8fCa\",\"mpLFbFKjY6u3nsDMv\",\"qaR8DnWrTk8Mus5Q2\",\"n4Y5EEGCjmrK99yrt\",\"rWEc6ebme5Wzfra63\",\"SCY9Qyb83vz8ePBrZ\",\"9iQPvj8xuB6nxCsbX\",\"J7EE5zLjbtBYGSnBa\",\"Hn3PNxpmB3EqiGBkB\",\"LwD3CyYSiBfg3mA4r\",\"86QC9rhMFHdcihrwa\",\"chzgiWZQt3ZHevcPD\",\"HpfaNWBYpnsQRAPQn\",\"NwPCDbFATdvXuxnxJ\",\"nw3rZ4ap8trEDtPRX\",\"uxKGACwmZ6FNZsMwE\",\"MjXggjYvHrhripsFp\",\"CdXigydGTBLgA577m\",\"7ZdRf8etRHw5qmi6G\",\"5nHtgdY8F2FbAMawq\",\"ipTmetLBmD4M5XhRs\",\"m86y4gi8hMzGz8js7\",\"mq8cTrAksEh6r8XYx\",\"vTbzkter2ic7ZqRsm\",\"ocABfJ5uLkpL8KRqY\",\"KqqG9rAWaMZBdqknc\",\"jnyub52Fi79drGvow\",\"5aPQMZo2y8ALh9Pjb\",\"aqzWajZcBZtTiyTqK\",\"8s5Bdrn7RTga7DL6x\",\"XT23a68TjWwNE7Qko\",\"3WtHp4MBzciz4AE8M\",\"G6df9Sn3WttS3gHRN\",\"pxgAHHB8hNEegCYXm\",\"Q7Yxda7dqKeYPs2Db\",\"ftWhqHv5SotzBPaEh\",\"t2kzWHAZgjzAuh22a\",\"DRjizBEb8gyEKNqxW\",\"GNzgcddT6kuqwCWo5\",\"g5txYGWqRNSrS7MED\",\"DCsTtqHLNWLBBqS8r\",\"6ga8n8Cpm7XBG2Nff\",\"QBSSo4msY4GJNLdxJ\",\"DToPSbMgnnzezSrrH\",\"PT5pu7kJsgp9TDNGv\",\"2sLmHo7G2irSyrDB7\",\"Sk9g5oKwTJsPS9xHB\",\"eWdtDCeyzhMo58uiC\",\"kZZ3wKv5oHDwpmfGG\",\"4WYjScmBWK9eXRzvd\",\"CHvzhtXnv8HTbPQ56\",\"FnyrtotG3KtAFxsjS\",\"t7yejPdWgtoHmc3ww\",\"LCn6qz2GoMr5577Rd\",\"phcsmmiezZx2iHeGp\",\"5FWeZaz4PwgYgdkh4\",\"iXhN4L5nTNeiRR5rh\",\"C99LG4nBGkiDHrKWi\",\"Akq3fQcPRgPrWfsye\",\"vSPc7MGK5Poy8tSFp\",\"uP9SRKxpG4GjKkKq5\",\"ThaiAKWWDw2W4QfJh\",\"inbiBEY2tizFwkN84\",\"tWPe9djxyM4kYmsui\",\"RbBEqArJC6CJ3SqkL\",\"9Pzg45NEiRXhLtLh3\",\"kkrfdDGrzKebzxBqg\",\"sW5jMhqofmo3kFBou\",\"piocygrBMdcbDw4mL\",\"hdDFwYqeydr9EaK69\",\"GvYvPSwnLJeDPm4D2\",\"uv2ecc2rtxAdCbNgf\",\"2JAexEh2kD2CFqsL9\",\"d6w7S49nhKzCTWLp6\",\"7JCLyrrY6JYGpocac\",\"Cdd9kBE9tWmLwQMZn\",\"aAMkoofS9nvsPu2rv\",\"gA3SeTfamH5xZJ8jw\",\"RbEhNbgTB4p6qDAFj\",\"xhydn2FQMojxwNeT5\",\"JcxFuLRtAmNCwCCq3\",\"YiGsc4W95ZWXM2Ctp\",\"hRKqPNFYgY2wAE7Nx\",\"bwZsjaFME4peNvtsX\",\"xhrJ9BGQFaMJCEG6F\",\"WRz3By6pFNCJwDMhm\",\"MSMCTPZ72NPMAwuwx\",\"rpnhMdtcR9LHHbQSd\",\"vy5wfq3onB8syvPd3\",\"X4uHgKJWDjpQNzJh9\",\"GGprTwrkjuccmrQRg\",\"TP6a4o56BcZWfog3T\",\"Cc4MTDzF46xzM8oLi\",\"HsCoAbZ2Kajk9qyie\",\"GXH2DNCRdiGaGCPBy\",\"3mWdt4WziRCagwiAZ\",\"QuQA6XbCGe6soexaJ\",\"xPghmDrKaYhoPq7W2\",\"kbgLd8AT8oZJkKAfj\",\"FKuSrzCiYPXvKmgip\",\"GkiczysSkeutXRX77\",\"YS2vn4mFRcHprdtWC\",\"4LxNDXG8q3kQYarGr\",\"K2FjnvmX4vfkxGzQ9\",\"GnscAvB3cswLvRQ6Y\",\"nEgFABZ2hy859PqQm\",\"sN2JyFeJCwfwwHPwF\",\"rQSQAiXAczNs8S7EE\",\"CQnmxYbJ6Kjrhikpn\",\"D4b9gGLMJZAtakswd\",\"DwsvrqrsH4WFaLdgK\",\"Ya9pKG9rkWi4eZaG7\",\"f7X4ymW7D3Gfy8Top\",\"R6xKfvMpMLQ4jfB8A\",\"obYs9ieiGHXuLZs3s\",\"psdbt2PkjPv4qTwtr\",\"u6pWu9qefWtqaaTm5\",\"jB3uEpQ9vKfkkMkWZ\",\"vwTy7y6pLbJpL7aqQ\",\"93vDthpgqyr9anFvg\",\"NtNGy5xmhKLZYyg6s\",\"4PBqAAihzynX4Tnmr\",\"5QN8R22z43SrwoHDz\",\"bfYmA3LMvhSrK59cn\",\"QSdvRK5BXr4RqwsJn\",\"dE7dS6mJTvwxFrMCz\",\"649LDDhSKfmkPANRM\",\"PwNawJzMtQwAedELZ\",\"8qWJNTsbyLpqmwrme\",\"SSsorp4vDFisBGd8b\",\"jDf35NTiiRZ9DSRPc\",\"ZGbzpm9YvusRRaJs7\",\"wD2w3BJ5qsLki7Yx6\",\"H9M7QRxAQ9JMaWGYD\",\"hNEhHd8qodq4P3h2g\",\"KSeJBjriqrnAFH4k4\",\"C6PZFcjyQb94tXa2e\",\"eJHdjA5uq7ZrcRPhQ\",\"zM8jtpkKszqJNgWCS\",\"vic9SZ9qqj9WhRkbd\",\"FY7atTfxaahfAHtJv\",\"ob3vWqmpSw3mfqDag\",\"WcquTuKw6CcTsP4c9\",\"rD64PBPGsApnbhyiW\",\"HZF85Whi2nfxWTanD\",\"FchzDbqCN4nAyr5D6\",\"YP2xgMdiW7koFK66i\",\"hHH8LphmWfdKs4vjW\",\"KdwDfRmCdErJPLHRE\",\"7kENXQQ8ABiPGfBRD\",\"qw8ErNhhJcFQeQDNf\",\"8ef5PFBnYqtPJg96z\"],\"quality\":[5,5,5,2,5,5,5,5,5,5,5,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"quality\":4.785714285714286,\"family\":[{\"_id\":\"yoAg3hEhjMipjJKuu\",\"language\":\"cpp\"},{\"_id\":\"Np7R8F24PaqBShZc5\",\"language\":\"javascript\"},{\"_id\":\"7p4AqhGz9YgFbkpXh\",\"language\":\"php\"},{\"_id\":\"MFteyMABeuGaga3a7\",\"language\":\"python3\"},{\"_id\":\"RxuQ7j9YJatuc7eWh\",\"language\":\"ruby\"}]}}"]