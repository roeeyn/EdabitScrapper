a["{\"msg\":\"result\",\"id\":\"1868\",\"result\":{\"_id\":\"YYr4WQPJuCCiN6wLT\",\"archived\":false,\"author\":\"Pustur\",\"authorId\":\"65dbBZynphj53nXqA\",\"code\":\"class Pagination {\\n  constructor(items, pageSize) {\\n    this.items;       // Holds the items array\\n    this.pageSize;    // Holds the size of each page\\n    this.totalPages;  // Holds the total number of pages\\n    this.currentPage; // Holds the current page number\\n  }\\n\\n  // Methods\\n  // Goes to the previous page\\n  prevPage() {}\\n\\n  // Goes to the next page\\n  nextPage() {}\\n\\n  // Goes to the first page\\n  firstPage() {}\\n\\n  // Goes to the last page\\n  lastPage() {}\\n\\n  // Goes to a page determined by the `page` argument\\n  goToPage(page) {}\\n\\n  // Returns the currently visible items as an array\\n  getVisibleItems() {}\\n}\",\"difficulty\":2.6785714285714284,\"editorId\":\"65dbBZynphj53nXqA\",\"familyId\":\"GLHh3qDt3itaWBkip\",\"instructions\":\"Your task is to create a `class` to handle paginated content in a website. A pagination is used to divide long lists of content in a series of pages.\\n\\n![Example](https://s3.amazonaws.com/edabit-challenges/persons_paginated.png \\\"Pagination\\\")\\n\\nThe pagination `class` will accept 2 parameters:\\n\\n1. **items** (default: `[]`): An `array` of contents to paginate.\\n\\n2. **pageSize** (default: `10`): The amount of items to show in each page.\\n\\nSo for example we could initialize our pagination like this:\\n```\\nconst alphabetArray = \\\"abcdefghijklmnopqrstuvwxyz\\\".split(\\\"\\\");\\n\\nconst p = new Pagination(alphabetArray, 4);\\n```\\n\\nAnd then use the method `getVisibleItems` to show the contents of the paginated array.\\n\\n```\\nconsole.log(p.getVisibleItems()); // [\\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"d\\\"]\\n```\\n\\nYou will have to implement various methods to go through the pages such as:\\n- `prevPage`\\n- `nextPage`\\n- `firstPage`\\n- `lastPage`\\n- `goToPage`\\n\\nHere's a continuation of the example above using `nextPage` and `lastPage`:\\n\\n```\\np.nextPage();\\n\\nconsole.log(p.getVisibleItems());\\n// [\\\"e\\\", \\\"f\\\", \\\"g\\\", \\\"h\\\"]\\n\\np.lastPage();\\n\\nconsole.log(p.getVisibleItems());\\n// [\\\"y\\\", \\\"z\\\"]\\n```\\n\\n### Notes\\n- You don't have to use ES6 `class` if you don't want to\\n- The second argument (`pageSize`) could be a `float`, in that case just convert it to an `int` (this is also the case for the `goToPage` method)\\n- The methods used to change page should be chainable, so you can call them one after the other like this: `p.nextPage().nextPage();`\\n- Please remove the comments I provided before publishing your solution.\",\"lab\":\"// Checking correct default values\\nconst defaultPagination = new Pagination();\\nTest.assertEquals(defaultPagination.pageSize, 10);\\nTest.assertEquals(defaultPagination.items.length, 0);\\nTest.assertEquals(Array.isArray(defaultPagination.items), true);\\n\\n// Checking correct handling of float numbers as pageSize\\n// REMOVED no more float tests\\n// Test.assertEquals((new Pagination(new Array(0), 8.8).pageSize), 8);\\n\\n// Checking correct amount of pages\\nTest.assertEquals(new Pagination(new Array( 0), 10).totalPages, 1);\\nTest.assertEquals(new Pagination(new Array( 1), 10).totalPages, 1);\\nTest.assertEquals(new Pagination(new Array(10), 10).totalPages, 1);\\nTest.assertEquals(new Pagination(new Array(11), 10).totalPages, 2);\\n\\n// Checking correct currentPage\\nTest.assertEquals((new Pagination(new Array( 0), 10)).currentPage, 1);\\nTest.assertEquals((new Pagination(new Array( 1), 10)).currentPage, 1);\\nTest.assertEquals((new Pagination(new Array(11), 10)).currentPage, 1);\\n\\n// Checking correct implementation of methods that change page\\nconst p1 = new Pagination(new Array(69), 5);\\nTest.assertEquals(p1.nextPage().currentPage,     2);\\nTest.assertEquals(p1.lastPage().currentPage,    14);\\nTest.assertEquals(p1.nextPage().currentPage,    14);\\nTest.assertEquals(p1.prevPage().currentPage,    13);\\nTest.assertEquals(p1.firstPage().currentPage,    1);\\nTest.assertEquals(p1.prevPage().currentPage,     1);\\nTest.assertEquals(p1.goToPage( 99).currentPage, 14);\\nTest.assertEquals(p1.goToPage(  4).currentPage,  4);\\n// REMOVED no more float tests\\n// Test.assertEquals(p1.goToPage(6.5).currentPage,  6);\\nTest.assertEquals(p1.goToPage(-99).currentPage,  1);\\n\\n// Checking correct visible items returned in various pages\\nconst ids = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\\nconst p2 = new Pagination(ids, 5);\\nTest.assertSimilar(p2.getVisibleItems(),            [0, 1, 2, 3, 4]);\\nTest.assertSimilar(p2.nextPage().getVisibleItems(), [5, 6, 7, 8, 9]);\\nTest.assertSimilar(p2.nextPage().getVisibleItems(), [10]);\",\"language\":\"javascript\",\"summary\":\"Your task is to create a class to handle paginated content in a website. A pagination is used to divide long lists of content in a series of pages.\\n\\nExample\\n\\nThe pagination class will accept 2 parameters:\\n\\nitems (default: []): An array of contents to paginate.\\n\\npageSize (default: 10): The amount of items to show in each page.\\n\\nSo for example we could initializ\",\"tags\":[\"math\",\"objects\",\"numbers\",\"classes\"],\"timestamp\":{\"$date\":1516312067202},\"title\":\"Pagination Class with OOP\",\"stats\":{\"completed\":{\"total\":153,\"ratings\":[1,1,1,1,1,3,1,2,3,2,1,1,2,0,3,3,5,3,4,2,3,5,3,3,4,3,4,3,2,4,2,2,2,2,3,2,3,5,3,3,2,3,1,0,3,2,2,2,5,2,2,3,3,1,2,4,4,3,3,2,3,2,2,2,4,2,2,2,3,3,3,2,4,2,3,3,3,4,2,1,4,4,4,2,4,4,2,4,2,2,3,5,4,3,3,2,3,2,4,2,2,4,2,2,3,2,3,4,2,3,2,2,4,3,3,4,4,0,2,2,3,2,2,3,4,3,4,3,2,2,3,2,4,2,2,4,2,3,4,3],\"rators\":[\"65dbBZynphj53nXqA\",\"E3bAbAjwFzekBoMGD\",\"hi7Hvtq2mJfkXEGF2\",\"eYaxKg5Tg2Nj5QGSL\",\"P75EiXQJnatWeEY6r\",\"c5FoJ26xo6Jer46Cv\",\"2JcsqFMTpgyLZWexN\",\"XHngE5iScvztMpnR2\",\"dR6ussAnMb5WYYHcr\",\"qrDiseLiCpsPF2KBE\",\"cfgCjcpqsmchcP9xC\",\"bKSDKsWxkPnfM3PAS\",\"FGEzkqfhkpmK3j7Y3\",\"ArsZxnPAy7HkhY4yH\",\"Zd6DKQnFcyN4bgHJQ\",\"Bk7G9LSSY2cPRTx8g\",\"JMh2AioMSNjckKsXf\",\"P3n7AZssmduD8FNFY\",\"YCSKEgb9tRemesui8\",\"oYyuMqRNe4FTx7YhM\",\"BTGAM3zbtnLzJX5GF\",\"wPmSLKkkPRJimQjqG\",\"thEsZ7N6X8qfZMbcv\",\"hr9rERhkPtGbbgqdT\",\"ZZA6JdLEBxHGozyWP\",\"uLEYr4HW8F9ZeHqCd\",\"D8sujcqLQTqMTtFwj\",\"As6iH28SJMXPJmSFK\",\"SDtZFL5NzAoCPofXk\",\"ak5aPiT6QWpmbnPzD\",\"X6AfcNwEHwDYKzLc7\",\"XcHCqYmeoqxDsoucx\",\"wkxYjg28PC4xdWH69\",\"e8ftyJ6nKRtZDwGWJ\",\"odxDYT8TBvzK75AEp\",\"wcjknenWdPRhrRScv\",\"DszZSuRTD7ynLoZch\",\"JcXaeRLDW85JgFLDN\",\"pzqYnbhq5PM6YSKpr\",\"YH6AJTA9snS38mPoP\",\"HhLGvPRCyHeforjRk\",\"XTCebLPQLaxTt8N7C\",\"Jgs7ogyWpWc5uHRnP\",\"54Ka62KytXRsrLPhZ\",\"NWkRRFmGjPoQBcriQ\",\"CfXgiJuq2KxqL7Y7r\",\"ZCsSNy5YtmEMvAhAQ\",\"4P7hfDhm9oCC2L5rg\",\"n5wubRfh6zh8QRymN\",\"3sgNkbJF7rve559S4\",\"kvST9EDNTTKKQcdH7\",\"BTDyduiRYDSm5LyeD\",\"9EreMnSbkHjRxHpJE\",\"sxwuHkMFu8H6LLEAy\",\"y6WnxpwryenyfWHST\",\"AZbpHy2Hsy2GRWtoE\",\"iqbET4LnvMk64vS3p\",\"6LpB6HcF7nGQeLogA\",\"6yxbKDuGvFF9NEuNy\",\"jECsJQHhBEDpMWYJc\",\"MgrmEXe3jBhFWy496\",\"MEYTCCcM3nWYmyDRs\",\"4fWjvhaWSB89EtbEZ\",\"XPJWZdqhdqrKHMCkp\",\"bNFi9NhvF22bsNJx3\",\"4itF2fjGR9Swc48Zp\",\"wm2wyZW7mpt6vY3qf\",\"fZsxvcfz8Fdskge3Y\",\"3YsBF3wYvGfE9jRhC\",\"ie45YgWtyg8n6WwAH\",\"yjtdwc2AC4jA2RWtn\",\"HQYShWLJt9rFtxWys\",\"XKi8iZXBCHCaebSHh\",\"Qa3vzE4H2GeAHmEcQ\",\"TgjcWxsTjar7snQx9\",\"tM4GaznrTPt225Y6R\",\"EWn8w8P3nNh7knatY\",\"mHT2bJb5SByfJ8yKS\",\"mrjNK8rS9CqstukL7\",\"46EqDiLEdJPtDFujt\",\"ob3vWqmpSw3mfqDag\",\"gGnDsJz5hr2t9MKCF\",\"c5EduxyLmBAwRX4nL\",\"nRht5DZA6YcH2kAo6\",\"fMGp72XG7rQYcdFqt\",\"t6bXCX76smm7B3bEN\",\"rWQHZFJ2RKMdyZpAf\",\"5HRPnrWvfDLAiEGFc\",\"ma3WKWgQX8eQyGiAu\",\"PMq4KbGXQ53dRTYag\",\"EAuL56kpyLytw4RcR\",\"2m4yEnbGoD5T7Dzb4\",\"pGXNHqbnhoiYjCAgn\",\"cRpaCxYRmGcN3Nsoj\",\"KcpfY4XZ7fNamyLd3\",\"DwnKHtXCkKhk2iv4W\",\"yFjWRGvstfQYKfwfA\",\"fxe5vvH6WnsXwDqYp\",\"dPM2Rk2iMkznyXNEt\",\"SxqAEMaYcE9Ps9eh6\",\"eFjGhq7C7bBKXjT6X\",\"FqpshF963WY3G8G7F\",\"GZGvYkdHBssXCdrae\",\"ze5uQfR4tkjbR96ei\",\"NRYNuaQhH6Hife3nf\",\"u37upKZSmCKTQvQqX\",\"Gosr8fhiPxmj6nr27\",\"qMxyysGPtGj2KcJBu\",\"sBcsrC5paZm9nxjot\",\"92rmC82RqtrQCSCh4\",\"5TaDhLHuqYCxyy96r\",\"N7fwDd5JRDsuX7EKa\",\"Repe5bxrans8rnY99\",\"h4jFmtbFn92eA4649\",\"Fihu6Nfanw5gAgXMK\",\"sNcDN3s3rH9wcNg5n\",\"gvKWJDu9G8wtrGH6e\",\"FniksaBZMvKrAmGPX\",\"QMq9dcvgpyNK6RAze\",\"rC7kdm3SsSX9udEQk\",\"kp2ZbCewZJAbfd7xv\",\"EjdZvCqodsWB59B7W\",\"4Xv87xmdSnpYhi8hz\",\"aEm3Wvj2rFYRL8Lrb\",\"nphNJCcuiQKh8bNHq\",\"uwiNW7F8XNv9Wzi4i\",\"weuRFS8mWbMtFYEAN\",\"bTXKg7WFmPJcEsdab\",\"Jva2cxpZC95fYp9nG\",\"iWtdGX9DDKmhu4W6o\",\"3kXfDCwKQZQCxtto2\",\"LtTpCzF8kt6Rdth4X\",\"zGRnQMxsk7RmQwuPc\",\"Po3v3dHCk6wYGKMwi\",\"DNxSie8o54gzdirzQ\",\"CNc6rmwhbxkxEhHAp\",\"c7uBxu2rgY77H5d79\",\"xfxkLoQsbZBonmBGp\",\"AasGs8AeX9Lcb9xJn\",\"CtonpEZSnh7ZcR4wa\",\"QfdntaH928PcXTRmR\",\"RKKuw76K7sRBMouKq\",\"Afnps7TJQuS9sipMb\",\"oDtGiNqDMHmhHE3J8\"],\"quality\":[4,5,4,4,5,5,5,5]},\"complaints\":{\"total\":0,\"reasons\":[],\"skippers\":[\"65dbBZynphj53nXqA\"]},\"instructions\":{\"score\":-12.299999999999999,\"voters\":[\"2apJ8YMTygw3TjPfc\",\"ARMcFvGNE8u93RdM4\"]},\"tests\":{\"score\":-5.3,\"voters\":[\"xDnSvcPkQM4RrhdFs\",\"wkxYjg28PC4xdWH69\"]},\"flags\":0},\"isHidden\":false,\"quality\":4.625,\"family\":[{\"_id\":\"YYr4WQPJuCCiN6wLT\",\"language\":\"javascript\"},{\"_id\":\"yPzfgnDsPWXwH7dMq\",\"language\":\"python3\"}]}}"]