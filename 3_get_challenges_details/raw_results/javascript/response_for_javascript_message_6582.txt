a["{\"msg\":\"result\",\"id\":\"2035\",\"result\":{\"_id\":\"7e3mGcRbxCXFz4aNH\",\"author\":\"Mubashir Hassan \",\"authorId\":\"T6iBEE2jp7f7iEF2P\",\"code\":\"function chocolatesParcel(nSmall, nBig, order) {\\n\\t\\n}\",\"difficulty\":2.857142857142857,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"TuEPA5jMBXpXwFhqG\",\"instructions\":\"Mubashir needs to assemble a parcel of **ordered** chocolates. He got two types of chocolates:\\n- **Small chocolates (2 grams each)**\\n- **Big chocolates (5 grams each)**\\n\\nCreate a function that takes three parameters: Number of small available chocolates `nSmall`, number of big chocolates available `nBig` and desired weight (in grams) of the final parcel `order`.\\n\\nThe function should return the **required number of small chocolates** to achieve the goal. The function should return `-1` if the goal cannot be achieved by any possible combinations of small and big chocolates.\\n\\n### Examples\\n```\\nchocolatesParcel(4, 1, 13) ➞ 4\\n// 4 small chocolates = 8 grams\\n// 1 big chocolate = 5 grams\\n// 8 + 5 = 13 grams\\n// Required number of small chocolates = 4\\n\\nchocolatesParcel(4, 1, 14) ➞ -1\\n// You can not make any combination to reach 14 grams.\\n\\nchocolatesParcel(2, 1, 7) ➞ 1\\n// 1 big chocolate = 5 grams\\n// 1 small chocolates = 2 grams\\n// 5 + 2 = 7 grams\\n// Required number of small chocolates = 1\\n```\\n\\n### Notes\\n- Maximize the use of big chocolates that are available to achieve the desired goal. And only then should you proceed to use the small chocolates.\\n- You can't break chocolates into small pieces.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assertEquals(chocolatesParcel(0, 1, 5), 0)\\nTest.assertEquals(chocolatesParcel(3, 1, 6), 3)\\nTest.assertEquals(chocolatesParcel(3, 0, 7), -1)\\nTest.assertEquals(chocolatesParcel(2, 1, 9), 2)\\nTest.assertEquals(chocolatesParcel(58, 156, 283), 4)\\nTest.assertEquals(chocolatesParcel(3, 1000, 5012), -1)\\nTest.assertEquals(chocolatesParcel(1, 1, 1), -1)\\nTest.assertEquals(chocolatesParcel(1, 1, 8), -1)\\nTest.assertEquals(chocolatesParcel(4, 1, 12), -1)\\nTest.assertEquals(chocolatesParcel(10, 400, 2004), 2)\",\"language\":\"javascript\",\"quality\":0,\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,1,2,3,2,4,4,3,4,2],\"quality\":[],\"rators\":[\"T6iBEE2jp7f7iEF2P\",\"M4vq8ATaS9Jg5X7iP\",\"RKKuw76K7sRBMouKq\",\"yjtdwc2AC4jA2RWtn\",\"9HNcduj8ZyZvmvmC9\",\"FJsvM5yqKuK9yMk9P\",\"hvTAyFPy4pJHdrYJX\",\"ShrXg4RHgnyFjzJ8w\",\"nkH3HfJXLMNcBMM79\"],\"total\":11},\"flags\":0},\"summary\":\"Mubashir needs to assemble a parcel of ordered chocolates. He got two types of chocolates:\\nSmall chocolates (2 grams each)\\nBig chocolates (5 grams each)\\n\\nCreate a function that takes three parameters: Number of small available chocolates nSmall, number of big chocolates available nBig and desired weight (in grams) of the final parcel order.\\n\\nThe function shoul\",\"tags\":[\"algorithms\",\"logic\",\"functional_programming\"],\"timestamp\":{\"$date\":1608636180227},\"title\":\"Chocolates Parcel\",\"family\":[{\"_id\":\"n75sfYJkJF2uiLaJv\",\"language\":\"cpp\"},{\"_id\":\"7e3mGcRbxCXFz4aNH\",\"language\":\"javascript\"},{\"_id\":\"KBmKcorkjbuXds6Jo\",\"language\":\"python3\"},{\"_id\":\"yQ3do3tyF93NNta9D\",\"language\":\"ruby\"}]}}"]