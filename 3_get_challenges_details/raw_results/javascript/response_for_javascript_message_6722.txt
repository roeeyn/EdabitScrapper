a["{\"msg\":\"result\",\"id\":\"2104\",\"result\":{\"_id\":\"yGvaYr3X8xHPxWRcb\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"function isWordChain(words) {\\n\\t\\n}\",\"difficulty\":2.9365079365079363,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"diGZd2RYkdGzWsCqK\",\"instructions\":\"Let's update our previous **word-chain** definition. In this 2.0 version, a **word-chain** is an array of words, where the next word is formed by either:\\n\\n1. Changing exactly **one** letter from the previous word.\\n2. Adding or subtracting **one** letter.\\n\\n### Examples\\n```\\nisWordChain([\\\"row\\\", \\\"crow\\\", \\\"crown\\\", \\\"brown\\\", \\\"brawn\\\"]) ➞ true\\n// add \\\"c\\\" to \\\"row\\\" to get \\\"crow\\\", \\\"n\\\" to get \\\"crown\\\", etc.\\n\\nisWordChain([\\\"flew\\\", \\\"flaw\\\", \\\"flan\\\", \\\"flat\\\", \\\"fat\\\", \\\"rat\\\", \\\"rot\\\", \\\"tot\\\"]) ➞ true\\n\\nisWordChain([\\\"meek\\\", \\\"meet\\\", \\\"meat\\\", \\\"teal\\\"]) ➞ false\\n// \\\"meat\\\" => \\\"teal\\\" changes 2 letters (can only change 1).\\n\\nisWordChain([\\\"run\\\", \\\"runny\\\", \\\"bunny\\\"]) ➞ false\\n// \\\"run\\\" => \\\"runny\\\" adds 2 letters (can only add 1).\\n```\\n\\n### Notes\\n- You can only do one (not both) for each word change.\\n- All words will be in lower-case.\",\"lab\":\"Test.assertEquals(isWordChain([\\\"row\\\", \\\"crow\\\", \\\"crown\\\", \\\"brown\\\", \\\"brawn\\\"]), true)\\nTest.assertEquals(isWordChain([\\\"flew\\\", \\\"flaw\\\", \\\"flan\\\", \\\"flat\\\", \\\"fat\\\", \\\"rat\\\", \\\"rot\\\", \\\"tot\\\"]), true)\\nTest.assertEquals(isWordChain([\\\"meek\\\", \\\"meet\\\", \\\"meat\\\", \\\"teal\\\"]), false)\\nTest.assertEquals(isWordChain([\\\"run\\\", \\\"runny\\\", \\\"bunny\\\"]), false)\\nTest.assertEquals(isWordChain([\\\"fun\\\", \\\"fund\\\", \\\"find\\\", \\\"bind\\\", \\\"wind\\\", \\\"wild\\\", \\\"wile\\\", \\\"wiles\\\"]), true)\\nTest.assertEquals(isWordChain([\\\"nut\\\", \\\"but\\\", \\\"bot\\\", \\\"boot\\\", \\\"loot\\\", \\\"look\\\", \\\"book\\\", \\\"brook\\\"]), true)\\nTest.assertEquals(isWordChain([\\\"some\\\", \\\"tome\\\", \\\"tame\\\", \\\"lame\\\", \\\"flame\\\", \\\"flamer\\\", \\\"blamer\\\", \\\"blamers\\\"]), true)\\nTest.assertEquals(isWordChain([\\\"a\\\", \\\"at\\\", \\\"hat\\\", \\\"that\\\", \\\"what\\\", \\\"flat\\\"]), false)\\nTest.assertEquals(isWordChain([\\\"link\\\", \\\"blink\\\", \\\"wink\\\", \\\"sink\\\"]), false)\",\"language\":\"javascript\",\"summary\":\"Let's update our previous word-chain definition. In this 2.0 version, a word-chain is an array of words, where the next word is formed by either:\\n\\nChanging exactly one letter from the previous word.\\nAdding or subtracting one letter.\\n\\nExamples\\nisWordChain([\\\"row\\\", \\\"crow\\\", \\\"crown\\\", \\\"brown\\\", \\\"brawn\\\"]) ➞ true\\n// add \\\"c\\\" to \\\"row\\\" to get \\\"crow\\\", \\\"n\\\" to get \\\"crown\\\", e\",\"tags\":[\"arrays\",\"strings\",\"validation\"],\"timestamp\":{\"$date\":1553891170975},\"title\":\"Word Chain 2.0\",\"stats\":{\"completed\":{\"total\":59,\"ratings\":[3,3,3,3,3,3,3,3,3,3,4,3,3,5,4,5,3,5,2,4,0,0,5,5,5,0,2,2,3,4,5,0,0,1,3,4,4,3,5,3,2,5,5,3,4,0,3,5,0,3,1,3,0,3,3,2,2,1,4,4,3,3,4],\"rators\":[\"mNMQvcxKSSvqqMYCH\",\"N8Z7kgKRhoS9aiYmw\",\"65dbBZynphj53nXqA\",\"bbbpNxM3hgGMCqMn8\",\"6XbwEXgskYHLL7Lu3\",\"rnsXDmJtoYR4EMwsn\",\"zrhBaJCLqAv9xGsEm\",\"2NJuDfSqdrF8kHHni\",\"8xuMMGF7fyQWL2fKH\",\"7swio9FFT8jEJXubj\",\"n5wubRfh6zh8QRymN\",\"kEqpxhSmh68q2fbRj\",\"6cF2nrD29Nn2AeKP7\",\"LZGCkqAzC8AfM45dq\",\"X9gzW6TkvYB4rbrx7\",\"rdNqeKKCwqmELuhvJ\",\"JC9tDKS6PXCK2viN6\",\"iqbET4LnvMk64vS3p\",\"qWZLE2s7aRDQsnZ4p\",\"utR5vCJTqGdYitCpP\",\"rSJGLYSXMuu3RWjun\",\"hN8ayTg3SFTh9Fh2x\",\"rgmhomEQqsnngdSJZ\",\"9eEmZhCHxdj2SRg9E\",\"TnPYNWivYyB2uNDSw\",\"yjtdwc2AC4jA2RWtn\",\"5Zq3aGdvh4LHBvnJL\",\"cRpaCxYRmGcN3Nsoj\",\"Lic3Bjssn2SpZsqKm\",\"ckMvGF5TAyCwcxJBm\",\"Bpaqx76LRB5Ky7xXy\",\"yQtGE2egvwYnNQSFc\",\"usi5g7gbYKruDSiKb\",\"EjPLq3QSJdGQFJdgW\",\"rkw7Bt6LG3cedyMrR\",\"AasGs8AeX9Lcb9xJn\",\"BBP9BE5mKHRzaRpJr\",\"YER6iBcpJCuhgrYDN\",\"gtbK6d8XpqHFiY37A\",\"uPPkQNHF68i3wTZ4m\",\"zsNp9fk9BGDBiHr4G\",\"u5d63NujAhP97RXex\",\"Hq4eNAgN4DKA4YtwR\",\"J7MuMht6WBfAhLtvA\",\"vewKwcMeGuk3p3MsN\",\"eQXwk5zGckM8tCWYH\",\"Kc3SDafimwpZWrATJ\",\"sBcsrC5paZm9nxjot\",\"aEm3Wvj2rFYRL8Lrb\",\"xMLCsZbeTFRpnXeZe\",\"bXaGdBM8FBLHf7N6Y\",\"a777e8chPvJkY3tKa\",\"DPi9QGLctq2y76KuE\",\"buX4mCQhtXCfBjeno\",\"8BJyXvRWcrvN3nttS\"],\"quality\":[5]},\"tests\":{\"score\":0,\"voters\":[\"mNMQvcxKSSvqqMYCH\"]},\"instructions\":{\"score\":0,\"voters\":[\"mNMQvcxKSSvqqMYCH\"]},\"flags\":0},\"isHidden\":false,\"quality\":5,\"family\":[{\"_id\":\"4aPh4ryS5CPihFojQ\",\"language\":\"cpp\"},{\"_id\":\"hbHJdMv4HubYs5TRv\",\"language\":\"java\"},{\"_id\":\"yGvaYr3X8xHPxWRcb\",\"language\":\"javascript\"},{\"_id\":\"eoK63mG5tJDu439nJ\",\"language\":\"python3\"},{\"_id\":\"X6aT5HiSpZ33mbkN5\",\"language\":\"ruby\"}]}}"]