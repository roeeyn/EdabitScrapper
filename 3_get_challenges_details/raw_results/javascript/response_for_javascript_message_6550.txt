a["{\"msg\":\"result\",\"id\":\"2020\",\"result\":{\"_id\":\"gH9RyFhkzSBTaA7PD\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"function bridges(s) {\\n\\t\\n}\",\"difficulty\":2.8421052631578947,\"quality\":0,\"familyId\":\"zc5bx2T2EvhLK7n95\",\"instructions\":\"Create a function that returns the count of all bridges in a two-dimensional grid.\\n\\nBridge **B** should be counted if:\\n\\n- It connects from one end of the grid to the one opposite to it.\\n- It is unobstructed.\\n\\n### Example\\n```\\n\\\"#########/#       #/#   #   #/#   #   #/#### ####/#   #   #/#   #   #/#       #/#########\\\"\\n```\\n\\nIn this case the number 4 is returned because, when unraveled, the string reveals four bridges that meet the requirements listed above as shown:\\n\\n```\\n#########/\\n#       #/\\n#   #   #/\\n#   #   #/\\n#### ####/\\n#   #   #/\\n#   #   #/\\n#       #/\\n#########\\n```\\n\\n### Notes\\n- Slashes `/` act as separators.\\n- Intersecting bridges **can still count**, as shown.\\n- **Vertical bridges** count as long as the requirements are met.\",\"isHidden\":false,\"lab\":\"Test.assertEquals(bridges(\\\"   ###   /    #    /    #    /#   #   #/#########/#   #   #/    #    /    #    /   ###   \\\"), 2)\\nTest.assertEquals(bridges(\\\"         /         /         /#########/#   #   #/#########/         /         /         \\\"), 2)\\nTest.assertEquals(bridges(\\\"#########/#       #/#   #   #/#   #   #/#### ####/#   #   #/#   #   #/#       #/#########\\\"), 4)\\nTest.assertEquals(bridges(\\\"# # # # #/ # # # # /# # # # #/ # # # # /# # # # #/ # # # # /# # # # #/ # # # # /# # # # #\\\"), 0)\\nTest.assertEquals(bridges(\\\"    #    /#########/#########/#########/#########/#########/#########/#########/ ####### \\\"), 8)\\nTest.assertEquals(bridges(\\\"#########/    #   #/ ########/    #   #/#########/#   #    /######## /#   #    /#########\\\"), 4)\\nTest.assertEquals(bridges(\\\"#########/#########/#########/#########/#########/#########/#########/#########/#########\\\"), 18)\\nTest.assertEquals(bridges(\\\"# # # # #/# # # # #/# # # # #/# # # # #/#########/# # # # #/# # # # #/# # # # #/# # # # #\\\"), 6)\\nTest.assertEquals(bridges(\\\"### #####/# # #   #/# # # ###/#   #    /#########/    #   #/### # # #/#   # # #/##### ###\\\"), 2)\\nTest.assertEquals(bridges(\\\"##     ##/##     ##/##     ##/##     ##/#########/##     ##/##     ##/##     ##/##     ##\\\"), 5)\",\"language\":\"javascript\",\"summary\":\"Create a function that returns the count of all bridges in a two-dimensional grid.\\n\\nBridge B should be counted if:\\n\\nIt connects from one end of the grid to the one opposite to it.\\nIt is unobstructed.\\n\\nExample\\n\\\"#########/#       #/#   #   #/#   #   #/#### ####/#   #   #/#   #   #/#       #/#########\\\"\\n\\nIn this case the number 4 is returned because, when unravele\",\"tags\":[\"strings\",\"loops\"],\"timestamp\":{\"$date\":1601319154022},\"title\":\"Broken Bridge II\",\"stats\":{\"completed\":{\"total\":15,\"ratings\":[2,2,2,2,2,2,3,3,2,3,2,3,4,3,4,4,5,3,3],\"quality\":[],\"rators\":[\"n5wubRfh6zh8QRymN\",\"tAF9Gf6PiGogbZuWs\",\"mHT2bJb5SByfJ8yKS\",\"yjtdwc2AC4jA2RWtn\",\"M4vq8ATaS9Jg5X7iP\",\"CNc6rmwhbxkxEhHAp\",\"LCn6qz2GoMr5577Rd\",\"srJ34BaybkQh3qRkM\",\"RKKuw76K7sRBMouKq\",\"s678Wirfor5uYL5T6\",\"Xk2g4CNFAnYcvxiSr\",\"8BJyXvRWcrvN3nttS\",\"buX4mCQhtXCfBjeno\",\"oDtGiNqDMHmhHE3J8\"]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"family\":[{\"_id\":\"6goaNCgXQLxCMW5AQ\",\"language\":\"cpp\"},{\"_id\":\"RGwqnBMmbDKJpZs2a\",\"language\":\"csharp\"},{\"_id\":\"gH9RyFhkzSBTaA7PD\",\"language\":\"javascript\"},{\"_id\":\"RBzzMdGPwnpSxCTCs\",\"language\":\"python3\"},{\"_id\":\"Gkz8qw2gcrnEyHT4v\",\"language\":\"ruby\"},{\"_id\":\"EHx2RCu6fcJe7rQuA\",\"language\":\"swift\"}]}}"]