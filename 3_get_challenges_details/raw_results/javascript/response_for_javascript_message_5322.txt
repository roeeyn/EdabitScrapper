a["{\"msg\":\"result\",\"id\":\"1411\",\"result\":{\"_id\":\"6k2QepzApP5zHejWE\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"function productEqualTarget(arr, target) {\\n\\t\\n}\",\"difficulty\":2.1458333333333335,\"familyId\":\"KPYbvgWvoB9w9TMFv\",\"instructions\":\"You are given an array of prime factors `arr` and a `target`. When each number in the array is raised to an appropriate power their product will be equal to the target.\\n\\nYour role is to return the exponents. All these arrays will have a **length of three**. Basically, it is three numbers whose **product is equal to challenge**. The only difference is what you are expected to return.\\n\\n### Examples\\n```\\nproductEqualTarget([2, 3, 5], 600) ➞ [3, 1, 2]\\n// Because 2^3*3^1*5^2 = 600\\n\\nproductEqualTarget([2, 3, 5], 720) ➞ [4, 2, 1]\\n// Because 2^4*3^2*5^1 = 720\\n```\\n\\n### Notes\\n- The exponents you will return are expected to replace the base in the array.\\n- Your returned values must be in the same order as the bases.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assertSimilar(productEqualTarget([2, 3, 5], 720), [4, 2, 1])\\nTest.assertSimilar(productEqualTarget([2, 3, 19], 1026), [1, 3, 1])\\nTest.assertSimilar(productEqualTarget([2, 3, 5], 600), [3, 1, 2])\\nTest.assertSimilar(productEqualTarget([2, 37, 149], 11026),[1, 1, 1])\\nTest.assertSimilar(productEqualTarget([2, 3, 5], 180), [2, 2, 1])\\nTest.assertSimilar(productEqualTarget([2, 5, 2711], 54220),[2, 1, 1])\",\"language\":\"javascript\",\"quality\":4.5,\"summary\":\"You are given an array of prime factors arr and a target. When each number in the array is raised to an appropriate power their product will be equal to the target.\\n\\nYour role is to return the exponents. All these arrays will have a length of three. Basically, it is three numbers whose product is equal to challenge. The only difference is what you are expected\",\"tags\":[\"algebra\",\"numbers\",\"math\"],\"timestamp\":{\"$date\":1607652257295},\"title\":\"Return Exponents of Prime Factors\",\"stats\":{\"completed\":{\"total\":46,\"ratings\":[2,2,2,2,2,0,2,2,0,2,2,1,2,3,3,3,3,0,2,2,3,2,2,3,2,2,2,2,2,3,3,3,1,3,3,2,2,0,2,3,1,2,5,3,0,3,5,2],\"quality\":[4,5],\"rators\":[\"K45zPJxsABuA3WSyj\",\"z5ebtimXwFFJdYxoa\",\"QRv96jmNaYsWkxQEG\",\"g4NCSxxHqHCGMpWwT\",\"Yp7uvStL97cC9fKkY\",\"mHT2bJb5SByfJ8yKS\",\"yjtdwc2AC4jA2RWtn\",\"m6qKkBY4aPWziyJTj\",\"buX4mCQhtXCfBjeno\",\"jkumHyXfMkhGcPgqC\",\"bX6tpTCjwoi6XMMbK\",\"k8rMJnaejG3dX4ute\",\"f3RAbWvE6uESq7KE5\",\"GCK8Zpht32cxeocpc\",\"YKzBZvnMTY9BmKn5c\",\"d2PuPtTWQac8SexuC\",\"xrXEfMcqwo2EyuBaE\",\"vGKxRcDYDsXzTQuEQ\",\"nRj5JPx9LjRksETAo\",\"sHDcTJTsrxM3QnJij\",\"7bGjFi4bxCMTnswYo\",\"YS2vn4mFRcHprdtWC\",\"CNc6rmwhbxkxEhHAp\",\"RKKuw76K7sRBMouKq\",\"ekQh3jzgGLsEMbKo3\",\"ZcJm2kuqJnN3CXFaR\",\"mDWNyaaQ9hvPCRzSd\",\"6ebrCvp8uXBsTuwrA\",\"wJTDDTE3TrmSXKP4d\",\"srJ34BaybkQh3qRkM\",\"ftXLsTaA7yHmhuEsY\",\"TtrXnGzi9MyhLvWiz\",\"Ya3eHgs8x3unZRLpb\",\"RE4Mm9T6Q9uygAxGS\",\"S56vJedmXM2J6DbbN\",\"wo4cpen33NYFHNca7\",\"RoGGD5cpHb4ftdLDv\",\"pi76g3eRpnKrhee2a\",\"8BJyXvRWcrvN3nttS\",\"dYBfwvnSrmirZrEMo\",\"tAF9Gf6PiGogbZuWs\",\"CHvzhtXnv8HTbPQ56\",\"oDtGiNqDMHmhHE3J8\",\"jyoLggHk8xQKZuoQC\",\"Dx8A7iYrufhAsHzTd\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"3HMWyxPa4ZR62pDAM\",\"language\":\"cpp\"},{\"_id\":\"E4eAyJLjgGssf7GFJ\",\"language\":\"csharp\"},{\"_id\":\"6k2QepzApP5zHejWE\",\"language\":\"javascript\"},{\"_id\":\"GYaZM9fH8wE2mvfCd\",\"language\":\"php\"},{\"_id\":\"MZujakkMLw3nLbp7s\",\"language\":\"python3\"},{\"_id\":\"ZkQ7qiX7hKnJ9Cm3Y\",\"language\":\"ruby\"},{\"_id\":\"5gkbprHsjAyFshLEx\",\"language\":\"swift\"}]}}"]