a["{\"msg\":\"result\",\"id\":\"1446\",\"result\":{\"_id\":\"tGehcXPRmrepQPGQW\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"function anagram(name, words) {\\n\\t\\n}\",\"difficulty\":2.16,\"familyId\":\"nGubb26XrCpCHau7S\",\"instructions\":\"Write a function that returns `true` if a given name can generate an array of words.\\n\\n### Examples\\n```\\nanagram(\\\"Justin Bieber\\\", [\\\"injures\\\", \\\"ebb\\\", \\\"it\\\"]) ➞ true\\n\\nanagram(\\\"Natalie Portman\\\", [\\\"ornamental\\\", \\\"pita\\\"]) ➞ true\\n\\nanagram(\\\"Chris Pratt\\\", [\\\"chirps\\\", \\\"rat\\\"]) ➞ false\\n// Not all letters are used \\n\\nanagram(\\\"Jeff Goldblum\\\", [\\\"jog\\\", \\\"meld\\\", \\\"bluffs\\\"]) ➞ false\\n// \\\"s\\\" does not exist in the original name\\n```\\n\\n### Notes\\n- Each letter in the name may only be used once.\\n- All letters in the name must be used.\",\"lab\":\"Test.assertEquals(anagram(\\\"Justin Bieber\\\", [\\\"injures\\\", \\\"ebb\\\", \\\"it\\\"]), true)\\nTest.assertEquals(anagram(\\\"Natalie Portman\\\", [\\\"ornamental\\\", \\\"pita\\\"]), true)\\nTest.assertEquals(anagram(\\\"Emma Watson\\\", [\\\"mows\\\", \\\"meant\\\", \\\"a\\\"]), true)\\nTest.assertEquals(anagram(\\\"Daniel Radcliffe\\\", [\\\"clarified\\\", \\\"elf\\\", \\\"and\\\"]), true)\\nTest.assertEquals(anagram(\\\"Tom Hiddleston\\\", [\\\"tenths\\\", \\\"mood\\\", \\\"lid\\\"]), true)\\nTest.assertEquals(anagram(\\\"Blake Lively\\\", [\\\"key\\\", \\\"veal\\\", \\\"bill\\\"]), true)\\nTest.assertEquals(anagram(\\\"Ryan Reynolds\\\", [\\\"yonder\\\", \\\"sly\\\", \\\"ran\\\"]), true)\\nTest.assertEquals(anagram(\\\"Kristen Stewart\\\", [\\\"trinkets\\\", \\\"war\\\", \\\"set\\\"]), true)\\nTest.assertEquals(anagram(\\\"Chris Pratt\\\", [\\\"chirps\\\", \\\"rat\\\"]), false)\\nTest.assertEquals(anagram(\\\"Jeff Goldblum\\\", [\\\"jog\\\", \\\"meld\\\", \\\"bluffs\\\"]), false)\\nTest.assertEquals(anagram(\\\"Taylor Swift\\\", [\\\"stratify\\\", \\\"ow\\\"]), false)\\nTest.assertEquals(anagram(\\\"Adam Levine\\\", [\\\"medieval\\\", \\\"man\\\"]), false)\\nTest.assertEquals(anagram(\\\"Blake Shelton\\\", [\\\"betoken\\\", \\\"all\\\", \\\"she\\\"]), false)\\nTest.assertEquals(anagram(\\\"Miley Cyrus\\\", [\\\"lyric\\\", \\\"my\\\", \\\"suer\\\"]), false)\\nTest.assertEquals(anagram(\\\"Matt Damon\\\", [\\\"madman\\\"]), false)\\nTest.assertEquals(anagram(\\\"Graham Norton\\\", [\\\"graham\\\", \\\"not\\\", \\\"or\\\"]), false)\\nTest.assertEquals(anagram(\\\"Graham Norton\\\", [\\\"graham\\\", \\\"not\\\", \\\"or\\\"]), false)\",\"language\":\"javascript\",\"summary\":\"Write a function that returns true if a given name can generate an array of words.\\n\\nExamples\\nanagram(\\\"Justin Bieber\\\", [\\\"injures\\\", \\\"ebb\\\", \\\"it\\\"]) ➞ true\\n\\nanagram(\\\"Natalie Portman\\\", [\\\"ornamental\\\", \\\"pita\\\"]) ➞ true\\n\\nanagram(\\\"Chris Pratt\\\", [\\\"chirps\\\", \\\"rat\\\"]) ➞ false\\n// Not all letters are used\\n\\nanagram(\\\"Jeff Goldblum\\\", [\\\"jog\\\", \\\"meld\\\", \\\"bluffs\\\"]) ➞ false\\n// \\\"s\\\" does\",\"tags\":[\"strings\",\"arrays\",\"validation\"],\"timestamp\":{\"$date\":1557457547870},\"title\":\"Generating Words from Names\",\"stats\":{\"completed\":{\"total\":121,\"ratings\":[2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,3,3,4,3,2,3,4,3,2,3,1,3,2,0,2,2,2,2,3,2,2,3,3,2,3,3,2,3,3,2,1,3,1,2,3,1,1,2,3,1,2,2,4,2,2,2,2,2,3,1,3,3,2,3,2,3,2,1,1,2,2,2,2,2,1,2,2,2,1,2,2,0,2,1,4,3,3,3,3,2,2,2,2,2,2],\"rators\":[\"mNMQvcxKSSvqqMYCH\",\"SDtZFL5NzAoCPofXk\",\"65dbBZynphj53nXqA\",\"Nu5Qkt74dbKak22wj\",\"WnbtNz3GX8DvzGQsK\",\"8xuMMGF7fyQWL2fKH\",\"Hz8mnq7xFJZKLymTh\",\"HhLGvPRCyHeforjRk\",\"DNENyt7pk2Ta7n2ER\",\"TMTH5LfMm9MrBFyEx\",\"n5wubRfh6zh8QRymN\",\"eomLS3wh6tQPN8jtH\",\"EjPLq3QSJdGQFJdgW\",\"CJnuSjyCBMTbTiibD\",\"yjtdwc2AC4jA2RWtn\",\"EWn8w8P3nNh7knatY\",\"5Zq3aGdvh4LHBvnJL\",\"pWnm7Rg4i3matapgd\",\"mHT2bJb5SByfJ8yKS\",\"DHwbkbzYNpmkSFT7u\",\"McGCLw5aWrGAXbxQq\",\"8EQA7ZcorGAnCtJie\",\"eQwJpaSYMHoicKefb\",\"2innwjWqxJHo4eRGh\",\"FJsvM5yqKuK9yMk9P\",\"4WgxcywfLRdxZ4gzP\",\"54Ka62KytXRsrLPhZ\",\"Y9Nz9yafaibz54W4o\",\"RjNmWYMdng36ANKYt\",\"EL4LzjTAxcCJFip9L\",\"6BpBQnSGhzgvhXrEy\",\"MEZNjeGd7APtvA3SL\",\"JXDbC5RArqTz6N7NC\",\"xMLCsZbeTFRpnXeZe\",\"m6QHp4jnrkxMkRxD9\",\"zFt5tvJjusuHyRvkw\",\"Gjusxf7tuPbSiz67J\",\"Gc2bmsof5vD2Hsgqv\",\"F7khcHj6tB2sX9zpf\",\"pi76g3eRpnKrhee2a\",\"a777e8chPvJkY3tKa\",\"62aZRXs5YgQQPQXhG\",\"42nmwQg324z7g2qNW\",\"po7SEHW9HQucdEKZ3\",\"uAS9uKs8KQmp8uhqn\",\"aXsdGkqnWnT2iERbM\",\"RE4Mm9T6Q9uygAxGS\",\"icLSh9atWPDExuuFN\",\"DEr9xXvconMu9cxM6\",\"b7GtDPC7j4bAmK4t9\",\"M4vq8ATaS9Jg5X7iP\",\"E8PjcSCd7SMeET8LR\",\"EjdwxzQcco5GvpyDT\",\"JX3z5Mx8p4KN8GLud\",\"8raviPK67KKxzQWcF\",\"n2rmkNNND7GWj3kCv\",\"r7mZLgpQWzRiGddL5\",\"ZcqshY58sGEEvgeaq\",\"s5tPKxgeMYmeeJn5h\",\"buX4mCQhtXCfBjeno\",\"DMSY2ytpaWM7wtXgj\",\"RRFsDNRaKW6h9tF3Y\",\"QRv96jmNaYsWkxQEG\",\"z7F8d8Ty9AQwSdqNi\",\"ttuGK7od8simjgmCJ\",\"PWNo2EM6SGyePFX3W\",\"aEm3Wvj2rFYRL8Lrb\",\"coRKjmGENNrKdbm4r\",\"vn6nR36mdfY8z2zKx\",\"Pq8vgwKk9RkFyXBxj\",\"AexdcfQufzNwHzZLw\",\"ZbhyRGXwCaASRnuke\",\"TsrZuZMf5e4dvaNdR\",\"tEiMjNpA7P7Mxs6ha\",\"xEWTHo66kNDKnKMs3\",\"sdYB52S5vTed7WeMX\",\"4Xv87xmdSnpYhi8hz\",\"acHSYL6uQAgpgFMjp\",\"tAF9Gf6PiGogbZuWs\",\"CiGDxPxGtknGbRND6\",\"CNc6rmwhbxkxEhHAp\",\"kp2ZbCewZJAbfd7xv\",\"8BJyXvRWcrvN3nttS\",\"p5ZshR8zhTqmdhKDc\",\"qWR7eXxBiNee22A5u\",\"x85b48MBrjnBk6syq\",\"bX6tpTCjwoi6XMMbK\",\"xn7uGNKeAwPEkP9oA\",\"vic9SZ9qqj9WhRkbd\",\"g4NCSxxHqHCGMpWwT\",\"uZrLKq6TRWgrjDJaW\",\"AFfw7cGg83uYk2Miy\",\"a3mLdCbHp2D6b2J5K\",\"srJ34BaybkQh3qRkM\",\"JsRTAwWK7Nikj4sKA\",\"s678Wirfor5uYL5T6\",\"RtPhDuwmvWNHiBxmG\",\"wJTDDTE3TrmSXKP4d\",\"NGvCPuMiAP3xrRLfB\",\"cosoYtzKo6pKgrTJZ\",\"DPi9QGLctq2y76KuE\",\"J7d397iB5GuWRAMfg\",\"oDtGiNqDMHmhHE3J8\",\"FGEeCTorXbX3WvjFW\",\"LCn6qz2GoMr5577Rd\",\"nkH3HfJXLMNcBMM79\",\"Ya3eHgs8x3unZRLpb\"],\"quality\":[4,5,5,5,5,4,4,5,3,5,5,5,5,5,5,5]},\"tests\":{\"score\":0,\"rators\":[\"mNMQvcxKSSvqqMYCH\"]},\"instructions\":{\"score\":0,\"rators\":[\"mNMQvcxKSSvqqMYCH\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.6875,\"family\":[{\"_id\":\"tm4Pf4SYbyXCDfqAj\",\"language\":\"cpp\"},{\"_id\":\"W8zoCps44yDxckivb\",\"language\":\"java\"},{\"_id\":\"tGehcXPRmrepQPGQW\",\"language\":\"javascript\"},{\"_id\":\"sDvjdcBrbHoXKvDsZ\",\"language\":\"python3\"},{\"_id\":\"89Cxq2xfjmcE5ai7F\",\"language\":\"ruby\"},{\"_id\":\"KfySx6Qk8yaERudRB\",\"language\":\"swift\"}]}}"]