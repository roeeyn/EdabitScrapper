a["{\"msg\":\"result\",\"id\":\"993\",\"result\":{\"_id\":\"dhRtmeFcjGcD7yvHA\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"function isValidDate(d, m, y) {\\n\\t\\n}\",\"difficulty\":1.6704545454545454,\"familyId\":\"4JYJNPcyhdkiutK9Z\",\"instructions\":\"Given the parameters day, month and year, return whether that date is **a valid date**.\\n\\n### Examples\\n```\\nisValidDate(35, 2, 2020) ➞ false\\n// February doesn't have 35 days.\\n\\nisValidDate(8, 3, 2020) ➞ true\\n// 8th March 2020 is a real date.\\n\\nisValidDate(31, 6, 1980) ➞ false\\n// June only has 30 days.\\n```\\n\\n### Notes\\nN/A\",\"isHidden\":false,\"lab\":\"Test.assertEquals(isValidDate(35, 2, 2020), false)\\nTest.assertEquals(isValidDate(8, 3, 2020), true)\\nTest.assertEquals(isValidDate(31, 6, 1980), false)\\nTest.assertEquals(isValidDate(27, 9, 1822), true)\\nTest.assertEquals(isValidDate(34, 7, 2008), false)\\nTest.assertEquals(isValidDate(32, 12, 1932), false)\\nTest.assertEquals(isValidDate(20, 3, 2019), true)\\nTest.assertEquals(isValidDate(28, 3, 2004), true)\\nTest.assertEquals(isValidDate(22, 5, 1962), true)\\nTest.assertEquals(isValidDate(21, 11, 1875), true)\\nTest.assertEquals(isValidDate(6, 12, 1982), true)\\nTest.assertEquals(isValidDate(6, 10, 1873), true)\\nTest.assertEquals(isValidDate(5, 6, 1852), true)\\nTest.assertEquals(isValidDate(21, 4, 1809), true)\\nTest.assertEquals(isValidDate(6, 15, 1969), false)\\nTest.assertEquals(isValidDate(6, 7, 1893), true)\\nTest.assertEquals(isValidDate(25, 4, 1826), true)\\nTest.assertEquals(isValidDate(16, 6, 1922), true)\\nTest.assertEquals(isValidDate(16, 10, 1803), true)\\nTest.assertEquals(isValidDate(5, 6, 1980), true)\\nTest.assertEquals(isValidDate(12, 15, 2018), false)\\nTest.assertEquals(isValidDate(35, 12, 1972), false)\\nTest.assertEquals(isValidDate(16, 11, 2028), true)\\nTest.assertEquals(isValidDate(2, 6, 1947), true)\\nTest.assertEquals(isValidDate(1, 10, 1904), true)\\nTest.assertEquals(isValidDate(8, 13, 1954), false)\\nTest.assertEquals(isValidDate(27, 14, 2012), false)\\nTest.assertEquals(isValidDate(3, 6, 2018), true)\\nTest.assertEquals(isValidDate(16, 3, 1992), true)\\nTest.assertEquals(isValidDate(33, 14, 1878), false)\\nTest.assertEquals(isValidDate(23, 10, 1841), true)\\nTest.assertEquals(isValidDate(3, 12, 1865), true)\\nTest.assertEquals(isValidDate(7, 14, 1901), false)\\nTest.assertEquals(isValidDate(16, 11, 2042), true)\\nTest.assertEquals(isValidDate(21, 1, 1837), true)\\nTest.assertEquals(isValidDate(14, 11, 1945), true)\\nTest.assertEquals(isValidDate(15, 9, 1913), true)\\nTest.assertEquals(isValidDate(29, 8, 1892), true)\\nTest.assertEquals(isValidDate(11, 15, 1936), false)\\nTest.assertEquals(isValidDate(28, 5, 1957), true)\\nTest.assertEquals(isValidDate(7, 4, 1864), true)\\nTest.assertEquals(isValidDate(24, 8, 2011), true)\\nTest.assertEquals(isValidDate(29, 15, 1930), false)\\nTest.assertEquals(isValidDate(2, 5, 1970), true)\\nTest.assertEquals(isValidDate(35, 6, 2013), false)\\nTest.assertEquals(isValidDate(31, 12, 1863), true)\\nTest.assertEquals(isValidDate(7, 14, 2026), false)\\nTest.assertEquals(isValidDate(8, 2, 1809), true)\\nTest.assertEquals(isValidDate(25, 4, 1996), true)\\nTest.assertEquals(isValidDate(29, 5, 1854), true)\\nTest.assertEquals(isValidDate(19, 7, 2034), true)\\nTest.assertEquals(isValidDate(21, 10, 1950), true)\\nTest.assertEquals(isValidDate(20, 10, 1926), true)\\nTest.assertEquals(isValidDate(29, 2, 2020), true)\\nTest.assertEquals(isValidDate(29, 2, 2019), false)\",\"language\":\"javascript\",\"summary\":\"Given the parameters day, month and year, return whether that date is a valid date.\\n\\nExamples\\nisValidDate(35, 2, 2020) ➞ false\\n// February doesn't have 35 days.\\n\\nisValidDate(8, 3, 2020) ➞ true\\n// 8th March 2020 is a real date.\\n\\nisValidDate(31, 6, 1980) ➞ false\\n// June only has 30 days.\\n\\nNotes\\nN/A\",\"tags\":[\"dates\",\"validation\"],\"timestamp\":{\"$date\":1590088909372},\"title\":\"Impossible Date\",\"stats\":{\"completed\":{\"total\":102,\"ratings\":[1,1,1,1,1,0,2,2,0,2,1,0,1,3,1,0,1,3,2,2,2,2,0,2,2,3,2,2,1,2,3,3,2,2,2,2,2,0,1,0,2,2,2,3,1,2,2,1,2,2,0,0,2,1,2,2,2,3,1,2,1,2,2,2,2,2,2,1,1,2,2,2,2,3,2,2,2,2,0,5,2,1,2,1,2,2,2,2],\"rators\":[\"PAzNgJF54C2mYPkR9\",\"65dbBZynphj53nXqA\",\"3HvEyeP8L3FmLWGmT\",\"yjtdwc2AC4jA2RWtn\",\"nsyKZukHcefzmin4g\",\"rS88rdPKC9zixaH4x\",\"PMtk6T2F9eK95g23d\",\"Futhw5mmnmpa7X2JZ\",\"bwfcS46K6nhmepeBj\",\"AasGs8AeX9Lcb9xJn\",\"zw7g7T8wE5R5CBhXr\",\"a777e8chPvJkY3tKa\",\"zycMZwKdawP5AsD5f\",\"GAf3F5syvSqjnfHMi\",\"YkNaSBYczRb5AMZ8N\",\"oyB4Wr4EeZnoDaa8B\",\"59y42QKjWmCPC3yvy\",\"qzzyGD7fCCDjX25za\",\"xges5rijESfvNfJ7w\",\"RqnvM77EkZZD9W2Q3\",\"G2wwuLBf5WET8MMYA\",\"Lzj3w7QjdzikynsGG\",\"GB3NHPPMge2CshbY6\",\"9XnGoq9Tv6ut3zTtH\",\"dDFJpK4pXCsQYuHmc\",\"RE4Mm9T6Q9uygAxGS\",\"mHT2bJb5SByfJ8yKS\",\"FJsvM5yqKuK9yMk9P\",\"Nb6LYPoQP6KJZt8mz\",\"SNiJRRosrmSWssLj4\",\"ij9YRJvZz6WbqcGXS\",\"pWJWQDhqzDSmfaFam\",\"cp3X8hk8yNME7qoD9\",\"hcm8sL8mNJTSfTdgE\",\"moe6ztrsNzFymC3A7\",\"2tCCFm5iefjrRSaxv\",\"vAh63eGRwkuJtoP8v\",\"vn6nR36mdfY8z2zKx\",\"8raviPK67KKxzQWcF\",\"n5wubRfh6zh8QRymN\",\"PGCDJpQMN8Sjn9Gm6\",\"QRv96jmNaYsWkxQEG\",\"nkH3HfJXLMNcBMM79\",\"7gZKfvwaeqsGKXMEN\",\"Ya3eHgs8x3unZRLpb\",\"8fzeiZ3TdubKBr6sw\",\"Po3v3dHCk6wYGKMwi\",\"pLpcDC3EYx2DDQSdt\",\"aEm3Wvj2rFYRL8Lrb\",\"mfYrBKwDr4hXSFuuN\",\"evTTY9hwrtogaNxXn\",\"jkumHyXfMkhGcPgqC\",\"kp2ZbCewZJAbfd7xv\",\"ttuGK7od8simjgmCJ\",\"DDokdbBKxv49M445o\",\"BdvdJYwHZr7JpkHsn\",\"75NY7vqimaATzRdAX\",\"ZcqshY58sGEEvgeaq\",\"jLSZdBseR2kfjt8dL\",\"pdGuqmMyeN4wZaWwv\",\"AFfw7cGg83uYk2Miy\",\"c7uBxu2rgY77H5d79\",\"2Ni3PzJAc5fAhqBkb\",\"Yp7uvStL97cC9fKkY\",\"u9cRf5kvtpRB5ffB3\",\"QPovrMXnz9qMLFrBJ\",\"3Gf7ikLijfoxabiPY\",\"srJ34BaybkQh3qRkM\",\"m6qKkBY4aPWziyJTj\",\"DPi9QGLctq2y76KuE\",\"mDWNyaaQ9hvPCRzSd\",\"ouabBNowvhzMnMKqa\",\"j5FSQCayX3By73CCw\",\"npp5hesJrst6ghKSM\",\"2Jw6T5H6QGNckqWDY\",\"zEt6FvmkSPSHvCyGF\",\"wJTDDTE3TrmSXKP4d\",\"2Qk2mFu9HBFzrB24i\",\"oDtGiNqDMHmhHE3J8\",\"RQwuHHy4rBgaQCLte\",\"NGvCPuMiAP3xrRLfB\",\"6BpBQnSGhzgvhXrEy\",\"8BJyXvRWcrvN3nttS\",\"wYzFdJPw8aXEY9dZM\",\"LwD3CyYSiBfg3mA4r\",\"nBJve5CzG6WAw7WFQ\",\"gXTAie79kiw28tx5u\",\"PH32cNxBjrK4a28sn\",\"jyoLggHk8xQKZuoQC\",\"TtrXnGzi9MyhLvWiz\",\"AMpQSjKsRqhCDyS2j\",\"eomLS3wh6tQPN8jtH\",\"bfYmA3LMvhSrK59cn\",\"z47JaNrQMgvuPx5HE\",\"brboBNGJv6LTLrjzE\",\"rGpPd6PvpzLaqps4g\",\"uxKGACwmZ6FNZsMwE\"],\"quality\":[5,5,5,5,5,5,5,5,5,5,5,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":1},\"quality\":5,\"family\":[{\"_id\":\"dhRtmeFcjGcD7yvHA\",\"language\":\"javascript\"},{\"_id\":\"HnrmZxpGRoPkmZsfs\",\"language\":\"python3\"},{\"_id\":\"N93ZGcukit9CbXjBL\",\"language\":\"ruby\"}]}}"]