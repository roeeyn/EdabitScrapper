a["{\"msg\":\"result\",\"id\":\"1751\",\"result\":{\"_id\":\"tQNGydfWqZueRgmDC\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"function canPatch(bridge, planks) {\\n\\t\\n}\",\"difficulty\":2.3846153846153846,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"YZKqQ4XQWESApXKrS\",\"instructions\":\"A broken bridge can be represented by `1`s and `0`s, where contiguous `0`s represent holes. You can walk across a bridge with a hole with a maximum width of 1, but any holes bigger than that you must fix first. For example, the bridge below is walkeable:\\n\\n```\\n[1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1]\\n```\\n\\nThis bridge is not:\\n\\n```\\n[1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\\n```\\n\\nYou own several wooden planks, each with different widths. You can patch the holes on the bridge with these planks. More specifically, a plank size `n` can fill a `n`-sized hole. If you had a plank of size `2`, the un-walkeable bridge above could be filled in:\\n\\n```\\n[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\\n```\\n\\nBut even if you only had a plank of size `1`, you could still transform the unwalkeable bridge into a walkeable one:\\n\\n```\\n[1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\\n```\\n\\nWrite a function that takes in a broken bridge, an array of plank sizes, and returns `true` if the bridge can be patched up enough to walk over, and `false` otherwise.\\n\\n### Examples\\n```\\ncanPatch([1, 0, 0, 0, 0, 0, 0, 1], [5, 1, 2]) ➞ true\\n// You can use the 5 plank to transform the 6 hole to a 1 hole.\\n// Leftover planks [1, 2] are okay.\\n\\ncanPatch([1, 0, 0, 0, 0, 0, 0, 1], [4, 1, 2, 3, 4]) ➞ false\\n// None of your planks are long enough (you can't combine them).\\n\\ncanPatch([1, 0, 0, 1, 1, 0, 0, 0, 1], [1, 2]) ➞ true\\n\\ncanPatch([1, 0, 0, 1, 1, 0, 0, 0, 1], [1, 1]) ➞ false\\n```\\n\\n### Notes\\n- Individual planks may NOT be combined to form a longer plank.\\n- Leftover planks are okay.\",\"lab\":\"Test.assertEquals(canPatch([1, 0, 0, 1], [1]), true)\\nTest.assertEquals(canPatch([1, 0, 0, 1], [1, 2]), true)\\nTest.assertEquals(canPatch([1, 0, 0, 1], []), false)\\nTest.assertEquals(canPatch([1, 0, 1, 1], []), true)\\nTest.assertEquals(canPatch([1, 0, 1, 0, 1, 0, 1, 0, 1], []), true)\\nTest.assertEquals(canPatch([1, 0, 0, 0, 0, 0, 0, 1], [5, 1, 2]), true)\\nTest.assertEquals(canPatch([1, 0, 0, 0, 0, 0, 0, 1], [4, 1, 2, 3, 4]), false)\\nTest.assertEquals(canPatch([1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1]), false)\\nTest.assertEquals(canPatch([1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1]), true)\\nTest.assertEquals(canPatch([1, 0, 0, 1, 1, 0, 0, 0, 1], [1, 2]), true)\\nTest.assertEquals(canPatch([1, 0, 0, 1, 1, 0, 0, 0, 1], [1, 1]), false)\\nTest.assertEquals(canPatch([1, 0, 0, 1, 1, 1, 0, 0, 1], [1, 1]), true)\\nTest.assertEquals(canPatch([1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1], [1, 3, 1]), true)\\nTest.assertEquals(canPatch([1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1], [1, 3, 1, 5, 5]), true)\\nTest.assertEquals(canPatch([1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1], [1, 2, 2]), false)\",\"language\":\"javascript\",\"summary\":\"A broken bridge can be represented by 1s and 0s, where contiguous 0s represent holes. You can walk across a bridge with a hole with a maximum width of 1, but any holes bigger than that you must fix first. For example, the bridge below is walkeable:\\n\\n[1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1]\\n\\nThis bridge is not:\\n\\n[1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1\",\"tags\":[\"arrays\",\"validation\",\"higher_order_functions\"],\"timestamp\":{\"$date\":1554059855648},\"title\":\"Broken Bridge\",\"stats\":{\"completed\":{\"total\":48,\"ratings\":[2,2,2,2,2,2,2,2,2,2,2,2,2,3,2,3,2,3,2,3,2,3,3,2,2,2,4,3,3,3,3,2,2,2,3,2,3,3,3,2,2,2,2,1,3,3,0,3,3,2,4,3],\"rators\":[\"mNMQvcxKSSvqqMYCH\",\"65dbBZynphj53nXqA\",\"SDtZFL5NzAoCPofXk\",\"Nu5Qkt74dbKak22wj\",\"WnbtNz3GX8DvzGQsK\",\"EjPLq3QSJdGQFJdgW\",\"g5noFWaoRtZNcEEAW\",\"n5wubRfh6zh8QRymN\",\"EWn8w8P3nNh7knatY\",\"PjQM8fJyJgMvfCYNA\",\"4itF2fjGR9Swc48Zp\",\"6mvbpk5pvPbuw9Yik\",\"yjtdwc2AC4jA2RWtn\",\"Y9Nz9yafaibz54W4o\",\"rZfbfxCJbYsvhgKcn\",\"5Zq3aGdvh4LHBvnJL\",\"AasGs8AeX9Lcb9xJn\",\"dqWKb5RvGAXWJjZdQ\",\"mHT2bJb5SByfJ8yKS\",\"vjn7eaKRuTN9iGCCa\",\"2innwjWqxJHo4eRGh\",\"2NJuDfSqdrF8kHHni\",\"EGMDcfyfqqMZsN5pu\",\"pi76g3eRpnKrhee2a\",\"Kc3SDafimwpZWrATJ\",\"Es4eX2stRpyoXeC7f\",\"QMq9dcvgpyNK6RAze\",\"PytNZK9mNiRiZxPrm\",\"8raviPK67KKxzQWcF\",\"FJsvM5yqKuK9yMk9P\",\"vZGhzQQXAmS9J4tEo\",\"yuLxi2qBJvMnwgdgJ\",\"nBo2LLuSMeEgd5f6G\",\"YLwJkF2wuL3n9o6a2\",\"aEm3Wvj2rFYRL8Lrb\",\"p5ZshR8zhTqmdhKDc\",\"Ek9PiwGewEGH6fcqz\",\"jAB3aWnAqfpkehBqt\",\"kp2ZbCewZJAbfd7xv\",\"v9KtC8YLbMWmXiW2H\",\"CNc6rmwhbxkxEhHAp\",\"QRv96jmNaYsWkxQEG\",\"8BJyXvRWcrvN3nttS\",\"RE4Mm9T6Q9uygAxGS\",\"oDtGiNqDMHmhHE3J8\",\"buX4mCQhtXCfBjeno\"],\"quality\":[5,5,3]},\"tests\":{\"score\":0,\"voters\":[\"mNMQvcxKSSvqqMYCH\"]},\"instructions\":{\"score\":0,\"voters\":[\"mNMQvcxKSSvqqMYCH\"]},\"flags\":0},\"isHidden\":false,\"quality\":4.333333333333333,\"family\":[{\"_id\":\"nvQDz5F4g2Prtpgx5\",\"language\":\"cpp\"},{\"_id\":\"tQNGydfWqZueRgmDC\",\"language\":\"javascript\"},{\"_id\":\"mrrKngM2fqDEDMXtS\",\"language\":\"python3\"},{\"_id\":\"knpGsaWydLBRBs4c3\",\"language\":\"ruby\"}]}}"]