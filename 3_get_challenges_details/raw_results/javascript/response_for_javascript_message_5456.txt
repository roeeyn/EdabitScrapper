a["{\"msg\":\"result\",\"id\":\"1478\",\"result\":{\"_id\":\"P7SoyRXhQrhdZTFak\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"function canBuild(arr) {\\n\\t\\n}\",\"difficulty\":2.175675675675676,\"familyId\":\"3DCF2Q2C2bgpSzffP\",\"instructions\":\"You are given an input array of strings, ordered by ascending length.\\n\\nWrite a function that returns `true` if, for each pair of consecutive strings, the second string can be formed from the first by adding a **single letter** either at the **beginning or end**.\\n\\n### Examples\\n```\\ncanBuild([\\\"a\\\", \\\"at\\\", \\\"ate\\\", \\\"late\\\", \\\"plate\\\", \\\"plates\\\"]) ➞ true\\n\\ncanBuild([\\\"a\\\", \\\"at\\\", \\\"ate\\\", \\\"late\\\", \\\"plate\\\", \\\"plater\\\", \\\"platter\\\"]) ➞ false\\n// \\\"platter\\\" is formed by adding \\\"t\\\" in the middle of \\\"plater\\\"\\n\\ncanBuild([\\\"it\\\", \\\"bit\\\", \\\"bite\\\", \\\"biters\\\"]) ➞ false\\n// \\\"biters\\\" is formed by adding two letters - we can only add one\\n\\ncanBuild([\\\"mean\\\", \\\"meany\\\"]) ➞ true\\n```\\n\\n### Notes\\n- Return `false` if a word is **NOT** formed by adding **only one letter**.\\n- Return `false` if the letter is added to the **middle** of the previous word.\\n- Letters in tests will all be **lower case**.\",\"lab\":\"Test.assertEquals(canBuild(['a', 'at', 'ate', 'late', 'plate', 'plates']), true)\\nTest.assertEquals(canBuild(['u', 'ut', 'but', 'butt', 'butte', 'butter', 'buttery']), true)\\nTest.assertEquals(canBuild(['a', 'ka', 'ika', 'pika', 'pikac', 'pikach', 'pikachu']), true)\\nTest.assertEquals(canBuild(['a', 'at', 'tat', 'stat', 'state', 'estate', 'estates']), true)\\nTest.assertEquals(canBuild(['o', 'ol', 'old', 'bold', 'bolde', 'mbolde', 'embolde', 'embolden']), true)\\nTest.assertEquals(canBuild(['mean', 'meany']), true)\\nTest.assertEquals(canBuild(['at', 'cat', 'cate', 'cater', 'caters']), true)\\nTest.assertEquals(canBuild(['a', 'at', 'ate', 'late', 'plate', 'plater', 'platter']), false)\\nTest.assertEquals(canBuild(['i', 'it', 'bit', 'bite', 'biters']), false)\\nTest.assertEquals(canBuild(['e', 'tea', 'teac', 'teach', 'teache', 'teacher', 'teachers']), false)\\nTest.assertEquals(canBuild(['m', 'ma', 'man', 'many', 'meany']), false)\\nTest.assertEquals(canBuild(['o', 'op', 'top', 'stop', 'stops', 'stoops']), false)\\nTest.assertEquals(canBuild(['air', 'air', 'airy', 'fairy']), false)\\nTest.assertEquals(canBuild(['men', 'mean', 'meany']), false)\",\"language\":\"javascript\",\"summary\":\"You are given an input array of strings, ordered by ascending length.\\n\\nWrite a function that returns true if, for each pair of consecutive strings, the second string can be formed from the first by adding a single letter either at the beginning or end.\\n\\nExamples\\ncanBuild([\\\"a\\\", \\\"at\\\", \\\"ate\\\", \\\"late\\\", \\\"plate\\\", \\\"plates\\\"]) ➞ true\\n\\ncanBuild([\\\"a\\\", \\\"at\\\", \\\"ate\\\", \\\"late\\\",\",\"tags\":[\"strings\",\"validation\",\"arrays\"],\"timestamp\":{\"$date\":1557246485339},\"title\":\"Building up a Word\",\"stats\":{\"completed\":{\"total\":73,\"ratings\":[3,3,3,3,3,3,3,3,3,3,0,2,1,2,2,2,2,2,3,2,1,2,1,2,3,2,2,2,2,2,0,3,3,2,2,3,2,2,3,3,2,3,2,1,2,3,3,2,2,3,0,2,1,3,2,2,1,2,2,3,0,1,1,5,3,0,3,3,2,2,2,3,2,3],\"rators\":[\"mNMQvcxKSSvqqMYCH\",\"SDtZFL5NzAoCPofXk\",\"65dbBZynphj53nXqA\",\"2NJuDfSqdrF8kHHni\",\"DszZSuRTD7ynLoZch\",\"Akq3fQcPRgPrWfsye\",\"Hz8mnq7xFJZKLymTh\",\"6XbwEXgskYHLL7Lu3\",\"n5wubRfh6zh8QRymN\",\"eomLS3wh6tQPN8jtH\",\"D8vwmCtgeDziNKprE\",\"jMof5DdBZGJ9nrHQ3\",\"CJnuSjyCBMTbTiibD\",\"yjtdwc2AC4jA2RWtn\",\"EWn8w8P3nNh7knatY\",\"EjPLq3QSJdGQFJdgW\",\"5Zq3aGdvh4LHBvnJL\",\"Y9Nz9yafaibz54W4o\",\"AasGs8AeX9Lcb9xJn\",\"mHT2bJb5SByfJ8yKS\",\"XKi8iZXBCHCaebSHh\",\"DHwbkbzYNpmkSFT7u\",\"WdxWWwuM5PcZbTgxY\",\"S7n8qdiRfexcvDYuQ\",\"tRMM5SkDnBpNvspDS\",\"FJsvM5yqKuK9yMk9P\",\"6BpBQnSGhzgvhXrEy\",\"2innwjWqxJHo4eRGh\",\"DBaRY6wDtrC8JytEX\",\"hCocXH3CwMH29whYQ\",\"qJZsi5rhRnWA38FbA\",\"7TBJGzjX45B5LZ8M8\",\"kMEBWuX4jztxsAuE4\",\"CHAnE9k4HSR6Pectg\",\"KaH8FpM93aotdcu4n\",\"xMLCsZbeTFRpnXeZe\",\"a777e8chPvJkY3tKa\",\"uAS9uKs8KQmp8uhqn\",\"pi76g3eRpnKrhee2a\",\"Es4eX2stRpyoXeC7f\",\"b7GtDPC7j4bAmK4t9\",\"jqbm8L6895JgAtZ6H\",\"RE4Mm9T6Q9uygAxGS\",\"QRv96jmNaYsWkxQEG\",\"buX4mCQhtXCfBjeno\",\"nkGLFenhWR8neryo4\",\"8raviPK67KKxzQWcF\",\"aEm3Wvj2rFYRL8Lrb\",\"vt88eKvFz6ES8sbrD\",\"ixabGTE2JSw9QLbJS\",\"4Xv87xmdSnpYhi8hz\",\"kp2ZbCewZJAbfd7xv\",\"pGh7WykiPe26fHJYv\",\"BdvdJYwHZr7JpkHsn\",\"CNc6rmwhbxkxEhHAp\",\"HmQu5Cd2KivaXhaR7\",\"zw7g7T8wE5R5CBhXr\",\"bXaGdBM8FBLHf7N6Y\",\"8BJyXvRWcrvN3nttS\",\"ct42f2gGpMXSd9hXM\",\"qWR7eXxBiNee22A5u\",\"DPi9QGLctq2y76KuE\",\"PytNZK9mNiRiZxPrm\",\"g4NCSxxHqHCGMpWwT\",\"vewKwcMeGuk3p3MsN\",\"2Qk2mFu9HBFzrB24i\",\"NGvCPuMiAP3xrRLfB\",\"srJ34BaybkQh3qRkM\",\"AFfw7cGg83uYk2Miy\",\"ZcJm2kuqJnN3CXFaR\",\"oDtGiNqDMHmhHE3J8\",\"Ya3eHgs8x3unZRLpb\",\"nkH3HfJXLMNcBMM79\",\"bX6tpTCjwoi6XMMbK\"],\"quality\":[5,5,5,5,5,3,5,5,5]},\"tests\":{\"score\":0,\"rators\":[\"mNMQvcxKSSvqqMYCH\"]},\"instructions\":{\"score\":0,\"rators\":[\"mNMQvcxKSSvqqMYCH\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.777777777777778,\"family\":[{\"_id\":\"3L5nGsiBp95gmGhG7\",\"language\":\"cpp\"},{\"_id\":\"Eiyu2SZk9rgdp5gZd\",\"language\":\"java\"},{\"_id\":\"P7SoyRXhQrhdZTFak\",\"language\":\"javascript\"},{\"_id\":\"zQespQxTsiGoeMNP3\",\"language\":\"python3\"},{\"_id\":\"Ryc76RB3iAXLq7Ask\",\"language\":\"ruby\"}]}}"]