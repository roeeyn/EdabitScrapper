a["{\"msg\":\"result\",\"id\":\"2357\",\"result\":{\"_id\":\"PxjMBvGwp75dBqXpi\",\"author\":\"zatoichi49\",\"authorId\":\"tAF9Gf6PiGogbZuWs\",\"code\":\"function wordSearch2(letters, words) {\\n\\t\\n}\",\"difficulty\":4,\"familyId\":\"XmM7M6fXmbouyNJsS\",\"instructions\":\"This challenge involves finding words in an 8x8 grid. Given a string of 64 `letters` and an array of `words` to find, convert the string to an 8x8 array, and return `true` if *all* words can be found in the new array. Return `false` otherwise. Words can be read in any direction (horizontally, vertically or diagonally), and can also `wrap` over the same column, row or diagonal.\\n\\n### Example\\n```\\nletters = \\\"HWAVEOWCFONNANFABEOAMOIAHODOXORTACTIDINOBWZODGELINEEAFASTETAPELL\\\"\\nwords = [\\\"slot\\\", \\\"donate\\\", \\\"orthodox\\\", \\\"rated\\\", \\\"wave\\\", \\\"tape\\\", \\\"leg\\\", \\\"habit\\\", \\\"add\\\", \\\"fox\\\"]\\n```\\n\\nThis would give the array below:\\n\\n```\\n[\\n  [\\\"H\\\", \\\"W\\\", \\\"A\\\", \\\"V\\\", \\\"E\\\", \\\"O\\\", \\\"W\\\", \\\"C\\\"],\\n  [\\\"F\\\", \\\"O\\\", \\\"N\\\", \\\"N\\\", \\\"A\\\", \\\"N\\\", \\\"F\\\", \\\"A\\\"],\\n  [\\\"B\\\", \\\"E\\\", \\\"O\\\", \\\"A\\\", \\\"M\\\", \\\"O\\\", \\\"I\\\", \\\"A\\\"],\\n  [\\\"H\\\", \\\"O\\\", \\\"D\\\", \\\"O\\\", \\\"X\\\", \\\"O\\\", \\\"R\\\", \\\"T\\\"],\\n  [\\\"A\\\", \\\"C\\\", \\\"T\\\", \\\"I\\\", \\\"D\\\", \\\"I\\\", \\\"N\\\", \\\"O\\\"],\\n  [\\\"B\\\", \\\"W\\\", \\\"Z\\\", \\\"O\\\", \\\"D\\\", \\\"G\\\", \\\"E\\\", \\\"L\\\"],\\n  [\\\"I\\\", \\\"N\\\", \\\"E\\\", \\\"E\\\", \\\"A\\\", \\\"F\\\", \\\"A\\\", \\\"S\\\"],\\n  [\\\"T\\\", \\\"E\\\", \\\"T\\\", \\\"A\\\", \\\"P\\\", \\\"E\\\", \\\"L\\\", \\\"L\\\"]\\n]\\n```\\n\\nYou would return `true` as all words can be found:\\n\\n```\\n[\\n  [\\\"_\\\", \\\"W\\\", \\\"A\\\", \\\"V\\\", \\\"E\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\"],\\n  [\\\"_\\\", \\\"_\\\", \\\"N\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\", \\\"F\\\", \\\"_\\\"],\\n  [\\\"_\\\", \\\"_\\\", \\\"O\\\", \\\"_\\\", \\\"_\\\", \\\"O\\\", \\\"_\\\", \\\"A\\\"],\\n  [\\\"H\\\", \\\"O\\\", \\\"D\\\", \\\"O\\\", \\\"X\\\", \\\"O\\\", \\\"R\\\", \\\"T\\\"],\\n  [\\\"A\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\", \\\"D\\\", \\\"_\\\", \\\"_\\\", \\\"O\\\"],\\n  [\\\"B\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\", \\\"D\\\", \\\"G\\\", \\\"E\\\", \\\"L\\\"],\\n  [\\\"I\\\", \\\"_\\\", \\\"E\\\", \\\"E\\\", \\\"A\\\", \\\"_\\\", \\\"_\\\", \\\"S\\\"],\\n  [\\\"T\\\", \\\"_\\\", \\\"T\\\", \\\"A\\\", \\\"P\\\", \\\"E\\\", \\\"_\\\", \\\"_\\\"]\\n]\\n```\\n\\nExamples of the `wrapped` words:\\n\\n```\\n[\\n  [\\\"_\\\", \\\"_\\\", \\\"A\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\"],\\n  [\\\"_\\\", \\\"_\\\", \\\"N\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\"],\\n  [\\\"_\\\", \\\"_\\\", \\\"O\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\", \\\"A\\\"],\\n  [\\\"H\\\", \\\"O\\\", \\\"D\\\", \\\"O\\\", \\\"X\\\", \\\"O\\\", \\\"R\\\", \\\"T\\\"],\\n  [\\\"_\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\"],\\n  [\\\"_\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\", \\\"D\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\"],\\n  [\\\"_\\\", \\\"_\\\", \\\"E\\\", \\\"E\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\"],\\n  [\\\"_\\\", \\\"_\\\", \\\"T\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\"]\\n]\\n\\n# \\\"orthodox\\\" -> horizontal\\n# \\\"donate\\\" -> vertical\\n# \\\"rated\\\" -> diagonal\\n```\\n\\n### Notes\\nN/A\",\"lab\":\"Test.assertEquals(wordSearch2('LUEWENTENRFICTIOVIVORSURWAIXTYEJUBADSLLEOEBWUASUYLLHSNLSUAETNAMN', ['analyst', 'census', 'ensue', 'bad', 'survivor', 'fuss', 'fiction', 'viable', 'jet', 'blue']), true)\\nTest.assertEquals(wordSearch2('BARRIERGUFUAOYEOPLANESFYCWOUNDNMPKIEIFCURIFNGPJDOFCKSRKLOHAVYHGO', ['car', 'cup', 'barrier', 'folk', 'offense', 'mud', 'log', 'wound', 'jury', 'plane']), false)\\nTest.assertEquals(wordSearch2('OJODAORGFRIENDLYNEEBMOBIIGASOKVCAUGFDWIATLNIFZDMNALKYEOPURCOMRET', ['zero', 'road', 'fountain', 'fool', 'bow', 'friendly', 'regular', 'bin', 'camp', 'not']), true)\\nTest.assertEquals(wordSearch2('IEYPINAHYFCNHMVUOOHAOENTLARCRMAYNSTISLENHCUBENMRMORUGDUPKECHUDIS', ['hut', 'dump', 'mean', 'ceremony', 'disk', 'pin', 'horse', 'fee', 'harsh', 'comma']), false)\\nTest.assertEquals(wordSearch2('OPCASHENAVSUNDEWKFGEAMONPEHSEBMILRCRMKCTAITOUBLWNXAVIEOAEHRGESOY', ['monk', 'plane', 'tin', 'mean', 'sow', 'way', 'wait', 'bow', 'scratch', 'extreme']), true)\\nTest.assertEquals(wordSearch2('EDATEBPEUROMCROPLDAIAAPEACSNHIERENSSTNFAEPEROTSLHOMFAROIPREDICTL', ['tolerant', 'deep', 'fan', 'predict', 'store', 'sleep', 'pop', 'brain', 'bet', 'mess']), false)\\nTest.assertEquals(wordSearch2('ANEIOLDRDICHWUHTLNHMGSWTAWEAAEOEIGCFORCGNEKREUGOCTLTPDLIHYAOITNL', ['inch', 'old', 'rotate', 'cow', 'margin', 'oil', 'result', 'check', 'lot', 'defend']), true)\\nTest.assertEquals(wordSearch2('DATERMSOEBIUSECUBINWOAOSETCYOHMTSNTESTSIPIONCHAMKNYKUDNEHSEYARTA', ['instinct', 'terms', 'end', 'time', 'champion', 'test', 'shout', 'bed', 'kit', 'ash']), false)\\nTest.assertEquals(wordSearch2('ITNESSAWTIECROFIHBESCWNLEAPTREIDBHMNEWNGOFCIWIOUCPNNXRBEYILENERG', ['crew', 'habit', 'witness', 'index', 'tip', 'energy', 'wild', 'nun', 'mix', 'force']), true)\\nTest.assertEquals(wordSearch2('TPEHNAPNRLATEMAHCOMPOUNDEVECOGDIYRIBEFLNOARSUAKSLEOKWFAENNNSITNW', ['metal', 'leaf', 'iron', 'rib', 'compound', 'wine', 'sit', 'complain', 'nose', 'ask']), false)\",\"language\":\"javascript\",\"summary\":\"This challenge involves finding words in an 8x8 grid. Given a string of 64 letters and an array of words to find, convert the string to an 8x8 array, and return true if all words can be found in the new array. Return false otherwise. Words can be read in any direction (horizontally, vertically or diagonally), and can also wrap over the same column, row or diag\",\"tags\":[\"arrays\",\"strings\"],\"timestamp\":{\"$date\":1562687027462},\"title\":\"Word Search (Part 2)\",\"stats\":{\"completed\":{\"total\":17,\"ratings\":[5,5,5,5,5,4,4,5,2,1,4,3,5,5,4,5,5,4,0],\"rators\":[\"65dbBZynphj53nXqA\",\"yjtdwc2AC4jA2RWtn\",\"mHT2bJb5SByfJ8yKS\",\"iGCyzBZ9rxC5cdWME\",\"mPGkQErhbN8rqbxaE\",\"cRpaCxYRmGcN3Nsoj\",\"pi76g3eRpnKrhee2a\",\"JGBCMpnbbi5ztuFoX\",\"7TXyMDHFYjna3dyPb\",\"aEm3Wvj2rFYRL8Lrb\",\"bXaGdBM8FBLHf7N6Y\",\"JuGJgYuj4eHc5xdaz\",\"va3fDAQm4sqSMoy3R\",\"pMxDFFGrSfHCQAW2k\"],\"quality\":[]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":0,\"family\":[{\"_id\":\"PxjMBvGwp75dBqXpi\",\"language\":\"javascript\"},{\"_id\":\"C9LBX4DpgNj2nmLb3\",\"language\":\"python3\"},{\"_id\":\"ZqNcxnSWuknQRRhn5\",\"language\":\"ruby\"}]}}"]