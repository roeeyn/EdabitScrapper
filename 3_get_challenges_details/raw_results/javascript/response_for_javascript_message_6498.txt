a["{\"msg\":\"result\",\"id\":\"1994\",\"result\":{\"_id\":\"JhQ8qCptpTbZMvnRz\",\"archived\":false,\"author\":\"Pustur\",\"authorId\":\"65dbBZynphj53nXqA\",\"code\":\"const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\\n\\nfunction monthsInterval(dateStart, dateEnd) {\\n\\t\\n}\",\"difficulty\":2.8088235294117645,\"familyId\":\"5Kr8k63AfxZdZ2JzJ\",\"instructions\":\"Create a function that, given 2 dates, returns the names of the months that are present between them (inclusive).\\n\\n## Examples\\n  **Input**\\n  ```javascript\\n  var january = new Date(2017, 0, 1);\\n  var march = new Date(2017, 2, 1);\\n\\n  monthsInterval(january, march)\\n  ```\\n\\n  **Output**\\n  ```javascript\\n  ['January', 'February', 'March']\\n  ```\\n\\n  **Input**\\n  ```javascript\\n  var december = new Date(2017, 11, 1);\\n  var january = new Date(2018, 0, 1);\\n\\n  monthsInterval(december, january)\\n  ```\\n\\n  **Output**\\n  ```javascript\\n  ['January', 'December']\\n  ```\\n\\n  **Input**\\n  ```javascript\\n  var january2017 = new Date(2017, 0, 1);\\n  var january2018 = new Date(2018, 0, 1);\\n\\n  monthsInterval(january2017, january2018)\\n  ```\\n\\n  **Output**\\n  ```javascript\\n  ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\\n  ```\\n  (Notice that January is **not** duplicated!)\\n\\n## Notes\\n- The returned array should include the months of `dateStart` and `dateEnd` (inclusive)\\n- The returned array **must not** include duplicate values\\n- The month names returned by the function should be sorted (not alphabetically, but ordered by which comes first (January = 1st month, February = 2nd month, â€¦ , December = 12th month))\\n- The function should produce the same output even if `dateStart` is greater than `dateEnd`\",\"lab\":\"// Same month & year\\nTest.assertSimilar(\\n  monthsInterval(new Date(2017, 0, 1), new Date(2017, 0, 1)),\\n  ['January']\\n);\\n\\n// Same month, different year\\nTest.assertSimilar(\\n  monthsInterval(new Date(2016, 0, 1), new Date(2017, 0, 1)),\\n  ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\\n);\\n\\n// Same month, different year (reversed)\\nTest.assertSimilar(\\n  monthsInterval(new Date(2017, 0, 1), new Date(2016, 0, 1)),\\n  ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\\n);\\n\\n// Month interval same year\\nTest.assertSimilar(\\n  monthsInterval(new Date(2017, 3, 1), new Date(2017, 7, 1)),\\n  ['April', 'May', 'June', 'July', 'August']\\n);\\n\\n// Month interval same year (reversed)\\nTest.assertSimilar(\\n  monthsInterval(new Date(2017, 7, 1), new Date(2017, 3, 1)),\\n  ['April', 'May', 'June', 'July', 'August']\\n);\\n\\n// Month interval to different year\\nTest.assertSimilar(\\n  monthsInterval(new Date(2017, 11, 1), new Date(2018, 0, 1)),\\n  ['January', 'December']\\n);\\n\\n// Month interval to different year (reversed)\\nTest.assertSimilar(\\n  monthsInterval(new Date(2018, 0, 1), new Date(2017, 11, 1)),\\n  ['January', 'December']\\n);\\n\\n// 2 years interval\\nTest.assertSimilar(\\n  monthsInterval(new Date(2017, 3, 1), new Date(2019, 3, 1)),\\n  ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\\n);\\n\\n// 2 years interval (reversed)\\nTest.assertSimilar(\\n  monthsInterval(new Date(2019, 3, 1), new Date(2017, 3, 1)),\\n  ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\\n);\\n\\n// Mutliple years and months interval\\nTest.assertSimilar(\\n  monthsInterval(new Date(2017, 3, 1), new Date(2043, 9, 1)),\\n  ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\\n);\\n\\n// Mutliple years and months interval (reversed)\\nTest.assertSimilar(\\n  monthsInterval(new Date(2043, 9, 1), new Date(2017, 3, 1)),\\n  ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\\n);\\n\",\"language\":\"javascript\",\"summary\":\"Create a function that, given 2 dates, returns the names of the months that are present between them (inclusive).\\n\\nExamples\\n  Input\\n    var january = new Date(2017, 0, 1);\\n  var march = new Date(2017, 2, 1);\\n\\n  monthsInterval(january, march)\\n\\n  Output\\n    ['January', 'February', 'March']\\n\\n  Input\\n    var december = new Date(2017, 11, 1);\\n  var january = new Da\",\"tags\":[\"arrays\",\"dates\",\"sorting\"],\"timestamp\":{\"$date\":1511952608623},\"title\":\"Get the Months Between Two Dates\",\"stats\":{\"completed\":{\"total\":72,\"ratings\":[2,2,2,2,2,2,1,2,3,2,3,2,2,2,1,3,2,2,3,3,2,2,3,1,3,4,4,3,3,2,3,3,3,3,4,4,3,0,3,5,3,3,4,2,3,3,3,4,3,3,4,3,5,4,2,2,4,4,4,0,4,4,3,3,4,3,2,4],\"rators\":[\"65dbBZynphj53nXqA\",\"hi7Hvtq2mJfkXEGF2\",\"XHngE5iScvztMpnR2\",\"sQTaZGCCsE7BNQzyG\",\"QwekdttzwMiXT2o4T\",\"Hz8mnq7xFJZKLymTh\",\"naWuczEGBEYNvTm6b\",\"AhC88RpTjJ8kETcWh\",\"HBRzeHKAW5wY6ht9Z\",\"NbsMkYuSFa8LsnZtT\",\"thEsZ7N6X8qfZMbcv\",\"tuyDaJzFy78jxvhCY\",\"FGEeCTorXbX3WvjFW\",\"RNKWjAHrXt9AiMc3g\",\"MmpisT9nmzPJDQuRC\",\"HQuhas4KXrETxYk9o\",\"SDtZFL5NzAoCPofXk\",\"XcHCqYmeoqxDsoucx\",\"eq9dWq4Q6bPCG4AsA\",\"G7bdEb5gSLLR59Fvn\",\"nufoDT2FmMQSXhb2h\",\"CJnuSjyCBMTbTiibD\",\"EjPLq3QSJdGQFJdgW\",\"n5wubRfh6zh8QRymN\",\"jJ9njGvHZaHTsqAJs\",\"yjtdwc2AC4jA2RWtn\",\"eQdnBfe8riy82SNrK\",\"EWn8w8P3nNh7knatY\",\"AasGs8AeX9Lcb9xJn\",\"5Zq3aGdvh4LHBvnJL\",\"75EKGxWJ6cCjmpS5W\",\"FgGwspAA6jGQm7kak\",\"mHT2bJb5SByfJ8yKS\",\"BBP9BE5mKHRzaRpJr\",\"P8bXFR4cHwFia9rNM\",\"SW85FEYGb37oAsWfo\",\"WkqrFrbaEkopz6RCa\",\"njrwhZgtPbcn9F9nm\",\"LWGa4s8ZWLDoKc3ry\",\"cRpaCxYRmGcN3Nsoj\",\"sfzNjh3KxGJtmYtwX\",\"hNetWrA6zvytax4hM\",\"g5noFWaoRtZNcEEAW\",\"MzwFbhCbZwQ3DSL6Q\",\"yQtGE2egvwYnNQSFc\",\"t85p6fh3XxvcK78NE\",\"frx4Kkg7MayMPupHR\",\"YER6iBcpJCuhgrYDN\",\"978CFDwQoiXR6xcq5\",\"FJsvM5yqKuK9yMk9P\",\"a7LBurCmz5n6gECbv\",\"Kc3SDafimwpZWrATJ\",\"rZTu8vyq4CzXBpspH\",\"JGBCMpnbbi5ztuFoX\",\"a777e8chPvJkY3tKa\",\"h4jFmtbFn92eA4649\",\"ywL5EMJoFPLjrnrSq\",\"eFjGhq7C7bBKXjT6X\",\"aEm3Wvj2rFYRL8Lrb\",\"pGh7WykiPe26fHJYv\",\"mDWNyaaQ9hvPCRzSd\",\"4pBi6y2TtuyoLFunq\",\"8BJyXvRWcrvN3nttS\",\"DPi9QGLctq2y76KuE\"],\"quality\":[]},\"complaints\":{\"total\":0,\"reasons\":[],\"skippers\":[\"65dbBZynphj53nXqA\"]},\"instructions\":{\"score\":25.3,\"voters\":[\"XcHCqYmeoqxDsoucx\"]},\"tests\":{\"score\":3.35,\"voters\":[\"WaLRB6Yqqv43RumtZ\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":0,\"family\":[{\"_id\":\"JhQ8qCptpTbZMvnRz\",\"language\":\"javascript\"},{\"_id\":\"Nr33pizZC2XdHXAm6\",\"language\":\"python3\"}]}}"]