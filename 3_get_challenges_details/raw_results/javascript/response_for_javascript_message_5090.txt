a["{\"msg\":\"result\",\"id\":\"1297\",\"result\":{\"_id\":\"5puuiuvW48dEsjkzW\",\"author\":\"Isaac Pak\",\"authorId\":\"yaL57wdXmgAZTvKfX\",\"code\":\"function isPrime(primes, num) {\\n\\t\\n}\",\"difficulty\":2.0934579439252334,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"prtz98YLeLgSbLS5q\",\"instructions\":\"Create a function that finds a target number in a list of prime numbers. Implement a **binary search algorithm** in your function. The target number will be from 2 through 97. If the target is prime then return `\\\"yes\\\"` else return `\\\"no\\\"`.\\n\\n### Examples\\n```\\nvar primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\\n\\n\\nisPrime(primes, 3) ➞ \\\"yes\\\"\\n\\nisPrime(primes, 4) ➞ \\\"no\\\"\\n\\nisPrime(primes, 67) ➞ \\\"yes\\\"\\n\\nisPrime(primes, 36) ➞ \\\"no\\\"\\n```\\n\\n### Notes\\n- You could use built-in functions to solve this, but the point of this challenge is to see if you understand the **binary search algorithm**.\\n- The solution is in the **Resources** tab.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\\n\\nTest.assertEquals(isPrime(primes, 3), \\\"yes\\\")\\nTest.assertEquals(isPrime(primes, 4), \\\"no\\\")\\nTest.assertEquals(isPrime(primes, 67), \\\"yes\\\")\\nTest.assertEquals(isPrime(primes, 36), \\\"no\\\")\\n\\n// credits to KhanAcademy for this challenge\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,1,0,1,2,3,3,0,2,2,0,2,2,2,2,2,3,3,3,0,2,3,3,2,2,1,3,3,3,2,3,3,2,0,2,3,3,3,3,3,2,0,2,3,3,2,2,3,3,2,2,1,2,2,3,2,2,0,3,3,3,5,1,0,3,3,3,2,3,2,2,3,2,1,3,0,2,1,0,2,3,2,3,2,3,0,3,3,2,2,1,3,1,0,3,3,1,5,0,3,2,2],\"rators\":[\"yjtdwc2AC4jA2RWtn\",\"FJsvM5yqKuK9yMk9P\",\"yuLxi2qBJvMnwgdgJ\",\"EjPLq3QSJdGQFJdgW\",\"EWn8w8P3nNh7knatY\",\"RE4Mm9T6Q9uygAxGS\",\"2d6fufcQy4F3awkF3\",\"q9BzXDtYdTAANjqMJ\",\"6BpBQnSGhzgvhXrEy\",\"dqWKy36hbfdBHH85G\",\"pi76g3eRpnKrhee2a\",\"AasGs8AeX9Lcb9xJn\",\"eomLS3wh6tQPN8jtH\",\"qP75NQuYQQ4tbWPH3\",\"z5ebtimXwFFJdYxoa\",\"QMq9dcvgpyNK6RAze\",\"2ZFoLTxcCARhwc8xX\",\"b7GtDPC7j4bAmK4t9\",\"uAS9uKs8KQmp8uhqn\",\"TjwyRbkPanQTP7AYs\",\"oHgN6zu8ihdqSfTAx\",\"34bE6mric984YYLZQ\",\"ou59JYLGm3Mt26556\",\"GCsLzWAhLvniQqR3J\",\"LreCskdE4MTjTyhAM\",\"R6kugNaqCaNStMWM7\",\"aRCwEM8hnYEoHiSiY\",\"ajm6oAjH6sdAjxdbe\",\"oyB4Wr4EeZnoDaa8B\",\"7B9qqRQdot33gqzpm\",\"zeWQXEnqMXMxsm2dH\",\"5NGxHLcQ8Af2RJ4TN\",\"pd8dm7sWLW9cY6dYW\",\"Qy9iR759KepTnfxjW\",\"vutMBd5mTWxNRzNs3\",\"Bcn7THBq3BiZANSyN\",\"Xk2g4CNFAnYcvxiSr\",\"WCPyuhxqjCYBmFPQ6\",\"NchnDcEmsLTeFZ4FH\",\"9qQEDELhzg58uSvjg\",\"mbfJaXFCT4caCPKqN\",\"MtSGMTysiWHmv4CRE\",\"NccDe7TRDgxeA6s7A\",\"pKd2jqeFwpf2cTeHz\",\"eoepTq5ES5tfgY9XT\",\"buX4mCQhtXCfBjeno\",\"fMqXimJLsPiuhT8A8\",\"Yzh7zNiyG7LM9vnAj\",\"65dbBZynphj53nXqA\",\"7xZdHDypd44S3YSjx\",\"vx9wccR68iPfZGJZp\",\"aEm3Wvj2rFYRL8Lrb\",\"faKt2ad3GNGH2gYB9\",\"ZcmrtSpqFnCBEK5YE\",\"Nb6LYPoQP6KJZt8mz\",\"Z2DfqwJNdjdjXhKN6\",\"ng8oK5NRMRNbwKQLu\",\"7YAiLjJb9aGiS4mmx\",\"kCY2WagMYKBofCtEt\",\"4Xv87xmdSnpYhi8hz\",\"n5wubRfh6zh8QRymN\",\"8s7EByT9ahbL6geNM\",\"q2hKt2Sp8sPro5ELh\",\"iDtDLdEPj4wEjhTij\",\"dGugwhA6uwwjPGAa5\",\"og4iEZa6vQMWbF9Ra\",\"CjaydDyyuDqZfG5H5\",\"iRWkFFriwxk5oAbDg\",\"BdvdJYwHZr7JpkHsn\",\"mHT2bJb5SByfJ8yKS\",\"CNc6rmwhbxkxEhHAp\",\"kp2ZbCewZJAbfd7xv\",\"xn7uGNKeAwPEkP9oA\",\"PE4xjAcceoPn7iJYG\",\"8ytCJuKMgphsdRyhW\",\"EXbD3ZjgP9oaoFLYw\",\"4hbbyooKkEJgnfLXF\",\"NRuha6cqGtRYF6r7d\",\"j2ugW5ihGv67sfh4e\",\"Yp7uvStL97cC9fKkY\",\"RGN3QTb5LXj4ZPPkj\",\"c7uBxu2rgY77H5d79\",\"FJhT7FN96ZNApRmh3\",\"XzMxsyYj2ZeZ6Jmis\",\"8TTdgJThtKTy8Y9rv\",\"YQZnW55jKvzDdZ3t5\",\"iWGRAvStRr95HHW3o\",\"zw7g7T8wE5R5CBhXr\",\"qWR7eXxBiNee22A5u\",\"zd9FLSzsGz3evKafy\",\"6y6FFQcSKbJA8QhaN\",\"g4NCSxxHqHCGMpWwT\",\"ZLYBfAascpgGofCPk\",\"q9hj4CJDQ6ACBEh6v\",\"K45zPJxsABuA3WSyj\",\"e9Cknxbx6o7Nb6REs\",\"QRv96jmNaYsWkxQEG\",\"RT4GwzLKJAC7w9Pgm\",\"RtPhDuwmvWNHiBxmG\",\"PGCDJpQMN8Sjn9Gm6\",\"jjdAh4DvpF7jtJDpZ\",\"AQSqD9oNv2uPfxZCR\",\"PytNZK9mNiRiZxPrm\",\"mDWNyaaQ9hvPCRzSd\",\"pBPeMTaRmdFWQezW3\",\"StSFXy92jCt59kcnQ\",\"wJTDDTE3TrmSXKP4d\",\"j5FSQCayX3By73CCw\",\"oDtGiNqDMHmhHE3J8\",\"PH32cNxBjrK4a28sn\",\"Ya3eHgs8x3unZRLpb\",\"tAF9Gf6PiGogbZuWs\",\"EjZrcHc4rqmdxKo7r\",\"CH53jGETBeJTummf3\",\"BdnE4RS5puoxo92mA\",\"AMpQSjKsRqhCDyS2j\",\"nkH3HfJXLMNcBMM79\",\"WnogMFYXoyvmBmGkm\",\"RoGGD5cpHb4ftdLDv\",\"LXKvttZpjJqNiZbea\",\"d8JhF9zfpexkRnCea\",\"jyoLggHk8xQKZuoQC\",\"szQg8dxKNNre3v3Jk\",\"8BJyXvRWcrvN3nttS\",\"zjD5tCskapMK4ax7N\",\"ThaiAKWWDw2W4QfJh\"],\"total\":137,\"quality\":[5,5,5,5,4,5,5,5,4,1,5,5,5,5,5,5,5,5,3,5,5,5,5,4]},\"flags\":0},\"summary\":\"Create a function that finds a target number in a list of prime numbers. Implement a binary search algorithm in your function. The target number will be from 2 through 97. If the target is prime then return \\\"yes\\\" else return \\\"no\\\".\\n\\nExamples\\nvar primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\\n\\nisPrime(pr\",\"tags\":[\"algorithms\",\"validation\",\"interview\"],\"timestamp\":{\"$date\":1584811915635},\"title\":\"Algorithms:  Binary Search\",\"quality\":4.625,\"family\":[{\"_id\":\"ib855nxgek4Wjjvb7\",\"language\":\"cpp\"},{\"_id\":\"zHXnh6Eoej7NrHvFu\",\"language\":\"csharp\"},{\"_id\":\"5puuiuvW48dEsjkzW\",\"language\":\"javascript\"},{\"_id\":\"kKFuf9hfo2qnu7pBe\",\"language\":\"python3\"},{\"_id\":\"ZcBZiCmXjE5rtdAPT\",\"language\":\"ruby\"}]}}"]