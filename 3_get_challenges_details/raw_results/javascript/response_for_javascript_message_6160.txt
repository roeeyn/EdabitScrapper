a["{\"msg\":\"result\",\"id\":\"1824\",\"result\":{\"_id\":\"BjpT9DZhCteCveeP2\",\"author\":\"Mubashir Hassan \",\"authorId\":\"T6iBEE2jp7f7iEF2P\",\"code\":\"function sumFF(a) {\\n\\t\\n}\",\"difficulty\":2.64,\"quality\":0,\"familyId\":\"xMQR2Loi4xMjdsrbf\",\"instructions\":\"Create a function that takes a number and returns the sum of **factors** of **factors** of the given number.\\n\\n### Examples\\n```\\nsumFF(69) ➞ 3, 23 ➞ 0\\n// Both 3 and 23 are prime numbers and have no factors\\n// other than 1 and themselves so the result is 0.\\n\\nsumFF(12) ➞ 2, 3, 4, 6 ➞ (0) + (0) + (2) + (2+3) ➞ 7\\n\\nsumFF(420) ➞ 2,4, 6, 10, 12 ... ➞ (2) + (2+3) + (2+5) + (2+3+4+6) ... ➞ 1175\\n\\nsumFF(619) ➞ ___ ➞ 0\\n// 619 doesn't have any factors (other than 1 and 619).\\n```\\n\\n### Notes\\n- The number will always be greater than 0.\\n- Factors that are equal to the number or 1, don't count (see example #1).\",\"isHidden\":false,\"lab\":\"Test.assertEquals(sumFF(98), 16)\\nTest.assertEquals(sumFF(435), 74)\\nTest.assertEquals(sumFF(534), 188)\\nTest.assertEquals(sumFF(3123), 353)\\nTest.assertEquals(sumFF(1232), 1931)\\nTest.assertEquals(sumFF(12), 7)\\nTest.assertEquals(sumFF(31232), 32630)\\nTest.assertEquals(sumFF(4234), 208)\\nTest.assertEquals(sumFF(655), 0)\\nTest.assertEquals(sumFF(432), 1240)\\nTest.assertEquals(sumFF(2343), 170)\",\"language\":\"javascript\",\"summary\":\"Create a function that takes a number and returns the sum of factors of factors of the given number.\\n\\nExamples\\nsumFF(69) ➞ 3, 23 ➞ 0\\n// Both 3 and 23 are prime numbers and have no factors\\n// other than 1 and themselves so the result is 0.\\n\\nsumFF(12) ➞ 2, 3, 4, 6 ➞ (0) + (0) + (2) + (2+3) ➞ 7\\n\\nsumFF(420) ➞ 2,4, 6, 10, 12 ... ➞ (2) + (2+3) + (2+5) + (2+3+4+6) ..\",\"tags\":[\"loops\",\"math\",\"numbers\"],\"timestamp\":{\"$date\":1601267138791},\"title\":\"Sum of Factors of Factors\",\"stats\":{\"completed\":{\"total\":23,\"ratings\":[2,2,2,2,2,2,3,3,2,1,3,3,3,3,2,3,3,2,2,4,4,2,4,4,3],\"quality\":[],\"rators\":[\"CNc6rmwhbxkxEhHAp\",\"dGugwhA6uwwjPGAa5\",\"buX4mCQhtXCfBjeno\",\"yjtdwc2AC4jA2RWtn\",\"QRv96jmNaYsWkxQEG\",\"mHT2bJb5SByfJ8yKS\",\"xn7uGNKeAwPEkP9oA\",\"6J6g5TwWz67cN7Zy6\",\"srJ34BaybkQh3qRkM\",\"ftXLsTaA7yHmhuEsY\",\"8BJyXvRWcrvN3nttS\",\"tAF9Gf6PiGogbZuWs\",\"RE4Mm9T6Q9uygAxGS\",\"jAKp3iwAnjny4foA5\",\"oDtGiNqDMHmhHE3J8\",\"GGprTwrkjuccmrQRg\",\"DHwbkbzYNpmkSFT7u\",\"ThaiAKWWDw2W4QfJh\",\"HsCoAbZ2Kajk9qyie\",\"LwD3CyYSiBfg3mA4r\"]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"3S7ppG3ipWHutYJmn\",\"language\":\"cpp\"},{\"_id\":\"dcbxv2ueHDtcHz8pZ\",\"language\":\"csharp\"},{\"_id\":\"BjpT9DZhCteCveeP2\",\"language\":\"javascript\"},{\"_id\":\"6hh5BsRivRwMhiZrt\",\"language\":\"python3\"},{\"_id\":\"ZvmqgirukEshnQq7s\",\"language\":\"ruby\"},{\"_id\":\"9tKuAknutHC3pndZp\",\"language\":\"swift\"}]}}"]