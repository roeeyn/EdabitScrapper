a["{\"msg\":\"result\",\"id\":\"1313\",\"result\":{\"_id\":\"P5aEB9rvFibg4rRBg\",\"author\":\"zatoichi49\",\"authorId\":\"tAF9Gf6PiGogbZuWs\",\"code\":\"function palindromeType(n) {\\n\\n}\",\"difficulty\":2.104,\"familyId\":\"waoZFa8oKDpJQD9CE\",\"instructions\":\"A number/string is a *palindrome* if the digits/characters are the same when read both forward and backward. Examples include \\\"racecar\\\" and 12321.  Given a positive number `n`, check if `n` or the binary representation of `n` is palindromic. Return the following:\\n\\n- `\\\"Decimal only.\\\"` if only `n` is a palindrome.\\n- `\\\"Binary only.\\\"` if only the binary representation of `n` is a palindrome.\\n- `\\\"Decimal and binary.\\\"` if both are palindromes.\\n- `\\\"Neither!\\\"` if neither are palindromes.\\n\\n### Examples\\n```\\npalindromeType(1306031) ➞ \\\"Decimal only.\\\"\\n// decimal = 1306031\\n// binary  = \\\"100111110110110101111\\\"\\n\\npalindromeType(427787) ➞ \\\"Binary only.\\\"\\n// decimal = 427787\\n// binary  = \\\"1101000011100001011\\\"\\n\\npalindromeType(313) ➞ \\\"Decimal and binary.\\\"\\n// decimal = 313\\n// binary  = 100111001\\n\\npalindromeType(934) ➞ \\\"Neither!\\\"\\n// decimal = 934\\n// binary  = \\\"1110100110\\\"\\n```\\n\\n### Notes\\nCheck the **Resources** tab for ways to convert to binary.\",\"isHidden\":false,\"lab\":\"Test.assertEquals(palindromeType(1934391), \\\"Decimal and binary.\\\")\\nTest.assertEquals(palindromeType(9994521), \\\"Binary only.\\\")\\nTest.assertEquals(palindromeType(5841485), \\\"Decimal and binary.\\\")\\nTest.assertEquals(palindromeType(8337738), \\\"Neither!\\\")\\nTest.assertEquals(palindromeType(7447), \\\"Decimal and binary.\\\")\\nTest.assertEquals(palindromeType(18985), \\\"Binary only.\\\")\\nTest.assertEquals(palindromeType(7), \\\"Decimal and binary.\\\")\\nTest.assertEquals(palindromeType(1306031), \\\"Decimal only.\\\")\\nTest.assertEquals(palindromeType(1), \\\"Decimal and binary.\\\")\\nTest.assertEquals(palindromeType(1903127), \\\"Binary only.\\\")\\nTest.assertEquals(palindromeType(4), \\\"Decimal only.\\\")\\nTest.assertEquals(palindromeType(48084), \\\"Decimal only.\\\")\\nTest.assertEquals(palindromeType(427787), \\\"Binary only.\\\")\\nTest.assertEquals(palindromeType(456), \\\"Neither!\\\")\\nTest.assertEquals(palindromeType(313), \\\"Decimal and binary.\\\")\\nTest.assertEquals(palindromeType(3664663), \\\"Decimal only.\\\")\\nTest.assertEquals(palindromeType(585585), \\\"Decimal and binary.\\\")\\nTest.assertEquals(palindromeType(14441), \\\"Decimal only.\\\")\\nTest.assertEquals(palindromeType(8494948), \\\"Decimal only.\\\")\\nTest.assertEquals(palindromeType(932), \\\"Neither!\\\")\\nTest.assertEquals(palindromeType(7115931), \\\"Binary only.\\\")\\nTest.assertEquals(palindromeType(101), \\\"Decimal only.\\\")\\nTest.assertEquals(palindromeType(6286333), \\\"Binary only.\\\")\",\"language\":\"javascript\",\"summary\":\"A number/string is a palindrome if the digits/characters are the same when read both forward and backward. Examples include \\\"racecar\\\" and 12321.  Given a positive number n, check if n or the binary representation of n is palindromic. Return the following:\\n\\n\\\"Decimal only.\\\" if only n is a palindrome.\\n\\\"Binary only.\\\" if only the binary representation of n is a pal\",\"tags\":[\"numbers\",\"strings\"],\"timestamp\":{\"$date\":1577642574825},\"title\":\"Decimal and Binary Palindromes\",\"stats\":{\"completed\":{\"total\":147,\"ratings\":[2,2,2,2,2,1,3,3,1,3,2,0,1,2,2,2,2,3,2,2,3,2,2,1,2,2,1,2,3,2,2,0,2,3,3,0,3,2,1,2,1,1,1,1,2,3,2,2,3,3,3,0,2,2,4,3,3,0,3,2,1,3,0,3,3,2,2,2,3,3,3,1,3,3,3,1,1,2,3,2,3,2,2,2,3,3,2,3,2,3,2,2,2,2,1,2,0,3,0,3,3,3,1,1,3,2,2,3,3,1,3,0,2,3,1,3,2,3,3,3,3,3,5,1,2],\"rators\":[\"5Zq3aGdvh4LHBvnJL\",\"avx225AcMX6ANSNW9\",\"BdvdJYwHZr7JpkHsn\",\"yjtdwc2AC4jA2RWtn\",\"EWn8w8P3nNh7knatY\",\"AasGs8AeX9Lcb9xJn\",\"n5wubRfh6zh8QRymN\",\"byrKwHgawbFgyAcgo\",\"jqbm8L6895JgAtZ6H\",\"FJsvM5yqKuK9yMk9P\",\"2innwjWqxJHo4eRGh\",\"3K9yDMNkwanR9NWh3\",\"Y9Nz9yafaibz54W4o\",\"XKi8iZXBCHCaebSHh\",\"RE4Mm9T6Q9uygAxGS\",\"6BpBQnSGhzgvhXrEy\",\"zgoq9MhrL2h75DAMA\",\"9XnGoq9Tv6ut3zTtH\",\"z6QfbuG6TXE7GKynQ\",\"2NJuDfSqdrF8kHHni\",\"MzwFbhCbZwQ3DSL6Q\",\"TpGA9q73qQPFbQcSv\",\"REWERn3LH8vj9AnLh\",\"fsPCKb9zwM9PZJ6P8\",\"SDtZFL5NzAoCPofXk\",\"CREQCYFmu2zX8rNfg\",\"TPrfNreYTj6pQQBh7\",\"FEq63WpddEGnzGFmv\",\"iTh4digAQ2EnhYegk\",\"74fAx6fd26LEPEKmi\",\"3YsMNyHYMX9FePN8S\",\"ZPAfXdkcbjiJ7bbf4\",\"cRpaCxYRmGcN3Nsoj\",\"4NsFytKfF4GLQ87XE\",\"65dbBZynphj53nXqA\",\"5NGxHLcQ8Af2RJ4TN\",\"CuY5BaTCcu7Mp9tDu\",\"yPMMpGcrMzkphwuBM\",\"MirRzeLMd2eogRS4t\",\"JzqHhzLHmzrpieRkz\",\"3TgKAjuBzttpdtrxx\",\"54Ka62KytXRsrLPhZ\",\"4NRnNmjA8XBwcRo9r\",\"Hv67PRGiR65kHT9yy\",\"fxe5vvH6WnsXwDqYp\",\"bzm5WayBjwad5jhdR\",\"7Mzww5m6cBaA78JQr\",\"tuTQhfZC5izTmXEgR\",\"yQtGE2egvwYnNQSFc\",\"gtbK6d8XpqHFiY37A\",\"FKygx25WhPWku46T2\",\"XSowcGMedgyp37Hts\",\"EAuL56kpyLytw4RcR\",\"p2woPCQKXuWJCwffJ\",\"wo4cpen33NYFHNca7\",\"8vvBFgSesJuLkxkwW\",\"yFjWRGvstfQYKfwfA\",\"s5zzhdSQFAa9PbYur\",\"nB2zvS7Cwaz58JyfP\",\"h7NtzgiEwzaCcKpDR\",\"8BFSTCnoe2QggN64c\",\"Yqbi5tfNqarWpQGKh\",\"L9XxCiDxYJGcMQvxF\",\"YGYzqaDrwa2SdqKt8\",\"Xk2g4CNFAnYcvxiSr\",\"mHaHudYExvi45DSRf\",\"49uuzwkpBg45xAwrN\",\"JGBCMpnbbi5ztuFoX\",\"s3mTvPw28MPAbv4E4\",\"EjPLq3QSJdGQFJdgW\",\"EPuAwwwemWSKzSBWe\",\"tPtz279rzBX8kCWMr\",\"Ehrta9env9HXyrGbW\",\"9Pzg45NEiRXhLtLh3\",\"vWhgrr5oem8WtKdxm\",\"YER6iBcpJCuhgrYDN\",\"pd8dm7sWLW9cY6dYW\",\"r6FtLwiu6SpgnJJzw\",\"uAS9uKs8KQmp8uhqn\",\"a777e8chPvJkY3tKa\",\"2ZFoLTxcCARhwc8xX\",\"pi76g3eRpnKrhee2a\",\"Es4eX2stRpyoXeC7f\",\"Ya3eHgs8x3unZRLpb\",\"dbk9NQ2tuYdEa6BCY\",\"E2hpke7mHxAWsw5t9\",\"C9LKGu2g5hSijvDzA\",\"buX4mCQhtXCfBjeno\",\"mHT2bJb5SByfJ8yKS\",\"aEm3Wvj2rFYRL8Lrb\",\"XtZfZuXwcaivjtS3T\",\"QRv96jmNaYsWkxQEG\",\"bX6tpTCjwoi6XMMbK\",\"yuLxi2qBJvMnwgdgJ\",\"eoepTq5ES5tfgY9XT\",\"tAF9Gf6PiGogbZuWs\",\"veKWMS3ACmRWTjiLK\",\"FioqXbWFJxdCop35Z\",\"iJC8PmpzSyTnEDqw5\",\"eGmzRsSATFsE2wjJa\",\"QnPD4Sv6W4LHc2Qng\",\"yrLBMbni8KDsC5K44\",\"kp2ZbCewZJAbfd7xv\",\"oDnPTXrzYF4snDPXY\",\"4Xv87xmdSnpYhi8hz\",\"7gZKfvwaeqsGKXMEN\",\"CNc6rmwhbxkxEhHAp\",\"DjChaA6HXG2vBe4fK\",\"dGugwhA6uwwjPGAa5\",\"yCeddtASCT5NFPJTP\",\"M4vq8ATaS9Jg5X7iP\",\"zw7g7T8wE5R5CBhXr\",\"g4NCSxxHqHCGMpWwT\",\"qWR7eXxBiNee22A5u\",\"5ETJzzAbWHw9GkWCn\",\"e9Cknxbx6o7Nb6REs\",\"zd9FLSzsGz3evKafy\",\"szQg8dxKNNre3v3Jk\",\"DPi9QGLctq2y76KuE\",\"PTo9qt93YqGvL8fCa\",\"AFfw7cGg83uYk2Miy\",\"6ebrCvp8uXBsTuwrA\",\"RtPhDuwmvWNHiBxmG\",\"u9cRf5kvtpRB5ffB3\",\"8s5Bdrn7RTga7DL6x\",\"NGvCPuMiAP3xrRLfB\",\"oDtGiNqDMHmhHE3J8\",\"49XFttjKo2QhEWT3R\",\"srJ34BaybkQh3qRkM\",\"RoGGD5cpHb4ftdLDv\",\"jyoLggHk8xQKZuoQC\",\"Yp7uvStL97cC9fKkY\",\"nkH3HfJXLMNcBMM79\"],\"quality\":[5,5,5,5,4,5,5,5,3,3,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":4.615384615384615,\"family\":[{\"_id\":\"x2E67xrzD4dPLWaBs\",\"language\":\"cpp\"},{\"_id\":\"P5aEB9rvFibg4rRBg\",\"language\":\"javascript\"},{\"_id\":\"QuxCNBLcGJReCawjz\",\"language\":\"python3\"},{\"_id\":\"LPWGhq4TSAGjDDa76\",\"language\":\"ruby\"}]}}"]