a["{\"msg\":\"result\",\"id\":\"861\",\"result\":{\"_id\":\"RQ667jEXGy7Kx7FFG\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"function getTriangleType(arr) {\\n\\t\\n}\",\"difficulty\":1.5928571428571427,\"familyId\":\"SEC9Nu5Yj3uNYhugK\",\"instructions\":\"Create a function which returns the type of triangle, given the side lengths. Return the following values if they match the criteria.\\n\\n- No sides equal: `\\\"scalene\\\"`\\n- Two sides equal: `\\\"isosceles\\\"`\\n- All sides equal: `\\\"equilateral\\\"`\\n- Less or more than 3 sides given: `\\\"not a triangle\\\"`\\n\\n### Examples\\n```\\ngetTriangleType([2, 6, 5]) ➞ \\\"scalene\\\"\\n\\ngetTriangleType([4, 4, 7]) ➞ \\\"isosceles\\\"\\n\\ngetTriangleType([8, 8, 8]) ➞ \\\"equilateral\\\"\\n\\ngetTriangleType([3, 5, 5, 2]) ➞ \\\"not a triangle\\\"\\n```\\n\\n### Notes\\n- You will be given an array of positive integers.\\n- Check the **Resources** tab for more information on the types of triangles.\",\"isHidden\":false,\"lab\":\"Test.assertEquals(getTriangleType([2, 3, 4]), \\\"scalene\\\")\\nTest.assertEquals(getTriangleType([4, 4, 7]), \\\"isosceles\\\")\\nTest.assertEquals(getTriangleType([8, 8, 8]), \\\"equilateral\\\")\\nTest.assertEquals(getTriangleType([3, 5, 5, 2]), \\\"not a triangle\\\")\\nTest.assertEquals(getTriangleType([4, 4, 1]), \\\"isosceles\\\")\\nTest.assertEquals(getTriangleType([4, 4, 2]), \\\"isosceles\\\")\\nTest.assertEquals(getTriangleType([3, 1, 3]), \\\"isosceles\\\")\\nTest.assertEquals(getTriangleType([1]), \\\"not a triangle\\\")\\nTest.assertEquals(getTriangleType([4, 4, 3]), \\\"isosceles\\\")\\nTest.assertEquals(getTriangleType([10]), \\\"not a triangle\\\")\\nTest.assertEquals(getTriangleType([4, 1, 4]), \\\"isosceles\\\")\\nTest.assertEquals(getTriangleType([3, 3, 3]), \\\"equilateral\\\")\\nTest.assertEquals(getTriangleType([2, 3, 4]), \\\"scalene\\\")\\nTest.assertEquals(getTriangleType([1, 5, 5]), \\\"isosceles\\\")\\nTest.assertEquals(getTriangleType([5, 7, 4]), \\\"scalene\\\")\\nTest.assertEquals(getTriangleType([3, 3, 2]), \\\"isosceles\\\")\\nTest.assertEquals(getTriangleType([2, 1, 2]), \\\"isosceles\\\")\\nTest.assertEquals(getTriangleType([9, 7, 9, 5, 3]), \\\"not a triangle\\\")\\nTest.assertEquals(getTriangleType([4, 4, 1]), \\\"isosceles\\\")\\nTest.assertEquals(getTriangleType([10, 8, 3, 2]), \\\"not a triangle\\\")\\nTest.assertEquals(getTriangleType([4]), \\\"not a triangle\\\")\\nTest.assertEquals(getTriangleType([4, 6, 9]), \\\"scalene\\\")\\nTest.assertEquals(getTriangleType([4, 2, 5]), \\\"scalene\\\")\\nTest.assertEquals(getTriangleType([6, 7]), \\\"not a triangle\\\")\\nTest.assertEquals(getTriangleType([3, 2, 3]), \\\"isosceles\\\")\\nTest.assertEquals(getTriangleType([2, 4, 4]), \\\"isosceles\\\")\\nTest.assertEquals(getTriangleType([3, 3, 1]), \\\"isosceles\\\")\\nTest.assertEquals(getTriangleType([12, 7, 6]), \\\"scalene\\\")\\nTest.assertEquals(getTriangleType([6, 2, 6]), \\\"isosceles\\\")\\nTest.assertEquals(getTriangleType([1, 2, 2]), \\\"isosceles\\\")\\nTest.assertEquals(getTriangleType([1, 4, 4]), \\\"isosceles\\\")\\nTest.assertEquals(getTriangleType([4, 4, 2]), \\\"isosceles\\\")\\nTest.assertEquals(getTriangleType([3, 3, 2]), \\\"isosceles\\\")\\nTest.assertEquals(getTriangleType([3, 3, 3]), \\\"equilateral\\\")\\nTest.assertEquals(getTriangleType([9, 9, 3]), \\\"isosceles\\\")\\nTest.assertEquals(getTriangleType([3, 3, 1]), \\\"isosceles\\\")\\nTest.assertEquals(getTriangleType([4, 4, 4]), \\\"equilateral\\\")\\nTest.assertEquals(getTriangleType([4, 3, 3]), \\\"isosceles\\\")\\nTest.assertEquals(getTriangleType([3, 4, 4]), \\\"isosceles\\\")\\nTest.assertEquals(getTriangleType([1, 4, 4]), \\\"isosceles\\\")\\nTest.assertEquals(getTriangleType([4, 7, 9]), \\\"scalene\\\")\\nTest.assertEquals(getTriangleType([1, 9, 9]), \\\"isosceles\\\")\\nTest.assertEquals(getTriangleType([2, 2, 2]), \\\"equilateral\\\")\\nTest.assertEquals(getTriangleType([100, 2, 100]), \\\"isosceles\\\")\",\"language\":\"javascript\",\"summary\":\"Create a function which returns the type of triangle, given the side lengths. Return the following values if they match the criteria.\\n\\nNo sides equal: \\\"scalene\\\"\\nTwo sides equal: \\\"isosceles\\\"\\nAll sides equal: \\\"equilateral\\\"\\nLess or more than 3 sides given: \\\"not a triangle\\\"\\n\\nExamples\\ngetTriangleType([2, 6, 5]) ➞ \\\"scalene\\\"\\n\\ngetTriangleType([4, 4, 7]) ➞ \\\"isosceles\\\"\",\"tags\":[\"conditions\",\"math\",\"arrays\",\"geometry\"],\"timestamp\":{\"$date\":1595625786058},\"title\":\"What Type of Triangle?\",\"stats\":{\"completed\":{\"total\":170,\"ratings\":[1,1,1,1,1,0,2,2,2,2,1,2,2,1,1,0,1,2,2,2,2,2,1,0,1,2,1,2,1,2,2,1,2,1,1,3,1,2,2,0,2,2,2,2,2,0,2,2,2,2,0,2,3,2,2,2,2,1,1,2,2,1,3,2,2,2,3,1,0,2,2,3,0,1,2,5,1,2,0,3,2,0,2,2,2,1,2,0,2,0,0,2,2,0,1,1,2,2,2,4,1,1,2,1,2,2,2,2,2,2,2,1,1,1,2,2,5,0,0,2,1,2,2,2,0,1,2,1,2,2,2,2,0,2,1,1,3,3,2,2],\"rators\":[\"mAARx8JHyScLzDA5W\",\"tAF9Gf6PiGogbZuWs\",\"4utrZXhg7w65Q2pG8\",\"pLpcDC3EYx2DDQSdt\",\"buX4mCQhtXCfBjeno\",\"qvNk7pHSveLu3jqWw\",\"dXEMmSzNjnaoi5CsX\",\"PGCDJpQMN8Sjn9Gm6\",\"mwg8jvMHHmQiQRrbr\",\"r7mZLgpQWzRiGddL5\",\"coTsXQZW59EjCAB9d\",\"qAEumdjLRx2AGAmzw\",\"QRv96jmNaYsWkxQEG\",\"eoepTq5ES5tfgY9XT\",\"FJsvM5yqKuK9yMk9P\",\"bX6tpTCjwoi6XMMbK\",\"jnyub52Fi79drGvow\",\"mHT2bJb5SByfJ8yKS\",\"yjtdwc2AC4jA2RWtn\",\"aEm3Wvj2rFYRL8Lrb\",\"nAmJEX7BkHLd9LsG2\",\"n5wubRfh6zh8QRymN\",\"iGKA6gtfSoHnHZNh6\",\"YLuJ7h27mr2GMcMt6\",\"H46gRHmkdz2CRrGH9\",\"7gZKfvwaeqsGKXMEN\",\"E2hpke7mHxAWsw5t9\",\"hvYbZvkaJqfveoDHm\",\"mwDdQwbZN6tXwAbBA\",\"65dbBZynphj53nXqA\",\"WbXHZDxj5femhG7x2\",\"nkH3HfJXLMNcBMM79\",\"Ya3eHgs8x3unZRLpb\",\"vtHbevf2tHqe6mRxX\",\"Po3v3dHCk6wYGKMwi\",\"j2ugW5ihGv67sfh4e\",\"AFfw7cGg83uYk2Miy\",\"z5ebtimXwFFJdYxoa\",\"ttuGK7od8simjgmCJ\",\"evTTY9hwrtogaNxXn\",\"moe6ztrsNzFymC3A7\",\"6BpBQnSGhzgvhXrEy\",\"s9qcJASB9WKPWaQzi\",\"wrxHLcdBEri4cyK6W\",\"i5QeAsrM4m6hzPTku\",\"PAzNgJF54C2mYPkR9\",\"SNiJRRosrmSWssLj4\",\"p5ZshR8zhTqmdhKDc\",\"RE4Mm9T6Q9uygAxGS\",\"Qp3LB3TcLgoiJSFCc\",\"a777e8chPvJkY3tKa\",\"jkumHyXfMkhGcPgqC\",\"BdnE4RS5puoxo92mA\",\"jED84My7PjSKANQsX\",\"He6kxXnL8J8bnjaGk\",\"4ntYzGHHBgqf58udP\",\"u9cRf5kvtpRB5ffB3\",\"2GqHbu7h7ajqtqkXv\",\"Nb6LYPoQP6KJZt8mz\",\"eQXwk5zGckM8tCWYH\",\"2tCCFm5iefjrRSaxv\",\"Rkx7iZDae2cxstbBT\",\"jtzNdgDCzsekkdpxA\",\"atR7uPt3durx85RSa\",\"MbbySGQmkzbjg373M\",\"nhWLv6D8eZJ5ggKKX\",\"kp2ZbCewZJAbfd7xv\",\"cp3X8hk8yNME7qoD9\",\"7wtuhPesfhcYsfZaZ\",\"it4R7mNQ7MTvJkLDm\",\"aBx4p85s2WcD52mTp\",\"6whLhSSADkDKmaN9s\",\"ExSyiaZeGz4PCKro9\",\"odsounnq6xTN26zSz\",\"GGQDpkXJGa2eLMnKT\",\"bXaGdBM8FBLHf7N6Y\",\"RnY25enEBE8T9P5GS\",\"g4NCSxxHqHCGMpWwT\",\"zw7g7T8wE5R5CBhXr\",\"JZ5mQXCKxaFjrnGtq\",\"BdvdJYwHZr7JpkHsn\",\"DDokdbBKxv49M445o\",\"nxycxLNEN4PXDotSh\",\"CH53jGETBeJTummf3\",\"nyh73Tr6GhqAat78g\",\"vewKwcMeGuk3p3MsN\",\"M4vq8ATaS9Jg5X7iP\",\"jLSZdBseR2kfjt8dL\",\"vGKxRcDYDsXzTQuEQ\",\"Yp7uvStL97cC9fKkY\",\"xsDyJstYoBZRS8pJH\",\"QYqK32Y6AxvT74Aaa\",\"omn98QP6uBd923Azp\",\"2e4Rom2DKp6QrdG2s\",\"8EJ4j2fcfjTJ7Zrzu\",\"srJ34BaybkQh3qRkM\",\"3Gf7ikLijfoxabiPY\",\"XzMxsyYj2ZeZ6Jmis\",\"nDCNsJvKvsAS5F8PS\",\"RtPhDuwmvWNHiBxmG\",\"fe3gsFT3MbZ4azEC9\",\"bBRzXPk7u95YuDWEL\",\"zgoq9MhrL2h75DAMA\",\"m6qKkBY4aPWziyJTj\",\"6J6g5TwWz67cN7Zy6\",\"pHv2HpBQZucFNtLqh\",\"yZJhbcWnafckQgNwX\",\"odELiWKpbNjnvAr7G\",\"BdwZ39RhdvRryPxev\",\"DPi9QGLctq2y76KuE\",\"2Ni3PzJAc5fAhqBkb\",\"5hHf2e9zimbmxMqqF\",\"tD54KD2ysHSoXXyLj\",\"rpNNPWzdFCc9TzKMz\",\"STipuJs6kBvPqqsSE\",\"2Qk2mFu9HBFzrB24i\",\"ApqWTmEEkTCsDou48\",\"npp5hesJrst6ghKSM\",\"erQgJKaHaETRcqs4x\",\"Ae25c4dPiSA32encP\",\"cgCQDs9i7yChKeAjE\",\"ftXLsTaA7yHmhuEsY\",\"wJTDDTE3TrmSXKP4d\",\"PAnur8xLTthNL3epT\",\"aceiudXAwD9RuB83z\",\"pi76g3eRpnKrhee2a\",\"733qgZ7ZSSSrzbXGw\",\"8BJyXvRWcrvN3nttS\",\"6RGzh56aKCssdudcb\",\"AasGs8AeX9Lcb9xJn\",\"NGvCPuMiAP3xrRLfB\",\"LwD3CyYSiBfg3mA4r\",\"BLTau8hhEbQYFaRRr\",\"FGEeCTorXbX3WvjFW\",\"n4Y5EEGCjmrK99yrt\",\"nBJve5CzG6WAw7WFQ\",\"gXTAie79kiw28tx5u\",\"jyoLggHk8xQKZuoQC\",\"Kt6oGAfrymXmAnn2d\",\"sN2JyFeJCwfwwHPwF\",\"mpLFbFKjY6u3nsDMv\",\"bfYmA3LMvhSrK59cn\",\"xDAFpyPccCzDaChCk\",\"QGjY3hgPYPMmMjc7j\",\"oyB4Wr4EeZnoDaa8B\",\"sMcFMPkMJC4Kh6ymj\",\"ZKuwzkssrSsDGNPr5\",\"9XnGoq9Tv6ut3zTtH\",\"aAFajcygMskKDBPsH\",\"rPsSEYqwmttMPEuvo\",\"oDtGiNqDMHmhHE3J8\",\"z47JaNrQMgvuPx5HE\",\"HCfkcKnPs9mrJojdG\",\"K45zPJxsABuA3WSyj\",\"uxKGACwmZ6FNZsMwE\",\"inbiBEY2tizFwkN84\",\"PTo9qt93YqGvL8fCa\",\"eomLS3wh6tQPN8jtH\",\"QguFWo84zgF3c8BGr\",\"mL3DHoK2RxfxFRNhi\",\"LPZ2QKCoB8q6rG25c\"],\"quality\":[5,5,5,5,4,4,3,4,4,4,5,5,5,3,5,5,3,5,5,5,5,5,5,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":4.576923076923077,\"family\":[{\"_id\":\"Hwa3x8E3xyyauHJdk\",\"language\":\"cpp\"},{\"_id\":\"RQ667jEXGy7Kx7FFG\",\"language\":\"javascript\"},{\"_id\":\"ancAxGEF9MsLWXDqe\",\"language\":\"python3\"},{\"_id\":\"e3WgBGiBk3EQMKM8m\",\"language\":\"ruby\"}]}}"]