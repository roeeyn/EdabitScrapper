a["{\"msg\":\"result\",\"id\":\"666\",\"result\":{\"_id\":\"BdJWELgsSr5nktqAG\",\"author\":\"Isaac Pak\",\"authorId\":\"yaL57wdXmgAZTvKfX\",\"code\":\"const REGEXP = /* Write your expression here */g\",\"difficulty\":1.4414893617021276,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"k2ZKxxCAFTk6Hguhm\",\"instructions\":\"**Quantifiers** indicate numbers of characters or expressions to match. By default quantifiers like * and + are \\\"greedy\\\", meaning that they try to match as much of the string as possible. The `?` character after the quantifier makes the quantifier \\\"non-greedy\\\": meaning that it will stop as soon as it finds a match.\\n\\n```\\n\\\"some <foo> <bar> new </bar> </foo> thing\\\".match(/<.*>/) ➞ \\\"<foo> <bar> new </bar> </foo>\\\"\\n\\\"some <foo> <bar> new </bar> </foo> thing\\\".match(/<.*?>/) ➞ \\\"<foo>\\\"\\n```\\n\\nFind all HTML comments in the text. Use the `?` in your expression.\\n\\n```let regexp = /your regexp/g;\\n\\nlet str = `... <!-- My -- comment test --> ..  <!----> .. `;\\n\\nstr.match(regexp) ➞ \\\"<!-- My -- comment test -->\\\", \\\"<!---->\\\"\\n```\\n\\n### Notes\\nCheck the **Resources** if you get stuck.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"let str = \\\"... <!-- My -- comment test --> ..  <!----> .. \\\";\\n\\nconst validate = (REGEXP) => {\\n\\t if(!/\\\\?/.test(String(REGEXP))) return () => \\\"invalid\\\" \\n\\t return function testReg(str) {\\n\\t\\treturn str.match(REGEXP);\\n\\t }\\n}\\n\\nconst testExp = validate(REGEXP)\\n\\nTest.assertNotEquals(testExp(str), \\\"invalid\\\", \\\"You are require to use the character ? in set your expression.\\\")\\nTest.assertSimilar(testExp(str), ['<!-- My -- comment test -->', '<!---->'])\\n\\n\\n// credits to https://javascript.info/regexp-greedy-and-lazy\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,1,2,1,2,0,2,1,0,1,0,0,2,1,0,2,2,3,2,2,2,2,2,2,2,0,0,1,1,1,1,2,1,1,1,1,2,2,1,2,1,2,0,2,2,0,2,2,2,1,1,1,1,1,2,2,2,2,0,1,1,2,0,0,2,1,0,2,3,1,2,2,1,2,3,2,1,1,1,2,2,2,2,1,0,2,2,0,2,0,2,3,2,2,2,2,1,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,0,2,2,1,2,3,2,0,1,3,2,1,2,2,2,2,2,0,1,0,2,0,2,1,2,1,0,1,0,0,0,2,0,2,2,0,2,2,0,2,2,2,5,2,1,2,0,1,1,2,2,2,1,1,1,1,1,2,2,2,0,0,2,2,1,1,1,1,1,2,1],\"rators\":[\"yaL57wdXmgAZTvKfX\",\"n5wubRfh6zh8QRymN\",\"mHT2bJb5SByfJ8yKS\",\"yjtdwc2AC4jA2RWtn\",\"RE4Mm9T6Q9uygAxGS\",\"CuY5BaTCcu7Mp9tDu\",\"pi76g3eRpnKrhee2a\",\"5Zq3aGdvh4LHBvnJL\",\"k5TGxBtLi9BXxeChT\",\"Y9Nz9yafaibz54W4o\",\"eANW47mfA359Y6JyP\",\"PAzNgJF54C2mYPkR9\",\"JLzfmQ5x4weTZKhLt\",\"SNt23Ei5dSNtfpEMd\",\"jcPZ5ySXseCB7Ec3x\",\"vQ5JYxiPeSnGpTdEF\",\"jqbm8L6895JgAtZ6H\",\"YER6iBcpJCuhgrYDN\",\"9Pzg45NEiRXhLtLh3\",\"6BpBQnSGhzgvhXrEy\",\"SNiJRRosrmSWssLj4\",\"vtHbevf2tHqe6mRxX\",\"EWn8w8P3nNh7knatY\",\"QEhgdaBYvvTH4GpoN\",\"2innwjWqxJHo4eRGh\",\"Nv5a34gxg5yvLKRW8\",\"EjPLq3QSJdGQFJdgW\",\"9XnGoq9Tv6ut3zTtH\",\"FJsvM5yqKuK9yMk9P\",\"TiqnGGfTYcXZengMZ\",\"v2AzBqD64zLiRD9bP\",\"vWhgrr5oem8WtKdxm\",\"R35tqE5etfTYTfmGr\",\"eTzbu6t7YpD3mK3PY\",\"5NGxHLcQ8Af2RJ4TN\",\"Po3v3dHCk6wYGKMwi\",\"ZtniSFrgec4oj6Pxm\",\"DK4ksqxgDytWFtdq7\",\"gzTs5oFrfZwh3Kfze\",\"AasGs8AeX9Lcb9xJn\",\"YLqdr7bYjwew2KM4N\",\"d9LBRxvADNBB5QJMB\",\"dDFJpK4pXCsQYuHmc\",\"7wtuhPesfhcYsfZaZ\",\"eomLS3wh6tQPN8jtH\",\"3aZvfgr2H2WF8Yog2\",\"yFGcFfNsHt2Z4G5a9\",\"a777e8chPvJkY3tKa\",\"Gc2bmsof5vD2Hsgqv\",\"65dbBZynphj53nXqA\",\"YSmLyP3eRhcFjJPzg\",\"2oNCBeLCQ974DKvb8\",\"tAF9Gf6PiGogbZuWs\",\"S6n5P7pGiEu2mQuFD\",\"szQg8dxKNNre3v3Jk\",\"dNqjHnaTsgqBFDxTC\",\"2ZFoLTxcCARhwc8xX\",\"ipiC2qPhKZWsAouJf\",\"Q9KQomTTPBsrkAL6c\",\"kDuH45yzb6PDtwhi6\",\"eQXwk5zGckM8tCWYH\",\"sAhNjH3HZ9tSSSKTX\",\"zw7g7T8wE5R5CBhXr\",\"RqnvM77EkZZD9W2Q3\",\"oyB4Wr4EeZnoDaa8B\",\"vn6nR36mdfY8z2zKx\",\"M4vq8ATaS9Jg5X7iP\",\"GCsLzWAhLvniQqR3J\",\"f6uGKbmMdBYCjrMBh\",\"uDL732cxhJPfvnyn5\",\"TNo7w28xev2B5YWkF\",\"QAZ5DGaWWYhku4BNz\",\"GB3NHPPMge2CshbY6\",\"sBcsrC5paZm9nxjot\",\"3JSKE56FSBxj6ZCY7\",\"SY9Euc4kQfRgetXTd\",\"eNdxN376u6gM4qdXF\",\"XfirkadGrKABrZSBw\",\"er5HvLSjtwaYKoZ2F\",\"xMxdp5oCxmeuYxhpa\",\"GovJdALyZMga74WeE\",\"ij9YRJvZz6WbqcGXS\",\"PTo9qt93YqGvL8fCa\",\"MdNjMi3vPSmWWjja5\",\"nkH3HfJXLMNcBMM79\",\"98NmBCC7jEKw5j352\",\"733qgZ7ZSSSrzbXGw\",\"edaKYaap6ugMKpRT8\",\"buX4mCQhtXCfBjeno\",\"4nFXeGakoCjm5GXYa\",\"evTTY9hwrtogaNxXn\",\"Wv9v7fHb8umujfg2j\",\"Ya3eHgs8x3unZRLpb\",\"2d7ToTiuvHtd6WnGx\",\"sn9HmYyS3FStbca3b\",\"HFuNFZpdKCddzbuqc\",\"wrxHLcdBEri4cyK6W\",\"jkumHyXfMkhGcPgqC\",\"PGCDJpQMN8Sjn9Gm6\",\"jnyub52Fi79drGvow\",\"2tCCFm5iefjrRSaxv\",\"ckMvGF5TAyCwcxJBm\",\"C9LKGu2g5hSijvDzA\",\"eoepTq5ES5tfgY9XT\",\"aEm3Wvj2rFYRL8Lrb\",\"4ntYzGHHBgqf58udP\",\"SWbaoFPBAeu6g376j\",\"pLpcDC3EYx2DDQSdt\",\"2zKQWLmEBw8FBs4ZL\",\"FGEeCTorXbX3WvjFW\",\"7gZKfvwaeqsGKXMEN\",\"nhWLv6D8eZJ5ggKKX\",\"jED84My7PjSKANQsX\",\"8raviPK67KKxzQWcF\",\"s9qcJASB9WKPWaQzi\",\"mfYrBKwDr4hXSFuuN\",\"e9Cknxbx6o7Nb6REs\",\"ZcmrtSpqFnCBEK5YE\",\"QnPD4Sv6W4LHc2Qng\",\"QRv96jmNaYsWkxQEG\",\"DaBQKtm4xSgrxqTYF\",\"kp2ZbCewZJAbfd7xv\",\"s7Qqx4Jnuq85iB7Lw\",\"ttuGK7od8simjgmCJ\",\"AFfw7cGg83uYk2Miy\",\"CNc6rmwhbxkxEhHAp\",\"DDokdbBKxv49M445o\",\"hyx8iH2z3QySmyRKT\",\"BdvdJYwHZr7JpkHsn\",\"pdGuqmMyeN4wZaWwv\",\"9SrwsygZbwzGbYZSK\",\"iE4gk7JCQ5mfpRTru\",\"CC7Z9sKKLCkHhp6MW\",\"jLSZdBseR2kfjt8dL\",\"NchnDcEmsLTeFZ4FH\",\"QpBEndbkq6opq4DBN\",\"8kC69AiRv6XA3xnyD\",\"Akq3fQcPRgPrWfsye\",\"4jM32RhDGbWLeEBMW\",\"Yp7uvStL97cC9fKkY\",\"wbzQwextPpnNBR7cG\",\"HJhxYdXKZqNic6PBz\",\"2Ni3PzJAc5fAhqBkb\",\"pER3Z29q2fkQdcxTw\",\"pWJWQDhqzDSmfaFam\",\"3WtHp4MBzciz4AE8M\",\"CFNWRPs3cCTJw6p9B\",\"3Gf7ikLijfoxabiPY\",\"6P9KgzXeJtZ6ejQcu\",\"RtPhDuwmvWNHiBxmG\",\"yxh6CjdHCfkhJszj6\",\"Yfggc4Hr3fmtG4dsS\",\"ZtTwZM9pQ2sAzhnMR\",\"DHwbkbzYNpmkSFT7u\",\"ZcqshY58sGEEvgeaq\",\"J7d397iB5GuWRAMfg\",\"u9cRf5kvtpRB5ffB3\",\"2Qk2mFu9HBFzrB24i\",\"srJ34BaybkQh3qRkM\",\"npp5hesJrst6ghKSM\",\"K45zPJxsABuA3WSyj\",\"wJTDDTE3TrmSXKP4d\",\"LwD3CyYSiBfg3mA4r\",\"rbPEA2TFQw837Hmqg\",\"oDtGiNqDMHmhHE3J8\",\"QjGNkRM3Xc78yShJN\",\"Xbw55RbiWZcvB2Lef\",\"nBJve5CzG6WAw7WFQ\",\"mpLFbFKjY6u3nsDMv\",\"jyCByAZwu576xDwEL\",\"eYJPzBp2ieqd7cf8B\",\"NGvCPuMiAP3xrRLfB\",\"JFiiZhAZTNQSvjzdp\",\"RoGGD5cpHb4ftdLDv\",\"sNcDN3s3rH9wcNg5n\",\"ruzwBPphPDRgLXdnP\",\"wo4cpen33NYFHNca7\",\"9HZbxzkzgz4CvePtv\",\"PH32cNxBjrK4a28sn\",\"gXTAie79kiw28tx5u\",\"hCfruGWxw7v64teEr\",\"ZKuwzkssrSsDGNPr5\",\"jyoLggHk8xQKZuoQC\",\"Fk47SQxbHEJRw4u76\",\"HCfkcKnPs9mrJojdG\",\"uxKGACwmZ6FNZsMwE\",\"x2Cz7S8rCKJqCE3Xe\",\"bfYmA3LMvhSrK59cn\",\"bzm5WayBjwad5jhdR\",\"TtrXnGzi9MyhLvWiz\",\"34bE6mric984YYLZQ\",\"8BJyXvRWcrvN3nttS\",\"ZpLfGJzcKXzNhytAc\",\"LCn6qz2GoMr5577Rd\",\"AMpQSjKsRqhCDyS2j\",\"rPsSEYqwmttMPEuvo\",\"ThaiAKWWDw2W4QfJh\",\"zJTXDTdbwnopRazGo\",\"nC4sPB69yYuTSks9T\",\"jzdjJtfQiCYmiyvzh\",\"CHvzhtXnv8HTbPQ56\",\"gf4xrfguK6KiEF9yi\",\"3rQ3fN5SM2eGHmTi5\",\"QGjY3hgPYPMmMjc7j\",\"jkkKzNT77bMStXhpW\",\"QJoHpT8fkmJ5j4hk4\",\"rMc3LPajSgm68hNfC\",\"qAEumdjLRx2AGAmzw\",\"psdbt2PkjPv4qTwtr\",\"8JJHJfbYpxvDiPpBn\",\"sN2JyFeJCwfwwHPwF\"],\"total\":221,\"quality\":[3,5,3,5,5,5,5,5,5,5,5,5,5,5,4,4,5,5,5,5,5,5,4,5,5,4,1,5]},\"flags\":0},\"summary\":\"Quantifiers indicate numbers of characters or expressions to match. By default quantifiers like * and + are \\\"greedy\\\", meaning that they try to match as much of the string as possible. The ? character after the quantifier makes the quantifier \\\"non-greedy\\\": meaning that it will stop as soon as it finds a match.\\n\\n\\\"some   new   thing\\\".match(//) ➞ \\\"  new  \\\"\\n\\\"some\",\"tags\":[\"regex\"],\"timestamp\":{\"$date\":1583253436899},\"title\":\"RegEx XVIII : Quantifiers - Control greed quantifiers with ?\",\"quality\":4.571428571428571,\"family\":[{\"_id\":\"BdJWELgsSr5nktqAG\",\"language\":\"javascript\"},{\"_id\":\"SgKy45GqofsiDDeNs\",\"language\":\"python3\"}]}}"]