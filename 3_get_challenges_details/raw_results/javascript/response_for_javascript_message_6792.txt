a["{\"msg\":\"result\",\"id\":\"2138\",\"result\":{\"_id\":\"ZHResBjuzYzXfWHAy\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"function kaprekarNumbers(p, q) {\\n\\t\\n}\",\"difficulty\":2.9722222222222223,\"quality\":0,\"familyId\":\"TAgrobTaSi4ENivk4\",\"instructions\":\"A modified Kaprekar number is a positive whole number with a special property. If you square it, then split the number into two integers and sum those integers, you have the same value you started with.\\n\\nConsider a positive whole number `n` with `d` digits. We square `n` to arrive at a number that is either `2 * d` digits long or `(2 * d) - 1` digits long. Split the string representation of the square into two parts, `l` and  `r`. The right-hand part, `r` must be `d` digits long. The left is the remaining substring. Convert those two substrings back to integers, add them and see if you get `n`.\\n\\nFor example, if `n=5`, `d=1`, then `n` squared = `25` . We split that into two strings and convert them back to integers `2` and `5`. We test `2+5=7=5`, so this is not a modified Kaprekar number. If `n=9`, `d=1`, and `n` squared = `81`. This gives us `1+8=9`, the original `n`.\\n\\nNote that `r` may have leading zeros.\\n\\nComplete the `kaprekarNumbers()` method. It should return the list of modified Kaprekar numbers in ascending order. `kaprekarNumbers()` has the following parameter(s):\\n- `p`: an integer representing the lower integer limit.\\n- `q`: an integer representing the upper integer limit.\\n\\n### Examples\\n```\\nkaprekarNumbers(1, 10) ➞ \\\"1 9\\\"\\n\\nkaprekarNumbers(100, 300) ➞ \\\"297\\\"\\n\\nkaprekarNumbers(1, 100) ➞ \\\"1 9 45 55 99\\\"\\n```\\n\\n### Notes\\n- Upper and lower ranges should be inclusive of the limits.\\n- If no modified Kaprekar numbers exist in the given range, return `\\\"INVALID RANGE\\\"`.\",\"isHidden\":false,\"lab\":\"Test.assertEquals(kaprekarNumbers(1, 100), \\\"1 9 45 55 99\\\")\\nTest.assertEquals(kaprekarNumbers(100, 300), \\\"297\\\")\\nTest.assertEquals(kaprekarNumbers(1, 99999), \\\"1 9 45 55 99 297 703 999 2223 2728 4950 5050 7272 7777 9999 17344 22222 77778 82656 95121 99999\\\")\\nTest.assertEquals(kaprekarNumbers(1, 10), \\\"1 9\\\")\\nTest.assertEquals(kaprekarNumbers(2, 4), \\\"INVALID RANGE\\\")\",\"language\":\"javascript\",\"summary\":\"A modified Kaprekar number is a positive whole number with a special property. If you square it, then split the number into two integers and sum those integers, you have the same value you started with.\\n\\nConsider a positive whole number n with d digits. We square n to arrive at a number that is either 2 * d digits long or (2 * d) - 1 digits long. Split the str\",\"tags\":[\"algorithms\",\"numbers\"],\"timestamp\":{\"$date\":1601425661170},\"title\":\"Modified Kaprekar Numbers\",\"stats\":{\"completed\":{\"total\":34,\"ratings\":[4,4,4,4,4,2,4,1,1,1,5,3,5,5,2,2,4,3,3,3,5,5,2,3,2,5,0,2,3,2,3,3,0,3,1,4],\"quality\":[],\"rators\":[\"yjtdwc2AC4jA2RWtn\",\"va3fDAQm4sqSMoy3R\",\"oZCL7po6gpupCCLRH\",\"aEm3Wvj2rFYRL8Lrb\",\"YEjnBpgNjDLhnf4H7\",\"buX4mCQhtXCfBjeno\",\"WbZPY2yJThbCeT2eT\",\"XaGKYbHjKASo2Xh9J\",\"tAF9Gf6PiGogbZuWs\",\"mHT2bJb5SByfJ8yKS\",\"pWJWQDhqzDSmfaFam\",\"kp2ZbCewZJAbfd7xv\",\"f6K5wzQW2fzYvgE98\",\"PRd3ZE6vHgzsezF7z\",\"7Nz3GAqN3SMgSiyTT\",\"iWGRAvStRr95HHW3o\",\"u9cRf5kvtpRB5ffB3\",\"M4vq8ATaS9Jg5X7iP\",\"QjGNkRM3Xc78yShJN\",\"zSMTbkYkDFb3uomDQ\",\"QsagJPqhRzoTfXNKs\",\"22r7FGKYMhtSR4GBW\",\"68qnpj8bF3Rc4MYiM\",\"c8iCgqHd3rBffwcvn\",\"kDd5xk8me4jCmsuW9\",\"YTbMijQSovDcXPaBe\",\"8SYDBRtkZuW3pdPtG\",\"eMoM9khxzSWin2nFa\",\"NHDQvoqy9gkqMuhTH\",\"yr822PZmmiDDenxpB\",\"TtrXnGzi9MyhLvWiz\"]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"family\":[{\"_id\":\"gH7hdCnyJvuoDrTgi\",\"language\":\"cpp\"},{\"_id\":\"HJCqdv4A3TMHrEvrk\",\"language\":\"java\"},{\"_id\":\"ZHResBjuzYzXfWHAy\",\"language\":\"javascript\"},{\"_id\":\"vdx5oXuTsos4vLvrn\",\"language\":\"python3\"},{\"_id\":\"QthgHJPgRcwZKH9PE\",\"language\":\"ruby\"},{\"_id\":\"H7qe4pyCuTmkXappp\",\"language\":\"swift\"}]}}"]