a["{\"msg\":\"result\",\"id\":\"2208\",\"result\":{\"_id\":\"nR3b6f3kwX8Pn9jE4\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"function largestIsland(map) {\\n\\t\\n}\",\"difficulty\":3.36231884057971,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"C9KdZM2RE8vg2Gukn\",\"instructions\":\"An **island is a region of contiguous ones**. A contiguous one is a `1` that is touched by at least one other `1`, either **horizontally**, **vertically** or **diagonally**. Given a piece of the map, represented by a 2-D array, create a function that returns the area of the largest island.\\n\\nTo illustrate, if we were given the following piece of the map, we should return `4`.\\n\\n```\\n[\\n  [0, 0, 0],\\n  [0, 1, 1],\\n  [0, 1, 1]\\n]\\n```\\n\\nOur function should yield `2` for the map below:\\n\\n```\\n[\\n  [1, 0, 0],\\n  [0, 0, 1],\\n  [0, 0, 1]\\n]\\n```\\n\\nOur function should yield `4` for the map below: : \\n\\n```\\n[\\n  [1, 0, 0],\\n  [0, 1, 1],\\n  [0, 0, 1]\\n]\\n```\\n\\n### Examples\\n```\\nlargestIsland([\\n  [1, 0, 0], \\n  [0, 0, 0], \\n  [0, 0, 1]\\n])\\n\\n➞ 1\\n\\nlargestIsland([\\n  [1, 1, 0], \\n  [0, 1, 1], \\n  [0, 0, 1]\\n])\\n\\n➞ 5\\n\\nlargestIsland([\\n  [1, 0, 0], \\n  [1, 0, 0], \\n  [1, 0, 1]\\n])\\n\\n➞ 3\\n```\\n\\n### Notes\\n- Maps can be any `m x n` dimension.\\n- Maps will always have at least 1 element. `m >= 1` and `n >= 1`.\",\"lab\":\"Test.assertEquals(largestIsland([\\n  [1, 0, 0],\\n  [0, 0, 0],\\n  [0, 0, 1]\\n]), 1)\\n\\nTest.assertEquals(largestIsland([\\n  [1, 1, 0],\\n  [0, 1, 1],\\n  [0, 0, 1]\\n]), 5)\\n\\nTest.assertEquals(largestIsland([\\n  [1, 0, 0],\\n  [1, 0, 0],\\n  [1, 0, 1]\\n]), 3)\\n\\nTest.assertEquals(largestIsland([\\n  [0, 0, 0],\\n  [0, 1, 1],\\n  [0, 1, 1]\\n]), 4)\\n\\nTest.assertEquals(largestIsland([\\n  [1, 0, 0],\\n  [0, 0, 1],\\n  [0, 0, 1]\\n]), 2)\\n\\nTest.assertEquals(largestIsland([\\n  [1, 0, 0],\\n  [0, 1, 1],\\n  [0, 0, 1]\\n]), 4)\\n\\nTest.assertEquals(largestIsland([\\n  [1, 0],\\n  [0, 1],\\n  [0, 0]\\n]), 2)\\n\\nTest.assertEquals(largestIsland([\\n\\t[1]\\n]), 1)\\n\\nTest.assertEquals(largestIsland([\\n  [1],\\n  [0],\\n  [1]\\n]), 1)\\n\\nTest.assertEquals(largestIsland([\\n  [1, 1, 1],\\n  [0, 1, 1],\\n  [0, 0, 1]\\n]), 6)\",\"language\":\"javascript\",\"summary\":\"An island is a region of contiguous ones. A contiguous one is a 1 that is touched by at least one other 1, either horizontally, vertically or diagonally. Given a piece of the map, represented by a 2-D array, create a function that returns the area of the largest island.\\n\\nTo illustrate, if we were given the following piece of the map, we should return 4.\\n\\n[\\n  [\",\"tags\":[\"arrays\",\"data_structures\",\"logic\",\"games\"],\"timestamp\":{\"$date\":1552775474966},\"title\":\"Largest Island\",\"stats\":{\"completed\":{\"total\":78,\"ratings\":[4,4,4,4,4,4,4,4,4,4,3,2,3,3,5,4,4,3,2,0,5,0,5,3,0,4,5,1,5,5,5,3,4,4,0,3,0,1,4,3,5,5,5,2,5,2,3,3,3,3,3,5,5,4,5,4,0,5,2,3,5,4,5,4,5,3,0,3,2],\"rators\":[\"mNMQvcxKSSvqqMYCH\",\"2innwjWqxJHo4eRGh\",\"bbbpNxM3hgGMCqMn8\",\"QRBhGXSZHCXvKDFdL\",\"CkCfqtHBziMiSsvDs\",\"vjmRR6x3mPXXYQQP8\",\"65dbBZynphj53nXqA\",\"64D7kw85CtoDbPt3u\",\"SDtZFL5NzAoCPofXk\",\"7swio9FFT8jEJXubj\",\"6cF2nrD29Nn2AeKP7\",\"X9gzW6TkvYB4rbrx7\",\"7WPf9TjQcYuJnEo4T\",\"gyqF3mSFanetdczH7\",\"JHShz4ZcgWHDormRu\",\"FHSJnAYTbcsKFgeQa\",\"6AwLfvHXfGiQKSoPm\",\"bto9pwvPJweistJKA\",\"Dpw42dGMFiZSLFijo\",\"yjtdwc2AC4jA2RWtn\",\"7PP6aGLEosDGsjRqW\",\"FJsvM5yqKuK9yMk9P\",\"LsiKG9jKTzzijeTr6\",\"jHsd8GxMtiXzfArDq\",\"pk6F3C2fbECgZ8nKW\",\"XYEDjaciXqSqzp6p3\",\"mHT2bJb5SByfJ8yKS\",\"5DsYhKJiNTaarWKkM\",\"kqJ5bxst5QGn7QnMC\",\"ppfQK4eXqkQqSKi4r\",\"o9Bj4dXiHwtDMTcLc\",\"ob3vWqmpSw3mfqDag\",\"jWW9YLuYPdAR6uR4c\",\"KAwnrRNbgiZ2uAr8v\",\"rSRGHTwgu3L8MBMZJ\",\"F2ftShyaH2xT7amAP\",\"tcuBoYKNWncRYSrbE\",\"EGf56rcfpjwRwx2qt\",\"cRpaCxYRmGcN3Nsoj\",\"XjuaFaxajTTRdwD9e\",\"dPM2Rk2iMkznyXNEt\",\"2NddtvvXpxgtLJWz4\",\"knxCMCGP3rAkiatRo\",\"hhPW2N2WWpt7MxKo9\",\"FJz752tBZgKEFv5dp\",\"ZXRMRAJNP6eseLdbR\",\"JGBCMpnbbi5ztuFoX\",\"MNDLmXZmFMf8ASL2L\",\"7TXyMDHFYjna3dyPb\",\"nBo2LLuSMeEgd5f6G\",\"Gr5yiCBrdhrjZZgu5\",\"EdMYkEJhcR45bsSZx\",\"aEm3Wvj2rFYRL8Lrb\",\"sMa2NRjRznkTXvFNR\",\"h4jFmtbFn92eA4649\",\"ffB8T76Ye9ygL6QZZ\",\"uP9SRKxpG4GjKkKq5\",\"Ek9PiwGewEGH6fcqz\",\"7hXDHFcBp6ytxjA5f\",\"RDf6GPtAQEzxGuyPX\",\"va3fDAQm4sqSMoy3R\",\"mDWNyaaQ9hvPCRzSd\",\"bXaGdBM8FBLHf7N6Y\",\"aKypJe4PDbJybBcqK\",\"QyGhzPuDPzbcATCJT\",\"QvEXmSEo3ANp3yPyH\",\"NCSRfRN2ayHatWKuS\",\"J5MgLszeGgtciW56n\"],\"quality\":[1,5,3,5,5,5,5,5]},\"tests\":{\"score\":0,\"voters\":[\"mNMQvcxKSSvqqMYCH\"]},\"instructions\":{\"score\":0,\"voters\":[\"mNMQvcxKSSvqqMYCH\"]},\"flags\":0},\"isHidden\":false,\"quality\":4.25,\"family\":[{\"_id\":\"EmEaT9K4wKe3g6QH3\",\"language\":\"cpp\"},{\"_id\":\"nR3b6f3kwX8Pn9jE4\",\"language\":\"javascript\"},{\"_id\":\"Gmk5awcwHZJoqs6ZW\",\"language\":\"python3\"},{\"_id\":\"m8yCD7hb54QdJmsuw\",\"language\":\"ruby\"}]}}"]