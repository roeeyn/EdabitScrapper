a["{\"msg\":\"result\",\"id\":\"2126\",\"result\":{\"_id\":\"BDbY3zSN8mcBN2Xrn\",\"author\":\"Kálmán Vilisics\",\"authorId\":\"Es4eX2stRpyoXeC7f\",\"code\":\"function grayscale(arr) {\\n\\t\\n}\",\"difficulty\":2.9583333333333335,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"jZ8C2n8YJrekck7kS\",\"instructions\":\"Images can be described as 3D arrays.\\n\\n```\\n// This image has only one white pixel:\\n\\n[\\n  [[255, 255, 255]]\\n]\\n```\\n\\n```\\n// This one is a 2 by 2 black image:\\n\\n[\\n  [[0, 0, 0], [0, 0, 0]],\\n  [[0, 0, 0], [0, 0, 0]]\\n]\\n```\\n\\nYour task is to create a function that takes a 3D array representation of an image and returns the grayscale version of that.\\n\\n### Examples\\n```\\ngrayscale([\\n  [[0, 0, 0], [0, 0, 157]],\\n  [[1, 100, 0], [0, 10, 0]]\\n]) ➞ [\\n  [[0, 0, 0], [52, 52, 52]],\\n  [[34, 34, 34], [3, 3, 3]]\\n]\\n```\\n\\n### Notes\\n- A valid RGB value ranges from 0 to 255 (inclusive).\\n- If the given array contains out of bound values, convert them to the nearest valid one.\\n- Previous challenge in this series: [Image Manipulation: Invert (Part 1)](https://edabit.com/challenge/6YfWWLSQyPJwz2Srg)\\n- Grayscaling an image is adjusting to have the same amount of (Red, Green, Blue) from their combined average to produce different shades of gray.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assertSimilar(grayscale([\\n\\t[[0,0,0], [0,0,157]],\\n\\t[[1,100,0], [0,10,0]]\\n]), [\\n\\t[[0,0,0], [52,52,52]],\\n\\t[[34,34,34], [3,3,3]]\\n])\\n\\nTest.assertSimilar(grayscale([\\n\\t[[0,0,0], [0,0,157], [100,229,4]],\\n\\t[[1,100,0], [0,10,0], [0,168,0]],\\n\\t[[0,125,0], [15,0,9], [0,139,0]],\\n\\t[[0,125,0], [0,0,9], [0,200,0]]\\n]), [\\n\\t[[0,0,0], [52,52,52], [111,111,111]],\\n\\t[[34,34,34], [3,3,3], [56,56,56]],\\n\\t[[42,42,42], [8,8,8], [46,46,46]],\\n\\t[[42,42,42], [3,3,3], [67,67,67]]\\n])\\n\\nTest.assertSimilar(grayscale([\\n\\t[[0,0,255], [0,0,0], [0,0,157], [100,229,4]],\\n\\t[[100,0,3], [1,100,0], [0,10,0], [0,168,0]],\\n\\t[[16,30,0], [0,125,0], [15,0,9], [0,139,0]],\\n\\t[[200,2,0], [0,125,0], [0,0,9], [0,200,0]]\\n]), [\\n\\t[[85,85,85], [0,0,0], [52,52,52], [111,111,111]],\\n\\t[[34,34,34], [34,34,34], [3,3,3], [56,56,56]],\\n\\t[[15,15,15], [42,42,42], [8,8,8], [46,46,46]],\\n\\t[[67,67,67], [42,42,42], [3,3,3], [67,67,67]]\\n])\\n\\nTest.assertSimilar(grayscale([\\n\\t[[0,-1,-120], [300,0,157]],\\n\\t[[1,100,0], [256,10,0]]\\n]), [\\n\\t[[0,0,0], [137,137,137]],\\n\\t[[34,34,34], [88,88,88]]\\n])\",\"language\":\"javascript\",\"quality\":4.714285714285714,\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,3,5,5,5,1,5,1,3,5,3,2,2,2,0,5,3,4,3,3,3,5,4,3,4,3,5,4,2,2,2,2,4,5,2,5,0,1,1,0,2,2,3,3],\"quality\":[5,4,5,5,3,5,4,5,5,5,5,5,5,5],\"rators\":[\"Es4eX2stRpyoXeC7f\",\"QCSFTTvp47cwDCezs\",\"bXaGdBM8FBLHf7N6Y\",\"tAF9Gf6PiGogbZuWs\",\"yjtdwc2AC4jA2RWtn\",\"va3fDAQm4sqSMoy3R\",\"aEm3Wvj2rFYRL8Lrb\",\"mHT2bJb5SByfJ8yKS\",\"tE8iqyAxBJfEaWdxy\",\"kp2ZbCewZJAbfd7xv\",\"tR2bMDoKMCiujrkRi\",\"f6K5wzQW2fzYvgE98\",\"KG5kJoP68PaZCASxF\",\"QRv96jmNaYsWkxQEG\",\"uu7diykmYQMm7ojCK\",\"SYEuojZtP6yLXryHv\",\"i6v5JNzyyRqqAeLjf\",\"Lts22EbB5q962NkrD\",\"pWJWQDhqzDSmfaFam\",\"5NGxHLcQ8Af2RJ4TN\",\"qeFAzzrvoEZBD2mfc\",\"u9cRf5kvtpRB5ffB3\",\"yzTsFwKfbiT4LTF3v\",\"EkaHge5WaoGpiCxpx\",\"EJXaAcika2bAcRAta\",\"hcm8sL8mNJTSfTdgE\",\"vic9SZ9qqj9WhRkbd\",\"eKSJgCaiy4ReJWXTg\",\"ma9TmtrXuiBcPv8KS\",\"TtahKuYY6s8KYRi4y\",\"LtTpCzF8kt6Rdth4X\",\"yQtGE2egvwYnNQSFc\",\"YcnQEN6Hc4bfqa77F\",\"Po3v3dHCk6wYGKMwi\",\"2sLmHo7G2irSyrDB7\",\"QJM5KcENEwS24NDs7\",\"wKPzgoYJTQMwSBSKo\",\"bX6tpTCjwoi6XMMbK\",\"cRpaCxYRmGcN3Nsoj\",\"ZgdejAm3u2Q6tFpfg\",\"qPqmhXzgTMmaFRy87\",\"ovBPd28PNiWQQapBG\",\"okwyvNzWr9DsvEvcQ\",\"qWZLE2s7aRDQsnZ4p\",\"BjQkMMomdweG5Kxqv\",\"Xk2g4CNFAnYcvxiSr\",\"pXyib7Mn7MngrYCKv\",\"vfgX36gBnxPuEHZpi\",\"9XnGoq9Tv6ut3zTtH\",\"PH32cNxBjrK4a28sn\",\"HD5ZaNoAFbzBShx9m\",\"GMtbB3ckwdd66myNh\",\"9gEWz76H8KmhN4yJj\",\"BSAt2cnG4BwShiKc8\",\"Yp7uvStL97cC9fKkY\",\"oDtGiNqDMHmhHE3J8\",\"8BJyXvRWcrvN3nttS\"],\"total\":62},\"flags\":0},\"summary\":\"Images can be described as 3D arrays.\\n\\n// This image has only one white pixel:\\n\\n[\\n  [[255, 255, 255]]\\n]\\n\\n// This one is a 2 by 2 black image:\\n\\n[\\n  [[0, 0, 0], [0, 0, 0]],\\n  [[0, 0, 0], [0, 0, 0]]\\n]\\n\\nYour task is to create a function that takes a 3D array representation of an image and returns the grayscale version of that.\\n\\nExamples\\ngrayscale([\\n  [[0, 0, 0], [\",\"tags\":[\"algorithms\",\"arrays\",\"logic\",\"loops\"],\"timestamp\":{\"$date\":1601887244282},\"title\":\"Image Manipulation: 255 Shades of Grey (Part 2)\",\"family\":[{\"_id\":\"BDbY3zSN8mcBN2Xrn\",\"language\":\"javascript\"},{\"_id\":\"rheD8p46h8gKdE8GE\",\"language\":\"python3\"},{\"_id\":\"jAp8AfCrKqHuZcHvz\",\"language\":\"ruby\"}]}}"]