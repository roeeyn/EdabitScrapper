a["{\"msg\":\"result\",\"id\":\"2036\",\"result\":{\"_id\":\"GSJ5RYWDQBiKnfpWP\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"function matryoshka(arr) {\\n\\t\\n}\",\"difficulty\":2.86046511627907,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"qpMs4mZGtWmEMbMhK\",\"instructions\":\"Matryoshka dolls are traditionally wooden dolls that can be nested by fitting smaller dolls into larger ones. Suppose arrays can be nested similarly, placing **smaller arrays** into **larger ones**, in the following sense:\\n\\n`Array A` can be nested inside `Array B` if:\\n\\n1. `min(array A)` > `min(array B)`\\n2. `max(array A)` < `max(array B)`\\n\\nFor example, if `A = [2, 3, 9, 5]` and `B = [10, 2, 1]`, then `A` can be nested inside `B`, since:\\n\\n- `min(A) = 2 > 1 = min(B)` and\\n- `max(A) = 9 < 10 = max(B)`\\n\\nCreate a function that returns `true` if every single sub-array inside an array can be nested Matroyshka style, and `false` otherwise.\\n\\n### Examples\\n```\\nmatryoshka([[2, 2, 7], [3, 4, 5, 6], [4, 5]]) ➞ true\\n// [4, 5] nested inside [3, 4, 5, 6], [3, 4, 5, 6] nested inside [2, 2, 7], etc.\\n// Dolls nested from largest to smallest.\\n\\nmatryoshka([[4, 5], [6, 3], [7, 6, 5, 4, 3, 2], [8, 1]]) ➞ true\\n// Dolls nested from smallest to largest.\\n\\nmatryoshka([[7, 1], [7, 6, 5, 4, 3, 2], [6, 3], [4, 5]]) ➞ false\\n// [7, 1] and [7, 6, 5, 4, 3, 2] share the same max.\\n// Second doll cannot be nested properly inside first doll.\\n\\nmatryoshka([[1, 5], [2, 6], [3, 7]]) ➞ false\\n// Elements are overlapping, cannot be nested.\\n```\\n\\n### Notes\\n- Subarrays can be nested from smallest to largest or largest to smallest.\\n- Elements must be strictly nested - e.g. no two arrays can share either the same MAX or the same MIN (see example #3).\\n- Subarrays may not necessarily have unique elements (see example #1).\\n- Subarrays can be in any order (see example #2).\",\"lab\":\"Test.assertEquals(matryoshka([[1, 2, 3, 4, 5, 6, 7, 8], [2, 3, 4, 5, 6, 7], [3, 4, 5, 6], [4, 5]]), true)\\nTest.assertEquals(matryoshka([[4, 5], [2, 6], [1, 9], [-5, 10, 11]]), true)\\nTest.assertEquals(matryoshka([[3, 3], [4, 4], [5, 5, 5]]), false)\\nTest.assertEquals(matryoshka([[1, 1, 1, 1, 2], [3, 2, 5, 0], [-1, 500]]), true)\\nTest.assertEquals(matryoshka([[1, 8], [2, 3, 4, 5, 6, 7], [3, 6], [4, 5]]), true)\\nTest.assertEquals(matryoshka([[6, 2], [9, 4]]), false, 'cannot be overlapping')\\nTest.assertEquals(matryoshka([[7, 1], [7, 6, 5, 4, 3, 2], [6, 3], [4, 5]]), false, 'must be strictly nested')\\nTest.assertEquals(matryoshka([[1, 5], [2, 6], [3, 7]]), false)\\nTest.assertEquals(matryoshka([[5, 1], [4, 2], [4, 2]]), false, 'must be strictly nested')\\nTest.assertEquals(matryoshka([[5, 1], [4, 2], [3, 3]]), true)\\nTest.assertEquals(matryoshka([[5, 1], [4, 2], [3, 3, 3, 3, 3, 3, 3]]), true)\\nTest.assertEquals(matryoshka([[1, 2, 3, 4], [2, 3, 4]]), false, 'must be strictly nested')\\nTest.assertEquals(matryoshka([[1, 2, 3, 4], [2, 3]]), true)\\nTest.assertEquals(matryoshka([[1, 50, 100], [3, 25, 75], [10, 40, 50], [25, 45]]), true)\\nTest.assertEquals(matryoshka([[1, 50, 100], [3, 25, 75], [10, 40, 50], [25, 55]]), false, 'cannot be overlapping')\",\"language\":\"javascript\",\"summary\":\"Matryoshka dolls are traditionally wooden dolls that can be nested by fitting smaller dolls into larger ones. Suppose arrays can be nested similarly, placing smaller arrays into larger ones, in the following sense:\\n\\nArray A can be nested inside Array B if:\\n\\nmin(array A) > min(array B)\\nmax(array A)  1 = min(B)` and\\nmax(A) = 9 < 10 = max(B)\\n\\nCreate a function th\",\"tags\":[\"arrays\",\"logic\",\"sorting\",\"validation\"],\"timestamp\":{\"$date\":1554165692611},\"title\":\"Matryoshka Dolls\",\"stats\":{\"completed\":{\"total\":39,\"ratings\":[2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,2,2,4,4,4,4,3,3,4,3,2,4,3,2,3,4,4,2,3,1,4,5,4],\"rators\":[\"mNMQvcxKSSvqqMYCH\",\"65dbBZynphj53nXqA\",\"d2PuPtTWQac8SexuC\",\"8xuMMGF7fyQWL2fKH\",\"EjPLq3QSJdGQFJdgW\",\"n5wubRfh6zh8QRymN\",\"EWn8w8P3nNh7knatY\",\"jJ9njGvHZaHTsqAJs\",\"yjtdwc2AC4jA2RWtn\",\"Y9Nz9yafaibz54W4o\",\"7PP6aGLEosDGsjRqW\",\"FJsvM5yqKuK9yMk9P\",\"XKi8iZXBCHCaebSHh\",\"Qa3vzE4H2GeAHmEcQ\",\"eQdnBfe8riy82SNrK\",\"PMpS3kYeCzd5ni8eA\",\"BpiAkZfs6sXRMdArb\",\"5Zq3aGdvh4LHBvnJL\",\"AasGs8AeX9Lcb9xJn\",\"vewKwcMeGuk3p3MsN\",\"St7dhE5Hot8btYGMy\",\"cRpaCxYRmGcN3Nsoj\",\"KAwnrRNbgiZ2uAr8v\",\"YER6iBcpJCuhgrYDN\",\"sBcsrC5paZm9nxjot\",\"Kc3SDafimwpZWrATJ\",\"JGBCMpnbbi5ztuFoX\",\"M4vq8ATaS9Jg5X7iP\",\"aEm3Wvj2rFYRL8Lrb\",\"4Xv87xmdSnpYhi8hz\",\"bXaGdBM8FBLHf7N6Y\",\"jemTNShfp6ymAs3pj\",\"dNJGdRzaw2JQuq6BK\",\"BdnE4RS5puoxo92mA\",\"DPi9QGLctq2y76KuE\",\"8BJyXvRWcrvN3nttS\",\"oDtGiNqDMHmhHE3J8\"],\"quality\":[5,5,4]},\"tests\":{\"score\":0,\"voters\":[\"mNMQvcxKSSvqqMYCH\"]},\"instructions\":{\"score\":-135.25,\"voters\":[\"mNMQvcxKSSvqqMYCH\",\"7MZ7imMNz8qQqMmDq\",\"QjGNkRM3Xc78yShJN\"]},\"flags\":0},\"isHidden\":false,\"quality\":4.666666666666667,\"family\":[{\"_id\":\"GSJ5RYWDQBiKnfpWP\",\"language\":\"javascript\"},{\"_id\":\"mFtJNuH6rveGXtiJd\",\"language\":\"python3\"},{\"_id\":\"PNSYSrhbAD9e9Eg6Q\",\"language\":\"ruby\"}]}}"]