a["{\"msg\":\"result\",\"id\":\"1567\",\"result\":{\"_id\":\"uJTFvuYDRD5cEsfdL\",\"author\":\"er0s\",\"authorId\":\"5Zq3aGdvh4LHBvnJL\",\"code\":\"function cartesianMatrix(dim, cnt) {\\n\\t\\n}\",\"difficulty\":2.235294117647059,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"u6efbt8RPBEPNSWvQ\",\"instructions\":\"In this challenge, create a matrix that simulates how a series of points are placed on a portion of the cartesian plane.\\n\\nYou are given two objects as parameters:\\n\\n- `dim` contains the dimension of the regular matrix to build:\\n  - The property `h` is the **h**eight, or the total number of rows.\\n  - The property `w` is the **w**idth, or the total number of columns.\\n\\n- `cnt` contains the coordinates of the cartesian plane center:\\n  - The property `r` is the **r**ow (0-indexed).\\n  - The property `c` is the **c**olumn (0-indexed).\\n\\nYou have to implement a function that returns a matrix (sized accordingly to `dim`), with each \\\"cell\\\" being an array containing the `[x, y]` coordinates from the given central point (treating so the cells as points on the cartesian plane).\\n\\n### Examples\\n```\\ncartesianMatrix({h: 3, w: 4}, {r: 1, c: 1}) ➞ [\\n  [[-1, 1], [0, 1], [1, 1], [2, 1]],\\n  [[-1, 0], [0, 0], [1, 0], [2, 0]],\\n  [[-1, -1], [0, -1], [1, -1], [2, -1]]\\n]\\n\\ncartesianMatrix({h: 4, w: 3}, {r: 0, c: 1}) ➞ [\\n  [[-1, 0], [0, 0], [1, 0]],\\n  [[-1, -1], [0, -1], [1, -1]],\\n  [[-1, -2], [0, -2], [1, -2]],\\n  [[-1, -3], [0, -3], [1, -3]]\\n]\\n\\ncartesianMatrix({h: 2, w: 4}, {r: 0, c: 0}) ➞ [\\n  [[0, 0], [1, 0], [2, 0], [3, 0]],\\n  [[0, -1], [1, -1], [2, -1], [3, -1]]\\n]\\n```\\n\\n### Notes\\n- The coordinates must be returned in the order `[x-axis, y-axis]`.\\n- The coordinates of the central point (or _origin_), are always `[0, 0]`. The origin will be always be included in the matrix.\\n- Points placed to the right or up from the origin have positive values (i.e. `[1, 2]` means `1` cell to the **right** and `2` cells **up** from the origin).\\n- Points placed to the left or down from the origin have negative values (i.e. `[-2, -1]` means `2` cells to the **left** and `1` cell **down** from the origin).\",\"isHidden\":false,\"lab\":\"Test.assertSimilar(cartesianMatrix({h: 3, w: 4}, {r: 1, c: 1}), [\\n  [ [ -1, 1 ], [ 0, 1 ], [ 1, 1 ], [ 2, 1 ] ],\\n  [ [ -1, 0 ], [ 0, 0 ], [ 1, 0 ], [ 2, 0 ] ],\\n  [ [ -1, -1 ], [ 0, -1 ], [ 1, -1 ], [ 2, -1 ] ]\\n])\\n\\nTest.assertSimilar(cartesianMatrix({h: 4, w: 3}, {r: 0, c: 1}), [\\n  [ [ -1, 0 ], [ 0, 0 ], [ 1, 0 ] ],\\n  [ [ -1, -1 ], [ 0, -1 ], [ 1, -1 ] ],\\n  [ [ -1, -2 ], [ 0, -2 ], [ 1, -2 ] ],\\n  [ [ -1, -3 ], [ 0, -3 ], [ 1, -3 ] ]\\n])\\n\\nTest.assertSimilar(cartesianMatrix({h: 5, w: 5}, {r: 2, c: 2}), [\\n  [ [ -2, 2 ], [ -1, 2 ], [ 0, 2 ], [ 1, 2 ], [ 2, 2 ] ],\\n  [ [ -2, 1 ], [ -1, 1 ], [ 0, 1 ], [ 1, 1 ], [ 2, 1 ] ],\\n  [ [ -2, 0 ], [ -1, 0 ], [ 0, 0 ], [ 1, 0 ], [ 2, 0 ] ],\\n  [ [ -2, -1 ], [ -1, -1 ], [ 0, -1 ], [ 1, -1 ], [ 2, -1 ] ],\\n  [ [ -2, -2 ], [ -1, -2 ], [ 0, -2 ], [ 1, -2 ], [ 2, -2 ] ]\\n])\\n\\nTest.assertSimilar(cartesianMatrix({h: 6, w: 2}, {r: 4, c: 1}), [\\n  [ [ -1, 4 ], [ 0, 4 ] ],\\n  [ [ -1, 3 ], [ 0, 3 ] ],\\n  [ [ -1, 2 ], [ 0, 2 ] ],\\n  [ [ -1, 1 ], [ 0, 1 ] ],\\n  [ [ -1, 0 ], [ 0, 0 ] ],\\n  [ [ -1, -1 ], [ 0, -1 ] ]\\n])\\n\\nTest.assertSimilar(cartesianMatrix({h: 2, w: 4}, {r: 0, c: 0}), [\\n  [ [ 0, 0 ], [ 1, 0 ], [ 2, 0 ], [ 3, 0 ] ],\\n  [ [ 0, -1 ], [ 1, -1 ], [ 2, -1 ], [ 3, -1 ] ]\\n])\\n\\nTest.assertSimilar(cartesianMatrix({h: 1, w: 1}, {r: 0, c: 0}), [ [ [ 0, 0 ] ] ])\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[1,1,1,1,1,4,1,2,1,3,2,2,2,2,2,3,2,2,3,3,1,3,3,3,4,2,3,3,3,1,3,2,3,3],\"rators\":[\"5Zq3aGdvh4LHBvnJL\",\"cRpaCxYRmGcN3Nsoj\",\"mHT2bJb5SByfJ8yKS\",\"yjtdwc2AC4jA2RWtn\",\"FJsvM5yqKuK9yMk9P\",\"pi76g3eRpnKrhee2a\",\"YER6iBcpJCuhgrYDN\",\"n5wubRfh6zh8QRymN\",\"EWn8w8P3nNh7knatY\",\"2innwjWqxJHo4eRGh\",\"2ZFoLTxcCARhwc8xX\",\"fSYZCDELNitKuKcK2\",\"7JCLyrrY6JYGpocac\",\"Xk2g4CNFAnYcvxiSr\",\"nKJmEuXCqMyvphdBp\",\"rehehi2Tr2mwaEoJE\",\"GCsLzWAhLvniQqR3J\",\"WZtccgHDu6QmNHmsD\",\"a777e8chPvJkY3tKa\",\"RE4Mm9T6Q9uygAxGS\",\"QMq9dcvgpyNK6RAze\",\"BXN7x5WxaMfBB6oYu\",\"65dbBZynphj53nXqA\",\"buX4mCQhtXCfBjeno\",\"aEm3Wvj2rFYRL8Lrb\",\"tAF9Gf6PiGogbZuWs\",\"kp2ZbCewZJAbfd7xv\",\"CNc6rmwhbxkxEhHAp\",\"jemTNShfp6ymAs3pj\",\"DfdkfQh8ctd2BaaRY\",\"oDtGiNqDMHmhHE3J8\"],\"total\":32,\"quality\":[5,3]},\"flags\":0},\"summary\":\"In this challenge, create a matrix that simulates how a series of points are placed on a portion of the cartesian plane.\\n\\nYou are given two objects as parameters:\\n\\ndim contains the dimension of the regular matrix to build:\\n  The property h is the height, or the total number of rows.\\n  The property w is the width, or the total number of columns.\\n\\ncnt contains t\",\"tags\":[\"arrays\",\"loops\"],\"timestamp\":{\"$date\":1580941447206},\"title\":\"Cartesian Matrix\",\"quality\":4,\"family\":[{\"_id\":\"uJTFvuYDRD5cEsfdL\",\"language\":\"javascript\"},{\"_id\":\"FkXNcJMwTsEfgBdxJ\",\"language\":\"python3\"}]}}"]