a["{\"msg\":\"result\",\"id\":\"1003\",\"result\":{\"_id\":\"oBFirFPZH7S6vopYE\",\"author\":\"Mubashir Hassan \",\"authorId\":\"T6iBEE2jp7f7iEF2P\",\"code\":\"function makeGrlex(arr) {\\n\\t\\n}\",\"difficulty\":1.676056338028169,\"familyId\":\"YRGKLfYFggWF9WiJv\",\"instructions\":\"Graded lexicographic order (grlex order for short) is a way of ordering words that:\\n\\n1. First orders words by length.\\n2. Then orders words of the same size by their dictionary order.\\n\\nFor example, in grlex order:\\n- \\\"tray\\\" < \\\"trapped\\\" since \\\"tray\\\" has length 4 while \\\"trapped\\\" has length 7.\\n- \\\"trap\\\" < \\\"tray\\\" since both have length 4, but \\\"trap\\\" comes before \\\"tray\\\" in the dictionary.\\n\\nGiven an array of words, return that array in grlex order.\\n\\n### Examples\\n```\\nmakeGrlex([\\\"small\\\", \\\"big\\\"]) ➞ [\\\"big\\\", \\\"small\\\"]\\n\\nmakeGrlex([\\\"cat\\\", \\\"ran\\\", \\\"for\\\", \\\"the\\\", \\\"rat\\\"]) ➞ [\\\"cat\\\", \\\"for\\\", \\\"ran\\\", \\\"rat\\\", \\\"the\\\"]\\n\\nmakeGrlex([\\\"this\\\", \\\"is\\\", \\\"a\\\", \\\"small\\\", \\\"test\\\"]) ➞ [\\\"a\\\", \\\"is\\\", \\\"test\\\", \\\"this\\\", \\\"small\\\"]\\n```\\n\\n### Notes\\nN/A\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assertSimilar(makeGrlex([\\\"small\\\", \\\"big\\\"]), [\\\"big\\\", \\\"small\\\"], \\\"order first by size\\\")\\nTest.assertSimilar(makeGrlex([\\\"big\\\", \\\"cat\\\", \\\"ran\\\", \\\"for\\\", \\\"the\\\", \\\"fat\\\", \\\"rat\\\"]), [\\\"big\\\", \\\"cat\\\", \\\"fat\\\", \\\"for\\\", \\\"ran\\\", \\\"rat\\\", \\\"the\\\"], \\\"If same size, order alphabetically.\\\")\\nTest.assertSimilar(makeGrlex([\\\"this\\\", \\\"is\\\", \\\"a\\\", \\\"small\\\", \\\"test\\\"]), [\\\"a\\\", \\\"is\\\", \\\"test\\\", \\\"this\\\", \\\"small\\\"])\\nTest.assertSimilar(makeGrlex([\\\"let\\\", \\\"us\\\", \\\"try\\\", \\\"some\\\", \\\"long\\\", \\\"test\\\", \\\"to\\\", \\\"see\\\", \\\"if\\\", \\\"this\\\", \\\"works\\\", \\\"as\\\", \\\"it\\\", \\\"should\\\"]), [\\\"as\\\", \\\"if\\\", \\\"it\\\", \\\"to\\\", \\\"us\\\", \\\"let\\\", \\\"see\\\", \\\"try\\\", \\\"long\\\", \\\"some\\\", \\\"test\\\", \\\"this\\\", \\\"works\\\", \\\"should\\\"])\",\"language\":\"javascript\",\"quality\":4.894736842105263,\"summary\":\"Graded lexicographic order (grlex order for short) is a way of ordering words that:\\n\\nFirst orders words by length.\\nThen orders words of the same size by their dictionary order.\\n\\nFor example, in grlex order:\\n\\\"tray\\\" < \\\"trapped\\\" since \\\"tray\\\" has length 4 while \\\"trapped\\\" has length 7.\\n\\\"trap\\\" < \\\"tray\\\" since both have length 4, but \\\"trap\\\" comes before \\\"tray\\\" in the\",\"tags\":[\"math\",\"sorting\",\"strings\",\"conditions\"],\"timestamp\":{\"$date\":1606367413250},\"title\":\"Order by Length First\",\"stats\":{\"completed\":{\"total\":90,\"ratings\":[1,1,1,1,1,0,0,0,1,2,0,2,3,2,1,2,1,1,1,2,3,3,0,2,0,2,2,2,2,3,2,2,2,2,2,2,2,1,0,1,2,3,2,2,2,3,0,2,2,2,2,2,2,2,2,2,2,2,2,5,2,1,3,1,2,2,0,1,2,2,2],\"quality\":[4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,5],\"rators\":[\"QRv96jmNaYsWkxQEG\",\"g4NCSxxHqHCGMpWwT\",\"evTTY9hwrtogaNxXn\",\"a3HpDFWWeXCNCy82M\",\"r8RzZmvabrMutvEdC\",\"3Gf7ikLijfoxabiPY\",\"RE4Mm9T6Q9uygAxGS\",\"RDj3GQFZmq9ZYWxCA\",\"prFK4vv8TCv9DqCxk\",\"TGaGcBpcGF5tjLAKs\",\"Ya3eHgs8x3unZRLpb\",\"ZqDujtDWGY2kYuTsQ\",\"m6qKkBY4aPWziyJTj\",\"nyh73Tr6GhqAat78g\",\"kp2ZbCewZJAbfd7xv\",\"gXAv2R45dNKYQ7S2K\",\"2ZFoLTxcCARhwc8xX\",\"e26Kqj7vtx9mZP7fa\",\"mpLFbFKjY6u3nsDMv\",\"FGYBMbExbwHLD2Wdn\",\"YLTZRjM78Wi9J9Re4\",\"vr5tDPvPwG5rq2fHE\",\"QAZ5DGaWWYhku4BNz\",\"nBJve5CzG6WAw7WFQ\",\"ZtTwZM9pQ2sAzhnMR\",\"mHT2bJb5SByfJ8yKS\",\"bBRzXPk7u95YuDWEL\",\"qWR7eXxBiNee22A5u\",\"8wJRuhr4EYGE4qtf3\",\"buX4mCQhtXCfBjeno\",\"6BpBQnSGhzgvhXrEy\",\"FGEeCTorXbX3WvjFW\",\"zw7g7T8wE5R5CBhXr\",\"vewKwcMeGuk3p3MsN\",\"u9cRf5kvtpRB5ffB3\",\"CNc6rmwhbxkxEhHAp\",\"vGKxRcDYDsXzTQuEQ\",\"EXbD3ZjgP9oaoFLYw\",\"BdnE4RS5puoxo92mA\",\"AFfw7cGg83uYk2Miy\",\"PGCDJpQMN8Sjn9Gm6\",\"XzMxsyYj2ZeZ6Jmis\",\"yjtdwc2AC4jA2RWtn\",\"c7uBxu2rgY77H5d79\",\"nkH3HfJXLMNcBMM79\",\"Yp7uvStL97cC9fKkY\",\"z5ebtimXwFFJdYxoa\",\"SY9Euc4kQfRgetXTd\",\"DPi9QGLctq2y76KuE\",\"Po3v3dHCk6wYGKMwi\",\"2Ni3PzJAc5fAhqBkb\",\"CH53jGETBeJTummf3\",\"srJ34BaybkQh3qRkM\",\"PH32cNxBjrK4a28sn\",\"L4mEjfrZ974Y7cZjn\",\"pWJWQDhqzDSmfaFam\",\"3WtHp4MBzciz4AE8M\",\"2Qk2mFu9HBFzrB24i\",\"wJTDDTE3TrmSXKP4d\",\"ahAe7pcyjYGzcDRm4\",\"R9uaMzX2Y4ND8Cosm\",\"65dbBZynphj53nXqA\",\"bX6tpTCjwoi6XMMbK\",\"AasGs8AeX9Lcb9xJn\",\"PAnur8xLTthNL3epT\",\"NGvCPuMiAP3xrRLfB\",\"LwD3CyYSiBfg3mA4r\",\"3XQfH2tybuGQRGMei\",\"bGdbPCjLHgyHh9BRT\",\"gXTAie79kiw28tx5u\",\"DkMLiYoEeKQmAAMQe\",\"yM7MF5y7iCPFuu4HJ\",\"QGjY3hgPYPMmMjc7j\",\"jyoLggHk8xQKZuoQC\",\"tAF9Gf6PiGogbZuWs\",\"pi76g3eRpnKrhee2a\",\"eomLS3wh6tQPN8jtH\",\"bfYmA3LMvhSrK59cn\",\"z47JaNrQMgvuPx5HE\",\"oyB4Wr4EeZnoDaa8B\",\"CHvzhtXnv8HTbPQ56\",\"6vdn7gegY7xXxYCbe\",\"uxKGACwmZ6FNZsMwE\",\"LPZ2QKCoB8q6rG25c\",\"PTo9qt93YqGvL8fCa\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"qDAsEgbhqK3ucb4FR\",\"language\":\"cpp\"},{\"_id\":\"oBFirFPZH7S6vopYE\",\"language\":\"javascript\"},{\"_id\":\"qLMZ2hEvrhRSSSnQw\",\"language\":\"python3\"},{\"_id\":\"qM2MLXJcuXSgKCvBP\",\"language\":\"ruby\"}]}}"]