a["{\"msg\":\"result\",\"id\":\"1459\",\"result\":{\"_id\":\"Cfe88oSTXyxihiPhu\",\"author\":\"Jason Rutz\",\"authorId\":\"sN9bLNiNtg8o7rzCP\",\"code\":\"function fib(n) {\\n\\t\\n}\",\"difficulty\":2.169811320754717,\"quality\":4.3125,\"familyId\":\"6D5N3q55R8uXc82zG\",\"instructions\":\"The Fibonacci sequence is a classic use case for recursive functions since the value of the sequence at a given index is dependent on the last two values. More precisely, it's dependent on the *sum* of the previous two values.\\n\\nWrite a function named `fib` that takes an integer `n` as its input. It should return the Fibonacci sequence's value at index `n`.\\n\\n### Examples\\n```\\nfib(6) ➞ 8\\n// 0 + 1 = 1, 1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8\\n\\nfib(1) ➞ 1\\n\\nfib(2) ➞ 1\\n```\\n\\n### Notes\\n- Assume `n` will always be a non-negative integer.\\n- Assume the Fibonacci sequence's first two values (at indices `0` and `1`) are `0` and `1`.\\n- You *must* make `fib` a recursive function.\\n\\n### Tips\\n- You can call a function within itself to get the value a different iteration returns. This is called a \\\"recursive function\\\".\\n- If you're getting stuck, try looking up the math behind the Fibonacci sequence to see if that inspires you.\\n- Check the **Resources** tab for relevant information!\",\"isHidden\":false,\"lab\":\"Test.assertEquals(fib(0), 0)\\nTest.assertEquals(fib(1), 1)\\nTest.assertEquals(fib(2), 1)\\nTest.assertEquals(fib(3), 2)\\nTest.assertEquals(fib(4), 3)\\nTest.assertEquals(fib(5), 5)\\nTest.assertEquals(fib(6), 8)\\nTest.assertEquals(fib(7), 13)\\nTest.assertEquals(fib(8), 21)\\nTest.assertEquals(fib(9), 34)\\nTest.assertEquals(fib(10), 55)\\nTest.assertEquals(fib(11), 89)\\nTest.assertEquals(fib(12), 144)\\nTest.assertEquals(fib(13), 233)\\nTest.assertEquals(fib(14), 377)\\nTest.assertEquals(fib(15), 610)\\nTest.assertEquals(fib(16), 987)\\nTest.assertEquals(fib(17), 1597)\\nTest.assertEquals(fib(18), 2584)\\nTest.assertEquals(fib(19), 4181)\\nTest.assertEquals(fib(20), 6765)\\nTest.assertEquals(fib(21), 10946)\\nTest.assertEquals(fib(22), 17711)\\nTest.assertEquals(fib(23), 28657)\\nTest.assertEquals(fib(24), 46368)\\nTest.assertEquals(fib(25), 75025)\\nTest.assertEquals(fib(26), 121393)\\nTest.assertEquals(fib(27), 196418)\\nTest.assertEquals(fib(28), 317811)\\nTest.assertEquals(fib(29), 514229)\\nTest.assertEquals(fib(30), 832040)\\nTest.assertEquals(fib(31), 1346269)\\nTest.assertEquals(fib(32), 2178309)\\nTest.assertEquals(fib(33), 3524578)\\nTest.assertEquals(fib(34), 5702887)\\nTest.assertEquals(fib(35), 9227465)\\nTest.assertEquals(fib(36), 14930352)\\nTest.assertEquals(fib(37), 24157817)\\nTest.assertEquals(fib(38), 39088169)\\nTest.assertEquals(fib(39), 63245986)\\nTest.assertEquals(fib(40), 102334155)\",\"language\":\"javascript\",\"summary\":\"The Fibonacci sequence is a classic use case for recursive functions since the value of the sequence at a given index is dependent on the last two values. More precisely, it's dependent on the sum of the previous two values.\\n\\nWrite a function named fib that takes an integer n as its input. It should return the Fibonacci sequence's value at index n.\\n\\nExamples\\nf\",\"tags\":[\"recursion\",\"math\"],\"timestamp\":{\"$date\":1601047985661},\"title\":\"Fibonacci Recursion\",\"stats\":{\"completed\":{\"total\":67,\"ratings\":[2,2,2,2,2,2,3,2,0,3,1,0,4,3,2,2,1,2,1,1,3,3,4,3,2,2,3,0,3,2,2,3,3,1,2,2,2,2,2,3,3,1,3,2,2,4,0,2,3,3,2,3,3],\"quality\":[5,3,3,5,5,2,5,5,5,3,5,5,4,5,5,4],\"rators\":[\"buX4mCQhtXCfBjeno\",\"BdvdJYwHZr7JpkHsn\",\"65dbBZynphj53nXqA\",\"n5wubRfh6zh8QRymN\",\"DjChaA6HXG2vBe4fK\",\"QRv96jmNaYsWkxQEG\",\"yjtdwc2AC4jA2RWtn\",\"dGugwhA6uwwjPGAa5\",\"iRWkFFriwxk5oAbDg\",\"Akq3fQcPRgPrWfsye\",\"mHT2bJb5SByfJ8yKS\",\"omn98QP6uBd923Azp\",\"ZKkrSs7HAZ9nfhneT\",\"a2s2wascsX5x7oJN8\",\"rjmHbvFAqAn3beEiX\",\"bX6tpTCjwoi6XMMbK\",\"5yvKyWSJfhuJu8KFg\",\"CNc6rmwhbxkxEhHAp\",\"WdgtZfWFz7WfwveXR\",\"uinmjK65CT6Ha3Yjs\",\"ZcJm2kuqJnN3CXFaR\",\"5WR53cvkHNE4TEoJG\",\"4XxJxQkB5mNTLY2qk\",\"nyh73Tr6GhqAat78g\",\"db5MGFecSR4RKjZYf\",\"wbzQwextPpnNBR7cG\",\"RhajfcRtgLpeeH4FX\",\"tAF9Gf6PiGogbZuWs\",\"pGh7WykiPe26fHJYv\",\"YmMgWhzhHhQLmGGgH\",\"g4NCSxxHqHCGMpWwT\",\"zw7g7T8wE5R5CBhXr\",\"Es4eX2stRpyoXeC7f\",\"uwizaEGYJWoyDPfpQ\",\"Yp7uvStL97cC9fKkY\",\"mjsSr58kTrcRxqscs\",\"iWGRAvStRr95HHW3o\",\"u9cRf5kvtpRB5ffB3\",\"zza5WjC8QrHcoDZBF\",\"EToEY2vtyMf4ezhJN\",\"uB2jvbQ5wmDKCg7qo\",\"DPi9QGLctq2y76KuE\",\"zMCXYFZSsviDCvjnY\",\"RtPhDuwmvWNHiBxmG\",\"M4vq8ATaS9Jg5X7iP\",\"mfdAK3AxsrRZa3WDd\",\"jemTNShfp6ymAs3pj\",\"2Qk2mFu9HBFzrB24i\",\"wJTDDTE3TrmSXKP4d\",\"srJ34BaybkQh3qRkM\",\"Ya3eHgs8x3unZRLpb\",\"FiK2ruyH8KeHLAgoA\",\"hvTAyFPy4pJHdrYJX\",\"RE4Mm9T6Q9uygAxGS\",\"Afnps7TJQuS9sipMb\",\"sNcDN3s3rH9wcNg5n\",\"PTo9qt93YqGvL8fCa\",\"Jf2CJyrjenaqixHcB\",\"j5FSQCayX3By73CCw\",\"dFc3rYZngT2N9jAB6\",\"AFfw7cGg83uYk2Miy\",\"4BTwobTWMBcE7QK9n\",\"oDtGiNqDMHmhHE3J8\",\"Lq3n2ooEB3o8u8hLd\"]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"xB6ojyF6eiepSW4DR\",\"language\":\"cpp\"},{\"_id\":\"Cfe88oSTXyxihiPhu\",\"language\":\"javascript\"},{\"_id\":\"vQpLcEAWG6hHu6E5Z\",\"language\":\"python3\"},{\"_id\":\"4Q6TiQZmeuAX8BsoT\",\"language\":\"ruby\"}]}}"]