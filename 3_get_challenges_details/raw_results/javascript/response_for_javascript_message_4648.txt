a["{\"msg\":\"result\",\"id\":\"1077\",\"result\":{\"_id\":\"p3NwqZ2evahs9jnPh\",\"archived\":false,\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"function binaryConversion(str) {\\n\\t\\n}\",\"difficulty\":1.7433155080213905,\"familyId\":\"ibACzTMt3sz9F6n6p\",\"instructions\":\"Create a function that takes a string of 1's and 0's (binary) as an argument and return the equivalent decoded ASCII text. Characters can be in the range of \\\"00000000\\\" to \\\"11111111\\\", which means every **eight digits** of binary input represents a single character.\\n\\n- a = 01100001\\n- b = 01100010\\n- c = 01100011\\n\\nIf you were to combine these characters into the string \\\"abc\\\", the corresponding binary would be 011000010110001001100011. Use the resources tab for more info on how to approach this.\\n\\n### Examples\\n```\\nbinaryConversion(\\\"011001010110010001100001011000100110100101110100\\\") ➞ \\\"edabit\\\"\\n\\nbinaryConversion(\\\"001100010011001000110011\\\") ➞ \\\"123\\\"\\n\\nbinaryConversion(\\\"010010000110010101101100011011000110111100111111\\\") ➞ \\\"Hello?\\\"\\n```\\n\\n### Notes\\nIf you are given an empty string as input, you must also return an empty string. Otherwise, the input  will always be a valid binary string.\",\"lab\":\"Test.assertEquals(binaryConversion(\\\"011001010110010001100001011000100110100101110100\\\"), 'edabit')\\nTest.assertEquals(binaryConversion(\\\"001100010011001000110011\\\"), \\\"123\\\", \\\"Ah! You have to handle numeric characters.\\\")\\nTest.assertEquals(binaryConversion(\\\"010010000110010101101100011011000110111100111111\\\"), \\\"Hello?\\\", \\\"You've got to also handle special characters.\\\")\\nTest.assertEquals(binaryConversion(\\\"\\\"), \\\"\\\", \\\"You forgot to handle an empty string correnctly.\\\")\\nTest.assertEquals(binaryConversionrtyUIOLdfgbbhnmIKBJKHIUO(?>?<~~~~~)(*&%^98713/-/*-*/\\\", \\\"It's those darn special characters!\\\")\\n\\n// Random binary string\\nlet randomString = Math.random().toString(36);\\nlet randomStringBinary = \\\"\\\";\\nfor (i=0; i < randomString.length; i++) {\\n  var bin = randomString[i].charCodeAt(0).toString(2);\\n  randomStringBinary += \\\"00000000\\\".slice(bin.length) + bin;\\n}\\nTest.assertEquals(binaryConversion(randomStringBinary), randomString, \\\"Must handle random binary string.\\\")\",\"language\":\"javascript\",\"summary\":\"Create a function that takes a string of 1's and 0's (binary) as an argument and return the equivalent decoded ASCII text. Characters can be in the range of \\\"00000000\\\" to \\\"11111111\\\", which means every eight digits of binary input represents a single character.\\n\\na = 01100001\\nb = 01100010\\nc = 01100011\\n\\nIf you were to combine these characters into the string \\\"abc\",\"tags\":[\"strings\",\"formatting\"],\"timestamp\":{\"$date\":1494894832955},\"title\":\"Binary to ASCII Conversion\",\"stats\":{\"completed\":{\"total\":202,\"ratings\":[2,2,2,2,2,0,1,1,1,3,4,0,3,2,3,0,2,1,3,0,1,3,1,1,0,1,1,1,1,1,2,1,2,2,2,1,2,2,1,2,1,1,1,2,0,1,1,1,2,1,2,3,0,1,2,3,1,0,2,3,3,1,2,2,2,1,2,2,2,2,2,2,2,2,0,0,2,2,5,1,2,2,1,2,2,1,1,2,2,2,3,2,1,2,1,1,3,2,1,1,4,3,2,1,2,2,2,2,2,1,3,3,3,2,2,2,2,2,2,1,2,0,2,0,1,2,2,2,2,0,2,2,2,3,2,2,2,2,2,2,2,2,2,3,3,2,2,1,2,0,2,0,2,3,2,2,2,2,0,1,2,2,3,2,2,2,1,1,0,2,0,2,2,1,2,3,2,2,2,5,2,2,4,2,1,2,2],\"rators\":[\"BkPgkDQGHm66X4Qai\",\"hi7Hvtq2mJfkXEGF2\",\"65dbBZynphj53nXqA\",\"xxmeopX7HggJJsvYB\",\"LDc8cMrTShPkzyEXd\",\"W3s5joDdNgqFB3cMo\",\"fDaXXzyBQCDCqCuQe\",\"Qag2Zd53ozufb4KRK\",\"NmSecPH8dFwXAmYzP\",\"dAe4nADmGE2yjASLr\",\"Mi3oTZCg4834noMua\",\"YxiTDBwRivpLBDWsD\",\"dhhxep2jikG5pkKsA\",\"JzcuZQNK6GD4B4pwB\",\"Pg4eX92EGtSjcG6FF\",\"TwtgrBTHiCnkP584n\",\"sQTaZGCCsE7BNQzyG\",\"C8HNEStupvpdKTkH8\",\"3WTh2ntToLqnQQqoo\",\"uT4aE4CDe62PGkLmZ\",\"XHngE5iScvztMpnR2\",\"rH3y4PP2E39RcKKSJ\",\"3yYC3kjZ6PGuLAKKj\",\"AgQburWndXwEhgomM\",\"aTDXMEyX8wi5moms9\",\"Z8hscN8kLfFgo5Btr\",\"tunvQijaxBmN8NKte\",\"KDdxq4jfx6H5bwyPq\",\"hr9rERhkPtGbbgqdT\",\"uP45nrNKepR2nggn2\",\"EmFLYeEemJLb5xtZq\",\"wQitjzGMLiAx99Ai6\",\"aGeZvwhbJNccmSGPe\",\"q6Q6yRwWxFtegCMPE\",\"XrH5gfcATcfFGyjFp\",\"qLfQAKu3i6pesd76x\",\"Scihu4LEZD8BW3E2K\",\"FXNEQsvx4hy6vZoZv\",\"Hz8mnq7xFJZKLymTh\",\"3YRAthvRqQ2rWZYW7\",\"AHuPZEaTZJE2gwhWY\",\"rToezGeiciwwEkYNd\",\"eYaxKg5Tg2Nj5QGSL\",\"8R9GdggbMGmfqjpJi\",\"c5FoJ26xo6Jer46Cv\",\"AhC88RpTjJ8kETcWh\",\"gguKJ5gCLvwHpqj75\",\"NbsMkYuSFa8LsnZtT\",\"thEsZ7N6X8qfZMbcv\",\"ZZA6JdLEBxHGozyWP\",\"FGEeCTorXbX3WvjFW\",\"nnFK8rFQHfkQ2AK4Z\",\"RNKWjAHrXt9AiMc3g\",\"uhrxTu3Rdjz8nYA9n\",\"ggj8NF9hiYrJfLqGn\",\"rAEpKp4errjbDCnuA\",\"Euhr5S6HctxxLhGbD\",\"yjffWxryA6SN4hddD\",\"MmpisT9nmzPJDQuRC\",\"cuQSsGutnSkLjJpNJ\",\"enuhRD8zZn4QDNTc4\",\"SjY6a2v6jMjGraDKz\",\"Y8zD7oXK6jJSr4Gnu\",\"HQuhas4KXrETxYk9o\",\"g5noFWaoRtZNcEEAW\",\"6ir9H6TvDxyGL4kvG\",\"AjvZ4h696CxhKuptb\",\"jWXdurfxtiaCq64sz\",\"TzA2B5NYnbpJDxL2y\",\"hy63rX7K3hEfyp8B4\",\"SDtZFL5NzAoCPofXk\",\"iBv4YcmvMGFoXgXTN\",\"7gZKfvwaeqsGKXMEN\",\"6BpBQnSGhzgvhXrEy\",\"4erQYN2mguZgyg4tt\",\"f2WHsJ6qZimgyJ6Ci\",\"ak5aPiT6QWpmbnPzD\",\"Xk2g4CNFAnYcvxiSr\",\"G7bdEb5gSLLR59Fvn\",\"iqh4KxBqu2WtRfEET\",\"PaHAGkmRMF6oAgzYC\",\"Jh6sPsgj8yHy95joL\",\"xazeYndpYNBn7oo3Y\",\"qqPkSyFbmCNGDc2c4\",\"zgoq9MhrL2h75DAMA\",\"Sqqgm9CqBwAjn7rpk\",\"gGETo2x9dY5TsWc2b\",\"d2PuPtTWQac8SexuC\",\"bbbpNxM3hgGMCqMn8\",\"TMTH5LfMm9MrBFyEx\",\"g4K6nM72TtXLKog5x\",\"tSzyS8bFkicz9woGM\",\"Nd7Bnx9zF57gn3vLp\",\"WcJLHTiGQ3PjEQaGh\",\"oFckF5bB5dGBQKneS\",\"wcjknenWdPRhrRScv\",\"EjPLq3QSJdGQFJdgW\",\"KPDPaGaJ4jGtRusF2\",\"K8retouBZnftajjFi\",\"n5wubRfh6zh8QRymN\",\"EWn8w8P3nNh7knatY\",\"uhP3Z8KkPxySxn2n7\",\"S7R7voZRxnWjCn8pi\",\"cTasoJQG2iA6FvuK4\",\"tQwDooQpBeuprEcRK\",\"4pagg6vw2Cjepv7tN\",\"fmLzKJTPWvtGRAaAN\",\"RE4Mm9T6Q9uygAxGS\",\"CJnuSjyCBMTbTiibD\",\"eomLS3wh6tQPN8jtH\",\"5GWkiNRN6xMuRu7Dg\",\"9AdMR4uBsHxRcd86Q\",\"vKch2w3b4keMd84jj\",\"rTRvHndHZKKRkb9w5\",\"iERYTAAJo3rBJ8Rok\",\"Q9KQomTTPBsrkAL6c\",\"E3fyZ23p26CcvHvuR\",\"zw7g7T8wE5R5CBhXr\",\"yjtdwc2AC4jA2RWtn\",\"R4JQmeA6cYyfXbmLF\",\"5Zq3aGdvh4LHBvnJL\",\"XKi8iZXBCHCaebSHh\",\"gSpcNJ8znvGGfWsQH\",\"AasGs8AeX9Lcb9xJn\",\"3awyiorYPgCqqP7Sr\",\"DHwbkbzYNpmkSFT7u\",\"FJsvM5yqKuK9yMk9P\",\"BdvdJYwHZr7JpkHsn\",\"2innwjWqxJHo4eRGh\",\"sbme4fRJjjBjYXRbY\",\"ih2aGaqkMaagTgyL2\",\"2CvHJcA9aXt9pvZwA\",\"8BFSTCnoe2QggN64c\",\"kMEBWuX4jztxsAuE4\",\"5YCX58nhHT8oRCHyy\",\"vtHbevf2tHqe6mRxX\",\"pi76g3eRpnKrhee2a\",\"Y9Nz9yafaibz54W4o\",\"YER6iBcpJCuhgrYDN\",\"6g8XrpmhFKqK7nRGc\",\"2ZFoLTxcCARhwc8xX\",\"GCsLzWAhLvniQqR3J\",\"Es4eX2stRpyoXeC7f\",\"mHT2bJb5SByfJ8yKS\",\"a777e8chPvJkY3tKa\",\"QRv96jmNaYsWkxQEG\",\"p5ZshR8zhTqmdhKDc\",\"cp3X8hk8yNME7qoD9\",\"buX4mCQhtXCfBjeno\",\"Lzj3w7QjdzikynsGG\",\"C9LKGu2g5hSijvDzA\",\"eoepTq5ES5tfgY9XT\",\"pLpcDC3EYx2DDQSdt\",\"tAF9Gf6PiGogbZuWs\",\"Po3v3dHCk6wYGKMwi\",\"aEm3Wvj2rFYRL8Lrb\",\"2tCCFm5iefjrRSaxv\",\"mfYrBKwDr4hXSFuuN\",\"kp2ZbCewZJAbfd7xv\",\"7wtuhPesfhcYsfZaZ\",\"2zKQWLmEBw8FBs4ZL\",\"evTTY9hwrtogaNxXn\",\"CNc6rmwhbxkxEhHAp\",\"g4NCSxxHqHCGMpWwT\",\"nkH3HfJXLMNcBMM79\",\"SY9Euc4kQfRgetXTd\",\"c7uBxu2rgY77H5d79\",\"N3CNtWZz4ovJfH9Aw\",\"jLSZdBseR2kfjt8dL\",\"ZcqshY58sGEEvgeaq\",\"AFfw7cGg83uYk2Miy\",\"Yp7uvStL97cC9fKkY\",\"u9cRf5kvtpRB5ffB3\",\"3Gf7ikLijfoxabiPY\",\"RtPhDuwmvWNHiBxmG\",\"M4vq8ATaS9Jg5X7iP\",\"srJ34BaybkQh3qRkM\",\"2Qk2mFu9HBFzrB24i\",\"STipuJs6kBvPqqsSE\",\"PAnur8xLTthNL3epT\",\"CH53jGETBeJTummf3\",\"cgCQDs9i7yChKeAjE\",\"oDtGiNqDMHmhHE3J8\",\"NGvCPuMiAP3xrRLfB\",\"j5FSQCayX3By73CCw\",\"8BJyXvRWcrvN3nttS\",\"nBJve5CzG6WAw7WFQ\",\"gXTAie79kiw28tx5u\",\"iQ7LDrEn8mtYTCAfC\",\"jyoLggHk8xQKZuoQC\",\"LwD3CyYSiBfg3mA4r\",\"n4Y5EEGCjmrK99yrt\",\"jicWFrNKadYuLhqxh\",\"DfdkfQh8ctd2BaaRY\",\"bfYmA3LMvhSrK59cn\",\"LPZ2QKCoB8q6rG25c\",\"oyB4Wr4EeZnoDaa8B\"],\"quality\":[5,5,5,5,5,4,5,5,5,5,5,5,5,5]},\"complaints\":{\"total\":2,\"reasons\":[[\"bad_resources\"],[\"confusing\"]],\"skippers\":[\"BkPgkDQGHm66X4Qai\",\"rejnTjAxkgssG8ftc\",\"i6Btip8vCqASEweXN\"]},\"instructions\":{\"score\":6.6,\"voters\":[\"j9gg82Bp2L7nw7DyJ\"]},\"tests\":{\"score\":-11.05,\"voters\":[\"Sqqgm9CqBwAjn7rpk\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.928571428571429,\"family\":[{\"_id\":\"gWfAshz33PQLopPpC\",\"language\":\"cpp\"},{\"_id\":\"GqqYA3RKuok5Pw2Bx\",\"language\":\"java\"},{\"_id\":\"p3NwqZ2evahs9jnPh\",\"language\":\"javascript\"},{\"_id\":\"Wm8Zin8gQGsupNmbJ\",\"language\":\"python3\"},{\"_id\":\"j7MK2s5h8Loqo5FbK\",\"language\":\"ruby\"}]}}"]