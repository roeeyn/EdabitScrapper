a["{\"msg\":\"result\",\"id\":\"1905\",\"result\":{\"_id\":\"N7LuCieCrotxajSqB\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"function groupSeats(arr, n) {\\n\\t\\n}\",\"difficulty\":2.710144927536232,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"gpfatkuK8gauitcst\",\"instructions\":\"A group of `n` friends are going to see a movie. They would like to find a spot where they can sit next to each other in the same row. A movie theater's seat layout can be represented as a 2-D matrix, where `0`s represent empty seats and `1`s represent taken seats.\\n\\n```\\n[[1, 0, 0, 0, 1, 1, 1],\\n[1, 1, 1, 0, 1, 1, 1],\\n[1, 0, 1, 0, 1, 0, 1],\\n[1, 1, 0, 1, 1, 0, 1],\\n[1, 0, 1, 1, 1, 1, 1],\\n[1, 0, 1, 1, 0, 0, 0]]\\n```\\nCreate a function that, given a seat layout and the number of friends `n`, returns the number of available spots for all `n` friends to sit together. In the above example, if `n = 3`, there would be 2 spots (the first row and last row).\\n\\n### Examples\\n```\\ngroupSeats([\\n  [1, 0, 1, 0, 1, 0, 1],\\n  [0, 1, 0, 1, 0, 1, 0],\\n  [0, 0, 1, 1, 1, 1, 1],\\n  [1, 0, 1, 1, 0, 0, 1],\\n  [1, 1, 1, 0, 1, 0, 1],\\n  [0, 1, 1, 1, 1, 0, 0]\\n], 2) ➞ 3\\n\\ngroupSeats([\\n  [1, 0, 1, 0, 1, 0, 1],\\n  [0, 1, 0, 0, 0, 0, 0],\\n], 4) ➞ 2\\n```\\n\\n### Notes\\nMultiple free arrangements that overlap still count as distinct arrangements (see example #2).\",\"lab\":\"Test.assertEquals(groupSeats([\\n\\t[1, 0, 1, 0, 1, 0, 1], \\n\\t[0, 1, 0, 1, 0, 1, 0], \\n\\t[0, 0, 0, 0, 0, 0, 0], \\n\\t[1, 0, 1, 1, 0, 0, 1], \\n\\t[1, 1, 1, 0, 0, 0, 1], \\n\\t[0, 1, 1, 1, 1, 0, 0]\\n], 7), 1)\\n\\nTest.assertEquals(groupSeats([\\n\\t[1, 0, 0, 0, 1, 1, 1], \\n\\t[1, 1, 1, 0, 1, 1, 1], \\n\\t[1, 0, 1, 0, 1, 0, 1], \\n\\t[1, 1, 0, 1, 1, 0, 1], \\n\\t[1, 0, 1, 1, 1, 1, 1],\\n\\t[1, 0, 1, 1, 0, 0, 0]\\n], 3), 2)\\n\\nTest.assertEquals(groupSeats([\\n\\t[1, 0, 0, 0, 0, 1, 1], \\n\\t[1, 1, 1, 0, 1, 1, 1], \\n\\t[1, 0, 1, 0, 1, 0, 1], \\n\\t[1, 1, 0, 1, 1, 0, 1], \\n\\t[1, 0, 1, 1, 1, 1, 1],\\n\\t[1, 0, 1, 1, 0, 0, 0]\\n], 4), 1)\\n\\nTest.assertEquals(groupSeats([\\n\\t[1, 0, 1, 0, 0, 1, 1], \\n\\t[1, 1, 1, 0, 1, 1, 1], \\n\\t[1, 0, 1, 0, 1, 0, 1], \\n\\t[1, 1, 0, 1, 1, 0, 1], \\n\\t[1, 0, 1, 1, 1, 1, 1],\\n\\t[1, 0, 1, 1, 0, 0, 0]\\n], 5), 0)\\n\\nTest.assertEquals(groupSeats([\\n\\t[1, 0, 1, 0, 0, 1, 1], \\n\\t[1, 1, 1, 0, 1, 1, 1], \\n\\t[1, 0, 1, 0, 1, 0, 1], \\n\\t[1, 1, 0, 1, 0, 0, 1], \\n\\t[1, 0, 1, 1, 1, 1, 1],\\n\\t[1, 0, 1, 1, 0, 0, 0]\\n], 2), 4)\\n\\nTest.assertEquals(groupSeats([\\n\\t[1, 0, 1, 0, 1, 0, 1], \\n\\t[0, 1, 0, 1, 0, 1, 0], \\n\\t[0, 0, 1, 1, 1, 1, 1], \\n\\t[1, 0, 1, 1, 0, 0, 1], \\n\\t[1, 1, 1, 0, 1, 0, 1], \\n\\t[0, 1, 1, 1, 1, 0, 0]\\n], 2), 3)\\n\\nTest.assertEquals(groupSeats([\\n\\t[1, 0, 1, 0, 1, 0, 1], \\n\\t[0, 1, 0, 0, 0, 0, 0], \\n], 4), 2)\",\"language\":\"javascript\",\"summary\":\"A group of n friends are going to see a movie. They would like to find a spot where they can sit next to each other in the same row. A movie theater's seat layout can be represented as a 2-D matrix, where 0s represent empty seats and 1s represent taken seats.\\n\\n[[1, 0, 0, 0, 1, 1, 1],\\n[1, 1, 1, 0, 1, 1, 1],\\n[1, 0, 1, 0, 1, 0, 1],\\n[1, 1, 0, 1, 1, 0, 1],\\n[1, 0, 1\",\"tags\":[\"arrays\",\"higher_order_functions\",\"loops\"],\"timestamp\":{\"$date\":1553910924295},\"title\":\"Movie Theater Seating\",\"stats\":{\"completed\":{\"total\":67,\"ratings\":[3,3,3,3,3,3,3,3,3,3,4,2,5,2,1,0,1,2,5,3,2,3,2,2,3,3,2,4,4,4,2,2,3,2,4,3,4,3,3,1,1,2,3,4,4,2,3,2,2,3,4,3,1,2,2,2,4,2,3,3,3,1,3,2,2,3,3,3,4],\"rators\":[\"mNMQvcxKSSvqqMYCH\",\"J67hC7LSEYS5JwhPj\",\"65dbBZynphj53nXqA\",\"KzMMvGnXcWGTmRE7F\",\"MmKhYSMA8kyXe6w3H\",\"bbbpNxM3hgGMCqMn8\",\"Wv9ZM2EwanF6HscbG\",\"SDtZFL5NzAoCPofXk\",\"LTD7KCHFuXrmTWpQ4\",\"duojX8qpS884knk4m\",\"uGiNmPwyRkCo9a25t\",\"TkiMDGuzqozw7hWj2\",\"2NJuDfSqdrF8kHHni\",\"pd8dm7sWLW9cY6dYW\",\"n5wubRfh6zh8QRymN\",\"odayn9JtHsnvawwFD\",\"4P7hfDhm9oCC2L5rg\",\"6XbwEXgskYHLL7Lu3\",\"CJnuSjyCBMTbTiibD\",\"CMPqZzRxXA7RrXGzt\",\"8xuMMGF7fyQWL2fKH\",\"rSJGLYSXMuu3RWjun\",\"ydEdzuCCZt4yny9Rq\",\"6mvbpk5pvPbuw9Yik\",\"yjtdwc2AC4jA2RWtn\",\"FJsvM5yqKuK9yMk9P\",\"5Zq3aGdvh4LHBvnJL\",\"EjPLq3QSJdGQFJdgW\",\"mHT2bJb5SByfJ8yKS\",\"AasGs8AeX9Lcb9xJn\",\"cRpaCxYRmGcN3Nsoj\",\"dPM2Rk2iMkznyXNEt\",\"2innwjWqxJHo4eRGh\",\"KcpfY4XZ7fNamyLd3\",\"iapvMBwWivxXaybye\",\"YER6iBcpJCuhgrYDN\",\"HHLi7u8RdCaM2NQyy\",\"MqNQMijb6ckT2gXQf\",\"mf8xW5DhPjfXaCEsQ\",\"Kc3SDafimwpZWrATJ\",\"Es4eX2stRpyoXeC7f\",\"sBcsrC5paZm9nxjot\",\"M4vq8ATaS9Jg5X7iP\",\"zMCXYFZSsviDCvjnY\",\"aEm3Wvj2rFYRL8Lrb\",\"u2HofTqtf9oY8WTAz\",\"kp2ZbCewZJAbfd7xv\",\"YPNbhQxe8jHobXqB4\",\"FciF5cPyYvAE6unqR\",\"Xk2g4CNFAnYcvxiSr\",\"6vfjruFp8ZpRSi3AT\",\"Ryrcp76vts2YwHLpu\",\"wR8gHDv7qnLtikX9M\",\"DPi9QGLctq2y76KuE\",\"ShrXg4RHgnyFjzJ8w\",\"PH32cNxBjrK4a28sn\",\"JDkFiM7cxi6JsCzwt\",\"s678Wirfor5uYL5T6\",\"C8yR2sSnDkr8XfAjb\",\"RE4Mm9T6Q9uygAxGS\",\"MbqfuSzRDoqxrJc8S\",\"4Rzq4FgewNZN7WmEf\",\"oDtGiNqDMHmhHE3J8\",\"pMxDFFGrSfHCQAW2k\"],\"quality\":[5,5,5,5]},\"tests\":{\"score\":0,\"voters\":[\"mNMQvcxKSSvqqMYCH\"]},\"instructions\":{\"score\":0,\"voters\":[\"mNMQvcxKSSvqqMYCH\"]},\"flags\":0},\"isHidden\":false,\"quality\":5,\"family\":[{\"_id\":\"N7LuCieCrotxajSqB\",\"language\":\"javascript\"},{\"_id\":\"dKeLAqAxpddbkvNhh\",\"language\":\"python3\"},{\"_id\":\"oNuDgNESkZw2uR5tT\",\"language\":\"ruby\"}]}}"]