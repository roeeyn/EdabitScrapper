a["{\"msg\":\"result\",\"id\":\"1624\",\"result\":{\"_id\":\"A8GLfBCjWv6TvpsGr\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"function collect(s, n) {\\n\\t\\n}\",\"difficulty\":2.289473684210526,\"familyId\":\"SQbWpGWt6NwGW7wnN\",\"instructions\":\"Write a function that returns an array of strings populated from the slices of **n-length** characters of the given word (a slice after another while **n-length** applies onto the word).\\n\\n\\n### Examples\\n```\\ncollect(\\\"intercontinentalisationalism\\\", 6) \\n➞ [\\\"ationa\\\", \\\"interc\\\", \\\"ntalis\\\", \\\"ontine\\\"]\\n\\ncollect(\\\"strengths\\\", 3) \\n➞ [\\\"eng\\\", \\\"str\\\", \\\"ths\\\"]\\n\\ncollect(\\\"pneumonoultramicroscopicsilicovolcanoconiosis\\\", 15) \\n➞ [\\\"croscopicsilico\\\", \\\"pneumonoultrami\\\", \\\"volcanoconiosis\\\"]\\n```\\n\\n\\n### Notes\\n- Ensure that the resulting array is lexicographically ordered.\\n- Return an **empty** array if the *given string* is less than `n`.\\n- A recursive version of this challenge can be found via this [link](https://edabit.com/challenge/PpqEjypCJ7a4RwxLH).\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"let [strVector, numVector, resVector] = [[\\n  \\\"intercontinentalisationalism\\\", \\\"strengths\\\", \\\"pneumonoultramicroscopicsilicovolcanoconiosis\\\",\\n  \\\"lexicographically\\\", \\\"anesthesiologists\\\", \\\"subdermatoglyphic\\\", \\\"sesquipedalianism\\\",\\n  \\\"recollection\\\", \\\"pseudopseudohypoparathyroidism\\\", \\\"floccinaucinihilipilification\\\",\\n  \\\"antidisestablishmentarianism\\\", \\\"supercalifragilisticexpialidocious\\\", \\\"incomprehensibilities\\\",\\n  \\\"astrophysicists\\\", \\\"honorificabilitudinitatibus\\\", \\\"unimaginatively\\\", \\\"euouae\\\", \\\"tsktsk\\\",\\n  \\\"uncopyrightable\\\" ], [ 6, 3, 15, 4, 6, 6, 6, 3, 7, 2, 5, 3, 9, 4, 12, 8, 7, 6, 11 ], [\\n  [\\\"ationa\\\", \\\"interc\\\", \\\"ntalis\\\", \\\"ontine\\\"], [\\\"eng\\\", \\\"str\\\", \\\"ths\\\"],\\n  [\\\"croscopicsilico\\\", \\\"pneumonoultrami\\\", \\\"volcanoconiosis\\\"],\\n  [\\\"aphi\\\", \\\"call\\\", \\\"cogr\\\", \\\"lexi\\\"], [\\\"anesth\\\", \\\"esiolo\\\"], [\\\"matogl\\\", \\\"subder\\\"],\\n  [\\\"pedali\\\", \\\"sesqui\\\"], [\\\"ect\\\", \\\"ion\\\", \\\"oll\\\", \\\"rec\\\"], [\\\"hyroidi\\\", \\\"poparat\\\", \\\"pseudop\\\", \\\"seudohy\\\"],\\n  [\\\"at\\\", \\\"ci\\\", \\\"fl\\\", \\\"ic\\\", \\\"if\\\", \\\"ih\\\", \\\"il\\\", \\\"il\\\", \\\"in\\\", \\\"io\\\", \\\"ip\\\", \\\"na\\\", \\\"oc\\\", \\\"uc\\\"],\\n  [\\\"ablis\\\", \\\"antid\\\", \\\"arian\\\", \\\"hment\\\", \\\"isest\\\"],\\n  [\\\"ali\\\", \\\"ali\\\", \\\"doc\\\", \\\"erc\\\", \\\"fra\\\", \\\"gil\\\", \\\"ice\\\", \\\"iou\\\", \\\"ist\\\", \\\"sup\\\", \\\"xpi\\\"],\\n  [\\\"ensibilit\\\", \\\"incompreh\\\"], [\\\"astr\\\", \\\"ophy\\\", \\\"sici\\\"], [\\\"honorificabi\\\", \\\"litudinitati\\\"],\\n  [\\\"unimagin\\\"], [], [\\\"tsktsk\\\"], [\\\"uncopyright\\\"]\\n]]\\nfor (let i in strVector) Test.assertSimilar(collect(strVector[i], numVector[i]), resVector[i])\",\"language\":\"javascript\",\"quality\":0,\"summary\":\"Write a function that returns an array of strings populated from the slices of n-length characters of the given word (a slice after another while n-length applies onto the word).\\n\\nExamples\\ncollect(\\\"intercontinentalisationalism\\\", 6)\\n➞ [\\\"ationa\\\", \\\"interc\\\", \\\"ntalis\\\", \\\"ontine\\\"]\\n\\ncollect(\\\"strengths\\\", 3)\\n➞ [\\\"eng\\\", \\\"str\\\", \\\"ths\\\"]\\n\\ncollect(\\\"pneumonoultramicroscopicsili\",\"tags\":[\"arrays\",\"sorting\",\"strings\"],\"timestamp\":{\"$date\":1602885304925},\"title\":\"N-Length Letter Groups\",\"stats\":{\"completed\":{\"total\":33,\"ratings\":[2,2,2,2,2,1,4,3,0,3,2,3,3,1,0,2,3,3,2,5,3,1,2,0,3,3,2,3,3,3,3,1,2,3,1,2,2,5],\"quality\":[],\"rators\":[\"yjtdwc2AC4jA2RWtn\",\"a777e8chPvJkY3tKa\",\"buX4mCQhtXCfBjeno\",\"QRv96jmNaYsWkxQEG\",\"tAF9Gf6PiGogbZuWs\",\"mHT2bJb5SByfJ8yKS\",\"Yp7uvStL97cC9fKkY\",\"AFfw7cGg83uYk2Miy\",\"CNc6rmwhbxkxEhHAp\",\"zw7g7T8wE5R5CBhXr\",\"hcm8sL8mNJTSfTdgE\",\"u9cRf5kvtpRB5ffB3\",\"i49enk79wAajcgi7a\",\"acHSYL6uQAgpgFMjp\",\"8BJyXvRWcrvN3nttS\",\"6J6g5TwWz67cN7Zy6\",\"qWR7eXxBiNee22A5u\",\"DPi9QGLctq2y76KuE\",\"g4NCSxxHqHCGMpWwT\",\"srJ34BaybkQh3qRkM\",\"xaXC3t2FRsXnoM2md\",\"c7uBxu2rgY77H5d79\",\"ZcJm2kuqJnN3CXFaR\",\"NGvCPuMiAP3xrRLfB\",\"PH32cNxBjrK4a28sn\",\"ax6vpPEaXjhRqqpHf\",\"M4vq8ATaS9Jg5X7iP\",\"RE4Mm9T6Q9uygAxGS\",\"J7d397iB5GuWRAMfg\",\"vic9SZ9qqj9WhRkbd\",\"oDtGiNqDMHmhHE3J8\",\"Ya3eHgs8x3unZRLpb\",\"CH53jGETBeJTummf3\"]},\"flags\":0},\"editorId\":\"a777e8chPvJkY3tKa\",\"family\":[{\"_id\":\"5RvoqBgeykwy2Xqdb\",\"language\":\"java\"},{\"_id\":\"A8GLfBCjWv6TvpsGr\",\"language\":\"javascript\"},{\"_id\":\"3W2TRbuD2cnBoXuby\",\"language\":\"python3\"}]}}"]