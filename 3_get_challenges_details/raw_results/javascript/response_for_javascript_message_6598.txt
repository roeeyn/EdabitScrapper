a["{\"msg\":\"result\",\"id\":\"2045\",\"result\":{\"_id\":\"diSXtsft9ux8Wq98j\",\"author\":\"er0s\",\"authorId\":\"5Zq3aGdvh4LHBvnJL\",\"code\":\"class Lonely {\\n\\tstatic record(lo, hi) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":2.869565217391304,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"B8KNpChu5z56J8bia\",\"instructions\":\"In this challenge, build a support class `Lonely` to find the last _Lonely_ number inside a sequence. A number is _Lonely_ if the distance from its **closest** Prime sets a new record of the sequence.\\n\\n```\\nSequence = from 0 up 3\\n\\n// Any number lower than 3 doesn't have a Prime preceeding it...\\n// ...so that you'll consider only its next closest Prime.\\n\\n0 has distance 2 from its closest Prime (2)\\n// It's a new record! 0 It's the first lonely number of the sequence\\n1 has distance 1 from its closest Prime (2)\\n2 has distance 1 from 3\\n3 has distance 1 from 2\\n\\n// The sequence 0 to 3  has only one Lonely number: 0\\n```\\n\\n```\\nSequence = Numbers from 5 up 10\\n\\n5 has distance 2 from its closest Prime (3 or 7)\\n// It's a new record! 5 It's the first lonely number of the sequence\\n6 has distance 1 from 5 or 7\\n7 has distance 2 from 5\\n8 has distance 1 from 7\\n9 has distance 2 from 7 or 11\\n10 has distance 1 from 11\\n\\n// The sequence 5 to 10  has only one Lonely number: 5\\n```\\n\\n```\\nSequence = Numbers from 19 up 24\\n\\n19 has distance 2 from its closest Prime (17)\\n// It's a new record! 19 It's the first lonely number of the sequence\\n20 has distance 1 from 19\\n21 has distance 2 from 5\\n22 has distance 1 from 23\\n23 has distance 4 from 19 \\n// It's a new record! 23 is the second lonely number of the sequence\\n24 has distance 1 from 23\\n\\n// The sequence 19 to 24  has two Lonely numbers: 19 and 23\\n```\\n\\nThe class `Lonely` must have a static method `record()` that accepts two integers `lo` and `hi` being the inclusive bounds of the sequence to analyze, and returns an object literal with the following keys:\\n- `number:` is the **last _Lonely_ number found** in the given sequence;\\n- `distance:` is the distance of the `number` from its closest Prime;\\n- `closest:` is the Prime closest to `number` (if two Primes equally distant from `number` are found, return the **higher Prime**).\\n\\n### Examples\\n```\\nLonely.record(0, 22) ➞ {\\n  number: 0, distance: 2, closest: 2\\n}\\n\\nLonely.record(8, 123) ➞ {\\n  number: 53, distance: 6, closest: 59\\n}\\n\\nLonely.record(938, 1190) ➞ {\\n  number: 1140, distance: 11, closest: 1151\\n}\\n\\nLonely.record(120, 1190) ➞ {\\n  number: 211, distance: 12, closest: 223\\n}\\n```\\n\\n### Notes\\n- The numbers  `0`, `1` and `2` have no previous Prime to check, so that you'll consider only the next Prime to set the distance, as in Example #1.\\n- Remember that you are searching for the **closest** Prime when establishing if the distance is a record: `7` has a distance equal to `2` because its closest Prime is `5`.\\n- If a Lonely number is equally distant from two Primes, you have to return the higher Prime, as in Example #2 (`53` has distance `6` from either `47` and `59`).\\n- The first Lonely number of a sequence is (trivially) always equal to the sequence lower bound.\\n- You can expect valid non-negative integers as input, without exceptions to handle.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assertDeepEquals(Lonely.record(0, 22), {\\n\\tnumber: 0, distance: 2, closest: 2\\n})\\n\\nTest.assertDeepEquals(Lonely.record(8, 123), {\\n\\tnumber: 120, distance: 7, closest: 127\\n})\\n\\nTest.assertDeepEquals(Lonely.record(938, 1190), {\\n\\tnumber: 1140, distance: 11, closest: 1151\\n})\\n\\nTest.assertDeepEquals(Lonely.record(120, 1190), {\\n\\tnumber: 211, distance: 12, closest: 223\\n})\\n\\nTest.assertDeepEquals(Lonely.record(2, 31), {\\n\\tnumber: 23, distance: 4, closest: 19\\n})\\n\\nTest.assertDeepEquals(Lonely.record(14, 50), {\\n\\tnumber: 23, distance: 4, closest: 19\\n})\\n\\nTest.assertDeepEquals(Lonely.record(889, 1389), {\\n\\tnumber: 1344, distance: 17, closest: 1361\\n})\\n\\nTest.assertDeepEquals(Lonely.record(3208, 8752), {\\n\\tnumber: 3967, distance: 20, closest: 3947\\n})\\n\\nTest.assertDeepEquals(Lonely.record(16723, 28775), {\\n\\tnumber: 24281, distance: 30, closest: 24251\\n})\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,3,3,2,3,4,4,0,3,3,5,2,2,4,5,4,0,4,5],\"rators\":[\"5Zq3aGdvh4LHBvnJL\",\"yjtdwc2AC4jA2RWtn\",\"NRYNuaQhH6Hife3nf\",\"Gosr8fhiPxmj6nr27\",\"FJsvM5yqKuK9yMk9P\",\"SGhPxX5bHGL8zZqtt\",\"h4jFmtbFn92eA4649\",\"nBo2LLuSMeEgd5f6G\",\"JPcvG7z3cqtrkeqYf\",\"aEm3Wvj2rFYRL8Lrb\",\"rC7kdm3SsSX9udEQk\",\"G9D7k5M9wb3s2wxc3\",\"xn7uGNKeAwPEkP9oA\",\"mHT2bJb5SByfJ8yKS\",\"DNxSie8o54gzdirzQ\",\"yr822PZmmiDDenxpB\",\"J5MgLszeGgtciW56n\",\"8BJyXvRWcrvN3nttS\"],\"total\":20,\"quality\":[]},\"flags\":0},\"summary\":\"In this challenge, build a support class Lonely to find the last Lonely number inside a sequence. A number is Lonely if the distance from its closest Prime sets a new record of the sequence.\\n\\nSequence = from 0 up 3\\n\\n// Any number lower than 3 doesn't have a Prime preceeding it...\\n// ...so that you'll consider only its next closest Prime.\\n\\n0 has distance 2 from\",\"tags\":[\"classes\",\"numbers\",\"loops\"],\"timestamp\":{\"$date\":1583021417701},\"title\":\"A Lonely Class for Lonely Numbers\",\"quality\":0,\"family\":[{\"_id\":\"cmFnYzxQea5LdETgL\",\"language\":\"csharp\"},{\"_id\":\"diSXtsft9ux8Wq98j\",\"language\":\"javascript\"},{\"_id\":\"4GT8pM8JQHW97bYzi\",\"language\":\"python3\"}]}}"]