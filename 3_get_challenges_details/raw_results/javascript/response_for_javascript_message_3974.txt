a["{\"msg\":\"result\",\"id\":\"744\",\"result\":{\"_id\":\"DhbRAw6so2nHJKcXP\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"function flattenCurve(arr) {\\n\\t\\n}\",\"difficulty\":1.5027322404371584,\"familyId\":\"HauRZStewk8HAcH8t\",\"instructions\":\"Given an array of integers, replace every number with the *mean* of all numbers.\\n\\n### Examples\\n```\\nflattenCurve([1, 2, 3, 4, 5]) ➞ [3, 3, 3, 3, 3]\\n\\nflattenCurve([0, 0, 0, 2, 7, 3]) ➞ [2, 2, 2, 2, 2, 2]\\n\\nflattenCurve([4]) ➞ [4]\\n\\nflattenCurve([]) ➞ []\\n```\\n\\n### Notes\\n- Round averages to **1 decimal point**.\\n- Return an empty array if given an empty array (see example #4).\",\"isHidden\":false,\"lab\":\"Test.assertSimilar(flattenCurve([1, 2, 3, 4, 5]),  [3, 3, 3, 3, 3])\\nTest.assertSimilar(flattenCurve([0, 0, 0, 2, 7, 3]), [2, 2, 2, 2, 2, 2])\\nTest.assertSimilar(flattenCurve([4]), [4])\\nTest.assertSimilar(flattenCurve([]), [])\\nTest.assertSimilar(flattenCurve([7, 4, 2, 1]), [3.5, 3.5, 3.5, 3.5])\\nTest.assertSimilar(flattenCurve([-13, 0, -18]), [-10.3, -10.3, -10.3])\\nTest.assertSimilar(flattenCurve([24, 9, 18, -26, -4]), [4.2, 4.2, 4.2, 4.2, 4.2])\\nTest.assertSimilar(flattenCurve([-16, -4, -8, 28, 26]), [5.2, 5.2, 5.2, 5.2, 5.2])\\nTest.assertSimilar(flattenCurve([21, 2, 10]), [11.0, 11.0, 11.0])\\nTest.assertSimilar(flattenCurve([-19, 4, -21, -23, -25, 23, -4]), [-9.3, -9.3, -9.3, -9.3, -9.3, -9.3, -9.3])\\nTest.assertSimilar(flattenCurve([-19, 20]), [0.5, 0.5])\\nTest.assertSimilar(flattenCurve([1, -24, 19]), [-1.3, -1.3, -1.3])\\nTest.assertSimilar(flattenCurve([6, -8, -12, 12, 22, 26, -9, 8, 27, 13]), [8.5, 8.5, 8.5, 8.5, 8.5, 8.5, 8.5, 8.5, 8.5, 8.5])\\nTest.assertSimilar(flattenCurve([-7, -4]), [-5.5, -5.5])\\nTest.assertSimilar(flattenCurve([23, -13, -13, -15, 13]), [-1.0, -1.0, -1.0, -1.0, -1.0])\\nTest.assertSimilar(flattenCurve([22, -12, 0, -19, 2, 17, -11, 6]), [0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6])\\nTest.assertSimilar(flattenCurve([-18, -1, 28, -29, -7, 12, -11]), [-3.7, -3.7, -3.7, -3.7, -3.7, -3.7, -3.7])\\nTest.assertSimilar(flattenCurve([-7, 13, 18]), [8.0, 8.0, 8.0])\\nTest.assertSimilar(flattenCurve([-19, 29, -15, 30, -17]), [1.6, 1.6, 1.6, 1.6, 1.6])\\nTest.assertSimilar(flattenCurve([26, -15, 4, -7, 30, 25, -16, -10, -15]), [2.4, 2.4, 2.4, 2.4, 2.4, 2.4, 2.4, 2.4, 2.4])\\nTest.assertSimilar(flattenCurve([-24, 19, -25, -2, 12, 22, -3, 8, 29]), [4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0])\\nTest.assertSimilar(flattenCurve([-10, 23, -4, -29, -3, -17, -17, 18]), [-4.9, -4.9, -4.9, -4.9, -4.9, -4.9, -4.9, -4.9])\\nTest.assertSimilar(flattenCurve([2, -13, -20, -25, 24, -18, -30, -4, 14, -21]), [-9.1, -9.1, -9.1, -9.1, -9.1, -9.1, -9.1, -9.1, -9.1, -9.1])\\nTest.assertSimilar(flattenCurve([-10, 26, 14, 1, 14, -8, 3, -19]), [2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6])\\nTest.assertSimilar(flattenCurve([8, -16, 28, 8, 16, 30, -4]), [10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0])\",\"language\":\"javascript\",\"summary\":\"Given an array of integers, replace every number with the mean of all numbers.\\n\\nExamples\\nflattenCurve([1, 2, 3, 4, 5]) ➞ [3, 3, 3, 3, 3]\\n\\nflattenCurve([0, 0, 0, 2, 7, 3]) ➞ [2, 2, 2, 2, 2, 2]\\n\\nflattenCurve([4]) ➞ [4]\\n\\nflattenCurve([]) ➞ []\\n\\nNotes\\nRound averages to 1 decimal point.\\nReturn an empty array if given an empty array (see example #4).\",\"tags\":[\"numbers\",\"arrays\",\"language_fundamentals\"],\"timestamp\":{\"$date\":1595701698246},\"title\":\"Flatten the Curve\",\"stats\":{\"completed\":{\"total\":232,\"ratings\":[1,1,1,1,1,2,1,2,0,1,2,2,1,2,1,1,2,1,1,2,3,2,0,2,2,0,0,1,1,2,2,1,2,2,2,1,1,1,2,2,0,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,0,2,2,3,0,2,1,3,2,1,1,0,2,2,2,2,0,2,1,1,1,1,2,2,2,2,2,2,1,2,2,1,2,1,1,0,1,2,1,2,1,2,3,2,2,0,2,1,1,3,2,2,0,1,2,1,2,2,3,0,2,0,2,1,1,1,0,0,2,2,1,1,2,1,1,2,2,1,2,2,2,2,2,2,0,2,2,1,2,0,2,2,5,1,1,2,2,1,2,1,2,0,1,2,2,1,2,2,2,2,2,1,0,2,2,2,0,2,0,1,2,2,1,2,2],\"rators\":[\"QvJ36SnEakZn3pjqH\",\"tAF9Gf6PiGogbZuWs\",\"uAS9uKs8KQmp8uhqn\",\"Po3v3dHCk6wYGKMwi\",\"jnyub52Fi79drGvow\",\"YLuJ7h27mr2GMcMt6\",\"pLpcDC3EYx2DDQSdt\",\"rehehi2Tr2mwaEoJE\",\"buX4mCQhtXCfBjeno\",\"2Pzpsip3QjfZLWCbq\",\"jWXdurfxtiaCq64sz\",\"umE8dRTGWzrZFp755\",\"yjtdwc2AC4jA2RWtn\",\"nkH3HfJXLMNcBMM79\",\"nAmJEX7BkHLd9LsG2\",\"eJHdjA5uq7ZrcRPhQ\",\"C9LKGu2g5hSijvDzA\",\"FJsvM5yqKuK9yMk9P\",\"e3oJAra7NTpDdReFH\",\"LCn6qz2GoMr5577Rd\",\"QRv96jmNaYsWkxQEG\",\"coTsXQZW59EjCAB9d\",\"i5QeAsrM4m6hzPTku\",\"zvhWpHAEk7YgxXaQd\",\"mfYrBKwDr4hXSFuuN\",\"TSrHMxuLpRMiEjyAg\",\"E2hpke7mHxAWsw5t9\",\"7gZKfvwaeqsGKXMEN\",\"eoepTq5ES5tfgY9XT\",\"bX6tpTCjwoi6XMMbK\",\"mwg8jvMHHmQiQRrbr\",\"mHT2bJb5SByfJ8yKS\",\"mwDdQwbZN6tXwAbBA\",\"65dbBZynphj53nXqA\",\"Sfb5RNdmiKSDyqyp4\",\"moe6ztrsNzFymC3A7\",\"jkumHyXfMkhGcPgqC\",\"L4mEjfrZ974Y7cZjn\",\"Ya3eHgs8x3unZRLpb\",\"ZcqshY58sGEEvgeaq\",\"PGCDJpQMN8Sjn9Gm6\",\"vtHbevf2tHqe6mRxX\",\"AFfw7cGg83uYk2Miy\",\"DFdJagsHqWRzH4XZb\",\"evTTY9hwrtogaNxXn\",\"a777e8chPvJkY3tKa\",\"4ntYzGHHBgqf58udP\",\"r7mZLgpQWzRiGddL5\",\"z5ebtimXwFFJdYxoa\",\"fMqXimJLsPiuhT8A8\",\"SNiJRRosrmSWssLj4\",\"RE4Mm9T6Q9uygAxGS\",\"BdnE4RS5puoxo92mA\",\"PAzNgJF54C2mYPkR9\",\"s9qcJASB9WKPWaQzi\",\"Bh5m92NM9uDXtTs9i\",\"Nb6LYPoQP6KJZt8mz\",\"CdXigydGTBLgA577m\",\"7wtuhPesfhcYsfZaZ\",\"aEm3Wvj2rFYRL8Lrb\",\"p5ZshR8zhTqmdhKDc\",\"2tCCFm5iefjrRSaxv\",\"jtzNdgDCzsekkdpxA\",\"QnPD4Sv6W4LHc2Qng\",\"ij9YRJvZz6WbqcGXS\",\"ttuGK7od8simjgmCJ\",\"DaBQKtm4xSgrxqTYF\",\"kp2ZbCewZJAbfd7xv\",\"2zKQWLmEBw8FBs4ZL\",\"cp3X8hk8yNME7qoD9\",\"2innwjWqxJHo4eRGh\",\"FDqfqHn8ww9QoSFhb\",\"n5wubRfh6zh8QRymN\",\"FGEeCTorXbX3WvjFW\",\"u9cRf5kvtpRB5ffB3\",\"PTo9qt93YqGvL8fCa\",\"it4R7mNQ7MTvJkLDm\",\"Gc2bmsof5vD2Hsgqv\",\"nxycxLNEN4PXDotSh\",\"v2w9GN4jHP2fgYdeE\",\"GCsLzWAhLvniQqR3J\",\"c7uBxu2rgY77H5d79\",\"R9uaMzX2Y4ND8Cosm\",\"rBQyeKHq4EwzRCTB8\",\"JsRTAwWK7Nikj4sKA\",\"qWR7eXxBiNee22A5u\",\"CNc6rmwhbxkxEhHAp\",\"g4NCSxxHqHCGMpWwT\",\"vAh63eGRwkuJtoP8v\",\"XkPEb97Tnnvvf5fAY\",\"DDokdbBKxv49M445o\",\"JZ5mQXCKxaFjrnGtq\",\"BdvdJYwHZr7JpkHsn\",\"TNo7w28xev2B5YWkF\",\"jLSZdBseR2kfjt8dL\",\"B7bdDjP5AmpLJHKBS\",\"75NY7vqimaATzRdAX\",\"ro4W36ttXuSLWfvnx\",\"3WtHp4MBzciz4AE8M\",\"FqX6H6EGt37BDJ8sH\",\"QpBEndbkq6opq4DBN\",\"M4vq8ATaS9Jg5X7iP\",\"tPtz279rzBX8kCWMr\",\"JW5J6sdJHAmDmfWnE\",\"vewKwcMeGuk3p3MsN\",\"tseyDEv9zaHBMvLL3\",\"oyB4Wr4EeZnoDaa8B\",\"YLTZRjM78Wi9J9Re4\",\"e9Cknxbx6o7Nb6REs\",\"j4JYXWLmkTDH6iqHr\",\"4Xv87xmdSnpYhi8hz\",\"aarsZPCAfm59DiJEZ\",\"ZTTJprKDvFqKGew7c\",\"fuKrbHrj9KMJS9HX8\",\"STipuJs6kBvPqqsSE\",\"2Ni3PzJAc5fAhqBkb\",\"vGKxRcDYDsXzTQuEQ\",\"YmMgWhzhHhQLmGGgH\",\"Yp7uvStL97cC9fKkY\",\"pWJWQDhqzDSmfaFam\",\"jd9sRTnsyeKpPggba\",\"8BJyXvRWcrvN3nttS\",\"srJ34BaybkQh3qRkM\",\"bBRzXPk7u95YuDWEL\",\"Es4eX2stRpyoXeC7f\",\"YSmLyP3eRhcFjJPzg\",\"CH53jGETBeJTummf3\",\"3Gf7ikLijfoxabiPY\",\"Kt6oGAfrymXmAnn2d\",\"m6qKkBY4aPWziyJTj\",\"RtPhDuwmvWNHiBxmG\",\"eKSJgCaiy4ReJWXTg\",\"zgoq9MhrL2h75DAMA\",\"2ZFoLTxcCARhwc8xX\",\"DPi9QGLctq2y76KuE\",\"f3RAbWvE6uESq7KE5\",\"5hHf2e9zimbmxMqqF\",\"8EJ4j2fcfjTJ7Zrzu\",\"J7d397iB5GuWRAMfg\",\"vEapufGjE49e5JSch\",\"2Qk2mFu9HBFzrB24i\",\"erQgJKaHaETRcqs4x\",\"3rQ3fN5SM2eGHmTi5\",\"cgCQDs9i7yChKeAjE\",\"QAZ5DGaWWYhku4BNz\",\"6BpBQnSGhzgvhXrEy\",\"ApqWTmEEkTCsDou48\",\"npp5hesJrst6ghKSM\",\"K45zPJxsABuA3WSyj\",\"jyCByAZwu576xDwEL\",\"k6QB6fzbj4LsWktRL\",\"wJTDDTE3TrmSXKP4d\",\"LwD3CyYSiBfg3mA4r\",\"pPpmP7xeJzGgK362R\",\"TtrXnGzi9MyhLvWiz\",\"eomLS3wh6tQPN8jtH\",\"ZK6YmYMsfwXYtaZ9P\",\"oDtGiNqDMHmhHE3J8\",\"pi76g3eRpnKrhee2a\",\"733qgZ7ZSSSrzbXGw\",\"yuLxi2qBJvMnwgdgJ\",\"QjGNkRM3Xc78yShJN\",\"szQg8dxKNNre3v3Jk\",\"hHEMpogFW5m7ioS7q\",\"yWSGujxphYSsL63Zq\",\"9HZbxzkzgz4CvePtv\",\"E6DBfkTgHuPsDWdG8\",\"nBJve5CzG6WAw7WFQ\",\"N3CNtWZz4ovJfH9Aw\",\"NGvCPuMiAP3xrRLfB\",\"AasGs8AeX9Lcb9xJn\",\"8s5Bdrn7RTga7DL6x\",\"mpLFbFKjY6u3nsDMv\",\"BLfqcr9BQNky6EfLR\",\"sfj3i3eEAfZa3f9kg\",\"rpNNPWzdFCc9TzKMz\",\"JFiiZhAZTNQSvjzdp\",\"RoGGD5cpHb4ftdLDv\",\"j5FSQCayX3By73CCw\",\"E3fkFzNeAGctuvqA2\",\"gXTAie79kiw28tx5u\",\"sN2JyFeJCwfwwHPwF\",\"Xk2g4CNFAnYcvxiSr\",\"ZKuwzkssrSsDGNPr5\",\"jyoLggHk8xQKZuoQC\",\"PytNZK9mNiRiZxPrm\",\"jicWFrNKadYuLhqxh\",\"Zi39A2nmRWTdjd9DK\",\"uxKGACwmZ6FNZsMwE\",\"bfYmA3LMvhSrK59cn\",\"SCYNpjgtLCE9rKpYB\",\"9XnGoq9Tv6ut3zTtH\",\"sMcFMPkMJC4Kh6ymj\",\"d8JhF9zfpexkRnCea\",\"rPsSEYqwmttMPEuvo\",\"x2Cz7S8rCKJqCE3Xe\",\"ghzSC9JHRNwMPEjDB\",\"HpfaNWBYpnsQRAPQn\",\"z47JaNrQMgvuPx5HE\",\"Y7xPTPKpNAEiM2jkH\",\"inbiBEY2tizFwkN84\",\"HCfkcKnPs9mrJojdG\",\"QguFWo84zgF3c8BGr\",\"4WYjScmBWK9eXRzvd\",\"gf4xrfguK6KiEF9yi\",\"jkkKzNT77bMStXhpW\",\"NJCmkbH5e7qbtZYhd\",\"LPZ2QKCoB8q6rG25c\",\"CHvzhtXnv8HTbPQ56\",\"zJTXDTdbwnopRazGo\",\"qAEumdjLRx2AGAmzw\",\"QGjY3hgPYPMmMjc7j\",\"FY7atTfxaahfAHtJv\",\"psdbt2PkjPv4qTwtr\",\"XRRZ5kd8PvAQYtA4s\",\"DPpSwhhiuF4Y9YR2i\",\"QJoHpT8fkmJ5j4hk4\"],\"quality\":[3,5,5,3,5,5,5,4,4,5,5,5,5,5,5,5,4,5,5,5,3,5,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"quality\":4.717948717948718,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"KCimR56ZQXxwt8sRE\",\"language\":\"cpp\"},{\"_id\":\"DhbRAw6so2nHJKcXP\",\"language\":\"javascript\"},{\"_id\":\"WsHSAEBQW6F7nsMjr\",\"language\":\"python3\"},{\"_id\":\"ihzkodEv9ugxM3Smk\",\"language\":\"ruby\"}]}}"]