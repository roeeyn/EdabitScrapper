a["{\"msg\":\"result\",\"id\":\"1884\",\"result\":{\"_id\":\"CzfwodvnWs5QjzEgv\",\"archived\":false,\"author\":\"Pustur\",\"authorId\":\"65dbBZynphj53nXqA\",\"code\":\"// on  character: █\\n// off character: ░\\n\\nfunction gameOfLife(board) {\\n\\t\\n}\",\"difficulty\":2.688888888888889,\"familyId\":\"K2HFTftTLPnheYboS\",\"instructions\":\"![Conway's Game of Life](https://s3.amazonaws.com/edabit-images/game-of-life.gif)\\n\\nThe goal of this challenge is to implement the logic used in Conway's Game of Life. Wikipedia will give a better understanding of what it is and how it works (check the resources tab above).\\n\\n### Rules\\n- **For a space that's \\\"populated\\\":**\\n    - Each cell with 0 or 1 neighbours dies, as if by solitude.\\n    - Each cell with 2 or 3 neighbours survives.\\n    - Each cell with 4 or more neighbours dies, as if by overpopulation.\\n- **For a space that's \\\"empty\\\" or \\\"unpopulated\\\":**\\n    - Each cell with 3 neighbours becomes populated.\\n\\n### Parameters\\n`board`: a 2-dimensional array of values 0 to 1.\\n- 0 means the cell is empty.\\n- 1 means the cell is populated.\\n\\n### Return Value\\nA `string` containing the board's state after the game logic has been applied once.\\n\\n```\\nOn character: █\\nOff character: ░\\n```\\n\\n### Notes\\n- The string should be divided by newlines `\\\\n` to signal the end of each row.\\n- A cell's \\\"neighbours\\\" are the eight cells that are vertically, horizontally and diagonally adjacent to it.\",\"lab\":\"const example1 = [\\n  [0, 0, 0],\\n  [0, 1, 0],\\n  [0, 0, 0],\\n];\\n\\nconst example2 = [\\n  [0, 1, 0],\\n  [1, 1, 1],\\n  [0, 1, 0],\\n];\\n\\nconst example3 = [\\n  [1, 0, 0],\\n  [0, 1, 0],\\n  [0, 0, 1],\\n];\\n\\nconst example4 = [\\n  [1, 0, 1],\\n  [0, 0, 0],\\n  [1, 0, 0],\\n];\\n\\nconst glider = [\\n  [0, 0, 0, 0, 0],\\n  [0, 0, 1, 0, 0],\\n  [0, 0, 0, 1, 0],\\n  [0, 1, 1, 1, 0],\\n  [0, 0, 0, 0, 0],\\n];\\n\\nconst smallExploder = [\\n  [0, 0, 0, 0, 0],\\n  [0, 0, 1, 0, 0],\\n  [0, 1, 1, 1, 0],\\n  [0, 1, 0, 1, 0],\\n  [0, 0, 1, 0, 0],\\n  [0, 0, 0, 0, 0],\\n];\\n\\nconst exploder = [\\n  [0, 0, 0, 0, 0, 0, 0],\\n  [0, 1, 0, 1, 0, 1, 0],\\n  [0, 1, 0, 0, 0, 1, 0],\\n  [0, 1, 0, 0, 0, 1, 0],\\n  [0, 1, 0, 0, 0, 1, 0],\\n  [0, 1, 0, 1, 0, 1, 0],\\n  [0, 0, 0, 0, 0, 0, 0],\\n];\\n\\nconst rowOf10 = [\\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n  [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],\\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n];\\n\\nconst lightweightSpaceship = [\\n  [0, 0, 0, 0, 0, 0, 0],\\n  [0, 0, 1, 1, 1, 1, 0],\\n  [0, 1, 0, 0, 0, 1, 0],\\n  [0, 0, 0, 0, 0, 1, 0],\\n  [0, 1, 0, 0, 1, 0, 0],\\n  [0, 0, 0, 0, 0, 0, 0],\\n];\\n\\nconst tumbler = [\\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\\n  [0, 0, 1, 1, 0, 1, 1, 0, 0],\\n  [0, 0, 1, 1, 0, 1, 1, 0, 0],\\n  [0, 0, 0, 1, 0, 1, 0, 0, 0],\\n  [0, 1, 0, 1, 0, 1, 0, 1, 0],\\n  [0, 1, 0, 1, 0, 1, 0, 1, 0],\\n  [0, 1, 1, 0, 0, 0, 1, 1, 0],\\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\\n];\\n\\nconst checkerboard = [\\n  [1, 0, 1, 0, 1, 0, 1, 0, 1],\\n  [0, 1, 0, 1, 0, 1, 0, 1, 0],\\n  [1, 0, 1, 0, 1, 0, 1, 0, 1],\\n  [0, 1, 0, 1, 0, 1, 0, 1, 0],\\n  [1, 0, 1, 0, 1, 0, 1, 0, 1],\\n  [0, 1, 0, 1, 0, 1, 0, 1, 0],\\n  [1, 0, 1, 0, 1, 0, 1, 0, 1],\\n];\\n\\nconst bigShape = [\\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n  [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0],\\n  [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],\\n  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0],\\n  [0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0],\\n  [0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0],\\n  [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0],\\n  [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],\\n  [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0],\\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n];\\n\\n// Actual tests\\nTest.assertEquals(\\n  gameOfLife(example1),\\n  '░░░\\\\n░░░\\\\n░░░',\\n  'Single cells die of solitude'\\n);\\nTest.assertEquals(\\n  gameOfLife(example2),\\n  '███\\\\n█░█\\\\n███',\\n  'Overpopulation is not good'\\n);\\nTest.assertEquals(\\n  gameOfLife(example3),\\n  '░░░\\\\n░█░\\\\n░░░',\\n  '2-3 neighbours is healthy'\\n);\\nTest.assertEquals(\\n  gameOfLife(example4),\\n  '░░░\\\\n░█░\\\\n░░░',\\n  '3 neighbours will bring a dead cell to life'\\n);\\nTest.assertEquals(\\n  gameOfLife(glider),\\n  '░░░░░\\\\n░░░░░\\\\n░█░█░\\\\n░░██░\\\\n░░█░░'\\n);\\nTest.assertEquals(\\n  gameOfLife(smallExploder),\\n  '░░░░░\\\\n░███░\\\\n░█░█░\\\\n░█░█░\\\\n░░█░░\\\\n░░░░░'\\n);\\nTest.assertEquals(\\n  gameOfLife(exploder),\\n  '░░░░░░░\\\\n░░█░█░░\\\\n██░░░██\\\\n███░███\\\\n██░░░██\\\\n░░█░█░░\\\\n░░░░░░░'\\n);\\nTest.assertEquals(\\n  gameOfLife(rowOf10),\\n  '░░████████░░\\\\n░░████████░░\\\\n░░████████░░'\\n);\\nTest.assertEquals(\\n  gameOfLife(lightweightSpaceship),\\n  '░░░██░░\\\\n░░████░\\\\n░░██░██\\\\n░░░░██░\\\\n░░░░░░░\\\\n░░░░░░░'\\n);\\nTest.assertEquals(\\n  gameOfLife(tumbler),\\n  '░░░░░░░░░\\\\n░░██░██░░\\\\n░░░░░░░░░\\\\n░░░█░█░░░\\\\n░░░█░█░░░\\\\n██░█░█░██\\\\n░██░░░██░\\\\n░░░░░░░░░'\\n);\\nTest.assertEquals(\\n  gameOfLife(checkerboard),\\n  '░███████░\\\\n█░░░░░░░█\\\\n█░░░░░░░█\\\\n█░░░░░░░█\\\\n█░░░░░░░█\\\\n█░░░░░░░█\\\\n░███████░'\\n);\\nTest.assertEquals(\\n  gameOfLife(bigShape),\\n  '░░░░░░░░░█░░░░░\\\\n░░██░░░░█░█░░░░\\\\n░░██░░░░█░░░░░░\\\\n░█░░█░░██░░█░░░\\\\n░█░██░░░█░█░█░░\\\\n░░█░░░░░░░░███░\\\\n░░░██░░░░█░░██░\\\\n░░░░██░░░░░░░░░\\\\n░░░░░█░░█░░░░░░\\\\n░░░░░░░░░░░░░░░'\\n);\",\"language\":\"javascript\",\"summary\":\"Conway's Game of Life\\n\\nThe goal of this challenge is to implement the logic used in Conway's Game of Life. Wikipedia will give a better understanding of what it is and how it works (check the resources tab above).\\n\\nRules\\nFor a space that's \\\"populated\\\":\\n    Each cell with 0 or 1 neighbours dies, as if by solitude.\\n    Each cell with 2 or 3 neighbours survives.\",\"tags\":[\"arrays\",\"games\",\"loops\",\"conditions\"],\"timestamp\":{\"$date\":1504221337317},\"title\":\"Conway's Game of Life\",\"stats\":{\"completed\":{\"total\":51,\"ratings\":[1,1,1,1,1,1,1,2,3,3,3,3,3,3,2,3,3,2,3,4,3,4,4,2,3,4,2,4,3,1,2,3,2,4,2,3,2,5,4,4,3,3,2,4,4],\"rators\":[\"65dbBZynphj53nXqA\",\"XHngE5iScvztMpnR2\",\"hi7Hvtq2mJfkXEGF2\",\"sQTaZGCCsE7BNQzyG\",\"dR6ussAnMb5WYYHcr\",\"c5FoJ26xo6Jer46Cv\",\"crRLwgECPr6FoZqdA\",\"thEsZ7N6X8qfZMbcv\",\"FGEeCTorXbX3WvjFW\",\"eLQMac37xk5AixBTa\",\"SDtZFL5NzAoCPofXk\",\"XcHCqYmeoqxDsoucx\",\"ak5aPiT6QWpmbnPzD\",\"G7bdEb5gSLLR59Fvn\",\"n5wubRfh6zh8QRymN\",\"yjtdwc2AC4jA2RWtn\",\"AasGs8AeX9Lcb9xJn\",\"5Zq3aGdvh4LHBvnJL\",\"g5noFWaoRtZNcEEAW\",\"wQ25xzXqh4y3A8NBB\",\"pi76g3eRpnKrhee2a\",\"ZtniSFrgec4oj6Pxm\",\"8YJp93zsQWop6af4o\",\"KcpfY4XZ7fNamyLd3\",\"FGXNwe55Fu7RNMoNr\",\"yWmYQYGDEN4t3Pkwq\",\"oe6vfCWgP8jAsXnY6\",\"zXL5t2ZfLBMCrQXYM\",\"AnahAy6RmvegPhmbh\",\"FKMPCJDxvG3Rtf3JE\",\"GrkcYEqxC8wx7R8Sy\",\"7dZm8yZnenQb7xEwn\",\"QfryzFn4wXsWp6vdM\",\"7TXyMDHFYjna3dyPb\",\"oEt8RvKQHmQqGQADd\",\"eFjGhq7C7bBKXjT6X\",\"mHT2bJb5SByfJ8yKS\",\"aEm3Wvj2rFYRL8Lrb\",\"pd8dm7sWLW9cY6dYW\",\"pGh7WykiPe26fHJYv\",\"477x24BHagvCWeCsS\",\"Po3v3dHCk6wYGKMwi\",\"mDWNyaaQ9hvPCRzSd\",\"CNc6rmwhbxkxEhHAp\",\"QjGNkRM3Xc78yShJN\",\"e9Cknxbx6o7Nb6REs\",\"Xk2g4CNFAnYcvxiSr\",\"s678Wirfor5uYL5T6\"],\"quality\":[5,5,5,5,5,5,5]},\"complaints\":{\"total\":0,\"reasons\":[[\"spam\"]],\"skippers\":[\"65dbBZynphj53nXqA\",\"vbzg3FS3a6BhBwfC4\"]},\"instructions\":{\"score\":13.650000000000002,\"voters\":[\"GRZzKCbeb4xKHFCrZ\",\"5LoHDiuaWur8GNgEQ\",\"XcHCqYmeoqxDsoucx\"]},\"tests\":{\"score\":0,\"voters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":5,\"family\":[{\"_id\":\"CzfwodvnWs5QjzEgv\",\"language\":\"javascript\"},{\"_id\":\"cHzvB5KCWCK3oCLGL\",\"language\":\"python3\"},{\"_id\":\"K6PWN8NoCxSgToS3h\",\"language\":\"ruby\"}]}}"]