a["{\"msg\":\"result\",\"id\":\"854\",\"result\":{\"_id\":\"5bETfgL67yy9FKnF4\",\"author\":\"Isaac Pak\",\"authorId\":\"yaL57wdXmgAZTvKfX\",\"code\":\"/* Fix the expression */\\nconst REGEXP = /end/\",\"difficulty\":1.588235294117647,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"Ee3GisWX4LctrGRwZ\",\"instructions\":\"Write a regular expression that ensures the word \\\"end\\\" is inside of another word (e.g. \\\"bending\\\"). Non-word characters such as `!`, `?`, etc. cannot be boundaries.\\n\\n### Examples\\n```\\n\\\"The end of the story.\\\" ➞ false\\n\\\"Endings are pointless.\\\" ➞ false\\n\\\"Let's send!\\\" ➞ false\\n\\\"We viewed the rendering at the end.\\\" ➞ false\\n\\\"Sometimes bending the rules is good.\\\" ➞ true\\n```\\n\\n### Notes\\n- You cannot use ` \\\\w `, ` * `, `.` or ` + ` in your expressions.\\n- You **don't** need to write a function, just the pattern.\\n- The expression should be case-insensitive and should check all occurences of \\\"end\\\".\\n- Find more info on RegEx and boundary assertions in **Resources**.\",\"isHidden\":false,\"lab\":\"const validate = (REGEXP) => {\\n\\t if(/[w*.+]/.test(String(REGEXP))) return () => \\\"exclude\\\"\\n\\t return function testReg(str) {\\n\\t\\t return REGEXP.test(str) \\n\\t }\\n} \\n\\nlet str1 = \\\"The end of the story.\\\"\\nlet str2 = \\\"Ending is pointless.\\\"\\nlet str3 = \\\"DEFENDING THE CROWN WILL END THE CROWN\\\"\\nlet str4 = \\\"Let's send!\\\"\\nlet str5 = \\\"We viewed the rendering at the end.\\\" \\nlet str6 = \\\"Sometimes bending the rules is good.\\\"\\n\\nconst testStr = validate(REGEXP) \\n\\nTest.assertNotEquals(testStr(str1), \\\"exclude\\\", \\\"You are not allowed to use \\\\w, *, ., or + in your expressions.\\\")\\nTest.assertEquals(testStr(str1), false)\\nTest.assertEquals(testStr(str2), false)\\nTest.assertEquals(testStr(str3), true)\\nTest.assertEquals(testStr(str3), false)\\nTest.assertEquals(testStr(str4), false)\\nTest.assertEquals(testStr(str5), true)\\nTest.assertEquals(testStr(str5), false)\\nTest.assertEquals(testStr(str6), true)\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[1,1,1,1,1,1,2,2,2,1,2,2,0,2,2,0,1,2,1,2,1,2,2,2,2,3,2,2,1,1,1,2,1,2,2,2,2,2,1,0,2,2,2,2,0,2,2,2,1,2,3,2,0,2,2,2,3,1,2,2,2,2,1,1,2,2,0,2,0,2,2,1,0,2,0,2,2,0,1,2,2,2,2,0,2,0,1,0,4,3,2,2,2,1,2,0,2,0,2,2,5,2,1,2,2,2,1,1,2,0,2,2,2,2,2,3,2,2,1],\"rators\":[\"yaL57wdXmgAZTvKfX\",\"n5wubRfh6zh8QRymN\",\"65dbBZynphj53nXqA\",\"5Zq3aGdvh4LHBvnJL\",\"zTZtM9jRsu8eXie6s\",\"RE4Mm9T6Q9uygAxGS\",\"g5noFWaoRtZNcEEAW\",\"xfxkLoQsbZBonmBGp\",\"M7kpJSXFx67HhrTaZ\",\"9XnGoq9Tv6ut3zTtH\",\"yjtdwc2AC4jA2RWtn\",\"pi76g3eRpnKrhee2a\",\"EjPLq3QSJdGQFJdgW\",\"QEhgdaBYvvTH4GpoN\",\"eANW47mfA359Y6JyP\",\"zgoq9MhrL2h75DAMA\",\"2innwjWqxJHo4eRGh\",\"k5TGxBtLi9BXxeChT\",\"mHT2bJb5SByfJ8yKS\",\"6BpBQnSGhzgvhXrEy\",\"FJsvM5yqKuK9yMk9P\",\"YGYzqaDrwa2SdqKt8\",\"AasGs8AeX9Lcb9xJn\",\"cJwiiiX7qwSvgtmk8\",\"2CvHJcA9aXt9pvZwA\",\"YER6iBcpJCuhgrYDN\",\"P4jeiN4MnamFDkGNo\",\"zd9FLSzsGz3evKafy\",\"9Pzg45NEiRXhLtLh3\",\"EWn8w8P3nNh7knatY\",\"Nv5a34gxg5yvLKRW8\",\"v2AzBqD64zLiRD9bP\",\"SNiJRRosrmSWssLj4\",\"vtHbevf2tHqe6mRxX\",\"3aZvfgr2H2WF8Yog2\",\"eomLS3wh6tQPN8jtH\",\"Gc2bmsof5vD2Hsgqv\",\"dDFJpK4pXCsQYuHmc\",\"2ZFoLTxcCARhwc8xX\",\"zw7g7T8wE5R5CBhXr\",\"TNo7w28xev2B5YWkF\",\"zW5JY78HhFCrSPEeE\",\"eNdxN376u6gM4qdXF\",\"tAF9Gf6PiGogbZuWs\",\"rdF6thfrJ4ZHeXMg5\",\"7wtuhPesfhcYsfZaZ\",\"vn6nR36mdfY8z2zKx\",\"jqbm8L6895JgAtZ6H\",\"ij9YRJvZz6WbqcGXS\",\"eFjGhq7C7bBKXjT6X\",\"2zKQWLmEBw8FBs4ZL\",\"aEm3Wvj2rFYRL8Lrb\",\"L4mEjfrZ974Y7cZjn\",\"C9LKGu2g5hSijvDzA\",\"PGCDJpQMN8Sjn9Gm6\",\"pLpcDC3EYx2DDQSdt\",\"7gZKfvwaeqsGKXMEN\",\"jED84My7PjSKANQsX\",\"nkH3HfJXLMNcBMM79\",\"e9Cknxbx6o7Nb6REs\",\"Ya3eHgs8x3unZRLpb\",\"Po3v3dHCk6wYGKMwi\",\"NczXsSrYNX6nDWhjF\",\"PAzNgJF54C2mYPkR9\",\"evTTY9hwrtogaNxXn\",\"jkumHyXfMkhGcPgqC\",\"s7Qqx4Jnuq85iB7Lw\",\"jcPZ5ySXseCB7Ec3x\",\"DaBQKtm4xSgrxqTYF\",\"QRv96jmNaYsWkxQEG\",\"Akq3fQcPRgPrWfsye\",\"M4vq8ATaS9Jg5X7iP\",\"75NY7vqimaATzRdAX\",\"hyx8iH2z3QySmyRKT\",\"BdvdJYwHZr7JpkHsn\",\"9SrwsygZbwzGbYZSK\",\"iE4gk7JCQ5mfpRTru\",\"CC7Z9sKKLCkHhp6MW\",\"AFfw7cGg83uYk2Miy\",\"2QziknsznNeMPRh3g\",\"pdGuqmMyeN4wZaWwv\",\"Yp7uvStL97cC9fKkY\",\"QpBEndbkq6opq4DBN\",\"wbzQwextPpnNBR7cG\",\"NchnDcEmsLTeFZ4FH\",\"2Ni3PzJAc5fAhqBkb\",\"pER3Z29q2fkQdcxTw\",\"R9uaMzX2Y4ND8Cosm\",\"CyFfrFHjA7sLQohY9\",\"3Gf7ikLijfoxabiPY\",\"KxTMbSBrKmbBRyA4J\",\"RtPhDuwmvWNHiBxmG\",\"jpSy4qhuDNwPk9mrf\",\"Yfggc4Hr3fmtG4dsS\",\"yxh6CjdHCfkhJszj6\",\"ZtTwZM9pQ2sAzhnMR\",\"ZcqshY58sGEEvgeaq\",\"CH53jGETBeJTummf3\",\"u9cRf5kvtpRB5ffB3\",\"wJTDDTE3TrmSXKP4d\",\"QAZ5DGaWWYhku4BNz\",\"c7uBxu2rgY77H5d79\",\"J7d397iB5GuWRAMfg\",\"jemTNShfp6ymAs3pj\",\"2Qk2mFu9HBFzrB24i\",\"oDtGiNqDMHmhHE3J8\",\"pWJWQDhqzDSmfaFam\",\"NGvCPuMiAP3xrRLfB\",\"wT5gGgvjKc5wz59AQ\",\"s4iT787Tvvhrivkar\",\"nBJve5CzG6WAw7WFQ\",\"PH32cNxBjrK4a28sn\",\"gXTAie79kiw28tx5u\",\"9HZbxzkzgz4CvePtv\",\"jyoLggHk8xQKZuoQC\",\"HCfkcKnPs9mrJojdG\",\"bfYmA3LMvhSrK59cn\",\"TtrXnGzi9MyhLvWiz\",\"QGjY3hgPYPMmMjc7j\",\"ZKuwzkssrSsDGNPr5\",\"sMcFMPkMJC4Kh6ymj\",\"jicWFrNKadYuLhqxh\",\"8BJyXvRWcrvN3nttS\",\"g5txYGWqRNSrS7MED\",\"mpLFbFKjY6u3nsDMv\",\"rPsSEYqwmttMPEuvo\",\"uxKGACwmZ6FNZsMwE\",\"nC4sPB69yYuTSks9T\",\"4WYjScmBWK9eXRzvd\",\"PTo9qt93YqGvL8fCa\",\"HpfaNWBYpnsQRAPQn\",\"jkkKzNT77bMStXhpW\",\"rMc3LPajSgm68hNfC\"],\"total\":145,\"quality\":[4,2,5,3,5,3,2,5,3,5,5,5,3,5,5,5,5,5,4]},\"flags\":0},\"summary\":\"Write a regular expression that ensures the word \\\"end\\\" is inside of another word (e.g. \\\"bending\\\"). Non-word characters such as !, ?, etc. cannot be boundaries.\\n\\nExamples\\n\\\"The end of the story.\\\" ➞ false\\n\\\"Endings are pointless.\\\" ➞ false\\n\\\"Let's send!\\\" ➞ false\\n\\\"We viewed the rendering at the end.\\\" ➞ false\\n\\\"Sometimes bending the rules is good.\\\" ➞ true\\n\\nNotes\\nYou ca\",\"tags\":[\"formatting\",\"regex\",\"validation\"],\"timestamp\":{\"$date\":1580674626696},\"title\":\"RegEx: Boundary Assertions III\",\"quality\":4.157894736842105,\"family\":[{\"_id\":\"5bETfgL67yy9FKnF4\",\"language\":\"javascript\"},{\"_id\":\"bDn2nC9GHwZMwFxRN\",\"language\":\"python3\"}]}}"]