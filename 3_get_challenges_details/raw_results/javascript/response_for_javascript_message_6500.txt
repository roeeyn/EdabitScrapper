a["{\"msg\":\"result\",\"id\":\"1997\",\"result\":{\"_id\":\"H4of8EdxS98ikEaZd\",\"archived\":false,\"author\":\"VeryKnave\",\"authorId\":\"RW2wFPbMQniZWPmw4\",\"code\":\"function syncSubs(subtitles, timeIncrement) {\\n\\t\\n}\",\"difficulty\":2.810810810810811,\"familyId\":\"giEkhyDiT2vX2y9bv\",\"instructions\":\"Create a function that will increment every time format found in a string (for example `00:42:33,120`) by a specific time (for example `00:00:30,550`). The result between the examples is `00:43:03,670`.\\n\\n- The function must take 2 arguments: a string from where to search time format and a string that respects the format `hours:minutes:seconds,milliseconds`.\\n- The function must return a string identical to the first argument but with all time format incremented with the second argument time format.\\n- If the second argument does not respect the given time format (for example `00:00:00` or `0:0:0,000`), you must return \\\"There is a problem with the second argument\\\".\\n\\n### Examples\\n```\\nsyncSubs(\\\"708\\n00:44:50,006 --> 00:44:53,007\\nHi.\\\", \\\"00:03:30,550\\\")\\n➞\\n\\\"708\\n00:45:20,556 --> 00:45:23,557\\nHi.\\\"\\n\\nsyncSubs(\\\"179\\n00:12:52,766 --> 00:12:55,900\\n[Door rattling]\\\", \\\"00:11:11,111\\\")\\n➞\\n\\\"179\\n00:24:04,011 --> 00:24:07,011\\n[Door rattling]\\\"\\n\\nsyncSubs(\\\"188\\n00:13:37,243 --> 00:13:39,744\\n30 minutes.\\nEveryone's ready.\\n189\\n00:13:39,779 --> 00:13:43,548\\n\\n\\\", \\\"01:00:51,111\\\")\\n➞\\n\\\"188\\n02:06:28,000 --> 02:06:30,000\\n30 minutes.\\nEveryone's ready.\\n189\\n02:06:30,000 --> 02:06:34,000\\\"\\n```\\n\\n### Notes\\nYou don't need to worry about a time format being wrong in the first string like `00:13:79,779` or `00:13:39,79` because there won't be any mistake in it.\",\"lab\":\"Test.assertEquals(syncSubs(\\n`708\\n00:44:50,006 --> 00:44:53,007\\nPeople are taking this festival\\nextremely seriously.`, `00:03:30,550`),\\n`708\\n00:48:20,556 --> 00:48:23,557\\nPeople are taking this festival\\nextremely seriously.`)\\nTest.assertEquals(syncSubs(\\n`729\\n00:45:55,704 --> 00:45:59,506\\nSo we don't have to wait for it.`, `00:00:00,000`),\\n`729\\n00:45:55,704 --> 00:45:59,506\\nSo we don't have to wait for it.`)\\nTest.assertEquals(syncSubs(\\n`735\\n00:46:24,967 --> 00:46:27,701\\nWe've already won.\\n\\n736\\n00:46:27,736 --> 00:46:30,637\\n[Crowd cheers]`, `01:21:00,211`),\\n`735\\n02:07:25,178 --> 02:07:27,912\\nWe've already won.\\n\\n736\\n02:07:27,947 --> 02:07:30,848\\n[Crowd cheers]`)\\nTest.assertEquals(syncSubs(\\n`722\\n00:45:34,483 --> 00:45:36,917\\nMy mercy...`, `00:60:09,010`),\\n`There is a problem with the second argument`)\\nTest.assertEquals(syncSubs(\\n`722\\n00:45:34,483 --> 00:45:36,917\\nMy mercy...`, `00:00:09.000`),\\n`There is a problem with the second argument`)\\nTest.assertEquals(syncSubs(\\n`722\\n00:45:34,483 --> 00:45:36,917\\nMy mercy...`, `0:4:5,921`),\\n`There is a problem with the second argument`)\\nTest.assertEquals(syncSubs(\\n`187\\n00:13:29,202 --> 00:13:37,202\\n♪`, `02:54:55,999`),\\n`187\\n03:08:25,201 --> 03:08:33,201\\n♪`)\",\"language\":\"javascript\",\"summary\":\"Create a function that will increment every time format found in a string (for example 00:42:33,120) by a specific time (for example 00:00:30,550). The result between the examples is 00:43:03,670.\\n\\nThe function must take 2 arguments: a string from where to search time format and a string that respects the format hours:minutes:seconds,milliseconds.\\nThe function\",\"tags\":[\"algorithms\",\"regex\",\"strings\",\"formatting\"],\"timestamp\":{\"$date\":1508872981845},\"title\":\"Synchronize the Subtitles\",\"stats\":{\"completed\":{\"total\":36,\"ratings\":[2,2,2,2,2,2,2,1,2,2,2,3,5,2,3,3,3,2,2,3,3,3,4,3,5,5,4,2,2,3,3,2,3,4,4,3,4],\"rators\":[\"RW2wFPbMQniZWPmw4\",\"sQTaZGCCsE7BNQzyG\",\"hi7Hvtq2mJfkXEGF2\",\"XHngE5iScvztMpnR2\",\"Hz8mnq7xFJZKLymTh\",\"65dbBZynphj53nXqA\",\"c5FoJ26xo6Jer46Cv\",\"NbsMkYuSFa8LsnZtT\",\"thEsZ7N6X8qfZMbcv\",\"avwPftKTdxeQyjat9\",\"xKd5YoMGrSn82Mxrh\",\"gCHq5hPwtNt6xfKip\",\"AgQburWndXwEhgomM\",\"ubvR9Xd98sbMntTeb\",\"SDtZFL5NzAoCPofXk\",\"XcHCqYmeoqxDsoucx\",\"n5wubRfh6zh8QRymN\",\"yjtdwc2AC4jA2RWtn\",\"ZzL9DhWovpDnrvPb3\",\"7PP6aGLEosDGsjRqW\",\"FJsvM5yqKuK9yMk9P\",\"eQdnBfe8riy82SNrK\",\"AasGs8AeX9Lcb9xJn\",\"cRpaCxYRmGcN3Nsoj\",\"dPM2Rk2iMkznyXNEt\",\"54Ka62KytXRsrLPhZ\",\"5Zq3aGdvh4LHBvnJL\",\"SxqAEMaYcE9Ps9eh6\",\"Kc3SDafimwpZWrATJ\",\"mHT2bJb5SByfJ8yKS\",\"M4vq8ATaS9Jg5X7iP\",\"aEm3Wvj2rFYRL8Lrb\",\"s7Qqx4Jnuq85iB7Lw\",\"pGh7WykiPe26fHJYv\"],\"quality\":[5]},\"complaints\":{\"total\":1,\"reasons\":[[\"bug\"]],\"skippers\":[\"RW2wFPbMQniZWPmw4\",\"sQTaZGCCsE7BNQzyG\"]},\"instructions\":{\"score\":-32,\"voters\":[\"GRZzKCbeb4xKHFCrZ\",\"P3Rgvwe9huA23S9fM\",\"5FbXfTCwHopDAtvJA\",\"BvcqHPxsT26HWsL5e\",\"tAF9Gf6PiGogbZuWs\",\"LBHrRYLgzn7Q7FibL\"]},\"tests\":{\"score\":0,\"voters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":5,\"family\":[{\"_id\":\"H4of8EdxS98ikEaZd\",\"language\":\"javascript\"},{\"_id\":\"xsBX7vABGoL9m8Z4e\",\"language\":\"python3\"}]}}"]