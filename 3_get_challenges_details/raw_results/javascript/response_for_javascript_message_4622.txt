a["{\"msg\":\"result\",\"id\":\"1064\",\"result\":{\"_id\":\"HG93JYjse2r3mb9n3\",\"author\":\"Isaac Pak\",\"authorId\":\"yaL57wdXmgAZTvKfX\",\"code\":\"const REGEXP = /* YOU FILL IN */\",\"difficulty\":1.7176470588235293,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"cHbhHkFfMkcEdLK2A\",\"instructions\":\"You are given the task to fetch all positive numbers from lists. You discover that the lists are in string format and the numbers are separated by spaces. Someone has already created a function to output positive numbers but they just need a RegEx to make it work.\\n\\n```\\nconst list = \\\"23 -43 34 -44 45 -55 56\\\"\\n\\nfunction positiveNumbers(list) {\\n  const REGEXP = /* YOU FILL IN */\\n  return res.filter( x => REGEXP.test(x))\\n}\\n\\npositiveNumbers(list) // should return [\\\"23\\\", \\\"34\\\", \\\"45\\\", \\\"56\\\"]\\n```\\n\\nWrite the **regular expression** to make the function work. You are required to use a **negative lookbehind** assertion in your expression.\\n\\n### Notes\\nCheck the **Resources** tab for details on lookbehind assertions.\",\"isHidden\":false,\"lab\":\"const str1 = \\\"23 234 -2 334 -3\\\"\\nconst str2 = \\\"1 2 -3 -4 5\\\"\\nconst str3 = \\\"234 -3 -5 3\\\"\\n\\nconst validate = (REGEXP) => {\\n\\t if(!/\\\\(\\\\?\\\\<\\\\!/.test(String(REGEXP))) return () => \\\"negative lookbehind required\\\"\\n\\t return function testReg(str) {\\n\\t\\t return str.match(REGEXP)\\n\\t }\\n}\\n\\nconst testExp = validate(REGEXP)\\n\\nTest.assertNotEquals(testExp(str1), \\\"negative lookbehind required\\\", \\\"You are required to use a negative lookbehind in your expression.\\\")\\nTest.assertSimilar(testExp(str1), [\\\"23\\\", \\\"234\\\", \\\"334\\\"])\\nTest.assertSimilar(testExp(str2), [\\\"1\\\", \\\"2\\\", \\\"5\\\"])\\nTest.assertSimilar(testExp(str3), [\\\"234\\\", \\\"3\\\"])\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,1,1,1,0,2,1,0,2,3,2,1,1,2,2,2,3,2,2,1,1,2,3,2,1,2,2,1,3,1,0,2,2,2,2,2,1,2,2,2,2,2,2,2,2,1,2,3,2,2,0,2,1,2,2,2,2,0,2,2,1,2,2,1,1,2,2,2,2,2,5,3,1,1,1,2,1,1,0,3],\"rators\":[\"yaL57wdXmgAZTvKfX\",\"n5wubRfh6zh8QRymN\",\"QEhgdaBYvvTH4GpoN\",\"5Zq3aGdvh4LHBvnJL\",\"yjtdwc2AC4jA2RWtn\",\"Y9Nz9yafaibz54W4o\",\"mHT2bJb5SByfJ8yKS\",\"xfxkLoQsbZBonmBGp\",\"6BpBQnSGhzgvhXrEy\",\"pi76g3eRpnKrhee2a\",\"AasGs8AeX9Lcb9xJn\",\"k5TGxBtLi9BXxeChT\",\"RE4Mm9T6Q9uygAxGS\",\"cJwiiiX7qwSvgtmk8\",\"2CvHJcA9aXt9pvZwA\",\"2innwjWqxJHo4eRGh\",\"YER6iBcpJCuhgrYDN\",\"EWn8w8P3nNh7knatY\",\"FJsvM5yqKuK9yMk9P\",\"Nv5a34gxg5yvLKRW8\",\"EjPLq3QSJdGQFJdgW\",\"dDFJpK4pXCsQYuHmc\",\"eomLS3wh6tQPN8jtH\",\"QgGZqNMPGAovhT7vZ\",\"vn6nR36mdfY8z2zKx\",\"65dbBZynphj53nXqA\",\"vtHbevf2tHqe6mRxX\",\"eNdxN376u6gM4qdXF\",\"zW5JY78HhFCrSPEeE\",\"Q75jsoXjhTXJRrw8z\",\"zw7g7T8wE5R5CBhXr\",\"CJvaWhQcMYz3B8TKx\",\"a777e8chPvJkY3tKa\",\"eFjGhq7C7bBKXjT6X\",\"ij9YRJvZz6WbqcGXS\",\"C9LKGu2g5hSijvDzA\",\"aEm3Wvj2rFYRL8Lrb\",\"eoepTq5ES5tfgY9XT\",\"buX4mCQhtXCfBjeno\",\"2zKQWLmEBw8FBs4ZL\",\"ZcqshY58sGEEvgeaq\",\"8raviPK67KKxzQWcF\",\"LCn6qz2GoMr5577Rd\",\"pLpcDC3EYx2DDQSdt\",\"tAF9Gf6PiGogbZuWs\",\"jED84My7PjSKANQsX\",\"7gZKfvwaeqsGKXMEN\",\"ZcmrtSpqFnCBEK5YE\",\"e9Cknxbx6o7Nb6REs\",\"Nb6LYPoQP6KJZt8mz\",\"Po3v3dHCk6wYGKMwi\",\"2tCCFm5iefjrRSaxv\",\"s7Qqx4Jnuq85iB7Lw\",\"mfYrBKwDr4hXSFuuN\",\"Ya3eHgs8x3unZRLpb\",\"7wtuhPesfhcYsfZaZ\",\"kp2ZbCewZJAbfd7xv\",\"WBBN35jGBzzHWeLn5\",\"AFfw7cGg83uYk2Miy\",\"CNc6rmwhbxkxEhHAp\",\"BdvdJYwHZr7JpkHsn\",\"g4NCSxxHqHCGMpWwT\",\"evTTY9hwrtogaNxXn\",\"2QziknsznNeMPRh3g\",\"vGKxRcDYDsXzTQuEQ\",\"Gc2bmsof5vD2Hsgqv\",\"wbzQwextPpnNBR7cG\",\"Akq3fQcPRgPrWfsye\",\"NchnDcEmsLTeFZ4FH\",\"Yp7uvStL97cC9fKkY\",\"jpSy4qhuDNwPk9mrf\",\"3Gf7ikLijfoxabiPY\",\"Yfggc4Hr3fmtG4dsS\",\"nkH3HfJXLMNcBMM79\",\"u9cRf5kvtpRB5ffB3\",\"2Qk2mFu9HBFzrB24i\",\"GsrjAqoAdLATJH9qD\",\"J7d397iB5GuWRAMfg\",\"jemTNShfp6ymAs3pj\",\"NGvCPuMiAP3xrRLfB\",\"YQdHYk5JsyjDyvkma\",\"oDtGiNqDMHmhHE3J8\",\"nBJve5CzG6WAw7WFQ\",\"9HZbxzkzgz4CvePtv\",\"gXTAie79kiw28tx5u\",\"TtrXnGzi9MyhLvWiz\",\"jyoLggHk8xQKZuoQC\",\"8BJyXvRWcrvN3nttS\",\"HpfaNWBYpnsQRAPQn\",\"bfYmA3LMvhSrK59cn\",\"QGjY3hgPYPMmMjc7j\",\"NJCmkbH5e7qbtZYhd\",\"rMc3LPajSgm68hNfC\",\"jicWFrNKadYuLhqxh\",\"CHvzhtXnv8HTbPQ56\",\"jkkKzNT77bMStXhpW\"],\"total\":102,\"quality\":[5,5,3,5,5,5,5,4,5,4,5,5,5,5,5,5]},\"flags\":0},\"summary\":\"You are given the task to fetch all positive numbers from lists. You discover that the lists are in string format and the numbers are separated by spaces. Someone has already created a function to output positive numbers but they just need a RegEx to make it work.\\n\\nconst list = \\\"23 -43 34 -44 45 -55 56\\\"\\n\\nfunction positiveNumbers(list) {\\n  const REGEXP = /* YOU\",\"tags\":[\"language_fundamentals\",\"formatting\",\"regex\"],\"timestamp\":{\"$date\":1581011501438},\"title\":\"RegEx: Boundary Assertions VII\",\"quality\":4.75,\"family\":[{\"_id\":\"HG93JYjse2r3mb9n3\",\"language\":\"javascript\"},{\"_id\":\"Ggj8t3fBCzjBHvFR7\",\"language\":\"python3\"}]}}"]