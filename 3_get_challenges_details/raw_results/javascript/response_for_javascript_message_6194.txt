a["{\"msg\":\"result\",\"id\":\"1842\",\"result\":{\"_id\":\"jFqttm7eFe8j4WMPu\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"function isExact(n) {\\n\\t\\n}\",\"difficulty\":2.65,\"editorId\":\"a777e8chPvJkY3tKa\",\"familyId\":\"YosHKnZpZgAE4KRyS\",\"instructions\":\"Create a  function that tests if a number is the **exact upper bound** of the factorial of `n`. If so, return an array of the **exact factorial bound** and `n`, or otherwise, the string `\\\"Not exact!\\\"`.\\n\\n### Examples\\n```\\nisExact(6) ➞ [6, 3]\\n\\nisExact(24) ➞ [24, 4]\\n\\nisExact(125) ➞ \\\"Not exact!\\\"\\n\\nisExact(720) ➞ [720, 6]\\n\\nisExact(1024) ➞ \\\"Not exact!\\\"\\n\\nisExact(40320) ➞ [40320, 8]\\n```\\n\\n### Notes\\n- There will be no exceptions to handle, all inputs are positive integers.\\n- A **recursive** version of this challenge can be found via this [link](https://edabit.com/challenge/chDJCBDzZkjSExMwm).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assertSimilar(isExact(2), [2, 2])\\nTest.assertSimilar(isExact(6), [6, 3])\\nTest.assertSimilar(isExact(24), [24, 4])\\nTest.assertSimilar(isExact(120), [120, 5])\\nTest.assertSimilar(isExact(5040), [5040, 7])\\nTest.assertSimilar(isExact(40320), [40320, 8])\\nTest.assertSimilar(isExact(3628800), [3628800, 10])\\nTest.assertSimilar(isExact(20922789888000), [20922789888000, 16])\\nTest.assertEquals(isExact(125), \\\"Not exact!\\\")\\nTest.assertEquals(isExact(721), \\\"Not exact!\\\")\\nTest.assertEquals(isExact(1024), \\\"Not exact!\\\")\\nTest.assertEquals(isExact(41845579776000), \\\"Not exact!\\\")\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,4,1,2,0,3,2,2,2,2,0,2,3,3,3,3,3,3,4,2,2,1,3,3,2,4,4,1,1,3,3,1,3,2,3,3,2,0,3,5,3,3,2,2,3,2,3,4,4,4,2,2,3,1,2,3,1,4,3,4,3,4,2,4,3,2,3,4,2,4,3,3,3,5,1,3],\"rators\":[\"a777e8chPvJkY3tKa\",\"yjtdwc2AC4jA2RWtn\",\"aEm3Wvj2rFYRL8Lrb\",\"neZGagD5qFmHT5nRy\",\"GJMDLcqB498dLie9L\",\"mHT2bJb5SByfJ8yKS\",\"rC7kdm3SsSX9udEQk\",\"eRx8Jjo64cajrwZdB\",\"bX6tpTCjwoi6XMMbK\",\"QRv96jmNaYsWkxQEG\",\"RE4Mm9T6Q9uygAxGS\",\"FJsvM5yqKuK9yMk9P\",\"PytNZK9mNiRiZxPrm\",\"tAF9Gf6PiGogbZuWs\",\"vt88eKvFz6ES8sbrD\",\"SgnfjQGSp53DLKbmP\",\"65dbBZynphj53nXqA\",\"Nb6LYPoQP6KJZt8mz\",\"oH7uJsBnZv9b2mHMS\",\"pzKrEFWpvdhTcHQ49\",\"yuLxi2qBJvMnwgdgJ\",\"faYyw7jGsSeaMeYYd\",\"FrQHRxFML7tY6Lft8\",\"8Z8dHvkfJbX737jji\",\"BjJhatTBaTWm3ZhCt\",\"YH6jzNshBaoTusGLB\",\"n5wubRfh6zh8QRymN\",\"CmRAmkw6kqvazgGEj\",\"iCr5TEH8Xm3qRBnXW\",\"kp2ZbCewZJAbfd7xv\",\"4RsakkyRXyYGwFxEa\",\"uP9SRKxpG4GjKkKq5\",\"RkWxtC9EdPNiQ9sTC\",\"buX4mCQhtXCfBjeno\",\"YmMgWhzhHhQLmGGgH\",\"Q8FTKThCLgAYjSRWr\",\"Ryodq598CxEMM2ZFW\",\"JGBCMpnbbi5ztuFoX\",\"8BJyXvRWcrvN3nttS\",\"QfP4rDgDrTiSLxB6J\",\"o4GtQNrHsukSgzcmQ\",\"oyPQ39i4BiFdj3M2E\",\"wWcrtjHBuXCFinWkP\",\"pupo5TnehimMbLzgR\",\"CwZGhzES2j3b8r3Ce\",\"TvLPYMqkTQK7iZdFC\",\"EjYWHaWnYBaKn2xpi\",\"RDWyvs7i9Gr4WTwYa\",\"6eYGT4i69vND6W246\",\"acHSYL6uQAgpgFMjp\",\"hcm8sL8mNJTSfTdgE\",\"rXAJxptvHj2pTwLWL\",\"2ZFoLTxcCARhwc8xX\",\"ZtTwZM9pQ2sAzhnMR\",\"HmQu5Cd2KivaXhaR7\",\"mDWNyaaQ9hvPCRzSd\",\"tCvT5NKhiubZtfv9s\",\"sf5QEdW3YQAnE4f6d\",\"5nHtgdY8F2FbAMawq\",\"oznHebGE2PwvaCpjx\",\"7BJS6a42awGgQTrEn\",\"BMp3yjCJXr4fLDcJr\",\"4XxJxQkB5mNTLY2qk\",\"Xk2g4CNFAnYcvxiSr\",\"LtTpCzF8kt6Rdth4X\",\"PGLPwGKMeFpcsFi7R\",\"SNt23Ei5dSNtfpEMd\",\"KG5kJoP68PaZCASxF\",\"RKKuw76K7sRBMouKq\",\"u47H6FgG2SRhyeuBY\",\"Xf5mRzAb6BoGp7daC\",\"DPi9QGLctq2y76KuE\",\"dcDbos4GTnEDbP8yL\",\"MsXtuZ6LNcvz33Pod\",\"j3JZyXPSLrrSo6qrq\",\"CCkHqRq5tcYmW2dsT\",\"wXHkXaZdRhA2bAqMK\",\"2xWkdabqZQpjQiEMQ\",\"THoTJTpHE2D4TGWAJ\",\"LZqgtAM96Nv4SzQQW\",\"dC9CPAsH7Zv6hrA87\",\"qQeLW3djaFSwXN5qn\",\"HZ45PdMEwk2HKnR3C\",\"ZcJm2kuqJnN3CXFaR\",\"CNc6rmwhbxkxEhHAp\",\"WXmH6ehmZ4yggc5oR\",\"NyDWgsfYNRtRvAeBH\",\"Yp7uvStL97cC9fKkY\",\"E2oamFfN6xb8qjkqo\",\"QjGNkRM3Xc78yShJN\",\"mFcp5uDRSYqN7Thut\",\"nourMPWzPzNCPYZo3\",\"LNoPXwizSmkrBgkEN\",\"wJTDDTE3TrmSXKP4d\",\"AQSqD9oNv2uPfxZCR\",\"ceMycDhXzsRojnr9F\",\"s678Wirfor5uYL5T6\",\"sZ2eCa6pF6EN9PMmd\",\"NGvCPuMiAP3xrRLfB\",\"AFfw7cGg83uYk2Miy\",\"PH32cNxBjrK4a28sn\",\"RMpwqdCRrdBiGQhPT\",\"oDtGiNqDMHmhHE3J8\"],\"total\":111,\"quality\":[5,5,4,5,5,5,5,2,5,4,5,5,5,5,5,5,3,4,5,5,5,4,3,5,5,4,3,5]},\"flags\":0},\"summary\":\"Create a  function that tests if a number is the exact upper bound of the factorial of n. If so, return an array of the exact factorial bound and n, or otherwise, the string \\\"Not exact!\\\".\\n\\nExamples\\nisExact(6) ➞ [6, 3]\\n\\nisExact(24) ➞ [24, 4]\\n\\nisExact(125) ➞ \\\"Not exact!\\\"\\n\\nisExact(720) ➞ [720, 6]\\n\\nisExact(1024) ➞ \\\"Not exact!\\\"\\n\\nisExact(40320) ➞ [40320, 8]\\n\\nNotes\\nT\",\"tags\":[\"loops\",\"numbers\",\"validation\"],\"timestamp\":{\"$date\":1594856359707},\"title\":\"Exact Factorial Bounds\",\"quality\":4.5,\"family\":[{\"_id\":\"3fruHQM3iQjKwY4oi\",\"language\":\"cpp\"},{\"_id\":\"hTWrPnnCScgSsoN9A\",\"language\":\"java\"},{\"_id\":\"jFqttm7eFe8j4WMPu\",\"language\":\"javascript\"},{\"_id\":\"f24TDCGbYRjGfALQp\",\"language\":\"python3\"},{\"_id\":\"cMktD3Exn4bWgBYc5\",\"language\":\"ruby\"}]}}"]