a["{\"msg\":\"result\",\"id\":\"1330\",\"result\":{\"_id\":\"TFnrbZNSE6PxjFBcr\",\"author\":\"er0s\",\"authorId\":\"5Zq3aGdvh4LHBvnJL\",\"code\":\"function powerMorphic(num) {\\n\\t\\n}\",\"difficulty\":2.1142857142857143,\"editorId\":\"5Zq3aGdvh4LHBvnJL\",\"familyId\":\"GobY5ZuLvAx2GLH4p\",\"instructions\":\"A number `num`, that elevated to the power of another number `k` \\\"ends\\\" with the same `num`, it's automorphic.\\n\\n```\\n5² = 25\\n// It's automorphic because \\\"25\\\" ends with \\\"5\\\"\\n\\n5³  = 125\\n// It's automorphic because \\\"125\\\" ends with \\\"5\\\"\\n\\n76⁴ = 33362176\\n// It's automorphic because \\\"33362176\\\" ends with \\\"76\\\"\\n```\\n\\nA number can have various powers that make it automorphic (i.e. look at number `5` in the above example). In this challenge, you have to verify if the given number is automorphic for each power from `2` up to `10`.\\n\\nGiven a non-negative integer `num`, implement a function that returns the string:\\n- `\\\"Polymorphic\\\"` if `num` is automorphic for **every** power from `2` up to `10`.\\n- `\\\"Quadrimorphic\\\"`  if `num` is automorphic for **only four** powers (any from `2` up to `10`).\\n- `\\\"Dimorphic\\\"`  if `num` is automorphic for **only two** powers (any from `2` up to `10`).\\n- `\\\"Enamorphic\\\"`  if `num` is automorphic for **only one** power (any from `2` up to `10`).\\n- `\\\"Amorphic\\\"`  if `num` is **not automorphic** for for any powers from `2` up to `10`.\\n\\n### Examples\\n```\\npowerMorphic(5) ➞ \\\"Polymorphic\\\"\\n// From 2 up to 10, every power of 5 ends with 5\\n\\npowerMorphic(21) ➞ \\\"Enamorphic\\\"\\n// 21⁶ = 85766121\\n\\npowerMorphic(7) ➞ \\\"Dimorphic\\\"\\n// 7⁵ = 716807\\n// 7⁹ = 40353607\\n\\npowerMorphic(4) ➞ \\\"Quadrimorphic\\\"\\n// 4³ = 64\\n// 4⁵ = 1024\\n// 4⁷ = 16384\\n// 4⁹ = 262144\\n\\npowerMorphic(10) ➞ \\\"Amorphic\\\"\\n// There are no powers that make it automorphic\\n```\\n\\n### Notes\\n- You can do a complete loop cycle to check if `num` is automorphic for each power, or you can try to spot the discriminants that permit you to shorten the logic of your code.\\n- Despite being inspired by the OEIS sequence A003226, the assertions of this challenge are to be considered properly valid only in the specific context.\\n- **Note for JavaScript**: the inputs will be given as `BigInt` (big integers) to avoid approximation errors but, besides the numbers notation, there are no differences in the procedure to adopt. You can find a compendium about the global object `BigInt` into the **Resources** tab.\",\"isHidden\":false,\"lab\":\"Test.assertEquals(powerMorphic(0n), \\\"Polymorphic\\\")\\nTest.assertEquals(powerMorphic(1n), \\\"Polymorphic\\\")\\nTest.assertEquals(powerMorphic(4n), \\\"Quadrimorphic\\\")\\nTest.assertEquals(powerMorphic(7n), \\\"Dimorphic\\\")\\nTest.assertEquals(powerMorphic(10n), \\\"Amorphic\\\")\\nTest.assertEquals(powerMorphic(68n), \\\"Dimorphic\\\")\\nTest.assertEquals(powerMorphic(121n), \\\"Amorphic\\\")\\nTest.assertEquals(powerMorphic(501n), \\\"Quadrimorphic\\\")\\nTest.assertEquals(powerMorphic(625n), \\\"Polymorphic\\\")\\nTest.assertEquals(powerMorphic(3376n), \\\"Enamorphic\\\")\\nTest.assertEquals(powerMorphic(2030n), \\\"Amorphic\\\")\\nTest.assertEquals(powerMorphic(3751n), \\\"Quadrimorphic\\\")\\nTest.assertEquals(powerMorphic(9376n), \\\"Polymorphic\\\")\\nTest.assertEquals(powerMorphic(9999n), \\\"Quadrimorphic\\\")\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[1,1,1,1,1,1,2,1,2,3,1,2,2,2,1,2,2,2,2,3,2,2,3,0,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,3,3,2,3,2,1,3,2,3,3,0,2,2,3,2,2,3,3,3,3,3,3,3,3,3,2,3,5],\"rators\":[\"5Zq3aGdvh4LHBvnJL\",\"cRpaCxYRmGcN3Nsoj\",\"yjtdwc2AC4jA2RWtn\",\"k5TGxBtLi9BXxeChT\",\"7JCLyrrY6JYGpocac\",\"YER6iBcpJCuhgrYDN\",\"RE4Mm9T6Q9uygAxGS\",\"zgoq9MhrL2h75DAMA\",\"6BpBQnSGhzgvhXrEy\",\"n5wubRfh6zh8QRymN\",\"mHT2bJb5SByfJ8yKS\",\"AasGs8AeX9Lcb9xJn\",\"pi76g3eRpnKrhee2a\",\"FJsvM5yqKuK9yMk9P\",\"2CvHJcA9aXt9pvZwA\",\"EWn8w8P3nNh7knatY\",\"M7kpJSXFx67HhrTaZ\",\"2ZFoLTxcCARhwc8xX\",\"zw7g7T8wE5R5CBhXr\",\"a777e8chPvJkY3tKa\",\"65dbBZynphj53nXqA\",\"NbTsT2f98n35Kj3j5\",\"HYm2ijfiWRNKMBzCD\",\"HFuNFZpdKCddzbuqc\",\"ZcqshY58sGEEvgeaq\",\"bX6tpTCjwoi6XMMbK\",\"7gZKfvwaeqsGKXMEN\",\"pLpcDC3EYx2DDQSdt\",\"3pb8q4K4jv6jta45d\",\"fA2DRWfFSHJ2s3Hh4\",\"tAF9Gf6PiGogbZuWs\",\"aEm3Wvj2rFYRL8Lrb\",\"M4vq8ATaS9Jg5X7iP\",\"2tCCFm5iefjrRSaxv\",\"kp2ZbCewZJAbfd7xv\",\"AFfw7cGg83uYk2Miy\",\"u9cRf5kvtpRB5ffB3\",\"CNc6rmwhbxkxEhHAp\",\"BdvdJYwHZr7JpkHsn\",\"g4NCSxxHqHCGMpWwT\",\"qWR7eXxBiNee22A5u\",\"pZickk9HxdkGHFgFP\",\"Yp7uvStL97cC9fKkY\",\"3Gf7ikLijfoxabiPY\",\"mynPw27Hb4jssoDHt\",\"srJ34BaybkQh3qRkM\",\"LCn6qz2GoMr5577Rd\",\"usGwZiRjS5f65roFu\",\"RKKuw76K7sRBMouKq\",\"LJXJRnnhy2NqnnQvq\",\"8SYDBRtkZuW3pdPtG\",\"ZTTJprKDvFqKGew7c\",\"JzmdcQXphuhYhmqgK\",\"5vE273h6pviHpkLJ3\",\"LFSASkxgw9hr3KqmC\",\"sRt2L9qxPZZHG2YbP\",\"bnWyjoWFQjSt77kGy\",\"AwnxFXyfhjqC6PxrJ\",\"orcGkv6ukWGbRcePg\",\"hCfruGWxw7v64teEr\",\"5BQoD6HDn5TZLFpQD\",\"jd9sRTnsyeKpPggba\",\"Akq3fQcPRgPrWfsye\",\"Po3v3dHCk6wYGKMwi\",\"ouabBNowvhzMnMKqa\",\"SjY6a2v6jMjGraDKz\",\"XAGJuJRsgxZNiAN9C\",\"oyB4Wr4EeZnoDaa8B\",\"EgmgkCfnFXaiTbzRq\",\"YMYtNJvfTkuGnNwpX\",\"4p2sARSZNNnKqjAT6\",\"8s5Bdrn7RTga7DL6x\",\"exiy4CeGedb9MkrZW\",\"DqRfa5R7RZpcbKpXJ\",\"s9qcJASB9WKPWaQzi\",\"hzHsgwjark5sZCQ2c\",\"8rw4DdFe9j4ygTYTk\",\"npp5hesJrst6ghKSM\",\"QjGNkRM3Xc78yShJN\",\"TtrXnGzi9MyhLvWiz\",\"sZ2eCa6pF6EN9PMmd\",\"QAZ5DGaWWYhku4BNz\",\"Xk2g4CNFAnYcvxiSr\",\"NGvCPuMiAP3xrRLfB\",\"oDtGiNqDMHmhHE3J8\",\"sN2JyFeJCwfwwHPwF\",\"49XFttjKo2QhEWT3R\",\"wo4cpen33NYFHNca7\",\"Ya3eHgs8x3unZRLpb\",\"RoGGD5cpHb4ftdLDv\",\"jyoLggHk8xQKZuoQC\"],\"total\":97,\"quality\":[5,5,3,5,5,5,5,5,5,5,5,5,4,5,4,5,5,5,4,5,4,5,5,4,5,4]},\"flags\":0},\"summary\":\"A number num, that elevated to the power of another number k \\\"ends\\\" with the same num, it's automorphic.\\n\\n5² = 25\\n// It's automorphic because \\\"25\\\" ends with \\\"5\\\"\\n\\n5³  = 125\\n// It's automorphic because \\\"125\\\" ends with \\\"5\\\"\\n\\n76⁴ = 33362176\\n// It's automorphic because \\\"33362176\\\" ends with \\\"76\\\"\\n\\nA number can have various powers that make it automorphic (i.e. look at\",\"tags\":[\"numbers\",\"logic\",\"conditions\",\"loops\"],\"timestamp\":{\"$date\":1580763883898},\"title\":\"Numerical Morphisms\",\"quality\":4.6923076923076925,\"family\":[{\"_id\":\"TFnrbZNSE6PxjFBcr\",\"language\":\"javascript\"},{\"_id\":\"RqhLJk82ySnmxxJBi\",\"language\":\"python3\"},{\"_id\":\"oubiQ6aJo7Da2t8XH\",\"language\":\"ruby\"}]}}"]