a["{\"msg\":\"result\",\"id\":\"2303\",\"result\":{\"_id\":\"d8BiMfrtcyyzq23MM\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"function isSimilar(arrX, arrY) {\\n\\t// your recursive solution here\\n\\treturn isSimilar(arrX, arrY)\\n}\",\"difficulty\":3.7058823529411766,\"editorId\":\"a777e8chPvJkY3tKa\",\"familyId\":\"esCKHSaLQgXd7GX5g\",\"instructions\":\"Create a function that **recursively checks** if each and every element in the first object is similar to that of the second object's (i.e. type, value, index, key, etc.), returns `true` if it is and `false` otherwise.\\n\\nObjects referred to in this challenge are instances of `Array`, `Map`, or  `Object`. An object's element can be another object within another object and so on. Whilst this challenge can be equivocally easy with `JSON.stringify`, it is humbly by the author's intent that the concept of **recursion** is imposed.\\n\\n### Examples\\n```\\nisSimilar([\\\"cars\\\", \\\"trains\\\", [\\\"roads\\\", [\\\"railways\\\"]]], [\\\"cars\\\", \\\"trains\\\", [\\\"roads\\\", [\\\"railways\\\"]]]) ➞ true\\n\\nisSimilar({\\\"pairs\\\": [[3, 5], [1, 7], [2, 6], [0, 8]]}, {\\\"pairs\\\": [[3, 5], [1, 1], [2, 6], [0, 8]]}) ➞ false\\n\\nisSimilar({\\\"Sam\\\": 4, \\\"Elliot\\\": 4, \\\"equality\\\": true}, {\\\"Sam\\\": 4, \\\"Elliot\\\": 5, \\\"equality\\\": false}) ➞ false\\n\\nisSimilar([{\\\"D\\\": [0, 3]}, {\\\"X\\\": [1, 3]}, {\\\"D\\\": [3, 7]}], [{\\\"D\\\": [0, 3]}, {\\\"X\\\": [1, 3]}, {\\\"D\\\": [3, 7]}]) ➞ true\\n```\\n\\n### Notes\\n- You can read on more topics about recursion (see **Resources** tab) if you aren't familiar with it yet or haven't fully understood the concept behind it before taking up this challenge.\\n- If you think recursion is fun, you can find a collection of those challenges in [here](https://edabit.com/collection/YJH4pAyqDbhLc4STc).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"const noJSON = fn => !RegExp(/JSON|stringify/, 'gm').test(fn)\\nconst recursive = f => (`${f}`.match(RegExp(`${f.name}`,'gm'))||[]).length > +(/function/.test(f))\\nTest.assertNotEquals(noJSON(isSimilar), false, \\\"JSON conversion is not allowed!\\\")\\nTest.assertNotEquals(recursive(isSimilar), false, \\\"Recursion is required!\\\")\\n\\nlet [objVector, resVector] = [[\\n  [[\\\"cars\\\", \\\"trains\\\", [\\\"roads\\\", [\\\"railways\\\"]]], [\\\"cars\\\", \\\"trains\\\", [\\\"roads\\\", [\\\"railways\\\"]]]],\\n  [{\\\"pairs\\\": [[3, 5], [1, 7], [2, 6], [0, 8]]}, {\\\"pairs\\\": [[3, 5], [1, 1], [2, 6], [0, 8]]}],\\n  [{\\\"Sam\\\": 4, \\\"Elliot\\\": 4, \\\"equality\\\": true}, {\\\"Sam\\\": 4, \\\"Elliot\\\": 5, \\\"equality\\\": false}],\\n  [[{\\\"D\\\": [0, 3]}, {\\\"X\\\": [1, 3]}, {\\\"D\\\": [3, 7]}], [{\\\"D\\\": [0, 3]}, {\\\"X\\\": [1, 3]}, {\\\"D\\\": [3, 7]}]],\\n  [{\\\"Sam\\\": 4, \\\"Elliot\\\": 6, \\\"equality\\\": false, \\\"difference\\\": 2}, {\\\"Sam\\\": 4, \\\"Elliot\\\": 6, \\\"equality\\\": false, \\\"difference\\\": 2}],\\n  [[3, [[4, 3, 2, 1], [3, 2, 1], [1]]], [3, [[1, 2, 3, 4], [1, 2, 3], [1]]]],\\n  [[{\\\"D\\\": [1, 4]}, {\\\"E\\\": [2, 6]}, {\\\"E\\\": [3, 6]}, {\\\"P\\\": [4, 6]}], [{\\\"D\\\": [1, 4]}, {\\\"E\\\": [2, 6]}, {\\\"E\\\": [3, 6]}, {\\\"P\\\": [4, 6]}]],\\n  [{\\\"Peter\\\": 6, \\\"Paul\\\": 6, \\\"equality\\\": true}, {\\\"Peter\\\": 6, \\\"Paul\\\": 6, \\\"equality\\\": true}],\\n  [{\\\"r\\\": 255, \\\"g\\\": 255, \\\"b\\\": 255}, {\\\"r\\\": 255, \\\"g\\\": 254, \\\"b\\\": 255}]],\\n  [true, false, false, true, true, false, true, true, false]]\\nfor (let i in objVector) Test.assertEquals(isSimilar(...objVector[i]), resVector[i])\",\"language\":\"javascript\",\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,2,5,3,5,3,4,2,4,3,4,3,0],\"rators\":[\"aEm3Wvj2rFYRL8Lrb\",\"a777e8chPvJkY3tKa\",\"yjtdwc2AC4jA2RWtn\",\"mHT2bJb5SByfJ8yKS\",\"QeWcKqiCBs7ptDxHG\",\"va3fDAQm4sqSMoy3R\",\"vGKxRcDYDsXzTQuEQ\",\"YLTZRjM78Wi9J9Re4\",\"eKSJgCaiy4ReJWXTg\",\"mDWNyaaQ9hvPCRzSd\",\"PH32cNxBjrK4a28sn\",\"QvEXmSEo3ANp3yPyH\"],\"total\":15,\"quality\":[]},\"flags\":0},\"summary\":\"Create a function that recursively checks if each and every element in the first object is similar to that of the second object's (i.e. type, value, index, key, etc.), returns true if it is and false otherwise.\\n\\nObjects referred to in this challenge are instances of Array, Map, or  Object. An object's element can be another object within another object and so\",\"tags\":[\"recursion\",\"objects\",\"arrays\",\"validation\"],\"timestamp\":{\"$date\":1595529805940},\"title\":\"Recursion: Are the Objects Equal?\",\"quality\":0,\"family\":[{\"_id\":\"d8BiMfrtcyyzq23MM\",\"language\":\"javascript\"}]}}"]