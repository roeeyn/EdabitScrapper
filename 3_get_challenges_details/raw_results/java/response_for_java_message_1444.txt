a["{\"msg\":\"result\",\"id\":\"278\",\"result\":{\"_id\":\"SSiwbDE337QvJ9FCZ\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"public class Challenge {\\n\\tpublic static String clearFog(String str) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":1.1375661375661377,\"familyId\":\"nBYvD9YTBZ73tFJx6\",\"instructions\":\"Create a function which returns the word in the string, but with all the `fog` letters removed. However, if the string is clear from fog, return `\\\"It's a clear day!\\\"`.\\n\\n### Examples\\n```\\nclearFog(\\\"sky\\\") ➞ \\\"It's a clear day!\\\"\\n\\nclearFog(\\\"fogfogFFfoooofftogffreogffesGgfOogfog\\\") ➞ \\\"trees\\\"\\n\\nclearFog(\\\"fogFogFogffoObirdsanffodthebffoeffoesGGGfOgFog\\\") ➞ \\\"birdsandthebees\\\"\\n```\\n\\n### Notes\\n- Hidden words won't include the letters `f`, `o` or `g`.\\n- Hidden words are always in lowercase.\",\"isHidden\":false,\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n  @Test\\n  public void test1() {\\n    assertEquals(\\\"trees\\\", Challenge.clearFog(\\\"fogfogfffoooofftreesggfoogfog\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test2() {\\n    assertEquals(\\\"sky\\\", Challenge.clearFog(\\\"foooffFGGGGofoogfosgfogfkygfogfogfoooggg\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test3() {\\n    assertEquals(\\\"birdsandthebees\\\", Challenge.clearFog(\\\"ffogfogoggofobirdsandthebeesfOGgoffog\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test4() {\\n    assertEquals(\\\"plane\\\", Challenge.clearFog(\\\"fogfoofgfogfgplgfogfanefogofgoffgo\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test5() {\\n    assertEquals(\\\"thesaurus\\\", Challenge.clearFog(\\\"fogofogoofgfffogthesgofogooagofogoourfoousfogfogfogfgofg\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test6() {\\n    assertEquals(\\\"sun\\\", Challenge.clearFog(\\\"fogfgofofsunfogfgoogfogofgff\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test7() {\\n    assertEquals(\\\"It's a clear day!\\\", Challenge.clearFog(\\\"city\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test8() {\\n    assertEquals(\\\"It's a clear day!\\\", Challenge.clearFog(\\\"distance\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test9() {\\n    assertEquals(\\\"trees\\\", Challenge.clearFog(\\\"fogfogFFfoooofftogffreogffesGgfOogfog\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test10() {\\n    assertEquals(\\\"birdsandthebees\\\", Challenge.clearFog(\\\"fogFogFogffoObirdsanffodthebFfoeffoesGGGfOgFog\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test11() {\\n    assertEquals(\\\"plane\\\", Challenge.clearFog(\\\"fogfooGooggploffanoffefogoffoffgo\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test12() {\\n\\t\\t// The word \\\"fog\\\" doesn't need to be intact.\\n    assertEquals(\\\"tree\\\", Challenge.clearFog(\\\"tfroege\\\"));\\n  }\\n}\\n\\n// made by @Joshua Señoron\",\"language\":\"java\",\"summary\":\"Create a function which returns the word in the string, but with all the fog letters removed. However, if the string is clear from fog, return \\\"It's a clear day!\\\".\\n\\nExamples\\nclearFog(\\\"sky\\\") ➞ \\\"It's a clear day!\\\"\\n\\nclearFog(\\\"fogfogFFfoooofftogffreogffesGgfOogfog\\\") ➞ \\\"trees\\\"\\n\\nclearFog(\\\"fogFogFogffoObirdsanffodthebffoeffoesGGGfOgFog\\\") ➞ \\\"birdsandthebees\\\"\\n\\nNotes\\nHi\",\"tags\":[\"formatting\",\"strings\",\"regex\"],\"timestamp\":{\"$date\":1580421486108},\"title\":\"Clear the Fog\",\"stats\":{\"completed\":{\"total\":220,\"ratings\":[1,1,1,1,1,1,0,2,2,1,0,3,1,0,1,1,0,0,1,2,1,2,2,2,2,2,1,0,1,1,1,1,2,1,0,2,1,1,1,1,0,0,3,2,0,2,0,0,1,1,0,1,1,0,2,0,2,1,0,2,1,1,1,0,1,1,1,1,3,0,1,1,1,2,1,2,2,1,1,1,0,3,1,1,0,1,2,1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,2,1,2,1,1,0,0,3,1,3,1,1,1,1,2,2,2,2,0,1,1,3,3,2,0,1,0,1,0,0,3,2,2,1,5,2,1,2,2,1,1,1,2,1,1,2,0,2,0,1,1,2,2,1,1,1,1,0,1,0,1,1,2,1,0,1,1,0,1,4,2,1,1,1,1,1,1,1,1,1,1,1],\"rators\":[\"CggGfsERnPKGupFWp\",\"rux435qWn8kcEAvG8\",\"KowhvsYvaqPMAf9Sf\",\"8JyqsSbN2FJXPr3cw\",\"3KjxQu9RZ8ZSywvLz\",\"TgZzzCGWEN8B8P4WR\",\"D3ASM3aWpcQ8gvnin\",\"avXoZmD8SSpqsLST2\",\"Yohr2MmAyaWGMbB35\",\"u4yanfWeeZsN3xWgc\",\"HBgPTjhMkJ2WCcBP7\",\"Md3zwe6ZCp4vqdx5j\",\"7fjsAnXYp3ckDAKfT\",\"FSSM3xcaTXGcxqYGz\",\"q37A9CWmvtTnBmPQu\",\"T7SRh8av5Qoj4Nnzj\",\"5TaPWyRv9DZWWodp8\",\"J9zJq7PMGb6mqzcHW\",\"C9yBWYcZsjmJYww3K\",\"AyrEvM2GLX2jqM772\",\"qx9XHErKygcLiFGhX\",\"a49eNnfRwSMxsDJXf\",\"Fdq6CxMWZL8WZiNaM\",\"5RcAXjQAbqQtWppy6\",\"9gJsF5apWJGWZJprn\",\"ko7oJ85JMftgcbkrr\",\"M5n9zd5LtuuwJr668\",\"PqAepaMciyBb7QQRK\",\"5Kf9z3G9QBs9fkvLs\",\"gBGjCfJvPHswDM5JQ\",\"EZNT8B7yQnnZmuwCf\",\"YLwJkF2wuL3n9o6a2\",\"Es4eX2stRpyoXeC7f\",\"jRqY4i8gPemsZMBGf\",\"NsQ8qYQQ47gSPtQkK\",\"fbYN9Jp46RqBqCd2K\",\"wYYMNPe8nSiJFbvJw\",\"PXBjtEAAwibHxNZXq\",\"7p3Btn9oRNStAZ8G6\",\"vRXuYYBNuHEQ29fbm\",\"2cdvd8yuPLSwvGj9w\",\"mdEQJ2fmGmkbhbvNw\",\"bw6kHP3k8dP2qBa5v\",\"jDTGwryGygbZiqCEg\",\"Kso7rzAKB4TTCPKgM\",\"8J2Dqqz9PaFufQzwY\",\"uYv96ZSpA7tBHoAGX\",\"rTj67TTydxqkpwFtN\",\"YFHkjbM6obMSj24zi\",\"CpvScXEJtLrL9oQc5\",\"82weQfHHmno4Mq4X7\",\"GvsEKiN8yRkosS28k\",\"DzvdGwHEjqsX7wyKr\",\"fZjkX29nhRTWWb75k\",\"rRDZXddeghJTbRSTv\",\"mmGkJJBYiZGYX66kD\",\"cdcYSPc8rGJZrMnfS\",\"c7sE7kceskbYy3KmA\",\"hB5mgzMwQSnhBzi7P\",\"etoSR23iELGGgs9rA\",\"FJzZTZo7CmAyN5ajr\",\"5seiNqw6ZXoF2GRRd\",\"GEzaJZ2cPjENT4ERQ\",\"QGpkEinvqWKqKTERq\",\"jyoLggHk8xQKZuoQC\",\"DzLdw6wEL2Nt5mrsp\",\"P7zedbjaFw8YDzLz7\",\"TrquEHytntLKHA4m2\",\"8SabHk4meXzHQWaLb\",\"dRdMircMhPdSpQu9T\",\"8zZ6xmzpiFair25qr\",\"gJbvbqosimaP4ZAYb\",\"3qggY3TrN3xNaMDBp\",\"Yp7uvStL97cC9fKkY\",\"tqSJxy6E4vaTyECkh\",\"Zhy5X7BZnqk8hacEw\",\"eWaq9hCBYq4oQYgEx\",\"B4pxRqzo43M7S8FbP\",\"WZujpe8yQAyZmpWHg\",\"htXCitorobtqYymjN\",\"3EfDGZ9Sgz5zxzD7a\",\"Dwg87a7awYWRiXFSH\",\"meS77LKqRswhF5LAy\",\"y6kfyYmydcD8tkBk7\",\"Yom3RzkMYpweE8cbS\",\"DkSMZ3jZLkwviKb9g\",\"SmmkwyvSHT54PzB5B\",\"45FXSeKSLChn3gEhc\",\"Bj9Qvjt7MX2mGSuN7\",\"AeJSxRqw2dJZuGvdk\",\"rvojHhKH3DaxotefQ\",\"irDgkguQ8h8SPTx8o\",\"wsjr8C33NPyGYAqKu\",\"yLPK3JbpNb4PrRdfa\",\"cR3ibTMxLyEdDFCHY\",\"62Q2HcfLE6SGphZkT\",\"mFoXzCuhBXSBCeiRK\",\"ZQEo2nzPtJHGx2cM7\",\"osXNzc2aCxspRwheS\",\"9pCPyhvQmbkWyD2LL\",\"SFGosgfANS7JGZM5y\",\"XDin5M5GsQ8afoSnR\",\"5gAhkR6af8SbnDopR\",\"kuxkd9Rj2ejfusa7G\",\"q2X5hMejrpAGGd3hW\",\"TBamPvEAh6xARn8Kd\",\"A4PkKCWXffBTbMJdP\",\"xvuMXeFzF7Z2JfKyg\",\"k63LjKkX5p7SYng7C\",\"z5CKFRAYkNbEZomHG\",\"KxLMWekCxzy2Eem7u\",\"smuLDcXt5RcXQQMKZ\",\"q2tzvkrLASvSjkek9\",\"Ctuq7Wc8QPQmzwPK3\",\"SE5G2Caf3btnuGmz6\",\"CyS2WcntNiNx7K9AQ\",\"M72HjdFKgTaQNcGas\",\"jLv4ckjWQwHRAiYKT\",\"YLqdr7bYjwew2KM4N\",\"3unLGuwC6Tnoy8BtK\",\"g4NCSxxHqHCGMpWwT\",\"muXMnzQwGLzN6j2Jr\",\"nbH6pjzJS9Z35JD9r\",\"9KAbm9niQ9Cv9LefP\",\"ZMd8it647JSYTvx8Z\",\"RhPg33AdzvSZmibXa\",\"f6uGKbmMdBYCjrMBh\",\"YcjwCvYut6834Jzd8\",\"ZXWDtCrM9ev3439oi\",\"cGebawowzCKcFn8gq\",\"Fd9765rksgPK4E2Zy\",\"TCTZucJN3tJh5t7MB\",\"7Wq4ZNz5c3irDR6br\",\"vEN56nHw7hTxbyHhp\",\"Tf7TJFSPktJBgLA4k\",\"TTgP9jcqGxCfKotZ3\",\"ZiN6yB9rACMaYgseC\",\"fRYcPHuyEdqngMzC4\",\"oMZovHkR6QqNvQwyc\",\"kQRtmSZfHdSzFserc\",\"gpd8yji9GXJruAtje\",\"pi76g3eRpnKrhee2a\",\"jb9RLyyuo565bKDzN\",\"gXTAie79kiw28tx5u\",\"J7epB3qSQJ2E8vWkY\",\"ttmhui2Euek65eYhe\",\"a777e8chPvJkY3tKa\",\"WHSB76uqJrCf2XKsw\",\"9amCEoE43AdSneJZ7\",\"JszPst3958te56jFk\",\"oMfq73A434YWhSuWQ\",\"mG8HqKiAQFTdRZthG\",\"P5BhjZxyeHQYTNyB9\",\"jXTnL3JatkKjoifyb\",\"8Xx8nWXRydHDBGfQf\",\"xv5obFhsxY93mqR5S\",\"Ym8AjbKGSJooun3nt\",\"tyLS9T6YMfg9fMtYJ\",\"cJmmvnmJSXvBXtydi\",\"uNK8tLSseShR8wcA4\",\"W56bWmpQeLJ9JEDsa\",\"5jDgvkGd4JwatrYXg\",\"Wi4H6ayKsNDWWQCG5\",\"uFfEio8nzDvL8emhp\",\"PJu3WcTpfRrvHfQiS\",\"W6CmXurPBcAom7HKL\",\"Q7fQT4XeoY23TpkW7\",\"3SgSNoAB3sxaYeT3w\",\"GkYtSbQuheBF4Enys\",\"QRv96jmNaYsWkxQEG\",\"hhxjQREtmHSheH9Pj\",\"zZfMwLuoERGmybgib\",\"buX4mCQhtXCfBjeno\",\"qjWxNQjs3cfbcmbh7\",\"4ySzqKC5s3ZRpG9di\",\"btabi3PdyisuY5tn9\",\"HXbTKW3jmmyRAsKrr\",\"sxci7DYKNa6q22Sjq\",\"rhS8qXRjZcpDXkwnE\",\"xEX3TDY6C2h82dJTn\",\"pYonfGP4u9HNL9Z32\",\"NiyZLgSs7iXFQzFzw\",\"c7uBxu2rgY77H5d79\",\"zTtKiCbLWzaf2Yjo4\",\"uw47663LqPME8btaA\",\"srJ34BaybkQh3qRkM\",\"Qv2jEtTnFCXX7cdd3\",\"cwwW2amYGZMkYwAxM\",\"jCjCvyhqhpebkJn34\",\"AaAzAySpyo99siXzm\",\"KMR6vNzvSKMA2cXnK\",\"GDNsAq2snvJuwFa88\",\"unqzSsxpxj9sZ7rbD\",\"FxPDKKibxnZjGJLs6\",\"nSLvkGEpiYCtcBLaa\",\"ckQwFFWyLXmDQAaCn\",\"8Rau64SCERgjtFbFM\",\"H3XLNCWB5yXt5YYXn\",\"nFbmNzMQ38TncmfQX\",\"3Gf7ikLijfoxabiPY\"],\"quality\":[5,5,4,5,4,5,4,5,4,5,3,4,2,5,5,3]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":4.25,\"family\":[{\"_id\":\"3Dp3Ygok2zT9ynZA4\",\"language\":\"cpp\"},{\"_id\":\"SSiwbDE337QvJ9FCZ\",\"language\":\"java\"},{\"_id\":\"cHNEFGeQrH3nonwJw\",\"language\":\"javascript\"},{\"_id\":\"2bEWYcqKxTe84x3AB\",\"language\":\"python3\"},{\"_id\":\"95NBNccKhxFfqqRbK\",\"language\":\"ruby\"}]}}"]