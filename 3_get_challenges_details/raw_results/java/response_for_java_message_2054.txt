a["{\"msg\":\"result\",\"id\":\"586\",\"result\":{\"_id\":\"WmGeYLJbud69ezCew\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class PrisonersDilemma {\\n  public static int[] getCoinBalances(String[] r, String[] b) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":2.176470588235294,\"familyId\":\"Wko2QX35PzCZasRnB\",\"instructions\":\"Let's say that there exists a machine that gives out free coins, but with a twist!\\n\\nSeparating two people is a wall, and this machine is placed in such a way that both people are able to access it. Spending a coin in this machine will give the person on the other side **3 coins** and vice versa.\\n\\nIf both people continually spend coins for each other (SHARING), then they'll both gain a net profit of **2 coins per turn.** However, there is always the possibility for someone to act selfishly (STEALING): they spend no coins, yet they still receive the generous **3 coin** gift from the other person!\\n\\n*Here's an example of Red taking advantage of Green!*\\n![Red chose to betray](https://edabit-challenges.s3.amazonaws.com/JNBHVgvHBnjhbhvvHB.png)\\n\\n### The Challenge\\nAssuming that both people **start with 3 coins each**, create a function that calculates both people's final number of coins. You will be given two arrays of strings, with each string being the words `\\\"share\\\"` or `\\\"steal\\\"`.\\n\\n### Examples\\n```\\ngetCoinBalances([\\\"share\\\"], [\\\"share\\\"]) ➞ [5, 5]\\n// Both people spend one coin, and receive 3 coins each.\\n\\ngetCoinBalances([\\\"steal\\\"], [\\\"share\\\"]) ➞ [6, 2]\\n// Person 1 gains 3 coins, while person 2 loses a coin.\\n\\ngetCoinBalances([\\\"steal\\\"], [\\\"steal\\\"]) ➞ [3, 3]\\n// Neither person spends any coins and so no one gets rewarded.\\n\\ngetCoinBalances([\\\"share\\\", \\\"share\\\", \\\"share\\\"], [\\\"steal\\\", \\\"share\\\", \\\"steal\\\"]) ➞ [3, 11]\\n```\\n\\n### Notes\\n- No tests will include a negative number of coins.\\n- All words will be given in lowercase.\\n- This challenge is adapted from a famous game theory example called the **Prisoner's Dilemma**, which you can learn more about in the **Resources** tab.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"import static org.junit.Assert.assertArrayEquals; \\nimport org.junit.Test; \\n\\npublic class PrisonersDilemmaTest {\\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertArrayEquals(new int[] {5, 5}, PrisonersDilemma.getCoinBalances(new String[] {\\\"share\\\"}, new String[] {\\\"share\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertArrayEquals(new int[] {6, 2}, PrisonersDilemma.getCoinBalances(new String[] {\\\"steal\\\"}, new String[] {\\\"share\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertArrayEquals(new int[] {2, 6}, PrisonersDilemma.getCoinBalances(new String[] {\\\"share\\\"}, new String[] {\\\"steal\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertArrayEquals(new int[] {3, 3}, PrisonersDilemma.getCoinBalances(new String[] {\\\"steal\\\"}, new String[] {\\\"steal\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertArrayEquals(new int[] {3, 11}, PrisonersDilemma.getCoinBalances(new String[] {\\\"share\\\", \\\"share\\\", \\\"share\\\"}, new String[] {\\\"steal\\\", \\\"share\\\", \\\"steal\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertArrayEquals(new int[] {0, 12}, PrisonersDilemma.getCoinBalances(new String[] {\\\"share\\\", \\\"share\\\", \\\"steal\\\", \\\"share\\\"}, new String[] {\\\"steal\\\", \\\"steal\\\", \\\"steal\\\", \\\"steal\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertArrayEquals(new int[] {12, 0}, PrisonersDilemma.getCoinBalances(new String[] {\\\"steal\\\", \\\"steal\\\", \\\"steal\\\"}, new String[] {\\\"share\\\", \\\"share\\\", \\\"share\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertArrayEquals(new int[] {7, 7}, PrisonersDilemma.getCoinBalances(new String[] {\\\"share\\\", \\\"share\\\"}, new String[] {\\\"share\\\", \\\"share\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test09() { \\n\\t\\tassertArrayEquals(new int[] {11, 3}, PrisonersDilemma.getCoinBalances(new String[] {\\\"share\\\", \\\"steal\\\", \\\"steal\\\", \\\"steal\\\"}, new String[] {\\\"share\\\", \\\"share\\\", \\\"steal\\\", \\\"share\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() { \\n\\t\\tassertArrayEquals(new int[] {3, 11}, PrisonersDilemma.getCoinBalances(new String[] {\\\"share\\\", \\\"share\\\", \\\"steal\\\", \\\"share\\\"}, new String[] {\\\"steal\\\", \\\"share\\\", \\\"steal\\\", \\\"steal\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test11() { \\n\\t\\tassertArrayEquals(new int[] {3, 3}, PrisonersDilemma.getCoinBalances(new String[] {\\\"steal\\\", \\\"steal\\\", \\\"steal\\\", \\\"steal\\\"}, new String[] {\\\"steal\\\", \\\"steal\\\", \\\"steal\\\", \\\"steal\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test12() { \\n\\t\\tassertArrayEquals(new int[] {8, 4}, PrisonersDilemma.getCoinBalances(new String[] {\\\"steal\\\", \\\"share\\\", \\\"steal\\\", \\\"steal\\\"}, new String[] {\\\"share\\\", \\\"share\\\", \\\"steal\\\", \\\"steal\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test13() { \\n\\t\\tassertArrayEquals(new int[] {9, 1}, PrisonersDilemma.getCoinBalances(new String[] {\\\"steal\\\", \\\"steal\\\"}, new String[] {\\\"share\\\", \\\"share\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test14() { \\n\\t\\tassertArrayEquals(new int[] {5, 5}, PrisonersDilemma.getCoinBalances(new String[] {\\\"steal\\\", \\\"share\\\"}, new String[] {\\\"share\\\", \\\"steal\\\"}));\\n\\t}\\n}\\n// credit goes to the original author/publisher @Joshua Señoron\",\"language\":\"java\",\"quality\":0,\"summary\":\"Let's say that there exists a machine that gives out free coins, but with a twist!\\n\\nSeparating two people is a wall, and this machine is placed in such a way that both people are able to access it. Spending a coin in this machine will give the person on the other side 3 coins and vice versa.\\n\\nIf both people continually spend coins for each other (SHARING), the\",\"tags\":[\"loops\",\"algorithms\",\"interview\",\"language_fundamentals\"],\"timestamp\":{\"$date\":1612936925144},\"title\":\"Coin Co-Operation\",\"stats\":{\"completed\":{\"total\":29,\"ratings\":[2,2,2,2,2,3,2,2,3,3,2,3,3,3,3,4,2,3,1,1,1,2,3,2,3,3,2,1,1,3,1,0,2,2],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"gJbvbqosimaP4ZAYb\",\"HRpiKYAupsreNJDNS\",\"E2nAwyubcNWBcPZJP\",\"Es4eX2stRpyoXeC7f\",\"3fFNDjDWHMfcvwidT\",\"saf3nERNrf7iQJi95\",\"7GopuocjhyRgqSpEJ\",\"SSP94pK7RmENiEKFu\",\"XTuxCoKrN9DZ7zaQx\",\"gHLfSu6KuoBneHaZ6\",\"p6fkM3tu4g4mLe9PT\",\"FPibm3cAPpyrvinTY\",\"LNCb5rksJLJ43L4Nw\",\"EsK4tLGQEssGQ5bJw\",\"QoaqyY7Jrscd4stfS\",\"jyoLggHk8xQKZuoQC\",\"buX4mCQhtXCfBjeno\",\"EBTHjFAoBhJxb9FcP\",\"mHzkiDxhaTHD5PjTu\",\"qaPjAANdnxFnWfj5d\",\"gXTAie79kiw28tx5u\",\"rhS8qXRjZcpDXkwnE\",\"2NJZbusRvu3eJ4tHu\",\"KMR6vNzvSKMA2cXnK\",\"sxci7DYKNa6q22Sjq\",\"GSgr8hLGHeZPde7WJ\",\"nFbmNzMQ38TncmfQX\",\"uw47663LqPME8btaA\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"9M4efRd2ZTW9RGFpj\",\"language\":\"cpp\"},{\"_id\":\"WmGeYLJbud69ezCew\",\"language\":\"java\"},{\"_id\":\"PuGi7j9rm5nHBX8Ec\",\"language\":\"javascript\"},{\"_id\":\"F7DBaK85jKLDMiugA\",\"language\":\"php\"},{\"_id\":\"8NyNftbNXd6CZCDXf\",\"language\":\"python3\"},{\"_id\":\"QqFBTz4i7YxWjszXx\",\"language\":\"ruby\"}]}}"]