a["{\"msg\":\"result\",\"id\":\"653\",\"result\":{\"_id\":\"FRMkLfEBFM7bykHEt\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class BooleanWord {\\n\\tpublic static Boolean[] toBoolArray(String bits) {\\n\\t\\t\\n\\t}\\n\\n\\tpublic static String toBitString(String word) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":2.357142857142857,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"XovtyQdMvhWXfNYeY\",\"instructions\":\"Create two functions that convert a word to a bitstring and then to a boolean array based on the following criteria:\\n\\n1. Locate the position of the letter in the English alphabet (from 1 to 26).\\n2. Odd positions will be represented as `1` and even positions will be represented as `0`.\\n3. Convert the represented positions to boolean values, `1` for `true` and `0` for `false`.\\n4. Store the conversions into an array.\\n\\n### Examples\\n```\\ntoBoolArray(toBitString(\\\"deep\\\")) ➞ [false, true, true, false]\\n// deep converts to 0110\\n// d is the 4th alphabet - 0\\n// e is the 5th alphabet - 1\\n// e is the 5th alphabet - 1\\n// p is the 16th alphabet - 0\\n\\ntoBoolArray(toBitString(\\\"loves\\\")) ➞ [false, true, false, true, true]\\n\\ntoBoolArray(toBitString(\\\"tesh\\\")) ➞ [false, true, true, false]\\n```\\n\\n### Notes\\n- The letter `A` is at position `1` and `Z` at `26`.\\n- All input strings are in lowercase letters of the English alphabet.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"import static org.junit.Assert.assertArrayEquals; \\nimport org.junit.Test; \\n\\npublic class BooleanWordTest {\\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertArrayEquals(new Boolean[] {true, false, true, false, true, true, false, true}, BooleanWord.toBoolArray(BooleanWord.toBitString(\\\"charming\\\")));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertArrayEquals(new Boolean[] {true, false, true, true, true, true, true, false, true}, BooleanWord.toBoolArray(BooleanWord.toBitString(\\\"exquisite\\\")));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertArrayEquals(new Boolean[] {true, false, true, true, false, true}, BooleanWord.toBoolArray(BooleanWord.toBitString(\\\"admire\\\")));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertArrayEquals(new Boolean[] {false, true, true, false}, BooleanWord.toBoolArray(BooleanWord.toBitString(\\\"deep\\\")));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertArrayEquals(new Boolean[] {false, true, false, true, true}, BooleanWord.toBoolArray(BooleanWord.toBitString(\\\"loves\\\")));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertArrayEquals(new Boolean[] {false, true, true, false}, BooleanWord.toBoolArray(BooleanWord.toBitString(\\\"tesh\\\")));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertArrayEquals(new Boolean[] {false, true, false, true, true, false}, BooleanWord.toBoolArray(BooleanWord.toBitString(\\\"xavier\\\")));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertArrayEquals(new Boolean[] {true, false, true, false, true, true}, BooleanWord.toBoolArray(BooleanWord.toBitString(\\\"adores\\\")));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test09() { \\n\\t\\tassertArrayEquals(new Boolean[] {false, true, true, false, true}, BooleanWord.toBoolArray(BooleanWord.toBitString(\\\"tesha\\\")));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() { \\n\\t\\tassertArrayEquals(new Boolean[] {true, true, true, true, true, false, true}, BooleanWord.toBoolArray(BooleanWord.toBitString(\\\"esquire\\\")));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test11() { \\n\\t\\tassertArrayEquals(new Boolean[] {false, true, false, false, true, true, true, false, true}, BooleanWord.toBoolArray(BooleanWord.toBitString(\\\"randomize\\\")));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test12() { \\n\\t\\tassertArrayEquals(new Boolean[] {true, false, true, false, true, true}, BooleanWord.toBoolArray(BooleanWord.toBitString(\\\"exotic\\\")));\\n\\t}\\n}\",\"language\":\"java\",\"quality\":0,\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,3,3,0,2,2,2,4,3,0,3,4,0,2,2,3,0,3,3,2,2,3,2,3],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"Es4eX2stRpyoXeC7f\",\"X65Jxn5K3D7NwNZzN\",\"gXTAie79kiw28tx5u\",\"xZbb2aXroPDHqLN9D\",\"ey5557C4wS8kpYoTe\",\"SEX5AGLMFRSainDmC\",\"kbguXka4r4FcW2ttn\",\"gJbvbqosimaP4ZAYb\",\"iY7Hu2p3miMKsCbrn\",\"qb2DTmzQj4vNfq5K7\",\"YNR2PAWqhpSMexy47\",\"xaZ2833xQCFygugYz\",\"fCTfZSgeDbRbTvDY4\",\"jyoLggHk8xQKZuoQC\",\"LNCb5rksJLJ43L4Nw\",\"qaPjAANdnxFnWfj5d\",\"rhS8qXRjZcpDXkwnE\",\"wFRLGjA56kj7xyhmv\",\"2NJZbusRvu3eJ4tHu\",\"KMR6vNzvSKMA2cXnK\",\"sxci7DYKNa6q22Sjq\",\"htXCitorobtqYymjN\"],\"total\":23},\"flags\":0},\"summary\":\"Create two functions that convert a word to a bitstring and then to a boolean array based on the following criteria:\\n\\nLocate the position of the letter in the English alphabet (from 1 to 26).\\nOdd positions will be represented as 1 and even positions will be represented as 0.\\nConvert the represented positions to boolean values, 1 for true and 0 for false.\\nStore\",\"tags\":[\"strings\",\"objects\",\"arrays\"],\"timestamp\":{\"$date\":1609766412668},\"title\":\"Word to Bitstring to Boolean Array\",\"family\":[{\"_id\":\"FRMkLfEBFM7bykHEt\",\"language\":\"java\"},{\"_id\":\"9JcSwa4dN5PEmdBEg\",\"language\":\"javascript\"},{\"_id\":\"temD7SmTyhdmME75i\",\"language\":\"python3\"},{\"_id\":\"QuNCvjM2w6scS8fXR\",\"language\":\"ruby\"}]}}"]