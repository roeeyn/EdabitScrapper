a["{\"msg\":\"result\",\"id\":\"142\",\"result\":{\"_id\":\"RwrKgxmoMbm5NDFxW\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class BinaryChecksum {\\n\\tpublic static String addParityBit(String bits) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":0.6,\"familyId\":\"Zm7Fn2KBofz74oeTv\",\"instructions\":\"Parity bits are used as a very simple checksum to ensure that binary data isn't corrupted during transit. Here's how they work:\\n\\n* If a binary string has an **odd** number of **1**'s, the parity bit is a **1**.\\n* If a binary string has an **even** number of **1**'s, the parity bit is a **0**.\\n* The parity bit is appended to the **end** of the binary string.\\n\\nCreate a function that adds the correct parity bit to a binary string.\\n\\n### Examples\\n```\\naddParityBit(\\\"1011011\\\") ➞ \\\"10110111\\\"\\n\\n// There are five 1's.\\n// Since five is odd, the parity bit should be a 1.\\n// Add the parity bit to the end of the string.\\n// Return the result.\\n\\naddParityBit(\\\"0110000\\\") ➞ \\\"01100000\\\"\\n\\naddParityBit(\\\"0101101\\\") ➞ \\\"01011010\\\"\\n\\naddParityBit(\\\"1111111\\\") ➞ \\\"11111111\\\"\\n```\\n\\n### Notes\\nAll inputs will be 7-bits long (so that the parity bit makes it a full byte).\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"/** \\n======================================= \\nTestGen 4.0 for JUnit 4.13.0 \\t\\t\\nTest Case: BinaryChecksum::addParityBit \\nTimestamp: 01/06/2021 10:02:48 PM \\n--------------------------------------- \\n® DARKKO 2021 © \\n======================================= \\n\\n**/ \\n\\nimport static org.junit.Assert.assertEquals; \\nimport org.junit.Test; \\n\\npublic class BinaryChecksumTest { \\n\\t\\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertEquals(\\\"01011010\\\", BinaryChecksum.addParityBit(\\\"0101101\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertEquals(\\\"01100000\\\", BinaryChecksum.addParityBit(\\\"0110000\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertEquals(\\\"00101101\\\", BinaryChecksum.addParityBit(\\\"0010110\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertEquals(\\\"11000000\\\", BinaryChecksum.addParityBit(\\\"1100000\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertEquals(\\\"11111111\\\", BinaryChecksum.addParityBit(\\\"1111111\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertEquals(\\\"11110110\\\", BinaryChecksum.addParityBit(\\\"1111011\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertEquals(\\\"10101100\\\", BinaryChecksum.addParityBit(\\\"1010110\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertEquals(\\\"11001100\\\", BinaryChecksum.addParityBit(\\\"1100110\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test09() { \\n\\t\\tassertEquals(\\\"10101100\\\", BinaryChecksum.addParityBit(\\\"1010110\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() { \\n\\t\\tassertEquals(\\\"10110111\\\", BinaryChecksum.addParityBit(\\\"1011011\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test11() { \\n\\t\\tassertEquals(\\\"00101101\\\", BinaryChecksum.addParityBit(\\\"0010110\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test12() { \\n\\t\\tassertEquals(\\\"11001010\\\", BinaryChecksum.addParityBit(\\\"1100101\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test13() { \\n\\t\\tassertEquals(\\\"10000001\\\", BinaryChecksum.addParityBit(\\\"1000000\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test14() { \\n\\t\\tassertEquals(\\\"10101111\\\", BinaryChecksum.addParityBit(\\\"1010111\\\"));\\n\\t}\\n\\n}\\n// end of tests\\n// credit goes to the original author/publisher @Joshua Señoron\",\"language\":\"java\",\"quality\":4.7727272727272725,\"summary\":\"Parity bits are used as a very simple checksum to ensure that binary data isn't corrupted during transit. Here's how they work:\\n\\nIf a binary string has an odd number of 1's, the parity bit is a 1.\\nIf a binary string has an even number of 1's, the parity bit is a 0.\\nThe parity bit is appended to the end of the binary string.\\n\\nCreate a function that adds the cor\",\"tags\":[\"strings\",\"numbers\",\"logic\"],\"timestamp\":{\"$date\":1609942544201},\"title\":\"Adding Parity Bits\",\"stats\":{\"completed\":{\"total\":113,\"ratings\":[1,1,1,1,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,1,0,0,0,0,1,1,0,1,1,0,1,1,2,0,0,0,2,1,0,1,1,0,0,0,1,1,1,1,1,0,1,1,1,0,0,1,0,0,0,2,1,2,0,2,1,0,0,0,0,1,1,0,0,1,2,1,1,0,1,1,0,1],\"quality\":[5,5,5,5,5,5,5,4,5,5,5,4,3,5,5,4,5,5,5,5,5,5],\"rators\":[\"a777e8chPvJkY3tKa\",\"Es4eX2stRpyoXeC7f\",\"fqsudcN8tyJdjBx3f\",\"PJu3WcTpfRrvHfQiS\",\"oMZovHkR6QqNvQwyc\",\"hhxjQREtmHSheH9Pj\",\"J7epB3qSQJ2E8vWkY\",\"8WeJLyNE4h6nJ2dNh\",\"Wi4H6ayKsNDWWQCG5\",\"a49eNnfRwSMxsDJXf\",\"AeJSxRqw2dJZuGvdk\",\"btabi3PdyisuY5tn9\",\"LCuvvWMwiGuqTwNRi\",\"EcBw39vkywQsT3Y2Z\",\"gBGjCfJvPHswDM5JQ\",\"pi76g3eRpnKrhee2a\",\"uFfEio8nzDvL8emhp\",\"fD2vkjhwWmxbs3aAn\",\"3SgSNoAB3sxaYeT3w\",\"nvzRzs5w4qs79Xj2a\",\"QRv96jmNaYsWkxQEG\",\"HCfkcKnPs9mrJojdG\",\"8BFSTCnoe2QggN64c\",\"NXtM3si2K3i4DySMn\",\"DovtrH78NMjjpDNGg\",\"umE8dRTGWzrZFp755\",\"b6PEkvr66YeCamroN\",\"TWhtuegb8G7ka3Tvg\",\"82weQfHHmno4Mq4X7\",\"8QYNFnSwFGmRRacAT\",\"YcCLwitFMAEJSnxAW\",\"NioGGZL9KCn5Ln96t\",\"x9CWxL7Q7yCHdrAmq\",\"GkYtSbQuheBF4Enys\",\"eQXwk5zGckM8tCWYH\",\"z6KN9CFWcS7qjAxwv\",\"DeW4P8v2TPmQXKFHL\",\"dqMnG8xEhhtCPoGEj\",\"dD3Aja8PZSMXMFSDY\",\"vRXuYYBNuHEQ29fbm\",\"afpKTbmxdp5qCwPbM\",\"yP8W3BqRnnwuZjiFJ\",\"XNgW94PSq5kkXhojm\",\"D8bzPRyRRdk6GpczD\",\"c96gH88NsjR3MycAj\",\"Yohr2MmAyaWGMbB35\",\"ScYoZtxALtkZXKLo4\",\"KypQdzThzogKXwkXE\",\"8qNSPHZBpmjSTt3tH\",\"4ySzqKC5s3ZRpG9di\",\"CtcMetTXaFgX6Evvf\",\"6rvJwN4mcX7iYGjY7\",\"nXw9eTHFraWQtwJtY\",\"q5yf3H6i6A4s75pRq\",\"FEGpESiobxcqjMqF3\",\"jyoLggHk8xQKZuoQC\",\"xEX3TDY6C2h82dJTn\",\"qat6GsLjQbgGc96JD\",\"buX4mCQhtXCfBjeno\",\"AQSqD9oNv2uPfxZCR\",\"5LDvZHCDJqePeBrCg\",\"ztrfkKRfYBWokFwkf\",\"dQd664XYR6QKHFvHW\",\"sYKPxZX5xJZ2GTp6Q\",\"khdCaD6AGBiR6txLQ\",\"KdYQN3KAT2DyTzT2a\",\"2ptN2mhjFwFcHyPZd\",\"2ujydfqkBeL9uL4Ld\",\"sxci7DYKNa6q22Sjq\",\"TCvpT4EPb8qNssNB7\",\"rhS8qXRjZcpDXkwnE\",\"3qgJpdhyi4tKuqMdm\",\"9RJpt5ec2KMLuac4w\",\"H469XosMjfNu8Fop7\",\"nSLvkGEpiYCtcBLaa\",\"uw47663LqPME8btaA\",\"gZj6HTKJdPGJwPe2D\",\"SxX3uQudokHPP7Xbo\",\"srJ34BaybkQh3qRkM\",\"Gn8rShvWCKLX3cxzx\",\"fdyejapW3NWN7utPX\",\"afvP29FhRou2bTaav\",\"cR3ibTMxLyEdDFCHY\",\"BcLXzKWQpnj5NoXYd\",\"PCsT29KNEX8ufEawi\",\"yGDSvLJXXz5ZmaS4h\",\"htXCitorobtqYymjN\",\"DEDniTrstQYGounXT\",\"6KDZNmtgvb6PCaWQE\",\"KMR6vNzvSKMA2cXnK\",\"RsujLHaML6L3KinzK\",\"ckQwFFWyLXmDQAaCn\",\"GD9Jqmu93vB4LTT8F\",\"unqzSsxpxj9sZ7rbD\",\"xLy94bAjaLwokPcZZ\",\"6kB5qypxcm62PHsEJ\",\"rWhXHhzF4W8bea6LP\",\"9du58gNDkWQEWivbB\",\"F8dA24AosSC8XXb7D\",\"eXQziXGcpwekMyABQ\",\"5QN8R22z43SrwoHDz\",\"x2Cz7S8rCKJqCE3Xe\",\"r72oFMcCQh4rBsKHb\",\"nFbmNzMQ38TncmfQX\",\"4To7THbHADdtXbewx\",\"3Gf7ikLijfoxabiPY\",\"5kMuNZuxiFcNRDkG4\"]},\"flags\":0},\"editorId\":\"a777e8chPvJkY3tKa\",\"family\":[{\"_id\":\"aQCbY6EdGQ9uA5som\",\"language\":\"cpp\"},{\"_id\":\"RwrKgxmoMbm5NDFxW\",\"language\":\"java\"},{\"_id\":\"iBFqQCtMsQBgefBNu\",\"language\":\"javascript\"},{\"_id\":\"xqMAJYZua5dYe7dRe\",\"language\":\"php\"},{\"_id\":\"nJwANk5YKK4SbbTHd\",\"language\":\"python3\"},{\"_id\":\"v8ANbHNKDW5j76Cjv\",\"language\":\"ruby\"}]}}"]