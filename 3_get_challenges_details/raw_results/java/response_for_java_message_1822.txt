a["{\"msg\":\"result\",\"id\":\"468\",\"result\":{\"_id\":\"M9eXE68jj9pxvmiuj\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"public class Challenge {\\n  public static boolean isKaprekar(int n) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":1.670731707317073,\"familyId\":\"mbmHKgkt8A4z3owfQ\",\"instructions\":\"A Kaprekar Number is a positive integer that is equal to a number formed by first squaring, then splitting and summing its two lexicographical parts:\\n\\n- If the quantity of digits of the squared number is even, the left and right parts will have the same length.\\n- If the quantity of digits of the squared number is odd, then the right part will be the longer half, with the left part being the shorter or equal to zero if the quantity of digits is equal to 1.\\n\\nGiven a positive integer `n` implement a function that returns `true` if it's a Kaprekar number, and `false` if it's not.\\n\\n### Examples\\n```\\nisKaprekar(3) ➞ false\\n// n² = \\\"9\\\"\\n// Left + Right = 0 + 9 = 9 ➞ 9 != 3\\n\\nisKaprekar(5) ➞ false\\n// n² = \\\"25\\\"\\n// Left + Right = 2 + 5 = 7 ➞ 7 != 5\\n\\nisKaprekar(297) ➞ true\\n// n² = \\\"88209\\\"\\n// Left + Right = 88 + 209 = 297 ➞ 297 == 297\\n```\\n\\n### Notes\\nTrivially, 0 and 1 are Kaprekar Numbers being the only two numbers equal to their square. Any number formed only by digits equal to _9_ will always be a Kaprekar Number.\",\"isHidden\":false,\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n  @Test\\n  public void test1() {\\n    assertEquals(true, Challenge.isKaprekar(1));\\n  }\\n\\t\\n\\t@Test\\n  public void test2() {\\n    assertEquals(false, Challenge.isKaprekar(2));\\n  }\\n\\t\\n\\t@Test\\n  public void test3() {\\n    assertEquals(false, Challenge.isKaprekar(3));\\n  }\\n\\t\\n\\t@Test\\n  public void test4() {\\n    assertEquals(false, Challenge.isKaprekar(5));\\n  }\\n\\t\\n\\t@Test\\n  public void test5() {\\n    assertEquals(true, Challenge.isKaprekar(9));\\n  }\\n\\t\\n\\t@Test\\n  public void test6() {\\n    assertEquals(false, Challenge.isKaprekar(65));\\n  }\\n\\t\\n\\t@Test\\n  public void test7() {\\n    assertEquals(true, Challenge.isKaprekar(99));\\n  }\\n\\t\\n\\t@Test\\n  public void test8() {\\n    assertEquals(true, Challenge.isKaprekar(297));\\n  }\\n\\t\\n\\t@Test\\n  public void test9() {\\n    assertEquals(false, Challenge.isKaprekar(348));\\n  }\\n\\t\\n\\t@Test\\n  public void test10() {\\n    assertEquals(false, Challenge.isKaprekar(666));\\n  }\\n\\t\\n\\t@Test\\n  public void test11() {\\n    assertEquals(false, Challenge.isKaprekar(1441));\\n  }\\n\\t\\n\\t@Test\\n  public void test12() {\\n    assertEquals(true, Challenge.isKaprekar(77778));\\n  }\\n\\t\\n\\t@Test\\n  public void test13() {\\n    assertEquals(false, Challenge.isKaprekar(102102));\\n  }\\n\\t\\n\\t@Test\\n  public void test14() {\\n    assertEquals(true, Challenge.isKaprekar(533170));\\n  }\\n}\",\"language\":\"java\",\"summary\":\"A Kaprekar Number is a positive integer that is equal to a number formed by first squaring, then splitting and summing its two lexicographical parts:\\n\\nIf the quantity of digits of the squared number is even, the left and right parts will have the same length.\\nIf the quantity of digits of the squared number is odd, then the right part will be the longer half, w\",\"tags\":[\"numbers\",\"strings\"],\"timestamp\":{\"$date\":1572762403761},\"title\":\"Kaprekar Numbers\",\"stats\":{\"completed\":{\"total\":94,\"ratings\":[1,1,1,1,1,1,1,1,1,0,2,1,2,1,2,0,3,2,2,2,2,2,1,3,0,2,0,2,1,3,2,2,1,1,1,2,2,1,2,3,3,2,2,2,0,2,1,2,2,2,1,2,0,0,3,1,3,3,2,2,2,1,2,3,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2],\"rators\":[\"sxci7DYKNa6q22Sjq\",\"zZiEZEFrZyayHsrTk\",\"9c8n7ti5vCjTRgiGN\",\"Yohr2MmAyaWGMbB35\",\"3gxJoNp59B4eoyyed\",\"ZBDiEMi7dbjRL55LB\",\"t2kdBPj9qQAXY2Ehd\",\"qJZsi5rhRnWA38FbA\",\"cG4PEDMMx8jXhWP8T\",\"sb7Nh56pPFtPxLogT\",\"a49eNnfRwSMxsDJXf\",\"Gq9x9GKbssg4NjXcj\",\"CLmJduqJHX83dM4Pd\",\"gofo35rKkbyPH9jFq\",\"WHn374iJqrmFwqofS\",\"wAthicgfEPyo35RZz\",\"HQsxNbdH6omkLKX7K\",\"nWviytG3HcAYxGjg7\",\"3KjxQu9RZ8ZSywvLz\",\"cCzcTab3QLLFABXur\",\"r9hHZYPQAqJ9DbwLX\",\"s8o9ptNnpNGktBWdX\",\"GgxxSd7k4CLfzkFMH\",\"kXEfD7xxEyWd7oxxL\",\"W347YkKWzfvMbkuHr\",\"u4yanfWeeZsN3xWgc\",\"vuMBgKQRnA4HsuWjR\",\"8JyqsSbN2FJXPr3cw\",\"J9zJq7PMGb6mqzcHW\",\"qx9XHErKygcLiFGhX\",\"Xwu7yQJzMsErCa9X7\",\"D3YjeE2QrN2kygS3H\",\"4hYyZnCuvgfuxhd7e\",\"Es4eX2stRpyoXeC7f\",\"EZNT8B7yQnnZmuwCf\",\"AvEiDZKLHCEQ6n9Ma\",\"wYYMNPe8nSiJFbvJw\",\"82weQfHHmno4Mq4X7\",\"hB5mgzMwQSnhBzi7P\",\"fZjkX29nhRTWWb75k\",\"Kso7rzAKB4TTCPKgM\",\"5seiNqw6ZXoF2GRRd\",\"jyoLggHk8xQKZuoQC\",\"TrquEHytntLKHA4m2\",\"WZujpe8yQAyZmpWHg\",\"etoSR23iELGGgs9rA\",\"DzvdGwHEjqsX7wyKr\",\"B4pxRqzo43M7S8FbP\",\"g4NCSxxHqHCGMpWwT\",\"k2tXkx7AyX77tQDRo\",\"Fd9765rksgPK4E2Zy\",\"rvojHhKH3DaxotefQ\",\"TLgJebKMDSvJFbWrD\",\"kiRkuN7JXqvWBa4SG\",\"2jH5PTxFP9bguXT4G\",\"5p6bwXayfAp7Y4WQ7\",\"j428nMyNKY8g2dcCi\",\"MCjdtAAjL6sGLukPr\",\"HDNfL5LCyDBBx58qy\",\"qraDA47Ewou5mzvrL\",\"sJaSeR649EEMX9F4v\",\"87otmbdqNT3bHsQFu\",\"YcjwCvYut6834Jzd8\",\"azAzSkvJd7eyXY9x9\",\"yXGiiSAR5nBHnH3yr\",\"gXTAie79kiw28tx5u\",\"jXTnL3JatkKjoifyb\",\"mQKWauR6b252TmdX4\",\"BrLjaZuPzmCNYG8ho\",\"bur3yQ8s34zqKGEro\",\"buX4mCQhtXCfBjeno\",\"rhS8qXRjZcpDXkwnE\",\"GpXpLCQwaAvbGhQ7L\",\"YhPvCiCi2vbF9sZAE\",\"DkSMZ3jZLkwviKb9g\",\"AZpW9TmsKqJZHBSys\",\"KMR6vNzvSKMA2cXnK\",\"htXCitorobtqYymjN\",\"unqzSsxpxj9sZ7rbD\",\"FxPDKKibxnZjGJLs6\",\"uw47663LqPME8btaA\",\"wMY6G2GLpcTJCe74o\"],\"quality\":[4,5,4,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":4.6,\"family\":[{\"_id\":\"zSY6P6ZYopGXjhPF4\",\"language\":\"cpp\"},{\"_id\":\"M9eXE68jj9pxvmiuj\",\"language\":\"java\"},{\"_id\":\"FzHZJtG5LQwjMGdZp\",\"language\":\"javascript\"},{\"_id\":\"GX3pQxvbTJApWYgRJ\",\"language\":\"python3\"},{\"_id\":\"WJ6yb8uRRJBG7LMvw\",\"language\":\"ruby\"}]}}"]