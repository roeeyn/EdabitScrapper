a["{\"msg\":\"result\",\"id\":\"317\",\"result\":{\"_id\":\"aAMcXEH67BLzJfyZz\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class LongDigits {\\n\\tpublic static int digitsCount(long n) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":1.4387755102040816,\"familyId\":\"3kQSztnaycBR3vgSu\",\"instructions\":\"Create a function that will count the number of digits of a number. Conversion of the *number* to a *string* is **not allowed**, thus, the approach is either recursive or iterative.\\n\\n### Examples\\n```\\ndigitsCount(4666) ➞ 4\\n\\ndigitsCount(544) ➞ 3\\n\\ndigitsCount(121317) ➞ 6\\n\\ndigitsCount(0) ➞ 1\\n\\ndigitsCount(12345) ➞ 5\\n\\ndigitsCount(1289396387328L) ➞ 13\\n```\\n\\n### Notes\\n- A **recursive** version of this challenge can be found via this [link](https://edabit.com/challenge/vpSCPsQKcQwnFdMS4).\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"/** \\n================================== \\nTestGen 3.1 for JUnit 4.13.0 \\t\\t\\nTest Case: LongDigits::digitsCount \\nTimestamp: 10/05/2020 10:07:04 PM \\n---------------------------------- \\n® DARKKO 2021 © \\n================================== \\n\\n**/ \\n\\nimport static org.junit.Assert.assertEquals; \\nimport org.junit.Test; \\n\\npublic class LongDigitsTest { \\n\\t\\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertEquals(1, LongDigits.digitsCount(0));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertEquals(4, LongDigits.digitsCount(4666));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertEquals(3, LongDigits.digitsCount(544));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertEquals(6, LongDigits.digitsCount(121317));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertEquals(5, LongDigits.digitsCount(12345));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertEquals(13, LongDigits.digitsCount(1289396387328L));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertEquals(7, LongDigits.digitsCount(-1232323));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertEquals(16, LongDigits.digitsCount(3463463874638476L));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test09() { \\n\\t\\tassertEquals(9, LongDigits.digitsCount(-231200000));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() { \\n\\t\\tassertEquals(13, LongDigits.digitsCount(1283939312321L));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test11() { \\n\\t\\tassertEquals(9, LongDigits.digitsCount(-231273683));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test12() { \\n\\t\\tassertEquals(7, LongDigits.digitsCount(3200000));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test13() { \\n\\t\\tassertEquals(9, LongDigits.digitsCount(314890000));\\n\\t}\\n\\n}\\n// end of tests\",\"language\":\"java\",\"quality\":4.5,\"summary\":\"Create a function that will count the number of digits of a number. Conversion of the number to a string is not allowed, thus, the approach is either recursive or iterative.\\n\\nExamples\\ndigitsCount(4666) ➞ 4\\n\\ndigitsCount(544) ➞ 3\\n\\ndigitsCount(121317) ➞ 6\\n\\ndigitsCount(0) ➞ 1\\n\\ndigitsCount(12345) ➞ 5\\n\\ndigitsCount(1289396387328L) ➞ 13\\n\\nNotes\\nA recursive version of t\",\"tags\":[\"numbers\",\"logic\"],\"timestamp\":{\"$date\":1601908473836},\"title\":\"Count the Digits\",\"stats\":{\"completed\":{\"total\":100,\"ratings\":[2,2,2,2,2,2,2,2,1,1,1,2,2,1,2,1,1,1,2,2,2,2,1,2,1,1,1,2,1,2,2,0,0,1,2,0,2,0,1,2,2,2,1,1,2,2,1,2,2,0,0,2,3,2,1,2,1,3,1,0,3,2,3,2,0,1,2,2,1,0,0,2,1,0,2,1,1,2,2,0,2,0,3,2,2,2,1,1,2,3,1,0,1,2,0,1,0,3],\"quality\":[4,5],\"rators\":[\"a777e8chPvJkY3tKa\",\"Es4eX2stRpyoXeC7f\",\"azAzSkvJd7eyXY9x9\",\"rehehi2Tr2mwaEoJE\",\"2xFvy6u3hE4LtCXMD\",\"9GCFAs5rBXkia8qEs\",\"yXGiiSAR5nBHnH3yr\",\"DzvdGwHEjqsX7wyKr\",\"TrquEHytntLKHA4m2\",\"gXTAie79kiw28tx5u\",\"etoSR23iELGGgs9rA\",\"jb9RLyyuo565bKDzN\",\"8Xx8nWXRydHDBGfQf\",\"jXTnL3JatkKjoifyb\",\"jyoLggHk8xQKZuoQC\",\"RAEFpazbe6mhx3PLb\",\"PtGprKjgzCDqyrp6d\",\"JFodQijHHdRkkrZvT\",\"9vyjn4WyWtJ6o2wop\",\"E2hpke7mHxAWsw5t9\",\"qaPjAANdnxFnWfj5d\",\"82weQfHHmno4Mq4X7\",\"vKYxZbHNDTn5GLiTi\",\"a49eNnfRwSMxsDJXf\",\"AeJSxRqw2dJZuGvdk\",\"mG8HqKiAQFTdRZthG\",\"buX4mCQhtXCfBjeno\",\"bur3yQ8s34zqKGEro\",\"DkSMZ3jZLkwviKb9g\",\"xEX3TDY6C2h82dJTn\",\"6W5m8JHSs9tDvSh8x\",\"c7uBxu2rgY77H5d79\",\"vRXuYYBNuHEQ29fbm\",\"rhS8qXRjZcpDXkwnE\",\"Yohr2MmAyaWGMbB35\",\"tdxi2QkC26vf5P3vG\",\"HsFc9PgmpP2X9Fwh9\",\"76xn8zYtuNeTf9c5m\",\"34bE6mric984YYLZQ\",\"wFRLGjA56kj7xyhmv\",\"sxci7DYKNa6q22Sjq\",\"HXbTKW3jmmyRAsKrr\",\"6rvJwN4mcX7iYGjY7\",\"mfm3gB39arY8Rjb2y\",\"uw47663LqPME8btaA\",\"srJ34BaybkQh3qRkM\",\"r43Gfvd3E4khAXhNW\",\"XmWJPAXHZLbvsk9r3\",\"dZmWxedyWMGEhZkGZ\",\"4XEJTeSj4TotdmA4W\",\"MpfytGFYF77emJ3cT\",\"zEiHincPELnvffKbq\",\"9GxghE7uZXCMKt6W9\",\"J9zJq7PMGb6mqzcHW\",\"Gt2rpDwTdj9jfXNQ4\",\"htXCitorobtqYymjN\",\"jCjCvyhqhpebkJn34\",\"563onSvqgjToY79ah\",\"PJu3WcTpfRrvHfQiS\",\"rWhXHhzF4W8bea6LP\",\"KMR6vNzvSKMA2cXnK\",\"B4pxRqzo43M7S8FbP\",\"hhxjQREtmHSheH9Pj\",\"eXME6AmouMmTezHmN\",\"unqzSsxpxj9sZ7rbD\",\"FxPDKKibxnZjGJLs6\",\"fuiXGu8yX5FqAzomH\",\"2sMGo8uAMa2pcvDEs\",\"DZvz6WY5bQEneYzvv\",\"974cv448kw6Wu2JF6\",\"YLwJkF2wuL3n9o6a2\",\"2mTYrwqEabB4NHPCY\",\"mETPF85HbPSJGgxHv\",\"6nQKzp7nGNbvXnPRJ\",\"JGGT37AgR8cKt72iF\",\"v4hie9sTxoD7ok4yr\",\"329Qq4BmraTimfkAs\",\"yRnnH5XhgnATwracB\",\"5HGyJtoZ3AffzAZAv\",\"hF9icm7GxAnAGSjAD\",\"FmHfRwqADWPBinPfZ\",\"ckQwFFWyLXmDQAaCn\",\"nFbmNzMQ38TncmfQX\",\"xLy94bAjaLwokPcZZ\",\"6EKjQGhH23tmPtba8\",\"G4ugp6cZbXbe9EpGG\",\"RdjHaaZjRDvsSWLcH\",\"rvojHhKH3DaxotefQ\",\"RJ6mfGK5N6pRrGRm9\",\"DKMDQytLAFWhYnhpS\",\"ikkjHDqBHu6fT3vGL\",\"7kENXQQ8ABiPGfBRD\",\"5eDE9KCDnDnqBqLEK\",\"Q2TD7GcXaL5F3d2LM\",\"TquSKSgqm6zev8D4H\"]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"a777e8chPvJkY3tKa\",\"family\":[{\"_id\":\"aAMcXEH67BLzJfyZz\",\"language\":\"java\"},{\"_id\":\"bxJH7XXXnX6G5NTxT\",\"language\":\"javascript\"},{\"_id\":\"dLYhGnWQ5Q8DRmnbR\",\"language\":\"python3\"}]}}"]