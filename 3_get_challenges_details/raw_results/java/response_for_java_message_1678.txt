a["{\"msg\":\"result\",\"id\":\"397\",\"result\":{\"_id\":\"KMggZFnrWJGxk2tvn\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class BinaryString {\\n  public static boolean validateBinary(String bits) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":1.5164835164835164,\"familyId\":\"34BYfjj3EtvGHCA4f\",\"instructions\":\"Parity bits are used as very simple checksum to ensure that binary data isn't corrupted during transit. Here's how they work:\\n\\n* If a binary string has an **odd** number of **1**'s, the parity bit is a **1**.\\n* If a binary string has an **even** number of **1**'s, the parity bit is a **0**.\\n* The parity bit is appended to the **end** of the binary string.\\n\\nCreate a function that validates whether a binary string is valid, using parity bits.\\n\\n### Examples\\n```\\nvalidateBinary(\\\"10110010\\\") ➞ true\\n// The last digit is the parity bit.\\n// 0 is the last digit.\\n// 0 means that there should be an even number of 1's.\\n// There are four 1's.\\n// Return true.\\n\\nvalidateBinary(\\\"00101101\\\") ➞ true\\n\\nvalidateBinary(\\\"11000000\\\") ➞ true\\n\\nvalidateBinary(\\\"11000001\\\") ➞ false\\n```\\n\\n### Notes\\n* All inputs will be a byte long (8 characters).\\n* You can find another parity bit involved challenge via this [link](https://edabit.com/challenge/RwrKgxmoMbm5NDFxW \\\"Adding Parity Bits\\\").\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"import static org.junit.Assert.assertEquals;\\nimport org.junit.Test;\\n\\npublic class BinaryStringTest {\\n\\t@Test\\n\\tpublic void test01() {\\n\\t\\tassertEquals(true, BinaryString.validateBinary(\\\"00101101\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertEquals(true, BinaryString.validateBinary(\\\"11000000\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertEquals(false, BinaryString.validateBinary(\\\"11000001\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertEquals(false, BinaryString.validateBinary(\\\"10010010\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertEquals(false, BinaryString.validateBinary(\\\"10101101\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertEquals(false, BinaryString.validateBinary(\\\"11000100\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertEquals(true, BinaryString.validateBinary(\\\"11000101\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertEquals(true, BinaryString.validateBinary(\\\"10010110\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test09() { \\n\\t\\tassertEquals(false, BinaryString.validateBinary(\\\"10101101\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() { \\n\\t\\tassertEquals(false, BinaryString.validateBinary(\\\"11001000\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test11() { \\n\\t\\tassertEquals(true, BinaryString.validateBinary(\\\"11001001\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test12() { \\n\\t\\tassertEquals(true, BinaryString.validateBinary(\\\"10011010\\\"));\\n\\t}\\n}\",\"language\":\"java\",\"quality\":4.4,\"summary\":\"Parity bits are used as very simple checksum to ensure that binary data isn't corrupted during transit. Here's how they work:\\n\\nIf a binary string has an odd number of 1's, the parity bit is a 1.\\nIf a binary string has an even number of 1's, the parity bit is a 0.\\nThe parity bit is appended to the end of the binary string.\\n\\nCreate a function that validates whet\",\"tags\":[\"validation\",\"numbers\",\"strings\"],\"timestamp\":{\"$date\":1610396047047},\"title\":\"Parity Bit Validation\",\"stats\":{\"completed\":{\"total\":107,\"ratings\":[1,1,1,1,1,1,1,2,2,0,1,1,1,1,0,3,1,1,1,0,1,1,3,0,1,2,0,1,3,1,1,2,2,3,1,2,2,2,2,2,2,3,1,2,3,4,1,1,1,2,2,1,1,2,2,1,1,1,1,0,1,2,1,2,3,0,3,4,2,0,2,0,1,2,1,1,2,1,1,2,2,2,2,3,2,2,2,1,2,2,2],\"quality\":[5,5,5,5,5,5,3,5,5,4,1,3,5,5,5],\"rators\":[\"a777e8chPvJkY3tKa\",\"WtcL9iLienLmqzxrK\",\"gXTAie79kiw28tx5u\",\"HdxLBW3CejESvwwMt\",\"8WeJLyNE4h6nJ2dNh\",\"Es4eX2stRpyoXeC7f\",\"PJu3WcTpfRrvHfQiS\",\"J7epB3qSQJ2E8vWkY\",\"LCuvvWMwiGuqTwNRi\",\"SE5G2Caf3btnuGmz6\",\"9YGY6sGf5Mf9Pjvxf\",\"uFfEio8nzDvL8emhp\",\"hhxjQREtmHSheH9Pj\",\"Wi4H6ayKsNDWWQCG5\",\"fD2vkjhwWmxbs3aAn\",\"8Z4rovtFGhqBKiqD3\",\"dRpSwgukY2jHSxuwq\",\"RuyrWz2Fo5SwqxKcZ\",\"AeJSxRqw2dJZuGvdk\",\"3SgSNoAB3sxaYeT3w\",\"2cMqsHnrvuTYNMBeE\",\"gBGjCfJvPHswDM5JQ\",\"9XEadA9Rk4RB2Wwpm\",\"cMMrcetHypNGmBsyt\",\"a49eNnfRwSMxsDJXf\",\"82weQfHHmno4Mq4X7\",\"wgANZ5FLHh4iWu4Zy\",\"GkYtSbQuheBF4Enys\",\"QRv96jmNaYsWkxQEG\",\"mG8HqKiAQFTdRZthG\",\"DzvdGwHEjqsX7wyKr\",\"zZfMwLuoERGmybgib\",\"dwYWHHud64kLdNK5i\",\"R5w6oftZK7LuY6TjD\",\"uBRsjqYoyRmfq5b3s\",\"NnymXePpDaZnp2fRd\",\"DwAzT6PWjJ8cDwCBe\",\"4ySzqKC5s3ZRpG9di\",\"DrkR35NqnP9NDLbq6\",\"L2ZicYhibFcuxfwPd\",\"bur3yQ8s34zqKGEro\",\"LzqgvzgPDqEeoRAGw\",\"R2ZwtraCp4iWkETB2\",\"YLqdr7bYjwew2KM4N\",\"aKHRmG6n8NzPoiTF9\",\"Gkt24LnG4KBrd2AfK\",\"Azbtwe84HAD6RmnHp\",\"kbiQdrae572SRmwZD\",\"g3autiWG3yWN2EbX5\",\"gW5d9Ps89bbsYzXrF\",\"wqfPMc5G2GPEkozRi\",\"R6Br35rEWAquiTjuN\",\"7AHkoNaT8ABxame4g\",\"N7vpEM6gnyAxtDaKJ\",\"jyoLggHk8xQKZuoQC\",\"buX4mCQhtXCfBjeno\",\"YLwJkF2wuL3n9o6a2\",\"DkSMZ3jZLkwviKb9g\",\"XCvnLR9qxvidFYdt8\",\"dcW9oK2uRo8h8mBe2\",\"HsFc9PgmpP2X9Fwh9\",\"c7uBxu2rgY77H5d79\",\"sxci7DYKNa6q22Sjq\",\"DoRsRFfG5vr6LgmQm\",\"9vyjn4WyWtJ6o2wop\",\"mfm3gB39arY8Rjb2y\",\"rhS8qXRjZcpDXkwnE\",\"HXbTKW3jmmyRAsKrr\",\"kgpDLsmtQfWowgPcY\",\"mpJXLJfd5iqPXiBLD\",\"5ukvHNsmQka3exYBb\",\"J3934ZbdC3JJ7P8GN\",\"Ph3DenNripd6NifhJ\",\"4ZQSADQS4KKdRHmZ2\",\"aomWW6ubgH6zvmWG4\",\"btabi3PdyisuY5tn9\",\"JFodQijHHdRkkrZvT\",\"9BrYCjw7SXecp32h8\",\"srJ34BaybkQh3qRkM\",\"J9zJq7PMGb6mqzcHW\",\"htXCitorobtqYymjN\",\"xEX3TDY6C2h82dJTn\",\"RsujLHaML6L3KinzK\",\"zTtKiCbLWzaf2Yjo4\",\"gSrqu8MsZMFSxxWAZ\",\"jCjCvyhqhpebkJn34\",\"478iCTPiXNjoHXwHD\",\"5b3rz7nFjQ7rwtqkQ\",\"FcWsHEJRQ7WKMyeeN\",\"ZDqPHY2Lr9Zjd34Y7\",\"Qv2jEtTnFCXX7cdd3\",\"5yM5NJyPxM9PvSWaW\",\"KMR6vNzvSKMA2cXnK\",\"JkCuMGDM9CNTuQNzs\",\"rWhXHhzF4W8bea6LP\",\"GRSgodNrGhekHtCun\",\"unqzSsxpxj9sZ7rbD\",\"FxPDKKibxnZjGJLs6\",\"J9pvE5zxYRzvEhaYh\",\"uw47663LqPME8btaA\",\"XH6378Zm3WBm679yx\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"ib8qJtTp4GmFBEcpP\",\"language\":\"cpp\"},{\"_id\":\"KMggZFnrWJGxk2tvn\",\"language\":\"java\"},{\"_id\":\"DG9JudATzAbgBxvhQ\",\"language\":\"javascript\"},{\"_id\":\"hqA9afbGDbTm7RkSm\",\"language\":\"php\"},{\"_id\":\"DcXTvFs7Zvc3PDTzX\",\"language\":\"python3\"},{\"_id\":\"pKEjBXc4Mr6Ttgyn2\",\"language\":\"ruby\"}]}}"]