a["{\"msg\":\"result\",\"id\":\"731\",\"result\":{\"_id\":\"MvFCbkJeZ8Ydq3sPp\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"public class Challenge {\\n  public static boolean validColor(String color) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":2.8260869565217392,\"familyId\":\"6bvceAChk3gb63cot\",\"instructions\":\"Given an RGB(A) CSS color, determine whether its format is valid or not. Create a function that takes a string (e.g. `\\\"rgb(0, 0, 0)\\\"`) and return `true` if it's format is correct, otherwise return `false`.\\n\\n### Examples\\n```\\nvalidColor(\\\"rgb(0,0,0)\\\") ➞ true\\n\\nvalidColor(\\\"rgb(0,,0)\\\") ➞ false\\n\\nvalidColor(\\\"rgb(255,256,255)\\\") ➞ false\\n\\nvalidColor(\\\"rgba(0,0,0,0.123456789)\\\") ➞ true\\n```\\n\\n### Notes\\n- Alpha is between 0 and 1.\\n- There are a few edge cases (check out the **Tests** tab to know more).\",\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n  @Test\\n  public void test1() {\\n\\t\\tSystem.out.println(\\\"rgb lowest valid numbers\\\");\\n    assertEquals(true, Challenge.validColor(\\\"rgb(0,0,0)\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test2() {\\n\\t\\tSystem.out.println(\\\"rgb highest valid numbers\\\");\\n    assertEquals(true, Challenge.validColor(\\\"rgb(255,255,255)\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test3() {\\n\\t\\tSystem.out.println(\\\"rgba lowest valid numbers\\\");\\n    assertEquals(true, Challenge.validColor(\\\"rgba(0,0,0,0)\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test4() {\\n\\t\\tSystem.out.println(\\\"rgba highest valid numbers\\\");\\n    assertEquals(true, Challenge.validColor(\\\"rgba(255,255,255,1)\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test5() {\\n\\t\\tSystem.out.println(\\\"alpha can have many decimals\\\");\\n    assertEquals(true, Challenge.validColor(\\\"rgba(0,0,0,0.123456789)\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test6() {\\n\\t\\tSystem.out.println(\\\"in alpha the number before the dot is optional\\\");\\n    assertEquals(true, Challenge.validColor(\\\"rgba(0,0,0,.8)\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test7() {\\n\\t\\tSystem.out.println(\\\"whitespace is allowed around numbers (even tabs)\\\");\\n    assertEquals(true, Challenge.validColor(\\\"rgba(\\t0 , 127\\t, 255 , 0.1\\t)\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test8() {\\n\\t\\tSystem.out.println(\\\"numbers can be percentages\\\");\\n    assertEquals(true, Challenge.validColor(\\\"rgb(0%,50%,100%)\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test9() {\\n\\t\\tSystem.out.println(\\\"INVALID: missing number\\\");\\n    assertEquals(false, Challenge.validColor(\\\"rgb(0,,0)\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test10() {\\n\\t\\tSystem.out.println(\\\"INVALID: whitespace before parenthesis\\\");\\n    assertEquals(false, Challenge.validColor(\\\"rgb (0,0,0)\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test11() {\\n\\t\\tSystem.out.println(\\\"INVALID: rgb with 4 numbers\\\");\\n    assertEquals(false, Challenge.validColor(\\\"rgb(0,0,0,0)\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test12() {\\n\\t\\tSystem.out.println(\\\"INVALID: rgba with 3 numbers\\\");\\n    assertEquals(false, Challenge.validColor(\\\"rgba(0,0,0)\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test13() {\\n\\t\\tSystem.out.println(\\\"INVALID: numbers below 0\\\");\\n    assertEquals(false, Challenge.validColor(\\\"rgb(-1,0,0)\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test14() {\\n\\t\\tSystem.out.println(\\\"INVALID: numbers above 255\\\");\\n    assertEquals(false, Challenge.validColor(\\\"rgb(255,256,255)\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test15() {\\n\\t\\tSystem.out.println(\\\"INVALID: numbers above 100%\\\");\\n    assertEquals(false, Challenge.validColor(\\\"rgb(100%,100%,101%)\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test16() {\\n\\t\\tSystem.out.println(\\\"INVALID: alpha below 0\\\");\\n    assertEquals(false, Challenge.validColor(\\\"rgba(0,0,0,-1)\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test17() {\\n\\t\\tSystem.out.println(\\\"INVALID: alpha above 1\\\");\\n    assertEquals(false, Challenge.validColor(\\\"rgba(0,0,0,1.1)\\\"));\\n  }\\n}\",\"language\":\"java\",\"summary\":\"Given an RGB(A) CSS color, determine whether its format is valid or not. Create a function that takes a string (e.g. \\\"rgb(0, 0, 0)\\\") and return true if it's format is correct, otherwise return false.\\n\\nExamples\\nvalidColor(\\\"rgb(0,0,0)\\\") ➞ true\\n\\nvalidColor(\\\"rgb(0,,0)\\\") ➞ false\\n\\nvalidColor(\\\"rgb(255,256,255)\\\") ➞ false\\n\\nvalidColor(\\\"rgba(0,0,0,0.123456789)\\\") ➞ true\",\"tags\":[\"regex\",\"conditions\",\"validation\"],\"timestamp\":{\"$date\":1567972072460},\"title\":\"Is It a Valid RGB(A) Color?\",\"stats\":{\"completed\":{\"total\":23,\"ratings\":[3,3,3,3,3,4,5,4,0,2,0,3,4,4,4,3,1,2,3,3,2,4,2],\"rators\":[\"3pdgguqZgNDSAJSGm\",\"YF79LnTdprobbYY5v\",\"sxci7DYKNa6q22Sjq\",\"kXEfD7xxEyWd7oxxL\",\"cf7XxBWEdAGXPDGf9\",\"Lt7D3eZSrYjcFdAzW\",\"Es4eX2stRpyoXeC7f\",\"gGnDsJz5hr2t9MKCF\",\"TrquEHytntLKHA4m2\",\"jyoLggHk8xQKZuoQC\",\"cE9dgDxfDsGJ4Kf9M\",\"62Q2HcfLE6SGphZkT\",\"k63LjKkX5p7SYng7C\",\"DkSMZ3jZLkwviKb9g\",\"5WQZzuHZBGqFeNQi3\",\"gXTAie79kiw28tx5u\",\"GiqPq82is4HGWdZHA\",\"fommzAP3nsb8dQrYn\"],\"quality\":[]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":0,\"family\":[{\"_id\":\"jTuvbNCy7b82Did3J\",\"language\":\"cpp\"},{\"_id\":\"MvFCbkJeZ8Ydq3sPp\",\"language\":\"java\"},{\"_id\":\"CoAPnr8jxcTah2CzZ\",\"language\":\"javascript\"},{\"_id\":\"kjph2fGDWmLKY2n2J\",\"language\":\"python3\"},{\"_id\":\"89C3iDc6yeBn5duq6\",\"language\":\"ruby\"}]}}"]