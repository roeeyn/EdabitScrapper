a["{\"msg\":\"result\",\"id\":\"511\",\"result\":{\"_id\":\"zi3zKpBLYHqtmSf5m\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class Dominance {\\n  public static boolean isPositiveDominant(int[] n) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":2.0625,\"familyId\":\"TS4PNSRZqqmyrS7AG\",\"instructions\":\"An array is **positive dominant** if it contains **strictly more** **unique** positive values than **unique** negative values. Write a function that returns `true` if an array is **positive dominant**, `false`, otherwise.\\n\\n### Examples\\n```\\nisPositiveDominant([1, 1, 1, 1, -3, -4]) ➞ false\\n// There is only 1 unique positive value (1).\\n// There are 2 unique negative values (-3, -4).\\n\\nisPositiveDominant([5, 99, 832, -3, -4]) ➞ true\\n\\nisPositiveDominant([5, 0]) ➞ true\\n\\nisPositiveDominant([0, -4, -1]) ➞ false\\n```\\n\\n### Notes\\n`0` counts as neither a positive nor a negative value.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"import static org.junit.Assert.assertEquals; \\nimport org.junit.Test; \\n\\npublic class DominanceTest {\\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertEquals(false, Dominance.isPositiveDominant(new int[] {1, 1, 1, 1,-3,-4}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertEquals(true, Dominance.isPositiveDominant(new int[] {5, 99, 832,-3,-4}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertEquals(true, Dominance.isPositiveDominant(new int[] {5, 0}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertEquals(false, Dominance.isPositiveDominant(new int[] {0,-4,-1}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertEquals(true, Dominance.isPositiveDominant(new int[] {1, 2, 3,-1}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertEquals(false, Dominance.isPositiveDominant(new int[] {1, 0, 0,-1}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertEquals(true, Dominance.isPositiveDominant(new int[] {5, 4, 3, 0, 0,-1,-1,-2,-2}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertEquals(false, Dominance.isPositiveDominant(new int[] {52, 52, 52,-3, 2, 2, 2,-4}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test09() { \\n\\t\\tassertEquals(false, Dominance.isPositiveDominant(new int[] {3, 3, 3, 3,-1,-1,-1}));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test10() { \\n\\t\\tassertEquals(false, Dominance.isPositiveDominant(new int[] {-112, 40, 17, -61, -74, 19, -126, 76, 113, -177, 61, 94, -84, 17, -65, 33, -131, -85, -132, -134, 71, 92, -195, -28, 184, -154, 179, -30, -6, 69, -101, -187, -195, -49, -59, -155, 110, 82, 126, 30, 173, -167, 11, -139, 47, -45, -174, 90, -170, -38}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test11() { \\n\\t\\tassertEquals(true, Dominance.isPositiveDominant(new int[] {-178, 43, 4,-124, 143, 53,-105,-156, 92, 90, 101, 63, 147,-61, 167,-61,-73,-17, 2, 33, 154, 14, 60, 167, 19, 150, 17, 199, 127, 9, 197,-25, 74,-122, 166, 164, 10,-178, 198,-184,-36,-36,-195,-132, 90,-68,-81,-6, 172, 66}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test12() { \\n\\t\\tassertEquals(true, Dominance.isPositiveDominant(new int[] {124, 159, 32,-155,-110, 138,-18, 163,-128,-96, 83,-176,-16,-135, 12,-22, 63, 68, 86, 19,-128, 90, 135,-17, 199, 36, 10, 41, 114, 123,-29, 24,-51, 15,-180, 109, 14,-159, 23, 192,-142,-192,-182,-196, 106,-129, 16, 193,-17,-32}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test13() { \\n\\t\\tassertEquals(false, Dominance.isPositiveDominant(new int[] {-147, 159,-5, 45,-80, 18,-142,-154,-54, 115, 19, 93, 23,-19, 85,-56, 127, 96, 55,-179, 120,-79,-76, 61,-177,-90, 141, 149, 0,-162,-181, 68, 10,-81, 28, 32,-112,-34,-193,-200,-164, 118, 140, 75, 21,-68, 147,-125,-33,-155}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test14() { \\n\\t\\tassertEquals(true, Dominance.isPositiveDominant(new int[] {60, 44,-175, 28, 131, 156, 142, 163, 1, 73, 64, 33, 7,-147, 180,-166, 10, 198,-168, 8, 169, 196, 150,-54, 138, 195,-41,-80,-57,-161,-74,-119, 134, 164, 92,-117,-48, 166, 52,-94, 99, 28, 42, 113, 149, 51,-77, 80, 51, 200}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test15() { \\n\\t\\tassertEquals(false, Dominance.isPositiveDominant(new int[] {46, 159, 119,-186,-178, 136, 44, 172,-78,-89,-45, 173,-181,-145, 190,-102,-5, 157, 83, 79,-141,-24, 16, 109,-50, 169, 147,-117,-148, 166,-76,-168,-106,-84,-54,-95,-102,-116,-19,-128,-5, 175,-85,-173, 56, 82, 186,-102,-39,-85}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test16() { \\n\\t\\tassertEquals(false, Dominance.isPositiveDominant(new int[] {-58, 24,-22, 161, 68, 112, 137, 67,-166, 33, 37,-77,-41, 146, 91, 17, 4,-136, 62,-41,-24,-51,-147, 157,-114,-22,-103,-19, 69,-84,-118,-172, 80,-188, 121,-38, 176, 33,-71, 180,-98, 96, 121, 196, 34,-135,-132,-112, 166,-178}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test17() { \\n\\t\\tassertEquals(false, Dominance.isPositiveDominant(new int[] {73, 119,-116, 189, 64,-140,-153, 132,-181,-183,-180,-118, 152,-133,-120, 166, 182,-132, 30,-138,-12,-192, 132, 141,-71, 28,-134,-88,-145,-4, 177, 126, 109,-181, 200,-41,-112, 122, 165,-65,-25, 139,-5,-134,-23,-93, 170, 48, 28,-88}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test18() { \\n\\t\\tassertEquals(true, Dominance.isPositiveDominant(new int[] {161,-119,-54, 117, 124,-31, 183,-46,-192, 27,-151,-98, 117, 120,-5,-164, 178,-45,-25, 183, 179,-118,-45, 114,-35, 157,-188, 32,-83, 106, 179,-63,-97,-142, 169,-51, 129, 72, 107, 192, 139,-112,-111, 11, 151,-170, 144,-25, 52, 42}));\\n\\t}\\n}\",\"language\":\"java\",\"quality\":4.8,\"summary\":\"An array is positive dominant if it contains strictly more unique positive values than unique negative values. Write a function that returns true if an array is positive dominant, false, otherwise.\\n\\nExamples\\nisPositiveDominant([1, 1, 1, 1, -3, -4]) ➞ false\\n// There is only 1 unique positive value (1).\\n// There are 2 unique negative values (-3, -4).\\n\\nisPositive\",\"tags\":[\"arrays\",\"validation\"],\"timestamp\":{\"$date\":1608212566269},\"title\":\"Positive Dominant\",\"stats\":{\"completed\":{\"total\":78,\"ratings\":[2,2,2,2,2,2,3,2,3,1,2,1,0,2,3,2,3,2,1,1,2,2,3,2,2,1,3,2,3,3,3,3,2,1,1,3,2,3,2,2,2,2,2,3,3,2,2,3,1,1,3,2,2,3,1,2,3,2,2,1,2,1,2,2],\"quality\":[5,5,5,5,5,5,3,5,5,5],\"rators\":[\"a777e8chPvJkY3tKa\",\"Es4eX2stRpyoXeC7f\",\"6eGNbCnp6kneyAdRT\",\"CchXpepYoWwroXGLZ\",\"H5KSDzxwGtgftsuik\",\"qLB4YQpeKfCL8P7yY\",\"RGN3QTb5LXj4ZPPkj\",\"btabi3PdyisuY5tn9\",\"8zYFEzarFJMAJriro\",\"p8qqFdJ3FSk5x9z3G\",\"tDjDygopNyXLZnjAH\",\"WTLPoP6k8HGBYqwjp\",\"ikycYuSDrQo6Fx9nj\",\"vRXuYYBNuHEQ29fbm\",\"2tadaMF3dCdqpj4xF\",\"A7Z9ohZj74WNoXsdW\",\"nNTE36iJ7DfxL62H3\",\"YuTmWchYrh725Cfbs\",\"kwSaPXaeAd98ingjR\",\"DrkR35NqnP9NDLbq6\",\"p5QkcqbZ5sHXoQMt8\",\"NXtM3si2K3i4DySMn\",\"qGptB3ddNweE683K7\",\"f5PLeQ8NaYKWB8cEF\",\"49caJ2EMfEnPSEYZj\",\"Y6N5mCB4KjcLeFFDK\",\"kiaTFLguNXT3JPJne\",\"qb2DTmzQj4vNfq5K7\",\"RYkYpJYKL2dDWkeXB\",\"idAmszccPa73aAcNf\",\"qRhXvCaA7qgDoeFnr\",\"p2woPCQKXuWJCwffJ\",\"aykgiHhHvd2fYho4d\",\"82weQfHHmno4Mq4X7\",\"CRMSuRGAy3MgTBwA9\",\"9G5ds3mYFXaS4tEg3\",\"buX4mCQhtXCfBjeno\",\"jyoLggHk8xQKZuoQC\",\"LNCb5rksJLJ43L4Nw\",\"9M384SbCW7eciE5zc\",\"zZfMwLuoERGmybgib\",\"Ag5fRrZ9MrAZc9vpj\",\"HsFc9PgmpP2X9Fwh9\",\"qaPjAANdnxFnWfj5d\",\"mfm3gB39arY8Rjb2y\",\"rhS8qXRjZcpDXkwnE\",\"XGkYHhyZjvETpAqr2\",\"QD7mPMD8gmTP56nPv\",\"563onSvqgjToY79ah\",\"4ySzqKC5s3ZRpG9di\",\"wFRLGjA56kj7xyhmv\",\"CggGfsERnPKGupFWp\",\"htXCitorobtqYymjN\",\"jCjCvyhqhpebkJn34\",\"a49eNnfRwSMxsDJXf\",\"2NJZbusRvu3eJ4tHu\",\"xW9nC9h6p77YT2iso\",\"sxci7DYKNa6q22Sjq\",\"KMR6vNzvSKMA2cXnK\",\"9vyjn4WyWtJ6o2wop\",\"BHzYQ2DQnKGfNWWnq\",\"rWhXHhzF4W8bea6LP\",\"6rvJwN4mcX7iYGjY7\",\"unqzSsxpxj9sZ7rbD\",\"9AgowxTuaRiJ2tW9R\",\"uw47663LqPME8btaA\",\"FxPDKKibxnZjGJLs6\",\"XpsvzPw8cdw4Qaf4f\",\"Sox2TiAonGW7gw8he\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"dm9QycAQhKJp75gn9\",\"language\":\"cpp\"},{\"_id\":\"zi3zKpBLYHqtmSf5m\",\"language\":\"java\"},{\"_id\":\"7pkKPYtTJzpxRMckZ\",\"language\":\"javascript\"},{\"_id\":\"eboWapTruZFxmdcwp\",\"language\":\"python3\"},{\"_id\":\"qHr5NhuZFqcTeMQi6\",\"language\":\"ruby\"},{\"_id\":\"T2PPb2kJjEQ5nazEY\",\"language\":\"swift\"}]}}"]