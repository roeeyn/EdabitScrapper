a["{\"msg\":\"result\",\"id\":\"784\",\"result\":{\"_id\":\"Y6hNbTncED6dp6gFu\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"/*\\nCHARACTERS SET\\n○    ➞ blank\\n●    ➞ ship\\n☼    ➞ miss\\n☀   ➞ hit\\n*/\\n\\npublic class Battleship {\\n\\tpublic Battleship(String[] scheme, String[] target) {}\\n\\tpublic int board() {}\\n\\tpublic int hits() {}\\n\\tpublic int sunk() {}\\n\\tpublic int points() {}\\n}\",\"difficulty\":3.357142857142857,\"familyId\":\"HbrXJjcPkCvLurujS\",\"instructions\":\"Build a `Class` that will store and manipulate the data of a simplified clone of the popular strategy game, **Battleship**.\\n\\nThe game is played on a **5x5**-sized board. The rows of the grid are identified by the uppercase letters **A to E** (top to bottom), and the columns are identified by the numbers **1 to 5** (left to right).\\n\\n### Rules of the Game\\n- There are two types of ship: the **Patrol** and the **Cruiser**. The Patrol occupies a single cell, the Cruiser occupies two cells, horizontally or vertically.\\n- Three Patrols and three Cruisers will be placed randomly in the grid, **without ships adjacent in rows and columns** (see the notes below).\\n- The user _calls_ six different cells, trying to guess if there's a Patrol or a Cruiser in it.\\n- Hits and misses are recorded on the board. For every hit Patrol or Cruiser, a point is gained, and if a Cruiser is sunk, two additional points are gained.\\n\\n### Class \\\"Battleship\\\"\\nEach instance in the **Tests** tab will be declared with two variable parameters so the constructor has to be initialized with:\\n- `scheme` -  an array containing **9** strings being the coordinates indicating where the ships are placed on the grid.\\n- `target` -  an array containing **6** strings being the guesses made by the user.\\n\\n### What do you have to implement?\\nThe **Tests** will verify the existence and the correctness of the data through an instance of the  `Battleship` Class and will invoke its four different methods:\\n\\n- `board()` - returns the final state of the board, based on the placement of the ship and the results of the user guesses,  as a **5x5 matrix**. The following character set will represent the graphic of the game:\\n\\n  - ○  =  a blank space on the board.\\n  - ●  =  a space occupied by a ship.\\n  - ☼  =  a miss (wrong guess).\\n  - ☀  =  a hit (a correct guess).\\n\\n- `hits()` - returns the **total number of hits** made by the user (correct guesses), either on Patrols or on Cruisers.\\n- `sunk()` - returns the **total number of sunk** Cruisers (two adjacent guesses, in horizontal or vertical).\\n- `points()` - returns the **total number of points** gained by the user (1 for every hit, 2 for every sunk Cruiser).\\n\\n### Examples\\n```\\n// scheme = [\\\"A1\\\", \\\"C1\\\", \\\"B2\\\", \\\"B3\\\", \\\"D2\\\", \\\"E2\\\", \\\"E4\\\", \\\"E5\\\", \\\"A5\\\"]\\n\\n// target = [\\\"A1\\\", \\\"B2\\\", \\\"C3\\\", \\\"D4\\\", \\\"E5\\\", \\\"E4\\\"]\\n\\nbattleship.board() ➞ [\\n  [☀, ○, ○, ○, ●],\\n  [○, ☀, ●, ○, ○],\\n  [●, ○, ☼, ○, ○],\\n  [○, ●, ○, ☼, ○],\\n  [○, ●, ○, ☀, ☀]\\n]\\n\\nbattleship.hits() ➞ 4\\n// Total hits.\\n\\nbattleship.sunk() ➞ 1\\n// Sunk Cruisers, not Patrols.\\n\\nbattleship.points() ➞ 6\\n// Hits + additional points given by Sunk Cruisers.\\n```\\n\\n### Notes\\n- If two cruisers are in the same row or the same column, there will be a blank cell between them, so that it will be possible to treat them as different ships.\\n- The board **is not** given, you have to build it.\\n- In the **Examples** above, the symbols of the board are not between quotation marks for readability, but they are strings. The set of characters used for this challenge is already in the **Code** tab.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"/** \\n=================================\\nTestGen 3.1 for JUnit 4.13.0 \\t\\t\\nTest Case: Battleship::Class \\nTimestamp: 11/21/2020 05:01:28 PM\\n---------------------------------\\n® DARKKO 2020 © \\n=================================\\n\\n**/\\n\\nimport static org.junit.Assert.assertArrayEquals;\\nimport static org.junit.Assert.assertEquals;\\nimport org.junit.Test;\\nimport org.junit.runner.RunWith;\\nimport org.junit.runners.JUnit4;\\n\\n\\n@RunWith(JUnit4.class)\\npublic class BattleshipTest {\\n\\t@Test\\n\\tpublic void test01() {\\n\\t\\tBattleship battleship = new Battleship(new String[] {\\\"A1\\\", \\\"C1\\\", \\\"B2\\\", \\\"B3\\\", \\\"D2\\\", \\\"E2\\\", \\\"E4\\\", \\\"E5\\\", \\\"A5\\\"}, new String[] {\\\"A1\\\", \\\"B2\\\", \\\"C3\\\", \\\"D4\\\", \\\"E5\\\", \\\"E4\\\"});\\n\\t\\tassertArrayEquals(new String[][] {\\n\\t\\t\\t{\\\"☀\\\", \\\"○\\\", \\\"○\\\", \\\"○\\\", \\\"●\\\"}, \\n\\t\\t\\t{\\\"○\\\", \\\"☀\\\", \\\"●\\\", \\\"○\\\", \\\"○\\\"}, \\n\\t\\t\\t{\\\"●\\\", \\\"○\\\", \\\"☼\\\", \\\"○\\\", \\\"○\\\"}, \\n\\t\\t\\t{\\\"○\\\", \\\"●\\\", \\\"○\\\", \\\"☼\\\", \\\"○\\\"}, \\n\\t\\t\\t{\\\"○\\\", \\\"●\\\", \\\"○\\\", \\\"☀\\\", \\\"☀\\\"}}, battleship.board());\\n\\t\\tassertEquals(4, battleship.hits());\\n\\t\\tassertEquals(1, battleship.sunk());\\n\\t\\tassertEquals(6, battleship.points());\\n\\t\\tbattleship = null;\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test02() {\\n\\t\\tBattleship battleship = new Battleship(new String[] {\\\"A1\\\", \\\"C1\\\", \\\"B2\\\", \\\"B3\\\", \\\"D2\\\", \\\"E2\\\", \\\"E4\\\", \\\"E5\\\", \\\"A5\\\"}, new String[] {\\\"A2\\\", \\\"B4\\\", \\\"C1\\\", \\\"D3\\\", \\\"E5\\\", \\\"A5\\\"});\\n\\t\\tassertArrayEquals(new String[][] {\\n\\t\\t\\t{\\\"●\\\", \\\"☼\\\", \\\"○\\\", \\\"○\\\", \\\"☀\\\"}, \\n\\t\\t\\t{\\\"○\\\", \\\"●\\\", \\\"●\\\", \\\"☼\\\", \\\"○\\\"}, \\n\\t\\t\\t{\\\"☀\\\", \\\"○\\\", \\\"○\\\", \\\"○\\\", \\\"○\\\"}, \\n\\t\\t\\t{\\\"○\\\", \\\"●\\\", \\\"☼\\\", \\\"○\\\", \\\"○\\\"}, \\n\\t\\t\\t{\\\"○\\\", \\\"●\\\", \\\"○\\\", \\\"●\\\", \\\"☀\\\"}}, battleship.board());\\n\\t\\tassertEquals(3, battleship.hits());\\n\\t\\tassertEquals(0, battleship.sunk());\\n\\t\\tassertEquals(3, battleship.points());\\n\\t\\tbattleship = null;\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test03() {\\n\\t\\tBattleship battleship = new Battleship(new String[] {\\\"A1\\\", \\\"C1\\\", \\\"B2\\\", \\\"B3\\\", \\\"D2\\\", \\\"E2\\\", \\\"E4\\\", \\\"E5\\\", \\\"A5\\\"}, new String[] {\\\"A1\\\", \\\"B1\\\", \\\"D1\\\", \\\"E1\\\", \\\"A3\\\", \\\"A4\\\"});\\n\\t\\tassertArrayEquals(new String[][] {\\n\\t\\t\\t{\\\"☀\\\", \\\"○\\\", \\\"☼\\\", \\\"☼\\\", \\\"●\\\"}, \\n\\t\\t\\t{\\\"☼\\\", \\\"●\\\", \\\"●\\\", \\\"○\\\", \\\"○\\\"}, \\n\\t\\t\\t{\\\"●\\\", \\\"○\\\", \\\"○\\\", \\\"○\\\", \\\"○\\\"}, \\n\\t\\t\\t{\\\"☼\\\", \\\"●\\\", \\\"○\\\", \\\"○\\\", \\\"○\\\"}, \\n\\t\\t\\t{\\\"☼\\\", \\\"●\\\", \\\"○\\\", \\\"●\\\", \\\"●\\\"}}, battleship.board());\\n\\t\\tassertEquals(1, battleship.hits());\\n\\t\\tassertEquals(0, battleship.sunk());\\n\\t\\tassertEquals(1, battleship.points());\\n\\t\\tbattleship = null;\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test04() {\\n\\t\\tBattleship battleship = new Battleship(new String[] {\\\"A1\\\", \\\"B1\\\", \\\"D1\\\", \\\"E1\\\", \\\"A3\\\", \\\"A4\\\", \\\"D3\\\", \\\"E4\\\", \\\"D5\\\"}, new String[] {\\\"A1\\\", \\\"B2\\\", \\\"C3\\\", \\\"D4\\\", \\\"E5\\\", \\\"E4\\\"});\\n\\t\\tassertArrayEquals(new String[][] {\\n\\t\\t\\t{\\\"☀\\\", \\\"○\\\", \\\"●\\\", \\\"●\\\", \\\"○\\\"}, \\n\\t\\t\\t{\\\"●\\\", \\\"☼\\\", \\\"○\\\", \\\"○\\\", \\\"○\\\"}, \\n\\t\\t\\t{\\\"○\\\", \\\"○\\\", \\\"☼\\\", \\\"○\\\", \\\"○\\\"}, \\n\\t\\t\\t{\\\"●\\\", \\\"○\\\", \\\"●\\\", \\\"☼\\\", \\\"●\\\"}, \\n\\t\\t\\t{\\\"●\\\", \\\"○\\\", \\\"○\\\", \\\"☀\\\", \\\"☼\\\"}}, battleship.board());\\n\\t\\tassertEquals(2, battleship.hits());\\n\\t\\tassertEquals(0, battleship.sunk());\\n\\t\\tassertEquals(2, battleship.points());\\n\\t\\tbattleship = null;\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test05() {\\n\\t\\tBattleship battleship = new Battleship(new String[] {\\\"A1\\\", \\\"B1\\\", \\\"D1\\\", \\\"E1\\\", \\\"A3\\\", \\\"A4\\\", \\\"D3\\\", \\\"E4\\\", \\\"D5\\\"}, new String[] {\\\"A2\\\", \\\"B4\\\", \\\"C1\\\", \\\"D3\\\", \\\"E5\\\", \\\"A5\\\"});\\n\\t\\tassertArrayEquals(new String[][] {\\n\\t\\t\\t{\\\"●\\\", \\\"☼\\\", \\\"●\\\", \\\"●\\\", \\\"☼\\\"}, \\n\\t\\t\\t{\\\"●\\\", \\\"○\\\", \\\"○\\\", \\\"☼\\\", \\\"○\\\"}, \\n\\t\\t\\t{\\\"☼\\\", \\\"○\\\", \\\"○\\\", \\\"○\\\", \\\"○\\\"}, \\n\\t\\t\\t{\\\"●\\\", \\\"○\\\", \\\"☀\\\", \\\"○\\\", \\\"●\\\"}, \\n\\t\\t\\t{\\\"●\\\", \\\"○\\\", \\\"○\\\", \\\"●\\\", \\\"☼\\\"}}, battleship.board());\\n\\t\\tassertEquals(1, battleship.hits());\\n\\t\\tassertEquals(0, battleship.sunk());\\n\\t\\tassertEquals(1, battleship.points());\\n\\t\\tbattleship = null;\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test06() {\\n\\t\\tBattleship battleship = new Battleship(new String[] {\\\"A1\\\", \\\"B1\\\", \\\"D1\\\", \\\"E1\\\", \\\"A3\\\", \\\"A4\\\", \\\"D3\\\", \\\"E4\\\", \\\"D5\\\"}, new String[] {\\\"A1\\\", \\\"B1\\\", \\\"D1\\\", \\\"E1\\\", \\\"A3\\\", \\\"A4\\\"});\\n\\t\\tassertArrayEquals(new String[][] {\\n\\t\\t\\t{\\\"☀\\\", \\\"○\\\", \\\"☀\\\", \\\"☀\\\", \\\"○\\\"}, \\n\\t\\t\\t{\\\"☀\\\", \\\"○\\\", \\\"○\\\", \\\"○\\\", \\\"○\\\"}, \\n\\t\\t\\t{\\\"○\\\", \\\"○\\\", \\\"○\\\", \\\"○\\\", \\\"○\\\"}, \\n\\t\\t\\t{\\\"☀\\\", \\\"○\\\", \\\"●\\\", \\\"○\\\", \\\"●\\\"}, \\n\\t\\t\\t{\\\"☀\\\", \\\"○\\\", \\\"○\\\", \\\"●\\\", \\\"○\\\"}}, battleship.board());\\n\\t\\tassertEquals(6, battleship.hits());\\n\\t\\tassertEquals(3, battleship.sunk());\\n\\t\\tassertEquals(12, battleship.points());\\n\\t\\tbattleship = null;\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test07() {\\n\\t\\tBattleship battleship = new Battleship(new String[] {\\\"A2\\\", \\\"A4\\\", \\\"C1\\\", \\\"C2\\\", \\\"E3\\\", \\\"C4\\\", \\\"C5\\\", \\\"D3\\\", \\\"E5\\\"}, new String[] {\\\"A1\\\", \\\"B2\\\", \\\"C3\\\", \\\"D4\\\", \\\"E5\\\", \\\"E4\\\"});\\n\\t\\tassertArrayEquals(new String[][] {\\n\\t\\t\\t{\\\"☼\\\", \\\"●\\\", \\\"○\\\", \\\"●\\\", \\\"○\\\"}, \\n\\t\\t\\t{\\\"○\\\", \\\"☼\\\", \\\"○\\\", \\\"○\\\", \\\"○\\\"}, \\n\\t\\t\\t{\\\"●\\\", \\\"●\\\", \\\"☼\\\", \\\"●\\\", \\\"●\\\"}, \\n\\t\\t\\t{\\\"○\\\", \\\"○\\\", \\\"●\\\", \\\"☼\\\", \\\"○\\\"}, \\n\\t\\t\\t{\\\"○\\\", \\\"○\\\", \\\"●\\\", \\\"☼\\\", \\\"☀\\\"}}, battleship.board());\\n\\t\\tassertEquals(1, battleship.hits());\\n\\t\\tassertEquals(0, battleship.sunk());\\n\\t\\tassertEquals(1, battleship.points());\\n\\t\\tbattleship = null;\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test08() {\\n\\t\\tBattleship battleship = new Battleship(new String[] {\\\"A2\\\", \\\"A4\\\", \\\"C1\\\", \\\"C2\\\", \\\"E3\\\", \\\"C4\\\", \\\"C5\\\", \\\"D3\\\", \\\"E5\\\"}, new String[] {\\\"A2\\\", \\\"B4\\\", \\\"C1\\\", \\\"D3\\\", \\\"E5\\\", \\\"A5\\\"});\\n\\t\\tassertArrayEquals(new String[][] {\\n\\t\\t\\t{\\\"○\\\", \\\"☀\\\", \\\"○\\\", \\\"●\\\", \\\"☼\\\"}, \\n\\t\\t\\t{\\\"○\\\", \\\"○\\\", \\\"○\\\", \\\"☼\\\", \\\"○\\\"}, \\n\\t\\t\\t{\\\"☀\\\", \\\"●\\\", \\\"○\\\", \\\"●\\\", \\\"●\\\"}, \\n\\t\\t\\t{\\\"○\\\", \\\"○\\\", \\\"☀\\\", \\\"○\\\", \\\"○\\\"}, \\n\\t\\t\\t{\\\"○\\\", \\\"○\\\", \\\"●\\\", \\\"○\\\", \\\"☀\\\"}}, battleship.board());\\n\\t\\tassertEquals(4, battleship.hits());\\n\\t\\tassertEquals(0, battleship.sunk());\\n\\t\\tassertEquals(4, battleship.points());\\n\\t\\tbattleship = null;\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test09() {\\n\\t\\tBattleship battleship = new Battleship(new String[] {\\\"A2\\\", \\\"A4\\\", \\\"C1\\\", \\\"C2\\\", \\\"E3\\\", \\\"C4\\\", \\\"C5\\\", \\\"D3\\\", \\\"E5\\\"}, new String[] {\\\"A1\\\", \\\"B1\\\", \\\"D1\\\", \\\"E1\\\", \\\"A3\\\", \\\"A4\\\"});\\n\\t\\tassertArrayEquals(new String[][] {\\n\\t\\t\\t{\\\"☼\\\", \\\"●\\\", \\\"☼\\\", \\\"☀\\\", \\\"○\\\"}, \\n\\t\\t\\t{\\\"☼\\\", \\\"○\\\", \\\"○\\\", \\\"○\\\", \\\"○\\\"}, \\n\\t\\t\\t{\\\"●\\\", \\\"●\\\", \\\"○\\\", \\\"●\\\", \\\"●\\\"}, \\n\\t\\t\\t{\\\"☼\\\", \\\"○\\\", \\\"●\\\", \\\"○\\\", \\\"○\\\"}, \\n\\t\\t\\t{\\\"☼\\\", \\\"○\\\", \\\"●\\\", \\\"○\\\", \\\"●\\\"}}, battleship.board());\\n\\t\\tassertEquals(1, battleship.hits());\\n\\t\\tassertEquals(0, battleship.sunk());\\n\\t\\tassertEquals(1, battleship.points());\\n\\t\\tbattleship = null;\\n\\t}\\n}\\n//end of tests\",\"language\":\"java\",\"quality\":0,\"summary\":\"Build a Class that will store and manipulate the data of a simplified clone of the popular strategy game, Battleship.\\n\\nThe game is played on a 5x5-sized board. The rows of the grid are identified by the uppercase letters A to E (top to bottom), and the columns are identified by the numbers 1 to 5 (left to right).\\n\\nRules of the Game\\nThere are two types of ship:\",\"tags\":[\"classes\",\"arrays\",\"data_structures\",\"games\"],\"timestamp\":{\"$date\":1605975261565},\"title\":\"Do Classes Dream Of Electric Ship?\",\"stats\":{\"completed\":{\"total\":10,\"ratings\":[4,4,4,4,4,3,5,2,4,2,5,0,5,1],\"quality\":[],\"rators\":[\"vG7HBZ22E6Jv8oiEh\",\"a777e8chPvJkY3tKa\",\"gXTAie79kiw28tx5u\",\"Mw8yqSDFdQui28w5N\",\"YNR2PAWqhpSMexy47\",\"pqQ3NsxT5vD4B8zqB\",\"LNCb5rksJLJ43L4Nw\",\"5etxnWM9LfbDDW9A6\",\"uw47663LqPME8btaA\"]},\"flags\":0},\"editorId\":\"a777e8chPvJkY3tKa\",\"family\":[{\"_id\":\"Y6hNbTncED6dp6gFu\",\"language\":\"java\"},{\"_id\":\"pbeqf95r3H4PRQKJr\",\"language\":\"javascript\"},{\"_id\":\"pN7iSYmghjdnHiMvT\",\"language\":\"python3\"}]}}"]