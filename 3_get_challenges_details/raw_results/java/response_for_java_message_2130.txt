a["{\"msg\":\"result\",\"id\":\"622\",\"result\":{\"_id\":\"5RvoqBgeykwy2Xqdb\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class LetterGroups {\\n\\tpublic static String[] collect(String s, int n) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":2.2580645161290325,\"editorId\":\"a777e8chPvJkY3tKa\",\"familyId\":\"SQbWpGWt6NwGW7wnN\",\"instructions\":\"Write a function that returns an array of strings populated from the slices of **n-length** characters of the given word (a slice after another while **n-length** applies onto the word).\\n\\n### Examples\\n```\\ncollect(\\\"intercontinentalisationalism\\\", 6)\\n➞ [\\\"ationa\\\", \\\"interc\\\", \\\"ntalis\\\", \\\"ontine\\\"]\\n\\ncollect(\\\"strengths\\\", 3)\\n➞ [\\\"eng\\\", \\\"str\\\", \\\"ths\\\"]\\n\\ncollect(\\\"pneumonoultramicroscopicsilicovolcanoconiosis\\\", 15)\\n➞ [\\\"croscopicsilico\\\", \\\"pneumonoultrami\\\", \\\"volcanoconiosis\\\"]\\n```\\n\\n### Notes\\n- Ensure that the resulting array is lexicographically ordered.\\n- Return an **empty** array if the *given string* is less than `n`.\\n- Try to solve this challenge using **Java Streams API** in lieu of custom loops.\\n- A **recursive** version of this challenge can be found via this [link](https://edabit.com/challenge/DbqdoQDMv88NHSgi4).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"/** \\n================================= \\nTestGen 3.1 for JUnit 4.13.0 \\t\\t\\nTest Case: LetterGroups::collect \\nTimestamp: 10/17/2020 03:54:46 AM \\n--------------------------------- \\n® DARKKO 2021 © \\n================================= \\n\\n**/ \\n\\nimport static org.junit.Assert.assertArrayEquals; \\nimport org.junit.Test; \\n\\npublic class LetterGroupsTest { \\n\\t\\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertArrayEquals(new String[] {\\\"ationa\\\", \\\"interc\\\", \\\"ntalis\\\", \\\"ontine\\\"}, LetterGroups.collect(\\\"intercontinentalisationalism\\\", 6));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertArrayEquals(new String[] {\\\"eng\\\", \\\"str\\\", \\\"ths\\\"}, LetterGroups.collect(\\\"strengths\\\", 3));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertArrayEquals(new String[] {\\\"croscopicsilico\\\", \\\"pneumonoultrami\\\", \\\"volcanoconiosis\\\"}, LetterGroups.collect(\\\"pneumonoultramicroscopicsilicovolcanoconiosis\\\", 15));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertArrayEquals(new String[] {\\\"aphi\\\", \\\"call\\\", \\\"cogr\\\", \\\"lexi\\\"}, LetterGroups.collect(\\\"lexicographically\\\", 4));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertArrayEquals(new String[] {\\\"anesth\\\", \\\"esiolo\\\"}, LetterGroups.collect(\\\"anesthesiologists\\\", 6));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertArrayEquals(new String[] {\\\"matogl\\\", \\\"subder\\\"}, LetterGroups.collect(\\\"subdermatoglyphic\\\", 6));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertArrayEquals(new String[] {\\\"pedali\\\", \\\"sesqui\\\"}, LetterGroups.collect(\\\"sesquipedalianism\\\", 6));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertArrayEquals(new String[] {\\\"ect\\\", \\\"ion\\\", \\\"oll\\\", \\\"rec\\\"}, LetterGroups.collect(\\\"recollection\\\", 3));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test09() { \\n\\t\\tassertArrayEquals(new String[] {\\\"hyroidi\\\", \\\"poparat\\\", \\\"pseudop\\\", \\\"seudohy\\\"}, LetterGroups.collect(\\\"pseudopseudohypoparathyroidism\\\", 7));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() { \\n\\t\\tassertArrayEquals(new String[] {\\\"at\\\", \\\"ci\\\", \\\"fl\\\", \\\"ic\\\", \\\"if\\\", \\\"ih\\\", \\\"il\\\", \\\"il\\\", \\\"in\\\", \\\"io\\\", \\\"ip\\\", \\\"na\\\", \\\"oc\\\", \\\"uc\\\"}, LetterGroups.collect(\\\"floccinaucinihilipilification\\\", 2));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test11() { \\n\\t\\tassertArrayEquals(new String[] {\\\"ablis\\\", \\\"antid\\\", \\\"arian\\\", \\\"hment\\\", \\\"isest\\\"}, LetterGroups.collect(\\\"antidisestablishmentarianism\\\", 5));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test12() { \\n\\t\\tassertArrayEquals(new String[] {\\\"ali\\\", \\\"ali\\\", \\\"doc\\\", \\\"erc\\\", \\\"fra\\\", \\\"gil\\\", \\\"ice\\\", \\\"iou\\\", \\\"ist\\\", \\\"sup\\\", \\\"xpi\\\"}, LetterGroups.collect(\\\"supercalifragilisticexpialidocious\\\", 3));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test13() { \\n\\t\\tassertArrayEquals(new String[] {\\\"ensibilit\\\", \\\"incompreh\\\"}, LetterGroups.collect(\\\"incomprehensibilities\\\", 9));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test14() { \\n\\t\\tassertArrayEquals(new String[] {\\\"astr\\\", \\\"ophy\\\", \\\"sici\\\"}, LetterGroups.collect(\\\"astrophysicists\\\", 4));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test15() { \\n\\t\\tassertArrayEquals(new String[] {\\\"honorificabi\\\", \\\"litudinitati\\\"}, LetterGroups.collect(\\\"honorificabilitudinitatibus\\\", 12));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test16() { \\n\\t\\tassertArrayEquals(new String[] {\\\"unimagin\\\"}, LetterGroups.collect(\\\"unimaginatively\\\", 8));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test17() { \\n\\t\\tassertArrayEquals(new String[] {}, LetterGroups.collect(\\\"euouae\\\", 7));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test18() { \\n\\t\\tassertArrayEquals(new String[] {\\\"tsktsk\\\"}, LetterGroups.collect(\\\"tsktsk\\\", 6));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test19() { \\n\\t\\tassertArrayEquals(new String[] {\\\"uncopyright\\\"}, LetterGroups.collect(\\\"uncopyrightable\\\", 11));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test20() { \\n\\t\\tassertArrayEquals(new String[] {\\\"har\\\", \\\"ing\\\", \\\"pen\\\", \\\"tes\\\"}, LetterGroups.collect(\\\"tesharpening\\\", 3));\\n\\t}\\n\\n\\t\\n\\t@Test\\n\\tpublic void test21() { \\n\\t\\tassertArrayEquals(new String[] {\\\"holic\\\", \\\"tesha\\\"}, LetterGroups.collect(\\\"teshaholic\\\", 5));\\n\\t}\\n\\n}\\n// end of tests\",\"language\":\"java\",\"quality\":0,\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,4,1,3,2,3,1,3,3,3,0,2,5,3,1,3,3,0,0,2,2,3,2,4,2,3],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"Es4eX2stRpyoXeC7f\",\"rehehi2Tr2mwaEoJE\",\"DzvdGwHEjqsX7wyKr\",\"gXTAie79kiw28tx5u\",\"yXGiiSAR5nBHnH3yr\",\"mQKWauR6b252TmdX4\",\"hD6sfDtntpqT8NR2o\",\"HqHwywTDwCoQQcZko\",\"MBB7P2iY7QWp3MuoM\",\"NRcES4Fvey4SWLRCA\",\"RGN3QTb5LXj4ZPPkj\",\"nHj7SC5cnmkTApbgY\",\"jyoLggHk8xQKZuoQC\",\"GaJNJwcdyB9ueYFst\",\"buX4mCQhtXCfBjeno\",\"qaPjAANdnxFnWfj5d\",\"4za87fFyw9qxkD936\",\"jCjCvyhqhpebkJn34\",\"sxci7DYKNa6q22Sjq\",\"wFRLGjA56kj7xyhmv\",\"KMR6vNzvSKMA2cXnK\",\"htXCitorobtqYymjN\",\"pRRqeC463QX4THQty\",\"a49eNnfRwSMxsDJXf\",\"rWhXHhzF4W8bea6LP\"],\"total\":28},\"flags\":0},\"summary\":\"Write a function that returns an array of strings populated from the slices of n-length characters of the given word (a slice after another while n-length applies onto the word).\\n\\nExamples\\ncollect(\\\"intercontinentalisationalism\\\", 6)\\n➞ [\\\"ationa\\\", \\\"interc\\\", \\\"ntalis\\\", \\\"ontine\\\"]\\n\\ncollect(\\\"strengths\\\", 3)\\n➞ [\\\"eng\\\", \\\"str\\\", \\\"ths\\\"]\\n\\ncollect(\\\"pneumonoultramicroscopicsili\",\"tags\":[\"arrays\",\"sorting\",\"strings\"],\"timestamp\":{\"$date\":1602882156298},\"title\":\"N-Length Letter Groups\",\"family\":[{\"_id\":\"5RvoqBgeykwy2Xqdb\",\"language\":\"java\"},{\"_id\":\"A8GLfBCjWv6TvpsGr\",\"language\":\"javascript\"},{\"_id\":\"3W2TRbuD2cnBoXuby\",\"language\":\"python3\"}]}}"]