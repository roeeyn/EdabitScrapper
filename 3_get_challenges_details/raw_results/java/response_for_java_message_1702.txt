a["{\"msg\":\"result\",\"id\":\"410\",\"result\":{\"_id\":\"p5PsoKc2z8QaYNjNG\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class HallMonitor {\\n\\tpublic static boolean possiblePath(Object[] t) {\\n\\t\\t\\n\\t}\\n}\\t\",\"difficulty\":1.5324675324675325,\"familyId\":\"QPpY4MLDHgm5mamrJ\",\"instructions\":\"A floor plan is arranged as follows:\\n- Four rooms, which all lead into the hallway.\\n- It's impossible to move between rooms without first going into the hallway.\\n\\n![Room](https://edabit-challenges.s3.amazonaws.com/hdUYysBhbdS.png)\\n\\nCreate a function which validates whether the path between rooms is possible. The hallway will be given as the letter `\\\"H\\\"`.\\n\\n### Examples\\n```\\npossiblePath([1, \\\"H\\\", 2, \\\"H\\\", 3, \\\"H\\\", 4]) ➞ true\\n\\npossiblePath([\\\"H\\\", 3, \\\"H\\\"]) ➞ true\\n\\npossiblePath([1, 2, \\\"H\\\", 3]) ➞ false\\n```\\n\\n### Notes\\n- A route may begin or end in a hallway.\\n- All inputs are either numbers 1-4, or the letter \\\"H\\\".\\n- No rooms will repeat.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"import static org.junit.Assert.assertEquals; \\nimport org.junit.Test; \\n\\npublic class HallMonitorTest {\\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertEquals(true, HallMonitor.possiblePath(new Object[] {1, \\\"H\\\", 2, \\\"H\\\", 3, \\\"H\\\", 4}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertEquals(true, HallMonitor.possiblePath(new Object[] {\\\"H\\\", 3, \\\"H\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertEquals(true, HallMonitor.possiblePath(new Object[] {\\\"H\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertEquals(true, HallMonitor.possiblePath(new Object[] {3}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertEquals(false, HallMonitor.possiblePath(new Object[] {1, 2, \\\"H\\\", 3}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertEquals(false, HallMonitor.possiblePath(new Object[] {\\\"H\\\", 1, 3}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertEquals(false, HallMonitor.possiblePath(new Object[] {2, 4, \\\"H\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertEquals(true, HallMonitor.possiblePath(new Object[] {1, \\\"H\\\", 1, \\\"H\\\", 1, \\\"H\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test09() { \\n\\t\\tassertEquals(true, HallMonitor.possiblePath(new Object[] {3, \\\"H\\\", 2, \\\"H\\\", 3, \\\"H\\\", 1}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() { \\n\\t\\tassertEquals(false, HallMonitor.possiblePath(new Object[] {\\\"H\\\", 2, \\\"H\\\", 3, 4, \\\"H\\\", 1, \\\"H\\\", 2, \\\"H\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test11() { \\n\\t\\tassertEquals(true, HallMonitor.possiblePath(new Object[] {3, \\\"H\\\", 1}));\\n\\t}\\n}\\n// credit goes to original author/publisher @Joshua Señoron\",\"language\":\"java\",\"quality\":0,\"summary\":\"A floor plan is arranged as follows:\\nFour rooms, which all lead into the hallway.\\nIt's impossible to move between rooms without first going into the hallway.\\n\\nRoom\\n\\nCreate a function which validates whether the path between rooms is possible. The hallway will be given as the letter \\\"H\\\".\\n\\nExamples\\npossiblePath([1, \\\"H\\\", 2, \\\"H\\\", 3, \\\"H\\\", 4]) ➞ true\\n\\npossiblePath([\",\"tags\":[\"loops\",\"algorithms\",\"validation\"],\"timestamp\":{\"$date\":1612395917303},\"title\":\"Hall Monitor\",\"stats\":{\"completed\":{\"total\":75,\"ratings\":[1,1,1,1,1,1,1,1,0,1,0,1,1,0,2,0,1,2,2,0,2,1,3,2,1,0,2,2,3,1,0,1,0,1,2,2,3,3,2,2,1,2,2,2,2,2,1,2,1,1,4,2,2,1,2,2,1,3,2,3,2,2,0,1,3,0,1,2,0,2,3,2,2,1,2,3,3],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"Es4eX2stRpyoXeC7f\",\"9vyjn4WyWtJ6o2wop\",\"AeJSxRqw2dJZuGvdk\",\"hhxjQREtmHSheH9Pj\",\"gBGjCfJvPHswDM5JQ\",\"a49eNnfRwSMxsDJXf\",\"qaPjAANdnxFnWfj5d\",\"btabi3PdyisuY5tn9\",\"HCfkcKnPs9mrJojdG\",\"82weQfHHmno4Mq4X7\",\"8qNSPHZBpmjSTt3tH\",\"jyoLggHk8xQKZuoQC\",\"mDWNyaaQ9hvPCRzSd\",\"a6fgDQTddtZCKfnzR\",\"wAJXjeQ7MntZmZsJ6\",\"Ag5fRrZ9MrAZc9vpj\",\"Kcnk6Wzp6E2YN8Tqp\",\"p8Q29Z49dtYtkN3QE\",\"3SgSNoAB3sxaYeT3w\",\"t55QWHi8o4teZxqqE\",\"AmSZRgeCJ3D5cea42\",\"thdSyxjac9jSYPoqN\",\"zZfMwLuoERGmybgib\",\"buX4mCQhtXCfBjeno\",\"3K5gwMHrxuWR5P3sm\",\"c7uBxu2rgY77H5d79\",\"vRXuYYBNuHEQ29fbm\",\"sxci7DYKNa6q22Sjq\",\"RBjTdBYHmyoPMvAow\",\"pYonfGP4u9HNL9Z32\",\"mG8HqKiAQFTdRZthG\",\"mwCevFK3TmHpw6J6N\",\"uw47663LqPME8btaA\",\"GvLLKHi7NwAjutdDk\",\"G9u8GAYYqQKSPwa5i\",\"kzStpZqgwmSvH8DSs\",\"ASAPXXB3EkYhdaFBY\",\"e4jWeRW5xSbmqkxP2\",\"c4aLTCDHTvXhYh9Xp\",\"LmaN49MdzYTbbZjTg\",\"wFRLGjA56kj7xyhmv\",\"THPpsQQeztzCue6uh\",\"QyJn8axbkgXJ9fKTp\",\"CggGfsERnPKGupFWp\",\"7NMcBSYCZ4eWKWvNh\",\"e8CoxavSXFENMcis2\",\"D49KybvhAEwK2iDRK\",\"KnjLZKZxhWwdbfPEK\",\"7Fk3NHfzvKeaq3E29\",\"HsFc9PgmpP2X9Fwh9\",\"4RcpoKza7dfxE84bW\",\"xBQC5uQdx6WndJ3iM\",\"6rvJwN4mcX7iYGjY7\",\"osRNCTvFE8WJ57S6x\",\"srJ34BaybkQh3qRkM\",\"gXTAie79kiw28tx5u\",\"J9zJq7PMGb6mqzcHW\",\"a7NwjdLTMgHZS72fA\",\"htXCitorobtqYymjN\",\"NYpyNjPjtdpXaMeQY\",\"B4pxRqzo43M7S8FbP\",\"jCjCvyhqhpebkJn34\",\"J7epB3qSQJ2E8vWkY\",\"rWhXHhzF4W8bea6LP\",\"b9Tkkzxek5jj7eytm\",\"KMR6vNzvSKMA2cXnK\",\"GRSgodNrGhekHtCun\",\"BR8xeTnDGevsCezyf\",\"unqzSsxpxj9sZ7rbD\",\"FxPDKKibxnZjGJLs6\",\"XH6378Zm3WBm679yx\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"p5PsoKc2z8QaYNjNG\",\"language\":\"java\"},{\"_id\":\"igaRcBWdqjik9oY7K\",\"language\":\"javascript\"},{\"_id\":\"gDZmSrySzmMZZRjcc\",\"language\":\"php\"},{\"_id\":\"G2QnBrxvpq9FacFuo\",\"language\":\"python3\"},{\"_id\":\"Yf4vRrs4AMq9KTFo9\",\"language\":\"ruby\"}]}}"]