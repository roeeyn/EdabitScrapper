a["{\"msg\":\"result\",\"id\":\"346\",\"result\":{\"_id\":\"xLHemSaX8jAc6Tyz9\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class HarshadNumber {\\n\\tpublic static boolean isHarshad(int n) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":1.4931506849315068,\"quality\":4.857142857142857,\"editorId\":\"a777e8chPvJkY3tKa\",\"familyId\":\"pYH85aFQeZjFWgqa5\",\"instructions\":\"A number is said to be **Harshad** if it's *exactly divisible* by the **sum** of its digits. Create a function that determines whether a number is a Harshad or not.\\n\\n### Examples\\n```\\nisHarshad(75) ➞ false\\n// 7 + 5 = 12\\n// 75 is not exactly divisible by 12\\n\\nisHarshad(171) ➞ true\\n// 1 + 7 + 1 = 9\\n// 9 exactly divides 171\\n\\nisHarshad(481) ➞ true\\n\\nisHarshad(89) ➞ false\\n\\nisHarshad(516) ➞ true\\n\\nisHarshad(200) ➞ true\\n```\\n\\n### Notes\\n- A recursive version of this challenge can be found [here](https://edabit.com/challenge/sjsHWXs7fNStCdrNr).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"import static org.junit.Assert.assertEquals;\\nimport org.junit.Test;\\n\\npublic class HarshadNumberTests {\\n\\tprivate int[] numVector = new int[] {75, 171, 481, 89, 516, 200, 209, 12345, 53, 27};\\n\\tprivate boolean[] resVector = new boolean[] {false, true, true, false, true, true, true, true, false, true};\\n\\n\\t@Test\\n\\tpublic void test01() {\\n\\t\\tassertEquals(HarshadNumber.isHarshad(numVector[0]), resVector[0]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test02() {\\n\\t\\tassertEquals(HarshadNumber.isHarshad(numVector[1]), resVector[1]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test03() {\\n\\t\\tassertEquals(HarshadNumber.isHarshad(numVector[2]), resVector[2]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test04() {\\n\\t\\tassertEquals(HarshadNumber.isHarshad(numVector[3]), resVector[3]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test05() {\\n\\t\\tassertEquals(HarshadNumber.isHarshad(numVector[4]), resVector[4]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test06() {\\n\\t\\tassertEquals(HarshadNumber.isHarshad(numVector[5]), resVector[5]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test07() {\\n\\t\\tassertEquals(HarshadNumber.isHarshad(numVector[6]), resVector[6]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test08() {\\n\\t\\tassertEquals(HarshadNumber.isHarshad(numVector[7]), resVector[7]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test09() {\\n\\t\\tassertEquals(HarshadNumber.isHarshad(numVector[8]), resVector[8]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test10() {\\n\\t\\tassertEquals(HarshadNumber.isHarshad(numVector[9]), resVector[9]);\\n\\t}\\n}\",\"language\":\"java\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,3,1,2,1,1,1,1,2,2,2,3,2,1,2,3,2,0,2,1,2,0,2,2,0,1,1,3,1,1,2,1,2,2,1,1,2,2,1,0,2,0,0,1,0,1,1,2,2,2,0,2,2,1,2,0,1,3,2,1,1,2,2,2,2,1,1,2],\"quality\":[4,5,5,5,5,5,5],\"rators\":[\"a777e8chPvJkY3tKa\",\"Es4eX2stRpyoXeC7f\",\"azAzSkvJd7eyXY9x9\",\"uYwg3vF7jaASNo7oq\",\"rehehi2Tr2mwaEoJE\",\"PCJeoBjCkf2ohbFtE\",\"6QHXQkQAcXMJ7C2kK\",\"Pxv23QsobqWPvMDKm\",\"Fdq6CxMWZL8WZiNaM\",\"qaPjAANdnxFnWfj5d\",\"yXGiiSAR5nBHnH3yr\",\"DzvdGwHEjqsX7wyKr\",\"8X3noJctwEu2rTshK\",\"kabqCExooax4JEQHE\",\"gXTAie79kiw28tx5u\",\"bWWFscsAr66ZWHo28\",\"Ym8AjbKGSJooun3nt\",\"dPeaG87LMdYeD5xLB\",\"TrquEHytntLKHA4m2\",\"etoSR23iELGGgs9rA\",\"jb9RLyyuo565bKDzN\",\"8Xx8nWXRydHDBGfQf\",\"jyoLggHk8xQKZuoQC\",\"jXTnL3JatkKjoifyb\",\"Nb6LYPoQP6KJZt8mz\",\"cvr6YL5nEJcMon484\",\"4FYe2Q6Gh47nj2XPP\",\"4wgTPRfLwt6Gmeci7\",\"oMZovHkR6QqNvQwyc\",\"btabi3PdyisuY5tn9\",\"vRXuYYBNuHEQ29fbm\",\"82weQfHHmno4Mq4X7\",\"buX4mCQhtXCfBjeno\",\"a49eNnfRwSMxsDJXf\",\"bur3yQ8s34zqKGEro\",\"rhS8qXRjZcpDXkwnE\",\"mG8HqKiAQFTdRZthG\",\"4ySzqKC5s3ZRpG9di\",\"GpXpLCQwaAvbGhQ7L\",\"srJ34BaybkQh3qRkM\",\"vAB6NkBprW89ksCQS\",\"wFRLGjA56kj7xyhmv\",\"xEX3TDY6C2h82dJTn\",\"htXCitorobtqYymjN\",\"gPdbtP7u7MSZ393MC\",\"sxci7DYKNa6q22Sjq\",\"LHicpzijTpT9giZ6A\",\"KMR6vNzvSKMA2cXnK\",\"J9zJq7PMGb6mqzcHW\",\"G6NoPr4kkgye9iswL\",\"jCjCvyhqhpebkJn34\",\"B4pxRqzo43M7S8FbP\",\"hhxjQREtmHSheH9Pj\",\"PJu3WcTpfRrvHfQiS\",\"9xzk7TQqCRBWcMHu9\",\"563onSvqgjToY79ah\",\"6rvJwN4mcX7iYGjY7\",\"J7epB3qSQJ2E8vWkY\",\"a4dLesdChqyPP4Kez\",\"HsFc9PgmpP2X9Fwh9\",\"rWhXHhzF4W8bea6LP\",\"unqzSsxpxj9sZ7rbD\",\"9ttuKgRkXr8nryMKC\",\"PH72vPpLrTMPhr2vq\",\"ByDfRqyoF63eKMHzR\",\"keJgCH4Xx9tA92uxu\",\"FxPDKKibxnZjGJLs6\",\"YLwJkF2wuL3n9o6a2\",\"eYHYzacm2S4tkzQw9\",\"bX6tpTCjwoi6XMMbK\",\"uw47663LqPME8btaA\",\"XH6378Zm3WBm679yx\",\"BZuLMKWysptQZaPvx\",\"5HGyJtoZ3AffzAZAv\",\"nFbmNzMQ38TncmfQX\"],\"total\":82},\"flags\":0},\"summary\":\"A number is said to be Harshad if it's exactly divisible by the sum of its digits. Create a function that determines whether a number is a Harshad or not.\\n\\nExamples\\nisHarshad(75) ➞ false\\n// 7 + 5 = 12\\n// 75 is not exactly divisible by 12\\n\\nisHarshad(171) ➞ true\\n// 1 + 7 + 1 = 9\\n// 9 exactly divides 171\\n\\nisHarshad(481) ➞ true\\n\\nisHarshad(89) ➞ false\\n\\nisHarshad(51\",\"tags\":[\"math\",\"numbers\",\"strings\",\"loops\"],\"timestamp\":{\"$date\":1601652726940},\"title\":\"Harshad Number\",\"family\":[{\"_id\":\"xLHemSaX8jAc6Tyz9\",\"language\":\"java\"},{\"_id\":\"Rrauvu8afRbjqPM8L\",\"language\":\"javascript\"},{\"_id\":\"eADRy5SA5QbasA3Qt\",\"language\":\"python3\"}]}}"]