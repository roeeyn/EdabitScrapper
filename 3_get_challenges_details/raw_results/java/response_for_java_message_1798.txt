a["{\"msg\":\"result\",\"id\":\"454\",\"result\":{\"_id\":\"fj6c32nSde3FfYoaC\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class RightShift {\\n\\tpublic static int shiftToRight(int x, int y) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":1.641025641025641,\"editorId\":\"a777e8chPvJkY3tKa\",\"familyId\":\"YMdNTA4uHb9AXbRYc\",\"instructions\":\"The **right shift** operation is similar to **floor division by powers of two**. \\n\\nSample calculation using the right shift operator ( `>>` ):\\n\\n```\\n80 >> 3 = floor(80/2^3) = floor(80/8) = 10\\n-24 >> 2 = floor(-24/2^2) = floor(-24/4) = -6\\n-5 >> 1 = floor(-5/2^1) = floor(-5/2) = -3\\n```\\n\\nWrite a function that **mimics** (without the use of **>>**) the right shift operator and returns the result from the two given integers.\\n\\n### Examples\\n```\\nshiftToRight(80, 3) ➞ 10\\n\\nshiftToRight(-24, 2) ➞ -6\\n\\nshiftToRight(-5, 1) ➞ -3\\n\\nshiftToRight(4666, 6) ➞ 72\\n\\nshiftToRight(3777, 6) ➞ 59\\n\\nshiftToRight(-512, 10) ➞ -1\\n```\\n\\n### Notes\\n- There will be no negative values for the second parameter `y`.\\n- This challenge is more like recreating of the **right shift** operation, thus, **the use of the operator directly** is **prohibited**.\\n- Alternatively, you can solve this challenge via recursion.\\n- A **recursive** version of this challenge can be found via this [link](https://edabit.com/challenge/j3pBTZLXSo7JJ2iAy).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"/** \\n=================================== \\nTestGen 3.1 for JUnit 4.13.0 \\t\\t\\nTest Case: RightShift::shiftToRight \\nTimestamp: 10/19/2020 05:47:06 PM \\n----------------------------------- \\n® DARKKO 2020 © \\n=================================== \\n\\n**/ \\n\\nimport static org.junit.Assert.assertEquals; \\nimport org.junit.Test; \\n\\npublic class RightShiftTest { \\n\\t\\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertEquals(10, RightShift.shiftToRight(80, 3));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertEquals(-6, RightShift.shiftToRight(-24, 2));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertEquals(-3, RightShift.shiftToRight(-5, 1));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertEquals(38, RightShift.shiftToRight(38, 0));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertEquals(12, RightShift.shiftToRight(192, 4));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertEquals(72, RightShift.shiftToRight(4666, 6));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertEquals(59, RightShift.shiftToRight(3777, 6));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertEquals(32, RightShift.shiftToRight(1024, 5));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test09() { \\n\\t\\tassertEquals(-1, RightShift.shiftToRight(-512, 10));\\n\\t}\\n\\n}\\n// end of tests\",\"language\":\"java\",\"quality\":0,\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,1,2,2,0,2,1,2,2,2,2,2,2,2,1,1,1,2,2,0,1,1,5,1,0,2,1,1,2,2,2,2,2,1],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"Es4eX2stRpyoXeC7f\",\"DrkR35NqnP9NDLbq6\",\"Zs2ozzZQJk6h88o3H\",\"Yp7uvStL97cC9fKkY\",\"gXTAie79kiw28tx5u\",\"etoSR23iELGGgs9rA\",\"TrquEHytntLKHA4m2\",\"azAzSkvJd7eyXY9x9\",\"jXTnL3JatkKjoifyb\",\"jyoLggHk8xQKZuoQC\",\"Nb6LYPoQP6KJZt8mz\",\"mDWNyaaQ9hvPCRzSd\",\"buX4mCQhtXCfBjeno\",\"mRMjjCx5PEbJTec2M\",\"qaPjAANdnxFnWfj5d\",\"a49eNnfRwSMxsDJXf\",\"mG8HqKiAQFTdRZthG\",\"rhS8qXRjZcpDXkwnE\",\"BjZ4cRjuSpBcMQa2d\",\"vPQ6fdfep2jBRhSKS\",\"J9zJq7PMGb6mqzcHW\",\"htXCitorobtqYymjN\",\"wFRLGjA56kj7xyhmv\",\"sxci7DYKNa6q22Sjq\",\"KMR6vNzvSKMA2cXnK\",\"xn9TxjNdLgif59wGA\",\"PJu3WcTpfRrvHfQiS\",\"unqzSsxpxj9sZ7rbD\",\"byLcacnySm4m8FaJv\",\"Zh9frR2TmtwRkzsbF\",\"FxPDKKibxnZjGJLs6\",\"jyjKaFsAbJXdTCePh\",\"uw47663LqPME8btaA\"],\"total\":36},\"flags\":0},\"summary\":\"The right shift operation is similar to floor division by powers of two.\\n\\nSample calculation using the right shift operator ( >> ):\\n\\n80 >> 3 = floor(80/2^3) = floor(80/8) = 10\\n-24 >> 2 = floor(-24/2^2) = floor(-24/4) = -6\\n-5 >> 1 = floor(-5/2^1) = floor(-5/2) = -3\\n\\nWrite a function that mimics (without the use of >>) the right shift operator and returns the re\",\"tags\":[\"bit_operations\",\"numbers\"],\"timestamp\":{\"$date\":1603102625300},\"title\":\"Right Shift by Division\",\"family\":[{\"_id\":\"fj6c32nSde3FfYoaC\",\"language\":\"java\"},{\"_id\":\"ALGbgMWLuEdrh22fB\",\"language\":\"javascript\"},{\"_id\":\"noqQNSr5o9qzvXWzL\",\"language\":\"python3\"}]}}"]