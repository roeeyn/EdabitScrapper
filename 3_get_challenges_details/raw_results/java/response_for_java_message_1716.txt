a["{\"msg\":\"result\",\"id\":\"417\",\"result\":{\"_id\":\"sRC7wLW7g6gw24Muq\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"public class Challenge {\\n\\tpublic static String missingLetter(String str) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":1.5576923076923077,\"familyId\":\"xTBwZ8GSjAFHWEQoG\",\"instructions\":\"Given a string of letters in the English alphabet, return the letter that's missing from the string. The missing letter will make the string be in alphabetical order (from A to Z).\\n\\nIf there are no missing letters in the string, return `\\\"No Missing Letter\\\"`.\\n\\n### Examples\\n```\\nmissingLetter(\\\"abdefg\\\") ➞ \\\"c\\\"\\n\\nmissingLetter(\\\"mnopqs\\\") ➞ \\\"r\\\"\\n\\nmissingLetter(\\\"tuvxyz\\\") ➞ \\\"w\\\"\\n\\nmissingLetter(\\\"ghijklmno\\\") ➞ \\\"No Missing Letter\\\"\\n```\\n\\n### Notes\\nThe given string will never have more than one missing letter.\",\"isHidden\":false,\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n  @Test\\n  public void test1() {\\n\\t\\tSystem.out.println(\\\"Example #1\\\");\\n    assertEquals(\\\"c\\\", Challenge.missingLetter(\\\"abdefg\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test2() {\\n\\t\\tSystem.out.println(\\\"Example #2\\\");\\n    assertEquals(\\\"r\\\", Challenge.missingLetter(\\\"mnopqs\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test3() {\\n\\t\\tSystem.out.println(\\\"Example #3\\\");\\n    assertEquals(\\\"w\\\", Challenge.missingLetter(\\\"tuvxyz\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test4() {\\n    assertEquals(\\\"k\\\", Challenge.missingLetter(\\\"jlm\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test5() {\\n    assertEquals(\\\"t\\\", Challenge.missingLetter(\\\"rsu\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test6() {\\n    assertEquals(\\\"f\\\", Challenge.missingLetter(\\\"eghij\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test7() {\\n    assertEquals(\\\"s\\\", Challenge.missingLetter(\\\"qrtuv\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test8() {\\n\\t\\tSystem.out.println(\\\"Example #4\\\");\\n    assertEquals(\\\"No Missing Letter\\\", Challenge.missingLetter(\\\"ghijklmno\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test9() {\\n    assertEquals(\\\"No Missing Letter\\\", Challenge.missingLetter(\\\"xyz\\\"));\\n  }\\n}\",\"language\":\"java\",\"summary\":\"Given a string of letters in the English alphabet, return the letter that's missing from the string. The missing letter will make the string be in alphabetical order (from A to Z).\\n\\nIf there are no missing letters in the string, return \\\"No Missing Letter\\\".\\n\\nExamples\\nmissingLetter(\\\"abdefg\\\") ➞ \\\"c\\\"\\n\\nmissingLetter(\\\"mnopqs\\\") ➞ \\\"r\\\"\\n\\nmissingLetter(\\\"tuvxyz\\\") ➞ \\\"w\\\"\\n\\nmi\",\"tags\":[\"loops\",\"strings\",\"validation\"],\"timestamp\":{\"$date\":1572555315955},\"title\":\"What's the Missing Letter?\",\"stats\":{\"completed\":{\"total\":127,\"ratings\":[1,1,1,1,1,0,0,1,0,0,2,1,2,2,1,1,1,1,1,1,1,3,1,1,1,2,2,1,3,2,2,2,2,2,2,0,0,2,2,5,2,2,2,2,2,2,2,2,0,2,2,1,3,3,2,2,3,3,2,2,2,1,1,0,1,1,2,2,2,1,1,1,2,2,2,1,2,0,3,1,2,2,2,1,1,2,2,1,2,3,1,1,2,1,2,1,1,0,2,1,2,2,2,2],\"rators\":[\"Yohr2MmAyaWGMbB35\",\"t2kdBPj9qQAXY2Ehd\",\"sxci7DYKNa6q22Sjq\",\"ZBDiEMi7dbjRL55LB\",\"3gxJoNp59B4eoyyed\",\"ZX3CM3MunZD2THxvs\",\"3pdgguqZgNDSAJSGm\",\"gBGjCfJvPHswDM5JQ\",\"dpeLk7HeaBeTY2ssZ\",\"ZBMrNJzyrimpBnTcW\",\"phA6MomRzh9oz3eqn\",\"W4jpCs2jekeg5qAwc\",\"sb7Nh56pPFtPxLogT\",\"XsstMe9BC3XYiEjrE\",\"pzz8vFouna6JTTAiW\",\"vMXAzjzvfPaM6NejG\",\"mgYRxark4oBjcz7Zm\",\"teCeoNkdeQEciPZ7H\",\"ho2xwFjGfg6WwQArS\",\"Eqt2WZ9iPdhM6Ma9Q\",\"tuw4ns5eG9WKzrddC\",\"tfs6uiysC8atFan4t\",\"a49eNnfRwSMxsDJXf\",\"WPWBKqdkzkeGpgFR2\",\"CLmJduqJHX83dM4Pd\",\"WHn374iJqrmFwqofS\",\"r9hHZYPQAqJ9DbwLX\",\"D3ASM3aWpcQ8gvnin\",\"qJZsi5rhRnWA38FbA\",\"FAEfq35fCKotwhHe6\",\"8J2Dqqz9PaFufQzwY\",\"vRXuYYBNuHEQ29fbm\",\"TZCTGPiBxSsW4oKae\",\"XPABiA5rmJcEZujY3\",\"ydDKd4GfcRoY8f4Cz\",\"q63ftpFKigNsDtCdv\",\"3KjxQu9RZ8ZSywvLz\",\"riY7SYcedzHYCW67d\",\"vuMBgKQRnA4HsuWjR\",\"kXEfD7xxEyWd7oxxL\",\"hzbZidzWcMgTYvat3\",\"k7X73S9g4ZEqtjk2K\",\"eXW8reZCCZHQzJjQi\",\"SfhMTK5ykctdKbCSp\",\"u4yanfWeeZsN3xWgc\",\"Apx556jZqyYGFRMkD\",\"8JyqsSbN2FJXPr3cw\",\"2cdvd8yuPLSwvGj9w\",\"CggGfsERnPKGupFWp\",\"J9zJq7PMGb6mqzcHW\",\"uw47663LqPME8btaA\",\"AyrEvM2GLX2jqM772\",\"C9yBWYcZsjmJYww3K\",\"Es4eX2stRpyoXeC7f\",\"4RHx3H8EwP2oboW8e\",\"JFodQijHHdRkkrZvT\",\"wYYMNPe8nSiJFbvJw\",\"hB5mgzMwQSnhBzi7P\",\"fZjkX29nhRTWWb75k\",\"82weQfHHmno4Mq4X7\",\"5seiNqw6ZXoF2GRRd\",\"Kso7rzAKB4TTCPKgM\",\"TrquEHytntLKHA4m2\",\"jyoLggHk8xQKZuoQC\",\"WZujpe8yQAyZmpWHg\",\"etoSR23iELGGgs9rA\",\"htXCitorobtqYymjN\",\"DRjqgdcSkz58yiqea\",\"y6kfyYmydcD8tkBk7\",\"DzvdGwHEjqsX7wyKr\",\"q2tzvkrLASvSjkek9\",\"rvojHhKH3DaxotefQ\",\"g4NCSxxHqHCGMpWwT\",\"jRqY4i8gPemsZMBGf\",\"Fd9765rksgPK4E2Zy\",\"Ym8AjbKGSJooun3nt\",\"YFHkjbM6obMSj24zi\",\"azAzSkvJd7eyXY9x9\",\"yXGiiSAR5nBHnH3yr\",\"gKkukxnE8JgbKfkHu\",\"gXTAie79kiw28tx5u\",\"jb9RLyyuo565bKDzN\",\"AeJSxRqw2dJZuGvdk\",\"rWhXHhzF4W8bea6LP\",\"8Xx8nWXRydHDBGfQf\",\"jXTnL3JatkKjoifyb\",\"BbcH2NLjE4tKAZ3wR\",\"mQKWauR6b252TmdX4\",\"7Gmsirn8y8goYzHAa\",\"RGN3QTb5LXj4ZPPkj\",\"bur3yQ8s34zqKGEro\",\"DkSMZ3jZLkwviKb9g\",\"buX4mCQhtXCfBjeno\",\"4ySzqKC5s3ZRpG9di\",\"c7uBxu2rgY77H5d79\",\"wFRLGjA56kj7xyhmv\",\"zZfMwLuoERGmybgib\",\"rhS8qXRjZcpDXkwnE\",\"7WQokYziBZFyBgXbv\",\"srJ34BaybkQh3qRkM\",\"jCjCvyhqhpebkJn34\",\"KMR6vNzvSKMA2cXnK\",\"B4pxRqzo43M7S8FbP\",\"hhxjQREtmHSheH9Pj\",\"y6u8RrAyrZGjpJBJA\",\"unqzSsxpxj9sZ7rbD\",\"XkTgEwY52g4xCScva\",\"JJFPy22rhWmioEDwN\",\"FxPDKKibxnZjGJLs6\",\"XH6378Zm3WBm679yx\",\"nFbmNzMQ38TncmfQX\"],\"quality\":[3,5,3,4,4,5,4,5,1,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":4.083333333333333,\"family\":[{\"_id\":\"iEpRoWcFgXZpDjgcc\",\"language\":\"cpp\"},{\"_id\":\"sRC7wLW7g6gw24Muq\",\"language\":\"java\"},{\"_id\":\"t6HFLEYD2e7ePxAu5\",\"language\":\"javascript\"},{\"_id\":\"Q5bu2bXxXxfWtvmjy\",\"language\":\"python3\"},{\"_id\":\"CwCa897m5r3DCviZX\",\"language\":\"ruby\"}]}}"]