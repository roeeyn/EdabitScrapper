a["{\"msg\":\"result\",\"id\":\"595\",\"result\":{\"_id\":\"q5tAZPFbLzuERDybw\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"public class Challenge {\\n\\tpublic static String happyAlgorithm(int num) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":2.215686274509804,\"familyId\":\"ZabXBMvQ95daB6rAZ\",\"instructions\":\"In this challenge, you have to implement an algorithm to establish if a given positive integer `num` is a Happy number, and how many steps of the algorithm are needed to establish it.\\n\\nYou have to repeatedly transform the given `num` into the sum of its squared digits:\\n- If after the transformation the new number is equal to `1`, `num` is a Happy number and the algorithm stops.\\n- If after the transformation, the new number is not equal to `1`, you have to transform it again.\\n\\n![Happy Numbers](https://edabit-challenges.s3.amazonaws.com/happyjcnc.png)\\n\\nIf a number can't be reduced to `1`, sooner or later the algorithm will enter into an infinitely repeating loop:\\n\\n```\\n... 20, 4, 16, 37, 58, 89, 145, 42, 20, 4 ...\\n```\\n\\nGiven a positive integer `num`, implement a function that returns:\\n- If `num` is a Happy number, the string `\\\"HAPPY x\\\"` with the \\\"**x**\\\" being the number of steps necessary to reduce `num` to 1.\\n- If `num` is not a Happy number, the string `\\\"SAD x\\\"` with the \\\"**x**\\\" being the number of steps necessary to enter into the infinite loop reaching so any number in the series `4, 16, 37, 58, 89, 145, 42, 20`, plus the number of steps necessary to obtain again that number.\\n\\nLook at the examples below for a better visualization.\\n\\n### Examples\\n```\\nhappyAlgorithm(139) ➞ \\\"HAPPY 5\\\"\\n\\n// Step 1: Transform 139\\n// 1² + 3² + 9² = 1 + 9 + 81 = 91\\n\\n// Step 2: Transform 91\\n// 9² + 1² = 81 + 1 = 82\\n\\n// Step 3: Transform 82\\n// 8² + 2² = 64 + 4 = 68\\n\\n// Step 4: Transform 68\\n// 6² + 8² = 36 + 64 = 100\\n\\n// Step 5: Transform 100\\n// 1² + 0² + 0² = 1 + 0 + 0 = 1\\n\\n// The algorithm stops at step 5: 139 is a Happy number\\n\\nhappyAlgorithm(67) ➞ \\\"SAD 10\\\"\\n\\n// Step 1: Transform 67\\n// 6² + 7² = 36 + 49 = 85\\n\\n// Step 2: Transform 85\\n// 8² + 5² = 64 + 25 = 89\\n// It entered into the infinite loop...\\n// ...but we have to demonstrate that is a loop!\\n\\n// Step 3: Transform 89\\n// 8² + 9² = 64 + 81 = 145\\n\\n// Step 4: Transform 145: result is 42\\n// Step 5: Transform 42: result is 20\\n// Step 6: Transform 20: result is 4\\n// Step 7: Transform 4: result is 16\\n// Step 8: Transform 16: result is 37\\n// Step 9: Transform 37: result is 58\\n// Step 10: Transform 58: result is 89\\n\\n// 89 was the result of step 2: it's a loop\\n// The algorithm stops at step 10: 67 is not a Happy number\\n\\nhappyAlgorithm(1) ➞ \\\"HAPPY 1\\\"\\n\\n// Step 1: Transform 1\\n// 1² = 1\\n\\n// The algorithm stops at step 1: 1 is a Happy number\\n\\nhappyAlgorithm(89) ➞ \\\"SAD 8\\\"\\n\\n// Step 1: Transform 89: result is 145\\n// Step 2: Transform 145: result is 42\\n// Step 3: Transform 42: result is 20\\n// Step 4: Transform 20: result is 4\\n// Step 5: Transform 4: result is 16\\n// Step 6: Transform 16: result is 37\\n// Step 7: Transform 37: result is 58\\n// Step 8: Transform 58: result is 89\\n\\n// 89 was the original number: it's a loop\\n// The algorithm stops at step 8: 89 is not a Happy number\\n```\\n\\n### Notes\\n- The transformation of a single-digit number is, trivially, the square of the digit (see example #3).\\n- If the given number is `1`, a step is needed to establish if it's Happy (see example #3).\\n- To establish if a number is not happy, you have to find the number of steps necessary to obtain again a number already found (it can be a number obtained through a transformation as in example #2 or the same given number as in example #4).\\n- You can expect only positive integers as input, without exceptions to handle.\",\"isHidden\":false,\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n  @Test\\n  public void test1() {\\n    assertEquals(\\\"HAPPY 5\\\", Challenge.happyAlgorithm(139));\\n  }\\n\\t\\n\\t@Test\\n  public void test2() {\\n    assertEquals(\\\"SAD 10\\\", Challenge.happyAlgorithm(67));\\n  }\\n\\t\\n\\t@Test\\n  public void test3() {\\n    assertEquals(\\\"HAPPY 1\\\", Challenge.happyAlgorithm(1));\\n  }\\n\\t\\n\\t@Test\\n  public void test4() {\\n    assertEquals(\\\"HAPPY 4\\\", Challenge.happyAlgorithm(44));\\n  }\\n\\t\\n\\t@Test\\n  public void test5() {\\n    assertEquals(\\\"SAD 8\\\", Challenge.happyAlgorithm(89));\\n  }\\n\\t\\n\\t@Test\\n  public void test6() {\\n    assertEquals(\\\"HAPPY 1\\\", Challenge.happyAlgorithm(10));\\n  }\\n\\t\\n\\t@Test\\n  public void test7() {\\n    assertEquals(\\\"SAD 17\\\", Challenge.happyAlgorithm(1327));\\n  }\\n\\t\\n\\t@Test\\n  public void test8() {\\n    assertEquals(\\\"SAD 17\\\", Challenge.happyAlgorithm(2871));\\n  }\\n\\t\\n\\t@Test\\n  public void test9() {\\n    assertEquals(\\\"HAPPY 6\\\", Challenge.happyAlgorithm(3970));\\n  }\\n\\t\\n\\t@Test\\n  public void test10() {\\n    assertEquals(\\\"SAD 11\\\", Challenge.happyAlgorithm(5209));\\n  }\\n\\t\\n\\t@Test\\n  public void test11() {\\n    assertEquals(\\\"HAPPY 3\\\", Challenge.happyAlgorithm(6329));\\n  }\\n\\t\\n\\t@Test\\n  public void test12() {\\n    assertEquals(\\\"SAD 12\\\", Challenge.happyAlgorithm(8888));\\n  }\\n\\t\\n\\t@Test\\n  public void test13() {\\n    assertEquals(\\\"HAPPY 2\\\", Challenge.happyAlgorithm(9331));\\n  }\\n\\t\\n\\t@Test\\n  public void test14() {\\n    assertEquals(\\\"HAPPY 1\\\", Challenge.happyAlgorithm(10000));\\n  }\\n}\",\"language\":\"java\",\"summary\":\"In this challenge, you have to implement an algorithm to establish if a given positive integer num is a Happy number, and how many steps of the algorithm are needed to establish it.\\n\\nYou have to repeatedly transform the given num into the sum of its squared digits:\\nIf after the transformation the new number is equal to 1, num is a Happy number and the algorith\",\"tags\":[\"algorithms\",\"numbers\",\"loops\",\"recursion\"],\"timestamp\":{\"$date\":1580674021716},\"title\":\"The Happy Function\",\"stats\":{\"completed\":{\"total\":59,\"ratings\":[2,2,2,2,2,0,2,1,3,2,2,3,2,2,2,3,2,2,3,1,3,3,2,1,1,2,0,2,2,2,3,3,2,2,2,3,2,2,2,3,2,4,2,3,3,3,2,3,2,4,3],\"rators\":[\"rehehi2Tr2mwaEoJE\",\"eXW8reZCCZHQzJjQi\",\"J9zJq7PMGb6mqzcHW\",\"r9hHZYPQAqJ9DbwLX\",\"Es4eX2stRpyoXeC7f\",\"qb2DTmzQj4vNfq5K7\",\"apLMWsn9B9hbYJtwH\",\"xnhBi4BCdJNAXXRvk\",\"wcCc58K5kNxrBYwei\",\"XKKhGLnab6G6kHpH2\",\"wYYMNPe8nSiJFbvJw\",\"2PR653L4KSN97r534\",\"cjxsqXfkAPoadmppi\",\"SB7E6rYCcezLZgfHs\",\"cf7XxBWEdAGXPDGf9\",\"ZXCJz6Add4aZAavhn\",\"TrquEHytntLKHA4m2\",\"jyoLggHk8xQKZuoQC\",\"5seiNqw6ZXoF2GRRd\",\"WZujpe8yQAyZmpWHg\",\"etoSR23iELGGgs9rA\",\"pBMXMQem6BpSeooYT\",\"D6J3wu8fB5ksyoya6\",\"RXgLif2vM276W4tgZ\",\"htXCitorobtqYymjN\",\"k63LjKkX5p7SYng7C\",\"ePzmFoJvWZQ8MoNGg\",\"Wf7nCHS4Gq5tx659h\",\"4RsakkyRXyYGwFxEa\",\"mfm3gB39arY8Rjb2y\",\"dcW9oK2uRo8h8mBe2\",\"aH9yER5QQ4bFBN8SR\",\"jRqY4i8gPemsZMBGf\",\"qNLv2R8DeTEHW8vvQ\",\"rvojHhKH3DaxotefQ\",\"Ym8AjbKGSJooun3nt\",\"gXTAie79kiw28tx5u\",\"yXGiiSAR5nBHnH3yr\",\"mQKWauR6b252TmdX4\",\"Yqj3KwhnDCzKwEsom\",\"a5Y8ZA5qq2eupPK65\",\"jXTnL3JatkKjoifyb\",\"iq55QasecYJXKz8rx\",\"buX4mCQhtXCfBjeno\",\"2NJZbusRvu3eJ4tHu\",\"sxci7DYKNa6q22Sjq\",\"KMR6vNzvSKMA2cXnK\",\"a49eNnfRwSMxsDJXf\",\"CE4qtZmpDE35AsgKy\",\"rWhXHhzF4W8bea6LP\"],\"quality\":[3,4,5,3]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":3.75,\"family\":[{\"_id\":\"KAkXmQFM4vPxnKo7P\",\"language\":\"cpp\"},{\"_id\":\"q5tAZPFbLzuERDybw\",\"language\":\"java\"},{\"_id\":\"NMCc4pcDx6d7hkvcu\",\"language\":\"javascript\"},{\"_id\":\"4hFDo2uytDJmvKMfG\",\"language\":\"python3\"},{\"_id\":\"xysoQkEHcuBCxBrZ6\",\"language\":\"ruby\"}]}}"]