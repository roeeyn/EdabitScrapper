a["{\"msg\":\"result\",\"id\":\"841\",\"result\":{\"_id\":\"SRSgm5r3P6tRZPRAy\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class ConsecutiveNumbers {\\n\\tpublic static boolean ascending(String str) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":4.4,\"editorId\":\"a777e8chPvJkY3tKa\",\"familyId\":\"vodSjrpyPTPaviSsr\",\"instructions\":\"Write a function that will return `true` if a given string (divided and grouped into a size) will contain a set of **consecutive ascending** numbers, otherwise, return `false`.\\n\\n\\n### Examples\\n```\\nascending(\\\"123124125\\\") ➞ true\\n// Contains a set of consecutive ascending numbers\\n// if grouped into 3's : 123, 124, 125\\n\\nascending(\\\"101112131415\\\") ➞ true\\n// Contains a set of consecutive ascending numbers\\n// if grouped into 2's : 10, 11, 12, 13, 14, 15\\n\\nascending(\\\"32332432536\\\") ➞ false\\n// Regardless of the grouping size, the numbers can't be consecutive.\\n\\nascending(\\\"326325324323\\\") ➞ false\\n// Though the numbers (if grouped into 3's) are consecutive but descending.\\n\\nascending(\\\"666667\\\") ➞ true\\n// Consecutive numbers: 666 and 667.\\n```\\n\\n\\n### IMPORTANT\\nThe expected solution for this challenge is done **recursively**. Please check out the **Resources** tab for more details about **recursion** in Java.\\n\\n\\n\\n### Notes\\n- A **number** can consist of any number of digits, so long as the numbers are **adjacent** to each other, and the string has **at least two** of them.\\n- An **iterative** version of this challenge can be found via this [link](https://edabit.com/challenge/ctWQp4tZCf7J4zmo2).\\n- A **collection** of challenges in **recursion** can be found via this [link](https://edabit.com/collection/Yx78jEBrKppHBNsoQ).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"/** \\n======================================== \\nTestGen 2.3 for JUnit 4.13.0 \\t\\t\\nTest Case: ConsecutiveNumbers::ascending \\nTimestamp: 11/12/2020 3:38:57 AM \\n---------------------------------------- \\n® DARKKO 2020 © \\n======================================== \\n\\n**/ \\n\\nimport static org.junit.Assert.assertEquals; \\nimport org.junit.Test; \\n\\npublic class ConsecutiveNumbersTest { \\n\\t\\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertEquals(true, ConsecutiveNumbers.ascending(\\\"232425\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertEquals(true, ConsecutiveNumbers.ascending(\\\"444445\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertEquals(true, ConsecutiveNumbers.ascending(\\\"1234567\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertEquals(true, ConsecutiveNumbers.ascending(\\\"123412351236\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertEquals(true, ConsecutiveNumbers.ascending(\\\"57585960616263\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertEquals(true, ConsecutiveNumbers.ascending(\\\"500001500002500003\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertEquals(true, ConsecutiveNumbers.ascending(\\\"919920921\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertEquals(true, ConsecutiveNumbers.ascending(\\\"12341235123612371238\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test09() { \\n\\t\\tassertEquals(false, ConsecutiveNumbers.ascending(\\\"2324256\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() { \\n\\t\\tassertEquals(false, ConsecutiveNumbers.ascending(\\\"1235\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test11() { \\n\\t\\tassertEquals(false, ConsecutiveNumbers.ascending(\\\"121316\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test12() { \\n\\t\\tassertEquals(false, ConsecutiveNumbers.ascending(\\\"12131213\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test13() { \\n\\t\\tassertEquals(false, ConsecutiveNumbers.ascending(\\\"54321\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test14() { \\n\\t\\tassertEquals(false, ConsecutiveNumbers.ascending(\\\"56555453\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test15() { \\n\\t\\tassertEquals(false, ConsecutiveNumbers.ascending(\\\"90090190290\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test16() { \\n\\t\\tassertEquals(false, ConsecutiveNumbers.ascending(\\\"35236237238\\\"));\\n\\t}\\n\\n}\\n// end of tests\",\"language\":\"java\",\"quality\":0,\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,5,5,2,4,3],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"Es4eX2stRpyoXeC7f\",\"gXTAie79kiw28tx5u\",\"rhS8qXRjZcpDXkwnE\",\"v5H82mo7L4NCGTnSt\"],\"total\":9},\"flags\":0},\"summary\":\"Write a function that will return true if a given string (divided and grouped into a size) will contain a set of consecutive ascending numbers, otherwise, return false.\\n\\nExamples\\nascending(\\\"123124125\\\") ➞ true\\n// Contains a set of consecutive ascending numbers\\n// if grouped into 3's : 123, 124, 125\\n\\nascending(\\\"101112131415\\\") ➞ true\\n// Contains a set of consecut\",\"tags\":[\"recursion\",\"strings\",\"numbers\",\"arrays\"],\"timestamp\":{\"$date\":1605182754188},\"title\":\"Recursion: Consecutive Ascending Numbers\",\"family\":[{\"_id\":\"SRSgm5r3P6tRZPRAy\",\"language\":\"java\"},{\"_id\":\"ckAccFkn3yR5d4xSm\",\"language\":\"javascript\"},{\"_id\":\"Pjffmm9TTr7CxGDRn\",\"language\":\"python3\"}]}}"]