a["{\"msg\":\"result\",\"id\":\"608\",\"result\":{\"_id\":\"YGFhsF3veFwqKyp4x\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class Matrix {\\n  public static String transpose(String[][] m) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":2.2285714285714286,\"familyId\":\"uo3HcBe6cw6EBFZgh\",\"instructions\":\"In this challenge, you have to obtain a sentence from the elements of a given matrix. In the matrix, each word of the sentence follows a columnar order from the top to the bottom, instead of the usual left-to-right order: it's time for **transposition**!\\n\\nGiven a matrix `mtx`, implement a function that returns the complete sentence as a string, with the words separated by a space between them.\\n\\n### Examples\\n```\\ntransposeMatrix([\\n  [\\\"I\\\",\\\"Tesh\\\"],\\n  [\\\"so\\\",\\\"very\\\"],\\n  [\\\"love\\\",\\\"much!\\\"]\\n]) ➞ \\\"I so love Tesh very much!\\\"\\n\\ntransposeMatrix([\\n  [\\\"My\\\",\\\"evolves\\\",\\\"on\\\"],\\n  [\\\"world\\\",\\\"solely\\\",\\\"Tesha's.\\\"]\\n]) ➞ \\\"My world evolves solely on Tesha's.\\\"\\n\\ntransposeMatrix([\\n  [\\\"Enter\\\"],\\n  [\\\"the\\\"],\\n  [\\\"Matrix!\\\"]\\n]) ➞ \\\"Enter the Matrix!\\\"\\n\\ntransposeMatrix([\\n  [\\\"The\\\",\\\"are\\\"],\\n  [\\\"columns\\\",\\\"rows.\\\"]\\n]) ➞ \\\"The columns are rows.\\\"\\n```\\n\\n### Notes\\n- All given matrices are regular, as to say that each column has the same length.\\n- Punctuation is already given, you just have to add the spaces in the returned string.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"import static org.junit.Assert.assertEquals; \\nimport org.junit.Test; \\n\\npublic class MatrixTest {\\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertEquals(\\\"I so love Tesh very much!\\\", Matrix.transpose(new String[][] {{\\\"I\\\", \\\"Tesh\\\"}, {\\\"so\\\", \\\"very\\\"}, {\\\"love\\\", \\\"much!\\\"}}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertEquals(\\\"My world evolves solely on Tesha's.\\\", Matrix.transpose(new String[][] {{\\\"My\\\", \\\"evolves\\\", \\\"on\\\"}, {\\\"world\\\", \\\"solely\\\", \\\"Tesha's.\\\"}}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertEquals(\\\"The hurting truth is I can't have you now Tesh!\\\", Matrix.transpose(new String[][] {{\\\"The\\\", \\\"truth\\\", \\\"I\\\", \\\"have\\\", \\\"now\\\"}, {\\\"hurting\\\", \\\"is\\\", \\\"can't\\\", \\\"you\\\", \\\"Tesh!\\\"}}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertEquals(\\\"Enter the Matrix!\\\", Matrix.transpose(new String[][] {{\\\"Enter\\\"}, {\\\"the\\\"}, {\\\"Matrix!\\\"}}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertEquals(\\\"The columns are rows.\\\", Matrix.transpose(new String[][] {{\\\"The\\\", \\\"are\\\"}, {\\\"columns\\\", \\\"rows.\\\"}}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertEquals(\\\"You must transpose the table order.\\\", Matrix.transpose(new String[][] {{\\\"You\\\", \\\"the\\\"}, {\\\"must\\\", \\\"table\\\"}, {\\\"transpose\\\", \\\"order.\\\"}}));\\n\\t}\\n}\",\"language\":\"java\",\"quality\":0,\"summary\":\"In this challenge, you have to obtain a sentence from the elements of a given matrix. In the matrix, each word of the sentence follows a columnar order from the top to the bottom, instead of the usual left-to-right order: it's time for transposition!\\n\\nGiven a matrix mtx, implement a function that returns the complete sentence as a string, with the words separa\",\"tags\":[\"arrays\",\"strings\",\"formatting\"],\"timestamp\":{\"$date\":1607347967510},\"title\":\"Enter the Matrix\",\"stats\":{\"completed\":{\"total\":31,\"ratings\":[2,2,2,2,2,1,2,2,2,2,2,3,2,2,2,2,2,3,3,2,2,3,3,4,2,3,3,2,2,1,3,2,2,1,3],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"Es4eX2stRpyoXeC7f\",\"jXTnL3JatkKjoifyb\",\"8Xx8nWXRydHDBGfQf\",\"yd5PakB2z33q2JrTZ\",\"EFqhE7GRf6PSKMSg6\",\"azAzSkvJd7eyXY9x9\",\"dcW9oK2uRo8h8mBe2\",\"hzxrGwEsuGbpKDRYQ\",\"SExX3m5YftBWmsk2e\",\"gXTAie79kiw28tx5u\",\"hD6sfDtntpqT8NR2o\",\"NYEt8oHpnnqXKtXhN\",\"5R9nW7JC9PH4Pdsk5\",\"82weQfHHmno4Mq4X7\",\"4Q385fpxD6m85aokw\",\"jyoLggHk8xQKZuoQC\",\"buX4mCQhtXCfBjeno\",\"Ncb4xFz8KLXYLpxx2\",\"MDcwwyDzcTRPvqCSr\",\"34bE6mric984YYLZQ\",\"qaPjAANdnxFnWfj5d\",\"rhS8qXRjZcpDXkwnE\",\"2NJZbusRvu3eJ4tHu\",\"eakBjoozbP3r4zrjz\",\"KMR6vNzvSKMA2cXnK\",\"sxci7DYKNa6q22Sjq\",\"wFRLGjA56kj7xyhmv\",\"a49eNnfRwSMxsDJXf\",\"rWhXHhzF4W8bea6LP\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"HC6h6dT3xMg7qEk2S\",\"language\":\"cpp\"},{\"_id\":\"YGFhsF3veFwqKyp4x\",\"language\":\"java\"},{\"_id\":\"3mKNTsZ5f7b9hHTky\",\"language\":\"javascript\"},{\"_id\":\"kdhgEC2ECXAfoXWQP\",\"language\":\"python3\"},{\"_id\":\"QAYrydsMzoxNtgiMp\",\"language\":\"ruby\"}]}}"]