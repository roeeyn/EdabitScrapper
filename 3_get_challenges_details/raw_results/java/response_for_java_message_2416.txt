a["{\"msg\":\"result\",\"id\":\"764\",\"result\":{\"_id\":\"sLasdN8jqehbeqHtT\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"public class Challenge {\\n\\tpublic static String encrypt(String plncode, String pad) {\\n\\t\\t\\n\\t}\\n\\n\\tpublic static String decrypt(String cypcode, String pad) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":3,\"familyId\":\"EfXFahrF5fCkdN8Yi\",\"instructions\":\"_“To the future or to the past, to a time when thought is free, when men are different from one another and do not live alone — to a time when truth exists and what is done cannot be undone: From the age of uniformity, from the age of solitude, from the age of Big Brother, from the age of doublethink — greetings!”_ \u2060— Winston Smith's secret writings in George Orwell's novel \\\"1984\\\"\\n\\n#### ONE TIME PAD OPERATIONS MANUAL (CLASSIFIED \u2060— DESTROY AFTER READING!)\\n\\nThis first part of the ONE TIME PAD OPERATIONS MANUAL has been designed to train party members within the purview of the Dzerzkian Intelligence Authorities on how to use One Time Pad (OTP) encryption.\\n\\nThis type of encryption offers several advantages over other types of encryption:\\n- It cannot be cracked (with certain important assumptions. See appendix: \\\"Resources\\\").\\n- It can easily be performed by hand, which makes it perfect for field agents (the intended readers of this document).\\n\\n#### OPERATION PRINCIPLES\\nAs the name implies, OTP encrypts and decrypts messages with the aid of a secret key (i.e. the _pad_). Both the sender and the receiver have identical copies of this pad. Each pad is used only once before it is immediately destroyed by both parties.\\n\\nThe encryption and decryption processes are relatively simple:\\n\\n1. The _plaintext_ message is encoded into something called _plaincode_. The purpose of this step is to convert the letters into numbers in preparation for the next step. The plaincode should not be considered encrypted in any way.\\n\\n2. The next step is to encrypt the plaincode with the one-time pad. The sender uses **modular subtraction** on each pair of corresponding digits in the plaincode and the pad to generate the encrypted _cyphertext_, which can now be securely sent to the receiver.\\n\\n3. The decryption step is essentially the encryption step in reverse. The plaincode is decrypted when the receiver uses **modular addition** to add the corresponding digits in the cyphertext and the pad.\\n\\n4. Finally, the plaincode is decoded to plaintext with the same method used to encode it, but in reverse.\\n\\n#### TRAINING EXERCISE\\nIn our first exercise, we need only concern ourselves with encryption and decryption of the plaincode (steps 2 and 3).\\n\\nMake two functions: one for encryption and one for decryption. Both functions need only two arguments: either `plncode` and `pad` or `cypcode` and `pad`, both of which are strings of numbers.\\n\\nRemember, the plaincode is encrypted using modular arithmetic. For example, if the plaincode digit is 4, and the corresponding pad digit is 6, then the cyphertext digit is (4 – 6) mod 10 = 8. After being sent, the cyphertext 8 can be decrypted using the pad digit 6 and modular addition: (8 + 6) % 10 = 4. **A simple way of remembering this is that sometimes you need to add 10 to plaincode digit to keep the result above 0 in the encryption step. As for decryption, if the result is greater than 9, just don't carry the 1.**\\n\\nBy convention, the first five digits of the pad are used as a “key ID” and aren't altered in the encryption process. This allows the receiver to identify the appropriate pad for decryption.\\n\\n```\\nENCRYPTION:\\nKEYID 24955 18424 76969 69 plaincode\\n63719 78776 82780 83650 47 pad\\n-------------------------- (-) modular subtraction\\n63719 56289 36744 93319 22 cyphertext\\n\\nDECRYPTION:\\n63719 56289 36744 93319 22 cyphertext\\n63719 78776 82780 83650 47 pad\\n-------------------------- (+) modular addition\\nKEYID 24955 18424 76969 69 plaincode\\n```\\n\\nBy convention, the codes are written in groups of five for the sake of organization while performing operations by hand. However, the test case strings contain no spaces for grouping.\\n\\nIn the function `encrypt(plncode, pad)`, the `plncode` argument should be given as a string that does not include the key ID. It should return the cyphertext as a string that does contain the key ID.\\n\\nIn the function `decrypt(cypcode, pad)`, the `cypcode` argument should be given as a string that does include the key ID. It should return the plaincode as a string that does not contain the key ID.\\n\\nIf the key IDs for the cyphertext and the pad don't match in the decrypt function, return `\\\"Error: Key IDs don't match.\\\"`\\n\\n### Examples\\n```\\nencrypt(\\\"24955184247696969\\\", \\\"637197877682780836504704874690100607768768\\\") ➞ \\\"6371956289367449331922\\\"\\n\\ndecrypt(\\\"6371956289367449331922\\\", \\\"637197877682780836504704874690100607768768\\\") ➞ \\\"24955184247696969\\\"\\n\\ndecrypt(\\\"6371956289367449331922\\\", \\\"442878365779404250678127528855846163827272\\\") ➞ \\\"Error: Key IDs don't match.\\\"\\n```\\n\\n### Notes\\nThe functions you make will be built upon in the next section, in which you will also be required to convert from plaintext to plaincode and vice-versa.\",\"isHidden\":false,\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n  @Test\\n  public void test1() {\\n    assertEquals(\\\"6371956289367449331922\\\", Challenge.encrypt(\\\"24955184247696969\\\", \\\"637197877682780836504704874690100607768768\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test2() {\\n    assertEquals(\\\"Error: Key IDs don't match.\\\", Challenge.decrypt(\\\"6371956289367449331922\\\", \\\"442878365779404250678127528855846163827272\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test3() {\\n    assertEquals(\\\"24955184247696969\\\", Challenge.decrypt(\\\"6371956289367449331922\\\", \\\"637197877682780836504704874690100607768768\\\"));\\n  }\\n}\",\"language\":\"java\",\"summary\":\"“To the future or to the past, to a time when thought is free, when men are different from one another and do not live alone — to a time when truth exists and what is done cannot be undone: From the age of uniformity, from the age of solitude, from the age of Big Brother, from the age of doublethink — greetings!” \u2060— Winston Smith's secret writings in George Or\",\"tags\":[\"cryptography\",\"numbers\",\"strings\",\"formatting\"],\"timestamp\":{\"$date\":1578946801091},\"title\":\"One Time Pad Training Program, Pt. 1\",\"stats\":{\"completed\":{\"total\":47,\"ratings\":[3,3,3,3,3,4,2,3,2,4,5,1,3,2,3,4,3,3,4,2,5,2,5,5,3,3,2,0,3,3,2,2,4,3,5,4,2,3,2,2,3],\"rators\":[\"Es4eX2stRpyoXeC7f\",\"QwkJidQW7vvEY6TLp\",\"5Ep7ALRbdgGDo3hK6\",\"hgR55DYN6zxHXNeRb\",\"TrquEHytntLKHA4m2\",\"muDC7Z5mKSdfkn5ny\",\"J22GaPwwi3TL2pAkw\",\"cE9dgDxfDsGJ4Kf9M\",\"be2xgy2qr7MaGBCaW\",\"kLkhLEtCFsKfGv7kg\",\"Ym8AjbKGSJooun3nt\",\"TZk7ZK6ejLsTr6Bgz\",\"vZCnKCMrDsF3nAxQs\",\"9BgWGdEEgvcST8Rs3\",\"DkSMZ3jZLkwviKb9g\",\"6YAeQueNMLugbc7P6\",\"CQrLMPjz7gn82rySP\",\"SDSvWibEfFvh3mFaQ\",\"ey5557C4wS8kpYoTe\",\"9pqtNWrsTJdZcRbEZ\",\"3fFQ4XkdL2WywELg9\",\"CvCMHBTZZ6sQMiKCm\",\"YomMJMBhDwoWLjcAm\",\"7ospYKSiS9uy932FK\",\"b3pFGJ5jWFdoAh4wp\",\"GCm6KP6bMRrxNcuQR\",\"vFpYGRuv6Hnci8fiu\",\"LNCb5rksJLJ43L4Nw\",\"f7eueuFbYYr8MLxcF\",\"Qz6fMMgv45JcyweAL\",\"rhS8qXRjZcpDXkwnE\",\"R2ZwtraCp4iWkETB2\",\"KMR6vNzvSKMA2cXnK\",\"htXCitorobtqYymjN\",\"uw47663LqPME8btaA\",\"RwwjfmbHphMCZQ2xk\",\"Zh9frR2TmtwRkzsbF\",\"sxci7DYKNa6q22Sjq\",\"FWehDEKfksDcgGef6\",\"ha284n3csExRB2pPy\",\"4LvaNEj7Rcwwuk74w\"],\"quality\":[5,3,2,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":4,\"family\":[{\"_id\":\"6WkQfbASjhzWwgj5K\",\"language\":\"cpp\"},{\"_id\":\"sLasdN8jqehbeqHtT\",\"language\":\"java\"},{\"_id\":\"3kukAeB3YtsDedcFG\",\"language\":\"javascript\"},{\"_id\":\"zrkRjdSwTvbijMXJs\",\"language\":\"python3\"},{\"_id\":\"aWn5imL8yP6ntTCJi\",\"language\":\"ruby\"}]}}"]