a["{\"msg\":\"result\",\"id\":\"738\",\"result\":{\"_id\":\"Ebw8nnRzgFcWgY5p8\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class ChessKnights {\\n  public static boolean cannotCapture(int[][] b) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":2.8666666666666667,\"familyId\":\"56hxdQkZWT6TQkiQq\",\"instructions\":\"Write a function that returns `true` if the knights are placed on a chessboard such that **no knight can capture another knight**. Here, `0`'s represent empty squares and `1`'s represent knights.\\n\\n### Examples\\n```\\ncannotCapture([\\n  [0, 0, 0, 1, 0, 0, 0, 0],\\n  [0, 0, 0, 0, 0, 0, 0, 0],\\n  [0, 1, 0, 0, 0, 1, 0, 0],\\n  [0, 0, 0, 0, 1, 0, 1, 0],\\n  [0, 1, 0, 0, 0, 1, 0, 0],\\n  [0, 0, 0, 0, 0, 0, 0, 0],\\n  [0, 1, 0, 0, 0, 0, 0, 1],\\n  [0, 0, 0, 0, 1, 0, 0, 0]\\n]) ➞ true\\n\\ncannotCapture([\\n  [1, 0, 1, 0, 1, 0, 1, 0],\\n  [0, 1, 0, 1, 0, 1, 0, 1],\\n  [0, 0, 0, 0, 1, 0, 1, 0],\\n  [0, 0, 1, 0, 0, 1, 0, 1],\\n  [1, 0, 0, 0, 1, 0, 1, 0],\\n  [0, 0, 0, 0, 0, 1, 0, 1],\\n  [1, 0, 0, 0, 1, 0, 1, 0],\\n  [0, 0, 0, 1, 0, 1, 0, 1]\\n]) ➞ false\\n\\ncannotCapture([\\n  [0, 0, 0, 0, 1, 0, 0, 0], \\n  [0, 0, 0, 0, 0, 1, 0, 0], \\n  [0, 0, 0, 1, 0, 0, 0, 0], \\n  [1, 0, 0, 0, 0, 0, 0, 0], \\n  [0, 0, 0, 0, 1, 0, 0, 0], \\n  [0, 0, 0, 0, 0, 1, 0, 0], \\n  [0, 0, 0, 0, 0, 1, 0, 0], \\n  [1, 0, 0, 0, 0, 0, 0, 0]\\n]) ➞ false\\n```\\n\\n### Notes\\n- **Knights** can be present in any of the _64 squares_.\\n- No other pieces exist but **knights**.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"import static org.junit.Assert.assertEquals; \\nimport org.junit.Test; \\n\\npublic class ChessKnightsTest {\\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertEquals(true, ChessKnights.cannotCapture(new int[][] {{0, 0, 0, 1, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0}, {0, 1, 0, 0, 0, 1, 0, 0}, {0, 0, 0, 0, 1, 0, 1, 0}, {0, 1, 0, 0, 0, 1, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0}, {0, 1, 0, 0, 0, 0, 0, 1}, {0, 0, 0, 0, 1, 0, 0, 0}}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertEquals(false, ChessKnights.cannotCapture(new int[][] {{0, 0, 0, 0, 1, 0, 0, 0}, {0, 0, 0, 0, 0, 1, 0, 0}, {0, 0, 0, 1, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 1, 0, 0, 0}, {0, 1, 0, 0, 0, 0, 0, 0}, {0, 0, 1, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 1}}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertEquals(false, ChessKnights.cannotCapture(new int[][] {{0, 0, 0, 0, 1, 0, 0, 0}, {1, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 1, 0, 0, 0}, {0, 0, 0, 0, 0, 1, 0, 0}, {0, 1, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 1, 0, 0, 0}, {0, 0, 0, 0, 0, 1, 0, 0}, {0, 0, 0, 1, 0, 0, 0, 0}}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertEquals(true, ChessKnights.cannotCapture(new int[][] {{1, 0, 1, 0, 1, 0, 1, 0}, {0, 1, 0, 1, 0, 1, 0, 1}, {0, 0, 1, 0, 1, 0, 1, 0}, {0, 0, 0, 1, 0, 1, 0, 1}, {0, 0, 0, 0, 1, 0, 1, 0}, {0, 0, 0, 0, 0, 1, 0, 1}, {0, 0, 0, 0, 0, 0, 1, 0}, {0, 0, 0, 0, 0, 0, 0, 1}}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertEquals(false, ChessKnights.cannotCapture(new int[][] {{0, 0, 0, 0, 1, 0, 0, 0}, {0, 0, 0, 0, 0, 1, 0, 0}, {0, 0, 0, 0, 0, 1, 0, 0}, {1, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 1, 0, 0, 0}, {0, 0, 0, 0, 0, 1, 0, 0}, {0, 0, 0, 1, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0, 0, 0}}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertEquals(false, ChessKnights.cannotCapture(new int[][] {{0, 0, 0, 0, 1, 0, 0, 0}, {0, 0, 0, 0, 0, 1, 0, 0}, {0, 0, 0, 1, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 1, 0, 0, 0}, {0, 0, 0, 0, 0, 1, 0, 0}, {0, 0, 0, 0, 0, 1, 0, 0}, {1, 0, 0, 0, 0, 0, 0, 0}}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertEquals(true, ChessKnights.cannotCapture(new int[][] {{1, 0, 1, 0, 1, 0, 1, 0}, {0, 1, 0, 1, 0, 1, 0, 1}, {1, 0, 1, 0, 1, 0, 1, 0}, {0, 0, 0, 1, 0, 1, 0, 1}, {1, 0, 0, 0, 1, 0, 1, 0}, {1, 0, 0, 0, 0, 1, 0, 1}, {1, 0, 0, 0, 0, 0, 1, 0}, {1, 0, 0, 0, 0, 0, 0, 1}}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertEquals(false, ChessKnights.cannotCapture(new int[][] {{1, 0, 1, 0, 1, 0, 1, 0}, {0, 1, 0, 1, 0, 1, 0, 1}, {1, 0, 1, 0, 1, 0, 1, 0}, {0, 0, 0, 1, 0, 1, 0, 1}, {1, 0, 0, 0, 1, 0, 1, 0}, {0, 0, 0, 0, 0, 1, 0, 1}, {1, 0, 1, 0, 1, 0, 1, 0}, {1, 0, 0, 1, 0, 0, 0, 1}}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test09() { \\n\\t\\tassertEquals(false, ChessKnights.cannotCapture(new int[][] {{1, 0, 1, 0, 1, 0, 1, 0}, {0, 1, 0, 1, 0, 1, 0, 1}, {1, 0, 1, 0, 1, 1, 1, 0}, {0, 0, 0, 1, 0, 1, 0, 1}, {1, 0, 0, 0, 1, 0, 1, 0}, {0, 0, 0, 0, 0, 1, 0, 1}, {1, 0, 1, 0, 1, 0, 1, 0}, {0, 0, 0, 1, 0, 0, 0, 1}}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() { \\n\\t\\tassertEquals(true, ChessKnights.cannotCapture(new int[][] {{1, 0, 1, 0, 1, 0, 1, 0}, {0, 1, 0, 1, 0, 1, 0, 1}, {1, 0, 1, 0, 1, 0, 1, 0}, {0, 0, 0, 1, 0, 1, 0, 1}, {1, 0, 0, 0, 1, 0, 1, 0}, {0, 0, 0, 0, 0, 1, 0, 1}, {1, 0, 0, 0, 1, 0, 1, 0}, {0, 0, 0, 1, 0, 1, 0, 1}}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test11() { \\n\\t\\tassertEquals(false, ChessKnights.cannotCapture(new int[][] {{1, 0, 1, 0, 1, 0, 1, 0}, {0, 1, 0, 1, 0, 1, 0, 1}, {0, 0, 0, 0, 1, 0, 1, 0}, {0, 0, 1, 0, 0, 1, 0, 1}, {1, 0, 0, 0, 1, 0, 1, 0}, {0, 0, 0, 0, 0, 1, 0, 1}, {1, 0, 0, 0, 1, 0, 1, 0}, {0, 0, 0, 1, 0, 1, 0, 1}}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test12() { \\n\\t\\tassertEquals(false, ChessKnights.cannotCapture(new int[][] {{1, 0, 1, 0, 1, 0, 1, 0}, {0, 1, 0, 1, 0, 1, 0, 1}, {0, 0, 0, 0, 1, 1, 1, 0}, {0, 0, 0, 0, 0, 0, 0, 1}, {1, 0, 0, 0, 1, 0, 1, 0}, {0, 0, 0, 0, 0, 1, 0, 1}, {1, 0, 0, 0, 1, 0, 1, 0}, {0, 0, 0, 1, 0, 1, 0, 1}}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test13() { \\n\\t\\tassertEquals(true, ChessKnights.cannotCapture(new int[][] {{1, 0, 1, 0, 1, 0, 1, 0}, {0, 1, 0, 1, 0, 1, 0, 1}, {1, 0, 1, 0, 1, 0, 1, 0}, {0, 0, 0, 1, 0, 1, 0, 1}, {1, 0, 0, 0, 1, 0, 1, 0}, {0, 0, 0, 0, 0, 1, 0, 1}, {1, 0, 1, 0, 1, 0, 1, 0}, {0, 0, 0, 1, 0, 0, 0, 1}}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test14() { \\n\\t\\tassertEquals(false, ChessKnights.cannotCapture(new int[][] {{1, 0, 1, 0, 1, 0, 1, 0}, {0, 1, 0, 1, 0, 1, 0, 1}, {0, 0, 0, 0, 1, 0, 1, 0}, {0, 0, 0, 0, 0, 0, 0, 1}, {1, 0, 0, 0, 1, 0, 1, 0}, {0, 0, 0, 0, 0, 1, 0, 1}, {1, 0, 0, 0, 1, 0, 1, 0}, {0, 0, 1, 1, 0, 1, 0, 1}}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test15() { \\n\\t\\tassertEquals(false, ChessKnights.cannotCapture(new int[][] {{0, 0, 0, 1, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0}, {0, 1, 0, 0, 0, 1, 1, 0}, {0, 0, 0, 0, 1, 0, 1, 0}, {0, 1, 0, 0, 0, 1, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0}, {0, 1, 0, 0, 0, 0, 0, 1}, {0, 0, 0, 0, 1, 0, 0, 0}}));\\n\\t}\\n}\",\"language\":\"java\",\"quality\":0,\"summary\":\"Write a function that returns true if the knights are placed on a chessboard such that no knight can capture another knight. Here, 0's represent empty squares and 1's represent knights.\\n\\nExamples\\ncannotCapture([\\n  [0, 0, 0, 1, 0, 0, 0, 0],\\n  [0, 0, 0, 0, 0, 0, 0, 0],\\n  [0, 1, 0, 0, 0, 1, 0, 0],\\n  [0, 0, 0, 0, 1, 0, 1, 0],\\n  [0, 1, 0, 0, 0, 1, 0, 0],\\n  [0, 0, 0\",\"tags\":[\"validation\",\"arrays\",\"games\"],\"timestamp\":{\"$date\":1611043701332},\"title\":\"Knights On A Board\",\"stats\":{\"completed\":{\"total\":12,\"ratings\":[3,3,3,3,3,4,3,4,3,1,2,1,2,5,3],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"Es4eX2stRpyoXeC7f\",\"gXTAie79kiw28tx5u\",\"N9dDp93yaMZSiRGyH\",\"RSSrWo6AiSDRNAy5K\",\"kWmPsBxgPFEeHnFrL\",\"hhxjQREtmHSheH9Pj\",\"AqF7oB9DyyKtBys92\",\"ZmPeQs5ZrXvbC8Rym\",\"sxci7DYKNa6q22Sjq\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"ZKWXigCFnEFf7tAad\",\"language\":\"cpp\"},{\"_id\":\"EwAXuk4urzK8WkRGw\",\"language\":\"csharp\"},{\"_id\":\"Ebw8nnRzgFcWgY5p8\",\"language\":\"java\"},{\"_id\":\"YFkyAh5sm9Guqth85\",\"language\":\"javascript\"},{\"_id\":\"grT2qADBtQaby7qYb\",\"language\":\"php\"},{\"_id\":\"C4nht9fQk7tN8mkPa\",\"language\":\"python3\"},{\"_id\":\"CSKhET7BW6v2D4EYv\",\"language\":\"ruby\"}]}}"]