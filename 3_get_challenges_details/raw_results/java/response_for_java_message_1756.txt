a["{\"msg\":\"result\",\"id\":\"439\",\"result\":{\"_id\":\"JnGKayBeHJFDQ2oiu\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"public class Challenge {\\n\\tpublic static int blocks(int step) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":1.6176470588235294,\"familyId\":\"YZAtG9Wf3wiWLrqEB\",\"instructions\":\"A block sequence in three dimensions. We can write a formula for this one:\\n\\n![Sequence Step 1 - 5](https://edabit-challenges.s3.amazonaws.com/3d_blocks.png \\\"Sequence Step 1 - 5\\\")\\n\\nCreate a function that takes a number (step) as an argument and returns the amount of blocks in that step.\\n\\n### Examples\\n```\\nblocks(1) ➞ 5\\n\\nblocks(5) ➞ 39\\n\\nblocks(2) ➞ 12\\n```\\n\\n### Notes\\n- Step 0 obviously has to return `0`.\\n- The input is always a positive integer.\\n- Check the **Resources** tab for a video on finding quadratic sequences.\",\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n  @Test\\n  public void test1() {\\n    assertEquals(2064, Challenge.blocks(59));\\n  }\\n\\t\\n\\t@Test\\n  public void test2() {\\n    assertEquals(3387, Challenge.blocks(77));\\n  }\\n\\t\\n\\t@Test\\n  public void test3() {\\n    assertEquals(725, Challenge.blocks(33));\\n  }\\n\\t\\n\\t@Test\\n  public void test4() {\\n    assertEquals(1524, Challenge.blocks(50));\\n  }\\n\\t\\n\\t@Test\\n  public void test5() {\\n    assertEquals(137, Challenge.blocks(12));\\n  }\\n\\t\\n\\t@Test\\n  public void test6() {\\n    assertEquals(1695, Challenge.blocks(53));\\n  }\\n\\t\\n\\t@Test\\n  public void test7() {\\n    assertEquals(845, Challenge.blocks(36));\\n  }\\n\\t\\n\\t@Test\\n  public void test8() {\\n    assertEquals(5549, Challenge.blocks(100));\\n  }\\n\\t\\n\\t@Test\\n  public void test9() {\\n    assertEquals(5034, Challenge.blocks(95));\\n  }\\n\\t\\n\\t@Test\\n  public void test10() {\\n    assertEquals(2330, Challenge.blocks(63));\\n  }\\n\\t\\n\\t@Test\\n  public void test11() {\\n    assertEquals(1754, Challenge.blocks(54));\\n  }\\n\\t\\n\\t@Test\\n  public void test12() {\\n    assertEquals(1259, Challenge.blocks(45));\\n  }\\n\\t\\n\\t@Test\\n  public void test13() {\\n    assertEquals(2399, Challenge.blocks(64));\\n  }\\n\\t\\n\\t@Test\\n  public void test14() {\\n    assertEquals(1310, Challenge.blocks(46));\\n  }\\n\\t\\n\\t@Test\\n  public void test15() {\\n    assertEquals(2685, Challenge.blocks(68));\\n  }\\n\\t\\n\\t@Test\\n  public void test16() {\\n    assertEquals(1310, Challenge.blocks(46));\\n  }\\n\\t\\n\\t@Test\\n  public void test17() {\\n    assertEquals(2262, Challenge.blocks(62));\\n  }\\n\\t\\n\\t@Test\\n  public void test18() {\\n    assertEquals(5034, Challenge.blocks(95));\\n  }\\n\\t\\n\\t@Test\\n  public void test19() {\\n    assertEquals(2987, Challenge.blocks(72));\\n  }\\n\\t\\n\\t@Test\\n  public void test20() {\\n    assertEquals(3305, Challenge.blocks(76));\\n  }\\n\\t\\n\\t@Test\\n  public void test21() {\\n    assertEquals(419, Challenge.blocks(24));\\n  }\\n\\t\\n\\t@Test\\n  public void test22() {\\n    assertEquals(5340, Challenge.blocks(98));\\n  }\\n\\t\\n\\t@Test\\n  public void test23() {\\n    assertEquals(362, Challenge.blocks(22));\\n  }\\n\\t\\n\\t@Test\\n  public void test24() {\\n    assertEquals(974, Challenge.blocks(39));\\n  }\\n\\t\\n\\t@Test\\n  public void test25() {\\n    assertEquals(2685, Challenge.blocks(68));\\n  }\\n\\t\\n\\t@Test\\n  public void test26() {\\n    assertEquals(362, Challenge.blocks(22));\\n  }\\n\\t\\n\\t@Test\\n  public void test27() {\\n    assertEquals(4079, Challenge.blocks(85));\\n  }\\n\\t\\n\\t@Test\\n  public void test28() {\\n    assertEquals(887, Challenge.blocks(37));\\n  }\\n\\t\\n\\t@Test\\n  public void test29() {\\n    assertEquals(5340, Challenge.blocks(98));\\n  }\\n\\n\\t@Test\\n  public void test30() {\\n    assertEquals(260, Challenge.blocks(18));\\n  }\\n\\t\\n\\t@Test\\n  public void test31() {\\n    assertEquals(2469, Challenge.blocks(65));\\n  }\\n\\t\\n@Test\\n  public void test32() {\\n    assertEquals(2834, Challenge.blocks(70));\\n  }\\n}\",\"language\":\"java\",\"summary\":\"A block sequence in three dimensions. We can write a formula for this one:\\n\\nSequence Step 1 - 5\\n\\nCreate a function that takes a number (step) as an argument and returns the amount of blocks in that step.\\n\\nExamples\\nblocks(1) ➞ 5\\n\\nblocks(5) ➞ 39\\n\\nblocks(2) ➞ 12\\n\\nNotes\\nStep 0 obviously has to return 0.\\nThe input is always a positive integer.\\nCheck the Resources t\",\"tags\":[\"math\",\"numbers\",\"algorithms\"],\"timestamp\":{\"$date\":1568255071564},\"title\":\"3D Visual Block Sequence\",\"stats\":{\"completed\":{\"total\":73,\"ratings\":[2,2,2,2,2,3,2,0,2,2,0,0,2,2,1,1,3,2,2,0,1,3,2,2,2,2,2,2,1,1,1,0,1,1,2,3,1,2,1,2,0,1,3,1,0,1,1,2,2,3,2,2,2,0,2,2,3,1,2,3,0,2,2,2,3,1,1,2],\"rators\":[\"3pdgguqZgNDSAJSGm\",\"2NJuDfSqdrF8kHHni\",\"SnY7WidXJoAyyuPuA\",\"ct699TXH59y7Fhyh4\",\"t2kdBPj9qQAXY2Ehd\",\"9c8n7ti5vCjTRgiGN\",\"3gxJoNp59B4eoyyed\",\"sxci7DYKNa6q22Sjq\",\"mx5bKq8Mu7stucK9R\",\"Ha5J49rhojBRy3BaM\",\"79ZbLzp7xepvkonoh\",\"tQatuCqYXLqvQ2rDh\",\"3KjxQu9RZ8ZSywvLz\",\"phA6MomRzh9oz3eqn\",\"8J2Dqqz9PaFufQzwY\",\"J9zJq7PMGb6mqzcHW\",\"AyrEvM2GLX2jqM772\",\"HawgpaWZnHrBtve4P\",\"Es4eX2stRpyoXeC7f\",\"eF9cG8n4F9WkDnavC\",\"Xxh4mouSqCQwxnenc\",\"hB5mgzMwQSnhBzi7P\",\"Kso7rzAKB4TTCPKgM\",\"5seiNqw6ZXoF2GRRd\",\"jyoLggHk8xQKZuoQC\",\"fZjkX29nhRTWWb75k\",\"dDP6nt8ihp6FPeT27\",\"WZujpe8yQAyZmpWHg\",\"etoSR23iELGGgs9rA\",\"TrquEHytntLKHA4m2\",\"8zZ6xmzpiFair25qr\",\"htXCitorobtqYymjN\",\"mfm3gB39arY8Rjb2y\",\"y6kfyYmydcD8tkBk7\",\"aH9yER5QQ4bFBN8SR\",\"pBMXMQem6BpSeooYT\",\"8yyfRwCsP5ovSFT5p\",\"rvojHhKH3DaxotefQ\",\"ePioboaTtHBoYMPE7\",\"g4NCSxxHqHCGMpWwT\",\"hPx9H3YM8j2k94DNW\",\"YcjwCvYut6834Jzd8\",\"YFHkjbM6obMSj24zi\",\"ohsJnyfLcGDCWzEWM\",\"DzvdGwHEjqsX7wyKr\",\"yXGiiSAR5nBHnH3yr\",\"SDaX3xnNaoq2TbNci\",\"gXTAie79kiw28tx5u\",\"8Xx8nWXRydHDBGfQf\",\"jXTnL3JatkKjoifyb\",\"AeJSxRqw2dJZuGvdk\",\"BWqQ68pvNedARDcBN\",\"CuCF5F6bSaz26F6bp\",\"a49eNnfRwSMxsDJXf\",\"buX4mCQhtXCfBjeno\",\"bur3yQ8s34zqKGEro\",\"DkSMZ3jZLkwviKb9g\",\"rhS8qXRjZcpDXkwnE\",\"srJ34BaybkQh3qRkM\",\"xEX3TDY6C2h82dJTn\",\"Yp7uvStL97cC9fKkY\",\"AHmgsYBy6A66bDQFC\",\"KMR6vNzvSKMA2cXnK\",\"unqzSsxpxj9sZ7rbD\",\"FxPDKKibxnZjGJLs6\",\"uw47663LqPME8btaA\",\"nFbmNzMQ38TncmfQX\"],\"quality\":[5,4,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"isHidden\":false,\"quality\":4.75,\"family\":[{\"_id\":\"icEtzNmcTB4Kvwvwt\",\"language\":\"cpp\"},{\"_id\":\"JnGKayBeHJFDQ2oiu\",\"language\":\"java\"},{\"_id\":\"MevNu8jwsPC8ghS7B\",\"language\":\"javascript\"},{\"_id\":\"NtsqbRPqtPYhR8tJe\",\"language\":\"python3\"},{\"_id\":\"BbC4ZTq6RYpqF9bum\",\"language\":\"ruby\"}]}}"]