a["{\"msg\":\"result\",\"id\":\"83\",\"result\":{\"_id\":\"rhxxyrHreLDm6qJLu\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class RgbColor {\\n\\tpublic static int[] invertColor(int[] rgb) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":0.5338345864661654,\"familyId\":\"RBiPnMGELK8iuye52\",\"instructions\":\"Create a function that inverts the `rgb` values in an array.\\n\\n### Examples\\n```\\ninvertColor([255, 255, 255]) ➞ [0, 0, 0]\\n// [255, 255, 255] is the color white.\\n// The opposite is [0, 0, 0], which is black.\\n\\ninvertColor([12, 13, 200]) ➞ [243, 242, 55]\\n\\ninvertColor([12, 17, 197]) ➞ [243, 238, 58]\\n\\ninvertColor([243, 242, 235]) ➞ [12, 13, 20]\\n\\ninvertColor([0, 0, 0]) ➞ [255, 255, 255]\\n\\ninvertColor([165, 170, 221]) ➞ [90, 85, 34]\\n```\\n\\n### Notes\\n255 is the max value of a single color channel.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"/** \\n================================= \\nTestGen 2.3 for JUnit 4.13.0 \\t\\t\\nTest Case: RgbColor::invertColor \\nTimestamp: 11/20/2020 12:04:59 AM \\n--------------------------------- \\n® DARKKO 2020 © \\n=================================\\n**/ \\n\\nimport static org.junit.Assert.assertArrayEquals; \\nimport org.junit.Test; \\n\\npublic class RgbColorTest {\\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertArrayEquals(new int[] {0, 0, 0}, RgbColor.invertColor(new int[] {255, 255, 255}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertArrayEquals(new int[] {255, 255, 255}, RgbColor.invertColor(new int[] {0, 0, 0}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertArrayEquals(new int[] {90, 85, 34}, RgbColor.invertColor(new int[] {165, 170, 221}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertArrayEquals(new int[] {243, 242, 55}, RgbColor.invertColor(new int[] {12, 13, 200}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertArrayEquals(new int[] {243, 238, 58}, RgbColor.invertColor(new int[] {12, 17, 197}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertArrayEquals(new int[] {12, 13, 20}, RgbColor.invertColor(new int[] {243, 242, 235}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertArrayEquals(new int[] {90, 85, 136}, RgbColor.invertColor(new int[] {165, 170, 119}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertArrayEquals(new int[] {90, 85, 119}, RgbColor.invertColor(new int[] {165, 170, 136}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test09() { \\n\\t\\tassertArrayEquals(new int[] {90, 85, 102}, RgbColor.invertColor(new int[] {165, 170, 153}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() { \\n\\t\\tassertArrayEquals(new int[] {90, 85, 85}, RgbColor.invertColor(new int[] {165, 170, 170}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test11() { \\n\\t\\tassertArrayEquals(new int[] {90, 85, 68}, RgbColor.invertColor(new int[] {165, 170, 187}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test12() { \\n\\t\\tassertArrayEquals(new int[] {90, 85, 51}, RgbColor.invertColor(new int[] {165, 170, 204}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test13() { \\n\\t\\tassertArrayEquals(new int[] {90, 85, 34}, RgbColor.invertColor(new int[] {165, 170, 221}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test14() { \\n\\t\\tassertArrayEquals(new int[] {90, 85, 17}, RgbColor.invertColor(new int[] {165, 170, 238}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test15() { \\n\\t\\tassertArrayEquals(new int[] {90, 75, 255}, RgbColor.invertColor(new int[] {165, 180, 0}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test16() { \\n\\t\\tassertArrayEquals(new int[] {90, 75, 238}, RgbColor.invertColor(new int[] {165, 180, 17}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test17() { \\n\\t\\tassertArrayEquals(new int[] {90, 75, 221}, RgbColor.invertColor(new int[] {165, 180, 34}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test18() { \\n\\t\\tassertArrayEquals(new int[] {90, 75, 204}, RgbColor.invertColor(new int[] {165, 180, 51}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test19() { \\n\\t\\tassertArrayEquals(new int[] {90, 75, 187}, RgbColor.invertColor(new int[] {165, 180, 68}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test20() { \\n\\t\\tassertArrayEquals(new int[] {90, 75, 170}, RgbColor.invertColor(new int[] {165, 180, 85}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test21() { \\n\\t\\tassertArrayEquals(new int[] {90, 75, 153}, RgbColor.invertColor(new int[] {165, 180, 102}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test22() { \\n\\t\\tassertArrayEquals(new int[] {255, 255, 255}, RgbColor.invertColor(new int[] {0, 0, 0}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test23() { \\n\\t\\tassertArrayEquals(new int[] {255, 255, 238}, RgbColor.invertColor(new int[] {0, 0, 17}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test24() { \\n\\t\\tassertArrayEquals(new int[] {255, 255, 221}, RgbColor.invertColor(new int[] {0, 0, 34}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test25() { \\n\\t\\tassertArrayEquals(new int[] {255, 255, 204}, RgbColor.invertColor(new int[] {0, 0, 51}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test26() { \\n\\t\\tassertArrayEquals(new int[] {255, 255, 187}, RgbColor.invertColor(new int[] {0, 0, 68}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test27() { \\n\\t\\tassertArrayEquals(new int[] {15, 5, 102}, RgbColor.invertColor(new int[] {240, 250, 153}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test28() { \\n\\t\\tassertArrayEquals(new int[] {15, 5, 85}, RgbColor.invertColor(new int[] {240, 250, 170}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test29() { \\n\\t\\tassertArrayEquals(new int[] {15, 5, 68}, RgbColor.invertColor(new int[] {240, 250, 187}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test30() { \\n\\t\\tassertArrayEquals(new int[] {15, 5, 51}, RgbColor.invertColor(new int[] {240, 250, 204}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test31() { \\n\\t\\tassertArrayEquals(new int[] {15, 5, 34}, RgbColor.invertColor(new int[] {240, 250, 221}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test32() { \\n\\t\\tassertArrayEquals(new int[] {15, 5, 17}, RgbColor.invertColor(new int[] {240, 250, 238}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test33() { \\n\\t\\tassertArrayEquals(new int[] {0, 0, 0}, RgbColor.invertColor(new int[] {255, 255, 255}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test34() { \\n\\t\\tassertArrayEquals(new int[] {15, 75, 119}, RgbColor.invertColor(new int[] {240, 180, 136}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test35() { \\n\\t\\tassertArrayEquals(new int[] {15, 75, 102}, RgbColor.invertColor(new int[] {240, 180, 153}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test36() { \\n\\t\\tassertArrayEquals(new int[] {15, 75, 85}, RgbColor.invertColor(new int[] {240, 180, 170}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test37() { \\n\\t\\tassertArrayEquals(new int[] {15, 75, 68}, RgbColor.invertColor(new int[] {240, 180, 187}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test38() { \\n\\t\\tassertArrayEquals(new int[] {15, 75, 51}, RgbColor.invertColor(new int[] {240, 180, 204}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test39() { \\n\\t\\tassertArrayEquals(new int[] {15, 75, 34}, RgbColor.invertColor(new int[] {240, 180, 221}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test40() { \\n\\t\\tassertArrayEquals(new int[] {15, 75, 17}, RgbColor.invertColor(new int[] {240, 180, 238}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test41() { \\n\\t\\tassertArrayEquals(new int[] {15, 65, 255}, RgbColor.invertColor(new int[] {240, 190, 0}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test42() { \\n\\t\\tassertArrayEquals(new int[] {15, 65, 238}, RgbColor.invertColor(new int[] {240, 190, 17}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test43() { \\n\\t\\tassertArrayEquals(new int[] {15, 65, 221}, RgbColor.invertColor(new int[] {240, 190, 34}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test44() { \\n\\t\\tassertArrayEquals(new int[] {15, 65, 204}, RgbColor.invertColor(new int[] {240, 190, 51}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test45() { \\n\\t\\tassertArrayEquals(new int[] {15, 65, 187}, RgbColor.invertColor(new int[] {240, 190, 68}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test46() { \\n\\t\\tassertArrayEquals(new int[] {15, 65, 170}, RgbColor.invertColor(new int[] {240, 190, 85}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test47() { \\n\\t\\tassertArrayEquals(new int[] {15, 65, 153}, RgbColor.invertColor(new int[] {240, 190, 102}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test48() { \\n\\t\\tassertArrayEquals(new int[] {15, 65, 136}, RgbColor.invertColor(new int[] {240, 190, 119}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test49() { \\n\\t\\tassertArrayEquals(new int[] {15, 65, 119}, RgbColor.invertColor(new int[] {240, 190, 136}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test50() { \\n\\t\\tassertArrayEquals(new int[] {15, 65, 102}, RgbColor.invertColor(new int[] {240, 190, 153}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test51() { \\n\\t\\tassertArrayEquals(new int[] {15, 65, 85}, RgbColor.invertColor(new int[] {240, 190, 170}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test52() { \\n\\t\\tassertArrayEquals(new int[] {15, 65, 68}, RgbColor.invertColor(new int[] {240, 190, 187}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test53() { \\n\\t\\tassertArrayEquals(new int[] {15, 65, 51}, RgbColor.invertColor(new int[] {240, 190, 204}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test54() { \\n\\t\\tassertArrayEquals(new int[] {15, 65, 34}, RgbColor.invertColor(new int[] {240, 190, 221}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test55() { \\n\\t\\tassertArrayEquals(new int[] {15, 65, 17}, RgbColor.invertColor(new int[] {240, 190, 238}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test56() { \\n\\t\\tassertArrayEquals(new int[] {15, 55, 255}, RgbColor.invertColor(new int[] {240, 200, 0}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test57() { \\n\\t\\tassertArrayEquals(new int[] {15, 55, 238}, RgbColor.invertColor(new int[] {240, 200, 17}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test58() { \\n\\t\\tassertArrayEquals(new int[] {15, 55, 221}, RgbColor.invertColor(new int[] {240, 200, 34}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test59() { \\n\\t\\tassertArrayEquals(new int[] {15, 55, 204}, RgbColor.invertColor(new int[] {240, 200, 51}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test60() { \\n\\t\\tassertArrayEquals(new int[] {15, 55, 187}, RgbColor.invertColor(new int[] {240, 200, 68}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test61() { \\n\\t\\tassertArrayEquals(new int[] {15, 55, 170}, RgbColor.invertColor(new int[] {240, 200, 85}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test62() { \\n\\t\\tassertArrayEquals(new int[] {15, 55, 153}, RgbColor.invertColor(new int[] {240, 200, 102}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test63() { \\n\\t\\tassertArrayEquals(new int[] {15, 55, 136}, RgbColor.invertColor(new int[] {240, 200, 119}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test64() { \\n\\t\\tassertArrayEquals(new int[] {15, 55, 119}, RgbColor.invertColor(new int[] {240, 200, 136}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test65() { \\n\\t\\tassertArrayEquals(new int[] {15, 55, 102}, RgbColor.invertColor(new int[] {240, 200, 153}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test66() { \\n\\t\\tassertArrayEquals(new int[] {15, 55, 85}, RgbColor.invertColor(new int[] {240, 200, 170}));\\n\\t}\\n}\",\"language\":\"java\",\"quality\":4.822222222222222,\"summary\":\"Create a function that inverts the rgb values in an array.\\n\\nExamples\\ninvertColor([255, 255, 255]) ➞ [0, 0, 0]\\n// [255, 255, 255] is the color white.\\n// The opposite is [0, 0, 0], which is black.\\n\\ninvertColor([12, 13, 200]) ➞ [243, 242, 55]\\n\\ninvertColor([12, 17, 197]) ➞ [243, 238, 58]\\n\\ninvertColor([243, 242, 235]) ➞ [12, 13, 20]\\n\\ninvertColor([0, 0, 0]) ➞ [255,\",\"tags\":[\"data_structures\",\"algebra\"],\"timestamp\":{\"$date\":1605803589349},\"title\":\"Invert Colors\",\"stats\":{\"completed\":{\"total\":184,\"ratings\":[1,1,1,1,1,1,2,1,0,0,1,0,1,0,0,0,0,0,1,1,0,2,1,0,0,0,1,1,1,0,0,1,2,1,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,1,2,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,2,0,0,0,0,1,0,1,2,0,0,1,0,5,1,2,1,0,0,0,1,0,0,2,0,0,1,1,0,1,1,0,0,1,0,0,0,2,0,0,0,1,0,1,1,0,0,0,0,0,1,2,0,1,2,0,0,2,0,0,0],\"quality\":[5,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,5,5,5,4,5,4,5,3,5,5,3],\"rators\":[\"a777e8chPvJkY3tKa\",\"9xHuq4wbCfEenJAGB\",\"mYtKxYPbLLnePeJH3\",\"8Xx8nWXRydHDBGfQf\",\"mQKWauR6b252TmdX4\",\"JkxYrKcNJPaT9Fsc7\",\"AeJSxRqw2dJZuGvdk\",\"h8BevDtg6FrXYyv8Y\",\"Z5P5KFLDXWiL97Na2\",\"RAEFpazbe6mhx3PLb\",\"ikxSkiQjCjYPsFwMT\",\"ZjEdErENicjeqKZ8g\",\"qaPjAANdnxFnWfj5d\",\"CNc6rmwhbxkxEhHAp\",\"W56bWmpQeLJ9JEDsa\",\"Fdq6CxMWZL8WZiNaM\",\"jXTnL3JatkKjoifyb\",\"Es4eX2stRpyoXeC7f\",\"jyoLggHk8xQKZuoQC\",\"Yohr2MmAyaWGMbB35\",\"cueHAmTrcWuowXf58\",\"8DfhSneJpsw5uqLeM\",\"hhxjQREtmHSheH9Pj\",\"mLPfS53i3c4Yf3jQ3\",\"47PyFbZyxWuP9Bgga\",\"gBGjCfJvPHswDM5JQ\",\"bWWFscsAr66ZWHo28\",\"m8RTLuXqmythXHYZt\",\"3EfDGZ9Sgz5zxzD7a\",\"M3fTYWJX2hb3vuEGJ\",\"FrorBN8wRAoptuxtR\",\"2bemiz7sjLjCbA5ui\",\"2wS9Wm3Nj5ZFcMnfA\",\"uFfEio8nzDvL8emhp\",\"69K8S2NbzkqE9pAe5\",\"neNNSEbgzx79GYshu\",\"unNqQjSHzkb4pCzEu\",\"dcW9oK2uRo8h8mBe2\",\"rojdHfAAuAYxoaEXp\",\"bmsDTBJAPBpGjfhHj\",\"Nb6LYPoQP6KJZt8mz\",\"J7epB3qSQJ2E8vWkY\",\"44arJN5SYx3HyfetA\",\"sacPXRKX59BE495oz\",\"pi76g3eRpnKrhee2a\",\"NLijbfPqDkaxxBe6g\",\"NioGGZL9KCn5Ln96t\",\"hseQSt2EJ5uvb2pQv\",\"rWhXHhzF4W8bea6LP\",\"5jDgvkGd4JwatrYXg\",\"a49eNnfRwSMxsDJXf\",\"2ScA9s5nu35nSMDpt\",\"Yj7ftjzyP67R5NFrH\",\"sYKPxZX5xJZ2GTp6Q\",\"SbDRsLR6yfZXETyKN\",\"oMZovHkR6QqNvQwyc\",\"A3KrxZk4FiSymY6f2\",\"2cdvd8yuPLSwvGj9w\",\"5f6oSeq4r5WTXLdCQ\",\"LCuvvWMwiGuqTwNRi\",\"btabi3PdyisuY5tn9\",\"F6PjxkXT5T6LAPwP8\",\"8WeJLyNE4h6nJ2dNh\",\"6YzZ4rMJdXLSBWpNN\",\"Wi4H6ayKsNDWWQCG5\",\"6iY9kWea8jBRxWG3X\",\"EcBw39vkywQsT3Y2Z\",\"SY5wqJS9RJYYMJ6sy\",\"94XQj7wutz9ySewYC\",\"QRv96jmNaYsWkxQEG\",\"Pmc5RhkL59W7o8j6M\",\"3SgSNoAB3sxaYeT3w\",\"NXtM3si2K3i4DySMn\",\"HCfkcKnPs9mrJojdG\",\"DovtrH78NMjjpDNGg\",\"umE8dRTGWzrZFp755\",\"KfiC26uKTajpaKj75\",\"b6PEkvr66YeCamroN\",\"YuA7rdrQTzpfFLGJq\",\"6MgG8N9rkmAZKYrJ3\",\"GkYtSbQuheBF4Enys\",\"82weQfHHmno4Mq4X7\",\"x9CWxL7Q7yCHdrAmq\",\"cwwW2amYGZMkYwAxM\",\"vRXuYYBNuHEQ29fbm\",\"dD3Aja8PZSMXMFSDY\",\"HPkqYgjNtESED9Z88\",\"eQXwk5zGckM8tCWYH\",\"srJ34BaybkQh3qRkM\",\"c96gH88NsjR3MycAj\",\"buX4mCQhtXCfBjeno\",\"tuD6GTaiyfWm87uvh\",\"owyG9e6x47Qzv8ASo\",\"Xc4m9Hst8SgXswpTh\",\"yb8T3nuL4evaeJW6k\",\"ScYoZtxALtkZXKLo4\",\"8qNSPHZBpmjSTt3tH\",\"CtcMetTXaFgX6Evvf\",\"hntRvHiKyyngsYDDh\",\"bvMk787SfaBkTozG4\",\"KypQdzThzogKXwkXE\",\"fGSQQds3A8gP6rc5h\",\"4ySzqKC5s3ZRpG9di\",\"9qoWqLcHGiDX429rE\",\"dQd664XYR6QKHFvHW\",\"2ptN2mhjFwFcHyPZd\",\"xEX3TDY6C2h82dJTn\",\"4eohPX9yGp8tnADef\",\"5LDvZHCDJqePeBrCg\",\"p8hkfoXChHNEFDNbM\",\"khdCaD6AGBiR6txLQ\",\"zrk4J9JseJSk5i7nG\",\"Kn5jGPkzjMTaFTCxH\",\"HXbTKW3jmmyRAsKrr\",\"TCvpT4EPb8qNssNB7\",\"sxci7DYKNa6q22Sjq\",\"wFRLGjA56kj7xyhmv\",\"8BFSTCnoe2QggN64c\",\"4or6DkZYDmjHy4KS2\",\"3qgJpdhyi4tKuqMdm\",\"3o9xehumCaHZ4upFo\",\"R59WsfpdtghPxgNzb\",\"H469XosMjfNu8Fop7\",\"9RJpt5ec2KMLuac4w\",\"CEGtfkp8BpeLWs7e9\",\"D3ASM3aWpcQ8gvnin\",\"uw47663LqPME8btaA\",\"gZj6HTKJdPGJwPe2D\",\"qCc8rkdE2oBqG2RYE\",\"Gn8rShvWCKLX3cxzx\",\"zPibDqqdNirSWSbdg\",\"PCsT29KNEX8ufEawi\",\"rhS8qXRjZcpDXkwnE\",\"aYCB22cDSkNpoGeD7\",\"cR3ibTMxLyEdDFCHY\",\"6KDZNmtgvb6PCaWQE\",\"mJE5tdmHJpdzmdNnT\",\"zfyRY2ZoTpJmy6EHu\",\"K9sQFTWhKP4nkPQcb\",\"htXCitorobtqYymjN\",\"DEDniTrstQYGounXT\",\"KMR6vNzvSKMA2cXnK\",\"n62wkzjFZmdLhuuNQ\",\"RsujLHaML6L3KinzK\",\"gL9Royt9WHkGFjgzE\",\"PPdaczxSt2u5cmZYG\",\"QMcxci638CgTJ54bH\",\"9moo5f7g8KrZieT2K\",\"GSs7rtv3hBbJA3aCF\",\"qoZrXudcaHo8QLFsj\",\"unqzSsxpxj9sZ7rbD\",\"gFEpzrgWhzCZHeifj\",\"xLy94bAjaLwokPcZZ\",\"kBEY3pzwo8NZw5h35\",\"w99WfQNYsNAyJRM4C\",\"x2Cz7S8rCKJqCE3Xe\",\"F8dA24AosSC8XXb7D\",\"9du58gNDkWQEWivbB\",\"5HGyJtoZ3AffzAZAv\",\"B4y8aoyXJtskYPFEL\",\"6knv3fZk9DwzkuAoZ\",\"3exyrcibvzm6oe8eq\",\"C6prbNbCwgh4GrXdD\",\"hF9icm7GxAnAGSjAD\",\"5QN8R22z43SrwoHDz\",\"LkvCXdcjb5vZstveu\",\"HsFc9PgmpP2X9Fwh9\",\"r72oFMcCQh4rBsKHb\",\"nFbmNzMQ38TncmfQX\",\"5SFF2xjZxxwDciGfn\",\"3Gf7ikLijfoxabiPY\",\"YEMQNE333gAXhGE4c\",\"XhzKztoQYYQzZ2c7o\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"v2Xk5fXkBrYq7dA83\",\"language\":\"cpp\"},{\"_id\":\"rhxxyrHreLDm6qJLu\",\"language\":\"java\"},{\"_id\":\"5oyDEx24RC8qJxDRk\",\"language\":\"javascript\"},{\"_id\":\"i6hY9JSjQK4jcaB6i\",\"language\":\"python3\"},{\"_id\":\"3EjgdMKAcMs6Jf23K\",\"language\":\"ruby\"}]}}"]