a["{\"msg\":\"result\",\"id\":\"427\",\"result\":{\"_id\":\"WzE2id9w5mNfXozKL\",\"author\":\"Nguyen Phan Dang\",\"authorId\":\"YLqdr7bYjwew2KM4N\",\"code\":\"public class ChallengeTests {\\n\\tpublic static int countBoomerangs(int[] arr) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":1.5701754385964912,\"familyId\":\"d7PjZjpTFTZgapdXW\",\"instructions\":\"A **boomerang** is a V-shaped sequence that is either upright or upside down. Specifically, a boomerang can be defined as: **sub-array of length 3, with the first and last digits being the same and the middle digit being different**.\\n\\nSome boomerang examples:\\n\\n```\\n[3, 7, 3], [1, -1, 1], [5, 6, 5]\\n```\\n\\nCreate a function that returns the total number of  **boomerangs** in an array.\\n\\nTo illustrate:\\n\\n```\\n[3, 7, 3, 2, 1, 5, 1, 2, 2, -2, 2]\\n// 3 boomerangs in this sequence:  [3, 7, 3], [1, 5, 1], [2, -2, 2]\\n```\\n\\nBe aware that boomerangs can overlap, like so:\\n\\n```\\n[1, 7, 1, 7, 1, 7, 1]\\n// 5 boomerangs (from left to right): [1, 7, 1], [7, 1, 7], [1, 7, 1], [7, 1, 7], and [1, 7, 1]\\n```\\n\\n### Examples\\n```\\ncountBoomerangs([9, 5, 9, 5, 1, 1, 1]) ➞ 2\\n\\ncountBoomerangs([5, 6, 6, 7, 6, 3, 9]) ➞ 1\\n\\ncountBoomerangs([4, 4, 4, 9, 9, 9, 9]) ➞ 0\\n```\\n\\n### Notes\\n`[5, 5, 5]` (triple identical digits) is NOT considered a boomerang because the middle digit is identical to the first and last.\",\"isHidden\":false,\"lab\":\"import static org.junit.Assert.assertEquals;\\nimport org.junit.Test;\\n\\npublic class ChallengeTestCountBoomerangs {\\n\\t@Test\\n\\tpublic void test1() {\\n\\t\\tassertEquals(ChallengeTests.countBoomerangs(new int[] {9, 5, 9, 5, 1, 1, 1}), 2);\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test2() {\\n\\t\\tassertEquals(ChallengeTests.countBoomerangs(new int [] {5, 6, 6, 7, 6, 3, 9}), 1);}\\n\\n\\t@Test\\n\\tpublic void test3() {\\n\\t\\tassertEquals(ChallengeTests.countBoomerangs(new int[] { 4, 4, 4, 9, 9, 9, 9 }), 0);\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test4() {\\n\\t\\tassertEquals(ChallengeTests.countBoomerangs(new int [] {5, 9, 5, 9, 5}), 3);}\\n\\n\\t@Test\\n\\tpublic void test5() {\\n\\t\\tassertEquals(ChallengeTests.countBoomerangs(new int [] {4, 4, 4, 8, 4, 8, 4}), 3);}\\n\\n\\t@Test\\n\\tpublic void test6() {\\n\\t\\tassertEquals(ChallengeTests.countBoomerangs(new int [] {2, 2, 2, 2, 2, 2, 3}), 0);}\\n\\n\\t@Test\\n\\tpublic void test7() {\\n\\t\\tassertEquals(ChallengeTests.countBoomerangs(new int [] {2, 2, 2, 2, 3, 2, 3}), 2);}\\n\\n\\t@Test\\n\\tpublic void test8() {\\n\\t\\tassertEquals(ChallengeTests.countBoomerangs(new int [] {1, 2, 1, 1, 1, 2, 1}), 2);}\\n\\n\\t@Test\\n\\tpublic void test9() {\\n\\t\\tassertEquals(ChallengeTests.countBoomerangs(new int [] {5, 1, 1, 1, 1, 4, 1}), 1);}\\n\\n\\t@Test\\n\\tpublic void test10() {\\n\\t\\tassertEquals(ChallengeTests.countBoomerangs(new int [] {3, 7, 3, 2, 1, 5, 1, 2, 2, -2, 2}), 3);}\\n\\n\\t@Test\\n\\tpublic void test11() {\\n\\t\\tassertEquals(ChallengeTests.countBoomerangs(new int [] {1, 7, 1, 7, 1, 7, 1}), 5);}\\n\\n\\t@Test\\n\\tpublic void test12() {\\n\\t\\tassertEquals(ChallengeTests.countBoomerangs(new int [] {5, 5, 5}), 0);}\\n}\",\"language\":\"java\",\"summary\":\"A boomerang is a V-shaped sequence that is either upright or upside down. Specifically, a boomerang can be defined as: sub-array of length 3, with the first and last digits being the same and the middle digit being different.\\n\\nSome boomerang examples:\\n\\n[3, 7, 3], [1, -1, 1], [5, 6, 5]\\n\\nCreate a function that returns the total number of  boomerangs in an array.\",\"tags\":[\"arrays\",\"loops\"],\"timestamp\":{\"$date\":1594272738884},\"title\":\"Number of Boomerangs\",\"stats\":{\"completed\":{\"total\":170,\"ratings\":[2,2,2,2,2,3,2,3,0,0,3,2,1,3,0,2,0,0,1,1,0,2,1,2,3,2,2,1,2,0,0,1,2,1,1,1,2,2,2,2,1,1,1,1,1,4,2,1,1,2,1,1,0,1,0,2,1,1,2,1,2,2,1,2,1,1,2,2,4,1,3,2,2,2,1,3,2,1,3,2,2,2,2,1,1,1,2,2,2,1,3,1,2,1,1,2,2,2,0,2,2,2,2,2,1,2,3,1,1,1,1,2,1,2],\"rators\":[\"YLqdr7bYjwew2KM4N\",\"jyoLggHk8xQKZuoQC\",\"TrquEHytntLKHA4m2\",\"YFXEiyirZjoFRQSym\",\"k63LjKkX5p7SYng7C\",\"mfm3gB39arY8Rjb2y\",\"wsjr8C33NPyGYAqKu\",\"rehehi2Tr2mwaEoJE\",\"f98H9XF8BxpCEcihb\",\"9pCPyhvQmbkWyD2LL\",\"y6kfyYmydcD8tkBk7\",\"6XDeQYAYQL8b5p5Dq\",\"wYYMNPe8nSiJFbvJw\",\"5seiNqw6ZXoF2GRRd\",\"9creP9iJdnhomMXxz\",\"B4pxRqzo43M7S8FbP\",\"DzvdGwHEjqsX7wyKr\",\"xnKa8qaqj3rYXxYrs\",\"uuN5sdoMNjtRZwXiL\",\"nCTCEiXv6kb4wt7GC\",\"26uR8nRhLmyr7n6rt\",\"3YiFqAnaXEDpSmgBh\",\"htXCitorobtqYymjN\",\"rvojHhKH3DaxotefQ\",\"g4NCSxxHqHCGMpWwT\",\"jRqY4i8gPemsZMBGf\",\"j428nMyNKY8g2dcCi\",\"sJaSeR649EEMX9F4v\",\"5p6bwXayfAp7Y4WQ7\",\"qraDA47Ewou5mzvrL\",\"kiRkuN7JXqvWBa4SG\",\"MCjdtAAjL6sGLukPr\",\"2jH5PTxFP9bguXT4G\",\"87otmbdqNT3bHsQFu\",\"ZPNk8KwpqXDgu3ALt\",\"rWhXHhzF4W8bea6LP\",\"Fd9765rksgPK4E2Zy\",\"muXMnzQwGLzN6j2Jr\",\"etoSR23iELGGgs9rA\",\"YcjwCvYut6834Jzd8\",\"Ym8AjbKGSJooun3nt\",\"ErhfNiFyNkHZR4szx\",\"K2vkigJohzsDnGeYY\",\"xWh8GpcK2dTMot4WN\",\"YFHkjbM6obMSj24zi\",\"yv7c4H2jimSKHEjtG\",\"aJNFEXviXgWQsSpAE\",\"Dfi5TiKaasaHsfFSo\",\"Es4eX2stRpyoXeC7f\",\"yXGiiSAR5nBHnH3yr\",\"uh9YqTXiGRJBRRJNE\",\"sAdpvrN5y9fNJhQQv\",\"hpbyiuDF2QHeFFKwx\",\"vHLLTinKZxnnkhtKX\",\"jb9RLyyuo565bKDzN\",\"C9yBWYcZsjmJYww3K\",\"82weQfHHmno4Mq4X7\",\"p7E4zgK8iGPwvfD4t\",\"AeJSxRqw2dJZuGvdk\",\"jzMeadXm6oi7LMFii\",\"TsEuJMtR6iCcTK6Wd\",\"oMfq73A434YWhSuWQ\",\"zTM2NbjE6q5Q2HSeF\",\"8Xx8nWXRydHDBGfQf\",\"azAzSkvJd7eyXY9x9\",\"BbcH2NLjE4tKAZ3wR\",\"dcW9oK2uRo8h8mBe2\",\"yd5PakB2z33q2JrTZ\",\"kabqCExooax4JEQHE\",\"unNqQjSHzkb4pCzEu\",\"udHFfcqNNej6udnpP\",\"tyLS9T6YMfg9fMtYJ\",\"GGePNtrcQtXrCRSCw\",\"mQKWauR6b252TmdX4\",\"owzLfow4poTz55Ss2\",\"uYv96ZSpA7tBHoAGX\",\"FeRhdBde27zg3vD2F\",\"mikaNZRsDpqufTL3J\",\"H9ec2HYjvHjNDMoTC\",\"rtqYJmXqpkwuyv2Qu\",\"a49eNnfRwSMxsDJXf\",\"gBGjCfJvPHswDM5JQ\",\"WYtka4AWKYjEPCckZ\",\"EFB9585PmrBqfFYTR\",\"pi76g3eRpnKrhee2a\",\"T94DT5gxK2nW8ZeNa\",\"9AW9qZKgc8Qx2kYAP\",\"TGSuE3JxgfYTQePrA\",\"yGdecNrguKv8BszZ6\",\"dEmNwv3BHhHxFpeaT\",\"dPjq5Lh7CzShMt5YJ\",\"qKCoetaEfyzyLWigT\",\"78jr9niDyrYuiCXnX\",\"Z3pNLguuWJQ4cY4BY\",\"svEXtHkZT7ohS5fzc\",\"9ihTRjgd3JoY9u3fY\",\"PAQjMSBKHTwPd24aR\",\"jr7WDLhDi3oASK2a3\",\"2srzXciS96iRpGiet\",\"MQwqRxatD83h4Pgca\",\"2gXdkk94hjBs3avx6\",\"ZpsHtddgvzz9QDiy5\",\"Xs8qzkHqk6AbPGeEP\",\"buX4mCQhtXCfBjeno\",\"zhBLdEk5WtthZdhRD\",\"LNhNAfSx4NCa6JALx\",\"eCMZTcMwCn6ciWdGQ\",\"TgwiNBGSSG2WxHHjK\",\"jDxmYReTXZD95QifJ\",\"bur3yQ8s34zqKGEro\",\"kBn7hv6DtgKJJ99Lh\",\"hhxjQREtmHSheH9Pj\",\"DkSMZ3jZLkwviKb9g\",\"zZfMwLuoERGmybgib\",\"BnaE25vvCGcfL3jiQ\",\"5s2yQtXYw5Kon724b\",\"t3aHKbhtAebzSDeqM\",\"4ySzqKC5s3ZRpG9di\",\"sxci7DYKNa6q22Sjq\",\"svMYs8upnNMimGwNT\",\"rhS8qXRjZcpDXkwnE\",\"zLGFGHBjCBYHg3XuQ\",\"srJ34BaybkQh3qRkM\",\"8fs4x7L2KrrYhs7hq\",\"J9zJq7PMGb6mqzcHW\",\"hSvLZyJJ83zpRgTzL\",\"GDd9t99qiRQhiRqMg\",\"uf6pJu3SGdnugtZtk\",\"pNDBY8ogrPB9JePwv\",\"jCjCvyhqhpebkJn34\",\"KMR6vNzvSKMA2cXnK\",\"KQLgxz3dHCNHonMrS\",\"PJu3WcTpfRrvHfQiS\",\"zc8HkmpfiEXqKXNBs\",\"mgXbnxqifQCZmyd6f\",\"WczJXQaJ3gkxTE63v\",\"unqzSsxpxj9sZ7rbD\",\"byLcacnySm4m8FaJv\",\"G3Qacijgi3ruy2d5Q\",\"FxPDKKibxnZjGJLs6\",\"EfMq8kgxbRHq7fFoW\",\"muGBEdcs6qwKRhbjs\",\"YQXafFKnxSdF2bvPr\",\"uw47663LqPME8btaA\",\"Ddyw7KdMdeqPwmnxC\",\"8DF2Y3yyZTSCCpXGf\",\"PAEWysAAFheYiYPBp\",\"YAzCMKmAZQWX4GHLM\",\"Qv2jEtTnFCXX7cdd3\"],\"quality\":[3,2,5,5,5,5,5,5,5,4,5,5,5,5,5,3,5,5,5,5,5,3,5,4,4,5,4,5,5,5,3,4,5,5,5,5,5,3,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":4.55,\"family\":[{\"_id\":\"oL3q28iPjuo5BWHu9\",\"language\":\"cpp\"},{\"_id\":\"WzE2id9w5mNfXozKL\",\"language\":\"java\"},{\"_id\":\"b7iHQDw72zzkmgCun\",\"language\":\"javascript\"},{\"_id\":\"9G8BtvMq7q3ktXtXG\",\"language\":\"php\"},{\"_id\":\"25zkiePFYRpickxnB\",\"language\":\"python3\"},{\"_id\":\"4FwRQKAGy7pooxmR2\",\"language\":\"ruby\"},{\"_id\":\"X8edWGYQhFK8wd968\",\"language\":\"swift\"}]}}"]