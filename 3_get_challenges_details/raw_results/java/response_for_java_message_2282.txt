a["{\"msg\":\"result\",\"id\":\"699\",\"result\":{\"_id\":\"A8xQZTqzkn88cLCmj\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"public class Challenge {\\n  public static boolean canMove(String piece, String current, String target) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":2.7142857142857144,\"familyId\":\"Fw5iKeZRJ53jey8hx\",\"instructions\":\"Create a function that takes the name of a chess piece, its position and a target position. The function should return `true` if the piece can move to the target and `false` if it can't.\\n\\nThe possible inputs are \\\"Pawn\\\", \\\"Knight\\\", \\\"Bishop\\\", \\\"Rook\\\", \\\"Queen\\\" and \\\"King\\\".\\n\\n### Examples\\n```\\ncanMove(\\\"Rook\\\", \\\"A8\\\", \\\"H8\\\") ➞ true\\n\\ncanMove(\\\"Bishop\\\", \\\"A7\\\", \\\"G1\\\") ➞ true\\n\\ncanMove(\\\"Queen\\\", \\\"C4\\\", \\\"D6\\\") ➞ false\\n```\\n\\n### Notes\\n- Do not include pawn capture moves and en passant.\\n- Do not include castling.\\n- Remember to include pawns' two-square move on the second rank!\\n- Look for patterns in the movement of the pieces.\",\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n  @Test\\n  public void test1() {\\n    assertEquals(true, Challenge.canMove(\\\"Pawn\\\", \\\"A5\\\", \\\"A6\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test2() {\\n    assertEquals(true, Challenge.canMove(\\\"Pawn\\\", \\\"G2\\\", \\\"G4\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test3() {\\n    assertEquals(false, Challenge.canMove(\\\"Pawn\\\", \\\"C6\\\", \\\"D7\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test4() {\\n    assertEquals(true, Challenge.canMove(\\\"Knight\\\", \\\"F5\\\", \\\"E3\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test5() {\\n    assertEquals(false, Challenge.canMove(\\\"Knight\\\", \\\"F6\\\", \\\"E5\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test6() {\\n    assertEquals(true, Challenge.canMove(\\\"Bishop\\\", \\\"B4\\\", \\\"E7\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test7() {\\n    assertEquals(false, Challenge.canMove(\\\"Bishop\\\", \\\"B6\\\", \\\"F5\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test8() {\\n    assertEquals(true, Challenge.canMove(\\\"Rook\\\", \\\"A8\\\", \\\"H8\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test9() {\\n    assertEquals(false, Challenge.canMove(\\\"Rook\\\", \\\"A8\\\", \\\"H7\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test10() {\\n    assertEquals(true, Challenge.canMove(\\\"Queen\\\", \\\"A8\\\", \\\"H1\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test11() {\\n    assertEquals(false, Challenge.canMove(\\\"Queen\\\", \\\"A6\\\", \\\"H4\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test12() {\\n    assertEquals(true, Challenge.canMove(\\\"King\\\", \\\"C4\\\", \\\"D5\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test13() {\\n    assertEquals(false, Challenge.canMove(\\\"King\\\", \\\"B7\\\", \\\"B5\\\"));\\n  }\\n}\",\"language\":\"java\",\"summary\":\"Create a function that takes the name of a chess piece, its position and a target position. The function should return true if the piece can move to the target and false if it can't.\\n\\nThe possible inputs are \\\"Pawn\\\", \\\"Knight\\\", \\\"Bishop\\\", \\\"Rook\\\", \\\"Queen\\\" and \\\"King\\\".\\n\\nExamples\\ncanMove(\\\"Rook\\\", \\\"A8\\\", \\\"H8\\\") ➞ true\\n\\ncanMove(\\\"Bishop\\\", \\\"A7\\\", \\\"G1\\\") ➞ true\\n\\ncanMove(\\\"Queen\",\"tags\":[\"games\",\"logic\",\"algorithms\",\"validation\"],\"timestamp\":{\"$date\":1568688383356},\"title\":\"Chess Pieces\",\"stats\":{\"completed\":{\"total\":42,\"ratings\":[3,3,3,3,3,3,2,4,0,4,2,3,1,1,3,3,3,3,2,4,3,2,1,5,3,4,2,2,4,1,2,4,3,3,3],\"rators\":[\"qYds8kxr4MdsdyhFE\",\"5Qvy7fNM2YEQ6PtbY\",\"YF79LnTdprobbYY5v\",\"cpTAZ6r4gH5TZ6zD2\",\"pzz8vFouna6JTTAiW\",\"Prw5Jq38wrSoj5QSF\",\"CLmJduqJHX83dM4Pd\",\"oDZaopxpPAdqWXLqz\",\"rehehi2Tr2mwaEoJE\",\"duJHsCbftftwZiMCf\",\"jBbd6xWgNR82H68vR\",\"A9eMaKGSpao4bJTdi\",\"Es4eX2stRpyoXeC7f\",\"wbSLghDxkTjiYJrEH\",\"gGnDsJz5hr2t9MKCF\",\"TrquEHytntLKHA4m2\",\"kkyZ4oyYQC898Nttj\",\"fZjkX29nhRTWWb75k\",\"jyoLggHk8xQKZuoQC\",\"Y2JmoN6pFCTLRXxwH\",\"DkSMZ3jZLkwviKb9g\",\"62Q2HcfLE6SGphZkT\",\"k63LjKkX5p7SYng7C\",\"Ym8AjbKGSJooun3nt\",\"MBEwq8srjd2oA5W58\",\"gXTAie79kiw28tx5u\",\"QfjvAWZnumxpSYpzQ\",\"iq55QasecYJXKz8rx\",\"5E2ZXZvkJcZvRkkEA\",\"gXmjKF8FNhsQN2wGa\",\"EQrbrQdcwkkjJMa2y\",\"PvWK6XvMrHy7rLnvs\",\"2NJZbusRvu3eJ4tHu\",\"sxci7DYKNa6q22Sjq\",\"uw47663LqPME8btaA\"],\"quality\":[3,5,4,3,3]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"isHidden\":false,\"quality\":3.6,\"family\":[{\"_id\":\"DqaLizN7DtKDRRrxv\",\"language\":\"cpp\"},{\"_id\":\"A8xQZTqzkn88cLCmj\",\"language\":\"java\"},{\"_id\":\"XyLRwKkiZnaAKAbXM\",\"language\":\"javascript\"},{\"_id\":\"i5KL9xzKt6WSBsds9\",\"language\":\"python3\"},{\"_id\":\"ze3FSebL3fiWx3K4D\",\"language\":\"ruby\"}]}}"]