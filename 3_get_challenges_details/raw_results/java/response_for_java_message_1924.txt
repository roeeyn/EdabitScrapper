a["{\"msg\":\"result\",\"id\":\"521\",\"result\":{\"_id\":\"sjsHWXs7fNStCdrNr\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class HarshadNumber {\\n\\tpublic static boolean isHarshad(int n) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":2.076923076923077,\"quality\":4.666666666666667,\"editorId\":\"a777e8chPvJkY3tKa\",\"familyId\":\"pzeJeTZv7aaa6yEiZ\",\"instructions\":\"A number is said to be **Harshad** if it's *exactly divisible* by the **sum** of its digits. Create a function that determines whether a number is a Harshad or not.\\n\\n### Examples\\n```\\nisHarshad(75) ➞ false\\n// 7 + 5 = 12\\n// 75 is not exactly divisible by 12\\n \\nisHarshad(171) ➞ true\\n// 1 + 7 + 1 = 9\\n// 9 exactly divides 171\\n \\nisHarshad(481) ➞ true\\n\\nisHarshad(89) ➞ false\\n\\nisHarshad(516) ➞ true\\n\\nisHarshad(200) ➞ true\\n```\\n\\n### Notes\\n- You are expected to solve this challenge via **recursion**.\\n- You can check on the **Resources** tab for more details about *recursion* in Java.\\n- An iterative version of this challenge can be found via this [link](https://edabit.com/challenge/xLHemSaX8jAc6Tyz9).\\n- A collection of challenges can be found via this [link](https://edabit.com/collection/Yx78jEBrKppHBNsoQ).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"import static org.junit.Assert.assertEquals;\\nimport org.junit.Test;\\n\\npublic class HarshadNumberTests {\\n\\tprivate int[] numVector = new int[] {75, 171, 481, 89, 516, 200, 209, 12345, 53, 27};\\n\\tprivate boolean[] resVector = new boolean[] {false, true, true, false, true, true, true, true, false, true};\\n\\n\\t@Test\\n\\tpublic void test01() {\\n\\t\\tassertEquals(HarshadNumber.isHarshad(numVector[0]), resVector[0]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test02() {\\n\\t\\tassertEquals(HarshadNumber.isHarshad(numVector[1]), resVector[1]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test03() {\\n\\t\\tassertEquals(HarshadNumber.isHarshad(numVector[2]), resVector[2]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test04() {\\n\\t\\tassertEquals(HarshadNumber.isHarshad(numVector[3]), resVector[3]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test05() {\\n\\t\\tassertEquals(HarshadNumber.isHarshad(numVector[4]), resVector[4]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test06() {\\n\\t\\tassertEquals(HarshadNumber.isHarshad(numVector[5]), resVector[5]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test07() {\\n\\t\\tassertEquals(HarshadNumber.isHarshad(numVector[6]), resVector[6]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test08() {\\n\\t\\tassertEquals(HarshadNumber.isHarshad(numVector[7]), resVector[7]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test09() {\\n\\t\\tassertEquals(HarshadNumber.isHarshad(numVector[8]), resVector[8]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test10() {\\n\\t\\tassertEquals(HarshadNumber.isHarshad(numVector[9]), resVector[9]);\\n\\t}\\n}\",\"language\":\"java\",\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,3,4,1,1,0,2,1,2,1,2,1,2,2,2,2,2,2,2,3,0,3,1,3,3,3,2,3,5,3,1,2,0,1,3,3,2,0,1,1,0,3,2,3,2,1,3,3,0,2,1,1,3,2,2,1,0,2,3,3,3,2,2,3,3,4,3,3,0,3,2,3,2,2],\"quality\":[5,5,5,3,5,5],\"rators\":[\"a777e8chPvJkY3tKa\",\"Es4eX2stRpyoXeC7f\",\"rehehi2Tr2mwaEoJE\",\"azAzSkvJd7eyXY9x9\",\"gJbvbqosimaP4ZAYb\",\"a5Y8ZA5qq2eupPK65\",\"5TaPWyRv9DZWWodp8\",\"gXTAie79kiw28tx5u\",\"bTCq6CQ3SGjrRfZeQ\",\"rWhXHhzF4W8bea6LP\",\"RAEFpazbe6mhx3PLb\",\"xGtxQz9WnAPPKJZxK\",\"jyoLggHk8xQKZuoQC\",\"jXTnL3JatkKjoifyb\",\"8Xx8nWXRydHDBGfQf\",\"2nNBez4WxgzghWL3F\",\"mGaEDPw5FsDb3vdnq\",\"oaAQrSKk3QhpCjocn\",\"r9hHZYPQAqJ9DbwLX\",\"T2vhHPhRR96hRizq8\",\"DrkR35NqnP9NDLbq6\",\"qb2DTmzQj4vNfq5K7\",\"9pCPyhvQmbkWyD2LL\",\"YLqdr7bYjwew2KM4N\",\"p8qqFdJ3FSk5x9z3G\",\"4wgTPRfLwt6Gmeci7\",\"zE46SymvixkeFJmPM\",\"xa3CFkeyE66qrfTZ9\",\"p2woPCQKXuWJCwffJ\",\"wT5gGgvjKc5wz59AQ\",\"WhAhzuHiAzwyh3jBq\",\"nHj7SC5cnmkTApbgY\",\"buX4mCQhtXCfBjeno\",\"tdinF6MRzC6AdNX8g\",\"qaPjAANdnxFnWfj5d\",\"xEX3TDY6C2h82dJTn\",\"JwBaupS5j3zfz7xjj\",\"6d49sckxJ9zDzYaWC\",\"sxci7DYKNa6q22Sjq\",\"KMR6vNzvSKMA2cXnK\",\"yX6xDmDvqfugvCHiB\",\"mgXbnxqifQCZmyd6f\",\"y6u8RrAyrZGjpJBJA\",\"JJbvewX2tn7aQXHqu\",\"a49eNnfRwSMxsDJXf\",\"8QpyABPpTz3hWPjRN\",\"ZwsbQkwszxMQDY5dW\",\"xrGuYYAKBTvTSpfmh\",\"htXCitorobtqYymjN\",\"7zHPkRBtdKFQFkrc4\",\"iLfdDdTxf3FGRbr7e\",\"gZZYetkt5Sv7ggPYs\",\"AWDDnJJ27u8bRGcZQ\",\"dLaYTPZpqfysNQyoi\",\"Br54onwhhZHjq3FNi\",\"8fSFAtkXfHm64DWZq\",\"hF3FPCf6hfEG76nnr\",\"pn7Bdk3dv2vtSrqtB\",\"ooEHTqqR26zokzMwW\",\"GyF3LqyfMFADzNKDe\",\"G4oAZrBgck2Dpa6aL\",\"LGmHexa5njmtebooH\",\"QJBmmN2mmcArReXhj\",\"rMqX4i9CAJzrfD4K4\",\"NjcJEeMPjweL7dhfR\",\"JgJ33Hpym9HZ47irc\",\"CJnPe8kHgEd49MNH9\",\"FxPDKKibxnZjGJLs6\",\"6rvJwN4mcX7iYGjY7\",\"pf9XmkWS3RNJnC9Na\",\"BcuPWSdZm3rWEwZei\",\"unqzSsxpxj9sZ7rbD\",\"unB8guwehXRntufAc\",\"5YP4TxGhcKxRWWhzP\",\"GZqsbAxnzxczrdWEM\",\"YAzCMKmAZQWX4GHLM\",\"PnpnxcXm5rfEas8RL\",\"uw47663LqPME8btaA\",\"wFRLGjA56kj7xyhmv\"],\"total\":93},\"flags\":0},\"summary\":\"A number is said to be Harshad if it's exactly divisible by the sum of its digits. Create a function that determines whether a number is a Harshad or not.\\n\\nExamples\\nisHarshad(75) ➞ false\\n// 7 + 5 = 12\\n// 75 is not exactly divisible by 12\\n\\nisHarshad(171) ➞ true\\n// 1 + 7 + 1 = 9\\n// 9 exactly divides 171\\n\\nisHarshad(481) ➞ true\\n\\nisHarshad(89) ➞ false\\n\\nisHarshad(51\",\"tags\":[\"recursion\",\"strings\",\"numbers\",\"math\",\"validation\"],\"timestamp\":{\"$date\":1601648302907},\"title\":\"Recursion: Harshad Number\",\"family\":[{\"_id\":\"sjsHWXs7fNStCdrNr\",\"language\":\"java\"},{\"_id\":\"meN5CH6RztnwXCXBz\",\"language\":\"javascript\"},{\"_id\":\"RdenTLqyWW9a6L5aL\",\"language\":\"python3\"}]}}"]