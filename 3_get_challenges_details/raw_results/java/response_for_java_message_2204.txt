a["{\"msg\":\"result\",\"id\":\"659\",\"result\":{\"_id\":\"WtxvjezcFYGQo2v48\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class BookChapter {\\n\\tpublic static String nearestChapter(Chapter[] chapter, int page) {\\n\\t\\t\\n\\t}\\n}\\n\\nclass Chapter {\\n\\tprivate String name;\\n\\tprivate int page;\\n\\t\\n\\tpublic Chapter(String name, int page) {\\n\\t\\tthis.name = name;\\n\\t\\tthis.page = page;\\n\\t}\\n\\tpublic String getName() { return name; }\\n\\tpublic void setName(String name) { this.name = name; }\\n\\tpublic int getPage() { return page; }\\n\\tpublic void setPage(int page) { this.page = page; }\\n}\",\"difficulty\":2.450892857142857,\"familyId\":\"EjkH89XENvuZXg8RL\",\"instructions\":\"Create a function that returns which chapter is **nearest** to the page you're on. If two chapters are equidistant, return the chapter with the **higher** page number.\\n\\n### Examples\\n```\\nnearestChapter(new Chapter[] {\\n  new Chapter(\\\"Chapter 1\\\", 1),\\n  new Chapter(\\\"Chapter 2\\\", 15),\\n  new Chapter(\\\"Chapter 3\\\", 37)\\n}, 10) ➞ \\\"Chapter 2\\\"\\n\\nnearestChapter(new Chapter[] {\\n  new Chapter(\\\"New Beginnings\\\", 1),\\n  new Chapter(\\\"Strange Developments\\\", 62),\\n  new Chapter(\\\"The End?\\\", 194),\\n  new Chapter(\\\"The True Ending\\\", 460)\\n}, 200) ➞ \\\"The End?\\\"\\n\\nnearestChapter(new Chapter[] {\\n  new Chapter(\\\"Chapter 1a\\\", 1),\\n  new Chapter(\\\"Chapter 1b\\\", 5)\\n}, 3) ➞ \\\"Chapter 1b\\\"\\n```\\n\\n### Notes\\n- All page numbers in the dictionary will be valid integers.\\n- Return the **higher page number** if ever two pages are equidistant (see test case #8).\\n- A similar version of this challenge that uses `Map`-type classes instead of custom ones can be found via this [link](https://edabit.com/challenge/MfiTruQj2gtABxw5y).\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"/** \\n====================================== \\nTestGen 4.0 for JUnit 4.13.0 \\t\\t\\nTest Case: BookChapter::nearestChapter \\nTimestamp: 10/13/2020 11:54:46 PM \\n-------------------------------------- \\n® DARKKO 2020 © \\n====================================== \\n\\n**/\\n\\n\\nimport static org.junit.Assert.assertEquals;\\nimport org.junit.Test;\\n\\npublic class BookChapterTest {\\n\\t\\n\\t@Test\\n\\tpublic void test01() {\\n\\t\\tassertEquals(\\\"Chapter 2\\\", BookChapter.nearestChapter(new Chapter[] {new Chapter(\\\"Chapter 1\\\", 1), new Chapter(\\\"Chapter 2\\\", 15), new Chapter(\\\"Chapter 3\\\", 37)}, 10));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test02() {\\n\\t\\tassertEquals(\\\"The End?\\\", BookChapter.nearestChapter(new Chapter[] {new Chapter(\\\"New Beginnings\\\", 1), new Chapter(\\\"Strange Developments\\\", 62), new Chapter(\\\"The End?\\\", 194), new Chapter(\\\"The True Ending\\\", 460)}, 200));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test03() {\\n\\t\\tassertEquals(\\\"Chapter 1b\\\", BookChapter.nearestChapter(new Chapter[] {new Chapter(\\\"Chapter 1a\\\", 1), new Chapter(\\\"Chapter 1b\\\", 5)}, 3));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test04() {\\n\\t\\tassertEquals(\\\"Chapter 1d\\\", BookChapter.nearestChapter(new Chapter[] {new Chapter(\\\"Chapter 1a\\\", 1), new Chapter(\\\"Chapter 1b\\\", 5), new Chapter(\\\"Chapter 1c\\\", 50), new Chapter(\\\"Chapter 1d\\\", 100)}, 75));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test05() {\\n\\t\\tassertEquals(\\\"Chapter 1e\\\", BookChapter.nearestChapter(new Chapter[] {new Chapter(\\\"Chapter 1a\\\", 1), new Chapter(\\\"Chapter 1b\\\", 5), new Chapter(\\\"Chapter 1c\\\", 50), new Chapter(\\\"Chapter 1d\\\", 100), new Chapter(\\\"Chapter 1e\\\", 200)}, 150));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test06() {\\n\\t\\tassertEquals(\\\"Chapter 1c\\\", BookChapter.nearestChapter(new Chapter[] {new Chapter(\\\"Chapter 1a\\\", 1), new Chapter(\\\"Chapter 1b\\\", 5), new Chapter(\\\"Chapter 1c\\\", 50), new Chapter(\\\"Chapter 1d\\\", 100), new Chapter(\\\"Chapter 1e\\\", 200)}, 74));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test07() {\\n\\t\\tassertEquals(\\\"Chapter 1f\\\", BookChapter.nearestChapter(new Chapter[] {new Chapter(\\\"Chapter 1a\\\", 1), new Chapter(\\\"Chapter 1b\\\", 5), new Chapter(\\\"Chapter 1c\\\", 50), new Chapter(\\\"Chapter 1d\\\", 100), new Chapter(\\\"Chapter 1e\\\", 200), new Chapter(\\\"Chapter 1f\\\", 400)}, 300));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test08() {\\n\\t\\tassertEquals(\\\"Chapter Five\\\", BookChapter.nearestChapter(new Chapter[] {new Chapter(\\\"Chapter Four\\\", 46), new Chapter(\\\"Chapter Five\\\", 54)}, 50));\\n\\t}\\n\\t\\n}\\n\\n// end of tests\",\"language\":\"java\",\"quality\":4.684210526315789,\"summary\":\"Create a function that returns which chapter is nearest to the page you're on. If two chapters are equidistant, return the chapter with the higher page number.\\n\\nExamples\\nnearestChapter(new Chapter[] {\\n  new Chapter(\\\"Chapter 1\\\", 1),\\n  new Chapter(\\\"Chapter 2\\\", 15),\\n  new Chapter(\\\"Chapter 3\\\", 37)\\n}, 10) ➞ \\\"Chapter 2\\\"\\n\\nnearestChapter(new Chapter[] {\\n  new Chapter(\",\"tags\":[\"classes\",\"loops\",\"math\"],\"timestamp\":{\"$date\":1602519725352},\"title\":\"Nearest Chapter\",\"stats\":{\"completed\":{\"total\":249,\"ratings\":[3,3,3,3,3,3,5,1,2,4,2,1,2,2,2,4,4,2,3,3,2,2,4,1,0,2,2,2,2,3,1,2,5,3,0,3,3,2,4,4,2,3,4,1,2,4,3,2,3,2,2,3,2,2,4,0,2,2,1,4,2,1,2,3,4,0,4,3,5,3,1,0,1,3,2,2,3,2,2,2,3,2,2,2,2,4,4,4,3,1,1,4,3,2,3,2,1,2,2,3,2,3,0,2,2,2,2,3,0,3,4,3,2,3,3,2,3,3,1,1,2,3,3,4,4,3,2,2,2,3,3,3,3,2,3,5,4,3,2,0,3,2,3,1,0,2,0,3,2,1,4,2,3,3,2,2,2,4,4,3,2,3,3,3,3,3,3,4,4,2,2,3,2,2,0,4,1,2,3,2,2,3,2,4,2,3,3,3,2,3,1,2,3,2,3,2,2,2,1,2,4,3,2,0,3,3,3,2,2,2,2,3,3,2,1,2,3,2,4,5,3,2,2,2],\"quality\":[5,5,5,5,5,5,5,5,5,5,4,4,4,4,5,5,3,5,5],\"rators\":[\"a777e8chPvJkY3tKa\",\"va3fDAQm4sqSMoy3R\",\"rehehi2Tr2mwaEoJE\",\"GJc3PnWFTkfoAJWPm\",\"Es4eX2stRpyoXeC7f\",\"azAzSkvJd7eyXY9x9\",\"xygLZ8zXLzsKkvSRW\",\"JfbhJEDjBFaGqTmqW\",\"FTHXj9Rfx9wdujSzy\",\"gXTAie79kiw28tx5u\",\"oMZovHkR6QqNvQwyc\",\"fhFZp6Frsw8higEJ6\",\"mTF6oWX2WhFR4M3QK\",\"8jjABMp8n3WYGhvNG\",\"bmsDTBJAPBpGjfhHj\",\"6k46WoSbN4cJp9SCr\",\"fCTfZSgeDbRbTvDY4\",\"psZB2zLasaMgtf3Tb\",\"CpYkv4E8sDw7prDea\",\"gJbvbqosimaP4ZAYb\",\"GJCv4oGf9q2ZQr93W\",\"YNR2PAWqhpSMexy47\",\"jDwhb7L6hf7CiGmds\",\"9pCPyhvQmbkWyD2LL\",\"bKA7RmnzLMg2JHezG\",\"wdhDRv4cvmPT5rfKn\",\"b3pFGJ5jWFdoAh4wp\",\"9pqtNWrsTJdZcRbEZ\",\"qb2DTmzQj4vNfq5K7\",\"HDA4Dor7DhHsH2KMJ\",\"9JXXpJLvmWfLEM6ii\",\"p2woPCQKXuWJCwffJ\",\"PtKvGfg5Hvk25zWRc\",\"qkzFDd47Exc34jWzm\",\"hzxrGwEsuGbpKDRYQ\",\"d9JRowjTFcFpTrTtD\",\"J54TdyFTEkJ2AJrbT\",\"TJKGcBJJQbnq7G8mo\",\"aykgiHhHvd2fYho4d\",\"xHFMvNTKPkgigpDNX\",\"vuRCjZg3yvLig4LG3\",\"DgCkpFtnCiXGXC7cz\",\"G6bpG3WyXCtqvLrjy\",\"82weQfHHmno4Mq4X7\",\"HkGx7Cq3byChBSXSd\",\"wYeqrALoRF5wXfdjE\",\"LNCb5rksJLJ43L4Nw\",\"7s4cY6FiftwB9HnAK\",\"MQwqRxatD83h4Pgca\",\"2QpQKbJFAcJhuEzHL\",\"wT5gGgvjKc5wz59AQ\",\"rGpPd6PvpzLaqps4g\",\"vD9EZyxv27zHDu4qT\",\"2m4ZQTKdKMDvzmKg4\",\"9baYEicpTZ27vb5jN\",\"xBQC5uQdx6WndJ3iM\",\"nHj7SC5cnmkTApbgY\",\"DkSMZ3jZLkwviKb9g\",\"Ag5fRrZ9MrAZc9vpj\",\"ptdqCGzsYYs7hW234\",\"jyoLggHk8xQKZuoQC\",\"sbXhtvuj2Jh6MYZkX\",\"hJ87kii3LojmKdcYA\",\"P9iAdQpAKG8JKEaGp\",\"gQg7CQtc2FcC8BuR2\",\"nAuhwzeaxm62fF6Mi\",\"3ynAKtxCFTcdqw3cu\",\"YCSbQeqMPuPyTtPx9\",\"rpRETBr9s4hgFNtPb\",\"XhzKztoQYYQzZ2c7o\",\"KX9CNzTDkxvdT437q\",\"uw47663LqPME8btaA\",\"tDRtLgcvwpvSyosEi\",\"MGKmy7hLbgcHpKv5d\",\"NXsbR2P5KDSJjobHX\",\"fBBSDjDyzoTuXw8hK\",\"dDJg3ZwX9c3CsfZNR\",\"yRzdJhqyMPugMdAyy\",\"qaPjAANdnxFnWfj5d\",\"vRXuYYBNuHEQ29fbm\",\"pxtS64qWi6waBH5BR\",\"Fd97hWyRrzbKLuToo\",\"3ToWTBHLFHYXhKBto\",\"zF8vSy676dJddKeZz\",\"tFA5t2csqP6zw3psh\",\"JfEJ6t4NwKbLDvzSY\",\"saGfNwYzR6HgtohK8\",\"dTFWmBaz6QaPZxSAD\",\"Q3HLKJ7ctEEJrkxCE\",\"nTrWAav8aziQmqkuS\",\"qvHvuHDM4LcKXfPqQ\",\"vvngK3Z7SDiEzwC6u\",\"95BvwJssZCGtv76HS\",\"ARsbWxnYLRs4xD7xs\",\"psWw5k645KTNqT4HL\",\"7zg6R5bMg8yTNSJ3z\",\"Kp5sM524mtHNhqHq5\",\"qWE8MSgFE6sJFChQp\",\"76npeDQhDc4qbvEDM\",\"CbuDoWREni672DT5r\",\"mLMB6d7jTF7jhxzvt\",\"b9iSg6CvRnHuLtQA5\",\"mR3mMy5yjh42sRWqP\",\"J9zJq7PMGb6mqzcHW\",\"8yyfRwCsP5ovSFT5p\",\"CrdBvZhq7bijjbcRC\",\"rEWbYF9mHh28oRvT9\",\"pmbBNja9d3zha93MS\",\"Su3vDnttRBpxeyDen\",\"FTE7kBLhKzpsBEjvp\",\"qfgK3FFrRNgBa5K8s\",\"tdxi2QkC26vf5P3vG\",\"abgWd9zekHFnpYD9G\",\"9yegb3yvroNMdFnyo\",\"XyTR5dNPnHrpwnGo4\",\"LFscDZ9jmDM4fAgky\",\"dcW9oK2uRo8h8mBe2\",\"Z3JZpmrNTwzgpob2n\",\"wxiWcG64qke4iJudE\",\"bhKCHTCAyFr32zNSu\",\"PHvoF3uQo3Pg5jdbz\",\"QwkJidQW7vvEY6TLp\",\"T2vhHPhRR96hRizq8\",\"uGbczREzepLDPrt4i\",\"QMbzJWCjNYHXessxx\",\"E3gwPz6DQoJdwAHX3\",\"jfLCYPpjfFSduyskg\",\"46GPry8o9S5A5PSrA\",\"d2HN2pkpP7yhEcYBp\",\"Lziy7JiQh9RzWq9AS\",\"zck7hK3ve9nQ8KTEi\",\"sGZAcbM2vXZdB8HGs\",\"iHb7iBxwQx69miajZ\",\"aqhzzoK9fofcL3mJQ\",\"LjoaufncfAdw5ZaoA\",\"mS4t7GChGHwJ65Lfk\",\"MPcATtdQZ42wpf2M8\",\"rWhXHhzF4W8bea6LP\",\"JugCLLeFDfQcsh68T\",\"zcZtmAtgZRj9MSiat\",\"hN5hfgBocCJuBeBo8\",\"FNYPC36yqPmTKDaqR\",\"zTuogRsJvASMEStDy\",\"YMo3MectGtSdTcWcB\",\"ZtxusfY5cFq8HYLgL\",\"S46dNvCTxGMsJSpcD\",\"rcTKkjD4JqfJ7XBx2\",\"SGN4926zR8aTYyuS6\",\"kFMhaBXDFKwb35d5b\",\"s5sZ5xfqvS7KBG49w\",\"YzfChr4vydjdfpCue\",\"ycFtyrR996mt4ovzL\",\"LxKeSXCyBxT3QqBPm\",\"Jfdqemc95XmvczDei\",\"rxFTA3BjgBJEDChpH\",\"pL7YcMW3tGSvzqkhF\",\"M8YQSTNK29R8bwiK9\",\"av5QexsdPza9FsRCq\",\"9iGmusCJ7p8bJKsww\",\"gRA6PFAmujemC3Tu7\",\"jHubExJjkdxfMTxnd\",\"faZKsDpHpcDRimX3g\",\"CoaHWmqC5siYmi8dj\",\"bYz8bN4LGwYzM3Gb8\",\"htXCitorobtqYymjN\",\"sxci7DYKNa6q22Sjq\",\"bPRkGASs9fgjhvYA8\",\"2NJZbusRvu3eJ4tHu\",\"nkL8YcFfFcpasLkXT\",\"fjnBkkZyqyX6EMWui\",\"fPKviuXhMTdPMKiXX\",\"9rTzn5CuEdbTxfemP\",\"bRWT8DjfaLiL5odu7\",\"8okfc8E3pb37QNpzQ\",\"R8mF9NnCP8fkujNtq\",\"e9NhiaGdEeGzhmPju\",\"evq99nYD69bpbFG9f\",\"cdx4mvrice2wQFwcS\",\"FqM5LAu594mH3Hdir\",\"bTGhMH2tgtECdCvJi\",\"xrGuYYAKBTvTSpfmh\",\"BPAuddzjGRigADYnv\",\"X7jajRh5H5ewoJnQu\",\"iMHrN3Wiefh9Ame38\",\"i5QeAsrM4m6hzPTku\",\"jGjGWp7kipdDj4suc\",\"QgoeBJZcb3hGyAFv4\",\"JdHDJLKy4HoLtgFF4\",\"WjC23TGg588WRaZbf\",\"5etxnWM9LfbDDW9A6\",\"h7vQjZwzLb4kgFFFT\",\"kjq3gYp4TDMCQZJsH\",\"ooEHTqqR26zokzMwW\",\"y2TSaX898ZdwFhAQA\",\"QJBmmN2mmcArReXhj\",\"dprTHXxaLgjkvv3dc\",\"ZAWGgsRMG9jjMaENh\",\"2MYDkFPyRd7X5D8NQ\",\"qhdmpu4eMC6nyo8kS\",\"RDJiAqZzcTyGxKjea\",\"BcuPWSdZm3rWEwZei\",\"uagxuhcLcgWecrQur\",\"tbXF6vuuXRnGJBRJu\",\"wy7AvDwMeujSybWNY\",\"sJmcjnzQcxSWhy3hL\",\"YQXafFKnxSdF2bvPr\",\"cWf3ew5aDexbfSHgS\",\"M7SavHuYgKmHz64un\",\"FmHfRwqADWPBinPfZ\",\"NdkmK8atMJAf6QwHr\",\"ZZupKZ6tRRbkj6BAj\",\"KynKKsWLhhes3ZGiu\",\"FxPDKKibxnZjGJLs6\",\"WuAZDtKZaEJZiLRBi\",\"bw6YoFktukLirAipd\",\"rHxkGEF3mm8Tnqqnu\",\"nFbmNzMQ38TncmfQX\",\"kAvvRJdB55FqsLqJm\",\"6FJ5GqFPJZEykxj24\",\"XH6378Zm3WBm679yx\",\"wFRLGjA56kj7xyhmv\",\"RGsej5SF5ZxNkbkMf\",\"u32Mfp9zzgN66jsiX\",\"6rvJwN4mcX7iYGjY7\",\"kPG8RXFeQK9kcDsrf\",\"8DF2Y3yyZTSCCpXGf\",\"SytojNg3pZZ9zLeNy\",\"pYgjc4XGefuxPj2ES\",\"42nM6meberBr5zSLT\",\"GSgr8hLGHeZPde7WJ\",\"rvojHhKH3DaxotefQ\",\"dETkZ4fGSKoaifGCb\",\"PAKigrfHiLyscnCJo\",\"DmFttKbrvZXojQkPm\",\"ompzzoXiFiYsWmHXr\",\"4p9JCDPjzKziNxQy9\",\"gSbXz44YQCNjXMj2D\",\"kiXdRgWWjCvMo7wJZ\"]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"a777e8chPvJkY3tKa\",\"family\":[{\"_id\":\"WtxvjezcFYGQo2v48\",\"language\":\"java\"},{\"_id\":\"E5kxeJA782rNX2bch\",\"language\":\"javascript\"},{\"_id\":\"ZeeWN5NdFa8ALJq5G\",\"language\":\"python3\"}]}}"]