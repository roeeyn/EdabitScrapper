a["{\"msg\":\"result\",\"id\":\"451\",\"result\":{\"_id\":\"ujzBDWymfJ9fzSnfH\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"public class Challenge {\\n\\tpublic static String isApocalyptic(int number) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":1.6382978723404256,\"familyId\":\"jGrbP9GX9iP4nMmgQ\",\"instructions\":\"In this challenge, you have to establish if a number is apocalyptic. A positive integer `n` greater than 0 is apocalyptic when **2 elevated to `n`** contains one or more occurrences of **666** inside it.\\n\\nGiven an integer n, implement a function that returns:\\n- `\\\"Safe\\\"` if `n` is not apocalyptic.\\n- `\\\"Single\\\"` if inside `2^n` there's a single occurrence of 666.\\n- `\\\"Double\\\"` if inside `2^n` there are two occurrence of 666.\\n- `\\\"Triple\\\"` if inside `2^n` there are three occurrence of 666.\\n\\n### Examples\\n```\\nisApocalyptic(66) ➞ \\\"Safe\\\"\\n// 2^66 = 73786976294838206464\\n\\nisApocalyptic(157) ➞ \\\"Single\\\"\\n// 2^157 =\\n// 182687704|666|362864775460604089535377456991567872\\n\\nisApocalyptic(220) ➞ \\\"Double\\\"\\n// 2^220 =\\n// 168499|666|66969149871|666|8844293872691710232152640 ...\\n\\nisApocalyptic(931) ➞ \\\"Triple\\\"\\n// 2^931 =\\n// 181520618710|666|8777829|666|135436890332191479738353753001777065257954029122510259245050254290156440857653562895251700406555730694879815558725330603736697259064676478076718090|666| ...\\n```\\n\\n### Notes\\n- Any given `n` will be a positive integer in the range of 1 to 1000.\\n- Occurrences have to be unique. You can't use digits that have already been matched again (see example #3, there are five adjacent 6s, but only one possible match).\",\"isHidden\":false,\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n  @Test\\n  public void test1() {\\n    assertEquals(\\\"Safe\\\", Challenge.isApocalyptic(66));\\n  }\\n\\t\\n\\t@Test\\n  public void test2() {\\n    assertEquals(\\\"Single\\\", Challenge.isApocalyptic(157));\\n  }\\n\\t\\n\\t@Test\\n  public void test3() {\\n    assertEquals(\\\"Double\\\", Challenge.isApocalyptic(220));\\n  }\\n\\t\\n\\t@Test\\n  public void test4() {\\n    assertEquals(\\\"Triple\\\", Challenge.isApocalyptic(931));\\n  }\\n\\t\\n\\t@Test\\n  public void test5() {\\n    assertEquals(\\\"Safe\\\", Challenge.isApocalyptic(166));\\n  }\\n\\t\\n\\t@Test\\n  public void test6() {\\n    assertEquals(\\\"Double\\\", Challenge.isApocalyptic(529));\\n  }\\n\\t\\n\\t@Test\\n  public void test7() {\\n    assertEquals(\\\"Single\\\", Challenge.isApocalyptic(443));\\n  }\\n\\t\\n\\t@Test\\n  public void test8() {\\n    assertEquals(\\\"Safe\\\", Challenge.isApocalyptic(166));\\n  }\\n\\t\\n\\t@Test\\n  public void test9() {\\n    assertEquals(\\\"Safe\\\", Challenge.isApocalyptic(703));\\n  }\\n\\t\\n\\t@Test\\n  public void test10() {\\n    assertEquals(\\\"Single\\\", Challenge.isApocalyptic(528));\\n  }\\n\\t\\n\\t@Test\\n  public void test11() {\\n    assertEquals(\\\"Double\\\", Challenge.isApocalyptic(648));\\n  }\\n}\",\"language\":\"java\",\"summary\":\"In this challenge, you have to establish if a number is apocalyptic. A positive integer n greater than 0 is apocalyptic when 2 elevated to n contains one or more occurrences of 666 inside it.\\n\\nGiven an integer n, implement a function that returns:\\n\\\"Safe\\\" if n is not apocalyptic.\\n\\\"Single\\\" if inside 2^n there's a single occurrence of 666.\\n\\\"Double\\\" if inside 2^n\",\"tags\":[\"numbers\",\"strings\",\"validation\"],\"timestamp\":{\"$date\":1575920140076},\"title\":\"Apocalyptic Numbers\",\"stats\":{\"completed\":{\"total\":47,\"ratings\":[1,1,1,1,1,0,1,0,1,3,2,1,1,2,1,2,4,2,0,2,3,1,2,2,2,2,2,2,2,1,2,2,2,2,1,2,0,2,3,3,2,2,2,2,2,1,1],\"rators\":[\"3gxJoNp59B4eoyyed\",\"sxci7DYKNa6q22Sjq\",\"a49eNnfRwSMxsDJXf\",\"79ZbLzp7xepvkonoh\",\"MiPadj4ePcjWjxsR2\",\"W4jpCs2jekeg5qAwc\",\"6TDEhHv3uQCZLQeiH\",\"Yohr2MmAyaWGMbB35\",\"WPWBKqdkzkeGpgFR2\",\"t2kdBPj9qQAXY2Ehd\",\"CLmJduqJHX83dM4Pd\",\"3KjxQu9RZ8ZSywvLz\",\"r9hHZYPQAqJ9DbwLX\",\"8J2Dqqz9PaFufQzwY\",\"GgxxSd7k4CLfzkFMH\",\"gtk73irY4QdFpS2v9\",\"W347YkKWzfvMbkuHr\",\"u4yanfWeeZsN3xWgc\",\"J9zJq7PMGb6mqzcHW\",\"3pdgguqZgNDSAJSGm\",\"Es4eX2stRpyoXeC7f\",\"ML7bZJrM8gfGQJBJt\",\"fZjkX29nhRTWWb75k\",\"hB5mgzMwQSnhBzi7P\",\"5seiNqw6ZXoF2GRRd\",\"TrquEHytntLKHA4m2\",\"jyoLggHk8xQKZuoQC\",\"Kso7rzAKB4TTCPKgM\",\"WZujpe8yQAyZmpWHg\",\"etoSR23iELGGgs9rA\",\"htXCitorobtqYymjN\",\"g4NCSxxHqHCGMpWwT\",\"rvojHhKH3DaxotefQ\",\"k2tXkx7AyX77tQDRo\",\"5R9nW7JC9PH4Pdsk5\",\"azAzSkvJd7eyXY9x9\",\"yXGiiSAR5nBHnH3yr\",\"gXTAie79kiw28tx5u\",\"jb9RLyyuo565bKDzN\",\"rWhXHhzF4W8bea6LP\",\"unqzSsxpxj9sZ7rbD\",\"xEX3TDY6C2h82dJTn\",\"uw47663LqPME8btaA\"],\"quality\":[5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"quality\":5,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"xDPE46anX8yYtFRHj\",\"language\":\"cpp\"},{\"_id\":\"ujzBDWymfJ9fzSnfH\",\"language\":\"java\"},{\"_id\":\"nY4MYku8Sn9kDs8m8\",\"language\":\"javascript\"},{\"_id\":\"gHrMmA7emP6CFAMnb\",\"language\":\"python3\"},{\"_id\":\"iEqnfw2KZwBLbbLit\",\"language\":\"ruby\"}]}}"]