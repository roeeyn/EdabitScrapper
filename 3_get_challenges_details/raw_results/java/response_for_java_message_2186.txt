a["{\"msg\":\"result\",\"id\":\"650\",\"result\":{\"_id\":\"kKQPf5xTAdnBjqvZ8\",\"author\":\"Edward Clark\",\"authorId\":\"3pdgguqZgNDSAJSGm\",\"code\":\"public class Challenge {\\n\\tpublic static String[] split(String str) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":2.3454545454545452,\"familyId\":\"5pcdZXF9zHT6m3XSe\",\"instructions\":\"Write a function that groups a string into **parentheses clusters**. Each cluster should be **balanced**.\\n\\n### Examples\\n```\\nsplit(\\\"()()()\\\") ➞ [\\\"()\\\", \\\"()\\\", \\\"()\\\"]\\n\\nsplit(\\\"((()))\\\") ➞ [\\\"((()))\\\"]\\n\\nsplit(\\\"((()))(())()()(()())\\\") ➞ [\\\"((()))\\\", \\\"(())\\\", \\\"()\\\", \\\"()\\\", \\\"(()())\\\"]\\n\\nsplit(\\\"((())())(()(()()))\\\") ➞ [\\\"((())())\\\", \\\"(()(()()))\\\"]\\n```\\n\\n### Notes\\n- All input strings will **only** contain parentheses.\\n- **Balanced**: Every opening parens `(` must exist with its matching closing parens `)` in the same cluster.\",\"lab\":\"import static org.hamcrest.core.Is.is;\\nimport static org.junit.Assert.assertThat;\\nimport org.junit.Test;\\n\\n/**\\n * @author edwardclark\\n**/\\n\\npublic class ChallengeTest {\\n\\t@Test\\n\\tpublic void test1() {\\n\\t\\tassertThat(Challenge.split(\\\"()()()\\\"), is(new String[]{\\\"()\\\", \\\"()\\\", \\\"()\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test2() {\\n\\t\\tassertThat(Challenge.split(\\\"\\\"), is(new String[]{}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test3() {\\n\\t\\tassertThat(Challenge.split(\\\"()()(())\\\"), is(new String[]{\\\"()\\\", \\\"()\\\", \\\"(())\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test4() {\\n\\t\\tassertThat(Challenge.split(\\\"(())(())\\\"), is(new String[]{\\\"(())\\\", \\\"(())\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test5() {\\n\\t\\tassertThat(Challenge.split(\\\"((()))\\\"), is(new String[]{\\\"((()))\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test6() {\\n\\t\\tassertThat(Challenge.split(\\\"()(((((((((())))))))))\\\"), is(new String[]{\\\"()\\\", \\\"(((((((((())))))))))\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test7() {\\n\\t\\tassertThat(Challenge.split(\\\"((())()(()))(()(())())(()())\\\"), is(new String[]{\\\"((())()(()))\\\", \\\"(()(())())\\\", \\\"(()())\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test8() {\\n\\t\\tassertThat(Challenge.split(\\\"((()))(())()()(()())\\\"), is(new String[]{\\\"((()))\\\", \\\"(())\\\", \\\"()\\\", \\\"()\\\", \\\"(()())\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test9() {\\n\\t\\tassertThat(Challenge.split(\\\"((())())(()(()()))\\\"), is(new String[]{\\\"((())())\\\", \\\"(()(()()))\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() {\\n\\t\\tassertThat(Challenge.split(\\\"(()(()()))()(((()))()(()))(()((()))(())())\\\"), is(new String[]{\\\"(()(()()))\\\", \\\"()\\\", \\\"(((()))()(()))\\\", \\\"(()((()))(())())\\\"}));\\n\\t}\\n}\",\"language\":\"java\",\"summary\":\"Write a function that groups a string into parentheses clusters. Each cluster should be balanced.\\n\\nExamples\\nsplit(\\\"()()()\\\") ➞ [\\\"()\\\", \\\"()\\\", \\\"()\\\"]\\n\\nsplit(\\\"((()))\\\") ➞ [\\\"((()))\\\"]\\n\\nsplit(\\\"((()))(())()()(()())\\\") ➞ [\\\"((()))\\\", \\\"(())\\\", \\\"()\\\", \\\"()\\\", \\\"(()())\\\"]\\n\\nsplit(\\\"((())())(()(()()))\\\") ➞ [\\\"((())())\\\", \\\"(()(()()))\\\"]\\n\\nNotes\\nAll input strings will only contain parentheses.\",\"tags\":[\"strings\",\"data_structures\"],\"timestamp\":{\"$date\":1571158985233},\"title\":\"Parentheses Clusters\",\"stats\":{\"completed\":{\"total\":61,\"ratings\":[2,2,2,2,2,3,2,2,0,3,3,3,2,2,1,1,2,1,3,2,3,1,2,3,3,3,2,3,3,1,1,3,3,1,2,3,3,2,3,2,4,3,4,3,3,2,2,3,3,3,3,2,2,2,3],\"rators\":[\"3pdgguqZgNDSAJSGm\",\"sxci7DYKNa6q22Sjq\",\"ZBDiEMi7dbjRL55LB\",\"SnY7WidXJoAyyuPuA\",\"WHn374iJqrmFwqofS\",\"2NJuDfSqdrF8kHHni\",\"qRhXvCaA7qgDoeFnr\",\"5nnYhAsrMQKLgzDWr\",\"EWFgr2v9oDE3orajD\",\"rehehi2Tr2mwaEoJE\",\"cfi8jhhSJ3Nq2gvqf\",\"wYYMNPe8nSiJFbvJw\",\"fZky27mpbfX7soJKa\",\"6hsLDaXbCCEsiBr37\",\"ko7oJ85JMftgcbkrr\",\"Es4eX2stRpyoXeC7f\",\"cjxsqXfkAPoadmppi\",\"jRqY4i8gPemsZMBGf\",\"SB7E6rYCcezLZgfHs\",\"cGebawowzCKcFn8gq\",\"XPDqgbh7XuX7Yfpuq\",\"8tujqLqi5XWe2vry8\",\"TrquEHytntLKHA4m2\",\"jyoLggHk8xQKZuoQC\",\"5seiNqw6ZXoF2GRRd\",\"HiD9tdPXAJhZp9j6C\",\"rA5nhfhFwfqvmJb6M\",\"dcW9oK2uRo8h8mBe2\",\"T2vhHPhRR96hRizq8\",\"k63LjKkX5p7SYng7C\",\"QKFydGwTvCNKriqiG\",\"PytNZK9mNiRiZxPrm\",\"DzvdGwHEjqsX7wyKr\",\"gXTAie79kiw28tx5u\",\"yXGiiSAR5nBHnH3yr\",\"5KowacoCuJ494hxg6\",\"sXgGEHs32kjHuaRSj\",\"ahFjZxeyofoRq9oRw\",\"a777e8chPvJkY3tKa\",\"2sZrwmQcNFJG3d3HW\",\"p8qqFdJ3FSk5x9z3G\",\"p6fkM3tu4g4mLe9PT\",\"buX4mCQhtXCfBjeno\",\"c7uBxu2rgY77H5d79\",\"e4jWeRW5xSbmqkxP2\",\"rhS8qXRjZcpDXkwnE\",\"2NJZbusRvu3eJ4tHu\",\"oMZovHkR6QqNvQwyc\",\"CcMhzchpBvMgTffgi\",\"KMR6vNzvSKMA2cXnK\",\"htXCitorobtqYymjN\",\"cWf3ew5aDexbfSHgS\",\"XqijAorPxipWAK5MA\",\"rWhXHhzF4W8bea6LP\"],\"quality\":[5,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":5,\"family\":[{\"_id\":\"f5RmXpK54SGQ8w8tz\",\"language\":\"cpp\"},{\"_id\":\"kKQPf5xTAdnBjqvZ8\",\"language\":\"java\"},{\"_id\":\"uGN6vd3t2ycfnCpfv\",\"language\":\"javascript\"},{\"_id\":\"W8BEncRfBcN8EFY5p\",\"language\":\"php\"},{\"_id\":\"Fpymv2HieqEd7ptAq\",\"language\":\"python3\"},{\"_id\":\"RsQauuS62E3rAqxsy\",\"language\":\"ruby\"}]}}"]