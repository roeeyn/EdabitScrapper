a["{\"msg\":\"result\",\"id\":\"722\",\"result\":{\"_id\":\"tNKWXJZPgRHZAc9Ja\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"public class Challenge {\\n\\tpublic static int bitRotate(int n, int m, boolean d) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":2.774193548387097,\"familyId\":\"ykieJmfF444Nacxas\",\"instructions\":\"Java offers some bit operations but not bit rotation. To complete that, create a function that takes three parameters:\\n\\n1. `n`: Integer, which in binary representaion should be rotated.\\n2. `m`:  Number of rotation steps that should be performed.\\n3. `d`: Boolean value; `true` = rotation right, `false` = rotation left.\\n\\nYour function should return an integer as a result of its rotated binary representation.\\n\\n### Examples\\n```\\nbitRotate(8, 1, true) ➞ 4\\n// 8 in bin: 1000, rotated 1 step to the right: 0100, in dec: 4\\n\\nbitRotate(16, 1, false) ➞ 1\\n// 16 in bin: 10000, rotated 1 step to the left: 00001, in dec: 1\\n\\nbitRotate(17, 2, false) ➞ 6\\n// 17 in bin: 10001, rotated 2 steps to the left: 00110, in dec: 6\\n```\\n\\n### Notes\\nFor parameters use unsigned integers only.\",\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n  @Test\\n  public void test1() {\\n    assertEquals(4, Challenge.bitRotate(8, 1, true));\\n  }\\n\\t\\n\\t@Test\\n  public void test2() {\\n    assertEquals(4, Challenge.bitRotate(16, 2, true));\\n  }\\n\\t\\n\\t@Test\\n  public void test3() {\\n    assertEquals(110, Challenge.bitRotate(283, 7, true));\\n  }\\n\\t\\n\\t@Test\\n  public void test4() {\\n    assertEquals(1, Challenge.bitRotate(16, 1, false));\\n  }\\n\\t\\n\\t@Test\\n  public void test5() {\\n    assertEquals(6, Challenge.bitRotate(17, 2, false));\\n  }\\n\\t\\n\\t@Test\\n  public void test6() {\\n    assertEquals(122, Challenge.bitRotate(122, 7, false));\\n  }\\n\\t\\n\\t@Test\\n  public void test7() {\\n    assertEquals(95, Challenge.bitRotate(125, 10, true));\\n  }\\n\\t\\n\\t@Test\\n  public void test8() {\\n    assertEquals(767, Challenge.bitRotate(1022, 8, false));\\n  }\\n\\t\\n\\t@Test\\n  public void test9() {\\n    assertEquals(33, Challenge.bitRotate(33, 6, true));\\n  }\\n}\",\"language\":\"java\",\"summary\":\"Java offers some bit operations but not bit rotation. To complete that, create a function that takes three parameters:\\n\\nn: Integer, which in binary representaion should be rotated.\\nm:  Number of rotation steps that should be performed.\\nd: Boolean value; true = rotation right, false = rotation left.\\n\\nYour function should return an integer as a result of its rot\",\"tags\":[\"bit_operations\",\"strings\"],\"timestamp\":{\"$date\":1569434066137},\"title\":\"Bit Rotation\",\"stats\":{\"completed\":{\"total\":34,\"ratings\":[3,3,3,3,3,4,4,1,3,1,0,5,0,4,4,4,1,3,4,4,4,2,3,0,4,2,4,2,1,3,4],\"rators\":[\"hZr4qXRsSumkpJXK9\",\"YdK77dcrqqhWz8rrp\",\"sxci7DYKNa6q22Sjq\",\"YF79LnTdprobbYY5v\",\"3gxJoNp59B4eoyyed\",\"2aJGrQ6BGMngszety\",\"uZ7FrNt2ficGsnKnZ\",\"SnY7WidXJoAyyuPuA\",\"CLmJduqJHX83dM4Pd\",\"dGscPdzKKe2p4qYzs\",\"5QFtK5QMQu9PvgSvb\",\"rehehi2Tr2mwaEoJE\",\"9aHkSrEhWL7Tp928N\",\"Es4eX2stRpyoXeC7f\",\"AyrEvM2GLX2jqM772\",\"TrquEHytntLKHA4m2\",\"htXCitorobtqYymjN\",\"rwETZ6XCNoHCEyB66\",\"WtvttQgJoYfxhwj5e\",\"6kz7jjJS8W4tikYQT\",\"Ym8AjbKGSJooun3nt\",\"FBD3rFFMQqZ3qiMx9\",\"gXTAie79kiw28tx5u\",\"NsbHPeWBtAonYNXZc\",\"iq55QasecYJXKz8rx\",\"rhS8qXRjZcpDXkwnE\",\"2NJZbusRvu3eJ4tHu\",\"KMR6vNzvSKMA2cXnK\"],\"quality\":[5,3]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4,\"family\":[{\"_id\":\"NgtAmTiF3sg4X2D38\",\"language\":\"cpp\"},{\"_id\":\"tNKWXJZPgRHZAc9Ja\",\"language\":\"java\"},{\"_id\":\"GAgu4fL6JY9ZnFWcd\",\"language\":\"javascript\"},{\"_id\":\"Jjbbjqm3JuA6WnPYH\",\"language\":\"python3\"},{\"_id\":\"WXxP8bN5unkyBjSze\",\"language\":\"ruby\"}]}}"]