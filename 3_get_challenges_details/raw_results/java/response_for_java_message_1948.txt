a["{\"msg\":\"result\",\"id\":\"531\",\"result\":{\"_id\":\"AudsydHhvWpCCSuaN\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"public class Challenge {\\n\\tpublic static String selectLetters(String s1, String s2) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":2.090909090909091,\"familyId\":\"44Pn69JnDESbzBFwn\",\"instructions\":\"Given two strings, `s1` and `s2`, select only the characters in each string where the character in the same position in the **other** string is in uppercase. Return these as a single string.\\n\\nTo illustrate, given the strings `s1 = \\\"heLLo\\\"` and `s2 = \\\"GUlp\\\"`, we select the letters \\\"he\\\" from `s1`, because \\\"G\\\" and \\\"U\\\" are uppercase. We then select \\\"lp\\\" from `s2`, because \\\"LL\\\" is in uppercase. Finally, we join these together and return `\\\"help\\\"`.\\n\\n### Examples\\n```\\nselectLetters(\\\"heLLO\\\", \\\"GUlp\\\") ➞ \\\"help\\\"\\n\\nselectLetters(\\\"1234567\\\", \\\"XxXxX\\\")  ➞ \\\"135\\\"\\n\\nselectLetters(\\\"EVERYTHING\\\", \\\"SomeThings\\\") ➞  \\\"EYSomeThings\\\"\\n```\\n\\n### Notes\\n- The strings don't have to be the same length.\\n- Strings can contain non-alphabetic characters.\",\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n  @Test\\n  public void test1() {\\n    assertEquals(\\\"help\\\", Challenge.selectLetters(\\\"heLLO\\\", \\\"GUlp\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test2() {\\n    assertEquals(\\\"135\\\", Challenge.selectLetters(\\\"1234567\\\", \\\"XxXxX\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test3() {\\n    assertEquals(\\\"EYSomeThings\\\", Challenge.selectLetters(\\\"EVERYTHING\\\", \\\"SomeThings\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test4() {\\n    assertEquals(\\\"atrpten\\\", Challenge.selectLetters(\\\"PaTtErN\\\", \\\"pAtTeRn\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test5() {\\n    assertEquals(\\\"\\\", Challenge.selectLetters(\\\"nothing\\\", \\\"nothing\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test6() {\\n    assertEquals(\\\"What doR\\\", Challenge.selectLetters(\\\"What do you think of it so far?\\\", \\\"RUBBISH!\\\"));\\n  }\\n}\",\"language\":\"java\",\"summary\":\"Given two strings, s1 and s2, select only the characters in each string where the character in the same position in the other string is in uppercase. Return these as a single string.\\n\\nTo illustrate, given the strings s1 = \\\"heLLo\\\" and s2 = \\\"GUlp\\\", we select the letters \\\"he\\\" from s1, because \\\"G\\\" and \\\"U\\\" are uppercase. We then select \\\"lp\\\" from s2, because \\\"LL\\\" is\",\"tags\":[\"strings\",\"formatting\"],\"timestamp\":{\"$date\":1568625928546},\"title\":\"A Capital Challenge\",\"stats\":{\"completed\":{\"total\":128,\"ratings\":[2,2,2,2,2,2,2,3,2,0,2,3,3,0,0,3,2,1,3,2,2,3,2,2,1,2,1,2,3,2,2,1,1,2,2,3,2,2,2,2,3,2,1,2,3,3,3,2,3,3,3,0,1,2,3,3,1,0,2,3,1,3,1,2,1,2,3,0,3,3,2,2,1,2,3,3,3,3,3,2,3,2,2,3,2,2,2,2,3,3,3,2,1,1,1,2,3,2,3,3,2,4,2,2,3,3,1,1,2,2],\"rators\":[\"sxci7DYKNa6q22Sjq\",\"uai7Zu58EAo6AQCC6\",\"cG4PEDMMx8jXhWP8T\",\"gofo35rKkbyPH9jFq\",\"yazNfwgLx7jSAZ8Tv\",\"CLmJduqJHX83dM4Pd\",\"qRhXvCaA7qgDoeFnr\",\"2NJuDfSqdrF8kHHni\",\"vRXuYYBNuHEQ29fbm\",\"rehehi2Tr2mwaEoJE\",\"qJZsi5rhRnWA38FbA\",\"TBYzu4y9Ji8xXX9N8\",\"oDZaopxpPAdqWXLqz\",\"r9hHZYPQAqJ9DbwLX\",\"J9zJq7PMGb6mqzcHW\",\"DjXeYHz8w7ywi84zx\",\"qLFYM4DTaQe9mDq6C\",\"fZky27mpbfX7soJKa\",\"eZjHwgBfkQPCxmutr\",\"uqNAu5PZnSDRqZKoN\",\"qb2DTmzQj4vNfq5K7\",\"wF857z4NWzmonCPNe\",\"jhoZyJtWj7sy7YYjj\",\"4RHx3H8EwP2oboW8e\",\"p3QZcERWEWRnJHKsR\",\"B2FfgKcrkEpjywk5s\",\"wYYMNPe8nSiJFbvJw\",\"hhSKYujojYnHiKFy7\",\"2PR653L4KSN97r534\",\"i5QeAsrM4m6hzPTku\",\"AyrEvM2GLX2jqM772\",\"6hsLDaXbCCEsiBr37\",\"gZSriaDFxXTsGRzbM\",\"xFfjxt6vscAezQshy\",\"Es4eX2stRpyoXeC7f\",\"Bra3aJzavaT5XKYv6\",\"cjxsqXfkAPoadmppi\",\"feubnquqgyoq3sa3Q\",\"tw5p3m3Dump7FwYN7\",\"C9yBWYcZsjmJYww3K\",\"gGnDsJz5hr2t9MKCF\",\"4cnGYg4EhbGW5uLMg\",\"XC9nQxxqYS46pgHTK\",\"eXW8reZCCZHQzJjQi\",\"NecPw9NSzpHpBmnZs\",\"TrquEHytntLKHA4m2\",\"fZjkX29nhRTWWb75k\",\"5seiNqw6ZXoF2GRRd\",\"jyoLggHk8xQKZuoQC\",\"csRoCgJx5NBJzW8pX\",\"uYv96ZSpA7tBHoAGX\",\"etoSR23iELGGgs9rA\",\"WZujpe8yQAyZmpWHg\",\"htXCitorobtqYymjN\",\"XTuxCoKrN9DZ7zaQx\",\"k63LjKkX5p7SYng7C\",\"mfm3gB39arY8Rjb2y\",\"4RsakkyRXyYGwFxEa\",\"y6kfyYmydcD8tkBk7\",\"9pCPyhvQmbkWyD2LL\",\"SYRkWhT2EBgB5ar7P\",\"dcW9oK2uRo8h8mBe2\",\"pBMXMQem6BpSeooYT\",\"rvojHhKH3DaxotefQ\",\"vEN56nHw7hTxbyHhp\",\"wsjr8C33NPyGYAqKu\",\"5nugKwaWBJKTy6cL3\",\"jRqY4i8gPemsZMBGf\",\"9pqtNWrsTJdZcRbEZ\",\"fXdKwMg4PKuH5oBDb\",\"mGaEDPw5FsDb3vdnq\",\"7amNEuZodjynhaDQq\",\"Ym8AjbKGSJooun3nt\",\"itoJJQ6NNpdp4xTDb\",\"DzvdGwHEjqsX7wyKr\",\"rWhXHhzF4W8bea6LP\",\"gXTAie79kiw28tx5u\",\"yXGiiSAR5nBHnH3yr\",\"qkemuK2cmhTZNRKZC\",\"YL9pqyCu8xsds8J49\",\"mQKWauR6b252TmdX4\",\"P5BhjZxyeHQYTNyB9\",\"jXTnL3JatkKjoifyb\",\"EwXYEZ8cEtEThuTXC\",\"2nNBez4WxgzghWL3F\",\"p2woPCQKXuWJCwffJ\",\"4hbdSgMnhZC7C9mRv\",\"cvr6YL5nEJcMon484\",\"buX4mCQhtXCfBjeno\",\"obTEF9xM25kYRL6f6\",\"JLKvK2i5zoGMbKJtK\",\"PBcww47LZ363DdRut\",\"qx6yvahdH8aw4Jnm7\",\"zPn2GuRK2CdAxA7T6\",\"nAuhwzeaxm62fF6Mi\",\"EYep2ebx8gWJRji5P\",\"HFqNnwNwXCb8GioKi\",\"CoQTHAsXDxn6oot3H\",\"rhS8qXRjZcpDXkwnE\",\"J9dMhBWysAbmXQi8o\",\"a49eNnfRwSMxsDJXf\",\"6rvJwN4mcX7iYGjY7\",\"4XkodTpxqZq3SsJJL\",\"5FTQhvh8zTRWhAene\",\"GsrjAqoAdLATJH9qD\",\"JFodQijHHdRkkrZvT\",\"wv6C9LxraYgqkAs2Z\",\"xMqYeXfGgKQSBQzf5\",\"zck7hK3ve9nQ8KTEi\",\"jCjCvyhqhpebkJn34\",\"2NJZbusRvu3eJ4tHu\",\"KMR6vNzvSKMA2cXnK\",\"wFRLGjA56kj7xyhmv\",\"FxPDKKibxnZjGJLs6\",\"unqzSsxpxj9sZ7rbD\",\"uw47663LqPME8btaA\"],\"quality\":[3,5,3,4,3,5,5,4,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":1},\"isHidden\":false,\"quality\":4.2727272727272725,\"family\":[{\"_id\":\"WyBgESqLetZKDW9sD\",\"language\":\"cpp\"},{\"_id\":\"AudsydHhvWpCCSuaN\",\"language\":\"java\"},{\"_id\":\"gjKemfXwedir9y7D4\",\"language\":\"javascript\"},{\"_id\":\"eBTCwYHpdaHciieuP\",\"language\":\"python3\"},{\"_id\":\"keqvTBiiKWznnkBQE\",\"language\":\"ruby\"}]}}"]