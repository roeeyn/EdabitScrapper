a["{\"msg\":\"result\",\"id\":\"508\",\"result\":{\"_id\":\"jbQDEAk7viqz2x4AX\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class NumbersTrio {\\n  public static boolean luckySeven(int[] r) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":2.025,\"familyId\":\"CjGsTaAXHhWCDR4oX\",\"instructions\":\"Given an array of numbers, return whether it is possible to make the number **7** by adding any *three different numbers* together.\\n\\n### Examples\\n```\\nluckySeven([2, 4, 3, 8, 9, 1]) ➞ true\\n\\nluckySeven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ true\\n\\nluckySeven([0, 0, 0, 2, 3]) ➞ false\\n// You cannot repeat the same number to make 2 + 2 + 3 = 7\\n\\nluckySeven([4,, 3]) ➞ false\\n// You need three different numbers.\\n```\\n\\n### Notes\\n- Tests will only include numbers.\\n- Trivially, any array with a length of less than two automatically fails the test.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"import static org.junit.Assert.assertEquals; \\nimport org.junit.Test; \\n\\npublic class NumbersTrioTest {\\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertEquals(true, NumbersTrio.luckySeven(new int[] {2, 4, 3, 8, 9, 1}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertEquals(true, NumbersTrio.luckySeven(new int[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertEquals(true, NumbersTrio.luckySeven(new int[] {1, 10, 8, -3, -3, -2, 9}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertEquals(true, NumbersTrio.luckySeven(new int[] {-5, 7, -3, -5, 9, 3, 5}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertEquals(true, NumbersTrio.luckySeven(new int[] {10, 3, 2, 9, 2, -4, -8, 8}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertEquals(true, NumbersTrio.luckySeven(new int[] {-6, -1, 6, 6, -1, 0, -5, -2, 7}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertEquals(true, NumbersTrio.luckySeven(new int[] {-9, 7, 6, -5, 10, 3, -8, 8, -6, 0}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertEquals(true, NumbersTrio.luckySeven(new int[] {6, -6, 4, 5, -4, 8, 6, 2}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test09() { \\n\\t\\tassertEquals(true, NumbersTrio.luckySeven(new int[] {-2, -5, -7, 4, -7, 9, -6, -6}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() { \\n\\t\\tassertEquals(true, NumbersTrio.luckySeven(new int[] {5, -5, -7, -10, -1, 3, 7, 0, -2, -7}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test11() { \\n\\t\\tassertEquals(false, NumbersTrio.luckySeven(new int[] {7, 7}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test12() { \\n\\t\\tassertEquals(false, NumbersTrio.luckySeven(new int[] {-2, 4, 7, -3, -5, 7, -1}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test13() { \\n\\t\\tassertEquals(false, NumbersTrio.luckySeven(new int[] {5, 2, -6, 6, -5, -5, 5, -10}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test14() { \\n\\t\\tassertEquals(false, NumbersTrio.luckySeven(new int[] {1}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test15() { \\n\\t\\tassertEquals(false, NumbersTrio.luckySeven(new int[] {2, 3}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test16() { \\n\\t\\tassertEquals(false, NumbersTrio.luckySeven(new int[] {}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test17() { \\n\\t\\tassertEquals(false, NumbersTrio.luckySeven(new int[] {1, -8}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test18() { \\n\\t\\tassertEquals(false, NumbersTrio.luckySeven(new int[] {3, 8, 0, -5}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test19() { \\n\\t\\tassertEquals(false, NumbersTrio.luckySeven(new int[] {-7, -3, 0, -4, 0, -6, -1, -5, 2, -3}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test20() { \\n\\t\\tassertEquals(false, NumbersTrio.luckySeven(new int[] {-9, 0, 8, -6}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test21() { \\n\\t\\tassertEquals(false, NumbersTrio.luckySeven(new int[] {0, 0, 0, 2, 3}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test22() { \\n\\t\\tassertEquals(false, NumbersTrio.luckySeven(new int[] {-5, -4, 6, 8, 9, 8, 8}));\\n\\t}\\n}\",\"language\":\"java\",\"quality\":0,\"summary\":\"Given an array of numbers, return whether it is possible to make the number 7 by adding any three different numbers together.\\n\\nExamples\\nluckySeven([2, 4, 3, 8, 9, 1]) ➞ true\\n\\nluckySeven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ true\\n\\nluckySeven([0, 0, 0, 2, 3]) ➞ false\\n// You cannot repeat the same number to make 2 + 2 + 3 = 7\\n\\nluckySeven([4,, 3]) ➞ false\\n// You need\",\"tags\":[\"numbers\",\"loops\",\"algorithms\",\"validation\"],\"timestamp\":{\"$date\":1612078628271},\"title\":\"Lucky Seven\",\"stats\":{\"completed\":{\"total\":36,\"ratings\":[2,2,2,2,2,2,3,2,2,1,2,0,3,3,3,0,4,3,3,3,2,2,3,1,3,3,3,0,3,0,4,3,0,1,1,1,2,1,2,2],\"quality\":[],\"rators\":[\"gXTAie79kiw28tx5u\",\"3hcjckRyuxzWzgA7R\",\"a777e8chPvJkY3tKa\",\"Es4eX2stRpyoXeC7f\",\"82weQfHHmno4Mq4X7\",\"LF8Tnih5A77AeADwP\",\"btabi3PdyisuY5tn9\",\"LreCskdE4MTjTyhAM\",\"qb2DTmzQj4vNfq5K7\",\"RyzX9DrKYHCpjiXnm\",\"abJsBjq3RW5jCkc7L\",\"ip5NJFp68Ri8eKzby\",\"QD7mPMD8gmTP56nPv\",\"jyoLggHk8xQKZuoQC\",\"buX4mCQhtXCfBjeno\",\"rhS8qXRjZcpDXkwnE\",\"mfm3gB39arY8Rjb2y\",\"qaPjAANdnxFnWfj5d\",\"swCqZwsjXhQvZu5pH\",\"jCjCvyhqhpebkJn34\",\"sxci7DYKNa6q22Sjq\",\"KMR6vNzvSKMA2cXnK\",\"DmfS648aGGhQwkpoZ\",\"a49eNnfRwSMxsDJXf\",\"29SkuALTvZP92qb86\",\"htXCitorobtqYymjN\",\"rWhXHhzF4W8bea6LP\",\"5YP4TxGhcKxRWWhzP\",\"xEX3TDY6C2h82dJTn\",\"uw47663LqPME8btaA\",\"uBmbQRboE9NJNvRx3\",\"D9BgD8nkbbq4xuj6u\",\"jqLmwSB9oGb8NxYKf\",\"M4Jyjssy7yQSH7KNP\",\"XyW9cqhgLCYcSh4RT\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"3PJqzh8J5qo2HbKKE\",\"language\":\"cpp\"},{\"_id\":\"jbQDEAk7viqz2x4AX\",\"language\":\"java\"},{\"_id\":\"HzxFuMHeBuWWeed8h\",\"language\":\"javascript\"},{\"_id\":\"9gmNpQ3m9BTYm3FKr\",\"language\":\"python3\"},{\"_id\":\"uKGCxZNpKqukZnPfs\",\"language\":\"ruby\"}]}}"]