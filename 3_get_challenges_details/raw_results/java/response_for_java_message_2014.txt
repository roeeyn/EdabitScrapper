a["{\"msg\":\"result\",\"id\":\"564\",\"result\":{\"_id\":\"zcobRojF5p8DWkfiC\",\"author\":\"Edward Clark\",\"authorId\":\"3pdgguqZgNDSAJSGm\",\"code\":\"public class Challenge {\\n\\tpublic static int[] characterMapping(String str) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":2.1478260869565218,\"familyId\":\"v2vXvSGhrs2owz3Nw\",\"instructions\":\"Write a function that returns a character mapping from a word.\\n\\n### Examples\\n```\\ncharacterMapping(\\\"abcd\\\") ➞ [0, 1, 2, 3]\\n\\ncharacterMapping(\\\"abb\\\") ➞ [0, 1, 1]\\n\\ncharacterMapping(\\\"babbcb\\\") ➞ [0, 1, 0, 0, 2, 0]\\n\\ncharacterMapping(\\\"hmmmmm\\\") ➞ [0, 1, 1, 1, 1, 1]\\n```\\n\\n### Notes\\n- Start your counter at 0, and increment by **1** each time you encounter a new character.\\n- Identical characters should share the same number.\",\"lab\":\"import static org.hamcrest.core.Is.is;\\nimport org.junit.Test;\\nimport static org.junit.Assert.assertThat;\\n\\npublic class ChallengTest {\\n\\t@Test\\n\\tpublic void test1() {\\n\\t\\tassertThat(Challenge.characterMapping(\\\"abcd\\\"), is(new int[]{0, 1, 2, 3}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test2() {\\n\\t\\tassertThat(Challenge.characterMapping(\\\"abb\\\"), is(new int[]{0, 1, 1}));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test3() {\\n\\t\\tassertThat(Challenge.characterMapping(\\\"babbcb\\\"), is(new int[]{0, 1, 0, 0, 2, 0}));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test4() {\\n\\t\\tassertThat(Challenge.characterMapping(\\\"aaabb\\\"), is(new int[]{0, 0, 0, 1, 1}));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test5() {\\n\\t\\tassertThat(Challenge.characterMapping(\\\"abccbc\\\"), is(new int[]{0, 1, 2, 2, 1, 2}));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test6() {\\n\\t\\tassertThat(Challenge.characterMapping(\\\"fluffy\\\"), is(new int[]{0, 1, 2, 0, 0, 3}));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test7() {\\n\\t\\tassertThat(Challenge.characterMapping(\\\"madness\\\"), is(new int[]{0, 1, 2, 3, 4, 5, 5}));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test8() {\\n\\t\\tassertThat(Challenge.characterMapping(\\\"buttery\\\"), is(new int[]{0, 1, 2, 2, 3, 4, 5}));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test9() {\\n\\t\\tassertThat(Challenge.characterMapping(\\\"canine\\\"), is(new int[]{0, 1, 2, 3, 2, 4}));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() {\\n\\t\\tassertThat(Challenge.characterMapping(\\\"hohoho\\\"), is(new int[]{0, 1, 0, 1, 0, 1}));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test11() {\\n\\t\\tassertThat(Challenge.characterMapping(\\\"hmmmmm\\\"), is(new int[]{0, 1, 1, 1, 1, 1}));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test12() {\\n\\t\\tassertThat(Challenge.characterMapping(\\\"\\\"), is(new int[]{}));            \\n\\t}\\n}\",\"language\":\"java\",\"summary\":\"Write a function that returns a character mapping from a word.\\n\\nExamples\\ncharacterMapping(\\\"abcd\\\") ➞ [0, 1, 2, 3]\\n\\ncharacterMapping(\\\"abb\\\") ➞ [0, 1, 1]\\n\\ncharacterMapping(\\\"babbcb\\\") ➞ [0, 1, 0, 0, 2, 0]\\n\\ncharacterMapping(\\\"hmmmmm\\\") ➞ [0, 1, 1, 1, 1, 1]\\n\\nNotes\\nStart your counter at 0, and increment by 1 each time you encounter a new character.\\nIdentical characters s\",\"tags\":[\"data_structures\",\"strings\"],\"timestamp\":{\"$date\":1570215579200},\"title\":\"Unique Character Mapping\",\"stats\":{\"completed\":{\"total\":145,\"ratings\":[3,3,3,3,3,4,1,2,0,3,1,2,2,3,3,4,2,4,2,4,1,3,0,4,2,2,1,1,3,2,0,2,2,2,2,1,1,2,3,0,1,1,3,0,1,3,2,2,3,2,1,1,2,1,1,0,2,3,2,0,2,3,3,2,3,2,3,3,3,3,3,2,2,3,2,2,2,1,2,0,2,2,2,3,2,2,2,3,3,2,3,2,3,1,3,3,3,2,3,1,2,3,1,3,2,3,3,3,3,3,2,2,3,2,2],\"rators\":[\"3pdgguqZgNDSAJSGm\",\"qXMhSY3DbQof8znQT\",\"HsFc9PgmpP2X9Fwh9\",\"SnY7WidXJoAyyuPuA\",\"fQCHGFe43dEtqjEFT\",\"6qyzL2iceT8a7bos4\",\"sxci7DYKNa6q22Sjq\",\"ZBDiEMi7dbjRL55LB\",\"eXW8reZCCZHQzJjQi\",\"jHXJPfu5WXh9YN97E\",\"dGscPdzKKe2p4qYzs\",\"urckS99caSjRxPBvp\",\"wi87KyhWArpx4tgTr\",\"pzz8vFouna6JTTAiW\",\"W4jpCs2jekeg5qAwc\",\"Prw5Jq38wrSoj5QSF\",\"sy8qpAykttp6nMDyY\",\"XbBsZ7vSHdw88tibi\",\"YF79LnTdprobbYY5v\",\"CYt2jTCEuK9dYWruk\",\"mEB7iFS7d9wkTfCwf\",\"BSDtieYGg6H7evesT\",\"k4CRi6XygDtQpaYSY\",\"MmtjyutniccFweSyK\",\"cM2toP3sBj8GicvzB\",\"J9zJq7PMGb6mqzcHW\",\"Es4eX2stRpyoXeC7f\",\"teqbjTHTg6ScWbPgE\",\"cfi8jhhSJ3Nq2gvqf\",\"tQatuCqYXLqvQ2rDh\",\"gXMfzkYnoTZXXemY8\",\"rehehi2Tr2mwaEoJE\",\"ko7oJ85JMftgcbkrr\",\"4RHx3H8EwP2oboW8e\",\"fbYN9Jp46RqBqCd2K\",\"wYYMNPe8nSiJFbvJw\",\"cjxsqXfkAPoadmppi\",\"gGnDsJz5hr2t9MKCF\",\"vRXuYYBNuHEQ29fbm\",\"feubnquqgyoq3sa3Q\",\"8tujqLqi5XWe2vry8\",\"imoNrk36ozReP939p\",\"rgG69nMWvp7wXDSsR\",\"TrquEHytntLKHA4m2\",\"jyoLggHk8xQKZuoQC\",\"5seiNqw6ZXoF2GRRd\",\"etoSR23iELGGgs9rA\",\"rwETZ6XCNoHCEyB66\",\"pfex6viJAx2Cx3Dah\",\"HiD9tdPXAJhZp9j6C\",\"pBMXMQem6BpSeooYT\",\"htXCitorobtqYymjN\",\"JQGw9jsJPEasdwhNJ\",\"GgxxSd7k4CLfzkFMH\",\"T2vhHPhRR96hRizq8\",\"rA5nhfhFwfqvmJb6M\",\"RtGQTJYN5ToH3pnGT\",\"dcW9oK2uRo8h8mBe2\",\"4RsakkyRXyYGwFxEa\",\"vZnqZqAz3vxZnQaNE\",\"vEN56nHw7hTxbyHhp\",\"KgaNktx83boDbbSzM\",\"QKFydGwTvCNKriqiG\",\"yNa2KfyrokkiqLnW3\",\"j428nMyNKY8g2dcCi\",\"CYDSQKagEe3MPykRs\",\"kiRkuN7JXqvWBa4SG\",\"sJaSeR649EEMX9F4v\",\"MCjdtAAjL6sGLukPr\",\"qraDA47Ewou5mzvrL\",\"5p6bwXayfAp7Y4WQ7\",\"87otmbdqNT3bHsQFu\",\"jHMFevd6679JR27gK\",\"wBDcgF2qB7FQRuRBd\",\"R66wcePWdTwD7uacE\",\"rvojHhKH3DaxotefQ\",\"azAzSkvJd7eyXY9x9\",\"oiXzBqMgGeR3bqMnb\",\"7nKDx4eTB9a66j5iZ\",\"gXTAie79kiw28tx5u\",\"Ym8AjbKGSJooun3nt\",\"pEhomqRL5nDRcvbYo\",\"yXGiiSAR5nBHnH3yr\",\"2R6BDznoKLYjBfcBv\",\"DzvdGwHEjqsX7wyKr\",\"5KowacoCuJ494hxg6\",\"mxjrvQP2vPFBjAGxu\",\"oMZovHkR6QqNvQwyc\",\"5Rr75sFqhpkowFk3k\",\"xGtxQz9WnAPPKJZxK\",\"8Xx8nWXRydHDBGfQf\",\"mQKWauR6b252TmdX4\",\"jXTnL3JatkKjoifyb\",\"a777e8chPvJkY3tKa\",\"JDPS2gioHDcZsERYb\",\"6eGNbCnp6kneyAdRT\",\"CchXpepYoWwroXGLZ\",\"82weQfHHmno4Mq4X7\",\"p8qqFdJ3FSk5x9z3G\",\"MDpoPq373YipvFuFt\",\"r6mkxEZEBtSaKdpge\",\"RGN3QTb5LXj4ZPPkj\",\"JBpQrEnvKCkFXgKpQ\",\"eotsnqC2X8GhZbyv9\",\"LNCb5rksJLJ43L4Nw\",\"buX4mCQhtXCfBjeno\",\"e4jWeRW5xSbmqkxP2\",\"rhS8qXRjZcpDXkwnE\",\"XLs4BAJhxAydcF5e8\",\"CggGfsERnPKGupFWp\",\"wFRLGjA56kj7xyhmv\",\"jCjCvyhqhpebkJn34\",\"a49eNnfRwSMxsDJXf\",\"2NJZbusRvu3eJ4tHu\",\"paLqikFpwQdrnKMiC\",\"KMR6vNzvSKMA2cXnK\",\"GttCrAdrNvAw8r3kk\",\"afvP29FhRou2bTaav\",\"cWf3ew5aDexbfSHgS\",\"rWhXHhzF4W8bea6LP\",\"XqijAorPxipWAK5MA\",\"6rvJwN4mcX7iYGjY7\",\"2L7aFs4u7eQZZYpGt\",\"uw47663LqPME8btaA\",\"LkvCXdcjb5vZstveu\"],\"quality\":[5,4,2,4,3,5,5,4,5,3,5,5,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.333333333333333,\"family\":[{\"_id\":\"AiWEZSinxkMwoRhwR\",\"language\":\"cpp\"},{\"_id\":\"zcobRojF5p8DWkfiC\",\"language\":\"java\"},{\"_id\":\"9MEWMJ5eX8EAiWSs5\",\"language\":\"javascript\"},{\"_id\":\"yPsS82tug9a8CoLaP\",\"language\":\"python3\"},{\"_id\":\"SPZJaHrHhgfnMjgF4\",\"language\":\"ruby\"}]}}"]