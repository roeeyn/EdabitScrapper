a["{\"msg\":\"result\",\"id\":\"494\",\"result\":{\"_id\":\"mMc9D6vB4iPiiAK7k\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class PronicNumber {\\n\\tpublic static boolean isHeteromecic(int n) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":1.799043062200957,\"quality\":4.818181818181818,\"editorId\":\"a777e8chPvJkY3tKa\",\"familyId\":\"QwJteh9W46uYwpsDv\",\"instructions\":\"A **pronic** number (or otherwise called as **heteromecic**) is a number which is a *product of two consecutive integers*, that is, a number of the form `n(n + 1)`. Create a function that determines whether a number is pronic or not.\\n\\n### Examples\\n```\\nisHeteromecic(0) ➞ true\\n// 0 * (0 + 1) = 0 * 1 = 0\\n\\nisHeteromecic(2) ➞ true\\n// 1 * (1 + 1) = 1 * 2 = 2\\n\\nisHeteromecic(7) ➞ false\\n\\nisHeteromecic(110) ➞ true\\n// 10 * (10 + 1) = 10 * 11 = 110\\n\\nisHeteromecic(136) ➞ false\\n\\nisHeteromecic(156) ➞ true\\n```\\n\\n### Notes\\nA recursive version of this challenge can be found via this  [link](https://edabit.com/challenge/BfLgSs2YAtjDYEyJM).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"import static org.junit.Assert.assertEquals;\\nimport org.junit.Test;\\n\\npublic class PronicNumberTests {\\n\\tprivate int[] numVector = new int[] {0, 2, 7, 110, 136, 156, 182, 218, 250, 272, 306, 362, 380, 422, 462, 600};\\n\\tprivate boolean[] resVector = new boolean[] {true, true, false, true, false, true, true, false, false, true, true, false, true, false, true, true};\\n\\t\\n\\t@Test\\n\\tpublic void test01() {\\n\\t\\tassertEquals(PronicNumber.isHeteromecic(numVector[0]), resVector[0]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test02() {\\n\\t\\tassertEquals(PronicNumber.isHeteromecic(numVector[1]), resVector[1]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test03() {\\n\\t\\tassertEquals(PronicNumber.isHeteromecic(numVector[2]), resVector[2]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test04() {\\n\\t\\tassertEquals(PronicNumber.isHeteromecic(numVector[3]), resVector[3]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test05() {\\n\\t\\tassertEquals(PronicNumber.isHeteromecic(numVector[4]), resVector[4]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test06() {\\n\\t\\tassertEquals(PronicNumber.isHeteromecic(numVector[5]), resVector[5]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test07() {\\n\\t\\tassertEquals(PronicNumber.isHeteromecic(numVector[6]), resVector[6]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test08() {\\n\\t\\tassertEquals(PronicNumber.isHeteromecic(numVector[7]), resVector[7]);\\n\\t}\\n\\t@Test\\n\\tpublic void test09() {\\n\\t\\tassertEquals(PronicNumber.isHeteromecic(numVector[8]), resVector[8]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test10() {\\n\\t\\tassertEquals(PronicNumber.isHeteromecic(numVector[9]), resVector[9]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test11() {\\n\\t\\tassertEquals(PronicNumber.isHeteromecic(numVector[10]), resVector[10]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test12() {\\n\\t\\tassertEquals(PronicNumber.isHeteromecic(numVector[11]), resVector[11]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test13() {\\n\\t\\tassertEquals(PronicNumber.isHeteromecic(numVector[12]), resVector[12]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test14() {\\n\\t\\tassertEquals(PronicNumber.isHeteromecic(numVector[13]), resVector[13]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test15() {\\n\\t\\tassertEquals(PronicNumber.isHeteromecic(numVector[14]), resVector[14]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test16() {\\n\\t\\tassertEquals(PronicNumber.isHeteromecic(numVector[15]), resVector[15]);\\n\\t}\\n}\",\"language\":\"java\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,3,1,2,3,3,2,2,3,1,5,4,1,2,0,2,4,2,1,1,0,1,2,2,0,2,3,2,3,3,3,3,2,3,4,1,2,2,0,3,1,0,2,3,3,3,2,1,1,1,2,2,1,2,1,1,4,3,1,2,2,2,1,1,1,1,3,1,4,3,1,2,2,0,1,2,2,1,2,0,2,2,2,2,2,2,1,1,1,0,3,2,2,2,1,2,3,0,2,2,3,1,2,3,2,2,1,2,2,1,2,2,1,3,3,2,2,1,2,0,1,1,3,3,3,1,3,0,1,2,2,2,3,2,1,1,3,3,2,2,1,1,1,2,1,3,3,2,3,1,1,2,2,2,2,2,3,1,3,2,2,2,1,2,2,2,1,1,2,3,1,2,0,2,1,0,0,1,1,2,1,0,1,1,2,3,3,0,1,2,4,0,2,1,1,2,2,1,0,2,2,2,2,2],\"quality\":[5,5,5,4,5,5,5,5,5,5,4],\"rators\":[\"a777e8chPvJkY3tKa\",\"Es4eX2stRpyoXeC7f\",\"rehehi2Tr2mwaEoJE\",\"azAzSkvJd7eyXY9x9\",\"rvojHhKH3DaxotefQ\",\"DzvdGwHEjqsX7wyKr\",\"gXTAie79kiw28tx5u\",\"yXGiiSAR5nBHnH3yr\",\"RQL2PAWda9Bh79GNi\",\"mxjrvQP2vPFBjAGxu\",\"Ym8AjbKGSJooun3nt\",\"oRi93mrm7DLdeiFjf\",\"T6xRoSqcSHjvP2Tik\",\"udHFfcqNNej6udnpP\",\"mQKWauR6b252TmdX4\",\"iyR4PfLkq9NWvAZ5E\",\"cqdhdH7Bi7uXnH4tB\",\"XkNS8KEhsJGBALGLW\",\"QTieDiq7DcTzf4KCM\",\"RSSrWo6AiSDRNAy5K\",\"Pm7cKuhpRaEfsEuLz\",\"82weQfHHmno4Mq4X7\",\"x2rocrTaTpLCDR24d\",\"btabi3PdyisuY5tn9\",\"xbjEPk4aQLbfdGCHX\",\"qb2DTmzQj4vNfq5K7\",\"mGaEDPw5FsDb3vdnq\",\"xa3CFkeyE66qrfTZ9\",\"LGm76GJAvFL7ZiJSM\",\"p2woPCQKXuWJCwffJ\",\"qqMbsvMdByX2aDBXQ\",\"LNCb5rksJLJ43L4Nw\",\"vRXuYYBNuHEQ29fbm\",\"qkzFDd47Exc34jWzm\",\"DrkR35NqnP9NDLbq6\",\"qp4L4SgDqecMhDeEF\",\"jRqY4i8gPemsZMBGf\",\"Fc8NBfDNPDEQRL9p9\",\"DazcJZt3TwLtTWbKv\",\"ZNWPyuZYDLJ4tXdgN\",\"p8qqFdJ3FSk5x9z3G\",\"zza5WjC8QrHcoDZBF\",\"YLqdr7bYjwew2KM4N\",\"jyoLggHk8xQKZuoQC\",\"buX4mCQhtXCfBjeno\",\"H2MS933uYLm2BahGu\",\"htXCitorobtqYymjN\",\"ST9SLqmhXKemBMeXP\",\"xEX3TDY6C2h82dJTn\",\"rhS8qXRjZcpDXkwnE\",\"qaPjAANdnxFnWfj5d\",\"mfm3gB39arY8Rjb2y\",\"KnjLZKZxhWwdbfPEK\",\"a49eNnfRwSMxsDJXf\",\"qDvXiyn6YpbTJ7hsy\",\"at3ewEBHoK6rNanmH\",\"563onSvqgjToY79ah\",\"H2TNggjJLpTbGXuDF\",\"CoQTHAsXDxn6oot3H\",\"Zuoqf9T3LSreF9NCc\",\"HHfJWu56BNQAdSzMf\",\"Ej8MsG44TGHQbGC6Z\",\"LTHowif8iogZG6dio\",\"83WLmL5iPMEvSzXEC\",\"J9RJf8bBmB7MpzF3m\",\"8jKygzZc5ssn7EtkG\",\"gKgTnJGLYTcezZCLf\",\"qZgzjHyB3Yrkah3H7\",\"S7xX7gEm67yd29eA5\",\"wFRLGjA56kj7xyhmv\",\"6rvJwN4mcX7iYGjY7\",\"qD839xqWEoPtQoXS7\",\"GttCrAdrNvAw8r3kk\",\"GArCerEapdotZYMDy\",\"J9zJq7PMGb6mqzcHW\",\"4XkodTpxqZq3SsJJL\",\"TA9dwvnSdta7rTynz\",\"CbuDoWREni672DT5r\",\"DzXBcisXyi72whQz7\",\"sZFnMu3MRWZ9GAfBJ\",\"hSvLZyJJ83zpRgTzL\",\"8yyfRwCsP5ovSFT5p\",\"DgtxkgTMERQSwfSga\",\"a5A7maCe3ME9AGdx2\",\"XQi6GMR3SwqQLBQxp\",\"atbkGCJJiAC9AavFm\",\"fqonCdsknnffQm5Zt\",\"pmbBNja9d3zha93MS\",\"ay4wvaNDNwxWgj2qu\",\"HXbTKW3jmmyRAsKrr\",\"5FTQhvh8zTRWhAene\",\"9yegb3yvroNMdFnyo\",\"8KL3dJu6NEPNEbWPb\",\"M3FuRmfxX6HG6q8Gd\",\"azMvjYE9qwKnhvaBQ\",\"mG8HqKiAQFTdRZthG\",\"vJwp5iyTLniw4MQsP\",\"XEpYY4xBCa8CFLw2a\",\"wxiWcG64qke4iJudE\",\"WNAstuoBy6yyd2YLp\",\"6d49sckxJ9zDzYaWC\",\"DwiToLaJa8quityp5\",\"QwkJidQW7vvEY6TLp\",\"AHmgsYBy6A66bDQFC\",\"iounszSXf6EdiSoP8\",\"YAzCMKmAZQWX4GHLM\",\"b9iSg6CvRnHuLtQA5\",\"GMGjG8ZcRLfgBnufZ\",\"7vAatLYq2Fdk4Kbdp\",\"7ASDvPPs5Z7d5Camw\",\"Wuqu3gekPrAqMiMHa\",\"GsrjAqoAdLATJH9qD\",\"B4pxRqzo43M7S8FbP\",\"3ES4qyewSQiFz8Wm7\",\"JFodQijHHdRkkrZvT\",\"zHECHZJhJpeCgDp7Q\",\"QcHwSoJfMiapspyTL\",\"jCjCvyhqhpebkJn34\",\"jAtjyj8Y45Pk7TkRT\",\"KantmrimRrDJz2YCT\",\"sPB48B8nFHRXoGxXQ\",\"6waJRR7JPunYF8DhS\",\"jppr4zWvAWWno7vDF\",\"RsujLHaML6L3KinzK\",\"uveRrbYzJwS8FKGkd\",\"2CSjxNKayqz8YsEpj\",\"QioEN3Y2iy6FomY5f\",\"b9Tkkzxek5jj7eytm\",\"9pCPyhvQmbkWyD2LL\",\"46GPry8o9S5A5PSrA\",\"bLJZFxCSvjHHuQWuQ\",\"uCyqTQMNukTYM2A7S\",\"Lziy7JiQh9RzWq9AS\",\"rdMJHzgtpDruyQsRF\",\"fDbLmhahNusJZTE5N\",\"bDA8NeME5tCyyoodM\",\"2NJZbusRvu3eJ4tHu\",\"rWhXHhzF4W8bea6LP\",\"shxCwEFKNEFqest7J\",\"aqhzzoK9fofcL3mJQ\",\"YEi5MzLkWxFrAQHwt\",\"eXk5XguXy8FgBAPA3\",\"tBpjwaLofayEsPKZo\",\"W4TtzLajjmS8QPK3c\",\"5bpKGdjbtT45ZWi6m\",\"mS4t7GChGHwJ65Lfk\",\"pJhiCDrFc5z5rocPn\",\"MPcATtdQZ42wpf2M8\",\"dywZvYstyff26judJ\",\"uu5QzAypBPKmx5bcE\",\"jj2Cd6MJ7XmXouenx\",\"PJu3WcTpfRrvHfQiS\",\"CYdpG37XFpHudffE3\",\"sxci7DYKNa6q22Sjq\",\"9j3MDLXnvJZLp3PYk\",\"hN5hfgBocCJuBeBo8\",\"qfKoNZQaufywMFqLN\",\"rcTKkjD4JqfJ7XBx2\",\"gMtce5ZC6zFbEcctZ\",\"458346dx2xqYvhefD\",\"FCxuufStvDtffCAkv\",\"ZhcKfAmkapaN9CMz7\",\"KMR6vNzvSKMA2cXnK\",\"kc27cpmSvHZiv8LBk\",\"2bv7drqso5WCdHc4X\",\"YzfChr4vydjdfpCue\",\"s5sZ5xfqvS7KBG49w\",\"FAaJd5Eas9wJsGsZa\",\"pJw54vavzCHcHrCNu\",\"D5iRjnwQXaMPQhQ5x\",\"sRPM2cDXPjE9TefSu\",\"CfYQZT6y7NSJ5suyp\",\"96BmXt8QzY9aisuSi\",\"te34NSSrhzn5Czdai\",\"2zDLqRRby62ioNjd8\",\"v5zQmpi62YfFRCDKD\",\"BSwDMD25he3ZBa77w\",\"XNLgrNnimsParKKk3\",\"Y7AJGP3YZDokHDihw\",\"HJBb3Aanzv9vRbwzg\",\"kroGFuRa68WMhYjgg\",\"DmfS648aGGhQwkpoZ\",\"cL9DgJPY3ByHK8Pwe\",\"pL7YcMW3tGSvzqkhF\",\"TLhsLDPLQZoz3n6pg\",\"Mc5rF5KQKTjBNmFe8\",\"TsoCZ4sjfFZYdo8Jn\",\"gRA6PFAmujemC3Tu7\",\"gxDYXthLLR49QCnPT\",\"qrnWDaKLCXAdCfPhJ\",\"TqNDEoXixjepNETeB\",\"BLbZoYWcDxioTMv7e\",\"btmFXKohk3b4PSZWz\",\"BffB8tH9sedbDQYx4\",\"Rw7ZPjpsKc7DcjtY5\",\"foSQea8k5F7zp98ra\",\"yqJsQMNiz78FG9W5d\",\"4sJqxtJyTyAc9D8gf\",\"BjorJJXyMukB98JsC\",\"7nXhbKocsfZhdXK9k\",\"D2G6Z2sbZRjXjxiyo\",\"KXvJphJugNmpMpyJt\",\"jDHhJiwqKjWgBm4ma\",\"EisRAgn9ws7Gdasob\",\"N85zkAitn448MNwMa\",\"GByiumxWy7aWN63Bd\",\"BMkSCQ7CCxmcLipWa\",\"RddyfMNXKDmtybJuq\",\"729tcmuKuMoXgB3Cj\",\"gJk3xuvWLPZy8fFQg\",\"unqzSsxpxj9sZ7rbD\",\"FxPDKKibxnZjGJLs6\",\"uw47663LqPME8btaA\",\"Z77x6ECiX5QFYzyyK\",\"nFbmNzMQ38TncmfQX\"],\"total\":230},\"flags\":1},\"summary\":\"A pronic number (or otherwise called as heteromecic) is a number which is a product of two consecutive integers, that is, a number of the form n(n + 1). Create a function that determines whether a number is pronic or not.\\n\\nExamples\\nisHeteromecic(0) ➞ true\\n// 0 * (0 + 1) = 0 * 1 = 0\\n\\nisHeteromecic(2) ➞ true\\n// 1 * (1 + 1) = 1 * 2 = 2\\n\\nisHeteromecic(7) ➞ false\",\"tags\":[\"math\",\"numbers\",\"loops\",\"validation\"],\"timestamp\":{\"$date\":1601827426562},\"title\":\"Pronic Number\",\"family\":[{\"_id\":\"mMc9D6vB4iPiiAK7k\",\"language\":\"java\"},{\"_id\":\"c8cLz2vX6NiBKRYmm\",\"language\":\"javascript\"},{\"_id\":\"Rbs2G5PaJtmYdLTJM\",\"language\":\"python3\"}]}}"]