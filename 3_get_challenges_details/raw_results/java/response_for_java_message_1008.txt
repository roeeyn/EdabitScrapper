a["{\"msg\":\"result\",\"id\":\"65\",\"result\":{\"_id\":\"vzhWSMR2A6wDyFK2o\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class Sandwiches {\\n\\tpublic static boolean hasSameBread(String[] a, String[] b) {\\n\\t\\t\\n\\t} \\n}\",\"difficulty\":0.5,\"familyId\":\"TsRRjzSGrMAKQnjsq\",\"instructions\":\"Given two arrays, which represent two sandwiches, return whether both sandwiches use the same type of bread. The bread will always be found at the start and end of the array.\\n\\n### Examples\\n```\\nhasSameBread(\\n  [\\\"white bread\\\", \\\"lettuce\\\", \\\"white bread\\\"],\\n  [\\\"white bread\\\", \\\"tomato\\\", \\\"white bread\\\"]\\n) ➞ true\\n\\nhasSameBread(\\n  [\\\"brown bread\\\", \\\"chicken\\\", \\\"brown bread\\\"],\\n  [\\\"white bread\\\", \\\"chicken\\\", \\\"white bread\\\"]\\n) ➞ false\\n\\nhasSameBread(\\n  [\\\"toast\\\", \\\"cheese\\\", \\\"toast\\\"],\\n  [\\\"brown bread\\\", \\\"cheese\\\", \\\"toast\\\"]\\n) ➞ false\\n```\\n\\n### Notes\\n- The arrays will always be **three** elements long.\\n- The first piece of bread on one sandwich must be the same as the first piece of bread on the other sandwich. The same goes for the last piece of bread.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"import static org.junit.Assert.assertEquals;\\nimport org.junit.Test;\\n\\npublic class SandwichesTests {\\n\\t\\n\\t@Test\\n\\tpublic void test01() {\\n\\t\\tassertEquals(Sandwiches.hasSameBread(\\n\\t\\t\\tnew String[]{\\\"white bread\\\", \\\"lettuce\\\", \\\"white bread\\\"}, \\n\\t\\t\\tnew String[]{\\\"white bread\\\", \\\"tomato\\\", \\\"white bread\\\"}), \\n\\t\\t\\ttrue\\n\\t\\t);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test02() {\\n\\t\\tassertEquals(Sandwiches.hasSameBread(\\n\\t\\t\\tnew String[] {\\\"brown bread\\\", \\\"chicken\\\", \\\"brown bread\\\"},\\n\\t\\t\\tnew String[] {\\\"white bread\\\", \\\"chicken\\\", \\\"white bread\\\"}), \\n\\t\\t\\tfalse\\n\\t\\t);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test03() {\\n\\t\\tassertEquals(Sandwiches.hasSameBread(\\n\\t\\t\\tnew String[]{\\\"toast\\\", \\\"cheese\\\", \\\"toast\\\"},\\n\\t\\t\\tnew String[]{\\\"brown bread\\\", \\\"cheese\\\", \\\"toast\\\"}),\\n\\t\\t\\tfalse\\n\\t\\t);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test04() {\\n\\t\\tassertEquals(Sandwiches.hasSameBread(\\n\\t\\t\\tnew String[]{\\\"white bread\\\", \\\"lettuce\\\", \\\"toast\\\"},\\n\\t\\t\\tnew String[]{\\\"white bread\\\", \\\"tomato\\\", \\\"toast\\\"}),\\n\\t\\t\\ttrue\\n\\t\\t);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test05() {\\n\\t\\tassertEquals(Sandwiches.hasSameBread(\\n \\t\\t\\tnew String[]{\\\"white bread\\\", \\\"lettuce\\\", \\\"toast\\\"},\\n\\t\\t\\tnew String[]{\\\"brown bread\\\", \\\"tomato\\\", \\\"toast\\\"}),\\n\\t\\t\\tfalse\\n\\t\\t);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test06() {\\n\\t\\tassertEquals(Sandwiches.hasSameBread(\\n\\t\\t\\tnew String[]{\\\"white bread\\\", \\\"lettuce\\\", \\\"brown bread\\\"},\\n\\t\\t\\tnew String[]{\\\"brown bread\\\", \\\"tomato\\\", \\\"white bread\\\"}),\\n\\t\\t\\tfalse\\n\\t\\t);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test07() {\\n\\t\\tassertEquals(Sandwiches.hasSameBread(\\n\\t\\t\\tnew String[]{\\\"white bread\\\", \\\"lettuce\\\", \\\"brown bread\\\"},\\n\\t\\t\\tnew String[]{\\\"white bread\\\", \\\"tomato\\\", \\\"white bread\\\"}),\\n\\t\\t\\tfalse\\n\\t\\t);\\n\\t}\\n\\t\\n}\",\"language\":\"java\",\"quality\":4.585365853658536,\"summary\":\"Given two arrays, which represent two sandwiches, return whether both sandwiches use the same type of bread. The bread will always be found at the start and end of the array.\\n\\nExamples\\nhasSameBread(\\n  [\\\"white bread\\\", \\\"lettuce\\\", \\\"white bread\\\"],\\n  [\\\"white bread\\\", \\\"tomato\\\", \\\"white bread\\\"]\\n) ➞ true\\n\\nhasSameBread(\\n  [\\\"brown bread\\\", \\\"chicken\\\", \\\"brown bread\\\"],\\n  [\\\"wh\",\"tags\":[\"arrays\",\"language_fundamentals\",\"validation\",\"logic\"],\"timestamp\":{\"$date\":1602902792612},\"title\":\"Similar Bread\",\"stats\":{\"completed\":{\"total\":302,\"ratings\":[1,1,1,1,1,0,1,0,1,2,1,1,1,1,1,0,1,1,2,0,1,2,0,1,1,1,0,1,0,0,1,2,0,1,1,2,0,1,1,0,1,1,1,1,1,0,0,0,1,0,1,0,2,1,0,1,1,0,0,2,0,0,1,2,0,0,0,2,0,2,1,2,0,0,1,1,0,1,0,1,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,1,0,1,1,2,0,0,0,0,0,1,0,0,1,0,1,1,0,1,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,0,1,0,2,1,0,0,1,0,0,0,0,0,1,0,1,1,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,2,1,1,0,1,2,0,0,0],\"quality\":[5,5,5,5,3,4,4,5,4,5,5,4,5,5,5,5,3,4,5,3,5,5,5,5,4,5,5,5,5,5,5,5,4,5,5,4,5,5,5,5,5,5,3,5,5,5,4,5,5,5,4,5,5,5,5,5,4,5,5,5,5,5,1,5,5,5,5,4,4,5,5,5,3,5,5,5,5,5,5,2,5,1],\"rators\":[\"a777e8chPvJkY3tKa\",\"Es4eX2stRpyoXeC7f\",\"AeJSxRqw2dJZuGvdk\",\"BSJAuSLSs5Sv5SYAf\",\"h8TPaYSrD6pkrazpJ\",\"9amCEoE43AdSneJZ7\",\"hhxjQREtmHSheH9Pj\",\"oMZovHkR6QqNvQwyc\",\"z6iXZMSWYFtPrRwdp\",\"pPucbWu53MvGtgpJc\",\"s6CePt3SrZTSzxy5s\",\"HTHTaRGeFB6tGKRCJ\",\"2J3Y3WdPSdfyBqc3k\",\"CvEuREgZbQcmWaiW5\",\"puWkZTjbBBnJXH9Rd\",\"C9yBWYcZsjmJYww3K\",\"JszPst3958te56jFk\",\"jb9RLyyuo565bKDzN\",\"WA3tgmHcpcg3iaA4K\",\"xv5obFhsxY93mqR5S\",\"sbnXNh3YegeK42AJH\",\"k8yJnkTqSWfgKAfZW\",\"RMFRyHbB3HKYnEAmZ\",\"gBGjCfJvPHswDM5JQ\",\"8X3noJctwEu2rTshK\",\"yBeWtGNg9yuECLqGQ\",\"QRpK4ZGG67fSkGwXs\",\"NRSD8W7wyYZyrk3x2\",\"HaWYTmbC3CuQdjw6B\",\"EiMiWQuPKQmWLt3yy\",\"LojGbjc2jnd4KmdEo\",\"Bh4q4XStLFDXh4Tsj\",\"gGa78GqXuPgmhqaGo\",\"TrquEHytntLKHA4m2\",\"sjngcczFeMS6jJ28T\",\"KnPDaXuCY5iwrXBne\",\"EF7uncLG8eD2mHbbz\",\"Dwg87a7awYWRiXFSH\",\"vZxkd44hNe7JeBhpM\",\"qJ2TgHitgMYZRTZ5d\",\"Fd9765rksgPK4E2Zy\",\"kQRtmSZfHdSzFserc\",\"eyvHBQ3fpSHwKniZP\",\"kK4TRTy8sWhCmDN9o\",\"aDGtMfpmYW2RAbimn\",\"EuG5ESgzcJ5itKf8q\",\"hxTpf9xJCXk7ecK4F\",\"3oZKDoY9FdANBZJqM\",\"J923b8DS72xP4JLGW\",\"dCPjhoqq2wgxC4L5v\",\"5ij6scpyYDWiqCZPS\",\"duPrysKSzbFQyGzxN\",\"SfmXqCfDksMb883DC\",\"srCFNCn4MwhAPtGg9\",\"DXgRTGaTkQJrZcxPc\",\"GPHWiGTpSapGCN5tv\",\"2wS9Wm3Nj5ZFcMnfA\",\"zE46SymvixkeFJmPM\",\"hRNMGysSfXFB6Y28W\",\"7gBLtxKryhTryH5zb\",\"j4jF6TNAz6dQXALrb\",\"izdAHuFQcWY2pa3YG\",\"87zXBwLkpQwvywQNu\",\"ThNs7XT8wCdNNYXDx\",\"THTnW75kBggw2qqta\",\"PQwosSTvJgndocGE2\",\"CoEamPmmpgNQY3uSo\",\"2NukYXAoNkuK6PBsK\",\"uoRgQk7rJakFTkNyC\",\"Cg2MBDfAZS9QHdKh4\",\"YQMuoW6eGd7oWXA9G\",\"okRHHcgPnZcTgGoqf\",\"RN5n72zLo8bHurW2D\",\"q8NixmnuQQ2o5PeRt\",\"hPsKex7yhvKyu3qSR\",\"SbDRsLR6yfZXETyKN\",\"GbRHktq4CbuaybhBT\",\"skRhnbBX7ecq8tMaL\",\"YuRnAAhqjaHg8ZcRT\",\"S5be2eGrdCkbhWGit\",\"znAEtihFCYiPRpSQP\",\"vmKG9psxmRcoZMtow\",\"82weQfHHmno4Mq4X7\",\"DM6xrFP5pzY7SimbS\",\"e5c4uxBeto5PZN5Mg\",\"xn3MGdjMvfkwd59HR\",\"wb2TgNPXdATasXZh9\",\"gfF2QS5Ric8WKzMe2\",\"fJAnQriWjfZA5EFCK\",\"JfbhJEDjBFaGqTmqW\",\"x8yiSAgetH6izRA36\",\"cJmmvnmJSXvBXtydi\",\"oriNs9krScLxLxgLB\",\"Xxtqec4QLRoHSaE7X\",\"6Xa9BZRmb7RXzNGjS\",\"jXTnL3JatkKjoifyb\",\"S2kYocaERjq9YtCLb\",\"zTEKMLMevG8xfxEj6\",\"zKdb3cDytehHruckw\",\"EwK4QCN3TcrmfbAcR\",\"cueHAmTrcWuowXf58\",\"ENtEccBrSYd7oZKFZ\",\"qWEz8tGrQeTexjyxA\",\"7tS92WxCDr2TxY6nZ\",\"tpqREcJouNQGbRBH3\",\"M9Z8faPNQgrNmZehu\",\"etoSR23iELGGgs9rA\",\"GJ2EZBh34pMwjNANw\",\"7FKwxbwYkAywfpshB\",\"W3utHzNqajB3LGKDC\",\"3mppMqWWmELNe5Xjo\",\"GiqPq82is4HGWdZHA\",\"79Wo8iNbhEr7BvrNE\",\"NdLzb3BZ5J8ftnCkS\",\"SjinC2jbSfuCEshuC\",\"9PkZRtHNhzYNPcZuF\",\"earyFiD9CaSDJBEkY\",\"tyeHaiw6zNeBPSBfD\",\"5TaPWyRv9DZWWodp8\",\"h4MoTgD97S8GfDzmM\",\"ZjEdErENicjeqKZ8g\",\"JXzLQnLRChtrgKDe8\",\"yrw9RoH4d6xEtMNqh\",\"sJuq37PFQozqB4C7k\",\"jRgHxkoLnr8PJ88X4\",\"k66Tx5vNCHFXgkMAG\",\"J2K4ngL7NPJqsEnQ5\",\"44arJN5SYx3HyfetA\",\"ZkvBs5oddaBfKj28G\",\"79wYKX3wpNhCepTMD\",\"8Xx8nWXRydHDBGfQf\",\"47PyFbZyxWuP9Bgga\",\"Q2u7eLt9YmNXjD9J7\",\"unNqQjSHzkb4pCzEu\",\"ikxSkiQjCjYPsFwMT\",\"9FXFESPtZf7KWKH3u\",\"Tf7TJFSPktJBgLA4k\",\"Rn5YNvYdY468a7vRp\",\"FrorBN8wRAoptuxtR\",\"JwBT2xYDafcNG9eKr\",\"J7epB3qSQJ2E8vWkY\",\"2cdvd8yuPLSwvGj9w\",\"umcNKSZ597NfCXiyy\",\"rWhXHhzF4W8bea6LP\",\"3EfDGZ9Sgz5zxzD7a\",\"CggGfsERnPKGupFWp\",\"4SBj9cygDMHj6PPRP\",\"fD2vkjhwWmxbs3aAn\",\"CNc6rmwhbxkxEhHAp\",\"bWWFscsAr66ZWHo28\",\"jyoLggHk8xQKZuoQC\",\"W56bWmpQeLJ9JEDsa\",\"mLPfS53i3c4Yf3jQ3\",\"m8RTLuXqmythXHYZt\",\"8DfhSneJpsw5uqLeM\",\"z8QYbZkEFptEYMnaH\",\"w2rPvPbskuhndnDRG\",\"MSa5iqebmdK5C3Bpx\",\"ATCbF72Lo628BKgac\",\"neNNSEbgzx79GYshu\",\"69K8S2NbzkqE9pAe5\",\"oMADehRvromktWpjh\",\"ZqjP4M6dzu32To33K\",\"uFfEio8nzDvL8emhp\",\"rojdHfAAuAYxoaEXp\",\"5jDgvkGd4JwatrYXg\",\"hseQSt2EJ5uvb2pQv\",\"sacPXRKX59BE495oz\",\"Yj7ftjzyP67R5NFrH\",\"pi76g3eRpnKrhee2a\",\"sYKPxZX5xJZ2GTp6Q\",\"PJu3WcTpfRrvHfQiS\",\"NioGGZL9KCn5Ln96t\",\"a49eNnfRwSMxsDJXf\",\"A3KrxZk4FiSymY6f2\",\"8WeJLyNE4h6nJ2dNh\",\"btabi3PdyisuY5tn9\",\"Wi4H6ayKsNDWWQCG5\",\"3SgSNoAB3sxaYeT3w\",\"HCfkcKnPs9mrJojdG\",\"kiq3z4o9ABhQd7aXJ\",\"b6PEkvr66YeCamroN\",\"GkYtSbQuheBF4Enys\",\"QRv96jmNaYsWkxQEG\",\"98499DDQYDLiQSxkK\",\"buX4mCQhtXCfBjeno\",\"c96gH88NsjR3MycAj\",\"8qNSPHZBpmjSTt3tH\",\"t55QWHi8o4teZxqqE\",\"tqhuFrDBKPTW7Q8Gb\",\"fGSQQds3A8gP6rc5h\",\"efzPYhE6XaJxmpfe3\",\"ztrfkKRfYBWokFwkf\",\"xEX3TDY6C2h82dJTn\",\"zkHMTSGrJ8BEKReYE\",\"khdCaD6AGBiR6txLQ\",\"sxci7DYKNa6q22Sjq\",\"vRXuYYBNuHEQ29fbm\",\"rhS8qXRjZcpDXkwnE\",\"rjfgMZyXyqW5Mw5fp\",\"Yohr2MmAyaWGMbB35\",\"5LDvZHCDJqePeBrCg\",\"c7uBxu2rgY77H5d79\",\"nXw9eTHFraWQtwJtY\",\"9RJpt5ec2KMLuac4w\",\"Qv2jEtTnFCXX7cdd3\",\"uw47663LqPME8btaA\",\"gZj6HTKJdPGJwPe2D\",\"Gn8rShvWCKLX3cxzx\",\"srJ34BaybkQh3qRkM\",\"nSLvkGEpiYCtcBLaa\",\"i6MDC9kdTmCvtFPy7\",\"NhK89LHFJe5u9oYBy\",\"3qgJpdhyi4tKuqMdm\",\"XNgW94PSq5kkXhojm\",\"fdyejapW3NWN7utPX\",\"cR3ibTMxLyEdDFCHY\",\"afvP29FhRou2bTaav\",\"9E3eZeMb98LrA9F88\",\"TqbGoapPogWYjTjyc\",\"Reyq7sSccAZJvJrmB\",\"ckQwFFWyLXmDQAaCn\",\"zfyRY2ZoTpJmy6EHu\",\"aoB3vhvsrFhwALLm8\",\"yGDSvLJXXz5ZmaS4h\",\"htXCitorobtqYymjN\",\"AaAzAySpyo99siXzm\",\"DEDniTrstQYGounXT\",\"TCvpT4EPb8qNssNB7\",\"6KDZNmtgvb6PCaWQE\",\"C3H6kr64DgTZSgDu8\",\"KMR6vNzvSKMA2cXnK\",\"f6CBJntX2RFd2zAjR\",\"JXYvMawaDwnTLuf5F\",\"hz99uPCwGhySXWAta\",\"xrqK8P7zH83wjo3L4\",\"RsujLHaML6L3KinzK\",\"svHoRdg5sR9CLzZLC\",\"PPdaczxSt2u5cmZYG\",\"6kB5qypxcm62PHsEJ\",\"GD9Jqmu93vB4LTT8F\",\"7CheeimiTjWkmdK7x\",\"T6L7quor4j9trmMjX\",\"9moo5f7g8KrZieT2K\",\"unqzSsxpxj9sZ7rbD\",\"rd57KDjWbqx3HLEo3\",\"w99WfQNYsNAyJRM4C\",\"F8dA24AosSC8XXb7D\",\"9du58gNDkWQEWivbB\",\"x2Cz7S8rCKJqCE3Xe\",\"5HGyJtoZ3AffzAZAv\",\"HY33ExBZtiiCoAomj\",\"GSgr8hLGHeZPde7WJ\",\"3exyrcibvzm6oe8eq\",\"QKwrd9ogdva7ShckK\",\"M53dqkDAgYgKcncAM\",\"h6q2JS8Mwtk5KoRve\",\"i5QeAsrM4m6hzPTku\",\"wFRLGjA56kj7xyhmv\",\"ogmMA66jW6jYJTTmv\",\"4To7THbHADdtXbewx\",\"NwczjpfNN8jXy5RF6\",\"5kMuNZuxiFcNRDkG4\",\"kjq3gYp4TDMCQZJsH\",\"8imyReZaRJAL8cSxX\",\"vRfhB7mCKLAFSsPu3\",\"DsydxhadPpp6uEoRd\",\"cQP9NvgsyeLuwJfhC\",\"zo9MtKnkZegPjXvtP\",\"HuNwBgyGGDPCDrApb\",\"CipspuHopXSNosuq3\",\"xLy94bAjaLwokPcZZ\",\"5QN8R22z43SrwoHDz\",\"qoZrXudcaHo8QLFsj\",\"94XQj7wutz9ySewYC\",\"uw9pWX8KAGuzDh9s7\",\"WgEpodYY8Zya5cAQJ\",\"Bm5z4ccgCsBdPwWoP\",\"hF9icm7GxAnAGSjAD\",\"9i67g75x6vQvzPFrh\",\"Scr8vtswKqPjZ5L5K\",\"r72oFMcCQh4rBsKHb\",\"nFbmNzMQ38TncmfQX\",\"5SFF2xjZxxwDciGfn\",\"5eDE9KCDnDnqBqLEK\",\"3Gf7ikLijfoxabiPY\",\"FgaXeuBoJFBoDWZGL\",\"J8GhL9EX5zZcrgyBt\",\"rvojHhKH3DaxotefQ\",\"4ahuXwr735779vQ9W\",\"wrL4iX2CCSqDCCty3\"]},\"flags\":0},\"editorId\":\"a777e8chPvJkY3tKa\",\"family\":[{\"_id\":\"oGaTdex6MLXfFeraK\",\"language\":\"cpp\"},{\"_id\":\"vzhWSMR2A6wDyFK2o\",\"language\":\"java\"},{\"_id\":\"w7BYrKiiszu5eJkuc\",\"language\":\"javascript\"},{\"_id\":\"GuoJCiRJkr9CLRqJa\",\"language\":\"python3\"},{\"_id\":\"jcdBSqaaww82a7Xab\",\"language\":\"ruby\"}]}}"]