a["{\"msg\":\"result\",\"id\":\"773\",\"result\":{\"_id\":\"3FAMXz4wAYGqpCtDR\",\"author\":\"Edward Clark\",\"authorId\":\"3pdgguqZgNDSAJSGm\",\"code\":\"public class Challenge {\\n\\tpublic static String[] bucketize(String phrase, int n) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":3.2470588235294118,\"familyId\":\"Mku3TSW2u6dufvP8A\",\"instructions\":\"Write a function that divides a phrase into word buckets, with each bucket containing `n` or fewer characters. Only include full words inside each bucket.\\n\\n### Examples\\n```\\nbucketize(\\\"she sells sea shells by the sea\\\", 10)\\n➞ [\\\"she sells\\\", \\\"sea shells\\\", \\\"by the sea\\\"]\\n\\nbucketize(\\\"the mouse jumped over the cheese\\\", 7)\\n➞ [\\\"the\\\", \\\"mouse\\\", \\\"jumped\\\", \\\"over\\\", \\\"the\\\", \\\"cheese\\\"]\\n\\nbucketize(\\\"fairy dust coated the air\\\", 20)\\n➞ [\\\"fairy dust coated\\\", \\\"the air\\\"]\\n\\nbucketize(\\\"a b c d e\\\", 2)\\n➞ [\\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"d\\\", \\\"e\\\"]\\n```\\n\\n### Notes\\n- Spaces count as one character.\\n- Trim beginning and end spaces for each word bucket (see final example).\\n- If buckets are too small to hold a single word, return an empty array: `[]`\\n- The final goal isn't to return just the words with a length equal (or lower) to the given `n`, but to return the entire given phrase bucketized (if possible). So, for the specific case of \\\"by\\\" the only word with a proper length, the phrase can't be bucketized, and the returned array has to be empty.\",\"lab\":\"import static org.hamcrest.core.Is.is;\\nimport org.junit.Test;\\nimport static org.junit.Assert.assertThat;\\n\\npublic class ChallengeTest {\\n\\t@Test\\n\\tpublic void test1() {\\n\\t\\tassertThat(Challenge.bucketize(\\\"she sells sea shells by the sea\\\", 2), is(new String[]{}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test2() {\\n\\t\\tassertThat(Challenge.bucketize(\\\"ab bc cd\\\", 1), is(new String[]{}));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test3() {\\n\\t\\tassertThat(Challenge.bucketize(\\\"she sells sea shells by the sea\\\", 10), is(new String[]{\\\"she sells\\\", \\\"sea shells\\\", \\\"by the sea\\\"}));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test4() {\\n\\t\\tassertThat(Challenge.bucketize(\\\"the mouse jumped over the cheese\\\", 7), is(new String[]{\\\"the\\\", \\\"mouse\\\", \\\"jumped\\\", \\\"over\\\", \\\"the\\\", \\\"cheese\\\"}));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test5() {\\n\\t\\tassertThat(Challenge.bucketize(\\\"fairy dust coated the air\\\", 20), is(new String[]{\\\"fairy dust coated\\\", \\\"the air\\\"}));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test6() {\\n\\t\\tassertThat(Challenge.bucketize(\\\"do the hokey pokey\\\", 6), is(new String[]{\\\"do the\\\", \\\"hokey\\\", \\\"pokey\\\"}));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test7() {\\n\\t\\tassertThat(Challenge.bucketize(\\\"do the hokey pokey\\\", 12), is(new String[]{\\\"do the hokey\\\", \\\"pokey\\\"}));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test8() {\\n\\t\\tassertThat(Challenge.bucketize(\\\"rich magnificent trees dotted the landscape\\\", 12), is(new String[]{\\\"rich\\\", \\\"magnificent\\\", \\\"trees dotted\\\", \\\"the\\\", \\\"landscape\\\"}));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test9() {\\n\\t\\tassertThat(Challenge.bucketize(\\\"rich magnificent trees dotted the landscape\\\", 15), is(new String[]{\\\"rich\\\", \\\"magnificent\\\", \\\"trees dotted\\\", \\\"the landscape\\\"}));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() {\\n\\t\\tassertThat(Challenge.bucketize(\\\"rich magnificent trees dotted the landscape\\\", 18), is(new String[]{\\\"rich magnificent\\\", \\\"trees dotted the\\\", \\\"landscape\\\"}));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test11() {\\n\\t\\tassertThat(Challenge.bucketize(\\\"rich magnificent trees dotted the landscape\\\", 22), is(new String[]{\\\"rich magnificent trees\\\", \\\"dotted the landscape\\\"}));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test12() {\\n\\t\\tassertThat(Challenge.bucketize(\\\"rich magnificent trees dotted the landscape\\\", 40), is(new String[]{\\\"rich magnificent trees dotted the\\\", \\\"landscape\\\"}));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test13() {\\n\\t\\tassertThat(Challenge.bucketize(\\\"rich magnificent trees dotted the landscape\\\", 43), is(new String[]{\\\"rich magnificent trees dotted the landscape\\\"}));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test14() {\\n\\t\\tassertThat(Challenge.bucketize(\\\"beep bo bee bop bee bo bo bop\\\", 6), is(new String[]{\\\"beep\\\", \\\"bo bee\\\", \\\"bop\\\", \\\"bee bo\\\", \\\"bo bop\\\"}));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test15() {\\n\\t\\tassertThat(Challenge.bucketize(\\\"beep bo bee bop bee bo bo bop\\\", 10), is(new String[]{\\\"beep bo\\\", \\\"bee bop\\\", \\\"bee bo bo\\\", \\\"bop\\\"}));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test16() {\\n\\t\\tassertThat(Challenge.bucketize(\\\"a b c d e\\\", 3), is(new String[]{\\\"a b\\\", \\\"c d\\\", \\\"e\\\"}));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test17() {\\n\\t\\tassertThat(Challenge.bucketize(\\\"a b c d e\\\", 2), is(new String[]{\\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"d\\\", \\\"e\\\"}));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test18() {\\n\\t\\tassertThat(Challenge.bucketize(\\\"a b c d e\\\", 1), is(new String[]{\\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"d\\\", \\\"e\\\"}));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test19() {\\n\\t\\tassertThat(Challenge.bucketize(\\\"a b c d e\\\", 2), is(new String[]{\\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"d\\\", \\\"e\\\"}));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test20() {\\n\\t\\tassertThat(Challenge.bucketize(\\\"a b c d e\\\", 1), is(new String[]{\\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"d\\\", \\\"e\\\"}));            \\n\\t}\\n}\",\"language\":\"java\",\"summary\":\"Write a function that divides a phrase into word buckets, with each bucket containing n or fewer characters. Only include full words inside each bucket.\\n\\nExamples\\nbucketize(\\\"she sells sea shells by the sea\\\", 10)\\n➞ [\\\"she sells\\\", \\\"sea shells\\\", \\\"by the sea\\\"]\\n\\nbucketize(\\\"the mouse jumped over the cheese\\\", 7)\\n➞ [\\\"the\\\", \\\"mouse\\\", \\\"jumped\\\", \\\"over\\\", \\\"the\\\", \\\"cheese\\\"]\\n\\nb\",\"tags\":[\"strings\",\"control_flow\"],\"timestamp\":{\"$date\":1570267438365},\"title\":\"Word Buckets\",\"stats\":{\"completed\":{\"total\":117,\"ratings\":[3,3,3,3,3,3,3,3,3,3,2,2,4,4,5,4,1,5,3,4,3,2,5,3,2,2,3,2,2,4,2,5,4,1,2,3,5,4,3,3,3,2,4,5,2,3,2,2,2,5,4,5,3,3,3,3,4,4,5,4,5,4,4,3,5,0,4,3,3,3,2,3,3,3,3,3,4,2,3,3,5,4,4,3,5],\"rators\":[\"3pdgguqZgNDSAJSGm\",\"NnZDxyidwrk6T6cj7\",\"Prw5Jq38wrSoj5QSF\",\"Es4eX2stRpyoXeC7f\",\"TrquEHytntLKHA4m2\",\"muDC7Z5mKSdfkn5ny\",\"4iMe865JrPvg2uaqA\",\"rehehi2Tr2mwaEoJE\",\"yNopTgW8n8JyT77nG\",\"RCprdTx8wN77Lqdji\",\"7htK223C8C2htMmsE\",\"GSts5JvHWejsPgfEd\",\"B6WH2eoDdixvNijo5\",\"mwcjmxMW9msmCFibs\",\"htXCitorobtqYymjN\",\"AjzZS7MouArr5Zgdh\",\"wCCohvZtAZuBvHLQ4\",\"YLwJkF2wuL3n9o6a2\",\"5WQZzuHZBGqFeNQi3\",\"FN3Yac9P6EKBAmkpa\",\"XTuxCoKrN9DZ7zaQx\",\"AcZdvmSFKyRN6EJQs\",\"ZiN6yB9rACMaYgseC\",\"4Peov9uWCPtCEnknF\",\"o3H7kYyAtn7F2wMEZ\",\"XamzimNDxQyTDvNau\",\"jvPmRfcxMNSkskRSg\",\"pWtxhELmYYppvBoBh\",\"QS45qu2DFXcCqpAnB\",\"mGaEDPw5FsDb3vdnq\",\"NExzRZHHcKQGhCvfD\",\"tN9TQx9q5AQJEQZD5\",\"HfHX644FWoTbifSCX\",\"B7EHmyWMEWytXnKaH\",\"xdS2Wao3BYiWTo4H2\",\"QXR2qGcvrK5Xkxdea\",\"KooD342x6eT6YiQn8\",\"rcxMWFiwvoskMqzNB\",\"MhSbFaHSTBk2MMZyo\",\"ecyYaPZLMBMGGrfrJ\",\"a777e8chPvJkY3tKa\",\"DkSMZ3jZLkwviKb9g\",\"FTHXj9Rfx9wdujSzy\",\"9BgWGdEEgvcST8Rs3\",\"RQL2PAWda9Bh79GNi\",\"gXTAie79kiw28tx5u\",\"6YAeQueNMLugbc7P6\",\"D7dpRtRQDmteDSAXv\",\"bENHjCu6YW6Ev77zy\",\"CQrLMPjz7gn82rySP\",\"YT7Sqaesgvab6GW9y\",\"Jj8ixpjhDsjpjXvqz\",\"XkNS8KEhsJGBALGLW\",\"rWhXHhzF4W8bea6LP\",\"WEML5xxPMRJNuZWYd\",\"RSSrWo6AiSDRNAy5K\",\"wotygWZgwHSbEnZEs\",\"btabi3PdyisuY5tn9\",\"DKe9PeHnDuQeqQ2Df\",\"s3aXMAZftCMBWAKMm\",\"NRcES4Fvey4SWLRCA\",\"brtSatgEMsLACefeT\",\"32TZwQMY9B9kZD2ud\",\"5Lqu3LCzJj9JKyJDb\",\"CpCDwypyvfaZZbkBK\",\"hr9oSTBnxTDayq5Aa\",\"4pagg6vw2Cjepv7tN\",\"XbkPkuaJRZTBYj9uN\",\"pNtaczpPBxfN5Z9ee\",\"5qjDvmKyDxg2uZTzJ\",\"Kq4skGvkAnvFECYPb\",\"Krz8h3Htnp6XZJkJm\",\"ZCotv499MvmcgoPt7\",\"DRS34Y64P2rr2S9Nh\",\"uxzBKqBe5GyKBnDW6\",\"F7fpKheAPBLvLMDGq\",\"YomMJMBhDwoWLjcAm\",\"aCqhp5LBXGmesLMj2\",\"6BHzuTwcZqaRtf7CH\",\"b3pFGJ5jWFdoAh4wp\",\"2cF9yTsek7XrDTYXn\",\"AjaZ3crKCC4bAEQHF\",\"mTF6oWX2WhFR4M3QK\",\"7ospYKSiS9uy932FK\",\"dfQntx8ifmHPs6xYj\",\"g95KBbC33RPmu9XNs\",\"nHj7SC5cnmkTApbgY\",\"m32RSd5YW6fW2uvrK\",\"LNCb5rksJLJ43L4Nw\",\"sZNyyAF4C36ncsvCC\",\"f7eueuFbYYr8MLxcF\",\"BAXQYFC46bxoDjEg4\",\"GvLLKHi7NwAjutdDk\",\"Z3JZpmrNTwzgpob2n\",\"SDhaxy5ppS7pALy2k\",\"dGJhADFMNr9is6GRP\",\"aswAjfzzoqEnnsXvT\",\"sxci7DYKNa6q22Sjq\",\"qg94wqTGMA6K5Caj3\",\"82pWqpMMBd2timN25\",\"mmHR9EazNjJ3cCnxK\",\"no4xHGAwwGwso955K\",\"PvWK6XvMrHy7rLnvs\",\"KMR6vNzvSKMA2cXnK\",\"R7PBhs5m3z2uFA2Rs\",\"QWwbtXPHCLzHQzQKm\",\"uw47663LqPME8btaA\",\"Ys4wBL6EFvSzwa2X5\"],\"quality\":[5,5,5,4,5,5,5,5,5,4,3,5,2,4,5,5,3,4,4,5,5,5,2,3,2,4,5,5,4,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"3pdgguqZgNDSAJSGm\",\"isHidden\":false,\"quality\":4.3125,\"family\":[{\"_id\":\"E5xwvwQucx5AQKzR4\",\"language\":\"cpp\"},{\"_id\":\"3FAMXz4wAYGqpCtDR\",\"language\":\"java\"},{\"_id\":\"Q7foiyejfJG6pqqws\",\"language\":\"javascript\"},{\"_id\":\"fbqmyDjCigbYhWLJa\",\"language\":\"python3\"},{\"_id\":\"t5LZhfsBnQxRZuYNt\",\"language\":\"ruby\"}]}}"]