a["{\"msg\":\"result\",\"id\":\"337\",\"result\":{\"_id\":\"diiEDD4JQyysFR7zh\",\"author\":\"Edward Clark\",\"authorId\":\"3pdgguqZgNDSAJSGm\",\"code\":\"public class Challenge {\\n\\tpublic static String[] getBirthdayCake(String name,int age) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":1.4655172413793103,\"familyId\":\"cKv3Rx6ekXD5tkyug\",\"instructions\":\"Create a function which **constructs** a *rectangular* birthday cake, based on someone's `name` and `age`! Build it out of *strings* in an array and make sure to surround the birthday message with the character that fits the rule:\\n\\n- If the age is an **even number**, surround the message with \\\"#\\\".\\n- If the age is an **odd number**, surround the message with \\\"*\\\".\\n\\nOther important rules:\\n- The message should be in the format: **{age} Happy Birthday {name}! {age}**\\n- **Leave a space** between the edge of the cake and the age numbers.\\n\\n### Examples\\n```\\ngetBirthdayCake(\\\"Jack\\\", 10) ➞ [\\n  \\\"##############################\\\",\\n  \\\"# 10 Happy Birthday Jack! 10 #\\\",\\n  \\\"##############################\\\"\\n]\\n\\ngetBirthdayCake(\\\"Russell\\\", 19) ➞ [\\n  \\\"*********************************\\\",\\n  \\\"* 19 Happy Birthday Russell! 19 *\\\",\\n  \\\"*********************************\\\"\\n]\\n\\ngetBirthdayCake(\\\"Isabelle\\\", 2) ➞ [\\n  \\\"################################\\\",\\n  \\\"# 2 Happy Birthday Isabelle! 2 #\\\",\\n  \\\"################################\\\"\\n]\\n```\\n\\n### Notes\\nThe amount of characters in the banner should be the same length as the message to pass the tests.\",\"isHidden\":false,\"lab\":\"/**\\n *\\n * @author edwardclark\\n */\\nimport static org.hamcrest.core.Is.is;\\nimport org.junit.Test;\\nimport static org.junit.Assert.assertThat;\\n\\npublic class Challenges {\\n    \\n    @Test\\n    public void test1() {\\n        assertThat(Challenge.getBirthdayCake(\\\"Jack\\\", 10), is(new String[]{\\n            \\\"##############################\\\",\\n            \\\"# 10 Happy Birthday Jack! 10 #\\\",\\n            \\\"##############################\\\"\\n        }));\\n    }\\n    @Test\\n    public void test2() {\\n        assertThat(Challenge.getBirthdayCake(\\\"Russell\\\", 19), is(new String[]{\\n            \\\"*********************************\\\",\\n            \\\"* 19 Happy Birthday Russell! 19 *\\\",\\n            \\\"*********************************\\\"\\n        }));\\n    }\\n    @Test\\n    public void test3() {\\n        assertThat(Challenge.getBirthdayCake(\\\"Isabelle\\\", 2), is(new String[]{\\n            \\\"################################\\\",\\n            \\\"# 2 Happy Birthday Isabelle! 2 #\\\",\\n            \\\"################################\\\"\\n        })); \\n    }\\n    @Test\\n    public void test4() {\\n        assertThat(Challenge.getBirthdayCake(\\\"Princess\\\", 40), is(new String[]{\\n            \\\"##################################\\\", \\n            \\\"# 40 Happy Birthday Princess! 40 #\\\", \\n            \\\"##################################\\\"\\n        }));\\n    }\\n    @Test\\n    public void test5() {\\n        assertThat(Challenge.getBirthdayCake(\\\"Maxwell\\\", 85), is(new String[]{\\n            \\\"*********************************\\\", \\\"* 85 Happy Birthday Maxwell! 85 *\\\", \\\"*********************************\\\"\\n        }));\\n    }\\n    @Test\\n    public void test6() {\\n        assertThat(Challenge.getBirthdayCake(\\\"Zenobia\\\", 63), is(new String[]{\\n            \\\"*********************************\\\", \\\"* 63 Happy Birthday Zenobia! 63 *\\\", \\\"*********************************\\\"\\n        }));\\n    }\\n    @Test\\n    public void test7() {\\n        assertThat(Challenge.getBirthdayCake(\\\"Adrian\\\", 91), is(new String[]{\\n            \\\"********************************\\\", \\\"* 91 Happy Birthday Adrian! 91 *\\\", \\\"********************************\\\"\\n        }));\\n    }\\n    @Test    \\n    public void test8() { \\n       assertThat(Challenge.getBirthdayCake(\\\"Gayle\\\", 28), is(new String[]{\\n            \\\"###############################\\\", \\\"# 28 Happy Birthday Gayle! 28 #\\\", \\\"###############################\\\"\\n        }));\\n    }\\n    @Test    \\n    public void test9() {        \\n        assertThat(Challenge.getBirthdayCake(\\\"Jo\\\", 69), is(new String[]{\\n            \\\"****************************\\\", \\\"* 69 Happy Birthday Jo! 69 *\\\", \\\"****************************\\\"\\n        }));\\n    }\\n    @Test    \\n    public void test10() {\\n        assertThat(Challenge.getBirthdayCake(\\\"Val\\\", 80), is(new String[]{\\n            \\\"#############################\\\", \\\"# 80 Happy Birthday Val! 80 #\\\", \\\"#############################\\\"\\n        }));\\n    }\\n    @Test    \\n    public void test11() {\\n        assertThat(Challenge.getBirthdayCake(\\\"Jo\\\", 22), is(new String[]{\\n            \\\"############################\\\", \\\"# 22 Happy Birthday Jo! 22 #\\\", \\\"############################\\\"\\n        }));\\n    }\\n    @Test    \\n    public void test12() {\\n        assertThat(Challenge.getBirthdayCake(\\\"Gayle\\\", 4), is(new String[]{\\n            \\\"#############################\\\", \\\"# 4 Happy Birthday Gayle! 4 #\\\", \\\"#############################\\\"\\n        }));\\n    }\\n    @Test    \\n    public void test13() {\\n        assertThat(Challenge.getBirthdayCake(\\\"Norine\\\", 24), is(new String[]{\\n            \\\"################################\\\", \\\"# 24 Happy Birthday Norine! 24 #\\\", \\\"################################\\\"\\n        }));\\n    }\\n    @Test    \\n    public void test14() {\\n        assertThat(Challenge.getBirthdayCake(\\\"Val\\\", 63), is(new String[]{\\n            \\\"*****************************\\\", \\\"* 63 Happy Birthday Val! 63 *\\\", \\\"*****************************\\\"\\n        }));\\n    }\\n    @Test    \\n    public void test15() {\\n        assertThat(Challenge.getBirthdayCake(\\\"Gayle\\\", 25), is(new String[]{\\n            \\\"*******************************\\\", \\\"* 25 Happy Birthday Gayle! 25 *\\\", \\\"*******************************\\\"\\n        }));\\n    }\\n    @Test    \\n    public void test16() {        \\n        assertThat(Challenge.getBirthdayCake(\\\"Princess\\\", 52), is(new String[]{\\n            \\\"##################################\\\", \\\"# 52 Happy Birthday Princess! 52 #\\\", \\\"##################################\\\"\\n        }));\\n    }\\n    @Test    \\n    public void test17() {\\n        assertThat(Challenge.getBirthdayCake(\\\"Adrian\\\", 90), is(new String[]{\\n            \\\"################################\\\", \\\"# 90 Happy Birthday Adrian! 90 #\\\", \\\"################################\\\"\\n        }));\\n    }\\n    @Test    \\n    public void test18() {\\n        assertThat(Challenge.getBirthdayCake(\\\"Loyd\\\", 90), is(new String[]{\\n            \\\"##############################\\\", \\\"# 90 Happy Birthday Loyd! 90 #\\\", \\\"##############################\\\"\\n        }));\\n    }\\n    @Test    \\n    public void test19() {\\n        assertThat(Challenge.getBirthdayCake(\\\"Shelia\\\", 76), is(new String[]{\\n            \\\"################################\\\", \\\"# 76 Happy Birthday Shelia! 76 #\\\", \\\"################################\\\"\\n        }));\\n    }\\n    @Test    \\n    public void test20() {\\n        assertThat(Challenge.getBirthdayCake(\\\"Evangelina\\\", 75), is(new String[]{\\n            \\\"************************************\\\", \\\"* 75 Happy Birthday Evangelina! 75 *\\\", \\\"************************************\\\"\\n        }));\\n    }\\n    @Test    \\n    public void test21() {        \\n        assertThat(Challenge.getBirthdayCake(\\\"Lorenzo\\\", 15), is(new String[]{\\n            \\\"*********************************\\\", \\\"* 15 Happy Birthday Lorenzo! 15 *\\\", \\\"*********************************\\\"\\n        }));\\n    }\\n    @Test    \\npublic void test22() {        assertThat(Challenge.getBirthdayCake(\\\"Riva\\\", 4), is(new String[]{\\\"############################\\\", \\\"# 4 Happy Birthday Riva! 4 #\\\", \\\"############################\\\"}));    }\\n    @Test    \\npublic void test23() {        assertThat(Challenge.getBirthdayCake(\\\"Fletcher\\\", 72), is(new String[]{\\\"##################################\\\", \\\"# 72 Happy Birthday Fletcher! 72 #\\\", \\\"##################################\\\"}));    }\\n    @Test    \\npublic void test24() {        assertThat(Challenge.getBirthdayCake(\\\"Hulda\\\", 51), is(new String[]{\\\"*******************************\\\", \\\"* 51 Happy Birthday Hulda! 51 *\\\", \\\"*******************************\\\"}));    }\\n    @Test    \\npublic void test25() {        assertThat(Challenge.getBirthdayCake(\\\"Bari\\\", 15), is(new String[]{\\\"******************************\\\", \\\"* 15 Happy Birthday Bari! 15 *\\\", \\\"******************************\\\"}));    }\\n    @Test    \\npublic void test26() {        assertThat(Challenge.getBirthdayCake(\\\"Dorris\\\", 48), is(new String[]{\\\"################################\\\", \\\"# 48 Happy Birthday Dorris! 48 #\\\", \\\"################################\\\"}));    }\\n    @Test    \\npublic void test27() {        assertThat(Challenge.getBirthdayCake(\\\"Ervin\\\", 83), is(new String[]{\\\"*******************************\\\", \\\"* 83 Happy Birthday Ervin! 83 *\\\", \\\"*******************************\\\"}));    }\\n    @Test    \\npublic void test28() {        assertThat(Challenge.getBirthdayCake(\\\"Cherelle\\\", 80), is(new String[]{\\\"##################################\\\", \\\"# 80 Happy Birthday Cherelle! 80 #\\\", \\\"##################################\\\"}));    }\\n    @Test    \\npublic void test29() {        assertThat(Challenge.getBirthdayCake(\\\"Deedee\\\", 93), is(new String[]{\\\"********************************\\\", \\\"* 93 Happy Birthday Deedee! 93 *\\\", \\\"********************************\\\"}));    }\\n    @Test    \\npublic void test30() {        assertThat(Challenge.getBirthdayCake(\\\"Youlanda\\\", 29), is(new String[]{\\\"**********************************\\\", \\\"* 29 Happy Birthday Youlanda! 29 *\\\", \\\"**********************************\\\"}));    }\\n    @Test    \\npublic void test31() {        assertThat(Challenge.getBirthdayCake(\\\"Deedee\\\", 48), is(new String[]{\\\"################################\\\", \\\"# 48 Happy Birthday Deedee! 48 #\\\", \\\"################################\\\"}));    }\\n    @Test    \\npublic void test32() {        assertThat(Challenge.getBirthdayCake(\\\"Kristine\\\", 6), is(new String[]{\\\"################################\\\", \\\"# 6 Happy Birthday Kristine! 6 #\\\", \\\"################################\\\"}));    }\\n    @Test    \\npublic void test33() {        assertThat(Challenge.getBirthdayCake(\\\"Kristine\\\", 43), is(new String[]{\\\"**********************************\\\", \\\"* 43 Happy Birthday Kristine! 43 *\\\", \\\"**********************************\\\"}));    }\\n    @Test    \\npublic void test34() {        assertThat(Challenge.getBirthdayCake(\\\"Fletcher\\\", 61), is(new String[]{\\\"**********************************\\\", \\\"* 61 Happy Birthday Fletcher! 61 *\\\", \\\"**********************************\\\"}));    }\\n    @Test    \\npublic void test35() {        assertThat(Challenge.getBirthdayCake(\\\"Bari\\\", 94), is(new String[]{\\\"##############################\\\", \\\"# 94 Happy Birthday Bari! 94 #\\\", \\\"##############################\\\"}));    }\\n    @Test    \\npublic void test36() {        assertThat(Challenge.getBirthdayCake(\\\"Clotilde\\\", 35), is(new String[]{\\\"**********************************\\\", \\\"* 35 Happy Birthday Clotilde! 35 *\\\", \\\"**********************************\\\"}));    }\\n    @Test    \\npublic void test37() {        assertThat(Challenge.getBirthdayCake(\\\"Ervin\\\", 98), is(new String[]{\\\"###############################\\\", \\\"# 98 Happy Birthday Ervin! 98 #\\\", \\\"###############################\\\"}));    }\\n    @Test    \\npublic void test38() {        assertThat(Challenge.getBirthdayCake(\\\"Margot\\\", 89), is(new String[]{\\\"********************************\\\", \\\"* 89 Happy Birthday Margot! 89 *\\\", \\\"********************************\\\"}));    }\\n    @Test    \\npublic void test39() {        assertThat(Challenge.getBirthdayCake(\\\"Shelia\\\", 8), is(new String[]{\\\"##############################\\\", \\\"# 8 Happy Birthday Shelia! 8 #\\\", \\\"##############################\\\"}));    }\\n    @Test    \\npublic void test40() {        assertThat(Challenge.getBirthdayCake(\\\"Clotilde\\\", 46), is(new String[]{\\\"##################################\\\", \\\"# 46 Happy Birthday Clotilde! 46 #\\\", \\\"##################################\\\"}));    }\\n    @Test    \\npublic void test41() {        assertThat(Challenge.getBirthdayCake(\\\"Riva\\\", 1), is(new String[]{\\\"****************************\\\", \\\"* 1 Happy Birthday Riva! 1 *\\\", \\\"****************************\\\"}));    }\\n    @Test    \\npublic void test42() {        assertThat(Challenge.getBirthdayCake(\\\"Bobby\\\", 89), is(new String[]{\\\"*******************************\\\", \\\"* 89 Happy Birthday Bobby! 89 *\\\", \\\"*******************************\\\"}));    }\\n    @Test    \\npublic void test43() {        assertThat(Challenge.getBirthdayCake(\\\"Riva\\\", 8), is(new String[]{\\\"############################\\\", \\\"# 8 Happy Birthday Riva! 8 #\\\", \\\"############################\\\"}));    }\\n    @Test    \\npublic void test44() {        assertThat(Challenge.getBirthdayCake(\\\"Todd\\\", 32), is(new String[]{\\\"##############################\\\", \\\"# 32 Happy Birthday Todd! 32 #\\\", \\\"##############################\\\"}));    }\\n    @Test    \\npublic void test45() {        assertThat(Challenge.getBirthdayCake(\\\"Jefferey\\\", 49), is(new String[]{\\\"**********************************\\\", \\\"* 49 Happy Birthday Jefferey! 49 *\\\", \\\"**********************************\\\"}));    }\\n    @Test    \\npublic void test46() {        assertThat(Challenge.getBirthdayCake(\\\"Cherelle\\\", 44), is(new String[]{\\\"##################################\\\", \\\"# 44 Happy Birthday Cherelle! 44 #\\\", \\\"##################################\\\"}));    }\\n    @Test    \\npublic void test47() {        assertThat(Challenge.getBirthdayCake(\\\"Jacques\\\", 7), is(new String[]{\\\"*******************************\\\", \\\"* 7 Happy Birthday Jacques! 7 *\\\", \\\"*******************************\\\"}));    }\\n    @Test    \\npublic void test48() {        assertThat(Challenge.getBirthdayCake(\\\"Maxwell\\\", 84), is(new String[]{\\\"#################################\\\", \\\"# 84 Happy Birthday Maxwell! 84 #\\\", \\\"#################################\\\"}));    }\\n    @Test    \\npublic void test49() {        assertThat(Challenge.getBirthdayCake(\\\"Clotilde\\\", 92), is(new String[]{\\\"##################################\\\", \\\"# 92 Happy Birthday Clotilde! 92 #\\\", \\\"##################################\\\"}));    }\\n    @Test    \\npublic void test50() {        assertThat(Challenge.getBirthdayCake(\\\"Evangelina\\\", 60), is(new String[]{\\\"####################################\\\", \\\"# 60 Happy Birthday Evangelina! 60 #\\\", \\\"####################################\\\"}));    }\\n    @Test    \\npublic void test51() {        assertThat(Challenge.getBirthdayCake(\\\"Dorris\\\", 54), is(new String[]{\\\"################################\\\", \\\"# 54 Happy Birthday Dorris! 54 #\\\", \\\"################################\\\"}));    }\\n    @Test    \\npublic void test52() {        assertThat(Challenge.getBirthdayCake(\\\"Jacqulyn\\\", 52), is(new String[]{\\\"##################################\\\", \\\"# 52 Happy Birthday Jacqulyn! 52 #\\\", \\\"##################################\\\"}));    }\\n    @Test    \\npublic void test53() {        assertThat(Challenge.getBirthdayCake(\\\"Lucrecia\\\", 95), is(new String[]{\\\"**********************************\\\", \\\"* 95 Happy Birthday Lucrecia! 95 *\\\", \\\"**********************************\\\"}));    }\\n    @Test    \\npublic void test54() {        assertThat(Challenge.getBirthdayCake(\\\"Shelia\\\", 75), is(new String[]{\\\"********************************\\\", \\\"* 75 Happy Birthday Shelia! 75 *\\\", \\\"********************************\\\"}));    }\\n    @Test    \\npublic void test55() {        assertThat(Challenge.getBirthdayCake(\\\"Gayle\\\", 59), is(new String[]{\\\"*******************************\\\", \\\"* 59 Happy Birthday Gayle! 59 *\\\", \\\"*******************************\\\"}));    }\\n    @Test    \\npublic void test56() {        assertThat(Challenge.getBirthdayCake(\\\"Margot\\\", 25), is(new String[]{\\\"********************************\\\", \\\"* 25 Happy Birthday Margot! 25 *\\\", \\\"********************************\\\"}));    }\\n    @Test    \\npublic void test57() {        assertThat(Challenge.getBirthdayCake(\\\"Hulda\\\", 55), is(new String[]{\\\"*******************************\\\", \\\"* 55 Happy Birthday Hulda! 55 *\\\", \\\"*******************************\\\"}));    }\\n    @Test    \\npublic void test58() {        assertThat(Challenge.getBirthdayCake(\\\"Adrian\\\", 23), is(new String[]{\\\"********************************\\\", \\\"* 23 Happy Birthday Adrian! 23 *\\\", \\\"********************************\\\"}));    }\\n    @Test    \\npublic void test59() {        assertThat(Challenge.getBirthdayCake(\\\"Stephine\\\", 48), is(new String[]{\\\"##################################\\\", \\\"# 48 Happy Birthday Stephine! 48 #\\\", \\\"##################################\\\"}));    }\\n    @Test    \\npublic void test60() {        assertThat(Challenge.getBirthdayCake(\\\"Loyd\\\", 23), is(new String[]{\\\"******************************\\\", \\\"* 23 Happy Birthday Loyd! 23 *\\\", \\\"******************************\\\"}));    }\\n    @Test    \\npublic void test61() {        assertThat(Challenge.getBirthdayCake(\\\"Dorris\\\", 5), is(new String[]{\\\"******************************\\\", \\\"* 5 Happy Birthday Dorris! 5 *\\\", \\\"******************************\\\"}));    }\\n    @Test    \\npublic void test62() {        assertThat(Challenge.getBirthdayCake(\\\"Riva\\\", 41), is(new String[]{\\\"******************************\\\", \\\"* 41 Happy Birthday Riva! 41 *\\\", \\\"******************************\\\"}));    }\\n    @Test    \\npublic void test63() {        assertThat(Challenge.getBirthdayCake(\\\"Evangelina\\\", 97), is(new String[]{\\\"************************************\\\", \\\"* 97 Happy Birthday Evangelina! 97 *\\\", \\\"************************************\\\"}));    }\\n    @Test    \\npublic void test64() {        assertThat(Challenge.getBirthdayCake(\\\"Jacques\\\", 68), is(new String[]{\\\"#################################\\\", \\\"# 68 Happy Birthday Jacques! 68 #\\\", \\\"#################################\\\"}));    }\\n    @Test    \\npublic void test65() {        assertThat(Challenge.getBirthdayCake(\\\"Todd\\\", 53), is(new String[]{\\\"******************************\\\", \\\"* 53 Happy Birthday Todd! 53 *\\\", \\\"******************************\\\"}));    }\\n    @Test    \\npublic void test66() {        assertThat(Challenge.getBirthdayCake(\\\"Agnus\\\", 18), is(new String[]{\\\"###############################\\\", \\\"# 18 Happy Birthday Agnus! 18 #\\\", \\\"###############################\\\"}));    }\\n    @Test    \\npublic void test67() {        assertThat(Challenge.getBirthdayCake(\\\"Vernita\\\", 88), is(new String[]{\\\"#################################\\\", \\\"# 88 Happy Birthday Vernita! 88 #\\\", \\\"#################################\\\"}));    }\\n    @Test    \\npublic void test68() {        assertThat(Challenge.getBirthdayCake(\\\"Gayle\\\", 7), is(new String[]{\\\"*****************************\\\", \\\"* 7 Happy Birthday Gayle! 7 *\\\", \\\"*****************************\\\"}));    }\\n    @Test    \\npublic void test69() {        assertThat(Challenge.getBirthdayCake(\\\"Jacques\\\", 95), is(new String[]{\\\"*********************************\\\", \\\"* 95 Happy Birthday Jacques! 95 *\\\", \\\"*********************************\\\"}));    }\\n    @Test    \\npublic void test70() {        assertThat(Challenge.getBirthdayCake(\\\"Kasandra\\\", 57), is(new String[]{\\\"**********************************\\\", \\\"* 57 Happy Birthday Kasandra! 57 *\\\", \\\"**********************************\\\"}));    }\\n    @Test    \\npublic void test71() {        assertThat(Challenge.getBirthdayCake(\\\"Phoebe\\\", 39), is(new String[]{\\\"********************************\\\", \\\"* 39 Happy Birthday Phoebe! 39 *\\\", \\\"********************************\\\"}));    }\\n    @Test    \\npublic void test72() {        assertThat(Challenge.getBirthdayCake(\\\"Fletcher\\\", 76), is(new String[]{\\\"##################################\\\", \\\"# 76 Happy Birthday Fletcher! 76 #\\\", \\\"##################################\\\"}));    }\\n    @Test    \\npublic void test73() {        assertThat(Challenge.getBirthdayCake(\\\"Kristine\\\", 12), is(new String[]{\\\"##################################\\\", \\\"# 12 Happy Birthday Kristine! 12 #\\\", \\\"##################################\\\"}));    }\\n\\n}\",\"language\":\"java\",\"summary\":\"Create a function which constructs a rectangular birthday cake, based on someone's name and age! Build it out of strings in an array and make sure to surround the birthday message with the character that fits the rule:\\n\\nIf the age is an even number, surround the message with \\\"#\\\".\\nIf the age is an odd number, surround the message with \\\"*\\\".\\n\\nOther important rule\",\"tags\":[\"arrays\",\"formatting\"],\"timestamp\":{\"$date\":1585532462232},\"title\":\"Birthday Cake\",\"stats\":{\"completed\":{\"total\":154,\"ratings\":[1,1,1,1,1,3,2,1,3,0,2,1,2,2,2,1,1,0,1,3,1,0,2,2,2,0,2,2,2,0,2,2,0,2,1,1,1,2,1,1,2,2,2,3,2,0,3,2,1,1,1,0,3,0,2,2,2,2,0,2,2,1,0,1,2,1,1,2,0,0,1,2,2,3,2,2,2,0,1,0,2,2,2,2,1,2,2,2,2,1,2,1,2,1,2,3,1,2,0,2,2,2,1,2,1,2,0,2,2,2,2,2,1,2,0,1],\"rators\":[\"3pdgguqZgNDSAJSGm\",\"C9yBWYcZsjmJYww3K\",\"YLqdr7bYjwew2KM4N\",\"AyrEvM2GLX2jqM772\",\"8J2Dqqz9PaFufQzwY\",\"eXW8reZCCZHQzJjQi\",\"8JyqsSbN2FJXPr3cw\",\"fBMc2qNyAxeHfDACe\",\"i5QeAsrM4m6hzPTku\",\"bsXDWXhsuqgaZYCCv\",\"mRwxbzaBc4Fg5q9Hw\",\"Es4eX2stRpyoXeC7f\",\"fbYN9Jp46RqBqCd2K\",\"j2hKJg9sh9m3HWFgo\",\"TxD5qx2hqQa6pixAP\",\"cAf8p3LyzuZkgSN8R\",\"wYYMNPe8nSiJFbvJw\",\"Pu83yaC2TfNSf6k6k\",\"D7dpRtRQDmteDSAXv\",\"v8RN8p2B6xdebkXAY\",\"4hYyZnCuvgfuxhd7e\",\"u8ornSPgkX6zjRQmL\",\"ML7bZJrM8gfGQJBJt\",\"2cdvd8yuPLSwvGj9w\",\"eJxMBZBhiHyJYWkH2\",\"toZsDEaLL7ptnFskQ\",\"mfm3gB39arY8Rjb2y\",\"fZjkX29nhRTWWb75k\",\"Kso7rzAKB4TTCPKgM\",\"hB5mgzMwQSnhBzi7P\",\"Yohr2MmAyaWGMbB35\",\"YLwJkF2wuL3n9o6a2\",\"PErEzX9YFvY2Yzfh2\",\"TrquEHytntLKHA4m2\",\"4GLDHD5irj4shYn5Q\",\"5seiNqw6ZXoF2GRRd\",\"FJzZTZo7CmAyN5ajr\",\"c7sE7kceskbYy3KmA\",\"vHRaYKPDqYqsssSWW\",\"J9zJq7PMGb6mqzcHW\",\"jyoLggHk8xQKZuoQC\",\"8zZ6xmzpiFair25qr\",\"av5QexsdPza9FsRCq\",\"WZujpe8yQAyZmpWHg\",\"etoSR23iELGGgs9rA\",\"htXCitorobtqYymjN\",\"oMLSgpSFQnY4ui8cB\",\"6ZxpGyg7iviX9cPAy\",\"B4pxRqzo43M7S8FbP\",\"DzvdGwHEjqsX7wyKr\",\"JQGw9jsJPEasdwhNJ\",\"dpJTai3i9aNkCS3sa\",\"rvojHhKH3DaxotefQ\",\"zwruFCmuHkwJTpYqg\",\"q2tzvkrLASvSjkek9\",\"8yyfRwCsP5ovSFT5p\",\"AcZdvmSFKyRN6EJQs\",\"g4NCSxxHqHCGMpWwT\",\"KxLMWekCxzy2Eem7u\",\"muXMnzQwGLzN6j2Jr\",\"Fd9765rksgPK4E2Zy\",\"a49eNnfRwSMxsDJXf\",\"H5sfMFuQo6yHE8GFL\",\"Ym8AjbKGSJooun3nt\",\"DkSMZ3jZLkwviKb9g\",\"AeJSxRqw2dJZuGvdk\",\"oMZovHkR6QqNvQwyc\",\"KCEsMas5BbmiD2Q9K\",\"yHvCCNugSDhWTmiEJ\",\"yd5PakB2z33q2JrTZ\",\"fRYcPHuyEdqngMzC4\",\"By8DbRQ2svexoGvsQ\",\"jb9RLyyuo565bKDzN\",\"kQRtmSZfHdSzFserc\",\"yXGiiSAR5nBHnH3yr\",\"FeCN9HXLdYFEzTC73\",\"gpd8yji9GXJruAtje\",\"rA5nhfhFwfqvmJb6M\",\"cWfmmhkEAjKEt2S7N\",\"gXTAie79kiw28tx5u\",\"SYPvrLhifXoqm9afx\",\"mG8HqKiAQFTdRZthG\",\"oMfq73A434YWhSuWQ\",\"P5BhjZxyeHQYTNyB9\",\"8Xx8nWXRydHDBGfQf\",\"jXTnL3JatkKjoifyb\",\"BWqQ68pvNedARDcBN\",\"mQKWauR6b252TmdX4\",\"hD6sfDtntpqT8NR2o\",\"dcW9oK2uRo8h8mBe2\",\"gBGjCfJvPHswDM5JQ\",\"62qNJjtmkRYvX5kKB\",\"a777e8chPvJkY3tKa\",\"udHFfcqNNej6udnpP\",\"pi76g3eRpnKrhee2a\",\"J7epB3qSQJ2E8vWkY\",\"SJExDfLgNMo2xBB4y\",\"WcfXCZ5s4db5qwCAw\",\"DrkR35NqnP9NDLbq6\",\"uFfEio8nzDvL8emhp\",\"mDWNyaaQ9hvPCRzSd\",\"Wi4H6ayKsNDWWQCG5\",\"btabi3PdyisuY5tn9\",\"MxRiNfgst8jWvHPGZ\",\"RGN3QTb5LXj4ZPPkj\",\"GkYtSbQuheBF4Enys\",\"ZMd8it647JSYTvx8Z\",\"p8qqFdJ3FSk5x9z3G\",\"bur3yQ8s34zqKGEro\",\"wB47dmNBe3aFZZcFr\",\"zZfMwLuoERGmybgib\",\"buX4mCQhtXCfBjeno\",\"hhxjQREtmHSheH9Pj\",\"4ySzqKC5s3ZRpG9di\",\"nHj7SC5cnmkTApbgY\",\"a6fgDQTddtZCKfnzR\",\"6rvJwN4mcX7iYGjY7\",\"LT24D8s552BJseSbA\",\"Ag5fRrZ9MrAZc9vpj\",\"8uaQyXiqhthEmkKP2\",\"9RPK7inRF9bnkkuNd\",\"sxci7DYKNa6q22Sjq\",\"HsFc9PgmpP2X9Fwh9\",\"xEX3TDY6C2h82dJTn\",\"SDnSk8mGaAg2e77Sb\",\"uw47663LqPME8btaA\",\"srJ34BaybkQh3qRkM\",\"QD7mPMD8gmTP56nPv\",\"io5D2FijiRvt6ePHy\",\"wFRLGjA56kj7xyhmv\",\"RsujLHaML6L3KinzK\",\"jCjCvyhqhpebkJn34\",\"6wSDRXXLqLh6KYSy6\",\"rWhXHhzF4W8bea6LP\",\"KMR6vNzvSKMA2cXnK\",\"6vjaR6LoWEjReGiMK\",\"AeSmk2XWGcTLHB7PJ\",\"unqzSsxpxj9sZ7rbD\",\"qedWkBipPYmcQw7fq\",\"nFbmNzMQ38TncmfQX\",\"ckQwFFWyLXmDQAaCn\"],\"quality\":[2,5,5,4,5,5,4,5,5,4,5,4,5,5,5,5,5,4,5,5,5,5,5,3,5,5,4,3,4,3]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":4.466666666666667,\"family\":[{\"_id\":\"4QksBtqAEBJRB8bEK\",\"language\":\"cpp\"},{\"_id\":\"diiEDD4JQyysFR7zh\",\"language\":\"java\"},{\"_id\":\"BBFPC6HhZ2ZFv3fpK\",\"language\":\"javascript\"},{\"_id\":\"MNpLAgh7NiLRTJRPe\",\"language\":\"php\"},{\"_id\":\"994QjWPmdhaR94DeF\",\"language\":\"python3\"},{\"_id\":\"X9vWYqquZ7Zrjczkj\",\"language\":\"ruby\"}]}}"]