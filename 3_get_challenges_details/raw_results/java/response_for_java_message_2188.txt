a["{\"msg\":\"result\",\"id\":\"651\",\"result\":{\"_id\":\"W8zoCps44yDxckivb\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class WordsFromNames {\\n  public static boolean anagram(String name, String[] words) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":2.347826086956522,\"familyId\":\"nGubb26XrCpCHau7S\",\"instructions\":\"Write a function that returns `true` if a given name can generate an array of words.\\n\\n### Examples\\n```\\nanagram(\\\"Tesha Xavier\\\", [\\\"six\\\", \\\"have\\\", \\\"rate\\\"]) ➞ true\\n\\nanagram(\\\"Natalie Portman\\\", [\\\"ornamental\\\", \\\"pita\\\"]) ➞ true\\n\\nanagram(\\\"Chris Pratt\\\", [\\\"chirps\\\", \\\"rat\\\"]) ➞ false\\n// Not all letters are used \\n\\nanagram(\\\"Jeff Goldblum\\\", [\\\"jog\\\", \\\"meld\\\", \\\"bluffs\\\"]) ➞ false\\n// \\\"s\\\" does not exist in the original name\\n\\nanagram(\\\"Justin Bieber\\\", [\\\"injures\\\", \\\"ebb\\\", \\\"it\\\"]) ➞ true\\n```\\n\\n### Notes\\n- Each letter in the name may only be used once.\\n- All letters in the name must be used.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"import static org.junit.Assert.assertEquals; \\nimport org.junit.Test; \\n\\npublic class WordsFromNamesTest {\\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertEquals(true, WordsFromNames.anagram(\\\"Tesha Xavier\\\", new String[] {\\\"six\\\", \\\"have\\\", \\\"rate\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertEquals(true, WordsFromNames.anagram(\\\"Natalie Portman\\\", new String[] {\\\"ornamental\\\", \\\"pita\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertEquals(true, WordsFromNames.anagram(\\\"Graham Norton\\\", new String[] {\\\"graham\\\", \\\"not\\\", \\\"nor\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertEquals(true, WordsFromNames.anagram(\\\"Emma Watson\\\", new String[] {\\\"mows\\\", \\\"meant\\\", \\\"a\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertEquals(true, WordsFromNames.anagram(\\\"Daniel Radcliffe\\\", new String[] {\\\"clarified\\\", \\\"elf\\\", \\\"and\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertEquals(true, WordsFromNames.anagram(\\\"Tom Hiddleston\\\", new String[] {\\\"tenths\\\", \\\"mood\\\", \\\"lid\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertEquals(true, WordsFromNames.anagram(\\\"Blake Lively\\\", new String[] {\\\"key\\\", \\\"veal\\\", \\\"bill\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertEquals(true, WordsFromNames.anagram(\\\"Ryan Reynolds\\\", new String[] {\\\"yonder\\\", \\\"sly\\\", \\\"ran\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test09() { \\n\\t\\tassertEquals(true, WordsFromNames.anagram(\\\"Kristen Stewart\\\", new String[] {\\\"trinkets\\\", \\\"war\\\", \\\"set\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() { \\n\\t\\tassertEquals(true, WordsFromNames.anagram(\\\"Justin Bieber\\\", new String[] {\\\"injures\\\", \\\"ebb\\\", \\\"it\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test11() { \\n\\t\\tassertEquals(false, WordsFromNames.anagram(\\\"Chris Pratt\\\", new String[] {\\\"chirps\\\", \\\"rat\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test12() { \\n\\t\\tassertEquals(false, WordsFromNames.anagram(\\\"Jeff Goldblum\\\", new String[] {\\\"jog\\\", \\\"meld\\\", \\\"bluffs\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test13() { \\n\\t\\tassertEquals(false, WordsFromNames.anagram(\\\"Taylor Swift\\\", new String[] {\\\"stratify\\\", \\\"ow\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test14() { \\n\\t\\tassertEquals(false, WordsFromNames.anagram(\\\"Adam Levine\\\", new String[] {\\\"medieval\\\", \\\"man\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test15() { \\n\\t\\tassertEquals(false, WordsFromNames.anagram(\\\"Blake Shelton\\\", new String[] {\\\"betoken\\\", \\\"all\\\", \\\"she\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test16() { \\n\\t\\tassertEquals(false, WordsFromNames.anagram(\\\"Miley Cyrus\\\", new String[] {\\\"lyric\\\", \\\"my\\\", \\\"suer\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test17() { \\n\\t\\tassertEquals(false, WordsFromNames.anagram(\\\"Matt Damon\\\", new String[] {\\\"madman\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test18() { \\n\\t\\tassertEquals(false, WordsFromNames.anagram(\\\"Graham Norton\\\", new String[] {\\\"graham\\\", \\\"not\\\", \\\"or\\\"}));\\n\\t}\\n}\",\"language\":\"java\",\"quality\":0,\"summary\":\"Write a function that returns true if a given name can generate an array of words.\\n\\nExamples\\nanagram(\\\"Tesha Xavier\\\", [\\\"six\\\", \\\"have\\\", \\\"rate\\\"]) ➞ true\\n\\nanagram(\\\"Natalie Portman\\\", [\\\"ornamental\\\", \\\"pita\\\"]) ➞ true\\n\\nanagram(\\\"Chris Pratt\\\", [\\\"chirps\\\", \\\"rat\\\"]) ➞ false\\n// Not all letters are used\\n\\nanagram(\\\"Jeff Goldblum\\\", [\\\"jog\\\", \\\"meld\\\", \\\"bluffs\\\"]) ➞ false\\n// \\\"s\\\" does no\",\"tags\":[\"strings\",\"arrays\",\"validation\"],\"timestamp\":{\"$date\":1607453032953},\"title\":\"Generating Words From Names\",\"stats\":{\"completed\":{\"total\":22,\"ratings\":[2,2,2,2,2,3,3,2,1,2,3,2,3,2,2,3,3,2,2,3,2,3,3],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"Es4eX2stRpyoXeC7f\",\"gXTAie79kiw28tx5u\",\"RGN3QTb5LXj4ZPPkj\",\"82weQfHHmno4Mq4X7\",\"srX7BxDt5GoPC3PP6\",\"jyoLggHk8xQKZuoQC\",\"buX4mCQhtXCfBjeno\",\"rhS8qXRjZcpDXkwnE\",\"mfm3gB39arY8Rjb2y\",\"qaPjAANdnxFnWfj5d\",\"2NJZbusRvu3eJ4tHu\",\"jCjCvyhqhpebkJn34\",\"wFRLGjA56kj7xyhmv\",\"KMR6vNzvSKMA2cXnK\",\"sxci7DYKNa6q22Sjq\",\"htXCitorobtqYymjN\",\"rWhXHhzF4W8bea6LP\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"tm4Pf4SYbyXCDfqAj\",\"language\":\"cpp\"},{\"_id\":\"W8zoCps44yDxckivb\",\"language\":\"java\"},{\"_id\":\"tGehcXPRmrepQPGQW\",\"language\":\"javascript\"},{\"_id\":\"sDvjdcBrbHoXKvDsZ\",\"language\":\"python3\"},{\"_id\":\"89Cxq2xfjmcE5ai7F\",\"language\":\"ruby\"},{\"_id\":\"KfySx6Qk8yaERudRB\",\"language\":\"swift\"}]}}"]