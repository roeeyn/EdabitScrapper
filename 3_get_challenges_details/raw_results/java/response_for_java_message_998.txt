a["{\"msg\":\"result\",\"id\":\"60\",\"result\":{\"_id\":\"7nsM8Lm243axLE2ei\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class BlueShade {\\n  public static int howManyWalls(int n, int w, int h) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":0.4854368932038835,\"familyId\":\"btXAYm27p6M5wNiK8\",\"instructions\":\"I have a bucket containing an amount of navy blue paint and I'd like to paint as many walls as possible. Create a function that returns the number of **complete walls** that I can paint, before I need to head to the shops to buy more.\\n\\n* `n` is the number of square meters I can paint.\\n* `w` and `h` are the widths and heights of a single wall in meters.\\n\\n### Examples\\n```\\nhowManyWalls(54, 1, 43) ➞ 1\\n\\nhowManyWalls(46, 5, 4) ➞ 2\\n\\nhowManyWalls(100, 4, 5) ➞ 5\\n\\nhowManyWalls(10, 15, 12) ➞ 0\\n\\nhowManyWalls(41, 3, 6) ➞ 2\\n```\\n\\n### Notes\\n* Don't count a wall if I don't manage to finish painting all of it before I run out of paint.\\n* All walls will have the same dimensions.\\n* All numbers will be positive integers.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"import static org.junit.Assert.assertEquals; \\nimport org.junit.Test; \\n\\npublic class BlueShadeTest {\\n\\t@Test\\n\\tpublic void test1() { \\n\\t\\tassertEquals(0, BlueShade.howManyWalls(5, 4, 4));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test2() { \\n\\t\\tassertEquals(0, BlueShade.howManyWalls(4, 6, 6));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test3() { \\n\\t\\tassertEquals(5, BlueShade.howManyWalls(100, 4, 5));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test4() { \\n\\t\\tassertEquals(0, BlueShade.howManyWalls(10, 15, 12));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test5() { \\n\\t\\tassertEquals(2, BlueShade.howManyWalls(41, 3, 6));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test6() { \\n\\t\\tassertEquals(0, BlueShade.howManyWalls(50, 11, 5));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test7() { \\n\\t\\tassertEquals(1, BlueShade.howManyWalls(1, 1, 1));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test8() { \\n\\t\\tassertEquals(1, BlueShade.howManyWalls(54, 1, 43));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test9() { \\n\\t\\tassertEquals(2, BlueShade.howManyWalls(46, 5, 4));\\n\\t}\\n}\\n// Credit goes to the original author and publisher @Joshua Señoron\",\"language\":\"java\",\"quality\":4.767441860465116,\"summary\":\"I have a bucket containing an amount of navy blue paint and I'd like to paint as many walls as possible. Create a function that returns the number of complete walls that I can paint, before I need to head to the shops to buy more.\\n\\nn is the number of square meters I can paint.\\nw and h are the widths and heights of a single wall in meters.\\n\\nExamples\\nhowManyWall\",\"tags\":[\"numbers\",\"math\"],\"timestamp\":{\"$date\":1611671611681},\"title\":\"I'd Like A New Shade Of Blue, Please\",\"stats\":{\"completed\":{\"total\":297,\"ratings\":[0,0,0,0,0,1,0,0,0,0,0,1,1,1,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,2,0,0,0,2,0,1,0,2,1,1,0,0,1,0,2,0,0,1,0,1,1,0,1,0,0,0,1,2,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,2,0,1,0,1,1,1,1,0,0,0,0,0,0,2,1,1,1,2,0,0,0,1,2,0,0,1,1,1,1,2,5,0,0,0,0,0,1,1,1,2,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,4,0,2,0,2,2,1,0,1,1,0,3,0,0,0,1,0,0,0,0,2,0,0,0,0,1,1,0,0,0,0,0,1,1,0,1,0,0,2,0,0,0,0,0,0,1,0,0,1,1,1],\"quality\":[5,5,5,4,3,5,2,5,5,5,5,5,5,1,5,5,5,5,5,5,4,5,5,4,4,4,5,5,5,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,5,5,5,5,5,5,5,5,5,5,3,5],\"rators\":[\"a777e8chPvJkY3tKa\",\"jLJdzR3aWe4L4MqmK\",\"T94DT5gxK2nW8ZeNa\",\"joAbzHqmS3JhBbGGj\",\"3ihAquM5m4uDvfca5\",\"LvPcgns5Ec7wyMbMv\",\"SgekznFPPyZHtGkED\",\"hhxjQREtmHSheH9Pj\",\"6Ch9aE28Wss8rEJh6\",\"boFZBTPYp9cCjkTXW\",\"ACG2merTsWD2tGiMJ\",\"A3KrxZk4FiSymY6f2\",\"G9ppcptBQBd427saX\",\"geunekuRTf7CDeebE\",\"Es4eX2stRpyoXeC7f\",\"QRv96jmNaYsWkxQEG\",\"BXCfRJozHjkgcanfL\",\"uFfEio8nzDvL8emhp\",\"ozY6SCQFMR3WxiAoC\",\"TQf5AWbxZTHt3iF7L\",\"zocGZY9EeJHx7AAsJ\",\"hSGA99ySG5ePGK7CJ\",\"FQCgeqgyXFRuen6dk\",\"AeJSxRqw2dJZuGvdk\",\"DxhRwzp2DMF9TW56Y\",\"C64gZjpSbz6rxcPox\",\"fdcdwhiYC326kxYm7\",\"RSombfrtxS5PSXnyJ\",\"9qiiCArwrxZzDqFMH\",\"AEgQkRtWCCgnfXXAb\",\"X4CMR6EQGkCHiSM3E\",\"HARxMf9cFQntLvyXB\",\"5pjSPgPircvPQruLJ\",\"gpg9SQdrHRdyLQnrJ\",\"jigiWwJgsBppcRfnR\",\"pPYFfqW6X8syPjTXZ\",\"o4SA3c9ztvN7GtkFj\",\"PxDZ2QASAZ3g8SiXF\",\"NaA89cCisD6ZxHxNQ\",\"Z6uSgpQu7xhA7qHh9\",\"JYsASoJtjpG6yiesT\",\"7egQThmMwYY24GYeG\",\"btabi3PdyisuY5tn9\",\"7sS3TeyCs3axestjv\",\"ZS2cEmvxDvCLmc8Dn\",\"4EAJnisria4zo8yYc\",\"3jqAn4H3fA4K5gu2j\",\"3SgSNoAB3sxaYeT3w\",\"FqpJkhuPsJSTbja8v\",\"j6m2FpEdsktpnEpYm\",\"Jx8agpujbhXzLmwEe\",\"bjijrSsrSSaromLEh\",\"XMPLn32f47R69oZNZ\",\"etoSR23iELGGgs9rA\",\"JeXXwDgxu4SsinAwf\",\"qnCLNWMAFJgyzg2EE\",\"Tz6J73FvF3XRXiiKf\",\"rSpyFwaEPSCZMryBS\",\"nvzRzs5w4qs79Xj2a\",\"J7epB3qSQJ2E8vWkY\",\"PJu3WcTpfRrvHfQiS\",\"bQM5iSghkahZF9AvJ\",\"NioGGZL9KCn5Ln96t\",\"GubwDwFZNXcfHSmsE\",\"tP7TMeboFY5x4RYRs\",\"aN8K74BXtfHCKdbgP\",\"gBGjCfJvPHswDM5JQ\",\"Dqz7FEJYyPTKcWSBb\",\"NWMvWeL4bXChbckFC\",\"hmmArK6TarhpDSagG\",\"6wNmd5DYHLPn77HdR\",\"R7Ynukmn3ezR2dSEv\",\"6ymdRdTsjzgzw2rc8\",\"L7hLKJw4CeB2aezZZ\",\"vdko73myr5H3HSRsG\",\"wbAwwLtmj27p9qe8m\",\"a49eNnfRwSMxsDJXf\",\"vRXuYYBNuHEQ29fbm\",\"Y326DeGBTyfJudwSb\",\"srJ34BaybkQh3qRkM\",\"tejkzX5N5NeBgjdke\",\"Nb6LYPoQP6KJZt8mz\",\"YsodJsnbGjZD2ahyo\",\"8BFSTCnoe2QggN64c\",\"XNgW94PSq5kkXhojm\",\"KAGzYNik4pGts5Fj5\",\"HCfkcKnPs9mrJojdG\",\"oMZovHkR6QqNvQwyc\",\"5TaPWyRv9DZWWodp8\",\"NXtM3si2K3i4DySMn\",\"TWhtuegb8G7ka3Tvg\",\"yDBK5DJ9jgu8ugXdB\",\"b6PEkvr66YeCamroN\",\"umE8dRTGWzrZFp755\",\"Q7fQT4XeoY23TpkW7\",\"Yp7uvStL97cC9fKkY\",\"82weQfHHmno4Mq4X7\",\"kiq3z4o9ABhQd7aXJ\",\"8QYNFnSwFGmRRacAT\",\"u5jLXaWAKo7K4JvTR\",\"YcCLwitFMAEJSnxAW\",\"x9CWxL7Q7yCHdrAmq\",\"uNGztFFaAGh8bYngz\",\"6MgG8N9rkmAZKYrJ3\",\"YuA7rdrQTzpfFLGJq\",\"GkYtSbQuheBF4Enys\",\"w2rPvPbskuhndnDRG\",\"FSSM3xcaTXGcxqYGz\",\"bkydB65DMkNNNmznA\",\"fi6Drmv5pdGcbAEYM\",\"wRttWTM59y8m5mx7x\",\"3ZyEgCXkYJXybwQEm\",\"cwwW2amYGZMkYwAxM\",\"z6KN9CFWcS7qjAxwv\",\"r9htEy7di6YK7gu8v\",\"EcBw39vkywQsT3Y2Z\",\"buX4mCQhtXCfBjeno\",\"TzDcPrP6aPgHqjCFP\",\"H469XosMjfNu8Fop7\",\"dD3Aja8PZSMXMFSDY\",\"QgGGow8Ynnq2YkGXX\",\"ot47sjtkXfS7tmdF4\",\"c96gH88NsjR3MycAj\",\"8jpeC6HwxGq68WPma\",\"6jfFmjmmvW5XYyePJ\",\"xEX3TDY6C2h82dJTn\",\"eQXwk5zGckM8tCWYH\",\"ScYoZtxALtkZXKLo4\",\"yb8T3nuL4evaeJW6k\",\"tuD6GTaiyfWm87uvh\",\"hp2w3yEYWp4ex2uM7\",\"4ySzqKC5s3ZRpG9di\",\"TrquEHytntLKHA4m2\",\"tqhuFrDBKPTW7Q8Gb\",\"cXaojnX4FS2XbDeMy\",\"s2Y76rR2h2fPKibsK\",\"umN7yuemgaF8MLo6x\",\"N8WRBtQhtoqroCHh9\",\"nXw9eTHFraWQtwJtY\",\"9qoWqLcHGiDX429rE\",\"rmGP9qyAKsE7HSkGw\",\"6rvJwN4mcX7iYGjY7\",\"ibKXaGhJiNkGBhQtR\",\"HdqP6rBFRWXzsGhhb\",\"dBexp26HAHeucxKP7\",\"mkem4awRiMRkZbrFG\",\"pPpmP7xeJzGgK362R\",\"FEGpESiobxcqjMqF3\",\"sYM6qQN6pepWg3B2t\",\"zrk4J9JseJSk5i7nG\",\"EFypyTrBDJhHKx3PA\",\"t55QWHi8o4teZxqqE\",\"jyoLggHk8xQKZuoQC\",\"cp3X8hk8yNME7qoD9\",\"paiDSh7apNXC5mkuh\",\"a6n3a7iJydq97vTnu\",\"dFxKk2WmYS7aTYmcQ\",\"Yohr2MmAyaWGMbB35\",\"9Zu6dGqXNft4wXAwg\",\"MRvvQLqaNFr96xFMc\",\"YBDNxECxCzoDeSfwS\",\"5f6oSeq4r5WTXLdCQ\",\"2ptN2mhjFwFcHyPZd\",\"Reyq7sSccAZJvJrmB\",\"fGSQQds3A8gP6rc5h\",\"MdepFq4u3GavjPDH6\",\"sYBSqEmJuGmNJJ3J6\",\"M8dQuMrEpP8Hc3tHN\",\"AQSqD9oNv2uPfxZCR\",\"jtzNdgDCzsekkdpxA\",\"ztrfkKRfYBWokFwkf\",\"oPNPK8B6u6Rbxx9JG\",\"5LDvZHCDJqePeBrCg\",\"mzbfEWpDFFJzLehvY\",\"p8hkfoXChHNEFDNbM\",\"khdCaD6AGBiR6txLQ\",\"sYKPxZX5xJZ2GTp6Q\",\"SgPjF69J25jT3dn4X\",\"Bfghe5tAMfEFe8oco\",\"XnKGy6zSYPRaDXdqS\",\"WfYtnzzAE7AtHey7a\",\"Nq97fRLMMrAgFKkNj\",\"Kn5jGPkzjMTaFTCxH\",\"HXbTKW3jmmyRAsKrr\",\"HsFc9PgmpP2X9Fwh9\",\"gmWhJEuPq3zcseMTQ\",\"TCvpT4EPb8qNssNB7\",\"jppr4zWvAWWno7vDF\",\"sxci7DYKNa6q22Sjq\",\"fdyejapW3NWN7utPX\",\"3qgJpdhyi4tKuqMdm\",\"3o9xehumCaHZ4upFo\",\"rhS8qXRjZcpDXkwnE\",\"Qv2jEtTnFCXX7cdd3\",\"9RJpt5ec2KMLuac4w\",\"D3ASM3aWpcQ8gvnin\",\"nSLvkGEpiYCtcBLaa\",\"Gn8rShvWCKLX3cxzx\",\"PCsT29KNEX8ufEawi\",\"uC2Qkv8YnA3FgJKFu\",\"gZj6HTKJdPGJwPe2D\",\"uw47663LqPME8btaA\",\"A74BfWasj4b6kZf3p\",\"i6MDC9kdTmCvtFPy7\",\"iCtBPtyhn5PGqTTcK\",\"jcPZ5ySXseCB7Ec3x\",\"edjvydcXsRyAko8GE\",\"yHbTMNQXXdLzDkvhE\",\"f6CBJntX2RFd2zAjR\",\"PYtJa46RKyESxNK5W\",\"Kvrm7Hbzgs6Jj9Rmk\",\"9moo5f7g8KrZieT2K\",\"cR3ibTMxLyEdDFCHY\",\"mTiQejebRqeCzHdsc\",\"qGyhayAwAgpwvK8Kg\",\"nLz3viEt7RvQA9Y9u\",\"DsydxhadPpp6uEoRd\",\"6KDZNmtgvb6PCaWQE\",\"ckQwFFWyLXmDQAaCn\",\"GyqXoRcaYYQ4xTiPX\",\"pjhf5ZYDnZz9PP8ym\",\"yGDSvLJXXz5ZmaS4h\",\"2v8daNMFLCPvSNaX5\",\"aoB3vhvsrFhwALLm8\",\"K9sQFTWhKP4nkPQcb\",\"htXCitorobtqYymjN\",\"DEDniTrstQYGounXT\",\"aKffMfkHuGunEGWFz\",\"zo9MtKnkZegPjXvtP\",\"g9fi4rz27ZqJcSgTn\",\"KMR6vNzvSKMA2cXnK\",\"6kB5qypxcm62PHsEJ\",\"PAzNgJF54C2mYPkR9\",\"YrZxRMm5KrrC5bsZa\",\"P7zedbjaFw8YDzLz7\",\"FcMu2WPvDobEbWhyr\",\"qpYxX6CkukbmxRaKn\",\"wE4roswN4ggiieGHs\",\"eXQziXGcpwekMyABQ\",\"RsujLHaML6L3KinzK\",\"svHoRdg5sR9CLzZLC\",\"PPdaczxSt2u5cmZYG\",\"KBfJFkYQ2RbnYd3hL\",\"GSs7rtv3hBbJA3aCF\",\"QMcxci638CgTJ54bH\",\"rd57KDjWbqx3HLEo3\",\"H3yM3F3mukfdq9fit\",\"BADPWDcKtuiJ76NnH\",\"5QN8R22z43SrwoHDz\",\"GD9Jqmu93vB4LTT8F\",\"qoZrXudcaHo8QLFsj\",\"FJur4D6hBgTQZqmDQ\",\"unqzSsxpxj9sZ7rbD\",\"gFEpzrgWhzCZHeifj\",\"xLy94bAjaLwokPcZZ\",\"w99WfQNYsNAyJRM4C\",\"tN8QWy3aaEzC2MnfA\",\"WgEpodYY8Zya5cAQJ\",\"5HGyJtoZ3AffzAZAv\",\"F8dA24AosSC8XXb7D\",\"rWhXHhzF4W8bea6LP\",\"5kMuNZuxiFcNRDkG4\",\"x2Cz7S8rCKJqCE3Xe\",\"B4y8aoyXJtskYPFEL\",\"9du58gNDkWQEWivbB\",\"3exyrcibvzm6oe8eq\",\"h6q2JS8Mwtk5KoRve\",\"4To7THbHADdtXbewx\",\"C6prbNbCwgh4GrXdD\",\"hF9icm7GxAnAGSjAD\",\"iqoFCrHypgAw9qAGX\",\"NwczjpfNN8jXy5RF6\",\"7t5k4TzBWCa2iaj7v\",\"PB3nTGxtZYDmYx29L\",\"6GmG5otoNYX5qitTR\",\"CipspuHopXSNosuq3\",\"aJLTQjSMpFy6dvom5\",\"94XQj7wutz9ySewYC\",\"uw9pWX8KAGuzDh9s7\",\"Scr8vtswKqPjZ5L5K\",\"r72oFMcCQh4rBsKHb\",\"bCruaEbKiLzqK2Bj9\",\"nFbmNzMQ38TncmfQX\",\"3Gf7ikLijfoxabiPY\",\"FgaXeuBoJFBoDWZGL\",\"5eDE9KCDnDnqBqLEK\",\"J8GhL9EX5zZcrgyBt\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"SQcepfF6kwzDSKR4r\",\"language\":\"cpp\"},{\"_id\":\"7nsM8Lm243axLE2ei\",\"language\":\"java\"},{\"_id\":\"2rjHtbg32PrtZdF66\",\"language\":\"javascript\"},{\"_id\":\"RbqmrWKqxk6D6LAnZ\",\"language\":\"php\"},{\"_id\":\"7ECZC8CBEhy5QkvN3\",\"language\":\"python3\"},{\"_id\":\"oEHdLyQ8tPhdgYKwS\",\"language\":\"ruby\"}]}}"]