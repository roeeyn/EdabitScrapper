a["{\"msg\":\"result\",\"id\":\"456\",\"result\":{\"_id\":\"8YajvDynPYF6XG3nZ\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class Friend {\\n\\tpublic static boolean isPotentialFriend(String[] y, String[] o) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":1.6428571428571428,\"familyId\":\"NMPZvSWe8wxcjQ7NG\",\"instructions\":\"Given two arrays of two people's different interests, return whether both people have **at least two things in common** or have **exact interests**. Return `true` if there's a potential friend!\\n\\n### Examples\\n```\\nisPotentialFriend(\\n  [\\\"sports\\\", \\\"music\\\", \\\"chess\\\"],\\n  [\\\"coding\\\", \\\"music\\\", \\\"netflix\\\", \\\"chess\\\"]\\n) ➞ true\\n\\nisPotentialFriend(\\n  [\\\"cycling\\\", \\\"technology\\\", \\\"drawing\\\"],\\n  [\\\"dancing\\\", \\\"drawing\\\"]\\n) ➞ false\\n\\nisPotentialFriend(\\n  [\\\"history\\\"],\\n  [\\\"history\\\"]\\n) ➞ true\\n```\\n\\n### Notes\\nArrays of interests may have varied lengths.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"/** \\n====================================== \\nTestGen 2.3 for JUnit 4.13.0 \\t\\t\\nTest Case: Friend::isPotentialFriend \\nTimestamp: 11/7/2020 11:48:30 PM \\n--------------------------------------\\n® DARKKO 2020 © \\n======================================\\n**/ \\n\\nimport static org.junit.Assert.assertEquals; \\nimport org.junit.Test; \\n\\npublic class FriendTest { \\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertEquals(true, Friend.isPotentialFriend(new String[] {\\\"sports\\\", \\\"music\\\", \\\"chess\\\"}, new String[] {\\\"coding\\\", \\\"sports\\\", \\\"music\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertEquals(false, Friend.isPotentialFriend(new String[] {\\\"cycling\\\", \\\"technology\\\", \\\"reading\\\"}, new String[] {\\\"dancing\\\", \\\"planes\\\", \\\"politics\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertEquals(false, Friend.isPotentialFriend(new String[] {\\\"history\\\"}, new String[] {\\\"gaming\\\", \\\"drawing\\\", \\\"coding\\\", \\\"history\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertEquals(true, Friend.isPotentialFriend(new String[] {\\\"films\\\"}, new String[] {\\\"films\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertEquals(true, Friend.isPotentialFriend(new String[] {\\\"sports\\\", \\\"music\\\", \\\"chess\\\"}, new String[] {\\\"coding\\\", \\\"music\\\", \\\"netflix\\\", \\\"chess\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertEquals(false, Friend.isPotentialFriend(new String[] {\\\"cycling\\\", \\\"technology\\\", \\\"drawing\\\"}, new String[] {\\\"dancing\\\", \\\"drawing\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertEquals(true, Friend.isPotentialFriend(new String[] {\\\"history\\\", \\\"acting\\\", \\\"cards\\\"}, new String[] {\\\"history\\\", \\\"acting\\\", \\\"cards\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertEquals(true, Friend.isPotentialFriend(new String[] {\\\"coding\\\", \\\"music\\\", \\\"netflix\\\", \\\"chess\\\"}, new String[] {\\\"sports\\\", \\\"music\\\", \\\"chess\\\"}));\\n\\t}\\n}\",\"language\":\"java\",\"quality\":4.5,\"summary\":\"Given two arrays of two people's different interests, return whether both people have at least two things in common or have exact interests. Return true if there's a potential friend!\\n\\nExamples\\nisPotentialFriend(\\n  [\\\"sports\\\", \\\"music\\\", \\\"chess\\\"],\\n  [\\\"coding\\\", \\\"music\\\", \\\"netflix\\\", \\\"chess\\\"]\\n) ➞ true\\n\\nisPotentialFriend(\\n  [\\\"cycling\\\", \\\"technology\\\", \\\"drawing\\\"],\\n  [\\\"da\",\"tags\":[\"language_fundamentals\",\"arrays\",\"validation\"],\"timestamp\":{\"$date\":1604771089563},\"title\":\"Potential Friend?\",\"stats\":{\"completed\":{\"total\":65,\"ratings\":[1,1,1,1,1,2,1,1,2,2,2,2,0,2,1,2,2,1,0,0,2,2,2,2,2,0,2,2,2,2,2,2,3,4,2,2,2,2,1,2,1,0,2,2,2,2,3,2,2,2,2,1,2,1,1,2],\"quality\":[5,5,1,5,5,5,5,5],\"rators\":[\"a777e8chPvJkY3tKa\",\"P5BhjZxyeHQYTNyB9\",\"jb9RLyyuo565bKDzN\",\"Es4eX2stRpyoXeC7f\",\"azAzSkvJd7eyXY9x9\",\"ohA4oAsdELNGnRpYb\",\"zE46SymvixkeFJmPM\",\"vRXuYYBNuHEQ29fbm\",\"EwK4QCN3TcrmfbAcR\",\"zTM2NbjE6q5Q2HSeF\",\"p8qqFdJ3FSk5x9z3G\",\"S4BMYSkcyYwHSzt2e\",\"yd5PakB2z33q2JrTZ\",\"J7epB3qSQJ2E8vWkY\",\"AeJSxRqw2dJZuGvdk\",\"oZs4EZiMASjwzjqQB\",\"8gRwcAqPftCN4ifgf\",\"oMZovHkR6QqNvQwyc\",\"uwBStANxGR2Cswo5H\",\"jXTnL3JatkKjoifyb\",\"gBGjCfJvPHswDM5JQ\",\"NeGKpuxM3sGgStri7\",\"8Xx8nWXRydHDBGfQf\",\"4xMFiwnDm6t8NgbKD\",\"muQan4WvyZu8K29JD\",\"rvojHhKH3DaxotefQ\",\"rGpPd6PvpzLaqps4g\",\"C9yBWYcZsjmJYww3K\",\"DzvdGwHEjqsX7wyKr\",\"jyoLggHk8xQKZuoQC\",\"BbcH2NLjE4tKAZ3wR\",\"Ym8AjbKGSJooun3nt\",\"mQKWauR6b252TmdX4\",\"82weQfHHmno4Mq4X7\",\"qaPjAANdnxFnWfj5d\",\"a49eNnfRwSMxsDJXf\",\"bur3yQ8s34zqKGEro\",\"DkSMZ3jZLkwviKb9g\",\"buX4mCQhtXCfBjeno\",\"BnaE25vvCGcfL3jiQ\",\"4ySzqKC5s3ZRpG9di\",\"rhS8qXRjZcpDXkwnE\",\"sxci7DYKNa6q22Sjq\",\"c7uBxu2rgY77H5d79\",\"xEX3TDY6C2h82dJTn\",\"okJx5NuyfNDX2mHqq\",\"srJ34BaybkQh3qRkM\",\"wFRLGjA56kj7xyhmv\",\"J9zJq7PMGb6mqzcHW\",\"htXCitorobtqYymjN\",\"sQiqu3hFQeJLpJEKK\",\"vAh63eGRwkuJtoP8v\",\"KMR6vNzvSKMA2cXnK\",\"rWhXHhzF4W8bea6LP\",\"jCjCvyhqhpebkJn34\",\"unqzSsxpxj9sZ7rbD\",\"FxPDKKibxnZjGJLs6\",\"uw47663LqPME8btaA\",\"jyjKaFsAbJXdTCePh\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"Hr9KaSGL5oaqQ8WrA\",\"language\":\"cpp\"},{\"_id\":\"8YajvDynPYF6XG3nZ\",\"language\":\"java\"},{\"_id\":\"rBwM5LiDbaBqvdw67\",\"language\":\"javascript\"},{\"_id\":\"urmGYQsn4neGSKaat\",\"language\":\"python3\"},{\"_id\":\"zhzsguq7PvPHSqyfS\",\"language\":\"ruby\"}]}}"]