a["{\"msg\":\"result\",\"id\":\"492\",\"result\":{\"_id\":\"FhsLkzfbEgb4TiJXA\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"import java.util.stream.Stream;\\nimport java.util.*;\\n\\npublic class LetterCase {\\n  public static Map<String, String> mapping(String[] letters) {\\n\\t\\t\\n  }\\n} \",\"difficulty\":1.7717391304347827,\"familyId\":\"Nx35YYBEk4o9yLbZM\",\"instructions\":\"Write a function that creates an object with each **(key, value)** pair being the **(lower case, upper case)** versions of a letter, respectively.\\n\\n### Examples\\n```\\nmapping([\\\"x\\\", \\\"a\\\", \\\"v\\\", \\\"i\\\", \\\"e\\\", \\\"r\\\"]) ➞ { \\\"x\\\"=\\\"X\\\", \\\"a\\\"=\\\"A\\\", \\\"v\\\"=\\\"V\\\", \\\"i\\\"=\\\"I\\\", \\\"e\\\"=\\\"E\\\", \\\"r\\\"=\\\"R\\\" }\\n\\nmapping([\\\"t\\\", \\\"e\\\", \\\"s\\\", \\\"h\\\", \\\"a\\\"]) ➞ { t=T, e=E, s=S, h=H, a=A }\\n\\nmapping([\\\"p\\\", \\\"s\\\"]) ➞ { \\\"p\\\"=\\\"P\\\", \\\"s\\\"=\\\"S\\\" }\\n\\nmapping([\\\"a\\\", \\\"b\\\", \\\"c\\\"]) ➞ { \\\"a\\\"=\\\"A\\\", \\\"b\\\"=\\\"B\\\", \\\"c\\\"=\\\"C\\\" }\\n\\nmapping([\\\"a\\\", \\\"v\\\", \\\"y\\\", \\\"z\\\"]) ➞ { \\\"a\\\"=\\\"A\\\", \\\"v\\\"=\\\"V\\\", \\\"y\\\"=\\\"Y\\\", \\\"z\\\"=\\\"Z\\\" }\\n\\nmapping([\\\"d\\\", \\\"x\\\", \\\"t\\\", \\\"s\\\"]) ➞ { \\\"d\\\"=\\\"D\\\", \\\"x\\\"=\\\"X\\\", \\\"t\\\"=\\\"T\\\", \\\"s\\\"=\\\"S\\\" }\\n```\\n\\n### Notes\\nAll of the letters in the input list will always be lowercase.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"/** \\n================================= \\nTestGen 2.3 for JUnit 4.13.0 \\t\\t\\nTest Case: LetterCase::mapping \\nTimestamp: 11/11/2020 10:24:04 PM \\n--------------------------------- \\n® DARKKO 2020 © \\n=================================\\n**/ \\n\\nimport static org.junit.Assert.assertEquals;\\nimport org.junit.Test; \\nimport java.util.LinkedHashMap;\\nimport java.util.Map;\\n\\npublic class LetterCaseTest {\\n\\t@Test\\n\\tpublic void test01() {\\n\\t\\tMap<String, String> map = new LinkedHashMap<String, String>();\\n\\t\\tmap.put(\\\"x\\\", \\\"X\\\"); map.put(\\\"a\\\", \\\"A\\\"); map.put(\\\"v\\\", \\\"V\\\"); map.put(\\\"i\\\", \\\"I\\\"); map.put(\\\"e\\\", \\\"E\\\"); map.put(\\\"r\\\", \\\"R\\\");\\n\\t\\tassertEquals(map, LetterCase.mapping(new String[] {\\\"x\\\", \\\"a\\\", \\\"v\\\", \\\"i\\\", \\\"e\\\", \\\"r\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tMap<String, String> map = new LinkedHashMap<String, String>();\\n\\t\\tmap.put(\\\"t\\\", \\\"T\\\"); map.put(\\\"e\\\", \\\"E\\\"); map.put(\\\"s\\\", \\\"S\\\"); map.put(\\\"h\\\", \\\"H\\\"); map.put(\\\"a\\\", \\\"A\\\");\\n\\t\\tassertEquals(map, LetterCase.mapping(new String[] {\\\"t\\\", \\\"e\\\", \\\"s\\\", \\\"h\\\", \\\"a\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tMap<String, String> map = new LinkedHashMap<String, String>();\\n\\t\\tmap.put(\\\"d\\\", \\\"D\\\"); map.put(\\\"x\\\", \\\"X\\\"); map.put(\\\"t\\\", \\\"T\\\"); map.put(\\\"s\\\", \\\"S\\\");\\n\\t\\tassertEquals(map, LetterCase.mapping(new String[] {\\\"d\\\", \\\"x\\\", \\\"t\\\", \\\"s\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tMap<String, String> map = new LinkedHashMap<String, String>();\\n\\t\\tmap.put(\\\"d\\\", \\\"D\\\"); map.put(\\\"t\\\", \\\"T\\\");\\n\\t\\tassertEquals(map, LetterCase.mapping(new String[] {\\\"d\\\", \\\"t\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tMap<String, String> map = new LinkedHashMap<String, String>();\\n\\t\\tmap.put(\\\"t\\\", \\\"T\\\"); map.put(\\\"x\\\", \\\"X\\\");\\n\\t\\tassertEquals(map, LetterCase.mapping(new String[] {\\\"t\\\", \\\"x\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tMap<String, String> map = new LinkedHashMap<String, String>();\\n\\t\\tmap.put(\\\"a\\\", \\\"A\\\"); map.put(\\\"b\\\", \\\"B\\\");\\n\\t\\tassertEquals(map, LetterCase.mapping(new String[] {\\\"a\\\", \\\"b\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tMap<String, String> map = new LinkedHashMap<String, String>();\\n\\t\\tmap.put(\\\"p\\\", \\\"P\\\"); map.put(\\\"s\\\", \\\"S\\\");\\n\\t\\tassertEquals(map, LetterCase.mapping(new String[] {\\\"p\\\", \\\"s\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tMap<String, String> map = new LinkedHashMap<String, String>();\\n\\t\\tmap.put(\\\"u\\\", \\\"U\\\"); map.put(\\\"v\\\", \\\"V\\\");\\n\\t\\tassertEquals(map, LetterCase.mapping(new String[] {\\\"u\\\", \\\"v\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test09() { \\n\\t\\tMap<String, String> map = new LinkedHashMap<String, String>();\\n\\t\\tmap.put(\\\"s\\\", \\\"S\\\"); map.put(\\\"t\\\", \\\"T\\\");\\n\\t\\tassertEquals(map, LetterCase.mapping(new String[] {\\\"s\\\", \\\"t\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() { \\n\\t\\tMap<String, String> map = new LinkedHashMap<String, String>();\\n\\t\\tmap.put(\\\"d\\\", \\\"D\\\"); map.put(\\\"x\\\", \\\"X\\\");\\n\\t\\tassertEquals(map, LetterCase.mapping(new String[] {\\\"d\\\", \\\"x\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test11() { \\n\\t\\tMap<String, String> map = new LinkedHashMap<String, String>();\\n\\t\\tmap.put(\\\"c\\\", \\\"C\\\"); map.put(\\\"d\\\", \\\"D\\\");\\n\\t\\tassertEquals(map, LetterCase.mapping(new String[] {\\\"c\\\", \\\"d\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test12() { \\n\\t\\tMap<String, String> map = new LinkedHashMap<String, String>();\\n\\t\\tmap.put(\\\"f\\\", \\\"F\\\"); map.put(\\\"g\\\", \\\"G\\\");\\n\\t\\tassertEquals(map, LetterCase.mapping(new String[] {\\\"f\\\", \\\"g\\\"}));\\n\\t}\\n}\",\"language\":\"java\",\"quality\":0,\"summary\":\"Write a function that creates an object with each (key, value) pair being the (lower case, upper case) versions of a letter, respectively.\\n\\nExamples\\nmapping([\\\"x\\\", \\\"a\\\", \\\"v\\\", \\\"i\\\", \\\"e\\\", \\\"r\\\"]) ➞ { \\\"x\\\"=\\\"X\\\", \\\"a\\\"=\\\"A\\\", \\\"v\\\"=\\\"V\\\", \\\"i\\\"=\\\"I\\\", \\\"e\\\"=\\\"E\\\", \\\"r\\\"=\\\"R\\\" }\\n\\nmapping([\\\"t\\\", \\\"e\\\", \\\"s\\\", \\\"h\\\", \\\"a\\\"]) ➞ { t=T, e=E, s=S, h=H, a=A }\\n\\nmapping([\\\"p\\\", \\\"s\\\"]) ➞ { \\\"p\\\"=\\\"P\\\", \\\"s\\\"=\\\"S\\\" }\\n\\nmap\",\"tags\":[\"objects\",\"arrays\",\"language_fundamentals\"],\"timestamp\":{\"$date\":1605106883839},\"title\":\"Lowercase and Uppercase Map\",\"stats\":{\"completed\":{\"total\":93,\"ratings\":[2,2,2,2,2,1,3,3,2,3,2,2,2,1,3,3,2,2,3,3,1,1,0,3,1,2,3,2,3,2,1,1,1,3,1,2,3,3,1,1,1,1,2,2,1,2,0,1,1,2,2,2,3,1,2,2,3,3,1,1,1,2,1,3,3,1,0,2,2,2,2,0,2,4,0,1,3,2,1,1,1,0,1,2,2,2,2,2,2,1,1,1],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"Es4eX2stRpyoXeC7f\",\"azAzSkvJd7eyXY9x9\",\"gXTAie79kiw28tx5u\",\"yXGiiSAR5nBHnH3yr\",\"mTF6oWX2WhFR4M3QK\",\"rWhXHhzF4W8bea6LP\",\"jyoLggHk8xQKZuoQC\",\"8Xx8nWXRydHDBGfQf\",\"xHN3Hq3BrWaMXDk3L\",\"Ym8AjbKGSJooun3nt\",\"Zt9w3SiJxSE4SfzRp\",\"zbP2a97teg8aETaXu\",\"2sZrwmQcNFJG3d3HW\",\"jaFRLTYgfrnHbutk3\",\"QTi6fT3Y6z26McDv8\",\"YLwJkF2wuL3n9o6a2\",\"vRXuYYBNuHEQ29fbm\",\"utERGdwuQdshvapDR\",\"LNCb5rksJLJ43L4Nw\",\"kox9MpZ2GEXZt6hZ3\",\"Aq7wRXeG9EChyLz2z\",\"oMZovHkR6QqNvQwyc\",\"BnaE25vvCGcfL3jiQ\",\"qaPjAANdnxFnWfj5d\",\"dTFWmBaz6QaPZxSAD\",\"CggGfsERnPKGupFWp\",\"a49eNnfRwSMxsDJXf\",\"Ej8MsG44TGHQbGC6Z\",\"PurAyiBnX9qTnxhRY\",\"NdnuuFrhiBsbKJCSS\",\"J6bvitKmoYMoqWJex\",\"qZgzjHyB3Yrkah3H7\",\"xC9XKgdhp9AqDYngr\",\"wFRLGjA56kj7xyhmv\",\"9kCuFreJ7gRH5HLkF\",\"TPNpixcqTbRqJZcMc\",\"6rvJwN4mcX7iYGjY7\",\"aBv8PXQTkJR5MTw28\",\"xEX3TDY6C2h82dJTn\",\"qD839xqWEoPtQoXS7\",\"J9zJq7PMGb6mqzcHW\",\"MqurNKkZwFQzCLMe9\",\"HXbTKW3jmmyRAsKrr\",\"GttCrAdrNvAw8r3kk\",\"qWznPxKYR67b2Qt7D\",\"pXpHhwDvymcaNoZuu\",\"4XkodTpxqZq3SsJJL\",\"mR3mMy5yjh42sRWqP\",\"zdDxwRBD6vmsgBZce\",\"hSvLZyJJ83zpRgTzL\",\"PP6ohXEBxa6iBb5gs\",\"pnC8yQwsTb9Ynhnvh\",\"NxeGnKMCX3htsg4vr\",\"tiK6etT9kN6PZEBem\",\"7bi35WnrMRXZbgpL9\",\"NzachEhFbHfoBqmzS\",\"wEbS6M43EuXcESmoN\",\"t97oRGYk4BdrQSqFy\",\"mG8HqKiAQFTdRZthG\",\"htXCitorobtqYymjN\",\"C63an9zpAXoY8TG8L\",\"8b7kswLypEnXrswkw\",\"M3FuRmfxX6HG6q8Gd\",\"QwkJidQW7vvEY6TLp\",\"PciPnjemCFtD4wQS2\",\"T2vhHPhRR96hRizq8\",\"9fuhy4Tyy3wfrfdcY\",\"K4oismjKWBubnTpdd\",\"guacTZPxH6gnvG29w\",\"kdNpPEq9w8ouGXdAR\",\"DrPFLAA4Fsr7LNzm9\",\"dyhFkpNebHYrMfT9f\",\"2M6suJLmNHmr74tzu\",\"wNwFfk4beypxgvLve\",\"D92w3ab28r6xvHQJe\",\"4za87fFyw9qxkD936\",\"PJu3WcTpfRrvHfQiS\",\"vAh63eGRwkuJtoP8v\",\"sxci7DYKNa6q22Sjq\",\"KMR6vNzvSKMA2cXnK\",\"5JuFzSyvT4BN9rSnW\",\"unqzSsxpxj9sZ7rbD\",\"LichsAGsvYpg6PMNA\",\"FxPDKKibxnZjGJLs6\",\"uw47663LqPME8btaA\",\"nFbmNzMQ38TncmfQX\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"FhsLkzfbEgb4TiJXA\",\"language\":\"java\"},{\"_id\":\"5Yt2CrYdrJvoJFHRt\",\"language\":\"javascript\"},{\"_id\":\"pimnBHXJNtQffq4Cf\",\"language\":\"python3\"},{\"_id\":\"XC2ookBSjEzAYP5t7\",\"language\":\"ruby\"}]}}"]