a["{\"msg\":\"result\",\"id\":\"362\",\"result\":{\"_id\":\"tgjFboGwDEHY4Wn5S\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"public class Challenge {\\n\\tpublic static String accum(String str) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":1.4972375690607735,\"familyId\":\"FqjWqqW8pL8wwE9KJ\",\"instructions\":\"Create a function that takes a string and returns a new string with each new character accumulating by +1. Separate each set with a dash.\\n\\n### Examples\\n```\\naccum(\\\"abcd\\\") ➞ \\\"A-Bb-Ccc-Dddd\\\"\\n\\naccum(\\\"RqaEzty\\\") ➞ \\\"R-Qq-Aaa-Eeee-Zzzzz-Tttttt-Yyyyyyy\\\"\\n\\naccum(\\\"cwAt\\\") ➞ \\\"C-Ww-Aaa-Tttt\\\"\\n```\\n\\n### Notes\\n- Capitalize the first letter of each set.\\n- All tests contain valid strings with alphabetic characters (a-z, A-Z).\",\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n\\t@Test \\n\\tpublic void test1() {\\n\\t\\tassertEquals(\\\"A-Bb-Ccc-Dddd\\\", Challenge.accum(\\\"abcd\\\"));\\n\\t}\\n\\t\\n\\t@Test \\n\\tpublic void test2() {\\n\\t\\tassertEquals(\\\"R-Qq-Aaa-Eeee-Zzzzz-Tttttt-Yyyyyyy\\\", Challenge.accum(\\\"RqaEzty\\\"));\\n\\t}\\n\\t\\n\\t@Test \\n\\tpublic void test3() {\\n\\t\\tassertEquals(\\\"C-Ww-Aaa-Tttt\\\", Challenge.accum(\\\"cwAt\\\"));\\n\\t}\\n\\t\\n\\t@Test \\n\\tpublic void test4() {\\n\\t\\tassertEquals(\\\"V-Gg-Yyy-Cccc-Ddddd-Nnnnnn-Qqqqqqq-Aaaaaaaa\\\", Challenge.accum(\\\"VgyCdnQa\\\"));\\n\\t}\\n\\t\\n\\t@Test \\n\\tpublic void test5() {\\n\\t\\tassertEquals(\\\"N-Rr-Bbb-Ssss-Ddddd-Nnnnnn-Ooooooo-Ssssssss-Mmmmmmmmm-Llllllllll\\\", Challenge.accum(\\\"nRBSdNOsMl\\\"));\\n\\t}\\n\\t\\n\\t@Test \\n\\tpublic void test6() {\\n\\t\\tassertEquals(\\\"N-Uu-Eee\\\", Challenge.accum(\\\"nuE\\\"));\\n\\t}\\n\\t\\n\\t@Test \\n\\tpublic void test7() {\\n\\t\\tassertEquals(\\\"R-Ll-Ddd-Rrrr-Hhhhh-Zzzzzz-Uuuuuuu-Qqqqqqqq-Aaaaaaaaa-Qqqqqqqqqq-Sssssssssss-Oooooooooooo-Hhhhhhhhhhhhh-Eeeeeeeeeeeeee-Fffffffffffffff-Zzzzzzzzzzzzzzzz-Iiiiiiiiiiiiiiiii-Bbbbbbbbbbbbbbbbbb-Yyyyyyyyyyyyyyyyyyy-Oooooooooooooooooooo-Bbbbbbbbbbbbbbbbbbbbb-Tttttttttttttttttttttt-Mmmmmmmmmmmmmmmmmmmmmmm-Xxxxxxxxxxxxxxxxxxxxxxxx-Kkkkkkkkkkkkkkkkkkkkkkkkk-Ffffffffffffffffffffffffff-Ccccccccccccccccccccccccccc-Jjjjjjjjjjjjjjjjjjjjjjjjjjjj-Vvvvvvvvvvvvvvvvvvvvvvvvvvvvv-Eeeeeeeeeeeeeeeeeeeeeeeeeeeeee\\\", Challenge.accum(\\\"RlDrhZuQaqsoHEfziByObtMxkFCJVe\\\"));\\n\\t}\\n\\t\\n\\t@Test \\n\\tpublic void test8() {\\n\\t\\tassertEquals(\\\"E-Xx-Ppp-Zzzz-Ppppp-Ffffff-Xxxxxxx\\\", Challenge.accum(\\\"EXpzPFx\\\"));\\n\\t}\\n\\t\\n\\t@Test \\n\\tpublic void test9() {\\n\\t\\tassertEquals(\\\"N-Uu\\\", Challenge.accum(\\\"NU\\\"));\\n\\t}\\n\\t\\n\\t@Test \\n\\tpublic void test10() {\\n\\t\\tassertEquals(\\\"G\\\", Challenge.accum(\\\"g\\\"));\\n\\t}\\n}\",\"language\":\"java\",\"summary\":\"Create a function that takes a string and returns a new string with each new character accumulating by +1. Separate each set with a dash.\\n\\nExamples\\naccum(\\\"abcd\\\") ➞ \\\"A-Bb-Ccc-Dddd\\\"\\n\\naccum(\\\"RqaEzty\\\") ➞ \\\"R-Qq-Aaa-Eeee-Zzzzz-Tttttt-Yyyyyyy\\\"\\n\\naccum(\\\"cwAt\\\") ➞ \\\"C-Ww-Aaa-Tttt\\\"\\n\\nNotes\\nCapitalize the first letter of each set.\\nAll tests contain valid strings with alphabe\",\"tags\":[\"strings\",\"formatting\",\"loops\"],\"timestamp\":{\"$date\":1555128984801},\"title\":\"Compounding Letters\",\"stats\":{\"completed\":{\"total\":211,\"ratings\":[1,1,1,1,1,1,1,1,1,1,2,0,0,1,2,2,1,1,1,1,0,0,1,1,1,0,2,2,2,2,1,2,1,0,1,1,1,1,1,3,1,0,2,1,0,1,1,2,1,0,2,1,2,3,2,2,2,1,3,0,3,2,2,3,2,2,1,2,1,3,0,1,2,0,1,2,1,1,2,2,2,2,1,2,2,3,2,1,1,2,2,2,2,2,1,2,2,2,3,2,2,2,2,2,1,1,2,1,2,2,0,2,0,1,1,2,2,2,1,3,2,2,2,1,1,1,1,2,2,2,1,2,2,0,0,2,2,2,0,1,1,2,1,2,1,2,2,0,2,2,2,2,2,2,1,2,2,0,0,2,2,2,2,2,1,2,3,2,2,1,1,2,2,2,2,2,2,2,2,2,2],\"rators\":[\"mNMQvcxKSSvqqMYCH\",\"u437YTqDGSjh49fsY\",\"yJyjT7Z2PPQmzzWpP\",\"erJWHqarGkGtPJ3C4\",\"34rKGZYu7vEdoCu7d\",\"vjh7xAmbYZoaYWeRL\",\"DX2QDCxPNcGQreEgp\",\"5znpaFDoToJtAtF3h\",\"vew4EJaM4jGBsvnTp\",\"T6j7qdvD37y8DLKzT\",\"ydos8Ba8nZdYRNJpS\",\"QS5RGoPnapStFD5Gi\",\"kkzm6azmuRYvjJfSr\",\"CDkkdvDdqjDihTcFS\",\"veu3fKkK2DSkKTkb2\",\"cp3X8hk8yNME7qoD9\",\"JSSLvJPs8JebyfeS9\",\"yhk8G8cM3p9JAbfJN\",\"WAMxBrgasiphg5QPL\",\"ZzwR8m8Q6Gozo9ofz\",\"qGFqqzbwxiz7kZkPW\",\"a49eNnfRwSMxsDJXf\",\"LTHCxsdjqzXpaXShT\",\"aMNhTh35QQAs33ycQ\",\"3pdgguqZgNDSAJSGm\",\"9c8n7ti5vCjTRgiGN\",\"3KyZcHpTtp3ETCocW\",\"knL2G536WWm6WLCm9\",\"Yohr2MmAyaWGMbB35\",\"sxci7DYKNa6q22Sjq\",\"BmMRJyvQYJtJqGY67\",\"t2kdBPj9qQAXY2Ehd\",\"3gxJoNp59B4eoyyed\",\"Ha5J49rhojBRy3BaM\",\"8rF6PHMSaybTDsvXr\",\"sb7Nh56pPFtPxLogT\",\"phA6MomRzh9oz3eqn\",\"Eqt2WZ9iPdhM6Ma9Q\",\"viQwZYpKbEFmfjpTe\",\"79ZbLzp7xepvkonoh\",\"yazNfwgLx7jSAZ8Tv\",\"teCeoNkdeQEciPZ7H\",\"C46EBHSd4KE57qyei\",\"WPWBKqdkzkeGpgFR2\",\"CLmJduqJHX83dM4Pd\",\"3KjxQu9RZ8ZSywvLz\",\"8JyqsSbN2FJXPr3cw\",\"u4yanfWeeZsN3xWgc\",\"J9zJq7PMGb6mqzcHW\",\"C9yBWYcZsjmJYww3K\",\"EBbbT65WmapJa59Cr\",\"AyrEvM2GLX2jqM772\",\"r9hHZYPQAqJ9DbwLX\",\"eZjHwgBfkQPCxmutr\",\"ggRcNtx4xeRC2jmbZ\",\"qEGfmqbNLrs2Qrva8\",\"vuMBgKQRnA4HsuWjR\",\"n8jm3w32BSJW8GMBp\",\"2cdvd8yuPLSwvGj9w\",\"gBGjCfJvPHswDM5JQ\",\"x9A83cZkyA7E7utn3\",\"MJMEESuirNXM2diop\",\"dm4ki3fhfE52M3AJL\",\"GXDR2MbzEL5aQEk6d\",\"8J2Dqqz9PaFufQzwY\",\"DWcYJLDitAyRc6KXy\",\"Zk4jvK2nkvnhpzoLR\",\"D9tfoBpEAnP7BSDZb\",\"cdcYSPc8rGJZrMnfS\",\"qb2DTmzQj4vNfq5K7\",\"qx9XHErKygcLiFGhX\",\"DHpJ7aLaPzHBJzN3z\",\"J67hC7LSEYS5JwhPj\",\"RJCTFJ9rdPrJQqxQT\",\"awiewYXm9GR6zsqhp\",\"eXW8reZCCZHQzJjQi\",\"TxD5qx2hqQa6pixAP\",\"dq4BrC2PGLuisiT9J\",\"yK7zzK2aGJwuWKHRL\",\"rWhXHhzF4W8bea6LP\",\"jDuY4gx4aJRp8SHbm\",\"fZky27mpbfX7soJKa\",\"cfi8jhhSJ3Nq2gvqf\",\"B44GPum6opvNWXxCL\",\"DkrRKbukuPjeMndgx\",\"wYYMNPe8nSiJFbvJw\",\"t9qQ5fTsTdPYNCw5f\",\"5SrzBHvDWd6CyZZ8Q\",\"4RHx3H8EwP2oboW8e\",\"PqAepaMciyBb7QQRK\",\"TuDy7apLgWD8aQA9s\",\"ePzmFoJvWZQ8MoNGg\",\"Pbr5qNbq87R82ZCyd\",\"Es4eX2stRpyoXeC7f\",\"EZNT8B7yQnnZmuwCf\",\"cjxsqXfkAPoadmppi\",\"NsQ8qYQQ47gSPtQkK\",\"wbSLghDxkTjiYJrEH\",\"jRqY4i8gPemsZMBGf\",\"gGnDsJz5hr2t9MKCF\",\"JFodQijHHdRkkrZvT\",\"mdEQJ2fmGmkbhbvNw\",\"Kso7rzAKB4TTCPKgM\",\"fZjkX29nhRTWWb75k\",\"hB5mgzMwQSnhBzi7P\",\"YLwJkF2wuL3n9o6a2\",\"5seiNqw6ZXoF2GRRd\",\"TrquEHytntLKHA4m2\",\"jyoLggHk8xQKZuoQC\",\"jDTGwryGygbZiqCEg\",\"8zZ6xmzpiFair25qr\",\"Wf7nCHS4Gq5tx659h\",\"uYv96ZSpA7tBHoAGX\",\"mfm3gB39arY8Rjb2y\",\"WZujpe8yQAyZmpWHg\",\"etoSR23iELGGgs9rA\",\"meS77LKqRswhF5LAy\",\"Yp7uvStL97cC9fKkY\",\"y6kfyYmydcD8tkBk7\",\"rvojHhKH3DaxotefQ\",\"DzvdGwHEjqsX7wyKr\",\"B4pxRqzo43M7S8FbP\",\"dpJTai3i9aNkCS3sa\",\"q2tzvkrLASvSjkek9\",\"zwruFCmuHkwJTpYqg\",\"g4NCSxxHqHCGMpWwT\",\"Jhwj7GipgLc42iWc4\",\"PytNZK9mNiRiZxPrm\",\"Yom3RzkMYpweE8cbS\",\"Fd9765rksgPK4E2Zy\",\"6kz7jjJS8W4tikYQT\",\"muXMnzQwGLzN6j2Jr\",\"LHYDvisy4Brk4mQ5c\",\"YFHkjbM6obMSj24zi\",\"yXGiiSAR5nBHnH3yr\",\"AeJSxRqw2dJZuGvdk\",\"zTEKMLMevG8xfxEj6\",\"jb9RLyyuo565bKDzN\",\"gXTAie79kiw28tx5u\",\"Qb45Di9b6tvejFpQK\",\"Rn5YNvYdY468a7vRp\",\"Eog3hCNjLgjsAGTCG\",\"QJWWgtwpAXay452XH\",\"oMfq73A434YWhSuWQ\",\"mG8HqKiAQFTdRZthG\",\"8Xx8nWXRydHDBGfQf\",\"jXTnL3JatkKjoifyb\",\"P5BhjZxyeHQYTNyB9\",\"yd5PakB2z33q2JrTZ\",\"BbcH2NLjE4tKAZ3wR\",\"dcW9oK2uRo8h8mBe2\",\"tyLS9T6YMfg9fMtYJ\",\"mQKWauR6b252TmdX4\",\"qJ2TgHitgMYZRTZ5d\",\"W56bWmpQeLJ9JEDsa\",\"hD6sfDtntpqT8NR2o\",\"iZHowotDLiZumkTqy\",\"GkYtSbQuheBF4Enys\",\"bur3yQ8s34zqKGEro\",\"wB47dmNBe3aFZZcFr\",\"buX4mCQhtXCfBjeno\",\"QRv96jmNaYsWkxQEG\",\"zZfMwLuoERGmybgib\",\"mDWNyaaQ9hvPCRzSd\",\"DkSMZ3jZLkwviKb9g\",\"hhxjQREtmHSheH9Pj\",\"4ySzqKC5s3ZRpG9di\",\"Ag5fRrZ9MrAZc9vpj\",\"btabi3PdyisuY5tn9\",\"QjozPpjcpLH5GoEpe\",\"wFRLGjA56kj7xyhmv\",\"dik7wis3hBJJBkYwK\",\"EetxPkmqnwP8J2u5D\",\"HsFc9PgmpP2X9Fwh9\",\"76xn8zYtuNeTf9c5m\",\"rhS8qXRjZcpDXkwnE\",\"YwGRwStQygfi4saS6\",\"563onSvqgjToY79ah\",\"TQaf5YLAgRvdCQwxD\",\"srJ34BaybkQh3qRkM\",\"jCjCvyhqhpebkJn34\",\"J7epB3qSQJ2E8vWkY\",\"RsujLHaML6L3KinzK\",\"KMR6vNzvSKMA2cXnK\",\"SxWfaNpkxLLcSuZFk\",\"AeSmk2XWGcTLHB7PJ\",\"fYhKdTWndeZpmcKoz\",\"unqzSsxpxj9sZ7rbD\",\"FxPDKKibxnZjGJLs6\",\"uw47663LqPME8btaA\",\"XH6378Zm3WBm679yx\",\"nFbmNzMQ38TncmfQX\"],\"quality\":[4,5,5,5,5,5,4,5,5,5,5,5,5,4,5,5,3,5,5,5]},\"tests\":{\"score\":0,\"rators\":[\"mNMQvcxKSSvqqMYCH\"]},\"instructions\":{\"score\":0,\"rators\":[\"mNMQvcxKSSvqqMYCH\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.75,\"family\":[{\"_id\":\"N3aszm3rXg4eQJPH4\",\"language\":\"cpp\"},{\"_id\":\"djCa8yiv5kYPhvcAZ\",\"language\":\"csharp\"},{\"_id\":\"tgjFboGwDEHY4Wn5S\",\"language\":\"java\"},{\"_id\":\"aThG46eyi9LhGdTFY\",\"language\":\"javascript\"},{\"_id\":\"zu5ZHaPQiKwMBz3xP\",\"language\":\"php\"},{\"_id\":\"FJk4mJwRk2TYZhkeQ\",\"language\":\"python3\"},{\"_id\":\"Esm68rQghErX2Ej7g\",\"language\":\"ruby\"},{\"_id\":\"Zz6Ya6vhB89nyWGLd\",\"language\":\"swift\"}]}}"]