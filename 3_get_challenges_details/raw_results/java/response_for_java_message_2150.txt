a["{\"msg\":\"result\",\"id\":\"633\",\"result\":{\"_id\":\"dPeRoAK4HDhQfuk4n\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class TreePhotography {\\n  public static String photograph(int[] trees) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":2.2777777777777777,\"familyId\":\"8qSc4nvgjuszG7sHS\",\"instructions\":\"Heading off to the **Tree Arboretum of Various Heights**, I bring along my camera to snap up a few photos. Ideally, I'd want to take a picture of as many trees as possible, but the taller trees may cover up the shorter trees behind it.\\n\\nA tree is hidden if it is **shorter** or the **same height** as the tree in front.\\n\\nGiven an array of tree heights, create a function which returns `\\\"left\\\"` or `\\\"right\\\"`, depending on which side allows me to see as many trees as possible.\\n\\n### Worked Example\\n```\\nphotograph([1, 3, 6, 5]) ➞ \\\"left\\\"\\n// If I stand on the left, I can see trees of heights 1, 3 and 6.\\n// If I stand on the right, I can see trees of heights 5 and 6.\\n// Return \\\"left\\\" because I would see more trees.\\n```\\n\\n### Examples\\n```\\nphotograph([5, 6, 5, 4]) ➞ \\\"right\\\"\\n\\nphotograph([1, 2, 3, 3, 3, 3, 3]) ➞ \\\"left\\\"\\n\\nphotograph([3, 1, 4, 1, 5, 9, 2, 6]) ➞ \\\"left\\\"\\n```\\n\\n### Notes\\nThere will always be a best side.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"/** \\n====================================== \\nTestGen 2.3 for JUnit 4.13.0 \\t\\t\\nTest Case: TreePhotography::photograph \\nTimestamp: 11/16/2020 12:39:32 AM \\n-------------------------------------- \\n® DARKKO 2020 ©\\n======================================\\n**/ \\n\\nimport static org.junit.Assert.assertEquals; \\nimport org.junit.Test; \\n\\npublic class TreePhotographyTest {\\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertEquals(\\\"left\\\", TreePhotography.photograph(new int[] {1, 2, 3, 6, 5}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertEquals(\\\"right\\\", TreePhotography.photograph(new int[] {5, 6, 5, 4}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertEquals(\\\"left\\\", TreePhotography.photograph(new int[] {1, 1, 2, 2, 2, 2, 3}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertEquals(\\\"left\\\", TreePhotography.photograph(new int[] {1, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertEquals(\\\"right\\\", TreePhotography.photograph(new int[] {3, 3, 3, 3, 2}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertEquals(\\\"right\\\", TreePhotography.photograph(new int[] {4, 3, 2, 3, 3, 3, 1}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertEquals(\\\"left\\\", TreePhotography.photograph(new int[] {3, 1, 4, 5, 2, 5, 1}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertEquals(\\\"right\\\", TreePhotography.photograph(new int[] {4, 3, 3, 4, 3, 1, 3}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test09() { \\n\\t\\tassertEquals(\\\"right\\\", TreePhotography.photograph(new int[] {5, 1, 2}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() { \\n\\t\\tassertEquals(\\\"left\\\", TreePhotography.photograph(new int[] {1, 2, 4, 1, 5, 3, 1}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test11() { \\n\\t\\tassertEquals(\\\"left\\\", TreePhotography.photograph(new int[] {1, 1, 1, 4, 1, 3, 5}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test12() { \\n\\t\\tassertEquals(\\\"left\\\", TreePhotography.photograph(new int[] {3, 1, 4, 1, 5, 9, 2, 6}));\\n\\t}\\n}\",\"language\":\"java\",\"quality\":0,\"summary\":\"Heading off to the Tree Arboretum of Various Heights, I bring along my camera to snap up a few photos. Ideally, I'd want to take a picture of as many trees as possible, but the taller trees may cover up the shorter trees behind it.\\n\\nA tree is hidden if it is shorter or the same height as the tree in front.\\n\\nGiven an array of tree heights, create a function whi\",\"tags\":[\"algorithms\",\"loops\",\"arrays\",\"numbers\"],\"timestamp\":{\"$date\":1605459208441},\"title\":\"Tree Photography\",\"stats\":{\"completed\":{\"total\":15,\"ratings\":[2,2,2,2,2,3,3,2,3,2,3,2,3,1,2,2,3,2],\"quality\":[],\"rators\":[\"Es4eX2stRpyoXeC7f\",\"a777e8chPvJkY3tKa\",\"gXTAie79kiw28tx5u\",\"azAzSkvJd7eyXY9x9\",\"iq55QasecYJXKz8rx\",\"jyoLggHk8xQKZuoQC\",\"rhS8qXRjZcpDXkwnE\",\"qaPjAANdnxFnWfj5d\",\"nfs7YZayhCypa3FXQ\",\"2NJZbusRvu3eJ4tHu\",\"xW9nC9h6p77YT2iso\",\"KMR6vNzvSKMA2cXnK\",\"sxci7DYKNa6q22Sjq\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"bP8EmyKykWRkB3mmh\",\"language\":\"cpp\"},{\"_id\":\"dPeRoAK4HDhQfuk4n\",\"language\":\"java\"},{\"_id\":\"DgePuRy7ESRht5qz6\",\"language\":\"javascript\"},{\"_id\":\"BFEvGzLwewCn558ZT\",\"language\":\"python3\"},{\"_id\":\"F6oBRYPx4a78bwSrh\",\"language\":\"ruby\"}]}}"]