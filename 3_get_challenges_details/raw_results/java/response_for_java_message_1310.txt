a["{\"msg\":\"result\",\"id\":\"214\",\"result\":{\"_id\":\"2eWypgBrG9yerbjFd\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class GoneCorona {\\n\\tpublic static int endCorona(int recovers, int newCases, int activeCases) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":1.1015625,\"familyId\":\"mvJ2wxCkFkebkXFfX\",\"instructions\":\"Given the number of people that recover per day `recovers`, the number of new cases per day `newCases`, and the number of currently active cases `activeCases`, write a function to calculate the number of **days** needed to reach zero active cases.\\n\\n### Examples\\n```\\nendCorona(4000, 2000, 77000) ➞ 39\\n\\nendCorona(3000, 2000, 50699) ➞ 51\\n\\nendCorona(30000, 25000, 390205) ➞ 79\\n```\\n\\n### Notes\\n- The number of people who recover per day `recovers` will always be greater than daily `newCases`.\\n- Be conservative and round up the number of days needed.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"import static org.junit.Assert.assertEquals;\\nimport org.junit.Test;\\n\\npublic class GoneCoronaTests {\\n\\t@Test\\n\\tpublic void test01() {\\n\\t\\tassertEquals(39, GoneCorona.endCorona(4000, 2000, 77000));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test02() {\\n\\t\\tassertEquals(51, GoneCorona.endCorona(3000, 2000, 50699));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test03() {\\n\\t\\tassertEquals(79, GoneCorona.endCorona(30000, 25000, 390205));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test04() {\\n\\t\\tassertEquals(4103, GoneCorona.endCorona(260000, 255000, 20511691));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test05() {\\n\\t\\tassertEquals(233, GoneCorona.endCorona(334, 231, 23954));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test06() {\\n\\t\\tassertEquals(103, GoneCorona.endCorona(487, 256, 23793));\\n\\t}\\n}\",\"language\":\"java\",\"quality\":4.476923076923077,\"summary\":\"Create a function that takes the number of daily average recovered cases recovers, daily average newCases, current activeCases,  and returns the number of days it will take to reach zero cases.\\n\\nExamples\\nendCorona(4000, 2000, 77000) ➞ 39\\n\\nendCorona(3000, 2000, 50699) ➞ 51\\n\\nendCorona(30000, 25000, 390205) ➞ 79\\n\\nNotes\\nDaily recovered cases are always greater tha\",\"tags\":[\"numbers\",\"math\"],\"timestamp\":{\"$date\":1603488076171},\"title\":\"End Corona!\",\"stats\":{\"completed\":{\"total\":197,\"ratings\":[1,1,1,1,1,0,1,0,1,1,0,0,1,2,2,2,1,1,1,2,1,1,1,2,1,1,2,1,1,1,1,0,0,2,0,2,3,0,1,1,1,1,1,2,1,0,1,1,1,1,1,2,2,0,2,1,2,4,1,0,1,1,1,2,0,1,2,0,1,3,1,2,0,1,1,1,1,0,1,0,1,2,2,0,2,1,1,1,3,1,1,1,2,1,2,0,1,1,1,1,0,0,1,1,1,1,2,2,0,1,1,1,2,1,2,1,1,1,1,1,1,2,0,2,1,0,1,1],\"quality\":[5,4,5,5,3,4,1,4,3,4,5,4,5,5,4,5,3,3,5,4,5,5,5,5,5,5,5,5,5,5,1,5,4,5,5,5,4,5,5,5,4,5,5,5,3,4,5,5,5,5,5,5,5,3,5,5,5,5,5,5,5,5,4,5,3],\"rators\":[\"a777e8chPvJkY3tKa\",\"cJmmvnmJSXvBXtydi\",\"cueHAmTrcWuowXf58\",\"aDGtMfpmYW2RAbimn\",\"Es4eX2stRpyoXeC7f\",\"AeJSxRqw2dJZuGvdk\",\"7gBLtxKryhTryH5zb\",\"hhxjQREtmHSheH9Pj\",\"jXTnL3JatkKjoifyb\",\"fEyo577DvG6E3Gdeg\",\"C9yBWYcZsjmJYww3K\",\"NdLzb3BZ5J8ftnCkS\",\"QgdHrG97tLDkwfGKk\",\"hPsKex7yhvKyu3qSR\",\"fdgaaD4Ec9n9HbfQ5\",\"N3HLmYG9RSbwEbnv8\",\"W3utHzNqajB3LGKDC\",\"GJ2EZBh34pMwjNANw\",\"NaDMQBBLc2cjSPejG\",\"zTEKMLMevG8xfxEj6\",\"GPHWiGTpSapGCN5tv\",\"9PkZRtHNhzYNPcZuF\",\"jb9RLyyuo565bKDzN\",\"thA79neuEcM3J8ZHr\",\"66AfbqGGg8oz7WWs7\",\"P5BhjZxyeHQYTNyB9\",\"DThzC6wa6przzyBJ2\",\"a5Y8ZA5qq2eupPK65\",\"qWEz8tGrQeTexjyxA\",\"hKXdFwrcGY3kTX22j\",\"Xtozcw6AgdBbvuhbM\",\"sqi58Mrw5wZnkQWsB\",\"mG8HqKiAQFTdRZthG\",\"DkSMZ3jZLkwviKb9g\",\"2WWDDLRAJFMkFfzxC\",\"gXTAie79kiw28tx5u\",\"MJCypveAX88aKKoee\",\"44arJN5SYx3HyfetA\",\"PmfzvaX5ZJscpvHXc\",\"9fKpptgjg6ewGTstJ\",\"QKwzvqWHTffHsNPu6\",\"9amCEoE43AdSneJZ7\",\"2TzcNZhhRBshFBwj8\",\"yuAHgMXRcbo2qBwEY\",\"sS9NCRPPntsscnGvm\",\"XEL4JKFMcP5J684wW\",\"QRWdqFpjPr4etPwdi\",\"wWQeqN3yeyS26twni\",\"AYumLbifXQtQ6knE3\",\"JRD5cJaNshqobb7eS\",\"tLBs5FrSpBb2dRZyY\",\"rWhXHhzF4W8bea6LP\",\"joeAZ7wtzYWRMitWC\",\"A7jCWrFZzCATJ3Qgm\",\"hab8YixsXxe4CcZpP\",\"8Xx8nWXRydHDBGfQf\",\"b5doRyKagDgvie2Hd\",\"aXZmHeKdos7oprdK9\",\"JszPst3958te56jFk\",\"qrMJvG3Jfs2BCQ7af\",\"n4WMs2BHoBQ8xnhJP\",\"96tdmeKexMH52YBjP\",\"5TaPWyRv9DZWWodp8\",\"zTM2NbjE6q5Q2HSeF\",\"ytPP5DYuxAJgEX9Qu\",\"p2woPCQKXuWJCwffJ\",\"pwhZRJxqCK6kBgSNP\",\"rpT4yk325mhaXpdsx\",\"HLiyvdhyuwc6odWjw\",\"oMfq73A434YWhSuWQ\",\"u3SF4o7sjWKgMenxF\",\"47PyFbZyxWuP9Bgga\",\"2ptN2mhjFwFcHyPZd\",\"g26rSzN36ZGtEb6XZ\",\"pmYZwGmiYottRD6Hj\",\"exCM3pZmCuyigBjMC\",\"2ywkE3AXaETetgc8Y\",\"EGiEQjn2ca8GHvPRo\",\"E6sTTpF5nYpyfuTrM\",\"CfiPwHjHKzu4GFE8T\",\"cZvbubyzAwa4FgqKf\",\"gBGjCfJvPHswDM5JQ\",\"unNqQjSHzkb4pCzEu\",\"KCEsMas5BbmiD2Q9K\",\"PtvbJPhLbEx9AvpcD\",\"j4jF6TNAz6dQXALrb\",\"79Wo8iNbhEr7BvrNE\",\"bvLzvQWvTqBLYGNji\",\"Ym8AjbKGSJooun3nt\",\"rvojHhKH3DaxotefQ\",\"J7epB3qSQJ2E8vWkY\",\"ikxSkiQjCjYPsFwMT\",\"BWqQ68pvNedARDcBN\",\"eyvHBQ3fpSHwKniZP\",\"xv5obFhsxY93mqR5S\",\"NQ4btGLfcvAnXjAyP\",\"8wkQj36S6ZCH5u8d3\",\"pi76g3eRpnKrhee2a\",\"hDeaTsprkH6CmvSAR\",\"mQKWauR6b252TmdX4\",\"aHqxyQCEtWZgczYEv\",\"Yohr2MmAyaWGMbB35\",\"8paynGt66tAKJivFF\",\"jyoLggHk8xQKZuoQC\",\"CNc6rmwhbxkxEhHAp\",\"uNK8tLSseShR8wcA4\",\"zE46SymvixkeFJmPM\",\"zZJnquegZvRuvFvep\",\"mYtKxYPbLLnePeJH3\",\"DzvdGwHEjqsX7wyKr\",\"fRYcPHuyEdqngMzC4\",\"W56bWmpQeLJ9JEDsa\",\"EKQoY9xP6kHpLSye5\",\"T6iBEE2jp7f7iEF2P\",\"5jDgvkGd4JwatrYXg\",\"m8RTLuXqmythXHYZt\",\"YL4rQWKadY7sGGtGG\",\"bWWFscsAr66ZWHo28\",\"LrgQT4bdiLbHrprXu\",\"Yj7ftjzyP67R5NFrH\",\"a49eNnfRwSMxsDJXf\",\"2cdvd8yuPLSwvGj9w\",\"LCuvvWMwiGuqTwNRi\",\"PJu3WcTpfRrvHfQiS\",\"Wi4H6ayKsNDWWQCG5\",\"3SgSNoAB3sxaYeT3w\",\"E2hpke7mHxAWsw5t9\",\"f3RAbWvE6uESq7KE5\",\"kuxkd9Rj2ejfusa7G\",\"GkYtSbQuheBF4Enys\",\"QRv96jmNaYsWkxQEG\",\"btabi3PdyisuY5tn9\",\"HnaGDC2MN2AzovR8j\",\"ZMd8it647JSYTvx8Z\",\"cwwW2amYGZMkYwAxM\",\"uFfEio8nzDvL8emhp\",\"buX4mCQhtXCfBjeno\",\"wB47dmNBe3aFZZcFr\",\"zZfMwLuoERGmybgib\",\"hPx9H3YM8j2k94DNW\",\"empr8WRHyaBnp9bSs\",\"yb8T3nuL4evaeJW6k\",\"eQXwk5zGckM8tCWYH\",\"8qNSPHZBpmjSTt3tH\",\"HvMW5y8Sa6e6Q2M7o\",\"a6fgDQTddtZCKfnzR\",\"d7PjwEf5Ff8W5eD64\",\"gKgcMDX84AThJ9rAE\",\"tdinF6MRzC6AdNX8g\",\"HXbTKW3jmmyRAsKrr\",\"sxci7DYKNa6q22Sjq\",\"rhS8qXRjZcpDXkwnE\",\"pYonfGP4u9HNL9Z32\",\"5LDvZHCDJqePeBrCg\",\"9RJpt5ec2KMLuac4w\",\"wrKqfRcDJNGSxFK6p\",\"zTtKiCbLWzaf2Yjo4\",\"uw47663LqPME8btaA\",\"Qv2jEtTnFCXX7cdd3\",\"srJ34BaybkQh3qRkM\",\"jCjCvyhqhpebkJn34\",\"cR3ibTMxLyEdDFCHY\",\"uiNKqQKw6TzB3kAju\",\"nSLvkGEpiYCtcBLaa\",\"wFRLGjA56kj7xyhmv\",\"wTc283wowqsFisKNC\",\"htXCitorobtqYymjN\",\"Wuqu3gekPrAqMiMHa\",\"B4pxRqzo43M7S8FbP\",\"2mTYrwqEabB4NHPCY\",\"KMR6vNzvSKMA2cXnK\",\"RsujLHaML6L3KinzK\",\"PPdaczxSt2u5cmZYG\",\"t55QWHi8o4teZxqqE\",\"dCNJAT6r8CDuobBi8\",\"SxDHr6m8jxgJLvvQ4\",\"FNYPC36yqPmTKDaqR\",\"5HGyJtoZ3AffzAZAv\",\"XH6378Zm3WBm679yx\",\"unqzSsxpxj9sZ7rbD\",\"ckQwFFWyLXmDQAaCn\",\"FxPDKKibxnZjGJLs6\",\"k2dZDM6zhcF7qB5C8\",\"8Rau64SCERgjtFbFM\",\"H3XLNCWB5yXt5YYXn\",\"r72oFMcCQh4rBsKHb\",\"nFbmNzMQ38TncmfQX\",\"3Gf7ikLijfoxabiPY\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"i7AmWM4SHE6GBAEoT\",\"language\":\"cpp\"},{\"_id\":\"2eWypgBrG9yerbjFd\",\"language\":\"java\"},{\"_id\":\"zJserqaeu9cM9Qjib\",\"language\":\"javascript\"},{\"_id\":\"D83xzKWJe379Eu9Qk\",\"language\":\"php\"},{\"_id\":\"uKPc5faEzQkMwLYPP\",\"language\":\"python3\"},{\"_id\":\"jaQupuynwTpAY2fSf\",\"language\":\"ruby\"},{\"_id\":\"mwLxQRTNop63v4qW6\",\"language\":\"swift\"}]}}"]