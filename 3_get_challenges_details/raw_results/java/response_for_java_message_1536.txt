a["{\"msg\":\"result\",\"id\":\"326\",\"result\":{\"_id\":\"9zBJYnBekqAo52zEp\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"public class Challenge {\\n  public static boolean isValidHexCode(String str) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":1.4776119402985075,\"familyId\":\"RxbrPHagQmyrWssuK\",\"instructions\":\"Create a function that determines whether a string is a valid hex code.\\n\\nA hex code must begin with a pound key `#` and is exactly 6 characters in length. Each character must be a digit from `0-9` or an alphabetic character from `A-F`. All alphabetic characters may be uppercase or lowercase.\\n\\n### Examples\\n```\\nisValidHexCode(\\\"#CD5C5C\\\") ➞ true\\n\\nisValidHexCode(\\\"#EAECEE\\\") ➞ true\\n\\nisValidHexCode(\\\"#eaecee\\\") ➞ true\\n\\nisValidHexCode(\\\"#CD5C58C\\\") ➞ false\\n// Length exceeds 6\\n\\nisValidHexCode(\\\"#CD5C5Z\\\") ➞ false\\n// Not all alphabetic characters in A-F\\n\\nisValidHexCode(\\\"#CD5C&C\\\") ➞ false\\n// Contains unacceptable character\\n\\nisValidHexCode(\\\"CD5C5C\\\") ➞ false\\n// Missing #\\n```\\n\\n### Notes\\nN/A\",\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n  @Test\\n  public void test1() {\\n    assertEquals(true, Challenge.isValidHexCode(\\\"#CD5C5C\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test2() {\\n    assertEquals(true, Challenge.isValidHexCode(\\\"#EAECEE\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test3() {\\n    assertEquals(true, Challenge.isValidHexCode(\\\"#eaecee\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test4() {\\n\\t\\tSystem.out.println(\\\"Length exceeds 6.\\\");\\n    assertEquals(false, Challenge.isValidHexCode(\\\"#CD5C58C\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test5() {\\n\\t\\tSystem.out.println(\\\"Alphabetic characters not in A-F.\\\");\\n    assertEquals(false, Challenge.isValidHexCode(\\\"#CD5C5Z\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test6() {\\n\\t\\tSystem.out.println(\\\"Unacceptable character.\\\");\\n    assertEquals(false, Challenge.isValidHexCode(\\\"#CD5C&C\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test7() {\\n\\t\\tSystem.out.println(\\\"Does not start with #.\\\");\\n    assertEquals(false, Challenge.isValidHexCode(\\\"CD5C5C\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test8() {\\n\\t\\tSystem.out.println(\\\"Length exceeds 6.\\\");\\n    assertEquals(false, Challenge.isValidHexCode(\\\"#123CCCD\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test9() {\\n    assertEquals(true, Challenge.isValidHexCode(\\\"#123456\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test10() {\\n    assertEquals(true, Challenge.isValidHexCode(\\\"#987654\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test11() {\\n\\t\\tSystem.out.println(\\\"Length exceeds 6.\\\");\\n    assertEquals(false, Challenge.isValidHexCode(\\\"#9876543\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test12() {\\n    assertEquals(true, Challenge.isValidHexCode(\\\"#CCCCCC\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test13() {\\n\\t\\tSystem.out.println(\\\"Not acceptable alphabetic characters.\\\");\\n    assertEquals(false, Challenge.isValidHexCode(\\\"#ZCCZCC\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test14() {\\n\\t\\tSystem.out.println(\\\"Not acceptable alphabetic characters.\\\");\\n    assertEquals(false, Challenge.isValidHexCode(\\\"#Z88Z99\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test15() {\\n\\t\\tSystem.out.println(\\\"Unacceptable character.\\\");\\n    assertEquals(false, Challenge.isValidHexCode(\\\"#Z88!99\\\"));\\n  }\\n}\",\"language\":\"java\",\"summary\":\"Create a function that determines whether a string is a valid hex code.\\n\\nA hex code must begin with a pound key # and is exactly 6 characters in length. Each character must be a digit from 0-9 or an alphabetic character from A-F. All alphabetic characters may be uppercase or lowercase.\\n\\nExamples\\nisValidHexCode(\\\"#CD5C5C\\\") ➞ true\\n\\nisValidHexCode(\\\"#EAECEE\\\") ➞ tru\",\"tags\":[\"strings\",\"regex\",\"validation\"],\"timestamp\":{\"$date\":1567986959270},\"title\":\"Valid Hex Code\",\"stats\":{\"completed\":{\"total\":233,\"ratings\":[1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,2,3,0,3,2,2,3,2,0,3,1,2,1,1,2,2,2,2,2,1,1,2,0,2,1,1,2,2,2,2,2,2,0,2,2,1,1,1,2,1,2,1,1,3,2,2,1,2,2,1,2,1,2,1,0,1,1,2,2,2,0,2,1,2,2,0,3,1,0,2,4,1,0,2,0,2,2,2,1,0,0,2,1,2,0,2,2,2,2,2,0,0,1,2,2,1,0,2,2,3,2,2,1,1,2,0,1,2,1,2,2,2,1,1,0,1,0,1,3,2,1,1,0,1,4,1,1,3,3,1,2,1,1,2,0,1,4,1,0,4,2,2,2,2,4,3,1,0,3,2,2,1,1,2,2,2,2,1,2,1,2,1,1,2,0,2,1,2,2,2,1,2,2,3,2,2,2,1,2,2,1,1,1,2,2,0],\"rators\":[\"LTHCxsdjqzXpaXShT\",\"FocLpCB2WEiK2gGni\",\"sxci7DYKNa6q22Sjq\",\"9c8n7ti5vCjTRgiGN\",\"Yohr2MmAyaWGMbB35\",\"t2kdBPj9qQAXY2Ehd\",\"3gxJoNp59B4eoyyed\",\"FvWKuSqHdXZ7HM2sD\",\"ZBDiEMi7dbjRL55LB\",\"a49eNnfRwSMxsDJXf\",\"kuMsHTCmg7uPeYArA\",\"pr4Cm4A369tC9gSeT\",\"Y6AEWaL5oGbZYzNyb\",\"4qhmwmtBPfuFMNMbt\",\"3R4TwRdkvrAxkvfeq\",\"CYt2jTCEuK9dYWruk\",\"ybKny9NBc3i9fATk6\",\"kATmHTX3wYNsc7txa\",\"CLmJduqJHX83dM4Pd\",\"3KjxQu9RZ8ZSywvLz\",\"8JyqsSbN2FJXPr3cw\",\"CggGfsERnPKGupFWp\",\"u4yanfWeeZsN3xWgc\",\"fBmfMBKNcbZ4zDuEq\",\"J9zJq7PMGb6mqzcHW\",\"2cdvd8yuPLSwvGj9w\",\"toZsDEaLL7ptnFskQ\",\"AyrEvM2GLX2jqM772\",\"phA6MomRzh9oz3eqn\",\"CrkTM8pDuhC3YZb83\",\"8J2Dqqz9PaFufQzwY\",\"aNCEEnzBDtybdRK5t\",\"RbhnzuvPHGjnccMhz\",\"qEGfmqbNLrs2Qrva8\",\"eZjHwgBfkQPCxmutr\",\"Es4eX2stRpyoXeC7f\",\"x9A83cZkyA7E7utn3\",\"NrSqKXXpaus7PGdiy\",\"Zk4jvK2nkvnhpzoLR\",\"CHWjZ3SMX8vj3Hrji\",\"C9yBWYcZsjmJYww3K\",\"8Nzt6imoS9Rvpd6it\",\"MJMEESuirNXM2diop\",\"HsFc9PgmpP2X9Fwh9\",\"eXW8reZCCZHQzJjQi\",\"dq4BrC2PGLuisiT9J\",\"o4G8juvJ3DjYYQsjh\",\"eg7j6TBEQv7eJsioq\",\"7AkY78Bps85DMFfRx\",\"qb2DTmzQj4vNfq5K7\",\"jDuY4gx4aJRp8SHbm\",\"wKsDQQaepNvP88yzW\",\"fZky27mpbfX7soJKa\",\"e4634dMuMNdf2S5ej\",\"cfi8jhhSJ3Nq2gvqf\",\"fnCSoGvytLcNbjekC\",\"rWhXHhzF4W8bea6LP\",\"9gJsF5apWJGWZJprn\",\"4RHx3H8EwP2oboW8e\",\"8km4NQkcofNuCy7jH\",\"afMjsKHpEPtAKaGKq\",\"4hYyZnCuvgfuxhd7e\",\"HRN2aFfZEXorfrAGH\",\"ko7oJ85JMftgcbkrr\",\"wYYMNPe8nSiJFbvJw\",\"NsQ8qYQQ47gSPtQkK\",\"czBMGh6eheGuZTCgX\",\"iWDfYqcJqGZ4hBwzu\",\"wbSLghDxkTjiYJrEH\",\"JFodQijHHdRkkrZvT\",\"fbYN9Jp46RqBqCd2K\",\"gGnDsJz5hr2t9MKCF\",\"YLwJkF2wuL3n9o6a2\",\"ML7bZJrM8gfGQJBJt\",\"8YCqERR78ERxmyyBp\",\"mdEQJ2fmGmkbhbvNw\",\"2DP9ho5CnBPwmNXGm\",\"xnhBi4BCdJNAXXRvk\",\"fZjkX29nhRTWWb75k\",\"Kso7rzAKB4TTCPKgM\",\"y7NyT6FnDzPhAzkjF\",\"hB5mgzMwQSnhBzi7P\",\"5seiNqw6ZXoF2GRRd\",\"c7sE7kceskbYy3KmA\",\"jyoLggHk8xQKZuoQC\",\"TrquEHytntLKHA4m2\",\"csRoCgJx5NBJzW8pX\",\"8zZ6xmzpiFair25qr\",\"jDTGwryGygbZiqCEg\",\"AfMFW7KGW22bHWuuz\",\"B4pxRqzo43M7S8FbP\",\"gDy7tg5NuCLbPaoiT\",\"Ctuq7Wc8QPQmzwPK3\",\"WZujpe8yQAyZmpWHg\",\"cjxsqXfkAPoadmppi\",\"DzvdGwHEjqsX7wyKr\",\"6ZxpGyg7iviX9cPAy\",\"uYv96ZSpA7tBHoAGX\",\"Yp7uvStL97cC9fKkY\",\"9pCPyhvQmbkWyD2LL\",\"4hCzMutSHfeFwtHMN\",\"oMLSgpSFQnY4ui8cB\",\"htXCitorobtqYymjN\",\"m5Qm2iGKJxhzzsNeu\",\"XGAQTTa6CGePQrAqx\",\"y6kfyYmydcD8tkBk7\",\"cNkiQaAx5iZZy7wz5\",\"irDgkguQ8h8SPTx8o\",\"RWqwvDdMSWctvc8eJ\",\"GDHyafBci3oqNe7LC\",\"Yom3RzkMYpweE8cbS\",\"fFM526862y7RCzdjg\",\"BmMA5FBX7NKpLj8ur\",\"WkBmufs74SDQMo9Gr\",\"dcW9oK2uRo8h8mBe2\",\"DkSMZ3jZLkwviKb9g\",\"P7zedbjaFw8YDzLz7\",\"LHJFnB3x2tX2gcnGW\",\"uiNnMdQbp8fj3Zdv8\",\"2SNSTnTJATh3bCHoW\",\"rvojHhKH3DaxotefQ\",\"RtGQTJYN5ToH3pnGT\",\"5WQZzuHZBGqFeNQi3\",\"7Wq4ZNz5c3irDR6br\",\"MCw7uAcoWcSTBTmr3\",\"muXMnzQwGLzN6j2Jr\",\"g4NCSxxHqHCGMpWwT\",\"xeYtKtzKFm5RvEXMr\",\"Ddj8RHEHYRJTcAwa2\",\"nbH6pjzJS9Z35JD9r\",\"7amNEuZodjynhaDQq\",\"osXNzc2aCxspRwheS\",\"4CryJmbEsruAELrDt\",\"nLb2L7vY7vd9k5L4w\",\"aApsjW8B3Ecggumuo\",\"5p6bwXayfAp7Y4WQ7\",\"kiRkuN7JXqvWBa4SG\",\"HDNfL5LCyDBBx58qy\",\"sJaSeR649EEMX9F4v\",\"j428nMyNKY8g2dcCi\",\"MCjdtAAjL6sGLukPr\",\"qraDA47Ewou5mzvrL\",\"ZPNk8KwpqXDgu3ALt\",\"87otmbdqNT3bHsQFu\",\"jRqY4i8gPemsZMBGf\",\"kGhC9JMAKk9Ngyiqh\",\"9KAbm9niQ9Cv9LefP\",\"YcjwCvYut6834Jzd8\",\"Fd9765rksgPK4E2Zy\",\"f6uGKbmMdBYCjrMBh\",\"j4PjysAFWwvqM4dBR\",\"wBDcgF2qB7FQRuRBd\",\"azAzSkvJd7eyXY9x9\",\"yXGiiSAR5nBHnH3yr\",\"gXTAie79kiw28tx5u\",\"N3HLmYG9RSbwEbnv8\",\"n4WMs2BHoBQ8xnhJP\",\"mG8HqKiAQFTdRZthG\",\"P5BhjZxyeHQYTNyB9\",\"8Xx8nWXRydHDBGfQf\",\"jXTnL3JatkKjoifyb\",\"Ym8AjbKGSJooun3nt\",\"FTHXj9Rfx9wdujSzy\",\"CQrLMPjz7gn82rySP\",\"tyLS9T6YMfg9fMtYJ\",\"mQKWauR6b252TmdX4\",\"pi76g3eRpnKrhee2a\",\"gBGjCfJvPHswDM5JQ\",\"GkYtSbQuheBF4Enys\",\"bur3yQ8s34zqKGEro\",\"QRv96jmNaYsWkxQEG\",\"zZfMwLuoERGmybgib\",\"buX4mCQhtXCfBjeno\",\"hhxjQREtmHSheH9Pj\",\"GTBcrT5JsdTfSYcK7\",\"Ag5fRrZ9MrAZc9vpj\",\"uFfEio8nzDvL8emhp\",\"SgPjF69J25jT3dn4X\",\"6rvJwN4mcX7iYGjY7\",\"btabi3PdyisuY5tn9\",\"4ySzqKC5s3ZRpG9di\",\"vWH3AqmNsydCi6d7k\",\"srJ34BaybkQh3qRkM\",\"wFRLGjA56kj7xyhmv\",\"rhS8qXRjZcpDXkwnE\",\"WTuDyGkLrjoqdYG3i\",\"xEX3TDY6C2h82dJTn\",\"WJqNNYkhzBSbQtpgK\",\"ddh9n2wG9KeoKHHnR\",\"GBwGqTWbfaanB5PnE\",\"fu5o4coRdRnj6HQgH\",\"ikkjHDqBHu6fT3vGL\",\"riBP9MdCu59kPfeJ6\",\"h8W8BpiAdEG7wdwuD\",\"jibyTzX3NgqiqzXr6\",\"vX7XgmNgn5qXd3fcw\",\"PJu3WcTpfRrvHfQiS\",\"J7epB3qSQJ2E8vWkY\",\"KMR6vNzvSKMA2cXnK\",\"c7uBxu2rgY77H5d79\",\"CJNyy2qPh76QbXr94\",\"unqzSsxpxj9sZ7rbD\",\"FxPDKKibxnZjGJLs6\",\"uw47663LqPME8btaA\",\"yZMCZkZP72KXHby4w\",\"PAEWysAAFheYiYPBp\",\"XH6378Zm3WBm679yx\",\"nFbmNzMQ38TncmfQX\"],\"quality\":[5,5,5,4,5,5,5,5,5,4,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"isHidden\":false,\"quality\":4.833333333333333,\"family\":[{\"_id\":\"ZhEBoaEfMcK6vT7Kx\",\"language\":\"cpp\"},{\"_id\":\"8tyXtHqAT3LAuHMqu\",\"language\":\"csharp\"},{\"_id\":\"9zBJYnBekqAo52zEp\",\"language\":\"java\"},{\"_id\":\"cWvYKp8JTE9ozC6NF\",\"language\":\"javascript\"},{\"_id\":\"DuQegak2X6ZyYKPER\",\"language\":\"php\"},{\"_id\":\"9p5tMqyYENTmD9Nh5\",\"language\":\"python3\"},{\"_id\":\"gEx9NkmNMSdGyNa4t\",\"language\":\"ruby\"},{\"_id\":\"bWfDjbZ9hM5cDRA5m\",\"language\":\"swift\"}]}}"]