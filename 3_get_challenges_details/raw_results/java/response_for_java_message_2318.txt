a["{\"msg\":\"result\",\"id\":\"715\",\"result\":{\"_id\":\"jH4wEAk4gXZommdfo\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"public class Challenge {\\n\\tpublic static String sentencePrimeness(String sentence) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":2.7586206896551726,\"isHidden\":false,\"familyId\":\"8PozQrjPcyHtbgDmg\",\"instructions\":\"A word value can be established summing up all the numeric values of every single character (excluding spaces and punctuation): a value from 1 (\\\"a\\\") to 26 (\\\"z\\\") is given to letters, while numbers have their literal values, from 0 to 9. The sentence value is the sum of the values of the words.\\n\\n```\\nsentence = \\\"ABC ! abc ... @ 123\\\"\\n// Remove spaces, punctuation and any symbol.\\n\\nsentence = [\\\"ABC\\\", \\\"abc\\\", \\\"123\\\"]\\n\\nwords values = \\\"ABC\\\" = 1+2+3 = 6 | \\\"abc\\\" = 1+2+3 = 6 | \\\"123\\\" = 1+2+3 = 6\\n\\nsentence value = 6 + 6 + 6 = 18\\n```\\n\\nGiven a string `sentence` implement a function that returns:\\n\\n- `Prime Sentence` if the original sentence value is a prime.\\n\\n- `Almost Prime Sentence (xxx)` if the sentence value is not a prime but, after a single removal of any of the words the new sentence value is a prime (see example #2 for a clearer explanation), with _xxx_ being the word removed. If more than a word can be removed to obtain a prime value, return the first encountered in the original sentence.\\n\\n- `Composite Sentence` if the sentence value is not a prime and more than one removal is necessary to make the new sentence value (or if none is possible).\\n\\nLetters values are case insensitive (\\\"aZ\\\" = \\\"Az\\\" = 1 + 26 = 27), while numbers are treated as words (\\\"123\\\" = 1+2+3 = 6).\\n\\n### Examples\\n```\\nsentencePrimeness(\\\"Help me!\\\") ➞ \\\"Prime Sentence\\\"\\n// \\\"Help\\\" + \\\"me\\\" = 41 + 18 = 59 (prime)\\n\\nsentencePrimeness(\\\"42 is THE aNsWeR...\\\") ➞ \\\"Almost Prime Sentence (aNsWeR)\\n// \\\"42\\\" + \\\"is\\\" + \\\"THE\\\" + \\\"aNsWeR\\\" = 6 + 28 + 33 + 80 = 147 (not prime)\\n// Without \\\"42\\\" new value is 141\\n// Without \\\"is\\\" new value is 119\\n// Without \\\"THE\\\" new value is 114\\n// Without \\\"aNsWeR\\\" new value is 67 (prime!)\\n// If the word \\\"aNsWeR\\\" is removed from sentence the new value is a prime.\\n\\nsentencePrimeness(\\\"Did you smoke?\\\") ➞ \\\"Composite Sentence\\\"\\n// \\\"Did\\\" + \\\"you\\\" + \\\"smoke\\\" = 17 + 61 + 63 = 141 (not prime)\\n// Without \\\"Did\\\" new value is 124\\n// Without \\\"you\\\" new value is 80\\n// Without \\\"smoke\\\" new value is 78\\n// No single removals make the new sentence value a prime.\\n```\\n\\n### Notes\\n- Only letters and digits can be part of the sentence.\\n- If it's an Almost Prime Sentence, the removed word between the brackets must maintain the same capitalization format found in the original sentence (see example #2).\\n- The sentence is Almost Prime if just a single word can be removed to make value a prime, no multiple removals allowed.\\n- Remember the rule for numbers: \\\"10\\\" is a word, so its value is 1+0 and not 10.\",\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n  @Test\\n  public void test1() {\\n    assertEquals(\\\"Prime Sentence\\\", Challenge.sentencePrimeness(\\\"Help me!\\\"));\\n  }\\n\\n\\t@Test\\n  public void test2() {\\n    assertEquals(\\\"Almost Prime Sentence (aNsWeR)\\\", Challenge.sentencePrimeness(\\\"42 is THE aNsWeR...\\\"));\\n  }\\n\\n\\t@Test\\n  public void test3() {\\n    assertEquals(\\\"Composite Sentence\\\", Challenge.sentencePrimeness(\\\"Did you Smoke?\\\"));\\n  }\\n\\n\\t@Test\\n  public void test4() {\\n    assertEquals(\\\"Prime Sentence\\\", Challenge.sentencePrimeness(\\\"She SellS SeaShellS by the SeaShore\\\"));\\n  }\\n\\n\\t@Test\\n  public void test5() {\\n    assertEquals(\\\"Almost Prime Sentence (Lorem)\\\", Challenge.sentencePrimeness(\\\"Lorem. Ipsum. Dolor. Sit. Amet.\\\"));\\n  }\\n\\n\\t@Test\\n  public void test6() {\\n    assertEquals(\\\"Almost Prime Sentence (aniMALs)\\\", Challenge.sentencePrimeness(\\\"three fASt hUNgry aniMALs -aNd- 3 slow faTTy kiDS\\\"));\\n  }\\n\\n\\t@Test\\n  public void test7() {\\n    assertEquals(\\\"Composite Sentence\\\", Challenge.sentencePrimeness(\\\"This is a 'Prime' Sentence\\\"));\\n  }\\n\\n\\t@Test\\n  public void test8() {\\n    assertEquals(\\\"Almost Prime Sentence (this)\\\", Challenge.sentencePrimeness(\\\"this is a composite sentence\\\"));\\n  }\\n\\n\\t@Test\\n  public void test9() {\\n    assertEquals(\\\"Composite Sentence\\\", Challenge.sentencePrimeness(\\\"Primes, PRIMES EVERYWHERE!\\\"));\\n  }\\n\\n\\t@Test\\n  public void test10() {\\n    assertEquals(\\\"Prime Sentence\\\", Challenge.sentencePrimeness(\\\"10 test cases are enough, this is the last one!\\\"));\\n  }\\n}\",\"language\":\"java\",\"summary\":\"A word value can be established summing up all the numeric values of every single character (excluding spaces and punctuation): a value from 1 (\\\"a\\\") to 26 (\\\"z\\\") is given to letters, while numbers have their literal values, from 0 to 9. The sentence value is the sum of the values of the words.\\n\\nsentence = \\\"ABC ! abc ... @ 123\\\"\\n// Remove spaces, punctuation and\",\"tags\":[\"strings\",\"numbers\",\"validation\",\"scope\"],\"timestamp\":{\"$date\":1571887299948},\"title\":\"Sentence Primeness\",\"stats\":{\"completed\":{\"total\":32,\"ratings\":[2,2,2,2,2,3,3,4,4,2,4,3,3,4,4,4,2,1,2,0,4,3,3,4,1,3,2,4,3],\"rators\":[\"sxci7DYKNa6q22Sjq\",\"eXW8reZCCZHQzJjQi\",\"J9zJq7PMGb6mqzcHW\",\"AzERMCwmKzy5zXJ3S\",\"cCrirxZEzgAwQt2T9\",\"3pdgguqZgNDSAJSGm\",\"YLwJkF2wuL3n9o6a2\",\"wYYMNPe8nSiJFbvJw\",\"Es4eX2stRpyoXeC7f\",\"AyrEvM2GLX2jqM772\",\"TrquEHytntLKHA4m2\",\"htXCitorobtqYymjN\",\"rehehi2Tr2mwaEoJE\",\"gJbvbqosimaP4ZAYb\",\"pBMXMQem6BpSeooYT\",\"jyoLggHk8xQKZuoQC\",\"DkSMZ3jZLkwviKb9g\",\"k63LjKkX5p7SYng7C\",\"mGaEDPw5FsDb3vdnq\",\"rWhXHhzF4W8bea6LP\",\"4hbdSgMnhZC7C9mRv\",\"LNCb5rksJLJ43L4Nw\",\"rhS8qXRjZcpDXkwnE\",\"jCjCvyhqhpebkJn34\",\"2NJZbusRvu3eJ4tHu\",\"wFRLGjA56kj7xyhmv\"],\"quality\":[4,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":4.5,\"family\":[{\"_id\":\"g8hMSy4tE3bn3ZTNE\",\"language\":\"cpp\"},{\"_id\":\"9KBTmdoTxuA8eMxP9\",\"language\":\"csharp\"},{\"_id\":\"jH4wEAk4gXZommdfo\",\"language\":\"java\"},{\"_id\":\"9cE48rX6wTZqBWeia\",\"language\":\"javascript\"},{\"_id\":\"XKSwuu4ddzBvkXjvf\",\"language\":\"python3\"},{\"_id\":\"wvkAh6dW8TjgXmN37\",\"language\":\"ruby\"},{\"_id\":\"22zFrigLPpuGEPprt\",\"language\":\"swift\"}]}}"]