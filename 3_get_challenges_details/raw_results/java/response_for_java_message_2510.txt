a["{\"msg\":\"result\",\"id\":\"810\",\"result\":{\"_id\":\"XRXcuP6QjH9CuqqwY\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class CapitalizationFamily {\\n  public static Map<Integer, List<String> > grouping(String[] w) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":3.6153846153846154,\"familyId\":\"TCfqhxjhvgo6rc88M\",\"instructions\":\"Write a function that groups words by the **number of capital letters** and returns an array of object entries whose keys are the **number of capital letters** and the values are the groups.\\n\\n### Examples\\n```\\ngrouping([\\\"HaPPy\\\", \\\"mOOdy\\\", \\\"yummy\\\", \\\"mayBE\\\"]) ➞ {\\n  0=[\\\"yummy\\\"], 2=[\\\"mayBE\\\", \\\"mOOdy\\\"], 3=[\\\"HaPPy\\\"]\\n}\\n\\ngrouping([\\\"eeny\\\", \\\"meeny\\\", \\\"miny\\\", \\\"moe\\\"]) ➞ {\\n  0=[\\\"eeny\\\", \\\"meeny\\\", \\\"miny\\\", \\\"moe\\\"]\\n}\\n\\ngrouping([\\\"FORe\\\", \\\"MoR\\\", \\\"bOR\\\", \\\"tOR\\\", \\\"sOr\\\", \\\"lor\\\"]) ➞ {\\n  0=[\\\"lor\\\"], 1=[\\\"sOr\\\"], 2=[\\\"bOR\\\", \\\"MoR\\\", \\\"tOR\\\"], 3=[\\\"FORe\\\"]\\n}\\n```\\n\\n### Notes\\n- The object entries have to be sorted by the **number of capital letters**.\\n- The groups will be arrays of all words sharing the same number of capital letters.\\n- Words will be unique.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"import static org.junit.Assert.assertEquals;\\nimport org.junit.Test;\\nimport java.util.*;\\n\\npublic class CapitalizationFamilyTest {\\n\\t@Test\\n\\tpublic void test1() { \\n\\t\\tMap<Integer, List<String> > map = new HashMap<Integer, List<String> >();\\n\\t\\tmap.put(1, Arrays.asList(\\\"Tesh\\\", \\\"Deep\\\"));\\n\\t\\tmap.put(2, Arrays.asList(\\\"TeshA\\\", \\\"XavieR\\\"));\\n\\t\\tmap.put(4, Arrays.asList(\\\"TRIO\\\", \\\"DUTY\\\", \\\"COKE\\\"));\\n\\t\\tmap.put(6, Arrays.asList(\\\"DUTIES\\\"));\\n\\t\\tassertEquals(map, CapitalizationFamily.grouping(new String[] {\\\"Tesh\\\", \\\"Deep\\\", \\\"TeshA\\\", \\\"XavieR\\\", \\\"TRIO\\\", \\\"DUTY\\\", \\\"COKE\\\", \\\"DUTIES\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test2() {\\n\\t\\tMap<Integer, List<String> > map = new HashMap<Integer, List<String> >();\\n\\t\\tmap.put(0, Arrays.asList(\\\"yummy\\\"));\\n\\t\\tmap.put(2, Arrays.asList(\\\"mOOdy\\\", \\\"mayBE\\\"));\\n\\t\\tmap.put(3, Arrays.asList(\\\"HaPPy\\\"));\\n\\t\\tassertEquals(map, CapitalizationFamily.grouping(new String[] {\\\"HaPPy\\\", \\\"mOOdy\\\", \\\"yummy\\\", \\\"mayBE\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test3() { \\n\\t\\tMap<Integer, List<String> > map = new HashMap<Integer, List<String> >();\\n\\t\\tmap.put(0, Arrays.asList(\\\"eeny\\\", \\\"meeny\\\", \\\"miny\\\", \\\"moe\\\"));\\n\\t\\tassertEquals(map, CapitalizationFamily.grouping(new String[] {\\\"eeny\\\", \\\"meeny\\\", \\\"miny\\\", \\\"moe\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test4() { \\n\\t\\tMap<Integer, List<String> > map = new HashMap<Integer, List<String> >();\\n\\t\\tmap.put(0, Arrays.asList(\\\"lor\\\"));\\n\\t\\tmap.put(1, Arrays.asList(\\\"sOr\\\"));\\n\\t\\tmap.put(2, Arrays.asList(\\\"MoR\\\", \\\"bOR\\\", \\\"tOR\\\"));\\n\\t\\tmap.put(3, Arrays.asList(\\\"FORe\\\"));\\n\\t\\tassertEquals(map, CapitalizationFamily.grouping(new String[] {\\\"FORe\\\", \\\"MoR\\\", \\\"bOR\\\", \\\"tOR\\\", \\\"sOr\\\", \\\"lor\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test5() { \\n\\t\\tMap<Integer, List<String> > map = new HashMap<Integer, List<String> >();\\n\\t\\tmap.put(4, Arrays.asList(\\\"TAKE\\\"));\\n\\t\\tmap.put(5, Arrays.asList(\\\"MOVIE\\\"));\\n\\t\\tmap.put(6, Arrays.asList(\\\"PERSON\\\"));\\n\\t\\tassertEquals(map, CapitalizationFamily.grouping(new String[] {\\\"MOVIE\\\", \\\"TAKE\\\", \\\"PERSON\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test6() {\\n\\t\\tMap<Integer, List<String> > map = new HashMap<Integer, List<String> >();\\n\\t\\tmap.put(0, Arrays.asList(\\\"the\\\", \\\"them\\\", \\\"theme\\\"));\\n\\t\\tmap.put(5, Arrays.asList(\\\"EVERY\\\"));\\n\\t\\tassertEquals(map, CapitalizationFamily.grouping(new String[] {\\\"the\\\", \\\"them\\\", \\\"theme\\\", \\\"EVERY\\\"}));\\n\\t}\\n}\",\"language\":\"java\",\"quality\":0,\"summary\":\"Write a function that groups words by the number of capital letters and returns an array of object entries whose keys are the number of capital letters and the values are the groups.\\n\\nExamples\\ngrouping([\\\"HaPPy\\\", \\\"mOOdy\\\", \\\"yummy\\\", \\\"mayBE\\\"]) ➞ {\\n  0=[\\\"yummy\\\"], 2=[\\\"mayBE\\\", \\\"mOOdy\\\"], 3=[\\\"HaPPy\\\"]\\n}\\n\\ngrouping([\\\"eeny\\\", \\\"meeny\\\", \\\"miny\\\", \\\"moe\\\"]) ➞ {\\n  0=[\\\"eeny\\\", \\\"meeny\",\"tags\":[\"sorting\",\"strings\",\"arrays\"],\"timestamp\":{\"$date\":1608560300116},\"title\":\"Capitalization Families\",\"stats\":{\"completed\":{\"total\":11,\"ratings\":[4,4,4,4,4,4,4,2,5,1,3,5,3],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"Es4eX2stRpyoXeC7f\",\"gXTAie79kiw28tx5u\",\"h6exQtjB22pabWmvE\",\"LNCb5rksJLJ43L4Nw\",\"htXCitorobtqYymjN\",\"KMR6vNzvSKMA2cXnK\",\"wFRLGjA56kj7xyhmv\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"XRXcuP6QjH9CuqqwY\",\"language\":\"java\"},{\"_id\":\"socoDGxk3JGKezRYm\",\"language\":\"javascript\"},{\"_id\":\"rbeuWab36FAiLj65m\",\"language\":\"python3\"},{\"_id\":\"xgHr9ewXdu4ZsSgtS\",\"language\":\"ruby\"}]}}"]