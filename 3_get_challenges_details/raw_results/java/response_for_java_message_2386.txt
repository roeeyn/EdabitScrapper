a["{\"msg\":\"result\",\"id\":\"749\",\"result\":{\"_id\":\"powuANEDgMh8bxDry\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"public class Challenge {\\n\\tpublic static String longestNonrepeatingSubstring(String str) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":2.8974358974358974,\"familyId\":\"ZeCYC3wPcY5oGNMeL\",\"instructions\":\"Write a function that returns the **longest non-repeating substring** for a string input.\\n\\n### Examples\\n```\\nlongestNonrepeatingSubstring(\\\"abcabcbb\\\") ➞ \\\"abc\\\"\\n\\nlongestNonrepeatingSubstring(\\\"aaaaaa\\\") ➞ \\\"a\\\"\\n\\nlongestNonrepeatingSubstring(\\\"abcde\\\") ➞ \\\"abcde\\\"\\n\\nlongestNonrepeatingSubstring(\\\"abcda\\\") ➞ \\\"abcd\\\"\\n```\\n\\n### Notes\\n- If multiple substrings tie in length, return the one which occurs **first**.\\n- **Bonus**: Can you solve this problem in **linear time**?\",\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n  @Test\\n  public void test1() {\\n    assertEquals(\\\"abc\\\", Challenge.longestNonrepeatingSubstring(\\\"abcabcbb\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test2() {\\n    assertEquals(\\\"a\\\", Challenge.longestNonrepeatingSubstring(\\\"aaaaaa\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test3() {\\n    assertEquals(\\\"abcde\\\", Challenge.longestNonrepeatingSubstring(\\\"abcde\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test4() {\\n    assertEquals(\\\"abcd\\\", Challenge.longestNonrepeatingSubstring(\\\"abcda\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test5() {\\n    assertEquals(\\\"ac\\\", Challenge.longestNonrepeatingSubstring(\\\"aaccddeeffb\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test6() {\\n    assertEquals(\\\"abd\\\", Challenge.longestNonrepeatingSubstring(\\\"abdde\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test7() {\\n    assertEquals(\\\"cd\\\", Challenge.longestNonrepeatingSubstring(\\\"ccdddcccc\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test8() {\\n    assertEquals(\\\"cdx\\\", Challenge.longestNonrepeatingSubstring(\\\"cdxdxccxc\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test9() {\\n    assertEquals(\\\"defgh\\\", Challenge.longestNonrepeatingSubstring(\\\"abddefgh\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test10() {\\n    assertEquals(\\\"abcd\\\", Challenge.longestNonrepeatingSubstring(\\\"abcdabcd\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test11() {\\n    assertEquals(\\\"debc\\\", Challenge.longestNonrepeatingSubstring(\\\"abddebcc\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test12() {\\n    assertEquals(\\\"xyz\\\", Challenge.longestNonrepeatingSubstring(\\\"xyxxyzyzy\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test13() {\\n    assertEquals(\\\"lmjsde\\\", Challenge.longestNonrepeatingSubstring(\\\"kjlmjsdeee\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test14() {\\n    assertEquals(\\\"lmjsdfew\\\", Challenge.longestNonrepeatingSubstring(\\\"kjlmjsdfew\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test15() {\\n    assertEquals(\\\"lmjsdfewi\\\", Challenge.longestNonrepeatingSubstring(\\\"kjlmjsdfewii\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test16() {\\n    assertEquals(\\\"idfew\\\", Challenge.longestNonrepeatingSubstring(\\\"kjlmjjiiiidfewii\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test17() {\\n    assertEquals(\\\"kjlm\\\", Challenge.longestNonrepeatingSubstring(\\\"kjlmjjiiiidfiwii\\\"));\\n  }\\n}\",\"language\":\"java\",\"summary\":\"Write a function that returns the longest non-repeating substring for a string input.\\n\\nExamples\\nlongestNonrepeatingSubstring(\\\"abcabcbb\\\") ➞ \\\"abc\\\"\\n\\nlongestNonrepeatingSubstring(\\\"aaaaaa\\\") ➞ \\\"a\\\"\\n\\nlongestNonrepeatingSubstring(\\\"abcde\\\") ➞ \\\"abcde\\\"\\n\\nlongestNonrepeatingSubstring(\\\"abcda\\\") ➞ \\\"abcd\\\"\\n\\nNotes\\nIf multiple substrings tie in length, return the one which occurs f\",\"tags\":[\"strings\",\"loops\"],\"timestamp\":{\"$date\":1568426537457},\"title\":\"Longest Substring with Non-repeating Characters\",\"stats\":{\"completed\":{\"total\":44,\"ratings\":[3,3,3,3,3,4,4,5,0,5,5,0,3,2,5,3,1,3,5,5,4,3,1,1,3,0,4,5,2,0,3,4,2,2,4,0,4,4,2],\"rators\":[\"3pdgguqZgNDSAJSGm\",\"WchA4bbn7Kjauvosp\",\"hZr4qXRsSumkpJXK9\",\"SnY7WidXJoAyyuPuA\",\"YWnFYSYAv4jbY4Mmc\",\"qJZsi5rhRnWA38FbA\",\"MJMEESuirNXM2diop\",\"49caJ2EMfEnPSEYZj\",\"bvWLyM852r4TokRDq\",\"jnHtCE7AtcvTMopt9\",\"SNiXMrGpyjDGPaaeG\",\"rehehi2Tr2mwaEoJE\",\"2PR653L4KSN97r534\",\"AyrEvM2GLX2jqM772\",\"cf7XxBWEdAGXPDGf9\",\"Es4eX2stRpyoXeC7f\",\"QwkJidQW7vvEY6TLp\",\"bw6kHP3k8dP2qBa5v\",\"yLnPBNvqAPxJWYrN5\",\"N8dDpydv4x7DhEdf9\",\"8J2Dqqz9PaFufQzwY\",\"TrquEHytntLKHA4m2\",\"ii2q7Rv8FMdCQSkyy\",\"Beu8d8797doPG3YsJ\",\"oMLSgpSFQnY4ui8cB\",\"rwETZ6XCNoHCEyB66\",\"jyoLggHk8xQKZuoQC\",\"RroghSsW6MgCNEcFz\",\"mGaEDPw5FsDb3vdnq\",\"Ym8AjbKGSJooun3nt\",\"gXTAie79kiw28tx5u\",\"a777e8chPvJkY3tKa\",\"rWhXHhzF4W8bea6LP\",\"zza5WjC8QrHcoDZBF\",\"LNCb5rksJLJ43L4Nw\",\"buX4mCQhtXCfBjeno\",\"sxci7DYKNa6q22Sjq\",\"wFRLGjA56kj7xyhmv\"],\"quality\":[4,3,4,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"isHidden\":false,\"quality\":4,\"family\":[{\"_id\":\"WFQvbjeXRZeontieP\",\"language\":\"cpp\"},{\"_id\":\"powuANEDgMh8bxDry\",\"language\":\"java\"},{\"_id\":\"vHJrWvyEiiGp5yZtX\",\"language\":\"javascript\"},{\"_id\":\"58RNhygGNrKjPXwna\",\"language\":\"python3\"},{\"_id\":\"k8u3qBN6x8KFpLak4\",\"language\":\"ruby\"}]}}"]