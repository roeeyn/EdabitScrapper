a["{\"msg\":\"result\",\"id\":\"664\",\"result\":{\"_id\":\"KZrmicjc8zCZyGNee\",\"author\":\"Edward Clark\",\"authorId\":\"3pdgguqZgNDSAJSGm\",\"code\":\"public class Challenge {\\n\\tpublic static int[] encrypt(String str) {\\n\\t\\t\\n\\t}\\n\\n\\tpublic static String decrypt(int[] arr) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":2.5714285714285716,\"familyId\":\"cJKsm3fPqiyCsFZ5b\",\"instructions\":\"It's time to send and receive secret messages.\\n\\nCreate two functions that take a string and an array and returns a coded or decoded message.\\n\\nThe first letter of the string, or the first element of the array represents the Character Code of that letter. The next elements are the differences between the characters:\\ne.g. `A` +3 --> `C` or `z` -1 --> `y`.\\n\\n### Examples\\n```\\nencrypt(\\\"Hello\\\") ➞ [72, 29, 7, 0, 3]\\n// H = 72, the difference between the H and e is 29 (upper- and lowercase).\\n// The difference between the two l's is obviously 0.\\n\\ndecrypt([ 72, 33, -73, 84, -12, -3, 13, -13, -68 ]) ➞ \\\"Hi there!\\\"\\n\\nencrypt(\\\"Sunshine\\\") ➞ [83, 34, -7, 5, -11, 1, 5, -9]\\n```\\n\\n### Notes\\n- The input of the encrypt function will always be a string.\\n- The input of the decrypt function will always be an array with numbers.\",\"lab\":\"import static org.hamcrest.core.Is.is;\\nimport org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\nimport static org.junit.Assert.assertThat;\\n\\npublic class ChallengeTest {\\n  @Test\\n  public void test1() {\\n    assertThat(Challenge.encrypt(\\\"?\\\"), is(new int[]{63}));            \\n  }\\n\\t\\n  @Test\\n  public void test2() {\\n    assertEquals(\\\"The neighbours are strange..\\\", Challenge.decrypt(new int[]{84, 20,  -3,  -69,  78,  -9,  4,  -2,  1,  -6,  13,  6,  -3,  1,  -83,  65,  17,  -13,  -69,  83,  1,  -2,  -17,  13,  -7,  -2,  -55,  0}));\\n  }\\n\\t\\n  @Test\\n  public void test3() {\\n    assertThat(Challenge.encrypt(\\\"It's a secret!\\\"), is(new int[]{73, 43, -77, 76, -83, 65, -65, 83, -14, -2, 15, -13, 15, -83}));  \\n  }\\n\\t\\n  @Test\\n  public void test4() {\\n    assertEquals(\\\"OK\\\", Challenge.decrypt(new int[]{79, -4 }));\\n  }\\n\\t\\n  @Test\\n  public void test5() {\\n    assertEquals(\\\"Tomorrow, 3 pm in the garden.\\\", Challenge.decrypt(new int[]{84, 27,  -2,  2,  3,  0,  -3,  8,  -75,  -12,  19,  -19,  80,  -3,  -77,  73,  5,  -78,  84,  -12,  -3,  -69,  71,  -6,  17,  -14,  1,  9,  -64 }));\\n  }\\n\\t\\n  @Test\\n  public void test6() {\\n    assertThat(Challenge.encrypt(\\\"Sunshine\\\"), is(new int[]{83, 34, -7, 5, -11, 1, 5, -9}));        \\n  }\\n}\",\"language\":\"java\",\"summary\":\"It's time to send and receive secret messages.\\n\\nCreate two functions that take a string and an array and returns a coded or decoded message.\\n\\nThe first letter of the string, or the first element of the array represents the Character Code of that letter. The next elements are the differences between the characters:\\ne.g. A +3 --> C or z -1 --> y.\\n\\nExamples\\nencry\",\"tags\":[\"strings\",\"arrays\",\"loops\",\"cryptography\"],\"timestamp\":{\"$date\":1570545694693},\"title\":\"Difference Cipher\",\"stats\":{\"completed\":{\"total\":408,\"ratings\":[3,3,3,3,3,4,2,4,2,3,2,3,2,2,0,3,4,4,2,3,4,4,0,2,0,2,2,5,1,2,4,1,3,2,2,3,4,2,3,3,2,1,0,2,2,2,4,4,2,3,1,4,2,4,0,3,2,2,2,2,4,4,3,2,1,2,5,1,2,4,1,1,3,3,1,1,3,2,2,2,1,4,4,1,1,4,3,4,2,2,1,2,2,2,2,3,4,2,3,3,3,2,2,3,3,2,1,2,3,4,1,4,4,0,2,4,4,2,2,3,4,3,0,1,3,1,2,2,1,5,2,0,1,2,2,3,0,3,3,4,1,4,3,3,2,4,2,2,2,3,2,5,3,1,3,2,3,2,3,2,4,3,4,2,3,2,3,2,3,3,4,3,3,0,2,3,3,4,3,2,3,1,2,2,0,2,2,2,2,1,3,4,2,2,3,3,3,2,1,2,2,3,3,3,3,3,4,2,3,3,4,2,1,2,1,1,4,4,4,4,3,4,4,2,1,2,2,2,1,2,3,4,3,1,4,1,1,4,4,3,4,3,4,3,2,2,3,2,2,4,3,2,5,2,3,4,4,4,4,4,3,3,4,1,2,2,3,4,3,3,4,2,2,3,4,4,3,2,3,2,1,3,3,3,4,2,4,3,5,3,2,3,2,2],\"rators\":[\"3pdgguqZgNDSAJSGm\",\"5Qvy7fNM2YEQ6PtbY\",\"Jar98ydEeiMzKPisZ\",\"WchA4bbn7Kjauvosp\",\"sHsDW2KDDHSXKdzqj\",\"ooSDfWnRKAagCquQz\",\"fQCHGFe43dEtqjEFT\",\"urckS99caSjRxPBvp\",\"2cbTKYSPwFJBoEtay\",\"SnY7WidXJoAyyuPuA\",\"QnquGsuThZftx7GB3\",\"FvWKuSqHdXZ7HM2sD\",\"YWnFYSYAv4jbY4Mmc\",\"sxci7DYKNa6q22Sjq\",\"YF79LnTdprobbYY5v\",\"hZr4qXRsSumkpJXK9\",\"hxi9vPuDgrQv4m86Z\",\"3gxJoNp59B4eoyyed\",\"NoLRdmLAS93CYxz3k\",\"NCB3RaRBonefnHBJD\",\"SY53jSpd7FA4RJX7L\",\"pzz8vFouna6JTTAiW\",\"Ytye5oMhk6r5aaBvg\",\"BSDtieYGg6H7evesT\",\"mP3xxS7JxmPfbE2Hb\",\"dGscPdzKKe2p4qYzs\",\"k6gFxcu8xWXTFc649\",\"BuHsxzTGLtNuPbimk\",\"W4jpCs2jekeg5qAwc\",\"Prw5Jq38wrSoj5QSF\",\"CYt2jTCEuK9dYWruk\",\"HHN8HYX8cNqfrh2Sb\",\"vuMBgKQRnA4HsuWjR\",\"Xf5mRzAb6BoGp7daC\",\"eXW8reZCCZHQzJjQi\",\"oDZaopxpPAdqWXLqz\",\"QPSwhNevikT7q8mz8\",\"XA2QfKNqbWYPcvoCH\",\"J9zJq7PMGb6mqzcHW\",\"cwfpQQAowCJCE3zME\",\"AzERMCwmKzy5zXJ3S\",\"wpvJWmW9TxQQAZk4J\",\"iJnqYBp3CLPXhHxpY\",\"cCrirxZEzgAwQt2T9\",\"WWeYL9cKT25sFktzx\",\"Mwwrey7CShRCCjYkj\",\"wckidbxoEjdmA4XYP\",\"fZky27mpbfX7soJKa\",\"rGJc58P2s2CgReb4P\",\"kXEfD7xxEyWd7oxxL\",\"rCYqoubwDqJzhg7xY\",\"T64kQFotchv7vZBTR\",\"3MC9BEFNZaWzpTJNi\",\"ko7oJ85JMftgcbkrr\",\"2PR653L4KSN97r534\",\"4RHx3H8EwP2oboW8e\",\"ngRNQYczN4QJ2tDN8\",\"QBTJMLDYXeGZv9JAR\",\"hhSKYujojYnHiKFy7\",\"8J2Dqqz9PaFufQzwY\",\"Es4eX2stRpyoXeC7f\",\"AyrEvM2GLX2jqM772\",\"KXYHpCQvmTtpbGXYg\",\"A9eMaKGSpao4bJTdi\",\"D7dpRtRQDmteDSAXv\",\"fbYN9Jp46RqBqCd2K\",\"oeEDPQaCwHFFXsrny\",\"BNXr2RE3m9Eo38Zwm\",\"9aHkSrEhWL7Tp928N\",\"YoAExADzvt4hWjSsW\",\"cjxsqXfkAPoadmppi\",\"LZSxphM8vH4A6Deqn\",\"iA6Gx7kyiPLLHvnAA\",\"zeE9TvhkPfebAq9n8\",\"feubnquqgyoq3sa3Q\",\"SfhMTK5ykctdKbCSp\",\"7CRtTWC425yAMHdAp\",\"o8nq6xgmNTqCRmo5L\",\"rehehi2Tr2mwaEoJE\",\"7djAghy9fBhtLnKw3\",\"73LN453oCGd2QepJz\",\"f76aPaxSWijM63grz\",\"gGnDsJz5hr2t9MKCF\",\"9xJpSQm6BFmgL3ee9\",\"MoJkNaEXTLphvZJXf\",\"xnhBi4BCdJNAXXRvk\",\"BEjoBzgdBkGbGHJkv\",\"etoSR23iELGGgs9rA\",\"iZFvoFSQ7qMcQPNjD\",\"oMLSgpSFQnY4ui8cB\",\"ACf6AmrM79A5MPXgW\",\"PErEzX9YFvY2Yzfh2\",\"kkyZ4oyYQC898Nttj\",\"JpjuqGXmqhqP2Tx92\",\"Xxh4mouSqCQwxnenc\",\"FPEBRwmRm2EDuKQym\",\"5seiNqw6ZXoF2GRRd\",\"hhMAwBqndJn8K53DM\",\"Wh7DKfxkYbMYjE3xw\",\"Y8fG59oLxqYKDNSsH\",\"D6J3wu8fB5ksyoya6\",\"TFnJ8qPq6iLYKr6xe\",\"qQ4wCuRvdg7dQxEk2\",\"KD9nCGrRpZsQ9zFxr\",\"csRoCgJx5NBJzW8pX\",\"82weQfHHmno4Mq4X7\",\"sr27rpnTYHBEvuq2c\",\"TrquEHytntLKHA4m2\",\"dDP6nt8ihp6FPeT27\",\"uRgbrK32AffPh4eQd\",\"yNa2KfyrokkiqLnW3\",\"8jd8xeC92JXT5WTKk\",\"DkSMZ3jZLkwviKb9g\",\"jyoLggHk8xQKZuoQC\",\"6L2mY27W8hHLopyh5\",\"4iMe865JrPvg2uaqA\",\"imoNrk36ozReP939p\",\"pBMXMQem6BpSeooYT\",\"htXCitorobtqYymjN\",\"aCCr8Sja3Rdu2XWwM\",\"9pCPyhvQmbkWyD2LL\",\"jJ4baHkSiJ8MWg42t\",\"rA5nhfhFwfqvmJb6M\",\"BYNY9LLqCBykgMJsq\",\"HKhmCEQjK2PEHsSxx\",\"i3TRCkidxKop3WtE2\",\"zbGJGwm2a7un8F5T5\",\"uuN5sdoMNjtRZwXiL\",\"DaAAhZHM9uKeTQuLK\",\"vu4p8GiTrrF7qCnBR\",\"pWtxhELmYYppvBoBh\",\"T2vhHPhRR96hRizq8\",\"dcW9oK2uRo8h8mBe2\",\"vEN56nHw7hTxbyHhp\",\"ZiN6yB9rACMaYgseC\",\"4CryJmbEsruAELrDt\",\"XTuxCoKrN9DZ7zaQx\",\"5r8vhoA5DnyqduYNc\",\"QWpSRiqacSshJxBKK\",\"osXNzc2aCxspRwheS\",\"8cNwvZmhWX6rjg2B2\",\"6pm5Xq4rqAr7Dnmei\",\"GaMuEuNYSuw3H4WM7\",\"HjpTiqjuvmugTGQPW\",\"zMgdmdfJesGcubnMB\",\"AxWLAsQ9dKQTeSvA5\",\"4Q8ph6FixDyQqpHKa\",\"bSC6ngawTGgvzvjsx\",\"NzJKK8Cuf3bcqZfcw\",\"4tdfxCGvrAwAMvXQB\",\"z6unNHGqyaP8ErxhD\",\"nchwCYoYGxS4MPsiF\",\"P4ETSRBvdbH8NvCTT\",\"QS45qu2DFXcCqpAnB\",\"hGGtPhy7rEKasv2Hr\",\"S92sQrhhhzMyXND9X\",\"pPLvqmxqj4cNSqT2M\",\"mwcjmxMW9msmCFibs\",\"rWhXHhzF4W8bea6LP\",\"yv5NdD4gS38t98fRL\",\"Y6iGX7YzdSaFz8Sx2\",\"c7uBxu2rgY77H5d79\",\"yerb5K6AtDK6827kb\",\"4H7gXq7yqMbDNAgJ3\",\"jRqY4i8gPemsZMBGf\",\"NdQYDnatGiSYeyCZs\",\"fYDgbah9PP839eG2w\",\"azAzSkvJd7eyXY9x9\",\"rcxMWFiwvoskMqzNB\",\"sdaQz8wK52fdQNLos\",\"u4dahDL298kihkfyX\",\"bjKYBdDcGMRTfooBs\",\"Ym8AjbKGSJooun3nt\",\"NsbHPeWBtAonYNXZc\",\"eoCbZS5Z8MXEWyAyx\",\"ESp9kNHf9TqkzbTEx\",\"pRWBqe3qaZLiPtiCE\",\"4EgvAetsugpzG8HGh\",\"Jm4CXufA2GcS2X9Ar\",\"MhSbFaHSTBk2MMZyo\",\"yiHCqsJuZLL6eMNuF\",\"xdS2Wao3BYiWTo4H2\",\"4gsam6sAAtEPiafzc\",\"rejRAgzijGuvYu8Ku\",\"m6EqR6FY65MGzo7vb\",\"a5Y8ZA5qq2eupPK65\",\"xccpBNqmFPiimbfe7\",\"mbMjomA8uYtpxwNin\",\"KooD342x6eT6YiQn8\",\"eqjXExxJKYth4CT8j\",\"dCQC9E8RfYEDBeqoo\",\"Jhwj7GipgLc42iWc4\",\"prMmBM6nCSRxdsmxq\",\"eBgN48uPauTRcPpRb\",\"ecyYaPZLMBMGGrfrJ\",\"4viuRkyFodpGnSDvN\",\"fLjJxvD46DDekhdny\",\"gKa9rqX7DLeYKjomz\",\"9RPK7inRF9bnkkuNd\",\"6QHXQkQAcXMJ7C2kK\",\"GRpEkxhCBeoZrGfuP\",\"AYumLbifXQtQ6knE3\",\"A3sCeFiyP6qEkhviG\",\"gJbvbqosimaP4ZAYb\",\"2xFvy6u3hE4LtCXMD\",\"JXzLQnLRChtrgKDe8\",\"yuAHgMXRcbo2qBwEY\",\"gXTAie79kiw28tx5u\",\"tuKfJSqccPhjfe8ER\",\"TZk7ZK6ejLsTr6Bgz\",\"teCXwHEeoixDCPt9u\",\"aXZmHeKdos7oprdK9\",\"T6xRoSqcSHjvP2Tik\",\"NQ4btGLfcvAnXjAyP\",\"wrWSBhn6PoFcuYrzD\",\"YL9pqyCu8xsds8J49\",\"9o7Sp5AvxK75cQ3jD\",\"jGGZ3bryxsN7q9Gna\",\"qMds9ppJy2Tn9wxEp\",\"mQKWauR6b252TmdX4\",\"bTCq6CQ3SGjrRfZeQ\",\"Qd5KQgNpzwhzBBFZk\",\"oRi93mrm7DLdeiFjf\",\"BKcqjzWDsLeJYqEmc\",\"SDSvWibEfFvh3mFaQ\",\"udHFfcqNNej6udnpP\",\"yH59scXvWtt9hSTMi\",\"a2rXtpvi3JwF7mnNd\",\"zTM2NbjE6q5Q2HSeF\",\"LrgQT4bdiLbHrprXu\",\"2CLvCKwQvRQC8NHXp\",\"Dfi5TiKaasaHsfFSo\",\"N7avy6uzsmrpxNioD\",\"7neGYbwRAanLxXYTw\",\"QPnQWa4xhziEMRF8m\",\"cYcENRkajQioCLH9u\",\"S5wadeB6NQhyQGzJS\",\"7W8yYT7ktkAoNo3u8\",\"bkTWNf4MMEvWghHWH\",\"vs78fRQErHJZWFaTc\",\"EFqhE7GRf6PSKMSg6\",\"6etwWBTiBYhiwd2oF\",\"GBLXSzmKSde6y2bsy\",\"6fdRGt8yHjBgMK4n5\",\"fLGZEPJS7jSsnvGJX\",\"qSbYAMwsRo5NyWyue\",\"tp4spAxkgt9WQhLjZ\",\"3KfYhvNbEWLatcBcB\",\"RNZbWccE6Q5BDKxcy\",\"3mqwov5TxpQY3Xcb8\",\"L23hXCKLuxXL6b9Et\",\"YGoEo3M5Q93BzxBqX\",\"btabi3PdyisuY5tn9\",\"w883snt8ALo793vDg\",\"opeNyowQErAgvjZ7x\",\"mMBuEpu4HJapyPECj\",\"p2woPCQKXuWJCwffJ\",\"jxeDegnzpCQMcRz6Q\",\"4fpPZ59wamBBPuBdz\",\"ey5557C4wS8kpYoTe\",\"SEX5AGLMFRSainDmC\",\"NP3JxveoZpoNf7NgK\",\"X42wZkk5sWHwRQaP5\",\"psZB2zLasaMgtf3Tb\",\"QTieDiq7DcTzf4KCM\",\"GZgnevRushqx7s7FP\",\"74H6JGSiskcQdvvX6\",\"e3eG3e3CKpTAc56aJ\",\"zHSbLcbw8Z8WcFaba\",\"MBB7P2iY7QWp3MuoM\",\"h8mLc9ktYtnHbLdTR\",\"moCvhdrCk7YgYa8Kc\",\"5qfcG54cbBC8ujxav\",\"GRCNFz4RR4JfNTeWD\",\"DKe9PeHnDuQeqQ2Df\",\"QGQtHT2rYPorw49no\",\"9t3ph5taa7xAGzzxa\",\"afkauFSxfoswxhERu\",\"26S7LH2wXiJS2NzZ3\",\"H5KSDzxwGtgftsuik\",\"Q8ef94JCRdFXXx6hH\",\"dnbrMKPiyQZZd5ist\",\"ZTRSyqnk6uHJvrF2m\",\"CpCDwypyvfaZZbkBK\",\"yEDrzzFjReDWNt8By\",\"TJKGcBJJQbnq7G8mo\",\"ys8RhngrH3Cypi3y2\",\"kh3LvxFNX8oCxeYnN\",\"bKA7RmnzLMg2JHezG\",\"xa3CFkeyE66qrfTZ9\",\"gBNyD9imKSugp2vGv\",\"qb2DTmzQj4vNfq5K7\",\"78jr9niDyrYuiCXnX\",\"C6iZZScoh8yLggyMa\",\"9JXXpJLvmWfLEM6ii\",\"hzxrGwEsuGbpKDRYQ\",\"PtKvGfg5Hvk25zWRc\",\"tDjDygopNyXLZnjAH\",\"hhxjQREtmHSheH9Pj\",\"qp4L4SgDqecMhDeEF\",\"vsuMfBgRWw8c2ATQn\",\"gQg7CQtc2FcC8BuR2\",\"A7Z9ohZj74WNoXsdW\",\"Pu3sYXcqn9hzNbdw3\",\"9pvZWS3WedxxBkCHb\",\"hAoCzaYxTLgFxqhsw\",\"vryzFKsJwQeXEXAFN\",\"aykgiHhHvd2fYho4d\",\"ayYvspA4txxWtbwsZ\",\"tW4Zfi77w3EWXK936\",\"CRMSuRGAy3MgTBwA9\",\"oGqs9g6LG6FMJC8Xr\",\"HkGx7Cq3byChBSXSd\",\"xkYcJdzWJvcRJ2jYs\",\"sC4r5LD43Cz8G9aqF\",\"FZB8ZMfhpuE4FGZyb\",\"CLwXdKtQyrCMinj8y\",\"7wdGdYJcjLAFr73zv\",\"zhBLdEk5WtthZdhRD\",\"xBQC5uQdx6WndJ3iM\",\"nJWdfBTvGe5DFQNx3\",\"iwPwuaaE86cYuE7wM\",\"QKZ2SSsMqQtCDiCaM\",\"nt5JdfvC89XfxkkZa\",\"Dzgj6vJNAWXkLzSXC\",\"Z5yx2PADNWHXWkq48\",\"BZQqHYCLAmLHsK4C2\",\"5E2ZXZvkJcZvRkkEA\",\"NA9nucroLAEySGdRg\",\"YLqdr7bYjwew2KM4N\",\"zvJmG69i6mFm2hHLG\",\"xuNYWdXut4gbG7KJF\",\"TGebnm4LKoayeYWe3\",\"BS7gCCdCBhSaYFqbr\",\"WtCLpWmiWpWmq6LJx\",\"XbbcA7iXFz9y2XneB\",\"9dKdiwi4RQCRQAYzC\",\"GN9XeNCnAiMWoz2XJ\",\"8LMhYDqnWXEbBYAoH\",\"c3NRnPSDorM6Sshcz\",\"bwtkQ5TypiCdBhWDZ\",\"nHj7SC5cnmkTApbgY\",\"gHLfSu6KuoBneHaZ6\",\"ptdqCGzsYYs7hW234\",\"rRLzNW4bS7PHwYYat\",\"hJ87kii3LojmKdcYA\",\"saGfNwYzR6HgtohK8\",\"N735m9s7a53x3oFf3\",\"KhNzQ6xj6RZb2jbJi\",\"cqLEjfmmutsrc6KXZ\",\"bt5Nww8rtNXkkGiga\",\"XKfTKW43MXDBZLCLs\",\"gvPRkxN6Cck82Htx9\",\"rhS8qXRjZcpDXkwnE\",\"JqgosFnie7japkhdy\",\"rpRETBr9s4hgFNtPb\",\"tDRtLgcvwpvSyosEi\",\"o9yCCrPKpzPFobo2z\",\"dTFWmBaz6QaPZxSAD\",\"hRJTCmZsPrYF8nAnf\",\"mLMB6d7jTF7jhxzvt\",\"rEWbYF9mHh28oRvT9\",\"xRtztbrsz9gsFneoY\",\"qErjDvAq3xwtwBWuD\",\"Z3JZpmrNTwzgpob2n\",\"yksKANSnmzAN9pniT\",\"aqhzzoK9fofcL3mJQ\",\"9vyjn4WyWtJ6o2wop\",\"2NJZbusRvu3eJ4tHu\",\"KMR6vNzvSKMA2cXnK\",\"e4WhfhAzzRt22JbP2\",\"8okfc8E3pb37QNpzQ\",\"jGjGWp7kipdDj4suc\",\"FNtLDh2Jn4otuD5rY\",\"wFRLGjA56kj7xyhmv\",\"KynKKsWLhhes3ZGiu\",\"q84QmwHajeP2v6tfq\",\"jqLmwSB9oGb8NxYKf\",\"PAKigrfHiLyscnCJo\"],\"quality\":[3,3,5,2,5,5,4,5,4,5,3,5,3,3,5,4,3,4,5,5,4,4,4,5,5,5,4,3,4,3,4,5,5,5,4,4,5,4,5,5,3,5,5,5,4,4,5,4,5,5,5,5,3,5,5,5,4,5,5,5,5,5,5,5,4,5,4,5,5,3,5,3,5,3,5,4,4,5,5,5,3,5,4,5,5,5,5,3,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.388888888888889,\"family\":[{\"_id\":\"ndHbz9qNx2hfwzC22\",\"language\":\"cpp\"},{\"_id\":\"up28bykyiB48MqeSF\",\"language\":\"csharp\"},{\"_id\":\"KZrmicjc8zCZyGNee\",\"language\":\"java\"},{\"_id\":\"vzvh4papXafwAWSNS\",\"language\":\"javascript\"},{\"_id\":\"vCRP3WXbJ9erKFsiK\",\"language\":\"python3\"},{\"_id\":\"yS6nWohW8oyrc939e\",\"language\":\"ruby\"},{\"_id\":\"4xs6Rp4Aiet3sqmji\",\"language\":\"swift\"}]}}"]