a["{\"msg\":\"result\",\"id\":\"791\",\"result\":{\"_id\":\"M69ui5BrdTjACd3R3\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class BitmapImage {\\n\\tpublic static String convertToBitstring(String time) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":3.44,\"familyId\":\"ZBbMfHp9GzXaTzim6\",\"instructions\":\"Write a function that converts a bitmap image of a digital clock (represented as a string of the form: `hh:mm`) into its representational bit string. A bitmap image is a by-product of parsing bits (`0`'s and `1`'s) from a canvas which is basically an image in black on a white background, where `0` represents the white background and `1` represents the black pixel (it's what an image is composed of, technically). The general idea of this challenge is to encode a bitstring that reflects the image of a digital clock (of this format: `hh:mm`). The images below are basic examples of how these are conceived.\\n\\nThe clock face shows the time in a black on white background where each character is three cells wide and five cells deep. Notice there is a space between the numbers represented by a column of blank cells:\\n\\n![Time 2135](https://edabit-challenges.s3.amazonaws.com/2-CPZCo90s.png)\\n\\n![Time 0647](https://edabit-challenges.s3.amazonaws.com/1-JUGyThgYu.gif)\\n\\n![Time 1859](https://edabit-challenges.s3.amazonaws.com/3-IUPlkMjnHD.png)\\n\\nEach image is 17 bits wide by 5 bits deep. Each row is encoded as a 17 character string of `1`s and `0`s and the five rows are then concatenated into an 85 character string. For example, the above image is encoded as follows:\\n\\n```\\nrow 1 = \\\"11100100001110111\\\"\\nrow 2 = \\\"10101100100010100\\\"\\nrow 3 = \\\"10100100001110111\\\"\\nrow 4 = \\\"10100100100010001\\\"\\nrow 5 = \\\"11101110001110111\\\"\\n\\nbitmap -> \\\"1110010000111011110101100100010100101001000011101111010010010001000111101110001110111\\\"\\n```\\n\\nLooking at the above rows and examining it carefully, you should be able to see the clock digits in the pattern of `1`'s. The first three columns show the number `0`, followed by a column of all `0`s representing a space between the numbers, then comes another three columns representing the number `1`, then three columns representing the character `:`, then three columns representing `3`, a column of zeroes representing a space and finally three columns representing the number `5`. The resulting time is `01:35`.\\n\\n### Example\\n```\\ntoBitString(\\\"05:44\\\") ➞ \\\"1110111000101010110101000101010101101011100011101111010001010001000111101110000010001\\\"\\n\\ntoBitString(\\\"12:13\\\") ➞ \\\"0100111000010011111000010101100001010011100001001110100100010010000111101110001110111\\\"\\n\\ntoBitString(\\\"12:17\\\") ➞ \\\"0100111000010011111000010101100001010011100001000010100100010010000111101110001110001\\\"\\n\\ntoBitString(\\\"06:46\\\") ➞ \\\"1110100000101010010101000101010100101011100011101111010101010001010111101110000010111\\\"\\n```\\n\\n### Notes\\nThis is a reversal of this [challenge](https://edabit.com/challenge/ecR654j7ivFqs2WPi) which was originally published by @persolut in JavaScript.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"/** \\n========================================== \\nTestGen 3.1 for JUnit 4.13.0 \\t\\t\\nTest Case: BitmapImage::convertToBitstring \\nTimestamp: 11/28/2020 01:11:14 PM \\n------------------------------------------ \\n® DARKKO 2020 © \\n========================================== \\n\\n**/ \\n\\nimport static org.junit.Assert.assertEquals; \\nimport org.junit.Test; \\n\\npublic class BitmapImageTest { \\n\\t\\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertEquals(\\\"1110111000101010110101000101010101101011100011101111010001010001000111101110000010001\\\", BitmapImage.convertToBitstring(\\\"05:44\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertEquals(\\\"0100111000010011111000010101100001010011100001001110100100010010000111101110001110111\\\", BitmapImage.convertToBitstring(\\\"12:13\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertEquals(\\\"0100111000010011111000010101100001010011100001000010100100010010000111101110001110001\\\", BitmapImage.convertToBitstring(\\\"12:17\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertEquals(\\\"1110100000101010010101000101010100101011100011101111010101010001010111101110000010111\\\", BitmapImage.convertToBitstring(\\\"06:46\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertEquals(\\\"1110101000111010010101010101000100101011100011101111010001010001010111100010001110111\\\", BitmapImage.convertToBitstring(\\\"04:56\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertEquals(\\\"0100111000111011111001010100010101010011100011101010100001010100010111100010001110111\\\", BitmapImage.convertToBitstring(\\\"19:20\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertEquals(\\\"0100111000111011111000010100010101010000100011101110100001010100000111100010001110001\\\", BitmapImage.convertToBitstring(\\\"17:29\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertEquals(\\\"0100111000010011111000010101100001010000100001001110100001010010000111100010001110111\\\", BitmapImage.convertToBitstring(\\\"17:13\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test09() { \\n\\t\\tassertEquals(\\\"1110111000101011100101010101010101111010100011101011000101010001010111101110000010111\\\", BitmapImage.convertToBitstring(\\\"20:40\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() { \\n\\t\\tassertEquals(\\\"1110111000111011110100010101000101101000100011101111010001010001010111100010001110111\\\", BitmapImage.convertToBitstring(\\\"07:58\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test11() { \\n\\t\\tassertEquals(\\\"0100010000111011111001100101010101010001000010101110100010010101010111101110001110111\\\", BitmapImage.convertToBitstring(\\\"11:08\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test12() { \\n\\t\\tassertEquals(\\\"1110111000010011110100010101100101101011100001001011010001010010010111101110001110111\\\", BitmapImage.convertToBitstring(\\\"03:10\\\"));\\n\\t}\\n\\n}\\n// end of tests\",\"language\":\"java\",\"quality\":0,\"summary\":\"Write a function that converts a bitmap image of a digital clock (represented as a string of the form: hh:mm) into its representational bit string. A bitmap image is a by-product of parsing bits (0's and 1's) from a canvas which is basically an image in black on a white background, where 0 represents the white background and 1 represents the black pixel (it's\",\"tags\":[\"strings\",\"validation\",\"regex\"],\"timestamp\":{\"$date\":1606544944951},\"title\":\"Bitmap Image Conversion\",\"stats\":{\"completed\":{\"total\":24,\"ratings\":[4,4,4,4,4,4,2,4,0,1,4,2,5,3,2,5,4,3,2,3,5,5,2,5,5],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"gXTAie79kiw28tx5u\",\"4NHyP9TLFudCGghZQ\",\"YNR2PAWqhpSMexy47\",\"rvExrAkJ5dRo2R8YX\",\"zhAT2xfiiWXNBQGFo\",\"NDFranBPXpjtB9pwa\",\"hFv4BuqgsJtNyvyNF\",\"raEwczXwgfb9rZ4o7\",\"9pqtNWrsTJdZcRbEZ\",\"MqyvPyccJ2XMrQYg4\",\"4pagg6vw2Cjepv7tN\",\"zZcJgEWLXwZzdsm67\",\"7ospYKSiS9uy932FK\",\"dfQntx8ifmHPs6xYj\",\"DkSMZ3jZLkwviKb9g\",\"GvLLKHi7NwAjutdDk\",\"Su3vDnttRBpxeyDen\",\"rdMJHzgtpDruyQsRF\",\"KeY28EdQJoPt49eir\"]},\"flags\":0},\"editorId\":\"a777e8chPvJkY3tKa\",\"family\":[{\"_id\":\"M69ui5BrdTjACd3R3\",\"language\":\"java\"},{\"_id\":\"6MdNdfEbym6YDoBHX\",\"language\":\"javascript\"},{\"_id\":\"Wk9xXZiqqH8MrewgA\",\"language\":\"python3\"}]}}"]