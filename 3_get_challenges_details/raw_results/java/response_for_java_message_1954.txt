a["{\"msg\":\"result\",\"id\":\"534\",\"result\":{\"_id\":\"HjvecTb3aFMjJ59sB\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"public class Challenge {\\n\\tpublic static String toCamelCase(String str) {\\n\\t\\t\\n\\t}\\n\\n\\tpublic static String toSnakeCase(String str) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":2.095890410958904,\"familyId\":\"rJeHMN6JMpfhyZGiy\",\"instructions\":\"Create two functions `toCamelCase()` and `toSnakeCase()` that each take a single string and convert it into either camelCase or snake_case. If you're not sure what these terms mean, check the **Resources** tab above.\\n\\n### Examples\\n```\\ntoCamelCase(\\\"hello_edabit\\\") ➞ \\\"helloEdabit\\\"\\n\\ntoSnakeCase(\\\"helloEdabit\\\") ➞ \\\"hello_edabit\\\"\\n\\ntoCamelCase(\\\"is_modal_open\\\") ➞ \\\"isModalOpen\\\"\\n\\ntoSnakeCase(\\\"getColor\\\") ➞ \\\"get_color\\\"\\n```\\n\\n### Notes\\nTest input will always be appropriately formatted as either camelCase or snake_case, depending on the function being called.\",\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n\\t@Test \\n\\tpublic void test1() {\\n\\t\\tassertEquals(\\\"edabit\\\", Challenge.toCamelCase(\\\"edabit\\\"));\\n\\t}\\n\\t\\n\\t@Test \\n\\tpublic void test2() {\\n\\t\\tassertEquals(\\\"helloEdabit\\\", Challenge.toCamelCase(\\\"hello_edabit\\\"));\\n\\t}\\n\\t\\n\\t@Test \\n\\tpublic void test3() {\\n\\t\\tassertEquals(\\\"isModalOpen\\\", Challenge.toCamelCase(\\\"is_modal_open\\\"));\\n\\t}\\n\\t\\n\\t@Test \\n\\tpublic void test4() {\\n\\t\\tassertEquals(\\\"getBackgroundColor\\\", Challenge.toCamelCase(\\\"get_background_color\\\"));\\n\\t}\\n\\t\\n\\t@Test \\n\\tpublic void test5() {\\n\\t\\tassertEquals(\\\"isLoading\\\", Challenge.toCamelCase(\\\"is_loading\\\"));\\n\\t}\\n\\t\\n\\t@Test \\n\\tpublic void test6() {\\n\\t\\tassertEquals(\\\"x\\\", Challenge.toCamelCase(\\\"x\\\"));\\n\\t}\\n\\t\\n\\t@Test \\n\\tpublic void test7() {\\n\\t\\tassertEquals(\\\"edabit\\\", Challenge.toSnakeCase(\\\"edabit\\\"));\\n\\t}\\n\\t\\n\\t@Test \\n\\tpublic void test8() {\\n\\t\\tassertEquals(\\\"hello_edabit\\\", Challenge.toSnakeCase(\\\"helloEdabit\\\"));\\n\\t}\\n\\t\\n\\t@Test \\n\\tpublic void test9() {\\n\\t\\tassertEquals(\\\"is_modal_open\\\", Challenge.toSnakeCase(\\\"isModalOpen\\\"));\\n\\t}\\n\\t\\n\\t@Test \\n\\tpublic void test10() {\\n\\t\\tassertEquals(\\\"get_background_color\\\", Challenge.toSnakeCase(\\\"getBackgroundColor\\\"));\\n\\t}\\n\\t\\n\\t@Test \\n\\tpublic void test11() {\\n\\t\\tassertEquals(\\\"is_loading\\\", Challenge.toSnakeCase(\\\"isLoading\\\"));\\n\\t}\\n\\t\\n\\t@Test \\n\\tpublic void test12() {\\n\\t\\tassertEquals(\\\"x\\\", Challenge.toSnakeCase(\\\"x\\\"));\\n\\t}\\n}\",\"language\":\"java\",\"summary\":\"Create two functions toCamelCase() and toSnakeCase() that each take a single string and convert it into either camelCase or snake_case. If you're not sure what these terms mean, check the Resources tab above.\\n\\nExamples\\ntoCamelCase(\\\"hello_edabit\\\") ➞ \\\"helloEdabit\\\"\\n\\ntoSnakeCase(\\\"helloEdabit\\\") ➞ \\\"hello_edabit\\\"\\n\\ntoCamelCase(\\\"ismodalopen\\\") ➞ \\\"isModalOpen\\\"\\n\\ntoSnakeCa\",\"tags\":[\"algorithms\",\"regex\",\"formatting\",\"strings\"],\"timestamp\":{\"$date\":1555135312112},\"title\":\"camelCase  ⇄  snake_case\",\"stats\":{\"completed\":{\"total\":158,\"ratings\":[2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,2,1,2,2,1,3,3,3,2,2,2,2,2,2,1,2,2,1,2,2,1,3,4,1,2,1,3,3,2,2,2,3,2,4,2,2,1,1,4,2,1,1,3,2,0,1,3,3,0,2,1,1,3,3,0,0,1,1,3,2,2,2,3,2,3,0,3,3,0,2,3,1,2,2,3,4,4,4,3,2,3,3,2,2,2,2,3,1,2,4,2,3,1,3,1,2,3,2,3,1,2,1,2,2,2,2,3,2,2,3,3,1,3,1,3,3,3,1,2,2,2,1,2,3,2,3,3,3,2,1,2],\"rators\":[\"mNMQvcxKSSvqqMYCH\",\"u437YTqDGSjh49fsY\",\"evC88a8DJEtzeNxcN\",\"erJWHqarGkGtPJ3C4\",\"RSQAwSucRXGyQByY6\",\"GJXFSHfvKE7qPW2C4\",\"iKHb6gRqZJwYy7QWi\",\"yJyjT7Z2PPQmzzWpP\",\"2tY9mv42frs6RWBpg\",\"ye4QaoZY96k76jXB7\",\"GcBdm7qQzNe76NhCa\",\"DXS2HfvHG3ozACfnb\",\"z6gRoaKmajaC6FgYb\",\"HrHpJ7rbDhdpGvaHe\",\"XTCebLPQLaxTt8N7C\",\"nheisS6Prip7Fg3Hh\",\"TbbTQWFfnBweNtc9s\",\"ZhB3Q2g4X9kKe4gag\",\"L8KR8FTXXY4o6ynRW\",\"JMDx2cfKatEdXHbLf\",\"Zr2pbysK4SeF4B9mu\",\"GGzLYtaTXsACzoJeo\",\"QdMda8ZPeux6FcasR\",\"ydos8Ba8nZdYRNJpS\",\"yhk8G8cM3p9JAbfJN\",\"SoWjJWtXbe3zhdTZZ\",\"7bPLRCrHuibtAKF4B\",\"dRpSwgukY2jHSxuwq\",\"a6b7tDTfcvkoGnjL5\",\"5znpaFDoToJtAtF3h\",\"iRQjJDGjBfgpi9jEX\",\"BWJy5EgufucrbFMhu\",\"4MWMwGbthkTMu3dkb\",\"aMNhTh35QQAs33ycQ\",\"eKEh8g38b5Mmq8dfP\",\"r8psypGwjugcikjEy\",\"a49eNnfRwSMxsDJXf\",\"9rf9Q2pPyhCac2Rkn\",\"gFBdukXgZwbSqJcWd\",\"49atdGPAKyj8mGXtK\",\"EP6PPx5PntGnttWxb\",\"Ruu6cyHhkZD52TWs5\",\"vRXuYYBNuHEQ29fbm\",\"nzC8nRp7RxAGQWv66\",\"6SiW7MNXsCHMQtCMa\",\"hNaDFbHvyjf7Lm4XE\",\"FHSJnAYTbcsKFgeQa\",\"3pdgguqZgNDSAJSGm\",\"sxci7DYKNa6q22Sjq\",\"ZYT9LjgocbP4hzQK5\",\"3gxJoNp59B4eoyyed\",\"BjdBgncMJbp7XXvgz\",\"Ytye5oMhk6r5aaBvg\",\"mP3xxS7JxmPfbE2Hb\",\"NCB3RaRBonefnHBJD\",\"CLmJduqJHX83dM4Pd\",\"C7XYK6hJjzSwiMBpL\",\"yazNfwgLx7jSAZ8Tv\",\"qJZsi5rhRnWA38FbA\",\"2NJuDfSqdrF8kHHni\",\"8J2Dqqz9PaFufQzwY\",\"rehehi2Tr2mwaEoJE\",\"oDZaopxpPAdqWXLqz\",\"XA2QfKNqbWYPcvoCH\",\"eXW8reZCCZHQzJjQi\",\"J9zJq7PMGb6mqzcHW\",\"XdK5xWaepoXj5Y3xv\",\"Apx556jZqyYGFRMkD\",\"2cdvd8yuPLSwvGj9w\",\"dm4ki3fhfE52M3AJL\",\"qRhXvCaA7qgDoeFnr\",\"kXEfD7xxEyWd7oxxL\",\"DkrRKbukuPjeMndgx\",\"D9tfoBpEAnP7BSDZb\",\"ngRNQYczN4QJ2tDN8\",\"nthfon874DGgpWGaS\",\"4RHx3H8EwP2oboW8e\",\"fZky27mpbfX7soJKa\",\"i5QeAsrM4m6hzPTku\",\"2PR653L4KSN97r534\",\"6hsLDaXbCCEsiBr37\",\"AyrEvM2GLX2jqM772\",\"D3YjeE2QrN2kygS3H\",\"C9yBWYcZsjmJYww3K\",\"5TaPWyRv9DZWWodp8\",\"wYYMNPe8nSiJFbvJw\",\"4ThmYBWvyCK5H9qjr\",\"Es4eX2stRpyoXeC7f\",\"9Nbqr6hojRuJQ4MLf\",\"xnhBi4BCdJNAXXRvk\",\"cjxsqXfkAPoadmppi\",\"imoNrk36ozReP939p\",\"gGnDsJz5hr2t9MKCF\",\"9gJsF5apWJGWZJprn\",\"feubnquqgyoq3sa3Q\",\"JpjuqGXmqhqP2Tx92\",\"Kfr4mphodbPQMuHpy\",\"av5QexsdPza9FsRCq\",\"jyoLggHk8xQKZuoQC\",\"TrquEHytntLKHA4m2\",\"5seiNqw6ZXoF2GRRd\",\"82weQfHHmno4Mq4X7\",\"GC3yNNSt76TttDJFk\",\"k63LjKkX5p7SYng7C\",\"mfm3gB39arY8Rjb2y\",\"4RsakkyRXyYGwFxEa\",\"5WQZzuHZBGqFeNQi3\",\"jRqY4i8gPemsZMBGf\",\"u4dahDL298kihkfyX\",\"azAzSkvJd7eyXY9x9\",\"Ym8AjbKGSJooun3nt\",\"gXTAie79kiw28tx5u\",\"oRi93mrm7DLdeiFjf\",\"yXGiiSAR5nBHnH3yr\",\"thA79neuEcM3J8ZHr\",\"mxjrvQP2vPFBjAGxu\",\"DzvdGwHEjqsX7wyKr\",\"mQKWauR6b252TmdX4\",\"xGtxQz9WnAPPKJZxK\",\"jXTnL3JatkKjoifyb\",\"8Xx8nWXRydHDBGfQf\",\"dcW9oK2uRo8h8mBe2\",\"JDPS2gioHDcZsERYb\",\"p2woPCQKXuWJCwffJ\",\"iq55QasecYJXKz8rx\",\"hcJk9AxYyap6pbH8k\",\"mDWNyaaQ9hvPCRzSd\",\"XTuxCoKrN9DZ7zaQx\",\"LNCb5rksJLJ43L4Nw\",\"goioTqpiQhYr5goBH\",\"KgrtpAQRXCBDhpiSJ\",\"zZfMwLuoERGmybgib\",\"Sj97HQNxeG77JukBu\",\"4ySzqKC5s3ZRpG9di\",\"CggGfsERnPKGupFWp\",\"wFRLGjA56kj7xyhmv\",\"htXCitorobtqYymjN\",\"6rvJwN4mcX7iYGjY7\",\"swCqZwsjXhQvZu5pH\",\"TA9dwvnSdta7rTynz\",\"2NJZbusRvu3eJ4tHu\",\"YzfChr4vydjdfpCue\",\"xW9nC9h6p77YT2iso\",\"KMR6vNzvSKMA2cXnK\",\"rWhXHhzF4W8bea6LP\",\"5HGyJtoZ3AffzAZAv\",\"uw47663LqPME8btaA\",\"FxPDKKibxnZjGJLs6\"],\"quality\":[4,5,5,5,5,4,5,5,5,5,5]},\"tests\":{\"score\":0,\"rators\":[\"mNMQvcxKSSvqqMYCH\"]},\"instructions\":{\"score\":0,\"rators\":[\"mNMQvcxKSSvqqMYCH\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.818181818181818,\"family\":[{\"_id\":\"mEEsMKznTCq25PWvD\",\"language\":\"cpp\"},{\"_id\":\"RBqvKrYLxtM57G5FQ\",\"language\":\"csharp\"},{\"_id\":\"HjvecTb3aFMjJ59sB\",\"language\":\"java\"},{\"_id\":\"uts8XsD5zGHdHr32u\",\"language\":\"javascript\"},{\"_id\":\"tMiJJkuAFDfsdmdZK\",\"language\":\"python3\"},{\"_id\":\"wyekSPQ6XgGefuiiy\",\"language\":\"ruby\"},{\"_id\":\"mcFMfwEQscSTZTHsT\",\"language\":\"swift\"}]}}"]