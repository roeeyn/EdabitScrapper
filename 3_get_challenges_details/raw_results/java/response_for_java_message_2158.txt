a["{\"msg\":\"result\",\"id\":\"636\",\"result\":{\"_id\":\"vpSCPsQKcQwnFdMS4\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class LongDigits {\\n\\tpublic static int digitsCount(long n) {\\n\\t\\t// recursive solution here\\n\\t}\\n}\",\"difficulty\":2.287037037037037,\"familyId\":\"dk6TvR3BPp7M89Cav\",\"instructions\":\"Create a function that will *recursively* count the number of digits of a number. Conversion of the number to a string is not allowed, thus, the approach is recursive.\\n\\n### Examples\\n```\\ndigitsCount(4666) ➞ 4\\n\\ndigitsCount(544) ➞ 3\\n\\ndigitsCount(121317) ➞ 6\\n\\ndigitsCount(0) ➞ 1\\n\\ndigitsCount(12345) ➞ 5\\n\\ndigitsCount(1289396387328L) ➞ 13\\n```\\n\\n### Notes\\n- You are expected to solve this challenge via **recursion**.\\n- You can check on the **Resources** tab for more details about *recursion* in Java.\\n- An **iterative** version of this challenge can be found via this [link](https://edabit.com/challenge/aAMcXEH67BLzJfyZz).\\n- A **collection** of challenges alike can be found via this [link](https://edabit.com/collection/Yx78jEBrKppHBNsoQ).\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"/** \\n================================== \\nTestGen 3.1 for JUnit 4.13.0 \\t\\t\\nTest Case: LongDigits::digitsCount \\nTimestamp: 10/05/2020 10:07:04 PM \\n---------------------------------- \\n® DARKKO 2021 © \\n================================== \\n\\n**/ \\n\\nimport static org.junit.Assert.assertEquals; \\nimport org.junit.Test; \\n\\npublic class LongDigitsTest { \\n\\t\\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertEquals(1, LongDigits.digitsCount(0));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertEquals(4, LongDigits.digitsCount(4666));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertEquals(3, LongDigits.digitsCount(544));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertEquals(6, LongDigits.digitsCount(121317));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertEquals(5, LongDigits.digitsCount(12345));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertEquals(13, LongDigits.digitsCount(1289396387328L));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertEquals(7, LongDigits.digitsCount(-1232323));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertEquals(16, LongDigits.digitsCount(3463463874638476L));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test09() { \\n\\t\\tassertEquals(9, LongDigits.digitsCount(-231200000));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() { \\n\\t\\tassertEquals(13, LongDigits.digitsCount(1283939312321L));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test11() { \\n\\t\\tassertEquals(9, LongDigits.digitsCount(-231273683));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test12() { \\n\\t\\tassertEquals(7, LongDigits.digitsCount(3200000));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test13() { \\n\\t\\tassertEquals(9, LongDigits.digitsCount(314890000));\\n\\t}\\n\\n}\\n// end of tests\",\"language\":\"java\",\"quality\":4.716981132075472,\"summary\":\"Create a function that will recursively count the number of digits of a number. Conversion of the number to a string is not allowed, thus, the approach is recursive.\\n\\nExamples\\ndigitsCount(4666) ➞ 4\\n\\ndigitsCount(544) ➞ 3\\n\\ndigitsCount(121317) ➞ 6\\n\\ndigitsCount(0) ➞ 1\\n\\ndigitsCount(12345) ➞ 5\\n\\ndigitsCount(1289396387328L) ➞ 13\\n\\nNotes\\nYou are expected to solve this c\",\"tags\":[\"recursion\",\"numbers\",\"math\"],\"timestamp\":{\"$date\":1601908232690},\"title\":\"Recursion: Count The Digits\",\"stats\":{\"completed\":{\"total\":166,\"ratings\":[4,4,4,4,4,3,4,2,1,1,3,0,3,2,3,4,0,2,3,3,4,2,0,0,2,2,2,2,2,3,2,2,3,4,4,3,5,3,1,2,1,1,3,4,1,2,2,3,3,2,0,4,3,4,2,3,2,4,2,2,3,3,3,4,1,3,4,0,1,3,0,4,3,2,0,3,2,2,1,2,1,4,4,3,1,2,1,1,1,2,3,0,2,3,3,2,1,1,3,1,2,2,2,0,1,3,2,2],\"quality\":[5,5,5,3,5,2,5,4,5,5,4,5,4,5,5,5,5,5,5,5,5,5,4,5,5,5,5,4,5,5,4,4,5,5,5,5,5,5,5,5,5,4,5,5,5,5,5,4,5,4,5,5,5],\"rators\":[\"a777e8chPvJkY3tKa\",\"Es4eX2stRpyoXeC7f\",\"azAzSkvJd7eyXY9x9\",\"KdbZLuYKW8de2JqHT\",\"rehehi2Tr2mwaEoJE\",\"mbMjomA8uYtpxwNin\",\"QXR2qGcvrK5Xkxdea\",\"9pCPyhvQmbkWyD2LL\",\"gXTAie79kiw28tx5u\",\"mGaEDPw5FsDb3vdnq\",\"QfjvAWZnumxpSYpzQ\",\"bTCq6CQ3SGjrRfZeQ\",\"Rkgoxw27b5Tff6z92\",\"8Xx8nWXRydHDBGfQf\",\"FTHXj9Rfx9wdujSzy\",\"pokBD5HvY58t8Aicu\",\"beSt5pzrK2WWpJpna\",\"T2vhHPhRR96hRizq8\",\"pvCNGWe6wKmPsy8u9\",\"39AmjzojzYBxw4Q46\",\"btabi3PdyisuY5tn9\",\"w883snt8ALo793vDg\",\"oMZovHkR6QqNvQwyc\",\"mMBuEpu4HJapyPECj\",\"hmn6qe4B7Nrh6oSGn\",\"Th4AgfxnvqLjbD8fn\",\"Lq5euvCnyYGqoh8Mt\",\"ctKmyqt7eAahx3BoF\",\"cqdhdH7Bi7uXnH4tB\",\"AGsCwY5xbpYaCbvMH\",\"D7dpRtRQDmteDSAXv\",\"zyHHSisus2MpibGkG\",\"zWdW7xDEE9MDGNueG\",\"imoNrk36ozReP939p\",\"Bwn7fKNQ7doek3JWZ\",\"QrveRA7svT9YFxaSM\",\"t2CNnSbqCxZPuBzGN\",\"Pp7jsbvynzzE6jEeP\",\"p2woPCQKXuWJCwffJ\",\"z2toJALPicSBh6PNG\",\"a8mknT8PiJNYqQc3r\",\"pdf4DvSu59karKN5r\",\"Xx4zDNPyphxDXKWCt\",\"4fpPZ59wamBBPuBdz\",\"keBHAFa3mf33e7xJE\",\"rrmzbed5KCwc8bGR3\",\"94Px8YD2ySiJBzYt5\",\"kbguXka4r4FcW2ttn\",\"mwyyEm7iqX5zscgw4\",\"kLMj98oTwmoibCY4v\",\"NP3JxveoZpoNf7NgK\",\"FD3ftyBGYFs29Jsa5\",\"p8qqFdJ3FSk5x9z3G\",\"87aPsoGwZuZ7rSy5e\",\"psZB2zLasaMgtf3Tb\",\"RSSrWo6AiSDRNAy5K\",\"XbBsZ7vSHdw88tibi\",\"iEnmF5jaiupFmCMvW\",\"QqRqJfzs9czad5Brx\",\"foytX6kH9wiSYqLtT\",\"MrjmAYQwSHQw9sd69\",\"xa3CFkeyE66qrfTZ9\",\"BY6YRNSQKP353fqwC\",\"Pu3sYXcqn9hzNbdw3\",\"SDNgGz5BdQHsE9z3R\",\"7s4cY6FiftwB9HnAK\",\"Ae2d7xQBfMhyLMdN8\",\"9pvZWS3WedxxBkCHb\",\"ZbFqBWMdtCys3K4JE\",\"qb2DTmzQj4vNfq5K7\",\"pNtaczpPBxfN5Z9ee\",\"sx2JRmDLsHyF6NQrX\",\"aykgiHhHvd2fYho4d\",\"ayYvspA4txxWtbwsZ\",\"cBjWJeLWTc69ziyFR\",\"NDFranBPXpjtB9pwa\",\"Kq4skGvkAnvFECYPb\",\"2HgHueLXxCZjXiEyy\",\"DgCkpFtnCiXGXC7cz\",\"YBa3MBgnrKr2A7ZsN\",\"DKC8dYiSNZBQQEF8B\",\"QRv96jmNaYsWkxQEG\",\"xkYcJdzWJvcRJ2jYs\",\"oGqs9g6LG6FMJC8Xr\",\"cG6gdsAnr4E4vor8T\",\"Qy9iR759KepTnfxjW\",\"MQwqRxatD83h4Pgca\",\"rm5SdwT287Lv9TWZs\",\"CFa83w8i4ymn4BEdC\",\"zZcJgEWLXwZzdsm67\",\"FKaLPpjyvT4kkxW88\",\"GN9XeNCnAiMWoz2XJ\",\"aCqhp5LBXGmesLMj2\",\"srJ34BaybkQh3qRkM\",\"BAbYQdeedK7ct8Yti\",\"ADJX4btYGu2BGREzT\",\"oTncCiyemjueDNCBh\",\"Yj9bT4biNbJHxGpcQ\",\"gJGrkx7HPfatiGhrC\",\"bpp9k6X9zN7jQBt3R\",\"LZSxphM8vH4A6Deqn\",\"xBQC5uQdx6WndJ3iM\",\"GnfELnj3JQxQs24jr\",\"zhBLdEk5WtthZdhRD\",\"nJWdfBTvGe5DFQNx3\",\"wT5gGgvjKc5wz59AQ\",\"hnBH8gJ5QSdziMvsS\",\"LNhNAfSx4NCa6JALx\",\"2RNuftAGwMBvzbNmn\",\"buX4mCQhtXCfBjeno\",\"jgwfCrxsBTx3pQRD5\",\"mTF6oWX2WhFR4M3QK\",\"nHj7SC5cnmkTApbgY\",\"DkSMZ3jZLkwviKb9g\",\"sBbQfPxEWu9YnHv5a\",\"LNCb5rksJLJ43L4Nw\",\"QoaqyY7Jrscd4stfS\",\"jyoLggHk8xQKZuoQC\",\"twbMWeziJNb4EG8bs\",\"p948g259GAKKijWak\",\"hJ87kii3LojmKdcYA\",\"EuoWypJvMvgbJAdqT\",\"v3LvczDJdpE8zYEqu\",\"pHp9XWwL6QBTRSWPY\",\"yzjArQHxGrCEJDxoi\",\"aSY5xWapEpk8SxYHN\",\"ETHQTGrsqpa4Cq5tk\",\"aQPf9M3XqpDXddzku\",\"543nSRBoM8rvtKXRT\",\"tdinF6MRzC6AdNX8g\",\"7BkX8SeSnasvqRkLR\",\"c6W2SdnXRg5bxosP8\",\"6W5m8JHSs9tDvSh8x\",\"KhNzQ6xj6RZb2jbJi\",\"gQg7CQtc2FcC8BuR2\",\"pCbFsvyiooabCFEgd\",\"rhS8qXRjZcpDXkwnE\",\"34bE6mric984YYLZQ\",\"qaPjAANdnxFnWfj5d\",\"4za87fFyw9qxkD936\",\"pZWdGP6PYZi3Gfun5\",\"Nmy9qJxkTLcW5Sh85\",\"KMR6vNzvSKMA2cXnK\",\"sxci7DYKNa6q22Sjq\",\"htXCitorobtqYymjN\",\"qMqMkXdYRhMExSkrM\",\"PqAERJkQg4742eDXk\",\"bWcnaBKmzWreQnJ7B\",\"PTs6qfeDpbxJgNjCc\",\"7tb4teh2sdGe3MTNe\",\"WeyqDpGA3LTC6QafR\",\"2sMGo8uAMa2pcvDEs\",\"xEX3TDY6C2h82dJTn\",\"rWhXHhzF4W8bea6LP\",\"PAEWysAAFheYiYPBp\",\"wFRLGjA56kj7xyhmv\"]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"a777e8chPvJkY3tKa\",\"family\":[{\"_id\":\"vpSCPsQKcQwnFdMS4\",\"language\":\"java\"},{\"_id\":\"uL2Hi8Aj3FDgW9F7q\",\"language\":\"javascript\"},{\"_id\":\"cQJxwn6iCAuEJ3EKd\",\"language\":\"python3\"}]}}"]