a["{\"msg\":\"result\",\"id\":\"693\",\"result\":{\"_id\":\"x6vucQsSp6yA3ay4M\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class CipherText {\\n  public static String paulCipher(String txt) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":2.7,\"familyId\":\"fut5kB4hiA5R8Cerf\",\"instructions\":\"In **Paul Cipher**, only alpha characters will be encoded with the following rules:\\n\\n- All alpha characters will be treated as uppercase letters.\\n- The first alpha character will not change (except for switching to upper case).\\n- All subsequent alpha characters will be shifted toward \\\"Z\\\" by the alphabetical position of the previous alpha character (wrap back to \\\"A\\\" if \\\"Z\\\" is passed).\\n\\n`he1lo` would be encoded as follows:\\n\\n```\\npaulCipher(\\\"he1lo\\\") ➞ \\\"HM1QA\\\"\\n\\nh -> H (First character to be changed to uppercase)\\ne -> M (H is the previous alpha character and the 8th letter in the alphabet. E + 8 = M)\\n1 -> 1 (Keep all characters other than alphabets as it is)\\nl -> Q (E is the previous alpha character and 5th letter in the alphabets. L + 5 = Q)\\no -> A (L is the previous alpha character and 12th letter in the alphabets. O + 12 = A)\\n```\\n\\nGiven a string `txt`, return the encoded message. See the below examples for a better understanding:\\n\\n### Examples\\n```\\npaulCipher(\\\"d33p x4v13r\\\") ➞ \\\"D33T N4T13N\\\"\\n\\npaulCipher(\\\"T3sh 1s my w0rlD.\\\") ➞ \\\"T3MA 1A FL V0ODP.\\\"\\n\\npaulCipher(\\\"muBas41r\\\") ➞ \\\"MHWCT41K\\\"\\n\\npaulCipher(\\\"a1rForce\\\") ➞ \\\"A1SXUGUH\\\"\\n\\npaulCipher(\\\"MATT\\\") ➞ \\\"MNUN\\\"\\n```\\n\\n### Notes\\nN/A\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"import static org.junit.Assert.assertEquals; \\nimport org.junit.Test; \\n\\npublic class CipherTextTest {\\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertEquals(\\\"T3MA 1A FL V0ODP.\\\", CipherText.paulCipher(\\\"T3sh 1s my w0rlD.\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertEquals(\\\"D33T N4T13N\\\", CipherText.paulCipher(\\\"d33p x4v13r\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertEquals(\\\"MHWCT41K\\\", CipherText.paulCipher(\\\"muBas41r\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertEquals(\\\"A1SXUGUH\\\", CipherText.paulCipher(\\\"A1rForce\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertEquals(\\\"PX1TE\\\", CipherText.paulCipher(\\\"Ph1ls\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertEquals(\\\"MNUN\\\", CipherText.paulCipher(\\\"MATT\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertEquals(\\\"4EQQS10JA\\\", CipherText.paulCipher(\\\"4elen10ve\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertEquals(\\\"HM1QA\\\", CipherText.paulCipher(\\\"He1lo\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test09() { \\n\\t\\tassertEquals(\\\" TBM VLDLN MTGLK TUM HEHCI HKAW LBM QMAY CSV. \\\", CipherText.paulCipher(\\\" The quick brown fox jumps over the lazy dog. \\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() { \\n\\t\\tassertEquals(\\\"5DHG4GHJ-7G47-44E3-8IIE-3171860EG938\\\", CipherText.paulCipher(\\\"5ddc4ddf-7a47-44d3-8eda-3171860dc938\\\"));\\n\\t}\\n}\",\"language\":\"java\",\"quality\":0,\"summary\":\"In Paul Cipher, only alpha characters will be encoded with the following rules:\\n\\nAll alpha characters will be treated as uppercase letters.\\nThe first alpha character will not change (except for switching to upper case).\\nAll subsequent alpha characters will be shifted toward \\\"Z\\\" by the alphabetical position of the previous alpha character (wrap back to \\\"A\\\" if \\\"\",\"tags\":[\"cryptography\",\"functional_programming\",\"math\",\"algorithms\"],\"timestamp\":{\"$date\":1610386662746},\"title\":\"Paul Cipher\",\"stats\":{\"completed\":{\"total\":18,\"ratings\":[2,2,2,2,2,2,2,3,4,1,3,3,3,3,2,5,3,4,4,2],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"gXTAie79kiw28tx5u\",\"Es4eX2stRpyoXeC7f\",\"qRhXvCaA7qgDoeFnr\",\"hhxjQREtmHSheH9Pj\",\"qb2DTmzQj4vNfq5K7\",\"rhS8qXRjZcpDXkwnE\",\"qaPjAANdnxFnWfj5d\",\"buX4mCQhtXCfBjeno\",\"7w5WfNiZxZhsZNoKm\",\"mR3mMy5yjh42sRWqP\",\"rEWbYF9mHh28oRvT9\",\"QMbzJWCjNYHXessxx\",\"KMR6vNzvSKMA2cXnK\",\"sxci7DYKNa6q22Sjq\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"HwYzMx3j7MRpNpNYS\",\"language\":\"cpp\"},{\"_id\":\"Cdsqu7K7BHyt3vu97\",\"language\":\"csharp\"},{\"_id\":\"x6vucQsSp6yA3ay4M\",\"language\":\"java\"},{\"_id\":\"pFbcmiJLFA4yDFFp4\",\"language\":\"javascript\"},{\"_id\":\"9fbbjaLt22Zfvjjau\",\"language\":\"python3\"},{\"_id\":\"29AsXZDbYCi54tAG5\",\"language\":\"ruby\"},{\"_id\":\"A9p3fcsJYNpxufyoQ\",\"language\":\"swift\"}]}}"]