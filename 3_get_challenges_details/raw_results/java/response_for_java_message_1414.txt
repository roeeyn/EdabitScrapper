a["{\"msg\":\"result\",\"id\":\"267\",\"result\":{\"_id\":\"EiGazR6eGXHMx3hTy\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"public class Challenge {\\n\\tpublic static String stripSentence(String str, String chars) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":1.129496402877698,\"familyId\":\"koC4D9K44ijaHo6R9\",\"instructions\":\"Create a function which takes in a sentence `str` and a string of characters `chars` and return the sentence but with all the *specified characters* **removed**.\\n\\n### Examples\\n```\\nstripSentence(\\\"the quick brown fox jumps over the lazy dog\\\", \\\"aeiou\\\") ➞ \\\"th qck brwn fx jmps vr th lzy dg\\\"\\n\\nstripSentence(\\\"the hissing snakes sinisterly slither across the rustling leaves\\\", \\\"s\\\") ➞ \\\"the hiing nake initerly lither acro the rutling leave\\\"\\n\\nstripSentence(\\\"gone, reduced to atoms\\\", \\\"go, muscat nerd\\\") ➞ \\\"\\\"\\n```\\n\\n### Notes\\n- You may be asked to remove punctuation and spaces.\\n- Return an *empty string* if every character is specified (see example #3).\\n- All tests will be in lowercase.\",\"isHidden\":false,\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n  @Test\\n  public void test1() {\\n    assertEquals(\\\"th qck brwn fx jmps vr th lzy dg\\\", Challenge.stripSentence(\\\"the quick brown fox jumps over the lazy dog\\\", \\\"aeiou\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test2() {\\n    assertEquals(\\\"the hiing nake initerly lither acro the rutling leave\\\", Challenge.stripSentence(\\\"the hissing snakes sinisterly slither across the rustling leaves\\\", \\\"s\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test3() {\\n    assertEquals(\\\"\\\", Challenge.stripSentence(\\\"gone, reduced to atoms\\\", \\\"go, muscat nerd\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test4() {\\n    assertEquals(\\\"uh oh i made a typo please fix it for me\\\", Challenge.stripSentence(\\\"uh oh i made a typo please fixq it for me\\\", \\\"q\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test5() {\\n    assertEquals(\\\"phinx of black quartz, ude my vo!\\\", Challenge.stripSentence(\\\"sphinx of black quartz, judge my vow!\\\", \\\"sgwj\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test6() {\\n    assertEquals(\\\"eclamation marks and the letter  are really annoying\\\", Challenge.stripSentence(\\\"exclamation! marks! and! the! letter! x! arxxxxxxxxexxxxxx! rxxexxxallxxxxy! anxxxnoxyixxxxxxxngxxxxxx!xx\\\", \\\"x!\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test7() {\\n    assertEquals(\\\"!!!!!!!!!!!!!!!!!!!!!!!\\\", Challenge.stripSentence(\\\"!!!!!!!!!!!!!!!!!!!!!!!\\\", \\\"?\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test8() {\\n    assertEquals(\\\"c r e p e s\\\", Challenge.stripSentence(\\\"cat rat eat pat eat sat\\\", \\\"at\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test9() {\\n    assertEquals(\\\"abc\\\", Challenge.stripSentence(\\\"abc\\\", \\\"def\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test10() {\\n    assertEquals(\\\"llegro ndnte\\\", Challenge.stripSentence(\\\"allegro andante\\\", \\\"aaaaaaaaa\\\"));\\n  }\\n}\",\"language\":\"java\",\"summary\":\"Create a function which takes in a sentence str and a string of characters chars and return the sentence but with all the specified characters removed.\\n\\nExamples\\nstripSentence(\\\"the quick brown fox jumps over the lazy dog\\\", \\\"aeiou\\\") ➞ \\\"th qck brwn fx jmps vr th lzy dg\\\"\\n\\nstripSentence(\\\"the hissing snakes sinisterly slither across the rustling leaves\\\", \\\"s\\\") ➞ \\\"th\",\"tags\":[\"strings\",\"language_fundamentals\",\"formatting\"],\"timestamp\":{\"$date\":1580789318859},\"title\":\"Stripping a Sentence Down\",\"stats\":{\"completed\":{\"total\":162,\"ratings\":[1,1,1,1,1,0,2,2,1,0,0,1,2,3,1,0,1,1,2,2,1,1,1,0,0,1,1,1,2,1,1,2,3,1,1,1,0,2,0,2,1,0,0,0,0,2,1,1,2,1,1,1,0,1,1,0,1,1,2,0,1,1,1,2,0,2,1,3,1,0,1,2,0,0,1,2,5,0,2,0,1,2,1,1,2,2,0,0,1,1,2,1,0,5,0,0,2,0,2,1,1,5,1,1,2,1,2,3,1,1,1,2,1,1,2,1,1,0,1,1,2,1,1,1,1,1,0,0,1,2,1,0,1,1,0,1,1,2,1],\"rators\":[\"CPgJteAqYJ2n9idPw\",\"u4yanfWeeZsN3xWgc\",\"3KjxQu9RZ8ZSywvLz\",\"8JyqsSbN2FJXPr3cw\",\"qJZsi5rhRnWA38FbA\",\"XbBsZ7vSHdw88tibi\",\"uQA6ZdsefN4aEcHzi\",\"fxaS5K7ZXo4FbTe36\",\"D3ASM3aWpcQ8gvnin\",\"a49eNnfRwSMxsDJXf\",\"J9zJq7PMGb6mqzcHW\",\"mQqXtagpD5iMw64Hf\",\"cwfpQQAowCJCE3zME\",\"C9yBWYcZsjmJYww3K\",\"AyrEvM2GLX2jqM772\",\"Yohr2MmAyaWGMbB35\",\"qx9XHErKygcLiFGhX\",\"5RcAXjQAbqQtWppy6\",\"YLwJkF2wuL3n9o6a2\",\"pr4Cm4A369tC9gSeT\",\"5ac8TJimJnCHgY8Wk\",\"c89SxuYYjfeRh4toG\",\"gBGjCfJvPHswDM5JQ\",\"jhoZyJtWj7sy7YYjj\",\"ko7oJ85JMftgcbkrr\",\"5Kf9z3G9QBs9fkvLs\",\"M5n9zd5LtuuwJr668\",\"EZNT8B7yQnnZmuwCf\",\"Es4eX2stRpyoXeC7f\",\"Q6TW2RyMdmvSev4Sn\",\"wYYMNPe8nSiJFbvJw\",\"mdEQJ2fmGmkbhbvNw\",\"7p3Btn9oRNStAZ8G6\",\"8J2Dqqz9PaFufQzwY\",\"uYv96ZSpA7tBHoAGX\",\"Kso7rzAKB4TTCPKgM\",\"rTj67TTydxqkpwFtN\",\"bw6kHP3k8dP2qBa5v\",\"YFHkjbM6obMSj24zi\",\"fZjkX29nhRTWWb75k\",\"itfnTQcpA9LfEc6KG\",\"AfMFW7KGW22bHWuuz\",\"TrquEHytntLKHA4m2\",\"c7sE7kceskbYy3KmA\",\"hB5mgzMwQSnhBzi7P\",\"GEzaJZ2cPjENT4ERQ\",\"etoSR23iELGGgs9rA\",\"jyoLggHk8xQKZuoQC\",\"jDTGwryGygbZiqCEg\",\"DzLdw6wEL2Nt5mrsp\",\"5seiNqw6ZXoF2GRRd\",\"sA5fB2CwNgtz7xdwf\",\"jzBcgrJMqvSTaFxRN\",\"FJzZTZo7CmAyN5ajr\",\"FfoXJ7zYXwDbyiC6M\",\"Ctuq7Wc8QPQmzwPK3\",\"hAfyZS5tx4r7m5cAS\",\"PErEzX9YFvY2Yzfh2\",\"8zZ6xmzpiFair25qr\",\"gJbvbqosimaP4ZAYb\",\"Wf7nCHS4Gq5tx659h\",\"Yp7uvStL97cC9fKkY\",\"NaLEipHrg493EpHvC\",\"DzvdGwHEjqsX7wyKr\",\"B4pxRqzo43M7S8FbP\",\"tqSJxy6E4vaTyECkh\",\"DePiAS7u5Pk9d6SLr\",\"WZujpe8yQAyZmpWHg\",\"F4synR7Ea8yS2L576\",\"3qggY3TrN3xNaMDBp\",\"waz46PhT8QwnTWMBR\",\"uwkPQ7ZYQyyg6Qyre\",\"82weQfHHmno4Mq4X7\",\"htXCitorobtqYymjN\",\"5CqetHYvJ5Zb2uzmB\",\"zwruFCmuHkwJTpYqg\",\"DkSMZ3jZLkwviKb9g\",\"meS77LKqRswhF5LAy\",\"dpJTai3i9aNkCS3sa\",\"rvojHhKH3DaxotefQ\",\"q2tzvkrLASvSjkek9\",\"g4NCSxxHqHCGMpWwT\",\"muXMnzQwGLzN6j2Jr\",\"nbH6pjzJS9Z35JD9r\",\"cGebawowzCKcFn8gq\",\"RhPg33AdzvSZmibXa\",\"YcjwCvYut6834Jzd8\",\"AeJSxRqw2dJZuGvdk\",\"MxmG8Gkti7L5kXYNL\",\"Fd9765rksgPK4E2Zy\",\"ZXWDtCrM9ev3439oi\",\"oMZovHkR6QqNvQwyc\",\"f6uGKbmMdBYCjrMBh\",\"fRYcPHuyEdqngMzC4\",\"76eNmFDd7kquYLW3E\",\"35FLKaQ7LJdA7pJZG\",\"ZiN6yB9rACMaYgseC\",\"yXGiiSAR5nBHnH3yr\",\"gpd8yji9GXJruAtje\",\"a777e8chPvJkY3tKa\",\"pi76g3eRpnKrhee2a\",\"jb9RLyyuo565bKDzN\",\"gXTAie79kiw28tx5u\",\"R6MCGv6W8g3dpRbhf\",\"9amCEoE43AdSneJZ7\",\"WHSB76uqJrCf2XKsw\",\"NdLzb3BZ5J8ftnCkS\",\"oMfq73A434YWhSuWQ\",\"mG8HqKiAQFTdRZthG\",\"P5BhjZxyeHQYTNyB9\",\"jXTnL3JatkKjoifyb\",\"8Xx8nWXRydHDBGfQf\",\"Ym8AjbKGSJooun3nt\",\"tyLS9T6YMfg9fMtYJ\",\"BWqQ68pvNedARDcBN\",\"xv5obFhsxY93mqR5S\",\"W56bWmpQeLJ9JEDsa\",\"Wi4H6ayKsNDWWQCG5\",\"uFfEio8nzDvL8emhp\",\"3SgSNoAB3sxaYeT3w\",\"QRv96jmNaYsWkxQEG\",\"E2hpke7mHxAWsw5t9\",\"hhxjQREtmHSheH9Pj\",\"zZfMwLuoERGmybgib\",\"buX4mCQhtXCfBjeno\",\"4ySzqKC5s3ZRpG9di\",\"btabi3PdyisuY5tn9\",\"sxci7DYKNa6q22Sjq\",\"rhS8qXRjZcpDXkwnE\",\"pYonfGP4u9HNL9Z32\",\"xEX3TDY6C2h82dJTn\",\"xxyxCs8Hr7MQAsFvv\",\"uw47663LqPME8btaA\",\"srJ34BaybkQh3qRkM\",\"zTtKiCbLWzaf2Yjo4\",\"cR3ibTMxLyEdDFCHY\",\"jCjCvyhqhpebkJn34\",\"eW9R2SCoYnY8HBAdL\",\"TA9dwvnSdta7rTynz\",\"wFRLGjA56kj7xyhmv\",\"afvP29FhRou2bTaav\",\"KMR6vNzvSKMA2cXnK\",\"3AmkPEiGKNaSFi9Ji\",\"unqzSsxpxj9sZ7rbD\",\"nSLvkGEpiYCtcBLaa\",\"H3XLNCWB5yXt5YYXn\",\"NnymXePpDaZnp2fRd\",\"nFbmNzMQ38TncmfQX\"],\"quality\":[5,5,4,4,5,4,5,5,5,5,5,3,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"quality\":4.642857142857143,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"m3qQgMbLhMpbEySBP\",\"language\":\"cpp\"},{\"_id\":\"EiGazR6eGXHMx3hTy\",\"language\":\"java\"},{\"_id\":\"tgSGGGbS6x9foafg9\",\"language\":\"javascript\"},{\"_id\":\"ZdFAoyHG8sfRcw2nb\",\"language\":\"php\"},{\"_id\":\"bRHsthzPhax3ZoG9i\",\"language\":\"python3\"},{\"_id\":\"7LptCiqzFMLSSBWXu\",\"language\":\"ruby\"}]}}"]