a["{\"msg\":\"result\",\"id\":\"644\",\"result\":{\"_id\":\"kHLmnk3RhekGKe7fP\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"public class Challenge {\\n  public static boolean isValidIP(String str) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":2.3142857142857145,\"familyId\":\"eikCf83tZGeiGjok5\",\"instructions\":\"Create a function that takes a string (IPv4 address in standard dot-decimal format) and returns `true` if the IP is valid or `false` if it's not. For information on IPv4 formatting, please refer to the resources in the **Resources** tab.\\n\\n### Examples\\n```\\nisValidIP(\\\"1.2.3.4\\\") ➞ true\\n\\nisValidIP(\\\"1.2.3\\\") ➞ false\\n\\nisValidIP(\\\"1.2.3.4.5\\\") ➞ false\\n\\nisValidIP(\\\"123.45.67.89\\\") ➞ true\\n\\nisValidIP(\\\"123.456.78.90\\\") ➞ false\\n\\nisValidIP(\\\"123.045.067.089\\\") ➞ false\\n```\\n\\n### Notes\\n- IPv6 addresses are not valid.\\n- Leading zeros are not valid (`\\\"123.045.067.089\\\"` should return `false`).\\n- You can expect a single string for every test case.\\n- Numbers may only be between 1 and 255.\\n- The last digit may not be zero, but any other might.\",\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n  @Test\\n  public void test1() {\\n\\t\\tSystem.out.println(\\\"This is a valid IPv4.\\\");\\n    assertEquals(true, Challenge.isValidIP(\\\"12.255.56.1\\\"));\\n  }\\n\\t\\n\\t@Test\\n\\tpublic void test2() {\\n\\t\\tSystem.out.println(\\\"This is a valid IPv4.\\\");\\n    assertEquals(true, Challenge.isValidIP(\\\"1.2.3.4\\\"));\\n  }\\n\\t\\n\\t@Test\\n\\tpublic void test3() {\\n\\t\\tSystem.out.println(\\\"IPv4 contain exactly four octets.\\\");\\n    assertEquals(false, Challenge.isValidIP(\\\"1.2.3\\\"));\\n  }\\n\\t\\n\\t@Test\\n\\tpublic void test4() {\\n\\t\\tSystem.out.println(\\\"IPv4 contain exactly four octets.\\\");\\n    assertEquals(false, Challenge.isValidIP(\\\"1.2.3.4.5\\\"));\\n  }\\n\\t\\n\\t@Test\\n\\tpublic void test5() {\\n\\t\\tSystem.out.println(\\\"This is a valid IPv4.\\\");\\n    assertEquals(true, Challenge.isValidIP(\\\"123.45.67.89\\\"));\\n  }\\n\\t\\n\\t@Test\\n\\tpublic void test6() {\\n\\t\\tSystem.out.println(\\\"Each octet must be a decimal value between 0 and 255.\\\");\\n    assertEquals(false, Challenge.isValidIP(\\\"123.456.78.90\\\"));\\n  }\\n\\t\\n\\t@Test\\n\\tpublic void test7() {\\n\\t\\tSystem.out.println(\\\"Each octet must be a decimal value between 0 and 255.\\\");\\n    assertEquals(false, Challenge.isValidIP(\\\"123.045.067.089\\\"));\\n  }\\n\\t\\n\\t@Test\\n\\tpublic void test8() {\\n\\t\\tSystem.out.println(\\\"An empty string is invalid.\\\");\\n    assertEquals(false, Challenge.isValidIP(\\\"\\\"));\\n  }\\n\\t\\n\\t@Test\\n\\tpublic void test9() {\\n\\t\\tSystem.out.println(\\\"This is not in dot decimal format.\\\");\\n    assertEquals(false, Challenge.isValidIP(\\\"abc.def.ghi.jkl\\\"));\\n  }\\n\\t\\n\\t@Test\\n\\tpublic void test10() {\\n\\t\\tSystem.out.println(\\\"Each octet must be a decimal value between 0 and 255.\\\");\\n    assertEquals(false, Challenge.isValidIP(\\\"123.456.789.0\\\"));\\n  }\\n\\t\\n\\t@Test\\n\\tpublic void test11() {\\n\\t\\tSystem.out.println(\\\"IPv4 contain exactly four octets.\\\");\\n    assertEquals(false, Challenge.isValidIP(\\\"12.34.56\\\"));\\n  }\\n\\t\\n\\t@Test\\n\\tpublic void test12() {\\n\\t\\tSystem.out.println(\\\"Check for spaces.\\\");\\n    assertEquals(false, Challenge.isValidIP(\\\"12.34.56 .1\\\"));\\n  }\\n\\t\\n\\t@Test\\n\\tpublic void test13() {\\n\\t\\tSystem.out.println(\\\"Check for invalid characters.\\\");\\n    assertEquals(false, Challenge.isValidIP(\\\"12.34.56.-1\\\"));\\n  }\\n\\t\\n\\t@Test\\n\\tpublic void test14() {\\n\\t\\tSystem.out.println(\\\"Each octet must be a decimal value between 0 and 255.\\\");\\n    assertEquals(false, Challenge.isValidIP(\\\"123.045.067.089\\\"));\\n  }\\n\\t\\n\\t@Test\\n\\tpublic void test15() {\\n\\t\\tSystem.out.println(\\\"This is a valid IPv4.\\\");\\n    assertEquals(true, Challenge.isValidIP(\\\"192.168.1.1\\\"));\\n  }\\n\\t\\n\\t@Test\\n\\tpublic void test16() {\\n\\t\\tSystem.out.println(\\\"IPs with trailing spaces are invalid.\\\");\\n    assertEquals(false, Challenge.isValidIP(\\\"192.168.1.1  \\\"));\\n  }\\n\\t\\n\\t@Test\\n\\tpublic void test17() {\\n\\t\\tSystem.out.println(\\\"IPs with leading spaces are invalid.\\\");\\n    assertEquals(false, Challenge.isValidIP(\\\"  192.168.1.1\\\"));\\n  }\\n\\t\\n\\t@Test\\n\\tpublic void test18() {\\n\\t\\tSystem.out.println(\\\"This is a valid IPv4.\\\");\\n    assertEquals(true, Challenge.isValidIP(\\\"0.232.47.227\\\"));\\n  }\\n\\t\\n\\t@Test\\n\\tpublic void test19() {\\n\\t\\tSystem.out.println(\\\"Each octet must be a decimal value between 0 and 255.\\\");\\n    assertEquals(false, Challenge.isValidIP(\\\"1e0.1e0.1e0.1e0\\\"));\\n  }\\n}\",\"language\":\"java\",\"summary\":\"Create a function that takes a string (IPv4 address in standard dot-decimal format) and returns true if the IP is valid or false if it's not. For information on IPv4 formatting, please refer to the resources in the Resources tab.\\n\\nExamples\\nisValidIP(\\\"1.2.3.4\\\") ➞ true\\n\\nisValidIP(\\\"1.2.3\\\") ➞ false\\n\\nisValidIP(\\\"1.2.3.4.5\\\") ➞ false\\n\\nisValidIP(\\\"123.45.67.89\\\") ➞ true\",\"tags\":[\"validation\",\"algorithms\",\"regex\",\"strings\"],\"timestamp\":{\"$date\":1567914260963},\"title\":\"IPv4 Validation\",\"stats\":{\"completed\":{\"total\":38,\"ratings\":[2,2,2,2,2,2,3,3,4,3,1,2,2,0,3,3,1,3,3,2,3,3,1,3,2,3,1,2,2,2,3,3,3,2,3],\"rators\":[\"3pdgguqZgNDSAJSGm\",\"cPgws6wBzDTRRT9Mw\",\"sxci7DYKNa6q22Sjq\",\"eXW8reZCCZHQzJjQi\",\"YF79LnTdprobbYY5v\",\"BSDtieYGg6H7evesT\",\"J9zJq7PMGb6mqzcHW\",\"Es4eX2stRpyoXeC7f\",\"8J2Dqqz9PaFufQzwY\",\"cjxsqXfkAPoadmppi\",\"D7dpRtRQDmteDSAXv\",\"JHz3YRdLxAMo2pjLn\",\"4RHx3H8EwP2oboW8e\",\"TrquEHytntLKHA4m2\",\"RvdjvXACaafw8f5ED\",\"jyoLggHk8xQKZuoQC\",\"Nb6LYPoQP6KJZt8mz\",\"5seiNqw6ZXoF2GRRd\",\"imoNrk36ozReP939p\",\"k63LjKkX5p7SYng7C\",\"c7uBxu2rgY77H5d79\",\"rehehi2Tr2mwaEoJE\",\"azAzSkvJd7eyXY9x9\",\"gXTAie79kiw28tx5u\",\"DqZMjeKpfjDrjhEPo\",\"mDWNyaaQ9hvPCRzSd\",\"mfm3gB39arY8Rjb2y\",\"buX4mCQhtXCfBjeno\",\"KMR6vNzvSKMA2cXnK\",\"ujjoxHz9QrhnmH7ok\",\"htXCitorobtqYymjN\"],\"quality\":[5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":5,\"family\":[{\"_id\":\"vk3NibPRqsR2RquTM\",\"language\":\"cpp\"},{\"_id\":\"BNKRr4N2oFZQfrTY3\",\"language\":\"csharp\"},{\"_id\":\"kHLmnk3RhekGKe7fP\",\"language\":\"java\"},{\"_id\":\"S5nPFF44x7JceXPBn\",\"language\":\"javascript\"},{\"_id\":\"THCzM2cv7Wu5M34eu\",\"language\":\"php\"},{\"_id\":\"E8TSTy4R5eWEkkaKf\",\"language\":\"python3\"},{\"_id\":\"H5fRQBZwD8kYviS8E\",\"language\":\"ruby\"},{\"_id\":\"pXuNFANTvvWAmrrea\",\"language\":\"swift\"}]}}"]