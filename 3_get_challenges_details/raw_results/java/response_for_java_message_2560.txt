a["{\"msg\":\"result\",\"id\":\"835\",\"result\":{\"_id\":\"HJCqdv4A3TMHrEvrk\",\"author\":\"Edward Clark\",\"authorId\":\"3pdgguqZgNDSAJSGm\",\"code\":\"public class Challenge {\\n  public static String kaprekarNumbers(int p, int q) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":4.142857142857143,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"TAgrobTaSi4ENivk4\",\"instructions\":\"A modified Kaprekar number is a positive whole number with a special property. If you square it, then split the number into two integers and sum those integers, you have the same value you started with.\\n\\nConsider a positive whole number `n` with `d` digits. We square `n` to arrive at a number that is either `2 * d` digits long or `(2 * d) - 1` digits long. Split the string representation of the square into two parts, `l` and  `r`. The right-hand part, `r` must be `d` digits long. The left is the remaining substring. Convert those two substrings back to integers, add them and see if you get `n`.\\n\\nFor example, if `n=5`, `d=1`, then `n` squared = `25` . We split that into two strings and convert them back to integers `2` and `5`. We test `2+5=7=5`, so this is not a modified Kaprekar number. If `n=9`, `d=1`, and `n` squared = `81`. This gives us `1+8=9`, the original `n`.\\n\\nNote that `r` may have leading zeros.\\n\\nComplete the `kaprekarNumbers()` method. It should return the list of modified Kaprekar numbers in ascending order. `kaprekarNumbers()` has the following parameter(s):\\n- `p`: an integer representing the lower integer limit.\\n- `q`: an integer representing the upper integer limit.\\n\\n### Examples\\n```\\nkaprekarNumbers(1, 10) ➞ \\\"1 9\\\"\\n\\nkaprekarNumbers(100, 300) ➞ \\\"297\\\"\\n\\nkaprekarNumbers(1, 100) ➞ \\\"1 9 45 55 99\\\"\\n```\\n\\n### Notes\\n- Upper and lower ranges should be inclusive of the limits.\\n- If no modified Kaprekar numbers exist in the given range, return `\\\"INVALID RANGE\\\"`.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"/**\\n *\\n * @author edwardclark\\n */\\n\\nimport org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\npublic class ChallengeTest {\\n  @Test\\n  public void test1() {\\n    assertEquals(\\\"1 9 45 55 99\\\", Challenge.kaprekarNumbers(1, 100));\\n  }\\n\\n    @Test\\n  public void test2() {\\n    assertEquals(\\\"297\\\", Challenge.kaprekarNumbers(100, 300));\\n  }\\n  \\n    @Test\\n  public void test3() {\\n    assertEquals(\\\"1 9 45 55 99 297 703 999 2223 2728 4950 5050 7272 7777 9999 17344 22222 77778 82656 95121 99999\\\", Challenge.kaprekarNumbers(1, 99999));\\n  }\\n  \\n    @Test\\n  public void test4() {\\n    assertEquals(\\\"1 9\\\", Challenge.kaprekarNumbers(1, 10));\\n  }\\n\\n\\t\\t@Test\\n  public void test5() {\\n    assertEquals(\\\"INVALID RANGE\\\", Challenge.kaprekarNumbers(2, 4));\\n  } \\n}\",\"language\":\"java\",\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,5,4,2,3,1,5,5,3,5],\"rators\":[\"3pdgguqZgNDSAJSGm\",\"TrquEHytntLKHA4m2\",\"45FXSeKSLChn3gEhc\",\"pBMXMQem6BpSeooYT\",\"rehehi2Tr2mwaEoJE\",\"Es4eX2stRpyoXeC7f\",\"Ym8AjbKGSJooun3nt\",\"rhS8qXRjZcpDXkwnE\",\"KMR6vNzvSKMA2cXnK\"],\"total\":14,\"quality\":[]},\"flags\":0},\"summary\":\"A modified Kaprekar number is a positive whole number with a special property. If you square it, then split the number into two integers and sum those integers, you have the same value you started with.\\n\\nConsider a positive whole number n with d digits. We square n to arrive at a number that is either 2 * d digits long or (2 * d) - 1 digits long. Split the str\",\"tags\":[\"algorithms\",\"numbers\"],\"timestamp\":{\"$date\":1595162120032},\"title\":\"Modified Kaprekar Numbers\",\"quality\":0,\"family\":[{\"_id\":\"gH7hdCnyJvuoDrTgi\",\"language\":\"cpp\"},{\"_id\":\"HJCqdv4A3TMHrEvrk\",\"language\":\"java\"},{\"_id\":\"ZHResBjuzYzXfWHAy\",\"language\":\"javascript\"},{\"_id\":\"vdx5oXuTsos4vLvrn\",\"language\":\"python3\"},{\"_id\":\"QthgHJPgRcwZKH9PE\",\"language\":\"ruby\"},{\"_id\":\"H7qe4pyCuTmkXappp\",\"language\":\"swift\"}]}}"]