a["{\"msg\":\"result\",\"id\":\"300\",\"result\":{\"_id\":\"eHA9jMjzADDo6PhuJ\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class BasicOperation {\\n  public static int operation(String a, String b, String op) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":1.4189944134078212,\"familyId\":\"mE4oAdLWjPc8pZd2K\",\"instructions\":\"Write a function that does the following for the given values: **add**, **subtract**, **divide** and **multiply**. These are simply referred to as the **basic arithmetic operations**. The variables have to be defined, but in this challenge they will be defined for you. All you have to do is check the variables, do some string to integer conversions, use some `if` conditions, and apply the arithmetic operation.\\n\\n\\n### Examples\\n```\\noperation(\\\"1\\\",  \\\"2\\\",  \\\"add\\\" ) ➞ 3\\n\\noperation(\\\"4\\\",  \\\"5\\\",  \\\"subtract\\\") ➞ -1\\n\\noperation(\\\"6\\\",  \\\"3\\\",  \\\"divide\\\") ➞ 2\\n```\\n\\n\\n### Notes\\n- The numbers and operation are given as strings and should result in an integer value.\\n- If the operation results in an `ArithmeticException`, then return `Integer.MIN_VALUE` (e.g. division by zero).\\n- Division results will be rounded down to its **integral** part.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"/** \\n==================================== \\nTestGen 4.0 for JUnit 4.13.0 \\t\\t\\nTest Case: BasicOperation::operation \\nTimestamp: 11/10/2020 06:46:54 AM \\n------------------------------------ \\n® DARKKO 2020 ©\\n==================================== \\n\\n**/ \\n\\nimport static org.junit.Assert.assertEquals; \\nimport org.junit.Test; \\n\\npublic class BasicOperationTest { \\n\\t\\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertEquals(3, BasicOperation.operation(\\\"1\\\", \\\"2\\\", \\\"add\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertEquals(-19, BasicOperation.operation(\\\"1\\\", \\\"-20\\\", \\\"add\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertEquals(-2147483648, BasicOperation.operation(\\\"9\\\", \\\"0\\\", \\\"divide\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertEquals(100, BasicOperation.operation(\\\"10\\\", \\\"10\\\", \\\"multiply\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertEquals(100, BasicOperation.operation(\\\"-10\\\", \\\"-10\\\", \\\"multiply\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertEquals(0, BasicOperation.operation(\\\"10\\\", \\\"10\\\", \\\"subtract\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertEquals(0, BasicOperation.operation(\\\"0\\\", \\\"0\\\", \\\"subtract\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertEquals(0, BasicOperation.operation(\\\"0\\\", \\\"1\\\", \\\"divide\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test09() { \\n\\t\\tassertEquals(0, BasicOperation.operation(\\\"0\\\", \\\"25415\\\", \\\"divide\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() { \\n\\t\\tassertEquals(1, BasicOperation.operation(\\\"4\\\", \\\"3\\\", \\\"divide\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test11() { \\n\\t\\tassertEquals(5, BasicOperation.operation(\\\"21\\\", \\\"4\\\", \\\"divide\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test12() { \\n\\t\\tassertEquals(4, BasicOperation.operation(\\\"13\\\", \\\"3\\\", \\\"divide\\\"));\\n\\t}\\n\\n}\\n// end of tests\",\"language\":\"java\",\"quality\":4.444444444444445,\"summary\":\"Write a function that does the following for the given values: add, subtract, divide and multiply . This is simply referred to as the basic arithmetic operations. The variables have to be defined, but in this challenge, it will be defined for you. All you have to do, is to check the variables, do some string to integer conversion, use some if conditions, and a\",\"tags\":[\"conditions\",\"language_fundamentals\",\"math\"],\"timestamp\":{\"$date\":1604964462253},\"title\":\"Basic Arithmetic Operations\",\"stats\":{\"completed\":{\"total\":189,\"ratings\":[1,1,1,1,1,1,1,1,1,2,1,2,2,2,2,1,2,1,1,2,3,2,2,2,2,0,3,3,0,1,2,1,2,1,2,2,1,1,1,1,0,1,1,1,1,2,1,1,1,1,2,2,2,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,0,0,1,2,2,0,2,2,0,0,1,1,1,1,1,0,3,2,1,2,3,2,0,1,1,2,1,1,2,2,0,2,3,1,1,2,3,1,2,2,1,1,2,1,2,2,0,1,0,1,1,2,0,1,2,1,2,2,2,0,1,0,2,2,2,2,1,1,2,1,2,2,2,2,2,2,1,1,2,2,0,2,0,1,3,2,0,1,2,2,2,2,2,1,2,0,1,0,2,1,2,2,2,3,2,0,2,0,0,2],\"quality\":[5,4,5,3,5,5,5,5,3],\"rators\":[\"a777e8chPvJkY3tKa\",\"fhFZp6Frsw8higEJ6\",\"R9k3kpgzXHLgaQddY\",\"Es4eX2stRpyoXeC7f\",\"hDeaTsprkH6CmvSAR\",\"YbNyqWfZvWZcPRuBX\",\"P5BhjZxyeHQYTNyB9\",\"jXTnL3JatkKjoifyb\",\"66AfbqGGg8oz7WWs7\",\"rAwyBbput6yGyDazr\",\"8HA92oeu32CBfpyzw\",\"GkfnGwihxN9vG7XtC\",\"oMZovHkR6QqNvQwyc\",\"J7epB3qSQJ2E8vWkY\",\"yd5PakB2z33q2JrTZ\",\"8Xx8nWXRydHDBGfQf\",\"azAzSkvJd7eyXY9x9\",\"gXTAie79kiw28tx5u\",\"jb9RLyyuo565bKDzN\",\"5TaPWyRv9DZWWodp8\",\"rWhXHhzF4W8bea6LP\",\"AeJSxRqw2dJZuGvdk\",\"C9yBWYcZsjmJYww3K\",\"DzvdGwHEjqsX7wyKr\",\"WX6R5brerMTrHs5ZM\",\"jyoLggHk8xQKZuoQC\",\"unNqQjSHzkb4pCzEu\",\"dcW9oK2uRo8h8mBe2\",\"mQKWauR6b252TmdX4\",\"7QbPBTJH9EsaQrSFM\",\"qaPjAANdnxFnWfj5d\",\"82weQfHHmno4Mq4X7\",\"a49eNnfRwSMxsDJXf\",\"bur3yQ8s34zqKGEro\",\"hhxjQREtmHSheH9Pj\",\"buX4mCQhtXCfBjeno\",\"zZfMwLuoERGmybgib\",\"DkSMZ3jZLkwviKb9g\",\"4ySzqKC5s3ZRpG9di\",\"x7vb6WGFZi4QJKME6\",\"rhS8qXRjZcpDXkwnE\",\"sxci7DYKNa6q22Sjq\",\"mfm3gB39arY8Rjb2y\",\"9RJpt5ec2KMLuac4w\",\"xEX3TDY6C2h82dJTn\",\"im4Biwdj9mtfQJM8z\",\"563onSvqgjToY79ah\",\"sgmWPchiq5qvr5v8B\",\"5HEkDWhbZLCJvj6x4\",\"3o9xehumCaHZ4upFo\",\"TCvpT4EPb8qNssNB7\",\"XnPYoPGbX6J8M9yqL\",\"zTtKiCbLWzaf2Yjo4\",\"hCS8cEprE3mpt9MEB\",\"uw47663LqPME8btaA\",\"eBsecQjYCRnq2rNNm\",\"wFRLGjA56kj7xyhmv\",\"hFHm4XzA8NcDpD9Wy\",\"hjY2ZDDEsRPdiMaqq\",\"9azx6pJHMGK7dvDzQ\",\"THPpsQQeztzCue6uh\",\"CggGfsERnPKGupFWp\",\"FSSM3xcaTXGcxqYGz\",\"yaZ7HC2tKbtCwqzNv\",\"srJ34BaybkQh3qRkM\",\"fBTer8y978SpAu2u2\",\"J9zJq7PMGb6mqzcHW\",\"htXCitorobtqYymjN\",\"B4pxRqzo43M7S8FbP\",\"DZvz6WY5bQEneYzvv\",\"PJu3WcTpfRrvHfQiS\",\"KMR6vNzvSKMA2cXnK\",\"GRSgodNrGhekHtCun\",\"unqzSsxpxj9sZ7rbD\",\"HFwFdesvEt7GL47wd\",\"XNgW94PSq5kkXhojm\",\"HsFc9PgmpP2X9Fwh9\",\"AeSmk2XWGcTLHB7PJ\",\"ke59XNKs2LuJBMihy\",\"EzAHwXXHQhfypNSug\",\"ikkjHDqBHu6fT3vGL\",\"E2v7angmkBNz3F5A5\",\"f8eyYeBFyof4ZdA22\",\"FxPDKKibxnZjGJLs6\",\"YjsC84kpx8rkN6kX8\",\"KjuLHyY6wQzE2E8BH\",\"9QbriRWN7p5isXze6\",\"acgAJbKo2xgaqQz2k\",\"bTGhMH2tgtECdCvJi\",\"aNbBC6gbx65qaveuR\",\"dELmKkznAydytJTQ2\",\"WiuZbn9YwZziDTdHe\",\"Q33cj6JvWKwKAibaP\",\"usdJ6cTiwMnSoPevi\",\"TPDXhE4YcBwCdmgBD\",\"ZjcnQRWsHkavrosjC\",\"2CGXWvm8mjx7qH66h\",\"AR4a9RtFbrsxMvv2C\",\"ckQwFFWyLXmDQAaCn\",\"uziJzZE3Jv2GEEsAt\",\"AYWHcokvFL7YSfDcf\",\"FGbyMe4qeSLwZWxM7\",\"2dAi9BoKKA74f79he\",\"dLaYTPZpqfysNQyoi\",\"haWskST4jyZo7rK82\",\"BBBZrYxsyA3c7Ad4K\",\"h3gW7MXNomMZSdxjw\",\"54CoZWW7575tRvrEK\",\"JDF2epP4JBSvyrHcu\",\"FYvtWqXwvzKPSLBwR\",\"k5BGLagHGWfmz8h2W\",\"Z29qkwGaKp3A5xJvw\",\"S6n5P7pGiEu2mQuFD\",\"gG8T24b2MdRwuGDAN\",\"nFbmNzMQ38TncmfQX\",\"CJnPe8kHgEd49MNH9\",\"wy7AvDwMeujSybWNY\",\"ThKRnrQ3c9wDYiAq7\",\"wTc283wowqsFisKNC\",\"LeRbrrQcEDsHhpWzL\",\"fPGY38rmzX2grhhnW\",\"toopiWz4xtPcTAeWk\",\"gbuR6PZq2QP5EeMob\",\"974cv448kw6Wu2JF6\",\"hF9icm7GxAnAGSjAD\",\"hKcRpnfjgcBgHPvhA\",\"cpa27icC4AhqeJ8BM\",\"cDKG5PYjAQojyGrMC\",\"xLy94bAjaLwokPcZZ\",\"JGGT37AgR8cKt72iF\",\"M6tS6qbY6NpB4AAZ6\",\"AiLrgs5cGq5CX4gwf\",\"cu2RHnQL8kLLjMgj4\",\"s3SChCd43BoLpgmxq\",\"xPCkQK6ckjvRN45SA\",\"oocD8vyvY4TWLtaNB\",\"PAEWysAAFheYiYPBp\",\"6e7EwhH7NHxnjr78S\",\"6DDgG4pamGNq6xTAz\",\"gK9ms9FQNkjXTnoiD\",\"kvPqEvG9x6bA65m8P\",\"FmHfRwqADWPBinPfZ\",\"bhcSvGDQ7fAevvz3E\",\"yPYMAdMMTnTWje57D\",\"nv6TdnDmBiGn9AD23\",\"Eb9skxTgSFH4etK82\",\"GHGsnYu3yQFnrNMKc\",\"WuAZDtKZaEJZiLRBi\",\"S4DAs9YLbxmGFzNxm\",\"3mxBCw9PtFc8CF2x4\",\"5QN8R22z43SrwoHDz\",\"6DyWxLuLh6zECgtuJ\",\"Xyg6qqnJDphQSBD2H\",\"RdjHaaZjRDvsSWLcH\",\"T4vKKB8bFPFNNBT9h\",\"bLJZFxCSvjHHuQWuQ\",\"XH6378Zm3WBm679yx\",\"BkfKdsaaBLoAhHW8C\",\"H3axKAJenLTvRAWNP\",\"WxBtcLwXvFEcM43G7\",\"cCPvPqGF4queA5vvb\",\"zJSJkkarPx4xGBAJy\",\"nC4ZN5argkkWWeRrD\",\"6XZcNTkX7TsdhB3oh\",\"AE3yCiko7BoynZaoS\",\"5eDE9KCDnDnqBqLEK\",\"NjHK6iDsbc3ipaFqh\",\"HjZkxb6svu9bbNFTt\",\"YXXpbdxGheTKdgYxz\",\"WSe8rFRmGNMkHAo63\",\"bg4G79DdkMaDxXvdv\",\"Mug7TQSjQfZKAZdzF\",\"gnF2ZT2WFAnJ8xxkv\",\"hcafuyuEFByKfY3tv\",\"rvojHhKH3DaxotefQ\",\"SkiJ9CYdDtHhbKTiv\",\"3JmMnpTK9irEMpoHz\",\"A5pJCwj9BhMNacBNY\",\"66vmtsF8xtaCJypwL\",\"JLwK4Bvwe9nbefDoQ\",\"wpMM3YxaTpgfAtNg3\",\"mmHR9EazNjJ3cCnxK\",\"hJJWP5mvnF7JEsQHq\"]},\"flags\":0},\"editorId\":\"a777e8chPvJkY3tKa\",\"family\":[{\"_id\":\"cFsidM4Ftv6g9Dkxo\",\"language\":\"cpp\"},{\"_id\":\"eHA9jMjzADDo6PhuJ\",\"language\":\"java\"},{\"_id\":\"mgCKn998CNowjAZBF\",\"language\":\"javascript\"},{\"_id\":\"aoN2XoAfQzPQeRNRt\",\"language\":\"python3\"},{\"_id\":\"A7tSxLNFCooNYYkSm\",\"language\":\"ruby\"}]}}"]