a["{\"msg\":\"result\",\"id\":\"626\",\"result\":{\"_id\":\"THuuakBitThtL6rmq\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class InverseParityIndex {\\n\\tpublic static Object[] charAtPos(Object[] arr, String par) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":2.263157894736842,\"familyId\":\"yjBXH2yyyK7xhSKxh\",\"instructions\":\"Write a function that returns the items from an array (given as parameter `r`) on odd or even positions, depending on it's specifier (given as parameter`s`) as being the parity. The final array will contain **\\\"odd\\\"** items on **odd positions** (1, 3, 5, ...) and **\\\"even\\\"** for items on **even positions** (2, 4, 6, ...).\\n\\n### Examples\\n```\\ncharAtPos([2, 4, 6, 8, 10], \\\"even\\\") ➞ [4, 8]\\n// 4 & 8 occupy the 4th & 2nd positions from right.\\n\\ncharAtPos(['E', 'D', 'A', 'B', 'I', 'T'], \\\"odd\\\") ➞ ['D', 'B', 'T']\\n// D, B and T occupy the 5th, 3rd and 1st positions from right.\\n\\ncharAtPos([\\\")\\\", \\\"(\\\", \\\"*\\\", \\\"&\\\", \\\"^\\\", \\\"%\\\", \\\"$\\\", \\\"#\\\", \\\"@\\\", \\\"!\\\"], \\\"odd\\\") ➞ [\\\"(\\\", \\\"&\\\", \\\"%\\\", \\\"#\\\", \\\"!\\\"]\\n```\\n\\n### Notes\\n- Arrays are zero-indexed, so, index+1 = position or position-1 = index.\\n- There will not be an empty string or an empty array.\\n- The sequence of the items in the resulting array should be retained (i.e. example #1 - `8` should come after `4` and not otherwise, example #2 - `'B'` should come after `'D'` and before `'T'`).\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"import static org.junit.Assert.assertArrayEquals;\\nimport org.junit.Test;\\n\\npublic class InverseParityIndexTests {\\n\\t@Test\\n\\tpublic void test01() {\\n\\t\\tassertArrayEquals(new Character[] {'E', 'A', 'I'}, \\n\\t\\t\\tInverseParityIndex.charAtPos(new Character[] {'E', 'D', 'A', 'B', 'I', 'T'}, \\\"even\\\"));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test02() {\\n\\t\\tassertArrayEquals(new Character[] {'D', 'B', 'T'}, \\n\\t\\t\\tInverseParityIndex.charAtPos(new Character[] {'E', 'D', 'A', 'B', 'I', 'T'}, \\\"odd\\\"));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test03() {\\n\\t\\tassertArrayEquals(new Character[] {'Q', 'E', 'T', 'U', 'O'}, \\n\\t\\t\\tInverseParityIndex.charAtPos(new Character[] {'Q', 'W','E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'}, \\\"even\\\"));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test04() {\\n\\t\\tassertArrayEquals(new Character[] {'O', 'U', 'T', 'E', 'Q'}, \\n\\t\\t\\tInverseParityIndex.charAtPos(new Character[] {'P', 'O', 'I', 'U', 'Y', 'T', 'R', 'E', 'W', 'Q'}, \\\"odd\\\"));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test05() {\\n\\t\\tassertArrayEquals(new Character[] {'S', 'F', 'H', 'K', 'Z'}, \\n\\t\\t\\tInverseParityIndex.charAtPos(new Character[] {'A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'Z'}, \\\"odd\\\"));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test06() {\\n\\t\\tassertArrayEquals(new Character[] {'A', 'D', 'G', 'J', 'L'}, \\n\\t\\t\\tInverseParityIndex.charAtPos(new Character[] {'A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'Z'}, \\\"even\\\"));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test07() {\\n\\t\\tassertArrayEquals(new Integer[] {4, 8}, \\n\\t\\t\\tInverseParityIndex.charAtPos(new Integer[] {2, 4, 6, 8, 10}, \\\"even\\\"));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test08() {\\n\\t\\tassertArrayEquals(new Integer[] {2, 4, 6, 8, 10}, \\n\\t\\t\\tInverseParityIndex.charAtPos(new Integer[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, \\\"odd\\\"));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test09() {\\n\\t\\tassertArrayEquals(new String[] {\\\"@\\\", \\\"$\\\", \\\"^\\\", \\\"*\\\", \\\")\\\"}, \\n\\t\\t\\tInverseParityIndex.charAtPos(new String[] {\\\"!\\\", \\\"@\\\", \\\"#\\\", \\\"$\\\", \\\"%\\\", \\\"^\\\", \\\"&\\\", \\\"*\\\", \\\"(\\\", \\\")\\\"}, \\\"odd\\\"));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test10() {\\n\\t\\tassertArrayEquals(new String[] {\\\"(\\\", \\\"&\\\", \\\"%\\\", \\\"#\\\", \\\"!\\\"}, \\n\\t\\t\\tInverseParityIndex.charAtPos(new String[] {\\\")\\\", \\\"(\\\", \\\"*\\\", \\\"&\\\", \\\"^\\\", \\\"%\\\", \\\"$\\\", \\\"#\\\", \\\"@\\\", \\\"!\\\"}, \\\"odd\\\"));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test11() {\\n\\t\\tassertArrayEquals(new String[] {\\\"O\\\", \\\"B\\\", \\\"T\\\", \\\"Y\\\"}, \\n\\t\\t\\tInverseParityIndex.charAtPos(new String[] {\\\"O\\\", \\\"R\\\", \\\"B\\\", \\\"I\\\", \\\"T\\\", \\\"L\\\", \\\"Y\\\"}, \\\"odd\\\"));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test12() {\\n\\t\\tassertArrayEquals(new String[] {\\\"R\\\", \\\"I\\\", \\\"L\\\"}, \\n\\t\\t\\t\\tInverseParityIndex.charAtPos(new String[] {\\\"O\\\", \\\"R\\\", \\\"B\\\", \\\"I\\\", \\\"T\\\", \\\"L\\\", \\\"Y\\\"}, \\\"even\\\"));\\n\\t}\\n}\",\"language\":\"java\",\"quality\":0,\"summary\":\"Write a function that returns the items from an array (given as parameter r) on odd or even positions, depending on it's specifier (given as parameters) as being the parity. The final array will contain \\\"odd\\\" items on odd positions (1, 3, 5, ...) and \\\"even\\\" for items on even positions (2, 4, 6, ...).\\n\\nExamples\\ncharAtPos([2, 4, 6, 8, 10], \\\"even\\\") ➞ [4, 8]\\n// 4\",\"tags\":[\"arrays\",\"functional_programming\",\"validation\"],\"timestamp\":{\"$date\":1603737926513},\"title\":\"Oddly Or Evenly Positioned\",\"stats\":{\"completed\":{\"total\":15,\"ratings\":[2,2,2,2,2,2,4,2,2,3,3,3,0,3,1,2,3,2,3],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"Es4eX2stRpyoXeC7f\",\"azAzSkvJd7eyXY9x9\",\"gXTAie79kiw28tx5u\",\"yXGiiSAR5nBHnH3yr\",\"jyoLggHk8xQKZuoQC\",\"rhS8qXRjZcpDXkwnE\",\"LNCb5rksJLJ43L4Nw\",\"qaPjAANdnxFnWfj5d\",\"jCjCvyhqhpebkJn34\",\"sxci7DYKNa6q22Sjq\",\"KMR6vNzvSKMA2cXnK\",\"wFRLGjA56kj7xyhmv\",\"htXCitorobtqYymjN\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"THuuakBitThtL6rmq\",\"language\":\"java\"},{\"_id\":\"fWkrdJb6EJrHsP7Sm\",\"language\":\"javascript\"},{\"_id\":\"vLaSKySKmozHb4vqr\",\"language\":\"php\"},{\"_id\":\"KQe5w8AdSLbweW8ck\",\"language\":\"python3\"},{\"_id\":\"yDJGyFFgYWFGPzcE9\",\"language\":\"ruby\"}]}}"]