a["{\"msg\":\"result\",\"id\":\"723\",\"result\":{\"_id\":\"H3TMp2swn3Q3sCxpv\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class PrimeExtracts {\\n\\tpublic static int[] extractPrimes(int num) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":2.789473684210526,\"familyId\":\"czuWaSLo7tDvJpnq2\",\"instructions\":\"Create a function that takes an integer argument and returns an array of prime numbers found in the decimal representation of that number (not factors).\\n\\nFor example, `extractPrimes(1717)` returns `[7, 7, 17, 17, 71]`.\\n\\nThe array should be in ascending order. If a prime number appears more than once, every occurrence should be listed. If no prime numbers are found, return an empty array.\\n\\n### Examples\\n```\\nextractPrimes(1) ➞ []\\n\\nextractPrimes(7) ➞ [7]\\n\\nextractPrimes(73) ➞ [3, 7, 73]\\n\\nextractPrimes(1313) ➞ [3, 3, 13, 13, 31, 131, 313]\\n```\\n\\n### Notes\\n- All test cases are positive real integers.\\n- Some numbers will have leading zeros. For example, the number `103` contains the prime number `3`, but also contains `03`. These should be treated as the same number, so the result would simply be `[3]`.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"/** \\n======================================= \\nTestGen 2.3 for JUnit 4.13.0 \\t\\t\\nTest Case: PrimeExtracts::extractPrimes \\nTimestamp: 11/14/2020 6:43:52 PM\\n--------------------------------------- \\n® DARKKO 2020 © \\n=======================================\\n**/ \\n\\nimport static org.junit.Assert.assertArrayEquals; \\nimport org.junit.Test; \\n\\npublic class PrimeExtractsTest {\\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertArrayEquals(new int[] {}, PrimeExtracts.extractPrimes(1));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertArrayEquals(new int[] {2}, PrimeExtracts.extractPrimes(2));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertArrayEquals(new int[] {3}, PrimeExtracts.extractPrimes(3));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertArrayEquals(new int[] {7}, PrimeExtracts.extractPrimes(7));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertArrayEquals(new int[] {3, 13}, PrimeExtracts.extractPrimes(13));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertArrayEquals(new int[] {3, 7, 73}, PrimeExtracts.extractPrimes(73));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertArrayEquals(new int[] {101}, PrimeExtracts.extractPrimes(101));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertArrayEquals(new int[] {3, 3, 13, 31, 313}, PrimeExtracts.extractPrimes(313));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test09() { \\n\\t\\tassertArrayEquals(new int[] {3, 3, 13, 13, 31, 131, 313}, PrimeExtracts.extractPrimes(1313));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() { \\n\\t\\tassertArrayEquals(new int[] {7, 7, 17, 17, 71}, PrimeExtracts.extractPrimes(1717));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test11() { \\n\\t\\tassertArrayEquals(new int[] {2, 3, 23}, PrimeExtracts.extractPrimes(10234));\\n\\t}\\n}\",\"language\":\"java\",\"quality\":0,\"summary\":\"Create a function that takes an integer argument and returns an array of prime numbers found in the decimal representation of that number (not factors).\\n\\nFor example, extractPrimes(1717) returns [7, 7, 17, 17, 71].\\n\\nThe array should be in ascending order. If a prime number appears more than once, every occurrence should be listed. If no prime numbers are found\",\"tags\":[\"numbers\",\"algorithms\",\"math\",\"cryptography\"],\"timestamp\":{\"$date\":1605357621280},\"title\":\"Find All Prime Numbers In Decimal Integer\",\"stats\":{\"completed\":{\"total\":17,\"ratings\":[3,3,3,3,3,3,3,2,3,4,2,4,3,3,2,0,2,4,3],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"Es4eX2stRpyoXeC7f\",\"gXTAie79kiw28tx5u\",\"2g9DndhBotcaKDiFD\",\"rWhXHhzF4W8bea6LP\",\"YGoEo3M5Q93BzxBqX\",\"iq55QasecYJXKz8rx\",\"kWmPsBxgPFEeHnFrL\",\"ADCSWkYwZnddwBEg6\",\"NRcES4Fvey4SWLRCA\",\"LNCb5rksJLJ43L4Nw\",\"gXmjKF8FNhsQN2wGa\",\"KMR6vNzvSKMA2cXnK\",\"sxci7DYKNa6q22Sjq\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"RKwaq5pQzxsqmSwpS\",\"language\":\"cpp\"},{\"_id\":\"H3TMp2swn3Q3sCxpv\",\"language\":\"java\"},{\"_id\":\"JpfNfZCEesy7Nz67i\",\"language\":\"javascript\"},{\"_id\":\"G64JXaxWLd9kyWkPJ\",\"language\":\"php\"},{\"_id\":\"T4q8P8cxvBtaLPW4q\",\"language\":\"python3\"},{\"_id\":\"B6dWRnhaGHBBGPPLm\",\"language\":\"ruby\"}]}}"]