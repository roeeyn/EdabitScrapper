a["{\"msg\":\"result\",\"id\":\"833\",\"result\":{\"_id\":\"5X4wuS6eGsx2iz3cy\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"public class Challenge {\\n\\tpublic static String pascalsTriangle(String row) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":4.04,\"familyId\":\"qsBxhYxP2wbDCvMAt\",\"instructions\":\"The goal of this challenge is to return Pascal's triangle up to number 29. Pascal's triangle is the sum of the two upper corners.\\n\\n```\\n   1 1\\n  1 2 1\\n 1 3 3 1\\n\\n// There will always be the 1 in the first\\n// place and the row in the second.\\n```\\n\\n![Pascal's Triangle](https://edabit-challenges.s3.amazonaws.com/PascalTriangleAnimated2.gif \\\"Pascal's Triangle\\\")\\n\\nCreate a function that returns a row from Pascal's triangle. To find the row and column you can use `n!/(k!*(n-k)!)` where `n` is the row down and `k` is the column.\\n\\n### Examples\\n```\\npascalsTriangle(1) ➞ \\\"1 1\\\"\\n\\npascalsTriangle(4) ➞ \\\"1 4 6 4 1\\\"\\n\\npascalsTriangle(6) ➞ \\\"1 6 15 20 15 6 1\\\"\\n\\npascalsTriangle(8) ➞ \\\"1 8 28 56 70 56 28 8 1\\\"\\n```\\n\\n### Notes\\nN/A\",\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n  @Test\\n  public void test1() {\\n    assertEquals(\\\"1 1\\\", Challenge.pascalsTriangle(1));\\n  }\\n\\t\\n\\t@Test\\n  public void test2() {\\n    assertEquals(\\\"1 2 1\\\", Challenge.pascalsTriangle(2));\\n  }\\n\\t\\n\\t@Test\\n  public void test3() {\\n    assertEquals(\\\"1 3 3 1\\\", Challenge.pascalsTriangle(3));\\n  }\\n\\t\\n\\t@Test\\n  public void test4() {\\n    assertEquals(\\\"1 4 6 4 1\\\", Challenge.pascalsTriangle(4));\\n  }\\n\\t\\n\\t@Test\\n  public void test5() {\\n    assertEquals(\\\"1 5 10 10 5 1\\\", Challenge.pascalsTriangle(5));\\n  }\\n\\t\\n\\t@Test\\n  public void test6() {\\n    assertEquals(\\\"1 6 15 20 15 6 1\\\", Challenge.pascalsTriangle(6));\\n  }\\n\\t\\n\\t@Test\\n  public void test7() {\\n    assertEquals(\\\"1 7 21 35 35 21 7 1\\\", Challenge.pascalsTriangle(7));\\n  }\\n\\t\\n\\t@Test\\n  public void test8() {\\n    assertEquals(\\\"1 8 28 56 70 56 28 8 1\\\", Challenge.pascalsTriangle(8));\\n  }\\n\\t\\n\\t@Test\\n  public void test9() {\\n    assertEquals(\\\"1 9 36 84 126 126 84 36 9 1\\\", Challenge.pascalsTriangle(9));\\n  }\\n\\t\\n\\t@Test\\n  public void test10() {\\n    assertEquals(\\\"1 10 45 120 210 252 210 120 45 10 1\\\", Challenge.pascalsTriangle(10));\\n  }\\n\\t\\n\\t@Test\\n  public void test11() {\\n    assertEquals(\\\"1 11 55 165 330 462 462 330 165 55 11 1\\\", Challenge.pascalsTriangle(11));\\n  }\\n\\t\\n\\t@Test\\n  public void test12() {\\n    assertEquals(\\\"1 12 66 220 495 792 924 792 495 220 66 12 1\\\", Challenge.pascalsTriangle(12));\\n  }\\n\\t\\n\\t@Test\\n  public void test13() {\\n    assertEquals(\\\"1 13 78 286 715 1287 1716 1716 1287 715 286 78 13 1\\\", Challenge.pascalsTriangle(13));\\n  }\\n\\t\\n\\t@Test\\n  public void test14() {\\n    assertEquals(\\\"1 14 91 364 1001 2002 3003 3432 3003 2002 1001 364 91 14 1\\\", Challenge.pascalsTriangle(14));\\n  }\\n\\t\\n\\t@Test\\n  public void test15() {\\n    assertEquals(\\\"1 15 105 455 1365 3003 5005 6435 6435 5005 3003 1365 455 105 15 1\\\", Challenge.pascalsTriangle(15));\\n  }\\n\\t\\n\\t@Test\\n  public void test16() {\\n    assertEquals(\\\"1 16 120 560 1820 4368 8008 11440 12870 11440 8008 4368 1820 560 120 16 1\\\", Challenge.pascalsTriangle(16));\\n  }\\n\\t\\n\\t@Test\\n  public void test17() {\\n    assertEquals(\\\"1 17 136 680 2380 6188 12376 19448 24310 24310 19448 12376 6188 2380 680 136 17 1\\\", Challenge.pascalsTriangle(17));\\n  }\\n\\t\\n\\t@Test\\n  public void test18() {\\n    assertEquals(\\\"1 18 153 816 3060 8568 18564 31824 43758 48620 43758 31824 18564 8568 3060 816 153 18 1\\\", Challenge.pascalsTriangle(18));\\n  }\\n\\t\\n\\t@Test\\n  public void test19() {\\n    assertEquals(\\\"1 19 171 969 3876 11628 27132 50388 75582 92378 92378 75582 50388 27132 11628 3876 969 171 19 1\\\", Challenge.pascalsTriangle(19));\\n  }\\n\\t\\n\\t@Test\\n  public void test20() {\\n    assertEquals(\\\"1 20 190 1140 4845 15504 38760 77520 125970 167960 184756 167960 125970 77520 38760 15504 4845 1140 190 20 1\\\", Challenge.pascalsTriangle(20));\\n  }\\n\\t\\n\\t@Test\\n  public void test21() {\\n    assertEquals(\\\"1 21 210 1330 5985 20349 54264 116280 203490 293930 352716 352716 293930 203490 116280 54264 20349 5985 1330 210 21 1\\\", Challenge.pascalsTriangle(21));\\n  }\\n\\t\\n\\t@Test\\n  public void test22() {\\n    assertEquals(\\\"1 22 231 1540 7315 26334 74613 170544 319770 497420 646646 705432 646646 497420 319770 170544 74613 26334 7315 1540 231 22 1\\\", Challenge.pascalsTriangle(22));\\n  }\\n\\t\\n\\t@Test\\n  public void test23() {\\n    assertEquals(\\\"1 23 253 1771 8855 33649 100947 245157 490314 817190 1144066 1352078 1352078 1144066 817190 490314 245157 100947 33649 8855 1771 253 23 1\\\", Challenge.pascalsTriangle(23));\\n  }\\n\\t\\n\\t@Test\\n  public void test24() {\\n    assertEquals(\\\"1 24 276 2024 10626 42504 134596 346104 735471 1307504 1961256 2496144 2704156 2496144 1961256 1307504 735471 346104 134596 42504 10626 2024 276 24 1\\\", Challenge.pascalsTriangle(24));\\n  }\\n\\t\\n\\t@Test\\n  public void test25() {\\n    assertEquals(\\\"1 25 300 2300 12650 53130 177100 480700 1081575 2042975 3268760 4457400 5200300 5200300 4457400 3268760 2042975 1081575 480700 177100 53130 12650 2300 300 25 1\\\", Challenge.pascalsTriangle(25));\\n  }\\n\\t\\n\\t@Test\\n  public void test26() {\\n    assertEquals(\\\"1 26 325 2600 14950 65780 230230 657800 1562275 3124550 5311735 7726160 9657700 10400600 9657700 7726160 5311735 3124550 1562275 657800 230230 65780 14950 2600 325 26 1\\\", Challenge.pascalsTriangle(26));\\n  }\\n\\n\\t@Test\\n  public void test27() {\\n    assertEquals(\\\"1 27 351 2925 17550 80730 296010 888030 2220075 4686825 8436285 13037895 17383860 20058300 20058300 17383860 13037895 8436285 4686825 2220075 888030 296010 80730 17550 2925 351 27 1\\\", Challenge.pascalsTriangle(27));\\n  }\\n\\t\\n\\t@Test\\n  public void test28() {\\n    assertEquals(\\\"1 28 378 3276 20475 98280 376740 1184040 3108105 6906900 13123110 21474180 30421755 37442160 40116600 37442160 30421755 21474180 13123110 6906900 3108105 1184040 376740 98280 20475 3276 378 28 1\\\", Challenge.pascalsTriangle(28));\\n  }\\n\\n\\t@Test\\n  public void test29() {\\n    assertEquals(\\\"1 29 406 3654 23751 118755 475020 1560780 4292145 10015005 20030010 34597290 51895935 67863915 77558760 77558760 67863915 51895935 34597290 20030010 10015005 4292145 1560780 475020 118755 23751 3654 406 29 1\\\", Challenge.pascalsTriangle(29));\\n  }\\n}\",\"language\":\"java\",\"summary\":\"The goal of this challenge is to return Pascal's triangle up to number 29. Pascal's triangle is the sum of the two upper corners.\\n\\n   1 1\\n  1 2 1\\n 1 3 3 1\\n\\n// There will always be the 1 in the first\\n// place and the row in the second.\\n\\nPascal's Triangle\\n\\nCreate a function that returns a row from Pascal's triangle. To find the row and column you can use n!/(k!*\",\"tags\":[\"algebra\",\"math\",\"algorithms\",\"loops\"],\"timestamp\":{\"$date\":1571251436385},\"title\":\"Pascal's Triangle\",\"stats\":{\"completed\":{\"total\":26,\"ratings\":[5,5,5,5,5,5,5,3,5,5,5,3,3,1,1,3,5,5,3,4,4,2,5,4,5],\"rators\":[\"fQCHGFe43dEtqjEFT\",\"hZr4qXRsSumkpJXK9\",\"r9c6nf3p3tjr9PLRK\",\"Es4eX2stRpyoXeC7f\",\"oMLSgpSFQnY4ui8cB\",\"TrquEHytntLKHA4m2\",\"JQGw9jsJPEasdwhNJ\",\"GSts5JvHWejsPgfEd\",\"J22GaPwwi3TL2pAkw\",\"vTMyc3otxo9jPDpTZ\",\"ecyYaPZLMBMGGrfrJ\",\"RQL2PAWda9Bh79GNi\",\"gXTAie79kiw28tx5u\",\"btabi3PdyisuY5tn9\",\"YomMJMBhDwoWLjcAm\",\"uw47663LqPME8btaA\",\"rhS8qXRjZcpDXkwnE\",\"RsujLHaML6L3KinzK\",\"hFv4BuqgsJtNyvyNF\",\"KMR6vNzvSKMA2cXnK\"],\"quality\":[]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":0,\"family\":[{\"_id\":\"dN6R8xLL6WLLDEhs4\",\"language\":\"cpp\"},{\"_id\":\"5X4wuS6eGsx2iz3cy\",\"language\":\"java\"},{\"_id\":\"rDBZd8qzZzpKLxEsK\",\"language\":\"javascript\"},{\"_id\":\"T97AQomD49GNu3kQc\",\"language\":\"php\"},{\"_id\":\"YN33GEpLQqa5imcFx\",\"language\":\"python3\"},{\"_id\":\"cqX8nvnJasHTxNpSA\",\"language\":\"ruby\"}]}}"]