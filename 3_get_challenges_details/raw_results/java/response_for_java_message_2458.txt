a["{\"msg\":\"result\",\"id\":\"785\",\"result\":{\"_id\":\"iZNdGSDXyRMmHrNNn\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class ReverseLexicalLengthSort {\\n  public static String reverseSort(String str) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":3.3703703703703702,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"dxeEXGPJfzsL64ic5\",\"instructions\":\"Write a function that **sorts the words** in a given string **lexicographically** (lexical sort) and by **length** in **reverse** order.\\n\\n### Examples\\n```\\nreverseSort(\\\"You've rocked the pragmatic world in the making!\\\") \\n ➞ \\\"pragmatic making! You've rocked world the the in\\\"\\n\\nreverseSort(\\\"Tesh makes my world worth enjoying and living for.\\\")\\n ➞ \\\"enjoying living worth world makes Tesh for. and my\\\"\\n\\nreverseSort(\\\"Shaken by the bloody truth and crazy lies.\\\")\\n ➞ \\\"Shaken bloody truth lies. crazy the and by\\\"\\n\\nreverseSort(\\\"Java streams and collections are fun to program with!\\\")\\n ➞ \\\"collections streams program with! Java fun are and to\\\"\\n```\\n\\n### Notes\\n- Special characters, punctuation marks and symbols are part of the word that directly precedes it.\\n- The **space character** separates each word in the given string.\\n- Case **insensitive** sorting is required.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"/** \\n================================================ \\nTestGen 3.1 for JUnit 4.13.0 \\t\\t\\nTest Case: ReverseLexicalLengthSort::reverseSort \\nTimestamp: 11/09/2020 11:21:48 AM\\n------------------------------------------------ \\n® DARKKO 2020 © \\n================================================ \\n\\n**/ \\n\\nimport static org.junit.Assert.assertEquals; \\nimport org.junit.Test; \\n\\npublic class ReverseLexicalLengthSortTest { \\n\\t\\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertEquals(\\\"pragmatic making! You've rocked world the the in\\\", ReverseLexicalLengthSort.reverseSort(\\\"You've rocked the pragmatic world in the making!\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertEquals(\\\"enjoying living worth world makes Tesh for. and my\\\", ReverseLexicalLengthSort.reverseSort(\\\"Tesh makes my world worth enjoying and living for.\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertEquals(\\\"Shaken bloody truth lies. crazy the and by\\\", ReverseLexicalLengthSort.reverseSort(\\\"Shaken by the bloody truth and crazy lies.\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertEquals(\\\"collections streams program with! Java fun are and to\\\", ReverseLexicalLengthSort.reverseSort(\\\"Java streams and collections are fun to program with!\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertEquals(\\\"substance beauty. woman Tesha true and of is a a\\\", ReverseLexicalLengthSort.reverseSort(\\\"Tesha is a woman of true substance and a beauty.\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertEquals(\\\"alphanumeric sorting. similar Lexical sort to is\\\", ReverseLexicalLengthSort.reverseSort(\\\"Lexical sort is similar to alphanumeric sorting.\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertEquals(\\\"you. not do, all up To to to or is do\\\", ReverseLexicalLengthSort.reverseSort(\\\"To do or not to do, is all up to you.\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertEquals(\\\"Javascript program methods with! array fun are to\\\", ReverseLexicalLengthSort.reverseSort(\\\"Javascript array methods are fun to program with!\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test09() { \\n\\t\\tassertEquals(\\\"Programming Java fun. lot of is in a\\\", ReverseLexicalLengthSort.reverseSort(\\\"Programming in Java is a lot of fun.\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() { \\n\\t\\tassertEquals(\\\"Truly, Tesh. heart beats that one for for but no a\\\", ReverseLexicalLengthSort.reverseSort(\\\"Truly, a heart that beats for no one but for Tesh.\\\"));\\n\\t}\\n\\n}\\n// end of tests\",\"language\":\"java\",\"quality\":0,\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,3,5,4,2,1,4,3,5,4,2,2,5,5,5,3,0,3,5,5,3,2,5],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"Es4eX2stRpyoXeC7f\",\"Ym8AjbKGSJooun3nt\",\"gXTAie79kiw28tx5u\",\"udHFfcqNNej6udnpP\",\"aq2YAsdDwNLr85KTZ\",\"Zj2Y2AFF5Aec5cBsF\",\"Z96GhGMX4TytWoq8J\",\"4fpPZ59wamBBPuBdz\",\"9pqtNWrsTJdZcRbEZ\",\"4pagg6vw2Cjepv7tN\",\"YPXgkdu7EtcWWgCD5\",\"oGqs9g6LG6FMJC8Xr\",\"h6exQtjB22pabWmvE\",\"oMZovHkR6QqNvQwyc\",\"LNCb5rksJLJ43L4Nw\",\"GvLLKHi7NwAjutdDk\",\"Su3vDnttRBpxeyDen\",\"dGJhADFMNr9is6GRP\",\"htXCitorobtqYymjN\",\"sxci7DYKNa6q22Sjq\",\"KMR6vNzvSKMA2cXnK\"],\"total\":27},\"flags\":0},\"summary\":\"Write a function that sorts the words in a given string lexicographically (lexical sort) and by length in reverse order.\\n\\nExamples\\nreverseSort(\\\"You've rocked the pragmatic world in the making!\\\")\\n ➞ \\\"pragmatic making! You've rocked world the the in\\\"\\n\\nreverseSort(\\\"Tesh makes my world worth enjoying and living for.\\\")\\n ➞ \\\"enjoying living worth world makes Tesh for\",\"tags\":[\"sorting\",\"strings\"],\"timestamp\":{\"$date\":1604893866141},\"title\":\"Reverse Sort: Lexical and Length\",\"family\":[{\"_id\":\"iZNdGSDXyRMmHrNNn\",\"language\":\"java\"},{\"_id\":\"jX6FbEai4APajFbeC\",\"language\":\"javascript\"},{\"_id\":\"pEG8G4se5WBQkckF2\",\"language\":\"python3\"}]}}"]