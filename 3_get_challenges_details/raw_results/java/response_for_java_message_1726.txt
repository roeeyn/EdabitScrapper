a["{\"msg\":\"result\",\"id\":\"424\",\"result\":{\"_id\":\"uiNKhxnvuaJ7ikoKX\",\"author\":\"K3B\",\"authorId\":\"zE46SymvixkeFJmPM\",\"code\":\"public class Program {\\n  public static int[] miniPeaks(int arr[]) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":1.5686274509803921,\"familyId\":\"j5HZumkLcawwwBehp\",\"instructions\":\"Write a function that returns all the elements in an array that are **strictly greater** than their adjacent left and right neighbors.\\n\\n### Examples\\n```\\nminiPeaks([4, 5, 2, 1, 4, 9, 7, 2]) ➞ [5, 9]\\n// 5 has neighbours 4 and 2, both are less than 5.\\n\\nminiPeaks([1, 2, 1, 1, 3, 2, 5, 4, 4]) ➞ [2, 3, 5]\\n\\nminiPeaks([1, 2, 3, 4, 5, 6]) ➞ []\\n```\\n\\n### Notes\\n- Do not count boundary numbers, since they only have **one** left/right neighbor. \\n- If no such numbers exist, return an empty array.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"import static org.hamcrest.core.Is.is;\\nimport org.junit.Test;\\nimport static org.junit.Assert.assertThat;\\n\\npublic class ChallengeTests {\\n\\t@Test\\n\\tpublic void test1() {\\n\\t\\tassertThat(Program.miniPeaks(new int[]{4, 5, 2, 1, 4, 9, 7, 2}), is(new int[]{5, 9}));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test2() {\\n\\t\\tassertThat(Program.miniPeaks(new int[]{1, 2, 1, 1, 3, 2, 5, 4, 4}), is(new int[]{2, 3, 5}));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test3() {\\n\\t\\tassertThat(Program.miniPeaks(new int[]{1, 2, 3, 4, 5, 6}), is(new int[]{}));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test4() {\\n\\t\\tassertThat(Program.miniPeaks(new int[]{6, 4, 3}), is(new int[]{}));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test5() {\\n\\t\\tassertThat(Program.miniPeaks(new int[]{1, 1, 1, 1, 2, 1, 1, 1}), is(new int[]{2}));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test6() {\\n\\t\\tassertThat(Program.miniPeaks(new int[]{1, 9, 1, 8, 2, 7, 6}), is(new int[]{9,8,7}));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test7() {\\n\\t\\tassertThat(Program.miniPeaks(new int[]{7, 8, 7, 8, 7, 8, 5, 1, 2, 0}), is(new int[]{8, 8, 8, 2}));\\n\\t}\\n}\",\"language\":\"java\",\"quality\":0,\"summary\":\"Write a function that returns all the elements in an array that are strictly greater than their adjacent left and right neighbors.\\n\\nExamples\\nminiPeaks([4, 5, 2, 1, 4, 9, 7, 2]) ➞ [5, 9]\\n// 5 has neighbours 4 and 2, both are less than 5.\\n\\nminiPeaks([1, 2, 1, 1, 3, 2, 5, 4, 4]) ➞ [2, 3, 5]\\n\\nminiPeaks([1, 2, 3, 4, 5, 6]) ➞ []\\n\\nNotes\\nDo not count boundary numbers,\",\"tags\":[\"arrays\",\"loops\"],\"timestamp\":{\"$date\":1604683703708},\"title\":\"Mini Peaks\",\"stats\":{\"completed\":{\"total\":50,\"ratings\":[1,1,1,1,1,1,1,3,2,3,2,2,2,2,1,2,2,3,2,1,1,2,1,1,2,3,1,2,1,2,1,2,0,1,1,0,2,2,1,1,2,1,3,2,1,2,2,1,1,2,2],\"quality\":[],\"rators\":[\"zE46SymvixkeFJmPM\",\"Ae7ohkKXDQnFaKrCZ\",\"Es4eX2stRpyoXeC7f\",\"DrkR35NqnP9NDLbq6\",\"Ym8AjbKGSJooun3nt\",\"gXTAie79kiw28tx5u\",\"jb9RLyyuo565bKDzN\",\"azAzSkvJd7eyXY9x9\",\"DzvdGwHEjqsX7wyKr\",\"8Xx8nWXRydHDBGfQf\",\"jXTnL3JatkKjoifyb\",\"jyoLggHk8xQKZuoQC\",\"fbgn5575LS3jsxABM\",\"hD6sfDtntpqT8NR2o\",\"a777e8chPvJkY3tKa\",\"82weQfHHmno4Mq4X7\",\"buX4mCQhtXCfBjeno\",\"a49eNnfRwSMxsDJXf\",\"DkSMZ3jZLkwviKb9g\",\"qaPjAANdnxFnWfj5d\",\"mG8HqKiAQFTdRZthG\",\"rhS8qXRjZcpDXkwnE\",\"4ySzqKC5s3ZRpG9di\",\"uWs39txhqNnHhREzz\",\"osRNCTvFE8WJ57S6x\",\"dFiTMEkmigmKAzLu2\",\"srJ34BaybkQh3qRkM\",\"J9zJq7PMGb6mqzcHW\",\"vX7XgmNgn5qXd3fcw\",\"wFRLGjA56kj7xyhmv\",\"vRXuYYBNuHEQ29fbm\",\"uf6pJu3SGdnugtZtk\",\"htXCitorobtqYymjN\",\"sxci7DYKNa6q22Sjq\",\"jCjCvyhqhpebkJn34\",\"KMR6vNzvSKMA2cXnK\",\"B4pxRqzo43M7S8FbP\",\"6rvJwN4mcX7iYGjY7\",\"rWhXHhzF4W8bea6LP\",\"hhxjQREtmHSheH9Pj\",\"unqzSsxpxj9sZ7rbD\",\"byLcacnySm4m8FaJv\",\"FxPDKKibxnZjGJLs6\",\"uw47663LqPME8btaA\",\"PAEWysAAFheYiYPBp\",\"nFbmNzMQ38TncmfQX\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"5KAsvzdc9DLfEx65t\",\"language\":\"cpp\"},{\"_id\":\"uiNKhxnvuaJ7ikoKX\",\"language\":\"java\"},{\"_id\":\"jJmSKcXeYWC3pTjBT\",\"language\":\"javascript\"},{\"_id\":\"2gFkEsAqNZrs4yeck\",\"language\":\"python3\"},{\"_id\":\"NTvuRgS2nnFAXw4yz\",\"language\":\"ruby\"}]}}"]