a["{\"msg\":\"result\",\"id\":\"620\",\"result\":{\"_id\":\"PRWwoRZnnh5eyyRbD\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"public class Challenge {\\n\\tpublic static String lookAndSay(String term) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":2.25531914893617,\"familyId\":\"gLWwzZJcBSA2fH4bX\",\"instructions\":\"The look-and-say sequence is generated by _describing_ each group of identical digits in the previous term. If we start at \\\"1\\\", the first five terms in the sequence are:\\n\\n```\\n\\\"1\\\" = \\\"one 1\\\" = \\\"11\\\"\\n\\\"11\\\" = \\\"two 1's\\\" = \\\"21\\\"\\n\\\"21\\\" = \\\"one 2, one 1\\\" = \\\"1211\\\"\\n\\\"1211\\\" = \\\"one 1, one 2, two 1's\\\" = \\\"111221\\\"\\n\\\"111221\\\" = \\\"three 1's, two 2's, one 1\\\" = \\\"312211\\\"\\n```\\n\\nGiven a term (as a string), return the _next term_ in the sequence.\\n\\n### Examples\\n```\\nlookAndSay(\\\"1211\\\") ➞ \\\"111221\\\"\\n\\nlookAndSay(\\\"111221\\\") ➞ \\\"312211\\\"\\n\\nlookAndSay(\\\"31131211131221\\\") ➞ \\\"13211311123113112211\\\"\\n```\\n\\n### Notes\\nTerms will only include the digits 1, 2, and 3.\",\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n  @Test\\n  public void test1() {\\n    assertEquals(\\\"1113213211\\\", Challenge.lookAndSay(\\\"13112221\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test2() {\\n    assertEquals(\\\"31131211131221\\\", Challenge.lookAndSay(\\\"1113213211\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test3() {\\n    assertEquals(\\\"13211311123113112211\\\", Challenge.lookAndSay(\\\"31131211131221\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test4() {\\n    assertEquals(\\\"11131221133112132113212221\\\", Challenge.lookAndSay(\\\"13211311123113112211\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test5() {\\n    assertEquals(\\\"3113112221232112111312211312113211\\\", Challenge.lookAndSay(\\\"11131221133112132113212221\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test6() {\\n    assertEquals(\\\"1321132132111213122112311311222113111221131221\\\", Challenge.lookAndSay(\\\"3113112221232112111312211312113211\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test7() {\\n    assertEquals(\\\"11131221131211131231121113112221121321132132211331222113112211\\\", Challenge.lookAndSay(\\\"1321132132111213122112311311222113111221131221\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test8() {\\n    assertEquals(\\\"311311222113111231131112132112311321322112111312211312111322212311322113212221\\\", Challenge.lookAndSay(\\\"11131221131211131231121113112221121321132132211331222113112211\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test9() {\\n    assertEquals(\\\"132113213221133112132113311211131221121321131211132221123113112221131112311332111213211322211312113211\\\", Challenge.lookAndSay(\\\"311311222113111231131112132112311321322112111312211312111322212311322113212221\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test10() {\\n    assertEquals(\\\"11131221131211132221232112111312212321123113112221121113122113111231133221121321132132211331121321231231121113122113322113111221131221\\\", Challenge.lookAndSay(\\\"132113213221133112132113311211131221121321131211132221123113112221131112311332111213211322211312113211\\\"));\\n  }\\n}\",\"language\":\"java\",\"summary\":\"The look-and-say sequence is generated by describing each group of identical digits in the previous term. If we start at \\\"1\\\", the first five terms in the sequence are:\\n\\n\\\"1\\\" = \\\"one 1\\\" = \\\"11\\\"\\n\\\"11\\\" = \\\"two 1's\\\" = \\\"21\\\"\\n\\\"21\\\" = \\\"one 2, one 1\\\" = \\\"1211\\\"\\n\\\"1211\\\" = \\\"one 1, one 2, two 1's\\\" = \\\"111221\\\"\\n\\\"111221\\\" = \\\"three 1's, two 2's, one 1\\\" = \\\"312211\\\"\\n\\nGiven a term (as a str\",\"tags\":[\"language_fundamentals\",\"strings\"],\"timestamp\":{\"$date\":1568685638872},\"title\":\"Look-And-Say Sequence\",\"stats\":{\"completed\":{\"total\":49,\"ratings\":[2,2,2,2,2,4,3,3,3,3,1,4,2,3,2,2,3,2,0,1,2,2,2,3,3,1,3,0,1,2,1,0,3,2,3,3,2,3,3,2,3,1,3,3,3,3,3],\"rators\":[\"3pdgguqZgNDSAJSGm\",\"sxci7DYKNa6q22Sjq\",\"hZr4qXRsSumkpJXK9\",\"MBSqodcSoyFnZZn9S\",\"YF79LnTdprobbYY5v\",\"6qyzL2iceT8a7bos4\",\"hxi9vPuDgrQv4m86Z\",\"dpeLk7HeaBeTY2ssZ\",\"ATqGFvYyFe3M9oHnv\",\"zhDMJG38iQgjykEbj\",\"SYRkWhT2EBgB5ar7P\",\"8rF6PHMSaybTDsvXr\",\"NoLRdmLAS93CYxz3k\",\"NCB3RaRBonefnHBJD\",\"J9zJq7PMGb6mqzcHW\",\"b4kvtfR2SqyBfbraY\",\"wYYMNPe8nSiJFbvJw\",\"Es4eX2stRpyoXeC7f\",\"eXW8reZCCZHQzJjQi\",\"TrquEHytntLKHA4m2\",\"rwETZ6XCNoHCEyB66\",\"jyoLggHk8xQKZuoQC\",\"8J2Dqqz9PaFufQzwY\",\"rehehi2Tr2mwaEoJE\",\"etoSR23iELGGgs9rA\",\"5seiNqw6ZXoF2GRRd\",\"pBMXMQem6BpSeooYT\",\"dpJTai3i9aNkCS3sa\",\"k63LjKkX5p7SYng7C\",\"wQbpt32R3KhHaNatB\",\"mfm3gB39arY8Rjb2y\",\"rrqninRkY77FL528B\",\"6kz7jjJS8W4tikYQT\",\"DzvdGwHEjqsX7wyKr\",\"yXGiiSAR5nBHnH3yr\",\"mQKWauR6b252TmdX4\",\"2sZrwmQcNFJG3d3HW\",\"bAkPrf7L39Lg2YpDc\",\"qaPjAANdnxFnWfj5d\",\"rhS8qXRjZcpDXkwnE\",\"2NJZbusRvu3eJ4tHu\",\"KMR6vNzvSKMA2cXnK\",\"htXCitorobtqYymjN\"],\"quality\":[5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":5,\"family\":[{\"_id\":\"TDv5ZEXXyQiekopx2\",\"language\":\"cpp\"},{\"_id\":\"PRWwoRZnnh5eyyRbD\",\"language\":\"java\"},{\"_id\":\"TCfRGQMcwYuCFq3nA\",\"language\":\"javascript\"},{\"_id\":\"rzburChL8YYe98vaP\",\"language\":\"python3\"},{\"_id\":\"ZG5qC6Bv6nZsNf5c2\",\"language\":\"ruby\"}]}}"]