a["{\"msg\":\"result\",\"id\":\"592\",\"result\":{\"_id\":\"rCkeAiRCpduosZ4Hj\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class DigitSharing {\\n\\tpublic static boolean sharedDigits(int[] num) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":2.185185185185185,\"familyId\":\"qwSHMpB85jjTZM5TW\",\"instructions\":\"Create a function that returns `true` if each pair of adjacent numbers in an array shares **at least one digit** and `false` otherwise.\\n\\n### Examples\\n```\\nsharedDigits([12, 13, 17, 19, 79]) ➞ true\\n// 12 and 13 share 1, 13 and 17 share 1 and etc.\\n\\nsharedDigits([33, 53, 6351, 12, 2242, 44]) ➞ true\\n// 33 and 53 share 3, 53 and 6351 share 3 and 5, etc.\\n\\nsharedDigits([33, 44, 55, 66, 77]) ➞ false\\n\\nsharedDigits([1, 11, 12, 13, 14, 15, 16]) ➞ true\\n\\nsharedDigits([1, 12, 123, 1234, 1235, 6789]) ➞ false\\n```\\n\\n### Notes\\nN/A\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"/** \\n===================================== \\nTestGen 2.3 for JUnit 4.13.0 \\t\\t\\nTest Case: DigitSharing::sharedDigits \\nTimestamp: 11/15/2020 4:33:33 PM \\n------------------------------------- \\n® DARKKO 2020 © \\n===================================== \\n\\n**/ \\n\\nimport static org.junit.Assert.assertEquals; \\nimport org.junit.Test; \\n\\npublic class DigitSharingTest { \\n\\t\\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertEquals(true, DigitSharing.sharedDigits(new int[] {12, 13, 17, 19, 79}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertEquals(true, DigitSharing.sharedDigits(new int[] {33, 53, 6351, 12, 2242, 44}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertEquals(false, DigitSharing.sharedDigits(new int[] {33, 44, 55, 66, 77}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertEquals(false, DigitSharing.sharedDigits(new int[] {1, 12, 123, 1234, 1235, 6789}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertEquals(true, DigitSharing.sharedDigits(new int[] {5789, 798, 98, 995, 599, 699}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertEquals(false, DigitSharing.sharedDigits(new int[] {5, 4, 44, 444}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertEquals(true, DigitSharing.sharedDigits(new int[] {5, 65, 66, 76, 78}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertEquals(true, DigitSharing.sharedDigits(new int[] {5, 55, 665, 66665555, 65, 66, 76, 78, 989}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test09() { \\n\\t\\tassertEquals(false, DigitSharing.sharedDigits(new int[] {5, 55, 665, 4444, 65, 66, 76, 78, 989}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() { \\n\\t\\tassertEquals(true, DigitSharing.sharedDigits(new int[] {1, 11, 12, 13, 14, 15, 16}));\\n\\t}\\n\\n}\\n// end of tests\",\"language\":\"java\",\"quality\":0,\"summary\":\"Create a function that returns true if each pair of adjacent numbers in an array shares at least one digit and false otherwise.\\n\\nExamples\\nsharedDigits([12, 13, 17, 19, 79]) ➞ true\\n// 12 and 13 share 1, 13 and 17 share 1 and etc.\\n\\nsharedDigits([33, 53, 6351, 12, 2242, 44]) ➞ true\\n// 33 and 53 share 3, 53 and 6351 share 3 and 5, etc.\\n\\nsharedDigits([33, 44, 55, 6\",\"tags\":[\"arrays\",\"strings\",\"validation\"],\"timestamp\":{\"$date\":1605430552367},\"title\":\"Shared Digits\",\"stats\":{\"completed\":{\"total\":24,\"ratings\":[2,2,2,2,2,2,3,4,2,2,3,3,2,2,0,3,3,1,1,1,3,3,2,3,1,3,2],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"Es4eX2stRpyoXeC7f\",\"Ym8AjbKGSJooun3nt\",\"gXTAie79kiw28tx5u\",\"iZHowotDLiZumkTqy\",\"yXGiiSAR5nBHnH3yr\",\"jyoLggHk8xQKZuoQC\",\"9M384SbCW7eciE5zc\",\"c7uBxu2rgY77H5d79\",\"vRXuYYBNuHEQ29fbm\",\"mfm3gB39arY8Rjb2y\",\"qaPjAANdnxFnWfj5d\",\"rhS8qXRjZcpDXkwnE\",\"jCjCvyhqhpebkJn34\",\"wFRLGjA56kj7xyhmv\",\"htXCitorobtqYymjN\",\"2NJZbusRvu3eJ4tHu\",\"sxci7DYKNa6q22Sjq\",\"KMR6vNzvSKMA2cXnK\",\"a49eNnfRwSMxsDJXf\",\"rWhXHhzF4W8bea6LP\",\"uw47663LqPME8btaA\"]},\"flags\":0},\"editorId\":\"a777e8chPvJkY3tKa\",\"family\":[{\"_id\":\"jQKpyhYLwhaimYPha\",\"language\":\"cpp\"},{\"_id\":\"rCkeAiRCpduosZ4Hj\",\"language\":\"java\"},{\"_id\":\"B5ReG5ZDAvAdsrztL\",\"language\":\"javascript\"},{\"_id\":\"rk4nyFSXc6vcSWMWH\",\"language\":\"python3\"},{\"_id\":\"znsLfnCoRSwc38zDa\",\"language\":\"ruby\"}]}}"]