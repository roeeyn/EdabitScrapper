a["{\"msg\":\"result\",\"id\":\"798\",\"result\":{\"_id\":\"hbHJdMv4HubYs5TRv\",\"author\":\"Edward Clark\",\"authorId\":\"3pdgguqZgNDSAJSGm\",\"code\":\"public class Challenge {\\n\\tpublic static boolean isWordChain(String[] words) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":3.5172413793103448,\"familyId\":\"diGZd2RYkdGzWsCqK\",\"instructions\":\"Let's update our previous **word-chain** definition. In this 2.0 version, a **word-chain** is an array of words, where the next word is formed by either:\\n\\n1. Changing exactly **one** letter from the previous word.\\n2. Adding or subtracting **one** letter.\\n\\n### Examples\\n```\\nisWordChain([\\\"row\\\", \\\"crow\\\", \\\"crown\\\", \\\"brown\\\", \\\"brawn\\\"]) ➞ true\\n// add \\\"c\\\" to \\\"row\\\" to get \\\"crow\\\", \\\"n\\\" to get \\\"crown\\\", etc.\\n\\nisWordChain([\\\"flew\\\", \\\"flaw\\\", \\\"flan\\\", \\\"flat\\\", \\\"fat\\\", \\\"rat\\\", \\\"rot\\\", \\\"tot\\\"]) ➞ true\\n\\nisWordChain([\\\"meek\\\", \\\"meet\\\", \\\"meat\\\", \\\"teal\\\"]) ➞ false\\n// \\\"meat\\\" => \\\"teal\\\" changes 2 letters (can only change 1).\\n\\nisWordChain([\\\"run\\\", \\\"runny\\\", \\\"bunny\\\"]) ➞ false\\n// \\\"run\\\" => \\\"runny\\\" adds 2 letters (can only add 1).\\n```\\n\\n### Notes\\n- You can only do one (not both) for each word change.\\n- All words will be in lower-case.\",\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTest {\\n\\t@Test\\n\\tpublic void test1() {\\n\\t\\tassertEquals(true, Challenge.isWordChain(new String[]{\\\"row\\\", \\\"crow\\\", \\\"crown\\\", \\\"brown\\\", \\\"brawn\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test2() {\\n\\t\\tassertEquals(true, Challenge.isWordChain(new String[]{\\\"flew\\\", \\\"flaw\\\", \\\"flan\\\", \\\"flat\\\", \\\"fat\\\", \\\"rat\\\", \\\"rot\\\", \\\"tot\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test3() {\\n\\t\\tassertEquals(false, Challenge.isWordChain(new String[]{\\\"meek\\\", \\\"meet\\\", \\\"meat\\\", \\\"teal\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test4() {\\n\\t\\tassertEquals(false, Challenge.isWordChain(new String[]{\\\"run\\\", \\\"runny\\\", \\\"bunny\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test5() {\\n\\t\\tassertEquals(true, Challenge.isWordChain(new String[]{\\\"fun\\\", \\\"fund\\\", \\\"find\\\", \\\"bind\\\", \\\"wind\\\", \\\"wild\\\", \\\"wile\\\", \\\"wiles\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test6() {\\n\\t\\tassertEquals(true, Challenge.isWordChain(new String[]{\\\"nut\\\", \\\"but\\\", \\\"bot\\\", \\\"boot\\\", \\\"loot\\\", \\\"look\\\", \\\"book\\\", \\\"brook\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test7() {\\n\\t\\tassertEquals(true, Challenge.isWordChain(new String[]{\\\"some\\\", \\\"tome\\\", \\\"tame\\\", \\\"lame\\\", \\\"flame\\\", \\\"flamer\\\", \\\"blamer\\\", \\\"blamers\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test8() {\\n\\t\\tassertEquals(false, Challenge.isWordChain(new String[]{\\\"a\\\", \\\"at\\\", \\\"hat\\\", \\\"that\\\", \\\"what\\\", \\\"flat\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test9() {\\n\\t\\tassertEquals(false, Challenge.isWordChain(new String[]{\\\"link\\\", \\\"blink\\\", \\\"wink\\\", \\\"sink\\\"}));\\n\\t}\\n}\",\"language\":\"java\",\"summary\":\"Let's update our previous word-chain definition. In this 2.0 version, a word-chain is an array of words, where the next word is formed by either:\\n\\nChanging exactly one letter from the previous word.\\nAdding or subtracting one letter.\\n\\nExamples\\nisWordChain([\\\"row\\\", \\\"crow\\\", \\\"crown\\\", \\\"brown\\\", \\\"brawn\\\"]) ➞ true\\n// add \\\"c\\\" to \\\"row\\\" to get \\\"crow\\\", \\\"n\\\" to get \\\"crown\\\", e\",\"tags\":[\"arrays\",\"strings\",\"validation\"],\"timestamp\":{\"$date\":1570522589519},\"title\":\"Word Chain 2.0\",\"stats\":{\"completed\":{\"total\":32,\"ratings\":[3,3,3,3,3,4,5,4,0,5,5,5,1,5,3,3,5,5,5,2,4,5,5,0,5,0,3,3,5],\"rators\":[\"3pdgguqZgNDSAJSGm\",\"fQCHGFe43dEtqjEFT\",\"sxci7DYKNa6q22Sjq\",\"SnY7WidXJoAyyuPuA\",\"W4jpCs2jekeg5qAwc\",\"McvYamfoJvWsSXWsK\",\"AyrEvM2GLX2jqM772\",\"rehehi2Tr2mwaEoJE\",\"Es4eX2stRpyoXeC7f\",\"7djAghy9fBhtLnKw3\",\"xXpZwhQzMHD5yp9Zh\",\"4RHx3H8EwP2oboW8e\",\"TrquEHytntLKHA4m2\",\"j2MGy7uBRof53S6Gm\",\"k63LjKkX5p7SYng7C\",\"QS45qu2DFXcCqpAnB\",\"jRqY4i8gPemsZMBGf\",\"Ym8AjbKGSJooun3nt\",\"QXR2qGcvrK5Xkxdea\",\"4Gp7vr4AGQwcmE4HJ\",\"a777e8chPvJkY3tKa\",\"7YbGHKwApShJ7J4NK\",\"nHj7SC5cnmkTApbgY\",\"LNCb5rksJLJ43L4Nw\",\"uw47663LqPME8btaA\",\"buX4mCQhtXCfBjeno\",\"KMR6vNzvSKMA2cXnK\"],\"quality\":[4,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.666666666666667,\"family\":[{\"_id\":\"4aPh4ryS5CPihFojQ\",\"language\":\"cpp\"},{\"_id\":\"hbHJdMv4HubYs5TRv\",\"language\":\"java\"},{\"_id\":\"yGvaYr3X8xHPxWRcb\",\"language\":\"javascript\"},{\"_id\":\"eoK63mG5tJDu439nJ\",\"language\":\"python3\"},{\"_id\":\"X6aT5HiSpZ33mbkN5\",\"language\":\"ruby\"}]}}"]