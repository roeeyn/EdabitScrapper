a["{\"msg\":\"result\",\"id\":\"706\",\"result\":{\"_id\":\"i3vx6M7poKZoZi8iK\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"public class Challenge {\\n\\tpublic static String truncatable(int num) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":2.736842105263158,\"familyId\":\"gtdvFS5Lh3wpHCmJb\",\"instructions\":\"A left-truncatable prime is a prime number that contains no 0 digits and, when the first digit is successively removed, the result is always prime.\\n\\nA right-truncatable prime is a prime number that contains no 0 digits and, when the last digit is successively removed, the result is always prime.\\n\\nCreate a function that takes an integer as an argument and:\\n\\n- If the integer is only a left-truncatable prime, return `\\\"left\\\"`.\\n- If the integer is only a right-truncatable prime, return `\\\"right\\\"`.\\n- If the integer is both, return `\\\"both\\\"`.\\n- Otherwise, return `\\\"none\\\"`.\\n\\n### Examples\\n```\\ntruncatable(9137) ➞ \\\"left\\\"\\n// Because 9137, 137, 37 and 7 are all prime.\\n\\ntruncatable(5939) ➞ \\\"right\\\"\\n// Because 5939, 593, 59 and 5 are all prime.\\n\\ntruncatable(317) ➞ \\\"both\\\"\\n// Because 317, 17 and 7 are all prime and 317, 31 and 3 are all prime.\\n\\ntruncatable(5) ➞ \\\"both\\\"\\n// The trivial case of single-digit primes is treated as truncatable from both directions.\\n\\ntruncatable(139) ➞ \\\"none\\\"\\n// 1 and 9 are non-prime, so 139 cannot be truncatable from either direction.\\n\\ntruncatable(103) ➞ \\\"none\\\"\\n// Because it contains a 0 digit (even though 103 and 3 are primes).\\n```\\n\\n### Notes\\nThe input integers will not exceed 10^6.\",\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n  @Test\\n  public void test1() {\\n    assertEquals(\\\"left\\\", Challenge.truncatable(47));\\n  }\\n\\t\\n\\t@Test\\n  public void test2() {\\n    assertEquals(\\\"left\\\", Challenge.truncatable(347));\\n  }\\n\\t\\n\\t@Test\\n  public void test3() {\\n    assertEquals(\\\"left\\\", Challenge.truncatable(62383));\\n  }\\n\\t\\n\\t@Test\\n  public void test4() {\\n    assertEquals(\\\"right\\\", Challenge.truncatable(79));\\n  }\\n\\t\\n\\t@Test\\n  public void test5() {\\n    assertEquals(\\\"right\\\", Challenge.truncatable(7331));\\n  }\\n\\t\\n\\t@Test\\n  public void test6() {\\n    assertEquals(\\\"right\\\", Challenge.truncatable(233993));\\n  }\\n\\t\\n\\t@Test\\n  public void test7() {\\n    assertEquals(\\\"both\\\", Challenge.truncatable(3797));\\n  }\\n\\t\\n\\t@Test\\n  public void test8() {\\n    assertEquals(\\\"both\\\", Challenge.truncatable(739397));\\n  }\\n\\t\\n\\t@Test\\n  public void test9() {\\n\\t\\tSystem.out.println(\\\"Single-digit number treated as both.\\\");\\n    assertEquals(\\\"both\\\", Challenge.truncatable(5));\\n  }\\n\\t\\n\\t@Test\\n  public void test10() {\\n    assertEquals(\\\"none\\\", Challenge.truncatable(349));\\n  }\\n\\t\\n\\t@Test\\n  public void test11() {\\n\\t\\tSystem.out.println(\\\"The starting number is composite.\\\");\\n    assertEquals(\\\"none\\\", Challenge.truncatable(2317));\\n  }\\n\\t\\n\\t@Test\\n  public void test12() {\\n\\t\\tSystem.out.println(\\\"1 is not a prime.\\\");\\n    assertEquals(\\\"none\\\", Challenge.truncatable(131));\\n  }\\n\\t\\n\\t@Test\\n  public void test13() {\\n\\t\\tSystem.out.println(\\\"Cannot contain a 0 digit.\\\");\\n    assertEquals(\\\"none\\\", Challenge.truncatable(6043));\\n  }\\n}\",\"language\":\"java\",\"summary\":\"A left-truncatable prime is a prime number that contains no 0 digits and, when the first digit is successively removed, the result is always prime.\\n\\nA right-truncatable prime is a prime number that contains no 0 digits and, when the last digit is successively removed, the result is always prime.\\n\\nCreate a function that takes an integer as an argument and:\\n\\nIf\",\"tags\":[\"math\",\"numbers\",\"loops\"],\"timestamp\":{\"$date\":1568690677342},\"title\":\"Truncatable Primes\",\"stats\":{\"completed\":{\"total\":45,\"ratings\":[4,4,4,4,4,3,0,2,3,1,4,3,3,3,2,3,1,4,3,4,0,1,4,4,0,3,2,3,1,4,3,3,4,1,3,3,4,2],\"rators\":[\"3pdgguqZgNDSAJSGm\",\"SnY7WidXJoAyyuPuA\",\"sxci7DYKNa6q22Sjq\",\"SbqbwWoKws3mR8p2E\",\"oYKSeBviFTPSbbn2Z\",\"YF79LnTdprobbYY5v\",\"SvkZgQPjnhL2iC5b3\",\"Zzp8oNRSgmBgLD9Zd\",\"DhZCh65tYzJMrZ6W9\",\"4jyZyrv5etHj78Jfz\",\"eXW8reZCCZHQzJjQi\",\"J9zJq7PMGb6mqzcHW\",\"AzERMCwmKzy5zXJ3S\",\"2PR653L4KSN97r534\",\"Es4eX2stRpyoXeC7f\",\"8J2Dqqz9PaFufQzwY\",\"rehehi2Tr2mwaEoJE\",\"TrquEHytntLKHA4m2\",\"gJbvbqosimaP4ZAYb\",\"pBMXMQem6BpSeooYT\",\"jyoLggHk8xQKZuoQC\",\"DkSMZ3jZLkwviKb9g\",\"k63LjKkX5p7SYng7C\",\"NzJKK8Cuf3bcqZfcw\",\"QS45qu2DFXcCqpAnB\",\"6kz7jjJS8W4tikYQT\",\"Ym8AjbKGSJooun3nt\",\"87Q3XMWaxYqQfFJzm\",\"gXTAie79kiw28tx5u\",\"mQKWauR6b252TmdX4\",\"DqZMjeKpfjDrjhEPo\",\"mGaEDPw5FsDb3vdnq\",\"LNCb5rksJLJ43L4Nw\",\"rhS8qXRjZcpDXkwnE\",\"buX4mCQhtXCfBjeno\",\"KMR6vNzvSKMA2cXnK\",\"wFRLGjA56kj7xyhmv\"],\"quality\":[5,5,1,4]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":3.75,\"family\":[{\"_id\":\"u5ScK7AcPwtpPdizy\",\"language\":\"cpp\"},{\"_id\":\"i3vx6M7poKZoZi8iK\",\"language\":\"java\"},{\"_id\":\"ATybdGTuRuHAjwnyf\",\"language\":\"javascript\"},{\"_id\":\"BfSj2nBc33aCQrbSg\",\"language\":\"python3\"},{\"_id\":\"NDNX3chz6gmzgoerc\",\"language\":\"ruby\"}]}}"]