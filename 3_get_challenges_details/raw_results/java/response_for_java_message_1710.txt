a["{\"msg\":\"result\",\"id\":\"414\",\"result\":{\"_id\":\"yPQ26h7KYpqsftRPY\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"public class Challenge {\\n\\tpublic static int reversedBinaryInteger(int n) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":1.5393258426966292,\"familyId\":\"H3ojsurboaTDJfAYZ\",\"instructions\":\"Write a function that takes an integer `n`, reverses the binary representation of that integer, and returns the new integer from the reversed binary.\\n\\n### Examples\\n```\\nreversedBinaryInteger(10) ➞ 5\\n// 10 = 1010 -> 0101 = 5\\n\\nreversedBinaryInteger(12) ➞ 3\\n// 12 = 1100 -> 0011 = 3\\n\\nreversedBinaryInteger(25) ➞ 19\\n// 25 = 11001 -> 10011 = 19\\n\\nreversedBinaryInteger(45) ➞ 45\\n// 45 = 101101 -> 101101 = 45\\n```\\n\\n### Notes\\nAll values of `n` will be positive.\",\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n  @Test\\n  public void test1() {\\n    assertEquals(1, Challenge.reversedBinaryInteger(1));\\n  }\\n\\t\\n\\t@Test\\n  public void test2() {\\n    assertEquals(1, Challenge.reversedBinaryInteger(4));\\n  }\\n\\t\\n\\t@Test\\n  public void test3() {\\n    assertEquals(5, Challenge.reversedBinaryInteger(5));\\n  }\\n\\t\\n\\t@Test\\n  public void test4() {\\n    assertEquals(31, Challenge.reversedBinaryInteger(31));\\n  }\\n\\t\\n\\t@Test\\n  public void test5() {\\n    assertEquals(37, Challenge.reversedBinaryInteger(82));\\n  }\\n\\t\\n\\t@Test\\n  public void test6() {\\n    assertEquals(45, Challenge.reversedBinaryInteger(90));\\n  }\\n\\t\\n\\t@Test\\n  public void test7() {\\n    assertEquals(255, Challenge.reversedBinaryInteger(255));\\n  }\\n\\t\\n\\t@Test\\n  public void test8() {\\n    assertEquals(251, Challenge.reversedBinaryInteger(446));\\n  }\\n\\t\\n\\t@Test\\n  public void test9() {\\n    assertEquals(391, Challenge.reversedBinaryInteger(451));\\n  }\\n\\t\\n\\t@Test\\n  public void test10() {\\n    assertEquals(377, Challenge.reversedBinaryInteger(634));\\n  }\\n\\t\\n\\t@Test\\n  public void test11() {\\n    assertEquals(67, Challenge.reversedBinaryInteger(776));\\n  }\\n\\t\\n\\t@Test\\n  public void test12() {\\n    assertEquals(263, Challenge.reversedBinaryInteger(898));\\n  }\\n\\t\\n\\t@Test\\n  public void test13() {\\n    assertEquals(1937, Challenge.reversedBinaryInteger(1103));\\n  }\\n\\t\\n\\t@Test\\n  public void test14() {\\n    assertEquals(2487, Challenge.reversedBinaryInteger(3801));\\n  }\\n\\t\\n\\t@Test\\n  public void test15() {\\n    assertEquals(1, Challenge.reversedBinaryInteger(4096));\\n  }\\n\\t\\n\\t@Test\\n  public void test16() {\\n    assertEquals(10017, Challenge.reversedBinaryInteger(8505));\\n  }\\n\\t\\n\\t@Test\\n  public void test17() {\\n    assertEquals(328843, Challenge.reversedBinaryInteger(428293));\\n  }\\n\\t\\n\\t@Test\\n  public void test18() {\\n    assertEquals(904609, Challenge.reversedBinaryInteger(547643));\\n  }\\n\\t\\n\\t@Test\\n  public void test19() {\\n    assertEquals(681385, Challenge.reversedBinaryInteger(612965));\\n  }\\n\\t\\n\\t@Test\\n  public void test20() {\\n    assertEquals(1033263, Challenge.reversedBinaryInteger(999999));\\n  }\\n}\",\"language\":\"java\",\"summary\":\"Write a function that takes an integer n, reverses the binary representation of that integer, and returns the new integer from the reversed binary.\\n\\nExamples\\nreversedBinaryInteger(10) ➞ 5\\n// 10 = 1010 -> 0101 = 5\\n\\nreversedBinaryInteger(12) ➞ 3\\n// 12 = 1100 -> 0011 = 3\\n\\nreversedBinaryInteger(25) ➞ 19\\n// 25 = 11001 -> 10011 = 19\\n\\nreversedBinaryInteger(45) ➞ 45\\n/\",\"tags\":[\"bit_operations\",\"language_fundamentals\"],\"timestamp\":{\"$date\":1567989540754},\"title\":\"Reversing a Binary String\",\"stats\":{\"completed\":{\"total\":117,\"ratings\":[2,2,2,2,2,3,2,0,0,3,1,0,1,3,1,2,2,2,2,0,2,1,2,0,3,2,2,1,2,2,2,1,2,0,1,1,0,3,3,1,0,1,1,1,2,2,1,1,0,2,2,1,0,2,2,0,1,1,0,2,2,2,2,2,2,2,2,1,2,2,2,1,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,1],\"rators\":[\"sxci7DYKNa6q22Sjq\",\"3pdgguqZgNDSAJSGm\",\"3gxJoNp59B4eoyyed\",\"SnY7WidXJoAyyuPuA\",\"6KcnCdQ3zEnARWogF\",\"oYKSeBviFTPSbbn2Z\",\"hSrFWemiugfHeL9Fm\",\"Ha5J49rhojBRy3BaM\",\"NLXx55dzDY9DryZ4z\",\"Yohr2MmAyaWGMbB35\",\"r9hHZYPQAqJ9DbwLX\",\"CLmJduqJHX83dM4Pd\",\"KowhvsYvaqPMAf9Sf\",\"u4yanfWeeZsN3xWgc\",\"JFodQijHHdRkkrZvT\",\"phA6MomRzh9oz3eqn\",\"J9zJq7PMGb6mqzcHW\",\"Es4eX2stRpyoXeC7f\",\"8J2Dqqz9PaFufQzwY\",\"AyrEvM2GLX2jqM772\",\"8JyqsSbN2FJXPr3cw\",\"qGXe6TQvuknPLNnHY\",\"TrquEHytntLKHA4m2\",\"hB5mgzMwQSnhBzi7P\",\"M3sPbyvBvjTu8Nga8\",\"nkftR9uDB88zyLdGf\",\"82weQfHHmno4Mq4X7\",\"Kso7rzAKB4TTCPKgM\",\"Zhy5X7BZnqk8hacEw\",\"5seiNqw6ZXoF2GRRd\",\"jyoLggHk8xQKZuoQC\",\"fZjkX29nhRTWWb75k\",\"mfm3gB39arY8Rjb2y\",\"8zZ6xmzpiFair25qr\",\"WZujpe8yQAyZmpWHg\",\"cNkiQaAx5iZZy7wz5\",\"45FXSeKSLChn3gEhc\",\"etoSR23iELGGgs9rA\",\"DePiAS7u5Pk9d6SLr\",\"htXCitorobtqYymjN\",\"Yom3RzkMYpweE8cbS\",\"y6kfyYmydcD8tkBk7\",\"dpJTai3i9aNkCS3sa\",\"B4pxRqzo43M7S8FbP\",\"DzvdGwHEjqsX7wyKr\",\"zwruFCmuHkwJTpYqg\",\"o7kxgQupXQCTusjZo\",\"g4NCSxxHqHCGMpWwT\",\"KxLMWekCxzy2Eem7u\",\"ovqx6WjgmuvhNaiQR\",\"muXMnzQwGLzN6j2Jr\",\"Fd9765rksgPK4E2Zy\",\"a49eNnfRwSMxsDJXf\",\"Ym8AjbKGSJooun3nt\",\"AeJSxRqw2dJZuGvdk\",\"wBDcgF2qB7FQRuRBd\",\"oMZovHkR6QqNvQwyc\",\"azAzSkvJd7eyXY9x9\",\"GKuFLr7o2ntqggTPi\",\"jb9RLyyuo565bKDzN\",\"yXGiiSAR5nBHnH3yr\",\"DkSMZ3jZLkwviKb9g\",\"gXTAie79kiw28tx5u\",\"iZhTdp2KS3SnZTncb\",\"zTEKMLMevG8xfxEj6\",\"zYFnJSSJcMy9hFwsi\",\"yd5PakB2z33q2JrTZ\",\"oMfq73A434YWhSuWQ\",\"mG8HqKiAQFTdRZthG\",\"YL9pqyCu8xsds8J49\",\"8Xx8nWXRydHDBGfQf\",\"P5BhjZxyeHQYTNyB9\",\"jXTnL3JatkKjoifyb\",\"dcW9oK2uRo8h8mBe2\",\"BWqQ68pvNedARDcBN\",\"unNqQjSHzkb4pCzEu\",\"mQKWauR6b252TmdX4\",\"tyLS9T6YMfg9fMtYJ\",\"pi76g3eRpnKrhee2a\",\"gBGjCfJvPHswDM5JQ\",\"bur3yQ8s34zqKGEro\",\"8msaYhm3hEJbTvi7D\",\"buX4mCQhtXCfBjeno\",\"zZfMwLuoERGmybgib\",\"pqhqgW7XCoat3E8o3\",\"GaJNJwcdyB9ueYFst\",\"4ySzqKC5s3ZRpG9di\",\"rhS8qXRjZcpDXkwnE\",\"HXbTKW3jmmyRAsKrr\",\"c7uBxu2rgY77H5d79\",\"6rvJwN4mcX7iYGjY7\",\"wFRLGjA56kj7xyhmv\",\"srJ34BaybkQh3qRkM\",\"xEX3TDY6C2h82dJTn\",\"p6tGJ9dN7HZQipR2B\",\"jEfGxSSmxvNTzBoRc\",\"KMR6vNzvSKMA2cXnK\",\"PJu3WcTpfRrvHfQiS\",\"hhxjQREtmHSheH9Pj\",\"rWhXHhzF4W8bea6LP\",\"eXME6AmouMmTezHmN\",\"bNNzujyLbK9o4sRwu\",\"unqzSsxpxj9sZ7rbD\",\"FxPDKKibxnZjGJLs6\",\"uw47663LqPME8btaA\"],\"quality\":[3,5,5,2,5,4,5,5,4,5,1,5,3,5,5,5,5,5,3,5,3]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":1},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.190476190476191,\"family\":[{\"_id\":\"JdtDPMdNcGstD7cy6\",\"language\":\"cpp\"},{\"_id\":\"TgtrCxdZxjaNBKvk3\",\"language\":\"csharp\"},{\"_id\":\"yPQ26h7KYpqsftRPY\",\"language\":\"java\"},{\"_id\":\"4s93F8ZiEdHjmMnMv\",\"language\":\"javascript\"},{\"_id\":\"rrqtoeZ3M6KBZMdxB\",\"language\":\"php\"},{\"_id\":\"WPojigJER35bJT6YH\",\"language\":\"python3\"},{\"_id\":\"RSRB4P452AWASX6wd\",\"language\":\"ruby\"}]}}"]