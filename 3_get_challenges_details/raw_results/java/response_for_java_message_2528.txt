a["{\"msg\":\"result\",\"id\":\"819\",\"result\":{\"_id\":\"5s8AXfbk4X2Dmimrk\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class MultidimensionArrays {\\n\\tpublic static Object[] flatten(Object[] r) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":3.7,\"familyId\":\"eu9ejyrePk6moD6xX\",\"instructions\":\"The nesting of arrays can be viewed indirectly as curves and barriers of the real data embedded in arrays, thus, defeats the very purpose of directly accessing them thru indexes and slices. Write a **recursive** function to **flatten those curves** (i.e. level, iron, compress, raze, topple) and expose those data as a **single array** other than an *array of arrays*.\\n\\n### Examples\\n```\\nflatten([\\\"Tesh\\\", 121317, [\\\"Love\\\", \\\"of\\\", [\\\"my\\\", [\\\"life\\\", [\\\"and\\\", \\\"my\\\", [\\\"world\\\"], \\\"entirely\\\"]]]]])\\n➞ [\\\"Tesh\\\", 121317, \\\"Love\\\", \\\"of\\\", \\\"my\\\", \\\"life\\\", \\\"and\\\", \\\"my\\\", \\\"world\\\", \\\"entirely\\\"]\\n\\nflatten([[[[[[\\\"direction\\\"], [372], [\\\"one\\\"], [[[[[[\\\"Era\\\"]]]], \\\"Sruth\\\", 3337]]], \\\"First\\\"]]]])\\n➞ [\\\"direction\\\", 372, \\\"one\\\", \\\"Era\\\", \\\"Sruth\\\", 3337, \\\"First\\\"]\\n\\nflatten([[4666], [5394], [466], [[[\\\"Saskia\\\", [[[[[\\\"DXTD\\\"]], \\\"Lexi\\\"]]]]]]])\\n➞ [4666, 5394, 466, \\\"Saskia\\\", \\\"DXTD\\\", \\\"Lexi\\\"]\\n\\nflatten([[696], [\\\"friend\\\"], [\\\"power\\\"], [[[[\\\"Marcus\\\"]]]], [\\\"philus\\\"]])\\n➞ [696, \\\"friend\\\", \\\"power\\\", \\\"Marcus\\\", \\\"philus\\\"]\\n\\nflatten([[[\\\"deep\\\"], [[[\\\"ocean\\\"]]], [[\\\"Marge\\\"]], [\\\"rase\\\", 876]]])\\n➞ [\\\"deep\\\", \\\"ocean\\\", \\\"Marge\\\", \\\"rase\\\", 876]\\n```\\n\\n### Notes\\n- Every array has at least one element.\\n- You are expected to solve this challenge via a **recursive** approach.\\n- You can check on the **Resources** tab for more details about recursion in Java.\\n- A similar version of this challenge can be found via this [link](https://edabit.com/challenge/cwyHz8adjAg6dpxce).\\n- A collection of challenges that deals on recursion can be found via this [link](https://edabit.com/collection/Yx78jEBrKppHBNsoQ).\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"/** \\n======================================== \\nTestGen 2.3 for JUnit 4.13.0 \\t\\t\\nTest Case: MultidimensionArrays::flatten \\nTimestamp: 10/16/2020 4:10:11 PM\\n---------------------------------------- \\n® DARKKO 2020 © \\n======================================== \\n\\n**/ \\n\\nimport static org.junit.Assert.assertArrayEquals;\\nimport org.junit.Test;\\n\\npublic class MultidimensionArraysTest {\\n\\tprivate Object[][] objVector = new Object[][] {\\n\\t\\t{\\\"Tesh\\\", 121317, new Object[] {\\\"Love\\\", \\\"of\\\", new Object[] {\\\"my\\\", new Object[] {\\\"life\\\", new Object[] {\\\"and\\\", \\\"my\\\", new Object[] {\\\"world\\\"}, \\\"entirely\\\"}}}}},\\n\\t  {new Object[] {new Object[] {new Object[] {new Object[] {new Object[] {\\\"direction\\\"}, new Object[] {372}, new Object[] {\\\"one\\\"}, new Object[] {new Object[] {new Object[] {new Object[] {new Object[] {new Object[] {\\\"Era\\\"}}}}, \\\"Sruth\\\", 3337}}}, \\\"First\\\"}}}},\\n\\t  {new Object[] {4666}, new Object[] {5394}, new Object[] {466}, new Object[] {new Object[] {new Object[] {\\\"Saskia\\\", new Object[] {new Object[] {new Object[] {new Object[] {new Object[] {\\\"DXTD\\\"}}, \\\"Lexi\\\"}}}}}}},\\n\\t  {new Object[] {696}, new Object[] {\\\"friend\\\"}, new Object[] {\\\"power\\\"}, new Object[] {new Object[] {new Object[] {new Object[] {\\\"Marcus\\\"}}}}, new Object[] {\\\"philus\\\"}},\\n\\t  {new Object[] {new Object[] {\\\"deep\\\"}, new Object[] {new Object[] {new Object[] {\\\"ocean\\\"}}}, new Object[] {new Object[] {\\\"Marge\\\"}}, new Object[] {\\\"rase\\\", 876}}},\\n\\t  {\\\"I\\\", new Object[] {19.79, \\\"love\\\", new Object[] {12.17}, \\\"edabit\\\"}},\\n\\t  {new Object[] {\\\"The\\\", new Object[] {\\\"first\\\", new Object[] {\\\"of\\\", new Object[] {\\\"May\\\", 0.0, 1, }}}, 2, 3, 4}},\\n\\t  {7, new Object[] {11, \\\"lived\\\", new Object[] {new Object[] {229}}}},\\n\\t  {\\\"and\\\", 6, new Object[] {3, \\\"scores\\\", new Object[] {\\\"six\\\", 100}}}\\n\\t};\\n\\tprivate Object[][] resVector = new Object[][] {\\n\\t\\t{\\\"Tesh\\\", 121317, \\\"Love\\\", \\\"of\\\", \\\"my\\\", \\\"life\\\", \\\"and\\\", \\\"my\\\", \\\"world\\\", \\\"entirely\\\"},\\n\\t\\t{\\\"direction\\\", 372, \\\"one\\\", \\\"Era\\\", \\\"Sruth\\\", 3337, \\\"First\\\"},\\n\\t\\t{4666, 5394, 466, \\\"Saskia\\\", \\\"DXTD\\\", \\\"Lexi\\\"},\\n\\t\\t{696, \\\"friend\\\", \\\"power\\\", \\\"Marcus\\\", \\\"philus\\\"},\\n\\t\\t{\\\"deep\\\", \\\"ocean\\\", \\\"Marge\\\", \\\"rase\\\", 876},\\n\\t\\t{\\\"I\\\", 19.79, \\\"love\\\", 12.17, \\\"edabit\\\"},\\n\\t\\t{\\\"The\\\", \\\"first\\\", \\\"of\\\", \\\"May\\\", 0.0, 1, 2, 3, 4},\\n\\t\\t{7, 11, \\\"lived\\\", 229},\\n\\t\\t{\\\"and\\\", 6, 3, \\\"scores\\\", \\\"six\\\", 100}\\n\\t};\\n\\t\\n\\t@Test\\n\\tpublic void test01() {\\n\\t\\tassertArrayEquals(MultidimensionArrays.flatten(objVector[0]), resVector[0]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test02() {\\n\\t\\tassertArrayEquals(MultidimensionArrays.flatten(objVector[1]), resVector[1]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test03() {\\n\\t\\tassertArrayEquals(MultidimensionArrays.flatten(objVector[2]), resVector[2]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test04() {\\n\\t\\tassertArrayEquals(MultidimensionArrays.flatten(objVector[3]), resVector[3]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test05() {\\n\\t\\tassertArrayEquals(MultidimensionArrays.flatten(objVector[4]), resVector[4]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test06() {\\n\\t\\tassertArrayEquals(MultidimensionArrays.flatten(objVector[5]), resVector[5]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test07() {\\n\\t\\tassertArrayEquals(MultidimensionArrays.flatten(objVector[6]), resVector[6]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test08() {\\n\\t\\tassertArrayEquals(MultidimensionArrays.flatten(objVector[7]), resVector[7]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test09() {\\n\\t\\tassertArrayEquals(MultidimensionArrays.flatten(objVector[8]), resVector[8]);\\n\\t}\\n}\\n//end of tests\",\"language\":\"java\",\"quality\":0,\"summary\":\"The nesting of arrays can be viewed indirectly as curves and barriers of the real data embedded in arrays, thus, defeats the very purpose of directly accessing them thru indexes and slices. Write a recursive function to flatten those curves (i.e. level, iron, compress, raze, topple) and expose those data as a single array other than an array of arrays.\\n\\nExampl\",\"tags\":[\"recursion\",\"arrays\",\"objects\"],\"timestamp\":{\"$date\":1602791614188},\"title\":\"Recursion: Flatten the Curves\",\"stats\":{\"completed\":{\"total\":7,\"ratings\":[4,4,4,4,4,3,5,3,5,1],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"Es4eX2stRpyoXeC7f\",\"ecyYaPZLMBMGGrfrJ\",\"gXTAie79kiw28tx5u\",\"SfhMTK5ykctdKbCSp\"]},\"flags\":0},\"editorId\":\"a777e8chPvJkY3tKa\",\"family\":[{\"_id\":\"5s8AXfbk4X2Dmimrk\",\"language\":\"java\"},{\"_id\":\"PQvuPYTZ5gGL4WYJo\",\"language\":\"javascript\"},{\"_id\":\"2nciiXZN4HCuNEmAi\",\"language\":\"python3\"}]}}"]