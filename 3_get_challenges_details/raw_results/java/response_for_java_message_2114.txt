a["{\"msg\":\"result\",\"id\":\"614\",\"result\":{\"_id\":\"aMazRiPPk9pAniYMF\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"public class Challenge {\\n  public static boolean commentsCorrect(String str) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":2.24,\"familyId\":\"jbDT3qywfJiYwkHKS\",\"instructions\":\"In JavaScript, there are two types of comments:\\n\\n1. Single-line comments start with `//`\\n2. Multi-line or inline comments start with `/*` and end with `*/`\\n\\nThe input will be a sequence of `//`, `/*` and `*/`. **Every `/*` must have a `*/` that immediately follows it**. To add, there can be **no single-line comments in between multi-line comments** in between the `/*` and `*/`.\\n\\nCreate a function that returns `true` if comments are properly formatted, and `false` otherwise.\\n\\n### Examples\\n```\\ncommentsCorrect(\\\"//////\\\") ➞ true\\n// 3 single-line comments: [\\\"//\\\", \\\"//\\\", \\\"//\\\"]\\n\\ncommentsCorrect(\\\"/**//**////**/\\\") ➞ true\\n// 3 multi-line comments + 1 single-line comment:\\n// [\\\"/*\\\", \\\"*/\\\", \\\"/*\\\", \\\"*/\\\", \\\"//\\\", \\\"/*\\\", \\\"*/\\\"]\\n\\ncommentsCorrect(\\\"///*/**/\\\") ➞ false\\n// The first /* is missing a */\\n\\ncommentsCorrect(\\\"/////\\\") ➞ false\\n// The 5th / is single, not a double //\\n```\\n\\n### Notes\\nN/A\",\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n  @Test\\n  public void test1() {\\n    assertEquals(true, Challenge.commentsCorrect(\\\"//////\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test2() {\\n    assertEquals(true, Challenge.commentsCorrect(\\\"/**//**////**/\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test3() {\\n    assertEquals(true, Challenge.commentsCorrect(\\\"/**//**//**//**/\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test4() {\\n    assertEquals(true, Challenge.commentsCorrect(\\\"///**///\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test5() {\\n    assertEquals(true, Challenge.commentsCorrect(\\\"/**//////**//**////**/////\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test6() {\\n    assertEquals(true, Challenge.commentsCorrect(\\\"//\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test7() {\\n    assertEquals(true, Challenge.commentsCorrect(\\\"/**/\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test8() {\\n    assertEquals(true, Challenge.commentsCorrect(\\\"///*/**/\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test9() {\\n    assertEquals(false, Challenge.commentsCorrect(\\\"//*/**/\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test10() {\\n    assertEquals(false, Challenge.commentsCorrect(\\\"/////\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test11() {\\n    assertEquals(false, Challenge.commentsCorrect(\\\"///\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test12() {\\n    assertEquals(false, Challenge.commentsCorrect(\\\"/**///**/\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test13() {\\n    assertEquals(false, Challenge.commentsCorrect(\\\"/**/////**/\\\"));\\n  }\\n}\",\"language\":\"java\",\"summary\":\"In JavaScript, there are two types of comments:\\n\\nSingle-line comments start with //\\nMulti-line or inline comments start with / and end with /\\n\\nThe input will be a sequence of //, / and /. Every / must have a / that immediately follows it. To add, there can be no single-line comments in between multi-line comments in between the / and /.\\n\\nCreate a function that\",\"tags\":[\"strings\",\"regex\",\"validation\"],\"timestamp\":{\"$date\":1568830135355},\"title\":\"Valid JavaScript Comments\",\"stats\":{\"completed\":{\"total\":25,\"ratings\":[2,2,2,2,2,3,3,2,2,3,0,3,3,3,3,1,2,2,3,2,3,3,3,0,2],\"rators\":[\"3pdgguqZgNDSAJSGm\",\"Q3D57scXeBrZEkN55\",\"CLmJduqJHX83dM4Pd\",\"EQA7goKX8ssgyNf5T\",\"Es4eX2stRpyoXeC7f\",\"8J2Dqqz9PaFufQzwY\",\"TrquEHytntLKHA4m2\",\"4RHx3H8EwP2oboW8e\",\"jyoLggHk8xQKZuoQC\",\"RvdjvXACaafw8f5ED\",\"rwETZ6XCNoHCEyB66\",\"k63LjKkX5p7SYng7C\",\"gXTAie79kiw28tx5u\",\"azAzSkvJd7eyXY9x9\",\"mDWNyaaQ9hvPCRzSd\",\"qaPjAANdnxFnWfj5d\",\"2NJZbusRvu3eJ4tHu\",\"KMR6vNzvSKMA2cXnK\",\"sxci7DYKNa6q22Sjq\",\"a49eNnfRwSMxsDJXf\"],\"quality\":[]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":1},\"isHidden\":false,\"quality\":0,\"family\":[{\"_id\":\"jF9Hr2YCEZAbXrCvH\",\"language\":\"cpp\"},{\"_id\":\"99aQihB9syYuFZsvw\",\"language\":\"csharp\"},{\"_id\":\"aMazRiPPk9pAniYMF\",\"language\":\"java\"},{\"_id\":\"rQj7JcXSnG5sy33rr\",\"language\":\"javascript\"},{\"_id\":\"jJfQNwPRtzEuab4h5\",\"language\":\"php\"},{\"_id\":\"ia95ckhN5ztgfJHe4\",\"language\":\"python3\"},{\"_id\":\"agsKgCvLbg9ZMX8RP\",\"language\":\"ruby\"},{\"_id\":\"8vENFxcDBFHFHJmnf\",\"language\":\"swift\"}]}}"]