a["{\"msg\":\"result\",\"id\":\"750\",\"result\":{\"_id\":\"SrdMmMwXn5TAKTx9w\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"public class Challenge {\\n  public static boolean validateTheRelationships(String str) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":2.909090909090909,\"familyId\":\"X7BtG7syoZrtFTsoP\",\"instructions\":\"You will be given a string consisting of a list of integers and their relationships to their neighboring integers. For instance:\\n\\n```\\n\\\"-15<-10<=0=0<5\\\"\\n```\\n\\nTest to see that all the relationships between the integers in the string are true. If they are, return `true`. If they are not, return `false`.\\n\\n### Examples\\n```\\nvalidateTheRelationships(\\\"5>-1<0=0<-5>5=5\\\") ➞ false\\n// This is false because 0 is not less than -5.\\n\\nvalidateTheRelationships(\\\"-15<-10<=0=0<5\\\") ➞ true\\n\\nvalidateTheRelationships(\\\"0=807<1000<=1000>9990<-3605<=20\\\") ➞ false\\n// This is false because 0 is not equal to 807.\\n```\\n\\n### Notes\\n- This is a modifcation of Helen Yu's \\\"Correct Signs\\\" challenge.\\n- As the examples above show, there could be negative numbers in the string.\\n- The numbers will only be separated by: `=, <, >, >=, <=`\\n- Tests will not contain any spaces.\",\"isHidden\":false,\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n  @Test\\n  public void test1() {\\n    assertEquals(false, Challenge.validateTheRelationships(\\\"5>-1<0=0<-5>5=5\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test2() {\\n    assertEquals(true, Challenge.validateTheRelationships(\\\"-15<-10<=0=0<5\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test3() {\\n    assertEquals(false, Challenge.validateTheRelationships(\\\"0=807<1000<=1000>9990<-3605<=20\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test4() {\\n    assertEquals(true, Challenge.validateTheRelationships(\\\"3<=3<11>-109\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test5() {\\n    assertEquals(false, Challenge.validateTheRelationships(\\\"44>-33>=1>-13\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test6() {\\n    assertEquals(false, Challenge.validateTheRelationships(\\\"10>2=22>9>3\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test7() {\\n    assertEquals(true, Challenge.validateTheRelationships(\\\"44>0<13>=-2<-1=-1\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test8() {\\n    assertEquals(true, Challenge.validateTheRelationships(\\\"3>=-1\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test9() {\\n    assertEquals(false, Challenge.validateTheRelationships(\\\"9<=9<-1\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test10() {\\n    assertEquals(true, Challenge.validateTheRelationships(\\\"0<9<=9>-1\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test11() {\\n    assertEquals(false, Challenge.validateTheRelationships(\\\"44>=0<13>-2<-1=1\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test12() {\\n    assertEquals(true, Challenge.validateTheRelationships(\\\"-39<=5=5<=9>-1\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test13() {\\n    assertEquals(true, Challenge.validateTheRelationships(\\\"-39<=5=5<=9>-1\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test14() {\\n    assertEquals(false, Challenge.validateTheRelationships(\\\"3<19>-19>5>=-19\\\"));\\n  }\\n}\",\"language\":\"java\",\"summary\":\"You will be given a string consisting of a list of integers and their relationships to their neighboring integers. For instance:\\n\\n\\\"-15-15=5\\\") ➞ false\\n// This is false because 0 is not less than -5.\\n\\nvalidateTheRelationships(\\\"-159990, >=, <=`\\nTests will not contain any spaces.\",\"tags\":[\"strings\",\"conditions\",\"validation\"],\"timestamp\":{\"$date\":1573752716253},\"title\":\"Validate the Relationships Between Integers in a String\",\"stats\":{\"completed\":{\"total\":37,\"ratings\":[2,2,2,2,2,3,3,3,3,4,4,4,4,4,1,4,4,5,0,3,4,4,4,3,5,0,2,1,1,2,3,4,4],\"rators\":[\"sxci7DYKNa6q22Sjq\",\"cG4PEDMMx8jXhWP8T\",\"gofo35rKkbyPH9jFq\",\"C46EBHSd4KE57qyei\",\"k6gFxcu8xWXTFc649\",\"Prw5Jq38wrSoj5QSF\",\"YF79LnTdprobbYY5v\",\"3pdgguqZgNDSAJSGm\",\"Es4eX2stRpyoXeC7f\",\"rehehi2Tr2mwaEoJE\",\"csRoCgJx5NBJzW8pX\",\"TrquEHytntLKHA4m2\",\"muDC7Z5mKSdfkn5ny\",\"iSY8Jq5PQ8wBiWpiw\",\"imoNrk36ozReP939p\",\"jyoLggHk8xQKZuoQC\",\"62Q2HcfLE6SGphZkT\",\"SfhMTK5ykctdKbCSp\",\"htXCitorobtqYymjN\",\"rA5nhfhFwfqvmJb6M\",\"T2vhHPhRR96hRizq8\",\"dCQC9E8RfYEDBeqoo\",\"AjzZS7MouArr5Zgdh\",\"k63LjKkX5p7SYng7C\",\"4RsakkyRXyYGwFxEa\",\"Ym8AjbKGSJooun3nt\",\"gXTAie79kiw28tx5u\",\"EwXYEZ8cEtEThuTXC\",\"fxF9CpQzkYdNSCLse\",\"KMR6vNzvSKMA2cXnK\",\"rWhXHhzF4W8bea6LP\"],\"quality\":[5,3,4]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"quality\":4,\"family\":[{\"_id\":\"M2Ej6MBbtsa4EsNZ8\",\"language\":\"cpp\"},{\"_id\":\"SrdMmMwXn5TAKTx9w\",\"language\":\"java\"},{\"_id\":\"Kg7rsPaPHMydFisP7\",\"language\":\"javascript\"},{\"_id\":\"ya4diBApyLQKG7TQK\",\"language\":\"python3\"},{\"_id\":\"moAfmygzHQFzRZMCE\",\"language\":\"ruby\"}]}}"]