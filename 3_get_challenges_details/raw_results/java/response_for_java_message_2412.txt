a["{\"msg\":\"result\",\"id\":\"763\",\"result\":{\"_id\":\"Mo8ErS2pcwNakKsAF\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class DisariumNumber {\\n\\tpublic static boolean isDisarium(int n) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":2.982142857142857,\"quality\":0,\"editorId\":\"a777e8chPvJkY3tKa\",\"familyId\":\"S4TyjyDfb7jkfiZib\",\"instructions\":\"A number is said to be Disarium if the **sum** of its *digits raised to their respective positions* is the number itself. Create a function that determines whether a number is a Disarium or not.\\n\\n### Examples\\n```\\nisDisarium(75) ➞ false\\n// 7^1 + 5^2 = 7 + 25 = 32\\n\\nisDisarium(135) ➞ true\\n// 1^1 + 3^2 + 5^3 = 1 + 9 + 125 = 135\\n\\nisDisarium(518) ➞ false\\n\\nisDisarium(518) ➞ true\\n\\nisDisarium(544) ➞ false\\n\\nisDisarium(8) ➞ true\\n\\nisDisarium(466) ➞ false\\n```\\n\\n### Notes\\n- Position of the digit is not likely its index.\\n- You are expected to solve this challenge via **recursion**.\\n- You can check on the **Resources** tab for more details about recursion in Java.\\n- An **iterative** version of this challenge can be found via this [link](https://edabit.com/challenge/GjCgCugvh4eorPmgM).\\n- A **collection** of challenges in recursion can be found via this [link](https://edabit.com/collection/Yx78jEBrKppHBNsoQ).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"/** \\n===================================== \\nTestGen 3.1 for JUnit 4.13.0 \\t\\t\\nTest Case: DisariumNumber::isDisarium \\nTimestamp: 10/03/2020 02:42:30 PM \\n------------------------------------- \\n® DARKKO 2021 © \\n===================================== \\n\\n**/ \\n\\nimport static org.junit.Assert.assertEquals; \\nimport org.junit.Test; \\n\\npublic class DisariumNumberTest { \\n\\t\\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertEquals(true, DisariumNumber.isDisarium(6));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertEquals(false, DisariumNumber.isDisarium(75));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertEquals(true, DisariumNumber.isDisarium(135));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertEquals(false, DisariumNumber.isDisarium(466));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertEquals(false, DisariumNumber.isDisarium(372));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertEquals(true, DisariumNumber.isDisarium(175));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertEquals(true, DisariumNumber.isDisarium(1));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertEquals(false, DisariumNumber.isDisarium(696));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test09() { \\n\\t\\tassertEquals(false, DisariumNumber.isDisarium(876));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() { \\n\\t\\tassertEquals(true, DisariumNumber.isDisarium(89));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test11() { \\n\\t\\tassertEquals(true, DisariumNumber.isDisarium(518));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test12() { \\n\\t\\tassertEquals(true, DisariumNumber.isDisarium(598));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test13() { \\n\\t\\tassertEquals(false, DisariumNumber.isDisarium(544));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test14() { \\n\\t\\tassertEquals(false, DisariumNumber.isDisarium(466));\\n\\t}\\n\\n}\\n// end of tests\",\"language\":\"java\",\"stats\":{\"completed\":{\"ratings\":[4,4,4,4,4,4,4,1,1,5,5,5,2,3,5,2,1,5,3,5,5,4,2,0,2,5,2,0,2,3,4,5,4,5,4,0,2,3,1,1,5,4,2,3,3,0,1,4,5,1,5,1,0,3,2,3],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"Es4eX2stRpyoXeC7f\",\"rehehi2Tr2mwaEoJE\",\"azAzSkvJd7eyXY9x9\",\"QXR2qGcvrK5Xkxdea\",\"3pdgguqZgNDSAJSGm\",\"RQL2PAWda9Bh79GNi\",\"gXTAie79kiw28tx5u\",\"5R9nW7JC9PH4Pdsk5\",\"DuPN3Gmvb5DqYjD6H\",\"xa3CFkeyE66qrfTZ9\",\"82weQfHHmno4Mq4X7\",\"7YbGHKwApShJ7J4NK\",\"fv2pFy78rfLWyjz8T\",\"nHj7SC5cnmkTApbgY\",\"njX6SdTFWePDNXoui\",\"aa43A5NEipgbfvarF\",\"pGHzaBviaAStdFXfF\",\"LNCb5rksJLJ43L4Nw\",\"rhS8qXRjZcpDXkwnE\",\"2DnYgBLLBxGv4zDdd\",\"ZXMCkXGYtPAHfipcX\",\"CuXeZN3q4yS2S7xPi\",\"tidRSihygaBbgRLNd\",\"GvLLKHi7NwAjutdDk\",\"NTRvXrjLxcH7KZHok\",\"b9iSg6CvRnHuLtQA5\",\"zHECHZJhJpeCgDp7Q\",\"dGJhADFMNr9is6GRP\",\"kFMhaBXDFKwb35d5b\",\"82pWqpMMBd2timN25\",\"qg94wqTGMA6K5Caj3\",\"j7TE6EznbqwduwrK9\",\"spK6SqBnxAMeah3Sc\",\"kroGFuRa68WMhYjgg\",\"KeY28EdQJoPt49eir\",\"RmzNNtGcDkrevkW8q\",\"5JuFzSyvT4BN9rSnW\",\"hFv4BuqgsJtNyvyNF\",\"gRA6PFAmujemC3Tu7\",\"b3u2ibMqMcw77whuJ\",\"D8DgEp7NJRn9fyds3\",\"5afy5xQDFQhNQHKjD\",\"KMR6vNzvSKMA2cXnK\",\"7ZQSyiTqZuCEXFhwK\",\"bnKmc3HbxNT9GuEiD\",\"EzAHwXXHQhfypNSug\",\"4iMe865JrPvg2uaqA\",\"RBZeDeZhhEyJ7wdjH\",\"YbHJBDi6jsYLWMRe8\",\"sxci7DYKNa6q22Sjq\"],\"total\":58},\"flags\":0},\"summary\":\"A number is said to be Disarium if the sum of its digits raised to their respective positions is the number itself. Create a function that determines whether a number is a Disarium or not.\\n\\nExamples\\nisDisarium(75) ➞ false\\n// 7^1 + 5^2 = 7 + 25 = 32\\n\\nisDisarium(135) ➞ true\\n// 1^1 + 3^2 + 5^3 = 1 + 9 + 125 = 135\\n\\nisDisarium(518) ➞ false\\n\\nisDisarium(518) ➞ true\",\"tags\":[\"recursion\",\"numbers\",\"math\",\"validation\"],\"timestamp\":{\"$date\":1601573043498},\"title\":\"Recursion: Disarium Number\",\"family\":[{\"_id\":\"mP5BLYHWyeiFpECud\",\"language\":\"cpp\"},{\"_id\":\"Mo8ErS2pcwNakKsAF\",\"language\":\"java\"},{\"_id\":\"3bMksFY5emJLvLJBW\",\"language\":\"javascript\"},{\"_id\":\"aifM22oGtRKShsFWB\",\"language\":\"python3\"},{\"_id\":\"WzHr7GAuB7E2tSzH4\",\"language\":\"ruby\"}]}}"]