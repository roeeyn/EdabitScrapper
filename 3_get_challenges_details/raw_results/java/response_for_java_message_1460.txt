a["{\"msg\":\"result\",\"id\":\"289\",\"result\":{\"_id\":\"vENakDEYEDKFGPSEb\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"public class Challenge {\\n\\tpublic static String unstretch(String word) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":1.1647727272727273,\"familyId\":\"eYCSuTL4mD6vwTRHj\",\"instructions\":\"Write a function that takes a string, and returns a new string with any duplicate *consecutive* letters removed.\\n\\n### Examples\\n```\\nunstretch(\\\"ppoeemm\\\") ➞ \\\"poem\\\"\\n\\nunstretch(\\\"wiiiinnnnd\\\") ➞ \\\"wind\\\"\\n\\nunstretch(\\\"ttiiitllleeee\\\") ➞ \\\"title\\\"\\n\\nunstretch(\\\"cccccaaarrrbbonnnnn\\\") ➞ \\\"carbon\\\"\\n```\\n\\n### Notes\\nFinal strings *won't* include words with double letters (e.g. \\\"passing\\\", \\\"lottery\\\").\",\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n  @Test\\n  public void test1() {\\n    assertEquals(\\\"lost\\\", Challenge.unstretch(\\\"llossttttt\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test2() {\\n    assertEquals(\\\"cane\\\", Challenge.unstretch(\\\"cccccaaaaannnnne\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test3() {\\n    assertEquals(\\\"honest\\\", Challenge.unstretch(\\\"hhoooneestttt\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test4() {\\n    assertEquals(\\\"powder\\\", Challenge.unstretch(\\\"ppppooowwddddeeerrrr\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test5() {\\n    assertEquals(\\\"expect\\\", Challenge.unstretch(\\\"eexxpppppeeccctt\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test6() {\\n    assertEquals(\\\"report\\\", Challenge.unstretch(\\\"rrrrepooooorrttt\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test7() {\\n    assertEquals(\\\"patent\\\", Challenge.unstretch(\\\"pppaaaaattteeeennnntt\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test8() {\\n    assertEquals(\\\"memory\\\", Challenge.unstretch(\\\"mmmeeemoooryy\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test9() {\\n    assertEquals(\\\"visual\\\", Challenge.unstretch(\\\"vvvvviiiiisssuuaaalll\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test10() {\\n    assertEquals(\\\"ensure\\\", Challenge.unstretch(\\\"eeeennnnsuuurrre\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test11() {\\n    assertEquals(\\\"include\\\", Challenge.unstretch(\\\"iiinncclludddddeee\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test12() {\\n    assertEquals(\\\"testify\\\", Challenge.unstretch(\\\"ttteestiffffyyy\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test13() {\\n    assertEquals(\\\"gravity\\\", Challenge.unstretch(\\\"ggrrrrraaaaavvvvviiitttyyyy\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test14() {\\n    assertEquals(\\\"culture\\\", Challenge.unstretch(\\\"cccuuuultttttuuuuurreee\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test15() {\\n    assertEquals(\\\"qualify\\\", Challenge.unstretch(\\\"qquaalliiifffyy\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test16() {\\n    assertEquals(\\\"incongruous\\\", Challenge.unstretch(\\\"iiinnccoooonnnnnggggrrrrruuuuooouuuuusss\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test17() {\\n    assertEquals(\\\"entitlement\\\", Challenge.unstretch(\\\"eeeennnnttiiiitlllleeeeemmeennnttttt\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test18() {\\n    assertEquals(\\\"astonishing\\\", Challenge.unstretch(\\\"aaaaassstttttooniiiiissshhiiinnnnnggg\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test19() {\\n    assertEquals(\\\"coincidence\\\", Challenge.unstretch(\\\"cccccoiinnnncccciidddenncee\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test20() {\\n    assertEquals(\\\"preparation\\\", Challenge.unstretch(\\\"prrrrreeeppppaaaarrrrraaattiionn\\\"));\\n  }\\n}\",\"language\":\"java\",\"summary\":\"Write a function that takes a string, and returns a new string with any duplicate consecutive letters removed.\\n\\nExamples\\nunstretch(\\\"ppoeemm\\\") ➞ \\\"poem\\\"\\n\\nunstretch(\\\"wiiiinnnnd\\\") ➞ \\\"wind\\\"\\n\\nunstretch(\\\"ttiiitllleeee\\\") ➞ \\\"title\\\"\\n\\nunstretch(\\\"cccccaaarrrbbonnnnn\\\") ➞ \\\"carbon\\\"\\n\\nNotes\\nFinal strings won't include words with double letters (e.g. \\\"passing\\\", \\\"lottery\\\").\",\"tags\":[\"strings\",\"formatting\",\"loops\"],\"timestamp\":{\"$date\":1568177146051},\"title\":\"Stretched Words\",\"stats\":{\"completed\":{\"total\":205,\"ratings\":[1,1,1,1,1,0,1,0,0,0,0,1,2,0,0,0,0,0,1,0,0,2,0,0,2,3,1,2,0,2,2,1,2,2,2,2,3,0,5,2,1,2,2,1,0,2,1,0,2,1,2,2,1,1,1,1,2,1,1,1,2,1,0,1,0,1,0,3,0,1,0,1,2,1,1,0,0,1,3,0,0,1,1,1,1,1,3,2,1,1,0,1,1,0,1,1,0,3,1,1,1,1,1,0,1,1,1,1,2,2,1,1,0,2,1,1,3,0,0,1,2,2,1,3,2,0,1,5,0,1,1,1,2,1,1,1,1,2,2,1,2,1,1,1,4,1,2,1,2,3,2,1,1,0,1,1,2,1,1,1,0,1,3,1,2,1,0,1,1,1,2,1,1,1,1,1],\"rators\":[\"vRXuYYBNuHEQ29fbm\",\"FocLpCB2WEiK2gGni\",\"3pdgguqZgNDSAJSGm\",\"9c8n7ti5vCjTRgiGN\",\"sxci7DYKNa6q22Sjq\",\"PHkmuovANGzadceGW\",\"3k4s68JAn3BxMWm6y\",\"Yohr2MmAyaWGMbB35\",\"t2kdBPj9qQAXY2Ehd\",\"3gxJoNp59B4eoyyed\",\"ZBDiEMi7dbjRL55LB\",\"a49eNnfRwSMxsDJXf\",\"RPXWRJBL2b2CZk7hy\",\"EDt38GiWqZ4Ket5sJ\",\"7v5XEd4wjiJjwSHio\",\"45zNYikBk2Wsrn2eM\",\"kfDtq2Kf2EfGntYcF\",\"a8MrxisHp6dTXbap8\",\"ypguHjGNSFk5TXnjJ\",\"BLdvicN5iRKeHKufc\",\"xGqRFiDGRhERiRsC6\",\"uWHnndmgnZvPyfFi3\",\"NCB3RaRBonefnHBJD\",\"pr4Cm4A369tC9gSeT\",\"7p3Btn9oRNStAZ8G6\",\"3KjxQu9RZ8ZSywvLz\",\"XbBsZ7vSHdw88tibi\",\"NFNbtZxf9QepoTYad\",\"XxjcJwWmq5pnXzGWb\",\"TG48zCjALDL8SXSjz\",\"jXvF9KLBisysx3wG2\",\"AgFac67AGuAuuYDTd\",\"BSDtieYGg6H7evesT\",\"6hDCMSAfmNjnA9jvw\",\"Mg6qxm83nhPfRSZLg\",\"CLmJduqJHX83dM4Pd\",\"zh9GGSpmAnDvdARMv\",\"8JyqsSbN2FJXPr3cw\",\"J9zJq7PMGb6mqzcHW\",\"s2G7xhbjaNdkGbhRX\",\"Xf5mRzAb6BoGp7daC\",\"bk6Sjnh52qNCYNggH\",\"s8o9ptNnpNGktBWdX\",\"u4yanfWeeZsN3xWgc\",\"HBgPTjhMkJ2WCcBP7\",\"C9yBWYcZsjmJYww3K\",\"AyrEvM2GLX2jqM772\",\"qx9XHErKygcLiFGhX\",\"rWhXHhzF4W8bea6LP\",\"5RcAXjQAbqQtWppy6\",\"ko7oJ85JMftgcbkrr\",\"M5n9zd5LtuuwJr668\",\"5Kf9z3G9QBs9fkvLs\",\"MWLAcPoEWDSLrTi9p\",\"gBGjCfJvPHswDM5JQ\",\"EZNT8B7yQnnZmuwCf\",\"YLwJkF2wuL3n9o6a2\",\"WuAkXKpcrQy867yCw\",\"Es4eX2stRpyoXeC7f\",\"jRqY4i8gPemsZMBGf\",\"j2hKJg9sh9m3HWFgo\",\"fbYN9Jp46RqBqCd2K\",\"uPfkNA3maDhAoKtnb\",\"wYYMNPe8nSiJFbvJw\",\"C4d4pXJJfJEr8zPwq\",\"rTj67TTydxqkpwFtN\",\"jDTGwryGygbZiqCEg\",\"rW8P2PA4vnT73BWmn\",\"mdEQJ2fmGmkbhbvNw\",\"82weQfHHmno4Mq4X7\",\"8J2Dqqz9PaFufQzwY\",\"bw6kHP3k8dP2qBa5v\",\"Kso7rzAKB4TTCPKgM\",\"PXBjtEAAwibHxNZXq\",\"fZjkX29nhRTWWb75k\",\"YFHkjbM6obMSj24zi\",\"hB5mgzMwQSnhBzi7P\",\"GEzaJZ2cPjENT4ERQ\",\"etoSR23iELGGgs9rA\",\"jyoLggHk8xQKZuoQC\",\"5seiNqw6ZXoF2GRRd\",\"LZSxphM8vH4A6Deqn\",\"8zZ6xmzpiFair25qr\",\"Yp7uvStL97cC9fKkY\",\"B4pxRqzo43M7S8FbP\",\"WZujpe8yQAyZmpWHg\",\"TrquEHytntLKHA4m2\",\"zeE9TvhkPfebAq9n8\",\"DzvdGwHEjqsX7wyKr\",\"htXCitorobtqYymjN\",\"3EfDGZ9Sgz5zxzD7a\",\"uRgbrK32AffPh4eQd\",\"gJbvbqosimaP4ZAYb\",\"zwruFCmuHkwJTpYqg\",\"Yom3RzkMYpweE8cbS\",\"DkSMZ3jZLkwviKb9g\",\"meS77LKqRswhF5LAy\",\"AeJSxRqw2dJZuGvdk\",\"EcKPDmD4GmeFJGDTL\",\"rvojHhKH3DaxotefQ\",\"wMvNbysArkmmqZBy4\",\"q2X5hMejrpAGGd3hW\",\"cR3ibTMxLyEdDFCHY\",\"q2tzvkrLASvSjkek9\",\"3v5phnjawWndr9gwr\",\"osXNzc2aCxspRwheS\",\"jLv4ckjWQwHRAiYKT\",\"Zhy5X7BZnqk8hacEw\",\"ndhNYA8YmwHWvh3xs\",\"ZrXkPD45QRS4oXJmA\",\"vZEydfdSPu2adZLMF\",\"aFmJuByQG29363Qh2\",\"g4NCSxxHqHCGMpWwT\",\"muXMnzQwGLzN6j2Jr\",\"aukemxRJPgJjJWgAx\",\"ZMd8it647JSYTvx8Z\",\"nbH6pjzJS9Z35JD9r\",\"YcjwCvYut6834Jzd8\",\"RhPg33AdzvSZmibXa\",\"DAQX9mhHdMTqyYbvh\",\"f6uGKbmMdBYCjrMBh\",\"KxLMWekCxzy2Eem7u\",\"ZiN6yB9rACMaYgseC\",\"Fd9765rksgPK4E2Zy\",\"ZXWDtCrM9ev3439oi\",\"yXGiiSAR5nBHnH3yr\",\"gpd8yji9GXJruAtje\",\"n5wubRfh6zh8QRymN\",\"kQRtmSZfHdSzFserc\",\"pi76g3eRpnKrhee2a\",\"bjKYBdDcGMRTfooBs\",\"azAzSkvJd7eyXY9x9\",\"a777e8chPvJkY3tKa\",\"zTEKMLMevG8xfxEj6\",\"ce5bSQrMmuRF9f8yi\",\"TCTZucJN3tJh5t7MB\",\"gXTAie79kiw28tx5u\",\"J7epB3qSQJ2E8vWkY\",\"9amCEoE43AdSneJZ7\",\"JszPst3958te56jFk\",\"NdLzb3BZ5J8ftnCkS\",\"xv5obFhsxY93mqR5S\",\"uPQisxgE6sgg65Ymo\",\"P5BhjZxyeHQYTNyB9\",\"oMfq73A434YWhSuWQ\",\"mG8HqKiAQFTdRZthG\",\"jXTnL3JatkKjoifyb\",\"unNqQjSHzkb4pCzEu\",\"8Xx8nWXRydHDBGfQf\",\"tyLS9T6YMfg9fMtYJ\",\"Ym8AjbKGSJooun3nt\",\"uNK8tLSseShR8wcA4\",\"cJmmvnmJSXvBXtydi\",\"69K8S2NbzkqE9pAe5\",\"5jDgvkGd4JwatrYXg\",\"7xZdHDypd44S3YSjx\",\"Wi4H6ayKsNDWWQCG5\",\"PJu3WcTpfRrvHfQiS\",\"3SgSNoAB3sxaYeT3w\",\"4x3RFNTna6bbr7D3T\",\"uFfEio8nzDvL8emhp\",\"u7HCpR5pAr9ibCRhX\",\"QRv96jmNaYsWkxQEG\",\"hhxjQREtmHSheH9Pj\",\"zZfMwLuoERGmybgib\",\"E2hpke7mHxAWsw5t9\",\"buX4mCQhtXCfBjeno\",\"yb8T3nuL4evaeJW6k\",\"btabi3PdyisuY5tn9\",\"4ySzqKC5s3ZRpG9di\",\"rhS8qXRjZcpDXkwnE\",\"pYonfGP4u9HNL9Z32\",\"xxyxCs8Hr7MQAsFvv\",\"uw47663LqPME8btaA\",\"srJ34BaybkQh3qRkM\",\"xEX3TDY6C2h82dJTn\",\"zTtKiCbLWzaf2Yjo4\",\"XNgW94PSq5kkXhojm\",\"Qv2jEtTnFCXX7cdd3\",\"jCjCvyhqhpebkJn34\",\"AaAzAySpyo99siXzm\",\"afvP29FhRou2bTaav\",\"KMR6vNzvSKMA2cXnK\",\"c7uBxu2rgY77H5d79\",\"GDNsAq2snvJuwFa88\",\"5QN8R22z43SrwoHDz\",\"unqzSsxpxj9sZ7rbD\",\"FxPDKKibxnZjGJLs6\",\"nFbmNzMQ38TncmfQX\",\"wFRLGjA56kj7xyhmv\",\"H3XLNCWB5yXt5YYXn\"],\"quality\":[5,5,5,5,1,5,5,5,5,5,5,5,4,5,4,5,5,3,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"isHidden\":false,\"quality\":4.6,\"family\":[{\"_id\":\"SQpFZsKxdkjrCPGom\",\"language\":\"cpp\"},{\"_id\":\"vENakDEYEDKFGPSEb\",\"language\":\"java\"},{\"_id\":\"X4WDm4ZroqPZpiqgA\",\"language\":\"javascript\"},{\"_id\":\"ao3Cjvyt43mQsewkr\",\"language\":\"php\"},{\"_id\":\"fmQ9QvPBWL7N9hSkq\",\"language\":\"python3\"},{\"_id\":\"rf9PPCte9uztcJuW6\",\"language\":\"ruby\"}]}}"]