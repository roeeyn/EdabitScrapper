a["{\"msg\":\"result\",\"id\":\"812\",\"result\":{\"_id\":\"nWRGJeLJ3gvzMSGvS\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class ProperFractions {\\n\\tpublic static int simPropFrac(int maxDen) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":3.6363636363636362,\"familyId\":\"MNxZKs2ywLhRDdbBv\",\"instructions\":\"Create a function that takes a number `maxDen` and returns the total number of fully simplified proper fractions that exist with denominator less than or equal to `maxDen`.\\n\\nYou only need to return the number of fractions; **NOT** the _fractions_ themselves. In the examples below, the _fractions_ are enumerated for your reference.\\n\\n### Examples\\n```\\nsimPropFrac(10) ➞ 31\\n// 1/2, 1/3, 2/3, 1/4, 3/4, 1/5, 2/5, 3/5, 4/5, 1/6, 5/6, 1/7, 2/7, 3/7, 4/7, 5/7, 6/7, 1/8, 3/8, 5/8, 7/8, 1/9, 2/9, 4/9, 5/9, 7/9, 8/9, 1/10, 3/10, 7/10, 9/10\\n\\nsimPropFrac(7) ➞ 17\\n// 1/2, 1/3, 2/3, 1/4, 3/4, 1/5, 2/5, 3/5, 4/5, 1/6, 5/6, 1/7, 2/7, 3/7, 4/7, 5/7, 6/7\\n```\\n\\n### Notes\\n- A **fully simplified proper fraction** is a fraction where both the _numerator_ and the _denominator_ share no common factor but `1` and that the fraction is _less than_ `1`.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"/** \\n======================================= \\nTestGen 3.1 for JUnit 4.13.0 \\t\\t\\nTest Case: ProperFractions::simPropFrac \\nTimestamp: 01/20/2021 02:52:43 AM \\n--------------------------------------- \\n® DARKKO 2021 © \\n======================================= \\n\\n**/ \\n\\nimport static org.junit.Assert.assertEquals; \\nimport org.junit.Test; \\n\\npublic class ProperFractionsTest { \\n\\t\\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertEquals(1, ProperFractions.simPropFrac(2));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertEquals(5, ProperFractions.simPropFrac(4));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertEquals(9, ProperFractions.simPropFrac(5));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertEquals(27, ProperFractions.simPropFrac(9));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertEquals(31, ProperFractions.simPropFrac(10));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertEquals(45, ProperFractions.simPropFrac(12));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertEquals(95, ProperFractions.simPropFrac(17));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertEquals(127, ProperFractions.simPropFrac(20));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test09() { \\n\\t\\tassertEquals(277, ProperFractions.simPropFrac(30));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() { \\n\\t\\tassertEquals(3043, ProperFractions.simPropFrac(100));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test11() { \\n\\t\\tassertEquals(963, ProperFractions.simPropFrac(56));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test12() { \\n\\t\\tassertEquals(899, ProperFractions.simPropFrac(54));\\n\\t}\\n\\n}\\n// end of tests\",\"language\":\"java\",\"quality\":0,\"summary\":\"Create a function that takes a number maxDen and returns the total number of fully simplified proper fractions that exist with denominator less than or equal to maxDen.\\n\\nYou only need to return the number of fractions; NOT the fractions themselves. In the examples below, the fractions are enumerated for your reference.\\n\\nExamples\\nsimPropFrac(10) ➞ 31\\n// 1/2, 1/\",\"tags\":[\"math\",\"algorithms\",\"loops\",\"numbers\"],\"timestamp\":{\"$date\":1611082450642},\"title\":\"Simplified Proper Fractions\",\"stats\":{\"completed\":{\"total\":10,\"ratings\":[4,4,4,4,4,4,2,5,4,3,2],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"gXTAie79kiw28tx5u\",\"h6exQtjB22pabWmvE\",\"42daw5PafNk6AoTgX\",\"RsujLHaML6L3KinzK\",\"uw47663LqPME8btaA\"]},\"flags\":0},\"editorId\":\"a777e8chPvJkY3tKa\",\"family\":[{\"_id\":\"hWQYFyMke28QrzCGJ\",\"language\":\"cpp\"},{\"_id\":\"jap6GWKheiNvASpCL\",\"language\":\"csharp\"},{\"_id\":\"nWRGJeLJ3gvzMSGvS\",\"language\":\"java\"},{\"_id\":\"ZbTx5ArPfmS6zghvx\",\"language\":\"javascript\"},{\"_id\":\"7gHfNSoKXLA8CNBNK\",\"language\":\"python3\"},{\"_id\":\"eCLJ56drRJDBerJXL\",\"language\":\"ruby\"}]}}"]