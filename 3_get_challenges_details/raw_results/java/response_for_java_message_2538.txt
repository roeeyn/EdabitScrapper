a["{\"msg\":\"result\",\"id\":\"827\",\"result\":{\"_id\":\"h3rDzi2j5t2h7jtJi\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class ReversibleListRanges {\\n  public static int[] reversibleInclusiveList(int startOfRange, int endOfRange) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":3.8461538461538463,\"editorId\":\"a777e8chPvJkY3tKa\",\"familyId\":\"x42gWRa66MB7y8SRb\",\"instructions\":\"Write a function that, given the `startOfRange` and `endOfRange` values, returns an array containing all the numbers **inclusive** to that range. See examples below.\\n\\n### Examples\\n```\\nreversibleInclusiveList(1, 5) ➞ [1, 2, 3, 4, 5]\\n\\nreversibleInclusiveList(2, 8) ➞ [2, 3, 4, 5, 6, 7, 8]\\n\\nreversibleInclusiveList(10, 20) ➞ [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\\n\\nreversibleInclusiveList(24, 17) ➞ [24, 23, 22, 21, 20, 19, 18, 17]\\n```\\n\\n### IMPORTANT\\n- The use of `IntStream.range` and `IntStream.rangeClosed` is **totally unacceptable**, hence, recursion is the very purpose of this challenge.\\n\\n### Notes\\n- The sort order of the resulting array is dependent of the input values.\\n- All inputs provided in the test scenarios are valid.\\n- If `startOfRange` is greater than `endOfRange`, return an **descendingly** sorted array, otherwise, **ascendingly** sorted.\\n- You are expected to solve this challenge via a **recursive** approach.\\n- A iterative version of this challenge can be found via this [link](https://edabit.com/challenge/akLRnxrtrAsnyYuZb)\\n- A collection of challenges in recursion can be found via this [link](https://edabit.com/collection/Yx78jEBrKppHBNsoQ).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"/** \\n======================================================== \\nTestGen 2.3 for JUnit 4.13.0 \\t\\t\\nTest Case: ReversibleListRanges::reversibleInclusiveList \\nTimestamp: 11/8/2020 6:21:09 AM\\n-------------------------------------------------------- \\n® DARKKO 2020 © \\n========================================================\\n**/ \\n\\nimport static org.junit.Assert.assertArrayEquals; \\nimport org.junit.Test; \\n\\npublic class ReversibleListRangesTest {\\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertArrayEquals(new int[] {5, 4, 3, 2, 1}, ReversibleListRanges.reversibleInclusiveList(5, 1));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertArrayEquals(new int[] {6, 5, 4, 3, 2}, ReversibleListRanges.reversibleInclusiveList(6, 2));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertArrayEquals(new int[] {10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, ReversibleListRanges.reversibleInclusiveList(10, 20));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertArrayEquals(new int[] {24, 23, 22, 21, 20, 19, 18, 17}, ReversibleListRanges.reversibleInclusiveList(24, 17));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertArrayEquals(new int[] {40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50}, ReversibleListRanges.reversibleInclusiveList(40, 50));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertArrayEquals(new int[] {51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41}, ReversibleListRanges.reversibleInclusiveList(51, 41));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertArrayEquals(new int[] {11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66}, ReversibleListRanges.reversibleInclusiveList(11, 66));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertArrayEquals(new int[] {9, 8, 7, 6, 5, 4, 3}, ReversibleListRanges.reversibleInclusiveList(9, 3));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test09() { \\n\\t\\tassertArrayEquals(new int[] {6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, ReversibleListRanges.reversibleInclusiveList(6, 16));\\n\\t}\\n}\",\"language\":\"java\",\"quality\":0,\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,5,5,3,3,5,2,0,2],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"Es4eX2stRpyoXeC7f\",\"azAzSkvJd7eyXY9x9\",\"gXTAie79kiw28tx5u\",\"nHj7SC5cnmkTApbgY\",\"pGHzaBviaAStdFXfF\",\"LNCb5rksJLJ43L4Nw\",\"qg94wqTGMA6K5Caj3\"],\"total\":12},\"flags\":0},\"summary\":\"Write a function that, given the startOfRange and endOfRange values, returns an array containing all the numbers inclusive to that range. See examples below.\\n\\nExamples\\nreversibleInclusiveList(1, 5) ➞ [1, 2, 3, 4, 5]\\n\\nreversibleInclusiveList(2, 8) ➞ [2, 3, 4, 5, 6, 7, 8]\\n\\nreversibleInclusiveList(10, 20) ➞ [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\\n\\nreversible\",\"tags\":[\"recursion\",\"numbers\",\"logic\",\"math\"],\"timestamp\":{\"$date\":1604907365956},\"title\":\"Recursion: Reversible Inclusive List Ranges\",\"family\":[{\"_id\":\"h3rDzi2j5t2h7jtJi\",\"language\":\"java\"},{\"_id\":\"LKTiopxKdDRARMvri\",\"language\":\"javascript\"},{\"_id\":\"3ucrYGBkvJwjbFL4G\",\"language\":\"python3\"}]}}"]