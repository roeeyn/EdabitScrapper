a["{\"msg\":\"result\",\"id\":\"783\",\"result\":{\"_id\":\"ABgaWqqn2XDjBqwKy\",\"author\":\"Edward Clark\",\"authorId\":\"3pdgguqZgNDSAJSGm\",\"code\":\"public class Challenge {\\n  public static int superDigit(String n, int k) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":3.3333333333333335,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"6ZAHHNocQtgQKhpRJ\",\"instructions\":\"We define super digit of an integer `x` using the following rules:\\n\\n- If `x` has only `1` digit, then its super digit is `x`.\\n- Otherwise, the super digit of `x` is equal to the super digit of the sum of the digits of `x`.\\n\\nFor example, the super digit of `x` will be calculated as:\\n\\n```\\n  superDigit(9875)    9+8+7+5 = 29 \\n  superDigit(29)      2 + 9 = 11\\n  superDigit(11)      1 + 1 = 2\\n  superDigit(2) = 2\\n```\\n\\nYou are given two numbers `n` and `k`. The number `p` is created by concatenating the string `n`, `k` times. Continuing the above example where `n = 9875`, assume your value `k=4`. Your initial `p = 9875 9875 9875 9875` (spaces added for clarity).\\n\\n```\\nsuperDigit(p) = superDigit(9875987598759875)\\n  5+7+8+9+5+7+8+9+5+7+8+9+5+7+8+9 = 116\\n\\nsuperDigit(p) = superDigit(116)\\n  1+1+6 = 8\\n\\nsuperDigit(p) = superDigit(8)\\n```\\n\\nAll of the digits of `p` sum to `116`. The digits of `116` sum to `8`. `8` is only one digit, so it's the super digit.\\n\\nComplete the `superDigit()` method. It must return the calculated super digit as an integer.\\n\\nsuperDigit has the following parameter(s):\\n- `n`: a string representation of an integer.\\n- `k`: an integer, the times to concatenate `n` to make `p`.\\n\\n### Examples\\n```\\nsuperDigit(\\\"148\\\", 3) ➞ 3\\n\\nsuperDigit(\\\"123\\\", 3) ➞ 9\\n\\nsuperDigit(\\\"99999999999999999999999999\\\", 104500) ➞ 9\\n```\\n\\n### Notes\\nEach problem must be solved in less than 1 second.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"/**\\n *\\n * @author edwardclark\\n */\\n\\nimport org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\npublic class ChallengeTest {\\n  @Test(timeout = 1000)\\n  public void test1() {\\n    assertEquals(3, Challenge.superDigit(\\\"7404954009694227446246375747227852213692570890717884174001587537145838723390362624487926131161112710589127423098959327020544003395792482625191721603328307774998124389641069884634086849138515079220750462317357487762780480576640689175346956135668451835480490089962406773267569650663927778867764315211280625033388271518264961090111547480467065229843613873499846390257375933040086863430523668050046930387013897062106309406874425001127890574986610018093859693455518413268914361859000614904461902442822577552997680098389183082654625098817411306985010658756762152160904278169491634807464356130877526392725432086439934006728914411061861235300979536190100734360684054557448454640750198466877185875290011114667186730452681943043971812380628117527172389889545776779555664826488520325234792648448625225364535053605515386730925070072896004645416713682004600636574389040662827182696337187610904694029221880801372864040345567230941110986028568372710970460116491983700312243090679537497139499778923997433720159174153\\\", 100000));\\n  }\\n\\t\\n\\t@Test(timeout = 1000)\\n  public void test2() {\\n    assertEquals(3, Challenge.superDigit(\\\"148\\\", 3));\\n  }\\n\\t\\n\\t@Test(timeout = 1000)\\n  public void test3() {\\n    assertEquals(9, Challenge.superDigit(\\\"123\\\", 3));\\n  }\\n\\t\\n\\t@Test(timeout = 1000)\\n  public void test4() {\\n    assertEquals(8, Challenge.superDigit(\\\"9875\\\", 4));\\n  }\\n\\t\\n\\t@Test(timeout = 1000)\\n  public void test5() {\\n    assertEquals(9, Challenge.superDigit(\\\"99999999999999999999999999\\\", 104500));\\n  }\\n}\",\"language\":\"java\",\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,3,5,1,2,3,0,1,5,4,5,4,4,2,4,5,3,5,0,3,1,5,2,5,1,3,3,3,3],\"rators\":[\"TrquEHytntLKHA4m2\",\"3pdgguqZgNDSAJSGm\",\"rehehi2Tr2mwaEoJE\",\"htXCitorobtqYymjN\",\"oMLSgpSFQnY4ui8cB\",\"pBMXMQem6BpSeooYT\",\"zbGJGwm2a7un8F5T5\",\"jyoLggHk8xQKZuoQC\",\"QS45qu2DFXcCqpAnB\",\"Es4eX2stRpyoXeC7f\",\"vTMyc3otxo9jPDpTZ\",\"QXR2qGcvrK5Xkxdea\",\"gXTAie79kiw28tx5u\",\"jm4tNFjsgYKW5TZfp\",\"fbgn5575LS3jsxABM\",\"h6exQtjB22pabWmvE\",\"aa43A5NEipgbfvarF\",\"LNCb5rksJLJ43L4Nw\",\"rhS8qXRjZcpDXkwnE\",\"CuXeZN3q4yS2S7xPi\",\"MmnszBg2CgLGZ4Rao\",\"AR4a9RtFbrsxMvv2C\",\"KMR6vNzvSKMA2cXnK\",\"uw47663LqPME8btaA\",\"buX4mCQhtXCfBjeno\",\"NjHK6iDsbc3ipaFqh\",\"XpsvzPw8cdw4Qaf4f\",\"B46GRBJmNSejfkiW7\"],\"total\":34,\"quality\":[]},\"flags\":0},\"summary\":\"We define super digit of an integer x using the following rules:\\n\\nIf x has only 1 digit, then its super digit is x.\\nOtherwise, the super digit of x is equal to the super digit of the sum of the digits of x.\\n\\nFor example, the super digit of x will be calculated as:\\n\\n  superDigit(9875)    9+8+7+5 = 29\\n  superDigit(29)      2 + 9 = 11\\n  superDigit(11)      1 + 1\",\"tags\":[\"recursion\",\"math\",\"numbers\",\"algorithms\"],\"timestamp\":{\"$date\":1593807023095},\"title\":\"Recursive Digit\",\"quality\":0,\"family\":[{\"_id\":\"cPu9k4bBimoKHc9zD\",\"language\":\"cpp\"},{\"_id\":\"ABgaWqqn2XDjBqwKy\",\"language\":\"java\"},{\"_id\":\"evbaerriFzL6GBgSo\",\"language\":\"javascript\"},{\"_id\":\"HwwspgCBsYQhMcafw\",\"language\":\"python3\"},{\"_id\":\"ZutbAT2oLewzixS3L\",\"language\":\"ruby\"}]}}"]