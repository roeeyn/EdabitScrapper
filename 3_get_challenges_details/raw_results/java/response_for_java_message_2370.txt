a["{\"msg\":\"result\",\"id\":\"741\",\"result\":{\"_id\":\"cwyHz8adjAg6dpxce\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class ListTransform {\\n\\tpublic static Object[] flatten(Object[] arr) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":2.875,\"familyId\":\"adpyGoq7BBnACeYod\",\"instructions\":\"Write a **recursive** function that transforms a *multi-dimensional* array into a *single-dimensional* array.\\n\\n\\n### Examples\\n```\\nflatten([[17.2, 500, \\\"code\\\"], \\\"generate\\\"]) ➞ [17.2, 500, \\\"code\\\", \\\"generate\\\"]\\n\\nflatten([[[[[2, 14, \\\"core\\\"]]], 2, 3, 4]]) ➞ [2, 14, \\\"core\\\", 2, 3, 4]\\n\\nflatten([[\\\"dimension\\\"], \\\"vertical\\\", [[\\\"objective\\\"]]]) ➞ [\\\"dimension\\\", \\\"vertical\\\", \\\"objective\\\"]\\n\\nflatten([[[[[[\\\"construct\\\"]]]]]]) ➞ [\\\"construct\\\"]\\n```\\n\\n\\n### Notes\\n- Array contains at least one element.\\n- A **recursive** approach to solving this challenge is gretly advised and is more convenient than the iterative approach.\\n- A similar version of this challenge can be found [here.](https://edabit.com/challenge/5s8AXfbk4X2Dmimrk).\\n- If you think recursion is fun, a collection of those challenges can be found [here](https://edabit.com/collection/Yx78jEBrKppHBNsoQ).\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"import static org.junit.Assert.assertArrayEquals;\\nimport org.junit.Test;\\n\\npublic class ListTransformTests {\\n\\tprivate Object[][] objVector = new Object[][] {\\n\\t\\t{new Object[] {17.2, 500, \\\"code\\\"}, \\\"generate\\\"},\\n\\t\\t{new Object[] {new Object[] {new Object[] {new Object[] {2, 14, \\\"core\\\"}}}, 2, 3, 4}},\\n\\t\\t{new Object[] {\\\"dimension\\\"}, \\\"vertical\\\", new Object[] {new Object[] {\\\"objective\\\"}}},\\n\\t\\t{new Object[] {new Object[] {new Object[] {new Object[] {new Object[] {\\\"construct\\\"}}}}}},\\n\\t\\t{0, new Object[] {12, \\\"recurrence\\\", new Object[] {new Object[] {2}}}},\\n\\t\\t{new Object[] {3.1415926, 3.2e5, \\\"absolute\\\", \\\"edabit\\\"}},\\n\\t\\t{4, 6, 6, 6, new Object[] {579, 466, 876, 696}},\\n\\t\\t{new Object[] {3.14, new Object[] {1.59, new Object[] {2.65, new Object[] {3.58, new Object[] {9.79}}}}}}\\n\\t};\\n\\tprivate Object[][] resVector = new Object[][] {\\n\\t\\t{17.2, 500, \\\"code\\\", \\\"generate\\\"},\\n\\t\\t{2, 14, \\\"core\\\", 2, 3, 4},\\n\\t\\t{\\\"dimension\\\", \\\"vertical\\\", \\\"objective\\\"},\\n\\t\\t{\\\"construct\\\"},\\n\\t\\t{0, 12, \\\"recurrence\\\", 2},\\n\\t\\t{3.1415926, 320000.0, \\\"absolute\\\", \\\"edabit\\\"},\\n\\t\\t{4, 6, 6, 6, 579, 466, 876, 696},\\n\\t\\t{3.14, 1.59, 2.65, 3.58, 9.79}\\n\\t};\\n\\t\\n\\t@Test\\n\\tpublic void test01() {\\n\\t\\tassertArrayEquals(ListTransform.flatten(objVector[0]), resVector[0]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test02() {\\n\\t\\tassertArrayEquals(ListTransform.flatten(objVector[1]), resVector[1]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test03() {\\n\\t\\tassertArrayEquals(ListTransform.flatten(objVector[2]), resVector[2]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test04() {\\n\\t\\tassertArrayEquals(ListTransform.flatten(objVector[3]), resVector[3]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test05() {\\n\\t\\tassertArrayEquals(ListTransform.flatten(objVector[4]), resVector[4]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test06() {\\n\\t\\tassertArrayEquals(ListTransform.flatten(objVector[5]), resVector[5]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test07() {\\n\\t\\tassertArrayEquals(ListTransform.flatten(objVector[6]), resVector[6]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test08() {\\n\\t\\tassertArrayEquals(ListTransform.flatten(objVector[7]), resVector[7]);\\n\\t}\\n}\",\"language\":\"java\",\"quality\":0,\"summary\":\"Write a recursive function that transforms a multi-dimensional array into a single-dimensional array.\\n\\nExamples\\nflatten([[17.2, 500, \\\"code\\\"], \\\"generate\\\"]) ➞ [17.2, 500, \\\"code\\\", \\\"generate\\\"]\\n\\nflatten([[[[[2, 14, \\\"core\\\"]]], 2, 3, 4]]) ➞ [2, 14, \\\"core\\\", 2, 3, 4]\\n\\nflatten([[\\\"dimension\\\"], \\\"vertical\\\", [[\\\"objective\\\"]]]) ➞ [\\\"dimension\\\", \\\"vertical\\\", \\\"objective\\\"]\\n\\nflatte\",\"tags\":[\"recursion\",\"arrays\",\"objects\"],\"timestamp\":{\"$date\":1602789140601},\"title\":\"Multi-Dimensional Array Into Single-Dimensional Array\",\"stats\":{\"completed\":{\"total\":14,\"ratings\":[2,2,2,2,2,3,3,2,5,3,4,3,4,2,4,3],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"Es4eX2stRpyoXeC7f\",\"PRpHJh9yrYyj6hBFi\",\"gXTAie79kiw28tx5u\",\"j5QzY7Rc4fqdTdxuv\",\"beSt5pzrK2WWpJpna\",\"LHrtgWmZBG9vbPM2i\",\"wT5gGgvjKc5wz59AQ\",\"gXmjKF8FNhsQN2wGa\",\"htXCitorobtqYymjN\",\"sxci7DYKNa6q22Sjq\"]},\"flags\":0},\"editorId\":\"a777e8chPvJkY3tKa\",\"family\":[{\"_id\":\"cwyHz8adjAg6dpxce\",\"language\":\"java\"},{\"_id\":\"2oMTwjqmmXD8XBuMn\",\"language\":\"javascript\"},{\"_id\":\"7L9RgoJHuYf85DWib\",\"language\":\"python3\"}]}}"]