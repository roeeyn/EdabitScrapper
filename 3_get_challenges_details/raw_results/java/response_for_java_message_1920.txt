a["{\"msg\":\"result\",\"id\":\"517\",\"result\":{\"_id\":\"hYq8J8HJM3pwCFKiZ\",\"author\":\"bangyen\",\"authorId\":\"yv7c4H2jimSKHEjtG\",\"code\":\"public class Program {\\n\\tpublic static boolean alternateSign(int[] arr) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":2.075,\"quality\":4.590909090909091,\"familyId\":\"6264vW8SQG5XFFXEm\",\"instructions\":\"Create a function which validates whether a given array **alternates** between *positive* and *negative* numbers.\\n\\n### Examples\\n```\\nalternateSign([3, -2, 5, -5, 2, -8]) ➞ true\\n\\nalternateSign([-6, 1, -1, 4, -3]) ➞ true\\n\\nalternateSign([4, 4, -2, 3, -6, 10]) ➞ false\\n```\\n\\n### Notes\\n - Lists can be of any length.\\n - It doesn't matter if an array begins/ends with a positive or negative, as long as it alternates.\\n- If a list contains 0, return `false` (as it is neither positive nor negative).\",\"isHidden\":false,\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ProgramTest {\\n\\t@Test\\n\\tpublic void test1() {\\n\\t\\tassertEquals(true, Program.alternateSign(new int[]{3, -2, 5, -5, 2, -8}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test2() {\\n\\t\\tassertEquals(true, Program.alternateSign(new int[]{-6, 1, -1, 4, -3}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test3() {\\n\\t\\tassertEquals(false, Program.alternateSign(new int[]{4, 4, -2, 3, -6, 10}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test4() {\\n\\t\\tassertEquals(false, Program.alternateSign(new int[]{34, 49, 33, 17, -47}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test5() {\\n\\t\\tassertEquals(true, Program.alternateSign(new int[]{22}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test6() {\\n\\t\\tassertEquals(false, Program.alternateSign(new int[]{41, 11, 37, -30, -29, 39, -45, 15, -41, 7}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test7() {\\n\\t\\tassertEquals(false, Program.alternateSign(new int[]{3, -7, 15, 18}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test8() {\\n\\t\\tassertEquals(true, Program.alternateSign(new int[]{40}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test9() {\\n\\t\\tassertEquals(false, Program.alternateSign(new int[]{40, 27, -44, -13, -31}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() {\\n\\t\\tassertEquals(false, Program.alternateSign(new int[]{40, 50, -7, 45, -7}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test11() {\\n\\t\\tassertEquals(false, Program.alternateSign(new int[]{-23, -16, -9, -15, 16}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test12() {\\n\\t\\tassertEquals(false, Program.alternateSign(new int[]{0, 0, 0, 0}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test13() {\\n\\t\\tassertEquals(false, Program.alternateSign(new int[]{50, 28, -5, 25, -14, -2, 20, 26, -32}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test14() {\\n\\t\\tassertEquals(true, Program.alternateSign(new int[]{24, -10}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test15() {\\n\\t\\tassertEquals(false, Program.alternateSign(new int[]{-2, 4, 16, -15, 24, 2}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test16() {\\n\\t\\tassertEquals(false, Program.alternateSign(new int[]{19, -12, -37, 44, -43, 44, 47}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test17() {\\n\\t\\tassertEquals(false, Program.alternateSign(new int[]{-21, 42, -11, 27, -16, 36, 37}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test18() {\\n\\t\\tassertEquals(true, Program.alternateSign(new int[]{30}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test19() {\\n\\t\\tassertEquals(true, Program.alternateSign(new int[]{3, -7, 15, -18}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test20() {\\n\\t\\tassertEquals(true, Program.alternateSign(new int[]{9, -4, 8, -16}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test21() {\\n\\t\\tassertEquals(false, Program.alternateSign(new int[]{3, -7, 15, -18, 0}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test22() {\\n\\t\\tassertEquals(false, Program.alternateSign(new int[]{0}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test23() {\\n\\t\\tassertEquals(false, Program.alternateSign(new int[]{0, 2, -5, 8, -12}));\\n\\t}\\n}\",\"language\":\"java\",\"summary\":\"Create a function which validates whether a given array alternates between positive and negative numbers.\\n\\nExamples\\nalternateSign([3, -2, 5, -5, 2, -8]) ➞ true\\n\\nalternateSign([-6, 1, -1, 4, -3]) ➞ true\\n\\nalternateSign([4, 4, -2, 3, -6, 10]) ➞ false\\n\\nNotes\\n Lists can be of any length.\\n It doesn't matter if an array begins/ends with a positive or negative, as lon\",\"tags\":[\"arrays\",\"numbers\",\"loops\",\"validation\"],\"timestamp\":{\"$date\":1600329508474},\"title\":\"Positives and Negatives\",\"stats\":{\"completed\":{\"total\":105,\"ratings\":[2,2,2,2,2,1,3,3,2,0,3,3,2,2,2,1,1,2,2,3,2,2,1,0,3,3,4,2,0,1,4,2,3,2,2,1,1,1,3,3,2,2,2,4,2,2,2,3,2,2,2,1,3,3,3,3,1,1,3,3,2,1,3,2,2,2,2,3,1,3,3,1,3,1,1,3,1,3,1,2],\"quality\":[4,5,3,5,5,5,4,5,5,5,5,5,5,4,5,1,5,5,5,5,5,5],\"rators\":[\"yv7c4H2jimSKHEjtG\",\"DzvdGwHEjqsX7wyKr\",\"rvojHhKH3DaxotefQ\",\"TrquEHytntLKHA4m2\",\"vRXuYYBNuHEQ29fbm\",\"azAzSkvJd7eyXY9x9\",\"Ym8AjbKGSJooun3nt\",\"82weQfHHmno4Mq4X7\",\"4gsam6sAAtEPiafzc\",\"Es4eX2stRpyoXeC7f\",\"rehehi2Tr2mwaEoJE\",\"J48HzyrM4kmybqM48\",\"rWhXHhzF4W8bea6LP\",\"c22j7dxK8bgJzkpq3\",\"2xFvy6u3hE4LtCXMD\",\"Za3F5gGPy2Rzp4rfG\",\"2NJuDfSqdrF8kHHni\",\"x3WsGCnE38anLjJqh\",\"WLMYKKwgKSwven9x7\",\"dPeaG87LMdYeD5xLB\",\"yXGiiSAR5nBHnH3yr\",\"C9yBWYcZsjmJYww3K\",\"gXTAie79kiw28tx5u\",\"etoSR23iELGGgs9rA\",\"oRi93mrm7DLdeiFjf\",\"thA79neuEcM3J8ZHr\",\"xGtxQz9WnAPPKJZxK\",\"C75Nyf5jotZJ9TfPW\",\"eBgN48uPauTRcPpRb\",\"sJuq37PFQozqB4C7k\",\"mxjrvQP2vPFBjAGxu\",\"YL9pqyCu8xsds8J49\",\"mQKWauR6b252TmdX4\",\"P5BhjZxyeHQYTNyB9\",\"jyoLggHk8xQKZuoQC\",\"XEkEcNqgaBDaXWxRY\",\"8Xx8nWXRydHDBGfQf\",\"jXTnL3JatkKjoifyb\",\"LrgQT4bdiLbHrprXu\",\"fbgn5575LS3jsxABM\",\"FeCN9HXLdYFEzTC73\",\"FJNq5bNya43wzxkjd\",\"fRhyffuFFdj8dmJwX\",\"j5QzY7Rc4fqdTdxuv\",\"jm4tNFjsgYKW5TZfp\",\"5Mk9r84xypgC5eWq5\",\"a82zHoDpGHXb8rBZX\",\"kCmvRz8ADNDZNJmBD\",\"yd5PakB2z33q2JrTZ\",\"pokBD5HvY58t8Aicu\",\"mGaEDPw5FsDb3vdnq\",\"p2woPCQKXuWJCwffJ\",\"YKc7ARi9LrP7hwP2t\",\"btabi3PdyisuY5tn9\",\"X9xHuL98ECnMsmcWz\",\"qRhXvCaA7qgDoeFnr\",\"vEN56nHw7hTxbyHhp\",\"j6m2FpEdsktpnEpYm\",\"3hcjckRyuxzWzgA7R\",\"EwXYEZ8cEtEThuTXC\",\"W4TtzLajjmS8QPK3c\",\"gJbvbqosimaP4ZAYb\",\"LNCb5rksJLJ43L4Nw\",\"5tjwhZyExwAytZbvd\",\"zza5WjC8QrHcoDZBF\",\"ags9oDeKmrSrnrPfn\",\"jyeZPhmfLtysXHswN\",\"Aq7wRXeG9EChyLz2z\",\"buX4mCQhtXCfBjeno\",\"FgEeQycsn67j9m7xK\",\"tdxi2QkC26vf5P3vG\",\"mkjFDssrhpTHMwQTW\",\"qaPjAANdnxFnWfj5d\",\"mfm3gB39arY8Rjb2y\",\"rhS8qXRjZcpDXkwnE\",\"HsFc9PgmpP2X9Fwh9\",\"4ySzqKC5s3ZRpG9di\",\"wFRLGjA56kj7xyhmv\",\"CggGfsERnPKGupFWp\",\"9GxghE7uZXCMKt6W9\",\"jCjCvyhqhpebkJn34\",\"a49eNnfRwSMxsDJXf\",\"2NJZbusRvu3eJ4tHu\",\"NsQp548ACgQmeziEH\",\"xW9nC9h6p77YT2iso\",\"sxci7DYKNa6q22Sjq\",\"KMR6vNzvSKMA2cXnK\",\"Nmy9qJxkTLcW5Sh85\",\"JJbvewX2tn7aQXHqu\",\"htXCitorobtqYymjN\",\"CE4qtZmpDE35AsgKy\",\"xEX3TDY6C2h82dJTn\",\"6rvJwN4mcX7iYGjY7\",\"unqzSsxpxj9sZ7rbD\",\"6FJ5GqFPJZEykxj24\",\"uw47663LqPME8btaA\",\"FxPDKKibxnZjGJLs6\"]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"niNu9f22zboTn3wea\",\"language\":\"cpp\"},{\"_id\":\"hYq8J8HJM3pwCFKiZ\",\"language\":\"java\"},{\"_id\":\"SZnDZpQeBwhGXMBPW\",\"language\":\"javascript\"},{\"_id\":\"HaxQfQTEpo7BFE5rz\",\"language\":\"python3\"},{\"_id\":\"kMbMjarbCvkBYGNdS\",\"language\":\"ruby\"}]}}"]