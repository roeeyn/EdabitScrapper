a["{\"msg\":\"result\",\"id\":\"470\",\"result\":{\"_id\":\"mdJmXLuw8dLxxdGLc\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"public class Challenge {\\n  public static boolean noDuplicateLetters(String phrase) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":1.6825396825396826,\"familyId\":\"iqKAgZjKi8u6TPdWQ\",\"instructions\":\"Given a common phrase, return `false` if *any* individual word in the phrase contains _duplicate_ letters. Return `true` otherwise.\\n\\n### Examples\\n```\\nnoDuplicateLetters(\\\"Fortune favours the bold.\\\") ➞ true\\n\\nnoDuplicateLetters(\\\"You can lead a horse to water, but you can't make him drink.\\\") ➞ true\\n\\nnoDuplicateLetters(\\\"Look before you leap.\\\") ➞ false\\n// Duplicate letters in \\\"Look\\\" and \\\"before\\\".\\n\\nnoDuplicateLetters(\\\"An apple a day keeps the doctor away.\\\") ➞ false\\n// Duplicate letters in \\\"apple\\\", \\\"keeps\\\", \\\"doctor\\\", and \\\"away\\\".\\n```\\n\\n### Notes\\nLetter matches are case-insensitive.\",\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n  @Test\\n  public void test1() {\\n    assertEquals(true, Challenge.noDuplicateLetters(\\\"Easy does it.\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test2() {\\n    assertEquals(false, Challenge.noDuplicateLetters(\\\"So far, so good.\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test3() {\\n    assertEquals(false, Challenge.noDuplicateLetters(\\\"Better late than never.\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test4() {\\n    assertEquals(true, Challenge.noDuplicateLetters(\\\"Beat around the bush.\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test5() {\\n    assertEquals(false, Challenge.noDuplicateLetters(\\\"Give them the benefit of the doubt.\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test6() {\\n    assertEquals(false, Challenge.noDuplicateLetters(\\\"Your guess is as good as mine.\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test7() {\\n    assertEquals(true, Challenge.noDuplicateLetters(\\\"Make a long story short.\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test8() {\\n    assertEquals(true, Challenge.noDuplicateLetters(\\\"Go back to the drawing board.\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test9() {\\n    assertEquals(true, Challenge.noDuplicateLetters(\\\"Wrap your head around something.\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test10() {\\n    assertEquals(false, Challenge.noDuplicateLetters(\\\"Get your act together.\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test11() {\\n    assertEquals(false, Challenge.noDuplicateLetters(\\\"To make matters worse.\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test12() {\\n    assertEquals(true, Challenge.noDuplicateLetters(\\\"No pain, no gain.\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test13() {\\n    assertEquals(false, Challenge.noDuplicateLetters(\\\"We'll cross that bridge when we come to it.\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test14() {\\n    assertEquals(false, Challenge.noDuplicateLetters(\\\"Call it a day.\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test15() {\\n    assertEquals(false, Challenge.noDuplicateLetters(\\\"It's not rocket science.\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test16() {\\n    assertEquals(false, Challenge.noDuplicateLetters(\\\"A blessing in disguise.\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test17() {\\n    assertEquals(true, Challenge.noDuplicateLetters(\\\"Get out of hand.\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test18() {\\n    assertEquals(true, Challenge.noDuplicateLetters(\\\"A dime a dozen.\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test19() {\\n    assertEquals(true, Challenge.noDuplicateLetters(\\\"Time flies when you're having fun.\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test20() {\\n    assertEquals(true, Challenge.noDuplicateLetters(\\\"The best of both worlds.\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test21() {\\n    assertEquals(true, Challenge.noDuplicateLetters(\\\"Speak of the devil.\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test22() {\\n    assertEquals(false, Challenge.noDuplicateLetters(\\\"You can say that again.\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test23() {\\n    assertEquals(false, Challenge.noDuplicateLetters(\\\"Always be closing.\\\"));\\n  }\\n}\",\"language\":\"java\",\"summary\":\"Given a common phrase, return false if any individual word in the phrase contains duplicate letters. Return true otherwise.\\n\\nExamples\\nnoDuplicateLetters(\\\"Fortune favours the bold.\\\") ➞ true\\n\\nnoDuplicateLetters(\\\"You can lead a horse to water, but you can't make him drink.\\\") ➞ true\\n\\nnoDuplicateLetters(\\\"Look before you leap.\\\") ➞ false\\n// Duplicate letters in \\\"Look\",\"tags\":[\"language_fundamentals\",\"strings\",\"validation\",\"loops\"],\"timestamp\":{\"$date\":1568574183636},\"title\":\"Words With Duplicate Letters\",\"stats\":{\"completed\":{\"total\":72,\"ratings\":[2,2,2,2,2,2,2,0,3,0,2,0,3,0,2,2,3,2,0,2,0,2,4,2,2,2,2,1,2,2,1,2,0,1,2,3,2,2,0,2,1,2,1,2,2,2,2,2,2,0,2,2,1,1,2,2,2,2,2,2,1,2,2],\"rators\":[\"3pdgguqZgNDSAJSGm\",\"sxci7DYKNa6q22Sjq\",\"vRXuYYBNuHEQ29fbm\",\"9c8n7ti5vCjTRgiGN\",\"SnY7WidXJoAyyuPuA\",\"t2kdBPj9qQAXY2Ehd\",\"3gxJoNp59B4eoyyed\",\"HsFc9PgmpP2X9Fwh9\",\"Mg6qxm83nhPfRSZLg\",\"Yohr2MmAyaWGMbB35\",\"CLmJduqJHX83dM4Pd\",\"vuMBgKQRnA4HsuWjR\",\"phA6MomRzh9oz3eqn\",\"8J2Dqqz9PaFufQzwY\",\"u4yanfWeeZsN3xWgc\",\"J9zJq7PMGb6mqzcHW\",\"r9hHZYPQAqJ9DbwLX\",\"AyrEvM2GLX2jqM772\",\"JFodQijHHdRkkrZvT\",\"Es4eX2stRpyoXeC7f\",\"4RHx3H8EwP2oboW8e\",\"hB5mgzMwQSnhBzi7P\",\"5seiNqw6ZXoF2GRRd\",\"Kso7rzAKB4TTCPKgM\",\"jyoLggHk8xQKZuoQC\",\"82weQfHHmno4Mq4X7\",\"TrquEHytntLKHA4m2\",\"WZujpe8yQAyZmpWHg\",\"etoSR23iELGGgs9rA\",\"htXCitorobtqYymjN\",\"dpJTai3i9aNkCS3sa\",\"y6kfyYmydcD8tkBk7\",\"q2tzvkrLASvSjkek9\",\"g4NCSxxHqHCGMpWwT\",\"DzvdGwHEjqsX7wyKr\",\"YcjwCvYut6834Jzd8\",\"rvojHhKH3DaxotefQ\",\"azAzSkvJd7eyXY9x9\",\"yXGiiSAR5nBHnH3yr\",\"gXTAie79kiw28tx5u\",\"FPTgjq42wh6PqpqSE\",\"8Xx8nWXRydHDBGfQf\",\"jXTnL3JatkKjoifyb\",\"PtGprKjgzCDqyrp6d\",\"a777e8chPvJkY3tKa\",\"BrLjaZuPzmCNYG8ho\",\"Y6N5mCB4KjcLeFFDK\",\"zHCvsprtbScc7qfCK\",\"buX4mCQhtXCfBjeno\",\"a49eNnfRwSMxsDJXf\",\"pGHzaBviaAStdFXfF\",\"mG8HqKiAQFTdRZthG\",\"c7uBxu2rgY77H5d79\",\"rhS8qXRjZcpDXkwnE\",\"xEX3TDY6C2h82dJTn\",\"wFRLGjA56kj7xyhmv\",\"R8uAJk89MupgKqyJS\",\"KMR6vNzvSKMA2cXnK\",\"rWhXHhzF4W8bea6LP\",\"unqzSsxpxj9sZ7rbD\",\"PJu3WcTpfRrvHfQiS\",\"FxPDKKibxnZjGJLs6\",\"uw47663LqPME8btaA\",\"wMY6G2GLpcTJCe74o\"],\"quality\":[1,5,4,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"isHidden\":false,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":4.166666666666667,\"family\":[{\"_id\":\"tLJdKYyLDkidPioAy\",\"language\":\"cpp\"},{\"_id\":\"mdJmXLuw8dLxxdGLc\",\"language\":\"java\"},{\"_id\":\"ztJZiCZeXATC9KDHX\",\"language\":\"javascript\"},{\"_id\":\"WS6hR6b9EZzuDTD26\",\"language\":\"python3\"},{\"_id\":\"shE2taCrx4hvxaiM3\",\"language\":\"ruby\"}]}}"]