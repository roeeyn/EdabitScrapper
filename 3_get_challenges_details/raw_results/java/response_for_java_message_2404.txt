a["{\"msg\":\"result\",\"id\":\"758\",\"result\":{\"_id\":\"DbqdoQDMv88NHSgi4\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class LetterGroups {\\n\\tpublic static String[] collect(String s, int n) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":2.9523809523809526,\"editorId\":\"a777e8chPvJkY3tKa\",\"familyId\":\"D44GgRRjLqMtg2E9B\",\"instructions\":\"Write a function that returns an array of strings populated from the slices of **n-length** characters of the given word (a slice after another while **n-length** applies onto the word).\\n\\n\\n### Examples\\n```\\ncollect(\\\"intercontinentalisationalism\\\", 6) \\n➞ [\\\"ationa\\\", \\\"interc\\\", \\\"ntalis\\\", \\\"ontine\\\"]\\n\\ncollect(\\\"strengths\\\", 3) \\n➞ [\\\"eng\\\", \\\"str\\\", \\\"ths\\\"]\\n\\ncollect(\\\"pneumonoultramicroscopicsilicovolcanoconiosis\\\", 15) \\n➞ [\\\"croscopicsilico\\\", \\\"pneumonoultrami\\\", \\\"volcanoconiosis\\\"]\\n```\\n\\n\\n### Notes\\n- Ensure that the resulting array is lexicographically ordered.\\n- Return an **empty** array if the *given string* is less than `n`.\\n- You are expected to solve this challenge via a **recursive** approach.\\n- You can check on the **Resources** tab for more details about recursion in Java.\\n- An **iterative** version of this challenge can be found via this [link](https://edabit.com/challenge/5RvoqBgeykwy2Xqdb).\\n- A **collection** of challenges in recursion can be found via this [link](https://edabit.com/collection/Yx78jEBrKppHBNsoQ).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"/** \\n================================= \\nTestGen 3.1 for JUnit 4.13.0 \\t\\t\\nTest Case: LetterGroups::collect \\nTimestamp: 10/17/2020 03:54:46 AM \\n--------------------------------- \\n® DARKKO 2021 © \\n================================= \\n\\n**/ \\n\\nimport static org.junit.Assert.assertArrayEquals; \\nimport org.junit.Test; \\n\\npublic class LetterGroupsTest { \\n\\t\\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertArrayEquals(new String[] {\\\"ationa\\\", \\\"interc\\\", \\\"ntalis\\\", \\\"ontine\\\"}, LetterGroups.collect(\\\"intercontinentalisationalism\\\", 6));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertArrayEquals(new String[] {\\\"eng\\\", \\\"str\\\", \\\"ths\\\"}, LetterGroups.collect(\\\"strengths\\\", 3));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertArrayEquals(new String[] {\\\"croscopicsilico\\\", \\\"pneumonoultrami\\\", \\\"volcanoconiosis\\\"}, LetterGroups.collect(\\\"pneumonoultramicroscopicsilicovolcanoconiosis\\\", 15));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertArrayEquals(new String[] {\\\"aphi\\\", \\\"call\\\", \\\"cogr\\\", \\\"lexi\\\"}, LetterGroups.collect(\\\"lexicographically\\\", 4));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertArrayEquals(new String[] {\\\"anesth\\\", \\\"esiolo\\\"}, LetterGroups.collect(\\\"anesthesiologists\\\", 6));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertArrayEquals(new String[] {\\\"matogl\\\", \\\"subder\\\"}, LetterGroups.collect(\\\"subdermatoglyphic\\\", 6));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertArrayEquals(new String[] {\\\"pedali\\\", \\\"sesqui\\\"}, LetterGroups.collect(\\\"sesquipedalianism\\\", 6));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertArrayEquals(new String[] {\\\"ect\\\", \\\"ion\\\", \\\"oll\\\", \\\"rec\\\"}, LetterGroups.collect(\\\"recollection\\\", 3));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test09() { \\n\\t\\tassertArrayEquals(new String[] {\\\"hyroidi\\\", \\\"poparat\\\", \\\"pseudop\\\", \\\"seudohy\\\"}, LetterGroups.collect(\\\"pseudopseudohypoparathyroidism\\\", 7));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() { \\n\\t\\tassertArrayEquals(new String[] {\\\"at\\\", \\\"ci\\\", \\\"fl\\\", \\\"ic\\\", \\\"if\\\", \\\"ih\\\", \\\"il\\\", \\\"il\\\", \\\"in\\\", \\\"io\\\", \\\"ip\\\", \\\"na\\\", \\\"oc\\\", \\\"uc\\\"}, LetterGroups.collect(\\\"floccinaucinihilipilification\\\", 2));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test11() { \\n\\t\\tassertArrayEquals(new String[] {\\\"ablis\\\", \\\"antid\\\", \\\"arian\\\", \\\"hment\\\", \\\"isest\\\"}, LetterGroups.collect(\\\"antidisestablishmentarianism\\\", 5));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test12() { \\n\\t\\tassertArrayEquals(new String[] {\\\"ali\\\", \\\"ali\\\", \\\"doc\\\", \\\"erc\\\", \\\"fra\\\", \\\"gil\\\", \\\"ice\\\", \\\"iou\\\", \\\"ist\\\", \\\"sup\\\", \\\"xpi\\\"}, LetterGroups.collect(\\\"supercalifragilisticexpialidocious\\\", 3));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test13() { \\n\\t\\tassertArrayEquals(new String[] {\\\"ensibilit\\\", \\\"incompreh\\\"}, LetterGroups.collect(\\\"incomprehensibilities\\\", 9));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test14() { \\n\\t\\tassertArrayEquals(new String[] {\\\"astr\\\", \\\"ophy\\\", \\\"sici\\\"}, LetterGroups.collect(\\\"astrophysicists\\\", 4));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test15() { \\n\\t\\tassertArrayEquals(new String[] {\\\"honorificabi\\\", \\\"litudinitati\\\"}, LetterGroups.collect(\\\"honorificabilitudinitatibus\\\", 12));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test16() { \\n\\t\\tassertArrayEquals(new String[] {\\\"unimagin\\\"}, LetterGroups.collect(\\\"unimaginatively\\\", 8));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test17() { \\n\\t\\tassertArrayEquals(new String[] {}, LetterGroups.collect(\\\"euouae\\\", 7));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test18() { \\n\\t\\tassertArrayEquals(new String[] {\\\"tsktsk\\\"}, LetterGroups.collect(\\\"tsktsk\\\", 6));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test19() { \\n\\t\\tassertArrayEquals(new String[] {\\\"uncopyright\\\"}, LetterGroups.collect(\\\"uncopyrightable\\\", 11));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test20() { \\n\\t\\tassertArrayEquals(new String[] {\\\"har\\\", \\\"ing\\\", \\\"pen\\\", \\\"tes\\\"}, LetterGroups.collect(\\\"tesharpening\\\", 3));\\n\\t}\\n\\n\\t\\n\\t@Test\\n\\tpublic void test21() { \\n\\t\\tassertArrayEquals(new String[] {\\\"holic\\\", \\\"tesha\\\"}, LetterGroups.collect(\\\"teshaholic\\\", 5));\\n\\t}\\n\\n}\\n// end of tests\",\"language\":\"java\",\"quality\":0,\"stats\":{\"completed\":{\"ratings\":[4,4,4,4,4,4,5,1,2,1,3,4,2,1,2,1,5,5,2,5,2,3,5,5,2,1,0,5,4,2,3,3,3,2,3,2,5,3,0,4,2,2],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"Es4eX2stRpyoXeC7f\",\"rehehi2Tr2mwaEoJE\",\"gXTAie79kiw28tx5u\",\"bTCq6CQ3SGjrRfZeQ\",\"2g9DndhBotcaKDiFD\",\"FTHXj9Rfx9wdujSzy\",\"YGoEo3M5Q93BzxBqX\",\"RSSrWo6AiSDRNAy5K\",\"dPjq5Lh7CzShMt5YJ\",\"NRcES4Fvey4SWLRCA\",\"nHj7SC5cnmkTApbgY\",\"QfpcrE9MhS48tZefg\",\"DkSMZ3jZLkwviKb9g\",\"njX6SdTFWePDNXoui\",\"b7k9Q3ffQtYHfQY8R\",\"QoaqyY7Jrscd4stfS\",\"H2MS933uYLm2BahGu\",\"h6exQtjB22pabWmvE\",\"f7eueuFbYYr8MLxcF\",\"9CW8Lzi5JQDBebyYX\",\"LNCb5rksJLJ43L4Nw\",\"p22yLbgtHim2rJxrE\",\"hjTJ39jWghuG2LrSk\",\"w93Q2XNPaSgxcfPka\",\"GvLLKHi7NwAjutdDk\",\"zASzEtwphbBZ3ZmX4\",\"MGKmy7hLbgcHpKv5d\",\"nSQh85oi5P26GsCew\",\"FMongkk7rzuBgTrjx\",\"AR4a9RtFbrsxMvv2C\",\"kNFJQmAqtbPGs6BMH\",\"NedWtwJPMpY42vPDW\",\"KnjLZKZxhWwdbfPEK\",\"KMR6vNzvSKMA2cXnK\",\"YCTrQ9PuZmg4S8tsf\",\"sxci7DYKNa6q22Sjq\"],\"total\":43},\"flags\":0},\"summary\":\"Write a function that returns an array of strings populated from the slices of n-length characters of the given word (a slice after another while n-length applies onto the word).\\n\\nExamples\\ncollect(\\\"intercontinentalisationalism\\\", 6)\\n➞ [\\\"ationa\\\", \\\"interc\\\", \\\"ntalis\\\", \\\"ontine\\\"]\\n\\ncollect(\\\"strengths\\\", 3)\\n➞ [\\\"eng\\\", \\\"str\\\", \\\"ths\\\"]\\n\\ncollect(\\\"pneumonoultramicroscopicsili\",\"tags\":[\"recursion\",\"sorting\",\"strings\",\"arrays\"],\"timestamp\":{\"$date\":1602881341289},\"title\":\"Recursion: N-Length Letter Groups\",\"family\":[{\"_id\":\"DbqdoQDMv88NHSgi4\",\"language\":\"java\"},{\"_id\":\"PpqEjypCJ7a4RwxLH\",\"language\":\"javascript\"},{\"_id\":\"TcKZnbdgx7q6LLoFR\",\"language\":\"python3\"}]}}"]