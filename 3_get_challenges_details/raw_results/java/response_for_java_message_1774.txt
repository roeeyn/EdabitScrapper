a["{\"msg\":\"result\",\"id\":\"445\",\"result\":{\"_id\":\"6ZPqDxQfGkX9rmPGg\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class Superiority {\\n\\tpublic static boolean isFirstSuperior(Object[] a, Object[] b) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":1.6216216216216217,\"familyId\":\"LHDQzBtefA7uiqx88\",\"instructions\":\"You will be given two **extremely** similar arrays, but exactly one of the items in an array will be valued slightly higher than its counterpart (which means that evaluating **the value > the other value** will return `true`).\\n\\nCreate a function that returns whether the first array is *slightly superior* to that of the second.\\n\\n\\n### Examples\\n```\\nisFirstSuperior([1, 2, 4], [1, 2, 3]) ➞ true\\n// The pair of items at each index are compared in turn.\\n// 1 from the first array is the same as 1 from the second array.\\n// 2 is the same as 2.\\n// However, 4 is greater than 3, so first array is superior.\\n\\nisFirstSuperior([\\\"a\\\", \\\"d\\\", \\\"c\\\"], [\\\"a\\\", \\\"b\\\", \\\"c\\\"]) ➞ true\\n\\nisFirstSuperior([\\\"zebra\\\", \\\"ostrich\\\", \\\"whale\\\"], [\\\"ant\\\", \\\"ostrich\\\", \\\"whale\\\"]) ➞ true\\n\\nisFirstSuperior([1, 2, 3, 4], [1, 2, 4, 4]) ➞ false\\n\\nisFirstSuperior([true, 10, \\\"zebra\\\"], [true, 10, \\\"zebra\\\"]) ➞ false\\n```\\n\\n\\n### Notes\\n- All values and their counterparts will always be of the same data type.\\n- If the two arrays are the same, return `false`.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"/** \\n======================================= \\nTestGen 4.0 for JUnit 4.13.0 \\t\\t\\nTest Case: Superiority::isFirstSuperior \\nTimestamp: 10/17/2020 03:03:33 PM \\n--------------------------------------- \\n® DARKKO 2020 © \\n======================================= \\n\\n**/ \\n\\nimport static org.junit.Assert.assertEquals; \\nimport org.junit.Test; \\n\\npublic class SuperiorityTest { \\n\\t\\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertEquals(true, Superiority.isFirstSuperior(new Object[] {1, 2, 3, 4}, new Object[] {1, 2, 3, 3}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertEquals(false, Superiority.isFirstSuperior(new Object[] {\\\"a\\\", \\\"b\\\", \\\"c\\\"}, new Object[] {\\\"a\\\", \\\"d\\\", \\\"c\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertEquals(false, Superiority.isFirstSuperior(new Object[] {true, 10, \\\"zebra\\\"}, new Object[] {true, 10, \\\"zebra\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertEquals(true, Superiority.isFirstSuperior(new Object[] {true, 10, \\\"zebra\\\"}, new Object[] {true, 10, \\\"ant\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertEquals(false, Superiority.isFirstSuperior(new Object[] {true, true, false, true}, new Object[] {true, true, true, true}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertEquals(true, Superiority.isFirstSuperior(new Object[] {9.1, 8.1, 7.1, 6.1}, new Object[] {9.1, 8.1, 7.1, 5.1}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertEquals(false, Superiority.isFirstSuperior(new Object[] {\\\"llama\\\", \\\"alligator\\\"}, new Object[] {\\\"llama\\\", \\\"buffalo\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertEquals(true, Superiority.isFirstSuperior(new Object[] {\\\"zebra\\\", \\\"ostrich\\\", \\\"whale\\\"}, new Object[] {\\\"ant\\\", \\\"ostrich\\\", \\\"whale\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test09() { \\n\\t\\tassertEquals(false, Superiority.isFirstSuperior(new Object[] {1, 2, 3, 4}, new Object[] {1, 2, 4, 4}));\\n\\t}\\n\\n}\\n// end of tests\\n// credit goes to the original author/publisher @Joshua Señoron\",\"language\":\"java\",\"quality\":0,\"summary\":\"You will be given two extremely similar arrays, but exactly one of the items in an array will be valued slightly higher than its counterpart (which means that evaluating the value > the other value will return true).\\n\\nCreate a function that returns whether the first array is slightly superior to that of the second.\\n\\nExamples\\nisFirstSuperior([1, 2, 4], [1, 2, 3\",\"tags\":[\"language_fundamentals\",\"objects\"],\"timestamp\":{\"$date\":1602840036748},\"title\":\"Slightly Superior\",\"stats\":{\"completed\":{\"total\":33,\"ratings\":[1,1,1,1,1,0,2,3,0,2,0,0,1,3,1,2,3,2,2,3,1,2,3,1,3,1,3,2,0,3,2,2,2,2,2,1,1],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"aZnFdJMvjZK7e9z8R\",\"Es4eX2stRpyoXeC7f\",\"AeJSxRqw2dJZuGvdk\",\"gXTAie79kiw28tx5u\",\"vRXuYYBNuHEQ29fbm\",\"gBGjCfJvPHswDM5JQ\",\"etoSR23iELGGgs9rA\",\"EiMiWQuPKQmWLt3yy\",\"TrquEHytntLKHA4m2\",\"B4pxRqzo43M7S8FbP\",\"DkSMZ3jZLkwviKb9g\",\"tuKfJSqccPhjfe8ER\",\"9ty3Xe2fBFtMvnyB6\",\"rvojHhKH3DaxotefQ\",\"jyoLggHk8xQKZuoQC\",\"hD6sfDtntpqT8NR2o\",\"pgaNRv22jpbCzDoQA\",\"a49eNnfRwSMxsDJXf\",\"bur3yQ8s34zqKGEro\",\"HvTMaPhwzeBWr2TXD\",\"zZfMwLuoERGmybgib\",\"sxci7DYKNa6q22Sjq\",\"xEX3TDY6C2h82dJTn\",\"htXCitorobtqYymjN\",\"KMR6vNzvSKMA2cXnK\",\"PJu3WcTpfRrvHfQiS\",\"rWhXHhzF4W8bea6LP\",\"unqzSsxpxj9sZ7rbD\",\"jyjKaFsAbJXdTCePh\",\"FxPDKKibxnZjGJLs6\",\"uw47663LqPME8btaA\"]},\"flags\":2},\"editorId\":\"a777e8chPvJkY3tKa\",\"family\":[{\"_id\":\"6ZPqDxQfGkX9rmPGg\",\"language\":\"java\"},{\"_id\":\"xtHTBXjumRg5AhsT5\",\"language\":\"javascript\"},{\"_id\":\"ZF6vZwPc5He5u5EFe\",\"language\":\"python3\"},{\"_id\":\"Fu5ALhFuoEYhWZEeY\",\"language\":\"ruby\"}]}}"]