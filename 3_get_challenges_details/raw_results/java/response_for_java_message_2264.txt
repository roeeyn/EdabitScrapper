a["{\"msg\":\"result\",\"id\":\"689\",\"result\":{\"_id\":\"iT6NpDYyCycHuc2L3\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"public class Challenge {\\n\\tpublic static int countUniqueBooks(String str, char bookend) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":2.689655172413793,\"familyId\":\"xBQctkRqa6dWC7yvZ\",\"instructions\":\"Suppose a **pair of identical characters** serve as **book ends** for all characters in between them. Write a function that returns the **total number of unique characters** (books, so to speak) between all **pairs** of book ends.\\n\\nThe function will look like:\\n\\n```\\ncountUniqueBooks(\\\"stringSequence\\\", \\\"bookEnd\\\")\\n```\\n\\n### Examples\\n```\\ncountUniqueBooks(\\\"AZYWABBCATTTA\\\", 'A') ➞ 4\\n\\n// 1st bookend group: \\\"AZYWA\\\" : 3 unique books: \\\"Z\\\", \\\"Y\\\", \\\"W\\\"\\n// 2nd bookend group: \\\"ATTTA\\\": 1 unique book: \\\"T\\\"\\n// \\\"ABBCA\\\" not included since the first \\\"A\\\" was used in the 1st bookend group.\\n\\ncountUniqueBooks(\\\"$AA$BBCATT$C$$B$\\\", '$') ➞ 3\\n\\ncountUniqueBooks(\\\"ZZABCDEF\\\", 'Z') ➞ 0\\n```\\n\\n### Notes\\n- No book characters will be identical to the bookend character.\\n- There will always be an even number of bookends.\\n- Once a bookend is used to complete a pair, a new bookend must be found to create another pair.\\n- Return `0` if bookends contain zero books.\",\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n  @Test\\n  public void test1() {\\n    assertEquals(4, Challenge.countUniqueBooks(\\\"AZYWABBCATTTA\\\", 'A'));\\n  }\\n\\t\\n\\t@Test\\n  public void test2() {\\n    assertEquals(3, Challenge.countUniqueBooks(\\\"$AA$BBCATT$C$$B$\\\", '$'));\\n  }\\n\\t\\n\\t@Test\\n  public void test3() {\\n    assertEquals(0, Challenge.countUniqueBooks(\\\"ZZABCDEF\\\", 'Z'));\\n  }\\n\\t\\n\\t@Test\\n  public void test4() {\\n    assertEquals(6, Challenge.countUniqueBooks(\\\"A#BBCD##GGA##!#\\\", '#'));\\n  }\\n\\t\\n\\t@Test\\n  public void test5() {\\n    assertEquals(1, Challenge.countUniqueBooks(\\\"&AAAAAAAAAAAA&\\\", '&'));\\n  }\\n\\t\\n\\t@Test\\n  public void test6() {\\n    assertEquals(0, Challenge.countUniqueBooks(\\\"&&&&&&&&\\\", '&'));\\n  }\\n\\t\\n\\t@Test\\n  public void test7() {\\n    assertEquals(2, Challenge.countUniqueBooks(\\\"&A&&&&&&C&\\\", '&'));\\n  }\\n\\t\\n\\t@Test\\n  public void test8() {\\n    assertEquals(2, Challenge.countUniqueBooks(\\\"&A&33333&C&\\\", '&'));\\n  }\\n\\t\\n\\t@Test\\n  public void test9() {\\n    assertEquals(1, Challenge.countUniqueBooks(\\\"&3&3&3&\\\", '&'));\\n  }\\n\\t\\n\\t@Test\\n  public void test10() {\\n    assertEquals(2, Challenge.countUniqueBooks(\\\"&4&3&3&\\\", '&'));\\n  }\\n\\t\\n\\t@Test\\n  public void test11() {\\n    assertEquals(0, Challenge.countUniqueBooks(\\\"&AA&\\\", 'A'));\\n  }\\n\\t\\n\\t@Test\\n  public void test12() {\\n    assertEquals(3, Challenge.countUniqueBooks(\\\"AZAAABDZCCZZ\\\", 'Z'));\\n  }\\n\\t\\n\\t@Test\\n  public void test13() {\\n    assertEquals(1, Challenge.countUniqueBooks(\\\"AZAAABDZCCZZ\\\", 'A'));\\n  }\\n}\",\"language\":\"java\",\"summary\":\"Suppose a pair of identical characters serve as book ends for all characters in between them. Write a function that returns the total number of unique characters (books, so to speak) between all pairs of book ends.\\n\\nThe function will look like:\\n\\ncountUniqueBooks(\\\"stringSequence\\\", \\\"bookEnd\\\")\\n\\nExamples\\ncountUniqueBooks(\\\"AZYWABBCATTTA\\\", 'A') ➞ 4\\n\\n// 1st bookend g\",\"tags\":[\"strings\",\"regex\",\"higher_order_functions\"],\"timestamp\":{\"$date\":1568637412573},\"title\":\"Books and Book Ends\",\"stats\":{\"completed\":{\"total\":71,\"ratings\":[2,2,2,2,2,3,3,2,1,2,2,2,5,3,3,4,4,0,2,2,1,4,2,4,2,3,3,2,2,2,4,2,4,4,2,2,2,2,4,4,5,2,1,4,2,5,1,4,4,3,2,3,3,0,4,3,4,3],\"rators\":[\"3pdgguqZgNDSAJSGm\",\"sxci7DYKNa6q22Sjq\",\"6yEyKEukwgWyGJJet\",\"J9zJq7PMGb6mqzcHW\",\"rehehi2Tr2mwaEoJE\",\"fZky27mpbfX7soJKa\",\"Es4eX2stRpyoXeC7f\",\"C9yBWYcZsjmJYww3K\",\"gJbvbqosimaP4ZAYb\",\"dDP6nt8ihp6FPeT27\",\"CMbJswPjgKoRfCSzG\",\"TrquEHytntLKHA4m2\",\"oMLSgpSFQnY4ui8cB\",\"DkSMZ3jZLkwviKb9g\",\"jyoLggHk8xQKZuoQC\",\"Hq5qhBk6NnoqSvy8e\",\"imoNrk36ozReP939p\",\"dCQC9E8RfYEDBeqoo\",\"rA5nhfhFwfqvmJb6M\",\"PP5orY9GrRyMfeFar\",\"RXgLif2vM276W4tgZ\",\"62Q2HcfLE6SGphZkT\",\"k63LjKkX5p7SYng7C\",\"zbGJGwm2a7un8F5T5\",\"MiP9BaE4jANtMhvqs\",\"ZiN6yB9rACMaYgseC\",\"4tdfxCGvrAwAMvXQB\",\"XTuxCoKrN9DZ7zaQx\",\"t7ohjpYnxRPeZYdKJ\",\"5WQZzuHZBGqFeNQi3\",\"NzJKK8Cuf3bcqZfcw\",\"AxWLAsQ9dKQTeSvA5\",\"ENPyXmYYuQuZZAgRz\",\"yv5NdD4gS38t98fRL\",\"Ym8AjbKGSJooun3nt\",\"vTMyc3otxo9jPDpTZ\",\"yhhAkNM33zwgcTAMd\",\"dZwYjHxgYFStLXfKA\",\"bjKYBdDcGMRTfooBs\",\"87Q3XMWaxYqQfFJzm\",\"gXTAie79kiw28tx5u\",\"9o7Sp5AvxK75cQ3jD\",\"wpvJWmW9TxQQAZk4J\",\"p2woPCQKXuWJCwffJ\",\"pNtaczpPBxfN5Z9ee\",\"MqyvPyccJ2XMrQYg4\",\"82weQfHHmno4Mq4X7\",\"XbbcA7iXFz9y2XneB\",\"nHj7SC5cnmkTApbgY\",\"LNCb5rksJLJ43L4Nw\",\"nvFKcBZxQqBv9FvnZ\",\"6orCHyAFifJGgK6Ed\",\"EMcYjNHvryYScwFZg\",\"rhS8qXRjZcpDXkwnE\",\"PCAcZdg2HmDcGyeXb\",\"buX4mCQhtXCfBjeno\",\"vRXuYYBNuHEQ29fbm\",\"rWhXHhzF4W8bea6LP\",\"2NJZbusRvu3eJ4tHu\",\"KMR6vNzvSKMA2cXnK\",\"wFRLGjA56kj7xyhmv\"],\"quality\":[3,3,5,4,5,5,5,3]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"isHidden\":false,\"quality\":4.125,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"be7jj9Qn739fDRN7A\",\"language\":\"cpp\"},{\"_id\":\"iT6NpDYyCycHuc2L3\",\"language\":\"java\"},{\"_id\":\"TkbyvmeqbGpSsHLq8\",\"language\":\"javascript\"},{\"_id\":\"KMuRsbTKgZXoedMRN\",\"language\":\"python3\"},{\"_id\":\"bPYN83WLmHZTpz5iL\",\"language\":\"ruby\"}]}}"]