a["{\"msg\":\"result\",\"id\":\"782\",\"result\":{\"_id\":\"3Xc4sz3PpyWPDw5b3\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class NumberSeries {\\n  public static boolean isConsecutive(String s) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":3.3333333333333335,\"editorId\":\"a777e8chPvJkY3tKa\",\"familyId\":\"Fush7Zo8XcmSLrqso\",\"instructions\":\"Write a function that will return `true` if a given string (divided and grouped into a size) will contain a set of **consecutive** numbers (regardless of orientation: whether **ascending** or **descending**), otherwise, return `false`.\\n\\n### Examples\\n```\\nisConsecutive(\\\"121314151617\\\") ➞ true\\n// Contains a set of consecutive ascending numbers\\n// if grouped into 2's : 12, 13, 14, 15, 16, 17\\n\\nisConsecutive(\\\"123124125\\\") ➞ true\\n// Contains a set of consecutive ascending numbers\\n// if grouped into 3's : 123, 124, 125\\n\\nisConsecutive(\\\"32332432536\\\") ➞ false\\n// Regardless of the grouping size, the numbers can't be consecutive.\\n\\nisConsecutive(\\\"326325324323\\\") ➞ true\\n// Contains a set of consecutive descending numbers\\n// if grouped into 3's : 326, 325, 324, 323\\n\\nisConsecutive(\\\"667666\\\") ➞ true\\n// Consecutive descending numbers: 667 and 666.\\n\\nisConsecutive(\\\"999897959493\\\") ➞ false\\n```\\n\\n### Notes\\n- A **number** can consist of any number of digits, so long as the numbers are **adjacent** to each other, and the string has **at least two** of them.\\n- A **recursive** version of this challenge can be found via this [link](https://edabit.com/challenge/aBm55e7eoE8zYkgo5).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"/** \\n====================================== \\nTestGen 3.1 for JUnit 4.13.0 \\t\\t\\nTest Case: NumberSeries::isConsecutive \\nTimestamp: 11/13/2020 7:08:31 AM \\n-------------------------------------- \\n® DARKKO 2020 © \\n======================================\\n**/ \\n\\nimport static org.junit.Assert.assertEquals; \\nimport org.junit.Test; \\n\\npublic class NumberSeriesTest {\\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertEquals(true, NumberSeries.isConsecutive(\\\"123124125\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertEquals(true, NumberSeries.isConsecutive(\\\"121314151617\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertEquals(true, NumberSeries.isConsecutive(\\\"667666\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertEquals(true, NumberSeries.isConsecutive(\\\"23242526\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertEquals(true, NumberSeries.isConsecutive(\\\"444445\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertEquals(true, NumberSeries.isConsecutive(\\\"1234567\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertEquals(true, NumberSeries.isConsecutive(\\\"123412351236\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertEquals(true, NumberSeries.isConsecutive(\\\"57585960616263\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test09() { \\n\\t\\tassertEquals(true, NumberSeries.isConsecutive(\\\"500001500002500003\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() { \\n\\t\\tassertEquals(true, NumberSeries.isConsecutive(\\\"919920921\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test11() { \\n\\t\\tassertEquals(true, NumberSeries.isConsecutive(\\\"12341235123612371238\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test12() { \\n\\t\\tassertEquals(true, NumberSeries.isConsecutive(\\\"326325324323\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test13() { \\n\\t\\tassertEquals(true, NumberSeries.isConsecutive(\\\"54321\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test14() { \\n\\t\\tassertEquals(true, NumberSeries.isConsecutive(\\\"56555453\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test15() { \\n\\t\\tassertEquals(false, NumberSeries.isConsecutive(\\\"32332432536\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test16() { \\n\\t\\tassertEquals(false, NumberSeries.isConsecutive(\\\"2324256\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test17() { \\n\\t\\tassertEquals(false, NumberSeries.isConsecutive(\\\"1235\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test18() { \\n\\t\\tassertEquals(false, NumberSeries.isConsecutive(\\\"121316\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test19() { \\n\\t\\tassertEquals(false, NumberSeries.isConsecutive(\\\"12131213\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test20() { \\n\\t\\tassertEquals(false, NumberSeries.isConsecutive(\\\"90090190290\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test21() { \\n\\t\\tassertEquals(false, NumberSeries.isConsecutive(\\\"35236237238\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test22() { \\n\\t\\tassertEquals(false, NumberSeries.isConsecutive(\\\"999897959493\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test23() { \\n\\t\\tassertEquals(false, NumberSeries.isConsecutive(\\\"171615141312119\\\"));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test24() { \\n\\t\\tassertEquals(false, NumberSeries.isConsecutive(\\\"1716171819181920\\\"));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test25() { \\n\\t\\tassertEquals(false, NumberSeries.isConsecutive(\\\"273274273274\\\"));\\n\\t}\\n}\\n// end of tests\",\"language\":\"java\",\"quality\":0,\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,3,4,2,3,3,3,5,5,5,3,4,5,4,5,0,0,4,1,3,3,4,3,5,2,3,5,4,4,4,5,1],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"Es4eX2stRpyoXeC7f\",\"gXTAie79kiw28tx5u\",\"8wEPqbypKgmb6ouCx\",\"bENHjCu6YW6Ev77zy\",\"qMds9ppJy2Tn9wxEp\",\"x6YYzxnJxMhNrAvs8\",\"CQrLMPjz7gn82rySP\",\"Ym8AjbKGSJooun3nt\",\"9pqtNWrsTJdZcRbEZ\",\"dfQntx8ifmHPs6xYj\",\"nHj7SC5cnmkTApbgY\",\"Yx9tWxJaqHnzGC83X\",\"aa43A5NEipgbfvarF\",\"vRXuYYBNuHEQ29fbm\",\"LNCb5rksJLJ43L4Nw\",\"4ZDR29tQewS6AMads\",\"rhS8qXRjZcpDXkwnE\",\"GvLLKHi7NwAjutdDk\",\"nuJEgZ7vNFDrgb9HX\",\"htXCitorobtqYymjN\",\"dGJhADFMNr9is6GRP\",\"aswAjfzzoqEnnsXvT\",\"MKYW5M2WxHdMubMCF\",\"fZEKPzDEsZYxWyA3m\",\"RmzNNtGcDkrevkW8q\",\"fjnBkkZyqyX6EMWui\",\"R7PBhs5m3z2uFA2Rs\",\"uw47663LqPME8btaA\",\"KMR6vNzvSKMA2cXnK\",\"wFRLGjA56kj7xyhmv\"],\"total\":35},\"flags\":0},\"summary\":\"Write a function that will return true if a given string (divided and grouped into a size) will contain a set of consecutive numbers (regardless of orientation: whether ascending or descending), otherwise, return false.\\n\\nExamples\\nisConsecutive(\\\"121314151617\\\") ➞ true\\n// Contains a set of consecutive ascending numbers\\n// if grouped into 2's : 12, 13, 14, 15, 16,\",\"tags\":[\"arrays\",\"loops\",\"numbers\",\"sorting\",\"validation\"],\"timestamp\":{\"$date\":1605228777108},\"title\":\"Consecutive Number Series\",\"family\":[{\"_id\":\"3Xc4sz3PpyWPDw5b3\",\"language\":\"java\"},{\"_id\":\"3kqmmTPHjB67ieK3t\",\"language\":\"javascript\"},{\"_id\":\"eHwd6medMrY3QXM8k\",\"language\":\"python3\"}]}}"]