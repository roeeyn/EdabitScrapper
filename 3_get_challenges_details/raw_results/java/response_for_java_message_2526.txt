a["{\"msg\":\"result\",\"id\":\"818\",\"result\":{\"_id\":\"xCrsQ4E3qYkGvbeAw\",\"author\":\"Mateusz Mędrowski\",\"authorId\":\"hPx9H3YM8j2k94DNW\",\"code\":\"public class Challenge {\\n  public static boolean intersection(int[][] point) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":3.6923076923076925,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"P5HCLx75tNxL9a6kY\",\"instructions\":\"Write a function that takes coordinates of four points (A, B, C, D) on a two-dimensional plane and returns `true` if the segment AB intersects segment CD.\\n\\n### Examples\\n```\\nintersection(arr[0]={2, 4}, arr[1]={5, 1}, arr[2]={4, 1}, arr[3]={4, 4}) ➞ true\\n\\nintersection(arr[0]={1, 2}, arr[1]={3, 4}, arr[2]={5, 6}, arr[3]={7, 8}) ➞ false\\n\\nintersection(arr[0]={1, 1}, arr[1]={1, 7}, arr[2]={-3, 3}, arr[3]={6, 3}) ➞ true\\n```\\n\\n### Notes\\n- The given points always create two line segments.\\n- The order of the given numbers is X, Y.\\n- The numbers in the argument array can be positive or negative.\\n- This challenge isn't easy, but don't give up!\\n\\nCheck [my profile](https://edabit.com/user/hPx9H3YM8j2k94DNW) for other challenges in the series.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n  @Test\\n  public void test1() {\\n\\t\\tint[][] arr = new int[4][2];\\n\\t\\tarr[0][0] = 2;\\n\\t\\tarr[0][1] = 4;\\n\\t\\tarr[1][0] = 5;\\n\\t\\tarr[1][1] = 1;\\n\\t\\tarr[2][0] = 4;\\n\\t\\tarr[2][1] = 1;\\t\\t\\n\\t\\tarr[3][0] = 4;\\n\\t\\tarr[3][1] = 4;\\n    assertEquals(true, Challenge.intersection(arr));\\n  }\\n\\n\\t@Test\\n  public void test2() {\\t\\t\\n\\t\\tint[][] arr = new int[4][2];\\n\\t\\tarr[0][0] = 1;\\n\\t\\tarr[0][1] = 1;\\n\\t\\tarr[1][0] = 5;\\n\\t\\tarr[1][1] = 5;\\n\\t\\tarr[2][0] = 5;\\n\\t\\tarr[2][1] = 1;\\t\\t\\n\\t\\tarr[3][0] = 1;\\n\\t\\tarr[3][1] = 5;\\n    assertEquals(true, Challenge.intersection(arr));\\n  }\\n\\n\\t@Test\\n  public void test3() {\\n\\t\\tint[][] arr = new int[4][2];\\n\\t\\tarr[0][0] = -7;\\n\\t\\tarr[0][1] = 1;\\n\\t\\tarr[1][0] = -3;\\n\\t\\tarr[1][1] = 22;\\n\\t\\tarr[2][0] = 1;\\n\\t\\tarr[2][1] = 1;\\t\\t\\n\\t\\tarr[3][0] = -30;\\n\\t\\tarr[3][1] = -10;\\n    assertEquals(false, Challenge.intersection(arr));\\n  }\\n\\n\\t@Test\\n  public void test4() {\\n\\t\\tint[][] arr = new int[4][2];\\n\\t\\tarr[0][0] = 0;\\n\\t\\tarr[0][1] = 0;\\n\\t\\tarr[1][0] = -10;\\n\\t\\tarr[1][1] = -10;\\n\\t\\tarr[2][0] = 3;\\n\\t\\tarr[2][1] = -3;\\t\\t\\n\\t\\tarr[3][0] = -3;\\n\\t\\tarr[3][1] = 3;\\n    assertEquals(true, Challenge.intersection(arr));\\n  }\\n\\n\\t@Test\\n  public void test5() {\\n\\t\\tint[][] arr = new int[4][2];\\n\\t\\tarr[0][0] = 0;\\n\\t\\tarr[0][1] = 1;\\n\\t\\tarr[1][0] = 3;\\n\\t\\tarr[1][1] = 6;\\n\\t\\tarr[2][0] = 1;\\n\\t\\tarr[2][1] = 1;\\t\\t\\n\\t\\tarr[3][0] = 5;\\n\\t\\tarr[3][1] = 5;\\n    assertEquals(false, Challenge.intersection(arr));\\n  }\\n\\n\\t@Test\\n  public void test6() {\\n\\t\\tint[][] arr = new int[4][2];\\n\\t\\tarr[0][0] = 2;\\n\\t\\tarr[0][1] = 1;\\n\\t\\tarr[1][0] = 2;\\n\\t\\tarr[1][1] = 7;\\n\\t\\tarr[2][0] = -1;\\n\\t\\tarr[2][1] = 3;\\t\\t\\n\\t\\tarr[3][0] = 6;\\n\\t\\tarr[3][1] = 3;\\n    assertEquals(true, Challenge.intersection(arr));\\n  }\\n\\n\\t@Test\\n  public void test7() {\\n\\t\\tint[][] arr = new int[4][2];\\n\\t\\tarr[0][0] = 1;\\n\\t\\tarr[0][1] = 2;\\n\\t\\tarr[1][0] = 3;\\n\\t\\tarr[1][1] = 4;\\n\\t\\tarr[2][0] = 5;\\n\\t\\tarr[2][1] = 6;\\t\\t\\n\\t\\tarr[3][0] = 7;\\n\\t\\tarr[3][1] = 8;\\n    assertEquals(false, Challenge.intersection(arr));\\n  }\\n}\",\"language\":\"java\",\"stats\":{\"completed\":{\"ratings\":[4,4,4,4,4,4,3,5,4,2,3,3,4],\"rators\":[\"hPx9H3YM8j2k94DNW\",\"azAzSkvJd7eyXY9x9\",\"Es4eX2stRpyoXeC7f\",\"ecyYaPZLMBMGGrfrJ\",\"gXTAie79kiw28tx5u\",\"rhS8qXRjZcpDXkwnE\",\"RsujLHaML6L3KinzK\",\"uw47663LqPME8btaA\"],\"total\":13,\"quality\":[]},\"flags\":0},\"summary\":\"Write a function that takes coordinates of four points (A, B, C, D) on a two-dimensional plane and returns true if the segment AB intersects segment CD.\\n\\nExamples\\nintersection(arr[0]={2, 4}, arr[1]={5, 1}, arr[2]={4, 1}, arr[3]={4, 4}) ➞ true\\n\\nintersection(arr[0]={1, 2}, arr[1]={3, 4}, arr[2]={5, 6}, arr[3]={7, 8}) ➞ false\\n\\nintersection(arr[0]={1, 1}, arr[1]={\",\"tags\":[\"algebra\",\"geometry\",\"numbers\",\"math\"],\"timestamp\":{\"$date\":1598792777544},\"title\":\"Geometry 4: Line Segments Intersection\",\"quality\":0,\"family\":[{\"_id\":\"xCrsQ4E3qYkGvbeAw\",\"language\":\"java\"}]}}"]