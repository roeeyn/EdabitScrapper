a["{\"msg\":\"result\",\"id\":\"676\",\"result\":{\"_id\":\"qRRYmmyTRBhJJNMwq\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"public class Challenge {\\n  public static boolean validWordNest(String word, String nest) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":2.622950819672131,\"familyId\":\"EAbQqeZkgna25J7Cs\",\"instructions\":\"A word nest is created by taking a starting word, and generating a new string by placing the word inside itself. This process is then repeated.\\n\\nNesting 3 times with the word \\\"incredible\\\":\\n\\n```\\nstart  = incredible\\nfirst  = incre(incredible)dible\\nsecond = increin(incredible)credibledible\\nthird  = increinincr(incredible)ediblecredibledible\\n```\\n\\nThe final nest is `increinincrincredibleediblecredibledible` (depth = 3)\\n\\nValid word nests can always be *collapsed* to show the starting word, by reversing the process above:\\n\\n```\\nword = \\\"incredible\\\"\\nnest = \\\"increinincrincredibleediblecredibledible\\\"\\n\\nSteps:\\n=> \\\"increinincrincredibleediblecredibledible\\\" // starting nest\\n=> \\\"increinincr(incredible)ediblecredibledible\\\" // find word in nest\\n=> \\\"increinincr            ediblecredibledible\\\" // remove word\\n=> \\\"increinincrediblecredibledible\\\" // join remaining halves\\n=> \\\"increin(incredible)credibledible\\\" // find word in nest...\\n\\n... repeat steps until single word remains\\n\\n=> \\\"incredible\\\" (return true as \\\"incredible\\\" = word)\\n```\\n\\nWhen *in*valid word nests are collapsed, the starting word isn't found:\\n\\n```\\nword = \\\"spring\\\"\\nnest = \\\"sprspspspringringringg\\\"\\n\\nSteps:\\n=> \\\"sprspspspringringringg\\\" // starting nest\\n=> \\\"sprspsp(spring)ringringg\\\" // find word in nest\\n=> \\\"sprspsp        ringringg\\\" // remove word\\n=> \\\"sprspspringringg\\\" // join remaining halves\\n=> \\\"sprsp(spring)ringg\\\" // find word in nest...\\n\\n... repeat steps until single word remains\\n\\n=> \\\"sprg\\\" (return false as \\\"sprig\\\" != \\\"spring\\\")\\n```\\n\\nGiven a *starting word* and a *final word nest*, return `true` if the word nest is valid. Return `false` otherwise.\\n\\n### Examples\\n```\\nvalidWordNest(\\\"deep\\\", \\\"deep\\\") ➞ true\\n\\nvalidWordNest(\\\"novel\\\", \\\"nonnonovnovnovelelelvelovelvel\\\") ➞ true\\n\\nvalidWordNest(\\\"painter\\\", \\\"ppaintppapaipainterinternteraintererainter\\\") ➞ false\\n// Doesn't show starting word after being collapsed.\\n\\nvalidWordNest(\\\"shape\\\", \\\"sssshapeshapehahapehpeape\\\") ➞ false\\n// Word placed outside, not inside itself.\\n```\\n\\n### Notes\\nValid word nests can only be created by repeatedly placing the word inside *itself*, so at any point when collapsing the nest, there should only be *one* instance of the word to be found.\",\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n  @Test\\n  public void test1() {\\n    assertEquals(false, Challenge.validWordNest(\\\"redeem\\\", \\\"rederedredrredredrerrrederedeememedeemedeemedeeemeemmedeemeemeemem\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test2() {\\n    assertEquals(true, Challenge.validWordNest(\\\"survey\\\", \\\"sursursurvsurvssurssursusurveyrveyveyurveyveyurveyeyeyveyvey\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test3() {\\n    assertEquals(false, Challenge.validWordNest(\\\"sensation\\\", \\\"sensatissenssensastssenensensasenssensensensationsationsationationtionsationatioionantionensationon\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test4() {\\n    assertEquals(false, Challenge.validWordNest(\\\"feed\\\", \\\"feefeeded\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test5() {\\n    assertEquals(true, Challenge.validWordNest(\\\"station\\\", \\\"ststatstasstatistationontationtionionation\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test6() {\\n    assertEquals(false, Challenge.validWordNest(\\\"quarrel\\\", \\\"quaquarrquarrelrerell\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test7() {\\n    assertEquals(false, Challenge.validWordNest(\\\"broadcast\\\", \\\"broadcbroadcastbroadcastast\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test8() {\\n    assertEquals(true, Challenge.validWordNest(\\\"current\\\", \\\"currccurrcurcurrcucucurrentrrentrrententrententurrentent\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test9() {\\n    assertEquals(true, Challenge.validWordNest(\\\"diet\\\", \\\"diet\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test10() {\\n    assertEquals(false, Challenge.validWordNest(\\\"park\\\", \\\"pppappappapapapapparkarkarkrkrkrkrkkarkrkrarkark\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test11() {\\n    assertEquals(true, Challenge.validWordNest(\\\"undermine\\\", \\\"undermiundermundermiunununderundermineminederminedermineneinene\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test12() {\\n    assertEquals(false, Challenge.validWordNest(\\\"nail\\\", \\\"nannnailnailailil\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test13() {\\n    assertEquals(true, Challenge.validWordNest(\\\"show\\\", \\\"sshssshowhowhowowhow\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test14() {\\n    assertEquals(false, Challenge.validWordNest(\\\"demand\\\", \\\"dedemdeamademademandndndmandnd\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test15() {\\n    assertEquals(true, Challenge.validWordNest(\\\"publicity\\\", \\\"publicppublicityublicityity\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test16() {\\n    assertEquals(false, Challenge.validWordNest(\\\"relief\\\", \\\"rrerelirerreerrereliefliefelielifliefliefefliefelfeief\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test17() {\\n    assertEquals(true, Challenge.validWordNest(\\\"pipe\\\", \\\"ppppppipeipeipeipeipeipe\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test18() {\\n    assertEquals(false, Challenge.validWordNest(\\\"diagram\\\", \\\"diargdiadidiadiagramgramagramgramam\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test19() {\\n    assertEquals(true, Challenge.validWordNest(\\\"salt\\\", \\\"ssaltalt\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test20() {\\n    assertEquals(true, Challenge.validWordNest(\\\"pioneer\\\", \\\"pionpippipioppionpiopipioneeroneerneereerioneerneeroneerioneeroneereer\\\"));\\n  }\\n}\",\"language\":\"java\",\"summary\":\"A word nest is created by taking a starting word, and generating a new string by placing the word inside itself. This process is then repeated.\\n\\nNesting 3 times with the word \\\"incredible\\\":\\n\\nstart  = incredible\\nfirst  = incre(incredible)dible\\nsecond = increin(incredible)credibledible\\nthird  = increinincr(incredible)ediblecredibledible\\n\\nThe final nest is increin\",\"tags\":[\"conditions\",\"strings\",\"language_fundamentals\",\"regex\"],\"timestamp\":{\"$date\":1568755022843},\"title\":\"Word Nests (Part 2)\",\"stats\":{\"completed\":{\"total\":87,\"ratings\":[3,3,3,3,3,2,2,4,3,2,3,5,1,2,3,2,0,4,3,4,1,1,3,0,2,1,2,3,4,3,2,2,2,4,4,3,2,1,3,2,3,4,0,0,4,3,3,3,2,3,3,3,4,3,2,3,4,4,4,4,1],\"rators\":[\"6qyzL2iceT8a7bos4\",\"sxci7DYKNa6q22Sjq\",\"YF79LnTdprobbYY5v\",\"CYt2jTCEuK9dYWruk\",\"Prw5Jq38wrSoj5QSF\",\"Es4eX2stRpyoXeC7f\",\"AyrEvM2GLX2jqM772\",\"rehehi2Tr2mwaEoJE\",\"2PR653L4KSN97r534\",\"TrquEHytntLKHA4m2\",\"62Q2HcfLE6SGphZkT\",\"pBMXMQem6BpSeooYT\",\"jyoLggHk8xQKZuoQC\",\"dpJTai3i9aNkCS3sa\",\"csRoCgJx5NBJzW8pX\",\"45FXSeKSLChn3gEhc\",\"DkSMZ3jZLkwviKb9g\",\"htXCitorobtqYymjN\",\"PP5orY9GrRyMfeFar\",\"zbGJGwm2a7un8F5T5\",\"k63LjKkX5p7SYng7C\",\"5WQZzuHZBGqFeNQi3\",\"p8GG63nLD3YhQW564\",\"XTuxCoKrN9DZ7zaQx\",\"NzJKK8Cuf3bcqZfcw\",\"AxWLAsQ9dKQTeSvA5\",\"z6unNHGqyaP8ErxhD\",\"GamaMNrnhrjj5tXTx\",\"AcZdvmSFKyRN6EJQs\",\"mGaEDPw5FsDb3vdnq\",\"rwETZ6XCNoHCEyB66\",\"etoSR23iELGGgs9rA\",\"jRqY4i8gPemsZMBGf\",\"rWhXHhzF4W8bea6LP\",\"NsbHPeWBtAonYNXZc\",\"bjKYBdDcGMRTfooBs\",\"urckS99caSjRxPBvp\",\"HfHX644FWoTbifSCX\",\"LMnE5zLgJjsdMfay7\",\"CgzTCoqqyWMWxvoTE\",\"2xFvy6u3hE4LtCXMD\",\"Ym8AjbKGSJooun3nt\",\"gXTAie79kiw28tx5u\",\"eBgN48uPauTRcPpRb\",\"a5Y8ZA5qq2eupPK65\",\"bTCq6CQ3SGjrRfZeQ\",\"qMds9ppJy2Tn9wxEp\",\"dcW9oK2uRo8h8mBe2\",\"ofp27oRTiTbr2hMkD\",\"2g9DndhBotcaKDiFD\",\"kjFTyZ3MYQZ8enFmF\",\"2CLvCKwQvRQC8NHXp\",\"fRhyffuFFdj8dmJwX\",\"3mqwov5TxpQY3Xcb8\",\"zyHHSisus2MpibGkG\",\"p2woPCQKXuWJCwffJ\",\"9pCPyhvQmbkWyD2LL\",\"zHSbLcbw8Z8WcFaba\",\"MBB7P2iY7QWp3MuoM\",\"f65u9DTbnLnBQsWRu\",\"26S7LH2wXiJS2NzZ3\",\"XZXmHE7uyz9a2zJdo\",\"4pagg6vw2Cjepv7tN\",\"oGqs9g6LG6FMJC8Xr\",\"F7fpKheAPBLvLMDGq\",\"mDWNyaaQ9hvPCRzSd\",\"QKZ2SSsMqQtCDiCaM\",\"hnBH8gJ5QSdziMvsS\",\"Z5yx2PADNWHXWkq48\",\"ptdqCGzsYYs7hW234\",\"cqLEjfmmutsrc6KXZ\",\"gHgkBXvMy2EjdEyks\",\"JqgosFnie7japkhdy\",\"CynMXzHWwsoEJi4QK\",\"qaPjAANdnxFnWfj5d\",\"zJd7kXrCNtS5kcmKf\",\"KMR6vNzvSKMA2cXnK\",\"uw47663LqPME8btaA\"],\"quality\":[3,3,3,2,4,3,5,3,4,4,4,5,4,5,5,4,4,5,3,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"isHidden\":false,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":4,\"family\":[{\"_id\":\"MJRsKyhL9MTNCmrXi\",\"language\":\"cpp\"},{\"_id\":\"qRRYmmyTRBhJJNMwq\",\"language\":\"java\"},{\"_id\":\"nm5jyuTK9KdgtYEjJ\",\"language\":\"javascript\"},{\"_id\":\"ZwmfET5azpvBTWoQT\",\"language\":\"python3\"},{\"_id\":\"sM4LWbKsjCrdEfKRC\",\"language\":\"ruby\"}]}}"]