a["{\"msg\":\"result\",\"id\":\"253\",\"result\":{\"_id\":\"YjeGKZwXsdCo3sr7a\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"public class Challenge {\\n  public static boolean isBetween(String first, String last, String word) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":1.1209302325581396,\"familyId\":\"Bv2SHvBWJ6usGhKJu\",\"instructions\":\"Write a function that takes three string arguments (`first`, `last`, and `word`) and returns `true` if `word` is found between `first` and `last` in the dictionary, otherwise `false`.\\n\\n### Examples\\n```\\nisBetween(\\\"apple\\\", \\\"banana\\\", \\\"azure\\\") ➞ true\\n\\nisBetween(\\\"monk\\\", \\\"monument\\\", \\\"monkey\\\") ➞ true\\n\\nisBetween(\\\"bookend\\\", \\\"boolean\\\", \\\"boost\\\") ➞ false\\n```\\n\\n### Notes\\n- All letters will be in lowercase.\\n- All three words will be different.\\n- Remember that the string `word` is in the middle.\",\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n  @Test\\n  public void test1() {\\n    assertEquals(true, Challenge.isBetween(\\\"apple\\\", \\\"banana\\\", \\\"azure\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test2() {\\n    assertEquals(true, Challenge.isBetween(\\\"bookcase\\\", \\\"zebra\\\", \\\"squid\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test3() {\\n    assertEquals(true, Challenge.isBetween(\\\"shrapnel\\\", \\\"tapenade\\\", \\\"tally\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test4() {\\n    assertEquals(true, Challenge.isBetween(\\\"monk\\\", \\\"monument\\\", \\\"monkey\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test5() {\\n    assertEquals(true, Challenge.isBetween(\\\"oath\\\", \\\"ostrich\\\", \\\"osteoporosis\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test6() {\\n    assertEquals(false, Challenge.isBetween(\\\"ostracize\\\", \\\"ostrich\\\", \\\"open\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test7() {\\n    assertEquals(false, Challenge.isBetween(\\\"bookend\\\", \\\"boolean\\\", \\\"boost\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test8() {\\n    assertEquals(false, Challenge.isBetween(\\\"tamer\\\", \\\"tanner\\\", \\\"timid\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test9() {\\n    assertEquals(false, Challenge.isBetween(\\\"rhino\\\", \\\"sorcerer\\\", \\\"quote\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test10() {\\n    assertEquals(false, Challenge.isBetween(\\\"body\\\", \\\"lung\\\", \\\"ace\\\"));\\n  }\\n}\",\"language\":\"java\",\"summary\":\"Write a function that takes three string arguments (first, last, and word) and returns true if word is found between first and last in the dictionary, otherwise false.\\n\\nExamples\\nisBetween(\\\"apple\\\", \\\"banana\\\", \\\"azure\\\") ➞ true\\n\\nisBetween(\\\"monk\\\", \\\"monument\\\", \\\"monkey\\\") ➞ true\\n\\nisBetween(\\\"bookend\\\", \\\"boolean\\\", \\\"boost\\\") ➞ false\\n\\nNotes\\nAll letters will be in lowercase.\",\"tags\":[\"strings\",\"validation\"],\"timestamp\":{\"$date\":1567970025568},\"title\":\"Between Words\",\"stats\":{\"completed\":{\"total\":266,\"ratings\":[1,1,1,1,1,0,0,1,0,0,3,1,1,0,1,0,0,0,2,0,1,2,0,1,1,1,1,2,1,2,1,2,0,1,1,1,2,1,0,1,1,1,2,1,2,1,1,0,1,1,0,0,1,3,1,1,2,2,2,0,1,2,1,1,2,2,1,2,2,2,1,1,2,1,1,0,1,1,2,0,0,1,1,2,1,2,0,1,0,1,3,1,0,1,1,2,0,1,0,1,2,1,1,1,1,1,1,1,0,1,2,1,1,1,1,2,0,1,2,2,1,1,2,1,1,0,4,2,1,1,0,0,2,2,1,0,2,2,0,1,2,1,1,5,2,0,0,1,1,2,0,0,1,0,2,1,1,1,0,1,2,2,0,2,1,2,2,1,2,1,0,4,2,2,1,1,1,2,1,1,1,1,1,1,0,1,1,1,0,2,0,0,1,1,1,2,1,3,3,2,1,1,1,0,2,1,1,1,1,1,1,1,1,1,1],\"rators\":[\"vRXuYYBNuHEQ29fbm\",\"FocLpCB2WEiK2gGni\",\"3pdgguqZgNDSAJSGm\",\"sxci7DYKNa6q22Sjq\",\"Yohr2MmAyaWGMbB35\",\"tPiqFhegMK4F6X7PG\",\"9c8n7ti5vCjTRgiGN\",\"h7R7HQfnAWjPtRF3S\",\"t2kdBPj9qQAXY2Ehd\",\"HTdEyxtkq87EJN2Aw\",\"3gxJoNp59B4eoyyed\",\"ZBDiEMi7dbjRL55LB\",\"a49eNnfRwSMxsDJXf\",\"NCB3RaRBonefnHBJD\",\"pr4Cm4A369tC9gSeT\",\"5TaPWyRv9DZWWodp8\",\"3KjxQu9RZ8ZSywvLz\",\"TtHL4YeiDJx7ZtxrX\",\"XbBsZ7vSHdw88tibi\",\"CLmJduqJHX83dM4Pd\",\"XxjcJwWmq5pnXzGWb\",\"gEDfJT44yS7kqPaXc\",\"ibMMTukRMaT6NgixP\",\"FAEfq35fCKotwhHe6\",\"qp2WN8enrc3JaepdK\",\"nMwFZCM5vT2BGvatN\",\"BEZ9EWC4mzkN3GbAA\",\"XPABiA5rmJcEZujY3\",\"PXBjtEAAwibHxNZXq\",\"Rn6wkbCdHukJNFEAN\",\"CHWjZ3SMX8vj3Hrji\",\"ZBtvCuTXbHPa3Rq7L\",\"zh9GGSpmAnDvdARMv\",\"7fjsAnXYp3ckDAKfT\",\"EWFgr2v9oDE3orajD\",\"8JyqsSbN2FJXPr3cw\",\"qgc3hgPcSduWfwkSj\",\"7LzbahrBpunnAMg4M\",\"meLtzRvTjC6nLS8ak\",\"Mo2E9GXLcRX6pHtka\",\"toZsDEaLL7ptnFskQ\",\"sMoo87fGCqa9JHBCv\",\"CPgJteAqYJ2n9idPw\",\"qJZsi5rhRnWA38FbA\",\"zEyuuC3c4NMtAc792\",\"GgxxSd7k4CLfzkFMH\",\"NDTZaKXq4GRncgs3J\",\"SwfCRPtZdPZendiP7\",\"Md3zwe6ZCp4vqdx5j\",\"AzERMCwmKzy5zXJ3S\",\"gBGjCfJvPHswDM5JQ\",\"ZDbtCzQttEPCTwkTR\",\"C9yBWYcZsjmJYww3K\",\"JMh7pkAJMA3P5B9uu\",\"J9zJq7PMGb6mqzcHW\",\"gp77RykRkHQtqbE9C\",\"NrSqKXXpaus7PGdiy\",\"eZjHwgBfkQPCxmutr\",\"Z988BnMH9vd8epArK\",\"fZjkX29nhRTWWb75k\",\"3HPMi9FCqRr8oxYvg\",\"YLwJkF2wuL3n9o6a2\",\"EdX9XJTJjEDaqPDfp\",\"beMToQrzmKgTJ3LZK\",\"i5QeAsrM4m6hzPTku\",\"XPhLf7JYc6mmBYR9A\",\"5RcAXjQAbqQtWppy6\",\"fZky27mpbfX7soJKa\",\"ko7oJ85JMftgcbkrr\",\"EZNT8B7yQnnZmuwCf\",\"uqNAu5PZnSDRqZKoN\",\"WuAkXKpcrQy867yCw\",\"Es4eX2stRpyoXeC7f\",\"we4DCPstpD5urDitR\",\"j2hKJg9sh9m3HWFgo\",\"oeEDPQaCwHFFXsrny\",\"gGnDsJz5hr2t9MKCF\",\"KXYHpCQvmTtpbGXYg\",\"PgSrAtgBYoKNgYJtS\",\"DzvdGwHEjqsX7wyKr\",\"5Kf9z3G9QBs9fkvLs\",\"fbYN9Jp46RqBqCd2K\",\"gJbvbqosimaP4ZAYb\",\"Qy32edSg4rrbh5ftf\",\"chyo75yA6YBfW56yT\",\"eWaq9hCBYq4oQYgEx\",\"ye5Krzmpgt8keXCnx\",\"wYYMNPe8nSiJFbvJw\",\"v8RN8p2B6xdebkXAY\",\"feubnquqgyoq3sa3Q\",\"rTj67TTydxqkpwFtN\",\"mdEQJ2fmGmkbhbvNw\",\"yv7c4H2jimSKHEjtG\",\"YFHkjbM6obMSj24zi\",\"dYx4nRm7ynaYSgrxK\",\"Q7G4XPerEfYpTDsfq\",\"cGebawowzCKcFn8gq\",\"82weQfHHmno4Mq4X7\",\"Zvu2nty8qKdBDBvM4\",\"Kso7rzAKB4TTCPKgM\",\"aGmi6SaZpcYsu5MQb\",\"hgR55DYN6zxHXNeRb\",\"jDTGwryGygbZiqCEg\",\"bw6kHP3k8dP2qBa5v\",\"GvsEKiN8yRkosS28k\",\"Tny2huW47YzTrtyaA\",\"LZSxphM8vH4A6Deqn\",\"GEzaJZ2cPjENT4ERQ\",\"etoSR23iELGGgs9rA\",\"hB5mgzMwQSnhBzi7P\",\"5seiNqw6ZXoF2GRRd\",\"jyoLggHk8xQKZuoQC\",\"DzLdw6wEL2Nt5mrsp\",\"8SabHk4meXzHQWaLb\",\"AfMFW7KGW22bHWuuz\",\"88AG6f3H4vFEKXdJi\",\"iq55QasecYJXKz8rx\",\"8zZ6xmzpiFair25qr\",\"Yp7uvStL97cC9fKkY\",\"tqSJxy6E4vaTyECkh\",\"B4pxRqzo43M7S8FbP\",\"uwkPQ7ZYQyyg6Qyre\",\"WZujpe8yQAyZmpWHg\",\"TrquEHytntLKHA4m2\",\"meS77LKqRswhF5LAy\",\"htXCitorobtqYymjN\",\"5CqetHYvJ5Zb2uzmB\",\"DkSMZ3jZLkwviKb9g\",\"EcKPDmD4GmeFJGDTL\",\"q2tzvkrLASvSjkek9\",\"Zhy5X7BZnqk8hacEw\",\"QXkrEiAuhuXaZmL4C\",\"GEDsDpNX4QMhZAxtJ\",\"g4NCSxxHqHCGMpWwT\",\"muXMnzQwGLzN6j2Jr\",\"ZMd8it647JSYTvx8Z\",\"osXNzc2aCxspRwheS\",\"myPiB7Efg4e8kLtkx\",\"ZiN6yB9rACMaYgseC\",\"RhPg33AdzvSZmibXa\",\"f6uGKbmMdBYCjrMBh\",\"AeJSxRqw2dJZuGvdk\",\"uqnjMLLae4heAZNNe\",\"hPx9H3YM8j2k94DNW\",\"Fd9765rksgPK4E2Zy\",\"ZXWDtCrM9ev3439oi\",\"KxLMWekCxzy2Eem7u\",\"7Wq4ZNz5c3irDR6br\",\"QqTP27sC79gmiQdzS\",\"fRYcPHuyEdqngMzC4\",\"yXGiiSAR5nBHnH3yr\",\"rvojHhKH3DaxotefQ\",\"xv5obFhsxY93mqR5S\",\"NjnPrCrnMkqYTjK2Y\",\"yd5PakB2z33q2JrTZ\",\"RLpAS54SrhbbZFTwq\",\"pi76g3eRpnKrhee2a\",\"ygmKmjF4ja52BrNMR\",\"qTXNwXBDtH3j6t7hw\",\"bjKYBdDcGMRTfooBs\",\"n5wubRfh6zh8QRymN\",\"2ZyE8mq3cJWTWSH8v\",\"ekQh3jzgGLsEMbKo3\",\"ZgW8KbHPhP2ziczLd\",\"SfmXqCfDksMb883DC\",\"azAzSkvJd7eyXY9x9\",\"a777e8chPvJkY3tKa\",\"hx3ZWiCKNtqwMWFCt\",\"9Ku6sRqCoMNxXHFha\",\"J7epB3qSQJ2E8vWkY\",\"TCTZucJN3tJh5t7MB\",\"6ehQMeGtrhnhot5zK\",\"gXTAie79kiw28tx5u\",\"7F3i3uNDxhZM6mckM\",\"uPQisxgE6sgg65Ymo\",\"32uy2LgegdmLGpebX\",\"7gBLtxKryhTryH5zb\",\"QKwzvqWHTffHsNPu6\",\"THTnW75kBggw2qqta\",\"NdLzb3BZ5J8ftnCkS\",\"cJmmvnmJSXvBXtydi\",\"PmfzvaX5ZJscpvHXc\",\"oMfq73A434YWhSuWQ\",\"mG8HqKiAQFTdRZthG\",\"cueHAmTrcWuowXf58\",\"Tf7TJFSPktJBgLA4k\",\"8Xx8nWXRydHDBGfQf\",\"tyLS9T6YMfg9fMtYJ\",\"Ym8AjbKGSJooun3nt\",\"eyvHBQ3fpSHwKniZP\",\"gGa78GqXuPgmhqaGo\",\"zTM2NbjE6q5Q2HSeF\",\"8wkQj36S6ZCH5u8d3\",\"c2JD4t5wsGyucJXrd\",\"CNc6rmwhbxkxEhHAp\",\"ikxSkiQjCjYPsFwMT\",\"mQKWauR6b252TmdX4\",\"uNK8tLSseShR8wcA4\",\"3EfDGZ9Sgz5zxzD7a\",\"47PyFbZyxWuP9Bgga\",\"m8RTLuXqmythXHYZt\",\"LrgQT4bdiLbHrprXu\",\"W56bWmpQeLJ9JEDsa\",\"5jDgvkGd4JwatrYXg\",\"uFfEio8nzDvL8emhp\",\"2cdvd8yuPLSwvGj9w\",\"RGN3QTb5LXj4ZPPkj\",\"LCuvvWMwiGuqTwNRi\",\"Wi4H6ayKsNDWWQCG5\",\"3SgSNoAB3sxaYeT3w\",\"c7uBxu2rgY77H5d79\",\"f3RAbWvE6uESq7KE5\",\"E2hpke7mHxAWsw5t9\",\"GkYtSbQuheBF4Enys\",\"QRv96jmNaYsWkxQEG\",\"zZfMwLuoERGmybgib\",\"buX4mCQhtXCfBjeno\",\"hhxjQREtmHSheH9Pj\",\"eQXwk5zGckM8tCWYH\",\"W3R9x6BDF6mQeYHrL\",\"btabi3PdyisuY5tn9\",\"8qNSPHZBpmjSTt3tH\",\"a6fgDQTddtZCKfnzR\",\"xEX3TDY6C2h82dJTn\",\"4ySzqKC5s3ZRpG9di\",\"d7PjwEf5Ff8W5eD64\",\"nXw9eTHFraWQtwJtY\",\"SgPjF69J25jT3dn4X\",\"tdinF6MRzC6AdNX8g\",\"nAuhwzeaxm62fF6Mi\",\"rhS8qXRjZcpDXkwnE\",\"pYonfGP4u9HNL9Z32\",\"XaK5PzFcConAq9WXJ\",\"uw47663LqPME8btaA\",\"srJ34BaybkQh3qRkM\",\"cR3ibTMxLyEdDFCHY\",\"jCjCvyhqhpebkJn34\",\"KMR6vNzvSKMA2cXnK\",\"WX5hR93N7nA2kMsJN\",\"FNYPC36yqPmTKDaqR\",\"f6CBJntX2RFd2zAjR\",\"unqzSsxpxj9sZ7rbD\",\"nSLvkGEpiYCtcBLaa\",\"ckQwFFWyLXmDQAaCn\",\"H3XLNCWB5yXt5YYXn\",\"5HGyJtoZ3AffzAZAv\",\"nFbmNzMQ38TncmfQX\"],\"quality\":[5,5,5,4,5,5,4,5,5,5,5,5,5,5,5,4,5,5,5,5,5,5,5,5,3,5,5,5,5,5,5,5,5,5,3,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.8108108108108105,\"family\":[{\"_id\":\"jAPSpcAJNcJigrTWJ\",\"language\":\"cpp\"},{\"_id\":\"XofGbRFcoGqRv9gda\",\"language\":\"csharp\"},{\"_id\":\"YjeGKZwXsdCo3sr7a\",\"language\":\"java\"},{\"_id\":\"j63YSGGK9xoLiXCKF\",\"language\":\"javascript\"},{\"_id\":\"NtJioPEo2Xy4r8KGb\",\"language\":\"php\"},{\"_id\":\"X9o2kweQFsSRXGh2c\",\"language\":\"python3\"},{\"_id\":\"vuw5ZjYaGtuXCCoZo\",\"language\":\"ruby\"},{\"_id\":\"gPd7e3tq2iTjjzL3y\",\"language\":\"swift\"}]}}"]