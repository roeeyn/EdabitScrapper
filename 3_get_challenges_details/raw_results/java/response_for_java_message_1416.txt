a["{\"msg\":\"result\",\"id\":\"268\",\"result\":{\"_id\":\"FQPo8iZ8vuPEj2dKB\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"public class Challenge {\\n\\tpublic static int halveCount(int a, int b) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":1.1295336787564767,\"familyId\":\"g7ZkuvvMTuFP3K765\",\"instructions\":\"Given two integers `a` and `b`, return how many times `a` can be **halved** while still being greater than `b`.\\n\\n### Examples\\n```\\nhalveCount(1324, 98) ➞ 3\\n// (1324 -> 662 -> 331 -> 165.5)\\n\\nhalveCount(624, 8) ➞ 6\\n// (624 -> 312 -> 156 -> 78 -> 39 -> 19.5 -> 9.75)\\n\\nhalveCount(1000, 3) ➞ 8\\n// (1000 -> 500 -> 250 -> 125 -> 62.5 -> 31.25 -> 15.625 -> 7.8125 -> 3.90625)\\n```\\n\\n### Notes\\nInteger `a` will always be able to be halved at least once in every test case.\",\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n  @Test\\n  public void test1() {\\n    assertEquals(8, Challenge.halveCount(1891, 4));\\n  }\\n\\t\\n\\t@Test\\n  public void test2() {\\n    assertEquals(6, Challenge.halveCount(1756, 14));\\n  }\\n\\t\\n\\t@Test\\n  public void test3() {\\n    assertEquals(11, Challenge.halveCount(7764, 2));\\n  }\\n\\t\\n\\t@Test\\n  public void test4() {\\n    assertEquals(4, Challenge.halveCount(1118, 47));\\n  }\\n\\t\\n\\t@Test\\n  public void test5() {\\n    assertEquals(1, Challenge.halveCount(161, 79));\\n  }\\n\\t\\n\\t@Test\\n  public void test6() {\\n    assertEquals(7, Challenge.halveCount(8573, 35));\\n  }\\n\\t\\n\\t@Test\\n  public void test7() {\\n    assertEquals(12, Challenge.halveCount(4123, 1));\\n  }\\n\\t\\n\\t@Test\\n  public void test8() {\\n    assertEquals(4, Challenge.halveCount(1348, 60));\\n  }\\n\\t\\n\\t@Test\\n  public void test9() {\\n    assertEquals(7, Challenge.halveCount(7549, 31));\\n  }\\n\\t\\n\\t@Test\\n  public void test10() {\\n    assertEquals(9, Challenge.halveCount(4469, 5));\\n  }\\n\\t\\n\\t@Test\\n  public void test11() {\\n    assertEquals(3, Challenge.halveCount(1123, 98));\\n  }\\n\\t\\n\\t@Test\\n  public void test12() {\\n    assertEquals(6, Challenge.halveCount(8197, 85));\\n  }\\n\\t\\n\\t@Test\\n  public void test13() {\\n    assertEquals(4, Challenge.halveCount(1199, 56));\\n  }\\n\\t\\n\\t@Test\\n  public void test14() {\\n    assertEquals(11, Challenge.halveCount(8845, 4));\\n  }\\n\\t\\n\\t@Test\\n  public void test15() {\\n    assertEquals(3, Challenge.halveCount(606, 67));\\n  }\\n\\t\\n\\t@Test\\n  public void test16() {\\n    assertEquals(9, Challenge.halveCount(3375, 6));\\n  }\\n\\t\\n\\t@Test\\n  public void test17() {\\n    assertEquals(9, Challenge.halveCount(7085, 10));\\n  }\\n\\t\\n\\t@Test\\n  public void test18() {\\n    assertEquals(5, Challenge.halveCount(299, 5));\\n  }\\n\\t\\n\\t@Test\\n  public void test19() {\\n    assertEquals(3, Challenge.halveCount(1208, 82));\\n  }\\n\\t\\n\\t@Test\\n  public void test20() {\\n    assertEquals(5, Challenge.halveCount(3635, 73));\\n  }\\n\\t\\n\\t@Test\\n  public void test21() {\\n    assertEquals(9, Challenge.halveCount(2382, 3));\\n  }\\n\\t\\n\\t@Test\\n  public void test22() {\\n    assertEquals(1, Challenge.halveCount(320, 80));\\n  }\\n}\",\"language\":\"java\",\"summary\":\"Given two integers a and b, return how many times a can be halved while still being greater than b.\\n\\nExamples\\nhalveCount(1324, 98) ➞ 3\\n// (1324 -> 662 -> 331 -> 165.5)\\n\\nhalveCount(624, 8) ➞ 6\\n// (624 -> 312 -> 156 -> 78 -> 39 -> 19.5 -> 9.75)\\n\\nhalveCount(1000, 3) ➞ 8\\n// (1000 -> 500 -> 250 -> 125 -> 62.5 -> 31.25 -> 15.625 -> 7.8125 -> 3.90625)\\n\\nNotes\\nInteger\",\"tags\":[\"math\",\"numbers\"],\"timestamp\":{\"$date\":1567981346562},\"title\":\"Halve and Halve Again\",\"stats\":{\"completed\":{\"total\":232,\"ratings\":[1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,0,0,0,2,0,2,1,2,2,1,1,1,2,1,2,1,1,2,1,1,1,2,1,1,1,2,0,1,0,0,2,0,1,2,0,1,1,2,0,1,2,1,2,2,1,3,1,0,1,2,1,0,1,2,4,1,1,1,2,1,0,1,1,1,1,1,1,1,1,2,1,1,2,2,1,0,1,1,2,1,2,1,2,0,0,1,1,2,2,0,1,1,1,0,0,0,2,1,1,0,3,2,1,1,0,3,1,1,1,2,1,1,2,1,1,1,0,1,1,1,0,2,2,2,0,1,1,1,0,1,5,4,1,1,1,2,0,0,1,1,2,1,0,2,2,4,2,1,1,1,2,1,1,1,0,2,1,2,1,0,0,0,1,0,1,1,1,1,2,1,2,1,2,1,1,1,2,1],\"rators\":[\"o5H3aMNucmwhnsWdL\",\"vRXuYYBNuHEQ29fbm\",\"FocLpCB2WEiK2gGni\",\"9c8n7ti5vCjTRgiGN\",\"sxci7DYKNa6q22Sjq\",\"Yohr2MmAyaWGMbB35\",\"HTdEyxtkq87EJN2Aw\",\"ZBDiEMi7dbjRL55LB\",\"t2kdBPj9qQAXY2Ehd\",\"3gxJoNp59B4eoyyed\",\"Ha5J49rhojBRy3BaM\",\"9aYyBYbm8MkpeBrFG\",\"NCB3RaRBonefnHBJD\",\"p8i2FbektnS84jAcF\",\"a49eNnfRwSMxsDJXf\",\"afMjsKHpEPtAKaGKq\",\"pr4Cm4A369tC9gSeT\",\"3KjxQu9RZ8ZSywvLz\",\"D3ASM3aWpcQ8gvnin\",\"StCLfeKqHEWmntSfe\",\"mmDwyMAD8kTcrdjPs\",\"63mo47CoSdyJs3Dgm\",\"qgc3hgPcSduWfwkSj\",\"8JyqsSbN2FJXPr3cw\",\"bcK8WBzat8HLj4jPs\",\"5nnYhAsrMQKLgzDWr\",\"p4KXbYG8ddyCQrbAs\",\"LuL355wpJpnxQwEDp\",\"3XvbdaPm47SaJtzrC\",\"sMoo87fGCqa9JHBCv\",\"toZsDEaLL7ptnFskQ\",\"WX3S3CFjEdfceCtKZ\",\"HBgPTjhMkJ2WCcBP7\",\"fxaS5K7ZXo4FbTe36\",\"HsFc9PgmpP2X9Fwh9\",\"AQTXw9h7upAhjwz3L\",\"Gq9x9GKbssg4NjXcj\",\"qJZsi5rhRnWA38FbA\",\"CPgJteAqYJ2n9idPw\",\"ctj6B8mZKEsiibSMK\",\"fXbKvR8DcFoLRj5DX\",\"mhhx5WjGJ23vBcXrY\",\"qzFMJGxMErfBhExMm\",\"Md3zwe6ZCp4vqdx5j\",\"7fjsAnXYp3ckDAKfT\",\"u4yanfWeeZsN3xWgc\",\"AzERMCwmKzy5zXJ3S\",\"89iMnuWSNmvTetXYy\",\"bwKK3iM6qscexs6Aq\",\"AXuednBPWfXoZNQs5\",\"QGhyHbzptdzYu4rBp\",\"2cdvd8yuPLSwvGj9w\",\"btWqyiSkZM5ahuET7\",\"AyrEvM2GLX2jqM772\",\"2E9vrrE9CksueDvPA\",\"vsgfPe856FTF9scZG\",\"gBGjCfJvPHswDM5JQ\",\"3HPMi9FCqRr8oxYvg\",\"qx9XHErKygcLiFGhX\",\"gp77RykRkHQtqbE9C\",\"NrSqKXXpaus7PGdiy\",\"fZjkX29nhRTWWb75k\",\"8AN8WuwPCXqnnD8yt\",\"MJMEESuirNXM2diop\",\"BnZaMwqqBxaCNhQMx\",\"Z988BnMH9vd8epArK\",\"uw47663LqPME8btaA\",\"GXDR2MbzEL5aQEk6d\",\"YLwJkF2wuL3n9o6a2\",\"W347YkKWzfvMbkuHr\",\"S47iwvGMEBQAKHWfd\",\"jDuY4gx4aJRp8SHbm\",\"5RcAXjQAbqQtWppy6\",\"fZky27mpbfX7soJKa\",\"uqNAu5PZnSDRqZKoN\",\"XPhLf7JYc6mmBYR9A\",\"ko7oJ85JMftgcbkrr\",\"F9YrmbE5JY5e7233v\",\"j4kxrPehyKYjECL2C\",\"M5n9zd5LtuuwJr668\",\"PJK5oeYq4rJNtTRbH\",\"5Kf9z3G9QBs9fkvLs\",\"EZNT8B7yQnnZmuwCf\",\"gJYHiyyMv6mhqFehP\",\"i5QeAsrM4m6hzPTku\",\"jRqY4i8gPemsZMBGf\",\"WuAkXKpcrQy867yCw\",\"Es4eX2stRpyoXeC7f\",\"we4DCPstpD5urDitR\",\"j2hKJg9sh9m3HWFgo\",\"oeEDPQaCwHFFXsrny\",\"gGnDsJz5hr2t9MKCF\",\"xEuitW7gMaqzhq6x8\",\"fbYN9Jp46RqBqCd2K\",\"wYYMNPe8nSiJFbvJw\",\"Qy32edSg4rrbh5ftf\",\"ye5Krzmpgt8keXCnx\",\"PXBjtEAAwibHxNZXq\",\"rTj67TTydxqkpwFtN\",\"mdEQJ2fmGmkbhbvNw\",\"jDTGwryGygbZiqCEg\",\"cGebawowzCKcFn8gq\",\"Kso7rzAKB4TTCPKgM\",\"8J2Dqqz9PaFufQzwY\",\"bw6kHP3k8dP2qBa5v\",\"YFHkjbM6obMSj24zi\",\"Kp3r5XPCgxzhiu3Gc\",\"hB5mgzMwQSnhBzi7P\",\"5seiNqw6ZXoF2GRRd\",\"jyoLggHk8xQKZuoQC\",\"hAfyZS5tx4r7m5cAS\",\"8zZ6xmzpiFair25qr\",\"DzvdGwHEjqsX7wyKr\",\"Yp7uvStL97cC9fKkY\",\"Zhy5X7BZnqk8hacEw\",\"eWaq9hCBYq4oQYgEx\",\"B4pxRqzo43M7S8FbP\",\"QFXHrpGKq9DM2sBLZ\",\"WZujpe8yQAyZmpWHg\",\"P7zedbjaFw8YDzLz7\",\"DzLdw6wEL2Nt5mrsp\",\"meS77LKqRswhF5LAy\",\"htXCitorobtqYymjN\",\"hhxjQREtmHSheH9Pj\",\"TrquEHytntLKHA4m2\",\"SmmkwyvSHT54PzB5B\",\"DkSMZ3jZLkwviKb9g\",\"rvojHhKH3DaxotefQ\",\"EcKPDmD4GmeFJGDTL\",\"q2tzvkrLASvSjkek9\",\"AeJSxRqw2dJZuGvdk\",\"GEDsDpNX4QMhZAxtJ\",\"QXkrEiAuhuXaZmL4C\",\"osXNzc2aCxspRwheS\",\"g4NCSxxHqHCGMpWwT\",\"muXMnzQwGLzN6j2Jr\",\"nbH6pjzJS9Z35JD9r\",\"xAcWGSbMrDPthhBBs\",\"RhPg33AdzvSZmibXa\",\"YcjwCvYut6834Jzd8\",\"MxmG8Gkti7L5kXYNL\",\"9KAbm9niQ9Cv9LefP\",\"KxLMWekCxzy2Eem7u\",\"Fd9765rksgPK4E2Zy\",\"3gsee8akczMZGhihG\",\"yXGiiSAR5nBHnH3yr\",\"fRYcPHuyEdqngMzC4\",\"KCEsMas5BbmiD2Q9K\",\"gpd8yji9GXJruAtje\",\"a5Tuwi5SNDhW4N57Y\",\"oMZovHkR6QqNvQwyc\",\"kQRtmSZfHdSzFserc\",\"pi76g3eRpnKrhee2a\",\"azAzSkvJd7eyXY9x9\",\"ZXWDtCrM9ev3439oi\",\"8AvGnwLnDrHXAwX38\",\"sfeeJr28qAH5d4TxC\",\"hx3ZWiCKNtqwMWFCt\",\"J7epB3qSQJ2E8vWkY\",\"6ehQMeGtrhnhot5zK\",\"gXTAie79kiw28tx5u\",\"TCTZucJN3tJh5t7MB\",\"66AfbqGGg8oz7WWs7\",\"xv5obFhsxY93mqR5S\",\"7gBLtxKryhTryH5zb\",\"NdLzb3BZ5J8ftnCkS\",\"PmfzvaX5ZJscpvHXc\",\"hDeaTsprkH6CmvSAR\",\"oMfq73A434YWhSuWQ\",\"P5BhjZxyeHQYTNyB9\",\"unNqQjSHzkb4pCzEu\",\"8Xx8nWXRydHDBGfQf\",\"QKwzvqWHTffHsNPu6\",\"jXTnL3JatkKjoifyb\",\"a777e8chPvJkY3tKa\",\"Ym8AjbKGSJooun3nt\",\"tyLS9T6YMfg9fMtYJ\",\"cJmmvnmJSXvBXtydi\",\"NQ4btGLfcvAnXjAyP\",\"eyvHBQ3fpSHwKniZP\",\"uNK8tLSseShR8wcA4\",\"47PyFbZyxWuP9Bgga\",\"Wi4H6ayKsNDWWQCG5\",\"PJu3WcTpfRrvHfQiS\",\"3SgSNoAB3sxaYeT3w\",\"f3RAbWvE6uESq7KE5\",\"E2hpke7mHxAWsw5t9\",\"QRv96jmNaYsWkxQEG\",\"buX4mCQhtXCfBjeno\",\"xEX3TDY6C2h82dJTn\",\"c7uBxu2rgY77H5d79\",\"btabi3PdyisuY5tn9\",\"tdinF6MRzC6AdNX8g\",\"rhS8qXRjZcpDXkwnE\",\"pYonfGP4u9HNL9Z32\",\"srJ34BaybkQh3qRkM\",\"5LDvZHCDJqePeBrCg\",\"cR3ibTMxLyEdDFCHY\",\"jCjCvyhqhpebkJn34\",\"wFRLGjA56kj7xyhmv\",\"afvP29FhRou2bTaav\",\"KMR6vNzvSKMA2cXnK\",\"KPz93xbvJ9x7okGs6\",\"tjFkD8gLHEWEpEuNL\",\"RsujLHaML6L3KinzK\",\"FNYPC36yqPmTKDaqR\",\"unqzSsxpxj9sZ7rbD\",\"GD9Jqmu93vB4LTT8F\",\"nSLvkGEpiYCtcBLaa\",\"FxPDKKibxnZjGJLs6\",\"ckQwFFWyLXmDQAaCn\",\"H3XLNCWB5yXt5YYXn\",\"NnymXePpDaZnp2fRd\",\"nFbmNzMQ38TncmfQX\",\"3Gf7ikLijfoxabiPY\"],\"quality\":[4,5,5,5,5,1,5,5,4,5,5,3,5,5,5,5,4,5,4,5,5,4,5,5,5,3,4]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":2},\"isHidden\":false,\"quality\":4.481481481481482,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"rAYegxMqQuHeqSHSz\",\"language\":\"cpp\"},{\"_id\":\"FQPo8iZ8vuPEj2dKB\",\"language\":\"java\"},{\"_id\":\"iqZkzkWTHrJCFf6ZQ\",\"language\":\"javascript\"},{\"_id\":\"Ay9wPrqRJnBmvbFmi\",\"language\":\"python3\"},{\"_id\":\"Rc47Jm2mEe4oGqgij\",\"language\":\"ruby\"}]}}"]