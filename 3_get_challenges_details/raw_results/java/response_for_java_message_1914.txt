a["{\"msg\":\"result\",\"id\":\"514\",\"result\":{\"_id\":\"yX9Jd6s9eF75ZK43K\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class JaggedArray {\\n\\tpublic static Object[] sortIt(Object[] arr) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":2.0714285714285716,\"familyId\":\"tSkM7gieb5p3NcNyW\",\"instructions\":\"For this challenge, you will be given an array as the following:\\n\\n```\\n[[3], 4, [2], [5], 1, 6]\\n```\\n\\nBy definition, the array has elements that's _either an integer or an array containing an integer_. We can clearly see that this array can reasonably be sorted according to \\\"**the content of the elements**\\\" as:\\n\\n```\\n[1, [2],  [3], 4, [5], 6]\\n```\\n\\nCreate a function that, given an array similar to the above, sorts the array according to the \\\"content of the elements\\\".\\n\\n### Examples\\n```\\nsortIt([4, 1, 3]) ➞ [1, 3, 4]\\n\\nsortIt([[4], [1], [3]]) ➞ [[1], [3], [4]]\\n\\nsortIt([4, [1], 3]) ➞ [[1], 3, 4]\\n\\nsortIt([[4], 1, [3]]) ➞ [1, [3], [4]]\\n\\nsortIt([[3], 4, [2], [5], 1, 6]) ➞ [1, [2], [3], 4, [5], 6]\\n\\nsortIt([13, [2000], 1979, 12, [12], 17]) ➞ [12, [12], 13, 17, 1979, [2000]]\\n```\\n\\n### Notes\\nElements of the array will be either integers or arrays with a single integer.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"/** \\n================================= \\nTestGen 3.1 for JUnit 4.13.0 \\t\\t\\nTest Case: JaggedArray::sortIt \\nTimestamp: 11/20/2020 01:46:54 AM \\n--------------------------------- \\n® DARKKO 2020 © \\n================================= \\n\\n**/ \\n\\nimport static org.junit.Assert.assertArrayEquals; \\nimport org.junit.Test; \\n\\npublic class JaggedArrayTest { \\n\\t\\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertArrayEquals(new Object[] {1, 3, 4}, JaggedArray.sortIt(new Object[] {4, 1, 3}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertArrayEquals(new Object[] {new int[] {1}, new int[] {3}, new int[] {4}}, JaggedArray.sortIt(new Object[] {new int[] {4}, new int[] {1}, new int[] {3}}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertArrayEquals(new Object[] {12, new int[] {12}, 13, 17, 1979, new int[] {2000}}, JaggedArray.sortIt(new Object[] {13, new int[] {2000},1979, 12, new int[] {12}, 17}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertArrayEquals(new Object[] {new int[] {1}, 3, 4}, JaggedArray.sortIt(new Object[] {4, new int[] {1}, 3}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertArrayEquals(new Object[] {1, new int[] {3}, new int[] {4}}, JaggedArray.sortIt(new Object[] {new int[] {4}, 1, new int[] {3}}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertArrayEquals(new Object[] {1, new int[] {2}, new int[] {3}, 4, new int[] {5}, 6}, JaggedArray.sortIt(new Object[] {new int[] {3}, 4, new int[] {2}, new int[] {5}, 1, 6}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertArrayEquals(new Object[] {1, new int[] {3}, new int[] {5}, 6, 7, new int[] {9}}, JaggedArray.sortIt(new Object[] {new int[] {3}, 7, new int[] {9}, new int[] {5}, 1, 6}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertArrayEquals(new Object[] {1, new int[] {3}, new int[] {5}, 6, 7, new int[] {8}, new int[] {9}}, JaggedArray.sortIt(new Object[] {new int[] {3}, 7, new int[] {9}, new int[] {5},1, 6, new int[] {8}}));\\n\\t}\\n\\n}\\n// end of tests\",\"language\":\"java\",\"quality\":0,\"summary\":\"For this challenge, you will be given an array as the following:\\n\\n[[3], 4, [2], [5], 1, 6]\\n\\nBy definition, the array has elements that's either an integer or an array containing an integer. We can clearly see that this array can reasonably be sorted according to \\\"the content of the elements\\\" as:\\n\\n[1, [2],  [3], 4, [5], 6]\\n\\nCreate a function that, given an arra\",\"tags\":[\"sorting\",\"arrays\",\"language_fundamentals\"],\"timestamp\":{\"$date\":1605877864266},\"title\":\"Sort The Unsortable\",\"stats\":{\"completed\":{\"total\":26,\"ratings\":[1,1,1,1,1,2,1,0,3,3,2,2,1,4,3,2,3,3,2,3,1,3,2,2,4,3,3,1],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"jyoLggHk8xQKZuoQC\",\"8Xx8nWXRydHDBGfQf\",\"C5x6MtLFJvaFA79MP\",\"8DfhSneJpsw5uqLeM\",\"gXTAie79kiw28tx5u\",\"AeJSxRqw2dJZuGvdk\",\"a49eNnfRwSMxsDJXf\",\"bur3yQ8s34zqKGEro\",\"DkSMZ3jZLkwviKb9g\",\"htXCitorobtqYymjN\",\"sxci7DYKNa6q22Sjq\",\"MPcATtdQZ42wpf2M8\",\"B4pxRqzo43M7S8FbP\",\"yajQSrNPFXEaJTuBt\",\"vRXuYYBNuHEQ29fbm\",\"c7uBxu2rgY77H5d79\",\"YbHJBDi6jsYLWMRe8\",\"XpLj7ZmPsRhfDFGJs\",\"jrnwLW7ZAuJkCEcxb\",\"7zHPkRBtdKFQFkrc4\",\"rWhXHhzF4W8bea6LP\",\"uw47663LqPME8btaA\"]},\"flags\":0},\"editorId\":\"a777e8chPvJkY3tKa\",\"family\":[{\"_id\":\"yX9Jd6s9eF75ZK43K\",\"language\":\"java\"},{\"_id\":\"zemLfbNWaKuhrbJPt\",\"language\":\"javascript\"},{\"_id\":\"SChr3sBY5ZKwHBHLH\",\"language\":\"python3\"},{\"_id\":\"KtD5iTKtnEyqCufya\",\"language\":\"ruby\"}]}}"]