a["{\"msg\":\"result\",\"id\":\"591\",\"result\":{\"_id\":\"MfiTruQj2gtABxw5y\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"import java.util.AbstractMap.SimpleEntry;\\nimport java.util.ArrayList;\\nimport java.util.Map;\\n\\npublic class PageChapter {\\n\\tpublic static String closestToPage(ArrayList<Map.Entry<String, Integer> > c, int p) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":2.2777777777777777,\"editorId\":\"a777e8chPvJkY3tKa\",\"familyId\":\"nCbERvJLFP5iHW7iM\",\"instructions\":\"Write a function that returns the **closest chapter** to the current **page** you are at. If two chapters are **similarly close**, return whichever has the **higher** page.\\n\\n### Examples\\n```\\nclosestToPage(new ArrayList<Map.Entry<String, Integer> >(\\n  Arrays.asList(\\n      new SimpleEntry<String, Integer>(\\\"Chapter 1\\\", 1),\\n      new SimpleEntry<String, Integer>(\\\"Chapter 2\\\", 15),\\n      new SimpleEntry<String, Integer>(\\\"Chapter 3\\\", 37)  \\n)), 10) ➞ \\\"Chapter 2\\\"\\n\\n\\nclosestToPage(new ArrayList<Map.Entry<String, Integer> >(\\n  Arrays.asList(\\n      new SimpleEntry<String, Integer>(\\\"Chapter 1\\\", 1),\\n      new SimpleEntry<String, Integer>(\\\"Chapter 2\\\", 15),\\n      new SimpleEntry<String, Integer>(\\\"Chapter 3\\\", 37)\\n)), 200) ➞ \\\"The End?\\\"\\n\\n\\nclosestToPage(new ArrayList<Map.Entry<String, Integer> >(\\n  Arrays.asList(\\n      new SimpleEntry<String, Integer>(\\\"Chapter 1a\\\", 1), \\n      new SimpleEntry<String, Integer>(\\\"Chapter 1b\\\", 5)\\n)), 3) ➞ \\\"Chapter 1b\\\"\\n```\\n\\n### Notes\\n- All page numbers in the book are valid integers.\\n- Return the **higher page number** if ever two pages are equidistant (see test case #8).\\n- The challenge introduces the use of `Map.Entry`and `SimpleEntry` classes in lieu to `Map` and `HashMap`.\\n- Another version of this challenge which uses custom `classes` instead of `Map`-types can be found via this [link](https://edabit.com/challenge/WtxvjezcFYGQo2v48).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"/** \\n===================================== \\nTestGen 4.0 for JUnit 4.13.0 \\t\\t\\nTest Case: PageChapter::closestToPage \\nTimestamp: 10/14/2020 11:56:44 PM \\n------------------------------------- \\n® DARKKO 2020 © \\n===================================== \\n\\n**/ \\n\\nimport static org.junit.Assert.assertEquals;\\nimport org.junit.Test;\\nimport java.util.ArrayList;\\nimport java.util.Arrays;\\nimport java.util.Map;\\nimport java.util.AbstractMap.SimpleEntry;\\n\\n\\npublic class PageChapterTest {\\n\\n\\t@Test\\n\\tpublic void test01() {\\n\\t\\tArrayList<Map.Entry<String, Integer> > m = new ArrayList<Map.Entry<String, Integer> >(\\n\\t\\t\\tArrays.asList(\\n\\t\\t\\t\\tnew SimpleEntry<String, Integer>(\\\"Chapter 1\\\", 1),\\n\\t\\t\\t\\tnew SimpleEntry<String, Integer>(\\\"Chapter 2\\\", 15),\\n\\t\\t\\t\\tnew SimpleEntry<String, Integer>(\\\"Chapter 3\\\", 37)\\t\\n\\t\\t));\\n\\t\\tassertEquals(\\\"Chapter 2\\\", PageChapter.closestToPage(m, 10));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test02() {\\n\\t\\tArrayList<Map.Entry<String, Integer> > m = new ArrayList<Map.Entry<String, Integer> >(\\n\\t\\t\\tArrays.asList(\\n\\t\\t\\t\\tnew SimpleEntry<String, Integer>(\\\"New Beginnings\\\", 1),\\n\\t\\t\\t\\tnew SimpleEntry<String, Integer>(\\\"Strange Developments\\\", 62),\\n\\t\\t\\t\\tnew SimpleEntry<String, Integer>(\\\"The End?\\\", 194),\\n\\t\\t\\t\\tnew SimpleEntry<String, Integer>(\\\"The True Ending\\\", 460)\\n\\t\\t));\\n\\t\\tassertEquals(\\\"The End?\\\", PageChapter.closestToPage(m, 200));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test03() {\\n\\t\\tArrayList<Map.Entry<String, Integer> > m = new ArrayList<Map.Entry<String, Integer> >(\\n\\t\\t\\tArrays.asList(\\n\\t\\t\\t\\tnew SimpleEntry<String, Integer>(\\\"Chapter 1a\\\", 1), \\n\\t\\t\\t\\tnew SimpleEntry<String, Integer>(\\\"Chapter 1b\\\", 5)\\n\\t\\t));\\n\\t\\tassertEquals(\\\"Chapter 1b\\\", PageChapter.closestToPage(m, 3));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test04() {\\n\\t\\tArrayList<Map.Entry<String, Integer> > m = new ArrayList<Map.Entry<String, Integer> >(\\n\\t\\t\\tArrays.asList(\\n\\t\\t\\t\\tnew SimpleEntry<String, Integer>(\\\"Chapter 1a\\\", 1), \\n\\t\\t\\t\\tnew SimpleEntry<String, Integer>(\\\"Chapter 1b\\\", 5), \\n\\t\\t\\t\\tnew SimpleEntry<String, Integer>(\\\"Chapter 1c\\\", 50), \\n\\t\\t\\t\\tnew SimpleEntry<String, Integer>(\\\"Chapter 1d\\\", 100)\\n\\t\\t));\\n\\t\\tassertEquals(\\\"Chapter 1d\\\", PageChapter.closestToPage(m, 75));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test05() {\\n\\t\\tArrayList<Map.Entry<String, Integer> > m = new ArrayList<Map.Entry<String, Integer> >(\\n\\t\\t\\tArrays.asList(\\n\\t\\t\\t\\tnew SimpleEntry<String, Integer>(\\\"Chapter 1a\\\", 1), \\n\\t\\t\\t\\tnew SimpleEntry<String, Integer>(\\\"Chapter 1b\\\", 5), \\n\\t\\t\\t\\tnew SimpleEntry<String, Integer>(\\\"Chapter 1c\\\", 50), \\n\\t\\t\\t\\tnew SimpleEntry<String, Integer>(\\\"Chapter 1d\\\", 100),\\n\\t\\t\\t\\tnew SimpleEntry<String, Integer>(\\\"Chapter 1e\\\", 200)\\n\\t\\t));\\n\\t\\tassertEquals(\\\"Chapter 1e\\\", PageChapter.closestToPage(m, 150));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test06() {\\n\\t\\tArrayList<Map.Entry<String, Integer> > m = new ArrayList<Map.Entry<String, Integer> >(\\n\\t\\t\\tArrays.asList(\\n\\t\\t\\t\\tnew SimpleEntry<String, Integer>(\\\"Chapter 1a\\\", 1), \\n\\t\\t\\t\\tnew SimpleEntry<String, Integer>(\\\"Chapter 1b\\\", 5), \\n\\t\\t\\t\\tnew SimpleEntry<String, Integer>(\\\"Chapter 1c\\\", 50), \\n\\t\\t\\t\\tnew SimpleEntry<String, Integer>(\\\"Chapter 1d\\\", 100),\\n\\t\\t\\t\\tnew SimpleEntry<String, Integer>(\\\"Chapter 1e\\\", 200)\\n\\t\\t));\\n\\t\\tassertEquals(\\\"Chapter 1c\\\", PageChapter.closestToPage(m, 74));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test07() {\\n\\t\\tArrayList<Map.Entry<String, Integer> > m = new ArrayList<Map.Entry<String, Integer> >(\\n\\t\\t\\tArrays.asList(\\n\\t\\t\\t\\tnew SimpleEntry<String, Integer>(\\\"Chapter 1a\\\", 1), \\n\\t\\t\\t\\tnew SimpleEntry<String, Integer>(\\\"Chapter 1b\\\", 5), \\n\\t\\t\\t\\tnew SimpleEntry<String, Integer>(\\\"Chapter 1c\\\", 50), \\n\\t\\t\\t\\tnew SimpleEntry<String, Integer>(\\\"Chapter 1d\\\", 100),\\n\\t\\t\\t\\tnew SimpleEntry<String, Integer>(\\\"Chapter 1e\\\", 200),\\n\\t\\t\\t\\tnew SimpleEntry<String, Integer>(\\\"Chapter 1f\\\", 400)\\n\\t\\t));\\n\\t\\tassertEquals(\\\"Chapter 1f\\\", PageChapter.closestToPage(m, 300));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test08() {\\n\\t\\tArrayList<Map.Entry<String, Integer> > m = new ArrayList<Map.Entry<String, Integer> >(\\n\\t\\t\\tArrays.asList(\\n\\t\\t\\t\\tnew SimpleEntry<String, Integer>(\\\"Chapter Four\\\", 46), \\n\\t\\t\\t\\tnew SimpleEntry<String, Integer>(\\\"Chapter Five\\\", 54)\\n\\t\\t));\\n\\t\\tassertEquals(\\\"Chapter Five\\\", PageChapter.closestToPage(m, 50));\\n\\t}\\n\\n}\\n\\n// end of tests\",\"language\":\"java\",\"quality\":0,\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,3,2,3,3,2,3,3,2,0,2,3,3],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"Es4eX2stRpyoXeC7f\",\"gXTAie79kiw28tx5u\",\"yXGiiSAR5nBHnH3yr\",\"3Pycdzkev8eGZHjS3\",\"RGN3QTb5LXj4ZPPkj\",\"jyoLggHk8xQKZuoQC\",\"J6bvitKmoYMoqWJex\",\"sxci7DYKNa6q22Sjq\",\"HFwFdesvEt7GL47wd\",\"a49eNnfRwSMxsDJXf\",\"htXCitorobtqYymjN\",\"rWhXHhzF4W8bea6LP\"],\"total\":14},\"flags\":0},\"summary\":\"Write a function that returns the closest chapter to the current page you are at. If two chapters are similarly close, return whichever has the higher page.\\n\\nExamples\\nclosestToPage(new ArrayList >(\\n  Arrays.asList(\\n      new SimpleEntry(\\\"Chapter 1\\\", 1),\\n      new SimpleEntry(\\\"Chapter 2\\\", 15),\\n      new SimpleEntry(\\\"Chapter 3\\\", 37)\\n)), 10) ➞ \\\"Chapter 2\\\"\\n\\ncloses\",\"tags\":[\"arrays\",\"strings\",\"numbers\",\"validation\"],\"timestamp\":{\"$date\":1602687571379},\"title\":\"Pages and Chapters\",\"family\":[{\"_id\":\"MfiTruQj2gtABxw5y\",\"language\":\"java\"},{\"_id\":\"3fS4DBuMZYch3sn7Q\",\"language\":\"javascript\"},{\"_id\":\"CRv9LQS3Mtizzdka3\",\"language\":\"python3\"}]}}"]