a["{\"msg\":\"result\",\"id\":\"473\",\"result\":{\"_id\":\"dETRK2YLCtEPAMvMb\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class Price {\\n\\tpublic static String percentageChanged(String oldPrice, String newPrice) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":1.6904761904761905,\"quality\":0,\"familyId\":\"po3sxv3fg2g7SHdvM\",\"instructions\":\"Create a function that takes an old price `oldPrice`, a new price `newPrice`, and returns what percent the price decreased or increased. Round the percentage to the nearest whole percent.\\n\\n### Examples\\n```\\npercentageChanged(\\\"$800\\\", \\\"$600\\\") ➞ \\\"25% decrease\\\"\\n\\npercentageChanged(\\\"$1000\\\", \\\"$840\\\") ➞ \\\"16% decrease\\\"\\n\\npercentageChanged(\\\"$100\\\", \\\"$950\\\") ➞ \\\"850% increase\\\"\\n```\\n\\n### Notes\\nN/A\",\"isHidden\":false,\"lab\":\"import static org.junit.Assert.assertEquals;\\nimport org.junit.Test;\\n\\npublic class PriceTests {\\n\\t@Test\\n\\tpublic void test1() {\\n\\t\\tassertEquals(Price.percentageChanged(\\\"$800\\\", \\\"$600\\\"), \\\"25% decrease\\\");\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test2() {\\n\\t\\tassertEquals(Price.percentageChanged(\\\"$1000\\\", \\\"$840\\\"), \\\"16% decrease\\\");\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test3() {\\n\\t\\tassertEquals(Price.percentageChanged(\\\"$100\\\", \\\"$950\\\"), \\\"850% increase\\\");\\n\\t}\\n}\",\"language\":\"java\",\"summary\":\"Create a function that takes an old price oldPrice, a new price newPrice, and returns what percent the price decreased or increased. Round the percentage to the nearest whole percent.\\n\\nExamples\\npercentageChanged(\\\"$800\\\", \\\"$600\\\") ➞ \\\"25% decrease\\\"\\n\\npercentageChanged(\\\"$1000\\\", \\\"$840\\\") ➞ \\\"16% decrease\\\"\\n\\npercentageChanged(\\\"$100\\\", \\\"$950\\\") ➞ \\\"850% increase\\\"\\n\\nNotes\\nN/A\",\"tags\":[\"math\"],\"timestamp\":{\"$date\":1601244919461},\"title\":\"Percentage Changed\",\"stats\":{\"completed\":{\"total\":37,\"ratings\":[1,1,1,1,1,2,1,2,1,2,2,1,1,2,4,3,2,2,1,2,2,1,1,2,2,2,3,2,2,2,2,0,2,1,2,2,2,1,2,2,1,2],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"oMZovHkR6QqNvQwyc\",\"yXGiiSAR5nBHnH3yr\",\"eBgN48uPauTRcPpRb\",\"fRYcPHuyEdqngMzC4\",\"rvojHhKH3DaxotefQ\",\"AeJSxRqw2dJZuGvdk\",\"a49eNnfRwSMxsDJXf\",\"By8DbRQ2svexoGvsQ\",\"azAzSkvJd7eyXY9x9\",\"DzvdGwHEjqsX7wyKr\",\"Es4eX2stRpyoXeC7f\",\"qaPjAANdnxFnWfj5d\",\"TrquEHytntLKHA4m2\",\"gXTAie79kiw28tx5u\",\"etoSR23iELGGgs9rA\",\"jb9RLyyuo565bKDzN\",\"8Xx8nWXRydHDBGfQf\",\"jXTnL3JatkKjoifyb\",\"jyoLggHk8xQKZuoQC\",\"82weQfHHmno4Mq4X7\",\"mDWNyaaQ9hvPCRzSd\",\"buX4mCQhtXCfBjeno\",\"mG8HqKiAQFTdRZthG\",\"srJ34BaybkQh3qRkM\",\"wFRLGjA56kj7xyhmv\",\"vRXuYYBNuHEQ29fbm\",\"htXCitorobtqYymjN\",\"sxci7DYKNa6q22Sjq\",\"J9zJq7PMGb6mqzcHW\",\"KMR6vNzvSKMA2cXnK\",\"rWhXHhzF4W8bea6LP\",\"PJu3WcTpfRrvHfQiS\",\"unqzSsxpxj9sZ7rbD\",\"FxPDKKibxnZjGJLs6\",\"uw47663LqPME8btaA\",\"wMY6G2GLpcTJCe74o\"]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":1},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"GbpGaSuTJ37WWKdW4\",\"language\":\"cpp\"},{\"_id\":\"dETRK2YLCtEPAMvMb\",\"language\":\"java\"},{\"_id\":\"C6ytXLzadegnWtCZF\",\"language\":\"javascript\"},{\"_id\":\"7ZFrHepr336TBMsF5\",\"language\":\"python3\"},{\"_id\":\"jhyWgRvXsXbdzZgRf\",\"language\":\"ruby\"}]}}"]