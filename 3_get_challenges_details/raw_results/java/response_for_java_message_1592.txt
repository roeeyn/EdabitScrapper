a["{\"msg\":\"result\",\"id\":\"355\",\"result\":{\"_id\":\"n7kbvMp5zHRmRbFQF\",\"archived\":false,\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"public class Count {\\n  public static int[] countPositivesSumNegatives(int[] input) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":1.490909090909091,\"familyId\":\"nCbSzSZrvd2wYSTJR\",\"instructions\":\"Create a function that takes an array of positive and negative numbers. Return an array where the first element is the **count** of positive numbers and the second element is the **sum** of negative numbers.\\n\\n### Examples\\n```\\ncountPositivesSumNegatives([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15]) ➞ [10, -65]\\n// There are a total of 10 positive numbers.\\n// The sum of all negative numbers equals -65.\\n\\ncountPositivesSumNegatives([92, 6, 73, -77, 81, -90, 99, 8, -85, 34]) ➞ [7, -252]\\n\\ncountPositivesSumNegatives([91, -4, 80, -73, -28]) ➞ [2, -105]\\n\\ncountPositivesSumNegatives([]) ➞ []\\n```\\n\\n### Notes\\n- If given an empty array, return an empty array: `[]`\\n- 0 is not positive.\",\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.*;\\nimport org.junit.runners.JUnit4;\\n\\npublic class ChallengeTests {\\n\\t@Test\\n\\tpublic void test1() {\\n\\t\\tint[] expectedResult = new int[] {10, -65};\\n\\t\\tassertArrayEquals(expectedResult, Count.countPositivesSumNegatives(new int[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test2() {\\n\\t\\tint[] expectedResult = new int[] {7, -252};\\n\\t\\tassertArrayEquals(expectedResult, Count.countPositivesSumNegatives(new int[] {92, 6, 73, -77, 81, -90, 99, 8, -85, 34}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test3() {\\n\\t\\tint[] expectedResult = new int[] { };\\n\\t\\tassertArrayEquals(expectedResult, Count.countPositivesSumNegatives(null));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test4() {\\n\\t\\tint[] expectedResult = new int[] { };\\n\\t\\tassertArrayEquals(expectedResult, Count.countPositivesSumNegatives(new int[] {}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void random_tests() {\\n\\t\\t\\tfor(int i = 0; i < 20; i++)\\n\\t\\t\\t{\\n\\t\\t\\t\\t int elementsNumber = (int)Math.floor(Math.random() * 100);\\n\\t\\t\\t\\t int[] input = new int[elementsNumber];\\n\\t\\t\\t\\t for(int j = 0; j < elementsNumber; j++)\\n\\t\\t\\t\\t {\\n\\t\\t\\t\\t\\t input[j] = (int)Math.floor(Math.random() * 1000) - 500;\\n\\t\\t\\t\\t }\\n\\n\\t\\t\\t\\t int[] expected = new int[0];\\n\\t\\t\\t\\t if(elementsNumber > 0)\\n\\t\\t\\t\\t {\\n\\t\\t\\t\\t\\t int countPositives = 0;\\n\\t\\t\\t\\t\\t int sumNegatives = 0;\\n\\t\\t\\t\\t\\t for(int ti=0;ti<input.length;ti++)\\n\\t\\t\\t\\t\\t {\\n\\t\\t\\t\\t\\t\\t if(input[ti] > 0)\\n\\t\\t\\t\\t\\t\\t {\\n\\t\\t\\t\\t\\t\\t\\t countPositives++;\\n\\t\\t\\t\\t\\t\\t }\\n\\t\\t\\t\\t\\t\\t if(input[ti] < 0)\\n\\t\\t\\t\\t\\t\\t {\\n\\t\\t\\t\\t\\t\\t\\t sumNegatives += input[ti];\\n\\t\\t\\t\\t\\t\\t }\\n\\t\\t\\t\\t\\t }\\n\\t\\t\\t\\t\\t expected = new int[] { countPositives, sumNegatives };\\n\\t\\t\\t\\t }\\n\\n\\t\\t\\t\\t assertArrayEquals(expected, Count.countPositivesSumNegatives(input));\\n\\t\\t\\t}\\n\\t}\\n}\",\"language\":\"java\",\"summary\":\"Create a function that takes an array of positive and negative numbers. Return an array where the first element is the count of positive numbers and the second element is the sum of negative numbers.\\n\\nExamples\\ncountPositivesSumNegatives([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15]) ➞ [10, -65]\\n// There are a total of 10 positive numbers.\\n// The sum\",\"tags\":[\"arrays\",\"conditions\",\"numbers\"],\"timestamp\":{\"$date\":1494730204944},\"title\":\"Positive Count / Negative Sum\",\"stats\":{\"completed\":{\"total\":248,\"ratings\":[1,1,1,1,1,0,1,1,3,1,0,1,0,1,0,1,5,2,1,1,1,2,2,1,0,1,1,1,1,1,1,1,2,1,1,0,0,3,0,1,1,3,1,2,4,2,1,0,1,1,2,1,0,1,2,2,1,1,2,1,2,2,1,2,2,2,0,2,2,2,2,0,3,2,2,2,2,3,2,2,2,1,1,1,0,1,2,0,2,0,1,1,2,1,1,1,1,1,3,1,2,2,3,3,1,3,2,2,1,2,1,2,1,1,2,0,3,2,2,2,2,2,1,1,2,1,2,2,2,2,2,2,2,2,2,2,2,1,2,2,0,2,2,1,0,2,2,2,3,1,1,2,2,1,0,2,2,1,2,2,0,2,2,1,1,1,2,1,2,1,2,1,2,1,0,2,5,2,2,2,2,2,2,2,2,2,0,2,1,2,2,1,0,2,1,2,1,2,1,0,2,2,1,2,0,0,1,2,2,1,2,2,2,1,2,0,5,1,1,2],\"rators\":[\"BkPgkDQGHm66X4Qai\",\"hi7Hvtq2mJfkXEGF2\",\"BZDQAHr9Lxqmc98FW\",\"p44eSxaNvwqkHx4jf\",\"Y9rqb8kXY9Qj5JXiw\",\"Apu6AenW3piqxHkP6\",\"wAhJniPifkcpCwLmw\",\"u4WSegiyDSHTDAYZr\",\"stfP2bqdanX6R2QvH\",\"sYvTftg3JdM4HJAtg\",\"xovMFpgpa6386rYq9\",\"htKWbyp6jyY8CuW3q\",\"btQTcmkjnmbCZkap3\",\"2cpi4cuAohhFJavZq\",\"2PyMJyvMYLJG2zjZq\",\"gfGgqfNnDPnJFkoPy\",\"9kH3aCBwKmRTqnvD7\",\"AHuPZEaTZJE2gwhWY\",\"v67epJQtBA448T5Mr\",\"jjmQj9dXEjkQvvb55\",\"Rj7KFCRk5tn5hXL28\",\"gNTLAMg4cNsRPesYS\",\"5PXxhR3Bctqox3PE6\",\"iRgkGNCNtoPKC25EY\",\"iumiEEzgPfm2oJSA2\",\"zMEyen5f2qNu44YaN\",\"M3mkzSYXCpCt2HhC3\",\"7LrgrixSzJxiGaF66\",\"GRZzKCbeb4xKHFCrZ\",\"79ZbLzp7xepvkonoh\",\"fskHo2C2gMKZxPZ5i\",\"R3Yvf7z4HzQo2fBFb\",\"fbNWxXTqZy2mXNbGJ\",\"x5JEs23Tc8ZWw3YAY\",\"z3HbZkmL5echimwFQ\",\"sBAQgme9imkPrH2Xm\",\"ddfeZ4pbbcXFXqZmY\",\"AfiYSAkd4PtCAq6MF\",\"74zXNB4jwSQ7agXCe\",\"sjngWfShdeS3jYEpZ\",\"3beBRHqPRT3Q72arL\",\"acQqozPi6NiCFqMGY\",\"NQ287FZrfSY9Swn2F\",\"YGYf9GKzaF8CWnDHE\",\"YaAtcMQGvDcF7Nc7F\",\"Kc2foqht8pXCDuQPh\",\"ZrJwpZKQoWygGAHvy\",\"3riR3H5ei3T86EEzz\",\"qzFMJGxMErfBhExMm\",\"uK99RLh3CQ3yur6BQ\",\"GNKZhy4BxjxWKCrhY\",\"GLWXzMK4cT9iBMaRu\",\"29s9dWyag5m6phKrM\",\"niz9xRvhYCLYvGJnW\",\"TkSdKmBYqbJiaCDXM\",\"E3sWGMpG54yKzY4R4\",\"yo3WuFdxE2ZN2qaSD\",\"u437YTqDGSjh49fsY\",\"XLKxWj9nhbsxFYXJv\",\"mNMQvcxKSSvqqMYCH\",\"evC88a8DJEtzeNxcN\",\"erJWHqarGkGtPJ3C4\",\"yJyjT7Z2PPQmzzWpP\",\"yZ7xaZ7NNg6Y9EMsH\",\"6Ha4JTRCMXj9Yj44F\",\"JsKieRsFZdXepC7M6\",\"fsC9crXHkTMRGaXjd\",\"34rKGZYu7vEdoCu7d\",\"tpHtonenH2R6XtAW8\",\"BmqAHh8fTE8WhqnMm\",\"vehqRpD48fEbxBrx3\",\"CMLtzdMBzQBrL6SLM\",\"DX2QDCxPNcGQreEgp\",\"vjh7xAmbYZoaYWeRL\",\"9LaJbSjKjWNPanvqv\",\"z6gRoaKmajaC6FgYb\",\"TG48zCjALDL8SXSjz\",\"TbbTQWFfnBweNtc9s\",\"E8kxrkhNmubbNJTDT\",\"zRGkw69e46BdDDkxC\",\"L8KR8FTXXY4o6ynRW\",\"Zr2pbysK4SeF4B9mu\",\"GGzLYtaTXsACzoJeo\",\"QS5RGoPnapStFD5Gi\",\"cGwqKDCYRv6AP4GPa\",\"ydos8Ba8nZdYRNJpS\",\"wLkbq9vZknXjLRdRu\",\"n58FsZcd8vamq2zio\",\"wEbfLB4CDuto3By8T\",\"yhk8G8cM3p9JAbfJN\",\"Rwu4rBMXZGWreJdpH\",\"iwBsM6JXT3ZRryfwG\",\"5znpaFDoToJtAtF3h\",\"7mHRTjYNTY4GqH8t2\",\"i9GHxfSvWMHN6iexb\",\"yja7jBLd9GwM4tZBy\",\"eKEh8g38b5Mmq8dfP\",\"gyJZ9i7phhRH5PpbA\",\"e44CGc2zhWg5jxZbN\",\"7nqobGBA5GN5zGGrx\",\"a49eNnfRwSMxsDJXf\",\"aMNhTh35QQAs33ycQ\",\"W3xvQiYPbHv2m8bY9\",\"Lkoo57Q2GJXjBnyMR\",\"ZxT77KmWRWEpY9FXM\",\"SocjAuHjWDPdH4wQ3\",\"Yohr2MmAyaWGMbB35\",\"Y23A46NPHAkrkzq2L\",\"o5H3aMNucmwhnsWdL\",\"sxci7DYKNa6q22Sjq\",\"9b8o8f4uNyagMj3W6\",\"3pdgguqZgNDSAJSGm\",\"2cbTKYSPwFJBoEtay\",\"FocLpCB2WEiK2gGni\",\"hhkuWPyzP2k2pRcxZ\",\"vJQgc8ezyrTDJNpwF\",\"h7R7HQfnAWjPtRF3S\",\"3KyZcHpTtp3ETCocW\",\"4cJu2A6R9hXWJX9WY\",\"knL2G536WWm6WLCm9\",\"2oiE6qHMbW3cv7N74\",\"XbYJwh77vS24gd4mq\",\"t2kdBPj9qQAXY2Ehd\",\"ZYT9LjgocbP4hzQK5\",\"XTuxCoKrN9DZ7zaQx\",\"FvWKuSqHdXZ7HM2sD\",\"jb9RLyyuo565bKDzN\",\"YLqdr7bYjwew2KM4N\",\"zbQp6JhznkqyyLJTZ\",\"cG4PEDMMx8jXhWP8T\",\"Ha5J49rhojBRy3BaM\",\"6nrGZRgAkXMKmTfyA\",\"HsFc9PgmpP2X9Fwh9\",\"NCB3RaRBonefnHBJD\",\"r9hHZYPQAqJ9DbwLX\",\"CLmJduqJHX83dM4Pd\",\"8J2Dqqz9PaFufQzwY\",\"3KjxQu9RZ8ZSywvLz\",\"kXEfD7xxEyWd7oxxL\",\"8JyqsSbN2FJXPr3cw\",\"J9zJq7PMGb6mqzcHW\",\"u4yanfWeeZsN3xWgc\",\"Es4eX2stRpyoXeC7f\",\"Gg7NxiHxaDbW42eXL\",\"C9yBWYcZsjmJYww3K\",\"9gJsF5apWJGWZJprn\",\"mRwxbzaBc4Fg5q9Hw\",\"bsXDWXhsuqgaZYCCv\",\"4RHx3H8EwP2oboW8e\",\"wYYMNPe8nSiJFbvJw\",\"fZjkX29nhRTWWb75k\",\"hB5mgzMwQSnhBzi7P\",\"Kso7rzAKB4TTCPKgM\",\"5seiNqw6ZXoF2GRRd\",\"TrquEHytntLKHA4m2\",\"jyoLggHk8xQKZuoQC\",\"Zhy5X7BZnqk8hacEw\",\"jDTGwryGygbZiqCEg\",\"mfm3gB39arY8Rjb2y\",\"WZujpe8yQAyZmpWHg\",\"etoSR23iELGGgs9rA\",\"htXCitorobtqYymjN\",\"ByXaraYa5tzFG8Gmj\",\"cjxsqXfkAPoadmppi\",\"DzvdGwHEjqsX7wyKr\",\"B4pxRqzo43M7S8FbP\",\"DRjqgdcSkz58yiqea\",\"4hCzMutSHfeFwtHMN\",\"rvojHhKH3DaxotefQ\",\"q2tzvkrLASvSjkek9\",\"pBMXMQem6BpSeooYT\",\"QJb7dzpQHXrHrZmYh\",\"zwruFCmuHkwJTpYqg\",\"wkH86iBXvhsFE7MRC\",\"k2tXkx7AyX77tQDRo\",\"jRqY4i8gPemsZMBGf\",\"5p6bwXayfAp7Y4WQ7\",\"kiRkuN7JXqvWBa4SG\",\"j428nMyNKY8g2dcCi\",\"sJaSeR649EEMX9F4v\",\"MCjdtAAjL6sGLukPr\",\"87otmbdqNT3bHsQFu\",\"f6uGKbmMdBYCjrMBh\",\"Fd9765rksgPK4E2Zy\",\"Ym8AjbKGSJooun3nt\",\"yv7c4H2jimSKHEjtG\",\"wBDcgF2qB7FQRuRBd\",\"yXGiiSAR5nBHnH3yr\",\"gXTAie79kiw28tx5u\",\"sjngcczFeMS6jJ28T\",\"AeJSxRqw2dJZuGvdk\",\"oMfq73A434YWhSuWQ\",\"8Xx8nWXRydHDBGfQf\",\"P5BhjZxyeHQYTNyB9\",\"jXTnL3JatkKjoifyb\",\"FTHXj9Rfx9wdujSzy\",\"mQKWauR6b252TmdX4\",\"dcW9oK2uRo8h8mBe2\",\"jfBuvNcWa9n75FnDv\",\"Cczga7ES9qthpBPBf\",\"RGN3QTb5LXj4ZPPkj\",\"9vyjn4WyWtJ6o2wop\",\"gBGjCfJvPHswDM5JQ\",\"bur3yQ8s34zqKGEro\",\"buX4mCQhtXCfBjeno\",\"zZfMwLuoERGmybgib\",\"8qNSPHZBpmjSTt3tH\",\"DkSMZ3jZLkwviKb9g\",\"wFRLGjA56kj7xyhmv\",\"srJ34BaybkQh3qRkM\",\"xEX3TDY6C2h82dJTn\",\"KsYk4jsRLMz2ToPco\",\"gMq9CYkqMXNmFhmtF\",\"T2vhHPhRR96hRizq8\",\"jCjCvyhqhpebkJn34\",\"563onSvqgjToY79ah\",\"PJu3WcTpfRrvHfQiS\",\"J7epB3qSQJ2E8vWkY\",\"rWhXHhzF4W8bea6LP\",\"KMR6vNzvSKMA2cXnK\",\"xW9nC9h6p77YT2iso\",\"hhxjQREtmHSheH9Pj\",\"CJNyy2qPh76QbXr94\",\"unqzSsxpxj9sZ7rbD\",\"bNNzujyLbK9o4sRwu\",\"FxPDKKibxnZjGJLs6\",\"YTRAyZFtn9m68HBLK\",\"nFbmNzMQ38TncmfQX\"],\"quality\":[3,4,4,5,5,4,5,4,5,5,3,4]},\"complaints\":{\"total\":0,\"reasons\":[],\"skippers\":[\"BkPgkDQGHm66X4Qai\"]},\"instructions\":{\"score\":-2.8500000000000063,\"voters\":[\"3qnQMqMyeZJRsot4v\",\"K7mLGFHeSPCMCtqG5\",\"LfR9Bopm57BMNNnkp\",\"aW8Qb8d3hAsWp2rWn\",\"aM2ffejykkJvpL3S9\",\"RMDuiBig5ezfHw5C9\",\"ckWAFvbGaAwGfQPpK\",\"dYXHck6zbpzPTx8K4\",\"kTdthSEZvrBsz9QxW\",\"nnFK8rFQHfkQ2AK4Z\",\"dqRbqXFDdoEssteHB\",\"j9gg82Bp2L7nw7DyJ\",\"6RMkkFjAmNZgqm8CC\",\"opqjov7Scn6enW83c\",\"RYCGMx3ZMxB9nZkcq\",\"NQ287FZrfSY9Swn2F\",\"NBQGWwxT5PqBfJ2jq\",\"n9PZCXcWTygjaDsXs\",\"Jwoe6heepP8r77Doj\",\"sH88ha9vSeLkAYYEX\",\"pzbdsjEzBFfg4EfW2\",\"q8EdjfGRqRpzZxmBG\",\"ebndzZQAJZFykHqiE\"]},\"tests\":{\"score\":1.65,\"voters\":[\"NQ287FZrfSY9Swn2F\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.25,\"family\":[{\"_id\":\"ixW8MyxCrKXjAQ6fF\",\"language\":\"cpp\"},{\"_id\":\"SXeEZPxDM9Y5HzLvw\",\"language\":\"csharp\"},{\"_id\":\"n7kbvMp5zHRmRbFQF\",\"language\":\"java\"},{\"_id\":\"xXJLZry3vYd4erPct\",\"language\":\"javascript\"},{\"_id\":\"jtjZo9WmMwYtx3fig\",\"language\":\"php\"},{\"_id\":\"RTZRnXCJkfALTTdqt\",\"language\":\"python3\"},{\"_id\":\"hidbtXbdnMj2oNW86\",\"language\":\"ruby\"},{\"_id\":\"YDgGon8cSyC7y52q8\",\"language\":\"swift\"}]}}"]