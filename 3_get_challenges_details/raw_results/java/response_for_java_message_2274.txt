a["{\"msg\":\"result\",\"id\":\"694\",\"result\":{\"_id\":\"NwSd26PwgggJquov3\",\"author\":\"Edward Clark\",\"authorId\":\"3pdgguqZgNDSAJSGm\",\"code\":\"public class Challenge {\\n\\tpublic static int longestRun(int[] arr) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":2.7027027027027026,\"familyId\":\"Ymm75mEm9qZx3nsuF\",\"instructions\":\"A **consecutive-run** is a list of adjacent, consecutive integers. This list can be either increasing or decreasing. Create a function that takes an array of numbers and returns the length of the longest **consecutive-run**.\\n\\nTo illustrate:\\n\\n```\\nlongestRun([1, 2, 3, 5, 6, 7, 8, 9]) ➞ 5\\n// Two consecutive runs: [1, 2, 3] and [5, 6, 7, 8, 9] (longest).\\n```\\n\\n### Examples\\n```\\nlongestRun([1, 2, 3, 10, 11, 15]) ➞ 3\\n// Longest consecutive-run: [1, 2, 3].\\n\\nlongestRun([5, 4, 2, 1]) ➞ 2\\n// Longest consecutive-run: [5, 4] and [2, 1].\\n\\nlongestRun([3, 5, 7, 10, 15]) ➞ 1\\n// No consecutive runs, so we return 1.\\n```\\n\\n### Notes\\nIf there aren't any consecutive runs (there is a gap between each integer), return `1`.\",\"lab\":\"import static org.junit.Assert.assertEquals;\\nimport org.junit.Test;\\n\\n/**\\n * @author edwardclark\\n**/\\n\\npublic class ChallengeTest {\\n\\t@Test\\n\\tpublic void test1() {\\n\\t\\tassertEquals(5, Challenge.longestRun(new int[]{1, 2, 3, 5, 6, 7, 8, 9}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test2() {\\n\\t\\tassertEquals(3, Challenge.longestRun(new int[]{1, 2, 3, 10, 11, 15}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test3() {\\n\\t\\tassertEquals(7, Challenge.longestRun(new int[]{-7, -6, -5, -4, -3, -2, -1}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test4() {\\n\\t\\tassertEquals(2, Challenge.longestRun(new int[]{3, 5, 6, 10, 15}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test5() {\\n\\t\\tassertEquals(1, Challenge.longestRun(new int[]{3, 5, 7, 10, 15}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test6() {\\n\\t\\tassertEquals(5, Challenge.longestRun(new int[]{5, 4, 3, 2, 1}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test7() {\\n\\t\\tassertEquals(2, Challenge.longestRun(new int[]{5, 4, 2, 1}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test8() {\\n\\t\\tassertEquals(2, Challenge.longestRun(new int[]{10, 9, 0, 5}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test9() {\\n\\t\\tassertEquals(3, Challenge.longestRun(new int[]{1, 2, 3, 2, 1}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() {\\n\\t\\tassertEquals(5, Challenge.longestRun(new int[]{10, 9, 8, 7, 6, 2, 1}));\\n\\t}\\n}\",\"language\":\"java\",\"summary\":\"A consecutive-run is a list of adjacent, consecutive integers. This list can be either increasing or decreasing. Create a function that takes an array of numbers and returns the length of the longest consecutive-run.\\n\\nTo illustrate:\\n\\nlongestRun([1, 2, 3, 5, 6, 7, 8, 9]) ➞ 5\\n// Two consecutive runs: [1, 2, 3] and [5, 6, 7, 8, 9] (longest).\\n\\nExamples\\nlongestRun(\",\"tags\":[\"arrays\",\"control_flow\",\"logic\",\"loops\"],\"timestamp\":{\"$date\":1570752946446},\"title\":\"Longest Consecutive Run\",\"stats\":{\"completed\":{\"total\":87,\"ratings\":[3,3,3,3,3,4,5,3,5,4,2,0,2,1,2,4,3,3,2,2,0,2,2,2,4,1,4,2,2,3,4,1,2,3,2,2,3,1,2,3,2,3,4,2,1,4,4,3,4,5,2,4,3,1,3,3,2,4,3,3,3,2,2,3,3,3,3,2,4,2,4,3,2,2],\"rators\":[\"3pdgguqZgNDSAJSGm\",\"hZr4qXRsSumkpJXK9\",\"ayRyk4SwCoAhgP8Pe\",\"fQCHGFe43dEtqjEFT\",\"HsFc9PgmpP2X9Fwh9\",\"2NJuDfSqdrF8kHHni\",\"SnY7WidXJoAyyuPuA\",\"Yhbf2T4Wqy9SupY3M\",\"vRXuYYBNuHEQ29fbm\",\"n6N2dYX8MghgDtjx7\",\"YF79LnTdprobbYY5v\",\"Prw5Jq38wrSoj5QSF\",\"Es4eX2stRpyoXeC7f\",\"fZky27mpbfX7soJKa\",\"9aHkSrEhWL7Tp928N\",\"kXEfD7xxEyWd7oxxL\",\"ko7oJ85JMftgcbkrr\",\"wYYMNPe8nSiJFbvJw\",\"2PR653L4KSN97r534\",\"4RHx3H8EwP2oboW8e\",\"rehehi2Tr2mwaEoJE\",\"AyrEvM2GLX2jqM772\",\"A9eMaKGSpao4bJTdi\",\"jRqY4i8gPemsZMBGf\",\"D7dpRtRQDmteDSAXv\",\"gGnDsJz5hr2t9MKCF\",\"nT2obmAiFzdTPZW7A\",\"iWQBC4rxuCBazvLqC\",\"feubnquqgyoq3sa3Q\",\"L6t3XwKxrTZtQWgKf\",\"hMgKTXTyHbrdnegBT\",\"oMLSgpSFQnY4ui8cB\",\"fZjkX29nhRTWWb75k\",\"82weQfHHmno4Mq4X7\",\"Y8fG59oLxqYKDNSsH\",\"Gu3qBdQH5RFdHgRWQ\",\"Wf7nCHS4Gq5tx659h\",\"SbietffGJSuysY2Ge\",\"uRgbrK32AffPh4eQd\",\"cNkiQaAx5iZZy7wz5\",\"8jd8xeC92JXT5WTKk\",\"gJbvbqosimaP4ZAYb\",\"DkSMZ3jZLkwviKb9g\",\"TrquEHytntLKHA4m2\",\"jyoLggHk8xQKZuoQC\",\"LHaWZq59KWgozbwed\",\"nsXK5zXCe9o7CFPz6\",\"BEjoBzgdBkGbGHJkv\",\"k63LjKkX5p7SYng7C\",\"imoNrk36ozReP939p\",\"4RsakkyRXyYGwFxEa\",\"NzJKK8Cuf3bcqZfcw\",\"XTuxCoKrN9DZ7zaQx\",\"kgsBgPWvzknx3BEjQ\",\"mGaEDPw5FsDb3vdnq\",\"QS45qu2DFXcCqpAnB\",\"Ym8AjbKGSJooun3nt\",\"MBEwq8srjd2oA5W58\",\"azAzSkvJd7eyXY9x9\",\"N3HLmYG9RSbwEbnv8\",\"gXTAie79kiw28tx5u\",\"hcFuudsqE6jKFyavN\",\"mQKWauR6b252TmdX4\",\"NsbHPeWBtAonYNXZc\",\"9o7Sp5AvxK75cQ3jD\",\"rWhXHhzF4W8bea6LP\",\"psZB2zLasaMgtf3Tb\",\"p2woPCQKXuWJCwffJ\",\"zza5WjC8QrHcoDZBF\",\"LNCb5rksJLJ43L4Nw\",\"rhS8qXRjZcpDXkwnE\",\"T6hRjofbdNXqNfgiu\",\"8jKygzZc5ssn7EtkG\",\"KMR6vNzvSKMA2cXnK\",\"2NJZbusRvu3eJ4tHu\",\"sxci7DYKNa6q22Sjq\",\"wFRLGjA56kj7xyhmv\"],\"quality\":[5,5,3,4,5,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.625,\"family\":[{\"_id\":\"ivgSXDHDJ2oLhbR4c\",\"language\":\"cpp\"},{\"_id\":\"NwSd26PwgggJquov3\",\"language\":\"java\"},{\"_id\":\"J3HA3p3enpxnMJCmd\",\"language\":\"javascript\"},{\"_id\":\"X9CsA6955cKRApBNH\",\"language\":\"python3\"},{\"_id\":\"jg6pGB2REnk5PzCsm\",\"language\":\"ruby\"}]}}"]