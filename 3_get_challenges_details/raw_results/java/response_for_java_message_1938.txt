a["{\"msg\":\"result\",\"id\":\"524\",\"result\":{\"_id\":\"NGnsMw8CG8gxEFW7w\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"public class Challenge {\\n  public static boolean balanced(String word) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":2.0792079207920793,\"familyId\":\"QFFSpvuhkhHX44wCF\",\"instructions\":\"We can assign a value to each character in a word, based on their position in the alphabet (a = 1, b = 2, ... , z = 26).  A **balanced word** is one where the sum of values on the left-hand side of the word equals the sum of values on the right-hand side. For odd length words, the middle character (balance point) is ignored.\\n\\nWrite a function that returns `true` if the word is balanced, and `false` if it's not.\\n\\n### Examples\\n```\\nbalanced(\\\"zips\\\") ➞ true\\n// \\\"zips\\\" = \\\"zi|ps\\\" = 26+9|16+19 = 35|35 = true\\n\\nbalanced(\\\"brake\\\") ➞ false\\n// \\\"brake\\\" = \\\"br|ke\\\" = 2+18|11+5 = 20|16 = false\\n```\\n\\n### Notes\\n- All words will be lowercase, and have a minimum of 2 characters.\\n- Palindromic words will always be balanced.\",\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n  @Test\\n  public void test1() {\\n    assertEquals(false, Challenge.balanced(\\\"at\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test2() {\\n    assertEquals(false, Challenge.balanced(\\\"forgetful\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test3() {\\n    assertEquals(true, Challenge.balanced(\\\"vegetation\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test4() {\\n    assertEquals(false, Challenge.balanced(\\\"disillusioned\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test5() {\\n    assertEquals(true, Challenge.balanced(\\\"abstract\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test6() {\\n    assertEquals(false, Challenge.balanced(\\\"clever\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test7() {\\n    assertEquals(true, Challenge.balanced(\\\"seasoning\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test8() {\\n    assertEquals(false, Challenge.balanced(\\\"measure\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test9() {\\n    assertEquals(true, Challenge.balanced(\\\"conditionalities\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test10() {\\n    assertEquals(false, Challenge.balanced(\\\"uptight\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test11() {\\n    assertEquals(false, Challenge.balanced(\\\"ticket\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test12() {\\n    assertEquals(false, Challenge.balanced(\\\"calculate\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test13() {\\n    assertEquals(false, Challenge.balanced(\\\"join\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test14() {\\n    assertEquals(true, Challenge.balanced(\\\"anesthesiologies\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test15() {\\n    assertEquals(false, Challenge.balanced(\\\"command\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test16() {\\n    assertEquals(true, Challenge.balanced(\\\"graphite\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test17() {\\n    assertEquals(true, Challenge.balanced(\\\"quadratically\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test18() {\\n    assertEquals(false, Challenge.balanced(\\\"right\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test19() {\\n    assertEquals(true, Challenge.balanced(\\\"fossil\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test20() {\\n    assertEquals(false, Challenge.balanced(\\\"sparkling\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test21() {\\n    assertEquals(true, Challenge.balanced(\\\"dolphin\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test22() {\\n    assertEquals(true, Challenge.balanced(\\\"baseball\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test23() {\\n    assertEquals(false, Challenge.balanced(\\\"immense\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test24() {\\n    assertEquals(true, Challenge.balanced(\\\"pattern\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test25() {\\n    assertEquals(false, Challenge.balanced(\\\"hand\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test26() {\\n    assertEquals(true, Challenge.balanced(\\\"radar\\\"));\\n  }\\n\\n\\t@Test\\n\\tpublic void test27() {\\n\\t\\tassertEquals(false, Challenge.balanced(\\\"oven\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test28() {\\n\\t\\tassertEquals(true, Challenge.balanced(\\\"immutability\\\"));\\n\\t}\\n\\t\\n\\t@Test\\n  public void test29() {\\n    assertEquals(true, Challenge.balanced(\\\"kayak\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test30() {\\n    assertEquals(true, Challenge.balanced(\\\"bartender\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test31() {\\n    assertEquals(false, Challenge.balanced(\\\"weight\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test32() {\\n    assertEquals(true, Challenge.balanced(\\\"lightbulbs\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test33() {\\n    assertEquals(true, Challenge.balanced(\\\"tail\\\"));\\n  }\\n}\",\"language\":\"java\",\"summary\":\"We can assign a value to each character in a word, based on their position in the alphabet (a = 1, b = 2, ... , z = 26).  A balanced word is one where the sum of values on the left-hand side of the word equals the sum of values on the right-hand side. For odd length words, the middle character (balance point) is ignored.\\n\\nWrite a function that returns true if \",\"tags\":[\"strings\",\"validation\"],\"timestamp\":{\"$date\":1568617531036},\"title\":\"Balanced Words\",\"stats\":{\"completed\":{\"total\":124,\"ratings\":[3,3,3,3,3,2,4,3,2,4,5,2,1,1,3,2,2,2,4,0,3,2,4,1,1,4,2,2,3,1,2,2,0,3,2,3,3,3,0,0,2,1,2,2,3,0,2,1,3,3,1,1,2,1,0,1,0,2,2,3,3,1,3,2,2,2,2,2,2,3,1,1,3,2,1,2,3,3,3,1,2,2,1,1,3,1,3,2,2,3,1,1,2,2,3,4,2,2,3,2,1],\"rators\":[\"3pdgguqZgNDSAJSGm\",\"XTuxCoKrN9DZ7zaQx\",\"fQCHGFe43dEtqjEFT\",\"iWTjtH9SLKBa9fN7e\",\"SnY7WidXJoAyyuPuA\",\"hZr4qXRsSumkpJXK9\",\"y9ggmzbSDzFvcnDzS\",\"6qyzL2iceT8a7bos4\",\"sxci7DYKNa6q22Sjq\",\"YF79LnTdprobbYY5v\",\"ATqGFvYyFe3M9oHnv\",\"dpeLk7HeaBeTY2ssZ\",\"zhDMJG38iQgjykEbj\",\"hxi9vPuDgrQv4m86Z\",\"3gxJoNp59B4eoyyed\",\"yazNfwgLx7jSAZ8Tv\",\"pzz8vFouna6JTTAiW\",\"Zzp8oNRSgmBgLD9Zd\",\"BSDtieYGg6H7evesT\",\"urckS99caSjRxPBvp\",\"dGscPdzKKe2p4qYzs\",\"k6gFxcu8xWXTFc649\",\"2NJuDfSqdrF8kHHni\",\"yN2kCnaSsS77MqqtL\",\"Prw5Jq38wrSoj5QSF\",\"2cbTKYSPwFJBoEtay\",\"sy8qpAykttp6nMDyY\",\"XbBsZ7vSHdw88tibi\",\"CYt2jTCEuK9dYWruk\",\"q63ftpFKigNsDtCdv\",\"iJnqYBp3CLPXhHxpY\",\"Ha5J49rhojBRy3BaM\",\"CLmJduqJHX83dM4Pd\",\"8J2Dqqz9PaFufQzwY\",\"J9zJq7PMGb6mqzcHW\",\"yK7zzK2aGJwuWKHRL\",\"wYYMNPe8nSiJFbvJw\",\"Es4eX2stRpyoXeC7f\",\"NsbHPeWBtAonYNXZc\",\"XPDqgbh7XuX7Yfpuq\",\"vRXuYYBNuHEQ29fbm\",\"gJbvbqosimaP4ZAYb\",\"cjxsqXfkAPoadmppi\",\"TrquEHytntLKHA4m2\",\"4RHx3H8EwP2oboW8e\",\"jyoLggHk8xQKZuoQC\",\"rehehi2Tr2mwaEoJE\",\"imoNrk36ozReP939p\",\"5seiNqw6ZXoF2GRRd\",\"pBMXMQem6BpSeooYT\",\"62Q2HcfLE6SGphZkT\",\"T2vhHPhRR96hRizq8\",\"k63LjKkX5p7SYng7C\",\"Wf7nCHS4Gq5tx659h\",\"mfm3gB39arY8Rjb2y\",\"saYNZofE7LBjyf4Ee\",\"4RsakkyRXyYGwFxEa\",\"hx3ZWiCKNtqwMWFCt\",\"rLeTf4ZXHr6GbKWys\",\"GPhEJGaG7q64YyYur\",\"82weQfHHmno4Mq4X7\",\"iq55QasecYJXKz8rx\",\"9SQHStGwkYgth3dY2\",\"azAzSkvJd7eyXY9x9\",\"yXGiiSAR5nBHnH3yr\",\"DzvdGwHEjqsX7wyKr\",\"Ym8AjbKGSJooun3nt\",\"gXTAie79kiw28tx5u\",\"rWhXHhzF4W8bea6LP\",\"mQKWauR6b252TmdX4\",\"8Xx8nWXRydHDBGfQf\",\"jXTnL3JatkKjoifyb\",\"bq7pL9QxyvHFTx7oW\",\"iZHowotDLiZumkTqy\",\"sgKJeTKjP9Y94CEAP\",\"dnbrMKPiyQZZd5ist\",\"YhJL55Yd3w9MhvDo4\",\"RGN3QTb5LXj4ZPPkj\",\"zza5WjC8QrHcoDZBF\",\"u32SBPaXSZuC76sF4\",\"LNCb5rksJLJ43L4Nw\",\"uNbmzzmop6Ebp3xTu\",\"c7uBxu2rgY77H5d79\",\"rhS8qXRjZcpDXkwnE\",\"zKbitYtjWujqrnDaP\",\"uWGrKuSb6e3fCrDEH\",\"dcW9oK2uRo8h8mBe2\",\"4ySzqKC5s3ZRpG9di\",\"CggGfsERnPKGupFWp\",\"htXCitorobtqYymjN\",\"buX4mCQhtXCfBjeno\",\"wFRLGjA56kj7xyhmv\",\"a49eNnfRwSMxsDJXf\",\"GsrjAqoAdLATJH9qD\",\"jCjCvyhqhpebkJn34\",\"9vyjn4WyWtJ6o2wop\",\"2NJZbusRvu3eJ4tHu\",\"mS4t7GChGHwJ65Lfk\",\"KMR6vNzvSKMA2cXnK\",\"SE5G2Caf3btnuGmz6\",\"6jSroRS8AKKwtWEaT\",\"ckQwFFWyLXmDQAaCn\",\"evq99nYD69bpbFG9f\",\"JJbvewX2tn7aQXHqu\",\"dELmKkznAydytJTQ2\",\"y2TSaX898ZdwFhAQA\",\"KnJsGtPq4McAfr23H\",\"unqzSsxpxj9sZ7rbD\",\"uw47663LqPME8btaA\",\"FxPDKKibxnZjGJLs6\"],\"quality\":[5,5,5,5,5,3,5,4,5,3,3,4,3,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"isHidden\":false,\"quality\":4.285714285714286,\"family\":[{\"_id\":\"WC2QgAvWYCgk6L36j\",\"language\":\"cpp\"},{\"_id\":\"NGnsMw8CG8gxEFW7w\",\"language\":\"java\"},{\"_id\":\"8QTBwLzAdaM8wkrXu\",\"language\":\"javascript\"},{\"_id\":\"55f9SDtxuLgSaJdcK\",\"language\":\"python3\"},{\"_id\":\"DG4mYHXNYodQaS8MY\",\"language\":\"ruby\"}]}}"]