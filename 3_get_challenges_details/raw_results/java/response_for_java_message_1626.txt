a["{\"msg\":\"result\",\"id\":\"372\",\"result\":{\"_id\":\"DwMxxFrzZ5eZfBSGL\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class ListRanges {\\n  public static int[] inclusiveArray(int startNum,int endNum) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":1.504201680672269,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"9259vjs5RSvYEifSa\",\"instructions\":\"Write a function that, given the start `startNum` and end `endNum` values, return an array containing all the numbers **inclusive** to that range. See examples below.\\n\\n### Examples\\n```\\ninclusiveArray(1, 5) ➞ [1, 2, 3, 4, 5]\\n\\ninclusiveArray(2, 8) ➞ [2, 3, 4, 5, 6, 7, 8]\\n\\ninclusiveArray(10, 20) ➞ [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\\n\\ninclusiveArray(17, 5) ➞ [17]\\n```\\n\\n### Notes\\n- The numbers in the array are sorted in ascending order.\\n- If `startNum` is greater than `endNum`, return an array with the higher value. See example #4.\\n- A recursive version of this challenge can be found [here](https://edabit.com/challenge/uqZD99bDGx3LnSv6w).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"/** \\n======================================= \\nTestGen 2.1 for JUnit 4.13.0 \\t\\t\\nTest Case: ListRanges::inclusiveArray \\nTimestamp: 11/6/2020 2:58:46 AM \\n--------------------------------------- \\n® DARKKO 2020 © \\n======================================= \\n**/ \\n\\nimport static org.junit.Assert.assertArrayEquals; \\nimport org.junit.Test; \\n\\npublic class ListRangesTest { \\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertArrayEquals(new int[] {1, 2, 3, 4, 5}, ListRanges.inclusiveArray(1, 5));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertArrayEquals(new int[] {2, 3, 4, 5, 6, 7, 8}, ListRanges.inclusiveArray(2, 8));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertArrayEquals(new int[] {10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, ListRanges.inclusiveArray(10, 20));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertArrayEquals(new int[] {17}, ListRanges.inclusiveArray(17, 5));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertArrayEquals(new int[] {40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50}, ListRanges.inclusiveArray(40, 50));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertArrayEquals(new int[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41}, ListRanges.inclusiveArray(1, 41));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertArrayEquals(new int[] {24}, ListRanges.inclusiveArray(24, 17));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertArrayEquals(new int[] {11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66}, ListRanges.inclusiveArray(11, 66));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test09() { \\n\\t\\tassertArrayEquals(new int[] {9}, ListRanges.inclusiveArray(9, 3));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() { \\n\\t\\tassertArrayEquals(new int[] {6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, ListRanges.inclusiveArray(6, 16));\\n\\t}\\n}\",\"language\":\"java\",\"quality\":4.928571428571429,\"stats\":{\"completed\":{\"ratings\":[1,1,1,1,1,1,2,1,1,0,2,1,1,2,3,2,2,2,3,2,2,2,1,1,0,2,1,2,1,2,1,2,2,0,2,2,1,1,2,2,2,2,0,1,1,2,2,1,1,2,1,2,2,0,1,0,0,1,2,2,2,2,1,1,2,1,1,1,2,2,2,2,2,1,3,4,0,2,1,2,2,1,1,0,0,2,0,2,2,2,2,1,2,1,0,0,3,5,1,0,2,2,2,2,1,1,1,2,1,2,3,2,4,2,1,0,2,2,2],\"quality\":[5,5,5,5,5,5,5,5,5,5,4,5,5,5],\"rators\":[\"a777e8chPvJkY3tKa\",\"mQKWauR6b252TmdX4\",\"Es4eX2stRpyoXeC7f\",\"8Xx8nWXRydHDBGfQf\",\"AeJSxRqw2dJZuGvdk\",\"YBAJprCv2dJtqvegD\",\"jb9RLyyuo565bKDzN\",\"P5BhjZxyeHQYTNyB9\",\"GiqPq82is4HGWdZHA\",\"C9yBWYcZsjmJYww3K\",\"rMGPed8A8uY8kbvGG\",\"gXTAie79kiw28tx5u\",\"jXTnL3JatkKjoifyb\",\"Ym8AjbKGSJooun3nt\",\"rGpPd6PvpzLaqps4g\",\"azAzSkvJd7eyXY9x9\",\"rWhXHhzF4W8bea6LP\",\"PkAdXnvefx66ye3W7\",\"jyoLggHk8xQKZuoQC\",\"BbcH2NLjE4tKAZ3wR\",\"yd5PakB2z33q2JrTZ\",\"qaPjAANdnxFnWfj5d\",\"jm4tNFjsgYKW5TZfp\",\"fbgn5575LS3jsxABM\",\"unNqQjSHzkb4pCzEu\",\"DzvdGwHEjqsX7wyKr\",\"Nb6LYPoQP6KJZt8mz\",\"kabqCExooax4JEQHE\",\"hD6sfDtntpqT8NR2o\",\"tyLS9T6YMfg9fMtYJ\",\"hDeaTsprkH6CmvSAR\",\"dcW9oK2uRo8h8mBe2\",\"oMZovHkR6QqNvQwyc\",\"pi76g3eRpnKrhee2a\",\"mFfahhFdaoQPkzYdh\",\"Cczga7ES9qthpBPBf\",\"a49eNnfRwSMxsDJXf\",\"RGN3QTb5LXj4ZPPkj\",\"9vyjn4WyWtJ6o2wop\",\"82weQfHHmno4Mq4X7\",\"HRpiKYAupsreNJDNS\",\"vRXuYYBNuHEQ29fbm\",\"r6mkxEZEBtSaKdpge\",\"GkYtSbQuheBF4Enys\",\"mG8HqKiAQFTdRZthG\",\"gBGjCfJvPHswDM5JQ\",\"bur3yQ8s34zqKGEro\",\"buX4mCQhtXCfBjeno\",\"zZfMwLuoERGmybgib\",\"mDWNyaaQ9hvPCRzSd\",\"kNvFp85ecRXhHX6Ey\",\"8qNSPHZBpmjSTt3tH\",\"DkSMZ3jZLkwviKb9g\",\"hhxjQREtmHSheH9Pj\",\"tdxi2QkC26vf5P3vG\",\"4ySzqKC5s3ZRpG9di\",\"vg2wBRPo4RdodaRGw\",\"JYZRcKKQqf3vx9X58\",\"HsFc9PgmpP2X9Fwh9\",\"6rvJwN4mcX7iYGjY7\",\"SPpkwPzFqD7aRGXHG\",\"c7uBxu2rgY77H5d79\",\"sxci7DYKNa6q22Sjq\",\"wFRLGjA56kj7xyhmv\",\"Yohr2MmAyaWGMbB35\",\"btabi3PdyisuY5tn9\",\"RBjTdBYHmyoPMvAow\",\"Qz6fMMgv45JcyweAL\",\"Mtk9SJuK9B4xdmetM\",\"mc7wRrHbq7QgShSTH\",\"fcFy3r8FNMvPCbeYG\",\"gz3NpPk2P3GYqSTWc\",\"HXbTKW3jmmyRAsKrr\",\"HFqNnwNwXCb8GioKi\",\"Cv96JXzHZvMoA7ALP\",\"hpWyBB2naZuRkkiac\",\"Rf264x8hcbtPhXTin\",\"34bE6mric984YYLZQ\",\"rhS8qXRjZcpDXkwnE\",\"PeXa8qcJpL2q6SNud\",\"r3GNSq3oReDjMQrhL\",\"4tDcimzxSmkfHEwBE\",\"mfm3gB39arY8Rjb2y\",\"563onSvqgjToY79ah\",\"XXR58S7QFpNRmfaPd\",\"xEX3TDY6C2h82dJTn\",\"srJ34BaybkQh3qRkM\",\"EtLpopwsya39oXZjE\",\"htXCitorobtqYymjN\",\"s7kgsgnTYGspwBYb5\",\"zEiHincPELnvffKbq\",\"J9zJq7PMGb6mqzcHW\",\"jCjCvyhqhpebkJn34\",\"cR3ibTMxLyEdDFCHY\",\"dXJxmZLzFZtHay7Pi\",\"4za87fFyw9qxkD936\",\"J9RJf8bBmB7MpzF3m\",\"6Fz62jqSTF9dnHns7\",\"WNAstuoBy6yyd2YLp\",\"7bi35WnrMRXZbgpL9\",\"QwkJidQW7vvEY6TLp\",\"cgCQDs9i7yChKeAjE\",\"u9CXkXMyoxEPvLXCW\",\"TAYCEE8zNN9aBTR7F\",\"mn8u8LDBvWb7pnCoE\",\"iDMi5Qa4Z2PcthpJA\",\"ZBgQ5FSRY7DQsQbkF\",\"J7epB3qSQJ2E8vWkY\",\"B4pxRqzo43M7S8FbP\",\"a5HboyfMw9hiFwMMF\",\"6wSDRXXLqLh6KYSy6\",\"2NJZbusRvu3eJ4tHu\",\"KMR6vNzvSKMA2cXnK\",\"SE5G2Caf3btnuGmz6\",\"xW9nC9h6p77YT2iso\",\"m2Z5uhq8sHW8M8HaP\",\"nDDNHWdGDaR83aysS\",\"TjEfsEyuxhqADbD2M\",\"vAh63eGRwkuJtoP8v\",\"zR7cYpqJ4swcAqgzD\",\"CJNyy2qPh76QbXr94\",\"aEjJGELGgTubRwtQK\",\"unqzSsxpxj9sZ7rbD\",\"FxPDKKibxnZjGJLs6\",\"uw47663LqPME8btaA\",\"XH6378Zm3WBm679yx\",\"Qv2jEtTnFCXX7cdd3\",\"nFbmNzMQ38TncmfQX\"],\"total\":141},\"flags\":0},\"summary\":\"Write a function that, given the start startNum and end endNum values, return an array containing all the numbers inclusive to that range. See examples below.\\n\\nExamples\\ninclusiveArray(1, 5) ➞ [1, 2, 3, 4, 5]\\n\\ninclusiveArray(2, 8) ➞ [2, 3, 4, 5, 6, 7, 8]\\n\\ninclusiveArray(10, 20) ➞ [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\\n\\ninclusiveArray(17, 5) ➞ [17]\\n\\nNotes\",\"tags\":[\"arrays\",\"numbers\",\"math\"],\"timestamp\":{\"$date\":1604922310439},\"title\":\"Inclusive Array Ranges\",\"family\":[{\"_id\":\"DwMxxFrzZ5eZfBSGL\",\"language\":\"java\"},{\"_id\":\"5sdtyMNdLw2FK4fHp\",\"language\":\"javascript\"},{\"_id\":\"bHTb8p5nybCrjFPze\",\"language\":\"python3\"}]}}"]