a["{\"msg\":\"result\",\"id\":\"766\",\"result\":{\"_id\":\"k3pg4uMgKcDA95sqb\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class CoffeeShop {\\n\\t\\n}\\n\\nclass MenuItem {\\n\\tprivate String item;\\n\\tprivate String type;\\n\\tprivate double price;\\n\\t\\n\\tpublic MenuItem(String item, String type, double price) {\\n\\t\\tthis.item = item;\\n\\t\\tthis.type = type;\\n\\t\\tthis.price = price;\\n\\t}\\n\\n\\tpublic String getItem() { return item; }\\n\\tpublic String getType() { return type; }\\n\\tpublic double getPrice() { return price; }\\n}\",\"difficulty\":3.051282051282051,\"familyId\":\"98yLJQdHBTnwFLnbF\",\"instructions\":\"Write a **class** called **CoffeeShop**, which has **three instance variables**:\\n\\n1. **name** : a string (basically, of the shop)\\n2. **menu** : an array of items (of type MenuItem), with each item containing the **item** (name of the item), **type** (whether a _food_ or a _drink_) and **price**.\\n3. **orders** : an empty array\\n\\nand **seven methods**:\\n\\n1. **addOrder**: adds the **name** of the item to the end of the **orders** array if it exists on the **menu**. Otherwise, return `\\\"This item is currently unavailable!\\\"`\\n2. **fulfillOrder**: if the **orders** array is **not empty**, return `\\\"The {item} is ready!\\\"`. If the **orders** array is empty, return `\\\"All orders have been fulfilled!\\\"`\\n3. **listOrders**: returns the list of **orders** taken, otherwise, an **empty** array.\\n4. **dueAmount**: returns the total amount due for the **orders** taken.\\n5. **cheapestItem**: returns the **name** of the cheapest item on the menu.\\n6. **drinksOnly**: returns only the _item_ **names** of _type_ **drink** from the menu.\\n7. **foodOnly**: returns only the _item_ **names** of _type_ **food** from the menu.\\n\\n**IMPORTANT**: Orders are fulfilled in a **FIFO** (first-in, first-out) order.\\n\\n\\n### Examples\\n```\\ntcs.addOrder(\\\"hot cocoa\\\") ➞ \\\"This item is currently unavailable!\\\"\\n// Tesha's coffee shop does not sell hot cocoa\\ntcs.addOrder(\\\"iced tea\\\") ➞ \\\"This item is currently unavailable!\\\"\\n// specifying the variant of \\\"iced tea\\\" will help the process\\n\\ntcs.addOrder(\\\"cinnamon roll\\\") ➞  \\\"Order added!\\\"\\ntcs.addOrder(\\\"iced coffee\\\") ➞ \\\"Order added!\\\"\\ntcs.listOrders ➞ [\\\"cinnamon roll\\\", \\\"iced coffee\\\"]\\n// the list of all the items in the current order\\n\\ntcs.dueAmount() ➞ 2.17\\n\\ntcs.fulfillOrder() ➞ \\\"The cinnamon roll is ready!\\\"\\ntcs.fulfillOrder() ➞ \\\"The iced coffee is ready!\\\"\\ntcs.fulfillOrder() ➞ \\\"All orders have been fulfilled!\\\";\\n// all orders have been presumably served\\n\\ntcs.listOrders() ➞ []\\n// an empty array is returned if all orders have been exhausted\\n\\ntcs.dueAmount() ➞ 0.0\\n// no new orders taken, expect a zero payable\\n\\ntcs.cheapestItem() ➞ \\\"lemonade\\\"\\ntcs.drinksOnly() ➞ [\\\"orange juice\\\", \\\"lemonade\\\", \\\"cranberry juice\\\", \\\"pineapple juice\\\", \\\"lemon iced tea\\\", \\\"vanilla chai latte\\\", \\\"hot chocolate\\\", \\\"iced coffee\\\"]\\ntcs.foodOnly() ➞ [\\\"tuna sandwich\\\", \\\"ham and cheese sandwich\\\", \\\"bacon and egg\\\", \\\"steak\\\", \\\"hamburger\\\", \\\"cinnamon roll\\\"]\\n```\\n\\n### Notes\\nRound off **due amount** up to **two decimal** places.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"/** \\n================================= \\nTestGen 3.1 for JUnit 4.13.0 \\t\\t\\nTest Case: CoffeeShop::CoffeeShop \\nTimestamp: 12/22/2020 07:27:27 PM \\n--------------------------------- \\n® DARKKO 2020 © \\n================================= \\n\\n**/ \\n\\nimport static org.junit.Assert.assertArrayEquals;\\nimport static org.junit.Assert.assertEquals;\\nimport org.junit.Test; \\n\\npublic class CoffeeShopTest { \\n\\t\\n\\t@Test\\n\\tpublic void test01() {\\n\\t\\tMenuItem[] menu = new MenuItem[] {\\n  \\t\\tnew MenuItem(\\\"orange juice\\\", \\\"drink\\\", 2.13), new MenuItem(\\\"lemonade\\\", \\\"drink\\\", 0.85), new MenuItem(\\\"cranberry juice\\\", \\\"drink\\\", 3.36), \\n\\t    new MenuItem(\\\"pineapple juice\\\", \\\"drink\\\", 1.89), new MenuItem(\\\"lemon iced tea\\\", \\\"drink\\\", 1.28), new MenuItem(\\\"apple iced tea\\\", \\\"drink\\\", 1.28), \\n\\t    new MenuItem(\\\"vanilla chai latte\\\", \\\"drink\\\", 2.48), new MenuItem(\\\"hot chocolate\\\", \\\"drink\\\", 0.99), new MenuItem(\\\"iced coffee\\\", \\\"drink\\\", 1.12), \\n\\t    new MenuItem(\\\"tuna sandwich\\\", \\\"food\\\", 0.95), new MenuItem(\\\"ham and cheese sandwich\\\", \\\"food\\\", 1.35), new MenuItem(\\\"bacon and egg\\\", \\\"food\\\", 1.15), \\n\\t    new MenuItem(\\\"steak\\\", \\\"food\\\", 3.28), new MenuItem(\\\"hamburger\\\", \\\"food\\\", 1.05), new MenuItem(\\\"cinnamon roll\\\", \\\"food\\\", 1.05) };\\n    CoffeeShop shop = new CoffeeShop(\\\"Deep Into Coffee\\\", menu, new String[] {});\\n\\t\\n\\t\\tassertEquals(\\\"Order added!\\\", shop.addOrder(\\\"cinnamon roll\\\")); \\n\\t\\tassertEquals(\\\"Order added!\\\", shop.addOrder(\\\"iced coffee\\\"));\\n\\t\\tassertArrayEquals(new String[] {\\\"cinnamon roll\\\", \\\"iced coffee\\\"}, shop.listOrders());\\n\\t\\tassertEquals(2.17, shop.dueAmount(), 6);\\n\\t\\tassertEquals(\\\"The cinnamon roll is ready!\\\", shop.fulfillOrder());\\n\\t\\tassertEquals(\\\"The iced coffee is ready!\\\", shop.fulfillOrder());\\n\\t\\tassertEquals(\\\"All orders have been fulfilled!\\\", shop.fulfillOrder());\\n\\t\\tassertEquals(\\\"This item is currently unavailable!\\\", shop.addOrder(\\\"hot cocoa\\\"));\\n\\t\\tassertEquals(\\\"This item is currently unavailable!\\\", shop.addOrder(\\\"iced tea\\\"));\\n\\t\\tassertArrayEquals(new String[] {}, shop.listOrders());\\n\\t\\tassertEquals(0.0, shop.dueAmount(), 6);\\n\\t\\tassertEquals(\\\"lemonade\\\", shop.cheapestItem());\\n\\t\\tassertArrayEquals(new String[] {\\\"orange juice\\\", \\\"lemonade\\\", \\\"cranberry juice\\\", \\\"pineapple juice\\\", \\\"lemon iced tea\\\", \\\"apple iced tea\\\", \\\"vanilla chai latte\\\", \\\"hot chocolate\\\", \\\"iced coffee\\\"}, shop.drinksOnly());\\n\\t\\tassertArrayEquals(new String[] {\\\"tuna sandwich\\\", \\\"ham and cheese sandwich\\\", \\\"bacon and egg\\\", \\\"steak\\\", \\\"hamburger\\\", \\\"cinnamon roll\\\"}, shop.foodOnly());\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test02() {\\n\\t\\tMenuItem[] menu = new MenuItem[] {\\n\\t\\t  new MenuItem(\\\"turkey english muffin\\\", \\\"food\\\", 7.99), new MenuItem(\\\"avocado toast\\\", \\\"food\\\", 5.05), new MenuItem(\\\"chocolate croissant\\\", \\\"food\\\", 3.00),\\n\\t\\t\\tnew MenuItem(\\\"espresso\\\", \\\"drink\\\", 2.99), new MenuItem(\\\"iced caramel macchiato\\\", \\\"drink\\\", 4.50), new MenuItem(\\\"cortado\\\", \\\"drink\\\", 4.00),\\n\\t\\t  new MenuItem(\\\"nitro cold brew tester\\\", \\\"drink\\\", 8.00) };\\n\\t\\tCoffeeShop shop = new CoffeeShop(\\\"Xavier's\\\", menu, new String[] {});\\n\\n\\t\\tassertEquals(\\\"Order added!\\\", shop.addOrder(\\\"cortado\\\"));\\n\\t\\tassertEquals(4.0, shop.dueAmount(), 6);\\n\\t\\tassertEquals(\\\"The cortado is ready!\\\", shop.fulfillOrder());\\n\\t\\tassertEquals(\\\"All orders have been fulfilled!\\\", shop.fulfillOrder());\\n\\t\\tassertEquals(\\\"Order added!\\\", shop.addOrder(\\\"avocado toast\\\"));\\n\\t\\tassertEquals(5.05, shop.dueAmount(), 6);\\n\\t\\tassertArrayEquals(new String[] {\\\"avocado toast\\\"}, shop.listOrders());\\n\\t\\tassertEquals(\\\"espresso\\\", shop.cheapestItem());\\n\\t\\tassertArrayEquals(new String[] {\\\"espresso\\\", \\\"iced caramel macchiato\\\", \\\"cortado\\\", \\\"nitro cold brew tester\\\"}, shop.drinksOnly());\\n\\t\\tassertArrayEquals(new String[] {\\\"turkey english muffin\\\", \\\"avocado toast\\\", \\\"chocolate croissant\\\"}, shop.foodOnly());\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test03() {\\n\\t\\tMenuItem[] menu = new MenuItem[] {\\n\\t\\t\\tnew MenuItem(\\\"cheeseburger with fries\\\", \\\"food\\\", 5.44),\\n\\t\\t\\tnew MenuItem(\\\"cinnamon roll\\\", \\\"food\\\", 4.99),\\n\\t\\t\\tnew MenuItem(\\\"hot chocolate\\\", \\\"drink\\\", 2.99),\\n\\t\\t\\tnew MenuItem(\\\"lemon tea\\\", \\\"drink\\\", 2.50),\\n\\t\\t\\tnew MenuItem(\\\"iced coffee\\\", \\\"drink\\\", 3.00),\\n\\t\\t  new MenuItem(\\\"vanilla chai latte\\\", \\\"drink\\\", 4.00) };\\n\\t\\tCoffeeShop shop = new CoffeeShop(\\\"Tesha's\\\", menu, new String[] {});\\n\\n\\t\\tassertEquals(\\\"This item is currently unavailable!\\\", shop.addOrder(\\\"hot cocoa\\\"));\\n\\t\\tassertEquals(0.0, shop.dueAmount(), 6);\\n\\t\\tassertEquals(\\\"Order added!\\\", shop.addOrder(\\\"cheeseburger with fries\\\"));\\n\\t\\tassertEquals(\\\"Order added!\\\", shop.addOrder(\\\"lemon tea\\\"));\\n\\t\\tassertEquals(\\\"Order added!\\\", shop.addOrder(\\\"iced coffee\\\"));\\n\\t\\tassertArrayEquals(new String[] {\\\"cheeseburger with fries\\\", \\\"lemon tea\\\", \\\"iced coffee\\\"}, shop.listOrders());\\n\\t\\tassertEquals(10.94, shop.dueAmount(), 6);\\n\\t\\tassertEquals(\\\"The cheeseburger with fries is ready!\\\", shop.fulfillOrder());\\n\\t\\tassertEquals(\\\"The lemon tea is ready!\\\", shop.fulfillOrder());\\n\\t\\tassertEquals(\\\"The iced coffee is ready!\\\", shop.fulfillOrder());\\n\\t\\tassertArrayEquals(new String[] {}, shop.listOrders());\\n\\t\\tassertEquals(\\\"lemon tea\\\", shop.cheapestItem());\\n\\t\\tassertArrayEquals(new String[] {\\\"hot chocolate\\\", \\\"lemon tea\\\", \\\"iced coffee\\\", \\\"vanilla chai latte\\\"}, shop.drinksOnly());\\n\\t\\tassertArrayEquals(new String[] {\\\"cheeseburger with fries\\\", \\\"cinnamon roll\\\"}, shop.foodOnly());\\n\\t}\\n\\n}\\n// end of tests\",\"language\":\"java\",\"quality\":0,\"summary\":\"Write a class called CoffeeShop, which has three instance variables:\\n\\nname : a string (basically, of the shop)\\nmenu : an array of items (of type MenuItem), with each item containing the item (name of the item), type (whether a food or a drink) and price.\\norders : an empty array\\n\\nand seven methods:\\n\\naddOrder: adds the name of the item to the end of the orders a\",\"tags\":[\"classes\",\"objects\"],\"timestamp\":{\"$date\":1608726720271},\"title\":\"Coffee Shop\",\"stats\":{\"completed\":{\"total\":36,\"ratings\":[4,4,4,4,4,3,3,2,2,3,5,0,5,5,2,5,2,5,0,3,3,3,2,3,5,2,2,1,3,3,4,5,5,2,2,3,2,2,2],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"gXTAie79kiw28tx5u\",\"Po3v3dHCk6wYGKMwi\",\"9pqtNWrsTJdZcRbEZ\",\"4pagg6vw2Cjepv7tN\",\"pNtaczpPBxfN5Z9ee\",\"JB36XbEFm26j9S2R6\",\"CvCMHBTZZ6sQMiKCm\",\"wT5gGgvjKc5wz59AQ\",\"7SMEArWYJ6qrq8rGH\",\"nHj7SC5cnmkTApbgY\",\"8GnMMNEBgMHiH48BB\",\"abgWd9zekHFnpYD9G\",\"vRXuYYBNuHEQ29fbm\",\"GvLLKHi7NwAjutdDk\",\"dGJhADFMNr9is6GRP\",\"7ddZQ7LiHcoq6WX3W\",\"XpLj7ZmPsRhfDFGJs\",\"PvWK6XvMrHy7rLnvs\",\"txBNQ5vfF8M4iSYQg\",\"utfSZCFSPmMXrPEmZ\",\"dqCuz3u9wLLRcJrva\",\"CNekPrD9eqAXqsH3h\",\"mq7YMBYeepLSekf3r\",\"zB2CicrHPqoDZNucn\",\"33ucErsy8HqyrXDzS\",\"RwyCNgJocHpsLMseB\",\"uw47663LqPME8btaA\",\"sxci7DYKNa6q22Sjq\",\"LRJchNXWJR2Wef4DW\",\"gthKP8t7rwNsCQfhk\",\"c7ErKgAFQd9iuBybB\",\"ha284n3csExRB2pPy\",\"mmHR9EazNjJ3cCnxK\"]},\"flags\":0},\"editorId\":\"a777e8chPvJkY3tKa\",\"family\":[{\"_id\":\"k3pg4uMgKcDA95sqb\",\"language\":\"java\"},{\"_id\":\"ydgurBgEdGkueNmmp\",\"language\":\"javascript\"},{\"_id\":\"PYEuCAdGJsRS9AABA\",\"language\":\"python3\"},{\"_id\":\"RsciMbmhrJCSkeoq4\",\"language\":\"ruby\"}]}}"]