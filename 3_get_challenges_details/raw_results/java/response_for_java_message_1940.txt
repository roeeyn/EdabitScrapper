a["{\"msg\":\"result\",\"id\":\"527\",\"result\":{\"_id\":\"mc6KcMGkrSWP88dGu\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"public class Challenge {\\n\\tpublic static String removeLeadingTrailing(String n) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":2.0833333333333335,\"familyId\":\"LhoGexCsSgNjcYeni\",\"instructions\":\"Create a function that takes in a *number as a string* `n` and returns the number **without trailing and leading zeros**.\\n\\n- **Trailing Zeros** are the zeros *after* a decimal point which *don't affect the value*\\n(e.g. the *last three* zeros in `3.4000` and `3.04000`).\\n- **Leading Zeros** are the zeros *before* a whole number which *don't affect the value* (e.g. the *first three* zeros in `000234` and `000230`).\\n\\n### Examples\\n```\\nremoveLeadingTrailing(\\\"230.000\\\") ➞ \\\"230\\\"\\n\\nremoveLeadingTrailing(\\\"00402\\\") ➞ \\\"402\\\"\\n\\nremoveLeadingTrailing(\\\"03.1400\\\") ➞ \\\"3.14\\\"\\n\\nremoveLeadingTrailing(\\\"30\\\") ➞ \\\"30\\\"\\n```\\n\\n### Notes\\n- Return a **string**.\\n- If you get a number with `.0` on the end, return the *integer value* (e.g. return `\\\"4\\\"` rather than `\\\"4.0\\\"`).\\n- If the number is `0`, `0.0`, `000`, `00.00`, etc... return `\\\"0\\\"`.\",\"isHidden\":false,\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n  @Test\\n  public void test1() {\\n    assertEquals(\\\"230\\\", Challenge.removeLeadingTrailing(\\\"230.000\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test2() {\\n    assertEquals(\\\"402\\\", Challenge.removeLeadingTrailing(\\\"00402\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test3() {\\n    assertEquals(\\\"3.14\\\", Challenge.removeLeadingTrailing(\\\"03.1400\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test4() {\\n    assertEquals(\\\"30\\\", Challenge.removeLeadingTrailing(\\\"30\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test5() {\\n    assertEquals(\\\"30\\\", Challenge.removeLeadingTrailing(\\\"30.0000\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test6() {\\n    assertEquals(\\\"24340\\\", Challenge.removeLeadingTrailing(\\\"24340\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test7() {\\n    assertEquals(\\\"404040\\\", Challenge.removeLeadingTrailing(\\\"0404040\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test8() {\\n    assertEquals(\\\"0\\\", Challenge.removeLeadingTrailing(\\\"0\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test9() {\\n    assertEquals(\\\"0\\\", Challenge.removeLeadingTrailing(\\\"00\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test10() {\\n    assertEquals(\\\"0\\\", Challenge.removeLeadingTrailing(\\\"0.000000\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test11() {\\n    assertEquals(\\\"0\\\", Challenge.removeLeadingTrailing(\\\"0000.000\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test12() {\\n    assertEquals(\\\"0.0001\\\", Challenge.removeLeadingTrailing(\\\"00.0001\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test13() {\\n    assertEquals(\\\"10000\\\", Challenge.removeLeadingTrailing(\\\"10000\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test14() {\\n    assertEquals(\\\"1345\\\", Challenge.removeLeadingTrailing(\\\"1345\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test15() {\\n    assertEquals(\\\"30.00002\\\", Challenge.removeLeadingTrailing(\\\"30.000020\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test16() {\\n    assertEquals(\\\"200.1900001\\\", Challenge.removeLeadingTrailing(\\\"00200.1900001\\\"));\\n  }\\n}\",\"language\":\"java\",\"summary\":\"Create a function that takes in a number as a string n and returns the number without trailing and leading zeros.\\n\\nTrailing Zeros are the zeros after a decimal point which don't affect the value\\n(e.g. the last three zeros in 3.4000 and 3.04000).\\nLeading Zeros are the zeros before a whole number which don't affect the value (e.g. the first three zeros in 000234\",\"tags\":[\"strings\",\"formatting\",\"regex\",\"numbers\"],\"timestamp\":{\"$date\":1581204644613},\"title\":\"Remove Trailing and Leading Zeros\",\"stats\":{\"completed\":{\"total\":50,\"ratings\":[1,1,1,1,1,3,2,2,3,2,2,2,0,2,2,1,2,1,2,2,1,2,0,3,2,2,2,1,4,2,2,2,2,5,3,1,3,3,3,3,2,3,3,3,4,3,2,1],\"rators\":[\"3KjxQu9RZ8ZSywvLz\",\"u4yanfWeeZsN3xWgc\",\"phA6MomRzh9oz3eqn\",\"r9hHZYPQAqJ9DbwLX\",\"Es4eX2stRpyoXeC7f\",\"4RHx3H8EwP2oboW8e\",\"hB5mgzMwQSnhBzi7P\",\"fZjkX29nhRTWWb75k\",\"jyoLggHk8xQKZuoQC\",\"Kso7rzAKB4TTCPKgM\",\"5seiNqw6ZXoF2GRRd\",\"TrquEHytntLKHA4m2\",\"WZujpe8yQAyZmpWHg\",\"etoSR23iELGGgs9rA\",\"htXCitorobtqYymjN\",\"mePEvnzWutSEEoh9Q\",\"DzvdGwHEjqsX7wyKr\",\"g4NCSxxHqHCGMpWwT\",\"rvojHhKH3DaxotefQ\",\"Fdq6CxMWZL8WZiNaM\",\"gXTAie79kiw28tx5u\",\"jXTnL3JatkKjoifyb\",\"buX4mCQhtXCfBjeno\",\"a49eNnfRwSMxsDJXf\",\"DkSMZ3jZLkwviKb9g\",\"rhS8qXRjZcpDXkwnE\",\"sxci7DYKNa6q22Sjq\",\"KMR6vNzvSKMA2cXnK\",\"7xYtqgCCyvRJAmeuq\",\"cFkePEtcx7fvMRX98\",\"rWhXHhzF4W8bea6LP\",\"D2G6Z2sbZRjXjxiyo\",\"PFn4mc8BuavixoPGS\",\"e9NhiaGdEeGzhmPju\",\"5HGyJtoZ3AffzAZAv\",\"ke59XNKs2LuJBMihy\",\"wFRLGjA56kj7xyhmv\",\"6bRDfXNp86nFDtj4S\",\"7zHPkRBtdKFQFkrc4\",\"GyF3LqyfMFADzNKDe\",\"3CXSJHwL4Qihbi6LA\",\"xQ5w8LNX244oA7rRc\",\"CggGfsERnPKGupFWp\",\"uw47663LqPME8btaA\"],\"quality\":[4]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":4,\"family\":[{\"_id\":\"42axxennkxgC4yNeb\",\"language\":\"cpp\"},{\"_id\":\"mc6KcMGkrSWP88dGu\",\"language\":\"java\"},{\"_id\":\"3jzycf6fcgwZbvpcf\",\"language\":\"javascript\"},{\"_id\":\"s8h3swxHGuyfe5saZ\",\"language\":\"php\"},{\"_id\":\"4AtqpqKdXAFofa566\",\"language\":\"python3\"},{\"_id\":\"f5r5nRvuMQnWn3Bbe\",\"language\":\"ruby\"}]}}"]