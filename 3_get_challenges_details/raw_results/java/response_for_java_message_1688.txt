a["{\"msg\":\"result\",\"id\":\"403\",\"result\":{\"_id\":\"Djo98NonxGxvDgPde\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"public class Challenge {\\n\\tpublic static String alphabetIndex(String str) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":1.5301204819277108,\"familyId\":\"eubQSQC3FNnpLN2ej\",\"instructions\":\"Create a function that takes a string and replaces each letter with its appropriate position in the alphabet. \\\"a\\\" is 1, \\\"b\\\" is 2, \\\"c\\\" is 3, etc, etc.\\n\\n### Examples\\n```\\nalphabetIndex(\\\"Wow, does that work?\\\")\\n➞ \\\"23 15 23 4 15 5 19 20 8 1 20 23 15 18 11\\\"\\n\\nalphabetIndex(\\\"The river stole the gods.\\\")\\n➞ \\\"20 8 5 18 9 22 5 18 19 20 15 12 5 20 8 5 7 15 4 19\\\"\\n\\nalphabetIndex(\\\"We have a lot of rain in June.\\\")\\n➞ \\\"23 5 8 1 22 5 1 12 15 20 15 6 18 1 9 14 9 14 10 21 14 5\\\"\\n```\\n\\n### Notes\\nIf any character in the string isn't a letter, ignore it.\",\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n  @Test\\n  public void test1() {\\n    assertEquals(\\\"23 5 4 14 5 19 4 1 25 9 19 8 21 13 16 4 1 25 2 21 20 8 1 19 1 14 25 15 14 5 1 19 11 5 4 20 8 5 3 1 13 5 12 9 6 8 5 19 8 1 16 16 25 1 2 15 21 20 9 20\\\", Challenge.alphabetIndex(\\\"Wednesday is hump day, but has anyone asked the camel if he’s happy about it?\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test2() {\\n    assertEquals(\\\"3 8 5 3 11 2 1 3 11 20 15 13 15 18 18 15 23 9 23 9 12 12 19 5 5 9 6 20 8 5 2 15 15 11 8 1 19 1 18 18 9 22 5 4\\\", Challenge.alphabetIndex(\\\"Check back tomorrow; I will see if the book has arrived.\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test3() {\\n    assertEquals(\\\"23 5 8 1 22 5 1 12 15 20 15 6 18 1 9 14 9 14 10 21 14 5\\\", Challenge.alphabetIndex(\\\"We have a lot of rain in June.\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test4() {\\n    assertEquals(\\\"19 9 24 20 25 6 15 21 18 3 15 13 5 19 1 19 11 9 14 7 6 15 18 2 18 5 1 4\\\", Challenge.alphabetIndex(\\\"Sixty-Four comes asking for bread.\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test5() {\\n    assertEquals(\\\"20 8 5 2 11 9 19 9 14 6 18 14 20 6 20 8 5 20 1 2 12 5\\\", Challenge.alphabetIndex(\\\"The#b00k$is*in^fr0nt#0f!the_taBle.\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test6() {\\n    assertEquals(\\\"12 5 20 19 1 12 12 2 5 21 14 9 17 21 5 20 15 7 5 20 8 5 18 21 14 20 9 12 23 5 18 5 1 12 9 19 5 23 5 1 18 5 1 12 12 20 8 5 19 1 13 5\\\", Challenge.alphabetIndex(\\\"Lets all be unique together until we realise we are all the same.\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test7() {\\n    assertEquals(\\\"20 8 5 18 9 22 5 18 19 20 15 12 5 20 8 5 7 15 4 19\\\", Challenge.alphabetIndex(\\\"The river stole the gods.\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test8() {\\n    assertEquals(\\\"23 15 23 4 15 5 19 20 8 1 20 23 15 18 11\\\", Challenge.alphabetIndex(\\\"Wow, does that work?\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test9() {\\n    assertEquals(\\\"9 6 16 21 18 16 12 5 16 5 15 16 12 5 5 1 20 5 18 19 1 18 5 18 5 1 12 23 8 5 18 5 4 15 20 8 5 25 6 9 14 4 16 21 18 16 12 5 16 5 15 16 12 5 20 15 5 1 20\\\", Challenge.alphabetIndex(\\\"If Purple People Eaters are real… where do they find purple people to eat?\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test10() {\\n    assertEquals(\\\"1 2 19 20 18 1 3 20 9 15 14 9 19 15 6 20 5 14 15 14 5 6 12 15 15 18 1 2 15 22 5 25 15 21\\\", Challenge.alphabetIndex(\\\"Abstraction is often one floor above you.\\\"));\\n  }\\n}\",\"language\":\"java\",\"summary\":\"Create a function that takes a string and replaces each letter with its appropriate position in the alphabet. \\\"a\\\" is 1, \\\"b\\\" is 2, \\\"c\\\" is 3, etc, etc.\\n\\nExamples\\nalphabetIndex(\\\"Wow, does that work?\\\")\\n➞ \\\"23 15 23 4 15 5 19 20 8 1 20 23 15 18 11\\\"\\n\\nalphabetIndex(\\\"The river stole the gods.\\\")\\n➞ \\\"20 8 5 18 9 22 5 18 19 20 15 12 5 20 8 5 7 15 4 19\\\"\\n\\nalphabetIndex(\\\"We h\",\"tags\":[\"strings\",\"formatting\"],\"timestamp\":{\"$date\":1567970943769},\"title\":\"Replace Letters With Position In Alphabet\",\"stats\":{\"completed\":{\"total\":101,\"ratings\":[2,2,2,2,2,0,2,2,0,2,2,2,1,2,2,2,2,2,2,0,1,4,1,2,0,2,2,2,1,2,1,0,1,1,1,0,3,1,2,2,1,0,2,2,1,2,0,2,1,1,2,2,2,3,3,2,1,1,2,2,2,2,0,1,2,2,2,2,2,2,2,0,2,2,1,1,0,2,1,0,1,2,2],\"rators\":[\"3pdgguqZgNDSAJSGm\",\"sxci7DYKNa6q22Sjq\",\"t2kdBPj9qQAXY2Ehd\",\"3gxJoNp59B4eoyyed\",\"rMmLys7TPCegk822Y\",\"gofo35rKkbyPH9jFq\",\"tQatuCqYXLqvQ2rDh\",\"Yohr2MmAyaWGMbB35\",\"Ha5J49rhojBRy3BaM\",\"CLmJduqJHX83dM4Pd\",\"r9hHZYPQAqJ9DbwLX\",\"qJZsi5rhRnWA38FbA\",\"phA6MomRzh9oz3eqn\",\"u4yanfWeeZsN3xWgc\",\"vRXuYYBNuHEQ29fbm\",\"J9zJq7PMGb6mqzcHW\",\"AyrEvM2GLX2jqM772\",\"Es4eX2stRpyoXeC7f\",\"4RHx3H8EwP2oboW8e\",\"8J2Dqqz9PaFufQzwY\",\"hB5mgzMwQSnhBzi7P\",\"9gJsF5apWJGWZJprn\",\"M3sPbyvBvjTu8Nga8\",\"82weQfHHmno4Mq4X7\",\"Kso7rzAKB4TTCPKgM\",\"5seiNqw6ZXoF2GRRd\",\"Zhy5X7BZnqk8hacEw\",\"jyoLggHk8xQKZuoQC\",\"fZjkX29nhRTWWb75k\",\"TrquEHytntLKHA4m2\",\"WZujpe8yQAyZmpWHg\",\"8zZ6xmzpiFair25qr\",\"etoSR23iELGGgs9rA\",\"mfm3gB39arY8Rjb2y\",\"htXCitorobtqYymjN\",\"wYYMNPe8nSiJFbvJw\",\"B4pxRqzo43M7S8FbP\",\"DzvdGwHEjqsX7wyKr\",\"uYv96ZSpA7tBHoAGX\",\"Wf7nCHS4Gq5tx659h\",\"rvojHhKH3DaxotefQ\",\"g4NCSxxHqHCGMpWwT\",\"q2tzvkrLASvSjkek9\",\"qraDA47Ewou5mzvrL\",\"R24BMWbTh8rzh5zaw\",\"kiRkuN7JXqvWBa4SG\",\"5p6bwXayfAp7Y4WQ7\",\"j428nMyNKY8g2dcCi\",\"HDNfL5LCyDBBx58qy\",\"sJaSeR649EEMX9F4v\",\"87otmbdqNT3bHsQFu\",\"Fd9765rksgPK4E2Zy\",\"YcjwCvYut6834Jzd8\",\"Ym8AjbKGSJooun3nt\",\"YFHkjbM6obMSj24zi\",\"azAzSkvJd7eyXY9x9\",\"yXGiiSAR5nBHnH3yr\",\"C9yBWYcZsjmJYww3K\",\"rWhXHhzF4W8bea6LP\",\"8Xx8nWXRydHDBGfQf\",\"jXTnL3JatkKjoifyb\",\"AeJSxRqw2dJZuGvdk\",\"BbcH2NLjE4tKAZ3wR\",\"mQKWauR6b252TmdX4\",\"a49eNnfRwSMxsDJXf\",\"buX4mCQhtXCfBjeno\",\"bur3yQ8s34zqKGEro\",\"DkSMZ3jZLkwviKb9g\",\"4ySzqKC5s3ZRpG9di\",\"rhS8qXRjZcpDXkwnE\",\"srJ34BaybkQh3qRkM\",\"wFRLGjA56kj7xyhmv\",\"uf6pJu3SGdnugtZtk\",\"jCjCvyhqhpebkJn34\",\"KMR6vNzvSKMA2cXnK\",\"PJu3WcTpfRrvHfQiS\",\"hhxjQREtmHSheH9Pj\",\"unqzSsxpxj9sZ7rbD\",\"29SkuALTvZP92qb86\",\"byLcacnySm4m8FaJv\",\"FxPDKKibxnZjGJLs6\",\"xEX3TDY6C2h82dJTn\",\"uw47663LqPME8btaA\",\"XH6378Zm3WBm679yx\",\"nFbmNzMQ38TncmfQX\"],\"quality\":[3,5,4,4,1,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"isHidden\":false,\"quality\":3.857142857142857,\"family\":[{\"_id\":\"rZbXfisPPKbR6yNXn\",\"language\":\"cpp\"},{\"_id\":\"v2czrbq3acTMSGbEe\",\"language\":\"csharp\"},{\"_id\":\"Djo98NonxGxvDgPde\",\"language\":\"java\"},{\"_id\":\"LzqbjjEnBkbFYbmDz\",\"language\":\"javascript\"},{\"_id\":\"qz7diK2oHZdaki6CQ\",\"language\":\"php\"},{\"_id\":\"Bm3JCT6rFrnAhHohy\",\"language\":\"python3\"},{\"_id\":\"gmhHCRmwuaLs9Z6cF\",\"language\":\"ruby\"},{\"_id\":\"K4c3FrnzQHwmdDHpx\",\"language\":\"swift\"}]}}"]