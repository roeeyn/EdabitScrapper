a["{\"msg\":\"result\",\"id\":\"522\",\"result\":{\"_id\":\"g5n85W62rJqZakMry\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"public class Challenge {\\n\\tpublic static String xPronounce(String sentence) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":2.078014184397163,\"familyId\":\"hc4yfYnwYwfK2w9zg\",\"instructions\":\"Create a function which replaces all the x's in the string in the following ways:\\n\\nReplace all x's with \\\"cks\\\" **UNLESS**:\\n- The word begins with \\\"x\\\", therefore replace it with \\\"z\\\".\\n- The word is just the letter \\\"x\\\", therefore replace it with \\\"ecks\\\".\\n\\n### Examples\\n```\\nxPronounce(\\\"Inside the box was a xylophone\\\") ➞ \\\"Inside the bocks was a zylophone\\\"\\n\\nxPronounce(\\\"The x ray is excellent\\\") ➞ \\\"The ecks ray is eckscellent\\\"\\n\\nxPronounce(\\\"OMG x box unboxing video x D\\\") ➞ \\\"OMG ecks bocks unbocksing video ecks D\\\"\\n```\\n\\n### Notes\\n- All x's are lowercase.\\n- I know that not all words with x's follow this rule, but there are too many edge cases to count!\",\"isHidden\":false,\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n  @Test\\n  public void test1() {\\n    assertEquals(\\\"Inside the bocks was a zylophone\\\", Challenge.xPronounce(\\\"Inside the box was a xylophone\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test2() {\\n    assertEquals(\\\"The ecks ray is eckscellent\\\", Challenge.xPronounce(\\\"The x ray is excellent\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test3() {\\n    assertEquals(\\\"OMG ecks bocks unbocksing video ecks D\\\", Challenge.xPronounce(\\\"OMG x box unboxing video x D\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test4() {\\n    assertEquals(\\\"I gotta make bucks but the clocks are ticking!\\\", Challenge.xPronounce(\\\"I gotta make bux but the clox are ticking!\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test5() {\\n    assertEquals(\\\"this test does not have an ecks in it\\\", Challenge.xPronounce(\\\"this test does not have an x in it\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test6() {\\n    assertEquals(\\\"Macks backs packs\\\", Challenge.xPronounce(\\\"Max bax pax\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test7() {\\n    assertEquals(\\\"Anti vacks\\\", Challenge.xPronounce(\\\"Anti vax\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test8() {\\n    assertEquals(\\\"Who is zavier and why does he have my car\\\", Challenge.xPronounce(\\\"Who is xavier and why does he have my car\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test9() {\\n    assertEquals(\\\"OMG zylem unbocksing video ecks D\\\", Challenge.xPronounce(\\\"OMG xylem unboxing video x D\\\"));\\n  }\\n}\",\"language\":\"java\",\"summary\":\"Create a function which replaces all the x's in the string in the following ways:\\n\\nReplace all x's with \\\"cks\\\" UNLESS:\\nThe word begins with \\\"x\\\", therefore replace it with \\\"z\\\".\\nThe word is just the letter \\\"x\\\", therefore replace it with \\\"ecks\\\".\\n\\nExamples\\nxPronounce(\\\"Inside the box was a xylophone\\\") ➞ \\\"Inside the bocks was a zylophone\\\"\\n\\nxPronounce(\\\"The x ray is ex\",\"tags\":[\"strings\",\"formatting\",\"conditions\",\"regex\"],\"timestamp\":{\"$date\":1580425310736},\"title\":\"Pronouncing the Xs\",\"stats\":{\"completed\":{\"total\":176,\"ratings\":[2,2,2,2,2,3,1,0,3,1,2,3,3,2,3,0,2,2,1,1,2,2,3,0,3,3,2,3,2,1,3,2,1,1,2,2,2,3,2,2,3,1,2,2,3,1,2,2,1,2,2,2,3,2,3,4,2,1,2,1,3,2,0,2,0,3,1,2,3,1,2,2,3,3,2,0,3,2,2,2,0,2,2,3,5,2,1,2,2,2,1,2,2,5,2,3,2,2,3,3,2,2,2,3,3,3,2,2,3,2,3,2,1,3,0,2,5,0,1,3,2,2,3,2,3,3,1,2,2,1,3,1,3,1,3,3,3,3,1,1,3],\"rators\":[\"r9hHZYPQAqJ9DbwLX\",\"8J2Dqqz9PaFufQzwY\",\"rehehi2Tr2mwaEoJE\",\"qRhXvCaA7qgDoeFnr\",\"XA2QfKNqbWYPcvoCH\",\"fxaS5K7ZXo4FbTe36\",\"XdK5xWaepoXj5Y3xv\",\"eXW8reZCCZHQzJjQi\",\"J9zJq7PMGb6mqzcHW\",\"zz3mnAujBDSsK4rmq\",\"vRXuYYBNuHEQ29fbm\",\"9aHkSrEhWL7Tp928N\",\"GXDR2MbzEL5aQEk6d\",\"49caJ2EMfEnPSEYZj\",\"D9tfoBpEAnP7BSDZb\",\"scZkniX9NSKj7GG87\",\"qb2DTmzQj4vNfq5K7\",\"BnZaMwqqBxaCNhQMx\",\"yK7zzK2aGJwuWKHRL\",\"j9yYv3StMMZxQY55B\",\"cfi8jhhSJ3Nq2gvqf\",\"ko7oJ85JMftgcbkrr\",\"4RHx3H8EwP2oboW8e\",\"6hsLDaXbCCEsiBr37\",\"4tX9jixdaGxCdw9ZE\",\"eZjHwgBfkQPCxmutr\",\"2PR653L4KSN97r534\",\"uqNAu5PZnSDRqZKoN\",\"xFfjxt6vscAezQshy\",\"Es4eX2stRpyoXeC7f\",\"hb3zxLXhR7Hgij23z\",\"3pdgguqZgNDSAJSGm\",\"D7dpRtRQDmteDSAXv\",\"wYYMNPe8nSiJFbvJw\",\"etoSR23iELGGgs9rA\",\"AyrEvM2GLX2jqM772\",\"cjxsqXfkAPoadmppi\",\"imoNrk36ozReP939p\",\"8YCqERR78ERxmyyBp\",\"gGnDsJz5hr2t9MKCF\",\"zbGJGwm2a7un8F5T5\",\"9hR4JumhXYmk47sYK\",\"82weQfHHmno4Mq4X7\",\"feubnquqgyoq3sa3Q\",\"2DP9ho5CnBPwmNXGm\",\"9xJpSQm6BFmgL3ee9\",\"kbWEKu7GEg4eb6J5g\",\"XC9nQxxqYS46pgHTK\",\"kkyZ4oyYQC898Nttj\",\"Y8fG59oLxqYKDNSsH\",\"TrquEHytntLKHA4m2\",\"av5QexsdPza9FsRCq\",\"5seiNqw6ZXoF2GRRd\",\"jyoLggHk8xQKZuoQC\",\"4CryJmbEsruAELrDt\",\"9RjPxa9gtAe8Rspre\",\"rwETZ6XCNoHCEyB66\",\"ByXaraYa5tzFG8Gmj\",\"RPzzGas8bEQ4X9pBy\",\"WZujpe8yQAyZmpWHg\",\"y7NyT6FnDzPhAzkjF\",\"BmMA5FBX7NKpLj8ur\",\"xYhWQsAiu4QiyjGMx\",\"kWobGYgZWJxN6ZddF\",\"htXCitorobtqYymjN\",\"k63LjKkX5p7SYng7C\",\"mfm3gB39arY8Rjb2y\",\"dcW9oK2uRo8h8mBe2\",\"hxeKTpLc8vjMd8TMp\",\"dpJTai3i9aNkCS3sa\",\"T2vhHPhRR96hRizq8\",\"NaLEipHrg493EpHvC\",\"fRhyffuFFdj8dmJwX\",\"y6kfyYmydcD8tkBk7\",\"4RsakkyRXyYGwFxEa\",\"pBMXMQem6BpSeooYT\",\"q2tzvkrLASvSjkek9\",\"vEN56nHw7hTxbyHhp\",\"R8YWhHoXoasSsLJs4\",\"i3TRCkidxKop3WtE2\",\"5r8vhoA5DnyqduYNc\",\"j428nMyNKY8g2dcCi\",\"5p6bwXayfAp7Y4WQ7\",\"kiRkuN7JXqvWBa4SG\",\"sJaSeR649EEMX9F4v\",\"qraDA47Ewou5mzvrL\",\"87otmbdqNT3bHsQFu\",\"MCjdtAAjL6sGLukPr\",\"hWmgLftXQDzfd4Tjq\",\"jRqY4i8gPemsZMBGf\",\"Ym8AjbKGSJooun3nt\",\"wBDcgF2qB7FQRuRBd\",\"azAzSkvJd7eyXY9x9\",\"oMZovHkR6QqNvQwyc\",\"DzvdGwHEjqsX7wyKr\",\"2E9vrrE9CksueDvPA\",\"rWhXHhzF4W8bea6LP\",\"2xFvy6u3hE4LtCXMD\",\"x3WsGCnE38anLjJqh\",\"gXTAie79kiw28tx5u\",\"yXGiiSAR5nBHnH3yr\",\"YL9pqyCu8xsds8J49\",\"mQKWauR6b252TmdX4\",\"P5BhjZxyeHQYTNyB9\",\"8Xx8nWXRydHDBGfQf\",\"jXTnL3JatkKjoifyb\",\"zyHHSisus2MpibGkG\",\"p2woPCQKXuWJCwffJ\",\"9jasWuRGFtEtSYh76\",\"738w5PhcgyQQdnza9\",\"DrkR35NqnP9NDLbq6\",\"YqwTDpXzZxtpStdQY\",\"SdK5h6x8wu7th28nx\",\"mGaEDPw5FsDb3vdnq\",\"RGN3QTb5LXj4ZPPkj\",\"LNCb5rksJLJ43L4Nw\",\"LbPXDhosRFvDw6JwY\",\"YLqdr7bYjwew2KM4N\",\"uo4sGrPMC4mQMgSkh\",\"buX4mCQhtXCfBjeno\",\"wFRLGjA56kj7xyhmv\",\"sxci7DYKNa6q22Sjq\",\"nAuhwzeaxm62fF6Mi\",\"6DA23NpoxpgkHfrw9\",\"z6qWrCrv4Z5j2nX2x\",\"SNLHryxfRzMtHdKXW\",\"r43Gfvd3E4khAXhNW\",\"pxtS64qWi6waBH5BR\",\"563onSvqgjToY79ah\",\"c4aLTCDHTvXhYh9Xp\",\"XLs4BAJhxAydcF5e8\",\"XFCd278fnpY8pYsno\",\"rhS8qXRjZcpDXkwnE\",\"CoQTHAsXDxn6oot3H\",\"C6fJvPAqKzJcetbAm\",\"CggGfsERnPKGupFWp\",\"6rvJwN4mcX7iYGjY7\",\"5FTQhvh8zTRWhAene\",\"a49eNnfRwSMxsDJXf\",\"3z2pSDGnXrMjWc4mc\",\"xEX3TDY6C2h82dJTn\",\"2NJZbusRvu3eJ4tHu\",\"TjEfsEyuxhqADbD2M\",\"KMR6vNzvSKMA2cXnK\",\"WFiKrYeEs4bKFBcFR\",\"zTtKiCbLWzaf2Yjo4\",\"unqzSsxpxj9sZ7rbD\",\"FxPDKKibxnZjGJLs6\",\"uw47663LqPME8btaA\",\"GZqsbAxnzxczrdWEM\"],\"quality\":[5,1,5,5,3,2,4,5,3,5,5,5,4,1]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"quality\":3.7857142857142856,\"family\":[{\"_id\":\"TGghzW42zA5Rd4bfA\",\"language\":\"cpp\"},{\"_id\":\"g5n85W62rJqZakMry\",\"language\":\"java\"},{\"_id\":\"mH6Ny8eH6AStdzzyS\",\"language\":\"javascript\"},{\"_id\":\"bfz7kTgPujtfcHR9d\",\"language\":\"python3\"},{\"_id\":\"NSFyCjWkpBgQSNa4d\",\"language\":\"ruby\"}]}}"]