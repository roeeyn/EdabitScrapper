a["{\"msg\":\"result\",\"id\":\"251\",\"result\":{\"_id\":\"mDM9eJXqjL7kJc3hh\",\"archived\":false,\"author\":\"kochug\",\"authorId\":\"vQEmjTRgmdGNYB7yk\",\"code\":\"public class Program {\\n\\tpublic static boolean letterCheck(String[] s) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":1.1173708920187793,\"familyId\":\"uJoe2v2gfza3Pk4r2\",\"instructions\":\"Create a method that accepts an array of two strings and checks if the letters in the second string are present in the first string.\\n\\n### Examples\\n```\\nletterCheck([\\\"trances\\\", \\\"nectar\\\"]) ➞ true\\n\\nletterCheck([\\\"compadres\\\", \\\"DRAPES\\\"]) ➞ true\\n\\nletterCheck([\\\"parses\\\", \\\"parsecs\\\"]) ➞ false\\n```\\n\\n### Notes\\n- Function should not be case sensitive (as indicated in the second example).\\n- Both strings are presented as a single argument in the form of an array.\\n- **Bonus:** Solve this without RegEx.\",\"lab\":\"import static org.hamcrest.core.Is.is;\\nimport org.junit.Test;\\nimport static org.junit.Assert.assertThat;\\n\\npublic class ChallengeTests {\\n\\t@Test\\n\\tpublic void test1() {\\n\\t\\tassertThat(Program.letterCheck(new String[]{\\\"trances\\\", \\\"nectar\\\"}), is(true));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test2() {\\n\\t\\tassertThat(Program.letterCheck(new String[]{\\\"THE EYES\\\", \\\"they see\\\"}), is(true));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test3() {\\n\\t\\tassertThat(Program.letterCheck(new String[]{\\\"assert\\\", \\\"staring\\\"}), is(false));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test4() {\\n\\t\\tassertThat(Program.letterCheck(new String[]{\\\"arches\\\", \\\"later\\\"}), is(false));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test5() {\\n\\t\\tassertThat(Program.letterCheck(new String[]{\\\"dale\\\", \\\"caller\\\"}), is(false));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test6() {\\n\\t\\tassertThat(Program.letterCheck(new String[]{\\\"parses\\\", \\\"parsecs\\\"}), is(false));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test7() {\\n\\t\\tassertThat(Program.letterCheck(new String[]{\\\"replays\\\", \\\"adam\\\"}), is(false));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test8() {\\n\\t\\tassertThat(Program.letterCheck(new String[]{\\\"mastering\\\", \\\"streaming\\\"}), is(true));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test9() {\\n\\t\\tassertThat(Program.letterCheck(new String[]{\\\"drapes\\\", \\\"compadres\\\"}), is(false));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test10() {\\n\\t\\tassertThat(Program.letterCheck(new String[]{\\\"deltas\\\", \\\"slated\\\"}), is(true));\\n\\t}\\n}\",\"language\":\"java\",\"summary\":\"Create a method that accepts an array of two strings and checks if the letters in the second string are present in the first string.\\n\\nExamples\\nletterCheck([\\\"trances\\\", \\\"nectar\\\"]) ➞ true\\n\\nletterCheck([\\\"compadres\\\", \\\"DRAPES\\\"]) ➞ true\\n\\nletterCheck([\\\"parses\\\", \\\"parsecs\\\"]) ➞ false\\n\\nNotes\\nFunction should not be case sensitive (as indicated in the second example).\\nBoth\",\"tags\":[\"strings\",\"validation\",\"regex\"],\"timestamp\":{\"$date\":1523649905340},\"title\":\"Are Letters in the Second String Present in the First?\",\"stats\":{\"completed\":{\"total\":237,\"ratings\":[1,1,1,1,1,1,0,1,1,0,1,1,2,1,1,1,1,0,2,2,2,1,2,1,1,2,1,1,2,0,1,1,1,2,1,1,1,0,1,1,1,1,1,1,2,0,0,1,1,1,1,1,1,2,1,3,1,1,1,0,1,1,1,1,1,2,0,1,1,1,0,2,1,1,1,1,0,1,2,0,1,2,1,0,1,1,1,2,0,3,1,2,2,3,2,1,2,2,2,2,1,1,1,2,1,1,1,1,1,1,1,1,1,1,0,1,1,2,0,0,0,1,0,1,0,1,0,1,1,1,2,1,3,1,1,0,1,1,1,1,1,2,0,1,2,1,1,1,0,1,1,0,2,2,0,1,0,5,2,1,2,2,1,0,2,0,2,1,2,5,3,0,2,1,1,2,1,3,1,1,1,1,0,1,2,1,1,1,0,0,2,1,2,1,1,1,1,1,0,0,0,1,1,1,1,2,1,1,1,2,1,1,0],\"rators\":[\"vQEmjTRgmdGNYB7yk\",\"cGKgWB8ZZcidku3qj\",\"RkXfoeQFNzfw5rdug\",\"5PXxhR3Bctqox3PE6\",\"RzFHd8P5vHPyg3wBY\",\"Los3N4Y6EGJmfCTer\",\"z2crWv2athzYWTBMa\",\"iRgkGNCNtoPKC25EY\",\"KSHwLv3Ryafvy2eS6\",\"dJcfh6gASjPCWEBoe\",\"ogAtfiy94gCF9742d\",\"M3mkzSYXCpCt2HhC3\",\"uF5SXzwu7zEbcoCLM\",\"BgQpycHDeTFCKmdkN\",\"5StjZHG4mCJTpLZFj\",\"7zaKZkjCwfsqrmZFW\",\"7LrgrixSzJxiGaF66\",\"6gKgLfS6kC9GQgDJn\",\"AD6gXTWYwsPZjATKx\",\"GRZzKCbeb4xKHFCrZ\",\"79ZbLzp7xepvkonoh\",\"fskHo2C2gMKZxPZ5i\",\"rQpthoJte6rreQd4j\",\"fbNWxXTqZy2mXNbGJ\",\"sBAQgme9imkPrH2Xm\",\"z3HbZkmL5echimwFQ\",\"ddfeZ4pbbcXFXqZmY\",\"tW2XYfMDPBbMknTmo\",\"7yTWwspi6f7maXWRj\",\"74zXNB4jwSQ7agXCe\",\"sjngWfShdeS3jYEpZ\",\"79x9hFu3rkQXNRpG4\",\"vTxMZ7yTfdSqGovhZ\",\"YGYf9GKzaF8CWnDHE\",\"dSrrePBi9ibsEsCbu\",\"JvcakCu2TnmozRSMA\",\"vtosp2wmv3bJ9Qgio\",\"uK99RLh3CQ3yur6BQ\",\"hCoyBFeNMdaC88ZFi\",\"9hK6CreMyf3LNiRrf\",\"ywgSbAqkCj38KuaW8\",\"g4K6nM72TtXLKog5x\",\"niz9xRvhYCLYvGJnW\",\"62qNJjtmkRYvX5kKB\",\"WZsX2gAoT3CRutJfq\",\"MX8fhMdfBXBjhdezS\",\"gKrogQr2R2p7gLD6s\",\"Ss6c4XQXgxD5kS3wW\",\"yJyjT7Z2PPQmzzWpP\",\"6Ha4JTRCMXj9Yj44F\",\"erJWHqarGkGtPJ3C4\",\"34rKGZYu7vEdoCu7d\",\"5znpaFDoToJtAtF3h\",\"vew4EJaM4jGBsvnTp\",\"T6j7qdvD37y8DLKzT\",\"QS5RGoPnapStFD5Gi\",\"ydos8Ba8nZdYRNJpS\",\"CDkkdvDdqjDihTcFS\",\"JSSLvJPs8JebyfeS9\",\"ZzwR8m8Q6Gozo9ofz\",\"a49eNnfRwSMxsDJXf\",\"aMNhTh35QQAs33ycQ\",\"vRXuYYBNuHEQ29fbm\",\"o5H3aMNucmwhnsWdL\",\"H5QAneaQBQvpHrmmh\",\"Yt3hCM2SdzhMYRqHj\",\"3pdgguqZgNDSAJSGm\",\"FocLpCB2WEiK2gGni\",\"sxci7DYKNa6q22Sjq\",\"9c8n7ti5vCjTRgiGN\",\"Yohr2MmAyaWGMbB35\",\"t2kdBPj9qQAXY2Ehd\",\"3gxJoNp59B4eoyyed\",\"pJfyBFtx8jc79Z7Rh\",\"wtjugDDNpc2x5EiKF\",\"teCeoNkdeQEciPZ7H\",\"phA6MomRzh9oz3eqn\",\"8rF6PHMSaybTDsvXr\",\"sb7Nh56pPFtPxLogT\",\"jNcwk4jksmPTcAoTu\",\"Eqt2WZ9iPdhM6Ma9Q\",\"tfs6uiysC8atFan4t\",\"W4jpCs2jekeg5qAwc\",\"Prw5Jq38wrSoj5QSF\",\"MiPadj4ePcjWjxsR2\",\"NnZDxyidwrk6T6cj7\",\"ghRADkBcGb85dhmva\",\"ZiozQXopCXKLkQMfC\",\"tuw4ns5eG9WKzrddC\",\"8gJEpXHctGqC9ngcJ\",\"WPWBKqdkzkeGpgFR2\",\"6TDEhHv3uQCZLQeiH\",\"CLmJduqJHX83dM4Pd\",\"3KjxQu9RZ8ZSywvLz\",\"8JyqsSbN2FJXPr3cw\",\"u4yanfWeeZsN3xWgc\",\"HBgPTjhMkJ2WCcBP7\",\"fBmfMBKNcbZ4zDuEq\",\"J9zJq7PMGb6mqzcHW\",\"AyrEvM2GLX2jqM772\",\"qx9XHErKygcLiFGhX\",\"rWhXHhzF4W8bea6LP\",\"ko7oJ85JMftgcbkrr\",\"M5n9zd5LtuuwJr668\",\"5Kf9z3G9QBs9fkvLs\",\"EZNT8B7yQnnZmuwCf\",\"WuAkXKpcrQy867yCw\",\"gBGjCfJvPHswDM5JQ\",\"Es4eX2stRpyoXeC7f\",\"YLwJkF2wuL3n9o6a2\",\"fbYN9Jp46RqBqCd2K\",\"wYYMNPe8nSiJFbvJw\",\"mdEQJ2fmGmkbhbvNw\",\"PXBjtEAAwibHxNZXq\",\"rTj67TTydxqkpwFtN\",\"8J2Dqqz9PaFufQzwY\",\"bw6kHP3k8dP2qBa5v\",\"Kso7rzAKB4TTCPKgM\",\"fZjkX29nhRTWWb75k\",\"hB5mgzMwQSnhBzi7P\",\"YFHkjbM6obMSj24zi\",\"5seiNqw6ZXoF2GRRd\",\"jyoLggHk8xQKZuoQC\",\"jDTGwryGygbZiqCEg\",\"Yp7uvStL97cC9fKkY\",\"tqSJxy6E4vaTyECkh\",\"8zZ6xmzpiFair25qr\",\"DzvdGwHEjqsX7wyKr\",\"eWaq9hCBYq4oQYgEx\",\"B4pxRqzo43M7S8FbP\",\"4RHx3H8EwP2oboW8e\",\"WZujpe8yQAyZmpWHg\",\"82weQfHHmno4Mq4X7\",\"TrquEHytntLKHA4m2\",\"F4synR7Ea8yS2L576\",\"etoSR23iELGGgs9rA\",\"htXCitorobtqYymjN\",\"3qggY3TrN3xNaMDBp\",\"oMLSgpSFQnY4ui8cB\",\"DkSMZ3jZLkwviKb9g\",\"P7zedbjaFw8YDzLz7\",\"meS77LKqRswhF5LAy\",\"q2tzvkrLASvSjkek9\",\"EcKPDmD4GmeFJGDTL\",\"zwruFCmuHkwJTpYqg\",\"rvojHhKH3DaxotefQ\",\"nbH6pjzJS9Z35JD9r\",\"AeJSxRqw2dJZuGvdk\",\"muXMnzQwGLzN6j2Jr\",\"QXkrEiAuhuXaZmL4C\",\"g4NCSxxHqHCGMpWwT\",\"f6uGKbmMdBYCjrMBh\",\"H6rLgRGNL3X5Bhfwj\",\"y34fDuFascEKgwpxi\",\"vEN56nHw7hTxbyHhp\",\"jLv4ckjWQwHRAiYKT\",\"hx3ZWiCKNtqwMWFCt\",\"KxLMWekCxzy2Eem7u\",\"YcjwCvYut6834Jzd8\",\"Fd9765rksgPK4E2Zy\",\"7Wq4ZNz5c3irDR6br\",\"ZXWDtCrM9ev3439oi\",\"hPx9H3YM8j2k94DNW\",\"TCTZucJN3tJh5t7MB\",\"Tf7TJFSPktJBgLA4k\",\"ZiN6yB9rACMaYgseC\",\"yXGiiSAR5nBHnH3yr\",\"gpd8yji9GXJruAtje\",\"pi76g3eRpnKrhee2a\",\"J7epB3qSQJ2E8vWkY\",\"gXTAie79kiw28tx5u\",\"a777e8chPvJkY3tKa\",\"NdLzb3BZ5J8ftnCkS\",\"oMfq73A434YWhSuWQ\",\"mG8HqKiAQFTdRZthG\",\"P5BhjZxyeHQYTNyB9\",\"xv5obFhsxY93mqR5S\",\"jXTnL3JatkKjoifyb\",\"8Xx8nWXRydHDBGfQf\",\"BDMzcwipsJSLoaRKx\",\"tyLS9T6YMfg9fMtYJ\",\"Ym8AjbKGSJooun3nt\",\"unNqQjSHzkb4pCzEu\",\"osXNzc2aCxspRwheS\",\"uNK8tLSseShR8wcA4\",\"5jDgvkGd4JwatrYXg\",\"2cdvd8yuPLSwvGj9w\",\"Wi4H6ayKsNDWWQCG5\",\"uFfEio8nzDvL8emhp\",\"Mmi7ByNfsjNBBo6uQ\",\"E2hpke7mHxAWsw5t9\",\"hhxjQREtmHSheH9Pj\",\"QRv96jmNaYsWkxQEG\",\"zZfMwLuoERGmybgib\",\"buX4mCQhtXCfBjeno\",\"qjWxNQjs3cfbcmbh7\",\"3SgSNoAB3sxaYeT3w\",\"4ySzqKC5s3ZRpG9di\",\"btabi3PdyisuY5tn9\",\"HXbTKW3jmmyRAsKrr\",\"EetxPkmqnwP8J2u5D\",\"rhS8qXRjZcpDXkwnE\",\"pYonfGP4u9HNL9Z32\",\"wrKqfRcDJNGSxFK6p\",\"zTtKiCbLWzaf2Yjo4\",\"uw47663LqPME8btaA\",\"srJ34BaybkQh3qRkM\",\"eW9R2SCoYnY8HBAdL\",\"cR3ibTMxLyEdDFCHY\",\"5LDvZHCDJqePeBrCg\",\"jCjCvyhqhpebkJn34\",\"wFRLGjA56kj7xyhmv\",\"KMR6vNzvSKMA2cXnK\",\"WX5hR93N7nA2kMsJN\",\"RsujLHaML6L3KinzK\",\"FNYPC36yqPmTKDaqR\",\"unqzSsxpxj9sZ7rbD\",\"nSLvkGEpiYCtcBLaa\",\"ckQwFFWyLXmDQAaCn\",\"H3XLNCWB5yXt5YYXn\",\"NnymXePpDaZnp2fRd\",\"nFbmNzMQ38TncmfQX\",\"3Gf7ikLijfoxabiPY\"],\"quality\":[4,5,5,5,5,4,5,5,5,5,5,5,5,5]},\"complaints\":{\"total\":0,\"reasons\":[],\"skippers\":[\"vQEmjTRgmdGNYB7yk\"]},\"instructions\":{\"score\":16.8,\"voters\":[\"einu7oqSycKzv8wYJ\",\"CkugLk6JLRdoAcxcc\",\"BgQpycHDeTFCKmdkN\",\"ZxF3LkWqeo4fe4ziK\",\"9eGzCN2guDdJYrw7m\",\"rWTtR5BFBYQMBSq7G\",\"j9gg82Bp2L7nw7DyJ\",\"k7yMcydbfmctg89iN\",\"muXapDQzqtqsguWxp\",\"ku6MeoHXoHwHkChpg\",\"ebndzZQAJZFykHqiE\"]},\"tests\":{\"score\":0,\"voters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.857142857142857,\"family\":[{\"_id\":\"qDAvmerBxwAhC9i77\",\"language\":\"cpp\"},{\"_id\":\"mDM9eJXqjL7kJc3hh\",\"language\":\"java\"},{\"_id\":\"62FxK8G5XB6mdX4Fy\",\"language\":\"javascript\"},{\"_id\":\"E3f6QxYrquQWLvo4x\",\"language\":\"php\"},{\"_id\":\"dFz2PDjQkXZ9FhEaz\",\"language\":\"python3\"},{\"_id\":\"uRb4NKE6GBxweJmGq\",\"language\":\"ruby\"}]}}"]