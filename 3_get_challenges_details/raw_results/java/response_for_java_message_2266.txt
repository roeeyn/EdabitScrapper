a["{\"msg\":\"result\",\"id\":\"690\",\"result\":{\"_id\":\"S5y88pjHnpr3qd5BD\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class HappyNumber {\\n\\tpublic static boolean isHappy(int n) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":2.6923076923076925,\"quality\":0,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"E9cqZE3HYjNDqWeT9\",\"instructions\":\"A **happy number** is a number which yields a `1` by repeatedly summing up the square of its digits. If such a process results in an endless cycle of numbers containing `4`, the number is said to be an **unhappy number**.\\n\\nCreate a function that accepts a number and determines whether the number is a *happy number* or not. Return `true` if so, `false` otherwise.\\n\\n### Examples\\n```\\nisHappy(67) ➞ false\\n\\nisHappy(89) ➞ false\\n\\nisHappy(139) ➞ true\\n\\nisHappy(1327) ➞ false\\n\\nisHappy(2871) ➞ false\\n\\nisHappy(3970) ➞ true\\n```\\n\\n### Notes\\n- **Hint**: Your loop terminates if the value of `n` is either `1` or `4`.\\n- **Optionally**, you can solve this challenge via a recursive approach.\\n-  A recursive version of this challenge can be found [here](https://edabit.com/challenge/oibF2LtNoiGsJuj6b).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"import static org.junit.Assert.assertEquals;\\nimport org.junit.Test;\\n\\npublic class HappyNumberTests {\\n\\tprivate int[] numVector = new int[] {1, 10, 44, 67, 89, 139, 1327, 2871, 3970, 5209, 6329, 8888, 9331, 10000};\\n\\tprivate boolean[] resVector = new boolean[] {true, true, true, false, false, true, false, false, true, false, true, false, true, true};\\n\\t\\n\\t@Test\\n\\tpublic void test1() {\\n\\t\\tassertEquals(HappyNumber.isHappy(numVector[0]), resVector[0]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test2() {\\n\\t\\tassertEquals(HappyNumber.isHappy(numVector[1]), resVector[1]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test3() {\\n\\t\\tassertEquals(HappyNumber.isHappy(numVector[2]), resVector[2]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test4() {\\n\\t\\tassertEquals(HappyNumber.isHappy(numVector[3]), resVector[3]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test5() {\\n\\t\\tassertEquals(HappyNumber.isHappy(numVector[4]), resVector[4]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test6() {\\n\\t\\tassertEquals(HappyNumber.isHappy(numVector[5]), resVector[5]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test7() {\\n\\t\\tassertEquals(HappyNumber.isHappy(numVector[6]), resVector[6]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test8() {\\n\\t\\tassertEquals(HappyNumber.isHappy(numVector[7]), resVector[7]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test9() {\\n\\t\\tassertEquals(HappyNumber.isHappy(numVector[8]), resVector[8]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test10() {\\n\\t\\tassertEquals(HappyNumber.isHappy(numVector[9]), resVector[9]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test11() {\\n\\t\\tassertEquals(HappyNumber.isHappy(numVector[10]), resVector[10]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test12() {\\n\\t\\tassertEquals(HappyNumber.isHappy(numVector[11]), resVector[11]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test13() {\\n\\t\\tassertEquals(HappyNumber.isHappy(numVector[12]), resVector[12]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test14() {\\n\\t\\tassertEquals(HappyNumber.isHappy(numVector[13]), resVector[13]);\\n\\t}\\n}\",\"language\":\"java\",\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,3,3,5,1,1,4,2,1,1,4,3,3,4,5,1,1,2,4,1,4,2],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"3yarQmfRmTXBF8Dcp\",\"Es4eX2stRpyoXeC7f\",\"azAzSkvJd7eyXY9x9\",\"rehehi2Tr2mwaEoJE\",\"Ym8AjbKGSJooun3nt\",\"gXTAie79kiw28tx5u\",\"mQKWauR6b252TmdX4\",\"9o7Sp5AvxK75cQ3jD\",\"feavP3mGDve6obsQa\",\"mGaEDPw5FsDb3vdnq\",\"t2CNnSbqCxZPuBzGN\",\"psZB2zLasaMgtf3Tb\",\"pqQ3NsxT5vD4B8zqB\",\"rhS8qXRjZcpDXkwnE\",\"fommzAP3nsb8dQrYn\",\"htXCitorobtqYymjN\",\"KMR6vNzvSKMA2cXnK\",\"sxci7DYKNa6q22Sjq\",\"rWhXHhzF4W8bea6LP\",\"wFRLGjA56kj7xyhmv\"],\"total\":25},\"flags\":0},\"summary\":\"A happy number is a number which yields a 1 by repeatedly summing up the square of its digits. If such a process results in an endless cycle of numbers containing 4, the number is said to be an unhappy number.\\n\\nCreate a function that accepts a number and determines whether the number is a happy number or not. Return true if so, false otherwise.\\n\\nExamples\\nisHap\",\"tags\":[\"strings\",\"arrays\",\"loops\",\"math\",\"validation\"],\"timestamp\":{\"$date\":1601551391015},\"title\":\"Happy Number\",\"family\":[{\"_id\":\"S5y88pjHnpr3qd5BD\",\"language\":\"java\"},{\"_id\":\"y3e9Xdemxr65JQFX8\",\"language\":\"javascript\"},{\"_id\":\"rGAcibgZ6u9MtasfW\",\"language\":\"python3\"}]}}"]