a["{\"msg\":\"result\",\"id\":\"681\",\"result\":{\"_id\":\"QwGgDuvWtFmDTeRHw\",\"author\":\"ChirpyBoat\",\"authorId\":\"FHSJnAYTbcsKFgeQa\",\"code\":\"public class Challenge {\\n\\tpublic static String addStrNums(String num1, String num2) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":2.6547619047619047,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"fko6mjjBJyW2PtYAC\",\"instructions\":\"Write a function that adds two numbers. The catch, however, is that the numbers will be strings.\\n\\n### Examples\\n```\\naddStrNums(\\\"4\\\", \\\"5\\\") ➞ \\\"9\\\"\\n\\naddStrNums(\\\"abcdefg\\\", \\\"3\\\") ➞ \\\"-1\\\"\\n\\naddStrNums(\\\"1\\\", \\\"\\\") ➞ \\\"1\\\"\\n\\naddStrNums(\\\"1874682736267235927359283579235789257\\\", \\\"32652983572985729\\\") ➞ \\\"1874682736267235927391936562808774986\\\"\\n```\\n\\n### Notes\\n- If there are any non-numerical characters, return `\\\"-1\\\"`.\\n- An empty parameter should be treated as `\\\"0\\\"`.\\n- Your function should be able to add any size number.\\n- Your function doesn't have to add negative numbers.\\n- Zeros at the beginning of the string should be trimmed.\\n- **Bonus:** Don't use `BigInteger` or `BigDecimal` classes.\",\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n\\t@Test\\n\\tpublic void test1() {\\n\\t\\tassertEquals(\\\"0\\\", Challenge.addStrNums(\\\"\\\", \\\"\\\"));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test2() {\\n\\t\\tassertEquals(\\\"2\\\", Challenge.addStrNums(\\\"1\\\", \\\"01\\\"));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test3() {\\n\\t\\tassertEquals(\\\"1\\\", Challenge.addStrNums(\\\"1\\\",\\\"\\\"));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test4() {\\n\\t\\tassertEquals(\\\"198548492868763049967194397711865020200936966975607313794081327943206822707399212908284015616104251803151710460793585524786631258662967654803793576863784154372202562981937878837883388807533802081502644157231966815017027363013212273\\\", Challenge.addStrNums(\\\"198547982570192857109283570192837509218375091283750192835710298357019237509125710925710923759012375901275901285701925712035712983571092562945875310962518235712385971230956127856123571209358712905610923587102395716258125612095710298\\\",\\\"510298570192857910827519027510982561875691857120958371029586187585198273501982573091857091875901875809175091659812750918275091875091857918265901265918659816591750981750981759817598175089175891720570129571098758901750917501975\\\"));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test5() {\\n\\t\\tassertEquals(\\\"20007\\\", Challenge.addStrNums(\\\"0000001\\\", \\\"020006\\\"));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test6() {\\n\\t\\tassertEquals(\\\"-1\\\", Challenge.addStrNums(\\\"1325123515s238579875987\\\", \\\"38698592523525325\\\"));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test7() {\\n\\t\\tassertEquals(\\\"123456788654323456543456765432345678843234567150666666666666612735980127350918265309182653091635916258165871265087126121827562875835613875612875360182653127560192756012975608172560817653081760126578132617265192561923051397585261519826512951827401928470192864312873561298357120985710927561287356129857120851235612835712935612385971230598612035912635189273651289357120983571298035612836518237481235098172350891623508912375981206598127539128035619286350913860079316692430135070083545746229910105132529169548059251105934155707345561928216714345785488557882881776650962212910741009493707948652177877984833637483638061960049918284138811057018110547340295146562841027828410250749402417800024669988757747975297553431247669274658461094759253860242961229096131924658044740299\\\", Challenge.addStrNums(\\\"123456788654323456543456765432345678843234567150666666666666612735980127350918265309182653091635916258165871265087126121827562875835613875612875360182653127560192756012975608172560817653081760126578132617265192561923051397585261519826512951827401928470192864312873561298357120985710927561287356129857120851235612835712935612385971230598612035912635189273651289357120983571298035612836518237481235098172350891623508912375981206598127539128035619286350912836509123856710298560918236590138257013257219857182935681923569032656109851629851605109283560192863598126359125710982375918237598125091256012893570128357128935609128350192873501928365019283750129837401928374019283740189237401298374019823740912365012381075109823650912837501923561023650123659812375091862350912735\\\", \\\"1023570192835719836509165309156091653091875309312365123569182365123051235710298365109236501928365019283650291836501928365091256109823560921865091263509126509126350921568091265309128653091263590165309160912653809126510560165016501650650165016835610285172356137845623745623592835692836592837569283756832795693827564\\\"));\\n\\t}\\n}\",\"language\":\"java\",\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,1,3,2,3,1,3,3,3,3,4,3,2,0,2,3,4,2,1,0,2,3,3,1,3,3,3,4,0,3,2,2,3,3,5,2,2,4,1,4,3,2,3,3,3,4,4,3,4,0,4,2,4,2,2,3,2,2,2,3,4,3,2,4,4,2,4,4,1,0,4,3,1,3,2,3,4,4,3,2],\"rators\":[\"vRXuYYBNuHEQ29fbm\",\"3pdgguqZgNDSAJSGm\",\"hhkuWPyzP2k2pRcxZ\",\"ChNATdedtuwWaLMd5\",\"ydos8Ba8nZdYRNJpS\",\"Hpotgzn4wFMnhiE3R\",\"kKxTMPfvvACxifCnS\",\"6qyzL2iceT8a7bos4\",\"urckS99caSjRxPBvp\",\"YWnFYSYAv4jbY4Mmc\",\"sxci7DYKNa6q22Sjq\",\"zbQp6JhznkqyyLJTZ\",\"3gxJoNp59B4eoyyed\",\"BbdeJBuKmD8d3q66P\",\"cG4PEDMMx8jXhWP8T\",\"qvKvKKcHY2yGCDdYf\",\"5MuT2gPpME6LbfwoY\",\"rMmLys7TPCegk822Y\",\"NCB3RaRBonefnHBJD\",null,\"pzz8vFouna6JTTAiW\",\"aWFNNHB2k9Exwj7kA\",\"BSDtieYGg6H7evesT\",\"Es4eX2stRpyoXeC7f\",\"oeEDPQaCwHFFXsrny\",\"xnhBi4BCdJNAXXRvk\",\"jhoZyJtWj7sy7YYjj\",\"2QziknsznNeMPRh3g\",\"9XxsZapHq9HDnxkNb\",\"PqwsjawYg55ove2sE\",\"cjxsqXfkAPoadmppi\",\"qb2DTmzQj4vNfq5K7\",\"LZSxphM8vH4A6Deqn\",\"D7dpRtRQDmteDSAXv\",\"feubnquqgyoq3sa3Q\",\"cPhuRqExptFTTPpgM\",\"7CRtTWC425yAMHdAp\",\"rehehi2Tr2mwaEoJE\",\"73LN453oCGd2QepJz\",\"SY5wqJS9RJYYMJ6sy\",\"aNkpmfQ6NdBrj2nom\",\"xf3rRqATCkGHJ4TWZ\",\"Y8fG59oLxqYKDNSsH\",\"mtrmztrdgm5ag5XeZ\",\"TrquEHytntLKHA4m2\",\"sr27rpnTYHBEvuq2c\",\"DkSMZ3jZLkwviKb9g\",\"csRoCgJx5NBJzW8pX\",\"pBMXMQem6BpSeooYT\",\"jyoLggHk8xQKZuoQC\",\"LHaWZq59KWgozbwed\",\"nzmGPn6f2ceHnqFPE\",\"gJbvbqosimaP4ZAYb\",\"BEjoBzgdBkGbGHJkv\",\"4RsakkyRXyYGwFxEa\",\"k63LjKkX5p7SYng7C\",\"NzJKK8Cuf3bcqZfcw\",\"AxWLAsQ9dKQTeSvA5\",\"GamaMNrnhrjj5tXTx\",\"mGaEDPw5FsDb3vdnq\",\"Ym8AjbKGSJooun3nt\",\"hAWJSZiD2FeSczR6p\",\"fLjJxvD46DDekhdny\",\"GRpEkxhCBeoZrGfuP\",\"x3WsGCnE38anLjJqh\",\"3uBTPjN6mDavuBYmt\",\"gXTAie79kiw28tx5u\",\"rWhXHhzF4W8bea6LP\",\"D6YyepY3okHGgBkAy\",\"jGGZ3bryxsN7q9Gna\",\"a777e8chPvJkY3tKa\",\"mQKWauR6b252TmdX4\",\"4fpPZ59wamBBPuBdz\",\"4hbdSgMnhZC7C9mRv\",\"btabi3PdyisuY5tn9\",\"jNmh5KZLHAw2qWuNZ\",\"GJCv4oGf9q2ZQr93W\",\"p2woPCQKXuWJCwffJ\",\"MqyvPyccJ2XMrQYg4\",\"g95KBbC33RPmu9XNs\",\"c7uBxu2rgY77H5d79\",\"xEX3TDY6C2h82dJTn\",\"HsFc9PgmpP2X9Fwh9\",\"fommzAP3nsb8dQrYn\",\"uw47663LqPME8btaA\",\"rhS8qXRjZcpDXkwnE\",\"qErjDvAq3xwtwBWuD\",\"rEWbYF9mHh28oRvT9\",\"KMR6vNzvSKMA2cXnK\",\"2NJZbusRvu3eJ4tHu\",\"QWwbtXPHCLzHQzQKm\",\"wFRLGjA56kj7xyhmv\"],\"total\":102,\"quality\":[4,5,5,4,4,5,5,5,5,5,5,5,4]},\"flags\":0},\"subscribers\":[\"FHSJnAYTbcsKFgeQa\"],\"summary\":\"Write a function that adds two numbers. The catch, however, is that the numbers will be strings.\\n\\nExamples\\naddStrNums(\\\"4\\\", \\\"5\\\") ➞ \\\"9\\\"\\n\\naddStrNums(\\\"abcdefg\\\", \\\"3\\\") ➞ \\\"-1\\\"\\n\\naddStrNums(\\\"1\\\", \\\"\\\") ➞ \\\"1\\\"\\n\\naddStrNums(\\\"1874682736267235927359283579235789257\\\", \\\"32652983572985729\\\") ➞ \\\"1874682736267235927391936562808774986\\\"\\n\\nNotes\\nIf there are any non-numerical characters,\",\"tags\":[\"strings\",\"numbers\",\"language_fundamentals\",\"math\"],\"timestamp\":{\"$date\":1567877276346},\"title\":\"Add Two String Numbers\",\"isHidden\":false,\"quality\":4.6923076923076925,\"family\":[{\"_id\":\"6H6dch4q68BXQbFcM\",\"language\":\"cpp\"},{\"_id\":\"QwGgDuvWtFmDTeRHw\",\"language\":\"java\"},{\"_id\":\"3q6tbKL8BS4CgaR4c\",\"language\":\"javascript\"},{\"_id\":\"bwCDG9X8cJiAdvfxE\",\"language\":\"python3\"},{\"_id\":\"mE4XYBoSEtJmTCQZu\",\"language\":\"ruby\"}]}}"]