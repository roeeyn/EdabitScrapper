a["{\"msg\":\"result\",\"id\":\"760\",\"result\":{\"_id\":\"rqum6rzyZQrC43Ldv\",\"author\":\"Edward Clark\",\"authorId\":\"3pdgguqZgNDSAJSGm\",\"code\":\"class Shiritori {\\n\\t\\n}\",\"difficulty\":2.955223880597015,\"familyId\":\"HRraG5TEEebBMfEzr\",\"instructions\":\"This challenge is an English twist on the Japanese word game **Shiritori**. The basic premise is to follow two rules:\\n\\n1. **First character** of **next word** must match **last character** of **previous word**.\\n2. The word must not have already been said.\\n\\nBelow is an example of a **Shiritori** game:\\n```\\n[\\\"word\\\", \\\"dowry\\\", \\\"yodel\\\", \\\"leader\\\", \\\"righteous\\\", \\\"serpent\\\"]  // valid!\\n\\n[\\\"motive\\\", \\\"beach\\\"]  // invalid! - beach should start with \\\"e\\\"\\n\\n[\\\"hive\\\", \\\"eh\\\", \\\"hive\\\"]  // invalid! - \\\"hive\\\" has already been said\\n```\\n\\nWrite a **Shiritori class** that has **two instance properties**:\\n\\n- **words**: an array of words already said.\\n- **game_over**: a boolean that is true if the game is over.\\n\\nand **three instance methods**:\\n\\n- **play**: a method that takes in a word as an argument and checks if it is valid (the word should follow rules #1 and #2 above).\\n\\n    - If it is valid, it adds the word to the **words** array, and returns the **words** array.\\n    - If it is invalid (either rule is broken), it returns `\\\"game over\\\"` and sets the **game_over** boolean to **true**.\\n\\n- **restart**: a method that sets the **words** array to an empty one `[]` and sets the **game_over** boolean to **false**. It should return **\\\"game restarted\\\"**.\\n\\n- **getWords**: a method that returns the **words** array.\\n\\n### Examples\\n```\\nmy_shiritori = Shiritori.new()\\n\\nmy_shiritori.play(\\\"apple\\\") ➞ [\\\"apple\\\"]\\nmy_shiritori.play(\\\"ear\\\") ➞ [\\\"apple\\\", \\\"ear\\\"]\\nmy_shiritori.play(\\\"rhino\\\") ➞ [\\\"apple\\\", \\\"ear\\\", \\\"rhino\\\"]\\nmy_shiritori.play(\\\"corn\\\") ➞ \\\"game over\\\"\\n\\n// Corn does not start with an \\\"o\\\".\\n\\nmy_shiritori.getWords ➞  [\\\"apple\\\", \\\"ear\\\", \\\"rhino\\\"]\\n\\n// Words should be accessible.\\n\\nmy_shiritori.restart() ➞ \\\"game restarted\\\"\\nmy_shiritori.getWords ➞ []\\n\\n// Words array should be set back to empty.\\n\\nmy_shiritori.play(\\\"hostess\\\") ➞ [\\\"hostess\\\"]\\nmy_shiritori.play(\\\"stash\\\") ➞ [\\\"hostess\\\", \\\"stash\\\"]\\nmy_shiritori.play(\\\"hostess\\\") ➞ \\\"game over\\\"\\n\\n// Words cannot have already been said.\\n```\\n\\n### Notes\\n- The **play** method should **not** add an invalid word to the **words** array.\\n- You don't need to worry about capitalization or white spaces for the inputs for the **play** method.\\n- There will only be **single inputs** for the **play** method.\\n- Read more about Shiritori in the **Resources** tab.\",\"lab\":\"import static org.hamcrest.core.Is.is;\\nimport static org.junit.Assert.assertEquals;\\nimport static org.junit.Assert.assertThat;\\nimport org.junit.BeforeClass;\\nimport org.junit.Test;\\n\\n/**\\n * @author edwardclark\\n**/\\n\\npublic class ChallengeTest {\\n\\tprivate static Shiritori my_shiritori = null; \\n\\tprivate static Shiritori my_shiritori2 = null;\\n\\n\\t@BeforeClass\\n\\tpublic static void setUpClass() {\\n\\t\\tmy_shiritori = new Shiritori();\\n\\t\\tmy_shiritori2 = new Shiritori();\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test1() {\\n\\t\\tassertEquals(false,my_shiritori.game_over);\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test2() {        \\n\\t\\tassertThat(my_shiritori.play(\\\"apple\\\"), is(new String[]{\\\"apple\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test3() {        \\n\\t\\tassertThat(my_shiritori.getWords(), is(new String[]{\\\"apple\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test4() {        \\n\\t\\tassertThat(my_shiritori.play(\\\"ear\\\"), is(new String[]{\\\"apple\\\", \\\"ear\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test5() {        \\n\\t\\tassertThat(my_shiritori.play(\\\"rhino\\\"), is(new String[]{\\\"apple\\\", \\\"ear\\\", \\\"rhino\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test6() {        \\n\\t\\tassertThat(my_shiritori.play(\\\"ocelot\\\"), is(new String[]{\\\"apple\\\", \\\"ear\\\", \\\"rhino\\\", \\\"ocelot\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test7() {        \\n\\t\\t//assertEquals(false,my_shiritori.game_over);\\n\\t\\tassertThat(my_shiritori.game_over, is(false));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test8() {        \\n\\t\\tSystem.out.println(\\\"does not follow Rule 1 (input word's first character = last words last character)\\\");\\n\\t\\tassertThat(my_shiritori.play(\\\"oops\\\"), is(\\\"game over\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test9() {\\n\\t\\tassertEquals(true, my_shiritori.game_over);\\n\\t\\tassertThat(my_shiritori.getWords(), is(new String[]{\\\"apple\\\", \\\"ear\\\", \\\"rhino\\\", \\\"ocelot\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() {\\n\\t\\tassertEquals(\\\"game restarted\\\", my_shiritori.restart());    \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test11() {\\n\\t\\tassertThat(my_shiritori.getWords(), is(new String[]{}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test12() {\\n\\t\\tassertEquals(false,my_shiritori.game_over);\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test13() {\\n\\t\\tassertThat(my_shiritori2.play(\\\"hostess\\\"), is(new String[]{\\\"hostess\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test14() {\\n\\t\\tassertEquals(false,my_shiritori2.game_over);\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test15() {\\n\\t\\tassertThat(my_shiritori2.play(\\\"stash\\\"), is(new String[]{\\\"hostess\\\", \\\"stash\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test16() {\\n\\t\\tassertThat(my_shiritori2.play(\\\"hostess\\\"), is(\\\"game over\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test17() {\\n\\t\\tassertThat(my_shiritori2.getWords(), is(new String[]{\\\"hostess\\\", \\\"stash\\\"}));\\n\\t}\\n}\",\"language\":\"java\",\"summary\":\"This challenge is an English twist on the Japanese word game Shiritori. The basic premise is to follow two rules:\\n\\nFirst character of next word must match last character of previous word.\\nThe word must not have already been said.\\n\\nBelow is an example of a Shiritori game:\\n[\\\"word\\\", \\\"dowry\\\", \\\"yodel\\\", \\\"leader\\\", \\\"righteous\\\", \\\"serpent\\\"]  // valid!\\n\\n[\\\"motive\\\", \\\"beach\",\"tags\":[\"control_flow\",\"games\",\"classes\",\"strings\"],\"timestamp\":{\"$date\":1571165873093},\"title\":\"Shiritori Game\",\"stats\":{\"completed\":{\"total\":95,\"ratings\":[3,3,3,3,3,3,3,2,4,5,2,5,5,4,3,2,5,2,4,0,5,4,5,3,4,2,2,2,5,3,4,2,3,1,1,4,5,1,2,4,3,5,2,2,2,3,2,2,3,4,1,2,1,4,3,3,3,3,2,2,4,2,1,2,3,3,5],\"rators\":[\"3pdgguqZgNDSAJSGm\",\"QsEkNtBmZedCqsqfY\",\"ct699TXH59y7Fhyh4\",\"YF79LnTdprobbYY5v\",\"ZyGH9Qsk5JNofu5z2\",\"sxci7DYKNa6q22Sjq\",\"6hDCMSAfmNjnA9jvw\",\"Wk3EwrBCtX7RT9wtK\",\"ngRNQYczN4QJ2tDN8\",\"AvEiDZKLHCEQ6n9Ma\",\"2PR653L4KSN97r534\",\"LZSxphM8vH4A6Deqn\",\"wYYMNPe8nSiJFbvJw\",\"7djAghy9fBhtLnKw3\",\"yLnPBNvqAPxJWYrN5\",\"7CRtTWC425yAMHdAp\",\"TrquEHytntLKHA4m2\",\"2y3DQSYBRFDNCqWsW\",\"NTcaQZ6ZGXMXWGR7h\",\"2X8s2BDhbLy3YE93h\",\"TFnJ8qPq6iLYKr6xe\",\"3Jgcv7qGzq4qhfkdD\",\"4FYe2Q6Gh47nj2XPP\",\"cQA7yLw5L4Z53MrgC\",\"zwruFCmuHkwJTpYqg\",\"ZMZXaTqcALZ3wLvgg\",\"k63LjKkX5p7SYng7C\",\"p29jnhDtr28bdD4Xu\",\"rehehi2Tr2mwaEoJE\",\"QKFydGwTvCNKriqiG\",\"QS45qu2DFXcCqpAnB\",\"GoPyN7LaxcbcnwKq9\",\"etoSR23iELGGgs9rA\",\"a5Tuwi5SNDhW4N57Y\",\"Ym8AjbKGSJooun3nt\",\"m6EqR6FY65MGzo7vb\",\"QXR2qGcvrK5Xkxdea\",\"rcxMWFiwvoskMqzNB\",\"BCWcZpjWgCBXYBFuC\",\"gKa9rqX7DLeYKjomz\",\"KooD342x6eT6YiQn8\",\"5iNQPk2LoSAsi7ijH\",\"ecyYaPZLMBMGGrfrJ\",\"RQL2PAWda9Bh79GNi\",\"DkSMZ3jZLkwviKb9g\",\"gXTAie79kiw28tx5u\",\"R9k3kpgzXHLgaQddY\",\"2Kzz5CubctKWfpPBp\",\"bENHjCu6YW6Ev77zy\",\"TWB4ZpAgG464fYZXs\",\"avhzK4MrvB5jw3YDN\",\"a777e8chPvJkY3tKa\",\"udHFfcqNNej6udnpP\",\"4NHyP9TLFudCGghZQ\",\"ZnKvHAgJWQZ2SSfDv\",\"SDSvWibEfFvh3mFaQ\",\"Mw8yqSDFdQui28w5N\",\"zibBg9LdDSZZYLFF2\",\"g5Nzyt998GBpW7ciK\",\"P5qFWmHtGZip3KyHr\",\"Z96GhGMX4TytWoq8J\",\"T2vhHPhRR96hRizq8\",\"97ZkoBPnruN2Dbngw\",\"Prw5Jq38wrSoj5QSF\",\"ydos8Ba8nZdYRNJpS\",\"yRQTxXuCXJTzTBNtr\",\"tPkWdqonkgo7vJWCh\",\"78jr9niDyrYuiCXnX\",\"7LMMvwPB8dfWNvaGm\",\"3fFQ4XkdL2WywELg9\",\"4R3RZ6v5Lyp7MYN2H\",\"4pagg6vw2Cjepv7tN\",\"QcHXbJ47yCCwqy5hv\",\"oETHZjWwfm4EJ73gn\",\"SE9TA23pZfY6NaDzc\",\"fAY4vTEoWbPSE4tb8\",\"5fP4baBwLLr4qoFmQ\",\"AafxRBwKpd6BX8b3e\",\"LNCb5rksJLJ43L4Nw\",\"zwvtLXprhAPo9Ln79\",\"qvHvuHDM4LcKXfPqQ\",\"Kp5sM524mtHNhqHq5\",\"uw47663LqPME8btaA\"],\"quality\":[5,3,2,4,5,5,5,5,5,5,5,5,4,5,3,5,4,4,5,4,4]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":3},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.380952380952381,\"family\":[{\"_id\":\"rqum6rzyZQrC43Ldv\",\"language\":\"java\"},{\"_id\":\"6o5tYwwbY2ys7XTm4\",\"language\":\"javascript\"},{\"_id\":\"dLnZLi8FjaK6qKcvv\",\"language\":\"python3\"},{\"_id\":\"ZBfQk7YMoXTh2hnzx\",\"language\":\"ruby\"}]}}"]