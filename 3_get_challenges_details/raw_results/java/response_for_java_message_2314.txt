a["{\"msg\":\"result\",\"id\":\"711\",\"result\":{\"_id\":\"QdENiEqqhHtYFrk5A\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class Zygodrome {\\n\\tpublic static boolean isZygodrome(long num) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":2.75,\"familyId\":\"keXQuSRWkSABGLcEC\",\"instructions\":\"A number is Zygodrome if it can be partitioned into clusters of repeating digits with a length equals or greater than two (as to say that repeating digits need to be placed as  an adjacent pair or a greater group, and that no single digits are allowed).\\n\\nGiven a non-negative integer `num`, implement a function that returns `true` if `num` is a Zygodrome number, or `false` otherwise.\\n\\n### Examples\\n```\\nisZygodrome(11) ➞ true\\n// 11 is a pair of repeated digits\\n\\nisZygodrome(33322) ➞ true\\n// 333 is a triplet of repeated digits, and 22 is a pair\\n\\nisZygodrome(5) ➞ false\\n// 5 is a single digit, it doesn't form a pair\\n\\nisZygodrome(1001) ➞ false\\n// 00 is a pair, but the two 1's are not adjacent\\n```\\n\\n### Notes\\n- Trivia: the number `9997777` is the only known Zygodrome prime whose index in the Zygodromes sequence (`664444`) is a prime in turn.\\n- You can expect only non-negative integers as given input, without exceptions to handle.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"import static org.junit.Assert.assertEquals;\\nimport org.junit.Test;\\n\\npublic class ZygodromeTests {\\n\\tprivate long[] numVector = new long[] {\\n\\t\\t11, 222, 223, 1001, 1100, 11122, 3344466777L, 33444667778L, \\n\\t\\t8866611229999L, 9977866655522L, 99999999, 0\\n\\t};\\n\\tprivate boolean[] resVector = new boolean[] {\\n\\t\\ttrue, true, false, false, true, true, true, false, true, \\n\\t\\tfalse, true, false\\n\\t};\\n\\t\\n\\t@Test\\n\\tpublic void test01() {\\n\\t\\tassertEquals(Zygodrome.isZygodrome(numVector[0]), resVector[0]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test02() {\\n\\t\\tassertEquals(Zygodrome.isZygodrome(numVector[1]), resVector[1]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test03() {\\n\\t\\tassertEquals(Zygodrome.isZygodrome(numVector[2]), resVector[2]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test04() {\\n\\t\\tassertEquals(Zygodrome.isZygodrome(numVector[3]), resVector[3]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test05() {\\n\\t\\tassertEquals(Zygodrome.isZygodrome(numVector[4]), resVector[4]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test06() {\\n\\t\\tassertEquals(Zygodrome.isZygodrome(numVector[5]), resVector[5]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test07() {\\n\\t\\tassertEquals(Zygodrome.isZygodrome(numVector[6]), resVector[6]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test08() {\\n\\t\\tassertEquals(Zygodrome.isZygodrome(numVector[7]), resVector[7]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test09() {\\n\\t\\tassertEquals(Zygodrome.isZygodrome(numVector[8]), resVector[8]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test10() {\\n\\t\\tassertEquals(Zygodrome.isZygodrome(numVector[9]), resVector[9]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test11() {\\n\\t\\tassertEquals(Zygodrome.isZygodrome(numVector[10]), resVector[10]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test12() {\\n\\t\\tassertEquals(Zygodrome.isZygodrome(numVector[11]), resVector[11]);\\n\\t}\\n\\t\\n}\",\"language\":\"java\",\"quality\":0,\"summary\":\"A number is Zygodrome if it can be partitioned into clusters of repeating digits with a length equals or greater than two (as to say that repeating digits need to be placed as  an adjacent pair or a greater group, and that no single digits are allowed).\\n\\nGiven a non-negative integer num, implement a function that returns true if num is a Zygodrome number, or f\",\"tags\":[\"numbers\",\"validation\"],\"timestamp\":{\"$date\":1603003350780},\"title\":\"Zygodromes\",\"stats\":{\"completed\":{\"total\":16,\"ratings\":[2,2,2,2,2,2,3,2,4,3,1,4,5,3,4,3,2,4,2,3],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"Es4eX2stRpyoXeC7f\",\"gXTAie79kiw28tx5u\",\"yXGiiSAR5nBHnH3yr\",\"jyoLggHk8xQKZuoQC\",\"LNCb5rksJLJ43L4Nw\",\"rRLzNW4bS7PHwYYat\",\"nHj7SC5cnmkTApbgY\",\"XTuxCoKrN9DZ7zaQx\",\"6orCHyAFifJGgK6Ed\",\"rhS8qXRjZcpDXkwnE\",\"buX4mCQhtXCfBjeno\",\"KMR6vNzvSKMA2cXnK\",\"sxci7DYKNa6q22Sjq\",\"htXCitorobtqYymjN\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"xCiiARMydguvsnxdL\",\"language\":\"cpp\"},{\"_id\":\"QdENiEqqhHtYFrk5A\",\"language\":\"java\"},{\"_id\":\"7bJApSrKyv72yWa2d\",\"language\":\"javascript\"},{\"_id\":\"SEHW8YBzmcz9rzNDj\",\"language\":\"php\"},{\"_id\":\"xFme9FBuvHLveh5nE\",\"language\":\"python3\"},{\"_id\":\"kayh4w2n9YKo2nd4m\",\"language\":\"ruby\"}]}}"]