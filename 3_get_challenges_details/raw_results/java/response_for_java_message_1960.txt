a["{\"msg\":\"result\",\"id\":\"538\",\"result\":{\"_id\":\"Eiyu2SZk9rgdp5gZd\",\"author\":\"Edward Clark\",\"authorId\":\"3pdgguqZgNDSAJSGm\",\"code\":\"public class Challenge {\\n\\tpublic static boolean canBuild(String[] arr) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":2.1018518518518516,\"familyId\":\"3DCF2Q2C2bgpSzffP\",\"instructions\":\"You are given an input list of strings, ordered by ascending length.\\n\\nWrite a function that returns `True` if, for each pair of consecutive strings, the second string can be formed from the first by adding a **single letter** either at the **beginning or end**.\\n\\n### Examples\\n```\\ncanBuild([\\\"a\\\", \\\"at\\\", \\\"ate\\\", \\\"late\\\", \\\"plate\\\", \\\"plates\\\"]) ➞ True\\n\\ncanBuild([\\\"a\\\", \\\"at\\\", \\\"ate\\\", \\\"late\\\", \\\"plate\\\", \\\"plater\\\", \\\"platter\\\"]) ➞ False\\n# \\\"platter\\\" is formed by adding \\\"t\\\" in the middle of \\\"plater\\\"\\n\\ncanBuild([\\\"it\\\", \\\"bit\\\", \\\"bite\\\", \\\"biters\\\"]) ➞ False\\n# \\\"biters\\\" is formed by adding two letters - we can only add one\\n\\ncanBuild([\\\"mean\\\", \\\"meany\\\"]) ➞ True\\n```\\n\\n### Notes\\n- Return `False` if a word is **NOT** formed by adding **only one letter**.\\n- Return `False` if the letter is added to the **middle** of the previous word.\\n- Letters in tests will all be **lower case**.\",\"lab\":\"import static org.hamcrest.core.Is.is;\\nimport org.junit.Test;\\nimport static org.junit.Assert.assertThat;\\n\\npublic class ChallengeTest {\\n\\t@Test\\n\\tpublic void test1() {\\n\\t\\t\\tassertThat(Challenge.canBuild(new String[]{\\\"a\\\", \\\"at\\\", \\\"ate\\\", \\\"late\\\", \\\"plate\\\", \\\"plates\\\"}), is(true));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test2() {\\n\\t\\t\\tassertThat(Challenge.canBuild(new String[]{\\\"u\\\", \\\"ut\\\", \\\"but\\\", \\\"butt\\\", \\\"butte\\\", \\\"butter\\\", \\\"buttery\\\"}), is(true));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test3() {\\n\\t\\t\\tassertThat(Challenge.canBuild(new String[]{\\\"a\\\", \\\"ka\\\", \\\"ika\\\", \\\"pika\\\", \\\"pikac\\\", \\\"pikach\\\", \\\"pikachu\\\"}), is(true));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test4() {\\n\\t\\t\\tassertThat(Challenge.canBuild(new String[]{\\\"a\\\", \\\"at\\\", \\\"tat\\\", \\\"stat\\\", \\\"state\\\", \\\"estate\\\", \\\"estates\\\"}), is(true));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test5() {\\n\\t\\t\\tassertThat(Challenge.canBuild(new String[]{\\\"o\\\", \\\"ol\\\", \\\"old\\\", \\\"bold\\\", \\\"bolde\\\", \\\"mbolde\\\", \\\"embolde\\\", \\\"embolden\\\"}), is(true));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test6() {\\n\\t\\t\\tassertThat(Challenge.canBuild(new String[]{\\\"mean\\\", \\\"meany\\\"}),is(true));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test7() {\\n\\t\\t\\tassertThat(Challenge.canBuild(new String[]{\\\"at\\\", \\\"cat\\\", \\\"cate\\\", \\\"cater\\\", \\\"caters\\\"}),is(true));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test8() {\\n\\t\\t\\tassertThat(Challenge.canBuild(new String[]{\\\"a\\\", \\\"at\\\", \\\"ate\\\", \\\"late\\\", \\\"plate\\\", \\\"plater\\\", \\\"platter\\\"}),is(false));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test9() {\\n\\t\\t\\tassertThat(Challenge.canBuild(new String[]{\\\"i\\\", \\\"it\\\", \\\"bit\\\", \\\"bite\\\", \\\"biters\\\"}),is(false));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() {\\n\\t\\t\\tassertThat(Challenge.canBuild(new String[]{\\\"e\\\", \\\"tea\\\", \\\"teac\\\", \\\"teach\\\", \\\"teache\\\", \\\"teacher\\\", \\\"teachers\\\"}),is(false));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test11() {\\n\\t\\t\\tassertThat(Challenge.canBuild(new String[]{\\\"m\\\", \\\"ma\\\", \\\"man\\\", \\\"many\\\", \\\"meany\\\"}),is(false));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test12() {\\n\\t\\t\\tassertThat(Challenge.canBuild(new String[]{\\\"o\\\", \\\"op\\\", \\\"top\\\", \\\"stop\\\", \\\"stops\\\", \\\"stoops\\\"}),is(false));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test13() {\\n\\t\\t\\tassertThat(Challenge.canBuild(new String[]{\\\"air\\\", \\\"air\\\", \\\"airy\\\", \\\"fairy\\\"}),is(false));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test14() {\\n\\t\\t\\tassertThat(Challenge.canBuild(new String[]{\\\"men\\\", \\\"mean\\\", \\\"meany\\\"}),is(false));\\n\\t}\\n}\",\"language\":\"java\",\"summary\":\"You are given an input list of strings, ordered by ascending length.\\n\\nWrite a function that returns True if, for each pair of consecutive strings, the second string can be formed from the first by adding a single letter either at the beginning or end.\\n\\nExamples\\ncan_build([\\\"a\\\", \\\"at\\\", \\\"ate\\\", \\\"late\\\", \\\"plate\\\", \\\"plates\\\"]) ➞ True\\n\\ncan_build([\\\"a\\\", \\\"at\\\", \\\"ate\\\", \\\"late\\\"\",\"tags\":[\"strings\",\"validation\",\"arrays\"],\"timestamp\":{\"$date\":1570391669504},\"title\":\"Building up a Word\",\"stats\":{\"completed\":{\"total\":162,\"ratings\":[3,3,3,3,3,4,0,4,3,2,4,1,2,0,0,3,3,3,2,0,3,2,2,3,2,2,3,0,3,0,0,2,1,1,2,1,2,2,2,1,2,2,1,1,2,1,3,1,3,2,2,0,1,1,4,2,2,3,1,3,2,1,3,3,2,2,2,2,3,3,2,1,3,2,1,2,3,2,3,3,3,3,1,2,2,2,3,3,3,3,3,2,3,1,3,2,1,1,2,2,2,3,3,2,3,3,3,1],\"rators\":[\"3pdgguqZgNDSAJSGm\",\"YdK77dcrqqhWz8rrp\",\"XTuxCoKrN9DZ7zaQx\",\"fQCHGFe43dEtqjEFT\",\"urckS99caSjRxPBvp\",\"SnY7WidXJoAyyuPuA\",\"sxci7DYKNa6q22Sjq\",\"YF79LnTdprobbYY5v\",\"ZbB6NcKPmMRHT7aSu\",\"cpTAZ6r4gH5TZ6zD2\",\"eXW8reZCCZHQzJjQi\",\"CYt2jTCEuK9dYWruk\",\"qJZsi5rhRnWA38FbA\",\"Jrqv7bj8fMfBsSSYs\",\"XbBsZ7vSHdw88tibi\",\"Ytye5oMhk6r5aaBvg\",\"D6J3wu8fB5ksyoya6\",\"Es4eX2stRpyoXeC7f\",\"4RHx3H8EwP2oboW8e\",\"YLqdr7bYjwew2KM4N\",\"wYYMNPe8nSiJFbvJw\",\"gGnDsJz5hr2t9MKCF\",\"8J2Dqqz9PaFufQzwY\",\"TrquEHytntLKHA4m2\",\"jyoLggHk8xQKZuoQC\",\"pBMXMQem6BpSeooYT\",\"imoNrk36ozReP939p\",\"rehehi2Tr2mwaEoJE\",\"k63LjKkX5p7SYng7C\",\"Wf7nCHS4Gq5tx659h\",\"5seiNqw6ZXoF2GRRd\",\"rA5nhfhFwfqvmJb6M\",\"4RsakkyRXyYGwFxEa\",\"5WQZzuHZBGqFeNQi3\",\"q2tzvkrLASvSjkek9\",\"wsjr8C33NPyGYAqKu\",\"rvojHhKH3DaxotefQ\",\"PP5orY9GrRyMfeFar\",\"6fWwjSDuMGwbDDAkD\",\"osXNzc2aCxspRwheS\",\"jRqY4i8gPemsZMBGf\",\"7amNEuZodjynhaDQq\",\"9pqtNWrsTJdZcRbEZ\",\"qRhXvCaA7qgDoeFnr\",\"KQTq9W7Pqg73ETYcK\",\"2NJuDfSqdrF8kHHni\",\"f6uGKbmMdBYCjrMBh\",\"KxLMWekCxzy2Eem7u\",\"gkqp3EuvuiFXFAFtW\",\"nQfyptEov9qEHtaGc\",\"itoJJQ6NNpdp4xTDb\",\"i3TRCkidxKop3WtE2\",\"mGaEDPw5FsDb3vdnq\",\"etoSR23iELGGgs9rA\",\"Pax7QeaJfQD9Ctxx3\",\"r9hHZYPQAqJ9DbwLX\",\"ZDp3qKrTjsQzbCSG3\",\"bjKYBdDcGMRTfooBs\",\"DzvdGwHEjqsX7wyKr\",\"MBEwq8srjd2oA5W58\",\"hx3ZWiCKNtqwMWFCt\",\"nLb2L7vY7vd9k5L4w\",\"qTXNwXBDtH3j6t7hw\",\"xdS2Wao3BYiWTo4H2\",\"yMbBn4RKqQj8A4twp\",\"bTLeuhN23c6ETYa6N\",\"JFodQijHHdRkkrZvT\",\"XqLRkScChkakbwd5z\",\"Fdq6CxMWZL8WZiNaM\",\"rWhXHhzF4W8bea6LP\",\"KooD342x6eT6YiQn8\",\"2xFvy6u3hE4LtCXMD\",\"x3WsGCnE38anLjJqh\",\"y6kfyYmydcD8tkBk7\",\"gXTAie79kiw28tx5u\",\"iZhTdp2KS3SnZTncb\",\"yXGiiSAR5nBHnH3yr\",\"arsuGN4JCiHmLuwve\",\"eSewzYmhWeS4HWutm\",\"82weQfHHmno4Mq4X7\",\"8c8P2NGJisyn2QepD\",\"QfjvAWZnumxpSYpzQ\",\"dTgsZwMNWEGdoJ59z\",\"eBgN48uPauTRcPpRb\",\"4nMm5uxZxCriJaoHP\",\"jhEgpqsboiWai8sLJ\",\"P5BhjZxyeHQYTNyB9\",\"mQKWauR6b252TmdX4\",\"rGpPd6PvpzLaqps4g\",\"FCkjDL4WAu3d6rAkC\",\"8Xx8nWXRydHDBGfQf\",\"jXTnL3JatkKjoifyb\",\"j5QzY7Rc4fqdTdxuv\",\"a777e8chPvJkY3tKa\",\"zE46SymvixkeFJmPM\",\"4n4gPJDy5pGLkZfBi\",\"hD6sfDtntpqT8NR2o\",\"NYEt8oHpnnqXKtXhN\",\"5R9nW7JC9PH4Pdsk5\",\"cRXX4tFmtXEfjdHk5\",\"f4zCPbQHwBfi9YueC\",\"p2woPCQKXuWJCwffJ\",\"T2vhHPhRR96hRizq8\",\"FeRhdBde27zg3vD2F\",\"zbP2a97teg8aETaXu\",\"Q4RHqbSCspLCPqvHe\",\"DxQAmbSycE5AjAtr2\",\"DrkR35NqnP9NDLbq6\",\"tttmkGWkFdGQTtKzq\",\"qb2DTmzQj4vNfq5K7\",\"oMZovHkR6QqNvQwyc\",\"H5KSDzxwGtgftsuik\",\"YNR2PAWqhpSMexy47\",\"GJCv4oGf9q2ZQr93W\",\"p8qqFdJ3FSk5x9z3G\",\"RGN3QTb5LXj4ZPPkj\",\"QD7mPMD8gmTP56nPv\",\"Po3v3dHCk6wYGKMwi\",\"LNCb5rksJLJ43L4Nw\",\"pCbFsvyiooabCFEgd\",\"zHCvsprtbScc7qfCK\",\"LZSxphM8vH4A6Deqn\",\"wT5gGgvjKc5wz59AQ\",\"Aq7wRXeG9EChyLz2z\",\"eNho59GhDYTtiqJC7\",\"zBtEw5ZutA75pzKme\",\"buX4mCQhtXCfBjeno\",\"mDWNyaaQ9hvPCRzSd\",\"J5BHGz2BWsw9zbC8j\",\"rhS8qXRjZcpDXkwnE\",\"4ySzqKC5s3ZRpG9di\",\"CggGfsERnPKGupFWp\",\"563onSvqgjToY79ah\",\"htXCitorobtqYymjN\",\"a49eNnfRwSMxsDJXf\",\"jCjCvyhqhpebkJn34\",\"2NJZbusRvu3eJ4tHu\",\"xW9nC9h6p77YT2iso\",\"wFRLGjA56kj7xyhmv\",\"KMR6vNzvSKMA2cXnK\",\"9vyjn4WyWtJ6o2wop\",\"X3PBahBBCSJviYbsu\",\"mTjNM4XNxSNoL7kZp\",\"6rvJwN4mcX7iYGjY7\",\"Xc7GRZYkNi4ieKeWS\",\"uw47663LqPME8btaA\"],\"quality\":[4,5,3,5,4,4,2,5,4,4,5,4,5,5,5,5,5,5,5,4,5,5,4,5,5,5,5,5,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.5813953488372094,\"family\":[{\"_id\":\"3L5nGsiBp95gmGhG7\",\"language\":\"cpp\"},{\"_id\":\"Eiyu2SZk9rgdp5gZd\",\"language\":\"java\"},{\"_id\":\"P7SoyRXhQrhdZTFak\",\"language\":\"javascript\"},{\"_id\":\"zQespQxTsiGoeMNP3\",\"language\":\"python3\"},{\"_id\":\"Ryc76RB3iAXLq7Ask\",\"language\":\"ruby\"}]}}"]