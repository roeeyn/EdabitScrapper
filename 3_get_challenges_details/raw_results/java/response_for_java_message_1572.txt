a["{\"msg\":\"result\",\"id\":\"345\",\"result\":{\"_id\":\"nXkhpafB9e5c7fNcg\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"public class Challenge {\\n\\tpublic static int wordNest(String word, String nest) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":1.4954128440366972,\"familyId\":\"JDqAqLLscgbApeAoC\",\"instructions\":\"A word nest is created by taking a starting word, and generating a new string by placing the word _inside_ itself. This process is then repeated.\\n\\nNesting 3 times with the word \\\"incredible\\\":\\n\\n```\\nstart  = incredible\\nfirst  = incre|incredible|dible\\nsecond = increin|incredible|credibledible\\nthird  = increinincr|incredible|ediblecredibledible\\n```\\n\\nThe final nest is `\\\"increinincrincredibleediblecredibledible\\\"` (depth = 3).\\n\\nGiven a _starting word_ and the _final word nest_, return the _depth_ of the word nest.\\n\\n### Examples\\n```\\nwordNest(\\\"floor\\\", \\\"floor\\\") ➞ 0\\n\\nwordNest(\\\"code\\\", \\\"cocodccococodededeodeede\\\") ➞ 5\\n\\nwordNest(\\\"incredible\\\", \\\"increinincrincredibleediblecredibledible\\\") ➞ 3\\n```\\n\\n### Notes\\nN/A\",\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n  @Test\\n  public void test1() {\\n    assertEquals(4, Challenge.wordNest(\\\"engagement\\\", \\\"engenengagemengagemeengagementntentgagementagement\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test2() {\\n    assertEquals(1, Challenge.wordNest(\\\"passage\\\", \\\"passpassageage\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test3() {\\n    assertEquals(5, Challenge.wordNest(\\\"factory\\\", \\\"ffacfactofactfafactoryctoryoryrytoryactory\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test4() {\\n    assertEquals(6, Challenge.wordNest(\\\"deny\\\", \\\"ddededdddenyenyenyenynynyeny\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test5() {\\n    assertEquals(8, Challenge.wordNest(\\\"jinx\\\", \\\"jijijjijjijijjinxinxnxnxinxnxinxnxnx\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test6() {\\n    assertEquals(3, Challenge.wordNest(\\\"deal\\\", \\\"dedddealealealal\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test7() {\\n    assertEquals(2, Challenge.wordNest(\\\"paradox\\\", \\\"parparaparadoxdoxadox\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test8() {\\n    assertEquals(4, Challenge.wordNest(\\\"meet\\\", \\\"mmememmeeteeteteteet\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test9() {\\n    assertEquals(1, Challenge.wordNest(\\\"last\\\", \\\"lalastst\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test10() {\\n    assertEquals(3, Challenge.wordNest(\\\"silence\\\", \\\"sisilsisilencelenceencelence\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test11() {\\n    assertEquals(0, Challenge.wordNest(\\\"inflate\\\", \\\"inflate\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test12() {\\n    assertEquals(10, Challenge.wordNest(\\\"ruin\\\", \\\"rurrurrrrrrururuinininuinuinuinuinuininuinin\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test13() {\\n    assertEquals(7, Challenge.wordNest(\\\"episode\\\", \\\"episoepisepisepiepiepiepisoepisodedesodesodesodeodeodede\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test14() {\\n    assertEquals(8, Challenge.wordNest(\\\"dictate\\\", \\\"dictadicdidictdiddictadictadictateteteictatectateatectatetatete\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test15() {\\n    assertEquals(9, Challenge.wordNest(\\\"caller\\\", \\\"callcacacalccallcacaccallerallerllerllererallerlerllerllerer\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test16() {\\n    assertEquals(3, Challenge.wordNest(\\\"sweater\\\", \\\"sweatsweswsweatereateraterer\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test17() {\\n    assertEquals(8, Challenge.wordNest(\\\"measure\\\", \\\"measumememeasumemmeasmmeasureeasureureeasureasurereasureasurere\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test18() {\\n    assertEquals(5, Challenge.wordNest(\\\"relieve\\\", \\\"relierelierelrelierrelieveelieveveieveveve\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test19() {\\n    assertEquals(10, Challenge.wordNest(\\\"home\\\", \\\"hohohohhohohhhohhomeomemeomeomememeomemememe\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test20() {\\n    assertEquals(1, Challenge.wordNest(\\\"profession\\\", \\\"profesprofessionsion\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test21() {\\n    assertEquals(5, Challenge.wordNest(\\\"continuous\\\", \\\"contcontcontinuoconcocontinuousntinuoustinuoususinuousinuous\\\"));\\n  }\\n}\",\"language\":\"java\",\"summary\":\"A word nest is created by taking a starting word, and generating a new string by placing the word inside itself. This process is then repeated.\\n\\nNesting 3 times with the word \\\"incredible\\\":\\n\\nstart  = incredible\\nfirst  = incre|incredible|dible\\nsecond = increin|incredible|credibledible\\nthird  = increinincr|incredible|ediblecredibledible\\n\\nThe final nest is \\\"increi\",\"tags\":[\"language_fundamentals\",\"strings\"],\"timestamp\":{\"$date\":1568252772164},\"title\":\"Word Nests\",\"stats\":{\"completed\":{\"total\":146,\"ratings\":[2,2,2,2,2,1,1,2,1,3,0,3,1,2,2,1,0,3,2,0,1,2,0,1,2,0,2,1,1,2,2,3,3,1,0,2,2,1,0,0,1,2,2,2,0,1,0,2,0,2,2,0,2,1,3,2,0,0,1,0,2,3,2,2,1,1,2,2,1,2,2,2,1,1,2,3,2,2,0,0,0,2,2,2,3,2,2,2,1,2,1,0,1,3,1,2,1,1,3,2,1,2,2,2,1,2,2,2,2],\"rators\":[\"sxci7DYKNa6q22Sjq\",\"aMNhTh35QQAs33ycQ\",\"9c8n7ti5vCjTRgiGN\",\"CLmJduqJHX83dM4Pd\",\"fmNXmbqizQq4e3Jxd\",\"8J2Dqqz9PaFufQzwY\",\"AyrEvM2GLX2jqM772\",\"Es4eX2stRpyoXeC7f\",\"hB5mgzMwQSnhBzi7P\",\"Kso7rzAKB4TTCPKgM\",\"5seiNqw6ZXoF2GRRd\",\"fZjkX29nhRTWWb75k\",\"jyoLggHk8xQKZuoQC\",\"TrquEHytntLKHA4m2\",\"WZujpe8yQAyZmpWHg\",\"etoSR23iELGGgs9rA\",\"Nb6LYPoQP6KJZt8mz\",\"aZKoZiE6FmzM43jBL\",\"C9yBWYcZsjmJYww3K\",\"htXCitorobtqYymjN\",\"dpJTai3i9aNkCS3sa\",\"DzvdGwHEjqsX7wyKr\",\"B4pxRqzo43M7S8FbP\",\"AXXEAHc59NYgHMv74\",\"dcW9oK2uRo8h8mBe2\",\"y6kfyYmydcD8tkBk7\",\"mfm3gB39arY8Rjb2y\",\"rvojHhKH3DaxotefQ\",\"Fd9765rksgPK4E2Zy\",\"xPqMCDSckCDNwZusv\",\"YFHkjbM6obMSj24zi\",\"yXGiiSAR5nBHnH3yr\",\"gXTAie79kiw28tx5u\",\"Yp7uvStL97cC9fKkY\",\"jb9RLyyuo565bKDzN\",\"rWhXHhzF4W8bea6LP\",\"mG8HqKiAQFTdRZthG\",\"AeJSxRqw2dJZuGvdk\",\"8Xx8nWXRydHDBGfQf\",\"jXTnL3JatkKjoifyb\",\"P5BhjZxyeHQYTNyB9\",\"qMds9ppJy2Tn9wxEp\",\"5Rr75sFqhpkowFk3k\",\"tyLS9T6YMfg9fMtYJ\",\"mQKWauR6b252TmdX4\",\"pi76g3eRpnKrhee2a\",\"a49eNnfRwSMxsDJXf\",\"gBGjCfJvPHswDM5JQ\",\"goQ7omAtpZKJjr8sN\",\"bur3yQ8s34zqKGEro\",\"LMQD8brbBgXD4MnzR\",\"xhBmKfR8bBWtAqBM9\",\"srJ34BaybkQh3qRkM\",\"MCjiQgFzMvBJkEPou\",\"Po3v3dHCk6wYGKMwi\",\"7s4cY6FiftwB9HnAK\",\"uFfEio8nzDvL8emhp\",\"gPxdhHsQXpXmH5356\",\"xfoqta2hyAk7eK8ZC\",\"mmfuJ3ZR8NMvdDvaN\",\"fcrDYBingyRtsAJAT\",\"wTDdvQGaptxRz9v6Z\",\"389fo5NAhZveAHpks\",\"c2KDufFGPes2gHEJG\",\"7DLmsibbFQKcmeP5E\",\"wB47dmNBe3aFZZcFr\",\"6DyWxLuLh6zECgtuJ\",\"p8qqFdJ3FSk5x9z3G\",\"eQXwk5zGckM8tCWYH\",\"zZcJgEWLXwZzdsm67\",\"r8WfKzz9m2WHYTvNx\",\"tMsc3Nx2JkjEBwFbW\",\"nHj7SC5cnmkTApbgY\",\"hhxjQREtmHSheH9Pj\",\"Cx9yKQ2CK9b58tz7n\",\"QXMGPNpD3jBDqb9r9\",\"bWjPqfHQhLL3m4koe\",\"buX4mCQhtXCfBjeno\",\"zZfMwLuoERGmybgib\",\"NnymXePpDaZnp2fRd\",\"cyffsaMGoowRrRMyp\",\"LZSxphM8vH4A6Deqn\",\"u5EAu992iJnHRL2Eb\",\"zHCvsprtbScc7qfCK\",\"NtGwvEjQk4v8BMyFa\",\"x4RXWxXdpiBNX3cYQ\",\"wXEcy5EJ9tkCJ2A5C\",\"ZMd8it647JSYTvx8Z\",\"DWX8Fpq6fPBXgYsLp\",\"pJKghwX36MDizgKCx\",\"iwPwuaaE86cYuE7wM\",\"7ospYKSiS9uy932FK\",\"nSQh85oi5P26GsCew\",\"cbf9FfanyeLsFfncx\",\"iuR277vYsG792QaST\",\"RKDisWCPypAEasY9j\",\"vNfAuaC7AdfnQiz5w\",\"8jCyc6uxRuJyoeKX6\",\"g95KBbC33RPmu9XNs\",\"oBGTbTXvsKJyHrKxt\",\"Ag5fRrZ9MrAZc9vpj\",\"xuNYWdXut4gbG7KJF\",\"3uSLboG77z54u8ZtZ\",\"MR3XyfWrjiMM5Pokw\",\"vitL97me5hYW9rY3L\",\"3aZZQZAFq49PmCGzo\",\"y3ZHAPcB5DDS9Dpnq\",\"DkSMZ3jZLkwviKb9g\",\"CkDupbJZZZZdhBdr2\",\"6rvJwN4mcX7iYGjY7\",\"GaJNJwcdyB9ueYFst\",\"xEX3TDY6C2h82dJTn\",\"Ge8P4htZZqpgo9W3N\",\"xpCx3SrKyHN7z8PmG\",\"pHp9XWwL6QBTRSWPY\",\"xeKqsuCiZLBxveHAi\",\"ST9SLqmhXKemBMeXP\",\"SgPjF69J25jT3dn4X\",\"4irv8Ebh9gRyRw9pC\",\"HXbTKW3jmmyRAsKrr\",\"uw47663LqPME8btaA\",\"2psNKibRQYDnBBKwR\",\"CggGfsERnPKGupFWp\",\"wTc283wowqsFisKNC\",\"rhS8qXRjZcpDXkwnE\",\"zF8vSy676dJddKeZz\",\"YmMgWhzhHhQLmGGgH\",\"DxvcAMpAR7Ckvrgbb\",\"GBwGqTWbfaanB5PnE\",\"MpfytGFYF77emJ3cT\",\"4bPB4h5maxK5oDdSE\",\"jBBZ2iNr8a3SnzX93\",\"wFRLGjA56kj7xyhmv\",\"RsujLHaML6L3KinzK\",\"jCjCvyhqhpebkJn34\",\"KMR6vNzvSKMA2cXnK\",\"unqzSsxpxj9sZ7rbD\",\"563onSvqgjToY79ah\",\"XH6378Zm3WBm679yx\",\"nFbmNzMQ38TncmfQX\",\"ckQwFFWyLXmDQAaCn\"],\"quality\":[5,4,4,5,5,5,5,4,5,5,5,4,5,5,3,5,5,4,4,3,5,4,5,5,5,3,5,5,3,3,5,3,5,3,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"isHidden\":false,\"quality\":4.4324324324324325,\"family\":[{\"_id\":\"zuaN5v8CsiTEKhcju\",\"language\":\"cpp\"},{\"_id\":\"nXkhpafB9e5c7fNcg\",\"language\":\"java\"},{\"_id\":\"yDQnwtscs6sRi27we\",\"language\":\"javascript\"},{\"_id\":\"EjjBGn7hkmhgxqJej\",\"language\":\"python3\"},{\"_id\":\"2YqvgJv8dd2Ls6gHP\",\"language\":\"ruby\"}]}}"]