a["{\"msg\":\"result\",\"id\":\"606\",\"result\":{\"_id\":\"5Jw7K2fvuaAqRPPtJ\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"public class Challenge {\\n  public static boolean isBrilliant(int n) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":2.2222222222222223,\"familyId\":\"nSTvCoj7wPfaPqFzw\",\"instructions\":\"In this challenge, you have to establish if a given number is _Brilliant_. A Brilliant number is a semiprime that can be obtained only by multiplicating two, and only two, different primes with the same number of digits.\\n\\nA semiprime can be:\\n\\n- A **composite** number equal to the **product of two different primes**.\\n- A **composite** number equal to the **square of a prime**.\\n\\nGiven an integer `n`, implement a function that returns `true` if `n` is a Brilliant number, or `false` if it's not.\\n\\n### Examples\\n```\\nisBrilliant(11) ➞ false\\n// 11 is a prime.\\n\\nisBrilliant(9) ➞ true\\n// 9 is equal to the square of a prime: 3²\\n\\nisBrilliant(21) ➞ true\\n// 21 is equal to the product of two different primes: 3 x 7\\n// 3 and 7 have the same digital length.\\n\\nisBrilliant(22) ➞ false\\n// 22 is equal to the product of two different primes: 2 x 11\\n// 2 and 11 have different digital lengths.\\n```\\n\\n### Notes\\n- The given `n` will be a positive integer greater than 0.\\n- Remember that a Brilliant number is a semiprime that can be obtained only with a single combination of different primes having the same digital length.\",\"isHidden\":false,\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n  @Test\\n  public void test1() {\\n    assertEquals(false, Challenge.isBrilliant(11));\\n  }\\n\\t\\n\\t@Test\\n  public void test2() {\\n    assertEquals(true, Challenge.isBrilliant(9));\\n  }\\n\\t\\n\\t@Test\\n  public void test3() {\\n    assertEquals(true, Challenge.isBrilliant(21));\\n  }\\n\\t\\n\\t@Test\\n  public void test4() {\\n    assertEquals(false, Challenge.isBrilliant(22));\\n  }\\n\\t\\n\\t@Test\\n  public void test5() {\\n    assertEquals(false, Challenge.isBrilliant(1001));\\n  }\\n\\t\\n\\t@Test\\n  public void test6() {\\n    assertEquals(false, Challenge.isBrilliant(77));\\n  }\\n\\t\\n\\t@Test\\n  public void test7() {\\n    assertEquals(true, Challenge.isBrilliant(209));\\n  }\\n\\t\\n\\t@Test\\n  public void test8() {\\n    assertEquals(false, Challenge.isBrilliant(211));\\n  }\\n\\t\\n\\t@Test\\n  public void test9() {\\n    assertEquals(false, Challenge.isBrilliant(780));\\n  }\\n\\t\\n\\t@Test\\n  public void test10() {\\n    assertEquals(true, Challenge.isBrilliant(703));\\n  }\\n\\t\\n\\t@Test\\n  public void test11() {\\n    assertEquals(false, Challenge.isBrilliant(1000));\\n  }\\n\\t\\n\\t@Test\\n  public void test12() {\\n    assertEquals(true, Challenge.isBrilliant(1003));\\n  }\\n\\t\\n\\t@Test\\n  public void test13() {\\n    assertEquals(false, Challenge.isBrilliant(1008));\\n  }\\n\\t\\n\\t@Test\\n  public void test14() {\\n    assertEquals(true, Challenge.isBrilliant(16459));\\n  }\\n\\t\\n\\t@Test\\n  public void test15() {\\n    assertEquals(false, Challenge.isBrilliant(348166));\\n  }\\n\\t\\n\\t@Test\\n  public void test16() {\\n    assertEquals(true, Challenge.isBrilliant(768017));\\n  }\\n}\",\"language\":\"java\",\"summary\":\"In this challenge, you have to establish if a given number is Brilliant. A Brilliant number is a semiprime that can be obtained only by multiplicating two, and only two, different primes with the same number of digits.\\n\\nA semiprime can be:\\n\\nA composite number equal to the product of two different primes.\\nA composite number equal to the square of a prime.\\n\\nGive\",\"tags\":[\"higher_order_functions\",\"numbers\",\"math\",\"loops\"],\"timestamp\":{\"$date\":1576129996372},\"title\":\"Shiny Semiprimes: Brilliant Numbers\",\"stats\":{\"completed\":{\"total\":31,\"ratings\":[2,2,2,2,2,2,0,5,3,1,3,2,1,1,1,3,2,3,2,2,4,3,3,2,2,3,2],\"rators\":[\"sxci7DYKNa6q22Sjq\",\"SnY7WidXJoAyyuPuA\",\"AyrEvM2GLX2jqM772\",\"Es4eX2stRpyoXeC7f\",\"8J2Dqqz9PaFufQzwY\",\"cjxsqXfkAPoadmppi\",\"jyoLggHk8xQKZuoQC\",\"etoSR23iELGGgs9rA\",\"5seiNqw6ZXoF2GRRd\",\"rehehi2Tr2mwaEoJE\",\"htXCitorobtqYymjN\",\"4RsakkyRXyYGwFxEa\",\"R8YWhHoXoasSsLJs4\",\"c7uBxu2rgY77H5d79\",\"DzvdGwHEjqsX7wyKr\",\"gXTAie79kiw28tx5u\",\"yXGiiSAR5nBHnH3yr\",\"xGtxQz9WnAPPKJZxK\",\"buX4mCQhtXCfBjeno\",\"rhS8qXRjZcpDXkwnE\",\"jCjCvyhqhpebkJn34\",\"KMR6vNzvSKMA2cXnK\",\"uw47663LqPME8btaA\"],\"quality\":[5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":5,\"family\":[{\"_id\":\"HGMrv7jCtu5MnK4mL\",\"language\":\"cpp\"},{\"_id\":\"5Jw7K2fvuaAqRPPtJ\",\"language\":\"java\"},{\"_id\":\"Kj9uzWHcb5bdDp9NK\",\"language\":\"javascript\"},{\"_id\":\"cvxXvwRnEpekYbzzP\",\"language\":\"python3\"},{\"_id\":\"M52kqitfwGRzecWFc\",\"language\":\"ruby\"}]}}"]