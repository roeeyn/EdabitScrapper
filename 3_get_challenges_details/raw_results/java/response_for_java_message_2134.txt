a["{\"msg\":\"result\",\"id\":\"624\",\"result\":{\"_id\":\"99yALJGy4ZmFzaqvr\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class InverseParityIndex {\\n\\tpublic static Object[] charAtPos(Object[] arr, String par) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":2.259259259259259,\"familyId\":\"t75XWbLAZtLvQCeLh\",\"instructions\":\"Create a function that extracts the items from a **unique array**, given as parameter `arr`, filtered by **positional parity** (`odd` or `even`), given as parameter `par`.\\nReturn an array of items on **odd positions** (... 5, 3, 1) and on **even positions** (... 6, 4, 2) starting from the **last item** in the array.\\n\\n### Examples\\n```\\ncharAtPos([2, 4, 6, 8, 10], \\\"even\\\") ➞ [4, 8]\\n// 4 & 8 occupy the 4th & 2nd positions from right.\\n\\ncharAtPos(['E', 'D', 'A', 'B', 'I', 'T'], \\\"odd\\\") ➞ ['D', 'B', 'T']\\n// D, B and T occupy the 5th, 3rd and 1st positions from right.\\n\\ncharAtPos([\\\")\\\", \\\"(\\\", \\\"*\\\", \\\"&\\\", \\\"^\\\", \\\"%\\\", \\\"$\\\", \\\"#\\\", \\\"@\\\", \\\"!\\\"], \\\"odd\\\") ➞ [\\\"(\\\", \\\"&\\\", \\\"%\\\", \\\"#\\\", \\\"!\\\"]\\n```\\n\\n### Notes\\n- Arrays are zero-indexed, so, index+1 = position or position-1 = index.\\n- The sequence of the items in the resulting array should be retained (i.e. Example #1 - `8` should come after `4` and not otherwise, example #2 - `'B'` should come after `'D'` and before `'T'`).\\n- A recursive version of this challenge can be found via this [link](https://edabit.com/challenge/TcLfFXvBvDqRL82a2).\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"/** \\n========================================== \\nTestGen 2.1 for JUnit 4.13.0 \\t\\t\\nTest Case: InverseParityIndex::charAtPos \\nTimestamp: 10/30/2020 7:57:56 AM \\n------------------------------------------ \\n® DARKKO 2020 © \\n========================================== \\n\\n**/ \\n\\nimport static org.junit.Assert.assertArrayEquals; \\nimport org.junit.Test; \\n\\npublic class InverseParityIndexTest { \\n\\t\\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertArrayEquals(new Object[] {\\\"E\\\",\\\"A\\\",\\\"I\\\"}, InverseParityIndex.charAtPos(new Object[] {\\\"E\\\",\\\"D\\\",\\\"A\\\",\\\"B\\\",\\\"I\\\",\\\"T\\\"}, \\\"even\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertArrayEquals(new Object[] {\\\"D\\\",\\\"B\\\",\\\"T\\\"}, InverseParityIndex.charAtPos(new Object[] {\\\"E\\\",\\\"D\\\",\\\"A\\\",\\\"B\\\",\\\"I\\\",\\\"T\\\"}, \\\"odd\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertArrayEquals(new Object[] {\\\"Q\\\",\\\"E\\\",\\\"T\\\",\\\"U\\\",\\\"O\\\"}, InverseParityIndex.charAtPos(new Object[] {\\\"Q\\\",\\\"W\\\",\\\"E\\\",\\\"R\\\",\\\"T\\\",\\\"Y\\\",\\\"U\\\",\\\"I\\\",\\\"O\\\",\\\"P\\\"}, \\\"even\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertArrayEquals(new Object[] {\\\"O\\\",\\\"U\\\",\\\"T\\\",\\\"E\\\",\\\"Q\\\"}, InverseParityIndex.charAtPos(new Object[] {\\\"P\\\",\\\"O\\\",\\\"I\\\",\\\"U\\\",\\\"Y\\\",\\\"T\\\",\\\"R\\\",\\\"E\\\",\\\"W\\\",\\\"Q\\\"}, \\\"odd\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertArrayEquals(new Object[] {\\\"S\\\",\\\"F\\\",\\\"H\\\",\\\"K\\\",\\\"Z\\\"}, InverseParityIndex.charAtPos(new Object[] {\\\"A\\\",\\\"S\\\",\\\"D\\\",\\\"F\\\",\\\"G\\\",\\\"H\\\",\\\"J\\\",\\\"K\\\",\\\"L\\\",\\\"Z\\\"}, \\\"odd\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertArrayEquals(new Object[] {\\\"A\\\",\\\"D\\\",\\\"G\\\",\\\"J\\\",\\\"L\\\"}, InverseParityIndex.charAtPos(new Object[] {\\\"A\\\",\\\"S\\\",\\\"D\\\",\\\"F\\\",\\\"G\\\",\\\"H\\\",\\\"J\\\",\\\"K\\\",\\\"L\\\",\\\"Z\\\"}, \\\"even\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertArrayEquals(new Object[] {4,8}, InverseParityIndex.charAtPos(new Object[] {2,4,6,8,10}, \\\"even\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertArrayEquals(new Object[] {2,4,6,8,10}, InverseParityIndex.charAtPos(new Object[] {1,2,3,4,5,6,7,8,9,10}, \\\"odd\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test09() { \\n\\t\\tassertArrayEquals(new Object[] {\\\"@\\\",\\\"$\\\",\\\"^\\\",\\\"*\\\",\\\")\\\",\\\"]\\\"}, InverseParityIndex.charAtPos(new Object[] {\\\"!\\\",\\\"@\\\",\\\"#\\\",\\\"$\\\",\\\"%\\\",\\\"^\\\",\\\"&\\\",\\\"*\\\",\\\"(\\\",\\\")\\\",\\\"[\\\",\\\"]\\\"}, \\\"odd\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() { \\n\\t\\tassertArrayEquals(new Object[] {\\\"[\\\",\\\"(\\\",\\\"&\\\",\\\"%\\\",\\\"#\\\",\\\"!\\\"}, InverseParityIndex.charAtPos(new Object[] {\\\"]\\\",\\\"[\\\",\\\")\\\",\\\"(\\\",\\\"*\\\",\\\"&\\\",\\\"^\\\",\\\"%\\\",\\\"$\\\",\\\"#\\\",\\\"@\\\",\\\"!\\\"}, \\\"odd\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test11() { \\n\\t\\tassertArrayEquals(new Object[] {\\\"O\\\",\\\"B\\\",\\\"T\\\",\\\"Y\\\"}, InverseParityIndex.charAtPos(new Object[] {\\\"O\\\",\\\"R\\\",\\\"B\\\",\\\"I\\\",\\\"T\\\",\\\"L\\\",\\\"Y\\\"}, \\\"odd\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test12() { \\n\\t\\tassertArrayEquals(new Object[] {\\\"R\\\",\\\"I\\\",\\\"L\\\"}, InverseParityIndex.charAtPos(new Object[] {\\\"O\\\",\\\"R\\\",\\\"B\\\",\\\"I\\\",\\\"T\\\",\\\"L\\\",\\\"Y\\\"}, \\\"even\\\"));\\n\\t}\\n\\n}\\n// end of tests\",\"language\":\"java\",\"quality\":0,\"summary\":\"Create a function that extracts the items from a unique array, given as parameter arr, filtered by positional parity (odd or even), given as parameter par.\\nReturn an array of items on odd positions (... 5, 3, 1) and on even positions (... 6, 4, 2) starting from the last item in the array.\\n\\nExamples\\ncharAtPos([2, 4, 6, 8, 10], \\\"even\\\") ➞ [4, 8]\\n// 4 & 8 occupy t\",\"tags\":[\"algorithms\",\"arrays\",\"logic\"],\"timestamp\":{\"$date\":1603685581333},\"title\":\"Oddly or Evenly Positioned from Last\",\"stats\":{\"completed\":{\"total\":23,\"ratings\":[2,2,2,2,2,2,3,2,3,2,3,3,3,2,2,3,3,4,4,0,4,1,0,2,2,3,0],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"Es4eX2stRpyoXeC7f\",\"gXTAie79kiw28tx5u\",\"DzvdGwHEjqsX7wyKr\",\"azAzSkvJd7eyXY9x9\",\"yXGiiSAR5nBHnH3yr\",\"jyoLggHk8xQKZuoQC\",\"FgEeQycsn67j9m7xK\",\"rhS8qXRjZcpDXkwnE\",\"gXmjKF8FNhsQN2wGa\",\"qaPjAANdnxFnWfj5d\",\"2NJZbusRvu3eJ4tHu\",\"JugCLLeFDfQcsh68T\",\"rWhXHhzF4W8bea6LP\",\"9iGmusCJ7p8bJKsww\",\"KMR6vNzvSKMA2cXnK\",\"Jfdqemc95XmvczDei\",\"bYz8bN4LGwYzM3Gb8\",\"sxci7DYKNa6q22Sjq\",\"wFRLGjA56kj7xyhmv\",\"htXCitorobtqYymjN\",\"xEX3TDY6C2h82dJTn\"]},\"flags\":0},\"editorId\":\"a777e8chPvJkY3tKa\",\"family\":[{\"_id\":\"99yALJGy4ZmFzaqvr\",\"language\":\"java\"},{\"_id\":\"WZMZEQoaNuhXovauT\",\"language\":\"javascript\"},{\"_id\":\"MoetR7Gy56jDXTdAy\",\"language\":\"php\"},{\"_id\":\"72KukSssxk2eHrWqx\",\"language\":\"python3\"},{\"_id\":\"9s8mAbfYdGDTKqiye\",\"language\":\"ruby\"}]}}"]