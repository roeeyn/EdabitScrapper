a["{\"msg\":\"result\",\"id\":\"707\",\"result\":{\"_id\":\"HssePSisNvLpv72zD\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class PlateNumber {\\n  public static String licensePlate(String code, int group) {\\n  \\n  }\\n}\",\"difficulty\":2.739130434782609,\"familyId\":\"EkwgzHy9TAtgwMt6T\",\"instructions\":\"Travelling through Europe one needs to pay attention to how the license plate in the given country is displayed. When crossing the border you need to park on the shoulder, unscrew the plate, re-group the characters according to the local regulations, attach it back and proceed with the journey.\\n\\nCreate a solution that can format the _dmv number_ into a plate number with correct grouping. The function input consists of string `s` and group length `n`. The output has to be upper case characters and digits. The new groups are made from right to left and connected by `-`. The original order of the _dmv number_ is preserved.\\n\\n### Examples\\n```\\nlicensePlate(\\\"5F3Z-2e-9-w\\\", 4) ➞ \\\"5F3Z-2E9W\\\"\\n\\nlicensePlate(\\\"2-5g-3-J\\\", 2) ➞ \\\"2-5G-3J\\\"\\n\\nlicensePlate(\\\"2-4A0r7-4k\\\", 3) ➞ \\\"24-A0R-74K\\\"\\n\\nlicensePlate(\\\"nlj-206-fv\\\", 3) ➞ \\\"NL-J20-6FV\\\"\\n```\\n\\n### Notes\\n- A recursive version of this challenge can be found in [here](https://edabit.com/challenge/qafJTrENQeMq6apgy).\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"/** \\n====================================== \\nTestGen 2.1 for JUnit 4.13.0 \\t\\t\\nTest Case: PlateNumber::licensePlate \\nTimestamp: 11/4/2020 3:58:29 PM \\n-------------------------------------- \\n® DARKKO 2020 © \\n====================================== \\n\\n**/ \\n\\nimport static org.junit.Assert.assertEquals; \\nimport org.junit.Test; \\n\\npublic class PlateNumberTest { \\n\\t\\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertEquals(\\\"5F3Z-2E9W\\\", PlateNumber.licensePlate(\\\"5F3Z-2e-9-w\\\", 4));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertEquals(\\\"2-5G-3J\\\", PlateNumber.licensePlate(\\\"2-5g-3-J\\\", 2));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertEquals(\\\"24-A0R-74K\\\", PlateNumber.licensePlate(\\\"2-4A0r7-4k\\\", 3));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertEquals(\\\"GB-BD-51-9K-FC\\\", PlateNumber.licensePlate(\\\"GB-bd519-KFC\\\", 2));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertEquals(\\\"BF-11G-F9I-781-9IT\\\", PlateNumber.licensePlate(\\\"BF-11gf9i-7819iT\\\", 3));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertEquals(\\\"FIN-MMG-418\\\", PlateNumber.licensePlate(\\\"Fin-Mmg-418\\\", 3));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertEquals(\\\"S-PXO-755\\\", PlateNumber.licensePlate(\\\"sPx-o755\\\", 3));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertEquals(\\\"DE-57-UK\\\", PlateNumber.licensePlate(\\\"de57-uk\\\", 2));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test09() { \\n\\t\\tassertEquals(\\\"D-KAPA-7778\\\", PlateNumber.licensePlate(\\\"d-kapa-7778\\\", 4));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() { \\n\\t\\tassertEquals(\\\"NL-J20-6FV\\\", PlateNumber.licensePlate(\\\"nlj-206-fv\\\", 3));\\n\\t}\\n\\n}\\n// end of tests\",\"language\":\"java\",\"quality\":0,\"summary\":\"Travelling through Europe one needs to pay attention to how the license plate in the given country is displayed. When crossing the border you need to park on the shoulder, unscrew the plate, re-group the characters according to the local regulations, attach it back and proceed with the journey.\\n\\nCreate a solution that can format the dmv number into a plate num\",\"tags\":[\"formatting\",\"strings\"],\"timestamp\":{\"$date\":1604482995042},\"title\":\"License Plate\",\"stats\":{\"completed\":{\"total\":23,\"ratings\":[3,3,3,3,3,3,3,3,5,2,2,3,4,2,2,2,3,1,3,4,2,4,0],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"Es4eX2stRpyoXeC7f\",\"TZk7ZK6ejLsTr6Bgz\",\"RQL2PAWda9Bh79GNi\",\"T8zw9Fid35zQdwz42\",\"DkSMZ3jZLkwviKb9g\",\"TWB4ZpAgG464fYZXs\",\"D7dpRtRQDmteDSAXv\",\"6fWwjSDuMGwbDDAkD\",\"qMds9ppJy2Tn9wxEp\",\"bkTWNf4MMEvWghHWH\",\"mQKWauR6b252TmdX4\",\"i29588QzAyKBuAhah\",\"htXCitorobtqYymjN\",\"KMR6vNzvSKMA2cXnK\",\"sxci7DYKNa6q22Sjq\",\"5HGyJtoZ3AffzAZAv\",\"PKaRHs2c8n5g9igsC\"]},\"flags\":0},\"editorId\":\"a777e8chPvJkY3tKa\",\"family\":[{\"_id\":\"KzMExunxfQFAyQxwq\",\"language\":\"cpp\"},{\"_id\":\"79cSPrfwMaJZ6RLDd\",\"language\":\"csharp\"},{\"_id\":\"HssePSisNvLpv72zD\",\"language\":\"java\"},{\"_id\":\"nPrhSwreEiyTKNLSR\",\"language\":\"javascript\"},{\"_id\":\"HTaZiWnsCGgehpgdr\",\"language\":\"python3\"},{\"_id\":\"eu84AAPQ3mGZBhx5q\",\"language\":\"ruby\"},{\"_id\":\"eyKjvE95thNZbFwvH\",\"language\":\"swift\"}]}}"]