a["{\"msg\":\"result\",\"id\":\"288\",\"result\":{\"_id\":\"NjJ9gGNPGaQGxTxCc\",\"author\":\"Mateusz Mędrowski\",\"authorId\":\"hPx9H3YM8j2k94DNW\",\"code\":\"public class Challenge {\\n  public static boolean PrimeNumberInRange(int n1, int n2) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":1.1711711711711712,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"3Wi4G53YsY29spEns\",\"instructions\":\"Create a function that returns `true` if there's at least one prime number in the given range (`n1` to `n2` (inclusive)), `false` otherwise.\\n\\n### Examples\\n```\\nPrimeNumberInRange(10, 15) ➞ true\\n// Prime numbers in range: 11, 13\\n\\nPrimeNumberInRange(62, 66) ➞ false\\n// No prime numbers in range.\\n\\nPrimeNumberInRange(3, 5) ➞ true\\n// Prime numbers in range: 3, 5\\n```\\n\\n### Notes\\n- `n2` is always greater than `n1`.\\n- `n1` and `n2` are always positive.\\n- 0 and 1 aren't prime numbers.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n  @Test\\n  public void test1() {\\n    assertEquals(true, Challenge.PrimeNumberInRange(10,12));\\n  }\\n\\t\\n\\t@Test\\n  public void test2() {\\n    assertEquals(false, Challenge.PrimeNumberInRange(62,66));\\n  }\\n\\t\\n\\t@Test\\n  public void test3() {\\n    assertEquals(true, Challenge.PrimeNumberInRange(441,445));\\n  }\\n\\t\\n\\t@Test\\n  public void test4() {\\n    assertEquals(true, Challenge.PrimeNumberInRange(0,2));\\n  }\\n\\t\\n\\t@Test\\n  public void test5() {\\n    assertEquals(false, Challenge.PrimeNumberInRange(20,22));\\n  }\\n\\t\\n\\t@Test\\n  public void test6() {\\n    assertEquals(true, Challenge.PrimeNumberInRange(4444,5555));\\n  }\\n\\t\\n\\t@Test\\n  public void test7() {\\n    assertEquals(false, Challenge.PrimeNumberInRange(114,120));\\n  }\\n}\",\"language\":\"java\",\"stats\":{\"completed\":{\"ratings\":[1,1,1,1,1,1,2,0,1,1,1,1,0,1,0,0,1,3,1,1,1,1,0,2,2,0,0,1,0,2,1,3,3,0,2,1,1,5,1,0,1,0,0,2,0,1,0,1,2,0,2,0,1,0,2,1,3,2,1,0,0,1,0,1,0,2,1,0,2,1,3,1,3,2,2,0,2,1,2,1,2,2,1,1,1,1,2,1,1,1,1,0,1,2,2,2,2,1,1,2,0,0,3,1,0,2,1,1,3,1,2],\"rators\":[\"ovqx6WjgmuvhNaiQR\",\"zXretnG3j3aJSsjFN\",\"AeJSxRqw2dJZuGvdk\",\"mwDdQwbZN6tXwAbBA\",\"Zygvs2nKL23fCEPAS\",\"YcjwCvYut6834Jzd8\",\"G4Dd8nXmpzrYQwpT6\",\"vRXuYYBNuHEQ29fbm\",\"hhxjQREtmHSheH9Pj\",\"jyoLggHk8xQKZuoQC\",\"j35keTRCCAaeXTEN7\",\"TrquEHytntLKHA4m2\",\"C9yBWYcZsjmJYww3K\",\"rWhXHhzF4W8bea6LP\",\"HcRS8u9J8zeyGM4wx\",\"rdht36nGB4s8JEYsN\",\"Fd9765rksgPK4E2Zy\",\"QqTP27sC79gmiQdzS\",\"FXvdHtTcFyY5AR24x\",\"35FLKaQ7LJdA7pJZG\",\"ZjEdErENicjeqKZ8g\",\"6akKZDu2YSFbdwhPj\",\"Pzj4TXu7BYKTowKZf\",\"3PjDh9FmgCe9u6RtW\",\"rRjibAmQnwufdKHbC\",\"YFHkjbM6obMSj24zi\",\"fRYcPHuyEdqngMzC4\",\"yXGiiSAR5nBHnH3yr\",\"Y5pGA4GMYMgGwxqfN\",\"tnYXC3cGqycxRzCgT\",\"a49eNnfRwSMxsDJXf\",\"itoJJQ6NNpdp4xTDb\",\"NjnPrCrnMkqYTjK2Y\",\"rvojHhKH3DaxotefQ\",\"g4NCSxxHqHCGMpWwT\",\"Yohr2MmAyaWGMbB35\",\"muXMnzQwGLzN6j2Jr\",\"etoSR23iELGGgs9rA\",\"QJEyhdk85GdszokWt\",\"kh7Tw42Li3AW5Jej4\",\"n5wubRfh6zh8QRymN\",\"EYhC88Ajntettnics\",\"xPqMCDSckCDNwZusv\",\"b4ij7gud8eWptYib8\",\"Wsoj7X4AhMwMqtYMC\",\"4H7gXq7yqMbDNAgJ3\",\"N87YWXcGYFCZg3Kfj\",\"CjkWCpS4GJfaRAXnX\",\"mPcfGW2ZP95a6k7ax\",\"pi76g3eRpnKrhee2a\",\"ygmKmjF4ja52BrNMR\",\"hwqdAeAcKgQdfxWCo\",\"9rK2eEYTWWduLHG97\",\"K8b7yBkmnmskg2Ecc\",\"Z35Ne39hEGzD5WDuS\",\"9ty3Xe2fBFtMvnyB6\",\"TCTZucJN3tJh5t7MB\",\"fADAnmvM4LibcQWTr\",\"qPZwgxJsH2rxGjEBj\",\"eJpnPe5goytzTH8KS\",\"zTEKMLMevG8xfxEj6\",\"gEecLbgRrnBsmFStq\",\"mfCkM4jCiyZZeZrni\",\"BRzerJQioJWheRd9r\",\"qTXNwXBDtH3j6t7hw\",\"ywvgseH8iGoqTccyd\",\"puCobPgduCEZMXu69\",\"jb9RLyyuo565bKDzN\",\"3gsee8akczMZGhihG\",\"LSRNQFfExZPCYf56Z\",\"ckTX8vkiMnYbriLvu\",\"uYwg3vF7jaASNo7oq\",\"ziCGZRW7MhfN2pAHT\",\"XqCezh9tkEKaKJopQ\",\"cGXpNXagsz9LCqMBS\",\"YDu9cJ4koo6nqtqAt\",\"oMZovHkR6QqNvQwyc\",\"eE2sRJZKiDNvGs2gR\",\"NxG2NCG4XdxYgaH6b\",\"bjKYBdDcGMRTfooBs\",\"YLwJkF2wuL3n9o6a2\",\"SfmXqCfDksMb883DC\",\"ZgW8KbHPhP2ziczLd\",\"a777e8chPvJkY3tKa\",\"Es4eX2stRpyoXeC7f\",\"gBGjCfJvPHswDM5JQ\",\"a5Y8ZA5qq2eupPK65\",\"ce5bSQrMmuRF9f8yi\",\"xccpBNqmFPiimbfe7\",\"J7epB3qSQJ2E8vWkY\",\"Zs2ozzZQJk6h88o3H\",\"75jDG73os3GBzuuM8\",\"MBEwq8srjd2oA5W58\",\"79wYKX3wpNhCepTMD\",\"6ehQMeGtrhnhot5zK\",\"umE8dRTGWzrZFp755\",\"QXR2qGcvrK5Xkxdea\",\"zKdb3cDytehHruckw\",\"hDeaTsprkH6CmvSAR\",\"dPeaG87LMdYeD5xLB\",\"oa8LdhuAi2t4L3rzs\",\"mbMjomA8uYtpxwNin\",\"HTHTaRGeFB6tGKRCJ\",\"E2F9MvLJvQ7TNPwHR\",\"gXTAie79kiw28tx5u\",\"k2BARimRgT876KPyy\",\"gKkukxnE8JgbKfkHu\",\"uApRWJq2c8ZPFXCjq\",\"hab8YixsXxe4CcZpP\",\"gA2cPpSeJyedSDaTT\",\"xumDNDGLDkyEdWKEB\",\"dBhRxGkXYvWBFAae2\",\"PaSg9dpK6JHre7hGF\",\"9BgWGdEEgvcST8Rs3\",\"sgugtBHiGy325ajHC\",\"dCQC9E8RfYEDBeqoo\",\"cueHAmTrcWuowXf58\",\"bEjYKwjys76i5AhSm\",\"XgBbptF2mGfG7WHYs\",\"WmHdrDgZfzSZwr2Ak\",\"9YWo3wsXnWoRiCbKe\",\"pj56bybZeAa4Xbdn4\",\"QDmwxadNbnh9K9wuE\",\"8paynGt66tAKJivFF\",\"zgEo6Cw4AapDcBrtv\",\"B4pxRqzo43M7S8FbP\",\"7gBLtxKryhTryH5zb\",\"THTnW75kBggw2qqta\",\"NdLzb3BZ5J8ftnCkS\",\"cJmmvnmJSXvBXtydi\",\"PmfzvaX5ZJscpvHXc\",\"oMfq73A434YWhSuWQ\",\"mG8HqKiAQFTdRZthG\",\"P5BhjZxyeHQYTNyB9\",\"QKwzvqWHTffHsNPu6\",\"8Xx8nWXRydHDBGfQf\",\"Ym8AjbKGSJooun3nt\",\"tyLS9T6YMfg9fMtYJ\",\"NQ4btGLfcvAnXjAyP\",\"zTM2NbjE6q5Q2HSeF\",\"BWqQ68pvNedARDcBN\",\"5TaPWyRv9DZWWodp8\",\"uNK8tLSseShR8wcA4\",\"RGN3QTb5LXj4ZPPkj\",\"HdZ55zdNW4gQ45q5R\",\"bWWFscsAr66ZWHo28\",\"47PyFbZyxWuP9Bgga\",\"rcvmayp8iSXxxEyMj\",\"5jDgvkGd4JwatrYXg\",\"rojdHfAAuAYxoaEXp\",\"ZkvBs5oddaBfKj28G\",\"LrgQT4bdiLbHrprXu\",\"2cdvd8yuPLSwvGj9w\",\"Wi4H6ayKsNDWWQCG5\",\"3SgSNoAB3sxaYeT3w\",\"nnC9vXJRzKpnYgyyX\",\"btabi3PdyisuY5tn9\",\"E2hpke7mHxAWsw5t9\",\"QRv96jmNaYsWkxQEG\",\"zZfMwLuoERGmybgib\",\"buX4mCQhtXCfBjeno\",\"a6fgDQTddtZCKfnzR\",\"xEX3TDY6C2h82dJTn\",\"c7uBxu2rgY77H5d79\",\"HXbTKW3jmmyRAsKrr\",\"rhS8qXRjZcpDXkwnE\",\"sxci7DYKNa6q22Sjq\",\"pYonfGP4u9HNL9Z32\",\"uw47663LqPME8btaA\",\"srJ34BaybkQh3qRkM\",\"Dxk4GozARkHu66BNh\",\"cR3ibTMxLyEdDFCHY\",\"jCjCvyhqhpebkJn34\",\"htXCitorobtqYymjN\",\"5LDvZHCDJqePeBrCg\",\"afvP29FhRou2bTaav\",\"PZAAB3nhJhLdqdskd\",\"z74KC2CWjp4nutyQA\",\"unqzSsxpxj9sZ7rbD\",\"J9pvE5zxYRzvEhaYh\",\"H3XLNCWB5yXt5YYXn\",\"nFbmNzMQ38TncmfQX\"],\"total\":214,\"quality\":[5,4,4,5,5,5,1,5,5,5,5,5,5,4,5,5,5,3,4,5,4,5,5,5,5,5,4,5,5,5,5,5,5,5,5,5,5,5,4,5,3,4,5,5,5,5,5,5,3,5,5,5,5,5,5,5,5,5,5,5,5,3,5,5,5,5,5,5,5,5,5,3,5,5,5,3]},\"flags\":0},\"summary\":\"Create a function that returns true if there's at least one prime number in the given range (n1 to n2 (inclusive)), false otherwise.\\n\\nExamples\\nPrimeNumberInRange(10, 15) ➞ true\\n// Prime numbers in range: 11, 13\\n\\nPrimeNumberInRange(62, 66) ➞ false\\n// No prime numbers in range.\\n\\nPrimeNumberInRange(3, 5) ➞ true\\n// Prime numbers in range: 3, 5\\n\\nNotes\\nn2 is always\",\"tags\":[\"algebra\",\"algorithms\",\"math\",\"numbers\"],\"timestamp\":{\"$date\":1598189406676},\"title\":\"Any Prime Number in Range\",\"quality\":4.684210526315789,\"family\":[{\"_id\":\"NjJ9gGNPGaQGxTxCc\",\"language\":\"java\"},{\"_id\":\"mLLqf6apACKBLF3Pe\",\"language\":\"javascript\"},{\"_id\":\"yFEMocjdiRjPhoDqv\",\"language\":\"python3\"},{\"_id\":\"HtygcuDyqKXP7sKCM\",\"language\":\"ruby\"}]}}"]