a["{\"msg\":\"result\",\"id\":\"847\",\"result\":{\"_id\":\"imM3Hz44BLEPCKoFe\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class CompressedChars {\\n  public static String compress(String[] c) {\\n \\t\\t// recursive code here\\n\\t}\\n}\",\"difficulty\":4.666666666666667,\"familyId\":\"GQHf8riMgyddYiXJi\",\"instructions\":\"The function is given an array of characters. **Recursively compress** the array into a string using the following rules. For each group of consecutively repeating characters:\\n- If the number of repeating characters is one, append the string with only this character.\\n- If the number `n` of repeating characters `x` is greater than one, append the string with `\\\"x\\\" + n`.\\n\\n### Examples\\n```\\ncompress([\\\"t\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"s\\\", \\\"s\\\", \\\"s\\\", \\\"h\\\"]) ➞ \\\"te14s3h\\\"\\n\\ncompress([\\\"a\\\", \\\"a\\\", \\\"b\\\", \\\"b\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\"]) ➞ \\\"a2b2c3\\\"\\n\\ncompress([\\\"a\\\"]) ➞ \\\"a\\\"\\n\\ncompress([\\\"a\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\"]) ➞ \\\"ab12\\\"\\n\\ncompress([\\\"a\\\", \\\"a\\\", \\\"a\\\", \\\"b\\\", \\\"b\\\", \\\"a\\\", \\\"a\\\"]) ➞ \\\"a3b2a2\\\"\\n```\\n\\n### Notes\\n- You are expected to solve this challenge using the concept of **recursion**.\\n- Check out the **Resources** tab for details about recursion in Java.\\n- An **iterative** version of this challenge can be found via this [link](https://edabit.com/challenge/CsTELuWcqFAQYhwpY).\\n- A **collection** of challenges of this nature can be found via this [link](https://edabit.com/collection/Yx78jEBrKppHBNsoQ).\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"import static org.junit.Assert.assertEquals; \\nimport org.junit.Test; \\n\\npublic class CompressedCharsTest {\\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertEquals(\\\"a2b2c3\\\", CompressedChars.compress(new String[] {\\\"a\\\", \\\"a\\\", \\\"b\\\", \\\"b\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertEquals(\\\"a\\\", CompressedChars.compress(new String[] {\\\"a\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertEquals(\\\"ab12\\\", CompressedChars.compress(new String[] {\\\"a\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertEquals(\\\"a3b2a2\\\", CompressedChars.compress(new String[] {\\\"a\\\", \\\"a\\\", \\\"a\\\", \\\"b\\\", \\\"b\\\", \\\"a\\\", \\\"a\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertEquals(\\\"te14s3h\\\", CompressedChars.compress(new String[] {\\\"t\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"s\\\", \\\"s\\\", \\\"s\\\", \\\"h\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertEquals(\\\"a43\\\", CompressedChars.compress(new String[] {\\\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertEquals(\\\"a43b5\\\", CompressedChars.compress(new String[] {\\\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\", \\\"bbbbb\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertEquals(\\\"a43b5c38\\\", CompressedChars.compress(new String[] {\\\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\", \\\"bbbbb\\\", \\\"cccccccccccccccccccccccccccccccccccccc\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test09() { \\n\\t\\tassertEquals(\\\"a43b5c38d20\\\", CompressedChars.compress(new String[] {\\\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\", \\\"bbbbb\\\", \\\"cccccccccccccccccccccccccccccccccccccc\\\", \\\"dddddddddddddddddddd\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() { \\n\\t\\tassertEquals(\\\"a43b5c38d20e10\\\", CompressedChars.compress(new String[] {\\\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\", \\\"bbbbb\\\", \\\"cccccccccccccccccccccccccccccccccccccc\\\", \\\"dddddddddddddddddddd\\\", \\\"eeeeeeeeee\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test11() { \\n\\t\\tassertEquals(\\\"a43b5c38d20e10f18\\\", CompressedChars.compress(new String[] {\\\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\", \\\"bbbbb\\\", \\\"cccccccccccccccccccccccccccccccccccccc\\\", \\\"dddddddddddddddddddd\\\", \\\"eeeeeeeeee\\\", \\\"ffffffffffffffffff\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test12() { \\n\\t\\tassertEquals(\\\"a36\\\", CompressedChars.compress(new String[] {\\\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test13() { \\n\\t\\tassertEquals(\\\"a36b31\\\", CompressedChars.compress(new String[] {\\\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\", \\\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test14() { \\n\\t\\tassertEquals(\\\"a36b31c13\\\", CompressedChars.compress(new String[] {\\\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\", \\\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\\\", \\\"ccccccccccccc\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test15() { \\n\\t\\tassertEquals(\\\"a36b31c13d27\\\", CompressedChars.compress(new String[] {\\\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\", \\\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\\\", \\\"ccccccccccccc\\\", \\\"ddddddddddddddddddddddddddd\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test16() { \\n\\t\\tassertEquals(\\\"a36b31c13d27e7\\\", CompressedChars.compress(new String[] {\\\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\", \\\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\\\", \\\"ccccccccccccc\\\", \\\"ddddddddddddddddddddddddddd\\\", \\\"eeeeeee\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test17() { \\n\\t\\tassertEquals(\\\"a36b31c13d27e7f15\\\", CompressedChars.compress(new String[] {\\\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\", \\\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\\\", \\\"ccccccccccccc\\\", \\\"ddddddddddddddddddddddddddd\\\", \\\"eeeeeee\\\", \\\"fffffffffffffff\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test18() { \\n\\t\\tassertEquals(\\\"a36b31c13d27e7f15g40\\\", CompressedChars.compress(new String[] {\\\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\", \\\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\\\", \\\"ccccccccccccc\\\", \\\"ddddddddddddddddddddddddddd\\\", \\\"eeeeeee\\\", \\\"fffffffffffffff\\\", \\\"gggggggggggggggggggggggggggggggggggggggg\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test19() { \\n\\t\\tassertEquals(\\\"a36b31c13d27e7f15g40h47\\\", CompressedChars.compress(new String[] {\\\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\", \\\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\\\", \\\"ccccccccccccc\\\", \\\"ddddddddddddddddddddddddddd\\\", \\\"eeeeeee\\\", \\\"fffffffffffffff\\\", \\\"gggggggggggggggggggggggggggggggggggggggg\\\", \\\"hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test20() { \\n\\t\\tassertEquals(\\\"a42\\\", CompressedChars.compress(new String[] {\\\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test21() { \\n\\t\\tassertEquals(\\\"a42b43\\\", CompressedChars.compress(new String[] {\\\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\", \\\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test22() { \\n\\t\\tassertEquals(\\\"a42b43c38\\\", CompressedChars.compress(new String[] {\\\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\", \\\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\\\", \\\"cccccccccccccccccccccccccccccccccccccc\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test23() { \\n\\t\\tassertEquals(\\\"a23\\\", CompressedChars.compress(new String[] {\\\"aaaaaaaaaaaaaaaaaaaaaaa\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test24() { \\n\\t\\tassertEquals(\\\"a23b21\\\", CompressedChars.compress(new String[] {\\\"aaaaaaaaaaaaaaaaaaaaaaa\\\", \\\"bbbbbbbbbbbbbbbbbbbbb\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test25() { \\n\\t\\tassertEquals(\\\"a23b21c38\\\", CompressedChars.compress(new String[] {\\\"aaaaaaaaaaaaaaaaaaaaaaa\\\", \\\"bbbbbbbbbbbbbbbbbbbbb\\\", \\\"cccccccccccccccccccccccccccccccccccccc\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test26() { \\n\\t\\tassertEquals(\\\"a23b21c38d36\\\", CompressedChars.compress(new String[] {\\\"aaaaaaaaaaaaaaaaaaaaaaa\\\", \\\"bbbbbbbbbbbbbbbbbbbbb\\\", \\\"cccccccccccccccccccccccccccccccccccccc\\\", \\\"dddddddddddddddddddddddddddddddddddd\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test27() { \\n\\t\\tassertEquals(\\\"a23b21c38d36e30\\\", CompressedChars.compress(new String[] {\\\"aaaaaaaaaaaaaaaaaaaaaaa\\\", \\\"bbbbbbbbbbbbbbbbbbbbb\\\", \\\"cccccccccccccccccccccccccccccccccccccc\\\", \\\"dddddddddddddddddddddddddddddddddddd\\\", \\\"eeeeeeeeeeeeeeeeeeeeeeeeeeeeee\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test28() { \\n\\t\\tassertEquals(\\\"a23b21c38d36e30f21\\\", CompressedChars.compress(new String[] {\\\"aaaaaaaaaaaaaaaaaaaaaaa\\\", \\\"bbbbbbbbbbbbbbbbbbbbb\\\", \\\"cccccccccccccccccccccccccccccccccccccc\\\", \\\"dddddddddddddddddddddddddddddddddddd\\\", \\\"eeeeeeeeeeeeeeeeeeeeeeeeeeeeee\\\", \\\"fffffffffffffffffffff\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test29() { \\n\\t\\tassertEquals(\\\"a7\\\", CompressedChars.compress(new String[] {\\\"aaaaaaa\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test30() { \\n\\t\\tassertEquals(\\\"a7b30\\\", CompressedChars.compress(new String[] {\\\"aaaaaaa\\\", \\\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test31() { \\n\\t\\tassertEquals(\\\"a7b30c10\\\", CompressedChars.compress(new String[] {\\\"aaaaaaa\\\", \\\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\\\", \\\"cccccccccc\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test32() { \\n\\t\\tassertEquals(\\\"a7b30c10d7\\\", CompressedChars.compress(new String[] {\\\"aaaaaaa\\\", \\\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\\\", \\\"cccccccccc\\\", \\\"ddddddd\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test33() { \\n\\t\\tassertEquals(\\\"a7b30c10d7e9\\\", CompressedChars.compress(new String[] {\\\"aaaaaaa\\\", \\\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\\\", \\\"cccccccccc\\\", \\\"ddddddd\\\", \\\"eeeeeeeee\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test34() { \\n\\t\\tassertEquals(\\\"a38\\\", CompressedChars.compress(new String[] {\\\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test35() { \\n\\t\\tassertEquals(\\\"a38b12\\\", CompressedChars.compress(new String[] {\\\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\", \\\"bbbbbbbbbbbb\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test36() { \\n\\t\\tassertEquals(\\\"a38b12c20\\\", CompressedChars.compress(new String[] {\\\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\", \\\"bbbbbbbbbbbb\\\", \\\"cccccccccccccccccccc\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test37() { \\n\\t\\tassertEquals(\\\"a38b12c20d38\\\", CompressedChars.compress(new String[] {\\\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\", \\\"bbbbbbbbbbbb\\\", \\\"cccccccccccccccccccc\\\", \\\"dddddddddddddddddddddddddddddddddddddd\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test38() { \\n\\t\\tassertEquals(\\\"a24\\\", CompressedChars.compress(new String[] {\\\"aaaaaaaaaaaaaaaaaaaaaaaa\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test39() { \\n\\t\\tassertEquals(\\\"a24b47\\\", CompressedChars.compress(new String[] {\\\"aaaaaaaaaaaaaaaaaaaaaaaa\\\", \\\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test40() { \\n\\t\\tassertEquals(\\\"a24b47c7\\\", CompressedChars.compress(new String[] {\\\"aaaaaaaaaaaaaaaaaaaaaaaa\\\", \\\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\\\", \\\"ccccccc\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test41() { \\n\\t\\tassertEquals(\\\"a5\\\", CompressedChars.compress(new String[] {\\\"aaaaa\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test42() { \\n\\t\\tassertEquals(\\\"a5b6\\\", CompressedChars.compress(new String[] {\\\"aaaaa\\\", \\\"bbbbbb\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test43() { \\n\\t\\tassertEquals(\\\"a5b6c30\\\", CompressedChars.compress(new String[] {\\\"aaaaa\\\", \\\"bbbbbb\\\", \\\"cccccccccccccccccccccccccccccc\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test44() { \\n\\t\\tassertEquals(\\\"a5b6c30d2\\\", CompressedChars.compress(new String[] {\\\"aaaaa\\\", \\\"bbbbbb\\\", \\\"cccccccccccccccccccccccccccccc\\\", \\\"dd\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test45() { \\n\\t\\tassertEquals(\\\"a5b6c30d2e2\\\", CompressedChars.compress(new String[] {\\\"aaaaa\\\", \\\"bbbbbb\\\", \\\"cccccccccccccccccccccccccccccc\\\", \\\"dd\\\", \\\"ee\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test46() { \\n\\t\\tassertEquals(\\\"a5b6c30d2e2f47\\\", CompressedChars.compress(new String[] {\\\"aaaaa\\\", \\\"bbbbbb\\\", \\\"cccccccccccccccccccccccccccccc\\\", \\\"dd\\\", \\\"ee\\\", \\\"fffffffffffffffffffffffffffffffffffffffffffffff\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test47() { \\n\\t\\tassertEquals(\\\"a20\\\", CompressedChars.compress(new String[] {\\\"aaaaaaaaaaaaaaaaaaaa\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test48() { \\n\\t\\tassertEquals(\\\"a20b17\\\", CompressedChars.compress(new String[] {\\\"aaaaaaaaaaaaaaaaaaaa\\\", \\\"bbbbbbbbbbbbbbbbb\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test49() { \\n\\t\\tassertEquals(\\\"a20b17c15\\\", CompressedChars.compress(new String[] {\\\"aaaaaaaaaaaaaaaaaaaa\\\", \\\"bbbbbbbbbbbbbbbbb\\\", \\\"ccccccccccccccc\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test50() { \\n\\t\\tassertEquals(\\\"a20b17c15d15\\\", CompressedChars.compress(new String[] {\\\"aaaaaaaaaaaaaaaaaaaa\\\", \\\"bbbbbbbbbbbbbbbbb\\\", \\\"ccccccccccccccc\\\", \\\"ddddddddddddddd\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test51() { \\n\\t\\tassertEquals(\\\"a20b17c15d15e24\\\", CompressedChars.compress(new String[] {\\\"aaaaaaaaaaaaaaaaaaaa\\\", \\\"bbbbbbbbbbbbbbbbb\\\", \\\"ccccccccccccccc\\\", \\\"ddddddddddddddd\\\", \\\"eeeeeeeeeeeeeeeeeeeeeeee\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test52() { \\n\\t\\tassertEquals(\\\"a20b17c15d15e24f35\\\", CompressedChars.compress(new String[] {\\\"aaaaaaaaaaaaaaaaaaaa\\\", \\\"bbbbbbbbbbbbbbbbb\\\", \\\"ccccccccccccccc\\\", \\\"ddddddddddddddd\\\", \\\"eeeeeeeeeeeeeeeeeeeeeeee\\\", \\\"fffffffffffffffffffffffffffffffffff\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test53() { \\n\\t\\tassertEquals(\\\"a37\\\", CompressedChars.compress(new String[] {\\\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test54() { \\n\\t\\tassertEquals(\\\"a37b47\\\", CompressedChars.compress(new String[] {\\\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\", \\\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\\\"}));\\n\\t}\\n}\",\"language\":\"java\",\"quality\":0,\"summary\":\"The function is given an array of characters. Recursively compress the array into a string using the following rules. For each group of consecutively repeating characters:\\nIf the number of repeating characters is one, append the string with only this character.\\nIf the number n of repeating characters x is greater than one, append the string with \\\"x\\\" + n.\\n\\nExam\",\"tags\":[\"recursion\",\"strings\",\"arrays\"],\"timestamp\":{\"$date\":1610283719737},\"title\":\"Recursion: String Compression from Character Array\",\"stats\":{\"completed\":{\"total\":7,\"ratings\":[5,5,5,5,5,5,2,5,5],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"gXTAie79kiw28tx5u\",\"nHj7SC5cnmkTApbgY\",\"KMR6vNzvSKMA2cXnK\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"imM3Hz44BLEPCKoFe\",\"language\":\"java\"},{\"_id\":\"hNCyj6c5B6FmG3KGE\",\"language\":\"javascript\"},{\"_id\":\"ARRBHsfXtnydhwtgt\",\"language\":\"python3\"}]}}"]