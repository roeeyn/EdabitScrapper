a["{\"msg\":\"result\",\"id\":\"310\",\"result\":{\"_id\":\"A2M6aC7BR2P4Qj2Kr\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class Carriage {\\n\\tpublic static int findSeat(int n, int[] arr) {\\n\\t\\t\\n\\t}\\n}\\t\\t\",\"difficulty\":1.46045197740113,\"familyId\":\"hkKz8z5LC5KkAQbtj\",\"instructions\":\"A train has a maximum capacity of `n` passengers overall, which means each carriage's capacity will share an equal proportion of the maximum capacity.\\n\\nCreate a function which returns the **index** of the first carriage which holds **50% or less** of its maximum capacity. If no such carriage exists, return `-1`.\\n\\n### Worked Examples\\n```\\nfindSeat(200, [35, 23, 18, 10, 40]) ➞ 2\\n// There are 5 carriages which each have a maximum capacity of 40 (200 / 5 = 40).\\n// Index 0's carriage is too full (35 is 87.5% of the maximum).\\n// Index 1's carriage is too full (23 is 57.5% of the maximum).\\n// Index 2's carriage is good enough (18 is 45% of the maximum).\\n// Return 2.\\n```\\n\\n### Examples\\n```\\nfindSeat(20, [3, 5, 4, 2]) ➞ 3\\n\\nfindSeat(1000, [50, 20, 80, 90, 100, 60, 30, 50, 80, 60]) ➞ 0\\n\\nfindSeat(200, [35, 23, 40, 21, 38]) ➞ -1\\n```\\n\\n### Notes\\n* If a train can hold **200** passengers, and has **5** carriages, then that means that each carriage can hold a maximum of  **40** passengers each.\\n* All carriage numbers will be positive integers, which will be able to divide evenly.\\n* Remember to return `-1` if no carriage is empty enough.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"import static org.junit.Assert.assertEquals; \\nimport org.junit.Test; \\n\\npublic class CarriageTest {\\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertEquals(1, Carriage.findSeat(21, new int[] {6, 3, 7}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertEquals(4, Carriage.findSeat(544, new int[] {26, 27, 25, 30, 12, 17, 22, 32, 19, 21, 18, 16, 15, 29, 28, 31, 20}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertEquals(3, Carriage.findSeat(20, new int[] {3, 5, 4, 2}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertEquals(5, Carriage.findSeat(1000, new int[] {60, 70, 80, 90, 100, 20, 30, 50, 80, 60}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertEquals(4, Carriage.findSeat(1000, new int[] {70, 60, 80, 90, 10, 60, 30, 50, 80, 60}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertEquals(2, Carriage.findSeat(200, new int[] {35, 23, 18, 10, 40}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertEquals(0, Carriage.findSeat(11037, new int[] {1839, 0, 0}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertEquals(-1, Carriage.findSeat(200, new int[] {35, 23, 40, 21, 38}));\\n\\t}\\n}\\n// credit goes to the original author/publisher @Joshua Señoron\",\"language\":\"java\",\"quality\":4.576923076923077,\"summary\":\"A train has a maximum capacity of n passengers overall, which means each carriage's capacity will share an equal proportion of the maximum capacity.\\n\\nCreate a function which returns the index of the first carriage which holds 50% or less of its maximum capacity. If no such carriage exists, return -1.\\n\\nWorked Examples\\nfindSeat(200, [35, 23, 18, 10, 40]) ➞ 2\\n//\",\"tags\":[\"loops\",\"numbers\",\"interview\"],\"timestamp\":{\"$date\":1612769714665},\"title\":\"Crowded Carriage Capacity\",\"stats\":{\"completed\":{\"total\":427,\"ratings\":[2,2,2,2,2,1,2,2,1,0,0,2,1,1,0,2,1,0,1,1,2,1,1,2,0,2,2,1,1,2,2,0,1,2,3,1,2,1,1,1,2,2,1,1,2,2,0,2,1,2,0,2,0,0,2,2,5,2,2,2,1,2,2,2,2,2,1,1,1,2,1,2,1,0,2,1,0,3,1,2,2,1,2,2,2,1,2,2,2,1,1,2,1,1,4,1,1,1,2,1,2,1,0,1,1,1,1,2,1,2,2,2,2,1,0,0,2,1,1,1,2,2,2,2,2,1,3,2,2,2,0,2,2,2,1,2,0,1,1,1,1,1,2,2,0,1,1,1,1,2,1,3,3,1,1,0,1,2,2,1,1,1,2,2,1,1,0,2,0,1,2,2,1,2,1,1,2,2,1,0,1,2,2,2,1,2,0,2,2,2,2,2,1,0,2,0,1,1,1,1,2,2,2,2,1,2,1,2,2,3,0,2,2,2,0,2,1,1,2,1,2,1,2,2,1,1,1,2,1,2,2,1,2,1,2,2,2,2,2,3,2,2,1,1,2,0,0,0,2,3,2,2,0,0,2,2,2,1,2,2,1,1,0,1,1,3,2,1,1,2,2,0,2,1,1,2,1,1,2,2,3,2,5,0,3,2,0,1,1,0,2,1,3,1,1,1,1,2,2,0,2,1,3,0,1,2,1,1,1,3,0,0,1,2,2,1,1,1,1,1,1,0,5,2,2,2,1,5,2,0,2,1,2,2,3,3,2,0,2,0,1,2,3,1,2,3,2,2,2,2,0,0,1,1],\"quality\":[5,5,5,5,4,5,5,3,5,5,5,5,5,5,5,5,5,5,5,5,4,4,5,5,1,5,5,1,5,5,5,5,3,3,5,4,5,5,5,5,5,4,5,5,4,4,5,5,5,5,4,5],\"rators\":[\"a777e8chPvJkY3tKa\",\"Es4eX2stRpyoXeC7f\",\"gXTAie79kiw28tx5u\",\"GPmrtj9PewFajDtfb\",\"gJbvbqosimaP4ZAYb\",\"fCTfZSgeDbRbTvDY4\",\"MDpoPq373YipvFuFt\",\"a49eNnfRwSMxsDJXf\",\"RGN3QTb5LXj4ZPPkj\",\"gBGjCfJvPHswDM5JQ\",\"p8qqFdJ3FSk5x9z3G\",\"Cu42pFbnmM8pBfzSy\",\"AeJSxRqw2dJZuGvdk\",\"Po3v3dHCk6wYGKMwi\",\"pon2cYh2Hbbfj6559\",\"NECixW9x5MtHjK2B6\",\"sDpR9dr2iNXP3PJ3z\",\"p2woPCQKXuWJCwffJ\",\"sLbz8RpJrbNZEwfnz\",\"KkHPvDBfXvsTe8bE4\",\"sR3NFwdhzyb5ueqnk\",\"Wfp9xoXgX4LhtXirN\",\"QSZZZKPdCcT2sYvek\",\"PyB7G6Fxbv8o2unHS\",\"twW8P5GtEjgyWTm3P\",\"5s22ttwy7uH5cTyZp\",\"z6KN9CFWcS7qjAxwv\",\"qq24NyP6znsCxHxyg\",\"XdzcqGdrfNs8ZSRo5\",\"r2Cr74L2qNRW8oXJB\",\"eQXwk5zGckM8tCWYH\",\"79JPDiquvpzdc8it8\",\"xJ98czs2h6BdGnbhH\",\"HDA4Dor7DhHsH2KMJ\",\"SMpajHAFTh6C4Gidb\",\"fK7GFDTBnZHgN33sf\",\"PFZ9e3Hqs9YkyFZHd\",\"SKHn7wgr8k4FCtZLi\",\"Z5vLrDByr6MJzHZFh\",\"MG7Xf33dCze8ZA9LR\",\"Hmm3rbADK2G34p574\",\"hs6JNBfYGBqYM2u6H\",\"fF4i6npzpw2nEcEDN\",\"G4xbBCoq5TRoN27aM\",\"nRawx2mK5SJkaeKES\",\"uFfEio8nzDvL8emhp\",\"E2nAwyubcNWBcPZJP\",\"KsjvyGz7KggTMD6By\",\"8PMyx5vsQrkmM3CrY\",\"PaCgP7JzHmm4juPxF\",\"LPt8WWo9vGouKvZzb\",\"ZQdMs98WAGtdRNYSP\",\"qTQGbqpJsx3SRcHZq\",\"3hNkSdy3gSuExARJ3\",\"GkYtSbQuheBF4Enys\",\"c9NTW6YDFmWhRNfvC\",\"2ao77kx3eRDTh5Nvk\",\"yM49HwBqgXwp6Nai9\",\"chkPLjNHvrBZSDBCh\",\"7PfjawrcX3SKL7PXs\",\"cfPPHxyECTCKhDsu2\",\"QSE3SZ9p28ttgmL7F\",\"YfKm8KszFNvdYA8WC\",\"4pagg6vw2Cjepv7tN\",\"dcW9oK2uRo8h8mBe2\",\"3fFQ4XkdL2WywELg9\",\"zCpNwiyNAp5yATMj4\",\"KwcjmyzmmxAjoPbdK\",\"qMLcj34kutmNNy9Zs\",\"ZMd8it647JSYTvx8Z\",\"A7Z9ohZj74WNoXsdW\",\"2tadaMF3dCdqpj4xF\",\"bbDT6HiQL3FZdp9zs\",\"yuiYKH56tSxzihbsA\",\"4CwytSwJXZbJxvRyt\",\"mtMBckCxzcuMjTSWq\",\"J54TdyFTEkJ2AJrbT\",\"SDNgGz5BdQHsE9z3R\",\"qDScF8d4xzhdZbzTD\",\"pBhZzaEYwMfKXhkbo\",\"YuTmWchYrh725Cfbs\",\"cNn2W7QiMrWo2QS93\",\"M4vrf3qvMGJyK3EiQ\",\"LwhcShDARtXgW2uQY\",\"brPpoah8BLi2jGpQY\",\"yrfHFectawR3WoBj6\",\"WTLPoP6k8HGBYqwjp\",\"da6b2tZrEMv9wEXbW\",\"Pu3sYXcqn9hzNbdw3\",\"9vyjn4WyWtJ6o2wop\",\"B857XNDN6GDcQhYXL\",\"DrkR35NqnP9NDLbq6\",\"QraMmThAuXYSZzR8N\",\"bur3yQ8s34zqKGEro\",\"LF8Tnih5A77AeADwP\",\"Ck2Wr4SbmQ9hi35aa\",\"mG8HqKiAQFTdRZthG\",\"wB47dmNBe3aFZZcFr\",\"hhxjQREtmHSheH9Pj\",\"QgTrsM9NFwvrKtxfb\",\"82weQfHHmno4Mq4X7\",\"K6qNjfgzHWyZjLT3S\",\"C9XxbgXaoquHBTbiP\",\"4ySzqKC5s3ZRpG9di\",\"Gkt24LnG4KBrd2AfK\",\"zZfMwLuoERGmybgib\",\"buX4mCQhtXCfBjeno\",\"saf3nERNrf7iQJi95\",\"drAAhaSiMncZ2XcAk\",\"8qNSPHZBpmjSTt3tH\",\"jyoLggHk8xQKZuoQC\",\"nHj7SC5cnmkTApbgY\",\"YLwJkF2wuL3n9o6a2\",\"DkSMZ3jZLkwviKb9g\",\"bfAZWWJ7cp7nNhDJ6\",\"kmuz7z8uXFRGPPYFf\",\"6rvJwN4mcX7iYGjY7\",\"Ag5fRrZ9MrAZc9vpj\",\"MpQpPx3t6W63gQNAd\",\"dik7wis3hBJJBkYwK\",\"yzjArQHxGrCEJDxoi\",\"tdxi2QkC26vf5P3vG\",\"p6fkM3tu4g4mLe9PT\",\"uRTnsbnSDC9a7KdbH\",\"XnknQEvn4TP5qsWtF\",\"PBcww47LZ363DdRut\",\"YCfPFFF2YYFRQo6ra\",\"DMqXPdEp5nyXRKd4A\",\"waLKQRf5mx5rZNxns\",\"LT24D8s552BJseSbA\",\"PJ7Dx5BRQucM6W5a8\",\"wo4zLTAeZcmaJzH2Y\",\"3SgSNoAB3sxaYeT3w\",\"P9iAdQpAKG8JKEaGp\",\"92xSMwCG9yY4DhsZg\",\"HsFc9PgmpP2X9Fwh9\",\"EBTHjFAoBhJxb9FcP\",\"uovAyGzfHYLQks7Eh\",\"qx6yvahdH8aw4Jnm7\",\"k4XEuZa56hJCP6EKz\",\"SgPjF69J25jT3dn4X\",\"frASmnfwZAfLhEfTR\",\"ixz7MziKkEAfR5GhJ\",\"iDkoWH4EexMcPnWrs\",\"sxci7DYKNa6q22Sjq\",\"HXbTKW3jmmyRAsKrr\",\"mfm3gB39arY8Rjb2y\",\"wXhexS9kbNouykipc\",\"rhS8qXRjZcpDXkwnE\",\"xEX3TDY6C2h82dJTn\",\"uw47663LqPME8btaA\",\"i7rfeX5GyYifByYfm\",\"wY23YQtK2T3T4N47P\",\"n67y5EBwoGmBvbw9M\",\"eY8Y7Dc7AZbRKdtTP\",\"RMcc54ZiDkEZ4TTvR\",\"zTtKiCbLWzaf2Yjo4\",\"o2DvRBDJDEuKg5q6F\",\"YmruDFwMZtcDohXHR\",\"yaZ7HC2tKbtCwqzNv\",\"ZAWGgsRMG9jjMaENh\",\"KnjLZKZxhWwdbfPEK\",\"7WxTuY5BSgZdA5ppD\",\"ABwihL7vmP3tSDgKb\",\"srJ34BaybkQh3qRkM\",\"Wgp94thinHgqS9nBy\",\"KKvyCXk9tMxooo77Q\",\"YCTrQ9PuZmg4S8tsf\",\"BaGf3eTPotFgkikW4\",\"LXAoXJtyqW5mjnADj\",\"XmWJPAXHZLbvsk9r3\",\"qkzvMGGHMD3xvmEAH\",\"29WEfSxna2eLaY6v5\",\"AeSmk2XWGcTLHB7PJ\",\"Fd97hWyRrzbKLuToo\",\"BAoCaTq6fZqg77G46\",\"c4aLTCDHTvXhYh9Xp\",\"gj87yXyoJxhoQLetq\",\"wTc283wowqsFisKNC\",\"BNLtKcvap6ms9yTSp\",\"QfGmQTXSS2njqbayy\",\"riBP9MdCu59kPfeJ6\",\"bbvZkWeppac35K3cY\",\"krYSuqhMwWZD6HPBa\",\"ARsbWxnYLRs4xD7xs\",\"DZvz6WY5bQEneYzvv\",\"4vL6ZckZQGPwZHDLL\",\"oNkSFeDPhG9SnspiK\",\"J6bvitKmoYMoqWJex\",\"THoTJTpHE2D4TGWAJ\",\"vPQ6fdfep2jBRhSKS\",\"a7NwjdLTMgHZS72fA\",\"GSav3epx8hsTopjsy\",\"RXCK6LiuBNDvkhLFR\",\"WNCoP4WaZqcMQfjHt\",\"iBxaEbZH8N9Jw8Giy\",\"cjGxs2rDhS3tyhh5L\",\"nuJEgZ7vNFDrgb9HX\",\"kg6Xpip6E4xNwskx5\",\"LMvYBfB9njmZzyZyM\",\"J9zJq7PMGb6mqzcHW\",\"nTrWAav8aziQmqkuS\",\"btigoA2nx8vNAG2Fz\",\"jCjCvyhqhpebkJn34\",\"GFeav8mBfjzweBnaZ\",\"7cu5Y6L5mkgKkkPpH\",\"6W5Ff46e5LYMZs48M\",\"2LbwiFt4FaNP4XigS\",\"vvngK3Z7SDiEzwC6u\",\"Gt2rpDwTdj9jfXNQ4\",\"xdMtQbhqQ8EBa53jg\",\"8tQomEET4qSWPgWkF\",\"htXCitorobtqYymjN\",\"cR3ibTMxLyEdDFCHY\",\"eBsecQjYCRnq2rNNm\",\"4za87fFyw9qxkD936\",\"yi7mzQDGbiwh7JDfY\",\"8b7kswLypEnXrswkw\",\"PCAcZdg2HmDcGyeXb\",\"LWXahJoA4dcbHAFFF\",\"qdKMTPNkRgdjTr4zf\",\"DQPk5eW93bbf4uEEW\",\"pubaKyw9PTJvtHnJC\",\"Ke6Q7zjiyZtSjzrXF\",\"TYmbLWJ4qAWfGDtQb\",\"mSLbC9iA9HQoeuZQa\",\"GHHfzSxkoAwbf7waW\",\"z9x9ya3LeehqhoGA3\",\"J9RJf8bBmB7MpzF3m\",\"6Fz62jqSTF9dnHns7\",\"oj5SGmhdEfa3eruot\",\"N5GXsdSxk2yBFahiK\",\"drzjcxGuffxLhthgo\",\"HGMBWNunPBbRybGQj\",\"WNAstuoBy6yyd2YLp\",\"7bi35WnrMRXZbgpL9\",\"NXX6FpasXFSabcvA3\",\"z4rKyfxz6iNA7hmqD\",\"fqonCdsknnffQm5Zt\",\"QwkJidQW7vvEY6TLp\",\"en63XHhPn27TnRfEB\",\"gJFAZq64GANReLy7p\",\"TAYCEE8zNN9aBTR7F\",\"raXkEgsnaoPYSidtX\",\"wFRLGjA56kj7xyhmv\",\"89aYYDJA5tEqvBd2w\",\"GMGjG8ZcRLfgBnufZ\",\"NaSkPbdNx6WNd5a5H\",\"NzachEhFbHfoBqmzS\",\"h2SBrR4pTkki94kC2\",\"vbcaZ7T63m5t7JsgA\",\"RsujLHaML6L3KinzK\",\"E6r2kaBT45TfvfN7y\",\"ziHCSWAQMeyMXQ82C\",\"Qv2jEtTnFCXX7cdd3\",\"rQE6stC7wBS6KRdKF\",\"3ES4qyewSQiFz8Wm7\",\"J7epB3qSQJ2E8vWkY\",\"5sutbuHS8hZsP6vFL\",\"wv6C9LxraYgqkAs2Z\",\"5b3rz7nFjQ7rwtqkQ\",\"B4pxRqzo43M7S8FbP\",\"kZHFd3GBs6rFkXjLe\",\"5yFfPyeyvXC78qv4f\",\"EminuXosFaHQhYKyK\",\"6M87FzJD7uGS54EJG\",\"ZjKrn5xeE33znMr4S\",\"ociS5FqneHvsDvgNu\",\"KantmrimRrDJz2YCT\",\"6wSDRXXLqLh6KYSy6\",\"PPdaczxSt2u5cmZYG\",\"6waJRR7JPunYF8DhS\",\"XkNS8KEhsJGBALGLW\",\"wJ2YBhso4Rmbp2rYh\",\"vSQfYja9HWjDw5DFK\",\"yr822PZmmiDDenxpB\",\"335vfhEhjduPYp8fs\",\"8cAZAyXEKr2CRZHir\",\"KfT8BNBLxDGusTzAq\",\"rWhXHhzF4W8bea6LP\",\"aswAjfzzoqEnnsXvT\",\"2NJZbusRvu3eJ4tHu\",\"b9Tkkzxek5jj7eytm\",\"XMRLNmqHFJ45d5qS5\",\"7D6LAX2sg2NMt7ZcY\",\"KMR6vNzvSKMA2cXnK\",\"6SW5H5q5dozh89vkt\",\"2mTYrwqEabB4NHPCY\",\"bDA8NeME5tCyyoodM\",\"bgMGmeRH2MdkxxkzH\",\"yGDSvLJXXz5ZmaS4h\",\"u9EpWxd359iTtXcap\",\"xW9nC9h6p77YT2iso\",\"gtuPxwvFpk4SEfvhd\",\"eXk5XguXy8FgBAPA3\",\"P6xLukN8KP4ocCLvJ\",\"M9P2Ypoz7C5chALrb\",\"CvbybkE5X8AMxG4iX\",\"m2Z5uhq8sHW8M8HaP\",\"2vDHk3uyjHEmXWqkb\",\"xhqEfXmysQwDdrg35\",\"4ksmdioSzhEvJjupQ\",\"W6QfsXTCGcBwX6BQX\",\"CHuC8mjQLn2KJxZSz\",\"4hP6JDXcHtW3ErE9H\",\"nDDNHWdGDaR83aysS\",\"RX8ERkj9BpbR4LQgQ\",\"FNYPC36yqPmTKDaqR\",\"2nyYiDATKWBPqvM4P\",\"iouaEW7FWoQhzHMy4\",\"ox2iqixsSq7ftcGrb\",\"3wWxhjeXQPXzZiYK9\",\"Q5YLF4nL6kW658EWc\",\"z74KC2CWjp4nutyQA\",\"YeJAuXztdrCmv8EB3\",\"SE5G2Caf3btnuGmz6\",\"96BmXt8QzY9aisuSi\",\"KrCpp2CyTCWFAGmnY\",\"FrAktFEk9WM7xwqFQ\",\"Qfyv8QAcCkbKjzXff\",\"M9Lgqi77n5NXykk4G\",\"DZ5NkXnaLtneSqrzX\",\"qavdBEFYeCuSHQrN5\",\"WLGAn96Jd48MyiqT3\",\"8mC8QdDeXvPSS7cEW\",\"563onSvqgjToY79ah\",\"D5iRjnwQXaMPQhQ5x\",\"CtqFC97C8GJXHHd4c\",\"Yhxxhq7wtJoRD9vrL\",\"LBFpLqBeXAQQu3jL7\",\"pL7YcMW3tGSvzqkhF\",\"Wiu3dLzktRdK37ABk\",\"faZKsDpHpcDRimX3g\",\"m4o5EoQ8BTWa2AQhr\",\"gRA6PFAmujemC3Tu7\",\"5afy5xQDFQhNQHKjD\",\"4E3RyLGHQbLuhtXLz\",\"JjLsw6vDyBC89fo82\",\"unqzSsxpxj9sZ7rbD\",\"s8xrTiKhopej23Lcm\",\"QtnTGjuv7FJhPG9ZW\",\"fdKfNH2BH9z9cb5xP\",\"CoaHWmqC5siYmi8dj\",\"2xomwBQ7PBnrQ4TGf\",\"q2tzvkrLASvSjkek9\",\"g3AdgRjBLznpujQiD\",\"ey96tARdDQaEfcZgg\",\"KDt2jSkMNEM3br7Hi\",\"osdjybMdDnQDtYrYQ\",\"3KBmDpiXcgL5XcKkR\",\"HFwFdesvEt7GL47wd\",\"wQ4Q5aJMh2KFCXKfK\",\"R7PBhs5m3z2uFA2Rs\",\"YrnFw8siCt7rDhTHW\",\"9RmtpXmRZW7tZjrzg\",\"RnS48ouLbHkZXbAtT\",\"WczJXQaJ3gkxTE63v\",\"zb9xwPxJCeRiHiYpy\",\"f8eyYeBFyof4ZdA22\",\"KjuLHyY6wQzE2E8BH\",\"FxPDKKibxnZjGJLs6\",\"JksKsYvjQGiw96mwE\",\"xoiRSaSqvxdJEs8pi\",\"9Kojj2yggGMqxrZxE\",\"WpmY4NWwjaxneS6va\",\"dELmKkznAydytJTQ2\",\"mtaMAmaHzDzYeiL5Z\",\"9vC7HF7mmGB7AjYj9\",\"tuMCqMHquKJENBgmf\",\"7AtBFcpwAeEoFnzDo\",\"GttCrAdrNvAw8r3kk\",\"PqAERJkQg4742eDXk\",\"LLfXLox27irHD9JuH\",\"ckQwFFWyLXmDQAaCn\",\"8okfc8E3pb37QNpzQ\",\"Kzc6tAnph5iwoPo46\",\"v6N78eKweHHyrXhAQ\",\"2dAi9BoKKA74f79he\",\"RwyCNgJocHpsLMseB\",\"xhgNxukFn4y63g6TM\",\"wFxD3rvtvN5gjTZFS\",\"kYDaHiL9D8QJ48zhS\",\"JDF2epP4JBSvyrHcu\",\"RLBLTvS2XwrKZBZaH\",\"k5BGLagHGWfmz8h2W\",\"ofQbDiDqsQPtBzSCe\",\"gG8T24b2MdRwuGDAN\",\"NLAef4xXPc688Brfa\",\"mWqrhXj3yoajsd2uD\",\"qjMtZTSJHaPaS4RyX\",\"974cv448kw6Wu2JF6\",\"zo9MtKnkZegPjXvtP\",\"d5tncjcqJXwwsMWAC\",\"KYpCWXuddyhFyAgND\",\"LxHL85Ka8diASzD6t\",\"XH6378Zm3WBm679yx\",\"nFbmNzMQ38TncmfQX\",\"8EJ4j2fcfjTJ7Zrzu\",\"RJ6mfGK5N6pRrGRm9\",\"dETkZ4fGSKoaifGCb\",\"Ljkxeg6usHNKKzSkH\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"qphEa8vtYY9AvADN8\",\"language\":\"cpp\"},{\"_id\":\"A2M6aC7BR2P4Qj2Kr\",\"language\":\"java\"},{\"_id\":\"auxE4Rj2YNcHNqE7H\",\"language\":\"javascript\"},{\"_id\":\"iFdEfPoYKwB9wNKXi\",\"language\":\"php\"},{\"_id\":\"XfSvKco6KZFRfgQyj\",\"language\":\"python3\"},{\"_id\":\"A6JKk5Nc9vvrXnfqb\",\"language\":\"ruby\"}]}}"]