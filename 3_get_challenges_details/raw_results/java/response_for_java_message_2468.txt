a["{\"msg\":\"result\",\"id\":\"790\",\"result\":{\"_id\":\"zZCARMRzJ2sHLbgwe\",\"author\":\"Edward Clark\",\"authorId\":\"3pdgguqZgNDSAJSGm\",\"code\":\"public class Challenge {\\n\\tpublic static String[] join(String[] letters) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":3.425,\"familyId\":\"bPFwjRkrZXBJkBfnZ\",\"instructions\":\"Write a function that connects each previous word to the next word by the shared letters. Return the resulting string (removing **duplicate characters** in the overlap) and the **minimum** number of shared letters across all pairs of strings.\\n\\n### Examples\\n```\\njoin([\\\"oven\\\", \\\"envier\\\", \\\"erase\\\", \\\"serious\\\"]) ➞ [\\\"ovenvieraserious\\\", \\\"2\\\"]\\n\\njoin([\\\"move\\\", \\\"over\\\", \\\"very\\\"]) ➞ [\\\"movery\\\", \\\"3\\\"]\\n\\njoin([\\\"to\\\", \\\"ops\\\", \\\"psy\\\", \\\"syllable\\\"]) ➞ [\\\"topsyllable\\\", \\\"1\\\"]\\n\\n// \\\"to\\\" and \\\"ops\\\" share \\\"o\\\" (1)\\n// \\\"ops\\\" and \\\"psy\\\" share \\\"ps\\\" (2)\\n// \\\"psy\\\" and \\\"syllable\\\" share \\\"sy\\\" (2)\\n// the minimum overlap is 1\\n\\njoin([\\\"aaa\\\", \\\"bbb\\\", \\\"ccc\\\", \\\"ddd\\\"]) ➞ [\\\"aaabbbcccddd\\\", \\\"0\\\"]\\n```\\n\\n### Notes\\nMore specifically, look at the overlap between the previous words **ending letters** and the next word's **beginning letters**.\",\"lab\":\"import static org.hamcrest.core.Is.is;\\nimport org.junit.Test;\\nimport static org.junit.Assert.assertThat;\\n\\npublic class ChallengeTest {\\n\\t@Test\\n\\tpublic void test1() {\\n\\t\\tassertThat(Challenge.join(new String[]{\\\"happy\\\", \\\"python\\\", \\\"honey\\\", \\\"yelp\\\", \\\"plank\\\", \\\"lanky\\\"}), is(new String[]{\\\"happythoneyelplanky\\\", \\\"1\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test2() {\\n\\t\\tassertThat(Challenge.join(new String[]{\\\"move\\\", \\\"over\\\", \\\"very\\\"}), is(new String[]{\\\"movery\\\", \\\"3\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test3() {\\n\\t\\tassertThat(Challenge.join(new String[]{\\\"oven\\\", \\\"envier\\\", \\\"erase\\\", \\\"serious\\\"}), is(new String[]{\\\"ovenvieraserious\\\", \\\"2\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test4() {\\n\\t\\tassertThat(Challenge.join(new String[]{\\\"to\\\", \\\"ops\\\", \\\"psy\\\", \\\"syllable\\\"}), is(new String[]{\\\"topsyllable\\\", \\\"1\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test5() {\\n\\t\\tassertThat(Challenge.join(new String[]{\\\"aaa\\\", \\\"bbb\\\", \\\"ccc\\\", \\\"ddd\\\"}), is(new String[]{\\\"aaabbbcccddd\\\", \\\"0\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test6() {\\n\\t\\tassertThat(Challenge.join(new String[]{\\\"abcde\\\", \\\"bcdefghi\\\", \\\"efghi\\\", \\\"fghij\\\", \\\"ghijklmnop\\\"}), is(new String[]{\\\"abcdefghijklmnop\\\", \\\"4\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test7() {\\n\\t\\tassertThat(Challenge.join(new String[]{\\\"aab\\\", \\\"abcccd\\\", \\\"cdeeef\\\", \\\"effff\\\"}), is(new String[]{\\\"aabcccdeeeffff\\\", \\\"2\\\"}));\\n\\t}    \\n}\",\"language\":\"java\",\"summary\":\"Write a function that connects each previous word to the next word by the shared letters. Return the resulting string (removing duplicate characters in the overlap) and the minimum number of shared letters across all pairs of strings.\\n\\nExamples\\njoin([\\\"oven\\\", \\\"envier\\\", \\\"erase\\\", \\\"serious\\\"]) ➞ [\\\"ovenvieraserious\\\", \\\"2\\\"]\\n\\njoin([\\\"move\\\", \\\"over\\\", \\\"very\\\"]) ➞ [\\\"movery\\\",\",\"tags\":[\"strings\",\"higher_order_functions\",\"loops\"],\"timestamp\":{\"$date\":1570283828727},\"title\":\"Connecting Words\",\"stats\":{\"completed\":{\"total\":48,\"ratings\":[3,3,3,3,3,5,2,2,4,4,5,5,2,5,5,1,2,2,5,5,2,5,3,0,5,2,2,5,5,5,5,2,3,5,0,5,5,3,3,3],\"rators\":[\"3pdgguqZgNDSAJSGm\",\"WchA4bbn7Kjauvosp\",\"ct699TXH59y7Fhyh4\",\"YF79LnTdprobbYY5v\",\"sxci7DYKNa6q22Sjq\",\"hxi9vPuDgrQv4m86Z\",\"ZiozQXopCXKLkQMfC\",\"cf7XxBWEdAGXPDGf9\",\"AyrEvM2GLX2jqM772\",\"Es4eX2stRpyoXeC7f\",\"rehehi2Tr2mwaEoJE\",\"xXpZwhQzMHD5yp9Zh\",\"AfMFW7KGW22bHWuuz\",\"uWEZGsPJne2g3Kzgd\",\"iq55QasecYJXKz8rx\",\"htXCitorobtqYymjN\",\"TrquEHytntLKHA4m2\",\"9pCPyhvQmbkWyD2LL\",\"T2vhHPhRR96hRizq8\",\"jyoLggHk8xQKZuoQC\",\"5WQZzuHZBGqFeNQi3\",\"NzJKK8Cuf3bcqZfcw\",\"AcZdvmSFKyRN6EJQs\",\"QS45qu2DFXcCqpAnB\",\"NjnPrCrnMkqYTjK2Y\",\"vTMyc3otxo9jPDpTZ\",\"Ym8AjbKGSJooun3nt\",\"QXR2qGcvrK5Xkxdea\",\"ecyYaPZLMBMGGrfrJ\",\"RQL2PAWda9Bh79GNi\",\"gXTAie79kiw28tx5u\",\"a777e8chPvJkY3tKa\",\"KgD3fXgh5qZQAdm7C\",\"bxkRNFtSfQyFdog2v\",\"9M384SbCW7eciE5zc\",\"nHj7SC5cnmkTApbgY\",\"LNCb5rksJLJ43L4Nw\",\"FovrP3zrg9RJEH3SH\",\"MmnszBg2CgLGZ4Rao\",\"PvWK6XvMrHy7rLnvs\",\"uw47663LqPME8btaA\",\"wFRLGjA56kj7xyhmv\"],\"quality\":[4,5,5,4,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.714285714285714,\"isFree\":false,\"family\":[{\"_id\":\"zZCARMRzJ2sHLbgwe\",\"language\":\"java\"},{\"_id\":\"J6ZGG6AvXQzqRpRsy\",\"language\":\"javascript\"},{\"_id\":\"qNQkYzY8GpiFMmndh\",\"language\":\"python3\"},{\"_id\":\"veBBurxxhp8bNYRtT\",\"language\":\"ruby\"}]}}"]