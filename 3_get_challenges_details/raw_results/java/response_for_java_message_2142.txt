a["{\"msg\":\"result\",\"id\":\"628\",\"result\":{\"_id\":\"SnZ5y2hyxjZnWrMec\",\"author\":\"Edward Clark\",\"authorId\":\"3pdgguqZgNDSAJSGm\",\"code\":\"public class Challenge {\\n\\tpublic static String[] sortContacts(String[] arr, String sortBy) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":2.27027027027027,\"familyId\":\"boF9CobvmPifNngt6\",\"instructions\":\"Write a sorting function that takes in an array of names and sorts them **by last name** either alphabetically (`ASC`) or reverse-alphabetically (`DESC`).\\n\\n### Examples\\n```\\nsortContacts([\\n  \\\"John Locke\\\",\\n  \\\"Thomas Aquinas\\\",\\n  \\\"David Hume\\\",\\n  \\\"Rene Descartes\\\"\\n], \\\"ASC\\\") ➞ [\\n  \\\"Thomas Aquinas\\\",\\n  \\\"Rene Descartes\\\",\\n  \\\"David Hume\\\",\\n  \\\"John Locke\\\"\\n]\\n\\n// Aquinas (A) < Descartes (D) < Hume (H) < Locke (L)\\n\\nsortContacts([\\n  \\\"Paul Erdos\\\",\\n  \\\"Leonhard Euler\\\",\\n  \\\"Carl Gauss\\\"\\n], \\\"DESC\\\") ➞ [\\n  \\\"Carl Gauss\\\",\\n  \\\"Leonhard Euler\\\",\\n  \\\"Paul Erdos\\\"\\n]\\n\\n// Gauss (G) > Erdos (ER) > Euler (EU)\\n\\nsortContacts([], \\\"DESC\\\") ➞ []\\n\\nsortContacts(null, \\\"DESC\\\") ➞ []\\n\\nsortContacts(undefined, \\\"DESC\\\") ➞ []\\n```\\n\\n### Notes\\n- An array with a single name should be trivially returned.\\n- An empty array, or an input of `null` or `undefined` should return an empty array.\",\"lab\":\"import static org.hamcrest.core.Is.is;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\n/**\\n * @author edwardclark\\n**/\\n\\npublic class ChallengeTest {\\n\\t@Test\\n\\tpublic void test1() {\\n\\t\\tassertThat(Challenge.sortContacts(new String[]{\\\"John Locke\\\", \\\"Thomas Aquinas\\\", \\\"David Hume\\\", \\\"Rene Descartes\\\"},\\\"ASC\\\"), is(new String[]{\\\"Thomas Aquinas\\\", \\\"Rene Descartes\\\", \\\"David Hume\\\", \\\"John Locke\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test2() {\\n\\t\\tassertThat(Challenge.sortContacts(new String[]{\\\"Paul Erdos\\\", \\\"Leonhard Euler\\\", \\\"Carl Gauss\\\"},\\\"DESC\\\"), is(new String[]{\\\"Carl Gauss\\\", \\\"Leonhard Euler\\\", \\\"Paul Erdos\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test3() {\\n\\t\\tassertThat(Challenge.sortContacts(new String[]{\\\"Michael Phelps\\\", \\\"Jesse Owens\\\", \\\"Michael Jordan\\\", \\\"Usain Bolt\\\"},\\\"DESC\\\"), is(new String[]{\\\"Michael Phelps\\\", \\\"Jesse Owens\\\", \\\"Michael Jordan\\\", \\\"Usain Bolt\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test4() {\\n\\t\\tassertThat(Challenge.sortContacts(new String[]{\\\"Al Gore\\\", \\\"Barack Obama\\\"},\\\"ASC\\\"), is(new String[]{\\\"Al Gore\\\", \\\"Barack Obama\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test5() {\\n\\t\\tassertThat(Challenge.sortContacts(new String[]{\\\"Albert Einstein\\\"},\\\"ASC\\\"), is(new String[]{\\\"Albert Einstein\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test6() {\\n\\t\\tassertThat(Challenge.sortContacts(new String[]{},\\\"DESC\\\"), is(new String[]{}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test7() {\\n\\t\\tassertThat(Challenge.sortContacts(null,\\\"DESC\\\"), is(new String[]{}));\\n\\t}\\n}\",\"language\":\"java\",\"summary\":\"Write a sorting function that takes in an array of names and sorts them by last name either alphabetically (ASC) or reverse-alphabetically (DESC).\\n\\nExamples\\nsortContacts([\\n  \\\"John Locke\\\",\\n  \\\"Thomas Aquinas\\\",\\n  \\\"David Hume\\\",\\n  \\\"Rene Descartes\\\"\\n], \\\"ASC\\\") ➞ [\\n  \\\"Thomas Aquinas\\\",\\n  \\\"Rene Descartes\\\",\\n  \\\"David Hume\\\",\\n  \\\"John Locke\\\"\\n]\\n\\n// Aquinas (A)  Erdos (ER) > Eu\",\"tags\":[\"sorting\",\"arrays\"],\"timestamp\":{\"$date\":1570737437613},\"title\":\"Contact List\",\"stats\":{\"completed\":{\"total\":42,\"ratings\":[2,2,2,2,2,4,3,3,3,1,3,0,1,4,2,3,2,3,1,3,3,3,0,1,3,1,2,3,1,3,2,3,3,3,3,2,2],\"rators\":[\"3pdgguqZgNDSAJSGm\",\"sxci7DYKNa6q22Sjq\",\"YF79LnTdprobbYY5v\",\"jdvaHjMAzgSWy5jCL\",\"hcYYdmdnhawvt32JX\",\"cG4PEDMMx8jXhWP8T\",\"SnY7WidXJoAyyuPuA\",\"tHMtHi62RoPYKhJKx\",\"22RytYzw9bQRCXqpn\",\"eXW8reZCCZHQzJjQi\",\"CLmJduqJHX83dM4Pd\",\"J9zJq7PMGb6mqzcHW\",\"9aHkSrEhWL7Tp928N\",\"rehehi2Tr2mwaEoJE\",\"wYYMNPe8nSiJFbvJw\",\"Es4eX2stRpyoXeC7f\",\"4RHx3H8EwP2oboW8e\",\"vRXuYYBNuHEQ29fbm\",\"YLqdr7bYjwew2KM4N\",\"gGnDsJz5hr2t9MKCF\",\"cjxsqXfkAPoadmppi\",\"jyoLggHk8xQKZuoQC\",\"TrquEHytntLKHA4m2\",\"5seiNqw6ZXoF2GRRd\",\"imoNrk36ozReP939p\",\"k63LjKkX5p7SYng7C\",\"4RsakkyRXyYGwFxEa\",\"azAzSkvJd7eyXY9x9\",\"gXTAie79kiw28tx5u\",\"mQKWauR6b252TmdX4\",\"2sZrwmQcNFJG3d3HW\",\"FgEeQycsn67j9m7xK\",\"buX4mCQhtXCfBjeno\",\"KMR6vNzvSKMA2cXnK\",\"y6u8RrAyrZGjpJBJA\",\"wFRLGjA56kj7xyhmv\"],\"quality\":[2,4,5,4]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":3.75,\"family\":[{\"_id\":\"BxiTHaprzDiTvdSA4\",\"language\":\"csharp\"},{\"_id\":\"SnZ5y2hyxjZnWrMec\",\"language\":\"java\"},{\"_id\":\"oK8YTFzTDBzjQpmtH\",\"language\":\"javascript\"},{\"_id\":\"fnLXJnqoDFTJNZk5r\",\"language\":\"python3\"},{\"_id\":\"W8DnnocsCoDkdZ7oE\",\"language\":\"ruby\"}]}}"]