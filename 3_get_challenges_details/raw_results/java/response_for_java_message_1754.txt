a["{\"msg\":\"result\",\"id\":\"436\",\"result\":{\"_id\":\"jRzY8tThBn7zp3jvy\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"public class Challenge {\\n\\tpublic static int recamanIndex(int n) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":1.5952380952380953,\"familyId\":\"BMBNaufg9SbdYQN3K\",\"instructions\":\"The Recamán Sequence is a numeric sequence that starts always with 0. The position of a positive integer in the sequence, or Recamán Index, can be established with the following algorithm:\\n\\n- For every number to find, two variables are considered: the value of the last element of the sequence (last element from now on), and the actual sequence length (length from now on).\\n- If the subtraction of the length from the last element returns a number  **greater than 0 and not already present in the sequence**, it is added to the sequence.\\n- When the conditions of the above statement are not met, will be added always the sum of the last element plus the length (even if it is a number already present in the sequence).\\n- Repeat until the number of interest is found.\\n\\nLook at example below for the steps to do for to establish the Recamán Index of number 2:\\n\\n```\\nSequence = [0]\\n\\nLast - Length = 0 - 1 = -1 (lower than zero)\\nLast + Length = 0 + 1 = 1\\n\\nSequence = [0, 1]\\n\\nLast - Length = 1 - 2 = -1 (lower than 0)\\nLast + Length = 1 + 2 = 3\\n\\nSequence = [0, 1, 3]\\n\\nLast - Length = 3 - 3 = 0 (already present in sequence)\\nLast + Length = 3 + 3 = 6\\n\\nSequence = [0, 1, 3, 6]\\n\\nLast - Length = 6 - 4 = 2 (greater than 0 and not already in sequence)\\n\\nSequence = [0, 1, 3, 6, 2]\\n\\n// The Recaman Index of 2 is: 4\\n```\\n\\nGiven a positive integer `n`, implement a function that returns its Recamán Index.\\n\\n### Examples\\n```\\nrecamanIndex(2) ➞ 4\\n\\nrecamanIndex(3) ➞ 2\\n\\nrecamanIndex(7) ➞ 5\\n```\\n\\n### Notes\\n- The sequence starts always with 0.\\n- The step with the subtraction Last Element - Sequence Length (verifying that is not already present in the sequence) has the precedence over the second step.\\n- Remember: if the number to add is the result of a subtraction it can't be already in the sequence (_first step_), if it is the result of an addition it can be already present (_second step_).\\n- Curiosity: the first number to repeat in the sequence is 42...\\n- Curiosity: the first number with a _BIG_ delay in the sequence is 19.\",\"isHidden\":false,\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n  @Test\\n  public void test1() {\\n    assertEquals(4, Challenge.recamanIndex(2));\\n  }\\n\\t\\n\\t@Test\\n  public void test2() {\\n    assertEquals(2, Challenge.recamanIndex(3));\\n  }\\n\\t\\n\\t@Test\\n  public void test3() {\\n    assertEquals(5, Challenge.recamanIndex(7));\\n  }\\n\\t\\n\\t@Test\\n  public void test4() {\\n    assertEquals(7, Challenge.recamanIndex(20));\\n  }\\n\\t\\n\\t@Test\\n  public void test5() {\\n    assertEquals(204, Challenge.recamanIndex(56));\\n  }\\n\\t\\n\\t@Test\\n  public void test6() {\\n    assertEquals(387, Challenge.recamanIndex(100));\\n  }\\n\\t\\n\\t@Test\\n  public void test7() {\\n    assertEquals(2292, Challenge.recamanIndex(666));\\n  }\\n\\t\\n\\t@Test\\n  public void test8() {\\n    assertEquals(4419, Challenge.recamanIndex(1000));\\n  }\\n\\t\\n\\t@Test\\n  public void test9() {\\n    assertEquals(7215, Challenge.recamanIndex(10000));\\n  }\\n}\",\"language\":\"java\",\"summary\":\"The Recamán Sequence is a numeric sequence that starts always with 0. The position of a positive integer in the sequence, or Recamán Index, can be established with the following algorithm:\\n\\nFor every number to find, two variables are considered: the value of the last element of the sequence (last element from now on), and the actual sequence length (length fro\",\"tags\":[\"algorithms\",\"loops\",\"numbers\"],\"timestamp\":{\"$date\":1573020951881},\"title\":\"The Recamán Sequence\",\"stats\":{\"completed\":{\"total\":45,\"ratings\":[1,1,1,1,1,2,2,2,0,2,2,2,2,1,3,1,3,2,3,0,2,2,1,2,1,0,0,1,2,2,2,0,2,0,2,3,3,2,3,1,2,2],\"rators\":[\"FQCssquPFc6mn67PD\",\"sxci7DYKNa6q22Sjq\",\"NWDyTvYzhYGg3nWmo\",\"jEStkk52bnwrYFMMt\",\"ZyGH9Qsk5JNofu5z2\",\"dL4Mg2oivTc5zq2Xa\",\"3uBTPjN6mDavuBYmt\",\"a49eNnfRwSMxsDJXf\",\"xBWjbtgEzZkxwqqAp\",\"3KjxQu9RZ8ZSywvLz\",\"J9zJq7PMGb6mqzcHW\",\"stFzw945NadNHC2ap\",\"r9hHZYPQAqJ9DbwLX\",\"Es4eX2stRpyoXeC7f\",\"8J2Dqqz9PaFufQzwY\",\"TrquEHytntLKHA4m2\",\"hB5mgzMwQSnhBzi7P\",\"5seiNqw6ZXoF2GRRd\",\"Kso7rzAKB4TTCPKgM\",\"jyoLggHk8xQKZuoQC\",\"fZjkX29nhRTWWb75k\",\"WZujpe8yQAyZmpWHg\",\"etoSR23iELGGgs9rA\",\"mfm3gB39arY8Rjb2y\",\"B4pxRqzo43M7S8FbP\",\"DzvdGwHEjqsX7wyKr\",\"pBMXMQem6BpSeooYT\",\"rvojHhKH3DaxotefQ\",\"g4NCSxxHqHCGMpWwT\",\"Fd9765rksgPK4E2Zy\",\"yXGiiSAR5nBHnH3yr\",\"AeJSxRqw2dJZuGvdk\",\"jb9RLyyuo565bKDzN\",\"BWqQ68pvNedARDcBN\",\"bur3yQ8s34zqKGEro\",\"DkSMZ3jZLkwviKb9g\",\"htXCitorobtqYymjN\",\"hhxjQREtmHSheH9Pj\",\"unqzSsxpxj9sZ7rbD\",\"uw47663LqPME8btaA\"],\"quality\":[5,4,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":4.666666666666667,\"family\":[{\"_id\":\"GdX4bWEkxGN3osHsv\",\"language\":\"cpp\"},{\"_id\":\"jRzY8tThBn7zp3jvy\",\"language\":\"java\"},{\"_id\":\"jDtwBwYhaMD2HftdX\",\"language\":\"javascript\"},{\"_id\":\"fW52x9Gh5iMKNfWMt\",\"language\":\"python3\"},{\"_id\":\"ePeZHTw27bYKzQtJu\",\"language\":\"ruby\"}]}}"]