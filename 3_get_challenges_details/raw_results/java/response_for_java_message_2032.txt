a["{\"msg\":\"result\",\"id\":\"573\",\"result\":{\"_id\":\"8Je7AoNP8NxPDobm8\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"public class Challenge {\\n  public static boolean canBuild(String s1, String s2) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":2.1578947368421053,\"familyId\":\"MjjsY2mZTLCjKxAmr\",\"instructions\":\"Write a function that returns `true` if it's possible to build a phrase `s1` using only the characters from another phrase `s2`.\\n\\n### Examples\\n```\\ncanBuild(\\\"got 2 go\\\", \\\"gogogo 2 today\\\") ➞ true\\n\\ncanBuild(\\\"sit on top\\\", \\\"its a moo point\\\") ➞ true\\n\\ncanBuild(\\\"long high add or\\\", \\\"highway road go long\\\") ➞ false\\n\\ncanBuild(\\\"fill tuck mid\\\", \\\"truck falls dim\\\") ➞ false\\n```\\n\\n### Notes\\n- All letters will be in lower case.\\n- Numbers and special characters included.\\n- Ignore whitespaces.\\n- Do not count white space as a character.\",\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n  @Test\\n  public void test1() {\\n    assertEquals(true, Challenge.canBuild(\\\"got 2 go\\\", \\\"go go go 2 today\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test2() {\\n    assertEquals(true, Challenge.canBuild(\\\"for an angel\\\", \\\"angel forest nymph awaken\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test3() {\\n    assertEquals(true, Challenge.canBuild(\\\"sit on top\\\", \\\"its a moo point\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test4() {\\n    assertEquals(true, Challenge.canBuild(\\\"solar to oven\\\", \\\"love desolate rose thorn\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test5() {\\n    assertEquals(true, Challenge.canBuild(\\\"gate im in\\\", \\\"magnetizing\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test6() {\\n    assertEquals(true, Challenge.canBuild(\\\"moreso\\\", \\\"mount rushmore\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test7() {\\n    assertEquals(false, Challenge.canBuild(\\\"dool\\\", \\\"ken doll\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test8() {\\n    assertEquals(false, Challenge.canBuild(\\\"world of make believe\\\", \\\"make believe world\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test9() {\\n    assertEquals(false, Challenge.canBuild(\\\"long high add or\\\", \\\"highway road go long\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test10() {\\n    assertEquals(false, Challenge.canBuild(\\\"fill tuck mid\\\", \\\"truck falls dim\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test11() {\\n    assertEquals(false, Challenge.canBuild(\\\"skin man i\\\", \\\"man in mask\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test12() {\\n    assertEquals(false, Challenge.canBuild(\\\"foolish prides\\\", \\\"foolish pride\\\"));\\n  }\\n}\",\"language\":\"java\",\"summary\":\"Write a function that returns true if it's possible to build a phrase s1 using only the characters from another phrase s2.\\n\\nExamples\\ncanBuild(\\\"got 2 go\\\", \\\"gogogo 2 today\\\") ➞ true\\n\\ncanBuild(\\\"sit on top\\\", \\\"its a moo point\\\") ➞ true\\n\\ncanBuild(\\\"long high add or\\\", \\\"highway road go long\\\") ➞ false\\n\\ncanBuild(\\\"fill tuck mid\\\", \\\"truck falls dim\\\") ➞ false\\n\\nNotes\\nAll letter\",\"tags\":[\"strings\",\"validation\"],\"timestamp\":{\"$date\":1568501833748},\"title\":\"Fridge Poetry\",\"stats\":{\"completed\":{\"total\":65,\"ratings\":[2,2,2,2,2,3,3,0,3,1,2,2,3,2,3,3,1,0,3,0,1,3,1,3,0,1,2,3,2,3,2,3,2,3,3,2,1,3,2,3,3,1,3,2,5,1,3,2,3,1,3,3,2,2,2,3,2],\"rators\":[\"3pdgguqZgNDSAJSGm\",\"sxci7DYKNa6q22Sjq\",\"J9zJq7PMGb6mqzcHW\",\"qRhXvCaA7qgDoeFnr\",\"rehehi2Tr2mwaEoJE\",\"wYYMNPe8nSiJFbvJw\",\"fZky27mpbfX7soJKa\",\"AyrEvM2GLX2jqM772\",\"Es4eX2stRpyoXeC7f\",\"4RHx3H8EwP2oboW8e\",\"C9yBWYcZsjmJYww3K\",\"cjxsqXfkAPoadmppi\",\"jyoLggHk8xQKZuoQC\",\"TrquEHytntLKHA4m2\",\"gJbvbqosimaP4ZAYb\",\"WZujpe8yQAyZmpWHg\",\"8zZ6xmzpiFair25qr\",\"5seiNqw6ZXoF2GRRd\",\"hAcYeP2bPsvZoFBFw\",\"pBMXMQem6BpSeooYT\",\"gBGjCfJvPHswDM5JQ\",\"9pCPyhvQmbkWyD2LL\",\"6ZxpGyg7iviX9cPAy\",\"HscqXA24rvh3NxXaR\",\"kWobGYgZWJxN6ZddF\",\"imoNrk36ozReP939p\",\"mwcjmxMW9msmCFibs\",\"k63LjKkX5p7SYng7C\",\"H4qF5owztFXByDFot\",\"mfm3gB39arY8Rjb2y\",\"Wf7nCHS4Gq5tx659h\",\"4RsakkyRXyYGwFxEa\",\"ji5f27FPz4wRRF6Ls\",\"jRqY4i8gPemsZMBGf\",\"xF6XjdDHS5G2JYAvo\",\"Ym8AjbKGSJooun3nt\",\"82weQfHHmno4Mq4X7\",\"6kz7jjJS8W4tikYQT\",\"x3WsGCnE38anLjJqh\",\"gXTAie79kiw28tx5u\",\"yXGiiSAR5nBHnH3yr\",\"N3HLmYG9RSbwEbnv8\",\"mQKWauR6b252TmdX4\",\"jXTnL3JatkKjoifyb\",\"8Xx8nWXRydHDBGfQf\",\"dcW9oK2uRo8h8mBe2\",\"JDPS2gioHDcZsERYb\",\"H5KSDzxwGtgftsuik\",\"LNCb5rksJLJ43L4Nw\",\"buX4mCQhtXCfBjeno\",\"c7uBxu2rgY77H5d79\",\"grQaymzuXXfuPrTbj\",\"CggGfsERnPKGupFWp\",\"2NJZbusRvu3eJ4tHu\",\"KMR6vNzvSKMA2cXnK\",\"wFRLGjA56kj7xyhmv\",\"a49eNnfRwSMxsDJXf\",\"htXCitorobtqYymjN\",\"rWhXHhzF4W8bea6LP\",\"uw47663LqPME8btaA\"],\"quality\":[5,4,4,5,5,5,5,3]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"isHidden\":false,\"quality\":4.5,\"family\":[{\"_id\":\"fiKqrYibtEuykW7PF\",\"language\":\"cpp\"},{\"_id\":\"8Je7AoNP8NxPDobm8\",\"language\":\"java\"},{\"_id\":\"aKx7FLtttZqopDo5e\",\"language\":\"javascript\"},{\"_id\":\"CD2fqbytBuXrbqJkL\",\"language\":\"python3\"},{\"_id\":\"s8TpT5Stgv6XtjAE4\",\"language\":\"ruby\"}]}}"]