a["{\"msg\":\"result\",\"id\":\"130\",\"result\":{\"_id\":\"Pbbu6wDPnqbbzXwTG\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class TrueOnesFalseZeroes {\\n\\tpublic static boolean[] integerBoolean(String bits) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":0.5865384615384616,\"quality\":4.744186046511628,\"familyId\":\"LkKWEH9KT3TPyGYqg\",\"instructions\":\"Create a function that returns a converted  array of boolean values from a given **bit string**. Basically, a bit character `1` is `true`,  otherwise, it's `false`.\\n\\n### Examples\\n```\\nintegerBoolean(\\\"0110\\\") ➞ [false, true, true, false]\\n\\nintegerBoolean(\\\"100101\\\") ➞ [true, false, false, true, false, true]\\n\\nintegerBoolean(\\\"10\\\") ➞ [true, false]\\n\\nintegerBoolean(\\\"001\\\") ➞ [false, false, true]\\n```\\n\\n### Notes\\nCharacters in the given bit string are absolutely 1's and 0's only.\",\"isHidden\":false,\"lab\":\"/** \\n============================================== \\nTestGen 3.1 for JUnit 4.13.0 \\t\\t\\nTest Case: TrueOnesFalseZeroes::integerBoolean \\nTimestamp: 09/23/2020 05:49:57 PM \\n---------------------------------------------- \\n® DARKKO 2021 © \\n============================================== \\n\\n**/ \\n\\nimport static org.junit.Assert.assertEquals;\\nimport java.util.Arrays;\\nimport org.junit.Test; \\n\\npublic class TrueOnesFalseZeroesTest { \\n\\t\\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertEquals(true, Arrays.equals(new boolean[] {true, false, false, true, false, true}, TrueOnesFalseZeroes.integerBoolean(\\\"100101\\\")));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertEquals(true, Arrays.equals(new boolean[] {false, false, true}, TrueOnesFalseZeroes.integerBoolean(\\\"001\\\")));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertEquals(true, Arrays.equals(new boolean[] {}, TrueOnesFalseZeroes.integerBoolean(\\\"\\\")));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertEquals(true, Arrays.equals(new boolean[] {true, true, true}, TrueOnesFalseZeroes.integerBoolean(\\\"111\\\")));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertEquals(true, Arrays.equals(new boolean[] {false, false, false}, TrueOnesFalseZeroes.integerBoolean(\\\"000\\\")));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertEquals(true, Arrays.equals(new boolean[] {true, false, false, true, false, true, true, false}, TrueOnesFalseZeroes.integerBoolean(\\\"10010110\\\")));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertEquals(true, Arrays.equals(new boolean[] {false, true, true, false, true}, TrueOnesFalseZeroes.integerBoolean(\\\"01101\\\")));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertEquals(true, Arrays.equals(new boolean[] {false, true, false, true, true, false}, TrueOnesFalseZeroes.integerBoolean(\\\"010110\\\")));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test09() { \\n\\t\\tassertEquals(true, Arrays.equals(new boolean[] {false, true, true, false}, TrueOnesFalseZeroes.integerBoolean(\\\"0110\\\")));\\n\\t}\\n\\n}\\n// end of tests\",\"language\":\"java\",\"summary\":\"Create a function that returns a converted  array of boolean values from a given bit string. Basically, a bit character 1 is true,  otherwise, it's false.\\n\\nExamples\\nintegerBoolean(\\\"0110\\\") ➞ [false, true, true, false]\\n\\nintegerBoolean(\\\"100101\\\") ➞ [true, false, false, true, false, true]\\n\\nintegerBoolean(\\\"10\\\") ➞ [true, false]\\n\\nintegerBoolean(\\\"001\\\") ➞ [false, false,\",\"tags\":[\"data_structures\",\"strings\",\"arrays\",\"loops\"],\"timestamp\":{\"$date\":1600837859741},\"title\":\"True Ones, False Zeros\",\"stats\":{\"completed\":{\"total\":155,\"ratings\":[1,1,1,1,1,1,1,0,1,1,0,0,1,0,0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,0,1,1,1,0,0,1,0,2,1,2,0,0,0,0,1,1,1,2,0,2,0,1,1,1,2,0,0,0,0,1,0,0,1,1,1,1,1,1,0,0,1,0,0,0,1,1,1,0,0,1,1,3,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,1,1,1,0,1,0],\"quality\":[5,5,5,3,5,5,5,4,5,5,5,4,5,5,4,5,5,5,5,4,4,5,5,5,5,3,5,4,5,5,5,5,5,5,5,5,5,5,5,5,5,4,5],\"rators\":[\"a777e8chPvJkY3tKa\",\"NmXQLCQrGuEdJMqj2\",\"oMZovHkR6QqNvQwyc\",\"JWL6wBkEdbAqDjvGf\",\"fRYcPHuyEdqngMzC4\",\"82weQfHHmno4Mq4X7\",\"AeJSxRqw2dJZuGvdk\",\"kmSN8au3BpXJoE3mB\",\"yXGiiSAR5nBHnH3yr\",\"ZjEdErENicjeqKZ8g\",\"QjS3SRXLfnbj9auo2\",\"8AvGnwLnDrHXAwX38\",\"qaPjAANdnxFnWfj5d\",\"vRXuYYBNuHEQ29fbm\",\"Fdq6CxMWZL8WZiNaM\",\"jyoLggHk8xQKZuoQC\",\"79Wo8iNbhEr7BvrNE\",\"YFHkjbM6obMSj24zi\",\"sfeeJr28qAH5d4TxC\",\"ZxS3JjsysyertLJ86\",\"hhxjQREtmHSheH9Pj\",\"2xFvy6u3hE4LtCXMD\",\"bcxZ8cynj8ZXxjH9s\",\"SbDRsLR6yfZXETyKN\",\"Es4eX2stRpyoXeC7f\",\"ZqjP4M6dzu32To33K\",\"puCobPgduCEZMXu69\",\"J7epB3qSQJ2E8vWkY\",\"fADAnmvM4LibcQWTr\",\"CggGfsERnPKGupFWp\",\"44arJN5SYx3HyfetA\",\"cueHAmTrcWuowXf58\",\"a49eNnfRwSMxsDJXf\",\"7gBLtxKryhTryH5zb\",\"JpGTbK8kYLeRCaybb\",\"HTHTaRGeFB6tGKRCJ\",\"tyeHaiw6zNeBPSBfD\",\"izdAHuFQcWY2pa3YG\",\"fzWFZSS3zywTR8wEe\",\"eQXwk5zGckM8tCWYH\",\"2wS9Wm3Nj5ZFcMnfA\",\"SmmkwyvSHT54PzB5B\",\"i5iePG5GqhJJ8HEoB\",\"mLPfS53i3c4Yf3jQ3\",\"puWkZTjbBBnJXH9Rd\",\"TrquEHytntLKHA4m2\",\"47PyFbZyxWuP9Bgga\",\"ENtEccBrSYd7oZKFZ\",\"y6kfyYmydcD8tkBk7\",\"yyeQ8kyxFphnx4A3h\",\"etoSR23iELGGgs9rA\",\"2X23EB8EciTGTm4dZ\",\"GT9Qq2tC7dNhgHwEw\",\"rWhXHhzF4W8bea6LP\",\"C9yBWYcZsjmJYww3K\",\"5TaPWyRv9DZWWodp8\",\"ZkvBs5oddaBfKj28G\",\"8Xx8nWXRydHDBGfQf\",\"Yohr2MmAyaWGMbB35\",\"RZhnfbL35u4CtQuqp\",\"ikxSkiQjCjYPsFwMT\",\"iBGtM4NCr6fMT4CSe\",\"FrorBN8wRAoptuxtR\",\"Tf7TJFSPktJBgLA4k\",\"p8qqFdJ3FSk5x9z3G\",\"JwBT2xYDafcNG9eKr\",\"2cdvd8yuPLSwvGj9w\",\"PztZtN8TD4yJcnnQ4\",\"8gRwcAqPftCN4ifgf\",\"3EfDGZ9Sgz5zxzD7a\",\"CNc6rmwhbxkxEhHAp\",\"fD2vkjhwWmxbs3aAn\",\"gBGjCfJvPHswDM5JQ\",\"bWWFscsAr66ZWHo28\",\"W56bWmpQeLJ9JEDsa\",\"m8RTLuXqmythXHYZt\",\"8DfhSneJpsw5uqLeM\",\"ATCbF72Lo628BKgac\",\"69K8S2NbzkqE9pAe5\",\"neNNSEbgzx79GYshu\",\"rojdHfAAuAYxoaEXp\",\"bmsDTBJAPBpGjfhHj\",\"uFfEio8nzDvL8emhp\",\"jZnryXuqhJFwusWTW\",\"Nb6LYPoQP6KJZt8mz\",\"PtGprKjgzCDqyrp6d\",\"5jDgvkGd4JwatrYXg\",\"hseQSt2EJ5uvb2pQv\",\"2ScA9s5nu35nSMDpt\",\"Yj7ftjzyP67R5NFrH\",\"A3KrxZk4FiSymY6f2\",\"8WeJLyNE4h6nJ2dNh\",\"btabi3PdyisuY5tn9\",\"pi76g3eRpnKrhee2a\",\"3SgSNoAB3sxaYeT3w\",\"HCfkcKnPs9mrJojdG\",\"QRv96jmNaYsWkxQEG\",\"b6PEkvr66YeCamroN\",\"GkYtSbQuheBF4Enys\",\"dD3Aja8PZSMXMFSDY\",\"buX4mCQhtXCfBjeno\",\"HPkqYgjNtESED9Z88\",\"dDYSNtqh6nqmCHnyF\",\"8qNSPHZBpmjSTt3tH\",\"t55QWHi8o4teZxqqE\",\"fGSQQds3A8gP6rc5h\",\"xEX3TDY6C2h82dJTn\",\"sYKPxZX5xJZ2GTp6Q\",\"khdCaD6AGBiR6txLQ\",\"sxci7DYKNa6q22Sjq\",\"rjfgMZyXyqW5Mw5fp\",\"4or6DkZYDmjHy4KS2\",\"rhS8qXRjZcpDXkwnE\",\"TCvpT4EPb8qNssNB7\",\"5LDvZHCDJqePeBrCg\",\"c7uBxu2rgY77H5d79\",\"XhzKztoQYYQzZ2c7o\",\"9RJpt5ec2KMLuac4w\",\"uw47663LqPME8btaA\",\"gZj6HTKJdPGJwPe2D\",\"Gn8rShvWCKLX3cxzx\",\"srJ34BaybkQh3qRkM\",\"cR3ibTMxLyEdDFCHY\",\"LTeL83boRDBnKnWfD\",\"fdyejapW3NWN7utPX\",\"NioGGZL9KCn5Ln96t\",\"htXCitorobtqYymjN\",\"DEDniTrstQYGounXT\",\"afvP29FhRou2bTaav\",\"KMR6vNzvSKMA2cXnK\",\"RsujLHaML6L3KinzK\",\"3qgJpdhyi4tKuqMdm\",\"QMcxci638CgTJ54bH\",\"unqzSsxpxj9sZ7rbD\",\"9du58gNDkWQEWivbB\",\"F8dA24AosSC8XXb7D\",\"x2Cz7S8rCKJqCE3Xe\",\"6kB5qypxcm62PHsEJ\",\"nFbmNzMQ38TncmfQX\",\"3Gf7ikLijfoxabiPY\",\"GSgr8hLGHeZPde7WJ\",\"5HGyJtoZ3AffzAZAv\"]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"a777e8chPvJkY3tKa\",\"family\":[{\"_id\":\"Pbbu6wDPnqbbzXwTG\",\"language\":\"java\"},{\"_id\":\"3BqLw3Rp85Y94nAho\",\"language\":\"javascript\"},{\"_id\":\"58DYAThA2dxnAsMpL\",\"language\":\"python3\"},{\"_id\":\"ZM5AzRarc7yD7EgcA\",\"language\":\"ruby\"}]}}"]