a["{\"msg\":\"result\",\"id\":\"724\",\"result\":{\"_id\":\"HJSpyCG7we27Afkqn\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class FactorialBound {\\n\\tpublic static long[] isExact(long n) {\\n\\t\\t// your recursive solution here\\n\\t}\\n}\",\"difficulty\":2.7916666666666665,\"quality\":0,\"familyId\":\"neWhQdGFaHGu6PQgQ\",\"instructions\":\"Create a recursive function that tests if a number is the exact upper bound of the factorial of `n`. If so, return an array of **the exact factorial bound** and `n`, or otherwise, an empty array.\\n\\n### Examples\\n```\\nisExact(6) ➞ [6, 3]\\n\\nisExact(24) ➞ [24, 4]\\n\\nisExact(125) ➞ []\\n\\nisExact(720) ➞ [720, 6]\\n\\nisExact(1024) ➞ []\\n\\nisExact(40320) ➞ [40320, 8]\\n```\\n\\n### Notes\\n- You are expected to solve this challenge via recursion.\\n- You can check on the **Resources** tab for more details about recursion in Java.\\n- You might want to check the non-recursive version of this challenge in [here](https://edabit.com/challenge/hTWrPnnCScgSsoN9A).\\n- If you find recursion to be fun, check out this [collection](https://edabit.com/collection/Yx78jEBrKppHBNsoQ).\",\"isHidden\":false,\"lab\":\"import static org.junit.Assert.assertArrayEquals;\\nimport org.junit.Test;\\n\\npublic class FactorialBoundTests {\\n\\tprivate long[] numVector = new long[] {6, 24, 120, 5040, 40320, 3628800, 20922789888000L, 125, 721, 1024, 41845579776000L};\\n\\tprivate long[][] resVector = new long[][] {\\n\\t\\t{6, 3}, {24, 4}, {120, 5}, {5040, 7}, {40320, 8}, \\n\\t\\t{3628800, 10}, {20922789888000L, 16}, {}, {}, {}, {}\\n\\t};\\n\\t\\n\\t@Test\\n\\tpublic void test1() {\\n\\t\\tassertArrayEquals(FactorialBound.isExact(numVector[0]), resVector[0]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test2() {\\n\\t\\tassertArrayEquals(FactorialBound.isExact(numVector[1]), resVector[1]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test3() {\\n\\t\\tassertArrayEquals(FactorialBound.isExact(numVector[2]), resVector[2]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test4() {\\n\\t\\tassertArrayEquals(FactorialBound.isExact(numVector[3]), resVector[3]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test5() {\\n\\t\\tassertArrayEquals(FactorialBound.isExact(numVector[4]), resVector[4]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test6() {\\n\\t\\tassertArrayEquals(FactorialBound.isExact(numVector[5]), resVector[5]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test7() {\\n\\t\\tassertArrayEquals(FactorialBound.isExact(numVector[6]), resVector[6]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test8() {\\n\\t\\tassertArrayEquals(FactorialBound.isExact(numVector[7]), resVector[7]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test9() {\\n\\t\\tassertArrayEquals(FactorialBound.isExact(numVector[8]), resVector[8]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test10() {\\n\\t\\tassertArrayEquals(FactorialBound.isExact(numVector[9]), resVector[9]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test11() {\\n\\t\\tassertArrayEquals(FactorialBound.isExact(numVector[10]), resVector[10]);\\n\\t}\\n}\",\"language\":\"java\",\"summary\":\"Create a recursive function that tests if a number is the exact upper bound of the factorial of n. If so, return an array of the exact factorial bound and n, or otherwise, an empty array.\\n\\nExamples\\nisExact(6) ➞ [6, 3]\\n\\nisExact(24) ➞ [24, 4]\\n\\nisExact(125) ➞ []\\n\\nisExact(720) ➞ [720, 6]\\n\\nisExact(1024) ➞ []\\n\\nisExact(40320) ➞ [40320, 8]\\n\\nNotes\\nYou are expected to s\",\"tags\":[\"recursion\",\"numbers\",\"math\"],\"timestamp\":{\"$date\":1601228203870},\"title\":\"Recursion: Exact Factorial Bounds\",\"stats\":{\"completed\":{\"total\":23,\"ratings\":[4,4,4,4,4,3,3,0,5,1,5,4,2,2,4,2,0,3,2,2,2,0,3,4],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"azAzSkvJd7eyXY9x9\",\"vRXuYYBNuHEQ29fbm\",\"Es4eX2stRpyoXeC7f\",\"rehehi2Tr2mwaEoJE\",\"QXR2qGcvrK5Xkxdea\",\"ecyYaPZLMBMGGrfrJ\",\"gXTAie79kiw28tx5u\",\"bTCq6CQ3SGjrRfZeQ\",\"2g9DndhBotcaKDiFD\",\"RSSrWo6AiSDRNAy5K\",\"zhAT2xfiiWXNBQGFo\",\"NDFranBPXpjtB9pwa\",\"xa3CFkeyE66qrfTZ9\",\"5QwdBgHwJmGEHdKNC\",\"zrwMiQRwEugHKQ4Qv\",\"LNCb5rksJLJ43L4Nw\",\"sxci7DYKNa6q22Sjq\",\"KMR6vNzvSKMA2cXnK\"]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":1},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"HJSpyCG7we27Afkqn\",\"language\":\"java\"},{\"_id\":\"chDJCBDzZkjSExMwm\",\"language\":\"javascript\"},{\"_id\":\"zhqL89ZWgbxbixsdD\",\"language\":\"python3\"}]}}"]