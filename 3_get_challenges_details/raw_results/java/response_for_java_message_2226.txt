a["{\"msg\":\"result\",\"id\":\"670\",\"result\":{\"_id\":\"t9S9nNr79pLqjXgqb\",\"author\":\"Edward Clark\",\"authorId\":\"3pdgguqZgNDSAJSGm\",\"code\":\"public class Challenge {\\n\\tpublic static boolean canComplete(String initial, String word) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":2.6022099447513813,\"familyId\":\"FJBGtHMcvzbZx5dip\",\"instructions\":\"An input string can be completed if additional letters can be added and no letters need to be taken away to match the word. Furthermore, the order of the letters in the input string must be the same as the order of letters in the final word.\\n\\nCreate a function that, given an input string, determines if the word can be completed.\\n\\n### Examples\\n```\\ncanComplete(\\\"butl\\\", \\\"beautiful\\\") ➞ true\\n// We can add \\\"ea\\\" between \\\"b\\\" and \\\"u\\\", and \\\"ifu\\\" between \\\"t\\\" and \\\"l\\\".\\n\\ncanComplete(\\\"butlz\\\", \\\"beautiful\\\") ➞ false\\n// \\\"z\\\" does not exist in the word beautiful.\\n\\ncanComplete(\\\"tulb\\\", \\\"beautiful\\\") ➞ false\\n// Although \\\"t\\\", \\\"u\\\", \\\"l\\\" and \\\"b\\\" all exist in \\\"beautiful\\\", they are incorrectly ordered.\\n\\ncanComplete(\\\"bbutl\\\", \\\"beautiful\\\") ➞ false\\n// Too many \\\"b\\\"s, beautiful has only 1.\\n```\\n\\n### Notes\\nBoth string input and word will be lowercased.\",\"lab\":\"import static org.hamcrest.core.Is.is;\\nimport org.junit.Test;\\nimport static org.junit.Assert.assertThat;\\n\\npublic class ChallengeTest {\\n\\t@Test\\n\\tpublic void test1() {\\n\\t\\tassertThat(Challenge.canComplete(\\\"butl\\\", \\\"beautiful\\\"), is(true));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test2() {\\n\\t\\tSystem.out.println(\\\"\\\\\\\"z\\\\\\\" does not exist in the word `beautiful`\\\");\\n\\t\\tassertThat(Challenge.canComplete(\\\"butlz\\\", \\\"beautiful\\\"), is(false));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test3() {\\n\\t\\tSystem.out.println(\\\"although \\\\\\\"t\\\\\\\", \\\\\\\"u\\\\\\\", \\\\\\\"l\\\\\\\" and \\\\\\\"b\\\\\\\" incorrectly ordered\\\");\\n\\t\\tassertThat(Challenge.canComplete(\\\"tulb\\\", \\\"beautiful\\\"), is(false));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test4() {\\n\\t\\tSystem.out.println(\\\"too many \\\\\\\"b's\\\\\\\", beautiful has only 1\\\");\\n\\t\\tassertThat(Challenge.canComplete(\\\"bbutl\\\", \\\"beautiful\\\"), is(false));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test5() {\\n\\t\\tassertThat(Challenge.canComplete(\\\"sg\\\", \\\"something\\\"), is(true));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test6() {\\n\\t\\tSystem.out.println(\\\"out of order\\\");\\n\\t\\tassertThat(Challenge.canComplete(\\\"sgi\\\", \\\"something\\\"), is(false));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test7() {\\n\\t\\tassertThat(Challenge.canComplete(\\\"sing\\\", \\\"something\\\"), is(true));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test8() {\\n\\t\\tSystem.out.println(\\\"too many i's\\\");\\n\\t\\tassertThat(Challenge.canComplete(\\\"siing\\\", \\\"something\\\"), is(false));            \\n\\t}    \\n}\",\"language\":\"java\",\"summary\":\"An input string can be completed if additional letters can be added and no letters need to be taken away to match the word. Furthermore, the order of the letters in the input string must be the same as the order of letters in the final word.\\n\\nCreate a function that, given an input string, determines if the word can be completed.\\n\\nExamples\\ncanComplete(\\\"butl\\\", \\\"\",\"tags\":[\"strings\",\"validation\",\"regex\",\"loops\"],\"timestamp\":{\"$date\":1570296424690},\"title\":\"Complete the Word\",\"stats\":{\"completed\":{\"total\":246,\"ratings\":[3,3,3,3,3,4,5,2,3,2,1,3,3,1,0,4,0,4,3,1,3,4,1,2,4,4,1,3,1,2,3,4,4,2,2,1,1,4,2,1,2,4,2,2,4,2,1,3,2,3,1,5,0,2,2,2,2,2,3,1,3,4,3,3,2,1,3,2,2,2,1,3,4,3,3,4,1,2,4,3,3,1,4,2,2,2,4,4,4,2,1,2,4,1,1,4,3,3,3,4,5,2,2,1,2,4,4,0,3,4,2,4,3,3,0,3,1,1,2,1,3,1,4,3,3,2,3,2,4,3,2,3,3,2,2,4,3,3,2,2,4,4,3,4,4,4,4,4,4,3,3,2,3,0,4,2,2,4,3,4,3,2,2,3,2,3,3,2,3,2,4,2,3,4,2,3,2,2,0,2,4],\"rators\":[\"3pdgguqZgNDSAJSGm\",\"YWnFYSYAv4jbY4Mmc\",\"sxci7DYKNa6q22Sjq\",\"cG4PEDMMx8jXhWP8T\",\"DriXeSc5LngcjxZjf\",\"G4gYBXhSSR8bXSYm6\",\"4M7iNBcTTe43CT8wF\",\"YF79LnTdprobbYY5v\",\"Prw5Jq38wrSoj5QSF\",\"XbBsZ7vSHdw88tibi\",\"qJZsi5rhRnWA38FbA\",\"QmbMN88R2WWHbT6aX\",\"wpvJWmW9TxQQAZk4J\",\"DjXeYHz8w7ywi84zx\",\"oDZaopxpPAdqWXLqz\",\"9aHkSrEhWL7Tp928N\",\"jhoZyJtWj7sy7YYjj\",\"ko7oJ85JMftgcbkrr\",\"2PR653L4KSN97r534\",\"4RHx3H8EwP2oboW8e\",\"AyrEvM2GLX2jqM772\",\"KXYHpCQvmTtpbGXYg\",\"Es4eX2stRpyoXeC7f\",\"LZSxphM8vH4A6Deqn\",\"zfFTEgniMS83P9Zb2\",\"imoNrk36ozReP939p\",\"73LN453oCGd2QepJz\",\"gGnDsJz5hr2t9MKCF\",\"kpn2TawqhsR9cNvPY\",\"YknMfmxomnJLbx9pu\",\"iWQBC4rxuCBazvLqC\",\"etoSR23iELGGgs9rA\",\"eXW8reZCCZHQzJjQi\",\"L6t3XwKxrTZtQWgKf\",\"rehehi2Tr2mwaEoJE\",\"8jd8xeC92JXT5WTKk\",\"csRoCgJx5NBJzW8pX\",\"Gu3qBdQH5RFdHgRWQ\",\"sr27rpnTYHBEvuq2c\",\"TrquEHytntLKHA4m2\",\"TpMRr22Z7LQE6fhhT\",\"hnLL3EuW85LygGM2S\",\"cNkiQaAx5iZZy7wz5\",\"DkSMZ3jZLkwviKb9g\",\"kWobGYgZWJxN6ZddF\",\"gJbvbqosimaP4ZAYb\",\"jyoLggHk8xQKZuoQC\",\"oMLSgpSFQnY4ui8cB\",\"zurh88ELCSbkS56oZ\",\"BEjoBzgdBkGbGHJkv\",\"MiwGjvcWr45smZtPu\",\"6kMFqH8tqs9Avj6Qz\",\"4iMe865JrPvg2uaqA\",\"dHsEwxdQZmP26vF88\",\"49caJ2EMfEnPSEYZj\",\"b9KdvETDh68CfLuec\",\"q2X5hMejrpAGGd3hW\",\"aCCr8Sja3Rdu2XWwM\",\"RXgLif2vM276W4tgZ\",\"qQmGBD23y9WJM3kPa\",\"rwETZ6XCNoHCEyB66\",\"pSGuHsr75Pdy5zA4e\",\"zbGJGwm2a7un8F5T5\",\"uuN5sdoMNjtRZwXiL\",\"vu4p8GiTrrF7qCnBR\",\"yiHCqsJuZLL6eMNuF\",\"pWp9qaqWFwmtmzvfr\",\"Cq4jiaTiWkDTDhLey\",\"PP5orY9GrRyMfeFar\",\"T5RDLtm3gkdFo3xd6\",\"FsWwu6MyEqWmWu3Xe\",\"2gZkj9FY5SNwD86Mz\",\"gML4J9obYubrbCyzj\",\"ZiN6yB9rACMaYgseC\",\"FhihuG857NbWqrHSG\",\"MFWx6tiAaWTLdXf98\",\"k63LjKkX5p7SYng7C\",\"am9GkPibqTbzZ9vto\",\"wCCohvZtAZuBvHLQ4\",\"5WQZzuHZBGqFeNQi3\",\"ignd8iNMMvMbf9e2g\",\"XTuxCoKrN9DZ7zaQx\",\"AcZdvmSFKyRN6EJQs\",\"nbH6pjzJS9Z35JD9r\",\"GaMuEuNYSuw3H4WM7\",\"NzJKK8Cuf3bcqZfcw\",\"AxWLAsQ9dKQTeSvA5\",\"4tdfxCGvrAwAMvXQB\",\"9pqtNWrsTJdZcRbEZ\",\"z6unNHGqyaP8ErxhD\",\"mGaEDPw5FsDb3vdnq\",\"2nRgJ4nLmtDdBs9yh\",\"oEbxhe3JtSJ4eMKQ9\",\"mwcjmxMW9msmCFibs\",\"jRqY4i8gPemsZMBGf\",\"K6fn2edFT9Hkz7D3Q\",\"kiiYC9uvN2zjfWmua\",\"HfHX644FWoTbifSCX\",\"Ym8AjbKGSJooun3nt\",\"eoCbZS5Z8MXEWyAyx\",\"urckS99caSjRxPBvp\",\"TfiN5ZAXpNWJ88vzn\",\"dZwYjHxgYFStLXfKA\",\"MhSbFaHSTBk2MMZyo\",\"eT4tjsG63yGc3yeBs\",\"6kz7jjJS8W4tikYQT\",\"vTMyc3otxo9jPDpTZ\",\"7amNEuZodjynhaDQq\",\"wbrbxRHH2MXLNEXhv\",\"xdS2Wao3BYiWTo4H2\",\"4viuRkyFodpGnSDvN\",\"5iNQPk2LoSAsi7ijH\",\"bGZhHGbf7tzCJFBAH\",\"tuKfJSqccPhjfe8ER\",\"iRPmeZh825mMac4rD\",\"mxjrvQP2vPFBjAGxu\",\"9o7Sp5AvxK75cQ3jD\",\"bTCq6CQ3SGjrRfZeQ\",\"YL9pqyCu8xsds8J49\",\"ofp27oRTiTbr2hMkD\",\"SDSvWibEfFvh3mFaQ\",\"feavP3mGDve6obsQa\",\"Yqj3KwhnDCzKwEsom\",\"D2SQv5iDBfuj8WQAe\",\"2CLvCKwQvRQC8NHXp\",\"dcW9oK2uRo8h8mBe2\",\"LrgQT4bdiLbHrprXu\",\"rLXCFPv7sbfogDSss\",\"mQKWauR6b252TmdX4\",\"6fdRGt8yHjBgMK4n5\",\"a2rXtpvi3JwF7mnNd\",\"3mqwov5TxpQY3Xcb8\",\"pzz8vFouna6JTTAiW\",\"p2woPCQKXuWJCwffJ\",\"ctKmyqt7eAahx3BoF\",\"QrveRA7svT9YFxaSM\",\"9jasWuRGFtEtSYh76\",\"tn9LJD37iaKTHNLpt\",\"t2CNnSbqCxZPuBzGN\",\"ey5557C4wS8kpYoTe\",\"psZB2zLasaMgtf3Tb\",\"RSSrWo6AiSDRNAy5K\",\"3iM7dNRZKEQoEZA9K\",\"QqRqJfzs9czad5Brx\",\"9t3ph5taa7xAGzzxa\",\"YNR2PAWqhpSMexy47\",\"26S7LH2wXiJS2NzZ3\",\"BbPpwoHJuDnw5Qb9v\",\"jNmh5KZLHAw2qWuNZ\",\"S5WbTkKMCiPQKiRdp\",\"G6AsKHdHH2qvpD3FT\",\"CQrLMPjz7gn82rySP\",\"TJKGcBJJQbnq7G8mo\",\"hzxrGwEsuGbpKDRYQ\",\"xa3CFkeyE66qrfTZ9\",\"b3pFGJ5jWFdoAh4wp\",\"qkzFDd47Exc34jWzm\",\"9JXXpJLvmWfLEM6ii\",\"4pagg6vw2Cjepv7tN\",\"9pvZWS3WedxxBkCHb\",\"qb2DTmzQj4vNfq5K7\",\"YRNPfkeTCgi97jRS6\",\"SzbbYLa7ThQ2h3pCF\",\"aykgiHhHvd2fYho4d\",\"qhKzMHwbYkjgN2XmC\",\"oGqs9g6LG6FMJC8Xr\",\"2HgHueLXxCZjXiEyy\",\"xkYcJdzWJvcRJ2jYs\",\"MQwqRxatD83h4Pgca\",\"F7fpKheAPBLvLMDGq\",\"87aPsoGwZuZ7rSy5e\",\"psoedMs6f8mE3PCTo\",\"8AvXHnyezyCdb59uD\",\"nt5JdfvC89XfxkkZa\",\"jfej5ssCLKHGdmj9p\",\"Z5yx2PADNWHXWkq48\",\"GCm6KP6bMRrxNcuQR\",\"ZEf7WtNFpe6YkYHQr\",\"jkxZy3n2bkEMzCyRz\",\"g95KBbC33RPmu9XNs\",\"2RNuftAGwMBvzbNmn\",\"xuNYWdXut4gbG7KJF\",\"Yb3wZuQzDNEMgYZ8g\",\"CRZjyWfg8FcuTEcAC\",\"JAQEH6gJDugqL8nXW\",\"LNCb5rksJLJ43L4Nw\",\"DGpWmyginyLs67GK3\",\"wT5gGgvjKc5wz59AQ\",\"wRazYR9mxwbeeaZwB\",\"nHj7SC5cnmkTApbgY\",\"GKc4zpFhvdYyrNGHZ\",\"DPx5Boq5duvvw8cQL\",\"nAuhwzeaxm62fF6Mi\",\"tdr5WvJeCMPaBtDYd\",\"JbLZcKJDc4nKjNQzp\",\"wbrzkxYnb7bNzkgSE\",\"SEFtRgtvvXHS5LuH8\",\"Gia2Wd5q2m9SueA6x\",\"NgrtpKDoNW224q7q2\",\"KmwuAK3MwGT85PC3L\",\"p22yLbgtHim2rJxrE\",\"6G4feiT2AjsE57F3m\",\"rhS8qXRjZcpDXkwnE\",\"qaPjAANdnxFnWfj5d\",\"C6fJvPAqKzJcetbAm\",\"5XzHcQkK5bLo6sKw5\",\"htXCitorobtqYymjN\",\"RCxT687p94WX9eSTe\",\"xMqYeXfGgKQSBQzf5\",\"mS4t7GChGHwJ65Lfk\",\"hN5hfgBocCJuBeBo8\",\"KeY28EdQJoPt49eir\",\"tftzEfLQ8TmGPFzP2\",\"7ZQSyiTqZuCEXFhwK\",\"gxDYXthLLR49QCnPT\",\"2NJZbusRvu3eJ4tHu\",\"KMR6vNzvSKMA2cXnK\",\"hptzhvoqzWEbtLyY5\",\"6bRDfXNp86nFDtj4S\",\"7AtBFcpwAeEoFnzDo\",\"ESX42miJECaktb48s\",\"2DfjCGQmyG6DnPKjs\",\"B4Y4xPWDo5w8ndzaA\",\"8iY8QCKvMrXFYp8TL\",\"buX4mCQhtXCfBjeno\",\"au6u5MwWTKbpGAZH8\",\"6FJ5GqFPJZEykxj24\"],\"quality\":[4,5,4,5,4,5,3,3,5,5,5,5,5,5,4,5,5,5,4,4,4,4,5,5,5,3,5,5,5,5,5,5,5,5,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.705882352941177,\"family\":[{\"_id\":\"Wzk69GjCT7vX3rtGf\",\"language\":\"cpp\"},{\"_id\":\"MadJvJMQhr5JYrTCt\",\"language\":\"csharp\"},{\"_id\":\"t9S9nNr79pLqjXgqb\",\"language\":\"java\"},{\"_id\":\"Hx8tidhX6gXNK56aF\",\"language\":\"javascript\"},{\"_id\":\"bd2fLqAxHfGTx86Qx\",\"language\":\"python3\"},{\"_id\":\"J4xq8yNbr8qcishTJ\",\"language\":\"ruby\"},{\"_id\":\"HyoAwubvvDoWQDNxi\",\"language\":\"swift\"}]}}"]