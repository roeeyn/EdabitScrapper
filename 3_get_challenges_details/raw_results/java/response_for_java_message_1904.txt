a["{\"msg\":\"result\",\"id\":\"509\",\"result\":{\"_id\":\"4JjCN4RksJs763EGg\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"public class Challenge {\\n  public static boolean happy(int num) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":2.056179775280899,\"familyId\":\"ucCfacTzhJuttvtNA\",\"instructions\":\"Given any number, we can create a new number by **adding the sums of squares of digits of that number**. For example, given `203`, our new number is `4 + 0 + 9 = 13`. If we repeat this process, we get a sequence of numbers:\\n\\n```\\n203 -> 13 -> 10 -> 1 -> 1\\n```\\n\\nSometimes, like with `203`, the sequence reaches (and stays at) `1`. Numbers like this are called **happy**.\\n\\nNot all numbers are happy. If we started with `11`, the sequence would be:\\n\\n```\\n11 -> 2 -> 4 -> 16 -> ...\\n```\\n\\nThis sequence will never reach `1`, and so the number `11` is called **unhappy**.\\n\\nGiven a positive whole number, you have to determine whether that number is happy or unhappy.\\n\\n### Examples\\n```\\nhappy(203) ➞ true\\n\\nhappy(11) ➞ false\\n\\nhappy(107) ➞ false\\n```\\n\\n### Notes\\n- You can assume *(and it is actually true!)* that all positive whole numbers are either happy or unhappy. Any happy number will have a `1` in its sequence, and every unhappy number will have a `4` in its sequence.\\n- The only numbers passed to your function will be positive whole numbers.\",\"lab\":\"// Between 100 and 110 the happy numbers are 100, 103, 109\\nimport org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n  @Test\\n  public void test1() {\\n    assertEquals(true, Challenge.happy(100));\\n  }\\n\\t\\n\\t@Test\\n  public void test2() {\\n    assertEquals(false, Challenge.happy(101));\\n  }\\n\\t\\n\\t@Test\\n  public void test3() {\\n    assertEquals(false, Challenge.happy(102));\\n  }\\n\\t\\n\\t@Test\\n  public void test4() {\\n    assertEquals(true, Challenge.happy(103));\\n  }\\n\\t\\n\\t@Test\\n  public void test5() {\\n    assertEquals(false, Challenge.happy(104));\\n  }\\n\\t\\n\\t@Test\\n  public void test6() {\\n    assertEquals(false, Challenge.happy(105));\\n  }\\n\\t\\n\\t@Test\\n  public void test7() {\\n    assertEquals(false, Challenge.happy(106));\\n  }\\n\\t\\n\\t@Test\\n  public void test8() {\\n    assertEquals(false, Challenge.happy(107));\\n  }\\n\\t\\n\\t@Test\\n  public void test9() {\\n    assertEquals(false, Challenge.happy(108));\\n  }\\n\\t\\n\\t@Test\\n  public void test10() {\\n    assertEquals(true, Challenge.happy(109));\\n  }\\n\\t\\n\\t@Test\\n  public void test11() {\\n    assertEquals(false, Challenge.happy(110));\\n  }\\n}\",\"language\":\"java\",\"summary\":\"Given any number, we can create a new number by adding the sums of squares of digits of that number. For example, given 203, our new number is 4 + 0 + 9 = 13. If we repeat this process, we get a sequence of numbers:\\n\\n203 -> 13 -> 10 -> 1 -> 1\\n\\nSometimes, like with 203, the sequence reaches (and stays at) 1. Numbers like this are called happy.\\n\\nNot all numbers \",\"tags\":[\"loops\",\"validation\"],\"timestamp\":{\"$date\":1567984578994},\"title\":\"Happy Numbers\",\"stats\":{\"completed\":{\"total\":107,\"ratings\":[3,3,3,3,3,2,3,4,4,0,2,2,1,2,1,0,2,3,2,2,1,3,1,0,3,2,1,1,3,2,3,2,1,2,1,3,1,3,1,2,2,3,2,3,3,2,3,2,1,3,2,1,0,2,1,2,3,0,3,3,0,3,3,1,1,3,3,3,2,2,2,1,3,1,2,2,3,2,3,1,3,3,3,2,3,2,3,0,1],\"rators\":[\"sxci7DYKNa6q22Sjq\",\"3pdgguqZgNDSAJSGm\",\"YWnFYSYAv4jbY4Mmc\",\"hZr4qXRsSumkpJXK9\",\"SnY7WidXJoAyyuPuA\",\"2cbTKYSPwFJBoEtay\",\"YF79LnTdprobbYY5v\",\"6qyzL2iceT8a7bos4\",\"zbQp6JhznkqyyLJTZ\",\"3gxJoNp59B4eoyyed\",\"6jbsfarJg74YD6s5D\",\"eXW8reZCCZHQzJjQi\",\"2NJuDfSqdrF8kHHni\",\"fxaS5K7ZXo4FbTe36\",\"J9zJq7PMGb6mqzcHW\",\"wYYMNPe8nSiJFbvJw\",\"Es4eX2stRpyoXeC7f\",\"xnhBi4BCdJNAXXRvk\",\"8J2Dqqz9PaFufQzwY\",\"gGnDsJz5hr2t9MKCF\",\"2PR653L4KSN97r534\",\"cjxsqXfkAPoadmppi\",\"YLwJkF2wuL3n9o6a2\",\"JpjuqGXmqhqP2Tx92\",\"Kfr4mphodbPQMuHpy\",\"3BTudN59m3pi4P3DP\",\"dDP6nt8ihp6FPeT27\",\"rehehi2Tr2mwaEoJE\",\"jyoLggHk8xQKZuoQC\",\"5seiNqw6ZXoF2GRRd\",\"TrquEHytntLKHA4m2\",\"etoSR23iELGGgs9rA\",\"pBMXMQem6BpSeooYT\",\"62Q2HcfLE6SGphZkT\",\"k63LjKkX5p7SYng7C\",\"4RsakkyRXyYGwFxEa\",\"imoNrk36ozReP939p\",\"AcZdvmSFKyRN6EJQs\",\"rvojHhKH3DaxotefQ\",\"k2tXkx7AyX77tQDRo\",\"Ym8AjbKGSJooun3nt\",\"gXTAie79kiw28tx5u\",\"yXGiiSAR5nBHnH3yr\",\"mQKWauR6b252TmdX4\",\"azAzSkvJd7eyXY9x9\",\"jXTnL3JatkKjoifyb\",\"8Xx8nWXRydHDBGfQf\",\"sgKJeTKjP9Y94CEAP\",\"btabi3PdyisuY5tn9\",\"RGN3QTb5LXj4ZPPkj\",\"YhJL55Yd3w9MhvDo4\",\"buX4mCQhtXCfBjeno\",\"rhS8qXRjZcpDXkwnE\",\"wFRLGjA56kj7xyhmv\",\"xEX3TDY6C2h82dJTn\",\"a49eNnfRwSMxsDJXf\",\"YAzCMKmAZQWX4GHLM\",\"QwkJidQW7vvEY6TLp\",\"2M6suJLmNHmr74tzu\",\"sP3PXP6sKzLPYp9bH\",\"J9RJf8bBmB7MpzF3m\",\"htXCitorobtqYymjN\",\"4za87fFyw9qxkD936\",\"djZ7sEDPm2Mtym8Ag\",\"eFYo5jNNHWb7ZFPDm\",\"jCjCvyhqhpebkJn34\",\"AQKy5WtChY9C8TZyd\",\"6waJRR7JPunYF8DhS\",\"6SW5H5q5dozh89vkt\",\"SDh3RX3NxD9tBvyQz\",\"9vyjn4WyWtJ6o2wop\",\"u9EpWxd359iTtXcap\",\"mS4t7GChGHwJ65Lfk\",\"pH3uvJAzxYaQrukQi\",\"ceQL4nWwweztrutPv\",\"CYdpG37XFpHudffE3\",\"W6QfsXTCGcBwX6BQX\",\"KMR6vNzvSKMA2cXnK\",\"rWhXHhzF4W8bea6LP\",\"PZAAB3nhJhLdqdskd\",\"5HGyJtoZ3AffzAZAv\",\"D2G6Z2sbZRjXjxiyo\",\"e9NhiaGdEeGzhmPju\",\"bTGhMH2tgtECdCvJi\",\"AWDDnJJ27u8bRGcZQ\",\"au6u5MwWTKbpGAZH8\",\"6rvJwN4mcX7iYGjY7\",\"aA42FZ2QiEgwHrvzz\",\"unqzSsxpxj9sZ7rbD\",\"uw47663LqPME8btaA\",\"FxPDKKibxnZjGJLs6\"],\"quality\":[4,4,5,5,5,5,3]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"isHidden\":false,\"quality\":4.428571428571429,\"family\":[{\"_id\":\"dwtpTMnvkLLYcH2hC\",\"language\":\"cpp\"},{\"_id\":\"4JjCN4RksJs763EGg\",\"language\":\"java\"},{\"_id\":\"EhGY9aaNHiCqqpnL9\",\"language\":\"javascript\"},{\"_id\":\"knWLLoi87YbCmKJS4\",\"language\":\"python3\"},{\"_id\":\"Dhy6BTo5AMa7dNsuP\",\"language\":\"ruby\"}]}}"]