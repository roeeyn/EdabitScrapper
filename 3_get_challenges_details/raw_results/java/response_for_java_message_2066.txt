a["{\"msg\":\"result\",\"id\":\"590\",\"result\":{\"_id\":\"whdNuCbR69fpLhbBv\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class LeftShift {\\n\\tpublic static int shiftToLeft(int x, int y) {\\n\\t\\t// recursive code here\\n\\t}\\n}\",\"difficulty\":2.1842105263157894,\"editorId\":\"a777e8chPvJkY3tKa\",\"familyId\":\"XFQD7n28AuFNqAuYp\",\"instructions\":\"The **left shift** operation is similar to **multiplication by powers of two**, thus, the process is _repetitive_ and can be done _recursively_.\\n\\nSample calculation using the left shift operator (` << `):\\n```\\n10 << 3 = 10 * 2^3 = 10 * 8 = 80\\n-32 << 2 = -32 * 2^2 = -32 * 4 = -128\\n5 << 2 = 5 * 2^2 = 5 * 4 = 20\\n```\\n\\nWrite a **recursive** function that **mimics** (without the use of **<<**) the left shift operator and returns the result from the two given integers.\\n\\n### Examples\\n```\\nshiftToLeft(5, 2) ➞ 20\\n\\nshiftToLeft(10, 3) ➞ 80\\n\\nshiftToLeft(-32, 2) ➞ -128\\n\\nshiftToLeft(-6, 5) ➞ -192\\n\\nshiftToLeft(12, 4) ➞ 192\\n\\nshiftToLeft(46, 6) ➞ 2944\\n```\\n\\n### Notes\\n- There will be no negative values for the second parameter `y`.\\n- This challenge is more like recreating of the **left shift** operation, thus, **the use of the operator directly** is **prohibited**.\\n- You are expected to solve this challenge via **recursion**.\\n- An **iterative** version of this challenge can be found via this [link](https://edabit.com/challenge/KpAxNFuZj79KzLDc5).\\n- A **collection** of challenges in recursion can be found via this [link] (https://edabit.com/collection/Yx78jEBrKppHBNsoQ).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"/** \\n================================= \\nTestGen 3.1 for JUnit 4.13.0 \\t\\t\\nTest Case: LeftShift::shiftToLeft \\nTimestamp: 10/19/2020 06:06:17 PM \\n--------------------------------- \\n® DARKKO 2020 © \\n================================= \\n\\n**/ \\n\\nimport static org.junit.Assert.assertEquals; \\nimport org.junit.Test; \\n\\npublic class LeftShiftTest { \\n\\t\\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertEquals(20, LeftShift.shiftToLeft(5, 2));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertEquals(80, LeftShift.shiftToLeft(10, 3));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertEquals(-128, LeftShift.shiftToLeft(-32, 2));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertEquals(-192, LeftShift.shiftToLeft(-6, 5));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertEquals(192, LeftShift.shiftToLeft(12, 4));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertEquals(2944, LeftShift.shiftToLeft(46, 6));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertEquals(57, LeftShift.shiftToLeft(57, 0));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertEquals(158, LeftShift.shiftToLeft(79, 1));\\n\\t}\\n\\n}\\n// end of tests\",\"language\":\"java\",\"quality\":0,\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,4,1,3,2,4,2,0,3,3,3,2,2,1,3,2,1,2,3,5,5,1,2,3,1,3,1,0,1,3,2,1,2],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"Es4eX2stRpyoXeC7f\",\"Yp7uvStL97cC9fKkY\",\"Ym8AjbKGSJooun3nt\",\"azAzSkvJd7eyXY9x9\",\"z6fQ5RB48zBLjDkxv\",\"gXTAie79kiw28tx5u\",\"bTCq6CQ3SGjrRfZeQ\",\"DzvdGwHEjqsX7wyKr\",\"RAEFpazbe6mhx3PLb\",\"a82zHoDpGHXb8rBZX\",\"beSt5pzrK2WWpJpna\",\"AzrTAFAXhhkQsvj8A\",\"Wi4H6ayKsNDWWQCG5\",\"iumiEEzgPfm2oJSA2\",\"jKtjBFPvnAHCsHDjs\",\"sNz6BLZnpKwgcTpkq\",\"wT5gGgvjKc5wz59AQ\",\"eYDL2pidXWu9MTDDQ\",\"nHj7SC5cnmkTApbgY\",\"jyoLggHk8xQKZuoQC\",\"Ac8LMwwBE5iNTtjPG\",\"c7uBxu2rgY77H5d79\",\"buX4mCQhtXCfBjeno\",\"fxF9CpQzkYdNSCLse\",\"qaPjAANdnxFnWfj5d\",\"rhS8qXRjZcpDXkwnE\",\"afvP29FhRou2bTaav\",\"sxci7DYKNa6q22Sjq\",\"KMR6vNzvSKMA2cXnK\",\"htXCitorobtqYymjN\",\"uw47663LqPME8btaA\",\"xNwRx7v44XnPwa3qm\"],\"total\":38},\"flags\":0},\"summary\":\"The left shift operation is similar to multiplication by powers of two, thus, the process is repetitive and can be done recursively.\\n\\nSample calculation using the left shift operator ( << ):\\n10 << 3 = 10 * 2^3 = 10 * 8 = 80\\n-32 << 2 = -32 * 2^2 = -32 * 4 = -128\\n5 << 2 = 5 * 2^2 = 5 * 4 = 20\\n\\nWrite a recursive function that mimics (without the use of <<) the le\",\"tags\":[\"recursion\",\"bit_operations\",\"numbers\"],\"timestamp\":{\"$date\":1603126368277},\"title\":\"Recursion: Left Shift by Powers of Two\",\"family\":[{\"_id\":\"whdNuCbR69fpLhbBv\",\"language\":\"java\"},{\"_id\":\"CNimjGSPT7xmPJuvY\",\"language\":\"javascript\"},{\"_id\":\"g3BokS6KZgyYT8Hjm\",\"language\":\"python3\"}]}}"]