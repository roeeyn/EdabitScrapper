a["{\"msg\":\"result\",\"id\":\"655\",\"result\":{\"_id\":\"7DRLdMehCk9eWFWyR\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class NumberedCards {\\n\\tpublic static boolean swapCards(int x, int y) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":2.3636363636363638,\"familyId\":\"93LoQsR482n3acWAg\",\"instructions\":\"Two players draw a pair of numbered cards so that both players can form a *2 digit number*. A winner can be decided if one player's number is larger than the other.\\n\\nHowever, there is a rule where a player can swap any one of their cards with any one of the other player's cards in a gamble to get a higher number! Note that it is illegal to swap the order of **your own cards**. That means if you draw a `1` then a `9`, you **cannot** swap them to get `91`.\\n\\n![Numbered Cards](https://edabit-challenges.s3.amazonaws.com/ffnIjMHhwK.png)\\n\\nPaul's strategy is to always swap his **lowest** number with the opponent's **ten's digit**. Return whether this results in Paul winning the round.\\n- `n1` is Paul's number\\n- `n2` is his opponent's number\\n\\n### Worked Example\\n```\\nswapCards(41, 79) ➞ true\\n// Paul's lowest number is 1\\n// The opponent's ten's digit is 7\\n// After the swap: 47 > 19\\n// Paul wins the round\\n```\\n\\n### Examples\\n```\\nswapCards(41, 98) ➞ true\\n\\nswapCards(12, 28) ➞ true\\n\\nswapCards(67, 53) ➞ false\\n\\nswapCards(77, 54) ➞ false\\n```\\n\\n### Notes\\n- If both of Paul's digits are the same, swap the ten's digit with the opponent's (paul likes to live riskily).\\n- The cards don't include the number **0**.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"import static org.junit.Assert.assertEquals;\\nimport org.junit.Test;\\n\\npublic class NumberedCardsTests {\\n\\tprivate int[][] numVector = new int[][] {\\n\\t\\t{41, 98}, {12, 28}, {67, 53}, {77, 54}, {45, 23}, {74, 81}, \\n\\t\\t{75, 35}, {21, 25}, {22, 34}, {24, 12}, {52, 46}, {88, 45}, \\n\\t\\t{48, 54}, {75, 87}, {13, 12}, {25, 41}, {48, 14}\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t};\\n\\tprivate boolean[] resVector = new boolean[] {\\n\\t\\ttrue, true, false, false, false, true, \\n\\t\\ttrue, true, true, false, true, false, \\n\\t\\ttrue, true, true, true, false\\n\\t};\\n\\t\\n\\t@Test\\n\\tpublic void test01() {\\n\\t\\tassertEquals(NumberedCards.swapCards(numVector[0][0], numVector[0][1]), resVector[0]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test02() {\\n\\t\\tassertEquals(NumberedCards.swapCards(numVector[1][0], numVector[1][1]), resVector[1]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test03() {\\n\\t\\tassertEquals(NumberedCards.swapCards(numVector[2][0], numVector[2][1]), resVector[2]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test04() {\\n\\t\\tassertEquals(NumberedCards.swapCards(numVector[3][0], numVector[3][1]), resVector[3]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test05() {\\n\\t\\tassertEquals(NumberedCards.swapCards(numVector[4][0], numVector[4][1]), resVector[4]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test06() {\\n\\t\\tassertEquals(NumberedCards.swapCards(numVector[5][0], numVector[5][1]), resVector[5]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test07() {\\n\\t\\tassertEquals(NumberedCards.swapCards(numVector[6][0], numVector[6][1]), resVector[6]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test08() {\\n\\t\\tassertEquals(NumberedCards.swapCards(numVector[7][0], numVector[7][1]), resVector[7]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test09() {\\n\\t\\tassertEquals(NumberedCards.swapCards(numVector[8][0], numVector[8][1]), resVector[8]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test10() {\\n\\t\\tassertEquals(NumberedCards.swapCards(numVector[9][0], numVector[9][1]), resVector[9]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test11() {\\n\\t\\tassertEquals(NumberedCards.swapCards(numVector[10][0], numVector[10][1]), resVector[10]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test12() {\\n\\t\\tassertEquals(NumberedCards.swapCards(numVector[11][0], numVector[11][1]), resVector[11]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test13() {\\n\\t\\tassertEquals(NumberedCards.swapCards(numVector[12][0], numVector[12][1]), resVector[12]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test14() {\\n\\t\\tassertEquals(NumberedCards.swapCards(numVector[13][0], numVector[13][1]), resVector[13]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test15() {\\n\\t\\tassertEquals(NumberedCards.swapCards(numVector[14][0], numVector[14][1]), resVector[14]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test16() {\\n\\t\\tassertEquals(NumberedCards.swapCards(numVector[15][0], numVector[15][1]), resVector[15]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test17() {\\n\\t\\tassertEquals(NumberedCards.swapCards(numVector[16][0], numVector[16][1]), resVector[16]);\\n\\t}\\n}\",\"language\":\"java\",\"quality\":0,\"summary\":\"Two players draw a pair of numbered cards so that both players can form a 2 digit number. A winner can be decided if one player's number is larger than the other.\\n\\nHowever, there is a rule where a player can swap any one of their cards with any one of the other player's cards in a gamble to get a higher number! Note that it is illegal to swap the order of your\",\"tags\":[\"games\",\"numbers\",\"algorithms\",\"validation\"],\"timestamp\":{\"$date\":1603302453601},\"title\":\"Swapping Cards\",\"stats\":{\"completed\":{\"total\":19,\"ratings\":[2,2,2,2,2,1,3,3,3,2,3,3,3,3,2,2,3,1,2,3,3,2],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"Es4eX2stRpyoXeC7f\",\"Ym8AjbKGSJooun3nt\",\"yXGiiSAR5nBHnH3yr\",\"SDSvWibEfFvh3mFaQ\",\"Zt9w3SiJxSE4SfzRp\",\"oMZovHkR6QqNvQwyc\",\"buX4mCQhtXCfBjeno\",\"xEX3TDY6C2h82dJTn\",\"27CbQy6BcxBvHpvsP\",\"zKbitYtjWujqrnDaP\",\"qaPjAANdnxFnWfj5d\",\"Wgp94thinHgqS9nBy\",\"2NJZbusRvu3eJ4tHu\",\"CkJWwnMHPCS3igtoQ\",\"KMR6vNzvSKMA2cXnK\",\"sxci7DYKNa6q22Sjq\"]},\"flags\":0},\"editorId\":\"a777e8chPvJkY3tKa\",\"family\":[{\"_id\":\"rYMu73AwkgcLKJRee\",\"language\":\"cpp\"},{\"_id\":\"7DRLdMehCk9eWFWyR\",\"language\":\"java\"},{\"_id\":\"96fvErFZEjvi4yqn4\",\"language\":\"javascript\"},{\"_id\":\"kpKKFZcvHX3C68zyN\",\"language\":\"python3\"},{\"_id\":\"GZEEfbt9Ez6Svj8Zy\",\"language\":\"ruby\"}]}}"]