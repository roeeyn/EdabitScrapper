a["{\"msg\":\"result\",\"id\":\"780\",\"result\":{\"_id\":\"gvfWZYpmkAu99TKWt\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class Anagram {\\n\\tpublic static String hiddenAnagram(String t, String p) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":3.3157894736842106,\"familyId\":\"3XyMFkPCm45dzrxo2\",\"instructions\":\"Create a function that takes two strings. The first string contains a sentence containing the letters of the second string in a consecutive sequence but in a different order. The hidden anagram must contain all the letters, including duplicates, from the second string in any order and must not contain any other alphabetic characters.\\n\\nWrite a function to find the anagram of the second string embedded somewhere in the first string. You should ignore character case, any spaces, and punctuation marks and return the anagram as a lower case string with no spaces or punctuation marks.\\n\\n### Examples\\n```\\nhiddenAnagram([\\\"My world evolves in a beautiful space called Tesh.\\\", \\\"sworn love lived\\\"]) ➞ \\\"worldevolvesin\\\"\\n// The sequence \\\"world evolves in\\\" is a perfect anagram of \\\"sworn love lived\\\".\\n\\nhiddenAnagram(\\\"An old west action hero actor\\\", \\\"Clint Eastwood\\\") ➞ \\\"noldwestactio\\\"\\n// The sequence \\\"n old west actio\\\" is a perfect anagram of \\\"Clint Eastwood\\\".\\n\\nhiddenAnagram(\\\"Mr. Mojo Rising could be a song title\\\", \\\"Jim Morrison\\\") ➞ \\\"mrmojorisin\\\"\\n// The sequence \\\"Mr. Mojo Risin\\\" ignoring the full stop, is a perfect\\n// anagram of \\\"Jim Morrison\\\".\\n\\nhiddenAnagram(\\\"Banana? margaritas\\\", \\\"ANAGRAM\\\") ➞ \\\"anamarg\\\"\\n// The sequence \\\"ana? marg\\\" ignoring \\\"?\\\" is a perfect anagram of \\\"Anagram\\\".\\n\\nhiddenAnagram(\\\"D  e b90it->?$ (c)a r...d,,#~\\\", \\\"bad credit\\\") ➞ \\\"debitcard\\\"\\n// When all spaces, numbers and puntuation marks are removed\\n// from the whole phrase, the remaining characters form the sequence\\n// \\\"Debitcard\\\" which is a perfect anagram of \\\"bad credit\\\".\\n\\nhiddenAnagram(\\\"Bright is the moon\\\", \\\"Bongo mirth\\\") ➞ \\\"noutfond\\\"\\n// The words \\\"Bright moon\\\" are an anagram of \\\"bongo mirth\\\" but they are\\n// not a continuous alphabetical sequence because the words \\\"is the\\\" are in\\n// between. Hence the negative result, \\\"noutfond\\\" is returned.\\n```\\n\\n### Notes\\n- A perfect anagram contains all the letters of the original, in any order, no more, no less.\\n- If there is no hidden anagram in the sentence, return `\\\"noutfond\\\"`.\\n- As in the above examples, the hidden anagram may start or finish part way through a word and/or span multiple words and may contain punctuation marks and other non-alpha characters.\\n- Ignore character case and any embedded non-alpha characters.\\n- If there is more than 1 result in a sentence, return the nearest to the beginning.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"import static org.junit.Assert.assertEquals; \\nimport org.junit.Test; \\n\\npublic class AnagramTest {\\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertEquals(\\\"worldevolvesin\\\", Anagram.hiddenAnagram(\\\"My world evolves in a beautiful space called Tesh.\\\", \\\"sworn love lived\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertEquals(\\\"moonstarer\\\", Anagram.hiddenAnagram(\\\"Sir Patrick Moore was a famous moon starer\\\", \\\"Astronomer\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertEquals(\\\"builttostayfree\\\", Anagram.hiddenAnagram(\\\"A building,  built to stay free of defects,  is uncommon!\\\", \\\"Statue of Liberty\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertEquals(\\\"noutfond\\\", Anagram.hiddenAnagram(\\\"Bright is the moon\\\", \\\"Bongo mirth\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertEquals(\\\"anchormanbilla\\\", Anagram.hiddenAnagram(\\\"Anchor man Bill,  a well known TV personality,  was confused about becoming president\\\", \\\"Abraham Lincoln\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertEquals(\\\"televisionads\\\", Anagram.hiddenAnagram(\\\"There seem to be more and more television ads on the box these days!\\\", \\\"enslave idiots\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertEquals(\\\"oratorshate\\\", Anagram.hiddenAnagram(\\\"The thing orators hate most is a throat infection\\\", \\\"A sore throat\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertEquals(\\\"cornetnoteo\\\", Anagram.hiddenAnagram(\\\"I thought I heard a high cornet note of great beuaty\\\", \\\"One Cornetto\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test09() { \\n\\t\\tassertEquals(\\\"debitcard\\\", Anagram.hiddenAnagram(\\\"D  e b90it->?$ (c)a r...d, , #~\\\", \\\"bad credit\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() { \\n\\t\\tassertEquals(\\\"noutfond\\\", Anagram.hiddenAnagram(\\\"You won't find any anagram here!\\\", \\\"aerogramhenna\\\"));\\n\\t}\\n}\",\"language\":\"java\",\"quality\":4,\"summary\":\"Create a function that takes two strings. The first string contains a sentence containing the letters of the second string in a consecutive sequence but in a different order. The hidden anagram must contain all the letters, including duplicates, from the second string in any order and must not contain any other alphabetic characters.\\n\\nWrite a function to find\",\"tags\":[\"arrays\",\"formatting\",\"loops\",\"sorting\"],\"timestamp\":{\"$date\":1608179334053},\"title\":\"Hidden Anagram\",\"stats\":{\"completed\":{\"total\":20,\"ratings\":[3,3,3,3,3,4,3,2,5,4,1,5,5,5,0,5,3,5,1],\"quality\":[4],\"rators\":[\"a777e8chPvJkY3tKa\",\"GTYGhBXLQfMkcEC4j\",\"gXTAie79kiw28tx5u\",\"4ThmYBWvyCK5H9qjr\",\"LrgQT4bdiLbHrprXu\",\"9pCPyhvQmbkWyD2LL\",\"9pqtNWrsTJdZcRbEZ\",\"XuRynmG9YQFzc4ePh\",\"CvCMHBTZZ6sQMiKCm\",\"Es4eX2stRpyoXeC7f\",\"LNCb5rksJLJ43L4Nw\",\"T6hRjofbdNXqNfgiu\",\"qg94wqTGMA6K5Caj3\",\"htXCitorobtqYymjN\",\"uw47663LqPME8btaA\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"vxWGJmtjpWtu36xfj\",\"language\":\"cpp\"},{\"_id\":\"gvfWZYpmkAu99TKWt\",\"language\":\"java\"},{\"_id\":\"7hnsWYJGc6yPqEMjc\",\"language\":\"javascript\"},{\"_id\":\"YcKh5TokDmm8MZ9Dk\",\"language\":\"python3\"},{\"_id\":\"qyi9uw6eWdLGvA7Rj\",\"language\":\"ruby\"}]}}"]