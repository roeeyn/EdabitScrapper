a["{\"msg\":\"result\",\"id\":\"394\",\"result\":{\"_id\":\"zmbR8SKveCgJ6KB5G\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"public class Challenge {\\n\\tpublic static int duplicates(String str) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":1.5168539325842696,\"familyId\":\"Qo2PyszA2tHbYnyYm\",\"instructions\":\"Create a function that returns the amount of duplicate characters in a string. It will be case sensitive and spaces are included. If there are no duplicates, return `0`.\\n\\n### Examples\\n```\\nduplicates(\\\"Hello World!\\\") ➞ 3\\n// \\\"o\\\" = 2, \\\"l\\\" = 3.\\n// \\\"o\\\" is duplicated 1 extra time and \\\"l\\\" is duplicated 2 extra times.\\n// Hence 1 + 2 = 3\\n\\nduplicates(\\\"foobar\\\") ➞ 1\\n\\nduplicates(\\\"helicopter\\\") ➞ 1\\n\\nduplicates(\\\"birthday\\\") ➞ 0\\n// If there are no duplicates, return 0\\n```\\n\\n### Notes\\nMake sure to only start counting the second time a character appears.\",\"isHidden\":false,\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n  @Test\\n  public void test1() {\\n    assertEquals(3, Challenge.duplicates(\\\"Hello World!\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test2() {\\n    assertEquals(0, Challenge.duplicates(\\\"birthday\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test3() {\\n    assertEquals(1, Challenge.duplicates(\\\"helicopter\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test4() {\\n    assertEquals(1, Challenge.duplicates(\\\"foobar\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test5() {\\n    assertEquals(14, Challenge.duplicates(\\\"The Quick Brown Fox Jumps Over the Lazy Dog\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test6() {\\n    assertEquals(1, Challenge.duplicates(\\\"donald trump\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test7() {\\n    assertEquals(77, Challenge.duplicates(\\\"Row, row, row your boat Gently down the stream Merrily merrily, merrily, merrily Life is but a dream.\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test8() {\\n    assertEquals(45, Challenge.duplicates(\\\"Gen'rals gathered in their masses,Just like witches at black masses\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test9() {\\n    assertEquals(43, Challenge.duplicates(\\\"Evil minds that plot destruction,Sorcerer of death's construction\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test10() {\\n    assertEquals(0, Challenge.duplicates(\\\"gamer\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test11() {\\n    assertEquals(3, Challenge.duplicates(\\\"gamer gang\\\"));\\n  }\\n}\",\"language\":\"java\",\"summary\":\"Create a function that returns the amount of duplicate characters in a string. It will be case sensitive and spaces are included. If there are no duplicates, return 0.\\n\\nExamples\\nduplicates(\\\"Hello World!\\\") ➞ 3\\n// \\\"o\\\" = 2, \\\"l\\\" = 3.\\n// \\\"o\\\" is duplicated 1 extra time and \\\"l\\\" is duplicated 2 extra times.\\n// Hence 1 + 2 = 3\\n\\nduplicates(\\\"foobar\\\") ➞ 1\\n\\nduplicates(\\\"hel\",\"tags\":[\"arrays\",\"strings\",\"loops\"],\"timestamp\":{\"$date\":1575579891624},\"title\":\"Count the Number of Duplicate Characters\",\"stats\":{\"completed\":{\"total\":239,\"ratings\":[1,1,1,1,1,2,0,1,2,2,1,1,2,2,2,2,2,1,2,1,2,2,2,2,1,2,2,1,0,2,1,2,3,2,2,2,1,2,1,0,0,1,0,2,3,0,1,1,2,2,1,2,2,2,2,1,1,1,1,1,1,0,2,1,0,2,1,2,2,1,2,1,1,0,1,2,1,1,2,2,2,0,0,2,1,2,1,2,0,2,2,2,2,0,0,2,2,2,2,2,2,2,1,2,2,1,2,1,2,2,0,0,0,2,1,2,0,1,2,1,2,2,2,0,3,2,2,1,1,3,2,2,0,3,3,2,1,3,2,0,1,2,2,2,1,1,2,1,3,2,2,1,0,2,2,2,2,2,1,1,1,2,2,2,2,2,1,2,4,5,2,2,1,2,2,2,1,2],\"rators\":[\"sxci7DYKNa6q22Sjq\",\"3gxJoNp59B4eoyyed\",\"phA6MomRzh9oz3eqn\",\"79ZbLzp7xepvkonoh\",\"Yohr2MmAyaWGMbB35\",\"NCB3RaRBonefnHBJD\",\"a49eNnfRwSMxsDJXf\",\"rMmLys7TPCegk822Y\",\"D3ASM3aWpcQ8gvnin\",\"LFJatcgKXuvFiNcFs\",\"ZsLgSw9LQTtkHZM8b\",\"o2F4ykzNB5etBnuY9\",\"vRXuYYBNuHEQ29fbm\",\"HsFc9PgmpP2X9Fwh9\",\"xBWjbtgEzZkxwqqAp\",\"r9hHZYPQAqJ9DbwLX\",\"57T2MHQHqmkSiqpAE\",\"gB4Nh3ovMF9bjwWpZ\",\"5MuT2gPpME6LbfwoY\",\"fxaS5K7ZXo4FbTe36\",\"3KjxQu9RZ8ZSywvLz\",\"u4yanfWeeZsN3xWgc\",\"8JyqsSbN2FJXPr3cw\",\"J9zJq7PMGb6mqzcHW\",\"Es4eX2stRpyoXeC7f\",\"2cdvd8yuPLSwvGj9w\",\"qEGfmqbNLrs2Qrva8\",\"AyrEvM2GLX2jqM772\",\"C9yBWYcZsjmJYww3K\",\"4RHx3H8EwP2oboW8e\",\"bsXDWXhsuqgaZYCCv\",\"mRwxbzaBc4Fg5q9Hw\",\"JFodQijHHdRkkrZvT\",\"9gJsF5apWJGWZJprn\",\"eJxMBZBhiHyJYWkH2\",\"8J2Dqqz9PaFufQzwY\",\"mt4kmXdCCGcbatAaZ\",\"82weQfHHmno4Mq4X7\",\"5QgW28KKwCyASdmLQ\",\"TxD5qx2hqQa6pixAP\",\"fZjkX29nhRTWWb75k\",\"hB5mgzMwQSnhBzi7P\",\"YLwJkF2wuL3n9o6a2\",\"Kso7rzAKB4TTCPKgM\",\"mfm3gB39arY8Rjb2y\",\"5seiNqw6ZXoF2GRRd\",\"jyoLggHk8xQKZuoQC\",\"TrquEHytntLKHA4m2\",\"uYv96ZSpA7tBHoAGX\",\"8zZ6xmzpiFair25qr\",\"WZujpe8yQAyZmpWHg\",\"jDTGwryGygbZiqCEg\",\"etoSR23iELGGgs9rA\",\"htXCitorobtqYymjN\",\"meS77LKqRswhF5LAy\",\"oMLSgpSFQnY4ui8cB\",\"B4pxRqzo43M7S8FbP\",\"Ctuq7Wc8QPQmzwPK3\",\"Yp7uvStL97cC9fKkY\",\"cjxsqXfkAPoadmppi\",\"RWqwvDdMSWctvc8eJ\",\"y6kfyYmydcD8tkBk7\",\"DzvdGwHEjqsX7wyKr\",\"Yom3RzkMYpweE8cbS\",\"NsQ8qYQQ47gSPtQkK\",\"rvojHhKH3DaxotefQ\",\"DkSMZ3jZLkwviKb9g\",\"irDgkguQ8h8SPTx8o\",\"9pCPyhvQmbkWyD2LL\",\"SY5wqJS9RJYYMJ6sy\",\"mAwnTjFhygFB4MdeL\",\"ZMZXaTqcALZ3wLvgg\",\"rA5nhfhFwfqvmJb6M\",\"BRzerJQioJWheRd9r\",\"q2tzvkrLASvSjkek9\",\"ekrDLd4fZkcMgfXwD\",\"zwruFCmuHkwJTpYqg\",\"pBMXMQem6BpSeooYT\",\"RNayPYK5a3jQw5jAc\",\"FJzZTZo7CmAyN5ajr\",\"9h3frmPaLDeZMvoKW\",\"MCw7uAcoWcSTBTmr3\",\"bP6JfCue3pYuzjgwZ\",\"4CryJmbEsruAELrDt\",\"2Qg8Wk7FoqP8BH6su\",\"hx3ZWiCKNtqwMWFCt\",\"KxLMWekCxzy2Eem7u\",\"5WQZzuHZBGqFeNQi3\",\"muXMnzQwGLzN6j2Jr\",\"g4NCSxxHqHCGMpWwT\",\"54ph2YMJkvCcCz33j\",\"rxdwKxHFova7j9Q7i\",\"GamaMNrnhrjj5tXTx\",\"9rK2eEYTWWduLHG97\",\"B59ANYuNBPaEhMJGq\",\"Ddj8RHEHYRJTcAwa2\",\"xeYtKtzKFm5RvEXMr\",\"QnMJpQ9efTeuR7uiG\",\"jRqY4i8gPemsZMBGf\",\"k2tXkx7AyX77tQDRo\",\"YcjwCvYut6834Jzd8\",\"ck3hNJMAZn4esHvYT\",\"Fd9765rksgPK4E2Zy\",\"YFHkjbM6obMSj24zi\",\"Moa2JSbg9NjdbcAoG\",\"rWhXHhzF4W8bea6LP\",\"AeJSxRqw2dJZuGvdk\",\"vfrmS4AEwWKrh8j2D\",\"i6djEp3SMRGHryCpH\",\"yv7c4H2jimSKHEjtG\",\"8c8P2NGJisyn2QepD\",\"fRYcPHuyEdqngMzC4\",\"jb9RLyyuo565bKDzN\",\"yHvCCNugSDhWTmiEJ\",\"zTEKMLMevG8xfxEj6\",\"xdS2Wao3BYiWTo4H2\",\"gpd8yji9GXJruAtje\",\"QJWWgtwpAXay452XH\",\"Rn5YNvYdY468a7vRp\",\"Eog3hCNjLgjsAGTCG\",\"oMZovHkR6QqNvQwyc\",\"yd5PakB2z33q2JrTZ\",\"vnY2TascSWCuzAy4P\",\"ws52k8ttSDzzNqn8i\",\"yXGiiSAR5nBHnH3yr\",\"qc2ZeEukFgwoa29iC\",\"gXTAie79kiw28tx5u\",\"SCc4sreJp5LJddwYy\",\"J7epB3qSQJ2E8vWkY\",\"3GAHtEe5sPNEKNy6J\",\"kabqCExooax4JEQHE\",\"rXgnzn3u6nrMc3X58\",\"gA2cPpSeJyedSDaTT\",\"MEHJi7ABoFJi3rPa4\",\"uozaSJRDCJQ8kF7cw\",\"xccpBNqmFPiimbfe7\",\"KJMBTeBB8CW3x7DRG\",\"YxDsYrrk4Sa6rZwyC\",\"THTnW75kBggw2qqta\",\"84snFPrYSXkECLQkC\",\"RQL2PAWda9Bh79GNi\",\"GiqPq82is4HGWdZHA\",\"thA79neuEcM3J8ZHr\",\"CSFyTcx8T5gM2iD5j\",\"3uBTPjN6mDavuBYmt\",\"gBGjCfJvPHswDM5JQ\",\"oMfq73A434YWhSuWQ\",\"mG8HqKiAQFTdRZthG\",\"9qgzstnjWXe7aMKEq\",\"P5BhjZxyeHQYTNyB9\",\"jhEgpqsboiWai8sLJ\",\"PzaWcT7vazN7eQ86Q\",\"8Xx8nWXRydHDBGfQf\",\"MXcqdhhv6Dz6NQaNe\",\"rGpPd6PvpzLaqps4g\",\"ESxQrnn85BzHXwBrc\",\"hDeaTsprkH6CmvSAR\",\"BWqQ68pvNedARDcBN\",\"a777e8chPvJkY3tKa\",\"unNqQjSHzkb4pCzEu\",\"udHFfcqNNej6udnpP\",\"SfmXqCfDksMb883DC\",\"W56bWmpQeLJ9JEDsa\",\"a5Y8ZA5qq2eupPK65\",\"62qNJjtmkRYvX5kKB\",\"RGN3QTb5LXj4ZPPkj\",\"pi76g3eRpnKrhee2a\",\"9AW9qZKgc8Qx2kYAP\",\"9vyjn4WyWtJ6o2wop\",\"E2hpke7mHxAWsw5t9\",\"GkYtSbQuheBF4Enys\",\"QRv96jmNaYsWkxQEG\",\"Po3v3dHCk6wYGKMwi\",\"eQXwk5zGckM8tCWYH\",\"bur3yQ8s34zqKGEro\",\"buX4mCQhtXCfBjeno\",\"zZfMwLuoERGmybgib\",\"hhxjQREtmHSheH9Pj\",\"nHj7SC5cnmkTApbgY\",\"a6fgDQTddtZCKfnzR\",\"SE5G2Caf3btnuGmz6\",\"BzgyCPDq4gRQquz49\",\"QaR2F4pzXCGK6LQx9\",\"Tz8TGTQnjWz8STkhs\",\"KTY8aQoNxWFSJdGAx\",\"txArt4JLGHZHT5cS6\",\"wYYMNPe8nSiJFbvJw\",\"Ag5fRrZ9MrAZc9vpj\",\"BmNAz8xvkXgvNAgrE\",\"4ySzqKC5s3ZRpG9di\",\"tdxi2QkC26vf5P3vG\",\"bwpMGvsPjd72FS2Dh\",\"pFMEy8z5h7A9yRW7a\",\"TRwXSJ2NtpidWtChz\",\"BnaE25vvCGcfL3jiQ\",\"fiyJkMrHgtkAzCPvA\",\"btabi3PdyisuY5tn9\",\"T8479JykunbgzEMrX\",\"g6TTfNoMw4WvaZjgv\",\"wJTs23ZdfBqWKxoBb\",\"dik7wis3hBJJBkYwK\",\"HXbTKW3jmmyRAsKrr\",\"rhS8qXRjZcpDXkwnE\",\"xEX3TDY6C2h82dJTn\",\"uw47663LqPME8btaA\",\"TCvpT4EPb8qNssNB7\",\"FSSM3xcaTXGcxqYGz\",\"srJ34BaybkQh3qRkM\",\"TmRJTu98ZhuoJoWEZ\",\"ewPGFzszLXygWHMET\",\"wFRLGjA56kj7xyhmv\",\"jibyTzX3NgqiqzXr6\",\"J2eYYhAEwbNQLwkR6\",\"LprzHKvq4gsTnarDR\",\"jCjCvyhqhpebkJn34\",\"KMR6vNzvSKMA2cXnK\",\"Dxk4GozARkHu66BNh\",\"JJFPy22rhWmioEDwN\",\"unqzSsxpxj9sZ7rbD\",\"Qv2jEtTnFCXX7cdd3\",\"XH6378Zm3WBm679yx\",\"nFbmNzMQ38TncmfQX\"],\"quality\":[3,5,3,5,5,5,4,5,5,5,5,3,5,4,5,5,5,5,5,5,5,5,5,4,5,5,4,5,4,5,4,5,5,5,5,5,5,5,5,5,5,4,5,5,5,4,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"J74DckDe4qdcCTxfL\",\"quality\":4.714285714285714,\"family\":[{\"_id\":\"SS2T2QAsf5jWWZJ24\",\"language\":\"cpp\"},{\"_id\":\"zmbR8SKveCgJ6KB5G\",\"language\":\"java\"},{\"_id\":\"7T2ytDgjgsh9CMq6D\",\"language\":\"javascript\"},{\"_id\":\"mgBdGGw7StxF2tBqu\",\"language\":\"python3\"},{\"_id\":\"Jy2FmSTp3auxBCyok\",\"language\":\"ruby\"}]}}"]