a["{\"msg\":\"result\",\"id\":\"831\",\"result\":{\"_id\":\"745DLsFEmEQqdA6m3\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class ElevenTimes {\\n  public static String multiplyBy11(String n) {\\n\\t\\t// recursive code here\\n\\t}\\n}\",\"difficulty\":3.875,\"familyId\":\"f2L9aTQPqAsxHpb7F\",\"instructions\":\"Given a **positive** number as a string, multiply the number by **11** and also return it as a **string**. However, there is a catch:\\n\\n**You are NOT ALLOWED to simply cast the numeric string into an integer!**\\n\\nNow, how is this challenge even possible? Despite this, there is still a way to solve it, and it involves thinking about how someone might multiply by 11 in their head. See the tips below for guidance.\\n\\n### Examples\\n```\\nmultiplyBy11(\\\"11\\\") ➞ \\\"121\\\"\\n\\nmultiplyBy11(\\\"111111111\\\") ➞ \\\"1222222221\\\"\\n\\nmultiplyBy11(\\\"1213200020\\\") ➞ \\\"13345200220\\\"\\n\\nmultiplyBy11(\\\"1217197941\\\") ➞ \\\"13389177351\\\"\\n\\nmultiplyBy11(\\\"9473745364784876253253263723\\\") ➞ \\\"104211199012633638785785900953\\\"\\n```\\n\\n### Tip\\nThere is a simple trick to multiplying any two-digit number by 11 in your head:\\n\\n1. Add the two digits together\\n2. Place the sum between the two digits!\\n3. Note if the total goes over, carry the sum on to the next digit\\n\\n```\\n// 23 * 11\\n// Add together 2 and 3 to make 5\\n// Place 5 between the two digits to make 253\\n```\\n\\n```\\n// 77 * 11\\n// Add together 7 and 7 to make 14\\n// Place 4 between the two digits to make 747\\n// Carry the 1 to make 847\\n```\\n\\n### Notes\\n- Check out this [resource](https://trachtenbergspeedmath.com/multiplication/basic-multiplication/multiplying-by-eleven/) to find out how this process can be utilized for numbers of any length.\\n- This challenge was heavily inspired by **Mubashir Hassan**'s [challenge](https://edabit.com/challenge/aHGLnfW7xdMrhJZpo) on adding two numbers together.\\n- You are expected to solve this challenge **recursively**.\\n- An **iterative** versioin of this challenge can be found via this [link](https://edabit.com/challenge/m8TRkJiYwahSR58dX).\\n- A **collection** of challenges in recursion can be found via this [link](https://edabit.com/collection/Yx78jEBrKppHBNsoQ).\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"import static org.junit.Assert.assertEquals; \\nimport org.junit.Test; \\n\\npublic class ElevenTimesTest {\\n\\t\\n\\t@Test\\n\\tpublic void test01() {\\n\\t\\tassertEquals(\\\"121\\\", ElevenTimes.multiplyBy11(\\\"11\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertEquals(\\\"1247774\\\", ElevenTimes.multiplyBy11(\\\"113434\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertEquals(\\\"1222222221\\\", ElevenTimes.multiplyBy11(\\\"111111111\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertEquals(\\\"13345200220\\\", ElevenTimes.multiplyBy11(\\\"1213200020\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertEquals(\\\"13389177351\\\", ElevenTimes.multiplyBy11(\\\"1217197941\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertEquals(\\\"135802468864197531\\\", ElevenTimes.multiplyBy11(\\\"12345678987654321\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertEquals(\\\"104211199012633638785785900953\\\", ElevenTimes.multiplyBy11(\\\"9473745364784876253253263723\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertEquals(\\\"635783230909890532314447724963988510927543384582233109612769192056405578275705998540420364959788789519053403744017934787457261267552542543285435656175662404183030348849574039872257773944086571190888786847074756786564518203896815761793024453765630446693432922890436114349336495211031758681811992188070207300537435692693433611568697667003564013046540716780092199075001026112195705800164620258745160401995730248179648572857445719902139747183174704337379031002152460961006074198559739469164047819604029384\\\", ElevenTimes.multiplyBy11(\\\"57798475537262775664949793178544410084322125871112100873888108368764143479609636230947305905435344501732127613092539526132478297050231140298675968743242036743911849895415821806568888540371506471898980622461341526051319836717892341981184041251420949699402992990039646759030590473730159880164726562551837027321585062972130328324427060636687637549685519707281109006818275101108700527287692750795014581999611840743604415714313247263830886107561336757943548272922950996455097654414521769924004347236729944\\\"));\\n\\t}\\n}\",\"language\":\"java\",\"quality\":0,\"summary\":\"Given a positive number as a string, multiply the number by 11 and also return it as a string. However, there is a catch:\\n\\nYou are NOT ALLOWED to simply cast the numeric string into an integer!\\n\\nNow, how is this challenge even possible? Despite this, there is still a way to solve it, and it involves thinking about how someone might multiply by 11 in their head\",\"tags\":[\"recursion\",\"strings\",\"logic\",\"math\",\"numbers\"],\"timestamp\":{\"$date\":1606936919439},\"title\":\"Recursion: Multiply By 11\",\"stats\":{\"completed\":{\"total\":7,\"ratings\":[4,4,4,4,4,4,5,2],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"Es4eX2stRpyoXeC7f\",\"gXTAie79kiw28tx5u\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"745DLsFEmEQqdA6m3\",\"language\":\"java\"},{\"_id\":\"DQKQ4N87t2aN5NDX6\",\"language\":\"javascript\"},{\"_id\":\"rX9ZdzWuj3ZbyCCd5\",\"language\":\"python3\"}]}}"]