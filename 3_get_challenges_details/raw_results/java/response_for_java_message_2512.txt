a["{\"msg\":\"result\",\"id\":\"807\",\"result\":{\"_id\":\"iY6e9fMQSWi38J699\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class Phrase {\\n\\tpublic static boolean isPalindrome(String phrase) {\\n\\t\\t// recursive code here\\n\\t}\\n}\",\"difficulty\":3.588235294117647,\"editorId\":\"a777e8chPvJkY3tKa\",\"familyId\":\"G9vRTHbTdfsfxqe75\",\"instructions\":\"A **palindrome** is a series of letters or numbers that reads _equivocally_ backwards.\\n\\nWrite a **recursive** function that determines whether a given string is a **palindrome** or not.\\n\\n### Examples\\n```\\nisPalindrome(\\\"Maneuquenam\\\") ➞ true\\n\\nisPalindrome(\\\"This phrase, surely, is not a palindrome!\\\") ➞ false\\n\\nisPalindrome(\\\"Eva, can I see bees in a cave?\\\") ➞ true\\n```\\n\\n### Notes\\n- Symbols and special characters should be ignored.\\n- You are expected to solve this challenge via **recursion**.\\n- You can check on the **Resources** tab for more details about *recursion* in Java.\\n- A **collection** of challenges in _recursion_ can be found via this [link](https://edabit.com/collection/Yx78jEBrKppHBNsoQ).\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"/** \\n================================= \\nTestGen 3.1 for JUnit 4.13.0 \\t\\t\\nTest Case: Phrase::isPalindrome \\nTimestamp: 10/19/2020 05:11:24 PM \\n--------------------------------- \\n® DARKKO 2021 © \\n================================= \\n\\n**/ \\n\\nimport static org.junit.Assert.assertEquals; \\nimport org.junit.Test; \\n\\npublic class PhraseTest { \\n\\t\\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertEquals(true, Phrase.isPalindrome(\\\"Maneuquenam\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertEquals(false, Phrase.isPalindrome(\\\"Not a palindrome\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertEquals(true, Phrase.isPalindrome(\\\"A man, a plan, a cat, a ham, a yak, a yam, a hat, a canal-Panama!\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertEquals(true, Phrase.isPalindrome(\\\"Go hang a salami, I'm a lasagna hog!\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertEquals(false, Phrase.isPalindrome(\\\"This phrase is really this!\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertEquals(true, Phrase.isPalindrome(\\\"Red rum, sir, is murder.\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertEquals(true, Phrase.isPalindrome(\\\"Big step on no pets, Gib!\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertEquals(false, Phrase.isPalindrome(\\\"One true fortune, but no!\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test09() { \\n\\t\\tassertEquals(true, Phrase.isPalindrome(\\\"Don't nod.\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() { \\n\\t\\tassertEquals(true, Phrase.isPalindrome(\\\"I did, did I?\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test11() { \\n\\t\\tassertEquals(true, Phrase.isPalindrome(\\\"My gym.\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test12() { \\n\\t\\tassertEquals(true, Phrase.isPalindrome(\\\"Top spot.\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test13() { \\n\\t\\tassertEquals(true, Phrase.isPalindrome(\\\"Was it a cat I saw?\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test14() { \\n\\t\\tassertEquals(true, Phrase.isPalindrome(\\\"No lemon, no melon.\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test15() { \\n\\t\\tassertEquals(true, Phrase.isPalindrome(\\\"Eva, can I see bees in a cave?\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test16() { \\n\\t\\tassertEquals(false, Phrase.isPalindrome(\\\"Can I be iconic?\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test17() { \\n\\t\\tassertEquals(true, Phrase.isPalindrome(\\\"Madam I'm Adam.\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test18() { \\n\\t\\tassertEquals(false, Phrase.isPalindrome(\\\"The man on the moon are them.\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test19() { \\n\\t\\tassertEquals(true, Phrase.isPalindrome(\\\"Sit on a potato pan, Otis.\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test20() { \\n\\t\\tassertEquals(false, Phrase.isPalindrome(\\\"Truly, a classic cadillac!\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test21() { \\n\\t\\tassertEquals(true, Phrase.isPalindrome(\\\"Able was I, ere I saw Elba.\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test22() { \\n\\t\\tassertEquals(true, Phrase.isPalindrome(\\\"Step on no pets!\\\"));\\n\\t}\\n\\n}\\n// end of tests\",\"language\":\"java\",\"quality\":0,\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,5,5,1,5,5,2,4,2,1,0,1,5],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"Es4eX2stRpyoXeC7f\",\"rehehi2Tr2mwaEoJE\",\"Ym8AjbKGSJooun3nt\",\"RQL2PAWda9Bh79GNi\",\"gXTAie79kiw28tx5u\",\"H5KSDzxwGtgftsuik\",\"rhS8qXRjZcpDXkwnE\",\"K7W5sFbjXM8rCfPAJ\",\"64AQzBJ46kXHo7Y4p\",\"QY7JonwvoRiopwHRn\",\"oHix6dYoqt5RQnxty\"],\"total\":17},\"flags\":0},\"summary\":\"A palindrome is a series of letters or numbers that reads equivocally backwards.\\n\\nWrite a recursive function that determines whether a given string is a palindrome or not.\\n\\nExamples\\nisPalindrome(\\\"Maneuquenam\\\") ➞ true\\n\\nisPalindrome(\\\"This phrase, surely, is not a palindrome!\\\") ➞ false\\n\\nisPalindrome(\\\"Eva, can I see bees in a cave?\\\") ➞ true\\n\\nNotes\\nSymbols and spec\",\"tags\":[\"recursion\",\"strings\",\"validation\",\"logic\"],\"timestamp\":{\"$date\":1602330478285},\"title\":\"Recursion: Palindrome Phrase\",\"family\":[{\"_id\":\"iY6e9fMQSWi38J699\",\"language\":\"java\"},{\"_id\":\"NmmKFQWA9dzWz5can\",\"language\":\"javascript\"},{\"_id\":\"yiEHCxMC9byCqEPNX\",\"language\":\"python3\"}]}}"]