a["{\"msg\":\"result\",\"id\":\"490\",\"result\":{\"_id\":\"bfAeRfKacFSLuuXjv\",\"author\":\"Loading\",\"authorId\":\"ydos8Ba8nZdYRNJpS\",\"code\":\"public class Challenge {\\n  public static boolean isMagicSquare(int[][] square) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":1.7738095238095237,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"5A9PXKwturB6EJDH7\",\"instructions\":\"A \\\"magic square\\\" is a square divided into smaller squares each containing a number, such that the numbers in each vertical, horizontal, and diagonal row add up to the same value.\\n\\n![3x3 Magic Square](https://edabit-challenges.s3.amazonaws.com/3x3magicsquare.png \\\"3x3 Magic Square\\\")\\n\\nWrite a function that takes a 2D array, checks if it's a magic square and returns either `true` or `false` depending on the result.\\n\\n### Examples\\n```\\nisMagicSquare([\\n  [8, 1, 6],\\n  [3, 5, 7],\\n  [4, 9, 2]\\n]) ➞ true\\n\\nisMagicSquare([\\n  [16,  3,  2, 13],\\n  [ 5, 10, 11,  8],\\n  [ 9,  6,  7, 12],\\n  [ 4, 15, 14,  1]\\n]) ➞ true\\n\\nisMagicSquare([\\n  [1, 2, 3],\\n  [4, 5, 6],\\n  [7, 8, 9]\\n]) ➞ false\\n```\\n\\n### Notes\\n- Check diagonals as well.\\n- Test input will always be square.\\n- Check the **Resources** tab for additional info on magic squares.\",\"lab\":\"import static org.hamcrest.core.Is.is;\\nimport org.junit.Test;\\nimport static org.junit.Assert.assertThat;\\n\\npublic class ChallengeTests {\\n\\t@Test\\n\\tpublic void test1() {\\n\\t\\tassertThat(Challenge.isMagicSquare(\\n\\t\\t\\tnew int[][] {\\n\\t\\t\\t\\tnew int[] {8, 1, 6},\\n\\t\\t\\t\\tnew int[] {3, 5, 7},\\n\\t\\t\\t\\tnew int[] {4, 9, 2}\\n\\t\\t\\t}), is(true));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test2() {\\n\\t\\tassertThat(Challenge.isMagicSquare(\\n\\t\\t\\tnew int[][] {\\n\\t\\t\\t\\tnew int[] {16, 3, 2, 13},\\n\\t\\t\\t\\tnew int[] {5, 10, 11, 8},\\n\\t\\t\\t\\tnew int[] {9, 6, 7, 12},\\n\\t\\t\\t\\tnew int[] {4, 15, 14, 1}\\n\\t\\t\\t}), is(true));\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test3() {\\n\\t\\tassertThat(Challenge.isMagicSquare(\\n\\t\\t\\tnew int[][] {\\n\\t\\t\\t\\tnew int[] {1, 2, 3},\\n\\t\\t\\t\\tnew int[] {4, 5, 6},\\n\\t\\t\\t\\tnew int[] {7, 8, 9}\\n\\t\\t\\t}), is(false));\\n\\t}\\n}\",\"language\":\"java\",\"stats\":{\"completed\":{\"ratings\":[0,0,0,0,0,2,2,0,2,2,3,2,3,1,3,2,2,3,2,2,2,2,0,2,1,3,3,1,2,1,1,2,1,3,2,3,2,2,3,1,2,0,2,1,2,2,2,1,0,5,1,1,2,2,1,0,0,3,2,2,2,2,1,3,2,2,2,2,0,3,3,2,2,2,1,2,2,2,2,4,3,2,2,2],\"rators\":[\"ydos8Ba8nZdYRNJpS\",\"uHiWaYZKT5iCJtLr4\",\"a49eNnfRwSMxsDJXf\",\"JSSLvJPs8JebyfeS9\",\"qGFqqzbwxiz7kZkPW\",\"WAMxBrgasiphg5QPL\",\"5znpaFDoToJtAtF3h\",\"aMNhTh35QQAs33ycQ\",\"EP6PPx5PntGnttWxb\",\"7nvtCJLANKdzgjryY\",\"n58FsZcd8vamq2zio\",\"EmswjGvFvYRubgZk7\",\"sxci7DYKNa6q22Sjq\",\"qvuBh3w84NuQTXMdZ\",\"9c8n7ti5vCjTRgiGN\",\"t2kdBPj9qQAXY2Ehd\",\"YWnFYSYAv4jbY4Mmc\",\"3gxJoNp59B4eoyyed\",\"NWDyTvYzhYGg3nWmo\",\"ZBDiEMi7dbjRL55LB\",\"cG4PEDMMx8jXhWP8T\",\"tmcjBArYTgRPxCWpM\",\"EQA7goKX8ssgyNf5T\",\"phA6MomRzh9oz3eqn\",\"3KjxQu9RZ8ZSywvLz\",\"Xwu7yQJzMsErCa9X7\",\"r9hHZYPQAqJ9DbwLX\",\"J9zJq7PMGb6mqzcHW\",\"cfi8jhhSJ3Nq2gvqf\",\"YLqdr7bYjwew2KM4N\",\"AyrEvM2GLX2jqM772\",\"AvEiDZKLHCEQ6n9Ma\",\"ko7oJ85JMftgcbkrr\",\"Es4eX2stRpyoXeC7f\",\"D7dpRtRQDmteDSAXv\",\"wYYMNPe8nSiJFbvJw\",\"8J2Dqqz9PaFufQzwY\",\"cGebawowzCKcFn8gq\",\"eJxMBZBhiHyJYWkH2\",\"8tujqLqi5XWe2vry8\",\"hB5mgzMwQSnhBzi7P\",\"Kso7rzAKB4TTCPKgM\",\"5seiNqw6ZXoF2GRRd\",\"fZjkX29nhRTWWb75k\",\"jyoLggHk8xQKZuoQC\",\"WZujpe8yQAyZmpWHg\",\"etoSR23iELGGgs9rA\",\"TrquEHytntLKHA4m2\",\"2b6HF4pYFGfAgxiut\",\"y6kfyYmydcD8tkBk7\",\"TBamPvEAh6xARn8Kd\",\"pBMXMQem6BpSeooYT\",\"QKFydGwTvCNKriqiG\",\"jRqY4i8gPemsZMBGf\",\"j428nMyNKY8g2dcCi\",\"ZPNk8KwpqXDgu3ALt\",\"5p6bwXayfAp7Y4WQ7\",\"qraDA47Ewou5mzvrL\",\"sJaSeR649EEMX9F4v\",\"kiRkuN7JXqvWBa4SG\",\"MCjdtAAjL6sGLukPr\",\"87otmbdqNT3bHsQFu\",\"R24BMWbTh8rzh5zaw\",\"g4NCSxxHqHCGMpWwT\",\"k2tXkx7AyX77tQDRo\",\"tQpqgmffciSwERtsf\",\"us3vKpDScdvXTHvb2\",\"aH9yER5QQ4bFBN8SR\",\"rvojHhKH3DaxotefQ\",\"MBEwq8srjd2oA5W58\",\"82weQfHHmno4Mq4X7\",\"YFHkjbM6obMSj24zi\",\"yXGiiSAR5nBHnH3yr\",\"gXTAie79kiw28tx5u\",\"jXTnL3JatkKjoifyb\",\"zbP2a97teg8aETaXu\",\"p8qqFdJ3FSk5x9z3G\",\"rhS8qXRjZcpDXkwnE\",\"mG8HqKiAQFTdRZthG\",\"KMR6vNzvSKMA2cXnK\",\"htXCitorobtqYymjN\",\"unqzSsxpxj9sZ7rbD\",\"PJu3WcTpfRrvHfQiS\",\"tbnSLndmZ9nGZSvfT\",\"XqijAorPxipWAK5MA\"],\"total\":97,\"quality\":[4,5,4,4,3,5]},\"flags\":0},\"subscribers\":[\"ydos8Ba8nZdYRNJpS\"],\"summary\":\"A \\\"magic square\\\" is a square divided into smaller squares each containing a number, such that the numbers in each vertical, horizontal, and diagonal row add up to the same value.\\n\\n3x3 Magic Square\\n\\nWrite a function that takes a 2D array, checks if it's a magic square and returns either true or false depending on the result.\\n\\nExamples\\nisMagicSquare([\\n  [8, 1, 6\",\"tags\":[\"algorithms\",\"arrays\",\"data_structures\",\"loops\"],\"timestamp\":{\"$date\":1562415848079},\"title\":\"Check Magic Square\",\"isHidden\":false,\"quality\":4.166666666666667,\"family\":[{\"_id\":\"YeXxyKD5DHMnQc3Yh\",\"language\":\"cpp\"},{\"_id\":\"bfAeRfKacFSLuuXjv\",\"language\":\"java\"},{\"_id\":\"iYcNv2tDvNgnSsG9S\",\"language\":\"javascript\"},{\"_id\":\"xiB2Y4EzEEkXYQchs\",\"language\":\"python3\"},{\"_id\":\"wKzCRHDJbPr2gJKs3\",\"language\":\"ruby\"}]}}"]