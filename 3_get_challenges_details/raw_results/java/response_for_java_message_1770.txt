a["{\"msg\":\"result\",\"id\":\"443\",\"result\":{\"_id\":\"XuhT6hazGTL9c4bwE\",\"author\":\"Mateusz Mędrowski\",\"authorId\":\"hPx9H3YM8j2k94DNW\",\"code\":\"public class Challenge {\\n  public static double lineLength(int[][] point) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":1.619047619047619,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"4mRHKZpHFL3fFPHH6\",\"instructions\":\"Write a function that takes coordinates of two points on a two-dimensional plane and returns the length of the line segment connecting those two points.\\n\\n### Examples\\n```\\nlineLength(arr[0]={15, 7}, arr[1]={22, 11}) ➞ 8.06\\n\\nlineLength(arr[0]={0, 0}, arr[1]={0, 0}) ➞ 0\\n\\nlineLength(arr[0]={0, 0}, arr[1]={1, 1}) ➞ 1.41\\n```\\n\\n### Notes\\n- The numbers in the argument array can be positive or negative.\\n- The order of the given numbers is X, Y.\\n- There is 0.1 tolerance so you don't need to round your result.\\n- This challenge is easier than it looks.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n  @Test\\n  public void test1() {\\n\\t\\tint[][] arr = new int[2][2];\\n\\t\\tarr[0][0] = 15;\\n\\t\\tarr[0][1] = 7;\\n\\t\\tarr[1][0] = 22;\\n\\t\\tarr[1][1] = 11;\\n    assertEquals(8.06, Challenge.lineLength(arr),0.1);\\n  }\\n\\n\\t@Test\\n  public void test2() {\\t\\t\\n\\t\\tint[][] arr = new int[2][2];\\n\\t\\tarr[0][0] = 1;\\n\\t\\tarr[0][1] = 1;\\n\\t\\tarr[1][0] = 0;\\n\\t\\tarr[1][1] = 0;\\n    assertEquals(1.41, Challenge.lineLength(arr),0.1);\\n  }\\n\\n\\t@Test\\n  public void test3() {\\n    int[][] arr = new int[2][2];\\n\\t\\tarr[0][0] = -33;\\n\\t\\tarr[0][1] = 33;\\n\\t\\tarr[1][0] = 33;\\n\\t\\tarr[1][1] = -33;\\n    assertEquals(93.3, Challenge.lineLength(arr),0.1);\\n  }\\n\\n\\t@Test\\n  public void test4() {\\n\\t\\tint[][] arr = new int[2][2];\\n\\t\\tarr[0][0] = 1;\\n\\t\\tarr[0][1] = 2;\\n\\t\\tarr[1][0] = 3;\\n\\t\\tarr[1][1] = 4;\\n    assertEquals(2.82, Challenge.lineLength(arr),0.1);\\n  }\\n\\n\\t@Test\\n  public void test5() {\\n\\t\\tint[][] arr = new int[2][2];\\n\\t\\tarr[0][0] = 719;\\n\\t\\tarr[0][1] = 10;\\n\\t\\tarr[1][0] = -65;\\n\\t\\tarr[1][1] = 1;\\n    assertEquals(784.05, Challenge.lineLength(arr),0.1);\\n  }\\n\\n\\t@Test\\n  public void test6() {\\n\\t\\tint[][] arr = new int[2][2];\\n\\t\\tarr[0][0] = -11;\\n\\t\\tarr[0][1] = -12;\\n\\t\\tarr[1][0] = -13;\\n\\t\\tarr[1][1] = -14;\\n    assertEquals(2.82, Challenge.lineLength(arr),0.1);\\n  }\\n\\n\\t@Test\\n  public void test7() {\\n\\t\\tint[][] arr = new int[2][2];\\n\\t\\tarr[0][0] = 0;\\n\\t\\tarr[0][1] = 0;\\n\\t\\tarr[1][0] = 0;\\n\\t\\tarr[1][1] = 0;\\n    assertEquals(0, Challenge.lineLength(arr),0.1);\\n  }\\n}\",\"language\":\"java\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,1,3,4,2,0,2,2,1,0,2,4,1,0,2,1,2,2,2,1,1,0,2,1,2,1,1,2,1,1,1,2,2,2,1,2,2],\"rators\":[\"hPx9H3YM8j2k94DNW\",\"4RsakkyRXyYGwFxEa\",\"i3TRCkidxKop3WtE2\",\"jyoLggHk8xQKZuoQC\",\"aH9yER5QQ4bFBN8SR\",\"MBEwq8srjd2oA5W58\",\"Ym8AjbKGSJooun3nt\",\"ohsJnyfLcGDCWzEWM\",\"yv7c4H2jimSKHEjtG\",\"82weQfHHmno4Mq4X7\",\"b4ij7gud8eWptYib8\",\"3Hc9QM2feGNXQHfNC\",\"jNpjA7aEHotyGsyDp\",\"yT4jDYeZcEP4mwrvD\",\"ekPQ5TX8ePypSttjn\",\"yiHCqsJuZLL6eMNuF\",\"GxzTqpqNwnouPaJES\",\"ZgW8KbHPhP2ziczLd\",\"qaPjAANdnxFnWfj5d\",\"ZjnJqGADrPdKdcTjp\",\"gfT6pD7sw5gGgKTHq\",\"yXGiiSAR5nBHnH3yr\",\"Fdq6CxMWZL8WZiNaM\",\"Es4eX2stRpyoXeC7f\",\"gXTAie79kiw28tx5u\",\"a777e8chPvJkY3tKa\",\"etoSR23iELGGgs9rA\",\"8Xx8nWXRydHDBGfQf\",\"DzvdGwHEjqsX7wyKr\",\"jXTnL3JatkKjoifyb\",\"69K8S2NbzkqE9pAe5\",\"5f6oSeq4r5WTXLdCQ\",\"hhxjQREtmHSheH9Pj\",\"LFSASkxgw9hr3KqmC\",\"wgANZ5FLHh4iWu4Zy\",\"a49eNnfRwSMxsDJXf\",\"rhS8qXRjZcpDXkwnE\",\"RBjTdBYHmyoPMvAow\",\"buX4mCQhtXCfBjeno\",\"xEX3TDY6C2h82dJTn\",\"mG8HqKiAQFTdRZthG\",\"uw47663LqPME8btaA\",\"G4bm9KybYK5avPyaq\",\"srJ34BaybkQh3qRkM\",\"J9zJq7PMGb6mqzcHW\",\"htXCitorobtqYymjN\",\"sxci7DYKNa6q22Sjq\",\"KMR6vNzvSKMA2cXnK\",\"afvP29FhRou2bTaav\",\"rWhXHhzF4W8bea6LP\",\"PJu3WcTpfRrvHfQiS\",\"unqzSsxpxj9sZ7rbD\",\"23gxHrrXiriKXnggo\"],\"total\":60,\"quality\":[5,3,5,3,4,4,5,5,4,5,5,4,5,5,5,5]},\"flags\":0},\"summary\":\"Write a function that takes coordinates of two points on a two-dimensional plane and returns the length of the line segment connecting those two points.\\n\\nExamples\\nlineLength(arr[0]={15, 7}, arr[1]={22, 11}) ➞ 8.06\\n\\nlineLength(arr[0]={0, 0}, arr[1]={0, 0}) ➞ 0\\n\\nlineLength(arr[0]={0, 0}, arr[1]={1, 1}) ➞ 1.41\\n\\nNotes\\nThe numbers in the argument array can be posit\",\"tags\":[\"arrays\",\"geometry\",\"math\",\"numbers\"],\"timestamp\":{\"$date\":1598749241424},\"title\":\"Geometry 1: Length of Line Segment\",\"quality\":4.5,\"family\":[{\"_id\":\"aK3i4iC7cAyiYgFLh\",\"language\":\"cpp\"},{\"_id\":\"XuhT6hazGTL9c4bwE\",\"language\":\"java\"},{\"_id\":\"9a8rXCGo4JE36juoF\",\"language\":\"javascript\"},{\"_id\":\"3Ekam9jvbNKHDtx4K\",\"language\":\"python3\"},{\"_id\":\"RwDGHDuWqMRLCoT7d\",\"language\":\"ruby\"}]}}"]