a["{\"msg\":\"result\",\"id\":\"510\",\"result\":{\"_id\":\"EjQM5woRAhYEmuGFp\",\"author\":\"Edward Clark\",\"authorId\":\"3pdgguqZgNDSAJSGm\",\"code\":\"public class Challenge {\\n\\tpublic static boolean canPartition(int[] arr) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":2.058139534883721,\"familyId\":\"Xspw3uxQ9zjYCwfwg\",\"instructions\":\"Write a function that returns `true` if you can partition an array into **one element and the rest**, such that this element is equal to the **product** of all other elements **excluding itself**.\\n\\n### Examples\\n```\\ncanPartition([2, 8, 4, 1]) ➞ true\\n// 8 = 2 x 4 x 1\\n\\ncanPartition([-1, -10, 1, -2, 20]) ➞ false\\n\\ncanPartition([-1, -20, 5, -1, -2, 2]) ➞ true\\n```\\n\\n### Notes\\n- The array may contain duplicates.\\n- Multiple solutions can exist, any solution is sufficient to return `true`.\",\"lab\":\"import static org.hamcrest.core.Is.is;\\nimport org.junit.Test;\\nimport static org.junit.Assert.assertThat;\\n\\npublic class ChallengeTest {\\n\\t@Test\\n\\tpublic void test1() {\\n\\t\\tassertThat(Challenge.canPartition(new int[]{-1, -10, 1, -2, 20}), is(false));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test2() {\\n\\t\\tassertThat(Challenge.canPartition(new int[]{-1, -20, 5, -1, -2, 2}), is(true));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test3() {\\n\\t\\tassertThat(Challenge.canPartition(new int[]{2, 8, 4, 1}), is(true));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test4() {\\n\\t\\tassertThat(Challenge.canPartition(new int[]{1, 1, -1, 1}), is(false));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test5() {\\n\\t\\tassertThat(Challenge.canPartition(new int[]{-1, -1, 1, 1}), is(true));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test6() {\\n\\t\\tassertThat(Challenge.canPartition(new int[]{0, 5, 1, -1}), is(false));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test7() {\\n\\t\\tassertThat(Challenge.canPartition(new int[]{0, 1, 1, -1}), is(false));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test8() {\\n\\t\\tassertThat(Challenge.canPartition(new int[]{0, 1, 1, 1}), is(false));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test9() {\\n\\t\\tassertThat(Challenge.canPartition(new int[]{0, 0, 1, 1}), is(true));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() {\\n\\t\\tassertThat(Challenge.canPartition(new int[]{0, 0, 1}), is(true));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test11() {\\n\\t\\tassertThat(Challenge.canPartition(new int[]{0, 0, 0}), is(true));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test12() {\\n\\t\\tassertThat(Challenge.canPartition(new int[]{5, 5, 25, 100}), is(false));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test13() {\\n\\t\\tassertThat(Challenge.canPartition(new int[]{-1, 5, 20, 100}), is(false));            \\n\\t} \\n\\t@Test\\n\\tpublic void test14() {\\n\\t\\tassertThat(Challenge.canPartition(new int[]{1, 1, 1, 1}), is(true));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test15() {\\n\\t\\tassertThat(Challenge.canPartition(new int[]{-1, 1, -1}), is(true));            \\n\\t}\\n\\n\\t@Test\\n\\tpublic void test16() {\\n\\t\\tassertThat(Challenge.canPartition(new int[]{-1, 1, 1}), is(false));            \\n\\t}\\n}\",\"language\":\"java\",\"summary\":\"Write a function that returns true if you can partition an array into one element and the rest, such that this element is equal to the product of all other elements excluding itself.\\n\\nExamples\\ncanPartition([2, 8, 4, 1]) ➞ true\\n// 8 = 2 x 4 x 1\\n\\ncanPartition([-1, -10, 1, -2, 20]) ➞ false\\n\\ncanPartition([-1, -20, 5, -1, -2, 2]) ➞ true\\n\\nNotes\\nThe array may contain\",\"tags\":[\"arrays\",\"logic\",\"loops\"],\"timestamp\":{\"$date\":1570394846730},\"title\":\"Product of Remaining Elements\",\"stats\":{\"completed\":{\"total\":107,\"ratings\":[2,2,2,2,2,3,2,1,3,3,0,2,3,3,3,2,0,3,3,3,3,1,3,2,3,2,2,2,1,0,2,3,1,4,1,2,1,2,0,2,3,2,2,0,2,3,3,3,3,2,3,0,2,3,2,3,1,3,3,2,0,2,3,2,3,2,2,3,3,1,1,1,2,2,3,2,2,1,2,2,3,2,1,3,1,2],\"rators\":[\"3pdgguqZgNDSAJSGm\",\"sxci7DYKNa6q22Sjq\",\"iBki3wWmwK2M76qqp\",\"XTuxCoKrN9DZ7zaQx\",\"b6FsghMrEP6CuAPX4\",\"SnY7WidXJoAyyuPuA\",\"Ew5sDzszZKfm3ZKeT\",\"2NJuDfSqdrF8kHHni\",\"qRhXvCaA7qgDoeFnr\",\"fxaS5K7ZXo4FbTe36\",\"C52xaGKG56KaGPKcZ\",\"rehehi2Tr2mwaEoJE\",\"r9hHZYPQAqJ9DbwLX\",\"J9zJq7PMGb6mqzcHW\",\"yK7zzK2aGJwuWKHRL\",\"9aHkSrEhWL7Tp928N\",\"wYYMNPe8nSiJFbvJw\",\"AyrEvM2GLX2jqM772\",\"Es4eX2stRpyoXeC7f\",\"4RHx3H8EwP2oboW8e\",\"jRqY4i8gPemsZMBGf\",\"XC9nQxxqYS46pgHTK\",\"2PR653L4KSN97r534\",\"cjxsqXfkAPoadmppi\",\"8J2Dqqz9PaFufQzwY\",\"gJbvbqosimaP4ZAYb\",\"TrquEHytntLKHA4m2\",\"jyoLggHk8xQKZuoQC\",\"SbietffGJSuysY2Ge\",\"5seiNqw6ZXoF2GRRd\",\"ByXaraYa5tzFG8Gmj\",\"etoSR23iELGGgs9rA\",\"YDSGng7tgtMwGCTcE\",\"pBMXMQem6BpSeooYT\",\"htXCitorobtqYymjN\",\"hxeKTpLc8vjMd8TMp\",\"k63LjKkX5p7SYng7C\",\"rA5nhfhFwfqvmJb6M\",\"T2vhHPhRR96hRizq8\",\"Wf7nCHS4Gq5tx659h\",\"mfm3gB39arY8Rjb2y\",\"imoNrk36ozReP939p\",\"rvojHhKH3DaxotefQ\",\"Ym8AjbKGSJooun3nt\",\"yv7c4H2jimSKHEjtG\",\"DzvdGwHEjqsX7wyKr\",\"oiXzBqMgGeR3bqMnb\",\"gXTAie79kiw28tx5u\",\"yXGiiSAR5nBHnH3yr\",\"BbcH2NLjE4tKAZ3wR\",\"rWhXHhzF4W8bea6LP\",\"mQKWauR6b252TmdX4\",\"dcW9oK2uRo8h8mBe2\",\"xGtxQz9WnAPPKJZxK\",\"jXTnL3JatkKjoifyb\",\"2nNBez4WxgzghWL3F\",\"JDPS2gioHDcZsERYb\",\"W7aJSATLiKpuJ86RD\",\"3hcjckRyuxzWzgA7R\",\"CchXpepYoWwroXGLZ\",\"RGN3QTb5LXj4ZPPkj\",\"mDWNyaaQ9hvPCRzSd\",\"eotsnqC2X8GhZbyv9\",\"zza5WjC8QrHcoDZBF\",\"LNCb5rksJLJ43L4Nw\",\"buX4mCQhtXCfBjeno\",\"goioTqpiQhYr5goBH\",\"c7uBxu2rgY77H5d79\",\"vRXuYYBNuHEQ29fbm\",\"GXRKXK4CYz3Z3G8bj\",\"EKGhdj2KQRwswo3Zw\",\"rhS8qXRjZcpDXkwnE\",\"mG8HqKiAQFTdRZthG\",\"QD7mPMD8gmTP56nPv\",\"dTFWmBaz6QaPZxSAD\",\"4ySzqKC5s3ZRpG9di\",\"9GxghE7uZXCMKt6W9\",\"CggGfsERnPKGupFWp\",\"wFRLGjA56kj7xyhmv\",\"jCjCvyhqhpebkJn34\",\"a49eNnfRwSMxsDJXf\",\"fDbLmhahNusJZTE5N\",\"KMR6vNzvSKMA2cXnK\",\"5q8gQ4t8p7JooLYAC\",\"JdHDJLKy4HoLtgFF4\",\"evq99nYD69bpbFG9f\",\"EgGxh4rEkXteeGDsC\",\"D2G6Z2sbZRjXjxiyo\",\"unqzSsxpxj9sZ7rbD\",\"FxPDKKibxnZjGJLs6\",\"6rvJwN4mcX7iYGjY7\",\"GZqsbAxnzxczrdWEM\",\"uw47663LqPME8btaA\",\"jqLmwSB9oGb8NxYKf\"],\"quality\":[3,5,5,4,5,4,4,3,3,5,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.3076923076923075,\"family\":[{\"_id\":\"aQnur99HSdYbyypLd\",\"language\":\"cpp\"},{\"_id\":\"EjQM5woRAhYEmuGFp\",\"language\":\"java\"},{\"_id\":\"WuoMiJRr69hPRQJYx\",\"language\":\"javascript\"},{\"_id\":\"J42P5y3pBdznmApgh\",\"language\":\"php\"},{\"_id\":\"JAdCy7nMK8urjv9rL\",\"language\":\"python3\"},{\"_id\":\"sSF45kJRKw7EJGta8\",\"language\":\"ruby\"}]}}"]