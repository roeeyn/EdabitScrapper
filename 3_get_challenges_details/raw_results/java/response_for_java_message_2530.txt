a["{\"msg\":\"result\",\"id\":\"820\",\"result\":{\"_id\":\"i4SSMeuxhnSR2QKtx\",\"author\":\"Edward Clark\",\"authorId\":\"3pdgguqZgNDSAJSGm\",\"code\":\"public class Challenge {\\n\\tpublic static String cleave(String str, String[] words) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":3.7,\"familyId\":\"STvRTZX5WRZua4DAv\",\"instructions\":\"Create a function that takes a string (without spaces) and a word array, cleaves the string into words based on the array, and returns the correctly spaced version of the string (a sentence). If a section of the string is encountered that can't be found on the word array, return `\\\"Cleaving stalled: Word not found\\\"`.\\n\\n### Examples\\n```\\nconst words = [\\\"about\\\", \\\"be\\\", \\\"hell\\\", \\\"if\\\", \\\"is\\\", \\\"it\\\", \\\"me\\\", \\\"other\\\", \\\"outer\\\", \\\"people\\\", \\\"the\\\", \\\"to\\\", \\\"up\\\", \\\"where\\\"]\\n\\n\\ncleave(\\\"ifitistobeitisuptome\\\", words) ➞ \\\"if it is to be it is up to me\\\"\\n\\ncleave(\\\"hellisotherpeople\\\", words) ➞ \\\"hell is other people\\\"\\n\\ncleave(\\\"hellisotterpeople\\\", words) ➞ \\\"Cleaving stalled: Word not found\\\"\\n```\\n\\n### Notes\\nWords in the `words` array can appear more than once in the string. The `words` array is a reference guide, kind of like a dictionary that lists which words are allowed.\",\"lab\":\"import static org.hamcrest.core.Is.is;\\nimport org.junit.Test;\\nimport static org.junit.Assert.assertThat;\\n\\npublic class ChallengeTest {\\n\\tstatic final String[] words = {\\\"a\\\", \\\"after\\\", \\\"all\\\", \\\"an\\\", \\\"and\\\", \\\"are\\\", \\\"as\\\", \\n\\t\\t\\\"by\\\", \\\"continued\\\", \\\"deadlines\\\", \\\"doubly\\\", \\\"fish\\\", \\\"for\\\", \\\"go\\\", \\\"happen\\\", \\n\\t\\t\\\"happened\\\", \\\"i\\\", \\\"illusion\\\", \\\"is\\\", \\\"long\\\", \\\"love\\\", \\\"lunchtime\\\", \\\"make\\\", \\n\\t\\t\\\"moment\\\", \\\"noise\\\", \\\"nothing\\\", \\\"of\\\", \\\"or\\\", \\\"people\\\", \\\"problem\\\", \\\"second\\\", \\n\\t\\t\\\"so\\\", \\\"summarize\\\", \\\"summary\\\", \\\"thanks\\\", \\\"the\\\", \\\"then\\\", \\\"they\\\", \\\"time\\\", \\n\\t\\t\\\"to\\\", \\\"whooshing\\\"};\\n\\n\\tstatic final String s1 = \\\"solongandthanksforallthefish\\\";\\n\\tstatic final String s2 = \\\"solongandthanksforalllthefish\\\";\\n\\tstatic final String s3 = \\\"tosummarizethesummaryofthesummarypeopleareaproblem\\\";\\n\\tstatic final String s4 = \\\"timeisanillusionlunchtimedoublyso\\\";\\n\\tstatic final String s5 = \\\"ilovedeadlinesilovethewhooshingnoisetheymakeastheygoby\\\";\\n\\tstatic final String s6 = \\\"ilovedeadlinesilovethewheezingnoisetheymakeastheygoby\\\";\\n\\tstatic final String s7 = \\\"foramomentnothinghappenedthenafterasecondorsonothingcontinuedtohappen\\\";\\n\\n\\t@Test\\n\\tpublic void test1() {\\n\\t\\tassertThat(Challenge.cleave(s1, words), is(\\\"so long and thanks for all the fish\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test2() {\\n\\t\\tassertThat(Challenge.cleave(s2, words), is(\\\"Cleaving stalled: Word not found\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test3() {\\n\\t\\tassertThat(Challenge.cleave(s3, words), is(\\\"to summarize the summary of the summary people are a problem\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test4() {\\n\\t\\tassertThat(Challenge.cleave(s4, words), is(\\\"time is an illusion lunchtime doubly so\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test5() {\\n\\t\\tassertThat(Challenge.cleave(s5, words), is(\\\"i love deadlines i love the whooshing noise they make as they go by\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test6() {\\n\\t\\tassertThat(Challenge.cleave(s6, words), is(\\\"Cleaving stalled: Word not found\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test7() {\\n\\t\\tassertThat(Challenge.cleave(s7, words), is(\\\"for a moment nothing happened then after a second or so nothing continued to happen\\\"));\\n\\t}\\n}\",\"language\":\"java\",\"summary\":\"Create a function that takes a string (without spaces) and a word array, cleaves the string into words based on the array, and returns the correctly spaced version of the string (a sentence). If a section of the string is encountered that can't be found on the word array, return \\\"Cleaving stalled: Word not found\\\".\\n\\nExamples\\nconst words = [\\\"about\\\", \\\"be\\\", \\\"hell\\\"\",\"tags\":[\"strings\",\"validation\"],\"timestamp\":{\"$date\":1570202359519},\"title\":\"String Cleaver\",\"stats\":{\"completed\":{\"total\":20,\"ratings\":[3,3,3,3,3,5,1,5,5,4,5,1,4,5,3,4,5,5,2,5],\"rators\":[\"3pdgguqZgNDSAJSGm\",\"bvWLyM852r4TokRDq\",\"Md6zpwY4MKH8Ta7vv\",\"jBbd6xWgNR82H68vR\",\"AyrEvM2GLX2jqM772\",\"Es4eX2stRpyoXeC7f\",\"rehehi2Tr2mwaEoJE\",\"xXpZwhQzMHD5yp9Zh\",\"TrquEHytntLKHA4m2\",\"htXCitorobtqYymjN\",\"5WQZzuHZBGqFeNQi3\",\"QS45qu2DFXcCqpAnB\",\"Ym8AjbKGSJooun3nt\",\"gXTAie79kiw28tx5u\",\"KMR6vNzvSKMA2cXnK\"],\"quality\":[]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":0,\"family\":[{\"_id\":\"3QqJ3HLpeuKusdofS\",\"language\":\"cpp\"},{\"_id\":\"i4SSMeuxhnSR2QKtx\",\"language\":\"java\"},{\"_id\":\"y7xoBP9bgHRNTcELK\",\"language\":\"javascript\"},{\"_id\":\"FWh2fGH7aRWALMf3o\",\"language\":\"python3\"},{\"_id\":\"vaRiisYhMmaEndKCs\",\"language\":\"ruby\"}]}}"]