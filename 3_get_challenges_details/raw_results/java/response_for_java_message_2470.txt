a["{\"msg\":\"result\",\"id\":\"794\",\"result\":{\"_id\":\"TcLfFXvBvDqRL82a2\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class ReversedListIndex {\\n\\tpublic static Object[] getItemsAt(Object[] arr, String par) {\\n\\t\\t// recursive code here\\n\\t}\\n}\",\"difficulty\":3.5,\"editorId\":\"a777e8chPvJkY3tKa\",\"familyId\":\"3GcZ4gL2XnqmtkxN6\",\"instructions\":\"Write a **recursive** function that filters the items in an array (given as parameter `arr`) by **positional parity** (`odd` or `even`), given as parameter `par`, starting from the **opposite end**.\\nReturn an array of items on **odd positions** (... 5, 3, 1) or on **even positions** (... 6, 4, 2) and counting from the **last item** in the array.\\n\\n\\n### Examples\\n```\\ngetItemsAt([2, 4, 6, 8, 10], \\\"odd\\\") ➞ [2, 6, 10]\\n// 2, 6 & 10 occupy the 5th, 3rd and 1st positions from right.\\n// Odd positions, hence the parity, and from the opposite.\\n\\ngetItemsAt(['E', 'D', 'A', 'B', 'I', 'T'], \\\"even\\\") ➞ ['E', 'A', 'I']\\n// E, A and I occupy the 6th, 4th and 2nd positions from right.\\n// Even positions, hence the parity, and from the opposite.\\n\\ngetItemsAt([\\\")\\\", \\\"(\\\", \\\"*\\\", \\\"&\\\", \\\"^\\\", \\\"%\\\", \\\"$\\\", \\\"#\\\", \\\"@\\\", \\\"!\\\"]) ➞ [\\\")\\\", \\\"*\\\", ^\\\", \\\"$\\\", \\\"@\\\"]\\n\\ngetItemsAt([\\\"A\\\", \\\"R\\\", \\\"B\\\", \\\"I\\\", \\\"T\\\", \\\"R\\\", \\\"A\\\", \\\"R\\\", \\\"I\\\", \\\"L\\\", \\\"Y\\\"], \\\"even\\\") ➞ [\\\"R\\\", \\\"I\\\", \\\"R\\\", \\\"R\\\", \\\"L\\\"]\\n```\\n\\n\\n### Notes\\n- **IMPORTANT**: You are advised to solve this challenge via a **recursive approach**, hence, the very purpose of this challenge. You can check the **Resources** tab about a few topics on recursion.\\n- Arrays are zero-indexed, so, index+1 = position or position-1 = index.\\n- Items in the array may contain duplicates. See example #4.\\n- The last item in the array is always the first item to start a positional count.\\n- The sequence of the items in the resulting array should be retained (i.e. Example #1 - `6` should come after `2` and before `10`, Example #2 - `'A'` should come after `'E'` and before `'I'`).\\n- An **iterative** version of this challenge can be found via this [link](https://edabit.com/challenge/99yALJGy4ZmFzaqvr).\\n- A **collection** of recursive challenges in Java can be found via this [link](https://edabit.com/collection/Yx78jEBrKppHBNsoQ).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"/** \\n------------------------------------------ \\nCodeGen 1.3 for JUnit 4.13.0 \\t\\t\\nTest Case: ReversedListIndex::getItemsAt \\nTimestamp: 10/28/2020 3:07:46 AM \\n------------------------------------------ \\n® DARKKO 2020 © \\n\\n**/ \\n\\nimport static org.junit.Assert.assertArrayEquals; \\nimport org.junit.Test; \\n\\npublic class ReversedListIndexTests { \\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertArrayEquals(new Object[]{\\\"E\\\",\\\"A\\\",\\\"I\\\"}, ReversedListIndex.getItemsAt(new Object[]{\\\"E\\\",\\\"D\\\",\\\"A\\\",\\\"B\\\",\\\"I\\\",\\\"T\\\"}, \\\"even\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertArrayEquals(new Object[]{\\\"D\\\",\\\"B\\\",\\\"T\\\"}, ReversedListIndex.getItemsAt(new Object[]{\\\"E\\\",\\\"D\\\",\\\"A\\\",\\\"B\\\",\\\"I\\\",\\\"T\\\"}, \\\"odd\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertArrayEquals(new Object[]{\\\"Q\\\",\\\"E\\\",\\\"T\\\",\\\"U\\\",\\\"O\\\"}, ReversedListIndex.getItemsAt(new Object[]{\\\"Q\\\",\\\"W\\\",\\\"E\\\",\\\"R\\\",\\\"T\\\",\\\"Y\\\",\\\"U\\\",\\\"I\\\",\\\"O\\\",\\\"P\\\"}, \\\"even\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertArrayEquals(new Object[]{\\\"O\\\",\\\"U\\\",\\\"T\\\",\\\"E\\\",\\\"Q\\\"}, ReversedListIndex.getItemsAt(new Object[]{\\\"P\\\",\\\"O\\\",\\\"I\\\",\\\"U\\\",\\\"Y\\\",\\\"T\\\",\\\"R\\\",\\\"E\\\",\\\"W\\\",\\\"Q\\\"}, \\\"odd\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertArrayEquals(new Object[]{\\\"S\\\",\\\"F\\\",\\\"H\\\",\\\"K\\\",\\\"Z\\\"}, ReversedListIndex.getItemsAt(new Object[]{\\\"A\\\",\\\"S\\\",\\\"D\\\",\\\"F\\\",\\\"G\\\",\\\"H\\\",\\\"J\\\",\\\"K\\\",\\\"L\\\",\\\"Z\\\"}, \\\"odd\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertArrayEquals(new Object[]{\\\"A\\\",\\\"D\\\",\\\"G\\\",\\\"J\\\",\\\"L\\\"}, ReversedListIndex.getItemsAt(new Object[]{\\\"A\\\",\\\"S\\\",\\\"D\\\",\\\"F\\\",\\\"G\\\",\\\"H\\\",\\\"J\\\",\\\"K\\\",\\\"L\\\",\\\"Z\\\"}, \\\"even\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertArrayEquals(new Object[]{4,8}, ReversedListIndex.getItemsAt(new Object[]{2,4,6,8,10}, \\\"even\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertArrayEquals(new Object[]{2,4,6,8,10}, ReversedListIndex.getItemsAt(new Object[]{1,2,3,4,5,6,7,8,9,10}, \\\"odd\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test09() { \\n\\t\\tassertArrayEquals(new Object[]{\\\"@\\\",\\\"$\\\",\\\"^\\\",\\\"*\\\",\\\")\\\",\\\"}\\\"}, ReversedListIndex.getItemsAt(new Object[]{\\\"!\\\",\\\"@\\\",\\\"#\\\",\\\"$\\\",\\\"%\\\",\\\"^\\\",\\\"&\\\",\\\"*\\\",\\\"(\\\",\\\")\\\",\\\"{\\\",\\\"}\\\"}, \\\"odd\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() { \\n\\t\\tassertArrayEquals(new Object[]{\\\"{\\\",\\\"(\\\",\\\"&\\\",\\\"%\\\",\\\"#\\\",\\\"!\\\"}, ReversedListIndex.getItemsAt(new Object[]{\\\"}\\\",\\\"{\\\",\\\")\\\",\\\"(\\\",\\\"*\\\",\\\"&\\\",\\\"^\\\",\\\"%\\\",\\\"$\\\",\\\"#\\\",\\\"@\\\",\\\"!\\\"}, \\\"odd\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test11() { \\n\\t\\tassertArrayEquals(new Object[]{\\\"O\\\",\\\"B\\\",\\\"T\\\",\\\"Y\\\"}, ReversedListIndex.getItemsAt(new Object[]{\\\"O\\\",\\\"R\\\",\\\"B\\\",\\\"I\\\",\\\"T\\\",\\\"L\\\",\\\"Y\\\"}, \\\"odd\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test12() { \\n\\t\\tassertArrayEquals(new Object[]{\\\"R\\\",\\\"I\\\",\\\"R\\\",\\\"R\\\",\\\"L\\\"}, ReversedListIndex.getItemsAt(new Object[]{\\\"A\\\",\\\"R\\\",\\\"B\\\",\\\"I\\\",\\\"T\\\",\\\"R\\\",\\\"A\\\",\\\"R\\\",\\\"I\\\",\\\"L\\\",\\\"Y\\\"}, \\\"even\\\"));\\n\\t}\\n}\",\"language\":\"java\",\"quality\":0,\"stats\":{\"completed\":{\"ratings\":[4,4,4,4,4,3,5,5,2,0],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"Es4eX2stRpyoXeC7f\",\"RQL2PAWda9Bh79GNi\",\"gXTAie79kiw28tx5u\",\"LNCb5rksJLJ43L4Nw\"],\"total\":9},\"flags\":0},\"summary\":\"Write a recursive function that filters the items in an array (given as parameter arr) by positional parity (odd or even), given as parameter par, starting from the opposite end.\\nReturn an array of items on odd positions (... 5, 3, 1) or on even positions (... 6, 4, 2) and counting from the last item in the array.\\n\\nExamples\\ngetItemsAt([2, 4, 6, 8, 10], \\\"odd\\\")\",\"tags\":[\"recursion\",\"strings\",\"arrays\"],\"timestamp\":{\"$date\":1603825758399},\"title\":\"Recursion: Reversed List Index\",\"family\":[{\"_id\":\"TcLfFXvBvDqRL82a2\",\"language\":\"java\"},{\"_id\":\"A9EhAF2RCt7ubxRsK\",\"language\":\"javascript\"},{\"_id\":\"n2y4i74e9mFdwHNCi\",\"language\":\"python3\"}]}}"]