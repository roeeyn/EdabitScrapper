a["{\"msg\":\"result\",\"id\":\"769\",\"result\":{\"_id\":\"YzWb77MowQpixfpWh\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"public class Challenge {\\n  public static boolean ascending(String str) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":3.1923076923076925,\"familyId\":\"oxA7DabCs4qxeTNXK\",\"instructions\":\"Write a function that returns `true` if a string consists of **ascending or ascending AND consecutive** numbers.\\n\\n### Examples\\n```\\nascending(\\\"232425\\\") ➞ true\\n// Consecutive numbers 23, 24, 25\\n\\nascending(\\\"2324256\\\") ➞ false\\n// No matter how this string is divided, the numbers are not consecutive.\\n\\nascending(\\\"444445\\\") ➞ true\\n// Consecutive numbers 444 and 445.\\n```\\n\\n### Notes\\nA **number** can consist of any number of digits, so long as the numbers are adjacent to each other, and the string has at least two of them.\",\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n  @Test\\n  public void test1() {\\n    assertEquals(true, Challenge.ascending(\\\"232425\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test2() {\\n    assertEquals(true, Challenge.ascending(\\\"444445\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test3() {\\n    assertEquals(true, Challenge.ascending(\\\"1234567\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test4() {\\n    assertEquals(true, Challenge.ascending(\\\"123412351236\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test5() {\\n    assertEquals(true, Challenge.ascending(\\\"57585960616263\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test6() {\\n    assertEquals(true, Challenge.ascending(\\\"500001500002500003\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test7() {\\n    assertEquals(true, Challenge.ascending(\\\"919920921\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test8() {\\n    assertEquals(false, Challenge.ascending(\\\"2324256\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test9() {\\n    assertEquals(false, Challenge.ascending(\\\"1235\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test10() {\\n    assertEquals(false, Challenge.ascending(\\\"121316\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test11() {\\n    assertEquals(false, Challenge.ascending(\\\"12131213\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test12() {\\n    assertEquals(false, Challenge.ascending(\\\"54321\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test13() {\\n    assertEquals(false, Challenge.ascending(\\\"56555453\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test14() {\\n    assertEquals(false, Challenge.ascending(\\\"90090190290\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test15() {\\n    assertEquals(false, Challenge.ascending(\\\"35236237238\\\"));\\n  }\\n}\",\"language\":\"java\",\"summary\":\"Write a function that returns true if a string consists of ascending or ascending AND consecutive numbers.\\n\\nExamples\\nascending(\\\"232425\\\") ➞ true\\n// Consecutive numbers 23, 24, 25\\n\\nascending(\\\"2324256\\\") ➞ false\\n// No matter how this string is divided, the numbers are not consecutive.\\n\\nascending(\\\"444445\\\") ➞ true\\n// Consecutive numbers 444 and 445.\\n\\nNotes\\nA number\",\"tags\":[\"strings\",\"functional_programming\",\"loops\"],\"timestamp\":{\"$date\":1568751949754},\"title\":\"Ascending Consecutive Numbers\",\"stats\":{\"completed\":{\"total\":100,\"ratings\":[3,3,3,3,3,3,4,3,4,5,3,4,1,5,3,5,0,2,2,3,2,2,2,4,3,1,4,4,4,4,2,4,5,2,2,4,2,1,4,5,2,2,1,4,2,4,5,4,4,3,2,5,5,4,5,4,4,3,5,3,2,2,5,3,5,5,3,5,3,3,0,1,2,3,3,5,2,3],\"rators\":[\"3pdgguqZgNDSAJSGm\",\"hhkuWPyzP2k2pRcxZ\",\"fQCHGFe43dEtqjEFT\",\"FvWKuSqHdXZ7HM2sD\",\"YWnFYSYAv4jbY4Mmc\",\"sxci7DYKNa6q22Sjq\",\"Q7MfF2FSTLtcGYvgQ\",\"rehehi2Tr2mwaEoJE\",\"AyrEvM2GLX2jqM772\",\"Es4eX2stRpyoXeC7f\",\"4RHx3H8EwP2oboW8e\",\"vRXuYYBNuHEQ29fbm\",\"QwkJidQW7vvEY6TLp\",\"hgR55DYN6zxHXNeRb\",\"zpnDKD8ExyB4D2LLA\",\"uSiSgN3hrkM8bazRR\",\"2PR653L4KSN97r534\",\"yLnPBNvqAPxJWYrN5\",\"TrquEHytntLKHA4m2\",\"htXCitorobtqYymjN\",\"J22GaPwwi3TL2pAkw\",\"jyoLggHk8xQKZuoQC\",\"csRoCgJx5NBJzW8pX\",\"AjzZS7MouArr5Zgdh\",\"cQA7yLw5L4Z53MrgC\",\"uuN5sdoMNjtRZwXiL\",\"pWtxhELmYYppvBoBh\",\"j2MGy7uBRof53S6Gm\",\"4Peov9uWCPtCEnknF\",\"RroghSsW6MgCNEcFz\",\"9pCPyhvQmbkWyD2LL\",\"o3H7kYyAtn7F2wMEZ\",\"rzghivfsH25cDEfuA\",\"pPLvqmxqj4cNSqT2M\",\"P4ETSRBvdbH8NvCTT\",\"9dpJ5PtbcqaqToixJ\",\"5vEKaDbNWpKjue7Xi\",\"ZAPdXmkqfn2g5Qs2K\",\"QS45qu2DFXcCqpAnB\",\"KBLcaSCseTPiv3mpq\",\"6kz7jjJS8W4tikYQT\",\"Ym8AjbKGSJooun3nt\",\"mGaEDPw5FsDb3vdnq\",\"gXTAie79kiw28tx5u\",\"RQL2PAWda9Bh79GNi\",\"DkSMZ3jZLkwviKb9g\",\"6YAeQueNMLugbc7P6\",\"TZk7ZK6ejLsTr6Bgz\",\"vG7HBZ22E6Jv8oiEh\",\"a777e8chPvJkY3tKa\",\"CQrLMPjz7gn82rySP\",\"b3pFGJ5jWFdoAh4wp\",\"udHFfcqNNej6udnpP\",\"m8RTLuXqmythXHYZt\",\"2g9DndhBotcaKDiFD\",\"kjFTyZ3MYQZ8enFmF\",\"YGoEo3M5Q93BzxBqX\",\"Prw5Jq38wrSoj5QSF\",\"ey5557C4wS8kpYoTe\",\"rWhXHhzF4W8bea6LP\",\"mKu2ZZu72qSy4ZPQg\",\"CezNirjCQL2BSr4g2\",\"iEnmF5jaiupFmCMvW\",\"JHoRpuqgifgXwvkd8\",\"WyCiNDcvFNSFTtL3f\",\"7ospYKSiS9uy932FK\",\"dfQntx8ifmHPs6xYj\",\"nHj7SC5cnmkTApbgY\",\"iAkFghEnCswmTmgwN\",\"rhS8qXRjZcpDXkwnE\",\"KnjLZKZxhWwdbfPEK\",\"GvLLKHi7NwAjutdDk\",\"dGJhADFMNr9is6GRP\",\"5QN8R22z43SrwoHDz\",\"mS4t7GChGHwJ65Lfk\",\"qg94wqTGMA6K5Caj3\",\"RmzNNtGcDkrevkW8q\",\"49jS26aDa6Z6ctPm4\",\"uw47663LqPME8btaA\",\"y3gEXubu4apqYFTbc\",\"L2N7Hs2WFkidyE2pb\",\"E8ec2KXXRu4yrXm2w\",\"5ZxtiNrKBNShxM7QT\",\"wFRLGjA56kj7xyhmv\",\"KMR6vNzvSKMA2cXnK\",\"XhDoY8pRn6ZYgHLAr\",\"3GpLRnp6T3naSmDxg\"],\"quality\":[5,3,5,5,2,5,4,5,3,4,4,5,5,1]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"isHidden\":false,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":4,\"family\":[{\"_id\":\"pv39bCFoACLiuKMAo\",\"language\":\"cpp\"},{\"_id\":\"YzWb77MowQpixfpWh\",\"language\":\"java\"},{\"_id\":\"jN89tuARCFbtQm6vE\",\"language\":\"javascript\"},{\"_id\":\"9iLhKgqZn5exBrmWm\",\"language\":\"python3\"},{\"_id\":\"LG6ZAFdLkc9ZRBd9M\",\"language\":\"ruby\"},{\"_id\":\"QNHnzhfWyYyZMXsvJ\",\"language\":\"swift\"}]}}"]