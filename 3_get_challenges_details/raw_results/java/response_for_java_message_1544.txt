a["{\"msg\":\"result\",\"id\":\"331\",\"result\":{\"_id\":\"9D39q2q9yAFCDM9da\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class VideoLength {\\n\\tpublic static int minutesToSeconds(String tm) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":1.4787234042553192,\"familyId\":\"85NGDfHFahRs23iRZ\",\"instructions\":\"You are given the length of a video in minutes. The format is **mm:ss** (e.g.: `\\\"02:54\\\"`). Create a function that takes the *video length* and return it in **seconds**.\\n\\n### Examples\\n```\\nminutesToSeconds(\\\"01:00\\\") ➞ 60\\n\\nminutesToSeconds(\\\"13:56\\\") ➞ 836\\n\\nminutesToSeconds(\\\"10:60\\\") ➞ -1\\n```\\n\\n### Notes\\n- The video length is given as a string.\\n- If the number of seconds is **60 or over**, return `-1` (see example #3).\\n- You may get a number of minutes over 99 (e.g. `\\\"121:49\\\"` is perfectly **valid**).\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"import static org.junit.Assert.assertEquals;\\nimport org.junit.Test;\\n\\npublic class VideoLengthTests {\\n\\tprivate String[] strVector = new String[] {\\\"01:00\\\", \\\"13:56\\\", \\\"10:60\\\", \\\"132:21\\\", \\\"132:271\\\", \\\"01:30\\\", \\\"10:00\\\"};\\n\\tprivate int[] resVector = new int[] {60, 836, -1, 7941, -1, 90, 600};\\n\\t\\n\\t@Test\\n\\tpublic void test01() {\\n\\t\\tassertEquals(VideoLength.minutesToSeconds(strVector[0]), resVector[0]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test02() {\\n\\t\\tassertEquals(VideoLength.minutesToSeconds(strVector[1]), resVector[1]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test03() {\\n\\t\\tassertEquals(VideoLength.minutesToSeconds(strVector[2]), resVector[2]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test04() {\\n\\t\\tassertEquals(VideoLength.minutesToSeconds(strVector[3]), resVector[3]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test05() {\\n\\t\\tassertEquals(VideoLength.minutesToSeconds(strVector[4]), resVector[4]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test06() {\\n\\t\\tassertEquals(VideoLength.minutesToSeconds(strVector[5]), resVector[5]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test07() {\\n\\t\\tassertEquals(VideoLength.minutesToSeconds(strVector[6]), resVector[6]);\\n\\t}\\n}\\n\\n// all credits to the original author and publisher @Joshua Señoron\",\"language\":\"java\",\"quality\":4.514285714285714,\"summary\":\"You are given the length of a video in minutes. The format is mm:ss (e.g.: \\\"02:54\\\"). Create a function that takes the video length and return it in seconds.\\n\\nExamples\\nminutesToSeconds(\\\"01:00\\\") ➞ 60\\n\\nminutesToSeconds(\\\"13:56\\\") ➞ 836\\n\\nminutesToSeconds(\\\"10:60\\\") ➞ -1\\n\\nNotes\\nThe video length is given as a string.\\nIf the number of seconds is 60 or over, return -1 (se\",\"tags\":[\"math\",\"strings\",\"numbers\",\"language_fundamentals\"],\"timestamp\":{\"$date\":1602484650952},\"title\":\"Video Length in Seconds\",\"stats\":{\"completed\":{\"total\":241,\"ratings\":[1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,5,1,0,1,1,2,1,2,1,2,1,2,1,2,2,1,3,2,1,2,1,1,2,1,1,2,2,2,1,1,1,1,0,2,2,2,2,2,2,1,2,1,2,1,2,1,1,2,1,2,2,2,2,3,2,0,2,1,1,1,2,1,0,2,1,3,3,0,0,2,2,2,1,0,2,2,2,2,2,3,2,2,2,0,1,1,1,3,1,1,5,0,1,1,2,1,2,0,2,1,2,2,2,1,1,0,2,1,0,4,0,2,2,2,0,0,2,2,2,1,2,2,1,1,2,2,2,0,0,1,1,1,1,1,2,2,3,2,1,2,2,0,2,1,2,2,0,1,1,2,2,2,3,2,2,2,2,1,2,1,1,1,2,2,4,1,2,2,1,1,2,1],\"quality\":[2,5,5,5,4,5,5,4,5,5,5,5,3,5,5,5,5,4,5,5,5,4,5,5,5,5,5,5,5,4,2,5,4,3,4],\"rators\":[\"a777e8chPvJkY3tKa\",\"zXu67TSfBWxX7cJmx\",\"HTHTaRGeFB6tGKRCJ\",\"2xFvy6u3hE4LtCXMD\",\"Es4eX2stRpyoXeC7f\",\"44arJN5SYx3HyfetA\",\"fzWFZSS3zywTR8wEe\",\"Fdq6CxMWZL8WZiNaM\",\"KLrjQRw5sdTaistNv\",\"macWj75ys6WK4LHpN\",\"ymggGjk5woALZEbCC\",\"sZ9BBMxD2vQvgMgS3\",\"a49eNnfRwSMxsDJXf\",\"AeJSxRqw2dJZuGvdk\",\"yXGiiSAR5nBHnH3yr\",\"J7epB3qSQJ2E8vWkY\",\"gXTAie79kiw28tx5u\",\"kQRtmSZfHdSzFserc\",\"8FfxA3PL2fxDYtpKR\",\"oMZovHkR6QqNvQwyc\",\"C9yBWYcZsjmJYww3K\",\"82weQfHHmno4Mq4X7\",\"rvojHhKH3DaxotefQ\",\"hpbyiuDF2QHeFFKwx\",\"azAzSkvJd7eyXY9x9\",\"o5xSZjgFW6dGfSqrg\",\"32uy2LgegdmLGpebX\",\"kabqCExooax4JEQHE\",\"gKa9rqX7DLeYKjomz\",\"uozaSJRDCJQ8kF7cw\",\"qJ2TgHitgMYZRTZ5d\",\"yd5PakB2z33q2JrTZ\",\"vs3bG9isJYKeqF43m\",\"2gigq5ge95e4u7akH\",\"RDCsBjsGDtutTD28r\",\"vekfxCbwbZZ9RNd5c\",\"jb9RLyyuo565bKDzN\",\"BSJAuSLSs5Sv5SYAf\",\"WHSB76uqJrCf2XKsw\",\"gjSJcfrWyf2dfBmwt\",\"HaWYTmbC3CuQdjw6B\",\"k5sDJjweu8W3jsjCj\",\"6asyTYvz7kMPee8Tz\",\"s6CePt3SrZTSzxy5s\",\"vhqcr9L2927i27SYJ\",\"MXcqdhhv6Dz6NQaNe\",\"Wf7nCHS4Gq5tx659h\",\"vZxkd44hNe7JeBhpM\",\"Jc5hhNG9kE9XwXiB2\",\"QMSZe5EBKFKSkRPv4\",\"3oZKDoY9FdANBZJqM\",\"sbnXNh3YegeK42AJH\",\"etoSR23iELGGgs9rA\",\"thA79neuEcM3J8ZHr\",\"Yohr2MmAyaWGMbB35\",\"QRpK4ZGG67fSkGwXs\",\"5iNQPk2LoSAsi7ijH\",\"sAdpvrN5y9fNJhQQv\",\"e5c4uxBeto5PZN5Mg\",\"cWfmmhkEAjKEt2S7N\",\"QJWWgtwpAXay452XH\",\"RKmMRcyhEF2zXbZf9\",\"B4pxRqzo43M7S8FbP\",\"RMS5H2QpJ4fBiriZu\",\"CoEamPmmpgNQY3uSo\",\"YL9pqyCu8xsds8J49\",\"aJrw3QZHHWg2RBTz5\",\"RQL2PAWda9Bh79GNi\",\"p7E4zgK8iGPwvfD4t\",\"jhEgpqsboiWai8sLJ\",\"hmn6qe4B7Nrh6oSGn\",\"bK4bypv7qvTHm7LnZ\",\"joeAZ7wtzYWRMitWC\",\"rWhXHhzF4W8bea6LP\",\"9amCEoE43AdSneJZ7\",\"DkSMZ3jZLkwviKb9g\",\"mt4kmXdCCGcbatAaZ\",\"JszPst3958te56jFk\",\"3twSyH9zesmkhvih8\",\"bAnGmDZMY746J5k8W\",\"BbcH2NLjE4tKAZ3wR\",\"p8qqFdJ3FSk5x9z3G\",\"gBGjCfJvPHswDM5JQ\",\"TJKZhisDddSvYGH3Z\",\"s5qoCq4dYbkHcYxyz\",\"oMfq73A434YWhSuWQ\",\"mG8HqKiAQFTdRZthG\",\"Ym8AjbKGSJooun3nt\",\"8Xx8nWXRydHDBGfQf\",\"DzvdGwHEjqsX7wyKr\",\"jXTnL3JatkKjoifyb\",\"jyoLggHk8xQKZuoQC\",\"vRXuYYBNuHEQ29fbm\",\"dcW9oK2uRo8h8mBe2\",\"qaPjAANdnxFnWfj5d\",\"unNqQjSHzkb4pCzEu\",\"tyLS9T6YMfg9fMtYJ\",\"W56bWmpQeLJ9JEDsa\",\"mQKWauR6b252TmdX4\",\"hD6sfDtntpqT8NR2o\",\"JFodQijHHdRkkrZvT\",\"udHFfcqNNej6udnpP\",\"B59ANYuNBPaEhMJGq\",\"mkA6Hh3DPvdkP36kG\",\"9mktneZJT3Ndya3hu\",\"YLqdr7bYjwew2KM4N\",\"Q4RHqbSCspLCPqvHe\",\"pi76g3eRpnKrhee2a\",\"APBiZdihJCi5JSnPL\",\"Mf3Hwb98yLexeXPu7\",\"uFfEio8nzDvL8emhp\",\"7JvSKtxg4JJ42QnmN\",\"GkYtSbQuheBF4Enys\",\"hhxjQREtmHSheH9Pj\",\"bur3yQ8s34zqKGEro\",\"QRv96jmNaYsWkxQEG\",\"Po3v3dHCk6wYGKMwi\",\"ALWn3i2d9d9ZJJ2Nb\",\"qTQGbqpJsx3SRcHZq\",\"EoWnr4ab9B9ou3Lcz\",\"eQXwk5zGckM8tCWYH\",\"C75Nyf5jotZJ9TfPW\",\"4ySzqKC5s3ZRpG9di\",\"yR4WPD87E3Cv8YhaP\",\"buX4mCQhtXCfBjeno\",\"zZfMwLuoERGmybgib\",\"27qiJtdrfNjcePhwp\",\"8qNSPHZBpmjSTt3tH\",\"7BjxcJvSFKXJMz6X6\",\"6rvJwN4mcX7iYGjY7\",\"btabi3PdyisuY5tn9\",\"DRjqgdcSkz58yiqea\",\"HXbTKW3jmmyRAsKrr\",\"wFRLGjA56kj7xyhmv\",\"sxci7DYKNa6q22Sjq\",\"mfm3gB39arY8Rjb2y\",\"XXR58S7QFpNRmfaPd\",\"c7uBxu2rgY77H5d79\",\"xEX3TDY6C2h82dJTn\",\"uw47663LqPME8btaA\",\"TQaf5YLAgRvdCQwxD\",\"AZpW9TmsKqJZHBSys\",\"srJ34BaybkQh3qRkM\",\"p5ZshR8zhTqmdhKDc\",\"qkzvMGGHMD3xvmEAH\",\"2zCYcc8oYxZjSjTQN\",\"wTc283wowqsFisKNC\",\"FSSM3xcaTXGcxqYGz\",\"dvFWsHWBxCsNCd2CB\",\"J9zJq7PMGb6mqzcHW\",\"gTmFuQhRTpDmRhbbN\",\"3aEqvmPPESK79dJ6T\",\"GFeav8mBfjzweBnaZ\",\"zTtKiCbLWzaf2Yjo4\",\"jCjCvyhqhpebkJn34\",\"b9iSg6CvRnHuLtQA5\",\"cgCQDs9i7yChKeAjE\",\"6W5Ff46e5LYMZs48M\",\"dKRHt4m7eBgDvM8X9\",\"htXCitorobtqYymjN\",\"rcfmor2YTtu4TMZ4i\",\"4za87fFyw9qxkD936\",\"yi7mzQDGbiwh7JDfY\",\"kA9krPrcSe3sgLmbj\",\"PCAcZdg2HmDcGyeXb\",\"9yegb3yvroNMdFnyo\",\"8b7kswLypEnXrswkw\",\"a6QyecnvcLFAMWq7e\",\"9N5yEu7ho8ZZgjSoq\",\"DZvz6WY5bQEneYzvv\",\"AHmgsYBy6A66bDQFC\",\"PD7StRQ6zRd9qb9ri\",\"QwkJidQW7vvEY6TLp\",\"TAYCEE8zNN9aBTR7F\",\"mn8u8LDBvWb7pnCoE\",\"RsujLHaML6L3KinzK\",\"5b3rz7nFjQ7rwtqkQ\",\"E6r2kaBT45TfvfN7y\",\"NTAzREcetmyXWSAx5\",\"eniRZnc6xY6odxcLg\",\"gSrqu8MsZMFSxxWAZ\",\"cuMRsGTfYHfg3RSw2\",\"6MyDEFYbKTbaSciJW\",\"2mTYrwqEabB4NHPCY\",\"Z3JZpmrNTwzgpob2n\",\"563onSvqgjToY79ah\",\"AeSmk2XWGcTLHB7PJ\",\"SE5G2Caf3btnuGmz6\",\"PPdaczxSt2u5cmZYG\",\"iXpqypRdDsPC7Pbdf\",\"PAEWysAAFheYiYPBp\",\"6y5oxMRk9WqftsrTf\",\"FcMu2WPvDobEbWhyr\",\"yr822PZmmiDDenxpB\",\"RxLbQbdiziMtCDxdu\",\"vSQfYja9HWjDw5DFK\",\"2NJZbusRvu3eJ4tHu\",\"yv2QLxoywSnwSZkWw\",\"7LTjWJSW65hb2Ntz2\",\"KMR6vNzvSKMA2cXnK\",\"bDA8NeME5tCyyoodM\",\"Rm4PX33gENc3PxyWM\",\"NXqDDBjRX3ynfRkZa\",\"W75Zqp3eH7crASTS3\",\"FNYPC36yqPmTKDaqR\",\"aEFHEB3njFR6Q88Zm\",\"CHuC8mjQLn2KJxZSz\",\"ox2iqixsSq7ftcGrb\",\"GyuiHbFQqSrD3v7xT\",\"9xzk7TQqCRBWcMHu9\",\"oQJtGYRDKChALMS7B\",\"unqzSsxpxj9sZ7rbD\",\"7xYtqgCCyvRJAmeuq\",\"bNNzujyLbK9o4sRwu\",\"FxPDKKibxnZjGJLs6\",\"nFbmNzMQ38TncmfQX\",\"5HGyJtoZ3AffzAZAv\",\"ckQwFFWyLXmDQAaCn\"]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"nQ64yqE27aLzXF4NA\",\"language\":\"cpp\"},{\"_id\":\"9D39q2q9yAFCDM9da\",\"language\":\"java\"},{\"_id\":\"n7qZMpuLsAMGBGNLA\",\"language\":\"javascript\"},{\"_id\":\"tZJ3ECjqWEGF5FHgb\",\"language\":\"php\"},{\"_id\":\"Ff84aGq6e7gjKYh8H\",\"language\":\"python3\"},{\"_id\":\"fjYFchJMG6ddozCGS\",\"language\":\"ruby\"}]}}"]