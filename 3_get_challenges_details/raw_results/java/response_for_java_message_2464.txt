a["{\"msg\":\"result\",\"id\":\"788\",\"result\":{\"_id\":\"oibF2LtNoiGsJuj6b\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class HappyNumber {\\n\\tpublic static boolean isHappy(int n) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":3.409090909090909,\"quality\":0,\"editorId\":\"a777e8chPvJkY3tKa\",\"familyId\":\"49QQ7SqTT68etHGdA\",\"instructions\":\"A **happy number** is a number which yields a `1` by repeatedly summing up the square of its digit. If such a process results in an endless cycle of numbers containing `4`, the number is said to be an **unhappy number**.\\n\\nCreate a function that accepts a number and determines whether the number is a *happy number* or not. Return `true` if so, `false` otherwise.\\n\\n### Examples\\n```\\nisHappy(67) ➞ false\\n\\nisHappy(89) ➞ false\\n\\nisHappy(139) ➞ true\\n\\nisHappy(1327) ➞ false\\n\\nisHappy(2871) ➞ false\\n\\nisHappy(3970) ➞ true\\n```\\n\\n### Notes\\n- You are expected to solve this challenge via recursion.\\n- You can check on the **Resources** tab for more details about recursion in Java.\\n- A non-recursive version of this challenge can be found [here](https://edabit.com/challenge/S5y88pjHnpr3qd5BD).\\n- If you find recursion to be fun, a collection of those challenges is found [here](https://edabit.com/collection/Yx78jEBrKppHBNsoQ).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"import static org.junit.Assert.assertEquals;\\nimport org.junit.Test;\\n\\npublic class HappyNumberTests {\\n\\tprivate int[] numVector = new int[] {1, 10, 44, 67, 89, 139, 1327, 2871, 3970, 5209, 6329, 8888, 9331, 10000};\\n\\tprivate boolean[] resVector = new boolean[] {true, true, true, false, false, true, false, false, true, false, true, false, true, true};\\n\\t\\n\\t@Test\\n\\tpublic void test1() {\\n\\t\\tassertEquals(HappyNumber.isHappy(numVector[0]), resVector[0]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test2() {\\n\\t\\tassertEquals(HappyNumber.isHappy(numVector[1]), resVector[1]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test3() {\\n\\t\\tassertEquals(HappyNumber.isHappy(numVector[2]), resVector[2]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test4() {\\n\\t\\tassertEquals(HappyNumber.isHappy(numVector[3]), resVector[3]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test5() {\\n\\t\\tassertEquals(HappyNumber.isHappy(numVector[4]), resVector[4]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test6() {\\n\\t\\tassertEquals(HappyNumber.isHappy(numVector[5]), resVector[5]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test7() {\\n\\t\\tassertEquals(HappyNumber.isHappy(numVector[6]), resVector[6]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test8() {\\n\\t\\tassertEquals(HappyNumber.isHappy(numVector[7]), resVector[7]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test9() {\\n\\t\\tassertEquals(HappyNumber.isHappy(numVector[8]), resVector[8]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test10() {\\n\\t\\tassertEquals(HappyNumber.isHappy(numVector[9]), resVector[9]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test11() {\\n\\t\\tassertEquals(HappyNumber.isHappy(numVector[10]), resVector[10]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test12() {\\n\\t\\tassertEquals(HappyNumber.isHappy(numVector[11]), resVector[11]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test13() {\\n\\t\\tassertEquals(HappyNumber.isHappy(numVector[12]), resVector[12]);\\n\\t}\\n\\t\\n\\t@Test\\n\\tpublic void test14() {\\n\\t\\tassertEquals(HappyNumber.isHappy(numVector[13]), resVector[13]);\\n\\t}\\n}\",\"language\":\"java\",\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,5,2,4,5,3,1,2,5,2,3,5,5,2,1,2,2,1],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"azAzSkvJd7eyXY9x9\",\"Es4eX2stRpyoXeC7f\",\"2xFvy6u3hE4LtCXMD\",\"9RjPxa9gtAe8Rspre\",\"rehehi2Tr2mwaEoJE\",\"cJmmvnmJSXvBXtydi\",\"RQL2PAWda9Bh79GNi\",\"gXTAie79kiw28tx5u\",\"mGaEDPw5FsDb3vdnq\",\"pqQ3NsxT5vD4B8zqB\",\"nHj7SC5cnmkTApbgY\",\"rhS8qXRjZcpDXkwnE\",\"v5H82mo7L4NCGTnSt\",\"qg94wqTGMA6K5Caj3\",\"htXCitorobtqYymjN\",\"uw47663LqPME8btaA\"],\"total\":21},\"flags\":0},\"summary\":\"A happy number is a number which yields a 1 by repeatedly summing up the square of its digit. If such a process results in an endless cycle of numbers containing 4, the number is said to be an unhappy number.\\n\\nCreate a function that accepts a number and determines whether the number is a happy number or not. Return true if so, false otherwise.\\n\\nExamples\\nisHapp\",\"tags\":[\"arrays\",\"recursion\",\"validation\"],\"timestamp\":{\"$date\":1601317832993},\"title\":\"Recursion: Happy Number\",\"family\":[{\"_id\":\"oibF2LtNoiGsJuj6b\",\"language\":\"java\"},{\"_id\":\"GnF85aA7XgZdZYrZp\",\"language\":\"javascript\"},{\"_id\":\"J9fCHDa3yYJWnK3A7\",\"language\":\"python3\"}]}}"]