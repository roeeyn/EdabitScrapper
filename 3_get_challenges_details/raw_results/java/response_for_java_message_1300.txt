a["{\"msg\":\"result\",\"id\":\"209\",\"result\":{\"_id\":\"TM5f33Mpu52m2jcat\",\"author\":\"Nguyen Phan Dang\",\"authorId\":\"YLqdr7bYjwew2KM4N\",\"code\":\"public class Challenge {\\n\\tpublic static int maxTotal(int[] nums) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":1.1,\"familyId\":\"9zWRLcYhQa2T5AWB5\",\"instructions\":\"Given an array of 10 numbers, return the **maximum possible total** made by summing just  **5 of the 10 numbers**.\\n\\n### Examples\\n```\\nmaxTotal([1, 1, 0, 1, 3, 10, 10, 10, 10, 1]) ➞ 43\\n\\nmaxTotal([0, 0, 0, 0, 0, 0, 0, 0, 0, 100]) ➞ 100\\n\\nmaxTotal([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ 40\\n```\\n\\n### Notes\\nYou can select any 5 numbers from the given array to form maximum possible total.\",\"isHidden\":false,\"lab\":\"import static org.hamcrest.core.Is.is;\\nimport org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\nimport static org.junit.Assert.assertThat;\\n\\npublic class ChallengeTests {\\n\\n    @Test\\n    public void test1() {\\n        assertThat(Challenge.maxTotal(new int[] { 1, 1, 0, 1, 3, 10, 10, 10, 10, 1 }), is(43));\\n    }\\n\\n    @Test\\n    public void test2() {\\n        assertThat(Challenge.maxTotal(new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 100 }), is(100));\\n    }\\n\\n    @Test\\n    public void test3() {\\n        assertThat(Challenge.maxTotal(new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }), is(40));\\n    }\\n\\n    @Test\\n    public void test4() {\\n        assertThat(Challenge.maxTotal(new int[] { 12, 8, 73, 1, 24, 11, 88, 39, 2, -47 }), is(236));\\n    }\\n\\n    @Test\\n    public void test5() {\\n        assertThat(Challenge.maxTotal(new int[] { 48, 90, 42, -12, 1, -14, -36, -37, -9, -4 }), is(177));\\n    }\\n\\n    @Test\\n    public void test6() {\\n        assertThat(Challenge.maxTotal(new int[] { -99, -38, -13, -84, 66, 13, -13, -16, 14, 15 }), is(95));\\n    }\\n\\n    @Test\\n    public void test7() {\\n        assertThat(Challenge.maxTotal(new int[] { 60, -70, -53, -4, 53, -66, 10, -7, 56, 89 }), is(268));\\n    }\\n\\n    @Test\\n    public void test8() {\\n        assertThat(Challenge.maxTotal(new int[] { 88, 45, 76, 34, -42, 10, -22, 85, -52, 49 }), is(343));\\n    }\\n\\n    @Test\\n    public void test9() {\\n        assertThat(Challenge.maxTotal(new int[] { 70, -74, 20, -56, -15, 93, -75, 98, 46, 36 }), is(343));\\n    }\\n\\n    @Test\\n    public void test10() {\\n        assertThat(Challenge.maxTotal(new int[] { -20, -61, 50, 52, 60, -70, 0, 69, 91, -36 }), is(322));\\n    }\\n\\n    @Test\\n    public void test11() {\\n        assertThat(Challenge.maxTotal(new int[] { 31, 75, 78, 76, -51, -8, 17, -23, 34, 100 }), is(363));\\n    }\\n\\n    @Test\\n    public void test12() {\\n        assertThat(Challenge.maxTotal(new int[] { -79, 85, 55, -5, -86, -72, 31, -68, 13, 1 }), is(185));\\n    }\\n\\n    @Test\\n    public void test13() {\\n        assertThat(Challenge.maxTotal(new int[] { -93, -79, -26, 53, 74, -55, 68, -36, -6, -94 }), is(163));\\n    }\\n\\n    @Test\\n    public void test14() {\\n        assertThat(Challenge.maxTotal(new int[] { -100, 21, 22, 65, 19, 2, -11, 3, 24, 73 }), is(205));\\n    }\\n\\n    @Test\\n    public void test15() {\\n        assertThat(Challenge.maxTotal(new int[] { 92, -43, 80, 43, 23, -41, -19, 90, 78, 31 }), is(383));\\n    }\\n\\n    @Test\\n    public void test16() {\\n        assertThat(Challenge.maxTotal(new int[] { -71, -11, -89, 60, 71, -62, 54, 11, 73, 49 }), is(307));\\n    }\\n\\n    @Test\\n    public void test17() {\\n        assertThat(Challenge.maxTotal(new int[] { 61, -55, 60, -30, 27, 61, -68, -1, -36, -27 }), is(208));\\n    }\\n\\n    @Test\\n    public void test18() {\\n        assertThat(Challenge.maxTotal(new int[] { 67, -44, 40, -75, 27, 71, -59, 4, 45, -91 }), is(250));\\n    }\\n\\n    @Test\\n    public void test19() {\\n        assertThat(Challenge.maxTotal(new int[] { 27, -61, 81, -28, 5, 45, -81, 37, 30, 36 }), is(229));\\n    }\\n\\n    @Test\\n    public void test20() {\\n        assertThat(Challenge.maxTotal(new int[] { 42, 34, -11, -41, -73, 53, 52, 34, 63, -15 }), is(244));\\n    }\\n\\n    @Test\\n    public void test21() {\\n        assertThat(Challenge.maxTotal(new int[] { -89, 51, -24, -12, 26, 52, -98, -14, -99, 85 }), is(202));\\n    }\\n\\n    @Test\\n    public void test22() {\\n        assertThat(Challenge.maxTotal(new int[] { -77, 24, 83, -67, -5, 58, -64, 21, 86, 41 }), is(292));\\n    }\\n\\n    @Test\\n    public void test23() {\\n        assertThat(Challenge.maxTotal(new int[] { -69, 74, -78, 56, -9, -28, 39, 54, -74, 30 }), is(253));\\n    }\\n\\n    @Test\\n    public void test24() {\\n        assertThat(Challenge.maxTotal(new int[] { 70, -25, 78, -58, -49, -42, -77, -52, 93, -37 }), is(179));\\n    }\\n\\n    @Test\\n    public void test25() {\\n        assertThat(Challenge.maxTotal(new int[] { -30, -29, 32, -60, 84, -13, 67, -77, 94, 64 }), is(341));\\n    }\\n\\n    @Test\\n    public void test26() {\\n        assertThat(Challenge.maxTotal(new int[] { -54, 7, 18, 83, -45, 68, 0, 78, 55, -30 }), is(302));\\n    }\\n\\n    @Test\\n    public void test27() {\\n        assertThat(Challenge.maxTotal(new int[] { -81, -51, 63, 94, 22, -91, -75, 75, 28, -97 }), is(282));\\n    }\\n\\n    @Test\\n    public void test28() {\\n        assertThat(Challenge.maxTotal(new int[] { 69, -34, -94, -50, -94, -38, -73, 33, 39, -99 }), is(69));\\n    }\\n\\n    @Test\\n    public void test29() {\\n        assertThat(Challenge.maxTotal(new int[] { -60, -69, -55, -69, 5, 14, 97, 59, 93, 15 }), is(278));\\n    }\\n\\n    @Test\\n    public void test30() {\\n        assertThat(Challenge.maxTotal(new int[] { 48, 77, -31, 74, 39, 8, -22, 24, 87, 10 }), is(325));\\n    }\\n\\n    @Test\\n    public void test31() {\\n        assertThat(Challenge.maxTotal(new int[] { 56, 24, 46, 28, 61, 38, -32, 85, -36, -80 }), is(286));\\n    }\\n\\n    @Test\\n    public void test32() {\\n        assertThat(Challenge.maxTotal(new int[] { -73, 72, 94, -5, 72, 0, 30, -93, -24, -10 }), is(268));\\n    }\\n\\n    @Test\\n    public void test33() {\\n        assertThat(Challenge.maxTotal(new int[] { -48, 75, 31, -31, 29, 74, -56, -14, 7, -55 }), is(216));\\n    }\\n\\n    @Test\\n    public void test34() {\\n        assertThat(Challenge.maxTotal(new int[] { -11, -92, 89, -23, -67, 45, 89, 10, -28, 76 }), is(309));\\n    }\\n\\n    @Test\\n    public void test35() {\\n        assertThat(Challenge.maxTotal(new int[] { 37, -9, -27, -71, 62, 25, -55, 50, -56, -41 }), is(165));\\n    }\\n\\n    @Test\\n    public void test36() {\\n        assertThat(Challenge.maxTotal(new int[] { 45, -34, 48, 19, 92, 73, -72, 67, 92, -32 }), is(372));\\n    }\\n\\n    @Test\\n    public void test37() {\\n        assertThat(Challenge.maxTotal(new int[] { -26, -1, -37, 25, 4, -42, -44, -59, 83, 27 }), is(138));\\n    }\\n\\n    @Test\\n    public void test38() {\\n        assertThat(Challenge.maxTotal(new int[] { -44, 92, -98, -8, -88, -65, 56, 66, -64, 35 }), is(241));\\n    }\\n\\n    @Test\\n    public void test39() {\\n        assertThat(Challenge.maxTotal(new int[] { 45, -12, -73, 1, -6, -75, 94, 41, -7, -67 }), is(175));\\n    }\\n\\n    @Test\\n    public void test40() {\\n        assertThat(Challenge.maxTotal(new int[] { 68, -27, -25, -54, -65, -20, 97, 61, 69, 31 }), is(326));\\n    }\\n\\n    @Test\\n    public void test41() {\\n        assertThat(Challenge.maxTotal(new int[] { 11, -14, -9, -32, 79, -62, 81, -78, 62, -91 }), is(224));\\n    }\\n\\n    @Test\\n    public void test42() {\\n        assertThat(Challenge.maxTotal(new int[] { -6, -82, 41, -44, 12, -10, 48, 84, 2, -18 }), is(187));\\n    }\\n\\n    @Test\\n    public void test43() {\\n        assertThat(Challenge.maxTotal(new int[] { 8, -4, 19, -81, 26, -10, -96, 47, 50, 64 }), is(206));\\n    }\\n\\n    @Test\\n    public void test44() {\\n        assertThat(Challenge.maxTotal(new int[] { 1, -98, 69, -46, -88, 12, 23, 85, 6, -18 }), is(195));\\n    }\\n\\n    @Test\\n    public void test45() {\\n        assertThat(Challenge.maxTotal(new int[] { 65, 46, 62, 62, 0, -79, -35, -53, 43, 73 }), is(308));\\n    }\\n\\n    @Test\\n    public void test46() {\\n        assertThat(Challenge.maxTotal(new int[] { 38, 8, 48, -1, -52, -22, 12, -61, -90, 9 }), is(115));\\n    }\\n\\n    @Test\\n    public void test47() {\\n        assertThat(Challenge.maxTotal(new int[] { -48, 74, 81, -66, 33, -89, 16, 13, -82, 37 }), is(241));\\n    }\\n\\n    @Test\\n    public void test48() {\\n        assertThat(Challenge.maxTotal(new int[] { -88, 3, 30, -16, 57, 17, -46, 26, -33, -55 }), is(133));\\n    }\\n\\n    @Test\\n    public void test49() {\\n        assertThat(Challenge.maxTotal(new int[] { 4, -8, 28, 100, 71, -10, 7, 36, -57, 18 }), is(253));\\n    }\\n\\n    @Test\\n    public void test50() {\\n        assertThat(Challenge.maxTotal(new int[] { -41, 73, 25, -55, 78, -76, -77, -80, 70, 78 }), is(324));\\n    }\\n\\n    @Test\\n    public void test51() {\\n        assertThat(Challenge.maxTotal(new int[] { 3, -84, -65, -38, 80, -57, -75, -42, 87, -23 }), is(109));\\n    }\\n\\n    @Test\\n    public void test52() {\\n        assertThat(Challenge.maxTotal(new int[] { -92, -18, 28, -63, 99, -80, -89, 89, -95, -27 }), is(171));\\n    }\\n\\n    @Test\\n    public void test53() {\\n        assertThat(Challenge.maxTotal(new int[] { 32, -100, 29, -81, 14, 19, 23, -10, 55, -57 }), is(158));\\n    }\\n\\n}\",\"language\":\"java\",\"summary\":\"Given an array of 10 numbers, return the maximum possible total made by summing just  5 of the 10 numbers.\\n\\nExamples\\nmaxTotal([1, 1, 0, 1, 3, 10, 10, 10, 10, 1]) ➞ 43\\n\\nmaxTotal([0, 0, 0, 0, 0, 0, 0, 0, 0, 100]) ➞ 100\\n\\nmaxTotal([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ 40\\n\\nNotes\\nYou can select any 5 numbers from the given array to form maximum possible total.\",\"tags\":[\"arrays\",\"language_fundamentals\",\"sorting\"],\"timestamp\":{\"$date\":1590941679996},\"title\":\"Maximum Possible Total\",\"stats\":{\"completed\":{\"total\":309,\"ratings\":[1,1,1,1,1,1,1,1,1,1,0,1,2,1,1,1,0,1,2,1,0,0,2,0,1,1,2,2,0,0,1,2,2,0,2,0,2,1,2,1,0,1,5,0,2,0,1,2,1,3,1,1,0,1,2,1,2,0,1,1,0,1,1,1,1,1,0,0,1,1,1,1,1,2,0,2,3,0,2,1,2,1,0,0,3,1,2,1,2,0,1,0,1,0,1,1,1,1,1,1,1,2,1,1,1,1,2,1,1,2,1,0,2,0,1,0,0,1,1,1,3,1,0,2,1,1,3,5,2,0,0,1,0,1,2,2,2,1,1,2,1,1,2,0,1,2,1,0,2,2,2,0,1,0,1,2,2,1,0,0,1,1,1,1,0,1,1,2,1,0,1,1,1,2,1,1,1,2,0,1,1,1,1,1,0,0,1,3,2,1,5,1,2,1,1,2,1,0,1,1,1,2,1,1,3,0,2,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,0,1,0,0,1],\"rators\":[\"YLqdr7bYjwew2KM4N\",\"hB5mgzMwQSnhBzi7P\",\"zKPtimGM7CLYNYB4S\",\"Es4eX2stRpyoXeC7f\",\"QGpkEinvqWKqKTERq\",\"jyoLggHk8xQKZuoQC\",\"s36kjeSbP3n582KfG\",\"JfW3LXkB26obGCDrg\",\"etoSR23iELGGgs9rA\",\"YLwJkF2wuL3n9o6a2\",\"DzLdw6wEL2Nt5mrsp\",\"82weQfHHmno4Mq4X7\",\"Ctuq7Wc8QPQmzwPK3\",\"8SabHk4meXzHQWaLb\",\"X8iWCqQ7mQG3DJ5Wr\",\"e85WYqSpXbCb3iH4H\",\"9xJpSQm6BFmgL3ee9\",\"B4pxRqzo43M7S8FbP\",\"GEzaJZ2cPjENT4ERQ\",\"CggGfsERnPKGupFWp\",\"jDTGwryGygbZiqCEg\",\"Kso7rzAKB4TTCPKgM\",\"PErEzX9YFvY2Yzfh2\",\"vRXuYYBNuHEQ29fbm\",\"st6dHoprA7daEGcQr\",\"3EfDGZ9Sgz5zxzD7a\",\"ipYXWBstjMY4qMWfy\",\"HcPmxj2eR5enFozo8\",\"AfMFW7KGW22bHWuuz\",\"7QJ257hnEQTZqcFv5\",\"YFHkjbM6obMSj24zi\",\"wwLsGETp2txCdQiJa\",\"HdZ55zdNW4gQ45q5R\",\"kkyZ4oyYQC898Nttj\",\"5seiNqw6ZXoF2GRRd\",\"uYv96ZSpA7tBHoAGX\",\"sA5fB2CwNgtz7xdwf\",\"2y3DQSYBRFDNCqWsW\",\"fZjkX29nhRTWWb75k\",\"NsQ8qYQQ47gSPtQkK\",\"Yohr2MmAyaWGMbB35\",\"a49eNnfRwSMxsDJXf\",\"8zZ6xmzpiFair25qr\",\"yv7c4H2jimSKHEjtG\",\"J9zJq7PMGb6mqzcHW\",\"Yp7uvStL97cC9fKkY\",\"C9yBWYcZsjmJYww3K\",\"WZujpe8yQAyZmpWHg\",\"DzvdGwHEjqsX7wyKr\",\"htXCitorobtqYymjN\",\"meS77LKqRswhF5LAy\",\"P7zedbjaFw8YDzLz7\",\"oMLSgpSFQnY4ui8cB\",\"TrquEHytntLKHA4m2\",\"Yom3RzkMYpweE8cbS\",\"wYYMNPe8nSiJFbvJw\",\"zwruFCmuHkwJTpYqg\",\"y6kfyYmydcD8tkBk7\",\"DkSMZ3jZLkwviKb9g\",\"rvojHhKH3DaxotefQ\",\"rWhXHhzF4W8bea6LP\",\"AeJSxRqw2dJZuGvdk\",\"45FXSeKSLChn3gEhc\",\"BmMA5FBX7NKpLj8ur\",\"smuLDcXt5RcXQQMKZ\",\"cR3ibTMxLyEdDFCHY\",\"A4PkKCWXffBTbMJdP\",\"SE5G2Caf3btnuGmz6\",\"SFGosgfANS7JGZM5y\",\"62Q2HcfLE6SGphZkT\",\"GEDsDpNX4QMhZAxtJ\",\"EcKPDmD4GmeFJGDTL\",\"TBamPvEAh6xARn8Kd\",\"osXNzc2aCxspRwheS\",\"PytNZK9mNiRiZxPrm\",\"QXkrEiAuhuXaZmL4C\",\"MheZZ3iYhdZ4HTB83\",\"g4NCSxxHqHCGMpWwT\",\"muXMnzQwGLzN6j2Jr\",\"hwbwxWP5aAjehDajX\",\"nbH6pjzJS9Z35JD9r\",\"RhPg33AdzvSZmibXa\",\"Ha5J49rhojBRy3BaM\",\"DAQX9mhHdMTqyYbvh\",\"f6uGKbmMdBYCjrMBh\",\"KxLMWekCxzy2Eem7u\",\"TCTZucJN3tJh5t7MB\",\"LQ9T6dPa3nXcZdbZq\",\"NzJKK8Cuf3bcqZfcw\",\"a3EGfz6xssdgQEd6y\",\"kGhC9JMAKk9Ngyiqh\",\"Zygvs2nKL23fCEPAS\",\"R2EJfZ2yGCuFquWrM\",\"gZG7f8kx9MGWzrKDC\",\"6fWwjSDuMGwbDDAkD\",\"hDeaTsprkH6CmvSAR\",\"SuWzP6DPpCZvX2cQd\",\"vhqcr9L2927i27SYJ\",\"cGebawowzCKcFn8gq\",\"FrorBN8wRAoptuxtR\",\"QjLAPemXmmRwFrfRe\",\"KCEsMas5BbmiD2Q9K\",\"YcjwCvYut6834Jzd8\",\"ovqx6WjgmuvhNaiQR\",\"WXqmWx95CgqqcXSgy\",\"TF56N5G8CGnCTy23E\",\"hPx9H3YM8j2k94DNW\",\"DcFnHfpg5TbMhMLP2\",\"hpDwPvZNzMSfxBDcE\",\"kuxkd9Rj2ejfusa7G\",\"Fd9765rksgPK4E2Zy\",\"fRYcPHuyEdqngMzC4\",\"p3tkuLoxm3TzJNj2D\",\"KBDkh5xTD5yNmaKmS\",\"9yBBgvZphyHsqFa93\",\"FqmMp5FTuFd78LZyk\",\"FN3Yac9P6EKBAmkpa\",\"XcLNNDa5gDSyrgKtv\",\"b5uSnrRYzy85dpKQN\",\"PTRYb5rBAmcdP4q87\",\"aT4e5PXghY4r4nFto\",\"kh7Tw42Li3AW5Jej4\",\"ZiN6yB9rACMaYgseC\",\"ZkvBs5oddaBfKj28G\",\"kQRtmSZfHdSzFserc\",\"gpd8yji9GXJruAtje\",\"mQCQNauuBvtmnrCLT\",\"azAzSkvJd7eyXY9x9\",\"zTEKMLMevG8xfxEj6\",\"qTXNwXBDtH3j6t7hw\",\"pi76g3eRpnKrhee2a\",\"MBEwq8srjd2oA5W58\",\"8AvGnwLnDrHXAwX38\",\"jb9RLyyuo565bKDzN\",\"ydF8Re5wK8MmaDbLh\",\"bjKYBdDcGMRTfooBs\",\"JszPst3958te56jFk\",\"SfmXqCfDksMb883DC\",\"a777e8chPvJkY3tKa\",\"unNqQjSHzkb4pCzEu\",\"hx3ZWiCKNtqwMWFCt\",\"ygmKmjF4ja52BrNMR\",\"J7epB3qSQJ2E8vWkY\",\"6ehQMeGtrhnhot5zK\",\"gXTAie79kiw28tx5u\",\"7F3i3uNDxhZM6mckM\",\"gBGjCfJvPHswDM5JQ\",\"66AfbqGGg8oz7WWs7\",\"gfT6pD7sw5gGgKTHq\",\"tnYXC3cGqycxRzCgT\",\"HTHTaRGeFB6tGKRCJ\",\"2xFvy6u3hE4LtCXMD\",\"WHSB76uqJrCf2XKsw\",\"h8TPaYSrD6pkrazpJ\",\"32uy2LgegdmLGpebX\",\"5TaPWyRv9DZWWodp8\",\"NdLzb3BZ5J8ftnCkS\",\"yBeWtGNg9yuECLqGQ\",\"cJmmvnmJSXvBXtydi\",\"PmfzvaX5ZJscpvHXc\",\"oMfq73A434YWhSuWQ\",\"mG8HqKiAQFTdRZthG\",\"P5BhjZxyeHQYTNyB9\",\"8Xx8nWXRydHDBGfQf\",\"jXTnL3JatkKjoifyb\",\"Tf7TJFSPktJBgLA4k\",\"Q2u7eLt9YmNXjD9J7\",\"7gBLtxKryhTryH5zb\",\"QKwzvqWHTffHsNPu6\",\"bWWFscsAr66ZWHo28\",\"cueHAmTrcWuowXf58\",\"5YcHZbmJ8uc8G5wZ5\",\"2cdvd8yuPLSwvGj9w\",\"rcvmayp8iSXxxEyMj\",\"Ym8AjbKGSJooun3nt\",\"eyvHBQ3fpSHwKniZP\",\"NQ4btGLfcvAnXjAyP\",\"zTM2NbjE6q5Q2HSeF\",\"8wkQj36S6ZCH5u8d3\",\"umcNKSZ597NfCXiyy\",\"fD2vkjhwWmxbs3aAn\",\"mQKWauR6b252TmdX4\",\"ymggGjk5woALZEbCC\",\"ikxSkiQjCjYPsFwMT\",\"CNc6rmwhbxkxEhHAp\",\"zZJnquegZvRuvFvep\",\"47PyFbZyxWuP9Bgga\",\"2ptN2mhjFwFcHyPZd\",\"uNK8tLSseShR8wcA4\",\"2Kzz5CubctKWfpPBp\",\"YL4rQWKadY7sGGtGG\",\"mYtKxYPbLLnePeJH3\",\"RGN3QTb5LXj4ZPPkj\",\"W56bWmpQeLJ9JEDsa\",\"69K8S2NbzkqE9pAe5\",\"g3JutupqGCe7p3xXM\",\"m8RTLuXqmythXHYZt\",\"ZjEdErENicjeqKZ8g\",\"44arJN5SYx3HyfetA\",\"5jDgvkGd4JwatrYXg\",\"oS2hDNjCMAkogigEK\",\"Yj7ftjzyP67R5NFrH\",\"hhxjQREtmHSheH9Pj\",\"uFfEio8nzDvL8emhp\",\"PJu3WcTpfRrvHfQiS\",\"LCuvvWMwiGuqTwNRi\",\"Wi4H6ayKsNDWWQCG5\",\"btabi3PdyisuY5tn9\",\"3SgSNoAB3sxaYeT3w\",\"Z3FxP27mgqAxhbbNX\",\"TWhtuegb8G7ka3Tvg\",\"xtKfQ4gjZwS87GFfk\",\"E2hpke7mHxAWsw5t9\",\"2cMqsHnrvuTYNMBeE\",\"f3RAbWvE6uESq7KE5\",\"cp3TsYd4r5vAdAAJ8\",\"QRv96jmNaYsWkxQEG\",\"7JvSKtxg4JJ42QnmN\",\"GkYtSbQuheBF4Enys\",\"EDesqdifGoa84QB6f\",\"a6JzrGCC5QdZLYnn5\",\"Qy9iR759KepTnfxjW\",\"FgEeQycsn67j9m7xK\",\"buX4mCQhtXCfBjeno\",\"yb8T3nuL4evaeJW6k\",\"wB47dmNBe3aFZZcFr\",\"zZfMwLuoERGmybgib\",\"xEX3TDY6C2h82dJTn\",\"YGPjXEDwGkx95hHxA\",\"eQXwk5zGckM8tCWYH\",\"NnymXePpDaZnp2fRd\",\"Y6N5mCB4KjcLeFFDK\",\"gaSgtyaESRd5FkvAm\",\"8qNSPHZBpmjSTt3tH\",\"fCTfZSgeDbRbTvDY4\",\"a6fgDQTddtZCKfnzR\",\"gbAGaynei4oA7DtWs\",\"4ySzqKC5s3ZRpG9di\",\"t55QWHi8o4teZxqqE\",\"d7PjwEf5Ff8W5eD64\",\"Hmm3rbADK2G34p574\",\"5LDvZHCDJqePeBrCg\",\"e9Cknxbx6o7Nb6REs\",\"tdinF6MRzC6AdNX8g\",\"b6PEkvr66YeCamroN\",\"GaJNJwcdyB9ueYFst\",\"xwfpazkwXHzXCzjqe\",\"r763cST6jKTknxxuN\",\"SgPjF69J25jT3dn4X\",\"FWvd7bxdv4YWAXiuJ\",\"vjA7tBCdTMRwS4T7q\",\"HXbTKW3jmmyRAsKrr\",\"P9ZEPWqzBv6ypvcYg\",\"sxci7DYKNa6q22Sjq\",\"wFRLGjA56kj7xyhmv\",\"pYonfGP4u9HNL9Z32\",\"zTtKiCbLWzaf2Yjo4\",\"YEgjigFpp6bNjTyYA\",\"uw47663LqPME8btaA\",\"Qv2jEtTnFCXX7cdd3\",\"rhS8qXRjZcpDXkwnE\",\"D3ASM3aWpcQ8gvnin\",\"srJ34BaybkQh3qRkM\",\"eW9R2SCoYnY8HBAdL\",\"uw8E83imJYpQiiPpP\",\"jCjCvyhqhpebkJn34\",\"TCvpT4EPb8qNssNB7\",\"AaAzAySpyo99siXzm\",\"afvP29FhRou2bTaav\",\"KMR6vNzvSKMA2cXnK\",\"WX5hR93N7nA2kMsJN\",\"RsujLHaML6L3KinzK\",\"PPdaczxSt2u5cmZYG\",\"FNYPC36yqPmTKDaqR\",\"5HGyJtoZ3AffzAZAv\",\"fNCE83jwoYxkaQeAi\",\"unqzSsxpxj9sZ7rbD\",\"ckQwFFWyLXmDQAaCn\",\"FxPDKKibxnZjGJLs6\",\"nSLvkGEpiYCtcBLaa\",\"KPz93xbvJ9x7okGs6\",\"ekzGKngknJdSLHM7P\",\"9du58gNDkWQEWivbB\",\"H3XLNCWB5yXt5YYXn\",\"iLrtRGuyCBMzBot9X\",\"8Rau64SCERgjtFbFM\",\"AgZX2Ju9YAKdohCFy\",\"r72oFMcCQh4rBsKHb\",\"nFbmNzMQ38TncmfQX\",\"3Gf7ikLijfoxabiPY\"],\"quality\":[5,5,2,5,4,5,5,4,5,5,5,5,5,5,5,5,5,4,4,5,5,5,5,5,5,5,5,4,5,5,3,5,5,5,5,4,3,5,5,5,5,4,5,5,3,5,5,4,4,5,5,5,5,1,5,3,5,5,4,5,5,4,5,4,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":4.584615384615384,\"family\":[{\"_id\":\"xbBkvdPeKtfLnw2ir\",\"language\":\"cpp\"},{\"_id\":\"TM5f33Mpu52m2jcat\",\"language\":\"java\"},{\"_id\":\"Wg3pBiH8HQggcfaTg\",\"language\":\"javascript\"},{\"_id\":\"73Xx5nt5MH6J2ponN\",\"language\":\"php\"},{\"_id\":\"YisvASuJeaooFLesN\",\"language\":\"python3\"},{\"_id\":\"cqrirPxJPYiiXe3Xm\",\"language\":\"ruby\"}]}}"]