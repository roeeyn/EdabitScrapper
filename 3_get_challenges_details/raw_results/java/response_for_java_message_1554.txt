a["{\"msg\":\"result\",\"id\":\"336\",\"result\":{\"_id\":\"E22KYTGMhwpYtjn8x\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class HalfSplit {\\n\\tpublic static int[] numberSplit(int n) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":1.4801762114537445,\"familyId\":\"tu4dxDrt6Z5orDmQN\",\"instructions\":\"Given a number, return a list containing the two halves of the number. If the number is odd, make the **rightmost number higher**.\\n\\n### Examples\\n```\\nnumberSplit(25) ➞ [12, 13]\\n\\nnumberSplit(4) ➞ [2, 2]\\n\\nnumberSplit(10) ➞ [5, 5]\\n\\nnumberSplit(11) ➞ [5, 6]\\n\\nnumberSplit(-9) ➞ [-5, -4]\\n```\\n\\n### Notes\\n- All numbers will be integers.\\n- You can expect negative numbers too.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"/** \\n================================== \\nTestGen 3.1 for JUnit 4.13.0 \\t\\t\\nTest Case: HalfSplit::numberSplit \\nTimestamp: 10/13/2020, 08:38:59 AM \\n---------------------------------- \\n® DARKKO 2020 © \\n================================== \\n\\n**/ \\n\\nimport static org.junit.Assert.assertArrayEquals; \\nimport org.junit.Test; \\n\\npublic class HalfSplitTest { \\n\\t\\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertArrayEquals(new int[] {2, 2}, HalfSplit.numberSplit(4));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertArrayEquals(new int[] {5, 5}, HalfSplit.numberSplit(10));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertArrayEquals(new int[] {5, 6}, HalfSplit.numberSplit(11));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertArrayEquals(new int[] {0, 0}, HalfSplit.numberSplit(0));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertArrayEquals(new int[] {0, 1}, HalfSplit.numberSplit(1));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertArrayEquals(new int[] {-2, -2}, HalfSplit.numberSplit(-4));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertArrayEquals(new int[] {-3, -2}, HalfSplit.numberSplit(-5));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertArrayEquals(new int[] {-5, -4}, HalfSplit.numberSplit(-9));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test09() { \\n\\t\\tassertArrayEquals(new int[] {12, 13}, HalfSplit.numberSplit(25));\\n\\t}\\n\\t\\n}\\n// end of tests\",\"language\":\"java\",\"quality\":4.711711711711712,\"summary\":\"Given a number, return a list containing the two halves of the number. If the number is odd, make the rightmost number higher.\\n\\nExamples\\nnumberSplit(25) ➞ [12, 13]\\n\\nnumberSplit(4) ➞ [2, 2]\\n\\nnumberSplit(10) ➞ [5, 5]\\n\\nnumberSplit(11) ➞ [5, 6]\\n\\nnumberSplit(-9) ➞ [-5, -4]\\n\\nNotes\\nAll numbers will be integers.\\nYou can expect negative numbers too.\",\"tags\":[\"numbers\",\"arrays\",\"math\"],\"timestamp\":{\"$date\":1602549675272},\"title\":\"Number Split\",\"stats\":{\"completed\":{\"total\":356,\"ratings\":[1,1,1,1,1,1,1,2,1,2,2,2,1,3,2,2,2,2,1,2,2,1,1,1,0,1,1,3,1,2,2,0,1,2,0,0,1,2,1,2,2,2,1,2,1,0,1,2,2,1,1,1,2,0,3,1,1,1,1,1,1,1,1,1,2,0,2,2,1,1,1,1,1,1,3,0,2,5,2,0,1,0,2,1,2,2,2,0,1,2,2,2,5,1,0,2,1,1,2,2,2,2,2,2,2,2,0,1,2,2,2,2,0,1,2,2,2,2,2,0,3,2,1,2,1,1,2,1,1,2,1,2,2,2,1,2,1,1,2,1,1,2,2,1,2,3,0,1,2,2,2,1,2,1,1,1,2,0,1,2,1,0,1,2,1,1,2,0,1,0,2,3,1,1,2,1,3,3,2,2,0,2,2,1,1,0,2,1,1,5,2,2,1,1,2,2,2,1,0,3,1,2,2,2,1,1,3,2,1,2,0,2,3,2,2,2,1,1,1,1,1,2,2,2,2,2,1],\"quality\":[4,5,5,5,5,4,3,5,5,5,5,5,5,4,4,4,5,5,5,5,5,5,5,3,5,5,4,5,5,5,4,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,5,5,5,3,4,5,3,5,5,5,5,5,5,5,5,5,5,5,5,4,5,5,5,5,5,5,5,5,5,4,5,5,5,5,5,5,5,5,1,5,5,5,5,4,5,5,4,5,5,5,5,4,5,5,5,5,5,3,5,5,5,2,5,5,5],\"rators\":[\"a777e8chPvJkY3tKa\",\"cueHAmTrcWuowXf58\",\"C9yBWYcZsjmJYww3K\",\"J7epB3qSQJ2E8vWkY\",\"kQRtmSZfHdSzFserc\",\"Es4eX2stRpyoXeC7f\",\"gXTAie79kiw28tx5u\",\"dPeaG87LMdYeD5xLB\",\"DzvdGwHEjqsX7wyKr\",\"yXGiiSAR5nBHnH3yr\",\"rvojHhKH3DaxotefQ\",\"azAzSkvJd7eyXY9x9\",\"Fdq6CxMWZL8WZiNaM\",\"etoSR23iELGGgs9rA\",\"3ToQTxkS6AAoPaEor\",\"yGoWiz7RJecyh2kuN\",\"9toJmYWtyPgmyGood\",\"v5K8KpSaQ6z49gGaA\",\"TZ5KDRSsioLi5rDoj\",\"2Zia4a4CcR3JkWMMc\",\"paM4HgbAJRfbxNG73\",\"LMdaASJRZ7E7sj4R2\",\"XJEuFkxFzrv7hCrmh\",\"TrquEHytntLKHA4m2\",\"jb9RLyyuo565bKDzN\",\"arsuGN4JCiHmLuwve\",\"AeJSxRqw2dJZuGvdk\",\"rWhXHhzF4W8bea6LP\",\"oMZovHkR6QqNvQwyc\",\"DkSMZ3jZLkwviKb9g\",\"zTEKMLMevG8xfxEj6\",\"oMfq73A434YWhSuWQ\",\"mG8HqKiAQFTdRZthG\",\"8Xx8nWXRydHDBGfQf\",\"Ym8AjbKGSJooun3nt\",\"BbcH2NLjE4tKAZ3wR\",\"jXTnL3JatkKjoifyb\",\"yd5PakB2z33q2JrTZ\",\"WA78YvYQLmYo3uoDp\",\"66AfbqGGg8oz7WWs7\",\"eHTHv5FyLkpGTBJJr\",\"P5BhjZxyeHQYTNyB9\",\"oth47e7A8TopBYdjr\",\"kabqCExooax4JEQHE\",\"tyLS9T6YMfg9fMtYJ\",\"s5qoCq4dYbkHcYxyz\",\"hDeaTsprkH6CmvSAR\",\"jyoLggHk8xQKZuoQC\",\"nmMiWvyJKp6nZEpve\",\"ng6HiP4FaPD39csb4\",\"qaPjAANdnxFnWfj5d\",\"zE46SymvixkeFJmPM\",\"zTM2NbjE6q5Q2HSeF\",\"dcW9oK2uRo8h8mBe2\",\"bWWFscsAr66ZWHo28\",\"R6Br35rEWAquiTjuN\",\"kh7Tw42Li3AW5Jej4\",\"LqdyBWEf54TDYk2ni\",\"LrxmC8RNrrwRyNqfb\",\"GiqPq82is4HGWdZHA\",\"unNqQjSHzkb4pCzEu\",\"RAEFpazbe6mhx3PLb\",\"RGN3QTb5LXj4ZPPkj\",\"8paynGt66tAKJivFF\",\"jm4tNFjsgYKW5TZfp\",\"rjW8KKnKFkRa6BPxz\",\"vGMyM3QjLCMcPLi6D\",\"udHFfcqNNej6udnpP\",\"QAeGp6MWj6fMBMyrE\",\"fJAnQriWjfZA5EFCK\",\"2bemiz7sjLjCbA5ui\",\"9J3mEqAuhrnY4Hxxq\",\"cYcENRkajQioCLH9u\",\"bc2GyS4wrrowsz4yi\",\"62qNJjtmkRYvX5kKB\",\"pi76g3eRpnKrhee2a\",\"a5Y8ZA5qq2eupPK65\",\"HZRcc8dZ3CiDXsnYG\",\"LFSASkxgw9hr3KqmC\",\"p2woPCQKXuWJCwffJ\",\"N7avy6uzsmrpxNioD\",\"L23hXCKLuxXL6b9Et\",\"B59ANYuNBPaEhMJGq\",\"j5QzY7Rc4fqdTdxuv\",\"aH9yER5QQ4bFBN8SR\",\"2WuHy4RPf5WuTQHhq\",\"y6kfyYmydcD8tkBk7\",\"4ocXv6asMQDvx9N5D\",\"pLbKctdZ6zMDWWubr\",\"eL4ZiEd4Yx7N3yHSs\",\"uvjojfu9nKd5s4eLW\",\"zxppLGfTBXNGymB6H\",\"Niu8fko5o4JjSKBQA\",\"8TzBqxbEwD8fWe6CE\",\"uozaSJRDCJQ8kF7cw\",\"fbgn5575LS3jsxABM\",\"W56bWmpQeLJ9JEDsa\",\"4HGnF83CFoW6BNv9p\",\"5Mk9r84xypgC5eWq5\",\"jrHy3YPT6EvJLxxst\",\"jybNggaCTZnT6TdFA\",\"82weQfHHmno4Mq4X7\",\"hHa74AhXKXxGa2aEZ\",\"aBCMPWTrbiJ5vZPyn\",\"mQKWauR6b252TmdX4\",\"eJJ3nMgjiNzihbKNM\",\"FrqMhZ8gxxPQvf7PH\",\"qMWW8grjhsJN45oLN\",\"r3LXC9Z9sHHshTKtq\",\"8gRwcAqPftCN4ifgf\",\"Na5gsRWjCPdQ7F4Dt\",\"7FKwxbwYkAywfpshB\",\"vRXuYYBNuHEQ29fbm\",\"oGzt3zRXWSp78pNTf\",\"8eeD5uo6tWDhWX6Wi\",\"EuAbxcNEKxbzZQTWx\",\"GKjEwnGrb58oSTPnu\",\"3oJd9WbgQLTWkHHXp\",\"Nb6LYPoQP6KJZt8mz\",\"DHbyyWS5CF6XPernQ\",\"wpvJWmW9TxQQAZk4J\",\"ymqdHfJYMuxfsYo6R\",\"dYjSGgBXNYK2GY9XH\",\"g55imZLKq3MrxcMeX\",\"PMhktjGLXhjBLmb4F\",\"aXGZ3jouhzNhHkRTG\",\"bGcjjiNzY3ncqE5Ep\",\"fRYcPHuyEdqngMzC4\",\"XQS4jE76BQZxd8xqB\",\"btabi3PdyisuY5tn9\",\"ZJLAEFYxd5Eim72J9\",\"JeSHEyHLRmScypBNw\",\"jguXexk36SCqLC7Pg\",\"WX6R5brerMTrHs5ZM\",\"ttt8pRugaMChbuMb4\",\"g3JutupqGCe7p3xXM\",\"fD2vkjhwWmxbs3aAn\",\"pokBD5HvY58t8Aicu\",\"vs78fRQErHJZWFaTc\",\"hD6sfDtntpqT8NR2o\",\"g6ScuiFbRMJJodTDG\",\"fhFZp6Frsw8higEJ6\",\"kBBiaQM4y5q5kgyNt\",\"P5qFWmHtGZip3KyHr\",\"cf7XxBWEdAGXPDGf9\",\"6eZLvPooEzhfPJBy3\",\"N3tyYcBfjKQmSmDvf\",\"SExX3m5YftBWmsk2e\",\"Eaec6ZTLtcpW3Jobx\",\"cHKGHoFD2Lz27Pm5F\",\"xPn8sdzzXj6DE7e6R\",\"GBLXSzmKSde6y2bsy\",\"RRcPB8Si2eJSYLZKR\",\"NQ4btGLfcvAnXjAyP\",\"WdFdxvoDg8q8N7NqM\",\"Z96GhGMX4TytWoq8J\",\"Ec7nnpNGLhW9jTB6b\",\"BJpN2MvopuwizLreT\",\"NNMT6RQgtgCYawgr3\",\"Jk9R4Lggki2cJz6LN\",\"JFodQijHHdRkkrZvT\",\"uYv96ZSpA7tBHoAGX\",\"FEZ2KczS68C6CrbJF\",\"obKQJXJNv37kPek7h\",\"hcLpuGGve3KGqrx9M\",\"gBGjCfJvPHswDM5JQ\",\"YLqdr7bYjwew2KM4N\",\"YqCCpaAu6ecGxxwJ5\",\"w883snt8ALo793vDg\",\"R7i2rudZas6Epiq2T\",\"a49eNnfRwSMxsDJXf\",\"2cdvd8yuPLSwvGj9w\",\"QbqQ8mvcLurA2Dvf7\",\"E8Q6h8ogLP679bvGA\",\"tnYXC3cGqycxRzCgT\",\"rBdHpG9m3SKN7qu2Q\",\"QrveRA7svT9YFxaSM\",\"JazMRqJS77pfKFH2t\",\"9vyjn4WyWtJ6o2wop\",\"QqKtk9iG9e5Cbdy3b\",\"DrkR35NqnP9NDLbq6\",\"PX65MeX2DnusqSnzF\",\"aLoQFsgSwMiyyEENQ\",\"NSvSyX3rvsfA3JgAH\",\"XAEZwNdFPMswpR5Rj\",\"mFfahhFdaoQPkzYdh\",\"9AW9qZKgc8Qx2kYAP\",\"uFfEio8nzDvL8emhp\",\"ny3kQWx7tvRLaHmfh\",\"AhX6mWhRK42K2ARQk\",\"9HAvpdAo32f6bM3uM\",\"E2hpke7mHxAWsw5t9\",\"8PMyx5vsQrkmM3CrY\",\"GkYtSbQuheBF4Enys\",\"eQXwk5zGckM8tCWYH\",\"Po3v3dHCk6wYGKMwi\",\"LPt8WWo9vGouKvZzb\",\"WBje5xYzFDHZFXtWF\",\"FgEeQycsn67j9m7xK\",\"bur3yQ8s34zqKGEro\",\"wB47dmNBe3aFZZcFr\",\"agprEGquTN97GitbZ\",\"oS8PtRjcDzutDWBJW\",\"4ySzqKC5s3ZRpG9di\",\"buX4mCQhtXCfBjeno\",\"QRv96jmNaYsWkxQEG\",\"L2ZicYhibFcuxfwPd\",\"cyffsaMGoowRrRMyp\",\"zZfMwLuoERGmybgib\",\"hhxjQREtmHSheH9Pj\",\"ab9f4ce8G9pZnRoT7\",\"u5EAu992iJnHRL2Eb\",\"BrPXZscWEqEbhoMTN\",\"87aPsoGwZuZ7rSy5e\",\"qFDHZokQQSkqKeTES\",\"dAFK9prG3KqRYqCcX\",\"ckMvGF5TAyCwcxJBm\",\"LZSxphM8vH4A6Deqn\",\"tzFfezQfyjo8jWozQ\",\"iwPwuaaE86cYuE7wM\",\"3fFNDjDWHMfcvwidT\",\"drAAhaSiMncZ2XcAk\",\"8qNSPHZBpmjSTt3tH\",\"y3ZHAPcB5DDS9Dpnq\",\"nHj7SC5cnmkTApbgY\",\"a6fgDQTddtZCKfnzR\",\"ShTGNueuZC5GmAPNH\",\"cW3JLc64ExyWk3fkG\",\"YLwJkF2wuL3n9o6a2\",\"tRnvSxsubDBN4ZGeo\",\"GScewk7MqJoeEPGwu\",\"6rvJwN4mcX7iYGjY7\",\"JLKvK2i5zoGMbKJtK\",\"Ag5fRrZ9MrAZc9vpj\",\"3SgSNoAB3sxaYeT3w\",\"QKXHrdKfQTBG7b9y9\",\"xitdKNzx9hD98Nqpj\",\"hrDn68HaE9z3hP4Lm\",\"xpCx3SrKyHN7z8PmG\",\"6WYzd83SszbJTTZwD\",\"eZGQaFkwymGQzQMba\",\"JYJLDM6kQicApbZE4\",\"D6M23EcDXQfAk4Lag\",\"Brg8XtxFSvprgLuHw\",\"Dptt7WnqcjbA5KfBy\",\"fTTu54u3KfZqMh2Yy\",\"MmfE3hAhS8Tx5A6J7\",\"HsFc9PgmpP2X9Fwh9\",\"7YoyZffg2y8dvgWk7\",\"wFRLGjA56kj7xyhmv\",\"SgPjF69J25jT3dn4X\",\"4irv8Ebh9gRyRw9pC\",\"sxci7DYKNa6q22Sjq\",\"bdXCq7koLGHkjP4G4\",\"sMbu6hjTNttDF2kkw\",\"gKgcMDX84AThJ9rAE\",\"rhS8qXRjZcpDXkwnE\",\"mfm3gB39arY8Rjb2y\",\"HXbTKW3jmmyRAsKrr\",\"uw47663LqPME8btaA\",\"SDnSk8mGaAg2e77Sb\",\"um8DnXCJrky3Zna8r\",\"yaZ7HC2tKbtCwqzNv\",\"hw5macuthRQmKoXkN\",\"QD7mPMD8gmTP56nPv\",\"STSyZ6u5zNZZxynMf\",\"TRS7J54aXgaBj6mC3\",\"7WxTuY5BSgZdA5ppD\",\"kzStpZqgwmSvH8DSs\",\"tXCkuS5F9Zij44GZD\",\"KmhR8CWfpSkeHp2CA\",\"srJ34BaybkQh3qRkM\",\"KKvyCXk9tMxooo77Q\",\"xEX3TDY6C2h82dJTn\",\"EtLpopwsya39oXZjE\",\"XmWJPAXHZLbvsk9r3\",\"WasCeNLBhL6D62wAn\",\"wTc283wowqsFisKNC\",\"jvaA5aPT92b8zjPmq\",\"Wi3giuDLn8bhzEebN\",\"nfs7YZayhCypa3FXQ\",\"29WEfSxna2eLaY6v5\",\"htXCitorobtqYymjN\",\"c4aLTCDHTvXhYh9Xp\",\"WBQFq3SZSRNsvZBDL\",\"s7kgsgnTYGspwBYb5\",\"gj87yXyoJxhoQLetq\",\"R7Xwk52SRibtNL6TF\",\"yEqvr83bTr5vMu4cx\",\"kKj26BvK3MAf8jfr9\",\"2qFwhDM9aiqt45uMs\",\"H2TNggjJLpTbGXuDF\",\"yAsNE5dP3XvuGRxv9\",\"DxvcAMpAR7Ckvrgbb\",\"6SMsGzJAEMzkY6AMu\",\"Y7o8JNxKAA5JThBsD\",\"T6hRjofbdNXqNfgiu\",\"LTHowif8iogZG6dio\",\"e5oMyDNNNTLCQFZmT\",\"xEY3sSBN8GGsbn8iP\",\"a2RdiPJbY2ajjgzsm\",\"WrWr7jcp8F662qXM6\",\"NdG6nDvrSPKy6RjNP\",\"vvngK3Z7SDiEzwC6u\",\"84Hgc5nEYKTJkfzr7\",\"WoPTp62D9jXSt5Zr9\",\"riBP9MdCu59kPfeJ6\",\"ikkjHDqBHu6fT3vGL\",\"io5D2FijiRvt6ePHy\",\"xC9XKgdhp9AqDYngr\",\"DZvz6WY5bQEneYzvv\",\"pZQmgMDdoi8YB7iKh\",\"oAyTvf48Jpd65iB4j\",\"J9zJq7PMGb6mqzcHW\",\"jCjCvyhqhpebkJn34\",\"PJu3WcTpfRrvHfQiS\",\"B4pxRqzo43M7S8FbP\",\"563onSvqgjToY79ah\",\"AeSmk2XWGcTLHB7PJ\",\"KMR6vNzvSKMA2cXnK\",\"xW9nC9h6p77YT2iso\",\"unqzSsxpxj9sZ7rbD\",\"FxPDKKibxnZjGJLs6\",\"mhBMMvTFLTTcKdtdv\",\"keJgCH4Xx9tA92uxu\",\"974cv448kw6Wu2JF6\",\"ckQwFFWyLXmDQAaCn\",\"jNNdZv3K5jHpEZPAQ\",\"NdkmK8atMJAf6QwHr\",\"XH6378Zm3WBm679yx\",\"nFbmNzMQ38TncmfQX\",\"Qv2jEtTnFCXX7cdd3\",\"Q2TD7GcXaL5F3d2LM\"]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":1},\"editorId\":\"a777e8chPvJkY3tKa\",\"family\":[{\"_id\":\"qHcgMgcPTLGyS9ozk\",\"language\":\"cpp\"},{\"_id\":\"E22KYTGMhwpYtjn8x\",\"language\":\"java\"},{\"_id\":\"xsi99TwpGyFC8KS6d\",\"language\":\"javascript\"},{\"_id\":\"EfkzZRgBWwQSC54fD\",\"language\":\"php\"},{\"_id\":\"9f3Mi6vHNcm8vRcSh\",\"language\":\"python3\"},{\"_id\":\"qonj5YqiB6oYHpJMe\",\"language\":\"ruby\"}]}}"]