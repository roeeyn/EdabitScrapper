a["{\"msg\":\"result\",\"id\":\"811\",\"result\":{\"_id\":\"9fu8xW6yQkPxyM6rG\",\"author\":\"Edward Clark\",\"authorId\":\"3pdgguqZgNDSAJSGm\",\"code\":\"public class Challenge {\\n\\tpublic static String[] scrambled(char[] letters, String[] dict, String mask) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":3.6363636363636362,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"pufLSzEQAPtXEFbmn\",\"instructions\":\"Write a function that receives an array of letters, an array of words (dictionary) and a mask.  Return an array of words, sorted alphabetically, that match the given mask.\\n\\n### Examples\\n```\\nscrambled(['e', 'c', 'd', 'r', 'e', 'e'], [”red”, “dee”, “cede”, “reed”, “creed”, “decree”], “*re**”) ➞ [“creed”]\\n\\nscrambled(['e', 'c', 'd', 'r', 'e', 'e'], [”red”, “dee”, “cede”, “reed”, “creed”, “decree”], “***”) ➞ [“dee”, “ree”]\\n```\\n### Notes\\nThe length of a mask will never exceed the number of letters given (or the longest word in the dictionary).\",\"lab\":\"import java.util.LinkedHashSet;\\nimport static org.hamcrest.core.Is.is;\\nimport org.junit.Test;\\nimport static org.junit.Assert.assertThat;\\n\\npublic class ChallengeTest {\\n  public static LinkedHashSet<String> dict = new LinkedHashSet<>();\\n  \\n  @Test\\n  public void test1() {\\n    assertThat(Challenge.scrambled(new char[]{'e','c','d','r','e','e'},\\n        recedeArray(), \\\"*re**\\\"),\\n      is(new String[]{\\\"creed\\\"}));\\n  }\\n\\n  @Test\\n  public void test2() {\\n    assertThat(Challenge.scrambled(new char[]{'e','c','d','r','e','e'},\\n        recedeArray(), \\\"***\\\"),\\n      is(new String[]{\\\"cee\\\",\\\"dee\\\",\\\"eer\\\",\\\"erd\\\",\\\"ere\\\",\\\"red\\\",\\\"ree\\\"}));\\n  }\\n  \\n  @Test\\n  public void test3() {\\n    assertThat(Challenge.scrambled(new char[]{'e','c','d','r','e','e'},\\n        recedeArray(), \\\"******\\\"),\\n      is(new String[]{\\\"decree\\\",\\\"recede\\\"}));\\n  }\\n\\n  @Test\\n  public void test4() {\\n    assertThat(Challenge.scrambled(new char[]{'e','c','d','r','e','e'},\\n        recedeArray(), \\\"c*d**\\\"),\\n      is(new String[]{\\\"ceder\\\",\\\"cedre\\\"}));\\n  }\\n\\n  @Test\\n  public void test5() {\\n    assertThat(Challenge.scrambled(new char[]{'e','c','d','r','e','e'},\\n        recedeArray(), \\\"d***\\\"),\\n      is(new String[]{\\\"deer\\\",\\\"dere\\\",\\\"dree\\\"}));\\n  }\\n  \\n  @Test\\n  public void test6() {\\n    assertThat(Challenge.scrambled(new char[]{'e','c','d','r','e','e'},\\n        recedeArray(), \\\"r***\\\"),\\n      is(new String[]{\\\"rede\\\",\\\"reed\\\"}));\\n  }       \\n  \\n  public static String[] recedeArray() {\\n    dict.add(\\\"cee\\\");\\n    dict.add(\\\"dee\\\");\\n    dict.add(\\\"eer\\\");\\n    dict.add(\\\"erd\\\");\\n    dict.add(\\\"ere\\\");\\n    dict.add(\\\"red\\\");\\n    dict.add(\\\"ree\\\");\\n    dict.add(\\\"cede\\\");\\n    dict.add(\\\"cere\\\");\\n    dict.add(\\\"cree\\\");\\n    dict.add(\\\"deer\\\");\\n    dict.add(\\\"dere\\\");\\n    dict.add(\\\"dree\\\");\\n    dict.add(\\\"rede\\\");\\n    dict.add(\\\"reed\\\");\\n    dict.add(\\\"ceder\\\");\\n    dict.add(\\\"cedre\\\");\\n    dict.add(\\\"cered\\\");\\n    dict.add(\\\"creed\\\");\\n    dict.add(\\\"decree\\\");\\n    dict.add(\\\"recede\\\");\\n\\n    String[] arr = new String[dict.size()];\\n    int k=0;\\n    for (String s : dict) {\\n      arr[k] = s;\\n      k++;\\n    }\\n\\n    return arr;\\n  }\\n}\",\"language\":\"java\",\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,5,5,5,5,4,1,0,3,1,3,5,5,2,5,0,5,1],\"rators\":[\"3pdgguqZgNDSAJSGm\",\"HsFc9PgmpP2X9Fwh9\",\"AyrEvM2GLX2jqM772\",\"Es4eX2stRpyoXeC7f\",\"9aHkSrEhWL7Tp928N\",\"rehehi2Tr2mwaEoJE\",\"oMLSgpSFQnY4ui8cB\",\"TrquEHytntLKHA4m2\",\"k63LjKkX5p7SYng7C\",\"QS45qu2DFXcCqpAnB\",\"Ym8AjbKGSJooun3nt\",\"RQL2PAWda9Bh79GNi\",\"gXTAie79kiw28tx5u\",\"7YbGHKwApShJ7J4NK\",\"LNCb5rksJLJ43L4Nw\",\"KMR6vNzvSKMA2cXnK\",\"sxci7DYKNa6q22Sjq\"],\"total\":21,\"quality\":[]},\"flags\":0},\"subscribers\":[\"3pdgguqZgNDSAJSGm\"],\"summary\":\"Write a function that receives an array of letters, an array of words (dictionary) and a mask.  Return an array of words, sorted alphabetically, that match the given mask.\\n\\nExamples\\nscrambled(['e', 'c', 'd', 'r', 'e', 'e'], [”red”, “dee”, “cede”, “reed”, “creed”, “decree”], “re*”) ➞ [“creed”]\\n\\nscrambled(['e', 'c', 'd', 'r', 'e', 'e'], [”red”, “dee”, “cede”, “r\",\"tags\":[\"algorithms\",\"strings\",\"arrays\",\"loops\"],\"timestamp\":{\"$date\":1570640292772},\"title\":\"Scrambled Letters\",\"isHidden\":false,\"quality\":0,\"family\":[{\"_id\":\"CYzL8zxo2Z3D5oWmf\",\"language\":\"cpp\"},{\"_id\":\"9fu8xW6yQkPxyM6rG\",\"language\":\"java\"},{\"_id\":\"dxeZkyPPCbfeZBSht\",\"language\":\"javascript\"},{\"_id\":\"f48nSAebxBNMfmc9D\",\"language\":\"python3\"},{\"_id\":\"9Qzd3PpEhi2SzHEEy\",\"language\":\"ruby\"}]}}"]