a["{\"msg\":\"result\",\"id\":\"621\",\"result\":{\"_id\":\"hLF2GH3SxbsFew3bC\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"public class Challenge {\\n  public static boolean isIcecreamSandwich(String str) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":2.25531914893617,\"familyId\":\"j88R4KsWK8tjxNk6k\",\"instructions\":\"An **ice cream sandwich** is a string that is formed by two identical ends and a different middle.\\n\\n#### Some examples of ice cream sandwiches:\\n```\\n\\\"AABBBAA\\\"\\n\\n\\\"3&&3\\\"\\n\\n\\\"yyyyymmmmmmmmyyyyy\\\"\\n\\n\\\"hhhhhhhhmhhhhhhhh\\\"\\n```\\n\\nNotice how **left** and **right** ends of the sandwich are identical in both **length** and in **repeating character**. The **middle** section is distinctly different.\\n\\n#### Not ice cream sandwiches:\\n```\\n\\\"BBBBB\\\"\\n// You can't have just plain icecream.\\n\\n\\\"AAACCCAA\\\"\\n// You can't have unequal sandwich ends.\\n\\n\\\"AACDCAA\\\"\\n// You can't have more than one filling.\\n\\n\\\"A\\\"\\n// You can't have fewer than 3 characters.\\n```\\n\\nWrite a function that returns `true` if a string is an **ice cream sandwich** and `false` otherwise.\\n\\n### Examples\\n```\\nisIcecreamSandwich(\\\"CDC\\\") ➞ true\\n\\nisIcecreamSandwich(\\\"AAABB\\\") ➞ false\\n\\nisIcecreamSandwich(\\\"AA\\\") ➞ false\\n```\\n\\n### Notes\\nAn ice cream sandwich must have a **minimum length of 3 characters**, and at least **two of these characters must be distinct** (you can't only have the filling!).\",\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n  @Test\\n  public void test1() {\\n    assertEquals(true, Challenge.isIcecreamSandwich(\\\"AABBBAA\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test2() {\\n    assertEquals(true, Challenge.isIcecreamSandwich(\\\"3&&3\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test3() {\\n    assertEquals(true, Challenge.isIcecreamSandwich(\\\"yyyyymmmmmmmmyyyyy\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test4() {\\n    assertEquals(true, Challenge.isIcecreamSandwich(\\\"hhhhhhhhmhhhhhhhh\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test5() {\\n    assertEquals(true, Challenge.isIcecreamSandwich(\\\"CDC\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test6() {\\n\\t\\tSystem.out.println(\\\"only filling\\\");\\n    assertEquals(false, Challenge.isIcecreamSandwich(\\\"BBBBB\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test7() {\\n\\t\\tSystem.out.println(\\\"ends are unbalanced\\\");\\n    assertEquals(false, Challenge.isIcecreamSandwich(\\\"AAACCCAA\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test8() {\\n\\t\\tSystem.out.println(\\\"can only have one type of filling\\\");\\n    assertEquals(false, Challenge.isIcecreamSandwich(\\\"AACDCAA\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test9() {\\n\\t\\tSystem.out.println(\\\"only one end\\\");\\n    assertEquals(false, Challenge.isIcecreamSandwich(\\\"AAABB\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test10() {\\n\\t\\tSystem.out.println(\\\"too short\\\");\\n    assertEquals(false, Challenge.isIcecreamSandwich(\\\"AA\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test11() {\\n\\t\\tSystem.out.println(\\\"too short\\\");\\n    assertEquals(false, Challenge.isIcecreamSandwich(\\\"A\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test12() {\\n\\t\\tSystem.out.println(\\\"too short\\\");\\n    assertEquals(false, Challenge.isIcecreamSandwich(\\\"\\\"));\\n  }\\n}\",\"language\":\"java\",\"summary\":\"An ice cream sandwich is a string that is formed by two identical ends and a different middle.\\n\\nSome examples of ice cream sandwiches:\\n\\\"AABBBAA\\\"\\n\\n\\\"3&&3\\\"\\n\\n\\\"yyyyymmmmmmmmyyyyy\\\"\\n\\n\\\"hhhhhhhhmhhhhhhhh\\\"\\n\\nNotice how left and right ends of the sandwich are identical in both length and in repeating character. The middle section is distinctly different.\\n\\nNot ice cream sa\",\"tags\":[\"strings\",\"language_fundamentals\",\"validation\"],\"timestamp\":{\"$date\":1568260855044},\"title\":\"Ice Cream Sandwich\",\"stats\":{\"completed\":{\"total\":52,\"ratings\":[2,2,2,2,2,3,2,2,3,2,3,2,2,1,2,1,2,3,4,3,3,0,1,3,3,4,2,0,1,2,1,2,2,1,3,3,3,2,3,2,3,3,3,2,3,3,3],\"rators\":[\"3pdgguqZgNDSAJSGm\",\"sxci7DYKNa6q22Sjq\",\"Y2aY95oSRPdTJXxtY\",\"cG4PEDMMx8jXhWP8T\",\"eXW8reZCCZHQzJjQi\",\"CYt2jTCEuK9dYWruk\",\"CLmJduqJHX83dM4Pd\",\"J9zJq7PMGb6mqzcHW\",\"fZjkX29nhRTWWb75k\",\"wYYMNPe8nSiJFbvJw\",\"fZky27mpbfX7soJKa\",\"Es4eX2stRpyoXeC7f\",\"Gg7NxiHxaDbW42eXL\",\"NsbHPeWBtAonYNXZc\",\"wbSLghDxkTjiYJrEH\",\"gGnDsJz5hr2t9MKCF\",\"8J2Dqqz9PaFufQzwY\",\"cjxsqXfkAPoadmppi\",\"imoNrk36ozReP939p\",\"4RHx3H8EwP2oboW8e\",\"TrquEHytntLKHA4m2\",\"jyoLggHk8xQKZuoQC\",\"pBMXMQem6BpSeooYT\",\"5seiNqw6ZXoF2GRRd\",\"dpJTai3i9aNkCS3sa\",\"rehehi2Tr2mwaEoJE\",\"k63LjKkX5p7SYng7C\",\"hxeKTpLc8vjMd8TMp\",\"gJbvbqosimaP4ZAYb\",\"itoJJQ6NNpdp4xTDb\",\"rrqninRkY77FL528B\",\"Ym8AjbKGSJooun3nt\",\"azAzSkvJd7eyXY9x9\",\"yXGiiSAR5nBHnH3yr\",\"DzvdGwHEjqsX7wyKr\",\"YL9pqyCu8xsds8J49\",\"mQKWauR6b252TmdX4\",\"buX4mCQhtXCfBjeno\",\"QN9kBxAMeR7Da8WNQ\",\"rhS8qXRjZcpDXkwnE\",\"2NJZbusRvu3eJ4tHu\",\"KMR6vNzvSKMA2cXnK\",\"htXCitorobtqYymjN\"],\"quality\":[5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":5,\"family\":[{\"_id\":\"GHaTpruxeoNc77Lto\",\"language\":\"cpp\"},{\"_id\":\"hLF2GH3SxbsFew3bC\",\"language\":\"java\"},{\"_id\":\"euDed7qoDzgvcHwdS\",\"language\":\"javascript\"},{\"_id\":\"qWKR6oDHu9pprDWrv\",\"language\":\"php\"},{\"_id\":\"7AA54JmzruLMwG6do\",\"language\":\"python3\"},{\"_id\":\"mJBftKks67zh4YTqm\",\"language\":\"ruby\"},{\"_id\":\"wL7hRFHtFbewkZtra\",\"language\":\"swift\"}]}}"]