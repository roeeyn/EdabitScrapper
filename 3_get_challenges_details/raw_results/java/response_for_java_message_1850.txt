a["{\"msg\":\"result\",\"id\":\"482\",\"result\":{\"_id\":\"4Az2B8MYAH3GbbxX6\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class NumberExpansion {\\n  public static String expandedForm(int n) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":1.7209302325581395,\"familyId\":\"aWkmTrRfyQPufNfvg\",\"instructions\":\"Create a function that expands a number into a string as shown below:\\n\\n```\\n54 ➞ \\\"50 + 4\\\"\\n70701 ➞ \\\"70000 + 700 + 1\\\"\\n466 ➞ \\\"400 + 60 + 6\\\"\\n```\\n\\n### Examples\\n```\\nexpandedForm(544) ➞ \\\"500 + 40 + 4\\\"\\n\\nexpandedForm(4666) ➞ \\\"4000 + 600 + 60 + 6\\\"\\n\\nexpandedForm(70304) ➞ \\\"70000 + 300 + 4\\\"\\n\\nexpandedForm(1037903) ➞ \\\"1000000 + 30000 + 7000 + 900 + 3\\\"\\n\\nexpandedForm(802539) ➞ \\\"800000 + 2000 + 500 + 30 + 9\\\"\\n```\\n\\n### Notes\\nN/A\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"/** \\n======================================== \\nTestGen 4.0 for JUnit 4.13.0 \\t\\t\\nTest Case: NumberExpansion::expandedForm \\nTimestamp: 03/15/2021 04:43:28 AM \\n---------------------------------------- \\n® DARKKO 2021 © \\n======================================== \\n\\n**/ \\n\\nimport static org.junit.Assert.assertEquals; \\nimport org.junit.Test; \\n\\npublic class NumberExpansionTest { \\n\\t\\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertEquals(\\\"10 + 2\\\", NumberExpansion.expandedForm(12));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertEquals(\\\"40 + 2\\\", NumberExpansion.expandedForm(42));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertEquals(\\\"500 + 40 + 4\\\", NumberExpansion.expandedForm(544));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertEquals(\\\"4000 + 600 + 60 + 6\\\", NumberExpansion.expandedForm(4666));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertEquals(\\\"70000 + 300 + 4\\\", NumberExpansion.expandedForm(70304));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertEquals(\\\"1000000 + 30000 + 7000 + 900 + 3\\\", NumberExpansion.expandedForm(1037903));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertEquals(\\\"800000 + 2000 + 500 + 30 + 9\\\", NumberExpansion.expandedForm(802539));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertEquals(\\\"3000000 + 300000 + 7000 + 90 + 8\\\", NumberExpansion.expandedForm(3307098));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test09() { \\n\\t\\tassertEquals(\\\"2000000 + 700000 + 30000 + 6000 + 600 + 90 + 2\\\", NumberExpansion.expandedForm(2736692));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() { \\n\\t\\tassertEquals(\\\"5000000 + 30000 + 700 + 8\\\", NumberExpansion.expandedForm(5030708));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test11() { \\n\\t\\tassertEquals(\\\"900000 + 3000 + 300 + 5\\\", NumberExpansion.expandedForm(903305));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test12() { \\n\\t\\tassertEquals(\\\"2000000 + 900000 + 800 + 30 + 7\\\", NumberExpansion.expandedForm(2900837));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test13() { \\n\\t\\tassertEquals(\\\"600000 + 7000 + 800 + 5\\\", NumberExpansion.expandedForm(607805));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test14() { \\n\\t\\tassertEquals(\\\"2000000 + 70000 + 500 + 4\\\", NumberExpansion.expandedForm(2070504));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test15() { \\n\\t\\tassertEquals(\\\"700000 + 600 + 80 + 1\\\", NumberExpansion.expandedForm(700681));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test16() { \\n\\t\\tassertEquals(\\\"70000 + 900 + 3\\\", NumberExpansion.expandedForm(70903));\\n\\t}\\n\\n}\\n// end of tests\",\"language\":\"java\",\"quality\":0,\"summary\":\"Create a function that expands a number into a string as shown below:\\n\\n54 ➞ \\\"50 + 4\\\"\\n70701 ➞ \\\"70000 + 700 + 1\\\"\\n466 ➞ \\\"400 + 60 + 6\\\"\\n\\nExamples\\nexpandedForm(544) ➞ \\\"500 + 40 + 4\\\"\\n\\nexpandedForm(4666) ➞ \\\"4000 + 600 + 60 + 6\\\"\\n\\nexpandedForm(70304) ➞ \\\"70000 + 300 + 4\\\"\\n\\nexpandedForm(1037903) ➞ \\\"1000000 + 30000 + 7000 + 900 + 3\\\"\\n\\nexpandedForm(802539) ➞ \\\"800000 + 2000 +\",\"tags\":[\"arrays\",\"language_fundamentals\",\"numbers\",\"math\"],\"timestamp\":{\"$date\":1615757291348},\"title\":\"Expand a Number I\",\"stats\":{\"completed\":{\"total\":43,\"ratings\":[1,1,1,1,1,2,2,1,2,2,1,1,2,1,1,2,2,2,2,1,2,2,2,2,2,3,2,2,2,2,2,0,2,1,2,2,2,2,2,3,2,2,2],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"Es4eX2stRpyoXeC7f\",\"LFSASkxgw9hr3KqmC\",\"YX7sffLHRAJe5J6Yr\",\"G4xbBCoq5TRoN27aM\",\"KsjvyGz7KggTMD6By\",\"LxnWCf3Pt7TTgBC8J\",\"ZQdMs98WAGtdRNYSP\",\"gBGjCfJvPHswDM5JQ\",\"Cn5dhL9883DPbhX6x\",\"chkPLjNHvrBZSDBCh\",\"7LMMvwPB8dfWNvaGm\",\"GkYtSbQuheBF4Enys\",\"a49eNnfRwSMxsDJXf\",\"82weQfHHmno4Mq4X7\",\"mG8HqKiAQFTdRZthG\",\"bur3yQ8s34zqKGEro\",\"zZfMwLuoERGmybgib\",\"jyoLggHk8xQKZuoQC\",\"txArt4JLGHZHT5cS6\",\"buX4mCQhtXCfBjeno\",\"DkSMZ3jZLkwviKb9g\",\"c7uBxu2rgY77H5d79\",\"qaPjAANdnxFnWfj5d\",\"4ySzqKC5s3ZRpG9di\",\"srJ34BaybkQh3qRkM\",\"vRXuYYBNuHEQ29fbm\",\"wFRLGjA56kj7xyhmv\",\"J9zJq7PMGb6mqzcHW\",\"htXCitorobtqYymjN\",\"sxci7DYKNa6q22Sjq\",\"KMR6vNzvSKMA2cXnK\",\"rWhXHhzF4W8bea6LP\",\"PJu3WcTpfRrvHfQiS\",\"unqzSsxpxj9sZ7rbD\",\"FxPDKKibxnZjGJLs6\",\"wMY6G2GLpcTJCe74o\",\"nFbmNzMQ38TncmfQX\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"r8G5yseozYYcEwoWu\",\"language\":\"cpp\"},{\"_id\":\"4Az2B8MYAH3GbbxX6\",\"language\":\"java\"},{\"_id\":\"vqud59XWHn5BRA7P7\",\"language\":\"javascript\"},{\"_id\":\"pzswvAHSSvrhRMK8s\",\"language\":\"php\"},{\"_id\":\"SQo9Jx5ih2iHG8JAn\",\"language\":\"python3\"},{\"_id\":\"iiQpS38GnHu5uficq\",\"language\":\"ruby\"}]}}"]