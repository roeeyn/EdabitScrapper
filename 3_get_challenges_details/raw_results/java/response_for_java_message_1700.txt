a["{\"msg\":\"result\",\"id\":\"409\",\"result\":{\"_id\":\"954ZMB8AKKJBEnvDu\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class WordEmphasis {\\n  public static String emphasize(String str) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":1.537313432835821,\"familyId\":\"EM6fsRPhHf6kA3tEN\",\"instructions\":\"Create a function that returns a capitalized version of the string passed. The first letter of each word in the string should be capitalized while the rest should be in lowercase.\\n\\n### Examples\\n```\\nemphasize(\\\"hello world!\\\") ➞ \\\"Hello World!\\\"\\n\\nemphasize(\\\"GOOD MORNING!\\\") ➞ \\\"Good Morning!\\\"\\n\\nemphasize(\\\"I AM, BUT aLL yOuRs, TESH!\\\")  ➞ \\\"I Am, But All Yours, Tesh!\\\"\\n\\nemphasize(\\\"99 red balloons!\\\") ➞ \\\"99 Red Balloons!\\\"\\n```\\n\\n### Notes\\n- You won't run into any issues when dealing with numbers in strings.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"/** \\n==================================== \\nTestGen 2.1 for JUnit 4.13.0 \\t\\t\\nTest Case: WordEmphasis::emphasize \\nTimestamp: 11/7/2020 5:12:34 AM \\n------------------------------------ \\n® DARKKO 2020 © \\n==================================== \\n**/ \\n\\nimport static org.junit.Assert.assertEquals; \\nimport org.junit.Test; \\n\\npublic class WordEmphasisTest { \\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertEquals(\\\"I Am, But All Yours, Tesh!\\\", WordEmphasis.emphasize(\\\"I AM, BUT aLL yOuRs, TESH!\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertEquals(\\\"Truly A Masterpiece!\\\", WordEmphasis.emphasize(\\\"truly a masterpiece!\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertEquals(\\\"Hello World!\\\", WordEmphasis.emphasize(\\\"hello world!\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertEquals(\\\"Good Morning.\\\", WordEmphasis.emphasize(\\\"GOOD MORNING.\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertEquals(\\\"99 Red Balloons.\\\", WordEmphasis.emphasize(\\\"99 Red Balloons.\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertEquals(\\\"1 2 3 4 5 6 7 8 9\\\", WordEmphasis.emphasize(\\\"1 2 3 4 5 6 7 8 9\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertEquals(\\\"\\\", WordEmphasis.emphasize(\\\"\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertEquals(\\\"Joshua Senoron\\\", WordEmphasis.emphasize(\\\"joshua senoron\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test09() { \\n\\t\\tassertEquals(\\\"You Just Did It!\\\", WordEmphasis.emphasize(\\\"yOU jUst dId It!\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() { \\n\\t\\tassertEquals(\\\"Where To Diane?\\\", WordEmphasis.emphasize(\\\"whErE tO DIANE?\\\"));\\n\\t}\\n}\",\"language\":\"java\",\"quality\":4.8,\"summary\":\"Create a function that returns a capitalized version of the string passed. The first letter of each word in the string should be capitalized while the rest should be in lowercase.\\n\\nExamples\\nemphasize(\\\"hello world!\\\") ➞ \\\"Hello World!\\\"\\n\\nemphasize(\\\"GOOD MORNING!\\\") ➞ \\\"Good Morning!\\\"\\n\\nemphasize(\\\"I AM, BUT aLL yOuRs, TESH!\\\")  ➞ \\\"I Am, But All Yours, Tesh!\\\"\\n\\nemphasize\",\"tags\":[\"strings\",\"loops\",\"regex\"],\"timestamp\":{\"$date\":1604697271844},\"title\":\"Emphasize The Words\",\"stats\":{\"completed\":{\"total\":73,\"ratings\":[1,1,1,1,1,1,2,3,0,1,2,2,2,0,1,0,1,2,1,0,2,3,3,1,1,2,2,2,2,4,2,2,0,2,1,1,1,1,2,2,2,2,1,2,2,2,4,1,0,3,1,2,0,2,2,1,2,1,2,1,2,2,1,1,1,2,2],\"quality\":[4,5,5,5,5],\"rators\":[\"a777e8chPvJkY3tKa\",\"oMfq73A434YWhSuWQ\",\"Es4eX2stRpyoXeC7f\",\"8Xx8nWXRydHDBGfQf\",\"P5BhjZxyeHQYTNyB9\",\"gXTAie79kiw28tx5u\",\"yd5PakB2z33q2JrTZ\",\"4tuaECzG25YmfhyXi\",\"AeJSxRqw2dJZuGvdk\",\"BbcH2NLjE4tKAZ3wR\",\"J7epB3qSQJ2E8vWkY\",\"Fdq6CxMWZL8WZiNaM\",\"YGaWjv2E4mK4eiGeY\",\"jb9RLyyuo565bKDzN\",\"vRXuYYBNuHEQ29fbm\",\"jXTnL3JatkKjoifyb\",\"DzvdGwHEjqsX7wyKr\",\"azAzSkvJd7eyXY9x9\",\"DkSMZ3jZLkwviKb9g\",\"Yohr2MmAyaWGMbB35\",\"DrkR35NqnP9NDLbq6\",\"YL9pqyCu8xsds8J49\",\"C9yBWYcZsjmJYww3K\",\"rGpPd6PvpzLaqps4g\",\"Ym8AjbKGSJooun3nt\",\"rWhXHhzF4W8bea6LP\",\"jyoLggHk8xQKZuoQC\",\"unNqQjSHzkb4pCzEu\",\"284sqtkPMfivDqR3j\",\"mQKWauR6b252TmdX4\",\"oMZovHkR6QqNvQwyc\",\"xtKfQ4gjZwS87GFfk\",\"9vyjn4WyWtJ6o2wop\",\"82weQfHHmno4Mq4X7\",\"qaPjAANdnxFnWfj5d\",\"a49eNnfRwSMxsDJXf\",\"RGN3QTb5LXj4ZPPkj\",\"GkYtSbQuheBF4Enys\",\"uFfEio8nzDvL8emhp\",\"bur3yQ8s34zqKGEro\",\"buX4mCQhtXCfBjeno\",\"zZfMwLuoERGmybgib\",\"hhxjQREtmHSheH9Pj\",\"dcW9oK2uRo8h8mBe2\",\"xC7hezioZLws83iB4\",\"4ySzqKC5s3ZRpG9di\",\"u5YCuEACALMZbF5gT\",\"sxci7DYKNa6q22Sjq\",\"mfm3gB39arY8Rjb2y\",\"rhS8qXRjZcpDXkwnE\",\"wFRLGjA56kj7xyhmv\",\"srJ34BaybkQh3qRkM\",\"J9zJq7PMGb6mqzcHW\",\"jEfGxSSmxvNTzBoRc\",\"htXCitorobtqYymjN\",\"jCjCvyhqhpebkJn34\",\"KMR6vNzvSKMA2cXnK\",\"PJu3WcTpfRrvHfQiS\",\"6rvJwN4mcX7iYGjY7\",\"B4pxRqzo43M7S8FbP\",\"JJFPy22rhWmioEDwN\",\"unqzSsxpxj9sZ7rbD\",\"FxPDKKibxnZjGJLs6\",\"xEX3TDY6C2h82dJTn\",\"uw47663LqPME8btaA\",\"XH6378Zm3WBm679yx\",\"nFbmNzMQ38TncmfQX\"]},\"flags\":0},\"editorId\":\"a777e8chPvJkY3tKa\",\"family\":[{\"_id\":\"kAkFZbSkgkb938hCq\",\"language\":\"cpp\"},{\"_id\":\"954ZMB8AKKJBEnvDu\",\"language\":\"java\"},{\"_id\":\"HRPCRRZ9FPYiXnNhH\",\"language\":\"javascript\"},{\"_id\":\"K5277r6RmsJRSz27t\",\"language\":\"python3\"},{\"_id\":\"SnvYhkTYoLrkhZveZ\",\"language\":\"ruby\"}]}}"]