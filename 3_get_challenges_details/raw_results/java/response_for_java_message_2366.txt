a["{\"msg\":\"result\",\"id\":\"739\",\"result\":{\"_id\":\"C8EQJybQWzv6WsQdd\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class AnnualDay {\\n  public static int dayOfYear(String date) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":2.869565217391304,\"familyId\":\"3aH7ErXTzpLKwEdWB\",\"instructions\":\"Each year has 365 or 366 days. Given a string `date` representing a Gregorian calendar date formatted as `mm/dd/yyyy`, return the _day-number_ of the year.\\n\\n### Examples\\n```\\ndayOfYear(\\\"12/13/2020\\\") ➞ 348\\n\\ndayOfYear(\\\"12/17/2020\\\") ➞ 352\\n\\ndayOfYear(\\\"11/16/2020\\\") ➞ 321\\n\\ndayOfYear(\\\"01/09/2019\\\") ➞ 9\\n\\ndayOfYear(\\\"03/01/2004\\\") ➞ 61\\n\\ndayOfYear(\\\"12/31/2000\\\") ➞ 366\\n```\\n\\n### Notes\\nAll input strings in the tests are valid dates.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"/** \\n================================= \\nTestGen 2.3 for JUnit 4.13.0 \\t\\t\\nTest Case: AnnualDay::dayOfYear \\nTimestamp: 11/19/2020 12:09:47 AM \\n--------------------------------- \\n® DARKKO 2020 © \\n=================================\\n**/ \\n\\nimport static org.junit.Assert.assertEquals; \\nimport org.junit.Test; \\n\\npublic class AnnualDayTest {\\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertEquals(348, AnnualDay.dayOfYear(\\\"12/13/2020\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertEquals(352, AnnualDay.dayOfYear(\\\"12/17/2020\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertEquals(321, AnnualDay.dayOfYear(\\\"11/16/2020\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertEquals(9, AnnualDay.dayOfYear(\\\"01/09/2019\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertEquals(61, AnnualDay.dayOfYear(\\\"03/01/2004\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertEquals(366, AnnualDay.dayOfYear(\\\"12/31/2000\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertEquals(206, AnnualDay.dayOfYear(\\\"07/25/2015\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertEquals(288, AnnualDay.dayOfYear(\\\"10/15/1985\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test09() { \\n\\t\\tassertEquals(60, AnnualDay.dayOfYear(\\\"02/29/1904\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() { \\n\\t\\tassertEquals(241, AnnualDay.dayOfYear(\\\"08/29/1900\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test11() { \\n\\t\\tassertEquals(280, AnnualDay.dayOfYear(\\\"10/07/2050\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test12() { \\n\\t\\tassertEquals(92, AnnualDay.dayOfYear(\\\"04/01/3024\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test13() { \\n\\t\\tassertEquals(60, AnnualDay.dayOfYear(\\\"02/29/1600\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test14() { \\n\\t\\tassertEquals(90, AnnualDay.dayOfYear(\\\"03/31/1999\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test15() { \\n\\t\\tassertEquals(123, AnnualDay.dayOfYear(\\\"05/03/0002\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test16() { \\n\\t\\tassertEquals(254, AnnualDay.dayOfYear(\\\"09/11/2001\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test17() { \\n\\t\\tassertEquals(183, AnnualDay.dayOfYear(\\\"07/01/9996\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test18() { \\n\\t\\tassertEquals(308, AnnualDay.dayOfYear(\\\"11/03/2020\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test19() { \\n\\t\\tassertEquals(57, AnnualDay.dayOfYear(\\\"02/26/1986\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test20() { \\n\\t\\tassertEquals(156, AnnualDay.dayOfYear(\\\"06/05/1971\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test21() { \\n\\t\\tassertEquals(79, AnnualDay.dayOfYear(\\\"03/20/2014\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test22() { \\n\\t\\tassertEquals(177, AnnualDay.dayOfYear(\\\"06/26/1995\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test23() { \\n\\t\\tassertEquals(256, AnnualDay.dayOfYear(\\\"09/13/1985\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test24() { \\n\\t\\tassertEquals(71, AnnualDay.dayOfYear(\\\"03/11/1996\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test25() { \\n\\t\\tassertEquals(66, AnnualDay.dayOfYear(\\\"03/07/2003\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test26() { \\n\\t\\tassertEquals(119, AnnualDay.dayOfYear(\\\"04/29/1990\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test27() { \\n\\t\\tassertEquals(59, AnnualDay.dayOfYear(\\\"02/28/1977\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test28() { \\n\\t\\tassertEquals(322, AnnualDay.dayOfYear(\\\"11/17/1984\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test29() { \\n\\t\\tassertEquals(193, AnnualDay.dayOfYear(\\\"07/12/1999\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test30() { \\n\\t\\tassertEquals(171, AnnualDay.dayOfYear(\\\"06/20/1998\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test31() { \\n\\t\\tassertEquals(205, AnnualDay.dayOfYear(\\\"07/23/1972\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test32() { \\n\\t\\tassertEquals(299, AnnualDay.dayOfYear(\\\"10/26/1981\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test33() { \\n\\t\\tassertEquals(58, AnnualDay.dayOfYear(\\\"02/27/1998\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test34() { \\n\\t\\tassertEquals(282, AnnualDay.dayOfYear(\\\"10/09/2013\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test35() { \\n\\t\\tassertEquals(318, AnnualDay.dayOfYear(\\\"11/14/1985\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test36() { \\n\\t\\tassertEquals(28, AnnualDay.dayOfYear(\\\"01/28/1986\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test37() { \\n\\t\\tassertEquals(1, AnnualDay.dayOfYear(\\\"01/01/1971\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test38() { \\n\\t\\tassertEquals(126, AnnualDay.dayOfYear(\\\"05/06/2009\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test39() { \\n\\t\\tassertEquals(69, AnnualDay.dayOfYear(\\\"03/10/1986\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test40() { \\n\\t\\tassertEquals(106, AnnualDay.dayOfYear(\\\"04/16/1998\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test41() { \\n\\t\\tassertEquals(289, AnnualDay.dayOfYear(\\\"10/15/1976\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test42() { \\n\\t\\tassertEquals(349, AnnualDay.dayOfYear(\\\"12/15/1985\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test43() { \\n\\t\\tassertEquals(34, AnnualDay.dayOfYear(\\\"02/03/2004\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test44() { \\n\\t\\tassertEquals(36, AnnualDay.dayOfYear(\\\"02/05/2003\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test45() { \\n\\t\\tassertEquals(158, AnnualDay.dayOfYear(\\\"06/07/1989\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test46() { \\n\\t\\tassertEquals(318, AnnualDay.dayOfYear(\\\"11/14/2015\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test47() { \\n\\t\\tassertEquals(11, AnnualDay.dayOfYear(\\\"01/11/1981\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test48() { \\n\\t\\tassertEquals(366, AnnualDay.dayOfYear(\\\"12/31/1996\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test49() { \\n\\t\\tassertEquals(219, AnnualDay.dayOfYear(\\\"08/07/1994\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test50() { \\n\\t\\tassertEquals(43, AnnualDay.dayOfYear(\\\"02/12/2010\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test51() { \\n\\t\\tassertEquals(142, AnnualDay.dayOfYear(\\\"05/21/1996\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test52() { \\n\\t\\tassertEquals(323, AnnualDay.dayOfYear(\\\"11/19/1974\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test53() { \\n\\t\\tassertEquals(65, AnnualDay.dayOfYear(\\\"03/06/1982\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test54() { \\n\\t\\tassertEquals(132, AnnualDay.dayOfYear(\\\"05/12/2009\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test55() { \\n\\t\\tassertEquals(169, AnnualDay.dayOfYear(\\\"06/18/2007\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test56() { \\n\\t\\tassertEquals(202, AnnualDay.dayOfYear(\\\"07/20/2020\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test57() { \\n\\t\\tassertEquals(137, AnnualDay.dayOfYear(\\\"05/17/1975\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test58() { \\n\\t\\tassertEquals(226, AnnualDay.dayOfYear(\\\"08/14/1995\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test59() { \\n\\t\\tassertEquals(232, AnnualDay.dayOfYear(\\\"08/20/1975\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test60() { \\n\\t\\tassertEquals(71, AnnualDay.dayOfYear(\\\"03/12/1977\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test61() { \\n\\t\\tassertEquals(120, AnnualDay.dayOfYear(\\\"04/30/1987\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test62() { \\n\\t\\tassertEquals(190, AnnualDay.dayOfYear(\\\"07/09/1990\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test63() { \\n\\t\\tassertEquals(241, AnnualDay.dayOfYear(\\\"08/29/2011\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test64() { \\n\\t\\tassertEquals(116, AnnualDay.dayOfYear(\\\"04/25/1972\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test65() { \\n\\t\\tassertEquals(162, AnnualDay.dayOfYear(\\\"06/10/1980\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test66() { \\n\\t\\tassertEquals(287, AnnualDay.dayOfYear(\\\"10/14/2001\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test67() { \\n\\t\\tassertEquals(328, AnnualDay.dayOfYear(\\\"11/24/1971\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test68() { \\n\\t\\tassertEquals(222, AnnualDay.dayOfYear(\\\"08/10/2005\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test69() { \\n\\t\\tassertEquals(106, AnnualDay.dayOfYear(\\\"04/16/2006\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test70() { \\n\\t\\tassertEquals(334, AnnualDay.dayOfYear(\\\"11/30/2017\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test71() { \\n\\t\\tassertEquals(133, AnnualDay.dayOfYear(\\\"05/12/2016\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test72() { \\n\\t\\tassertEquals(176, AnnualDay.dayOfYear(\\\"06/25/1989\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test73() { \\n\\t\\tassertEquals(331, AnnualDay.dayOfYear(\\\"11/27/1981\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test74() { \\n\\t\\tassertEquals(285, AnnualDay.dayOfYear(\\\"10/12/2017\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test75() { \\n\\t\\tassertEquals(257, AnnualDay.dayOfYear(\\\"09/14/1999\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test76() { \\n\\t\\tassertEquals(247, AnnualDay.dayOfYear(\\\"09/03/1988\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test77() { \\n\\t\\tassertEquals(273, AnnualDay.dayOfYear(\\\"09/30/1975\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test78() { \\n\\t\\tassertEquals(111, AnnualDay.dayOfYear(\\\"04/21/1979\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test79() { \\n\\t\\tassertEquals(45, AnnualDay.dayOfYear(\\\"02/14/1997\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test80() { \\n\\t\\tassertEquals(199, AnnualDay.dayOfYear(\\\"07/18/1981\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test81() { \\n\\t\\tassertEquals(293, AnnualDay.dayOfYear(\\\"10/20/1981\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test82() { \\n\\t\\tassertEquals(195, AnnualDay.dayOfYear(\\\"07/13/2016\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test83() { \\n\\t\\tassertEquals(87, AnnualDay.dayOfYear(\\\"03/27/1984\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test84() { \\n\\t\\tassertEquals(77, AnnualDay.dayOfYear(\\\"03/18/1987\\\"));\\n\\t}\\n}\",\"language\":\"java\",\"quality\":0,\"summary\":\"Each year has 365 or 366 days. Given a string date representing a Gregorian calendar date formatted as mm/dd/yyyy, return the day-number of the year.\\n\\nExamples\\ndayOfYear(\\\"12/13/2020\\\") ➞ 348\\n\\ndayOfYear(\\\"12/17/2020\\\") ➞ 352\\n\\ndayOfYear(\\\"11/16/2020\\\") ➞ 321\\n\\ndayOfYear(\\\"01/09/2019\\\") ➞ 9\\n\\ndayOfYear(\\\"03/01/2004\\\") ➞ 61\\n\\ndayOfYear(\\\"12/31/2000\\\") ➞ 366\\n\\nNotes\\nAll input str\",\"tags\":[\"dates\",\"formatting\",\"numbers\",\"strings\"],\"timestamp\":{\"$date\":1605720748083},\"title\":\"Day Number Of The Year\",\"stats\":{\"completed\":{\"total\":22,\"ratings\":[4,4,4,4,4,3,5,2,1,5,4,4,2,5,1,0,3,2,1,3,2,1,2],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"Ym8AjbKGSJooun3nt\",\"gXTAie79kiw28tx5u\",\"fbgn5575LS3jsxABM\",\"jm4tNFjsgYKW5TZfp\",\"Es4eX2stRpyoXeC7f\",\"YomMJMBhDwoWLjcAm\",\"hFv4BuqgsJtNyvyNF\",\"eFg7EjFwJTEP8RFZ2\",\"mDWNyaaQ9hvPCRzSd\",\"vRXuYYBNuHEQ29fbm\",\"GvLLKHi7NwAjutdDk\",\"nHj7SC5cnmkTApbgY\",\"Z3JZpmrNTwzgpob2n\",\"SE5G2Caf3btnuGmz6\",\"TAw6TE5FS5SSXdHxk\",\"FZB8ZMfhpuE4FGZyb\",\"sxci7DYKNa6q22Sjq\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"C8EQJybQWzv6WsQdd\",\"language\":\"java\"},{\"_id\":\"XRymHQ2p4p5T7GbQC\",\"language\":\"javascript\"},{\"_id\":\"fTXXkQ7bfuQDjgNyH\",\"language\":\"python3\"}]}}"]