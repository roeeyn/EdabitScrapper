a["{\"msg\":\"result\",\"id\":\"721\",\"result\":{\"_id\":\"uqZD99bDGx3LnSv6w\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class ListRanges {\\n  public static int[] inclusiveArray(int startNum,int endNum) {\\n    // recursive code here\\n  }\\n}\",\"difficulty\":2.769230769230769,\"editorId\":\"a777e8chPvJkY3tKa\",\"familyId\":\"gCtDGWFi239KEnXkL\",\"instructions\":\"Write a function that, given the start `startNum` and end `endNum` values, return an array containing all the numbers **inclusive** to that range. See examples below.\\n\\n### Examples\\n```\\ninclusiveArray(1, 5) ➞ [1, 2, 3, 4, 5]\\n\\ninclusiveArray(2, 8) ➞ [2, 3, 4, 5, 6, 7, 8]\\n\\ninclusiveArray(10, 20) ➞ [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\\n\\ninclusiveArray(17, 5) ➞ [17]\\n```\\n\\n### IMPORTANT\\n- The use of `IntStream.range` and `IntStream.rangeClosed` is **totally unacceptable**, hence, recursion is the very purpose of this challenge.\\n\\n### Notes\\n- The numbers in the array are sorted in ascending order.\\n- If `startNum` is greater than `endNum`, return an array with the higher value. See example #4.\\n- You are expected to solve this challenge via a **recursive** approach.\\n- An **iterative** version of this challenge can be found via this [link](https://edabit.com/challenge/DwMxxFrzZ5eZfBSGL)\\n- A **collection** of challenges in recursion can be found via this [link](https://edabit.com/collection/Yx78jEBrKppHBNsoQ).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"/** \\n======================================= \\nTestGen 2.1 for JUnit 4.13.0 \\t\\t\\nTest Case: ListRanges::inclusiveArray \\nTimestamp: 11/6/2020 2:58:46 AM \\n--------------------------------------- \\n® DARKKO 2020 © \\n======================================= \\n**/ \\n\\nimport static org.junit.Assert.assertArrayEquals; \\nimport org.junit.Test; \\n\\npublic class ListRangesTest { \\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertArrayEquals(new int[] {1, 2, 3, 4, 5}, ListRanges.inclusiveArray(1, 5));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertArrayEquals(new int[] {2, 3, 4, 5, 6, 7, 8}, ListRanges.inclusiveArray(2, 8));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertArrayEquals(new int[] {10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, ListRanges.inclusiveArray(10, 20));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertArrayEquals(new int[] {17}, ListRanges.inclusiveArray(17, 5));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertArrayEquals(new int[] {40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50}, ListRanges.inclusiveArray(40, 50));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertArrayEquals(new int[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41}, ListRanges.inclusiveArray(1, 41));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertArrayEquals(new int[] {24}, ListRanges.inclusiveArray(24, 17));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertArrayEquals(new int[] {11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66}, ListRanges.inclusiveArray(11, 66));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test09() { \\n\\t\\tassertArrayEquals(new int[] {9}, ListRanges.inclusiveArray(9, 3));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() { \\n\\t\\tassertArrayEquals(new int[] {6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, ListRanges.inclusiveArray(6, 16));\\n\\t}\\n}\",\"language\":\"java\",\"quality\":0,\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,3,2,2,4,3,2,3,1,3,3,3,0,4,1,3,4,3,4,4,2,3],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"pSLDXFAgYgB2dRSGM\",\"gXTAie79kiw28tx5u\",\"Es4eX2stRpyoXeC7f\",\"azAzSkvJd7eyXY9x9\",\"bTCq6CQ3SGjrRfZeQ\",\"uNbmzzmop6Ebp3xTu\",\"Yohr2MmAyaWGMbB35\",\"fxF9CpQzkYdNSCLse\",\"w93Q2XNPaSgxcfPka\",\"JFodQijHHdRkkrZvT\",\"T2vhHPhRR96hRizq8\",\"foytX6kH9wiSYqLtT\",\"u2aKc7EebCZuZRRh6\",\"htXCitorobtqYymjN\",\"mS4t7GChGHwJ65Lfk\",\"ZxPXe8qsZ92rvZyK2\",\"5JuFzSyvT4BN9rSnW\",\"KMR6vNzvSKMA2cXnK\",\"sxci7DYKNa6q22Sjq\",\"PAEWysAAFheYiYPBp\"],\"total\":28},\"flags\":0},\"summary\":\"Write a function that, given the start startNum and end endNum values, return an array containing all the numbers inclusive to that range. See examples below.\\n\\nExamples\\ninclusiveArray(1, 5) ➞ [1, 2, 3, 4, 5]\\n\\ninclusiveArray(2, 8) ➞ [2, 3, 4, 5, 6, 7, 8]\\n\\ninclusiveArray(10, 20) ➞ [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\\n\\ninclusiveArray(17, 5) ➞ [17]\\n\\nIMPORT\",\"tags\":[\"recursion\",\"arrays\",\"sorting\"],\"timestamp\":{\"$date\":1604603711134},\"title\":\"Recursion: Inclusive Array Ranges\",\"family\":[{\"_id\":\"uqZD99bDGx3LnSv6w\",\"language\":\"java\"},{\"_id\":\"v46dEzuJvHKawduxb\",\"language\":\"javascript\"},{\"_id\":\"CoSFaDzSxrSjsZ8F6\",\"language\":\"python3\"}]}}"]