a["{\"msg\":\"result\",\"id\":\"594\",\"result\":{\"_id\":\"TSKay7qmB2KyrDwnK\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"public class Challenge {\\n\\tpublic static String spoonerise(String phrase) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":2.2,\"familyId\":\"KAbFijFbR7Ez4QCPL\",\"instructions\":\"A spoonerism is when the first letters / sounds of two words are transposed onto one another. Create a function that takes a two-word string and performs a spoonerism on the phrase.\\n\\n### Examples\\n```\\nspoonerise(\\\"history lecture\\\") ➞ \\\"listory hecture\\\"\\n\\nspoonerise(\\\"loud noises\\\") ➞ \\\"noud loises\\\"\\n\\nspoonerise(\\\"chow mein\\\") ➞ \\\"mow chein\\\"\\n\\nspoonerise(\\\"edabit rules!\\\") ➞ \\\"redabit ules!\\\"\\n```\\n\\n### Notes\\n- Only two words will be parsed into the function. Don't worry about handling more than two.\\n- You won't always just have to swap the first letters, take care to notice which letters have been switched in the examples (notice the difference between vowel-starting and consonant-starting words).\",\"isHidden\":false,\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n  @Test\\n  public void test1() {\\n    assertEquals(\\\"fushing crailure\\\", Challenge.spoonerise(\\\"crushing failure\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test2() {\\n    assertEquals(\\\"istmas chreve\\\", Challenge.spoonerise(\\\"christmas eve\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test3() {\\n    assertEquals(\\\"flighlighter huid\\\", Challenge.spoonerise(\\\"highlighter fluid\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test4() {\\n    assertEquals(\\\"bocolate chiscuits\\\", Challenge.spoonerise(\\\"chocolate biscuits\\\"));\\n  }\\n\\t\\n\\t@Test\\n  public void test5() {\\n    assertEquals(\\\"redabit ules!\\\", Challenge.spoonerise(\\\"edabit rules!\\\"));\\n  }\\n}\",\"language\":\"java\",\"summary\":\"A spoonerism is when the first letters / sounds of two words are transposed onto one another. Create a function that takes a two-word string and performs a spoonerism on the phrase.\\n\\nExamples\\nspoonerise(\\\"history lecture\\\") ➞ \\\"listory hecture\\\"\\n\\nspoonerise(\\\"loud noises\\\") ➞ \\\"noud loises\\\"\\n\\nspoonerise(\\\"chow mein\\\") ➞ \\\"mow chein\\\"\\n\\nspoonerise(\\\"edabit rules!\\\") ➞ \\\"redabi\",\"tags\":[\"strings\",\"conditions\",\"regex\"],\"timestamp\":{\"$date\":1579211304695},\"title\":\"Spoonerisms\",\"stats\":{\"completed\":{\"total\":34,\"ratings\":[2,2,2,2,2,3,3,1,1,3,2,3,2,3,1,0,2,2,3,1,3,3,3,3,3,2,3,2,2,2],\"rators\":[\"qRhXvCaA7qgDoeFnr\",\"2NJuDfSqdrF8kHHni\",\"J9zJq7PMGb6mqzcHW\",\"rehehi2Tr2mwaEoJE\",\"3pdgguqZgNDSAJSGm\",\"D6J3wu8fB5ksyoya6\",\"Es4eX2stRpyoXeC7f\",\"jyoLggHk8xQKZuoQC\",\"TrquEHytntLKHA4m2\",\"5seiNqw6ZXoF2GRRd\",\"pBMXMQem6BpSeooYT\",\"82weQfHHmno4Mq4X7\",\"k63LjKkX5p7SYng7C\",\"iq55QasecYJXKz8rx\",\"etoSR23iELGGgs9rA\",\"Ym8AjbKGSJooun3nt\",\"gXTAie79kiw28tx5u\",\"rWhXHhzF4W8bea6LP\",\"mQKWauR6b252TmdX4\",\"DzvdGwHEjqsX7wyKr\",\"a777e8chPvJkY3tKa\",\"2sZrwmQcNFJG3d3HW\",\"4hbdSgMnhZC7C9mRv\",\"buX4mCQhtXCfBjeno\",\"sxci7DYKNa6q22Sjq\",\"htXCitorobtqYymjN\",\"a49eNnfRwSMxsDJXf\"],\"quality\":[5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"quality\":5,\"family\":[{\"_id\":\"EGFHjxnJMh3xuiLFa\",\"language\":\"cpp\"},{\"_id\":\"TSKay7qmB2KyrDwnK\",\"language\":\"java\"},{\"_id\":\"CCAEMfHcmrvSwA4KR\",\"language\":\"javascript\"},{\"_id\":\"8Eopb7GeRi7YExgwJ\",\"language\":\"python3\"},{\"_id\":\"qg4RgXD5KNnZ4CRph\",\"language\":\"ruby\"}]}}"]