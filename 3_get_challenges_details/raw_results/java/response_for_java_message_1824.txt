a["{\"msg\":\"result\",\"id\":\"471\",\"result\":{\"_id\":\"NnpHPBhnnhdE3gLew\",\"author\":\"Mateusz Mędrowski\",\"authorId\":\"hPx9H3YM8j2k94DNW\",\"code\":\"public class Challenge {\\n  public static double lineLength(int[][] point) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":1.6875,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"aNXzrx7c8DGQJyLCf\",\"instructions\":\"Write a function that takes coordinates of two points on a three-dimensional plane and returns the length of the line segment connecting those two points.\\n\\n### Examples\\n```\\nlineLength(arr[0]={15, 7, 5}, arr[1]={22, 11, 1}) ➞ 8.06\\n\\nlineLength(arr[0]={0, 0, 0}, arr[1]={0, 0, 0}) ➞ 0\\n\\nlineLength(arr[0]={0, 0, 0}, arr[1]={1, 1, 1}) ➞ 1.41\\n```\\n\\n### Notes\\n- Numbers in argument array can be positive or negative.\\n- The order of the given numbers is X, Y, Z.\\n- There is 0.1 tolerance, so you don't need to round your result.\\n- This challenge is easier than it looks.\\n\\nCheck [my profile](https://edabit.com/user/hPx9H3YM8j2k94DNW) for other challenges in the series.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"import org.junit.Test;\\nimport static org.junit.Assert.assertEquals;\\n\\npublic class ChallengeTests {\\n  @Test\\n  public void test1() {\\n\\t\\tint[][] arr = new int[2][3];\\n\\t\\tarr[0][0] = 15;\\n\\t\\tarr[0][1] = 7;\\n\\t\\tarr[0][2] = 5;\\n\\t\\tarr[1][0] = 22;\\n\\t\\tarr[1][1] = 11;\\n\\t\\tarr[1][2] = 1;\\n    assertEquals(9.0, Challenge.lineLength(arr),0.1);\\n  }\\n\\n\\t@Test\\n  public void test2() {\\t\\t\\n\\t\\tint[][] arr = new int[2][3];\\n\\t\\tarr[0][0] = 1;\\n\\t\\tarr[0][1] = 1;\\n\\t\\tarr[0][2] = 1;\\n\\t\\tarr[1][0] = 0;\\n\\t\\tarr[1][1] = 0;\\n\\t\\tarr[1][2] = 0;\\n    assertEquals(1.73, Challenge.lineLength(arr),0.1);\\n  }\\n\\n\\t@Test\\n  public void test3() {\\n    int[][] arr = new int[2][3];\\n\\t\\tarr[0][0] = -33;\\n\\t\\tarr[0][1] = 33;\\n\\t\\tarr[0][2] = -33;\\n\\t\\tarr[1][0] = 33;\\n\\t\\tarr[1][1] = -33;\\n\\t\\tarr[1][2] = 33;\\n    assertEquals(114.31, Challenge.lineLength(arr),0.1);\\n  }\\n\\n\\t@Test\\n  public void test4() {\\n\\t\\tint[][] arr = new int[2][3];\\n\\t\\tarr[0][0] = 1;\\n\\t\\tarr[0][1] = 2;\\n\\t\\tarr[0][2] = 3;\\n\\t\\tarr[1][0] = 4;\\n\\t\\tarr[1][1] = 5;\\n\\t\\tarr[1][2] = 6;\\n    assertEquals(5.19, Challenge.lineLength(arr),0.1);\\n  }\\n\\n\\t@Test\\n  public void test5() {\\n\\t\\tint[][] arr = new int[2][3];\\n\\t\\tarr[0][0] = 719;\\n\\t\\tarr[0][1] = 10;\\n\\t\\tarr[0][2] = 334;\\n\\t\\tarr[1][0] = -65;\\n\\t\\tarr[1][1] = 1;\\n\\t\\tarr[1][2] = 175;\\n    assertEquals(800.01, Challenge.lineLength(arr),0.1);\\n  }\\n\\n\\t@Test\\n  public void test6() {\\n\\t\\tint[][] arr = new int[2][3];\\n\\t\\tarr[0][0] = -11;\\n\\t\\tarr[0][1] = -12;\\n\\t\\tarr[0][2] = 1;\\n\\t\\tarr[1][0] = -13;\\n\\t\\tarr[1][1] = -14;\\n\\t\\tarr[1][2] = -15;\\n    assertEquals(16.24, Challenge.lineLength(arr),0.1);\\n  }\\n\\n\\t@Test\\n  public void test7() {\\n\\t\\tint[][] arr = new int[2][3];\\n\\t\\tarr[0][0] = 0;\\n\\t\\tarr[0][1] = 0;\\n\\t\\tarr[0][2] = 0;\\n\\t\\tarr[1][0] = 0;\\n\\t\\tarr[1][1] = 0;\\n\\t\\tarr[1][2] = 0;\\n    assertEquals(0, Challenge.lineLength(arr),0.1);\\n  }\\n}\",\"language\":\"java\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,3,4,2,3,3,2,0,1,3,2,1,2,3,0,1,1,2,2,2,1,1,2,3,1,1,2,1,2,2,2,3,2,3,2,2,1,2,0,1,2,1,1,3,0,1,1,1,1,1,1,1,1,2,1,1,2,2,2],\"rators\":[\"hPx9H3YM8j2k94DNW\",\"7amNEuZodjynhaDQq\",\"jyoLggHk8xQKZuoQC\",\"aH9yER5QQ4bFBN8SR\",\"azAzSkvJd7eyXY9x9\",\"MhSbFaHSTBk2MMZyo\",\"HfHX644FWoTbifSCX\",\"MBEwq8srjd2oA5W58\",\"ohsJnyfLcGDCWzEWM\",\"xdS2Wao3BYiWTo4H2\",\"Es4eX2stRpyoXeC7f\",\"rehehi2Tr2mwaEoJE\",\"gXTAie79kiw28tx5u\",\"yXGiiSAR5nBHnH3yr\",\"sJuq37PFQozqB4C7k\",\"BbcH2NLjE4tKAZ3wR\",\"jhEgpqsboiWai8sLJ\",\"FeCN9HXLdYFEzTC73\",\"rWhXHhzF4W8bea6LP\",\"YL9pqyCu8xsds8J49\",\"mQKWauR6b252TmdX4\",\"2Kzz5CubctKWfpPBp\",\"SDSvWibEfFvh3mFaQ\",\"NmY6q99JQ3GzWQhHa\",\"sAdpvrN5y9fNJhQQv\",\"oth47e7A8TopBYdjr\",\"vTkAh25siRQwqwBjc\",\"x59EDsD46uXE62QHL\",\"8Xx8nWXRydHDBGfQf\",\"zTM2NbjE6q5Q2HSeF\",\"eqjXExxJKYth4CT8j\",\"SGqPNztY2XdkjMWjS\",\"yMbBn4RKqQj8A4twp\",\"yd5PakB2z33q2JrTZ\",\"eHTHv5FyLkpGTBJJr\",\"2CLvCKwQvRQC8NHXp\",\"QPnQWa4xhziEMRF8m\",\"m8RTLuXqmythXHYZt\",\"cYcENRkajQioCLH9u\",\"fRhyffuFFdj8dmJwX\",\"hmn6qe4B7Nrh6oSGn\",\"QuBz2FQ7o7STQQGYP\",\"RJRwPFmGEsPuLYM5u\",\"D6YyepY3okHGgBkAy\",\"p2woPCQKXuWJCwffJ\",\"jybNggaCTZnT6TdFA\",\"dwFEsFnv5m3x7KoyR\",\"wpvJWmW9TxQQAZk4J\",\"a5Y8ZA5qq2eupPK65\",\"WA78YvYQLmYo3uoDp\",\"EFqhE7GRf6PSKMSg6\",\"DrkR35NqnP9NDLbq6\",\"r3LXC9Z9sHHshTKtq\",\"p8qqFdJ3FSk5x9z3G\",\"SExX3m5YftBWmsk2e\",\"zE46SymvixkeFJmPM\",\"3YDbbC8ZR6QJg9gKp\",\"btabi3PdyisuY5tn9\",\"JeSHEyHLRmScypBNw\",\"8TzBqxbEwD8fWe6CE\",\"KZDZZTSx8CDJ38QqB\",\"QQYCfamcynoin9T3f\",\"7xA9wfhvWnJgsAHRA\",\"ymggGjk5woALZEbCC\",\"BoE2gyrfEcEThLb7j\",\"bAiKTH59gPT3coBvG\",\"5qjDvmKyDxg2uZTzJ\",\"aRTLFCvovQ9MfSRsP\",\"7iF6656DqFsKnDzpP\",\"xvQBgapEztkQFQKiJ\",\"L23hXCKLuxXL6b9Et\",\"MCw7uAcoWcSTBTmr3\",\"pCQGHM3umPwWw6jJs\",\"hhxjQREtmHSheH9Pj\",\"qaPjAANdnxFnWfj5d\",\"rhS8qXRjZcpDXkwnE\",\"xEX3TDY6C2h82dJTn\",\"a49eNnfRwSMxsDJXf\",\"uw47663LqPME8btaA\",\"sxci7DYKNa6q22Sjq\",\"KMR6vNzvSKMA2cXnK\",\"htXCitorobtqYymjN\",\"PJu3WcTpfRrvHfQiS\",\"unqzSsxpxj9sZ7rbD\",\"FxPDKKibxnZjGJLs6\",\"BYcLTueiCeWKHujEg\"],\"total\":97,\"quality\":[5,3,5,5,5,4,5,5,3,5,2,5,5,5,5,5,4,5,5,5,5,3,5,5,4,5,5]},\"flags\":0},\"summary\":\"Write a function that takes coordinates of two points on a three-dimensional plane and returns the length of the line segment connecting those two points.\\n\\nExamples\\nlineLength(arr[0]={15, 7, 5}, arr[1]={22, 11, 1}) ➞ 8.06\\n\\nlineLength(arr[0]={0, 0, 0}, arr[1]={0, 0, 0}) ➞ 0\\n\\nlineLength(arr[0]={0, 0, 0}, arr[1]={1, 1, 1}) ➞ 1.41\\n\\nNotes\\nNumbers in argument array\",\"tags\":[\"algebra\",\"math\",\"geometry\",\"arrays\"],\"timestamp\":{\"$date\":1598751470703},\"title\":\"Geometry 2: Length of Line Segment in 3D\",\"quality\":4.555555555555555,\"family\":[{\"_id\":\"NnpHPBhnnhdE3gLew\",\"language\":\"java\"}]}}"]