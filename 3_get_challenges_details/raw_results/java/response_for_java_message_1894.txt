a["{\"msg\":\"result\",\"id\":\"503\",\"result\":{\"_id\":\"sCP58J9vcexchgwo7\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class PersonalIdNumber {\\n  public static boolean validate(String pin) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":2.0285714285714285,\"familyId\":\"5YLfKCfbn5rJMNpe3\",\"instructions\":\"Create a function that will test if a string is a valid PIN or not via a regular expression.\\n\\nA valid PIN has:\\n- Exactly 4 or 6 characters.\\n- Only numeric characters (0-9).\\n- No whitespace.\\n\\n### Examples\\n```\\nvalidate(\\\"121317\\\") ➞ true\\n\\nvalidate(\\\"1234\\\") ➞ true\\n\\nvalidate(\\\"45135\\\") ➞ false\\n\\nvalidate(\\\"89abc1\\\") ➞ false\\n\\nvalidate(\\\"900876\\\") ➞ true\\n\\nvalidate(\\\" 4983\\\") ➞ false\\n```\\n\\n### Notes\\n- Empty strings should return `false` when tested.\\n- If you need help, look into the **Resources** tab.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"import static org.junit.Assert.assertEquals; \\nimport org.junit.Test; \\n\\npublic class PersonalIdNumberTest {\\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertEquals(true, PersonalIdNumber.validate(\\\"544466\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertEquals(true, PersonalIdNumber.validate(\\\"121317\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertEquals(false, PersonalIdNumber.validate(\\\"4512a5\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertEquals(true, PersonalIdNumber.validate(\\\"123456\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertEquals(false, PersonalIdNumber.validate(\\\"\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertEquals(false, PersonalIdNumber.validate(\\\"21904\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertEquals(true, PersonalIdNumber.validate(\\\"9451\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertEquals(true, PersonalIdNumber.validate(\\\"213132\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test09() { \\n\\t\\tassertEquals(false, PersonalIdNumber.validate(\\\" 4520\\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() { \\n\\t\\tassertEquals(false, PersonalIdNumber.validate(\\\"15632 \\\"));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test11() { \\n\\t\\tassertEquals(true, PersonalIdNumber.validate(\\\"000000\\\"));\\n\\t}\\n}\",\"language\":\"java\",\"quality\":0,\"summary\":\"Create a function that will test if a string is a valid PIN or not via a regular expression.\\n\\nA valid PIN has:\\nExactly 4 or 6 characters.\\nOnly numeric characters (0-9).\\nNo whitespace.\\n\\nExamples\\nvalidate(\\\"121317\\\") ➞ true\\n\\nvalidate(\\\"1234\\\") ➞ true\\n\\nvalidate(\\\"45135\\\") ➞ false\\n\\nvalidate(\\\"89abc1\\\") ➞ false\\n\\nvalidate(\\\"900876\\\") ➞ true\\n\\nvalidate(\\\" 4983\\\") ➞ false\\n\\nNotes\\nE\",\"tags\":[\"regex\",\"validation\",\"strings\"],\"timestamp\":{\"$date\":1607924212402},\"title\":\"RegEx: Validate PIN\",\"stats\":{\"completed\":{\"total\":181,\"ratings\":[2,2,2,2,2,2,2,0,2,2,2,2,2,3,1,3,4,2,2,2,3,2,2,2,2,3,2,0,1,2,2,1,2,3,3,1,3,1,3,3,3,3,2,1,2,2,2,1,1,4,3,2,0,3,0,2,2,2,2,2,2,2,2,1,2,2,3,2,3,2,5,3,2,3,1,2,0,0,2,3,2,1,2,2,0,2,1,4,2,3,3,3,1,1,3,3,1,0,0,3,1,3,2,2,1,3,1,3,3,3,3,1,1,2,2,2,1,2,3,0,1,3,1,1,2,2,2,3,3,1,0,3,2,3,3,3,4,3,1,4,2,3,2,3,1,2,2,3,1,2,2,2,3,1,3,2,1,1,3,0,2,2,3,3,2,2,3,2,2,3,3,1,2,2,0],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"Es4eX2stRpyoXeC7f\",\"jcPZ5ySXseCB7Ec3x\",\"jXTnL3JatkKjoifyb\",\"gXTAie79kiw28tx5u\",\"p2woPCQKXuWJCwffJ\",\"xvQBgapEztkQFQKiJ\",\"tBAQcHxxsrbutSyCr\",\"MWLHcB2WorRrDQija\",\"7JqmiD9qSoKiPW23h\",\"BhERzz6cgygmbmNTD\",\"pzz8vFouna6JTTAiW\",\"dcW9oK2uRo8h8mBe2\",\"9RjPxa9gtAe8Rspre\",\"738w5PhcgyQQdnza9\",\"hcJk9AxYyap6pbH8k\",\"oRi93mrm7DLdeiFjf\",\"82weQfHHmno4Mq4X7\",\"rRKCmQApKqNCnejjy\",\"LNCb5rksJLJ43L4Nw\",\"tkXkji8hgdmScvPJH\",\"jyoLggHk8xQKZuoQC\",\"buX4mCQhtXCfBjeno\",\"9M384SbCW7eciE5zc\",\"osounBSYa7tg7PoEd\",\"Ag5fRrZ9MrAZc9vpj\",\"RBGgeqf6Hiv9XaaML\",\"eoxHCZ7sSMQDzDGx3\",\"hJ87kii3LojmKdcYA\",\"YLqdr7bYjwew2KM4N\",\"72m5uJZhkRRJ4KL8p\",\"tdinF6MRzC6AdNX8g\",\"xEX3TDY6C2h82dJTn\",\"qx6yvahdH8aw4Jnm7\",\"yy2ajaQ2WJmBbDaXC\",\"nAuhwzeaxm62fF6Mi\",\"mkjFDssrhpTHMwQTW\",\"qaPjAANdnxFnWfj5d\",\"vEN56nHw7hTxbyHhp\",\"wFRLGjA56kj7xyhmv\",\"KSBkp99YWvEeYW6Zv\",\"mG8HqKiAQFTdRZthG\",\"mfm3gB39arY8Rjb2y\",\"HXbTKW3jmmyRAsKrr\",\"SNLHryxfRzMtHdKXW\",\"z6qWrCrv4Z5j2nX2x\",\"XFCd278fnpY8pYsno\",\"tFA5t2csqP6zw3psh\",\"CoQTHAsXDxn6oot3H\",\"9kCuFreJ7gRH5HLkF\",\"qDvXiyn6YpbTJ7hsy\",\"GArCerEapdotZYMDy\",\"HHfJWu56BNQAdSzMf\",\"Ej8MsG44TGHQbGC6Z\",\"4zmuu3GgoahNfekx4\",\"uFfEio8nzDvL8emhp\",\"WwEdCbGNx3CSZSk3W\",\"7NMcBSYCZ4eWKWvNh\",\"a49eNnfRwSMxsDJXf\",\"J9RJf8bBmB7MpzF3m\",\"oWfmge7pbXXpZRogN\",\"srJ34BaybkQh3qRkM\",\"cgGGHpS5GJJi7W9xA\",\"qZgzjHyB3Yrkah3H7\",\"TA9dwvnSdta7rTynz\",\"wux9rb5FwTwHiZtak\",\"CbuDoWREni672DT5r\",\"9GxghE7uZXCMKt6W9\",\"btDF9agteTb8q9eKQ\",\"htXCitorobtqYymjN\",\"gvJpqP8enPdDTEfaF\",\"6d49sckxJ9zDzYaWC\",\"T2vhHPhRR96hRizq8\",\"QwkJidQW7vvEY6TLp\",\"AHmgsYBy6A66bDQFC\",\"4dchmtE8jZLbMZT7c\",\"swCqZwsjXhQvZu5pH\",\"eFYo5jNNHWb7ZFPDm\",\"6waJRR7JPunYF8DhS\",\"jCjCvyhqhpebkJn34\",\"zck7hK3ve9nQ8KTEi\",\"Md4BjhtyrFNpGkZuH\",\"SDh3RX3NxD9tBvyQz\",\"tBpjwaLofayEsPKZo\",\"6SW5H5q5dozh89vkt\",\"rWhXHhzF4W8bea6LP\",\"8wfGN5GjE7icNwieN\",\"SE5G2Caf3btnuGmz6\",\"B4pxRqzo43M7S8FbP\",\"2CSjxNKayqz8YsEpj\",\"MPcATtdQZ42wpf2M8\",\"CYdpG37XFpHudffE3\",\"sxci7DYKNa6q22Sjq\",\"c7uBxu2rgY77H5d79\",\"mcoHczCqRrNEX7Xih\",\"S46dNvCTxGMsJSpcD\",\"KMR6vNzvSKMA2cXnK\",\"Q5YLF4nL6kW658EWc\",\"qg94wqTGMA6K5Caj3\",\"s5sZ5xfqvS7KBG49w\",\"Ljkxeg6usHNKKzSkH\",\"fZEKPzDEsZYxWyA3m\",\"2zDLqRRby62ioNjd8\",\"uWPFTkMhkaDFiK7Bw\",\"CkfQwztuD3Kjjkyqd\",\"tftzEfLQ8TmGPFzP2\",\"ujjoxHz9QrhnmH7ok\",\"7ZQSyiTqZuCEXFhwK\",\"WwnKMv7DmsbAKimhS\",\"cFkePEtcx7fvMRX98\",\"dvz9BTBp7KSJ2ZsxE\",\"LsXBATkeXoHbyLioa\",\"hRpiAqewH3PQ7yJ5E\",\"3KBmDpiXcgL5XcKkR\",\"utfSZCFSPmMXrPEmZ\",\"D2G6Z2sbZRjXjxiyo\",\"e9NhiaGdEeGzhmPju\",\"3kRvaXe66MZcANoDq\",\"R3pMYpqTofeADGczw\",\"PFn4mc8BuavixoPGS\",\"xrGuYYAKBTvTSpfmh\",\"xN6DEYFtHpdLhimor\",\"JJbvewX2tn7aQXHqu\",\"bTGhMH2tgtECdCvJi\",\"8QpyABPpTz3hWPjRN\",\"4CryJmbEsruAELrDt\",\"ke59XNKs2LuJBMihy\",\"X7jajRh5H5ewoJnQu\",\"dw9Kdr8ChJPBS9mne\",\"7AtBFcpwAeEoFnzDo\",\"SjZrkKhkB83WzFTHv\",\"fHT6YpQ8p9NZZAzmM\",\"CMGb4DrqCRdc2FbMa\",\"dELmKkznAydytJTQ2\",\"pA3z2aLYh9fyZhJMi\",\"7zHPkRBtdKFQFkrc4\",\"B53JonKg4Lte784Eb\",\"5HGyJtoZ3AffzAZAv\",\"AWDDnJJ27u8bRGcZQ\",\"FxPDKKibxnZjGJLs6\",\"KnJsGtPq4McAfr23H\",\"WxYEk8yDhascm72FZ\",\"6BqkG3PtBJfb7AkQB\",\"7ASDvPPs5Z7d5Camw\",\"ormJAGfsJbMMLLbg2\",\"wy7AvDwMeujSybWNY\",\"AbhZGN6LEJ4dP8hZQ\",\"tL5frcb7z5sEAdqvj\",\"yaMPPK5DrHcXQdNpz\",\"pprqvkQF5F559nyyv\",\"6nQKzp7nGNbvXnPRJ\",\"KhGe5Ns7vtuLw265g\",\"2mTYrwqEabB4NHPCY\",\"unqzSsxpxj9sZ7rbD\",\"JBYqysXsjqcQomkrh\",\"PAEWysAAFheYiYPBp\",\"BBBZrYxsyA3c7Ad4K\",\"izmmKpy363zaCZ8Gd\",\"gpgnadvSmtac3Z9cW\",\"3CXSJHwL4Qihbi6LA\",\"rGpPd6PvpzLaqps4g\",\"hF9icm7GxAnAGSjAD\",\"cMyphbLMJGooma9Qa\",\"pWZ2Pq8poM8m5eiPZ\",\"Zchyy6CozovknXzGm\",\"rgbMDjhXhjZ7gfNpx\",\"uw47663LqPME8btaA\",\"rvojHhKH3DaxotefQ\",\"M4Jyjssy7yQSH7KNP\",\"XyW9cqhgLCYcSh4RT\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"iNSisYNxdZCdfcDbt\",\"language\":\"cpp\"},{\"_id\":\"sCP58J9vcexchgwo7\",\"language\":\"java\"},{\"_id\":\"ojHe4uXWvxqAARbfm\",\"language\":\"javascript\"},{\"_id\":\"xG2KB9T7mHgycGCSz\",\"language\":\"python3\"},{\"_id\":\"z6e5YCghZfr2yGXcm\",\"language\":\"ruby\"}]}}"]