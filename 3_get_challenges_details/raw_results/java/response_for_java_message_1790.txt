a["{\"msg\":\"result\",\"id\":\"452\",\"result\":{\"_id\":\"gvcJa987XYCxqf9xN\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class Words {\\n  public static String[] dictionary(String s, String[] w) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":1.6388888888888888,\"familyId\":\"x2JaCvEnN5wfsyGoK\",\"instructions\":\"Create a function that takes an initial word and extracts any words that start with the same letters as the initial word.\\n\\n### Examples\\n```\\ndictionary(\\\"bu\\\", [\\\"button\\\", \\\"breakfast\\\", \\\"border\\\"]) ➞ [\\\"button\\\"]\\n\\ndictionary(\\\"tri\\\", [\\\"triplet\\\", \\\"tries\\\", \\\"trip\\\", \\\"piano\\\", \\\"tree\\\"]) ➞ [\\\"triplet\\\", \\\"tries\\\", trip\\\"]\\n\\ndictionary(\\\"beau\\\", [\\\"pastry\\\", \\\"delicious\\\", \\\"name\\\", \\\"boring\\\"]) ➞ []\\n```\\n\\n### Notes\\n- If none of the words match, return an empty array.\\n- Keep the filtered array in the same relative order as the original array of words.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"import static org.junit.Assert.assertArrayEquals; \\nimport org.junit.Test; \\n\\npublic class WordsTest {\\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertArrayEquals(new String[] {\\\"button\\\"}, Words.dictionary(\\\"bu\\\", new String[] {\\\"button\\\", \\\"breakfast\\\", \\\"border\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertArrayEquals(new String[] {}, Words.dictionary(\\\"beau\\\", new String[] {\\\"pastry\\\", \\\"delicious\\\", \\\"name\\\", \\\"boring\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertArrayEquals(new String[] {\\\"there\\\"}, Words.dictionary(\\\"there\\\", new String[] {\\\"there\\\", \\\"here\\\", \\\"everywhere\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertArrayEquals(new String[] {\\\"snow\\\"}, Words.dictionary(\\\"sno\\\", new String[] {\\\"snow\\\", \\\"paper\\\", \\\"ghost\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertArrayEquals(new String[] {\\\"marriage\\\", \\\"married\\\", \\\"many\\\"}, Words.dictionary(\\\"ma\\\", new String[] {\\\"marriage\\\", \\\"married\\\", \\\"many\\\", \\\"delight\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertArrayEquals(new String[] {\\\"notion\\\", \\\"nominate\\\", \\\"note\\\"}, Words.dictionary(\\\"no\\\", new String[] {\\\"inferno\\\", \\\"notion\\\", \\\"nominate\\\", \\\"note\\\", \\\"fairy\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertArrayEquals(new String[] {\\\"creating\\\", \\\"creature\\\", \\\"creed\\\"}, Words.dictionary(\\\"cre\\\", new String[] {\\\"creating\\\", \\\"creature\\\", \\\"creed\\\", \\\"increasing\\\"}));\\n\\t}\\n}\",\"language\":\"java\",\"quality\":0,\"summary\":\"Create a function that takes an initial word and extracts any words that start with the same letters as the initial word.\\n\\nExamples\\ndictionary(\\\"bu\\\", [\\\"button\\\", \\\"breakfast\\\", \\\"border\\\"]) ➞ [\\\"button\\\"]\\n\\ndictionary(\\\"tri\\\", [\\\"triplet\\\", \\\"tries\\\", \\\"trip\\\", \\\"piano\\\", \\\"tree\\\"]) ➞ [\\\"triplet\\\", \\\"tries\\\", trip\\\"]\\n\\ndictionary(\\\"beau\\\", [\\\"pastry\\\", \\\"delicious\\\", \\\"name\\\", \\\"boring\\\"]) ➞ []\",\"tags\":[\"strings\",\"conditions\"],\"timestamp\":{\"$date\":1608231563686},\"title\":\"Little Dictionary\",\"stats\":{\"completed\":{\"total\":32,\"ratings\":[1,1,1,1,1,1,2,2,2,3,3,2,2,1,1,2,2,2,2,1,2,2,2,2,2,1,0,1,2,2,2,2,1,2,1,2],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"d2Xtcbmi4iCKRBcrc\",\"Es4eX2stRpyoXeC7f\",\"SE5G2Caf3btnuGmz6\",\"iq55QasecYJXKz8rx\",\"C9yBWYcZsjmJYww3K\",\"gXTAie79kiw28tx5u\",\"zbP2a97teg8aETaXu\",\"82weQfHHmno4Mq4X7\",\"a49eNnfRwSMxsDJXf\",\"8qNSPHZBpmjSTt3tH\",\"buX4mCQhtXCfBjeno\",\"jyoLggHk8xQKZuoQC\",\"c7uBxu2rgY77H5d79\",\"qaPjAANdnxFnWfj5d\",\"mG8HqKiAQFTdRZthG\",\"4ySzqKC5s3ZRpG9di\",\"rhS8qXRjZcpDXkwnE\",\"srJ34BaybkQh3qRkM\",\"wFRLGjA56kj7xyhmv\",\"htXCitorobtqYymjN\",\"xEX3TDY6C2h82dJTn\",\"sxci7DYKNa6q22Sjq\",\"KMR6vNzvSKMA2cXnK\",\"PJu3WcTpfRrvHfQiS\",\"rWhXHhzF4W8bea6LP\",\"unqzSsxpxj9sZ7rbD\",\"FxPDKKibxnZjGJLs6\",\"jyjKaFsAbJXdTCePh\",\"uw47663LqPME8btaA\",\"PAEWysAAFheYiYPBp\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"vEYHYa6ufpz5o3ruE\",\"language\":\"cpp\"},{\"_id\":\"gvcJa987XYCxqf9xN\",\"language\":\"java\"},{\"_id\":\"p5xNwq2v9ZX7vo3mb\",\"language\":\"javascript\"},{\"_id\":\"5rPQs3uk9Ebexa2n5\",\"language\":\"php\"},{\"_id\":\"GZMFr9cbntWRCdose\",\"language\":\"python3\"},{\"_id\":\"oT7Eq4Lb8pqDAiAhY\",\"language\":\"ruby\"},{\"_id\":\"arvdS9o8MnxhmG2yn\",\"language\":\"swift\"}]}}"]