a["{\"msg\":\"result\",\"id\":\"712\",\"result\":{\"_id\":\"zjEdKiuKbmhXMx993\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class StudentAverage {\\n\\tpublic static String takeDownAverage(String[] scores) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":2.75,\"familyId\":\"48NKFGGib6tM9dyqF\",\"instructions\":\"What is the percentage you can score on a test, which **single-handedly** brings down the class average by **5%?** Given an array of your classmates scores, create a function that returns the answer. Round to the nearest percent.\\n\\n### Examples\\n```\\ntakeDownAverage([\\\"95%\\\", \\\"83%\\\", \\\"90%\\\", \\\"87%\\\", \\\"88%\\\", \\\"93%\\\"]) ➞ \\\"54%\\\"\\n\\ntakeDownAverage([\\\"10%\\\"]) ➞ \\\"0%\\\"\\n\\ntakeDownAverage([\\\"53%\\\", \\\"79%\\\"]) ➞ \\\"51%\\\"\\n```\\n\\n### Notes\\n- No tests will include empty arrays or require negative percentages.\\n- Note that you need to return a string.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"/** \\n========================================== \\nTestGen 3.1 for JUnit 4.13.0 \\t\\t\\nTest Case: StudentAverage::takeDownAverage \\nTimestamp: 10/22/2020 07:46:54 AM \\n------------------------------------------ \\n® DARKKO 2020 © \\n========================================== \\n\\n**/ \\n\\nimport static org.junit.Assert.assertEquals; \\nimport org.junit.Test; \\n\\npublic class StudentAverageTest { \\n\\t\\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertEquals(\\\"54%\\\", StudentAverage.takeDownAverage(new String[] {\\\"95%\\\", \\\"83%\\\", \\\"90%\\\", \\\"87%\\\", \\\"88%\\\", \\\"93%\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertEquals(\\\"0%\\\", StudentAverage.takeDownAverage(new String[] {\\\"10%\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertEquals(\\\"36%\\\", StudentAverage.takeDownAverage(new String[] {\\\"74%\\\", \\\"76%\\\", \\\"58%\\\", \\\"50%\\\", \\\"99%\\\", \\\"70%\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertEquals(\\\"36%\\\", StudentAverage.takeDownAverage(new String[] {\\\"64%\\\", \\\"95%\\\", \\\"89%\\\", \\\"69%\\\", \\\"96%\\\", \\\"59%\\\", \\\"84%\\\", \\\"93%\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertEquals(\\\"62%\\\", StudentAverage.takeDownAverage(new String[] {\\\"77%\\\", \\\"77%\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertEquals(\\\"71%\\\", StudentAverage.takeDownAverage(new String[] {\\\"73%\\\", \\\"98%\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertEquals(\\\"63%\\\", StudentAverage.takeDownAverage(new String[] {\\\"96%\\\", \\\"87%\\\", \\\"66%\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertEquals(\\\"47%\\\", StudentAverage.takeDownAverage(new String[] {\\\"94%\\\", \\\"79%\\\", \\\"54%\\\", \\\"62%\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test09() { \\n\\t\\tassertEquals(\\\"38%\\\", StudentAverage.takeDownAverage(new String[] {\\\"56%\\\", \\\"50%\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() { \\n\\t\\tassertEquals(\\\"63%\\\", StudentAverage.takeDownAverage(new String[] {\\\"100%\\\", \\\"51%\\\", \\\"98%\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test11() { \\n\\t\\tassertEquals(\\\"20%\\\", StudentAverage.takeDownAverage(new String[] {\\\"85%\\\", \\\"74%\\\", \\\"61%\\\", \\\"70%\\\", \\\"56%\\\", \\\"67%\\\", \\\"53%\\\", \\\"53%\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test12() { \\n\\t\\tassertEquals(\\\"27%\\\", StudentAverage.takeDownAverage(new String[] {\\\"67%\\\", \\\"91%\\\", \\\"93%\\\", \\\"87%\\\", \\\"81%\\\", \\\"79%\\\", \\\"88%\\\", \\\"69%\\\", \\\"92%\\\", \\\"69%\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test13() { \\n\\t\\tassertEquals(\\\"73%\\\", StudentAverage.takeDownAverage(new String[] {\\\"75%\\\", \\\"100%\\\"}));\\n\\t}\\n\\n}\\n// end of tests\",\"language\":\"java\",\"quality\":0,\"summary\":\"What is the percentage you can score on a test, which single-handedly brings down the class average by 5%? Given an array of your classmates scores, create a function that returns the answer. Round to the nearest percent.\\n\\nExamples\\ntakeDownAverage([\\\"95%\\\", \\\"83%\\\", \\\"90%\\\", \\\"87%\\\", \\\"88%\\\", \\\"93%\\\"]) ➞ \\\"54%\\\"\\n\\ntakeDownAverage([\\\"10%\\\"]) ➞ \\\"0%\\\"\\n\\ntakeDownAverage([\\\"53%\\\", \\\"79%\",\"tags\":[\"arrays\",\"math\",\"numbers\"],\"timestamp\":{\"$date\":1603323474173},\"title\":\"Bring Down The Class Average\",\"stats\":{\"completed\":{\"total\":23,\"ratings\":[3,3,3,3,3,2,3,4,3,3,1,2,0,4,3,4,2,3,4,2,3,4,2,2],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"Es4eX2stRpyoXeC7f\",\"Ym8AjbKGSJooun3nt\",\"oMfq73A434YWhSuWQ\",\"TZk7ZK6ejLsTr6Bgz\",\"vG7HBZ22E6Jv8oiEh\",\"gXTAie79kiw28tx5u\",\"vRXuYYBNuHEQ29fbm\",\"QfjvAWZnumxpSYpzQ\",\"YL9pqyCu8xsds8J49\",\"NsbHPeWBtAonYNXZc\",\"btabi3PdyisuY5tn9\",\"foytX6kH9wiSYqLtT\",\"MqyvPyccJ2XMrQYg4\",\"rhS8qXRjZcpDXkwnE\",\"htXCitorobtqYymjN\",\"KMR6vNzvSKMA2cXnK\",\"sxci7DYKNa6q22Sjq\",\"wFRLGjA56kj7xyhmv\"]},\"flags\":0},\"editorId\":\"a777e8chPvJkY3tKa\",\"family\":[{\"_id\":\"zjEdKiuKbmhXMx993\",\"language\":\"java\"},{\"_id\":\"JemYN797Zmqj98YEt\",\"language\":\"javascript\"},{\"_id\":\"rAZ27AY2X7a6r5KWp\",\"language\":\"python3\"},{\"_id\":\"8gL7FwzgJEjeCkyvy\",\"language\":\"ruby\"}]}}"]