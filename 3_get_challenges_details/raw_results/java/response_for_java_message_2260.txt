a["{\"msg\":\"result\",\"id\":\"687\",\"result\":{\"_id\":\"jvyJ6xmPyrWab2MeX\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class RowsAndColumns {\\n  public static int[][] increment(int r, int c, String[] i) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":2.6666666666666665,\"familyId\":\"Anv86bZgaeeGENgCL\",\"instructions\":\"Write a function that takes in three parameters: `r, c, i`, where:\\n\\n- `r` and `c` are the number of **rows** and **columns** to initialize a zero matrix.\\n- `i` represents the **array of incrementing operations** (+1).\\n\\nAnd returns the resulting matrix after applying all the increment operations. Each increment operation will **add 1** to the rows or columns specified in the **incrementing array**.\\n\\nTo illustrate:\\n```\\nfinal(3, 3, [\\\"2r\\\", \\\"2c\\\", \\\"1r\\\", \\\"0c\\\"])\\n\\n// Initialize a 3 x 3 matrix of zeroes.\\n\\n[\\n  [0, 0, 0],\\n  [0, 0, 0],\\n  [0, 0, 0]\\n]\\n\\n// Apply \\\"2r\\\" (increment index 2 row).\\n\\n[\\n  [0, 0, 0],\\n  [0, 0, 0],\\n  [1, 1, 1]\\n]\\n\\n// Apply \\\"2c\\\" (increment index 2 column).\\n\\n[\\n  [0, 0, 1],\\n  [0, 0, 1],\\n  [1, 1, 2]\\n]\\n\\n# Apply \\\"1r\\\" (increment index 1 row).\\n\\n[\\n  [0, 0, 1],\\n  [1, 1, 2],\\n  [1, 1, 2]\\n]\\n\\n// Apply \\\"0c\\\" (increment index 0 column).\\n// This is the result you should return.\\n\\n[\\n  [1, 0, 1],\\n  [2, 1, 2],\\n  [2, 1, 2]\\n]\\n```\\n\\n### Examples\\n```\\nfinal(2, 2, [\\\"0r\\\", \\\"0r\\\", \\\"0r\\\", \\\"1c\\\"]) ➞ [\\n  [3, 4],\\n  [0, 1]\\n]\\n\\nfinal(2, 2, [\\\"0c\\\"]) ➞ [\\n  [1, 0],\\n  [1, 0]\\n]\\n\\nfinal(3, 3, [\\\"1c\\\", \\\"2c\\\", \\\"2c\\\", \\\"3c\\\", \\\"3c\\\", \\\"3c\\\"]) ➞ [\\n    [1, 2, 3],\\n    [1, 2, 3],\\n    [1, 2, 3]\\n]\\n\\nfinal(3, 3, []) ➞ [\\n  [0, 0, 0],\\n  [0, 0, 0],\\n  [0, 0, 0]\\n]\\n```\\n\\n### Notes\\n- The 2D matrix is 0-indexed.\\n- The matrix created will have at least one row and one column.\\n- All **increment operations**  will be exactly `+1`.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"import static org.junit.Assert.assertArrayEquals; \\nimport org.junit.Test; \\n\\npublic class RowsAndColumnsTest {\\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertArrayEquals(new int[][] {{3, 4}, {0, 1}}, RowsAndColumns.increment(2, 2, new String[] {\\\"0r\\\", \\\"0r\\\", \\\"0r\\\", \\\"1c\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertArrayEquals(new int[][] {{1, 0}, {1, 0}}, RowsAndColumns.increment(2, 2, new String[] {\\\"0c\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertArrayEquals(new int[][] {{1, 2, 3}, {1, 2, 3}, {1, 2, 3}}, RowsAndColumns.increment(3, 3, new String[] {\\\"0c\\\", \\\"1c\\\", \\\"1c\\\", \\\"2c\\\", \\\"2c\\\", \\\"2c\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertArrayEquals(new int[][] {{1, 0, 1}, {2, 1, 2}, {2, 1, 2}}, RowsAndColumns.increment(3, 3, new String[] {\\\"2r\\\", \\\"2c\\\", \\\"1r\\\", \\\"0c\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertArrayEquals(new int[][] {{0}}, RowsAndColumns.increment(1, 1, new String[] {}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertArrayEquals(new int[][] {{1, 2, 3}, {3, 4, 5}, {0, 1, 2}}, RowsAndColumns.increment(3, 3, new String[] {\\\"0r\\\", \\\"2c\\\", \\\"1r\\\", \\\"2c\\\", \\\"1c\\\", \\\"1r\\\", \\\"1r\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertArrayEquals(new int[][] {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}}, RowsAndColumns.increment(3, 3, new String[] {}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertArrayEquals(new int[][] {{0, 0, 0, 3}, {3, 3, 3, 6}, {0, 0, 0, 3}}, RowsAndColumns.increment(3, 4, new String[] {\\\"1r\\\", \\\"1r\\\", \\\"1r\\\", \\\"3c\\\", \\\"3c\\\", \\\"3c\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test09() { \\n\\t\\tassertArrayEquals(new int[][] {{1}, {2}, {2}, {2}, {1}, {1}, {1}, {1}, {1}, {1}}, RowsAndColumns.increment(10, 1, new String[] {\\\"1r\\\", \\\"2r\\\", \\\"3r\\\", \\\"0c\\\"}));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() { \\n\\t\\tassertArrayEquals(new int[][] {{4, 1, 0, 0, 0}, {9, 6, 5, 5, 5}}, RowsAndColumns.increment(2, 5, new String[] {\\\"1r\\\", \\\"1r\\\", \\\"1r\\\", \\\"1c\\\", \\\"0c\\\", \\\"0c\\\", \\\"1r\\\", \\\"0c\\\", \\\"1r\\\", \\\"0c\\\"}));\\n\\t}\\n}\",\"language\":\"java\",\"quality\":0,\"summary\":\"Write a function that takes in three parameters: r, c, i, where:\\n\\nr and c are the number of rows and columns to initialize a zero matrix.\\ni represents the array of incrementing operations (+1).\\n\\nAnd returns the resulting matrix after applying all the increment operations. Each increment operation will add 1 to the rows or columns specified in the incrementing\",\"tags\":[\"arrays\",\"higher_order_functions\"],\"timestamp\":{\"$date\":1607543630699},\"title\":\"Incrementing Rows and Columns\",\"stats\":{\"completed\":{\"total\":33,\"ratings\":[3,3,3,3,3,4,3,3,0,2,4,2,4,0,2,2,4,2,1,4,2,2,2,3,3,2,3,4,3,3,1,2,4,2,4,4],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"Es4eX2stRpyoXeC7f\",\"fbgn5575LS3jsxABM\",\"T2vhHPhRR96hRizq8\",\"gXTAie79kiw28tx5u\",\"WifGsXmRL5D7j86HN\",\"mDWNyaaQ9hvPCRzSd\",\"Y6N5mCB4KjcLeFFDK\",\"LNCb5rksJLJ43L4Nw\",\"sbN8HeToag4Ymfeux\",\"DkSMZ3jZLkwviKb9g\",\"xBQC5uQdx6WndJ3iM\",\"rhS8qXRjZcpDXkwnE\",\"95BvwJssZCGtv76HS\",\"jg64RAk9RJAwEeP87\",\"haJZvXXsx279mcquX\",\"rEWbYF9mHh28oRvT9\",\"iounszSXf6EdiSoP8\",\"zck7hK3ve9nQ8KTEi\",\"WN9Gn8fyStG57qzGC\",\"aqhzzoK9fofcL3mJQ\",\"kFMhaBXDFKwb35d5b\",\"KMR6vNzvSKMA2cXnK\",\"2NJZbusRvu3eJ4tHu\",\"9rTzn5CuEdbTxfemP\",\"utfSZCFSPmMXrPEmZ\",\"e4WhfhAzzRt22JbP2\",\"evq99nYD69bpbFG9f\",\"sxci7DYKNa6q22Sjq\",\"8okfc8E3pb37QNpzQ\",\"BtGQcTcNWFCvzMuLb\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"MshtuGs6cstBqnhDu\",\"language\":\"cpp\"},{\"_id\":\"jvyJ6xmPyrWab2MeX\",\"language\":\"java\"},{\"_id\":\"Hr6HTn3ngCbmJayd4\",\"language\":\"javascript\"},{\"_id\":\"8BQKa98d3s9Kis4vv\",\"language\":\"python3\"},{\"_id\":\"Cmh2Kjr9iBKTnTPyx\",\"language\":\"ruby\"}]}}"]