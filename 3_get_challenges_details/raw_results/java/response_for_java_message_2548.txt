a["{\"msg\":\"result\",\"id\":\"829\",\"result\":{\"_id\":\"rwGzp85CNxvdCADAL\",\"author\":\"Edward Clark\",\"authorId\":\"3pdgguqZgNDSAJSGm\",\"code\":\"public class Challenge {\\n  public static int[] jimOrders(int[][] orders) {\\n\\t\\t\\n  }\\n}\",\"difficulty\":3.8666666666666667,\"quality\":0,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"awQDoRWkfyNrJN3QR\",\"instructions\":\"Jim's Burgers has a line of hungry customers. Orders vary in the time it takes to prepare them. Determine the order the customers receive their orders. Start by numbering each of the customers from `1` to `n`, front of the line to the back. You will then be given an order number and a preparation time for each customer.\\n\\nThe time of delivery is calculated as the sum of the order number and the preparation time. If two orders are delivered at the same time, assume they are delivered in ascending customer number order.\\n\\nFor example `n=5`, there are  customers in line. They each receive an order number `order[i]` and a preparation time `prep[i]`:\\n\\n |  |  |  |  |  |  |\\n--- | --- | --- | --- | --- | ---\\nCustomer | 1 |  2  |  3  |  4 |  5\\nOrder # | 8 |  5 | 6 |  2 |  4\\nPrep time | 3 | 6 | 2 | 3 | 3\\nCalculate: | | | | | |\\nServe time | 11 |11 | 8 | 5 | 7\\n\\nWe see that the orders are delivered to customers in the following order:\\n\\n|  |  |  |  |  |  |\\n--- | --- | --- | --- | --- | ---\\nServe time | 5 | 7 |  8 | 11 | 11\\nCustomer | 4 | 5 | 3 | 1 | 2\\n\\nYour jimOrders method should return an array of integers that represent the order that customers' orders are delivered.\\n\\njimOrders has the following parameter(s):\\n- `orders`: a 2D integer array where each `orders[i]` is in the form `(order[i],prep[i])`.\\n\\n[Video Description and Solution](https://www.youtube.com/watch?v=16BqKPgV63Q)\",\"isFree\":false,\"isHidden\":false,\"lab\":\"/**\\n *\\n * @author edwardclark\\n */\\n\\nimport static org.hamcrest.core.Is.is;\\nimport org.junit.Test;\\nimport static org.junit.Assert.assertThat;\\n\\npublic class ChallengeTest {\\n    @Test\\n    public void test1() {\\n        int[][] arg = new int[5][5];\\n        arg[0][0] = 8;\\n        arg[0][1] = 1;\\n        arg[1][0] = 4;\\n        arg[1][1] = 2;\\n        arg[2][0] = 5;\\n        arg[2][1] = 6;\\n        arg[3][0] = 3;\\n        arg[3][1] = 1;\\n        arg[4][0] = 4;\\n        arg[4][1] = 3;\\n        assertThat(Challenge.jimOrders(arg), is(new int[]{4,2,5,1,3}));\\n    }\\n    @Test\\n    public void test2() {\\n        int[][] arg = new int[3][3];\\n        arg[0][0] = 1;\\n        arg[0][1] = 3;\\n        arg[1][0] = 2;\\n        arg[1][1] = 3;\\n        arg[2][0] = 3;\\n        arg[2][1] = 3;\\n        assertThat(Challenge.jimOrders(arg), is(new int[]{1,2,3}));\\n    }\\n    @Test\\n    public void test3() {\\n        int[][] arg = new int[2][2];\\n        arg[0][0] = 1;\\n        arg[0][1] = 1;\\n        arg[1][0] = 1;\\n        arg[1][1] = 1;\\n        assertThat(Challenge.jimOrders(arg), is(new int[]{1,2}));\\n    }\\n    @Test\\n    public void test4() {\\n        int[][] arg = new int[1][2];\\n        arg[0][0] = 1;\\n        arg[0][1] = 1;\\n        assertThat(Challenge.jimOrders(arg), is(new int[]{1}));\\n    }\\n    @Test\\n    public void test5() {\\n        int[][] arg = new int[13][13];\\n        arg[0][0] = 122470;\\n        arg[0][1] = 725261;\\n        arg[1][0] = 193218;\\n        arg[1][1] = 693005;\\n        arg[2][0] = 830347;\\n        arg[2][1] = 284246;\\n        arg[3][0] = 974815;\\n        arg[3][1] = 823134;\\n        arg[4][0] = 251206;\\n        arg[4][1] = 572501;\\n        arg[5][0] = 55509;\\n        arg[5][1] = 927152;\\n        arg[6][0] = 299590;\\n        arg[6][1] = 651593;\\n        arg[7][0] = 222305;\\n        arg[7][1] = 641645;\\n        arg[8][0] = 984018;\\n        arg[8][1] = 463771;\\n        arg[9][0] = 494787;\\n        arg[9][1] = 286091;\\n        arg[10][0] = 217190;\\n        arg[10][1] = 833029;\\n        arg[11][0] = 820867;\\n        arg[11][1] = 380896;\\n        arg[12][0] = 744986;\\n        arg[12][1] = 630663;\\n        assertThat(Challenge.jimOrders(arg), is(new int[]{10,5,1,8,2,7,6,11,3,12,13,9,4}));\\n    }\\n}\",\"language\":\"java\",\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,5,5,1,1,4,5,2,5,0,5],\"quality\":[],\"rators\":[\"3pdgguqZgNDSAJSGm\",\"Es4eX2stRpyoXeC7f\",\"rvExrAkJ5dRo2R8YX\",\"rehehi2Tr2mwaEoJE\",\"MhSbFaHSTBk2MMZyo\",\"Ym8AjbKGSJooun3nt\",\"gXTAie79kiw28tx5u\",\"fbgn5575LS3jsxABM\",\"n4aCDxWv4rpnsqeRp\",\"h6exQtjB22pabWmvE\"],\"total\":13},\"flags\":0},\"summary\":\"Jim's Burgers has a line of hungry customers. Orders vary in the time it takes to prepare them. Determine the order the customers receive their orders. Start by numbering each of the customers from 1 to n, front of the line to the back. You will then be given an order number and a preparation time for each customer.\\n\\nThe time of delivery is calculated as the s\",\"tags\":[\"sorting\"],\"timestamp\":{\"$date\":1601583577175},\"title\":\"Jim and the Orders\",\"family\":[{\"_id\":\"rwGzp85CNxvdCADAL\",\"language\":\"java\"}]}}"]