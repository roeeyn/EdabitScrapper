a["{\"msg\":\"result\",\"id\":\"84\",\"result\":{\"_id\":\"YTGuwJBQjE4csZtLW\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"public class RedundantString {\\n\\tpublic static String repeatString(Object t, int n) {\\n\\t\\t\\n\\t}\\n}\",\"difficulty\":0.5571428571428572,\"familyId\":\"TjPfdRgaCipwSenhh\",\"instructions\":\"Create a function that takes a string `t` and a number `n` and returns the repeated string **n number of times**.\\n\\nReturn `\\\"Not a string!\\\"` if given argument `t` is not a string,\\n\\n### Examples\\n```\\nrepeatString(\\\"Tesha\\\", 2) ➞ \\\"TeshaTesha\\\"\\n\\nrepeatString(\\\"Deep\\\", 3) ➞ \\\"DeepDeepDeep\\\"\\n\\nrepeatString(\\\"Matt\\\", 4) ➞ \\\"MattMattMattMatt\\\"\\n\\nrepeatString(2000, 7) ➞ \\\"Not a string!\\\"\\n```\\n\\n### Notes\\n- If you get stuck on a challenge, find help in the **Resources** tab.\\n- If you're _really_ stuck, unlock solutions in the **Solutions** tab.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"import static org.junit.Assert.assertEquals; \\nimport org.junit.Test; \\n\\npublic class RedundantStringTest {\\n\\t@Test\\n\\tpublic void test01() { \\n\\t\\tassertEquals(\\\"TeshaTesha\\\", RedundantString.repeatString(\\\"Tesha\\\", 2));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test02() { \\n\\t\\tassertEquals(\\\"DeepDeepDeep\\\", RedundantString.repeatString(\\\"Deep\\\", 3));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test03() { \\n\\t\\tassertEquals(\\\"MattMattMattMatt\\\", RedundantString.repeatString(\\\"Matt\\\", 4));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test04() { \\n\\t\\tassertEquals(\\\"Not a string!\\\", RedundantString.repeatString(2000, 7));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test05() { \\n\\t\\tassertEquals(\\\"***\\\", RedundantString.repeatString(\\\"*\\\", 3));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test06() { \\n\\t\\tassertEquals(\\\"HelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHello\\\", RedundantString.repeatString(\\\"Hello\\\", 11));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test07() { \\n\\t\\tassertEquals(\\\"544466654446665444666544466654446665444666544466654446665444666544466654446665444666\\\", RedundantString.repeatString(\\\"5444666\\\", 12));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test08() { \\n\\t\\tassertEquals(\\\"Not a string!\\\", RedundantString.repeatString(new Object[] {}, 3));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test09() { \\n\\t\\tassertEquals(\\\"Not a string!\\\", RedundantString.repeatString(new Object[] {}, 6));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test10() { \\n\\t\\tassertEquals(\\\"Not a string!\\\", RedundantString.repeatString(24, 3));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test11() { \\n\\t\\tassertEquals(\\\"Not a string!\\\", RedundantString.repeatString(true, 3));\\n\\t}\\n\\n\\t@Test\\n\\tpublic void test12() { \\n\\t\\tassertEquals(\\\"\\\", RedundantString.repeatString(\\\"Hello\\\", 0));\\n\\t}\\n}\\n// credit goes to the original author/publisher @Mubashir Hassan\",\"language\":\"java\",\"quality\":0,\"summary\":\"Create a function that takes a string t and a number n and returns the repeated string n number of times.\\n\\nReturn \\\"Not a string!\\\" if given argument t is not a string,\\n\\nExamples\\nrepeatString(\\\"Tesha\\\", 2) ➞ \\\"TeshaTesha\\\"\\n\\nrepeatString(\\\"Deep\\\", 3) ➞ \\\"DeepDeepDeep\\\"\\n\\nrepeatString(\\\"Matt\\\", 4) ➞ \\\"MattMattMattMatt\\\"\\n\\nrepeatString(2000, 7) ➞ \\\"Not a string!\\\"\\n\\nNotes\\nIf you ge\",\"tags\":[\"strings\",\"conditions\",\"logic\",\"language_fundamentals\"],\"timestamp\":{\"$date\":1612793197907},\"title\":\"Repeat String\",\"stats\":{\"completed\":{\"total\":66,\"ratings\":[1,1,1,1,1,0,0,1,0,1,1,0,1,1,0,0,1,1,0,0,1,0,1,0,2,0,1,1,0,1,0,0,0,0,0,0,0,1,2,0,1,1,0,1,1,0,0,0,0,1,0,0,2,2,0,0,0,1,1,0,0,2,0,0,0,1,1,0,0,2],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"Es4eX2stRpyoXeC7f\",\"uFfEio8nzDvL8emhp\",\"AeJSxRqw2dJZuGvdk\",\"oMZovHkR6QqNvQwyc\",\"a49eNnfRwSMxsDJXf\",\"cueHAmTrcWuowXf58\",\"3SgSNoAB3sxaYeT3w\",\"hhxjQREtmHSheH9Pj\",\"gBGjCfJvPHswDM5JQ\",\"btabi3PdyisuY5tn9\",\"qaPjAANdnxFnWfj5d\",\"82weQfHHmno4Mq4X7\",\"kiq3z4o9ABhQd7aXJ\",\"b6PEkvr66YeCamroN\",\"QRv96jmNaYsWkxQEG\",\"eQXwk5zGckM8tCWYH\",\"EcBw39vkywQsT3Y2Z\",\"buX4mCQhtXCfBjeno\",\"x9CWxL7Q7yCHdrAmq\",\"c96gH88NsjR3MycAj\",\"SbDRsLR6yfZXETyKN\",\"8qNSPHZBpmjSTt3tH\",\"jyoLggHk8xQKZuoQC\",\"xEX3TDY6C2h82dJTn\",\"sYKPxZX5xJZ2GTp6Q\",\"6rvJwN4mcX7iYGjY7\",\"khdCaD6AGBiR6txLQ\",\"Yohr2MmAyaWGMbB35\",\"2ptN2mhjFwFcHyPZd\",\"c7uBxu2rgY77H5d79\",\"peSPGkvA444dd9mmJ\",\"sxci7DYKNa6q22Sjq\",\"TCvpT4EPb8qNssNB7\",\"vRXuYYBNuHEQ29fbm\",\"Reyq7sSccAZJvJrmB\",\"nXw9eTHFraWQtwJtY\",\"nSLvkGEpiYCtcBLaa\",\"uw47663LqPME8btaA\",\"8BFSTCnoe2QggN64c\",\"Gn8rShvWCKLX3cxzx\",\"srJ34BaybkQh3qRkM\",\"NioGGZL9KCn5Ln96t\",\"cR3ibTMxLyEdDFCHY\",\"dQd664XYR6QKHFvHW\",\"2GkBdeN5if5zCk2Si\",\"BcLXzKWQpnj5NoXYd\",\"PCsT29KNEX8ufEawi\",\"htXCitorobtqYymjN\",\"DEDniTrstQYGounXT\",\"J7epB3qSQJ2E8vWkY\",\"RsujLHaML6L3KinzK\",\"5QN8R22z43SrwoHDz\",\"QMcxci638CgTJ54bH\",\"unqzSsxpxj9sZ7rbD\",\"xLy94bAjaLwokPcZZ\",\"x2Cz7S8rCKJqCE3Xe\",\"rWhXHhzF4W8bea6LP\",\"9du58gNDkWQEWivbB\",\"F8dA24AosSC8XXb7D\",\"5HGyJtoZ3AffzAZAv\",\"nFbmNzMQ38TncmfQX\",\"r72oFMcCQh4rBsKHb\",\"YEMQNE333gAXhGE4c\",\"5eDE9KCDnDnqBqLEK\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"YTGuwJBQjE4csZtLW\",\"language\":\"java\"},{\"_id\":\"DBC7uCaN3yA4uGFQN\",\"language\":\"javascript\"},{\"_id\":\"Geofx6GNQRCfAhX7M\",\"language\":\"php\"},{\"_id\":\"YSJjPdkwrhQCfnkcZ\",\"language\":\"python3\"},{\"_id\":\"D7S5dgDbdnXkxBWXA\",\"language\":\"ruby\"}]}}"]