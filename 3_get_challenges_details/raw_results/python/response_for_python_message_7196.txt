a["{\"msg\":\"result\",\"id\":\"2305\",\"result\":{\"_id\":\"WBsxNXnqeFr4es9oh\",\"author\":\"Mubashir Hassan \",\"authorId\":\"T6iBEE2jp7f7iEF2P\",\"code\":\"def clockwise_cipher(message):\\n\\t\",\"difficulty\":3.64,\"familyId\":\"TxusKF6ufnqEvpA6Y\",\"instructions\":\"In **Clockwise Cipher**, encoding is done by placing message characters in the corner cells of a square and moving in a clockwise direction.\\n\\nCreate a function that takes an argument `message`, and returns the **encoded message**.\\n\\nThere are some variations on the rules of encipherment. One version of the cipher rules are outlined below:\\n\\n```\\nmessage = \\\"Mubashir Hassan\\\"\\n\\nclockwise_cipher(message) ➞ \\\"Ms ussahr nHaaib\\\"\\n```\\n\\n**Step 1:** Form a square large enough to fit all the message characters. Given message can fit in a 4 x 4 square.\\n\\n**Step 2:** Starting with the top-left corner, place message characters in the corner cells moving in a clockwise direction. After the first cycle is complete, continue placing characters in the cells following the last one in its respective row/column. When the outer cells are filled, continue for the remaining inner squares:\\n\\nM | s |   | u\\n--- | --- | --- | ---\\ns | s | a | h\\nr |   | n | H\\na | a | i | b\\n\\n**Step 3:** Return encoded message **Rows-wise**:\\n\\n```\\neMessage = \\\"Ms ussahr nHaaib\\\"\\n```\\n### Example for a 5 x 5 Square\\n```\\n[ 1  5  9 13  2]\\n[16 17 21 18  6]\\n[12 24 25 22 10]\\n[ 8 20 23 19 14]\\n[ 4 15 11  7  3]\\n```\\n\\n### Examples\\n```\\nclockwise_cipher(\\\"Mubashir Hassan\\\") ➞ \\\"Ms ussahr nHaaib\\\"\\n\\nclockwise_cipher(\\\"Matt MacPherson\\\") ➞ \\\"M ParsoMc nhteat\\\"\\n\\nclockwise_cipher(\\\"Edabit is amazing\\\") ➞ \\\"Eisadng  tm    i   zbia a\\\"\\n```\\n\\n### Notes\\n- Fill up any unused cells with a space character.\\n- Message can contain spaces and special characters.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(clockwise_cipher(\\\"Mubashir Hassan\\\"), \\\"Ms ussahr nHaaib\\\")\\nTest.assert_equals(clockwise_cipher(\\\"Matt MacPherson\\\"), \\\"M ParsoMc nhteat\\\")\\nTest.assert_equals(clockwise_cipher(\\\"Edabit is amazing\\\"), \\\"Eisadng  tm    i   zbia a\\\")\\nTest.assert_equals(clockwise_cipher(\\\"Started from the bottom now we're here\\\"), \\\"Stf  tt nweroet    eree    tmr   eb   h'wormohoda\\\")\\nTest.assert_equals(clockwise_cipher(\\\"I am so clever that sometimes I don't understand a single word of what I'm saying\\\"), \\\"I cehsts  dtdt ioselerfa  lesI'amder dhngy aatsosi taovno w wni 'g nrun mImmt eoa\\\")\\nTest.assert_equals(clockwise_cipher(\\\"Even though I walk through the darkest valley, I will fear no evil, for you are with me\\\"), \\\"E uIlhghavesay laottdvifyawllgtnh   mo, ue     owktl     r raI    eirh e teur, eove fi l rnk  o whhe\\\")\\nTest.assert_equals(clockwise_cipher(\\\"If life seems jolly rotten there's something you've forgotten, and that's to laugh and smile and dance and sing. When you're feeling in the dumps, don't be silly chumps. Just purse your lips and whistle, that's the thing!\\\"), \\\"Iisslreh'oh 'ffgonnhs gnm  ctf ani nu l tdd,eunpso syu.s,nd gd pu rpnhrnWalte utlt'heyb  ossgswth!ih i'lneaehat   ss fhetuelitg nedmidstoo u   a,i iim 'etes  losthaiot.d Jpcle' udymasmenneryhg ev e anl  att  tolreone r tyjee \\\")\\n# Mubashir\",\"language\":\"python3\",\"quality\":0,\"summary\":\"In Clockwise Cipher, encoding is done by placing message characters in the corner cells of a square and moving in a clockwise direction.\\n\\nCreate a function that takes an argument message, and returns the encoded message.\\n\\nThere are some variations on the rules of encipherment. One version of the cipher rules are outlined below:\\n\\nmessage = \\\"Mubashir Hassan\\\"\\n\\ncl\",\"tags\":[\"algorithms\",\"cryptography\",\"logic\",\"strings\"],\"timestamp\":{\"$date\":1611033218482},\"title\":\"Clockwise Cipher\",\"stats\":{\"completed\":{\"total\":22,\"ratings\":[3,3,3,3,3,1,4,4,4,3,2,5,3,5,4,5,5,2,4,5,4,5,5,3,3],\"quality\":[],\"rators\":[\"T6iBEE2jp7f7iEF2P\",\"8PwfYqoDQFThzNtvf\",\"iS5BrkGLzJyPK7nKt\",\"TmabA7AGCEoaYyqqz\",\"hvZqMn5XtmqoLLRGx\",\"yjtdwc2AC4jA2RWtn\",\"3WpzvdEQNQDo7YBSt\",\"fznzd3qnvtbFkkizz\",\"d6iEb2BDDofyeePh9\",\"p8qqFdJ3FSk5x9z3G\",\"n2BRY9X8899dcG8Bw\",\"A3uMN4BvFEGsSLXRg\",\"8sNv5PTHa7XQ8bNqR\",\"mfm3gB39arY8Rjb2y\",\"J3upzLHuEwXH7Z2hx\",\"xn7uGNKeAwPEkP9oA\",\"gJYuGdkXEWWmGRLzu\",\"tAF9Gf6PiGogbZuWs\",\"n88bzTaZbvoRgHfQ6\",\"GTKsdeEihE636Le9i\"]},\"flags\":0},\"editorId\":\"T6iBEE2jp7f7iEF2P\",\"family\":[{\"_id\":\"WBmxhKW6YnpmKX7X2\",\"language\":\"cpp\"},{\"_id\":\"nWj5kRgxnieP9i8Fn\",\"language\":\"javascript\"},{\"_id\":\"WBsxNXnqeFr4es9oh\",\"language\":\"python3\"},{\"_id\":\"9W25LBhcmwdZk4zP3\",\"language\":\"ruby\"}]}}"]