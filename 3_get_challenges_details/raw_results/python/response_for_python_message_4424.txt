a["{\"msg\":\"result\",\"id\":\"932\",\"result\":{\"_id\":\"iRvRtg2xxL9BnSEvf\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"class Person:\\n\\t\",\"difficulty\":1.4722222222222223,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"i4ymsX23fK7E5ixjc\",\"instructions\":\"Create a `Person` class which will have *three properties*:\\n- Name\\n- List of foods they like\\n- List of foods they hate\\n\\nIn this class, create the method `taste()`:\\n- It will take in a food name as a string.\\n- Return **{person_name} eats the {food_name}**.\\n- If the food is in the person's *like list*, add **'and loves it!'** to the end.\\n- If it is in the person's *hate list*, add **'and hates it!'** to the end.\\n- If it is in neither list, simply add an *exclamation mark* to the end.\\n\\n### Examples\\n```\\np1 = Person(\\\"Sam\\\", [\\\"ice cream\\\"], [\\\"carrots\\\"])\\n```\\n\\n```\\np1.taste(\\\"ice cream\\\") ➞ \\\"Sam eats the ice cream and loves it!\\\"\\n\\np1.taste(\\\"cheese\\\") ➞ \\\"Sam eats the cheese!\\\"\\n\\np1.taste(\\\"carrots\\\") ➞ \\\"Sam eats the carrots and hates it!\\\"\\n```\\n\\n### Notes\\n- A person can have an empty list for foods they hate and/or love.\\n- Check the **Resources** for some helpful tutorials on Python classes.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"p1 = Person(\\\"Sam\\\", [\\\"ice cream\\\", \\\"pie\\\", \\\"apples\\\"], [\\\"carrots\\\", \\\"bananas\\\", \\\"cheese\\\", \\\"lettuce\\\"])\\np2 = Person(\\\"Mitchell\\\", [], [\\\"brocolli\\\", \\\"lettuce\\\", \\\"cheese\\\", \\\"pie\\\", \\\"apples\\\", \\\"bananas\\\", \\\"ice cream\\\", \\\"carrots\\\"])\\np3 = Person(\\\"Julie\\\", [\\\"brocolli\\\", \\\"lettuce\\\", \\\"cheese\\\", \\\"pie\\\", \\\"apples\\\", \\\"bananas\\\", \\\"ice cream\\\", \\\"carrots\\\"], [])\\np4 = Person(\\\"Steven\\\", [], [])\\np5 = Person(\\\"Joshua\\\", [\\\"ice cream\\\", \\\"pie\\\", \\\"cheese\\\", \\\"bananas\\\"], [\\\"lettuce\\\", \\\"apples\\\"])\\n\\nTest.assert_equals(p1.taste(\\\"ice cream\\\"), \\\"Sam eats the ice cream and loves it!\\\")\\nTest.assert_equals(p1.taste(\\\"carrots\\\"), \\\"Sam eats the carrots and hates it!\\\")\\nTest.assert_equals(p1.taste(\\\"brocolli\\\"), \\\"Sam eats the brocolli!\\\")\\nTest.assert_equals(p1.taste(\\\"lettuce\\\"), \\\"Sam eats the lettuce and hates it!\\\")\\nTest.assert_equals(p1.taste(\\\"cheese\\\"), \\\"Sam eats the cheese and hates it!\\\")\\nTest.assert_equals(p1.taste(\\\"pie\\\"), \\\"Sam eats the pie and loves it!\\\")\\nTest.assert_equals(p1.taste(\\\"apples\\\"), \\\"Sam eats the apples and loves it!\\\")\\nTest.assert_equals(p1.taste(\\\"bananas\\\"), \\\"Sam eats the bananas and hates it!\\\")\\nTest.assert_equals(p2.taste(\\\"ice cream\\\"), \\\"Mitchell eats the ice cream and hates it!\\\")\\nTest.assert_equals(p2.taste(\\\"carrots\\\"), \\\"Mitchell eats the carrots and hates it!\\\")\\nTest.assert_equals(p2.taste(\\\"brocolli\\\"), \\\"Mitchell eats the brocolli and hates it!\\\")\\nTest.assert_equals(p2.taste(\\\"lettuce\\\"), \\\"Mitchell eats the lettuce and hates it!\\\")\\nTest.assert_equals(p2.taste(\\\"cheese\\\"), \\\"Mitchell eats the cheese and hates it!\\\")\\nTest.assert_equals(p2.taste(\\\"pie\\\"), \\\"Mitchell eats the pie and hates it!\\\")\\nTest.assert_equals(p2.taste(\\\"apples\\\"), \\\"Mitchell eats the apples and hates it!\\\")\\nTest.assert_equals(p2.taste(\\\"bananas\\\"), \\\"Mitchell eats the bananas and hates it!\\\")\\nTest.assert_equals(p3.taste(\\\"ice cream\\\"), \\\"Julie eats the ice cream and loves it!\\\")\\nTest.assert_equals(p3.taste(\\\"carrots\\\"), \\\"Julie eats the carrots and loves it!\\\")\\nTest.assert_equals(p3.taste(\\\"brocolli\\\"), \\\"Julie eats the brocolli and loves it!\\\")\\nTest.assert_equals(p3.taste(\\\"lettuce\\\"), \\\"Julie eats the lettuce and loves it!\\\")\\nTest.assert_equals(p3.taste(\\\"cheese\\\"), \\\"Julie eats the cheese and loves it!\\\")\\nTest.assert_equals(p3.taste(\\\"pie\\\"), \\\"Julie eats the pie and loves it!\\\")\\nTest.assert_equals(p3.taste(\\\"apples\\\"), \\\"Julie eats the apples and loves it!\\\")\\nTest.assert_equals(p3.taste(\\\"bananas\\\"), \\\"Julie eats the bananas and loves it!\\\")\\nTest.assert_equals(p4.taste(\\\"ice cream\\\"), \\\"Steven eats the ice cream!\\\")\\nTest.assert_equals(p4.taste(\\\"carrots\\\"), \\\"Steven eats the carrots!\\\")\\nTest.assert_equals(p4.taste(\\\"brocolli\\\"), \\\"Steven eats the brocolli!\\\")\\nTest.assert_equals(p4.taste(\\\"lettuce\\\"), \\\"Steven eats the lettuce!\\\")\\nTest.assert_equals(p4.taste(\\\"cheese\\\"), \\\"Steven eats the cheese!\\\")\\nTest.assert_equals(p4.taste(\\\"pie\\\"), \\\"Steven eats the pie!\\\")\\nTest.assert_equals(p4.taste(\\\"apples\\\"), \\\"Steven eats the apples!\\\")\\nTest.assert_equals(p4.taste(\\\"bananas\\\"), \\\"Steven eats the bananas!\\\")\\nTest.assert_equals(p5.taste(\\\"ice cream\\\"), \\\"Joshua eats the ice cream and loves it!\\\")\\nTest.assert_equals(p5.taste(\\\"carrots\\\"), \\\"Joshua eats the carrots!\\\")\\nTest.assert_equals(p5.taste(\\\"brocolli\\\"), \\\"Joshua eats the brocolli!\\\")\\nTest.assert_equals(p5.taste(\\\"lettuce\\\"), \\\"Joshua eats the lettuce and hates it!\\\")\\nTest.assert_equals(p5.taste(\\\"cheese\\\"), \\\"Joshua eats the cheese and loves it!\\\")\\nTest.assert_equals(p5.taste(\\\"pie\\\"), \\\"Joshua eats the pie and loves it!\\\")\\nTest.assert_equals(p5.taste(\\\"apples\\\"), \\\"Joshua eats the apples and hates it!\\\")\\nTest.assert_equals(p5.taste(\\\"bananas\\\"), \\\"Joshua eats the bananas and loves it!\\\")\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[1,1,1,1,1,2,0,1,2,1,1,2,1,1,0,2,1,1,1,1,2,2,2,2,1,2,2,2,2,2,1,2,2,2,1,1,1,2,1,2,0,2,1,2,2,2,2,2,1,2,1,2,2,1,0,2,2,3,1,1,2,1,2,2,2,2,2,2,1,2,2,0,1,2,2,2,2,1,1,2,1,1,2,2,1,1,2,1,2,1,2,0,1,1,2,2,0,2,1,2,2,1,2,2,2,1,2,1,0,2,2,0,1,0,1,2,1,2,2,3,2,2,2,2,2,2,0,0,2,1,2,2,2,1,1,1,2,1,2,2,0,2,2,2,2,3,1,3,2,2,2,1,2,2,2,2,2,1,0,2,0,0,5,1,0,2,1,2,2,2,1,2,2,0,3,2,1,3,2,2,2,2,0,2,0,2,2,1,1,1,2,1,1,1,2,1,1,1,0,0,2,1,3,2,2,2,2,1,2,2,2,2,2,2,1,1,1,2,3,2,1,2,1,1,2,2,2,2,2,2,2,1,1,1,1,2,1,2,2,1,0,1,2,1,2,2,1,4,2,1,2,0,2,1,2,3,2,1,2,2,1,2,1,2,2,2,2,0,0,0,0,1,1,1,1,0,1,2,2,0,2,2,2,2,1,0,2,1,0,2,2,0,2,2,2,1,2,2,0,2,1,0,5,2,2,0,1,1,2,1,1,1,2,0,2,0,2,0,1,0,2,2,2,1,1,1,1,2,1,2,1,1,2,1,2,2,2,1,2,2,1,2,1,1,2,1,2,2,2,1,2,2,2,2,1,2,1,2,1,2,3,0,2,1,2,2,1,1,0,0,2,2,2,3,2,1,1,1,1,1,2,2,2,2,1,2,1,2,1,1,2,2,1,1,0,2,2,2,0,2,1,2,2,1,2,2,1,0,0,1,0,0,1,2,1,2,1,1,1,0,2,1,2,4,2,2,0,2,2,1,1,2],\"rators\":[\"tAF9Gf6PiGogbZuWs\",\"NDe6Ke5432YcqeP5y\",\"2fxapKr8XGdNeaKi2\",\"ZNnsMeNkdDhHjSrZb\",\"HF28xZKSLM9wEuqNg\",\"8JyqsSbN2FJXPr3cw\",\"jNvegJWCk5HCtEMbK\",\"gJYuGdkXEWWmGRLzu\",\"gb9rvGus2Jv7bjZSs\",\"2QGRoQn2dRq3scu7k\",\"Cc2Cgj4MWXZxsTooC\",\"3Zceb8GudqAG3onG3\",\"aEm3Wvj2rFYRL8Lrb\",\"9Ly8afdtofp8DXzrt\",\"TGWFzPMjW9KYd4QDC\",\"N7P4AnS8nzK4oupHv\",\"AasGs8AeX9Lcb9xJn\",\"dHZqT6h4JMwk5fPC8\",\"CQbhCrpZZaDJyAKtg\",\"HYaQrddWKBpaqSetL\",\"WKsvry6M74GDrtqHQ\",\"sz8ufn9i8zeiGWpAy\",\"9f9LG2exEqL5gNrA7\",\"vLrq4dEDMM2wd68Dc\",\"4eNkGG3T9iBqeC7Qs\",\"dLmepN3JWxhXMtyNK\",\"T2QhZRhybEKeJTb44\",\"8PwfYqoDQFThzNtvf\",\"uQPEy85JZBEqBuwm8\",\"KRSKj7ikX2ytWFmod\",\"s5M5RvgqR9BhB9JoC\",\"ywk3XGvcmpTgRxwZa\",\"c8yiWYqspRWJoJBNm\",\"aRqQ42J5zqCmBNd8w\",\"Qq2AEGMAtYKJeRRHm\",\"9uZpgAtSuPZ7W7DL6\",\"tSFYadMLQgCqx3mnM\",\"mybpojPXaZigaqsAD\",\"aqeBS9rDJssBp5WyE\",\"uiEuENARwFpnNMfFs\",\"hnyhBFWwNCz9mDfSi\",\"veAhgEKubmGCuoCyh\",\"e8ZeTpEfLfSKaTTdp\",\"A5g5PhdQpmF7ohwsC\",\"Fk9kLwoG4Brf4KsKf\",\"2iFe3EHEH2YdhSKrs\",\"sJCXvCjNwKe7fvrzv\",\"mfsaETo7uA4x5vqLD\",\"e3maaLxLqw9hgyeF2\",\"KRmxvA4mWgfKvHmYN\",\"upDqk9KWvaZW4yozC\",\"Yp7uvStL97cC9fKkY\",\"k5mp7Hkg8w5rwiXpe\",\"YRstQuthRkFeBiXug\",\"cR3ibTMxLyEdDFCHY\",\"ThE5rgwTFDDkXGRbX\",\"yZvzB3qFb8pkHy4dg\",\"iCDqhZGvszrXpDRuW\",\"LjoNTyGEMfBpMHHus\",\"3PoPSgExQ7hrpLvkm\",\"5kEyLPjTLrt7z2YJZ\",\"7m8s7cADBu3XwGpxw\",\"WtFQigNmNZ5EREPzo\",\"6RjvoM4ZdPyYQWaRX\",\"geZ3oLjhh9KAw7yHs\",\"jgimicGErFe9RZtAf\",\"hHixYDgo9R46JYoTx\",\"kYWb8BwpKwunQkxeX\",\"DEDniTrstQYGounXT\",\"ebPYSECG97bnpAp7s\",\"ekQh3jzgGLsEMbKo3\",\"6ZapS9L6t66jQCqxA\",\"fKNBLGL4kPqaEAY72\",\"M8dQuMrEpP8Hc3tHN\",\"KpHrC7WPEojnzgEtz\",\"nzKTXzTqPT4RDTHvb\",\"aFNK5j4AQkjtbBsQH\",\"8LfTheFzvicameoz9\",\"iHMehMwgYQGhGAF72\",\"9pzFiFK3ANLjQfnr2\",\"5dHucvf2qBYyKim7X\",\"KdNDysEsy2TW5QRJ2\",\"khFpmvAEFhfea4zdG\",\"LktHwe4bCcBpN9633\",\"ShidTSJi6X9xdPFu9\",\"xXxcBvT3poSuSCgBN\",\"B7s63hpQoBswMYPBs\",\"mtRvHDpeLoSGBf8zC\",\"jNE5AHcJQWXz7efuP\",\"dCsoqAmAXnhNBDrbv\",\"ZzYjack6nKZZoq3W3\",\"BQgoFPHLu2GhosNGt\",\"77aKj5YC9AqDMTneZ\",\"vQizduvjSgzEkCTxZ\",\"5cmvoGYHLNmT8n6jP\",\"GM2X83qnuLXTHe5zA\",\"87tZKY67vd6wEdkJs\",\"LDtBRPtAiDgrhjxR5\",\"yv7c4H2jimSKHEjtG\",\"SfcSTwCgY59gjSF2o\",\"jufL2dZQH8tBJajpr\",\"MkErvo2t8LvQBPNrt\",\"YFuN2JFXepWaW5RwW\",\"KWpKvLn6XJWcBF4jt\",\"WHR8EHPPEpghNnpXt\",\"DHBGz3r4dCryvEDAp\",\"69hNsiJ43SLHyTdse\",\"FEYpu9RWysAgW3XnP\",\"66a9xX73nmTEuKs9k\",\"3qYxBYzigw9hXBwB5\",\"MKT7khMBGXzA22ykf\",\"nfXGHENb5md7m355s\",\"MKJhn7goNzuGtB5y9\",\"YK2mckdiPDYofop9H\",\"3Y69wSDy33D6Tp4EC\",\"C9LKGu2g5hSijvDzA\",\"Z9fLenj2Yt9K5iosz\",\"DxxNN37iEz7b8t2nf\",\"wYBLRB4YuWXE3HRp9\",\"EBcDZTAZN4KnQqrck\",\"Cp4WteiP4i2eoKhvB\",\"awSCTGAhBh6k5hNE4\",\"ahk2qiXKJA753wAJk\",\"mDWNyaaQ9hvPCRzSd\",\"gPvrBxxySDP2vpux3\",\"er84cvDB52u3ebqzr\",\"FoHSdyTohzJrCGGTs\",\"ZqjP4M6dzu32To33K\",\"JS3hNM3XXkxPdg3yk\",\"yr822PZmmiDDenxpB\",\"u5hr8LwHsJTDxoDsk\",\"2NGSwAJk9NHt3toCo\",\"XrqNzJ2FRG8HnGiR6\",\"atWzkW6mFPc7Gw97m\",\"tcHkH2kMdGmgKRuSg\",\"bCDTKAoS4biDmQ64Y\",\"yHbTMNQXXdLzDkvhE\",\"cAxuDJJYkCnmSrF7K\",\"EjbDDFRECrzQDkzrX\",\"R4SjTgDnpigJYDLyL\",\"Ce4w2LAgzceMpLynJ\",\"dKtYzJHAswturm7Fe\",\"MxMseFiMQ2giHRyWx\",\"JH67DEcDqiy5WZGo6\",\"a777e8chPvJkY3tKa\",\"qtHJeznDHqQ2G86sv\",\"nFhYP8GPCW4qYLHTa\",\"DjQY8557nAWS36t2c\",\"2ptN2mhjFwFcHyPZd\",\"8ypYnCjboRkHCmWEd\",\"Wv2vJnEj8ywNmARoF\",\"oSHy72cPANqpbBF8X\",\"ZrKCkX7xxGGZzauFW\",\"qe7BqJfZgw3mD6XJf\",\"vngXnmGisja9QttNr\",\"eMuCpJ2spXWkJjWNz\",\"JQ5uoxA4WZgN6HyJk\",\"J5T8gZqiZXFuFDTQ7\",\"DpqiRAm2yo3W2x4HX\",\"yoLy2DcMG3nZXNwv2\",\"H4abACFDH5t8CnnyH\",\"3cF6NXq3ZEwdkgSjb\",\"yro9W5sMuBASbki8p\",\"kRAYfZ4CtCh5E8ugt\",\"JZbBYihgT6m7bKvgc\",\"sfoAF6eygyfp6MWx3\",\"n2BRY9X8899dcG8Bw\",\"ZgmNZTKEEBSyKujwG\",\"8TAYWzqJAkXq2MAba\",\"PQ2u53dewdokYyn4i\",\"NG8PWBSjsM8mMhQEq\",\"syRNbbPdLCGXbH2Gy\",\"YLtspA8ec6ntcoMMf\",\"3hSzE837A9SKsi5X4\",\"q4vhNKvdnjB6XTmxE\",\"MK8HigdFigfJzHhyo\",\"iojEnnY9FsMfYzp6f\",\"pPtmnJ7q9QchoG2Jq\",\"fQjYXfm4Y8Kfkc8fx\",\"cykCKNJcqFBxz4T8s\",\"CwXsu25ygLEwQbmQC\",\"2innwjWqxJHo4eRGh\",\"Pe8vWpDHRuH9nSGKW\",\"Ecg4m7srYGgZsb4Ck\",\"NNE5HNRXAkmhrWgyQ\",\"s6qiPXptvyxxEy3vm\",\"yjtdwc2AC4jA2RWtn\",\"dzS6WBTMHyFEag6Fp\",\"JmkgMJyvrvqTMfdqF\",\"p5EN3tadeCfPkW3CB\",\"nys6kJatAFrKL59Pf\",\"mzhB3LXoJ2EGyqr3n\",\"9PoKio8SZZtinmTCf\",\"ZJQW3bL2KzxJcdEoc\",\"HqmxnQJM66Y57twhn\",\"ta5CrWnBCRusD2WMo\",\"CTKmXtrqDYqJBnuy8\",\"cYoWJ8sQE3mdBhJ9D\",\"oBcs8GLX2ZFLXQy8y\",\"WGKpjDMbEhmGdkorb\",\"q6QsMYNMpPNtmyTeW\",\"8zQnyekbSwzhoJymu\",\"WQubx7DAkG6WZE8FA\",\"nWbwmuxSsM4WdHLHx\",\"b3BWzq6Yu8nswak5u\",\"P7NmFbCJ5offXMRvB\",\"Q9afpRu3u8zuWuzLQ\",\"mzsaCBQP3e6YourDN\",\"Nuv3PScqFHXG4X7H3\",\"p8qqFdJ3FSk5x9z3G\",\"YA7SDhpgEtsqynvNL\",\"BrTDhPJcACL2bsrpJ\",\"oNBNrPGYAhQiwbeDv\",\"Nua6T3dBurBy3Qfg9\",\"TDSER34FwZ2dx4sfK\",\"XkJ9G89xpZiTj58Eq\",\"sCChapdzgzdhcvonx\",\"BKWXu4GF8hN9EbP4w\",\"4GsS5AEjv8DDPbquh\",\"Kz7ee56Ht4Ns8JjBj\",\"kLEWiYM2ji6Baxg6X\",\"hJSNTxZsEQjMBms82\",\"6iPpewKivZK7YLCds\",\"ZMzy8vgb2fcu9JxWh\",\"7Saf8KQsxuKm8rtSx\",\"7K2GEb5TZRtSpyyGS\",\"8sNv5PTHa7XQ8bNqR\",\"Ey9pB2PRqejNubQmf\",\"yJKsrbZs7koZHuJm4\",\"mxX4rH5ELYkdZ2Mbw\",\"HNZrZuGbDnLjhCs4F\",\"YKEcP2XNb6zNNkRjt\",\"k2Eo3wyfZZ6KxvKhN\",\"5rEiiwNW8YGxvWuH5\",\"F2MRnAX2wwKW9aYXy\",\"cfjnqyiLFDmytnE6N\",\"hkiz2Nv927cYGrA86\",\"DYDJTyGgKFnBRLm2r\",\"tpxMgkGSHwBjS95Ta\",\"Nb6LYPoQP6KJZt8mz\",\"mG8HqKiAQFTdRZthG\",\"HMG4ZWX4C7G7HsvYz\",\"3jr2dyncMZqhkMHTP\",\"KLmLKaJPfsYxp42p2\",\"RehJGBFS6CYiWdjZx\",\"5Z4o2pWDzmbpw4JHJ\",\"hw5macuthRQmKoXkN\",\"ddkYFQoG2m8NhX8xZ\",\"WSLnCZNtpiCrdaXnd\",\"gXTAie79kiw28tx5u\",\"dMeHQT6ApoC9PdfZL\",\"NuqGt5u3s7vJ7HBGR\",\"WzxYNYGEiP97ZeNBo\",\"gpYxT9JQ2ypE8E8iq\",\"rfyEkETeoS96QNH4e\",\"HjZQR6wRLcxN5hKaf\",\"QRv96jmNaYsWkxQEG\",\"9CoqdidjM9KbeKnHY\",\"hKqn2TRhqwwyLcE66\",\"zd9FLSzsGz3evKafy\",\"vSvippNru5pBnJQJn\",\"QCvvnevRLhBY8XBJk\",\"5JGnoBpw84hhmmuhf\",\"N6pmP89gXiKzYB5eg\",\"DPi9QGLctq2y76KuE\",\"q6peoEWzrwZzogT5w\",\"Kh3Pc2ZRusurLaMyP\",\"j49s8dHmmiyPxZmWj\",\"4BYchrBaTydEgQqwt\",\"G67jbNojRvhpZ9jKs\",\"CB48GHbw7xtwmiuPn\",\"gg4hgFGgmvK9ZxENE\",\"8k77uo7LCCvWuJ9GQ\",\"oT2kASFDvA5v2sv7n\",\"pdum9ZEFzqdXqtjyQ\",\"dYPkStFnLvAMsHSzZ\",\"KJCDwGkoXh8qtbbKr\",\"nc7bRhkxgKyqusYe3\",\"8jrdhixaCaxqgcWue\",\"cAP3n5NY64uoMwzRR\",\"BajWtLookqBgcwmyv\",\"5S9nX4rKsnCcnv4Cz\",\"d4LbBmuuRabBsZrWx\",\"DqLLJmvonxtaq5nbv\",\"AYZrBpxmaHxq9th3T\",\"qAby4AWXmTNeusvg3\",\"6dkzRMf67DCWqRzj2\",\"dj5AyG5fWP8FdsSmZ\",\"5XiuAqicKD4hBdu63\",\"8N99kojRhfZXWNAk6\",\"qjYKJu7TDdYZ8gYRF\",\"sw5JkMKHfBgLbGekd\",\"ANbSYXiYsp4addoDq\",\"5HCu9Ydd86QgHDRNP\",\"RGMbFMZXJr7DhcAJy\",\"d8qtzoLB264iP8tdY\",\"6dZFWNGPH8GKYA8sN\",\"4fjSgcqhQQZM2ZFRP\",\"dBzwBtRjZqB98DJeB\",\"QTZTmQEmkPv5sxQL4\",\"SYoBM3m2TMLYkvqZ8\",\"5kazQPq8ZdDsx6kjf\",\"CEd9tLdXeDeNHSzys\",\"5hQnRWiKkhgKJXNMP\",\"kNrnnMxhFZztMTBAX\",\"RyWd7ieDg3PAWLpBa\",\"DpnYcMphntjsQ96qg\",\"oyKcm3zqdy8Ko5P5d\",\"FSe2mfd98g84k5DW6\",\"wRttWTM59y8m5mx7x\",\"NPHbTDFiEfTMjEXh4\",\"srC8SN3W4FT2Z26zp\",\"vCxuabDxEv9YC3Szb\",\"axdSNLZpiCDF8RS6n\",\"9MER8SZ9Xo6xNYMj8\",\"eg5iwxQWCEYnktrcm\",\"TuZ7Lnyk7dq3tJNmt\",\"qvFdHwMHEAsdjXFEG\",\"HuNF3xTBzmatyGSTm\",\"PTdhjojHbByKRv2Sc\",\"TEWdTsJKsK8tREtTo\",\"r9seLLH2zLkN8msP8\",\"csFCABy3kwwpoQXNy\",\"e2vWoEQh5g3c7NS5o\",\"eFh8z7sMmxkrFWZv9\",\"C2AfMipCicfD58WJ9\",\"2PzbYjPdSB6kobzKo\",\"DfMSPCEkwGoiqfTem\",\"6JMWyFfGM8R4kG8sw\",\"FeoRbSr6CGJRqshTS\",\"rTTGmFu4mPMymDQqY\",\"LW8PqW4HFXWfoJGo6\",\"5N699mc5WNjWowwoK\",\"XvKtJgQ8YgJyrbySX\",\"KiwLP5g2Pe3WZCiSm\",\"Jqk2uJZZxEv5wZFze\",\"eybCguAWtbpvr544M\",\"Lg4t6SEWgtYz4u7Cj\",\"iF4tdvn5sA9CM4T6T\",\"fJuAZYWy9FuibjAiy\",\"qLysFYFYKWrjuCKrK\",\"8cKm6EDAjrNbL5pWF\",\"zaNb37qavQQm6LFqe\",\"JkcimYHcPxFggWXNE\",\"7shPNLiokLBJ4DYcY\",\"r23nqpnuxRqQrRksA\",\"MM3v77RDEPmCDBvE9\",\"XoTzZDR6qDYd8PAZB\",\"jopWJWdRStNBMGNXs\",\"jCwJtCqg5kcDg7CRK\",\"9i2XnAtnTMpLkGyvv\",\"jiT28cugqR6sLujEp\",\"rSCfdarBPboC3amHu\",\"geJHa8mvy64irqsgF\",\"S3iFQ3yPcvH9wEzvF\",\"htCCT2CY3eSikknSF\",\"skbp3mauBhvs2Pjee\",\"sHjfbGQGLHE6JR6qu\",\"zm9yBz3sRm9jdbyhK\",\"faSkthCez3xqBCi35\",\"LaYYSfLtno6a9qc4Q\",\"xpGSi4pXEaJnL6KMR\",\"5prBnBm3YszWAYPTp\",\"iKCnQydNKZp3KoCoP\",\"rx88g3SpXfGecJigj\",\"gkDbzkWcaiKHC3LDY\",\"rELhs3CWfh5u9a4ws\",\"YRAzEBJoLvSaiPtYx\",\"eqa6cvt5yha7z7dPt\",\"6BTXDH2xdbYLsvjsz\",\"PWgzeK859suojbrRx\",\"sftR9DgM4jpwtxfAM\",\"oN7LLGSx4FcGmPDmL\",\"rp78xovPotpBHRXxR\",\"nsRGGqHifx7kNamZD\",\"nFbmNzMQ38TncmfQX\",\"GGdmhAvxXhqhhibJN\",\"isBqgde2r6fi5bC8P\",\"mh4FSvMYi6zprdMmz\",\"nA9McBHL8W92CnapW\",\"hsrNYf3WbexXJKhCq\",\"mJpS4nisA4cdBapyJ\",\"utTuvGdmu2sBHWBhQ\",\"LQxof8pGabGuWP7Gn\",\"MXGuntvz3byrP6WJc\",\"7fizDi6FhnoQoueBk\",\"G5KunELyMQFcC2dJj\",\"yod5YhKtPqw2GfG9B\",\"Ds7L5bksw2QRHjrKL\",\"eYfPWvZwnJQkHbSTK\",\"hwa6rDC4yJfWFEiTt\",\"T67MM3mJshjJHDPdr\",\"KBxTPknCRmB2b5y3i\",\"wqdX4wXbZGgJ9Fyb7\",\"srJ34BaybkQh3qRkM\",\"4v8pnvxe8XSWMawR6\",\"kQH5b8MXJunh84Czq\",\"52LKhrt3s9TMq83ug\",\"hRAd998MG8Jzdpxj6\",\"dWBRanpHNRpD4cKtQ\",\"YcCLwitFMAEJSnxAW\",\"jNkvmaoEXcQjsgS3j\",\"jrNbixvhCmTY6DtbL\",\"sxLYMqmEqpgTiEBbk\",\"zfGYZ7gpR8fxJpagh\",\"n5KcKE4z6iSgrwzNQ\",\"ijNKM8DuspXuAnC4y\",\"BG9GLy7SLRexTz6rx\",\"2EbDCCJJvCfKkbYia\",\"dYgxQgSzJNMnWzhhE\",\"c7uBxu2rgY77H5d79\",\"WsCqifua4yHhKp6N9\",\"NrRa4TS6uZR9xuXRt\",\"pfmr6YpnE5E7guZ6d\",\"Fb2wehA7QgTFWry2x\",\"yN7aCFGmmQMAWhGMb\",\"DWGaguhAXcTJb7Nq2\",\"BdnE4RS5puoxo92mA\",\"bvmTE46bfcM4ogj34\",\"44zR2oW5x8XNG9GZJ\",\"KACjjdKDL97rBTyEK\",\"jqGoxvGL6yn5gwiwc\",\"Wpn95NqWxncQrwNgz\",\"9Gf6g4fuKc3uou9w2\",\"ghMkPtdFCpM6w8nax\",\"ey3CASd6Je5LEJzfB\",\"zNhgWKdWpp5SoTZmp\",\"N2wnZXkhDH86mgjQ8\",\"PC3pLs36zNzpRDSuE\",\"8BFSTCnoe2QggN64c\",\"83aQ4psrBs8tBhzik\",\"BCPNmfdwmRDs6FqcN\",\"NzbRqGWspQnWMoDrF\",\"4yMggPMnAMqJN6TeR\",\"59sZD3xDtGETmzpad\",\"AFfw7cGg83uYk2Miy\",\"oGo2hn7KPdSRXw5bQ\",\"JoaGvH6yFnBmNE2p2\",\"quwbxHTdqWtt3N2FT\",\"dhokkFcukKdYsYA6s\",\"zBk2cwJ9SLAhFuM3K\",\"6daecm7mtqzp7mKso\",\"mvJBakQ35CWAnbbEZ\",\"PTDFuxAzou7W6asWt\",\"XHShZ3WMPgGEA2vkR\",\"N43d68KgA2qv7Jm2Y\",\"5f6oSeq4r5WTXLdCQ\",\"snnZHAz9fZpDjimi5\",\"X4rzfxGgxx6CS7Bpz\",\"inusT2S2NksQ9DJ5Q\",\"sbJcFfQjQ59Wfg4Cd\",\"AQSqD9oNv2uPfxZCR\",\"Dhgtg2qYqkiB2Xnk8\",\"EPLdgQ3qhYTZcKvd3\",\"aoeKFDdQRpHDqM4KW\",\"no7LkP8rjPNY6EEsu\",\"gP7JZkBrB4afxsb54\",\"c2q7mY39z5JPEMCaM\",\"RqmYMRb6DoTcqkKQ5\",\"R6YxHWAiLgKwy5YvC\",\"rrSC943cCKNG48sH4\",\"YLxEfyRr2cdhDAuez\",\"Afnps7TJQuS9sipMb\",\"2PufnQcsHsfymufX3\",\"ErXNo3Tx2k35RPzZM\",\"Kv92AoBe3KjTCfiBD\",\"RoGGD5cpHb4ftdLDv\",\"etoxSpG4fGKThLozM\",\"eHcgvkTGsH7ZziqBo\",\"LNCb5rksJLJ43L4Nw\",\"jjSCix68zyZNpdada\",\"fbyQH246PaDcXumC4\",\"m2paqnzFk4aXcwXk7\",\"XD5nmvKQchKezPXhy\",\"chRdXAA6chuTg7K6C\",\"fvm9XpxEnB6kWqoPd\",\"i5Nn7L8wRjX4fAZNN\",\"2MjzJ7yxh3eT3xbng\",\"yd5sXGT45KRARFqTv\",\"uBXzq8ZaZMYkn4wW5\",\"hR7GMiqGap4CzEWSy\",\"jEAnBsQdgchcEK8M8\",\"2FCRyJqwqzFTKSTgJ\",\"pduNK68oazqQTtbLp\",\"i7xLW59xDKexqnTuK\",\"4Lwjr34ypKNQNQCar\",\"reSPwrcdzBAnDWs2E\",\"uK58g2EXxqxTaB2iA\",\"4TmgHkn5vqyHK3sYC\",\"JKb5rhL6DKcCAypF9\",\"At3WqvzZshXkCBAAP\",\"T6Rm8mREPMZSftzrC\",\"LeC6LLPde9Wy5TtuS\",\"epGYERo34aRuyapM7\",\"Q5pHsbzhPTz5PigdC\",\"858b7KAn3NyWjGR84\",\"d9LBRxvADNBB5QJMB\",\"YwDRTGmvg76zY7hSe\",\"u5u2YpHXiNgzDNJdX\",\"acFDzp9EJzHg8c2rD\",\"yAouD3PxzED8a4gap\",\"ZxbSzGdytCwes9Ew8\",\"wjc4iejpErBhxWwHo\",\"wsi3xpmE8Wesk3sxB\",\"CtKfCpjYB56uGxFo3\",\"B4y8aoyXJtskYPFEL\",\"HKqhMHf2SLBfG37C8\",\"qB6KSTYC6H2TQEQY6\",\"rojiqmjXtv8c2M9CH\",\"Pe8HNJB4K2xKu2qxC\",\"2qtde7moqrzm7B4Ht\",\"H469XosMjfNu8Fop7\",\"gEFvQ24fFq5SYj6Lw\",\"3CRf8CYo6fHSbqKQj\",\"Qyfyyw6oC4EHAndzo\",\"sW78rbapvsS3AnuJe\",\"rQA9SE8nuwFueaHsR\",\"nmTcsZXZFr4fTSzvD\",\"wrL4iX2CCSqDCCty3\",\"5QN8R22z43SrwoHDz\",\"Wi4H6ayKsNDWWQCG5\",\"zujHd7RwJWPrkMjNW\",\"uGuS9YRXW2nj4p6zf\",\"jcXtL2Zf4eiWTP4jf\",\"GJmKcqu7xppQyBaTt\",\"rCrbqMiaGPgHYTNxu\",\"f7X4ymW7D3Gfy8Top\",\"ruzwBPphPDRgLXdnP\",\"DhfJpC3Y72teNfiKE\",\"naZ3i6sSDPwsieDH7\",\"vAbK8sCfKyFC78HYg\",\"aGBPrcEMPtJTG7Sri\",\"8uiLiJcmWxWe6qw65\"],\"total\":586,\"quality\":[5,5,5,5,3,5,5,4,4,1,5,5,5,5,5,4,5,5,5,3,5,4,4,4,5,5,5,5,5,5,5,5,4,5,4,5,5,5,5,5,3,5,5,4,5,5,3,4,5,5,5,4,5,5,5,5,5,4,5,3,5,5,5,5,3,5,4,5,1,5,3,5,5,5,5,5,5,5,5,4,5,5,5,5,5,5,5,4,5,5,5,5,5,5,4,4,3,4,4,5,5,5,5,5,5,5]},\"flags\":0},\"summary\":\"Create a Person class which will have three properties:\\nName\\nList of foods they like\\nList of foods they hate\\n\\nIn this class, create the method taste():\\nIt will take in a food name as a string.\\nReturn {personname} eats the {foodname}.\\nIf the food is in the person's like list, add 'and loves it!' to the end.\\nIf it is in the person's hate list, add 'and hates it!\",\"tags\":[\"classes\",\"objects\"],\"timestamp\":{\"$date\":1585824451269},\"title\":\"Food for Everyone!\",\"quality\":4.59433962264151,\"family\":[{\"_id\":\"iRvRtg2xxL9BnSEvf\",\"language\":\"python3\"}]}}"]