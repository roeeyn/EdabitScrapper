a["{\"msg\":\"result\",\"id\":\"2411\",\"result\":{\"_id\":\"Mkt3yqQMsw9e3Jmjq\",\"author\":\"Jollywatt\",\"authorId\":\"dirYdBPx55gG3iCfc\",\"code\":\"def disjoint_cycle_form(perm):\\n\\t\",\"difficulty\":4.125,\"editorId\":\"dirYdBPx55gG3iCfc\",\"familyId\":\"tC54Rn5TQ2JEEzbGb\",\"instructions\":\"Write a function which, given a permutation of `[0, 1, ..., n-1]` ( `n>0`) represented by a shuffled list, returns the permutation in _disjoint cycle form_ as a set of tuples.\\n\\nA **permutation** is a particular (re)ordering of a set of objects. For example, `[1,3,0,4]` is a permutation on the 4 objects `[0,1,2,3]`.\\nIn this problem, we represent permutations on `n` objects as lists containing the numbers in `list(range(n)) == [0, ..., n-1]`.\\n\\nA **cycle** or **cyclic permutation** is a particular kind of permutation whereby all elements are sent to one another in a cyclic fashion. In this problem, we represent cycles as tuples.\\n- For example, the permutation `[1,2,3,0]` is a cyclic permutation of `[0,1,2,3]` because it can be made from `[0,1,2,3]` by applying the mapping `{0:1, 1:2, 2:3, 3:0}`, which maps elements in the _cycle_ `0➞1➞2➞3➞0`. We represent this cycle by the tuple `(0,1,2,3)`, where each element gets sent to the one on the right, and the last is sent to the first.\\n- The cycles `(0,1,2,3)`, `(1,2,3,0)`, `(2,3,0,1)` and `(3,0,1,2)` all represent the same cycle; namely `0➞1➞2➞3➞0` . We always choose the cycle to have the lowest element first: `(0,1,2,3)`.\\n \\nFinally, any permutation can be written in **disjoint cycle form**, or as an unordered set of cyclic permutations. _Disjoint_ means none of the cycles have any elements in common. This form is unique up to the order of the cycles and up to the cycle representation.\\n- The cyclic permutation `[0,1,3,2,4,5]` can be written as `(2,3)`—since 2 an 3 are swapped—and so the disjoint cycle form is `{(2,3)}`.\\n- `[1,0,3,2]` is the mapping `{0:1, 1:0, 2:3, 3:2}` and has disjoint cycle form`{(0, 1), (2, 3)}` .\\n\\nYour function takes a list (the permutation) and returns a set of tuples (the set of cyclic permutations).\\n\\n### Examples\\n```\\ndisjoint_cycle_form([1, 0]) ➞ {(0, 1)}\\n# 0 and 1 are swapped, but lowest is listed first.\\n\\ndisjoint_cycle_form([0, 1, 2, 3]) ➞ set()\\n# Permutation is already in order.\\n\\ndisjoint_cycle_form([0, 1, 3, 2]) ➞ {(2, 3)}\\n\\ndisjoint_cycle_form([1, 0, 3, 2]) ➞ {(0, 1), (2, 3)}\\n# or {(2, 3), (0, 1)}; the cycle order in a set doesn't matter.\\n\\ndisjoint_cycle_form([1, 3, 0, 2]) ➞ {(0, 1, 3, 2)}\\n```\\n### Notes\\nLook up \\\"disjoint cycle notation\\\" or \\\"cycle decomposition\\\" for more information about permutations. This is the kind of thing you learn in a first course in Group Theory.\\nNote that the given permutations will always have at least one element (the only such permutation is `[0]`), and a permutation of length `n` will always contain the elements of `range(n)` (that is, `0` to `n-1` inclusive).\",\"lab\":\"def ______dcf(perm):\\n\\tordered = sorted(perm)\\n\\tpermmap = dict(zip(ordered, perm))\\n\\tcycles = set()\\n\\twhile ordered:\\n\\t\\ta = ordered.pop(0)\\n\\t\\tcycle = [a]\\n\\t\\twhile True:\\n\\t\\t\\tb = permmap[a]\\n\\t\\t\\tif b in cycle:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\telse:\\n\\t\\t\\t\\tcycle.append(b)\\n\\t\\t\\t\\tordered.remove(b)\\n\\t\\t\\t\\ta = b\\n\\t\\tif len(cycle) > 1:\\n\\t\\t\\tm = min(cycle)\\n\\t\\t\\twhile cycle[0] > m:\\n\\t\\t\\t\\tcycle = cycle[1:] + (cycle[0],)\\n\\t\\t\\tcycles.add(tuple(cycle))\\n\\treturn cycles\\n\\n\\n# Python\\nPERMS = [\\n\\t[0],\\n\\t[0,1],\\n\\t[1, 2, 0],\\n\\t[0, 1, 2],\\n\\t[1, 0, 2],\\n\\t[1, 2, 0, 3],\\n\\t[0, 1, 2, 3],\\n\\t[2, 1, 0, 3],\\n\\t[4, 1, 2, 3, 0],\\n\\t[3, 4, 1, 0, 2],\\n\\t[2, 1, 4, 3, 0],\\n\\t[2, 3, 5, 1, 0, 4],\\n\\t[3, 2, 0, 4, 5, 1],\\n\\t[3, 2, 0, 4, 5, 1],\\n\\t[6, 4, 3, 0, 5, 1, 2],\\n\\t[0, 6, 3, 4, 2, 1, 5],\\n\\t[1, 4, 6, 0, 5, 2, 3],\\n\\t[6, 0, 1, 4, 2, 3, 5, 7],\\n\\t[7, 4, 5, 2, 1, 0, 3, 6],\\n\\t[2, 1, 0, 6, 5, 7, 4, 3],\\n\\t[4, 3, 0, 1, 7, 2, 6, 8, 5],\\n\\t[2, 7, 1, 4, 3, 6, 8, 5, 0],\\n\\t[5, 1, 6, 0, 3, 7, 8, 4, 2],\\n\\t[1, 3, 2, 0, 4, 9, 8, 6, 7, 5],\\n\\t[8, 0, 7, 6, 5, 2, 9, 1, 3, 4],\\n\\t[6, 2, 1, 5, 9, 4, 8, 7, 3, 0],\\n\\t[1, 5, 8, 10, 0, 6, 4, 7, 9, 2, 3],\\n\\t[2, 8, 6, 9, 7, 10, 4, 1, 5, 3, 0],\\n\\t[5, 8, 10, 2, 4, 9, 7, 3, 1, 0, 6],\\n\\t[1, 8, 4, 0, 9, 3, 11, 7, 5, 10, 2, 6],\\n\\t[7, 10, 4, 8, 2, 9, 11, 3, 5, 6, 0, 1],\\n\\t[3, 8, 9, 4, 10, 5, 6, 0, 7, 2, 11, 1],\\n\\t[8, 9, 11, 3, 5, 0, 2, 12, 6, 1, 7, 10, 13, 4]\\n]\\nfor perm in PERMS:\\n\\tcorrect = ______dcf(perm)\\n\\tactual = disjoint_cycle_form(perm)\\n\\tTest.assert_equals(actual, correct,\\n\\t\\t\\\"For perm {}\\\".format(perm))\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,5,3,4,5,0,3,3,5,5,5,3],\"rators\":[\"dirYdBPx55gG3iCfc\",\"AYaEkTWLMmfzpwejr\",\"tAF9Gf6PiGogbZuWs\",\"jDgJ2fdFS76TSorNc\",\"FHSJnAYTbcsKFgeQa\",\"SGhPxX5bHGL8zZqtt\",\"aEm3Wvj2rFYRL8Lrb\",\"8PwfYqoDQFThzNtvf\",\"iS5BrkGLzJyPK7nKt\",\"mDWNyaaQ9hvPCRzSd\",\"yjtdwc2AC4jA2RWtn\"],\"total\":14,\"quality\":[]},\"flags\":0},\"subscribers\":[\"dirYdBPx55gG3iCfc\"],\"summary\":\"Write a function which, given a permutation of [0, 1, ..., n-1] ( n>0) represented by a shuffled list, returns the permutation in disjoint cycle form as a set of tuples.\\n\\nA permutation is a particular (re)ordering of a set of objects. For example, [1,3,0,4] is a permutation on the 4 objects [0,1,2,3].\\nIn this problem, we represent permutations on n objects as\",\"tags\":[\"math\",\"algorithms\",\"loops\",\"data_structures\"],\"timestamp\":{\"$date\":1567037399487},\"title\":\"Permutation as Disjoint Cycle Form\",\"isHidden\":false,\"quality\":0,\"family\":[{\"_id\":\"Mkt3yqQMsw9e3Jmjq\",\"language\":\"python3\"}]}}"]