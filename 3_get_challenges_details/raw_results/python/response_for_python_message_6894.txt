a["{\"msg\":\"result\",\"id\":\"2156\",\"result\":{\"_id\":\"n2y4i74e9mFdwHNCi\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"def get_items_at(arr, par):\\n\\t\",\"difficulty\":3.317073170731707,\"familyId\":\"3GcZ4gL2XnqmtkxN6\",\"instructions\":\"Write a **recursive** function that filters the items in a list (given as parameter `arr`) by **positional parity** (odd or even), given as parameter `par`, starting from the **opposite end**. Return a list of items on **odd positions** (... 5, 3, 1) or on **even positions** (... 6, 4, 2) and counting from the **last item** in the list.\\n\\n### Examples\\n```\\nget_items_at([2, 4, 6, 8, 10], \\\"odd\\\") ➞ [2, 6, 10]\\n// 2, 6 & 10 occupy the 5th, 3rd and 1st positions from right.\\n// Odd positions, hence the parity, and from the opposite.\\n\\nget_items_at([\\\"E\\\", \\\"D\\\", \\\"A\\\", \\\"B\\\", \\\"I\\\", \\\"T\\\"], \\\"even\\\") ➞ [\\\"E\\\", \\\"A\\\", \\\"I\\\"]\\n// E, A and I occupy the 6th, 4th and 2nd positions from right.\\n// Even positions, hence the parity, and from the opposite.\\n\\nget_items_at([\\\")\\\", \\\"(\\\", \\\"*\\\", \\\"&\\\", \\\"^\\\", \\\"%\\\", \\\"$\\\", \\\"#\\\", \\\"@\\\", \\\"!\\\"], \\\"even\\\") ➞ [\\\")\\\", \\\"*\\\", ^\\\", \\\"$\\\", \\\"@\\\"]\\n\\nget_items_at([\\\"A\\\", \\\"R\\\", \\\"B\\\", \\\"I\\\", \\\"T\\\", \\\"R\\\", \\\"A\\\", \\\"R\\\", \\\"I\\\", \\\"L\\\", \\\"Y\\\"], \\\"even\\\") ➞ [\\\"R\\\", \\\"I\\\", \\\"R\\\", \\\"R\\\", \\\"L\\\"]\\n```\\n\\n### Notes\\n- **IMPORTANT**: You are advised to solve this challenge via a **recursive approach**, hence, the very purpose of this challenge. You can check the **Resources** tab about a few topics on recursion.\\n- Lists are zero-indexed, so, index+1 = position or position-1 = index.\\n- Items in the list may contain duplicates. See example #4.\\n- The last item in the list is always the first item to start a positional count.\\n- The sequence of the items in the resulting list should be retained (i.e. example #1 - `6` should come after `2` and before `10`, example #2 - `\\\"A\\\"` should come after `\\\"E\\\"` and before `\\\"I\\\"`).\\n- An **iterative** version of this challenge can be found via this [link](https://edabit.com/challenge/72KukSssxk2eHrWqx).\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"from inspect import getsource\\nfrom re import findall, MULTILINE\\n\\ndef is_recursive(fn):\\n  try:\\n    src, n = getsource(fn), fn.__name__\\n    if n == '<lambda>': n = src.split('=')[0].strip()\\n    return len(findall(n, src, flags=MULTILINE)) > 1\\n  except OSError: return True\\n\\nTest.assert_not_equals(is_recursive(get_items_at), False, 'Recursion is required!')\\n\\nexp_vector, act_vector, anx_vector = [\\n  [\\n    [\\\"E\\\", \\\"A\\\", \\\"I\\\"],\\n    [\\\"D\\\", \\\"B\\\", \\\"T\\\"],\\n    [\\\"Q\\\", \\\"E\\\", \\\"T\\\", \\\"U\\\", \\\"O\\\"],\\n    [\\\"O\\\", \\\"U\\\", \\\"T\\\", \\\"E\\\", \\\"Q\\\"],\\n    [\\\"S\\\", \\\"F\\\", \\\"H\\\", \\\"K\\\", \\\"Z\\\"],\\n    [\\\"A\\\", \\\"D\\\", \\\"G\\\", \\\"J\\\", \\\"L\\\"],\\n    [4, 8],\\n    [2, 4, 6, 8, 10],\\n    [\\\"@\\\", \\\"$\\\", \\\"^\\\", \\\"*\\\", \\\")\\\", \\\"]\\\"],\\n    [\\\"[\\\", \\\"(\\\", \\\"&\\\", \\\"%\\\", \\\"#\\\", \\\"!\\\"],\\n    [\\\"O\\\", \\\"B\\\", \\\"T\\\", \\\"Y\\\"],\\n    [\\\"R\\\", \\\"I\\\", \\\"R\\\", \\\"R\\\", \\\"L\\\"]\\n  ],[\\n    [\\\"E\\\", \\\"D\\\", \\\"A\\\", \\\"B\\\", \\\"I\\\", \\\"T\\\"],\\n    [\\\"E\\\", \\\"D\\\", \\\"A\\\", \\\"B\\\", \\\"I\\\", \\\"T\\\"],\\n    [\\\"Q\\\", \\\"W\\\", \\\"E\\\", \\\"R\\\", \\\"T\\\", \\\"Y\\\", \\\"U\\\", \\\"I\\\", \\\"O\\\", \\\"P\\\"],\\n    [\\\"P\\\", \\\"O\\\", \\\"I\\\", \\\"U\\\", \\\"Y\\\", \\\"T\\\", \\\"R\\\", \\\"E\\\", \\\"W\\\", \\\"Q\\\"],\\n    [\\\"A\\\", \\\"S\\\", \\\"D\\\", \\\"F\\\", \\\"G\\\", \\\"H\\\", \\\"J\\\", \\\"K\\\", \\\"L\\\", \\\"Z\\\"],\\n    [\\\"A\\\", \\\"S\\\", \\\"D\\\", \\\"F\\\", \\\"G\\\", \\\"H\\\", \\\"J\\\", \\\"K\\\", \\\"L\\\", \\\"Z\\\"],\\n    [2, 4, 6, 8, 10],\\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\\n    [\\\"!\\\", \\\"@\\\", \\\"#\\\", \\\"$\\\", \\\"%\\\", \\\"^\\\", \\\"&\\\", \\\"*\\\", \\\"(\\\", \\\")\\\", \\\"[\\\", \\\"]\\\"],\\n    [\\\"]\\\", \\\"[\\\", \\\")\\\", \\\"(\\\", \\\"*\\\", \\\"&\\\", \\\"^\\\", \\\"%\\\", \\\"$\\\", \\\"#\\\", \\\"@\\\", \\\"!\\\"],\\n    [\\\"O\\\", \\\"R\\\", \\\"B\\\", \\\"I\\\", \\\"T\\\", \\\"L\\\", \\\"Y\\\"],\\n    [\\\"A\\\",\\\"R\\\",\\\"B\\\",\\\"I\\\",\\\"T\\\",\\\"R\\\",\\\"A\\\",\\\"R\\\",\\\"I\\\",\\\"L\\\",\\\"Y\\\"]\\n  ],\\n  [\\\"even\\\", \\\"odd\\\", \\\"even\\\", \\\"odd\\\", \\\"odd\\\", \\\"even\\\", \\\"even\\\", \\\"odd\\\", \\\"odd\\\", \\\"odd\\\", \\\"odd\\\", \\\"even\\\"]\\n]\\nfor i, x in enumerate(exp_vector): Test.assert_equals(get_items_at(act_vector[i], anx_vector[i]), x)\",\"language\":\"python3\",\"quality\":5,\"summary\":\"Write a recursive function that filters the items in a list (given as parameter arr) by positional parity (odd or even), given as parameter par, starting from the opposite end. Return a list of items on odd positions (... 5, 3, 1) or on even positions (... 6, 4, 2) and counting from the last item in the list.\\n\\nExamples\\ngetitemsat([2, 4, 6, 8, 10], \\\"odd\\\") ➞ [2,\",\"tags\":[\"recursion\",\"strings\",\"arrays\"],\"timestamp\":{\"$date\":1603893046511},\"title\":\"Recursion: Reversed List Index\",\"stats\":{\"completed\":{\"total\":40,\"ratings\":[4,4,4,4,4,3,5,0,5,2,5,2,4,2,3,5,1,3,3,5,4,3,5,3,1,5,3,1,4,5,5,2,4,0,0,5,5,0,4,4,5],\"quality\":[5],\"rators\":[\"a777e8chPvJkY3tKa\",\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\",\"5dHucvf2qBYyKim7X\",\"s5M5RvgqR9BhB9JoC\",\"fSQSHjW3e72MrWxbD\",\"h4x2jaMdj5aQZbW5g\",\"tkdRHAExhDq8ryDJT\",\"d8qtzoLB264iP8tdY\",\"8JyqsSbN2FJXPr3cw\",\"buX4mCQhtXCfBjeno\",\"mDWNyaaQ9hvPCRzSd\",\"Cia25zjeX3RkCNx5t\",\"HF28xZKSLM9wEuqNg\",\"iS5BrkGLzJyPK7nKt\",\"DPi9QGLctq2y76KuE\",\"DNGkwLuAzEACszkAx\",\"XNmN6ztj36a7eChbD\",\"eHcgvkTGsH7ZziqBo\",\"8sNv5PTHa7XQ8bNqR\",\"iojEnnY9FsMfYzp6f\",\"AasGs8AeX9Lcb9xJn\",\"yjtdwc2AC4jA2RWtn\",\"2PufnQcsHsfymufX3\",\"bJaPCBx63YxdJAuTS\",\"gJYuGdkXEWWmGRLzu\",\"wZ22E8EXW4qasgru2\",\"J23RcmzbdtBbPCTjT\",\"tAF9Gf6PiGogbZuWs\",\"PH32cNxBjrK4a28sn\",\"T6iBEE2jp7f7iEF2P\",\"MpfytGFYF77emJ3cT\",\"RAXRr4ceFEP2RSkiQ\",\"QvEXmSEo3ANp3yPyH\",\"7vyub5zTHNfMfQWoW\",\"pnzfNatg3P32mMYQY\",\"DwetpbChQM4r6Gwah\"]},\"flags\":0},\"editorId\":\"a777e8chPvJkY3tKa\",\"family\":[{\"_id\":\"TcLfFXvBvDqRL82a2\",\"language\":\"java\"},{\"_id\":\"A9EhAF2RCt7ubxRsK\",\"language\":\"javascript\"},{\"_id\":\"n2y4i74e9mFdwHNCi\",\"language\":\"python3\"}]}}"]