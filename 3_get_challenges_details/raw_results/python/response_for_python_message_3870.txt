a["{\"msg\":\"result\",\"id\":\"654\",\"result\":{\"_id\":\"Jgeq7puc9mBBgr9SF\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def complete_binary(s):\\n\\t\",\"difficulty\":1.0925925925925926,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"f3jxz6A7Baa3oYWSP\",\"instructions\":\"Create a function which adds *zeros* to the **start** of a binary string, so that its length is a **multiple of 8**.\\n\\n### Examples\\n```\\ncomplete_binary(\\\"1100\\\") ➞ \\\"00001100\\\"\\n\\ncomplete_binary(\\\"1101100\\\") ➞ \\\"01101100\\\"\\n\\ncomplete_binary(\\\"110010100010\\\") ➞ \\\"0000110010100010\\\"\\n```\\n\\n### Notes\\nReturn the same string if its length is already a multiple of 8.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(complete_binary(\\\"1100\\\"), \\\"00001100\\\")\\nTest.assert_equals(complete_binary(\\\"1101100\\\"), \\\"01101100\\\")\\nTest.assert_equals(complete_binary(\\\"110010100010\\\"), \\\"0000110010100010\\\")\\nTest.assert_equals(complete_binary(\\\"1001110001111011100101\\\"), \\\"001001110001111011100101\\\")\\nTest.assert_equals(complete_binary(\\\"111101100011001111100111010001001110010101011001000000001101100\\\"), \\\"0111101100011001111100111010001001110010101011001000000001101100\\\")\\nTest.assert_equals(complete_binary(\\\"1100110111000000010000110011001\\\"), \\\"01100110111000000010000110011001\\\")\\nTest.assert_equals(complete_binary(\\\"011001100101100100100001110101110\\\"), \\\"0000000011001100101100100100001110101110\\\")\\nTest.assert_equals(complete_binary(\\\"10000010100000011\\\"), \\\"000000010000010100000011\\\")\\nTest.assert_equals(complete_binary(\\\"0010100101011110000000101010010\\\"), \\\"00010100101011110000000101010010\\\")\\nTest.assert_equals(complete_binary(\\\"1111000010000101010011001110110000\\\"), \\\"0000001111000010000101010011001110110000\\\")\\nTest.assert_equals(complete_binary(\\\"100111110111011110101100\\\"), \\\"100111110111011110101100\\\")\\nTest.assert_equals(complete_binary(\\\"1111011011010101000001010001000011110000001100100001111110111110001100\\\"), \\\"001111011011010101000001010001000011110000001100100001111110111110001100\\\")\\nTest.assert_equals(complete_binary(\\\"000101011101010110000011100011000001001111001001000101111101011\\\"), \\\"0000101011101010110000011100011000001001111001001000101111101011\\\")\\nTest.assert_equals(complete_binary(\\\"01000000011101110001100011101111111011100110011\\\"), \\\"001000000011101110001100011101111111011100110011\\\")\\nTest.assert_equals(complete_binary(\\\"0001001100011100111101000111111011001001111100100000\\\"), \\\"00000001001100011100111101000111111011001001111100100000\\\")\\nTest.assert_equals(complete_binary(\\\"11011111000001001000\\\"), \\\"000011011111000001001000\\\")\\nTest.assert_equals(complete_binary(\\\"111011100010111000\\\"), \\\"000000111011100010111000\\\")\\nTest.assert_equals(complete_binary(\\\"11000011100111000001110100\\\"), \\\"00000011000011100111000001110100\\\")\\nTest.assert_equals(complete_binary(\\\"010001100100001110000001001000000001111111101010010111\\\"), \\\"00010001100100001110000001001000000001111111101010010111\\\")\\nTest.assert_equals(complete_binary(\\\"110101101100010110010000100100110110010010000000101000110101010101100\\\"), \\\"000110101101100010110010000100100110110010010000000101000110101010101100\\\")\\nTest.assert_equals(complete_binary(\\\"1010\\\"), \\\"00001010\\\")\\nTest.assert_equals(complete_binary(\\\"11010010010\\\"), \\\"0000011010010010\\\")\\nTest.assert_equals(complete_binary(\\\"1010010101001010011000110101101101100011100010111101110110\\\"), \\\"0000001010010101001010011000110101101101100011100010111101110110\\\")\\nTest.assert_equals(complete_binary(\\\"10011101001100001\\\"), \\\"000000010011101001100001\\\")\\nTest.assert_equals(complete_binary(\\\"1011001110011101010011101110001000010011011\\\"), \\\"000001011001110011101010011101110001000010011011\\\")\\nTest.assert_equals(complete_binary(\\\"111110101111100011010001111110100001101110101011001110111001\\\"), \\\"0000111110101111100011010001111110100001101110101011001110111001\\\")\\nTest.assert_equals(complete_binary(\\\"000100110001110011011111101101000110010101\\\"), \\\"000000000100110001110011011111101101000110010101\\\")\\nTest.assert_equals(complete_binary(\\\"01101000110000111100110001\\\"), \\\"00000001101000110000111100110001\\\")\\nTest.assert_equals(complete_binary(\\\"110011010\\\"), \\\"0000000110011010\\\")\\nTest.assert_equals(complete_binary(\\\"10100000100\\\"), \\\"0000010100000100\\\")\\nTest.assert_equals(complete_binary(\\\"01110110101101110000111000010100\\\"), \\\"01110110101101110000111000010100\\\")\\nTest.assert_equals(complete_binary(\\\"00111101101110001111010100011000011101111110110000001110\\\"), \\\"00111101101110001111010100011000011101111110110000001110\\\")\\nTest.assert_equals(complete_binary(\\\"1000101011011110110100001010000111100010001111110\\\"), \\\"00000001000101011011110110100001010000111100010001111110\\\")\\nTest.assert_equals(complete_binary(\\\"00110001001110111010111000100101011011100110101010\\\"), \\\"00000000110001001110111010111000100101011011100110101010\\\")\\nTest.assert_equals(complete_binary(\\\"11100110010001110111111000100000011011011110110\\\"), \\\"011100110010001110111111000100000011011011110110\\\")\\nTest.assert_equals(complete_binary(\\\"001111010010101111101001111100010110011001000011101011100101\\\"), \\\"0000001111010010101111101001111100010110011001000011101011100101\\\")\\nTest.assert_equals(complete_binary(\\\"00110001000110011100\\\"), \\\"000000110001000110011100\\\")\\nTest.assert_equals(complete_binary(\\\"10011101101011111101101010\\\"), \\\"00000010011101101011111101101010\\\")\\nTest.assert_equals(complete_binary(\\\"0110000001001010101100111101010100010010\\\"), \\\"0110000001001010101100111101010100010010\\\")\\nTest.assert_equals(complete_binary(\\\"01001111001110010001010111101000\\\"), \\\"01001111001110010001010111101000\\\")\\nTest.assert_equals(complete_binary(\\\"00111000010010110111001111011010001010000111010000011110111\\\"), \\\"0000000111000010010110111001111011010001010000111010000011110111\\\")\\nTest.assert_equals(complete_binary(\\\"1101100011100110101000000010101011100001001001101\\\"), \\\"00000001101100011100110101000000010101011100001001001101\\\")\\nTest.assert_equals(complete_binary(\\\"0101110010100001111\\\"), \\\"000000101110010100001111\\\")\\nTest.assert_equals(complete_binary(\\\"01010\\\"), \\\"00001010\\\")\\nTest.assert_equals(complete_binary(\\\"0110010000001010110111011110101111000011111101000001110\\\"), \\\"00110010000001010110111011110101111000011111101000001110\\\")\\nTest.assert_equals(complete_binary(\\\"10100110110110000101011010111101000111100\\\"), \\\"000000010100110110110000101011010111101000111100\\\")\\nTest.assert_equals(complete_binary(\\\"001101011110011111011010111000001\\\"), \\\"0000000001101011110011111011010111000001\\\")\\nTest.assert_equals(complete_binary(\\\"111000011001101100110010101010110100101\\\"), \\\"0111000011001101100110010101010110100101\\\")\\nTest.assert_equals(complete_binary(\\\"1010000111001010001001011110000110000010\\\"), \\\"1010000111001010001001011110000110000010\\\")\\nTest.assert_equals(complete_binary(\\\"1001100111111001010101110\\\"), \\\"00000001001100111111001010101110\\\")\\nTest.assert_equals(complete_binary(\\\"11101010001011011010001101000001010000000101\\\"), \\\"000011101010001011011010001101000001010000000101\\\")\\nTest.assert_equals(complete_binary(\\\"0101000\\\"), \\\"00101000\\\")\\nTest.assert_equals(complete_binary(\\\"100101000000000001101100001111100\\\"), \\\"0000000100101000000000001101100001111100\\\")\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[1,1,1,1,1,1,2,1,2,1,1,1,1,1,1,1,2,1,1,0,1,2,1,1,2,1,0,2,1,1,0,0,1,2,0,1,1,2,2,2,0,1,2,1,0,1,2,0,1,0,0,1,2,2,0,1,1,2,1,1,0,1,4,0,2,1,1,0,1,0,3,0,2,1,0,1,0,1,1,1,1,3,1,2,1,0,0,1,1,1,3,0,1,2,1,0,1,0,0,0,1,2,2,2,2,5,1,0,1,5,2,1,0,0,2,1,1,1,1,0,1,1,1,0,1,2,5,1,2,3,1,1,2,1,3,1,1,2,1,1,1,2,0,1,1,1,1,0,2,1,1,1,0,1,0,1,1,0,1,1,2,2,2,0,2,1,1,3,1,2,1,0,1,0,0,1,1,2,1,1,1,1,2,0,1,0,0,2,1,2,1,2,0,0,1,1,1,1,0,1,1,1,1,2,1,1,0,1,1,1,1,0,1,0,0,0,1,1,5,2,3,1,1,0,0,4,2,1,0,0,2,2,1,1,1,0,2,1,1,1,0,0,1,1,1,0,1,0,2,0,2,1,0,1,1,2,0,1,0,2,1,2,1,1,1,0,3,1,2,1,1,1,2,1,1,1,0,1,2,2,1,2,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,0,1,2,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,2,1,1,2,0,1,1,1],\"rators\":[\"PXAcsKkssS2yLyDv2\",\"pMg2Zddm29zRGP6wg\",\"BeFnbPbMnAM2SjBdZ\",\"LA2YneDcbtiSj5SH6\",\"bHGez52okhbhTrtSH\",\"i4YM8iLfgozNR3hZ3\",\"Wv5c7WsK6R8yb4mTt\",\"u5u2YpHXiNgzDNJdX\",\"gb9rvGus2Jv7bjZSs\",\"mybpojPXaZigaqsAD\",\"eebeY4dPvLYcmzy2v\",\"AasGs8AeX9Lcb9xJn\",\"jeuoearPPTcGPgXhf\",\"LQxof8pGabGuWP7Gn\",\"dHZqT6h4JMwk5fPC8\",\"2fxapKr8XGdNeaKi2\",\"sz8ufn9i8zeiGWpAy\",\"N2wnZXkhDH86mgjQ8\",\"WoKygnR2BoTuSG9y5\",\"Ycj4iTJGFyvC4bXek\",\"C4QntmkYtB89GNtpd\",\"jNvegJWCk5HCtEMbK\",\"yabtHTtycsWhcGBfD\",\"4CFzv558qbGcpQwc4\",\"pmgFEciNrd3ES9tuu\",\"X29Ekg7HjqHAYgCSM\",\"jBo3xAopr37GFzY8g\",\"zd9FLSzsGz3evKafy\",\"kfs5y7nzGhLXtvs5P\",\"gudC5KZrykfdfGD3J\",\"8fhbZ2xkaSQB4Cb2L\",\"tAF9Gf6PiGogbZuWs\",\"FNp8ZCKbNWKEf24hR\",\"tdTjjvaSqtvpJ7Lx5\",\"hnyhBFWwNCz9mDfSi\",\"aiLGtqxCmJn4gnADi\",\"PSrcg6fy835R4c5CW\",\"Tpg3ek75vt9MrhEHZ\",\"9Ly8afdtofp8DXzrt\",\"fBqQjriC4QEtFNxFe\",\"Yp7uvStL97cC9fKkY\",\"YeagPqNegEBbSGb3p\",\"ovqQRfyvmEDypjrnC\",\"oKNAZ5BNeNWyvkiiB\",\"9g8wqCR9BWvk7PLaE\",\"boMXxa5zxP6yJHTje\",\"4y2bxsHwifCdZXAQA\",\"g58KAsWfq4q8fnRuH\",\"WHg6mfQWCm6st5fiP\",\"yZvzB3qFb8pkHy4dg\",\"jHrtWDGBhkbuWa7fG\",\"qz9yxbrcCeoNouemo\",\"ouPtoRyNq8hKH2WkT\",\"wmiKeocyx5AvLxRbi\",\"JZbBYihgT6m7bKvgc\",\"uGGbTfxFQ5tn5wMA6\",\"N7GPFEhCaiQ79MKjz\",\"u5jLXaWAKo7K4JvTR\",\"Lg74S7Hm9R378BCvX\",\"k2HSpGL7RBwNM6aYs\",\"mxX4rH5ELYkdZ2Mbw\",\"q85Lo85cGnQmFZKE6\",\"X74H8PYX8XYkrGRQc\",\"siP7zPzxZeDHSGsCA\",\"qzzyGD7fCCDjX25za\",\"sXB9C57Q3GjMfNSxw\",\"HMK3eoJxo2yXeDMHJ\",\"vwtNAYxw6QAMsPro3\",\"8LfTheFzvicameoz9\",\"4tgBydK887PitgAoi\",\"WtFQigNmNZ5EREPzo\",\"9f9LG2exEqL5gNrA7\",\"cR3ibTMxLyEdDFCHY\",\"f3izdC6EEtA48v2iL\",\"wZoxzQDbso9SMAPkY\",\"23hs4uXEAv4FTiHNm\",\"pbYaZ9eEeckt3sGfk\",\"289Qw4ozae6dQ338J\",\"YvW8i37nRHwpNtZjW\",\"s5M5RvgqR9BhB9JoC\",\"8JyqsSbN2FJXPr3cw\",\"9uZpgAtSuPZ7W7DL6\",\"vLrq4dEDMM2wd68Dc\",\"ALCdQmYCaCoGpPzJx\",\"tZsbfYh9c6y9NPFTJ\",\"pNvH75WKPPh9rGnfL\",\"6vZEAbJwvucFrCSJf\",\"Fk9kLwoG4Brf4KsKf\",\"BFqWnEFkrG3hdW2zb\",\"yQ8PRk6eywEfCvZve\",\"aRqQ42J5zqCmBNd8w\",\"SgZ2t9xFuRqdJGofp\",\"N7P4AnS8nzK4oupHv\",\"sFcMwG5a4L5FiRPmT\",\"xmdaK5MJbyarkZWxK\",\"rJGeRSCjGzRuYfHZS\",\"HQxp7NcdvF92G7bYS\",\"t3gMbR56vEv9vAEZQ\",\"kMi9TRoqj8QptxnBY\",\"Kwj9nwCXCLL7s49KE\",\"J5T8gZqiZXFuFDTQ7\",\"aEm3Wvj2rFYRL8Lrb\",\"2iFe3EHEH2YdhSKrs\",\"vWgBJaEtcu3XoYuer\",\"CWTZqhLrZswDzDTQb\",\"C9LKGu2g5hSijvDzA\",\"5uM28JoCcQA6kHP9X\",\"sJWTa7iWeRoRtqJ8N\",\"4AoQy4B5fPs2KBinr\",\"ffLo8fDxcS3rqPd66\",\"eLkj3Zb2DqiW4AEEh\",\"5kEyLPjTLrt7z2YJZ\",\"v8iedwMBcGiN2PHGM\",\"FiaTpm7ehfDv43wSG\",\"2QGRoQn2dRq3scu7k\",\"7tbM7oMYc5oDvD88Z\",\"GEvSGXDkk7pACfYri\",\"s2ZMtR9deh6Kia7pb\",\"v9KtC8YLbMWmXiW2H\",\"KRSKj7ikX2ytWFmod\",\"5JZNWts9XEHejpvur\",\"LQFs3xtNHpRhCZ5aT\",\"HF28xZKSLM9wEuqNg\",\"M8dQuMrEpP8Hc3tHN\",\"uiEuENARwFpnNMfFs\",\"ZNnsMeNkdDhHjSrZb\",\"q5a96XumccZyhQNyL\",\"kYWb8BwpKwunQkxeX\",\"Ro3ppqamSxiJv2wxP\",\"k5mp7Hkg8w5rwiXpe\",\"DEDniTrstQYGounXT\",\"Jqk2uJZZxEv5wZFze\",\"HiXS9Hofvx4rnqDZz\",\"q9sgRRE2tTGe89YKs\",\"9pzFiFK3ANLjQfnr2\",\"ffjnHrx8Ym7A7pQWe\",\"KdNDysEsy2TW5QRJ2\",\"mKJuoa2SZSDNhvhk9\",\"yAouD3PxzED8a4gap\",\"FEYpu9RWysAgW3XnP\",\"qZQxPQ2kaNKAMesHT\",\"wf98HW4sLSE4F4N6z\",\"8BFSTCnoe2QggN64c\",\"ekQh3jzgGLsEMbKo3\",\"XrqNzJ2FRG8HnGiR6\",\"di2hhADLx59Bj4ewM\",\"AF6LgdKhEdzwgRJom\",\"dKKMvaYoJunNPk5Wa\",\"ytceK4TxiCchoCLYC\",\"ahk2qiXKJA753wAJk\",\"jNE5AHcJQWXz7efuP\",\"NNE5HNRXAkmhrWgyQ\",\"yYxPzFqBgtQ9fsyHM\",\"nfXGHENb5md7m355s\",\"a777e8chPvJkY3tKa\",\"JEAi9mG3vvBomJ3Yu\",\"yr822PZmmiDDenxpB\",\"4yNLEwL2rsx4EE5Nt\",\"4rwxLqLs2mNZNg8NB\",\"NzbRqGWspQnWMoDrF\",\"2ptN2mhjFwFcHyPZd\",\"So6PHm74mfJuY2WTs\",\"H9KZi2cjt4FwH7qog\",\"3cF6NXq3ZEwdkgSjb\",\"hXHdW2YZwueskh9cP\",\"H4abACFDH5t8CnnyH\",\"n2ck2WGuM35vbZiFz\",\"ZrKCkX7xxGGZzauFW\",\"eMuCpJ2spXWkJjWNz\",\"FRN2W8RYpJ6GPhgRy\",\"9bQyb6rW7xfE4vgrR\",\"YcCLwitFMAEJSnxAW\",\"GGprTwrkjuccmrQRg\",\"YA7SDhpgEtsqynvNL\",\"2innwjWqxJHo4eRGh\",\"FFAJTbdmD5GCndohg\",\"yNjkHfHESBAnCssPB\",\"R4SjTgDnpigJYDLyL\",\"5HCu9Ydd86QgHDRNP\",\"TTgP9jcqGxCfKotZ3\",\"3LiSLdtN58n46NEqg\",\"sHjfbGQGLHE6JR6qu\",\"iojEnnY9FsMfYzp6f\",\"ckHFA5y8pkrXbsevA\",\"b9YQPLb9ZPSADdHXX\",\"dj5AyG5fWP8FdsSmZ\",\"Pe8vWpDHRuH9nSGKW\",\"Ecg4m7srYGgZsb4Ck\",\"HqmxnQJM66Y57twhn\",\"KdYQN3KAT2DyTzT2a\",\"9CoqdidjM9KbeKnHY\",\"oBcs8GLX2ZFLXQy8y\",\"i5iePG5GqhJJ8HEoB\",\"yjtdwc2AC4jA2RWtn\",\"HhYCji7QqauyN3A7v\",\"SkQcb2sRn4as5KpnN\",\"ta5CrWnBCRusD2WMo\",\"hkJGLuib5md8vZ9HD\",\"xLe22eHviFtWojRem\",\"q6QsMYNMpPNtmyTeW\",\"RehJGBFS6CYiWdjZx\",\"g4NCSxxHqHCGMpWwT\",\"ZeTRCF5ufwFqAsHKt\",\"orFLgPDw9H5MDzmwo\",\"TPhfpB5tzQWSSn67n\",\"aKzYNPqBqb3J3ZgyD\",\"u7i7WPM63n42r8R8o\",\"8vWWL8Tx2yDai4ydm\",\"bmthyKcDF922zNqxK\",\"XbxHXmh5ZmRN2gw3K\",\"axdSNLZpiCDF8RS6n\",\"KLmLKaJPfsYxp42p2\",\"23KndF374EHHZNbL8\",\"nq4XLF85fWDdXiKGA\",\"Tz7XRpCCv62a3z3Yj\",\"Lm6ChQCWBmaikmk5J\",\"mBtSsKTHdQniYAfsZ\",\"kQ86mSGBiBQQvXzQR\",\"8aEGGQPkGesWwoaom\",\"JYvJJKjerbQYjNG9b\",\"k2Eo3wyfZZ6KxvKhN\",\"pn7FezrkZZCui7fkJ\",\"sCChapdzgzdhcvonx\",\"pWYjN62ZAKQZ7Xp3W\",\"qD2LrwaDrSdiybLKY\",\"tpxMgkGSHwBjS95Ta\",\"sbJcFfQjQ59Wfg4Cd\",\"8WpvgSbQciTQWdd8T\",\"mG8HqKiAQFTdRZthG\",\"DYDJTyGgKFnBRLm2r\",\"dik7wis3hBJJBkYwK\",\"gXTAie79kiw28tx5u\",\"rrSC943cCKNG48sH4\",\"Kh3Pc2ZRusurLaMyP\",\"E5cu6oJFNFDXqae9q\",\"hRiMXDZNAzyPd5tpt\",\"d8qtzoLB264iP8tdY\",\"rxr3nwpDGDEkBJRgD\",\"9FCeFzjPA4jrQ7oHW\",\"wRttWTM59y8m5mx7x\",\"6HgMANhu6WiGyXSGN\",\"pJj86xc32Bs7Frxvi\",\"dBzwBtRjZqB98DJeB\",\"E4KGguXaWuR4bd2n7\",\"DPi9QGLctq2y76KuE\",\"72oyXuXwKRY95fpkt\",\"QRv96jmNaYsWkxQEG\",\"yod5YhKtPqw2GfG9B\",\"pduNK68oazqQTtbLp\",\"cAP3n5NY64uoMwzRR\",\"J3upzLHuEwXH7Z2hx\",\"RGMbFMZXJr7DhcAJy\",\"GqErHwe6rLZi8SRFL\",\"Fb2wehA7QgTFWry2x\",\"oyKcm3zqdy8Ko5P5d\",\"dky93oMkJsJjEJKk2\",\"4fjSgcqhQQZM2ZFRP\",\"YRAzEBJoLvSaiPtYx\",\"GGdmhAvxXhqhhibJN\",\"ga7aTTEThzsELuC2j\",\"dYPkStFnLvAMsHSzZ\",\"DAhoDmrLmkoRsJhRx\",\"yTtSCvGPyYna6JuRC\",\"BrTDhPJcACL2bsrpJ\",\"HuNF3xTBzmatyGSTm\",\"PBn3fhAqsEqHEHq3E\",\"oDN67zoApxcztnYdu\",\"rEecHXXCTwgG5wWNA\",\"fTNQmMvTZhhiGBCMe\",\"oriWwkSDoejDH9ru5\",\"FuYTQcDNjct58rqPa\",\"pDvFWMCD9fQwoBPcu\",\"cZccqzRQ9GgjQF6Az\",\"wjc4iejpErBhxWwHo\",\"5XiuAqicKD4hBdu63\",\"4ArGCifHnsz8p525A\",\"C2AfMipCicfD58WJ9\",\"5zGMciq3fB4aeu9uj\",\"5hQnRWiKkhgKJXNMP\",\"WdKdsgH9gXkKgCycx\",\"DpnYcMphntjsQ96qg\",\"nFbmNzMQ38TncmfQX\",\"DqNQn9Jsxcu5HijKE\",\"dNErCjyFobE5sn4Zh\",\"hERDiXzMt3bagzfKp\",\"5S9nX4rKsnCcnv4Cz\",\"R8HfPE3kgrwButJ8L\",\"pveK5gtGcm8k4wScM\",\"iF4tdvn5sA9CM4T6T\",\"Lg4t6SEWgtYz4u7Cj\",\"buX4mCQhtXCfBjeno\",\"Ds7L5bksw2QRHjrKL\",\"CTKmXtrqDYqJBnuy8\",\"PexKJN2gNdthuHKxZ\",\"AXcnPX68zdMiLNSmu\",\"no46qNkTbNeHepe64\",\"PWgzeK859suojbrRx\",\"qAby4AWXmTNeusvg3\",\"5HTSi5wQNAdLm57LB\",\"tW7TaC7bjNajLGH5Y\",\"YaybbCdfjFQmsfgtp\",\"JS3hNM3XXkxPdg3yk\",\"eYfPWvZwnJQkHbSTK\",\"97mMkvdDxbhkQXNPp\",\"srJ34BaybkQh3qRkM\",\"pCMhfoZ5c6eBuCqbp\",\"q9FfWNiMDKRiaCJ5j\",\"KJCDwGkoXh8qtbbKr\",\"TmM3AN7g3fkh69ycj\",\"LCuvvWMwiGuqTwNRi\",\"pPpmP7xeJzGgK362R\",\"GdKtjPh8TcfmJuduv\",\"7dQYiDeTcMztbGyso\",\"ghMkPtdFCpM6w8nax\",\"AFfw7cGg83uYk2Miy\",\"cbhmt4aRWPyJnnzNT\",\"BJp2WkwLWGHHB5oQW\",\"T6iBEE2jp7f7iEF2P\",\"DQJhf4WY3LehMhXoL\",\"NrRa4TS6uZR9xuXRt\",\"iYXdNw7tKcgA3QwBX\",\"PC3pLs36zNzpRDSuE\",\"CHvzhtXnv8HTbPQ56\",\"66a9xX73nmTEuKs9k\",\"c2q7mY39z5JPEMCaM\",\"CKHKhvJcq9jNMqrmd\",\"8uiLiJcmWxWe6qw65\",\"X4rzfxGgxx6CS7Bpz\",\"2EbDCCJJvCfKkbYia\",\"2u9wghjCydey6aWys\",\"w3QDkmjZj2dAFDsjq\",\"mvJBakQ35CWAnbbEZ\",\"PytNZK9mNiRiZxPrm\",\"4TmgHkn5vqyHK3sYC\",\"eHcgvkTGsH7ZziqBo\",\"jkbavR2ATFJcpmo8M\",\"NojQykDfP7WjHckg4\",\"g2mqHYvQmr78mET8i\",\"FxbTzThBiTnRzfirA\",\"wwz3ixWSv8rFDHBXd\",\"eW9R2SCoYnY8HBAdL\",\"NGvCPuMiAP3xrRLfB\",\"Afnps7TJQuS9sipMb\",\"vCeeMuYDbz3MB4vsk\",\"gKnWjDjwrJh7MK2df\",\"7txFzDQ43vJ7qCY88\",\"TCvpT4EPb8qNssNB7\",\"8PwfYqoDQFThzNtvf\",\"d9LBRxvADNBB5QJMB\",\"rCrbqMiaGPgHYTNxu\",\"pwWtbXEjzuvrhEGwt\",\"zC8WrPp5BC6c2exrW\",\"dzS6WBTMHyFEag6Fp\",\"2MjzJ7yxh3eT3xbng\",\"rhS8qXRjZcpDXkwnE\",\"B4y8aoyXJtskYPFEL\",\"Qyfyyw6oC4EHAndzo\",\"FMyZPN6odEFtfuimF\",\"qB6KSTYC6H2TQEQY6\",\"5QN8R22z43SrwoHDz\",\"ey3CASd6Je5LEJzfB\",\"vAbK8sCfKyFC78HYg\",\"gbGzZz5Yq5hT357v8\",\"cdXmwjupCXSvJTSNo\",\"9QMPE56an5KmasGwS\",\"ahWFxnaxt9bXSA4f3\",\"GgQqni8TkbqEBGcsy\",\"Wi4H6ayKsNDWWQCG5\",\"sMcFMPkMJC4Kh6ymj\",\"cmH5k3s9REYMzDBMn\",\"rraTtctZqnjXu2L2x\"],\"total\":391,\"quality\":[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,5,4,5,5,5,5,4,1,5,5]},\"flags\":0},\"summary\":\"Create a function which adds zeros to the start of a binary string, so that its length is a mutiple of 8.\\n\\nExamples\\ncomplete_binary(\\\"1100\\\") ➞ \\\"00001100\\\"\\n\\ncomplete_binary(\\\"1101100\\\") ➞ \\\"01101100\\\"\\n\\ncomplete_binary(\\\"110010100010\\\") ➞ \\\"0000110010100010\\\"\\n\\nNotes\\nReturn the same string if its length is already a multiple of 8.\",\"tags\":[\"language_fundamentals\",\"strings\",\"formatting\"],\"timestamp\":{\"$date\":1582061047529},\"title\":\"Complete the Binary Number\",\"quality\":4.769230769230769,\"family\":[{\"_id\":\"pfa5aLiAi62BBp4Cr\",\"language\":\"cpp\"},{\"_id\":\"HpmC7qQpLeGqj6RCg\",\"language\":\"javascript\"},{\"_id\":\"tXxiWs6sxWWvgC7QH\",\"language\":\"php\"},{\"_id\":\"Jgeq7puc9mBBgr9SF\",\"language\":\"python3\"},{\"_id\":\"7rh7SvYRkDujCEWbb\",\"language\":\"ruby\"}]}}"]