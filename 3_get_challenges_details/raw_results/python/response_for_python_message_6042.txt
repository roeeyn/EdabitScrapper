a["{\"msg\":\"result\",\"id\":\"1731\",\"result\":{\"_id\":\"hDT4TR9JAoQ3BPuCH\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def people_sort(lst, attr):\\n\\t\",\"difficulty\":2.2242990654205608,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"Civ3Yj3qFWfJg9rQq\",\"instructions\":\"Given a list of people objects, create a function that sorts the list by an attribute name. The attribute to sort by will be given as a **string**.\\n\\nThe `Person` class will only include these attributes in the following order:\\n- `firstname`\\n- `lastname`\\n- `age`\\n\\n\\n### Examples\\n```\\np1 = Person(\\\"Michael\\\", \\\"Smith\\\", 40)\\np2 = Person(\\\"Alice\\\", \\\"Waters\\\", 21)\\np3 = Person(\\\"Zoey\\\", \\\"Jones\\\", 29)\\n```\\n\\n```\\npeople_sort([p1, p2, p3], \\\"firstname\\\") ➞ [p2, p1, p3]\\n# Alice, Michael, Zoey\\n\\npeople_sort([p1, p2, p3], \\\"lastname\\\") ➞ [p3, p1, p2]\\n# Jones, Smith, Waters\\n\\npeople_sort([p1, p2, p3], \\\"age\\\") ➞ [p2, p3, p1]\\n# 21, 29, 40\\n```\\n\\n### Notes\\n- Sort the list in **ASCENDING** order.\\n- All objects will be valid.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"class Person:\\n\\tdef __init__(self, firstname, lastname, age):\\n\\t\\tself.firstname = firstname\\n\\t\\tself.lastname = lastname\\n\\t\\tself.age = age\\n\\t\\t\\np1 = Person('Michael', 'Smith', 40)\\np2 = Person('Alice', 'Waters', 21)\\np3 = Person('Zoey', 'Jones', 29)\\np4 = Person('Susan', 'Heffley', 43)\\np5 = Person('Bob', 'Fredericson', 70)\\np6 = Person('Braxton', 'Leighsonley', 2)\\np7 = Person('Joshua', 'Senoron', 99999999999999)\\npeople = [p1, p2, p3, p4, p5, p6, p7]\\n\\t\\t\\n\\nTest.assert_equals(people_sort(people, 'firstname'), [p2, p5, p6, p7, p1, p4, p3])\\nTest.assert_equals(people_sort(people, 'lastname'), [p5, p4, p3, p6, p7, p1, p2])\\nTest.assert_equals(people_sort(people, 'age'), [p6, p2, p3, p1, p4, p5, p7])\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,3,3,5,2,1,1,1,5,2,2,2,2,2,3,2,3,4,3,3,4,2,2,4,2,3,4,3,4,3,2,3,2,2,0,4,2,1,4,2,3,3,3,4,4,2,3,0,2,1,1,1,2,1,3,3,2,2,1,0,3,2,2,2,3,1,3,3,2,0,3,3,1,2,3,3,2,3,3,0,2,3,0,2,1,0,0,2,2,2,3,2,2,0,1,3,4,3,2,2,0,3],\"rators\":[\"PXAcsKkssS2yLyDv2\",\"tAF9Gf6PiGogbZuWs\",\"8PwfYqoDQFThzNtvf\",\"a777e8chPvJkY3tKa\",\"xn7uGNKeAwPEkP9oA\",\"fznzd3qnvtbFkkizz\",\"aEm3Wvj2rFYRL8Lrb\",\"s5M5RvgqR9BhB9JoC\",\"gJYuGdkXEWWmGRLzu\",\"gb9rvGus2Jv7bjZSs\",\"8JyqsSbN2FJXPr3cw\",\"DYDJTyGgKFnBRLm2r\",\"hkiz2Nv927cYGrA86\",\"yjtdwc2AC4jA2RWtn\",\"r2N4kpphFEgbcn5Sb\",\"pBTrwvNXXzXoBfPSm\",\"Nb6LYPoQP6KJZt8mz\",\"3jr2dyncMZqhkMHTP\",\"4fhjJBvLBWh6QeSih\",\"Yp7uvStL97cC9fKkY\",\"zApBvTm8hRY8mMjCd\",\"N4QjiZzLyunefpXeS\",\"quEfQhA3xBwsCobcg\",\"HnozxuCs6uNc6xpAF\",\"j8FR2cHxpsYtNo9Dw\",\"JvtckywAquTG4TeqG\",\"NfMJuiBk6FN5Jc6ow\",\"qBhJYfczEFXuZQbG5\",\"MtJ33oGd6Skry3dj4\",\"HF28xZKSLM9wEuqNg\",\"SGhPxX5bHGL8zZqtt\",\"KzwTgJqEYhMExrTeE\",\"PT5pu7kJsgp9TDNGv\",\"wFws9y3mXvC4vL9Q2\",\"dSd7wHgXGQeG5BQ2P\",\"ZD3sFkhuCNoEHEekx\",\"53HB4PyQgYTpBpsnX\",\"xhCe8aAuimqGyiWQe\",\"8sNv5PTHa7XQ8bNqR\",\"vSvippNru5pBnJQJn\",\"c2u7qfdaYxcyuydtu\",\"uN5t57RETi5y2z5W8\",\"3ECpdeExhBmkYXtba\",\"Wv2vJnEj8ywNmARoF\",\"uznjMqKo6mzk5fsJh\",\"ywk3XGvcmpTgRxwZa\",\"REpkEcYrskYHBmYzW\",\"Kh3Pc2ZRusurLaMyP\",\"bRk5vhHC34JLgTeAa\",\"TFqRD3zervh8PT8op\",\"jSaW4kdeAAGoLxcuP\",\"s6qiPXptvyxxEy3vm\",\"rGpPd6PvpzLaqps4g\",\"DNACg4rcgZsPtYGZ8\",\"nPfdEqn8RZmDzAeMW\",\"DpnYcMphntjsQ96qg\",\"p7YDfd6oD2rfHMG7s\",\"dHConQk6pC8c323TE\",\"ANbSYXiYsp4addoDq\",\"HnoDeuYM8h3PkXtSz\",\"v2rponevFCpBsLrQD\",\"AW6dT7votojqC9voG\",\"SExX3m5YftBWmsk2e\",\"5S9nX4rKsnCcnv4Cz\",\"AasGs8AeX9Lcb9xJn\",\"AvA5ezoh8m6mEEXhu\",\"axdSNLZpiCDF8RS6n\",\"QRv96jmNaYsWkxQEG\",\"AHodQW2h6YM7p4vSw\",\"RyWd7ieDg3PAWLpBa\",\"eg5iwxQWCEYnktrcm\",\"hRAd998MG8Jzdpxj6\",\"CEd9tLdXeDeNHSzys\",\"7ifh8r4gvyYMhKB94\",\"NmsxAPWovzNcBJobu\",\"eFh8z7sMmxkrFWZv9\",\"h4x2jaMdj5aQZbW5g\",\"9uwFp3TpruxpENc6z\",\"9MER8SZ9Xo6xNYMj8\",\"feAwSR6inBAjoxRMB\",\"5rX3qPFdvRQ9G7xZQ\",\"eMuCpJ2spXWkJjWNz\",\"foytX6kH9wiSYqLtT\",\"NtAgmhY2RuTFD9wvy\",\"Tg24gZyPmk8uDXcBY\",\"CB48GHbw7xtwmiuPn\",\"rx88g3SpXfGecJigj\",\"yTtSCvGPyYna6JuRC\",\"sftR9DgM4jpwtxfAM\",\"nFbmNzMQ38TncmfQX\",\"Lg4t6SEWgtYz4u7Cj\",\"DQskEvAv5KiJDPtGF\",\"StNu7DPyTgEStZsMY\",\"eYfPWvZwnJQkHbSTK\",\"CLypXaZksY99mpRCm\",\"n2BRY9X8899dcG8Bw\",\"bWxaTjsPDSAKLEaw3\",\"qAby4AWXmTNeusvg3\",\"yypJQP3gYjXBaYm89\",\"2RT9EPgnapbH8dqsQ\",\"4RsakkyRXyYGwFxEa\",\"b3Dk2LqoEgripS3Y3\",\"3LiSLdtN58n46NEqg\",\"gXTAie79kiw28tx5u\",\"XNmN6ztj36a7eChbD\",\"ngARxyodB845RvKoQ\",\"mDWNyaaQ9hvPCRzSd\",\"foF4hDej3EYw4bSAg\",\"XcLyZfKZmH7AzZ9XC\",\"Jy3AXof6YDhxW5pAr\",\"kWobGYgZWJxN6ZddF\",\"84QqRZEfhHdqPf6qn\",\"ADquWin3Xb8Aw6qz6\",\"7pPKgKcMuxnEMzQ3N\",\"epapfx33vxwBRBZy3\",\"2PufnQcsHsfymufX3\",\"tBwvWMP4S3NpbKuvg\",\"kQH5b8MXJunh84Czq\",\"c7uBxu2rgY77H5d79\",\"Qg3KkB6izmmjnE93c\",\"ScaZG69jog5kcqGtQ\",\"jhpjLPkSo6yjCPNwe\",\"2EbDCCJJvCfKkbYia\",\"RTDx9axf52kxhFjwZ\",\"iojEnnY9FsMfYzp6f\",\"wwMcJQRvf3X59Jyev\",\"gJEPPwrgHXej9YXDg\",\"scLA8EcDKhf3yTpku\",\"9pzFiFK3ANLjQfnr2\",\"JpTSNtaXKdx2is7Sr\",\"8nE8QHnFYsHCFebte\",\"oLbXCR7s4H4ggqTos\",\"5kazQPq8ZdDsx6kjf\",\"g2h22xXQEA87Td3sF\",\"9baYEicpTZ27vb5jN\",\"XHShZ3WMPgGEA2vkR\",\"sbJcFfQjQ59Wfg4Cd\",\"i3GA5qpPp2cGSxWqq\",\"LQxof8pGabGuWP7Gn\",\"oBcs8GLX2ZFLXQy8y\",\"mzsaCBQP3e6YourDN\",\"Afnps7TJQuS9sipMb\",\"qD2LrwaDrSdiybLKY\",\"zBk2cwJ9SLAhFuM3K\",\"HqmxnQJM66Y57twhn\",\"jBSEY9K3R7jRmH9Bf\",\"JKb5rhL6DKcCAypF9\",\"gKnWjDjwrJh7MK2df\",\"T6iBEE2jp7f7iEF2P\",\"yAia3z7kTm8anHb7Z\",\"9pqtNWrsTJdZcRbEZ\",\"yod5YhKtPqw2GfG9B\",\"BvRwtF8ZSMeGA4MEH\",\"CtKfCpjYB56uGxFo3\",\"LrcMEPYSk5Mfcrf25\",\"dzS6WBTMHyFEag6Fp\",\"syRNbbPdLCGXbH2Gy\",\"rQA9SE8nuwFueaHsR\",\"RjnXnHgwatpXJ2wdZ\",\"crWQHGLJaxSAn8W6T\",\"Wi4H6ayKsNDWWQCG5\",\"9ivvGvJGvtQfigQaZ\",\"Ncn7Qn2LbdsiJnfFk\",\"naZ3i6sSDPwsieDH7\"],\"total\":178,\"quality\":[5,5,4,2,4,5,4,5,4,5,5,4,4,4,5,5,5,5,5,5,3,5,5,5,5,5,5,5,5,5,5,4,5,5,5,5,5,5,5,5,4,5,4,5,3,4,4,3,5,3,5,4,2,4,5,4,5,5,5,5,5,1]},\"flags\":0},\"summary\":\"Given a list of people objects, create a function that sorts the list by an attribute name. The attribute to sort by will be given as a string.\\n\\nThe Person class will only include these attributes in the following order:\\nfirstname\\nlastname\\nage\\n\\nExamples\\np1 = Person(\\\"Michael\\\", \\\"Smith\\\", 40)\\np2 = Person(\\\"Alice\\\", \\\"Waters\\\", 21)\\np3 = Person(\\\"Zoey\\\", \\\"Jones\\\", 29)\\n\\npeo\",\"tags\":[\"language_fundamentals\",\"objects\",\"classes\"],\"timestamp\":{\"$date\":1598032664581},\"title\":\"People Sort\",\"quality\":4.467741935483871,\"family\":[{\"_id\":\"hDT4TR9JAoQ3BPuCH\",\"language\":\"python3\"}]}}"]