a["{\"msg\":\"result\",\"id\":\"1308\",\"result\":{\"_id\":\"eyJ4mN6RpyiRTvSob\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def is_palindrome_possible(txt):\\n\\t\",\"difficulty\":1.9915966386554622,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"9Q6DJZcMjh65rtEih\",\"instructions\":\"Given a word, create a function which returns whether or not it's possible to **create a palindrome** by *rearranging the letters in the word*.\\n\\n### Examples\\n```\\nis_palindrome_possible(\\\"rearcac\\\") ➞ True\\n# You can make \\\"racecar\\\"\\n\\nis_palindrome_possible(\\\"suhbeusheff\\\") ➞ True\\n# You can make \\\"sfuehbheufs\\\" (not a real word but still a palindrome)\\n\\nis_palindrome_possible(\\\"palindrome\\\") ➞ False\\n# It's impossible\\n```\\n\\n### Notes\\n- Trivially, words which are already palindromes return `True`.\\n- Words are given in all *lowercase*.\",\"isHidden\":false,\"lab\":\"Test.assert_equals(is_palindrome_possible(\\\"rearcac\\\"), True)\\nTest.assert_equals(is_palindrome_possible(\\\"suhbeusheff\\\"), True)\\nTest.assert_equals(is_palindrome_possible(\\\"palindrome\\\"), False)\\nTest.assert_equals(is_palindrome_possible(\\\"yagnx\\\"), False)\\nTest.assert_equals(is_palindrome_possible(\\\"zgzqxljjp\\\"), False)\\nTest.assert_equals(is_palindrome_possible(\\\"tgmqkpdhnhatoco\\\"), False)\\nTest.assert_equals(is_palindrome_possible(\\\"akyka\\\"), True)\\nTest.assert_equals(is_palindrome_possible(\\\"kjyyrftnbsbq\\\"), False)\\nTest.assert_equals(is_palindrome_possible(\\\"jynmynqhcy\\\"), False)\\nTest.assert_equals(is_palindrome_possible(\\\"hfe\\\"), False)\\nTest.assert_equals(is_palindrome_possible(\\\"noon\\\"), True)\\nTest.assert_equals(is_palindrome_possible(\\\"azmkallbanpu\\\"), False)\\nTest.assert_equals(is_palindrome_possible(\\\"drrede\\\"), True)\\nTest.assert_equals(is_palindrome_possible(\\\"xmhwcocldjdnqvv\\\"), False)\\nTest.assert_equals(is_palindrome_possible(\\\"reparpe\\\"), True)\\nTest.assert_equals(is_palindrome_possible(\\\"jnavz\\\"), False)\\nTest.assert_equals(is_palindrome_possible(\\\"orort\\\"), True)\\nTest.assert_equals(is_palindrome_possible(\\\"mel\\\"), False)\\nTest.assert_equals(is_palindrome_possible(\\\"jdxknf\\\"), False)\\nTest.assert_equals(is_palindrome_possible(\\\"qo\\\"), False)\\nTest.assert_equals(is_palindrome_possible(\\\"neett\\\"), True)\\nTest.assert_equals(is_palindrome_possible(\\\"wow\\\"), True)\\nTest.assert_equals(is_palindrome_possible(\\\"avkkiaapiusuapspiip\\\"), True)\\nTest.assert_equals(is_palindrome_possible(\\\"aann\\\"), True)\\nTest.assert_equals(is_palindrome_possible(\\\"iivcc\\\"), True)\\nTest.assert_equals(is_palindrome_possible(\\\"akyka\\\"), True)\\nTest.assert_equals(is_palindrome_possible(\\\"eelvl\\\"), True)\\nTest.assert_equals(is_palindrome_possible(\\\"damam\\\"), True)\\nTest.assert_equals(is_palindrome_possible(\\\"mmo\\\"), True)\\nTest.assert_equals(is_palindrome_possible(\\\"ge\\\"), False)\\nTest.assert_equals(is_palindrome_possible(\\\"arrad\\\"), True)\\nTest.assert_equals(is_palindrome_possible(\\\"bq\\\"), False)\\nTest.assert_equals(is_palindrome_possible(\\\"djufyllynldw\\\"), False)\\nTest.assert_equals(is_palindrome_possible(\\\"reparpe\\\"), True)\\nTest.assert_equals(is_palindrome_possible(\\\"ttraoor\\\"), True)\\nTest.assert_equals(is_palindrome_possible(\\\"orort\\\"), True)\\nTest.assert_equals(is_palindrome_possible(\\\"asgas\\\"), True)\\nTest.assert_equals(is_palindrome_possible(\\\"t\\\"), True)\\nTest.assert_equals(is_palindrome_possible(\\\"tstsa\\\"), True)\\nTest.assert_equals(is_palindrome_possible(\\\"neett\\\"), True)\\nTest.assert_equals(is_palindrome_possible(\\\"wndnwrkpkihup\\\"), False)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,2,3,3,2,1,1,2,2,1,2,1,2,1,2,2,3,2,0,2,3,2,3,3,3,2,2,1,1,1,2,0,3,3,2,3,4,2,1,2,5,3,3,2,2,3,3,1,3,0,0,1,3,3,3,1,3,3,2,2,0,2,3,0,3,3,2,3,3,2,0,2,2,3,1,2,0,5,3,0,2,0,0,1,2,2,0,1,3,3,2,3,0,2,3,0,3,0,1,2,2,2,2,2,3,3,1,2,4,3,2,1,0,1,2],\"rators\":[\"tAF9Gf6PiGogbZuWs\",\"PXAcsKkssS2yLyDv2\",\"2innwjWqxJHo4eRGh\",\"cRpaCxYRmGcN3Nsoj\",\"Jqk2uJZZxEv5wZFze\",\"KpJj2dAHNBgKDF3XK\",\"sJWTa7iWeRoRtqJ8N\",\"dMnE8vgYgSmqJTXFB\",\"Lw8oRc5SERsuntXMo\",\"gb9rvGus2Jv7bjZSs\",\"C4QntmkYtB89GNtpd\",\"2fxapKr8XGdNeaKi2\",\"8JyqsSbN2FJXPr3cw\",\"iMHrN3Wiefh9Ame38\",\"s5M5RvgqR9BhB9JoC\",\"MgwZXHsHk6rKhFxoT\",\"ia7erHrHPvCpHP5Gp\",\"yoYQqaY6GszuTkNSs\",\"AasGs8AeX9Lcb9xJn\",\"8PwfYqoDQFThzNtvf\",\"yZvzB3qFb8pkHy4dg\",\"PytNZK9mNiRiZxPrm\",\"4CFzv558qbGcpQwc4\",\"zLqaZ66ka2YSKjTcg\",\"mDWNyaaQ9hvPCRzSd\",\"oDZaopxpPAdqWXLqz\",\"aEm3Wvj2rFYRL8Lrb\",\"cR3ibTMxLyEdDFCHY\",\"ZNnsMeNkdDhHjSrZb\",\"3Zceb8GudqAG3onG3\",\"YRstQuthRkFeBiXug\",\"vLrq4dEDMM2wd68Dc\",\"kYWb8BwpKwunQkxeX\",\"gJYuGdkXEWWmGRLzu\",\"aCNWav8S8Try9RkC6\",\"iHMehMwgYQGhGAF72\",\"nnevRfTLDpBjZZtft\",\"orFLgPDw9H5MDzmwo\",\"uzwYcrm8PvfHZR7YF\",\"J5T8gZqiZXFuFDTQ7\",\"a777e8chPvJkY3tKa\",\"EjbDDFRECrzQDkzrX\",\"DWp2uozZmattoNS87\",\"yTMYJRTaSNcdxdm3e\",\"TR5aWdDKP6iaL6mGK\",\"LQxof8pGabGuWP7Gn\",\"yv7c4H2jimSKHEjtG\",\"55RQznnuTGpsj3EXd\",\"v9KtC8YLbMWmXiW2H\",\"Ecg4m7srYGgZsb4Ck\",\"HF28xZKSLM9wEuqNg\",\"hnyhBFWwNCz9mDfSi\",\"DEDniTrstQYGounXT\",\"n2BRY9X8899dcG8Bw\",\"gSFJPsMXnqAog3Q9f\",\"jpiYk9LbC3oDg84dz\",\"iojEnnY9FsMfYzp6f\",\"Yp7uvStL97cC9fKkY\",\"zZDaXBxMzTCBhNkgL\",\"yjtdwc2AC4jA2RWtn\",\"KZ2xddpM2f9JRaryB\",\"Nb6LYPoQP6KJZt8mz\",\"hRiMXDZNAzyPd5tpt\",\"iS5BrkGLzJyPK7nKt\",\"w2HhxvSLmDhaGCAjE\",\"8fZxjQfuXw5HMSRJM\",\"qD2LrwaDrSdiybLKY\",\"DPi9QGLctq2y76KuE\",\"xn7uGNKeAwPEkP9oA\",\"rtGJ3jQy2W6DNL35J\",\"QRv96jmNaYsWkxQEG\",\"J3upzLHuEwXH7Z2hx\",\"gXTAie79kiw28tx5u\",\"cAP3n5NY64uoMwzRR\",\"oBcs8GLX2ZFLXQy8y\",\"Wpn95NqWxncQrwNgz\",\"L73mddgeEiHq9PCdu\",\"PWgzeK859suojbrRx\",\"GGdmhAvxXhqhhibJN\",\"BdnE4RS5puoxo92mA\",\"5hhihoaWrh7N8PJpX\",\"HqmxnQJM66Y57twhn\",\"rfyEkETeoS96QNH4e\",\"MpfytGFYF77emJ3cT\",\"PH32cNxBjrK4a28sn\",\"2PufnQcsHsfymufX3\",\"T6iBEE2jp7f7iEF2P\",\"gKnWjDjwrJh7MK2df\",\"974cv448kw6Wu2JF6\",\"o4ixjQGSaYqA2JoM4\",\"v74fPhegePGxCm2uk\",\"T2vhHPhRR96hRizq8\",\"8sNv5PTHa7XQ8bNqR\",\"RoGGD5cpHb4ftdLDv\",\"4Lwjr34ypKNQNQCar\",\"yod5YhKtPqw2GfG9B\",\"5ArqsxTFY7YiydG24\",\"CHvzhtXnv8HTbPQ56\",\"mvJBakQ35CWAnbbEZ\",\"AQSqD9oNv2uPfxZCR\",\"5HCu9Ydd86QgHDRNP\",\"Ds7L5bksw2QRHjrKL\",\"5kazQPq8ZdDsx6kjf\",\"BrTDhPJcACL2bsrpJ\",\"Qyfyyw6oC4EHAndzo\",\"ey3CASd6Je5LEJzfB\",\"5QN8R22z43SrwoHDz\",\"3KkyQm77zsew58Dc2\",\"rhS8qXRjZcpDXkwnE\",\"jkbavR2ATFJcpmo8M\",\"u5u2YpHXiNgzDNJdX\",\"8nE8QHnFYsHCFebte\",\"PKwPdPoC8w32T8GtP\",\"77ChWogs2J8hNYBNK\",\"suArq5BbSy7gD6xri\",\"RErqK2yM94wYyD2hk\",\"n2qKKxomPnb4zez5M\",\"9pzFiFK3ANLjQfnr2\",\"hrzGaJc9KZqgjAvew\",\"3nied3n8KG8RSNixH\"],\"total\":127,\"quality\":[5,5,5,5,5,5]},\"flags\":0},\"summary\":\"Given a word, create a function which returns whether or not it's possible to create a palindrome by rearranging the letters in the word.\\n\\nExamples\\nispalindromepossible(\\\"rearcac\\\") ➞ True\\nYou can make \\\"racecar\\\"\\n\\nispalindromepossible(\\\"suhbeusheff\\\") ➞ True\\nYou can make \\\"sfuehbheufs\\\" (not a real word but still a palindrome)\\n\\nispalindromepossible(\\\"palindrome\\\") ➞ Fa\",\"tags\":[\"algorithms\",\"strings\",\"validation\"],\"timestamp\":{\"$date\":1580661976712},\"title\":\"Palindromic Anagrams\",\"quality\":5,\"family\":[{\"_id\":\"iJpPHkrQ5FxeXZyNN\",\"language\":\"cpp\"},{\"_id\":\"a242aPZGmmx8xhiuy\",\"language\":\"java\"},{\"_id\":\"8wqJTmobdGWuQKFmy\",\"language\":\"javascript\"},{\"_id\":\"eyJ4mN6RpyiRTvSob\",\"language\":\"python3\"},{\"_id\":\"yDzdgoqQJyDzHBDBd\",\"language\":\"ruby\"}]}}"]