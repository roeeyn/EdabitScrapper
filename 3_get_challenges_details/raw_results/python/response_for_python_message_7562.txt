a["{\"msg\":\"result\",\"id\":\"2486\",\"result\":{\"_id\":\"nD9YtJvTj8LR7Kci6\",\"author\":\"Evgeny SH\",\"authorId\":\"8PwfYqoDQFThzNtvf\",\"code\":\"import numpy as np\\ndef heat_equation(**kwargs):\\n\\t\",\"difficulty\":4.857142857142857,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"Xx92i2kvCDcmWWPh2\",\"instructions\":\"In physics and mathematics, the [heat equation]( https://en.wikipedia.org/wiki/Heat_equation#Statement%20of%20the%20equation) is a partial differential equation that describes how the distribution of some quantity (such as heat) evolves over time in a solid medium.\\n\\nWrite a function that simulates the temperature distribution over time using [Finite difference method]( https://en.wikipedia.org/wiki/Finite_difference_method#Example:%20The%20heat%20equation) with Explicit scheme.\\n\\nThe input for the function is a dictionary with problem specification. The function should initialize the interior of the array to `\\\"u_0\\\"`, set the boundary values on the perimeter. The boundary values stay constant.\\n\\n```\\n# Initialize e.g. rows, cols = 5, 7\\n\\n[\\n  [100.   5.   5.   5.   5.   5. 100.]\\n  [100.  10.  10.  10.  10.  10. 100.]\\n  [100.  10.  10.  10.  10.  10. 100.]\\n  [100.  10.  10.  10.  10.  10. 100.]\\n  [100. 100. 100. 100. 100. 100. 100.]\\n]\\n```\\n\\nExecute the time simulation up to the largest value in `'n_steps': [0, 100, 200]`. Only the interior of the array changes on each time step. Save the value of temperature at observation point `\\\"observe\\\": [10, 10]` at specified time steps `[0, 100, 200]`. Return the list of temperatures, (of length 3 in this example.) Rounding is not needed, it will be done in the Tests.\\n\\n### Examples\\nThe following three problems will be simulated. First has 3 hot boundaries, second has 2, third has hot bottom. These three set ups lead to different temperature distributions as can be seen in Figure.\\n\\n![Alternative Text](https://edabit-challenges.s3.amazonaws.com/Figure-3configs.png)\\n\\n### Notes\\n- The problem is two-dimensional, (needs partial derivatives for `x` and `y`).\\n- The explicit formula is straightforward, the next `u^(n+1)` is computed directly using 5 points of `u^n`.\\n- The provided parameter `r` is less than `1/4`, thus the scheme is numerically stable.\\n- The simulation takes less than 0.5 seconds on the server.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"import time\\n\\nparams = [{'rows': 21, 'cols': 21, 'r': 0.22, 'u_0': 10,\\n           'u_down': 100, 'u_up': 5, 'u_left': 100, 'u_right': 100,\\n           'n_steps': [0, 100, 200], 'observe': [10, 10]},\\n          {'rows': 21, 'cols': 21, 'r': 0.22, 'u_0': 10,\\n           'u_down': 100, 'u_up': 5, 'u_left': 100, 'u_right': 5,\\n           'n_steps': [0, 100, 200], 'observe': [10, 10]},\\n          {'rows': 21, 'cols': 21, 'r': 0.22, 'u_0': 10,\\n           'u_down': 100, 'u_up': 5, 'u_left': 5, 'u_right': 5,\\n           'n_steps': [0, 100, 200], 'observe': [10, 10]}]\\n\\nexpected = [[10.0, 40.56, 64.14], [10.0, 29.6, 44.73], [10.0, 18.65, 25.32]]\\n\\ntic = time.perf_counter()\\nfor col in range(len(params)):\\n    solution = [round(t, 2) for t in heat_equation(**params[col])]\\n    Test.assert_equals(solution, expected[col])\\nprint('runtime = {:.6f}'.format(time.perf_counter() - tic))\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,5,4],\"rators\":[\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\"],\"total\":3,\"quality\":[]},\"flags\":0},\"summary\":\"In physics and mathematics, the heat equation is a partial differential equation that describes how the distribution of some quantity (such as heat) evolves over time in a solid medium.\\n\\nWrite a function that simulates the temperature distribution over time using Finite difference method with Explicit scheme.\\n\\nThe input for the function is a dictionary with pr\",\"tags\":[\"loops\",\"math\"],\"timestamp\":{\"$date\":1592002689224},\"title\":\"Heat Equation\",\"quality\":0,\"family\":[{\"_id\":\"nD9YtJvTj8LR7Kci6\",\"language\":\"python3\"}]}}"]