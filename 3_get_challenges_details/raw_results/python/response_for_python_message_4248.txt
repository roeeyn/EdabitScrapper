a["{\"msg\":\"result\",\"id\":\"842\",\"result\":{\"_id\":\"HnrmZxpGRoPkmZsfs\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def is_valid_date(d, m, y):\\n\",\"difficulty\":1.4042553191489362,\"editorId\":\"PXAcsKkssS2yLyDv2\",\"familyId\":\"4JYJNPcyhdkiutK9Z\",\"instructions\":\"Given the parameters day, month and year, return whether that date is **a valid date**.\\n\\n### Examples\\n```\\nis_valid_date(35, 2, 2020) ➞ False\\n# February doesn't have 35 days.\\n\\nis_valid_date(8, 3, 2020) ➞ True\\n# 8th March 2020 is a real date.\\n\\nis_valid_date(31, 6, 1980) ➞ False\\n# June only has 30 days.\\n```\\n\\n### Notes\\nTry using the `datetime` module to complete this challenge (see the **Resources** tab for some tutorials on this).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(is_valid_date(35, 2, 2020), False)\\nTest.assert_equals(is_valid_date(8, 3, 2020), True)\\nTest.assert_equals(is_valid_date(31, 6, 1980), False)\\nTest.assert_equals(is_valid_date(27, 9, 1822), True)\\nTest.assert_equals(is_valid_date(34, 7, 2008), False)\\nTest.assert_equals(is_valid_date(32, 12, 1932), False)\\nTest.assert_equals(is_valid_date(20, 3, 2019), True)\\nTest.assert_equals(is_valid_date(28, 3, 2004), True)\\nTest.assert_equals(is_valid_date(22, 5, 1962), True)\\nTest.assert_equals(is_valid_date(21, 11, 1875), True)\\nTest.assert_equals(is_valid_date(6, 12, 1982), True)\\nTest.assert_equals(is_valid_date(6, 10, 1873), True)\\nTest.assert_equals(is_valid_date(5, 6, 1852), True)\\nTest.assert_equals(is_valid_date(21, 4, 1809), True)\\nTest.assert_equals(is_valid_date(6, 15, 1969), False)\\nTest.assert_equals(is_valid_date(6, 7, 1893), True)\\nTest.assert_equals(is_valid_date(25, 4, 1826), True)\\nTest.assert_equals(is_valid_date(16, 6, 1922), True)\\nTest.assert_equals(is_valid_date(16, 10, 1803), True)\\nTest.assert_equals(is_valid_date(5, 6, 1980), True)\\nTest.assert_equals(is_valid_date(12, 15, 2018), False)\\nTest.assert_equals(is_valid_date(35, 12, 1972), False)\\nTest.assert_equals(is_valid_date(16, 11, 2028), True)\\nTest.assert_equals(is_valid_date(2, 6, 1947), True)\\nTest.assert_equals(is_valid_date(1, 10, 1904), True)\\nTest.assert_equals(is_valid_date(8, 13, 1954), False)\\nTest.assert_equals(is_valid_date(27, 14, 2012), False)\\nTest.assert_equals(is_valid_date(3, 6, 2018), True)\\nTest.assert_equals(is_valid_date(16, 3, 1992), True)\\nTest.assert_equals(is_valid_date(33, 14, 1878), False)\\nTest.assert_equals(is_valid_date(23, 10, 1841), True)\\nTest.assert_equals(is_valid_date(3, 12, 1865), True)\\nTest.assert_equals(is_valid_date(7, 14, 1901), False)\\nTest.assert_equals(is_valid_date(16, 11, 2042), True)\\nTest.assert_equals(is_valid_date(21, 1, 1837), True)\\nTest.assert_equals(is_valid_date(14, 11, 1945), True)\\nTest.assert_equals(is_valid_date(15, 9, 1913), True)\\nTest.assert_equals(is_valid_date(29, 8, 1892), True)\\nTest.assert_equals(is_valid_date(11, 15, 1936), False)\\nTest.assert_equals(is_valid_date(28, 5, 1957), True)\\nTest.assert_equals(is_valid_date(7, 4, 1864), True)\\nTest.assert_equals(is_valid_date(24, 8, 2011), True)\\nTest.assert_equals(is_valid_date(29, 15, 1930), False)\\nTest.assert_equals(is_valid_date(2, 5, 1970), True)\\nTest.assert_equals(is_valid_date(35, 6, 2013), False)\\nTest.assert_equals(is_valid_date(31, 12, 1863), True)\\nTest.assert_equals(is_valid_date(7, 14, 2026), False)\\nTest.assert_equals(is_valid_date(8, 2, 1809), True)\\nTest.assert_equals(is_valid_date(25, 4, 1996), True)\\nTest.assert_equals(is_valid_date(29, 5, 1854), True)\\nTest.assert_equals(is_valid_date(19, 7, 2034), True)\\nTest.assert_equals(is_valid_date(21, 10, 1950), True)\\nTest.assert_equals(is_valid_date(20, 10, 1926), True)\\nTest.assert_equals(is_valid_date(29, 2, 2020), True)\\nTest.assert_equals(is_valid_date(29, 2, 2019), False)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[1,1,1,1,1,1,1,2,1,1,2,1,0,0,0,1,1,0,0,1,2,1,2,1,1,0,2,0,1,1,2,1,0,1,2,1,3,0,0,2,5,0,1,0,2,2,1,1,2,1,1,2,1,1,3,1,1,2,1,0,1,5,1,1,1,2,1,1,2,2,2,2,2,2,2,1,2,2,2,2,2,2,1,3,3,0,2,2,2,1,2,2,2,2,1,2,2,2,1,1,2,1,2,3,2,1,1,2,2,1,1,2,2,2,1,1,2,1,2,1,2,0,2,2,0,2,2,2,1,0,2,0,1,1,1,2,1,2,0,2,1,0,1,1,1,2,1,1,1,1,2,2,1,1,1,3,2,1,2,0,1,2,0,2,0,1,2,1,0,3,1,3,2,1,2,2,2,1,2,1,2,2,2,1,1,1,2,2,1,2,1,2,2,1,2,2,0,0,2,2,2,2,2,2,1,2,2,2,1,1,2,3,1,2,0,2,2,0,2,1,1,1,0,2,1,1,2,2,1,2,1,1,1,1,0,2,1,2,2,1,0,2,0,0,2,2,0,1,2,1,1,2,1,1,0,2,1,2,0,0,2,2,2,0,2,2,2,2,0,0,2,2,1,3,1,2,2,1,1,2,1,1,1,0,2,1,2,1,2,1,2,2,2,1,2,2,2,2,2,2,1,0,1,2,2,3,2,1,1,0,2,2,2,1,2,2,4,2,1,2,2,1,0,1,1,0,1,2,2],\"rators\":[\"PXAcsKkssS2yLyDv2\",\"tAF9Gf6PiGogbZuWs\",\"hnyhBFWwNCz9mDfSi\",\"9Ly8afdtofp8DXzrt\",\"Yp7uvStL97cC9fKkY\",\"AasGs8AeX9Lcb9xJn\",\"N2wnZXkhDH86mgjQ8\",\"jeuoearPPTcGPgXhf\",\"ovqQRfyvmEDypjrnC\",\"aRqQ42J5zqCmBNd8w\",\"GJfqjgFShBiHSTiaP\",\"7jL3ijPqP46GJ4cfJ\",\"zg8GmMSP2LkHBtAzy\",\"d4Myxr6T992RFYJnx\",\"7tbM7oMYc5oDvD88Z\",\"C8DYtYWKLiHBZrAAR\",\"7J3QpGM4fsRcGnNPR\",\"3xMGAo7DPjfFyb3iw\",\"gb9rvGus2Jv7bjZSs\",\"yZvzB3qFb8pkHy4dg\",\"4CFzv558qbGcpQwc4\",\"2fxapKr8XGdNeaKi2\",\"jNvegJWCk5HCtEMbK\",\"sRTX3EuLwBtkGFKYZ\",\"psTwY94arhgunkRw4\",\"xqYQMujmvgQ78bnJc\",\"iGeteqZpMgjqE28yb\",\"6abffx8jQDCf7kgvb\",\"zd9FLSzsGz3evKafy\",\"MKT7khMBGXzA22ykf\",\"u5u2YpHXiNgzDNJdX\",\"u5jLXaWAKo7K4JvTR\",\"WaXbc2Sjt5s2ffgBX\",\"dHZqT6h4JMwk5fPC8\",\"csrxsMsk57AAQ5ngF\",\"CWTZqhLrZswDzDTQb\",\"C4QntmkYtB89GNtpd\",\"gP5jeJZWkRoasDRa9\",\"X74H8PYX8XYkrGRQc\",\"eLkj3Zb2DqiW4AEEh\",\"N7P4AnS8nzK4oupHv\",\"8JyqsSbN2FJXPr3cw\",\"2iFe3EHEH2YdhSKrs\",\"ffLo8fDxcS3rqPd66\",\"NfMJuiBk6FN5Jc6ow\",\"8LfTheFzvicameoz9\",\"Ycj4iTJGFyvC4bXek\",\"PSrcg6fy835R4c5CW\",\"X29Ekg7HjqHAYgCSM\",\"E9ttMPTkLkKG6nZrg\",\"mxX4rH5ELYkdZ2Mbw\",\"cR3ibTMxLyEdDFCHY\",\"C9LKGu2g5hSijvDzA\",\"HQxp7NcdvF92G7bYS\",\"rJGeRSCjGzRuYfHZS\",\"s5M5RvgqR9BhB9JoC\",\"J5T8gZqiZXFuFDTQ7\",\"vLrq4dEDMM2wd68Dc\",\"aEm3Wvj2rFYRL8Lrb\",\"mybpojPXaZigaqsAD\",\"sz8ufn9i8zeiGWpAy\",\"2QGRoQn2dRq3scu7k\",\"gJYuGdkXEWWmGRLzu\",\"HF28xZKSLM9wEuqNg\",\"8PwfYqoDQFThzNtvf\",\"7ZA3noZZ3LhNTHBcq\",\"cSMKd6Yq8Pyq8TvWR\",\"Po9EXXsKwWSHjpqrD\",\"9pzFiFK3ANLjQfnr2\",\"3Zceb8GudqAG3onG3\",\"5JFQgt6KFihmXfHKm\",\"JjJjxY8xRXaJi2Wqe\",\"Fk9kLwoG4Brf4KsKf\",\"bhH4EbA9Hdsm7gb3A\",\"7fWotxAEJ2uYdQhNR\",\"87sGsKnu5dM9NbFWz\",\"tSFYadMLQgCqx3mnM\",\"KRSKj7ikX2ytWFmod\",\"HPMiZMZ2WGu4FWaRH\",\"yN4MZCZFPQrq8AGqt\",\"9uZpgAtSuPZ7W7DL6\",\"CEd9tLdXeDeNHSzys\",\"TCaTpxjzt2x9xAL86\",\"6ua9auGaMT9WHvtgv\",\"ZNnsMeNkdDhHjSrZb\",\"So6PHm74mfJuY2WTs\",\"T2QhZRhybEKeJTb44\",\"Cc2Cgj4MWXZxsTooC\",\"mPTT5t7Mbb8y7h7wZ\",\"yKttxy9JGn5Jzwuj6\",\"jpiYk9LbC3oDg84dz\",\"RosFXZYJkcRwjkaog\",\"GM2X83qnuLXTHe5zA\",\"k5mp7Hkg8w5rwiXpe\",\"mDWNyaaQ9hvPCRzSd\",\"3b5rZGXXqwjk4hakg\",\"M8dQuMrEpP8Hc3tHN\",\"Jqk2uJZZxEv5wZFze\",\"uiEuENARwFpnNMfFs\",\"DEDniTrstQYGounXT\",\"kYWb8BwpKwunQkxeX\",\"KdNDysEsy2TW5QRJ2\",\"n2BRY9X8899dcG8Bw\",\"LWCzZ8mb8gwrRNGfq\",\"r7JXHsnJGCbRxYvDf\",\"6c4xjEdFxdYw5xGrt\",\"NsEMoXJ4nfEMtoCn8\",\"sbJcFfQjQ59Wfg4Cd\",\"P6TLoQBT6eGaZ2enX\",\"FEYpu9RWysAgW3XnP\",\"KkZNuFJFE2majZncQ\",\"DwetpbChQM4r6Gwah\",\"Nua6T3dBurBy3Qfg9\",\"di2hhADLx59Bj4ewM\",\"FzxTj4GuujhwpZM7y\",\"fYXiqjFvkQZqmjgCi\",\"ahk2qiXKJA753wAJk\",\"Ne8mK9DDHG8TRkoxG\",\"XrqNzJ2FRG8HnGiR6\",\"FRN2W8RYpJ6GPhgRy\",\"DrkR35NqnP9NDLbq6\",\"QsK4h5bfyCFgoKgsM\",\"TR5aWdDKP6iaL6mGK\",\"nfXGHENb5md7m355s\",\"dKKMvaYoJunNPk5Wa\",\"a777e8chPvJkY3tKa\",\"bCDTKAoS4biDmQ64Y\",\"yr822PZmmiDDenxpB\",\"6SKDJwXpev4qPSzgM\",\"E8TMSMSamEbBtf9Lo\",\"8BFSTCnoe2QggN64c\",\"NG8PWBSjsM8mMhQEq\",\"DxxNN37iEz7b8t2nf\",\"v9KtC8YLbMWmXiW2H\",\"YcCLwitFMAEJSnxAW\",\"pDvFWMCD9fQwoBPcu\",\"yoLy2DcMG3nZXNwv2\",\"wS2o3x4nrsadtC3xP\",\"yAPHyje4wtbfSy6nY\",\"NNE5HNRXAkmhrWgyQ\",\"2xowyNA5YsP7qRD6X\",\"3hSzE837A9SKsi5X4\",\"yYxPzFqBgtQ9fsyHM\",\"cxbQnktoNTzR9jcGe\",\"4rwxLqLs2mNZNg8NB\",\"3cF6NXq3ZEwdkgSjb\",\"kkyZ4oyYQC898Nttj\",\"RgWhcJMQRoJP6b8Wg\",\"dKtYzJHAswturm7Fe\",\"4zkChgTrb5EDzYZmd\",\"jJaNeBK4LaXGMCR6o\",\"PQwbxTEAFEhwiG7CB\",\"2ptN2mhjFwFcHyPZd\",\"d6w7S49nhKzCTWLp6\",\"w2NGhfAGohsq6WhhN\",\"TEN7AF5j6oEocKzwE\",\"H4abACFDH5t8CnnyH\",\"8TAYWzqJAkXq2MAba\",\"Wv2vJnEj8ywNmARoF\",\"eMuCpJ2spXWkJjWNz\",\"HpCdcD8g3iwJTHyCg\",\"ZrKCkX7xxGGZzauFW\",\"NzbRqGWspQnWMoDrF\",\"aPLuemxzZ5iS57NBQ\",\"CWQt5H9b4eTursntf\",\"yJmwiykSNfLv9NqJ2\",\"rfyEkETeoS96QNH4e\",\"s2ZMtR9deh6Kia7pb\",\"syRNbbPdLCGXbH2Gy\",\"KGaQqhoaLiPQNjoxc\",\"TjeuzxKBd7b4ZajSs\",\"FvFhg2wELM3SCZDZQ\",\"R4SjTgDnpigJYDLyL\",\"niM4xfdLG7YRvky43\",\"yNjkHfHESBAnCssPB\",\"iojEnnY9FsMfYzp6f\",\"uouMMdEWBuLBWPbzr\",\"uM6QQ6mE546xYRHeH\",\"Kv8GEg3aJZ9Cnxu6L\",\"Pe8vWpDHRuH9nSGKW\",\"7oMwLPd2K7hr6Nvf8\",\"iS5BrkGLzJyPK7nKt\",\"CwXsu25ygLEwQbmQC\",\"bAH58r7WHNxfiJzor\",\"zZDaXBxMzTCBhNkgL\",\"LF4CJn9GnyjBEdzop\",\"YA7SDhpgEtsqynvNL\",\"XSt47ad5D5LLZSupD\",\"3LiSLdtN58n46NEqg\",\"9CoqdidjM9KbeKnHY\",\"yAouD3PxzED8a4gap\",\"yjtdwc2AC4jA2RWtn\",\"HqmxnQJM66Y57twhn\",\"oBcs8GLX2ZFLXQy8y\",\"SkQcb2sRn4as5KpnN\",\"ta5CrWnBCRusD2WMo\",\"hkJGLuib5md8vZ9HD\",\"sX9GZp3fYyQLrBKMJ\",\"ji5f27FPz4wRRF6Ls\",\"RehJGBFS6CYiWdjZx\",\"Q9afpRu3u8zuWuzLQ\",\"6gS4E2C84vBYTYeDZ\",\"TPhfpB5tzQWSSn67n\",\"kyEERyssssTQaZ4y5\",\"3nied3n8KG8RSNixH\",\"2j3dYApeb9FZ5eP6d\",\"w2HhxvSLmDhaGCAjE\",\"i5iePG5GqhJJ8HEoB\",\"GaJNJwcdyB9ueYFst\",\"5HCu9Ydd86QgHDRNP\",\"Yxxftfc3sLWrLFkTd\",\"KLmLKaJPfsYxp42p2\",\"Ey9pB2PRqejNubQmf\",\"EMJ6uvBZkie429gdg\",\"4fhjJBvLBWh6QeSih\",\"gSFJPsMXnqAog3Q9f\",\"zfGYZ7gpR8fxJpagh\",\"sHjfbGQGLHE6JR6qu\",\"Kh3Pc2ZRusurLaMyP\",\"kNrnnMxhFZztMTBAX\",\"tpxMgkGSHwBjS95Ta\",\"DYDJTyGgKFnBRLm2r\",\"mG8HqKiAQFTdRZthG\",\"rK3xSCovoqjmkgBL9\",\"gXTAie79kiw28tx5u\",\"K3RacTvkWHLfzKF8i\",\"8WpvgSbQciTQWdd8T\",\"oXdhczMThyirgM2eN\",\"hLKjv4TP5rSXib8qM\",\"6HgMANhu6WiGyXSGN\",\"rrSC943cCKNG48sH4\",\"zvR7koBTGcaj5pJNQ\",\"QRv96jmNaYsWkxQEG\",\"dj5AyG5fWP8FdsSmZ\",\"CLypXaZksY99mpRCm\",\"8vWWL8Tx2yDai4ydm\",\"TFqRD3zervh8PT8op\",\"d8qtzoLB264iP8tdY\",\"bccs9koJxyQ9XNiLC\",\"kKy7xHSbTC8rPrx4i\",\"J3upzLHuEwXH7Z2hx\",\"cAP3n5NY64uoMwzRR\",\"uX3EL4Qha99wBkozM\",\"pJj86xc32Bs7Frxvi\",\"6MjSiiBLPcvXbXcaZ\",\"DPi9QGLctq2y76KuE\",\"RGMbFMZXJr7DhcAJy\",\"cE4rgfJr4yYT2dKsn\",\"dYPkStFnLvAMsHSzZ\",\"pduNK68oazqQTtbLp\",\"yod5YhKtPqw2GfG9B\",\"YRAzEBJoLvSaiPtYx\",\"4fjSgcqhQQZM2ZFRP\",\"CTKmXtrqDYqJBnuy8\",\"5XiuAqicKD4hBdu63\",\"oig8ig9SE9RZa8ttL\",\"oyKcm3zqdy8Ko5P5d\",\"8aEGGQPkGesWwoaom\",\"AJexRBN9cYQmqvYu6\",\"bz883xR7WdSKXxjwY\",\"C2AfMipCicfD58WJ9\",\"3pxHTZBsv7MKzFG6Y\",\"DpnYcMphntjsQ96qg\",\"HuNF3xTBzmatyGSTm\",\"o4ixjQGSaYqA2JoM4\",\"wjc4iejpErBhxWwHo\",\"ga7aTTEThzsELuC2j\",\"g9FyJ8yeT9ic97Qp2\",\"cZccqzRQ9GgjQF6Az\",\"ZyrfhDTZHb8LymH5b\",\"KDfmGkQoajgNwwAm3\",\"2EbDCCJJvCfKkbYia\",\"DqNQn9Jsxcu5HijKE\",\"WdKdsgH9gXkKgCycx\",\"nJXgbSQozcoE8Wn4N\",\"5zGMciq3fB4aeu9uj\",\"sbKQ3pGDgv9BjxzDW\",\"xumt4h8jvh7o4xkhr\",\"GtWPwFmkp8TiobSN6\",\"iF4tdvn5sA9CM4T6T\",\"Lg4t6SEWgtYz4u7Cj\",\"GGdmhAvxXhqhhibJN\",\"p7js9trz2zk2RorCR\",\"nmMiWvyJKp6nZEpve\",\"5S9nX4rKsnCcnv4Cz\",\"axdSNLZpiCDF8RS6n\",\"7N6c3Xu244bnQWjBs\",\"EXbD3ZjgP9oaoFLYw\",\"33boaDzGiY28bCDy6\",\"5HTSi5wQNAdLm57LB\",\"srJ34BaybkQh3qRkM\",\"DHghRMdMFbnwMj7WW\",\"Ds7L5bksw2QRHjrKL\",\"LPGPHgJc8MkvcEDBc\",\"mQjpf5TyF358J8Anz\",\"nFbmNzMQ38TncmfQX\",\"xK6h7xJcMm9h9Nekd\",\"JLQLosczQ5MquJoL8\",\"q9FfWNiMDKRiaCJ5j\",\"dQd664XYR6QKHFvHW\",\"9ivvGvJGvtQfigQaZ\",\"YmMgWhzhHhQLmGGgH\",\"nc7bRhkxgKyqusYe3\",\"q6QsMYNMpPNtmyTeW\",\"zgoEhAyhrjnsSLPGw\",\"CHvzhtXnv8HTbPQ56\",\"T2vhHPhRR96hRizq8\",\"pPpmP7xeJzGgK362R\",\"eYfPWvZwnJQkHbSTK\",\"KBxTPknCRmB2b5y3i\",\"jL4y5fTJAMBjhZmko\",\"qAby4AWXmTNeusvg3\",\"XD5nmvKQchKezPXhy\",\"T6iBEE2jp7f7iEF2P\",\"2HfNkb2SoqdyjKW3o\",\"BrTDhPJcACL2bsrpJ\",\"sKfrD9gjCDHuqLzSk\",\"AQSqD9oNv2uPfxZCR\",\"Fb2wehA7QgTFWry2x\",\"AFfw7cGg83uYk2Miy\",\"BJp2WkwLWGHHB5oQW\",\"jWbd7SYDzLPjc9EDh\",\"yyo6YLQN2of6fxp49\",\"dJzNF59j2p8jWZxiQ\",\"Wpn95NqWxncQrwNgz\",\"GTKsdeEihE636Le9i\",\"aZCgNx7zoNiCQNuqf\",\"2PufnQcsHsfymufX3\",\"c2q7mY39z5JPEMCaM\",\"uGuS9YRXW2nj4p6zf\",\"X4rzfxGgxx6CS7Bpz\",\"PC3pLs36zNzpRDSuE\",\"9bQyb6rW7xfE4vgrR\",\"ghMkPtdFCpM6w8nax\",\"CKHKhvJcq9jNMqrmd\",\"RoGGD5cpHb4ftdLDv\",\"QFZcdxGKBaFZb7Zbk\",\"mvJBakQ35CWAnbbEZ\",\"fAWEFyQMvK6Eqxq4t\",\"CdCWJ2i5JnYwSuGoc\",\"WQubx7DAkG6WZE8FA\",\"w3QDkmjZj2dAFDsjq\",\"ZXWDtCrM9ev3439oi\",\"R6YxHWAiLgKwy5YvC\",\"wwMcJQRvf3X59Jyev\",\"StNu7DPyTgEStZsMY\",\"EfxwqhYdapX3dMQC2\",\"J23RcmzbdtBbPCTjT\",\"4RY3zj9C2t8GGefhi\",\"93ADqsBQnwTEosjbq\",\"fKzJMR2LLbiRtGetj\",\"YXQvrgeiGzLd6cTW9\",\"etoxSpG4fGKThLozM\",\"hR7GMiqGap4CzEWSy\",\"T6Rm8mREPMZSftzrC\",\"ctbThYbufFCYbRK4f\",\"NGvCPuMiAP3xrRLfB\",\"Afnps7TJQuS9sipMb\",\"4TmgHkn5vqyHK3sYC\",\"796v8eRqahP6wpLdL\",\"pQwhNKiCne4gEZgcn\",\"jkbavR2ATFJcpmo8M\",\"iBHx7eL6anoBnF7yQ\",\"jEAnBsQdgchcEK8M8\",\"PH32cNxBjrK4a28sn\",\"PTDFuxAzou7W6asWt\",\"7ajSwbNMNp9ggPewT\",\"d9LBRxvADNBB5QJMB\",\"hpT9yYe5R45poHrYR\",\"dSd7wHgXGQeG5BQ2P\",\"3KkyQm77zsew58Dc2\",\"AMpQSjKsRqhCDyS2j\",\"4Lwjr34ypKNQNQCar\",\"QWjsXnLaJ7xfL3Amq\",\"wFucsxkob2fST5KxD\",\"rCrbqMiaGPgHYTNxu\",\"TCvpT4EPb8qNssNB7\",\"B4y8aoyXJtskYPFEL\",\"Qyfyyw6oC4EHAndzo\",\"8uiLiJcmWxWe6qw65\",\"5QN8R22z43SrwoHDz\",\"ey3CASd6Je5LEJzfB\",\"qB6KSTYC6H2TQEQY6\",\"xjyixzXzqqqTfJARd\",\"eW9R2SCoYnY8HBAdL\",\"vCeeMuYDbz3MB4vsk\",\"Hu4SkoNyWCP4vmsZE\",\"rDgKHd6ZSSpboiAj7\",\"vAbK8sCfKyFC78HYg\",\"ruzwBPphPDRgLXdnP\",\"Wi4H6ayKsNDWWQCG5\",\"rGpPd6PvpzLaqps4g\",\"RfbjShbg8jmhyNtJh\"],\"total\":424,\"quality\":[5,5,5,5,4,4,4,5,5,5,4,5,3,5,5,5,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,3,2,5,4,5,5,5,5,5,5,5,4,5,5,5,5,5,5,5,5,5,5,5,4,4,3,4,5,5,5,5,5,5,5]},\"flags\":1},\"summary\":\"Given the parameters day, month and year, return whether that date is a valid date.\\n\\nExamples\\nisvaliddate(35, 2, 2020) ➞ False\\nFebruary doesn't have 35 days.\\n\\nisvaliddate(8, 3, 2020) ➞ True\\n8th March 2020 is a real date.\\n\\nisvaliddate(31, 6, 1980) ➞ False\\nJune only has 30 days.\\n\\nNotes\\nTry using the datetime module to complete this challenge (see the Resources t\",\"tags\":[\"dates\",\"validation\"],\"timestamp\":{\"$date\":1583700059233},\"title\":\"Impossible Date\",\"quality\":4.666666666666667,\"family\":[{\"_id\":\"dhRtmeFcjGcD7yvHA\",\"language\":\"javascript\"},{\"_id\":\"HnrmZxpGRoPkmZsfs\",\"language\":\"python3\"},{\"_id\":\"N93ZGcukit9CbXjBL\",\"language\":\"ruby\"}]}}"]