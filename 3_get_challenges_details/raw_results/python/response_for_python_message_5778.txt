a["{\"msg\":\"result\",\"id\":\"1601\",\"result\":{\"_id\":\"ivWdkjsHtKSMZuNEc\",\"archived\":false,\"author\":\"Sri\",\"authorId\":\"LHrP2f8FsWBKm4run\",\"code\":\"def find_shortest_words(txt):\\n\\t\",\"difficulty\":2.1085526315789473,\"familyId\":\"D2iaz8WpnXHDFWg5g\",\"instructions\":\"Create a function that accepts a string as an argument. Find its shortest word(s) and return them as a list sorted alphabetically (if there are multiple shortest words).\\n\\n### Examples\\n```\\nfind_shortest_words(\\\"I think the solution is fairly obvious.\\\") ➞ [\\\"i\\\"]\\n\\nfind_shortest_words(\\\"Chase two rabbits, catch none.\\\") ➞ [\\\"two\\\"]\\n\\nfind_shortest_words(\\\"We become what we think about.\\\") ➞ [\\\"we\\\", \\\"we\\\"]\\n\\nfind_shortest_words(\\\"The quick brown fox jumped over the lazy dogs back.\\\") ➞ [\\\"fox\\\", \\\"the\\\", \\\"the\\\"]\\n```\\n\\n### Notes\\n- Periods, commas and other special characters don't count as part of a word's length.\\n- Remember to sort the list of words alphabetically before returning your result.\\n- Return words in lowercase only.\",\"lab\":\"Test.assert_equals(find_shortest_words(\\\"Strive not to be a success, but rather to be of value.\\\"), ['a'])\\nTest.assert_equals(find_shortest_words(\\\"You miss 100% of the shots you don't take.\\\"), ['of'])\\nTest.assert_equals(find_shortest_words(\\\"Life is what happens to you while you're busy making other plans.\\\"), ['is', 'to'])\\nTest.assert_equals(find_shortest_words(\\\"We become what we think about.\\\"), ['we', 'we'])\\nTest.assert_equals(find_shortest_words(\\\"The most common way people give up their power is by thinking they don't have any.\\\"), ['by', 'is', 'up'])\\nTest.assert_equals(find_shortest_words(\\\"The best time to plant the tree was 20 years ago. The second best time is now.\\\"), ['is', 'to'])\\nTest.assert_equals(find_shortest_words(\\\"Your time is limited, so don't waste it living someone else's life.\\\"), ['is', 'it', 'so'])\\nTest.assert_equals(find_shortest_words(\\\"You can never cross the ocean until you have the courage to lose sight of the shore.\\\"), ['of', 'to'])\\nTest.assert_equals(find_shortest_words(\\\"There is only one way to avoid criticism: do nothing, say nothing, and be nothing.\\\"), ['be', 'do', 'is', 'to' ])\\nTest.assert_equals(find_shortest_words(\\\"The only person you are destined to become is the person you decide to be.\\\"), ['be', 'is', 'to', 'to'])\\nTest.assert_equals(find_shortest_words(\\\"What lies behind us and what lies before us are tiny matters compared to what lies within us.\\\"), ['to', 'us', 'us', 'us'])\\nTest.assert_equals(find_shortest_words(\\\"If you are depressed you are living in the past. If you are anxious you are living in the future. If you are at peace you are living in the present.\\\"), ['at', 'if', 'if', 'if', 'in', 'in', 'in'])\\nTest.assert_equals(find_shortest_words(\\\"Happiness depends upon ourselves.\\\"), ['upon'])\\nTest.assert_equals(find_shortest_words(\\\"Chase two rabbits, catch none.\\\"), ['two'])\\nTest.assert_equals(find_shortest_words(\\\"Only the truth of who you are, if realized, will set you free.\\\"), ['if', 'of'])\\nTest.assert_equals(find_shortest_words(\\\"If you end up with a boring miserable life because you listened to your parents, your teacher, your priest, or some guy on television, then you deserve it.\\\"), ['a'])\\nTest.assert_equals(find_shortest_words(\\\"To accomplish great things, we must not only act, but also dream; not only plan, but also believe.\\\"), ['to', 'we'])\\nTest.assert_equals(find_shortest_words(\\\"A tiger doesn't lose sleep over the opinion of sheep.\\\"), ['a'])\\nTest.assert_equals(find_shortest_words(\\\"Kindness is a language that the deaf can hear and the blind can see.\\\"), ['a'])\\nTest.assert_equals(find_shortest_words(\\\"Being realistic is the most common path to mediocrity.\\\"), ['is', 'to'])\\nTest.assert_equals(find_shortest_words(\\\"Bravery means finding something more important than fear.\\\"), ['fear', 'more', 'than'])\\nTest.assert_equals(find_shortest_words(\\\"Can you imagine what I would do if I could do all I can?\\\"), ['i', 'i', 'i'])\\nTest.assert_equals(find_shortest_words(\\\"Believe you can and you're halfway there.\\\"), ['and', 'can', 'you'])\\nTest.assert_equals(find_shortest_words(\\\"Remember that happiness is a way of travel, not a destination.\\\"), ['a', 'a'])\\nTest.assert_equals(find_shortest_words(\\\"May the best day of your past be the worst day of your future.\\\"), ['be', 'of', 'of'])\",\"language\":\"python3\",\"summary\":\"Create a function that accepts a string as an argument. Find its shortest word(s) and return them as a list sorted alphabetically (if there are multiple shortest words).\\n\\nExamples\\nfindshortestwords(\\\"I think the solution is fairly obvious.\\\") ➞ [\\\"i\\\"]\\n\\nfindshortestwords(\\\"Chase two rabbits, catch none.\\\") ➞ [\\\"two\\\"]\\n\\nfindshortestwords(\\\"We become what we think about.\",\"tags\":[\"loops\",\"regex\",\"strings\",\"language_fundamentals\"],\"timestamp\":{\"$date\":1494520929609},\"title\":\"Find the Shortest Word(s) in a Sentence\",\"stats\":{\"completed\":{\"total\":334,\"ratings\":[2,2,2,2,2,1,1,1,1,1,1,1,1,2,2,3,1,1,2,1,2,3,2,1,2,2,1,0,1,2,2,3,1,2,2,2,2,2,3,2,1,2,1,2,0,2,3,2,1,2,2,2,2,2,1,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,1,1,2,3,2,2,2,2,1,4,2,2,2,3,3,2,2,1,2,1,1,3,2,0,1,2,1,2,2,1,2,3,2,2,3,3,5,2,2,2,3,2,2,2,3,2,3,3,3,2,3,2,2,2,3,3,1,2,0,2,3,2,3,3,3,3,2,3,2,2,2,2,3,2,3,2,2,2,3,3,3,4,3,3,2,3,3,2,3,3,3,3,3,2,3,3,2,3,3,3,3,2,3,2,3,3,1,2,2,2,1,3,0,2,2,1,3,2,1,3,2,2,0,0,2,2,2,3,0,1,3,2,3,2,0,3,2,3,2,2,0,2,2,2,3,3,3,3,2,3,3,3,0,2,2,3,3,0,3,2,3,3,3,3,3,3,1,1,3,2,2,3,3,2,2,3,2,2,1,1,5,2,2,1,0,3,3,1,2,3,0,3,3,1,3,3,2,3,3,3,3,3,2,0,3,1,2,3,3,1,2,2,3,4,3,2,2,3,2,2,3,2,3,3,3,0,0,2,3,3,3,1,2,0],\"rators\":[\"LHrP2f8FsWBKm4run\",\"65dbBZynphj53nXqA\",\"6fJpRpAgiWD5zX9qB\",\"hi7Hvtq2mJfkXEGF2\",\"kTgH8KfKoQAnKL9pq\",\"v3LTSGvpkXAdu3r2Q\",\"MNNxtLjCPkedM7MFo\",\"6kngJP2suW9LWJBTR\",\"YZsZjfvd3PnLhDJrR\",\"CWTZqhLrZswDzDTQb\",\"yh7uB3NycmvCowCSv\",\"K7YC4t7QgTqnJvi5m\",\"AgBoEoyrNKReSz9uG\",\"JzcuZQNK6GD4B4pwB\",\"dAe4nADmGE2yjASLr\",\"W3s5joDdNgqFB3cMo\",\"S46hCMLErzLzeioFJ\",\"3K7Qd3drCnJLCow4w\",\"dhMk9KpvQfHCqo8dx\",\"f58msSwqxW4KGgT4j\",\"fbNWxXTqZy2mXNbGJ\",\"YEjBtnEzEWNn67QZ8\",\"5JLH29PSSii5bsAhm\",\"RtEdsmRHH4RwHHopp\",\"95vqAcqExYNBEmBfD\",\"KEQ7kEDJaAaD6CXcz\",\"4dhQmPspdCofQD3DF\",\"8ChsBXeijzcnr6SiX\",\"xBqnMCkCDaDuqFia4\",\"Z8kAZW5QPX9wQMSES\",\"RbH5qgqQxL97gcGx7\",\"7KvPvzkX8uxH7pjo7\",\"pu7CuLPebkd5NEfKw\",\"Wg8kg48vmdpCaSHH6\",\"fbT7g9ejE3HC7ffSK\",\"8R9GdggbMGmfqjpJi\",\"HK3RW4kr7acFSAyL4\",\"tuyDaJzFy78jxvhCY\",\"iEMnJaXXfa6dzdQzb\",\"HfXaiByRyvX5G5smB\",\"5JXnPbYC8RuBG6FkM\",\"QiKGftY3qFAsv8GCG\",\"qNK48yvocYbK2qDAC\",\"ZxF3LkWqeo4fe4ziK\",\"QjpzasKxy3xBakLzz\",\"GRZzKCbeb4xKHFCrZ\",\"LfR9Bopm57BMNNnkp\",\"mqXfzC24CdThpCaGd\",\"m2iiZZHTpzHcEKJMn\",\"WKsvry6M74GDrtqHQ\",\"tEZYGGHp8ux3TrPy6\",\"PwHLy9Fe5uctkKote\",\"mgJoduE8pStdjNmPD\",\"pdcaC4fEtsubBz4Wo\",\"3aSufMRSzHQ3cuo9n\",\"jDoFYBX4iQiTXFEdf\",\"EkzdBDwB28zgfpLku\",\"5f8x8WgpAPxfx9ZKo\",\"fGsnj3XEufkYDBWE7\",\"mCMD9CNp9rA7tbYoB\",\"wPhd86JGzcCkkQdyy\",\"wTpsQ2SdXt98yKkk2\",\"j9gg82Bp2L7nw7DyJ\",\"HQ22rsRQRSgBc2uPy\",\"uXv7xJTaJBTeQF2gy\",\"bFzKdzd8Aj3XvcpdY\",\"YG776yzpLWoxa5GJs\",\"tAF9Gf6PiGogbZuWs\",\"z9FqvdkSb7hYJ63p5\",\"3hnNN45MzxXW7uPR8\",\"7CwgH38hHpiGdu2zT\",\"THD2EHgtJa2ooivJK\",\"M8jrv2FfpMQp9Qzpx\",\"Qm7WibLuCP7hW3iXi\",\"nZ58gDWFhqXiZpmZQ\",\"jeuoearPPTcGPgXhf\",\"sugzbfJyLjWxmx2pq\",\"T82JyZFPNz8maF8f8\",\"QgdwHjy4x6MCPwfh9\",\"SK3kJggzuets9AFj6\",\"cBCgxKeWmdcPwz4MH\",\"HZZobau82wPmkwYyu\",\"nc7bRhkxgKyqusYe3\",\"RsX6W2ddWM8ajHzss\",\"34AaThtHr3bbYm7j7\",\"uJ5A3zjLi9iN5eeXX\",\"PAjQoyYKAkYAXERhf\",\"Nj6FwgBtAXsaQwsM2\",\"aTNWfAYfTZn2Ejn63\",\"xQ7uLC6QTtEyKENv9\",\"n9PZCXcWTygjaDsXs\",\"FHzvDACEZuAjRwL7v\",\"hR7GMiqGap4CzEWSy\",\"TJQcScCtNRobD8P4k\",\"RS7z6xJFR4ZAx6zZA\",\"q5s7yTnMdEoeXRTnH\",\"zgoEhAyhrjnsSLPGw\",\"nusQQTi9vR569v4b5\",\"83i7PKDRGfBw5DLst\",\"ArC3TpnruJnWYDzHM\",\"6W2GSzrYjMD9ANBFY\",\"8JyqsSbN2FJXPr3cw\",\"vwmjqntQ9FvszKRye\",\"z7KAn4vEJTcrDKaum\",\"DngKYE9GzXrRNyCPr\",\"gb9rvGus2Jv7bjZSs\",\"mGmoXwXiopnnnqYdh\",\"PRPv763woB2EqjWvZ\",\"qvEvDcL32a5F4Tg6c\",\"Jqk2uJZZxEv5wZFze\",\"j3XimmYb3NEL5gLxX\",\"S2JLiWh6P3Z3QfSGn\",\"p6MPFLtmJ2z8EQT4Q\",\"SKabuq5XuhXBugKBa\",\"qaR8DnWrTk8Mus5Q2\",\"Wf6AF7TuNwEobxuW6\",\"W2RBjMJ9KQPg4tjNZ\",\"jpEzGeo2tPtZbgbay\",\"XjC9ivzaAxfcFiSGj\",\"yZvzB3qFb8pkHy4dg\",\"N9ut74w8QbhN4YX78\",\"Q5ysDbmcMtjmcKMNa\",\"c7MnTtsQvL3atT7NT\",\"hsrNYf3WbexXJKhCq\",\"efWYnYAMeczjDFnAt\",\"sZrxCumhG8rEaLcMZ\",\"X9NeqaKpfykoscpYr\",\"nN5iAnMzdgLLZLosm\",\"vH5ky4S9isLZTQ6ph\",\"M2k5STtKaQx6tsgWe\",\"4HC75a4BAtjSd8jPv\",\"XBmvGz2a28Wtuhj3N\",\"T3ZAuoMrJjvZwN55B\",\"f95dYxGPhByxjczFH\",\"yrmiF5oKPR5rQYCRJ\",\"H55ZNxHs5qA8RnuMi\",\"KMkKtd2ymjmSx6Adi\",\"cF8nvyGwfFKE5b2iy\",\"kQH5b8MXJunh84Czq\",\"dYapmohpRwjkdGCTr\",\"QzqL4jkcY4BMmNuS8\",\"5J4tAkdA45c76xAfk\",\"ab7BsQuhDo3QgE6bh\",\"B8YwFpo5GupjWPydB\",\"FikSPhcrHBpQ4CyGC\",\"P59rek6gvwTzHvRYa\",\"Y3KkPrBzMBgMiqaQ6\",\"9Gf6g4fuKc3uou9w2\",\"GMbZRE4gvgfkDxSvY\",\"MXjxGML2X75x64vJo\",\"CioWqrzmDwyunW5zS\",\"wcjknenWdPRhrRScv\",\"6fwzAwFY549EuSvms\",\"4fQSjCThZyxYGfyHf\",\"QaE2QnnBbzdiExxPH\",\"4kJMafuJWxzhDht2w\",\"7g3vZaQXhLpxrajyg\",\"AjuDXvyD5buuJZ8Bs\",\"pkZ2pAaDxWo6Nwur4\",\"n9ujWJ5WfsP7vhgnK\",\"iyZcWmYpoZM469SAx\",\"EKjBJc6wPe3sJfx7H\",\"StJwhPFkevcqZ9swQ\",\"wSC3ZqHpPwKqc5oxr\",\"ahWFxnaxt9bXSA4f3\",\"5zWfcrt3BMnyQRaDY\",\"Mb5sjE2qnvjL2xcBG\",\"PFjMZGHNAPTkgd7tq\",\"smJ26ec3EE6voFb9d\",\"TzKWLbEFMHuwuEmAt\",\"KruzMuPcbuBw8E2CR\",\"tHEH9MBHBAGvhgJGd\",\"AF6LgdKhEdzwgRJom\",\"c89SxuYYjfeRh4toG\",\"C9LKGu2g5hSijvDzA\",\"BFNm9gacwba9KyLFW\",\"TNMAJidLpPdH4kmBv\",\"8XsRumStNMNzPg6CQ\",\"6u7yc9m6HuHGbHzph\",\"aXCm9vWqKwL9XFYoj\",\"yrCNkFYQBEDE76eFS\",\"jHrtWDGBhkbuWa7fG\",\"WkWyq9wMkZhXB6zsD\",\"AYaEkTWLMmfzpwejr\",\"tADjEJQCYFvZtjPKS\",\"sPkiKqgdEPawiNWrK\",\"cR3ibTMxLyEdDFCHY\",\"N2wnZXkhDH86mgjQ8\",\"T2vhHPhRR96hRizq8\",\"gMJhLdyw3tH7L96X2\",\"3PeNuwMT9ad7ZhJkQ\",\"XKi8iZXBCHCaebSHh\",\"2fxapKr8XGdNeaKi2\",\"fAoLuqbGvHn4w2PHf\",\"otXtuQygbcYATMZoP\",\"Jg8ZSRXe3NoDMCqGu\",\"eTJ2d4bBsweJakyRj\",\"oqGkxvASXq52iTDvp\",\"78D8EBdJesQZRwFt6\",\"W2wFFFx9pqgwmkFi3\",\"v9KtC8YLbMWmXiW2H\",\"qBaLGrm952ii9K23M\",\"t6bXCX76smm7B3bEN\",\"8aPJNKDxXq7884eJb\",\"nL6EAKGywddR3mBs3\",\"AbrJ8hMyv5fFXG6DN\",\"yoYQqaY6GszuTkNSs\",\"s5M5RvgqR9BhB9JoC\",\"C4QntmkYtB89GNtpd\",\"JKb5rhL6DKcCAypF9\",\"K96FwtfDDN5WM4Bb7\",\"yKttxy9JGn5Jzwuj6\",\"8PwfYqoDQFThzNtvf\",\"6ShafRStcvew4GfCh\",\"cRpaCxYRmGcN3Nsoj\",\"vgTvCCxgvbCTDvaRT\",\"2innwjWqxJHo4eRGh\",\"wZoxzQDbso9SMAPkY\",\"Z85ajWfZ4jDPkbvR4\",\"AasGs8AeX9Lcb9xJn\",\"sbJcFfQjQ59Wfg4Cd\",\"pmgFEciNrd3ES9tuu\",\"4CFzv558qbGcpQwc4\",\"zg8GmMSP2LkHBtAzy\",\"GNcCEduB4wpC9K6ZQ\",\"aEm3Wvj2rFYRL8Lrb\",\"aCNWav8S8Try9RkC6\",\"WLFPvm65aHfgwQy7N\",\"sJWTa7iWeRoRtqJ8N\",\"PytNZK9mNiRiZxPrm\",\"Z4Wd4iFu5mdjSJDSA\",\"9HGQi3fFSH7PNu8ah\",\"ZNnsMeNkdDhHjSrZb\",\"55RQznnuTGpsj3EXd\",\"mDWNyaaQ9hvPCRzSd\",\"3Zceb8GudqAG3onG3\",\"6ZapS9L6t66jQCqxA\",\"wT5gGgvjKc5wz59AQ\",\"kYWb8BwpKwunQkxeX\",\"YRstQuthRkFeBiXug\",\"EjbDDFRECrzQDkzrX\",\"gJYuGdkXEWWmGRLzu\",\"Yp7uvStL97cC9fKkY\",\"7Rx2RQ75jeotKgdyh\",\"orFLgPDw9H5MDzmwo\",\"3pxHTZBsv7MKzFG6Y\",\"J5T8gZqiZXFuFDTQ7\",\"KdNDysEsy2TW5QRJ2\",\"n2BRY9X8899dcG8Bw\",\"Sj4iamMmNvxwWJBiF\",\"4rwxLqLs2mNZNg8NB\",\"ekQh3jzgGLsEMbKo3\",\"qS5Xbh5sBC28e6j7E\",\"HF28xZKSLM9wEuqNg\",\"yr822PZmmiDDenxpB\",\"9pzFiFK3ANLjQfnr2\",\"586FdBhazpwJfnRYR\",\"DQskEvAv5KiJDPtGF\",\"rgvAJFwfCeYoYnFTK\",\"m6D2RuQJwrAK6WB3v\",\"hnyhBFWwNCz9mDfSi\",\"TZksnEQisQ6WoCrdx\",\"MKT7khMBGXzA22ykf\",\"knEz9y3xqhP3oY4sf\",\"hab8YixsXxe4CcZpP\",\"WtmcimMC2rKjaZho2\",\"Bgo3RsQ5kzX4AvmXA\",\"x4dfavjLEcrvAF3QQ\",\"R4SjTgDnpigJYDLyL\",\"cykCKNJcqFBxz4T8s\",\"iojEnnY9FsMfYzp6f\",\"W5TajitmCyxz87zAC\",\"zZDaXBxMzTCBhNkgL\",\"sX9GZp3fYyQLrBKMJ\",\"CwXsu25ygLEwQbmQC\",\"yjtdwc2AC4jA2RWtn\",\"Pe8vWpDHRuH9nSGKW\",\"KZ2xddpM2f9JRaryB\",\"f2BoqyCpgnmjEjLqx\",\"Ecg4m7srYGgZsb4Ck\",\"QxNHN5DHfe97xarhE\",\"mG8HqKiAQFTdRZthG\",\"iS5BrkGLzJyPK7nKt\",\"8fZxjQfuXw5HMSRJM\",\"gMjAMD8XPK9sbx7eT\",\"QRv96jmNaYsWkxQEG\",\"DPi9QGLctq2y76KuE\",\"WqKwdFnrSyvBCen9S\",\"xn7uGNKeAwPEkP9oA\",\"rGpPd6PvpzLaqps4g\",\"shdSrDq5ZKqfpgjmu\",\"dkcmCKwqApX5jBggc\",\"J3upzLHuEwXH7Z2hx\",\"6MjSiiBLPcvXbXcaZ\",\"oBcs8GLX2ZFLXQy8y\",\"PWgzeK859suojbrRx\",\"cAP3n5NY64uoMwzRR\",\"qAby4AWXmTNeusvg3\",\"GTKsdeEihE636Le9i\",\"GGdmhAvxXhqhhibJN\",\"bvmTE46bfcM4ogj34\",\"8ZQcS3dPw3wepGBd4\",\"eHcgvkTGsH7ZziqBo\",\"H9KZi2cjt4FwH7qog\",\"PC3pLs36zNzpRDSuE\",\"AFfw7cGg83uYk2Miy\",\"fbr22rabEJMfBp7vD\",\"T6iBEE2jp7f7iEF2P\",\"gKnWjDjwrJh7MK2df\",\"o4ixjQGSaYqA2JoM4\",\"JhX7jvtpwNyxcc39m\",\"yod5YhKtPqw2GfG9B\",\"2PufnQcsHsfymufX3\",\"8sNv5PTHa7XQ8bNqR\",\"nkH3HfJXLMNcBMM79\",\"CHvzhtXnv8HTbPQ56\"],\"quality\":[5,5,4,5,2,4,5,5,4,5,5,5,5,5,5,5]},\"complaints\":{\"total\":1,\"reasons\":[[\"bug\"]],\"skippers\":[\"LHrP2f8FsWBKm4run\",\"FRHSSMZegbHzaKFbW\"]},\"instructions\":{\"score\":0,\"voters\":[]},\"tests\":{\"score\":-15.95,\"voters\":[\"iEMnJaXXfa6dzdQzb\",\"PwHLy9Fe5uctkKote\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.625,\"family\":[{\"_id\":\"WSmaJEJqxzXkqyzMj\",\"language\":\"cpp\"},{\"_id\":\"mYJPkSLLxWthSffR6\",\"language\":\"javascript\"},{\"_id\":\"24EMPJEyM4uPuTf8X\",\"language\":\"php\"},{\"_id\":\"ivWdkjsHtKSMZuNEc\",\"language\":\"python3\"},{\"_id\":\"zrJvcSGqwuySgrv9u\",\"language\":\"ruby\"},{\"_id\":\"ARqb7EMoSKyZQfEPY\",\"language\":\"swift\"}]}}"]