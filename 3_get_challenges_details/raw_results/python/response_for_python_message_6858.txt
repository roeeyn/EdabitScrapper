a["{\"msg\":\"result\",\"id\":\"2137\",\"result\":{\"_id\":\"T4q8P8cxvBtaLPW4q\",\"author\":\"ChrisCrossCrash\",\"authorId\":\"3SKmXhcLPPkmQhjip\",\"code\":\"def extract_primes(num):\\n\\t\",\"difficulty\":3.1966666666666668,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"czuWaSLo7tDvJpnq2\",\"instructions\":\"Create a function that takes an integer argument and returns a list of prime numbers found in the decimal representation of that number (not factors).\\n\\nFor example, `extract_primes(1717)` returns `[7, 7, 17, 17, 71]`.\\n\\nThe list should be in ascending order. If a prime number appears more than once, every occurrence should be listed. If no prime numbers are found, return an empty list.\\n\\n### Examples\\n```\\nextract_primes(1) ➞ []\\n\\nextract_primes(7) ➞ [7]\\n\\nextract_primes(73) ➞ [3, 7, 73]\\n\\nextract_primes(103) ➞ [3]\\n\\nextract_primes(1313) ➞ [3, 3, 13, 13, 31, 131, 313]\\n```\\n\\n### Notes\\n- All test cases are positive real integers.\\n- Some numbers will have leading zeros. For example, the number `103` contains the prime number `3`, but also contains `03`. These should be treated as the same number, so the result would simply be `[3]`.\",\"lab\":\"Test.assert_equals(extract_primes(1), [])\\nTest.assert_equals(extract_primes(2), [2])\\nTest.assert_equals(extract_primes(3), [3])\\nTest.assert_equals(extract_primes(13), [3, 13])\\nTest.assert_equals(extract_primes(101), [101])\\nTest.assert_equals(extract_primes(313), [3, 3, 13, 31, 313])\\nTest.assert_equals(extract_primes(10234), [2, 3, 23])\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[4,4,4,4,4,4,2,2,3,4,3,3,5,4,4,2,4,3,5,3,5,5,2,0,3,2,5,2,3,5,5,0,2,0,5,4,0,5,5,2,1,4,3,1,3,4,5,1,3,3,3,2,3,3,5,2,0,5,3,3,1,4,1,5,3,2,5,1,3,3,4,0,2,3,2,5,0,3,2,3,5,5,4,4,4,2,3,4,3,3,5,3,2,3,2,0,5,2,5,4,5,5,2,3,0,2,3,5,2,5,4,2,2,3,5,5,5,5,0,4,5,4,4,5,2,4,0,3,2,3,5,3,5,2,3,3,4,4,3,4,5,4,3,2,5,3,3,2,5,5,2,5,5,1,5,5,5,0,5,4,0,4,2,2,3,4,2,2,4,3,5,2,4,3,1,4,1,0,3,1,2,1,2,5,2,5,2,5,2,5,5,5,3,2,2,3,5,4,5,4,2,3,4,1,5,0,2,5,3,2,2,5,2,0,2,4,2,4,5,5,5,5,3,3,1,1,3,0,5,5,5,5,3,5,5,0,3,0,1,5,3,5,5,3,0,5,5,5,5,0,3,2,3,4,5,4,5,2,3,3,5,5,5,4,5,2,4,4,4,1,0,4,5,5,4,3,0,3,5,4,3,5,1,1,5,3,1,2,5,4,2,3,3,5,3,5,2,3,4,0],\"rators\":[\"tAF9Gf6PiGogbZuWs\",\"8JyqsSbN2FJXPr3cw\",\"AYaEkTWLMmfzpwejr\",\"5Qvy7fNM2YEQ6PtbY\",\"Tin42WiZ4JTDEnS7b\",\"aCNWav8S8Try9RkC6\",\"ZqDWf8ruyG4shqRjr\",\"5F8kWn4n7fQbnf88e\",\"gb9rvGus2Jv7bjZSs\",\"oqGkxvASXq52iTDvp\",\"8MmSRZi2qKXLmj2pE\",\"3SKmXhcLPPkmQhjip\",\"FWkXEyT8mcyKsYATx\",\"qJZsi5rhRnWA38FbA\",\"qm75TsDNyQetyWWJ3\",\"HqmxnQJM66Y57twhn\",\"jDgJ2fdFS76TSorNc\",\"s5M5RvgqR9BhB9JoC\",\"FHSJnAYTbcsKFgeQa\",\"2fxapKr8XGdNeaKi2\",\"cMGTQmbpzJJdF53ij\",\"DwetpbChQM4r6Gwah\",\"hrzGaJc9KZqgjAvew\",\"eHcgvkTGsH7ZziqBo\",\"ds9ZtbGhiyMqBjkvf\",\"8PwfYqoDQFThzNtvf\",\"hwLAvyumMvYXNv3j5\",\"Jqk2uJZZxEv5wZFze\",\"sZDYNicocwXesSMXb\",\"X4iqEdg7dPjFpoASw\",\"iMHrN3Wiefh9Ame38\",\"fMR9RcfgPJWiLgx7k\",\"LzAr38NtigjfEfdzR\",\"t7BnRyo7NH5Nx22HR\",\"6W2GSzrYjMD9ANBFY\",\"azHSATBuuQ5wz9bvB\",\"GiK8LZt3JRKNJjj5W\",\"C4QntmkYtB89GNtpd\",\"ovqQRfyvmEDypjrnC\",\"Q7Qy8oL8agXcYFDyP\",\"qcJrxNa4YdfHWEtPx\",\"BequD5k9EfGgz8XZ6\",\"LiW7nXr48ko64x82W\",\"YCzkY5kKEtb9qcYgy\",\"wsHhtbDh6ExixZ7d5\",\"yZvzB3qFb8pkHy4dg\",\"otkpZaMKooduybCPc\",\"ftHKkYbL2GGNYscuc\",\"d2nZSFz6SLHQudCmC\",\"AJwBauGHyrbqgDYce\",\"aEm3Wvj2rFYRL8Lrb\",\"sH3G943GRXef29nXh\",\"j33ddayt6himiSehe\",\"bB6S2iEZDdaJZEwnF\",\"PoBuPL5BTJT9MMyGF\",\"Lw8oRc5SERsuntXMo\",\"23oi2a3vQwhtLEbSj\",\"ffMvvywxExFexnPtb\",\"Ep7277Ae6CiggCdNz\",\"xocwRwFQ7rgFspDF9\",\"SGhPxX5bHGL8zZqtt\",\"Zhy5X7BZnqk8hacEw\",\"vvQHxayds7X8qf9Sk\",\"4HmAsNaoPKvqvMh3q\",\"AasGs8AeX9Lcb9xJn\",\"EjbDDFRECrzQDkzrX\",\"Z85ajWfZ4jDPkbvR4\",\"2iFe3EHEH2YdhSKrs\",\"3LiSLdtN58n46NEqg\",\"F7R6kDnFGGWugpg4C\",\"eHLbPJvGtrxX6XR7H\",\"NQEtpxFc2XhdFtyuM\",\"gvQdx64oZ2zy7c8qm\",\"2d8Kk9uAzLGWREfpp\",\"oMcThjRb7JhcwxHtr\",\"bLpgu8xTdpDPFSAsM\",\"rnysdJMvAJTDkHo7j\",\"TpaErvdqgSrNYXWNk\",\"27QpGQw2CEXCzcFQK\",\"9uZpgAtSuPZ7W7DL6\",\"xH6PCnPJdsebxmRhF\",\"dZgBiAvsYkv8wFWdZ\",\"J6JFEBRDvRhendwKq\",\"49LWtJJ2petTpiuEP\",\"LCEJ5y4PK7Jmbe9uc\",\"og5Re4g3pSoYHpKnX\",\"vsE62YBA9NpMFBNiw\",\"8Tikd2acFcCBT8YeQ\",\"Z638r8eyyCAFQionR\",\"wPxeazAYct9gG2eRM\",\"v9KtC8YLbMWmXiW2H\",\"4oj74SdrYfpJgEAmd\",\"BARTN4evTmpmNs272\",\"mhwJATYEcAEQ8Bmeb\",\"ckHFA5y8pkrXbsevA\",\"3tTJaeegcrmC8paGB\",\"eHhL37DG7oW3vTcg7\",\"xfPT5fiAHtJZy2pwe\",\"CRoY655aiRDBDq3uM\",\"kXEfD7xxEyWd7oxxL\",\"RiwS9QTek4bMS3wtA\",\"NCgqvvXaGksrMDiw7\",\"AGNX2Wynh3dNrvxfy\",\"YsAz93yZw8KKPupKv\",\"jpiYk9LbC3oDg84dz\",\"jd9GKhQqSdkeMeCTM\",\"m4taAgaxZCTTYMhFr\",\"vTfyrr4pGddp8rbXc\",\"7djAghy9fBhtLnKw3\",\"azQuTr5LY59adhfkx\",\"M8dQuMrEpP8Hc3tHN\",\"vjxLM6QpR3ZiduN9E\",\"J5T8gZqiZXFuFDTQ7\",\"JrjNqv8HhMZ9MR6q2\",\"a9CkKmo3fkLvb3eBA\",\"6E8GoWCrHpDvHZjWG\",\"PtaiHYXnMwb2rWqQW\",\"YRstQuthRkFeBiXug\",\"ftXLsTaA7yHmhuEsY\",\"SpTi3f5uA7t7ygtLv\",\"MxQXA7kigYpyBS37i\",\"AMc6ecyukYnkGCEbG\",\"SYQfSLYGZYcSwsnkZ\",\"8LfTheFzvicameoz9\",\"7QFKJDLTjmknyQjKQ\",\"bJaPCBx63YxdJAuTS\",\"kzncCp95mWSfJkRmb\",\"5H9MNfC4DPwxbakTf\",\"HmKFZqFH9YC346djy\",\"55RQznnuTGpsj3EXd\",\"oXJbZzDbT6N2qgqR3\",\"nrA8Pacm3A6GqGzq4\",\"KpHrC7WPEojnzgEtz\",\"yF68LNRo3rXcSFkR9\",\"omQhBXTwsBMv6kgz4\",\"wT5gGgvjKc5wz59AQ\",\"Tu9n4ugzhvNfEyRFd\",\"b9oNDwXGhgfswtHdW\",\"vGRSrdg2F3NKqEP5e\",\"hAcYeP2bPsvZoFBFw\",\"ZNnsMeNkdDhHjSrZb\",\"FgkYtHLxeD8pETJ8T\",\"ywk3XGvcmpTgRxwZa\",\"n2BRY9X8899dcG8Bw\",\"7g3vZaQXhLpxrajyg\",\"jzorpPo7TYt6i589D\",\"tAZYNeCdACRgZ2Bx4\",\"jFcHRfu77aNu6YpZg\",\"3MybBtCNPcFHLMYmJ\",\"neRxsjCeKWgXmLKDL\",\"zQGRoJD3EGghM5gJe\",\"ZSbcGKj67qFTPfzqh\",\"S6ipW8Xzds8QDszn9\",\"W6sCwS23msxRPcBLT\",\"h5Tntnv4Cxdw9ETQx\",\"pDvFWMCD9fQwoBPcu\",\"fznzd3qnvtbFkkizz\",\"sQJHAmQn6xz8mYoNu\",\"bCFecqKyXTCnGgPSc\",\"62agN2oNiy8R7CxLy\",\"8GPnpgq26E9A8JMS8\",\"hLYtjmHXAxNTtdSFY\",\"Cq7jRGkSYA6De4ZN6\",\"Z4M3NAa4TXquMNkHe\",\"ya2ofFqYRC57bfbND\",\"qab4tYm6vJQcpKLfi\",\"Nfsj4eNFDjaFa39ga\",\"E4dE7Px4BQzSQeh2y\",\"GsEeCps6fc42mboPE\",\"cykCKNJcqFBxz4T8s\",\"x4rCP54wNntB449tR\",\"b3Dk2LqoEgripS3Y3\",\"ENS9wE2HHz2Y5DjRk\",\"S9bJSGEmnHY23oCeF\",\"J83b6T9hJ2EqE5Aov\",\"hZW6j5s6RHpx35phy\",\"RnTBbuFCrJWW6Ayvj\",\"bJxaKHJqR82EWw8Su\",\"5dHucvf2qBYyKim7X\",\"xn7uGNKeAwPEkP9oA\",\"YLtspA8ec6ntcoMMf\",\"R4SjTgDnpigJYDLyL\",\"Y8ySZEtvht9EwdcoY\",\"97DthwdtrBLm2y2Yj\",\"dg8MBusmNZRosmyxe\",\"TzfFXjsN3n6kkFZSY\",\"GgLd4eWBu79mdjtkP\",\"x2AThkdrQ5do9eE9M\",\"xxr9cuQtxZ5wGTACr\",\"4fhjJBvLBWh6QeSih\",\"4sHkH3t9CJYhbDwjM\",\"gnqiMtWWsK2aCjbpA\",\"6428wKHtwKkFdvBs5\",\"wZ22E8EXW4qasgru2\",\"cxABox46qWvJRyidE\",\"KZ2xddpM2f9JRaryB\",\"eqYXKc8dh2yRNAyaA\",\"DTKtcn5HrYxtcBza3\",\"RfG2csESdQb3qcBAy\",\"TM2t3Le4qPcqSnzKX\",\"2w9meeghtRJfMyhNy\",\"J23RcmzbdtBbPCTjT\",\"a777e8chPvJkY3tKa\",\"aLxRYMdDSeCixE9pz\",\"fbscDtvBmYGEkBx7S\",\"DPi9QGLctq2y76KuE\",\"XsZ4v98XkSRyAzeCF\",\"2usKhSQpAA5udoJg5\",\"o3H7kYyAtn7F2wMEZ\",\"SvsTKrEmBGPtvTDnz\",\"b5zo7s6xrqWgQnPao\",\"YLBbF8RnZLTy5putY\",\"LhLMDsjjsP9juPFuw\",\"j8FR2cHxpsYtNo9Dw\",\"9qdwnisj554famEPb\",\"8wBNT3nfkH46MtM8n\",\"TbLmz2B9us2faWfeP\",\"Ecg4m7srYGgZsb4Ck\",\"uMxob526prFuTTNve\",\"wmW4mGgj6tJxepqpC\",\"pRQwycu9GxxtijH68\",\"EHCJ69ZftBGRWH7t3\",\"ufyzKZdGLAhqFz6uh\",\"drQy2fDHWMMBEEL9G\",\"94M7T5qwC5KGCzE9R\",\"eyog4zCdBuks2PaYK\",\"E6M5TWTt6zS4gfa4z\",\"Bu4uGeo4jjuyFi29D\",\"FdB7yZRr2ZjaFQcpj\",\"gKkukxnE8JgbKfkHu\",\"MACiBs8yxkkGzLr2R\",\"5n3bYKowFSgDaTApG\",\"GJH6ntAFXf89jpfxh\",\"DNACg4rcgZsPtYGZ8\",\"6dkzRMf67DCWqRzj2\",\"h4x2jaMdj5aQZbW5g\",\"3bH5s2P4iYCRHb5Sk\",\"BRXiuhWLN3YSbSdvh\",\"mePSe5o7qpkYirqxx\",\"n2e74kbZHY3u7Cgej\",\"2XqgeTopdma89viw3\",\"MW5noWmMHjcowKJZi\",\"aaotFPYKJpeDdBmK5\",\"Xk2g4CNFAnYcvxiSr\",\"uNMy38GfWhmyb5bWR\",\"JBFi2fBytEdPmTNE8\",\"ofwoyn2Aoj2hoXN7x\",\"CtKaPhQmtex9wnWcd\",\"dw39vy33ZbFLfCDwF\",\"izDLrvw49P5pHQrN9\",\"ReJkqc43MY6pNcMDh\",\"LfDeQBAH37L7wgT4Z\",\"gHx3GRSyA5HZ8pbnu\",\"9Hp6Z83SwWxMQRouq\",\"waNsY2k4ndReyEREk\",\"W4X4kb9bFHP9wQLKZ\",\"Tg24gZyPmk8uDXcBY\",\"BrTDhPJcACL2bsrpJ\",\"siKtn4x4vNM2m2QBf\",\"8KNtgAcNpyT2f6bTT\",\"KktidZuhzfEBK2bdm\",\"syYx2CZhdo5kPZiSW\",\"zd9FLSzsGz3evKafy\",\"WPf3wuMaAipBActzR\",\"HF28xZKSLM9wEuqNg\",\"iS5BrkGLzJyPK7nKt\",\"zRK5D443K6RxR9xWn\",\"Mw8yqSDFdQui28w5N\",\"fNtNTiNhQTsHJxvTS\",\"Cia25zjeX3RkCNx5t\",\"RDdXanzLqFzuDF2uZ\",\"xyMcsLZsKgcbPzZ4N\",\"fHeYpHLgzDPqcoDh6\",\"xGdw5GCbjjZL9Hr6J\",\"QBgP4BySQAeCoCFf6\",\"i42C33MNpNoSXhJDj\",\"7ifh8r4gvyYMhKB94\",\"4EgBCgEyiZA2hRsh4\",\"ePGqEP75JdMfF85HE\",\"mLjrvoFNrH4uZWHRB\",\"2YF9pq5TMZcck8GxD\",\"fSawAcidbRKJfFoqp\",\"Hbep7kAusdxJFG5Qv\",\"8sNv5PTHa7XQ8bNqR\",\"TmabA7AGCEoaYyqqz\",\"AXF4Qr8Z3E2FH5aG6\",\"jFvXwSyitFJ3TXgwz\",\"tgnBy6vvi4bHSJLae\",\"bHhuudonsyz2auRBk\",\"58M252WF7SPRinfBx\",\"g3Jh47H2g9xtZGxqK\",\"HqpbA6C6zkAmDsaEm\",\"iTxfDAyC4ymrz2XFv\",\"KBxTPknCRmB2b5y3i\",\"TWDNxvNQNSo9c9nJy\",\"buX4mCQhtXCfBjeno\",\"XNmN6ztj36a7eChbD\",\"hBKf7LeSP6i2saXjk\",\"2PufnQcsHsfymufX3\",\"TY5sBWLMTohBXujmZ\",\"zgoEhAyhrjnsSLPGw\",\"24GxBXauqeXgWBG6q\",\"TbgmCM5emcQRGiEGv\",\"RfiYK2zc2XrugiuXG\",\"ayqtxdYoDCcWuyXL7\",\"kyKXaQnhubfLH5xMz\",\"xBQC5uQdx6WndJ3iM\",\"6wXcDnf6Pqn4tpFZF\",\"ojv7mnW5gW82yhMNX\",\"iojEnnY9FsMfYzp6f\",\"SjmvyuXe8954uYy63\",\"h8KvqaAhCtpm9adfp\",\"J3upzLHuEwXH7Z2hx\",\"gJYuGdkXEWWmGRLzu\",\"yjtdwc2AC4jA2RWtn\",\"PH32cNxBjrK4a28sn\",\"4SNg5Qy6eHvwqQGSR\",\"zoDHPoPn9mhXpmka7\",\"hed4SxEcWYbe2bK8r\",\"SRwxbsLj2X4uPctZf\",\"Yp7uvStL97cC9fKkY\",\"gKnWjDjwrJh7MK2df\",\"2Z6JyyFgKoKYEnErv\",\"BvQP9RPnSnDj99nTZ\",\"5QN8R22z43SrwoHDz\",\"4RY3zj9C2t8GGefhi\",\"xqoisFmSjeDeAhuXF\",\"wNLWme2gvvpMPHk7A\",\"R6E6WjtD92Sc3agJa\",\"mTF6oWX2WhFR4M3QK\",\"zjHqXXD9jLycXFFj8\",\"4DyrrxJtzTxcNBiyi\",\"MnsnfTLvgczGQfp3J\",\"9QMPE56an5KmasGwS\",\"rC8zWyyts5PqESEhP\",\"aiqruLbboPvFkh3qi\",\"BTCaCyNxLS24zP9Yi\",\"JLjRv92qkNEjzxhJT\",\"7tW5HqcSbi4b3sLuu\",\"baT6m4uMLKtpNMfFG\",\"p4hvRAJMx84x5hBHc\",\"MBA5BzRXuMRx822ty\",\"myNNXwbSCou5wm6dL\",\"pnzfNatg3P32mMYQY\",\"CHvzhtXnv8HTbPQ56\"],\"total\":367,\"quality\":[4,4,5,4,2,3,4,5,1,5,5,5,5,4,5,4,5,4,5,5,5,1,5,5,5,5,5,5,5,5,4,5,5,5,4,4,5,5,5,4,1,4,4,4,5,5,5,4,3,5]},\"flags\":0},\"subscribers\":[\"3SKmXhcLPPkmQhjip\"],\"summary\":\"Create a function that takes an integer argument and returns a list of prime numbers found in the decimal representation of that number.\\n\\nFor example, extract_primes(1717) returns [7, 7, 17, 17, 71].\\n\\nThe list should be in acending order. If a prime number appears more than once, every occurance should be listed. If no prime numbers are found, return an empty\",\"tags\":[\"numbers\",\"algorithms\",\"math\",\"cryptography\"],\"timestamp\":{\"$date\":1569662818773},\"title\":\"Find All Prime Numbers in Decimal Integer\",\"isHidden\":false,\"quality\":4.32,\"family\":[{\"_id\":\"RKwaq5pQzxsqmSwpS\",\"language\":\"cpp\"},{\"_id\":\"H3TMp2swn3Q3sCxpv\",\"language\":\"java\"},{\"_id\":\"JpfNfZCEesy7Nz67i\",\"language\":\"javascript\"},{\"_id\":\"G64JXaxWLd9kyWkPJ\",\"language\":\"php\"},{\"_id\":\"T4q8P8cxvBtaLPW4q\",\"language\":\"python3\"},{\"_id\":\"B6dWRnhaGHBBGPPLm\",\"language\":\"ruby\"}]}}"]