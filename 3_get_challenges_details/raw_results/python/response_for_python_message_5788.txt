a["{\"msg\":\"result\",\"id\":\"1605\",\"result\":{\"_id\":\"S9A7PeacnDpvXLgYe\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def longest_abecedarian(lst):\\n\\t\",\"difficulty\":2.1097560975609757,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"r7a5Zdw45ZX6zwuM4\",\"instructions\":\"An abecedarian word is a word where all of its letters are arranged in alphabetical order. Examples of these words include:\\n- Empty\\n- Forty\\n- Almost\\n\\nGiven a list of words, create a function which returns the longest abecedarian word. If no word in a list matches the criterea, return *an empty string*.\\n\\n### Examples\\n```\\nlongest_abecedarian([\\\"ace\\\", \\\"spades\\\", \\\"hearts\\\", \\\"clubs\\\"]) ➞ \\\"ace\\\"\\n\\nlongest_abecedarian([\\\"forty\\\", \\\"choppy\\\", \\\"ghost\\\"]) ➞ \\\"choppy\\\"\\n\\nlongest_abecedarian([\\\"one\\\", \\\"two\\\", \\\"three\\\"]) ➞ \\\"\\\"\\n```\\n\\n### Notes\\n- All words will be given in lowercase.\\n- If two abecedarian words have the same length, return the word which appeared first in the list.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(longest_abecedarian([\\\"ace\\\", \\\"spades\\\", \\\"hearts\\\", \\\"clubs\\\"]), \\\"ace\\\")\\nTest.assert_equals(longest_abecedarian([\\\"forty\\\", \\\"choppy\\\", \\\"ghost\\\"]), \\\"choppy\\\")\\nTest.assert_equals(longest_abecedarian([\\\"one\\\", \\\"two\\\", \\\"three\\\"]), \\\"\\\")\\nTest.assert_equals(longest_abecedarian([\\\"almost\\\", \\\"accept\\\", \\\"access\\\"]), \\\"almost\\\")\\nTest.assert_equals(longest_abecedarian([\\\"aa\\\", \\\"bbb\\\", \\\"cccc\\\"]), \\\"cccc\\\")\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,1,2,1,2,2,4,3,2,2,3,1,1,3,3,2,0,3,1,1,5,1,1,1,2,3,3,2,3,3,3,2,2,2,2,3,3,3,1,2,2,3,2,3,3,1,3,0,3,2,0,1,3,2,3,2,3,0,2,3,2,3,3,3,3,3,2,1,0,0,3,1,2,2,4,1,3],\"rators\":[\"PXAcsKkssS2yLyDv2\",\"aEm3Wvj2rFYRL8Lrb\",\"tAF9Gf6PiGogbZuWs\",\"KuwfQZn99sQTj6ZsC\",\"YACDEqzcuKv3pZotp\",\"sxHiGwGQBtBhZMmCA\",\"yKttxy9JGn5Jzwuj6\",\"euPBBaYXyS8RBr9KB\",\"AasGs8AeX9Lcb9xJn\",\"2innwjWqxJHo4eRGh\",\"T2QhZRhybEKeJTb44\",\"ZNnsMeNkdDhHjSrZb\",\"2fxapKr8XGdNeaKi2\",\"3Zceb8GudqAG3onG3\",\"8PwfYqoDQFThzNtvf\",\"gb9rvGus2Jv7bjZSs\",\"8JyqsSbN2FJXPr3cw\",\"EjbDDFRECrzQDkzrX\",\"yZvzB3qFb8pkHy4dg\",\"JQ5uoxA4WZgN6HyJk\",\"J5T8gZqiZXFuFDTQ7\",\"s5M5RvgqR9BhB9JoC\",\"cR3ibTMxLyEdDFCHY\",\"RcFJfYquW9quJDnp5\",\"Yp7uvStL97cC9fKkY\",\"gJYuGdkXEWWmGRLzu\",\"kYWb8BwpKwunQkxeX\",\"YRstQuthRkFeBiXug\",\"9pzFiFK3ANLjQfnr2\",\"aCNWav8S8Try9RkC6\",\"mDWNyaaQ9hvPCRzSd\",\"gPvrBxxySDP2vpux3\",\"Nua6T3dBurBy3Qfg9\",\"n2BRY9X8899dcG8Bw\",\"KdNDysEsy2TW5QRJ2\",\"ekQh3jzgGLsEMbKo3\",\"kQH5b8MXJunh84Czq\",\"DQskEvAv5KiJDPtGF\",\"ACEZh39brWjdGkZXb\",\"HF28xZKSLM9wEuqNg\",\"gkqp3EuvuiFXFAFtW\",\"PytNZK9mNiRiZxPrm\",\"55RQznnuTGpsj3EXd\",\"W5TajitmCyxz87zAC\",\"giHmmxKbE2pvCR2YQ\",\"Ecg4m7srYGgZsb4Ck\",\"iojEnnY9FsMfYzp6f\",\"hRiMXDZNAzyPd5tpt\",\"DEDniTrstQYGounXT\",\"zZDaXBxMzTCBhNkgL\",\"HqmxnQJM66Y57twhn\",\"yjtdwc2AC4jA2RWtn\",\"iS5BrkGLzJyPK7nKt\",\"KZ2xddpM2f9JRaryB\",\"ZrKCkX7xxGGZzauFW\",\"MKT7khMBGXzA22ykf\",\"hnyhBFWwNCz9mDfSi\",\"AQECHYqcH2rFsZM8p\",\"v9KtC8YLbMWmXiW2H\",\"p8qqFdJ3FSk5x9z3G\",\"XjajdyybZZbkz8o5x\",\"jL4y5fTJAMBjhZmko\",\"w2HhxvSLmDhaGCAjE\",\"qD2LrwaDrSdiybLKY\",\"8fZxjQfuXw5HMSRJM\",\"DPi9QGLctq2y76KuE\",\"xn7uGNKeAwPEkP9oA\",\"D62kvgDJ6asnsFaEw\",\"dkcmCKwqApX5jBggc\",\"J3upzLHuEwXH7Z2hx\",\"gXTAie79kiw28tx5u\",\"buX4mCQhtXCfBjeno\",\"qZQxPQ2kaNKAMesHT\",\"xsDyJstYoBZRS8pJH\",\"QRv96jmNaYsWkxQEG\",\"Jqk2uJZZxEv5wZFze\",\"cAP3n5NY64uoMwzRR\",\"oBcs8GLX2ZFLXQy8y\",\"PWgzeK859suojbrRx\",\"AFfw7cGg83uYk2Miy\",\"srJ34BaybkQh3qRkM\",\"GGdmhAvxXhqhhibJN\",\"H9KZi2cjt4FwH7qog\",\"fbr22rabEJMfBp7vD\",\"T6iBEE2jp7f7iEF2P\",\"gKnWjDjwrJh7MK2df\",\"2PufnQcsHsfymufX3\",\"suArq5BbSy7gD6xri\",\"yod5YhKtPqw2GfG9B\",\"o4ixjQGSaYqA2JoM4\",\"rfyEkETeoS96QNH4e\",\"8sNv5PTHa7XQ8bNqR\",\"ey3CASd6Je5LEJzfB\"],\"total\":100,\"quality\":[5,5,5,5,2,5,5,4,5,5,5,5,5,5,5,5]},\"flags\":0},\"summary\":\"An abecedarian word is a word where all of its letters are arranged in alphabetical order. Examples of these words include:\\nEmpty\\nForty\\nAlmost\\n\\nGiven a list of words, create a function which returns the longest abecedarian word. If no word in a list matches the criterea, return an empty string.\\n\\nExamples\\nlongest_abecedarian([\\\"ace\\\", \\\"spades\\\", \\\"hearts\\\", \\\"clubs\\\"]\",\"tags\":[\"arrays\",\"strings\",\"loops\"],\"timestamp\":{\"$date\":1587843339016},\"title\":\"Longest Abecedarian Word\",\"quality\":4.75,\"family\":[{\"_id\":\"WA3CLqBrGrsJk7afJ\",\"language\":\"cpp\"},{\"_id\":\"nLjn3M5h3ZX3PoipQ\",\"language\":\"csharp\"},{\"_id\":\"4cvBphZgxvGTdc3F7\",\"language\":\"javascript\"},{\"_id\":\"S9A7PeacnDpvXLgYe\",\"language\":\"python3\"},{\"_id\":\"sFtRpKkP8qTMrKDgK\",\"language\":\"ruby\"},{\"_id\":\"Kicp9rdzDQQY3tzr8\",\"language\":\"swift\"}]}}"]