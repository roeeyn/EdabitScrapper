a["{\"msg\":\"result\",\"id\":\"2074\",\"result\":{\"_id\":\"YPdFTfDehZpQ3iu6g\",\"archived\":false,\"author\":\"kochug\",\"authorId\":\"vQEmjTRgmdGNYB7yk\",\"code\":\"def roman_numerals(arg):\\n\\t\",\"difficulty\":2.904255319148936,\"familyId\":\"SiRoBf3GXfogLpikG\",\"instructions\":\"Create a function that will take either a **string** containing a roman numeral, or an **integer**.\\n\\n1. Given a string, return the integer value of that roman numeral.\\n2. Given an integer, return the equivalent roman numeral.\\n\\n### Symbols to Values\\n```\\nI ➞ 1\\n\\nV ➞ 5\\n\\nX ➞ 10\\n\\nL ➞ 50\\n\\nC ➞ 100\\n\\nD ➞ 500\\n\\nM ➞ 1000\\n```\\n\\n### Examples\\n```\\nroman_numerals(\\\"V\\\") ➞ 5\\n\\nroman_numerals(\\\"IV\\\") ➞ 4\\n\\nroman_numerals(\\\"CII\\\") ➞ 102\\n\\nroman_numerals(45) ➞ \\\"XLV\\\"\\n\\nroman_numerals(1666) ➞ \\\"MDCLXVI\\\"\\n```\\n\\n### Notes\\nNumerical and Roman Numeral inputs will be positive numbers between 1 and 9999.\",\"lab\":\"Test.assert_equals(roman_numerals('I'), 1)\\nTest.assert_equals(roman_numerals('V'), 5)\\nTest.assert_equals(roman_numerals('X'), 10)\\nTest.assert_equals(roman_numerals('L'), 50)\\nTest.assert_equals(roman_numerals('C'), 100)\\nTest.assert_equals(roman_numerals('D'), 500)\\nTest.assert_equals(roman_numerals('M'), 1000)\\nTest.assert_equals(roman_numerals('IV'), 4)\\nTest.assert_equals(roman_numerals('VI'), 6)\\nTest.assert_equals(roman_numerals('XIV'), 14)\\nTest.assert_equals(roman_numerals('LIX'), 59)\\nTest.assert_equals(roman_numerals('XCIX'), 99)\\nTest.assert_equals(roman_numerals('CII'), 102)\\nTest.assert_equals(roman_numerals('XLV'), 45)\\nTest.assert_equals(roman_numerals('XXX'), 30)\\nTest.assert_equals(roman_numerals('XXXVI'), 36)\\nTest.assert_equals(roman_numerals('DCCXIV'), 714)\\nTest.assert_equals(roman_numerals('MMXVIII'), 2018)\\nTest.assert_equals(roman_numerals('MDCLXVI'), 1666)\\nTest.assert_equals(roman_numerals('MCCCXXIV'), 1324)\\nTest.assert_equals(roman_numerals(1324), 'MCCCXXIV')\",\"language\":\"python3\",\"summary\":\"Create a function that will take either a string containing a roman numeral, or an integer.\\n\\nGiven a string, return the integer value of that roman numeral.\\nGiven an integer, return the equivalent roman numeral.\\n\\nSymbols to Values\\nI ➞ 1\\n\\nV ➞ 5\\n\\nX ➞ 10\\n\\nL ➞ 50\\n\\nC ➞ 100\\n\\nD ➞ 500\\n\\nM ➞ 1000\\n\\nExamples\\nroman_numerals(\\\"V\\\") ➞ 5\\n\\nroman_numerals(\\\"IV\\\") ➞ 4\\n\\nroman_numeral\",\"tags\":[\"algorithms\",\"strings\",\"numbers\"],\"timestamp\":{\"$date\":1524289460941},\"title\":\"Roman Numeral Conversion\",\"stats\":{\"completed\":{\"total\":101,\"ratings\":[2,2,2,2,2,3,2,2,1,4,2,2,1,3,3,4,3,3,3,2,3,2,2,5,3,2,3,4,3,3,2,3,3,1,3,2,5,5,4,3,2,4,4,3,2,4,0,3,4,4,0,3,4,1,2,5,4,2,4,4,5,3,4,2,3,3,4,4,4,2,4,3,3,3,4,3,4,3,4,4,4,3,0,1,4,4,4,4,2,0,4,2,0,4],\"rators\":[\"vQEmjTRgmdGNYB7yk\",\"HK3RW4kr7acFSAyL4\",\"tuyDaJzFy78jxvhCY\",\"6fJpRpAgiWD5zX9qB\",\"tzHQmfmDbNJgqbeLx\",\"3mtD7DxrAgDMcxWKt\",\"5JXnPbYC8RuBG6FkM\",\"WKsvry6M74GDrtqHQ\",\"QjpzasKxy3xBakLzz\",\"GRZzKCbeb4xKHFCrZ\",\"m2iiZZHTpzHcEKJMn\",\"KJziLRHpSFsYnbNEd\",\"pdcaC4fEtsubBz4Wo\",\"mqXfzC24CdThpCaGd\",\"nSMKW77QrS4SGf5DP\",\"wPhd86JGzcCkkQdyy\",\"wTpsQ2SdXt98yKkk2\",\"FjzEmrkRd6DNtHFK6\",\"tAF9Gf6PiGogbZuWs\",\"qfamm7pg2QBe2aZxL\",\"D5R3KCmrXDmi4HHhM\",\"RsX6W2ddWM8ajHzss\",\"wtQ46Com9qs8ZCqHD\",\"uJ5A3zjLi9iN5eeXX\",\"wEF3ZhC5iTqFjgw85\",\"KDfCknbFB67GDq3Yg\",\"W86SWYbsAv36QatiS\",\"ArC3TpnruJnWYDzHM\",\"8JyqsSbN2FJXPr3cw\",\"577693ukTtr6MuPHG\",\"Jqk2uJZZxEv5wZFze\",\"T3ZAuoMrJjvZwN55B\",\"KWeWibfsyywZZzfuC\",\"yZvzB3qFb8pkHy4dg\",\"7g3vZaQXhLpxrajyg\",\"3hNfP34uoz5WfhMca\",\"AeafsFDfWykKX8n3E\",\"MXjxGML2X75x64vJo\",\"nrA8Pacm3A6GqGzq4\",\"AYaEkTWLMmfzpwejr\",\"PFjMZGHNAPTkgd7tq\",\"gb9rvGus2Jv7bjZSs\",\"Wpn95NqWxncQrwNgz\",\"BFNm9gacwba9KyLFW\",\"M2k5STtKaQx6tsgWe\",\"pMuvoqcmxHbuRSfb9\",\"td7qPZ7Lv4pEWT2Ya\",\"jHrtWDGBhkbuWa7fG\",\"yfYmQT6jgJRsbSvFd\",\"3mLcjFCw4MPHAEcKk\",\"cecRRLKKu5R62D5xE\",\"FMHMYiNwBtZEGA2Nj\",\"FQKLJZoeNetX4cty7\",\"TgjcWxsTjar7snQx9\",\"dLMwA7bAx3ArJoqC5\",\"Tin42WiZ4JTDEnS7b\",\"5F8kWn4n7fQbnf88e\",\"2fxapKr8XGdNeaKi2\",\"ywEdrfM5Gbb584tDf\",\"PuJDHtAaX6vXeJJTC\",\"s5M5RvgqR9BhB9JoC\",\"DDsgAKZYqZ6tyZEwF\",\"HqmxnQJM66Y57twhn\",\"FgkYtHLxeD8pETJ8T\",\"RnbpYh3GKbdBewLc7\",\"C4QntmkYtB89GNtpd\",\"8PwfYqoDQFThzNtvf\",\"mDWNyaaQ9hvPCRzSd\",\"hrzGaJc9KZqgjAvew\",\"aEm3Wvj2rFYRL8Lrb\",\"AasGs8AeX9Lcb9xJn\",\"xJHw6qF7ZsMf6NWJv\",\"kYWb8BwpKwunQkxeX\",\"ZNnsMeNkdDhHjSrZb\",\"a777e8chPvJkY3tKa\",\"5dHucvf2qBYyKim7X\",\"gJYuGdkXEWWmGRLzu\",\"AioJKoJ5ogzeBL5ZH\",\"cykCKNJcqFBxz4T8s\",\"W5TajitmCyxz87zAC\",\"xn7uGNKeAwPEkP9oA\",\"PytNZK9mNiRiZxPrm\",\"2QziknsznNeMPRh3g\",\"gSFJPsMXnqAog3Q9f\",\"HF28xZKSLM9wEuqNg\",\"DPi9QGLctq2y76KuE\",\"8sNv5PTHa7XQ8bNqR\",\"iS5BrkGLzJyPK7nKt\",\"iojEnnY9FsMfYzp6f\",\"J3upzLHuEwXH7Z2hx\",\"yjtdwc2AC4jA2RWtn\",\"gKnWjDjwrJh7MK2df\",\"2PufnQcsHsfymufX3\",\"gXTAie79kiw28tx5u\",\"T6iBEE2jp7f7iEF2P\",\"6eRm9ycMujNDWoTyL\"],\"quality\":[5,1,5,3,5,5]},\"complaints\":{\"total\":0,\"reasons\":[],\"skippers\":[\"vQEmjTRgmdGNYB7yk\"]},\"instructions\":{\"score\":2.4999999999999996,\"voters\":[\"BkPgkDQGHm66X4Qai\",\"5FbXfTCwHopDAtvJA\",\"L4tFDPGYCp86JR9dY\",\"gCHq5hPwtNt6xfKip\",\"sXNYqHpzkE7wkXrAX\",\"577693ukTtr6MuPHG\"]},\"tests\":{\"score\":1.45,\"voters\":[\"vsxmgZACKE2TafBhQ\",\"W86SWYbsAv36QatiS\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4,\"family\":[{\"_id\":\"8dDWzSehDjwE9TcHQ\",\"language\":\"javascript\"},{\"_id\":\"YPdFTfDehZpQ3iu6g\",\"language\":\"python3\"},{\"_id\":\"zPDovyNfu2fEyghfi\",\"language\":\"ruby\"}]}}"]