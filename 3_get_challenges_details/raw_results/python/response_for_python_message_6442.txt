a["{\"msg\":\"result\",\"id\":\"1930\",\"result\":{\"_id\":\"mub4u2WsjHnw3sLqT\",\"author\":\"bangyen\",\"authorId\":\"yv7c4H2jimSKHEjtG\",\"code\":\"def lambda_depth(num):\\n\\t\",\"difficulty\":2.6923076923076925,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"cpEyH4DtY7TK2YQEn\",\"instructions\":\"Create a function which takes a parameter `n` and returns a function such that it, when called `n` times, returns the string `\\\"edabit\\\"`.\\n\\n### Examples\\n```\\nlambda_depth(0) ➞ \\\"edabit\\\"\\n\\nlambda_depth(1)() ➞ \\\"edabit\\\"\\n\\nlambda_depth(2)()() ➞ \\\"edabit\\\"\\n\\ntype(lambda_depth(2)()) ➞ <class: \\\"function\\\">\\n```\\n\\n### Notes\\n- `num` will always be a non-negative integer.\\n- If `num == 0`, return `\\\"edabit\\\"`.\\n- If `num > 0`, return a function.\\n- All non-example test cases come in two forms: checking whether `lambda_depth(k)`, after being called `k` times, returns a string, and checking whether `lambda_depth(k)` returns a function.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(lambda_depth(0), 'edabit', 'Example 1')\\nTest.assert_equals(lambda_depth(1)(), 'edabit', 'Example 2')\\nTest.assert_equals(lambda_depth(2)()(), 'edabit', 'Example 3')\\nTest.assert_equals(type(lambda_depth(2)()), type(lambda: ''), 'Example 4')\\n\\n# The following for loop generates 20 additional test cases.\\n# For each integer k, the first test case calls lambda_depth(k)\\n# and checks that lambda_depth(k), when called k times, results in 'edabit'.\\n# The second test case checks if lambda_depth(k) returns a function.\\n\\nfor k in range(5, 15):\\n\\teval(\\\"Test.assert_equals(lambda_depth(%s)%s, 'edabit', 'Depth: %s')\\\" % (k,'()'*k, k))\\n\\tTest.assert_equals(type(lambda_depth(k)), type(lambda: ''), 'Depth: %s' % k)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,1,3,3,1,3,3,3,4,3,1,3,2,3,1,2,2,4,5,3,5,3,4,0,3,5,1,5,3,4,2,1,1,3,5],\"rators\":[\"yv7c4H2jimSKHEjtG\",\"AasGs8AeX9Lcb9xJn\",\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\",\"n2BRY9X8899dcG8Bw\",\"Nb6LYPoQP6KJZt8mz\",\"ZNnsMeNkdDhHjSrZb\",\"gb9rvGus2Jv7bjZSs\",\"pPmDX5WEA6wXvAmrt\",\"eWffi5z4Af8rRtvFR\",\"djtJbDFtF5djPRdTz\",\"foytX6kH9wiSYqLtT\",\"Wv2vJnEj8ywNmARoF\",\"uznjMqKo6mzk5fsJh\",\"EqaPuMDGGKaY3mYGP\",\"NuqGt5u3s7vJ7HBGR\",\"QRv96jmNaYsWkxQEG\",\"jSaW4kdeAAGoLxcuP\",\"qD2LrwaDrSdiybLKY\",\"xn7uGNKeAwPEkP9oA\",\"8sNv5PTHa7XQ8bNqR\",\"fSQSHjW3e72MrWxbD\",\"SGhPxX5bHGL8zZqtt\",\"h4x2jaMdj5aQZbW5g\",\"qPpQfR5KyDb5Y3EFf\",\"Yp7uvStL97cC9fKkY\",\"yr822PZmmiDDenxpB\",\"iojEnnY9FsMfYzp6f\",\"2PufnQcsHsfymufX3\",\"HhYCji7QqauyN3A7v\",\"MXjxGML2X75x64vJo\",\"P7NmFbCJ5offXMRvB\",\"srJ34BaybkQh3qRkM\",\"H9KZi2cjt4FwH7qog\",\"fznzd3qnvtbFkkizz\",\"d8qtzoLB264iP8tdY\",\"oBcs8GLX2ZFLXQy8y\",\"5rX3qPFdvRQ9G7xZQ\"],\"total\":39,\"quality\":[5,3,5,5]},\"flags\":0},\"summary\":\"Create a function which takes a parameter n and returns a function such that it, when called n times, returns the string \\\"edabit\\\".\\n\\nExamples\\nlambda_depth(0) ➞ \\\"edabit\\\"\\n\\nlambda_depth(1)() ➞ \\\"edabit\\\"\\n\\nlambda_depth(2)()() ➞ \\\"edabit\\\"\\n\\ntype(lambda_depth(2)()) ➞\\n\\nNotes\\nnum will always be a non-negative integer.\\nIf num == 0, return \\\"edabit\\\".\\nIf num > 0, return a func\",\"tags\":[\"functional_programming\",\"higher_order_functions\",\"recursion\"],\"timestamp\":{\"$date\":1591946264076},\"title\":\"Lambda Expressions All the Way Down\",\"quality\":4.5,\"family\":[{\"_id\":\"zaJeE6susYdwRyB6j\",\"language\":\"javascript\"},{\"_id\":\"XMkJrwe9qtAPotkv8\",\"language\":\"php\"},{\"_id\":\"mub4u2WsjHnw3sLqT\",\"language\":\"python3\"},{\"_id\":\"qXmzgt3oXaMnkDxTE\",\"language\":\"ruby\"}]}}"]