a["{\"msg\":\"result\",\"id\":\"979\",\"result\":{\"_id\":\"v34oCTbkrceCZjgRE\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"def shift_to_right(x, y):\\n\\t# recursive code here\",\"difficulty\":1.490909090909091,\"familyId\":\"zctwoeaiQAFAcbiE4\",\"instructions\":\"The **right shift** operation is similar to **floor division by powers of two**, thus, the process is _repetitive_ and can be done _recursively_. \\n\\nSample calculation using the right shift operator ( `>>` ):\\n```\\n80 >> 3 = floor(80/2^3) = floor(80/8) = 10\\n-24 >> 2 = floor(-24/2^2) = floor(-24/4) = -6\\n-5 >> 1 = floor(-5/2^1) = floor(-5/2) = -3\\n```\\n\\nWrite a function that **mimics** (without the use of **>>**) the right shift operator and returns the result from the two given integers.\\n\\n### Examples\\n```\\nshift_to_right(80, 3) ➞ 10\\n\\nshift_to_right(-24, 2) ➞ -6\\n\\nshift_to_right(-5, 1) ➞ -3\\n\\nshift_to_right(4666, 6) ➞ 72\\n\\nshift_to_right(3777, 6) ➞ 59\\n\\nshift_to_right(-512, 10) ➞ -1\\n```\\n\\n### Notes\\n- There will be no negative values for the second parameter `y`.\\n- This challenge is more like recreating of the **right shift** operation, thus, **the use of the operator directly** is **prohibited**.\\n- You are expected to solve this challenge via **recursion**.\\n- An **iterative** version of this challenge can be found via this [link](https://edabit.com/challenge/noqQNSr5o9qzvXWzL).\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"from re import findall as f_all, MULTILINE as M\\nfrom inspect import getsource as g_src\\n\\ndef op_chk(fn):\\n  try: return not len(f_all(r'>>', g_src(fn), flags=M))\\n  except OSError: return True\\n\\t\\ndef recur_chk(fn):\\n  try:\\n    src, n = g_src(fn), fn.__name__\\n    if n == '<lambda>': n = src.split('=')[0].strip()\\n    return len(f_all(n, src, flags=M)) > 1\\n  except OSError: return True\\n\\nTest.assert_not_equals(recur_chk(shift_to_right), False, 'Recursion is required!')\\nTest.assert_not_equals(op_chk(shift_to_right), False,\\n          \\t\\t\\t\\t'The use of right shift operator (>>) is prohibited!')\\n\\nnum_vector = [[80, 3], [-24, 2], [-5, 1], [38, 0], [192, 4], [4666, 6], [3777, 6], [1024, 5], [-512, 10]]\\nres_vector = [10, -6, -3, 38, 12, 72, 59, 32, -1]\\nfor i, (x, y) in enumerate(num_vector): Test.assert_equals(shift_to_right(x, y), res_vector[i])\",\"language\":\"python3\",\"quality\":4.575757575757576,\"summary\":\"The right shift operation is similar to floor division by powers of two, thus, the process is repetitive and can be done recursively.\\n\\nSample calculation using the right shift operator ( >> ):\\n80 >> 3 = floor(80/2^3) = floor(80/8) = 10\\n-24 >> 2 = floor(-24/2^2) = floor(-24/4) = -6\\n-5 >> 1 = floor(-5/2^1) = floor(-5/2) = -3\\n\\nWrite a function that mimics (withou\",\"tags\":[\"recursion\",\"numbers\",\"bit_operations\"],\"timestamp\":{\"$date\":1604611369937},\"title\":\"Recursion: Right Shift by Division\",\"stats\":{\"completed\":{\"total\":147,\"ratings\":[2,2,2,2,2,2,2,2,4,3,0,1,3,0,2,1,0,2,0,2,1,2,1,3,2,2,2,2,2,0,2,0,1,0,2,1,2,0,1,2,0,1,2,3,3,1,2,0,2,2,1,2,2,2,0,1,0,0,1,1,1,1,1,1,0,2,0,2,2,2,2,1,3,1,2,0,2,2,3,2,1,1,2,3,1,2,2,2,2,2,1,0,3,2,2,2,2,1,2,2,0,2,1,0,1,2,1,1,2,1],\"quality\":[4,5,3,5,5,3,5,2,5,5,4,5,5,5,5,5,5,5,5,5,5,3,4,5,4,4,5,5,5,5,5,5,5],\"rators\":[\"a777e8chPvJkY3tKa\",\"Yp7uvStL97cC9fKkY\",\"oBcs8GLX2ZFLXQy8y\",\"gJYuGdkXEWWmGRLzu\",\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\",\"HF28xZKSLM9wEuqNg\",\"iS5BrkGLzJyPK7nKt\",\"QRv96jmNaYsWkxQEG\",\"xn7uGNKeAwPEkP9oA\",\"fznzd3qnvtbFkkizz\",\"8FDr3RAEEoBM65b2W\",\"gXTAie79kiw28tx5u\",\"yjtdwc2AC4jA2RWtn\",\"8JyqsSbN2FJXPr3cw\",\"bvmTE46bfcM4ogj34\",\"DPi9QGLctq2y76KuE\",\"FEYpu9RWysAgW3XnP\",\"RGMbFMZXJr7DhcAJy\",\"zd9FLSzsGz3evKafy\",\"gb9rvGus2Jv7bjZSs\",\"s5M5RvgqR9BhB9JoC\",\"ntaGcjhFbafszWWZ7\",\"PXAcsKkssS2yLyDv2\",\"oyKcm3zqdy8Ko5P5d\",\"oKxB5B8MaduGWA5mG\",\"dBzwBtRjZqB98DJeB\",\"HqmxnQJM66Y57twhn\",\"rfyEkETeoS96QNH4e\",\"d8qtzoLB264iP8tdY\",\"5S9nX4rKsnCcnv4Cz\",\"5HCu9Ydd86QgHDRNP\",\"nFbmNzMQ38TncmfQX\",\"fHEMvkx7iEuHQSFAT\",\"buX4mCQhtXCfBjeno\",\"Jqk2uJZZxEv5wZFze\",\"HuNF3xTBzmatyGSTm\",\"wRttWTM59y8m5mx7x\",\"2QGRoQn2dRq3scu7k\",\"8zpop35hZD4Acso4a\",\"yod5YhKtPqw2GfG9B\",\"2fxapKr8XGdNeaKi2\",\"aAFKLxcnBD2ZrdDnJ\",\"DEDniTrstQYGounXT\",\"Ds7L5bksw2QRHjrKL\",\"TdNEA4FjoYevkQrwF\",\"9pzFiFK3ANLjQfnr2\",\"xFPM4HuY3mGAdMmsD\",\"c7uBxu2rgY77H5d79\",\"qAby4AWXmTNeusvg3\",\"52LKhrt3s9TMq83ug\",\"cR3ibTMxLyEdDFCHY\",\"J5XA7GwQmxT8x4FSN\",\"J5T8gZqiZXFuFDTQ7\",\"AFfw7cGg83uYk2Miy\",\"Nkazz5xyYuWgdEXM5\",\"sKfrD9gjCDHuqLzSk\",\"iaKGLhDb7sGYGZivM\",\"YcCLwitFMAEJSnxAW\",\"sHjfbGQGLHE6JR6qu\",\"iojEnnY9FsMfYzp6f\",\"EouX7khMFbt7yargP\",\"CHvzhtXnv8HTbPQ56\",\"CHifBvtfPCmBwY49q\",\"ayqtxdYoDCcWuyXL7\",\"H9KZi2cjt4FwH7qog\",\"T6iBEE2jp7f7iEF2P\",\"s7PAdYARQvr8scq84\",\"66a9xX73nmTEuKs9k\",\"eMuCpJ2spXWkJjWNz\",\"8BFSTCnoe2QggN64c\",\"M2gFMJkocQSY6bsFR\",\"NzbRqGWspQnWMoDrF\",\"AQSqD9oNv2uPfxZCR\",\"LKQSg9kLaihwxhMrp\",\"BrTDhPJcACL2bsrpJ\",\"FxbTzThBiTnRzfirA\",\"GTKsdeEihE636Le9i\",\"2PufnQcsHsfymufX3\",\"5XiuAqicKD4hBdu63\",\"dvj7QJQ2merTtndan\",\"yr822PZmmiDDenxpB\",\"c2q7mY39z5JPEMCaM\",\"PJQJDjZaBxTXu4FyG\",\"ymkXtTnosytBeaGsY\",\"RoGGD5cpHb4ftdLDv\",\"9ivvGvJGvtQfigQaZ\",\"goDqftZj4KxfgZGFF\",\"QWBv9WzRMBqyuff5r\",\"YYA6ym2BKXvqwZK37\",\"jkys684AAfPRxrYaD\",\"zQjd4Bdg3gnaFFrWo\",\"AasGs8AeX9Lcb9xJn\",\"TRgrEgt4om7omivJk\",\"3cF6NXq3ZEwdkgSjb\",\"R6YxHWAiLgKwy5YvC\",\"rrSC943cCKNG48sH4\",\"Cc2Cgj4MWXZxsTooC\",\"AJexRBN9cYQmqvYu6\",\"qD2LrwaDrSdiybLKY\",\"MSpQ9cSg39BZANxad\",\"zQqHW7bmGZ8eWCegs\",\"wZ22E8EXW4qasgru2\",\"qzXAMXsHZGT8o5hTA\",\"RGxcgGLNWPCeSaPFb\",\"kfbi7pFdxoEGg7Zfr\",\"pduNK68oazqQTtbLp\",\"tAF9Gf6PiGogbZuWs\",\"hR7GMiqGap4CzEWSy\",\"2iFe3EHEH2YdhSKrs\",\"XD5nmvKQchKezPXhy\",\"J3upzLHuEwXH7Z2hx\",\"YA7SDhpgEtsqynvNL\",\"bHRHToekryQRvePkE\",\"PH32cNxBjrK4a28sn\",\"iYDpvfvpGcTxnBnsf\",\"HXNJmuqJxkhxZquTq\",\"4TmgHkn5vqyHK3sYC\",\"dYPkStFnLvAMsHSzZ\",\"GGi3NsHCianJWDEAm\",\"u5u2YpHXiNgzDNJdX\",\"rhS8qXRjZcpDXkwnE\",\"Y2shwstM9H7LXY32a\",\"9ocTaRo8g8nc3KZW7\",\"n5JekhketepF4XeRA\",\"ZvoqkwZQC52on5hpY\",\"r3kxmsTvLqqjk3axy\",\"yAouD3PxzED8a4gap\",\"mxX4rH5ELYkdZ2Mbw\",\"txLYNqTJXJ2o76C6k\",\"2qtde7moqrzm7B4Ht\",\"5CsHudxuDESxmjTPW\",\"5QN8R22z43SrwoHDz\",\"K5DFwo9KgKwDZ32BQ\",\"DQ6wXBdjkC7ar56So\",\"Wi4H6ayKsNDWWQCG5\",\"xRLB3T2b3Fo2MiCmg\",\"EW2w4yPcfTTLD4Fg2\"]},\"flags\":0},\"editorId\":\"a777e8chPvJkY3tKa\",\"family\":[{\"_id\":\"j3pBTZLXSo7JJ2iAy\",\"language\":\"java\"},{\"_id\":\"CtxRSuGhry3XK7wjh\",\"language\":\"javascript\"},{\"_id\":\"v34oCTbkrceCZjgRE\",\"language\":\"python3\"}]}}"]