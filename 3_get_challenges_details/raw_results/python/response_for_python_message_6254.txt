a["{\"msg\":\"result\",\"id\":\"1837\",\"result\":{\"_id\":\"XDgNNWhxKemaurSGB\",\"author\":\"Matsuda Nobuyuki\",\"authorId\":\"LQxof8pGabGuWP7Gn\",\"code\":\"def k_th_binary_inlist(n, k):\\n\\t\",\"difficulty\":2.543859649122807,\"editorId\":\"LQxof8pGabGuWP7Gn\",\"familyId\":\"pA229C29iEMr8Tq37\",\"instructions\":\"Given two positive integers `n` and `k`, generate all binaries between the integers 0 and (2^n) - 1 , inclusives. These binaries will be sorted in descending order according to the number of existing 1s on it, if there is a tie, we choose the lowest numerical value. Return the k-th element from the sorted list created.\\n\\nFor `n = 3` and `k = 5` for exemple, the numbers from 0 to 7 (7 = (2^3)  - 1), make the binary list:\\n\\n```\\n[\\\"0b0\\\", \\\"0b1\\\", \\\"0b10\\\", \\\"0b11\\\", \\\"0b100\\\", \\\"0b101\\\", \\\"0b110\\\", \\\"0b111\\\"]\\n```\\n\\nWhen sorted by the rules, we have:\\n\\n```\\n[\\\"0b111\\\", \\\"0b11\\\", \\\"0b101\\\", \\\"0b110\\\", \\\"0b1\\\", \\\"0b10\\\", \\\"0b100\\\", \\\"0b0\\\"]\\n```\\n\\nAnd \\\"0b1\\\" is the fifth element on it.\\n\\n### Examples\\n```\\nk_th_binary_inlist(3, 5) ➞ \\\"0b1\\\"\\n# [\\\"0b111\\\", \\\"0b11\\\", \\\"0b101\\\", \\\"0b110\\\", \\\"0b1\\\", \\\"0b10\\\", \\\"0b100\\\", \\\"0b0\\\"]\\n\\nk_th_binary_inlist(4, 10) ➞ \\\"0b1010\\\"\\n# [\\\"0b1111\\\", \\\"0b111\\\", \\\"0b1011\\\", \\\"0b1101\\\", \\\"0b1110\\\", \\\"0b11\\\", \\\"0b101\\\", \\\"0b110\\\", \\\"0b1001\\\", \\\"0b1010\\\", \\\"0b1100\\\", \\\"0b1\\\", \\\"0b10\\\", \\\"0b100\\\", \\\"0b1000\\\", \\\"0b0\\\"]\\n\\nk_th_binary_inlist(5, 16) ➞ \\\"0b11100\\\"\\n# [\\\"0b11111\\\", \\\"0b1111\\\", \\\"0b10111\\\", \\\"0b11011\\\", \\\"0b11101\\\", \\\"0b11110\\\", \\\"0b111\\\", \\\"0b1011\\\", \\\"0b1101\\\", \\\"0b1110\\\", \\\"0b10011\\\", \\\"0b10101\\\", \\\"0b10110\\\", \\\"0b11001\\\", \\\"0b11010\\\", \\\"0b11100\\\", \\\"0b11\\\", \\\"0b101\\\", \\\"0b110\\\", \\\"0b1001\\\", \\\"0b1010\\\", \\\"0b1100\\\", \\\"0b10001\\\", \\\"0b10010\\\", \\\"0b10100\\\", \\\"0b11000\\\", \\\"0b1\\\", \\\"0b10\\\", \\\"0b100\\\", \\\"0b1000\\\", \\\"0b10000\\\", \\\"0b0\\\"]\\n```\\n\\n### Notes\\nN/A\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(k_th_binary_inlist(3, 5), '0b1')\\nTest.assert_equals(k_th_binary_inlist(4, 10), '0b1010')\\nTest.assert_equals(k_th_binary_inlist(5, 16), '0b11100')\\nTest.assert_equals(k_th_binary_inlist(10, 5), '0b1110111111')\\nTest.assert_equals(k_th_binary_inlist(7, 10), '0b101111')\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[4,4,4,4,4,5,3,5,5,2,0,4,5,4,2,3,0,2,1,0,3,2,1,4,3,3,0,3,4,1,4,2,1,1,3,3,2,2,0,1,2,2,2,2,2,2,2,3,2,4,0,3,2,2,4,4,3],\"rators\":[\"LQxof8pGabGuWP7Gn\",\"tAF9Gf6PiGogbZuWs\",\"Nb6LYPoQP6KJZt8mz\",\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\",\"3MybBtCNPcFHLMYmJ\",\"5dHucvf2qBYyKim7X\",\"aCNWav8S8Try9RkC6\",\"a777e8chPvJkY3tKa\",\"s5M5RvgqR9BhB9JoC\",\"RK7vGaBqoofrAGKj3\",\"n9DbcPwhotC5XbfN3\",\"Ecg4m7srYGgZsb4Ck\",\"bJxaKHJqR82EWw8Su\",\"qPpQfR5KyDb5Y3EFf\",\"9XNbjEKxsC89aX6ae\",\"wWkBEtKAmWkdp9uBm\",\"J83b6T9hJ2EqE5Aov\",\"rbFTTxs6S4D9TxByN\",\"WzEhzQcMwc4sw8z7T\",\"xn7uGNKeAwPEkP9oA\",\"v9KtC8YLbMWmXiW2H\",\"HF28xZKSLM9wEuqNg\",\"mDWNyaaQ9hvPCRzSd\",\"Z85ajWfZ4jDPkbvR4\",\"iS5BrkGLzJyPK7nKt\",\"p8qqFdJ3FSk5x9z3G\",\"yTtSCvGPyYna6JuRC\",\"8sNv5PTHa7XQ8bNqR\",\"iojEnnY9FsMfYzp6f\",\"gJYuGdkXEWWmGRLzu\",\"yjtdwc2AC4jA2RWtn\",\"2PufnQcsHsfymufX3\",\"AasGs8AeX9Lcb9xJn\",\"hkiz2Nv927cYGrA86\",\"H9KZi2cjt4FwH7qog\",\"HqmxnQJM66Y57twhn\",\"fznzd3qnvtbFkkizz\",\"HYdcFMMetnDh2TNrq\",\"oBcs8GLX2ZFLXQy8y\",\"GTKsdeEihE636Le9i\",\"NktzkEe4NYpHsjwps\",\"fbr22rabEJMfBp7vD\",\"x9F5WvWftdnhG7DqT\",\"JKb5rhL6DKcCAypF9\",\"iqmPb9JuJDgTFeR8Q\",\"Rk54WG323KeT6odSb\",\"suArq5BbSy7gD6xri\",\"T6iBEE2jp7f7iEF2P\",\"NoHuCQajN39Yn7CaZ\",\"GYPn3K9H8QfQDTqyM\",\"dAZqZYT9hX5Lf2X6L\",\"pnzfNatg3P32mMYQY\",\"fSQSHjW3e72MrWxbD\",\"uBmbQRboE9NJNvRx3\"],\"total\":59,\"quality\":[5,5,5]},\"flags\":0},\"summary\":\"Given two positive integers n and k, generate all binaries between the integers 0 and (2^n) - 1 , inclusives. These binaries will be sorted in descending order according to the number of existing 1s on it, if there is a tie, we choose the lowest numerical value. Return the k-th element from the sorted list created.\\n\\nFor n = 3 and k = 5 for exemple, the numbers\",\"tags\":[\"algorithms\",\"logic\",\"sorting\",\"data_structures\"],\"timestamp\":{\"$date\":1591640353455},\"title\":\"K-th Element of a Binary Sorted List\",\"quality\":5,\"family\":[{\"_id\":\"qpuBk4f7StQhADNSE\",\"language\":\"javascript\"},{\"_id\":\"XDgNNWhxKemaurSGB\",\"language\":\"python3\"}]}}"]