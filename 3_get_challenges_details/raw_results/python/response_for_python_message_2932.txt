a["{\"msg\":\"result\",\"id\":\"191\",\"result\":{\"_id\":\"8wtTo5Czcgm9Q6bPc\",\"author\":\"serf\",\"authorId\":\"7q8oBsCHwn48Ppnrq\",\"code\":\"def find_single_number(numbers):\\n\\t\",\"difficulty\":0.5590062111801242,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"uKxbmJew2udFog84x\",\"instructions\":\"Create a function that takes a list of integers as an argument and returns a unique number from that list. All numbers except unique ones have *the same number of occurrences* in the list.\\n\\n### Examples\\n```\\nfind_single_number([2, 2, 2, 3, 4, 4, 4]) ➞ 3\\n\\nfind_single_number([2]) ➞ 2\\n\\nfind_single_number([]) ➞ None\\n\\nfind_single_number([7, 13, 3, 6, 5, 4, 4, 13, 5, 3, 6, 7, 6, 5, 3, 13, 4, 7, 13, 5, 7, 4, 3, 6, 8, 4, 3, 7, 5, 6, 13]) ➞ 8\\n\\nfind_single_number([1, 2, 3, 6, 5, 4, 4, 2, 5, 3, 6, 1, 6, 5, 3, 2, 4, 1, 2, 5, 1, 4, 3, 6, 101, 4, 3, 1, 5, 6, 2]) ➞ 101\\n```\\n\\n### Notes\\n- Don't forget to `return` the result.\\n- Be aware this challenge includes two validations:\\n    1. Empty input should return `None` (example #3).\\n    2. Single item lists should return that item (example #2).\\n- There are always 1 or 0 unique numbers in the input. No two or three+ uniques.\\n- Hint: Try using Python's `set()`\\n- If you're stuck or your solution is over complicated check the **Resources** tab.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(find_single_number([2,2,2, 3, 4,4,4]), 3, \\\"Example 1. Others: 2, Multiplier: 2\\\")\\nTest.assert_equals(find_single_number([415]), 415, \\\"Example 2 - list of len 1. Multiplier: 0; Others: 0; Unique: 415\\\")\\nTest.assert_equals(find_single_number([]), None, \\\"Example 3 - no input. Works with empty input.\\\")\\nTest.assert_equals(find_single_number([7,13,3,6,5,4,4,13,5,3,6,7,6,5,3,13,4,7,13,5,7,4,3,6,8,4,3,7,5,6,13]), 8, \\\"Example 4. Multiplier: 5, Others: 6, Unique: 8\\\")\\nTest.assert_equals(find_single_number([1, 2, 3, 6, 5, 4, 4, 2, 5, 3, 6, 1, 6, 5, 3, 2, 4, 1, 2, 5, 1, 4, 3, 6, 101, 4, 3, 1, 5, 6, 2]), 101, \\\"Example 5. Multiplier: 5; Others: 6; Unique: 101\\\")\\nTest.assert_equals(find_single_number([1, 2, 2, 3, 3]), 1, \\\"Works when unique is first. Multiplier: 2; Others: 2; Unique: 1\\\")\\nTest.assert_equals(type(find_single_number([243, 70, 18, 60, 284, 148, 418, 360, 727, 791, 325])), int, \\\"Works when any answer is correct. Multiplier: 1; Others: 10; Unique: 325.\\\")\\nTest.assert_equals(find_single_number([364, 938, 123, 686, 111, 227, 802, 667, 35, 858, 364, 938, 123, 686, 111, 227, 802, 667, 35, 858, 364, 938, 123, 686, 111, 227, 802, 667, 35, 858, 364, 938, 123, 686, 111, 227, 802, 667, 35, 858, 364, 938, 123, 686, 111, 227, 802, 667, 35, 858, 497]), 497, \\\"Random input. Multiplier: 5; Others: 10; Unique: 497\\\")\\nTest.assert_equals(find_single_number([116, 621, 698, 894, 96, 630, 291, 327, 911, 350, 116, 621, 698, 894, 96, 630, 291, 327, 911, 350, 521]), 521, \\\"Random input. Multiplier: 2; Others: 10; Unique: 521\\\")\\nTest.assert_equals(find_single_number([215, 784, 22, 979, 118, 121, 854, 742, 912, 32, 215, 784, 22, 979, 118, 121, 854, 742, 912, 32, 215, 784, 22, 979, 118, 121, 854, 742, 912, 32, 215, 784, 22, 979, 118, 121, 854, 742, 912, 32, 215, 784, 22, 979, 118, 121, 854, 742, 912, 32, 215, 784, 22, 979, 118, 121, 854, 742, 912, 32, 215, 784, 22, 979, 118, 121, 854, 742, 912, 32, 215, 784, 22, 979, 118, 121, 854, 742, 912, 32, 444]), 444, \\\"Random input. Multiplier: 8; Others: 10; Unique: 444\\\")\\nTest.assert_equals(find_single_number([698, 285, 150, 761, 497, 353, 411, 698, 285, 150, 761, 497, 353, 411, 698, 285, 150, 761, 497, 353, 411, 698, 285, 150, 761, 497, 353, 411, 698, 285, 150, 761, 497, 353, 411, 698, 285, 150, 761, 497, 353, 411, 719]), 719, \\\"Random input. Multiplier: 6; Others: 7; Unique: 719\\\")\\nTest.assert_equals(find_single_number([277, 348, 101, 277, 348, 101, 277, 348, 101, 277, 348, 101, 277, 348, 101, 277, 348, 101, 803]), 803, \\\"Random input. Multiplier: 6; Others: 3; Unique: 803\\\")\\nTest.assert_equals(find_single_number([236, 115, 653, 347, 773, 336, 236, 115, 653, 347, 773, 336, 236, 115, 653, 347, 773, 336, 236, 115, 653, 347, 773, 336, 236, 115, 653, 347, 773, 336, 236, 115, 653, 347, 773, 336, 236, 115, 653, 347, 773, 336, 236, 115, 653, 347, 773, 336, 878]), 878, \\\"Random input. Multiplier: 8; Others: 6; Unique: 878\\\")\",\"language\":\"python3\",\"quality\":4.612244897959184,\"stats\":{\"completed\":{\"ratings\":[0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,0,0,2,1,0,1,3,0,2,0,0,1,1,1,2,1,0,2,0,1,5,0,0,0,0,1,0,1,0,0,1,0,2,1,0,1,0,0,0,1,0,2,0,1,0,0,1,0,4,1,1,0,0,0,0,0,0,0,0,1,0,1,2,1,0,2,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,1,0,0,1,2,0,0,1,2,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,1,0,1,1,0,1,1,0,0,1,1,0,0,0,0,1,1,1,0,2,0,0,1,2,0,0,1,1,0,2],\"quality\":[5,5,5,5,3,4,5,5,5,5,5,5,3,5,5,5,5,5,5,5,4,5,4,5,5,5,5,3,5,5,4,5,5,2,4,5,5,5,5,5,5,2,5,5,5,5,5,3,5],\"rators\":[\"7q8oBsCHwn48Ppnrq\",\"PXAcsKkssS2yLyDv2\",\"5f6oSeq4r5WTXLdCQ\",\"pPpmP7xeJzGgK362R\",\"HBuJYgW2eRBJp9FoG\",\"vg43oLPjihrqgnSAR\",\"Yp7uvStL97cC9fKkY\",\"3hSzE837A9SKsi5X4\",\"itDmXLiDsbbXaxdz3\",\"nnE2Pr8kGshxpyySJ\",\"gJYuGdkXEWWmGRLzu\",\"wP9nXnzh7Gw4abY4f\",\"eYfPWvZwnJQkHbSTK\",\"qNszsXx28cTxvGSNj\",\"tc8BHcoyKwENoHWk6\",\"YRAzEBJoLvSaiPtYx\",\"sX9GZp3fYyQLrBKMJ\",\"eEK5MpDgtJyYtZzuM\",\"MXGuntvz3byrP6WJc\",\"zphbCZtGTT8gNrRCn\",\"buX4mCQhtXCfBjeno\",\"9pzFiFK3ANLjQfnr2\",\"2MjzJ7yxh3eT3xbng\",\"PTDFuxAzou7W6asWt\",\"iS5BrkGLzJyPK7nKt\",\"GdKtjPh8TcfmJuduv\",\"srJ34BaybkQh3qRkM\",\"zd9FLSzsGz3evKafy\",\"yjtdwc2AC4jA2RWtn\",\"DEDniTrstQYGounXT\",\"wRttWTM59y8m5mx7x\",\"QRv96jmNaYsWkxQEG\",\"jWbd7SYDzLPjc9EDh\",\"fTNQmMvTZhhiGBCMe\",\"m7KZ5donpz5F6AR3z\",\"5HCu9Ydd86QgHDRNP\",\"AXcnPX68zdMiLNSmu\",\"qeNdjzLsKFqxbyFBe\",\"N2wnZXkhDH86mgjQ8\",\"JS3hNM3XXkxPdg3yk\",\"8PwfYqoDQFThzNtvf\",\"FEYpu9RWysAgW3XnP\",\"DPi9QGLctq2y76KuE\",\"Ds7L5bksw2QRHjrKL\",\"jL4y5fTJAMBjhZmko\",\"J5T8gZqiZXFuFDTQ7\",\"J3upzLHuEwXH7Z2hx\",\"eMuCpJ2spXWkJjWNz\",\"Jqk2uJZZxEv5wZFze\",\"oBcs8GLX2ZFLXQy8y\",\"Fk9kLwoG4Brf4KsKf\",\"YcCLwitFMAEJSnxAW\",\"eBMLEx6cMiWpeKfP2\",\"XD5nmvKQchKezPXhy\",\"7dQYiDeTcMztbGyso\",\"AFfw7cGg83uYk2Miy\",\"ghMkPtdFCpM6w8nax\",\"8teSHp77vHhhvJWiS\",\"gb9rvGus2Jv7bjZSs\",\"tAF9Gf6PiGogbZuWs\",\"jNvegJWCk5HCtEMbK\",\"PC3pLs36zNzpRDSuE\",\"q6QsMYNMpPNtmyTeW\",\"JhX7jvtpwNyxcc39m\",\"cR3ibTMxLyEdDFCHY\",\"3cF6NXq3ZEwdkgSjb\",\"uvLimfW9x3bCp7huQ\",\"yAouD3PxzED8a4gap\",\"5uj4mTXdaDL3wLDWw\",\"8JyqsSbN2FJXPr3cw\",\"qAby4AWXmTNeusvg3\",\"oaJbwGAbtpgYhMEgd\",\"aEm3Wvj2rFYRL8Lrb\",\"kjvgTyRFyKHv44DcH\",\"4bb7pim4ewTwrMTEA\",\"CHvzhtXnv8HTbPQ56\",\"6LbPw9yW6HHDfn8B8\",\"Nb6LYPoQP6KJZt8mz\",\"NrRa4TS6uZR9xuXRt\",\"iojEnnY9FsMfYzp6f\",\"i5iePG5GqhJJ8HEoB\",\"2QGRoQn2dRq3scu7k\",\"gjiu8kLnHYxe4HoBN\",\"JKbEBybAsiKrmcqof\",\"pwWtbXEjzuvrhEGwt\",\"zC8WrPp5BC6c2exrW\",\"Q6gEE9dG8ERy2Xu3c\",\"66a9xX73nmTEuKs9k\",\"T6iBEE2jp7f7iEF2P\",\"XrqNzJ2FRG8HnGiR6\",\"YmQb9Mo4Xcg2vzgbn\",\"fdyejapW3NWN7utPX\",\"4TmgHkn5vqyHK3sYC\",\"9Ly8afdtofp8DXzrt\",\"mxX4rH5ELYkdZ2Mbw\",\"iYXdNw7tKcgA3QwBX\",\"Cg3LKtEAJpsrdWroG\",\"RTER5uJdW4khkiNbY\",\"jgyuzt5BpA3ohHG96\",\"mvJBakQ35CWAnbbEZ\",\"T6Rm8mREPMZSftzrC\",\"a2Kmh6ekWqQQooHiQ\",\"H9KZi2cjt4FwH7qog\",\"j7ebNFtte6fSkMWjj\",\"Dq24MSpogRmq6L4hX\",\"jkbavR2ATFJcpmo8M\",\"DTyNcDkiScCjgJt28\",\"JiSpvq6C7azQEmENc\",\"AasGs8AeX9Lcb9xJn\",\"sbJcFfQjQ59Wfg4Cd\",\"DFpZcskPncmo7fuzR\",\"FxbTzThBiTnRzfirA\",\"HqmxnQJM66Y57twhn\",\"sHjfbGQGLHE6JR6qu\",\"Afnps7TJQuS9sipMb\",\"hRfdHT8bWztZuCqzi\",\"C9LKGu2g5hSijvDzA\",\"d8qtzoLB264iP8tdY\",\"TCvpT4EPb8qNssNB7\",\"MKT7khMBGXzA22ykf\",\"gKnWjDjwrJh7MK2df\",\"pQwhNKiCne4gEZgcn\",\"FiaTpm7ehfDv43wSG\",\"x2Cz7S8rCKJqCE3Xe\",\"CyzskHGsC6WSmYrLu\",\"cdXmwjupCXSvJTSNo\",\"SkQcb2sRn4as5KpnN\",\"PH32cNxBjrK4a28sn\",\"FRN2W8RYpJ6GPhgRy\",\"aN6owKqBeZj7ZefFR\",\"dYPkStFnLvAMsHSzZ\",\"d9LBRxvADNBB5QJMB\",\"NYyhWY7soeTZ6ymd5\",\"9LrF5o2TK2iE8BZJh\",\"5nbHH4eApn6So9h2n\",\"uK58g2EXxqxTaB2iA\",\"5QN8R22z43SrwoHDz\",\"qaPjAANdnxFnWfj5d\",\"fGvJRtjbJFJJZLCnW\",\"B4y8aoyXJtskYPFEL\",\"PmRyaLmhAF4MMLBtM\",\"gSFDLkHY8JxiAMB8W\",\"AQSqD9oNv2uPfxZCR\",\"PBnvAuiKXwjqjKG33\",\"dzS6WBTMHyFEag6Fp\",\"9HPB28hBoTnZnspQE\",\"o2Q8uM5DwJnSRmerd\",\"rhS8qXRjZcpDXkwnE\",\"wjc4iejpErBhxWwHo\",\"xjyixzXzqqqTfJARd\",\"rF97GDLqCgynr7BaD\",\"3SgSNoAB3sxaYeT3w\",\"Ne8mK9DDHG8TRkoxG\",\"gbGzZz5Yq5hT357v8\",\"suArq5BbSy7gD6xri\",\"afvP29FhRou2bTaav\",\"mw9464S5dnenqzvpm\",\"vAbK8sCfKyFC78HYg\",\"r83jJeskFETo3RLhZ\",\"M2gFMJkocQSY6bsFR\",\"jcPZ5ySXseCB7Ec3x\",\"M4vq8ATaS9Jg5X7iP\",\"NzbRqGWspQnWMoDrF\",\"5H6WybGSZcsxZnLAW\",\"cz3wdxxPWoedzT3LS\",\"QWjsXnLaJ7xfL3Amq\",\"G5GDMsf9eAdib7cew\",\"fMp8sPsKSECdfgF9j\",\"sKfrD9gjCDHuqLzSk\",\"peCvTbjQBgdWo53Wv\",\"BrTDhPJcACL2bsrpJ\",\"pduNK68oazqQTtbLp\",\"H469XosMjfNu8Fop7\",\"E45zy9qvm9DeJhDWL\",\"QN4FPwhiak7Pf8kn6\",\"rQA9SE8nuwFueaHsR\",\"FT2wBacm3JxrYmZDW\",\"4sSXLSBZDxK2Swoo7\",\"hZ2JDAEG2P5rMLWEW\",\"M8dQuMrEpP8Hc3tHN\",\"acENs2fSF9d7hkTZx\",\"XaLb6P8xu4JH7qooB\",\"3LiSLdtN58n46NEqg\",\"4Lwjr34ypKNQNQCar\",\"EE6qCDCRphjXXdE3n\",\"9qoWqLcHGiDX429rE\",\"w3QDkmjZj2dAFDsjq\",\"rrSC943cCKNG48sH4\",\"acFDzp9EJzHg8c2rD\",\"F8dA24AosSC8XXb7D\",\"2qtde7moqrzm7B4Ht\",\"4ZyLqTQ9e6hrh26H5\",\"quYcmxS33qHALzb4Z\",\"dCHJHgKdWNMGaAA7W\",\"XYwCvWPkjJu4Zn5Qu\",\"xEcNtxzHMzzzNrisj\",\"ecytnKJxjCPk8Kbif\",\"szQg8dxKNNre3v3Jk\",\"FMyZPN6odEFtfuimF\",\"Cnx3Ss6zhhKExXxbC\",\"5CsHudxuDESxmjTPW\",\"FGEeCTorXbX3WvjFW\",\"K6S8HCswXg68EWHmo\",\"CTW3MRyc4wNkcjGZQ\",\"7HAL7H6NJmc4NC8Q5\"],\"total\":216},\"flags\":0},\"summary\":\"Create a function that takes a list of integers as an argument and returns a unique number from that list. All numbers except unique ones have the same number of occurrences in the list.\\n\\nExamples\\nfindsinglenumber([2, 2, 2, 3, 4, 4, 4]) ➞ 3\\n\\nfindsinglenumber([2]) ➞ 2\\n\\nfindsinglenumber([]) ➞ None\\n\\nfindsinglenumber([7, 13, 3, 6, 5, 4, 4, 13, 5, 3, 6, 7, 6, 5, 3,\",\"tags\":[\"arrays\",\"numbers\",\"language_fundamentals\"],\"timestamp\":{\"$date\":1608729112705},\"title\":\"Find Unique Number in List\",\"family\":[{\"_id\":\"yCYP2SB3utSJDqxYW\",\"language\":\"cpp\"},{\"_id\":\"pkJWJAvpnqp6rCY9y\",\"language\":\"javascript\"},{\"_id\":\"8wtTo5Czcgm9Q6bPc\",\"language\":\"python3\"},{\"_id\":\"LGkwJDXCp2grGwKqg\",\"language\":\"ruby\"}]}}"]