a["{\"msg\":\"result\",\"id\":\"1032\",\"result\":{\"_id\":\"frRRffQGSrPTknfxY\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def digit_count(n):\\n\\t\",\"difficulty\":1.530612244897959,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"wi8uRzqS5NpjTutG8\",\"instructions\":\"Given a number, create a function that returns a new number based on these rules:\\n- For each digit, replace it by the number of times it appears in the number.\\n- The final instance of the number will be an integer, not a string.\\n\\n### Worked Example\\n```\\ndigit_count(136116) ➞ 312332\\n# The number 1 appears thrice, so replace all 1s with 3s.\\n# The number 3 appears only once, so replace all 3s with 1s.\\n# The number 6 appears twice, so replace all 6s with 2s.\\n# Return as an integer.\\n```\\n\\n### Examples\\n```\\ndigit_count(221333) ➞ 221333\\n\\ndigit_count(136116) ➞ 312332\\n\\ndigit_count(2) ➞ 1\\n```\\n\\n### Notes\\nAll test input will be positive whole numbers.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(digit_count(221333), 221333)\\nTest.assert_equals(digit_count(136116), 312332)\\nTest.assert_equals(digit_count(2), 1)\\nTest.assert_equals(digit_count(3410515780), 1122222112)\\nTest.assert_equals(digit_count(24677734541), 13133313131)\\nTest.assert_equals(digit_count(79825929634), 13121323111)\\nTest.assert_equals(digit_count(36123594675), 22112211212)\\nTest.assert_equals(digit_count(62849835970), 11212211211)\\nTest.assert_equals(digit_count(29081455325), 21111133123)\\nTest.assert_equals(digit_count(94717270184), 12323131212)\\nTest.assert_equals(digit_count(72017589759), 31113212322)\\nTest.assert_equals(digit_count(53569357419), 32312231112)\\nTest.assert_equals(digit_count(33879999825), 22214444211)\\nTest.assert_equals(digit_count(33600360627), 33333333311)\\nTest.assert_equals(digit_count(12594580129), 22221211222)\\nTest.assert_equals(digit_count(36852564216), 13122231213)\\nTest.assert_equals(digit_count(34415793631), 32221113132)\\nTest.assert_equals(digit_count(76384607724), 32112213312)\\nTest.assert_equals(digit_count(8604519582), 2111211221)\\nTest.assert_equals(digit_count(70209476552), 22221121222)\\nTest.assert_equals(digit_count(20036302062), 34422243423)\\nTest.assert_equals(digit_count(77674727011), 55151515122)\\nTest.assert_equals(digit_count(17597066090), 12122322323)\\nTest.assert_equals(digit_count(79082080537), 21321323112)\\nTest.assert_equals(digit_count(30187177000), 14213233444)\\nTest.assert_equals(digit_count(72916170033), 21121222222)\\nTest.assert_equals(digit_count(11314637247), 33232122122)\\nTest.assert_equals(digit_count(69095956141), 23132322212)\\nTest.assert_equals(digit_count(66117263379), 33222132221)\\nTest.assert_equals(digit_count(30491133624), 31212233112)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[1,1,1,1,1,1,1,1,2,2,2,2,0,1,2,1,2,2,3,1,2,2,2,2,1,1,1,1,1,2,0,2,3,2,2,2,1,2,1,2,1,2,2,0,2,2,2,2,1,1,2,0,3,1,1,1,0,2,2,2,2,1,2,1,2,0,2,3,2,1,1,0,0,2,1,3,1,2,2,2,0,1,2,2,2,2,0,1,2,2,2,2,2,2,1,2,2,1,2,2,2,1,1,0,2,1,2,2,1,1,2,0,1,2,2,2,0,2,1,2,1,2,2,2,2,2,2,2,0,2,2,2,1,2,2,3,2,2,2,0,2,2,1,2,1,2,2],\"rators\":[\"PXAcsKkssS2yLyDv2\",\"AxhSijX9d753Adpfc\",\"Mq9DjdWLR4TKQDaxo\",\"YwSoqEZERJSJf2aAa\",\"zd9FLSzsGz3evKafy\",\"qtaFXjzR5MWY294HZ\",\"t4A2EyYX6z8ngfwnk\",\"hRiMXDZNAzyPd5tpt\",\"C8Gd66wwGagHmj2t8\",\"fQ8KrFQ7HB9twH7PP\",\"4hWjYDZsdixzvKbqQ\",\"Do6Zvo5NDKQmv9a9g\",\"iojEnnY9FsMfYzp6f\",\"a777e8chPvJkY3tKa\",\"HF28xZKSLM9wEuqNg\",\"H4abACFDH5t8CnnyH\",\"DEDniTrstQYGounXT\",\"8PwfYqoDQFThzNtvf\",\"s5M5RvgqR9BhB9JoC\",\"NNE5HNRXAkmhrWgyQ\",\"NojQykDfP7WjHckg4\",\"FEYpu9RWysAgW3XnP\",\"uJvcvnJDboT6hARXq\",\"Pe8vWpDHRuH9nSGKW\",\"JS3hNM3XXkxPdg3yk\",\"gb9rvGus2Jv7bjZSs\",\"2innwjWqxJHo4eRGh\",\"b9YQPLb9ZPSADdHXX\",\"rgvAJFwfCeYoYnFTK\",\"PtaiHYXnMwb2rWqQW\",\"Yp7uvStL97cC9fKkY\",\"syRNbbPdLCGXbH2Gy\",\"ZMzy8vgb2fcu9JxWh\",\"DJdsqmTeAGDwrgYoZ\",\"CwXsu25ygLEwQbmQC\",\"jNvegJWCk5HCtEMbK\",\"gJYuGdkXEWWmGRLzu\",\"8JyqsSbN2FJXPr3cw\",\"2QGRoQn2dRq3scu7k\",\"ZrKCkX7xxGGZzauFW\",\"mxX4rH5ELYkdZ2Mbw\",\"MKT7khMBGXzA22ykf\",\"tAF9Gf6PiGogbZuWs\",\"3cF6NXq3ZEwdkgSjb\",\"yjtdwc2AC4jA2RWtn\",\"WSLnCZNtpiCrdaXnd\",\"eMuCpJ2spXWkJjWNz\",\"iS5BrkGLzJyPK7nKt\",\"aEm3Wvj2rFYRL8Lrb\",\"GGprTwrkjuccmrQRg\",\"cR3ibTMxLyEdDFCHY\",\"HqmxnQJM66Y57twhn\",\"ta5CrWnBCRusD2WMo\",\"n2BRY9X8899dcG8Bw\",\"R4SjTgDnpigJYDLyL\",\"oBcs8GLX2ZFLXQy8y\",\"6SKDJwXpev4qPSzgM\",\"9pzFiFK3ANLjQfnr2\",\"gSFJPsMXnqAog3Q9f\",\"XrqNzJ2FRG8HnGiR6\",\"AasGs8AeX9Lcb9xJn\",\"6gS4E2C84vBYTYeDZ\",\"2q838RhAci4BssKci\",\"Nb6LYPoQP6KJZt8mz\",\"C9LKGu2g5hSijvDzA\",\"YA7SDhpgEtsqynvNL\",\"M8dQuMrEpP8Hc3tHN\",\"u7i7WPM63n42r8R8o\",\"TPhfpB5tzQWSSn67n\",\"RehJGBFS6CYiWdjZx\",\"w2HhxvSLmDhaGCAjE\",\"orFLgPDw9H5MDzmwo\",\"MRrjdojkTWC8oTrM4\",\"YcCLwitFMAEJSnxAW\",\"ji5f27FPz4wRRF6Ls\",\"PhceyfmFntJcn5Fhf\",\"p8qqFdJ3FSk5x9z3G\",\"NfMJuiBk6FN5Jc6ow\",\"KLmLKaJPfsYxp42p2\",\"FvFhg2wELM3SCZDZQ\",\"k2Eo3wyfZZ6KxvKhN\",\"Ecg4m7srYGgZsb4Ck\",\"Wv2vJnEj8ywNmARoF\",\"Kh3Pc2ZRusurLaMyP\",\"9CoqdidjM9KbeKnHY\",\"tpxMgkGSHwBjS95Ta\",\"EMJ6uvBZkie429gdg\",\"mG8HqKiAQFTdRZthG\",\"gXTAie79kiw28tx5u\",\"d8qtzoLB264iP8tdY\",\"b5zo7s6xrqWgQnPao\",\"oXdhczMThyirgM2eN\",\"DYDJTyGgKFnBRLm2r\",\"QRv96jmNaYsWkxQEG\",\"kNrnnMxhFZztMTBAX\",\"DPi9QGLctq2y76KuE\",\"5HCu9Ydd86QgHDRNP\",\"JFyJpEFhbNLt2vzDQ\",\"wRttWTM59y8m5mx7x\",\"9dgvEreRDYRiwLmYv\",\"7K2GEb5TZRtSpyyGS\",\"8WpvgSbQciTQWdd8T\",\"dj5AyG5fWP8FdsSmZ\",\"NuqGt5u3s7vJ7HBGR\",\"YRAzEBJoLvSaiPtYx\",\"dBzwBtRjZqB98DJeB\",\"J3upzLHuEwXH7Z2hx\",\"dYPkStFnLvAMsHSzZ\",\"8fZxjQfuXw5HMSRJM\",\"KJCDwGkoXh8qtbbKr\",\"RGMbFMZXJr7DhcAJy\",\"5XiuAqicKD4hBdu63\",\"g9FyJ8yeT9ic97Qp2\",\"ihWWwoyPrvHSZeQy3\",\"J23RcmzbdtBbPCTjT\",\"axdSNLZpiCDF8RS6n\",\"J5T8gZqiZXFuFDTQ7\",\"Jqk2uJZZxEv5wZFze\",\"HuNF3xTBzmatyGSTm\",\"C2AfMipCicfD58WJ9\",\"LQxof8pGabGuWP7Gn\",\"sHjfbGQGLHE6JR6qu\",\"qZQxPQ2kaNKAMesHT\",\"buX4mCQhtXCfBjeno\",\"abCKW9EmBinFsr7KG\",\"5hQnRWiKkhgKJXNMP\",\"o4ixjQGSaYqA2JoM4\",\"5S9nX4rKsnCcnv4Cz\",\"GGdmhAvxXhqhhibJN\",\"eYfPWvZwnJQkHbSTK\",\"utTuvGdmu2sBHWBhQ\",\"GqothajHR2vKfEHGZ\",\"JhX7jvtpwNyxcc39m\",\"jL4y5fTJAMBjhZmko\",\"2fxapKr8XGdNeaKi2\",\"Ds7L5bksw2QRHjrKL\",\"srJ34BaybkQh3qRkM\",\"T2vhHPhRR96hRizq8\",\"CHvzhtXnv8HTbPQ56\",\"xn7uGNKeAwPEkP9oA\",\"qAby4AWXmTNeusvg3\",\"T6iBEE2jp7f7iEF2P\",\"ey3CASd6Je5LEJzfB\",\"sbJcFfQjQ59Wfg4Cd\",\"8BFSTCnoe2QggN64c\",\"66a9xX73nmTEuKs9k\",\"u4KH6LGQ95qQMHBut\",\"yod5YhKtPqw2GfG9B\",\"PC3pLs36zNzpRDSuE\",\"wjc4iejpErBhxWwHo\",\"BrTDhPJcACL2bsrpJ\",\"AFfw7cGg83uYk2Miy\",\"mDWNyaaQ9hvPCRzSd\",\"yr822PZmmiDDenxpB\",\"mvJBakQ35CWAnbbEZ\",\"QWBv9WzRMBqyuff5r\",\"sKBGcRfEr6LrvG8A2\",\"c2q7mY39z5JPEMCaM\",\"9Ly8afdtofp8DXzrt\",\"rrSC943cCKNG48sH4\",\"w67KfQgZ6WAeY7K4Y\",\"AJexRBN9cYQmqvYu6\",\"qzXAMXsHZGT8o5hTA\",\"RoGGD5cpHb4ftdLDv\",\"2Qk2mFu9HBFzrB24i\",\"Afnps7TJQuS9sipMb\",\"EfxwqhYdapX3dMQC2\",\"2PufnQcsHsfymufX3\",\"XD5nmvKQchKezPXhy\",\"pduNK68oazqQTtbLp\",\"4TmgHkn5vqyHK3sYC\",\"4Lwjr34ypKNQNQCar\",\"d9LBRxvADNBB5QJMB\",\"dzS6WBTMHyFEag6Fp\",\"u5u2YpHXiNgzDNJdX\",\"5jsikgRic4psf48fH\",\"NzbRqGWspQnWMoDrF\",\"yAouD3PxzED8a4gap\",\"mw9464S5dnenqzvpm\",\"5QN8R22z43SrwoHDz\",\"rCrbqMiaGPgHYTNxu\"],\"total\":199,\"quality\":[5,5,5,3,3,4,5,4,5,5,5,5,5,5,5,5,4,5,5,5,5,5,5,5,5,5,5,5,5,4,5,4,5,5,5,5,5,5,5]},\"flags\":0},\"summary\":\"Given a number, create a function that returns a new number based on these rules:\\nFor each digit, replace it by the number of times it appears in the number.\\nThe final instance of the number will be an integer, not a string.\\n\\nWorked Example\\ndigit_count(136116) ➞ 312332\\nThe number 1 appears thrice, so replace all 1s with 3s.\\nThe number 3 appears only once, so r\",\"tags\":[\"numbers\",\"language_fundamentals\",\"loops\"],\"timestamp\":{\"$date\":1594719140589},\"title\":\"Keeping Count\",\"quality\":4.769230769230769,\"family\":[{\"_id\":\"6xJMo3NerTFXXWSz2\",\"language\":\"cpp\"},{\"_id\":\"apYBsyuhCDH33hQSW\",\"language\":\"csharp\"},{\"_id\":\"TCEYq7KYJE3ogvt9j\",\"language\":\"javascript\"},{\"_id\":\"frRRffQGSrPTknfxY\",\"language\":\"python3\"},{\"_id\":\"aPj72xNiKrTyACz5R\",\"language\":\"ruby\"},{\"_id\":\"JHRPC8FdcroLRosXZ\",\"language\":\"swift\"}]}}"]