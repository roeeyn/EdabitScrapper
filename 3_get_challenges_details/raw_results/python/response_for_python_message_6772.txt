a["{\"msg\":\"result\",\"id\":\"2094\",\"result\":{\"_id\":\"YcKh5TokDmm8MZ9Dk\",\"author\":\"persolut\",\"authorId\":\"xn7uGNKeAwPEkP9oA\",\"code\":\"def hidden_anagram(text, phrase):\\n\\t\",\"difficulty\":2.9295774647887325,\"editorId\":\"xn7uGNKeAwPEkP9oA\",\"familyId\":\"3XyMFkPCm45dzrxo2\",\"instructions\":\"Create a function that takes two strings. The first string contains a sentence containing the letters of the second string in a consecutive sequence but in a different order. The hidden anagram must contain all the letters, including duplicates, from the second string in any order and must not contain any other alphabetic characters.\\n\\nWrite a function to find the anagram of the second string embedded somewhere in the first string. You should ignore character case, any spaces, and punctuation marks and return the anagram as a lower case string with no spaces or punctuation marks.\\n\\n### Examples\\n```\\nhidden_anagram(\\\"An old west action hero actor\\\", \\\"Clint Eastwood\\\") ➞ \\\"noldwestactio\\\"\\n# The sequence \\\"n old west actio\\\" is a perfect anagram of \\\"Clint Eastwood\\\".\\n\\nhidden_anagram(\\\"Mr. Mojo Rising could be a song title\\\", \\\"Jim Morrison\\\") ➞ \\\"mrmojorisin\\\"\\n# The sequence \\\"Mr. Mojo Risin\\\" ignoring the full stop, is a perfect\\n# anagram of \\\"Jim Morrison\\\".\\n\\nhidden_anagram(\\\"Banana? margaritas\\\", \\\"ANAGRAM\\\") ➞ \\\"anamarg\\\"\\n# The sequence \\\"ana? marg\\\" ignoring \\\"?\\\" is a perfect anagram of \\\"Anagram\\\".\\n\\nhidden_anagram(\\\"D  e b90it->?$ (c)a r...d,,#~\\\", \\\"bad credit\\\") ➞ \\\"debitcard\\\"\\n# When all spaces, numbers and puntuation marks are removed\\n# from the whole phrase, the remaining characters form the sequence\\n# \\\"Debitcard\\\" which is a perfect anagram of \\\"bad credit\\\".\\n\\nhidden_anagram(\\\"Bright is the moon\\\", \\\"Bongo mirth\\\") ➞ \\\"noutfond\\\"\\n# The words \\\"Bright moon\\\" are an anagram of \\\"bongo mirth\\\" but they are\\n# not a continuous alphabetical sequence because the words \\\"is the\\\" are in\\n# between. Hence the negative result, \\\"noutfond\\\" is returned.\\n```\\n\\n### Notes\\n- A perfect anagram contains all the letters of the original, in any order, no more, no less.\\n- If there is no hidden anagram in the sentence, return `\\\"noutfond\\\"`.\\n- As in the above examples, the hidden anagram may start or finish part way through a word and/or span multiple words and may contain punctuation marks and other non-alpha characters.\\n- Ignore character case and any embedded non-alpha characters.\\n- If there is more than 1 result in a sentence, return the nearest to the beginning.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(hidden_anagram(\\\"Sir Patrick Moore was a famous moon starer\\\", \\\"Astronomer\\\"), \\\"moonstarer\\\")\\nTest.assert_equals(hidden_anagram(\\\"A building, built to stay free of defects, is uncommon!\\\", \\\"Statue of Liberty\\\"), \\\"builttostayfree\\\")\\nTest.assert_equals(hidden_anagram('Bright is the moon', 'Bongo mirth'), 'noutfond')\\nTest.assert_equals(hidden_anagram(\\\"Anchor man Bill, a well known TV personality, was confused about becoming president\\\", \\\"Abraham Lincoln\\\"), \\\"anchormanbilla\\\")\\nTest.assert_equals(hidden_anagram(\\\"There seem to be more and more television ads on the box these days!\\\", \\\"enslave idiots\\\"), \\\"televisionads\\\")\\nTest.assert_equals(hidden_anagram(\\\"The thing orators hate most is a throat infection\\\", \\\"A sore throat\\\"), \\\"oratorshate\\\")\\nTest.assert_equals(hidden_anagram(\\\"I thought I heard a high cornet note of great beuaty\\\", \\\"One Cornetto\\\"), \\\"cornetnoteo\\\")\\nTest.assert_equals(hidden_anagram('D  e b90it->?$ (c)a r...d,,#~', 'bad credit'), 'debitcard')\\nTest.assert_equals(hidden_anagram(\\\"You won't find any anagram here!\\\", 'aerogramhenna'), 'noutfond')\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[4,4,4,4,4,3,2,3,5,3,4,4,3,2,3,3,5,5,2,3,5,0,3,4,4,3,4,2,2,4,2,1,3,4,5,5,4,0,3,0,2,1,3,3,1,2,4,3,4,5,3,2,4,2,0,0,5,4,4,3,1,2,3,4,5,4,2,2,0,0,2],\"rators\":[\"xn7uGNKeAwPEkP9oA\",\"Ecg4m7srYGgZsb4Ck\",\"aEm3Wvj2rFYRL8Lrb\",\"8PwfYqoDQFThzNtvf\",\"tAF9Gf6PiGogbZuWs\",\"XgQcgyPKvPnLZLdYy\",\"fznzd3qnvtbFkkizz\",\"8JyqsSbN2FJXPr3cw\",\"gb9rvGus2Jv7bjZSs\",\"mDWNyaaQ9hvPCRzSd\",\"s5M5RvgqR9BhB9JoC\",\"aCNWav8S8Try9RkC6\",\"a777e8chPvJkY3tKa\",\"9LfZc6753HJxzkgc3\",\"G5KunELyMQFcC2dJj\",\"iS5BrkGLzJyPK7nKt\",\"uMxob526prFuTTNve\",\"zNjAQmStrERNZsSPY\",\"pYbK8fAcF3ZLiB9rT\",\"ud4Kram2Nst3heXky\",\"ipZ44LskscAPKkZbQ\",\"tkdRHAExhDq8ryDJT\",\"dLHj72AadNKDqG6QX\",\"NzCdApxNegj4RarXe\",\"P8gvxd4qBrfs5hnWc\",\"7ifh8r4gvyYMhKB94\",\"BEZSu9R94XFomASKM\",\"RD74CsiHwMQEMb9uq\",\"HF28xZKSLM9wEuqNg\",\"8nE8QHnFYsHCFebte\",\"b3Dk2LqoEgripS3Y3\",\"yGyvKr9Qntq7YDvi5\",\"8sNv5PTHa7XQ8bNqR\",\"2PufnQcsHsfymufX3\",\"XNmN6ztj36a7eChbD\",\"J23RcmzbdtBbPCTjT\",\"p8qqFdJ3FSk5x9z3G\",\"SGhPxX5bHGL8zZqtt\",\"yFsT4nhJX3d9vX9Cy\",\"iojEnnY9FsMfYzp6f\",\"J3upzLHuEwXH7Z2hx\",\"yjtdwc2AC4jA2RWtn\",\"AasGs8AeX9Lcb9xJn\",\"bJaPCBx63YxdJAuTS\",\"gJYuGdkXEWWmGRLzu\",\"PH32cNxBjrK4a28sn\",\"DPi9QGLctq2y76KuE\",\"T6iBEE2jp7f7iEF2P\",\"gBopPZJ5zeamxQGyw\",\"K7TaCiYwJpvMbuoA5\",\"5QN8R22z43SrwoHDz\",\"tdgcuG4p5KuZkbSwf\",\"tmTAbizpJLnZDZ5JJ\",\"FaDdT4LpuTyjEz9f7\",\"RmffwXG5kkYBfHTxX\",\"hkiz2Nv927cYGrA86\",\"hYq2tQbwKgxWpMN6z\",\"RriCQNKWZmYKexd8R\",\"suArq5BbSy7gD6xri\",\"iAcwuExLPJovDccb5\",\"Sh7oCvsWeiAt6TYFx\",\"yTtSCvGPyYna6JuRC\",\"yHCWvdxTt5BmhiR8T\",\"hZit6tsLoAXfJdKf3\",\"aFYzioHvZPvPaunsg\",\"7vyub5zTHNfMfQWoW\",\"2bSxsNAZCY4e5HA5u\",\"h8Mb3kDQ7zmk9ks5C\",\"YREmgD3mXd6v6oma2\",\"Yp4Jtxj7pHqZjheN7\",\"9jstf8smopHw3kx62\",\"FiNtqWXRz7mfDCbj4\",\"T9H7NucatkjWpLBYn\",\"Nub6XnAgFtegmmWb4\",\"ZSAF6SuGLQxoMxizD\",\"f7KDXpnXrGPPg2tZw\",\"BQQJdsNxb829Lrr82\",\"rDgKHd6ZSSpboiAj7\",\"wrL4iX2CCSqDCCty3\"],\"total\":90,\"quality\":[5,5,5,5,5,3,5,5,3,5,5,5,5]},\"flags\":1},\"summary\":\"Create a function that takes two strings. The first string contains a sentence containing the letters of the second string in a consecutive sequence but in a different order. The hidden anagram must contain all the letters, including duplicates, from the second string in any order and must not contain any other alphabetic characters.\\n\\nWrite a function to find\",\"tags\":[\"arrays\",\"formatting\",\"loops\",\"sorting\"],\"timestamp\":{\"$date\":1596207671515},\"title\":\"Hidden Anagram\",\"quality\":4.6923076923076925,\"family\":[{\"_id\":\"vxWGJmtjpWtu36xfj\",\"language\":\"cpp\"},{\"_id\":\"gvfWZYpmkAu99TKWt\",\"language\":\"java\"},{\"_id\":\"7hnsWYJGc6yPqEMjc\",\"language\":\"javascript\"},{\"_id\":\"YcKh5TokDmm8MZ9Dk\",\"language\":\"python3\"},{\"_id\":\"qyi9uw6eWdLGvA7Rj\",\"language\":\"ruby\"}]}}"]