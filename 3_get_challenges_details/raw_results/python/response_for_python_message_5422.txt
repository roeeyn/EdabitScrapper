a["{\"msg\":\"result\",\"id\":\"1424\",\"result\":{\"_id\":\"JsisSTswerLQqJ73X\",\"author\":\"Peter Marko\",\"authorId\":\"RehJGBFS6CYiWdjZx\",\"code\":\"def priority_sort(lst, s):\\n\\t\",\"difficulty\":2.0476190476190474,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"B7pH8CBw5pZjKh2WX\",\"instructions\":\"Given a list and a set, return a sorted list with its items in ascending order but prioritize the elements in the set over the other items in the list.\\n\\n### Examples\\n```\\npriority_sort([5, 4, 3, 2, 1], {2, 3}) ➞ [2, 3, 1, 4, 5]\\n\\npriority_sort([5, 4, 3, 2, 1], {3, 6}) ➞ [3, 1, 2, 4, 5]\\n\\npriority_sort([-5, -4, -3, -2, -1, 0], {-4, -3}) ➞ [-4, -3, -5, -2, -1, 0]\\n```\\n\\n### Notes\\n- If the list is empty, return an empty list.\\n- If the set is empty there is nothing to prioritize, but the list should still be sorted.\\n- The set may contain values that are not in the list.\\n- The list may contain duplicates.\\n- The list and the set will only contain integer values.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(priority_sort([5, 4, 3, 2, 1], {2, 3}), [2, 3, 1, 4, 5])\\nTest.assert_equals(priority_sort([], {2, 3}), [])\\nTest.assert_equals(priority_sort([], {}), [])\\nTest.assert_equals(priority_sort([1, 2, 3], {}), [1, 2, 3])\\nTest.assert_equals(priority_sort([5, 4, 3, 2, 1], {3, 6}), [3, 1, 2, 4, 5])\\nTest.assert_equals(priority_sort([-5, -4, -3, -2, -1, 0], {-4, -3}), [-4, -3, -5, -2, -1, 0])\\nTest.assert_equals(priority_sort([-10, 0, 10], {0}), [0, -10, 10])\\nTest.assert_equals(priority_sort([4, 2, 2], {1}), [2, 2, 4])\\nTest.assert_equals(priority_sort([1, 5, 5, 5, 5, 2, 1], {1, 5}), [1, 1, 5, 5, 5, 5, 2])\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,1,3,3,1,2,4,2,3,2,1,2,2,3,2,0,3,3,2,3,1,3,2,1,2,0,0,2,5,3,1,2,1,3,4,0,3,4,2,2,0,0,2,1,1,3,1,0,3,0,0,3,2,2,2,1,2,3,2,1,3,2,3,2,3,3,2,3,4,3,2,3,2,0,3,2,3,2,3],\"rators\":[\"RehJGBFS6CYiWdjZx\",\"tAF9Gf6PiGogbZuWs\",\"xBQC5uQdx6WndJ3iM\",\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\",\"s5M5RvgqR9BhB9JoC\",\"ZRxAkXjTCdyQTdSDw\",\"gb9rvGus2Jv7bjZSs\",\"DEDniTrstQYGounXT\",\"gJYuGdkXEWWmGRLzu\",\"8JyqsSbN2FJXPr3cw\",\"55RQznnuTGpsj3EXd\",\"Yp7uvStL97cC9fKkY\",\"Nb6LYPoQP6KJZt8mz\",\"yjtdwc2AC4jA2RWtn\",\"HF28xZKSLM9wEuqNg\",\"cR3ibTMxLyEdDFCHY\",\"Ecg4m7srYGgZsb4Ck\",\"v9KtC8YLbMWmXiW2H\",\"XjajdyybZZbkz8o5x\",\"hnyhBFWwNCz9mDfSi\",\"9FCeFzjPA4jrQ7oHW\",\"DPi9QGLctq2y76KuE\",\"xn7uGNKeAwPEkP9oA\",\"J3upzLHuEwXH7Z2hx\",\"gSFJPsMXnqAog3Q9f\",\"3pxHTZBsv7MKzFG6Y\",\"gXTAie79kiw28tx5u\",\"eYfPWvZwnJQkHbSTK\",\"Jqk2uJZZxEv5wZFze\",\"KJCDwGkoXh8qtbbKr\",\"n2BRY9X8899dcG8Bw\",\"oBcs8GLX2ZFLXQy8y\",\"cAP3n5NY64uoMwzRR\",\"QRv96jmNaYsWkxQEG\",\"CHvzhtXnv8HTbPQ56\",\"GGdmhAvxXhqhhibJN\",\"9ivvGvJGvtQfigQaZ\",\"3LiSLdtN58n46NEqg\",\"Hhvy3EGqWBXt3nFPA\",\"fznzd3qnvtbFkkizz\",\"ppxNdL4gjANz8oJLQ\",\"QHcNEadRcCStpv7dj\",\"qAby4AWXmTNeusvg3\",\"iojEnnY9FsMfYzp6f\",\"FEYpu9RWysAgW3XnP\",\"qZQxPQ2kaNKAMesHT\",\"2PufnQcsHsfymufX3\",\"H9KZi2cjt4FwH7qog\",\"8BFSTCnoe2QggN64c\",\"4Lwjr34ypKNQNQCar\",\"AasGs8AeX9Lcb9xJn\",\"J5T8gZqiZXFuFDTQ7\",\"KACjjdKDL97rBTyEK\",\"HqmxnQJM66Y57twhn\",\"fSQSHjW3e72MrWxbD\",\"StNu7DPyTgEStZsMY\",\"MpfytGFYF77emJ3cT\",\"ey3CASd6Je5LEJzfB\",\"T6iBEE2jp7f7iEF2P\",\"gKnWjDjwrJh7MK2df\",\"o4ixjQGSaYqA2JoM4\",\"5s4qhuRJijYaDNXva\",\"8sNv5PTHa7XQ8bNqR\",\"RoGGD5cpHb4ftdLDv\",\"8nE8QHnFYsHCFebte\",\"5HCu9Ydd86QgHDRNP\",\"mvJBakQ35CWAnbbEZ\",\"jWbd7SYDzLPjc9EDh\",\"PH32cNxBjrK4a28sn\",\"AQSqD9oNv2uPfxZCR\",\"dSd7wHgXGQeG5BQ2P\",\"pjLrhXy2RudfvbpAe\",\"S4yzqmHSZT2zHqZQp\",\"BrTDhPJcACL2bsrpJ\",\"4RHvXjHa7r5bD46m9\",\"7KgrSutG2pYA5kJAe\",\"PXAcsKkssS2yLyDv2\",\"iP7wNofhZXTkJ9ryG\",\"5XzCJH4kzbemDhsmF\",\"rTRvHndHZKKRkb9w5\",\"3KkyQm77zsew58Dc2\",\"qaR8DnWrTk8Mus5Q2\",\"iqmPb9JuJDgTFeR8Q\",\"Ds7L5bksw2QRHjrKL\",\"yod5YhKtPqw2GfG9B\",\"NfMJuiBk6FN5Jc6ow\",\"a2Kmh6ekWqQQooHiQ\",\"nkH3HfJXLMNcBMM79\",\"eMuCpJ2spXWkJjWNz\",\"qM4cFjDW9EBf6BNsA\",\"Soy4KW8Phf9Kwjn2D\",\"d8qtzoLB264iP8tdY\",\"Qyfyyw6oC4EHAndzo\",\"jrd2YfEKXevtdYqyJ\",\"iedy2PsuTswZ4yGpj\",\"wrL4iX2CCSqDCCty3\",\"9pzFiFK3ANLjQfnr2\"],\"total\":110,\"quality\":[5,5,4,3,4,5,5,5,5,5,5,3,2,5,5,5,5,5,5]},\"flags\":0},\"summary\":\"Given a list and a set, return a sorted list with its items in ascending order but prioritize the elements in the set over the other items in the list.\\n\\nExamples\\npriority_sort([5, 4, 3, 2, 1], {2, 3}) ➞ [2, 3, 1, 4, 5]\\n\\npriority_sort([5, 4, 3, 2, 1], {3, 6}) ➞ [3, 1, 2, 4, 5]\\n\\npriority_sort([-5, -4, -3, -2, -1, 0], {-4, -3}) ➞ [-4, -3, -5, -2, -1, 0]\\n\\nNotes\\nIf\",\"tags\":[\"sorting\",\"language_fundamentals\",\"conditions\"],\"timestamp\":{\"$date\":1598084560302},\"title\":\"Priority Sort\",\"quality\":4.526315789473684,\"family\":[{\"_id\":\"qMcdtSKAPESJWKpzP\",\"language\":\"javascript\"},{\"_id\":\"JsisSTswerLQqJ73X\",\"language\":\"python3\"},{\"_id\":\"o6Mvi4ZYdp4gJG4eF\",\"language\":\"ruby\"}]}}"]