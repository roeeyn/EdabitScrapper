a["{\"msg\":\"result\",\"id\":\"902\",\"result\":{\"_id\":\"5FoNY2Z7B5wSCDTA4\",\"author\":\"Mubashir Hassan \",\"authorId\":\"T6iBEE2jp7f7iEF2P\",\"code\":\"def happy_year(year):\\n\\t\",\"difficulty\":1.4489795918367347,\"familyId\":\"A9SR7Z6e4KarjDqrz\",\"instructions\":\"**Mubashir** needs your help to find out the next happy year.\\n\\nA **Happy Year** is the year with only _distinct digits_. Create a function that takes an integer `year` and returns the **next happy year**.\\n\\n### Examples\\n```\\nhappy_year(2017) ➞ 2018\\n# 2018 has all distinct digits\\n\\nhappy_year(1990) ➞ 2013\\n\\nhappy_year(2021) ➞ 2031\\n```\\n\\n### Notes\\nN/A\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(happy_year(1990), 2013)\\nTest.assert_equals(happy_year(2017), 2018)\\nTest.assert_equals(happy_year(2021), 2031)\\nTest.assert_equals(happy_year(1001), 1023)\\nTest.assert_equals(happy_year(1123), 1203)\\nTest.assert_equals(happy_year(2001), 2013)\\nTest.assert_equals(happy_year(2334), 2340)\\nTest.assert_equals(happy_year(3331), 3401)\\nTest.assert_equals(happy_year(1987), 2013)\\nTest.assert_equals(happy_year(5555), 5601)\\nTest.assert_equals(happy_year(7712), 7801)\\nTest.assert_equals(happy_year(8088), 8091)\\nTest.assert_equals(happy_year(8999), 9012)\\n# Mubashir\",\"language\":\"python3\",\"quality\":4.411764705882353,\"summary\":\"Mubashir needs your help to find out next happy year.\\n\\nA Happy Year is the year with only distinct digits. Create a function that takes an integer year and returns the next happy year.\\n\\nExamples\\nhappy_year(2017) ➞ 2018\\n2018 has all distinct digits\\n\\nhappy_year(1990) ➞ 2013\\n\\nhappy_year(2021) ➞ 2031\\n\\nNotes\\nN/A\",\"tags\":[\"algorithms\",\"numbers\",\"loops\",\"logic\"],\"timestamp\":{\"$date\":1612701444198},\"title\":\"Next Happy Year\",\"stats\":{\"completed\":{\"total\":117,\"ratings\":[2,2,2,2,2,0,2,1,2,2,1,2,2,1,1,0,1,1,1,2,0,1,0,2,2,2,5,2,0,2,2,2,2,2,0,1,0,2,2,1,2,1,2,1,1,1,0,5,2,1,1,2,1,0,2,3,2,2,0,1,1,2,1,2,2,1,0,2,2,1,2,2,2,2,0,2,2,2,0,2,0,2,2,2,1,2,1,2,0,1,0,1,3,1,0,2,1,2],\"quality\":[5,2,5,5,4,5,5,5,5,5,3,5,5,5,5,1,5],\"rators\":[\"T6iBEE2jp7f7iEF2P\",\"8PwfYqoDQFThzNtvf\",\"PXAcsKkssS2yLyDv2\",\"s5M5RvgqR9BhB9JoC\",\"iS5BrkGLzJyPK7nKt\",\"LQxof8pGabGuWP7Gn\",\"p8qqFdJ3FSk5x9z3G\",\"buX4mCQhtXCfBjeno\",\"QRv96jmNaYsWkxQEG\",\"HF28xZKSLM9wEuqNg\",\"cR3ibTMxLyEdDFCHY\",\"8JyqsSbN2FJXPr3cw\",\"cAP3n5NY64uoMwzRR\",\"oBcs8GLX2ZFLXQy8y\",\"srJ34BaybkQh3qRkM\",\"FEYpu9RWysAgW3XnP\",\"wjc4iejpErBhxWwHo\",\"eYfPWvZwnJQkHbSTK\",\"rLMeCAzEE9Grp3yce\",\"AQSqD9oNv2uPfxZCR\",\"NfMJuiBk6FN5Jc6ow\",\"J5T8gZqiZXFuFDTQ7\",\"zd9FLSzsGz3evKafy\",\"gb9rvGus2Jv7bjZSs\",\"gJYuGdkXEWWmGRLzu\",\"Yp7uvStL97cC9fKkY\",\"DPi9QGLctq2y76KuE\",\"YcCLwitFMAEJSnxAW\",\"Ds7L5bksw2QRHjrKL\",\"GGdmhAvxXhqhhibJN\",\"gXTAie79kiw28tx5u\",\"Nb6LYPoQP6KJZt8mz\",\"sHjfbGQGLHE6JR6qu\",\"iojEnnY9FsMfYzp6f\",\"o4ixjQGSaYqA2JoM4\",\"3cF6NXq3ZEwdkgSjb\",\"yjtdwc2AC4jA2RWtn\",\"2QGRoQn2dRq3scu7k\",\"eMuCpJ2spXWkJjWNz\",\"qAby4AWXmTNeusvg3\",\"5HCu9Ydd86QgHDRNP\",\"J3upzLHuEwXH7Z2hx\",\"KJCDwGkoXh8qtbbKr\",\"66a9xX73nmTEuKs9k\",\"Wpn95NqWxncQrwNgz\",\"sbJcFfQjQ59Wfg4Cd\",\"PC3pLs36zNzpRDSuE\",\"8BFSTCnoe2QggN64c\",\"yod5YhKtPqw2GfG9B\",\"NzbRqGWspQnWMoDrF\",\"BrTDhPJcACL2bsrpJ\",\"DEDniTrstQYGounXT\",\"NQQzu4wyLWW9faWtK\",\"CHvzhtXnv8HTbPQ56\",\"yr822PZmmiDDenxpB\",\"c2q7mY39z5JPEMCaM\",\"2PufnQcsHsfymufX3\",\"5XiuAqicKD4hBdu63\",\"mvJBakQ35CWAnbbEZ\",\"AasGs8AeX9Lcb9xJn\",\"eHcgvkTGsH7ZziqBo\",\"9Ly8afdtofp8DXzrt\",\"rrSC943cCKNG48sH4\",\"RoGGD5cpHb4ftdLDv\",\"aEm3Wvj2rFYRL8Lrb\",\"HqmxnQJM66Y57twhn\",\"nnqxwv4tWFRJ2FHYh\",\"w2HhxvSLmDhaGCAjE\",\"XD5nmvKQchKezPXhy\",\"AFfw7cGg83uYk2Miy\",\"d8qtzoLB264iP8tdY\",\"X4rzfxGgxx6CS7Bpz\",\"hR7GMiqGap4CzEWSy\",\"4Lwjr34ypKNQNQCar\",\"YA7SDhpgEtsqynvNL\",\"9bQyb6rW7xfE4vgrR\",\"MKT7khMBGXzA22ykf\",\"pduNK68oazqQTtbLp\",\"Jqk2uJZZxEv5wZFze\",\"4TmgHkn5vqyHK3sYC\",\"JhX7jvtpwNyxcc39m\",\"N2wnZXkhDH86mgjQ8\",\"tAF9Gf6PiGogbZuWs\",\"T6Rm8mREPMZSftzrC\",\"dYPkStFnLvAMsHSzZ\",\"d9LBRxvADNBB5QJMB\",\"dzS6WBTMHyFEag6Fp\",\"u5u2YpHXiNgzDNJdX\",\"K3RacTvkWHLfzKF8i\",\"2fxapKr8XGdNeaKi2\",\"eXFkEJTEZiPgeP7zZ\",\"HhiYEyjDdbAfCxFWe\",\"mw9464S5dnenqzvpm\",\"yAouD3PxzED8a4gap\",\"nc7bRhkxgKyqusYe3\",\"af94rigDyYDaT43Lm\",\"qB6KSTYC6H2TQEQY6\",\"ey3CASd6Je5LEJzfB\",\"uGuS9YRXW2nj4p6zf\",\"Qyfyyw6oC4EHAndzo\",\"9pzFiFK3ANLjQfnr2\",\"Wi4H6ayKsNDWWQCG5\",\"Ncn7Qn2LbdsiJnfFk\",\"rCrbqMiaGPgHYTNxu\",\"8uiLiJcmWxWe6qw65\",\"vAbK8sCfKyFC78HYg\",\"5QN8R22z43SrwoHDz\",\"eW9R2SCoYnY8HBAdL\",\"E2hpke7mHxAWsw5t9\",\"FT2wBacm3JxrYmZDW\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"e5QCCbgzeTptrMhdD\",\"language\":\"cpp\"},{\"_id\":\"ruW8bbjeMdb9jNsW7\",\"language\":\"javascript\"},{\"_id\":\"qNgSqHRSHmzHzZ3hG\",\"language\":\"php\"},{\"_id\":\"5FoNY2Z7B5wSCDTA4\",\"language\":\"python3\"},{\"_id\":\"c5KkB9RQ7EDB76XP5\",\"language\":\"ruby\"}]}}"]