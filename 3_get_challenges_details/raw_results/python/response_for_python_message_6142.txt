a["{\"msg\":\"result\",\"id\":\"1782\",\"result\":{\"_id\":\"rheD8p46h8gKdE8GE\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"def grayscale(lst):\\n\\t\",\"difficulty\":2.364485981308411,\"familyId\":\"jZ8C2n8YJrekck7kS\",\"instructions\":\"Images can be described as 3D lists.\\n\\n```\\n# This image has only one white pixel:\\n\\n[\\n  [[255, 255, 255]]\\n]\\n```\\n\\n```\\n# This one is a 2 by 2 black image:\\n\\n[\\n  [[0, 0, 0], [0, 0, 0]],\\n  [[0, 0, 0], [0, 0, 0]]\\n]\\n```\\n\\nYour task is to create a function that takes a 3D list representation of an image and returns the grayscale version of that.\\n\\n### Examples\\n```\\ngrayscale([\\n  [[0, 0, 0], [0, 0, 157]],\\n  [[1, 100, 0], [0, 10, 0]]\\n]) âžž [\\n  [[0, 0, 0], [52, 52, 52]],\\n  [[34, 34, 34], [3, 3, 3]]\\n]\\n```\\n\\n### Notes\\n- A valid RGB value ranges from 0 to 255 (inclusive).\\n- If the given list contains out of bound values, convert them to the nearest valid one.\\n- Grayscaling an image is adjusting to have the same amount of (Red, Green, Blue) from their combined average to produce different shades of gray. \",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(grayscale([\\n\\t[[0,0,0], [0,0,157]],\\n\\t[[1,100,0], [0,10,0]]\\n]), [\\n\\t[[0,0,0], [52,52,52]],\\n\\t[[34,34,34], [3,3,3]]\\n])\\n\\nTest.assert_equals(grayscale([\\n\\t[[0,0,0], [0,0,157], [100,229,4]],\\n\\t[[1,100,0], [0,10,0], [0,168,0]],\\n\\t[[0,125,0], [15,0,9], [0,139,0]],\\n\\t[[0,125,0], [0,0,9], [0,200,0]]\\n]), [\\n\\t[[0,0,0], [52,52,52], [111,111,111]],\\n\\t[[34,34,34], [3,3,3], [56,56,56]],\\n\\t[[42,42,42], [8,8,8], [46,46,46]],\\n\\t[[42,42,42], [3,3,3], [67,67,67]]\\n])\\n\\nTest.assert_equals(grayscale([\\n\\t[[0,0,255], [0,0,0], [0,0,157], [100,229,4]],\\n\\t[[100,0,3], [1,100,0], [0,10,0], [0,168,0]],\\n\\t[[16,30,0], [0,125,0], [15,0,9], [0,139,0]],\\n\\t[[200,2,0], [0,125,0], [0,0,9], [0,200,0]]\\n]), [\\n\\t[[85,85,85], [0,0,0], [52,52,52], [111,111,111]],\\n\\t[[34,34,34], [34,34,34], [3,3,3], [56,56,56]],\\n\\t[[15,15,15], [42,42,42], [8,8,8], [46,46,46]],\\n\\t[[67,67,67], [42,42,42], [3,3,3], [67,67,67]]\\n])\\n\\nTest.assert_equals(grayscale([\\n\\t[[0,-1,-120], [300,0,157]],\\n\\t[[1,100,0], [256,10,0]]\\n]), [\\n\\t[[0,0,0], [137,137,137]],\\n\\t[[34,34,34], [88,88,88]]\\n])\",\"language\":\"python3\",\"quality\":4.393939393939394,\"summary\":\"Images can be described as 3D lists.\\n\\nThis image has only one white pixel:\\n\\n[\\n  [[255, 255, 255]]\\n]\\n\\nThis one is a 2 by 2 black image:\\n\\n[\\n  [[0, 0, 0], [0, 0, 0]],\\n  [[0, 0, 0], [0, 0, 0]]\\n]\\n\\nYour task is to create a function that takes a 3D list representation of an image and returns the grayscale version of that.\\n\\nExamples\\ngrayscale([\\n  [[0, 0, 0], [0, 0, 15\",\"tags\":[\"algorithms\",\"arrays\",\"logic\",\"loops\"],\"timestamp\":{\"$date\":1602130643250},\"title\":\"Image Manipulation: 255 Shades of Grey (Part 2)\",\"stats\":{\"completed\":{\"total\":144,\"ratings\":[3,3,3,3,3,3,2,4,5,2,0,2,1,3,2,2,1,2,4,5,3,0,3,2,1,2,4,3,5,1,3,2,3,1,2,3,2,3,2,1,4,3,0,3,3,2,3,2,2,3,1,3,4,3,3,2,3,3,3,4,3,3,3,3,3,3,0,3,3,3,0,2,0,1,3,3,3,2,2,1,4,1,2,2,3,2,3,3,3,1,4,1,2,4,2,1,1,2,2,2,2,2,5,0,0,2,0],\"quality\":[4,4,3,4,5,3,5,4,5,5,3,5,5,4,5,5,5,5,4,5,3,5,3,5,5,4,3,5,5,5,4,5,5],\"rators\":[\"xn7uGNKeAwPEkP9oA\",\"hZW6j5s6RHpx35phy\",\"8PwfYqoDQFThzNtvf\",\"tAF9Gf6PiGogbZuWs\",\"aEm3Wvj2rFYRL8Lrb\",\"E6M5TWTt6zS4gfa4z\",\"SGhPxX5bHGL8zZqtt\",\"yjtdwc2AC4jA2RWtn\",\"XFg5NKYA2wTfXMDmu\",\"zZDaXBxMzTCBhNkgL\",\"xtEQnmTdT8sBF8zE6\",\"8sNv5PTHa7XQ8bNqR\",\"tis2x6gZcaucwdrtQ\",\"R9xM4o4uw9ZWv4xgk\",\"5dHucvf2qBYyKim7X\",\"p8qqFdJ3FSk5x9z3G\",\"v9KtC8YLbMWmXiW2H\",\"uZJqBoqeZRX3RncAR\",\"A3pBp3qBMnYZpQKZu\",\"dHConQk6pC8c323TE\",\"DNACg4rcgZsPtYGZ8\",\"Xk2g4CNFAnYcvxiSr\",\"6dZFWNGPH8GKYA8sN\",\"J5T8gZqiZXFuFDTQ7\",\"Ecg4m7srYGgZsb4Ck\",\"gb9rvGus2Jv7bjZSs\",\"fSQSHjW3e72MrWxbD\",\"aCgnGzZfQhjxoPgo2\",\"4fhjJBvLBWh6QeSih\",\"v2rponevFCpBsLrQD\",\"axdSNLZpiCDF8RS6n\",\"J3upzLHuEwXH7Z2hx\",\"afGhZGqYxdcoNr8RQ\",\"Tg24gZyPmk8uDXcBY\",\"9AzxAeaR5xWAoqYxB\",\"iS5BrkGLzJyPK7nKt\",\"nPRDLtMR8iztbB7Es\",\"Qy4Wr4dQLKgYSRXis\",\"8KNtgAcNpyT2f6bTT\",\"bBgNyGtirQrHaZtaE\",\"3ECpdeExhBmkYXtba\",\"BWqLnHYwiP5o9KjYJ\",\"Hhvy3EGqWBXt3nFPA\",\"WHvzwmqfWRibi6mDG\",\"mGaEDPw5FsDb3vdnq\",\"naX78eorMtcT9hhvn\",\"FdiawuMWGaDMkH2S6\",\"aaRBkRAdMBw6WyHbL\",\"6eXHgiJEPTTeZbKDx\",\"BQfyNx3NPEd8LzvNQ\",\"Jqk2uJZZxEv5wZFze\",\"n2BRY9X8899dcG8Bw\",\"qZQxPQ2kaNKAMesHT\",\"muQCKmimwtNAdS8rp\",\"qab4tYm6vJQcpKLfi\",\"P7NmFbCJ5offXMRvB\",\"PuM9LakSiXLuHz3w5\",\"HS4cmK5yNQyu7atEK\",\"gXTAie79kiw28tx5u\",\"ngARxyodB845RvKoQ\",\"2DZ2sYqHYWiXWs5T6\",\"7eyvcyTCBS5kA6F4K\",\"BPW2Jy9MT5vLeWwcJ\",\"udcPRYfw56v2kJ5C8\",\"QcuTb4AgsdN8dWoAE\",\"ZYT9LjgocbP4hzQK5\",\"eHcgvkTGsH7ZziqBo\",\"KXYHpCQvmTtpbGXYg\",\"sR4sbdgq88MeWE37y\",\"935G5j4tDFNXvqkB7\",\"dDXc2WncJNpKr5JhB\",\"xBQC5uQdx6WndJ3iM\",\"tyojfrvuRbM4gGGcs\",\"XNmN6ztj36a7eChbD\",\"ScaZG69jog5kcqGtQ\",\"2PufnQcsHsfymufX3\",\"KR9QSQRXFeqd29GJR\",\"W5d8SJGpWNwvgCztM\",\"r7yXit2rGdiSfT9QY\",\"hRAd998MG8Jzdpxj6\",\"K6MfKMytoJJuSGewP\",\"iojEnnY9FsMfYzp6f\",\"Bmb3scffZ5SujLMmd\",\"BrTDhPJcACL2bsrpJ\",\"9izxzCBrsRCbD9ajK\",\"CZeLyDD2BQL3jrzzj\",\"gJYuGdkXEWWmGRLzu\",\"XHShZ3WMPgGEA2vkR\",\"mfm3gB39arY8Rjb2y\",\"RErqK2yM94wYyD2hk\",\"GD2CqRwMgzxKqiWgC\",\"AasGs8AeX9Lcb9xJn\",\"bJaPCBx63YxdJAuTS\",\"ctbThYbufFCYbRK4f\",\"PH32cNxBjrK4a28sn\",\"MpfytGFYF77emJ3cT\",\"hkiz2Nv927cYGrA86\",\"fznzd3qnvtbFkkizz\",\"HqmxnQJM66Y57twhn\",\"oBcs8GLX2ZFLXQy8y\",\"T6iBEE2jp7f7iEF2P\",\"m7kMANAKbQxHfueLC\",\"MZiGLakW6C7iHJ68v\",\"etoxSpG4fGKThLozM\",\"7wEd3pvkQCeixZ4mn\",\"s5M5RvgqR9BhB9JoC\",\"97DthwdtrBLm2y2Yj\",\"yDziunPfnPJmGKtjD\",\"E6sRiQd5xuyefLimm\",\"Ehfe4C9HsdrrWAgeu\",\"Aq93wpBNcFvvzeCpa\",\"F7w84Xgrt7GYazotY\",\"JwkwCHcXthnGDsdFr\",\"SBzZXaahGicGuPtYT\",\"sPrxswZC83PLZgwoT\",\"7v7Bk5yynquzG5q2q\",\"jGkEFYRq8pZyqTjb5\",\"Qa34netkvBpFcLoq9\",\"nK9jQQDPdjHaHeQvG\",\"H42pe638Yee8jFDTA\",\"ii3mAbrfp2A2gtj7d\",\"FuKzya2SdA4dfLWFi\",\"AWRsASiEp4ujCwjmC\",\"d8qtzoLB264iP8tdY\",\"63R7mP7jF5F8Y9b4K\",\"kDS65HqCv4sngukej\",\"qDLF2BCENapDDoTWZ\",\"psguS9pMBDn4Gs5KK\",\"23oi2a3vQwhtLEbSj\",\"tpCrhKQsmQcZcgQvC\",\"no46qNkTbNeHepe64\",\"etor2XYGrcfgw87z6\",\"a6z4WKZ57yEX9PZng\",\"Yp7uvStL97cC9fKkY\",\"CHvzhtXnv8HTbPQ56\"]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"family\":[{\"_id\":\"BDbY3zSN8mcBN2Xrn\",\"language\":\"javascript\"},{\"_id\":\"rheD8p46h8gKdE8GE\",\"language\":\"python3\"},{\"_id\":\"jAp8AfCrKqHuZcHvz\",\"language\":\"ruby\"}]}}"]