a["{\"msg\":\"result\",\"id\":\"365\",\"result\":{\"_id\":\"iLH5TYHpLZwR5MSmF\",\"author\":\"Joshua Se√±oron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def millions_rounding(lst):\\n\\t\",\"difficulty\":0.6555555555555556,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"gSxnr8EPkyeTP2FT6\",\"instructions\":\"Given a list of cities and populations, return a list where all populations are **rounded to the nearest million**.\\n\\n### Examples\\n```\\nmillions_rounding([\\n  [\\\"Nice\\\", 942208],\\n  [\\\"Abu Dhabi\\\", 1482816],\\n  [\\\"Naples\\\", 2186853],\\n  [\\\"Vatican City\\\", 572]\\n])\\n```\\n\\n```\\n[\\n  [\\\"Nice\\\", 1000000],\\n  [\\\"Abu Dhabi\\\", 1000000],\\n  [\\\"Naples\\\", 2000000],\\n  [\\\"Vatican City\\\", 0]\\n]\\n```\\n\\n### Notes\\nRound down to **0** if a population is below **500,000.**\",\"isFree\":false,\"isHidden\":false,\"lab\":\"cities1 = [\\n['Tokyo', 37435191],\\n['Delhi', 29399141],\\n['Shanghai', 26317104]\\n]\\n\\ncities2 = [\\n['Sao Paulo', 21846507]\\n]\\n\\ncities3 = [\\n['London', 9304016],\\n['Naples', \\t2186853],\\n['Nice', \\t942208],\\n['Abu Dhabi', 1482816],\\n['Riga', \\t630692],\\n['Vatican City', 572]\\n]\\n\\nTest.assert_equals(millions_rounding(cities1), [\\n['Tokyo', 37000000],\\n['Delhi', 29000000],\\n['Shanghai', 26000000]\\n])\\n\\nTest.assert_equals(millions_rounding(cities2), [\\n['Sao Paulo', 22000000]\\n])\\n\\nTest.assert_equals(millions_rounding(cities3), [\\n['London', 9000000],\\n['Naples', \\t2000000],\\n['Nice', \\t1000000],\\n['Abu Dhabi', 1000000],\\n['Riga', \\t1000000],\\n['Vatican City', 0]\\n])\\n\\nTest.assert_equals(millions_rounding([]), [])\",\"language\":\"python3\",\"quality\":4.696969696969697,\"stats\":{\"completed\":{\"ratings\":[1,1,1,1,1,1,1,0,0,0,2,0,1,1,0,0,0,0,1,1,5,0,0,0,2,2,1,0,0,1,1,2,1,2,0,1,2,0,1,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2,2,1,1,0,1,0,1,1,1,2,0,0,0,0,0,1,0,1,0,1,0,0,1,2,1,0,3,0,0,0,0,0,1,0],\"quality\":[5,5,5,4,5,5,5,5,5,5,5,5,5,5,5,4,5,5,5,5,5,5,1,5,5,5,5,5,1,5,5,5,5],\"rators\":[\"PXAcsKkssS2yLyDv2\",\"XD5nmvKQchKezPXhy\",\"pPpmP7xeJzGgK362R\",\"iS5BrkGLzJyPK7nKt\",\"3cF6NXq3ZEwdkgSjb\",\"buX4mCQhtXCfBjeno\",\"yjtdwc2AC4jA2RWtn\",\"QRv96jmNaYsWkxQEG\",\"7dQYiDeTcMztbGyso\",\"wRttWTM59y8m5mx7x\",\"eYfPWvZwnJQkHbSTK\",\"a777e8chPvJkY3tKa\",\"Ds7L5bksw2QRHjrKL\",\"AFfw7cGg83uYk2Miy\",\"Jqk2uJZZxEv5wZFze\",\"J5T8gZqiZXFuFDTQ7\",\"FEYpu9RWysAgW3XnP\",\"HBuJYgW2eRBJp9FoG\",\"uvLimfW9x3bCp7huQ\",\"oBcs8GLX2ZFLXQy8y\",\"N2wnZXkhDH86mgjQ8\",\"gb9rvGus2Jv7bjZSs\",\"AXcnPX68zdMiLNSmu\",\"5HCu9Ydd86QgHDRNP\",\"zd9FLSzsGz3evKafy\",\"srJ34BaybkQh3qRkM\",\"gJYuGdkXEWWmGRLzu\",\"cR3ibTMxLyEdDFCHY\",\"6gHaCTMvjCk5ggBFm\",\"ghMkPtdFCpM6w8nax\",\"fTNQmMvTZhhiGBCMe\",\"8EJ4j2fcfjTJ7Zrzu\",\"qAby4AWXmTNeusvg3\",\"8JyqsSbN2FJXPr3cw\",\"q6QsMYNMpPNtmyTeW\",\"YcCLwitFMAEJSnxAW\",\"Yp7uvStL97cC9fKkY\",\"PC3pLs36zNzpRDSuE\",\"DEDniTrstQYGounXT\",\"iojEnnY9FsMfYzp6f\",\"J3upzLHuEwXH7Z2hx\",\"kjvgTyRFyKHv44DcH\",\"NrRa4TS6uZR9xuXRt\",\"gjiu8kLnHYxe4HoBN\",\"66a9xX73nmTEuKs9k\",\"JKbEBybAsiKrmcqof\",\"T6iBEE2jp7f7iEF2P\",\"2QGRoQn2dRq3scu7k\",\"XrqNzJ2FRG8HnGiR6\",\"tAF9Gf6PiGogbZuWs\",\"eMuCpJ2spXWkJjWNz\",\"CHvzhtXnv8HTbPQ56\",\"4TmgHkn5vqyHK3sYC\",\"9Ly8afdtofp8DXzrt\",\"mxX4rH5ELYkdZ2Mbw\",\"mvJBakQ35CWAnbbEZ\",\"utyt9o5BYPWRbXf2X\",\"Q6gEE9dG8ERy2Xu3c\",\"jgyuzt5BpA3ohHG96\",\"i5iePG5GqhJJ8HEoB\",\"T6Rm8mREPMZSftzrC\",\"pwWtbXEjzuvrhEGwt\",\"zC8WrPp5BC6c2exrW\",\"YRAzEBJoLvSaiPtYx\",\"jkbavR2ATFJcpmo8M\",\"AasGs8AeX9Lcb9xJn\",\"aEm3Wvj2rFYRL8Lrb\",\"DPi9QGLctq2y76KuE\",\"9pzFiFK3ANLjQfnr2\",\"yAouD3PxzED8a4gap\",\"HqmxnQJM66Y57twhn\",\"u7i7WPM63n42r8R8o\",\"EfxwqhYdapX3dMQC2\",\"JiSpvq6C7azQEmENc\",\"sHjfbGQGLHE6JR6qu\",\"Dq24MSpogRmq6L4hX\",\"Afnps7TJQuS9sipMb\",\"LQxof8pGabGuWP7Gn\",\"sbJcFfQjQ59Wfg4Cd\",\"iYXdNw7tKcgA3QwBX\",\"JS3hNM3XXkxPdg3yk\",\"8PwfYqoDQFThzNtvf\",\"gKnWjDjwrJh7MK2df\",\"MKT7khMBGXzA22ykf\",\"cdXmwjupCXSvJTSNo\",\"j7ebNFtte6fSkMWjj\",\"Fk9kLwoG4Brf4KsKf\",\"SkQcb2sRn4as5KpnN\",\"dYPkStFnLvAMsHSzZ\",\"d9LBRxvADNBB5QJMB\",\"9LrF5o2TK2iE8BZJh\",\"qaPjAANdnxFnWfj5d\",\"Cg3LKtEAJpsrdWroG\",\"5QN8R22z43SrwoHDz\",\"B4y8aoyXJtskYPFEL\",\"dzS6WBTMHyFEag6Fp\",\"hRfdHT8bWztZuCqzi\",\"TCvpT4EPb8qNssNB7\",\"PTDFuxAzou7W6asWt\",\"FiaTpm7ehfDv43wSG\",\"wjc4iejpErBhxWwHo\",\"5nbHH4eApn6So9h2n\",\"afvP29FhRou2bTaav\",\"vAbK8sCfKyFC78HYg\",\"rF97GDLqCgynr7BaD\",\"K3RacTvkWHLfzKF8i\",\"x2Cz7S8rCKJqCE3Xe\",\"Zyg9xAm6EuH4u3Lo5\",\"tR9grPBLncwacBTzr\",\"fMp8sPsKSECdfgF9j\",\"Ne8mK9DDHG8TRkoxG\",\"QN4FPwhiak7Pf8kn6\",\"rrSC943cCKNG48sH4\",\"Wi4H6ayKsNDWWQCG5\",\"7q8oBsCHwn48Ppnrq\",\"3SgSNoAB3sxaYeT3w\",\"7HAL7H6NJmc4NC8Q5\",\"NzbRqGWspQnWMoDrF\"],\"total\":127},\"flags\":0},\"summary\":\"Given a list of cities and populations, return a list where all populations are rounded to the nearest million.\\n\\nExamples\\nmillions_rounding([\\n  [\\\"Nice\\\", 942208],\\n  [\\\"Abu Dhabi\\\", 1482816],\\n  [\\\"Naples\\\", 2186853],\\n  [\\\"Vatican City\\\", 572]\\n])\\n\\n[\\n  [\\\"Nice\\\", 1000000],\\n  [\\\"Abu Dhabi\\\", 1000000],\\n  [\\\"Naples\\\", 2000000],\\n  [\\\"Vatican City\\\", 0]\\n]\\n\\nNotes\\nRound down to 0 if a\",\"tags\":[\"language_fundamentals\",\"loops\",\"numbers\",\"objects\"],\"timestamp\":{\"$date\":1611504418096},\"title\":\"Rounding in Millions\",\"family\":[{\"_id\":\"x2mxt5c6Qp4Nr5qDv\",\"language\":\"java\"},{\"_id\":\"BeTYTkLerHFtrjH5u\",\"language\":\"javascript\"},{\"_id\":\"dsAHYjkunrynEsvF9\",\"language\":\"php\"},{\"_id\":\"iLH5TYHpLZwR5MSmF\",\"language\":\"python3\"},{\"_id\":\"bnyg7GxQ74cvBMps8\",\"language\":\"ruby\"}]}}"]