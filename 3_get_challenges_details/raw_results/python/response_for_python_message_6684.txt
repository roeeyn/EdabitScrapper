a["{\"msg\":\"result\",\"id\":\"2049\",\"result\":{\"_id\":\"H7Z8enQWipfBMXTx7\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"def fib_str(n, f):\\n  # recursive code here\",\"difficulty\":2.864864864864865,\"familyId\":\"W6uhfQfGmxKTBL32H\",\"instructions\":\"A Fibonacci string is a precedence of the Fibonacci series. It works with any two characters of the English alphabet (as opposed to the numbers `0` and `1` in the Fibonacci series) as the initial items and concatenates them together as it progresses similarly to that of the Fibonacci series.\\n\\n### Examples\\n```\\nfib_str(3, [\\\"j\\\", \\\"h\\\"]) ➞ \\\"j, h, hj\\\"\\n\\nfib_str(5, [\\\"e\\\", \\\"a\\\"]) ➞ \\\"e, a, ae, aea, aeaae\\\"\\n\\nfib_str(6, [\\\"n\\\", \\\"k\\\"]) ➞ \\\"n, k, kn, knk, knkkn, knkknknk\\\"\\n```\\n\\n### Notes\\n- All values for `n` will be at least 2.\\n- It is expected from the challenge-takers to come up with a solution using the concept of **recursion** or the so-called **recursive approach**.\\n- You can read more topics about recursion (see **Resources** tab) if you aren't familiar with it yet or hasn't fully understood the concept behind it before taking up this challenge or unless otherwise.\\n- An **iterative** version of this challenge can be found via this [link](https://edabit.com/challenge/kozqCJFi4de2JnR26).\",\"isHidden\":false,\"lab\":\"from inspect import getsource\\nfrom re import findall, MULTILINE\\n\\ndef check_recursive(fn):\\n  try:\\n    src, n = getsource(fn), fn.__name__\\n    if n == '<lambda>': n = src.split('=')[0].strip()\\n    return len(findall(n, src, flags=MULTILINE)) > 1\\n  except OSError: return True\\n\\nTest.assert_not_equals(check_recursive(fib_str), False, 'Recursion is required!')\\n\\nactual_param, expected_param = [\\n    [3, ['j', 'h']],\\n    [5, ['e', 'a']],\\n    [6, ['n', 'k']],\\n    [7, ['f', 'c']],\\n    [9, ['b', 'a']],\\n    [11, ['z', 'x']],\\n\\t\\t[12, ['t', 'd']]\\n  ], [\\n    \\\"j, h, hj\\\",\\n    \\\"e, a, ae, aea, aeaae\\\",\\n    \\\"n, k, kn, knk, knkkn, knkknknk\\\",\\n    \\\"f, c, cf, cfc, cfccf, cfccfcfc, cfccfcfccfccf\\\",\\n    \\\"b, a, ab, aba, abaab, abaababa, abaababaabaab, abaababaabaababaababa, abaababaabaababaababaabaababaabaab\\\",\\n    \\\"z, x, xz, xzx, xzxxz, xzxxzxzx, xzxxzxzxxzxxz, xzxxzxzxxzxxzxzxxzxzx, xzxxzxzxxzxxzxzxxzxzxxzxxzxzxxzxxz, xzxxzxzxxzxxzxzxxzxzxxzxxzxzxxzxxzxzxxzxzxxzxxzxzxxzxzx, xzxxzxzxxzxxzxzxxzxzxxzxxzxzxxzxxzxzxxzxzxxzxxzxzxxzxzxxzxxzxzxxzxxzxzxxzxzxxzxxzxzxxzxxz\\\",\\n\\t\\t\\\"t, d, dt, dtd, dtddt, dtddtdtd, dtddtdtddtddt, dtddtdtddtddtdtddtdtd, dtddtdtddtddtdtddtdtddtddtdtddtddt, dtddtdtddtddtdtddtdtddtddtdtddtddtdtddtdtddtddtdtddtdtd, dtddtdtddtddtdtddtdtddtddtdtddtddtdtddtdtddtddtdtddtdtddtddtdtddtddtdtddtdtddtddtdtddtddt, dtddtdtddtddtdtddtdtddtddtdtddtddtdtddtdtddtddtdtddtdtddtddtdtddtddtdtddtdtddtddtdtddtddtdtddtdtddtddtdtddtdtddtddtdtddtddtdtddtdtddtddtdtddtdtd\\\"\\n]\\n\\nfor i, s in enumerate(actual_param): Test.assert_equals(fib_str(*s), expected_param[i])\",\"language\":\"python3\",\"summary\":\"A Fibonacci string is a precedence of the Fibonacci series. It works with any two characters of the English alphabet (as opposed to the numbers 0 and 1 in the Fibonacci series) as the initial items and concatenates them together as it progresses similarly to that of the Fibonacci series.\\n\\nExamples\\nfib_str(3, [\\\"j\\\", \\\"h\\\"]) ➞ \\\"j, h, hj\\\"\\n\\nfib_str(5, [\\\"e\\\", \\\"a\\\"]) ➞ \\\"\",\"tags\":[\"recursion\",\"strings\"],\"timestamp\":{\"$date\":1595027039706},\"title\":\"Recursion: Fibonacci String\",\"stats\":{\"completed\":{\"total\":88,\"ratings\":[5,5,5,5,5,5,1,4,5,5,1,3,4,1,2,5,3,5,2,2,3,1,2,5,3,2,1,5,3,2,5,5,5,0,3,0,5,3,5,5,2,2,0,4,1,5,1,2,2,3,0,3,4,4,5,5,0,2,5,1,1,2,0,5,2,2,3,3,1,2,1,2,0,1],\"rators\":[\"a777e8chPvJkY3tKa\",\"aEm3Wvj2rFYRL8Lrb\",\"8PwfYqoDQFThzNtvf\",\"gJYuGdkXEWWmGRLzu\",\"vTfyrr4pGddp8rbXc\",\"bJxaKHJqR82EWw8Su\",\"5qpAGt7e3P89JJvNe\",\"s5M5RvgqR9BhB9JoC\",\"W5TajitmCyxz87zAC\",\"gb9rvGus2Jv7bjZSs\",\"5dHucvf2qBYyKim7X\",\"8JyqsSbN2FJXPr3cw\",\"oZiGwL535nJ5ZMJr7\",\"kQGGbHYrf5fHKLdEw\",\"qD2LrwaDrSdiybLKY\",\"DqNQn9Jsxcu5HijKE\",\"J3upzLHuEwXH7Z2hx\",\"kDq2TnPdy7hGKdAD5\",\"4fhjJBvLBWh6QeSih\",\"fSQSHjW3e72MrWxbD\",\"h4x2jaMdj5aQZbW5g\",\"Cia25zjeX3RkCNx5t\",\"HqmxnQJM66Y57twhn\",\"HF28xZKSLM9wEuqNg\",\"buX4mCQhtXCfBjeno\",\"Jqk2uJZZxEv5wZFze\",\"iS5BrkGLzJyPK7nKt\",\"p8qqFdJ3FSk5x9z3G\",\"yr822PZmmiDDenxpB\",\"DPi9QGLctq2y76KuE\",\"58M252WF7SPRinfBx\",\"FEYpu9RWysAgW3XnP\",\"b3Dk2LqoEgripS3Y3\",\"8sNv5PTHa7XQ8bNqR\",\"XNmN6ztj36a7eChbD\",\"zd9FLSzsGz3evKafy\",\"XtbLJYQwtgCNSbyNN\",\"QRv96jmNaYsWkxQEG\",\"iojEnnY9FsMfYzp6f\",\"9pzFiFK3ANLjQfnr2\",\"2PufnQcsHsfymufX3\",\"eHcgvkTGsH7ZziqBo\",\"AasGs8AeX9Lcb9xJn\",\"yjtdwc2AC4jA2RWtn\",\"joxsWNqkSudzBYLpw\",\"bJaPCBx63YxdJAuTS\",\"fr9mr2pgEcPkdrDkX\",\"wZ22E8EXW4qasgru2\",\"RGxcgGLNWPCeSaPFb\",\"7tPEp5wcA7uBBR723\",\"J23RcmzbdtBbPCTjT\",\"PH32cNxBjrK4a28sn\",\"tAF9Gf6PiGogbZuWs\",\"hR7GMiqGap4CzEWSy\",\"XHShZ3WMPgGEA2vkR\",\"fznzd3qnvtbFkkizz\",\"SGhPxX5bHGL8zZqtt\",\"ap4p6PnYo4cwdaTsT\",\"jg3qo9HhxPphgEcE6\",\"gwbs9xQQm2dJnyyny\",\"hZu74uvdDyYew4ruW\",\"8yJF7A6HAqEcwpwJf\",\"ZPJgJqis2bXyHZvqT\",\"7qjdmTfwgA7TyLCii\",\"MpfytGFYF77emJ3cT\",\"T6iBEE2jp7f7iEF2P\",\"s66ybqHn4MG953AsN\",\"psguS9pMBDn4Gs5KK\",\"zCJDDCNy5qFMCQWF7\",\"c3NjYNFQ9mkQNH6gE\",\"yod5YhKtPqw2GfG9B\",\"rsgxKaMPDyC9NDJbB\",\"6hG4gHTmowMx9sRNH\",\"MnFyfhFw3jxtk3GPC\",\"NGh32aadRWYbMDX9P\",\"cSekSt76PJhGd4ded\",\"nkL2knkcNaiHCerW2\",\"go4yjgMHEKtGoNSWK\",\"gXTAie79kiw28tx5u\",\"d8qtzoLB264iP8tdY\",\"yTtSCvGPyYna6JuRC\",\"Z85ajWfZ4jDPkbvR4\",\"GTKsdeEihE636Le9i\"],\"quality\":[5,5,5,5,5,3,5,5,5,5,5,4,4,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"a777e8chPvJkY3tKa\",\"quality\":4.714285714285714,\"family\":[{\"_id\":\"2MR6qaWfxR4pYpGGo\",\"language\":\"java\"},{\"_id\":\"aEWotdg3r6eB2QLWK\",\"language\":\"javascript\"},{\"_id\":\"H7Z8enQWipfBMXTx7\",\"language\":\"python3\"}]}}"]