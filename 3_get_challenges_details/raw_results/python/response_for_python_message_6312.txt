a["{\"msg\":\"result\",\"id\":\"1866\",\"result\":{\"_id\":\"YsD3af7LgaH6JRSCH\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"def time_adjust(now, hrs, mins, sec):\\n\\t\",\"difficulty\":2.5702479338842976,\"familyId\":\"iTpD63BXkoZTv9zAF\",\"instructions\":\"In this challenge, you have to add a variable amount of hours, minutes and seconds to a given time, obtaining, in turn, a new adjusted time.\\n\\nGiven a string `now` being a timestamp in the format `hh:mm:ss`, and three integers `hrs`, `mins` and `sec` being the hours, minutes and seconds to add, implement a function that returns a string being the newly adjusted timestamp (maintaining the same format).\\n\\n### Examples\\n```\\ntime_adjust(\\\"01:00:00\\\", 1, 30, 10) ➞ \\\"02:30:10\\\"\\n\\ntime_adjust(\\\"18:22:30\\\", 4, 60, 30) ➞ \\\"23:23:00\\\"\\n\\ntime_adjust(\\\"00:00:00\\\", 72, 120, 120) ➞ \\\"02:02:00\\\"\\n```\\n### Notes\\n- The amounts of `hrs`, `mins`  and `sec` can be any positive integer, and you have to correctly add them to the corresponding unit if they exceed their scale. See example #2: sixty minutes is one hour, and sixty seconds (30 + 30) is one minute.\\n- If the amount of time to add exceeds the 24 hours, then the time will start again from \\\"00:00:00\\\". See example #3: 72 hours are 3 exact days so that after three cycles of 24 hours, the hour will be again \\\"00\\\" (and becomes \\\"02\\\" because we are adding also 120 minutes or 2 hours).\",\"isHidden\":false,\"lab\":\"Test.assert_equals(time_adjust(\\\"01:00:00\\\", 1, 30, 10), \\\"02:30:10\\\", \\\"Example #1\\\")\\nTest.assert_equals(time_adjust(\\\"18:22:30\\\", 4, 60, 30), \\\"23:23:00\\\", \\\"Example #2\\\")\\nTest.assert_equals(time_adjust(\\\"00:00:00\\\", 72, 120, 120), \\\"02:02:00\\\", \\\"Example #3\\\")\\nTest.assert_equals(time_adjust(\\\"23:59:59\\\", 0, 0, 1), \\\"00:00:00\\\")\\nTest.assert_equals(time_adjust(\\\"12:17:43\\\", 0, 0, 0), \\\"12:17:43\\\")\\nTest.assert_equals(time_adjust(\\\"14:11:29\\\", 1000, 23466, 171626), \\\"12:57:55\\\")\\nTest.assert_equals(time_adjust(\\\"21:02:55\\\", 39, 62525, 332), \\\"22:13:27\\\")\",\"language\":\"python3\",\"summary\":\"In this challenge, you have to add a variable amount of hours, minutes and seconds to a given time, obtaining, in turn, a new adjusted time.\\n\\nGiven a string now being a timestamp in the format hh:mm:ss, and three integers hrs, mins and sec being the hours, minutes and seconds to add, implement a function that returns a string being the newly adjusted timestamp\",\"tags\":[\"dates\",\"strings\",\"formatting\"],\"timestamp\":{\"$date\":1580343741531},\"title\":\"To Adjust the Time\",\"stats\":{\"completed\":{\"total\":179,\"ratings\":[2,2,2,2,2,3,2,2,3,2,2,2,2,2,3,3,2,3,3,4,2,3,1,2,2,1,3,2,3,2,3,3,3,0,3,3,2,3,5,4,3,4,0,3,1,2,5,4,4,3,2,2,1,4,0,3,2,2,2,4,3,2,0,3,0,3,1,0,3,3,3,3,2,2,3,3,4,4,3,1,2,3,2,3,2,2,3,4,3,4,2,4,4,3,4,4,5,3,3,3,2,4,3,3,3,2,2,3,3,1,1,0,2,1,4,4,3,2,1,4,5],\"rators\":[\"tAF9Gf6PiGogbZuWs\",\"gb9rvGus2Jv7bjZSs\",\"Jqk2uJZZxEv5wZFze\",\"2innwjWqxJHo4eRGh\",\"2fxapKr8XGdNeaKi2\",\"s5M5RvgqR9BhB9JoC\",\"8AipP2ZKTAhvzfQAr\",\"C4QntmkYtB89GNtpd\",\"8JyqsSbN2FJXPr3cw\",\"Ef83JYi9yz2DTPs7m\",\"PXAcsKkssS2yLyDv2\",\"yZvzB3qFb8pkHy4dg\",\"PytNZK9mNiRiZxPrm\",\"8PwfYqoDQFThzNtvf\",\"S6Zd8mPuvhuh3MFRt\",\"EjbDDFRECrzQDkzrX\",\"mDWNyaaQ9hvPCRzSd\",\"wPxeazAYct9gG2eRM\",\"aEm3Wvj2rFYRL8Lrb\",\"CRoY655aiRDBDq3uM\",\"6c4xjEdFxdYw5xGrt\",\"sbJcFfQjQ59Wfg4Cd\",\"ZNnsMeNkdDhHjSrZb\",\"kYWb8BwpKwunQkxeX\",\"ENsSYogEHHeDSrFod\",\"YRstQuthRkFeBiXug\",\"gJYuGdkXEWWmGRLzu\",\"n2BRY9X8899dcG8Bw\",\"v9KtC8YLbMWmXiW2H\",\"sz8ufn9i8zeiGWpAy\",\"a777e8chPvJkY3tKa\",\"R4SjTgDnpigJYDLyL\",\"iojEnnY9FsMfYzp6f\",\"tmPGWurf3Da8mhybw\",\"xBQC5uQdx6WndJ3iM\",\"DCMKC7fnTWgyBj47Y\",\"KZ2xddpM2f9JRaryB\",\"feC3ae6ShoSBGZz8H\",\"MCw7uAcoWcSTBTmr3\",\"7env7snStSFKE7xjd\",\"czqqcLfdMfKS4wJ9E\",\"KRyczPZSHYbKrBYnY\",\"ji5f27FPz4wRRF6Ls\",\"aCNWav8S8Try9RkC6\",\"xn7uGNKeAwPEkP9oA\",\"3AcNuhgA2GLtsxaXw\",\"97DthwdtrBLm2y2Yj\",\"zFRDhqEv2jk3y8yNA\",\"uvCEEKAZ8kZzYPvMb\",\"axdSNLZpiCDF8RS6n\",\"9Ct9EYenTi6JXEaWW\",\"xxr9cuQtxZ5wGTACr\",\"FSkKJJ7r3uZrhP8Tq\",\"xj8PfP2WQ7W6PiGNM\",\"cxABox46qWvJRyidE\",\"BC3XhXhX9mTrAScgy\",\"DkpzmwcbSX7p4enmt\",\"Ecg4m7srYGgZsb4Ck\",\"9LawFQ8NRRT7R8mYe\",\"ft75tMaHPBWfTwEo3\",\"7sv3XiAcWcTxyxyyK\",\"tw5p3m3Dump7FwYN7\",\"nJ7rrnewDrB4FythE\",\"ZNgDGdtv5WFkcEn6K\",\"9CoqdidjM9KbeKnHY\",\"guKxq2rMRAYmEKNFP\",\"Yp7uvStL97cC9fKkY\",\"yjtdwc2AC4jA2RWtn\",\"iS5BrkGLzJyPK7nKt\",\"Sy5XanBuQvdqGD4wJ\",\"Tu9n4ugzhvNfEyRFd\",\"SGhPxX5bHGL8zZqtt\",\"7ifh8r4gvyYMhKB94\",\"DWxDxKNNf559Mi8nG\",\"a7Tz3SRxJDRgcHdrK\",\"c2u7qfdaYxcyuydtu\",\"HF28xZKSLM9wEuqNg\",\"jL4y5fTJAMBjhZmko\",\"CTKmXtrqDYqJBnuy8\",\"y6rmzoMWNdRGr3Dk2\",\"w3o9qJuPR62HHh9mx\",\"dHConQk6pC8c323TE\",\"BRXiuhWLN3YSbSdvh\",\"Ge823BtRaryNLP7Mt\",\"Yt3xDfi4WZWzozSpn\",\"XKZd3PNqAy6PFpmiW\",\"Xk2g4CNFAnYcvxiSr\",\"Rzp8QKH9NYYPeCNxJ\",\"eEdkrMmDQKCTonTBG\",\"SExX3m5YftBWmsk2e\",\"5hhuYLyGkeqCvaSrf\",\"8sNv5PTHa7XQ8bNqR\",\"GAXXzPL8Yk7XwcS4W\",\"bcwqw5FNccXbndYKS\",\"pRQwycu9GxxtijH68\",\"4Ytzg5uu2quL2jmqt\",\"uZJqBoqeZRX3RncAR\",\"cPMM2W5YLirnCw8x9\",\"jSaW4kdeAAGoLxcuP\",\"CLypXaZksY99mpRCm\",\"QHcNEadRcCStpv7dj\",\"hmn6qe4B7Nrh6oSGn\",\"yttPzvu6EgAybLvrx\",\"DqMx3ZHZy62HDMDHM\",\"m3R9aaRoEbaxRsSNA\",\"dtEbmodpigEFoZoDK\",\"dB6s7p6pFMEyagbn2\",\"J5T8gZqiZXFuFDTQ7\",\"fEt44wgCuHfCdwebW\",\"MBQFHmFdubRZvvxXD\",\"dkpp45brwPQsYXoun\",\"tGkHoSmX8oHmmpdf5\",\"Lw8oRc5SERsuntXMo\",\"WgwMhf3FtH3SfGnC5\",\"y26Txo23y7zk8L7BQ\",\"nc7bRhkxgKyqusYe3\",\"aCgnGzZfQhjxoPgo2\",\"4fhjJBvLBWh6QeSih\",\"AvA5ezoh8m6mEEXhu\",\"Bh8kmRake3Mama2GE\",\"d8qtzoLB264iP8tdY\",\"3WQPKtsN2GzAexjyB\",\"AHodQW2h6YM7p4vSw\",\"9PzjsCDv7gHMdpead\",\"Kd9cbANRqNspHmByA\",\"J3upzLHuEwXH7Z2hx\",\"mAGNTzpy5X9etQNZm\",\"5rX3qPFdvRQ9G7xZQ\",\"A3pBp3qBMnYZpQKZu\",\"xsDyJstYoBZRS8pJH\",\"p8qqFdJ3FSk5x9z3G\",\"MmhJQjY54sCovjFFd\",\"hkiz2Nv927cYGrA86\",\"ScaZG69jog5kcqGtQ\",\"QRv96jmNaYsWkxQEG\",\"yyo6YLQN2of6fxp49\",\"2PufnQcsHsfymufX3\",\"v3KgCRioto49PtQxN\",\"P7NmFbCJ5offXMRvB\",\"LQxof8pGabGuWP7Gn\",\"MXjxGML2X75x64vJo\",\"wwMcJQRvf3X59Jyev\",\"bJaPCBx63YxdJAuTS\",\"wT5gGgvjKc5wz59AQ\",\"ctbThYbufFCYbRK4f\",\"fbr22rabEJMfBp7vD\",\"3KkyQm77zsew58Dc2\",\"DPi9QGLctq2y76KuE\",\"hR7GMiqGap4CzEWSy\",\"MpfytGFYF77emJ3cT\",\"HqmxnQJM66Y57twhn\",\"oBcs8GLX2ZFLXQy8y\",\"fznzd3qnvtbFkkizz\",\"AQSqD9oNv2uPfxZCR\",\"nkL2knkcNaiHCerW2\",\"nQRzZKeDKuLRf9chX\",\"GTKsdeEihE636Le9i\",\"x9F5WvWftdnhG7DqT\",\"JKb5rhL6DKcCAypF9\",\"aFYzioHvZPvPaunsg\"],\"quality\":[5,4,5,5,4,4,5,5,5,5,5,5,5,5,3,5,5,5,5,5,5,5,5,5,5,5,5,3,5,4,4,5,4,5,5,5,5,5,5,5,5,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"quality\":4.7727272727272725,\"family\":[{\"_id\":\"btK8qCvygCLsMEsqy\",\"language\":\"cpp\"},{\"_id\":\"AuH5MDBMBcTS9Te4K\",\"language\":\"javascript\"},{\"_id\":\"YsD3af7LgaH6JRSCH\",\"language\":\"python3\"},{\"_id\":\"BP7TvTkWYfX94EF8w\",\"language\":\"ruby\"}]}}"]