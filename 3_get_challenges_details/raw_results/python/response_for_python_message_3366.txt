a["{\"msg\":\"result\",\"id\":\"405\",\"result\":{\"_id\":\"zT9GM9opQXK4qPuC4\",\"author\":\"Mubashir Hassan \",\"authorId\":\"T6iBEE2jp7f7iEF2P\",\"code\":\"def list_index(lst, idx):\\n\\t\",\"difficulty\":0.7383177570093458,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"MksJQrTYhim9M8EZa\",\"instructions\":\"Given a 2D-list of letters `lst` and a list of indexes `idx`, find the letters on given indexes and return as a string.\\n\\n```\\nlst = [\\n  [\\\"m\\\", \\\"u\\\", \\\"b\\\"],\\n  [\\\"a\\\", \\\"s\\\", \\\"h\\\"],\\n  [\\\"i\\\", \\\"r\\\", \\\"1\\\"]\\n]\\n\\nidx = [1, 3, 5, 8]\\n```\\n\\nYou have to find the characters in these indexes of the given list if you think of the indexes as:\\n\\n```\\n[\\n  [1, 2, 3],\\n  [4, 5, 6],\\n  [7, 8, 9]\\n]\\n```\\n```\\nlist_index(lst, idx) âžž \\\"mbsr\\\"\\n```\\n\\n### Notes\\nRemember that the indexes start from one and not zero.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"results1 = list_index([['m', 'u', 'b'], ['a', 's', 'h'], ['i', 'r', '1']],  [1, 3, 5, 8])\\nTest.assert_equals(results1, 'mbsr')\\nresults1 = list_index([['m', 'y', 'e'], ['x', 'a', 'm'], ['p', 'l', 'e']], [1, 2, 3, 4, 5, 6, 7, 8, 9])\\nTest.assert_equals(results1, 'myexample')\\nresults2 = list_index([['m', 'y', 'e'], ['x', 'a', 'm'], ['p', 'l', 'e']], [1, 5, 6])\\nTest.assert_equals(results2, 'mam')\\nresults3 = list_index([['m', 'y', 'e'], ['x', 'a', 'm'], ['p', 'l', 'e']], [1, 3, 7, 8])\\nTest.assert_equals(results3, 'mepl')\\n#Mubashir\",\"language\":\"python3\",\"quality\":4.653846153846154,\"stats\":{\"completed\":{\"ratings\":[0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,4,0,0,1,1,0,0,1,2,0,2,1,0,0,1,2,0,1,0,2,5,4,1,0,2,2,1,1,0,1,0,1,0,2,2,0,0,2,0,0,0,0,2,0,0,0,0,1,1,0,1,0,1,3,1,2,0,1,0,0,1,0,2,0,1,1,0,0,0,0,1,0,0,1,2,1,1,2,1,0,1,1,2,1,0,0,1,1],\"quality\":[5,4,5,5,5,5,5,5,5,5,5,5,5,4,5,5,5,5,1,5,3,4,5,5,5,5],\"rators\":[\"T6iBEE2jp7f7iEF2P\",\"FEYpu9RWysAgW3XnP\",\"yjtdwc2AC4jA2RWtn\",\"iojEnnY9FsMfYzp6f\",\"Y3Zt9BhCv3E4jMJkD\",\"iS5BrkGLzJyPK7nKt\",\"KBxTPknCRmB2b5y3i\",\"QRv96jmNaYsWkxQEG\",\"66a9xX73nmTEuKs9k\",\"wjc4iejpErBhxWwHo\",\"GC9LB7vyQwSrQXoqt\",\"KypQdzThzogKXwkXE\",\"PXAcsKkssS2yLyDv2\",\"5HCu9Ydd86QgHDRNP\",\"hiuGBzcJwitoELAas\",\"a2Kmh6ekWqQQooHiQ\",\"wRttWTM59y8m5mx7x\",\"PC3pLs36zNzpRDSuE\",\"Lfut9z3euZ3odxFcH\",\"XEjiqMFvDTLTo2X9G\",\"dj5AyG5fWP8FdsSmZ\",\"zd9FLSzsGz3evKafy\",\"vzzaFWZGQWvmehsJh\",\"buX4mCQhtXCfBjeno\",\"srJ34BaybkQh3qRkM\",\"gJYuGdkXEWWmGRLzu\",\"N2wnZXkhDH86mgjQ8\",\"YcCLwitFMAEJSnxAW\",\"dJzNF59j2p8jWZxiQ\",\"6oABh8e5vpJJ8utgm\",\"H9KZi2cjt4FwH7qog\",\"XD5nmvKQchKezPXhy\",\"eYfPWvZwnJQkHbSTK\",\"3cF6NXq3ZEwdkgSjb\",\"NrRa4TS6uZR9xuXRt\",\"CHvzhtXnv8HTbPQ56\",\"JKbEBybAsiKrmcqof\",\"DEDniTrstQYGounXT\",\"AFfw7cGg83uYk2Miy\",\"8JyqsSbN2FJXPr3cw\",\"Ds7L5bksw2QRHjrKL\",\"i5iePG5GqhJJ8HEoB\",\"gb9rvGus2Jv7bjZSs\",\"9qoWqLcHGiDX429rE\",\"J5T8gZqiZXFuFDTQ7\",\"rfyEkETeoS96QNH4e\",\"ghMkPtdFCpM6w8nax\",\"oBcs8GLX2ZFLXQy8y\",\"HBuJYgW2eRBJp9FoG\",\"2QGRoQn2dRq3scu7k\",\"cR3ibTMxLyEdDFCHY\",\"tAF9Gf6PiGogbZuWs\",\"XrqNzJ2FRG8HnGiR6\",\"YRAzEBJoLvSaiPtYx\",\"fTNQmMvTZhhiGBCMe\",\"4bb7pim4ewTwrMTEA\",\"Yp7uvStL97cC9fKkY\",\"eMuCpJ2spXWkJjWNz\",\"YmQb9Mo4Xcg2vzgbn\",\"AXcnPX68zdMiLNSmu\",\"jgyuzt5BpA3ohHG96\",\"9Ly8afdtofp8DXzrt\",\"pPpmP7xeJzGgK362R\",\"mxX4rH5ELYkdZ2Mbw\",\"mvJBakQ35CWAnbbEZ\",\"MXGuntvz3byrP6WJc\",\"Q6gEE9dG8ERy2Xu3c\",\"dpgnggAFCqgPJDhrL\",\"DPi9QGLctq2y76KuE\",\"zC8WrPp5BC6c2exrW\",\"pwWtbXEjzuvrhEGwt\",\"T6Rm8mREPMZSftzrC\",\"j7ebNFtte6fSkMWjj\",\"jkbavR2ATFJcpmo8M\",\"aEm3Wvj2rFYRL8Lrb\",\"AasGs8AeX9Lcb9xJn\",\"J3upzLHuEwXH7Z2hx\",\"kjvgTyRFyKHv44DcH\",\"9pzFiFK3ANLjQfnr2\",\"HqmxnQJM66Y57twhn\",\"JiSpvq6C7azQEmENc\",\"sHjfbGQGLHE6JR6qu\",\"Cg3LKtEAJpsrdWroG\",\"EfxwqhYdapX3dMQC2\",\"Afnps7TJQuS9sipMb\",\"fdyejapW3NWN7utPX\",\"XbxHXmh5ZmRN2gw3K\",\"LQxof8pGabGuWP7Gn\",\"MKT7khMBGXzA22ykf\",\"54BFnXEjY3FuRNYpN\",\"JS3hNM3XXkxPdg3yk\",\"gKnWjDjwrJh7MK2df\",\"sbJcFfQjQ59Wfg4Cd\",\"MpfytGFYF77emJ3cT\",\"Fk9kLwoG4Brf4KsKf\",\"cdXmwjupCXSvJTSNo\",\"Jqk2uJZZxEv5wZFze\",\"dYPkStFnLvAMsHSzZ\",\"d9LBRxvADNBB5QJMB\",\"9LrF5o2TK2iE8BZJh\",\"qaPjAANdnxFnWfj5d\",\"dzS6WBTMHyFEag6Fp\",\"5QN8R22z43SrwoHDz\",\"B4y8aoyXJtskYPFEL\",\"rhS8qXRjZcpDXkwnE\",\"qAby4AWXmTNeusvg3\",\"yAouD3PxzED8a4gap\",\"TCvpT4EPb8qNssNB7\",\"8PwfYqoDQFThzNtvf\",\"PTDFuxAzou7W6asWt\",\"x2Cz7S8rCKJqCE3Xe\",\"afvP29FhRou2bTaav\",\"rF97GDLqCgynr7BaD\",\"FiaTpm7ehfDv43wSG\",\"mw9464S5dnenqzvpm\",\"tR9grPBLncwacBTzr\",\"fMp8sPsKSECdfgF9j\",\"5nbHH4eApn6So9h2n\",\"QN4FPwhiak7Pf8kn6\",\"FRN2W8RYpJ6GPhgRy\",\"rrSC943cCKNG48sH4\",\"Wi4H6ayKsNDWWQCG5\",\"Ne8mK9DDHG8TRkoxG\",\"sMcFMPkMJC4Kh6ymj\",\"d8qtzoLB264iP8tdY\",\"jWbd7SYDzLPjc9EDh\",\"K6S8HCswXg68EWHmo\",\"7HAL7H6NJmc4NC8Q5\"],\"total\":136},\"flags\":0},\"summary\":\"Given a 2D-list of letters lst and a list of indexes idx, find the letters on given indexes and return as a string.\\n\\nlst = [\\n  [\\\"m\\\", \\\"u\\\", \\\"b\\\"],\\n  [\\\"a\\\", \\\"s\\\", \\\"h\\\"],\\n  [\\\"i\\\", \\\"r\\\", \\\"1\\\"]\\n]\\n\\nidx = [1, 3, 5, 8]\\n\\nYou have to find the characters in these indexes of the given list if you think of the indexes as:\\n\\n[\\n  [1, 2, 3],\\n  [4, 5, 6],\\n  [7, 8, 9]\\n]\\nlist_index(lst,\",\"tags\":[\"arrays\",\"loops\",\"functional_programming\",\"language_fundamentals\"],\"timestamp\":{\"$date\":1615092351027},\"title\":\"List Index\",\"family\":[{\"_id\":\"xwNSxpGzwRh3brHQf\",\"language\":\"javascript\"},{\"_id\":\"88sYD6pnKnDx8JzHt\",\"language\":\"php\"},{\"_id\":\"zT9GM9opQXK4qPuC4\",\"language\":\"python3\"},{\"_id\":\"6jAw6X9R3mXHxASNe\",\"language\":\"ruby\"}]}}"]