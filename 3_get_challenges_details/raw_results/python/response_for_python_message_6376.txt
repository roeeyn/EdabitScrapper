a["{\"msg\":\"result\",\"id\":\"1897\",\"result\":{\"_id\":\"Pf2kDoCRvEL8qzKTs\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"def order_people(lst, people):\\n\\t\",\"difficulty\":2.628205128205128,\"familyId\":\"sNiGBPoKvb8Mz3d77\",\"instructions\":\"Create a function that takes in the size of the line and the number of people waiting and places people in an *S-shape* ordering. The demonstration below will make it clear:\\n\\n```\\n# Ordering numbers 1-15 in a [5,3] space.\\n\\norder_people([5, 3], 15) ➞ [\\n  [1, 2, 3],\\n  [6, 5, 4],\\n  [7, 8, 9],\\n  [12, 11, 10],\\n  [13, 14, 15]\\n]\\n```\\n\\nIf there is extra room, leave those spots blank with a `0` filler.\\n\\n```\\n# Ordering numbers 1-5 in a [4, 3] space.\\n\\norder_people([4, 3], 5) ➞ [\\n  [1, 2, 3],\\n  [0, 5, 4],\\n  [0, 0, 0],\\n  [0, 0, 0]\\n]\\n```\\n\\nIf there are too many people for the given dimensions, return `\\\"overcrowded\\\"`.\\n\\n```\\norder_people([4, 3], 20) ➞ \\\"overcrowded\\\"\\n```\\n\\n### Examples\\n```\\norder_people([3, 3], 8) ➞ [\\n  [1, 2, 3],\\n  [6, 5, 4],\\n  [7, 8, 0]\\n]\\n\\norder_people([2, 4], 5) ➞ [\\n  [1, 2, 3, 4],\\n  [0, 0, 0, 5]\\n]\\n\\norder_people([2, 4], 10) ➞ \\\"overcrowded\\\"\\n```\\n\\n### Notes\\n- Always start the ordering on the upper-left corner.\\n- If the **S-shape** concept doesn't make sense, try writing down some of these examples on a piece of paper and tracing a pencil through the numbers in order.\",\"lab\":\"Test.assert_equals(order_people([5, 3], 15), [\\n\\t[1, 2, 3],\\n\\t[6, 5, 4],\\n\\t[7, 8, 9],\\n\\t[12, 11, 10],\\n\\t[13, 14, 15]\\n])\\n\\nTest.assert_equals(order_people([4, 3], 5), [\\n\\t[1, 2, 3],\\n\\t[0, 5, 4],\\n\\t[0, 0, 0],\\n\\t[0, 0, 0]\\n])\\n\\nTest.assert_equals(order_people([3, 3], 8), [\\n\\t[1, 2, 3],\\n\\t[6, 5, 4],\\n\\t[7, 8, 0]\\n])\\n\\nTest.assert_equals(order_people([2, 4], 5), [\\n\\t[1, 2, 3, 4],\\n\\t[0, 0, 0, 5]\\n])\\n\\nTest.assert_equals(order_people([4, 4], 15), [\\n\\t[1, 2, 3, 4],\\n\\t[8, 7, 6, 5],\\n\\t[9, 10, 11, 12],\\n\\t[0, 15, 14, 13]\\n])\\n\\nTest.assert_equals(order_people([4, 4], 12), [\\n\\t[1, 2, 3, 4],\\n\\t[8, 7, 6, 5],\\n\\t[9, 10, 11, 12],\\n\\t[0, 0, 0, 0]\\n])\\n\\nTest.assert_equals(order_people([2, 2], 4), [\\n\\t[1, 2],\\n\\t[4, 3]\\n])\\n\\nTest.assert_equals(order_people([2, 2], 5),\\\"overcrowded\\\")\\n\\nTest.assert_equals(order_people([2, 2], 3), [\\n\\t[1, 2],\\n\\t[0, 3]\\n])\\n\\nTest.assert_equals(order_people([3, 4], 1), [\\n\\t[1, 0, 0, 0],\\n\\t[0, 0, 0, 0],\\n\\t[0, 0, 0, 0]\\n])\\n\\nTest.assert_equals(order_people([2, 4], 10), \\\"overcrowded\\\")\",\"language\":\"python3\",\"summary\":\"Create a function that takes in the size of the line and the number of people waiting and places people in an S-shape ordering. The demonstration below will make it clear:\\n\\nOrdering numbers 1-15 in a [5,3] space.\\n\\norder_people([5, 3], 15) ➞ [\\n  [1, 2, 3],\\n  [6, 5, 4],\\n  [7, 8, 9],\\n  [12, 11, 10],\\n  [13, 14, 15]\\n]\\n\\nIf there is extra room, leave those spots blan\",\"tags\":[\"arrays\",\"loops\"],\"timestamp\":{\"$date\":1553576237187},\"title\":\"Ordering People in a Line\",\"stats\":{\"completed\":{\"total\":83,\"ratings\":[3,3,3,3,3,3,3,3,3,3,2,3,2,2,3,2,3,4,2,3,4,2,2,4,2,3,2,3,3,3,4,4,3,5,4,2,4,2,4,2,2,3,4,2,2,3,3,4,2,4,3,0,3,1,4,3,1,3,2,3,3,0,1,3,4,2,0,1,2,5,1,3,0,2,0,2,2,4],\"rators\":[\"BkPgkDQGHm66X4Qai\",\"yZvzB3qFb8pkHy4dg\",\"8Mbe4QGKcrmRNdtJa\",\"hb8842bmnFpq7HLLi\",\"Jqk2uJZZxEv5wZFze\",\"8JyqsSbN2FJXPr3cw\",\"tAF9Gf6PiGogbZuWs\",\"gb9rvGus2Jv7bjZSs\",\"nrA8Pacm3A6GqGzq4\",\"ab7BsQuhDo3QgE6bh\",\"qaR8DnWrTk8Mus5Q2\",\"MXjxGML2X75x64vJo\",\"AYaEkTWLMmfzpwejr\",\"PFjMZGHNAPTkgd7tq\",\"7g3vZaQXhLpxrajyg\",\"5s4qhuRJijYaDNXva\",\"BFNm9gacwba9KyLFW\",\"C9LKGu2g5hSijvDzA\",\"Xn3yNbDDP5yebLKzu\",\"hsrNYf3WbexXJKhCq\",\"cmwasetrBzbwJQbks\",\"3ifAHQzsMasfQySoL\",\"nF9pCCzbGDhzvWgaw\",\"jYJ26SiLKBu5GRumq\",\"qmetzMnhdAowTk8Pp\",\"HqmxnQJM66Y57twhn\",\"pDvFWMCD9fQwoBPcu\",\"5uA8xmgifmiJrqbzy\",\"s5M5RvgqR9BhB9JoC\",\"5Bikpk3S6zGEvGDaC\",\"EQbnbkkPYtGxiviTp\",\"8AipP2ZKTAhvzfQAr\",\"sJWTa7iWeRoRtqJ8N\",\"8PwfYqoDQFThzNtvf\",\"pmgFEciNrd3ES9tuu\",\"aEm3Wvj2rFYRL8Lrb\",\"AasGs8AeX9Lcb9xJn\",\"mDWNyaaQ9hvPCRzSd\",\"kYWb8BwpKwunQkxeX\",\"ZNnsMeNkdDhHjSrZb\",\"fznzd3qnvtbFkkizz\",\"C93QAvQRQirB7ByjF\",\"Ecg4m7srYGgZsb4Ck\",\"ACEZh39brWjdGkZXb\",\"KAE5csCXsqwzSCQqP\",\"f2BoqyCpgnmjEjLqx\",\"xn7uGNKeAwPEkP9oA\",\"orFLgPDw9H5MDzmwo\",\"x4dfavjLEcrvAF3QQ\",\"gJYuGdkXEWWmGRLzu\",\"5dHucvf2qBYyKim7X\",\"585XRBCotKx6wh96Q\",\"HF28xZKSLM9wEuqNg\",\"D62kvgDJ6asnsFaEw\",\"iS5BrkGLzJyPK7nKt\",\"Z85ajWfZ4jDPkbvR4\",\"8sNv5PTHa7XQ8bNqR\",\"qPpQfR5KyDb5Y3EFf\",\"yTtSCvGPyYna6JuRC\",\"p8qqFdJ3FSk5x9z3G\",\"DQskEvAv5KiJDPtGF\",\"d8qtzoLB264iP8tdY\",\"J3upzLHuEwXH7Z2hx\",\"iojEnnY9FsMfYzp6f\",\"GbMyob6hRKSBqqq2c\",\"GGdmhAvxXhqhhibJN\",\"yjtdwc2AC4jA2RWtn\",\"2PufnQcsHsfymufX3\",\"BuYaCdQjtba2YWzEW\",\"6s9vXhx6eaZ5473Rr\",\"8nE8QHnFYsHCFebte\",\"MpfytGFYF77emJ3cT\",\"T6iBEE2jp7f7iEF2P\",\"Yp7uvStL97cC9fKkY\",\"gKnWjDjwrJh7MK2df\",\"oBcs8GLX2ZFLXQy8y\",\"GTKsdeEihE636Le9i\",\"euPBBaYXyS8RBr9KB\"],\"quality\":[5,4,5,5,5,4,5,5,5]},\"tests\":{\"score\":0,\"rators\":[\"BkPgkDQGHm66X4Qai\"]},\"instructions\":{\"score\":0,\"rators\":[\"BkPgkDQGHm66X4Qai\"]},\"flags\":0},\"isHidden\":false,\"quality\":4.777777777777778,\"family\":[{\"_id\":\"hEnCY3CfYuBBCqnqZ\",\"language\":\"csharp\"},{\"_id\":\"cN9jtK2jdAGmFKqDt\",\"language\":\"javascript\"},{\"_id\":\"Pf2kDoCRvEL8qzKTs\",\"language\":\"python3\"},{\"_id\":\"5fRvC63mdy8XiYh2b\",\"language\":\"ruby\"}]}}"]