a["{\"msg\":\"result\",\"id\":\"2030\",\"result\":{\"_id\":\"RJySHrDkBjSAj5gzq\",\"author\":\"Luis Pereira\",\"authorId\":\"aEm3Wvj2rFYRL8Lrb\",\"code\":\"def nespers(lst):\\n\\t\",\"difficulty\":2.838709677419355,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"7pHA6o7kgXyiAKXyG\",\"instructions\":\"A permutation of a list is a way to reorder its entries. For instance, `[1, 2, 3]` has permutations:\\n\\n```\\n[1, 2, 3] [1, 3, 2] [2, 1, 3] [2, 3, 1] [3, 1, 2] [3, 2, 1]\\n```\\n\\nThis challenge is about _nested permutations_ (_nespers_, for short) which are the same idea as permutations, but now for nested lists.\\n\\nFor example, the nespers of `[1, [2, 3]]` are:\\n\\n```\\n[1, [2, 3]] [1, [3, 2]] [[2, 3], 1] [[3, 2], 1]\\n```\\n\\nNote that, as the name indicates, nespers must preserve the nested list structure, so that `[2, [1, 3]]` **is not** a nesper of `[1, [2, 3]]` since 1 and 2 are in different nest levels.\\n\\nPut another way, a nesper treats each list level as a set (i.e. order is allowed to change), but elements can't move between sets.\\n\\nWrite a function that, given a nested list, returns the number of nespers of that list.\\n\\nTo see how to find the number of nespers, let's work out a larger example. Recall that, if a list has n elements, there are `n! = n*(n-1)*(n-2)*...*3*2*1` permutations.\\n\\nAs such, I claim that `[[1, 7], 3, [2, 4, 5, 6]]` has `3! * 2! * 4!` nespers. Why? Because there are 3! permutations of the outer level, 2! permutations of the `[1, 7]` level, and 4! permutations of the `[2, 4, 5, 6]` level.\\n\\n\\n### Examples\\n```\\nnespers([1, 2, 3]) ➞ 6\\n\\nnespers([1, [2, 3]]) ➞ 4\\n\\nnespers([[1, 7], 3, [2, 4, 5, 6]]) ➞ 288\\n\\nnespers([1, [3, [2, [5, 4]]]]) ➞ 16\\n# Note that there are 4 nesting levels.\\n```\\n\\n### Notes\\n- The elements inside the nested list will always be distinct, to avoid questions about two nespers looking the same.\\n- Some nesting levels may be empty. Recall that `0!=1`.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(nespers([1, 2, 3]), 6)\\nTest.assert_equals(nespers([1, 2, 3, 4, 5]), 120)\\nTest.assert_equals(nespers([1, [2, 3]]), 4)\\nTest.assert_equals(nespers([[1, 7],  3,  [2, 4, 5, 6]]), 288)\\nTest.assert_equals(nespers([1, [3, [2, [5, 4]]]]), 16)\\nTest.assert_equals(nespers([[], 1, [3, [2, [5, 4]]]]), 48)\\nTest.assert_equals(nespers([6, [], 1, [3, [2, [5, [], 4]]]]), 576)\\nTest.assert_equals(nespers([[], [2], [3, 6], [4, 7, 8, 9], [5, [11, 12, [13, 14]]]]), 138240)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,3,3,2,1,2,4,4,3,5,4,5,2,3,3,2,4,1,2,4,2,4,4,4,2,3],\"rators\":[\"aEm3Wvj2rFYRL8Lrb\",\"8PwfYqoDQFThzNtvf\",\"AasGs8AeX9Lcb9xJn\",\"yZvzB3qFb8pkHy4dg\",\"2fxapKr8XGdNeaKi2\",\"YRstQuthRkFeBiXug\",\"mDWNyaaQ9hvPCRzSd\",\"Yp7uvStL97cC9fKkY\",\"s5M5RvgqR9BhB9JoC\",\"gJYuGdkXEWWmGRLzu\",\"bJaPCBx63YxdJAuTS\",\"aCNWav8S8Try9RkC6\",\"n2BRY9X8899dcG8Bw\",\"xn7uGNKeAwPEkP9oA\",\"SGhPxX5bHGL8zZqtt\",\"8WpvgSbQciTQWdd8T\",\"zZDaXBxMzTCBhNkgL\",\"DvCT6pvPLnzfYKyFx\",\"yjtdwc2AC4jA2RWtn\",\"8sNv5PTHa7XQ8bNqR\",\"tkdRHAExhDq8ryDJT\",\"WPf3wuMaAipBActzR\",\"iS5BrkGLzJyPK7nKt\",\"iojEnnY9FsMfYzp6f\",\"2PufnQcsHsfymufX3\",\"yTtSCvGPyYna6JuRC\",\"GTKsdeEihE636Le9i\"],\"total\":30,\"quality\":[5]},\"flags\":0},\"summary\":\"A permutation of a list is a way to reorder its entries. For instance, [1, 2, 3] has permutations:\\n\\n[1, 2, 3] [1, 3, 2] [2, 1, 3] [2, 3, 1] [3, 1, 2] [3, 2, 1]\\n\\nThis challenge is about nested permutations (nespers, for short) which are the same idea as permutations, but now for nested lists.\\n\\nFor example, the nespers of [1, [2, 3]] are:\\n\\n[1, [2, 3]] [1, [3, 2]\",\"tags\":[\"arrays\",\"math\",\"logic\"],\"timestamp\":{\"$date\":1587152667316},\"title\":\"Counting Nespers\",\"quality\":5,\"family\":[{\"_id\":\"RJySHrDkBjSAj5gzq\",\"language\":\"python3\"}]}}"]