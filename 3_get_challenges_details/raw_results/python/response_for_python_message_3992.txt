a["{\"msg\":\"result\",\"id\":\"715\",\"result\":{\"_id\":\"ZsLDkJfLGFkmjS2jE\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def diving_minigame(lst):\\n\\t\",\"difficulty\":1.191304347826087,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"8rWdxk2GojEJ93J3d\",\"instructions\":\"You will be given a list of numbers which represent your character's **altitude** above sea level at regular intervals:\\n* Positive numbers represent height above the water.\\n* 0 is sea level.\\n* Negative numbers represent depth below the water's surface.\\n\\n**Create a function which returns whether your character survives their unsupervised diving experience, given a list of integers.**\\n\\n1. Your character starts with a **breath meter of 10**, which is the maximum. When diving underwater, your breath meter **decreases by 2** per item in the array. Watch out! If your breath **diminishes to 0**, your character dies!\\n\\n2. To prevent this, you can **replenish your breath by 4 (up to the maximum of 10)** for each item in the array where you are at or above sea level.\\n\\n3. Your function should return `True` if your character survives, and `False` if not.\\n\\n### Worked Example\\n```\\ndiving_minigame([-5, -15, -4, 0, 5]) ➞ True\\n\\n# Breath meter starts at 10.\\n# -5 is below water, so breath meter decreases to 8.\\n# -15 is below water, so breath meter decreases to 6.\\n# -4 is below water, so breath meter decreases to 4.\\n# 0 is at sea level, so breath meter increases to 8.\\n# 5 is above sea level and breath meter is capped at 10 (would've been 12 otherwise).\\n# Character survives!\\n```\\n\\n### Examples\\n```\\ndiving_minigame([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ True\\n\\ndiving_minigame([-3, -6, -2, -6, -2]) ➞ False\\n\\ndiving_minigame([2, 1, 2, 1, -3, -4, -5, -3, -4]) ➞ False\\n```\\n\\n### Notes\\n* Lists may be of any length.\\n* All lists are valid.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(diving_minigame([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), True)\\nTest.assert_equals(diving_minigame([-5, -15, -4, 0, 5]), True)\\nTest.assert_equals(diving_minigame([0, -4, 0, -4, -5, -2]), True)\\nTest.assert_equals(diving_minigame([-4, -3, -4, -3, 5, 2, -5, -20, -42, -4, 5, 3, 5]), True)\\n\\nTest.assert_equals(diving_minigame([-3, -6, -2, -6, -2]), False)\\nTest.assert_equals(diving_minigame([-4, -5, -2, -7, 2, -1000, -2000, -1]), False)\\nTest.assert_equals(diving_minigame([1, 2, 1, 2, 1, 2, 1, 2, 1, -3, -4, -5, -3, -4]), False)\\nTest.assert_equals(diving_minigame([-5, -5, -5, -5, -5, 2, 2, 2, 2, 2, 2, 2, 2]), False)\",\"language\":\"python3\",\"quality\":4.693548387096774,\"stats\":{\"completed\":{\"ratings\":[1,1,1,1,1,1,0,0,0,1,0,0,0,1,2,1,0,0,1,0,0,1,1,1,0,2,1,1,2,2,2,5,1,1,1,1,3,1,0,1,2,2,1,2,2,1,1,2,1,1,2,0,0,0,1,2,2,2,1,1,2,1,1,0,1,3,2,0,1,3,2,2,1,0,1,0,0,2,1,1,0,0,1,2,3,0,1,0,5,2,4,1,2,1,1,2,1,1,2,1,1,2,2,0,1,1,2,1,2,0,0,2,1,2,1],\"quality\":[5,5,5,5,5,3,5,5,5,3,4,5,4,4,5,5,5,5,4,5,5,5,3,5,3,2,5,4,5,5,5,5,5,4,5,5,5,5,5,5,5,5,5,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4],\"rators\":[\"PXAcsKkssS2yLyDv2\",\"FEYpu9RWysAgW3XnP\",\"YcCLwitFMAEJSnxAW\",\"buX4mCQhtXCfBjeno\",\"XD5nmvKQchKezPXhy\",\"DPi9QGLctq2y76KuE\",\"gb9rvGus2Jv7bjZSs\",\"iS5BrkGLzJyPK7nKt\",\"3cF6NXq3ZEwdkgSjb\",\"DEDniTrstQYGounXT\",\"QRv96jmNaYsWkxQEG\",\"iojEnnY9FsMfYzp6f\",\"66a9xX73nmTEuKs9k\",\"Ds7L5bksw2QRHjrKL\",\"sX9GZp3fYyQLrBKMJ\",\"5HCu9Ydd86QgHDRNP\",\"zC8WrPp5BC6c2exrW\",\"pwWtbXEjzuvrhEGwt\",\"pPpmP7xeJzGgK362R\",\"srJ34BaybkQh3qRkM\",\"DFpZcskPncmo7fuzR\",\"PC3pLs36zNzpRDSuE\",\"8JyqsSbN2FJXPr3cw\",\"JKbEBybAsiKrmcqof\",\"oBcs8GLX2ZFLXQy8y\",\"gJYuGdkXEWWmGRLzu\",\"yjtdwc2AC4jA2RWtn\",\"AFfw7cGg83uYk2Miy\",\"zd9FLSzsGz3evKafy\",\"J5T8gZqiZXFuFDTQ7\",\"t3wwRMtYdLYBwWR4J\",\"pd8j6CbLEDRJBafxG\",\"dJzNF59j2p8jWZxiQ\",\"NP2RxM3eBd3drnDwP\",\"kFfKBEZvJB6ZPWyvy\",\"tdfY4iBvD7oh2ufnN\",\"aNBEYjzYdSTcBFhJD\",\"xB9X9SMLveZKSQj7x\",\"ZuajBCgnxkfcybBtT\",\"8HAR8XNbN69nuEDFd\",\"8heNDAHvJaNaGeqMt\",\"hEaXkhtBpEn2DcmQk\",\"CKHKhvJcq9jNMqrmd\",\"JmrbTNBd73ic7PkEg\",\"s5rGmNXhQMD45xjDe\",\"c2q7mY39z5JPEMCaM\",\"mMccJLRWf8sJxkg6P\",\"w3QDkmjZj2dAFDsjq\",\"p8qqFdJ3FSk5x9z3G\",\"g2mqHYvQmr78mET8i\",\"ghW3Nvg42xRxFzjPi\",\"Gy9hM32eensHJfbbA\",\"Wpn95NqWxncQrwNgz\",\"cXaojnX4FS2XbDeMy\",\"ZYCaR9q6g5qgHP2ia\",\"QWjsXnLaJ7xfL3Amq\",\"Rb4N2Z7mpyZCboMKu\",\"3LAj937HgeihHL8EM\",\"2QGRoQn2dRq3scu7k\",\"4oJg4noyTi6b8J8A4\",\"5kazQPq8ZdDsx6kjf\",\"m86y4gi8hMzGz8js7\",\"R4dQtQjfHcPWyRa85\",\"Kh2bZhFuLobbcxBFs\",\"pKg5wQzYZdWgq86Xv\",\"8BBf8Z2G5nSjhLYAP\",\"WWS37MrHbt2NBFNXm\",\"uin3SooXNbPzwajcP\",\"xeLQ9WYieHTMP3hj9\",\"fCTfZSgeDbRbTvDY4\",\"xG4jFH32NX5WP3aMx\",\"TZcYZfqBSXGjcm3NE\",\"YvafTQuzYYdGtgCtP\",\"K6MfKMytoJJuSGewP\",\"svEXtHkZT7ohS5fzc\",\"u5u2YpHXiNgzDNJdX\",\"YA7SDhpgEtsqynvNL\",\"HZFDX8cBzie8684ic\",\"KJCDwGkoXh8qtbbKr\",\"sHjfbGQGLHE6JR6qu\",\"DXEsQPsQt95hy2Kcj\",\"DArRTtM8AwksZurqA\",\"xqmJS8KtcXiEx3heA\",\"TZRY9456fxcSwBYf2\",\"T6iBEE2jp7f7iEF2P\",\"ZRKhpGDwZY7ZdZ2DY\",\"cR3ibTMxLyEdDFCHY\",\"4HLwjX6vwQehzdzER\",\"q8u3Mgfv7rTKhwcKT\",\"pH3ZQdWKWqJKqczyW\",\"SNjYcnXgeCMEdoSRs\",\"GGdmhAvxXhqhhibJN\",\"XrqNzJ2FRG8HnGiR6\",\"NzbRqGWspQnWMoDrF\",\"rCrbqMiaGPgHYTNxu\",\"o4ixjQGSaYqA2JoM4\",\"s5M5RvgqR9BhB9JoC\",\"tAF9Gf6PiGogbZuWs\",\"YmQb9Mo4Xcg2vzgbn\",\"cAP3n5NY64uoMwzRR\",\"7ydxf6c55o64FbW85\",\"CHvzhtXnv8HTbPQ56\",\"khxShyigTmHt6YTSB\",\"PkMNgCvPtiYjNT8sm\",\"WviamGzmYW8XTLPbM\",\"9B9TTLqcFST8ctJe7\",\"4yMggPMnAMqJN6TeR\",\"Yp7uvStL97cC9fKkY\",\"fTNQmMvTZhhiGBCMe\",\"2EbDCCJJvCfKkbYia\",\"BrTDhPJcACL2bsrpJ\",\"eMuCpJ2spXWkJjWNz\",\"Dq24MSpogRmq6L4hX\",\"N2wnZXkhDH86mgjQ8\",\"5XiuAqicKD4hBdu63\",\"aEm3Wvj2rFYRL8Lrb\",\"Fk9kLwoG4Brf4KsKf\",\"MXGuntvz3byrP6WJc\",\"8BFSTCnoe2QggN64c\",\"9Ly8afdtofp8DXzrt\",\"H9KZi2cjt4FwH7qog\",\"XujK3rHd3JcM9TLJy\",\"uiEywE6RBneZvw9zT\",\"AasGs8AeX9Lcb9xJn\",\"rrSC943cCKNG48sH4\",\"T6Rm8mREPMZSftzrC\",\"4TmgHkn5vqyHK3sYC\",\"FxbTzThBiTnRzfirA\",\"kjvgTyRFyKHv44DcH\",\"J3upzLHuEwXH7Z2hx\",\"HqmxnQJM66Y57twhn\",\"9pzFiFK3ANLjQfnr2\",\"jkbavR2ATFJcpmo8M\",\"PH32cNxBjrK4a28sn\",\"eW9R2SCoYnY8HBAdL\",\"NGvCPuMiAP3xrRLfB\",\"Afnps7TJQuS9sipMb\",\"gKnWjDjwrJh7MK2df\",\"uBXzq8ZaZMYkn4wW5\",\"ey3CASd6Je5LEJzfB\",\"CLypXaZksY99mpRCm\",\"MKT7khMBGXzA22ykf\",\"Jqk2uJZZxEv5wZFze\",\"j7ebNFtte6fSkMWjj\",\"YRAzEBJoLvSaiPtYx\",\"SkQcb2sRn4as5KpnN\",\"LQxof8pGabGuWP7Gn\",\"Lm6ChQCWBmaikmk5J\",\"SGEohskFG6ouMzxAo\",\"E9ttMPTkLkKG6nZrg\",\"d9LBRxvADNBB5QJMB\",\"9LrF5o2TK2iE8BZJh\",\"qM4cFjDW9EBf6BNsA\",\"qAby4AWXmTNeusvg3\",\"dzS6WBTMHyFEag6Fp\",\"2E6jQWFmYiGsd3TrC\",\"mxX4rH5ELYkdZ2Mbw\",\"8PwfYqoDQFThzNtvf\",\"TCvpT4EPb8qNssNB7\",\"B4y8aoyXJtskYPFEL\",\"eh94mpsoPxd4itPww\",\"wjc4iejpErBhxWwHo\",\"yAouD3PxzED8a4gap\",\"okauzKFuv3cKfJTF8\",\"5QN8R22z43SrwoHDz\",\"uxBPyEFpGZHD5gFBc\",\"rDgKHd6ZSSpboiAj7\",\"Wi4H6ayKsNDWWQCG5\",\"sbJcFfQjQ59Wfg4Cd\",\"2MjzJ7yxh3eT3xbng\",\"FiaTpm7ehfDv43wSG\",\"GgQqni8TkbqEBGcsy\"],\"total\":179},\"flags\":0},\"summary\":\"You will be given a list of numbers which represent your character's altitude above sea level at regular intervals:\\nPositive numbers represent height above the water.\\n0 is sea level.\\nNegative numbers represent depth below the water's surface.\\n\\nCreate a function which returns whether your character survives their unsupervised diving experience, given a list of\",\"tags\":[\"conditions\",\"arrays\",\"numbers\",\"loops\",\"games\"],\"timestamp\":{\"$date\":1614948950311},\"title\":\"Hold Your Breath!\",\"family\":[{\"_id\":\"SoZ2s9wwizKo7hLHB\",\"language\":\"cpp\"},{\"_id\":\"KxMhoaDkyC2CiNGQx\",\"language\":\"javascript\"},{\"_id\":\"7SyqAcAMb5vuzzLW5\",\"language\":\"php\"},{\"_id\":\"ZsLDkJfLGFkmjS2jE\",\"language\":\"python3\"},{\"_id\":\"Esb3WiPxGpDktJp3z\",\"language\":\"ruby\"}]}}"]