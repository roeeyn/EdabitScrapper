a["{\"msg\":\"result\",\"id\":\"699\",\"result\":{\"_id\":\"YRwZvg5Pkgw4pEWC5\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def flick_switch(lst):\\n\\t\",\"difficulty\":1.1206896551724137,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"GwXKbG2b8oPELEtuY\",\"instructions\":\"Create a function that always returns `True` for every item in a given list. However, if an element is the word `\\\"flick\\\"`, switch to always returning the opposite boolean value.\\n\\n### Examples\\n```\\nflick_switch([\\\"edabit\\\", \\\"flick\\\", \\\"eda\\\", \\\"bit\\\"]) ➞ [True, False, False, False]\\n\\nflick_switch([\\\"flick\\\", 11037, 3.14, 53]) ➞[False, False, False, False]\\n\\nflick_switch([False, False, \\\"flick\\\", \\\"sheep\\\", \\\"flick\\\"]) ➞ [True, True, False, False, True]\\n```\\n\\n### Notes\\n- `\\\"flick\\\"` will always be given in lowercase.\\n- A list may contain multiple flicks.\\n- Switch the boolean value on the same element as the flick itself.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(flick_switch(['edabit', 'flick', 'eda', 'bit']), [True, False, False, False])\\nTest.assert_equals(flick_switch(['flick', 11037, 3.14, 53]), [False, False, False, False])\\nTest.assert_equals(flick_switch([False, False, 'flick', 'sheep', 'flick']), [True, True, False, False, True])\\nTest.assert_equals(flick_switch([flick_switch]), [True])\\nTest.assert_equals(flick_switch([('john', 'smith', 'susan'), 'flick']), [True, False])\\nTest.assert_equals(flick_switch(['flick', 'flick', 'flick', 'flick', 'flick']), [False, True, False, True, False])\\nTest.assert_equals(flick_switch([]), [])\",\"language\":\"python3\",\"quality\":4.954545454545454,\"stats\":{\"completed\":{\"ratings\":[1,1,1,1,1,1,0,2,0,0,1,1,2,1,1,0,2,2,1,0,0,0,0,2,0,1,0,5,3,1,0,2,2,2,0,1,2,0,3,2,1,0,1,1,1,1,0,2,2,2,3,1,1,1,1,0,2,0,0,0,2,0,1,2,2,1,3,1,0,1,1,2,0,2,0,2,1,1,2,1,2,0,0,0,0,1,2,2,4,2,1,0,2,2,0,2,1,2,1,0,2,1,1,2,1,1,0,1,1,0,1,1,0,2,1,1],\"quality\":[5,5,5,5,5,5,5,5,5,5,5,5,5,4,5,5,5,5,5,5,5,5],\"rators\":[\"PXAcsKkssS2yLyDv2\",\"gb9rvGus2Jv7bjZSs\",\"qAby4AWXmTNeusvg3\",\"9QQuodfDyrLEfpSqq\",\"iS5BrkGLzJyPK7nKt\",\"mKJuoa2SZSDNhvhk9\",\"fTNQmMvTZhhiGBCMe\",\"gJYuGdkXEWWmGRLzu\",\"LfX36XuZdmywGhFMX\",\"QRv96jmNaYsWkxQEG\",\"qD2LrwaDrSdiybLKY\",\"aXq5prmuL6p4xbPBR\",\"D2vq2uQvksc7hDAPP\",\"jgPEi2SkqrjQGC65X\",\"5HCu9Ydd86QgHDRNP\",\"FEYpu9RWysAgW3XnP\",\"eYfPWvZwnJQkHbSTK\",\"yjtdwc2AC4jA2RWtn\",\"zd9FLSzsGz3evKafy\",\"cR3ibTMxLyEdDFCHY\",\"3cF6NXq3ZEwdkgSjb\",\"T6iBEE2jp7f7iEF2P\",\"J5T8gZqiZXFuFDTQ7\",\"BJp2WkwLWGHHB5oQW\",\"pFqEnYTCapSfnrtmP\",\"PC3pLs36zNzpRDSuE\",\"x6pAupRWnYuDLXRnb\",\"XD5nmvKQchKezPXhy\",\"wnxNnBc9NW2tHdaRW\",\"cAP3n5NY64uoMwzRR\",\"f2pSKLXaxqPzDdWtr\",\"8bNENma48mRrFiQXp\",\"iaKGLhDb7sGYGZivM\",\"Ni5tR7Wxmf6bDQncp\",\"8PwfYqoDQFThzNtvf\",\"YcCLwitFMAEJSnxAW\",\"4D3nbz32N827tnqv4\",\"6j3its9WxmJ5BYQwY\",\"8JyqsSbN2FJXPr3cw\",\"2QGRoQn2dRq3scu7k\",\"knjc2ZYz7GHFoPLMX\",\"BrTDhPJcACL2bsrpJ\",\"Yp7uvStL97cC9fKkY\",\"DPi9QGLctq2y76KuE\",\"8BFSTCnoe2QggN64c\",\"Ds7L5bksw2QRHjrKL\",\"GGdmhAvxXhqhhibJN\",\"eMuCpJ2spXWkJjWNz\",\"ykcCTsD8GBmf7QQd5\",\"peCvTbjQBgdWo53Wv\",\"s5M5RvgqR9BhB9JoC\",\"N2wnZXkhDH86mgjQ8\",\"DEDniTrstQYGounXT\",\"ijNKM8DuspXuAnC4y\",\"oBcs8GLX2ZFLXQy8y\",\"Nb6LYPoQP6KJZt8mz\",\"sbJcFfQjQ59Wfg4Cd\",\"CHvzhtXnv8HTbPQ56\",\"iojEnnY9FsMfYzp6f\",\"3nied3n8KG8RSNixH\",\"AFfw7cGg83uYk2Miy\",\"J3upzLHuEwXH7Z2hx\",\"yv7c4H2jimSKHEjtG\",\"NzbRqGWspQnWMoDrF\",\"NrRa4TS6uZR9xuXRt\",\"KJCDwGkoXh8qtbbKr\",\"sHjfbGQGLHE6JR6qu\",\"66a9xX73nmTEuKs9k\",\"c2q7mY39z5JPEMCaM\",\"CLypXaZksY99mpRCm\",\"a777e8chPvJkY3tKa\",\"ghMkPtdFCpM6w8nax\",\"XrqNzJ2FRG8HnGiR6\",\"tAF9Gf6PiGogbZuWs\",\"g2mqHYvQmr78mET8i\",\"BrW5A64EAFqCKXoaz\",\"w3QDkmjZj2dAFDsjq\",\"iP7wNofhZXTkJ9ryG\",\"5XiuAqicKD4hBdu63\",\"Yzh7zNiyG7LM9vnAj\",\"fSQSHjW3e72MrWxbD\",\"9Ly8afdtofp8DXzrt\",\"AasGs8AeX9Lcb9xJn\",\"rrSC943cCKNG48sH4\",\"aEm3Wvj2rFYRL8Lrb\",\"jkbavR2ATFJcpmo8M\",\"FxbTzThBiTnRzfirA\",\"ey3CASd6Je5LEJzfB\",\"9pzFiFK3ANLjQfnr2\",\"eHcgvkTGsH7ZziqBo\",\"wwz3ixWSv8rFDHBXd\",\"HqmxnQJM66Y57twhn\",\"srJ34BaybkQh3qRkM\",\"NGvCPuMiAP3xrRLfB\",\"Afnps7TJQuS9sipMb\",\"MKT7khMBGXzA22ykf\",\"JS3hNM3XXkxPdg3yk\",\"BatyhxsxBMwGNiioE\",\"PH32cNxBjrK4a28sn\",\"YRAzEBJoLvSaiPtYx\",\"j7ebNFtte6fSkMWjj\",\"Jqk2uJZZxEv5wZFze\",\"jCjCvyhqhpebkJn34\",\"2E6jQWFmYiGsd3TrC\",\"E9ttMPTkLkKG6nZrg\",\"Lm6ChQCWBmaikmk5J\",\"TCvpT4EPb8qNssNB7\",\"vCeeMuYDbz3MB4vsk\",\"jBo3xAopr37GFzY8g\",\"9LrF5o2TK2iE8BZJh\",\"rCrbqMiaGPgHYTNxu\",\"dzS6WBTMHyFEag6Fp\",\"gXTAie79kiw28tx5u\",\"mxX4rH5ELYkdZ2Mbw\",\"rhS8qXRjZcpDXkwnE\",\"B4y8aoyXJtskYPFEL\",\"wjc4iejpErBhxWwHo\",\"4Lwjr34ypKNQNQCar\",\"yAouD3PxzED8a4gap\",\"3LiSLdtN58n46NEqg\",\"pPpmP7xeJzGgK362R\",\"zC8WrPp5BC6c2exrW\",\"pwWtbXEjzuvrhEGwt\",\"5QN8R22z43SrwoHDz\",\"gbGzZz5Yq5hT357v8\",\"sms26SnRN6HCtANiD\",\"Wi4H6ayKsNDWWQCG5\",\"2MjzJ7yxh3eT3xbng\",\"GgQqni8TkbqEBGcsy\",\"u5u2YpHXiNgzDNJdX\",\"FiaTpm7ehfDv43wSG\",\"QN4FPwhiak7Pf8kn6\",\"rraTtctZqnjXu2L2x\"],\"total\":142},\"flags\":0},\"summary\":\"Create a function that always returns True for every item in a given list. However, if an element is the word \\\"flick\\\", switch to always returning the opposite boolean value.\\n\\nExamples\\nflick_switch([\\\"edabit\\\", \\\"flick\\\", \\\"eda\\\", \\\"bit\\\"]) ➞ [True, False, False, False]\\n\\nflick_switch([\\\"flick\\\", 11037, 3.14, 53]) ➞[False, False, False, False]\\n\\nflick_switch(False, False,\",\"tags\":[\"arrays\",\"logic\",\"loops\"],\"timestamp\":{\"$date\":1612906101914},\"title\":\"Flick Switch\",\"family\":[{\"_id\":\"fLc7y5ke7ZLkZk9sv\",\"language\":\"java\"},{\"_id\":\"ny2JAEmW5j6NgmpC8\",\"language\":\"javascript\"},{\"_id\":\"CcZvqqqQE2R9oYX2D\",\"language\":\"php\"},{\"_id\":\"YRwZvg5Pkgw4pEWC5\",\"language\":\"python3\"},{\"_id\":\"AbZHSBnLFnfMHjrmm\",\"language\":\"ruby\"}]}}"]