a["{\"msg\":\"result\",\"id\":\"1319\",\"result\":{\"_id\":\"3W2TRbuD2cnBoXuby\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"def collect(s, n):\\n\\t\",\"difficulty\":1.9811320754716981,\"familyId\":\"SQbWpGWt6NwGW7wnN\",\"instructions\":\"Write a function that returns a list of strings populated from the slices of **n-length** characters of the given word (a slice after another while **n-length** applies onto the word).\\n\\n### Examples\\n```\\ncollect(\\\"intercontinentalisationalism\\\", 6)\\n➞ [\\\"ationa\\\", \\\"interc\\\", \\\"ntalis\\\", \\\"ontine\\\"]\\n\\ncollect(\\\"strengths\\\", 3)\\n➞ [\\\"eng\\\", \\\"str\\\", \\\"ths\\\"]\\n\\ncollect(\\\"pneumonoultramicroscopicsilicovolcanoconiosis\\\", 15)\\n➞ [\\\"croscopicsilico\\\", \\\"pneumonoultrami\\\", \\\"volcanoconiosis\\\"]\\n```\\n\\n### Notes\\n- Ensure that the resulting array is lexicographically ordered.\\n- Return an **empty** array if the *given string* is less than `n`.\\n- A recursive version of this challenge can be found via this [link](https://edabit.com/challenge/TcKZnbdgx7q6LLoFR).\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"str_vector = [\\n  \\\"intercontinentalisationalism\\\", \\\"strengths\\\", \\\"pneumonoultramicroscopicsilicovolcanoconiosis\\\",\\n  \\\"lexicographically\\\", \\\"anesthesiologists\\\", \\\"subdermatoglyphic\\\", \\\"sesquipedalianism\\\",\\n  \\\"recollection\\\", \\\"pseudopseudohypoparathyroidism\\\", \\\"floccinaucinihilipilification\\\",\\n  \\\"antidisestablishmentarianism\\\", \\\"supercalifragilisticexpialidocious\\\", \\\"incomprehensibilities\\\",\\n  \\\"astrophysicists\\\", \\\"honorificabilitudinitatibus\\\", \\\"unimaginatively\\\", \\\"euouae\\\", \\\"tsktsk\\\",\\n  \\\"uncopyrightable\\\" \\n]\\nnum_vector =\\t[ 6, 3, 15, 4, 6, 6, 6, 3, 7, 2, 5, 3, 9, 4, 12, 8, 7, 6, 11 ]\\nres_vector = [\\n  [\\\"ationa\\\", \\\"interc\\\", \\\"ntalis\\\", \\\"ontine\\\"], [\\\"eng\\\", \\\"str\\\", \\\"ths\\\"],\\n  [\\\"croscopicsilico\\\", \\\"pneumonoultrami\\\", \\\"volcanoconiosis\\\"],\\n  [\\\"aphi\\\", \\\"call\\\", \\\"cogr\\\", \\\"lexi\\\"], [\\\"anesth\\\", \\\"esiolo\\\"], [\\\"matogl\\\", \\\"subder\\\"],\\n  [\\\"pedali\\\", \\\"sesqui\\\"], [\\\"ect\\\", \\\"ion\\\", \\\"oll\\\", \\\"rec\\\"], [\\\"hyroidi\\\", \\\"poparat\\\", \\\"pseudop\\\", \\\"seudohy\\\"],\\n  [\\\"at\\\", \\\"ci\\\", \\\"fl\\\", \\\"ic\\\", \\\"if\\\", \\\"ih\\\", \\\"il\\\", \\\"il\\\", \\\"in\\\", \\\"io\\\", \\\"ip\\\", \\\"na\\\", \\\"oc\\\", \\\"uc\\\"],\\n  [\\\"ablis\\\", \\\"antid\\\", \\\"arian\\\", \\\"hment\\\", \\\"isest\\\"],\\n  [\\\"ali\\\", \\\"ali\\\", \\\"doc\\\", \\\"erc\\\", \\\"fra\\\", \\\"gil\\\", \\\"ice\\\", \\\"iou\\\", \\\"ist\\\", \\\"sup\\\", \\\"xpi\\\"],\\n  [\\\"ensibilit\\\", \\\"incompreh\\\"], [\\\"astr\\\", \\\"ophy\\\", \\\"sici\\\"], [\\\"honorificabi\\\", \\\"litudinitati\\\"],\\n  [\\\"unimagin\\\"], [], [\\\"tsktsk\\\"], [\\\"uncopyright\\\"]\\n]\\nfor i, x in enumerate(str_vector): Test.assert_equals(collect(x, num_vector[i]), res_vector[i])\",\"language\":\"python3\",\"quality\":4.555555555555555,\"summary\":\"Write a function that returns a list of strings populated from the slices of n-length characters of the given word (a slice after another while n-length applies onto the word).\\n\\nExamples\\ncollect(\\\"intercontinentalisationalism\\\", 6)\\n➞ [\\\"ationa\\\", \\\"interc\\\", \\\"ntalis\\\", \\\"ontine\\\"]\\n\\ncollect(\\\"strengths\\\", 3)\\n➞ [\\\"eng\\\", \\\"str\\\", \\\"ths\\\"]\\n\\ncollect(\\\"pneumonoultramicroscopicsilico\",\"tags\":[\"arrays\",\"sorting\",\"strings\"],\"timestamp\":{\"$date\":1602888118840},\"title\":\"N-Length Letter Groups\",\"stats\":{\"completed\":{\"total\":140,\"ratings\":[2,2,2,2,2,2,0,3,2,3,0,5,2,3,3,2,1,2,2,3,2,3,2,1,1,2,3,2,1,2,3,2,2,1,0,2,3,1,2,3,1,3,2,2,3,2,0,3,3,3,1,3,2,2,1,1,2,0,3,1,2,2,1,0,2,3,1,4,1,2,3,5,3,3,3,3,0,1,2,2,0,2,2,3,3,1,1,1,3,3,3,2,2,2,0,1,3,2,3,2,1,2,3,1,1,1],\"quality\":[4,5,5,4,4,5,5,5,5,5,4,2,5,5,4,5,5,4,5,4,5,5,5,5,5,5,3],\"rators\":[\"a777e8chPvJkY3tKa\",\"yjtdwc2AC4jA2RWtn\",\"iS5BrkGLzJyPK7nKt\",\"8wkQj36S6ZCH5u8d3\",\"dkcmCKwqApX5jBggc\",\"QRv96jmNaYsWkxQEG\",\"J5T8gZqiZXFuFDTQ7\",\"9FCeFzjPA4jrQ7oHW\",\"8PwfYqoDQFThzNtvf\",\"tAF9Gf6PiGogbZuWs\",\"xn7uGNKeAwPEkP9oA\",\"cR3ibTMxLyEdDFCHY\",\"Yp7uvStL97cC9fKkY\",\"s5M5RvgqR9BhB9JoC\",\"gJYuGdkXEWWmGRLzu\",\"qD2LrwaDrSdiybLKY\",\"w2HhxvSLmDhaGCAjE\",\"8JyqsSbN2FJXPr3cw\",\"aEm3Wvj2rFYRL8Lrb\",\"HF28xZKSLM9wEuqNg\",\"JS3hNM3XXkxPdg3yk\",\"J3upzLHuEwXH7Z2hx\",\"6MjSiiBLPcvXbXcaZ\",\"55RQznnuTGpsj3EXd\",\"Ecg4m7srYGgZsb4Ck\",\"DPi9QGLctq2y76KuE\",\"euPBBaYXyS8RBr9KB\",\"4fhjJBvLBWh6QeSih\",\"gXTAie79kiw28tx5u\",\"t3koQ4dQFWdnyXxBB\",\"oBcs8GLX2ZFLXQy8y\",\"gb9rvGus2Jv7bjZSs\",\"7scpcTEp3SEx5Wjg9\",\"gSFJPsMXnqAog3Q9f\",\"axdSNLZpiCDF8RS6n\",\"sftR9DgM4jpwtxfAM\",\"9WPmEdZpBSsEGvszv\",\"T7QZG6y34b65Fxyef\",\"cAP3n5NY64uoMwzRR\",\"hnyhBFWwNCz9mDfSi\",\"xAMuN7wh2uorXC9q2\",\"3LiSLdtN58n46NEqg\",\"NfMJuiBk6FN5Jc6ow\",\"HqmxnQJM66Y57twhn\",\"ZMJZNTJ2Ng8o8euQJ\",\"iaS9igNEGvpuP8rHs\",\"YFuFKiZeKsaJjJmev\",\"jsQJLi9LDjpXKFP28\",\"fznzd3qnvtbFkkizz\",\"eYfPWvZwnJQkHbSTK\",\"2fxapKr8XGdNeaKi2\",\"n2BRY9X8899dcG8Bw\",\"StNu7DPyTgEStZsMY\",\"Jqk2uJZZxEv5wZFze\",\"4RsakkyRXyYGwFxEa\",\"PXAcsKkssS2yLyDv2\",\"P7NmFbCJ5offXMRvB\",\"KJCDwGkoXh8qtbbKr\",\"T2vhHPhRR96hRizq8\",\"GGdmhAvxXhqhhibJN\",\"qAby4AWXmTNeusvg3\",\"sbJcFfQjQ59Wfg4Cd\",\"MfKe55snfKsdnDejs\",\"CHvzhtXnv8HTbPQ56\",\"srJ34BaybkQh3qRkM\",\"9ivvGvJGvtQfigQaZ\",\"iojEnnY9FsMfYzp6f\",\"PytNZK9mNiRiZxPrm\",\"FEYpu9RWysAgW3XnP\",\"Wpn95NqWxncQrwNgz\",\"YcCLwitFMAEJSnxAW\",\"rfyEkETeoS96QNH4e\",\"2PufnQcsHsfymufX3\",\"M6fxKEh6am7YajPiT\",\"8BFSTCnoe2QggN64c\",\"yr822PZmmiDDenxpB\",\"K6MfKMytoJJuSGewP\",\"Z85ajWfZ4jDPkbvR4\",\"AFfw7cGg83uYk2Miy\",\"DEDniTrstQYGounXT\",\"3KkyQm77zsew58Dc2\",\"AasGs8AeX9Lcb9xJn\",\"fbr22rabEJMfBp7vD\",\"PC3pLs36zNzpRDSuE\",\"4Lwjr34ypKNQNQCar\",\"hqvExZcs9dqew7Bm2\",\"6238R5x5YgbyTTrpk\",\"Ds7L5bksw2QRHjrKL\",\"eaZDrk7eXuuKjtawS\",\"fw44hp3dXWMJENaEn\",\"PTDFuxAzou7W6asWt\",\"jWbd7SYDzLPjc9EDh\",\"ctbThYbufFCYbRK4f\",\"no46qNkTbNeHepe64\",\"4v25hXA4xfWaoJxuN\",\"PH32cNxBjrK4a28sn\",\"buX4mCQhtXCfBjeno\",\"uPGPH8AjEcsawJWkt\",\"T6iBEE2jp7f7iEF2P\",\"o4ixjQGSaYqA2JoM4\",\"MpfytGFYF77emJ3cT\",\"ey3CASd6Je5LEJzfB\",\"gKnWjDjwrJh7MK2df\",\"jCjCvyhqhpebkJn34\",\"nQRzZKeDKuLRf9chX\",\"kjvgTyRFyKHv44DcH\",\"u5u2YpHXiNgzDNJdX\",\"ywyHrY9aEgiBaqCyA\",\"9gJsF5apWJGWZJprn\",\"8sNv5PTHa7XQ8bNqR\",\"RoGGD5cpHb4ftdLDv\",\"AQSqD9oNv2uPfxZCR\",\"8nE8QHnFYsHCFebte\",\"kBNCPDJxWtLYE3pp5\",\"yod5YhKtPqw2GfG9B\",\"mvJBakQ35CWAnbbEZ\",\"5HCu9Ydd86QgHDRNP\",\"BrTDhPJcACL2bsrpJ\",\"Qyfyyw6oC4EHAndzo\",\"nkH3HfJXLMNcBMM79\",\"jkbavR2ATFJcpmo8M\",\"QNPbruWphPhimnrAv\",\"wrL4iX2CCSqDCCty3\",\"mw9464S5dnenqzvpm\",\"9pzFiFK3ANLjQfnr2\",\"ZwfZmDWZkg2Rhsz4k\",\"E2hpke7mHxAWsw5t9\",\"3nied3n8KG8RSNixH\"]},\"flags\":0},\"editorId\":\"a777e8chPvJkY3tKa\",\"family\":[{\"_id\":\"5RvoqBgeykwy2Xqdb\",\"language\":\"java\"},{\"_id\":\"A8GLfBCjWv6TvpsGr\",\"language\":\"javascript\"},{\"_id\":\"3W2TRbuD2cnBoXuby\",\"language\":\"python3\"}]}}"]