a["{\"msg\":\"result\",\"id\":\"1207\",\"result\":{\"_id\":\"g3BokS6KZgyYT8Hjm\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"def shift_to_left(x, y):\\n\\t# recursive code here\",\"difficulty\":1.6857142857142857,\"familyId\":\"XFQD7n28AuFNqAuYp\",\"instructions\":\"The **left shift** operation is similar to **multiplication by powers of two**, thus, the process is _repetitive_ and can be done _recursively_.\\n\\nSample calculation using the left shift operator (` << `):\\n```\\n10 << 3 = 10 * 2^3 = 10 * 8 = 80\\n-32 << 2 = -32 * 2^2 = -32 * 4 = -128\\n5 << 2 = 5 * 2^2 = 5 * 4 = 20\\n```\\n\\nWrite a **recursive** function that **mimics** (without the use of **<<**) the left shift operator and returns the result from the two given integers.\\n\\n### Examples\\n```\\nshift_to_left(5, 2) ➞ 20\\n\\nshift_to_left(10, 3) ➞ 80\\n\\nshift_to_left(-32, 2) ➞ -128\\n\\nshift_to_left(-6, 5) ➞ -192\\n\\nshift_to_left(12, 4) ➞ 192\\n\\nshift_to_left(46, 6) ➞ 2944\\n```\\n\\n### Notes\\n- There will be no negative values for the second parameter `y`.\\n- This challenge is more like recreating of the **left shift** operation, thus, **the use of the operator directly** is **prohibited**.\\n- You are expected to solve this challenge via **recursion**.\\n- An **iterative** version of this challenge can be found via this [link](https://edabit.com/challenge/3xcAQ3CfLAcbEtXys).\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"from inspect import getsource\\nfrom re import findall, MULTILINE\\n\\ndef op_check(fn):\\n  try: return not len(findall(r'>>', getsource(fn), flags=MULTILINE))\\n  except OSError: return True\\n\\ndef recur_check(fn):\\n  try:\\n    src, n = getsource(fn), fn.__name__\\n    if n == '<lambda>': n = src.split('=')[0].strip()\\n    return len(findall(n, src, flags=MULTILINE)) > 1\\n  except OSError: return True\\n\\nTest.assert_not_equals(recur_check(shift_to_left), False, 'Recursion is required!')\\nTest.assert_not_equals(op_check(shift_to_left), False,\\n                       'The use of left shift operator (<<) is prohibited!')\\n\\nactual_param = [[5, 2], [10, 3], [-32, 2], [-6, 5], [12, 4], [46, 6], [57, 0], [79, 1]]\\nexpected_param = [20, 80, -128, -192, 192, 2944, 57, 158]\\nfor i, (x, y) in enumerate(actual_param): Test.assert_equals(shift_to_left(x, y), expected_param[i])\",\"language\":\"python3\",\"quality\":4.954545454545454,\"summary\":\"The left shift operation is similar to multiplication by powers of two, thus, the process is repetitive and can be done recursively.\\n\\nSample calculation using the left shift operator ( << ):\\n10 << 3 = 10 * 2^3 = 10 * 8 = 80\\n-32 << 2 = -32 * 2^2 = -32 * 4 = -128\\n5 << 2 = 5 * 2^2 = 5 * 4 = 20\\n\\nWrite a recursive function that mimics (without the use of <<) the le\",\"tags\":[\"recursion\",\"bit_operations\",\"numbers\"],\"timestamp\":{\"$date\":1603128176502},\"title\":\"Recursion: Left Shift By Powers of Two\",\"stats\":{\"completed\":{\"total\":98,\"ratings\":[2,2,2,2,2,2,3,1,3,3,0,2,1,2,1,0,1,1,2,1,2,1,2,3,0,2,0,2,2,2,3,2,0,4,2,2,1,2,2,1,1,0,2,2,0,2,2,2,1,2,5,4,3,2,2,2,0,2,0,3,4,1,1,0,1,1,2,1,1,1],\"quality\":[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,5,5,5,5,5],\"rators\":[\"a777e8chPvJkY3tKa\",\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\",\"qD2LrwaDrSdiybLKY\",\"KZ2xddpM2f9JRaryB\",\"HF28xZKSLM9wEuqNg\",\"oBcs8GLX2ZFLXQy8y\",\"Yp7uvStL97cC9fKkY\",\"iS5BrkGLzJyPK7nKt\",\"tyLS9T6YMfg9fMtYJ\",\"yjtdwc2AC4jA2RWtn\",\"QRv96jmNaYsWkxQEG\",\"DPi9QGLctq2y76KuE\",\"gXTAie79kiw28tx5u\",\"cR3ibTMxLyEdDFCHY\",\"dYPkStFnLvAMsHSzZ\",\"pDvFWMCD9fQwoBPcu\",\"mxgQ9Jt29CNkP9qa5\",\"gJYuGdkXEWWmGRLzu\",\"5XiuAqicKD4hBdu63\",\"8JyqsSbN2FJXPr3cw\",\"oyKcm3zqdy8Ko5P5d\",\"5hQnRWiKkhgKJXNMP\",\"QTZTmQEmkPv5sxQL4\",\"cAP3n5NY64uoMwzRR\",\"YYLLuR8x7viKvr4FQ\",\"FEYpu9RWysAgW3XnP\",\"WaCAiStk5mpdBqA2A\",\"RGMbFMZXJr7DhcAJy\",\"buX4mCQhtXCfBjeno\",\"h9x8QmpcimKzDzXNn\",\"vJNYgDyPdPQ9XaqWi\",\"qwRw3DFScjWmEkJSi\",\"uCHbRbvS32u77caPs\",\"faXXTDobS7gYBi3iQ\",\"zd9FLSzsGz3evKafy\",\"qNszsXx28cTxvGSNj\",\"sX5MbcKD4XoSf9Fm3\",\"gb9rvGus2Jv7bjZSs\",\"s5M5RvgqR9BhB9JoC\",\"ez5HpLKHr3YSSvt26\",\"PXAcsKkssS2yLyDv2\",\"LW8PqW4HFXWfoJGo6\",\"HqmxnQJM66Y57twhn\",\"oN7LLGSx4FcGmPDmL\",\"5S9nX4rKsnCcnv4Cz\",\"Jqk2uJZZxEv5wZFze\",\"GGdmhAvxXhqhhibJN\",\"9pzFiFK3ANLjQfnr2\",\"rfyEkETeoS96QNH4e\",\"qAby4AWXmTNeusvg3\",\"52LKhrt3s9TMq83ug\",\"pwSguXHHr7k6p8Rnq\",\"T6iBEE2jp7f7iEF2P\",\"q6CHuninhQ3HACvpC\",\"YcCLwitFMAEJSnxAW\",\"iojEnnY9FsMfYzp6f\",\"Ds7L5bksw2QRHjrKL\",\"CHvzhtXnv8HTbPQ56\",\"CHifBvtfPCmBwY49q\",\"9pS8Wky8QB5kG74t4\",\"J5T8gZqiZXFuFDTQ7\",\"M2gFMJkocQSY6bsFR\",\"d8qtzoLB264iP8tdY\",\"5HCu9Ydd86QgHDRNP\",\"66a9xX73nmTEuKs9k\",\"H9KZi2cjt4FwH7qog\",\"DEDniTrstQYGounXT\",\"9ivvGvJGvtQfigQaZ\",\"Bvh4YcB3aNhsRBs8g\",\"AasGs8AeX9Lcb9xJn\",\"AJexRBN9cYQmqvYu6\",\"tAF9Gf6PiGogbZuWs\",\"2gLb2qcTG68Rem7e2\",\"Afnps7TJQuS9sipMb\",\"qzXAMXsHZGT8o5hTA\",\"J3upzLHuEwXH7Z2hx\",\"mvJBakQ35CWAnbbEZ\",\"yod5YhKtPqw2GfG9B\",\"rhS8qXRjZcpDXkwnE\",\"afvP29FhRou2bTaav\",\"BrTDhPJcACL2bsrpJ\",\"ZvoqkwZQC52on5hpY\",\"2PufnQcsHsfymufX3\",\"eMuCpJ2spXWkJjWNz\",\"Wi4H6ayKsNDWWQCG5\",\"dRsW64NZ24uurTpqv\"]},\"flags\":0},\"editorId\":\"a777e8chPvJkY3tKa\",\"family\":[{\"_id\":\"whdNuCbR69fpLhbBv\",\"language\":\"java\"},{\"_id\":\"CNimjGSPT7xmPJuvY\",\"language\":\"javascript\"},{\"_id\":\"g3BokS6KZgyYT8Hjm\",\"language\":\"python3\"}]}}"]