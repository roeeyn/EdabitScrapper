a["{\"msg\":\"result\",\"id\":\"1205\",\"result\":{\"_id\":\"39utPCHvtWqt5vaz9\",\"author\":\"Leah Rappaport\",\"authorId\":\"mDWNyaaQ9hvPCRzSd\",\"code\":\"def direction(lst):\\n\\t\",\"difficulty\":1.6790123456790123,\"familyId\":\"wYm2EeGFHZsugwGiP\",\"instructions\":\"You will be given a list of string `\\\"east\\\"` formatted differently every time. Create a function that returns `\\\"west\\\"` wherever there is `\\\"east\\\"`. Format the string according to the input. Check the examples below to better understand the question.\\n\\n### Examples\\n```\\ndirection([\\\"east\\\", \\\"EAST\\\", \\\"eastEAST\\\"]) ➞ [\\\"west\\\", \\\"WEST\\\", \\\"westWEST\\\"]\\n\\ndirection([\\\"eAsT EaSt\\\", \\\"EaSt eAsT\\\"]) ➞ [\\\"wEsT WeSt\\\", \\\"WeSt wEsT\\\"]\\n\\ndirection([\\\"east EAST\\\", \\\"e a s t\\\", \\\"E A S T\\\"]) ➞ [\\\"west WEST\\\", \\\"w e s t\\\", \\\"W E S T\\\"]\\n```\\n\\n### Notes\\nThe input will only be `\\\"east\\\"` in different formats.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(direction([\\\"east\\\", \\\"EAST\\\", \\\"eastEAST\\\"]), [\\\"west\\\", \\\"WEST\\\", \\\"westWEST\\\"])\\nTest.assert_equals(direction([\\\"eAsT EaSt\\\", \\\"EaSt eAsT\\\"]) , [\\\"wEsT WeSt\\\", \\\"WeSt wEsT\\\"])\\nTest.assert_equals(direction([\\\"east EAST\\\", \\\"e a s t\\\", \\\"E A S T\\\"]), [\\\"west WEST\\\", \\\"w e s t\\\", \\\"W E S T\\\"])\",\"language\":\"python3\",\"quality\":4.771428571428571,\"summary\":\"You will be given a list of string \\\"east\\\" formatted differently every time. Create a function that returns \\\"west\\\" wherever there is \\\"east\\\". Format the string according to the input. Check the examples below to better understand the question.\\n\\nExamples\\ndirection([\\\"east\\\", \\\"EAST\\\", \\\"eastEAST\\\"]) ➞ [\\\"west\\\", \\\"WEST\\\", \\\"westWEST\\\"]\\n\\ndirection([\\\"eAsT EaSt\\\", \\\"EaSt eAsT\\\"])\",\"tags\":[\"arrays\",\"strings\",\"regex\",\"formatting\"],\"timestamp\":{\"$date\":1602984355107},\"title\":\"East or West\",\"stats\":{\"completed\":{\"total\":120,\"ratings\":[2,2,2,2,2,1,2,3,3,3,0,3,1,3,0,2,2,2,0,2,2,3,3,1,1,2,2,1,2,3,0,3,0,2,2,2,3,1,2,2,0,2,0,2,1,2,2,1,1,1,1,0,2,2,2,2,2,5,2,2,1,2,3,0,0,1,2,0,3,3,2,2,1,2,2,2,1,1,1,0,1],\"quality\":[5,5,4,5,5,5,5,5,4,4,5,5,5,5,5,4,5,5,5,5,4,5,4,5,3,5,5,5,5,5,5,5,5,5,5],\"rators\":[\"gb9rvGus2Jv7bjZSs\",\"qD2LrwaDrSdiybLKY\",\"8PwfYqoDQFThzNtvf\",\"tAF9Gf6PiGogbZuWs\",\"J3upzLHuEwXH7Z2hx\",\"s5M5RvgqR9BhB9JoC\",\"dkcmCKwqApX5jBggc\",\"cR3ibTMxLyEdDFCHY\",\"iS5BrkGLzJyPK7nKt\",\"yjtdwc2AC4jA2RWtn\",\"PARDjDrwXvhpjRR9e\",\"4fhjJBvLBWh6QeSih\",\"Yp7uvStL97cC9fKkY\",\"Ecg4m7srYGgZsb4Ck\",\"j49s8dHmmiyPxZmWj\",\"Q8GSH8HaqYiRFXafi\",\"dQK2T76aHcRJkrbKB\",\"bxeJYbwgjJ7ZP5HDz\",\"tGkHoSmX8oHmmpdf5\",\"fznzd3qnvtbFkkizz\",\"nc7bRhkxgKyqusYe3\",\"oBcs8GLX2ZFLXQy8y\",\"ZuuRwv4HkeT54MwA9\",\"X3Temjka6hN4q77b9\",\"GcR9CA587pfQuWHyB\",\"55RQznnuTGpsj3EXd\",\"K4JsBLPjNKZv5LWnp\",\"ytfQKkDogjYiGmF4h\",\"mDWNyaaQ9hvPCRzSd\",\"As83XFL89deJfprRY\",\"9rhsisf8ofHavG5aT\",\"rXDeodKQqFzKJH5nd\",\"xn7uGNKeAwPEkP9oA\",\"R9xM4o4uw9ZWv4xgk\",\"sxxGicPMjQsiFE6GX\",\"m2iiZZHTpzHcEKJMn\",\"4BLshx4h67PD5EeHR\",\"H9oJsZ8bpfXEHknQo\",\"Q8fPjj6oxLJh3mDqZ\",\"8JyqsSbN2FJXPr3cw\",\"5hhuYLyGkeqCvaSrf\",\"db9cnEJAgphM3xrfq\",\"gq8APLpGocAuK5TrR\",\"RFHHHZ4ET4vpWijRe\",\"aPmgDEZvMAvD8pSqj\",\"6428wKHtwKkFdvBs5\",\"y7NrcXNYAE6k4J5ro\",\"MKT7khMBGXzA22ykf\",\"TxDCGrDxc9kqpnBwS\",\"N57qgAhDZ2fsRtmqq\",\"QxC7zdybu4aex33Jm\",\"KRNuPskNKfioASRii\",\"A4XPubChi7cG4vwjx\",\"QRv96jmNaYsWkxQEG\",\"yCm5QFNKRyZfJbr3G\",\"wC42sRpRtEJH9HxDd\",\"8GmHpWWdPvdZQyitJ\",\"g5n6zqL5DbALJc6ZH\",\"uZJqBoqeZRX3RncAR\",\"4dxysdSCAWgboJ9yJ\",\"HF28xZKSLM9wEuqNg\",\"aEm3Wvj2rFYRL8Lrb\",\"gXTAie79kiw28tx5u\",\"gJYuGdkXEWWmGRLzu\",\"DpnYcMphntjsQ96qg\",\"DPi9QGLctq2y76KuE\",\"FEYpu9RWysAgW3XnP\",\"cAP3n5NY64uoMwzRR\",\"zd9FLSzsGz3evKafy\",\"LW8PqW4HFXWfoJGo6\",\"PXAcsKkssS2yLyDv2\",\"RGMbFMZXJr7DhcAJy\",\"Jqk2uJZZxEv5wZFze\",\"dBzwBtRjZqB98DJeB\",\"HqmxnQJM66Y57twhn\",\"5S9nX4rKsnCcnv4Cz\",\"cZccqzRQ9GgjQF6Az\",\"eYfPWvZwnJQkHbSTK\",\"YcCLwitFMAEJSnxAW\",\"srJ34BaybkQh3qRkM\",\"qAby4AWXmTNeusvg3\",\"iojEnnY9FsMfYzp6f\",\"Ds7L5bksw2QRHjrKL\",\"J5T8gZqiZXFuFDTQ7\",\"CHvzhtXnv8HTbPQ56\",\"o4ixjQGSaYqA2JoM4\",\"DEDniTrstQYGounXT\",\"eHcgvkTGsH7ZziqBo\",\"sbJcFfQjQ59Wfg4Cd\",\"AasGs8AeX9Lcb9xJn\",\"AJexRBN9cYQmqvYu6\",\"9Ly8afdtofp8DXzrt\",\"JKb5rhL6DKcCAypF9\",\"5HCu9Ydd86QgHDRNP\",\"qzXAMXsHZGT8o5hTA\",\"2Qk2mFu9HBFzrB24i\",\"ey3CASd6Je5LEJzfB\",\"T6iBEE2jp7f7iEF2P\",\"BrTDhPJcACL2bsrpJ\",\"mvJBakQ35CWAnbbEZ\",\"eMuCpJ2spXWkJjWNz\",\"yod5YhKtPqw2GfG9B\",\"sHjfbGQGLHE6JR6qu\",\"buX4mCQhtXCfBjeno\",\"2PufnQcsHsfymufX3\",\"4Lwjr34ypKNQNQCar\",\"9pzFiFK3ANLjQfnr2\",\"Wi4H6ayKsNDWWQCG5\",\"mxX4rH5ELYkdZ2Mbw\",\"3nied3n8KG8RSNixH\",\"E2hpke7mHxAWsw5t9\"]},\"flags\":1},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"NnG9WnAaMpG9fNbiK\",\"language\":\"cpp\"},{\"_id\":\"zptHytXMgKcAjr4TH\",\"language\":\"javascript\"},{\"_id\":\"39utPCHvtWqt5vaz9\",\"language\":\"python3\"},{\"_id\":\"78vJWxxkS57zqivLH\",\"language\":\"ruby\"}]}}"]