a["{\"msg\":\"result\",\"id\":\"2313\",\"result\":{\"_id\":\"uhLCMpDLcyozWqSRP\",\"author\":\"lllll\",\"authorId\":\"DNACg4rcgZsPtYGZ8\",\"code\":\"def find_path(tickets):\\n\\t\",\"difficulty\":3.6666666666666665,\"familyId\":\"tKoEbFMyDWSu7wSFh\",\"instructions\":\"Given a list of airline tickets represented by pairs of departure and arrival airports \\\\[from, to], reconstruct the itinerary in order. All of the tickets belong to a man who departs from A. Thus, the itinerary must begin with A.\\n\\n### Examples\\n```\\nfind_path([[\\\"C\\\", \\\"F\\\"], [\\\"A\\\", \\\"C\\\"], [\\\"I\\\", \\\"Z\\\"], [\\\"F\\\", \\\"I\\\"]]) ➞ [\\\"A\\\", \\\"C\\\", \\\"F\\\", \\\"I\\\", \\\"Z\\\"]\\n\\nfind_path([[\\\"A\\\",\\\"C\\\"], [\\\"A\\\",\\\"B\\\"], [\\\"C\\\",\\\"B\\\"], [\\\"B\\\",\\\"A\\\"], [\\\"B\\\",\\\"C\\\"]]) ➞ [\\\"A\\\",\\\"B\\\",\\\"A\\\",\\\"C\\\",\\\"B\\\",\\\"C\\\"]\\n# Another possible reconstruction is [\\\"A\\\",\\\"C\\\",\\\"B\\\",\\\"A\\\",\\\"B\\\",\\\"C\\\"].\\n# But it is larger in lexical order.\\n\\nfind_path([[\\\"Y\\\", \\\"L\\\"], [\\\"D\\\", \\\"A\\\"],[\\\"A\\\", \\\"D\\\"], [\\\"R\\\", \\\"Y\\\"], [\\\"A\\\", \\\"R\\\"]]) ➞  [\\\"A\\\", \\\"D\\\", \\\"A\\\", \\\"R\\\", \\\"Y\\\", \\\"L\\\"]\\n```\\n\\n### Notes\\n- If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string. For example, the itinerary `[\\\"A\\\", \\\"B\\\"]` has a smaller lexical order than `[\\\"A\\\", \\\"C\\\"]`.\\n- You may assume all tickets form at least one valid itinerary.\\n- One must use all the tickets once and only once.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(find_path([[\\\"C\\\", \\\"F\\\"], [\\\"A\\\", \\\"C\\\"], [\\\"I\\\", \\\"Z\\\"], [\\\"F\\\", \\\"I\\\"]]), [\\\"A\\\", \\\"C\\\", \\\"F\\\", \\\"I\\\", \\\"Z\\\"])\\nTest.assert_equals(find_path([[\\\"A\\\",\\\"C\\\"],[\\\"A\\\",\\\"B\\\"],[\\\"C\\\",\\\"B\\\"],[\\\"B\\\",\\\"A\\\"],[\\\"B\\\",\\\"C\\\"]]), [\\\"A\\\",\\\"B\\\",\\\"A\\\",\\\"C\\\",\\\"B\\\",\\\"C\\\"])\\nTest.assert_equals(find_path([[\\\"Y\\\", \\\"L\\\"], [\\\"D\\\", \\\"A\\\"],[\\\"A\\\", \\\"D\\\"], [\\\"R\\\", \\\"Y\\\"], [\\\"A\\\", \\\"R\\\"]]), [\\\"A\\\", \\\"D\\\", \\\"A\\\", \\\"R\\\", \\\"Y\\\", \\\"L\\\"])\\nTest.assert_equals(find_path([[\\\"G\\\",\\\"H\\\"],[\\\"A\\\",\\\"Z\\\"],[\\\"A\\\",\\\"G\\\"],[\\\"H\\\",\\\"A\\\"]]), [\\\"A\\\",\\\"G\\\",\\\"H\\\",\\\"A\\\",\\\"Z\\\"])\\nTest.assert_equals(find_path([[\\\"C\\\",\\\"D\\\"],[\\\"F\\\",\\\"K\\\"],[\\\"K\\\",\\\"P\\\"],[\\\"E\\\",\\\"A\\\"],[\\\"P\\\",\\\"U\\\"],[\\\"A\\\",\\\"B\\\"],[\\\"A\\\",\\\"F\\\"],[\\\"B\\\",\\\"C\\\"],[\\\"D\\\",\\\"E\\\"]]), [\\\"A\\\",\\\"B\\\",\\\"C\\\",\\\"D\\\",\\\"E\\\",\\\"A\\\",\\\"F\\\",\\\"K\\\",\\\"P\\\",\\\"U\\\"])\",\"language\":\"python3\",\"quality\":0,\"summary\":\"Given a list of airline tickets represented by pairs of departure and arrival airports \\\\[from, to], reconstruct the itinerary in order. All of the tickets belong to a man who departs from A. Thus, the itinerary must begin with A.\\n\\nExamples\\nfind_path([[\\\"C\\\", \\\"F\\\"], [\\\"A\\\", \\\"C\\\"], [\\\"I\\\", \\\"Z\\\"], [\\\"F\\\", \\\"I\\\"]]) ➞ [\\\"A\\\", \\\"C\\\", \\\"F\\\", \\\"I\\\", \\\"Z\\\"]\\n\\nfind_path([[\\\"A\\\",\\\"C\\\"], [\\\"A\\\",\\\"B\\\"],\",\"tags\":[\"logic\",\"loops\",\"algorithms\",\"arrays\",\"sorting\"],\"timestamp\":{\"$date\":1603729774284},\"title\":\"Find Possible Path Sort by Alphabetical Order\",\"stats\":{\"completed\":{\"total\":14,\"ratings\":[5,5,5,5,5,3,5,3,3,4,4,2,1,1,4,5,5,1],\"quality\":[],\"rators\":[\"DNACg4rcgZsPtYGZ8\",\"8PwfYqoDQFThzNtvf\",\"mDWNyaaQ9hvPCRzSd\",\"aEm3Wvj2rFYRL8Lrb\",\"s5M5RvgqR9BhB9JoC\",\"xn7uGNKeAwPEkP9oA\",\"SGhPxX5bHGL8zZqtt\",\"yjtdwc2AC4jA2RWtn\",\"8sNv5PTHa7XQ8bNqR\",\"J3upzLHuEwXH7Z2hx\",\"iS5BrkGLzJyPK7nKt\",\"gJYuGdkXEWWmGRLzu\",\"T6iBEE2jp7f7iEF2P\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"3h7Bi2hiM8fBocS4w\",\"language\":\"cpp\"},{\"_id\":\"PwbNYKwpbRD8wPMsa\",\"language\":\"javascript\"},{\"_id\":\"uhLCMpDLcyozWqSRP\",\"language\":\"python3\"},{\"_id\":\"hs8h3no42M9aSy59e\",\"language\":\"ruby\"}]}}"]