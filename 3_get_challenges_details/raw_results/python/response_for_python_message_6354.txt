a["{\"msg\":\"result\",\"id\":\"1887\",\"result\":{\"_id\":\"di7ZjxgvLgz72PvCS\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"def validate_swaps(lst, txt):\\n\\t\",\"difficulty\":2.6097560975609757,\"familyId\":\"WeAQt8coonWNKBRnT\",\"instructions\":\"Given an array of strings and an original string, write a function to output an array of boolean values - `True` if the word can be formed from the original word by swapping two letters **only once** and `False` otherwise.\\n\\n### Examples\\n```\\nvalidate_swaps([\\\"BACDE\\\", \\\"EBCDA\\\", \\\"BCDEA\\\", \\\"ACBED\\\"], \\\"ABCDE\\\")\\n➞ [True, True, False, False]\\n\\n# Swap \\\"A\\\" and \\\"B\\\" from \\\"ABCDE\\\" to get \\\"BACDE\\\".\\n# Swap \\\"A\\\" and \\\"E\\\" from \\\"ABCDE\\\" to get \\\"EBCDA\\\".\\n# Both \\\"BCDEA\\\" and \\\"ACBED\\\" cannot be formed from \\\"ABCDE\\\" using only a single swap.\\n\\nvalidate_swaps([\\\"32145\\\", \\\"12354\\\", \\\"15342\\\", \\\"12543\\\"], \\\"12345\\\")\\n➞ [True, True, True, True]\\n\\nvalidate_swaps([\\\"9786\\\", \\\"9788\\\", \\\"97865\\\", \\\"7689\\\"], \\\"9768\\\")\\n➞ [True, False, False, False]\\n```\\n\\n### Notes\\nOriginal string will consist of unique characters.\",\"lab\":\"Test.assert_equals(validate_swaps(['BACDE', 'EBCDA', 'BCDEA', 'ACBED'], 'ABCDE'), \\n[True, True, False, False])\\n\\nTest.assert_equals(validate_swaps(['32145', '12354', '15342', '12543'], '12345'),\\n[True, True, True, True])\\n\\nTest.assert_equals(validate_swaps(['9786', '9788', '97865', '7689'], '9768'),\\n[True, False, False, False])\\n\\nTest.assert_equals(validate_swaps(['123', '321', '132', '13', '12'], '213'), \\n[True, False, False, False, False])\\n\\nTest.assert_equals(validate_swaps(['123', '1234', '1235'], '12'), \\n[False, False, False])\\n\\nTest.assert_equals(validate_swaps(['123', '123', '123'], '133'), \\n[False, False, False])\\n\\nTest.assert_equals(validate_swaps(['132', '321', '213'], '123'), \\n[True, True, True])\",\"language\":\"python3\",\"summary\":\"Given an array of strings and an original string, write a function to output an array of boolean values - True if the word can be formed from the original word by swapping two letters only once and False otherwise.\\n\\nExamples\\nvalidate_swaps([\\\"BACDE\\\", \\\"EBCDA\\\", \\\"BCDEA\\\", \\\"ACBED\\\"], \\\"ABCDE\\\")\\n➞ [True, True, False, False]\\n\\nSwap \\\"A\\\" and \\\"B\\\" from \\\"ABCDE\\\" to get \\\"BACDE\\\".\",\"tags\":[\"arrays\",\"validation\",\"loops\"],\"timestamp\":{\"$date\":1553906096732},\"title\":\"Single Letter Swaps\",\"stats\":{\"completed\":{\"total\":195,\"ratings\":[3,3,3,3,3,3,3,3,3,3,3,2,2,2,3,3,2,2,4,1,4,1,3,3,3,4,3,1,4,3,4,1,3,3,2,4,4,3,4,4,2,3,1,2,2,4,3,3,4,0,4,1,2,3,2,2,0,4,3,1,2,3,4,3,2,3,3,3,1,3,3,3,3,4,4,4,2,3,2,4,4,4,4,2,1,3,4,2,3,0,4,1,4,3,3,0,3,4,0,2,4,1,1,3,4,2,1,3,1,3,0,3,2,3,2,1,0,4,2,3,2,3,4,1,2,3,0,4,3,4,0,4,1,2,2,2,4,5,2,2,2,3,3,1,2,3,4,4,3,2,4,4,3,4,2,2,2,0,2,2,4,2,2,4],\"rators\":[\"mNMQvcxKSSvqqMYCH\",\"qaR8DnWrTk8Mus5Q2\",\"yZvzB3qFb8pkHy4dg\",\"8JyqsSbN2FJXPr3cw\",\"tAF9Gf6PiGogbZuWs\",\"gb9rvGus2Jv7bjZSs\",\"nrA8Pacm3A6GqGzq4\",\"ab7BsQuhDo3QgE6bh\",\"W2wFFFx9pqgwmkFi3\",\"MXjxGML2X75x64vJo\",\"AYaEkTWLMmfzpwejr\",\"7g3vZaQXhLpxrajyg\",\"PFjMZGHNAPTkgd7tq\",\"6A3py6uFBXuQPkidb\",\"BFNm9gacwba9KyLFW\",\"PNJ9ga8zDL2QagomH\",\"3ifAHQzsMasfQySoL\",\"hsrNYf3WbexXJKhCq\",\"jHrtWDGBhkbuWa7fG\",\"j7fyR7k8FfGPLraZx\",\"mG93NkvEZfh2kPrMq\",\"nF9pCCzbGDhzvWgaw\",\"TgjcWxsTjar7snQx9\",\"7BvK9WWXi9Arqh63Q\",\"RErqK2yM94wYyD2hk\",\"vuHZGcRAyE56PzLWi\",\"kQH5b8MXJunh84Czq\",\"eYWgXzijKqfqgZNDi\",\"Tin42WiZ4JTDEnS7b\",\"RXb6cmCNaYbczuDwy\",\"XKi8iZXBCHCaebSHh\",\"s5M5RvgqR9BhB9JoC\",\"HqmxnQJM66Y57twhn\",\"ydEdzuCCZt4yny9Rq\",\"FgkYtHLxeD8pETJ8T\",\"rPvq3ZKT8KGQoBdLx\",\"tJ2ftzwt8uXnv5Fzx\",\"2fxapKr8XGdNeaKi2\",\"6ShafRStcvew4GfCh\",\"aCNWav8S8Try9RkC6\",\"6NPSerrhxLrejF5Er\",\"8PwfYqoDQFThzNtvf\",\"Jqk2uJZZxEv5wZFze\",\"rZ8PD3qRmGCvccSb9\",\"2innwjWqxJHo4eRGh\",\"C4QntmkYtB89GNtpd\",\"sWX2tYC7J4m2GkcRC\",\"fBqQjriC4QEtFNxFe\",\"WLFPvm65aHfgwQy7N\",\"T9WcjJPEu3rcTsKbF\",\"DEMZvkgty7S2teDRA\",\"aEm3Wvj2rFYRL8Lrb\",\"JKb5rhL6DKcCAypF9\",\"AJwBauGHyrbqgDYce\",\"pmgFEciNrd3ES9tuu\",\"jrCAuRRE7GeNS8T55\",\"mDWNyaaQ9hvPCRzSd\",\"CgtPcpaMJC2Ls2nM2\",\"EjbDDFRECrzQDkzrX\",\"zokSkNKBQsrk4jRpH\",\"AasGs8AeX9Lcb9xJn\",\"K5vETaccLsPyu8sbd\",\"dZGNAJXB24zNh2tsD\",\"wZoxzQDbso9SMAPkY\",\"daFMtxYmCNMQ9HNsJ\",\"ywk3XGvcmpTgRxwZa\",\"dXMbkgQFoN37BhruB\",\"YRstQuthRkFeBiXug\",\"55RQznnuTGpsj3EXd\",\"KXYHpCQvmTtpbGXYg\",\"3Zceb8GudqAG3onG3\",\"fznzd3qnvtbFkkizz\",\"PytNZK9mNiRiZxPrm\",\"gJYuGdkXEWWmGRLzu\",\"ZNnsMeNkdDhHjSrZb\",\"S9hHPiybdTKyuELsn\",\"kYWb8BwpKwunQkxeX\",\"bJaPCBx63YxdJAuTS\",\"aLwJNALj2MpjAGZz4\",\"eHhL37DG7oW3vTcg7\",\"W5TajitmCyxz87zAC\",\"rcvAxbpK7Nb73Y9ve\",\"yYxPzFqBgtQ9fsyHM\",\"5dHucvf2qBYyKim7X\",\"3pxHTZBsv7MKzFG6Y\",\"KfXMEiCdZfCZGmjTt\",\"Ecg4m7srYGgZsb4Ck\",\"YLtspA8ec6ntcoMMf\",\"a777e8chPvJkY3tKa\",\"qPpQfR5KyDb5Y3EFf\",\"ASsfbyG6AwkhqRZSB\",\"n2BRY9X8899dcG8Bw\",\"8sNv5PTHa7XQ8bNqR\",\"cykCKNJcqFBxz4T8s\",\"ya2ofFqYRC57bfbND\",\"et4ezbyWYdtQd54X7\",\"xn7uGNKeAwPEkP9oA\",\"ACEZh39brWjdGkZXb\",\"SGhPxX5bHGL8zZqtt\",\"S6ipW8Xzds8QDszn9\",\"x4dfavjLEcrvAF3QQ\",\"dEuJGZbBQkveCXEFk\",\"fRhyffuFFdj8dmJwX\",\"EMJ6uvBZkie429gdg\",\"77dQgT3gTGWLcRPTk\",\"5qfcG54cbBC8ujxav\",\"4fhjJBvLBWh6QeSih\",\"mqJtnfNCs6CedXnay\",\"qm5eyyAHACGv2qknQ\",\"DTKtcn5HrYxtcBza3\",\"ypagZTh36kMRyJTxF\",\"PorYMXQzJ48BSeYzB\",\"6428wKHtwKkFdvBs5\",\"P7NmFbCJ5offXMRvB\",\"d8qtzoLB264iP8tdY\",\"yjtdwc2AC4jA2RWtn\",\"v9KtC8YLbMWmXiW2H\",\"Wv2vJnEj8ywNmARoF\",\"XjajdyybZZbkz8o5x\",\"quEfQhA3xBwsCobcg\",\"HF28xZKSLM9wEuqNg\",\"c2u7qfdaYxcyuydtu\",\"REpkEcYrskYHBmYzW\",\"eqa6cvt5yha7z7dPt\",\"YMBFrhTvTMrAvRYJR\",\"8nE8QHnFYsHCFebte\",\"yTtSCvGPyYna6JuRC\",\"tkdRHAExhDq8ryDJT\",\"6F3Y6ZBAGNDGGTt9B\",\"L3BJygJoLeHsTZqfo\",\"6QHXQkQAcXMJ7C2kK\",\"qYDRywWRZdswy4b6e\",\"4RY3zj9C2t8GGefhi\",\"6XBFEzEaMxZbYJwJS\",\"8fZxjQfuXw5HMSRJM\",\"ECykF5mBka6WGEc3Z\",\"mghE9RR34KjXpYgNb\",\"kiNytaHLy4DSKDELh\",\"9FCeFzjPA4jrQ7oHW\",\"Xk2g4CNFAnYcvxiSr\",\"QRv96jmNaYsWkxQEG\",\"m3R9aaRoEbaxRsSNA\",\"n26pAdsWS6ZXLRjom\",\"zn4AqAak2ZFH8xCkg\",\"jL4y5fTJAMBjhZmko\",\"Z9D6qkTgp66F3YfGg\",\"7D76ZPLjgjZideoy9\",\"YL9pqyCu8xsds8J49\",\"ce6AanPmAjSD6b7MP\",\"8KNtgAcNpyT2f6bTT\",\"obxQjjJfiuHJfBEhj\",\"DPi9QGLctq2y76KuE\",\"xrwCvzMHfoGq4yA7F\",\"gXTAie79kiw28tx5u\",\"hkiz2Nv927cYGrA86\",\"Yp7uvStL97cC9fKkY\",\"wT5gGgvjKc5wz59AQ\",\"iojEnnY9FsMfYzp6f\",\"2PufnQcsHsfymufX3\",\"9izxzCBrsRCbD9ajK\",\"K6MfKMytoJJuSGewP\",\"hR7GMiqGap4CzEWSy\",\"HhYCji7QqauyN3A7v\",\"LQxof8pGabGuWP7Gn\",\"CZeLyDD2BQL3jrzzj\",\"kXEfD7xxEyWd7oxxL\",\"GD2CqRwMgzxKqiWgC\",\"ctbThYbufFCYbRK4f\",\"GTKsdeEihE636Le9i\",\"XZKzLyDK3ywfSmyar\",\"n7exeKEp4vQkppRrd\",\"T6iBEE2jp7f7iEF2P\",\"v74fPhegePGxCm2uk\",\"oBcs8GLX2ZFLXQy8y\",\"oAQ3u2qTy2Npwm6xF\",\"buX4mCQhtXCfBjeno\",\"K3RacTvkWHLfzKF8i\",\"euPBBaYXyS8RBr9KB\"],\"quality\":[4,5,1,5,5,4,5,4,5,5,4,5,5,5,5,5,5,5,5,5,4,5,4]},\"tests\":{\"score\":0,\"rators\":[\"mNMQvcxKSSvqqMYCH\"]},\"instructions\":{\"score\":0,\"rators\":[\"mNMQvcxKSSvqqMYCH\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.565217391304348,\"family\":[{\"_id\":\"oifX6z3a36urd2Z7p\",\"language\":\"cpp\"},{\"_id\":\"3SdTEG59DAA4cPBFR\",\"language\":\"java\"},{\"_id\":\"xukQmQoGopXbQMdZj\",\"language\":\"javascript\"},{\"_id\":\"QwAwAC4xgahcCTjPo\",\"language\":\"php\"},{\"_id\":\"di7ZjxgvLgz72PvCS\",\"language\":\"python3\"},{\"_id\":\"JBTBPYJis3ejnYcFt\",\"language\":\"ruby\"}]}}"]