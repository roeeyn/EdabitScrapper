a["{\"msg\":\"result\",\"id\":\"1582\",\"result\":{\"_id\":\"iXabTtWEX8xegqFds\",\"author\":\"skrzyniarzp\",\"authorId\":\"66a9xX73nmTEuKs9k\",\"code\":\"def alternate_sort(lst):\\n\\t\",\"difficulty\":2.103896103896104,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"ykg5yEfwTekegmiYu\",\"instructions\":\"Write a function that sorts a given list in an aletrnative fashion. The result should be a list sorted in ascending order (number then letter). Lists will contain equal amounts of integer numbers and single characters.\\n\\n### Examples\\n```\\nalternate_sort([\\\"a\\\", \\\"b\\\", \\\"c\\\", 1, 2, 3]) ➞ [1, \\\"a\\\", 2, \\\"b\\\", 3, \\\"c\\\"]\\n\\nalternate_sort([-2, \\\"f\\\", \\\"A\\\", 0, 100, \\\"z\\\"]) ➞ [-2, \\\"A\\\", 0, \\\"f\\\", 100, \\\"z\\\"]\\n\\nalternate_sort([\\\"X\\\", 15, 12, 18, \\\"Y\\\", \\\"Z\\\"]) ➞ [12, \\\"X\\\", 15, \\\"Y\\\", 18, \\\"Z\\\"]\\n```\\n\\n### Notes\\nN/A\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(alternate_sort([5, 1, \\\"a\\\", \\\"c\\\", 2, 1, 3, \\\"c\\\", \\\"b\\\", \\\"e\\\"]), [1, \\\"a\\\", 1, \\\"b\\\", 2, \\\"c\\\", 3, \\\"c\\\", 5, \\\"e\\\"])\\nTest.assert_equals(alternate_sort([-2, \\\"f\\\", \\\"A\\\", 0, 100, \\\"z\\\"]), [-2, \\\"A\\\", 0, \\\"f\\\", 100, \\\"z\\\"])\\nTest.assert_equals(alternate_sort([\\\"a\\\", \\\"b\\\", \\\"c\\\", 1, 2, 3]), [1, \\\"a\\\", 2, \\\"b\\\", 3, \\\"c\\\"])\\nTest.assert_equals(alternate_sort([\\\"e\\\", \\\"d\\\", \\\"a\\\", \\\"b\\\", \\\"i\\\", \\\"t\\\", 1, 10, 100, 2, 20, 200]), [1, \\\"a\\\", 2, \\\"b\\\", 10, \\\"d\\\", 20, \\\"e\\\", 100, \\\"i\\\", 200, \\\"t\\\"])\\nTest.assert_equals(alternate_sort([\\\"X\\\", 15, 12, 18, \\\"Y\\\", \\\"Z\\\"]), [12, \\\"X\\\", 15, \\\"Y\\\", 18, \\\"Z\\\"])\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,1,3,5,3,3,1,2,2,4,2,2,2,2,3,1,3,0,3,0,3,3,2,3,0,0,3,3,2,3,3,1,2,0,1,3,2,3,3,2,1,2,3,2,3,2,1,1,2,2,5,2,0,3,1,3,3,0,0,2,3,2,2,3,1,2,3,3,2,2,2,3],\"rators\":[\"66a9xX73nmTEuKs9k\",\"HF28xZKSLM9wEuqNg\",\"tAF9Gf6PiGogbZuWs\",\"zTZctDDRMSeqYjKQY\",\"8PwfYqoDQFThzNtvf\",\"hfSzpNbjezghfCJH9\",\"aEm3Wvj2rFYRL8Lrb\",\"ENsSYogEHHeDSrFod\",\"AasGs8AeX9Lcb9xJn\",\"Nb6LYPoQP6KJZt8mz\",\"gJYuGdkXEWWmGRLzu\",\"ZNnsMeNkdDhHjSrZb\",\"DxxNN37iEz7b8t2nf\",\"gb9rvGus2Jv7bjZSs\",\"kQH5b8MXJunh84Czq\",\"55RQznnuTGpsj3EXd\",\"a777e8chPvJkY3tKa\",\"4rwxLqLs2mNZNg8NB\",\"PytNZK9mNiRiZxPrm\",\"v9KtC8YLbMWmXiW2H\",\"mDWNyaaQ9hvPCRzSd\",\"GamaMNrnhrjj5tXTx\",\"8JyqsSbN2FJXPr3cw\",\"YLtspA8ec6ntcoMMf\",\"Ecg4m7srYGgZsb4Ck\",\"hRiMXDZNAzyPd5tpt\",\"hnyhBFWwNCz9mDfSi\",\"DEDniTrstQYGounXT\",\"s5M5RvgqR9BhB9JoC\",\"n2BRY9X8899dcG8Bw\",\"iojEnnY9FsMfYzp6f\",\"cR3ibTMxLyEdDFCHY\",\"zZDaXBxMzTCBhNkgL\",\"yjtdwc2AC4jA2RWtn\",\"szxRx3Mvq4txBhXvS\",\"ZrKCkX7xxGGZzauFW\",\"Yp7uvStL97cC9fKkY\",\"DrkR35NqnP9NDLbq6\",\"iS5BrkGLzJyPK7nKt\",\"Wv2vJnEj8ywNmARoF\",\"jL4y5fTJAMBjhZmko\",\"QRv96jmNaYsWkxQEG\",\"DPi9QGLctq2y76KuE\",\"9rhsisf8ofHavG5aT\",\"xn7uGNKeAwPEkP9oA\",\"dkcmCKwqApX5jBggc\",\"J3upzLHuEwXH7Z2hx\",\"gXTAie79kiw28tx5u\",\"gSFJPsMXnqAog3Q9f\",\"qZQxPQ2kaNKAMesHT\",\"oBcs8GLX2ZFLXQy8y\",\"YfJQiCCAhnYRsSnZo\",\"K3RacTvkWHLfzKF8i\",\"StNu7DPyTgEStZsMY\",\"Jqk2uJZZxEv5wZFze\",\"eYfPWvZwnJQkHbSTK\",\"4RsakkyRXyYGwFxEa\",\"CHvzhtXnv8HTbPQ56\",\"cAP3n5NY64uoMwzRR\",\"qAby4AWXmTNeusvg3\",\"RTDx9axf52kxhFjwZ\",\"srJ34BaybkQh3qRkM\",\"GGdmhAvxXhqhhibJN\",\"FEYpu9RWysAgW3XnP\",\"d8qtzoLB264iP8tdY\",\"EfxwqhYdapX3dMQC2\",\"YcCLwitFMAEJSnxAW\",\"rfyEkETeoS96QNH4e\",\"J5T8gZqiZXFuFDTQ7\",\"LQxof8pGabGuWP7Gn\",\"HqmxnQJM66Y57twhn\",\"PC3pLs36zNzpRDSuE\",\"qzXAMXsHZGT8o5hTA\",\"2PufnQcsHsfymufX3\",\"MpfytGFYF77emJ3cT\",\"gKnWjDjwrJh7MK2df\",\"T6iBEE2jp7f7iEF2P\",\"o4ixjQGSaYqA2JoM4\",\"kBNCPDJxWtLYE3pp5\",\"4Lwjr34ypKNQNQCar\",\"yod5YhKtPqw2GfG9B\",\"JhX7jvtpwNyxcc39m\",\"8sNv5PTHa7XQ8bNqR\",\"mw9464S5dnenqzvpm\",\"ey3CASd6Je5LEJzfB\",\"suArq5BbSy7gD6xri\",\"nkH3HfJXLMNcBMM79\",\"DQskEvAv5KiJDPtGF\",\"wrL4iX2CCSqDCCty3\",\"Ds7L5bksw2QRHjrKL\"],\"total\":97,\"quality\":[2,5,4,5,4,5,4,5,5,5,5,5,5,5,4,5,5,5]},\"flags\":0},\"summary\":\"Write a function that sorts a given list in an aletrnative fashion. The result should be a list sorted in ascending order (number then letter). Lists will contain equal amounts of integer numbers and single characters.\\n\\nExamples\\nalternate_sort([\\\"a\\\", \\\"b\\\", \\\"c\\\", 1, 2, 3]) ➞ [1, \\\"a\\\", 2, \\\"b\\\", 3, \\\"c\\\"]\\n\\nalternate_sort([-2, \\\"f\\\", \\\"A\\\", 0, 100, \\\"z\\\"]) ➞ [-2, \\\"A\\\", 0, \\\"f\\\",\",\"tags\":[\"sorting\",\"arrays\"],\"timestamp\":{\"$date\":1591608693048},\"title\":\"Alternate Sort\",\"quality\":4.611111111111111,\"family\":[{\"_id\":\"kqvtyGZPNPvBbkGg3\",\"language\":\"javascript\"},{\"_id\":\"iXabTtWEX8xegqFds\",\"language\":\"python3\"},{\"_id\":\"db3vfvntWchTmY6Xt\",\"language\":\"ruby\"}]}}"]