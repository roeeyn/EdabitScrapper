a["{\"msg\":\"result\",\"id\":\"2280\",\"result\":{\"_id\":\"JQgfPmxmxuAHHcNwp\",\"author\":\"Evgeny SH\",\"authorId\":\"8PwfYqoDQFThzNtvf\",\"code\":\"def non_decreasing(nums):\\n\\t\",\"difficulty\":3.5789473684210527,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"PLbz488yYFARX2wAG\",\"instructions\":\"Given a list of numbers create a solution to check if this list could become non-decreasing by modifying at most 1 element; return True or False as the result of the evaluation. A list is non-decreasing if each element (except the last one) is less or equal to the next one.\\n\\n### Examples\\n```\\nnon_decreasing([4, 2, 3]) ➞ True\\n\\nnon_decreasing([4, 2, 1]) ➞ False\\n\\nnon_decreasing([3, 4, 2, 3]) ➞ False\\n\\nnon_decreasing([5, 7, 1, 8]) ➞ True\\n```\\n\\n### Notes\\nN/A\",\"isFree\":false,\"isHidden\":false,\"lab\":\"from time import perf_counter\\nfrom random import randint\\ntic = perf_counter()\\n\\nTest.assert_equals(non_decreasing([4, 2, 3]), True)\\nTest.assert_equals(non_decreasing([4, 2, 1]), False)\\nTest.assert_equals(non_decreasing([3, 4, 2, 3]), False)\\nTest.assert_equals(non_decreasing([5, 7, 1, 8]), True)\\n\\nt_fun = 0\\nfor _ in range(100):\\n    len_lst = randint(100, 10000)\\n    lst = [0] * len_lst\\n    lst[0] = randint(1, 5)\\n    for i in range(1, len_lst):\\n        add_on = randint(0, 5)\\n        lst[i] = lst[i - 1] + add_on\\n    idx_corr1 = randint(1, len_lst - 1)\\n    lst1 = lst.copy()\\n    lst1[idx_corr1] = lst1[idx_corr1 - 1] - randint(1, 5)\\n    idx_corr2 = (idx_corr1 + randint(2, len_lst // 2)) % len_lst\\n    lst2 = lst1.copy()\\n    if idx_corr2 == 0:\\n        lst2[0] = lst2[1] + randint(1, 5)\\n    else:\\n        lst2[idx_corr2] = lst2[idx_corr2 - 1] - randint(1, 5)\\n    tic_f = perf_counter()\\n    \\\"\\\"\\\"function call\\\"\\\"\\\"\\n    Test.assert_equals(non_decreasing(lst), True)\\n    Test.assert_equals(non_decreasing(lst1), True)\\n    Test.assert_equals(non_decreasing(lst2), False)\\n    t_fun += perf_counter() - tic_f\\n\\nprint('t_func = {:.6f}'.format(t_fun))\\nprint('t_total = {:.6f}'.format(perf_counter() - tic))\",\"language\":\"python3\",\"quality\":0,\"stats\":{\"completed\":{\"ratings\":[4,4,4,4,4,4,5,3,5,5,5,1,4,1,4,1,5,0,5],\"quality\":[],\"rators\":[\"8PwfYqoDQFThzNtvf\",\"vTfyrr4pGddp8rbXc\",\"aEm3Wvj2rFYRL8Lrb\",\"5dHucvf2qBYyKim7X\",\"s5M5RvgqR9BhB9JoC\",\"iS5BrkGLzJyPK7nKt\",\"yr822PZmmiDDenxpB\",\"eHcgvkTGsH7ZziqBo\",\"8sNv5PTHa7XQ8bNqR\",\"J3upzLHuEwXH7Z2hx\",\"yjtdwc2AC4jA2RWtn\",\"gJYuGdkXEWWmGRLzu\",\"T6iBEE2jp7f7iEF2P\",\"2PufnQcsHsfymufX3\"],\"total\":16},\"flags\":0},\"summary\":\"Given a list of numbers create a solution to check if this list could become non-decreasing by modifying at most 1 element; return True or False as the result of the evaluation. A list is non-decreasing if each element (except the last one) is less or equal to the next one.\\n\\nExamples\\nnon_decreasing([4, 2, 3]) ➞ True\\n\\nnon_decreasing([4, 2, 1]) ➞ False\\n\\nnon_decr\",\"tags\":[\"arrays\",\"conditions\",\"loops\",\"validation\"],\"timestamp\":{\"$date\":1604690137490},\"title\":\"Non-Decreasing List\",\"family\":[{\"_id\":\"JQgfPmxmxuAHHcNwp\",\"language\":\"python3\"}]}}"]