a["{\"msg\":\"result\",\"id\":\"1999\",\"result\":{\"_id\":\"xWW8PMuLN8hmAgLMJ\",\"author\":\"zatoichi49\",\"authorId\":\"tAF9Gf6PiGogbZuWs\",\"code\":\"def postfix(expression):\\n\\t\",\"difficulty\":2.792452830188679,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"EGzXE9TbXn9snqQqK\",\"instructions\":\"Mathematical expressions are usually written with *infix* notation, where the operator is *in-between* the two operands. *Postfix* notation, on the other hand, is where the operator *follows* the operands. As we use operator precedence to determine the order of calculation (e.g. multiplication/division is evaluated before addition/subtraction), we can change the position of the operands and eliminate the need for parentheses:\\n\\n```\\n2 + 5   # Infix\\n2 5 +   # Postfix\\n\\n5 + (1 + 2) * 4 - 3   # Infix\\n5 1 2 + 4 * + 3 -     # Postfix\\n```\\n\\nPostfix expressions are evaluated by reading left-to-right. Any time an operator is reached, a calculation is performed on the previous two operands. The process repeats until there are no more calculations to perform:\\n\\n```\\n2 3 4 * + 9 -   # evaluate 3x4\\n   2 12 + 9 -   # evaluate 2+12\\n       14 9 -   # evaluate 14-9\\n            5   # final answer\\n```\\n\\nGiven a postfix expression as a string, return the evaluated expression. A single space separates each operator/operand.\\n\\n### Examples\\n```\\npostfix(\\\"12 3 /\\\") ➞ 4\\n\\npostfix(\\\"5 3 4 * +\\\") ➞ 17\\n\\npostfix(\\\"5 3 + 4 *\\\") ➞ 32\\n\\n```\\n\\n### Notes\\nPostfix is also known as \\\"Reverse Polish Notation\\\". See the resources tab for more information.\",\"isHidden\":false,\"lab\":\"Test.assert_equals(postfix(\\\"8 1 +\\\"), 9)\\nTest.assert_equals(postfix(\\\"9 3 /\\\"), 3)\\nTest.assert_equals(postfix(\\\"8 2 5 * +\\\"), 18)\\nTest.assert_equals(postfix(\\\"8 2 + 5 *\\\"), 50)\\nTest.assert_equals(postfix(\\\"1 2 3 4 5 + + + +\\\"), 15)\\nTest.assert_equals(postfix(\\\"3 12 32 8 / / *\\\"), 9)\\nTest.assert_equals(postfix(\\\"2 3 1 * + 9 -\\\"), -4)\\nTest.assert_equals(postfix(\\\"3 4 + 2 * 7 /\\\"), 2)\\nTest.assert_equals(postfix(\\\"4 5 7 2 + - *\\\"), -16)\\nTest.assert_equals(postfix(\\\"10 8 + 3 4 * - 6 /\\\"), 1)\\nTest.assert_equals(postfix(\\\"13 6 7 8 4 / 9 * - + +\\\"), 8)\\nTest.assert_equals(postfix(\\\"5 7 - 6 9 + *\\\"), -30)\\nTest.assert_equals(postfix(\\\"6 2 + 5 * 8 4 / -\\\"), 38)\\nTest.assert_equals(postfix(\\\"9 2 * 3 + 12 -\\\"), 9)\\nTest.assert_equals(postfix(\\\"6 4 18 2 7 + / + -\\\"), 0)\\nTest.assert_equals(postfix(\\\"3 10 5 + *\\\"), 45)\\nTest.assert_equals(postfix(\\\"8 1 3 + 7 * + 6 -\\\"), 30)\\nTest.assert_equals(postfix(\\\"3 2 + 15 3 / 8 - *\\\"), -15)\\nTest.assert_equals(postfix(\\\"10 7 1 1 + - / 6 * 3 5 4 + - +\\\"), 6)\\nTest.assert_equals(postfix(\\\"6 45 - 3 12 6 2 / * + /\\\"), -1)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,3,2,2,4,2,4,2,3,0,4,4,1,2,3,2,2,3,4,3,3,1,3,3,4,4,3,3,4,4,2,3,4,3,3,4,4,4,4,1,3,1,2,4,0,2,4,3,0],\"rators\":[\"tAF9Gf6PiGogbZuWs\",\"X5rQz4tpncjYZ6uZr\",\"AbrJ8hMyv5fFXG6DN\",\"HqmxnQJM66Y57twhn\",\"2fxapKr8XGdNeaKi2\",\"gb9rvGus2Jv7bjZSs\",\"s5M5RvgqR9BhB9JoC\",\"XKi8iZXBCHCaebSHh\",\"pDvFWMCD9fQwoBPcu\",\"8PwfYqoDQFThzNtvf\",\"aCNWav8S8Try9RkC6\",\"Jqk2uJZZxEv5wZFze\",\"PT5pu7kJsgp9TDNGv\",\"z29voMGDksmh5wajq\",\"2innwjWqxJHo4eRGh\",\"Lw8oRc5SERsuntXMo\",\"Yp7uvStL97cC9fKkY\",\"SGhPxX5bHGL8zZqtt\",\"JKb5rhL6DKcCAypF9\",\"aEm3Wvj2rFYRL8Lrb\",\"pmgFEciNrd3ES9tuu\",\"AJwBauGHyrbqgDYce\",\"AasGs8AeX9Lcb9xJn\",\"6E8GoWCrHpDvHZjWG\",\"aP7JkkYer28YWrPvC\",\"daFMtxYmCNMQ9HNsJ\",\"8JyqsSbN2FJXPr3cw\",\"vTfyrr4pGddp8rbXc\",\"gJYuGdkXEWWmGRLzu\",\"ZNnsMeNkdDhHjSrZb\",\"RHZcTWs7asoBGydH4\",\"a777e8chPvJkY3tKa\",\"n2BRY9X8899dcG8Bw\",\"xn7uGNKeAwPEkP9oA\",\"Nb6LYPoQP6KJZt8mz\",\"Ecg4m7srYGgZsb4Ck\",\"mDWNyaaQ9hvPCRzSd\",\"HF28xZKSLM9wEuqNg\",\"no46qNkTbNeHepe64\",\"iS5BrkGLzJyPK7nKt\",\"8sNv5PTHa7XQ8bNqR\",\"QRv96jmNaYsWkxQEG\",\"yjtdwc2AC4jA2RWtn\",\"GTKsdeEihE636Le9i\",\"eHcgvkTGsH7ZziqBo\",\"PH32cNxBjrK4a28sn\",\"T2vhHPhRR96hRizq8\",\"gXTAie79kiw28tx5u\",\"2PufnQcsHsfymufX3\",\"PXAcsKkssS2yLyDv2\",\"d8qtzoLB264iP8tdY\"],\"total\":54,\"quality\":[5,5,5]},\"flags\":0},\"summary\":\"Mathematical expressions are usually written with infix notation, where the operator is in-between the two operands. Postfix notation, on the other hand, is where the operator follows the operands. As we use operator precedence to determine the order of calculation (e.g. multiplication/division is evaluated before addition/subtraction), we can change the posit\",\"tags\":[\"logic\",\"math\"],\"timestamp\":{\"$date\":1576536759487},\"title\":\"Postfix Notation (Part 1: Evaluation)\",\"quality\":5,\"family\":[{\"_id\":\"3dJicC9jWNzf7qgXb\",\"language\":\"javascript\"},{\"_id\":\"xWW8PMuLN8hmAgLMJ\",\"language\":\"python3\"},{\"_id\":\"mWdeZXpwBDzfzHdhK\",\"language\":\"ruby\"}]}}"]