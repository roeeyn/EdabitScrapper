a["{\"msg\":\"result\",\"id\":\"2111\",\"result\":{\"_id\":\"kjph2fGDWmLKY2n2J\",\"archived\":false,\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"def valid_color (color):\\n\\t\",\"difficulty\":2.9657534246575343,\"familyId\":\"6bvceAChk3gb63cot\",\"instructions\":\"Given an RGB(A) CSS color, determine whether its format is valid or not. Create a function that takes a string (e.g. `\\\"rgb(0, 0, 0)\\\"`) and return `True` if it's format is correct, otherwise return `False`.\\n\\n### Examples\\n```\\nvalid_color(\\\"rgb(0,0,0)\\\") ➞ True\\n\\nvalid_color(\\\"rgb(0,,0)\\\") ➞ False\\n\\nvalid_color(\\\"rgb(255,256,255)\\\") ➞ False\\n\\nvalid_color(\\\"rgba(0,0,0,0.123456789)\\\") ➞ True\\n```\\n\\n### Notes\\n- Alpha is between 0 and 1.\\n- There are a few edge cases (check out the **Tests** tab to know more).\",\"lab\":\"# True Tests\\nTest.assert_equals(valid_color('rgb(0,0,0)'), True, 'rgb lowest valid numbers')\\nTest.assert_equals(valid_color('rgb(255,255,255)'), True, 'rgb highest valid numbers')\\nTest.assert_equals(valid_color('rgba(0,0,0,0)'), True, 'rgba lowest valid numbers')\\nTest.assert_equals(valid_color('rgba(255,255,255,1)'), True, 'rgba highest valid numbers')\\nTest.assert_equals(valid_color('rgba(0,0,0,0.123456789)'), True, 'alpha can have many decimals')\\nTest.assert_equals(valid_color('rgba(0,0,0,.8)'), True, 'in alpha the number before the dot is optional')\\nTest.assert_equals(valid_color('rgba(\\t0 , 127\\t, 255 , 0.1\\t)'), True, 'whitespace is allowed around numbers (even tabs)')\\nTest.assert_equals(valid_color('rgb(0%,50%,100%)'), True, 'numbers can be percentages')\\n\\n# False Tests\\nTest.assert_equals(valid_color('rgb(0,,0)'), False, 'INVALID: missing number')\\nTest.assert_equals(valid_color('rgb (0,0,0)'), False, 'INVALID: whitespace before parenthesis')\\nTest.assert_equals(valid_color('rgb(0,0,0,0)'), False, 'INVALID: rgb with 4 numbers')\\nTest.assert_equals(valid_color('rgba(0,0,0)'), False, 'INVALID: rgba with 3 numbers')\\nTest.assert_equals(valid_color('rgb(-1,0,0)'), False, 'INVALID: numbers below 0')\\nTest.assert_equals(valid_color('rgb(255,256,255)'), False, 'INVALID: numbers above 255')\\nTest.assert_equals(valid_color('rgb(100%,100%,101%)'), False, 'INVALID: numbers above 100%')\\nTest.assert_equals(valid_color('rgba(0,0,0,-1)'), False, 'INVALID: alpha below 0')\\nTest.assert_equals(valid_color('rgba(0,0,0,1.1)'), False, 'INVALID: alpha above 1')\",\"language\":\"python3\",\"summary\":\"Given an RGB(A) CSS color, determine whether its format is valid or not. Create a function that takes a string (e.g. \\\"rgb(0, 0, 0)\\\") and return True if it's format is correct, otherwise return False.\\n\\nExamples\\nvalid_color(\\\"rgb(0,0,0)\\\") ➞ True\\n\\nvalid_color(\\\"rgb(0,,0)\\\") ➞ False\\n\\nvalid_color(\\\"rgb(255,256,255)\\\") ➞ False\\n\\nvalid_color(\\\"rgba(0,0,0,0.123456789)\\\") ➞ Tr\",\"tags\":[\"regex\",\"conditions\",\"validation\"],\"timestamp\":{\"$date\":1520611151697},\"title\":\"Is It a Valid RGB(A) Color?\",\"stats\":{\"completed\":{\"total\":158,\"ratings\":[2,2,2,2,2,2,3,2,2,2,3,2,4,3,2,3,1,2,3,2,3,3,2,3,2,2,3,3,4,2,3,2,2,2,4,4,4,2,3,3,2,3,2,4,3,4,4,4,3,3,3,3,5,2,3,3,4,4,5,4,3,3,4,2,4,2,4,4,2,4,3,4,5,3,4,2,4,4,4,4,4,2,5,2,5,5,5,3,3,5,2,0,0,3,3,2,5,5,5,3,2,5,5,3,2,5,3,2,3,2,3,4,3,4,2,2,4,2,2,5,0,5,0,0,3,3,3,2,1,2,3,5,4,5,2,3,2,2,4,1,2,4,4,0,2,2],\"rators\":[\"BkPgkDQGHm66X4Qai\",\"6fJpRpAgiWD5zX9qB\",\"gTfeu74pFqnyrWQCM\",\"HK3RW4kr7acFSAyL4\",\"tuyDaJzFy78jxvhCY\",\"AW2RfvnHX2C5x24rY\",\"iEMnJaXXfa6dzdQzb\",\"7eBXcYTe4qmGk7xRR\",\"3mtD7DxrAgDMcxWKt\",\"QiKGftY3qFAsv8GCG\",\"5JXnPbYC8RuBG6FkM\",\"GRZzKCbeb4xKHFCrZ\",\"QjpzasKxy3xBakLzz\",\"pdcaC4fEtsubBz4Wo\",\"5LoHDiuaWur8GNgEQ\",\"tzHQmfmDbNJgqbeLx\",\"mqXfzC24CdThpCaGd\",\"wLRYpSsyFNmkG9Cj7\",\"jDoFYBX4iQiTXFEdf\",\"tAF9Gf6PiGogbZuWs\",\"YG776yzpLWoxa5GJs\",\"rJNRYKAjXYhqpNfE9\",\"SK3kJggzuets9AFj6\",\"xWN2EDdMDnG89QXjm\",\"QgdwHjy4x6MCPwfh9\",\"dcgTXHShrYQmcaSRY\",\"M8jrv2FfpMQp9Qzpx\",\"RsX6W2ddWM8ajHzss\",\"owKPDRTN8gi9CcPW2\",\"mmbsiZPMbsF9t48tH\",\"jj3tN4LhX8Rgs3DKB\",\"uJ5A3zjLi9iN5eeXX\",\"WKvDiBB7cQFWvu5mc\",\"xQ7uLC6QTtEyKENv9\",\"8JyqsSbN2FJXPr3cw\",\"6W2GSzrYjMD9ANBFY\",\"5s4qhuRJijYaDNXva\",\"nydW2HwDGZuk8XaEL\",\"gghyGRFrEu3ha49Kz\",\"yZvzB3qFb8pkHy4dg\",\"gb9rvGus2Jv7bjZSs\",\"nrA8Pacm3A6GqGzq4\",\"QzqL4jkcY4BMmNuS8\",\"P59rek6gvwTzHvRYa\",\"P9kRacTvAmXdLQMds\",\"iqmPb9JuJDgTFeR8Q\",\"M2k5STtKaQx6tsgWe\",\"byqTp7CX5oWSEZp4S\",\"MXjxGML2X75x64vJo\",\"AYaEkTWLMmfzpwejr\",\"PFjMZGHNAPTkgd7tq\",\"BFNm9gacwba9KyLFW\",\"ZgdejAm3u2Q6tFpfg\",\"3ifAHQzsMasfQySoL\",\"D6Z9oT2ZhjBCxuL2o\",\"nF9pCCzbGDhzvWgaw\",\"HhLfku5PjHPCqYBe6\",\"7BvK9WWXi9Arqh63Q\",\"XKi8iZXBCHCaebSHh\",\"s5M5RvgqR9BhB9JoC\",\"HqmxnQJM66Y57twhn\",\"qw6cXNezF4FBSJzT9\",\"26tLSwmkFHbCRkaJv\",\"2fxapKr8XGdNeaKi2\",\"Jqk2uJZZxEv5wZFze\",\"8PwfYqoDQFThzNtvf\",\"WLFPvm65aHfgwQy7N\",\"aEm3Wvj2rFYRL8Lrb\",\"AasGs8AeX9Lcb9xJn\",\"Nua6T3dBurBy3Qfg9\",\"kYWb8BwpKwunQkxeX\",\"ZNnsMeNkdDhHjSrZb\",\"gJYuGdkXEWWmGRLzu\",\"fznzd3qnvtbFkkizz\",\"mDWNyaaQ9hvPCRzSd\",\"Z4M3NAa4TXquMNkHe\",\"R4SjTgDnpigJYDLyL\",\"9LxK29iB9BXWknPsj\",\"jL4y5fTJAMBjhZmko\",\"feC3ae6ShoSBGZz8H\",\"4sHkH3t9CJYhbDwjM\",\"9AzxAeaR5xWAoqYxB\",\"3JR9S6Rj5LicgMx2X\",\"pPtmnJ7q9QchoG2Jq\",\"TppLLwi3RZptkewZ4\",\"GgLd4eWBu79mdjtkP\",\"4fhjJBvLBWh6QeSih\",\"hZW6j5s6RHpx35phy\",\"o8G9TSHBPXjC8uZfR\",\"diA4hKkZ9WRCu4ive\",\"3rLs4mcGnehYN7gTb\",\"d8qtzoLB264iP8tdY\",\"bJaPCBx63YxdJAuTS\",\"HC8ExfeLXgzJi4ibn\",\"xn7uGNKeAwPEkP9oA\",\"Lf6AGyfyJ32qKEnvi\",\"97DthwdtrBLm2y2Yj\",\"rfZfybwARHZFttzub\",\"qfdx8utQFKQxtwLzv\",\"8WpvgSbQciTQWdd8T\",\"suaEBYJRrEGzyWnku\",\"gnqiMtWWsK2aCjbpA\",\"SGhPxX5bHGL8zZqtt\",\"dHkXWFAxJFD2QfvwY\",\"Mxzimgjqmbkbksreh\",\"b3Dk2LqoEgripS3Y3\",\"pscBduNyf8TDHe2Km\",\"KHnmawdkEQBHwjEeR\",\"bYC6FnuQvChcPmNpf\",\"gAxaBZJz4SWcBTxnj\",\"ZsHZ6a5qLfC8m8EyY\",\"3CEQhN9ZBnrLd5AxJ\",\"zZ43WzxvFu7kaTKZ6\",\"DTKtcn5HrYxtcBza3\",\"3rCGowf2GK7AZTdFu\",\"WegkEuFJdeY6PeWQh\",\"SgZ2t9xFuRqdJGofp\",\"8zQnyekbSwzhoJymu\",\"bCFecqKyXTCnGgPSc\",\"HBzWu5Xki4vLG3XRy\",\"eHcgvkTGsH7ZziqBo\",\"YRzFyQomjuQxgRkqm\",\"W4zFJhfQoDah7sxKu\",\"o3H7kYyAtn7F2wMEZ\",\"3MybBtCNPcFHLMYmJ\",\"Ecg4m7srYGgZsb4Ck\",\"Y6w9WxXzRweSiy3Ls\",\"HF28xZKSLM9wEuqNg\",\"amfj3y4oZMprJ96fg\",\"StNu7DPyTgEStZsMY\",\"iS5BrkGLzJyPK7nKt\",\"J3upzLHuEwXH7Z2hx\",\"sBjZD8PbFMGtTuFS5\",\"GGQuD7SNkw6STaafA\",\"2PufnQcsHsfymufX3\",\"nweRDtL2ZPxYmRNkd\",\"rC6LDpEDc4KANdfX5\",\"yod5YhKtPqw2GfG9B\",\"sX4qPLMcKW8HNNEFX\",\"9s2DgX3eYwudZCXGJ\",\"J4yeNN2yJ5Rrg7Zpd\",\"fSQSHjW3e72MrWxbD\",\"HqpbA6C6zkAmDsaEm\",\"mKwq6SRD9AcSt6CMA\",\"HubwLRWj6WDeP8MkN\",\"m7kMANAKbQxHfueLC\",\"yjtdwc2AC4jA2RWtn\",\"JKb5rhL6DKcCAypF9\",\"aFYzioHvZPvPaunsg\",\"gKnWjDjwrJh7MK2df\",\"buX4mCQhtXCfBjeno\",\"gXTAie79kiw28tx5u\"],\"quality\":[5,5,5,5,5,5,5,3,3,5]},\"complaints\":{\"total\":0,\"reasons\":[],\"skippers\":[\"BkPgkDQGHm66X4Qai\"]},\"instructions\":{\"score\":0.65,\"voters\":[\"TW5sH8t6xdhGhNEoW\",\"BdbdeqmG8Ps48niyS\"]},\"tests\":{\"score\":0,\"voters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.6,\"family\":[{\"_id\":\"jTuvbNCy7b82Did3J\",\"language\":\"cpp\"},{\"_id\":\"MvFCbkJeZ8Ydq3sPp\",\"language\":\"java\"},{\"_id\":\"CoAPnr8jxcTah2CzZ\",\"language\":\"javascript\"},{\"_id\":\"kjph2fGDWmLKY2n2J\",\"language\":\"python3\"},{\"_id\":\"89C3iDc6yeBn5duq6\",\"language\":\"ruby\"}]}}"]