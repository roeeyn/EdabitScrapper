a["{\"msg\":\"result\",\"id\":\"1387\",\"result\":{\"_id\":\"JFfA3Zhuprom6RGgt\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"def recur_add(lst):\\n\\t# Your recursive solution here.\\n\\treturn recur_add(lst)\",\"difficulty\":2.017094017094017,\"editorId\":\"a777e8chPvJkY3tKa\",\"familyId\":\"BvWYtrWE7EMFD2FSZ\",\"instructions\":\"Create a function that sums up all the elements in the list **recursively**. The use of the `sum()` built-in function is not allowed, thus, the approach is **recursive**.\\n\\n### Examples\\n```\\nrecur_add([1, 2, 3, 4, 10, 11]) ➞ 31\\n\\nrecur_add([-3, 4, 11, 10, 21, 32, -9]) ➞ 66\\n\\nrecur_add([-21, -7, 19, 3, 4, -8]) ➞ -10\\n```\\n\\n### Notes\\n- You're expected to solve this challenge using a **recursive approach**.\\n- You can read on more topics about recursion (see **Resources** tab) if you aren't familiar with it yet or haven't fully understood the concept behind it before taking up this challenge.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"from inspect import getsource\\nfrom re import findall, MULTILINE\\n\\ndef check_recursive(fn):\\n  try:\\n    src, n = getsource(fn), fn.__name__\\n    if n == '<lambda>': n = src.split('=')[0].strip()\\n    return len(findall(n, src, flags=MULTILINE)) > 1\\n  except OSError: return True\\n\\nTest.assert_not_equals(check_recursive(recur_add), False, 'Recursion is required!')\\n\\nnum_vector = [[1, 2, 3, 4, 10, 11], [-3, 4, 11, 10, 21, 32, -9], [3, 7, -3, -7, 4, 6, -4, -6], [-21, -7, 19, 3, 4, -8], [], [16]]\\nres_vector = [31, 66, 0, -10, 0, 16]\\n\\nfor i, x in enumerate(num_vector): Test.assert_equals(recur_add(x), res_vector[i])\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,5,4,1,5,1,1,2,2,2,1,5,2,1,3,0,3,1,0,5,5,1,2,5,1,4,1,2,1,2,3,0,0,2,1,2,1,2,3,3,1,2,2,4,4,2,2,2,3,1,3,3,4,3,0,0,2,2,0,1,3,0,0,0,2,2,3,2,4,0,2,0,0,2,1,3,2,2,3,1,0,1,1,3,0,2,3,3,3,0,3,0,1,3,2,0,2,0,2,5,2,3,0,0,2,1,1,1,3,2,2,1,1],\"rators\":[\"a777e8chPvJkY3tKa\",\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\",\"vTfyrr4pGddp8rbXc\",\"mDWNyaaQ9hvPCRzSd\",\"W5TajitmCyxz87zAC\",\"rzX5PujzJGJK7mMCi\",\"Ecg4m7srYGgZsb4Ck\",\"tAF9Gf6PiGogbZuWs\",\"gb9rvGus2Jv7bjZSs\",\"5dHucvf2qBYyKim7X\",\"s5M5RvgqR9BhB9JoC\",\"EMJ6uvBZkie429gdg\",\"oAMWrTnBRxmkqdp2R\",\"EksjxkfKerD7ZtqYA\",\"ywk3XGvcmpTgRxwZa\",\"97DthwdtrBLm2y2Yj\",\"qMufM73cirEa3gP6m\",\"fknJ2cEaNooTQ9wZ3\",\"roBhe4Gww28RNw3t5\",\"bJxaKHJqR82EWw8Su\",\"8JyqsSbN2FJXPr3cw\",\"eoepTq5ES5tfgY9XT\",\"RehJGBFS6CYiWdjZx\",\"Nb6LYPoQP6KJZt8mz\",\"orFLgPDw9H5MDzmwo\",\"xn7uGNKeAwPEkP9oA\",\"Nfsj4eNFDjaFa39ga\",\"Wv2vJnEj8ywNmARoF\",\"7sv3XiAcWcTxyxyyK\",\"hRiMXDZNAzyPd5tpt\",\"4fhjJBvLBWh6QeSih\",\"zZDaXBxMzTCBhNkgL\",\"p8qqFdJ3FSk5x9z3G\",\"foytX6kH9wiSYqLtT\",\"yhnpZLDLibMdyaM5W\",\"gJYuGdkXEWWmGRLzu\",\"fK2ousiaKc5gvevyW\",\"XhhL8kqHz32PZNaXY\",\"aaES9b3cK5P94Gusi\",\"nZs57bxjesuEdNGAj\",\"CHMh7qFpqDvYKKqhq\",\"Lm6ChQCWBmaikmk5J\",\"CccXoqbXeoMydtEhh\",\"yTtSCvGPyYna6JuRC\",\"wcQLERs5vMcAwJrEy\",\"n2BRY9X8899dcG8Bw\",\"8sNv5PTHa7XQ8bNqR\",\"yNDBLJLzAHsvTgCN2\",\"6TZp5F9a7SdsEnuKs\",\"xBQC5uQdx6WndJ3iM\",\"8zQnyekbSwzhoJymu\",\"D5GaAycZqDJgokqHX\",\"axdSNLZpiCDF8RS6n\",\"DNGkwLuAzEACszkAx\",\"csSpLffpxTPQyrAPQ\",\"9KPnCbMLpnAfooKfF\",\"ke59XNKs2LuJBMihy\",\"yjtdwc2AC4jA2RWtn\",\"bNZN65S3GkReo8qNT\",\"QxNHN5DHfe97xarhE\",\"HF28xZKSLM9wEuqNg\",\"Y8ySZEtvht9EwdcoY\",\"jHMZmyR64kQitCKZw\",\"v9KtC8YLbMWmXiW2H\",\"iS5BrkGLzJyPK7nKt\",\"w2HhxvSLmDhaGCAjE\",\"qD2LrwaDrSdiybLKY\",\"oyKcm3zqdy8Ko5P5d\",\"ANbSYXiYsp4addoDq\",\"atR7uPt3durx85RSa\",\"DPi9QGLctq2y76KuE\",\"J3upzLHuEwXH7Z2hx\",\"DosZrH9pN55J5fn3i\",\"t5sZF4aR7a28Bm56W\",\"QRv96jmNaYsWkxQEG\",\"LW8PqW4HFXWfoJGo6\",\"buX4mCQhtXCfBjeno\",\"Jqk2uJZZxEv5wZFze\",\"gXTAie79kiw28tx5u\",\"T2vhHPhRR96hRizq8\",\"ZgWwEdWxjy83WpPQX\",\"yK7zzK2aGJwuWKHRL\",\"fG2HwkR4BtAGX4QzZ\",\"eYfPWvZwnJQkHbSTK\",\"wDMtQZjgzQPKh8g82\",\"iojEnnY9FsMfYzp6f\",\"PytNZK9mNiRiZxPrm\",\"XNmN6ztj36a7eChbD\",\"cAP3n5NY64uoMwzRR\",\"oBcs8GLX2ZFLXQy8y\",\"cR3ibTMxLyEdDFCHY\",\"9ivvGvJGvtQfigQaZ\",\"srJ34BaybkQh3qRkM\",\"AasGs8AeX9Lcb9xJn\",\"AFfw7cGg83uYk2Miy\",\"ALBxpbzw6znyPtcLQ\",\"dynD89GCHoau9fvh7\",\"GGdmhAvxXhqhhibJN\",\"H9KZi2cjt4FwH7qog\",\"LQxof8pGabGuWP7Gn\",\"DEDniTrstQYGounXT\",\"HqmxnQJM66Y57twhn\",\"hkiz2Nv927cYGrA86\",\"dbshdrBc2pLsd3gcf\",\"9izxzCBrsRCbD9ajK\",\"rfyEkETeoS96QNH4e\",\"T6iBEE2jp7f7iEF2P\",\"LcRuvM5CcbSmJ8ipK\",\"gKnWjDjwrJh7MK2df\",\"utDMr3chbvFzGpKTC\",\"2PufnQcsHsfymufX3\",\"rhS8qXRjZcpDXkwnE\",\"CHvzhtXnv8HTbPQ56\",\"yod5YhKtPqw2GfG9B\",\"d8qtzoLB264iP8tdY\",\"nkH3HfJXLMNcBMM79\",\"J5T8gZqiZXFuFDTQ7\",\"xqYQMujmvgQ78bnJc\",\"Ds7L5bksw2QRHjrKL\",\"4LRsK5EGNjPSBmsJm\",\"5HCu9Ydd86QgHDRNP\",\"6EZ5G7FTpH3YG5Gi6\",\"n2qKKxomPnb4zez5M\",\"9pzFiFK3ANLjQfnr2\",\"BrTDhPJcACL2bsrpJ\",\"Qyfyyw6oC4EHAndzo\",\"JdYa2zf8NZRw6NSou\",\"n2RkNBJQnPMswEnYT\",\"mvJBakQ35CWAnbbEZ\",\"vFXxysYBKjYaSXGp8\"],\"total\":144,\"quality\":[5,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]},\"flags\":0},\"summary\":\"Create a function that sums up all the elements in the list recursively. The use of the sum() built-in function is not allowed, thus, the approach is recursive.\\n\\nExamples\\nrecur_add([1, 2, 3, 4, 10, 11]) ➞ 31\\n\\nrecur_add([-3, 4, 11, 10, 21, 32, -9]) ➞ 66\\n\\nrecur_add([-21, -7, 19, 3, 4, -8]) ➞ -10\\n\\nNotes\\nYou're expected to solve this challenge using a recursive ap\",\"tags\":[\"recursion\",\"arrays\"],\"timestamp\":{\"$date\":1595340685773},\"title\":\"Recursion: List Summation\",\"quality\":4.947368421052632,\"family\":[{\"_id\":\"rms6xusZ3QeurapAW\",\"language\":\"javascript\"},{\"_id\":\"JFfA3Zhuprom6RGgt\",\"language\":\"python3\"}]}}"]