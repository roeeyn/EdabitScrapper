a["{\"msg\":\"result\",\"id\":\"2123\",\"result\":{\"_id\":\"aFLqW5hqqRmM4QXZq\",\"author\":\"zatoichi49\",\"authorId\":\"tAF9Gf6PiGogbZuWs\",\"code\":\"def bar_chart(results):\\n\\t\",\"difficulty\":3.108108108108108,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"d7tPfiAJCxYgzrzNu\",\"instructions\":\"Given a dictionary containing quarterly sales values for a year, return a string representing a *bar chart* of the sales by quarter.\\n\\n- Quarter names (Q1, Q2, Q3, Q4) should appear on the left.\\n- Quarters should be sorted in descending order by value.\\n- Quarters with the same value should be shown in their yearly order (Q1 -> Q4).\\n- Bars should begin with a \\\"|\\\".\\n- Repeat the character \\\"#\\\" to fill the bar, with each character having a value of 50.\\n- A single space comes after the bar, then the sales for that quarter.\\n- If the value is 0, there should be no space after \\\"|\\\".\\n- Use the newline character (\\\"\\\\n\\\") to separate each bar in the chart.\\n\\n### Example #1\\n```\\nbar_chart({\\\"Q4\\\": 250, \\\"Q1\\\": 300, \\\"Q2\\\": 150, \\\"Q3\\\": 0})\\n➞ \\\"Q1|###### 300\\\\nQ4|##### 250\\\\nQ2|### 150\\\\nQ3|0\\\"\\n```\\n\\nWhen printed:\\n```\\nQ1|###### 300\\nQ4|##### 250\\nQ2|### 150\\nQ3|0\\n```\\n\\n### Example #2\\n```\\nbar_chart({\\\"Q4\\\": 500, \\\"Q3\\\": 100, \\\"Q2\\\": 100, \\\"Q1\\\": 150})\\n➞ \\\"Q4|########## 500\\\\nQ1|### 150\\\\nQ2|## 100\\\\nQ3|## 100\\\"\\n```\\n\\nWhen printed:\\n```\\nQ4|########## 500\\nQ1|### 150\\nQ2|## 100\\nQ3|## 100\\n```\\n\\n### Notes\\nThere should be no additional whitespace after each value.\",\"lab\":\"Test.assert_equals(bar_chart({'Q4': 0, 'Q3': 100, 'Q2': 0, 'Q1': 600}), \\\"Q1|############ 600\\\\nQ3|## 100\\\\nQ2|0\\\\nQ4|0\\\")\\nTest.assert_equals(bar_chart({'Q4': 300, 'Q3': 150, 'Q2': 350, 'Q1': 250}), \\\"Q2|####### 350\\\\nQ4|###### 300\\\\nQ1|##### 250\\\\nQ3|### 150\\\")\\nTest.assert_equals(bar_chart({'Q4': 350, 'Q3': 400, 'Q2': 400, 'Q1': 50}), \\\"Q2|######## 400\\\\nQ3|######## 400\\\\nQ4|####### 350\\\\nQ1|# 50\\\")\\nTest.assert_equals(bar_chart({'Q4': 200, 'Q1': 500, 'Q2': 300, 'Q3': 300}), \\\"Q1|########## 500\\\\nQ2|###### 300\\\\nQ3|###### 300\\\\nQ4|#### 200\\\")\\nTest.assert_equals(bar_chart({'Q4': 300, 'Q3': 250, 'Q2': 600, 'Q1': 350}), \\\"Q2|############ 600\\\\nQ1|####### 350\\\\nQ4|###### 300\\\\nQ3|##### 250\\\")\\nTest.assert_equals(bar_chart({'Q4': 150, 'Q1': 550, 'Q2': 50, 'Q3': 600}), \\\"Q3|############ 600\\\\nQ1|########### 550\\\\nQ4|### 150\\\\nQ2|# 50\\\")\\nTest.assert_equals(bar_chart({'Q4': 450, 'Q3': 0, 'Q2': 50, 'Q1': 200}), \\\"Q4|######### 450\\\\nQ1|#### 200\\\\nQ2|# 50\\\\nQ3|0\\\")\\nTest.assert_equals(bar_chart({'Q4': 150, 'Q3': 0, 'Q2': 0, 'Q1': 450}), \\\"Q1|######### 450\\\\nQ4|### 150\\\\nQ2|0\\\\nQ3|0\\\")\\nTest.assert_equals(bar_chart({'Q4': 0, 'Q1': 600, 'Q2': 250, 'Q3': 400}), \\\"Q1|############ 600\\\\nQ3|######## 400\\\\nQ2|##### 250\\\\nQ4|0\\\")\\nTest.assert_equals(bar_chart({'Q4': 100, 'Q1': 150, 'Q2': 450, 'Q3': 0}), \\\"Q2|######### 450\\\\nQ1|### 150\\\\nQ4|## 100\\\\nQ3|0\\\")\\nTest.assert_equals(bar_chart({'Q4': 150, 'Q1': 400, 'Q2': 100, 'Q3': 0}), \\\"Q1|######## 400\\\\nQ4|### 150\\\\nQ2|## 100\\\\nQ3|0\\\")\\nTest.assert_equals(bar_chart({'Q4': 550, 'Q1': 600, 'Q2': 200, 'Q3': 50}), \\\"Q1|############ 600\\\\nQ4|########### 550\\\\nQ2|#### 200\\\\nQ3|# 50\\\")\\nTest.assert_equals(bar_chart({'Q4': 250, 'Q3': 200, 'Q2': 500, 'Q1': 550}), \\\"Q1|########### 550\\\\nQ2|########## 500\\\\nQ4|##### 250\\\\nQ3|#### 200\\\")\\nTest.assert_equals(bar_chart({'Q4': 450, 'Q3': 50, 'Q2': 500, 'Q1': 0}), \\\"Q2|########## 500\\\\nQ4|######### 450\\\\nQ3|# 50\\\\nQ1|0\\\")\\nTest.assert_equals(bar_chart({'Q4': 250, 'Q3': 400, 'Q2': 150, 'Q1': 500}), \\\"Q1|########## 500\\\\nQ3|######## 400\\\\nQ4|##### 250\\\\nQ2|### 150\\\")\\nTest.assert_equals(bar_chart({'Q4': 400, 'Q3': 600, 'Q2': 350, 'Q1': 600}), \\\"Q1|############ 600\\\\nQ3|############ 600\\\\nQ4|######## 400\\\\nQ2|####### 350\\\")\\nTest.assert_equals(bar_chart({'Q4': 50, 'Q1': 100, 'Q2': 150, 'Q3': 50}), \\\"Q2|### 150\\\\nQ1|## 100\\\\nQ3|# 50\\\\nQ4|# 50\\\")\\nTest.assert_equals(bar_chart({'Q4': 50, 'Q1': 100, 'Q2': 100, 'Q3': 300}), \\\"Q3|###### 300\\\\nQ1|## 100\\\\nQ2|## 100\\\\nQ4|# 50\\\")\\nTest.assert_equals(bar_chart({'Q4': 350, 'Q3': 50, 'Q2': 600, 'Q1': 300}), \\\"Q2|############ 600\\\\nQ4|####### 350\\\\nQ1|###### 300\\\\nQ3|# 50\\\")\\nTest.assert_equals(bar_chart({'Q4': 100, 'Q1': 500, 'Q2': 50, 'Q3': 200}), \\\"Q1|########## 500\\\\nQ3|#### 200\\\\nQ4|## 100\\\\nQ2|# 50\\\")\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,3,3,2,2,4,4,3,5,3,2,2,4,4,4,3,5,4,3,5,2,5,4,5,1,0,3,5,5,2,5,0,1,5,5,0,5,5,1,2,2,3,0,5,3,5,5,2,2,5,5,4,2,2,3,5,5,5,5,3,1,4,2,5,0,1,4,3,2,0,0,2,3,1,5,5,4,2,5,5,2,5,3,1,3,1,3,5,5,2,5,3,5,2,5,5,2,0,5,0,3,2,5,0,2,2,5,1,5,1,5,0,3,4,5,3,0,1,5,3,3,5,3,3,2,2,3,3,2,2,5,5,3,2,5,2,4,5,3,2,3,4,4,4,5,5,2,5,5,5,1,1,5,5,4,5,0,1,3,0,0,5,2,5,2,3,5,1,1,0,0,5,2,2,5,2,5,3,5,3,5],\"rators\":[\"gb9rvGus2Jv7bjZSs\",\"tAF9Gf6PiGogbZuWs\",\"AYaEkTWLMmfzpwejr\",\"yZvzB3qFb8pkHy4dg\",\"Nj6FwgBtAXsaQwsM2\",\"BFNm9gacwba9KyLFW\",\"8JyqsSbN2FJXPr3cw\",\"wCki2HFwRSoYLZwMt\",\"E2MgQfJtPehQHuSiB\",\"G2byapinS4HELHHz2\",\"Tin42WiZ4JTDEnS7b\",\"BAXQYFC46bxoDjEg4\",\"N5zhhxuniwSTvwAsc\",\"bRD4Ls3FoPdiBBFvt\",\"FPpSHXfFyEt4CHpCB\",\"Den3wJ8yQ3khPa4gC\",\"FMHMYiNwBtZEGA2Nj\",\"Ti5BF4jnruwNNzHY8\",\"CRBuiWyb9B8c5XW7w\",\"5Qvy7fNM2YEQ6PtbY\",\"6gsMupsCZJQgiwzJi\",\"HqmxnQJM66Y57twhn\",\"qJZsi5rhRnWA38FbA\",\"6qJ8mFbGC9NfjsuKM\",\"FHSJnAYTbcsKFgeQa\",\"eHcgvkTGsH7ZziqBo\",\"jDgJ2fdFS76TSorNc\",\"caoRMhfqpPEKnPz8z\",\"DwetpbChQM4r6Gwah\",\"8PwfYqoDQFThzNtvf\",\"hwLAvyumMvYXNv3j5\",\"sZDYNicocwXesSMXb\",\"t7BnRyo7NH5Nx22HR\",\"4oj74SdrYfpJgEAmd\",\"fMR9RcfgPJWiLgx7k\",\"X4iqEdg7dPjFpoASw\",\"RDNaX8rgCC587tyr3\",\"azHSATBuuQ5wz9bvB\",\"qRfAEHwBqZZwo4tBC\",\"4xwButZn34q92d9Yn\",\"s5M5RvgqR9BhB9JoC\",\"R2nyPWAwyyJRRkcAP\",\"aCNWav8S8Try9RkC6\",\"8LfTheFzvicameoz9\",\"hhDLeh3f2FNhpLSry\",\"AJwBauGHyrbqgDYce\",\"aEm3Wvj2rFYRL8Lrb\",\"Lw8oRc5SERsuntXMo\",\"bLpgu8xTdpDPFSAsM\",\"9uZpgAtSuPZ7W7DL6\",\"BXPLRXsvSyA2xZBLJ\",\"NCgqvvXaGksrMDiw7\",\"m4taAgaxZCTTYMhFr\",\"AasGs8AeX9Lcb9xJn\",\"ftXLsTaA7yHmhuEsY\",\"b3yseG7yE4My44QtA\",\"5H9MNfC4DPwxbakTf\",\"bJaPCBx63YxdJAuTS\",\"HmKFZqFH9YC346djy\",\"Cfx3cu6CedA3Hi6Fw\",\"b9oNDwXGhgfswtHdW\",\"ZNnsMeNkdDhHjSrZb\",\"zQGRoJD3EGghM5gJe\",\"W5TajitmCyxz87zAC\",\"3MybBtCNPcFHLMYmJ\",\"mDWNyaaQ9hvPCRzSd\",\"eyPw2id4ejMwaqAby\",\"bJxaKHJqR82EWw8Su\",\"qPpQfR5KyDb5Y3EFf\",\"hZW6j5s6RHpx35phy\",\"xn7uGNKeAwPEkP9oA\",\"jFcHRfu77aNu6YpZg\",\"WH5PdF6SoKLPN38is\",\"RsujLHaML6L3KinzK\",\"mwcjmxMW9msmCFibs\",\"fznzd3qnvtbFkkizz\",\"97DthwdtrBLm2y2Yj\",\"dg8MBusmNZRosmyxe\",\"GgLd4eWBu79mdjtkP\",\"4fhjJBvLBWh6QeSih\",\"gnqiMtWWsK2aCjbpA\",\"4sHkH3t9CJYhbDwjM\",\"XjrgSFNFz5Hg2mo5o\",\"8WpvgSbQciTQWdd8T\",\"9CyzZC65NoyiHHxSm\",\"emagfXjqjkuDhZCbj\",\"Kn9yjT4NvcnnvjCrL\",\"S6Zd8mPuvhuh3MFRt\",\"TppLLwi3RZptkewZ4\",\"oQ4Qa7vnqsQn6pdQF\",\"5dHucvf2qBYyKim7X\",\"pRQwycu9GxxtijH68\",\"HcWTggqXwDszvGdWy\",\"ufyzKZdGLAhqFz6uh\",\"EH68sDGGufTc5vifi\",\"h4x2jaMdj5aQZbW5g\",\"3bH5s2P4iYCRHb5Sk\",\"9i6KoESyhnwmZGjWC\",\"mePSe5o7qpkYirqxx\",\"n2e74kbZHY3u7Cgej\",\"iaa9FmWvoRcnwWAoo\",\"iS5BrkGLzJyPK7nKt\",\"CtKaPhQmtex9wnWcd\",\"YMZJYY7CXB5hDERZw\",\"W4X4kb9bFHP9wQLKZ\",\"Xk2g4CNFAnYcvxiSr\",\"T63gcy2WbkwsvEyRB\",\"KktidZuhzfEBK2bdm\",\"5rX3qPFdvRQ9G7xZQ\",\"ntaGcjhFbafszWWZ7\",\"HF28xZKSLM9wEuqNg\",\"Jqk2uJZZxEv5wZFze\",\"XSkjLdTqCovQGvNqs\",\"8KSqAnTHDMSuMiR2c\",\"aaotFPYKJpeDdBmK5\",\"Cia25zjeX3RkCNx5t\",\"kAjhvt8QrT2ggqAen\",\"Qy4Wr4dQLKgYSRXis\",\"xGdw5GCbjjZL9Hr6J\",\"8sNv5PTHa7XQ8bNqR\",\"f89WBZDy3j7KZY8od\",\"i42C33MNpNoSXhJDj\",\"mLjrvoFNrH4uZWHRB\",\"4EgBCgEyiZA2hRsh4\",\"TB4vekwEbmu8oeXw3\",\"7ifh8r4gvyYMhKB94\",\"Ndxjt77Wvp8zB7ed7\",\"Mw8yqSDFdQui28w5N\",\"2YF9pq5TMZcck8GxD\",\"Er39N3Lx3dx2nSpc9\",\"2okx54gGL8GqfxPG2\",\"pEGcXtqiTDm22pnjz\",\"4giaiqDowpCj5pLL4\",\"kWobGYgZWJxN6ZddF\",\"yaQGni8xvyLxyASYk\",\"QxC7zdybu4aex33Jm\",\"pMciXdovTEMJENcYw\",\"DQskEvAv5KiJDPtGF\",\"AAz7ND8ni2GD4zZx2\",\"auoQ4Aq8m7ACQebeF\",\"xoEMkaCmtm9iEFhdJ\",\"bHhuudonsyz2auRBk\",\"DbQ4ggmy5LRyrBS2v\",\"g3Jh47H2g9xtZGxqK\",\"fdEy2ADY66KvfPHYi\",\"LQxof8pGabGuWP7Gn\",\"TY5sBWLMTohBXujmZ\",\"RhWecL96F9KJgrFwn\",\"XNmN6ztj36a7eChbD\",\"hvZqMn5XtmqoLLRGx\",\"qekfzhbSxJiMT2uwf\",\"hRAd998MG8Jzdpxj6\",\"cvgEJm7NBiD78aTxM\",\"8nE8QHnFYsHCFebte\",\"jhpjLPkSo6yjCPNwe\",\"2PufnQcsHsfymufX3\",\"hBKf7LeSP6i2saXjk\",\"XHShZ3WMPgGEA2vkR\",\"d8qtzoLB264iP8tdY\",\"hkiz2Nv927cYGrA86\",\"b3Dk2LqoEgripS3Y3\",\"oEkDZvzwDpH3oiyJh\",\"ceuxK7jxKY9SCqTza\",\"s7AcyFnrtpMEZQmJo\",\"5EhwTpD9zGWWM4hPx\",\"58M252WF7SPRinfBx\",\"v9KtC8YLbMWmXiW2H\",\"Wpn95NqWxncQrwNgz\",\"BZ9aDwsT223J4ZG74\",\"yyo6YLQN2of6fxp49\",\"Ps5P4cFSdqSHEzHng\",\"ofjnKBdF4ruaBLTSQ\",\"u5u2YpHXiNgzDNJdX\",\"QYh2kagDtGd3nYgiT\",\"SGhPxX5bHGL8zZqtt\",\"f7ityYdWKWmtsfqLN\",\"tEZcAbPYg95nfAJbJ\",\"WwMjW4MJRuNFExoPc\",\"no46qNkTbNeHepe64\",\"spofMZviTyzbRbRot\",\"55RQznnuTGpsj3EXd\",\"pvP4w5RK4m9eTcTke\",\"m7kMANAKbQxHfueLC\",\"eMuCpJ2spXWkJjWNz\",\"WBkDXBR4gDrjwaB62\",\"zszDEGuspHnAsCAct\",\"iojEnnY9FsMfYzp6f\",\"Ev2JdCyC7T3Wsoy8w\",\"u5r7mFQ2Swy3aXj2F\",\"SbGLSZ5piLATC8bop\",\"aFYzioHvZPvPaunsg\",\"nweRDtL2ZPxYmRNkd\",\"J3upzLHuEwXH7Z2hx\",\"j6hyqmYawxaqxhNc5\",\"gJYuGdkXEWWmGRLzu\",\"yjtdwc2AC4jA2RWtn\",\"bCFecqKyXTCnGgPSc\",\"4SNg5Qy6eHvwqQGSR\",\"ctbThYbufFCYbRK4f\",\"dNBGNMKLZam4bvHuZ\",\"3AAFfmuGwKui4nRH8\",\"rNyF8QkRgJ8fxKXoE\",\"Hu4SkoNyWCP4vmsZE\",\"9pqtNWrsTJdZcRbEZ\",\"Fk9YcngdB7meTXSgA\",\"68zWiHdiSfDcaZths\",\"FazoWM2yHAmtJZoz9\",\"ddimzq3i3uWXWgrvM\",\"Ryfusi5aen27BkF8i\",\"gXTAie79kiw28tx5u\",\"9jstf8smopHw3kx62\",\"RbgTcveis3KAyrW9A\",\"T6iBEE2jp7f7iEF2P\",\"aiqruLbboPvFkh3qi\",\"yrepPeTRbRu3PPJXr\",\"QvK768G3CFbPdwTXG\",\"QcNwiX3ueZzgvRYYz\",\"rDgKHd6ZSSpboiAj7\",\"RitWvKtMAhzunzsGg\",\"87Kt2839SamZkzvwb\",\"LhNQMA6gLSzQ5zFjL\",\"hEbnpBFvxLb4MLHWB\",\"MBA5BzRXuMRx822ty\",\"KpHrC7WPEojnzgEtz\",\"hzrsKQEfzgqd96oL6\",\"fnHHi7oyJLKzytaeZ\"],\"total\":243,\"quality\":[5,4,5,5,5,5,5,5,5,3,5,5,5,5,5,5,5,5,1,5,5,5,5,5,1,3,5,5,5,5,5,1,4,5,3,3,5,5,5,4,5,5,5,5,5,5]},\"flags\":1},\"subscribers\":[\"tAF9Gf6PiGogbZuWs\"],\"summary\":\"Given a dictionary containing quarterly sales values for a year, return a string representing a bar chart of the sales by quarter.\\n\\nQuarter names (Q1, Q2, Q3, Q4) should appear on the left.\\nQuarters should be sorted in descending order by value.\\nQuarters with the same value should be shown in their yearly order (Q1 -> Q4).\\nBars should begin with a \\\"|\\\".\\nRepeat\",\"tags\":[\"strings\",\"formatting\",\"objects\"],\"timestamp\":{\"$date\":1564687071685},\"title\":\"ASCII Charts (Part 2: Bar Chart)\",\"isHidden\":false,\"quality\":4.5,\"family\":[{\"_id\":\"hR9WCCaSW2pZqoWhT\",\"language\":\"javascript\"},{\"_id\":\"aFLqW5hqqRmM4QXZq\",\"language\":\"python3\"},{\"_id\":\"vCAEfahPL5Pc3i9Fx\",\"language\":\"ruby\"}]}}"]