a["{\"msg\":\"result\",\"id\":\"2428\",\"result\":{\"_id\":\"im47j9ax22Z5MgqvW\",\"author\":\"Jacky Tan\",\"authorId\":\"cSaaAxqkYsPDXmMuf\",\"code\":\"def say_the_number(num):\\n\\t\",\"difficulty\":4.315789473684211,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"YX2x6WhwknaxA4GEM\",\"instructions\":\"Create a function that takes a numeral (just digits without separators (e.g. 19093 instead of 19,093) and returns the standard way of reading a number, complete with punctuation.\\n\\n### Examples\\n```\\nsay_the_number(0) ➞ \\\"Zero.\\\"\\n\\nsay_the_number(11) ➞ \\\"Eleven.\\\"\\n\\nsay_the_number(1043283) ➞ \\\"One million, forty three thousand, two hundred and eighty three.\\\"\\n\\nsay_the_number(90376000010012) ➞ \\\"Ninety trillion, three hundred and seventy six billion, ten thousand and twelve.\\\"\\n```\\n\\n### Notes\\nMust read any number from 0 to 999,999,999,999,999.\",\"isHidden\":false,\"lab\":\"Test.assert_equals(say_the_number(0), \\\"Zero.\\\")\\nTest.assert_equals(say_the_number(11), \\\"Eleven.\\\")\\nTest.assert_equals(say_the_number(14), \\\"Fourteen.\\\")\\nTest.assert_equals(say_the_number(15), \\\"Fifteen.\\\")\\nTest.assert_equals(say_the_number(43), \\\"Forty-three.\\\")\\nTest.assert_equals(say_the_number(50), \\\"Fifty.\\\")\\nTest.assert_equals(say_the_number(1001), \\\"One thousand and one.\\\")\\nTest.assert_equals(say_the_number(20000), \\\"Twenty thousand.\\\")\\nTest.assert_equals(say_the_number(1033286), \\\"One million, thirty-three thousand, two hundred and eighty-six.\\\")\\nTest.assert_equals(say_the_number(12000013), \\\"Twelve million and thirteen.\\\")\\nTest.assert_equals(say_the_number(90376000010012), \\\"Ninety trillion, three hundred and seventy-six billion, ten thousand and twelve.\\\")\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[4,4,4,4,4,5,5,4,5,3,5,4,5,4,5,5,3,5,4],\"rators\":[\"cSaaAxqkYsPDXmMuf\",\"3GhZpJLhhrm6AR3aM\",\"gb9rvGus2Jv7bjZSs\",\"aEm3Wvj2rFYRL8Lrb\",\"vTfyrr4pGddp8rbXc\",\"DwetpbChQM4r6Gwah\",\"5dHucvf2qBYyKim7X\",\"8PwfYqoDQFThzNtvf\",\"xn7uGNKeAwPEkP9oA\",\"eHcgvkTGsH7ZziqBo\",\"iS5BrkGLzJyPK7nKt\",\"yjtdwc2AC4jA2RWtn\",\"kMasMJdpMY4qLYsva\",\"s5M5RvgqR9BhB9JoC\"],\"total\":14,\"quality\":[]},\"flags\":0},\"summary\":\"Create a function that takes a numeral (just digits without separators (e.g. 19093 instead of 19,093) and returns the standard way of reading a number, complete with punctuation.\\n\\nExamples\\nsaythenumber(0) ➞ \\\"Zero.\\\"\\n\\nsaythenumber(11) ➞ \\\"Eleven.\\\"\\n\\nsaythenumber(1043283) ➞ \\\"One million, forty three thousand, two hundred and eighty three.\\\"\\n\\nsaythenumber(90376000010\",\"tags\":[\"algorithms\",\"logic\",\"numbers\",\"data_structures\"],\"timestamp\":{\"$date\":1581359266530},\"title\":\"Say the Number!\",\"quality\":0,\"family\":[{\"_id\":\"4E9gTrRWErpTCA2FQ\",\"language\":\"javascript\"},{\"_id\":\"im47j9ax22Z5MgqvW\",\"language\":\"python3\"},{\"_id\":\"MCZETvBYpTJ3AgM6M\",\"language\":\"ruby\"}]}}"]