a["{\"msg\":\"result\",\"id\":\"1453\",\"result\":{\"_id\":\"juHLpxMYzfcREeMDo\",\"author\":\"zatoichi49\",\"authorId\":\"tAF9Gf6PiGogbZuWs\",\"code\":\"def col_with_max_sum(nums, n):\\n\\t\",\"difficulty\":2.0588235294117645,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"JeapRbtHuoQ5Gc4sv\",\"instructions\":\"Given a list of numbers and a value for *n*, split the numbers into n-sized groups. If we imagine that these groups are stacked on top of each other (see below), return the column number that has the *greatest* sum. If two or more columns have the same sum, return the one with the smallest column number.\\n\\n### Example\\n```\\nnums = [4, 14, 12, 7, 14, 16, 5, 13, 7, 16, 11, 19]\\nn = 4\\n```\\n\\nGives the array:\\n```\\n[[4, 14, 12, 7],\\n[14, 16,  5, 13],\\n[7, 16, 11, 19]]\\n\\n# 1, 2, 3, 4 (column)\\n# 25, 46, 28, 39 (sum)\\n```\\n\\nYou would return **2**, as the 2nd column has the greatest sum.\\n\\n### Notes\\nNums will always divide into equal-length groups.\",\"lab\":\"Test.assert_equals(col_with_max_sum([14, 9, 19, 6, 13, 13, 3, 2, 12], 3), 3)\\nTest.assert_equals(col_with_max_sum([1, 13, 15, 5, 16, 1, 4, 9, 20], 3), 2)\\nTest.assert_equals(col_with_max_sum([15, 4, 6, 10, 6, 4], 2), 1)\\nTest.assert_equals(col_with_max_sum([7, 9, 13, 16, 17, 1, 10, 6, 3, 19, 6, 10, 8, 18, 20, 4], 8), 7)\\nTest.assert_equals(col_with_max_sum([4, 18, 14, 16, 7, 7, 20, 14, 9, 4, 8, 16, 1, 12, 18, 13], 2), 2)\\nTest.assert_equals(col_with_max_sum([5, 7, 2, 12, 20, 7, 1, 12, 8, 7, 12, 8], 3), 2)\\nTest.assert_equals(col_with_max_sum([18, 16, 6, 4, 18, 20, 9, 8, 1, 14, 20, 16], 4), 2)\\nTest.assert_equals(col_with_max_sum([5, 4, 20, 8, 8, 18], 2), 1)\\nTest.assert_equals(col_with_max_sum([2, 9, 12, 9, 17, 6, 8, 9, 8, 18, 2, 4], 2), 2)\\nTest.assert_equals(col_with_max_sum([15, 2, 16, 19, 3, 1, 15, 13, 19, 16, 2, 16], 3), 1)\\nTest.assert_equals(col_with_max_sum([4, 6, 18, 13, 19, 2, 7, 13, 19, 16, 12, 20, 17, 12, 4, 7], 8), 5)\\nTest.assert_equals(col_with_max_sum([10, 8, 6, 2, 2, 2, 18, 17, 17, 20, 17, 17], 6), 1)\\nTest.assert_equals(col_with_max_sum([3, 9, 14, 7, 6, 13, 9, 10, 1, 5, 10, 17, 16, 6, 3, 18], 4), 4)\\nTest.assert_equals(col_with_max_sum([2, 7, 8, 17, 15, 3], 3), 2)\\nTest.assert_equals(col_with_max_sum([8, 8, 6, 4, 8, 16, 4, 16, 18, 20, 20, 7], 2), 2)\\nTest.assert_equals(col_with_max_sum([19, 15, 1, 10, 2, 8], 6), 1)\\nTest.assert_equals(col_with_max_sum([5, 20, 8, 3, 5, 15], 3), 2)\\nTest.assert_equals(col_with_max_sum([10, 12, 15, 14, 17, 4, 18, 12, 17, 18, 18, 12], 4), 3)\\nTest.assert_equals(col_with_max_sum([5, 9, 12, 12, 7], 5), 3)\\nTest.assert_equals(col_with_max_sum([3, 18, 8, 15, 9, 15, 12, 8, 11, 5, 10, 8], 6), 2)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,2,3,0,3,2,2,2,2,3,3,3,3,3,2,3,3,0,2,2,1,2,2,0,2,2,3,2,3,1,1,3,1,2,0,2,3,3,2,1,1,3,2,3,2,1,3,3,2,3,1,3,2,1,3,1,1,3,3,3,3,2,3,2,2,1,5,1,0,3,1,3,3,0,3,3,3,0,3,3,3,3,2,3,2,1,3,1,3,0,1,0,3,3,0,3,4,3,3,2,3,3,2,0,1,3,3,1,3,0,2,2,0,0,2,2,2,1,0,3,3,1,3,2,2,0,3,3,3,3,2],\"rators\":[\"gb9rvGus2Jv7bjZSs\",\"yZvzB3qFb8pkHy4dg\",\"jYJ26SiLKBu5GRumq\",\"6u7yc9m6HuHGbHzph\",\"tAF9Gf6PiGogbZuWs\",\"nzx4uAPg3hCceyFPE\",\"C9LKGu2g5hSijvDzA\",\"aXCm9vWqKwL9XFYoj\",\"yrCNkFYQBEDE76eFS\",\"7g3vZaQXhLpxrajyg\",\"hsrNYf3WbexXJKhCq\",\"AF6LgdKhEdzwgRJom\",\"8JyqsSbN2FJXPr3cw\",\"nF9pCCzbGDhzvWgaw\",\"jHrtWDGBhkbuWa7fG\",\"Wf6AF7TuNwEobxuW6\",\"kQH5b8MXJunh84Czq\",\"gMJhLdyw3tH7L96X2\",\"cR3ibTMxLyEdDFCHY\",\"W2wFFFx9pqgwmkFi3\",\"s5M5RvgqR9BhB9JoC\",\"AYaEkTWLMmfzpwejr\",\"Jg8ZSRXe3NoDMCqGu\",\"otXtuQygbcYATMZoP\",\"XKi8iZXBCHCaebSHh\",\"2fxapKr8XGdNeaKi2\",\"Nj6FwgBtAXsaQwsM2\",\"LHQGRcqhf7zcqNvdW\",\"5uA8xmgifmiJrqbzy\",\"yoYQqaY6GszuTkNSs\",\"Jqk2uJZZxEv5wZFze\",\"6ShafRStcvew4GfCh\",\"C4QntmkYtB89GNtpd\",\"K96FwtfDDN5WM4Bb7\",\"ab7BsQuhDo3QgE6bh\",\"yKttxy9JGn5Jzwuj6\",\"mjxZARnWk8dAGzgS9\",\"2innwjWqxJHo4eRGh\",\"JYbyC7EiD3PuwuxEv\",\"EQbnbkkPYtGxiviTp\",\"Z85ajWfZ4jDPkbvR4\",\"aCNWav8S8Try9RkC6\",\"AasGs8AeX9Lcb9xJn\",\"4CFzv558qbGcpQwc4\",\"pmgFEciNrd3ES9tuu\",\"ydEdzuCCZt4yny9Rq\",\"8PwfYqoDQFThzNtvf\",\"WLFPvm65aHfgwQy7N\",\"GNcCEduB4wpC9K6ZQ\",\"w3A7cBWyAfukk6xEQ\",\"orFLgPDw9H5MDzmwo\",\"soyMGPdjEpGw9CKss\",\"mDWNyaaQ9hvPCRzSd\",\"aEm3Wvj2rFYRL8Lrb\",\"dXMbkgQFoN37BhruB\",\"ZNnsMeNkdDhHjSrZb\",\"55RQznnuTGpsj3EXd\",\"sz8ufn9i8zeiGWpAy\",\"YRstQuthRkFeBiXug\",\"qPSEBYMMi9WJRr8SA\",\"kYWb8BwpKwunQkxeX\",\"EjbDDFRECrzQDkzrX\",\"Yp7uvStL97cC9fKkY\",\"gJYuGdkXEWWmGRLzu\",\"KdNDysEsy2TW5QRJ2\",\"Sj4iamMmNvxwWJBiF\",\"J5T8gZqiZXFuFDTQ7\",\"HF28xZKSLM9wEuqNg\",\"4rwxLqLs2mNZNg8NB\",\"euPBBaYXyS8RBr9KB\",\"yr822PZmmiDDenxpB\",\"MKT7khMBGXzA22ykf\",\"3pxHTZBsv7MKzFG6Y\",\"v9KtC8YLbMWmXiW2H\",\"hnyhBFWwNCz9mDfSi\",\"9dgvEreRDYRiwLmYv\",\"a777e8chPvJkY3tKa\",\"Ecg4m7srYGgZsb4Ck\",\"DEDniTrstQYGounXT\",\"Bgo3RsQ5kzX4AvmXA\",\"wLo92QNAEHLjcrx2M\",\"n2BRY9X8899dcG8Bw\",\"NchnDcEmsLTeFZ4FH\",\"iojEnnY9FsMfYzp6f\",\"zZDaXBxMzTCBhNkgL\",\"HhYCji7QqauyN3A7v\",\"DrkR35NqnP9NDLbq6\",\"yjtdwc2AC4jA2RWtn\",\"iS5BrkGLzJyPK7nKt\",\"qPpQfR5KyDb5Y3EFf\",\"gMjAMD8XPK9sbx7eT\",\"p8qqFdJ3FSk5x9z3G\",\"mG8HqKiAQFTdRZthG\",\"8fZxjQfuXw5HMSRJM\",\"QRv96jmNaYsWkxQEG\",\"DPi9QGLctq2y76KuE\",\"dkcmCKwqApX5jBggc\",\"xn7uGNKeAwPEkP9oA\",\"axdSNLZpiCDF8RS6n\",\"dYPkStFnLvAMsHSzZ\",\"oHbErJxjYJhD66d5w\",\"J3upzLHuEwXH7Z2hx\",\"6MjSiiBLPcvXbXcaZ\",\"gXTAie79kiw28tx5u\",\"7wifKGhuAuiBMpqkn\",\"oBcs8GLX2ZFLXQy8y\",\"qZQxPQ2kaNKAMesHT\",\"cAP3n5NY64uoMwzRR\",\"RTDx9axf52kxhFjwZ\",\"eYfPWvZwnJQkHbSTK\",\"qAby4AWXmTNeusvg3\",\"5rX3qPFdvRQ9G7xZQ\",\"GGdmhAvxXhqhhibJN\",\"PWgzeK859suojbrRx\",\"srJ34BaybkQh3qRkM\",\"PC3pLs36zNzpRDSuE\",\"qzXAMXsHZGT8o5hTA\",\"2PufnQcsHsfymufX3\",\"T6iBEE2jp7f7iEF2P\",\"cEtFW5ZFfCxDtRW2f\",\"LWcndkRmRFLP7zNTs\",\"gKnWjDjwrJh7MK2df\",\"QvEXmSEo3ANp3yPyH\",\"4Lwjr34ypKNQNQCar\",\"yod5YhKtPqw2GfG9B\",\"AYR84qkiEoqzonA3e\",\"8sNv5PTHa7XQ8bNqR\",\"T2vhHPhRR96hRizq8\",\"RoGGD5cpHb4ftdLDv\",\"Ds7L5bksw2QRHjrKL\",\"5HCu9Ydd86QgHDRNP\",\"mvJBakQ35CWAnbbEZ\",\"nkH3HfJXLMNcBMM79\",\"3KkyQm77zsew58Dc2\",\"CHvzhtXnv8HTbPQ56\",\"BrTDhPJcACL2bsrpJ\",\"AQSqD9oNv2uPfxZCR\",\"9pzFiFK3ANLjQfnr2\",\"Qyfyyw6oC4EHAndzo\",\"WL6P5hHXiTNiKjNjM\"],\"total\":153,\"quality\":[4,4,5,5,5,5,5,5,5]},\"flags\":0},\"subscribers\":[\"tAF9Gf6PiGogbZuWs\"],\"summary\":\"Given a list of numbers and a value for n, split the numbers into n-sized groups. If we imagine that these groups are stacked on top of each other (see below), return the column number that has the greatest sum. If two or more columns have the same sum, return the one with the smallest column number.\\n\\nExample\\nnums = [4, 14, 12, 7, 14, 16, 5, 13, 7, 16, 11, 19]\",\"tags\":[\"arrays\",\"language_fundamentals\"],\"timestamp\":{\"$date\":1564683179754},\"title\":\"Column With Maximum Sum\",\"isHidden\":false,\"quality\":4.777777777777778,\"family\":[{\"_id\":\"SEWasMaZyxkuGiY6o\",\"language\":\"cpp\"},{\"_id\":\"X47SKhYan6mATPfhA\",\"language\":\"javascript\"},{\"_id\":\"juHLpxMYzfcREeMDo\",\"language\":\"python3\"},{\"_id\":\"c9apv8uv35LaLLjj2\",\"language\":\"ruby\"}]}}"]