a["{\"msg\":\"result\",\"id\":\"2481\",\"result\":{\"_id\":\"X5Eh7is6iebbpgb9r\",\"author\":\"bangyen\",\"authorId\":\"yv7c4H2jimSKHEjtG\",\"code\":\"param = \\\"\\\"\",\"difficulty\":4.8,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"D6jL2f7NPhomPBHCb\",\"instructions\":\"The bookstore from [this collection] (https://edabit.com/collection/dnXtkLPZpX25t227q), in an attempt to avoid further attacks, has consulted an expert who advised them to start hashing their passwords. Misunderstanding what the expert meant, the bookstore has thus hashed their admin password and required it for access to the `users` dictionary.\\n\\nThe function `hashp()` takes a random hashing function (`sha224`, `sha256`, `sha384`, or `sha512`) and hashes the given string. The function `database()` will only return `users` if `database()` is called with a `str` matching the hashed version of the admin password. Through social engineering, you know that the admin password is of the form `password??`, where the last two characters are digits (i.e. it's a number between `10` and `99`).\\n\\nCreate a query that copies `users` to `res`.\\n\\n### Examples\\n```\\nfrom hashlib import *\\n\\nparam = \\\"your text here\\\"\\n\\ndef hashp(passw):\\n  return sha???(bytes(passw, \\\"utf-8\\\")).hexdigest()\\n\\ndef database(passw):\\n  users = {\\n    \\\"alice\\\": \\\"password\\\",\\n    \\\"bob\\\": \\\"password\\\"\\n  }\\n  admin = hashp(\\\"password??\\\")\\n  return users if passw == admin else {\\\"Error\\\": \\\"Access Denied\\\"}\\n\\nres = eval(\\\"search(\\\"%s\\\")\\\" % param)\\n\\nprint(res) âžž users\\n```\\n\\n### Notes\\n- Create a string, not a function.\\n- Anything present in the Tests tab which doesn't appear here is test related and irrelevant.\\n- For readability, try to break your string into smaller substrings.\\n- As an anti-cheat measure, naming a variable `x_x` is prohibited.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"from hashlib import *; from random import *; from re import *\\n\\ndef find(txt):\\n\\treturn {'Error': 'No products found.'}\\n\\ndef hashp(passw):\\n\\tn = [224, 256, 384, 512][randrange(4)]\\n\\tf = eval('sha%s' % n)\\n\\treturn f(bytes(passw, 'utf-8')).hexdigest()\\n\\ndef database(passw, b=False): # ignore b\\n\\tseed(_) # ignore this\\n\\tusers = {\\n\\t\\t'user%s' % \\n\\t\\tround(k*randrange(10, 100)/7, randrange(1, 5)):\\n\\t\\t'password' for k in range(5)\\n\\t}\\n\\t\\n\\t# begin challenge back-end section\\n\\tif b:\\n\\t\\tTest.assert_equals(res, users)\\n\\t\\tTest.assert_equals(hashp.__code__, eval('(lambda: %s)()' % x_x))\\n\\t# end challenge back-end section\\n\\t\\n\\tadmin = hashp('password%s' % randrange(10, 100))\\n\\t\\n\\treturn users if passw == admin else {'Error': 'Access Denied'}\\n\\n# ----- Tests -----\\nboolean = True\\n\\nfor _ in range(11):\\n\\tx_x = ''.join(chr(randrange(97, 120)) for _ in range(5))\\n\\texec('%s = hashp.__code__' % x_x)\\n\\tcopy = int(_/1)\\n\\tres = eval('find(\\\"%s\\\")' % param)\\n\\tif _ == 1:\\n\\t\\tTest.assert_equals(_, copy)\\n\\t\\tTest.assert_equals(search(\\\"[^a-zA-Z]x_x[^a-zA-Z]\\\", param), \\\\\\n\\t\\t\\tNone, 'Anti-cheat')\\n\\tdatabase('test', True)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,5,5,4,4,5],\"rators\":[\"yv7c4H2jimSKHEjtG\",\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\",\"SGhPxX5bHGL8zZqtt\",\"eHcgvkTGsH7ZziqBo\"],\"total\":5,\"quality\":[]},\"flags\":0},\"summary\":\"The bookstore from [this collection] (https://edabit.com/collection/dnXtkLPZpX25t227q), in an attempt to avoid further attacks, has consulted an expert who advised them to start hashing their passwords. Misunderstanding what the expert meant, the bookstore has thus hashed their admin password and required it for access to the users dictionary.\\n\\nThe function ha\",\"tags\":[\"algorithms\",\"data_structures\",\"games\",\"logic\"],\"timestamp\":{\"$date\":1592455168941},\"title\":\"Injection V: Hashing Passwords\",\"quality\":0,\"family\":[{\"_id\":\"X5Eh7is6iebbpgb9r\",\"language\":\"python3\"}]}}"]