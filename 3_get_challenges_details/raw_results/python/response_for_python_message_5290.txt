a["{\"msg\":\"result\",\"id\":\"1359\",\"result\":{\"_id\":\"6hnrKRh7fZfMC5CKY\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def look_and_say(n):\\n\\t\",\"difficulty\":2.0176470588235293,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"uzS7M5WkANoSB3k3b\",\"instructions\":\"Given an integer, return a new **integer** according to the rules below:\\n\\n- Split the number into groups of two digit numbers. If the number has an *odd* number of digits, return `\\\"invalid\\\"`.\\n- For each group of two digit numbers, concatenate the *last digit* to a new string the same number of times as the value of the *first digit*.\\n- Return the result as an *integer*.\\n\\n```\\nlook_and_say(3132) ➞ 111222\\n\\n# By reading the number digit by digit, you get three \\\"1\\\" and three \\\"2\\\".\\n# Therefore, you put three ones and three two's together.\\n# Remember to return an integer.\\n```\\n\\n### Examples\\n```\\nlook_and_say(95) ➞ 555555555\\n\\nlook_and_say(1213141516171819) ➞ 23456789\\n\\nlook_and_say(120520) ➞ 200\\n\\nlook_and_say(231) ➞ \\\"invalid\\\"\\n```\\n\\n### Notes\\n- Note that the number **0** can be included (see example #3).\\n- Check the **Resources** tab for a TED-Ed video for extra clarity.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(look_and_say(95), 555555555)\\nTest.assert_equals(look_and_say(1213141516171819), 23456789)\\nTest.assert_equals(look_and_say(231), 'invalid')\\nTest.assert_equals(look_and_say(3132), 111222)\\nTest.assert_equals(look_and_say(313317), 1113337)\\nTest.assert_equals(look_and_say(786497), 8888888444444777777777)\\nTest.assert_equals(look_and_say(591173), 9999913333333)\\nTest.assert_equals(look_and_say(404094), 444444444)\\nTest.assert_equals(look_and_say(473536), 7777555666)\\nTest.assert_equals(look_and_say(880440), 888888880000)\\nTest.assert_equals(look_and_say(724767), 22222227777777777)\\nTest.assert_equals(look_and_say(830926), 3333333366)\\nTest.assert_equals(look_and_say(665956), 6666669999966666)\\nTest.assert_equals(look_and_say(441746), 444476666)\\nTest.assert_equals(look_and_say(888322), 888888883333333322)\\nTest.assert_equals(look_and_say(614193), 1111111111333333333)\\nTest.assert_equals(look_and_say(733257), 333333322277777)\\nTest.assert_equals(look_and_say(689301), 888888333333333)\\nTest.assert_equals(look_and_say(614318), 11111133338)\\nTest.assert_equals(look_and_say(936667), 333333333666666777777)\\nTest.assert_equals(look_and_say(890917), 999999997)\\nTest.assert_equals(look_and_say(417528), 1111555555588)\\nTest.assert_equals(look_and_say(830756), 3333333366666)\\nTest.assert_equals(look_and_say(297807), 998888888)\\nTest.assert_equals(look_and_say(285728), 887777788)\\nTest.assert_equals(look_and_say(664940), 66666699990000)\\nTest.assert_equals(look_and_say(476240), 77772222220000)\\nTest.assert_equals(look_and_say(933525), 33333333355555)\\nTest.assert_equals(look_and_say(788200), 888888822222222)\\nTest.assert_equals(look_and_say(163210), 62220)\\nTest.assert_equals(look_and_say(708543), 555555553333)\\nTest.assert_equals(look_and_say(296562), 99555555222222)\\nTest.assert_equals(look_and_say(866934), 66666666999999444)\\nTest.assert_equals(look_and_say(615664), 11111166666444444)\\nTest.assert_equals(look_and_say(832349), 33333333339999)\\nTest.assert_equals(look_and_say(938773), 333333333777777773333333)\\nTest.assert_equals(look_and_say(345878), 444888888888888)\\nTest.assert_equals(look_and_say(332533), 33355333)\\nTest.assert_equals(look_and_say(74457), 'invalid')\\nTest.assert_equals(look_and_say(798734), 999999977777777444)\\nTest.assert_equals(look_and_say(17363), 'invalid')\\nTest.assert_equals(look_and_say(72495), 'invalid')\\nTest.assert_equals(look_and_say(418145), 1111111111115555)\\nTest.assert_equals(look_and_say(76129), 'invalid')\\nTest.assert_equals(look_and_say(436441), 33334444441111)\\nTest.assert_equals(look_and_say(382177), 888117777777)\\nTest.assert_equals(look_and_say(729472), 22222224444444442222222)\\nTest.assert_equals(look_and_say(450718), 55558)\\nTest.assert_equals(look_and_say(837641), 3333333366666661111)\\nTest.assert_equals(look_and_say(285078), 88000008888888)\\nTest.assert_equals(look_and_say(420899), 2222999999999)\\nTest.assert_equals(look_and_say(894468), 999999994444888888)\\nTest.assert_equals(look_and_say(580787), 8888877777777)\\nTest.assert_equals(look_and_say(123559), 255599999)\\nTest.assert_equals(look_and_say(909861), 888888888111111)\\nTest.assert_equals(look_and_say(347173), 44411111113333333)\\nTest.assert_equals(look_and_say(296201), 99222222)\\nTest.assert_equals(look_and_say(217241), 1122222221111)\\nTest.assert_equals(look_and_say(156414), 54444444)\\nTest.assert_equals(look_and_say(842309), 4444444433)\\nTest.assert_equals(look_and_say(851385), 55555555355555555)\\nTest.assert_equals(look_and_say(317137), 1111111111777)\\nTest.assert_equals(look_and_say(217693), 116666666333333333)\\nTest.assert_equals(look_and_say(44255), 'invalid')\\nTest.assert_equals(look_and_say(155400), 544444)\\nTest.assert_equals(look_and_say(556470), 555554444440000000)\\nTest.assert_equals(look_and_say(430222), 333322)\\nTest.assert_equals(look_and_say(61912), 'invalid')\\nTest.assert_equals(look_and_say(270019), 779)\\nTest.assert_equals(look_and_say(151117), 517)\\nTest.assert_equals(look_and_say(701552), 522222)\\nTest.assert_equals(look_and_say(976363), 777777777333333333333)\\nTest.assert_equals(look_and_say(75282), 'invalid')\\nTest.assert_equals(look_and_say(641719), 44444479)\\nTest.assert_equals(look_and_say(476865), 7777888888555555)\\nTest.assert_equals(look_and_say(926748), 2222222227777778888)\\nTest.assert_equals(look_and_say(238443), 33444444443333)\\nTest.assert_equals(look_and_say(180236), 8666)\\nTest.assert_equals(look_and_say(72293), 'invalid')\\nTest.assert_equals(look_and_say(70404), 'invalid')\\nTest.assert_equals(look_and_say(613247), 1111112227777)\\nTest.assert_equals(look_and_say(818412), 11111111444444442)\\nTest.assert_equals(look_and_say(859381), 5555555533333333311111111)\\nTest.assert_equals(look_and_say(826222), 2222222222222222)\\nTest.assert_equals(look_and_say(163909), 6999)\\nTest.assert_equals(look_and_say(392936), 99999666)\\nTest.assert_equals(look_and_say(13167), 'invalid')\\nTest.assert_equals(look_and_say(953823), 55555555588833)\\nTest.assert_equals(look_and_say(493000), 9999000)\\nTest.assert_equals(look_and_say(346453), 44444444433333)\\nTest.assert_equals(look_and_say(536460), 33333444444000000)\\nTest.assert_equals(look_and_say(163026), 600066)\\nTest.assert_equals(look_and_say(169775), 67777777775555555)\\nTest.assert_equals(look_and_say(103131), 111111)\\nTest.assert_equals(look_and_say(541146), 4444416666)\\nTest.assert_equals(look_and_say(162067), 600777777)\\nTest.assert_equals(look_and_say(522767), 2222277777777)\\nTest.assert_equals(look_and_say(488280), 88882222222200000000)\\nTest.assert_equals(look_and_say(775203), 777777722222)\\nTest.assert_equals(look_and_say(226413), 224444443)\\nTest.assert_equals(look_and_say(725455), 22222224444455555)\\nTest.assert_equals(look_and_say(446972), 44449999992222222)\\nTest.assert_equals(look_and_say(101532), 5222)\\nTest.assert_equals(look_and_say(634315), 33333333335)\\nTest.assert_equals(look_and_say(120520), 200)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,2,2,3,1,1,2,2,1,5,3,1,2,2,2,1,1,2,3,3,3,0,2,3,3,3,2,1,1,1,3,1,2,3,2,0,2,2,3,3,2,3,3,2,3,3,2,2,1,0,1,3,2,3,3,1,1,3,2,3,2,2,3,3,2,0,3,3,3,2,3,3,0,3,2,3,3,1,3,2,2,1,3,3,2,3,0,1,1,3,1,0,3,3,1,0,3,2,2,2,2,3,2,2,2,2,2,2,2,2,1,3,2,1,1,0,0,2,2,2,3,2,4,2,1,2,2,1,0,1,3,1,2,3,1,3,1,3,1,2,3,3,2,3,1,2,2,3,1,0,1,2,3,3,3,2,3,3,1,2,3,4,1,0,3],\"rators\":[\"PXAcsKkssS2yLyDv2\",\"tAF9Gf6PiGogbZuWs\",\"C4QntmkYtB89GNtpd\",\"8PwfYqoDQFThzNtvf\",\"gb9rvGus2Jv7bjZSs\",\"Q2q7wd5e5cfCrwPxq\",\"AasGs8AeX9Lcb9xJn\",\"4CFzv558qbGcpQwc4\",\"s5M5RvgqR9BhB9JoC\",\"J5T8gZqiZXFuFDTQ7\",\"JCNwgv5FH3Y4cKWhh\",\"8QAMphNjomBjcX3j9\",\"yZvzB3qFb8pkHy4dg\",\"wZoxzQDbso9SMAPkY\",\"2fxapKr8XGdNeaKi2\",\"u5u2YpHXiNgzDNJdX\",\"ydEdzuCCZt4yny9Rq\",\"aCNWav8S8Try9RkC6\",\"mZnXCe6hcnbv3DNvp\",\"WLFPvm65aHfgwQy7N\",\"DCLoZNDf8h6TB7gxn\",\"Z85ajWfZ4jDPkbvR4\",\"8JyqsSbN2FJXPr3cw\",\"mDWNyaaQ9hvPCRzSd\",\"w3A7cBWyAfukk6xEQ\",\"Jsrfs8nEy37mJxbqD\",\"S6Zd8mPuvhuh3MFRt\",\"aEm3Wvj2rFYRL8Lrb\",\"cR3ibTMxLyEdDFCHY\",\"ZNnsMeNkdDhHjSrZb\",\"3CddxEkvCvRoCLQ7b\",\"YRstQuthRkFeBiXug\",\"XsJW2mpEkgopkkP7p\",\"dXMbkgQFoN37BhruB\",\"sz8ufn9i8zeiGWpAy\",\"4TBGC93dmrzHsfpfS\",\"gJYuGdkXEWWmGRLzu\",\"3Zceb8GudqAG3onG3\",\"LgQxPzjhCS6of9DH4\",\"n2BRY9X8899dcG8Bw\",\"Yp7uvStL97cC9fKkY\",\"FgkYtHLxeD8pETJ8T\",\"euPBBaYXyS8RBr9KB\",\"RcFJfYquW9quJDnp5\",\"kYWb8BwpKwunQkxeX\",\"r5GGrGb3G47LHmPWF\",\"nzqwymsdwC7gxAmip\",\"EjbDDFRECrzQDkzrX\",\"55RQznnuTGpsj3EXd\",\"yYxPzFqBgtQ9fsyHM\",\"KRmxvA4mWgfKvHmYN\",\"dHZqT6h4JMwk5fPC8\",\"3pxHTZBsv7MKzFG6Y\",\"YcCLwitFMAEJSnxAW\",\"eEK5MpDgtJyYtZzuM\",\"HF28xZKSLM9wEuqNg\",\"orFLgPDw9H5MDzmwo\",\"MKT7khMBGXzA22ykf\",\"KdNDysEsy2TW5QRJ2\",\"ekQh3jzgGLsEMbKo3\",\"bCDTKAoS4biDmQ64Y\",\"yr822PZmmiDDenxpB\",\"PytNZK9mNiRiZxPrm\",\"DHGZdhp8zbysYagmr\",\"bJxaKHJqR82EWw8Su\",\"4rwxLqLs2mNZNg8NB\",\"So6PHm74mfJuY2WTs\",\"wS2o3x4nrsadtC3xP\",\"QDrLtnBsA2LJfptvT\",\"a777e8chPvJkY3tKa\",\"kQH5b8MXJunh84Czq\",\"4ZicxybyvEsuA9iET\",\"v9KtC8YLbMWmXiW2H\",\"DEDniTrstQYGounXT\",\"CjbTWkHnMR666rFhX\",\"hnyhBFWwNCz9mDfSi\",\"YLtspA8ec6ntcoMMf\",\"L73mddgeEiHq9PCdu\",\"DrkR35NqnP9NDLbq6\",\"JS3hNM3XXkxPdg3yk\",\"LsvxCjXdo5tnmEDQc\",\"cykCKNJcqFBxz4T8s\",\"iojEnnY9FsMfYzp6f\",\"BC3XhXhX9mTrAScgy\",\"zZDaXBxMzTCBhNkgL\",\"KZ2xddpM2f9JRaryB\",\"HqmxnQJM66Y57twhn\",\"yjtdwc2AC4jA2RWtn\",\"dzS6WBTMHyFEag6Fp\",\"f2BoqyCpgnmjEjLqx\",\"Ecg4m7srYGgZsb4Ck\",\"hRiMXDZNAzyPd5tpt\",\"CwXsu25ygLEwQbmQC\",\"ZrKCkX7xxGGZzauFW\",\"HhYCji7QqauyN3A7v\",\"axdSNLZpiCDF8RS6n\",\"ji5f27FPz4wRRF6Ls\",\"p8qqFdJ3FSk5x9z3G\",\"y372QoK9hSQGAWjCF\",\"P7NmFbCJ5offXMRvB\",\"jBR47vA7HwAZqp4QA\",\"mG8HqKiAQFTdRZthG\",\"mSjddMnY7SYC7gCoH\",\"pmgFEciNrd3ES9tuu\",\"zvR7koBTGcaj5pJNQ\",\"XjajdyybZZbkz8o5x\",\"dkcmCKwqApX5jBggc\",\"GGprTwrkjuccmrQRg\",\"DPi9QGLctq2y76KuE\",\"8fZxjQfuXw5HMSRJM\",\"KJCDwGkoXh8qtbbKr\",\"xn7uGNKeAwPEkP9oA\",\"NfMJuiBk6FN5Jc6ow\",\"kXEfD7xxEyWd7oxxL\",\"dYPkStFnLvAMsHSzZ\",\"6MjSiiBLPcvXbXcaZ\",\"J3upzLHuEwXH7Z2hx\",\"nc7bRhkxgKyqusYe3\",\"4fhjJBvLBWh6QeSih\",\"oBcs8GLX2ZFLXQy8y\",\"7scpcTEp3SEx5Wjg9\",\"QRv96jmNaYsWkxQEG\",\"MKJhn7goNzuGtB5y9\",\"R29kgJ9M7R4qqwjcE\",\"Kd9cbANRqNspHmByA\",\"gSFJPsMXnqAog3Q9f\",\"2nD3hNDExw2LNYq4F\",\"kEkNyqFARK9YBrhRx\",\"fHeYpHLgzDPqcoDh6\",\"cAP3n5NY64uoMwzRR\",\"Nzi4RD5fxAJ4wjnNa\",\"fznzd3qnvtbFkkizz\",\"n2WLZ3HiuisuxvbTi\",\"Jqk2uJZZxEv5wZFze\",\"3LiSLdtN58n46NEqg\",\"akzeR9YuA8v8FvPQN\",\"GGdmhAvxXhqhhibJN\",\"T2vhHPhRR96hRizq8\",\"PWgzeK859suojbrRx\",\"q2tzvkrLASvSjkek9\",\"CHvzhtXnv8HTbPQ56\",\"RTDx9axf52kxhFjwZ\",\"K6MfKMytoJJuSGewP\",\"TePz42wc3ZZ5CKA6L\",\"9ivvGvJGvtQfigQaZ\",\"FEYpu9RWysAgW3XnP\",\"Wpn95NqWxncQrwNgz\",\"ZgWwEdWxjy83WpPQX\",\"2PufnQcsHsfymufX3\",\"ey3CASd6Je5LEJzfB\",\"SGhPxX5bHGL8zZqtt\",\"8BFSTCnoe2QggN64c\",\"PC3pLs36zNzpRDSuE\",\"RErqK2yM94wYyD2hk\",\"b6y4ZGD97pudqoYEX\",\"srJ34BaybkQh3qRkM\",\"3KkyQm77zsew58Dc2\",\"KB8GdTPpWbXBDmm6L\",\"fbr22rabEJMfBp7vD\",\"ctbThYbufFCYbRK4f\",\"4RY3zj9C2t8GGefhi\",\"qzXAMXsHZGT8o5hTA\",\"T6iBEE2jp7f7iEF2P\",\"o4ixjQGSaYqA2JoM4\",\"5f6oSeq4r5WTXLdCQ\",\"jCjCvyhqhpebkJn34\",\"kAPruRwqKQQxPPuwy\",\"jWbd7SYDzLPjc9EDh\",\"9bQyb6rW7xfE4vgrR\",\"nkL2knkcNaiHCerW2\",\"8sNv5PTHa7XQ8bNqR\",\"Z8M3FiEAk5Xkx3KLw\",\"aWatMcQS4mPLKPMTL\",\"EfxwqhYdapX3dMQC2\",\"RoGGD5cpHb4ftdLDv\",\"kjvgTyRFyKHv44DcH\",\"uw8E83imJYpQiiPpP\",\"AFfw7cGg83uYk2Miy\",\"v74fPhegePGxCm2uk\",\"4Lwjr34ypKNQNQCar\",\"yod5YhKtPqw2GfG9B\",\"AQSqD9oNv2uPfxZCR\",\"nkH3HfJXLMNcBMM79\",\"5HCu9Ydd86QgHDRNP\",\"8nE8QHnFYsHCFebte\",\"mvJBakQ35CWAnbbEZ\",\"sbJcFfQjQ59Wfg4Cd\",\"buX4mCQhtXCfBjeno\",\"Ds7L5bksw2QRHjrKL\",\"rhS8qXRjZcpDXkwnE\",\"JhX7jvtpwNyxcc39m\",\"Qyfyyw6oC4EHAndzo\",\"BrTDhPJcACL2bsrpJ\",\"QNPbruWphPhimnrAv\",\"jkbavR2ATFJcpmo8M\",\"77ChWogs2J8hNYBNK\",\"mw9464S5dnenqzvpm\",\"fZrLzFjr7PJQCbcqx\",\"9pzFiFK3ANLjQfnr2\"],\"total\":220,\"quality\":[5,5,5,5,5,5,3,5,5,4,4,5,5,5,5,5,4,3,5,5,5,5,5,3,5,5,5,5,5,5,5,5,5,5]},\"flags\":0},\"summary\":\"Given a number with an even number of digits, return a new number according to the rules below:\\n\\nSplit the number into groups of two digit numbers. If the number has an odd number of digits, return \\\"invalid\\\".\\nFor each group of two digit numbers, concatenate the last digit to a string to the same number of times as the value of the first digit.\\nReturn the resul\",\"tags\":[\"math\",\"numbers\",\"algorithms\"],\"timestamp\":{\"$date\":1583088579807},\"title\":\"Look and Say Numbers\",\"quality\":4.735294117647059,\"family\":[{\"_id\":\"NaLJhudfbSk5ENWYt\",\"language\":\"cpp\"},{\"_id\":\"D3MvMGRxTsN3mtNkH\",\"language\":\"java\"},{\"_id\":\"iKdJfMrxkWsBcEKEL\",\"language\":\"javascript\"},{\"_id\":\"6hnrKRh7fZfMC5CKY\",\"language\":\"python3\"},{\"_id\":\"b6pYoi6uT2gPfsL2z\",\"language\":\"ruby\"}]}}"]