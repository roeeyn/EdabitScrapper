a["{\"msg\":\"result\",\"id\":\"2072\",\"result\":{\"_id\":\"FmowTJecDKQMRqsHS\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"def crop_hydrated(field):\\n\\t\",\"difficulty\":2.877862595419847,\"familyId\":\"9xbGDFGennaYsQzRu\",\"instructions\":\"You're given a 2D list / matrix of a crop field. Each crop needs a water source. Each water source hydrates the 8 tiles around it. With `\\\"w\\\"` representing a water source, and `\\\"c\\\"` representing a crop, is every crop hydrated?\\n\\n### Examples\\n```\\ncrop_hydrated([\\n  [ \\\"w\\\", \\\"c\\\" ],\\n  [ \\\"w\\\", \\\"c\\\" ],\\n  [ \\\"c\\\", \\\"c\\\" ]\\n]) ➞ True\\n\\ncrop_hydrated([\\n  [ \\\"c\\\", \\\"c\\\", \\\"c\\\" ]\\n]) ➞ False\\n# There isn\\\"t even a water source.\\n\\ncrop_hydrated([\\n  [ \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"w\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"c\\\", \\\"w\\\", \\\"c\\\", \\\"c\\\" ]\\n]) ➞ False\\n```\\n\\n### Notes\\n`\\\"w\\\"` on its own should return `True`, and `\\\"c\\\"` on its own should return `False`.\",\"isHidden\":false,\"lab\":\"Test.assert_equals(crop_hydrated([\\n  [ \\\"w\\\", \\\"w\\\" ],\\n  [ \\\"w\\\", \\\"c\\\" ],\\n  [ \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"c\\\", \\\"w\\\" ],\\n  [ \\\"c\\\", \\\"w\\\" ]\\n]), True)\\n\\nTest.assert_equals(crop_hydrated([\\n  [ \\\"c\\\", \\\"w\\\", \\\"w\\\", \\\"w\\\", \\\"c\\\" ],\\n  [ \\\"w\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"w\\\", \\\"c\\\", \\\"c\\\", \\\"w\\\", \\\"c\\\" ]\\n]), True)\\n\\nTest.assert_equals(crop_hydrated([\\n  [ \\\"c\\\", \\\"w\\\" ]\\n]), True)\\n\\nTest.assert_equals(crop_hydrated([\\n  [ \\\"w\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"w\\\", \\\"c\\\" ]\\n]), True)\\n\\nTest.assert_equals(crop_hydrated([\\n  [ \\\"c\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"w\\\", \\\"w\\\", \\\"c\\\" ],\\n  [ \\\"c\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"w\\\", \\\"w\\\", \\\"c\\\" ],\\n  [ \\\"c\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"c\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"c\\\", \\\"w\\\", \\\"c\\\" ]\\n]), True)\\n\\nTest.assert_equals(crop_hydrated([\\n  [ \\\"c\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"w\\\", \\\"w\\\", \\\"c\\\" ]\\n]), True)\\n\\nTest.assert_equals(crop_hydrated([\\n  [ \\\"c\\\", \\\"w\\\", \\\"w\\\", \\\"c\\\", \\\"c\\\", \\\"w\\\", \\\"c\\\" ]\\n]), True)\\n\\nTest.assert_equals(crop_hydrated([\\n  [ \\\"c\\\", \\\"w\\\", \\\"c\\\", \\\"c\\\", \\\"w\\\", \\\"w\\\" ],\\n  [ \\\"c\\\", \\\"c\\\", \\\"w\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"w\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"w\\\" ],\\n  [ \\\"c\\\", \\\"w\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"w\\\", \\\"w\\\" ]\\n]), True)\\n\\nTest.assert_equals(crop_hydrated([\\n  [ \\\"c\\\" ],\\n  [ \\\"w\\\" ],\\n  [ \\\"c\\\" ],\\n  [ \\\"c\\\" ],\\n  [ \\\"w\\\" ],\\n  [ \\\"c\\\" ]\\n]), True)\\n\\nTest.assert_equals(crop_hydrated([\\n  [ \\\"c\\\", \\\"c\\\", \\\"w\\\", \\\"w\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"c\\\", \\\"w\\\", \\\"c\\\", \\\"w\\\", \\\"w\\\", \\\"c\\\", \\\"w\\\" ],\\n  [ \\\"w\\\", \\\"w\\\", \\\"c\\\", \\\"w\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\" ]\\n]), True)\\n\\n\\nTest.assert_equals(crop_hydrated([\\n  [ \\\"c\\\", \\\"c\\\", \\\"w\\\", \\\"c\\\", \\\"c\\\", \\\"w\\\", \\\"c\\\", \\\"w\\\" ]\\n]), False)\\n\\nTest.assert_equals(crop_hydrated([\\n  [ \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"w\\\", \\\"c\\\" ],\\n  [ \\\"c\\\", \\\"w\\\", \\\"c\\\", \\\"c\\\", \\\"w\\\", \\\"c\\\", \\\"w\\\" ],\\n  [ \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"w\\\", \\\"c\\\", \\\"w\\\", \\\"c\\\" ],\\n  [ \\\"w\\\", \\\"w\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"c\\\", \\\"c\\\", \\\"w\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"w\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"w\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"w\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"w\\\" ]\\n]), False)\\n\\nTest.assert_equals(crop_hydrated([\\n  [ \\\"c\\\", \\\"w\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"w\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"w\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"w\\\", \\\"w\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"c\\\", \\\"w\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"c\\\", \\\"c\\\", \\\"w\\\", \\\"c\\\" ],\\n  [ \\\"c\\\", \\\"c\\\", \\\"w\\\", \\\"w\\\" ],\\n  [ \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"w\\\" ]\\n]), False)\\n\\nTest.assert_equals(crop_hydrated([\\n  [ \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"w\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"w\\\" ],\\n  [ \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"w\\\", \\\"c\\\" ],\\n  [ \\\"c\\\", \\\"w\\\", \\\"w\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\" ]\\n]), False)\\n\\nTest.assert_equals(crop_hydrated([\\n  [ \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"w\\\", \\\"c\\\" ],\\n  [ \\\"w\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"w\\\" ],\\n  [ \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"c\\\", \\\"w\\\", \\\"w\\\", \\\"c\\\", \\\"c\\\", \\\"w\\\", \\\"w\\\" ],\\n  [ \\\"c\\\", \\\"c\\\", \\\"w\\\", \\\"c\\\", \\\"w\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"w\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"w\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"w\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"w\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\" ]\\n]), False)\\n\\nTest.assert_equals(crop_hydrated([\\n  [ \\\"c\\\", \\\"w\\\", \\\"c\\\", \\\"c\\\", \\\"w\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"w\\\" ],\\n  [ \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"w\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"w\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"w\\\", \\\"w\\\", \\\"w\\\", \\\"c\\\" ],\\n  [ \\\"w\\\", \\\"c\\\", \\\"c\\\", \\\"w\\\", \\\"w\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"w\\\" ],\\n  [ \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"w\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\" ]\\n]), False)\\n\\nTest.assert_equals(crop_hydrated([\\n  [ \\\"c\\\", \\\"c\\\", \\\"w\\\", \\\"c\\\", \\\"w\\\" ],\\n  [ \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"w\\\", \\\"c\\\", \\\"w\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"c\\\", \\\"w\\\", \\\"w\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"w\\\" ],\\n  [ \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"w\\\", \\\"c\\\" ]\\n]), False)\\n\\nTest.assert_equals(crop_hydrated([\\n  [ \\\"c\\\", \\\"w\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"w\\\", \\\"w\\\", \\\"c\\\" ],\\n  [ \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"w\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"w\\\", \\\"c\\\" ]\\n]), False)\\n\\nTest.assert_equals(crop_hydrated([\\n  [ \\\"w\\\", \\\"w\\\", \\\"c\\\", \\\"c\\\", \\\"w\\\" ],\\n  [ \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"c\\\", \\\"c\\\", \\\"w\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"w\\\", \\\"c\\\", \\\"c\\\", \\\"w\\\", \\\"w\\\" ],\\n  [ \\\"c\\\", \\\"c\\\", \\\"w\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"c\\\", \\\"c\\\", \\\"w\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"w\\\", \\\"c\\\" ]\\n]), False)\\n\\nTest.assert_equals(crop_hydrated([\\n  [ \\\"c\\\", \\\"c\\\", \\\"w\\\", \\\"c\\\", \\\"c\\\", \\\"w\\\" ],\\n  [ \\\"c\\\", \\\"w\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"w\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"w\\\", \\\"c\\\" ],\\n  [ \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\" ],\\n  [ \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\" ]\\n]), False)\\n\\n# By Harith Shah\",\"language\":\"python3\",\"summary\":\"You're given a 2D list / matrix of a crop field. Each crop needs a water source. Each water source hydrates the 8 tiles aound it. With \\\"w\\\" representing a water source, and \\\"c\\\" representing a crop, is every crop hydrated?\\n\\nExamples\\ncrop_hydrated([\\n  [ \\\"w\\\", \\\"c\\\" ],\\n  [ \\\"w\\\", \\\"c\\\" ],\\n  [ \\\"c\\\", \\\"c\\\" ]\\n]) ➞ True\\n\\ncrop_hydrated([\\n  [ \\\"c\\\", \\\"c\\\", \\\"c\\\" ]\\n]) ➞ False\\nThere isn\\\"\",\"tags\":[\"arrays\",\"conditions\",\"loops\",\"strings\",\"validation\"],\"timestamp\":{\"$date\":1589760893926},\"title\":\"Crop Fields\",\"stats\":{\"completed\":{\"total\":174,\"ratings\":[3,3,3,3,3,4,2,1,2,3,2,4,4,4,4,5,4,4,5,2,2,3,4,0,3,2,4,3,5,3,2,5,5,4,4,4,4,5,5,3,2,4,4,1,2,2,5,0,5,1,1,3,4,3,2,3,3,5,3,3,2,2,3,2,5,5,2,3,4,5,5,5,2,2,1,5,2,3,5,0,3,2,5,0,2,4,5,5,3,2,1,4,2,1,5,1,5,5,0,4,4,5,2,0,0,5,3,4,5,3,2,1,0,5,1,0,0,5,2,0,2,1,5,1,0,2,3,2,0,1,0],\"rators\":[\"bJaPCBx63YxdJAuTS\",\"AasGs8AeX9Lcb9xJn\",\"aEm3Wvj2rFYRL8Lrb\",\"ZNnsMeNkdDhHjSrZb\",\"s5M5RvgqR9BhB9JoC\",\"gb9rvGus2Jv7bjZSs\",\"vsE62YBA9NpMFBNiw\",\"mDWNyaaQ9hvPCRzSd\",\"fznzd3qnvtbFkkizz\",\"8PwfYqoDQFThzNtvf\",\"DPtkBHhNn7m5EK2Xf\",\"aCNWav8S8Try9RkC6\",\"ahShRaM3SEFT33gvS\",\"5H9MNfC4DPwxbakTf\",\"YsAz93yZw8KKPupKv\",\"SpTi3f5uA7t7ygtLv\",\"HmKFZqFH9YC346djy\",\"s5oiWeoyJpLmt57Ek\",\"W5TajitmCyxz87zAC\",\"ywk3XGvcmpTgRxwZa\",\"8JyqsSbN2FJXPr3cw\",\"44dAzThMuyGZ5StXB\",\"FDWEEwwAtxD7SkqBD\",\"bDpmwo4vm9jHeZAPk\",\"b9oNDwXGhgfswtHdW\",\"9oD3LTF5R3gJTGXy9\",\"W6sCwS23msxRPcBLT\",\"KpHrC7WPEojnzgEtz\",\"MxQXA7kigYpyBS37i\",\"2q4WGaNrQ93Hbxp4W\",\"tBNAfSu2bzdvHeZff\",\"mq2W9FwPgf4w75dZi\",\"ZSbcGKj67qFTPfzqh\",\"nLpdvK7EcahCqNe8X\",\"vTfyrr4pGddp8rbXc\",\"S6ipW8Xzds8QDszn9\",\"8DX9DnJwTSskLXkfu\",\"6428wKHtwKkFdvBs5\",\"diA4hKkZ9WRCu4ive\",\"Ecg4m7srYGgZsb4Ck\",\"4fhjJBvLBWh6QeSih\",\"GgLd4eWBu79mdjtkP\",\"hZW6j5s6RHpx35phy\",\"gnqiMtWWsK2aCjbpA\",\"XjrgSFNFz5Hg2mo5o\",\"b3Dk2LqoEgripS3Y3\",\"Wv2vJnEj8ywNmARoF\",\"f2BoqyCpgnmjEjLqx\",\"xn7uGNKeAwPEkP9oA\",\"J83b6T9hJ2EqE5Aov\",\"d6iEb2BDDofyeePh9\",\"4sHkH3t9CJYhbDwjM\",\"tAF9Gf6PiGogbZuWs\",\"pPtmnJ7q9QchoG2Jq\",\"Kn9yjT4NvcnnvjCrL\",\"J9DAAbBSYYJyM5sPN\",\"SGhPxX5bHGL8zZqtt\",\"8WpvgSbQciTQWdd8T\",\"pLbLYJpdS3CjrHMu4\",\"CccXoqbXeoMydtEhh\",\"Lm6ChQCWBmaikmk5J\",\"62agN2oNiy8R7CxLy\",\"cLyRCsnvBPjisTmBG\",\"EMJ6uvBZkie429gdg\",\"oZiGwL535nJ5ZMJr7\",\"SbGLSZ5piLATC8bop\",\"9qdwnisj554famEPb\",\"xW9NGjvcevY6qdzvw\",\"X5ZH47hipxBwFF5Tf\",\"JtCp4TnHdN3TFSGzg\",\"EH68sDGGufTc5vifi\",\"5hhuYLyGkeqCvaSrf\",\"fSgCtTbtfBQBmGM2m\",\"3bH5s2P4iYCRHb5Sk\",\"kYwWgJMTN9j6cxJaf\",\"h4x2jaMdj5aQZbW5g\",\"kDq2TnPdy7hGKdAD5\",\"mePSe5o7qpkYirqxx\",\"MXFAQAyRRg9Qassp9\",\"ZQSG2DF9TjmBGXPwu\",\"PomHQhoHzChjA8aBc\",\"FdB7yZRr2ZjaFQcpj\",\"ioQJqjMAixej8QkDc\",\"9onLFjwWr6DqyRBJw\",\"iS5BrkGLzJyPK7nKt\",\"FgQB4mnJhmck3PwCY\",\"FuxNmPK2CgEgoSYKo\",\"c4DsFkzDj9CptDgDj\",\"8KNtgAcNpyT2f6bTT\",\"W4X4kb9bFHP9wQLKZ\",\"amfj3y4oZMprJ96fg\",\"czQYdQXp9cAxjD3g9\",\"T63gcy2WbkwsvEyRB\",\"iBPtFyzzY83pAFACa\",\"huzdavue7HJ2fXRaY\",\"GLgGSqM8SnZuqGzP5\",\"HF28xZKSLM9wEuqNg\",\"83estQegwgR4TXKk6\",\"2wW36evZLxtnzkZpQ\",\"dB6s7p6pFMEyagbn2\",\"kWobGYgZWJxN6ZddF\",\"Mw8yqSDFdQui28w5N\",\"ZitsKMQFKHRQw7AhC\",\"vjYSNHgmAgBaGQsJs\",\"kAjhvt8QrT2ggqAen\",\"Cia25zjeX3RkCNx5t\",\"8XsRumStNMNzPg6CQ\",\"Qy4Wr4dQLKgYSRXis\",\"xGdw5GCbjjZL9Hr6J\",\"f89WBZDy3j7KZY8od\",\"QBgP4BySQAeCoCFf6\",\"uH5zTYERTJ2y5ERCF\",\"7mqLZqiA5o7q96DJL\",\"i42C33MNpNoSXhJDj\",\"nPRDLtMR8iztbB7Es\",\"mLjrvoFNrH4uZWHRB\",\"aaotFPYKJpeDdBmK5\",\"4EgBCgEyiZA2hRsh4\",\"FduKFqTnNNcRRCjFW\",\"AgEPDWZ7QHMmWyaMd\",\"fNtNTiNhQTsHJxvTS\",\"53EmC2yPu6wNXwP6g\",\"2YF9pq5TMZcck8GxD\",\"7QXAZF4GmvGhJh5qA\",\"fSawAcidbRKJfFoqp\",\"SjxhuvWoXqJHMMLmo\",\"2okx54gGL8GqfxPG2\",\"pEGcXtqiTDm22pnjz\",\"TzfFXjsN3n6kkFZSY\",\"iZnLnzTPXwRgCafzH\",\"4giaiqDowpCj5pLL4\",\"9LfZc6753HJxzkgc3\",\"8AdEgn4Y38fPmja6C\",\"b8w3pzRkvRdGY3ou9\",\"AAz7ND8ni2GD4zZx2\",\"jdNjduxzbqfSEhEX8\",\"aNC7fCqoboWhafQA5\",\"SBzZXaahGicGuPtYT\",\"jD7mXH7BefoPFN7R8\",\"jD3r3hMzLA9Ai45go\",\"DbQ4ggmy5LRyrBS2v\",\"RhWecL96F9KJgrFwn\",\"Jqk2uJZZxEv5wZFze\",\"d9eH75EHcgeqBvtcm\",\"jFvXwSyitFJ3TXgwz\",\"aDqSJsgF3eYJFuNSG\",\"HDnTfttgx7bpEAqew\",\"67wyDkTZSbcgiqrJr\",\"g44JdADXBp7Efvdfj\",\"DCY34cfeCDFan6BgQ\",\"KaC4PGcQ4G5KbvKQp\",\"bHhuudonsyz2auRBk\",\"X65Jxn5K3D7NwNZzN\",\"8sNv5PTHa7XQ8bNqR\",\"iojEnnY9FsMfYzp6f\",\"J3upzLHuEwXH7Z2hx\",\"aFYzioHvZPvPaunsg\",\"gJYuGdkXEWWmGRLzu\",\"yjtdwc2AC4jA2RWtn\",\"66Hzqjdmzou2uczij\",\"GTKsdeEihE636Le9i\",\"2PufnQcsHsfymufX3\",\"gXTAie79kiw28tx5u\",\"waCzrhTcXFnomoKdG\",\"n2qKKxomPnb4zez5M\",\"d8qtzoLB264iP8tdY\"],\"quality\":[4,5,4,5,5,5,5,5,4,5,5,5,5,5,1,3,5,5,5,5,5,5,5,5,5,5,5,5,5,4,3,3,3,5,5,5,1,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":4.5,\"family\":[{\"_id\":\"bjSNqiz8rg7QhNC6C\",\"language\":\"cpp\"},{\"_id\":\"9KMYT5u9sww3MSzNt\",\"language\":\"javascript\"},{\"_id\":\"FmowTJecDKQMRqsHS\",\"language\":\"python3\"},{\"_id\":\"mficK9FqiZuWQRpRc\",\"language\":\"ruby\"}]}}"]