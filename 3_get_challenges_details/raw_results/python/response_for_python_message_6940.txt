a["{\"msg\":\"result\",\"id\":\"2175\",\"result\":{\"_id\":\"oFqkxLiqeSGL8xmBn\",\"author\":\"Evgeny SH\",\"authorId\":\"8PwfYqoDQFThzNtvf\",\"code\":\"def add_two_numbers(l1, l2):\\n\\t\",\"difficulty\":3.3421052631578947,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"8vSLxPCez48TmHTNS\",\"instructions\":\"The function input is two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list, in which the digits are also stored in reversed order. The class `ListNode`, building block of the linked list, is defined in the _Tests_ tab.\\n\\n### Class definition\\n```\\nclass ListNode:\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\n```\\n\\n### Examples\\n```\\nlt1 = ListNode(2)\\nlt1.add_data([4, 3])\\nlt2 = ListNode(5)\\nlt2.add_data([6, 4])\\n# print(lt1.get_data())    # [2, 4, 3]\\n# print(lt2.get_data())    # [5, 6, 4]\\n# print(342 + 465)         # 807\\nadd_two_numbers(lt1, lt2).get_data() ➞ [7, 0, 8]\\n```\\n\\n```\\nlt1 = ListNode(0)\\nlt2 = ListNode(0)\\n# print(lt1.get_data())    # [0]\\n# print(lt2.get_data())    # [0]\\n# print(0 + 0)             # 0\\nadd_two_numbers(lt1, lt2).get_data() ➞ [0]\\n```\\n\\n```\\nlt1 = ListNode(9)\\nlt1.add_data([9,9,9,9,9,9])\\nlt2 = ListNode(9)\\nlt2.add_data([9,9,9])\\n# print(lt1.get_data())    # [9, 9, 9, 9, 9, 9, 9]\\n# print(lt2.get_data())    # [9, 9, 9, 9]\\n# print(9999999 + 9999)    # 10009998\\nadd_two_numbers(lt1, lt2).get_data() ➞ [8, 9, 9, 9, 0, 0, 0, 1]\\n```\\n\\n### Notes\\n- The input linked lists can be of different lengths.\\n- The returned reference has to point to the head of the new list.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"from time import perf_counter\\nfrom random import randint\\n\\nclass ListNode:\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\n\\n    def add_data(self, lst):\\n        current = self\\n        while lst:\\n            current.next = ListNode(lst[0])\\n            current = current.next\\n            lst = lst[1:]\\n\\n    def get_data(self):\\n        res = []\\n        current = self\\n        while current:\\n            res.append(current.val)\\n            current = current.next\\n        return res\\n\\ntic = perf_counter()\\n\\nlt1 = ListNode(2)\\nlt1.add_data([4, 3])\\nlt2 = ListNode(5)\\nlt2.add_data([6, 4])\\nTest.assert_equals(add_two_numbers(lt1, lt2).get_data(), [7, 0, 8])\\n\\nlt1 = ListNode(0)\\nlt2 = ListNode(0)\\nTest.assert_equals(add_two_numbers(lt1, lt2).get_data(), [0])\\n\\nlt1 = ListNode(9)\\nlt1.add_data([9,9,9,9,9,9])\\nlt2 = ListNode(9)\\nlt2.add_data([9,9,9])\\nTest.assert_equals(add_two_numbers(lt1, lt2).get_data(), [8, 9, 9, 9, 0, 0, 0, 1])\\n\\nn_max = pow(10, 20)\\nfor _ in range(100):\\n    n1 = randint(0, n_max)\\n    n2 = randint(0, n_max)\\n    expected = list(map(int, list(str(n1 + n2))))[::-1]\\n    lst1 = list(map(int, list(str(n1))))[::-1]\\n    lst2 = list(map(int, list(str(n2))))[::-1]\\n    ll1 = ListNode(lst1[0])\\n    ll1.add_data(lst1[1:])\\n    ll2 = ListNode(lst2[0])\\n    ll2.add_data(lst2[1:])\\n    Test.assert_equals(add_two_numbers(ll1, ll2).get_data(), expected)\\n\\nprint('t_sec = {:.6f}'.format(perf_counter() - tic))\",\"language\":\"python3\",\"quality\":0,\"stats\":{\"completed\":{\"ratings\":[4,4,4,4,4,5,3,0,3,3,2,3,5,5,3,5,3,3,1,4,3,2,5,5,2,2,4,4,5,5,3,2,2,3,5,3,2,2],\"quality\":[],\"rators\":[\"8PwfYqoDQFThzNtvf\",\"xn7uGNKeAwPEkP9oA\",\"pWD2YC5s4YRCxFc2i\",\"SGhPxX5bHGL8zZqtt\",\"aEm3Wvj2rFYRL8Lrb\",\"jL4y5fTJAMBjhZmko\",\"qAby4AWXmTNeusvg3\",\"5H9MNfC4DPwxbakTf\",\"d6iEb2BDDofyeePh9\",\"eHcgvkTGsH7ZziqBo\",\"eMuCpJ2spXWkJjWNz\",\"23oi2a3vQwhtLEbSj\",\"wwMcJQRvf3X59Jyev\",\"b3Dk2LqoEgripS3Y3\",\"iojEnnY9FsMfYzp6f\",\"g2h22xXQEA87Td3sF\",\"s5M5RvgqR9BhB9JoC\",\"2PufnQcsHsfymufX3\",\"XHShZ3WMPgGEA2vkR\",\"yjtdwc2AC4jA2RWtn\",\"8sNv5PTHa7XQ8bNqR\",\"DpqiRAm2yo3W2x4HX\",\"J3upzLHuEwXH7Z2hx\",\"sFMXNMFryYLjHsjYj\",\"iS5BrkGLzJyPK7nKt\",\"J23RcmzbdtBbPCTjT\",\"r3GNSq3oReDjMQrhL\",\"JKb5rhL6DKcCAypF9\",\"QxWgwpF6RofdzFXgi\",\"gJYuGdkXEWWmGRLzu\",\"9pqtNWrsTJdZcRbEZ\",\"K7TaCiYwJpvMbuoA5\",\"N4BsXTuxkKMdGkT2u\"],\"total\":34},\"flags\":0},\"summary\":\"The function input is two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list, in which the digits are also stored in reversed order. The class ListNode, building block of the linked list, is defined in the\",\"tags\":[\"classes\",\"data_structures\",\"loops\",\"numbers\"],\"timestamp\":{\"$date\":1606059978455},\"title\":\"Add Two Numbers\",\"family\":[{\"_id\":\"oFqkxLiqeSGL8xmBn\",\"language\":\"python3\"}]}}"]