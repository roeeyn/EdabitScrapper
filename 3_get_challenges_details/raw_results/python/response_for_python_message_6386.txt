a["{\"msg\":\"result\",\"id\":\"1902\",\"result\":{\"_id\":\"5h5uAmaAWY3jSHA7k\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"def landscape_type(lst):\\n\\t\",\"difficulty\":2.64,\"familyId\":\"7pwm7RpBgEb7Ao2z9\",\"instructions\":\"A **mountain** is a list with **exactly one peak**.\\n\\n- All numbers to the left of the **peak** are increasing.\\n- All numbers to the right of the **peak** are decreasing.\\n- The peak CANNOT be on the boundary.\\n\\nA **valley** is a list with **exactly one trough**.\\n\\n- All numbers to the left of the **trough** are decreasing.\\n- All numbers to the right of the **trough** are increasing.\\n- The trough CANNOT be on the boundary.\\n\\nSome examples of **mountains** and **valleys**:\\n\\n```\\nMountain A:  [1, 3, 5, 4, 3, 2]   # 5 is the peak\\nMountain B:  [-1, 0, -1]   # 0 is the peak\\nMountain B:  [-1, -1, 0, -1, -1]   # 0 is the peak (plateau on both sides is okay)\\n\\nValley A: [10, 9, 8, 7, 2, 3, 4, 5]   # 2 is the trough\\nValley B: [350, 100, 200, 400, 700]  # 100 is the trough\\n```\\n\\nNeither **mountains** nor **valleys**:\\n\\n```\\nLandscape A: [1, 2, 3, 2, 4, 1]  # 2 peaks (3, 4), not 1\\nLandscape B: [5, 4, 3, 2, 1]  # Peak cannot be a boundary element\\nLandscape B: [0, -1, -1, 0, -1, -1]  # 2 peaks (0)\\n```\\n\\nBased on the rules above, write a function that takes in a list and returns either `\\\"mountain\\\"`, `\\\"valley\\\"`, or `\\\"neither\\\"`.\\n\\n### Examples\\n```\\nlandscape_type([3, 4, 5, 4, 3]) ➞ \\\"mountain\\\"\\n\\nlandscape_type([9, 7, 3, 1, 2, 4]) ➞ \\\"valley\\\"\\n\\nlandscape_type([9, 8, 9]) ➞ \\\"valley\\\"\\n\\nlandscape_type([9, 8, 9, 8]) ➞ \\\"neither\\\"\\n```\\n\\n### Notes\\n- A **peak** is not exactly the same as the **max** of a list. The **max** is a unique number, but a list may have multiple peaks. However, if there exists only one peak in a list, then it is true that the peak = max.\\n- See comments for a hint.\",\"lab\":\"Test.assert_equals(landscape_type([3, 4, 5, 4, 3]), \\\"mountain\\\")\\nTest.assert_equals(landscape_type([9, 7, 3, 1, 2, 4]), \\\"valley\\\")\\nTest.assert_equals(landscape_type([9, 8, 9]), \\\"valley\\\")\\nTest.assert_equals(landscape_type([9, 8, 9, 8]), \\\"neither\\\", '2 peaks')\\nTest.assert_equals(landscape_type([1, 3, 5, 4, 3, 2]), \\\"mountain\\\")\\nTest.assert_equals(landscape_type([-1, 0, -1]), \\\"mountain\\\")\\nTest.assert_equals(landscape_type([10, 9, 8, 7, 2, 3, 4, 5]), \\\"valley\\\")\\nTest.assert_equals(landscape_type([350, 100, 200, 400, 700]), \\\"valley\\\")\\nTest.assert_equals(landscape_type([-1, -1, 0, -1, -1]), \\\"mountain\\\")\\nTest.assert_equals(landscape_type([0, -1, -1, 0, -1, -1]), \\\"neither\\\", '2 peaks + boundary')\\nTest.assert_equals(landscape_type([1, 2, 3, 2, 4, 1]), \\\"neither\\\", '2 peaks')\\nTest.assert_equals(landscape_type([5, 4, 3, 2, 1]), \\\"neither\\\", 'boundary')\\nTest.assert_equals(landscape_type([1, 2, 3, 4]), \\\"neither\\\", 'boundary')\",\"language\":\"python3\",\"summary\":\"A mountain is a list with exactly one peak.\\n\\nAll numbers to the left of the peak are increasing.\\nAll numbers to the right of the peak are decreasing.\\nThe peak CANNOT be on the boundary.\\n\\nA valley is a list with exactly one trough.\\n\\nAll numbers to the left of the trough are decreasing.\\nAll numbers to the right of the trough are increasing.\\nThe trough CANNOT be \",\"tags\":[\"arrays\",\"functional_programming\",\"higher_order_functions\"],\"timestamp\":{\"$date\":1553207633422},\"title\":\"Mountains or Valleys\",\"stats\":{\"completed\":{\"total\":136,\"ratings\":[2,2,2,2,2,2,2,2,2,2,2,3,3,2,2,3,3,3,2,1,3,3,2,2,2,4,3,3,3,3,4,4,3,2,2,2,2,4,3,3,2,2,2,3,3,3,3,3,2,3,3,3,1,3,4,2,3,4,0,4,4,2,4,3,4,3,3,3,1,3,2,4,1,3,3,4,2,2,3,2,3,3,2,2,5,2,4,3,3,2,4,4,0,3,3,3,5,2,0,3,4,3,5,3,2,1,3,3,2,3,4,4,3,4,2,4,0,3,2,1,2,2,2,2,0],\"rators\":[\"BkPgkDQGHm66X4Qai\",\"yZvzB3qFb8pkHy4dg\",\"8JyqsSbN2FJXPr3cw\",\"Jqk2uJZZxEv5wZFze\",\"QgdwHjy4x6MCPwfh9\",\"gb9rvGus2Jv7bjZSs\",\"tAF9Gf6PiGogbZuWs\",\"T3ZAuoMrJjvZwN55B\",\"PFjMZGHNAPTkgd7tq\",\"nfXGHENb5md7m355s\",\"jHrtWDGBhkbuWa7fG\",\"jYJ26SiLKBu5GRumq\",\"A6mGc5Tt6Kimkd7cX\",\"s5M5RvgqR9BhB9JoC\",\"2m2joa99MiCoSDD2T\",\"2fxapKr8XGdNeaKi2\",\"ekvdWQoiFkX5cQbk9\",\"2innwjWqxJHo4eRGh\",\"Yp7uvStL97cC9fKkY\",\"PytNZK9mNiRiZxPrm\",\"C4QntmkYtB89GNtpd\",\"WLFPvm65aHfgwQy7N\",\"aCNWav8S8Try9RkC6\",\"cSMKd6Yq8Pyq8TvWR\",\"DEMZvkgty7S2teDRA\",\"JKb5rhL6DKcCAypF9\",\"BByKDngfPvW6w4m7d\",\"aEm3Wvj2rFYRL8Lrb\",\"8PwfYqoDQFThzNtvf\",\"SGhPxX5bHGL8zZqtt\",\"pQKacoMccp6HYmWZ8\",\"AJwBauGHyrbqgDYce\",\"SuJeLnhfR3smGu3WZ\",\"WaXbc2Sjt5s2ffgBX\",\"psTwY94arhgunkRw4\",\"ftHKkYbL2GGNYscuc\",\"EjbDDFRECrzQDkzrX\",\"pAC5jpwEjjvjevyiH\",\"pNvH75WKPPh9rGnfL\",\"hrzGaJc9KZqgjAvew\",\"kHKearqf76exc3kX2\",\"mDWNyaaQ9hvPCRzSd\",\"bDpmwo4vm9jHeZAPk\",\"vuwheqp25x7RkBHXn\",\"qE2viwrEkeM95f3Ts\",\"Phd2FdPjo9BhBfvKh\",\"Lw8oRc5SERsuntXMo\",\"AasGs8AeX9Lcb9xJn\",\"cKLLsRimYrfKwPhw7\",\"pHpGCimfadYznq5Wb\",\"WKsvry6M74GDrtqHQ\",\"s4zPi3rSJrG5ruYv7\",\"3c9iCs4DiWNpChoZf\",\"6E8GoWCrHpDvHZjWG\",\"5zBmcs43Gc7jkoTEc\",\"aP7JkkYer28YWrPvC\",\"XEdKC996fR3482H7v\",\"ywk3XGvcmpTgRxwZa\",\"9qdwnisj554famEPb\",\"wPxeazAYct9gG2eRM\",\"eXW8reZCCZHQzJjQi\",\"DwetpbChQM4r6Gwah\",\"YRstQuthRkFeBiXug\",\"tZnAkGkxNtBoS49R2\",\"23oi2a3vQwhtLEbSj\",\"3Zceb8GudqAG3onG3\",\"fznzd3qnvtbFkkizz\",\"iDMEzTCyRm3CLFMHB\",\"KXYHpCQvmTtpbGXYg\",\"gJYuGdkXEWWmGRLzu\",\"odhwHrfwJvNxcrBCt\",\"CMuhZyDkaZXX4pvTD\",\"4BHrt3NoCQECjvFJC\",\"zT9LpkiwYjLviYYW6\",\"ZNnsMeNkdDhHjSrZb\",\"FgkYtHLxeD8pETJ8T\",\"zChStAhRfotvGC6C5\",\"MxQXA7kigYpyBS37i\",\"4RY3zj9C2t8GGefhi\",\"3pxHTZBsv7MKzFG6Y\",\"yYxPzFqBgtQ9fsyHM\",\"5dHucvf2qBYyKim7X\",\"W5TajitmCyxz87zAC\",\"bCDTKAoS4biDmQ64Y\",\"JQ5uoxA4WZgN6HyJk\",\"QkbpyExhGA8ErJWhk\",\"8sNv5PTHa7XQ8bNqR\",\"qab4tYm6vJQcpKLfi\",\"bJxaKHJqR82EWw8Su\",\"qPpQfR5KyDb5Y3EFf\",\"ya2ofFqYRC57bfbND\",\"f2BoqyCpgnmjEjLqx\",\"xn7uGNKeAwPEkP9oA\",\"S6ipW8Xzds8QDszn9\",\"Nfsj4eNFDjaFa39ga\",\"fK2ousiaKc5gvevyW\",\"a5Nd5R69uASQRLkq9\",\"KZ2xddpM2f9JRaryB\",\"zZDaXBxMzTCBhNkgL\",\"4fhjJBvLBWh6QeSih\",\"kegHGFRZRNkPyAWwm\",\"yjtdwc2AC4jA2RWtn\",\"Ecg4m7srYGgZsb4Ck\",\"XjajdyybZZbkz8o5x\",\"yTtSCvGPyYna6JuRC\",\"qYDRywWRZdswy4b6e\",\"iS5BrkGLzJyPK7nKt\",\"et4ezbyWYdtQd54X7\",\"tkdRHAExhDq8ryDJT\",\"gXTAie79kiw28tx5u\",\"BrTDhPJcACL2bsrpJ\",\"GTKsdeEihE636Le9i\",\"d8qtzoLB264iP8tdY\",\"iojEnnY9FsMfYzp6f\",\"2PufnQcsHsfymufX3\",\"H9KZi2cjt4FwH7qog\",\"6s9vXhx6eaZ5473Rr\",\"T6iBEE2jp7f7iEF2P\",\"DPi9QGLctq2y76KuE\",\"Gp6HexkcR4mHmReRB\",\"FqDaktuZYntdZCJDj\",\"aZdLGFpQDh2eB6cKd\",\"9CTEtZH7KBwk2Kx46\",\"WLBdXwQmge8FK5sT7\",\"oBcs8GLX2ZFLXQy8y\",\"n2qKKxomPnb4zez5M\"],\"quality\":[5,5,5,5,5,4,5,5,4,5]},\"tests\":{\"score\":0,\"rators\":[\"BkPgkDQGHm66X4Qai\"]},\"instructions\":{\"score\":0,\"rators\":[\"BkPgkDQGHm66X4Qai\"]},\"flags\":0},\"isHidden\":false,\"quality\":4.8,\"family\":[{\"_id\":\"Tx3ofZfz3TPzGRmgk\",\"language\":\"csharp\"},{\"_id\":\"LgfitGtQZTJBNbsCQ\",\"language\":\"javascript\"},{\"_id\":\"5h5uAmaAWY3jSHA7k\",\"language\":\"python3\"},{\"_id\":\"3AkJwLNLs2JcXCt6s\",\"language\":\"ruby\"}]}}"]