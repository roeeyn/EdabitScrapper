a["{\"msg\":\"result\",\"id\":\"2499\",\"result\":{\"_id\":\"9bTzMLzKk7AaCqJtA\",\"author\":\"Evgeny SH\",\"authorId\":\"8PwfYqoDQFThzNtvf\",\"code\":\"def msws(seed, n):\\n\\t\",\"difficulty\":5,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"vziFNuAfwND2Aeyci\",\"instructions\":\"The middle-square method is a method of generating pseudorandom numbers. In practice, it's not a good method, since its period is usually very short and it has some severe weaknesses. The defects associated with the original middle-square generator can be rectified by running the middle square with a [Weyl sequence]( https://en.wikipedia.org/wiki/Weyl_sequence), which prevents convergence to zero.\\n\\nWrite a function `msws(seed, n)` that can generate the n-th random 16-bit long number. The implementation should result in fast performance.\\n\\nAlgorithm description:\\n- raise r to the power of 2\\n- update weyl number by adding marsaglia\\n- add weyl to r\\n- drop 8 bits from the right, extract 16 bits from the right to get new random r\\n\\n```\\nmarsaglia = 362437\\nr, weyl = seed, 0\\n\\n# repeat n times to get n-th random number r:\\nr = r ** 2\\nweyl = (weyl + marsaglia) % 2 ** 32\\nr = (r + weyl) % 2 ** 32\\nr = (r // 2 ** 8) % 2 ** 16\\n```\\n\\n### Examples\\n![](https://edabit-challenges.s3.amazonaws.com/Figure-msws64.png)\\n\\n### Notes\\n- The function should be efficient to handle large `n` (be inventive).\\n- For comparison, my submitted solution takes less than a second to complete all tests.\\n- _Hint_: a compiled program can run up to 200 times faster than a mathematically identical script in the Python interpreter.\\n- The code in **Tests** makes a temporary directory that will exist only during the execution of the tests.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"import tempfile\\nimport os\\nfrom time import perf_counter\\ntic_0 = perf_counter()\\n\\nlst_test = [\\n    ((0, 1), 1415),\\n    ((512, 2), 26068),\\n    ((99991, 1000000), 51359),\\n    ((900037, 2097152), 26164),\\n    ((67777, 4194304), 24998),\\n    ((4096, 8388608), 30362),\\n    ((16033, 10000000), 41556),\\n    ((366, 11223300), 1738)\\n]\\n\\ncurr_path = os.getcwd()\\nwith tempfile.TemporaryDirectory() as tmp_dir:\\n    os.chdir(tmp_dir)\\n\\n    for idx, t in enumerate(lst_test):\\n        tic = perf_counter()\\n        Test.assert_equals(msws(*t[0]), t[1])\\n        print('Test_{} Runtime = {:.6f}'.format(idx, perf_counter() - tic))\\n\\n    os.chdir(curr_path)\\n\\nprint('\\\\nTotal Runtime = {:.6f}'.format(perf_counter() - tic_0))\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,5,5,5,5],\"rators\":[\"8PwfYqoDQFThzNtvf\",\"vTfyrr4pGddp8rbXc\",\"aEm3Wvj2rFYRL8Lrb\",\"iS5BrkGLzJyPK7nKt\"],\"total\":4,\"quality\":[]},\"flags\":0},\"summary\":\"The middle-square method is a method of generating pseudorandom numbers. In practice, it's not a good method, since its period is usually very short and it has some severe weaknesses. The defects associated with the original middle-square generator can be rectified by running the middle square with a Weyl sequence, which prevents convergence to zero.\\n\\nWrite a\",\"tags\":[\"algorithms\",\"bit_operations\",\"math\"],\"timestamp\":{\"$date\":1596413092434},\"title\":\"Middle Square Weyl Sequence PRNG\",\"quality\":0,\"family\":[{\"_id\":\"9bTzMLzKk7AaCqJtA\",\"language\":\"python3\"}]}}"]