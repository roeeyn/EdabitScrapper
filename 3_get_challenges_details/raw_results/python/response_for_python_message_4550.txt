a["{\"msg\":\"result\",\"id\":\"991\",\"result\":{\"_id\":\"TDrfRh63jMCmqzGjv\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def is_anti_list(lst1, lst2):\\n\",\"difficulty\":1.4951456310679612,\"editorId\":\"PXAcsKkssS2yLyDv2\",\"familyId\":\"ZAJ7gKuRa8vXmZACY\",\"instructions\":\"Given two lists, return whether the two lists are opposites of each other. That means both lists are comprised only from elements `a` and `b` and the occurrences of these elements are swapped between the two lists.\\n\\n### Examples\\n```\\nis_anti_list([\\\"1\\\", \\\"0\\\", \\\"0\\\", \\\"1\\\"], [\\\"0\\\", \\\"1\\\", \\\"1\\\", \\\"0\\\"]) ➞ True\\n\\nis_anti_list([\\\"apples\\\", \\\"bananas\\\", \\\"bananas\\\"], [\\\"bananas\\\", \\\"apples\\\", \\\"apples\\\"]) ➞ True\\n\\nis_anti_list([3.14, True, 3.14], [3.14, False, 3.14]) ➞ False\\n```\\n\\n### Notes\\nAll tests will include only two different elements.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(is_anti_list([\\\"1\\\", \\\"0\\\", \\\"0\\\", \\\"1\\\"], [\\\"0\\\", \\\"1\\\", \\\"1\\\", \\\"0\\\"]), True)\\nTest.assert_equals(is_anti_list([\\\"apples\\\", \\\"bananas\\\", \\\"bananas\\\"], [\\\"bananas\\\", \\\"apples\\\", \\\"apples\\\"]), True)\\nTest.assert_equals(is_anti_list([3.14, True, 3.14], [3.14, False, 3.14]), False)\\nTest.assert_equals(is_anti_list([6.28, True, 6.28], [True, False, True]), False)\\nTest.assert_equals(is_anti_list([int, str], [str, int]), True)\\nTest.assert_equals(is_anti_list([3.14, True, 3.14], [3.14, True, 3.14]), False)\\nTest.assert_equals(is_anti_list(['a', 'b', 'b', 'a'], ['b', 'b', 'a', 'a']), False)\\nTest.assert_equals(is_anti_list(['1', '2', '2', '2'], ['2', '2', '2', '1']), False)\\nTest.assert_equals(is_anti_list([121, float, float, float, 121, float], [float, 121, 121, 121, float, 121]), True)\",\"language\":\"python3\",\"quality\":4.701492537313433,\"stats\":{\"completed\":{\"ratings\":[1,1,1,1,1,1,1,0,0,1,4,3,2,2,2,2,0,0,2,0,1,2,2,1,0,1,2,2,2,2,2,1,1,3,2,2,2,1,2,4,2,2,2,0,2,1,2,2,0,1,0,1,2,0,0,1,2,1,0,1,1,2,2,3,3,1,0,2,2,0,1,2,2,2,2,2,2,2,2,2,1,2,2,1,2,2,1,2,1,2,2,2,2,1,1,1,2,2,2,2,1,2,1],\"quality\":[4,4,5,5,4,5,5,4,5,5,5,3,5,5,5,5,5,4,5,3,5,5,5,5,5,5,3,5,5,5,3,5,5,4,5,5,5,5,4,5,5,5,5,5,5,5,5,5,5,5,3,5,5,5,4,5,5,5,4,5,5,4,5,5,5,5,5],\"rators\":[\"PXAcsKkssS2yLyDv2\",\"Yp7uvStL97cC9fKkY\",\"8JyqsSbN2FJXPr3cw\",\"5HCu9Ydd86QgHDRNP\",\"YcCLwitFMAEJSnxAW\",\"wpYdeExobBFGMidA3\",\"w2HhxvSLmDhaGCAjE\",\"6huxkjQsNS3ivwJWq\",\"gb9rvGus2Jv7bjZSs\",\"J3upzLHuEwXH7Z2hx\",\"cRoHBaA7HjePc8wb2\",\"FEYpu9RWysAgW3XnP\",\"nJXgbSQozcoE8Wn4N\",\"oo77LnhNgKaNJKaWj\",\"Ecg4m7srYGgZsb4Ck\",\"s5M5RvgqR9BhB9JoC\",\"no46qNkTbNeHepe64\",\"8PwfYqoDQFThzNtvf\",\"LaYYSfLtno6a9qc4Q\",\"XoTzZDR6qDYd8PAZB\",\"qLysFYFYKWrjuCKrK\",\"9i2XnAtnTMpLkGyvv\",\"wjt5iyzrjjAxzMbdK\",\"r23nqpnuxRqQrRksA\",\"S3iFQ3yPcvH9wEzvF\",\"jopWJWdRStNBMGNXs\",\"A2JSJyNxCd7iTTFp7\",\"s8mFugvkcQwtDXypk\",\"J5T8gZqiZXFuFDTQ7\",\"YRM5Wr3P4g7AujtiM\",\"rSCfdarBPboC3amHu\",\"jCwJtCqg5kcDg7CRK\",\"8cKm6EDAjrNbL5pWF\",\"jiT28cugqR6sLujEp\",\"o4ixjQGSaYqA2JoM4\",\"7shPNLiokLBJ4DYcY\",\"geJHa8mvy64irqsgF\",\"MM3v77RDEPmCDBvE9\",\"zaNb37qavQQm6LFqe\",\"zm9yBz3sRm9jdbyhK\",\"cAP3n5NY64uoMwzRR\",\"htCCT2CY3eSikknSF\",\"zd9FLSzsGz3evKafy\",\"JS3hNM3XXkxPdg3yk\",\"kAkLAF9T5McSxXJCT\",\"eMuCpJ2spXWkJjWNz\",\"aEm3Wvj2rFYRL8Lrb\",\"buX4mCQhtXCfBjeno\",\"Jqk2uJZZxEv5wZFze\",\"HF28xZKSLM9wEuqNg\",\"gJYuGdkXEWWmGRLzu\",\"RGMbFMZXJr7DhcAJy\",\"LQxof8pGabGuWP7Gn\",\"d8qtzoLB264iP8tdY\",\"iS5BrkGLzJyPK7nKt\",\"dBzwBtRjZqB98DJeB\",\"rfyEkETeoS96QNH4e\",\"DPi9QGLctq2y76KuE\",\"QRv96jmNaYsWkxQEG\",\"vkxXy4HA5zju68Pz5\",\"oBcs8GLX2ZFLXQy8y\",\"sHjfbGQGLHE6JR6qu\",\"2QGRoQn2dRq3scu7k\",\"FgkZ2hkrJJZQdjGqZ\",\"wRttWTM59y8m5mx7x\",\"R4SjTgDnpigJYDLyL\",\"yjtdwc2AC4jA2RWtn\",\"eYfPWvZwnJQkHbSTK\",\"LWCzZ8mb8gwrRNGfq\",\"HqmxnQJM66Y57twhn\",\"5S9nX4rKsnCcnv4Cz\",\"5hQnRWiKkhgKJXNMP\",\"WdKdsgH9gXkKgCycx\",\"GGdmhAvxXhqhhibJN\",\"axdSNLZpiCDF8RS6n\",\"DEDniTrstQYGounXT\",\"YRAzEBJoLvSaiPtYx\",\"KJCDwGkoXh8qtbbKr\",\"srJ34BaybkQh3qRkM\",\"LPGPHgJc8MkvcEDBc\",\"nFbmNzMQ38TncmfQX\",\"pduNK68oazqQTtbLp\",\"Ds7L5bksw2QRHjrKL\",\"8BFSTCnoe2QggN64c\",\"yod5YhKtPqw2GfG9B\",\"2fxapKr8XGdNeaKi2\",\"p7js9trz2zk2RorCR\",\"Fk9kLwoG4Brf4KsKf\",\"qAby4AWXmTNeusvg3\",\"q6QsMYNMpPNtmyTeW\",\"pidFTrqa9PLZDQzdZ\",\"uouMMdEWBuLBWPbzr\",\"CHvzhtXnv8HTbPQ56\",\"pPpmP7xeJzGgK362R\",\"PWgzeK859suojbrRx\",\"BrTDhPJcACL2bsrpJ\",\"cR3ibTMxLyEdDFCHY\",\"jWbd7SYDzLPjc9EDh\",\"D4WwcMWZNgL6pwGRs\",\"K6MfKMytoJJuSGewP\",\"qS5Xbh5sBC28e6j7E\",\"NfMJuiBk6FN5Jc6ow\",\"iYXdNw7tKcgA3QwBX\",\"iKCnQydNKZp3KoCoP\",\"sbJcFfQjQ59Wfg4Cd\",\"sKfrD9gjCDHuqLzSk\",\"kjq3gYp4TDMCQZJsH\",\"fSQSHjW3e72MrWxbD\",\"roavRomeeDy4Po3FA\",\"iojEnnY9FsMfYzp6f\",\"tAF9Gf6PiGogbZuWs\",\"3cF6NXq3ZEwdkgSjb\",\"T6iBEE2jp7f7iEF2P\",\"XD5nmvKQchKezPXhy\",\"vjWzDJa6NQnuwA3s5\",\"BJp2WkwLWGHHB5oQW\",\"ey3CASd6Je5LEJzfB\",\"AFfw7cGg83uYk2Miy\",\"66a9xX73nmTEuKs9k\",\"Wpn95NqWxncQrwNgz\",\"GTKsdeEihE636Le9i\",\"PC3pLs36zNzpRDSuE\",\"c2q7mY39z5JPEMCaM\",\"fznzd3qnvtbFkkizz\",\"2PufnQcsHsfymufX3\",\"X4rzfxGgxx6CS7Bpz\",\"JhX7jvtpwNyxcc39m\",\"ghMkPtdFCpM6w8nax\",\"Cc2Cgj4MWXZxsTooC\",\"yr822PZmmiDDenxpB\",\"tdfY4iBvD7oh2ufnN\",\"mvJBakQ35CWAnbbEZ\",\"5XiuAqicKD4hBdu63\",\"RoGGD5cpHb4ftdLDv\",\"9Ly8afdtofp8DXzrt\",\"AasGs8AeX9Lcb9xJn\",\"MfKe55snfKsdnDejs\",\"R6YxHWAiLgKwy5YvC\",\"rrSC943cCKNG48sH4\",\"EfxwqhYdapX3dMQC2\",\"9pzFiFK3ANLjQfnr2\",\"MKT7khMBGXzA22ykf\",\"hR7GMiqGap4CzEWSy\",\"4Lwjr34ypKNQNQCar\",\"2iFe3EHEH2YdhSKrs\",\"YA7SDhpgEtsqynvNL\",\"4TmgHkn5vqyHK3sYC\",\"T6Rm8mREPMZSftzrC\",\"nc7bRhkxgKyqusYe3\",\"dYPkStFnLvAMsHSzZ\",\"dzS6WBTMHyFEag6Fp\",\"u5u2YpHXiNgzDNJdX\",\"rhS8qXRjZcpDXkwnE\",\"d9LBRxvADNBB5QJMB\",\"yAouD3PxzED8a4gap\",\"qB6KSTYC6H2TQEQY6\",\"mxX4rH5ELYkdZ2Mbw\",\"uGuS9YRXW2nj4p6zf\",\"Qyfyyw6oC4EHAndzo\",\"5QN8R22z43SrwoHDz\",\"Zyg9xAm6EuH4u3Lo5\",\"suArq5BbSy7gD6xri\",\"Wi4H6ayKsNDWWQCG5\",\"rCrbqMiaGPgHYTNxu\",\"E2hpke7mHxAWsw5t9\"],\"total\":178},\"flags\":2},\"summary\":\"Given two lists, return whether the two lists are opposites of each other. That means both lists are comprised only from elements a and b and the occurrences of these elements are swapped between the two lists.\\n\\nExamples\\nisantilist([\\\"1\\\", \\\"0\\\", \\\"0\\\", \\\"1\\\"], [\\\"0\\\", \\\"1\\\", \\\"1\\\", \\\"0\\\"]) ➞ True\\n\\nisantilist([\\\"apples\\\", \\\"bananas\\\", \\\"bananas\\\"], [\\\"bananas\\\", \\\"apples\\\", \\\"apples\\\"])\",\"tags\":[\"arrays\",\"loops\",\"validation\"],\"timestamp\":{\"$date\":1605634773267},\"title\":\"Anti Lists\",\"family\":[{\"_id\":\"ci4pyupzxrJmZydJ5\",\"language\":\"javascript\"},{\"_id\":\"TDrfRh63jMCmqzGjv\",\"language\":\"python3\"},{\"_id\":\"PzGiNoyZKCtypYGXY\",\"language\":\"ruby\"}]}}"]