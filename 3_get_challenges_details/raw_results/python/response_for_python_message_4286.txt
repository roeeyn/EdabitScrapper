a["{\"msg\":\"result\",\"id\":\"863\",\"result\":{\"_id\":\"c4WKPr4upiKx8GwJK\",\"author\":\"SyneRgy Game\",\"authorId\":\"bTDQrGjWTrpasz75L\",\"code\":\"def duplicate_nums(nums):\\n\\t\",\"difficulty\":1.4177215189873418,\"quality\":4.7,\"editorId\":\"bTDQrGjWTrpasz75L\",\"familyId\":\"qYM2W9ydYytWL5NGh\",\"instructions\":\"Given a list `nums` where each integer is between 1 and 100, return a **sorted list** containing only **duplicate numbers** from the given `nums` list.\\n\\n### Examples\\n```\\nduplicate_nums([1, 2, 3, 4, 3, 5, 6]) ➞ [3]\\n\\nduplicate_nums([81, 72, 43, 72, 81, 99, 99, 100, 12, 54]) ➞ [72, 81, 99]\\n\\nduplicate_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ None\\n```\\n\\n### Notes\\nThe given list won't contain the same number three times.\\n\\nIf there are no duplicate numbers, return None.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(duplicate_nums([1, 2, 3, 4, 3, 5, 6]), [3])\\nTest.assert_equals(duplicate_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), None)\\nTest.assert_equals(duplicate_nums([20, 30, 40, 30, 20, 40]), [20, 30, 40])\\nTest.assert_equals(duplicate_nums([100, 59, 12, 13, 54, 76, 100, 14, 12]), [12, 100])\\nTest.assert_equals(duplicate_nums([81, 72, 43, 72, 81, 99, 99, 100, 12, 54]),[72, 81, 99])\\nTest.assert_equals(duplicate_nums([11, 22, 33, 44, 55, 44, 33, 22, 11]), [11, 22, 33, 44])\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[1,1,1,1,1,1,2,1,2,3,2,2,2,2,2,2,0,2,2,1,2,2,1,1,2,2,0,1,1,2,1,0,5,1,0,1,2,2,0,2,2,2,0,0,2,0,1,1,2,1,2,2,2,2,2,2,0,0,0,1,2,0,2,2,1,1,1,2,2,2,2,2,2,0,2,1,2,2,2,2,0,0,1,2,2,2,2,2,2,3,2,0,0,2,2,1,2,1,2,1,1,1,2,2,0,2,1,0,2,2,2,1,1,1,1,1,1,2,2,1,3,2,2,3,2,0,2,1,1,2,2,1,2,1,1,2,0,2,2,1,1,1,2,2,1,1,0,1,1,1,2,0,2,0,2,1,2,2],\"quality\":[2,5,5,3,4,2,5,5,4,5,5,5,5,5,5,5,2,4,3,5,5,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,5,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,5],\"rators\":[\"bTDQrGjWTrpasz75L\",\"vy9jvpJdLv8yWeL9o\",\"aEm3Wvj2rFYRL8Lrb\",\"J3upzLHuEwXH7Z2hx\",\"w2HhxvSLmDhaGCAjE\",\"p8qqFdJ3FSk5x9z3G\",\"8PwfYqoDQFThzNtvf\",\"4Kv8CNDndbmufNLGq\",\"tAF9Gf6PiGogbZuWs\",\"gb9rvGus2Jv7bjZSs\",\"Yp7uvStL97cC9fKkY\",\"QRv96jmNaYsWkxQEG\",\"gJYuGdkXEWWmGRLzu\",\"cRoHBaA7HjePc8wb2\",\"HF28xZKSLM9wEuqNg\",\"gXTAie79kiw28tx5u\",\"FEYpu9RWysAgW3XnP\",\"DPi9QGLctq2y76KuE\",\"s5M5RvgqR9BhB9JoC\",\"8JyqsSbN2FJXPr3cw\",\"oBcs8GLX2ZFLXQy8y\",\"KJCDwGkoXh8qtbbKr\",\"yjtdwc2AC4jA2RWtn\",\"cR3ibTMxLyEdDFCHY\",\"9CoqdidjM9KbeKnHY\",\"DxxNN37iEz7b8t2nf\",\"DEDniTrstQYGounXT\",\"H4abACFDH5t8CnnyH\",\"iS5BrkGLzJyPK7nKt\",\"tpxMgkGSHwBjS95Ta\",\"spqXrjG3ZFa2j5uTR\",\"dYPkStFnLvAMsHSzZ\",\"zZDaXBxMzTCBhNkgL\",\"yTtSCvGPyYna6JuRC\",\"dj5AyG5fWP8FdsSmZ\",\"5HCu9Ydd86QgHDRNP\",\"dBzwBtRjZqB98DJeB\",\"RGMbFMZXJr7DhcAJy\",\"wRttWTM59y8m5mx7x\",\"d8qtzoLB264iP8tdY\",\"cAP3n5NY64uoMwzRR\",\"9FCeFzjPA4jrQ7oHW\",\"J5T8gZqiZXFuFDTQ7\",\"zd9FLSzsGz3evKafy\",\"kxKR2bx7DrNDPqJPz\",\"PXAcsKkssS2yLyDv2\",\"Kh3Pc2ZRusurLaMyP\",\"5XiuAqicKD4hBdu63\",\"X5MqeHyPh6cSQCXnk\",\"axdSNLZpiCDF8RS6n\",\"Lg4t6SEWgtYz4u7Cj\",\"g9FyJ8yeT9ic97Qp2\",\"PWtgkFwMyNrrvx9ZP\",\"kNrnnMxhFZztMTBAX\",\"NzbRqGWspQnWMoDrF\",\"rzX5PujzJGJK7mMCi\",\"4fjSgcqhQQZM2ZFRP\",\"rfyEkETeoS96QNH4e\",\"JS3hNM3XXkxPdg3yk\",\"6428wKHtwKkFdvBs5\",\"5hQnRWiKkhgKJXNMP\",\"sHjfbGQGLHE6JR6qu\",\"R4SjTgDnpigJYDLyL\",\"DpnYcMphntjsQ96qg\",\"eMuCpJ2spXWkJjWNz\",\"Jqk2uJZZxEv5wZFze\",\"Cybtjz3cF7RgoiqrN\",\"YRAzEBJoLvSaiPtYx\",\"8BFSTCnoe2QggN64c\",\"C2AfMipCicfD58WJ9\",\"3nied3n8KG8RSNixH\",\"BiXxBRkJYKTaECqba\",\"3pxHTZBsv7MKzFG6Y\",\"Wv2vJnEj8ywNmARoF\",\"o4ixjQGSaYqA2JoM4\",\"kL8HbSq8dcQDFuTzJ\",\"qvFdHwMHEAsdjXFEG\",\"AJexRBN9cYQmqvYu6\",\"wjc4iejpErBhxWwHo\",\"HuNF3xTBzmatyGSTm\",\"GGprTwrkjuccmrQRg\",\"utTuvGdmu2sBHWBhQ\",\"nmMiWvyJKp6nZEpve\",\"Ecg4m7srYGgZsb4Ck\",\"fSQSHjW3e72MrWxbD\",\"pduNK68oazqQTtbLp\",\"2QGRoQn2dRq3scu7k\",\"ey3CASd6Je5LEJzfB\",\"xGpqoGZ47sYLJ4ty9\",\"feAwSR6inBAjoxRMB\",\"mAGNTzpy5X9etQNZm\",\"2H7qphwdz7PPoFKgc\",\"i5iePG5GqhJJ8HEoB\",\"EfxwqhYdapX3dMQC2\",\"buX4mCQhtXCfBjeno\",\"eYfPWvZwnJQkHbSTK\",\"HqmxnQJM66Y57twhn\",\"srJ34BaybkQh3qRkM\",\"MXGuntvz3byrP6WJc\",\"GGdmhAvxXhqhhibJN\",\"DqNQn9Jsxcu5HijKE\",\"aaJWssCWfMa63XJng\",\"Fk9kLwoG4Brf4KsKf\",\"ZyrfhDTZHb8LymH5b\",\"8ZhzKvdhsdKgpf6BT\",\"5S9nX4rKsnCcnv4Cz\",\"7N6c3Xu244bnQWjBs\",\"WdKdsgH9gXkKgCycx\",\"PexKJN2gNdthuHKxZ\",\"whm4vkxLMtG9YyobP\",\"DHghRMdMFbnwMj7WW\",\"BrTDhPJcACL2bsrpJ\",\"LPGPHgJc8MkvcEDBc\",\"Ds7L5bksw2QRHjrKL\",\"nFbmNzMQ38TncmfQX\",\"HjZQR6wRLcxN5hKaf\",\"baAKFXJXw8XkACsAn\",\"Nb6LYPoQP6KJZt8mz\",\"q2tzvkrLASvSjkek9\",\"yod5YhKtPqw2GfG9B\",\"2fxapKr8XGdNeaKi2\",\"p7js9trz2zk2RorCR\",\"4RsakkyRXyYGwFxEa\",\"N2wnZXkhDH86mgjQ8\",\"CHvzhtXnv8HTbPQ56\",\"KBxTPknCRmB2b5y3i\",\"BajWtLookqBgcwmyv\",\"e7QB5tCAeoSeRCTxY\",\"q6QsMYNMpPNtmyTeW\",\"qQQ4hCQpzitmHSkjS\",\"qAby4AWXmTNeusvg3\",\"YcCLwitFMAEJSnxAW\",\"T2vhHPhRR96hRizq8\",\"sbJcFfQjQ59Wfg4Cd\",\"T6iBEE2jp7f7iEF2P\",\"9ivvGvJGvtQfigQaZ\",\"pPpmP7xeJzGgK362R\",\"iojEnnY9FsMfYzp6f\",\"3cF6NXq3ZEwdkgSjb\",\"iYXdNw7tKcgA3QwBX\",\"AFfw7cGg83uYk2Miy\",\"BJp2WkwLWGHHB5oQW\",\"vjWzDJa6NQnuwA3s5\",\"hFDbkmJkfQPwA8bgN\",\"XD5nmvKQchKezPXhy\",\"mfsaETo7uA4x5vqLD\",\"NfMJuiBk6FN5Jc6ow\",\"KACjjdKDL97rBTyEK\",\"yTAeuT4dWRkkQR6gn\",\"u5u2YpHXiNgzDNJdX\",\"66a9xX73nmTEuKs9k\",\"Wpn95NqWxncQrwNgz\",\"GTKsdeEihE636Le9i\",\"PC3pLs36zNzpRDSuE\",\"JhX7jvtpwNyxcc39m\",\"joxsWNqkSudzBYLpw\",\"Cuy7McJ5y8BkXRRk9\",\"5rX3qPFdvRQ9G7xZQ\",\"NQQzu4wyLWW9faWtK\",\"Cc2Cgj4MWXZxsTooC\",\"2HfNkb2SoqdyjKW3o\",\"yr822PZmmiDDenxpB\",\"c2q7mY39z5JPEMCaM\",\"2PufnQcsHsfymufX3\",\"tdfY4iBvD7oh2ufnN\",\"mvJBakQ35CWAnbbEZ\",\"9Ly8afdtofp8DXzrt\",\"X4rzfxGgxx6CS7Bpz\",\"M2gFMJkocQSY6bsFR\",\"K6MfKMytoJJuSGewP\",\"AasGs8AeX9Lcb9xJn\",\"ghMkPtdFCpM6w8nax\",\"RoGGD5cpHb4ftdLDv\",\"eHcgvkTGsH7ZziqBo\",\"R6YxHWAiLgKwy5YvC\",\"rrSC943cCKNG48sH4\",\"sKfrD9gjCDHuqLzSk\",\"jWbd7SYDzLPjc9EDh\",\"MKT7khMBGXzA22ykf\",\"9pzFiFK3ANLjQfnr2\",\"2FCRyJqwqzFTKSTgJ\",\"4Lwjr34ypKNQNQCar\",\"qzXAMXsHZGT8o5hTA\",\"vx9wccR68iPfZGJZp\",\"A7G8WgwhjsEDTB4DA\",\"JiSpvq6C7azQEmENc\",\"hR7GMiqGap4CzEWSy\",\"2iFe3EHEH2YdhSKrs\",\"4RY3zj9C2t8GGefhi\",\"nc7bRhkxgKyqusYe3\",\"796v8eRqahP6wpLdL\",\"9gJsF5apWJGWZJprn\",\"4TmgHkn5vqyHK3sYC\",\"StNu7DPyTgEStZsMY\",\"YA7SDhpgEtsqynvNL\",\"T6Rm8mREPMZSftzrC\",\"jkbavR2ATFJcpmo8M\",\"hiGXnxds6zo7XsfTw\",\"EHtTFoDbt722AH667\",\"d9LBRxvADNBB5QJMB\",\"dzS6WBTMHyFEag6Fp\",\"AQSqD9oNv2uPfxZCR\",\"uGuS9YRXW2nj4p6zf\",\"5s4qhuRJijYaDNXva\",\"hpT9yYe5R45poHrYR\",\"rhS8qXRjZcpDXkwnE\",\"AMpQSjKsRqhCDyS2j\",\"yAouD3PxzED8a4gap\",\"kQH5b8MXJunh84Czq\",\"mw9464S5dnenqzvpm\",\"Qyfyyw6oC4EHAndzo\",\"uK58g2EXxqxTaB2iA\",\"HhiYEyjDdbAfCxFWe\",\"rCrbqMiaGPgHYTNxu\",\"B4y8aoyXJtskYPFEL\",\"qB6KSTYC6H2TQEQY6\",\"mxX4rH5ELYkdZ2Mbw\",\"Nsnt7WJuREHjzZmjE\",\"EC3vxzsccoFjfhf86\",\"5QN8R22z43SrwoHDz\",\"8uiLiJcmWxWe6qw65\",\"FRN2W8RYpJ6GPhgRy\",\"vCeeMuYDbz3MB4vsk\",\"vAbK8sCfKyFC78HYg\",\"Wi4H6ayKsNDWWQCG5\",\"3cQkJx4a5pANhJkgP\",\"rDgKHd6ZSSpboiAj7\",\"ctbThYbufFCYbRK4f\",\"ruzwBPphPDRgLXdnP\",\"RfbjShbg8jmhyNtJh\",\"E2hpke7mHxAWsw5t9\",\"FT2wBacm3JxrYmZDW\",\"WQubx7DAkG6WZE8FA\"],\"total\":255},\"flags\":0},\"summary\":\"Given a list nums where each integer is between 1 and 100, return another list containing only duplicate numbers from the given nums list.\\n\\nExamples\\nduplicate_nums([1, 2, 3, 4, 3, 5, 6]) ➞ [3]\\n\\nduplicate_nums([81, 72, 43, 72, 81, 99, 99, 100, 12, 54]) ➞ [72, 81, 99]\\n\\nduplicate_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ None\\n\\nNotes\\nThe given list won't contain the\",\"tags\":[\"algorithms\",\"arrays\",\"loops\"],\"timestamp\":{\"$date\":1601397381183},\"title\":\"Return Duplicate Numbers\",\"family\":[{\"_id\":\"WYNfvyd5NRfAgtcqZ\",\"language\":\"javascript\"},{\"_id\":\"c4WKPr4upiKx8GwJK\",\"language\":\"python3\"},{\"_id\":\"Z3TbYBz7QiJ75ABvr\",\"language\":\"ruby\"}]}}"]