a["{\"msg\":\"result\",\"id\":\"1823\",\"result\":{\"_id\":\"jYNstx2QfB5MjGrox\",\"author\":\"Mubashir Hassan \",\"authorId\":\"T6iBEE2jp7f7iEF2P\",\"code\":\"def simple_increment(n, iterations, step):\\n\\t\",\"difficulty\":2.533333333333333,\"familyId\":\"qJRmWcK7qSGJjWdew\",\"instructions\":\"Create a function that takes three integer parameters: a number `n`,  number of `iterations`, and `step`. You have to implement an algorithm, which increases the given number as explained below:\\n\\n```\\nn = 143726, iterations = 16, step = 3\\nsimpleIncrement(n, iterations, step) ➞ 243826\\n```\\n\\n**Step 1:** We _start from the first digit_ and increment the 4th digit because the step is 3.\\n\\n```\\ns - Starting Position\\n* - current increased position\\n\\nPosition: s - - - - - ➞ - - - * - -\\nNumber:   1 4 3 7 2 6 ➞ 1 4 3 8 2 6\\n```\\n\\n**Step 2:** Repeat step #1 with the updated starting position.\\n\\n```\\ns - Starting Position\\n* - current increased position\\n\\nPosition: - - - s - - ➞ * - - - - -\\nNumber:   1 4 3 8 2 6 ➞ 2 4 3 8 2 6\\n```\\n\\n- Remember, if the number **overflows**, the current position gets **shifted to the right**.\\n\\n```\\n9 9 9 ➞ - - p   // before overflow position will be at 3rd digit\\n1 0 0 0 ➞ - - - p   // after overflow position will be at 4th digit\\n```\\n\\n- More examples on overflow:\\n\\n```\\n9 ➞ 10\\n799 ➞ 800 (If you increased the second 9) or 809 (if you increased the first 9)\\n99000 ➞ 100000 (If you increased the second 9) or 109000 (if you increased the first 9)\\n```\\n\\n### Examples\\n```\\nsimple_increment(1673, 2, 16) ➞ 3673\\n\\nsimple_increment(99, 99, 99) ➞ 198\\n\\nsimple_increment(99, 99, 98) ➞ 4734\\n```\\n\\n### Notes\\nN/A\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(simple_increment(1673, 2, 16), 3673)\\nTest.assert_equals(simple_increment(99, 99, 99), 198)\\nTest.assert_equals(simple_increment(99, 99, 98), 4734)\\nTest.assert_equals(simple_increment(5, 156, 15), 20996)\\nTest.assert_equals(simple_increment(1, 1, 1), 2)\\nTest.assert_equals(simple_increment(1, 10, 1), 20)\\nTest.assert_equals(simple_increment(1, 10, 10), 11)\\nTest.assert_equals(simple_increment(50, 10, 0), 150)\\nTest.assert_equals(simple_increment(123, 123, 123), 300090)\\nTest.assert_equals(simple_increment(12523, 122, 433), 6535854)\\nTest.assert_equals(simple_increment(9, 9000, 100), 1854892466545716)\\n# Mubashir\",\"language\":\"python3\",\"quality\":0,\"summary\":\"Create a function that takes three integer parameters: a number n,  number of iterations, and step. You have to implement an algorithm, which increases the given number as explained below:\\n\\nn = 143726, iterations = 16, step = 3\\nsimpleIncrement(n, iterations, step) ➞ 243826\\n\\nStep 1: We start from the first digit and increment the 4th digit because the step is 3\",\"tags\":[\"algorithms\",\"logic\",\"loops\",\"numbers\"],\"timestamp\":{\"$date\":1611124536151},\"title\":\"Not a Simple Increment\",\"stats\":{\"completed\":{\"total\":26,\"ratings\":[2,2,2,2,2,1,3,2,1,3,4,2,3,4,3,1,3,4,4,4,4,2,1,0,3,4,2,4,1,3],\"quality\":[],\"rators\":[\"T6iBEE2jp7f7iEF2P\",\"8PwfYqoDQFThzNtvf\",\"yjtdwc2AC4jA2RWtn\",\"Jqk2uJZZxEv5wZFze\",\"n2BRY9X8899dcG8Bw\",\"p8qqFdJ3FSk5x9z3G\",\"gXTAie79kiw28tx5u\",\"iS5BrkGLzJyPK7nKt\",\"Yp7uvStL97cC9fKkY\",\"xn7uGNKeAwPEkP9oA\",\"8sNv5PTHa7XQ8bNqR\",\"iojEnnY9FsMfYzp6f\",\"AasGs8AeX9Lcb9xJn\",\"bJaPCBx63YxdJAuTS\",\"2PufnQcsHsfymufX3\",\"9X4GsrriXYhLfuLpC\",\"GTKsdeEihE636Le9i\",\"H9KZi2cjt4FwH7qog\",\"HqmxnQJM66Y57twhn\",\"fznzd3qnvtbFkkizz\",\"XHShZ3WMPgGEA2vkR\",\"oBcs8GLX2ZFLXQy8y\",\"nkL2knkcNaiHCerW2\",\"aEm3Wvj2rFYRL8Lrb\",\"k9Ag4RX7F5eTpTRrq\"]},\"flags\":0},\"editorId\":\"T6iBEE2jp7f7iEF2P\",\"family\":[{\"_id\":\"z4qD459LpzQjSQzY6\",\"language\":\"cpp\"},{\"_id\":\"XtdTxLB47nD2Cq5jk\",\"language\":\"javascript\"},{\"_id\":\"jYNstx2QfB5MjGrox\",\"language\":\"python3\"},{\"_id\":\"bXsdMyJQGcTht7jDz\",\"language\":\"ruby\"}]}}"]