a["{\"msg\":\"result\",\"id\":\"1949\",\"result\":{\"_id\":\"iHdZmimb82rAvEDkG\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"def bitwise_index(lst):\\n\\t\",\"difficulty\":2.6486486486486487,\"familyId\":\"M3u5XXoqkYndqncWe\",\"instructions\":\"Write a function that returns the largest even integer in a list with its corresponding index and the parity of that index, but determining the parity of that index is **limited to not using** the **modulo operator** `%`.\\n\\n### Output Structure:\\n\\nYou have to return a Dictionary.\\n\\n```\\n{\\\"@odd|even index \\\" + index_of_largest: largest_integer}\\n```\\n\\n### Examples\\n```\\nbitwise_index([107, 19, 36, -18, -78, 24, 97]) ➞ {\\\"@even index 2\\\": 36}\\n\\nbitwise_index([31, 7, 2, 13, 7, 9, 10, 13]) ➞ {\\\"@even index 6\\\": 10}\\n\\nbitwise_index([4, 4, 4, 4, 4, 4]) ➞ {\\\"@even index 0\\\": 4}\\n\\nbitwise_index([-31, -7, -13, -7, -9, -13]) ➞ \\\"No even integer found!\\\"\\n```\\n\\n### Notes\\n- The use of `index()` and `max()` are restricted.\\n- If there are no even integers, return `\\\"No even integer found!\\\"`.\\n- The set of limitations imposed on this challenge dictates the level of difficulty.\\n- Another version of this challenge that deals with recursion can be [found here](https://edabit.com/challenge/pMbki4f2BA8R5vbXs).\",\"isHidden\":false,\"lab\":\"from inspect import getsource as src\\nfrom re import findall, search, M\\n\\ndef no_recur(fn):\\n  try:\\n    s, n = src(fn), fn.__name__\\n    if n == '<lambda>': n = 'bitwise_index'\\n    return len(findall(n, s, M)) == 1\\n  except OSError: return True\\n\\ndef no_min_mod_index(fn):\\n  try: return not search(r'%|max|.+\\\\.index(.+)', src(fn), M)\\n  except OSError: return True\\n\\nTest.assert_not_equals(no_recur(bitwise_index), False, \\\"A recursive solution isn't allowed!\\\")\\nTest.assert_not_equals(no_min_mod_index(bitwise_index), False,\\n    'The use of modulo operator (%), built-in functions index() and max() are prohibited!')\\n\\nnum_vector, res_vector = [\\n    [107, 19, 36, -18, -78, 24, 97],\\n    [31, 7, 2, 13, 7, 9, 10, 13],\\n    [4, 4, 4, 4, 4, 4],\\n    [-31, -7, -13, -7, -9, -13],\\n    [1, 128, 9, 56, -1, 7, 18, 49],\\n    [63, 12, 77, 112, 75, 92],\\n    [6, 6, 6, 6, 6, 6],\\n    [1, 129, 91, 5, -1, 7, 11, 9],\\n    [-84, -42, 0, -2, -94, -8]], [\\n    {\\\"@even index 2\\\": 36},\\n    {\\\"@even index 6\\\": 10},\\n    {\\\"@even index 0\\\": 4},\\n    \\\"No even integer found!\\\",\\n    {\\\"@odd index 1\\\": 128},\\n    {\\\"@odd index 3\\\": 112},\\n    {\\\"@even index 0\\\": 6},\\n    \\\"No even integer found!\\\",\\n    {\\\"@even index 2\\\": 0}]\\nfor z, l in enumerate(num_vector): Test.assert_equals(bitwise_index(l), res_vector[z])\",\"language\":\"python3\",\"summary\":\"Write a function that returns the largest even integer in a list with its corresponding index and the parity of that index, but determining the parity of that index is limited to not using the modulo operator %.\\n\\nOutput Structure:\\n\\nYou have to return a Dictionary.\\n\\n{\\\"@odd|even index \\\" + indexoflargest: largest_integer}\\n\\nExamples\\nbitwise_index([107, 19, 36, -18\",\"tags\":[\"arrays\",\"bit_operations\",\"logic\",\"loops\"],\"timestamp\":{\"$date\":1595960911594},\"title\":\"Index Parity of Largest Even\",\"stats\":{\"completed\":{\"total\":44,\"ratings\":[4,4,4,4,4,4,5,0,2,2,2,4,5,2,1,4,4,2,3,2,2,4,2,1,3,2,2,2,1,2,3,3,3,4,2,0,0],\"rators\":[\"a777e8chPvJkY3tKa\",\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\",\"foytX6kH9wiSYqLtT\",\"ya2ofFqYRC57bfbND\",\"ZNnsMeNkdDhHjSrZb\",\"fznzd3qnvtbFkkizz\",\"5dHucvf2qBYyKim7X\",\"gb9rvGus2Jv7bjZSs\",\"4fhjJBvLBWh6QeSih\",\"rkk9SpEPAeFjEzjgK\",\"aCNWav8S8Try9RkC6\",\"GGprTwrkjuccmrQRg\",\"4sHkH3t9CJYhbDwjM\",\"s5M5RvgqR9BhB9JoC\",\"3rCGowf2GK7AZTdFu\",\"tAF9Gf6PiGogbZuWs\",\"DTKtcn5HrYxtcBza3\",\"bCFecqKyXTCnGgPSc\",\"xn7uGNKeAwPEkP9oA\",\"J9DAAbBSYYJyM5sPN\",\"Ecg4m7srYGgZsb4Ck\",\"BfwbCTRtW4wG2bsnH\",\"HF28xZKSLM9wEuqNg\",\"8sNv5PTHa7XQ8bNqR\",\"p8qqFdJ3FSk5x9z3G\",\"DPi9QGLctq2y76KuE\",\"eHcgvkTGsH7ZziqBo\",\"qAby4AWXmTNeusvg3\",\"iojEnnY9FsMfYzp6f\",\"gXTAie79kiw28tx5u\",\"gJYuGdkXEWWmGRLzu\",\"J3upzLHuEwXH7Z2hx\",\"QRv96jmNaYsWkxQEG\",\"yjtdwc2AC4jA2RWtn\",\"AasGs8AeX9Lcb9xJn\",\"GTKsdeEihE636Le9i\",\"2PufnQcsHsfymufX3\",\"MpfytGFYF77emJ3cT\",\"T6iBEE2jp7f7iEF2P\",\"n2qKKxomPnb4zez5M\"],\"quality\":[5,5,2,5,4,4,5,5,4]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":4.333333333333333,\"family\":[{\"_id\":\"rwWaie7W2jmHQFfJA\",\"language\":\"javascript\"},{\"_id\":\"iHdZmimb82rAvEDkG\",\"language\":\"python3\"}]}}"]