a["{\"msg\":\"result\",\"id\":\"1950\",\"result\":{\"_id\":\"JmyD5D4KnhzmMPEKz\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"def constraint(txt):\\n\\t\",\"difficulty\":2.723076923076923,\"familyId\":\"uzhLgPGmAbXBt6BSq\",\"instructions\":\"In this challenge, establish which type of constrained writing is applied to a sentence. There are four possible types to detect:\\n\\n- **Pangram**: the sentence contains all the 26 letters of the English alphabet.\\n- **Heterogram**: the sentence doesn't have multiple instances of its letters (as to say that every letter is unique).\\n- **Tautogram**: every word of the sentence starts with the same letter.\\n- **Transgram**: all words of the sentence share at least a common letter.\\n\\nGiven a string `txt` being a sentence, implement a function that returns the strings `\\\"Pangram\\\"`, `\\\"Heterogram\\\"`, `\\\"Tautogram\\\"` or `\\\"Transgram\\\"` accordingly to the above definitions and following the same given order to establish the result. If no constrained writing is detected, return the string `\\\"Sentence\\\"`.\\n\\n### Examples\\n```\\nconstraint(\\\"The quick brown fox jumps over the lazy dog.\\\") ➞ \\\"Pangram\\\"\\n# The sentence contains every letter of the alphabet.\\n# Repetitions are not considered.\\n\\nconstraint(\\\"The big dwarf only jumps.\\\") ➞ \\\"Heterogram\\\"\\n# The sentence has only unique characters.\\n\\nconstraint(\\\"Todd told Tom to take the tiny turtles.\\\") ➞ \\\"Tautogram\\\"\\n# Every word starts with the letter \\\"t\\\".\\n\\nconstraint(\\\"A cannibal alligator has attacked an unaware vegan alligator.\\\") ➞ \\\"Transgram\\\"\\n# Every word contains the letter \\\"a\\\".\\n\\nconstraint(\\\"The unbearable lightness of coding...\\\") ➞ \\\"Sentence\\\"\\n# No constraint is applied to the sentence.\\n```\\n\\n### Notes\\n- Remember to respect the given order to establish the result: a **Pangram** has to be detected before a **Heterogram**, and a **Tautogram** has to be detected before a **Transgram**.\\n- Sentences will contain letters (either uppercase or lowercase) and punctuation. Your function must be case-insensitive.\",\"isHidden\":false,\"lab\":\"Test.assert_equals(constraint(\\\"The quick brown fox jumps over the lazy dog.\\\"), \\\"Pangram\\\")\\nTest.assert_equals(constraint(\\\"The big dwarf only jumps.\\\"), \\\"Heterogram\\\")\\nTest.assert_equals(constraint(\\\"Todd told Tom to take the tiny turtles.\\\"), \\\"Tautogram\\\")\\nTest.assert_equals(constraint(\\\"A cannibal alligator has attacked an unaware vegan alligator.\\\"), \\\"Transgram\\\")\\nTest.assert_equals(constraint(\\\"The unbearable lightness of coding...\\\"), \\\"Sentence\\\")\\nTest.assert_equals(constraint(\\\"Pack my box with five dozen liquor jugs.\\\"), \\\"Pangram\\\")\\nTest.assert_equals(constraint(\\\"The dog is crazy.\\\"), \\\"Heterogram\\\")\\nTest.assert_equals(constraint(\\\"It is indeed included instantly!\\\"), \\\"Tautogram\\\")\\nTest.assert_equals(constraint(\\\"Those loops could work without constants sometimes.\\\"), \\\"Transgram\\\")\\nTest.assert_equals(constraint(\\\"Sphinx of black quartz, judge my vow.\\\"), \\\"Pangram\\\")\\nTest.assert_equals(constraint(\\\"Mind the gap!\\\"), \\\"Heterogram\\\")\\nTest.assert_equals(constraint(\\\"Put some more tobacco inside it next time, it's just too strong!\\\"), \\\"Sentence\\\")\\nTest.assert_equals(constraint(\\\"Thursdays: the time to teach them the truth.\\\"), \\\"Tautogram\\\")\\nTest.assert_equals(constraint(\\\"Would you mind pass me that axe, Eugene?\\\"), \\\"Sentence\\\")\\nTest.assert_equals(constraint(\\\"AbCdEfGhIjKlMnOpQrStUvWxYz\\\"), \\\"Pangram\\\")\",\"language\":\"python3\",\"summary\":\"In this challenge, establish which type of constrained writing is applied to a sentence. There are four possible types to detect:\\n\\nPangram: the sentence contains all the 26 letters of the English alphabet.\\nHeterogram: the sentence doesn't have multiple instances of its letters (as to say that every letter is unique).\\nTautogram: every word of the sentence start\",\"tags\":[\"strings\",\"validation\",\"logic\"],\"timestamp\":{\"$date\":1581457294413},\"title\":\"Constrained Writing\",\"stats\":{\"completed\":{\"total\":77,\"ratings\":[2,2,2,2,2,1,4,3,3,2,2,2,3,2,3,3,3,2,4,3,4,4,1,4,4,3,4,3,4,2,2,4,2,2,4,2,1,4,4,1,4,4,3,3,0,2,2,2,3,2,4,3,2,4,3,3,4,3,4,3,2,4,0,3,1],\"rators\":[\"gb9rvGus2Jv7bjZSs\",\"aCNWav8S8Try9RkC6\",\"EjbDDFRECrzQDkzrX\",\"4fctAnxyFRB8stPRQ\",\"Jqk2uJZZxEv5wZFze\",\"Z85ajWfZ4jDPkbvR4\",\"s5M5RvgqR9BhB9JoC\",\"tAF9Gf6PiGogbZuWs\",\"vgTvCCxgvbCTDvaRT\",\"pmgFEciNrd3ES9tuu\",\"C4QntmkYtB89GNtpd\",\"8JyqsSbN2FJXPr3cw\",\"AJwBauGHyrbqgDYce\",\"8PwfYqoDQFThzNtvf\",\"yZvzB3qFb8pkHy4dg\",\"WLFPvm65aHfgwQy7N\",\"JKb5rhL6DKcCAypF9\",\"aEm3Wvj2rFYRL8Lrb\",\"mDWNyaaQ9hvPCRzSd\",\"n2BRY9X8899dcG8Bw\",\"Yp7uvStL97cC9fKkY\",\"SGhPxX5bHGL8zZqtt\",\"AasGs8AeX9Lcb9xJn\",\"daFMtxYmCNMQ9HNsJ\",\"YRstQuthRkFeBiXug\",\"Cc2Cgj4MWXZxsTooC\",\"fznzd3qnvtbFkkizz\",\"55RQznnuTGpsj3EXd\",\"3Zceb8GudqAG3onG3\",\"gJYuGdkXEWWmGRLzu\",\"ZNnsMeNkdDhHjSrZb\",\"S9hHPiybdTKyuELsn\",\"bJaPCBx63YxdJAuTS\",\"a777e8chPvJkY3tKa\",\"W5TajitmCyxz87zAC\",\"DQskEvAv5KiJDPtGF\",\"5dHucvf2qBYyKim7X\",\"YLtspA8ec6ntcoMMf\",\"LjoNTyGEMfBpMHHus\",\"qPpQfR5KyDb5Y3EFf\",\"xn7uGNKeAwPEkP9oA\",\"S6ipW8Xzds8QDszn9\",\"cykCKNJcqFBxz4T8s\",\"8sNv5PTHa7XQ8bNqR\",\"Ecg4m7srYGgZsb4Ck\",\"cxABox46qWvJRyidE\",\"zZDaXBxMzTCBhNkgL\",\"4u3cfCfCXYrdJCZzt\",\"DNACg4rcgZsPtYGZ8\",\"RT2F5THkSKcdmPgBb\",\"yjtdwc2AC4jA2RWtn\",\"P7NmFbCJ5offXMRvB\",\"p8qqFdJ3FSk5x9z3G\",\"4fhjJBvLBWh6QeSih\",\"HF28xZKSLM9wEuqNg\",\"XjajdyybZZbkz8o5x\",\"J3upzLHuEwXH7Z2hx\",\"tkdRHAExhDq8ryDJT\",\"iS5BrkGLzJyPK7nKt\",\"hpZARXGLAJt2EDmcf\",\"aFYzioHvZPvPaunsg\",\"iojEnnY9FsMfYzp6f\",\"GTKsdeEihE636Le9i\",\"2PufnQcsHsfymufX3\",\"2iFe3EHEH2YdhSKrs\",\"6s9vXhx6eaZ5473Rr\",\"T6iBEE2jp7f7iEF2P\",\"DPi9QGLctq2y76KuE\",\"yTtSCvGPyYna6JuRC\"],\"quality\":[4,5,5,5,5,4,5,4,4]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"quality\":4.555555555555555,\"family\":[{\"_id\":\"g7cbJYaRkq5P36Ewy\",\"language\":\"cpp\"},{\"_id\":\"yeevEvr7SKTtbekKm\",\"language\":\"javascript\"},{\"_id\":\"JmyD5D4KnhzmMPEKz\",\"language\":\"python3\"},{\"_id\":\"kR8zocQMyQwvExiY5\",\"language\":\"ruby\"}]}}"]