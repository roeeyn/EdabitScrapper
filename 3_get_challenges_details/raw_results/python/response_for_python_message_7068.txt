a["{\"msg\":\"result\",\"id\":\"2240\",\"result\":{\"_id\":\"TrP8spqHxMiLWfsg8\",\"author\":\"Gxsor\",\"authorId\":\"b5oEvBqHWLRnJgp22\",\"code\":\"class Node:\\n    tree=[]\\n\\n    def __init__(self, data):\\n\\n        self.left = None\\n        self.right = None\\n        self.data = data\\n\\t\\t\\t\\t# Hint this line to clear the list for every object\\n        Node.tree.clear()\\n\\n    def insert(self, data):\\n\\t\\t#code\\n\\t\\t\\n    def PrintTree(self):\\n      #code\\n\\n\",\"difficulty\":3.4871794871794872,\"editorId\":\"b5oEvBqHWLRnJgp22\",\"familyId\":\"fxvmc96JY5vm7WGN9\",\"instructions\":\"Binary Search Tree is a node-based binary tree data structure which has the following properties:\\n\\n- The left subtree of a node contains only nodes with keys lesser than the node's key.\\n- The right subtree of a node contains only nodes with keys greater than the node’s key.\\n- The left and right subtree each must also be a binary search tree.\\n\\nCreate a class that converts the number into a node in the tree (every node should have left child, right child and the value of the node \\\"child can be none\\\"). The class should have a function that inserts a new node to the binary tree. And another function that prints the final binary tree (tree should be printed from left to the write {left-root-right}).\\n\\n### Examples\\n```\\n          10                                                           15\\n       5     11 ➞ [3, 5, 6, 10, 11]                               7          18        ➞  [5, 9, 7, 15, 17, 18, 19]\\n   3     6                                                     5     9     17     19\\n\\nroot=Node(10) ➞ 10 is the root of the tree (first node in the top)\\nroot.insert(5)\\nroot.insert(11)\\nroot.insert(3)\\nroot.insert(6)\\nroot.PrintTree() ➞ [3, 5, 6, 10, 11]\\nroot.data ➞ 10\\nroot.left.data ➞ 5\\nroot.right.data ➞ 11\\n```\\n\\n### Notes\\nN/A\",\"isFree\":false,\"isHidden\":false,\"lab\":\"root = Node(10)\\nroot.insert(5)\\nroot.insert(3)\\nroot.insert(12)\\nroot.insert(13)\\nroot.insert(11)\\nroot.insert(6)\\nTest.assert_equals(root.PrintTree(), [3, 5, 6, 10, 11, 12, 13])\\nTest.assert_equals(root.data, 10)\\nTest.assert_equals(root.left.data, 5)\\nTest.assert_equals(root.left.left.data, 3)\\nTest.assert_equals(root.left.right.data, 6)\\nTest.assert_equals(root.right.data, 12)\\nTest.assert_equals(root.right.left.data, 11)\\nTest.assert_equals(root.right.right.data, 13)\\n\\nroot2 = Node(15)\\nroot2.insert(7)\\nroot2.insert(5)\\nroot2.insert(18)\\nroot2.insert(17)\\nroot2.insert(9)\\nroot2.insert(19)\\nTest.assert_equals(root2.PrintTree(), [5, 7, 9, 15, 17, 18, 19])\\nTest.assert_equals(root2.data, 15)\\nTest.assert_equals(root2.left.data, 7)\\nTest.assert_equals(root2.left.left.data, 5)\\nTest.assert_equals(root2.left.right.data, 9)\\nTest.assert_equals(root2.right.data, 18)\\nTest.assert_equals(root2.right.left.data, 17)\\nTest.assert_equals(root2.right.right.data, 19)\\n\\n\\nroot3 = Node(8)\\nroot3.insert(10)\\nroot3.insert(3)\\nroot3.insert(6)\\nroot3.insert(14)\\nroot3.insert(1)\\nroot3.insert(4)\\nroot3.insert(13)\\nroot3.insert(7)\\nTest.assert_equals(root3.PrintTree(), [1, 3, 4, 6, 7, 8, 10, 13, 14])\\nTest.assert_equals(root3.data, 8)\\nTest.assert_equals(root3.left.data, 3)\\nTest.assert_equals(root3.left.left.data, 1)\\nTest.assert_equals(root3.left.right.data, 6)\\nTest.assert_equals(root3.right.data, 10)\\nTest.assert_equals(root3.right.right.data, 14)\\nTest.assert_equals(root3.right.right.left.data, 13)\\nTest.assert_equals(root3.left.right.left.data, 4)\\nTest.assert_equals(root3.left.right.right.data, 7)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[4,4,4,4,4,3,2,5,4,3,4,3,3,5,5,4,5,3,2,2,3,5,2,5,5,1,2,3,4,5,3,3,3,2,1,5,3,3,5],\"rators\":[\"b5oEvBqHWLRnJgp22\",\"aEm3Wvj2rFYRL8Lrb\",\"8PwfYqoDQFThzNtvf\",\"Xee5tZbXofdLqNTZP\",\"AW6dT7votojqC9voG\",\"p8qqFdJ3FSk5x9z3G\",\"h4x2jaMdj5aQZbW5g\",\"p2TdSD7n7LijR3xu9\",\"Mw8yqSDFdQui28w5N\",\"5prBnBm3YszWAYPTp\",\"4RqE24vATx2pC4NSw\",\"mDWNyaaQ9hvPCRzSd\",\"ouD6cs7ZdxzPfKRKt\",\"SGhPxX5bHGL8zZqtt\",\"YCTrQ9PuZmg4S8tsf\",\"23oi2a3vQwhtLEbSj\",\"XNmN6ztj36a7eChbD\",\"LmjcY5n89kRkPKX5y\",\"pEdiHJxCwgzo6zWp8\",\"iojEnnY9FsMfYzp6f\",\"8sNv5PTHa7XQ8bNqR\",\"wT5gGgvjKc5wz59AQ\",\"nnZmLznkNSZcZeEim\",\"yjtdwc2AC4jA2RWtn\",\"eHcgvkTGsH7ZziqBo\",\"ii29nS7Yko3iSLJFa\",\"iS5BrkGLzJyPK7nKt\",\"foytX6kH9wiSYqLtT\",\"LcRuvM5CcbSmJ8ipK\",\"PH32cNxBjrK4a28sn\",\"JKb5rhL6DKcCAypF9\",\"T2vhHPhRR96hRizq8\",\"gJYuGdkXEWWmGRLzu\",\"hpxpbuEqv9LPBB7pR\",\"eMuCpJ2spXWkJjWNz\",\"pnzfNatg3P32mMYQY\"],\"total\":42,\"quality\":[5,5]},\"flags\":0},\"summary\":\"Binary Search Tree is a node-based binary tree data structure which has the following properties:\\n\\nThe left subtree of a node contains only nodes with keys lesser than the node's key.\\nThe right subtree of a node contains only nodes with keys greater than the node’s key.\\nThe left and right subtree each must also be a binary search tree.\\n\\nCreate a class that con\",\"tags\":[\"algorithms\",\"data_structures\",\"classes\",\"interview\"],\"timestamp\":{\"$date\":1598750828253},\"title\":\"Binary Search Tree\",\"quality\":5,\"family\":[{\"_id\":\"TrP8spqHxMiLWfsg8\",\"language\":\"python3\"}]}}"]