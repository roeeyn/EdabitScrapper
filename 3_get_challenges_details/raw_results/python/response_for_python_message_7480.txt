a["{\"msg\":\"result\",\"id\":\"2444\",\"result\":{\"_id\":\"TRZusuXkmgsubhkXD\",\"author\":\"yanni\",\"authorId\":\"aCNWav8S8Try9RkC6\",\"code\":\"def cutting_paper(cuts, dim):\\n\\t\",\"difficulty\":4.466666666666667,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"mtTgt2uLajDQoCaqn\",\"instructions\":\"Suppose you have a sheet of paper measuring 8x10. You want to cut it exactly in half while maintaining its rectangular shape. You can do this in two ways. You can cut it in half preserving its long dimension of 10.\\n\\nWe will call this a long cut:\\n\\n```\\n[8, 10] ➞ long cut ➞ [4, 10]\\n```\\n\\nOr you can cut it in half preserving its short dimension. This is a short cut:\\n\\n```\\n[8, 10] ➞ short cut ➞ [5, 8]\\n```\\n\\nIf the shape happens to be a square, then a long cut and a short cut amount to the same thing:\\n\\n```\\n[12, 12] ➞ long cut ➞ [6, 12]\\n```\\n\\n```\\n[12, 12] ➞ short cut ➞ [6, 12]\\n```\\n\\nFor this challenge, you are given two arguments. The first one is a string containing the cuts to be made to a sheet of paper in sequence from first to last. A long cut is designated by \\\"L\\\" and a short cut by \\\"S\\\".\\n\\nThe second argument is the dimensions of the paper after all the cuts are made.\\n\\nYou are to devise a function that will find the original dimensions of the sheet of paper before any cuts were made. There could be more than one possible answer so return your answer(s) as a list. If it is not possible to arrive at the final dimensions with the indicated cuts, return an empty list.\\n\\n\\n### Examples\\n```\\ncutting_paper(\\\"S\\\", [3, 7]) ➞ [[3, 14]]\\n\\ncutting_paper(\\\"L\\\", [5, 7]) ➞ []\\n\\ncutting_paper(\\\"S\\\", [5, 7]) ➞ [[5, 14], [7, 10]]\\n\\ncutting_paper(\\\"SSLS\\\", [3, 4]) ➞ [[6, 32], [8, 24], [12, 16]]\\n\\ncutting_paper(\\\"LSSLSL\\\", [7, 53]) ➞ [[56, 424]]\\n\\ncutting_paper(\\\"LSSSSS\\\", [1, 2]) ➞ [[2, 64], [4, 32], [8, 16]]\\n```\\n\\n### Notes\\nSort your answer with the smaller dimension in ascending order.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(cutting_paper(\\\"S\\\", [3, 7]),[[3, 14]])\\nTest.assert_equals(cutting_paper(\\\"L\\\", [5, 7]), [])\\nTest.assert_equals(cutting_paper(\\\"S\\\", [5, 7]), [[5, 14], [7, 10]])\\nTest.assert_equals(cutting_paper(\\\"SSLS\\\", [3, 4]), [[6, 32], [8, 24], [12, 16]])\\nTest.assert_equals(cutting_paper(\\\"LSSLSL\\\", [7, 53]), [[56, 424]])\\nTest.assert_equals(cutting_paper(\\\"LSSSSS\\\", [1,2]), [[2, 64], [4, 32], [8, 16]])\\nTest.assert_equals(cutting_paper(\\\"SLLS\\\", [2, 4]), [[8, 16]])\\nTest.assert_equals(cutting_paper(\\\"LLSLSSL\\\", [13, 79]), [[208, 632]])\\nTest.assert_equals(cutting_paper(\\\"SLSLLSSLS\\\", [2, 4]), [[32, 128], [64, 64]])\\nTest.assert_equals(cutting_paper(\\\"SLSLLSSLS\\\", [12, 13]), [[192, 416], [208, 384]])\\nTest.assert_equals(cutting_paper(\\\"SLLS\\\", [13, 23]), [])\\nTest.assert_equals(cutting_paper(\\\"LSSSSSLL\\\", [17, 73]), [[136, 2336], [146, 2176], [272, 1168], [292, 1088], [544, 584]])\\nTest.assert_equals(cutting_paper(\\\"LSSSSLS\\\", [5, 6]), [[20, 192], [24, 160], [40, 96], [48, 80]])\\nTest.assert_equals(cutting_paper(\\\"LSLLLS\\\", [5,11]),[])\\nTest.assert_equals(cutting_paper(\\\"LLSSLSSS\\\", [22, 43]), [[176, 1376], [344, 704], [352, 688]])\\nTest.assert_equals(cutting_paper(\\\"LSSSLSSS\\\", [8, 10]), [[32, 640], [40, 512], [64, 320], [80, 256], [128, 160]])\\nTest.assert_equals(cutting_paper(\\\"LSLLLS\\\", [1, 2]), [])\\nTest.assert_equals(cutting_paper(\\\"LSSSLSSSSSL\\\", [17, 53]), [[136, 13568], [212, 8704], [272, 6784], [424, 4352], [544, 3392], [848, 2176], [1088, 1696]])\",\"language\":\"python3\",\"quality\":0,\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,4,5,3,5,5,3,5,5,2,5],\"quality\":[],\"rators\":[\"aCNWav8S8Try9RkC6\",\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\",\"mDWNyaaQ9hvPCRzSd\",\"s5M5RvgqR9BhB9JoC\",\"BrTDhPJcACL2bsrpJ\",\"xn7uGNKeAwPEkP9oA\",\"iS5BrkGLzJyPK7nKt\",\"yjtdwc2AC4jA2RWtn\",\"akxTXEcd6TntA6uz4\"],\"total\":11},\"flags\":0},\"summary\":\"Suppose you have a sheet of paper measuring 8x10. You want to cut it exactly in half while maintaining its rectangular shape. You can do this in two ways. You can cut it in half preserving its long dimension of 10.\\n\\nWe will call this a long cut:\\n\\n[8, 10] ➞ long cut ➞ [4, 10]\\n\\nOr you can cut it in half preserving its short dimension. This is a short cut:\\n\\n[8, 1\",\"tags\":[\"geometry\",\"numbers\"],\"timestamp\":{\"$date\":1602612820710},\"title\":\"Cutting a Sheet of Paper\",\"family\":[{\"_id\":\"BoQ8qd2SKHp3pJGbM\",\"language\":\"cpp\"},{\"_id\":\"JB4h8KPMqfBpJcLYY\",\"language\":\"javascript\"},{\"_id\":\"TRZusuXkmgsubhkXD\",\"language\":\"python3\"},{\"_id\":\"CzyeCBWFQMzACKWWK\",\"language\":\"ruby\"}]}}"]