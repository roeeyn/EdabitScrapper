a["{\"msg\":\"result\",\"id\":\"1048\",\"result\":{\"_id\":\"qLMZ2hEvrhRSSSnQw\",\"author\":\"Luis Pereira\",\"authorId\":\"aEm3Wvj2rFYRL8Lrb\",\"code\":\"def make_grlex(lst):\\n\\t\",\"difficulty\":1.5410958904109588,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"YRGKLfYFggWF9WiJv\",\"instructions\":\"Graded lexicographic order (grlex order for short) is a way of ordering words that:\\n\\n1. First orders words by length.\\n2. Then orders words of the same size by their dictionary order.\\n\\nFor example, in grlex order:\\n- \\\"tray\\\" < \\\"trapped\\\" since \\\"tray\\\" has length 4 while \\\"trapped\\\" has length 7.\\n- \\\"trap\\\" < \\\"tray\\\" since both have length 4, but \\\"trap\\\" comes before \\\"tray\\\" in the dictionary.\\n\\nGiven a list of words, return that list in grlex order.\\n\\n### Examples\\n```\\nmake_grlex([\\\"small\\\", \\\"big\\\"]) ➞ [\\\"big\\\", \\\"small\\\"]\\n\\nmake_grlex([\\\"cat\\\", \\\"ran\\\", \\\"for\\\", \\\"the\\\", \\\"rat\\\"]) ➞ [\\\"cat\\\", \\\"for\\\", \\\"ran\\\", \\\"rat\\\", \\\"the\\\"]\\n\\nmake_grlex([\\\"this\\\", \\\"is\\\", \\\"a\\\", \\\"small\\\", \\\"test\\\"]) ➞ [\\\"a\\\", \\\"is\\\", \\\"test\\\", \\\"this\\\", \\\"small\\\"]\\n```\\n\\n### Notes\\nN/A\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(make_grlex([\\\"small\\\", \\\"big\\\"]), [\\\"big\\\", \\\"small\\\"], \\\"order first by size\\\")\\nTest.assert_equals(make_grlex([\\\"big\\\", \\\"cat\\\", \\\"ran\\\", \\\"for\\\", \\\"the\\\", \\\"fat\\\", \\\"rat\\\"]), [\\\"big\\\", \\\"cat\\\", \\\"fat\\\", \\\"for\\\", \\\"ran\\\", \\\"rat\\\", \\\"the\\\"], \\\"If same size, order alphabetically.\\\")\\nTest.assert_equals(make_grlex([\\\"this\\\", \\\"is\\\", \\\"a\\\", \\\"small\\\", \\\"test\\\"]), [\\\"a\\\", \\\"is\\\", \\\"test\\\", \\\"this\\\", \\\"small\\\"])\\nTest.assert_equals(make_grlex([\\\"let\\\", \\\"us\\\", \\\"try\\\", \\\"some\\\", \\\"long\\\", \\\"test\\\", \\\"to\\\", \\\"see\\\", \\\"if\\\", \\\"this\\\", \\\"works\\\", \\\"as\\\", \\\"it\\\", \\\"should\\\"]), [\\\"as\\\", \\\"if\\\", \\\"it\\\", \\\"to\\\", \\\"us\\\", \\\"let\\\", \\\"see\\\", \\\"try\\\", \\\"long\\\", \\\"some\\\", \\\"test\\\", \\\"this\\\", \\\"works\\\", \\\"should\\\"])\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,3,2,1,0,2,3,2,1,1,2,1,2,1,0,2,1,2,1,1,0,2,2,2,0,1,1,1,3,1,2,2,1,0,1,1,1,2,1,2,2,1,1,3,2,2,2,1,2,1,2,0,2,2,1,2,2,2,0,2,3,1,1,2,2,2,2,1,2,2,2,1,2,1,0,2,1,1,2,0,2,1,2,0,3,0,2,2,2,2,2,1,0,2,2,2,2,1,2,2,1,0,1,3,2,2,0,2,2,0,2,2,1,1,1,0,2,0,3,1,1,1,2,2,3,2,2,2,2,1,2,2,2,2,2,2,2,2,3,2,1,1],\"rators\":[\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\",\"tAF9Gf6PiGogbZuWs\",\"v9KtC8YLbMWmXiW2H\",\"AasGs8AeX9Lcb9xJn\",\"euPBBaYXyS8RBr9KB\",\"8LfTheFzvicameoz9\",\"gb9rvGus2Jv7bjZSs\",\"6RMiDvCNTLEdKefpH\",\"w3A7cBWyAfukk6xEQ\",\"xzZQDmPgjhkorhA5n\",\"4CFzv558qbGcpQwc4\",\"cR3ibTMxLyEdDFCHY\",\"Z85ajWfZ4jDPkbvR4\",\"vLrq4dEDMM2wd68Dc\",\"yZvzB3qFb8pkHy4dg\",\"9Ly8afdtofp8DXzrt\",\"mxX4rH5ELYkdZ2Mbw\",\"2fxapKr8XGdNeaKi2\",\"dHZqT6h4JMwk5fPC8\",\"sz8ufn9i8zeiGWpAy\",\"hnyhBFWwNCz9mDfSi\",\"oWR752PGhCJqt3Xfm\",\"aRqQ42J5zqCmBNd8w\",\"8JyqsSbN2FJXPr3cw\",\"Yp7uvStL97cC9fKkY\",\"2QGRoQn2dRq3scu7k\",\"jNvegJWCk5HCtEMbK\",\"ZNnsMeNkdDhHjSrZb\",\"J67hC7LSEYS5JwhPj\",\"gJYuGdkXEWWmGRLzu\",\"kGwkJGKrHotSoTPuL\",\"HF28xZKSLM9wEuqNg\",\"Jqk2uJZZxEv5wZFze\",\"kYWb8BwpKwunQkxeX\",\"M8dQuMrEpP8Hc3tHN\",\"KdNDysEsy2TW5QRJ2\",\"s5M5RvgqR9BhB9JoC\",\"DEDniTrstQYGounXT\",\"ND35w2a3HnC5AQKkE\",\"N2wnZXkhDH86mgjQ8\",\"Fk9kLwoG4Brf4KsKf\",\"9pzFiFK3ANLjQfnr2\",\"C9LKGu2g5hSijvDzA\",\"vqfgSfaczQSe7F2Pq\",\"5dHucvf2qBYyKim7X\",\"nfXGHENb5md7m355s\",\"FzxTj4GuujhwpZM7y\",\"ijDkrdZLoL5Cfqco3\",\"hab8YixsXxe4CcZpP\",\"ahk2qiXKJA753wAJk\",\"MKT7khMBGXzA22ykf\",\"FEYpu9RWysAgW3XnP\",\"EjbDDFRECrzQDkzrX\",\"JS3hNM3XXkxPdg3yk\",\"LWCzZ8mb8gwrRNGfq\",\"XrqNzJ2FRG8HnGiR6\",\"4rwxLqLs2mNZNg8NB\",\"a777e8chPvJkY3tKa\",\"ikkjHDqBHu6fT3vGL\",\"yr822PZmmiDDenxpB\",\"2ptN2mhjFwFcHyPZd\",\"2innwjWqxJHo4eRGh\",\"HCP8ZsX84rLZe2vHT\",\"H4abACFDH5t8CnnyH\",\"ZrKCkX7xxGGZzauFW\",\"3cF6NXq3ZEwdkgSjb\",\"Z6eqrAatHZjffx4s3\",\"QuQqdww2t72mqEtue\",\"NG8PWBSjsM8mMhQEq\",\"syRNbbPdLCGXbH2Gy\",\"iojEnnY9FsMfYzp6f\",\"7txFzDQ43vJ7qCY88\",\"Pe8vWpDHRuH9nSGKW\",\"sbJcFfQjQ59Wfg4Cd\",\"W4zFJhfQoDah7sxKu\",\"dzS6WBTMHyFEag6Fp\",\"oB8MCqep5GBXXuhB8\",\"yjtdwc2AC4jA2RWtn\",\"rfyEkETeoS96QNH4e\",\"NNE5HNRXAkmhrWgyQ\",\"YcCLwitFMAEJSnxAW\",\"hRiMXDZNAzyPd5tpt\",\"iS5BrkGLzJyPK7nKt\",\"HqmxnQJM66Y57twhn\",\"n2BRY9X8899dcG8Bw\",\"R4SjTgDnpigJYDLyL\",\"oBcs8GLX2ZFLXQy8y\",\"Ecg4m7srYGgZsb4Ck\",\"ta5CrWnBCRusD2WMo\",\"TTgP9jcqGxCfKotZ3\",\"YA7SDhpgEtsqynvNL\",\"zd9FLSzsGz3evKafy\",\"7K2GEb5TZRtSpyyGS\",\"6gS4E2C84vBYTYeDZ\",\"BBk8ZRmMsTzpKCaux\",\"RehJGBFS6CYiWdjZx\",\"KLmLKaJPfsYxp42p2\",\"k2Eo3wyfZZ6KxvKhN\",\"p8qqFdJ3FSk5x9z3G\",\"PhceyfmFntJcn5Fhf\",\"tpxMgkGSHwBjS95Ta\",\"DYDJTyGgKFnBRLm2r\",\"mG8HqKiAQFTdRZthG\",\"gXTAie79kiw28tx5u\",\"9FCeFzjPA4jrQ7oHW\",\"kXEfD7xxEyWd7oxxL\",\"Kh3Pc2ZRusurLaMyP\",\"DPi9QGLctq2y76KuE\",\"QRv96jmNaYsWkxQEG\",\"CyzskHGsC6WSmYrLu\",\"KJCDwGkoXh8qtbbKr\",\"wRttWTM59y8m5mx7x\",\"5HCu9Ydd86QgHDRNP\",\"8WpvgSbQciTQWdd8T\",\"X4wWncu8bJMz7KDw2\",\"J3upzLHuEwXH7Z2hx\",\"fKsHKQ9ZTyEgmcQmQ\",\"dBzwBtRjZqB98DJeB\",\"cAP3n5NY64uoMwzRR\",\"dj5AyG5fWP8FdsSmZ\",\"dYPkStFnLvAMsHSzZ\",\"RGMbFMZXJr7DhcAJy\",\"YRAzEBJoLvSaiPtYx\",\"d8qtzoLB264iP8tdY\",\"g9FyJ8yeT9ic97Qp2\",\"5XiuAqicKD4hBdu63\",\"CTKmXtrqDYqJBnuy8\",\"K3RacTvkWHLfzKF8i\",\"axdSNLZpiCDF8RS6n\",\"J5T8gZqiZXFuFDTQ7\",\"HuNF3xTBzmatyGSTm\",\"C2AfMipCicfD58WJ9\",\"ZyrfhDTZHb8LymH5b\",\"sHjfbGQGLHE6JR6qu\",\"qAby4AWXmTNeusvg3\",\"5hQnRWiKkhgKJXNMP\",\"buX4mCQhtXCfBjeno\",\"EXbD3ZjgP9oaoFLYw\",\"eYfPWvZwnJQkHbSTK\",\"o4ixjQGSaYqA2JoM4\",\"5S9nX4rKsnCcnv4Cz\",\"GGdmhAvxXhqhhibJN\",\"srJ34BaybkQh3qRkM\",\"Ds7L5bksw2QRHjrKL\",\"MXGuntvz3byrP6WJc\",\"CHvzhtXnv8HTbPQ56\",\"yod5YhKtPqw2GfG9B\",\"BrTDhPJcACL2bsrpJ\",\"zKWsSutXjvxuGkcPX\",\"EfxwqhYdapX3dMQC2\",\"2EbDCCJJvCfKkbYia\",\"bvmTE46bfcM4ogj34\",\"66a9xX73nmTEuKs9k\",\"8BFSTCnoe2QggN64c\",\"NzbRqGWspQnWMoDrF\",\"Wpn95NqWxncQrwNgz\",\"wjc4iejpErBhxWwHo\",\"AFfw7cGg83uYk2Miy\",\"PC3pLs36zNzpRDSuE\",\"ey3CASd6Je5LEJzfB\",\"mvJBakQ35CWAnbbEZ\",\"eHcgvkTGsH7ZziqBo\",\"c2q7mY39z5JPEMCaM\",\"RoGGD5cpHb4ftdLDv\",\"2PufnQcsHsfymufX3\",\"XD5nmvKQchKezPXhy\",\"pduNK68oazqQTtbLp\",\"hR7GMiqGap4CzEWSy\",\"4Lwjr34ypKNQNQCar\",\"4TmgHkn5vqyHK3sYC\",\"eBRy8L3CKv9dpwjsC\",\"u5u2YpHXiNgzDNJdX\",\"T6Rm8mREPMZSftzrC\",\"d9LBRxvADNBB5QJMB\",\"suArq5BbSy7gD6xri\",\"yAouD3PxzED8a4gap\",\"mw9464S5dnenqzvpm\",\"wrL4iX2CCSqDCCty3\",\"Wi4H6ayKsNDWWQCG5\",\"E2hpke7mHxAWsw5t9\"],\"total\":198,\"quality\":[5,4,2,5,5,3,5,5,4,4,5,5,5,5,5,4,4,5,5,5,5,5,5,5,1,4,5,5,5,5,4,5,5,3,5,5,5,1,5,5]},\"flags\":0},\"summary\":\"Graded lexicographic order (grlex order for short) is a way of ordering words that:\\n\\nFirst orders words by length.\\nThen orders words of the same size by their dictionary order.\\n\\nFor example, in grlex order:\\n\\\"tray\\\" < \\\"trapped\\\" since \\\"tray\\\" has lenght 4 while \\\"trapped\\\" has lenght 7.\\n\\\"trap\\\" < \\\"tray\\\" since both have lenght 4, but \\\"trap\\\" comes before \\\"tray\\\" in the\",\"tags\":[\"math\",\"sorting\",\"strings\",\"conditions\"],\"timestamp\":{\"$date\":1584901086143},\"title\":\"Order by Length First\",\"quality\":4.45,\"family\":[{\"_id\":\"qDAsEgbhqK3ucb4FR\",\"language\":\"cpp\"},{\"_id\":\"oBFirFPZH7S6vopYE\",\"language\":\"javascript\"},{\"_id\":\"qLMZ2hEvrhRSSSnQw\",\"language\":\"python3\"},{\"_id\":\"qM2MLXJcuXSgKCvBP\",\"language\":\"ruby\"}]}}"]