a["{\"msg\":\"result\",\"id\":\"1780\",\"result\":{\"_id\":\"FkXNcJMwTsEfgBdxJ\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"def cartesian_matrix(dim, cnt):\\n\\t\",\"difficulty\":2.323529411764706,\"familyId\":\"u6efbt8RPBEPNSWvQ\",\"instructions\":\"In this challenge, create a matrix that simulates how a series of points are placed on a portion of the cartesian plane.\\n\\nYou are given two objects as parameters:\\n\\n- `dim` contains the dimension of the regular matrix to build:\\n  - The property `h` is the **h**eight, or the total number of rows.\\n  - The property `w` is the **w**idth, or the total number of columns.\\n\\n- `cnt` contains the coordinates of the cartesian plane center:\\n  - The property `r` is the **r**ow (0-indexed).\\n  - The property `c` is the **c**olumn (0-indexed).\\n\\nYou have to implement a function that returns a matrix (sized according to `dim`), with each \\\"cell\\\" being an array containing the `[x, y]` coordinates from the given central point (treating so the cells as points on the cartesian plane).\\n\\n### Examples\\n```\\ncartesian_matrix({\\\"h\\\": 3, \\\"w\\\": 4}, {\\\"r\\\": 1, \\\"c\\\": 1}) ➞ [\\n  [[-1, 1], [0, 1], [1, 1], [2, 1]],\\n  [[-1, 0], [0, 0], [1, 0], [2, 0]],\\n  [[-1, -1], [0, -1], [1, -1], [2, -1]]\\n]\\n\\ncartesian_matrix({\\\"h\\\": 4, \\\"w\\\": 3}, {\\\"r\\\": 0, \\\"c\\\": 1}) ➞ [\\n  [[-1, 0], [0, 0], [1, 0]],\\n  [[-1, -1], [0, -1], [1, -1]],\\n  [[-1, -2], [0, -2], [1, -2]],\\n  [[-1, -3], [0, -3], [1, -3]]\\n]\\n\\ncartesian_matrix({\\\"h\\\": 2, \\\"w\\\": 4}, {\\\"r\\\": 0, \\\"c\\\": 0}) ➞ [\\n  [[0, 0], [1, 0], [2, 0], [3, 0]],\\n  [[0, -1], [1, -1], [2, -1], [3, -1]]\\n]\\n```\\n\\n### Notes\\n- The coordinates must be returned in the order `[x-axis, y-axis]`.\\n- The coordinates of the central point (or _origin_), is always `[0, 0]`. The origin will always be included in the matrix.\\n- Points placed to the right or up from the origin have positive values (i.e. `[1, 2]` means `1` cell to the **right** and `2` cells **up** from the origin).\\n- Points placed to the left or down from the origin have negative values (i.e. `[-2, -1]` means `2` cells to the **left** and `1` cell **down** from the origin).\",\"isHidden\":false,\"lab\":\"Test.assert_equals(cartesian_matrix({'h': 3, 'w': 4}, {'r': 1, 'c': 1}), [\\n  [ [ -1, 1 ], [ 0, 1 ], [ 1, 1 ], [ 2, 1 ] ],\\n  [ [ -1, 0 ], [ 0, 0 ], [ 1, 0 ], [ 2, 0 ] ],\\n  [ [ -1, -1 ], [ 0, -1 ], [ 1, -1 ], [ 2, -1 ] ]\\n])\\n\\nTest.assert_equals(cartesian_matrix({'h': 4, 'w': 3}, {'r': 0, 'c': 1}), [\\n  [ [ -1, 0 ], [ 0, 0 ], [ 1, 0 ] ],\\n  [ [ -1, -1 ], [ 0, -1 ], [ 1, -1 ] ],\\n  [ [ -1, -2 ], [ 0, -2 ], [ 1, -2 ] ],\\n  [ [ -1, -3 ], [ 0, -3 ], [ 1, -3 ] ]\\n])\\n\\nTest.assert_equals(cartesian_matrix({'h': 5, 'w': 5}, {'r': 2, 'c': 2}), [\\n  [ [ -2, 2 ], [ -1, 2 ], [ 0, 2 ], [ 1, 2 ], [ 2, 2 ] ],\\n  [ [ -2, 1 ], [ -1, 1 ], [ 0, 1 ], [ 1, 1 ], [ 2, 1 ] ],\\n  [ [ -2, 0 ], [ -1, 0 ], [ 0, 0 ], [ 1, 0 ], [ 2, 0 ] ],\\n  [ [ -2, -1 ], [ -1, -1 ], [ 0, -1 ], [ 1, -1 ], [ 2, -1 ] ],\\n  [ [ -2, -2 ], [ -1, -2 ], [ 0, -2 ], [ 1, -2 ], [ 2, -2 ] ]\\n])\\n\\nTest.assert_equals(cartesian_matrix({'h': 6, 'w': 2}, {'r': 4, 'c': 1}), [\\n  [ [ -1, 4 ], [ 0, 4 ] ],\\n  [ [ -1, 3 ], [ 0, 3 ] ],\\n  [ [ -1, 2 ], [ 0, 2 ] ],\\n  [ [ -1, 1 ], [ 0, 1 ] ],\\n  [ [ -1, 0 ], [ 0, 0 ] ],\\n  [ [ -1, -1 ], [ 0, -1 ] ]\\n])\\n\\nTest.assert_equals(cartesian_matrix({'h': 2, 'w': 4}, {'r': 0, 'c': 0}), [\\n  [ [ 0, 0 ], [ 1, 0 ], [ 2, 0 ], [ 3, 0 ] ],\\n  [ [ 0, -1 ], [ 1, -1 ], [ 2, -1 ], [ 3, -1 ] ]\\n])\\n\\nTest.assert_equals(cartesian_matrix({'h': 1, 'w': 1}, {'r': 0, 'c': 0}), [ [ [ 0, 0 ] ] ])\",\"language\":\"python3\",\"summary\":\"In this challenge, create a matrix that simulates how a series of points are placed on a portion of the cartesian plane.\\n\\nYou are given two objects as parameters:\\n\\ndim contains the dimension of the regular matrix to build:\\n  The property h is the height, or the total number of rows.\\n  The property w is the width, or the total number of columns.\\n\\ncnt contains t\",\"tags\":[\"arrays\",\"loops\"],\"timestamp\":{\"$date\":1593744725391},\"title\":\"Cartesian Matrix\",\"stats\":{\"completed\":{\"total\":31,\"ratings\":[2,2,2,2,2,3,3,3,2,2,3,3,3,0,1,1,3,3,4,3,2,2,1,3,3,3,3,3,1,2,3,2,3,1],\"rators\":[\"a777e8chPvJkY3tKa\",\"8PwfYqoDQFThzNtvf\",\"gJYuGdkXEWWmGRLzu\",\"aEm3Wvj2rFYRL8Lrb\",\"9dgvEreRDYRiwLmYv\",\"s5M5RvgqR9BhB9JoC\",\"mDWNyaaQ9hvPCRzSd\",\"teqbjTHTg6ScWbPgE\",\"9uZpgAtSuPZ7W7DL6\",\"yjtdwc2AC4jA2RWtn\",\"v9KtC8YLbMWmXiW2H\",\"DEDniTrstQYGounXT\",\"tAF9Gf6PiGogbZuWs\",\"xn7uGNKeAwPEkP9oA\",\"J3upzLHuEwXH7Z2hx\",\"Yp7uvStL97cC9fKkY\",\"gXTAie79kiw28tx5u\",\"Jqk2uJZZxEv5wZFze\",\"p8qqFdJ3FSk5x9z3G\",\"iojEnnY9FsMfYzp6f\",\"QRv96jmNaYsWkxQEG\",\"yod5YhKtPqw2GfG9B\",\"AasGs8AeX9Lcb9xJn\",\"H9KZi2cjt4FwH7qog\",\"oBcs8GLX2ZFLXQy8y\",\"rhS8qXRjZcpDXkwnE\",\"4Lwjr34ypKNQNQCar\",\"2PufnQcsHsfymufX3\",\"8sNv5PTHa7XQ8bNqR\"],\"quality\":[]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":0,\"family\":[{\"_id\":\"uJTFvuYDRD5cEsfdL\",\"language\":\"javascript\"},{\"_id\":\"FkXNcJMwTsEfgBdxJ\",\"language\":\"python3\"}]}}"]