a["{\"msg\":\"result\",\"id\":\"1367\",\"result\":{\"_id\":\"26P2iwW5WfwPGJyWE\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"def possibly_perfect(key, answers):\\n\\t\",\"difficulty\":2.031496062992126,\"familyId\":\"wKwmRgvzD2NYTB6Mz\",\"instructions\":\"Suppose a student can earn 100% on an exam by getting the answers all correct or all incorrect. Given a **potentially incomplete** answer key and the student's answers, write a function that determines whether or not a student can still score 100%. Incomplete questions are marked with an underscore, `\\\"_\\\"`.\\n\\n```\\n[\\\"A\\\", \\\"_\\\", \\\"C\\\", \\\"_\\\", \\\"B\\\"]   # answer key\\n[\\\"A\\\", \\\"D\\\", \\\"C\\\", \\\"E\\\", \\\"B\\\"]   # student's solution\\n\\n➞ True\\n\\n# Possible for student to get all questions correct.\\n\\n[\\\"B\\\", \\\"_\\\", \\\"B\\\"]   # answer key\\n[\\\"B\\\", \\\"D\\\", \\\"C\\\"]   # student's solution\\n\\n➞ False\\n\\n# First question is correct but third is wrong, so not possible to score 100%.\\n\\n[\\\"T\\\", \\\"_\\\", \\\"F\\\", \\\"F\\\", \\\"F\\\"]   # answer key\\n[\\\"F\\\", \\\"F\\\", \\\"T\\\", \\\"T\\\", \\\"T\\\"]   # student's solution\\n\\n➞ True\\n\\n# Possible for student to get all questions incorrect.\\n```\\n\\n### Examples\\n```\\npossibly_perfect([\\\"B\\\", \\\"A\\\", \\\"_\\\", \\\"_\\\"], [\\\"B\\\", \\\"A\\\", \\\"C\\\", \\\"C\\\"]) ➞ True\\n\\npossibly_perfect([\\\"A\\\", \\\"B\\\", \\\"A\\\", \\\"_\\\"], [\\\"B\\\", \\\"A\\\", \\\"C\\\", \\\"C\\\"]) ➞ True\\n\\npossibly_perfect([\\\"A\\\", \\\"B\\\", \\\"C\\\", \\\"_\\\"], [\\\"B\\\", \\\"A\\\", \\\"C\\\", \\\"C\\\"]) ➞ False\\n\\npossibly_perfect([\\\"B\\\", \\\"_\\\"], [\\\"C\\\", \\\"A\\\"]) ➞ True\\n\\npossibly_perfect([\\\"B\\\", \\\"A\\\"], [\\\"C\\\", \\\"A\\\"]) ➞ False\\n\\npossibly_perfect([\\\"B\\\"], [\\\"B\\\"]) ➞ True\\n```\\n\\n### Notes\\nTest has at least one question.\",\"lab\":\"Test.assert_equals(possibly_perfect(['A', '_', 'C', '_', 'B'], ['A', 'D', 'C', 'E', 'B']), True)\\nTest.assert_equals(possibly_perfect(['B', '_', 'B'], ['B', 'D', 'C']), False)\\nTest.assert_equals(possibly_perfect(['T', '_', 'F', 'F', 'F'], ['F', 'F', 'T', 'T', 'T']), True)\\n\\nTest.assert_equals(possibly_perfect(['B', 'A', '_', '_'], ['B', 'A', 'C', 'C']), True)\\nTest.assert_equals(possibly_perfect(['A', 'B', 'A', '_'], ['B', 'A', 'C', 'C']), True)\\nTest.assert_equals(possibly_perfect(['A', 'B', 'C', '_'], ['B', 'A', 'C', 'C']), False)\\n\\nTest.assert_equals(possibly_perfect(['B', '_'], ['C', 'A']), True)\\nTest.assert_equals(possibly_perfect(['B', 'A'], ['C', 'A']), False)\\nTest.assert_equals(possibly_perfect(['B'], ['B']), True)\\n\\nTest.assert_equals(possibly_perfect(['_', 'T', '_', '_'], ['T', 'F', 'F', 'F']), True)\\nTest.assert_equals(possibly_perfect(['_', 'T', '_', '_'], ['T', 'T', 'F', 'T']), True)\\nTest.assert_equals(possibly_perfect(['_', 'T', 'T', 'T'], ['T', 'T', 'F', 'T']), False)\\nTest.assert_equals(possibly_perfect(['_', 'T', 'T', 'T'], ['T', 'T', 'T', 'T']), True)\\nTest.assert_equals(possibly_perfect(['_', 'T', 'T', 'T'], ['F', 'F', 'F', 'F']), True)\",\"language\":\"python3\",\"summary\":\"Suppose a student can earn 100% on an exam by getting the answers all correct or all incorrect. Given a potentially incomplete answer key and the student's answers, write a function that determines whether or not a student can still score 100%. Incomplete questions are marked with an underscore, \\\"_\\\".\\n\\n[\\\"A\\\", \\\"\\\", \\\"C\\\", \\\"\\\", \\\"B\\\"]   # answer key\\n[\\\"A\\\", \\\"D\\\", \\\"C\\\", \\\"E\\\",\",\"tags\":[\"arrays\",\"validation\"],\"timestamp\":{\"$date\":1552783189625},\"title\":\"All or Nothing\",\"stats\":{\"completed\":{\"total\":147,\"ratings\":[2,2,2,2,2,2,2,2,2,2,3,1,2,2,2,2,2,2,2,2,2,2,2,2,3,2,2,2,2,2,2,3,3,3,3,2,3,2,3,3,3,1,5,3,1,2,3,1,2,2,2,1,2,2,3,3,3,2,2,1,2,3,3,3,1,1,2,3,0,2,1,1,3,3,1,2,2,0,2,0,3,3,2,2,0,3,3,0,2,2,0,1,0,1,3,3,0,3,2,3,3,3,3,3,0,3,0,2,3,1,2,3,1,2,0,3,3,1,1,1,3,2,3,2,1,3,3],\"rators\":[\"BkPgkDQGHm66X4Qai\",\"gb9rvGus2Jv7bjZSs\",\"Jqk2uJZZxEv5wZFze\",\"8JyqsSbN2FJXPr3cw\",\"yZvzB3qFb8pkHy4dg\",\"SKabuq5XuhXBugKBa\",\"qvEvDcL32a5F4Tg6c\",\"tAF9Gf6PiGogbZuWs\",\"M8jrv2FfpMQp9Qzpx\",\"T3ZAuoMrJjvZwN55B\",\"mNMQvcxKSSvqqMYCH\",\"cF8nvyGwfFKE5b2iy\",\"qNwvypZgzkvi97Jct\",\"ab7BsQuhDo3QgE6bh\",\"5J4tAkdA45c76xAfk\",\"QzqL4jkcY4BMmNuS8\",\"FikSPhcrHBpQ4CyGC\",\"nc7bRhkxgKyqusYe3\",\"GMbZRE4gvgfkDxSvY\",\"MXjxGML2X75x64vJo\",\"9Gf6g4fuKc3uou9w2\",\"Mb5sjE2qnvjL2xcBG\",\"CioWqrzmDwyunW5zS\",\"M2k5STtKaQx6tsgWe\",\"pkZ2pAaDxWo6Nwur4\",\"kQH5b8MXJunh84Czq\",\"PFjMZGHNAPTkgd7tq\",\"AF6LgdKhEdzwgRJom\",\"C9LKGu2g5hSijvDzA\",\"KWHYqCuXcKrzxtqHt\",\"nzx4uAPg3hCceyFPE\",\"nF9pCCzbGDhzvWgaw\",\"jHrtWDGBhkbuWa7fG\",\"zjQPuEyZ38tTW6P5w\",\"jYJ26SiLKBu5GRumq\",\"gMJhLdyw3tH7L96X2\",\"s5M5RvgqR9BhB9JoC\",\"HqmxnQJM66Y57twhn\",\"Jg8ZSRXe3NoDMCqGu\",\"Do6z6DbgoxgTtNaqW\",\"2fxapKr8XGdNeaKi2\",\"2innwjWqxJHo4eRGh\",\"Z85ajWfZ4jDPkbvR4\",\"C4QntmkYtB89GNtpd\",\"4fctAnxyFRB8stPRQ\",\"AasGs8AeX9Lcb9xJn\",\"pmgFEciNrd3ES9tuu\",\"8PwfYqoDQFThzNtvf\",\"HCE86CY26tqrnxebw\",\"LjoNTyGEMfBpMHHus\",\"aEm3Wvj2rFYRL8Lrb\",\"ZNnsMeNkdDhHjSrZb\",\"kYWb8BwpKwunQkxeX\",\"hnyhBFWwNCz9mDfSi\",\"YRstQuthRkFeBiXug\",\"m6D2RuQJwrAK6WB3v\",\"4rwxLqLs2mNZNg8NB\",\"gJYuGdkXEWWmGRLzu\",\"n2BRY9X8899dcG8Bw\",\"v9KtC8YLbMWmXiW2H\",\"Jh37QFpwiwmGwfW5u\",\"W5TajitmCyxz87zAC\",\"HF28xZKSLM9wEuqNg\",\"DEDniTrstQYGounXT\",\"iojEnnY9FsMfYzp6f\",\"cR3ibTMxLyEdDFCHY\",\"Yp7uvStL97cC9fKkY\",\"zZDaXBxMzTCBhNkgL\",\"Ecg4m7srYGgZsb4Ck\",\"DrkR35NqnP9NDLbq6\",\"yjtdwc2AC4jA2RWtn\",\"iS5BrkGLzJyPK7nKt\",\"ZrKCkX7xxGGZzauFW\",\"KTFxMsjaW4xgo5ajY\",\"qD2LrwaDrSdiybLKY\",\"DPi9QGLctq2y76KuE\",\"xn7uGNKeAwPEkP9oA\",\"dkcmCKwqApX5jBggc\",\"axdSNLZpiCDF8RS6n\",\"J3upzLHuEwXH7Z2hx\",\"6MjSiiBLPcvXbXcaZ\",\"atR7uPt3durx85RSa\",\"gXTAie79kiw28tx5u\",\"J5T8gZqiZXFuFDTQ7\",\"eMuCpJ2spXWkJjWNz\",\"7scpcTEp3SEx5Wjg9\",\"oBcs8GLX2ZFLXQy8y\",\"NfMJuiBk6FN5Jc6ow\",\"fSQSHjW3e72MrWxbD\",\"MXGuntvz3byrP6WJc\",\"3LiSLdtN58n46NEqg\",\"cAP3n5NY64uoMwzRR\",\"MKT7khMBGXzA22ykf\",\"PXAcsKkssS2yLyDv2\",\"P7NmFbCJ5offXMRvB\",\"GGdmhAvxXhqhhibJN\",\"fznzd3qnvtbFkkizz\",\"q2tzvkrLASvSjkek9\",\"CHvzhtXnv8HTbPQ56\",\"QRv96jmNaYsWkxQEG\",\"qQQ4hCQpzitmHSkjS\",\"ZYT9LjgocbP4hzQK5\",\"PWgzeK859suojbrRx\",\"buX4mCQhtXCfBjeno\",\"yyo6YLQN2of6fxp49\",\"FEYpu9RWysAgW3XnP\",\"YcCLwitFMAEJSnxAW\",\"2PufnQcsHsfymufX3\",\"K6MfKMytoJJuSGewP\",\"bvmTE46bfcM4ogj34\",\"Wpn95NqWxncQrwNgz\",\"8BFSTCnoe2QggN64c\",\"yr822PZmmiDDenxpB\",\"ey3CASd6Je5LEJzfB\",\"4Lwjr34ypKNQNQCar\",\"PC3pLs36zNzpRDSuE\",\"uPGPH8AjEcsawJWkt\",\"T6iBEE2jp7f7iEF2P\",\"MpfytGFYF77emJ3cT\",\"gKnWjDjwrJh7MK2df\",\"o4ixjQGSaYqA2JoM4\",\"JhX7jvtpwNyxcc39m\",\"8sNv5PTHa7XQ8bNqR\",\"yod5YhKtPqw2GfG9B\",\"RoGGD5cpHb4ftdLDv\",\"nkH3HfJXLMNcBMM79\",\"3KkyQm77zsew58Dc2\",\"5HCu9Ydd86QgHDRNP\",\"Ds7L5bksw2QRHjrKL\",\"StNu7DPyTgEStZsMY\",\"mvJBakQ35CWAnbbEZ\",\"BrTDhPJcACL2bsrpJ\",\"fbr22rabEJMfBp7vD\",\"Qyfyyw6oC4EHAndzo\",\"jWbd7SYDzLPjc9EDh\",\"jkbavR2ATFJcpmo8M\",\"GiTogojAao5sTRHpk\",\"eHcgvkTGsH7ZziqBo\",\"9pzFiFK3ANLjQfnr2\",\"mw9464S5dnenqzvpm\"],\"quality\":[5,5,5,5,5,5,5,3,5,5,5,5,3,5,5,4,5,5,4,5,5,5]},\"tests\":{\"score\":0,\"rators\":[\"BkPgkDQGHm66X4Qai\"]},\"instructions\":{\"score\":0,\"rators\":[\"BkPgkDQGHm66X4Qai\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.7272727272727275,\"family\":[{\"_id\":\"K7Qq7HXhJWh3tgwKD\",\"language\":\"cpp\"},{\"_id\":\"ZYJNYe2tKhG2kb7Sh\",\"language\":\"javascript\"},{\"_id\":\"c68jXSBRRmhcmFSLm\",\"language\":\"php\"},{\"_id\":\"26P2iwW5WfwPGJyWE\",\"language\":\"python3\"},{\"_id\":\"ATciu97J3bMgwHQyk\",\"language\":\"ruby\"}]}}"]