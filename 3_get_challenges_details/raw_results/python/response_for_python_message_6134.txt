a["{\"msg\":\"result\",\"id\":\"1777\",\"result\":{\"_id\":\"r8yrCWBqQrb3wmYo5\",\"author\":\"Alessandro Manicone\",\"authorId\":\"AasGs8AeX9Lcb9xJn\",\"code\":\"import re\\n\\npattern = \\\"yourregularexpressionhere\\\"\",\"difficulty\":2.3529411764705883,\"familyId\":\"Jocz3bCm9sjk7ZuPx\",\"instructions\":\"A **Capturing Group** will match the characters or expressions within the parenthesis `()`. The matches will also be stored, and can be backreferenced by a backlash followed by its number. For example, `\\\\1` will access the first capturing group that appears in the expression.\\n\\n```\\ntxt1 = \\\"foo, you are such a foo\\\"\\ntxt2 = \\\"foo, you are such a bar\\\"\\ntxt3 = \\\"bar, you are such a bar\\\"\\ntxt4 = \\\"bar, you are such a foo\\\"\\npattern = r\\\"(\\\\w+),.*\\\\1\\\"\\n\\nbool(re.match(pattern, txt1)) ➞ True\\nbool(re.match(pattern, txt2)) ➞ False\\nbool(re.match(pattern, txt3)) ➞ True\\nbool(re.match(pattern, txt4)) ➞ False\\n```\\n\\nCapturing groups are often used along with quantifiers. Quantifiers will use the capturing group as a whole.\\n\\n```\\nre.findall(\\\"(go)+\\\", \\\"gogogo\\\") ➞ [\\\"gogogo\\\"]\\n```\\n\\nWrite a **regular expression** to match MAC-addresses. MAC-addresses consists of 6 two-digits hexadecimal numbers separated by a colon. Use a capturing group in your expression.\\n\\n```\\ntxt = \\\"01:32:54:67:89:AB \\\"\\npattern = \\\"yourregularexpressionhere\\\"\\n\\nbool(re.match(pattern, txt)) ➞ True\\n```\\n\\n**Warning:** the function `re.findall()` will output any capturing groups separately. If you don't want `re.findall()` to output a capture group, consider using non-capturing groups. Non capturing groups are formatted `(?:x)`, where \\\"x\\\" is the character or expression you want to match but not capture. Non capturing groups won't be remembered and can't be accessed later in your expression.\\n\\n### Notes\\n- You **don't** need to write a function, just the pattern.\\n- Do **not** remove `import re` from the code.\\n- Find more info on RegEx and capturing groups in **Resources**.\\n- You can find all the challenges of this series in my [Basic RegEx](https://edabit.com/collection/8PEq2azWDtAZWPFe2) collection.\",\"isHidden\":false,\"lab\":\"txt1 = '01:32:54:67:89:AB'\\ntxt2 = '0132546789AB'\\ntxt3 = '01:32:54:67:89'\\ntxt4 = '01:32:54:67:89:ZZ'\\n\\nTest.assert_equals(bool(re.search('\\\\(.*\\\\)', pattern)), True, 'You must use at least one capturing group in your expression')\\nTest.assert_equals(bool(re.match(pattern, txt1)), True)\\nTest.assert_equals(bool(re.match(pattern, txt2)), False, 'No colons')\\nTest.assert_equals(bool(re.match(pattern, txt3)), False, '5 numbers, we need 6')\\nTest.assert_equals(bool(re.match(pattern, txt4)), False, 'ZZ is not a hexadecima number')\\n\\n# Note from the original:\\n# Credits to https://javascript.info/regexp-groups\\n\\n# Translated from JavaScript.\\n# The RegEx series was originally posted by Isaac Pak.\",\"language\":\"python3\",\"summary\":\"A Capturing Group will match the characters or expressions within the parenthesis (). The matches will also be stored, and can be backreferenced by a backlash followed by its number. For example, \\\\1 will access the first capturing group that appears in the expression.\\n\\ntxt1 = \\\"foo, you are such a foo\\\"\\ntxt2 = \\\"foo, you are such a bar\\\"\\ntxt3 = \\\"bar, you are such\",\"tags\":[\"regex\",\"formatting\"],\"timestamp\":{\"$date\":1587110721639},\"title\":\"RegEx XX: Capturing Groups\",\"stats\":{\"completed\":{\"total\":104,\"ratings\":[2,2,2,2,2,3,2,2,2,5,3,3,4,3,2,0,2,2,2,4,4,3,3,0,2,1,2,3,3,4,0,4,4,2,3,5,2,2,0,2,1,4,1,3,3,3,3,3,3,1,0,2,2,2,2,2,3,3,1,2,0,4,4,3,2,3,2,3,4,1,2,3,3,1,2,3,1,2,0,3,2,2,2,5,1],\"rators\":[\"AasGs8AeX9Lcb9xJn\",\"tAF9Gf6PiGogbZuWs\",\"aEm3Wvj2rFYRL8Lrb\",\"GM2X83qnuLXTHe5zA\",\"DEDniTrstQYGounXT\",\"mkcf3C3NMxhYZuiLM\",\"TJxiGXcry84NLrLHK\",\"8PwfYqoDQFThzNtvf\",\"aP7JkkYer28YWrPvC\",\"8JyqsSbN2FJXPr3cw\",\"pWD2YC5s4YRCxFc2i\",\"hBKf7LeSP6i2saXjk\",\"jL4y5fTJAMBjhZmko\",\"gb9rvGus2Jv7bjZSs\",\"6E8GoWCrHpDvHZjWG\",\"7Rsc9TSGczdJwAqv2\",\"Phd2FdPjo9BhBfvKh\",\"a777e8chPvJkY3tKa\",\"586FdBhazpwJfnRYR\",\"SYQfSLYGZYcSwsnkZ\",\"3ECpdeExhBmkYXtba\",\"RuHad7wL2R98BLRXy\",\"YRstQuthRkFeBiXug\",\"9pzFiFK3ANLjQfnr2\",\"73eTfjtjyYWojAZ6r\",\"pDvFWMCD9fQwoBPcu\",\"AGMQqooexrFXgMnET\",\"JrADeNRHRTrvc98ry\",\"uzwYcrm8PvfHZR7YF\",\"bDpmwo4vm9jHeZAPk\",\"jFcHRfu77aNu6YpZg\",\"yr822PZmmiDDenxpB\",\"rQRNL3B4x9gg4SkXf\",\"SGhPxX5bHGL8zZqtt\",\"kA7GoyZSmQpCqPKu4\",\"qtHJeznDHqQ2G86sv\",\"yTtSCvGPyYna6JuRC\",\"PweZwtXTDkEwxZXQ4\",\"Lkcku4D8wh449piQh\",\"4E2CiZbgfNoFs963f\",\"hTAsnXv2Qysa8yqKu\",\"BHp9mbAEZREsE7k8E\",\"jE24TRMFGTRLrGsME\",\"ASsfbyG6AwkhqRZSB\",\"dNBGNMKLZam4bvHuZ\",\"cykCKNJcqFBxz4T8s\",\"xn7uGNKeAwPEkP9oA\",\"BtdZezHfckxRLm7xR\",\"LFSASkxgw9hr3KqmC\",\"R4SjTgDnpigJYDLyL\",\"u3HMcY3wn7T3eSfym\",\"XSt47ad5D5LLZSupD\",\"n2BRY9X8899dcG8Bw\",\"MCw7uAcoWcSTBTmr3\",\"pscBduNyf8TDHe2Km\",\"8WpvgSbQciTQWdd8T\",\"cxABox46qWvJRyidE\",\"oHbErJxjYJhD66d5w\",\"XjajdyybZZbkz8o5x\",\"QNb9Rx8BJgCWn3qgR\",\"HF28xZKSLM9wEuqNg\",\"2QziknsznNeMPRh3g\",\"J3upzLHuEwXH7Z2hx\",\"uN5t57RETi5y2z5W8\",\"c2u7qfdaYxcyuydtu\",\"LCZ6JTAhBZBmWLzm8\",\"sX9GZp3fYyQLrBKMJ\",\"Yp7uvStL97cC9fKkY\",\"incG8tH2dwThHg35f\",\"6MjSiiBLPcvXbXcaZ\",\"DpnYcMphntjsQ96qg\",\"iS5BrkGLzJyPK7nKt\",\"6xTu4r8NMczBFvmtz\",\"Y6w9WxXzRweSiy3Ls\",\"m9Dj3WvWDwiu73PRh\",\"StNu7DPyTgEStZsMY\",\"Fmzo3d9rAck5RH8cq\",\"ScaZG69jog5kcqGtQ\",\"2PufnQcsHsfymufX3\",\"iojEnnY9FsMfYzp6f\",\"82nyWEcznkx7ZA9ip\",\"qNszsXx28cTxvGSNj\",\"JwkwCHcXthnGDsdFr\",\"bvmTE46bfcM4ogj34\",\"8sNv5PTHa7XQ8bNqR\",\"vhnSA59dJGFnM32vt\",\"X4rzfxGgxx6CS7Bpz\",\"aDbjPC5E6oMAwfFdm\",\"d8qtzoLB264iP8tdY\",\"AFfw7cGg83uYk2Miy\",\"oBcs8GLX2ZFLXQy8y\",\"JKb5rhL6DKcCAypF9\",\"H9KZi2cjt4FwH7qog\",\"97DthwdtrBLm2y2Yj\",\"gKnWjDjwrJh7MK2df\",\"v39g8eNsCQLNfXQwg\",\"yod5YhKtPqw2GfG9B\",\"ag8tcfPvJZWpRnwet\",\"MHiQx9E8rPgzJfsJy\",\"ExtLwnLBEiWJxAskL\",\"Wi4H6ayKsNDWWQCG5\"],\"quality\":[5,4,5,5,3,5,4,5,5,5,5,3,4,5,5,4,5,4,5,3,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":4.476190476190476,\"family\":[{\"_id\":\"2xLmzBEjBzg4LSygs\",\"language\":\"javascript\"},{\"_id\":\"r8yrCWBqQrb3wmYo5\",\"language\":\"python3\"}]}}"]