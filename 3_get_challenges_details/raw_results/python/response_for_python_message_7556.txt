a["{\"msg\":\"result\",\"id\":\"2483\",\"result\":{\"_id\":\"LkD2sM45i269Nr8NL\",\"author\":\"xAlien95\",\"authorId\":\"cRpaCxYRmGcN3Nsoj\",\"code\":\"def polygon_name(n):\\n\\t\",\"difficulty\":4.818181818181818,\"familyId\":\"qMFzFBHHFAt5WYLK8\",\"instructions\":\"Every **polygon** has an official name. Individual polygons are named according to the number of sides, combining a Greek-derived numerical prefix with the suffix _-gon_, e.g. _pentagon_, _dodecagon_.\\n\\nWrite a function that takes an integer `n` as argument and returns the official name of a n-sided polygon.\\n\\nThe following prefixes table is used to construct the name of a polygon.\\n\\n|| Ones || Tens || Hundreds\\n-:| - | -:| - | -:| -\\n1 | hena-, hen- | 10 | deca- | 100 | hecta-\\n2 | di-, do- | 20 | icosi-, icosa- | 200 | dohecta-\\n3 | tri-, tria- | 30 | triaconta- | 300 | triahecta-\\n4 | tetra- | 40 | tetraconta- | 400 | tetrahecta-\\n5 | penta- | 50 | pentaconta- | 500 | pentahecta-\\n6 | hexa- | 60 | hexaconta- | 600 | hexahecta-\\n7 | hepta- | 70 | heptaconta- | 700 | heptahecta-\\n8 | octa- | 80 | octaconta- | 800 | octahecta-\\n9 | ennea- | 90 | enneaconta- | 900 | enneahecta-\\n\\nFor polygons with 3 through 9 sides, simply add \\\"-gon\\\" to the ones prefixes. For 10 through 99 sides, you return the tens prefix followed by the ones prefix and then by \\\"-gon\\\". For 100 through 999 sides, you start from the hundreds prefix, then add the tens prefix and finally the ones prefix followed by \\\"-gon\\\".\\n\\nFor polygons with more than 999 sides, the following prefixes are used similarly to how \\\"conta-\\\" and \\\"hecta-\\\" are used for tens and hundreds places respectively:\\n\\nPlace | Prefix\\n-:| -\\n10 | conta-\\n100 | hecta-\\n1000 | chilia-\\n10,000 | myria-\\n100,000 | decamyria-\\n200,000 | icosamyria-\\n300,000 | triacontamyria-\\n1,000,000 | mega-\\n1,000,000,000 | giga-\\n1,000,000,000,000 | tera-\\n\\nAnd finally, the 10¹⁰⁰-gon is called **googolgon** and the ∞-gon (with a countable infinite number of sides) is called **apeirogon**.\\n\\n### Examples\\n```\\npolygon_name(3) ➞ \\\"triangle\\\"\\n# exception of: tri-gon\\n\\npolygon_name(4) ➞ \\\"quadrilateral\\\"\\n# exception of: tetra-gon\\n\\npolygon_name(5) ➞ \\\"pentagon\\\"\\n# penta-gon\\n\\npolygon_name(7) ➞ \\\"heptagon\\\"\\n# hepta-gon\\n\\npolygon_name(19) ➞ \\\"enneadecagon\\\"\\n# ennea-deca-gon\\n\\npolygon_name(36) ➞ \\\"triacontahexagon\\\"\\n# triaconta-hexa-gon\\n\\npolygon_name(428) ➞ \\\"tetrahectaicosioctagon\\\"\\n# tetrahecta-icosi-octa-gon\\n\\npolygon_name(12345) ➞ \\\"myriadichiliatriahectatetracontapentagon\\\"\\n# myria-dichilia-triahecta-tetraconta-penta-gon\\n```\\n\\n### Notes\\n- The triangle, quadrilateral and nonagon are exceptions, although the regular forms _trigon_, _tetragon_, and _enneagon_ are sometimes encountered as well.\\n- Check **Tests** to spot other exceptions.\",\"isHidden\":false,\"lab\":\"Test.assert_equals(polygon_name(1), \\\"henagon\\\")\\nTest.assert_equals(polygon_name(2), \\\"digon\\\")\\nTest.assert_equals(polygon_name(3), \\\"triangle\\\")\\nTest.assert_equals(polygon_name(4), \\\"quadrilateral\\\")\\nTest.assert_equals(polygon_name(5), \\\"pentagon\\\")\\nTest.assert_equals(polygon_name(6), \\\"hexagon\\\")\\nTest.assert_equals(polygon_name(7), \\\"heptagon\\\")\\nTest.assert_equals(polygon_name(8), \\\"octagon\\\")\\nTest.assert_equals(polygon_name(9), \\\"nonagon\\\")\\nTest.assert_equals(polygon_name(10), \\\"decagon\\\")\\nTest.assert_equals(polygon_name(11), \\\"hendecagon\\\")\\nTest.assert_equals(polygon_name(12), \\\"dodecagon\\\")\\nTest.assert_equals(polygon_name(13), \\\"tridecagon\\\")\\nTest.assert_equals(polygon_name(14), \\\"tetradecagon\\\")\\nTest.assert_equals(polygon_name(15), \\\"pentadecagon\\\")\\nTest.assert_equals(polygon_name(16), \\\"hexadecagon\\\")\\nTest.assert_equals(polygon_name(17), \\\"heptadecagon\\\")\\nTest.assert_equals(polygon_name(18), \\\"octadecagon\\\")\\nTest.assert_equals(polygon_name(19), \\\"enneadecagon\\\")\\nTest.assert_equals(polygon_name(20), \\\"icosagon\\\")\\nTest.assert_equals(polygon_name(21), \\\"icosihenagon\\\")\\nTest.assert_equals(polygon_name(22), \\\"icosidigon\\\")\\nTest.assert_equals(polygon_name(23), \\\"icositrigon\\\")\\nTest.assert_equals(polygon_name(24), \\\"icositetragon\\\")\\nTest.assert_equals(polygon_name(25), \\\"icosipentagon\\\")\\nTest.assert_equals(polygon_name(26), \\\"icosihexagon\\\")\\nTest.assert_equals(polygon_name(27), \\\"icosiheptagon\\\")\\nTest.assert_equals(polygon_name(28), \\\"icosioctagon\\\")\\nTest.assert_equals(polygon_name(29), \\\"icosienneagon\\\")\\nTest.assert_equals(polygon_name(30), \\\"triacontagon\\\")\\nTest.assert_equals(polygon_name(31), \\\"triacontahenagon\\\")\\nTest.assert_equals(polygon_name(32), \\\"triacontadigon\\\")\\nTest.assert_equals(polygon_name(33), \\\"triacontatrigon\\\")\\nTest.assert_equals(polygon_name(34), \\\"triacontatetragon\\\")\\nTest.assert_equals(polygon_name(35), \\\"triacontapentagon\\\")\\nTest.assert_equals(polygon_name(36), \\\"triacontahexagon\\\")\\nTest.assert_equals(polygon_name(37), \\\"triacontaheptagon\\\")\\nTest.assert_equals(polygon_name(38), \\\"triacontaoctagon\\\")\\nTest.assert_equals(polygon_name(39), \\\"triacontaenneagon\\\")\\nTest.assert_equals(polygon_name(40), \\\"tetracontagon\\\")\\nTest.assert_equals(polygon_name(41), \\\"tetracontahenagon\\\")\\nTest.assert_equals(polygon_name(42), \\\"tetracontadigon\\\")\\nTest.assert_equals(polygon_name(47), \\\"tetracontaheptagon\\\")\\nTest.assert_equals(polygon_name(73), \\\"heptacontatrigon\\\")\\nTest.assert_equals(polygon_name(88), \\\"octacontaoctagon\\\")\\nTest.assert_equals(polygon_name(89), \\\"octacontaenneagon\\\")\\nTest.assert_equals(polygon_name(90), \\\"enneacontagon\\\")\\nTest.assert_equals(polygon_name(99), \\\"enneacontaenneagon\\\")\\nTest.assert_equals(polygon_name(100), \\\"hectagon\\\")\\nTest.assert_equals(polygon_name(101), \\\"hectahenagon\\\")\\nTest.assert_equals(polygon_name(102), \\\"hectadigon\\\")\\nTest.assert_equals(polygon_name(110), \\\"hectadecagon\\\")\\nTest.assert_equals(polygon_name(111), \\\"hectahendecagon\\\")\\nTest.assert_equals(polygon_name(112), \\\"hectadodecagon\\\")\\nTest.assert_equals(polygon_name(113), \\\"hectatridecagon\\\")\\nTest.assert_equals(polygon_name(118), \\\"hectaoctadecagon\\\")\\nTest.assert_equals(polygon_name(120), \\\"hectaicosagon\\\")\\nTest.assert_equals(polygon_name(121), \\\"hectaicosihenagon\\\")\\nTest.assert_equals(polygon_name(127), \\\"hectaicosiheptagon\\\")\\nTest.assert_equals(polygon_name(130), \\\"hectatriacontagon\\\")\\nTest.assert_equals(polygon_name(164), \\\"hectahexacontatetragon\\\")\\nTest.assert_equals(polygon_name(183), \\\"hectaoctacontatrigon\\\")\\nTest.assert_equals(polygon_name(195), \\\"hectaenneacontapentagon\\\")\\nTest.assert_equals(polygon_name(200), \\\"dohectagon\\\")\\nTest.assert_equals(polygon_name(250), \\\"dohectapentacontagon\\\")\\nTest.assert_equals(polygon_name(255), \\\"dohectapentacontapentagon\\\")\\nTest.assert_equals(polygon_name(360), \\\"triahectahexacontagon\\\")\\nTest.assert_equals(polygon_name(722), \\\"heptahectaicosidigon\\\")\\nTest.assert_equals(polygon_name(999), \\\"enneahectaenneacontaenneagon\\\")\\nTest.assert_equals(polygon_name(1000), \\\"chiliagon\\\")\\nTest.assert_equals(polygon_name(1001), \\\"chiliahenagon\\\")\\nTest.assert_equals(polygon_name(1011), \\\"chiliahendecagon\\\")\\nTest.assert_equals(polygon_name(1111), \\\"chiliahectahendecagon\\\")\\nTest.assert_equals(polygon_name(2222), \\\"dichiliadohectaicosidigon\\\")\\nTest.assert_equals(polygon_name(3333), \\\"trichiliatriahectatriacontatrigon\\\")\\nTest.assert_equals(polygon_name(4567), \\\"tetrachiliapentahectahexacontaheptagon\\\")\\nTest.assert_equals(polygon_name(7090), \\\"heptachiliaenneacontagon\\\")\\nTest.assert_equals(polygon_name(10000), \\\"myriagon\\\")\\nTest.assert_equals(polygon_name(10002), \\\"myriadigon\\\")\\nTest.assert_equals(polygon_name(10203), \\\"myriadohectatrigon\\\")\\nTest.assert_equals(polygon_name(11111), \\\"myriachiliahectahendecagon\\\")\\nTest.assert_equals(polygon_name(12345), \\\"myriadichiliatriahectatetracontapentagon\\\")\\nTest.assert_equals(polygon_name(22222), \\\"dimyriadichiliadohectaicosidigon\\\")\\nTest.assert_equals(polygon_name(30000), \\\"trimyriagon\\\")\\nTest.assert_equals(polygon_name(56789), \\\"pentamyriahexachiliaheptahectaoctacontaenneagon\\\")\\nTest.assert_equals(polygon_name(100000), \\\"decamyriagon\\\")\\nTest.assert_equals(polygon_name(123123), \\\"dodecamyriatrichiliahectaicositrigon\\\")\\nTest.assert_equals(polygon_name(136136), \\\"tridecamyriahexachiliahectatriacontahexagon\\\")\\nTest.assert_equals(polygon_name(148148), \\\"tetradecamyriaoctachiliahectatetracontaoctagon\\\")\\nTest.assert_equals(polygon_name(200000), \\\"icosamyriagon\\\")\\nTest.assert_equals(polygon_name(202020), \\\"icosamyriadichiliaicosagon\\\")\\nTest.assert_equals(polygon_name(242424), \\\"icositetramyriadichiliatetrahectaicositetragon\\\")\\nTest.assert_equals(polygon_name(369369), \\\"triacontahexamyriaenneachiliatriahectahexacontaenneagon\\\")\\nTest.assert_equals(polygon_name(700000), \\\"heptacontamyriagon\\\")\\nTest.assert_equals(polygon_name(1000000), \\\"megagon\\\")\\nTest.assert_equals(polygon_name(1000001), \\\"megahenagon\\\")\\nTest.assert_equals(polygon_name(1010101), \\\"megamyriahectahenagon\\\")\\nTest.assert_equals(polygon_name(2233445), \\\"dimegaicositrimyriatrichiliatetrahectatetracontapentagon\\\")\\nTest.assert_equals(polygon_name(3456789), \\\"trimegatetracontapentamyriahexachiliaheptahectaoctacontaenneagon\\\")\\nTest.assert_equals(polygon_name(23456789), \\\"icositrimegatetracontapentamyriahexachiliaheptahectaoctacontaenneagon\\\")\\nTest.assert_equals(polygon_name(123456789), \\\"hectaicositrimegatetracontapentamyriahexachiliaheptahectaoctacontaenneagon\\\")\\nTest.assert_equals(polygon_name(246369000), \\\"dohectatetracontahexamegatriacontahexamyriaenneachiliagon\\\")\\nTest.assert_equals(polygon_name(1000000000), \\\"gigagon\\\")\\nTest.assert_equals(polygon_name(2101232101), \\\"digigahectahenamegaicositrimyriadichiliahectahenagon\\\")\\nTest.assert_equals(polygon_name(22022022022), \\\"icosidigigaicosidimegadimyriadichiliaicosidigon\\\")\\nTest.assert_equals(polygon_name(1000000000000), \\\"teragon\\\")\\nTest.assert_equals(polygon_name(999999999999999), \\\"enneahectaenneacontaenneateraenneahectaenneacontaenneagigaenneahectaenneacontaenneamegaenneacontaenneamyriaenneachiliaenneahectaenneacontaenneagon\\\")\",\"language\":\"python3\",\"summary\":\"Every polygon has an official name. Individual polygons are named according to the number of sides, combining a Greek-derived numerical prefix with the suffix -gon, e.g. pentagon, dodecagon.\\n\\nWrite a function that takes an integer n as argument and returns the official name of a n-sided polygon.\\n\\nThe following prefixes table is used to construct the name of a\",\"tags\":[\"strings\",\"data_structures\"],\"timestamp\":{\"$date\":1580569965207},\"title\":\"Who's That Polygon?\",\"stats\":{\"completed\":{\"total\":8,\"ratings\":[5,5,5,5,5,5,5,3,5,5,5],\"rators\":[\"cRpaCxYRmGcN3Nsoj\",\"aEm3Wvj2rFYRL8Lrb\",\"diA4hKkZ9WRCu4ive\",\"8PwfYqoDQFThzNtvf\",\"mDWNyaaQ9hvPCRzSd\",\"s5M5RvgqR9BhB9JoC\"],\"quality\":[]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":0,\"family\":[{\"_id\":\"2mDESM9ex6wvuN4BZ\",\"language\":\"cpp\"},{\"_id\":\"8ezPNZZpLTzCHotmw\",\"language\":\"javascript\"},{\"_id\":\"LkD2sM45i269Nr8NL\",\"language\":\"python3\"},{\"_id\":\"xqsJZLzEQSdihewEt\",\"language\":\"ruby\"}]}}"]