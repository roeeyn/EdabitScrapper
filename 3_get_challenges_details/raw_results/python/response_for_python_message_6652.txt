a["{\"msg\":\"result\",\"id\":\"2034\",\"result\":{\"_id\":\"3ucrYGBkvJwjbFL4G\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"def reversible_inclusive_list(start, end):\\n\\t# recursive solution here\",\"difficulty\":2.8461538461538463,\"familyId\":\"x42gWRa66MB7y8SRb\",\"instructions\":\"Write a function that, given the `start` and `end` values, returns an array containing all the numbers **inclusive** to that range. See examples below.\\n\\n### Examples\\n```\\nreversible_inclusive_list(1, 5) ➞ [1, 2, 3, 4, 5]\\n\\nreversible_inclusive_list(2, 8) ➞ [2, 3, 4, 5, 6, 7, 8]\\n\\nreversible_inclusive_list(10, 20) ➞ [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\\n\\nreversible_inclusive_list(24, 17) ➞ [24, 23, 22, 21, 20, 19, 18, 17]\\n```\\n\\n### Notes\\n- The sort order of the resulting array is dependent of the input values.\\n- All inputs provided in the test scenarios are valid.\\n- If `start` is greater than `end`, return a **descendingly** sorted array, otherwise, **ascendingly** sorted.\\n- You are expected to solve this challenge via a **recursive** approach.\\n- An iterative version of this challenge can be found via this [link](https://edabit.com/challenge/zW9JME7XNew4tgCCE).\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"from inspect import getsource\\nfrom re import findall, MULTILINE as M\\n\\ndef is_method_used(src, *fn):\\n\\ttry: return len(findall(r\\\"(\\\"+\\\"|\\\".join(fn)+\\\")\\\", getsource(src), flags=M)) < 1\\n\\texcept OSError: return True\\n\\ndef is_recursive(src):\\n\\ttry:\\n\\t\\tn = getsource(src).split(\\\"=\\\")[0].strip() if src.__name__ == \\\"<lambda>\\\" else src.__name__\\n\\t\\treturn len(findall(n, getsource(src), flags=M)) > 1\\n\\texcept OSError: return True\\n\\nfn = ['range', 'enumerate']\\nTest.assert_not_equals(is_recursive(reversible_inclusive_list), False,\\n    'Recursion is required!')\\nTest.assert_not_equals(is_method_used(reversible_inclusive_list, *fn), False,\\n    'The following methods: [{}] are not acceptable.'.format(', '.join(fn)))\\n\\nactual_param = [[5, 1], [6, 2], [10, 20], [24, 17], [40, 50], [51, 41], [11, 66], [9, 3], [6, 16]]\\nexpected_param = [\\n  [5, 4, 3, 2, 1],\\n  [6, 5, 4, 3, 2],\\n  [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],\\n  [24, 23, 22, 21, 20, 19, 18, 17],\\n  [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50],\\n  [51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41],\\n  [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\\n   40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66],\\n  [9, 8, 7, 6, 5, 4, 3],\\n  [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\\n]\\nfor i, n in enumerate(actual_param): Test.assert_equals(reversible_inclusive_list(*n), expected_param[i])\",\"language\":\"python3\",\"quality\":5,\"summary\":\"Write a function that, given the start and end values, returns an array containing all the numbers inclusive to that range. See examples below.\\n\\nExamples\\nreversibleinclusivelist(1, 5) ➞ [1, 2, 3, 4, 5]\\n\\nreversibleinclusivelist(2, 8) ➞ [2, 3, 4, 5, 6, 7, 8]\\n\\nreversibleinclusivelist(10, 20) ➞ [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\\n\\nreversibleinclusivelist(\",\"tags\":[\"recursion\",\"numbers\",\"logic\",\"math\"],\"timestamp\":{\"$date\":1604910065760},\"title\":\"Recursion: Reversible Inclusive List Ranges\",\"stats\":{\"completed\":{\"total\":52,\"ratings\":[5,5,5,5,5,5,5,3,3,3,0,1,3,4,5,5,1,2,1,5,5,3,2,2,5,5,3,1,4,0,4,2,5,5,4,0,5,2,0,3,2,1,2,0,0,2,5,2,1,0,0,2],\"quality\":[5],\"rators\":[\"a777e8chPvJkY3tKa\",\"8PwfYqoDQFThzNtvf\",\"J3upzLHuEwXH7Z2hx\",\"xn7uGNKeAwPEkP9oA\",\"mDWNyaaQ9hvPCRzSd\",\"aEm3Wvj2rFYRL8Lrb\",\"fznzd3qnvtbFkkizz\",\"zd9FLSzsGz3evKafy\",\"gJYuGdkXEWWmGRLzu\",\"buX4mCQhtXCfBjeno\",\"5dHucvf2qBYyKim7X\",\"yLS55vSaoGh7EE82L\",\"FEYpu9RWysAgW3XnP\",\"s5M5RvgqR9BhB9JoC\",\"fSQSHjW3e72MrWxbD\",\"iS5BrkGLzJyPK7nKt\",\"tkdRHAExhDq8ryDJT\",\"8JyqsSbN2FJXPr3cw\",\"yr822PZmmiDDenxpB\",\"XNmN6ztj36a7eChbD\",\"i5vBMfK6ciHrsREgE\",\"eHcgvkTGsH7ZziqBo\",\"8sNv5PTHa7XQ8bNqR\",\"iojEnnY9FsMfYzp6f\",\"QRv96jmNaYsWkxQEG\",\"yjtdwc2AC4jA2RWtn\",\"2PufnQcsHsfymufX3\",\"J23RcmzbdtBbPCTjT\",\"wZ22E8EXW4qasgru2\",\"RGxcgGLNWPCeSaPFb\",\"tAF9Gf6PiGogbZuWs\",\"T6iBEE2jp7f7iEF2P\",\"MpfytGFYF77emJ3cT\",\"rhS8qXRjZcpDXkwnE\",\"gKnWjDjwrJh7MK2df\",\"Yp7uvStL97cC9fKkY\",\"X3wwwrmqPzkm3g63X\",\"auMqvWdfF3X9BPR8k\",\"49jS26aDa6Z6ctPm4\",\"SbGLSZ5piLATC8bop\",\"yKMkq6fx5LuJyKZti\",\"aiqruLbboPvFkh3qi\",\"26mGBs9zw7CiqtDHe\",\"TL2pcbkoT8sfE7ksY\",\"4NciP26PBCX2D5fTi\",\"mhy2iAigxc4HWtQrj\",\"6LM8M5po6dnKArYAe\",\"GTKsdeEihE636Le9i\"]},\"flags\":0},\"editorId\":\"a777e8chPvJkY3tKa\",\"family\":[{\"_id\":\"h3rDzi2j5t2h7jtJi\",\"language\":\"java\"},{\"_id\":\"LKTiopxKdDRARMvri\",\"language\":\"javascript\"},{\"_id\":\"3ucrYGBkvJwjbFL4G\",\"language\":\"python3\"}]}}"]