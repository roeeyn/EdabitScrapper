a["{\"msg\":\"result\",\"id\":\"1107\",\"result\":{\"_id\":\"SChr3sBY5ZKwHBHLH\",\"author\":\"Luis Pereira\",\"authorId\":\"aEm3Wvj2rFYRL8Lrb\",\"code\":\"def sort_it(lst):\\n\\t\",\"difficulty\":1.5740740740740742,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"tSkM7gieb5p3NcNyW\",\"instructions\":\"In this challenge you will be given a list similar to the following:\\n\\n```\\n[[3], 4, [2], [5], 1, 6]\\n```\\n\\nIn words, elements of the list are _either an integer or a list containing a single integer_.\\nIf you try to sort this list via `sorted([[3], 4, [2], [5], 1, 6])`, Python will whine about not being able to compare integers and lists.\\n\\nHowever, us humans can clearly see that this list can reasonably be sorted according to \\\"the content of the elements\\\" as:\\n\\n```\\n[1, [2], [3], 4, [5], 6]\\n```\\n\\nCreate a function that, given a list similar to the above, sorts the list according to the \\\"content of the elements\\\".\\n\\n### Examples\\n```\\nsort_it([4, 1, 3]) ➞ [1, 3, 4]\\n\\nsort_it([[4], [1], [3]]) ➞ [[1], [3], [4]]\\n\\nsort_it([4, [1], 3]) ➞ [[1], 3, 4]\\n\\nsort_it([[4], 1, [3]]) ➞ [1, [3], [4]]\\n\\nsort_it([[3], 4, [2], [5], 1, 6]) ➞ [1, [2], [3], 4, [5], 6]\\n```\\n\\n### Notes\\nTo reiterate, elements of the list will be either integers or lists with a single integer.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(sort_it([4, 1, 3]), [1, 3, 4])\\nTest.assert_equals(sort_it([[4], [1], [3]]), [[1], [3], [4]])\\nTest.assert_equals(sort_it([4, [1], 3]), [[1], 3, 4])\\nTest.assert_equals(sort_it([[4], 1, [3]]), [1, [3], [4]])\\nTest.assert_equals(sort_it([[3], 4, [2], [5], 1, 6]), [1, [2], [3], 4, [5], 6])\\nTest.assert_equals(sort_it([[3], 7, [9], [5], 1, 6]), [1, [3], [5], 6, 7, [9]])\\nTest.assert_equals(sort_it([[3], 7, [9], [5], 1, 6, [0]]), [[0], 1, [3], [5], 6, 7, [9]])\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,0,1,2,2,2,2,1,2,1,2,1,1,2,2,2,2,1,2,0,1,1,2,1,0,3,2,2,1,0,2,1,3,0,2,2,2,2,2,2,1,2,2,1,0,2,2,3,1,2,2,3,0,1,2,1,0,1,2,0,1,2,2,2,1,2,1,2,1,1,2,1,2,3,2,0,2,1,1,5,2,2,0,0,2,2,2,2,2,2,2,2,1,2,1,2,2,2,1,2,2,1,2,1],\"rators\":[\"aEm3Wvj2rFYRL8Lrb\",\"tAF9Gf6PiGogbZuWs\",\"AasGs8AeX9Lcb9xJn\",\"Yp7uvStL97cC9fKkY\",\"dHZqT6h4JMwk5fPC8\",\"gb9rvGus2Jv7bjZSs\",\"8JyqsSbN2FJXPr3cw\",\"s5M5RvgqR9BhB9JoC\",\"2fxapKr8XGdNeaKi2\",\"J67hC7LSEYS5JwhPj\",\"cR3ibTMxLyEdDFCHY\",\"ZNnsMeNkdDhHjSrZb\",\"8PwfYqoDQFThzNtvf\",\"Jg8ZSRXe3NoDMCqGu\",\"vLrq4dEDMM2wd68Dc\",\"jNvegJWCk5HCtEMbK\",\"yZvzB3qFb8pkHy4dg\",\"hnyhBFWwNCz9mDfSi\",\"2QGRoQn2dRq3scu7k\",\"gJYuGdkXEWWmGRLzu\",\"HF28xZKSLM9wEuqNg\",\"DEDniTrstQYGounXT\",\"wf98HW4sLSE4F4N6z\",\"aRqQ42J5zqCmBNd8w\",\"KdNDysEsy2TW5QRJ2\",\"9pzFiFK3ANLjQfnr2\",\"kYWb8BwpKwunQkxeX\",\"nfXGHENb5md7m355s\",\"ahk2qiXKJA753wAJk\",\"yr822PZmmiDDenxpB\",\"nQRzZKeDKuLRf9chX\",\"DrkR35NqnP9NDLbq6\",\"4rwxLqLs2mNZNg8NB\",\"JS3hNM3XXkxPdg3yk\",\"PXAcsKkssS2yLyDv2\",\"a777e8chPvJkY3tKa\",\"XrqNzJ2FRG8HnGiR6\",\"qZQxPQ2kaNKAMesHT\",\"ZrKCkX7xxGGZzauFW\",\"2ptN2mhjFwFcHyPZd\",\"H4abACFDH5t8CnnyH\",\"iS5BrkGLzJyPK7nKt\",\"syRNbbPdLCGXbH2Gy\",\"eMuCpJ2spXWkJjWNz\",\"9CoqdidjM9KbeKnHY\",\"FEYpu9RWysAgW3XnP\",\"sbJcFfQjQ59Wfg4Cd\",\"yjtdwc2AC4jA2RWtn\",\"mDWNyaaQ9hvPCRzSd\",\"kRAYfZ4CtCh5E8ugt\",\"GaJNJwcdyB9ueYFst\",\"HqmxnQJM66Y57twhn\",\"Ecg4m7srYGgZsb4Ck\",\"YcCLwitFMAEJSnxAW\",\"X5MqeHyPh6cSQCXnk\",\"hRiMXDZNAzyPd5tpt\",\"NNE5HNRXAkmhrWgyQ\",\"oBcs8GLX2ZFLXQy8y\",\"M8dQuMrEpP8Hc3tHN\",\"YA7SDhpgEtsqynvNL\",\"n2BRY9X8899dcG8Bw\",\"Nb6LYPoQP6KJZt8mz\",\"7K2GEb5TZRtSpyyGS\",\"3cF6NXq3ZEwdkgSjb\",\"mxX4rH5ELYkdZ2Mbw\",\"RehJGBFS6CYiWdjZx\",\"zd9FLSzsGz3evKafy\",\"tpxMgkGSHwBjS95Ta\",\"p8qqFdJ3FSk5x9z3G\",\"KLmLKaJPfsYxp42p2\",\"QRv96jmNaYsWkxQEG\",\"EMJ6uvBZkie429gdg\",\"KTFxMsjaW4xgo5ajY\",\"qD2LrwaDrSdiybLKY\",\"DPi9QGLctq2y76KuE\",\"DYDJTyGgKFnBRLm2r\",\"wRttWTM59y8m5mx7x\",\"HnoDeuYM8h3PkXtSz\",\"J3upzLHuEwXH7Z2hx\",\"dYPkStFnLvAMsHSzZ\",\"spqXrjG3ZFa2j5uTR\",\"dj5AyG5fWP8FdsSmZ\",\"5XiuAqicKD4hBdu63\",\"RGMbFMZXJr7DhcAJy\",\"5HCu9Ydd86QgHDRNP\",\"d8qtzoLB264iP8tdY\",\"dBzwBtRjZqB98DJeB\",\"3pxHTZBsv7MKzFG6Y\",\"J5T8gZqiZXFuFDTQ7\",\"h7Ew43m8hP8JAhM5K\",\"5hQnRWiKkhgKJXNMP\",\"eYfPWvZwnJQkHbSTK\",\"5S9nX4rKsnCcnv4Cz\",\"Jqk2uJZZxEv5wZFze\",\"buX4mCQhtXCfBjeno\",\"srJ34BaybkQh3qRkM\",\"GGdmhAvxXhqhhibJN\",\"mPctfMYEsFDhbTikW\",\"4RsakkyRXyYGwFxEa\",\"Ds7L5bksw2QRHjrKL\",\"qAby4AWXmTNeusvg3\",\"sHjfbGQGLHE6JR6qu\",\"CHvzhtXnv8HTbPQ56\",\"66a9xX73nmTEuKs9k\",\"XujK3rHd3JcM9TLJy\",\"PC3pLs36zNzpRDSuE\",\"xn7uGNKeAwPEkP9oA\",\"yod5YhKtPqw2GfG9B\",\"9Ly8afdtofp8DXzrt\",\"ey3CASd6Je5LEJzfB\",\"eHcgvkTGsH7ZziqBo\",\"EfxwqhYdapX3dMQC2\",\"8BFSTCnoe2QggN64c\",\"LQxof8pGabGuWP7Gn\",\"BrTDhPJcACL2bsrpJ\",\"4eTjpALZNQvm4KZKb\",\"JhX7jvtpwNyxcc39m\",\"suArq5BbSy7gD6xri\",\"2PufnQcsHsfymufX3\",\"dzS6WBTMHyFEag6Fp\",\"4TmgHkn5vqyHK3sYC\",\"pduNK68oazqQTtbLp\",\"pPpmP7xeJzGgK362R\",\"4Lwjr34ypKNQNQCar\",\"wrL4iX2CCSqDCCty3\",\"MKT7khMBGXzA22ykf\",\"Wi4H6ayKsNDWWQCG5\",\"3w4GAEqkDeDBdgJ7B\",\"E2hpke7mHxAWsw5t9\"],\"total\":136,\"quality\":[5,4,5,5,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]},\"flags\":0},\"summary\":\"In this challenge you will be given a list similar to the following:\\n\\n[[3], 4, [2], [5], 1, 6]\\n\\nIn words, elements of the list are either an integer or a list containing a single integer.\\nIf you try to sort this list via sorted([[3], 4, [2], [5], 1, 6]), Python will whine about not being able to compare integers and lists.\\n\\nHowever, us humans can clearly see t\",\"tags\":[\"sorting\",\"arrays\",\"language_fundamentals\"],\"timestamp\":{\"$date\":1586395031112},\"title\":\"Sort the Unsortable\",\"quality\":4.884615384615385,\"family\":[{\"_id\":\"yX9Jd6s9eF75ZK43K\",\"language\":\"java\"},{\"_id\":\"zemLfbNWaKuhrbJPt\",\"language\":\"javascript\"},{\"_id\":\"SChr3sBY5ZKwHBHLH\",\"language\":\"python3\"},{\"_id\":\"KtD5iTKtnEyqCufya\",\"language\":\"ruby\"}]}}"]