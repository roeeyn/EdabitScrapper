a["{\"msg\":\"result\",\"id\":\"2007\",\"result\":{\"_id\":\"rbeuWab36FAiLj65m\",\"author\":\"Harsh Gupta\",\"authorId\":\"Wpn95NqWxncQrwNgz\",\"code\":\"def grouping(w):\\n\\t\",\"difficulty\":2.8,\"familyId\":\"TCfqhxjhvgo6rc88M\",\"instructions\":\"Write a function that groups words by the **number of capital letters** and returns a dictionary of object entries whose keys are the **number of capital letters** and the values are the groups.\\n\\n### Examples\\n```\\ngrouping([\\\"HaPPy\\\", \\\"mOOdy\\\", \\\"yummy\\\", \\\"mayBE\\\"]) ➞ {\\n  0: [\\\"yummy\\\"],\\n  2: [\\\"mayBE\\\", \\\"mOOdy\\\"],\\n  3: [\\\"HaPPy\\\"]\\n}\\n\\ngrouping([\\\"eeny\\\", \\\"meeny\\\", \\\"miny\\\", \\\"moe\\\"]) ➞ {\\n  0: [\\\"eeny\\\", \\\"meeny\\\", \\\"miny\\\", \\\"moe\\\"]\\n}\\n\\ngrouping([\\\"FORe\\\", \\\"MoR\\\", \\\"bOR\\\", \\\"tOR\\\", \\\"sOr\\\", \\\"lor\\\"]) ➞ {\\n  0: [\\\"lor\\\"],\\n  1: [\\\"sOr\\\"],\\n  2: [\\\"MoR\\\", \\\"bOR\\\", \\\"tOR\\\"],\\n  3: [\\\"FORe\\\"]\\n}\\n```\\n\\n### Notes\\n- The object entries have to be sorted by the **number of capital letters**.\\n- The groups will be arrays of all words sharing the same number of capital letters.\\n- The groups have to be sorted alphabetically (ignoring case).\\n- Words will be unique.\",\"lab\":\"Test.assert_equals(grouping([\\\"MOVIE\\\", \\\"TAKE\\\", \\\"PERSON\\\"]), \\n{4:[\\\"TAKE\\\"],\\n5:[\\\"MOVIE\\\"],\\n6:[\\\"PERSON\\\"]})\\n\\nTest.assert_equals(grouping([\\\"the\\\", \\\"them\\\", \\\"theme\\\", \\\"EVERY\\\"]),\\n{0:[\\\"the\\\", \\\"them\\\", \\\"theme\\\"],\\n5:[\\\"EVERY\\\"]})\\n\\nTest.assert_equals(grouping([\\\"HaPPy\\\", \\\"mOOdy\\\", \\\"yummy\\\", \\\"mayBE\\\"]),\\n{0:[\\\"yummy\\\"],\\n2:[\\\"mayBE\\\", \\\"mOOdy\\\"],\\n3:[\\\"HaPPy\\\"]})\\n\\nTest.assert_equals(grouping([\\\"eeny\\\", \\\"meeny\\\", \\\"miny\\\", \\\"moe\\\"]),\\n{0:[\\\"eeny\\\", \\\"meeny\\\", \\\"miny\\\", \\\"moe\\\"]})\\n\\nTest.assert_equals(grouping([\\\"FORe\\\", \\\"MoR\\\", \\\"bOR\\\", \\\"tOR\\\", \\\"sOr\\\", \\\"lor\\\"]), \\n{0:[\\\"lor\\\"],\\n1:[\\\"sOr\\\"],\\n2:[\\\"bOR\\\", \\\"MoR\\\", \\\"tOR\\\"],\\n3:[\\\"FORe\\\"]})\",\"language\":\"python3\",\"summary\":\"Write a function that groups words by the number of capital letters and returns a dictionary of object entries whose keys are the number of capital letters and the values are the groups.\\n\\nExamples\\ngrouping([\\\"HaPPy\\\", \\\"mOOdy\\\", \\\"yummy\\\", \\\"mayBE\\\"]) ➞ {\\n  0: [\\\"yummy\\\"],\\n  2: [\\\"mayBE\\\", \\\"mOOdy\\\"],\\n  3: [\\\"HaPPy\\\"]\\n}\\n\\ngrouping([\\\"eeny\\\", \\\"meeny\\\", \\\"miny\\\", \\\"moe\\\"]) ➞ {\\n  0: [\\\"e\",\"tags\":[\"objects\",\"sorting\",\"strings\"],\"timestamp\":{\"$date\":1564441525902},\"title\":\"Capitalization Families\",\"stats\":{\"completed\":{\"total\":81,\"ratings\":[4,4,4,4,4,2,3,0,3,4,2,2,2,3,4,2,0,4,5,4,2,4,3,2,0,2,4,2,4,3,4,2,4,3,3,3,2,4,4,4,4,2,3,3,0,4,2,1,3,3,4,2,3,0,3,3,4,4,4,4,2,3,2,3,0,3,2,3,0,3],\"rators\":[\"tAF9Gf6PiGogbZuWs\",\"8JyqsSbN2FJXPr3cw\",\"YAsRhvoARsuNigs6L\",\"gb9rvGus2Jv7bjZSs\",\"GgLd4eWBu79mdjtkP\",\"C9LKGu2g5hSijvDzA\",\"AYaEkTWLMmfzpwejr\",\"yZvzB3qFb8pkHy4dg\",\"BFNm9gacwba9KyLFW\",\"hsrNYf3WbexXJKhCq\",\"hXfFac4r4q24eT8Es\",\"T2vhHPhRR96hRizq8\",\"3ifAHQzsMasfQySoL\",\"D6Z9oT2ZhjBCxuL2o\",\"eXW8reZCCZHQzJjQi\",\"nYoc6fEraRbFYbESd\",\"HqmxnQJM66Y57twhn\",\"C4QntmkYtB89GNtpd\",\"s5M5RvgqR9BhB9JoC\",\"FHSJnAYTbcsKFgeQa\",\"JAe93nc5vNewSckSB\",\"6ShafRStcvew4GfCh\",\"2fxapKr8XGdNeaKi2\",\"FgkYtHLxeD8pETJ8T\",\"Jqk2uJZZxEv5wZFze\",\"8PwfYqoDQFThzNtvf\",\"cFc8CaGvpNoCyoD9w\",\"pmgFEciNrd3ES9tuu\",\"Yp7uvStL97cC9fKkY\",\"aEm3Wvj2rFYRL8Lrb\",\"ywk3XGvcmpTgRxwZa\",\"AasGs8AeX9Lcb9xJn\",\"daFMtxYmCNMQ9HNsJ\",\"kYWb8BwpKwunQkxeX\",\"Nua6T3dBurBy3Qfg9\",\"fznzd3qnvtbFkkizz\",\"TppLLwi3RZptkewZ4\",\"ZNnsMeNkdDhHjSrZb\",\"R4SjTgDnpigJYDLyL\",\"Ecg4m7srYGgZsb4Ck\",\"a777e8chPvJkY3tKa\",\"dzS6WBTMHyFEag6Fp\",\"W5TajitmCyxz87zAC\",\"x4dfavjLEcrvAF3QQ\",\"xn7uGNKeAwPEkP9oA\",\"f2BoqyCpgnmjEjLqx\",\"yTtSCvGPyYna6JuRC\",\"KZ2xddpM2f9JRaryB\",\"585XRBCotKx6wh96Q\",\"v9KtC8YLbMWmXiW2H\",\"7fJvDZzmtsoLXhmje\",\"HF28xZKSLM9wEuqNg\",\"iS5BrkGLzJyPK7nKt\",\"mDWNyaaQ9hvPCRzSd\",\"gJYuGdkXEWWmGRLzu\",\"fjo64MWRERriEhtqc\",\"gSFJPsMXnqAog3Q9f\",\"8sNv5PTHa7XQ8bNqR\",\"DQskEvAv5KiJDPtGF\",\"eYfPWvZwnJQkHbSTK\",\"DPi9QGLctq2y76KuE\",\"p8qqFdJ3FSk5x9z3G\",\"8nE8QHnFYsHCFebte\",\"iojEnnY9FsMfYzp6f\",\"J3upzLHuEwXH7Z2hx\",\"yjtdwc2AC4jA2RWtn\",\"QRv96jmNaYsWkxQEG\",\"aFYzioHvZPvPaunsg\",\"GTKsdeEihE636Le9i\",\"MpfytGFYF77emJ3cT\",\"eHcgvkTGsH7ZziqBo\",\"PytNZK9mNiRiZxPrm\",\"gKnWjDjwrJh7MK2df\",\"2PufnQcsHsfymufX3\",\"gXTAie79kiw28tx5u\",\"suArq5BbSy7gD6xri\",\"d8qtzoLB264iP8tdY\",\"kyNKtj2QFGXPPsx3n\"],\"quality\":[5,5,5,5,4,4,5,5,5,5,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.846153846153846,\"family\":[{\"_id\":\"XRXcuP6QjH9CuqqwY\",\"language\":\"java\"},{\"_id\":\"socoDGxk3JGKezRYm\",\"language\":\"javascript\"},{\"_id\":\"rbeuWab36FAiLj65m\",\"language\":\"python3\"},{\"_id\":\"xgHr9ewXdu4ZsSgtS\",\"language\":\"ruby\"}]}}"]