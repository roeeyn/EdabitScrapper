a["{\"msg\":\"result\",\"id\":\"1304\",\"result\":{\"_id\":\"8Fwv2f8My4kcNjMZh\",\"author\":\"cuber1234\",\"authorId\":\"DpqiRAm2yo3W2x4HX\",\"code\":\"class ones_threes_nines:\\n\\t\",\"difficulty\":1.9887640449438202,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"pMMsLycmFGd2brmXK\",\"instructions\":\"Given an integer between 0 and 26, make a variable (self.answer). That variable would be assigned to a string in this format:\\n\\n```\\n\\\"nines:your answer, threes:your answer, ones:your answer\\\"\\n```\\n\\nYou need to find out how many ones, threes, and nines it would at least take for the number of each to add up to the given integer when multiplied by one, three or nine (depends).\\n\\n### Examples\\n```\\nones_threes_nines(10) ➞ \\\"nines:1, threes:0, ones:1\\\"\\n\\nones_threes_nines(15) ➞ \\\"nines:1, threes:2, ones:0\\\"\\n\\nones_threes_nines(22) ➞ \\\"nines:2, threes:1, ones:1\\\"\\n```\\n\\n### Notes\\n- Each of the ones, threes or nines could only be either 0, 1 or 2.\\n- You must use a class.\\n- After the comma, you must put a space.\\n- See [version #1](https://edabit.com/challenge/X6xZ2EaqqQbGF7Bwv) of this series.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"n1 = ones_threes_nines(1)\\nTest.assert_equals(n1.answer, 'nines:0, threes:0, ones:1')\\nn2 = ones_threes_nines(5)\\nTest.assert_equals(n2.answer, 'nines:0, threes:1, ones:2')\\nn3 = ones_threes_nines(7)\\nTest.assert_equals(n3.answer, 'nines:0, threes:2, ones:1')\\nn4 = ones_threes_nines(10)\\nTest.assert_equals(n4.answer, 'nines:1, threes:0, ones:1')\\nn5 = ones_threes_nines(12)\\nTest.assert_equals(n5.answer, 'nines:1, threes:1, ones:0')\\nn6 = ones_threes_nines(15)\\nTest.assert_equals(n6.answer, 'nines:1, threes:2, ones:0')\\nn7 = ones_threes_nines(22)\\nTest.assert_equals(n7.answer, 'nines:2, threes:1, ones:1')\\nn8 = ones_threes_nines(25)\\nTest.assert_equals(n8.answer, 'nines:2, threes:2, ones:1')\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,4,2,3,2,1,2,2,1,2,4,2,1,2,3,2,3,3,2,1,1,3,2,2,0,2,0,3,2,2,3,2,2,1,1,2,3,1,2,2,2,2,3,3,2,2,2,2,3,0,3,1,0,3,4,3,2,1,3,1,2,2,2,2,1,3,1,0,3,1,3,1,1,2,2,2,3,0,1,0,3,2,2,2,2,1,1,0,3,2,2,3,1,2,2,1,2,3,2,3,2,4,2,2,2,3,3,2,1,2,2,4,2,2,3,0,1,3,2,2,2,0,3,2,3,3,1,2,2,3,3,2,5,1,2,3,2,3,3,3,2,2,1,3,2,0,2,2,3,2,3,1,3,2,1,2,0,2,2,4,3,3,3,2,1,2,0,2,2,0,0,2,0,0,0,1,0,2,3,2,1,2,2,2,2,2,3,3,2,2,2,1,4,1,3,3,3,3,2,2,2,1,3,3,0,2,0,3,0,0,3,2,1,1,1,3,1,3,3,3,3,3,3,3,1,3,3,0,1,2,1,3,2,2,3,3,2,2,2,2,2,3,3,1,2,2,0,2,3,2,0,1,1,2,3,5,1,2,3,3,2,2],\"rators\":[\"DpqiRAm2yo3W2x4HX\",\"Myj6dKftMt3rgEnbb\",\"AasGs8AeX9Lcb9xJn\",\"8PwfYqoDQFThzNtvf\",\"ZNnsMeNkdDhHjSrZb\",\"jL4y5fTJAMBjhZmko\",\"2ptN2mhjFwFcHyPZd\",\"s5M5RvgqR9BhB9JoC\",\"aEm3Wvj2rFYRL8Lrb\",\"n2BRY9X8899dcG8Bw\",\"gJYuGdkXEWWmGRLzu\",\"gb9rvGus2Jv7bjZSs\",\"YRstQuthRkFeBiXug\",\"R4SjTgDnpigJYDLyL\",\"tAF9Gf6PiGogbZuWs\",\"m6D2RuQJwrAK6WB3v\",\"mDWNyaaQ9hvPCRzSd\",\"6BZMSxML2SjRgRCZn\",\"xyk7XeuqKQYZqd7Rk\",\"JQ5uoxA4WZgN6HyJk\",\"yJmwiykSNfLv9NqJ2\",\"PTdhjojHbByKRv2Sc\",\"XghikBbq7obhPSKjX\",\"6SKDJwXpev4qPSzgM\",\"yoLy2DcMG3nZXNwv2\",\"HF28xZKSLM9wEuqNg\",\"pDvFWMCD9fQwoBPcu\",\"WwMjW4MJRuNFExoPc\",\"DEDniTrstQYGounXT\",\"LjoNTyGEMfBpMHHus\",\"a777e8chPvJkY3tKa\",\"eg5iwxQWCEYnktrcm\",\"FEYpu9RWysAgW3XnP\",\"YA7SDhpgEtsqynvNL\",\"JZbBYihgT6m7bKvgc\",\"sfoAF6eygyfp6MWx3\",\"hnyhBFWwNCz9mDfSi\",\"8JyqsSbN2FJXPr3cw\",\"JS3hNM3XXkxPdg3yk\",\"ZgmNZTKEEBSyKujwG\",\"PQ2u53dewdokYyn4i\",\"ekQh3jzgGLsEMbKo3\",\"3hSzE837A9SKsi5X4\",\"YLtspA8ec6ntcoMMf\",\"Yp7uvStL97cC9fKkY\",\"PXAcsKkssS2yLyDv2\",\"QHcNEadRcCStpv7dj\",\"MK8HigdFigfJzHhyo\",\"pPtmnJ7q9QchoG2Jq\",\"dynD89GCHoau9fvh7\",\"N2PoJu64nXdf37dpE\",\"ttF57murnFHjD7p5n\",\"cykCKNJcqFBxz4T8s\",\"omQhBXTwsBMv6kgz4\",\"nMDMMPWxws2kTgGKk\",\"Nfsj4eNFDjaFa39ga\",\"CkjEKj3n9GYn5ATxL\",\"W5TajitmCyxz87zAC\",\"iojEnnY9FsMfYzp6f\",\"hSX6w93tcdsfpPzzM\",\"Ecg4m7srYGgZsb4Ck\",\"s6qiPXptvyxxEy3vm\",\"Lh4HoR6iLi2HwXCSA\",\"zZDaXBxMzTCBhNkgL\",\"ZJQW3bL2KzxJcdEoc\",\"ZgWwEdWxjy83WpPQX\",\"dzS6WBTMHyFEag6Fp\",\"eMuCpJ2spXWkJjWNz\",\"uEeZaTW4HK8AL4BjQ\",\"Pe8vWpDHRuH9nSGKW\",\"CwXsu25ygLEwQbmQC\",\"cR3ibTMxLyEdDFCHY\",\"nys6kJatAFrKL59Pf\",\"BrTDhPJcACL2bsrpJ\",\"kQCnJdq4psgrpvphr\",\"p8qqFdJ3FSk5x9z3G\",\"qqqn6konMMH6m5J3M\",\"JmkgMJyvrvqTMfdqF\",\"syRNbbPdLCGXbH2Gy\",\"bccs9koJxyQ9XNiLC\",\"KdNDysEsy2TW5QRJ2\",\"8zQnyekbSwzhoJymu\",\"MtJ33oGd6Skry3dj4\",\"MCw7uAcoWcSTBTmr3\",\"8CMrRwp82esK8EFGo\",\"4fhjJBvLBWh6QeSih\",\"yjtdwc2AC4jA2RWtn\",\"HqmxnQJM66Y57twhn\",\"7yWgTrg8ywHK5yP2d\",\"Wv2vJnEj8ywNmARoF\",\"ji5f27FPz4wRRF6Ls\",\"9pzFiFK3ANLjQfnr2\",\"HnoDeuYM8h3PkXtSz\",\"ZpjYqnL4FXAF4Fvtx\",\"RehJGBFS6CYiWdjZx\",\"wS2o3x4nrsadtC3xP\",\"yZMHS95vJhb7xa3A3\",\"cxABox46qWvJRyidE\",\"5yCTFkEssPeChR6Wr\",\"FK2fEQ3F6DD3buSLJ\",\"8BFSTCnoe2QggN64c\",\"dHQEM9zAAmkPPXtHS\",\"kyEERyssssTQaZ4y5\",\"atWzkW6mFPc7Gw97m\",\"b3BWzq6Yu8nswak5u\",\"nPfdEqn8RZmDzAeMW\",\"FRL8gkq6aBCoTzxTF\",\"CDxSfgu845yYMYAri\",\"NojQykDfP7WjHckg4\",\"PFmCJw9aHadXJFPrX\",\"e9CoJsqxv3E8aGW7E\",\"BukjbnZ6zC2otopwc\",\"TJTW7smpQBhGbDzXS\",\"ZmTp5yHZXcQSzRxja\",\"TM2t3Le4qPcqSnzKX\",\"zFRDhqEv2jk3y8yNA\",\"XkJ9G89xpZiTj58Eq\",\"RuvsqfBoAzmjPyoSW\",\"Kz7ee56Ht4Ns8JjBj\",\"YwbXmhvQQjZuMQbKb\",\"CRGb53t7cpX45XgFo\",\"SgZ2t9xFuRqdJGofp\",\"GpobkaeudKjYdotzG\",\"QEkDGPgh9LRAWECEx\",\"k2Eo3wyfZZ6KxvKhN\",\"2j3dYApeb9FZ5eP6d\",\"DNGkwLuAzEACszkAx\",\"3Zceb8GudqAG3onG3\",\"oH5za8CuPrt4XyoKx\",\"F2MRnAX2wwKW9aYXy\",\"r2N4kpphFEgbcn5Sb\",\"pBTrwvNXXzXoBfPSm\",\"J5T8gZqiZXFuFDTQ7\",\"hkiz2Nv927cYGrA86\",\"DYDJTyGgKFnBRLm2r\",\"Nb6LYPoQP6KJZt8mz\",\"5Z4o2pWDzmbpw4JHJ\",\"3jr2dyncMZqhkMHTP\",\"WzxYNYGEiP97ZeNBo\",\"mG8HqKiAQFTdRZthG\",\"J3upzLHuEwXH7Z2hx\",\"BNogTonsWhcfseTjX\",\"QRv96jmNaYsWkxQEG\",\"zApBvTm8hRY8mMjCd\",\"xn7uGNKeAwPEkP9oA\",\"vSvippNru5pBnJQJn\",\"P7NmFbCJ5offXMRvB\",\"uznjMqKo6mzk5fsJh\",\"2QziknsznNeMPRh3g\",\"XbxHXmh5ZmRN2gw3K\",\"tpxMgkGSHwBjS95Ta\",\"j49s8dHmmiyPxZmWj\",\"CLypXaZksY99mpRCm\",\"hKqn2TRhqwwyLcE66\",\"nc7bRhkxgKyqusYe3\",\"jSaW4kdeAAGoLxcuP\",\"eLHHzgshMq64895Xw\",\"gg4hgFGgmvK9ZxENE\",\"BCPNmfdwmRDs6FqcN\",\"fznzd3qnvtbFkkizz\",\"pdum9ZEFzqdXqtjyQ\",\"kXEfD7xxEyWd7oxxL\",\"6MjSiiBLPcvXbXcaZ\",\"oBcs8GLX2ZFLXQy8y\",\"myiufZZ5sZbMf6ckA\",\"qAby4AWXmTNeusvg3\",\"DqLLJmvonxtaq5nbv\",\"gXTAie79kiw28tx5u\",\"sKfrD9gjCDHuqLzSk\",\"DqNQn9Jsxcu5HijKE\",\"LDfAjJ6TbJza7YRSR\",\"TBgeubg4e97LpjA4r\",\"hNn94W488mJCYZEB6\",\"4fjSgcqhQQZM2ZFRP\",\"9MER8SZ9Xo6xNYMj8\",\"7op39dyw7MJj52e8E\",\"srC8SN3W4FT2Z26zp\",\"SYoBM3m2TMLYkvqZ8\",\"6xTu4r8NMczBFvmtz\",\"CEd9tLdXeDeNHSzys\",\"6dZFWNGPH8GKYA8sN\",\"DpnYcMphntjsQ96qg\",\"5S9nX4rKsnCcnv4Cz\",\"7scpcTEp3SEx5Wjg9\",\"DR5tfZrFaSDeLygnA\",\"Cgt87ARgp4CTX4YvN\",\"NPHbTDFiEfTMjEXh4\",\"p5EN3tadeCfPkW3CB\",\"vCxuabDxEv9YC3Szb\",\"ygDJ7HEzRoJZyPEF4\",\"e2vWoEQh5g3c7NS5o\",\"csFCABy3kwwpoQXNy\",\"8ieKsbMbuKRYFNwie\",\"h4x2jaMdj5aQZbW5g\",\"PARDjDrwXvhpjRR9e\",\"Lg4t6SEWgtYz4u7Cj\",\"CB48GHbw7xtwmiuPn\",\"iKCnQydNKZp3KoCoP\",\"rx88g3SpXfGecJigj\",\"kKQXWroPHKjwJGMwM\",\"axdSNLZpiCDF8RS6n\",\"sftR9DgM4jpwtxfAM\",\"oN7LLGSx4FcGmPDmL\",\"3rYttPo5tiChZfeze\",\"nFbmNzMQ38TncmfQX\",\"Zou6b9CXEdqX9n2ur\",\"7q8oBsCHwn48Ppnrq\",\"rp78xovPotpBHRXxR\",\"AFJTgLaPrtbqSvh7b\",\"r9hcWPFRkykfmBh9d\",\"QRoCZoXbRtHhvy7dE\",\"7fizDi6FhnoQoueBk\",\"S6K4nFD4m4aBf43vr\",\"eYfPWvZwnJQkHbSTK\",\"3LiSLdtN58n46NEqg\",\"Jqk2uJZZxEv5wZFze\",\"yr822PZmmiDDenxpB\",\"KBxTPknCRmB2b5y3i\",\"3x5f7koWGRSkECbxF\",\"GGdmhAvxXhqhhibJN\",\"zgoEhAyhrjnsSLPGw\",\"wqdX4wXbZGgJ9Fyb7\",\"T2vhHPhRR96hRizq8\",\"fwsetg4kYeNgZJ9Mw\",\"4v8pnvxe8XSWMawR6\",\"kQH5b8MXJunh84Czq\",\"LYRCrMqzuNhy29Rvw\",\"ScaZG69jog5kcqGtQ\",\"dJzNF59j2p8jWZxiQ\",\"23oi2a3vQwhtLEbSj\",\"rfyEkETeoS96QNH4e\",\"y8Hwe9W7nZiB3ZqjB\",\"2PufnQcsHsfymufX3\",\"3PPZk27CjPHdPnWwL\",\"jhpjLPkSo6yjCPNwe\",\"BG9GLy7SLRexTz6rx\",\"2EbDCCJJvCfKkbYia\",\"yyo6YLQN2of6fxp49\",\"6daecm7mtqzp7mKso\",\"WsCqifua4yHhKp6N9\",\"NrRa4TS6uZR9xuXRt\",\"yN7aCFGmmQMAWhGMb\",\"wwMcJQRvf3X59Jyev\",\"zd9FLSzsGz3evKafy\",\"bvmTE46bfcM4ogj34\",\"Bmb3scffZ5SujLMmd\",\"8nE8QHnFYsHCFebte\",\"Wpn95NqWxncQrwNgz\",\"WQubx7DAkG6WZE8FA\",\"Dh3qTd94ZAtrFt5va\",\"W5d8SJGpWNwvgCztM\",\"Fh4gcqnntLrK3fZWN\",\"cYAHoyY26pvgnvbxD\",\"Rw9nkswSSxoMLMmYW\",\"N2wnZXkhDH86mgjQ8\",\"CHvzhtXnv8HTbPQ56\",\"Nv3kvfE2Q4YdgH7Gf\",\"Ds7L5bksw2QRHjrKL\",\"aFYzioHvZPvPaunsg\",\"g2h22xXQEA87Td3sF\",\"FgMe2gzbxog9WzaRr\",\"scpc3yg3B92H9sYkm\",\"XHShZ3WMPgGEA2vkR\",\"i9xQi3m5aJTqT8TQX\",\"4EKZKKLKZZMj76WEm\",\"dhokkFcukKdYsYA6s\",\"zBk2cwJ9SLAhFuM3K\",\"Anr7gxvxM7SxyZmwC\",\"PTDFuxAzou7W6asWt\",\"4yMggPMnAMqJN6TeR\",\"o4ixjQGSaYqA2JoM4\",\"AQSqD9oNv2uPfxZCR\",\"sbJcFfQjQ59Wfg4Cd\",\"D3Pr2EFee3652zsyR\",\"xiq3roqB5QRK3mhdr\",\"Afnps7TJQuS9sipMb\",\"ctbThYbufFCYbRK4f\",\"u7i7WPM63n42r8R8o\",\"RmD3Q7JRNQLHozeGf\",\"vhZgCDRqMncYjfFB9\",\"LNCb5rksJLJ43L4Nw\",\"u5u2YpHXiNgzDNJdX\",\"7g3vZaQXhLpxrajyg\",\"StcZaP3p3bsgi2yDd\",\"nkH3HfJXLMNcBMM79\",\"CdnBvMg7boCh8iJgP\",\"RoGGD5cpHb4ftdLDv\",\"5HCu9Ydd86QgHDRNP\",\"nkL2knkcNaiHCerW2\",\"kjvgTyRFyKHv44DcH\",\"zjzsYH3yDMEXcTvHo\",\"h7eSW2CqLgtM2CXw4\",\"rL2rRKtT2Pk8W3r94\",\"oig8ig9SE9RZa8ttL\",\"MpfytGFYF77emJ3cT\",\"8sNv5PTHa7XQ8bNqR\",\"EHtTFoDbt722AH667\",\"jWbd7SYDzLPjc9EDh\",\"JKb5rhL6DKcCAypF9\",\"mzsaCBQP3e6YourDN\",\"mvJBakQ35CWAnbbEZ\",\"4PyWFDrQcvWdse42n\",\"AFfw7cGg83uYk2Miy\",\"8tRtCXo65HG2hEa2u\",\"yod5YhKtPqw2GfG9B\",\"dSd7wHgXGQeG5BQ2P\",\"AhZwrR5qRuHYSxCd9\",\"r7XThH5bRqoB23SxH\",\"S9hHPiybdTKyuELsn\",\"yAia3z7kTm8anHb7Z\",\"9wXH7kEc2oNKszt2z\",\"NTXef7DXuRcciXrp6\",\"aEGG7AokRbyv44tji\",\"nQRzZKeDKuLRf9chX\",\"RkEnaAeCCnp4qKfN5\",\"Si6zttj84NSq7pgPC\",\"sBoNkD5c6zGSZNbqL\",\"acFDzp9EJzHg8c2rD\",\"5hM6M5jQnHjpB7Cwx\",\"Qyfyyw6oC4EHAndzo\",\"7ajSwbNMNp9ggPewT\",\"rDgKHd6ZSSpboiAj7\",\"2qtde7moqrzm7B4Ht\",\"sW78rbapvsS3AnuJe\",\"rQA9SE8nuwFueaHsR\",\"gpGXTvjS2HrY9Skq5\",\"GJmKcqu7xppQyBaTt\",\"Wi4H6ayKsNDWWQCG5\",\"3nz52ytceK73t4Gni\",\"9Gf6g4fuKc3uou9w2\",\"Las5PfxSXFshC57ew\",\"naZ3i6sSDPwsieDH7\",\"aGBPrcEMPtJTG7Sri\"],\"total\":373,\"quality\":[4,5,5,3,4,5,2,5,4,4,5,5,3,5,5,5,5,5,5,5,5,4,5,5,5,5,4,5,3,4,4,5,5,5,3,5,3,3,5,5,5,2,5,3,5,4,2,3,5,3,5,5,4,1,5,5,5,3,4,5,4,5,5,5,5,4,4,4,4,5,5]},\"flags\":1},\"summary\":\"Given an integer between 0 and 26, make a variable (self.answer). That variable would be assigned to a string in this format:\\n\\n\\\"nines:your answer, threes:your answer, ones:your answer\\\"\\n\\nYou need to find out how many ones, threes, and nines it would at least take for the number of each to add up to the given integer when multiplied by one, three or nine (depend\",\"tags\":[\"classes\",\"math\",\"numbers\",\"strings\"],\"timestamp\":{\"$date\":1591911769732},\"title\":\"Ones, Threes and Nines (Version #2)\",\"quality\":4.309859154929577,\"family\":[{\"_id\":\"8Fwv2f8My4kcNjMZh\",\"language\":\"python3\"}]}}"]