a["{\"msg\":\"result\",\"id\":\"2106\",\"result\":{\"_id\":\"ntpgCFga2rRzB53QZ\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"def staircase(n):\\n\\t# recursive code here\\n\\t\",\"difficulty\":2.9529411764705884,\"editorId\":\"a777e8chPvJkY3tKa\",\"familyId\":\"f2s4vAnbZ3jaQ7jTq\",\"instructions\":\"Create a function that will build a staircase using the underscore `_` and hash `#` symbols. A positive value denotes the staircase's upward direction and downwards for a negative value.\\n\\n### Examples\\n```\\nstaircase(3) ➞ \\\"__#\\\\n_##\\\\n###\\\"\\n__#\\n_##\\n###\\n\\nstaircase(7) ➞ \\\"______#\\\\n_____##\\\\n____###\\\\n___####\\\\n__#####\\\\n_######\\\\n#######\\\"\\n______#\\n_____##\\n____###\\n___####\\n__#####\\n_######\\n#######\\n\\nstaircase(2) ➞ \\\"_#\\\\n##\\\"\\n_#\\n##\\n\\nstaircase(-8) ➞ \\\"########\\\\n_#######\\\\n__######\\\\n___#####\\\\n____####\\\\n_____###\\\\n______##\\\\n_______#\\\"\\n########\\n_#######\\n__######\\n___#####\\n____####\\n_____###\\n______##\\n_______#\\n```\\n\\n### Notes\\n- All inputs are either positive or negative values.\\n- The string to be returned should be adjoined with the newline character `\\\\n`.\\n- You're expected to solve this challenge using a **recursive approach**.\\n- You can read more on recursion (see **Resources** tab) if you aren't familiar with it or haven't fully understood the concept before taking this challenge.\\n- A non-recursive version of this challenge can be found [here](https://edabit.com/challenge/YqLBEZJR9ySndYQpH).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"from inspect import getsource\\nfrom re import findall, MULTILINE\\n\\ndef check_recursive(fn):\\n  try:\\n    src, n = getsource(fn), fn.__name__\\n    if n == '<lambda>': n = src.split('=')[0].strip()\\n    return len(findall(n, src, flags=MULTILINE)) > 1\\n  except OSError: return True\\n\\nTest.assert_not_equals(check_recursive(staircase), False, 'Recursion is required!')\\n\\nnum_vector = [3, 7, 2, -8, 4, -12, 11, -6]\\nres_vector = [\\n  \\\"__#\\\\n_##\\\\n###\\\",\\n  \\\"______#\\\\n_____##\\\\n____###\\\\n___####\\\\n__#####\\\\n_######\\\\n#######\\\",\\n  \\\"_#\\\\n##\\\",\\n  \\\"########\\\\n_#######\\\\n__######\\\\n___#####\\\\n____####\\\\n_____###\\\\n______##\\\\n_______#\\\",\\n  \\\"___#\\\\n__##\\\\n_###\\\\n####\\\",\\n  \\\"############\\\\n_###########\\\\n__##########\\\\n___#########\\\\n____########\\\\n_____#######\\\\n______######\\\\n_______#####\\\\n________####\\\\n_________###\\\\n__________##\\\\n___________#\\\",\\n  \\\"__________#\\\\n_________##\\\\n________###\\\\n_______####\\\\n______#####\\\\n_____######\\\\n____#######\\\\n___########\\\\n__#########\\\\n_##########\\\\n###########\\\",\\n  \\\"######\\\\n_#####\\\\n__####\\\\n___###\\\\n____##\\\\n_____#\\\"\\n]\\nfor i, x in enumerate(num_vector): Test.assert_equals(staircase(x), res_vector[i])\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[4,4,4,4,4,4,4,1,3,3,2,5,2,1,3,5,4,2,5,5,5,3,3,2,2,5,3,3,2,2,4,2,4,5,0,5,1,5,4,5,4,2,4,0,0,0,4,1,5,2,2,3,3,2,4,1,5,2,4,2,3,3,3,3,1,2,3,5,5,1,1,4,5,3,3,2,0,5,0,4,2,2,3,1,3],\"rators\":[\"8PwfYqoDQFThzNtvf\",\"a777e8chPvJkY3tKa\",\"aEm3Wvj2rFYRL8Lrb\",\"4ZicxybyvEsuA9iET\",\"MP8r4QdbYAf2exkbk\",\"s5M5RvgqR9BhB9JoC\",\"vTfyrr4pGddp8rbXc\",\"v5MZC2xfA6GdEmhDe\",\"bJxaKHJqR82EWw8Su\",\"WzEhzQcMwc4sw8z7T\",\"5dHucvf2qBYyKim7X\",\"gJYuGdkXEWWmGRLzu\",\"yGGWB7LzShM3K46tt\",\"GgLd4eWBu79mdjtkP\",\"bJaPCBx63YxdJAuTS\",\"6gS4E2C84vBYTYeDZ\",\"ztDNuxZgtEMizcDoN\",\"gb9rvGus2Jv7bjZSs\",\"nmTQJCALZXq6BY7qo\",\"4fhjJBvLBWh6QeSih\",\"bytuztnmvXdvKAHN9\",\"8JyqsSbN2FJXPr3cw\",\"xn7uGNKeAwPEkP9oA\",\"Ecg4m7srYGgZsb4Ck\",\"CsRC2mvd4EoinLn3Y\",\"SGhPxX5bHGL8zZqtt\",\"oZiGwL535nJ5ZMJr7\",\"GGprTwrkjuccmrQRg\",\"jL4y5fTJAMBjhZmko\",\"EH68sDGGufTc5vifi\",\"h4x2jaMdj5aQZbW5g\",\"iS5BrkGLzJyPK7nKt\",\"WPf3wuMaAipBActzR\",\"j8FR2cHxpsYtNo9Dw\",\"TqFpA8dN7fP4HYZ28\",\"SbGLSZ5piLATC8bop\",\"xoEMkaCmtm9iEFhdJ\",\"p8qqFdJ3FSk5x9z3G\",\"XNmN6ztj36a7eChbD\",\"b3Dk2LqoEgripS3Y3\",\"8sNv5PTHa7XQ8bNqR\",\"2PufnQcsHsfymufX3\",\"gPATLQDMC8zw6N74K\",\"eHcgvkTGsH7ZziqBo\",\"iojEnnY9FsMfYzp6f\",\"u5r7mFQ2Swy3aXj2F\",\"yjtdwc2AC4jA2RWtn\",\"AasGs8AeX9Lcb9xJn\",\"tAF9Gf6PiGogbZuWs\",\"Ep6fHYmKXXFXWmWiJ\",\"DPi9QGLctq2y76KuE\",\"PH32cNxBjrK4a28sn\",\"T6iBEE2jp7f7iEF2P\",\"gKnWjDjwrJh7MK2df\",\"gYnwyrXn2XAL8brvv\",\"zCJDDCNy5qFMCQWF7\",\"yacfqvQ4CSWNNqSCt\",\"MnFyfhFw3jxtk3GPC\",\"dyYpK5BLYDDmEZRpt\",\"hySpcNb4eGY7eGe79\",\"FaDdT4LpuTyjEz9f7\",\"W7zy48sTaBEStFhEC\",\"hkiz2Nv927cYGrA86\",\"9pqtNWrsTJdZcRbEZ\",\"RriCQNKWZmYKexd8R\",\"oCvDFWSTuYqwrutTx\",\"5QN8R22z43SrwoHDz\",\"iAcwuExLPJovDccb5\",\"HYn6FhRjBtb6wjtJq\",\"CSuaZAHNjHiTgPEt4\",\"yMdAh9cHwcw7BBxZ2\",\"Sh7oCvsWeiAt6TYFx\",\"MnsnfTLvgczGQfp3J\",\"GBzLNB7tNnp5rx5e7\",\"ydY5tGe36c3TPLgxH\",\"bgXFjmTEzS2pHpbYd\",\"efcsSdKgupNnf9DKD\",\"NZkZq9n9yosde4bW2\",\"o6afXeSPTEbfRDrmJ\",\"aSA96vc72NSoJS9SB\",\"aMc9NJ928GmJRB7oS\",\"iK3AFtJY9bFiTTXv5\",\"8PMaZwToeg92Ziifx\",\"m9pwzQmYJBtxRd7F5\",\"Fk9YcngdB7meTXSgA\",\"HtFEoQdPXYXQ4BFP2\",\"tgTjqzS6qtwxSsi7x\",\"buX4mCQhtXCfBjeno\",\"gXTAie79kiw28tx5u\",\"GTKsdeEihE636Le9i\",\"yTtSCvGPyYna6JuRC\",\"Z85ajWfZ4jDPkbvR4\",\"SSzKEp9FwFKWFTnQL\"],\"total\":102,\"quality\":[4,4,3,5,5,5,5,5,3,5,5,5,4]},\"flags\":0},\"summary\":\"Create a function that will build a staircase using the underscore _ and hash # symbols. A positive value denotes the staircase's upward direction and downwards for a negative value.\\n\\nExamples\\nstaircase(3) ➞ \\\"_#\\\\n##\\\\n###\\\"\\n__\\n_\\n\\nstaircase(7) ➞ \\\"_#\\\\n##\\\\n###\\\\n####\\\\n#####\\\\n######\\\\n#######\\\"\\n__\\n_\\n__\\n_\\n__\\n_\\n\\nstaircase(2) ➞ \\\"_#\\\\n##\\\"\\n_\\n\\nstaircase(-8) ➞ \\\"########\\\\n#####\",\"tags\":[\"recursion\",\"strings\"],\"timestamp\":{\"$date\":1595099417716},\"title\":\"Recursion: Underscore-Hash Staircase\",\"quality\":4.461538461538462,\"family\":[{\"_id\":\"ZLTwdq8n5HK7DP9Eq\",\"language\":\"javascript\"},{\"_id\":\"ntpgCFga2rRzB53QZ\",\"language\":\"python3\"}]}}"]