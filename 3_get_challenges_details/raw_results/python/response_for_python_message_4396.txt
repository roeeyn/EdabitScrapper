a["{\"msg\":\"result\",\"id\":\"915\",\"result\":{\"_id\":\"sfqudQHQ3HPpd7dZb\",\"author\":\"almac\",\"authorId\":\"wx7BHoB5zSSQJpBXy\",\"code\":\"def rps(p1, p2):\\n\\t\",\"difficulty\":1.4566037735849056,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"AJctW8q6P3vBjZr3D\",\"instructions\":\"Create a function which takes two strings (`p1` and `p2` \u2060— which represent player 1 and 2) as arguments and returns a string stating the winner in a game of _Rock, Paper, Scissors_.\\n\\nEach argument will contain a single string: `\\\"Rock\\\"`, `\\\"Paper\\\"`, or `\\\"Scissors\\\"`. Return the winner according to the following rules:\\n\\n- **Rock** beats **Scissors**\\n- **Scissors** beats **Paper**\\n- **Paper** beats **Rock**\\n\\nIf `p1` wins, return the string `\\\"The winner is p1\\\"`. If `p2` wins, return the string `\\\"The winner is p2\\\"` and if `p1` and `p2` are the same, return `\\\"It's a draw\\\"`.\\n\\n### Examples\\n```\\nrps(\\\"Rock\\\", \\\"Paper\\\") ➞ \\\"The winner is p2\\\"\\n\\nrps(\\\"Scissors\\\", \\\"Paper\\\") ➞ \\\"The winner is p1\\\"\\n\\nrps(\\\"Paper\\\", \\\"Paper\\\") ➞ \\\"It's a draw\\\"\\n```\\n\\n### Notes\\nAll inputs will be valid strings.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(rps(\\\"Rock\\\", \\\"Paper\\\"), \\\"The winner is p2\\\")\\nTest.assert_equals(rps(\\\"Scissors\\\", \\\"Rock\\\"), \\\"The winner is p2\\\")\\nTest.assert_equals(rps(\\\"Scissors\\\", \\\"Paper\\\"), \\\"The winner is p1\\\")\\nTest.assert_equals(rps(\\\"Paper\\\", \\\"Rock\\\"), \\\"The winner is p1\\\")\\nTest.assert_equals(rps(\\\"Paper\\\", \\\"Paper\\\"), \\\"It's a draw\\\")\\nTest.assert_equals(rps(\\\"Rock\\\", \\\"Rock\\\"), \\\"It's a draw\\\")\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,3,2,1,1,1,2,3,2,3,1,1,2,1,1,1,2,1,1,3,2,1,1,1,1,0,2,2,0,0,2,1,1,2,1,1,1,1,2,1,2,1,2,0,0,2,2,2,2,1,1,2,1,1,1,2,2,1,2,2,2,0,1,2,2,2,1,2,2,2,2,1,1,1,2,2,2,2,1,2,1,1,1,2,1,2,2,1,3,1,2,1,0,2,0,1,2,2,2,2,1,1,3,2,5,1,2,2,2,1,2,1,0,2,2,2,2,1,1,3,1,1,2,0,1,2,2,2,1,1,2,2,1,1,2,3,0,2,2,1,1,2,2,1,2,2,3,2,2,1,1,1,2,1,1,1,0,0,0,0,2,1,2,2,0,2,2,1,2,1,2,2,0,1,2,2,2,2,2,0,0,2,1,2,2,0,1,0,1,2,0,1,2,2,2,2,2,1,0,1,1,2,2,1,2,2,2,0,2,1,0,2,2,1,2,2,1,2,2,2,2,0,0,1,1,2,3,1,2,2,0,0,1,2,2,2,1,2,1,2,0,2,1,1,2,2,2,0,2,1,0,0,2,1,2,2,0,3,2,2],\"rators\":[\"wx7BHoB5zSSQJpBXy\",\"8PwfYqoDQFThzNtvf\",\"AasGs8AeX9Lcb9xJn\",\"gb9rvGus2Jv7bjZSs\",\"tAF9Gf6PiGogbZuWs\",\"7Cj6X9pDutzt3ywmN\",\"4CFzv558qbGcpQwc4\",\"cjD9FrC9xrz5NLX4Z\",\"Z4Wd4iFu5mdjSJDSA\",\"nuc8rnPKXMC3cJRqm\",\"C4QntmkYtB89GNtpd\",\"pQKacoMccp6HYmWZ8\",\"gGKdWeHT7gmvCD2yD\",\"m3Ys49mF2fcS3cpKJ\",\"kNb5vx7PjsmtYLKxH\",\"Q2q7wd5e5cfCrwPxq\",\"2fxapKr8XGdNeaKi2\",\"v3fjGuc7Pq4yjFygS\",\"s5M5RvgqR9BhB9JoC\",\"PXAcsKkssS2yLyDv2\",\"yZvzB3qFb8pkHy4dg\",\"8JyqsSbN2FJXPr3cw\",\"yKttxy9JGn5Jzwuj6\",\"zQ7vxc2qQS47js8iY\",\"cR3ibTMxLyEdDFCHY\",\"mxX4rH5ELYkdZ2Mbw\",\"vLrq4dEDMM2wd68Dc\",\"YKH6nxQ4JG4gEBoD2\",\"dHZqT6h4JMwk5fPC8\",\"HDksZLiRAmpnCKHta\",\"hnyhBFWwNCz9mDfSi\",\"aRqQ42J5zqCmBNd8w\",\"Yp7uvStL97cC9fKkY\",\"jNvegJWCk5HCtEMbK\",\"aEm3Wvj2rFYRL8Lrb\",\"ZNnsMeNkdDhHjSrZb\",\"BEdxteC2PKrmTLbdM\",\"q5a96XumccZyhQNyL\",\"gJYuGdkXEWWmGRLzu\",\"TrSnx94ydx5c6JDB4\",\"KRSKj7ikX2ytWFmod\",\"HF28xZKSLM9wEuqNg\",\"YaKCTFge7R4AmacxX\",\"2QGRoQn2dRq3scu7k\",\"Jqk2uJZZxEv5wZFze\",\"DEDniTrstQYGounXT\",\"Cc2Cgj4MWXZxsTooC\",\"PtaiHYXnMwb2rWqQW\",\"eHhL37DG7oW3vTcg7\",\"yyDYNCFnvD7DHRgCG\",\"cR2YL369v9ifrcw2v\",\"Kf2z6kZ7hfzg2YyEJ\",\"M8dQuMrEpP8Hc3tHN\",\"LF4CJn9GnyjBEdzop\",\"oig8ig9SE9RZa8ttL\",\"FS78GK2Ysu7u8ndMs\",\"9pzFiFK3ANLjQfnr2\",\"44dAzThMuyGZ5StXB\",\"So6PHm74mfJuY2WTs\",\"SxttuqW49sadDrQFf\",\"JCusodx8pbLAEHA9G\",\"4rwxLqLs2mNZNg8NB\",\"5cmvoGYHLNmT8n6jP\",\"5dHucvf2qBYyKim7X\",\"sbJcFfQjQ59Wfg4Cd\",\"Nua6T3dBurBy3Qfg9\",\"HX3rdXuRCx6AhYcya\",\"gJY5ChczJoqy7yPt2\",\"2hdZsJrYzpXMPtMA4\",\"rrNComrAKsGM6iaLh\",\"3qYxBYzigw9hXBwB5\",\"nfXGHENb5md7m355s\",\"ChsgvqRgjE5TqEr6i\",\"CYzKNikwEfSE3pxuD\",\"FzxTj4GuujhwpZM7y\",\"FEYpu9RWysAgW3XnP\",\"nx3gu7spJkhJ35qQa\",\"a777e8chPvJkY3tKa\",\"ahk2qiXKJA753wAJk\",\"hab8YixsXxe4CcZpP\",\"d6w7S49nhKzCTWLp6\",\"QDrLtnBsA2LJfptvT\",\"2L4wnWTvoXdAst9wG\",\"fC9JefGNsEAbDz8iY\",\"XLt5axWG8EfPw5WsF\",\"ZqjP4M6dzu32To33K\",\"WSLnCZNtpiCrdaXnd\",\"a6YauP2vcqJHhvHFq\",\"DrkR35NqnP9NDLbq6\",\"77aKj5YC9AqDMTneZ\",\"atWzkW6mFPc7Gw97m\",\"XrqNzJ2FRG8HnGiR6\",\"JS3hNM3XXkxPdg3yk\",\"MKJhn7goNzuGtB5y9\",\"H9KZi2cjt4FwH7qog\",\"LQhEi8yAC8WzEYY8h\",\"w2NGhfAGohsq6WhhN\",\"5JyY5eDxizCH7TYT7\",\"3mjWeWdivedo9z4mK\",\"4yNLEwL2rsx4EE5Nt\",\"orFLgPDw9H5MDzmwo\",\"2ptN2mhjFwFcHyPZd\",\"RjKTSeuvQkmCjyofZ\",\"R4SjTgDnpigJYDLyL\",\"J5T8gZqiZXFuFDTQ7\",\"Wv2vJnEj8ywNmARoF\",\"H4abACFDH5t8CnnyH\",\"ZrKCkX7xxGGZzauFW\",\"GSoEdG3NzkmwFHr9D\",\"uTnApNMzJmmAWzgtg\",\"NG8PWBSjsM8mMhQEq\",\"3cF6NXq3ZEwdkgSjb\",\"kXEfD7xxEyWd7oxxL\",\"j7ebNFtte6fSkMWjj\",\"TwKZ3835iFLog2RuQ\",\"KGiM2KiXnNJYfSzBF\",\"iojEnnY9FsMfYzp6f\",\"rqeHYkD4nZpboXkFe\",\"Pe8vWpDHRuH9nSGKW\",\"r3hY3XhLXZ8bgj9tZ\",\"fJJirq6bMLnDWYRRs\",\"yjtdwc2AC4jA2RWtn\",\"PGbjnZPNe9hgnK6nx\",\"HqmxnQJM66Y57twhn\",\"NNE5HNRXAkmhrWgyQ\",\"CTKmXtrqDYqJBnuy8\",\"pxYwqzguszbxDKETi\",\"ta5CrWnBCRusD2WMo\",\"oBcs8GLX2ZFLXQy8y\",\"Pw3gpBkyTg8e6oAsa\",\"n2BRY9X8899dcG8Bw\",\"YA7SDhpgEtsqynvNL\",\"7K2GEb5TZRtSpyyGS\",\"jL4y5fTJAMBjhZmko\",\"y372QoK9hSQGAWjCF\",\"w2HhxvSLmDhaGCAjE\",\"oB8MCqep5GBXXuhB8\",\"b3BWzq6Yu8nswak5u\",\"b5oEvBqHWLRnJgp22\",\"ayAfcoqEdZrX9pMge\",\"RehJGBFS6CYiWdjZx\",\"zd9FLSzsGz3evKafy\",\"mG8HqKiAQFTdRZthG\",\"tpxMgkGSHwBjS95Ta\",\"sX9GZp3fYyQLrBKMJ\",\"KLmLKaJPfsYxp42p2\",\"k2Eo3wyfZZ6KxvKhN\",\"wniy5aKNkwYTNAkrz\",\"gXTAie79kiw28tx5u\",\"DPi9QGLctq2y76KuE\",\"KTFxMsjaW4xgo5ajY\",\"zF65F5d6w7zKiRahJ\",\"c2u7qfdaYxcyuydtu\",\"D62kvgDJ6asnsFaEw\",\"QRv96jmNaYsWkxQEG\",\"9sXqapKuC5T6ygMaf\",\"vSvippNru5pBnJQJn\",\"9CoqdidjM9KbeKnHY\",\"JRpMefSuLG38QsBvL\",\"TRhQJp2EDs9Q6sm47\",\"zZDaXBxMzTCBhNkgL\",\"J3upzLHuEwXH7Z2hx\",\"GRdzonfH6egrzm68u\",\"dYPkStFnLvAMsHSzZ\",\"rfyEkETeoS96QNH4e\",\"KJCDwGkoXh8qtbbKr\",\"cAP3n5NY64uoMwzRR\",\"dj5AyG5fWP8FdsSmZ\",\"qAby4AWXmTNeusvg3\",\"5XiuAqicKD4hBdu63\",\"wRttWTM59y8m5mx7x\",\"RGMbFMZXJr7DhcAJy\",\"5HCu9Ydd86QgHDRNP\",\"d8qtzoLB264iP8tdY\",\"kNrnnMxhFZztMTBAX\",\"shdSrDq5ZKqfpgjmu\",\"sHjfbGQGLHE6JR6qu\",\"wvAShJevJXQ9joAQD\",\"vqnLatT7RhNsSbqJf\",\"eEZ8zeWX8b3SWs84P\",\"3nied3n8KG8RSNixH\",\"HuNF3xTBzmatyGSTm\",\"vCxuabDxEv9YC3Szb\",\"KEmTti9Tza8A2FLQW\",\"TQMHB3iK7gmfmsvqZ\",\"oZd5Q4JPENTQn33a3\",\"poiKbjDNKCGrzWeW6\",\"5hQnRWiKkhgKJXNMP\",\"axdSNLZpiCDF8RS6n\",\"2H7qphwdz7PPoFKgc\",\"mh4FSvMYi6zprdMmz\",\"eYfPWvZwnJQkHbSTK\",\"C2AfMipCicfD58WJ9\",\"buX4mCQhtXCfBjeno\",\"5S9nX4rKsnCcnv4Cz\",\"WcYcQ5WbXrFtg3L6R\",\"5EPe7bdNQ69vjsKv7\",\"o4ixjQGSaYqA2JoM4\",\"GGdmhAvxXhqhhibJN\",\"6xTu4r8NMczBFvmtz\",\"JMAmMMBMrQqRy72Cc\",\"XAx9xKxRCxBmWC2fT\",\"EBYdBrXHcdqEBJsvx\",\"Ds7L5bksw2QRHjrKL\",\"srJ34BaybkQh3qRkM\",\"nqtDWq2hStPpjzDaN\",\"HNT9Xx6pnQS7wigCp\",\"2EbDCCJJvCfKkbYia\",\"T6iBEE2jp7f7iEF2P\",\"AFfw7cGg83uYk2Miy\",\"bvmTE46bfcM4ogj34\",\"66a9xX73nmTEuKs9k\",\"mfsaETo7uA4x5vqLD\",\"N2wnZXkhDH86mgjQ8\",\"yod5YhKtPqw2GfG9B\",\"PC3pLs36zNzpRDSuE\",\"8BFSTCnoe2QggN64c\",\"qZQxPQ2kaNKAMesHT\",\"EfxwqhYdapX3dMQC2\",\"BrTDhPJcACL2bsrpJ\",\"iBHx7eL6anoBnF7yQ\",\"yDKR3g2tk3ciDHBj9\",\"H8etafgMrXs7gMeRi\",\"eHcgvkTGsH7ZziqBo\",\"CHvzhtXnv8HTbPQ56\",\"2PufnQcsHsfymufX3\",\"mDWNyaaQ9hvPCRzSd\",\"ghMkPtdFCpM6w8nax\",\"H4LqzfSad6d4BCgwy\",\"9Ly8afdtofp8DXzrt\",\"R6YxHWAiLgKwy5YvC\",\"rrSC943cCKNG48sH4\",\"K6MfKMytoJJuSGewP\",\"X4rzfxGgxx6CS7Bpz\",\"WCccejkfJmRtQ8KtZ\",\"AJexRBN9cYQmqvYu6\",\"RoGGD5cpHb4ftdLDv\",\"Kv92AoBe3KjTCfiBD\",\"qzXAMXsHZGT8o5hTA\",\"PH32cNxBjrK4a28sn\",\"hR7GMiqGap4CzEWSy\",\"XD5nmvKQchKezPXhy\",\"2NDSt8HyP33cFRHsu\",\"2iFe3EHEH2YdhSKrs\",\"Afnps7TJQuS9sipMb\",\"fbyQH246PaDcXumC4\",\"2vn2FZ2DieLnifW6W\",\"uBXzq8ZaZMYkn4wW5\",\"jEAnBsQdgchcEK8M8\",\"pduNK68oazqQTtbLp\",\"9LghqktEpW4YLxdNk\",\"4TmgHkn5vqyHK3sYC\",\"QQAwjsH85EFE4qRnx\",\"4Lwjr34ypKNQNQCar\",\"4RY3zj9C2t8GGefhi\",\"vpw9yybqntyrWhaD5\",\"SGEohskFG6ouMzxAo\",\"3Zmh5qrGG4PfsS4qo\",\"A7t75uHeTLXs3bEXm\",\"qM4cFjDW9EBf6BNsA\",\"d9LBRxvADNBB5QJMB\",\"T2vhHPhRR96hRizq8\",\"dzS6WBTMHyFEag6Fp\",\"wjc4iejpErBhxWwHo\",\"m2DoMHw5bQb52qF5Z\",\"vAh63eGRwkuJtoP8v\",\"oj72iDTvN89H4gebC\",\"uGuS9YRXW2nj4p6zf\",\"M2gFMJkocQSY6bsFR\",\"yAouD3PxzED8a4gap\",\"NzbRqGWspQnWMoDrF\",\"nc7bRhkxgKyqusYe3\",\"SxHh6hcmam4WNYhGE\",\"hpT9yYe5R45poHrYR\",\"diKE3KZ33pkGmdrLj\",\"mw9464S5dnenqzvpm\",\"tCpNrXb6gLusgsPL5\",\"ey3CASd6Je5LEJzfB\",\"qB6KSTYC6H2TQEQY6\",\"QZvauaQY2vLizPP9p\",\"YRAzEBJoLvSaiPtYx\",\"trRQk8Smm8ofdbKko\",\"B4y8aoyXJtskYPFEL\",\"RGN3QTb5LXj4ZPPkj\",\"Qyfyyw6oC4EHAndzo\",\"pPpmP7xeJzGgK362R\",\"3CRf8CYo6fHSbqKQj\",\"5QN8R22z43SrwoHDz\",\"Npp9Sqz7A89xZ4ou2\",\"5sD5rXHuH5viNdSak\",\"7DXJ3mvKMHHqBLt92\",\"Ncn7Qn2LbdsiJnfFk\",\"vw4Byxdm9XQwbDtGC\",\"Wi4H6ayKsNDWWQCG5\",\"BJp2WkwLWGHHB5oQW\",\"vCeeMuYDbz3MB4vsk\",\"ruzwBPphPDRgLXdnP\",\"8uiLiJcmWxWe6qw65\",\"w7HNgDbxugTnePRZX\",\"naZ3i6sSDPwsieDH7\"],\"total\":332,\"quality\":[4,5,4,5,5,5,5,5,3,5,4,5,4,5,5,5,5,5,5,5,5,5,5,4,4,5,5,5,4,5,5,5,5,4,5,4,5,5,5,5]},\"flags\":0},\"summary\":\"Create a function which takes two strings (p1 and p2 \u2060— which represent player 1 and ) as arguments and returns a string stating the winner in a game of Rock, Paper, Scissors.\\n\\nEach argument will contain a single string: \\\"Rock\\\", \\\"Paper\\\", or \\\"Scissors\\\". Return the winner according to the following rules:\\n\\nRock beats Scissors\\nScissors beats Paper\\nPaper beats Roc\",\"tags\":[\"games\",\"conditions\",\"data_structures\"],\"timestamp\":{\"$date\":1583336926032},\"title\":\"Rock, Paper, Scissors\",\"quality\":4.725,\"family\":[{\"_id\":\"uXf7RQ5am84tup7mQ\",\"language\":\"javascript\"},{\"_id\":\"sfqudQHQ3HPpd7dZb\",\"language\":\"python3\"},{\"_id\":\"uaKrjksrjxwkmCtJu\",\"language\":\"ruby\"}]}}"]