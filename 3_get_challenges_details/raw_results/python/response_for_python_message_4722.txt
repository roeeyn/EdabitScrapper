a["{\"msg\":\"result\",\"id\":\"1077\",\"result\":{\"_id\":\"H6J4o4jqGbffYXe3Y\",\"author\":\"aryasinic\",\"authorId\":\"3LiSLdtN58n46NEqg\",\"code\":\"def relation_lst(lst):\\n\\t\",\"difficulty\":1.5616438356164384,\"editorId\":\"3LiSLdtN58n46NEqg\",\"familyId\":\"BRzSsjPp7BWrRtHym\",\"instructions\":\"Write a function which takes a list of numbers and returns a list of tuples that is a subset of product of the list with itself and first member of each tuple is less than or equall to the second one.\\n\\nIn mathematical terms:\\n\\n```\\nA x A = {(x,y)| x∈A and y∈A}\\n\\n{(x,y)| x>=y, (x,y) ∈ A x A }\\n```\\n\\n### Examples\\n```\\nrelation_list([0, 1, 2, 3]) ➞ [(0, 0), (0, 1), (0, 2), (0, 3), (1, 1), (1, 2), (1, 3), (2, 2), (2, 3)]\\n\\nrelation_lst([858, 544, 164]) ➞ [(164, 164), (164, 544), (164, 858), (544, 544), (544, 858), (858, 858)]\\n\\nrelation_lst([-1]) ➞ [(-1, -1)]\\n\\nrelation_lst([0]) ➞ [(0, 0)]\\n\\nrelation_lst([]), []\\n```\\n\\n### Notes\\nThe result should be in ascending order.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(relation_lst([0, 1, 2, 3]), [(0, 0), (0, 1), (0, 2), (0, 3), (1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3,3)])\\nTest.assert_equals(relation_lst([-276, -476, -548, 356, 133, 39, -703]), [(-703, -703), (-703, -548), (-703, -476), (-703, -276), (-703, 39), (-703, 133), (-703, 356), (-548, -548), (-548, -476), (-548, -276), (-548, 39), (-548, 133), (-548, 356), (-476, -476), (-476, -276), (-476, 39), (-476, 133), (-476, 356), (-276, -276), (-276, 39), (-276, 133), (-276, 356), (39, 39), (39, 133), (39, 356), (133, 133), (133, 356), (356, 356)])\\nTest.assert_equals(relation_lst([-314, 699, -929, -623, 146, 951, 126, 675, -458, -538, -891, 438, 460, 626, 825]), [(-929, -929), (-929, -891), (-929, -623), (-929, -538), (-929, -458), (-929, -314), (-929, 126), (-929, 146), (-929, 438), (-929, 460), (-929, 626), (-929, 675), (-929, 699), (-929, 825), (-929, 951), (-891, -891), (-891, -623), (-891, -538), (-891, -458), (-891, -314), (-891, 126), (-891, 146), (-891, 438), (-891, 460), (-891, 626), (-891, 675), (-891, 699), (-891, 825), (-891, 951), (-623, -623), (-623, -538), (-623, -458), (-623, -314), (-623, 126), (-623, 146), (-623, 438), (-623, 460), (-623, 626), (-623, 675), (-623, 699), (-623, 825), (-623, 951), (-538, -538), (-538, -458), (-538, -314), (-538, 126), (-538, 146), (-538, 438), (-538, 460), (-538, 626), (-538, 675), (-538, 699), (-538, 825), (-538, 951), (-458, -458), (-458, -314), (-458, 126), (-458, 146), (-458, 438), (-458, 460), (-458, 626), (-458, 675), (-458, 699), (-458, 825), (-458, 951), (-314, -314), (-314, 126), (-314, 146), (-314, 438), (-314, 460), (-314, 626), (-314, 675), (-314, 699), (-314, 825), (-314, 951), (126, 126), (126, 146), (126, 438), (126, 460), (126, 626), (126, 675), (126, 699), (126, 825), (126, 951), (146, 146), (146, 438), (146, 460), (146, 626), (146, 675), (146, 699), (146, 825), (146, 951), (438, 438), (438, 460), (438, 626), (438, 675), (438, 699), (438, 825), (438, 951), (460, 460), (460, 626), (460, 675), (460, 699), (460, 825), (460, 951), (626, 626), (626, 675), (626, 699), (626, 825), (626, 951), (675, 675), (675, 699), (675, 825), (675, 951), (699, 699), (699, 825), (699, 951), (825, 825), (825, 951), (951, 951)])\\nTest.assert_equals(relation_lst([]),[])\\nTest.assert_equals(relation_lst([0]), [(0, 0)])\\nTest.assert_equals(relation_lst([-1]), [(-1, -1)])\\nTest.assert_equals(relation_lst([816, -44, -39, -773, 317, -66, -596, 489, -570]), [(-773, -773), (-773, -596), (-773, -570), (-773, -66), (-773, -44), (-773, -39), (-773, 317), (-773, 489), (-773, 816), (-596, -596), (-596, -570), (-596, -66), (-596, -44), (-596, -39), (-596, 317), (-596, 489), (-596, 816), (-570, -570), (-570, -66), (-570, -44), (-570, -39), (-570, 317), (-570, 489), (-570, 816), (-66, -66), (-66, -44), (-66, -39), (-66, 317), (-66, 489), (-66, 816), (-44, -44), (-44, -39), (-44, 317), (-44, 489), (-44, 816), (-39, -39), (-39, 317), (-39, 489), (-39, 816), (317, 317), (317, 489), (317, 816), (489, 489), (489, 816), (816, 816)])\\nTest.assert_equals(relation_lst([502, 503, 489, 320, 317, 701, 552, 367, -87, 981]), [(-87, -87), (-87, 317), (-87, 320), (-87, 367), (-87, 489), (-87, 502), (-87, 503), (-87, 552), (-87, 701), (-87, 981), (317, 317), (317, 320), (317, 367), (317, 489), (317, 502), (317, 503), (317, 552), (317, 701), (317, 981), (320, 320), (320, 367), (320, 489), (320, 502), (320, 503), (320, 552), (320, 701), (320, 981), (367, 367), (367, 489), (367, 502), (367, 503), (367, 552), (367, 701), (367, 981), (489, 489), (489, 502), (489, 503), (489, 552), (489, 701), (489, 981), (502, 502), (502, 503), (502, 552), (502, 701), (502, 981), (503, 503), (503, 552), (503, 701), (503, 981), (552, 552), (552, 701), (552, 981), (701, 701), (701, 981), (981, 981)])\\nTest.assert_equals(relation_lst([858, 544, 164]), [(164, 164), (164, 544), (164, 858), (544, 544), (544, 858), (858, 858)])\\nTest.assert_equals(relation_lst([342, 294, -12, 317, 425, 499, 323, -11, 204]),[(-12, -12), (-12, -11), (-12, 204), (-12, 294), (-12, 317), (-12, 323), (-12, 342), (-12, 425), (-12, 499), (-11, -11), (-11, 204), (-11, 294), (-11, 317), (-11, 323), (-11, 342), (-11, 425), (-11, 499), (204, 204), (204, 294), (204, 317), (204, 323), (204, 342), (204, 425), (204, 499), (294, 294), (294, 317), (294, 323), (294, 342), (294, 425), (294, 499), (317, 317), (317, 323), (317, 342), (317, 425), (317, 499), (323, 323), (323, 342), (323, 425), (323, 499), (342, 342), (342, 425), (342, 499), (425, 425), (425, 499), (499, 499)])\\nTest.assert_equals(relation_lst([600, 556, 399, 837, 850, 706, 100, 351, 445, -2]),[(-2, -2), (-2, 100), (-2, 351), (-2, 399), (-2, 445), (-2, 556), (-2, 600), (-2, 706), (-2, 837), (-2, 850), (100, 100), (100, 351), (100, 399), (100, 445), (100, 556), (100, 600), (100, 706), (100, 837), (100, 850), (351, 351), (351, 399), (351, 445), (351, 556), (351, 600), (351, 706), (351, 837), (351, 850), (399, 399), (399, 445), (399, 556), (399, 600), (399, 706), (399, 837), (399, 850), (445, 445), (445, 556), (445, 600), (445, 706), (445, 837), (445, 850), (556, 556), (556, 600), (556, 706), (556, 837), (556, 850), (600, 600), (600, 706), (600, 837), (600, 850), (706, 706), (706, 837), (706, 850), (837, 837), (837, 850), (850, 850)])\\nTest.assert_equals(relation_lst([806, 586, 788, 440]), [(440, 440), (440, 586), (440, 788), (440, 806), (586, 586), (586, 788), (586, 806), (788, 788), (788, 806), (806, 806)])\\nTest.assert_equals(relation_lst([813, 150, 195, 434, 896, 268, 441, 260]), [(150, 150), (150, 195), (150, 260), (150, 268), (150, 434), (150, 441), (150, 813), (150, 896), (195, 195), (195, 260), (195, 268), (195, 434), (195, 441), (195, 813), (195, 896), (260, 260), (260, 268), (260, 434), (260, 441), (260, 813), (260, 896), (268, 268), (268, 434), (268, 441), (268, 813), (268, 896), (434, 434), (434, 441), (434, 813), (434, 896), (441, 441), (441, 813), (441, 896), (813, 813), (813, 896), (896, 896)])\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[1,1,1,1,1,1,2,1,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,1,0,1,1,1,2,0,2,1,2,3,3,2,2,1,2,0,4,2,0,3,2,0,1,1,1,2,2,2,2,1,1,2,1,3,0,2,2,2,1,0,2,1,1,3,1],\"rators\":[\"3LiSLdtN58n46NEqg\",\"gb9rvGus2Jv7bjZSs\",\"tAF9Gf6PiGogbZuWs\",\"gJYuGdkXEWWmGRLzu\",\"aEm3Wvj2rFYRL8Lrb\",\"7tbtTx6uxePv6eQwP\",\"mDWNyaaQ9hvPCRzSd\",\"ZMmBzcG6y2FGXzTFG\",\"DEDniTrstQYGounXT\",\"ZrKCkX7xxGGZzauFW\",\"H4abACFDH5t8CnnyH\",\"4yNLEwL2rsx4EE5Nt\",\"8PwfYqoDQFThzNtvf\",\"HF28xZKSLM9wEuqNg\",\"8JyqsSbN2FJXPr3cw\",\"Nb6LYPoQP6KJZt8mz\",\"Yp7uvStL97cC9fKkY\",\"jNvegJWCk5HCtEMbK\",\"NG8PWBSjsM8mMhQEq\",\"iojEnnY9FsMfYzp6f\",\"syRNbbPdLCGXbH2Gy\",\"7txFzDQ43vJ7qCY88\",\"3HwLPBWSDgZLr6Y2o\",\"yjtdwc2AC4jA2RWtn\",\"Pe8vWpDHRuH9nSGKW\",\"PXAcsKkssS2yLyDv2\",\"cR3ibTMxLyEdDFCHY\",\"iS5BrkGLzJyPK7nKt\",\"HqmxnQJM66Y57twhn\",\"FEYpu9RWysAgW3XnP\",\"NNE5HNRXAkmhrWgyQ\",\"n2BRY9X8899dcG8Bw\",\"9pzFiFK3ANLjQfnr2\",\"XrqNzJ2FRG8HnGiR6\",\"oBcs8GLX2ZFLXQy8y\",\"mG8HqKiAQFTdRZthG\",\"tpxMgkGSHwBjS95Ta\",\"KLmLKaJPfsYxp42p2\",\"QRv96jmNaYsWkxQEG\",\"p8qqFdJ3FSk5x9z3G\",\"2QGRoQn2dRq3scu7k\",\"kXEfD7xxEyWd7oxxL\",\"mxX4rH5ELYkdZ2Mbw\",\"DPi9QGLctq2y76KuE\",\"J3upzLHuEwXH7Z2hx\",\"dYPkStFnLvAMsHSzZ\",\"5XiuAqicKD4hBdu63\",\"Nw5Co4WxYtGovKnmA\",\"tYnsBWeBWK6npiRLZ\",\"cAP3n5NY64uoMwzRR\",\"RGMbFMZXJr7DhcAJy\",\"zd9FLSzsGz3evKafy\",\"dBzwBtRjZqB98DJeB\",\"rfyEkETeoS96QNH4e\",\"d8qtzoLB264iP8tdY\",\"Jqk2uJZZxEv5wZFze\",\"5HCu9Ydd86QgHDRNP\",\"HuNF3xTBzmatyGSTm\",\"J5T8gZqiZXFuFDTQ7\",\"f89WBZDy3j7KZY8od\",\"5S9nX4rKsnCcnv4Cz\",\"GGdmhAvxXhqhhibJN\",\"Ds7L5bksw2QRHjrKL\",\"GTKsdeEihE636Le9i\",\"q6CHuninhQ3HACvpC\",\"XP4pRYeYiX9K4ejpW\",\"66a9xX73nmTEuKs9k\",\"Nua6T3dBurBy3Qfg9\",\"yod5YhKtPqw2GfG9B\",\"AasGs8AeX9Lcb9xJn\",\"eHcgvkTGsH7ZziqBo\",\"8BFSTCnoe2QggN64c\",\"BrTDhPJcACL2bsrpJ\",\"EHtTFoDbt722AH667\",\"T6iBEE2jp7f7iEF2P\",\"2PufnQcsHsfymufX3\",\"d9LBRxvADNBB5QJMB\",\"4TmgHkn5vqyHK3sYC\",\"3nied3n8KG8RSNixH\",\"CHvzhtXnv8HTbPQ56\",\"wjc4iejpErBhxWwHo\",\"4Lwjr34ypKNQNQCar\",\"2fxapKr8XGdNeaKi2\",\"MKT7khMBGXzA22ykf\",\"Wi4H6ayKsNDWWQCG5\"],\"total\":96,\"quality\":[5,4,3,5,3,5,5,2,5,5,5,5,5,5,5,4,5]},\"flags\":0},\"summary\":\"Write a function which takes a list of numbers and returns a list of tuples that is a subset of product of the list with itself and first member of each tuple is less than or equall to the second one.\\n\\nIn mathematical terms:\\n\\nA x A = {(x,y)| x∈A and y∈A}\\n\\n{(x,y)| x>=y, (x,y) ∈ A x A }\\n\\nExamples\\nrelation_list([0, 1, 2, 3]) ➞ [(0, 0), (0, 1), (0, 2), (0, 3), (1,\",\"tags\":[\"math\",\"loops\"],\"timestamp\":{\"$date\":1593027797283},\"title\":\"Subset of a Cartasian Product\",\"quality\":4.470588235294118,\"family\":[{\"_id\":\"H6J4o4jqGbffYXe3Y\",\"language\":\"python3\"}]}}"]