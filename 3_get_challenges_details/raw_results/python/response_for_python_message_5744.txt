a["{\"msg\":\"result\",\"id\":\"1585\",\"result\":{\"_id\":\"rzburChL8YYe98vaP\",\"author\":\"zatoichi49\",\"authorId\":\"tAF9Gf6PiGogbZuWs\",\"code\":\"def look_and_say(term):\\n\\t\",\"difficulty\":2.0869565217391304,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"gLWwzZJcBSA2fH4bX\",\"instructions\":\"The look-and-say sequence is generated by _describing_ each group of identical digits in the previous term. If we start at \\\"1\\\", the first five terms in the sequence are:\\n\\n```\\n\\\"1\\\" = \\\"one 1\\\" = \\\"11\\\"\\n\\\"11\\\" = \\\"two 1's\\\" = \\\"21\\\"\\n\\\"21\\\" = \\\"one 2, one 1\\\" = \\\"1211\\\"\\n\\\"1211\\\" = \\\"one 1, one 2, two 1's\\\" = \\\"111221\\\"\\n\\\"111221\\\" = \\\"three 1's, two 2's, one 1\\\" = \\\"312211\\\"\\n```\\n\\nGiven a term (as a string), return the _next term_ in the sequence.\\n\\n### Examples\\n```\\nlook_and_say(\\\"1211\\\") ➞ \\\"111221\\\"\\n\\nlook_and_say(\\\"111221\\\") ➞ \\\"312211\\\"\\n\\nlook_and_say(\\\"31131211131221\\\") ➞ \\\"13211311123113112211\\\"\\n```\\n\\n### Notes\\nTerms will only include the digits 1, 2, and 3.\",\"lab\":\"Test.assert_equals(look_and_say(\\\"13112221\\\"), \\\"1113213211\\\")\\nTest.assert_equals(look_and_say(\\\"1113213211\\\"), \\\"31131211131221\\\")\\nTest.assert_equals(look_and_say(\\\"31131211131221\\\"), \\\"13211311123113112211\\\")\\nTest.assert_equals(look_and_say(\\\"13211311123113112211\\\"), \\\"11131221133112132113212221\\\")\\nTest.assert_equals(look_and_say(\\\"11131221133112132113212221\\\"), \\\"3113112221232112111312211312113211\\\")\\nTest.assert_equals(look_and_say(\\\"3113112221232112111312211312113211\\\"), \\\"1321132132111213122112311311222113111221131221\\\")\\nTest.assert_equals(look_and_say(\\\"1321132132111213122112311311222113111221131221\\\"), \\\"11131221131211131231121113112221121321132132211331222113112211\\\")\\nTest.assert_equals(look_and_say(\\\"11131221131211131231121113112221121321132132211331222113112211\\\"), \\\"311311222113111231131112132112311321322112111312211312111322212311322113212221\\\")\\nTest.assert_equals(look_and_say(\\\"311311222113111231131112132112311321322112111312211312111322212311322113212221\\\"), \\\"132113213221133112132113311211131221121321131211132221123113112221131112311332111213211322211312113211\\\")\\nTest.assert_equals(look_and_say(\\\"132113213221133112132113311211131221121321131211132221123113112221131112311332111213211322211312113211\\\"), \\\"11131221131211132221232112111312212321123113112221121113122113111231133221121321132132211331121321231231121113122113322113111221131221\\\")\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,1,3,3,2,3,2,1,2,2,2,3,3,3,3,3,3,3,3,2,2,0,2,2,2,3,4,2,1,3,2,1,3,3,1,3,2,1,0,3,2,2,2,3,2,3,0,1,2,0,0,3,0,2,5,2,0,1,5,2,2,2,3,0,3],\"rators\":[\"AF6LgdKhEdzwgRJom\",\"7g3vZaQXhLpxrajyg\",\"3ifAHQzsMasfQySoL\",\"tAF9Gf6PiGogbZuWs\",\"yZvzB3qFb8pkHy4dg\",\"PFjMZGHNAPTkgd7tq\",\"gb9rvGus2Jv7bjZSs\",\"8JyqsSbN2FJXPr3cw\",\"TNMAJidLpPdH4kmBv\",\"C9LKGu2g5hSijvDzA\",\"BFNm9gacwba9KyLFW\",\"kQH5b8MXJunh84Czq\",\"nF9pCCzbGDhzvWgaw\",\"Wf6AF7TuNwEobxuW6\",\"78D8EBdJesQZRwFt6\",\"W2wFFFx9pqgwmkFi3\",\"HqmxnQJM66Y57twhn\",\"ouPtoRyNq8hKH2WkT\",\"2fxapKr8XGdNeaKi2\",\"Jqk2uJZZxEv5wZFze\",\"ab7BsQuhDo3QgE6bh\",\"2innwjWqxJHo4eRGh\",\"C4QntmkYtB89GNtpd\",\"AasGs8AeX9Lcb9xJn\",\"8PwfYqoDQFThzNtvf\",\"mDWNyaaQ9hvPCRzSd\",\"aEm3Wvj2rFYRL8Lrb\",\"ZNnsMeNkdDhHjSrZb\",\"PytNZK9mNiRiZxPrm\",\"EXCpDkk5BLif3i5YE\",\"keF63bkDeP6nWsdA3\",\"gJYuGdkXEWWmGRLzu\",\"DQskEvAv5KiJDPtGF\",\"YrWupZBgWtuHkTjvz\",\"n2BRY9X8899dcG8Bw\",\"Ecg4m7srYGgZsb4Ck\",\"HF28xZKSLM9wEuqNg\",\"yjtdwc2AC4jA2RWtn\",\"DEDniTrstQYGounXT\",\"iS5BrkGLzJyPK7nKt\",\"xn7uGNKeAwPEkP9oA\",\"J3upzLHuEwXH7Z2hx\",\"DPi9QGLctq2y76KuE\",\"QRv96jmNaYsWkxQEG\",\"Yp7uvStL97cC9fKkY\",\"p8qqFdJ3FSk5x9z3G\",\"dkcmCKwqApX5jBggc\",\"gXTAie79kiw28tx5u\",\"iojEnnY9FsMfYzp6f\",\"cAP3n5NY64uoMwzRR\",\"oBcs8GLX2ZFLXQy8y\",\"eHcgvkTGsH7ZziqBo\",\"buX4mCQhtXCfBjeno\",\"GGdmhAvxXhqhhibJN\",\"PWgzeK859suojbrRx\",\"MpfytGFYF77emJ3cT\",\"d8qtzoLB264iP8tdY\",\"T6iBEE2jp7f7iEF2P\",\"2PufnQcsHsfymufX3\",\"gKnWjDjwrJh7MK2df\",\"BdnE4RS5puoxo92mA\",\"rfyEkETeoS96QNH4e\",\"yod5YhKtPqw2GfG9B\",\"T2vhHPhRR96hRizq8\",\"8sNv5PTHa7XQ8bNqR\",\"J5T8gZqiZXFuFDTQ7\",\"s5M5RvgqR9BhB9JoC\",\"rhS8qXRjZcpDXkwnE\",\"ey3CASd6Je5LEJzfB\",\"Ds7L5bksw2QRHjrKL\",\"CHvzhtXnv8HTbPQ56\",\"Qyfyyw6oC4EHAndzo\"],\"total\":77,\"quality\":[5,5,5,5,4,5,5,5]},\"flags\":0},\"subscribers\":[\"tAF9Gf6PiGogbZuWs\"],\"summary\":\"The look-and-say sequence is generated by describing each group of identical digits in the previous term. If we start at \\\"1\\\", the first five terms in the sequence are:\\n\\n\\\"1\\\" = \\\"one 1\\\" = \\\"11\\\"\\n\\\"11\\\" = \\\"two 1's\\\" = \\\"21\\\"\\n\\\"21\\\" = \\\"one 2, one 1\\\" = \\\"1211\\\"\\n\\\"1211\\\" = \\\"one 1, one 2, two 1's\\\" = \\\"111221\\\"\\n\\\"111221\\\" = \\\"three 1's, two 2's, one 1\\\" = \\\"312211\\\"\\n\\nGiven a term (as a str\",\"tags\":[\"language_fundamentals\",\"strings\"],\"timestamp\":{\"$date\":1563034182092},\"title\":\"Look-And-Say Sequence\",\"isHidden\":false,\"quality\":4.875,\"family\":[{\"_id\":\"TDv5ZEXXyQiekopx2\",\"language\":\"cpp\"},{\"_id\":\"PRWwoRZnnh5eyyRbD\",\"language\":\"java\"},{\"_id\":\"TCfRGQMcwYuCFq3nA\",\"language\":\"javascript\"},{\"_id\":\"rzburChL8YYe98vaP\",\"language\":\"python3\"},{\"_id\":\"ZG5qC6Bv6nZsNf5c2\",\"language\":\"ruby\"}]}}"]