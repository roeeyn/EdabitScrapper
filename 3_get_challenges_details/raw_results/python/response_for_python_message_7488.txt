a["{\"msg\":\"result\",\"id\":\"2449\",\"result\":{\"_id\":\"NZtL4MGkpCfiwShhp\",\"author\":\"zatoichi49\",\"authorId\":\"tAF9Gf6PiGogbZuWs\",\"code\":\"def infix_to_postfix(expr):\\n\\t\",\"difficulty\":4.523809523809524,\"editorId\":\"tAF9Gf6PiGogbZuWs\",\"familyId\":\"h6wrY6e9vRHxMSCLL\",\"instructions\":\"Given a string representing an infix expression, return the *postfix* equivalent. The operands stay in their original order, and any parentheses are removed. Only the operator order is changed. Operands and operators will be separated by a single space, with the exception of parentheses (see examples).\\n\\n### Examples\\n```\\ninfix_to_postfix(\\\"7 + 3\\\") ➞ \\\"7 3 +\\\"\\n\\ninfix_to_postfix(\\\"(8 + 4) / 4\\\") ➞ \\\"8 4 + 4 /\\\"\\n\\ninfix_to_postfix(\\\"4 * (5 - (7 + 2))\\\") ➞ \\\"4 5 7 2 + - *\\\"\\n\\ninfix_to_postfix(\\\"3 + 4 ** 2\\\") ➞ \\\"3 4 2 ** +\\\"\\n```\\n\\n### Notes\\nConverting infix expressions to postfix expressions is an example of *operator-precedence parsing*, the most famous of which is Dijkstra's *\\\"shunting-yard\\\"* algorithm (see the resources tab for more information).\",\"isHidden\":false,\"lab\":\"Test.assert_equals(infix_to_postfix(\\\"8 + 1\\\"), \\\"8 1 +\\\")\\nTest.assert_equals(infix_to_postfix(\\\"9 / 3\\\"), \\\"9 3 /\\\")\\nTest.assert_equals(infix_to_postfix(\\\"8 + 2 * 5\\\"), \\\"8 2 5 * +\\\")\\nTest.assert_equals(infix_to_postfix(\\\"(8 + 2) * 5\\\"), \\\"8 2 + 5 *\\\")\\nTest.assert_equals(infix_to_postfix(\\\"1 + 2 + 3 + 4 + 5\\\"), \\\"1 2 + 3 + 4 + 5 +\\\")\\nTest.assert_equals(infix_to_postfix(\\\"3 * (12 / (32 / 8))\\\"), \\\"3 12 32 8 / / *\\\")\\nTest.assert_equals(infix_to_postfix(\\\"2 + 3 * 1 - 9\\\"), \\\"2 3 1 * + 9 -\\\")\\nTest.assert_equals(infix_to_postfix(\\\"(3 + 4) * 2 / 7\\\"), \\\"3 4 + 2 * 7 /\\\")\\nTest.assert_equals(infix_to_postfix(\\\"4 * (5 - (7 + 2))\\\"), \\\"4 5 7 2 + - *\\\")\\nTest.assert_equals(infix_to_postfix(\\\"(10 + 8 - 3 * 4) / 6\\\"), \\\"10 8 + 3 4 * - 6 /\\\")\\nTest.assert_equals(infix_to_postfix(\\\"13 + (6 + 7 - 8 / (4 * 9))\\\"), \\\"13 6 7 + 8 4 9 * / - +\\\")\\nTest.assert_equals(infix_to_postfix(\\\"(5 - 7) * (6 + 9)\\\"), \\\"5 7 - 6 9 + *\\\")\\nTest.assert_equals(infix_to_postfix(\\\"(6 + 2) * 5 - 8 / 4\\\"), \\\"6 2 + 5 * 8 4 / -\\\")\\nTest.assert_equals(infix_to_postfix(\\\"9 * 2 + 3 - 12\\\"), \\\"9 2 * 3 + 12 -\\\")\\nTest.assert_equals(infix_to_postfix(\\\"6 - (4 + 18 / (2 + 7))\\\"), \\\"6 4 18 2 7 + / + -\\\")\\nTest.assert_equals(infix_to_postfix(\\\"3 * (10 + 5)\\\"), \\\"3 10 5 + *\\\")\\nTest.assert_equals(infix_to_postfix(\\\"(8 + 1 + 3) * 7 - 6\\\"), \\\"8 1 + 3 + 7 * 6 -\\\")\\nTest.assert_equals(infix_to_postfix(\\\"(3 + 2) * (15 / 3 - 8)\\\"), \\\"3 2 + 15 3 / 8 - *\\\")\\nTest.assert_equals(infix_to_postfix(\\\"10 / (7 - (8 / 4)) * 6 + 3 - (5 * 4)\\\"), \\\"10 7 8 4 / - / 6 * 3 + 5 4 * -\\\")\\nTest.assert_equals(infix_to_postfix(\\\"(6 - 45) / (3 + 12) * 6 / 2\\\"), \\\"6 45 - 3 12 + / 6 * 2 /\\\")\\nTest.assert_equals(infix_to_postfix(\\\"3 + 4 ** 2\\\"), \\\"3 4 2 ** +\\\")\\nTest.assert_equals(infix_to_postfix(\\\"(5 + 1) ** 2 + (4 ** 3 + (9 - 5) / 2) ** 7\\\"), \\\"5 1 + 2 ** 4 3 ** 9 5 - 2 / + 7 ** +\\\")\\nTest.assert_equals(infix_to_postfix(\\\"(3 ** 2 - 4) ** (12 / 3 + (11 + 5) ** 3)\\\"), \\\"3 2 ** 4 - 12 3 / 11 5 + 3 ** + **\\\")\\nTest.assert_equals(infix_to_postfix(\\\"(11 + 5) / 2 ** 3 * (1 + 2 * 3 + (11 + 5 ** 3))\\\"), \\\"11 5 + 2 3 ** / 1 2 3 * + 11 5 3 ** + + *\\\")\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,5,4,5,0,5,4,4,5,5,5,3,5,5,5,5,5],\"rators\":[\"tAF9Gf6PiGogbZuWs\",\"2fxapKr8XGdNeaKi2\",\"AYaEkTWLMmfzpwejr\",\"FHSJnAYTbcsKFgeQa\",\"aCNWav8S8Try9RkC6\",\"gb9rvGus2Jv7bjZSs\",\"aEm3Wvj2rFYRL8Lrb\",\"AasGs8AeX9Lcb9xJn\",\"8PwfYqoDQFThzNtvf\",\"a777e8chPvJkY3tKa\",\"W5TajitmCyxz87zAC\",\"Nb6LYPoQP6KJZt8mz\",\"xn7uGNKeAwPEkP9oA\",\"mDWNyaaQ9hvPCRzSd\",\"jL4y5fTJAMBjhZmko\",\"iS5BrkGLzJyPK7nKt\"],\"total\":18,\"quality\":[]},\"flags\":0},\"summary\":\"Given a string representing an infix expression, return the postfix equivalent. The operands stay in their original order, and any parentheses are removed. Only the operator order is changed. Operands and operators will be separated by a single space, with the exception of parentheses (see examples).\\n\\nExamples\\ninfixtopostfix(\\\"7 + 3\\\") ➞ \\\"7 3 +\\\"\\n\\ninfixtopostfix(\",\"tags\":[\"logic\",\"math\"],\"timestamp\":{\"$date\":1576536895295},\"title\":\"Postfix Notation (Part 2: Infix to Postfix)\",\"quality\":0,\"family\":[{\"_id\":\"zMFPww26fHYGor3Zv\",\"language\":\"javascript\"},{\"_id\":\"NZtL4MGkpCfiwShhp\",\"language\":\"python3\"},{\"_id\":\"MjFLp4BkqsDHWnept\",\"language\":\"ruby\"}]}}"]