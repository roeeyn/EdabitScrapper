a["{\"msg\":\"result\",\"id\":\"1079\",\"result\":{\"_id\":\"dYHH7CmYeWGXdEhCx\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"def word_builder(letters, positions):\\n\\t\",\"difficulty\":1.5642857142857143,\"familyId\":\"AX48ncQRzrARZHPqf\",\"instructions\":\"In this challenge, you have to build a word from the scrambled letters contained in the first given list. For establishing how to assign the spots to the letters, you will use the positions contained in the second given list.\\n\\n```\\nletters = [\\\"e\\\", \\\"t\\\", \\\"s\\\", \\\"t\\\"]\\npositions = [1, 3, 2, 0]\\n\\nStep 1 ➞ Letter \\\"e\\\" goes to index 1 ➞ _  e  _   _\\nStep 2 ➞ Letter \\\"t\\\" goes to index 3 ➞ _  e  _   t\\nStep 3 ➞ Letter \\\"s\\\" goes to index 2 ➞ _  e  s   t\\nStep 4 ➞ Letter \\\"t\\\" goes to index 0 ➞ t  e  s   t\\n```\\n\\nGiven the two lists `letters` (containing the scrambled letters of the word) and `positions` (containing the indexes of the letters), implement a function that returns the resulting word as a string.\\n\\n### Examples\\n```\\nwordBuilder([\\\"e\\\", \\\"t\\\", \\\"s\\\", \\\"t\\\"], [1, 3, 2, 0]) ➞ \\\"test\\\"\\n\\nwordBuilder([\\\"b\\\", \\\"e\\\", \\\"t\\\", \\\"i\\\", \\\"d\\\", \\\"a\\\"], [3, 0, 5, 4, 1, 2]) ➞ \\\"edabit\\\"\\n\\nwordBuilder([\\\"g\\\", \\\"e\\\", \\\"o\\\"], [1, 0, 2]) ➞ \\\"ego\\\"\\n```\\n\\n### Notes\\nEvery given test case has valid parameters, don't worry about exceptions handling.\",\"isHidden\":false,\"lab\":\"Test.assert_equals(word_builder([\\\"e\\\", \\\"t\\\", \\\"s\\\", \\\"t\\\"], [1, 3, 2, 0]), \\\"test\\\")\\nTest.assert_equals(word_builder([\\\"b\\\", \\\"e\\\", \\\"t\\\", \\\"i\\\", \\\"d\\\", \\\"a\\\"], [3, 0, 5, 4, 1, 2]), \\\"edabit\\\")\\nTest.assert_equals(word_builder([\\\"g\\\", \\\"e\\\", \\\"o\\\"], [1, 0, 2]), \\\"ego\\\")\\nTest.assert_equals(word_builder([\\\"l\\\", \\\"e\\\", \\\"h\\\", \\\"n\\\", \\\"l\\\", \\\"c\\\", \\\"a\\\", \\\"e\\\", \\\"g\\\"], [3, 5, 1, 6, 4, 0, 2, 8, 7]), \\\"challenge\\\")\\nTest.assert_equals(word_builder([\\\"e\\\", \\\"i\\\", \\\"l\\\", \\\"g\\\", \\\"x\\\", \\\"h\\\", \\\"p\\\", \\\"o\\\", \\\"c\\\", \\\"r\\\", \\\"i\\\", \\\"a\\\", \\\"c\\\"], [1, 3, 0, 6, 2, 10, 9, 5, 4, 7, 11, 8, 12]), \\\"lexicographic\\\")\\nTest.assert_equals(word_builder([\\\"s\\\", \\\"o\\\", \\\"r\\\", \\\"t\\\", \\\"e\\\", \\\"d\\\"], [0, 1, 2, 3, 4, 5]), \\\"sorted\\\")\",\"language\":\"python3\",\"summary\":\"In this challenge, you have to build a word from the scrambled letters contained in the first given list. For establishing how to assign the spots to the letters, you will use the positions contained in the second given list.\\n\\nletters = [\\\"e\\\", \\\"t\\\", \\\"s\\\", \\\"t\\\"]\\npositions = [1, 3, 2, 0]\\n\\nStep 1 ➞ Letter \\\"e\\\" goes to index 1 ➞ _  e  _   _\\nStep 2 ➞ Letter \\\"t\\\" goes to \",\"tags\":[\"arrays\",\"sorting\"],\"timestamp\":{\"$date\":1575409350305},\"title\":\"Word Builder\",\"stats\":{\"completed\":{\"total\":175,\"ratings\":[2,2,2,2,2,0,2,1,1,3,1,2,2,1,2,0,2,2,2,2,2,1,2,1,2,2,1,3,2,2,2,2,0,2,2,2,2,2,2,2,1,1,1,2,1,2,2,2,1,1,2,0,2,1,3,2,2,2,1,2,1,2,0,2,2,1,2,2,2,2,0,2,2,1,2,2,2,1,2,2,2,0,1,1,1,2,0,2,0,1,2,2,2,1,1,1,0,1,2,1,2,2,2,0,2,2,0,2,2,3,0,0,3,1,1,2,3,2,1,2,2,1,2,2,2,2,1,1,1,2,2,1,1,1,2,2,2,2,1,2],\"rators\":[\"gb9rvGus2Jv7bjZSs\",\"tAF9Gf6PiGogbZuWs\",\"HqmxnQJM66Y57twhn\",\"kBmhcwkCqxiy4GwiZ\",\"Nj6FwgBtAXsaQwsM2\",\"8JyqsSbN2FJXPr3cw\",\"2fxapKr8XGdNeaKi2\",\"K3RacTvkWHLfzKF8i\",\"PSrcg6fy835R4c5CW\",\"kQH5b8MXJunh84Czq\",\"otXtuQygbcYATMZoP\",\"3LiSLdtN58n46NEqg\",\"u5u2YpHXiNgzDNJdX\",\"6RPK2Z8fKDfG7BGmp\",\"4tgBydK887PitgAoi\",\"6ShafRStcvew4GfCh\",\"C4QntmkYtB89GNtpd\",\"tYjQweAK2k8goR4Bq\",\"ahWFxnaxt9bXSA4f3\",\"K96FwtfDDN5WM4Bb7\",\"cZGJGxM65Nq6oCevW\",\"Jqk2uJZZxEv5wZFze\",\"gMJhLdyw3tH7L96X2\",\"JYbyC7EiD3PuwuxEv\",\"TmqtPC5XeRb6JBonR\",\"HQxp7NcdvF92G7bYS\",\"M3kk3ydZnE2ZrA9n5\",\"ab7BsQuhDo3QgE6bh\",\"BeFnbPbMnAM2SjBdZ\",\"2innwjWqxJHo4eRGh\",\"N2wnZXkhDH86mgjQ8\",\"p3dsCFdWGzWGhFrSQ\",\"Jg8ZSRXe3NoDMCqGu\",\"AasGs8AeX9Lcb9xJn\",\"PXAcsKkssS2yLyDv2\",\"Yp7uvStL97cC9fKkY\",\"4CFzv558qbGcpQwc4\",\"s5M5RvgqR9BhB9JoC\",\"v3fjGuc7Pq4yjFygS\",\"yZvzB3qFb8pkHy4dg\",\"ThE5rgwTFDDkXGRbX\",\"w3A7cBWyAfukk6xEQ\",\"C9LKGu2g5hSijvDzA\",\"cR3ibTMxLyEdDFCHY\",\"mxX4rH5ELYkdZ2Mbw\",\"vLrq4dEDMM2wd68Dc\",\"dHZqT6h4JMwk5fPC8\",\"9Ly8afdtofp8DXzrt\",\"orFLgPDw9H5MDzmwo\",\"M9DhkxE77ztbJWz6e\",\"5kEyLPjTLrt7z2YJZ\",\"J67hC7LSEYS5JwhPj\",\"jNvegJWCk5HCtEMbK\",\"ZNnsMeNkdDhHjSrZb\",\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\",\"hnyhBFWwNCz9mDfSi\",\"2QGRoQn2dRq3scu7k\",\"gJYuGdkXEWWmGRLzu\",\"ky6uJGC6ckwzrgmKY\",\"HF28xZKSLM9wEuqNg\",\"DEDniTrstQYGounXT\",\"KdNDysEsy2TW5QRJ2\",\"9pzFiFK3ANLjQfnr2\",\"k5mp7Hkg8w5rwiXpe\",\"ahk2qiXKJA753wAJk\",\"ACEZh39brWjdGkZXb\",\"TR5aWdDKP6iaL6mGK\",\"a777e8chPvJkY3tKa\",\"T68dk7atmenH88Ryi\",\"iS5BrkGLzJyPK7nKt\",\"iojEnnY9FsMfYzp6f\",\"syRNbbPdLCGXbH2Gy\",\"H4abACFDH5t8CnnyH\",\"ZrKCkX7xxGGZzauFW\",\"kRAYfZ4CtCh5E8ugt\",\"yjtdwc2AC4jA2RWtn\",\"Pe8vWpDHRuH9nSGKW\",\"Ecg4m7srYGgZsb4Ck\",\"PTDFuxAzou7W6asWt\",\"YcCLwitFMAEJSnxAW\",\"hRiMXDZNAzyPd5tpt\",\"dLmepN3JWxhXMtyNK\",\"NNE5HNRXAkmhrWgyQ\",\"FEYpu9RWysAgW3XnP\",\"oBcs8GLX2ZFLXQy8y\",\"MKT7khMBGXzA22ykf\",\"mG8HqKiAQFTdRZthG\",\"tpxMgkGSHwBjS95Ta\",\"qD2LrwaDrSdiybLKY\",\"gXTAie79kiw28tx5u\",\"BdnE4RS5puoxo92mA\",\"QRv96jmNaYsWkxQEG\",\"p8qqFdJ3FSk5x9z3G\",\"KLmLKaJPfsYxp42p2\",\"DYDJTyGgKFnBRLm2r\",\"DPi9QGLctq2y76KuE\",\"JS3hNM3XXkxPdg3yk\",\"J3upzLHuEwXH7Z2hx\",\"dYPkStFnLvAMsHSzZ\",\"cAP3n5NY64uoMwzRR\",\"5XiuAqicKD4hBdu63\",\"pveK5gtGcm8k4wScM\",\"rfyEkETeoS96QNH4e\",\"7D76ZPLjgjZideoy9\",\"KJCDwGkoXh8qtbbKr\",\"RGMbFMZXJr7DhcAJy\",\"zd9FLSzsGz3evKafy\",\"d8qtzoLB264iP8tdY\",\"5HCu9Ydd86QgHDRNP\",\"iDNFXiLhnBDvAEa7m\",\"yMcCr6yobXJnkgxH2\",\"J5T8gZqiZXFuFDTQ7\",\"HuNF3xTBzmatyGSTm\",\"wRttWTM59y8m5mx7x\",\"eYfPWvZwnJQkHbSTK\",\"5S9nX4rKsnCcnv4Cz\",\"5hQnRWiKkhgKJXNMP\",\"buX4mCQhtXCfBjeno\",\"Wv2vJnEj8ywNmARoF\",\"GGdmhAvxXhqhhibJN\",\"MXGuntvz3byrP6WJc\",\"sbJcFfQjQ59Wfg4Cd\",\"srJ34BaybkQh3qRkM\",\"Ds7L5bksw2QRHjrKL\",\"qAby4AWXmTNeusvg3\",\"T2vhHPhRR96hRizq8\",\"jn2dwChQX3j8igcNF\",\"sHjfbGQGLHE6JR6qu\",\"zKWsSutXjvxuGkcPX\",\"CHvzhtXnv8HTbPQ56\",\"eMuCpJ2spXWkJjWNz\",\"JhX7jvtpwNyxcc39m\",\"o4ixjQGSaYqA2JoM4\",\"3cF6NXq3ZEwdkgSjb\",\"T6iBEE2jp7f7iEF2P\",\"BGA5bgBWZppgrKf9d\",\"66a9xX73nmTEuKs9k\",\"PC3pLs36zNzpRDSuE\",\"xn7uGNKeAwPEkP9oA\",\"EfxwqhYdapX3dMQC2\",\"ey3CASd6Je5LEJzfB\",\"yr822PZmmiDDenxpB\",\"yod5YhKtPqw2GfG9B\",\"AJexRBN9cYQmqvYu6\",\"8BFSTCnoe2QggN64c\",\"mvJBakQ35CWAnbbEZ\",\"BrTDhPJcACL2bsrpJ\",\"KH4Wr3YSvNddCSRJ2\",\"2iFe3EHEH2YdhSKrs\",\"9bQyb6rW7xfE4vgrR\",\"2PufnQcsHsfymufX3\",\"suArq5BbSy7gD6xri\",\"T6Rm8mREPMZSftzrC\",\"dzS6WBTMHyFEag6Fp\",\"d9LBRxvADNBB5QJMB\",\"4TmgHkn5vqyHK3sYC\",\"4Lwjr34ypKNQNQCar\",\"mw9464S5dnenqzvpm\",\"pduNK68oazqQTtbLp\",\"wjc4iejpErBhxWwHo\",\"yAouD3PxzED8a4gap\",\"wrL4iX2CCSqDCCty3\",\"DQskEvAv5KiJDPtGF\",\"Wi4H6ayKsNDWWQCG5\",\"X4rzfxGgxx6CS7Bpz\"],\"quality\":[5,4,5,5,4,3,4,5,5,5,3,5,5,5,5,5,4,5,5,5,5,5,5,5,5,4,5,5,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"quality\":4.709677419354839,\"family\":[{\"_id\":\"NZeQkTEaQA7z7TM5E\",\"language\":\"cpp\"},{\"_id\":\"PMKNyPeYgz7weyNXF\",\"language\":\"javascript\"},{\"_id\":\"dYHH7CmYeWGXdEhCx\",\"language\":\"python3\"},{\"_id\":\"TzRyk42Z6Fckojmfc\",\"language\":\"ruby\"}]}}"]