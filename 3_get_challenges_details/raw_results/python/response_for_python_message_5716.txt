a["{\"msg\":\"result\",\"id\":\"1571\",\"result\":{\"_id\":\"eQT6bDsast8zNzcwB\",\"author\":\"_fluffyy\",\"authorId\":\"foytX6kH9wiSYqLtT\",\"code\":\"def bit_mask(n, b):\\n\\t\",\"difficulty\":2.1,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"ZhP9jmsajz7chWuyd\",\"instructions\":\"**Bit masking** is a technique used to \\\"hide\\\" certain parts of a number. It's great to use if you want to convey lots of information in a single integer. It takes a number `n`, converts it to its binary form, and then returns the digit at the index `b` of that binary number. Note that digit 0 is really the last digit since the least significant (smallest) digit is last. Your job is to create a function `bit_mask` that takes two arguments - the first being `n` and the second `b` - and returns the \\\"masked\\\" form of `n`.\\n\\n### Examples\\n```\\nbit_mask(37, 2) -> 1\\n# Binary representation is this:\\n# 0b100101\\n#      ^\\n# We return index 2 from the right, which is 1\\n\\nbit_mask(56, 1) -> 0\\n# 0b111000\\n#        ^\\n\\nbit_mask(327, 6) -> 1\\n# 0b101000111\\n#     ^\\n```\\n\\n### Notes\\n- **You cannot use the `bin` function**.\\n- For an extra challenge, try only using bit operations!\\n- All numbers `0 â‰¤ n < 256` will be tested.\\n- There are over 2,000 tests, and they all have to run within 12 seconds (set by Edabit, not me).\\n- If `n` is too small to have a `b`th index, return `0`.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"from sys import _getframe\\nclass Tester:\\n\\tdef __init__(self):\\n\\t\\tself.bin = bin\\n\\tdef __getattribute__(self, name):\\n\\t\\tif name == \\\"bin\\\" and _getframe(1).f_code != self.run.__code__:\\n\\t\\t\\traise Test.AssertException(\\\"No cheating!\\\")\\n\\t\\treturn super().__getattribute__(name)\\n\\tdef run(self):\\n\\t\\t# Testing starts here\\n\\t\\tfor i in range(256):\\n\\t\\t\\trev_bin = self.bin(i)[2:][::-1] + \\\"0\\\"\\n\\t\\t\\tfor j in range(len(rev_bin)):\\n\\t\\t\\t\\tTest.assert_equals(bit_mask(i, j), int(rev_bin[j]), \\\"Testing number %d at index %d\\\" % (i, j))\\n\\t\\t# Testing ends here\\ntester = Tester()\\ndef bin(*args, **kwargs):\\n\\traise Test.AssertException(\\\"No cheating!\\\")\\n__builtins__.bin = bin\\ntester.run()\",\"language\":\"python3\",\"quality\":5,\"stats\":{\"completed\":{\"ratings\":[4,4,4,4,4,1,1,0,3,1,2,4,3,1,1,0,3,1,3,1,3,3,3,3,3,2,0,2,2,0,3,0,1,0,3,3,2,3,0,3],\"quality\":[5],\"rators\":[\"aEm3Wvj2rFYRL8Lrb\",\"yLS55vSaoGh7EE82L\",\"8PwfYqoDQFThzNtvf\",\"w2HhxvSLmDhaGCAjE\",\"HF28xZKSLM9wEuqNg\",\"8JyqsSbN2FJXPr3cw\",\"iS5BrkGLzJyPK7nKt\",\"gb9rvGus2Jv7bjZSs\",\"8sNv5PTHa7XQ8bNqR\",\"YL9pqyCu8xsds8J49\",\"Tg24gZyPmk8uDXcBY\",\"DPi9QGLctq2y76KuE\",\"kZzmqZARhHHNDgwaj\",\"Yp7uvStL97cC9fKkY\",\"Jqk2uJZZxEv5wZFze\",\"p8qqFdJ3FSk5x9z3G\",\"QRv96jmNaYsWkxQEG\",\"qAby4AWXmTNeusvg3\",\"iojEnnY9FsMfYzp6f\",\"gJYuGdkXEWWmGRLzu\",\"SGhPxX5bHGL8zZqtt\",\"yjtdwc2AC4jA2RWtn\",\"xn7uGNKeAwPEkP9oA\",\"oBcs8GLX2ZFLXQy8y\",\"AasGs8AeX9Lcb9xJn\",\"HqmxnQJM66Y57twhn\",\"2gLb2qcTG68Rem7e2\",\"GGdmhAvxXhqhhibJN\",\"EpKmanXrnPYykrnhi\",\"gKnWjDjwrJh7MK2df\",\"2PufnQcsHsfymufX3\",\"tAF9Gf6PiGogbZuWs\",\"yod5YhKtPqw2GfG9B\",\"rhS8qXRjZcpDXkwnE\",\"T6iBEE2jp7f7iEF2P\",\"Ds7L5bksw2QRHjrKL\"],\"total\":38},\"flags\":0},\"summary\":\"Bit masking is a technique used to \\\"hide\\\" certain parts of a number. It's great to use if you want to convey lots of information in a single integer. It takes a number n, converts it to its binary form, and then returns the digit at the index b of that binary number. Note that digit 0 is really the last digit since the least significant (smallest) digit is las\",\"tags\":[\"bit_operations\",\"numbers\"],\"timestamp\":{\"$date\":1605305098878},\"title\":\"Bit Masking\",\"family\":[{\"_id\":\"eQT6bDsast8zNzcwB\",\"language\":\"python3\"}]}}"]