a["{\"msg\":\"result\",\"id\":\"907\",\"result\":{\"_id\":\"fyyJRDHcTe9REs4Ni\",\"author\":\"lord_leaf\",\"authorId\":\"jzorpPo7TYt6i589D\",\"code\":\"def check(d1, d2, k):\\n\\t\",\"difficulty\":1.4516129032258065,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"Q4uNzT6EPkFNnaiqM\",\"instructions\":\"Create a function that takes three arguments (first dictionary, second dictionary, key) in order to:\\n\\n1. Return the boolean `True` if both dictionaries have the same values for the same keys.\\n2. If the dictionaries don't match, return the string `\\\"Not the same\\\"`, or the string `\\\"One's empty\\\"` if only one of the dictionaries contains the given key.\\n\\n### Examples\\n```\\ndict_first = { \\\"sky\\\": \\\"temple\\\", \\\"horde\\\": \\\"orcs\\\", \\\"people\\\": 12, \\\"story\\\": \\\"fine\\\", \\\"sun\\\": \\\"bright\\\" }\\ndict_second = { \\\"people\\\": 12, \\\"sun\\\": \\\"star\\\", \\\"book\\\": \\\"bad\\\" }\\n\\ncheck(dict_first, dict_second, \\\"horde\\\") ➞ \\\"One's empty\\\"\\n\\ncheck(dict_first, dict_second, \\\"people\\\") ➞ True\\n\\ncheck(dict_first, dict_second, \\\"sun\\\") ➞ \\\"Not the same\\\"\\n```\\n\\n### Notes\\n- Dictionaries are an unordered data type.\\n- Double quotes may be helpful.\\n- `KeyError` can occur when trying to access a dictionary key that doesn't exist.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"dict_a = {'sky':'blue', 'road':'broken', 'sun': 'star', 'tree':'tall', 'car':'noisy', 'study':'hard', 'price': 500}\\ndict_b = {'sun': 'star', 'book': 'bad', 'sky': 'temple', 'people': 12, 'price': 500, 'car':'auto', 'study':'hard'}\\n\\nTest.assert_equals(check(dict_a, dict_b, 'sky'), \\\"Not the same\\\")\\nTest.assert_equals(check(dict_a, dict_b, 'sun'), True)\\nTest.assert_equals(check(dict_a, dict_b, 'tree'), \\\"One's empty\\\")\\nTest.assert_equals(check(dict_a, dict_b, 'road'), \\\"One's empty\\\")\\nTest.assert_equals(check(dict_a, dict_b, 'car'), \\\"Not the same\\\")\\nTest.assert_equals(check(dict_a, dict_b, 'book'), \\\"One's empty\\\")\\nTest.assert_equals(check(dict_a, dict_b, 'study'), True)\\nTest.assert_equals(check(dict_a, dict_b, 'people'), \\\"One's empty\\\")\\nTest.assert_equals(check(dict_a, dict_b, 'price'), True)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,0,2,2,1,1,1,1,1,2,2,1,0,2,2,2,1,5,2,1,0,2,2,1,1,1,2,2,2,2,0,3,0,0,2,2,2,2,2,0,2,2,1,1,1,1,1,1,1,2,1,1,2,1,1,0,2,1,1,2,2,2,2,2,1,2,1,2,3,1,2,2,0,2,2,1,2,0,0,2,1,2,3,0,3,2,2,3,0,2,2,0,2,1,2,2,2,1,1,0,2,1,2,1,2,2,1,2,1,2,2,1,0,1,1,3,0,2,1,2,2,1,0,3,2,0,2,2,2,2,2,0,0,2,1,2,2,0,2,2,1,2,1,1,2,0,2,1,2,1,1,2,1,2,2,2,2,2,1,2,2,2,0,1,2,0,1,1,2,2,2,2,0,1,2,1,2,0,0,1,2,2],\"rators\":[\"jzorpPo7TYt6i589D\",\"AasGs8AeX9Lcb9xJn\",\"8PwfYqoDQFThzNtvf\",\"s5M5RvgqR9BhB9JoC\",\"8JyqsSbN2FJXPr3cw\",\"gb9rvGus2Jv7bjZSs\",\"aEm3Wvj2rFYRL8Lrb\",\"XrqNzJ2FRG8HnGiR6\",\"hnyhBFWwNCz9mDfSi\",\"rgvAJFwfCeYoYnFTK\",\"9pzFiFK3ANLjQfnr2\",\"HF28xZKSLM9wEuqNg\",\"So6PHm74mfJuY2WTs\",\"4yNLEwL2rsx4EE5Nt\",\"DEDniTrstQYGounXT\",\"gJYuGdkXEWWmGRLzu\",\"J5T8gZqiZXFuFDTQ7\",\"DrkR35NqnP9NDLbq6\",\"RgWhcJMQRoJP6b8Wg\",\"dHZqT6h4JMwk5fPC8\",\"JS3hNM3XXkxPdg3yk\",\"ZNnsMeNkdDhHjSrZb\",\"Yp7uvStL97cC9fKkY\",\"cR3ibTMxLyEdDFCHY\",\"yZvzB3qFb8pkHy4dg\",\"GmnxPhfiD7roRhsRX\",\"s9GzySPz9vpMNQ2vj\",\"Nb6LYPoQP6KJZt8mz\",\"tAF9Gf6PiGogbZuWs\",\"2QGRoQn2dRq3scu7k\",\"a777e8chPvJkY3tKa\",\"aRqQ42J5zqCmBNd8w\",\"eMuCpJ2spXWkJjWNz\",\"NG8PWBSjsM8mMhQEq\",\"KdNDysEsy2TW5QRJ2\",\"vRR5ypTzDsxg2iKgv\",\"hab8YixsXxe4CcZpP\",\"MKT7khMBGXzA22ykf\",\"yro9W5sMuBASbki8p\",\"H4abACFDH5t8CnnyH\",\"ZrKCkX7xxGGZzauFW\",\"2ptN2mhjFwFcHyPZd\",\"3cF6NXq3ZEwdkgSjb\",\"syRNbbPdLCGXbH2Gy\",\"mDWNyaaQ9hvPCRzSd\",\"pzprRdz65ZwTZvaxT\",\"FEYpu9RWysAgW3XnP\",\"jNvegJWCk5HCtEMbK\",\"zd9FLSzsGz3evKafy\",\"Lfut9z3euZ3odxFcH\",\"yr822PZmmiDDenxpB\",\"iojEnnY9FsMfYzp6f\",\"rK3xSCovoqjmkgBL9\",\"NNE5HNRXAkmhrWgyQ\",\"PhceyfmFntJcn5Fhf\",\"2innwjWqxJHo4eRGh\",\"yNjkHfHESBAnCssPB\",\"8BFSTCnoe2QggN64c\",\"CwXsu25ygLEwQbmQC\",\"zCZWAw7sZZWqTJgLv\",\"Pe8vWpDHRuH9nSGKW\",\"PXAcsKkssS2yLyDv2\",\"JZbBYihgT6m7bKvgc\",\"mxX4rH5ELYkdZ2Mbw\",\"R4SjTgDnpigJYDLyL\",\"X5MqeHyPh6cSQCXnk\",\"p5EN3tadeCfPkW3CB\",\"iS5BrkGLzJyPK7nKt\",\"yjtdwc2AC4jA2RWtn\",\"n2BRY9X8899dcG8Bw\",\"Wv2vJnEj8ywNmARoF\",\"HqmxnQJM66Y57twhn\",\"ta5CrWnBCRusD2WMo\",\"oBcs8GLX2ZFLXQy8y\",\"Q9afpRu3u8zuWuzLQ\",\"jNE5AHcJQWXz7efuP\",\"Ecg4m7srYGgZsb4Ck\",\"M8dQuMrEpP8Hc3tHN\",\"6gS4E2C84vBYTYeDZ\",\"YA7SDhpgEtsqynvNL\",\"EMJ6uvBZkie429gdg\",\"7K2GEb5TZRtSpyyGS\",\"RehJGBFS6CYiWdjZx\",\"w2HhxvSLmDhaGCAjE\",\"3uxbBcR3pHapTpuso\",\"TPhfpB5tzQWSSn67n\",\"MKJhn7goNzuGtB5y9\",\"yJKsrbZs7koZHuJm4\",\"KLmLKaJPfsYxp42p2\",\"Kz7ee56Ht4Ns8JjBj\",\"y372QoK9hSQGAWjCF\",\"k2Eo3wyfZZ6KxvKhN\",\"tpxMgkGSHwBjS95Ta\",\"Kh3Pc2ZRusurLaMyP\",\"mG8HqKiAQFTdRZthG\",\"gXTAie79kiw28tx5u\",\"kxKR2bx7DrNDPqJPz\",\"9CoqdidjM9KbeKnHY\",\"6HgMANhu6WiGyXSGN\",\"9FCeFzjPA4jrQ7oHW\",\"GGprTwrkjuccmrQRg\",\"zZDaXBxMzTCBhNkgL\",\"5HCu9Ydd86QgHDRNP\",\"3LiSLdtN58n46NEqg\",\"hXoTNPPmJLzkZnkSX\",\"KTFxMsjaW4xgo5ajY\",\"NzbRqGWspQnWMoDrF\",\"wRttWTM59y8m5mx7x\",\"DPi9QGLctq2y76KuE\",\"dBzwBtRjZqB98DJeB\",\"noaBx5QyY6pTS5bja\",\"QRv96jmNaYsWkxQEG\",\"CTKmXtrqDYqJBnuy8\",\"mDzReRELNxXWY6xTW\",\"KJCDwGkoXh8qtbbKr\",\"dj5AyG5fWP8FdsSmZ\",\"J3upzLHuEwXH7Z2hx\",\"QCvvnevRLhBY8XBJk\",\"rrSC943cCKNG48sH4\",\"cAP3n5NY64uoMwzRR\",\"d8qtzoLB264iP8tdY\",\"DxxNN37iEz7b8t2nf\",\"HjZQR6wRLcxN5hKaf\",\"kNrnnMxhFZztMTBAX\",\"WaJ3zN9ugsSy9uDu6\",\"RGMbFMZXJr7DhcAJy\",\"5XiuAqicKD4hBdu63\",\"DYDJTyGgKFnBRLm2r\",\"5hQnRWiKkhgKJXNMP\",\"C2AfMipCicfD58WJ9\",\"idjmFCuqPacBPvCzw\",\"g9FyJ8yeT9ic97Qp2\",\"HuNF3xTBzmatyGSTm\",\"Jqk2uJZZxEv5wZFze\",\"Cybtjz3cF7RgoiqrN\",\"9MER8SZ9Xo6xNYMj8\",\"AXcnPX68zdMiLNSmu\",\"sHjfbGQGLHE6JR6qu\",\"pAyLyc76wYgR6pYpE\",\"5wCHxMQ5Km2bjqcGZ\",\"o4ixjQGSaYqA2JoM4\",\"qmNaxe7JbtECT3gvT\",\"2H7qphwdz7PPoFKgc\",\"MaLpA3hMEfEr22WM3\",\"buX4mCQhtXCfBjeno\",\"GqothajHR2vKfEHGZ\",\"YmMgWhzhHhQLmGGgH\",\"5S9nX4rKsnCcnv4Cz\",\"GGdmhAvxXhqhhibJN\",\"utTuvGdmu2sBHWBhQ\",\"AJexRBN9cYQmqvYu6\",\"B8n7KqbvEDjZzgj2D\",\"gMRgPAR6s8h8y5qDB\",\"T2khGAEQMawXw2azL\",\"whm4vkxLMtG9YyobP\",\"q2tzvkrLASvSjkek9\",\"JhX7jvtpwNyxcc39m\",\"eYfPWvZwnJQkHbSTK\",\"yod5YhKtPqw2GfG9B\",\"cZccqzRQ9GgjQF6Az\",\"Ds7L5bksw2QRHjrKL\",\"srJ34BaybkQh3qRkM\",\"YcCLwitFMAEJSnxAW\",\"Dq24MSpogRmq6L4hX\",\"AAkppFDhrD5E2zjHL\",\"qAby4AWXmTNeusvg3\",\"o2DNs2PdD9k4pcDw6\",\"T6iBEE2jp7f7iEF2P\",\"ey3CASd6Je5LEJzfB\",\"XD5nmvKQchKezPXhy\",\"wjc4iejpErBhxWwHo\",\"bvmTE46bfcM4ogj34\",\"66a9xX73nmTEuKs9k\",\"EfxwqhYdapX3dMQC2\",\"PC3pLs36zNzpRDSuE\",\"AFfw7cGg83uYk2Miy\",\"CHvzhtXnv8HTbPQ56\",\"NQQzu4wyLWW9faWtK\",\"Cc2Cgj4MWXZxsTooC\",\"c2q7mY39z5JPEMCaM\",\"mvJBakQ35CWAnbbEZ\",\"2fxapKr8XGdNeaKi2\",\"sbJcFfQjQ59Wfg4Cd\",\"M2gFMJkocQSY6bsFR\",\"9Ly8afdtofp8DXzrt\",\"2PufnQcsHsfymufX3\",\"R6YxHWAiLgKwy5YvC\",\"K6MfKMytoJJuSGewP\",\"PWgzeK859suojbrRx\",\"RoGGD5cpHb4ftdLDv\",\"X4rzfxGgxx6CS7Bpz\",\"qzXAMXsHZGT8o5hTA\",\"yDYWHheeALMpSSwbm\",\"hR7GMiqGap4CzEWSy\",\"hiGXnxds6zo7XsfTw\",\"2iFe3EHEH2YdhSKrs\",\"4Lwjr34ypKNQNQCar\",\"Afnps7TJQuS9sipMb\",\"cA6ALDreRTFs8k4MM\",\"pduNK68oazqQTtbLp\",\"4TmgHkn5vqyHK3sYC\",\"ZP7SXnexehPJ28fiz\",\"nc7bRhkxgKyqusYe3\",\"reSPwrcdzBAnDWs2E\",\"N2wnZXkhDH86mgjQ8\",\"yd5sXGT45KRARFqTv\",\"T6Rm8mREPMZSftzrC\",\"d9LBRxvADNBB5QJMB\",\"dzS6WBTMHyFEag6Fp\",\"qM4cFjDW9EBf6BNsA\",\"yAouD3PxzED8a4gap\",\"mw9464S5dnenqzvpm\",\"uGuS9YRXW2nj4p6zf\",\"qB6KSTYC6H2TQEQY6\",\"AQSqD9oNv2uPfxZCR\",\"rCrbqMiaGPgHYTNxu\",\"hpT9yYe5R45poHrYR\",\"Qyfyyw6oC4EHAndzo\",\"5QN8R22z43SrwoHDz\",\"Wi4H6ayKsNDWWQCG5\",\"jWbd7SYDzLPjc9EDh\",\"pPpmP7xeJzGgK362R\",\"8uiLiJcmWxWe6qw65\",\"Ncn7Qn2LbdsiJnfFk\",\"ruzwBPphPDRgLXdnP\",\"vAbK8sCfKyFC78HYg\",\"ApHwQxjZCAjZQ79Ho\",\"FT2wBacm3JxrYmZDW\"],\"total\":246,\"quality\":[5,5,5,5,5,5,5,4,5,5,3,5,4,5,5,5,5,5,5,5,5,5,5,4,5,5,5,5,5,4,4,4,5,4,5,5,5,5,5,5,5,5,5,1,5,5,5]},\"flags\":0},\"summary\":\"Create a function that takes three arguments (first dictionary, second dictionary, key) in order to:\\n\\nReturn the boolean True if both dictionaries have the same values for the same keys.\\nIf the dictionaries don't match, return the string \\\"Not the same\\\", or the string \\\"One's empty\\\" if only one of the dictionaries contains the given key.\\n\\nExamples\\ndict_first = {\",\"tags\":[\"logic\",\"strings\",\"algorithms\",\"objects\"],\"timestamp\":{\"$date\":1591266575423},\"title\":\"Are They the Same?\",\"quality\":4.723404255319149,\"family\":[{\"_id\":\"fyyJRDHcTe9REs4Ni\",\"language\":\"python3\"}]}}"]