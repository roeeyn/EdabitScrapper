a["{\"msg\":\"result\",\"id\":\"2490\",\"result\":{\"_id\":\"fdyTMPLpRHkQJmKSC\",\"author\":\"Evgeny SH\",\"authorId\":\"8PwfYqoDQFThzNtvf\",\"code\":\"import numpy as np\\nclass Shape:\\n\\n    def __init__(self, corners, density_function):\\n        self.area = 0\\n        self.mass = 0\\n        self.mass_center = (0, 0)\\n        self.corners = corners\\n        self.density_function = density_function\\n        \\\"\\\"\\\"\\n        delta = distance between grid points and perimeter wall\\n        distance between two grid points is 2 * delta\\n        \\\"\\\"\\\"\\n        self.delta = 0.05\",\"difficulty\":4.888888888888889,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"qkP3yYr4Cy6yWtdMG\",\"instructions\":\"Implement the class `Shape` that receives perimeter and density function into `__init__` method. The list of consecutive corners defines shape of a 2-dimensional object. The density function defines the mass distribution inside the shape. To compute mass in a certain point `m(x, y) = small_square * density(x, y)`. The `__init__` method calls other internal methods that compute three characteristics of the shape:\\n- area\\n- total mass\\n- center of mass `(xc, yc)`\\n\\nThe computational grid has distance between two neighboring points as `2 * delta`, the distance between a grid point and the perimeter wall is `delta`.\\n\\n### Examples\\n```\\nsh_ex1 = Shape([(1, 1), (3, 1), (3, 2), (1, 2)], lambda x, y: 100 + 100 * x)\\n\\nsh_ex1.area ➞ 2.0\\n\\nsh_ex1.mass ➞ 600.0\\n\\nsh_ex1.mass_center ➞ (2.1, 1.5)\\n```\\n\\nThe example can be verified via analytical integration. Other shapes in **Tests** are slightly more complicated and require numerical integration as illustrated here:\\n\\n![Alternative Text](https://edabit-challenges.s3.amazonaws.com/Mass-Center-fig5.png)\\n\\n### Notes\\n- How to compute the center of mass is [explained here](https://en.wikipedia.org/wiki/Center_of_mass).\\n- Performance is not an issue as all tests can be computed within one second.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"from math import sin\\nimport time\\n\\ntic = time.perf_counter()\\n\\nlst_test = [\\n    ([(2, 1), (2, 9), (1, 9), (1, 10), (4, 10), (4, 9), (3, 9), (3, 2), (5, 2),\\n     (5, 3), (6, 3), (6, 1)],\\n     lambda x, y: 100 + 10 * y + 10 * pow(x - 4, 2), 15.0, 2585, (2.9, 5.7)),\\n    ([(1, 2), (1, 10), (3, 10), (3, 9), (2, 9), (2, 3), (3, 3), (3, 2), (4, 2),\\n     (4, 3), (5, 3), (5, 9), (4, 9), (4, 10), (6, 10), (6, 2), (5, 2), (5, 1),\\n     (2, 1), (2, 2)],\\n     lambda x, y: 100 * sin(x * 0.5) + 50, 23.0, 2602, (3.3, 5.3)),\\n    ([(1, 1), (1, 2), (3, 2), (3, 9), (1, 9), (1, 10), (6, 10), (6, 9), (4, 9),\\n     (4, 2), (6, 2), (6, 1)],\\n     lambda x, y: 20 * pow(y - 6, 2) + 100, 17.0, 5573, (3.5, 4.8)),\\n    ([(1, 1), (1, 4), (3, 4), (3, 3), (2, 3), (2, 2), (5, 2), (5, 5), (1, 5),\\n     (1, 10), (6, 10), (6, 7), (4, 7), (4, 8), (5, 8), (5, 9), (2, 9), (2, 6),\\n      (6, 6), (6, 1)],\\n     lambda x, y: 100 + 20 * pow(x - 4, 2) + 20 * pow(y - 5.5, 2),\\n     27.0, 8804, (3.3, 5.5))\\n]\\n\\nsh_ex1 = Shape([(1, 1), (3, 1), (3, 2), (1, 2)], lambda x, y: 100 + 100 * x)\\nTest.assert_equals(round(sh_ex1.area, 1), 2.0)\\nTest.assert_equals(round(sh_ex1.mass), 600)\\nTest.assert_equals((round(sh_ex1.mass_center[0], 1),\\n       round(sh_ex1.mass_center[1], 1)), (2.1, 1.5))\\n\\nfor i, t in enumerate(lst_test):\\n    sh = Shape(t[0], t[1])\\n    Test.assert_equals(round(sh.area, 1), t[2])\\n    Test.assert_equals(round(sh.mass), t[3])\\n    Test.assert_equals((round(sh.mass_center[0], 1), round(sh.mass_center[1], 1)), t[4])\\nprint('Runtime(sec) = {:.6f}'.format(time.perf_counter() - tic))\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,5,4,5,5],\"rators\":[\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\",\"2innwjWqxJHo4eRGh\",\"iS5BrkGLzJyPK7nKt\"],\"total\":5,\"quality\":[]},\"flags\":0},\"summary\":\"Implement the class Shape that receives perimeter and density function into init method. The list of consecutive corners defines shape of a 2-dimensional object. The density function defines the mass distribution inside the shape. To compute mass in a certain point m(x, y) = smallsquare * density(x, y). The init_ method calls other internal methods that comput\",\"tags\":[\"classes\",\"physics\"],\"timestamp\":{\"$date\":1594420281204},\"title\":\"Center of Mass\",\"quality\":0,\"family\":[{\"_id\":\"fdyTMPLpRHkQJmKSC\",\"language\":\"python3\"}]}}"]