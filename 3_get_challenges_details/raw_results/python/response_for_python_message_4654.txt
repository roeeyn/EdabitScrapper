a["{\"msg\":\"result\",\"id\":\"1043\",\"result\":{\"_id\":\"F64txHnfYj4e4MpAN\",\"author\":\"zatoichi49\",\"authorId\":\"tAF9Gf6PiGogbZuWs\",\"code\":\"def schoty(frame):\\n\\t\",\"difficulty\":1.5396825396825398,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"BDXGZGoB4oQXznckd\",\"instructions\":\"The Russian *schoty* is type of abacus (counting tool) that is used by sliding threaded beads along horizontal wires. An example schoty would have 7 wires, each holding 10 beads. Each bead, when moved to the *left*, would count as 1 unit. Starting from the bottom wire and moving up, the units increase by a factor of 10. If we use \\\"O\\\" for a bead and \\\"-\\\" to show the wire, we can represent the schoty as follows:\\n\\n```\\n---OOOOOOOOOO  millions\\n---OOOOOOOOOO  hundred-thousands\\n---OOOOOOOOOO  ten-thousands\\n---OOOOOOOOOO  thousands\\n---OOOOOOOOOO  hundreds\\n---OOOOOOOOOO  tens\\n---OOOOOOOOOO  ones\\n```\\n\\nTo read the number, we count the beads on the left-hand side of each wire. In the example below, the number is **501264**:\\n\\n```\\n---OOOOOOOOOO  0\\nOOOOO---OOOOO  5\\n---OOOOOOOOOO  0\\nO---OOOOOOOOO  1\\nOO---OOOOOOOO  2\\nOOOOOO---OOOO  6\\nOOOO---OOOOOO  4\\n```\\n\\nGiven a list of strings representing each wire in the schoty, return the *number* being displayed.\\n\\n### Examples\\n```\\nschoty([\\n  \\\"---OOOOOOOOOO\\\",\\n  \\\"---OOOOOOOOOO\\\",\\n  \\\"---OOOOOOOOOO\\\",\\n  \\\"OOO---OOOOOOO\\\",\\n  \\\"O---OOOOOOOOO\\\",\\n  \\\"OOOOOOOOO---O\\\",\\n  \\\"OO---OOOOOOOO\\\"\\n]) ➞ 3192\\n\\nschoty([\\n  \\\"OO---OOOOOOOO\\\",\\n  \\\"O---OOOOOOOOO\\\",\\n  \\\"OOOOO---OOOOO\\\",\\n  \\\"---OOOOOOOOOO\\\",\\n  \\\"---OOOOOOOOOO\\\",\\n  \\\"---OOOOOOOOOO\\\",\\n  \\\"---OOOOOOOOOO\\\"\\n]) ➞ 2150000\\n```\\n\\n### Notes\\nFor more info on how to use a schoty, please check the **Resources** tab. This challenge ignores the traditional 4-bead wires used for quarter-ruble and quarter-kopek calculations.\",\"lab\":\"Test.assert_equals(schoty(['OOOOO---OOOOO', '---OOOOOOOOOO', 'O---OOOOOOOOO', 'O---OOOOOOOOO', '---OOOOOOOOOO', 'OOOOOOOO---OO', 'OO---OOOOOOOO']), 5011082)\\nTest.assert_equals(schoty(['OOOOOO---OOOO', 'OOOOOO---OOOO', 'OOOO---OOOOOO', 'OOOOOOO---OOO', 'O---OOOOOOOOO', 'OOOOOOO---OOO', 'OOOOOOO---OOO']), 6647177)\\nTest.assert_equals(schoty(['---OOOOOOOOOO', '---OOOOOOOOOO', '---OOOOOOOOOO', 'OO---OOOOOOOO', 'O---OOOOOOOOO', '---OOOOOOOOOO', 'OOOOOOOOO---O']), 2109)\\nTest.assert_equals(schoty(['O---OOOOOOOOO', 'OOO---OOOOOOO', 'OOOOOOO---OOO', '---OOOOOOOOOO', 'OOOOOOOO---OO', 'OO---OOOOOOOO', 'OOOOOOO---OOO']), 1370827)\\nTest.assert_equals(schoty(['---OOOOOOOOOO', 'OOOOOOOOO---O', 'OOO---OOOOOOO', '---OOOOOOOOOO', 'OO---OOOOOOOO', 'OOOOOO---OOOO', 'OOOOO---OOOOO']), 930265)\\nTest.assert_equals(schoty(['---OOOOOOOOOO', 'OOOOOO---OOOO', 'OOOOOOO---OOO', 'OOOOOOO---OOO', '---OOOOOOOOOO', '---OOOOOOOOOO', 'OOOOOOOO---OO']), 677008)\\nTest.assert_equals(schoty(['OOOOOOOOO---O', 'OOOOOOO---OOO', 'OOOOO---OOOOO', 'OOOOOOO---OOO', '---OOOOOOOOOO', 'O---OOOOOOOOO', 'OOO---OOOOOOO']), 9757013)\\nTest.assert_equals(schoty(['OOOOOOO---OOO', 'O---OOOOOOOOO', 'OOOO---OOOOOO', 'O---OOOOOOOOO', 'OO---OOOOOOOO', 'O---OOOOOOOOO', 'OOOOOOO---OOO']), 7141217)\\nTest.assert_equals(schoty(['---OOOOOOOOOO', '---OOOOOOOOOO', 'OOOO---OOOOOO', 'OOOOOOO---OOO', 'O---OOOOOOOOO', 'OOOOOOOO---OO', 'OOO---OOOOOOO']), 47183)\\nTest.assert_equals(schoty(['OOOOOO---OOOO', '---OOOOOOOOOO', '---OOOOOOOOOO', 'O---OOOOOOOOO', 'OOOOOOOOO---O', 'OOOOO---OOOOO', '---OOOOOOOOOO']), 6001950)\\nTest.assert_equals(schoty(['---OOOOOOOOOO', '---OOOOOOOOOO', 'OOOOOOOOO---O', 'OOOOOOOO---OO', 'OOOOOOOOO---O', 'OO---OOOOOOOO', 'OOOOOOOO---OO']), 98928)\\nTest.assert_equals(schoty(['OOOOO---OOOOO', 'OOOOOOOO---OO', 'OOOOOOOOO---O', 'OOO---OOOOOOO', 'O---OOOOOOOOO', 'OOOOOOOOO---O', 'OOOOOO---OOOO']), 5893196)\\nTest.assert_equals(schoty(['OO---OOOOOOOO', 'OOOOOO---OOOO', 'OOOOOOOOO---O', 'OOOOOOO---OOO', 'OOOOOOOO---OO', 'OOOOO---OOOOO', 'OOOOOOOO---OO']), 2697858)\\nTest.assert_equals(schoty(['---OOOOOOOOOO', '---OOOOOOOOOO', 'OOOOOO---OOOO', '---OOOOOOOOOO', 'OOOO---OOOOOO', 'O---OOOOOOOOO', 'OOOO---OOOOOO']), 60414)\\nTest.assert_equals(schoty(['OO---OOOOOOOO', 'OOOOOO---OOOO', 'OOO---OOOOOOO', 'OOO---OOOOOOO', 'OOO---OOOOOOO', 'OO---OOOOOOOO', '---OOOOOOOOOO']), 2633320)\\nTest.assert_equals(schoty(['OOOOOOOOO---O', '---OOOOOOOOOO', 'OOOOO---OOOOO', 'O---OOOOOOOOO', 'OOOOOOOO---OO', '---OOOOOOOOOO', 'OOOOOOOOO---O']), 9051809)\\nTest.assert_equals(schoty(['OO---OOOOOOOO', 'OO---OOOOOOOO', 'OOOOOOO---OOO', '---OOOOOOOOOO', 'OOOOOOO---OOO', 'OOOO---OOOOOO', 'OOOOOOOOO---O']), 2270749)\\nTest.assert_equals(schoty(['OOOOOOO---OOO', 'OOOOOOOOO---O', '---OOOOOOOOOO', '---OOOOOOOOOO', 'OO---OOOOOOOO', '---OOOOOOOOOO', 'OOOO---OOOOOO']), 7900204)\\nTest.assert_equals(schoty(['OOOOOO---OOOO', 'OOOO---OOOOOO', 'OOOOOO---OOOO', 'OOOOOOOO---OO', '---OOOOOOOOOO', 'OOOOOOO---OOO', 'OOOOOO---OOOO']), 6468076)\\nTest.assert_equals(schoty(['OOOOOOOO---OO', 'OOOOOOOOO---O', 'OOOO---OOOOOO', 'OOOOOO---OOOO', 'OOOOO---OOOOO', '---OOOOOOOOOO', 'OOOO---OOOOOO']), 8946504)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,1,1,2,1,1,1,1,0,2,2,1,0,2,3,2,1,2,0,2,2,2,2,1,2,3,1,0,2,0,1,1,1,2,0,2,2,2,2,2,2,1,0,2,2,1,2,2,1,2,2,2,0,2,2,2,1,2,0,3,2,1,2,1,0,1,3,1,2,1,2,2,2,2,0,2,2,1,2,2,2,1,1,2,2,0,2,1,2,2,0,1,2,2,2,1,2,2,1,2,1,0,1,2,2,1,3,2,2,2,0,2,2,2,2,2,2,2,1,2,2,2,1,2,2,2,2,1,1,1,0,2,0,1,2,2,0,1,2,3,1,2,1,1,2,2,2,2,2,2,1,2,2,2,1,5,2,3,0,1,1,2,2,0,2,1,1,2,3,0,2,2,2,1,1,2,1,1,2,0,2,1,1,2],\"rators\":[\"gb9rvGus2Jv7bjZSs\",\"yZvzB3qFb8pkHy4dg\",\"jYJ26SiLKBu5GRumq\",\"tAF9Gf6PiGogbZuWs\",\"yrCNkFYQBEDE76eFS\",\"C9LKGu2g5hSijvDzA\",\"PSrcg6fy835R4c5CW\",\"WkWyq9wMkZhXB6zsD\",\"td7qPZ7Lv4pEWT2Ya\",\"N2wnZXkhDH86mgjQ8\",\"XKi8iZXBCHCaebSHh\",\"nfXGHENb5md7m355s\",\"uSh3aNxzD28jBuhxa\",\"sCnrfER8vCe4xhpB2\",\"CssdRyc8mNPgPxsy4\",\"AF6LgdKhEdzwgRJom\",\"JEAi9mG3vvBomJ3Yu\",\"8JyqsSbN2FJXPr3cw\",\"gMJhLdyw3tH7L96X2\",\"Nj6FwgBtAXsaQwsM2\",\"ZzwR8m8Q6Gozo9ofz\",\"yAouD3PxzED8a4gap\",\"FgkYtHLxeD8pETJ8T\",\"moFrJ4vxzxPynByzB\",\"tczr8H3zHk2kwp8br\",\"kRu7nHGSD7knvkrEF\",\"cR3ibTMxLyEdDFCHY\",\"T2vhHPhRR96hRizq8\",\"SKabuq5XuhXBugKBa\",\"WBAKsQ3cdcrKxeAcp\",\"nzx4uAPg3hCceyFPE\",\"9YtQPAffoq4WJLcAP\",\"Fv3AEnW3RoRDbY3FW\",\"HQxp7NcdvF92G7bYS\",\"otXtuQygbcYATMZoP\",\"8aPJNKDxXq7884eJb\",\"ksafdYcNM3SFEQoW9\",\"yr822PZmmiDDenxpB\",\"6QEhBfzWmuYwm34zz\",\"4y2bxsHwifCdZXAQA\",\"HqmxnQJM66Y57twhn\",\"jeuoearPPTcGPgXhf\",\"AxDfHRFgQ8jfFbF5p\",\"K96FwtfDDN5WM4Bb7\",\"2fxapKr8XGdNeaKi2\",\"3SKmXhcLPPkmQhjip\",\"DLai9DxpZN6p5TPRX\",\"u5u2YpHXiNgzDNJdX\",\"sKfrD9gjCDHuqLzSk\",\"nc7bRhkxgKyqusYe3\",\"4tgBydK887PitgAoi\",\"8PwfYqoDQFThzNtvf\",\"YTTTwEP9F7mBe5Xgi\",\"qJZsi5rhRnWA38FbA\",\"N47rXFe9gzFB4xBs3\",\"yabtHTtycsWhcGBfD\",\"C4QntmkYtB89GNtpd\",\"fxLjWpWbBeaYcvdgB\",\"mxX4rH5ELYkdZ2Mbw\",\"bZouZFDGoQgfKHGZ7\",\"CEd9tLdXeDeNHSzys\",\"ZgjCbr3TwkFf3f4aB\",\"6ShafRStcvew4GfCh\",\"Jqk2uJZZxEv5wZFze\",\"AbrJ8hMyv5fFXG6DN\",\"XbxHXmh5ZmRN2gw3K\",\"DryNRN98Dj24BpgrL\",\"Yp7uvStL97cC9fKkY\",\"rEWQdNHK6YjuBqmrR\",\"BeFnbPbMnAM2SjBdZ\",\"Xj6R2zqhgumffQCAN\",\"PXAcsKkssS2yLyDv2\",\"LA2YneDcbtiSj5SH6\",\"czhHyKdCAijYdz5ER\",\"ab7BsQuhDo3QgE6bh\",\"2innwjWqxJHo4eRGh\",\"QnPD4Sv6W4LHc2Qng\",\"Ycj4iTJGFyvC4bXek\",\"zHdcQydaKdxckwcEo\",\"4CFzv558qbGcpQwc4\",\"AasGs8AeX9Lcb9xJn\",\"orFLgPDw9H5MDzmwo\",\"v3fjGuc7Pq4yjFygS\",\"hnyhBFWwNCz9mDfSi\",\"pMg2Zddm29zRGP6wg\",\"zg8GmMSP2LkHBtAzy\",\"w3A7cBWyAfukk6xEQ\",\"N7GPFEhCaiQ79MKjz\",\"s5M5RvgqR9BhB9JoC\",\"9Ly8afdtofp8DXzrt\",\"dHZqT6h4JMwk5fPC8\",\"aRqQ42J5zqCmBNd8w\",\"sz8ufn9i8zeiGWpAy\",\"vLrq4dEDMM2wd68Dc\",\"jNvegJWCk5HCtEMbK\",\"ZNnsMeNkdDhHjSrZb\",\"Cc2Cgj4MWXZxsTooC\",\"gJYuGdkXEWWmGRLzu\",\"aEm3Wvj2rFYRL8Lrb\",\"5kEyLPjTLrt7z2YJZ\",\"HF28xZKSLM9wEuqNg\",\"2QGRoQn2dRq3scu7k\",\"kYWb8BwpKwunQkxeX\",\"DEDniTrstQYGounXT\",\"L6oQAqBfQy4b2WLpr\",\"M8dQuMrEpP8Hc3tHN\",\"8LfTheFzvicameoz9\",\"KdNDysEsy2TW5QRJ2\",\"9pzFiFK3ANLjQfnr2\",\"rgvAJFwfCeYoYnFTK\",\"ahk2qiXKJA753wAJk\",\"TR5aWdDKP6iaL6mGK\",\"MKT7khMBGXzA22ykf\",\"9bQyb6rW7xfE4vgrR\",\"LWCzZ8mb8gwrRNGfq\",\"a777e8chPvJkY3tKa\",\"XrqNzJ2FRG8HnGiR6\",\"4yNLEwL2rsx4EE5Nt\",\"aS9AJKtmzZxpmm38X\",\"H4abACFDH5t8CnnyH\",\"2ptN2mhjFwFcHyPZd\",\"ZrKCkX7xxGGZzauFW\",\"syRNbbPdLCGXbH2Gy\",\"NG8PWBSjsM8mMhQEq\",\"TwKZ3835iFLog2RuQ\",\"iojEnnY9FsMfYzp6f\",\"ypGdjKLkswPZXo89K\",\"FEYpu9RWysAgW3XnP\",\"q6QsMYNMpPNtmyTeW\",\"Pe8vWpDHRuH9nSGKW\",\"yjtdwc2AC4jA2RWtn\",\"zT9LpkiwYjLviYYW6\",\"hRiMXDZNAzyPd5tpt\",\"NNE5HNRXAkmhrWgyQ\",\"oBcs8GLX2ZFLXQy8y\",\"n2BRY9X8899dcG8Bw\",\"M35nSp9motwe2cDrP\",\"PTDFuxAzou7W6asWt\",\"YcCLwitFMAEJSnxAW\",\"w2HhxvSLmDhaGCAjE\",\"RehJGBFS6CYiWdjZx\",\"zd9FLSzsGz3evKafy\",\"3cF6NXq3ZEwdkgSjb\",\"tpxMgkGSHwBjS95Ta\",\"KLmLKaJPfsYxp42p2\",\"mG8HqKiAQFTdRZthG\",\"7K2GEb5TZRtSpyyGS\",\"gXTAie79kiw28tx5u\",\"Nb6LYPoQP6KJZt8mz\",\"Wv2vJnEj8ywNmARoF\",\"EMJ6uvBZkie429gdg\",\"QRv96jmNaYsWkxQEG\",\"DPi9QGLctq2y76KuE\",\"9CoqdidjM9KbeKnHY\",\"CTKmXtrqDYqJBnuy8\",\"J3upzLHuEwXH7Z2hx\",\"dYPkStFnLvAMsHSzZ\",\"cAP3n5NY64uoMwzRR\",\"dBzwBtRjZqB98DJeB\",\"dj5AyG5fWP8FdsSmZ\",\"wRttWTM59y8m5mx7x\",\"RGMbFMZXJr7DhcAJy\",\"5XiuAqicKD4hBdu63\",\"iS5BrkGLzJyPK7nKt\",\"8FDr3RAEEoBM65b2W\",\"KJCDwGkoXh8qtbbKr\",\"d8qtzoLB264iP8tdY\",\"5HCu9Ydd86QgHDRNP\",\"J5T8gZqiZXFuFDTQ7\",\"HuNF3xTBzmatyGSTm\",\"5S9nX4rKsnCcnv4Cz\",\"GGdmhAvxXhqhhibJN\",\"eYfPWvZwnJQkHbSTK\",\"Ds7L5bksw2QRHjrKL\",\"xn7uGNKeAwPEkP9oA\",\"sHjfbGQGLHE6JR6qu\",\"qAby4AWXmTNeusvg3\",\"o4ixjQGSaYqA2JoM4\",\"T6iBEE2jp7f7iEF2P\",\"66a9xX73nmTEuKs9k\",\"AFfw7cGg83uYk2Miy\",\"eMuCpJ2spXWkJjWNz\",\"9ivvGvJGvtQfigQaZ\",\"yod5YhKtPqw2GfG9B\",\"CHvzhtXnv8HTbPQ56\",\"AJexRBN9cYQmqvYu6\",\"eHcgvkTGsH7ZziqBo\",\"8BFSTCnoe2QggN64c\",\"mvJBakQ35CWAnbbEZ\",\"BrTDhPJcACL2bsrpJ\",\"qzXAMXsHZGT8o5hTA\",\"ey3CASd6Je5LEJzfB\",\"XD5nmvKQchKezPXhy\",\"2PufnQcsHsfymufX3\",\"T6Rm8mREPMZSftzrC\",\"dzS6WBTMHyFEag6Fp\",\"4TmgHkn5vqyHK3sYC\",\"pduNK68oazqQTtbLp\",\"3nied3n8KG8RSNixH\",\"wjc4iejpErBhxWwHo\",\"NzbRqGWspQnWMoDrF\",\"RoGGD5cpHb4ftdLDv\",\"Wi4H6ayKsNDWWQCG5\",\"rCrbqMiaGPgHYTNxu\",\"buX4mCQhtXCfBjeno\"],\"total\":216,\"quality\":[2,5,5,5,5,5,5,3,5,5,5,5,4,5,5,5,5,5,5,5,5]},\"flags\":0},\"subscribers\":[\"tAF9Gf6PiGogbZuWs\"],\"summary\":\"The Russian schoty is type of abacus (counting tool) that is used by sliding threaded beads along horizontal wires. An example schoty would have 7 wires, each holding 10 beads. Each bead, when moved to the left, would count as 1 unit. Starting from the bottom wire and moving up, the units increase by a factor of 10. If we use \\\"O\\\" for a bead and \\\"-\\\" to show the\",\"tags\":[\"strings\",\"arrays\",\"loops\"],\"timestamp\":{\"$date\":1564683502298},\"title\":\"Read the Abacus (Part 1: Russian Schoty)\",\"isHidden\":false,\"quality\":4.714285714285714,\"family\":[{\"_id\":\"sSkPhsQjsHdT6Ri34\",\"language\":\"csharp\"},{\"_id\":\"5DfJYH9bXn4fG4Zui\",\"language\":\"javascript\"},{\"_id\":\"F64txHnfYj4e4MpAN\",\"language\":\"python3\"},{\"_id\":\"tpo7d9co5otR85QPS\",\"language\":\"ruby\"},{\"_id\":\"pJdajKuwYaAvRqALd\",\"language\":\"swift\"}]}}"]