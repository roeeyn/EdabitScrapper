a["{\"msg\":\"result\",\"id\":\"2328\",\"result\":{\"_id\":\"Gmk5awcwHZJoqs6ZW\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"def largest_island(lst):\\n\\t\",\"difficulty\":3.71875,\"familyId\":\"C9KdZM2RE8vg2Gukn\",\"instructions\":\"An **island is a region of contiguous ones**. A contiguous one is a `1` that is touched by at least one other `1`, either **horizontally**, **vertically** or **diagonally**. Given a piece of the map, represented by a 2-D list, create a function that returns the area of the largest island.\\n\\nTo illustrate, if we were given the following piece of the map, we should return `4`.\\n\\n```\\n[\\n  [0, 0, 0],\\n  [0, 1, 1],\\n  [0, 1, 1]\\n]\\n```\\n\\nOur function should yield `2` for the map below:\\n\\n```\\n[\\n  [1, 0, 0],\\n  [0, 0, 1],\\n  [0, 0, 1]\\n]\\n```\\n\\nOur function should yield `4` for the map below: : \\n\\n```\\n[\\n  [1, 0, 0],\\n  [0, 1, 1],\\n  [0, 0, 1]\\n]\\n```\\n\\n### Examples\\n```\\nlargest_island([\\n  [1, 0, 0], \\n  [0, 0, 0], \\n  [0, 0, 1]\\n])\\n\\n➞ 1\\n\\nlargest_island([\\n  [1, 1, 0], \\n  [0, 1, 1], \\n  [0, 0, 1]\\n])\\n\\n➞ 5\\n\\nlargest_island([\\n  [1, 0, 0], \\n  [1, 0, 0], \\n  [1, 0, 1]\\n])\\n\\n➞ 3\\n```\\n\\n### Notes\\n- Maps can be any `m x n` dimension.\\n- Maps will always have at least 1 element. `m >= 1` and `n >= 1`.\",\"lab\":\"Test.assert_equals(largest_island([\\n  [1, 0, 0],\\n  [0, 0, 0],\\n  [0, 0, 1]\\n]), 1)\\n\\nTest.assert_equals(largest_island([\\n  [1, 1, 0],\\n  [0, 1, 1],\\n  [0, 0, 1]\\n]), 5)\\n\\nTest.assert_equals(largest_island([\\n  [1, 0, 0],\\n  [1, 0, 0],\\n  [1, 0, 1]\\n]), 3)\\n\\nTest.assert_equals(largest_island([\\n  [0, 0, 0],\\n  [0, 1, 1],\\n  [0, 1, 1]\\n]), 4)\\n\\nTest.assert_equals(largest_island([\\n  [1, 0, 0],\\n  [0, 0, 1],\\n  [0, 0, 1]\\n]), 2)\\n\\nTest.assert_equals(largest_island([\\n  [1, 0, 0],\\n  [0, 1, 1],\\n  [0, 0, 1]\\n]), 4)\\n\\nTest.assert_equals(largest_island([\\n  [1, 0],\\n  [0, 1],\\n  [0, 0]\\n]), 2)\\n\\nTest.assert_equals(largest_island([\\n  [1]\\n]), 1)\\n\\nTest.assert_equals(largest_island([\\n  [1],\\n  [0],\\n  [1]\\n]), 1)\\n\\nTest.assert_equals(largest_island([\\n  [1, 1, 1],\\n  [0, 1, 1],\\n  [0, 0, 1]\\n]), 6)\",\"language\":\"python3\",\"summary\":\"An island is a region of contiguous ones. A contiguous one is a 1 that is touched by at least one other 1, either horizontally, vertically or diagonally. Given a piece of the map, represented by a 2-D list, create a function that returns the area of the largest island.\\n\\nTo illustrate, if we were given the following piece of the map, we should return 4.\\n\\n[\\n  [0\",\"tags\":[\"arrays\",\"data_structures\",\"logic\",\"games\"],\"timestamp\":{\"$date\":1552781695416},\"title\":\"Largest Island\",\"stats\":{\"completed\":{\"total\":64,\"ratings\":[4,4,4,4,4,4,4,4,4,4,2,2,3,5,5,4,5,4,4,4,4,2,5,0,4,5,5,3,3,4,5,4,3,2,5,5,4,5,0,5,5,2,5,4,3,3,3,5,2,4,5,4,0,4,3,5,5,4,4,2,5,0,5,5],\"rators\":[\"BkPgkDQGHm66X4Qai\",\"uSh3aNxzD28jBuhxa\",\"AYaEkTWLMmfzpwejr\",\"gghyGRFrEu3ha49Kz\",\"b6NCXuiwetSX5AkrM\",\"W2RBjMJ9KQPg4tjNZ\",\"ifev84ENvG5ZXsJPd\",\"yZvzB3qFb8pkHy4dg\",\"8JyqsSbN2FJXPr3cw\",\"WDaGgs2zcdz2aJ4Km\",\"T3ZAuoMrJjvZwN55B\",\"tAF9Gf6PiGogbZuWs\",\"WZxCpoREvQqJJ35bs\",\"WEsTtgWsLWeYmryTR\",\"WHSnBonknsgyuJsFE\",\"6W2GSzrYjMD9ANBFY\",\"3neNxwsu4hBCJygxk\",\"MXjxGML2X75x64vJo\",\"2skebTaq2Ek7QnC6n\",\"7R3edvryxyGRoJAEC\",\"YAsRhvoARsuNigs6L\",\"BFNm9gacwba9KyLFW\",\"sFBtQkN7sWwgF6oPf\",\"4rg9g6TKYZ8aifrYc\",\"6qJ8mFbGC9NfjsuKM\",\"HqmxnQJM66Y57twhn\",\"nLpdvK7EcahCqNe8X\",\"FZqvnnkNHnykkwzpp\",\"jDgJ2fdFS76TSorNc\",\"FHSJnAYTbcsKFgeQa\",\"2XB4cPSS2P5WwSxfy\",\"8PwfYqoDQFThzNtvf\",\"4xwButZn34q92d9Yn\",\"aCNWav8S8Try9RkC6\",\"GiK8LZt3JRKNJjj5W\",\"jGrqoesacgEqRRNad\",\"pAC5jpwEjjvjevyiH\",\"aEm3Wvj2rFYRL8Lrb\",\"AJwBauGHyrbqgDYce\",\"DwetpbChQM4r6Gwah\",\"vTfyrr4pGddp8rbXc\",\"AasGs8AeX9Lcb9xJn\",\"fznzd3qnvtbFkkizz\",\"W5TajitmCyxz87zAC\",\"5dHucvf2qBYyKim7X\",\"DSNs8jydjL97Ap7C7\",\"mDWNyaaQ9hvPCRzSd\",\"6428wKHtwKkFdvBs5\",\"YLtspA8ec6ntcoMMf\",\"xn7uGNKeAwPEkP9oA\",\"BRXiuhWLN3YSbSdvh\",\"s5M5RvgqR9BhB9JoC\",\"iS5BrkGLzJyPK7nKt\",\"eHcgvkTGsH7ZziqBo\",\"8sNv5PTHa7XQ8bNqR\",\"yjtdwc2AC4jA2RWtn\",\"gJYuGdkXEWWmGRLzu\",\"QvEXmSEo3ANp3yPyH\",\"okCRdHPFDYX4PGtwL\",\"pnzfNatg3P32mMYQY\"],\"quality\":[5,5,5,5,5]},\"tests\":{\"score\":0,\"rators\":[\"BkPgkDQGHm66X4Qai\"]},\"instructions\":{\"score\":0,\"rators\":[\"BkPgkDQGHm66X4Qai\"]},\"flags\":0},\"isHidden\":false,\"quality\":5,\"family\":[{\"_id\":\"EmEaT9K4wKe3g6QH3\",\"language\":\"cpp\"},{\"_id\":\"nR3b6f3kwX8Pn9jE4\",\"language\":\"javascript\"},{\"_id\":\"Gmk5awcwHZJoqs6ZW\",\"language\":\"python3\"},{\"_id\":\"m8yCD7hb54QdJmsuw\",\"language\":\"ruby\"}]}}"]