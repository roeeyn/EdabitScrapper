a["{\"msg\":\"result\",\"id\":\"828\",\"result\":{\"_id\":\"aoN2XoAfQzPQeRNRt\",\"author\":\"AniXDownLoe\",\"authorId\":\"incG8tH2dwThHg35f\",\"code\":\"def operation(a, b, op):\\n\\t\",\"difficulty\":1.3940886699507389,\"familyId\":\"mE4oAdLWjPc8pZd2K\",\"instructions\":\"Write a function that does the following operations: adding, subtracting, dividing, or multiplying values. It is simply referred to as _variable operation variable_. Of course, the variables have to be defined, but in this challenge the variables will be defined for you. All you have to do is look at the variables, do some string to integer conversions, use some `if` conditionals, and combine them based on the operation.\\n\\nThe numbers and operation will be given as strings, and you should return the value as a string as well.\\n\\n### Examples\\n```\\noperation(\\\"1\\\", \\\"2\\\", \\\"add\\\" ) ➞ \\\"3\\\"\\n\\noperation(\\\"4\\\", \\\"5\\\", \\\"subtract\\\") ➞ \\\"-1\\\"\\n\\noperation(\\\"6\\\", \\\"3\\\", \\\"divide\\\") ➞ \\\"2\\\"\\n```\\n\\n### Notes\\n- The numbers and operation will be given as strings, and you should also return the value as a string.\\n- If the answer is `\\\"undefined\\\"`, return `\\\"undefined\\\"` (e.g. dividing by zero).\\n- For divide, go ahead and round down to an integer.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(operation(\\\"1\\\", \\\"2\\\", \\\"add\\\"), \\\"3\\\")\\nTest.assert_equals(operation(\\\"1\\\", \\\"-20\\\", \\\"add\\\"), \\\"-19\\\")\\nTest.assert_equals(operation(\\\"9\\\", \\\"0\\\", \\\"divide\\\"), \\\"undefined\\\")\\nTest.assert_equals(operation(\\\"10\\\", \\\"10\\\", \\\"multiply\\\"), \\\"100\\\")\\nTest.assert_equals(operation(\\\"-10\\\", \\\"-10\\\", \\\"multiply\\\"), \\\"100\\\")\\nTest.assert_equals(operation(\\\"10\\\", \\\"10\\\", \\\"subtract\\\"), \\\"0\\\")\\nTest.assert_equals(operation(\\\"0\\\", \\\"0\\\", \\\"subtract\\\"), \\\"0\\\")\\nTest.assert_equals(operation(\\\"0\\\", \\\"1\\\", \\\"divide\\\"), \\\"0\\\")\\nTest.assert_equals(operation(\\\"0\\\", \\\"25415\\\", \\\"divide\\\"), \\\"0\\\")\\nTest.assert_equals(operation(operation(\\\"10\\\", \\\"10\\\", \\\"multiply\\\"),operation(\\\"10\\\",\\\"10\\\",\\\"add\\\"),\\\"divide\\\"), \\\"5\\\")\",\"language\":\"python3\",\"quality\":4.568047337278107,\"summary\":\"Write a function that does the following things: adding, subtracting, dividing, or multiplying values. It is simply referred to as variable operation variable. Of course, the variables have to be defined, but in this challenge, the variable will be defined for you. All you have to do is look at the variable, do some string to integer conversions use some if co\",\"tags\":[\"conditions\",\"language_fundamentals\",\"math\"],\"timestamp\":{\"$date\":1601998020338},\"title\":\"Operations\",\"stats\":{\"completed\":{\"total\":400,\"ratings\":[1,1,1,1,1,1,2,0,1,1,1,3,3,2,1,1,0,2,2,1,2,1,2,1,0,1,2,1,2,3,1,1,1,2,0,2,1,2,1,1,1,2,2,1,2,0,2,0,1,0,2,2,2,1,1,0,1,2,1,2,2,0,2,2,2,0,2,0,1,2,2,0,2,2,1,2,1,2,2,2,0,1,1,2,1,2,2,1,0,1,1,5,1,1,1,2,2,5,1,0,2,2,0,0,2,1,2,2,1,2,1,1,2,2,2,2,0,0,2,2,1,1,0,2,2,1,0,2,2,3,1,1,2,2,2,1,0,0,2,0,1,1,5,0,0,1,5,2,1,2,2,1,0,0,2,1,0,2,1,2,4,1,1,0,2,2,2,2,1,2,2,2,2,1,2,2,2,3,2,1,0,2,2,2,2,1,0,0,1,1,2,1,2,2,2,1,0,1,0,1,1,1,3],\"quality\":[5,1,5,4,2,5,2,4,5,4,3,4,5,4,5,3,5,5,5,5,4,5,5,5,5,5,5,1,5,5,5,5,5,3,4,4,5,5,4,5,5,5,3,5,5,5,5,5,5,4,5,5,5,5,2,5,5,5,5,4,3,5,5,5,5,5,5,3,5,3,5,5,4,5,5,5,5,5,5,5,5,5,2,5,5,4,2,5,4,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,5,5,5,5,5,5,5,5,5,5,4,5,5,5,5,4,5,5,5,5,5,5,5,4,5,5,5,5,5,4,5,5,2,5,4,4,5,5,5,5,4,4,5,5,5,1,5,5,5,5,5,4],\"rators\":[\"incG8tH2dwThHg35f\",\"Yp7uvStL97cC9fKkY\",\"eMuCpJ2spXWkJjWNz\",\"dYPkStFnLvAMsHSzZ\",\"Ds7L5bksw2QRHjrKL\",\"gb9rvGus2Jv7bjZSs\",\"xs2bsYhLhXY2kiWbn\",\"fKuRCYJyxELuAgJxT\",\"6428wKHtwKkFdvBs5\",\"J3upzLHuEwXH7Z2hx\",\"4fjSgcqhQQZM2ZFRP\",\"AXcnPX68zdMiLNSmu\",\"8PwfYqoDQFThzNtvf\",\"FvFhg2wELM3SCZDZQ\",\"RGMbFMZXJr7DhcAJy\",\"nb2QchJrdRJdv4pfE\",\"HF28xZKSLM9wEuqNg\",\"oBcs8GLX2ZFLXQy8y\",\"kNrnnMxhFZztMTBAX\",\"NuqGt5u3s7vJ7HBGR\",\"yjtdwc2AC4jA2RWtn\",\"yod5YhKtPqw2GfG9B\",\"CQhaiZqQcP87YteSG\",\"PJQJDjZaBxTXu4FyG\",\"QRv96jmNaYsWkxQEG\",\"6BTXDH2xdbYLsvjsz\",\"qD2LrwaDrSdiybLKY\",\"DCTFT9MRTmQnrKdD3\",\"Lg4t6SEWgtYz4u7Cj\",\"GtWPwFmkp8TiobSN6\",\"kXEfD7xxEyWd7oxxL\",\"oig8ig9SE9RZa8ttL\",\"w2HhxvSLmDhaGCAjE\",\"t36Pvp9BRQ7YFT8iy\",\"NzbRqGWspQnWMoDrF\",\"5HCu9Ydd86QgHDRNP\",\"dj5AyG5fWP8FdsSmZ\",\"wRttWTM59y8m5mx7x\",\"Fb2wehA7QgTFWry2x\",\"cR3ibTMxLyEdDFCHY\",\"Ls6f2HeQAN2khDCAc\",\"Cybtjz3cF7RgoiqrN\",\"s5M5RvgqR9BhB9JoC\",\"8JyqsSbN2FJXPr3cw\",\"zd9FLSzsGz3evKafy\",\"cAP3n5NY64uoMwzRR\",\"myiufZZ5sZbMf6ckA\",\"8aJrgKjb7rG9ppMWf\",\"p8qqFdJ3FSk5x9z3G\",\"XbxHXmh5ZmRN2gw3K\",\"aEm3Wvj2rFYRL8Lrb\",\"bitf2L9ri8NZPzDtA\",\"o4ixjQGSaYqA2JoM4\",\"PCT9BmR8G3DrXdYMc\",\"gJYuGdkXEWWmGRLzu\",\"FEYpu9RWysAgW3XnP\",\"iS5BrkGLzJyPK7nKt\",\"tpxMgkGSHwBjS95Ta\",\"sKfrD9gjCDHuqLzSk\",\"rrSC943cCKNG48sH4\",\"gXTAie79kiw28tx5u\",\"ga7aTTEThzsELuC2j\",\"dcuCtzKDASzoAJKsd\",\"i5iePG5GqhJJ8HEoB\",\"F9kmWdPuR7wPwZzLh\",\"NT926o5DhjZPWR5L3\",\"oyKcm3zqdy8Ko5P5d\",\"Lm6ChQCWBmaikmk5J\",\"KJCDwGkoXh8qtbbKr\",\"AJexRBN9cYQmqvYu6\",\"GcR9CA587pfQuWHyB\",\"GqothajHR2vKfEHGZ\",\"YRAzEBJoLvSaiPtYx\",\"tAF9Gf6PiGogbZuWs\",\"9uSNNicNzmcESKc9m\",\"Kh3Pc2ZRusurLaMyP\",\"bxeJYbwgjJ7ZP5HDz\",\"PXAcsKkssS2yLyDv2\",\"dBzwBtRjZqB98DJeB\",\"GGdmhAvxXhqhhibJN\",\"KDfmGkQoajgNwwAm3\",\"wJosiFATmZti3nEHG\",\"CB48GHbw7xtwmiuPn\",\"BrTDhPJcACL2bsrpJ\",\"rfyEkETeoS96QNH4e\",\"b3nshDT7mH96vKd6G\",\"qXjJ4nmQjaTuPhnD2\",\"JS3hNM3XXkxPdg3yk\",\"7fWotxAEJ2uYdQhNR\",\"niJt2TXdp3CmSFjFB\",\"4ArGCifHnsz8p525A\",\"N2wnZXkhDH86mgjQ8\",\"8rcaEyJW2rpzsK9Jb\",\"uhfjQ2PrL6hhHWZeL\",\"trkjZudN2F5HJKu7W\",\"wC42sRpRtEJH9HxDd\",\"8aEGGQPkGesWwoaom\",\"sHjfbGQGLHE6JR6qu\",\"SWvpkqD6NYT6WRLd6\",\"CahDuXpgrEbWQdwze\",\"mxgQ9Jt29CNkP9qa5\",\"Fk9kLwoG4Brf4KsKf\",\"hhJv6uaepEe89ZQQG\",\"YzGsxohyNDKHJwYfR\",\"hnQCFaDfXPWXhdATW\",\"dHConQk6pC8c323TE\",\"nqrLZ3AsFecS2poSv\",\"9ivvGvJGvtQfigQaZ\",\"J23RcmzbdtBbPCTjT\",\"sX9GZp3fYyQLrBKMJ\",\"6xTu4r8NMczBFvmtz\",\"uZBcb5zNbA3K8XuGE\",\"5XiuAqicKD4hBdu63\",\"DEDniTrstQYGounXT\",\"bG2r3LmhsE3Cqq282\",\"4HPBLRA6J9Njb9cpC\",\"bg5ZXTeFJ8zBQoG4Z\",\"FJSLiBc35txbkMysH\",\"u3exaHuZqYBnDBZh2\",\"eTJ5dxz6XaKjKJMeM\",\"d8qtzoLB264iP8tdY\",\"Tf7TJFSPktJBgLA4k\",\"K3RacTvkWHLfzKF8i\",\"NJqdWJXPh45CRrTFu\",\"CLypXaZksY99mpRCm\",\"qAby4AWXmTNeusvg3\",\"iFHhZZXSWcsZwxkgz\",\"wApM5FebzXTpWmNZ2\",\"YnSPsfAmarr2p2WMS\",\"SdMEN6AJaF7TZBnqx\",\"R4SjTgDnpigJYDLyL\",\"j49s8dHmmiyPxZmWj\",\"zgdugy4Q75ZqZycvW\",\"wftwuwQzKxunEGy37\",\"greFBfwjTruDrrP8d\",\"c2u7qfdaYxcyuydtu\",\"SPYSWseH56TkTzKGf\",\"JzAHBj4agJTT3J6qm\",\"DYDJTyGgKFnBRLm2r\",\"DrkR35NqnP9NDLbq6\",\"wEmFRYs7YywLBuyzj\",\"9FCeFzjPA4jrQ7oHW\",\"f9nyEFTfYQxi2zkvt\",\"45JCR4T56fSMFDRvR\",\"snFaY4RgJcFPFQ8bu\",\"g9FyJ8yeT9ic97Qp2\",\"8BFSTCnoe2QggN64c\",\"wjc4iejpErBhxWwHo\",\"nJXgbSQozcoE8Wn4N\",\"8EWzoYhmfKJuekMX5\",\"mDWNyaaQ9hvPCRzSd\",\"cZccqzRQ9GgjQF6Az\",\"awK73Qku8BcNGQ4Mm\",\"nfXGHENb5md7m355s\",\"uH4HvaiESNCeYdSyZ\",\"4fhjJBvLBWh6QeSih\",\"DxxNN37iEz7b8t2nf\",\"EdA9smavNGann96ky\",\"K4JsBLPjNKZv5LWnp\",\"XhC6ZXREBt85TBLsE\",\"jcGEghaWQAKEh5k8L\",\"pJj86xc32Bs7Frxvi\",\"DPi9QGLctq2y76KuE\",\"REbXuiozZdcmS4iiJ\",\"ey3CASd6Je5LEJzfB\",\"MXFAQAyRRg9Qassp9\",\"C2AfMipCicfD58WJ9\",\"HuNF3xTBzmatyGSTm\",\"MKT7khMBGXzA22ykf\",\"j566eL9SKHK89ecND\",\"yuRbyXHtdxTM5n7Es\",\"yk7DdKgLCzDasPqae\",\"8CMrRwp82esK8EFGo\",\"Ecg4m7srYGgZsb4Ck\",\"uzuMpnWZcTHfBBg4S\",\"zT9LpkiwYjLviYYW6\",\"YCv8nxhsuHFZS3nnm\",\"HhaPuCGtdwiEmw8c3\",\"jWrysbS3AqiQN8rmo\",\"J5T8gZqiZXFuFDTQ7\",\"BM3XJybLyz63qNdNq\",\"fznzd3qnvtbFkkizz\",\"oH5za8CuPrt4XyoKx\",\"DpnYcMphntjsQ96qg\",\"3pxHTZBsv7MKzFG6Y\",\"huEPpfPHkupH9XqDJ\",\"Dq24MSpogRmq6L4hX\",\"xqmfNiHH5FegFQBht\",\"jHzuR56B3bwWFoPow\",\"7TDpSRxcXTPHmvLh3\",\"LanWBnkBhqPNxJ5a7\",\"LMeoWu2kFKyAjWovv\",\"cRoHBaA7HjePc8wb2\",\"2NGSwAJk9NHt3toCo\",\"Jqk2uJZZxEv5wZFze\",\"pduNK68oazqQTtbLp\",\"WdKdsgH9gXkKgCycx\",\"2nD3hNDExw2LNYq4F\",\"csFCABy3kwwpoQXNy\",\"2EbDCCJJvCfKkbYia\",\"3nied3n8KG8RSNixH\",\"DqNQn9Jsxcu5HijKE\",\"a777e8chPvJkY3tKa\",\"GT9wLv8Lipyp6YYTp\",\"2QGRoQn2dRq3scu7k\",\"LWCzZ8mb8gwrRNGfq\",\"5wCHxMQ5Km2bjqcGZ\",\"PRCy9gHjEN2KKgukx\",\"wjt5iyzrjjAxzMbdK\",\"xumt4h8jvh7o4xkhr\",\"vCxuabDxEv9YC3Szb\",\"iF4tdvn5sA9CM4T6T\",\"ZyrfhDTZHb8LymH5b\",\"5hQnRWiKkhgKJXNMP\",\"uouMMdEWBuLBWPbzr\",\"5prBnBm3YszWAYPTp\",\"8ZhzKvdhsdKgpf6BT\",\"JMAmMMBMrQqRy72Cc\",\"abCKW9EmBinFsr7KG\",\"p7js9trz2zk2RorCR\",\"buX4mCQhtXCfBjeno\",\"gf7u4MKcGDFiijzK9\",\"EfxwqhYdapX3dMQC2\",\"7N6c3Xu244bnQWjBs\",\"HqmxnQJM66Y57twhn\",\"K6MfKMytoJJuSGewP\",\"5S9nX4rKsnCcnv4Cz\",\"aaJWssCWfMa63XJng\",\"MXGuntvz3byrP6WJc\",\"oDN67zoApxcztnYdu\",\"Nb6LYPoQP6KJZt8mz\",\"33boaDzGiY28bCDy6\",\"euTB6YthAd9Mwfj2t\",\"epPqSJrwXJY27mpmi\",\"srJ34BaybkQh3qRkM\",\"axdSNLZpiCDF8RS6n\",\"LPGPHgJc8MkvcEDBc\",\"nFbmNzMQ38TncmfQX\",\"q9FfWNiMDKRiaCJ5j\",\"di2hhADLx59Bj4ewM\",\"eYfPWvZwnJQkHbSTK\",\"2fxapKr8XGdNeaKi2\",\"Jzthnf66RxWAkMArt\",\"2HfNkb2SoqdyjKW3o\",\"zgoEhAyhrjnsSLPGw\",\"q6QsMYNMpPNtmyTeW\",\"n2BRY9X8899dcG8Bw\",\"iYXdNw7tKcgA3QwBX\",\"pPpmP7xeJzGgK362R\",\"T2vhHPhRR96hRizq8\",\"YcCLwitFMAEJSnxAW\",\"jL4y5fTJAMBjhZmko\",\"KBxTPknCRmB2b5y3i\",\"Cuy7McJ5y8BkXRRk9\",\"CTKmXtrqDYqJBnuy8\",\"jWbd7SYDzLPjc9EDh\",\"sbJcFfQjQ59Wfg4Cd\",\"PoxbYX9cfmuFXcDg6\",\"XD5nmvKQchKezPXhy\",\"rLMeCAzEE9Grp3yce\",\"2QziknsznNeMPRh3g\",\"T6iBEE2jp7f7iEF2P\",\"AFfw7cGg83uYk2Miy\",\"AQSqD9oNv2uPfxZCR\",\"Lkcku4D8wh449piQh\",\"3cF6NXq3ZEwdkgSjb\",\"BdnE4RS5puoxo92mA\",\"iojEnnY9FsMfYzp6f\",\"nc7bRhkxgKyqusYe3\",\"mtRvHDpeLoSGBf8zC\",\"BJp2WkwLWGHHB5oQW\",\"gjiu8kLnHYxe4HoBN\",\"dYgxQgSzJNMnWzhhE\",\"H9KZi2cjt4FwH7qog\",\"yyo6YLQN2of6fxp49\",\"YA7SDhpgEtsqynvNL\",\"22ApZ4qLm5tsj8PRb\",\"dJzNF59j2p8jWZxiQ\",\"GTKsdeEihE636Le9i\",\"66a9xX73nmTEuKs9k\",\"Wpn95NqWxncQrwNgz\",\"DfHHpvnubuFmeNky9\",\"CKHKhvJcq9jNMqrmd\",\"2PufnQcsHsfymufX3\",\"Cc2Cgj4MWXZxsTooC\",\"RoGGD5cpHb4ftdLDv\",\"ghMkPtdFCpM6w8nax\",\"PC3pLs36zNzpRDSuE\",\"wwMcJQRvf3X59Jyev\",\"c2q7mY39z5JPEMCaM\",\"XP4pRYeYiX9K4ejpW\",\"X4rzfxGgxx6CS7Bpz\",\"3hSzE837A9SKsi5X4\",\"XrqNzJ2FRG8HnGiR6\",\"StNu7DPyTgEStZsMY\",\"ASZk6eFeYMj5pitoe\",\"dqwatKFAeGpjmf5dm\",\"no46qNkTbNeHepe64\",\"XujK3rHd3JcM9TLJy\",\"CHvzhtXnv8HTbPQ56\",\"QFZcdxGKBaFZb7Zbk\",\"yr822PZmmiDDenxpB\",\"4RY3zj9C2t8GGefhi\",\"mvJBakQ35CWAnbbEZ\",\"GJmKcqu7xppQyBaTt\",\"w67KfQgZ6WAeY7K4Y\",\"WQubx7DAkG6WZE8FA\",\"9Ly8afdtofp8DXzrt\",\"u5u2YpHXiNgzDNJdX\",\"w3QDkmjZj2dAFDsjq\",\"jkys684AAfPRxrYaD\",\"AasGs8AeX9Lcb9xJn\",\"ZXWDtCrM9ev3439oi\",\"eHcgvkTGsH7ZziqBo\",\"9pzFiFK3ANLjQfnr2\",\"R6YxHWAiLgKwy5YvC\",\"hcAeJ5mhA7KTA6wkd\",\"8uiLiJcmWxWe6qw65\",\"xsDyJstYoBZRS8pJH\",\"PTDFuxAzou7W6asWt\",\"qzXAMXsHZGT8o5hTA\",\"4Lwjr34ypKNQNQCar\",\"YXQvrgeiGzLd6cTW9\",\"ctbThYbufFCYbRK4f\",\"hEpaAYfTpAp7xunYa\",\"hR7GMiqGap4CzEWSy\",\"T6Rm8mREPMZSftzrC\",\"kJMAAWPWEG6qFouEh\",\"NGvCPuMiAP3xrRLfB\",\"4TmgHkn5vqyHK3sYC\",\"ckMvGF5TAyCwcxJBm\",\"uGuS9YRXW2nj4p6zf\",\"2iFe3EHEH2YdhSKrs\",\"796v8eRqahP6wpLdL\",\"hiGXnxds6zo7XsfTw\",\"JhX7jvtpwNyxcc39m\",\"jkbavR2ATFJcpmo8M\",\"nkH3HfJXLMNcBMM79\",\"pQwhNKiCne4gEZgcn\",\"9azx6pJHMGK7dvDzQ\",\"d9LBRxvADNBB5QJMB\",\"qM4cFjDW9EBf6BNsA\",\"hpT9yYe5R45poHrYR\",\"AMpQSjKsRqhCDyS2j\",\"dzS6WBTMHyFEag6Fp\",\"yAouD3PxzED8a4gap\",\"3KkyQm77zsew58Dc2\",\"Qyfyyw6oC4EHAndzo\",\"M2gFMJkocQSY6bsFR\",\"B4y8aoyXJtskYPFEL\",\"QWjsXnLaJ7xfL3Amq\",\"p5ZshR8zhTqmdhKDc\",\"mxX4rH5ELYkdZ2Mbw\",\"5QN8R22z43SrwoHDz\",\"w7DdYk4e7nAmyXrbh\",\"qB6KSTYC6H2TQEQY6\",\"xjyixzXzqqqTfJARd\",\"quYcmxS33qHALzb4Z\",\"eW9R2SCoYnY8HBAdL\",\"vCeeMuYDbz3MB4vsk\",\"rDgKHd6ZSSpboiAj7\",\"mw9464S5dnenqzvpm\",\"ruzwBPphPDRgLXdnP\",\"Ncn7Qn2LbdsiJnfFk\",\"NHp9cXgWCyX6KqyMT\",\"Wi4H6ayKsNDWWQCG5\",\"RfbjShbg8jmhyNtJh\"]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"cFsidM4Ftv6g9Dkxo\",\"language\":\"cpp\"},{\"_id\":\"eHA9jMjzADDo6PhuJ\",\"language\":\"java\"},{\"_id\":\"mgCKn998CNowjAZBF\",\"language\":\"javascript\"},{\"_id\":\"aoN2XoAfQzPQeRNRt\",\"language\":\"python3\"},{\"_id\":\"A7tSxLNFCooNYYkSm\",\"language\":\"ruby\"}]}}"]