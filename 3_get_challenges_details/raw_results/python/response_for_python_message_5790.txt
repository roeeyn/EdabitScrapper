a["{\"msg\":\"result\",\"id\":\"1604\",\"result\":{\"_id\":\"PvRttLNygmjEzeZtb\",\"author\":\"Alessandro Manicone\",\"authorId\":\"AasGs8AeX9Lcb9xJn\",\"code\":\"import re\\n\\npattern = \\\"yourregularexpressionhere\\\"\",\"difficulty\":2.1095890410958904,\"familyId\":\"YuX7o97KZSNasmmiq\",\"instructions\":\"**Quantifiers** indicate numbers of characters or expressions to match.\\n\\n`x*` matches the preceding item \\\"x\\\" 0 or more times:\\n\\n```\\nre.findall(\\\"bo*\\\", \\\"A ghost boooooed\\\") ➞ [\\\"booooo\\\"]\\n```\\n\\n\\n`x+` matches the preceding item \\\"x\\\" 1 or more times. _Equivalent to _`{1,}`:\\n\\n```\\nre.findall(\\\"a+\\\", \\\"caaaaaaandy\\\") ➞ [\\\"aaaaaa\\\"]\\n```\\n\\n`x?` matches the preceding item \\\"x\\\" 0 or 1 times. If used immediately after any of the quantifiers `*`, `+`, `?`, or `{}`, makes the quantifier lazy (matching the minimum number of times), as opposed to the default, which is greedy (matching the maximum number of times):\\n\\n```\\nre.findall(\\\"e?le?\\\", \\\"angle\\\") ➞ [\\\"le\\\"]\\nre.findall(\\\"e?le?\\\", \\\"angel\\\") ➞ [\\\"el\\\"]\\n```\\n\\nWrite the **regular expression** that will match only the street. You must use a quantifier in your expression.\\n\\n### Example\\n```\\ntxt = \\\"Harry Potter, 4 Privet Drive, Little Whinging, Surrey\\\"\\npattern = \\\"yourregularexpressionhere\\\"\\n\\nre.findall(pattern, txt) ➞ [\\\"4 Privet Drive\\\"]\\n```\\n\\n### Notes\\n- You **don't** need to write a function, just the pattern.\\n- Do **not** remove `import re` from the code.\\n- Find more info on RegEx and quantifiers in **Resources**.\\n- You can find all the challenges of this series in my [Basic RegEx](https://edabit.com/collection/8PEq2azWDtAZWPFe2) collection.\",\"isHidden\":false,\"lab\":\"txt1 = 'Harry Potter, 4 Privet Drive, Little Whinging, Surrey'\\ntxt2 = 'Sherlock Holmes, 221B Baker St, Marylebone London NW1 6XE, UK'\\ntxt3 = 'The White House, 1600 Pennsylvania Avenue, Washington, DC'\\nquantifiers = ['*', '+', '?']\\n\\nTest.assert_equals(any(i in pattern for i in quantifiers), True, 'You must use at least one quantifier in your expression')\\nTest.assert_equals(re.findall(pattern, txt1), ['4 Privet Drive'])\\nTest.assert_equals(re.findall(pattern, txt2), ['221B Baker St'])\\nTest.assert_equals(re.findall(pattern, txt3), ['1600 Pennsylvania Avenue'])\\n\\n# Translated from JavaScript.\\n# The RegEx series was originally posted by Isaac Pak.\",\"language\":\"python3\",\"summary\":\"Quantifiers indicate numbers of characters or expressions to match.\\n\\nx* matches the preceding item \\\"x\\\" 0 or more times:\\n\\nre.findall(\\\"bo*\\\", \\\"A ghost boooooed\\\") ➞ [\\\"booooo\\\"]\\n\\nx+ matches the preceding item \\\"x\\\" 1 or more times. Equivalent to {1,}:\\n\\nre.findall(\\\"a+\\\", \\\"caaaaaaandy\\\") ➞ [\\\"aaaaaa\\\"]\\n\\nx? matches the preceding item \\\"x\\\" 0 or 1 times. If used immediately aft\",\"tags\":[\"regex\",\"formatting\"],\"timestamp\":{\"$date\":1587044951694},\"title\":\"RegEx XVII: Quantifiers\",\"stats\":{\"completed\":{\"total\":96,\"ratings\":[2,2,2,2,2,3,2,2,2,5,2,3,2,3,2,4,0,3,3,0,0,2,2,1,2,3,2,2,1,3,3,2,3,3,2,2,2,1,1,3,2,2,3,1,2,2,2,4,3,3,1,2,3,0,0,3,1,2,1,0,3,2,1,2,1,3,2,3,5,1,3,2,3],\"rators\":[\"AasGs8AeX9Lcb9xJn\",\"tAF9Gf6PiGogbZuWs\",\"aEm3Wvj2rFYRL8Lrb\",\"8JyqsSbN2FJXPr3cw\",\"DEDniTrstQYGounXT\",\"3Zceb8GudqAG3onG3\",\"aP7JkkYer28YWrPvC\",\"mDWNyaaQ9hvPCRzSd\",\"8PwfYqoDQFThzNtvf\",\"8LfTheFzvicameoz9\",\"wT5gGgvjKc5wz59AQ\",\"pWD2YC5s4YRCxFc2i\",\"gb9rvGus2Jv7bjZSs\",\"a777e8chPvJkY3tKa\",\"YsAz93yZw8KKPupKv\",\"586FdBhazpwJfnRYR\",\"EjbDDFRECrzQDkzrX\",\"7j5WZYiP4uoE7AqYC\",\"yJmwiykSNfLv9NqJ2\",\"HF28xZKSLM9wEuqNg\",\"PytNZK9mNiRiZxPrm\",\"BtdZezHfckxRLm7xR\",\"R4SjTgDnpigJYDLyL\",\"cykCKNJcqFBxz4T8s\",\"hnyhBFWwNCz9mDfSi\",\"XSt47ad5D5LLZSupD\",\"n2BRY9X8899dcG8Bw\",\"MCw7uAcoWcSTBTmr3\",\"xW9NGjvcevY6qdzvw\",\"pscBduNyf8TDHe2Km\",\"ACEZh39brWjdGkZXb\",\"8WpvgSbQciTQWdd8T\",\"BqT6sMHBAjkw4hjG6\",\"yjtdwc2AC4jA2RWtn\",\"cxABox46qWvJRyidE\",\"m6TC9gshrwufWqAYn\",\"Yp7uvStL97cC9fKkY\",\"oHbErJxjYJhD66d5w\",\"BNogTonsWhcfseTjX\",\"XjajdyybZZbkz8o5x\",\"7eYSYKpM4i2N4NZ92\",\"2QziknsznNeMPRh3g\",\"J3upzLHuEwXH7Z2hx\",\"uN5t57RETi5y2z5W8\",\"c2u7qfdaYxcyuydtu\",\"iS5BrkGLzJyPK7nKt\",\"GkwzERyQx7gKRGipu\",\"sX9GZp3fYyQLrBKMJ\",\"LCZ6JTAhBZBmWLzm8\",\"incG8tH2dwThHg35f\",\"6MjSiiBLPcvXbXcaZ\",\"QRv96jmNaYsWkxQEG\",\"xn7uGNKeAwPEkP9oA\",\"DpnYcMphntjsQ96qg\",\"6xTu4r8NMczBFvmtz\",\"FRv5HToEaZ6iRM7T5\",\"Y6w9WxXzRweSiy3Ls\",\"bPmZSm3AT2mQHbBHk\",\"m9Dj3WvWDwiu73PRh\",\"StNu7DPyTgEStZsMY\",\"KxD9zpRKGNJChcsQg\",\"Jqk2uJZZxEv5wZFze\",\"CTKmXtrqDYqJBnuy8\",\"Fmzo3d9rAck5RH8cq\",\"iojEnnY9FsMfYzp6f\",\"oBcs8GLX2ZFLXQy8y\",\"qNszsXx28cTxvGSNj\",\"ZgWwEdWxjy83WpPQX\",\"rNXHn4cCDaiQ35EiE\",\"JwkwCHcXthnGDsdFr\",\"bvmTE46bfcM4ogj34\",\"9NcZ23yufhtou68dT\",\"GGdmhAvxXhqhhibJN\",\"eHcgvkTGsH7ZziqBo\",\"MpfytGFYF77emJ3cT\",\"2PufnQcsHsfymufX3\",\"97DthwdtrBLm2y2Yj\",\"gKnWjDjwrJh7MK2df\",\"4Lwjr34ypKNQNQCar\",\"o4ixjQGSaYqA2JoM4\",\"rCrbqMiaGPgHYTNxu\",\"yod5YhKtPqw2GfG9B\",\"8sNv5PTHa7XQ8bNqR\",\"RoGGD5cpHb4ftdLDv\",\"ag8tcfPvJZWpRnwet\",\"MHiQx9E8rPgzJfsJy\",\"ExtLwnLBEiWJxAskL\",\"Z85ajWfZ4jDPkbvR4\",\"Ds7L5bksw2QRHjrKL\",\"Wi4H6ayKsNDWWQCG5\",\"9pzFiFK3ANLjQfnr2\"],\"quality\":[5,5,5,4,4,5,5,5,5,5,5,5,5,3,5,5,5,5,5,4,4,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":4.739130434782608,\"family\":[{\"_id\":\"u4xcCumCfmK92nf2K\",\"language\":\"javascript\"},{\"_id\":\"PvRttLNygmjEzeZtb\",\"language\":\"python3\"}]}}"]