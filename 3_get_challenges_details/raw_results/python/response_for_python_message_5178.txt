a["{\"msg\":\"result\",\"id\":\"1302\",\"result\":{\"_id\":\"NtsqbRPqtPYhR8tJe\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"def blocks(step):\\n\\t\",\"difficulty\":1.9882697947214076,\"familyId\":\"YZAtG9Wf3wiWLrqEB\",\"instructions\":\"A block sequence in three dimensions. We can write a formula for this one:\\n\\n![Sequence Step 1 - 5](https://edabit-challenges.s3.amazonaws.com/3d_blocks.png \\\"Sequence Step 1 - 5\\\")\\n\\nCreate a function that takes a number (step) as an argument and returns the amount of blocks in that step.\\n\\n### Examples\\n```\\nblocks(1) ➞ 5\\n\\nblocks(5) ➞ 39\\n\\nblocks(2) ➞ 12\\n```\\n\\n### Notes\\n- Step 0 obviously has to return `0`.\\n- The input is always a positive integer.\\n- Check the **Resources** tab for a video on finding quadratic sequences.\",\"lab\":\"Test.assert_equals(blocks(77), 3387)\\nTest.assert_equals(blocks(33), 725)\\nTest.assert_equals(blocks(50), 1524)\\nTest.assert_equals(blocks(21), 335)\\nTest.assert_equals(blocks(12), 137)\\nTest.assert_equals(blocks(30), 614)\\nTest.assert_equals(blocks(93), 4835)\\nTest.assert_equals(blocks(53), 1695)\\nTest.assert_equals(blocks(71), 2910)\\nTest.assert_equals(blocks(36), 845)\\nTest.assert_equals(blocks(8), 75)\\nTest.assert_equals(blocks(100), 5549)\\nTest.assert_equals(blocks(95), 5034)\\nTest.assert_equals(blocks(46), 1310)\\nTest.assert_equals(blocks(63), 2330)\\nTest.assert_equals(blocks(54), 1754)\\nTest.assert_equals(blocks(15), 194)\\nTest.assert_equals(blocks(45), 1259)\\nTest.assert_equals(blocks(64), 2399)\\nTest.assert_equals(blocks(46), 1310)\\nTest.assert_equals(blocks(68), 2685)\\nTest.assert_equals(blocks(46), 1310)\\nTest.assert_equals(blocks(23), 390)\\nTest.assert_equals(blocks(62), 2262)\\nTest.assert_equals(blocks(55), 1814)\\nTest.assert_equals(blocks(95), 5034)\\nTest.assert_equals(blocks(72), 2987)\\nTest.assert_equals(blocks(76), 3305)\\nTest.assert_equals(blocks(24), 419)\\nTest.assert_equals(blocks(98), 5340)\\nTest.assert_equals(blocks(22), 362)\\nTest.assert_equals(blocks(39), 974)\\nTest.assert_equals(blocks(68), 2685)\\nTest.assert_equals(blocks(9), 89)\\nTest.assert_equals(blocks(22), 362)\\nTest.assert_equals(blocks(85), 4079)\\nTest.assert_equals(blocks(37), 887)\\nTest.assert_equals(blocks(98), 5340)\\nTest.assert_equals(blocks(18), 260)\\nTest.assert_equals(blocks(65), 2469)\\nTest.assert_equals(blocks(38), 930)\\nTest.assert_equals(blocks(70), 2834)\\nTest.assert_equals(blocks(84), 3989)\\nTest.assert_equals(blocks(21), 335)\\nTest.assert_equals(blocks(48), 1415)\\nTest.assert_equals(blocks(88), 4355)\\nTest.assert_equals(blocks(28), 545)\\nTest.assert_equals(blocks(8), 75)\\nTest.assert_equals(blocks(93), 4835)\\nTest.assert_equals(blocks(3), 20)\\nTest.assert_equals(blocks(99), 5444)\\nTest.assert_equals(blocks(69), 2759)\\nTest.assert_equals(blocks(1), 5)\\nTest.assert_equals(blocks(19), 284)\\nTest.assert_equals(blocks(83), 3900)\\nTest.assert_equals(blocks(39), 974)\\nTest.assert_equals(blocks(84), 3989)\\nTest.assert_equals(blocks(11), 120)\\nTest.assert_equals(blocks(2), 12)\\nTest.assert_equals(blocks(2), 12)\\nTest.assert_equals(blocks(62), 2262)\\nTest.assert_equals(blocks(93), 4835)\\nTest.assert_equals(blocks(59), 2064)\\nTest.assert_equals(blocks(81), 3725)\\nTest.assert_equals(blocks(50), 1524)\\nTest.assert_equals(blocks(11), 120)\\nTest.assert_equals(blocks(77), 3387)\\nTest.assert_equals(blocks(31), 650)\\nTest.assert_equals(blocks(37), 887)\\nTest.assert_equals(blocks(45), 1259)\\nTest.assert_equals(blocks(31), 650)\\nTest.assert_equals(blocks(15), 194)\\nTest.assert_equals(blocks(5), 39)\\nTest.assert_equals(blocks(33), 725)\\nTest.assert_equals(blocks(18), 260)\\nTest.assert_equals(blocks(92), 4737)\\nTest.assert_equals(blocks(94), 4934)\\nTest.assert_equals(blocks(11), 120)\\nTest.assert_equals(blocks(26), 480)\\nTest.assert_equals(blocks(28), 545)\\nTest.assert_equals(blocks(36), 845)\\nTest.assert_equals(blocks(72), 2987)\\nTest.assert_equals(blocks(20), 309)\\nTest.assert_equals(blocks(82), 3812)\\nTest.assert_equals(blocks(47), 1362)\\nTest.assert_equals(blocks(79), 3554)\\nTest.assert_equals(blocks(1), 5)\\nTest.assert_equals(blocks(20), 309)\\nTest.assert_equals(blocks(83), 3900)\\nTest.assert_equals(blocks(59), 2064)\\nTest.assert_equals(blocks(2), 12)\\nTest.assert_equals(blocks(43), 1160)\\nTest.assert_equals(blocks(23), 390)\\nTest.assert_equals(blocks(78), 3470)\\nTest.assert_equals(blocks(0), 0)\\nTest.assert_equals(blocks(92), 4737)\\nTest.assert_equals(blocks(83), 3900)\\nTest.assert_equals(blocks(96), 5135)\\nTest.assert_equals(blocks(95), 5034)\\nTest.assert_equals(blocks(6), 50)\",\"language\":\"python3\",\"summary\":\"A block sequence in three dimensions. We can write a formula for this one:\\n\\nSequence Step 1 - 5\\n\\nCreate a function that takes a number (step) as an argument and returns the amount of blocks in that step.\\n\\nExamples\\nblocks(1) ➞ 5\\n\\nblocks(5) ➞ 39\\n\\nblocks(2) ➞ 12\\n\\nNotes\\nStep 0 obviously has to return 0.\\nThe input is always a positive integer.\\nCheck the Resources t\",\"tags\":[\"math\",\"numbers\",\"algorithms\"],\"timestamp\":{\"$date\":1560530908824},\"title\":\"3D Visual Block Sequence\",\"stats\":{\"completed\":{\"total\":421,\"ratings\":[2,2,2,2,2,2,2,2,2,2,2,3,3,2,1,1,1,3,2,3,0,3,0,3,2,3,1,3,3,3,2,3,3,2,0,0,2,2,2,1,1,3,2,3,3,2,1,2,2,3,3,2,2,1,3,0,1,2,3,2,3,2,2,2,3,3,2,1,1,3,1,3,1,2,1,3,3,1,1,3,1,1,2,3,2,3,4,3,0,0,1,0,2,0,3,2,1,1,2,2,0,2,2,1,3,2,2,1,3,2,2,1,2,2,3,1,2,2,0,3,4,2,2,2,2,3,1,3,4,2,1,3,2,2,2,1,3,2,3,1,2,2,2,3,3,2,1,3,1,3,5,2,1,2,2,1,2,0,4,2,3,3,3,3,0,1,2,3,2,1,2,3,3,3,2,2,0,2,2,2,1,3,2,3,3,1,1,2,3,3,1,3,2,1,1,3,2,0,1,2,2,1,2,0,1,3,3,3,1,0,3,3,3,2,3,3,1,0,2,3,3,1,3,3,3,2,1,0,2,3,1,3,1,0,3,2,3,0,2,2,3,2,2,3,2,2,1,2,0,0,1,2,2,3,0,3,2,3,2,3,2,1,3,3,3,2,1,2,0,3,1,3,3,3,1,2,3,2,2,1,2,2,1,3,3,3,1,2,3,2,3,3,3,0,0,0,3,3,2,2,1,3,0,3,3,3,3,3,0,2,2,3,2,3,2,3,1,3,0,2,2,3,1,3,3,3,1,0,2,0,1,2,3,3,2,0,1,3,3,3,2],\"rators\":[\"BkPgkDQGHm66X4Qai\",\"yZvzB3qFb8pkHy4dg\",\"tAF9Gf6PiGogbZuWs\",\"gb9rvGus2Jv7bjZSs\",\"8JyqsSbN2FJXPr3cw\",\"5dvDGoRaJwmYTmRRB\",\"AF6LgdKhEdzwgRJom\",\"PFjMZGHNAPTkgd7tq\",\"c89SxuYYjfeRh4toG\",\"a7kkmP5ukXPp5pk7g\",\"xJdmLNL3Qoz24byZw\",\"S79PKG5nBfs6DLPjW\",\"Mb5sjE2qnvjL2xcBG\",\"SkmxBGyasZvkextud\",\"fECM6svdzcyXuqtz3\",\"ahWFxnaxt9bXSA4f3\",\"7g3vZaQXhLpxrajyg\",\"yZzvg933wFk6uCLyc\",\"P59rek6gvwTzHvRYa\",\"YufFmM7qJdKTL7vdy\",\"tHEH9MBHBAGvhgJGd\",\"inEQthEoPuP337WTY\",\"S3Y7xM7SR3RjJPFnM\",\"vtBrNNcQn8TFSs275\",\"C9LKGu2g5hSijvDzA\",\"6u7yc9m6HuHGbHzph\",\"td7qPZ7Lv4pEWT2Ya\",\"jYJ26SiLKBu5GRumq\",\"yrCNkFYQBEDE76eFS\",\"BFNm9gacwba9KyLFW\",\"tFJbHuodF8d4sMczz\",\"gMJhLdyw3tH7L96X2\",\"aCNWav8S8Try9RkC6\",\"tKCgSWX7X4CWHMWGw\",\"AYaEkTWLMmfzpwejr\",\"JEAi9mG3vvBomJ3Yu\",\"Ww75pCpAW47jbSd5H\",\"cR3ibTMxLyEdDFCHY\",\"nfXGHENb5md7m355s\",\"N2wnZXkhDH86mgjQ8\",\"Nj6FwgBtAXsaQwsM2\",\"pBBTKo9vprWMe83gr\",\"HQxp7NcdvF92G7bYS\",\"Jg8ZSRXe3NoDMCqGu\",\"jYypgEfhDWb9syYP7\",\"8aPJNKDxXq7884eJb\",\"otXtuQygbcYATMZoP\",\"w3e8tA7cxpYDfSmWM\",\"2NJuDfSqdrF8kHHni\",\"fP7mHD7yL42xBFNgw\",\"6gsMupsCZJQgiwzJi\",\"dLMwA7bAx3ArJoqC5\",\"oqGkxvASXq52iTDvp\",\"sfHsh5gna2QYuwsRP\",\"3bkCjbHpN3Lgp29y3\",\"yr822PZmmiDDenxpB\",\"HqmxnQJM66Y57twhn\",\"qbQHjPP8vEBSdConn\",\"2fxapKr8XGdNeaKi2\",\"WX6R5brerMTrHs5ZM\",\"u5u2YpHXiNgzDNJdX\",\"AbrJ8hMyv5fFXG6DN\",\"5Bikpk3S6zGEvGDaC\",\"K96FwtfDDN5WM4Bb7\",\"hAzy9apJgLWwRFGPJ\",\"PqEKjCDkJtYoYuZfj\",\"8PwfYqoDQFThzNtvf\",\"yKttxy9JGn5Jzwuj6\",\"DLai9DxpZN6p5TPRX\",\"ydEdzuCCZt4yny9Rq\",\"6ShafRStcvew4GfCh\",\"Jqk2uJZZxEv5wZFze\",\"TePz42wc3ZZ5CKA6L\",\"aL3Erokin4XmpfCpS\",\"RnbpYh3GKbdBewLc7\",\"6BR44wMt3v3ixA5yf\",\"ftRou9zcw69GCx4iv\",\"J5T8gZqiZXFuFDTQ7\",\"JTk9wB6o6aQDqfkS6\",\"fxLjWpWbBeaYcvdgB\",\"ab7BsQuhDo3QgE6bh\",\"orFLgPDw9H5MDzmwo\",\"iMHrN3Wiefh9Ame38\",\"F2aeZ4zqupp7a8SkW\",\"vgTvCCxgvbCTDvaRT\",\"fRcXJqz2KiRFTw7M2\",\"CEd9tLdXeDeNHSzys\",\"C4QntmkYtB89GNtpd\",\"3ECpdeExhBmkYXtba\",\"Tp6fQWBJhEqQ6Lj5N\",\"BByKDngfPvW6w4m7d\",\"uzy2C5XDWz527Wkgr\",\"Wv5c7WsK6R8yb4mTt\",\"AasGs8AeX9Lcb9xJn\",\"aRqQ42J5zqCmBNd8w\",\"BCfWzbu8SowAQZtZs\",\"3MBBwJESEMjjtzDzM\",\"5NBL6NpTqXmxaK44Q\",\"DMH5qWYAScj9hNaRv\",\"KXnxMWSphrE8hsvyG\",\"BeFnbPbMnAM2SjBdZ\",\"bHGez52okhbhTrtSH\",\"Q2q7wd5e5cfCrwPxq\",\"Fk9CmS5C54vo434JL\",\"LBjfHKGMTsfZkG78j\",\"gP5jeJZWkRoasDRa9\",\"2EpTEdXyMYe9SKQTf\",\"KrESx9wBdxJ4RTwPH\",\"PXAcsKkssS2yLyDv2\",\"fBqQjriC4QEtFNxFe\",\"4CFzv558qbGcpQwc4\",\"WHg6mfQWCm6st5fiP\",\"WLFPvm65aHfgwQy7N\",\"boMXxa5zxP6yJHTje\",\"GzJL3ukD6sXnyndn7\",\"nuc8rnPKXMC3cJRqm\",\"pQKacoMccp6HYmWZ8\",\"Ka2b4958mqei3s4BN\",\"5nY48krepaT4a4QTN\",\"S6Zd8mPuvhuh3MFRt\",\"aEm3Wvj2rFYRL8Lrb\",\"v3fjGuc7Pq4yjFygS\",\"3xMGAo7DPjfFyb3iw\",\"LQhEi8yAC8WzEYY8h\",\"vWgBJaEtcu3XoYuer\",\"cKLLsRimYrfKwPhw7\",\"fXfjsrGcdwpy7hedt\",\"A3ZSf4ByzPCHhEnkx\",\"9pzFiFK3ANLjQfnr2\",\"D4WwcMWZNgL6pwGRs\",\"eTzPRRrpiFbbGjX4H\",\"Dedjx9nWmegK4nfKR\",\"4RY3zj9C2t8GGefhi\",\"dZgBiAvsYkv8wFWdZ\",\"Zhy5X7BZnqk8hacEw\",\"3CddxEkvCvRoCLQ7b\",\"n2BRY9X8899dcG8Bw\",\"wPxeazAYct9gG2eRM\",\"3Zceb8GudqAG3onG3\",\"JQ5uoxA4WZgN6HyJk\",\"tY4cq7gkSCi7zJap4\",\"HcriFrFbmYgsMwtBg\",\"Yp7uvStL97cC9fKkY\",\"ZNnsMeNkdDhHjSrZb\",\"YRstQuthRkFeBiXug\",\"gJYuGdkXEWWmGRLzu\",\"mDWNyaaQ9hvPCRzSd\",\"XsYhWtDMoky3nAhjd\",\"vLrq4dEDMM2wd68Dc\",\"iHMehMwgYQGhGAF72\",\"or2aC2jcBrABzb2DQ\",\"awxTyavq6BNM86LTD\",\"r5GGrGb3G47LHmPWF\",\"TCoQs9Erxoue9BvSj\",\"azQuTr5LY59adhfkx\",\"N962oRnYTtRzEd22M\",\"vBJhjd3CjiJJFACBb\",\"nzqwymsdwC7gxAmip\",\"DxxNN37iEz7b8t2nf\",\"ekQh3jzgGLsEMbKo3\",\"KRmxvA4mWgfKvHmYN\",\"qS5Xbh5sBC28e6j7E\",\"sz8ufn9i8zeiGWpAy\",\"mq2W9FwPgf4w75dZi\",\"c3nsyfKKeQGxp6sKb\",\"ZL95w9m9ZpJEgHN34\",\"DrkR35NqnP9NDLbq6\",\"RnTBbuFCrJWW6Ayvj\",\"ZRxAkXjTCdyQTdSDw\",\"DDkaPC5SHeoRgg8RC\",\"xXxcBvT3poSuSCgBN\",\"HF28xZKSLM9wEuqNg\",\"DwetpbChQM4r6Gwah\",\"dbB3HPu256eBrC3EX\",\"So6PHm74mfJuY2WTs\",\"GM2X83qnuLXTHe5zA\",\"muQCKmimwtNAdS8rp\",\"keF63bkDeP6nWsdA3\",\"RErqK2yM94wYyD2hk\",\"4yNLEwL2rsx4EE5Nt\",\"KB8GdTPpWbXBDmm6L\",\"4LGKpgWrEJRsTXDkq\",\"WWD6uwvCr54JJGu5S\",\"ENsSYogEHHeDSrFod\",\"bJxaKHJqR82EWw8Su\",\"53uJADeqd5ys7ZAdM\",\"DEDniTrstQYGounXT\",\"DpqiRAm2yo3W2x4HX\",\"4rwxLqLs2mNZNg8NB\",\"8sNv5PTHa7XQ8bNqR\",\"wS2o3x4nrsadtC3xP\",\"2rc86eoe88DLhFeJD\",\"cxbQnktoNTzR9jcGe\",\"n8WJM5kdmPZbGoX7e\",\"tsECkG48snwNTPD3m\",\"XghikBbq7obhPSKjX\",\"X4Mcx3NcjzqxMh3mS\",\"kQH5b8MXJunh84Czq\",\"RQvQLnbRxGx6yrdHi\",\"E8TMSMSamEbBtf9Lo\",\"8TAYWzqJAkXq2MAba\",\"f2BoqyCpgnmjEjLqx\",\"efcsSdKgupNnf9DKD\",\"xyk7XeuqKQYZqd7Rk\",\"Tb2m9eGdTuSG8RbyD\",\"hnyhBFWwNCz9mDfSi\",\"dXMbkgQFoN37BhruB\",\"yJmwiykSNfLv9NqJ2\",\"MtSGMTysiWHmv4CRE\",\"HpCdcD8g3iwJTHyCg\",\"4EhZRZYbAk9XYxsPY\",\"5ZdwWkDPKkFNBnpYW\",\"p9riYAbHXwJZ9PhWf\",\"BHp9mbAEZREsE7k8E\",\"hXoTNPPmJLzkZnkSX\",\"ttjgpjjdifjjpPXfS\",\"YsAz93yZw8KKPupKv\",\"ByzrpqvwrBQLH53Fa\",\"Qk3NQWimuDTFyQLb7\",\"HRdtZBvxDh8YzkvQk\",\"PtaiHYXnMwb2rWqQW\",\"Ecg4m7srYGgZsb4Ck\",\"6gS4E2C84vBYTYeDZ\",\"BrTDhPJcACL2bsrpJ\",\"pWD2YC5s4YRCxFc2i\",\"iojEnnY9FsMfYzp6f\",\"zZDaXBxMzTCBhNkgL\",\"CwXsu25ygLEwQbmQC\",\"vSPc7MGK5Poy8tSFp\",\"uMLsCftXNbvx6pcGA\",\"jBR47vA7HwAZqp4QA\",\"ncuiM28T7Tg6wpH2d\",\"GGprTwrkjuccmrQRg\",\"gnX7n6FTmX9fzTyxy\",\"iMRd4TjAJ7FP2ybgf\",\"ZrKCkX7xxGGZzauFW\",\"8BFSTCnoe2QggN64c\",\"syRNbbPdLCGXbH2Gy\",\"9cWTAMQmN7PZMqdec\",\"yjtdwc2AC4jA2RWtn\",\"axdSNLZpiCDF8RS6n\",\"KZ2xddpM2f9JRaryB\",\"P7NmFbCJ5offXMRvB\",\"6SKDJwXpev4qPSzgM\",\"ji5f27FPz4wRRF6Ls\",\"7sSSWHLA7vyo7FAwn\",\"dkcmCKwqApX5jBggc\",\"qfSxhwmfJN6Y6wNJq\",\"xwEZk3bNZoNDPJYF5\",\"Ja9GA5pCEfhb2jP3N\",\"Nb6LYPoQP6KJZt8mz\",\"zZ43WzxvFu7kaTKZ6\",\"vpLFyr4p56fPjqDCu\",\"DNACg4rcgZsPtYGZ8\",\"d8yWphdEQv2FeZ7FQ\",\"k7A3iQEewkKLuHLBG\",\"x2AThkdrQ5do9eE9M\",\"ZNgDGdtv5WFkcEn6K\",\"rvGT3pJECfbjX9z9n\",\"u7i7WPM63n42r8R8o\",\"pmgFEciNrd3ES9tuu\",\"CRGb53t7cpX45XgFo\",\"p9LrbZNFe3SxCHKji\",\"rvj8KP5oXbit6cHNu\",\"Kz7ee56Ht4Ns8JjBj\",\"SgZ2t9xFuRqdJGofp\",\"bNZN65S3GkReo8qNT\",\"Kt4TQ92a6bL869KFv\",\"MfKe55snfKsdnDejs\",\"Kh3Pc2ZRusurLaMyP\",\"27jqdQJjg6GGa5iQb\",\"MtJ33oGd6Skry3dj4\",\"fGN2frPqk4Wb3ia9L\",\"RehJGBFS6CYiWdjZx\",\"4fhjJBvLBWh6QeSih\",\"mG8HqKiAQFTdRZthG\",\"xn7uGNKeAwPEkP9oA\",\"KBxTPknCRmB2b5y3i\",\"J23RcmzbdtBbPCTjT\",\"b5zo7s6xrqWgQnPao\",\"cfjnqyiLFDmytnE6N\",\"hkiz2Nv927cYGrA86\",\"tpxMgkGSHwBjS95Ta\",\"pevMzsjtd98diLwZM\",\"XjajdyybZZbkz8o5x\",\"NnBvtz5b9mwygAHY2\",\"oBcs8GLX2ZFLXQy8y\",\"FjnR4HgbWd9EY42Fv\",\"bC49w5JpRaqtjd3Rt\",\"qD2LrwaDrSdiybLKY\",\"NNE5HNRXAkmhrWgyQ\",\"iS5BrkGLzJyPK7nKt\",\"QRv96jmNaYsWkxQEG\",\"6F3Y6ZBAGNDGGTt9B\",\"L3BJygJoLeHsTZqfo\",\"TFqRD3zervh8PT8op\",\"DPi9QGLctq2y76KuE\",\"kXEfD7xxEyWd7oxxL\",\"uZJqBoqeZRX3RncAR\",\"gXTAie79kiw28tx5u\",\"fznzd3qnvtbFkkizz\",\"sKfrD9gjCDHuqLzSk\",\"CQhaiZqQcP87YteSG\",\"J3upzLHuEwXH7Z2hx\",\"dYPkStFnLvAMsHSzZ\",\"tALTqdmByyTaXH2Bw\",\"7scpcTEp3SEx5Wjg9\",\"FaHX6krfMCkHf3XJi\",\"LqTWjkqo9irQzGSL2\",\"9onLFjwWr6DqyRBJw\",\"EfxwqhYdapX3dMQC2\",\"2QziknsznNeMPRh3g\",\"ZyrfhDTZHb8LymH5b\",\"5Y3jeWnhLKBvuCdm7\",\"R4SjTgDnpigJYDLyL\",\"2nD3hNDExw2LNYq4F\",\"9RaccqxB9dRZuS7z4\",\"Mw3dpDSr8pEsM2nXE\",\"cAP3n5NY64uoMwzRR\",\"R29kgJ9M7R4qqwjcE\",\"9Hp6Z83SwWxMQRouq\",\"gHx3GRSyA5HZ8pbnu\",\"kEkNyqFARK9YBrhRx\",\"RDdXanzLqFzuDF2uZ\",\"tkXdQXRPd3hjBgP8T\",\"Nzi4RD5fxAJ4wjnNa\",\"sHDcTJTsrxM3QnJij\",\"gywE8Lb2RgQEWpvTX\",\"SncicQuFBCThjQcKb\",\"aaJWssCWfMa63XJng\",\"35nqHqncj2j4KB36r\",\"zd9FLSzsGz3evKafy\",\"ZhusfKHYdLHnNGPh3\",\"ir8ydgbhpdNp8BCZB\",\"DyjCBBvcoMytDxAr5\",\"qYDRywWRZdswy4b6e\",\"tjDh259vrCGNQKS8c\",\"FEYpu9RWysAgW3XnP\",\"9ivvGvJGvtQfigQaZ\",\"GGdmhAvxXhqhhibJN\",\"3LiSLdtN58n46NEqg\",\"RTDx9axf52kxhFjwZ\",\"bvmTE46bfcM4ogj34\",\"rfyEkETeoS96QNH4e\",\"yyo6YLQN2of6fxp49\",\"GTKsdeEihE636Le9i\",\"Wpn95NqWxncQrwNgz\",\"2PufnQcsHsfymufX3\",\"YcCLwitFMAEJSnxAW\",\"4EKZKKLKZZMj76WEm\",\"AFfw7cGg83uYk2Miy\",\"buX4mCQhtXCfBjeno\",\"AQSqD9oNv2uPfxZCR\",\"3KkyQm77zsew58Dc2\",\"PWgzeK859suojbrRx\",\"Ds7L5bksw2QRHjrKL\",\"CHvzhtXnv8HTbPQ56\",\"ctbThYbufFCYbRK4f\",\"LQxof8pGabGuWP7Gn\",\"jWbd7SYDzLPjc9EDh\",\"qzXAMXsHZGT8o5hTA\",\"xP4prSSXstdWj7Cgv\",\"XCnbSuZF8gdA7Lc8o\",\"RoGGD5cpHb4ftdLDv\",\"jCjCvyhqhpebkJn34\",\"gKnWjDjwrJh7MK2df\",\"HM8fgdqNeTAkKkiix\",\"T6iBEE2jp7f7iEF2P\",\"5HCu9Ydd86QgHDRNP\",\"srJ34BaybkQh3qRkM\",\"kjvgTyRFyKHv44DcH\",\"yod5YhKtPqw2GfG9B\",\"KsnRdKWMzH7np9AP8\",\"CtLaGA3WAjwAPqPgf\",\"rhS8qXRjZcpDXkwnE\",\"Qyfyyw6oC4EHAndzo\",\"gpGXTvjS2HrY9Skq5\",\"FhYM27g2HwWBnNyJu\",\"3nied3n8KG8RSNixH\"],\"quality\":[5,4,1,4,4,5,5,5,5,1,5,4,4,5,5,2,4,4,1,5,5,5,5,3,5,5,5,5,5,3,5,5,5,1,3,5,4,5,5,5,5,5,5,4,5,5,5]},\"tests\":{\"score\":0,\"rators\":[\"BkPgkDQGHm66X4Qai\"]},\"instructions\":{\"score\":0,\"rators\":[\"BkPgkDQGHm66X4Qai\"]},\"flags\":1},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.276595744680851,\"family\":[{\"_id\":\"icEtzNmcTB4Kvwvwt\",\"language\":\"cpp\"},{\"_id\":\"JnGKayBeHJFDQ2oiu\",\"language\":\"java\"},{\"_id\":\"MevNu8jwsPC8ghS7B\",\"language\":\"javascript\"},{\"_id\":\"NtsqbRPqtPYhR8tJe\",\"language\":\"python3\"},{\"_id\":\"BbC4ZTq6RYpqF9bum\",\"language\":\"ruby\"}]}}"]