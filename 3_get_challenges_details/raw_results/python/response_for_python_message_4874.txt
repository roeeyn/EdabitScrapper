a["{\"msg\":\"result\",\"id\":\"1153\",\"result\":{\"_id\":\"cEzT2e8tLpwYnrstP\",\"author\":\"Albrecht\",\"authorId\":\"EKrSBrTXuhE3f4xsR\",\"code\":\"def swap_d(k, v, swapped):\\n\\t\",\"difficulty\":1.6069182389937107,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"LYLsXc5HiGov9Jtwy\",\"instructions\":\"Create a function that takes:\\n\\n1. A list of keys.\\n2. A list of values (same size).\\n3. `True`, if key and value should be swapped, else `False`.\\n\\nThe function returns the constructed dict. Empty lists return an empty dict.\\n\\n### Examples\\n```\\nswap_d([1, 2, 3], [\\\"one\\\", \\\"two\\\", \\\"three\\\"], False)\\n➞ { 1: \\\"one\\\", 2: \\\"two\\\", 3: \\\"three\\\" }\\n\\nswap_d([1, 2, 3], [\\\"one\\\", \\\"two\\\", \\\"three\\\"], True)\\n➞ { \\\"one\\\": 1, \\\"two\\\": 2, \\\"three\\\": 3 }\\n\\nswap_d([\\\"Paris\\\", 3, 4.5], [\\\"France\\\", \\\"is odd\\\", \\\"is half of 9\\\"], True)\\n➞ { \\\"France\\\": \\\"Paris\\\", \\\"is odd\\\": 3, \\\"is half of 9\\\": 4.5 }\\n```\\n\\n### Notes\\n- To make it simple, use only hashable (= immutable) keys.\\n- To make it simple, use only unique keys.\",\"isHidden\":false,\"lab\":\"Test.assert_equals(swap_d([\\\"Paris\\\", 3, 4.5], [\\\"France\\\", \\\"is odd\\\", \\\"is half of 9\\\"], True), {\\\"France\\\": \\\"Paris\\\", \\\"is odd\\\": 3, \\\"is half of 9\\\": 4.5})\\nTest.assert_equals(swap_d([\\\"Paris\\\", \\\"Berlin\\\", \\\"Washington\\\"], [\\\"France\\\", \\\"Germany\\\", \\\"USA\\\"], True), {\\\"France\\\": \\\"Paris\\\", \\\"Germany\\\": \\\"Berlin\\\", \\\"USA\\\": \\\"Washington\\\"})\\nTest.assert_equals(swap_d([(1, 2), (3, 4), (5, 6)], [\\\"one_two\\\", \\\"three_four\\\", \\\"five_six\\\"], True), {\\\"one_two\\\": (1, 2), \\\"three_four\\\": (3, 4), \\\"five_six\\\": (5, 6)})\\nTest.assert_equals(swap_d([(1, 2), (3, 4), (5, 6)], [\\\"one_two\\\", \\\"three_four\\\", \\\"five_six\\\"], False), {(1, 2): \\\"one_two\\\", (3, 4): \\\"three_four\\\", (5, 6): \\\"five_six\\\"})\\nTest.assert_equals(swap_d([], [], False), {})\\nTest.assert_equals(swap_d([1, 2, 3], [\\\"one\\\", \\\"two\\\", \\\"three\\\"], False), {1: \\\"one\\\", 2: \\\"two\\\", 3: \\\"three\\\"})\\nTest.assert_equals(swap_d([1, 2, 3], [\\\"one\\\", \\\"two\\\", \\\"three\\\"], True), {\\\"one\\\": 1, \\\"two\\\": 2, \\\"three\\\": 3})\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,2,3,1,3,1,1,2,1,1,3,1,2,2,3,2,2,3,3,2,1,0,2,2,3,2,3,0,0,3,0,2,2,2,3,2,4,3,2,1,2,1,2,1,3,2,2,2,3,3,2,1,1,3,2,2,3,3,1,1,1,2,1,2,0,2,3,0,2,2,2,1,3,1,0,2,3,1,2,3,3,3,1,2,2,2,1,1,0,3,0,3,3,2,3,2,0,3,3,3,2,1,1,2,2,1,0,1,2,2,2,2,2,3,0,1,2,1,2,3,1,1,3,2,3,1,1,3,1,2,2,2,3,2,3,0,3,2,2,1,4,2,3,1,0,0,0,2,3,1,2,1,0,2,2,0,1,2,3,1,1,1,2,3,1,2,0,3,1,5,3,0,1,3,1,1,1,3,1,2,1,0,2,1,1,2,1,2,2,1,1,2,1,2,1,0,1,2,2,1,2,1,3,2,2,0,2,2,1,2,1,2,1,1,2,0,1,2,0,1,1,2,2,1,2,2,2,2,0,2,2,2,2,1,0,2,2,0,1,1,2,2,0,1,3,2,2,3,1,1,2,1,2,2,2,0,2,2,0,0,2,2,1,0,1,0,1,0,2,1,0,1,2,5,1,0,0,0,1,2,2,2,1,2,0,0,1,0,2,2,1,0,2,0,2,2,1,1,0,2,2,1,2,2,1,0,2,2,1,1,1,2,1],\"rators\":[\"EKrSBrTXuhE3f4xsR\",\"tAF9Gf6PiGogbZuWs\",\"pKiCcueQbeF5zMZxb\",\"8JyqsSbN2FJXPr3cw\",\"8PwfYqoDQFThzNtvf\",\"gb9rvGus2Jv7bjZSs\",\"2fxapKr8XGdNeaKi2\",\"tK9oBgXjqPsPrGowj\",\"Jqk2uJZZxEv5wZFze\",\"aMwRTma2uA2A6a8Be\",\"pCBsMEmLjnR8GseRE\",\"tFJbHuodF8d4sMczz\",\"6ShafRStcvew4GfCh\",\"oxKiZDfXJHuSER3uZ\",\"MNgYsvK6HfLRb8wAz\",\"Q33WbXR2bawzMYqWF\",\"23oi2a3vQwhtLEbSj\",\"PCmGAPBonGNMw2j8b\",\"gMJhLdyw3tH7L96X2\",\"FgkYtHLxeD8pETJ8T\",\"vgTvCCxgvbCTDvaRT\",\"s5M5RvgqR9BhB9JoC\",\"uBFdmTQP5SCw9GZTQ\",\"rEWQdNHK6YjuBqmrR\",\"CwBBXa8awfz8ePtwe\",\"9Ct9EYenTi6JXEaWW\",\"JJtMjK6QaWrcK5mpS\",\"nF4YGHuRBa6NsWQFQ\",\"XbwyB44kHPnRgQcrB\",\"Kkie93rtG35Gfxatf\",\"FZrPeYAgHotCGGkgd\",\"RArcvHEvrTkCPn9MX\",\"DryNRN98Dj24BpgrL\",\"SPbZFbfgmG6TPsgpt\",\"JiRDQMZNwtTrweM3u\",\"E6ioR42dJD2kCBAEd\",\"EEjNW5t4XPGFLfq3k\",\"YTwwSYtqudH2JnrBX\",\"kxYTcCkZJ5buinLTr\",\"yoYQqaY6GszuTkNSs\",\"s4zPi3rSJrG5ruYv7\",\"pMuvoqcmxHbuRSfb9\",\"u5u2YpHXiNgzDNJdX\",\"PqEKjCDkJtYoYuZfj\",\"hAzy9apJgLWwRFGPJ\",\"cPbBwmgPeFYnpqSNK\",\"7hzSvcYdq6QjoRnJY\",\"X5rQz4tpncjYZ6uZr\",\"cG7psgkbckNQNn6vX\",\"yMRfMu5y47ejeqyAj\",\"WZDjLcmA77sDjKGhf\",\"K96FwtfDDN5WM4Bb7\",\"NfMJuiBk6FN5Jc6ow\",\"MQ9hiK6ok8oo59tZP\",\"qvDYc2vx5RqaYw3qp\",\"t8GRbY5ME64BcgWQk\",\"xxxhm6QEkRpah4k94\",\"6RPK2Z8fKDfG7BGmp\",\"kBmhcwkCqxiy4GwiZ\",\"ydEdzuCCZt4yny9Rq\",\"izA2d4KFioKWAPmHq\",\"kP2C2Ye5H6WoTodFN\",\"PT5pu7kJsgp9TDNGv\",\"PNPP9M6edqzRYpze8\",\"CBsyasdFzcLjefxtd\",\"9foGWnfY7Wn49NENq\",\"8hPpfWYF95K8FPDGN\",\"ZauXkDfNKEc6E3869\",\"gENScMHfbjwbBxBhr\",\"M44nifmWzt3wtYyJx\",\"gygNaejShmMhEPbDj\",\"HhnEZJXhdiaQeSDMd\",\"xowjbn5yEv7c93axA\",\"DvzpcjeQsLCSZc9r9\",\"zg8GmMSP2LkHBtAzy\",\"5PMNRxiLifJLBM9dT\",\"g8yJiPAWXbrgxbjfZ\",\"Lw8oRc5SERsuntXMo\",\"zgoEhAyhrjnsSLPGw\",\"HTtHAh9matng4Awvd\",\"C6H8Qi7cchRSSsTKq\",\"m2iiZZHTpzHcEKJMn\",\"4zvByd8MNcc3PpRFN\",\"6NwdjBQPBtLAjWiMt\",\"AnjjyuE9aWLzK3nkg\",\"omQhBXTwsBMv6kgz4\",\"3ECpdeExhBmkYXtba\",\"uhjd5uctmxCRQeGsj\",\"72faYgdNHThiGLnKv\",\"A7LMgQgypdRbw3njG\",\"ab7BsQuhDo3QgE6bh\",\"qJZsi5rhRnWA38FbA\",\"3X74e9FhHLez7jkkM\",\"HQxp7NcdvF92G7bYS\",\"cXp7BXyiNJzBWdvYY\",\"6daecm7mtqzp7mKso\",\"oJ65PxrqtweTnJJA6\",\"E5Z5GMeLd8twGS3Bw\",\"aCNWav8S8Try9RkC6\",\"bzePGtk6fgFuKeHhf\",\"pkQBaSzukotPEXmrD\",\"nmXg7Hfeh3jMLHSsa\",\"t3wwRMtYdLYBwWR4J\",\"ALcgrkPgXfJMvE5CX\",\"2innwjWqxJHo4eRGh\",\"4ZQF5a7MjnAksc3pY\",\"cZGJGxM65Nq6oCevW\",\"jaP8tfdxt4XbSGgo6\",\"CEd9tLdXeDeNHSzys\",\"BByKDngfPvW6w4m7d\",\"zC8WrPp5BC6c2exrW\",\"MgwZXHsHk6rKhFxoT\",\"ZD3sFkhuCNoEHEekx\",\"xyHfEdcYBDznunq6n\",\"moLE5egD5giCCF8AW\",\"3SKmXhcLPPkmQhjip\",\"5J4tAkdA45c76xAfk\",\"k9hbGHDGewYGSHq7E\",\"wvaRmNEgMPcpQpr9G\",\"3XWw4ui5Tipb2Qz8o\",\"8DbqjktpvqcXo6vHw\",\"rmR7pS9p8t4BPdCxz\",\"6af6qZowN4xMZscDz\",\"fbr22rabEJMfBp7vD\",\"iMHrN3Wiefh9Ame38\",\"cRpaCxYRmGcN3Nsoj\",\"e4hZiEghhfZx5K2HN\",\"GNZZC7p9bsGoEXFw9\",\"dQvyz6v92233cGwkD\",\"cSMKd6Yq8Pyq8TvWR\",\"qJhL4H3ecaDCmnaG2\",\"TnDJh8PPbFydbSuC6\",\"5Xn5ubB2EKa62BN2g\",\"SP8d2iHaxqgWZrqQj\",\"JTk9wB6o6aQDqfkS6\",\"iu95CzBuHutJbFyHm\",\"6YLHFwMtSN7xN9PmK\",\"KEzut3x57fPKHwnEe\",\"kpiQQzE6CcFHfauGb\",\"5JFQgt6KFihmXfHKm\",\"ke57FpsL5kFbYLPAZ\",\"LTjNwqgAa26kzq4rD\",\"CsiyCod6cnF4hE2gw\",\"mc4ANy3rwBwTrSw5x\",\"fBqQjriC4QEtFNxFe\",\"uriXjrnk84men3pEX\",\"kXEfD7xxEyWd7oxxL\",\"h3NCtvFy59QQwmRyD\",\"qCWgRFtxZ4uDm5QQw\",\"svZJaYSRLJkQjRwDq\",\"GM2X83qnuLXTHe5zA\",\"RCzaAeQZJJgqhjtnt\",\"HiN42tWA2yRW4yw57\",\"e6qXT5HHPhRoeWGG9\",\"u45xYkjAkWvZpznKB\",\"yNa2KfyrokkiqLnW3\",\"LQhEi8yAC8WzEYY8h\",\"S9JdLfPzgo2AhS48a\",\"ht4PcjrG8Eq7Ei8iF\",\"DpGHwzy2E3fnaHeqw\",\"gxHSEPa37E5JKD6Mk\",\"GiK8LZt3JRKNJjj5W\",\"YCv8nxhsuHFZS3nnm\",\"gajmJMyZpWNj5ZKzt\",\"sJWTa7iWeRoRtqJ8N\",\"rvZyhqphBAitAZrt4\",\"9wtZdRbg32Z3wnYSd\",\"RKNCFnNrS29WfH2v9\",\"m4dArypEzboQvaa3H\",\"4oj74SdrYfpJgEAmd\",\"DnRcANZnomHQMoZZ9\",\"8QAMphNjomBjcX3j9\",\"fRcXJqz2KiRFTw7M2\",\"m4BvHEAhkbnhGb7KQ\",\"rboiBrhzGPsBJdHma\",\"QjCZjs9vt6TGGLSBk\",\"W6Q99aAdkbkMqYwka\",\"p3dsCFdWGzWGhFrSQ\",\"m8hiDkTnCe9gBBuFx\",\"dBdJsePwcNmyFFotu\",\"CD3kv7GHnYaN9ywna\",\"jwsY5q5ofNxCd5jCw\",\"QnPD4Sv6W4LHc2Qng\",\"C4QntmkYtB89GNtpd\",\"PXAcsKkssS2yLyDv2\",\"Yp7uvStL97cC9fKkY\",\"AasGs8AeX9Lcb9xJn\",\"PrqEB7CaZEJWKejRZ\",\"4CFzv558qbGcpQwc4\",\"BeFnbPbMnAM2SjBdZ\",\"v3fjGuc7Pq4yjFygS\",\"yZvzB3qFb8pkHy4dg\",\"dLmepN3JWxhXMtyNK\",\"w3A7cBWyAfukk6xEQ\",\"Ro3ppqamSxiJv2wxP\",\"cR3ibTMxLyEdDFCHY\",\"hKrY8hWMgToBavfhD\",\"vLrq4dEDMM2wd68Dc\",\"jNvegJWCk5HCtEMbK\",\"ZNnsMeNkdDhHjSrZb\",\"5kEyLPjTLrt7z2YJZ\",\"aEm3Wvj2rFYRL8Lrb\",\"6RjvoM4ZdPyYQWaRX\",\"JQkZXeaLy3giT5p6W\",\"Nua6T3dBurBy3Qfg9\",\"hHixYDgo9R46JYoTx\",\"hnyhBFWwNCz9mDfSi\",\"TR5aWdDKP6iaL6mGK\",\"gJYuGdkXEWWmGRLzu\",\"9pzFiFK3ANLjQfnr2\",\"LETz32FhaNiuSkje2\",\"DEDniTrstQYGounXT\",\"HF28xZKSLM9wEuqNg\",\"KdNDysEsy2TW5QRJ2\",\"NSuLo6x728Kf2Y2E3\",\"LZQxLPgLGcGgLGmZc\",\"a6YauP2vcqJHhvHFq\",\"dHZqT6h4JMwk5fPC8\",\"ahk2qiXKJA753wAJk\",\"yv7c4H2jimSKHEjtG\",\"s9GzySPz9vpMNQ2vj\",\"zT9LpkiwYjLviYYW6\",\"5JyY5eDxizCH7TYT7\",\"5TRrZsd5z8bHTESox\",\"ikkjHDqBHu6fT3vGL\",\"7txFzDQ43vJ7qCY88\",\"Z6eqrAatHZjffx4s3\",\"sbJcFfQjQ59Wfg4Cd\",\"Ecg4m7srYGgZsb4Ck\",\"NG8PWBSjsM8mMhQEq\",\"iojEnnY9FsMfYzp6f\",\"JZbBYihgT6m7bKvgc\",\"q4vhNKvdnjB6XTmxE\",\"q6QsMYNMpPNtmyTeW\",\"dzS6WBTMHyFEag6Fp\",\"ZrKCkX7xxGGZzauFW\",\"5cvXbqKvSuFH2K5bd\",\"yjtdwc2AC4jA2RWtn\",\"iBTooWAGe7dD9svva\",\"Pe8vWpDHRuH9nSGKW\",\"EM54GFtAyAEdmqxNe\",\"Wv2vJnEj8ywNmARoF\",\"M2gFMJkocQSY6bsFR\",\"NNE5HNRXAkmhrWgyQ\",\"w2HhxvSLmDhaGCAjE\",\"YcCLwitFMAEJSnxAW\",\"oBcs8GLX2ZFLXQy8y\",\"mG8HqKiAQFTdRZthG\",\"wniy5aKNkwYTNAkrz\",\"tpxMgkGSHwBjS95Ta\",\"zF65F5d6w7zKiRahJ\",\"QRv96jmNaYsWkxQEG\",\"CTKmXtrqDYqJBnuy8\",\"bBvhn46xMzKbMAZpm\",\"gXTAie79kiw28tx5u\",\"mxX4rH5ELYkdZ2Mbw\",\"9rhsisf8ofHavG5aT\",\"zfGYZ7gpR8fxJpagh\",\"DPi9QGLctq2y76KuE\",\"6ki4yYXmxm5hF2otC\",\"p8qqFdJ3FSk5x9z3G\",\"w3o9qJuPR62HHh9mx\",\"HjZQR6wRLcxN5hKaf\",\"4hzd4qde3g9We8N4E\",\"J3upzLHuEwXH7Z2hx\",\"dYPkStFnLvAMsHSzZ\",\"zZDaXBxMzTCBhNkgL\",\"iS5BrkGLzJyPK7nKt\",\"cZccqzRQ9GgjQF6Az\",\"FEYpu9RWysAgW3XnP\",\"5XiuAqicKD4hBdu63\",\"cAP3n5NY64uoMwzRR\",\"RGMbFMZXJr7DhcAJy\",\"LQxof8pGabGuWP7Gn\",\"zd9FLSzsGz3evKafy\",\"sHYL6DJaGQTxAnMAq\",\"eYfPWvZwnJQkHbSTK\",\"dBzwBtRjZqB98DJeB\",\"9ivvGvJGvtQfigQaZ\",\"M4jH5WWXofTB5SoCT\",\"YmMgWhzhHhQLmGGgH\",\"v2d8o47YdYEuEzzGo\",\"5S9nX4rKsnCcnv4Cz\",\"GGdmhAvxXhqhhibJN\",\"e7QB5tCAeoSeRCTxY\",\"qAby4AWXmTNeusvg3\",\"KJCDwGkoXh8qtbbKr\",\"T2vhHPhRR96hRizq8\",\"PWgzeK859suojbrRx\",\"Ds7L5bksw2QRHjrKL\",\"Wpn95NqWxncQrwNgz\",\"vhhv6HQyH4r9Q6d6n\",\"vA3sBoGvJmYKZHdmE\",\"bvmTE46bfcM4ogj34\",\"J5T8gZqiZXFuFDTQ7\",\"n3shdmsAgymHMGEwP\",\"d8qtzoLB264iP8tdY\",\"FvXpJP2Hw3om67wkw\",\"uTZ3NEpSuwSgGehGH\",\"Mzue5t6AobHz2edJH\",\"66a9xX73nmTEuKs9k\",\"o4ixjQGSaYqA2JoM4\",\"5HCu9Ydd86QgHDRNP\",\"eMuCpJ2spXWkJjWNz\",\"M6fxKEh6am7YajPiT\",\"PC3pLs36zNzpRDSuE\",\"sKBGcRfEr6LrvG8A2\",\"srJ34BaybkQh3qRkM\",\"mvJBakQ35CWAnbbEZ\",\"jkys684AAfPRxrYaD\",\"yr822PZmmiDDenxpB\",\"AJexRBN9cYQmqvYu6\",\"CHvzhtXnv8HTbPQ56\",\"qzXAMXsHZGT8o5hTA\",\"9gJsF5apWJGWZJprn\",\"T6iBEE2jp7f7iEF2P\",\"Afnps7TJQuS9sipMb\",\"2NDSt8HyP33cFRHsu\",\"8BFSTCnoe2QggN64c\",\"sHjfbGQGLHE6JR6qu\",\"reSPwrcdzBAnDWs2E\",\"uw8E83imJYpQiiPpP\",\"yod5YhKtPqw2GfG9B\",\"BrTDhPJcACL2bsrpJ\",\"suArq5BbSy7gD6xri\",\"Kf2wE7p7MTNrRe7YM\",\"gbGzZz5Yq5hT357v8\",\"d9LBRxvADNBB5QJMB\",\"vAh63eGRwkuJtoP8v\",\"92GMH574XuWEq2mzQ\",\"AXdgPwPcYHJrXue4P\",\"2PufnQcsHsfymufX3\",\"Nsnt7WJuREHjzZmjE\",\"Ncn7Qn2LbdsiJnfFk\",\"4TmgHkn5vqyHK3sYC\",\"MKT7khMBGXzA22ykf\",\"3nied3n8KG8RSNixH\",\"4Lwjr34ypKNQNQCar\",\"e8nsYvyyjwb4Xd5T6\",\"mXXPMi2anfJi5whC9\",\"Wi4H6ayKsNDWWQCG5\"],\"total\":367,\"quality\":[5,3,4,5,5,4,3,5,5,5,5,5,5,5,5,5,5,5,5,4,5,4,5,4,4,5,5,5]},\"flags\":0},\"summary\":\"Create a function that takes:\\n\\nA list of keys.\\nA list of values (same size).\\nTrue, if key and value should be swapped, else False.\\n\\nThe function returns the constructed dict. Empty lists return an empty dict.\\n\\nExamples\\nswap_d([1, 2, 3], [\\\"one\\\", \\\"two\\\", \\\"three\\\"], False)\\n➞ { 1: \\\"one\\\", 2: \\\"two\\\", 3: \\\"three\\\" }\\n\\nswap_d([1, 2, 3], [\\\"one\\\", \\\"two\\\", \\\"three\\\"], True)\\n➞ { \\\"o\",\"tags\":[\"data_structures\",\"objects\"],\"timestamp\":{\"$date\":1577948198051},\"title\":\"Generating and Swapping Key-Value-Pairs in Dictionary\",\"quality\":4.642857142857143,\"family\":[{\"_id\":\"cEzT2e8tLpwYnrstP\",\"language\":\"python3\"},{\"_id\":\"izuvRSySbSkcJrzrH\",\"language\":\"ruby\"}]}}"]