a["{\"msg\":\"result\",\"id\":\"659\",\"result\":{\"_id\":\"towwrEJ7zr8xKGSr5\",\"author\":\"Mubashir Hassan \",\"authorId\":\"T6iBEE2jp7f7iEF2P\",\"code\":\"def robot_path(commands):\\n\\t\",\"difficulty\":1.09375,\"familyId\":\"nEb9Fwt2hWFJzcEDF\",\"instructions\":\"**Mubashir** created a simple robot that is navigated by a series of North, East, South, and West `[n, e, s, w]` commands. Each command moves the robot one step in the given direction. The robot is designed for only two destinations:\\n\\n- **Destination No. 1:** e, n, e, e, n\\n- **Destination No. 2:** w, n, w, n, w, w, n\\n\\nCreate a function that takes a list of `commands` and returns True if the robot reaches any of the destinations, False otherwise.\\n\\n### Examples\\n```\\nrobot_path([\\\"s\\\", \\\"e\\\", \\\"e\\\", \\\"n\\\", \\\"n\\\", \\\"e\\\", \\\"n\\\"]) ➞ True\\n# Robot will end up at destination no. 1\\n\\nrobot_path([\\\"n\\\", \\\"e\\\", \\\"s\\\", \\\"w\\\", \\\"n\\\", \\\"e\\\", \\\"s\\\", \\\"w\\\", \\\"w\\\", \\\"s\\\", \\\"n\\\", \\\"e\\\"]) ➞ False\\n# Robot will be lost somewhere\\n\\nrobot_path([\\\"n\\\", \\\"s\\\", \\\"n\\\", \\\"n\\\", \\\"e\\\", \\\"n\\\", \\\"w\\\", \\\"w\\\", \\\"s\\\", \\\"w\\\", \\\"w\\\", \\\"w\\\", \\\"n\\\"]) ➞ True\\n```\\n\\n### Notes\\nN/A\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(robot_path(['s', 'e', 'e', 'n', 'n', 'e', 'n']), True)\\nTest.assert_equals(robot_path(['n', 's', 'n', 'n', 'e', 'n', 'w', 'w', 's', 'w', 'w', 'w', 'n']), True)\\nTest.assert_equals(robot_path(['n', 's', 'n', 'n', 'n', 'e', 'n', 'w', 'n', 'w', 's', 'w', 'w', 'w', 'n']), False)\\nTest.assert_equals(robot_path(['n', 's', 'n', 's', 'n', 's', 'n', 's', 'n', 's', 'n', 's', 'n', 's', 'e', 'w', 'w']), False)\\nTest.assert_equals(robot_path(['n', 'e', 's', 'w', 'n', 'e', 's', 'w', 'w', 's', 'n', 'e']), False)\\n\\n# Mubashir\",\"language\":\"python3\",\"quality\":4.67741935483871,\"summary\":\"Mubashir created a simple robot that is navigated by a series of North, East, South, and West [n, e, s, w] commands. The robot is designed for only two destinations:\\n\\nDestination No. 1: e, n, e, e, n\\nDestination No. 2: w, n, w, n, w, w, n\\n\\nCreate a function that takes a list of commands and returns true if the robot reaches any of the destinations, false other\",\"tags\":[\"algorithms\",\"logic\",\"validation\",\"language_fundamentals\"],\"timestamp\":{\"$date\":1611986399035},\"title\":\"Robot Path \ud83e\udd16\",\"stats\":{\"completed\":{\"total\":130,\"ratings\":[1,1,1,1,1,0,0,1,1,0,5,1,2,1,0,1,1,0,2,2,1,0,3,1,2,0,0,4,1,1,0,1,1,2,0,1,1,1,0,2,2,2,1,1,3,1,1,1,1,0,1,1,2,1,1,0,1,0,1,0,2,1,2,1,0,1,2,1,1,1,1,1,2,1,1,1,0,1,0,1,1,1,3,1,1,1,2,0,1,0,2,2,0,1,1,2],\"quality\":[5,5,5,5,4,5,5,5,5,5,3,3,3,5,5,5,4,5,3,5,5,5,5,5,5,5,5,5,5,5,5],\"rators\":[\"T6iBEE2jp7f7iEF2P\",\"iS5BrkGLzJyPK7nKt\",\"DPi9QGLctq2y76KuE\",\"Ds7L5bksw2QRHjrKL\",\"PXAcsKkssS2yLyDv2\",\"J5T8gZqiZXFuFDTQ7\",\"cAP3n5NY64uoMwzRR\",\"BJp2WkwLWGHHB5oQW\",\"XD5nmvKQchKezPXhy\",\"yjtdwc2AC4jA2RWtn\",\"8BFSTCnoe2QggN64c\",\"q6QsMYNMpPNtmyTeW\",\"GGdmhAvxXhqhhibJN\",\"eHcgvkTGsH7ZziqBo\",\"X38G6ixh6YGvLhnmi\",\"wqdX4wXbZGgJ9Fyb7\",\"pPpmP7xeJzGgK362R\",\"xjCurF8rB4MKrJSEX\",\"s5M5RvgqR9BhB9JoC\",\"gt4XmbqTcM8r6YBvx\",\"2QGRoQn2dRq3scu7k\",\"sHjfbGQGLHE6JR6qu\",\"cbhmt4aRWPyJnnzNT\",\"p8qqFdJ3FSk5x9z3G\",\"8JyqsSbN2FJXPr3cw\",\"Jqk2uJZZxEv5wZFze\",\"oBcs8GLX2ZFLXQy8y\",\"syr2Q7R2WcrJutQ3r\",\"zd9FLSzsGz3evKafy\",\"7dQYiDeTcMztbGyso\",\"RTDx9axf52kxhFjwZ\",\"BrTDhPJcACL2bsrpJ\",\"5HCu9Ydd86QgHDRNP\",\"eYfPWvZwnJQkHbSTK\",\"gJYuGdkXEWWmGRLzu\",\"gb9rvGus2Jv7bjZSs\",\"cR3ibTMxLyEdDFCHY\",\"FEYpu9RWysAgW3XnP\",\"3cF6NXq3ZEwdkgSjb\",\"fTNQmMvTZhhiGBCMe\",\"YcCLwitFMAEJSnxAW\",\"rfyEkETeoS96QNH4e\",\"qAby4AWXmTNeusvg3\",\"Yp7uvStL97cC9fKkY\",\"GdKtjPh8TcfmJuduv\",\"iP7wNofhZXTkJ9ryG\",\"cE7BrsuwHYabZHKFb\",\"C5zkuMYaPvKBWAtv8\",\"iojEnnY9FsMfYzp6f\",\"srJ34BaybkQh3qRkM\",\"3nied3n8KG8RSNixH\",\"J3upzLHuEwXH7Z2hx\",\"N2wnZXkhDH86mgjQ8\",\"BdnE4RS5puoxo92mA\",\"DEDniTrstQYGounXT\",\"66a9xX73nmTEuKs9k\",\"c2q7mY39z5JPEMCaM\",\"PC3pLs36zNzpRDSuE\",\"XrqNzJ2FRG8HnGiR6\",\"QRv96jmNaYsWkxQEG\",\"eMuCpJ2spXWkJjWNz\",\"tAF9Gf6PiGogbZuWs\",\"5XiuAqicKD4hBdu63\",\"CHvzhtXnv8HTbPQ56\",\"NQQzu4wyLWW9faWtK\",\"utTuvGdmu2sBHWBhQ\",\"9Ly8afdtofp8DXzrt\",\"8uiLiJcmWxWe6qw65\",\"H9KZi2cjt4FwH7qog\",\"AasGs8AeX9Lcb9xJn\",\"j7ebNFtte6fSkMWjj\",\"rrSC943cCKNG48sH4\",\"LQxof8pGabGuWP7Gn\",\"FxbTzThBiTnRzfirA\",\"4TmgHkn5vqyHK3sYC\",\"HqmxnQJM66Y57twhn\",\"9pzFiFK3ANLjQfnr2\",\"Afnps7TJQuS9sipMb\",\"ZEmLth3xsiCJENKz4\",\"aEm3Wvj2rFYRL8Lrb\",\"JS3hNM3XXkxPdg3yk\",\"gKnWjDjwrJh7MK2df\",\"gjiu8kLnHYxe4HoBN\",\"jBo3xAopr37GFzY8g\",\"8PwfYqoDQFThzNtvf\",\"9LrF5o2TK2iE8BZJh\",\"rCrbqMiaGPgHYTNxu\",\"E9ttMPTkLkKG6nZrg\",\"FMyZPN6odEFtfuimF\",\"dYPkStFnLvAMsHSzZ\",\"dzS6WBTMHyFEag6Fp\",\"rhS8qXRjZcpDXkwnE\",\"gXTAie79kiw28tx5u\",\"mxX4rH5ELYkdZ2Mbw\",\"B4y8aoyXJtskYPFEL\",\"mwBTYXNw6pFLwHKki\",\"2MjzJ7yxh3eT3xbng\",\"zC8WrPp5BC6c2exrW\",\"pwWtbXEjzuvrhEGwt\",\"wjc4iejpErBhxWwHo\",\"yAouD3PxzED8a4gap\",\"qB6KSTYC6H2TQEQY6\",\"PTDFuxAzou7W6asWt\",\"5QN8R22z43SrwoHDz\",\"jcPZ5ySXseCB7Ec3x\",\"W4cLjos2dNMkKzpXX\",\"ey3CASd6Je5LEJzfB\",\"6LKgL3g9JyHQQoqgY\",\"RoGGD5cpHb4ftdLDv\",\"ahWFxnaxt9bXSA4f3\",\"u5u2YpHXiNgzDNJdX\",\"QN4FPwhiak7Pf8kn6\",\"GgQqni8TkbqEBGcsy\",\"Wi4H6ayKsNDWWQCG5\",\"sMcFMPkMJC4Kh6ymj\",\"FiaTpm7ehfDv43wSG\",\"cmH5k3s9REYMzDBMn\",\"xn7RNy9DqGpxvQTi5\",\"mdRQaGT98ycMt87S2\",\"Cg3LKtEAJpsrdWroG\",\"rraTtctZqnjXu2L2x\",\"naZ3i6sSDPwsieDH7\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"3yMPPjKaEwB23T5zf\",\"language\":\"cpp\"},{\"_id\":\"Ye9ZuahZiQLoP9AYJ\",\"language\":\"javascript\"},{\"_id\":\"towwrEJ7zr8xKGSr5\",\"language\":\"python3\"},{\"_id\":\"2gQzsvEtmp2qPYzp9\",\"language\":\"ruby\"}]}}"]