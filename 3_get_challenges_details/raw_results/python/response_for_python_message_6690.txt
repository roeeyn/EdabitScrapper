a["{\"msg\":\"result\",\"id\":\"2053\",\"result\":{\"_id\":\"YrNbakR7Y4vLz6bFs\",\"author\":\"Mubashir Hassan \",\"authorId\":\"T6iBEE2jp7f7iEF2P\",\"code\":\"def combinator(lst):\\n\\t\",\"difficulty\":2.8666666666666667,\"familyId\":\"5CmZM5gdr9y9Tp7zr\",\"instructions\":\"Create a function that, given a list of string lists, returns an list of all combinations as concatenated strings.\\n\\n1. The function is called with a list of lists containing strings.\\n2. The task is to combine each string of each array with each string of each other list.\\n3. If one of the string lists is empty, the function will return an empty list.\\n\\nThe function will accept an optional second string parameter. This parameter, if specified, is to be used to combine two strings.\\n\\n### Examples\\n```\\ncombinator([[\\\"a\\\", \\\"b\\\"], [\\\"c\\\", \\\"d\\\"]]) ➞ [\\\"ac\\\", \\\"ad\\\", \\\"bc\\\", \\\"bd\\\"]\\n\\ncombinator([[\\\"a\\\"], [\\\"a\\\", \\\"b\\\"], \\\"abc\\\"]) ➞ [\\\"aaa\\\", \\\"aab\\\", \\\"aac\\\", \\\"aba\\\", \\\"abb\\\", \\\"abc\\\"]\\n\\ncombinator([[\\\"foo\\\", \\\"bar\\\"], [\\\"baz\\\", \\\"bamboo\\\"]], \\\" \\\") ➞ [\\\"foo baz\\\", \\\"foo bamboo\\\", \\\"bar baz\\\", \\\"bar bamboo\\\"]\\n\\ncombinator([[]]) ➞ []\\n```\\n\\n### Notes\\n- The order of the given strings must be retained in the combinations.\\n- You can assume that:\\n  - The function is always called with a list of string lists and lists can be empty.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(combinator([['a']]), ['a'])\\nTest.assert_equals(combinator([['ab'], ['ba']]), ['abba'])\\nTest.assert_equals(combinator([['a', 'b']]), ['a', 'b'])\\nTest.assert_equals(combinator([['a', 'b'], ['c', 'd']]), ['ac', 'ad', 'bc', 'bd'])\\nTest.assert_equals(combinator([['a', 'b'], ['c', 'd'], ['e', 'f']]), ['ace', 'acf', 'ade', 'adf', 'bce', 'bcf', 'bde', 'bdf'])\\nTest.assert_equals(combinator([['a'], ['a', 'b'], 'abc']), ['aaa', 'aab', 'aac', 'aba', 'abb', 'abc'])\\nTest.assert_equals(combinator([['foo', 'bar'], ['baz', 'bamboo']], ' '), ['foo baz', 'foo bamboo', 'bar baz', 'bar bamboo'])\\nTest.assert_equals(combinator(['abcd', 'efgh', 'ijkl']), ['aei', 'aej', 'aek', 'ael', 'afi', 'afj', 'afk', 'afl', 'agi', 'agj', 'agk', 'agl', 'ahi', 'ahj', 'ahk', 'ahl', 'bei', 'bej', 'bek', 'bel', 'bfi', 'bfj', 'bfk', 'bfl', 'bgi', 'bgj', 'bgk', 'bgl', 'bhi', 'bhj', 'bhk', 'bhl', 'cei', 'cej', 'cek', 'cel', 'cfi', 'cfj', 'cfk', 'cfl', 'cgi', 'cgj', 'cgk', 'cgl', 'chi', 'chj', 'chk', 'chl', 'dei', 'dej', 'dek', 'del', 'dfi', 'dfj', 'dfk', 'dfl', 'dgi', 'dgj', 'dgk', 'dgl', 'dhi', 'dhj', 'dhk', 'dhl'])\\nTest.assert_equals(combinator([[]]), [])\\nTest.assert_equals(combinator([['a', 'b'], [], ['e', 'f']]), [])\\nTest.assert_equals(combinator([[], ['e', 'f']]), [])\",\"language\":\"python3\",\"quality\":0,\"summary\":\"Create a function that, given a list of string lists, returns an list of all combinations as concatenated strings.\\n\\nThe function is called with a list of lists containing strings.\\nThe task is to combine each string of each array with each string of each other list.\\nIf one of the string lists is empty, the function will return an empty list.\\n\\nThe function will\",\"tags\":[\"strings\",\"algorithms\",\"arrays\"],\"timestamp\":{\"$date\":1607844943977},\"title\":\"Combinator\",\"stats\":{\"completed\":{\"total\":27,\"ratings\":[2,2,2,2,2,3,3,4,5,2,2,3,4,0,3,2,4,2,2,4,4,4,4,1,4,4,3,4,4,1],\"quality\":[],\"rators\":[\"8PwfYqoDQFThzNtvf\",\"iS5BrkGLzJyPK7nKt\",\"HF28xZKSLM9wEuqNg\",\"fSQSHjW3e72MrWxbD\",\"s5M5RvgqR9BhB9JoC\",\"yTtSCvGPyYna6JuRC\",\"n2BRY9X8899dcG8Bw\",\"p8qqFdJ3FSk5x9z3G\",\"GGdmhAvxXhqhhibJN\",\"QRv96jmNaYsWkxQEG\",\"gXTAie79kiw28tx5u\",\"P7NmFbCJ5offXMRvB\",\"8sNv5PTHa7XQ8bNqR\",\"gb9rvGus2Jv7bjZSs\",\"2PufnQcsHsfymufX3\",\"J3upzLHuEwXH7Z2hx\",\"iojEnnY9FsMfYzp6f\",\"xn7uGNKeAwPEkP9oA\",\"yjtdwc2AC4jA2RWtn\",\"gJYuGdkXEWWmGRLzu\",\"AasGs8AeX9Lcb9xJn\",\"LQxof8pGabGuWP7Gn\",\"tAF9Gf6PiGogbZuWs\",\"buX4mCQhtXCfBjeno\",\"aEm3Wvj2rFYRL8Lrb\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"AB9Kr86brh3ePbmBJ\",\"language\":\"cpp\"},{\"_id\":\"7b7Enrm4Xb5owFToe\",\"language\":\"javascript\"},{\"_id\":\"YrNbakR7Y4vLz6bFs\",\"language\":\"python3\"},{\"_id\":\"ByCurYynkiWjWf6xS\",\"language\":\"ruby\"}]}}"]