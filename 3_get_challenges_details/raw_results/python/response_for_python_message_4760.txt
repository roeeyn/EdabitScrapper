a["{\"msg\":\"result\",\"id\":\"1096\",\"result\":{\"_id\":\"bDn2nC9GHwZMwFxRN\",\"author\":\"Alessandro Manicone\",\"authorId\":\"AasGs8AeX9Lcb9xJn\",\"code\":\"import re\\n\\npattern = \\\"yourregularexpressionhere\\\"\",\"difficulty\":1.5748502994011977,\"familyId\":\"Ee3GisWX4LctrGRwZ\",\"instructions\":\"Write a **regular expression** that ensures the word \\\"end\\\" is inside of another word (e.g. \\\"bending\\\"). You must use RegEx **boundary assertions**. Non-word characters such as `!`, `?`, etc. cannot be boundaries.\\n\\n### Examples\\n```\\npattern = \\\"yourregularexpressionhere\\\"\\n\\nbool(re.search(pattern, \\\"The end of the story.\\\")) ➞ False\\nbool(re.search(pattern, \\\"Endings are pointless.\\\")) ➞ False\\nbool(re.search(pattern, \\\"Let\\\"s send!\\\")) ➞ False\\nbool(re.search(pattern, \\\"We viewed the rendering at the end.\\\")) ➞ True\\nbool(re.search(pattern, \\\"Sometimes bending the rules is good.\\\")) ➞ True\\n```\\n\\n### Notes\\n- You cannot use ` \\\\w `, ` * `, `.` or ` + ` in your expression.\\n- You **don't** need to write a function, just the pattern.\\n- Do **not** remove `import re` from the code.\\n- Find more info on RegEx and boundary assertions in **Resources**.\\n- You can find all the challenges of this series in my [Basic RegEx](https://edabit.com/collection/8PEq2azWDtAZWPFe2) collection.\",\"isHidden\":false,\"lab\":\"restricted = ['\\\\w', '*', '.', '+']\\nTest.assert_equals(any(i in pattern for i in restricted), False, 'You are not allowed to use \\\\w, *, ., or + in your expression.')\\nTest.assert_equals('\\\\B' in pattern, True, 'You must use boundary assertions.')\\n\\ntxt1 = \\\"The end of the story.\\\"\\ntxt2 = \\\"ending is pointless.\\\"\\ntxt3 = \\\"Defending the crown will end the crown!\\\"\\ntxt4 = \\\"Let's send!\\\"\\ntxt5 = \\\"We viewed the rendering at the end.\\\"\\ntxt6 = \\\"Sometimes bending the rules is good.\\\"\\n\\nTest.assert_equals(bool(re.search(pattern, txt1)), False)\\nTest.assert_equals(bool(re.search(pattern, txt2)), False)\\nTest.assert_equals(bool(re.search(pattern, txt3)), True)\\nTest.assert_equals(bool(re.search(pattern, txt4)), False)\\nTest.assert_equals(bool(re.search(pattern, txt5)), True)\\nTest.assert_equals(bool(re.search(pattern, txt6)), True)\\n\\n# Translated from JavaScript.\\n# The RegEx series was originally posted by Isaac Pak.\",\"language\":\"python3\",\"summary\":\"Write a regular expression that ensures the word \\\"end\\\" is inside of another word (e.g. \\\"bending\\\"). You must use RegEx boundary assertions. Non-word characters such as !, ?, etc. cannot be boundaries.\\n\\nExamples\\npattern = \\\"yourregularexpressionhere\\\"\\n\\nbool(re.search(pattern, \\\"The end of the story.\\\")) ➞ False\\nbool(re.search(pattern, \\\"Endings are pointless.\\\")) ➞ Fa\",\"tags\":[\"formatting\",\"regex\",\"validation\"],\"timestamp\":{\"$date\":1586626826646},\"title\":\"RegEx III: Boundary Assertions\",\"stats\":{\"completed\":{\"total\":223,\"ratings\":[2,2,2,2,2,2,1,1,2,2,2,1,3,3,1,1,3,2,1,2,1,2,2,1,1,2,2,1,1,1,2,2,2,1,0,3,2,2,2,0,0,2,1,1,2,2,2,2,2,2,0,2,0,2,1,2,3,2,1,1,1,1,2,2,2,1,0,3,1,1,2,2,4,2,3,2,1,0,1,1,0,2,2,0,0,1,3,1,1,2,1,0,2,2,1,2,2,0,3,2,1,1,0,1,1,2,2,2,1,2,1,1,0,2,2,1,2,2,2,2,2,2,2,1,1,0,2,1,3,0,5,1,2,2,1,2,0,0,2,2,1,2,2,2,3,1,2,2,1,2,0,2,1,1,2,2,2,1,2,2,5,1,3,1,2,1,2],\"rators\":[\"AasGs8AeX9Lcb9xJn\",\"tAF9Gf6PiGogbZuWs\",\"Yp7uvStL97cC9fKkY\",\"aEm3Wvj2rFYRL8Lrb\",\"jNvegJWCk5HCtEMbK\",\"LjoNTyGEMfBpMHHus\",\"XsYhWtDMoky3nAhjd\",\"geacYDqsgKbSdLRMC\",\"Cuy7McJ5y8BkXRRk9\",\"ZNnsMeNkdDhHjSrZb\",\"gb9rvGus2Jv7bjZSs\",\"uTKCSekw6me9swLdk\",\"AGMQqooexrFXgMnET\",\"8JyqsSbN2FJXPr3cw\",\"n7won7uQNyJdrtrY6\",\"HF28xZKSLM9wEuqNg\",\"vWgBJaEtcu3XoYuer\",\"bMEg2eSZtsAcT7ZmJ\",\"KRmxvA4mWgfKvHmYN\",\"KRSKj7ikX2ytWFmod\",\"vLrq4dEDMM2wd68Dc\",\"rQuYHTeMzxSzTpYCR\",\"6c4xjEdFxdYw5xGrt\",\"mxX4rH5ELYkdZ2Mbw\",\"pWD2YC5s4YRCxFc2i\",\"DEDniTrstQYGounXT\",\"GM2X83qnuLXTHe5zA\",\"8PwfYqoDQFThzNtvf\",\"aP7JkkYer28YWrPvC\",\"2fxapKr8XGdNeaKi2\",\"dHZqT6h4JMwk5fPC8\",\"F2ykFxhDEEkj6N5KE\",\"hnyhBFWwNCz9mDfSi\",\"rrNComrAKsGM6iaLh\",\"586FdBhazpwJfnRYR\",\"NRCH4eiebS7LBjSCa\",\"a777e8chPvJkY3tKa\",\"KdNDysEsy2TW5QRJ2\",\"nfXGHENb5md7m355s\",\"9pzFiFK3ANLjQfnr2\",\"rgvAJFwfCeYoYnFTK\",\"EjbDDFRECrzQDkzrX\",\"FzxTj4GuujhwpZM7y\",\"ZPfMiGmjtiGpzozG2\",\"ZJYMYPmyQAJ5B863h\",\"ahk2qiXKJA753wAJk\",\"YRstQuthRkFeBiXug\",\"TP8xuSLNax26Czg7v\",\"vyaFTJDKChqYfczdu\",\"pkQBaSzukotPEXmrD\",\"FxJxxwowtXYCaLaeD\",\"ENsSYogEHHeDSrFod\",\"mDWNyaaQ9hvPCRzSd\",\"p5EN3tadeCfPkW3CB\",\"yJmwiykSNfLv9NqJ2\",\"NK2PmeDZcHywYuWYq\",\"5khyYS3abpwyJq2Mx\",\"ijNKM8DuspXuAnC4y\",\"mvBtrHqKuz3AqghjS\",\"H4abACFDH5t8CnnyH\",\"BtdZezHfckxRLm7xR\",\"uphTJGksikXpnrLxT\",\"aCNWav8S8Try9RkC6\",\"R4SjTgDnpigJYDLyL\",\"xSifQB3kES9Mxrbiq\",\"iojEnnY9FsMfYzp6f\",\"ffRoCk9GqxBRN6izT\",\"KZvaNQrXBFJ9bKLYx\",\"u3HMcY3wn7T3eSfym\",\"XSt47ad5D5LLZSupD\",\"YcCLwitFMAEJSnxAW\",\"n2BRY9X8899dcG8Bw\",\"yjtdwc2AC4jA2RWtn\",\"Pe8vWpDHRuH9nSGKW\",\"Tpc5NKFiQyz3NTZau\",\"MCw7uAcoWcSTBTmr3\",\"PTDFuxAzou7W6asWt\",\"xW9NGjvcevY6qdzvw\",\"DJdsqmTeAGDwrgYoZ\",\"HqmxnQJM66Y57twhn\",\"JJmKj7ACC2P52uo95\",\"4597PD5mbXzHa3vdi\",\"Ge3xgZrEGB58ofBPT\",\"pscBduNyf8TDHe2Km\",\"XrqNzJ2FRG8HnGiR6\",\"ACEZh39brWjdGkZXb\",\"foytX6kH9wiSYqLtT\",\"NNE5HNRXAkmhrWgyQ\",\"FEYpu9RWysAgW3XnP\",\"8WpvgSbQciTQWdd8T\",\"oBcs8GLX2ZFLXQy8y\",\"DYDJTyGgKFnBRLm2r\",\"BqT6sMHBAjkw4hjG6\",\"cxABox46qWvJRyidE\",\"pmgFEciNrd3ES9tuu\",\"mBtSsKTHdQniYAfsZ\",\"NuqGt5u3s7vJ7HBGR\",\"M8dQuMrEpP8Hc3tHN\",\"vdBeJ5a47NoLn3DkJ\",\"RehJGBFS6CYiWdjZx\",\"zd9FLSzsGz3evKafy\",\"3cF6NXq3ZEwdkgSjb\",\"mG8HqKiAQFTdRZthG\",\"tpxMgkGSHwBjS95Ta\",\"KLmLKaJPfsYxp42p2\",\"oHbErJxjYJhD66d5w\",\"m6TC9gshrwufWqAYn\",\"RuJEvopcxp3TijwpM\",\"5Z4o2pWDzmbpw4JHJ\",\"9CoqdidjM9KbeKnHY\",\"XjajdyybZZbkz8o5x\",\"7K2GEb5TZRtSpyyGS\",\"qD2LrwaDrSdiybLKY\",\"QNb9Rx8BJgCWn3qgR\",\"xuhzk6HxLWryHMGAQ\",\"mwbQcgL35uxt3LkcM\",\"spqXrjG3ZFa2j5uTR\",\"mzsaCBQP3e6YourDN\",\"7eYSYKpM4i2N4NZ92\",\"2QziknsznNeMPRh3g\",\"J3upzLHuEwXH7Z2hx\",\"DPi9QGLctq2y76KuE\",\"uN5t57RETi5y2z5W8\",\"c2u7qfdaYxcyuydtu\",\"LCZ6JTAhBZBmWLzm8\",\"EMJ6uvBZkie429gdg\",\"incG8tH2dwThHg35f\",\"dYPkStFnLvAMsHSzZ\",\"cAP3n5NY64uoMwzRR\",\"6MjSiiBLPcvXbXcaZ\",\"obsLt2HzJ5r9f8pkM\",\"vgT3ehH2o2KC94NsY\",\"DqNQn9Jsxcu5HijKE\",\"5XiuAqicKD4hBdu63\",\"RGMbFMZXJr7DhcAJy\",\"DpnYcMphntjsQ96qg\",\"kAkLAF9T5McSxXJCT\",\"d8qtzoLB264iP8tdY\",\"FRv5HToEaZ6iRM7T5\",\"bPmZSm3AT2mQHbBHk\",\"wRttWTM59y8m5mx7x\",\"QJjb5YhFjNf4M4pmY\",\"XMYbe9cezEyMp2QMo\",\"ANbSYXiYsp4addoDq\",\"J5T8gZqiZXFuFDTQ7\",\"CTKmXtrqDYqJBnuy8\",\"HuNF3xTBzmatyGSTm\",\"StNu7DPyTgEStZsMY\",\"m9Dj3WvWDwiu73PRh\",\"zMAy89ZAeHKKtm6w9\",\"Jqk2uJZZxEv5wZFze\",\"Hbep7kAusdxJFG5Qv\",\"5S9nX4rKsnCcnv4Cz\",\"PYMCsk26X5SETLDMy\",\"axdSNLZpiCDF8RS6n\",\"nPRDLtMR8iztbB7Es\",\"GGdmhAvxXhqhhibJN\",\"HTv3FdeB6pYK7ZKJa\",\"Ds7L5bksw2QRHjrKL\",\"sHjfbGQGLHE6JR6qu\",\"qAby4AWXmTNeusvg3\",\"QNC6ErTx4ca2H3rD7\",\"RTDx9axf52kxhFjwZ\",\"hRAd998MG8Jzdpxj6\",\"o4ixjQGSaYqA2JoM4\",\"4iocshxRuzitdpEJz\",\"qNszsXx28cTxvGSNj\",\"vA3sBoGvJmYKZHdmE\",\"s7PAdYARQvr8scq84\",\"eMuCpJ2spXWkJjWNz\",\"JwkwCHcXthnGDsdFr\",\"AFfw7cGg83uYk2Miy\",\"bvmTE46bfcM4ogj34\",\"GKE4493pY34bGE2ZM\",\"yod5YhKtPqw2GfG9B\",\"yr822PZmmiDDenxpB\",\"eHcgvkTGsH7ZziqBo\",\"JKb5rhL6DKcCAypF9\",\"8BFSTCnoe2QggN64c\",\"sbJcFfQjQ59Wfg4Cd\",\"CHvzhtXnv8HTbPQ56\",\"BrTDhPJcACL2bsrpJ\",\"PH32cNxBjrK4a28sn\",\"ctbThYbufFCYbRK4f\",\"97DthwdtrBLm2y2Yj\",\"rCrbqMiaGPgHYTNxu\",\"2PufnQcsHsfymufX3\",\"u5u2YpHXiNgzDNJdX\",\"4TmgHkn5vqyHK3sYC\",\"pduNK68oazqQTtbLp\",\"ag8tcfPvJZWpRnwet\",\"MHiQx9E8rPgzJfsJy\",\"ExtLwnLBEiWJxAskL\",\"SFyGnexSYdfWGvMsS\",\"RfbjShbg8jmhyNtJh\",\"Wi4H6ayKsNDWWQCG5\",\"bNENiqqEDxM5a5JBf\",\"rQA9SE8nuwFueaHsR\",\"wrL4iX2CCSqDCCty3\"],\"quality\":[3,4,4,5,5,5,5,5,4,3,5,5,4,5,5,5,5,5,4,5,5,5,5,5,4,5,5,5,5,5,4,4,4,5,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":4.648648648648648,\"family\":[{\"_id\":\"5bETfgL67yy9FKnF4\",\"language\":\"javascript\"},{\"_id\":\"bDn2nC9GHwZMwFxRN\",\"language\":\"python3\"}]}}"]