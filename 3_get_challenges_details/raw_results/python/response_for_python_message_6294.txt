a["{\"msg\":\"result\",\"id\":\"1859\",\"result\":{\"_id\":\"72KukSssxk2eHrWqx\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"def char_at_pos(r, s):\\n\\t\",\"difficulty\":2.5443037974683542,\"familyId\":\"t75XWbLAZtLvQCeLh\",\"instructions\":\"Create a function that extracts the characters from a list (or a string) on odd or even positions, depending on the specifier. The string ***\\\"odd\\\"*** for items on *odd positions* (... 5, 3, 1) and ***\\\"even\\\"*** for *even positions* (... 6, 4, 2) ***from the last item*** of that list or string.\\n\\n### Examples\\n```\\nchar_at_pos([2, 4, 6, 8, 10], \\\"even\\\") ➞ [4, 8]\\n# 4 & 8 occupy the 4th & 2nd positions from right.\\n\\nchar_at_pos(\\\"EDABIT\\\", \\\"odd\\\") ➞ \\\"DBT\\\"\\n# \\\"D\\\", \\\"B\\\" and \\\"T\\\" occupy the 5th, 3rd and 1st positions from right.\\n\\nchar_at_pos([\\\")\\\", \\\"(\\\", \\\"*\\\", \\\"&\\\", \\\"^\\\", \\\"%\\\", \\\"$\\\", \\\"#\\\", \\\"@\\\", \\\"!\\\"], \\\"odd\\\") ➞ [\\\"(\\\", \\\"&\\\", \\\"%\\\", \\\"#\\\", \\\"!\\\"]\\n```\\n\\n### Notes\\n- Lists are zero-indexed, so, index+1 = position or position-1 = index.\\n- **Optional**: Solve this challenge in a single-line lambda function.\\n- A recursive version of this challenge can be found via this [link](https://edabit.com/challenge/n2y4i74e9mFdwHNCi).\",\"isHidden\":false,\"lab\":\"Test.assert_equals(char_at_pos(\\\"EDABIT\\\", \\\"even\\\"), \\\"EAI\\\")\\nTest.assert_equals(char_at_pos(\\\"EDABIT\\\", \\\"odd\\\"), \\\"DBT\\\")\\nTest.assert_equals(char_at_pos(\\\"QWERTYUIOP\\\", \\\"even\\\"), \\\"QETUO\\\")\\nTest.assert_equals(char_at_pos(\\\"POIUYTREWQ\\\", \\\"odd\\\"), \\\"OUTEQ\\\")\\nTest.assert_equals(char_at_pos(\\\"ASDFGHJKLZ\\\", \\\"odd\\\"), \\\"SFHKZ\\\")\\nTest.assert_equals(char_at_pos(\\\"ASDFGHJKLZ\\\", \\\"even\\\"), \\\"ADGJL\\\")\\nTest.assert_equals(char_at_pos([2, 4, 6, 8, 10], \\\"even\\\"), [4, 8])\\nTest.assert_equals(char_at_pos([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], \\\"odd\\\"), [2, 4, 6, 8, 10])\\nTest.assert_equals(char_at_pos([\\\"!\\\", \\\"@\\\", \\\"#\\\", \\\"$\\\", \\\"%\\\", \\\"^\\\", \\\"&\\\", \\\"*\\\", \\\"(\\\", \\\")\\\"], \\\"odd\\\"), [\\\"@\\\", \\\"$\\\", \\\"^\\\", \\\"*\\\", \\\")\\\"])\\nTest.assert_equals(char_at_pos([\\\")\\\", \\\"(\\\", \\\"*\\\", \\\"&\\\", \\\"^\\\", \\\"%\\\", \\\"$\\\", \\\"#\\\", \\\"@\\\", \\\"!\\\"], \\\"odd\\\"), [\\\"(\\\", \\\"&\\\", \\\"%\\\", \\\"#\\\", \\\"!\\\"])\\nTest.assert_equals(char_at_pos([\\\"A\\\", \\\"R\\\", \\\"B\\\", \\\"I\\\", \\\"T\\\", \\\"R\\\", \\\"A\\\", \\\"R\\\", \\\"I\\\", \\\"L\\\", \\\"Y\\\"], \\\"odd\\\"), [\\\"A\\\", \\\"B\\\", \\\"T\\\", \\\"A\\\", \\\"I\\\", \\\"Y\\\"])\",\"language\":\"python3\",\"summary\":\"Create a function that extracts the characters from a list (or a string) on odd or even positions, depending on the specifier. The string \\\"odd\\\" for items on odd positions (... 5, 3, 1) and \\\"even\\\" for even positions (... 6, 4, 2) from the last item of that list or string.\\n\\nExamples\\ncharatpos([2, 4, 6, 8, 10], \\\"even\\\") ➞ [4, 8]\\n4 & 8 occupy the 4th & 2nd position\",\"tags\":[\"algorithms\",\"arrays\",\"logic\"],\"timestamp\":{\"$date\":1594678113853},\"title\":\"Oddly or Evenly Positioned From Last\",\"stats\":{\"completed\":{\"total\":94,\"ratings\":[3,3,3,3,3,5,5,4,3,1,3,5,4,2,3,2,4,2,2,1,2,4,0,2,3,1,2,4,2,0,3,3,1,1,1,2,3,3,4,4,4,2,3,2,2,3,3,3,4,2,1,4,2,3,1,4,4,1,3,2,4,3,2,2,0,0,3,0,4,3,4,3,3,0,3,2,1,4,1],\"rators\":[\"FNc2Xx4uYuF5cqokp\",\"wwMcJQRvf3X59Jyev\",\"W5TajitmCyxz87zAC\",\"a777e8chPvJkY3tKa\",\"aEm3Wvj2rFYRL8Lrb\",\"s5M5RvgqR9BhB9JoC\",\"5dHucvf2qBYyKim7X\",\"8PwfYqoDQFThzNtvf\",\"2innwjWqxJHo4eRGh\",\"GK6Ae7SS8oCbkDpTp\",\"gJYuGdkXEWWmGRLzu\",\"a4Ln97CHxc8W6dzbq\",\"ya2ofFqYRC57bfbND\",\"Kg94pDSdZJ2wSkMcY\",\"J83b6T9hJ2EqE5Aov\",\"bJxaKHJqR82EWw8Su\",\"Nfsj4eNFDjaFa39ga\",\"qPpQfR5KyDb5Y3EFf\",\"gb9rvGus2Jv7bjZSs\",\"djeesDJQwNJay4RTe\",\"8JyqsSbN2FJXPr3cw\",\"S6ipW8Xzds8QDszn9\",\"nJ7rrnewDrB4FythE\",\"x4dfavjLEcrvAF3QQ\",\"axdSNLZpiCDF8RS6n\",\"77dQgT3gTGWLcRPTk\",\"Y8ySZEtvht9EwdcoY\",\"yTtSCvGPyYna6JuRC\",\"55RQznnuTGpsj3EXd\",\"Ecg4m7srYGgZsb4Ck\",\"4fhjJBvLBWh6QeSih\",\"xn7uGNKeAwPEkP9oA\",\"tAF9Gf6PiGogbZuWs\",\"cxABox46qWvJRyidE\",\"Nb6LYPoQP6KJZt8mz\",\"wZ22E8EXW4qasgru2\",\"8sNv5PTHa7XQ8bNqR\",\"skG34HkAFoQiHk7gg\",\"zZDaXBxMzTCBhNkgL\",\"gSFJPsMXnqAog3Q9f\",\"iS5BrkGLzJyPK7nKt\",\"5s4qhuRJijYaDNXva\",\"MfKe55snfKsdnDejs\",\"NfMJuiBk6FN5Jc6ow\",\"P7NmFbCJ5offXMRvB\",\"yjtdwc2AC4jA2RWtn\",\"v9KtC8YLbMWmXiW2H\",\"XjajdyybZZbkz8o5x\",\"quEfQhA3xBwsCobcg\",\"m6TC9gshrwufWqAYn\",\"HF28xZKSLM9wEuqNg\",\"w2HhxvSLmDhaGCAjE\",\"9FCeFzjPA4jrQ7oHW\",\"J5T8gZqiZXFuFDTQ7\",\"yoYQqaY6GszuTkNSs\",\"fSQSHjW3e72MrWxbD\",\"QRv96jmNaYsWkxQEG\",\"J3upzLHuEwXH7Z2hx\",\"zd9FLSzsGz3evKafy\",\"buX4mCQhtXCfBjeno\",\"mDWNyaaQ9hvPCRzSd\",\"7ifh8r4gvyYMhKB94\",\"DPi9QGLctq2y76KuE\",\"Jqk2uJZZxEv5wZFze\",\"gXTAie79kiw28tx5u\",\"hkiz2Nv927cYGrA86\",\"mfsaETo7uA4x5vqLD\",\"iojEnnY9FsMfYzp6f\",\"2PufnQcsHsfymufX3\",\"AasGs8AeX9Lcb9xJn\",\"LQxof8pGabGuWP7Gn\",\"fznzd3qnvtbFkkizz\",\"HqmxnQJM66Y57twhn\",\"T6iBEE2jp7f7iEF2P\",\"oBcs8GLX2ZFLXQy8y\",\"gKnWjDjwrJh7MK2df\",\"hnyhBFWwNCz9mDfSi\",\"Yp7uvStL97cC9fKkY\",\"aFYzioHvZPvPaunsg\",\"v4bNrz3kd5ZowfJGh\",\"NktzkEe4NYpHsjwps\",\"d8qtzoLB264iP8tdY\",\"rhS8qXRjZcpDXkwnE\",\"GTKsdeEihE636Le9i\",\"PNKQHXBQEWZ8x95M4\",\"iqmPb9JuJDgTFeR8Q\",\"Wi4H6ayKsNDWWQCG5\"],\"quality\":[5,5,5,3,1,4,5,5,5,5,2,4,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"a777e8chPvJkY3tKa\",\"quality\":4.153846153846154,\"family\":[{\"_id\":\"99yALJGy4ZmFzaqvr\",\"language\":\"java\"},{\"_id\":\"WZMZEQoaNuhXovauT\",\"language\":\"javascript\"},{\"_id\":\"MoetR7Gy56jDXTdAy\",\"language\":\"php\"},{\"_id\":\"72KukSssxk2eHrWqx\",\"language\":\"python3\"},{\"_id\":\"9s8mAbfYdGDTKqiye\",\"language\":\"ruby\"}]}}"]