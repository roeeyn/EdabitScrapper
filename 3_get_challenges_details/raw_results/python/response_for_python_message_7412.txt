a["{\"msg\":\"result\",\"id\":\"2414\",\"result\":{\"_id\":\"F4dSNMqPCa2QztPWw\",\"author\":\"Luis Pereira\",\"authorId\":\"aEm3Wvj2rFYRL8Lrb\",\"code\":\"def is_additive(n):\\n\\t\",\"difficulty\":4.133333333333334,\"familyId\":\"NuCdJaLB2ERWzdY6y\",\"instructions\":\"Write a function that checks if a given sequence of digits is an _additive sequence_, i.e. if the sequence can be split into a sequence of numbers where each number is the sum of the previous two numbers.\\n\\nFor example:\\n\\n```\\n\\\"12988110101891\\\"\\n```\\n\\n... is an additive sequence since it can be split into the sequence:\\n\\n```\\n129, 881, 1010, 1891\\n```\\n\\n... and `129 + 881 = 1010, 881 + 1010 = 1891`.\\n\\n**Note:** A valid additive sequence should contain at least three numbers.\\n\\n### Examples\\n```\\nis_additive(\\\"112358\\\") ➞ True\\n# The digits can be split into an additive sequence: 1, 1, 2, 3, 5, 8.\\n# 1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8\\n\\nis_additive(\\\"129881000\\\") ➞ True\\n# Each number can contain 1 or more digits: 12, 988, 1000.\\n# 12 + 988 = 1000\\n\\nis_additive(\\\"12988110101891\\\") ➞ True\\n# 129 + 881 = 1010, 881 + 1010 = 1891\\n\\nis_additive(\\\"123456789\\\") ➞ False\\n\\nis_additive(\\\"300045007500\\\") ➞ True\\n```\\n\\n### Notes\\n- The string will contain only digits `0, 1, 2, ... 9`.\\n- Numbers in the additive sequence **cannot** have leading zeros, so the sequences `1, 2, 03` and `1, 02, 3` are invalid.\",\"isHidden\":false,\"lab\":\"Test.assert_equals(is_additive('112358'), True)\\nTest.assert_equals(is_additive('129881000'), True)\\nTest.assert_equals(is_additive('12988110101891'), True)\\nTest.assert_equals(is_additive('123456789'), False)\\nTest.assert_equals(is_additive('123'), True)\\nTest.assert_equals(is_additive('10112132'), True)\\nTest.assert_equals(is_additive('5566121186'), False)\\nTest.assert_equals(is_additive('5566121188'), False)\\nTest.assert_equals(is_additive('5566121187'), True)\\nTest.assert_equals(is_additive('1000150025004000'), True)\\nTest.assert_equals(is_additive('10001501150'), True)\\nTest.assert_equals(is_additive('10001500250'), False)\\nTest.assert_equals(is_additive('4812203243'), False)\\nTest.assert_equals(is_additive('1758998571116160'), True)\\nTest.assert_equals(is_additive('1894587012189458703189458705378917408'), True)\\nTest.assert_equals(is_additive('1000100010100010001010101010'), True)\\nTest.assert_equals(is_additive('189458701218945873189458705378917408'), False)\\nTest.assert_equals(is_additive('10001000101000100010010101010'), False)\\nTest.assert_equals(is_additive('991819919'), True)\\nTest.assert_equals(is_additive('99182746'), False)\\nTest.assert_equals(is_additive('58013'), False)\\nTest.assert_equals(is_additive('0369'), False, \\\"Starts with '0'\\\")\\nTest.assert_equals(is_additive('34'), False, \\\"Too short\\\")\\nTest.assert_equals(is_additive(''), False)\\n\\n# Original JavaScript challenge by DanielosC\",\"language\":\"python3\",\"summary\":\"Write a function that checks if a given sequence of digits is an additive sequence, i.e. if the sequence can be split into a sequence of numbers where each number is the sum of the previous two numbers.\\n\\nFor example:\\n\\n\\\"12988110101891\\\"\\n\\n... is an additive sequence since it can be split into the sequence:\\n\\n129, 881, 1010, 1891\\n\\n... and 129 + 881 = 1010, 881 + 10\",\"tags\":[\"algebra\",\"algorithms\",\"math\",\"numbers\",\"validation\"],\"timestamp\":{\"$date\":1598912482831},\"title\":\"Additive Number\",\"stats\":{\"completed\":{\"total\":15,\"ratings\":[5,5,5,5,5,3,4,5,5,5,5,3,5,1,1],\"rators\":[\"aEm3Wvj2rFYRL8Lrb\",\"8WpvgSbQciTQWdd8T\",\"8PwfYqoDQFThzNtvf\",\"tAF9Gf6PiGogbZuWs\",\"mDWNyaaQ9hvPCRzSd\",\"s5M5RvgqR9BhB9JoC\",\"eHcgvkTGsH7ZziqBo\",\"iS5BrkGLzJyPK7nKt\",\"8sNv5PTHa7XQ8bNqR\",\"yjtdwc2AC4jA2RWtn\"],\"quality\":[]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":0,\"family\":[{\"_id\":\"m4tEei3DxgME4xuvK\",\"language\":\"cpp\"},{\"_id\":\"sF9a4Dkh5yiWtbJd6\",\"language\":\"javascript\"},{\"_id\":\"F4dSNMqPCa2QztPWw\",\"language\":\"python3\"},{\"_id\":\"ZpdEWoFNTr5bEXuCQ\",\"language\":\"ruby\"}]}}"]