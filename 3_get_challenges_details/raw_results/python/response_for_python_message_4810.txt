a["{\"msg\":\"result\",\"id\":\"1121\",\"result\":{\"_id\":\"nqNWZ7ayzZoRMZu8Z\",\"author\":\"Werdna\",\"authorId\":\"buX4mCQhtXCfBjeno\",\"code\":\"def avg_note(students):\\n\\t\",\"difficulty\":1.5857142857142856,\"familyId\":\"neAYSfiZB2jY9qNne\",\"instructions\":\"Create a function that takes a list of dictionary like `{ name: \\\"John\\\", notes: [3, 5, 4]}` and returns a list of dictionary  like `{ name: \\\"John\\\", avgNote: 4 }`. If student has no notes (an empty array) then  `avgNote` is zero.\\n\\n### Examples\\n```\\n[\\n  { name: \\\"John\\\", notes: [3, 5, 4]}\\n] ➞ [\\n  { name: \\\"John\\\", avgNote: 4 }\\n]\\n```\\n\\n### Notes\\nRound the `avgNote` to a whole number.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(avg_note([{ 'name': \\\"John\\\", 'notes': [2, 4, 5]}, { 'name': \\\"Mich\\\", 'notes': [1, 3, 5]}]),\\n[{ 'name': \\\"John\\\", 'avgNote': 4 }, {'name': 'Mich', 'avgNote': 3}])\\nTest.assert_equals(avg_note([{ 'name': \\\"Paul\\\", 'notes': []}, {'name': 'Victoria', 'notes': [3, 5, 2, 1]}]),\\n[{ 'name': \\\"Paul\\\", 'avgNote': 0 }, {'name': 'Victoria', 'avgNote': 3}])\\nTest.assert_equals(avg_note([{ 'name': \\\"Victor\\\", 'notes': [1, 3, 5]}]), [{ 'name': \\\"Victor\\\", 'avgNote': 3}])\\nTest.assert_equals(avg_note([{ 'name': \\\"Brandy\\\", 'notes': [2, 4, 1]}]), [{ 'name': \\\"Brandy\\\", 'avgNote': 2 }])\\nTest.assert_equals(avg_note([{ 'name': \\\"Vicky\\\", 'notes': [5, 4]}, { 'name': \\\"Sanders\\\", 'notes': [4, 3, 4]}]), \\n[{ 'name': \\\"Vicky\\\", 'avgNote': 4 }, {'name': 'Sanders', 'avgNote': 4}])\\nTest.assert_equals(avg_note([{ 'name': \\\"Marcus\\\", 'notes': [1, 1, 1]}]), [{ 'name': \\\"Marcus\\\", 'avgNote': 1 }])\\nTest.assert_equals(avg_note([{ 'name': \\\"Solo\\\", 'notes': []}]), [{ 'name': \\\"Solo\\\", 'avgNote': 0 }])\\n\\n# Original challenge created by Bartosz Cytrowski.\",\"language\":\"python3\",\"quality\":4.428571428571429,\"summary\":\"Create a function that takes a list of dictionary like { name: \\\"John\\\", notes: [3, 5, 4]} and returns a list of dictionary  like { name: \\\"John\\\", avgNote: 4 }. If student has no notes (an empty array) then  avgNote is zero.\\n\\nExamples\\n[\\n  { name: \\\"John\\\", notes: [3, 5, 4]}\\n] ➞ [\\n  { name: \\\"John\\\", avgNote: 4 }\\n]\\n\\nNotes\\nRound the avgNote to a whole number.\",\"tags\":[\"arrays\",\"objects\"],\"timestamp\":{\"$date\":1608640276967},\"title\":\"Get Students with Names and Notes Average\",\"stats\":{\"completed\":{\"total\":86,\"ratings\":[2,2,2,2,2,2,3,2,2,2,2,2,2,2,3,3,3,0,1,3,2,1,0,2,0,1,1,3,2,2,0,2,0,1,3,0,1,2,2,1,2,0,2,2,2,2,2,5,0,2,0,2,0,0,2,2,0,2,2,2,0,2,1,1,2,1,2,2,1,0],\"quality\":[5,1,4,5,5,5,5,5,5,5,4,3,5,5],\"rators\":[\"buX4mCQhtXCfBjeno\",\"8PwfYqoDQFThzNtvf\",\"Yp7uvStL97cC9fKkY\",\"p8qqFdJ3FSk5x9z3G\",\"oBcs8GLX2ZFLXQy8y\",\"gXTAie79kiw28tx5u\",\"55RQznnuTGpsj3EXd\",\"HF28xZKSLM9wEuqNg\",\"s5M5RvgqR9BhB9JoC\",\"gJYuGdkXEWWmGRLzu\",\"w2HhxvSLmDhaGCAjE\",\"hnyhBFWwNCz9mDfSi\",\"iS5BrkGLzJyPK7nKt\",\"Jqk2uJZZxEv5wZFze\",\"fSQSHjW3e72MrWxbD\",\"xn7uGNKeAwPEkP9oA\",\"yjtdwc2AC4jA2RWtn\",\"cAP3n5NY64uoMwzRR\",\"mmt7jwqbmSjzRSvqh\",\"GGdmhAvxXhqhhibJN\",\"q2tzvkrLASvSjkek9\",\"vSaStog7MuTJtm2Dh\",\"Xk2g4CNFAnYcvxiSr\",\"n2BRY9X8899dcG8Bw\",\"u5u2YpHXiNgzDNJdX\",\"3LiSLdtN58n46NEqg\",\"MS4DrZX57uEzsCLnw\",\"8BFSTCnoe2QggN64c\",\"nc7bRhkxgKyqusYe3\",\"T2vhHPhRR96hRizq8\",\"fRfRrzsEDETovTDzT\",\"6cBhq3Nhk8MTm37JL\",\"sR4sbdgq88MeWE37y\",\"fBqQjriC4QEtFNxFe\",\"sbJcFfQjQ59Wfg4Cd\",\"yZd7TwALSKAqEX7tS\",\"PXAcsKkssS2yLyDv2\",\"eYfPWvZwnJQkHbSTK\",\"QRv96jmNaYsWkxQEG\",\"gb9rvGus2Jv7bjZSs\",\"YcCLwitFMAEJSnxAW\",\"cR3ibTMxLyEdDFCHY\",\"qAby4AWXmTNeusvg3\",\"FEYpu9RWysAgW3XnP\",\"zd9FLSzsGz3evKafy\",\"8JyqsSbN2FJXPr3cw\",\"iojEnnY9FsMfYzp6f\",\"eMuCpJ2spXWkJjWNz\",\"Ds7L5bksw2QRHjrKL\",\"J3upzLHuEwXH7Z2hx\",\"bvmTE46bfcM4ogj34\",\"XP4pRYeYiX9K4ejpW\",\"J5T8gZqiZXFuFDTQ7\",\"o4ixjQGSaYqA2JoM4\",\"DEDniTrstQYGounXT\",\"CHvzhtXnv8HTbPQ56\",\"AasGs8AeX9Lcb9xJn\",\"5HCu9Ydd86QgHDRNP\",\"AJexRBN9cYQmqvYu6\",\"HqmxnQJM66Y57twhn\",\"8LqTJugTk5Sn2ZAS7\",\"aEm3Wvj2rFYRL8Lrb\",\"T6iBEE2jp7f7iEF2P\",\"ey3CASd6Je5LEJzfB\",\"mvJBakQ35CWAnbbEZ\",\"sHjfbGQGLHE6JR6qu\",\"tAF9Gf6PiGogbZuWs\",\"yod5YhKtPqw2GfG9B\",\"BrTDhPJcACL2bsrpJ\",\"dzS6WBTMHyFEag6Fp\",\"2PufnQcsHsfymufX3\",\"4Lwjr34ypKNQNQCar\",\"mxX4rH5ELYkdZ2Mbw\",\"MKT7khMBGXzA22ykf\",\"3nied3n8KG8RSNixH\",\"4TmgHkn5vqyHK3sYC\",\"9pzFiFK3ANLjQfnr2\",\"yr822PZmmiDDenxpB\",\"d8qtzoLB264iP8tdY\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"aZiwEFEdFvWoBvDWS\",\"language\":\"javascript\"},{\"_id\":\"nqNWZ7ayzZoRMZu8Z\",\"language\":\"python3\"},{\"_id\":\"nPQ8C9f8przMjMQ4d\",\"language\":\"ruby\"}]}}"]