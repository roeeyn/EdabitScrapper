a["{\"msg\":\"result\",\"id\":\"1342\",\"result\":{\"_id\":\"wEr6R9kc5oG88FRYy\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def get_frame(w, h, ch):\\n\\t\",\"difficulty\":2.011406844106464,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"pFAiBwQ6knD8YTyYN\",\"instructions\":\"Create a function that takes the **width**, **height** and **character** and returns a picture frame as a 2D list.\\n\\n### Examples\\n```\\nget_frame(4, 5, \\\"#\\\") ➞ [\\n  [\\\"####\\\"],\\n  [\\\"#  #\\\"],\\n  [\\\"#  #\\\"],\\n  [\\\"#  #\\\"],\\n  [\\\"####\\\"]\\n]\\n# Frame is 4 characters wide and 5 characters tall.\\n\\n\\nget_frame(10, 3, \\\"*\\\") ➞ [\\n  [\\\"**********\\\"],\\n  [\\\"*        *\\\"],\\n  [\\\"**********\\\"]\\n]\\n# Frame is 10 characters and wide and 3 characters tall.\\n\\n\\nget_frame(2, 5, \\\"0\\\") ➞ \\\"invalid\\\"\\n# Frame's width is not more than 2.\\n```\\n\\n### Notes\\n- Remember the gap.\\n- Return `\\\"invalid\\\"` if **width** or **height** is *2 or less* (can't put anything inside).\",\"isHidden\":false,\"lab\":\"Test.assert_equals(get_frame(3, 3, \\\"0\\\"), [\\n\\t[\\\"000\\\"],\\n\\t[\\\"0 0\\\"],\\n\\t[\\\"000\\\"]\\n])\\n\\nTest.assert_equals(get_frame(4, 5, \\\"#\\\"), [\\n\\t[\\\"####\\\"],\\n\\t[\\\"#  #\\\"],\\n\\t[\\\"#  #\\\"],\\n\\t[\\\"#  #\\\"],\\n\\t[\\\"####\\\"]\\n])\\n\\nTest.assert_equals(get_frame(10, 3, \\\"*\\\"), [\\n\\t[\\\"**********\\\"],\\n\\t[\\\"*        *\\\"],\\n\\t[\\\"**********\\\"]\\n])\\n\\nTest.assert_equals(get_frame(2, 5, \\\"0\\\"), \\\"invalid\\\")\\n\\n# A right mess\\nTest.assert_equals(get_frame(1, 6, \\\"[\\\"), \\\"invalid\\\")\\nTest.assert_equals(get_frame(5, 4, \\\"z\\\"), [[\\\"zzzzz\\\"], [\\\"z   z\\\"], [\\\"z   z\\\"], [\\\"zzzzz\\\"]])\\nTest.assert_equals(get_frame(3, 4, \\\"A\\\"), [[\\\"AAA\\\"], [\\\"A A\\\"], [\\\"A A\\\"], [\\\"AAA\\\"]])\\nTest.assert_equals(get_frame(10, 2, \\\"`\\\"), \\\"invalid\\\")\\nTest.assert_equals(get_frame(10, 4, \\\"l\\\"), [[\\\"llllllllll\\\"], [\\\"l        l\\\"], [\\\"l        l\\\"], [\\\"llllllllll\\\"]])\\nTest.assert_equals(get_frame(5, 9, \\\"Z\\\"), [[\\\"ZZZZZ\\\"], [\\\"Z   Z\\\"], [\\\"Z   Z\\\"], [\\\"Z   Z\\\"], [\\\"Z   Z\\\"], [\\\"Z   Z\\\"], [\\\"Z   Z\\\"], [\\\"Z   Z\\\"], [\\\"ZZZZZ\\\"]])\\nTest.assert_equals(get_frame(4, 6, \\\"J\\\"), [[\\\"JJJJ\\\"], [\\\"J  J\\\"], [\\\"J  J\\\"], [\\\"J  J\\\"], [\\\"J  J\\\"], [\\\"JJJJ\\\"]])\\nTest.assert_equals(get_frame(3, 4, \\\"R\\\"), [[\\\"RRR\\\"], [\\\"R R\\\"], [\\\"R R\\\"], [\\\"RRR\\\"]])\\nTest.assert_equals(get_frame(3, 6, \\\"Q\\\"), [[\\\"QQQ\\\"], [\\\"Q Q\\\"], [\\\"Q Q\\\"], [\\\"Q Q\\\"], [\\\"Q Q\\\"], [\\\"QQQ\\\"]])\\nTest.assert_equals(get_frame(3, 3, \\\"^\\\"), [[\\\"^^^\\\"], [\\\"^ ^\\\"], [\\\"^^^\\\"]])\\nTest.assert_equals(get_frame(5, 2, \\\"F\\\"), \\\"invalid\\\")\\nTest.assert_equals(get_frame(3, 8, \\\"J\\\"), [[\\\"JJJ\\\"], [\\\"J J\\\"], [\\\"J J\\\"], [\\\"J J\\\"], [\\\"J J\\\"], [\\\"J J\\\"], [\\\"J J\\\"], [\\\"JJJ\\\"]])\\nTest.assert_equals(get_frame(7, 10, \\\"`\\\"), [[\\\"```````\\\"], [\\\"`     `\\\"], [\\\"`     `\\\"], [\\\"`     `\\\"], [\\\"`     `\\\"], [\\\"`     `\\\"], [\\\"`     `\\\"], [\\\"`     `\\\"], [\\\"`     `\\\"], [\\\"```````\\\"]])\\nTest.assert_equals(get_frame(6, 6, \\\"v\\\"), [[\\\"vvvvvv\\\"], [\\\"v    v\\\"], [\\\"v    v\\\"], [\\\"v    v\\\"], [\\\"v    v\\\"], [\\\"vvvvvv\\\"]])\\nTest.assert_equals(get_frame(7, 2, \\\"?\\\"), \\\"invalid\\\")\\nTest.assert_equals(get_frame(3, 10, \\\":\\\"), [[\\\":::\\\"], [\\\": :\\\"], [\\\": :\\\"], [\\\": :\\\"], [\\\": :\\\"], [\\\": :\\\"], [\\\": :\\\"], [\\\": :\\\"], [\\\": :\\\"], [\\\":::\\\"]])\\nTest.assert_equals(get_frame(6, 7, \\\"N\\\"), [[\\\"NNNNNN\\\"], [\\\"N    N\\\"], [\\\"N    N\\\"], [\\\"N    N\\\"], [\\\"N    N\\\"], [\\\"N    N\\\"], [\\\"NNNNNN\\\"]])\\nTest.assert_equals(get_frame(7, 5, \\\"h\\\"), [[\\\"hhhhhhh\\\"], [\\\"h     h\\\"], [\\\"h     h\\\"], [\\\"h     h\\\"], [\\\"hhhhhhh\\\"]])\\nTest.assert_equals(get_frame(7, 5, \\\"!\\\"), [[\\\"!!!!!!!\\\"], [\\\"!     !\\\"], [\\\"!     !\\\"], [\\\"!     !\\\"], [\\\"!!!!!!!\\\"]])\\nTest.assert_equals(get_frame(2, 3, \\\"F\\\"), \\\"invalid\\\")\\nTest.assert_equals(get_frame(1, 2, \\\"E\\\"), \\\"invalid\\\")\\nTest.assert_equals(get_frame(6, 3, \\\"j\\\"), [[\\\"jjjjjj\\\"], [\\\"j    j\\\"], [\\\"jjjjjj\\\"]])\\nTest.assert_equals(get_frame(4, 7, \\\"J\\\"), [[\\\"JJJJ\\\"], [\\\"J  J\\\"], [\\\"J  J\\\"], [\\\"J  J\\\"], [\\\"J  J\\\"], [\\\"J  J\\\"], [\\\"JJJJ\\\"]])\\nTest.assert_equals(get_frame(8, 3, \\\"`\\\"), [[\\\"````````\\\"], [\\\"`      `\\\"], [\\\"````````\\\"]])\\nTest.assert_equals(get_frame(6, 8, \\\"V\\\"), [[\\\"VVVVVV\\\"], [\\\"V    V\\\"], [\\\"V    V\\\"], [\\\"V    V\\\"], [\\\"V    V\\\"], [\\\"V    V\\\"], [\\\"V    V\\\"], [\\\"VVVVVV\\\"]])\\nTest.assert_equals(get_frame(6, 2, \\\"+\\\"), \\\"invalid\\\")\\nTest.assert_equals(get_frame(4, 1, \\\"l\\\"), \\\"invalid\\\")\\nTest.assert_equals(get_frame(4, 8, \\\"L\\\"), [[\\\"LLLL\\\"], [\\\"L  L\\\"], [\\\"L  L\\\"], [\\\"L  L\\\"], [\\\"L  L\\\"], [\\\"L  L\\\"], [\\\"L  L\\\"], [\\\"LLLL\\\"]])\\nTest.assert_equals(get_frame(10, 7, \\\"C\\\"), [[\\\"CCCCCCCCCC\\\"], [\\\"C        C\\\"], [\\\"C        C\\\"], [\\\"C        C\\\"], [\\\"C        C\\\"], [\\\"C        C\\\"], [\\\"CCCCCCCCCC\\\"]])\\nTest.assert_equals(get_frame(4, 6, \\\"T\\\"), [[\\\"TTTT\\\"], [\\\"T  T\\\"], [\\\"T  T\\\"], [\\\"T  T\\\"], [\\\"T  T\\\"], [\\\"TTTT\\\"]])\\nTest.assert_equals(get_frame(9, 1, \\\"t\\\"), \\\"invalid\\\")\\nTest.assert_equals(get_frame(9, 7, \\\"&\\\"), [[\\\"&&&&&&&&&\\\"], [\\\"&       &\\\"], [\\\"&       &\\\"], [\\\"&       &\\\"], [\\\"&       &\\\"], [\\\"&       &\\\"], [\\\"&&&&&&&&&\\\"]])\\nTest.assert_equals(get_frame(3, 1, \\\"(\\\"), \\\"invalid\\\")\\nTest.assert_equals(get_frame(10, 8, \\\"<\\\"), [[\\\"<<<<<<<<<<\\\"], [\\\"<        <\\\"], [\\\"<        <\\\"], [\\\"<        <\\\"], [\\\"<        <\\\"], [\\\"<        <\\\"], [\\\"<        <\\\"], [\\\"<<<<<<<<<<\\\"]])\\nTest.assert_equals(get_frame(8, 6, \\\"O\\\"), [[\\\"OOOOOOOO\\\"], [\\\"O      O\\\"], [\\\"O      O\\\"], [\\\"O      O\\\"], [\\\"O      O\\\"], [\\\"OOOOOOOO\\\"]])\\nTest.assert_equals(get_frame(2, 2, \\\"T\\\"), \\\"invalid\\\")\\nTest.assert_equals(get_frame(4, 10, \\\"J\\\"), [[\\\"JJJJ\\\"], [\\\"J  J\\\"], [\\\"J  J\\\"], [\\\"J  J\\\"], [\\\"J  J\\\"], [\\\"J  J\\\"], [\\\"J  J\\\"], [\\\"J  J\\\"], [\\\"J  J\\\"], [\\\"JJJJ\\\"]])\\nTest.assert_equals(get_frame(7, 2, \\\"4\\\"), \\\"invalid\\\")\\nTest.assert_equals(get_frame(7, 4, \\\"~\\\"), [[\\\"~~~~~~~\\\"], [\\\"~     ~\\\"], [\\\"~     ~\\\"], [\\\"~~~~~~~\\\"]])\\nTest.assert_equals(get_frame(8, 3, \\\"=\\\"), [[\\\"========\\\"], [\\\"=      =\\\"], [\\\"========\\\"]])\\nTest.assert_equals(get_frame(3, 8, \\\"<\\\"), [[\\\"<<<\\\"], [\\\"< <\\\"], [\\\"< <\\\"], [\\\"< <\\\"], [\\\"< <\\\"], [\\\"< <\\\"], [\\\"< <\\\"], [\\\"<<<\\\"]])\\nTest.assert_equals(get_frame(7, 1, \\\"4\\\"), \\\"invalid\\\")\\nTest.assert_equals(get_frame(7, 3, \\\"o\\\"), [[\\\"ooooooo\\\"], [\\\"o     o\\\"], [\\\"ooooooo\\\"]])\\nTest.assert_equals(get_frame(8, 2, \\\"p\\\"), \\\"invalid\\\")\\nTest.assert_equals(get_frame(10, 9, \\\"&\\\"), [[\\\"&&&&&&&&&&\\\"], [\\\"&        &\\\"], [\\\"&        &\\\"], [\\\"&        &\\\"], [\\\"&        &\\\"], [\\\"&        &\\\"], [\\\"&        &\\\"], [\\\"&        &\\\"], [\\\"&&&&&&&&&&\\\"]])\\nTest.assert_equals(get_frame(8, 6, \\\"-\\\"), [[\\\"--------\\\"], [\\\"-      -\\\"], [\\\"-      -\\\"], [\\\"-      -\\\"], [\\\"-      -\\\"], [\\\"--------\\\"]])\\nTest.assert_equals(get_frame(5, 1, \\\"n\\\"), \\\"invalid\\\")\\nTest.assert_equals(get_frame(1, 6, \\\"r\\\"), \\\"invalid\\\")\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,3,2,3,2,2,0,1,3,4,3,3,1,0,1,2,3,3,2,1,1,1,2,4,3,2,2,1,2,2,1,3,0,2,1,2,3,2,1,2,3,1,1,1,3,2,2,2,2,3,3,3,4,2,2,1,2,1,2,3,2,2,3,1,0,2,2,3,3,2,1,2,3,2,1,2,2,1,2,3,3,3,0,1,2,3,3,2,2,1,3,2,2,3,2,2,2,3,2,2,1,1,2,3,2,3,3,3,1,3,1,3,3,1,3,0,3,0,2,2,2,1,3,2,3,3,0,2,2,2,0,2,3,3,1,2,2,3,3,2,3,3,2,3,1,2,3,3,2,1,1,2,3,0,3,1,3,1,3,3,3,3,0,1,3,1,3,0,3,3,3,1,0,2,1,2,0,3,3,2,3,3,1,2,1,2,2,2,3,2,2,1,3,1,2,3,1,0,2,0,0,3,0,0,3,2,3,1,2,2,1,3,3,2,2,0,3,2,2,1,1,3,1,3,1,3,2,3,3,3,3,3,3,2,3,2,3,0,0,2,3,2,3,3,2,3,3,3],\"rators\":[\"2innwjWqxJHo4eRGh\",\"tAF9Gf6PiGogbZuWs\",\"s5M5RvgqR9BhB9JoC\",\"kBmhcwkCqxiy4GwiZ\",\"Jqk2uJZZxEv5wZFze\",\"wvaRmNEgMPcpQpr9G\",\"8DbqjktpvqcXo6vHw\",\"MgwZXHsHk6rKhFxoT\",\"gb9rvGus2Jv7bjZSs\",\"NRpQ962SxLoMb7ovD\",\"8JyqsSbN2FJXPr3cw\",\"jNE5AHcJQWXz7efuP\",\"M44nifmWzt3wtYyJx\",\"CgtPcpaMJC2Ls2nM2\",\"cRpaCxYRmGcN3Nsoj\",\"2fxapKr8XGdNeaKi2\",\"kQ3QhjsGsLnCKFZZN\",\"iMHrN3Wiefh9Ame38\",\"CsiyCod6cnF4hE2gw\",\"J5T8gZqiZXFuFDTQ7\",\"yKttxy9JGn5Jzwuj6\",\"zQ7vxc2qQS47js8iY\",\"C4QntmkYtB89GNtpd\",\"Z85ajWfZ4jDPkbvR4\",\"3ECpdeExhBmkYXtba\",\"ZXRMRAJNP6eseLdbR\",\"QnPD4Sv6W4LHc2Qng\",\"aCNWav8S8Try9RkC6\",\"CEd9tLdXeDeNHSzys\",\"vgTvCCxgvbCTDvaRT\",\"yoYQqaY6GszuTkNSs\",\"CuY5BaTCcu7Mp9tDu\",\"AasGs8AeX9Lcb9xJn\",\"qJZsi5rhRnWA38FbA\",\"xowjbn5yEv7c93axA\",\"23oi2a3vQwhtLEbSj\",\"Hryvbd5DHrRZPSeM8\",\"orFLgPDw9H5MDzmwo\",\"F2aeZ4zqupp7a8SkW\",\"DMH5qWYAScj9hNaRv\",\"BeFnbPbMnAM2SjBdZ\",\"sz8ufn9i8zeiGWpAy\",\"fBqQjriC4QEtFNxFe\",\"JYbyC7EiD3PuwuxEv\",\"Q2q7wd5e5cfCrwPxq\",\"2xB3aoGbxxxcMEJwe\",\"DXBbJKYFTBi2pxR7c\",\"4CFzv558qbGcpQwc4\",\"pkQBaSzukotPEXmrD\",\"yZvzB3qFb8pkHy4dg\",\"boMXxa5zxP6yJHTje\",\"ydEdzuCCZt4yny9Rq\",\"ojK4Qohfj5Ds2bY9z\",\"Q7Qy8oL8agXcYFDyP\",\"8PwfYqoDQFThzNtvf\",\"aoRaYQZEQPrJT22wX\",\"dZGNAJXB24zNh2tsD\",\"7hzSvcYdq6QjoRnJY\",\"2HMFHov8LPxFRTKig\",\"FQDwscZZbqMZNcazT\",\"5uA8xmgifmiJrqbzy\",\"wqSZScRGiTeJJddFZ\",\"aM8Z68DshLj79wFSq\",\"sJWTa7iWeRoRtqJ8N\",\"v3fjGuc7Pq4yjFygS\",\"wsHhtbDh6ExixZ7d5\",\"YCzkY5kKEtb9qcYgy\",\"7J3QpGM4fsRcGnNPR\",\"ATnFMWuFkWpaEoQqQ\",\"kfG9deramoXyqrP5L\",\"AJwBauGHyrbqgDYce\",\"aEm3Wvj2rFYRL8Lrb\",\"Jsrfs8nEy37mJxbqD\",\"C59TiCYNYsN5yfeZb\",\"v9KtC8YLbMWmXiW2H\",\"vWgBJaEtcu3XoYuer\",\"K3RacTvkWHLfzKF8i\",\"knT3HJMb87iKpjqdM\",\"mDWNyaaQ9hvPCRzSd\",\"fXfjsrGcdwpy7hedt\",\"cR3ibTMxLyEdDFCHY\",\"8LfTheFzvicameoz9\",\"vLrq4dEDMM2wd68Dc\",\"9pzFiFK3ANLjQfnr2\",\"QaDeBLhPTTAhh9ifu\",\"xvrvHfqw6iSwuwc5b\",\"wZoxzQDbso9SMAPkY\",\"RT2F5THkSKcdmPgBb\",\"rdDe4sQWEbJAWeXB5\",\"Kwj9nwCXCLL7s49KE\",\"qgYikiD7WB8JciTdo\",\"n2BRY9X8899dcG8Bw\",\"eMuCpJ2spXWkJjWNz\",\"JQ5uoxA4WZgN6HyJk\",\"YRstQuthRkFeBiXug\",\"dfiq4QXp6ZofGxPH5\",\"Yp7uvStL97cC9fKkY\",\"44dAzThMuyGZ5StXB\",\"ZzYjack6nKZZoq3W3\",\"ZNnsMeNkdDhHjSrZb\",\"3CddxEkvCvRoCLQ7b\",\"gJYuGdkXEWWmGRLzu\",\"3LiSLdtN58n46NEqg\",\"3Zceb8GudqAG3onG3\",\"qaR8DnWrTk8Mus5Q2\",\"xXxcBvT3poSuSCgBN\",\"T2QhZRhybEKeJTb44\",\"kYWb8BwpKwunQkxeX\",\"aFNK5j4AQkjtbBsQH\",\"EjbDDFRECrzQDkzrX\",\"QjCZjs9vt6TGGLSBk\",\"yYxPzFqBgtQ9fsyHM\",\"dHZqT6h4JMwk5fPC8\",\"azQuTr5LY59adhfkx\",\"XsYhWtDMoky3nAhjd\",\"FS78GK2Ysu7u8ndMs\",\"dXMbkgQFoN37BhruB\",\"So6PHm74mfJuY2WTs\",\"zChStAhRfotvGC6C5\",\"sbJcFfQjQ59Wfg4Cd\",\"KRmxvA4mWgfKvHmYN\",\"c3nsyfKKeQGxp6sKb\",\"DrkR35NqnP9NDLbq6\",\"3pxHTZBsv7MKzFG6Y\",\"cTo3czssohzGLQQa7\",\"5aZnA8Br3u7Wf5ENg\",\"GM2X83qnuLXTHe5zA\",\"4rwxLqLs2mNZNg8NB\",\"HF28xZKSLM9wEuqNg\",\"Nua6T3dBurBy3Qfg9\",\"MKT7khMBGXzA22ykf\",\"H325N3oYrYJ7jGDrG\",\"hnyhBFWwNCz9mDfSi\",\"Ti5BF4jnruwNNzHY8\",\"sQEmZcHq4fk2Refuv\",\"a777e8chPvJkY3tKa\",\"66a9xX73nmTEuKs9k\",\"yr822PZmmiDDenxpB\",\"5nY48krepaT4a4QTN\",\"RErqK2yM94wYyD2hk\",\"W5TajitmCyxz87zAC\",\"LjoNTyGEMfBpMHHus\",\"QkbpyExhGA8ErJWhk\",\"hfSzpNbjezghfCJH9\",\"ENsSYogEHHeDSrFod\",\"mq2W9FwPgf4w75dZi\",\"DEDniTrstQYGounXT\",\"DpqiRAm2yo3W2x4HX\",\"3hSzE837A9SKsi5X4\",\"wS2o3x4nrsadtC3xP\",\"gkqp3EuvuiFXFAFtW\",\"QDrLtnBsA2LJfptvT\",\"gSFJPsMXnqAog3Q9f\",\"MoJmguQFX7yAAxNBb\",\"cxbQnktoNTzR9jcGe\",\"n8WJM5kdmPZbGoX7e\",\"kQH5b8MXJunh84Czq\",\"djeesDJQwNJay4RTe\",\"8TAYWzqJAkXq2MAba\",\"yJmwiykSNfLv9NqJ2\",\"bJxaKHJqR82EWw8Su\",\"f2BoqyCpgnmjEjLqx\",\"AioJKoJ5ogzeBL5ZH\",\"qPpQfR5KyDb5Y3EFf\",\"PytNZK9mNiRiZxPrm\",\"ByzrpqvwrBQLH53Fa\",\"hab8YixsXxe4CcZpP\",\"5qfcG54cbBC8ujxav\",\"vrjPm72dpymDySfar\",\"4hWjYDZsdixzvKbqQ\",\"iojEnnY9FsMfYzp6f\",\"TwKZ3835iFLog2RuQ\",\"hRiMXDZNAzyPd5tpt\",\"zZDaXBxMzTCBhNkgL\",\"iS5BrkGLzJyPK7nKt\",\"yjtdwc2AC4jA2RWtn\",\"ZrKCkX7xxGGZzauFW\",\"HqmxnQJM66Y57twhn\",\"ji5f27FPz4wRRF6Ls\",\"hCRwzCSbPr5thmCQQ\",\"H9KZi2cjt4FwH7qog\",\"55RQznnuTGpsj3EXd\",\"dEuJGZbBQkveCXEFk\",\"jBR47vA7HwAZqp4QA\",\"p8qqFdJ3FSk5x9z3G\",\"P7NmFbCJ5offXMRvB\",\"Ecg4m7srYGgZsb4Ck\",\"dkcmCKwqApX5jBggc\",\"pmgFEciNrd3ES9tuu\",\"Wv2vJnEj8ywNmARoF\",\"YcCLwitFMAEJSnxAW\",\"mG8HqKiAQFTdRZthG\",\"4fhjJBvLBWh6QeSih\",\"DNACg4rcgZsPtYGZ8\",\"b5zo7s6xrqWgQnPao\",\"JS3hNM3XXkxPdg3yk\",\"zvR7koBTGcaj5pJNQ\",\"tpxMgkGSHwBjS95Ta\",\"N6pmP89gXiKzYB5eg\",\"BrTDhPJcACL2bsrpJ\",\"qD2LrwaDrSdiybLKY\",\"ppxNdL4gjANz8oJLQ\",\"c2u7qfdaYxcyuydtu\",\"xn7uGNKeAwPEkP9oA\",\"8BFSTCnoe2QggN64c\",\"6F3Y6ZBAGNDGGTt9B\",\"axdSNLZpiCDF8RS6n\",\"DPi9QGLctq2y76KuE\",\"D62kvgDJ6asnsFaEw\",\"oBcs8GLX2ZFLXQy8y\",\"6MjSiiBLPcvXbXcaZ\",\"CLypXaZksY99mpRCm\",\"gXTAie79kiw28tx5u\",\"X5MqeHyPh6cSQCXnk\",\"9FCeFzjPA4jrQ7oHW\",\"uZJqBoqeZRX3RncAR\",\"dYPkStFnLvAMsHSzZ\",\"J3upzLHuEwXH7Z2hx\",\"XfFtLqxdeaZqATTgX\",\"QRv96jmNaYsWkxQEG\",\"7scpcTEp3SEx5Wjg9\",\"8N99kojRhfZXWNAk6\",\"nc7bRhkxgKyqusYe3\",\"bccs9koJxyQ9XNiLC\",\"kEkNyqFARK9YBrhRx\",\"cAP3n5NY64uoMwzRR\",\"89QKNck99CavLbneo\",\"7ifh8r4gvyYMhKB94\",\"5wCHxMQ5Km2bjqcGZ\",\"dB6s7p6pFMEyagbn2\",\"Nzi4RD5fxAJ4wjnNa\",\"txWQESwH8wCm3Z4gb\",\"qZQxPQ2kaNKAMesHT\",\"GGdmhAvxXhqhhibJN\",\"8nE8QHnFYsHCFebte\",\"T2vhHPhRR96hRizq8\",\"buX4mCQhtXCfBjeno\",\"q2tzvkrLASvSjkek9\",\"CHvzhtXnv8HTbPQ56\",\"qQQ4hCQpzitmHSkjS\",\"K6MfKMytoJJuSGewP\",\"2QziknsznNeMPRh3g\",\"RTDx9axf52kxhFjwZ\",\"rfyEkETeoS96QNH4e\",\"yyo6YLQN2of6fxp49\",\"FEYpu9RWysAgW3XnP\",\"XujK3rHd3JcM9TLJy\",\"Gny5gn9ZMpjQXrzjh\",\"Wpn95NqWxncQrwNgz\",\"qAby4AWXmTNeusvg3\",\"ey3CASd6Je5LEJzfB\",\"2PufnQcsHsfymufX3\",\"DZoEMJpc7bbAaaPHr\",\"CTKmXtrqDYqJBnuy8\",\"xfftcHHe5riRf4T93\",\"zd9FLSzsGz3evKafy\",\"dJzNF59j2p8jWZxiQ\",\"AQSqD9oNv2uPfxZCR\",\"zMfBAYDE7ZaoefhJa\",\"PTDFuxAzou7W6asWt\",\"fbr22rabEJMfBp7vD\",\"MfKe55snfKsdnDejs\",\"hsrNYf3WbexXJKhCq\",\"u5u2YpHXiNgzDNJdX\",\"bvmTE46bfcM4ogj34\",\"PWgzeK859suojbrRx\",\"4Lwjr34ypKNQNQCar\",\"Ds7L5bksw2QRHjrKL\",\"dqwatKFAeGpjmf5dm\",\"T6iBEE2jp7f7iEF2P\",\"PC3pLs36zNzpRDSuE\",\"ghMkPtdFCpM6w8nax\",\"CZeLyDD2BQL3jrzzj\",\"oegsMgYbTKZZzPgWS\",\"o4ixjQGSaYqA2JoM4\",\"S6Sw7gxMuuSywRiY5\",\"H4LqzfSad6d4BCgwy\",\"rkSWGGPmrHZ5J3Ndc\",\"8sNv5PTHa7XQ8bNqR\",\"ctbThYbufFCYbRK4f\",\"d8qtzoLB264iP8tdY\",\"hkiz2Nv927cYGrA86\",\"4RY3zj9C2t8GGefhi\",\"a2Kmh6ekWqQQooHiQ\",\"nnqxwv4tWFRJ2FHYh\",\"etoxSpG4fGKThLozM\",\"XCnbSuZF8gdA7Lc8o\",\"kjvgTyRFyKHv44DcH\",\"jWbd7SYDzLPjc9EDh\",\"nkL2knkcNaiHCerW2\",\"RoGGD5cpHb4ftdLDv\",\"jCjCvyhqhpebkJn34\",\"MpfytGFYF77emJ3cT\",\"yod5YhKtPqw2GfG9B\",\"AFfw7cGg83uYk2Miy\",\"5HCu9Ydd86QgHDRNP\",\"mvJBakQ35CWAnbbEZ\",\"nkH3HfJXLMNcBMM79\",\"3KkyQm77zsew58Dc2\",\"rhS8qXRjZcpDXkwnE\",\"Qyfyyw6oC4EHAndzo\",\"jkbavR2ATFJcpmo8M\",\"PKwPdPoC8w32T8GtP\",\"i4MfM38aiCeFAiWtz\",\"JhX7jvtpwNyxcc39m\",\"DQskEvAv5KiJDPtGF\"],\"total\":341,\"quality\":[5,4,5,5,5,4,5,5,5,5,5,4,5,2,5,4,5,5,5,5,5,3,5,3,5,5,5,3,4,5,5,5,5,3,5,5,5,5,5,5,5,5,5,5,5,4,4,4]},\"flags\":0},\"summary\":\"Create a function that takes the width, height and character and returns a picture frame as a 2D list.\\n\\nExamples\\nget_frame(4, 5, \\\"#\\\") ➞ [\\n  [\\\"####\\\"],\\n  [\\\"#  #\\\"],\\n  [\\\"#  #\\\"],\\n  [\\\"#  #\\\"],\\n  [\\\"####\\\"]\\n]\\nFrame is 4 characters wide and 5 characters tall.\\n\\nget_frame(10, 3, \\\"*\\\") ➞ [\\n  [\\\"**\\\"],\\n  [\\\"*        *\\\"],\\n  [\\\"**\\\"]\\n]\\nFrame is 10 characters and wide and 3 character\",\"tags\":[\"arrays\",\"strings\",\"formatting\",\"loops\"],\"timestamp\":{\"$date\":1580056128659},\"title\":\"Creating a Picture Frame\",\"quality\":4.604166666666667,\"family\":[{\"_id\":\"RM7EgGwwFCWpSuaZ4\",\"language\":\"cpp\"},{\"_id\":\"YPGFhNeRdqAL8Qkim\",\"language\":\"csharp\"},{\"_id\":\"tu5oTshmsjJQcJjmZ\",\"language\":\"javascript\"},{\"_id\":\"wEr6R9kc5oG88FRYy\",\"language\":\"python3\"},{\"_id\":\"uKbruoeCEQcgoF4rk\",\"language\":\"ruby\"},{\"_id\":\"rDtEf6gnL8DQ8KHDi\",\"language\":\"swift\"}]}}"]