a["{\"msg\":\"result\",\"id\":\"1219\",\"result\":{\"_id\":\"LMJ6HEjMuLpTd6Zzs\",\"author\":\"Alessandro Manicone\",\"authorId\":\"AasGs8AeX9Lcb9xJn\",\"code\":\"import re\\n\\npattern = \\\"yourregularexpressionhere\\\"\",\"difficulty\":1.71,\"familyId\":\"7xnqFbWyxk6nuLZGf\",\"instructions\":\"A **named capturing group** will match \\\"x\\\" in `(?P<name>x)` and will store the match under the name `name`.\\n\\nLet's see an example. To extract the United States area code from a phone number, we could use:\\n\\n```\\ntxt = \\\"(214) 987-6482\\\"\\nm = re.match(\\\"\\\\((?P<area>\\\\d{3})\\\\)\\\", txt)\\n\\nm.group(\\\"area\\\") ➞ 214\\n```\\n\\nWrite a **regular expression** to match the year, month and day in a string. Store the matches in three groups named **year**, **month** and **day** respectively. All strings will be given in the following format `YYYY-MM-DD`.\\n\\n### Example\\n```\\ntxt = \\\"2020-04-18\\\"\\npattern = \\\"yourregularexpressionhere\\\"\\nm = re.search(pattern, txt)\\n\\nm.group(\\\"year\\\") ➞ \\\"2020\\\"\\nm.group(\\\"month\\\") ➞ \\\"04\\\"\\nm.group(\\\"day\\\") ➞ \\\"18\\\"\\n```\\n\\n### Notes\\n- You **don't** need to write a function, just the pattern.\\n- Do **not** remove `import re` from the code.\\n- Find more info on RegEx and named capturing groups in **Resources**.\\n- You can find all the challenges of this series in my [Basic RegEx](https://edabit.com/collection/8PEq2azWDtAZWPFe2) collection.\",\"isHidden\":false,\"lab\":\"date1 = '2020-04-18'\\ndate2 = '2019-10-30'\\ndate3 = '2020-01-01'\\ndate4 = '2020-11-14'\\ndate5 = '1947-01-30' \\ndate6 = '1955-04-12'\\n\\nmonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\\nm = re.search(pattern, date1)\\ntxt = 'This challenge was posted on {} {}, {}'.format(months[int(m.group('month')) - 1], m.group('day'), m.group('year'))\\nprint(txt)\\n\\nTest.assert_equals(txt, 'This challenge was posted on Apr 18, 2020')\\nfor i in [date2, date3, date4, date5, date6]:\\n\\tm = re.search(pattern, i)\\n\\tTest.assert_equals(m.group('year'), i.split('-')[0])\\n\\tTest.assert_equals(m.group('month'), i.split('-')[1])\\n\\tTest.assert_equals(m.group('day'), i.split('-')[2])\\n\\n# Note from the original\\n# Credits to https://javascript.info/regexp-groups\\n\\n# Translated from JavaScript.\\n# The RegEx series was originally posted by Isaac Pak.\",\"language\":\"python3\",\"summary\":\"A named capturing group will match \\\"x\\\" in (?Px) and will store the match under the name name.\\n\\nLet's see an example. To extract the United States area code from a phone number, we could use:\\n\\ntxt = \\\"(214) 987-6482\\\"\\nm = re.match(\\\"\\\\((?P\\\\d{3})\\\\)\\\", txt)\\n\\nm.group(\\\"area\\\") ➞ 214\\n\\nWrite a regular expression to match the year, month and day in a string. Store the match\",\"tags\":[\"regex\",\"formatting\"],\"timestamp\":{\"$date\":1587185688368},\"title\":\"RegEx XXII: Named Groups\",\"stats\":{\"completed\":{\"total\":129,\"ratings\":[2,2,2,2,2,2,0,1,2,1,2,1,1,1,3,3,2,2,2,1,3,1,0,3,2,2,2,1,3,3,2,2,1,3,1,0,1,2,3,1,2,2,2,2,2,2,0,1,0,0,0,2,1,2,2,3,0,4,2,1,1,1,2,2,2,2,2,2,2,3,1,2,2,2,2,1,0,1,0,3,2,2,5,2,1,2,2,2,1,2,3,2,2,2,2,1,2,2,0,1],\"rators\":[\"AasGs8AeX9Lcb9xJn\",\"aEm3Wvj2rFYRL8Lrb\",\"tAF9Gf6PiGogbZuWs\",\"TGWFzPMjW9KYd4QDC\",\"Jqk2uJZZxEv5wZFze\",\"jNvegJWCk5HCtEMbK\",\"8JyqsSbN2FJXPr3cw\",\"2fxapKr8XGdNeaKi2\",\"2QGRoQn2dRq3scu7k\",\"Yp7uvStL97cC9fKkY\",\"wT5gGgvjKc5wz59AQ\",\"DEDniTrstQYGounXT\",\"8PwfYqoDQFThzNtvf\",\"aP7JkkYer28YWrPvC\",\"pWD2YC5s4YRCxFc2i\",\"dHZqT6h4JMwk5fPC8\",\"gb9rvGus2Jv7bjZSs\",\"586FdBhazpwJfnRYR\",\"a777e8chPvJkY3tKa\",\"KdNDysEsy2TW5QRJ2\",\"hnyhBFWwNCz9mDfSi\",\"EjbDDFRECrzQDkzrX\",\"jL4y5fTJAMBjhZmko\",\"9pzFiFK3ANLjQfnr2\",\"YRstQuthRkFeBiXug\",\"Yp4Jtxj7pHqZjheN7\",\"yr822PZmmiDDenxpB\",\"KRmxvA4mWgfKvHmYN\",\"ZJYMYPmyQAJ5B863h\",\"vGRSrdg2F3NKqEP5e\",\"F7Wjz9XYYM7cojF4k\",\"yJmwiykSNfLv9NqJ2\",\"cnmj8mAbLcMnKaqLS\",\"7tbtTx6uxePv6eQwP\",\"R4SjTgDnpigJYDLyL\",\"iojEnnY9FsMfYzp6f\",\"CwXsu25ygLEwQbmQC\",\"XSt47ad5D5LLZSupD\",\"YcCLwitFMAEJSnxAW\",\"n2BRY9X8899dcG8Bw\",\"PTDFuxAzou7W6asWt\",\"MCw7uAcoWcSTBTmr3\",\"yjtdwc2AC4jA2RWtn\",\"Pe8vWpDHRuH9nSGKW\",\"HqmxnQJM66Y57twhn\",\"DJdsqmTeAGDwrgYoZ\",\"4597PD5mbXzHa3vdi\",\"ACEZh39brWjdGkZXb\",\"pscBduNyf8TDHe2Km\",\"Nb6LYPoQP6KJZt8mz\",\"8WpvgSbQciTQWdd8T\",\"BqT6sMHBAjkw4hjG6\",\"cxABox46qWvJRyidE\",\"pmgFEciNrd3ES9tuu\",\"mBtSsKTHdQniYAfsZ\",\"p8qqFdJ3FSk5x9z3G\",\"NNE5HNRXAkmhrWgyQ\",\"oBcs8GLX2ZFLXQy8y\",\"m6TC9gshrwufWqAYn\",\"oHbErJxjYJhD66d5w\",\"5Z4o2pWDzmbpw4JHJ\",\"tpxMgkGSHwBjS95Ta\",\"qD2LrwaDrSdiybLKY\",\"QNb9Rx8BJgCWn3qgR\",\"7eYSYKpM4i2N4NZ92\",\"J3upzLHuEwXH7Z2hx\",\"uN5t57RETi5y2z5W8\",\"c2u7qfdaYxcyuydtu\",\"H4abACFDH5t8CnnyH\",\"GkwzERyQx7gKRGipu\",\"LCZ6JTAhBZBmWLzm8\",\"QRv96jmNaYsWkxQEG\",\"incG8tH2dwThHg35f\",\"6MjSiiBLPcvXbXcaZ\",\"dYPkStFnLvAMsHSzZ\",\"FEYpu9RWysAgW3XnP\",\"DpnYcMphntjsQ96qg\",\"5XiuAqicKD4hBdu63\",\"6xTu4r8NMczBFvmtz\",\"DPi9QGLctq2y76KuE\",\"kAkLAF9T5McSxXJCT\",\"FRv5HToEaZ6iRM7T5\",\"ANbSYXiYsp4addoDq\",\"zd9FLSzsGz3evKafy\",\"RGMbFMZXJr7DhcAJy\",\"qdboeLdc42tMqYbpx\",\"StNu7DPyTgEStZsMY\",\"PXAcsKkssS2yLyDv2\",\"5S9nX4rKsnCcnv4Cz\",\"axdSNLZpiCDF8RS6n\",\"sY2MG4grWFhWiNqzT\",\"GGdmhAvxXhqhhibJN\",\"CTKmXtrqDYqJBnuy8\",\"QNC6ErTx4ca2H3rD7\",\"qAby4AWXmTNeusvg3\",\"AFfw7cGg83uYk2Miy\",\"Ds7L5bksw2QRHjrKL\",\"66a9xX73nmTEuKs9k\",\"s7PAdYARQvr8scq84\",\"J5T8gZqiZXFuFDTQ7\",\"JwkwCHcXthnGDsdFr\",\"bvmTE46bfcM4ogj34\",\"JKb5rhL6DKcCAypF9\",\"sbJcFfQjQ59Wfg4Cd\",\"97DthwdtrBLm2y2Yj\",\"BrTDhPJcACL2bsrpJ\",\"mvJBakQ35CWAnbbEZ\",\"rCrbqMiaGPgHYTNxu\",\"yod5YhKtPqw2GfG9B\",\"u5u2YpHXiNgzDNJdX\",\"ag8tcfPvJZWpRnwet\",\"MHiQx9E8rPgzJfsJy\",\"4Lwjr34ypKNQNQCar\",\"2PufnQcsHsfymufX3\",\"RfbjShbg8jmhyNtJh\",\"Wi4H6ayKsNDWWQCG5\",\"bNENiqqEDxM5a5JBf\",\"wrL4iX2CCSqDCCty3\",\"CHvzhtXnv8HTbPQ56\",\"3nied3n8KG8RSNixH\"],\"quality\":[5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,5,5,5,5,5,5,4,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":4.92,\"family\":[{\"_id\":\"8FG9myNKdmtdxWoNN\",\"language\":\"javascript\"},{\"_id\":\"LMJ6HEjMuLpTd6Zzs\",\"language\":\"python3\"}]}}"]