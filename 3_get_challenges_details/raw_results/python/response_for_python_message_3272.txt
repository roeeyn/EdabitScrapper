a["{\"msg\":\"result\",\"id\":\"359\",\"result\":{\"_id\":\"YKgzPFZKt9XHXQHAu\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def sum_found_indexes(lst, n):\\n\\t\",\"difficulty\":0.654054054054054,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"72GsPX85kwwNEg4Bv\",\"instructions\":\"Create a function which takes in a *list of numbers* and a *number to find*. Return the sum of every index in the list which **matches the chosen number**.\\n\\n### Examples\\n```\\nsum_found_indexes([0, 3, 3, 0, 0, 3], 3) ➞ 8\\n# The number 3 was found at indexes 1, 2 and 5.\\n# 8 = 1 + 2 + 5\\n\\nsum_found_indexes([1, 2, 3, 4, 5, 6], 3) ➞ 2\\n\\nsum_found_indexes([100, 100, 100, 100, 100], 100) ➞ 10\\n\\nsum_found_indexes([5, 10, 15, 20], 2) ➞ 0\\n```\\n\\n### Notes\\n`0` can be the result if no number in the list matches *or* if the only matching element is at index 0.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(sum_found_indexes([0, 3, 3, 0, 0, 3], 3), 8)\\nTest.assert_equals(sum_found_indexes([1, 2, 3, 4, 5, 6], 3), 2)\\nTest.assert_equals(sum_found_indexes([100, 100, 100, 100, 100], 100), 10)\\nTest.assert_equals(sum_found_indexes([5, 10, 15, 20], 2), 0)\\nTest.assert_equals(sum_found_indexes([5, 10, 15, 20], 5), 0)\\nTest.assert_equals(sum_found_indexes([2, 1, 7, 6, 3, 10, 6, 1, 3, 9, 1, 9, 3, 3, 9, 10, 4, 6, 3, 2, 5, 3, 0, 1, 0, 1, 9, 4, 8, 0, 5], 2), 19)\\nTest.assert_equals(sum_found_indexes([10, 9, 9, 3, 9, 2, 4, 5, 5, 10, 10, 2, 0, 8, 0, 6, 2, 1, 4, 5, 5, 0, 3, 1, 5, 3, 2, 9, 8, 3, 1, 7, 4, 3, 8, 6, 7, 1, 3, 1, 10, 7, 1, 8, 8, 1, 3, 3, 7, 0, 6, 8, 6, 2, 1, 4, 0, 4, 7, 2, 1, 5, 3, 9, 7, 7, 3, 10, 9, 7, 10, 6, 0, 0, 0, 6, 0, 1, 0, 2, 4, 1, 7, 10, 4, 10, 2, 1, 0, 9], 3), 371)\\nTest.assert_equals(sum_found_indexes([7, 10, 8, 2, 1, 2, 1, 7, 3, 10, 0, 6, 9, 3, 9, 9], 9), 41)\\nTest.assert_equals(sum_found_indexes([1, 10, 4, 9, 4, 6, 5, 5, 3, 3, 4, 9, 4, 10, 7, 1, 0, 5, 0, 1, 3, 7, 7, 7, 4, 2, 3, 10, 2, 9, 5, 1, 10, 5, 5, 2, 10, 2, 1, 8, 2, 3, 4, 1, 10, 7, 3, 8, 10, 4, 9, 10, 3, 2, 4, 10, 4, 8, 6], 2), 218)\\nTest.assert_equals(sum_found_indexes([9, 1, 5, 6, 9, 10, 6, 8, 8, 4, 8, 8, 2, 10, 5, 10, 3, 1, 0, 0, 4, 9, 7, 10, 7, 4, 2, 1, 3, 3, 10, 0, 10, 8, 0, 8, 2, 5, 2, 2, 0, 10, 6, 6, 1, 4, 8, 2, 5, 9, 5, 6, 3, 1, 10, 3, 8, 6, 8, 3, 4, 0, 3, 1, 6], 1), 205)\\nTest.assert_equals(sum_found_indexes([2, 7, 1, 9, 1, 4, 8, 1, 0, 4, 4, 5], 9), 3)\\nTest.assert_equals(sum_found_indexes([1, 9, 5, 7, 3, 6, 5, 10, 7, 9, 2, 1, 2, 9, 5, 1, 7, 3, 6, 2, 1, 6, 9, 8, 1, 2, 10, 3, 8, 9, 6, 7, 10, 8, 9, 10, 2, 2, 6, 7, 3, 9, 1, 2, 1, 3, 7, 5, 10], 7), 143)\\nTest.assert_equals(sum_found_indexes([5, 2, 8, 3, 9, 3, 8, 3, 7, 1, 4, 6, 5, 7, 1, 3, 3, 8, 6, 0, 3, 8, 6, 10, 5, 10, 2, 6, 8, 7, 0, 10, 0, 6, 8, 1, 6, 9, 8, 8, 6, 7, 9, 1, 8, 4, 3, 8, 5, 3, 2], 1), 101)\\nTest.assert_equals(sum_found_indexes([10, 10, 6, 10, 9, 9, 4, 0, 4, 1, 3, 4, 9, 6, 4, 5, 0, 1, 7, 8, 3, 4, 3, 3, 5, 1, 4, 7], 4), 86)\\nTest.assert_equals(sum_found_indexes([0, 2, 8, 1, 1, 8, 3, 9, 8, 10, 4, 9, 7, 9, 4, 5, 5, 7, 4, 3, 2, 5, 6, 10, 5, 4, 9, 4, 7, 3, 10, 10, 10, 6, 2, 0, 5, 8, 6, 4, 6, 7, 5, 2, 8, 7, 2, 6, 1, 9, 3, 5, 0, 0, 5, 6, 2, 8, 6, 0, 0, 8, 1, 1, 0], 6), 293)\\nTest.assert_equals(sum_found_indexes([10, 2, 5, 10, 1, 9, 10, 7, 7, 8, 4, 0, 7, 0, 9, 1, 0, 0, 3, 4, 5, 9, 10, 3, 1, 1, 9, 6, 7, 0, 8, 3, 4, 7, 0, 7, 7, 5, 3, 10, 3, 1, 1, 5, 5, 5, 1, 0, 10, 7, 3, 5, 1, 7, 1, 2, 1, 0, 7, 3, 2, 0, 0, 2, 3, 9, 6, 8, 0, 6, 0, 3, 0, 9, 10, 3, 1, 1, 3, 5, 1, 1, 8, 1, 3, 1, 6, 6, 3, 9, 7], 8), 188)\\nTest.assert_equals(sum_found_indexes([0, 9, 1, 8, 1, 4, 3, 7, 9, 0, 0, 4, 9, 10, 4, 7, 6, 3, 8, 7, 7, 8, 8, 5, 4, 3, 8, 3, 8, 7, 3, 1, 6, 9, 6, 6, 6, 8, 9, 9, 6, 5, 0, 1, 4, 0, 2, 1, 4, 8, 7, 5, 7, 3, 3, 2, 4, 8, 3, 0, 3, 6, 10, 8, 5, 2, 9, 10, 5, 10, 2, 1, 1, 3, 8, 0, 7, 5, 8, 1, 8, 6, 10, 8, 10, 4, 2, 6], 5), 324)\\nTest.assert_equals(sum_found_indexes([1, 9, 5, 5, 7, 5, 2, 4, 3, 9, 0, 5, 3, 2, 5, 9, 6, 9, 3], 1), 0)\\nTest.assert_equals(sum_found_indexes([5, 4, 10, 2, 5, 5, 5, 0, 5, 2, 8, 8, 5, 3], 5), 35)\\nTest.assert_equals(sum_found_indexes([4, 3, 2, 2, 4, 5, 5, 5, 1, 3, 8, 1, 8, 9, 0, 10], 9), 13)\\nTest.assert_equals(sum_found_indexes([1, 8, 2, 9, 1, 8, 4, 0, 10, 0, 6, 10, 9, 7, 9, 4, 5, 2, 7, 7, 8, 1, 6, 2, 6, 0, 2, 7, 4, 8, 10, 2, 0, 0, 1, 2, 9, 9, 10, 3, 10, 8, 8, 5, 9, 3, 9, 1, 5, 4, 6, 7, 6, 8, 3, 10, 5, 8, 9, 2, 1, 5, 4, 2, 8, 9, 1, 1, 9, 7, 4, 9, 7, 7, 0, 4, 10, 3, 2, 8, 9, 0, 9, 1, 2, 1, 3, 1], 9), 616)\\nTest.assert_equals(sum_found_indexes([6, 0, 7, 9, 2, 4, 0, 2, 9, 8, 6, 1, 2, 9, 2, 4, 2, 8, 3, 9, 9, 7, 3, 0, 9, 10, 9, 9, 3, 1, 2, 9, 6, 1, 4, 0, 2, 6, 9, 3, 3, 8, 3, 3, 5, 0, 2, 4, 10, 0, 1, 4, 3, 3, 2, 5, 6, 5, 0, 9, 0, 7, 4, 0, 3, 3, 7, 9, 3, 8, 7, 3, 4, 10, 5, 2, 7, 3, 2, 4, 1, 3, 5, 9, 0, 7, 10, 6, 6, 2, 1], 6), 310)\\nTest.assert_equals(sum_found_indexes([1, 5, 0, 4, 3, 0, 4, 8, 10, 10, 3, 2, 2, 0, 2, 10, 2, 1, 3, 6, 4, 3, 6, 6, 0, 4, 9, 6, 0, 4, 1, 7, 3, 4, 3, 4, 9, 4, 5, 4, 2, 0, 4, 4, 7, 7, 7, 5, 9, 6, 0, 1, 7, 6, 5, 6, 0, 8, 7, 0, 5, 5, 6, 5, 0, 8, 5, 8, 6, 1, 6, 5, 5, 4, 7, 3, 7, 0, 2, 1, 7, 10], 1), 246)\\nTest.assert_equals(sum_found_indexes([7, 8, 1, 2, 8, 6, 7, 10, 0, 4, 6, 9, 5, 10, 8, 2, 4, 9, 9, 7, 10, 2, 6, 9, 6, 5, 9, 1, 5, 7, 2, 7, 5, 3, 10, 2, 7], 5), 97)\\nTest.assert_equals(sum_found_indexes([4, 5, 3, 0, 9, 9, 7, 4, 6, 4, 7, 3, 1, 8, 3], 2), 0)\\nTest.assert_equals(sum_found_indexes([0, 1, 1, 9, 6, 5, 4, 5, 7, 4, 8, 6, 10, 6], 2), 0)\\nTest.assert_equals(sum_found_indexes([0, 10, 4, 4], 9), 0)\\nTest.assert_equals(sum_found_indexes([8, 6, 9, 3, 10, 6, 7, 5, 4, 8, 9, 9, 6, 8, 0, 1, 3, 3, 1, 4, 5, 7, 9, 9, 2, 9, 3, 7, 10, 8, 7, 3, 9, 9, 9, 10, 9, 3, 5, 4, 5, 9, 6, 2, 6, 1, 3, 8], 10), 67)\\nTest.assert_equals(sum_found_indexes([7, 6, 1, 0, 8, 1, 4, 9, 4, 10, 9, 4, 1, 7, 10, 0, 9, 8, 1, 2, 10, 10], 6), 1)\\nTest.assert_equals(sum_found_indexes([1, 10, 7, 2, 7, 4, 9, 4, 1, 1, 2, 2, 1, 0, 4, 5, 0], 6), 0)\\nTest.assert_equals(sum_found_indexes([2, 0, 9, 8, 10, 1, 4, 5, 1, 10, 5, 8, 6, 7, 0, 7, 7, 9, 8, 8, 4, 0, 8, 7, 4, 4, 3, 9, 5, 3, 3, 10, 2, 0, 4, 4, 7, 8, 3, 1, 5, 3, 9, 8, 4, 1, 7, 1, 0, 6, 8, 3, 2, 1, 8, 9, 3, 6, 10, 10, 9, 5, 2, 4, 8, 4, 8, 10, 7, 8, 4, 7, 6, 6, 9, 1, 5, 5, 8, 1, 0, 5, 4, 1, 10, 6, 7, 2, 2], 7), 374)\\nTest.assert_equals(sum_found_indexes([1, 10, 9, 3, 1, 3, 5, 8, 7, 5, 6, 6, 5, 8], 5), 27)\\nTest.assert_equals(sum_found_indexes([1, 5, 4, 6, 1, 2, 6, 7, 3, 8, 2, 4, 4, 2, 5, 5, 10, 2, 2, 6, 9, 1, 2, 5, 0, 3, 7, 3, 8, 2, 7, 9, 10, 0, 0, 2, 1, 4, 6, 10, 2, 0, 6, 9, 1, 7, 2, 1, 7, 3, 7, 7, 9, 9, 0, 10, 3, 10, 9, 1, 6, 10, 6, 3, 5, 2, 8, 10, 7, 10], 4), 62)\\nTest.assert_equals(sum_found_indexes([2, 10, 8, 2, 3, 1, 5, 4, 9, 0, 9, 2, 7, 5, 8, 10, 0, 3, 7, 7, 10], 10), 36)\\nTest.assert_equals(sum_found_indexes([3, 7, 3, 8, 7, 9, 7, 2, 7, 4, 3, 4, 3, 5, 7, 0, 4, 10, 1, 9, 1, 5, 9, 4, 8, 9, 2, 3, 8, 6, 9, 10, 0, 6, 9, 0, 2, 4, 9, 10, 9, 6, 0, 9, 6, 0, 2, 4, 9, 10, 7, 9, 7, 2, 4, 5, 9, 4, 3, 8, 3, 1, 0, 3, 2, 0, 0, 10, 3, 2, 7, 10, 5, 4, 5, 5, 6, 7, 3, 3, 8, 8, 9, 8], 9), 493)\\nTest.assert_equals(sum_found_indexes([3, 3, 4, 0, 5, 8, 4, 3, 9, 3, 8, 10, 1, 6, 0, 4, 2, 9, 2, 3, 8, 2, 8, 4, 0, 8, 6, 1, 9, 0, 9, 3, 7, 4, 10, 6, 8, 4, 8, 9, 0, 4, 0, 2, 7, 2, 3, 2, 5, 1, 0, 9, 0, 4, 7, 10, 1, 1, 3, 3, 8, 4, 8, 7, 2, 7, 6, 0], 6), 140)\\nTest.assert_equals(sum_found_indexes([5, 8, 1, 9, 2, 2, 8, 10, 1, 2, 10, 6, 9, 2, 10, 0, 8, 1, 6, 5, 7, 5, 8, 8, 5, 8, 4, 6, 2, 10, 8, 2, 6, 3, 4, 3, 3, 3, 2, 1, 4, 6, 5, 9, 1, 10, 1, 9, 2, 6, 5, 10], 4), 100)\\nTest.assert_equals(sum_found_indexes([9, 2, 2, 4, 1, 1, 10, 0, 0, 0, 0, 0, 10, 0, 10, 7, 0, 6, 10, 0, 2, 8, 5, 9, 6, 5, 9, 4, 9, 5, 9, 0, 3, 7, 5, 5, 9, 10, 2, 7, 7, 0, 0, 8, 6, 5, 10], 3), 32)\\nTest.assert_equals(sum_found_indexes([8, 6, 4, 3, 7, 8, 1, 10, 0, 7, 9, 1, 4, 6, 4], 10), 7)\\nTest.assert_equals(sum_found_indexes([4, 9, 7, 3, 10, 2, 2, 4, 0, 1, 1, 6, 5, 5, 1, 8, 8, 8, 3, 7, 3, 9, 3, 8, 8, 6, 7, 6, 2, 7, 9, 8, 9, 1, 7, 2, 3, 9, 5, 7, 9, 7, 5, 3, 0, 4, 3, 6, 5], 7), 190)\\nTest.assert_equals(sum_found_indexes([6, 8, 0, 4, 8, 5, 6, 4, 10, 6, 3, 8, 9, 5, 6, 2, 7, 4, 8, 3, 4, 4, 8, 4, 8, 9, 3, 0, 8, 3, 2, 9, 8, 7, 7, 8, 7, 10, 9, 0], 7), 119)\\nTest.assert_equals(sum_found_indexes([2, 6, 2, 4, 4, 6, 0, 10, 1, 8, 9, 5, 6, 5, 9, 1, 8, 4, 8, 9, 7, 8, 1, 0, 8, 5, 4, 1, 6, 3, 4, 10, 5, 1, 7, 5, 1, 2, 3, 6, 7, 0, 9, 4, 4, 5, 2, 7, 2, 0, 6, 3, 6, 0, 5, 1, 0, 8, 5, 8, 3, 9, 5, 6, 1, 8, 1, 7, 9, 3, 8, 3, 0, 8, 8, 4, 4, 9, 2, 7, 3, 3, 10, 10, 9, 4, 5, 0, 0, 3, 10, 9, 4, 2], 4), 495)\\nTest.assert_equals(sum_found_indexes([4, 6, 10, 1, 3, 1, 4, 0, 6, 7, 1, 2, 7, 2, 4, 4, 7, 0, 3, 0, 4, 9, 7, 3, 1, 9, 5, 8, 8, 10, 7, 6, 0, 8, 10, 6, 9, 3, 10, 3, 10, 5, 10, 6], 10), 185)\\nTest.assert_equals(sum_found_indexes([8, 4, 3, 1, 10, 4, 3, 10], 7), 0)\\nTest.assert_equals(sum_found_indexes([4, 9, 5, 4, 8, 0, 0, 5, 6, 4, 5, 4, 5, 0, 1, 4, 10, 9, 7, 4, 0, 8, 1, 1, 1, 2, 1, 0], 5), 31)\\nTest.assert_equals(sum_found_indexes([4, 4, 9, 3, 3, 9, 3, 9, 7, 3, 9, 5, 10, 0, 9, 0, 8, 10, 6, 9, 8, 6, 8, 0, 2, 3, 2, 0, 2, 1, 6, 4, 2, 1, 4, 4, 5, 7, 10, 2, 5, 2, 7, 2, 2, 10, 8, 0, 10, 8, 9, 3, 6, 8, 4, 8, 6, 5, 0, 2, 4, 9, 4, 6, 1, 1, 6, 0, 9, 2, 8, 7, 0, 8, 10, 0, 0, 3, 2, 10, 6, 7, 7, 3, 8, 10, 3, 9, 6, 0, 7, 1, 3, 7, 9, 10, 7, 4, 6, 0], 6), 572)\\nTest.assert_equals(sum_found_indexes([9, 1, 7, 6, 5, 7, 4, 10, 7, 8, 1, 10, 10, 4, 4, 4, 7, 3, 8, 4, 1, 6, 1, 7, 7, 10, 9, 7, 8, 7, 5, 6, 10, 6, 4, 10, 9, 9, 4, 0, 0, 5, 6, 9, 3, 9, 8], 4), 139)\\nTest.assert_equals(sum_found_indexes([7, 4, 4, 2, 10, 10, 2, 0, 4, 7, 2, 4, 9, 8, 5, 10, 2, 1, 3, 1, 3, 5, 3, 5, 10, 0, 1, 5, 4, 10, 3, 9, 9, 7, 10, 6, 2, 0, 2, 5, 0, 3, 9, 6, 2, 1, 4, 3, 6, 4, 9, 5], 3), 178)\\nTest.assert_equals(sum_found_indexes([4, 6, 1, 7, 1, 7, 10, 8, 10, 5, 3, 6, 1, 8, 8, 3, 1, 4, 1, 8, 7, 10, 8, 0, 0, 9, 6, 8, 9, 6, 6, 5, 0, 7, 0, 8, 0, 8, 8, 7, 8, 7, 3, 7, 8, 10, 3, 7, 6, 6, 9, 9, 9, 5, 3, 9, 5, 3, 6, 7, 10, 0, 5, 3, 2, 5], 4), 17)\\nTest.assert_equals(sum_found_indexes([2, 3, 6, 6, 5, 7, 7, 0, 5, 0, 0, 2, 6, 9, 5, 0, 3, 7, 1, 1, 8, 4, 2, 2, 9, 0, 10, 0, 10, 7, 7, 9, 7, 2, 0, 7, 4, 9, 3, 5, 7, 5, 7, 6, 10, 7, 1, 1, 7, 8, 10, 7, 8, 0, 5, 4, 1, 5, 7, 0, 2, 9, 10, 0, 0, 1, 7, 10, 5, 5, 10], 3), 55)\\nTest.assert_equals(sum_found_indexes([7, 7, 10, 9, 9, 1, 9, 6, 4, 8, 2, 7, 10, 0, 0, 4, 0, 3, 10, 6, 4, 4, 7, 7, 1, 10, 6, 1, 5, 8, 1, 6, 0, 3, 7, 9, 3, 5, 10, 10, 2, 10, 0, 6, 3, 6, 4, 8, 6, 9, 9, 3, 8, 1, 10, 2, 3, 7, 1, 3, 0, 6, 9, 3, 4, 0, 5, 4, 3, 0, 1, 1, 4, 5, 2, 1, 7, 7, 9, 0, 5, 1, 4, 10, 5, 4, 3, 0, 9, 4, 0, 5, 10], 1), 494)\\nTest.assert_equals(sum_found_indexes([9, 6, 7, 1, 0, 10, 5, 9, 3, 3, 0, 5, 0, 6, 1, 10, 1, 2, 6, 10, 2, 2, 1, 9, 9, 4, 3, 4, 5, 1, 1, 5, 0, 8, 4, 4, 2, 3, 9, 8, 8, 10, 5, 6, 2, 5, 6, 7, 8, 10, 9, 1, 10, 5, 0, 3, 7, 6, 10, 10, 4, 10, 1, 0, 4, 8, 2, 3, 3, 2, 4, 8, 6, 6], 3), 270)\\nTest.assert_equals(sum_found_indexes([9, 4, 0, 0, 5, 5, 6, 7, 9, 10, 0, 10, 6, 6, 4, 8, 0, 6, 4, 5, 5, 3, 3, 7, 1, 7, 6], 9), 8)\\nTest.assert_equals(sum_found_indexes([0, 1, 9, 3, 4, 6, 1, 6, 6, 1, 4, 2, 5, 7, 9, 0, 7, 1, 3, 8, 5, 7, 9, 4, 0, 4, 7, 10, 4, 3, 10, 8, 4, 5, 6, 1, 0, 10, 6, 3, 6, 8, 9, 5, 2, 6, 10, 2, 1, 7, 9, 2, 6, 8, 5], 7), 125)\\nTest.assert_equals(sum_found_indexes([3, 2, 5, 0, 8, 5, 6, 1, 8, 7, 5, 10, 2, 2, 8, 8, 3, 6, 2, 4, 2, 9, 6, 7, 6, 5, 8, 8, 4, 0, 10, 7, 1, 7, 7, 10, 3, 3, 3, 5, 2, 1, 7, 2, 1, 8, 10, 7, 0, 9, 7, 7, 8, 6, 6, 7, 5, 10, 4, 5, 2, 1, 10, 5, 2, 9, 3], 4), 105)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[0,0,0,0,0,1,1,1,2,2,0,0,0,0,0,1,0,1,1,1,2,0,2,0,0,1,0,2,0,0,1,0,1,0,0,0,1,0,0,0,3,0,0,2,0,0,0,0,1,0,0,1,0,1,0,1,2,0,1,5,0,0,0,0,1,1,0,1,1,0,2,1,1,2,2,1,1,0,0,1,2,4,0,1,0,0,0,1,0,0,1,1,0,1,0,1,0,0,2,2,0,2,0,0,2,0,1,0,1,0,1,1,1,0,2,0,0,1,4,0,0,0,1,1,2,0,2,1,0,2,0,0,1,1,3,1,0,1,0,0,2,0,0,0,0,0,1,0,1,0,0,0,1,2,1,2,2,0,0,2,2,0,1,0,0,0,0,1,0,0,1,0,2,1,2,1,1,2,1,0,0,2,2,0,2,0,2,0,0,0,2,0,0,1,1,0,0,1,0,0,1,1,0,1,1,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,2,3,0,0,0,0,1,0,2,1,1,0,2,0,2,2,0,1,0,0,0,1,0,0,0,0,2,1,0,0,0,0,0,0,1,1,2,0,0,2,0,1,0,0,0,0,1,0,0,2,0,1,0,2,0,0,0,0,2,1,0,1,0,2,0,0,2,2,1,0,0,0,0,1,2,1,0,2,0,1,1,0,2,0,0,0,0,0,0,2,0,0,0,1,1,0,0,1,0,0,2,0,2,0,1,1,2,0,2,0,0,0,0,0,2,0,0,1,0,1,0,1,1,0,1,1,0,0,0,1,0,0,1,2,1,1,0,0,0,0,2,0,0,0,0,0,3,2,1,0],\"rators\":[\"4CFzv558qbGcpQwc4\",\"tAF9Gf6PiGogbZuWs\",\"PXAcsKkssS2yLyDv2\",\"SB8QRjuWA9viDms5n\",\"o4FYGsoNXyLFpnvTr\",\"gb9rvGus2Jv7bjZSs\",\"JizHCRcwLzRzNfsPK\",\"DYkLGbHJG9ja3S44E\",\"3LiSLdtN58n46NEqg\",\"jNvegJWCk5HCtEMbK\",\"qrZB59AcTKF4SkrKr\",\"HDksZLiRAmpnCKHta\",\"C4QntmkYtB89GNtpd\",\"N2wnZXkhDH86mgjQ8\",\"ksYKipM57WDXYHNmA\",\"MKT7khMBGXzA22ykf\",\"6abffx8jQDCf7kgvb\",\"eLkj3Zb2DqiW4AEEh\",\"zd9FLSzsGz3evKafy\",\"u5u2YpHXiNgzDNJdX\",\"AasGs8AeX9Lcb9xJn\",\"d4Myxr6T992RFYJnx\",\"4XKfLXurbfqhf7vTN\",\"9YtQPAffoq4WJLcAP\",\"9Ly8afdtofp8DXzrt\",\"2fxapKr8XGdNeaKi2\",\"dHZqT6h4JMwk5fPC8\",\"GJfqjgFShBiHSTiaP\",\"g4NCSxxHqHCGMpWwT\",\"vLrq4dEDMM2wd68Dc\",\"zg8GmMSP2LkHBtAzy\",\"Ycj4iTJGFyvC4bXek\",\"geZ3oLjhh9KAw7yHs\",\"7jL3ijPqP46GJ4cfJ\",\"ArWzhxZEjsxjGF77p\",\"Hantb9DenwrBHk5tv\",\"yZvzB3qFb8pkHy4dg\",\"BJTPDwCaPoZaukX7C\",\"oKNAZ5BNeNWyvkiiB\",\"aRqQ42J5zqCmBNd8w\",\"N7P4AnS8nzK4oupHv\",\"YZsZjfvd3PnLhDJrR\",\"yabtHTtycsWhcGBfD\",\"v8iedwMBcGiN2PHGM\",\"jBo3xAopr37GFzY8g\",\"hB2hnWhn4E3E7mwSg\",\"SEjhBYzri4HHmm5Fv\",\"XDSYuanswSsvMBNy4\",\"AqgCu4a5vd4nahhJd\",\"cR3ibTMxLyEdDFCHY\",\"2iFe3EHEH2YdhSKrs\",\"Bp96MGgshEWhymp3h\",\"8BFSTCnoe2QggN64c\",\"NMEDQhGCKoQQwbmez\",\"J5T8gZqiZXFuFDTQ7\",\"GHvarH2b22cZtNWxG\",\"9f9LG2exEqL5gNrA7\",\"puCobPgduCEZMXu69\",\"C9LKGu2g5hSijvDzA\",\"35DQ5cFwhjSGCqGgX\",\"HQxp7NcdvF92G7bYS\",\"hS8WBiFoAjP5Js6Wv\",\"KvcKs5bmWo5fK4GFj\",\"Fk9kLwoG4Brf4KsKf\",\"mxX4rH5ELYkdZ2Mbw\",\"sMcFMPkMJC4Kh6ymj\",\"iYgYbusfgvRAJ6wkF\",\"HMweSoHkGZN6tfew7\",\"9LLN4tbHA92uRLfHq\",\"E9ttMPTkLkKG6nZrg\",\"hnyhBFWwNCz9mDfSi\",\"jeuoearPPTcGPgXhf\",\"erEunWkRveQoPZyTC\",\"Nw5Co4WxYtGovKnmA\",\"RosFXZYJkcRwjkaog\",\"TMRkrneSDdaCCTeje\",\"u5jLXaWAKo7K4JvTR\",\"68r3J5vGtfW7p7qko\",\"s2ZMtR9deh6Kia7pb\",\"Yp7uvStL97cC9fKkY\",\"8JyqsSbN2FJXPr3cw\",\"BKjhZeZp8YLhd7ynb\",\"YTRAyZFtn9m68HBLK\",\"zGBTg8pHNJjuPXAA5\",\"X74H8PYX8XYkrGRQc\",\"c9nu6dMCYHn5NoGFZ\",\"KRSKj7ikX2ytWFmod\",\"4tgBydK887PitgAoi\",\"boMXxa5zxP6yJHTje\",\"obgiitvusGnJyzhGP\",\"PweZwtXTDkEwxZXQ4\",\"zC8WrPp5BC6c2exrW\",\"bC7yAKktHb63ReMBf\",\"pwWtbXEjzuvrhEGwt\",\"gJYuGdkXEWWmGRLzu\",\"gGXghWEN4u5vuoXcR\",\"gv5xGeXBT73oknz9p\",\"N5XawSqwYquEjnSae\",\"hKrY8hWMgToBavfhD\",\"FEYpu9RWysAgW3XnP\",\"yAouD3PxzED8a4gap\",\"moFrJ4vxzxPynByzB\",\"jpGomfcYMrRJmSQLs\",\"94FLQj5fEsSg4E498\",\"hqiTnCHZxYu2nvNK5\",\"XrqNzJ2FRG8HnGiR6\",\"PWJq8oJNMEhwRGD4M\",\"Lfut9z3euZ3odxFcH\",\"gudC5KZrykfdfGD3J\",\"6SKDJwXpev4qPSzgM\",\"aEm3Wvj2rFYRL8Lrb\",\"DEDniTrstQYGounXT\",\"5kEyLPjTLrt7z2YJZ\",\"x65vwZF2KcoqxGQQp\",\"FovJzwmhALjb7ouFm\",\"n2ck2WGuM35vbZiFz\",\"ffjnHrx8Ym7A7pQWe\",\"gZCBY2gP7xHRy5JzG\",\"xG4jFH32NX5WP3aMx\",\"T6dAvA7bYyP38k7aG\",\"Jqk2uJZZxEv5wZFze\",\"veAhgEKubmGCuoCyh\",\"PhceyfmFntJcn5Fhf\",\"M8dQuMrEpP8Hc3tHN\",\"EfuBzbisdKE5weiHa\",\"4rwxLqLs2mNZNg8NB\",\"4kNzyLcdf6ufDCpME\",\"a9pr6B8yNaXayoDiQ\",\"YY3aozHR4hxvPso4T\",\"x5wvJ6prnNcY3A3rg\",\"9pzFiFK3ANLjQfnr2\",\"YcCLwitFMAEJSnxAW\",\"TTgP9jcqGxCfKotZ3\",\"SzdT9nsTbXE4ahFsv\",\"mGzrqcrJYviuy5qn4\",\"7dQYiDeTcMztbGyso\",\"AF6LgdKhEdzwgRJom\",\"So6PHm74mfJuY2WTs\",\"kjvgTyRFyKHv44DcH\",\"66a9xX73nmTEuKs9k\",\"zTZctDDRMSeqYjKQY\",\"sDRY37TfoncsA2FSR\",\"586FdBhazpwJfnRYR\",\"jufL2dZQH8tBJajpr\",\"Stye5FSYwYNbhFHgR\",\"NG8PWBSjsM8mMhQEq\",\"5HCu9Ydd86QgHDRNP\",\"5JyY5eDxizCH7TYT7\",\"PcfcAbTJPrdzJN2FW\",\"JRacQYm77Ltir8aK8\",\"Y9SPwnGra4STbviL4\",\"QpZ9b8ygwameoA97h\",\"nfXGHENb5md7m355s\",\"CBXLutgEKHKvbgE3h\",\"2CRF2WT69Z7T72uBj\",\"Yg5KsgKxN3tWmuEKG\",\"Z4dHig4b5MK4beJYs\",\"2ZFoLTxcCARhwc8xX\",\"3ahu3txFTAEibkgRt\",\"64ZBqm6Z6S3wgXaF6\",\"H4abACFDH5t8CnnyH\",\"FRN2W8RYpJ6GPhgRy\",\"3cF6NXq3ZEwdkgSjb\",\"c4SCmmZJEL6yvGfZb\",\"G2pMfCik8KtdaSNqr\",\"7Z9KdHmzkoF3TQC8s\",\"WWD6uwvCr54JJGu5S\",\"H9KZi2cjt4FwH7qog\",\"ai8HyfiT9DYFrRGim\",\"3BrMsGs4QZJFKuvPz\",\"3sGiT8qjdkzqinpde\",\"mFqrAKcfZZM58iYmw\",\"b9YQPLb9ZPSADdHXX\",\"qMfpXAFRSMc6gEzCh\",\"aPLuemxzZ5iS57NBQ\",\"XgRXeb4YyZqmiMTLe\",\"5qfcG54cbBC8ujxav\",\"yNjkHfHESBAnCssPB\",\"syRNbbPdLCGXbH2Gy\",\"JKbEBybAsiKrmcqof\",\"2ptN2mhjFwFcHyPZd\",\"n5P3xDbGTAQR4h8HC\",\"6C94M4PPHbBumAuja\",\"M23Yf6rufJzaSYmxL\",\"XpRh7W7jGst278HTG\",\"Q6gEE9dG8ERy2Xu3c\",\"eMuCpJ2spXWkJjWNz\",\"4yNLEwL2rsx4EE5Nt\",\"5AHe67SapnPQeESpv\",\"dj5xjEAMBnDiXNpWN\",\"mmjoLhCivx5pjfbWw\",\"YnvEysTMLBk2KMSe4\",\"2innwjWqxJHo4eRGh\",\"LSNTFjWvTPwoQSHCb\",\"KdYQN3KAT2DyTzT2a\",\"yKttxy9JGn5Jzwuj6\",\"8vWWL8Tx2yDai4ydm\",\"i5iePG5GqhJJ8HEoB\",\"nTamDQutEJDBN4vXr\",\"KJCDwGkoXh8qtbbKr\",\"oBcs8GLX2ZFLXQy8y\",\"iS5BrkGLzJyPK7nKt\",\"Xj6R2zqhgumffQCAN\",\"G3arGZkymS7H3Ba8a\",\"FyEeqttkrLjxZJPN9\",\"iojEnnY9FsMfYzp6f\",\"hRiMXDZNAzyPd5tpt\",\"TPhfpB5tzQWSSn67n\",\"dXK7tiXRSEm5kjitv\",\"SkQcb2sRn4as5KpnN\",\"KLmLKaJPfsYxp42p2\",\"DTyNcDkiScCjgJt28\",\"HwCcxujBuAjzk9Pb7\",\"iCDqhZGvszrXpDRuW\",\"dik7wis3hBJJBkYwK\",\"DrkR35NqnP9NDLbq6\",\"zigHw4RqWudQvG7sv\",\"WpNHMgfjZE8aNN2MP\",\"pAMuvxMZBFYGzyj28\",\"u7i7WPM63n42r8R8o\",\"gDwp4e3PzkwDCdx5f\",\"dj5AyG5fWP8FdsSmZ\",\"XbxHXmh5ZmRN2gw3K\",\"aKzYNPqBqb3J3ZgyD\",\"q6QsMYNMpPNtmyTeW\",\"ta5CrWnBCRusD2WMo\",\"bmthyKcDF922zNqxK\",\"fTNQmMvTZhhiGBCMe\",\"CweSNtrMCbkZLY2Zj\",\"dSd7wHgXGQeG5BQ2P\",\"dKpesT6tnCimdoQjw\",\"DkeEd2uhXypnPDnNT\",\"NrRa4TS6uZR9xuXRt\",\"HqmxnQJM66Y57twhn\",\"yjtdwc2AC4jA2RWtn\",\"AwJD8PFqFD3Y8hy2T\",\"vAbK8sCfKyFC78HYg\",\"6HgMANhu6WiGyXSGN\",\"zXgwEs94QFkLraLMH\",\"a777e8chPvJkY3tKa\",\"GWjEcCYSqDNZS9rQN\",\"zyFPLXxJzpku4xZYt\",\"DDD5tzD2m8bcntBB8\",\"QPEejhBicc4eB66xF\",\"qD2LrwaDrSdiybLKY\",\"CWnZYFNAzm5K8NiiC\",\"kQ86mSGBiBQQvXzQR\",\"rGA5sQC5vSaqCmh6E\",\"xjyixzXzqqqTfJARd\",\"dxKw3G4pTZWiS6PEm\",\"CyzskHGsC6WSmYrLu\",\"NP2RxM3eBd3drnDwP\",\"F9GLWPxRrMSdP66Y5\",\"Q9afpRu3u8zuWuzLQ\",\"TzEDcbz2PZM4Cfgit\",\"Kh3Pc2ZRusurLaMyP\",\"skbp3mauBhvs2Pjee\",\"Y2Y5CRMMPmdsKCSwL\",\"Cybtjz3cF7RgoiqrN\",\"sKfrD9gjCDHuqLzSk\",\"QRv96jmNaYsWkxQEG\",\"rrSC943cCKNG48sH4\",\"kNrnnMxhFZztMTBAX\",\"a2b7nwxfzCiM83eci\",\"RCzpsCinz5SQnBAta\",\"capjEKEghfZ2tj5pC\",\"DPi9QGLctq2y76KuE\",\"7K4emAv8FE9xcDNQy\",\"jgyuzt5BpA3ohHG96\",\"wRttWTM59y8m5mx7x\",\"nC4sPB69yYuTSks9T\",\"iY25XNrJX2giBLvnd\",\"spYFrLhsowc47QNNE\",\"7HAL7H6NJmc4NC8Q5\",\"NRCH4eiebS7LBjSCa\",\"k2Eo3wyfZZ6KxvKhN\",\"6akGaXW83HnSC5PSy\",\"RnY25enEBE8T9P5GS\",\"4hzd4qde3g9We8N4E\",\"RGMbFMZXJr7DhcAJy\",\"Tf7TJFSPktJBgLA4k\",\"oyKcm3zqdy8Ko5P5d\",\"iBsN2jda8GGPgqj3u\",\"oqnKnp8g6g4fKFKNt\",\"g9FyJ8yeT9ic97Qp2\",\"j7ebNFtte6fSkMWjj\",\"HuNF3xTBzmatyGSTm\",\"8teSHp77vHhhvJWiS\",\"HAtNvtvpTjB2DkhnG\",\"J3upzLHuEwXH7Z2hx\",\"8WpvgSbQciTQWdd8T\",\"FuYTQcDNjct58rqPa\",\"sbJcFfQjQ59Wfg4Cd\",\"rJGeRSCjGzRuYfHZS\",\"aXx8tRSKQw65RwBAB\",\"iF4tdvn5sA9CM4T6T\",\"dDFzTqzPhpkeTcG2b\",\"YRAzEBJoLvSaiPtYx\",\"dYPkStFnLvAMsHSzZ\",\"DAhoDmrLmkoRsJhRx\",\"s4YHxEDBTTq5EBMRs\",\"KTFxMsjaW4xgo5ajY\",\"nJXgbSQozcoE8Wn4N\",\"EfxwqhYdapX3dMQC2\",\"Cg3LKtEAJpsrdWroG\",\"CQhaiZqQcP87YteSG\",\"MnrmRMy2PP3Mk4sSY\",\"vgT3ehH2o2KC94NsY\",\"Ds7L5bksw2QRHjrKL\",\"6428wKHtwKkFdvBs5\",\"PBnvAuiKXwjqjKG33\",\"9FCeFzjPA4jrQ7oHW\",\"agb6ou9deennRxzhv\",\"5XiuAqicKD4hBdu63\",\"AXcnPX68zdMiLNSmu\",\"7D76ZPLjgjZideoy9\",\"cZccqzRQ9GgjQF6Az\",\"HcdukZiuzgvoHjjz3\",\"RSTdK2S8CecymSS6h\",\"KEmTti9Tza8A2FLQW\",\"5HTSi5wQNAdLm57LB\",\"igLmeTgCMEPu7fQTd\",\"uN5t57RETi5y2z5W8\",\"qAby4AWXmTNeusvg3\",\"DpnYcMphntjsQ96qg\",\"wypdvuJQZB2TFyb2g\",\"Q7Yxda7dqKeYPs2Db\",\"JS3hNM3XXkxPdg3yk\",\"PnzR8TWfcT5QHrek8\",\"5hQnRWiKkhgKJXNMP\",\"QTZTmQEmkPv5sxQL4\",\"5S9nX4rKsnCcnv4Cz\",\"Krto2sGMfGWBLcL7n\",\"GdKtjPh8TcfmJuduv\",\"xNCLJDm9Bni6gByMz\",\"AFfw7cGg83uYk2Miy\",\"buX4mCQhtXCfBjeno\",\"XanFBoer6Lw9KXvuE\",\"Wp5CZXqvjwTpt5SKN\",\"MyyfuAJrdaoBE2xGk\",\"pPpmP7xeJzGgK362R\",\"5wCHxMQ5Km2bjqcGZ\",\"MXGuntvz3byrP6WJc\",\"F7wta4nHmabMr9dfd\",\"CN2Jg7GX3c57eXiCp\",\"7KsymxNN9S8ZG5oQe\",\"eYfPWvZwnJQkHbSTK\",\"xLMuE3gi2h7QRdgCp\",\"srJ34BaybkQh3qRkM\",\"yEvXDzXnEPNz6tTCK\",\"fW3mQfbTKhp7enxGP\",\"TmM3AN7g3fkh69ycj\",\"T78CHCScDRZjf5Cjy\",\"vCxuabDxEv9YC3Szb\",\"q9FfWNiMDKRiaCJ5j\",\"B8n7KqbvEDjZzgj2D\",\"fe3gsFT3MbZ4azEC9\",\"ghMkPtdFCpM6w8nax\",\"YaybbCdfjFQmsfgtp\",\"YwAvPdqD6Xi2qjapZ\",\"2MjzJ7yxh3eT3xbng\",\"XD5nmvKQchKezPXhy\",\"HBuJYgW2eRBJp9FoG\",\"m7KZ5donpz5F6AR3z\",\"6gHaCTMvjCk5ggBFm\",\"uvLimfW9x3bCp7huQ\",\"PC3pLs36zNzpRDSuE\",\"CHvzhtXnv8HTbPQ56\",\"2QGRoQn2dRq3scu7k\",\"T6iBEE2jp7f7iEF2P\",\"YmQb9Mo4Xcg2vzgbn\",\"4TmgHkn5vqyHK3sYC\",\"RTER5uJdW4khkiNbY\",\"fdyejapW3NWN7utPX\",\"mvJBakQ35CWAnbbEZ\",\"Dq24MSpogRmq6L4hX\",\"T6Rm8mREPMZSftzrC\",\"eHcgvkTGsH7ZziqBo\",\"JiSpvq6C7azQEmENc\",\"DFpZcskPncmo7fuzR\",\"FxbTzThBiTnRzfirA\",\"iYXdNw7tKcgA3QwBX\",\"8PwfYqoDQFThzNtvf\",\"sHjfbGQGLHE6JR6qu\",\"Afnps7TJQuS9sipMb\",\"gKnWjDjwrJh7MK2df\",\"cdXmwjupCXSvJTSNo\",\"LQxof8pGabGuWP7Gn\",\"d9LBRxvADNBB5QJMB\",\"gjiu8kLnHYxe4HoBN\",\"TCvpT4EPb8qNssNB7\",\"FiaTpm7ehfDv43wSG\",\"PTDFuxAzou7W6asWt\",\"x2Cz7S8rCKJqCE3Xe\",\"5QN8R22z43SrwoHDz\",\"dzS6WBTMHyFEag6Fp\",\"B4y8aoyXJtskYPFEL\",\"rhS8qXRjZcpDXkwnE\",\"uK58g2EXxqxTaB2iA\",\"arWdYjT3J9QKzoPLd\",\"wjc4iejpErBhxWwHo\",\"5nbHH4eApn6So9h2n\",\"afvP29FhRou2bTaav\",\"rF97GDLqCgynr7BaD\",\"suArq5BbSy7gD6xri\",\"Ne8mK9DDHG8TRkoxG\",\"tR9grPBLncwacBTzr\",\"mw9464S5dnenqzvpm\",\"PmRyaLmhAF4MMLBtM\",\"M2gFMJkocQSY6bsFR\",\"fMp8sPsKSECdfgF9j\",\"7q8oBsCHwn48Ppnrq\",\"r83jJeskFETo3RLhZ\",\"4Lwjr34ypKNQNQCar\",\"Wi4H6ayKsNDWWQCG5\",\"jWbd7SYDzLPjc9EDh\",\"mdRQaGT98ycMt87S2\",\"NzbRqGWspQnWMoDrF\",\"iBjwTeXx4KiWffy64\",\"4akHBgnDEDj3Rkv5n\",\"K6S8HCswXg68EWHmo\",\"M4vq8ATaS9Jg5X7iP\"],\"total\":453,\"quality\":[1,5,5,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,5,5,5,4,5,5,5,5,4,5,5,5,5,5,4,5,5,5,5,5,5]},\"flags\":0},\"summary\":\"Create a function which takes in a list of numbers and a number to find. Return the sum of every index in the list which matches the chosen number.\\n\\nExamples\\nsumfoundindexes([0, 3, 3, 0, 0, 3], 3) ➞ 8\\nThe number 3 was found at indexes 1, 2 and 5.\\n8 = 1 + 2 + 5\\n\\nsumfoundindexes([1, 2, 3, 4, 5, 6], 3) ➞ 2\\n\\nsumfoundindexes([100, 100, 100, 100, 100], 100) ➞ 10\\n\\nsu\",\"tags\":[\"language_fundamentals\",\"arrays\"],\"timestamp\":{\"$date\":1583269490505},\"title\":\"Sum of Found Indexes\",\"quality\":4.824561403508772,\"family\":[{\"_id\":\"TTu48ECaTRwZDj69x\",\"language\":\"javascript\"},{\"_id\":\"YKgzPFZKt9XHXQHAu\",\"language\":\"python3\"},{\"_id\":\"jmpHxPTwjJrbntXQ6\",\"language\":\"ruby\"}]}}"]