a["{\"msg\":\"result\",\"id\":\"1631\",\"result\":{\"_id\":\"LQFweeNkSNE6nwodn\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"def can_build(digits, lst):\\n\\t\",\"difficulty\":2.101010101010101,\"familyId\":\"YbcirCB6MSH34SGzz\",\"instructions\":\"You are given a list representing the number of 0s, 1s, 2s, ..., 9s you have. The function will look like:\\n\\n```\\ncan_build([#0s, #1s, #2s, ..., #9s], [num1, num2, ...])\\n```\\n\\nWrite a function that returns `True` if you can build the following numbers using only the digits you have.\\n\\n### Examples\\n```\\ncan_build([0, 1, 2, 2, 3, 0, 0, 0, 1, 1], [123, 444, 92]) ➞ True\\n\\n# You have: one 1, two 2s, two 3s, three 4s, one 8 and one 9\\n# Using only these digits, you can build 123, 444, and 92\\n\\ncan_build([10, 2, 3, 8, 5, 8, 5, 5, 3, 1], [11, 2, 22, 49, 444, 998, 87, 44]) ➞ False\\n\\ncan_build([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], []) ➞ True\\n\\ncan_build([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3]) ➞ False\\n```\\n\\n### Notes\\nN/A\",\"lab\":\"Test.assert_equals(can_build([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], []), True)\\nTest.assert_equals(can_build([1, 1, 0, 0, 0, 0, 0, 0, 1, 0], [1, 8]), True)\\nTest.assert_equals(can_build([1, 1, 0, 0, 0, 0, 0, 0, 1, 0], [1, 80]), True)\\nTest.assert_equals(can_build([0, 1, 2, 2, 3, 0, 0, 0, 1, 1], [123, 444, 92]), True)\\nTest.assert_equals(can_build([1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [10, 23, 45, 6789]), True)\\nTest.assert_equals(can_build([0, 2, 3, 0, 5, 0, 0, 0, 0, 1], [11, 2, 22, 49, 444, 4]), True)\\nTest.assert_equals(can_build([1, 1, 0, 0, 0, 0, 0, 0, 1, 0], [1, 80, 0]), False)\\nTest.assert_equals(can_build([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1]), False)\\nTest.assert_equals(can_build([0, 2, 3, 0, 5, 0, 0, 0, 0, 1], [11, 7, 2, 22, 49, 444, 4]), False)\\nTest.assert_equals(can_build([0, 2, 3, 0, 5, 0, 0, 0, 0, 1], [11, 2, 22, 49, 444, 44]), False)\\nTest.assert_equals(can_build([10, 2, 3, 8, 5, 8, 5, 5, 3, 1], [11, 2, 22, 49, 444, 998, 87, 44]), False)\",\"language\":\"python3\",\"summary\":\"You are given a list representing the number of 0s, 1s, 2s, ..., 9s you have. The function will look like:\\n\\ncan_build([#0s, #1s, #2s, ..., #9s], [num1, num2, ...])\\n\\nWrite a function that returns True if you can build the following numbers using only the digits you have.\\n\\nExamples\\ncan_build([0, 1, 2, 2, 3, 0, 0, 0, 1, 1], [123, 444, 92]) ➞ True\\n\\nYou have: one 1\",\"tags\":[\"arrays\",\"higher_order_functions\",\"loops\",\"validation\"],\"timestamp\":{\"$date\":1555645042363},\"title\":\"Can You Make the Numbers?\",\"stats\":{\"completed\":{\"total\":110,\"ratings\":[2,2,2,2,2,2,2,2,2,2,3,2,3,2,2,2,2,3,3,2,2,1,2,1,2,3,1,0,0,4,1,3,4,3,3,2,2,0,3,3,2,2,2,2,1,3,3,4,3,3,1,1,2,3,3,2,3,3,3,1,3,2,3,0,3,2,0,2,4,3,3,0,3,2,2,2,2,0,2,2,4,3,5,5,2,2,0,3,1,0,0,0,3,2,3,2,1,1,0],\"rators\":[\"mNMQvcxKSSvqqMYCH\",\"yZvzB3qFb8pkHy4dg\",\"8JyqsSbN2FJXPr3cw\",\"tAF9Gf6PiGogbZuWs\",\"gb9rvGus2Jv7bjZSs\",\"T3ZAuoMrJjvZwN55B\",\"ab7BsQuhDo3QgE6bh\",\"M8jrv2FfpMQp9Qzpx\",\"FikSPhcrHBpQ4CyGC\",\"MXjxGML2X75x64vJo\",\"PFjMZGHNAPTkgd7tq\",\"C9LKGu2g5hSijvDzA\",\"6u7yc9m6HuHGbHzph\",\"AF6LgdKhEdzwgRJom\",\"yrCNkFYQBEDE76eFS\",\"AYaEkTWLMmfzpwejr\",\"jYJ26SiLKBu5GRumq\",\"cR3ibTMxLyEdDFCHY\",\"T2vhHPhRR96hRizq8\",\"gMJhLdyw3tH7L96X2\",\"XKi8iZXBCHCaebSHh\",\"TgjcWxsTjar7snQx9\",\"FgkYtHLxeD8pETJ8T\",\"EKrSBrTXuhE3f4xsR\",\"Nj6FwgBtAXsaQwsM2\",\"kQH5b8MXJunh84Czq\",\"MJMWfiW978otApbcG\",\"2fxapKr8XGdNeaKi2\",\"otXtuQygbcYATMZoP\",\"HqmxnQJM66Y57twhn\",\"EXZfPb8YH28EL8Rh9\",\"Jqk2uJZZxEv5wZFze\",\"K96FwtfDDN5WM4Bb7\",\"2innwjWqxJHo4eRGh\",\"cSMKd6Yq8Pyq8TvWR\",\"C4QntmkYtB89GNtpd\",\"AasGs8AeX9Lcb9xJn\",\"pmgFEciNrd3ES9tuu\",\"s5M5RvgqR9BhB9JoC\",\"sJWTa7iWeRoRtqJ8N\",\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\",\"ZNnsMeNkdDhHjSrZb\",\"ytceK4TxiCchoCLYC\",\"kYWb8BwpKwunQkxeX\",\"YRstQuthRkFeBiXug\",\"mDWNyaaQ9hvPCRzSd\",\"EjbDDFRECrzQDkzrX\",\"JQkZXeaLy3giT5p6W\",\"gJYuGdkXEWWmGRLzu\",\"Ecg4m7srYGgZsb4Ck\",\"HF28xZKSLM9wEuqNg\",\"P2W2p3hXTJLZGR46F\",\"iojEnnY9FsMfYzp6f\",\"yjtdwc2AC4jA2RWtn\",\"DEDniTrstQYGounXT\",\"KZ2xddpM2f9JRaryB\",\"v9KtC8YLbMWmXiW2H\",\"qD2LrwaDrSdiybLKY\",\"Wv2vJnEj8ywNmARoF\",\"DPi9QGLctq2y76KuE\",\"xn7uGNKeAwPEkP9oA\",\"J3upzLHuEwXH7Z2hx\",\"Yp7uvStL97cC9fKkY\",\"QRv96jmNaYsWkxQEG\",\"dkcmCKwqApX5jBggc\",\"p8qqFdJ3FSk5x9z3G\",\"fYKAHqcSbHi6QA27q\",\"gXTAie79kiw28tx5u\",\"PytNZK9mNiRiZxPrm\",\"YrNSBvmhhsDn3DWQp\",\"3TfXi8YesqdHNbB5o\",\"ud4Kram2Nst3heXky\",\"hSWnWRM65fQGrG3Rz\",\"BEZSu9R94XFomASKM\",\"YPSvhJeQmMZWr5no7\",\"XujK3rHd3JcM9TLJy\",\"9qZCkf7gio5b4voFF\",\"NzCdApxNegj4RarXe\",\"h4x2jaMdj5aQZbW5g\",\"TJkmgPpdG93uf3kcB\",\"HvSicYcezLB6aFwWu\",\"axJMjk7YuZkZM7mWK\",\"gqqAjSw5CHY35aoos\",\"aeRb8NuuqrfgG3iio\",\"hY8CJZAzaDm29rDKx\",\"QGXyx8fJX6yXNP97C\",\"y6oQjuv5XnoFMhEGp\",\"PCouAkRWLLSTvKzkW\",\"oBcs8GLX2ZFLXQy8y\",\"ReJkqc43MY6pNcMDh\",\"gLkw8FusmjW6WChr7\",\"CHvzhtXnv8HTbPQ56\",\"hnyhBFWwNCz9mDfSi\",\"cAP3n5NY64uoMwzRR\",\"GGdmhAvxXhqhhibJN\",\"T6iBEE2jp7f7iEF2P\",\"gKnWjDjwrJh7MK2df\",\"JhX7jvtpwNyxcc39m\",\"yod5YhKtPqw2GfG9B\",\"suArq5BbSy7gD6xri\",\"2PufnQcsHsfymufX3\",\"8sNv5PTHa7XQ8bNqR\",\"4Lwjr34ypKNQNQCar\",\"n2qKKxomPnb4zez5M\"],\"quality\":[4,5,3,5,5,5,5,5,5,5,5,3,3,5,4]},\"tests\":{\"score\":0,\"rators\":[\"mNMQvcxKSSvqqMYCH\"]},\"instructions\":{\"score\":0,\"rators\":[\"mNMQvcxKSSvqqMYCH\"]},\"flags\":2},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.466666666666667,\"isFree\":false,\"family\":[{\"_id\":\"SNTnHfCyxrLGPTnTZ\",\"language\":\"cpp\"},{\"_id\":\"sEn8HvF2pHiv4La2N\",\"language\":\"javascript\"},{\"_id\":\"FsueCtqQ25PmPp9Sg\",\"language\":\"php\"},{\"_id\":\"LQFweeNkSNE6nwodn\",\"language\":\"python3\"},{\"_id\":\"RirSeFqWhmYbhXuiJ\",\"language\":\"ruby\"}]}}"]