a["{\"msg\":\"result\",\"id\":\"1212\",\"result\":{\"_id\":\"6BXmvwJ5SGjby3x9Z\",\"author\":\"KarelOmab\",\"authorId\":\"qD2LrwaDrSdiybLKY\",\"code\":\"def hours_passed(time1, time2):\\n\\t\",\"difficulty\":1.6911764705882353,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"92fyoGMyQiLTEafvR\",\"instructions\":\"Create a function that takes `time1` and `time2` and return how many hours have passed between the two times.\\n\\n### Examples\\n```\\nhours_passed(\\\"3:00 AM\\\", \\\"9:00 AM\\\") ➞ \\\"6 hours\\\"\\n\\nhours_passed(\\\"2:00 PM\\\", \\\"4:00 PM\\\") ➞ \\\"2 hours\\\"\\n\\nhours_passed(\\\"1:00 AM\\\", \\\"3:00 PM\\\") ➞ \\\"14 hours\\\"\\n```\\n\\n### Notes\\n- `time1` will always be the starting time and `time2` the ending time.\\n- Return `\\\"no time passed\\\"` if `time1` is equal to `time2`.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(hours_passed(\\\"3:00 AM\\\", \\\"9:00 AM\\\"), \\\"6 hours\\\")\\nTest.assert_equals(hours_passed(\\\"2:00 PM\\\", \\\"4:00 PM\\\"), \\\"2 hours\\\")\\nTest.assert_equals(hours_passed(\\\"1:00 AM\\\", \\\"3:00 PM\\\"), \\\"14 hours\\\")\\nTest.assert_equals(hours_passed(\\\"2:00 AM\\\", \\\"3:00 PM\\\"), \\\"13 hours\\\")\\nTest.assert_equals(hours_passed(\\\"8:00 AM\\\", \\\"8:00 PM\\\"), \\\"12 hours\\\")\\nTest.assert_equals(hours_passed(\\\"12:00 AM\\\", \\\"10:00 PM\\\"), \\\"22 hours\\\", \\\"No, this is not 10 hours...\\\")\\nTest.assert_equals(hours_passed(\\\"1:00 AM\\\", \\\"1:00 AM\\\"), \\\"no time passed\\\")\\nTest.assert_equals(hours_passed(\\\"12:00 PM\\\", \\\"12:00 PM\\\"), \\\"no time passed\\\")\",\"language\":\"python3\",\"quality\":4.947368421052632,\"stats\":{\"completed\":{\"ratings\":[1,1,1,1,1,1,2,2,2,1,1,0,2,2,2,2,3,1,1,2,1,0,2,2,1,3,0,2,3,1,2,1,2,2,5,3,0,0,2,2,2,2,2,3,3,0,2,1,2,2,2,1,2,4,2,0,3,2,2,1,2,2,0,1,2,2,4,1],\"quality\":[5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,5,5,5,5],\"rators\":[\"qD2LrwaDrSdiybLKY\",\"Yp7uvStL97cC9fKkY\",\"RGMbFMZXJr7DhcAJy\",\"C2AfMipCicfD58WJ9\",\"a777e8chPvJkY3tKa\",\"yjtdwc2AC4jA2RWtn\",\"QRv96jmNaYsWkxQEG\",\"J3upzLHuEwXH7Z2hx\",\"8PwfYqoDQFThzNtvf\",\"9onLFjwWr6DqyRBJw\",\"2vTZBu5vLY8aKgiXG\",\"w2HhxvSLmDhaGCAjE\",\"DPi9QGLctq2y76KuE\",\"5HCu9Ydd86QgHDRNP\",\"dYPkStFnLvAMsHSzZ\",\"cR3ibTMxLyEdDFCHY\",\"HF28xZKSLM9wEuqNg\",\"s5M5RvgqR9BhB9JoC\",\"oBcs8GLX2ZFLXQy8y\",\"d8qtzoLB264iP8tdY\",\"gJYuGdkXEWWmGRLzu\",\"cAP3n5NY64uoMwzRR\",\"4fjSgcqhQQZM2ZFRP\",\"iS5BrkGLzJyPK7nKt\",\"8JyqsSbN2FJXPr3cw\",\"5XiuAqicKD4hBdu63\",\"zd9FLSzsGz3evKafy\",\"zZDaXBxMzTCBhNkgL\",\"R4SjTgDnpigJYDLyL\",\"wRttWTM59y8m5mx7x\",\"aEm3Wvj2rFYRL8Lrb\",\"gXTAie79kiw28tx5u\",\"FEYpu9RWysAgW3XnP\",\"BCPNmfdwmRDs6FqcN\",\"J5T8gZqiZXFuFDTQ7\",\"gb9rvGus2Jv7bjZSs\",\"PWgzeK859suojbrRx\",\"2QGRoQn2dRq3scu7k\",\"AXcnPX68zdMiLNSmu\",\"9ivvGvJGvtQfigQaZ\",\"HqmxnQJM66Y57twhn\",\"5S9nX4rKsnCcnv4Cz\",\"HuNF3xTBzmatyGSTm\",\"6xTu4r8NMczBFvmtz\",\"Jqk2uJZZxEv5wZFze\",\"cZccqzRQ9GgjQF6Az\",\"GGdmhAvxXhqhhibJN\",\"Ds7L5bksw2QRHjrKL\",\"qAby4AWXmTNeusvg3\",\"iojEnnY9FsMfYzp6f\",\"srJ34BaybkQh3qRkM\",\"YmQb9Mo4Xcg2vzgbn\",\"bvmTE46bfcM4ogj34\",\"o4ixjQGSaYqA2JoM4\",\"mDWNyaaQ9hvPCRzSd\",\"CHvzhtXnv8HTbPQ56\",\"DEDniTrstQYGounXT\",\"yr822PZmmiDDenxpB\",\"PC3pLs36zNzpRDSuE\",\"N2wnZXkhDH86mgjQ8\",\"9Ly8afdtofp8DXzrt\",\"AasGs8AeX9Lcb9xJn\",\"sbJcFfQjQ59Wfg4Cd\",\"AJexRBN9cYQmqvYu6\",\"QQAwjsH85EFE4qRnx\",\"mvJBakQ35CWAnbbEZ\",\"2NDSt8HyP33cFRHsu\",\"EHtTFoDbt722AH667\",\"yod5YhKtPqw2GfG9B\",\"T6iBEE2jp7f7iEF2P\",\"tAF9Gf6PiGogbZuWs\",\"NpxzZk8fyyh28rBmw\",\"pPPaHqWkmnDAfyisS\",\"BrTDhPJcACL2bsrpJ\",\"8Ha7KAEkhZYav9fay\",\"2PufnQcsHsfymufX3\",\"4Lwjr34ypKNQNQCar\",\"syRNbbPdLCGXbH2Gy\",\"mxX4rH5ELYkdZ2Mbw\",\"Ncn7Qn2LbdsiJnfFk\",\"9pzFiFK3ANLjQfnr2\",\"Wi4H6ayKsNDWWQCG5\"],\"total\":87},\"flags\":0},\"summary\":\"Create a function that takes time1 and time2 and return how many hours have passed between the two times.\\n\\nExamples\\nhours_passed(\\\"3:00 AM\\\", \\\"9:00 AM\\\") ➞ \\\"6 hours\\\"\\n\\nhours_passed(\\\"2:00 PM\\\", \\\"4:00 PM\\\") ➞ \\\"2 hours\\\"\\n\\nhours_passed(\\\"1:00 AM\\\", \\\"3:00 PM\\\") ➞ \\\"14 hours\\\"\\n\\nNotes\\ntime1 will always be the starting time and time2 the ending time.\\nReturn \\\"no time passed\\\" if ti\",\"tags\":[\"strings\",\"data_structures\",\"dates\"],\"timestamp\":{\"$date\":1603213004633},\"title\":\"Amateur Hour\",\"family\":[{\"_id\":\"G4ZF3Ch8XyMk4p7Hp\",\"language\":\"java\"},{\"_id\":\"CFszCxtcmqAsgZdw8\",\"language\":\"javascript\"},{\"_id\":\"6BXmvwJ5SGjby3x9Z\",\"language\":\"python3\"},{\"_id\":\"wSdjrz2rYk4XCpJXE\",\"language\":\"ruby\"}]}}"]