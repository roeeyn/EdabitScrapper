a["{\"msg\":\"result\",\"id\":\"1423\",\"result\":{\"_id\":\"zE37mNeG4cn6HesaP\",\"author\":\"Donnamae\",\"authorId\":\"yZvzB3qFb8pkHy4dg\",\"code\":\"def max_ham(s1, s2):\\n\\t\",\"difficulty\":2.0473933649289098,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"jQnafDx99dH5ZSyKy\",\"instructions\":\"An **anagram** is a word, x, formed by rearranging the letters that make up another word, y, and using up all the letters in y at the same frequency. For example, _\\\"dear\\\"_ is an anagram of _\\\"read\\\"_ and _\\\"plead\\\"_ is an anagram of _\\\"paled\\\"_.\\n\\nThe **Hamming distance** between two strings is the number of positions at which they differ. Hamming distances can only be calculated for strings of equal length.\\n```\\ns1 = \\\"eleven\\\"\\n\\ns2 = \\\"twelve\\\"\\n```\\nThey only have the third position (index 2) in common, giving them a Hamming distance of 5.\\n\\nAs anagrams are of identical length, the Hamming distance between them can be calculated.\\n```\\ns1 = \\\"read\\\"\\n\\ns2 = \\\"dear\\\"\\n```\\nThese strings differ at the first and last positions, giving them a Hamming distance of 2. _\\\"Plead\\\"_ and _\\\"paled\\\"_ have a Hamming distance of 3.\\n\\nCreate a function that takes two strings, and returns:\\n- `True` if they are anagrams of each other and their Hamming distance is equal to their length (i.e. no letters in the same positions).\\n- `False` if they aren't anagrams, or\\n- Their Hamming distance if they are anagrams with >=1 letter at the same index.\\n\\n### Examples\\n```\\nmax_ham(\\\"dear\\\", \\\"read\\\") ➞ 2\\n\\nmax_ham(\\\"dare\\\", \\\"read\\\") ➞ True\\n\\nmax_ham(\\\"solemn\\\", \\\"molest\\\") ➞ False\\n```\\n\\n### Notes\\nN/A\",\"lab\":\"Test.assert_equals(max_ham('dare','read'), True)\\nTest.assert_equals(max_ham('dear','read'), 2)\\nTest.assert_equals(max_ham('naive','ravine'), False)\\nTest.assert_equals(max_ham('observe','verbose'), 6)\\nTest.assert_equals(max_ham('mister','remits'), True)\\nTest.assert_equals(max_ham('pirates','traipse'), True)\\nTest.assert_equals(max_ham('petal','leapt'), 4)\\nTest.assert_equals(max_ham('solemn','molest'), False)\\nTest.assert_equals(max_ham('solemn','melons'), 5)\\nTest.assert_equals(max_ham('solemn','lemons'), True)\\nTest.assert_equals(max_ham('emigrants','streaming'), True)\\nTest.assert_equals(max_ham('teardrop','predated'), False)\",\"language\":\"python3\",\"summary\":\"An anagram is a word, x, formed by rearranging the letters that make up another word, y, and using up all the letters in y at the same frequency. For example, \\\"dear\\\" is an anagram of \\\"read\\\" and \\\"plead\\\" is an anagram of \\\"paled\\\".\\n\\nThe Hamming distance between two strings is the number of positions at which they differ. Hamming distances can only be calculated fo\",\"tags\":[\"strings\",\"validation\",\"conditions\"],\"timestamp\":{\"$date\":1560354402098},\"title\":\"Farthest Hamming Anagrams\",\"stats\":{\"completed\":{\"total\":241,\"ratings\":[2,2,2,2,2,2,2,2,2,2,1,2,1,1,3,2,1,3,3,1,3,0,2,1,3,3,1,2,2,3,2,3,2,1,3,2,3,1,2,2,3,2,3,1,1,3,3,2,2,3,3,3,2,1,1,3,2,0,1,1,3,1,3,1,3,2,3,1,2,3,2,3,2,3,0,1,2,3,3,3,2,3,2,3,0,2,1,3,2,3,0,2,2,3,1,2,3,0,1,2,0,2,2,3,2,3,3,2,3,2,5,3,0,1,2,3,0,3,3,2,1,3,2,3,1,2,2,3,1,2,2,2,3,3,2,2,0,2,3,2,1,3,1,3,2,3,2,2,1,3,2,3,5,2,3,0,0,3,0,0,1,3,1,3,0,3,3,3,3,2,2,1,3,1,3,3,2,1,3,0,1,2,3,3,2,2,3,3,3,2,2,2,2,2,3,3,3,1,0,2,2,1,3,3,0,2,3,2,3,2,2],\"rators\":[\"gb9rvGus2Jv7bjZSs\",\"tAF9Gf6PiGogbZuWs\",\"cecRRLKKu5R62D5xE\",\"sCnrfER8vCe4xhpB2\",\"SKabuq5XuhXBugKBa\",\"9DahJwd93znEHDNhq\",\"uPqJ7Ho3bz8pXPrWY\",\"ahWFxnaxt9bXSA4f3\",\"7REMi9ZPhC4R5qveo\",\"24sgXgBKN8Wz7EWSe\",\"GpjZR7PL5GQQ4YPn6\",\"mBGpSNpLxBmS68CET\",\"StJwhPFkevcqZ9swQ\",\"nDxmR2RhE5FaPmX6D\",\"MXjxGML2X75x64vJo\",\"XBmvGz2a28Wtuhj3N\",\"8JyqsSbN2FJXPr3cw\",\"4HC75a4BAtjSd8jPv\",\"4LYkRKwgAzdJJ9Kbv\",\"kQH5b8MXJunh84Czq\",\"byqTp7CX5oWSEZp4S\",\"2cqAQz552c9HXxT9x\",\"yZvzB3qFb8pkHy4dg\",\"PFjMZGHNAPTkgd7tq\",\"6fwzAwFY549EuSvms\",\"c89SxuYYjfeRh4toG\",\"Y3KkPrBzMBgMiqaQ6\",\"AF6LgdKhEdzwgRJom\",\"kfG9deramoXyqrP5L\",\"vtBrNNcQn8TFSs275\",\"Mb5sjE2qnvjL2xcBG\",\"rAzsnsiZYPxfdB8af\",\"7g3vZaQXhLpxrajyg\",\"qvEvDcL32a5F4Tg6c\",\"yZzvg933wFk6uCLyc\",\"TRkN2Ggorg35Bn8zG\",\"tHEH9MBHBAGvhgJGd\",\"inEQthEoPuP337WTY\",\"RkpDGH3gMkJivXBvm\",\"DJD9vvwqQmjfwdGpt\",\"S3Y7xM7SR3RjJPFnM\",\"BFNm9gacwba9KyLFW\",\"C9LKGu2g5hSijvDzA\",\"GAMLghpc9JMXz3jvs\",\"yrCNkFYQBEDE76eFS\",\"cmwasetrBzbwJQbks\",\"jYJ26SiLKBu5GRumq\",\"6u7yc9m6HuHGbHzph\",\"ZGhZhnqAHiQypqZrp\",\"PSrcg6fy835R4c5CW\",\"WkWyq9wMkZhXB6zsD\",\"jHrtWDGBhkbuWa7fG\",\"MJMWfiW978otApbcG\",\"AYaEkTWLMmfzpwejr\",\"JEAi9mG3vvBomJ3Yu\",\"aCNWav8S8Try9RkC6\",\"iqmPb9JuJDgTFeR8Q\",\"cR3ibTMxLyEdDFCHY\",\"T2vhHPhRR96hRizq8\",\"gMJhLdyw3tH7L96X2\",\"nfXGHENb5md7m355s\",\"Nj6FwgBtAXsaQwsM2\",\"N2wnZXkhDH86mgjQ8\",\"8aPJNKDxXq7884eJb\",\"otXtuQygbcYATMZoP\",\"w3e8tA7cxpYDfSmWM\",\"eb5XAGpwKA48ya99p\",\"PXSFa2Cvyy7nxcv5T\",\"hSfK7dhSiKdNjMbLr\",\"qBaLGrm952ii9K23M\",\"2fxapKr8XGdNeaKi2\",\"HqmxnQJM66Y57twhn\",\"Dw8RZgg5iHBuFrWwQ\",\"YeagPqNegEBbSGb3p\",\"yoYQqaY6GszuTkNSs\",\"K96FwtfDDN5WM4Bb7\",\"ydEdzuCCZt4yny9Rq\",\"8PwfYqoDQFThzNtvf\",\"PqEKjCDkJtYoYuZfj\",\"FgkYtHLxeD8pETJ8T\",\"N962oRnYTtRzEd22M\",\"Jqk2uJZZxEv5wZFze\",\"C4QntmkYtB89GNtpd\",\"tK9oBgXjqPsPrGowj\",\"vgTvCCxgvbCTDvaRT\",\"XjyaCd8bviTitHTwa\",\"u5u2YpHXiNgzDNJdX\",\"kBmhcwkCqxiy4GwiZ\",\"s5M5RvgqR9BhB9JoC\",\"uhjd5uctmxCRQeGsj\",\"ab7BsQuhDo3QgE6bh\",\"2innwjWqxJHo4eRGh\",\"3ECpdeExhBmkYXtba\",\"BZ9aDwsT223J4ZG74\",\"QnPD4Sv6W4LHc2Qng\",\"EjbDDFRECrzQDkzrX\",\"AasGs8AeX9Lcb9xJn\",\"BeFnbPbMnAM2SjBdZ\",\"4CFzv558qbGcpQwc4\",\"w3A7cBWyAfukk6xEQ\",\"J5T8gZqiZXFuFDTQ7\",\"PytNZK9mNiRiZxPrm\",\"Z85ajWfZ4jDPkbvR4\",\"wZoxzQDbso9SMAPkY\",\"aEm3Wvj2rFYRL8Lrb\",\"euPBBaYXyS8RBr9KB\",\"eMuCpJ2spXWkJjWNz\",\"qgYikiD7WB8JciTdo\",\"dXMbkgQFoN37BhruB\",\"Nua6T3dBurBy3Qfg9\",\"ZNnsMeNkdDhHjSrZb\",\"3CddxEkvCvRoCLQ7b\",\"YRstQuthRkFeBiXug\",\"HeMtGDWt4yHuG7AGD\",\"mDWNyaaQ9hvPCRzSd\",\"gJYuGdkXEWWmGRLzu\",\"mfsaETo7uA4x5vqLD\",\"kYWb8BwpKwunQkxeX\",\"3Zceb8GudqAG3onG3\",\"WKsvry6M74GDrtqHQ\",\"RcFJfYquW9quJDnp5\",\"yYxPzFqBgtQ9fsyHM\",\"Yp7uvStL97cC9fKkY\",\"n2BRY9X8899dcG8Bw\",\"3pxHTZBsv7MKzFG6Y\",\"dHZqT6h4JMwk5fPC8\",\"pWD2YC5s4YRCxFc2i\",\"zChStAhRfotvGC6C5\",\"ekQh3jzgGLsEMbKo3\",\"JQ5uoxA4WZgN6HyJk\",\"KRmxvA4mWgfKvHmYN\",\"sz8ufn9i8zeiGWpAy\",\"acYvKZTm9y3zz4gfs\",\"DrkR35NqnP9NDLbq6\",\"S9hHPiybdTKyuELsn\",\"4za87fFyw9qxkD936\",\"MKT7khMBGXzA22ykf\",\"KdNDysEsy2TW5QRJ2\",\"HF28xZKSLM9wEuqNg\",\"So6PHm74mfJuY2WTs\",\"yr822PZmmiDDenxpB\",\"QDrLtnBsA2LJfptvT\",\"rcvAxbpK7Nb73Y9ve\",\"DEDniTrstQYGounXT\",\"rgvAJFwfCeYoYnFTK\",\"4rwxLqLs2mNZNg8NB\",\"W5TajitmCyxz87zAC\",\"hnyhBFWwNCz9mDfSi\",\"v9KtC8YLbMWmXiW2H\",\"Ecg4m7srYGgZsb4Ck\",\"yJmwiykSNfLv9NqJ2\",\"GM2X83qnuLXTHe5zA\",\"bJxaKHJqR82EWw8Su\",\"p9riYAbHXwJZ9PhWf\",\"dEuJGZbBQkveCXEFk\",\"N43d68KgA2qv7Jm2Y\",\"iojEnnY9FsMfYzp6f\",\"CwXsu25ygLEwQbmQC\",\"SGhPxX5bHGL8zZqtt\",\"zZDaXBxMzTCBhNkgL\",\"x4dfavjLEcrvAF3QQ\",\"dzS6WBTMHyFEag6Fp\",\"KZ2xddpM2f9JRaryB\",\"yjtdwc2AC4jA2RWtn\",\"ZrKCkX7xxGGZzauFW\",\"ji5f27FPz4wRRF6Ls\",\"jBR47vA7HwAZqp4QA\",\"p8qqFdJ3FSk5x9z3G\",\"P7NmFbCJ5offXMRvB\",\"axdSNLZpiCDF8RS6n\",\"GGprTwrkjuccmrQRg\",\"Kh3Pc2ZRusurLaMyP\",\"mG8HqKiAQFTdRZthG\",\"xwEZk3bNZoNDPJYF5\",\"pmgFEciNrd3ES9tuu\",\"XjajdyybZZbkz8o5x\",\"4fhjJBvLBWh6QeSih\",\"REbXuiozZdcmS4iiJ\",\"abt2C3Y82RX3qbaPt\",\"dkcmCKwqApX5jBggc\",\"qD2LrwaDrSdiybLKY\",\"xn7uGNKeAwPEkP9oA\",\"DPi9QGLctq2y76KuE\",\"6MjSiiBLPcvXbXcaZ\",\"dYPkStFnLvAMsHSzZ\",\"J3upzLHuEwXH7Z2hx\",\"gXTAie79kiw28tx5u\",\"oBcs8GLX2ZFLXQy8y\",\"7scpcTEp3SEx5Wjg9\",\"nc7bRhkxgKyqusYe3\",\"wodo5BgzydW3c82Wd\",\"fznzd3qnvtbFkkizz\",\"iS5BrkGLzJyPK7nKt\",\"cAP3n5NY64uoMwzRR\",\"3LiSLdtN58n46NEqg\",\"9RaccqxB9dRZuS7z4\",\"GGdmhAvxXhqhhibJN\",\"PXAcsKkssS2yLyDv2\",\"KJCDwGkoXh8qtbbKr\",\"FEYpu9RWysAgW3XnP\",\"fTNQmMvTZhhiGBCMe\",\"PWgzeK859suojbrRx\",\"QRv96jmNaYsWkxQEG\",\"rfyEkETeoS96QNH4e\",\"AFfw7cGg83uYk2Miy\",\"2PufnQcsHsfymufX3\",\"8BFSTCnoe2QggN64c\",\"8ZQcS3dPw3wepGBd4\",\"T6iBEE2jp7f7iEF2P\",\"gKnWjDjwrJh7MK2df\",\"o4ixjQGSaYqA2JoM4\",\"yod5YhKtPqw2GfG9B\",\"8sNv5PTHa7XQ8bNqR\",\"JhX7jvtpwNyxcc39m\",\"Ds7L5bksw2QRHjrKL\",\"5HCu9Ydd86QgHDRNP\",\"3KkyQm77zsew58Dc2\",\"Qyfyyw6oC4EHAndzo\",\"5853dyhdg5zEAZMmd\",\"9pzFiFK3ANLjQfnr2\",\"BrTDhPJcACL2bsrpJ\",\"g6dBdzLo5fAiNGz6r\"],\"quality\":[5,5,5,5,4,5,5,4,5,5,5,5,5,5,5,5,5,5,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"isHidden\":false,\"quality\":4.904761904761905,\"family\":[{\"_id\":\"exX3Y9T68wGvLEPHL\",\"language\":\"javascript\"},{\"_id\":\"zE37mNeG4cn6HesaP\",\"language\":\"python3\"},{\"_id\":\"ScQGCEkXaE6KZQgcC\",\"language\":\"ruby\"}]}}"]