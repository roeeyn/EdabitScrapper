a["{\"msg\":\"result\",\"id\":\"2061\",\"result\":{\"_id\":\"9yk63KrKDHzNFWKBJ\",\"author\":\"Luis Pereira\",\"authorId\":\"aEm3Wvj2rFYRL8Lrb\",\"code\":\"def is_it_inside(folders, X, Y):\\n\\t\",\"difficulty\":2.880952380952381,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"Lt4pGRm32oQJB7PXt\",\"instructions\":\"A folder system on a computer might look something like the picture below.\\n\\n![](https://edabit-challenges.s3.amazonaws.com/folders_smaller.png)\\n\\nIn this challenge, folder systems will be represented by dictionaries where the keys are folders X and the value at X is the list of subfolders of X. For example, the picture above becomes the dictionary.\\n\\n```\\n{\\n  \\\"A\\\": [\\\"B\\\", \\\"C\\\", \\\"D\\\"],\\n  \\\"B\\\": [\\\"E\\\", \\\"F\\\"],\\n  \\\"D\\\": [\\\"G\\\", \\\"H\\\"],\\n  \\\"G\\\": [\\\"I\\\", \\\"J\\\"],\\n  \\\"H\\\": [\\\"K\\\"]\\n}\\n```\\n\\nThe inputs for this challenge will be:\\n- A dictionary representing a folder system.\\n- Two folders, X and Y.\\n\\n**Write a function that decides whether \\\"X is inside Y\\\"** (in the illustration, this means that you can travel down from Y to X).\\n\\n### Examples\\n```\\nis_it_inside({\\n  \\\"A\\\": [\\\"B\\\", \\\"C\\\", \\\"D\\\"],\\n  \\\"B\\\": [\\\"E\\\", \\\"F\\\"],\\n  \\\"D\\\": [\\\"G\\\", \\\"H\\\"],\\n  \\\"G\\\": [\\\"I\\\", \\\"J\\\"],\\n  \\\"H\\\": [\\\"K\\\"]\\n}, \\\"B\\\",  \\\"A\\\") ➞ True\\n\\nis_it_inside({\\n  \\\"A\\\": [\\\"B\\\", \\\"C\\\", \\\"D\\\"],\\n  \\\"B\\\": [\\\"E\\\", \\\"F\\\"],\\n  \\\"D\\\": [\\\"G\\\", \\\"H\\\"],\\n  \\\"G\\\": [\\\"I\\\", \\\"J\\\"],\\n  \\\"H\\\": [\\\"K\\\"]\\n}, \\\"B\\\",  \\\"D\\\") ➞ False\\n\\nis_it_inside({\\n  \\\"A\\\": [\\\"B\\\", \\\"C\\\", \\\"D\\\"],\\n  \\\"B\\\": [\\\"E\\\", \\\"F\\\"],\\n  \\\"D\\\": [\\\"G\\\", \\\"H\\\"],\\n  \\\"G\\\": [\\\"I\\\", \\\"J\\\"],\\n  \\\"H\\\": [\\\"K\\\"]\\n}, \\\"I\\\",  \\\"D\\\") ➞ True\\n\\nis_it_inside({\\n  \\\"A\\\": [\\\"B\\\", \\\"C\\\", \\\"D\\\"],\\n  \\\"B\\\": [\\\"E\\\", \\\"F\\\"],\\n  \\\"D\\\": [\\\"G\\\", \\\"H\\\"],\\n  \\\"G\\\": [\\\"I\\\", \\\"J\\\"],\\n  \\\"H\\\": [\\\"K\\\"]\\n}, \\\"A\\\", \\\"K\\\") ➞ False\\n\\nis_it_inside({\\n  \\\"A\\\": [\\\"B\\\", \\\"C\\\", \\\"D\\\"],\\n  \\\"B\\\": [\\\"E\\\", \\\"F\\\"],\\n  \\\"D\\\": [\\\"G\\\", \\\"H\\\"],\\n  \\\"G\\\": [\\\"I\\\", \\\"J\\\"],\\n  \\\"H\\\": [\\\"K\\\"]\\n}, \\\"D\\\", \\\"D\\\") ➞ True\\n```\\n\\n### Notes\\n- All the examples above use the folder system in the illustration, but the tests will use other folder systems as well.\\n- For the purposes of this challenge, any folder is inside itself, as in the last example.\\n- This challenge has a [part 2](https://edabit.com/challenge/cvA35yPFAggr7rtve).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(is_it_inside({'A':['B', 'C', 'D'], 'B':['E', 'F'], 'D':['G', 'H'], 'G':['I', 'J'], 'H': ['K']}, 'B', 'A'), True)\\nTest.assert_equals(is_it_inside({'A':['B', 'C', 'D'], 'B':['E', 'F'], 'D':['G', 'H'], 'G':['I', 'J'], 'H': ['K']}, 'B', 'D'), False)\\nTest.assert_equals(is_it_inside({'A':['B', 'C', 'D'], 'B':['E', 'F'], 'D':['G', 'H'], 'G':['I', 'J'], 'H': ['K']}, 'I', 'D'), True)\\nTest.assert_equals(is_it_inside({'A':['B', 'C', 'D'], 'B':['E', 'F'], 'D':['G', 'H'], 'G':['I', 'J'], 'H': ['K']}, 'A', 'K'), False)\\nTest.assert_equals(is_it_inside({'A':['B', 'C', 'D'], 'B':['E', 'F'], 'D':['G', 'H'], 'G':['I', 'J'], 'H': ['K']}, 'D', 'D'), True)\\n\\n# Different folder system\\nTest.assert_equals(is_it_inside({'A':['B', 'E'], 'B':['R', 'F'], 'D':['S', 'H'], 'G':['A', 'D'], 'S': ['K']}, 'R', 'A'), True)\\nTest.assert_equals(is_it_inside({'A':['B', 'E'], 'B':['R', 'F'], 'D':['S', 'H'], 'G':['A', 'D'], 'S': ['K']}, 'A', 'R'), False)\\nTest.assert_equals(is_it_inside({'A':['B', 'E'], 'B':['R', 'F'], 'D':['S', 'H'], 'G':['A', 'D'], 'S': ['K']}, 'F', 'G'), True)\\nTest.assert_equals(is_it_inside({'A':['B', 'E'], 'B':['R', 'F'], 'D':['S', 'H'], 'G':['A', 'D'], 'S': ['K']}, 'B', 'S'), False)\\nTest.assert_equals(is_it_inside({'A':['B', 'E'], 'B':['R', 'F'], 'D':['S', 'H'], 'G':['A', 'D'], 'S': ['K']}, 'G', 'R'), False)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[1,1,1,1,1,2,3,2,2,2,2,3,2,2,2,3,3,3,4,3,3,4,4,3,3,4,3,4,3,3,3,4,4,3,2,2,4,3,2,4,2,3,4,4,1,4,4,2,3,4,4,5,5,4,3,0,3,3,4,5,1,2,4,5,4,2,2,0,3,4,3,3,3,2,4,3,3,5,1,3,2,2,4,2],\"rators\":[\"aEm3Wvj2rFYRL8Lrb\",\"gJYuGdkXEWWmGRLzu\",\"AasGs8AeX9Lcb9xJn\",\"vLrq4dEDMM2wd68Dc\",\"dHZqT6h4JMwk5fPC8\",\"2fxapKr8XGdNeaKi2\",\"w3A7cBWyAfukk6xEQ\",\"8JyqsSbN2FJXPr3cw\",\"Yp7uvStL97cC9fKkY\",\"9Ly8afdtofp8DXzrt\",\"KcpfY4XZ7fNamyLd3\",\"8PwfYqoDQFThzNtvf\",\"ozqX8HKbqPZnrjjaN\",\"geacYDqsgKbSdLRMC\",\"SxttuqW49sadDrQFf\",\"PytNZK9mNiRiZxPrm\",\"mDWNyaaQ9hvPCRzSd\",\"6E8GoWCrHpDvHZjWG\",\"ywk3XGvcmpTgRxwZa\",\"YRstQuthRkFeBiXug\",\"fznzd3qnvtbFkkizz\",\"LFSASkxgw9hr3KqmC\",\"bLpgu8xTdpDPFSAsM\",\"EjbDDFRECrzQDkzrX\",\"eoZxrByrKitbqbJZH\",\"aCNWav8S8Try9RkC6\",\"CMuhZyDkaZXX4pvTD\",\"aP7JkkYer28YWrPvC\",\"s5M5RvgqR9BhB9JoC\",\"ytotxvNtSzHumcQ9m\",\"qR6hLPuagPSHAgcwn\",\"TCoQs9Erxoue9BvSj\",\"BByKDngfPvW6w4m7d\",\"ZNnsMeNkdDhHjSrZb\",\"hrcR5HxhNTZxGhQx6\",\"5HkEJE35W56jRhuNi\",\"wT5gGgvjKc5wz59AQ\",\"bJaPCBx63YxdJAuTS\",\"aLwJNALj2MpjAGZz4\",\"W5TajitmCyxz87zAC\",\"6TZp5F9a7SdsEnuKs\",\"eHhL37DG7oW3vTcg7\",\"t9Sz6uBgobfCBJzGL\",\"Tu9n4ugzhvNfEyRFd\",\"Xt5mpxGr5P5GLiAJH\",\"ekQh3jzgGLsEMbKo3\",\"KpHrC7WPEojnzgEtz\",\"FgkYtHLxeD8pETJ8T\",\"MKJhn7goNzuGtB5y9\",\"YLtspA8ec6ntcoMMf\",\"Ecg4m7srYGgZsb4Ck\",\"DpqiRAm2yo3W2x4HX\",\"Z4M3NAa4TXquMNkHe\",\"wwMcJQRvf3X59Jyev\",\"aqYgRpDiAKsySWLKn\",\"g4fHfvRM5yC7uWqoP\",\"dzS6WBTMHyFEag6Fp\",\"Nfsj4eNFDjaFa39ga\",\"vTfyrr4pGddp8rbXc\",\"f2BoqyCpgnmjEjLqx\",\"4fhjJBvLBWh6QeSih\",\"97DthwdtrBLm2y2Yj\",\"5whLLs9wNjLpmtQEC\",\"x4dfavjLEcrvAF3QQ\",\"8WpvgSbQciTQWdd8T\",\"xn7uGNKeAwPEkP9oA\",\"oZiGwL535nJ5ZMJr7\",\"Xee5tZbXofdLqNTZP\",\"mcQGrPPJydYWCs43y\",\"HF28xZKSLM9wEuqNg\",\"h4x2jaMdj5aQZbW5g\",\"DNACg4rcgZsPtYGZ8\",\"jsQJLi9LDjpXKFP28\",\"8sNv5PTHa7XQ8bNqR\",\"iS5BrkGLzJyPK7nKt\",\"K3RacTvkWHLfzKF8i\",\"58M252WF7SPRinfBx\",\"d6iEb2BDDofyeePh9\",\"mH5AfrrfASMdRvhtK\",\"zz7kGX4J7TiM4yohg\",\"bvmTE46bfcM4ogj34\",\"iojEnnY9FsMfYzp6f\",\"yjtdwc2AC4jA2RWtn\",\"d8qtzoLB264iP8tdY\",\"MpfytGFYF77emJ3cT\",\"XvqxuL9ThRtd2mF3T\",\"2PufnQcsHsfymufX3\",\"gXTAie79kiw28tx5u\",\"GTKsdeEihE636Le9i\",\"kDq2TnPdy7hGKdAD5\",\"n2qKKxomPnb4zez5M\"],\"total\":95,\"quality\":[2,5,5,5,5,5,5,5,5,5,5,4]},\"flags\":0},\"summary\":\"A folder system on a computer might look something like the picture below.\\n\\nIn this challenge, folder systems will be represented by dictionaries where the keys are folders X and the value at X is the list of subfolders of X. For example, the picture above becomes the dictionary.\\n\\n{\\n  \\\"A\\\": [\\\"B\\\", \\\"C\\\", \\\"D\\\"],\\n  \\\"B\\\": [\\\"E\\\", \\\"F\\\"],\\n  \\\"D\\\": [\\\"G\\\", \\\"H\\\"],\\n  \\\"G\\\": [\\\"I\\\", \\\"J\\\"\",\"tags\":[\"data_structures\",\"algorithms\",\"validation\"],\"timestamp\":{\"$date\":1585946635452},\"title\":\"Folder Challenge (Part #1)\",\"quality\":4.666666666666667,\"family\":[{\"_id\":\"9yk63KrKDHzNFWKBJ\",\"language\":\"python3\"}]}}"]