a["{\"msg\":\"result\",\"id\":\"832\",\"result\":{\"_id\":\"jt8XTr75xxowgi6KM\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def get_student_top_notes(students):\\n\\t\",\"difficulty\":1.397887323943662,\"familyId\":\"AMwAHg4hd3NXa2Lrv\",\"instructions\":\"Create a function that takes a list of student dictionaries and returns a list of their top notes. If the student does not have notes then let's assume their top note is equal to 0.\\n\\n### Examples\\n```\\nget_student_top_notes([\\n  {\\n    \\\"id\\\": 1,\\n    \\\"name\\\": \\\"Jacek\\\",\\n    \\\"notes\\\": [5, 3, 4, 2, 5, 5]\\n  },\\n  {\\n    \\\"id\\\": 2,\\n    \\\"name\\\": \\\"Ewa\\\",\\n    \\\"notes\\\": [2, 3, 3, 3, 2, 5]\\n  },\\n  {\\n    \\\"id\\\": 3,\\n    \\\"name\\\": \\\"Zygmunt\\\",\\n    \\\"notes\\\": [2, 2, 4, 4, 3, 3]\\n  }\\n]) ➞ [5, 5, 4]\\n```\\n\\n### Notes\\nN/A\",\"isHidden\":false,\"lab\":\"# Originally created by @Bartosz Cytrowski \\n\\nTest.assert_equals(get_student_top_notes([\\n  {\\n    \\\"id\\\": 1,\\n    \\\"name\\\": \\\"Jacek\\\",\\n    \\\"notes\\\": [5, 3, 4, 2, 5, 5]\\n  },\\n  {\\n    \\\"id\\\": 2,\\n    \\\"name\\\": \\\"Ewa\\\",\\n    \\\"notes\\\": [2, 3, 3, 3, 2, 5]\\n  },\\n  {\\n    \\\"id\\\": 3,\\n    \\\"name\\\": \\\"Zygmunt\\\",\\n    \\\"notes\\\": [2, 2, 4, 4, 3, 3]\\n  }\\n]), [5, 5, 4])\\n\\nTest.assert_equals(get_student_top_notes([{'id': 1, 'name': 'Rochelle', 'notes': [0, 0, 3, 3, 5]}, {'id': 2, 'name': 'Robert', 'notes': []}, {'id': 3, 'name': 'Hans', 'notes': [2, 4, 5]}, {'id': 4, 'name': 'Joel', 'notes': [2, 5]}, {'id': 5, 'name': 'Eric', 'notes': [3, 5]}, {'id': 6, 'name': 'Cary', 'notes': [1, 2, 0, 0]}, {'id': 7, 'name': 'Cary', 'notes': [3, 2, 1]}, {'id': 8, 'name': 'Dennis', 'notes': [0, 0, 4]}, {'id': 9, 'name': 'Lexi', 'notes': [0, 1, 2, 1, 5]}, {'id': 10, 'name': 'Alfie', 'notes': [0, 1, 3, 4, 3]}]), [5, 0, 5, 5, 5, 2, 3, 4, 5, 4])\\nTest.assert_equals(get_student_top_notes([{'id': 1, 'name': 'Max', 'notes': [1, 5]}, {'id': 2, 'name': 'Cary', 'notes': [0, 5]}, {'id': 3, 'name': 'Lexi', 'notes': [2, 0]}, {'id': 4, 'name': 'Joshua', 'notes': [1, 2, 2]}, {'id': 5, 'name': 'Hans', 'notes': [3, 4, 0, 5, 1]}, {'id': 6, 'name': 'Alfie', 'notes': [0, 0, 2, 1, 5]}, {'id': 7, 'name': 'Ralph', 'notes': [4, 3, 1, 1, 1]}]), [5, 5, 2, 2, 5, 5, 4])\\nTest.assert_equals(get_student_top_notes([{'id': 1, 'name': 'Dennis', 'notes': [0, 4, 3, 4, 5]}, {'id': 2, 'name': 'Rudolf', 'notes': [3, 1]}, {'id': 3, 'name': 'Rudolf', 'notes': [2, 4, 4, 5]}, {'id': 4, 'name': 'Dennis', 'notes': [2, 5]}, {'id': 5, 'name': 'Rochelle', 'notes': [5, 5, 4]}, {'id': 6, 'name': 'John', 'notes': [4]}, {'id': 7, 'name': 'Julius', 'notes': [2, 1, 4, 4]}, {'id': 8, 'name': 'Cary', 'notes': [0, 2, 4, 1, 1]}]), [5, 3, 5, 5, 5, 4, 4, 4])\\nTest.assert_equals(get_student_top_notes([{'id': 1, 'name': 'Ralph', 'notes': [3, 5, 5, 4, 2]}, {'id': 2, 'name': 'Joel', 'notes': []}, {'id': 3, 'name': 'Cary', 'notes': [0, 5, 0, 4]}, {'id': 4, 'name': 'Noel', 'notes': [0, 1, 0, 0]}, {'id': 5, 'name': 'Eric', 'notes': [4, 0]}, {'id': 6, 'name': 'Joe', 'notes': [4, 3]}, {'id': 7, 'name': 'Lexi', 'notes': [1, 3, 0, 5]}, {'id': 8, 'name': 'Max', 'notes': []}]), [5, 0, 5, 1, 4, 4, 5, 0])\\nTest.assert_equals(get_student_top_notes([{'id': 1, 'name': 'Alfie', 'notes': [0, 0]}, {'id': 2, 'name': 'Joshua', 'notes': [3, 4]}, {'id': 3, 'name': 'Alfie', 'notes': [5, 5]}, {'id': 4, 'name': 'Joe', 'notes': [4, 1]}, {'id': 5, 'name': 'Ralph', 'notes': [1, 1, 1]}, {'id': 6, 'name': 'Rochelle', 'notes': [1]}, {'id': 7, 'name': 'Robert', 'notes': [1, 3]}, {'id': 8, 'name': 'Cary', 'notes': [0, 2, 5, 2]}, {'id': 9, 'name': 'Rochelle', 'notes': [1, 5, 4, 3, 2]}, {'id': 10, 'name': 'Eric', 'notes': [4, 4, 5, 1]}, {'id': 11, 'name': 'Hans', 'notes': [1, 4, 3]}, {'id': 12, 'name': 'John', 'notes': [1]}]), [0, 4, 5, 4, 1, 1, 3, 5, 5, 5, 4, 1])\\nTest.assert_equals(get_student_top_notes([{'id': 1, 'name': 'Hans', 'notes': [4, 1, 0]}, {'id': 2, 'name': 'Dennis', 'notes': []}, {'id': 3, 'name': 'Rochelle', 'notes': [2, 2, 3, 3]}, {'id': 4, 'name': 'Jenny', 'notes': [3]}, {'id': 5, 'name': 'Cary', 'notes': [1, 5, 2]}, {'id': 6, 'name': 'Joshua', 'notes': [3, 4, 1, 3, 5]}]), [4, 0, 3, 3, 5, 5])\\nTest.assert_equals(get_student_top_notes([{'id': 1, 'name': 'Robert', 'notes': [5, 0]}, {'id': 2, 'name': 'Rochelle', 'notes': [5, 0, 2, 5, 0]}, {'id': 3, 'name': 'Noel', 'notes': []}, {'id': 4, 'name': 'Max', 'notes': [0, 5, 5, 2]}, {'id': 5, 'name': 'Alfie', 'notes': []}, {'id': 6, 'name': 'Ralph', 'notes': [3, 5, 4, 1, 3]}, {'id': 7, 'name': 'Robert', 'notes': [3, 3, 5]}, {'id': 8, 'name': 'Robert', 'notes': [0, 3]}, {'id': 9, 'name': 'Ralph', 'notes': [2, 4, 0, 5, 4]}, {'id': 10, 'name': 'Joel', 'notes': []}, {'id': 11, 'name': 'Joshua', 'notes': [5, 0, 3]}, {'id': 12, 'name': 'Alfie', 'notes': [0, 4]}, {'id': 13, 'name': 'Max', 'notes': [0, 0, 2, 2]}]), [5, 5, 0, 5, 0, 5, 5, 3, 5, 0, 5, 4, 2])\\nTest.assert_equals(get_student_top_notes([{'id': 1, 'name': 'Joel', 'notes': [5, 0, 0, 3, 1]}, {'id': 2, 'name': 'Alfie', 'notes': [3, 4, 1, 0, 3]}, {'id': 3, 'name': 'Eric', 'notes': []}, {'id': 4, 'name': 'Lexi', 'notes': [4]}, {'id': 5, 'name': 'Max', 'notes': []}, {'id': 6, 'name': 'Ralph', 'notes': [2]}, {'id': 7, 'name': 'Max', 'notes': [1, 3]}, {'id': 8, 'name': 'Hans', 'notes': [2, 0, 2]}, {'id': 9, 'name': 'Hans', 'notes': [0, 2, 3]}, {'id': 10, 'name': 'Jenny', 'notes': [4, 4, 2, 2]}, {'id': 11, 'name': 'Max', 'notes': []}, {'id': 12, 'name': 'Rochelle', 'notes': [1, 2, 2, 3, 2]}, {'id': 13, 'name': 'Cary', 'notes': [4, 1]}, {'id': 14, 'name': 'Jenny', 'notes': [5, 5]}, {'id': 15, 'name': 'Jenny', 'notes': []}, {'id': 16, 'name': 'Rudolf', 'notes': [0, 5, 1, 1]}, {'id': 17, 'name': 'Julius', 'notes': [4, 0]}]), [5, 4, 0, 4, 0, 2, 3, 2, 3, 4, 0, 3, 4, 5, 0, 5, 4])\\nTest.assert_equals(get_student_top_notes([{'id': 1, 'name': 'John', 'notes': []}, {'id': 2, 'name': 'Jenny', 'notes': [0, 1, 4]}, {'id': 3, 'name': 'Robert', 'notes': [5, 0, 3, 1]}, {'id': 4, 'name': 'Ralph', 'notes': [5, 0, 5]}]), [0, 4, 5, 5])\\nTest.assert_equals(get_student_top_notes([{'id': 1, 'name': 'John', 'notes': [5]}, {'id': 2, 'name': 'Robert', 'notes': [1, 5, 5, 5, 5]}, {'id': 3, 'name': 'John', 'notes': []}, {'id': 4, 'name': 'Hans', 'notes': [1]}, {'id': 5, 'name': 'Hans', 'notes': [0, 5]}, {'id': 6, 'name': 'Joshua', 'notes': [1, 0, 3, 0]}, {'id': 7, 'name': 'Robert', 'notes': [5, 4, 5]}, {'id': 8, 'name': 'Cary', 'notes': []}, {'id': 9, 'name': 'John', 'notes': [0, 4, 0, 3, 5]}, {'id': 10, 'name': 'Max', 'notes': [2]}, {'id': 11, 'name': 'Hans', 'notes': []}, {'id': 12, 'name': 'Dennis', 'notes': []}, {'id': 13, 'name': 'Dennis', 'notes': []}]), [5, 5, 0, 1, 5, 3, 5, 0, 5, 2, 0, 0, 0])\\nTest.assert_equals(get_student_top_notes([{'id': 1, 'name': 'Eric', 'notes': [1, 0, 4, 3]}, {'id': 2, 'name': 'Hans', 'notes': [0]}, {'id': 3, 'name': 'Ralph', 'notes': [0]}, {'id': 4, 'name': 'John', 'notes': []}, {'id': 5, 'name': 'Noel', 'notes': [0, 4]}, {'id': 6, 'name': 'Dennis', 'notes': [5, 2, 0, 3, 0]}, {'id': 7, 'name': 'Dennis', 'notes': []}, {'id': 8, 'name': 'Hans', 'notes': [3, 4, 3]}, {'id': 9, 'name': 'Lexi', 'notes': []}, {'id': 10, 'name': 'Alfie', 'notes': [5, 4, 1, 2]}, {'id': 11, 'name': 'Noel', 'notes': []}, {'id': 12, 'name': 'Hans', 'notes': [2, 5, 2]}]), [4, 0, 0, 0, 4, 5, 0, 4, 0, 5, 0, 5])\\nTest.assert_equals(get_student_top_notes([{'id': 1, 'name': 'Cary', 'notes': [0, 0, 5]}, {'id': 2, 'name': 'Dennis', 'notes': [0, 0, 2]}, {'id': 3, 'name': 'Cary', 'notes': [1, 0]}, {'id': 4, 'name': 'Dennis', 'notes': [1]}, {'id': 5, 'name': 'Cary', 'notes': []}, {'id': 6, 'name': 'Alfie', 'notes': [5]}, {'id': 7, 'name': 'Jenny', 'notes': [4]}, {'id': 8, 'name': 'Rudolf', 'notes': [4, 1, 2, 3]}, {'id': 9, 'name': 'Cary', 'notes': []}, {'id': 10, 'name': 'Rudolf', 'notes': [2, 4, 3]}, {'id': 11, 'name': 'Joel', 'notes': []}, {'id': 12, 'name': 'Ralph', 'notes': [5, 3]}, {'id': 13, 'name': 'Hans', 'notes': [3]}, {'id': 14, 'name': 'Lexi', 'notes': [4, 2, 4]}, {'id': 15, 'name': 'John', 'notes': [2, 1, 0, 2, 4]}, {'id': 16, 'name': 'Rudolf', 'notes': []}]), [5, 2, 1, 1, 0, 5, 4, 4, 0, 4, 0, 5, 3, 4, 4, 0])\\nTest.assert_equals(get_student_top_notes([{'id': 1, 'name': 'Max', 'notes': [1, 2, 2]}, {'id': 2, 'name': 'Noel', 'notes': [3, 2, 4, 5, 3]}, {'id': 3, 'name': 'Joe', 'notes': [3, 5, 1, 1]}, {'id': 4, 'name': 'Joel', 'notes': [1, 4]}, {'id': 5, 'name': 'Robert', 'notes': [1, 2, 5, 5]}]), [2, 5, 5, 4, 5])\\nTest.assert_equals(get_student_top_notes([{'id': 1, 'name': 'Robert', 'notes': [5]}, {'id': 2, 'name': 'John', 'notes': [1]}, {'id': 3, 'name': 'Max', 'notes': []}, {'id': 4, 'name': 'Jenny', 'notes': [0, 0, 0]}, {'id': 5, 'name': 'Dennis', 'notes': [0, 5, 5]}, {'id': 6, 'name': 'Dennis', 'notes': [2, 0, 3, 2]}, {'id': 7, 'name': 'Rochelle', 'notes': [5, 2, 1, 2, 2]}]), [5, 1, 0, 0, 5, 3, 5])\\nTest.assert_equals(get_student_top_notes([{'id': 1, 'name': 'Robert', 'notes': [3]}, {'id': 2, 'name': 'Eric', 'notes': [2, 3, 1]}, {'id': 3, 'name': 'Joel', 'notes': [1, 2, 0]}, {'id': 4, 'name': 'Joshua', 'notes': [4, 2]}, {'id': 5, 'name': 'Lexi', 'notes': [5, 2, 1]}, {'id': 6, 'name': 'John', 'notes': [4, 0, 3]}, {'id': 7, 'name': 'Rochelle', 'notes': [4, 2, 1, 2]}, {'id': 8, 'name': 'Rochelle', 'notes': [1, 4, 5, 3]}, {'id': 9, 'name': 'Rudolf', 'notes': [5, 5, 3, 4, 2]}, {'id': 10, 'name': 'Jenny', 'notes': [4, 5]}, {'id': 11, 'name': 'Joe', 'notes': [0, 0]}, {'id': 12, 'name': 'Robert', 'notes': [4, 5, 5, 4, 2]}, {'id': 13, 'name': 'John', 'notes': [1]}]), [3, 3, 2, 4, 5, 4, 4, 5, 5, 5, 0, 5, 1])\\nTest.assert_equals(get_student_top_notes([{'id': 1, 'name': 'Lexi', 'notes': []}, {'id': 2, 'name': 'Julius', 'notes': []}, {'id': 3, 'name': 'Joe', 'notes': []}, {'id': 4, 'name': 'Rochelle', 'notes': [3, 4, 2]}, {'id': 5, 'name': 'Dennis', 'notes': [3]}, {'id': 6, 'name': 'Julius', 'notes': [5, 3, 3, 3]}, {'id': 7, 'name': 'Cary', 'notes': [5, 1, 4, 4]}]), [0, 0, 0, 4, 3, 5, 5])\\nTest.assert_equals(get_student_top_notes([{'id': 1, 'name': 'Ralph', 'notes': [4, 5, 1]}, {'id': 2, 'name': 'Cary', 'notes': [3, 2, 1, 4]}, {'id': 3, 'name': 'Rochelle', 'notes': [4]}, {'id': 4, 'name': 'Noel', 'notes': [5]}, {'id': 5, 'name': 'Joe', 'notes': []}]), [5, 4, 4, 5, 0])\\nTest.assert_equals(get_student_top_notes([]), [])\\nTest.assert_equals(get_student_top_notes([{'id': 1, 'name': 'Alfie', 'notes': []}, {'id': 2, 'name': 'Hans', 'notes': [1, 3, 1, 2, 0]}, {'id': 3, 'name': 'Alfie', 'notes': [3, 4, 5, 1, 2]}, {'id': 4, 'name': 'Hans', 'notes': [1, 1]}, {'id': 5, 'name': 'Hans', 'notes': [3, 3, 2, 4, 0]}]), [0, 3, 5, 1, 4])\\nTest.assert_equals(get_student_top_notes([{'id': 1, 'name': 'Rudolf', 'notes': [0, 3, 3, 0, 2]}, {'id': 2, 'name': 'Rochelle', 'notes': [0, 4, 2, 0]}, {'id': 3, 'name': 'Lexi', 'notes': [5, 0, 2, 3, 0]}, {'id': 4, 'name': 'Max', 'notes': [1, 2, 2, 4]}, {'id': 5, 'name': 'Rochelle', 'notes': [1]}, {'id': 6, 'name': 'Hans', 'notes': [1]}, {'id': 7, 'name': 'Robert', 'notes': [1, 3]}, {'id': 8, 'name': 'Noel', 'notes': [3, 3, 4, 5]}]), [3, 4, 5, 4, 1, 1, 3, 5])\\nTest.assert_equals(get_student_top_notes([{'id': 1, 'name': 'Jenny', 'notes': [3, 1, 0]}, {'id': 2, 'name': 'Max', 'notes': []}, {'id': 3, 'name': 'Alfie', 'notes': [2]}, {'id': 4, 'name': 'Lexi', 'notes': []}, {'id': 5, 'name': 'John', 'notes': [1, 5, 4, 1]}, {'id': 6, 'name': 'Noel', 'notes': []}, {'id': 7, 'name': 'Hans', 'notes': [1, 4]}, {'id': 8, 'name': 'Ralph', 'notes': []}, {'id': 9, 'name': 'John', 'notes': []}, {'id': 10, 'name': 'Cary', 'notes': [0, 1, 4, 1]}, {'id': 11, 'name': 'Rochelle', 'notes': [4, 5, 2, 3, 3]}, {'id': 12, 'name': 'Dennis', 'notes': [2]}, {'id': 13, 'name': 'Alfie', 'notes': [5, 0, 5, 3, 0]}, {'id': 14, 'name': 'Joel', 'notes': []}, {'id': 15, 'name': 'Rudolf', 'notes': [5]}, {'id': 16, 'name': 'Noel', 'notes': [2, 1, 1, 3, 1]}]), [3, 0, 2, 0, 5, 0, 4, 0, 0, 4, 5, 2, 5, 0, 5, 3])\\nTest.assert_equals(get_student_top_notes([{'id': 1, 'name': 'Noel', 'notes': [3, 3, 5, 3, 2]}, {'id': 2, 'name': 'Robert', 'notes': [5, 3]}, {'id': 3, 'name': 'Julius', 'notes': []}, {'id': 4, 'name': 'Julius', 'notes': [0, 2, 1]}, {'id': 5, 'name': 'Ralph', 'notes': [2, 3, 5, 4]}, {'id': 6, 'name': 'Joel', 'notes': []}, {'id': 7, 'name': 'Rochelle', 'notes': [0, 2]}, {'id': 8, 'name': 'Jenny', 'notes': [3, 0, 1]}, {'id': 9, 'name': 'Julius', 'notes': [3]}, {'id': 10, 'name': 'Hans', 'notes': [5, 3, 5, 2]}, {'id': 11, 'name': 'John', 'notes': []}]), [5, 5, 0, 2, 5, 0, 2, 3, 3, 5, 0])\\nTest.assert_equals(get_student_top_notes([{'id': 1, 'name': 'Alfie', 'notes': [0]}, {'id': 2, 'name': 'Cary', 'notes': []}, {'id': 3, 'name': 'Rudolf', 'notes': [3, 0, 0, 0, 1]}, {'id': 4, 'name': 'Cary', 'notes': [5, 0]}, {'id': 5, 'name': 'Hans', 'notes': [4, 4]}, {'id': 6, 'name': 'Eric', 'notes': [1, 4]}]), [0, 0, 3, 5, 4, 4])\\nTest.assert_equals(get_student_top_notes([{'id': 1, 'name': 'Joel', 'notes': [2, 5, 2, 2, 3]}, {'id': 2, 'name': 'Joel', 'notes': [1, 0]}, {'id': 3, 'name': 'Julius', 'notes': []}, {'id': 4, 'name': 'Noel', 'notes': [1, 4, 3]}, {'id': 5, 'name': 'Alfie', 'notes': [4, 1]}, {'id': 6, 'name': 'Jenny', 'notes': []}, {'id': 7, 'name': 'Hans', 'notes': [0, 0]}, {'id': 8, 'name': 'Robert', 'notes': [0, 2]}, {'id': 9, 'name': 'Lexi', 'notes': []}, {'id': 10, 'name': 'John', 'notes': [0, 4, 0, 2, 0]}, {'id': 11, 'name': 'Lexi', 'notes': [3, 1, 4, 1]}, {'id': 12, 'name': 'Robert', 'notes': [4, 2, 5, 0, 4]}]), [5, 1, 0, 4, 4, 0, 0, 2, 0, 4, 4, 5])\\nTest.assert_equals(get_student_top_notes([{'id': 1, 'name': 'Rudolf', 'notes': [3]}, {'id': 2, 'name': 'Ralph', 'notes': [2, 3, 0]}, {'id': 3, 'name': 'Jenny', 'notes': [3, 0, 3, 2, 4]}, {'id': 4, 'name': 'Alfie', 'notes': [0, 5, 3]}]), [3, 3, 4, 5])\\nTest.assert_equals(get_student_top_notes([{'id': 1, 'name': 'Ralph', 'notes': [0, 1]}, {'id': 2, 'name': 'Joshua', 'notes': [3, 2, 5]}, {'id': 3, 'name': 'Noel', 'notes': [3, 0, 5, 0, 2]}, {'id': 4, 'name': 'Lexi', 'notes': [4, 1]}, {'id': 5, 'name': 'Joel', 'notes': [3, 0]}, {'id': 6, 'name': 'John', 'notes': [1, 2, 3, 2, 0]}, {'id': 7, 'name': 'Max', 'notes': [2]}, {'id': 8, 'name': 'Hans', 'notes': [2, 1, 1, 0, 5]}, {'id': 9, 'name': 'Joel', 'notes': []}, {'id': 10, 'name': 'John', 'notes': [2, 3]}, {'id': 11, 'name': 'Lexi', 'notes': []}, {'id': 12, 'name': 'Dennis', 'notes': []}, {'id': 13, 'name': 'Max', 'notes': [4, 4, 1, 3]}, {'id': 14, 'name': 'John', 'notes': [4]}, {'id': 15, 'name': 'Julius', 'notes': [1, 1, 1, 5, 1]}, {'id': 16, 'name': 'Hans', 'notes': [4, 3, 1, 4]}]), [1, 5, 5, 4, 3, 3, 2, 5, 0, 3, 0, 0, 4, 4, 5, 4])\\nTest.assert_equals(get_student_top_notes([{'id': 1, 'name': 'Eric', 'notes': [2, 1, 4, 5]}, {'id': 2, 'name': 'Hans', 'notes': [0, 5, 4, 2, 3]}, {'id': 3, 'name': 'John', 'notes': []}, {'id': 4, 'name': 'Alfie', 'notes': [4, 5]}, {'id': 5, 'name': 'Hans', 'notes': [2]}, {'id': 6, 'name': 'Lexi', 'notes': [5, 2, 2, 4, 2]}, {'id': 7, 'name': 'Lexi', 'notes': [2, 4, 5, 3, 1]}, {'id': 8, 'name': 'Joel', 'notes': []}, {'id': 9, 'name': 'Dennis', 'notes': [5, 0, 1, 2]}, {'id': 10, 'name': 'Joel', 'notes': [1, 1, 2, 2]}, {'id': 11, 'name': 'Joshua', 'notes': [0, 1, 4, 2, 1]}, {'id': 12, 'name': 'Cary', 'notes': [4, 1, 4, 2]}, {'id': 13, 'name': 'Eric', 'notes': [4, 1, 5, 4]}, {'id': 14, 'name': 'Ralph', 'notes': [1, 4, 3]}, {'id': 15, 'name': 'Dennis', 'notes': []}]), [5, 5, 0, 5, 2, 5, 5, 0, 5, 2, 4, 4, 5, 4, 0])\\nTest.assert_equals(get_student_top_notes([{'id': 1, 'name': 'John', 'notes': [5, 1, 0, 0, 2]}, {'id': 2, 'name': 'Alfie', 'notes': []}, {'id': 3, 'name': 'Rudolf', 'notes': [4, 2]}, {'id': 4, 'name': 'Cary', 'notes': []}, {'id': 5, 'name': 'Max', 'notes': []}, {'id': 6, 'name': 'Julius', 'notes': []}, {'id': 7, 'name': 'Julius', 'notes': [5, 0, 5, 2, 1]}, {'id': 8, 'name': 'Dennis', 'notes': [0, 0, 1, 4, 1]}, {'id': 9, 'name': 'John', 'notes': []}, {'id': 10, 'name': 'Noel', 'notes': [5]}, {'id': 11, 'name': 'Joel', 'notes': [1, 0, 0]}, {'id': 12, 'name': 'Lexi', 'notes': [5, 1, 1, 3]}, {'id': 13, 'name': 'Cary', 'notes': [2, 0, 1, 2, 1]}]), [5, 0, 4, 0, 0, 0, 5, 4, 0, 5, 1, 5, 2])\\nTest.assert_equals(get_student_top_notes([{'id': 1, 'name': 'Robert', 'notes': []}, {'id': 2, 'name': 'Dennis', 'notes': [5, 0, 0]}, {'id': 3, 'name': 'Max', 'notes': [3, 2, 0, 2, 5]}]), [0, 5, 5])\",\"language\":\"python3\",\"summary\":\"Create a function that takes an list of student dictionaries and returns a list of their top notes. If student does not have notes then let's assume their top note is equal to 0.\\n\\nExamples\\ngetstudenttop_notes([\\n  {\\n    \\\"id\\\": 1,\\n    \\\"name\\\": \\\"Jacek\\\",\\n    \\\"notes\\\": [5, 3, 4, 2, 5, 5]\\n  },\\n  {\\n    \\\"id\\\": 2,\\n    \\\"name\\\": \\\"Ewa\\\",\\n    \\\"notes\\\": [2, 3, 3, 3, 2, 5]\\n  },\\n  {\",\"tags\":[\"arrays\",\"objects\"],\"timestamp\":{\"$date\":1581867054573},\"title\":\"Get Student Top Notes\",\"stats\":{\"completed\":{\"total\":376,\"ratings\":[2,2,2,2,2,1,2,1,1,2,2,1,2,1,1,2,1,2,2,2,1,1,0,2,2,0,2,1,2,2,0,1,0,0,0,2,2,2,1,1,2,1,3,2,1,2,1,2,2,2,2,1,2,0,1,2,1,1,1,2,2,0,0,2,5,2,1,2,2,2,2,2,2,2,1,1,1,2,2,2,0,2,0,2,1,1,0,2,2,1,1,2,2,1,2,0,1,1,2,2,2,0,2,0,1,0,1,2,2,1,0,2,2,2,2,1,2,1,0,2,2,2,1,2,2,2,2,2,2,2,2,1,2,2,1,3,2,0,0,0,2,0,2,2,2,2,0,1,1,2,1,2,2,1,1,0,0,0,2,0,2,2,0,2,0,0,2,2,2,2,2,1,2,0,1,2,2,2,2,2,1,1,2,2,0,0,2,1,1,0,2,2,2,2,2,0,2,2,0,2,1,1,2,2,1,0,2,1,1,0,2,2,2,1,2,2,0,2,1,1,1,1,1,2,2,2,0,1,2,0,2,2,2,2,1,1,2,2,0,1,2,1,2,2,2,2,2,2,2,1,2,1,2,0,2,1,2,2,0,1,3,2,2,2,2,1,2,0,1,2,0,1,2,1,2,1,0,1,0,0,1,1,2,2],\"rators\":[\"tAF9Gf6PiGogbZuWs\",\"PXAcsKkssS2yLyDv2\",\"s5M5RvgqR9BhB9JoC\",\"gb9rvGus2Jv7bjZSs\",\"C4QntmkYtB89GNtpd\",\"AasGs8AeX9Lcb9xJn\",\"Jqk2uJZZxEv5wZFze\",\"Yp7uvStL97cC9fKkY\",\"8JyqsSbN2FJXPr3cw\",\"4CFzv558qbGcpQwc4\",\"u5u2YpHXiNgzDNJdX\",\"BeFnbPbMnAM2SjBdZ\",\"v3fjGuc7Pq4yjFygS\",\"2fxapKr8XGdNeaKi2\",\"myXAR5qDJsBaPnff2\",\"yZvzB3qFb8pkHy4dg\",\"HQxp7NcdvF92G7bYS\",\"zg8GmMSP2LkHBtAzy\",\"w3A7cBWyAfukk6xEQ\",\"yabtHTtycsWhcGBfD\",\"mxX4rH5ELYkdZ2Mbw\",\"hnyhBFWwNCz9mDfSi\",\"9Ly8afdtofp8DXzrt\",\"jeuoearPPTcGPgXhf\",\"LA2YneDcbtiSj5SH6\",\"4tgBydK887PitgAoi\",\"cR3ibTMxLyEdDFCHY\",\"dHZqT6h4JMwk5fPC8\",\"aRqQ42J5zqCmBNd8w\",\"6abffx8jQDCf7kgvb\",\"hSKiK9yb54DNxMrZ6\",\"cqDm5TJgJLAQyhkiN\",\"sz8ufn9i8zeiGWpAy\",\"j2wcHGHmPCHbaQEye\",\"RT2F5THkSKcdmPgBb\",\"4eNkGG3T9iBqeC7Qs\",\"X29Ekg7HjqHAYgCSM\",\"esY84P5NBKF8TWHDv\",\"C9LKGu2g5hSijvDzA\",\"PSrcg6fy835R4c5CW\",\"XYziYR4SmSobmYtRd\",\"rJGeRSCjGzRuYfHZS\",\"WtFQigNmNZ5EREPzo\",\"ey3CASd6Je5LEJzfB\",\"vLrq4dEDMM2wd68Dc\",\"pMg2Zddm29zRGP6wg\",\"jNvegJWCk5HCtEMbK\",\"8LfTheFzvicameoz9\",\"2QGRoQn2dRq3scu7k\",\"2iFe3EHEH2YdhSKrs\",\"8PwfYqoDQFThzNtvf\",\"wZoxzQDbso9SMAPkY\",\"HF28xZKSLM9wEuqNg\",\"ZNnsMeNkdDhHjSrZb\",\"gJYuGdkXEWWmGRLzu\",\"mybpojPXaZigaqsAD\",\"aEm3Wvj2rFYRL8Lrb\",\"9uZpgAtSuPZ7W7DL6\",\"q5a96XumccZyhQNyL\",\"J5T8gZqiZXFuFDTQ7\",\"Fk9kLwoG4Brf4KsKf\",\"KRSKj7ikX2ytWFmod\",\"Cc2Cgj4MWXZxsTooC\",\"kYWb8BwpKwunQkxeX\",\"DEDniTrstQYGounXT\",\"b37Mu6yENyEfBQuCq\",\"ys8KXMt9bQdEf6uqK\",\"TR5aWdDKP6iaL6mGK\",\"iCDqhZGvszrXpDRuW\",\"M8dQuMrEpP8Hc3tHN\",\"9pzFiFK3ANLjQfnr2\",\"KdNDysEsy2TW5QRJ2\",\"B7s63hpQoBswMYPBs\",\"hab8YixsXxe4CcZpP\",\"Nua6T3dBurBy3Qfg9\",\"zT9LpkiwYjLviYYW6\",\"MKT7khMBGXzA22ykf\",\"v9KtC8YLbMWmXiW2H\",\"FzxTj4GuujhwpZM7y\",\"nfXGHENb5md7m355s\",\"FEYpu9RWysAgW3XnP\",\"ahk2qiXKJA753wAJk\",\"2NGSwAJk9NHt3toCo\",\"yr822PZmmiDDenxpB\",\"DrkR35NqnP9NDLbq6\",\"XrqNzJ2FRG8HnGiR6\",\"fYXiqjFvkQZqmjgCi\",\"LWCzZ8mb8gwrRNGfq\",\"s2ZMtR9deh6Kia7pb\",\"a777e8chPvJkY3tKa\",\"dKKMvaYoJunNPk5Wa\",\"NG8PWBSjsM8mMhQEq\",\"E8TMSMSamEbBtf9Lo\",\"ELfyvLSAPDbhksDBb\",\"ekQh3jzgGLsEMbKo3\",\"4rwxLqLs2mNZNg8NB\",\"n2ck2WGuM35vbZiFz\",\"2ptN2mhjFwFcHyPZd\",\"eMuCpJ2spXWkJjWNz\",\"3cF6NXq3ZEwdkgSjb\",\"yKttxy9JGn5Jzwuj6\",\"jBR47vA7HwAZqp4QA\",\"H4abACFDH5t8CnnyH\",\"ZrKCkX7xxGGZzauFW\",\"NNE5HNRXAkmhrWgyQ\",\"W5TajitmCyxz87zAC\",\"mDWNyaaQ9hvPCRzSd\",\"n2BRY9X8899dcG8Bw\",\"YcCLwitFMAEJSnxAW\",\"zd9FLSzsGz3evKafy\",\"2innwjWqxJHo4eRGh\",\"Ne8mK9DDHG8TRkoxG\",\"syRNbbPdLCGXbH2Gy\",\"8TAYWzqJAkXq2MAba\",\"wYBLRB4YuWXE3HRp9\",\"8BFSTCnoe2QggN64c\",\"So6PHm74mfJuY2WTs\",\"6SKDJwXpev4qPSzgM\",\"LyaZoABZYGfJBw2RF\",\"734MLX2YgLcZpSNHi\",\"8zWoQQvtYdg5yoweM\",\"iojEnnY9FsMfYzp6f\",\"GM2X83qnuLXTHe5zA\",\"R4SjTgDnpigJYDLyL\",\"yNjkHfHESBAnCssPB\",\"cYoWJ8sQE3mdBhJ9D\",\"9CoqdidjM9KbeKnHY\",\"Pe8vWpDHRuH9nSGKW\",\"JZbBYihgT6m7bKvgc\",\"tZtama5GRL2EnGrDr\",\"iS5BrkGLzJyPK7nKt\",\"nys6kJatAFrKL59Pf\",\"yjtdwc2AC4jA2RWtn\",\"hRiMXDZNAzyPd5tpt\",\"HqmxnQJM66Y57twhn\",\"oBcs8GLX2ZFLXQy8y\",\"dzS6WBTMHyFEag6Fp\",\"ta5CrWnBCRusD2WMo\",\"Wv2vJnEj8ywNmARoF\",\"yAouD3PxzED8a4gap\",\"i2ZyBQDbgjH3xEBn8\",\"YA7SDhpgEtsqynvNL\",\"axFGc8QrcLfdPgmhi\",\"RehJGBFS6CYiWdjZx\",\"JS3hNM3XXkxPdg3yk\",\"i5iePG5GqhJJ8HEoB\",\"TPhfpB5tzQWSSn67n\",\"EMJ6uvBZkie429gdg\",\"Ecg4m7srYGgZsb4Ck\",\"p8qqFdJ3FSk5x9z3G\",\"u7i7WPM63n42r8R8o\",\"HnJuYrgwLJwXtboE3\",\"3LiSLdtN58n46NEqg\",\"ji5f27FPz4wRRF6Ls\",\"5HCu9Ydd86QgHDRNP\",\"KLmLKaJPfsYxp42p2\",\"SkQcb2sRn4as5KpnN\",\"6HgMANhu6WiGyXSGN\",\"b5oEvBqHWLRnJgp22\",\"NzbRqGWspQnWMoDrF\",\"sHjfbGQGLHE6JR6qu\",\"CTKmXtrqDYqJBnuy8\",\"7K2GEb5TZRtSpyyGS\",\"FvFhg2wELM3SCZDZQ\",\"k2Eo3wyfZZ6KxvKhN\",\"Kh3Pc2ZRusurLaMyP\",\"tpxMgkGSHwBjS95Ta\",\"mG8HqKiAQFTdRZthG\",\"kNrnnMxhFZztMTBAX\",\"PcfcAbTJPrdzJN2FW\",\"FK2fEQ3F6DD3buSLJ\",\"6428wKHtwKkFdvBs5\",\"gXTAie79kiw28tx5u\",\"b5zo7s6xrqWgQnPao\",\"hkJGLuib5md8vZ9HD\",\"zfGYZ7gpR8fxJpagh\",\"8WpvgSbQciTQWdd8T\",\"eEK5MpDgtJyYtZzuM\",\"idjmFCuqPacBPvCzw\",\"axdSNLZpiCDF8RS6n\",\"QRv96jmNaYsWkxQEG\",\"j49s8dHmmiyPxZmWj\",\"zvR7koBTGcaj5pJNQ\",\"rrSC943cCKNG48sH4\",\"fnkbcP3nH3soTAFKx\",\"dBzwBtRjZqB98DJeB\",\"DCLoZNDf8h6TB7gxn\",\"DPi9QGLctq2y76KuE\",\"qRMyPsTjFp255TrrK\",\"9FCeFzjPA4jrQ7oHW\",\"4fhjJBvLBWh6QeSih\",\"YRdu63HNTKd6YmWpd\",\"d8qtzoLB264iP8tdY\",\"pJj86xc32Bs7Frxvi\",\"J3upzLHuEwXH7Z2hx\",\"cAP3n5NY64uoMwzRR\",\"cE4rgfJr4yYT2dKsn\",\"6MjSiiBLPcvXbXcaZ\",\"RGMbFMZXJr7DhcAJy\",\"kQH5b8MXJunh84Czq\",\"5f6oSeq4r5WTXLdCQ\",\"bccs9koJxyQ9XNiLC\",\"Hs99KeBeE2RixWzY9\",\"NfMJuiBk6FN5Jc6ow\",\"dYPkStFnLvAMsHSzZ\",\"8fZxjQfuXw5HMSRJM\",\"g9FyJ8yeT9ic97Qp2\",\"KJCDwGkoXh8qtbbKr\",\"pduNK68oazqQTtbLp\",\"yod5YhKtPqw2GfG9B\",\"YRAzEBJoLvSaiPtYx\",\"5XiuAqicKD4hBdu63\",\"Cybtjz3cF7RgoiqrN\",\"hKqn2TRhqwwyLcE66\",\"sbJcFfQjQ59Wfg4Cd\",\"oyKcm3zqdy8Ko5P5d\",\"4fjSgcqhQQZM2ZFRP\",\"C2AfMipCicfD58WJ9\",\"AJexRBN9cYQmqvYu6\",\"DpnYcMphntjsQ96qg\",\"3pxHTZBsv7MKzFG6Y\",\"HuNF3xTBzmatyGSTm\",\"AXcnPX68zdMiLNSmu\",\"utTuvGdmu2sBHWBhQ\",\"o4ixjQGSaYqA2JoM4\",\"wjc4iejpErBhxWwHo\",\"oig8ig9SE9RZa8ttL\",\"YLFHcoEWk6PzJPsnZ\",\"nJXgbSQozcoE8Wn4N\",\"cZccqzRQ9GgjQF6Az\",\"WdKdsgH9gXkKgCycx\",\"Lg4t6SEWgtYz4u7Cj\",\"GGdmhAvxXhqhhibJN\",\"MXGuntvz3byrP6WJc\",\"p7js9trz2zk2RorCR\",\"eYfPWvZwnJQkHbSTK\",\"5S9nX4rKsnCcnv4Cz\",\"srJ34BaybkQh3qRkM\",\"DqNQn9Jsxcu5HijKE\",\"aaJWssCWfMa63XJng\",\"5hQnRWiKkhgKJXNMP\",\"gf7u4MKcGDFiijzK9\",\"7N6c3Xu244bnQWjBs\",\"nFbmNzMQ38TncmfQX\",\"Ds7L5bksw2QRHjrKL\",\"LPGPHgJc8MkvcEDBc\",\"buX4mCQhtXCfBjeno\",\"qAby4AWXmTNeusvg3\",\"e7QB5tCAeoSeRCTxY\",\"EfxwqhYdapX3dMQC2\",\"qZQxPQ2kaNKAMesHT\",\"4Lwjr34ypKNQNQCar\",\"q6QsMYNMpPNtmyTeW\",\"qQQ4hCQpzitmHSkjS\",\"CHvzhtXnv8HTbPQ56\",\"T2vhHPhRR96hRizq8\",\"pPpmP7xeJzGgK362R\",\"9ivvGvJGvtQfigQaZ\",\"T6iBEE2jp7f7iEF2P\",\"BrTDhPJcACL2bsrpJ\",\"nc7bRhkxgKyqusYe3\",\"ijNKM8DuspXuAnC4y\",\"sKfrD9gjCDHuqLzSk\",\"iYXdNw7tKcgA3QwBX\",\"BJp2WkwLWGHHB5oQW\",\"AFfw7cGg83uYk2Miy\",\"AQSqD9oNv2uPfxZCR\",\"vjWzDJa6NQnuwA3s5\",\"2HfNkb2SoqdyjKW3o\",\"XD5nmvKQchKezPXhy\",\"JhX7jvtpwNyxcc39m\",\"Fb2wehA7QgTFWry2x\",\"dJzNF59j2p8jWZxiQ\",\"Wpn95NqWxncQrwNgz\",\"K6MfKMytoJJuSGewP\",\"66a9xX73nmTEuKs9k\",\"GTKsdeEihE636Le9i\",\"PC3pLs36zNzpRDSuE\",\"2PufnQcsHsfymufX3\",\"c2q7mY39z5JPEMCaM\",\"jL4y5fTJAMBjhZmko\",\"jWbd7SYDzLPjc9EDh\",\"X4rzfxGgxx6CS7Bpz\",\"utyt9o5BYPWRbXf2X\",\"ghMkPtdFCpM6w8nax\",\"tdfY4iBvD7oh2ufnN\",\"mvJBakQ35CWAnbbEZ\",\"RoGGD5cpHb4ftdLDv\",\"joxsWNqkSudzBYLpw\",\"R6YxHWAiLgKwy5YvC\",\"a6fgDQTddtZCKfnzR\",\"wwMcJQRvf3X59Jyev\",\"JiSpvq6C7azQEmENc\",\"qzXAMXsHZGT8o5hTA\",\"4RY3zj9C2t8GGefhi\",\"W3esi7nZLHyXmyZSd\",\"hR7GMiqGap4CzEWSy\",\"4TmgHkn5vqyHK3sYC\",\"StNu7DPyTgEStZsMY\",\"QFZcdxGKBaFZb7Zbk\",\"T6Rm8mREPMZSftzrC\",\"jkbavR2ATFJcpmo8M\",\"uGuS9YRXW2nj4p6zf\",\"pQwhNKiCne4gEZgcn\",\"jCjCvyhqhpebkJn34\",\"xdgy7nWSKCekXnaJM\",\"eHcgvkTGsH7ZziqBo\",\"LQxof8pGabGuWP7Gn\",\"Zu8sDAXAfP3oni5dQ\",\"reSPwrcdzBAnDWs2E\",\"N2wnZXkhDH86mgjQ8\",\"d9LBRxvADNBB5QJMB\",\"hpT9yYe5R45poHrYR\",\"uK58g2EXxqxTaB2iA\",\"AMpQSjKsRqhCDyS2j\",\"dSd7wHgXGQeG5BQ2P\",\"rCrbqMiaGPgHYTNxu\",\"hRfdHT8bWztZuCqzi\",\"3KkyQm77zsew58Dc2\",\"Qyfyyw6oC4EHAndzo\",\"B4y8aoyXJtskYPFEL\",\"M2gFMJkocQSY6bsFR\",\"QWjsXnLaJ7xfL3Amq\",\"qB6KSTYC6H2TQEQY6\",\"8uiLiJcmWxWe6qw65\",\"FRN2W8RYpJ6GPhgRy\",\"5QN8R22z43SrwoHDz\",\"eW9R2SCoYnY8HBAdL\",\"vCeeMuYDbz3MB4vsk\",\"ctbThYbufFCYbRK4f\",\"vAbK8sCfKyFC78HYg\",\"ruzwBPphPDRgLXdnP\",\"Wi4H6ayKsNDWWQCG5\",\"Ncn7Qn2LbdsiJnfFk\",\"rDgKHd6ZSSpboiAj7\",\"NHp9cXgWCyX6KqyMT\",\"RfbjShbg8jmhyNtJh\",\"WQubx7DAkG6WZE8FA\",\"wrL4iX2CCSqDCCty3\"],\"quality\":[4,5,4,5,4,2,4,5,5,5,4,5,5,5,5,4,5,4,4,4,5,5,5,5,5,5,5,4,5,4,5,4,5,5,5,5,5,2,5,5,5,5,4,5,5,4,5,5,5,5,5,5,5,5,4,5,5,5,4,4]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":4.616666666666666,\"family\":[{\"_id\":\"b7dXbWEhbr3bXCk7i\",\"language\":\"javascript\"},{\"_id\":\"jt8XTr75xxowgi6KM\",\"language\":\"python3\"},{\"_id\":\"4mejZnWotJQ8nWSyc\",\"language\":\"ruby\"}]}}"]