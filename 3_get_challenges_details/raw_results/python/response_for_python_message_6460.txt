a["{\"msg\":\"result\",\"id\":\"1936\",\"result\":{\"_id\":\"snZDZ8nxwGCJCka5M\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"def pyramidal_string(string, _type):\\n\\t\",\"difficulty\":2.7,\"familyId\":\"qSuJtBivYar8SXNx4\",\"instructions\":\"In this challenge, you have to obtain a pyramidal version of a given string, transforming the string into a list containing a series of string slices that progressively increase or decrease **steadily** from the left to the right. Every slice containing two or more characters must have **a space between every pair of characters**, to permit a hypothetical vertical alignment. See the example below:\\n\\n```\\n# REGULAR pyramidal version of \\\"EDABIT\\\"\\n\\n[ \\\"E\\\",\\n \\\"D A\\\",\\n\\\"B I T\\\" ]\\n```\\n\\nDepending on the given `_type`, you have to obtain a **regular** pyramid starting from its vertex (`_type === \\\"REG\\\"`) as in the example above, or a **reversed** pyramid  starting from its base (`_type === \\\"REV\\\"`) as in the example below:\\n\\n```\\n# REVERSED pyramidal version of \\\"EDABIT\\\"\\n\\n[\\\"E D A\\\",\\n  \\\"B I\\\",\\n   \\\"T\\\"  ]\\n```\\n\\nEvery pyramid must follow the same steadily increment/decrement of its slices (or rows) by exactly one character (excluding spaces), so that not every string can be transformed in a pyramid! See the example below:\\n\\n```\\n# Regular pyramidal version of \\\"PYRAMID\\\"\\n\\n[ \\\"P\\\",\\n \\\"Y R\\\",\\n\\\"A M I\\\" ]\\n\\n# Letter \\\"D\\\" can't be placed in the pyramid\\n```\\n\\nGiven as parameters a `string` and a `_type`, implement a function that returns:\\n- A string `\\\"Error!\\\"` if the pyramidal version can't be obtained from the given `string`.\\n- A list containing the regular pyramidal version of the `string` if the given `_type` is equal to `\\\"REG\\\"`.\\n- A list containing the reversed pyramidal version of the `string` if the given `_type` is equal to `\\\"REV\\\"`.\\n\\n### Examples\\n```\\npyramidal_string(\\\"EDABIT\\\", \\\"REG\\\") ➞ [\\\"E\\\", \\\"D A\\\", \\\"B I T\\\"]\\n\\npyramidal_string(\\\"EDABIT\\\", \\\"REV\\\") ➞ [\\\"E D A\\\", \\\"B I\\\", \\\"T\\\"]\\n\\npyramidal_string(\\\"PYRAMID\\\", \\\"REG\\\") ➞ \\\"Error!\\\"\\n\\npyramidal_string(\\\"!\\\", \\\"REV\\\") ➞ [\\\"!\\\"]\\n\\npyramidal_string(\\\"\\\", \\\"REG\\\") ➞ []\\n```\\n\\n### Notes\\n- If the given `string` has just one character, the returned list will contain that single character. If the given `string` is empty, the returned list will be empty.\\n- Remember to insert a space between every character inside the rows containing two or more characters.\\n- The increment and the decrement of the rows in a pyramidal string are equal to one character more or less than the previous, depending on the given `_type`.\\n- You have to find a discriminant rule to establish if a string can be transformed into a pyramid, without creating single exceptions for every given case. What is suggesting to you the shape of a pyramid seen frontally?\",\"isHidden\":false,\"lab\":\"# Regular pyramids\\nTest.assert_equals(pyramidal_string(\\\"\\\", \\\"REG\\\"), [])\\nTest.assert_equals(pyramidal_string(\\\"ZAPHODBEEBLEBROX\\\", \\\"REG\\\"), \\\"Error!\\\")\\nTest.assert_equals(pyramidal_string(\\\"THEHITCHIKERGUIDETOTHEGALAXY\\\", \\\"REG\\\"), [\\\"T\\\", \\\"H E\\\", \\\"H I T\\\", \\\"C H I K\\\", \\\"E R G U I\\\", \\\"D E T O T H\\\", \\\"E G A L A X Y\\\"])\\nTest.assert_equals(pyramidal_string(\\\"HOTBLACKDESIATO\\\", \\\"REG\\\"), [\\\"H\\\", \\\"O T\\\", \\\"B L A\\\", \\\"C K D E\\\", \\\"S I A T O\\\"])\\nTest.assert_equals(pyramidal_string(\\\"TRILLIAN\\\", \\\"REG\\\"), \\\"Error!\\\")\\nTest.assert_equals(pyramidal_string(\\\"APERFECTLYNORMALBEAST\\\", \\\"REG\\\"), [\\\"A\\\", \\\"P E\\\", \\\"R F E\\\", \\\"C T L Y\\\", \\\"N O R M A\\\", \\\"L B E A S T\\\"])\\nTest.assert_equals(pyramidal_string(\\\"RESTAURANTATTHEENDOFTHEUNIVERSE\\\", \\\"REG\\\"), \\\"Error!\\\")\\n\\n# Reversed pyramids\\nTest.assert_equals(pyramidal_string(\\\"?\\\", \\\"REV\\\"), [ \\\"?\\\" ])\\nTest.assert_equals(pyramidal_string(\\\"ARTHURDENT\\\", \\\"REV\\\"), [\\\"A R T H\\\", \\\"U R D\\\", \\\"E N\\\", \\\"T\\\"])\\nTest.assert_equals(pyramidal_string(\\\"DONTPANIC\\\", \\\"REV\\\"), \\\"Error!\\\")\\nTest.assert_equals(pyramidal_string(\\\"MARVIN\\\", \\\"REV\\\"), [\\\"M A R\\\", \\\"V I\\\", \\\"N\\\"])\\nTest.assert_equals(pyramidal_string(\\\"42\\\", \\\"REV\\\"), \\\"Error!\\\")\\nTest.assert_equals(pyramidal_string(\\\"LIFETHEUNIVERSEANDEVERYTHING\\\", \\\"REV\\\"), [\\\"L I F E T H E\\\", \\\"U N I V E R\\\", \\\"S E A N D\\\", \\\"E V E R\\\", \\\"Y T H\\\", \\\"I N\\\", \\\"G\\\"])\\nTest.assert_equals(pyramidal_string(\\\"FORDPREFECT\\\", \\\"REV\\\"), \\\"Error!\\\")\",\"language\":\"python3\",\"summary\":\"In this challenge, you have to obtain a pyramidal version of a given string, transforming the string into a list containing a series of string slices that progressively increase or decrease steadily from the left to the right. Every slice containing two or more characters must have a space between every pair of characters, to permit a hypothetical vertical ali\",\"tags\":[\"formatting\",\"strings\",\"math\"],\"timestamp\":{\"$date\":1574187856794},\"title\":\"Pyramidal Strings\",\"stats\":{\"completed\":{\"total\":54,\"ratings\":[2,2,2,2,2,4,3,2,3,3,5,3,3,3,1,4,4,1,3,4,3,3,4,3,3,2,2,2,4,4,5,3,4,4,1,4,2,4,2,4,4,1,0,0,2,0,2,3,2,2],\"rators\":[\"AYaEkTWLMmfzpwejr\",\"tAF9Gf6PiGogbZuWs\",\"8JyqsSbN2FJXPr3cw\",\"HqmxnQJM66Y57twhn\",\"8QNgZLrNbHPFRAEu5\",\"FgkYtHLxeD8pETJ8T\",\"2NJuDfSqdrF8kHHni\",\"gb9rvGus2Jv7bjZSs\",\"2fxapKr8XGdNeaKi2\",\"ydEdzuCCZt4yny9Rq\",\"MNgYsvK6HfLRb8wAz\",\"8PwfYqoDQFThzNtvf\",\"Jqk2uJZZxEv5wZFze\",\"2innwjWqxJHo4eRGh\",\"aCNWav8S8Try9RkC6\",\"PytNZK9mNiRiZxPrm\",\"JKb5rhL6DKcCAypF9\",\"gxHSEPa37E5JKD6Mk\",\"WLFPvm65aHfgwQy7N\",\"wsHhtbDh6ExixZ7d5\",\"mQTMXXonXw6RqEoN8\",\"yZvzB3qFb8pkHy4dg\",\"aEm3Wvj2rFYRL8Lrb\",\"AasGs8AeX9Lcb9xJn\",\"mDWNyaaQ9hvPCRzSd\",\"kYWb8BwpKwunQkxeX\",\"ZNnsMeNkdDhHjSrZb\",\"n2BRY9X8899dcG8Bw\",\"a777e8chPvJkY3tKa\",\"BSXfpmMrcj6XrBsEv\",\"W5TajitmCyxz87zAC\",\"Ecg4m7srYGgZsb4Ck\",\"gJYuGdkXEWWmGRLzu\",\"s5M5RvgqR9BhB9JoC\",\"xn7uGNKeAwPEkP9oA\",\"mDzReRELNxXWY6xTW\",\"HF28xZKSLM9wEuqNg\",\"8sNv5PTHa7XQ8bNqR\",\"iS5BrkGLzJyPK7nKt\",\"J3upzLHuEwXH7Z2hx\",\"QRv96jmNaYsWkxQEG\",\"GGQuD7SNkw6STaafA\",\"2PufnQcsHsfymufX3\",\"yjtdwc2AC4jA2RWtn\",\"QvEXmSEo3ANp3yPyH\",\"gKnWjDjwrJh7MK2df\",\"gXTAie79kiw28tx5u\",\"T6iBEE2jp7f7iEF2P\",\"GTKsdeEihE636Le9i\",\"DPi9QGLctq2y76KuE\",\"yTtSCvGPyYna6JuRC\",\"oBcs8GLX2ZFLXQy8y\"],\"quality\":[5,5,5,4,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":4.857142857142857,\"family\":[{\"_id\":\"4BKEcK9Y4WW6o64Mt\",\"language\":\"javascript\"},{\"_id\":\"snZDZ8nxwGCJCka5M\",\"language\":\"python3\"},{\"_id\":\"7yWXe7cZw67snCcjC\",\"language\":\"ruby\"}]}}"]