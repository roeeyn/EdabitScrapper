a["{\"msg\":\"result\",\"id\":\"1579\",\"result\":{\"_id\":\"rPnq2ugsM7zsWr3Pf\",\"author\":\"zatoichi49\",\"authorId\":\"tAF9Gf6PiGogbZuWs\",\"code\":\"def find_all_digits(nums):\\n\\t\",\"difficulty\":2.1018518518518516,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"9xGnndu4Jaq3Zmn8E\",\"instructions\":\"Taking each four digit number of a list in turn, return the **number** that you are on when all of the digits 0-9 have been discovered. If not all of the digits can be found, return `\\\"Missing digits!\\\"`.\\n\\n### Examples\\n```\\nfind_all_digits([5175, 4538, 2926, 5057, 6401, 4376, 2280, 6137, 8798, 9083]) ➞ 5057\\n# digits found:  517-  4-38  29-6  -0\\n\\nfind_all_digits([5719, 7218, 3989, 8161, 2676, 3847, 6896, 3370, 2363, 1381]) ➞ 3370\\n# digits found:  5719  -2-8  3---  --6-  ----  --4-  ----  ---0\\n\\nfind_all_digits([4883, 3876, 7769, 9846, 9546, 9634, 9696, 2832, 6822, 6868]) ➞ \\\"Missing digits!\\\"\\n# digits found:  48-3  --76  ---9  ----  -5--  ----  ----  2---\\n# 0 and 1 are missing\\n```\\n\\n### Notes\\nThe digits can be discovered in *any* order.\",\"isHidden\":false,\"lab\":\"Test.assert_equals(find_all_digits([3129, 7689, 7449, 4389, 5855, 9670, 9245, 1291, 7367, 1810]), 9670)\\nTest.assert_equals(find_all_digits([2758, 3737, 3349, 5118, 7004, 6106, 8868, 6687, 2510, 8911]), 6106)\\nTest.assert_equals(find_all_digits([5343, 6743, 2922, 2423, 7050, 5116, 3992, 2707, 2435, 5251]), \\\"Missing digits!\\\")\\nTest.assert_equals(find_all_digits([4169, 4511, 1498, 6945, 7959, 2666, 7872, 3217, 5408, 8662]), 5408)\\nTest.assert_equals(find_all_digits([7985, 7130, 4625, 7392, 4933, 7163, 7130, 2145, 1596, 6188]), 4625)\\nTest.assert_equals(find_all_digits([4823, 1049, 9555, 9466, 2191, 9316, 1105, 4489, 8318, 7081]), 7081)\\nTest.assert_equals(find_all_digits([9827, 4405, 6317, 6086, 8091, 7800, 8365, 2544, 3402, 7248]), 6317)\\nTest.assert_equals(find_all_digits([2227, 7262, 9322, 8967, 4807, 8708, 3317, 6543, 9522, 7106]), 6543)\\nTest.assert_equals(find_all_digits([8452, 7326, 6786, 1893, 6546, 8714, 6699, 1361, 4891, 9797]), \\\"Missing digits!\\\")\\nTest.assert_equals(find_all_digits([2627, 1146, 3964, 6280, 9759, 6188, 8917, 9375, 4012, 4217]), 9759)\\nTest.assert_equals(find_all_digits([1291, 6903, 5887, 8914, 3906, 1465, 8452, 4909, 4143, 6921]), 8914)\\nTest.assert_equals(find_all_digits([7433, 8245, 9603, 1446, 8158, 8756, 5066, 4996, 5233, 2856]), 1446)\\nTest.assert_equals(find_all_digits([4661, 1207, 8411, 2010, 2092, 2441, 7885, 3810, 7433, 2034]), 3810)\\nTest.assert_equals(find_all_digits([9429, 6519, 3795, 7924, 3042, 3425, 1371, 7194, 7680, 9007]), 7680)\\nTest.assert_equals(find_all_digits([6621, 9480, 8239, 4542, 9772, 5108, 6872, 5057, 9477, 3602]), 9772)\\nTest.assert_equals(find_all_digits([9701, 3828, 7183, 2727, 5212, 6721, 5413, 2351, 4237, 8207]), 5413)\\nTest.assert_equals(find_all_digits([3914, 9923, 8187, 1657, 4271, 9538, 3759, 4543, 3438, 1943]), \\\"Missing digits!\\\")\\nTest.assert_equals(find_all_digits([6572, 3752, 9661, 7017, 8139, 2596, 3054, 2730, 1350, 2483]), 3054)\\nTest.assert_equals(find_all_digits([2102, 4519, 4229, 8347, 2019, 7342, 7181, 8977, 1339, 9988]), \\\"Missing digits!\\\")\\nTest.assert_equals(find_all_digits([4467, 2849, 5706, 7330, 9488, 2529, 8837, 2256, 3975, 7311]), 7311)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,3,0,4,3,0,1,2,3,2,2,1,2,1,2,1,3,2,0,3,0,3,2,3,2,2,0,3,1,5,0,1,2,1,2,2,3,3,3,1,3,2,2,2,3,3,3,2,2,2,3,3,2,3,2,3,3,3,4,3,2,0,2,3,3,2,3,3,0,3,2,2,2,3,3,2,2,2,1,2,0,0,0,0,1,3,3,3,2,3,0,3,3,0,3,2,2,2,3,1,3,1,2,3],\"rators\":[\"tAF9Gf6PiGogbZuWs\",\"FHSJnAYTbcsKFgeQa\",\"8PwfYqoDQFThzNtvf\",\"aCNWav8S8Try9RkC6\",\"s5M5RvgqR9BhB9JoC\",\"ydEdzuCCZt4yny9Rq\",\"2fxapKr8XGdNeaKi2\",\"HqmxnQJM66Y57twhn\",\"gb9rvGus2Jv7bjZSs\",\"8JyqsSbN2FJXPr3cw\",\"Jqk2uJZZxEv5wZFze\",\"PTcm3qFvxvLnaKttM\",\"PT5pu7kJsgp9TDNGv\",\"2innwjWqxJHo4eRGh\",\"C4QntmkYtB89GNtpd\",\"PXAcsKkssS2yLyDv2\",\"Yp7uvStL97cC9fKkY\",\"Z85ajWfZ4jDPkbvR4\",\"AasGs8AeX9Lcb9xJn\",\"yoYQqaY6GszuTkNSs\",\"4CFzv558qbGcpQwc4\",\"yZvzB3qFb8pkHy4dg\",\"WLFPvm65aHfgwQy7N\",\"wZoxzQDbso9SMAPkY\",\"w3A7cBWyAfukk6xEQ\",\"v9KtC8YLbMWmXiW2H\",\"mDWNyaaQ9hvPCRzSd\",\"BByKDngfPvW6w4m7d\",\"J5T8gZqiZXFuFDTQ7\",\"5aZnA8Br3u7Wf5ENg\",\"cR3ibTMxLyEdDFCHY\",\"aEm3Wvj2rFYRL8Lrb\",\"wPxeazAYct9gG2eRM\",\"QaDeBLhPTTAhh9ifu\",\"SncRrBzRiyKRFJm8e\",\"RX8vfGmaNWLahPWpd\",\"euPBBaYXyS8RBr9KB\",\"v3fjGuc7Pq4yjFygS\",\"ZNnsMeNkdDhHjSrZb\",\"sz8ufn9i8zeiGWpAy\",\"Cc2Cgj4MWXZxsTooC\",\"YRstQuthRkFeBiXug\",\"3Zceb8GudqAG3onG3\",\"gJYuGdkXEWWmGRLzu\",\"kYWb8BwpKwunQkxeX\",\"S6Zd8mPuvhuh3MFRt\",\"3pxHTZBsv7MKzFG6Y\",\"odH7dXFsDzTxW6eGJ\",\"KdNDysEsy2TW5QRJ2\",\"n2BRY9X8899dcG8Bw\",\"ekQh3jzgGLsEMbKo3\",\"LjoNTyGEMfBpMHHus\",\"kQH5b8MXJunh84Czq\",\"HF28xZKSLM9wEuqNg\",\"4rwxLqLs2mNZNg8NB\",\"XghikBbq7obhPSKjX\",\"jE24TRMFGTRLrGsME\",\"dynD89GCHoau9fvh7\",\"a777e8chPvJkY3tKa\",\"55RQznnuTGpsj3EXd\",\"Ecg4m7srYGgZsb4Ck\",\"6428wKHtwKkFdvBs5\",\"iojEnnY9FsMfYzp6f\",\"KZ2xddpM2f9JRaryB\",\"ikuw2oD4TL9rrGzNB\",\"XSGndkqjaDCYvQ47C\",\"n8b3BmLYPdTKjWXjb\",\"yjtdwc2AC4jA2RWtn\",\"DEDniTrstQYGounXT\",\"fnjpoeXvynm895ozx\",\"DNACg4rcgZsPtYGZ8\",\"xsTAbdxLod7Rka5aj\",\"K3RacTvkWHLfzKF8i\",\"A3pBp3qBMnYZpQKZu\",\"xn7uGNKeAwPEkP9oA\",\"y6rmzoMWNdRGr3Dk2\",\"WzWXNbPKjWsJnq4M5\",\"iS5BrkGLzJyPK7nKt\",\"J3upzLHuEwXH7Z2hx\",\"DPi9QGLctq2y76KuE\",\"Tg24gZyPmk8uDXcBY\",\"p8qqFdJ3FSk5x9z3G\",\"2H7qphwdz7PPoFKgc\",\"yTtSCvGPyYna6JuRC\",\"Afnps7TJQuS9sipMb\",\"ZgL7bZeXzSF3zWuAx\",\"gXTAie79kiw28tx5u\",\"T2vhHPhRR96hRizq8\",\"hnyhBFWwNCz9mDfSi\",\"QRv96jmNaYsWkxQEG\",\"cAP3n5NY64uoMwzRR\",\"RTDx9axf52kxhFjwZ\",\"CHvzhtXnv8HTbPQ56\",\"oBcs8GLX2ZFLXQy8y\",\"T6iBEE2jp7f7iEF2P\",\"GGdmhAvxXhqhhibJN\",\"FEYpu9RWysAgW3XnP\",\"CTKmXtrqDYqJBnuy8\",\"Wpn95NqWxncQrwNgz\",\"9rhsisf8ofHavG5aT\",\"AQSqD9oNv2uPfxZCR\",\"joZXzqJS4J9PPWGvu\",\"PC3pLs36zNzpRDSuE\",\"jCjCvyhqhpebkJn34\",\"2PufnQcsHsfymufX3\",\"AFfw7cGg83uYk2Miy\",\"gKnWjDjwrJh7MK2df\",\"PH32cNxBjrK4a28sn\",\"o4ixjQGSaYqA2JoM4\",\"suArq5BbSy7gD6xri\",\"yod5YhKtPqw2GfG9B\",\"buX4mCQhtXCfBjeno\",\"rhS8qXRjZcpDXkwnE\",\"JhX7jvtpwNyxcc39m\",\"8sNv5PTHa7XQ8bNqR\",\"4Lwjr34ypKNQNQCar\",\"Ds7L5bksw2QRHjrKL\"],\"total\":127,\"quality\":[5,5,5,5,5,5,5,4,5,5,5,5,5,5]},\"flags\":0},\"summary\":\"Taking each four digit number of a list in turn, return the number that you are on when all of the digits 0-9 have been discovered. If not all of the digits can be found, return \\\"Missing digits!\\\".\\n\\nExamples\\nfindalldigits([5175, 4538, 2926, 5057, 6401, 4376, 2280, 6137, 8798, 9083]) ➞ 5057\\ndigits found:  517-  4-38  29-6  -0\\n\\nfindalldigits([5719, 7218, 3989, 81\",\"tags\":[\"arrays\",\"numbers\"],\"timestamp\":{\"$date\":1577644439616},\"title\":\"Find All Digits\",\"quality\":4.928571428571429,\"family\":[{\"_id\":\"LhmeYSBb6XKiAxnEN\",\"language\":\"cpp\"},{\"_id\":\"5hsyLC2Ntgoqn2wAy\",\"language\":\"javascript\"},{\"_id\":\"rPnq2ugsM7zsWr3Pf\",\"language\":\"python3\"},{\"_id\":\"YwRZwHu2cFFqqMigN\",\"language\":\"ruby\"}]}}"]