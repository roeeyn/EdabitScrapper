a["{\"msg\":\"result\",\"id\":\"2372\",\"result\":{\"_id\":\"3tXhgp8BSCkgJvbLc\",\"author\":\"joegal\",\"authorId\":\"fznzd3qnvtbFkkizz\",\"code\":\"def find_words(fragments):\\n\\t\",\"difficulty\":3.9,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"Rjfx9s92RBvEfTLdX\",\"instructions\":\"A popular puzzle is where you are given a list of word fragments and have to combine them to form a set of words such that each fragment is used only once.\\n\\nFor this challenge, write a function that takes a list of fragments and returns a sorted list of 20 words which can be made from them.\\n\\n### Example\\n```\\nfind_words([\\\"er\\\", \\\"haw\\\", \\\"as\\\", \\\"dock\\\", \\\"yuc\\\", \\\"prim\\\", \\\"ia\\\", \\\"sy\\\", \\\"sy\\\", \\\"y\\\", \\\"i\\\", \\\"thorn\\\", \\\"bur\\\", \\\"weed\\\", \\\"snow\\\", \\\"sia\\\", \\\"tus\\\", \\\"cac\\\", \\\"pop\\\", \\\"clo\\\", \\\"chid\\\", \\\"pan\\\", \\\"ris\\\", \\\"dahl\\\", \\\"rose\\\", \\\"dai\\\", \\\"drop\\\", \\\"dog\\\", \\\"ver\\\", \\\"bind\\\", \\\"heath\\\", \\\"fuch\\\", \\\"mine\\\", \\\"ca\\\", \\\"lil\\\", \\\"ter\\\", \\\"jas\\\", \\\"wood\\\", \\\"py\\\", \\\"or\\\"])\\nâžž [\\\"aster\\\", \\\"bindweed\\\", \\\"burdock\\\", \\\"cactus\\\", \\\"clover\\\", \\\"dahlia\\\", \\\"daisy\\\", \\\"dogwood\\\", \\\"fuchsia\\\", \\\"hawthorn\\\", \\\"heather\\\", \\\"iris\\\", \\\"jasmine\\\", \\\"lily\\\", \\\"orchid\\\", \\\"pansy\\\", \\\"poppy\\\", \\\"primrose\\\", \\\"snowdrop\\\", \\\"yucca\\\"]\\n```\\n\\n### Notes\\n- A dictionary is required to solve this puzzle. A set of words DICTIONARY is provided in the tests - it contains all the words required (plus a few more for luck and to make the task a little more challenging).\\n- You always have to return a list of 20 words sorted in ascending order.\\n- The input fragments list will contain either 40 or 60 fragments. There are two fragments per word if the list has 40 fragments, otherwise three fragments per word.\\n- A word will always be just the combined fragments with no spaces or hyphens amongst them.\\n- Fragments are not necessarily unique within a fragments list.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"# Fragments\\nfragsets = [\\n            [\\\"er\\\",\\\"haw\\\",\\\"as\\\",\\\"dock\\\",\\\"yuc\\\",\\\"prim\\\",\\\"ia\\\",\\\"sy\\\",\\n             \\\"sy\\\",\\\"y\\\",\\\"i\\\",\\\"thorn\\\",\\\"bur\\\",\\\"weed\\\",\\\"snow\\\",\\\"sia\\\",\\n             \\\"tus\\\",\\\"cac\\\",\\\"pop\\\",\\\"clo\\\",\\\"chid\\\",\\\"pan\\\",\\\"ris\\\",\\\"dahl\\\",\\n             \\\"rose\\\",\\\"dai\\\",\\\"drop\\\",\\\"dog\\\",\\\"ver\\\",\\\"bind\\\",\\\"heath\\\",\\\"fuch\\\",\\n             \\\"mine\\\",\\\"ca\\\",\\\"lil\\\",\\\"ter\\\",\\\"jas\\\",\\\"wood\\\",\\\"py\\\",\\\"or\\\"],\\n            [\\\"ent\\\",'com','tor','in','set','acti','tal','goa',\\n              'ing','con','feel','mean','dic','tom','des','tate',\\n              'tion','meth','ue','ess','par','proc','mor','l',\\n              'men','ect','stinct','pulse','symp','flict','sub','fac',\\n              'ng','val','od','ing','im','ej','plex','ire'],\\n            ['ine','chil','can','bo','i','ver','sum','par','chin','la',\\n              'bou','buck','ter','la','a','o','i','car','ril','wol',\\n              'wil','e','plat','y','o','kan','tee','pel','a','ant',\\n              'wa','chim','beest','hy','zee','keet','eat','man','fla','pos',\\n              'min','bo','roo','go','pan','er','no','e','pine','na',\\n              'dile','cu','el','phant','croc','pus','go','por','de','ga'],\\n            [\\\"ty\\\",\\\"son\\\",\\\"ness\\\",\\\"tion\\\",\\\"pre\\\",\\\"vis\\\",\\\"tion\\\",\\\"hend\\\",\\\"con\\\",\\\"pres\\\",\\n              \\\"de\\\",\\\"u\\\",\\\"ware\\\",\\\"mem\\\",\\\"tain\\\",\\\"as\\\",\\\"cer\\\",\\\"ance\\\",\\\"i\\\",\\\"prej\\\",\\n              \\\"pin\\\",\\\"dice\\\",\\\"ry\\\",\\\"ment\\\",\\\"sion\\\",\\\"tory\\\",\\\"ing\\\",\\\"al\\\",\\\"sion\\\",\\\"a\\\",\\n              \\\"sion\\\",\\\"sur\\\",\\\"for\\\",\\\"rea\\\",\\\"scious\\\",\\\"fac\\\",\\\"pi\\\",\\\"ness\\\",\\\"cion\\\",\\\"a\\\",\\n              \\\"ol\\\",\\\"ci\\\",\\\"clu\\\",\\\"per\\\",\\\"o\\\",\\\"give\\\",\\\"im\\\",\\\"cep\\\",\\\"ion\\\",\\\"sus\\\",\\n              \\\"at\\\",\\\"ness\\\",\\\"o\\\",\\\"ten\\\",\\\"gree\\\",\\\"con\\\",\\\"com\\\",\\\"a\\\",\\\"u\\\",\\\"de\\\"],\\n            ['ly','flor','mi','lis','frank','stutt','ples','mu',\\n              'gal','lan','werp','stock','fort','fast','gow','ville',\\n              'don','dres','na','on','se','ence','diff','ham',\\n              'lon','nich','bon','bel','bor','deaux','car','way',\\n              'rin','burg','glas','den','tu','gart','ant','holm'],\\n            ['tour','ping','pack','air','marks','pack','ho','ren',\\n             'vis','land','screen','hos','port','plane','re','pho',\\n             'ist','sea','cus','port','it','el','tal','tel',\\n             'sun','side','back','mo','tel','shop','late','pass',\\n             'sort','age','air','trans','tel','toms','to','trav']\\n            ]\\n\\n# Target Words\\nwordsets =  [\\n              ['aster', 'bindweed', 'burdock', 'cactus', 'clover', 'dahlia',\\n              'daisy', 'dogwood', 'fuchsia', 'hawthorn', 'heather', 'iris',\\n              'jasmine', 'lily', 'orchid', 'pansy', 'poppy', 'primrose',\\n              'snowdrop', 'yucca'],\\n              ['acting', 'complex', 'conflict', 'desire', 'dictate', 'eject',\\n              'faction', 'feeling', 'goal', 'impulse', 'instinct', 'meaning',\\n              'mentor', 'method', 'mortal', 'parent', 'process', 'subset',\\n              'symptom', 'value'],\\n              ['anteater', 'bonobo', 'caribou', 'chimpanzee', 'chinchilla',\\n              'crocodile', 'elephant', 'flamingo', 'gorilla', 'hyena',\\n              'kangaroo', 'manatee', 'opossum', 'parakeet', 'pelican',\\n              'platypus', 'porcupine', 'waterbuck', 'wildebeest',\\n              'wolverine'],\\n              ['agreement', 'aide', 'assurance', 'attention', 'awareness',\\n              'certainty', 'comprehend', 'conclusion', 'consciousness',\\n              'decision', 'forgiveness', 'impression', 'memory',\\n              'olfactory', 'opinion', 'perception', 'prejudice',\\n              'reasoning', 'suspicion', 'visual'],\\n              ['antwerp', 'belfast', 'bordeaux', 'cardiff', 'dresden', 'florence',\\n              'frankfort', 'galway', 'glasgow', 'hamburg', 'lisbon', 'london',\\n              'lyon', 'milan', 'munich', 'naples', 'seville', 'stockholm',\\n              'stuttgart', 'turin'],\\n              ['airplane', 'airport', 'backpack', 'customs', 'hostel', 'hotel', 'landmarks',\\n               'motel', 'package', 'passport', 'photo', 'rental', 'resort', 'seaside',\\n               'shopping', 'sunscreen', 'tourist', 'translate', 'travel', 'visit']\\n            ]\\n# Dictionary\\n\\nDICTIONARY = {'aster', 'bindweed', 'burdock', 'cactus', 'clover', 'dahlia',\\n              'daisy', 'dogwood', 'fuchsia', 'hawthorn', 'heather', 'iris',\\n              'jasmine', 'lily', 'orchid', 'pansy', 'poppy', 'primrose',\\n              'snowdrop', 'yucca', 'acting', 'complex', 'conflict', 'desire',\\n              'dictate', 'eject', 'faction', 'feeling', 'goal', 'impulse',\\n              'instinct', 'meaning', 'mentor', 'method', 'mortal', 'parent',\\n              'process', 'subset', 'symptom', 'value', 'anteater', 'bonobo',\\n              'caribou', 'chimpanzee', 'chinchilla', 'crocodile', 'elephant',\\n               'flamingo', 'gorilla', 'hyena', 'kangaroo', 'manatee',\\n               'opossum', 'parakeet', 'pelican', 'platypus', 'porcupine',\\n               'waterbuck', 'wildebeest', 'wolverine', 'agreement', 'aide',\\n               'assurance', 'attention', 'awareness', 'certainty',\\n               'comprehend', 'conclusion', 'consciousness', 'decision',\\n               'forgiveness', 'impression', 'memory', 'olfactory',\\n               'opinion', 'perception', 'prejudice', 'reasoning',\\n               'suspicion', 'visual','antwerp', 'belfast', 'bordeaux',\\n               'cardiff', 'dresden', 'florence', 'frankfort', 'galway',\\n               'glasgow', 'hamburg', 'lisbon', 'london', 'lyon', 'milan',\\n               'munich', 'naples', 'seville', 'stockholm', 'stuttgart',\\n               'turin', 'weeder', 'dogrose', 'binder', 'valent', 'proctor',\\n               'lent', 'buckaroo', 'factional', 'frankly', 'only',\\n               'airplane', 'airport', 'backpack', 'customs', 'hostel', 'hotel', 'landmarks',\\n               'motel', 'package', 'passport', 'photo', 'rental', 'resort', 'seaside',\\n               'shopping', 'sunscreen', 'tourist', 'translate', 'travel', 'visit'\\n              }\\n\\t\\t\\t\\t\\t\\t\\t\\nfor i, fragset in enumerate(fragsets):\\n    Test.assert_equals(find_words(fragset), wordsets[i])\",\"language\":\"python3\",\"quality\":0,\"stats\":{\"completed\":{\"ratings\":[4,4,4,4,4,3,5,4,2,5],\"quality\":[],\"rators\":[\"fznzd3qnvtbFkkizz\",\"8PwfYqoDQFThzNtvf\",\"yjtdwc2AC4jA2RWtn\",\"8sNv5PTHa7XQ8bNqR\",\"iS5BrkGLzJyPK7nKt\"],\"total\":5},\"flags\":0},\"summary\":\"A popular puzzle is where you are given a list of word fragments and have to combine them to form a set of words such that each fragment is used only once.\\n\\nFor this challenge, write a function that takes a list of fragments and returns a sorted list of 20 words which can be made from them.\\n\\nExample\\nfind_words([\\\"er\\\", \\\"haw\\\", \\\"as\\\", \\\"dock\\\", \\\"yuc\\\", \\\"prim\\\", \\\"ia\\\", \\\"\",\"tags\":[\"algorithms\",\"loops\",\"math\",\"strings\"],\"timestamp\":{\"$date\":1602269014376},\"title\":\"Find the Words That Fit the Fragments\",\"family\":[{\"_id\":\"3tXhgp8BSCkgJvbLc\",\"language\":\"python3\"}]}}"]