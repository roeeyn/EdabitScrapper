a["{\"msg\":\"result\",\"id\":\"1283\",\"result\":{\"_id\":\"RvCEzuqacuBA94ZfP\",\"author\":\"Werdna\",\"authorId\":\"buX4mCQhtXCfBjeno\",\"code\":\"def generate_hashtag(txt):\\n\\t\",\"difficulty\":1.971830985915493,\"familyId\":\"FTMQrEhcMioNDHHN4\",\"instructions\":\"Create a function that is a Hashtag Generator by using the following rules:\\n\\n- The output must start with a hashtag (#).\\n-  Each word in the output must have its first letter capitalized.\\n- If the final result, a single string,  is longer than 140 characters, the function should return `false`.\\n- If either the input (`str`) or the result is an empty string, the function should return `false`.\\n\\n### Examples\\n```\\ngenerate_hashtag(\\\"    Hello     World   \\\" ) ➞ \\\"#HelloWorld\\\"\\n\\ngenerate_hashtag(\\\"\\\") ➞ false, \\\"Expected an empty string to return false\\\"\\n\\ngenerate_hashtag(\\\"Edabit Is Great\\\") ➞ \\\"#EdabitIsGreat\\\", \\\"Should remove spaces.\\\"\\n```\\n\\n### Notes\\nN/A\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(generate_hashtag(\\\"\\\"), False, \\\"Expected an empty string to return False\\\")\\nTest.assert_equals(generate_hashtag(\\\" \\\" * 100), False, \\\"Still an empty string\\\")\\nTest.assert_equals(generate_hashtag(\\\"Do We have A Hashtag\\\"), \\\"#DoWeHaveAHashtag\\\", \\\"Expected a Hashtag (#) at the beginning.\\\")\\nTest.assert_equals(generate_hashtag(\\\"Edabit\\\"), \\\"#Edabit\\\", \\\"Should handle a single word.\\\")\\nTest.assert_equals(generate_hashtag(\\\"Edabit Is Great\\\"), \\\"#EdabitIsGreat\\\", \\\"Should remove spaces.\\\")\\nTest.assert_equals(generate_hashtag(\\\"Edabit is great\\\"), \\\"#EdabitIsGreat\\\", \\\"Should capitalize first letters of all words.\\\")\\nTest.assert_equals(generate_hashtag(\\\"eda\\\" + \\\" \\\" * 140 + \\\"bit\\\"), \\\"#EdaBit\\\")\\nTest.assert_equals(generate_hashtag(\\\"Smmmmmmmmmmmmmmmmmmmmmmmmmmmmaaaaaaaaaaaaaaaaaaaaaaaaaaaaalllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll Dog\\\"), False, \\\"Should return False if the final word is longer than 140 chars.\\\")\\nTest.assert_equals(generate_hashtag(\\\"e\\\" * 121), \\\"#E\\\" + \\\"e\\\" * 120, \\\"Should work\\\")\\nTest.assert_equals(generate_hashtag(\\\"e\\\" * 140), False, \\\"Too long\\\")\\nTest.assert_equals(generate_hashtag(\\\"    Hello     World   \\\" ), \\\"#HelloWorld\\\")\",\"language\":\"python3\",\"quality\":4.64,\"summary\":\"Create a function that is a Hashtag Generator by using the following rules:\\n\\nThe output must start with a hashtag (#).\\nEach word in the output must have its first letter capitalized.\\nIf the final result, a single string,  is longer than 140 characters, the function should return false.\\nIf either the input (str) or the result is an empty string, the function sh\",\"tags\":[\"algorithms\",\"strings\",\"language_fundamentals\"],\"timestamp\":{\"$date\":1614818296183},\"title\":\"Hashtag Generator\",\"stats\":{\"completed\":{\"total\":178,\"ratings\":[2,2,2,2,2,2,3,3,3,1,4,1,3,1,2,1,1,2,1,3,1,0,2,1,2,2,3,1,2,2,3,2,2,3,2,1,2,3,2,3,2,0,2,3,2,3,0,2,3,3,5,3,2,0,0,4,2,0,2,2,3,3,0,1,1,1,3,1,1,2,3,1,0,3,2,2,2,2,3,1,2,0,2,2,2,2,2,3,0,3,2,3,3,3,2,2,2,1,2,2,2,3,2,2,3,0,2,3,3,0,2,2,3,1,3,1,0,2,2,2,2,2,1,2,3,2,0,2,3,2,2,1,4,3,3,1,2,2,3,3,3,1],\"quality\":[5,5,4,5,5,5,5,5,5,5,5,4,5,4,3,5,4,5,5,5,5,5,4,5,3],\"rators\":[\"buX4mCQhtXCfBjeno\",\"HcYxcQ5J6dM4WkWHd\",\"p8qqFdJ3FSk5x9z3G\",\"8PwfYqoDQFThzNtvf\",\"QRv96jmNaYsWkxQEG\",\"iS5BrkGLzJyPK7nKt\",\"s5M5RvgqR9BhB9JoC\",\"iojEnnY9FsMfYzp6f\",\"PWgzeK859suojbrRx\",\"gXTAie79kiw28tx5u\",\"gb9rvGus2Jv7bjZSs\",\"oBcs8GLX2ZFLXQy8y\",\"8JyqsSbN2FJXPr3cw\",\"cR3ibTMxLyEdDFCHY\",\"mDWNyaaQ9hvPCRzSd\",\"55RQznnuTGpsj3EXd\",\"GGdmhAvxXhqhhibJN\",\"uEWSkHtX23FuYNrtd\",\"PXAcsKkssS2yLyDv2\",\"2PufnQcsHsfymufX3\",\"u5u2YpHXiNgzDNJdX\",\"ct8utfqakBjxoDKib\",\"dJzNF59j2p8jWZxiQ\",\"zd9FLSzsGz3evKafy\",\"3LiSLdtN58n46NEqg\",\"Wpn95NqWxncQrwNgz\",\"FEYpu9RWysAgW3XnP\",\"YcCLwitFMAEJSnxAW\",\"gJYuGdkXEWWmGRLzu\",\"AQSqD9oNv2uPfxZCR\",\"tAF9Gf6PiGogbZuWs\",\"yf7bsNNnmrSRHAqTg\",\"fMqynfgCLDdQhkcKF\",\"srJ34BaybkQh3qRkM\",\"cAP3n5NY64uoMwzRR\",\"mfm3gB39arY8Rjb2y\",\"uGuS9YRXW2nj4p6zf\",\"hnyhBFWwNCz9mDfSi\",\"8nE8QHnFYsHCFebte\",\"AviDWZMzokhnDENnW\",\"fznzd3qnvtbFkkizz\",\"J3upzLHuEwXH7Z2hx\",\"Yp7uvStL97cC9fKkY\",\"PTDFuxAzou7W6asWt\",\"no46qNkTbNeHepe64\",\"EfxwqhYdapX3dMQC2\",\"aFYzioHvZPvPaunsg\",\"fbr22rabEJMfBp7vD\",\"4Lwjr34ypKNQNQCar\",\"TePz42wc3ZZ5CKA6L\",\"rfyEkETeoS96QNH4e\",\"yjtdwc2AC4jA2RWtn\",\"K6MfKMytoJJuSGewP\",\"Ds7L5bksw2QRHjrKL\",\"Fh4gcqnntLrK3fZWN\",\"HhYCji7QqauyN3A7v\",\"3KkyQm77zsew58Dc2\",\"hsrNYf3WbexXJKhCq\",\"YmQb9Mo4Xcg2vzgbn\",\"xn7uGNKeAwPEkP9oA\",\"bvmTE46bfcM4ogj34\",\"PC3pLs36zNzpRDSuE\",\"8BFSTCnoe2QggN64c\",\"CHvzhtXnv8HTbPQ56\",\"RErqK2yM94wYyD2hk\",\"o4ixjQGSaYqA2JoM4\",\"w67KfQgZ6WAeY7K4Y\",\"9YgbQLg7Rfb47fJjL\",\"DEDniTrstQYGounXT\",\"ghMkPtdFCpM6w8nax\",\"J5T8gZqiZXFuFDTQ7\",\"AFfw7cGg83uYk2Miy\",\"AasGs8AeX9Lcb9xJn\",\"HqmxnQJM66Y57twhn\",\"Z85ajWfZ4jDPkbvR4\",\"ctbThYbufFCYbRK4f\",\"BrTDhPJcACL2bsrpJ\",\"qzXAMXsHZGT8o5hTA\",\"MpfytGFYF77emJ3cT\",\"DPi9QGLctq2y76KuE\",\"jWbd7SYDzLPjc9EDh\",\"ey3CASd6Je5LEJzfB\",\"gKnWjDjwrJh7MK2df\",\"Jqk2uJZZxEv5wZFze\",\"8sNv5PTHa7XQ8bNqR\",\"5HCu9Ydd86QgHDRNP\",\"RoGGD5cpHb4ftdLDv\",\"jCjCvyhqhpebkJn34\",\"T6iBEE2jp7f7iEF2P\",\"iqmPb9JuJDgTFeR8Q\",\"XHShZ3WMPgGEA2vkR\",\"LWcndkRmRFLP7zNTs\",\"nkH3HfJXLMNcBMM79\",\"C8Gd66wwGagHmj2t8\",\"PbbM68se6uadi3YDM\",\"yhEXw7srnzqThKFKw\",\"nc7bRhkxgKyqusYe3\",\"mvJBakQ35CWAnbbEZ\",\"muQCKmimwtNAdS8rp\",\"974cv448kw6Wu2JF6\",\"LRciKCHpjqgDyfvbh\",\"6qHzGpBhqLaWq5cZa\",\"42uQSqMArnTeXcTRD\",\"5QN8R22z43SrwoHDz\",\"dDFJpK4pXCsQYuHmc\",\"dSd7wHgXGQeG5BQ2P\",\"8hfeeDEvjafoaD3mW\",\"L8oMii2YcbEv86SdN\",\"YZsZjfvd3PnLhDJrR\",\"jpwpZ6waYptcaHzXu\",\"hWRRoqfe6WbRek7tq\",\"JjxHkEmm5ahfEsKpN\",\"m7kMANAKbQxHfueLC\",\"qmtoFxLkGDQMwcBr6\",\"EeH2HPk4BtFif6sow\",\"iP7wNofhZXTkJ9ryG\",\"yod5YhKtPqw2GfG9B\",\"zoPKKgKubrmoZGt5C\",\"dqwatKFAeGpjmf5dm\",\"23oi2a3vQwhtLEbSj\",\"54BFnXEjY3FuRNYpN\",\"Bq9cF6XoaLhm9qESD\",\"eHcgvkTGsH7ZziqBo\",\"CtLaGA3WAjwAPqPgf\",\"sbJcFfQjQ59Wfg4Cd\",\"T2vhHPhRR96hRizq8\",\"oFEG3RDs5J99JYtkZ\",\"Qyfyyw6oC4EHAndzo\",\"mTF6oWX2WhFR4M3QK\",\"5kazQPq8ZdDsx6kjf\",\"wqJHvTS4vcaeHZKRc\",\"FNi2H5fKc5EAQ2Hcq\",\"jkbavR2ATFJcpmo8M\",\"qB6KSTYC6H2TQEQY6\",\"RbRoa7RJ5nEooSYd7\",\"MKT7khMBGXzA22ykf\",\"Hu4SkoNyWCP4vmsZE\",\"Z2b4JRLHqkLTdtfw9\",\"ypagZTh36kMRyJTxF\",\"P7NmFbCJ5offXMRvB\",\"xjyixzXzqqqTfJARd\",\"8uiLiJcmWxWe6qw65\",\"TL2pcbkoT8sfE7ksY\",\"ARcRprCyrMpf6qndY\",\"g5dP3rGGK4QSypC4k\",\"hco8Gvvc7HbZn6Jbo\",\"Fa2FjBNgP5NpX2CNc\",\"PrDCsHdnjHES3noqk\",\"nZiiifFsFjocgQ2i6\",\"2THZ4Mc9X2dqjA3AF\",\"fSQSHjW3e72MrWxbD\",\"JJw3y27yFe9FoqB55\",\"c5PF4DaFHhKDWTnyh\",\"XP9aMCtooMhm6GjLL\",\"BuGWvGZGiJELoMy5G\",\"aEm3Wvj2rFYRL8Lrb\",\"kqnAtcQb9YseoNB8g\",\"5QKKf3zhayCynv35K\",\"DdHnWE8gjciwCXhSL\",\"9pzFiFK3ANLjQfnr2\",\"bNENiqqEDxM5a5JBf\",\"3nied3n8KG8RSNixH\"]},\"flags\":1},\"editorId\":\"buX4mCQhtXCfBjeno\",\"family\":[{\"_id\":\"NjptrvPAsHTe8qQRn\",\"language\":\"javascript\"},{\"_id\":\"ePy2i2Bc47vsTYHaa\",\"language\":\"php\"},{\"_id\":\"RvCEzuqacuBA94ZfP\",\"language\":\"python3\"},{\"_id\":\"L3cZiMwqxMFGFEdRu\",\"language\":\"ruby\"}]}}"]