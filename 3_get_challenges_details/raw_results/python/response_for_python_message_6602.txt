a["{\"msg\":\"result\",\"id\":\"2009\",\"result\":{\"_id\":\"xFKwv7pAzEdNehwrt\",\"author\":\"yanni\",\"authorId\":\"aCNWav8S8Try9RkC6\",\"code\":\"def bracket_logic(xp):\\n\\t\",\"difficulty\":2.8,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"hmtGPgNhHdukaTbh6\",\"instructions\":\"Brackets and parentheses in mathematical expressions have to conform to certain logical rules. Every opening bracket must have a closing mate somewhere further down the line. Although brackets can be nested, different types cannot overlap:\\n\\n- `([<x+y>+3]-1)` makes sense because each set of brackets contains or is contained by another set.\\n- `([<x+y>+3)-1]` makes no sense because the parentheses and the square brackets overlap.\\n\\nGiven a string expression that can contain four types of brackets: `() <> []  {}`, create a function that returns `True` if the bracket logic is valid and `False` if it is not.\\n\\n### Examples\\n```\\nbracket_logic(\\\"[<>()]\\\") ➞ True\\n\\nbracket_logic(\\\"[<(>)]\\\") ➞ False\\n\\nbracket_logic(\\\"[(a*b+<7-c>+9]\\\") ➞ False\\n# Opening parenthesis has no mate.\\n\\nbracket_logic(\\\"[{(h*i+3)-12]/4*x+2}\\\") ➞ False\\n# Square and curly brackets overlap.\\n\\nbracket_logic(\\\"[ab(c/d<e-f+(7*6)>)+2]\\\") ➞ True\\n```\\n\\n### Notes\\nAny characters other than the brackets can be ignored.\",\"lab\":\"Test.assert_equals(bracket_logic(\\\"{b}{y}{ }[x][{{(t)-}{}](t<w(^)>)-b}<[g](x{u[ ]})y>\\\"), False)\\nTest.assert_equals(bracket_logic(\\\"{f}[t[[]]<[+](w)t>u(h)(%){f}[d{e}]{c(/)}<w>][v]\\\"), True)\\nTest.assert_equals(bracket_logic(\\\"[(t)d]</{h}><<a <( )e>[*]{e{e}}<w{x[^]}>>\\\"), False)\\nTest.assert_equals(bracket_logic(\\\"{g}((-) ^>b)[^]{{*<->}(w)(u)(%)}({/}c)(%)[g{b}]<z({<< >w>c}d)[b]>\\\"), False)\\nTest.assert_equals(bracket_logic(\\\"(y)(c)(){[[ ]z] [{+}z[*]]{+}}([d]<y<e>>c)[b][b]\\\"), True)\\nTest.assert_equals(bracket_logic(\\\"((^(b))e>(<d<w>>(({a}/(g)){t</)}b(d)){[v]u})\\\"), False)\\nTest.assert_equals(bracket_logic(\\\"{([%]</>u)<{<y{v}>{<c>h}{y}f}[y]{<*>e}[^]v><[h]d>}[d]\\\"), True)\\nTest.assert_equals(bracket_logic(\\\"{a}{<(^)(b)%>[z]<->e}[{z}%]{<^>g}<[h] ({ }y[*]<v>)>{x[+]<^>}<v>[]\\\"), True)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,3,1,3,2,4,3,5,3,4,0,5,5,3,5,3,2,5,4,2,5,5,0,3,5,4,4,4,3,4,3,1,2,2,3,3,2,1,3,3,2,2,0,4,5,2,5,2,2,2,3,3,3,1,4,5,3,2,3,2,3,5,0,2,1,2,3,2,2,1,4,1,3,2,3,4,0,1,4,2,1,5,1,4,3,3,4,2,3,0,3],\"rators\":[\"aCNWav8S8Try9RkC6\",\"AYaEkTWLMmfzpwejr\",\"tAF9Gf6PiGogbZuWs\",\"gb9rvGus2Jv7bjZSs\",\"cmwasetrBzbwJQbks\",\"t8GRbY5ME64BcgWQk\",\"ZgdejAm3u2Q6tFpfg\",\"bRD4Ls3FoPdiBBFvt\",\"FPpSHXfFyEt4CHpCB\",\"WYM4qQ9pPPP4YPbMp\",\"D6Z9oT2ZhjBCxuL2o\",\"wCki2HFwRSoYLZwMt\",\"pYgorHTLHPChinFCm\",\"ogyeeaEAjmdSBsnta\",\"BFNm9gacwba9KyLFW\",\"5Qvy7fNM2YEQ6PtbY\",\"CRBuiWyb9B8c5XW7w\",\"nLpdvK7EcahCqNe8X\",\"wvXpkjffuXnL85LnN\",\"6W2GSzrYjMD9ANBFY\",\"qJZsi5rhRnWA38FbA\",\"6gsMupsCZJQgiwzJi\",\"XAv3Wmo34EtayqFJT\",\"5DsYhKJiNTaarWKkM\",\"HqmxnQJM66Y57twhn\",\"dZGNAJXB24zNh2tsD\",\"JiDXhxGzzSuXrBnmE\",\"8JyqsSbN2FJXPr3cw\",\"eYWgXzijKqfqgZNDi\",\"wT5gGgvjKc5wz59AQ\",\"8Nt83ze8MuAp7ar7u\",\"AbrJ8hMyv5fFXG6DN\",\"LdRdFW8qCjGu5nYLQ\",\"wmiKeocyx5AvLxRbi\",\"PA6JbX3Y7AAhCdPCg\",\"CtECTBENRQP5YHFJS\",\"CXMA3wxtvRMQjzMgF\",\"KrhNfD5CLAeSnFoQD\",\"fxgjP2DzARKtZrS8i\",\"wxy4r2wiuiGQzPnzs\",\"z3HJc5FMzibFCs5Dv\",\"FHSJnAYTbcsKFgeQa\",\"tALtFZAf3kgELgon9\",\"8PwfYqoDQFThzNtvf\",\"d24GkgvJsNgsHEEpi\",\"EPvtuhK4qkJxKwFgs\",\"FJa6pFTqXKsbocTCu\",\"ma8R2S2xd6uSkCR9P\",\"eHcgvkTGsH7ZziqBo\",\"QKFydGwTvCNKriqiG\",\"2fxapKr8XGdNeaKi2\",\"Kg94pDSdZJ2wSkMcY\",\"R5s7YZe9KJigCJsjS\",\"rPvq3ZKT8KGQoBdLx\",\"jDgJ2fdFS76TSorNc\",\"mRJA2WvcCNHwrApPa\",\"YuqRybodQemYZ3udH\",\"bQfJzDj5RKvQ2ZpgA\",\"Du863uXQ6TKWszNmA\",\"Fki4LenXE4ocaumd5\",\"MNgYsvK6HfLRb8wAz\",\"s8RkDj2avyCFWxiGY\",\"Hq97X7u2WsWGLa8fX\",\"Jqk2uJZZxEv5wZFze\",\"hrzGaJc9KZqgjAvew\",\"Yp7uvStL97cC9fKkY\",\"aEm3Wvj2rFYRL8Lrb\",\"SGhPxX5bHGL8zZqtt\",\"3nied3n8KG8RSNixH\",\"AasGs8AeX9Lcb9xJn\",\"55RQznnuTGpsj3EXd\",\"Nua6T3dBurBy3Qfg9\",\"ZNnsMeNkdDhHjSrZb\",\"s5M5RvgqR9BhB9JoC\",\"mDWNyaaQ9hvPCRzSd\",\"Ecg4m7srYGgZsb4Ck\",\"W5TajitmCyxz87zAC\",\"xn7uGNKeAwPEkP9oA\",\"PytNZK9mNiRiZxPrm\",\"QGmp3LSCSoWAbcTjs\",\"HF28xZKSLM9wEuqNg\",\"8sNv5PTHa7XQ8bNqR\",\"iS5BrkGLzJyPK7nKt\",\"siKtn4x4vNM2m2QBf\",\"p8qqFdJ3FSk5x9z3G\",\"d8qtzoLB264iP8tdY\",\"iojEnnY9FsMfYzp6f\",\"J3upzLHuEwXH7Z2hx\",\"gJYuGdkXEWWmGRLzu\",\"yjtdwc2AC4jA2RWtn\",\"KB8GdTPpWbXBDmm6L\",\"GTKsdeEihE636Le9i\",\"2PufnQcsHsfymufX3\",\"gXTAie79kiw28tx5u\",\"yMSJpupwohyuNLhct\",\"T6iBEE2jp7f7iEF2P\",\"buX4mCQhtXCfBjeno\"],\"total\":99,\"quality\":[5,5,5,5,5,5,5]},\"flags\":0},\"subscribers\":[\"aCNWav8S8Try9RkC6\"],\"summary\":\"Brackets and parentheses in mathematical expressions have to conform to certain logical rules. Every opening bracket must have a closing mate somewhere further down the line. Although brackets can be nested, different types cannot overlap:\\n\\n([+3]-1) makes sense because each set of brackets contains or is contained by another set.\\n([+3)-1] makes no sense becaus\",\"tags\":[\"logic\",\"validation\"],\"timestamp\":{\"$date\":1568848438667},\"title\":\"Bracket Logic\",\"isHidden\":false,\"quality\":5,\"family\":[{\"_id\":\"HQdXY4udvewZH3KX3\",\"language\":\"cpp\"},{\"_id\":\"Cu6euwD8Mi2c7BAHd\",\"language\":\"java\"},{\"_id\":\"edzM82cAzurBfWF3z\",\"language\":\"javascript\"},{\"_id\":\"xFKwv7pAzEdNehwrt\",\"language\":\"python3\"},{\"_id\":\"YCkjFvrBPajMqzAqm\",\"language\":\"ruby\"}]}}"]