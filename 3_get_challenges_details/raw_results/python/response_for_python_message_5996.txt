a["{\"msg\":\"result\",\"id\":\"1709\",\"result\":{\"_id\":\"vLuPSuCWNTuxDJuJt\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"def bitwise_one_zero(lst):\\n\\t\",\"difficulty\":2.1724137931034484,\"familyId\":\"tiXXsdQo7zwn7ircg\",\"instructions\":\"Write a function that returns the smallest integer in a list with its corresponding index and its parity. Even though this challenge can be achieved easily with the modulo operator `%`, `index()` and `min()` methods, these have been restricted to augment the challenge's level of difficulty.\\n\\n### Output Structure\\n```\\n{\\\"@index \\\" + index_of_smallest: smallest_integer, \\\"parity\\\": \\\"odd|even\\\"}\\n```\\n\\n### Examples\\n```\\nbitwise_one_zero([107, 19, -18, -79, 36, 23, 97]) ➞ {\\\"@index 3\\\": -79, \\\"parity\\\": \\\"odd\\\"}\\n\\nbitwise_one_zero([31, 7, 2, 13, 7, 9, 10, 13]) ➞ {\\\"@index 2\\\": 2, \\\"parity\\\": \\\"even\\\"}\\n\\nbitwise_one_zero([3, 3, 3, 3, 3, 3]) ➞ {\\\"@index 0\\\": 3, \\\"parity\\\": \\\"odd\\\"}\\n```\\n\\n### Notes\\n- The set of limitations imposed on this challenge dictates the level of difficulty.\\n- Another version of this challenge that deals with recursion can be found [here](https://edabit.com/challenge/GTnW4bQAZQ38oHuyi).\",\"isHidden\":false,\"lab\":\"from inspect import getsource as src\\nfrom re import findall, search, M\\n\\ndef no_recur(fn):\\n  try:\\n    s, n = src(fn), fn.__name__\\n    if n == '<lambda>': n = 'bitwise_index'\\n    return len(findall(n, s, M)) == 1\\n  except OSError: return True\\n\\ndef no_min_index(fn):\\n  try: return not search(r'min|.+\\\\.index(.+)|%', src(fn), M)\\n  except OSError: return True\\n\\nTest.assert_not_equals(no_recur(bitwise_one_zero), False, \\\"A recursive solution isn't allowed!\\\")\\nTest.assert_not_equals(no_min_index(bitwise_one_zero), False,\\n    'The use of modulo operator (%), built-in functions index() and min() are prohibited!')\\n\\nnum_vector = [\\n  [107, 19, -18, -79, 36, 23, 97],\\n  [31, 7, 2, 13, 7, 9, 10, 13],\\n  [3, 3, 3, 3, 3, 3],\\n  [-31, -7, -13, -7, -9, -13],\\n  [1, 3, 9, 5, -1, 7, 9, 49],\\n  [63, 77, 13, 75, 91, 113],\\n  [6, 6, 6, 6, 6, 6]]\\nres_vector = [\\n  {\\\"@index 3\\\": -79, \\\"parity\\\": \\\"odd\\\"},\\n  {\\\"@index 2\\\": 2, \\\"parity\\\": \\\"even\\\"},\\n  {\\\"@index 0\\\": 3, \\\"parity\\\": \\\"odd\\\"},\\n  {\\\"@index 0\\\": -31, \\\"parity\\\": \\\"odd\\\"},\\n  {\\\"@index 4\\\": -1, \\\"parity\\\": \\\"odd\\\"},\\n  {\\\"@index 2\\\": 13, \\\"parity\\\": \\\"odd\\\"},\\n  {\\\"@index 0\\\": 6, \\\"parity\\\": \\\"even\\\"}]\\nfor i, x in enumerate(num_vector): Test.assert_equals(bitwise_one_zero(x), res_vector[i])\",\"language\":\"python3\",\"summary\":\"Write a function that returns the smallest integer in a list with its corresponding index and its parity. Even though this challenge can be achieved easily with the modulo operator %, index() and min() methods, these have been restricted to augment the challenge's level of difficulty.\\n\\nOutput Structure\\n{\\\"@index \\\" + indexofsmallest: smallest_integer, \\\"parity\\\":\",\"tags\":[\"arrays\",\"logic\",\"loops\"],\"timestamp\":{\"$date\":1595962474110},\"title\":\"Parity of the Smallest Integer\",\"stats\":{\"completed\":{\"total\":72,\"ratings\":[4,4,4,4,4,4,5,0,0,0,4,5,1,5,3,1,2,3,2,2,2,1,2,2,2,1,2,3,1,3,2,3,2,2,2,0,4,1,1,0,3,3,2,5,1,2,1,2,2,2,3,0,0,3,0,0,2,2],\"rators\":[\"a777e8chPvJkY3tKa\",\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\",\"58F4PZvbak6BGMAs2\",\"hZW6j5s6RHpx35phy\",\"fznzd3qnvtbFkkizz\",\"85PAWNajZLAezxkiE\",\"bJxaKHJqR82EWw8Su\",\"GgLd4eWBu79mdjtkP\",\"ji5f27FPz4wRRF6Ls\",\"4fhjJBvLBWh6QeSih\",\"ZNnsMeNkdDhHjSrZb\",\"gb9rvGus2Jv7bjZSs\",\"55RQznnuTGpsj3EXd\",\"LGp9pMnHGQYJnwxxa\",\"6428wKHtwKkFdvBs5\",\"s5M5RvgqR9BhB9JoC\",\"xn7uGNKeAwPEkP9oA\",\"8sNv5PTHa7XQ8bNqR\",\"KZ2xddpM2f9JRaryB\",\"R4SjTgDnpigJYDLyL\",\"zZDaXBxMzTCBhNkgL\",\"tAF9Gf6PiGogbZuWs\",\"yTtSCvGPyYna6JuRC\",\"ywk3XGvcmpTgRxwZa\",\"ZNgDGdtv5WFkcEn6K\",\"f2BoqyCpgnmjEjLqx\",\"TM2t3Le4qPcqSnzKX\",\"DTKtcn5HrYxtcBza3\",\"HnoDeuYM8h3PkXtSz\",\"vSPc7MGK5Poy8tSFp\",\"oNBNrPGYAhQiwbeDv\",\"4a579wXfgSz4gfqDr\",\"r47Cs3y2F8exomjD2\",\"hRiMXDZNAzyPd5tpt\",\"gJYuGdkXEWWmGRLzu\",\"yjtdwc2AC4jA2RWtn\",\"HF28xZKSLM9wEuqNg\",\"iS5BrkGLzJyPK7nKt\",\"QRv96jmNaYsWkxQEG\",\"qD2LrwaDrSdiybLKY\",\"mDWNyaaQ9hvPCRzSd\",\"5dHucvf2qBYyKim7X\",\"LFSASkxgw9hr3KqmC\",\"3Qa9ai5N7PbQFcsi7\",\"J3upzLHuEwXH7Z2hx\",\"Yp7uvStL97cC9fKkY\",\"RTDx9axf52kxhFjwZ\",\"iojEnnY9FsMfYzp6f\",\"hzHsgwjark5sZCQ2c\",\"ZgWwEdWxjy83WpPQX\",\"yr822PZmmiDDenxpB\",\"cR3ibTMxLyEdDFCHY\",\"LQxof8pGabGuWP7Gn\",\"AasGs8AeX9Lcb9xJn\",\"oBcs8GLX2ZFLXQy8y\",\"AFfw7cGg83uYk2Miy\",\"PWgzeK859suojbrRx\",\"HqmxnQJM66Y57twhn\",\"DPi9QGLctq2y76KuE\",\"GGdmhAvxXhqhhibJN\",\"T6iBEE2jp7f7iEF2P\",\"yod5YhKtPqw2GfG9B\",\"2PufnQcsHsfymufX3\"],\"quality\":[4,5,5,5,4,5,5,5,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"a777e8chPvJkY3tKa\",\"quality\":4.818181818181818,\"family\":[{\"_id\":\"JCxa7DhzitMZFWBk4\",\"language\":\"javascript\"},{\"_id\":\"vLuPSuCWNTuxDJuJt\",\"language\":\"python3\"}]}}"]