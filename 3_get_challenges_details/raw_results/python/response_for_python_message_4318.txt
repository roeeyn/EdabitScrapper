a["{\"msg\":\"result\",\"id\":\"877\",\"result\":{\"_id\":\"QWAqDyd9RXqyrNyo3\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def abbreviate(sentence, n):\\n\\t\",\"difficulty\":1.4221311475409837,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"DHKh96suHm6t38etd\",\"instructions\":\"Create a function which takes a `sentence` and returns its abbreviation. Get all of the words over or equal to `n` characters in length and return the first letter of each, *capitalised* and overall returned as a single string.\\n\\n### Examples\\n```\\nabbreviate(\\\"do it yourself\\\") ➞ \\\"Y\\\"\\n\\nabbreviate(\\\"do it yourself\\\", 2) ➞ \\\"DIY\\\"\\n# \\\"do\\\" and \\\"it\\\" are included because the second parameter specified that word lengths 2 are allowed.\\n\\nabbreviate(\\\"attention AND deficit OR hyperactivity THE disorder\\\") ➞ \\\"ADHD\\\"\\n# Words below the default 4 characters are not included in the abbreviation.\\n\\nabbreviate(\\\"the acronym of long word lengths\\\", 5) ➞ \\\"AL\\\"\\n# \\\"acronym\\\" and \\\"lengths\\\" have 5 or more characters.\\n```\\n\\n### Notes\\nThere may not be an argument given for `n` so set the default to `4`.\",\"isHidden\":false,\"lab\":\"Test.assert_equals(abbreviate(\\\"do it yourself\\\", 2), \\\"DIY\\\")\\nTest.assert_equals(abbreviate(\\\"attention AND deficit OR hyperactivity THE disorder\\\"), \\\"ADHD\\\")\\nTest.assert_equals(abbreviate(\\\"the acronym of long word lengths\\\", 5), \\\"AL\\\")\\nTest.assert_equals(abbreviate(\\\"laugh out loud\\\"), \\\"LL\\\")\\nTest.assert_equals(abbreviate(\\\"Keep It Simple Stupid\\\"), \\\"KSS\\\")\\nTest.assert_equals(abbreviate(\\\"laugh out loud\\\", 3), \\\"LOL\\\")\\nTest.assert_equals(abbreviate(\\\"Keep It Simple Stupid\\\",2), \\\"KISS\\\")\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,1,0,2,2,2,2,0,0,0,2,1,2,1,2,2,0,2,2,2,2,1,2,1,0,2,1,2,1,2,2,1,2,1,2,2,2,2,0,0,1,1,2,3,2,1,2,2,0,2,0,2,2,1,2,2,0,0,0,5,2,2,1,1,1,0,1,3,1,2,2,2,2,1,1,2,1,2,1,2,2,2,0,2,1,1,2,0,0,1,2,2,1,1,1,2,0,0,1,2,1,1,2,2,2,1,1,0,2,2,2,2,2,2,1,2,0,2,3,1,2,2,0,2,1,2,1,3,2,2,0,1,1,3,1,2,2,0,2,1,2,2,2,0,1,2,1,2,0,2,2,2,3,2,1,1,2,2,2,2,1,2,2,2,2,2,0,1,1,1,0,2,2,2,0,0,2,1,0,0,1,3,1,2,0,2,2,2,2,2,1,1,0,2,2,0,1,2,2,2,2,2,2,2,2,2,1,1,1,2,1,1,1,2,1,2,2,0,2,2,1,2,1,1,0,2,1,2,0,2,1,1,2,2,1,0,1,1,0],\"rators\":[\"tAF9Gf6PiGogbZuWs\",\"Jqk2uJZZxEv5wZFze\",\"gb9rvGus2Jv7bjZSs\",\"u5u2YpHXiNgzDNJdX\",\"2fxapKr8XGdNeaKi2\",\"K96FwtfDDN5WM4Bb7\",\"K3RacTvkWHLfzKF8i\",\"ab7BsQuhDo3QgE6bh\",\"HqmxnQJM66Y57twhn\",\"PhceyfmFntJcn5Fhf\",\"2innwjWqxJHo4eRGh\",\"BeFnbPbMnAM2SjBdZ\",\"HQxp7NcdvF92G7bYS\",\"rEWQdNHK6YjuBqmrR\",\"jeuoearPPTcGPgXhf\",\"Ycj4iTJGFyvC4bXek\",\"mxX4rH5ELYkdZ2Mbw\",\"s5M5RvgqR9BhB9JoC\",\"8JyqsSbN2FJXPr3cw\",\"4CFzv558qbGcpQwc4\",\"4fctAnxyFRB8stPRQ\",\"Yp7uvStL97cC9fKkY\",\"QnPD4Sv6W4LHc2Qng\",\"C4QntmkYtB89GNtpd\",\"PTcm3qFvxvLnaKttM\",\"xowjbn5yEv7c93axA\",\"j2wcHGHmPCHbaQEye\",\"Pd9Egc5YnLfaxE2Nt\",\"nfXGHENb5md7m355s\",\"yabtHTtycsWhcGBfD\",\"wwz3ixWSv8rFDHBXd\",\"XbxHXmh5ZmRN2gw3K\",\"uw47663LqPME8btaA\",\"v3fjGuc7Pq4yjFygS\",\"hnyhBFWwNCz9mDfSi\",\"4tgBydK887PitgAoi\",\"myXAR5qDJsBaPnff2\",\"pMg2Zddm29zRGP6wg\",\"zg8GmMSP2LkHBtAzy\",\"aRqQ42J5zqCmBNd8w\",\"yZvzB3qFb8pkHy4dg\",\"LQxof8pGabGuWP7Gn\",\"9Ly8afdtofp8DXzrt\",\"sz8ufn9i8zeiGWpAy\",\"AeSmk2XWGcTLHB7PJ\",\"N7GPFEhCaiQ79MKjz\",\"w3A7cBWyAfukk6xEQ\",\"LA2YneDcbtiSj5SH6\",\"dHZqT6h4JMwk5fPC8\",\"sbJcFfQjQ59Wfg4Cd\",\"cR3ibTMxLyEdDFCHY\",\"hiGXnxds6zo7XsfTw\",\"vLrq4dEDMM2wd68Dc\",\"aEm3Wvj2rFYRL8Lrb\",\"6BQLjjAsf9hasbK9g\",\"8LfTheFzvicameoz9\",\"v9KtC8YLbMWmXiW2H\",\"2QGRoQn2dRq3scu7k\",\"2iFe3EHEH2YdhSKrs\",\"J5T8gZqiZXFuFDTQ7\",\"g8yJiPAWXbrgxbjfZ\",\"8PwfYqoDQFThzNtvf\",\"ZNnsMeNkdDhHjSrZb\",\"HF28xZKSLM9wEuqNg\",\"gJYuGdkXEWWmGRLzu\",\"9uZpgAtSuPZ7W7DL6\",\"KRSKj7ikX2ytWFmod\",\"eLkj3Zb2DqiW4AEEh\",\"q5a96XumccZyhQNyL\",\"Cc2Cgj4MWXZxsTooC\",\"DEDniTrstQYGounXT\",\"kYWb8BwpKwunQkxeX\",\"qPSEBYMMi9WJRr8SA\",\"KdNDysEsy2TW5QRJ2\",\"M8dQuMrEpP8Hc3tHN\",\"9pzFiFK3ANLjQfnr2\",\"FEYpu9RWysAgW3XnP\",\"MKT7khMBGXzA22ykf\",\"5cmvoGYHLNmT8n6jP\",\"DwetpbChQM4r6Gwah\",\"FzxTj4GuujhwpZM7y\",\"k27vA7iEaLo9YhqQm\",\"ahk2qiXKJA753wAJk\",\"a777e8chPvJkY3tKa\",\"yr822PZmmiDDenxpB\",\"XrqNzJ2FRG8HnGiR6\",\"LWCzZ8mb8gwrRNGfq\",\"dKKMvaYoJunNPk5Wa\",\"4rwxLqLs2mNZNg8NB\",\"E8TMSMSamEbBtf9Lo\",\"mfsaETo7uA4x5vqLD\",\"ekQh3jzgGLsEMbKo3\",\"NG8PWBSjsM8mMhQEq\",\"zAsNgFHdyiHeiHB8C\",\"jBR47vA7HwAZqp4QA\",\"2ptN2mhjFwFcHyPZd\",\"bCDTKAoS4biDmQ64Y\",\"eMuCpJ2spXWkJjWNz\",\"3cF6NXq3ZEwdkgSjb\",\"H4abACFDH5t8CnnyH\",\"AvtKS96FxZxLFymuP\",\"dKtYzJHAswturm7Fe\",\"zd9FLSzsGz3evKafy\",\"j57Xos8wYZWcwqMrt\",\"ZrKCkX7xxGGZzauFW\",\"yYxPzFqBgtQ9fsyHM\",\"r7JXHsnJGCbRxYvDf\",\"yKttxy9JGn5Jzwuj6\",\"LCZ6JTAhBZBmWLzm8\",\"YcCLwitFMAEJSnxAW\",\"Z4M3NAa4TXquMNkHe\",\"n2BRY9X8899dcG8Bw\",\"9CoqdidjM9KbeKnHY\",\"8BFSTCnoe2QggN64c\",\"syRNbbPdLCGXbH2Gy\",\"Ne8mK9DDHG8TRkoxG\",\"8TAYWzqJAkXq2MAba\",\"DoDsp3ets8frF9W3C\",\"rfyEkETeoS96QNH4e\",\"TwKZ3835iFLog2RuQ\",\"zT9LpkiwYjLviYYW6\",\"8zWoQQvtYdg5yoweM\",\"R4SjTgDnpigJYDLyL\",\"iojEnnY9FsMfYzp6f\",\"bJxaKHJqR82EWw8Su\",\"yNjkHfHESBAnCssPB\",\"Pe8vWpDHRuH9nSGKW\",\"b9YQPLb9ZPSADdHXX\",\"GGprTwrkjuccmrQRg\",\"EMJ6uvBZkie429gdg\",\"Ecg4m7srYGgZsb4Ck\",\"NzbRqGWspQnWMoDrF\",\"Q9afpRu3u8zuWuzLQ\",\"iS5BrkGLzJyPK7nKt\",\"yjtdwc2AC4jA2RWtn\",\"sX9GZp3fYyQLrBKMJ\",\"oBcs8GLX2ZFLXQy8y\",\"hRiMXDZNAzyPd5tpt\",\"yAouD3PxzED8a4gap\",\"QcnnRMRzsNyA6oC5S\",\"Wv2vJnEj8ywNmARoF\",\"ta5CrWnBCRusD2WMo\",\"JS3hNM3XXkxPdg3yk\",\"tcsswuFnfw39XE6rh\",\"YA7SDhpgEtsqynvNL\",\"6gS4E2C84vBYTYeDZ\",\"RehJGBFS6CYiWdjZx\",\"ji5f27FPz4wRRF6Ls\",\"u7i7WPM63n42r8R8o\",\"C9LKGu2g5hSijvDzA\",\"PTDFuxAzou7W6asWt\",\"TPhfpB5tzQWSSn67n\",\"w2HhxvSLmDhaGCAjE\",\"7K2GEb5TZRtSpyyGS\",\"p8qqFdJ3FSk5x9z3G\",\"3nied3n8KG8RSNixH\",\"4ZicxybyvEsuA9iET\",\"KLmLKaJPfsYxp42p2\",\"M5EwoQRcpt96AzsYw\",\"FvFhg2wELM3SCZDZQ\",\"k2Eo3wyfZZ6KxvKhN\",\"tpxMgkGSHwBjS95Ta\",\"Kh3Pc2ZRusurLaMyP\",\"mG8HqKiAQFTdRZthG\",\"gXTAie79kiw28tx5u\",\"b5zo7s6xrqWgQnPao\",\"6HgMANhu6WiGyXSGN\",\"kNrnnMxhFZztMTBAX\",\"8WpvgSbQciTQWdd8T\",\"wRttWTM59y8m5mx7x\",\"DPi9QGLctq2y76KuE\",\"dBzwBtRjZqB98DJeB\",\"dj5AyG5fWP8FdsSmZ\",\"QRv96jmNaYsWkxQEG\",\"axdSNLZpiCDF8RS6n\",\"Q4RqhzTHiBKvZa2v9\",\"sHjfbGQGLHE6JR6qu\",\"dyBcJXfbqJtjTmBZK\",\"rrSC943cCKNG48sH4\",\"NuqGt5u3s7vJ7HBGR\",\"J3upzLHuEwXH7Z2hx\",\"g9FyJ8yeT9ic97Qp2\",\"8fZxjQfuXw5HMSRJM\",\"d8qtzoLB264iP8tdY\",\"6MjSiiBLPcvXbXcaZ\",\"cAP3n5NY64uoMwzRR\",\"KJCDwGkoXh8qtbbKr\",\"dYPkStFnLvAMsHSzZ\",\"RGMbFMZXJr7DhcAJy\",\"Tf7TJFSPktJBgLA4k\",\"i5iePG5GqhJJ8HEoB\",\"5XiuAqicKD4hBdu63\",\"mrrpfRpk9i5Zkk5Tm\",\"4fjSgcqhQQZM2ZFRP\",\"ey3CASd6Je5LEJzfB\",\"3pxHTZBsv7MKzFG6Y\",\"C2AfMipCicfD58WJ9\",\"Cybtjz3cF7RgoiqrN\",\"YRAzEBJoLvSaiPtYx\",\"HuNF3xTBzmatyGSTm\",\"utTuvGdmu2sBHWBhQ\",\"mDWNyaaQ9hvPCRzSd\",\"pduNK68oazqQTtbLp\",\"o4ixjQGSaYqA2JoM4\",\"WdKdsgH9gXkKgCycx\",\"buX4mCQhtXCfBjeno\",\"5S9nX4rKsnCcnv4Cz\",\"MXGuntvz3byrP6WJc\",\"GGdmhAvxXhqhhibJN\",\"5hQnRWiKkhgKJXNMP\",\"B8n7KqbvEDjZzgj2D\",\"EfxwqhYdapX3dMQC2\",\"nFbmNzMQ38TncmfQX\",\"Ds7L5bksw2QRHjrKL\",\"yod5YhKtPqw2GfG9B\",\"eYfPWvZwnJQkHbSTK\",\"srJ34BaybkQh3qRkM\",\"p7js9trz2zk2RorCR\",\"PWgzeK859suojbrRx\",\"wjc4iejpErBhxWwHo\",\"q6QsMYNMpPNtmyTeW\",\"qQQ4hCQpzitmHSkjS\",\"CHvzhtXnv8HTbPQ56\",\"JhX7jvtpwNyxcc39m\",\"nH4jmgsCXv8duz8kq\",\"qAby4AWXmTNeusvg3\",\"T6iBEE2jp7f7iEF2P\",\"7txFzDQ43vJ7qCY88\",\"XD5nmvKQchKezPXhy\",\"BJp2WkwLWGHHB5oQW\",\"AFfw7cGg83uYk2Miy\",\"66a9xX73nmTEuKs9k\",\"BrTDhPJcACL2bsrpJ\",\"2EbDCCJJvCfKkbYia\",\"PC3pLs36zNzpRDSuE\",\"YmQb9Mo4Xcg2vzgbn\",\"GTKsdeEihE636Le9i\",\"dJzNF59j2p8jWZxiQ\",\"Wpn95NqWxncQrwNgz\",\"2HfNkb2SoqdyjKW3o\",\"c2q7mY39z5JPEMCaM\",\"kdcWyvQAs27aCfbr8\",\"tdfY4iBvD7oh2ufnN\",\"mvJBakQ35CWAnbbEZ\",\"NfMJuiBk6FN5Jc6ow\",\"X4rzfxGgxx6CS7Bpz\",\"2PufnQcsHsfymufX3\",\"K6MfKMytoJJuSGewP\",\"RoGGD5cpHb4ftdLDv\",\"ghMkPtdFCpM6w8nax\",\"R6YxHWAiLgKwy5YvC\",\"AJexRBN9cYQmqvYu6\",\"4Lwjr34ypKNQNQCar\",\"hR7GMiqGap4CzEWSy\",\"796v8eRqahP6wpLdL\",\"4RY3zj9C2t8GGefhi\",\"4TmgHkn5vqyHK3sYC\",\"eHcgvkTGsH7ZziqBo\",\"N2wnZXkhDH86mgjQ8\",\"nc7bRhkxgKyqusYe3\",\"T6Rm8mREPMZSftzrC\",\"uGuS9YRXW2nj4p6zf\",\"jWbd7SYDzLPjc9EDh\",\"d9LBRxvADNBB5QJMB\",\"dzS6WBTMHyFEag6Fp\",\"AQSqD9oNv2uPfxZCR\",\"M2gFMJkocQSY6bsFR\",\"AMpQSjKsRqhCDyS2j\",\"Qyfyyw6oC4EHAndzo\",\"B4y8aoyXJtskYPFEL\",\"rCrbqMiaGPgHYTNxu\",\"qB6KSTYC6H2TQEQY6\",\"o2AEoyCijeNx5MEqW\",\"pPpmP7xeJzGgK362R\",\"3KkyQm77zsew58Dc2\",\"5QN8R22z43SrwoHDz\",\"suArq5BbSy7gD6xri\",\"vCeeMuYDbz3MB4vsk\",\"Wi4H6ayKsNDWWQCG5\",\"hyk872ZHsAbLnD93b\",\"eW9R2SCoYnY8HBAdL\",\"vAbK8sCfKyFC78HYg\",\"ruzwBPphPDRgLXdnP\",\"wrL4iX2CCSqDCCty3\",\"E2hpke7mHxAWsw5t9\",\"RfbjShbg8jmhyNtJh\"],\"total\":314,\"quality\":[5,5,3,5,5,1,5,5,4,4,5,5,3,5,5,5,5,5,5,5,5,5,5,5,5,4,5,4,5,5,5,5,4,5,5,5,5,5,5,5,5,5,3,5,5,4,5]},\"flags\":1},\"summary\":\"Create a function which takes a sentence and returns its abbreviation. Get all of the words over or equal to n characters in length and return the first letter of each, capitalised and overall returned as a single string.\\n\\nExamples\\nabbreviate(\\\"do it yourself\\\") ➞ \\\"Y\\\"\\n\\nabbreviate(\\\"do it yourself\\\", 2) ➞ \\\"DIY\\\"\\n\\\"do\\\" and \\\"it\\\" are included because the second paramete\",\"tags\":[\"strings\",\"formatting\"],\"timestamp\":{\"$date\":1579450859713},\"title\":\"Abbreviating a Sentence\",\"quality\":4.659574468085107,\"family\":[{\"_id\":\"ktqDpdPrFApaQpcCi\",\"language\":\"javascript\"},{\"_id\":\"QWAqDyd9RXqyrNyo3\",\"language\":\"python3\"},{\"_id\":\"C4ZDfDwiR7meiYqYz\",\"language\":\"ruby\"}]}}"]