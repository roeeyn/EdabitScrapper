a["{\"msg\":\"result\",\"id\":\"930\",\"result\":{\"_id\":\"mhcjnns2WWiHWexP7\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def calculate_arrowhead(lst):\\n\\t\",\"difficulty\":1.4672131147540983,\"editorId\":\"PXAcsKkssS2yLyDv2\",\"familyId\":\"o4t47QssTTndxzMq8\",\"instructions\":\"In a board game, a player may pick up a card with several left or right facing arrows, with the number of arrows indicating the number of tiles to move. The player should move either left or right, depending on the arrow's direction.\\n\\nGiven a list of the arrows contained on a player's cards, return a singular string of arrowheads that are equivalent to all of the arrowheads.\\n\\n### Worked Example\\n```\\ncalculate_arrowhead([\\\">>\\\", \\\"<<\\\", \\\"<<<\\\"]) ➞ \\\"<<<\\\"\\n\\n# >> means to move 2 places right\\n# << means to move 2 places left (cancelling out >>)\\n# <<< means to move a further 3 places left\\n# overall, the movement can be written as <<<\\n```\\n\\n### Examples\\n```\\ncalculate_arrowhead([\\\">>>>\\\", \\\"<\\\", \\\"<\\\", \\\"<\\\"]) ➞ \\\">\\\"\\n\\ncalculate_arrowhead([\\\">\\\", \\\"<\\\", \\\">>\\\", \\\"<\\\", \\\"<<<\\\"]) ➞ \\\"<<\\\"\\n\\ncalculate_arrowhead([\\\">>>\\\", \\\"<<<\\\"]) ➞ \\\"\\\"\\n```\\n\\n### Notes\\nReturn an **empty string** if all the arrowheads cancel out.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(calculate_arrowhead([\\\">>>>\\\", \\\"<\\\", \\\"<\\\", \\\"<\\\"]), \\\">\\\")\\nTest.assert_equals(calculate_arrowhead([\\\">\\\", \\\"<\\\", \\\">>\\\", \\\"<\\\", \\\"<<<\\\"]), \\\"<<\\\")\\nTest.assert_equals(calculate_arrowhead([\\\">>>\\\", \\\"<<<\\\"]), \\\"\\\")\\nTest.assert_equals(calculate_arrowhead([\\\">>\\\", \\\"<<\\\", \\\"<<<\\\"]), \\\"<<<\\\")\\nTest.assert_equals(calculate_arrowhead([\\\">\\\", \\\">>>>>\\\", \\\">>>>\\\", \\\">>>>>>>\\\", \\\">>>>>>>>\\\", \\\">>>>\\\", \\\">>>>>>>>\\\"]), \\\">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\\\")\\nTest.assert_equals(calculate_arrowhead([\\\"<\\\", \\\">>>>>>\\\", \\\"<<<<<<<<\\\", \\\"<<<<<<<<<<\\\", \\\">>>>>>>\\\", \\\">>>\\\"]), \\\"<<<\\\")\\nTest.assert_equals(calculate_arrowhead([\\\"<<<<\\\", \\\">>>>>\\\"]), \\\">\\\")\\nTest.assert_equals(calculate_arrowhead([\\\"<<<<<<<<<\\\", \\\"<<<<\\\", \\\">>>\\\", \\\">>>>>>>>\\\", \\\">>>>>>>\\\", \\\"<<<<<\\\"]), \\\"\\\")\\nTest.assert_equals(calculate_arrowhead([\\\">>>>>>>>>>\\\", \\\"<<\\\", \\\">>>>>>>>>>\\\"]), \\\">>>>>>>>>>>>>>>>>>\\\")\\nTest.assert_equals(calculate_arrowhead([\\\">\\\", \\\"<<<\\\", \\\">>>>>>>>>>\\\", \\\">>>>>\\\"]), \\\">>>>>>>>>>>>>\\\")\\nTest.assert_equals(calculate_arrowhead([\\\"<<<<<<<<<\\\", \\\">>>\\\", \\\"<<<<<\\\"]), \\\"<<<<<<<<<<<\\\")\\nTest.assert_equals(calculate_arrowhead([\\\">\\\", \\\"<<\\\"]), \\\"<\\\")\\nTest.assert_equals(calculate_arrowhead([\\\"<<<\\\", \\\"<<\\\", \\\"<\\\"]), \\\"<<<<<<\\\")\\nTest.assert_equals(calculate_arrowhead([\\\"<<\\\", \\\"<<<<<<<\\\", \\\">>>>>>>>>\\\"]), \\\"\\\")\\nTest.assert_equals(calculate_arrowhead([\\\">>>>>\\\", \\\">>>>>>>>\\\", \\\"<<<<<<\\\", \\\"<<<<\\\", \\\"<<<<<<<\\\"]), \\\"<<<<\\\")\\nTest.assert_equals(calculate_arrowhead([\\\">>\\\", \\\"<<<<<<<<<\\\", \\\">>>>>>\\\", \\\"<<<<<\\\"]), \\\"<<<<<<\\\")\\nTest.assert_equals(calculate_arrowhead([\\\">>>>>>>>>>\\\", \\\">>>\\\", \\\"<\\\"]), \\\">>>>>>>>>>>>\\\")\\nTest.assert_equals(calculate_arrowhead([\\\"<<\\\", \\\">>>>>>\\\", \\\"<<\\\", \\\">\\\", \\\">>>\\\", \\\"<<<\\\"]), \\\">>>\\\")\\nTest.assert_equals(calculate_arrowhead([\\\">\\\", \\\">>>>>>>>>>\\\", \\\"<\\\", \\\"<<\\\"]), \\\">>>>>>>>\\\")\\nTest.assert_equals(calculate_arrowhead([\\\"<<<<\\\", \\\">>>>\\\", \\\">>\\\", \\\"<<<<<<<<<\\\"]), \\\"<<<<<<<\\\")\\nTest.assert_equals(calculate_arrowhead([\\\">>>>>>>\\\", \\\">>\\\", \\\"<<<<<<<<<<\\\", \\\">>>>\\\", \\\">>>>>>>>>\\\", \\\"<<\\\", \\\">>>>>>>>>\\\"]), \\\">>>>>>>>>>>>>>>>>>>\\\")\\nTest.assert_equals(calculate_arrowhead([\\\"<<<<<<<<<\\\", \\\">>>>>>\\\", \\\">>\\\", \\\"<<<<<<<\\\"]), \\\"<<<<<<<<\\\")\\nTest.assert_equals(calculate_arrowhead([\\\">>>\\\", \\\"<<<\\\", \\\">>>>>>>>>>\\\", \\\">>\\\", \\\">>>\\\", \\\"<<\\\", \\\"<<<<<<\\\"]), \\\">>>>>>>\\\")\\nTest.assert_equals(calculate_arrowhead([\\\">>>>>>>>>\\\", \\\">>>>>>>>>\\\", \\\"<<<<<\\\", \\\">>>>>>>>\\\", \\\">>>>>>>\\\"]), \\\">>>>>>>>>>>>>>>>>>>>>>>>>>>>\\\")\",\"language\":\"python3\",\"quality\":4.634146341463414,\"stats\":{\"completed\":{\"ratings\":[1,1,1,1,1,1,1,2,1,1,3,1,2,0,2,1,2,2,0,1,0,2,2,2,2,2,2,2,0,2,2,2,1,2,5,2,1,2,2,2,3,1,1,0,2,2,0,0,2,1,1,2,2,1,1,0,2,1,2,0,2,2,1,2,2,2,0,2,0,1,0,2,1,2,2,2,2,2,1,2,1,2,1,1,0,2,1,1,0,1,2,2,2,2,1,1,2,2,2,2,2,0,2,2,2,2,1,2,2,2,1,1,2,2,2,2,2,0,2,1,1,2],\"quality\":[5,5,2,5,5,5,5,5,5,5,5,5,5,5,5,4,5,5,4,5,5,5,5,5,4,4,3,5,5,5,4,1,5,5,5,4,5,5,5,5,5],\"rators\":[\"PXAcsKkssS2yLyDv2\",\"f42SoFHva5vkzoa8X\",\"qBhL68Kraua7EeBcz\",\"qTQGbqpJsx3SRcHZq\",\"Yp7uvStL97cC9fKkY\",\"tBdXugNsWbxAMBSBz\",\"8JyqsSbN2FJXPr3cw\",\"EFqhE7GRf6PSKMSg6\",\"5HCu9Ydd86QgHDRNP\",\"a8ZhCFx7FcQHfEggd\",\"XeNskNoh5DcHuKTWX\",\"YcCLwitFMAEJSnxAW\",\"qHpjEJAPNjfYGGxWY\",\"Jqk2uJZZxEv5wZFze\",\"gb9rvGus2Jv7bjZSs\",\"pPpmP7xeJzGgK362R\",\"v65ajcDoSK4C7MAtk\",\"CNh6vEnDM9NK9fWzJ\",\"iDBesnXijscDD8MZt\",\"RGMbFMZXJr7DhcAJy\",\"zd9FLSzsGz3evKafy\",\"pduNK68oazqQTtbLp\",\"dNErCjyFobE5sn4Zh\",\"QRv96jmNaYsWkxQEG\",\"J3upzLHuEwXH7Z2hx\",\"wRttWTM59y8m5mx7x\",\"cRoHBaA7HjePc8wb2\",\"NzbRqGWspQnWMoDrF\",\"WdKdsgH9gXkKgCycx\",\"FEYpu9RWysAgW3XnP\",\"zT9LpkiwYjLviYYW6\",\"s5M5RvgqR9BhB9JoC\",\"8PwfYqoDQFThzNtvf\",\"HuNF3xTBzmatyGSTm\",\"J5T8gZqiZXFuFDTQ7\",\"mDae9AksgyKD6k4DS\",\"rfyEkETeoS96QNH4e\",\"cAP3n5NY64uoMwzRR\",\"gJYuGdkXEWWmGRLzu\",\"iS5BrkGLzJyPK7nKt\",\"p8qqFdJ3FSk5x9z3G\",\"HF28xZKSLM9wEuqNg\",\"dBzwBtRjZqB98DJeB\",\"gXTAie79kiw28tx5u\",\"w2HhxvSLmDhaGCAjE\",\"DPi9QGLctq2y76KuE\",\"d8qtzoLB264iP8tdY\",\"oBcs8GLX2ZFLXQy8y\",\"buX4mCQhtXCfBjeno\",\"aEm3Wvj2rFYRL8Lrb\",\"2QGRoQn2dRq3scu7k\",\"R4SjTgDnpigJYDLyL\",\"eMuCpJ2spXWkJjWNz\",\"2H7qphwdz7PPoFKgc\",\"HqmxnQJM66Y57twhn\",\"5XiuAqicKD4hBdu63\",\"sHjfbGQGLHE6JR6qu\",\"eYfPWvZwnJQkHbSTK\",\"5S9nX4rKsnCcnv4Cz\",\"o4ixjQGSaYqA2JoM4\",\"5hQnRWiKkhgKJXNMP\",\"GGdmhAvxXhqhhibJN\",\"DEDniTrstQYGounXT\",\"KJCDwGkoXh8qtbbKr\",\"AJexRBN9cYQmqvYu6\",\"Wv2vJnEj8ywNmARoF\",\"q2tzvkrLASvSjkek9\",\"Ds7L5bksw2QRHjrKL\",\"axdSNLZpiCDF8RS6n\",\"srJ34BaybkQh3qRkM\",\"yjtdwc2AC4jA2RWtn\",\"yod5YhKtPqw2GfG9B\",\"q6QsMYNMpPNtmyTeW\",\"qQQ4hCQpzitmHSkjS\",\"8BFSTCnoe2QggN64c\",\"cR3ibTMxLyEdDFCHY\",\"qAby4AWXmTNeusvg3\",\"CHvzhtXnv8HTbPQ56\",\"BrTDhPJcACL2bsrpJ\",\"wjc4iejpErBhxWwHo\",\"T6iBEE2jp7f7iEF2P\",\"3KkyQm77zsew58Dc2\",\"iojEnnY9FsMfYzp6f\",\"3cF6NXq3ZEwdkgSjb\",\"tAF9Gf6PiGogbZuWs\",\"ey3CASd6Je5LEJzfB\",\"XD5nmvKQchKezPXhy\",\"H9KZi2cjt4FwH7qog\",\"66a9xX73nmTEuKs9k\",\"EfxwqhYdapX3dMQC2\",\"AFfw7cGg83uYk2Miy\",\"Wpn95NqWxncQrwNgz\",\"Cc2Cgj4MWXZxsTooC\",\"NQQzu4wyLWW9faWtK\",\"TpRLLuisQmCSuRMiR\",\"c2q7mY39z5JPEMCaM\",\"ghMkPtdFCpM6w8nax\",\"2PufnQcsHsfymufX3\",\"mvJBakQ35CWAnbbEZ\",\"q5a96XumccZyhQNyL\",\"yr822PZmmiDDenxpB\",\"X4rzfxGgxx6CS7Bpz\",\"PC3pLs36zNzpRDSuE\",\"2fxapKr8XGdNeaKi2\",\"oJx5acEiYhhKXT496\",\"K6MfKMytoJJuSGewP\",\"Cuy7McJ5y8BkXRRk9\",\"sKBGcRfEr6LrvG8A2\",\"2u9wghjCydey6aWys\",\"AasGs8AeX9Lcb9xJn\",\"RoGGD5cpHb4ftdLDv\",\"R6YxHWAiLgKwy5YvC\",\"fKzJMR2LLbiRtGetj\",\"rrSC943cCKNG48sH4\",\"9Ly8afdtofp8DXzrt\",\"xC7fsEsW75psDxxgZ\",\"qD2LrwaDrSdiybLKY\",\"MKT7khMBGXzA22ykf\",\"LQxof8pGabGuWP7Gn\",\"qzXAMXsHZGT8o5hTA\",\"9pzFiFK3ANLjQfnr2\",\"4Lwjr34ypKNQNQCar\",\"hR7GMiqGap4CzEWSy\",\"2iFe3EHEH2YdhSKrs\",\"4RY3zj9C2t8GGefhi\",\"796v8eRqahP6wpLdL\",\"4TmgHkn5vqyHK3sYC\",\"StNu7DPyTgEStZsMY\",\"7txFzDQ43vJ7qCY88\",\"gjiu8kLnHYxe4HoBN\",\"YA7SDhpgEtsqynvNL\",\"N2wnZXkhDH86mgjQ8\",\"T6Rm8mREPMZSftzrC\",\"jkbavR2ATFJcpmo8M\",\"JhX7jvtpwNyxcc39m\",\"nc7bRhkxgKyqusYe3\",\"uGuS9YRXW2nj4p6zf\",\"GTKsdeEihE636Le9i\",\"dYPkStFnLvAMsHSzZ\",\"d9LBRxvADNBB5QJMB\",\"Afnps7TJQuS9sipMb\",\"u5u2YpHXiNgzDNJdX\",\"dzS6WBTMHyFEag6Fp\",\"hpT9yYe5R45poHrYR\",\"yAouD3PxzED8a4gap\",\"suArq5BbSy7gD6xri\",\"eHcgvkTGsH7ZziqBo\",\"qB6KSTYC6H2TQEQY6\",\"Qyfyyw6oC4EHAndzo\",\"rCrbqMiaGPgHYTNxu\",\"mw9464S5dnenqzvpm\",\"mxX4rH5ELYkdZ2Mbw\",\"EC3vxzsccoFjfhf86\",\"dj5AyG5fWP8FdsSmZ\",\"5QN8R22z43SrwoHDz\",\"Zyg9xAm6EuH4u3Lo5\",\"Wi4H6ayKsNDWWQCG5\",\"8uiLiJcmWxWe6qw65\"],\"total\":169},\"flags\":0},\"summary\":\"In a board game, a player may pick up a card with several left or right facing arrows, with the number of arrows indicating the number of tiles to move. The player should move either left or right, depending on the arrow's direction.\\n\\nGiven a list of the arrows contained on a player's cards, return a singular string of arrowheads that are equivalent to all of\",\"tags\":[\"strings\",\"algorithms\",\"arrays\"],\"timestamp\":{\"$date\":1605633273369},\"title\":\"Back and Forth\",\"family\":[{\"_id\":\"4evqAi8a5bnGCsPR2\",\"language\":\"cpp\"},{\"_id\":\"8ZQmveyijozCKFGTB\",\"language\":\"javascript\"},{\"_id\":\"mhcjnns2WWiHWexP7\",\"language\":\"python3\"},{\"_id\":\"wvjxK9c2JjWLK6uLq\",\"language\":\"ruby\"}]}}"]