a["{\"msg\":\"result\",\"id\":\"1833\",\"result\":{\"_id\":\"6FGu55pesinTfcD23\",\"author\":\"Arthur Yamato\",\"authorId\":\"C8D598rzLvDzHosq6\",\"code\":\"def find_pattern(dict_, p):\\n\\t\",\"difficulty\":2.542372881355932,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"7pJFJbRzrXZRznzDk\",\"instructions\":\"- Given a dictionary containing up to six phrases, return a list containing the matching phrases according to the **given string (p)**.\\n- Ignore any digit that is placed after or before the given string.\\n- Whether the first letter is capitalized or not, if all letters of the word match the **given string (p)**, it is valid.\\n- If it does not match the **given string (p)** then None.\\n\\n### Examples\\n```\\nfind_pattern({\\n  \\\"Phrase1\\\": \\\"COVID-19 is no good\\\",\\n  \\\"Phrase2\\\": \\\"COVID-18 is no good\\\",\\n  \\\"Phrase3\\\": \\\"COVID-17 is no good\\\"\\n}, \\\"COVID-19\\\")\\n\\n➞ [\\\"Phrase1 = COVID-19\\\", \\\"Phrase2 = None\\\", \\\"Phrase3 = None\\\"]\\n```\\n\\n```\\nfind_pattern({\\n  \\\"Phrase1\\\": \\\"Edabit is great\\\",\\n  \\\"Phrase2\\\": \\\"Edabit is very great\\\",\\n  \\\"Phrase3\\\": \\\"Edabit is really great\\\"\\n}, \\\"really\\\")\\n\\n➞ [\\\"Phrase1 = None\\\", \\\"Phrase2 = None\\\", \\\"Phrase3 = really\\\"]\\n```\\n\\n### Notes\\nIf you are stuck, check the **Resources**.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(find_pattern({\\n        \\\"Phrase1\\\": 'Made in China',\\n        \\\"Phrase2\\\": 'Made in Brazil',\\n        \\\"Phrase3\\\": 'Made in America',\\n        \\\"Phrase4\\\": 'Made in Colombia',\\n\\n    }, 'Jhonson'), ['Phrase1 = None', 'Phrase2 = None', 'Phrase3 = None', 'Phrase4 = None'])\\n\\t\\nTest.assert_equals(find_pattern({\\n        \\\"Phrase1\\\": 'Edabit is great',\\n        \\\"Phrase2\\\": 'Edabit is very great',\\n        \\\"Phrase3\\\": 'Edabit is really great',\\n    }, 'really'), ['Phrase1 = None', 'Phrase2 = None', 'Phrase3 = really'])\\n\\t\\nTest.assert_equals(find_pattern({\\n        \\\"Phrase1\\\": 'COVID-19 is no good',\\n        \\\"Phrase2\\\": 'COVID-18 is no good',\\n        \\\"Phrase3\\\": 'COVID-17 is no good',\\n    }, 'COVID-19'), ['Phrase1 = COVID-19', 'Phrase2 = None', 'Phrase3 = None'])\\n\\nTest.assert_equals(find_pattern({\\n        \\\"Phrase1\\\": 'Made12 in China',\\n        \\\"Phrase2\\\": 'Made in Brazil',\\n        \\\"Phrase3\\\": '32Made in America',\\n        \\\"Phrase4\\\": 'Made in Colombia',\\n\\n    }, 'Made'), ['Phrase1 = Made', 'Phrase2 = Made', 'Phrase3 = Made', 'Phrase4 = Made'])\",\"language\":\"python3\",\"quality\":0,\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,5,5,3,2,1,1,1,2,4,3,3,4,3,2,1,3,3,3,2,0,1,2,0,2,4,4,3,3,2,1,4,0,3,3,2,0,3,3,1,3,1,4,2,4,3,4,2,2,4,3,4,2,3,2],\"quality\":[],\"rators\":[\"iS5BrkGLzJyPK7nKt\",\"8PwfYqoDQFThzNtvf\",\"mDWNyaaQ9hvPCRzSd\",\"Wpn95NqWxncQrwNgz\",\"8sNv5PTHa7XQ8bNqR\",\"NKtuwor2KZsktWuia\",\"8JyqsSbN2FJXPr3cw\",\"p8qqFdJ3FSk5x9z3G\",\"iojEnnY9FsMfYzp6f\",\"J3upzLHuEwXH7Z2hx\",\"gJYuGdkXEWWmGRLzu\",\"QRv96jmNaYsWkxQEG\",\"s5M5RvgqR9BhB9JoC\",\"gb9rvGus2Jv7bjZSs\",\"yjtdwc2AC4jA2RWtn\",\"AasGs8AeX9Lcb9xJn\",\"tAF9Gf6PiGogbZuWs\",\"2PufnQcsHsfymufX3\",\"cRh8dzYL95tBvNZ34\",\"HqmxnQJM66Y57twhn\",\"fznzd3qnvtbFkkizz\",\"oBcs8GLX2ZFLXQy8y\",\"T6iBEE2jp7f7iEF2P\",\"H9KZi2cjt4FwH7qog\",\"nkL2knkcNaiHCerW2\",\"AQSqD9oNv2uPfxZCR\",\"Yp7uvStL97cC9fKkY\",\"NfMJuiBk6FN5Jc6ow\",\"P7NmFbCJ5offXMRvB\",\"eHcgvkTGsH7ZziqBo\",\"LQxof8pGabGuWP7Gn\",\"yTtSCvGPyYna6JuRC\",\"dSd7wHgXGQeG5BQ2P\",\"DPi9QGLctq2y76KuE\",\"7vyub5zTHNfMfQWoW\",\"x9F5WvWftdnhG7DqT\",\"K42ijC8Jy8GHBnobP\",\"HyvYR5xLA4i88WrF2\",\"5bz9yvmmdB5ddbS5r\",\"JKb5rhL6DKcCAypF9\",\"gdndm3hHunARcYWow\",\"wsHywJzkw5fnxhsPR\",\"5iWTiispXnGRokgJr\",\"iC3KzMHEFWKi2G54H\",\"GMCMXNYipwEXvryDW\",\"jWbd7SYDzLPjc9EDh\",\"fbr22rabEJMfBp7vD\",\"GTKsdeEihE636Le9i\",\"aFYzioHvZPvPaunsg\",\"5QN8R22z43SrwoHDz\",\"buX4mCQhtXCfBjeno\",\"aEm3Wvj2rFYRL8Lrb\",\"iqmPb9JuJDgTFeR8Q\",\"PxjZL5AA8R5Dfg8v3\"],\"total\":60},\"flags\":0},\"summary\":\"Given a dictionary containing up to six phrases, return a list containing the matching phrases according to the given string (p).\\nIgnore any digit that is placed after or before the given string.\\nWhether the first letter is capitalized or not, if all letters of the word match the given string (p), it is valid.\\nIf it does not match the given string (p) then Non\",\"tags\":[\"arrays\",\"formatting\",\"objects\",\"scope\"],\"timestamp\":{\"$date\":1615754595308},\"title\":\"Find the Pattern\",\"family\":[{\"_id\":\"6FGu55pesinTfcD23\",\"language\":\"python3\"}]}}"]