a["{\"msg\":\"result\",\"id\":\"1013\",\"result\":{\"_id\":\"kAQT4vMX2iEAcs8uJ\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def longest_7segment_word(lst):\\n\\t\",\"difficulty\":1.5172413793103448,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"rd3JijGmFTgtktSFm\",\"instructions\":\"Given a *list of words*, return the **longest word** which can fit on a *7 segment display*.\\n\\n![Image of a 7 segment display](https://edabit-challenges.s3.amazonaws.com/clock_xkmdxe.jpeg)\\n\\n- Letters which do not fit on a *7 segment display* are **k**, **m**, **v**, **w** and **x**.\\n- Therefore, do not count words which include these letters.\\n\\n### Examples\\n```\\nlongest_7segment_word([\\\"knighthood\\\", \\\"parental\\\", \\\"fridge\\\", \\\"clingfilm\\\"]) ➞ \\\"parental\\\"\\n\\nlongest_7segment_word([\\\"coding\\\", \\\"crackers\\\", \\\"edabit\\\", \\\"celebration\\\"]) ➞ \\\"celebration\\\"\\n\\nlongest_7segment_word([\\\"velocity\\\", \\\"mackerel\\\", \\\"woven\\\", \\\"kingsmen\\\"]) ➞ \\\"\\\"\\n```\\n\\n### Notes\\n- All words will be given in lowercase.\\n- Return an *empty string* if no words are eligible (see example #3).\\n- If multiple valid words have the same length, return the **first word that appears**.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(longest_7segment_word([\\\"knighthood\\\", \\\"parental\\\", \\\"fridge\\\", \\\"clingfilm\\\"]), \\\"parental\\\")\\nTest.assert_equals(longest_7segment_word([\\\"coding\\\", \\\"crackers\\\", \\\"edabit\\\", \\\"celebration\\\"]), \\\"celebration\\\")\\nTest.assert_equals(longest_7segment_word([\\\"velocity\\\", \\\"mackerel\\\", \\\"woven\\\", \\\"kingsmen\\\"]), \\\"\\\")\\nTest.assert_equals(longest_7segment_word([\\\"embarrassment\\\", \\\"perceive\\\", \\\"front\\\"]), \\\"front\\\")\\nTest.assert_equals(longest_7segment_word([\\\"truck\\\", \\\"accessible\\\", \\\"undermine\\\", \\\"unique\\\", \\\"tear\\\", \\\"cat\\\", \\\"avenue\\\", \\\"labour\\\", \\\"goat\\\", \\\"dance\\\", \\\"rise\\\", \\\"scale\\\"]), \\\"accessible\\\")\\nTest.assert_equals(longest_7segment_word([\\\"act\\\", \\\"adjust\\\", \\\"proud\\\", \\\"battery\\\", \\\"tear\\\", \\\"beautiful\\\", \\\"avenue\\\", \\\"thoughtful\\\", \\\"victory\\\", \\\"mobile\\\", \\\"straight\\\"]), \\\"thoughtful\\\")\\nTest.assert_equals(longest_7segment_word([\\\"fair\\\", \\\"tear\\\", \\\"truck\\\"]), \\\"fair\\\")\\nTest.assert_equals(longest_7segment_word([\\\"scale\\\", \\\"pass\\\", \\\"act\\\", \\\"sector\\\", \\\"vain\\\", \\\"scale\\\"]), \\\"sector\\\")\\nTest.assert_equals(longest_7segment_word([\\\"vegetarian\\\", \\\"unique\\\", \\\"sensitivity\\\", \\\"goat\\\", \\\"nature\\\", \\\"attract\\\", \\\"suntan\\\", \\\"mobile\\\", \\\"pillow\\\", \\\"economist\\\", \\\"arrest\\\", \\\"galaxy\\\", \\\"proud\\\", \\\"proud\\\"]), \\\"attract\\\")\\nTest.assert_equals(longest_7segment_word([\\\"vat\\\", \\\"suntan\\\", \\\"murder\\\", \\\"dance\\\", \\\"course\\\", \\\"institution\\\"]), \\\"institution\\\")\\nTest.assert_equals(longest_7segment_word([\\\"adjust\\\", \\\"garlic\\\", \\\"preoccupation\\\", \\\"nature\\\", \\\"garlic\\\", \\\"undermine\\\", \\\"pavement\\\", \\\"payment\\\", \\\"fair\\\", \\\"twin\\\", \\\"expertise\\\", \\\"pillow\\\", \\\"dance\\\", \\\"economist\\\", \\\"establish\\\", \\\"nervous\\\", \\\"sector\\\"]), \\\"preoccupation\\\")\\nTest.assert_equals(longest_7segment_word([\\\"embarrassment\\\", \\\"bell\\\", \\\"obese\\\", \\\"width\\\", \\\"singer\\\", \\\"strikebreaker\\\", \\\"width\\\", \\\"preoccupation\\\", \\\"nervous\\\"]), \\\"preoccupation\\\")\\nTest.assert_equals(longest_7segment_word([\\\"winner\\\", \\\"twin\\\", \\\"establish\\\"]), \\\"establish\\\")\\nTest.assert_equals(longest_7segment_word([\\\"fair\\\", \\\"institution\\\", \\\"vegetarian\\\", \\\"electron\\\", \\\"suntan\\\", \\\"settle\\\", \\\"royalty\\\", \\\"bracket\\\", \\\"conductor\\\", \\\"blade\\\", \\\"camp\\\", \\\"potential\\\", \\\"human body\\\"]), \\\"institution\\\")\\nTest.assert_equals(longest_7segment_word([\\\"width\\\", \\\"straight\\\", \\\"sign\\\", \\\"inspire\\\", \\\"lay\\\", \\\"pavement\\\", \\\"settle\\\", \\\"undermine\\\", \\\"cat\\\", \\\"labour\\\", \\\"adjust\\\", \\\"admire\\\", \\\"scramble\\\", \\\"pavement\\\", \\\"limited\\\", \\\"payment\\\", \\\"withdrawal\\\", \\\"full\\\", \\\"brave\\\"]), \\\"straight\\\")\\nTest.assert_equals(longest_7segment_word([\\\"limited\\\", \\\"arrest\\\", \\\"harm\\\", \\\"tear\\\", \\\"vain\\\", \\\"bracket\\\", \\\"settle\\\", \\\"settle\\\", \\\"spine\\\", \\\"mobile\\\", \\\"potential\\\", \\\"cat\\\", \\\"winner\\\", \\\"tear\\\"]), \\\"potential\\\")\\nTest.assert_equals(longest_7segment_word([\\\"front\\\", \\\"economist\\\", \\\"sector\\\", \\\"camp\\\"]), \\\"sector\\\")\\nTest.assert_equals(longest_7segment_word([\\\"murder\\\", \\\"vain\\\", \\\"fair\\\", \\\"sign\\\", \\\"establish\\\", \\\"flow\\\", \\\"bell\\\", \\\"truck\\\", \\\"winner\\\", \\\"tear\\\", \\\"avenue\\\", \\\"move\\\", \\\"pillow\\\", \\\"murder\\\", \\\"gesture\\\", \\\"garlic\\\", \\\"unique\\\", \\\"brave\\\", \\\"pass\\\", \\\"avenue\\\"]), \\\"establish\\\")\\nTest.assert_equals(longest_7segment_word([\\\"full\\\", \\\"suntan\\\", \\\"strikebreaker\\\", \\\"front\\\", \\\"truck\\\", \\\"vegetarian\\\", \\\"maze\\\", \\\"shine\\\", \\\"potential\\\", \\\"conductor\\\", \\\"width\\\", \\\"economist\\\", \\\"lounge\\\", \\\"pound\\\", \\\"camp\\\", \\\"sensitivity\\\"]), \\\"potential\\\")\\nTest.assert_equals(longest_7segment_word([\\\"party\\\", \\\"width\\\", \\\"sector\\\", \\\"withdrawal\\\", \\\"limited\\\", \\\"victory\\\", \\\"presidency\\\", \\\"pillow\\\", \\\"beautiful\\\", \\\"shine\\\"]), \\\"presidency\\\")\\nTest.assert_equals(longest_7segment_word([\\\"front\\\", \\\"mirror\\\", \\\"shine\\\", \\\"spine\\\", \\\"lay\\\", \\\"obese\\\", \\\"shine\\\", \\\"singer\\\", \\\"straight\\\", \\\"establish\\\", \\\"embarrassment\\\", \\\"admire\\\", \\\"vain\\\", \\\"presidency\\\", \\\"winner\\\", \\\"dance\\\", \\\"inject\\\", \\\"proud\\\", \\\"establish\\\"]), \\\"presidency\\\")\\nTest.assert_equals(longest_7segment_word([\\\"pound\\\", \\\"scramble\\\", \\\"labour\\\", \\\"vegetarian\\\", \\\"obese\\\", \\\"delicate\\\", \\\"dictionary\\\", \\\"act\\\", \\\"nature\\\", \\\"shine\\\"]), \\\"dictionary\\\")\\nTest.assert_equals(longest_7segment_word([\\\"goat\\\", \\\"institution\\\", \\\"move\\\", \\\"twin\\\", \\\"lay\\\", \\\"embarrassment\\\", \\\"labour\\\"]), \\\"institution\\\")\\nTest.assert_equals(longest_7segment_word([\\\"victory\\\", \\\"embarrassment\\\", \\\"truck\\\", \\\"presidency\\\", \\\"maze\\\", \\\"truck\\\"]), \\\"presidency\\\")\\nTest.assert_equals(longest_7segment_word([\\\"accessible\\\", \\\"embarrassment\\\", \\\"embarrassment\\\", \\\"extort\\\", \\\"width\\\", \\\"garlic\\\"]), \\\"accessible\\\")\\nTest.assert_equals(longest_7segment_word([\\\"shine\\\", \\\"admire\\\"]), \\\"shine\\\")\\nTest.assert_equals(longest_7segment_word([\\\"sector\\\", \\\"conductor\\\", \\\"arrest\\\", \\\"inspire\\\", \\\"harm\\\", \\\"grain\\\", \\\"tear\\\", \\\"vat\\\", \\\"shine\\\", \\\"course\\\", \\\"admire\\\", \\\"shine\\\", \\\"attract\\\", \\\"victory\\\"]), \\\"conductor\\\")\\nTest.assert_equals(longest_7segment_word([\\\"rise\\\", \\\"dance\\\", \\\"dance\\\", \\\"undermine\\\", \\\"vain\\\", \\\"blade\\\", \\\"pillow\\\", \\\"economist\\\", \\\"freight\\\", \\\"goat\\\", \\\"pavement\\\"]), \\\"freight\\\")\\nTest.assert_equals(longest_7segment_word([\\\"institution\\\", \\\"pillow\\\", \\\"straight\\\", \\\"suntan\\\", \\\"presidency\\\", \\\"exception\\\", \\\"expertise\\\", \\\"sensitivity\\\"]), \\\"institution\\\")\\nTest.assert_equals(longest_7segment_word([\\\"grain\\\", \\\"fair\\\", \\\"settle\\\", \\\"thoughtful\\\", \\\"vain\\\", \\\"admire\\\", \\\"sign\\\"]), \\\"thoughtful\\\")\\nTest.assert_equals(longest_7segment_word([\\\"presidency\\\", \\\"bracket\\\", \\\"flavor\\\", \\\"payment\\\", \\\"nervous\\\", \\\"extort\\\", \\\"sector\\\", \\\"garlic\\\", \\\"limited\\\"]), \\\"presidency\\\")\\nTest.assert_equals(longest_7segment_word([\\\"twin\\\", \\\"pillow\\\", \\\"blade\\\", \\\"mobile\\\", \\\"royalty\\\", \\\"undermine\\\", \\\"lay\\\", \\\"front\\\", \\\"fair\\\", \\\"flow\\\", \\\"party\\\", \\\"withdrawal\\\", \\\"sign\\\", \\\"scramble\\\", \\\"accessible\\\", \\\"vain\\\"]), \\\"accessible\\\")\\nTest.assert_equals(longest_7segment_word([\\\"labour\\\", \\\"pass\\\", \\\"camp\\\", \\\"vegetarian\\\", \\\"freight\\\", \\\"victory\\\", \\\"avenue\\\", \\\"flow\\\", \\\"garlic\\\", \\\"gesture\\\", \\\"nervous\\\", \\\"vat\\\", \\\"preoccupation\\\", \\\"maze\\\", \\\"arrest\\\", \\\"camp\\\", \\\"dictionary\\\", \\\"inspire\\\"]), \\\"preoccupation\\\")\\nTest.assert_equals(longest_7segment_word([\\\"vegetarian\\\", \\\"expertise\\\", \\\"straight\\\", \\\"harm\\\", \\\"course\\\", \\\"network\\\", \\\"preoccupation\\\", \\\"cat\\\", \\\"extort\\\", \\\"full\\\", \\\"limited\\\", \\\"flex\\\", \\\"unique\\\", \\\"singer\\\", \\\"avenue\\\", \\\"establish\\\", \\\"bracket\\\", \\\"mobile\\\"]), \\\"preoccupation\\\")\\nTest.assert_equals(longest_7segment_word([\\\"admire\\\", \\\"scale\\\", \\\"goat\\\", \\\"vat\\\", \\\"rise\\\", \\\"attract\\\", \\\"vegetarian\\\", \\\"economist\\\", \\\"admire\\\", \\\"act\\\", \\\"flavor\\\", \\\"flow\\\", \\\"preoccupation\\\"]), \\\"preoccupation\\\")\\nTest.assert_equals(longest_7segment_word([\\\"shine\\\", \\\"scale\\\", \\\"freight\\\", \\\"extort\\\", \\\"withdrawal\\\", \\\"suntan\\\", \\\"grain\\\", \\\"preoccupation\\\", \\\"arrest\\\", \\\"habit\\\", \\\"party\\\", \\\"habit\\\", \\\"sign\\\", \\\"electron\\\", \\\"harm\\\", \\\"grain\\\", \\\"rise\\\", \\\"gesture\\\", \\\"chimney\\\"]), \\\"preoccupation\\\")\\nTest.assert_equals(longest_7segment_word([\\\"beautiful\\\", \\\"victory\\\", \\\"electron\\\", \\\"goat\\\", \\\"proud\\\", \\\"preoccupation\\\", \\\"nature\\\", \\\"network\\\", \\\"proud\\\", \\\"full\\\", \\\"sensitivity\\\", \\\"royalty\\\", \\\"dance\\\", \\\"scramble\\\"]), \\\"preoccupation\\\")\\nTest.assert_equals(longest_7segment_word([\\\"vain\\\", \\\"nature\\\", \\\"garlic\\\", \\\"garlic\\\", \\\"inspire\\\", \\\"thoughtful\\\", \\\"winner\\\", \\\"blade\\\", \\\"pillow\\\", \\\"fair\\\", \\\"goat\\\", \\\"bell\\\", \\\"lounge\\\", \\\"fair\\\"]), \\\"thoughtful\\\")\\nTest.assert_equals(longest_7segment_word([\\\"expertise\\\", \\\"payment\\\", \\\"exception\\\", \\\"attract\\\", \\\"habit\\\", \\\"institution\\\", \\\"embarrassment\\\", \\\"pavement\\\", \\\"accessible\\\", \\\"accessible\\\", \\\"bell\\\", \\\"perceive\\\", \\\"scale\\\"]), \\\"institution\\\")\\nTest.assert_equals(longest_7segment_word([\\\"spine\\\", \\\"presidency\\\", \\\"scale\\\", \\\"goat\\\", \\\"beautiful\\\", \\\"harm\\\", \\\"flavor\\\", \\\"proud\\\", \\\"limited\\\", \\\"battery\\\", \\\"unique\\\", \\\"scramble\\\", \\\"pound\\\", \\\"nature\\\", \\\"flavor\\\", \\\"avenue\\\", \\\"pound\\\"]), \\\"presidency\\\")\\nTest.assert_equals(longest_7segment_word([\\\"institution\\\", \\\"sign\\\", \\\"pass\\\", \\\"cat\\\", \\\"cook\\\", \\\"nervous\\\", \\\"habit\\\", \\\"accessible\\\", \\\"nervous\\\", \\\"lounge\\\", \\\"unique\\\", \\\"undermine\\\", \\\"royalty\\\", \\\"chimney\\\", \\\"obese\\\", \\\"bracket\\\", \\\"habit\\\", \\\"potential\\\", \\\"sector\\\"]), \\\"institution\\\")\\nTest.assert_equals(longest_7segment_word([\\\"galaxy\\\", \\\"presidency\\\", \\\"camp\\\", \\\"pillow\\\", \\\"labour\\\", \\\"pass\\\", \\\"pillow\\\", \\\"suntan\\\", \\\"payment\\\", \\\"economist\\\", \\\"unique\\\"]), \\\"presidency\\\")\\nTest.assert_equals(longest_7segment_word([\\\"maze\\\", \\\"human body\\\", \\\"move\\\", \\\"perceive\\\", \\\"maze\\\", \\\"scramble\\\", \\\"flavor\\\", \\\"delicate\\\", \\\"accessible\\\"]), \\\"accessible\\\")\\nTest.assert_equals(longest_7segment_word([\\\"freight\\\", \\\"limited\\\", \\\"straight\\\", \\\"settle\\\", \\\"obese\\\", \\\"shy\\\", \\\"establish\\\", \\\"galaxy\\\", \\\"avenue\\\", \\\"victory\\\", \\\"proud\\\", \\\"dictionary\\\", \\\"conductor\\\", \\\"spine\\\", \\\"pillow\\\", \\\"economist\\\", \\\"habit\\\", \\\"royalty\\\", \\\"strikebreaker\\\", \\\"winner\\\"]), \\\"dictionary\\\")\\nTest.assert_equals(longest_7segment_word([\\\"vegetarian\\\", \\\"labour\\\", \\\"course\\\", \\\"grain\\\", \\\"freight\\\", \\\"pavement\\\", \\\"nervous\\\", \\\"unique\\\", \\\"mirror\\\", \\\"galaxy\\\", \\\"beautiful\\\", \\\"winner\\\", \\\"winner\\\", \\\"cat\\\", \\\"pillow\\\", \\\"spine\\\", \\\"course\\\", \\\"murder\\\", \\\"pavement\\\", \\\"withdrawal\\\"]), \\\"beautiful\\\")\\nTest.assert_equals(longest_7segment_word([\\\"vat\\\", \\\"mirror\\\", \\\"winner\\\", \\\"human body\\\", \\\"potential\\\", \\\"front\\\"]), \\\"potential\\\")\\nTest.assert_equals(longest_7segment_word([\\\"blade\\\", \\\"victory\\\", \\\"thoughtful\\\", \\\"undermine\\\", \\\"royalty\\\", \\\"nature\\\", \\\"pillow\\\"]), \\\"thoughtful\\\")\\nTest.assert_equals(longest_7segment_word([\\\"electron\\\", \\\"act\\\", \\\"blade\\\", \\\"bell\\\", \\\"straight\\\", \\\"extort\\\", \\\"battery\\\", \\\"maze\\\", \\\"galaxy\\\", \\\"act\\\", \\\"embarrassment\\\"]), \\\"electron\\\")\\nTest.assert_equals(longest_7segment_word([\\\"network\\\", \\\"potential\\\", \\\"maze\\\", \\\"move\\\", \\\"chimney\\\", \\\"straight\\\", \\\"party\\\", \\\"thoughtful\\\", \\\"freight\\\", \\\"obese\\\", \\\"dance\\\", \\\"inspire\\\", \\\"proud\\\", \\\"harm\\\", \\\"human body\\\", \\\"strikebreaker\\\"]), \\\"thoughtful\\\")\\nTest.assert_equals(longest_7segment_word([\\\"course\\\", \\\"galaxy\\\", \\\"garlic\\\", \\\"pillow\\\", \\\"camp\\\", \\\"brave\\\", \\\"extort\\\", \\\"conductor\\\", \\\"mirror\\\", \\\"full\\\", \\\"goat\\\", \\\"twin\\\", \\\"cat\\\"]), \\\"conductor\\\")\\nTest.assert_equals(longest_7segment_word([\\\"inject\\\", \\\"sensitivity\\\", \\\"party\\\", \\\"withdrawal\\\", \\\"establish\\\", \\\"potential\\\", \\\"rise\\\", \\\"presidency\\\", \\\"galaxy\\\", \\\"tear\\\", \\\"party\\\", \\\"vegetarian\\\", \\\"economist\\\", \\\"cat\\\", \\\"maze\\\", \\\"truck\\\", \\\"lounge\\\", \\\"conductor\\\"]), \\\"presidency\\\")\\nTest.assert_equals(longest_7segment_word([\\\"spine\\\", \\\"sign\\\", \\\"vegetarian\\\", \\\"victory\\\", \\\"inject\\\", \\\"flex\\\", \\\"embarrassment\\\", \\\"accessible\\\", \\\"battery\\\", \\\"network\\\", \\\"avenue\\\", \\\"singer\\\", \\\"lay\\\", \\\"move\\\"]), \\\"accessible\\\")\\nTest.assert_equals(longest_7segment_word([\\\"extort\\\", \\\"galaxy\\\", \\\"garlic\\\", \\\"winner\\\"]), \\\"garlic\\\")\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[1,1,1,1,1,1,3,2,1,2,0,2,2,2,2,2,1,2,2,2,2,2,1,2,2,2,2,2,0,2,1,1,0,2,2,2,2,1,2,1,2,0,1,2,1,0,3,2,2,3,1,2,0,2,2,2,1,2,2,3,2,2,2,2,1,2,2,1,0,2,2,1,2,2,2,1,2,2,0,2,1,2,0,1,1,0,2,0,1,1,1,2,2,2,2,2,0,1,2,2,2,0,2,1,1,2,2,1,2,2,2,2,2,1,1,1],\"rators\":[\"PXAcsKkssS2yLyDv2\",\"C4QntmkYtB89GNtpd\",\"23oi2a3vQwhtLEbSj\",\"s5M5RvgqR9BhB9JoC\",\"gb9rvGus2Jv7bjZSs\",\"Z85ajWfZ4jDPkbvR4\",\"g2eJRHbFyurijnyEn\",\"AasGs8AeX9Lcb9xJn\",\"LQxof8pGabGuWP7Gn\",\"u5u2YpHXiNgzDNJdX\",\"2fxapKr8XGdNeaKi2\",\"4CFzv558qbGcpQwc4\",\"X29Ekg7HjqHAYgCSM\",\"tAF9Gf6PiGogbZuWs\",\"yabtHTtycsWhcGBfD\",\"Ycj4iTJGFyvC4bXek\",\"myXAR5qDJsBaPnff2\",\"yZvzB3qFb8pkHy4dg\",\"Yp7uvStL97cC9fKkY\",\"qrZB59AcTKF4SkrKr\",\"N2wnZXkhDH86mgjQ8\",\"8JyqsSbN2FJXPr3cw\",\"jeuoearPPTcGPgXhf\",\"cR3ibTMxLyEdDFCHY\",\"9Ly8afdtofp8DXzrt\",\"mxX4rH5ELYkdZ2Mbw\",\"aRqQ42J5zqCmBNd8w\",\"dHZqT6h4JMwk5fPC8\",\"sz8ufn9i8zeiGWpAy\",\"hnyhBFWwNCz9mDfSi\",\"jNvegJWCk5HCtEMbK\",\"8PwfYqoDQFThzNtvf\",\"ZNnsMeNkdDhHjSrZb\",\"Nua6T3dBurBy3Qfg9\",\"aEm3Wvj2rFYRL8Lrb\",\"gJYuGdkXEWWmGRLzu\",\"2QGRoQn2dRq3scu7k\",\"kYWb8BwpKwunQkxeX\",\"k2RxDbsaJCdDju6oB\",\"HF28xZKSLM9wEuqNg\",\"M8dQuMrEpP8Hc3tHN\",\"8LfTheFzvicameoz9\",\"DEDniTrstQYGounXT\",\"C9LKGu2g5hSijvDzA\",\"9pzFiFK3ANLjQfnr2\",\"nfXGHENb5md7m355s\",\"FzxTj4GuujhwpZM7y\",\"ahk2qiXKJA753wAJk\",\"a777e8chPvJkY3tKa\",\"H9KZi2cjt4FwH7qog\",\"qZQxPQ2kaNKAMesHT\",\"yr822PZmmiDDenxpB\",\"XrqNzJ2FRG8HnGiR6\",\"9CoqdidjM9KbeKnHY\",\"MKT7khMBGXzA22ykf\",\"ikkjHDqBHu6fT3vGL\",\"n2BRY9X8899dcG8Bw\",\"H4abACFDH5t8CnnyH\",\"NG8PWBSjsM8mMhQEq\",\"syRNbbPdLCGXbH2Gy\",\"iojEnnY9FsMfYzp6f\",\"Pe8vWpDHRuH9nSGKW\",\"yjtdwc2AC4jA2RWtn\",\"HqmxnQJM66Y57twhn\",\"ihWWwoyPrvHSZeQy3\",\"YcCLwitFMAEJSnxAW\",\"i5iePG5GqhJJ8HEoB\",\"oBcs8GLX2ZFLXQy8y\",\"b5oEvBqHWLRnJgp22\",\"mG8HqKiAQFTdRZthG\",\"tpxMgkGSHwBjS95Ta\",\"qD2LrwaDrSdiybLKY\",\"YC3AHiBA55ZhLt57q\",\"FEYpu9RWysAgW3XnP\",\"KLmLKaJPfsYxp42p2\",\"DPi9QGLctq2y76KuE\",\"QRv96jmNaYsWkxQEG\",\"J3upzLHuEwXH7Z2hx\",\"dYPkStFnLvAMsHSzZ\",\"cAP3n5NY64uoMwzRR\",\"5XiuAqicKD4hBdu63\",\"spqXrjG3ZFa2j5uTR\",\"KJCDwGkoXh8qtbbKr\",\"RGMbFMZXJr7DhcAJy\",\"JS3hNM3XXkxPdg3yk\",\"zd9FLSzsGz3evKafy\",\"rfyEkETeoS96QNH4e\",\"dBzwBtRjZqB98DJeB\",\"6JMWyFfGM8R4kG8sw\",\"d8qtzoLB264iP8tdY\",\"5HCu9Ydd86QgHDRNP\",\"Jqk2uJZZxEv5wZFze\",\"J5T8gZqiZXFuFDTQ7\",\"iS5BrkGLzJyPK7nKt\",\"wRttWTM59y8m5mx7x\",\"HuNF3xTBzmatyGSTm\",\"5S9nX4rKsnCcnv4Cz\",\"eYfPWvZwnJQkHbSTK\",\"GGdmhAvxXhqhhibJN\",\"Ds7L5bksw2QRHjrKL\",\"srJ34BaybkQh3qRkM\",\"sbJcFfQjQ59Wfg4Cd\",\"buX4mCQhtXCfBjeno\",\"qAby4AWXmTNeusvg3\",\"eMuCpJ2spXWkJjWNz\",\"o4ixjQGSaYqA2JoM4\",\"3cF6NXq3ZEwdkgSjb\",\"T6iBEE2jp7f7iEF2P\",\"CHvzhtXnv8HTbPQ56\",\"66a9xX73nmTEuKs9k\",\"PC3pLs36zNzpRDSuE\",\"m7kMANAKbQxHfueLC\",\"BMpqfFuWqs93qAK8u\",\"foytX6kH9wiSYqLtT\",\"8BFSTCnoe2QggN64c\",\"ey3CASd6Je5LEJzfB\",\"tyoqMokBCPmDSkoLz\",\"yod5YhKtPqw2GfG9B\",\"AJexRBN9cYQmqvYu6\",\"qaR8DnWrTk8Mus5Q2\",\"BrTDhPJcACL2bsrpJ\",\"jCjCvyhqhpebkJn34\",\"rrSC943cCKNG48sH4\",\"XD5nmvKQchKezPXhy\",\"AFfw7cGg83uYk2Miy\",\"2u9wghjCydey6aWys\",\"PH32cNxBjrK4a28sn\",\"2PufnQcsHsfymufX3\",\"9gJsF5apWJGWZJprn\",\"GM4Z2owkjxGkNJSnh\",\"4TmgHkn5vqyHK3sYC\",\"4Lwjr34ypKNQNQCar\",\"dzS6WBTMHyFEag6Fp\",\"d9LBRxvADNBB5QJMB\",\"pduNK68oazqQTtbLp\",\"yAouD3PxzED8a4gap\",\"wjc4iejpErBhxWwHo\",\"RoGGD5cpHb4ftdLDv\",\"5QN8R22z43SrwoHDz\",\"Wi4H6ayKsNDWWQCG5\",\"mw9464S5dnenqzvpm\"],\"total\":152,\"quality\":[5,5,5,5,5,5,5,5,5,5,2,5,5,5,4,5,5,5,5,5,5,5,5,4,5,5,5,4,5,5]},\"flags\":0},\"summary\":\"Given a list of words, return the longest word which can fit on a 7 segment display.\\n\\nImage of a 7 segment display\\n\\nLetters which do not fit on a 7 segment display are k, m, v, w and x.\\nTherefore, do not count words which include these letters.\\n\\nExamples\\nlongest7segmentword([\\\"knighthood\\\", \\\"parental\\\", \\\"fridge\\\", \\\"clingfilm\\\"]) ➞ \\\"parental\\\"\\n\\nlongest7segmentword([\\\"\",\"tags\":[\"arrays\",\"loops\",\"strings\"],\"timestamp\":{\"$date\":1582125731043},\"title\":\"Longest Word in a 7 Segment Display\",\"quality\":4.8,\"family\":[{\"_id\":\"JGycbtPjyG2Kf46F5\",\"language\":\"cpp\"},{\"_id\":\"zLSsBEKyu2HLTZYd8\",\"language\":\"javascript\"},{\"_id\":\"CDktdXXtmEwMuDdku\",\"language\":\"php\"},{\"_id\":\"kAQT4vMX2iEAcs8uJ\",\"language\":\"python3\"},{\"_id\":\"qCuPki2DzKED63ifM\",\"language\":\"ruby\"}]}}"]