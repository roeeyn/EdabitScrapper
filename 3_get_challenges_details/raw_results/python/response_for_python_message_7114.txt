a["{\"msg\":\"result\",\"id\":\"2263\",\"result\":{\"_id\":\"E8c4ZMwme85YX3wM7\",\"author\":\"javierdariomartin\",\"authorId\":\"6428wKHtwKkFdvBs5\",\"code\":\"def recaman(n):\\n\\t\",\"difficulty\":3.5384615384615383,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"wYnoALd7ZsHak9daJ\",\"instructions\":\"Starting from zero, the n'th term **a(n)** is the previous term minus `n` (i.e. a(n) = a(n-1) - n) but only if this is both positive and has not been previousely generated. If the conditions don't hold then **a(n) = a(n-1) + n**.\\n\\nCreate a function that takes a number `n` as an argument and returns a list with the first `n` numbers in the Recaman's Sequence, as well as a list with the duplicate numbers in such list. The list of duplicates must contain the duplicate numbers ordered by their appearance order in the Recaman's Sequence.\\n\\n## Examples\\n```\\nrecaman(20) ➞ \\\"---> Recaman's sequence: [0, 1, 3, 6, 2, 7, 13, 20, 12, 21, 11, 22, 10, 23, 9, 24, 8, 25, 43, 62]\\n---> Duplicates for n = 20: []\\\"\\n\\nrecaman(100) ➞ \\\"---> Recaman's sequence: [0, 1, 3, 6, 2, 7, 13, 20, 12, 21, 11, 22, 10, 23, 9, 24, 8, 25, 43, 62, 42, 63, 41, 18, 42, 17, 43, 16, 44, 15, 45, 14, 46, 79, 113, 78, 114, 77, 39, 78, 38, 79, 37, 80, 36, 81, 35, 82, 34, 83, 33, 84, 32, 85, 31, 86, 30, 87, 29, 88, 28, 89, 27, 90, 26, 91, 157, 224, 156, 225, 155, 226, 154, 227, 153, 228, 152, 75, 153, 74, 154, 73, 155, 72, 156, 71, 157, 70, 158, 69, 159, 68, 160, 67, 161, 66, 162, 65, 163, 64]\\n---> Duplicates for n = 100: [42, 43, 78, 79, 153, 154, 155, 156, 157]\\\"\\n```\\n\\n### Notes\\nN/A\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(recaman(0), \\\"---> Recaman's sequence: \\\" + str([]) + \\\"\\\\n\\\" + \\\"---> Duplicates for n = \\\" + str(0) + \\\": \\\" + str([]))\\nTest.assert_equals(recaman(1), \\\"---> Recaman's sequence: \\\" + str([0]) + \\\"\\\\n\\\" + \\\"---> Duplicates for n = \\\" + str(1) + \\\": \\\" + str([]))\\nTest.assert_equals(recaman(20), \\\"---> Recaman's sequence: \\\" + str([0, 1, 3, 6, 2, 7, 13, 20, 12, 21, 11, 22, 10, 23, 9, 24, 8, 25, 43, 62]) + \\\"\\\\n\\\" + \\\"---> Duplicates for n = \\\" + str(20) + \\\": \\\" + str([]))\\nTest.assert_equals(recaman(100), \\\"---> Recaman's sequence: \\\" + str([0, 1, 3, 6, 2, 7, 13, 20, 12, 21, 11, 22, 10, 23, 9, 24, 8, 25, 43, 62, 42, 63, 41, 18, 42, 17, 43, 16, 44, 15, 45, 14, 46, 79, 113, 78, 114, 77, 39, 78, 38, 79, 37, 80, 36, 81, 35, 82, 34, 83, 33, 84, 32, 85, 31, 86, 30, 87, 29, 88, 28, 89, 27, 90, 26, 91, 157, 224, 156, 225, 155, 226, 154, 227, 153, 228, 152, 75, 153, 74, 154, 73, 155, 72, 156, 71, 157, 70, 158, 69, 159, 68, 160, 67, 161, 66, 162, 65, 163, 64]) + \\\"\\\\n\\\" + \\\"---> Duplicates for n = \\\" + str(100) + \\\": \\\" + str([42, 43, 78, 79, 153, 154, 155, 156, 157]))\\nTest.assert_equals(recaman(1001), \\\"---> Recaman's sequence: \\\" + str([0, 1, 3, 6, 2, 7, 13, 20, 12, 21, 11, 22, 10, 23, 9, 24, 8, 25, 43, 62, 42, 63, 41, 18, 42, 17, 43, 16, 44, 15, 45, 14, 46, 79, 113, 78, 114, 77, 39, 78, 38, 79, 37, 80, 36, 81, 35, 82, 34, 83, 33, 84, 32, 85, 31, 86, 30, 87, 29, 88, 28, 89, 27, 90, 26, 91, 157, 224, 156, 225, 155, 226, 154, 227, 153, 228, 152, 75, 153, 74, 154, 73, 155, 72, 156, 71, 157, 70, 158, 69, 159, 68, 160, 67, 161, 66, 162, 65, 163, 64, 164, 265, 367, 264, 368, 263, 369, 262, 370, 261, 151, 40, 152, 265, 379, 494, 378, 495, 377, 258, 138, 259, 137, 260, 136, 261, 135, 262, 134, 5, 135, 4, 136, 269, 403, 268, 132, 269, 131, 270, 130, 271, 129, 272, 128, 273, 127, 274, 126, 275, 125, 276, 124, 277, 123, 278, 122, 279, 121, 280, 120, 281, 119, 282, 118, 283, 117, 284, 116, 285, 115, 286, 458, 631, 457, 632, 456, 633, 455, 634, 454, 635, 453, 636, 452, 267, 453, 266, 454, 643, 833, 642, 450, 257, 451, 256, 60, 257, 59, 258, 58, 259, 57, 260, 56, 261, 55, 262, 54, 263, 53, 264, 52, 265, 51, 266, 50, 267, 49, 268, 48, 269, 47, 270, 494, 719, 493, 720, 492, 721, 491, 722, 490, 723, 489, 254, 490, 253, 491, 252, 492, 251, 493, 250, 494, 249, 495, 248, 496, 247, 497, 246, 498, 245, 499, 244, 500, 243, 501, 242, 502, 241, 503, 240, 504, 239, 505, 238, 506, 237, 507, 236, 508, 235, 509, 234, 510, 233, 511, 232, 512, 231, 513, 230, 514, 229, 515, 802, 1090, 801, 1091, 800, 1092, 799, 1093, 798, 1094, 797, 1095, 796, 1096, 795, 1097, 794, 1098, 793, 487, 180, 488, 179, 489, 178, 490, 177, 491, 176, 492, 175, 493, 174, 494, 173, 495, 172, 496, 171, 497, 170, 498, 169, 499, 168, 500, 167, 501, 166, 502, 165, 503, 842, 1182, 841, 1183, 840, 1184, 839, 1185, 838, 1186, 837, 1187, 836, 484, 837, 483, 838, 482, 839, 481, 840, 480, 841, 479, 842, 478, 843, 477, 110, 478, 109, 479, 108, 480, 107, 481, 106, 482, 105, 483, 104, 484, 103, 485, 102, 486, 101, 487, 100, 488, 99, 489, 98, 490, 97, 491, 96, 492, 95, 493, 94, 494, 93, 495, 92, 496, 901, 1307, 900, 1308, 899, 1309, 898, 1310, 897, 1311, 896, 1312, 895, 1313, 894, 474, 895, 473, 896, 472, 897, 471, 898, 470, 899, 469, 900, 468, 901, 467, 902, 466, 903, 465, 904, 464, 905, 463, 906, 462, 907, 461, 908, 460, 909, 459, 910, 1362, 1815, 1361, 1816, 1360, 1817, 1359, 1818, 1358, 1819, 1357, 1820, 1356, 891, 425, 892, 424, 893, 423, 894, 422, 895, 421, 896, 420, 897, 419, 898, 418, 899, 417, 900, 416, 901, 415, 902, 414, 903, 413, 904, 412, 905, 411, 906, 410, 907, 409, 908, 408, 909, 407, 910, 406, 911, 405, 912, 404, 913, 1423, 1934, 1422, 1935, 1421, 1936, 1420, 1937, 1419, 1938, 1418, 1939, 1417, 1940, 1416, 1941, 1415, 888, 360, 889, 359, 890, 358, 891, 357, 892, 356, 893, 355, 894, 354, 895, 353, 896, 352, 897, 351, 898, 350, 899, 349, 900, 348, 901, 347, 902, 346, 903, 345, 904, 344, 905, 343, 906, 342, 907, 341, 908, 340, 909, 339, 910, 338, 911, 337, 912, 336, 913, 335, 914, 334, 915, 333, 916, 332, 917, 331, 918, 330, 919, 329, 920, 328, 921, 327, 922, 326, 923, 325, 924, 324, 925, 323, 926, 322, 927, 321, 928, 320, 929, 319, 930, 318, 931, 317, 932, 316, 933, 315, 934, 314, 935, 313, 936, 312, 937, 311, 938, 310, 939, 309, 940, 308, 941, 307, 942, 306, 943, 305, 944, 304, 945, 303, 946, 302, 947, 301, 948, 300, 949, 299, 950, 298, 951, 297, 952, 296, 953, 295, 954, 294, 955, 293, 956, 292, 957, 291, 958, 290, 959, 289, 960, 288, 961, 287, 962, 1638, 2315, 1637, 2316, 1636, 2317, 1635, 2318, 1634, 2319, 1633, 2320, 1632, 2321, 1631, 2322, 1630, 2323, 1629, 2324, 1628, 2325, 1627, 2326, 1626, 2327, 1625, 2328, 1624, 2329, 1623, 2330, 1622, 2331, 1621, 2332, 1620, 2333, 1619, 2334, 1618, 2335, 1617, 2336, 1616, 2337, 1615, 2338, 1614, 2339, 1613, 886, 1614, 885, 1615, 884, 1616, 883, 149, 884, 148, 885, 147, 886, 146, 887, 145, 888, 144, 889, 143, 890, 142, 891, 141, 892, 140, 893, 139, 894, 1650, 2407, 1649, 2408, 1648, 2409, 1647, 2410, 1646, 881, 1647, 880, 112, 881, 111, 882, 1654, 2427, 1653, 878, 1654, 877, 1655, 876, 1656, 875, 1657, 874, 1658, 873, 1659, 872, 1660, 871, 1661, 870, 1662, 869, 1663, 868, 1664, 867, 1665, 866, 1666, 865, 1667, 864, 1668, 863, 1669, 862, 1670, 861, 1671, 860, 1672, 859, 1673, 858, 1674, 857, 1675, 856, 1676, 855, 1677, 854, 1678, 853, 1679, 852, 1680, 851, 1681, 850, 1682, 849, 1683, 848, 1684, 847, 1685, 846, 1686, 845, 1687, 844, 1688, 2533, 3379, 2532, 3380, 2531, 3381, 2530, 3382, 2529, 3383, 2528, 3384, 2527, 3385, 2526, 3386, 2525, 3387, 2524, 3388, 2523, 3389, 2522, 3390, 2521, 1651, 780, 1652, 779, 1653, 778, 1654, 777, 1655, 776, 1656, 775, 1657, 774, 1658, 773, 1659, 772, 1660, 771, 1661, 770, 1662, 769, 1663, 768, 1664, 767, 1665, 766, 1666, 765, 1667, 764, 1668, 763, 1669, 762, 1670, 761, 1671, 760, 1672, 759, 1673, 758, 1674, 757, 1675, 756, 1676, 755, 1677, 754, 1678, 753, 1679, 752, 1680, 751, 1681, 750, 1682, 749, 1683, 748, 1684, 747, 1685, 746, 1686, 745, 1687, 744, 1688, 743, 1689, 742, 1690, 741, 1691, 740, 1692, 739, 1693, 738, 1694, 737, 1695, 736, 1696, 735, 1697, 734, 1698, 733, 1699, 732, 1700, 731, 1701, 730, 1702, 729, 1703, 728, 1704, 727, 1705, 726, 1706, 725, 1707, 724, 1708, 2693, 3679, 2692, 3680, 2691, 3681, 2690, 3682, 2689, 3683, 2688, 3684, 2687, 3685, 2686, 3686]) + \\\"\\\\n\\\" + \\\"---> Duplicates for n = \\\" + str(1001) + \\\": \\\" + str([42, 43, 78, 79, 153, 154, 155, 156, 157, 152, 265, 261, 262, 135, 136, 269, 453, 454, 257, 258, 259, 260, 263, 264, 266, 267, 268, 270, 494, 490, 491, 492, 493, 495, 489, 496, 497, 498, 499, 500, 501, 502, 503, 837, 838, 839, 840, 841, 842, 478, 479, 480, 481, 482, 483, 484, 487, 488, 895, 896, 897, 898, 899, 900, 901, 894, 902, 903, 904, 905, 906, 907, 908, 909, 910, 891, 892, 893, 911, 912, 913, 1614, 1615, 1616, 884, 885, 886, 888, 889, 890, 1647, 881, 1654, 1653, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688]))\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,5,5,5,5,3,5,5,2,3,1,5,3,5,5,5,4,1,1,5,0,4],\"rators\":[\"hZW6j5s6RHpx35phy\",\"6428wKHtwKkFdvBs5\",\"tAF9Gf6PiGogbZuWs\",\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\",\"aCNWav8S8Try9RkC6\",\"n9DbcPwhotC5XbfN3\",\"bJxaKHJqR82EWw8Su\",\"s5M5RvgqR9BhB9JoC\",\"8JyqsSbN2FJXPr3cw\",\"5dHucvf2qBYyKim7X\",\"Cia25zjeX3RkCNx5t\",\"fSQSHjW3e72MrWxbD\",\"XNmN6ztj36a7eChbD\",\"iS5BrkGLzJyPK7nKt\",\"eHcgvkTGsH7ZziqBo\",\"8sNv5PTHa7XQ8bNqR\",\"yjtdwc2AC4jA2RWtn\",\"gJYuGdkXEWWmGRLzu\",\"T6iBEE2jp7f7iEF2P\",\"2PufnQcsHsfymufX3\"],\"total\":26,\"quality\":[]},\"flags\":0},\"summary\":\"Starting from zero, the n'th term a(n) is the previous term minus n (i.e. a(n) = a(n-1) - n) but only if this is both positive and has not been previousely generated. If the conditions don't hold then a(n) = a(n-1) + n.\\n\\nCreate a function that takes a number n as an argument and returns a list with the first n numbers in the Recaman's Sequence, as well as a li\",\"tags\":[\"numbers\",\"math\"],\"timestamp\":{\"$date\":1592618588326},\"title\":\"Recaman's Sequence\",\"quality\":0,\"family\":[{\"_id\":\"E8c4ZMwme85YX3wM7\",\"language\":\"python3\"}]}}"]