a["{\"msg\":\"result\",\"id\":\"1661\",\"result\":{\"_id\":\"P8YXBzJNysQAi8ePr\",\"author\":\"zatoichi49\",\"authorId\":\"tAF9Gf6PiGogbZuWs\",\"code\":\"def digitaldrome(n):\\n\\t\",\"difficulty\":2.1354166666666665,\"familyId\":\"md8xzKDwpC2yMKPsY\",\"instructions\":\"In this challenge, you have to establish if the digits of a given number form a sequence (ascending or descending).\\n\\nGiven an integer `n`, implement a function that returns a string:\\n\\n- `\\\"Metadrome\\\"` if the digits of `n` form an **ascending** sequence **without repeating digits**.\\n- `\\\"Plaindrome\\\"` if the digits of `n` form an **ascending** sequence with **repeating digits**.\\n- `\\\"Katadrome\\\"` if the digits of `n` form a **descending** sequence **without repeating digits**.\\n- `\\\"Nialpdrome\\\"` if the digits of `n` form a **descending** sequence with **repeating digits**.\\n- `\\\"Repdrome\\\"` if `n` contains a **single repeating digit**.\\n- `\\\"Nondrome\\\"` if none of the above conditions is true.\\n\\n### Examples\\n```\\ndigitaldrome(1357) ➞ \\\"Metadrome\\\"\\n# Ascending sequence without repeating digits\\n\\ndigitaldrome(12344) ➞ \\\"Plaindrome\\\"\\n# Ascending sequence with repeating digits\\n\\ndigitaldrome(7531) ➞ \\\"Katadrome\\\"\\n# Descending sequence without repeating digits\\n\\ndigitaldrome(9874441) ➞ \\\"Nialpdrome\\\"\\n# Descending sequence with  repeating digits\\n\\ndigitaldrome(666) ➞ \\\"Repdrome\\\"\\n# There's only a single repeating digit\\n\\ndigitaldrome(1985) ➞ \\\"Nondrome\\\"\\n# This is not a sequence\\n```\\n\\n### Notes\\n- Any given `n` will be a positive integer.\\n- The word _\\\"drome\\\"_ comes from the Greek suffix for \\\"run\\\", while _\\\"kata\\\"_ and _\\\"meta\\\"_ are the prefixes for \\\"down\\\" (or \\\"into\\\") and \\\"after\\\" (or \\\"through\\\").\",\"isHidden\":false,\"lab\":\"Test.assert_equals(digitaldrome(1357), \\\"Metadrome\\\", \\\"Example #1\\\")\\nTest.assert_equals(digitaldrome(12344), \\\"Plaindrome\\\", \\\"Example #2\\\")\\nTest.assert_equals(digitaldrome(7531), \\\"Katadrome\\\", \\\"Example #3\\\")\\nTest.assert_equals(digitaldrome(9874441), \\\"Nialpdrome\\\", \\\"Example #4\\\")\\nTest.assert_equals(digitaldrome(666), \\\"Repdrome\\\", \\\"Example #5\\\")\\nTest.assert_equals(digitaldrome(1985), \\\"Nondrome\\\", \\\"Example #6\\\")\\nTest.assert_equals(digitaldrome(33333), \\\"Repdrome\\\")\\nTest.assert_equals(digitaldrome(1), \\\"Repdrome\\\")\\nTest.assert_equals(digitaldrome(4899), \\\"Plaindrome\\\")\\nTest.assert_equals(digitaldrome(7521), \\\"Katadrome\\\")\\nTest.assert_equals(digitaldrome(23), \\\"Metadrome\\\")\\nTest.assert_equals(digitaldrome(2340), \\\"Nondrome\\\")\\nTest.assert_equals(digitaldrome(1000000), \\\"Nialpdrome\\\")\\nTest.assert_equals(digitaldrome(269), \\\"Metadrome\\\")\",\"language\":\"python3\",\"summary\":\"In this challenge, you have to establish if the digits of a given number form a sequence (ascending or descending).\\n\\nGiven an integer n, implement a function that returns a string:\\n\\n\\\"Metadrome\\\" if the digits of n form an ascending sequence without repeating digits.\\n\\\"Plaindrome\\\" if the digits of n form an ascending sequence with repeating digits.\\n\\\"Katadrome\\\" if\",\"tags\":[\"numbers\",\"sorting\",\"conditions\",\"validation\"],\"timestamp\":{\"$date\":1577639817625},\"title\":\"Digitaldrome\",\"stats\":{\"completed\":{\"total\":107,\"ratings\":[2,2,2,2,2,3,3,1,0,2,3,2,2,3,2,2,3,0,3,2,1,2,2,2,2,2,2,2,3,0,3,2,2,2,1,3,2,3,3,3,1,3,1,0,3,1,1,2,2,3,5,3,2,2,2,3,3,3,2,3,3,2,3,2,3,0,2,1,3,3,3,3,3,1,1,2,3,3,3,1,3,3,3,1,3,0,3,2,0,3,0,2,3,4,1,1],\"rators\":[\"2fxapKr8XGdNeaKi2\",\"tAF9Gf6PiGogbZuWs\",\"8JyqsSbN2FJXPr3cw\",\"yoYQqaY6GszuTkNSs\",\"Jqk2uJZZxEv5wZFze\",\"KE3sfetA2rv6NDfBv\",\"TePz42wc3ZZ5CKA6L\",\"XKi8iZXBCHCaebSHh\",\"YTwwSYtqudH2JnrBX\",\"HqmxnQJM66Y57twhn\",\"gb9rvGus2Jv7bjZSs\",\"8PwfYqoDQFThzNtvf\",\"gMJhLdyw3tH7L96X2\",\"6ShafRStcvew4GfCh\",\"s5M5RvgqR9BhB9JoC\",\"K96FwtfDDN5WM4Bb7\",\"FgkYtHLxeD8pETJ8T\",\"7hzSvcYdq6QjoRnJY\",\"C4QntmkYtB89GNtpd\",\"Lw8oRc5SERsuntXMo\",\"6NwdjBQPBtLAjWiMt\",\"nF4YGHuRBa6NsWQFQ\",\"hAzy9apJgLWwRFGPJ\",\"u5u2YpHXiNgzDNJdX\",\"ab7BsQuhDo3QgE6bh\",\"pkQBaSzukotPEXmrD\",\"F2aeZ4zqupp7a8SkW\",\"mCCS83crw4GFEhnif\",\"QnPD4Sv6W4LHc2Qng\",\"EQbnbkkPYtGxiviTp\",\"aCNWav8S8Try9RkC6\",\"EjbDDFRECrzQDkzrX\",\"y3jMuL7y6jd9JrERs\",\"AasGs8AeX9Lcb9xJn\",\"4CFzv558qbGcpQwc4\",\"orFLgPDw9H5MDzmwo\",\"w3A7cBWyAfukk6xEQ\",\"Jg8ZSRXe3NoDMCqGu\",\"v9KtC8YLbMWmXiW2H\",\"vsE62YBA9NpMFBNiw\",\"mDWNyaaQ9hvPCRzSd\",\"cR3ibTMxLyEdDFCHY\",\"aEm3Wvj2rFYRL8Lrb\",\"fXfjsrGcdwpy7hedt\",\"ZD3sFkhuCNoEHEekx\",\"J5T8gZqiZXFuFDTQ7\",\"qx7S9WMzk2tfSxapz\",\"ZNnsMeNkdDhHjSrZb\",\"3Zceb8GudqAG3onG3\",\"Nua6T3dBurBy3Qfg9\",\"gJYuGdkXEWWmGRLzu\",\"4BHrt3NoCQECjvFJC\",\"JCusodx8pbLAEHA9G\",\"KdNDysEsy2TW5QRJ2\",\"n2BRY9X8899dcG8Bw\",\"YRstQuthRkFeBiXug\",\"HF28xZKSLM9wEuqNg\",\"XghikBbq7obhPSKjX\",\"55RQznnuTGpsj3EXd\",\"a777e8chPvJkY3tKa\",\"dEuJGZbBQkveCXEFk\",\"bJxaKHJqR82EWw8Su\",\"Ecg4m7srYGgZsb4Ck\",\"hnyhBFWwNCz9mDfSi\",\"DEDniTrstQYGounXT\",\"JS3hNM3XXkxPdg3yk\",\"iojEnnY9FsMfYzp6f\",\"KZ2xddpM2f9JRaryB\",\"zZDaXBxMzTCBhNkgL\",\"yjtdwc2AC4jA2RWtn\",\"Yp7uvStL97cC9fKkY\",\"DPi9QGLctq2y76KuE\",\"xn7uGNKeAwPEkP9oA\",\"J3upzLHuEwXH7Z2hx\",\"dkcmCKwqApX5jBggc\",\"974cv448kw6Wu2JF6\",\"gMjAMD8XPK9sbx7eT\",\"tWbjxjEnppu7K2XAy\",\"gXTAie79kiw28tx5u\",\"iS5BrkGLzJyPK7nKt\",\"eYfPWvZwnJQkHbSTK\",\"PytNZK9mNiRiZxPrm\",\"qAby4AWXmTNeusvg3\",\"cAP3n5NY64uoMwzRR\",\"oBcs8GLX2ZFLXQy8y\",\"QRv96jmNaYsWkxQEG\",\"srJ34BaybkQh3qRkM\",\"LQxof8pGabGuWP7Gn\",\"GGdmhAvxXhqhhibJN\",\"PC3pLs36zNzpRDSuE\",\"jCjCvyhqhpebkJn34\",\"T6iBEE2jp7f7iEF2P\",\"AFfw7cGg83uYk2Miy\",\"gKnWjDjwrJh7MK2df\",\"yod5YhKtPqw2GfG9B\",\"2PufnQcsHsfymufX3\",\"rfyEkETeoS96QNH4e\",\"8sNv5PTHa7XQ8bNqR\",\"n2qKKxomPnb4zez5M\"],\"quality\":[5,2,4,5,5,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":4.5,\"family\":[{\"_id\":\"rRXLv6aWdsGevJ888\",\"language\":\"cpp\"},{\"_id\":\"84jqLSWr288Wqx5eH\",\"language\":\"javascript\"},{\"_id\":\"P8YXBzJNysQAi8ePr\",\"language\":\"python3\"},{\"_id\":\"MtyqRdgzx9RjHTTww\",\"language\":\"ruby\"}]}}"]