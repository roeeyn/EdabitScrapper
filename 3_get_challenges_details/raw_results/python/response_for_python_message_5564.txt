a["{\"msg\":\"result\",\"id\":\"1495\",\"result\":{\"_id\":\"8HxYSzxMyN9pJb23g\",\"author\":\"AniXDownLoe\",\"authorId\":\"incG8tH2dwThHg35f\",\"code\":\"def split_n_cases(txt, cases):\\n\\t\",\"difficulty\":2.0657894736842106,\"familyId\":\"xfBRzHzNE7bTnrKyH\",\"instructions\":\"Create a function that accepts `txt` and `cases` as parameters where the string is split into **N distinct cases** of **equal length** as shown:\\n\\n### Examples\\n```\\nsplit_n_cases(\\\"Strengthened\\\", 6) ➞ [\\\"St\\\", \\\"re\\\", \\\"ng\\\", \\\"th\\\", \\\"en\\\", \\\"ed\\\"]\\n\\nsplit_n_cases(\\\"Unscrupulous\\\", 2) ➞ [\\\"Unscru\\\", \\\"pulous\\\" ]\\n\\nsplit_n_cases(\\\"Flavorless\\\", 1) ➞ [\\\"Flavorless\\\" ]\\n```\\n\\n### Notes\\nIf it's not possible to split the string as described, return `[\\\"Error\\\"] `.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(split_n_cases(\\\"Unscrupulous\\\", 2), [ \\\"Unscru\\\", \\\"pulous\\\" ])\\nTest.assert_equals(split_n_cases(\\\"Incomprehensible\\\", 4), [ \\\"Inco\\\", \\\"mpre\\\", \\\"hens\\\", \\\"ible\\\" ])\\nTest.assert_equals(split_n_cases(\\\"Evaluation\\\", 10), [ \\\"E\\\", \\\"v\\\", \\\"a\\\", \\\"l\\\", \\\"u\\\", \\\"a\\\", \\\"t\\\", \\\"i\\\", \\\"o\\\", \\\"n\\\" ])\\nTest.assert_equals(split_n_cases(\\\"Strengthened\\\", 6), [ \\\"St\\\", \\\"re\\\", \\\"ng\\\", \\\"th\\\", \\\"en\\\", \\\"ed\\\" ])\\nTest.assert_equals(split_n_cases(\\\"Fool's Errand\\\", 20), [ \\\"Error\\\" ])\\nTest.assert_equals(split_n_cases(\\\"Flavorless\\\", 1), [ \\\"Flavorless\\\" ])\\nTest.assert_equals(split_n_cases(\\\"Evolutionary Biology\\\", 8), [ \\\"Error\\\" ])\\nTest.assert_equals(split_n_cases(\\\"Indefatigable Defender\\\", 2), [ \\\"Indefatigab\\\", \\\"le Defender\\\" ])\\nTest.assert_equals(split_n_cases(\\\"Unimaginatively\\\", 3), [ \\\"Unima\\\", \\\"ginat\\\", \\\"ively\\\" ])\\nTest.assert_equals(split_n_cases(\\\"Peppered Moth\\\", 6), [ \\\"Error\\\" ])\\nTest.assert_equals(split_n_cases(\\\"Peppered Moth\\\", 6013), [ \\\"Error\\\" ])\",\"language\":\"python3\",\"quality\":4.5,\"summary\":\"Create a function that accepts txt and cases as parameters where the string is split into N distinct cases of equal length as shown:\\n\\nExamples\\nsplitncases(\\\"Strengthened\\\", 6) ➞ [\\\"St\\\", \\\"re\\\", \\\"ng\\\", \\\"th\\\", \\\"en\\\", \\\"ed\\\"]\\n\\nsplitncases(\\\"Unscrupulous\\\", 2) ➞ [\\\"Unscru\\\", \\\"pulous\\\" ]\\n\\nsplitncases(\\\"Flavorless\\\", 1) ➞ [\\\"Flavorless\\\" ]\\n\\nNotes\\nIf it's not possible to split the stri\",\"tags\":[\"arrays\",\"strings\",\"formatting\"],\"timestamp\":{\"$date\":1602102031980},\"title\":\"Split the String into N Cases of Equal Length\",\"stats\":{\"completed\":{\"total\":97,\"ratings\":[2,2,2,2,2,1,3,2,1,3,0,3,5,0,3,3,2,1,2,2,2,2,1,2,2,3,3,2,3,2,3,3,2,1,1,3,2,2,0,3,3,3,2,3,0,2,1,3,3,1,1,1,2,3,3,2,0,0,2,1,1,2,1,3,3,3,3,3,2,3,2,3,3,2,1,3],\"quality\":[5,3,4,4,3,4,5,5,5,5,5,5,5,5,4,5],\"rators\":[\"incG8tH2dwThHg35f\",\"8PwfYqoDQFThzNtvf\",\"55RQznnuTGpsj3EXd\",\"aEm3Wvj2rFYRL8Lrb\",\"Yp7uvStL97cC9fKkY\",\"QRv96jmNaYsWkxQEG\",\"GNLCnfuyXcwFLKBAF\",\"J5T8gZqiZXFuFDTQ7\",\"axdSNLZpiCDF8RS6n\",\"dkcmCKwqApX5jBggc\",\"tAF9Gf6PiGogbZuWs\",\"8fZxjQfuXw5HMSRJM\",\"yjtdwc2AC4jA2RWtn\",\"qD2LrwaDrSdiybLKY\",\"s5M5RvgqR9BhB9JoC\",\"8JyqsSbN2FJXPr3cw\",\"HF28xZKSLM9wEuqNg\",\"cR3ibTMxLyEdDFCHY\",\"CQhaiZqQcP87YteSG\",\"iS5BrkGLzJyPK7nKt\",\"6MjSiiBLPcvXbXcaZ\",\"xn7uGNKeAwPEkP9oA\",\"gJYuGdkXEWWmGRLzu\",\"DPi9QGLctq2y76KuE\",\"rGpPd6PvpzLaqps4g\",\"dYPkStFnLvAMsHSzZ\",\"gb9rvGus2Jv7bjZSs\",\"shdSrDq5ZKqfpgjmu\",\"mDWNyaaQ9hvPCRzSd\",\"J3upzLHuEwXH7Z2hx\",\"qZQxPQ2kaNKAMesHT\",\"Z85ajWfZ4jDPkbvR4\",\"gSFJPsMXnqAog3Q9f\",\"gXTAie79kiw28tx5u\",\"Jqk2uJZZxEv5wZFze\",\"4RsakkyRXyYGwFxEa\",\"oBcs8GLX2ZFLXQy8y\",\"cAP3n5NY64uoMwzRR\",\"T2vhHPhRR96hRizq8\",\"euPBBaYXyS8RBr9KB\",\"hnyhBFWwNCz9mDfSi\",\"n2BRY9X8899dcG8Bw\",\"RTDx9axf52kxhFjwZ\",\"iojEnnY9FsMfYzp6f\",\"CHvzhtXnv8HTbPQ56\",\"3LiSLdtN58n46NEqg\",\"PXAcsKkssS2yLyDv2\",\"JhX7jvtpwNyxcc39m\",\"FEYpu9RWysAgW3XnP\",\"GTKsdeEihE636Le9i\",\"PWgzeK859suojbrRx\",\"Wpn95NqWxncQrwNgz\",\"AFfw7cGg83uYk2Miy\",\"AasGs8AeX9Lcb9xJn\",\"srJ34BaybkQh3qRkM\",\"HqmxnQJM66Y57twhn\",\"rfyEkETeoS96QNH4e\",\"DEDniTrstQYGounXT\",\"2PufnQcsHsfymufX3\",\"PC3pLs36zNzpRDSuE\",\"eHcgvkTGsH7ZziqBo\",\"fznzd3qnvtbFkkizz\",\"BdnE4RS5puoxo92mA\",\"8BFSTCnoe2QggN64c\",\"4Lwjr34ypKNQNQCar\",\"ctbThYbufFCYbRK4f\",\"ey3CASd6Je5LEJzfB\",\"gKnWjDjwrJh7MK2df\",\"T6iBEE2jp7f7iEF2P\",\"jCjCvyhqhpebkJn34\",\"8nE8QHnFYsHCFebte\",\"8sNv5PTHa7XQ8bNqR\",\"o4ixjQGSaYqA2JoM4\",\"5HCu9Ydd86QgHDRNP\",\"jWbd7SYDzLPjc9EDh\",\"RoGGD5cpHb4ftdLDv\",\"u5u2YpHXiNgzDNJdX\",\"kjvgTyRFyKHv44DcH\",\"NfMJuiBk6FN5Jc6ow\",\"yod5YhKtPqw2GfG9B\",\"buX4mCQhtXCfBjeno\",\"suArq5BbSy7gD6xri\",\"Ds7L5bksw2QRHjrKL\",\"mvJBakQ35CWAnbbEZ\",\"nkH3HfJXLMNcBMM79\",\"9pzFiFK3ANLjQfnr2\",\"Qyfyyw6oC4EHAndzo\"]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"mqjJpaPPJEjhfn92v\",\"language\":\"cpp\"},{\"_id\":\"zdRF7K99EJhd4oZQm\",\"language\":\"csharp\"},{\"_id\":\"WRugTDNsJ3cz9dfWs\",\"language\":\"javascript\"},{\"_id\":\"8HxYSzxMyN9pJb23g\",\"language\":\"python3\"},{\"_id\":\"SncGWJAZTJ34TDiLZ\",\"language\":\"ruby\"},{\"_id\":\"wmZphGdWGjELSs99k\",\"language\":\"swift\"}]}}"]