a["{\"msg\":\"result\",\"id\":\"2027\",\"result\":{\"_id\":\"rihSbQq6x8R2D4aoa\",\"author\":\"aryasinic\",\"authorId\":\"3LiSLdtN58n46NEqg\",\"code\":\"def alpha_range(start, stop, step):\\n\\t\",\"difficulty\":2.836734693877551,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"fWmLzan93CYixhbTZ\",\"instructions\":\"As you know, the function `range()` returns a range of numbers, but it doesn't work on alphabets. In this challenge, we try to fill this gap.\\n\\nWrite a function `alpha-range()` which takes three arguments `start`, `stop`, and `step` (which its default value is one). The function must return a list of alphabetical characters, ranging from start character to stop character based on `step` value.\\n\\nThe function must follow these conditions:\\n\\n- If `step` is zero or more than 26 or less than -26, return `\\\"step must be a non-zero value between -26 and 26, exclusive\\\"`.\\n\\n- Both `start` and `stop` must share the same case, otherwise, return `\\\"both start and stop must share the same case\\\"`.\\n\\nLike `range()` function:\\n- `step` must not be zero.\\n\\nUnlike `range()` function:\\n- returned list must be inclusive.\\n- the order of characters doesn't affect the output (i.e. the output of `alpha_range(\\\"a\\\", \\\"f\\\")` is the same as `alpha_range(\\\"f\\\", \\\"a\\\")`, see examples).\\n\\n\\n### Examples\\n```\\nalpha_range(\\\"a\\\", \\\"f\\\") ➞ [\\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"d\\\", \\\"e\\\", \\\"f\\\"]\\n\\nalpha_range(\\\"f\\\", \\\"a\\\") ➞ [\\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"d\\\", \\\"e\\\", \\\"f\\\"]\\n\\nalpha_range(\\\"a\\\", \\\"f\\\", -1) ➞ [\\\"f\\\", \\\"e\\\", \\\"d\\\", \\\"c\\\", \\\"b\\\", \\\"a\\\"]\\n\\nalpha_range(\\\"f\\\", \\\"a\\\", -1) ➞ [\\\"f\\\", \\\"e\\\", \\\"d\\\", \\\"c\\\", \\\"b\\\", \\\"a\\\"]\\n\\nalpha_range(\\\"A\\\", \\\"F\\\", -1) ➞ [\\\"F\\\", \\\"E\\\", \\\"D\\\", \\\"C\\\", \\\"B\\\", \\\"A\\\"]\\n\\nalpha_range(\\\"A\\\", \\\"F\\\", 0) ➞ \\\"step must be a non-zero value between -26 and 26, exclusive\\\"\\n\\nalpha_range(\\\"A\\\", \\\"F\\\", -26) ➞ \\\"step must be a non-zero value between -26 and 26, exclusive\\\"\\n\\nalpha_range(\\\"a\\\", \\\"F\\\", -1) ➞ \\\"both start and stop must share the same case\\\"\\n```\\n\\n### Notes\\nAll the `start` and `stop` values in the tests are valid alphabetical characters.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(alpha_range('i', 'z'), ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'])\\nTest.assert_equals(alpha_range('H', 'I'), ['H', 'I'])\\nTest.assert_equals(alpha_range('g', 'o'), ['g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o'])\\nTest.assert_equals(alpha_range('L', 'Y'), ['L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y'])\\nTest.assert_equals(alpha_range('m', 'd'), ['d', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm'])\\nTest.assert_equals(alpha_range('M', 'S'), ['M', 'N', 'O', 'P', 'Q', 'R', 'S'])\\nTest.assert_equals(alpha_range('d', 'a'), ['a', 'b', 'c', 'd'])\\nTest.assert_equals(alpha_range('S', 'D'), ['D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S'])\\nTest.assert_equals(alpha_range('k', 'd'), ['d', 'e', 'f', 'g', 'h', 'i', 'j', 'k'])\\nTest.assert_equals(alpha_range('I', 'X'), ['I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X'])\\nTest.assert_equals(alpha_range('b', 'g', -1), ['g', 'f', 'e', 'd', 'c', 'b'])\\nTest.assert_equals(alpha_range('D', 'B', -1), ['D', 'C', 'B'])\\nTest.assert_equals(alpha_range('n', 'o', -1), ['o', 'n'])\\nTest.assert_equals(alpha_range('S', 'U', -1), ['U', 'T', 'S'])\\nTest.assert_equals(alpha_range('a', 'l', -1), ['l', 'k', 'j', 'i', 'h', 'g', 'f', 'e', 'd', 'c', 'b', 'a'])\\nTest.assert_equals(alpha_range('D', 'P', -1), ['P', 'O', 'N', 'M', 'L', 'K', 'J', 'I', 'H', 'G', 'F', 'E', 'D'])\\nTest.assert_equals(alpha_range('m', 'k', -1), ['m', 'l', 'k'])\\nTest.assert_equals(alpha_range('Z', 'P', -1), ['Z', 'Y', 'X', 'W', 'V', 'U', 'T', 'S', 'R', 'Q', 'P'])\\nTest.assert_equals(alpha_range('j', 'u', -1), ['u', 't', 's', 'r', 'q', 'p', 'o', 'n', 'm', 'l', 'k', 'j'])\\nTest.assert_equals(alpha_range('X', 'A', -1), ['X', 'W', 'V', 'U', 'T', 'S', 'R', 'Q', 'P', 'O', 'N', 'M', 'L', 'K', 'J', 'I', 'H', 'G', 'F', 'E', 'D', 'C', 'B', 'A'])\\nTest.assert_equals(alpha_range('g', 'v', -1), ['v', 'u', 't', 's', 'r', 'q', 'p', 'o', 'n', 'm', 'l', 'k', 'j', 'i', 'h', 'g'])\\nTest.assert_equals(alpha_range('z', 'h', -2), ['z', 'x', 'v', 't', 'r', 'p', 'n', 'l', 'j', 'h'])\\nTest.assert_equals(alpha_range('w', 'e', 1), ['e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w'])\\nTest.assert_equals(alpha_range('G', 'V', 0), \\\"step must be a non-zero value between -26 and 26, exclusive\\\")\\nTest.assert_equals(alpha_range('t', 'p', 2), ['p', 'r', 't'])\\nTest.assert_equals(alpha_range('N', 'I', -30), \\\"step must be a non-zero value between -26 and 26, exclusive\\\")\\nTest.assert_equals(alpha_range('n', 'c', -29), \\\"step must be a non-zero value between -26 and 26, exclusive\\\")\\nTest.assert_equals(alpha_range('F', 'L', -29), \\\"step must be a non-zero value between -26 and 26, exclusive\\\")\\nTest.assert_equals(alpha_range('z', 'o', -7), ['z', 's'])\\nTest.assert_equals(alpha_range('k', 'g', 1), ['g', 'h', 'i', 'j', 'k'])\\nTest.assert_equals(alpha_range('b', 'f', -4), ['f', 'b'])\\nTest.assert_equals(alpha_range('H', 'Z', -13), ['Z', 'M'])\\nTest.assert_equals(alpha_range('R', 'B', 5), ['B', 'G', 'L', 'Q'])\\nTest.assert_equals(alpha_range('p', 'm', -3), ['p', 'm'])\\nTest.assert_equals(alpha_range('U', 'C', 3), ['C', 'F', 'I', 'L', 'O', 'R', 'U'])\\nTest.assert_equals(alpha_range('O', 'Y', -27), \\\"step must be a non-zero value between -26 and 26, exclusive\\\")\\nTest.assert_equals(alpha_range('O', 'Q', -1), ['Q', 'P', 'O'])\\nTest.assert_equals(alpha_range('T', 'G', 10), ['G', 'Q'])\\nTest.assert_equals(alpha_range('e', 'p', 5), ['e', 'j', 'o'])\\nTest.assert_equals(alpha_range('w', 'k', 5), ['k', 'p', 'u'])\\nTest.assert_equals(alpha_range('m', 'u', -1), ['u', 't', 's', 'r', 'q', 'p', 'o', 'n', 'm'])\\nTest.assert_equals(alpha_range('y', 'b', 11), ['b', 'm', 'x'])\\nTest.assert_equals(alpha_range('a', 't', 27), \\\"step must be a non-zero value between -26 and 26, exclusive\\\")\\nTest.assert_equals(alpha_range('Y', 'G', -30), \\\"step must be a non-zero value between -26 and 26, exclusive\\\")\\nTest.assert_equals(alpha_range('T', 'F', 12), ['F', 'R'])\\nTest.assert_equals(alpha_range('q', 'e', 12), ['e', 'q'])\\nTest.assert_equals(alpha_range('X', 'S', 0), \\\"step must be a non-zero value between -26 and 26, exclusive\\\")\\nTest.assert_equals(alpha_range('x', 'd', 1), ['d', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x'])\\nTest.assert_equals(alpha_range('L', 'W', 4), ['L', 'P', 'T'])\\nTest.assert_equals(alpha_range('c', 'k', -2), ['k', 'i', 'g', 'e', 'c'])\\nTest.assert_equals(alpha_range('r', 'g', 0), \\\"step must be a non-zero value between -26 and 26, exclusive\\\")\\nTest.assert_equals(alpha_range('Y', 'M', -30), \\\"step must be a non-zero value between -26 and 26, exclusive\\\")\\nTest.assert_equals(alpha_range('m', 'q', -1), ['q', 'p', 'o', 'n', 'm'])\\nTest.assert_equals(alpha_range('U', 'C', -5), ['U', 'P', 'K', 'F'])\\nTest.assert_equals(alpha_range('y', 'g', 1), ['g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y'])\\nTest.assert_equals(alpha_range('Q', 'D', -30), \\\"step must be a non-zero value between -26 and 26, exclusive\\\")\\nTest.assert_equals(alpha_range('Q', 'C', 14), ['C', 'Q'])\\nTest.assert_equals(alpha_range('v', 'j', 7), ['j', 'q'])\\nTest.assert_equals(alpha_range('Q', 'A', 7), ['A', 'H', 'O'])\\nTest.assert_equals(alpha_range('r', 'h', 1), ['h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r'])\\nTest.assert_equals(alpha_range('X', 'w', 6), \\\"both start and stop must share the same case\\\")\\nTest.assert_equals(alpha_range('v', 'B', -8), \\\"both start and stop must share the same case\\\")\\nTest.assert_equals(alpha_range('h', 'E', 7), \\\"both start and stop must share the same case\\\")\\nTest.assert_equals(alpha_range('R', 'o', 7), \\\"both start and stop must share the same case\\\")\\nTest.assert_equals(alpha_range('o', 'b', 14), ['b'])\\nTest.assert_equals(alpha_range('Z', 'S', 12), ['S'])\\nTest.assert_equals(alpha_range('y', 'r', 21), ['r'])\\nTest.assert_equals(alpha_range('K', 'Y', -4), ['Y', 'U', 'Q', 'M'])\\nTest.assert_equals(alpha_range('q', 'h', -24), ['q'])\\nTest.assert_equals(alpha_range('J', 'V', 6), ['J', 'P', 'V'])\\nTest.assert_equals(alpha_range('c', 'h', -9), ['h'])\\nTest.assert_equals(alpha_range('Z', 'D', -22), ['Z', 'D'])\\nTest.assert_equals(alpha_range('h', 'l', -6), ['l'])\\nTest.assert_equals(alpha_range('F', 'X', 12), ['F', 'R'])\\nTest.assert_equals(alpha_range('d', 'k', 1), ['d', 'e', 'f', 'g', 'h', 'i', 'j', 'k'])\\nTest.assert_equals(alpha_range('W', 'L', -19), ['W'])\\nTest.assert_equals(alpha_range('p', 'z', -4), ['z', 'v', 'r'])\\nTest.assert_equals(alpha_range('E', 'N', -9), ['N', 'E'])\\nTest.assert_equals(alpha_range('l', 'a', -12), ['l'])\\nTest.assert_equals(alpha_range('W', 'P', 16), ['P'])\\nTest.assert_equals(alpha_range('x', 'c', -6), ['x', 'r', 'l', 'f'])\\nTest.assert_equals(alpha_range('N', 'U', 4), ['N', 'R'])\\nTest.assert_equals(alpha_range('v', 'm', -22), ['v'])\\nTest.assert_equals(alpha_range('R', 'Q', 13), ['Q'])\\nTest.assert_equals(alpha_range('n', 'j', 22), ['j'])\\nTest.assert_equals(alpha_range('D', 'P', -9), ['P', 'G'])\\nTest.assert_equals(alpha_range('x', 'o', -7), ['x', 'q'])\\nTest.assert_equals(alpha_range('I', 'T', -1), ['T', 'S', 'R', 'Q', 'P', 'O', 'N', 'M', 'L', 'K', 'J', 'I'])\\nTest.assert_equals(alpha_range('n', 'i', 14), ['i'])\\nTest.assert_equals(alpha_range('C', 'Z', -4), ['Z', 'V', 'R', 'N', 'J', 'F'])\\nTest.assert_equals(alpha_range('a', 'u', -24), ['u'])\\nTest.assert_equals(alpha_range('Q', 'C', -15), ['Q'])\\nTest.assert_equals(alpha_range('x', 'i', 1), ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x'])\\nTest.assert_equals(alpha_range('C', 'E', -2), ['E', 'C'])\\nTest.assert_equals(alpha_range('i', 'u', -20), ['u'])\\nTest.assert_equals(alpha_range('Q', 'G', 4), ['G', 'K', 'O'])\\nTest.assert_equals(alpha_range('j', 'x', 14), ['j', 'x'])\\nTest.assert_equals(alpha_range('b', 'y', -11), ['y', 'n', 'c'])\\nTest.assert_equals(alpha_range('Q', 'A', -7), ['Q', 'J', 'C'])\\nTest.assert_equals(alpha_range('f', 'c', 1), ['c', 'd', 'e', 'f'])\",\"language\":\"python3\",\"quality\":4,\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,3,3,3,4,2,1,3,2,3,4,4,4,4,3,4,4,3,4,5,5,5,4,3,1,2,5,5,2,3,4,4,2,5,1,2,2,1,2,0,0,3,2,1,2],\"quality\":[4],\"rators\":[\"3LiSLdtN58n46NEqg\",\"p8qqFdJ3FSk5x9z3G\",\"8PwfYqoDQFThzNtvf\",\"HF28xZKSLM9wEuqNg\",\"s5M5RvgqR9BhB9JoC\",\"8sNv5PTHa7XQ8bNqR\",\"iS5BrkGLzJyPK7nKt\",\"axdSNLZpiCDF8RS6n\",\"CTKmXtrqDYqJBnuy8\",\"p7js9trz2zk2RorCR\",\"fSQSHjW3e72MrWxbD\",\"mDWNyaaQ9hvPCRzSd\",\"XNmN6ztj36a7eChbD\",\"8JyqsSbN2FJXPr3cw\",\"iojEnnY9FsMfYzp6f\",\"J3upzLHuEwXH7Z2hx\",\"gb9rvGus2Jv7bjZSs\",\"aFYzioHvZPvPaunsg\",\"gJYuGdkXEWWmGRLzu\",\"N6pvkCLg2nopjEW67\",\"2PufnQcsHsfymufX3\",\"4sHkH3t9CJYhbDwjM\",\"SGhPxX5bHGL8zZqtt\",\"yjtdwc2AC4jA2RWtn\",\"owtzvEJR4ynYrBd3P\",\"D3Pr2EFee3652zsyR\",\"hjz6kxzENmSHJjQRE\",\"KQTgsjJyfh5KZ7qca\",\"J23RcmzbdtBbPCTjT\",\"8nE8QHnFYsHCFebte\",\"AasGs8AeX9Lcb9xJn\",\"hkiz2Nv927cYGrA86\",\"aMRkiWFriAbMPSpHS\",\"4SNg5Qy6eHvwqQGSR\",\"hR7GMiqGap4CzEWSy\",\"3YrD5xmhEpHpoMFbY\",\"npf86Tm7FK7ZtK2NY\",\"bCFecqKyXTCnGgPSc\",\"2iFe3EHEH2YdhSKrs\",\"vhZgCDRqMncYjfFB9\",\"T6iBEE2jp7f7iEF2P\",\"yTtSCvGPyYna6JuRC\",\"GTKsdeEihE636Le9i\",\"d8qtzoLB264iP8tdY\",\"aEm3Wvj2rFYRL8Lrb\"],\"total\":51},\"flags\":0},\"summary\":\"As you know, the function range() returns a range of numbers, but it doesn't work on alphabets. In this challenge, we try to fill this gap.\\n\\nWrite a function alpha-range() which takes three arguments start, stop, and step (which its default value is one). The function must return a list of alphabetical characters, ranging from start character to stop character\",\"tags\":[\"arrays\",\"strings\"],\"timestamp\":{\"$date\":1608617817507},\"title\":\"Alpha-Range\",\"family\":[{\"_id\":\"rihSbQq6x8R2D4aoa\",\"language\":\"python3\"}]}}"]