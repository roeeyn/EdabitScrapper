a["{\"msg\":\"result\",\"id\":\"1799\",\"result\":{\"_id\":\"AHgupTs2ELjAehzHv\",\"author\":\"Alessandro Manicone\",\"authorId\":\"AasGs8AeX9Lcb9xJn\",\"code\":\"import re\\n\\nopening_tags = \\\"yourregularexpressionhere\\\"\\nclosing_tags = \\\"yourregularexpressionhere\\\"\\nall_tags = \\\"yourregularexpressionhere\\\"\",\"difficulty\":2.4705882352941178,\"familyId\":\"sNa3GTBLf5z3g3CLa\",\"instructions\":\"Write three **regular expressions:**\\n- One called `opening_tags` that will match all HTML opening tags including attributes.\\n- One called `closing_tags` that will match all HTML closing tags.\\n- One called `all_tags` that will match all HTML tags opening or closing, their attributes and **their content** (as long as their content is in the same line). Please, check the example below to see the expected result.\\n\\n### Example\\n```\\nindex = '''\\n<html>\\n<head>\\n    Hi! I'm a text in the head.\\n    I probably shouldn't be here.\\n    <title>edabit.com</title>\\n</head>\\n<body>\\n    Hi! I'm a text in the body.\\n    <p>This is a parragraph and <a href=\\\"https://edabit.com\\\">this is a link</a>.</p>\\n    Here comes a fake tag: <>.\\n</body>\\n</html>\\n'''\\n\\nopening_tags = \\\"yourregularexpressionhere\\\"\\nclosing_tags = \\\"yourregularexpressionhere\\\"\\nall_tags = \\\"yourregularexpressionhere\\\"\\n\\nre.findall(opening_tags, index) ➞ [\\\"<html>\\\", \\\"<head>\\\", \\\"<title>\\\", \\\"<body>\\\", \\\"<p>\\\", \\\"<a href=\\\"https://edabit.com\\\">\\\"]\\n\\nre.findall(closing_tags, index) ➞ [\\\"</title>\\\", \\\"</head>\\\",  \\\"</a>\\\", \\\"</p>\\\", \\\"</body>\\\", \\\"</html>\\\"]\\n\\nre.findall(all_tags, index) ➞ [\\\"<html>\\\", \\\"<head>\\\", \\\"<title>edabit.com</title>\\\", \\\"</head>\\\", \\\"<body>\\\", \\\"<p>This is a parragraph and <a href=\\\"https://edabit.com\\\">this is a link</a>.</p>\\\", \\\"</body>\\\", \\\"</html>\\\"]\\n```\\n\\n### Notes\\n- You **don't** need to write a function, just the pattern.\\n- Do **not** remove `import re` from the code.\\n- Find more info on RegEx in **Resources**.\\n- You can find all the challenges of this series in my [Basic RegEx](https://edabit.com/collection/8PEq2azWDtAZWPFe2) collection.\",\"isHidden\":false,\"lab\":\"index = '''\\n<html>\\n<head>\\n\\tHi! I'm a text in the head. \\n\\tI probably shouldn't be here.\\n    <title>edabit.com</title>\\n</head>\\n<body>\\n\\tHi! I'm a text in the body.\\n\\t<p>This is a parragraph and <a href=\\\"https://edabit.com\\\">this is a link</a>.</p>\\n\\tHere comes a fake tag: <>.\\n</body>\\n</html>\\n'''\\n\\nTest.assert_equals(re.findall(opening_tags, index), ['<html>', '<head>', '<title>', '<body>', '<p>', '<a href=\\\"https://edabit.com\\\">'])\\nTest.assert_equals(re.findall(closing_tags, index), ['</title>', '</head>',  '</a>', '</p>', '</body>', '</html>'])\\nTest.assert_equals(re.findall(all_tags, index), ['<html>', '<head>', '<title>edabit.com</title>', '</head>', '<body>', '<p>This is a parragraph and <a href=\\\"https://edabit.com\\\">this is a link</a>.</p>', '</body>', '</html>'])\\n\\n#Note from the original:\\n#Credits to https://javascript.info/regexp-anchors\\n\\n#Translated from JavaScript.\\n#The RegEx series was originally posted by Isaac Pak.\",\"language\":\"python3\",\"summary\":\"Write three regular expressions:\\nOne called opening_tags that will match all HTML opening tags including attributes.\\nOne called closing_tags that will match all HTML closing tags.\\nOne called all_tags that will match all HTML tags opening or closing, their attributes and their content (as long as their content is in the same line). Please, check the example bel\",\"tags\":[\"regex\"],\"timestamp\":{\"$date\":1587917161347},\"title\":\"RegEx Exercise #2: HTML Tags\",\"stats\":{\"completed\":{\"total\":60,\"ratings\":[2,2,2,2,2,3,4,4,3,4,3,2,3,2,3,1,2,2,3,1,2,3,3,3,2,2,3,4,1,4,4,2,3,4,1,0,3,4,0,4,1,2,3,4,0,2,3,2,2,1,4],\"rators\":[\"AasGs8AeX9Lcb9xJn\",\"aEm3Wvj2rFYRL8Lrb\",\"Phd2FdPjo9BhBfvKh\",\"tAF9Gf6PiGogbZuWs\",\"8PwfYqoDQFThzNtvf\",\"gb9rvGus2Jv7bjZSs\",\"9pzFiFK3ANLjQfnr2\",\"YRstQuthRkFeBiXug\",\"R4SjTgDnpigJYDLyL\",\"xn7uGNKeAwPEkP9oA\",\"cykCKNJcqFBxz4T8s\",\"cnmj8mAbLcMnKaqLS\",\"4fhjJBvLBWh6QeSih\",\"n2BRY9X8899dcG8Bw\",\"4597PD5mbXzHa3vdi\",\"MCw7uAcoWcSTBTmr3\",\"HAMiDZwWv6LiZDdsP\",\"pscBduNyf8TDHe2Km\",\"pPtmnJ7q9QchoG2Jq\",\"8WpvgSbQciTQWdd8T\",\"zZDaXBxMzTCBhNkgL\",\"xhCe8aAuimqGyiWQe\",\"cxABox46qWvJRyidE\",\"hR7GMiqGap4CzEWSy\",\"oHbErJxjYJhD66d5w\",\"yjtdwc2AC4jA2RWtn\",\"c2u7qfdaYxcyuydtu\",\"HF28xZKSLM9wEuqNg\",\"REpkEcYrskYHBmYzW\",\"oZiGwL535nJ5ZMJr7\",\"uN5t57RETi5y2z5W8\",\"Yp7uvStL97cC9fKkY\",\"8sNv5PTHa7XQ8bNqR\",\"Y6w9WxXzRweSiy3Ls\",\"J3upzLHuEwXH7Z2hx\",\"8KNtgAcNpyT2f6bTT\",\"GkwzERyQx7gKRGipu\",\"bvmTE46bfcM4ogj34\",\"2PufnQcsHsfymufX3\",\"JKb5rhL6DKcCAypF9\",\"hkiz2Nv927cYGrA86\",\"AQSqD9oNv2uPfxZCR\",\"vBH2Qwy4Jq5BbwXnL\",\"H9KZi2cjt4FwH7qog\",\"oBcs8GLX2ZFLXQy8y\",\"nkL2knkcNaiHCerW2\",\"gKnWjDjwrJh7MK2df\",\"aFYzioHvZPvPaunsg\",\"yTtSCvGPyYna6JuRC\",\"x9F5WvWftdnhG7DqT\",\"iqmPb9JuJDgTFeR8Q\",\"QBSSPBFQRJr9tYW6f\",\"CHvzhtXnv8HTbPQ56\",\"EtXnbx2HotA2Lqsv5\",\"AfNiereaeptrhXydL\",\"23oi2a3vQwhtLEbSj\",\"gNC5bHdWMNDvcTiSJ\",\"CdeH2ToYiJnQYZy5J\",\"RfbjShbg8jmhyNtJh\"],\"quality\":[2,5,5,5,5,5,4,5,3,4,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":4.461538461538462,\"family\":[{\"_id\":\"t2zrueG7T4MDhaz6o\",\"language\":\"javascript\"},{\"_id\":\"AHgupTs2ELjAehzHv\",\"language\":\"python3\"}]}}"]