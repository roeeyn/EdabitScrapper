a["{\"msg\":\"result\",\"id\":\"823\",\"result\":{\"_id\":\"E882au3CJba2jfQyT\",\"author\":\"persolut\",\"authorId\":\"xn7uGNKeAwPEkP9oA\",\"code\":\"def common_elements(lst1, lst2):\\n\\t\",\"difficulty\":1.3924050632911393,\"familyId\":\"xsuGwHwZq8XtEXL3z\",\"instructions\":\"Create a function that takes two lists of numbers sorted in ascending order and returns a list of numbers which are common to both the input lists.\\n\\n### Examples\\n```\\ncommon_elements([-1, 3, 4, 6, 7, 9], [1, 3]) ➞ [3]\\n\\ncommon_elements([1, 3, 4, 6, 7, 9], [1, 2, 3, 4, 7, 10]) ➞ [1, 3, 4, 7]\\n\\ncommon_elements([1, 2, 2, 2, 3, 4, 5], [1, 2, 4, 5]) ➞ [1, 2, 4, 5]\\n\\ncommon_elements([1, 2, 3, 4, 5], [10, 12, 13, 15]) ➞ []\\n```\\n\\n### Notes\\n- Lists are sorted.\\n- Try doing this problem with O(n + m) time complexity.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(common_elements([-1, 3, 4, 6, 7, 9], [1, 3]), [3])\\nTest.assert_equals(common_elements([1, 3, 4, 6, 7, 9], [1, 2, 3, 4, 7, 10]), [1, 3, 4, 7])\\nTest.assert_equals(common_elements([-1, 3, 4, 6, 7, 9], []), [])\\nTest.assert_equals(common_elements([1, 2, 2, 2, 3, 4, 5], [1, 2, 4, 5]), [1, 2, 4, 5])\\nTest.assert_equals(common_elements([-1, 3, 4, 6, 7, 9], [100, 300, 900]), [])\\nTest.assert_equals(common_elements([18, 30, 60, 77, 89, 103, 107, 139, 149, 150, 201, 204, 233, 248, 250, 264, 273, 297, 308, 310, 319, 320, 348, 349, 353, 362, 365, 368, 376, 381, 395, 401, 405, 416, 421, 424, 434, 444, 452, 454, 464, 478, 497, 511, 513, 523, 533, 551, 562, 565, 593, 602, 604, 609, 610, 614, 620, 624, 643, 645, 654, 660, 674, 674, 685, 686, 700, 704, 712, 723, 728, 735, 741, 760, 765, 775, 776, 781, 787, 788, 791, 806, 823, 842, 848, 849, 901, 904, 909, 911, 916, 931, 932, 932, 940, 950, 951, 959, 973, 993], [3, 13, 25, 25, 27, 32, 39, 40, 45, 53, 55, 57, 60, 67, 78, 80, 81, 86, 114, 116, 125, 130, 146, 159, 164, 174, 192, 193, 209, 211, 265, 275, 279, 298, 303, 303, 314, 327, 330, 337, 355, 356, 375, 386, 405, 449, 452, 454, 457, 470, 476, 496, 499, 500, 501, 504, 516, 547, 577, 603, 604, 613, 618, 628, 638, 652, 659, 677, 683, 685, 700, 701, 710, 713, 727, 728, 734, 740, 774, 780, 790, 797, 833, 834, 837, 863, 869, 875, 885, 910, 911, 928, 930, 938, 943, 959, 964, 969, 987, 994]), [60, 405, 452, 454, 604, 685, 700, 728, 911, 959])\",\"language\":\"python3\",\"quality\":4.7560975609756095,\"summary\":\"Create a function that takes two lists of numbers sorted in ascending order and returns a list of numbers which are common to both the input lists.\\n\\nExamples\\ncommon_elements([-1, 3, 4, 6, 7, 9], [1, 3]) ➞ [3]\\n\\ncommon_elements([1, 3, 4, 6, 7, 9], [1, 2, 3, 4, 7, 10]) ➞ [1, 3, 4, 7]\\n\\ncommon_elements([1, 2, 2, 2, 3, 4, 5], [1, 2, 4, 5]) ➞ [1, 2, 4, 5]\\n\\ncommon_ele\",\"tags\":[\"loops\",\"arrays\",\"logic\",\"language_fundamentals\",\"data_structures\"],\"timestamp\":{\"$date\":1601973639414},\"title\":\"Finding Common Elements\",\"stats\":{\"completed\":{\"total\":252,\"ratings\":[2,2,2,2,2,2,1,3,0,2,1,1,1,2,2,2,2,0,2,2,2,1,3,1,0,2,2,2,2,1,2,2,3,2,0,1,0,2,0,1,0,2,2,0,0,2,0,0,1,0,1,2,1,2,2,2,5,2,0,0,0,2,1,1,1,1,0,2,1,2,1,1,2,2,1,1,2,2,2,2,2,2,0,1,1,1,2,2,2,1,2,2,2,2,2,2,2,2,1,0,1,1,1,2,2,2,2,2,2,2,2,0,1,2,0,1,2,1,2,2,2,2,2,2,1,2,2,1,1,1,2,2,2,2,0,1,1,0,2,0,0,1,1,1,1,1,0,1,1,1,1,0,1,2,1,1,2,2],\"quality\":[4,5,5,5,4,5,5,5,5,5,4,5,5,5,5,5,5,5,5,5,4,5,3,4,5,5,5,5,5,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,5,4,3,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,5,5],\"rators\":[\"xn7uGNKeAwPEkP9oA\",\"tAF9Gf6PiGogbZuWs\",\"xGNjMbycacdZAyRZY\",\"yjtdwc2AC4jA2RWtn\",\"Yp7uvStL97cC9fKkY\",\"8JyqsSbN2FJXPr3cw\",\"gb9rvGus2Jv7bjZSs\",\"s5M5RvgqR9BhB9JoC\",\"8PwfYqoDQFThzNtvf\",\"J3upzLHuEwXH7Z2hx\",\"oBcs8GLX2ZFLXQy8y\",\"KJCDwGkoXh8qtbbKr\",\"QRv96jmNaYsWkxQEG\",\"qD2LrwaDrSdiybLKY\",\"p8qqFdJ3FSk5x9z3G\",\"gXTAie79kiw28tx5u\",\"gJYuGdkXEWWmGRLzu\",\"aEm3Wvj2rFYRL8Lrb\",\"DPi9QGLctq2y76KuE\",\"HF28xZKSLM9wEuqNg\",\"w2HhxvSLmDhaGCAjE\",\"Wv2vJnEj8ywNmARoF\",\"dYPkStFnLvAMsHSzZ\",\"cR3ibTMxLyEdDFCHY\",\"FEYpu9RWysAgW3XnP\",\"iS5BrkGLzJyPK7nKt\",\"H4abACFDH5t8CnnyH\",\"9bQyb6rW7xfE4vgrR\",\"PXAcsKkssS2yLyDv2\",\"5XiuAqicKD4hBdu63\",\"DpnYcMphntjsQ96qg\",\"cAP3n5NY64uoMwzRR\",\"7D76ZPLjgjZideoy9\",\"RGMbFMZXJr7DhcAJy\",\"mDWNyaaQ9hvPCRzSd\",\"J4EmfiEjt34CSzAaC\",\"zd9FLSzsGz3evKafy\",\"dBzwBtRjZqB98DJeB\",\"AasGs8AeX9Lcb9xJn\",\"wbcvpbNDh2K5NzY5i\",\"cZccqzRQ9GgjQF6Az\",\"Jqk2uJZZxEv5wZFze\",\"5hQnRWiKkhgKJXNMP\",\"r579vsQvT57bCxrE5\",\"YRAzEBJoLvSaiPtYx\",\"d8qtzoLB264iP8tdY\",\"rfyEkETeoS96QNH4e\",\"HqmxnQJM66Y57twhn\",\"5HCu9Ydd86QgHDRNP\",\"5S9nX4rKsnCcnv4Cz\",\"eYfPWvZwnJQkHbSTK\",\"HuNF3xTBzmatyGSTm\",\"2QGRoQn2dRq3scu7k\",\"GGdmhAvxXhqhhibJN\",\"LWCzZ8mb8gwrRNGfq\",\"2fxapKr8XGdNeaKi2\",\"buX4mCQhtXCfBjeno\",\"PWgzeK859suojbrRx\",\"Ds7L5bksw2QRHjrKL\",\"wRttWTM59y8m5mx7x\",\"sHjfbGQGLHE6JR6qu\",\"srJ34BaybkQh3qRkM\",\"4RsakkyRXyYGwFxEa\",\"axdSNLZpiCDF8RS6n\",\"DEDniTrstQYGounXT\",\"CHvzhtXnv8HTbPQ56\",\"gSFJPsMXnqAog3Q9f\",\"LQxof8pGabGuWP7Gn\",\"N2wnZXkhDH86mgjQ8\",\"65T3fe9EZJbjmT8Cg\",\"BrTDhPJcACL2bsrpJ\",\"nc7bRhkxgKyqusYe3\",\"qAby4AWXmTNeusvg3\",\"wjc4iejpErBhxWwHo\",\"4qvddMimBZGpcc8dZ\",\"utTuvGdmu2sBHWBhQ\",\"uouMMdEWBuLBWPbzr\",\"8BFSTCnoe2QggN64c\",\"o4ixjQGSaYqA2JoM4\",\"iYXdNw7tKcgA3QwBX\",\"q6QsMYNMpPNtmyTeW\",\"xfTm8Pr8caH9892LL\",\"qQQ4hCQpzitmHSkjS\",\"J5T8gZqiZXFuFDTQ7\",\"KA2AXhiRvDYc8E8MP\",\"YcCLwitFMAEJSnxAW\",\"eMuCpJ2spXWkJjWNz\",\"T2vhHPhRR96hRizq8\",\"noQWXvRuTuY8ZYZiK\",\"JS3hNM3XXkxPdg3yk\",\"T6iBEE2jp7f7iEF2P\",\"mfsaETo7uA4x5vqLD\",\"iojEnnY9FsMfYzp6f\",\"3cF6NXq3ZEwdkgSjb\",\"pPpmP7xeJzGgK362R\",\"QhLggyYbLWddg5cPX\",\"XD5nmvKQchKezPXhy\",\"BJp2WkwLWGHHB5oQW\",\"ey3CASd6Je5LEJzfB\",\"i5iePG5GqhJJ8HEoB\",\"YA7SDhpgEtsqynvNL\",\"NzbRqGWspQnWMoDrF\",\"Fb2wehA7QgTFWry2x\",\"AFfw7cGg83uYk2Miy\",\"H9KZi2cjt4FwH7qog\",\"nFbmNzMQ38TncmfQX\",\"dJzNF59j2p8jWZxiQ\",\"Wpn95NqWxncQrwNgz\",\"66a9xX73nmTEuKs9k\",\"K6MfKMytoJJuSGewP\",\"GTKsdeEihE636Le9i\",\"PC3pLs36zNzpRDSuE\",\"DfHHpvnubuFmeNky9\",\"2HfNkb2SoqdyjKW3o\",\"jWbd7SYDzLPjc9EDh\",\"sKfrD9gjCDHuqLzSk\",\"sbJcFfQjQ59Wfg4Cd\",\"2PufnQcsHsfymufX3\",\"Cc2Cgj4MWXZxsTooC\",\"c2q7mY39z5JPEMCaM\",\"w5vXujNZhRSc2CoPu\",\"ghMkPtdFCpM6w8nax\",\"YmQb9Mo4Xcg2vzgbn\",\"Cuy7McJ5y8BkXRRk9\",\"X4rzfxGgxx6CS7Bpz\",\"RoGGD5cpHb4ftdLDv\",\"joxsWNqkSudzBYLpw\",\"yod5YhKtPqw2GfG9B\",\"CKHKhvJcq9jNMqrmd\",\"yr822PZmmiDDenxpB\",\"4Lwjr34ypKNQNQCar\",\"tdfY4iBvD7oh2ufnN\",\"XujK3rHd3JcM9TLJy\",\"mvJBakQ35CWAnbbEZ\",\"fAWEFyQMvK6Eqxq4t\",\"QFZcdxGKBaFZb7Zbk\",\"rgvAJFwfCeYoYnFTK\",\"utyt9o5BYPWRbXf2X\",\"ADycYubh8WTMCXhgR\",\"9Ly8afdtofp8DXzrt\",\"WQubx7DAkG6WZE8FA\",\"fSQSHjW3e72MrWxbD\",\"MKT7khMBGXzA22ykf\",\"jkys684AAfPRxrYaD\",\"GJmKcqu7xppQyBaTt\",\"YXQvrgeiGzLd6cTW9\",\"w3QDkmjZj2dAFDsjq\",\"R6YxHWAiLgKwy5YvC\",\"YmMgWhzhHhQLmGGgH\",\"MfKe55snfKsdnDejs\",\"Ju76wMJs7kL7o6Ybt\",\"rrSC943cCKNG48sH4\",\"a6fgDQTddtZCKfnzR\",\"nB6AP9nsuyRHcZGrt\",\"pduNK68oazqQTtbLp\",\"w67KfQgZ6WAeY7K4Y\",\"wwMcJQRvf3X59Jyev\",\"JiSpvq6C7azQEmENc\",\"JhX7jvtpwNyxcc39m\",\"qzXAMXsHZGT8o5hTA\",\"9pzFiFK3ANLjQfnr2\",\"fKzJMR2LLbiRtGetj\",\"4RY3zj9C2t8GGefhi\",\"AQSqD9oNv2uPfxZCR\",\"u5u2YpHXiNgzDNJdX\",\"a5niNs9bHP8865nDQ\",\"hR7GMiqGap4CzEWSy\",\"73tgmLvZ9fufNsQNm\",\"2iFe3EHEH2YdhSKrs\",\"2NDSt8HyP33cFRHsu\",\"fbyQH246PaDcXumC4\",\"9gJsF5apWJGWZJprn\",\"Afnps7TJQuS9sipMb\",\"KJfMhtt6grx5GH9h5\",\"4TmgHkn5vqyHK3sYC\",\"StNu7DPyTgEStZsMY\",\"PH32cNxBjrK4a28sn\",\"T6Rm8mREPMZSftzrC\",\"7txFzDQ43vJ7qCY88\",\"RqrB8eNZjZp4KjTzw\",\"5s4qhuRJijYaDNXva\",\"5Ti9ZK75zbT9PoQLZ\",\"6zBNLP7HDQzF4zXk8\",\"uGuS9YRXW2nj4p6zf\",\"d9LBRxvADNBB5QJMB\",\"LeC6LLPde9Wy5TtuS\",\"PeDy57T7TNNkdqP5M\",\"qaR8DnWrTk8Mus5Q2\",\"dzS6WBTMHyFEag6Fp\",\"suArq5BbSy7gD6xri\",\"qM4cFjDW9EBf6BNsA\",\"uK58g2EXxqxTaB2iA\",\"rhS8qXRjZcpDXkwnE\",\"hpT9yYe5R45poHrYR\",\"nMxZsNQ6btmmevxfj\",\"dYgxQgSzJNMnWzhhE\",\"AMpQSjKsRqhCDyS2j\",\"m2DoMHw5bQb52qF5Z\",\"vAh63eGRwkuJtoP8v\",\"yAouD3PxzED8a4gap\",\"uuFSJ8jpo29jBq9XJ\",\"mw9464S5dnenqzvpm\",\"M2gFMJkocQSY6bsFR\",\"cQJQXNGB9jgowjSb7\",\"wEiTMsLMc4MPEWGm3\",\"qB6KSTYC6H2TQEQY6\",\"trRQk8Smm8ofdbKko\",\"i5FZ3eRAetoAcNgw6\",\"mxX4rH5ELYkdZ2Mbw\",\"Qyfyyw6oC4EHAndzo\",\"rCrbqMiaGPgHYTNxu\",\"5QN8R22z43SrwoHDz\",\"dj5AyG5fWP8FdsSmZ\",\"RGN3QTb5LXj4ZPPkj\",\"Ncn7Qn2LbdsiJnfFk\",\"SBNdAEEGJSzSuqvqr\",\"syRNbbPdLCGXbH2Gy\",\"7DXJ3mvKMHHqBLt92\",\"eW9R2SCoYnY8HBAdL\",\"Wi4H6ayKsNDWWQCG5\",\"rDgKHd6ZSSpboiAj7\",\"vCeeMuYDbz3MB4vsk\",\"B4y8aoyXJtskYPFEL\",\"ruzwBPphPDRgLXdnP\",\"vAbK8sCfKyFC78HYg\",\"6NbisbXpjJDw9Spsh\",\"8uiLiJcmWxWe6qw65\",\"3w4GAEqkDeDBdgJ7B\",\"QWjsXnLaJ7xfL3Amq\",\"NHp9cXgWCyX6KqyMT\",\"RfbjShbg8jmhyNtJh\",\"wrL4iX2CCSqDCCty3\",\"E2hpke7mHxAWsw5t9\",\"naZ3i6sSDPwsieDH7\",\"PBuJo62j782fEoH4w\"]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"CPjyN2ZYndniTqB3C\",\"language\":\"cpp\"},{\"_id\":\"jtAvQyyDpFA2EaCcj\",\"language\":\"javascript\"},{\"_id\":\"E882au3CJba2jfQyT\",\"language\":\"python3\"},{\"_id\":\"Lnpr872YFYrQBNt8W\",\"language\":\"ruby\"}]}}"]