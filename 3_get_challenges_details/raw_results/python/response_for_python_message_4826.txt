a["{\"msg\":\"result\",\"id\":\"1129\",\"result\":{\"_id\":\"EjjBGn7hkmhgxqJej\",\"author\":\"zatoichi49\",\"authorId\":\"tAF9Gf6PiGogbZuWs\",\"code\":\"def word_nest(word, nest):\\n\\t\",\"difficulty\":1.5859375,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"JDqAqLLscgbApeAoC\",\"instructions\":\"A word nest is created by taking a starting word, and generating a new string by placing the word _inside_ itself. This process is then repeated.\\n\\nNesting 3 times with the word \\\"incredible\\\":\\n\\n```\\nstart  = incredible\\nfirst  = incre|incredible|dible\\nsecond = increin|incredible|credibledible\\nthird  = increinincr|incredible|ediblecredibledible\\n```\\n\\nThe final nest is `\\\"increinincrincredibleediblecredibledible\\\"` (depth = 3).\\n\\nGiven a _starting word_ and the _final word nest_, return the _depth_ of the word nest.\\n\\n### Examples\\n```\\nword_nest(\\\"floor\\\", \\\"floor\\\") ➞ 0\\n\\nword_nest(\\\"code\\\", \\\"cocodccococodededeodeede\\\") ➞ 5\\n\\nword_nest(\\\"incredible\\\", \\\"increinincrincredibleediblecredibledible\\\") ➞ 3\\n```\\n\\n### Notes\\nN/A\",\"lab\":\"Test.assert_equals(word_nest(\\\"engagement\\\", \\\"engenengagemengagemeengagementntentgagementagement\\\"), 4)\\nTest.assert_equals(word_nest(\\\"passage\\\", \\\"passpassageage\\\"), 1)\\nTest.assert_equals(word_nest(\\\"factory\\\", \\\"ffacfactofactfafactoryctoryoryrytoryactory\\\"), 5)\\nTest.assert_equals(word_nest(\\\"deny\\\", \\\"ddededdddenyenyenyenynynyeny\\\"), 6)\\nTest.assert_equals(word_nest(\\\"jinx\\\", \\\"jijijjijjijijjinxinxnxnxinxnxinxnxnx\\\"), 8)\\nTest.assert_equals(word_nest(\\\"deal\\\", \\\"dedddealealealal\\\"), 3)\\nTest.assert_equals(word_nest(\\\"paradox\\\", \\\"parparaparadoxdoxadox\\\"), 2)\\nTest.assert_equals(word_nest(\\\"meet\\\", \\\"mmememmeeteeteteteet\\\"), 4)\\nTest.assert_equals(word_nest(\\\"last\\\", \\\"lalastst\\\"), 1)\\nTest.assert_equals(word_nest(\\\"silence\\\", \\\"sisilsisilencelenceencelence\\\"), 3)\\nTest.assert_equals(word_nest(\\\"inflate\\\", \\\"inflate\\\"), 0)\\nTest.assert_equals(word_nest(\\\"ruin\\\", \\\"rurrurrrrrrururuinininuinuinuinuinuininuinin\\\"), 10)\\nTest.assert_equals(word_nest(\\\"episode\\\", \\\"episoepisepisepiepiepiepisoepisodedesodesodesodeodeodede\\\"), 7)\\nTest.assert_equals(word_nest(\\\"dictate\\\", \\\"dictadicdidictdiddictadictadictateteteictatectateatectatetatete\\\"), 8)\\nTest.assert_equals(word_nest(\\\"caller\\\", \\\"callcacacalccallcacaccallerallerllerllererallerlerllerllerer\\\"), 9)\\nTest.assert_equals(word_nest(\\\"sweater\\\", \\\"sweatsweswsweatereateraterer\\\"), 3)\\nTest.assert_equals(word_nest(\\\"measure\\\", \\\"measumememeasumemmeasmmeasureeasureureeasureasurereasureasurere\\\"), 8)\\nTest.assert_equals(word_nest(\\\"relieve\\\", \\\"relierelierelrelierrelieveelieveveieveveve\\\"), 5)\\nTest.assert_equals(word_nest(\\\"home\\\", \\\"hohohohhohohhhohhomeomemeomeomememeomemememe\\\"), 10)\\nTest.assert_equals(word_nest(\\\"profession\\\", \\\"profesprofessionsion\\\"), 1)\\nTest.assert_equals(word_nest(\\\"continuous\\\", \\\"contcontcontinuoconcocontinuousntinuoustinuoususinuousinuous\\\"), 5)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,1,3,1,1,2,0,2,1,2,1,2,1,1,2,2,2,2,0,2,1,2,2,1,5,2,2,0,2,2,0,3,2,2,3,2,1,1,4,2,1,2,1,0,2,2,2,2,2,1,2,2,2,2,2,2,0,2,2,1,1,2,2,1,2,1,2,0,1,2,2,2,1,0,2,0,2,2,2,2,2,0,1,0,1,2,2,1,2,2,0,3,0,0,1,0,2,1,5,1,2,2,1,1,1,3,0,1,4,0,2,1,2,3,3,0,1,2,2,2,1,2,1],\"rators\":[\"yZvzB3qFb8pkHy4dg\",\"tAF9Gf6PiGogbZuWs\",\"GAMLghpc9JMXz3jvs\",\"AF6LgdKhEdzwgRJom\",\"7g3vZaQXhLpxrajyg\",\"CKBHYxYu7mCqz9q6x\",\"4W4EnowDdLZxzjvhy\",\"TNQ7ixK78HHTLP7it\",\"8JyqsSbN2FJXPr3cw\",\"4kJMafuJWxzhDht2w\",\"gb9rvGus2Jv7bjZSs\",\"yrCNkFYQBEDE76eFS\",\"PSrcg6fy835R4c5CW\",\"XKi8iZXBCHCaebSHh\",\"uSh3aNxzD28jBuhxa\",\"WkWyq9wMkZhXB6zsD\",\"jYJ26SiLKBu5GRumq\",\"C9LKGu2g5hSijvDzA\",\"qvEvDcL32a5F4Tg6c\",\"kQH5b8MXJunh84Czq\",\"nfXGHENb5md7m355s\",\"sCnrfER8vCe4xhpB2\",\"Nj6FwgBtAXsaQwsM2\",\"JEAi9mG3vvBomJ3Yu\",\"gMJhLdyw3tH7L96X2\",\"498CxrZQdThLMa7ki\",\"SKabuq5XuhXBugKBa\",\"cR3ibTMxLyEdDFCHY\",\"HQxp7NcdvF92G7bYS\",\"3LiSLdtN58n46NEqg\",\"otXtuQygbcYATMZoP\",\"N2wnZXkhDH86mgjQ8\",\"HqmxnQJM66Y57twhn\",\"jeuoearPPTcGPgXhf\",\"2fxapKr8XGdNeaKi2\",\"K96FwtfDDN5WM4Bb7\",\"6KcnCdQ3zEnARWogF\",\"C4QntmkYtB89GNtpd\",\"9R9TjkN6eyP5vZgrt\",\"6ShafRStcvew4GfCh\",\"Jqk2uJZZxEv5wZFze\",\"PTcm3qFvxvLnaKttM\",\"u5u2YpHXiNgzDNJdX\",\"ab7BsQuhDo3QgE6bh\",\"4WgxcywfLRdxZ4gzP\",\"2innwjWqxJHo4eRGh\",\"BeFnbPbMnAM2SjBdZ\",\"p3dsCFdWGzWGhFrSQ\",\"5kc2gqHdyka73AyKj\",\"QnPD4Sv6W4LHc2Qng\",\"AasGs8AeX9Lcb9xJn\",\"PXAcsKkssS2yLyDv2\",\"4CFzv558qbGcpQwc4\",\"v3fjGuc7Pq4yjFygS\",\"w3A7cBWyAfukk6xEQ\",\"sJWTa7iWeRoRtqJ8N\",\"Z85ajWfZ4jDPkbvR4\",\"vLrq4dEDMM2wd68Dc\",\"dHZqT6h4JMwk5fPC8\",\"Yp7uvStL97cC9fKkY\",\"ZNnsMeNkdDhHjSrZb\",\"jNvegJWCk5HCtEMbK\",\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\",\"YPoXQyWruLC8KTKgp\",\"gJYuGdkXEWWmGRLzu\",\"DEDniTrstQYGounXT\",\"HF28xZKSLM9wEuqNg\",\"KdNDysEsy2TW5QRJ2\",\"hnyhBFWwNCz9mDfSi\",\"rgvAJFwfCeYoYnFTK\",\"uC5RJCMt3qBN3W84X\",\"9pzFiFK3ANLjQfnr2\",\"ahk2qiXKJA753wAJk\",\"9bQyb6rW7xfE4vgrR\",\"m6D2RuQJwrAK6WB3v\",\"H9KZi2cjt4FwH7qog\",\"Nb6LYPoQP6KJZt8mz\",\"NG8PWBSjsM8mMhQEq\",\"iojEnnY9FsMfYzp6f\",\"ZrKCkX7xxGGZzauFW\",\"yjtdwc2AC4jA2RWtn\",\"Pe8vWpDHRuH9nSGKW\",\"GaJNJwcdyB9ueYFst\",\"i5iePG5GqhJJ8HEoB\",\"eqYXKc8dh2yRNAyaA\",\"oBcs8GLX2ZFLXQy8y\",\"NNE5HNRXAkmhrWgyQ\",\"YcCLwitFMAEJSnxAW\",\"mG8HqKiAQFTdRZthG\",\"tpxMgkGSHwBjS95Ta\",\"s5M5RvgqR9BhB9JoC\",\"H4abACFDH5t8CnnyH\",\"qD2LrwaDrSdiybLKY\",\"gXTAie79kiw28tx5u\",\"DNACg4rcgZsPtYGZ8\",\"QRv96jmNaYsWkxQEG\",\"mxX4rH5ELYkdZ2Mbw\",\"p8qqFdJ3FSk5x9z3G\",\"KLmLKaJPfsYxp42p2\",\"FEYpu9RWysAgW3XnP\",\"mDWNyaaQ9hvPCRzSd\",\"DPi9QGLctq2y76KuE\",\"J3upzLHuEwXH7Z2hx\",\"dYPkStFnLvAMsHSzZ\",\"iS5BrkGLzJyPK7nKt\",\"YjPkyrF5D3ihxTjwk\",\"rfyEkETeoS96QNH4e\",\"5XiuAqicKD4hBdu63\",\"RGMbFMZXJr7DhcAJy\",\"KJCDwGkoXh8qtbbKr\",\"zd9FLSzsGz3evKafy\",\"dBzwBtRjZqB98DJeB\",\"d8qtzoLB264iP8tdY\",\"5HCu9Ydd86QgHDRNP\",\"J5T8gZqiZXFuFDTQ7\",\"5hQnRWiKkhgKJXNMP\",\"5S9nX4rKsnCcnv4Cz\",\"GGdmhAvxXhqhhibJN\",\"Wv2vJnEj8ywNmARoF\",\"Ds7L5bksw2QRHjrKL\",\"qAby4AWXmTNeusvg3\",\"Wpn95NqWxncQrwNgz\",\"o4ixjQGSaYqA2JoM4\",\"T6iBEE2jp7f7iEF2P\",\"srJ34BaybkQh3qRkM\",\"66a9xX73nmTEuKs9k\",\"eMuCpJ2spXWkJjWNz\",\"PC3pLs36zNzpRDSuE\",\"buX4mCQhtXCfBjeno\",\"yod5YhKtPqw2GfG9B\",\"eHcgvkTGsH7ZziqBo\",\"9Ly8afdtofp8DXzrt\",\"mvJBakQ35CWAnbbEZ\",\"8BFSTCnoe2QggN64c\",\"qzXAMXsHZGT8o5hTA\",\"BrTDhPJcACL2bsrpJ\",\"nkL2knkcNaiHCerW2\",\"sHjfbGQGLHE6JR6qu\",\"XwmunySaPs6HGKqnP\",\"yhEXw7srnzqThKFKw\",\"2psNKibRQYDnBBKwR\",\"BqSiwWjMWj4boLhkC\",\"RwCKTDzJ98fFr7K5H\",\"CHvzhtXnv8HTbPQ56\",\"dzS6WBTMHyFEag6Fp\",\"d9LBRxvADNBB5QJMB\",\"2PufnQcsHsfymufX3\",\"ey3CASd6Je5LEJzfB\",\"4Lwjr34ypKNQNQCar\",\"4TmgHkn5vqyHK3sYC\",\"Wi4H6ayKsNDWWQCG5\"],\"total\":158,\"quality\":[4,5,4,5,5,4,5,5,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,5,5,5,5]},\"flags\":0},\"subscribers\":[\"tAF9Gf6PiGogbZuWs\"],\"summary\":\"A word nest is created by taking a starting word, and generating a new string by placing the word inside itself. This process is then repeated.\\n\\nNesting 3 times with the word \\\"incredible\\\":\\n\\nstart  = incredible\\nfirst  = incre|incredible|dible\\nsecond = increin|incredible|credibledible\\nthird  = increinincr|incredible|ediblecredibledible\\n\\nThe final nest is \\\"increi\",\"tags\":[\"language_fundamentals\",\"strings\"],\"timestamp\":{\"$date\":1563034845777},\"title\":\"Word Nests\",\"isHidden\":false,\"quality\":4.758620689655173,\"family\":[{\"_id\":\"zuaN5v8CsiTEKhcju\",\"language\":\"cpp\"},{\"_id\":\"nXkhpafB9e5c7fNcg\",\"language\":\"java\"},{\"_id\":\"yDQnwtscs6sRi27we\",\"language\":\"javascript\"},{\"_id\":\"EjjBGn7hkmhgxqJej\",\"language\":\"python3\"},{\"_id\":\"2YqvgJv8dd2Ls6gHP\",\"language\":\"ruby\"}]}}"]