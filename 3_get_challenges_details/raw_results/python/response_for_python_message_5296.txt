a["{\"msg\":\"result\",\"id\":\"1362\",\"result\":{\"_id\":\"MSX7AHcNiCZpCsiXY\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def how_unlucky(y):\\n\\t\",\"difficulty\":2.02,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"8jx6pkJTLciA34tiq\",\"instructions\":\"Create a function which returns how many **Friday 13ths** there are in a given year.\\n\\n### Examples\\n```\\nhow_unlucky(2020) ➞ 2\\n\\nhow_unlucky(2026) ➞ 3\\n\\nhow_unlucky(2016) ➞ 1\\n```\\n\\n### Notes\\nCheck **Resources** for some helpful tutorials on the Python `datetime` module.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(how_unlucky(2000), 1)\\nTest.assert_equals(how_unlucky(2001), 2)\\nTest.assert_equals(how_unlucky(2002), 2)\\nTest.assert_equals(how_unlucky(2003), 1)\\nTest.assert_equals(how_unlucky(2004), 2)\\nTest.assert_equals(how_unlucky(2005), 1)\\nTest.assert_equals(how_unlucky(2006), 2)\\nTest.assert_equals(how_unlucky(2007), 2)\\nTest.assert_equals(how_unlucky(2008), 1)\\nTest.assert_equals(how_unlucky(2009), 3)\\nTest.assert_equals(how_unlucky(2010), 1)\\nTest.assert_equals(how_unlucky(2011), 1)\\nTest.assert_equals(how_unlucky(2012), 3)\\nTest.assert_equals(how_unlucky(2013), 2)\\nTest.assert_equals(how_unlucky(2014), 1)\\nTest.assert_equals(how_unlucky(2015), 3)\\nTest.assert_equals(how_unlucky(2016), 1)\\nTest.assert_equals(how_unlucky(2017), 2)\\nTest.assert_equals(how_unlucky(2018), 2)\\nTest.assert_equals(how_unlucky(2019), 2)\\nTest.assert_equals(how_unlucky(2020), 2)\\nTest.assert_equals(how_unlucky(2021), 1)\\nTest.assert_equals(how_unlucky(2022), 1)\\nTest.assert_equals(how_unlucky(2023), 2)\\nTest.assert_equals(how_unlucky(2024), 2)\\nTest.assert_equals(how_unlucky(2025), 1)\\nTest.assert_equals(how_unlucky(2026), 3)\\nTest.assert_equals(how_unlucky(2027), 1)\\nTest.assert_equals(how_unlucky(2028), 1)\\nTest.assert_equals(how_unlucky(2029), 2)\\nTest.assert_equals(how_unlucky(2030), 2)\\nTest.assert_equals(how_unlucky(2031), 1)\\nTest.assert_equals(how_unlucky(2032), 2)\\nTest.assert_equals(how_unlucky(2033), 1)\\nTest.assert_equals(how_unlucky(2034), 2)\\nTest.assert_equals(how_unlucky(2035), 2)\\nTest.assert_equals(how_unlucky(2036), 1)\\nTest.assert_equals(how_unlucky(2037), 3)\\nTest.assert_equals(how_unlucky(2038), 1)\\nTest.assert_equals(how_unlucky(2039), 1)\\nTest.assert_equals(how_unlucky(2040), 3)\\nTest.assert_equals(how_unlucky(2041), 2)\\nTest.assert_equals(how_unlucky(2042), 1)\\nTest.assert_equals(how_unlucky(2043), 3)\\nTest.assert_equals(how_unlucky(2044), 1)\\nTest.assert_equals(how_unlucky(2045), 2)\\nTest.assert_equals(how_unlucky(2046), 2)\\nTest.assert_equals(how_unlucky(2047), 2)\\nTest.assert_equals(how_unlucky(2048), 2)\\nTest.assert_equals(how_unlucky(2049), 1)\\nTest.assert_equals(how_unlucky(2050), 1)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,3,1,1,3,2,2,2,3,3,3,2,2,3,2,3,2,2,2,2,1,3,2,2,2,0,4,2,3,0,2,2,3,3,2,3,0,2,1,1,3,3,1,0,3,3,3,2,3,2,2,2,1,3,2,1,1,0,2,2,1,2,4,1,2,1,3,3,0,3,3,0,3,4,3,3,3,2,0,0,2,1,2,3,2,2,0,3,2,1,3,3,2,3,0],\"rators\":[\"PXAcsKkssS2yLyDv2\",\"tAF9Gf6PiGogbZuWs\",\"gb9rvGus2Jv7bjZSs\",\"C4QntmkYtB89GNtpd\",\"hS8WBiFoAjP5Js6Wv\",\"xJHw6qF7ZsMf6NWJv\",\"2fxapKr8XGdNeaKi2\",\"w3A7cBWyAfukk6xEQ\",\"euPBBaYXyS8RBr9KB\",\"8PwfYqoDQFThzNtvf\",\"PytNZK9mNiRiZxPrm\",\"8JyqsSbN2FJXPr3cw\",\"AasGs8AeX9Lcb9xJn\",\"8R3kEL4hagDQ5B5kn\",\"s5M5RvgqR9BhB9JoC\",\"mDWNyaaQ9hvPCRzSd\",\"aEm3Wvj2rFYRL8Lrb\",\"yZvzB3qFb8pkHy4dg\",\"FRrukAWvXvE56k4GS\",\"6c4xjEdFxdYw5xGrt\",\"ZNnsMeNkdDhHjSrZb\",\"kYWb8BwpKwunQkxeX\",\"FzxTj4GuujhwpZM7y\",\"YRstQuthRkFeBiXug\",\"Sj4iamMmNvxwWJBiF\",\"bCDTKAoS4biDmQ64Y\",\"gJYuGdkXEWWmGRLzu\",\"HF28xZKSLM9wEuqNg\",\"sz8ufn9i8zeiGWpAy\",\"v9KtC8YLbMWmXiW2H\",\"Yp7uvStL97cC9fKkY\",\"yr822PZmmiDDenxpB\",\"hnyhBFWwNCz9mDfSi\",\"DEDniTrstQYGounXT\",\"R4SjTgDnpigJYDLyL\",\"iojEnnY9FsMfYzp6f\",\"HqmxnQJM66Y57twhn\",\"zZDaXBxMzTCBhNkgL\",\"yjtdwc2AC4jA2RWtn\",\"kyEERyssssTQaZ4y5\",\"ZrKCkX7xxGGZzauFW\",\"MKT7khMBGXzA22ykf\",\"4fhjJBvLBWh6QeSih\",\"Ecg4m7srYGgZsb4Ck\",\"Kh3Pc2ZRusurLaMyP\",\"w2HhxvSLmDhaGCAjE\",\"iS5BrkGLzJyPK7nKt\",\"pmgFEciNrd3ES9tuu\",\"J5T8gZqiZXFuFDTQ7\",\"QRv96jmNaYsWkxQEG\",\"DPi9QGLctq2y76KuE\",\"dkcmCKwqApX5jBggc\",\"xn7uGNKeAwPEkP9oA\",\"b5p2BRxyHrrpGC5J3\",\"J3upzLHuEwXH7Z2hx\",\"6MjSiiBLPcvXbXcaZ\",\"LvLQNiWRhSzvMRQWm\",\"cjN86MMHPvsG3PvdW\",\"gXTAie79kiw28tx5u\",\"kAkLAF9T5McSxXJCT\",\"eyiKHvr67TfP3CH8w\",\"gSFJPsMXnqAog3Q9f\",\"sbKQ3pGDgv9BjxzDW\",\"oBcs8GLX2ZFLXQy8y\",\"fYKAHqcSbHi6QA27q\",\"StNu7DPyTgEStZsMY\",\"eoepTq5ES5tfgY9XT\",\"Jqk2uJZZxEv5wZFze\",\"rtk4EvSHdZAxp8BFR\",\"WbtvEnBewweLQfYmk\",\"uMxob526prFuTTNve\",\"aeRb8NuuqrfgG3iio\",\"ud4Kram2Nst3heXky\",\"ipZ44LskscAPKkZbQ\",\"wbrbxRHH2MXLNEXhv\",\"HYdgZMc8PMCYiWeWg\",\"ReJkqc43MY6pNcMDh\",\"winaFSNGA6hosaNA6\",\"iZmwyf9uWHuAo9uTW\",\"NzCdApxNegj4RarXe\",\"xP9nB4yw7tBw84My8\",\"HvSicYcezLB6aFwWu\",\"nXJw8zny9Hs9LqGtv\",\"xAdxvTex2CRDQN5vT\",\"GaPRoqjkFcogvErrw\",\"vJqinfp6DH8NxvdGm\",\"cAP3n5NY64uoMwzRR\",\"axJMjk7YuZkZM7mWK\",\"TJkmgPpdG93uf3kcB\",\"KTy2iqwjsH9PeErTB\",\"tc8BHcoyKwENoHWk6\",\"qkuvEvJycTXvF22cy\",\"YPSvhJeQmMZWr5no7\",\"Ei5T2sb5pZL4eauES\",\"eeEZDk7TE5mYu3mrB\",\"BEZSu9R94XFomASKM\",\"T2vhHPhRR96hRizq8\",\"GGdmhAvxXhqhhibJN\",\"2QziknsznNeMPRh3g\",\"n2BRY9X8899dcG8Bw\",\"NfMJuiBk6FN5Jc6ow\",\"fznzd3qnvtbFkkizz\",\"srJ34BaybkQh3qRkM\",\"3LiSLdtN58n46NEqg\",\"sbJcFfQjQ59Wfg4Cd\",\"LQxof8pGabGuWP7Gn\",\"yyo6YLQN2of6fxp49\",\"FEYpu9RWysAgW3XnP\",\"Wpn95NqWxncQrwNgz\",\"YcCLwitFMAEJSnxAW\",\"2PufnQcsHsfymufX3\",\"rfyEkETeoS96QNH4e\",\"8BFSTCnoe2QggN64c\",\"PC3pLs36zNzpRDSuE\",\"AFfw7cGg83uYk2Miy\",\"GTKsdeEihE636Le9i\",\"gKnWjDjwrJh7MK2df\",\"d8qtzoLB264iP8tdY\",\"4Lwjr34ypKNQNQCar\",\"8sNv5PTHa7XQ8bNqR\",\"qAby4AWXmTNeusvg3\",\"RoGGD5cpHb4ftdLDv\",\"yod5YhKtPqw2GfG9B\",\"3KkyQm77zsew58Dc2\",\"5HCu9Ydd86QgHDRNP\",\"Ds7L5bksw2QRHjrKL\",\"mvJBakQ35CWAnbbEZ\",\"BrTDhPJcACL2bsrpJ\",\"Qyfyyw6oC4EHAndzo\",\"jkbavR2ATFJcpmo8M\",\"tMmkfvW7fm429fpJP\",\"9pzFiFK3ANLjQfnr2\",\"CHvzhtXnv8HTbPQ56\"],\"total\":144,\"quality\":[5,5,5,5,3,5,5,5,5,5,4,5,5,5,5,5,5,5,4,5,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]},\"flags\":0},\"summary\":\"Create a function which returns how many Friday 13ths there are in a given year.\\n\\nExamples\\nhow_unlucky(2020) ➞ 2\\n\\nhow_unlucky(2026) ➞ 3\\n\\nhow_unlucky(2016) ➞ 1\\n\\nNotes\\nCheck Resources for some helpful tutorials on the Python datetime module.\",\"tags\":[\"dates\",\"language_fundamentals\"],\"timestamp\":{\"$date\":1584143839954},\"title\":\"Unlucky Years\",\"quality\":4.868421052631579,\"family\":[{\"_id\":\"JnbkJAxA3woPFHYMm\",\"language\":\"javascript\"},{\"_id\":\"MSX7AHcNiCZpCsiXY\",\"language\":\"python3\"},{\"_id\":\"QWsiPuk7AeFhEXMg6\",\"language\":\"ruby\"}]}}"]