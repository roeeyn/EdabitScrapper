a["{\"msg\":\"result\",\"id\":\"2264\",\"result\":{\"_id\":\"oFwoAA62gRvX5agEN\",\"archived\":false,\"author\":\"kochug\",\"authorId\":\"vQEmjTRgmdGNYB7yk\",\"code\":\"def knapsack(capacity, items):\\n\\t\",\"difficulty\":3.5384615384615383,\"familyId\":\"vWTgzGeTwk6fLE2KL\",\"instructions\":\"Given a knapsack with a certain weight capacity, fill it with loot from a list of items to achieve the highest value possible.\\n\\nThe function takes two parameters: an integer specifying the maximum weight the knapsack can hold, and a list of dictionary items to choose from. Each item has a name, a weight, and a value. The total weight of all chosen items cannot exceed the capacity of the knapsack.\\n\\nThe function should return a dictionary containing the capacity of the bag, a list of items that were added to the bag (in the same order that they were given), the total weight of those items, and the total value of the items.\\n\\n### Example\\n```\\nknapsack(0, items) âžž {\\n  \\\"capacity\\\": 0,\\n  \\\"items\\\": [],\\n  \\\"weight\\\": 0,\\n  \\\"value\\\": 0\\n}\\n  ```\\n  \\n  ### Notes\\n  N/A\",\"lab\":\"items = [\\n  {'name':\\\"desk lamp\\\",'weight':2,'value':12},\\n  {'name':\\\"beach towel\\\",'weight':1,'value':10},\\n  {'name':\\\"textbook\\\",'weight':3,'value':20},\\n  {'name':\\\"wall clock\\\",'weight':2,'value':15},\\n  {'name':\\\"frozen dinners\\\",'weight':10,'value':50},\\n  {'name':\\\"tablet\\\",'weight':7,'value':1400},\\n  {'name':\\\"smartphone\\\",'weight':1,'value':200},\\n  {'name':\\\"paper\\\",'weight':2,'value':5},\\n  {'name':\\\"laser printer\\\",'weight':25,'value':400},\\n  {'name':\\\"shoes\\\",'weight':1,'value':79},\\n  {'name':\\\"medicine\\\",'weight':1,'value':17},\\n  {'name':\\\"decorative cushion\\\",'weight':1,'value':11},\\n  {'name':\\\"gold necklace\\\",'weight':1,'value':2500},\\n  {'name':\\\"toaster oven\\\",'weight':5,'value':129}\\n]\\nTest.assert_equals(knapsack(0, items), {\\n  'capacity': 0,\\n  'items': [],\\n  'weight': 0,\\n  'value': 0\\n})\\nTest.assert_equals(knapsack(1, items), {\\n  'capacity': 1,\\n  'items': [\\n    {'name':\\\"gold necklace\\\",'weight':1,'value':2500}\\n  ],\\n  'weight': 1,\\n  'value': 2500\\n})\\nTest.assert_equals(knapsack(2, items), {\\n  'capacity': 2,\\n  'items': [\\n    {'name':\\\"smartphone\\\",'weight':1,'value':200},\\n    {'name':\\\"gold necklace\\\",'weight':1,'value':2500}\\n  ],\\n  'weight': 2,\\n  'value': 2700\\n})\\nTest.assert_equals(knapsack(5, items), {\\n  'capacity': 5,\\n  'items': [\\n    {'name':\\\"smartphone\\\",'weight':1,'value':200},\\n    {'name':\\\"shoes\\\",'weight':1,'value':79},\\n  \\t{'name':\\\"medicine\\\",'weight':1,'value':17},\\n  \\t{'name':\\\"decorative cushion\\\",'weight':1,'value':11},\\n    {'name':\\\"gold necklace\\\",'weight':1,'value':2500}\\n  ],\\n  'weight': 5,\\n  'value': 2807\\n})\\nTest.assert_equals(knapsack(14, items), {\\n  'capacity': 14,\\n  'items': [\\n    {'name':\\\"tablet\\\",'weight':7,'value':1400},\\n    {'name':\\\"smartphone\\\",'weight':1,'value':200},\\n    {'name':\\\"gold necklace\\\",'weight':1,'value':2500},\\n    {'name':\\\"toaster oven\\\",'weight':5,'value':129}\\n  ],\\n  'weight': 14,\\n  'value': 4229\\n})\\n\\nitems2 = [\\n  {'name':\\\"desk lamp\\\",'weight':2,'value':12},\\n  {'name':\\\"textbook\\\",'weight':3,'value':20},\\n  {'name':\\\"wall clock\\\",'weight':2,'value':15},\\n  {'name':\\\"frozen dinners\\\",'weight':10,'value':50},\\n  {'name':\\\"tablet\\\",'weight':7,'value':1400},\\n  {'name':\\\"smartphone\\\",'weight':1,'value':200},\\n  {'name':\\\"paper\\\",'weight':2,'value':5},\\n  {'name':\\\"laser printer\\\",'weight':25,'value':400},\\n  {'name':\\\"shoes\\\",'weight':1,'value':79},\\n  {'name':\\\"medicine\\\",'weight':1,'value':17},\\n  {'name':\\\"toaster oven\\\",'weight':5,'value':129}\\n]\\nTest.assert_equals(knapsack(31, items2), {\\n  'capacity': 31,\\n  'items': [\\n    {'name':\\\"textbook\\\",'weight':3,'value':20},\\n    {'name':\\\"wall clock\\\",'weight':2,'value':15},\\n    {'name':\\\"frozen dinners\\\",'weight':10,'value':50},\\n    {'name':\\\"tablet\\\",'weight':7,'value':1400},\\n    {'name':\\\"smartphone\\\",'weight':1,'value':200},\\n    {'name':\\\"shoes\\\",'weight':1,'value':79},\\n    {'name':\\\"medicine\\\",'weight':1,'value':17},\\n    {'name':\\\"toaster oven\\\",'weight':5,'value':129}\\n  ],\\n  'weight': 30,\\n  'value': 1910\\n})\\nTest.assert_equals(knapsack(36, items2), {\\n  'capacity': 36,\\n  'items': [\\n    {'name':\\\"tablet\\\",'weight':7,'value':1400},\\n    {'name':\\\"smartphone\\\",'weight':1,'value':200},\\n    {'name':\\\"laser printer\\\",'weight':25,'value':400},\\n    {'name':\\\"shoes\\\",'weight':1,'value':79},\\n    {'name':\\\"medicine\\\",'weight':1,'value':17}\\n  ],\\n  'weight': 35,\\n  'value': 2096\\n})\\nTest.assert_equals(knapsack(100, items2), {\\n  'capacity': 100,\\n  'items': [\\n    {'name':\\\"desk lamp\\\",'weight':2,'value':12},\\n    {'name':\\\"textbook\\\",'weight':3,'value':20},\\n    {'name':\\\"wall clock\\\",'weight':2,'value':15},\\n    {'name':\\\"frozen dinners\\\",'weight':10,'value':50},\\n    {'name':\\\"tablet\\\",'weight':7,'value':1400},\\n    {'name':\\\"smartphone\\\",'weight':1,'value':200},\\n    {'name':\\\"paper\\\",'weight':2,'value':5},\\n    {'name':\\\"laser printer\\\",'weight':25,'value':400},\\n    {'name':\\\"shoes\\\",'weight':1,'value':79},\\n    {'name':\\\"medicine\\\",'weight':1,'value':17},\\n    {'name':\\\"toaster oven\\\",'weight':5,'value':129}\\n  ],\\n  'weight': 59,\\n  'value': 2327\\n})\\n\\nitems3 = [\\n {'name':\\\"desk lamp\\\",'weight':1,'value':1000},\\n {'name':\\\"beach towel\\\",'weight':29,'value':900},\\n {'name':\\\"textbook\\\",'weight':1,'value':899},\\n {'name':\\\"wall clock\\\",'weight':1,'value':850},\\n]\\nTest.assert_equals(knapsack(30, items3), {\\n  'capacity': 30,\\n  'items': [\\n    {'name':'desk lamp', 'weight':1,'value':1000},\\n    {'name':'textbook', 'weight':1,'value':899},\\n    {'name':'wall clock', 'weight':1,'value':850}\\n  ],\\n  'weight': 3,\\n  'value': 2749\\n})\",\"language\":\"python3\",\"summary\":\"Given a knapsack with a certain weight capacity, fill it with loot from a list of items to achieve the highest value possible.\\n\\nThe function takes two parameters: an integer specifying the maximum weight the knapsack can hold, and a list of dictionary items to choose from. Each item has a name, a weight, and a value. The total weight of all chosen items cannot\",\"tags\":[\"algorithms\",\"recursion\",\"objects\"],\"timestamp\":{\"$date\":1524402598216},\"title\":\"A Knapsack\",\"stats\":{\"completed\":{\"total\":52,\"ratings\":[3,3,3,3,3,3,3,2,2,4,2,3,2,5,2,3,4,4,5,5,3,3,4,2,0,2,0,3,4,5,4,0,4,5,5,5,4,5,5,5,5,3,5,4,5,5,4,5,2,4,5,5],\"rators\":[\"vQEmjTRgmdGNYB7yk\",\"tuyDaJzFy78jxvhCY\",\"Lyh6nkCyy9X7rTZPi\",\"7eBXcYTe4qmGk7xRR\",\"tzHQmfmDbNJgqbeLx\",\"3mtD7DxrAgDMcxWKt\",\"6fJpRpAgiWD5zX9qB\",\"5JXnPbYC8RuBG6FkM\",\"5vc4HWsJDE9WrPiMs\",\"xZyBpCQZLegTRuvBM\",\"GRZzKCbeb4xKHFCrZ\",\"am2ko3izkKueqiXHe\",\"yHbFP267fGBkfDm4n\",\"jLwJD5muQdupRHviN\",\"cXe3JHgyZ8yZrYDix\",\"GauuSgvd7AAwXE5yM\",\"BKtfihRY8JSpH83kA\",\"vHwcu5tAgn54Zh4nq\",\"mmbsiZPMbsF9t48tH\",\"X289CatbRjtbje4ZZ\",\"T82JyZFPNz8maF8f8\",\"AYaEkTWLMmfzpwejr\",\"nS5Mo26E8XbAWuyuQ\",\"8JyqsSbN2FJXPr3cw\",\"tAF9Gf6PiGogbZuWs\",\"MXjxGML2X75x64vJo\",\"PcbSbkQX8hMxB8Leh\",\"JC9tDKS6PXCK2viN6\",\"HqmxnQJM66Y57twhn\",\"PytNZK9mNiRiZxPrm\",\"bLpgu8xTdpDPFSAsM\",\"8PwfYqoDQFThzNtvf\",\"SGhPxX5bHGL8zZqtt\",\"s5M5RvgqR9BhB9JoC\",\"eHcgvkTGsH7ZziqBo\",\"KrpdtCcwMJwpqBPp7\",\"SuJeLnhfR3smGu3WZ\",\"aEm3Wvj2rFYRL8Lrb\",\"DwetpbChQM4r6Gwah\",\"NCgqvvXaGksrMDiw7\",\"wT5gGgvjKc5wz59AQ\",\"b3yseG7yE4My44QtA\",\"fznzd3qnvtbFkkizz\",\"rXLCRKrADddSeR6G7\",\"3MybBtCNPcFHLMYmJ\",\"YLtspA8ec6ntcoMMf\",\"xn7uGNKeAwPEkP9oA\",\"iS5BrkGLzJyPK7nKt\",\"mDWNyaaQ9hvPCRzSd\",\"yjtdwc2AC4jA2RWtn\",\"gJYuGdkXEWWmGRLzu\"],\"quality\":[5,5,5]},\"complaints\":{\"total\":0,\"reasons\":[],\"skippers\":[\"vQEmjTRgmdGNYB7yk\"]},\"instructions\":{\"score\":-3.9499999999999997,\"voters\":[\"KHLJJM4grqF6xmo5t\",\"Zma8ro642NQC4jZr9\",\"diPcF5ZoRknShPf6A\",\"jLwJD5muQdupRHviN\",\"fqcrn5MA9Yssmxiaj\",\"LF7rbv4xECxGiQaTA\",\"a9CKSzdeeoMCeSTcK\",\"5JFQgt6KFihmXfHKm\",\"yEo9a3rAhSRpycs2d\",\"yQLFbFdmKwdLC79bF\"]},\"tests\":{\"score\":-10.05,\"voters\":[\"axnLNbddHAGKR8dtF\",\"3neNxwsu4hBCJygxk\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":5,\"family\":[{\"_id\":\"uqwmC7RJF98xr3TiD\",\"language\":\"javascript\"},{\"_id\":\"oFwoAA62gRvX5agEN\",\"language\":\"python3\"}]}}"]