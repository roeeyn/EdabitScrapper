a["{\"msg\":\"result\",\"id\":\"912\",\"result\":{\"_id\":\"xCXdch4XLpXZZagxm\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def num_of_leapyears(years):\\n\\t\",\"difficulty\":1.4541484716157205,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"BJXFHNREMbJ4EskyC\",\"instructions\":\"Given a range of years as a string, return the **number of leap years** there are within the range (inclusive).\\n\\n### Examples\\n```\\nnum_of_leapyears(\\\"1980-1984\\\") ➞ 2\\n# 1980 and 1984 are leapyears.\\n\\nnum_of_leapyears(\\\"2000-2020\\\") ➞ 6\\n\\nnum_of_leapyears(\\\"1600-2000\\\") ➞ 98\\n```\\n\\n### Notes\\n- Remember that a *hyphen* separates the years.\\n- Check the **Resources** tab for help on checking whether a year is a leap year.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(num_of_leapyears(\\\"2000-2020\\\"), 6)\\nTest.assert_equals(num_of_leapyears(\\\"1600-2000\\\"), 98)\\nTest.assert_equals(num_of_leapyears(\\\"1980-1984\\\"), 2)\\nTest.assert_equals(num_of_leapyears(\\\"1224-8090\\\"), 1666)\\nTest.assert_equals(num_of_leapyears(\\\"2486-7607\\\"), 1241)\\nTest.assert_equals(num_of_leapyears(\\\"1813-4354\\\"), 616)\\nTest.assert_equals(num_of_leapyears(\\\"772-1849\\\"), 262)\\nTest.assert_equals(num_of_leapyears(\\\"2228-7099\\\"), 1182)\\nTest.assert_equals(num_of_leapyears(\\\"1349-6325\\\"), 1206)\\nTest.assert_equals(num_of_leapyears(\\\"1803-3828\\\"), 492)\\nTest.assert_equals(num_of_leapyears(\\\"295-6278\\\"), 1451)\\nTest.assert_equals(num_of_leapyears(\\\"107-1821\\\"), 416)\\nTest.assert_equals(num_of_leapyears(\\\"2912-6566\\\"), 887)\\nTest.assert_equals(num_of_leapyears(\\\"1006-5181\\\"), 1013)\\nTest.assert_equals(num_of_leapyears(\\\"2876-9210\\\"), 1536)\\nTest.assert_equals(num_of_leapyears(\\\"1189-5481\\\"), 1041)\\nTest.assert_equals(num_of_leapyears(\\\"1325-1409\\\"), 20)\\nTest.assert_equals(num_of_leapyears(\\\"2665-3338\\\"), 163)\\nTest.assert_equals(num_of_leapyears(\\\"1886-3577\\\"), 410)\\nTest.assert_equals(num_of_leapyears(\\\"2951-4523\\\"), 381)\\nTest.assert_equals(num_of_leapyears(\\\"2651-7572\\\"), 1194)\\nTest.assert_equals(num_of_leapyears(\\\"2036-3126\\\"), 264)\\nTest.assert_equals(num_of_leapyears(\\\"1602-6986\\\"), 1306)\\nTest.assert_equals(num_of_leapyears(\\\"35-602\\\"), 137)\\nTest.assert_equals(num_of_leapyears(\\\"38-1709\\\"), 405)\\nTest.assert_equals(num_of_leapyears(\\\"801-2232\\\"), 347)\\nTest.assert_equals(num_of_leapyears(\\\"1285-5033\\\"), 908)\\nTest.assert_equals(num_of_leapyears(\\\"1265-7254\\\"), 1452)\\nTest.assert_equals(num_of_leapyears(\\\"1716-4551\\\"), 688)\\nTest.assert_equals(num_of_leapyears(\\\"2630-7508\\\"), 1183)\\nTest.assert_equals(num_of_leapyears(\\\"385-7421\\\"), 1706)\\nTest.assert_equals(num_of_leapyears(\\\"1127-5813\\\"), 1137)\\nTest.assert_equals(num_of_leapyears(\\\"1154-6034\\\"), 1184)\\nTest.assert_equals(num_of_leapyears(\\\"1378-8971\\\"), 1841)\\nTest.assert_equals(num_of_leapyears(\\\"925-8529\\\"), 1844)\\nTest.assert_equals(num_of_leapyears(\\\"1399-9450\\\"), 1952)\\nTest.assert_equals(num_of_leapyears(\\\"2031-7773\\\"), 1393)\\nTest.assert_equals(num_of_leapyears(\\\"1790-7283\\\"), 1332)\\nTest.assert_equals(num_of_leapyears(\\\"2642-5884\\\"), 787)\\nTest.assert_equals(num_of_leapyears(\\\"1084-4877\\\"), 921)\\nTest.assert_equals(num_of_leapyears(\\\"2934-6071\\\"), 761)\\nTest.assert_equals(num_of_leapyears(\\\"2074-8842\\\"), 1641)\\nTest.assert_equals(num_of_leapyears(\\\"2609-9866\\\"), 1760)\\nTest.assert_equals(num_of_leapyears(\\\"647-6876\\\"), 1512)\\nTest.assert_equals(num_of_leapyears(\\\"478-9783\\\"), 2256)\\nTest.assert_equals(num_of_leapyears(\\\"1561-3415\\\"), 449)\\nTest.assert_equals(num_of_leapyears(\\\"2535-4282\\\"), 424)\\nTest.assert_equals(num_of_leapyears(\\\"2920-6439\\\"), 854)\\nTest.assert_equals(num_of_leapyears(\\\"1601-9234\\\"), 1851)\\nTest.assert_equals(num_of_leapyears(\\\"728-6018\\\"), 1284)\\nTest.assert_equals(num_of_leapyears(\\\"1664-8395\\\"), 1632)\\nTest.assert_equals(num_of_leapyears(\\\"2489-3010\\\"), 125)\\nTest.assert_equals(num_of_leapyears(\\\"2768-9052\\\"), 1525)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[1,1,1,1,1,1,0,3,2,1,2,0,2,1,1,1,2,0,2,1,1,2,2,2,2,2,3,5,2,2,1,1,1,2,2,2,2,2,0,1,2,0,0,2,2,2,0,0,2,1,1,1,2,1,2,2,1,2,2,2,2,0,1,2,2,1,1,1,2,1,1,2,1,2,1,3,1,2,2,1,2,2,2,2,2,0,2,1,1,1,2,2,0,0,1,2,1,1,2,2,0,1,1,2,2,0,2,2,1,3,2,0,2,2,2,2,2,2,1,1,2,2,2,0,2,0,1,2,1,3,2,2,0,2,0,2,2,1,2,1,2,2,1,0,1,3,2,3,2,0,2,0,2,0,0,2,2,0,1,0,0,2,0,2,2,2,0,2,2,2,0,1,3,1,1,2,0,2,2,2,0,3,1,2,2,2,2,3,2,0,2,1,2,1,1,1,2,2,2,2,1,1,1,2,1,2,2,2,2,1,3,2,0,2,2,2,2,1,2,1,1,1,1,1,0,2,1,2,2],\"rators\":[\"PXAcsKkssS2yLyDv2\",\"9g8wqCR9BWvk7PLaE\",\"C4QntmkYtB89GNtpd\",\"Cc2Cgj4MWXZxsTooC\",\"yZvzB3qFb8pkHy4dg\",\"jPMtyoz3dr7g7ZZEG\",\"6abffx8jQDCf7kgvb\",\"9Ly8afdtofp8DXzrt\",\"AasGs8AeX9Lcb9xJn\",\"v3fjGuc7Pq4yjFygS\",\"u5u2YpHXiNgzDNJdX\",\"Phd2FdPjo9BhBfvKh\",\"ovqQRfyvmEDypjrnC\",\"WtFQigNmNZ5EREPzo\",\"jgMfqLFrBvfHxYLuu\",\"hQJZAKtGhbvtiHRn8\",\"w3A7cBWyAfukk6xEQ\",\"RZwfR4TR6fopHpdCD\",\"4y2bxsHwifCdZXAQA\",\"tAF9Gf6PiGogbZuWs\",\"Zhp5DNAzeuu2TLfK7\",\"Wv5c7WsK6R8yb4mTt\",\"J5T8gZqiZXFuFDTQ7\",\"2fxapKr8XGdNeaKi2\",\"4CFzv558qbGcpQwc4\",\"gb9rvGus2Jv7bjZSs\",\"s5M5RvgqR9BhB9JoC\",\"jeuoearPPTcGPgXhf\",\"FFuqean6eF4QQr3XH\",\"hnyhBFWwNCz9mDfSi\",\"8JyqsSbN2FJXPr3cw\",\"nc7bRhkxgKyqusYe3\",\"N2wnZXkhDH86mgjQ8\",\"mxX4rH5ELYkdZ2Mbw\",\"cR3ibTMxLyEdDFCHY\",\"C9LKGu2g5hSijvDzA\",\"dHZqT6h4JMwk5fPC8\",\"aRqQ42J5zqCmBNd8w\",\"sz8ufn9i8zeiGWpAy\",\"vLrq4dEDMM2wd68Dc\",\"uw8E83imJYpQiiPpP\",\"v9KtC8YLbMWmXiW2H\",\"2QGRoQn2dRq3scu7k\",\"8LfTheFzvicameoz9\",\"2iFe3EHEH2YdhSKrs\",\"Yp7uvStL97cC9fKkY\",\"4AoQy4B5fPs2KBinr\",\"8PwfYqoDQFThzNtvf\",\"jNvegJWCk5HCtEMbK\",\"gJYuGdkXEWWmGRLzu\",\"HF28xZKSLM9wEuqNg\",\"ZNnsMeNkdDhHjSrZb\",\"eLkj3Zb2DqiW4AEEh\",\"n2BRY9X8899dcG8Bw\",\"q5a96XumccZyhQNyL\",\"KRSKj7ikX2ytWFmod\",\"9uZpgAtSuPZ7W7DL6\",\"aEm3Wvj2rFYRL8Lrb\",\"5kEyLPjTLrt7z2YJZ\",\"xowjbn5yEv7c93axA\",\"Jqk2uJZZxEv5wZFze\",\"Ro3ppqamSxiJv2wxP\",\"kYWb8BwpKwunQkxeX\",\"DEDniTrstQYGounXT\",\"KdNDysEsy2TW5QRJ2\",\"M8dQuMrEpP8Hc3tHN\",\"9pzFiFK3ANLjQfnr2\",\"Fk9kLwoG4Brf4KsKf\",\"9bQyb6rW7xfE4vgrR\",\"6c4xjEdFxdYw5xGrt\",\"uiEuENARwFpnNMfFs\",\"sbJcFfQjQ59Wfg4Cd\",\"LWCzZ8mb8gwrRNGfq\",\"KkZNuFJFE2majZncQ\",\"4rwxLqLs2mNZNg8NB\",\"rgvAJFwfCeYoYnFTK\",\"Nua6T3dBurBy3Qfg9\",\"cba34id2k7F7xwymh\",\"FzxTj4GuujhwpZM7y\",\"MKT7khMBGXzA22ykf\",\"FRN2W8RYpJ6GPhgRy\",\"DwetpbChQM4r6Gwah\",\"nfXGHENb5md7m355s\",\"FEYpu9RWysAgW3XnP\",\"ugPF9GbKWthHhW8AQ\",\"eEK5MpDgtJyYtZzuM\",\"a777e8chPvJkY3tKa\",\"bCDTKAoS4biDmQ64Y\",\"ahk2qiXKJA753wAJk\",\"d6w7S49nhKzCTWLp6\",\"yr822PZmmiDDenxpB\",\"XrqNzJ2FRG8HnGiR6\",\"r7JXHsnJGCbRxYvDf\",\"So6PHm74mfJuY2WTs\",\"4yNLEwL2rsx4EE5Nt\",\"dKKMvaYoJunNPk5Wa\",\"NG8PWBSjsM8mMhQEq\",\"E8TMSMSamEbBtf9Lo\",\"ekQh3jzgGLsEMbKo3\",\"s9GzySPz9vpMNQ2vj\",\"yoLy2DcMG3nZXNwv2\",\"GM2X83qnuLXTHe5zA\",\"Ne8mK9DDHG8TRkoxG\",\"zAsNgFHdyiHeiHB8C\",\"H9KZi2cjt4FwH7qog\",\"2ptN2mhjFwFcHyPZd\",\"eMuCpJ2spXWkJjWNz\",\"3cF6NXq3ZEwdkgSjb\",\"axdSNLZpiCDF8RS6n\",\"H4abACFDH5t8CnnyH\",\"ZrKCkX7xxGGZzauFW\",\"Y5o8nC33YbaiWm9g7\",\"zd9FLSzsGz3evKafy\",\"syRNbbPdLCGXbH2Gy\",\"NNE5HNRXAkmhrWgyQ\",\"CwXsu25ygLEwQbmQC\",\"JS3hNM3XXkxPdg3yk\",\"iojEnnY9FsMfYzp6f\",\"PhceyfmFntJcn5Fhf\",\"Kv8GEg3aJZ9Cnxu6L\",\"Pe8vWpDHRuH9nSGKW\",\"6SKDJwXpev4qPSzgM\",\"GGprTwrkjuccmrQRg\",\"yNjkHfHESBAnCssPB\",\"iS5BrkGLzJyPK7nKt\",\"R4SjTgDnpigJYDLyL\",\"RnCue6232fMBH22h4\",\"yjtdwc2AC4jA2RWtn\",\"oBcs8GLX2ZFLXQy8y\",\"HqmxnQJM66Y57twhn\",\"ta5CrWnBCRusD2WMo\",\"3RtkXp7mC9JpxHHiR\",\"i5iePG5GqhJJ8HEoB\",\"8BFSTCnoe2QggN64c\",\"YA7SDhpgEtsqynvNL\",\"6gS4E2C84vBYTYeDZ\",\"tcn2oAsxPQDmCxGmg\",\"BqaW5TZKQa5zB9uAL\",\"u7i7WPM63n42r8R8o\",\"RehJGBFS6CYiWdjZx\",\"EMJ6uvBZkie429gdg\",\"Wv2vJnEj8ywNmARoF\",\"w2HhxvSLmDhaGCAjE\",\"TPhfpB5tzQWSSn67n\",\"hRiMXDZNAzyPd5tpt\",\"ji5f27FPz4wRRF6Ls\",\"p8qqFdJ3FSk5x9z3G\",\"KLmLKaJPfsYxp42p2\",\"4fhjJBvLBWh6QeSih\",\"9CoqdidjM9KbeKnHY\",\"k2Eo3wyfZZ6KxvKhN\",\"FvFhg2wELM3SCZDZQ\",\"qD2LrwaDrSdiybLKY\",\"3nied3n8KG8RSNixH\",\"3LiSLdtN58n46NEqg\",\"5HCu9Ydd86QgHDRNP\",\"tpxMgkGSHwBjS95Ta\",\"kNrnnMxhFZztMTBAX\",\"Kh3Pc2ZRusurLaMyP\",\"mG8HqKiAQFTdRZthG\",\"hkJGLuib5md8vZ9HD\",\"sHjfbGQGLHE6JR6qu\",\"gXTAie79kiw28tx5u\",\"YcCLwitFMAEJSnxAW\",\"8WpvgSbQciTQWdd8T\",\"6HgMANhu6WiGyXSGN\",\"oXdhczMThyirgM2eN\",\"QRv96jmNaYsWkxQEG\",\"dj5AyG5fWP8FdsSmZ\",\"NuqGt5u3s7vJ7HBGR\",\"DPi9QGLctq2y76KuE\",\"rrSC943cCKNG48sH4\",\"atR7uPt3durx85RSa\",\"zfGYZ7gpR8fxJpagh\",\"d8qtzoLB264iP8tdY\",\"J3upzLHuEwXH7Z2hx\",\"g9FyJ8yeT9ic97Qp2\",\"cAP3n5NY64uoMwzRR\",\"6MjSiiBLPcvXbXcaZ\",\"RGMbFMZXJr7DhcAJy\",\"dYPkStFnLvAMsHSzZ\",\"bccs9koJxyQ9XNiLC\",\"9F75P2ijSoCpSGNsX\",\"pJj86xc32Bs7Frxvi\",\"YRAzEBJoLvSaiPtYx\",\"4fjSgcqhQQZM2ZFRP\",\"5XiuAqicKD4hBdu63\",\"oyKcm3zqdy8Ko5P5d\",\"C2AfMipCicfD58WJ9\",\"DpnYcMphntjsQ96qg\",\"5hQnRWiKkhgKJXNMP\",\"HuNF3xTBzmatyGSTm\",\"pduNK68oazqQTtbLp\",\"o4ixjQGSaYqA2JoM4\",\"GT9wLv8Lipyp6YYTp\",\"AJexRBN9cYQmqvYu6\",\"sbKQ3pGDgv9BjxzDW\",\"wjc4iejpErBhxWwHo\",\"qZQxPQ2kaNKAMesHT\",\"WdKdsgH9gXkKgCycx\",\"Lg4t6SEWgtYz4u7Cj\",\"nJXgbSQozcoE8Wn4N\",\"ZyrfhDTZHb8LymH5b\",\"5S9nX4rKsnCcnv4Cz\",\"GGdmhAvxXhqhhibJN\",\"yh5MwZbc8z28fyeay\",\"B8n7KqbvEDjZzgj2D\",\"YPSvhJeQmMZWr5no7\",\"GqothajHR2vKfEHGZ\",\"srJ34BaybkQh3qRkM\",\"Ds7L5bksw2QRHjrKL\",\"yod5YhKtPqw2GfG9B\",\"jL4y5fTJAMBjhZmko\",\"eYfPWvZwnJQkHbSTK\",\"buX4mCQhtXCfBjeno\",\"CHvzhtXnv8HTbPQ56\",\"qQQ4hCQpzitmHSkjS\",\"q6QsMYNMpPNtmyTeW\",\"qAby4AWXmTNeusvg3\",\"9BmspneW8gB3rPbvH\",\"XD5nmvKQchKezPXhy\",\"AFfw7cGg83uYk2Miy\",\"66a9xX73nmTEuKs9k\",\"BrTDhPJcACL2bsrpJ\",\"aZCgNx7zoNiCQNuqf\",\"PC3pLs36zNzpRDSuE\",\"GTKsdeEihE636Le9i\",\"Wpn95NqWxncQrwNgz\",\"c2q7mY39z5JPEMCaM\",\"ctjFRwNSJcqBp3Myv\",\"mvJBakQ35CWAnbbEZ\",\"X4rzfxGgxx6CS7Bpz\",\"2PufnQcsHsfymufX3\",\"oF64n6EBzMLEMZEy6\",\"ghMkPtdFCpM6w8nax\",\"RoGGD5cpHb4ftdLDv\",\"R6YxHWAiLgKwy5YvC\",\"EfxwqhYdapX3dMQC2\",\"LQxof8pGabGuWP7Gn\",\"JiSpvq6C7azQEmENc\",\"hR7GMiqGap4CzEWSy\",\"4RY3zj9C2t8GGefhi\",\"Afnps7TJQuS9sipMb\",\"4TmgHkn5vqyHK3sYC\",\"BqSiwWjMWj4boLhkC\",\"T6Rm8mREPMZSftzrC\",\"uGuS9YRXW2nj4p6zf\",\"d9LBRxvADNBB5QJMB\",\"dzS6WBTMHyFEag6Fp\",\"yAouD3PxzED8a4gap\",\"AMpQSjKsRqhCDyS2j\",\"hpT9yYe5R45poHrYR\",\"ey3CASd6Je5LEJzfB\",\"xLydnSBdjRSsoiGSj\",\"Qyfyyw6oC4EHAndzo\",\"5QN8R22z43SrwoHDz\",\"rCrbqMiaGPgHYTNxu\",\"pPpmP7xeJzGgK362R\",\"Wi4H6ayKsNDWWQCG5\",\"4Lwjr34ypKNQNQCar\",\"ruzwBPphPDRgLXdnP\",\"vCeeMuYDbz3MB4vsk\",\"vAbK8sCfKyFC78HYg\",\"jWbd7SYDzLPjc9EDh\",\"8uiLiJcmWxWe6qw65\"],\"total\":293,\"quality\":[4,5,4,5,5,5,4,5,5,5,5,5,5,5,1,5,5,5,4,5,5,5,5,5,5,5,5,4,5,5,5,5,3,5,5,5,5,5,5,5,5]},\"flags\":0},\"summary\":\"Given a range of years as a string, return the number of leap years there are within the range (inclusive).\\n\\nExamples\\nnumofleapyears(\\\"1980-1984\\\") ➞ 2\\n1980 and 1984 are leapyears.\\n\\nnumofleapyears(\\\"2000-2020\\\") ➞ 6\\n\\nnumofleapyears(\\\"1600-2000\\\") ➞ 98\\n\\nNotes\\nRemember that a hyphen separates the years.\\nCheck the Resources tab for help on checking whether a year is a\",\"tags\":[\"numbers\",\"dates\",\"strings\"],\"timestamp\":{\"$date\":1582987983664},\"title\":\"Number of Leap Years\",\"quality\":4.7317073170731705,\"family\":[{\"_id\":\"vAEhKB2cD6Rp66sxn\",\"language\":\"cpp\"},{\"_id\":\"EzxPadgs3Y9hYWymS\",\"language\":\"javascript\"},{\"_id\":\"HLtWCXFaLtkeJ8knN\",\"language\":\"php\"},{\"_id\":\"xCXdch4XLpXZZagxm\",\"language\":\"python3\"},{\"_id\":\"trwxSe5TsE3Wq9AdA\",\"language\":\"ruby\"}]}}"]