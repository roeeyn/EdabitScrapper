a["{\"msg\":\"result\",\"id\":\"1710\",\"result\":{\"_id\":\"AGgQTPNy6G5cxz4KK\",\"author\":\"BijogFc24\",\"authorId\":\"Nb6LYPoQP6KJZt8mz\",\"code\":\"def binary_to_text(n):\\n\\t\",\"difficulty\":2.173469387755102,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"JdDnjwj6DzzKEn3y2\",\"instructions\":\"Create a function that takes a binary string and returns the text. The eight bits on the binary string represent 1 character on the ASCII table. For further info, check out the resource tab.\\n\\n### Examples\\n```\\nbinary_to_text(\\\"01101110011011110110010001100101\\\") ➞ \\\"node\\\"\\n\\nbinary_to_text('0111001001100101011000010110001101110100') ➞ \\\"react\\\"\\n\\nbinary_to_text(\\\"011100000111100101110100011010000110111101101110\\\") ➞ \\\"python\\\"\\n```\\n\\n### Notes\\nInputs are all valid strings.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(binary_to_text(\\\"01110100011110010111000001100101011100110110001101110010011010010111000001110100\\\"), \\\"typescript\\\")\\nTest.assert_equals(binary_to_text(\\\"01101110011011110110010001100101\\\"), \\\"node\\\")\\nTest.assert_equals(binary_to_text(\\\"0111001001100101011000010110001101110100\\\"), \\\"react\\\")\\nTest.assert_equals(binary_to_text(\\\"01101010011000010111011001100001\\\"), \\\"java\\\")\\nTest.assert_equals(binary_to_text(\\\"011010110110111101110100011011000110100101101110\\\"), \\\"kotlin\\\")\\nTest.assert_equals(binary_to_text(\\\"011100000111100101110100011010000110111101101110\\\"), \\\"python\\\")\\nTest.assert_equals(binary_to_text(\\\"01101000011000010111001101101011011001010110110001101100\\\"), \\\"haskell\\\")\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,3,0,4,4,1,3,5,2,2,2,3,3,4,4,2,2,1,0,3,2,4,3,4,2,4,0,2,2,4,3,2,2,4,2,0,2,3,3,3,4,1,1,2,3,2,4,4,3,1,3,3,3,4,1,0,2,1,2,0,1,2,4,3,2,1,0,0,1,3,1,3,3,1,3,2,2,3,0,2,0,3,2,2,0,0,0,0,2,3,2,2,1,1],\"rators\":[\"tAF9Gf6PiGogbZuWs\",\"Zhy5X7BZnqk8hacEw\",\"8PwfYqoDQFThzNtvf\",\"5dHucvf2qBYyKim7X\",\"aEm3Wvj2rFYRL8Lrb\",\"n2BRY9X8899dcG8Bw\",\"Nb6LYPoQP6KJZt8mz\",\"ZNnsMeNkdDhHjSrZb\",\"gb9rvGus2Jv7bjZSs\",\"AasGs8AeX9Lcb9xJn\",\"aCNWav8S8Try9RkC6\",\"YRstQuthRkFeBiXug\",\"So6PHm74mfJuY2WTs\",\"fznzd3qnvtbFkkizz\",\"s5M5RvgqR9BhB9JoC\",\"Nua6T3dBurBy3Qfg9\",\"55RQznnuTGpsj3EXd\",\"Ecg4m7srYGgZsb4Ck\",\"gJYuGdkXEWWmGRLzu\",\"RErqK2yM94wYyD2hk\",\"Phd2FdPjo9BhBfvKh\",\"2DJ5D6n2BLMGftHPb\",\"2innwjWqxJHo4eRGh\",\"KfXMEiCdZfCZGmjTt\",\"qS5Xbh5sBC28e6j7E\",\"W5TajitmCyxz87zAC\",\"8sNv5PTHa7XQ8bNqR\",\"bJxaKHJqR82EWw8Su\",\"ChwAsMu9QT5pxdy3j\",\"ZuTDmZ87nYbQjiNu4\",\"QkbpyExhGA8ErJWhk\",\"xdgy7nWSKCekXnaJM\",\"YNs8yXoMwZqRJuBg3\",\"8JyqsSbN2FJXPr3cw\",\"qPpQfR5KyDb5Y3EFf\",\"SGhPxX5bHGL8zZqtt\",\"ASsfbyG6AwkhqRZSB\",\"cnmj8mAbLcMnKaqLS\",\"foytX6kH9wiSYqLtT\",\"nLpdvK7EcahCqNe8X\",\"fD42arz6uZxQcrQjn\",\"QRRLM2KAunDa6grje\",\"jFcHRfu77aNu6YpZg\",\"Z4M3NAa4TXquMNkHe\",\"sbj4ByQEb9mHbySkK\",\"aiPq9uFZGF8FDEZz8\",\"eHhL37DG7oW3vTcg7\",\"iSY8Jq5PQ8wBiWpiw\",\"AtoBC3LqE89p3xhYC\",\"SDwCHzupNJpbQEe8E\",\"qTQGbqpJsx3SRcHZq\",\"TzfFXjsN3n6kkFZSY\",\"PtaiHYXnMwb2rWqQW\",\"xn7uGNKeAwPEkP9oA\",\"pWD2YC5s4YRCxFc2i\",\"Huf5LW9s4GmPj5TS6\",\"p9CduhpsfSoXJoErk\",\"K9P4HPXReTrHxHpMr\",\"kJMAAWPWEG6qFouEh\",\"5JFQgt6KFihmXfHKm\",\"8Z8dHvkfJbX737jji\",\"6gS4E2C84vBYTYeDZ\",\"yCJXa869YrEQKw6sj\",\"jL4y5fTJAMBjhZmko\",\"9CyzZC65NoyiHHxSm\",\"kSSie8vy6AXSYPbsa\",\"dynD89GCHoau9fvh7\",\"DY6edtmqmFq7GJTc8\",\"iojEnnY9FsMfYzp6f\",\"QRv96jmNaYsWkxQEG\",\"qPSEBYMMi9WJRr8SA\",\"KLmLKaJPfsYxp42p2\",\"QxNHN5DHfe97xarhE\",\"HF28xZKSLM9wEuqNg\",\"v9KtC8YLbMWmXiW2H\",\"PTcm3qFvxvLnaKttM\",\"w2HhxvSLmDhaGCAjE\",\"qD2LrwaDrSdiybLKY\",\"iS5BrkGLzJyPK7nKt\",\"3pxHTZBsv7MKzFG6Y\",\"Yp7uvStL97cC9fKkY\",\"J3upzLHuEwXH7Z2hx\",\"DPi9QGLctq2y76KuE\",\"StNu7DPyTgEStZsMY\",\"PytNZK9mNiRiZxPrm\",\"T2vhHPhRR96hRizq8\",\"gXTAie79kiw28tx5u\",\"Jqk2uJZZxEv5wZFze\",\"zgoEhAyhrjnsSLPGw\",\"g2mqHYvQmr78mET8i\",\"p8qqFdJ3FSk5x9z3G\",\"qAby4AWXmTNeusvg3\",\"fTNQmMvTZhhiGBCMe\",\"eHcgvkTGsH7ZziqBo\",\"Wpn95NqWxncQrwNgz\",\"oBcs8GLX2ZFLXQy8y\",\"HqmxnQJM66Y57twhn\",\"T6iBEE2jp7f7iEF2P\",\"GGdmhAvxXhqhhibJN\",\"gKnWjDjwrJh7MK2df\",\"yod5YhKtPqw2GfG9B\",\"buX4mCQhtXCfBjeno\",\"rhS8qXRjZcpDXkwnE\",\"2PufnQcsHsfymufX3\",\"9ivvGvJGvtQfigQaZ\",\"4Lwjr34ypKNQNQCar\"],\"total\":113,\"quality\":[4,5,5,5,5,5,3,5,5,5,5,5,5]},\"flags\":0},\"summary\":\"Create a function that takes a binary string and returns the text. The eight bits on the binary string represent 1 character on the ASCII table. For further info, check out the resource tab.\\n\\nExamples\\nbinarytotext(\\\"01101110011011110110010001100101\\\") ➞ \\\"node\\\"\\n\\nbinarytotext('0111001001100101011000010110001101110100') ➞ \\\"react\\\"\\n\\nbinarytotext(\\\"01110000011110010111\",\"tags\":[\"strings\",\"language_fundamentals\"],\"timestamp\":{\"$date\":1591527933854},\"title\":\"Binary To Text\",\"quality\":4.769230769230769,\"family\":[{\"_id\":\"pYgfrxqT9BjzcraFb\",\"language\":\"cpp\"},{\"_id\":\"qEAaAxNa9v2WZMrEv\",\"language\":\"javascript\"},{\"_id\":\"AGgQTPNy6G5cxz4KK\",\"language\":\"python3\"},{\"_id\":\"8cP2tBMsZ5oFyrJnF\",\"language\":\"ruby\"}]}}"]