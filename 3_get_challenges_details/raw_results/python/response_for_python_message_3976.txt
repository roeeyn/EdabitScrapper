a["{\"msg\":\"result\",\"id\":\"707\",\"result\":{\"_id\":\"EJ2RqF9AEmk64mLsv\",\"author\":\"Werdna\",\"authorId\":\"buX4mCQhtXCfBjeno\",\"code\":\"def lottery(ticket, win):\\n\\t\",\"difficulty\":1.1553398058252426,\"familyId\":\"na6swvkDYat3dxdwZ\",\"instructions\":\"Given a lottery ticket (`ticket`), represented by a list of 2-value lists, create a function to find out if you've won the jackpot.\\n\\nTo do this, you must first count the \\\"mini-wins\\\" on your `ticket`. Each sublist has both a string and a number within it. If the character code of any of the characters in the string matches the number, you get a mini-win. Note you can only have one mini-win per sublist.\\n\\nOnce you have counted all of your mini-wins, compare that number to the other input provided (`win`). If your number of mini-wins is more than or equal to `win`, return `Winner!`. Else, return `Loser!`.\\n\\n### Examples\\n```\\nlottery([[\\\"YYW\\\", 70], [\\\"WXK\\\", 65], [\\\"RPDI\\\", 88]], 2)\\n➞ \\\"Loser!\\\"\\n\\nlottery([[\\\"KG\\\", 80], [\\\"NTBBVZ\\\", 79], [\\\"CI\\\", 73], [\\\"AGXMEE\\\", 74], [\\\"IU\\\", 68], [\\\"VOSP\\\" , 84]], 1)\\n➞ \\\"Winner!\\\"\\n\\nlottery([[\\\"ZSAMZB\\\", 81], [\\\"XWWCXP\\\", 72], [\\\"SYBRQOHP\\\", 88], [\\\"HJSVV\\\", 75]], 1)\\n➞ \\\"Loser!\\\"\\n```\\n\\n### Notes\\n- All inputs will be in the correct format.\\n- Strings on `ticket` are not always the same length.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(lottery([['YYW', 70], ['WXK', 65], ['RPDI', 88]], 2), 'Loser!')\\nTest.assert_equals(lottery([['KG', 80], ['NTBBVZ', 79], ['CI', 73], ['AGXMEE', 74], ['IU', 68], ['VOSP' , 84]], 1), 'Winner!')\\nTest.assert_equals(lottery([['ZSAMZB', 81], ['XWWCXP', 72], ['SYBRQOHP', 88], ['HJSVV', 75]], 1), 'Loser!')\\nTest.assert_equals(lottery([['GM', 84], ['KLJ', 86], ['UOF', 77], ['JKC', 84], ['RUI', 72]], 3), 'Loser!')\\nTest.assert_equals(lottery([['CXFAFUOW', 90], ['VKKC', 74], ['OPYVAUR', 84], ['WTMRW', 79], ['ZIL', 84], ['TDQMZD', 74], ['MR', 66], ['IQ', 86], ['JTBX', 88], ['ZJKX', 77]], 4), 'Loser!')\\nTest.assert_equals(lottery([['SHUT', 85], ['DOWPKSLD', 80], ['QOOGBTDG', 85], ['EID', 68], ['EZKKAEYW', 81], ['OYQBJCJE', 86], ['WYTDAMFI', 87], ['CW', 89], ['BICKVN', 76], ['BQH', 79]], 3), 'Winner!')\\nTest.assert_equals(lottery([['GITVQFQ', 65], ['VCQ', 71], ['DLK', 70], ['HUVMWH', 80], ['PLUYERTX', 68], ['JVJSHC', 81], ['OUSXBLP', 77], ['IGNCP', 82], ['LV', 65]], 9), 'Loser!')\\nTest.assert_equals(lottery([['CKLD', 80], ['VDGDL', 78], ['LKAJBSPM', 74], ['CCPNIE', 67], ['GS', 77], ['QYWGWS', 83], ['XLJUE', 73], ['CMUCLWE', 70],['MHM', 90]], 8), 'Loser!')\\nTest.assert_equals(lottery([['TRJZKKCQ', 81], ['KYC', 80], ['WU', 66], ['MFTWCFZ', 83], ['TNIRSP', 72], ['VC', 86], ['AINOS', 87], ['RGROXMF', 86], ['URKVFY', 70]], 3), 'Winner!')\\nTest.assert_equals(lottery([['XONLHEB', 71], ['FXMR', 65],['WMGY' , 89]], 1), 'Winner!')\\nTest.assert_equals(lottery([[\\\"ZSAMQZB\\\", 81], [\\\"XWWHCXP\\\", 72], [\\\"SYBRQOHP\\\", 88], [\\\"HJSVV\\\", 75]], 1), 'Winner!')\",\"language\":\"python3\",\"quality\":4.62962962962963,\"summary\":\"Given a lottery ticket (ticket), represented by a list of 2-value lists, create a function to find out if you've won the jackpot.\\n\\nTo do this, you must first count the \\\"mini-wins\\\" on your ticket. Each sublist has both a string and a number within it. If the character code of any of the characters in the string matches the number, you get a mini-win. Note you c\",\"tags\":[\"language_fundamentals\",\"numbers\",\"strings\",\"arrays\"],\"timestamp\":{\"$date\":1615397910165},\"title\":\"Lottery Ticket\",\"stats\":{\"completed\":{\"total\":132,\"ratings\":[1,1,1,1,1,2,1,1,0,1,0,1,1,1,2,2,0,0,1,1,0,2,0,0,2,0,2,1,2,1,2,1,1,2,1,2,2,2,1,0,2,2,1,1,2,2,0,0,0,1,0,3,2,1,2,2,1,1,0,1,2,1,0,2,1,1,1,2,3,1,1,2,0,1,1,1,1,2,4,1,2,1,0,0,2,1,1,1,2,2,1,1,1,2,1,1,0,0,1,1,1,1,1],\"quality\":[4,5,5,5,4,5,5,5,5,4,4,5,4,4,5,5,3,5,3,5,5,5,5,5,5,5,5],\"rators\":[\"buX4mCQhtXCfBjeno\",\"XD5nmvKQchKezPXhy\",\"3cF6NXq3ZEwdkgSjb\",\"cAP3n5NY64uoMwzRR\",\"iS5BrkGLzJyPK7nKt\",\"c2q7mY39z5JPEMCaM\",\"QRv96jmNaYsWkxQEG\",\"DEDniTrstQYGounXT\",\"gb9rvGus2Jv7bjZSs\",\"matPCJmRAgn5zSfsb\",\"vmk5Jh6wwYdSeRBzM\",\"T6iBEE2jp7f7iEF2P\",\"iojEnnY9FsMfYzp6f\",\"HTuNN6xkRq5mwcKGL\",\"PXAcsKkssS2yLyDv2\",\"FEYpu9RWysAgW3XnP\",\"AFfw7cGg83uYk2Miy\",\"66a9xX73nmTEuKs9k\",\"cR3ibTMxLyEdDFCHY\",\"oBcs8GLX2ZFLXQy8y\",\"2QGRoQn2dRq3scu7k\",\"8pgbSXb2TNX5XMiFJ\",\"C7pmpmwz7wQ9Ja2PE\",\"QcSJ4DbuunzKwaAFZ\",\"JBsYZWY95q2mA8HAQ\",\"5s4qhuRJijYaDNXva\",\"3sGiT8qjdkzqinpde\",\"u5u2YpHXiNgzDNJdX\",\"5HCu9Ydd86QgHDRNP\",\"dJzNF59j2p8jWZxiQ\",\"PxcfrK3dHymZg6RNB\",\"Wpn95NqWxncQrwNgz\",\"RoGGD5cpHb4ftdLDv\",\"ZLFXbWKatzAEm3kwA\",\"2ZWkjRRjqvcRSMFJd\",\"8Nxzn7c3atvFDqgpF\",\"ApbsE5hcAsG35vWR5\",\"YmQb9Mo4Xcg2vzgbn\",\"uK4sTJCNkeGLbzPps\",\"s8Fy5Nyd5uty6c6m6\",\"JKbEBybAsiKrmcqof\",\"o4ixjQGSaYqA2JoM4\",\"BrTDhPJcACL2bsrpJ\",\"Ds7L5bksw2QRHjrKL\",\"sHjfbGQGLHE6JR6qu\",\"pH3ZQdWKWqJKqczyW\",\"p8qqFdJ3FSk5x9z3G\",\"zd9FLSzsGz3evKafy\",\"PC3pLs36zNzpRDSuE\",\"8JyqsSbN2FJXPr3cw\",\"KJCDwGkoXh8qtbbKr\",\"gJYuGdkXEWWmGRLzu\",\"srJ34BaybkQh3qRkM\",\"J5T8gZqiZXFuFDTQ7\",\"XrqNzJ2FRG8HnGiR6\",\"ghMkPtdFCpM6w8nax\",\"s5M5RvgqR9BhB9JoC\",\"CHvzhtXnv8HTbPQ56\",\"GGdmhAvxXhqhhibJN\",\"CKHKhvJcq9jNMqrmd\",\"yjtdwc2AC4jA2RWtn\",\"Yp7uvStL97cC9fKkY\",\"AJexRBN9cYQmqvYu6\",\"fTNQmMvTZhhiGBCMe\",\"eMuCpJ2spXWkJjWNz\",\"2EbDCCJJvCfKkbYia\",\"6rBGSokJhRBqqgGg3\",\"XHShZ3WMPgGEA2vkR\",\"zTtKiCbLWzaf2Yjo4\",\"Fk9kLwoG4Brf4KsKf\",\"N2wnZXkhDH86mgjQ8\",\"8uiLiJcmWxWe6qw65\",\"5XiuAqicKD4hBdu63\",\"tAF9Gf6PiGogbZuWs\",\"d8qtzoLB264iP8tdY\",\"pPpmP7xeJzGgK362R\",\"9Ly8afdtofp8DXzrt\",\"YRAzEBJoLvSaiPtYx\",\"AasGs8AeX9Lcb9xJn\",\"utTuvGdmu2sBHWBhQ\",\"EfxwqhYdapX3dMQC2\",\"rrSC943cCKNG48sH4\",\"4TmgHkn5vqyHK3sYC\",\"J3upzLHuEwXH7Z2hx\",\"HqmxnQJM66Y57twhn\",\"9pzFiFK3ANLjQfnr2\",\"jkbavR2ATFJcpmo8M\",\"FxbTzThBiTnRzfirA\",\"8BFSTCnoe2QggN64c\",\"jNE5AHcJQWXz7efuP\",\"w2HhxvSLmDhaGCAjE\",\"Afnps7TJQuS9sipMb\",\"aEm3Wvj2rFYRL8Lrb\",\"DPi9QGLctq2y76KuE\",\"gKnWjDjwrJh7MK2df\",\"YA7SDhpgEtsqynvNL\",\"9bQyb6rW7xfE4vgrR\",\"eW9R2SCoYnY8HBAdL\",\"Jqk2uJZZxEv5wZFze\",\"MKT7khMBGXzA22ykf\",\"Lm6ChQCWBmaikmk5J\",\"jBo3xAopr37GFzY8g\",\"9LrF5o2TK2iE8BZJh\",\"d9LBRxvADNBB5QJMB\",\"qAby4AWXmTNeusvg3\",\"dzS6WBTMHyFEag6Fp\",\"gXTAie79kiw28tx5u\",\"8PwfYqoDQFThzNtvf\",\"mxX4rH5ELYkdZ2Mbw\",\"B4y8aoyXJtskYPFEL\",\"TCvpT4EPb8qNssNB7\",\"2E6jQWFmYiGsd3TrC\",\"wjc4iejpErBhxWwHo\",\"yAouD3PxzED8a4gap\",\"qB6KSTYC6H2TQEQY6\",\"mw9464S5dnenqzvpm\",\"5QN8R22z43SrwoHDz\",\"FT2wBacm3JxrYmZDW\",\"Wi4H6ayKsNDWWQCG5\",\"2MjzJ7yxh3eT3xbng\",\"gbGzZz5Yq5hT357v8\",\"GgQqni8TkbqEBGcsy\",\"FiaTpm7ehfDv43wSG\",\"sMcFMPkMJC4Kh6ymj\",\"rraTtctZqnjXu2L2x\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"jxxWvhfiv67P2zbTa\",\"language\":\"javascript\"},{\"_id\":\"y3Ce5XKGS78vR3fac\",\"language\":\"php\"},{\"_id\":\"EJ2RqF9AEmk64mLsv\",\"language\":\"python3\"},{\"_id\":\"9pkhp4MCrNZbDX22M\",\"language\":\"ruby\"}]}}"]