a["{\"msg\":\"result\",\"id\":\"2404\",\"result\":{\"_id\":\"F3QP7JBD5aCrFD8aj\",\"author\":\"MyName\",\"authorId\":\"P7NmFbCJ5offXMRvB\",\"code\":\"def party_people(lst):\\n\\t\",\"difficulty\":4.055555555555555,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"JCw7imMcMwAKwzsBa\",\"instructions\":\"Ava, Mark, Sheila, and Pete are at a party. However, Ava and Sheila are only staying if there are at least 4 people, Pete is only staying if there's 1 person, and Mark is only staying if there are at least 5 people. Therefore, Mark leaves, which makes Ava and Sheila leave, and Pete is left alone.\\n\\nGiven a list with the preferences of every person at a party for the minimum number of people present, determine how many people will stay.\\n\\nThis challenge can be solved recursively, but recursion in Python can become quite resource-intensive. This challenge will include long lists, so you need to make your function efficient.\\n\\n### Examples\\n```\\nparty_people([4, 5, 4, 1]) ➞ 1\\n# Ava's minimum number is 4, Mark's is 5, Sheila's is 4, and Pete's is 1. \\n# Only 1 person (Pete) stays.\\n\\nparty_people([10, 12, 15, 15, 5]) ➞ 0\\n\\nparty_people([2, 1, 2, 0]) ➞ 4\\n```\\n\\n### Notes\\n- All attendees are included in the list.\\n- Any person's count includes themself.\\n- Expect valid input only.\\n- For the recursive version of this challenge, check out [Part I](https://edabit.com/challenge/EuHGfJfCeLyx9BEdG).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"# Large size list\\nfrom random import randint, shuffle\\nsol = randint(400000, 500000)\\nlarge_list = [randint(0, 400000) for i in range(sol)] + [randint(sol + randint(i, i + 10), sol + randint(i + 10, i + 10000)) for i in range(500000)]\\nshuffle(large_list)\\n\\nprint('List size:', str(len(large_list)))\\nTest.assert_equals(party_people(large_list), sol)\\n\\nTest.assert_equals(party_people([4, 5, 4, 1]), 1)\\nTest.assert_equals(party_people([10, 12, 15, 15, 5]), 0)\\nTest.assert_equals(party_people([2, 1, 2, 0]), 4)\\nTest.assert_equals(party_people([0, 0, 0, 0]), 4)\\nTest.assert_equals(party_people([5, 5, 5, 5]), 0)\\nTest.assert_equals(party_people([5, 5, 5, 5, 5]), 5)\\nTest.assert_equals(party_people([1, 5, 3, 5, 0]), 5)\\nTest.assert_equals(party_people([13, 8, 11, 15, 13, 3, 12, 13, 6, 3]), 0)\\nTest.assert_equals(party_people([11, 3, 4, 3, 11, 4, 0, 1, 1, 3]), 8)\\nTest.assert_equals(party_people([15, 3, 8, 0, 2, 12, 13, 7, 6]), 3)\\nTest.assert_equals(party_people([3, 11, 15, 5, 3, 4, 10, 8, 14, 6, 13, 1]), 6)\\nTest.assert_equals(party_people([7, 14, 14, 0, 7, 3, 2, 2]), 4)\\nTest.assert_equals(party_people([2, 6, 7, 4, 6, 10, 4, 3, 6, 2, 0]), 11)\",\"language\":\"python3\",\"quality\":0,\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,5,4,4,5,5,4,5,1,1,5,1,4,4],\"quality\":[],\"rators\":[\"8PwfYqoDQFThzNtvf\",\"p8qqFdJ3FSk5x9z3G\",\"eHcgvkTGsH7ZziqBo\",\"s5M5RvgqR9BhB9JoC\",\"J3upzLHuEwXH7Z2hx\",\"gJYuGdkXEWWmGRLzu\",\"iS5BrkGLzJyPK7nKt\",\"yjtdwc2AC4jA2RWtn\",\"8sNv5PTHa7XQ8bNqR\",\"fznzd3qnvtbFkkizz\",\"aEm3Wvj2rFYRL8Lrb\",\"tAF9Gf6PiGogbZuWs\",\"iqmPb9JuJDgTFeR8Q\"],\"total\":14},\"flags\":0},\"summary\":\"Ava, Mark, Sheila, and Pete are at a party. However, Ava and Sheila are only staying if there are at least 4 people, Pete is only staying if there's 1 person, and Mark is only staying if there are at least 5 people. Therefore, Mark leaves, which makes Ava and Sheila leave, and Pete is left alone.\\n\\nGiven a list with the preferences of every person at a party fo\",\"tags\":[\"algorithms\",\"loops\",\"numbers\"],\"timestamp\":{\"$date\":1611743314726},\"title\":\"Party People Part II: Make it Efficient\",\"family\":[{\"_id\":\"5RuQJZjTrZmyn6LdB\",\"language\":\"cpp\"},{\"_id\":\"3dGuc8sPZWEbYQnw6\",\"language\":\"javascript\"},{\"_id\":\"F3QP7JBD5aCrFD8aj\",\"language\":\"python3\"},{\"_id\":\"RqSN8s3Svf3JHmqBu\",\"language\":\"ruby\"}]}}"]