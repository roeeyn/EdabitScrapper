a["{\"msg\":\"result\",\"id\":\"2276\",\"result\":{\"_id\":\"MWAvDdT7rJczZuPMj\",\"author\":\"joegal\",\"authorId\":\"fznzd3qnvtbFkkizz\",\"code\":\"def count_word(grid, word):\\n\\t\",\"difficulty\":3.5714285714285716,\"editorId\":\"fznzd3qnvtbFkkizz\",\"familyId\":\"vtj4ZwDM4ESaiSTaL\",\"instructions\":\"You are presented with a rectangular grid of capital letters. Within this grid a target word occurs a number of times. The word may be positioned horizontally left to right, right to left; vertically down to up or up to down and diagonally left to right downwards, right to left downwards, right to left upwards or left to right upwards.\\n\\nWrite a function which takes two parameters:\\n\\n1. The rectangular grid of upper case letters.\\n2. The target word.\\n\\nYour function should return a tuple (count, grid) where count is the total number of occurrences of the target word and the grid is the input grid with each occurrence of the target word in lower case.\\n\\n### Examples\\n```\\ncount_word([\\n  [\\\"I\\\", \\\"W\\\", \\\"I\\\", \\\"S\\\", \\\"H\\\"],\\n  [\\\"Z\\\", \\\"H\\\", \\\"S\\\", \\\"I\\\", \\\"W\\\"],\\n  [\\\"R\\\", \\\"S\\\", \\\"A\\\", \\\"D\\\", \\\"I\\\"],\\n  [\\\"Z\\\", \\\"I\\\", \\\"R\\\", \\\"E\\\", \\\"S\\\"],\\n  [\\\"J\\\", \\\"W\\\", \\\"K\\\", \\\"F\\\", \\\"H\\\"]\\n], \\\"WISH\\\") ➞ (4, [\\n  [\\\"I\\\", \\\"w\\\", \\\"i\\\", \\\"s\\\", \\\"h\\\"],\\n  [\\\"Z\\\", \\\"h\\\", \\\"s\\\", \\\"i\\\", \\\"w\\\"],\\n  [\\\"R\\\", \\\"s\\\", \\\"A\\\", \\\"D\\\", \\\"i\\\"],\\n  [\\\"Z\\\", \\\"i\\\", \\\"R\\\", \\\"E\\\", \\\"s\\\"],\\n  [\\\"J\\\", \\\"w\\\", \\\"K\\\", \\\"F\\\", \\\"h\\\"]\\n ])\\n\\ncount_word([\\n  [\\\"M\\\", \\\"I\\\", \\\"W\\\", \\\"S\\\", \\\"W\\\", \\\"I\\\", \\\"I\\\", \\\"M\\\"],\\n  [\\\"W\\\", \\\"M\\\", \\\"I\\\", \\\"W\\\", \\\"W\\\", \\\"S\\\", \\\"M\\\", \\\"I\\\"],\\n  [\\\"I\\\", \\\"S\\\", \\\"S\\\", \\\"I\\\", \\\"M\\\", \\\"I\\\", \\\"S\\\", \\\"W\\\"],\\n  [\\\"S\\\", \\\"W\\\", \\\"I\\\", \\\"M\\\", \\\"W\\\", \\\"M\\\", \\\"W\\\", \\\"S\\\"],\\n  [\\\"I\\\", \\\"I\\\", \\\"W\\\", \\\"M\\\", \\\"I\\\", \\\"W\\\", \\\"I\\\", \\\"S\\\"],\\n  [\\\"I\\\", \\\"M\\\", \\\"I\\\", \\\"S\\\", \\\"M\\\", \\\"S\\\", \\\"M\\\", \\\"W\\\"],\\n  [\\\"W\\\", \\\"W\\\", \\\"S\\\", \\\"M\\\", \\\"W\\\", \\\"I\\\", \\\"S\\\", \\\"I\\\"],\\n  [\\\"S\\\", \\\"I\\\", \\\"M\\\", \\\"M\\\", \\\"I\\\", \\\"W\\\", \\\"S\\\", \\\"M\\\"]\\n], \\\"SWIM\\\") ➞ (9, [\\n  [\\\"m\\\", \\\"i\\\", \\\"w\\\", \\\"s\\\", \\\"W\\\", \\\"I\\\", \\\"I\\\", \\\"m\\\"],\\n  [\\\"W\\\", \\\"M\\\", \\\"I\\\", \\\"w\\\", \\\"W\\\", \\\"S\\\", \\\"M\\\", \\\"i\\\"],\\n  [\\\"I\\\", \\\"s\\\", \\\"S\\\", \\\"i\\\", \\\"M\\\", \\\"I\\\", \\\"s\\\", \\\"w\\\"],\\n  [\\\"s\\\", \\\"w\\\", \\\"i\\\", \\\"m\\\", \\\"W\\\", \\\"M\\\", \\\"w\\\", \\\"s\\\"],\\n  [\\\"I\\\", \\\"i\\\", \\\"W\\\", \\\"m\\\", \\\"I\\\", \\\"W\\\", \\\"i\\\", \\\"s\\\"],\\n  [\\\"I\\\", \\\"m\\\", \\\"i\\\", \\\"S\\\", \\\"M\\\", \\\"S\\\", \\\"m\\\", \\\"w\\\"],\\n  [\\\"W\\\", \\\"w\\\", \\\"S\\\", \\\"M\\\", \\\"W\\\", \\\"I\\\", \\\"S\\\", \\\"i\\\"],\\n  [\\\"s\\\", \\\"I\\\", \\\"M\\\", \\\"m\\\", \\\"i\\\", \\\"w\\\", \\\"s\\\", \\\"m\\\"]\\n])\\n```\\n\\n### Notes\\nDiagonals can be any diagonal the target word can fit in, not just the main diagonal.\\nThe target word will not be a palindrome.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"tests = [\\n([['I','W','I','S','H'],['Z','H','S','I','W'],['R','S','A','D','I'],['Z','I','R','E','S'],['J','W','K','F','H']],'WISH'),\\n([['Z','R','Y','H','W'],['W','H','S','I','B'],['A','I','S','N','O'],['W','H','S','I','P'],['X','T','U','H','W']],'WISH'),\\n([['I', 'W', 'I', 'S', 'H', 'I', 'W', 'I', 'S', 'H'], ['Z', 'H', 'S', 'I', 'W', 'Z', 'H', 'S', 'I', 'W'], ['R', 'S', 'A', 'D', 'I', 'R', 'S', 'A', 'D', 'I'], ['Z', 'I', 'R', 'E', 'S', 'Z', 'I', 'R', 'E', 'S'], ['J', 'W', 'K', 'F', 'H', 'J', 'W', 'K', 'F', 'H']],'WISH'),\\n([['I', 'W'], ['Z', 'H'], ['R', 'S'], ['Z', 'I'], ['J', 'W']],'WISH'),\\n([['M','I','W','S','W','I','I','M'],['W','M','I','W','W','S','M','I'],['I','S','S','I','M','I','S','W'],['S','W','I','M','W','M','W','S'],['I','I','W','M','I','W','I','S'],['I','M','I','S','M','S','M','W'],['W','W','S','M','W','I','S','I'],['S','I','M','M','I','W','S','M']],'SWIM'),\\n([['S','A','H','S','A','H','S','P','A','H'],['R','H','S','A','H','S','H','A','R','P'],['A','R','A','P','S','A','A','R','H','S'],['P','S','S','R','A','P','R','S','P','H'],['S','H','A','R','P','S','P','P','A','A'],['H','A','P','P','R','R','R','A','H','R'],['A','R','S','R','A','P','A','S','A','P'],['R','P','S','A','H','A','H','H','R','A'],['P','R','A','H','S','P','S','R','S','H'],['R','A','P','S','R','H','A','H','A','S']],'SHARP'),\\n([['L','A','C','M','A','M','A','C'],['M','A','L','C','C','A','L','M'],['L','C','A','L','M','L','C','M'],['C','A','C','M','L','C','L','A'],['A','M','A','C','A','A','M','L'],['L','M','L','A','C','A','L','M'],['M','C','A','L','M','C','M','C'],['M','L','A','A','C','A','L','M']],'CALM'),\\n([['C','O','S','T','C','T','T'],['O','S','C','O','S','S','S'],['S','C','T','O','O','T','O'],['T','O','C','C','S','S','C'],['S','O','C','C','S','T','T']],'COST')\\n]\\n\\nanswers = [\\n(4, [['I', 'w', 'i', 's', 'h'], ['Z', 'h', 's', 'i', 'w'], ['R', 's', 'A', 'D', 'i'], ['Z', 'i', 'R', 'E', 's'], ['J', 'w', 'K', 'F', 'h']]),\\n(4, [['Z', 'R', 'Y', 'h', 'w'], ['w', 'h', 's', 'i', 'B'], ['A', 'i', 's', 'N', 'O'], ['w', 'h', 's', 'i', 'P'], ['X', 'T', 'U', 'h', 'w']]),\\n(8, [['I', 'w', 'i', 's', 'h', 'I', 'w', 'i', 's', 'h'], ['Z', 'h', 's', 'i', 'w', 'Z', 'h', 's', 'i', 'w'], ['R', 's', 'A', 'D', 'i', 'R', 's', 'A', 'D', 'i'], ['Z', 'i', 'R', 'E', 's', 'Z', 'i', 'R', 'E', 's'], ['J', 'w', 'K', 'F', 'h', 'J', 'w', 'K', 'F', 'h']]),\\n(1, [['I', 'W'], ['Z', 'h'], ['R', 's'], ['Z', 'i'], ['J', 'w']]),\\n(9, [['m', 'i', 'w', 's', 'W', 'I', 'I', 'm'], ['W', 'M', 'I', 'w', 'W', 'S', 'M', 'i'], ['I', 's', 'S', 'i', 'M', 'I', 's', 'w'], ['s', 'w', 'i', 'm', 'W', 'M', 'w', 's'], ['I', 'i', 'W', 'm', 'I', 'W', 'i', 's'], ['I', 'm', 'i', 'S', 'M', 'S', 'm', 'w'], ['W', 'w', 'S', 'M', 'W', 'I', 'S', 'i'], ['s', 'I', 'M', 'm', 'i', 'w', 's', 'm']]),\\n(13, [['s', 'A', 'H', 's', 'A', 'H', 's', 'P', 'A', 'H'], ['R', 'h', 'S', 'A', 'h', 's', 'h', 'a', 'r', 'p'], ['A', 'R', 'a', 'P', 'S', 'a', 'a', 'R', 'H', 's'], ['P', 's', 'S', 'r', 'A', 'P', 'r', 'S', 'P', 'h'], ['s', 'h', 'a', 'r', 'p', 'S', 'p', 'p', 'A', 'a'], ['h', 'a', 'P', 'p', 'r', 'r', 'r', 'A', 'H', 'r'], ['a', 'r', 'S', 'r', 'a', 'P', 'a', 'S', 'A', 'p'], ['r', 'p', 'S', 'a', 'h', 'A', 'h', 'h', 'R', 'A'], ['p', 'r', 'a', 'h', 's', 'P', 's', 'R', 's', 'H'], ['R', 'A', 'P', 's', 'R', 'H', 'A', 'H', 'A', 'S']]),\\n(9, [['L', 'A', 'C', 'M', 'A', 'M', 'A', 'C'], ['M', 'A', 'L', 'C', 'c', 'a', 'l', 'm'], ['L', 'c', 'a', 'l', 'm', 'L', 'C', 'm'], ['c', 'A', 'C', 'M', 'l', 'C', 'l', 'A'], ['a', 'M', 'A', 'C', 'a', 'a', 'M', 'L'], ['l', 'm', 'l', 'a', 'c', 'a', 'l', 'm'], ['m', 'c', 'a', 'l', 'm', 'C', 'M', 'C'], ['M', 'L', 'A', 'A', 'c', 'a', 'l', 'm']]),\\n(6, [['c', 'o', 's', 't', 'C', 't', 't'], ['o', 'S', 'c', 'O', 's', 's', 's'], ['s', 'C', 'T', 'o', 'o', 'T', 'o'], ['t', 'O', 'c', 'c', 's', 'S', 'c'], ['S', 'O', 'C', 'C', 'S', 't', 'T']])\\n]\\n\\nmessages = [\\n'horizontal/ vertical square','diagonals square','landscape','thin portrait','large square','large square','large square','landscape diagonals'\\n]\\n\\nfor i,test in enumerate(tests):\\n    Test.assert_equals(count_word(test[0],test[1]),answers[i],messages[i])\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,5,5,4,2,5,5,5,3,5,5,1,4,2,5,4,0],\"rators\":[\"tAF9Gf6PiGogbZuWs\",\"wT5gGgvjKc5wz59AQ\",\"2L4wnWTvoXdAst9wG\",\"aEm3Wvj2rFYRL8Lrb\",\"8PwfYqoDQFThzNtvf\",\"mDWNyaaQ9hvPCRzSd\",\"6428wKHtwKkFdvBs5\",\"8JyqsSbN2FJXPr3cw\",\"GDcZ8xLorv7c8tgkq\",\"iS5BrkGLzJyPK7nKt\",\"8sNv5PTHa7XQ8bNqR\",\"s5M5RvgqR9BhB9JoC\",\"yjtdwc2AC4jA2RWtn\",\"gJYuGdkXEWWmGRLzu\",\"eHcgvkTGsH7ZziqBo\",\"T6iBEE2jp7f7iEF2P\"],\"total\":18,\"quality\":[]},\"flags\":0},\"summary\":\"You are presented with a rectangular grid of capital letters. Within this grid a target word occurs a number of times. The word may be positioned horizontally left to right, right to left; vertically down to up or up to down and diagonally left to right downwards, right to left downwards, right to left upwards or left to right upwards.\\n\\nWrite a function which\",\"tags\":[\"arrays\",\"algorithms\"],\"timestamp\":{\"$date\":1590415040241},\"title\":\"Find the Word\",\"quality\":0,\"family\":[{\"_id\":\"MWAvDdT7rJczZuPMj\",\"language\":\"python3\"}]}}"]