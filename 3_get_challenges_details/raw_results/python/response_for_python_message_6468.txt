a["{\"msg\":\"result\",\"id\":\"1943\",\"result\":{\"_id\":\"zoJeCZCgmA8pS2iAi\",\"author\":\"bangyen\",\"authorId\":\"yv7c4H2jimSKHEjtG\",\"code\":\"def func_sort(lst):\\n\\t\",\"difficulty\":2.7115384615384617,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"9SpSh7hywSDr4gHhK\",\"instructions\":\"Create a function that takes a list of functions and sorts them in ascending order based on how many calls are needed for them to return a non-function.\\n\\n### Examples\\n```\\nf1 = lambda: \\\"hello\\\"\\n# f1() ➞ \\\"hello\\\"\\n\\nf2 = lambda: lambda: \\\"edabit\\\"\\n# f2()() ➞ \\\"edabit\\\"\\n\\nf3 = lambda: lambda: lambda: \\\"user\\\"\\n# f3()()() ➞ \\\"user\\\"\\n\\nfunc_sort([f2, f3, f1]) ➞ [f1, f2, f3]\\n# [f2, f3, f1] ➞ [2, 3, 1] ➞ [1, 2, 3] ➞ [f1, f2, f3]\\n\\nfunc_sort([f1, f2, f3]) ➞ [f1, f2, f3]\\n# [f1, f2, f3] ➞ [1, 2, 3] ➞ [1, 2, 3] ➞ [f1, f2, f3]\\n\\nfunc_sort([f2, \\\"func\\\"]) ➞ [\\\"func\\\", f2]\\n# [f2, \\\"func\\\"] ➞ [2, 0] ➞ [0, 2] ➞ [\\\"func\\\", f2]\\n```\\n\\n### Notes\\n- Treat non-functions as needing zero calls.\\n- Every function will be called with empty parameters.\\n- Every function will need to be called at least once.\\n- The potentially returned values include `int`s, `float`s, and `list`s, among others.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"from random import randrange\\n\\n# example functions\\nf1 = lambda: \\\"hello\\\"\\nf2 = lambda: lambda: \\\"edabit\\\"\\nf3 = lambda: lambda: lambda: \\\"user\\\"\\n\\n# examples\\nTest.assert_equals(func_sort([f2, f3, f1]), [f1, f2, f3], 'Example 1')\\nTest.assert_equals(func_sort([f2, 'func']), ['func', f2], 'Example 2')\\n\\n# create functions f5 to f14 to be used in tests\\nfor k in range(5, 15):\\n\\tr = ['\\\"func\\\"', '0', 'None', '[]', '{}', 'True', '1.0'][randrange(6)]\\n\\texec('f' + str(k) + ' = ' + 'lambda: '*k + r)\\n\\n# create 12 random tests\\nfor k in range(12):\\n\\tr = [\\\"'func'\\\", '0', 'None', '[]', '{}', 'True', '1.0'][randrange(6)]\\n\\tg = lambda n: 'f' + str(n)\\n\\tl = [randrange(5, 15) for n in range(randrange(5, 10))]; sl = sorted(l)\\n\\tlf = str(list(map(g, l))).replace(\\\"'\\\", '').replace('f5', r)\\n\\tslf = str(list(map(g, sl))).replace(\\\"'\\\", '').replace('f5', r)\\n\\n\\texec('Test.assert_equals(func_sort(' + lf + '), ' +\\n\\t\\tslf + ', \\\"List: ' + lf + '\\\")')\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,3,2,3,3,4,2,3,3,4,2,1,4,3,2,2,2,3,1,2,2,4,4,4,2,2,2,1,2,4,2,3,1,4,4,4,2,2,4,4,0,4,4,3,5,3,4],\"rators\":[\"yv7c4H2jimSKHEjtG\",\"n2BRY9X8899dcG8Bw\",\"aEm3Wvj2rFYRL8Lrb\",\"ZNnsMeNkdDhHjSrZb\",\"8PwfYqoDQFThzNtvf\",\"gb9rvGus2Jv7bjZSs\",\"WsDuvk36hThvkXRs7\",\"BwTJWMcmHwFf9TeRG\",\"NK2PmeDZcHywYuWYq\",\"Phd2FdPjo9BhBfvKh\",\"pPmDX5WEA6wXvAmrt\",\"2dAt4J5XPniWBuzaB\",\"ASsfbyG6AwkhqRZSB\",\"omQhBXTwsBMv6kgz4\",\"SGhPxX5bHGL8zZqtt\",\"xn7uGNKeAwPEkP9oA\",\"TX8iXgvCq7zaTZozX\",\"DCMKC7fnTWgyBj47Y\",\"4fhjJBvLBWh6QeSih\",\"feC3ae6ShoSBGZz8H\",\"XwHodfEcegFPRqQNr\",\"ji5f27FPz4wRRF6Ls\",\"7env7snStSFKE7xjd\",\"ekQh3jzgGLsEMbKo3\",\"2DrXL4cYLdXLj78t3\",\"zZDaXBxMzTCBhNkgL\",\"9CyzZC65NoyiHHxSm\",\"AQECHYqcH2rFsZM8p\",\"nZs57bxjesuEdNGAj\",\"6TZp5F9a7SdsEnuKs\",\"yhnpZLDLibMdyaM5W\",\"Ecg4m7srYGgZsb4Ck\",\"8sNv5PTHa7XQ8bNqR\",\"yjtdwc2AC4jA2RWtn\",\"txT75uAjwjwwPvGGM\",\"JvtckywAquTG4TeqG\",\"quEfQhA3xBwsCobcg\",\"MtJ33oGd6Skry3dj4\",\"6F3Y6ZBAGNDGGTt9B\",\"PytNZK9mNiRiZxPrm\",\"foytX6kH9wiSYqLtT\",\"v2rponevFCpBsLrQD\",\"DpnYcMphntjsQ96qg\",\"gXTAie79kiw28tx5u\",\"eHcgvkTGsH7ZziqBo\",\"ScaZG69jog5kcqGtQ\",\"iojEnnY9FsMfYzp6f\",\"2PufnQcsHsfymufX3\",\"9izxzCBrsRCbD9ajK\",\"MXjxGML2X75x64vJo\",\"AasGs8AeX9Lcb9xJn\",\"HqmxnQJM66Y57twhn\",\"fznzd3qnvtbFkkizz\",\"MpfytGFYF77emJ3cT\",\"oBcs8GLX2ZFLXQy8y\",\"gJYuGdkXEWWmGRLzu\",\"mDWNyaaQ9hvPCRzSd\",\"bNENiqqEDxM5a5JBf\"],\"total\":61,\"quality\":[4,5,1,3,5,5,5,5,5,5,5]},\"flags\":0},\"summary\":\"Create a function that takes a list of functions and sorts them in ascending order based on how many calls are needed for them to return a non-function.\\n\\nExamples\\nf1 = lambda: \\\"hello\\\"\\nf1() ➞ \\\"hello\\\"\\n\\nf2 = lambda: lambda: \\\"edabit\\\"\\nf2()() ➞ \\\"edabit\\\"\\n\\nf3 = lambda: lambda: lambda: \\\"user\\\"\\nf3()()() ➞ \\\"user\\\"\\n\\nfunc_sort([f2, f3, f1]) ➞ [f1, f2, f3]\\n[f2, f3, f1] ➞ [2,\",\"tags\":[\"closures\",\"higher_order_functions\",\"functional_programming\"],\"timestamp\":{\"$date\":1591998536021},\"title\":\"Sort by Number of Calls\",\"quality\":4.363636363636363,\"family\":[{\"_id\":\"zi2Mvb2GZi3r34JKv\",\"language\":\"javascript\"},{\"_id\":\"zoJeCZCgmA8pS2iAi\",\"language\":\"python3\"},{\"_id\":\"5PWGzzhoNXadjnmHj\",\"language\":\"ruby\"}]}}"]