a["{\"msg\":\"result\",\"id\":\"1078\",\"result\":{\"_id\":\"iG5vcwd282T4t7h6r\",\"author\":\"Sam O’nella\",\"authorId\":\"mNYiFFnf5MdGsBDrt\",\"code\":\"def str_to_dict(lst):\\n\\t\",\"difficulty\":1.5586206896551724,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"RkKNqPjQphxgHFzny\",\"instructions\":\"Create a function that takes a list of strings and returns a dictionary.\\n\\n### Examples\\n```\\nstr_to_dict([\\\"1=one\\\", \\\"2=two\\\", \\\"3=three\\\", \\\"4=four\\\"]) ➞ {\\\"1\\\": \\\"one\\\", \\\"2\\\": \\\"two\\\", \\\"3\\\": \\\"three\\\", \\\"4\\\": \\\"four\\\"}\\n\\nstr_to_dict([\\\"dog=bark\\\", \\\"cat=meow\\\", \\\"cow=moo\\\"]) ➞ {\\\"dog\\\": \\\"bark\\\", \\\"cat\\\": \\\"meow\\\", \\\"cow\\\": \\\"moo\\\"}\\n\\nstr_to_dict([\\\"bob=human\\\", \\\"lola=dog\\\", \\\"mittens=cat\\\", \\\"todd=frog\\\"]) ➞ {\\\"bob\\\": \\\"human\\\", \\\"lola\\\": \\\"dog\\\", \\\"mittens\\\": \\\"cat\\\", \\\"todd\\\": \\\"frog\\\"}\\n```\\n\\n### Notes\\n- Key and value with be separated with `=`.\\n- Input list will be of various lengths.\\n- The key will be the first element in the string and the value with be the second.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(str_to_dict([\\\"name=bob\\\",\\\"balance=500\\\",\\\"salary=10000\\\",\\\"friends=0\\\"]), {\\\"name\\\": \\\"bob\\\", \\\"balance\\\": \\\"500\\\", \\\"salary\\\": \\\"10000\\\", \\\"friends\\\": \\\"0\\\"})\\nTest.assert_equals(str_to_dict([\\\"bob=human\\\", \\\"lola=dog\\\", \\\"mittens=cat\\\", \\\"todd=frog\\\"]),{\\\"bob\\\": \\\"human\\\", \\\"lola\\\": \\\"dog\\\", \\\"mittens\\\": \\\"cat\\\", \\\"todd\\\": \\\"frog\\\"} )\\nTest.assert_equals(str_to_dict([\\\"greeting=Hello There!\\\", \\\"dismissal=Goodbye!\\\",\\\"thanks=Thank you!\\\"]), {\\\"greeting\\\": \\\"Hello There!\\\", \\\"dismissal\\\": \\\"Goodbye!\\\", \\\"thanks\\\": \\\"Thank you!\\\"} )\\nTest.assert_equals(str_to_dict([\\\"dog=bark\\\", \\\"cat=meow\\\", \\\"cow=moo\\\"]),{\\\"dog\\\": \\\"bark\\\", \\\"cat\\\": \\\"meow\\\", \\\"cow\\\": \\\"moo\\\"} )\\nTest.assert_equals(str_to_dict([\\\"1=one\\\",\\\"2=two\\\",\\\"3=three\\\",\\\"4=four\\\"]), {\\\"1\\\": \\\"one\\\", \\\"2\\\": \\\"two\\\", \\\"3\\\": \\\"three\\\", \\\"4\\\": \\\"four\\\"})\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,3,2,2,2,2,3,3,1,1,3,2,1,1,2,2,1,2,0,3,2,2,2,2,1,2,1,1,3,2,3,1,3,0,2,1,3,2,1,3,1,1,0,2,2,1,3,1,2,1,2,1,0,2,1,0,3,2,0,1,1,2,2,2,2,0,2,1,2,2,3,2,0,2,2,2,2,2,2,1,0,2,2,3,2,0,2,3,0,1,2,1,2,2,2,1,2,1,1,1,2,2,0,2,0,2,2,0,0,2,1,2,1,2,0,2,2,2,2,2,2,0,2,0,2,0,2,1,0,0,2,1,1,1,2,1,1,2,2,1],\"rators\":[\"mNYiFFnf5MdGsBDrt\",\"CwXsu25ygLEwQbmQC\",\"Yp7uvStL97cC9fKkY\",\"gJYuGdkXEWWmGRLzu\",\"DEDniTrstQYGounXT\",\"tAF9Gf6PiGogbZuWs\",\"Nb6LYPoQP6KJZt8mz\",\"8PwfYqoDQFThzNtvf\",\"gb9rvGus2Jv7bjZSs\",\"8JyqsSbN2FJXPr3cw\",\"DrkR35NqnP9NDLbq6\",\"n2BRY9X8899dcG8Bw\",\"aEm3Wvj2rFYRL8Lrb\",\"MKT7khMBGXzA22ykf\",\"vTfyrr4pGddp8rbXc\",\"55RQznnuTGpsj3EXd\",\"s5M5RvgqR9BhB9JoC\",\"7LkkmSffxiMDzyQJn\",\"jD3r3hMzLA9Ai45go\",\"uX3EL4Qha99wBkozM\",\"pmgFEciNrd3ES9tuu\",\"ZRxAkXjTCdyQTdSDw\",\"39F2EYK9XeQNpACL5\",\"CEd9tLdXeDeNHSzys\",\"p8qqFdJ3FSk5x9z3G\",\"bc3qxGKYo4Cvhn5qR\",\"J23RcmzbdtBbPCTjT\",\"PTDFuxAzou7W6asWt\",\"dkcmCKwqApX5jBggc\",\"CTKmXtrqDYqJBnuy8\",\"iS5BrkGLzJyPK7nKt\",\"6QHXQkQAcXMJ7C2kK\",\"xn7uGNKeAwPEkP9oA\",\"9Ei8JsYdzSnNbfWpL\",\"nZs57bxjesuEdNGAj\",\"Wv2vJnEj8ywNmARoF\",\"CccXoqbXeoMydtEhh\",\"FK2fEQ3F6DD3buSLJ\",\"J9DAAbBSYYJyM5sPN\",\"xBQC5uQdx6WndJ3iM\",\"pet6HAfWv7F3treEx\",\"oH5za8CuPrt4XyoKx\",\"vpRpD5X2Yjnzp9nvZ\",\"YpqyX83YuGTvDHpD6\",\"egMT3mXBiWZncu3sF\",\"ra7a6S3WLnLbXYq7Q\",\"8Ni269XqCJJhs65Kw\",\"tddGZHLhgeGnrYDHY\",\"77dQgT3gTGWLcRPTk\",\"C8Gd66wwGagHmj2t8\",\"zgbREqwNxpyRqWEjC\",\"E5cu6oJFNFDXqae9q\",\"hRiMXDZNAzyPd5tpt\",\"4c4LyQAD92q9w5ZaM\",\"jNvegJWCk5HCtEMbK\",\"cR3ibTMxLyEdDFCHY\",\"w2HhxvSLmDhaGCAjE\",\"YcCLwitFMAEJSnxAW\",\"yjtdwc2AC4jA2RWtn\",\"NNE5HNRXAkmhrWgyQ\",\"oBcs8GLX2ZFLXQy8y\",\"xuhzk6HxLWryHMGAQ\",\"mG8HqKiAQFTdRZthG\",\"wniy5aKNkwYTNAkrz\",\"QRv96jmNaYsWkxQEG\",\"y372QoK9hSQGAWjCF\",\"HF28xZKSLM9wEuqNg\",\"am8jWchNEhm7PsTv9\",\"KJCDwGkoXh8qtbbKr\",\"bBvhn46xMzKbMAZpm\",\"gXTAie79kiw28tx5u\",\"g9FyJ8yeT9ic97Qp2\",\"DPi9QGLctq2y76KuE\",\"4hzd4qde3g9We8N4E\",\"J3upzLHuEwXH7Z2hx\",\"zZDaXBxMzTCBhNkgL\",\"dYPkStFnLvAMsHSzZ\",\"FEYpu9RWysAgW3XnP\",\"qAby4AWXmTNeusvg3\",\"mDNn3en8sk6Z5iico\",\"K3RacTvkWHLfzKF8i\",\"YkPqyJQQF4mnnXRTW\",\"22kSvGZ9z9J2KK8nc\",\"5XiuAqicKD4hBdu63\",\"JS3hNM3XXkxPdg3yk\",\"kAkLAF9T5McSxXJCT\",\"cAP3n5NY64uoMwzRR\",\"MKJhn7goNzuGtB5y9\",\"YLFHcoEWk6PzJPsnZ\",\"mDWNyaaQ9hvPCRzSd\",\"TQMHB3iK7gmfmsvqZ\",\"zd9FLSzsGz3evKafy\",\"5EPe7bdNQ69vjsKv7\",\"RGMbFMZXJr7DhcAJy\",\"LQxof8pGabGuWP7Gn\",\"Jqk2uJZZxEv5wZFze\",\"69JqnbAinX7DNjg2c\",\"CLypXaZksY99mpRCm\",\"2H7qphwdz7PPoFKgc\",\"eYfPWvZwnJQkHbSTK\",\"dBzwBtRjZqB98DJeB\",\"v2d8o47YdYEuEzzGo\",\"HqmxnQJM66Y57twhn\",\"As83XFL89deJfprRY\",\"5S9nX4rKsnCcnv4Cz\",\"EfxwqhYdapX3dMQC2\",\"9bQyb6rW7xfE4vgrR\",\"srJ34BaybkQh3qRkM\",\"Wccd4ZBBDq9Em3Dxg\",\"CHvzhtXnv8HTbPQ56\",\"GGdmhAvxXhqhhibJN\",\"ZC7xFnX8ZNu8RivuE\",\"xLPHPW2MK2sBGpYw4\",\"rfyEkETeoS96QNH4e\",\"T2vhHPhRR96hRizq8\",\"PWgzeK859suojbrRx\",\"dLmepN3JWxhXMtyNK\",\"4v8pnvxe8XSWMawR6\",\"sbJcFfQjQ59Wfg4Cd\",\"iojEnnY9FsMfYzp6f\",\"xsDyJstYoBZRS8pJH\",\"vhhv6HQyH4r9Q6d6n\",\"Ds7L5bksw2QRHjrKL\",\"jcivfiuG6GtibbBL9\",\"enbiANzN2EtML9vNX\",\"YmQb9Mo4Xcg2vzgbn\",\"bvmTE46bfcM4ogj34\",\"J5T8gZqiZXFuFDTQ7\",\"5vnWKMWz3c5HCg4bt\",\"b8a25LainyJuSBbnW\",\"t9dJuQyxt2D9TLYyS\",\"ey3CASd6Je5LEJzfB\",\"o4ixjQGSaYqA2JoM4\",\"66a9xX73nmTEuKs9k\",\"PC3pLs36zNzpRDSuE\",\"5HCu9Ydd86QgHDRNP\",\"eMuCpJ2spXWkJjWNz\",\"dZzdZbg3QCAbqXuEw\",\"yr822PZmmiDDenxpB\",\"bv4ycSophchSEFoK9\",\"9Ly8afdtofp8DXzrt\",\"AasGs8AeX9Lcb9xJn\",\"AJexRBN9cYQmqvYu6\",\"qzXAMXsHZGT8o5hTA\",\"mvJBakQ35CWAnbbEZ\",\"T6iBEE2jp7f7iEF2P\",\"Afnps7TJQuS9sipMb\",\"2NDSt8HyP33cFRHsu\",\"sHjfbGQGLHE6JR6qu\",\"cA6ALDreRTFs8k4MM\",\"a2Kmh6ekWqQQooHiQ\",\"8BFSTCnoe2QggN64c\",\"BrTDhPJcACL2bsrpJ\",\"yod5YhKtPqw2GfG9B\",\"T6Rm8mREPMZSftzrC\",\"dzS6WBTMHyFEag6Fp\",\"ngNhxASjqaXo64YhK\",\"d9LBRxvADNBB5QJMB\",\"vAh63eGRwkuJtoP8v\",\"8Ha7KAEkhZYav9fay\",\"2PufnQcsHsfymufX3\",\"q6RnyQoAhDAzkWwwz\",\"d8qtzoLB264iP8tdY\",\"3CRf8CYo6fHSbqKQj\",\"mxX4rH5ELYkdZ2Mbw\",\"wrL4iX2CCSqDCCty3\",\"syRNbbPdLCGXbH2Gy\",\"4TmgHkn5vqyHK3sYC\",\"3nied3n8KG8RSNixH\",\"Ncn7Qn2LbdsiJnfFk\",\"4Lwjr34ypKNQNQCar\",\"pduNK68oazqQTtbLp\",\"9pzFiFK3ANLjQfnr2\",\"Wi4H6ayKsNDWWQCG5\",\"DQskEvAv5KiJDPtGF\",\"X4rzfxGgxx6CS7Bpz\",\"mGAD6xK3APTELpMkz\",\"5rX3qPFdvRQ9G7xZQ\",\"mXXPMi2anfJi5whC9\",\"naZ3i6sSDPwsieDH7\",\"E2hpke7mHxAWsw5t9\"],\"total\":205,\"quality\":[5,5,5,4,3,5,4,3,5,5,5,3,5,5,5,5,5,5,5,5,5,5,4,5,5,4,5,5,5,5,5,5,5,5,5,4,5,5,5,5,5]},\"flags\":0},\"summary\":\"Create a function that takes a list of strings and returns a dictionary.\\n\\nExamples\\nstrtodict([\\\"1=one\\\", \\\"2=two\\\", \\\"3=three\\\", \\\"4=four\\\"]) ➞ {\\\"1\\\": \\\"one\\\", \\\"2\\\": \\\"two\\\", \\\"3\\\": \\\"three\\\", \\\"4\\\": \\\"four\\\"}\\n\\nstrtodict([\\\"dog=bark\\\", \\\"cat=meow\\\", \\\"cow=moo\\\"]) ➞ {\\\"dog\\\": \\\"bark\\\", \\\"cat\\\": \\\"meow\\\", \\\"cow\\\": \\\"moo\\\"}\\n\\nstrtodict([\\\"bob=human\\\", \\\"lola=dog\\\", \\\"mittens=cat\\\", \\\"todd=frog\\\"]) ➞ {\\\"bob\\\": \\\"hu\",\"tags\":[\"data_structures\",\"arrays\",\"sorting\"],\"timestamp\":{\"$date\":1597881220650},\"title\":\"String to Dictionary\",\"quality\":4.7317073170731705,\"family\":[{\"_id\":\"iG5vcwd282T4t7h6r\",\"language\":\"python3\"}]}}"]