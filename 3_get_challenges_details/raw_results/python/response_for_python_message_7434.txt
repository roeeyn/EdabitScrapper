a["{\"msg\":\"result\",\"id\":\"2423\",\"result\":{\"_id\":\"zpQBqTuoFFbbL2pM2\",\"author\":\"Evgeny SH\",\"authorId\":\"8PwfYqoDQFThzNtvf\",\"code\":\"def merge_two_lists(l1, l2):\\n\\t\",\"difficulty\":4.230769230769231,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"mwtbthcNwc2X97FFj\",\"instructions\":\"Merge two sorted linked-lists and return it as a new sorted linked-list. The new linked-list should be made by splicing together the nodes of two linked-lists.\\n\\n![Alternative Text](https://edabit-challenges.s3.amazonaws.com/BjbJBJBbBJvGC.png)\\n\\n### Input\\nThe class for nodes of the singly-linked list is defined in the _Tests_ tab. The linked-lists are made from the data of ordinary lists and provided into the function. Each node contains a value and the reference to the next node.\\n\\n```\\nclass ListNode:\\n    def __init__(self, val=0, next_element=None):\\n        self.val = val\\n        self.next_element = next_element\\n```\\n\\n### Output\\nReturn the reference to the first node of the non-empty sequence of data. If one of the linked lists is `None`, return reference to another. If both linked lists are `None`, return `None`. If both linked lists have data, arrange the references such that a new sorted linked list is formed.\\n\\n### Examples\\n```\\na1 = [1, 2, 4]\\na2 = [1, 3, 4]\\nlst1 = ListNode(a1[0]) if a1 else None\\nif a1 and len(a1) > 1:\\n    lst1.add_data(a1[1:])\\nlst2 = ListNode(a2[0]) if a2 else None\\nif a2 and len(a2) > 1:\\n    lst2.add_data(a2[1:])\\nmerged_lst = merge_two_lists(lst1, lst2)\\nprint(merged_lst.all_nodes_data() if merged_lst else []) ➞ [1, 1, 2, 3, 4, 4]\\n\\nb1 = [13, 69]\\nb2 = []\\nlst1 = ListNode(b1[0]) if b1 else None\\nif b1 and len(b1) > 1:\\n    lst1.add_data(b1[1:])\\nlst2 = ListNode(b2[0]) if b2 else None\\nif b2 and len(b2) > 1:\\n    lst2.add_data(b2[1:])\\nmerged_lst = merge_two_lists(lst1, lst2)\\nprint(merged_lst.all_nodes_data() if merged_lst else []) ➞ [13, 69]\\n\\nlst1 = None\\nlst2 = None\\nmerged_lst = merge_two_lists(lst1, lst2)\\nprint(merged_lst.all_nodes_data() if merged_lst else []) ➞ []\\n```\\n\\n### Notes\\nTry to avoid making new nodes and copying values (focus on rearranging `self.next_element`).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"from random import randint\\nfrom time import perf_counter\\ntic = perf_counter()\\n\\n\\\"\\\"\\\"Class definition for singly-linked list.\\\"\\\"\\\"\\nclass ListNode:\\n    def __init__(self, val=0, next_element=None):\\n        self.val = val\\n        self.next_element = next_element\\n\\n    def add_data(self, data):\\n        last = self\\n        while last.next_element is not None:\\n            last = last.next_element\\n        if type(data) == list:\\n            for x in data:\\n                last.next_element = ListNode(x)\\n                last = last.next_element\\n        else:\\n            last.next_element = ListNode(data)\\n\\n    def all_nodes_data(self):\\n        res = []\\n        last = self\\n        while last.next_element is not None:\\n            res.append(last.val)\\n            last = last.next_element\\n        res.append(last.val)\\n        return res\\n\\n\\\"\\\"\\\"Easy tests\\\"\\\"\\\"\\na1 = [1, 2, 4]\\na2 = [1, 3, 4]\\nlst1 = ListNode(a1[0]) if a1 else None\\nif a1 and len(a1) > 1:\\n    lst1.add_data(a1[1:])\\nlst2 = ListNode(a2[0]) if a2 else None\\nif a2 and len(a2) > 1:\\n    lst2.add_data(a2[1:])\\nmerged_lst = merge_two_lists(lst1, lst2)\\nTest.assert_equals((merged_lst.all_nodes_data() if merged_lst else []), [1, 1, 2, 3, 4, 4])\\n\\nb1 = [13, 69]\\nb2 = []\\nlst1 = ListNode(b1[0]) if b1 else None\\nif b1 and len(b1) > 1:\\n    lst1.add_data(b1[1:])\\nlst2 = ListNode(b2[0]) if b2 else None\\nif b2 and len(b2) > 1:\\n    lst2.add_data(b2[1:])\\nmerged_lst = merge_two_lists(lst1, lst2)\\nTest.assert_equals((merged_lst.all_nodes_data() if merged_lst else []), [13, 69])\\n\\nlst1 = None\\nlst2 = None\\nmerged_lst = merge_two_lists(lst1, lst2)\\nTest.assert_equals((merged_lst.all_nodes_data() if merged_lst else []), [])\\n\\n\\\"\\\"\\\"Generated tests\\\"\\\"\\\"\\nfor _ in range(10):\\n    d1 = sorted(randint(-100, 100) for _ in range(randint(0, 100)))\\n    d2 = sorted(randint(-100, 100) for _ in range(randint(0, 100)))\\n    lst1 = ListNode(d1[0]) if d1 else None\\n    if d1 and len(d1) > 1:\\n        lst1.add_data(d1[1:])\\n    lst2 = ListNode(d2[0]) if d2 else None\\n    if d2 and len(d2) > 1:\\n        lst2.add_data(d2[1:])\\n    \\\"\\\"\\\"function call\\\"\\\"\\\"\\n    merged_lst = merge_two_lists(lst1, lst2)\\n    if lst1 and lst2:\\n        input_id = set()\\n        output_id = set()\\n        last = lst1\\n        while last.next_element is not None:\\n            input_id.add(id(last))\\n            last = last.next_element\\n        input_id.add(id(last))\\n        last = lst2\\n        while last.next_element is not None:\\n            input_id.add(id(last))\\n            last = last.next_element\\n        input_id.add(id(last))\\n        last = merged_lst\\n        while last.next_element is not None:\\n            output_id.add(id(last))\\n            last = last.next_element\\n        output_id.add(id(last))\\n        Test.assert_equals(input_id, output_id)\\n    Test.assert_equals((merged_lst.all_nodes_data() if merged_lst else []), sorted(d1 + d2))\\n\\nprint('t = {:.6f}'.format(perf_counter() - tic))\",\"language\":\"python3\",\"quality\":0,\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,5,3,5,2,5,3,2,5],\"quality\":[],\"rators\":[\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\",\"mDWNyaaQ9hvPCRzSd\",\"d8qtzoLB264iP8tdY\",\"eHcgvkTGsH7ZziqBo\",\"SGhPxX5bHGL8zZqtt\",\"yjtdwc2AC4jA2RWtn\",\"iS5BrkGLzJyPK7nKt\"],\"total\":10},\"flags\":0},\"summary\":\"Merge two sorted linked-lists and return it as a new sorted linked-list. The new linked-list should be made by splicing together the nodes of two linked-lists.\\n\\nAlternative Text\\n\\nInput\\nThe class for nodes of the singly-linked list is defined in the Tests tab. The linked-lists are made from the data of ordinary lists and provided into the function. Each node co\",\"tags\":[\"classes\",\"data_structures\"],\"timestamp\":{\"$date\":1603318666243},\"title\":\"Merge Two Sorted Lists\",\"family\":[{\"_id\":\"zpQBqTuoFFbbL2pM2\",\"language\":\"python3\"}]}}"]