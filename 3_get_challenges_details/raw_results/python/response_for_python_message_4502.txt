a["{\"msg\":\"result\",\"id\":\"967\",\"result\":{\"_id\":\"MFteyMABeuGaga3a7\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def color_pattern_times(cols):\\n\",\"difficulty\":1.4914529914529915,\"editorId\":\"PXAcsKkssS2yLyDv2\",\"familyId\":\"TdtkwYojin8XhWunC\",\"instructions\":\"When coloring a striped pattern, you may start by coloring each square *sequentially*, meaning you spend time needing to *switch coloring pencils*.\\n\\nCreate a function where given a *list of colors* `cols`, return how long it takes to color the whole pattern. Note the following times:\\n\\n- It takes **1 second** to *switch between pencils*.\\n- It takes **2 seconds** to * color a square*.\\n\\nSee the example below for clarification.\\n\\n```\\ncolor_pattern_times([\\\"Red\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Red\\\"]) ➞ 14\\n\\n# There are 5 colors so it takes 2 seconds to color each one (2 x 5 = 10).\\n# You need to switch the pencils 4 times and it takes 1 second to switch (1 x 4 = 4).\\n# 10 + 4 = 14\\n```\\n\\n### Examples\\n```\\ncolor_pattern_times([\\\"Blue\\\"]) ➞ 2\\n\\ncolor_pattern_times([\\\"Red\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Blue\\\"]) ➞ 11\\n\\ncolor_pattern_times([\\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Red\\\", \\\"Red\\\"]) ➞ 13\\n```\\n\\n### Notes\\n- Only change coloring pencils if the next color is different to the color before it.\\n- Return a number in *seconds*.\",\"isHidden\":false,\"lab\":\"Test.assert_equals(color_pattern_times([\\\"Red\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Green\\\", \\\"Green\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Green\\\", \\\"Red\\\", \\\"Red\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Blue\\\"]), 70)\\nTest.assert_equals(color_pattern_times([\\\"Red\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Green\\\", \\\"Red\\\"]), 44)\\nTest.assert_equals(color_pattern_times([\\\"Yellow\\\", \\\"Green\\\", \\\"Blue\\\"]), 8)\\nTest.assert_equals(color_pattern_times([\\\"Green\\\", \\\"Green\\\", \\\"Red\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Red\\\", \\\"Green\\\", \\\"Red\\\", \\\"Green\\\"]), 27)\\nTest.assert_equals(color_pattern_times([\\\"Red\\\"]), 2)\\nTest.assert_equals(color_pattern_times([\\\"Red\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Green\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Red\\\"]), 30)\\nTest.assert_equals(color_pattern_times([\\\"Green\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Red\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Green\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Green\\\", \\\"Green\\\", \\\"Blue\\\"]), 83)\\nTest.assert_equals(color_pattern_times([\\\"Red\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Red\\\"]), 33)\\nTest.assert_equals(color_pattern_times([\\\"Yellow\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Yellow\\\"]), 10)\\nTest.assert_equals(color_pattern_times([\\\"Blue\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Green\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Green\\\", \\\"Blue\\\"]), 56)\\nTest.assert_equals(color_pattern_times([\\\"Red\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Yellow\\\"]), 33)\\nTest.assert_equals(color_pattern_times([\\\"Blue\\\", \\\"Red\\\", \\\"Red\\\"]), 7)\\nTest.assert_equals(color_pattern_times([\\\"Red\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Green\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Green\\\", \\\"Red\\\", \\\"Green\\\", \\\"Red\\\", \\\"Green\\\", \\\"Red\\\", \\\"Red\\\", \\\"Green\\\", \\\"Red\\\", \\\"Red\\\", \\\"Green\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Red\\\"]), 83)\\nTest.assert_equals(color_pattern_times([\\\"Yellow\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Blue\\\"]), 17)\\nTest.assert_equals(color_pattern_times([\\\"Yellow\\\", \\\"Red\\\", \\\"Green\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Green\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Red\\\", \\\"Yellow\\\"]), 43)\\nTest.assert_equals(color_pattern_times([\\\"Red\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Red\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Blue\\\"]), 78)\\nTest.assert_equals(color_pattern_times([\\\"Yellow\\\", \\\"Red\\\", \\\"Green\\\"]), 8)\\nTest.assert_equals(color_pattern_times([\\\"Green\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Green\\\", \\\"Red\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Red\\\"]), 59)\\nTest.assert_equals(color_pattern_times([\\\"Yellow\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Red\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Blue\\\"]), 35)\\nTest.assert_equals(color_pattern_times([\\\"Green\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Red\\\"]), 34)\\nTest.assert_equals(color_pattern_times([\\\"Yellow\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Blue\\\"]), 10)\\nTest.assert_equals(color_pattern_times([\\\"Green\\\", \\\"Red\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Red\\\", \\\"Red\\\", \\\"Green\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Yellow\\\"]), 82)\\nTest.assert_equals(color_pattern_times([\\\"Red\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Blue\\\"]), 20)\\nTest.assert_equals(color_pattern_times([\\\"Green\\\", \\\"Red\\\", \\\"Green\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Green\\\", \\\"Red\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Yellow\\\"]), 37)\\nTest.assert_equals(color_pattern_times([\\\"Yellow\\\", \\\"Red\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Green\\\", \\\"Red\\\"]), 30)\\nTest.assert_equals(color_pattern_times([\\\"Yellow\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Green\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Green\\\", \\\"Green\\\"]), 37)\\nTest.assert_equals(color_pattern_times([\\\"Green\\\", \\\"Green\\\", \\\"Red\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Green\\\"]), 30)\\nTest.assert_equals(color_pattern_times([\\\"Yellow\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Red\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Blue\\\"]), 46)\\nTest.assert_equals(color_pattern_times([\\\"Red\\\", \\\"Green\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Green\\\", \\\"Green\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Blue\\\"]), 40)\\nTest.assert_equals(color_pattern_times([\\\"Yellow\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Red\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Green\\\"]), 56)\\nTest.assert_equals(color_pattern_times([\\\"Green\\\", \\\"Green\\\", \\\"Red\\\", \\\"Green\\\", \\\"Blue\\\"]), 13)\\nTest.assert_equals(color_pattern_times([\\\"Red\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Red\\\", \\\"Red\\\", \\\"Green\\\", \\\"Blue\\\"]), 27)\\nTest.assert_equals(color_pattern_times([\\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Red\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Green\\\"]), 45)\\nTest.assert_equals(color_pattern_times([\\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Yellow\\\"]), 45)\\nTest.assert_equals(color_pattern_times([\\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Yellow\\\"]), 25)\\nTest.assert_equals(color_pattern_times([\\\"Green\\\", \\\"Red\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\"]), 15)\\nTest.assert_equals(color_pattern_times([\\\"Red\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Yellow\\\"]), 22)\\nTest.assert_equals(color_pattern_times([\\\"Blue\\\", \\\"Red\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Red\\\", \\\"Red\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Green\\\"]), 64)\\nTest.assert_equals(color_pattern_times([\\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Yellow\\\"]), 9)\\nTest.assert_equals(color_pattern_times([\\\"Red\\\", \\\"Red\\\", \\\"Blue\\\"]), 7)\\nTest.assert_equals(color_pattern_times([\\\"Green\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Blue\\\"]), 32)\\nTest.assert_equals(color_pattern_times([\\\"Green\\\", \\\"Red\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Green\\\"]), 20)\\nTest.assert_equals(color_pattern_times([\\\"Green\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Red\\\", \\\"Red\\\", \\\"Green\\\", \\\"Green\\\"]), 76)\\nTest.assert_equals(color_pattern_times([\\\"Blue\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Green\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Red\\\"]), 75)\\nTest.assert_equals(color_pattern_times([\\\"Blue\\\", \\\"Red\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Red\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Red\\\"]), 81)\\nTest.assert_equals(color_pattern_times([\\\"Yellow\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Green\\\", \\\"Red\\\"]), 15)\\nTest.assert_equals(color_pattern_times([\\\"Blue\\\", \\\"Red\\\", \\\"Yellow\\\"]), 8)\\nTest.assert_equals(color_pattern_times([\\\"Blue\\\", \\\"Red\\\", \\\"Red\\\", \\\"Green\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Red\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Yellow\\\"]), 50)\\nTest.assert_equals(color_pattern_times([\\\"Yellow\\\", \\\"Green\\\", \\\"Red\\\", \\\"Green\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Green\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Red\\\", \\\"Green\\\", \\\"Red\\\"]), 71)\\nTest.assert_equals(color_pattern_times([\\\"Green\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Red\\\", \\\"Red\\\", \\\"Red\\\", \\\"Red\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Red\\\", \\\"Red\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Yellow\\\"]), 52)\\nTest.assert_equals(color_pattern_times([\\\"Yellow\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Yellow\\\"]), 47)\\nTest.assert_equals(color_pattern_times([\\\"Yellow\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Green\\\", \\\"Green\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Green\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Red\\\"]), 53)\\nTest.assert_equals(color_pattern_times([\\\"Green\\\", \\\"Yellow\\\", \\\"Yellow\\\"]), 7)\\nTest.assert_equals(color_pattern_times([\\\"Blue\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Green\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Red\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Red\\\"]), 54)\\nTest.assert_equals(color_pattern_times([\\\"Green\\\"]), 2)\\nTest.assert_equals(color_pattern_times([\\\"Green\\\", \\\"Blue\\\"]), 5)\\nTest.assert_equals(color_pattern_times([\\\"Green\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Red\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Red\\\", \\\"Red\\\", \\\"Red\\\", \\\"Red\\\"]), 56)\\nTest.assert_equals(color_pattern_times([\\\"Blue\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Yellow\\\"]), 83)\\nTest.assert_equals(color_pattern_times([\\\"Yellow\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Red\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Red\\\", \\\"Red\\\", \\\"Yellow\\\"]), 58)\\nTest.assert_equals(color_pattern_times([\\\"Blue\\\", \\\"Red\\\"]), 5)\\nTest.assert_equals(color_pattern_times([\\\"Blue\\\", \\\"Red\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Green\\\", \\\"Green\\\"]), 18)\\nTest.assert_equals(color_pattern_times([\\\"Red\\\", \\\"Green\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Red\\\", \\\"Red\\\"]), 72)\\nTest.assert_equals(color_pattern_times([\\\"Yellow\\\", \\\"Green\\\", \\\"Green\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Red\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Yellow\\\"]), 59)\\nTest.assert_equals(color_pattern_times([\\\"Blue\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Green\\\", \\\"Red\\\"]), 25)\\nTest.assert_equals(color_pattern_times([\\\"Yellow\\\"]), 2)\\nTest.assert_equals(color_pattern_times([\\\"Green\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Green\\\", \\\"Green\\\", \\\"Red\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Red\\\"]), 39)\\nTest.assert_equals(color_pattern_times([\\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\"]), 6)\\nTest.assert_equals(color_pattern_times([\\\"Green\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Red\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Green\\\", \\\"Blue\\\"]), 59)\\nTest.assert_equals(color_pattern_times([\\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\", \\\"Blue\\\"]), 8)\\nTest.assert_equals(color_pattern_times([\\\"Red\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Red\\\", \\\"Red\\\", \\\"Red\\\", \\\"Green\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Yellow\\\", \\\"Green\\\", \\\"Yellow\\\", \\\"Blue\\\", \\\"Green\\\", \\\"Blue\\\", \\\"Red\\\", \\\"Yellow\\\", \\\"Yellow\\\"]), 85)\\nTest.assert_equals(color_pattern_times([]), 0)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,0,2,2,1,2,2,2,2,1,1,2,2,1,1,0,2,1,2,2,2,1,1,1,2,0,2,1,2,1,0,2,0,2,1,2,0,0,1,2,1,1,2,1,2,1,2,2,3,1,2,1,2,2,2,2,0,0,0,1,1,2,2,2,2,2,2,2,2,0,1,2,2,2,0,1,2,3,0,2,2,3,1,1,4,1,2,3,2,2,2,1,1,0,1,0,3,2,2,2,2,1,0,1,1,2,0,2,2,0,1,2,1,3,1,1,2,2,2,2,0,1,2,1,2,1,3,2,1,1,2,2,3,2,0,1,1,0,1,0,2,2,2,2,2,0,1,2,2,0,1,2,2,2,2,2,2,2,2,1,2,2,2,2,2,1,1,0,2,0,1,2,2,0,2,1,0,2,2,0,1,5,2,1,2,0,2,2,2,0,2,2,2,2,2,0,2,0,2,2,0,2,1,2,2,2,2,1,0,2,1,2,2,2,2,1,1,2,1,2,0,2,2,5,2,1,2,1,1,1],\"rators\":[\"EQbnbkkPYtGxiviTp\",\"QnPD4Sv6W4LHc2Qng\",\"C4QntmkYtB89GNtpd\",\"Jqk2uJZZxEv5wZFze\",\"tAF9Gf6PiGogbZuWs\",\"gb9rvGus2Jv7bjZSs\",\"AasGs8AeX9Lcb9xJn\",\"u5u2YpHXiNgzDNJdX\",\"sJWTa7iWeRoRtqJ8N\",\"8JyqsSbN2FJXPr3cw\",\"s5M5RvgqR9BhB9JoC\",\"nnAKmcht7zYeZ7aJK\",\"BeFnbPbMnAM2SjBdZ\",\"2EpTEdXyMYe9SKQTf\",\"Z85ajWfZ4jDPkbvR4\",\"2fxapKr8XGdNeaKi2\",\"zHdcQydaKdxckwcEo\",\"yabtHTtycsWhcGBfD\",\"Yp7uvStL97cC9fKkY\",\"4CFzv558qbGcpQwc4\",\"v3fjGuc7Pq4yjFygS\",\"HQxp7NcdvF92G7bYS\",\"yZvzB3qFb8pkHy4dg\",\"hnyhBFWwNCz9mDfSi\",\"mxX4rH5ELYkdZ2Mbw\",\"LA2YneDcbtiSj5SH6\",\"jeuoearPPTcGPgXhf\",\"w3A7cBWyAfukk6xEQ\",\"4tgBydK887PitgAoi\",\"zg8GmMSP2LkHBtAzy\",\"9Ly8afdtofp8DXzrt\",\"aRqQ42J5zqCmBNd8w\",\"sz8ufn9i8zeiGWpAy\",\"cR3ibTMxLyEdDFCHY\",\"XKi8iZXBCHCaebSHh\",\"dHZqT6h4JMwk5fPC8\",\"6abffx8jQDCf7kgvb\",\"5nY48krepaT4a4QTN\",\"sXs4Dvtk8Pvn2t9ZP\",\"hQJZAKtGhbvtiHRn8\",\"j2wcHGHmPCHbaQEye\",\"zd9FLSzsGz3evKafy\",\"PSrcg6fy835R4c5CW\",\"E9ttMPTkLkKG6nZrg\",\"X29Ekg7HjqHAYgCSM\",\"C9LKGu2g5hSijvDzA\",\"NuqGt5u3s7vJ7HBGR\",\"HPMiZMZ2WGu4FWaRH\",\"rJGeRSCjGzRuYfHZS\",\"N2wnZXkhDH86mgjQ8\",\"g8yJiPAWXbrgxbjfZ\",\"ey3CASd6Je5LEJzfB\",\"2innwjWqxJHo4eRGh\",\"jNvegJWCk5HCtEMbK\",\"8LfTheFzvicameoz9\",\"2QGRoQn2dRq3scu7k\",\"2iFe3EHEH2YdhSKrs\",\"4AoQy4B5fPs2KBinr\",\"HDksZLiRAmpnCKHta\",\"vWgBJaEtcu3XoYuer\",\"8PwfYqoDQFThzNtvf\",\"RX8vfGmaNWLahPWpd\",\"wZoxzQDbso9SMAPkY\",\"r7JXHsnJGCbRxYvDf\",\"So6PHm74mfJuY2WTs\",\"M4vq8ATaS9Jg5X7iP\",\"mybpojPXaZigaqsAD\",\"JZbBYihgT6m7bKvgc\",\"HF28xZKSLM9wEuqNg\",\"ZNnsMeNkdDhHjSrZb\",\"eLkj3Zb2DqiW4AEEh\",\"gJYuGdkXEWWmGRLzu\",\"xowjbn5yEv7c93axA\",\"9uZpgAtSuPZ7W7DL6\",\"KRSKj7ikX2ytWFmod\",\"CEd9tLdXeDeNHSzys\",\"k5mp7Hkg8w5rwiXpe\",\"aEm3Wvj2rFYRL8Lrb\",\"Cc2Cgj4MWXZxsTooC\",\"DEDniTrstQYGounXT\",\"kYWb8BwpKwunQkxeX\",\"KdNDysEsy2TW5QRJ2\",\"M8dQuMrEpP8Hc3tHN\",\"NYFdyF8uL8nmqp7HZ\",\"KBzzKtGw9NxkqD2FE\",\"qPSEBYMMi9WJRr8SA\",\"mDWNyaaQ9hvPCRzSd\",\"9pzFiFK3ANLjQfnr2\",\"9dgvEreRDYRiwLmYv\",\"r5GGrGb3G47LHmPWF\",\"ugPF9GbKWthHhW8AQ\",\"nfXGHENb5md7m355s\",\"4rwxLqLs2mNZNg8NB\",\"FEYpu9RWysAgW3XnP\",\"ahk2qiXKJA753wAJk\",\"MKT7khMBGXzA22ykf\",\"a777e8chPvJkY3tKa\",\"DrkR35NqnP9NDLbq6\",\"nQRzZKeDKuLRf9chX\",\"LWCzZ8mb8gwrRNGfq\",\"XrqNzJ2FRG8HnGiR6\",\"gSFJPsMXnqAog3Q9f\",\"yoLy2DcMG3nZXNwv2\",\"ia7nbrXmdkZkHx2Qw\",\"4yNLEwL2rsx4EE5Nt\",\"dKKMvaYoJunNPk5Wa\",\"NG8PWBSjsM8mMhQEq\",\"ekQh3jzgGLsEMbKo3\",\"eMuCpJ2spXWkJjWNz\",\"2ptN2mhjFwFcHyPZd\",\"XyvFF7WmEuYmPpACF\",\"Wu4PrPgDxXr5Nnjum\",\"EPkSaWoZ77tPNjs36\",\"uKFwxoa9zmG8qHtmC\",\"3cF6NXq3ZEwdkgSjb\",\"H4abACFDH5t8CnnyH\",\"n2BRY9X8899dcG8Bw\",\"ZrKCkX7xxGGZzauFW\",\"jfeozFAYaTHXFPHYS\",\"i3pZLrYcYfRPdcCTj\",\"syRNbbPdLCGXbH2Gy\",\"AMAXM3QM627JESbfN\",\"NNE5HNRXAkmhrWgyQ\",\"YcCLwitFMAEJSnxAW\",\"Q9afpRu3u8zuWuzLQ\",\"jN3vmzf6ad7EubAjQ\",\"iojEnnY9FsMfYzp6f\",\"KGiM2KiXnNJYfSzBF\",\"Pe8vWpDHRuH9nSGKW\",\"yNjkHfHESBAnCssPB\",\"nys6kJatAFrKL59Pf\",\"iS5BrkGLzJyPK7nKt\",\"ypGdjKLkswPZXo89K\",\"yjtdwc2AC4jA2RWtn\",\"YuchXW5T2A57Gv45E\",\"sj8p6xaffaEFbpHQ3\",\"Z3gz45EFAigkxwfte\",\"6SKDJwXpev4qPSzgM\",\"HqmxnQJM66Y57twhn\",\"ta5CrWnBCRusD2WMo\",\"R4SjTgDnpigJYDLyL\",\"oBcs8GLX2ZFLXQy8y\",\"FCFbqPKSAajnbebon\",\"GGprTwrkjuccmrQRg\",\"hRiMXDZNAzyPd5tpt\",\"YA7SDhpgEtsqynvNL\",\"6gS4E2C84vBYTYeDZ\",\"3RtkXp7mC9JpxHHiR\",\"u7i7WPM63n42r8R8o\",\"RehJGBFS6CYiWdjZx\",\"EMJ6uvBZkie429gdg\",\"3nied3n8KG8RSNixH\",\"W5TajitmCyxz87zAC\",\"Wv2vJnEj8ywNmARoF\",\"7AXYH9roEb8ff6ZGw\",\"TPhfpB5tzQWSSn67n\",\"ji5f27FPz4wRRF6Ls\",\"3uxbBcR3pHapTpuso\",\"p8qqFdJ3FSk5x9z3G\",\"KLmLKaJPfsYxp42p2\",\"k2Eo3wyfZZ6KxvKhN\",\"tpxMgkGSHwBjS95Ta\",\"mG8HqKiAQFTdRZthG\",\"gXTAie79kiw28tx5u\",\"kxKR2bx7DrNDPqJPz\",\"7K2GEb5TZRtSpyyGS\",\"9CoqdidjM9KbeKnHY\",\"b5zo7s6xrqWgQnPao\",\"6HgMANhu6WiGyXSGN\",\"QRv96jmNaYsWkxQEG\",\"5HCu9Ydd86QgHDRNP\",\"BrTDhPJcACL2bsrpJ\",\"DxxNN37iEz7b8t2nf\",\"zZDaXBxMzTCBhNkgL\",\"Kh3Pc2ZRusurLaMyP\",\"NzbRqGWspQnWMoDrF\",\"dBzwBtRjZqB98DJeB\",\"wRttWTM59y8m5mx7x\",\"g9FyJ8yeT9ic97Qp2\",\"fznzd3qnvtbFkkizz\",\"CWnZYFNAzm5K8NiiC\",\"DPi9QGLctq2y76KuE\",\"Ecg4m7srYGgZsb4Ck\",\"dj5AyG5fWP8FdsSmZ\",\"aKzYNPqBqb3J3ZgyD\",\"rrSC943cCKNG48sH4\",\"8BFSTCnoe2QggN64c\",\"J3upzLHuEwXH7Z2hx\",\"sHjfbGQGLHE6JR6qu\",\"JS3hNM3XXkxPdg3yk\",\"cAP3n5NY64uoMwzRR\",\"8fZxjQfuXw5HMSRJM\",\"dYPkStFnLvAMsHSzZ\",\"KJCDwGkoXh8qtbbKr\",\"d8qtzoLB264iP8tdY\",\"6MjSiiBLPcvXbXcaZ\",\"RGMbFMZXJr7DhcAJy\",\"WaJ3zN9ugsSy9uDu6\",\"FvFhg2wELM3SCZDZQ\",\"J5T8gZqiZXFuFDTQ7\",\"qZQxPQ2kaNKAMesHT\",\"5XiuAqicKD4hBdu63\",\"iBsN2jda8GGPgqj3u\",\"5hQnRWiKkhgKJXNMP\",\"C2AfMipCicfD58WJ9\",\"chZxqD2F5nrBhDdis\",\"cZccqzRQ9GgjQF6Az\",\"HuNF3xTBzmatyGSTm\",\"o4ixjQGSaYqA2JoM4\",\"2H7qphwdz7PPoFKgc\",\"buX4mCQhtXCfBjeno\",\"5S9nX4rKsnCcnv4Cz\",\"eYfPWvZwnJQkHbSTK\",\"GGdmhAvxXhqhhibJN\",\"AJexRBN9cYQmqvYu6\",\"hzHsgwjark5sZCQ2c\",\"B8n7KqbvEDjZzgj2D\",\"q2tzvkrLASvSjkek9\",\"yod5YhKtPqw2GfG9B\",\"Ds7L5bksw2QRHjrKL\",\"qAby4AWXmTNeusvg3\",\"srJ34BaybkQh3qRkM\",\"CHvzhtXnv8HTbPQ56\",\"bvmTE46bfcM4ogj34\",\"3KkyQm77zsew58Dc2\",\"T6iBEE2jp7f7iEF2P\",\"66a9xX73nmTEuKs9k\",\"Wpn95NqWxncQrwNgz\",\"PC3pLs36zNzpRDSuE\",\"M6fxKEh6am7YajPiT\",\"NQQzu4wyLWW9faWtK\",\"wjc4iejpErBhxWwHo\",\"AFfw7cGg83uYk2Miy\",\"mvJBakQ35CWAnbbEZ\",\"c2q7mY39z5JPEMCaM\",\"2PufnQcsHsfymufX3\",\"R6YxHWAiLgKwy5YvC\",\"sbJcFfQjQ59Wfg4Cd\",\"K6MfKMytoJJuSGewP\",\"RoGGD5cpHb4ftdLDv\",\"X4rzfxGgxx6CS7Bpz\",\"8LqTJugTk5Sn2ZAS7\",\"EfxwqhYdapX3dMQC2\",\"qzXAMXsHZGT8o5hTA\",\"Afnps7TJQuS9sipMb\",\"hR7GMiqGap4CzEWSy\",\"XD5nmvKQchKezPXhy\",\"pduNK68oazqQTtbLp\",\"4TmgHkn5vqyHK3sYC\",\"JhX7jvtpwNyxcc39m\",\"T6Rm8mREPMZSftzrC\",\"5Dd7XwALvvMMwS4Fb\",\"d9LBRxvADNBB5QJMB\",\"dzS6WBTMHyFEag6Fp\",\"4Lwjr34ypKNQNQCar\",\"eHcgvkTGsH7ZziqBo\",\"qaR8DnWrTk8Mus5Q2\",\"yAouD3PxzED8a4gap\",\"ExtLwnLBEiWJxAskL\",\"PJyYjXrRLiqD3bREz\",\"uGuS9YRXW2nj4p6zf\",\"sW78rbapvsS3AnuJe\",\"Wi4H6ayKsNDWWQCG5\",\"rCrbqMiaGPgHYTNxu\",\"5QN8R22z43SrwoHDz\"],\"total\":291,\"quality\":[5,5,5,5,5,5,5,4,5,5,5,5,4,5,5,5,5,5,5,5,5,5,4,5,5,5,5,4,3,5,5,5,5,5,5,5]},\"flags\":0},\"summary\":\"When coloring a striped pattern, you may start by coloring each square sequentially, meaning you spend time needing to switch coloring pencils.\\n\\nCreate a function where given a list of colors cols, return how long it takes to color the whole pattern. Note the following times:\\n\\nIt takes 1 second to switch between pencils.\\nIt takes 2 seconds to * color a square*\",\"tags\":[\"arrays\",\"algorithms\"],\"timestamp\":{\"$date\":1581538131654},\"title\":\"Switching Between Pencils\",\"quality\":4.833333333333333,\"family\":[{\"_id\":\"yoAg3hEhjMipjJKuu\",\"language\":\"cpp\"},{\"_id\":\"Np7R8F24PaqBShZc5\",\"language\":\"javascript\"},{\"_id\":\"7p4AqhGz9YgFbkpXh\",\"language\":\"php\"},{\"_id\":\"MFteyMABeuGaga3a7\",\"language\":\"python3\"},{\"_id\":\"RxuQ7j9YJatuc7eWh\",\"language\":\"ruby\"}]}}"]