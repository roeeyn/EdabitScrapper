a["{\"msg\":\"result\",\"id\":\"2200\",\"result\":{\"_id\":\"B5J4Bfgg7PoDHBBZQ\",\"author\":\"Donnamae\",\"authorId\":\"yZvzB3qFb8pkHy4dg\",\"code\":\"def within_triangle(p1, p2, p3, test):\\n\\t\",\"difficulty\":3.386861313868613,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"EBSokYCuP3mJNL8cd\",\"instructions\":\"Create a function that takes four tuples. The first three are (x, y) coordinates of three corners of a triangle. Return `True` if the fourth tuple — the (x, y) coordinates of a test point — lies within the triangle, `False` if it doesn't.\\n\\n### Examples\\n```\\nwithin_triangle((1, 4), (5, 6), (6, 1), (4, 5)) ➞ True\\n\\nwithin_triangle((1, 4), (5, 6), (6, 1), (3, 2)) ➞ False\\n\\nwithin_triangle((-6, 2), (-2, -2), (8, 4), (4, 2)) ➞ True\\n```\\n\\n### Notes\\nN/A\",\"lab\":\"Test.assert_equals(within_triangle((1, 4), (5, 6), (6, 1), (4, 5)), True)\\nTest.assert_equals(within_triangle((1, 4), (5, 6), (6, 1), (3, 2)), False)\\nTest.assert_equals(within_triangle((1, 7), (2, 4), (9, 3), (2, 6)), True)\\nTest.assert_equals(within_triangle((1, 7), (2, 4), (9, 3), (6, 5)), False)\\nTest.assert_equals(within_triangle((-2, 6), (12, -3), (1, 7), (9, -1)), True)\\nTest.assert_equals(within_triangle((-2, 6), (12, -3), (1, 7), (4, 2)), False)\\nTest.assert_equals(within_triangle((-6, 2), (-2, -2), (8, 4), (4, 2)), True)\\nTest.assert_equals(within_triangle((-6, 2), (-2, -2), (8, 4), (0, -4)), False)\",\"language\":\"python3\",\"summary\":\"Create a function that takes four tuples. The first three are (x, y) coordinates of three corners of a triangle. Return True if the fourth tuple — the (x, y) coordinates of a test point — lies within the triangle, False if it doesn't.\\n\\nExamples\\nwithin_triangle((1, 4), (5, 6), (6, 1), (4, 5)) ➞ True\\n\\nwithin_triangle((1, 4), (5, 6), (6, 1), (3, 2)) ➞ False\\n\\nwith\",\"tags\":[\"algebra\",\"math\",\"validation\"],\"timestamp\":{\"$date\":1559731701825},\"title\":\"Point Within Triangle\",\"stats\":{\"completed\":{\"total\":150,\"ratings\":[3,3,3,3,3,3,3,3,3,3,3,5,0,4,3,5,2,3,5,3,3,3,5,4,5,4,3,5,4,3,4,3,2,4,2,2,3,3,5,3,2,2,5,2,5,3,5,3,2,0,5,2,5,4,4,0,5,2,5,1,3,3,2,3,3,5,0,0,3,5,5,0,2,4,5,2,3,4,2,4,5,4,5,5,3,5,5,5,5,5,3,5,5,2,5,2,5,5,4,3,1,3,3,1,3,5,5,4,0,2,2,5,3,5,4,5,2,5,5,5,3,5,2,5,5,3,1,5,3,2,4,5,0,0,4,5,5],\"rators\":[\"tAF9Gf6PiGogbZuWs\",\"rdNqeKKCwqmELuhvJ\",\"qr28t3MiuxdsqWcbo\",\"gb9rvGus2Jv7bjZSs\",\"AYaEkTWLMmfzpwejr\",\"QaE2QnnBbzdiExxPH\",\"7REMi9ZPhC4R5qveo\",\"5GKPqzdunfQ2rxBcS\",\"tAzKDfb3oztBwzNo3\",\"8JyqsSbN2FJXPr3cw\",\"RbRrxRryTKPFhxroj\",\"7g3vZaQXhLpxrajyg\",\"ELfyFys8d3EBi55Fg\",\"MXjxGML2X75x64vJo\",\"cdvwuSNJYydmwJu3D\",\"mBGpSNpLxBmS68CET\",\"QKYi6pYeaYFovNHX4\",\"GRRag6PoDcYKbXuZ5\",\"BFNm9gacwba9KyLFW\",\"aCNWav8S8Try9RkC6\",\"Br5dkvNSpHFHnr3w8\",\"9QzzKBMcdyjAfioya\",\"ZbB6NcKPmMRHT7aSu\",\"Tin42WiZ4JTDEnS7b\",\"Den3wJ8yQ3khPa4gC\",\"HThhFmiv96Di2EYSN\",\"5Qvy7fNM2YEQ6PtbY\",\"7BvK9WWXi9Arqh63Q\",\"ogyeeaEAjmdSBsnta\",\"FWkXEyT8mcyKsYATx\",\"8MmSRZi2qKXLmj2pE\",\"WDFNDEQHKSRZuEs88\",\"nLpdvK7EcahCqNe8X\",\"JpeTZm5QTWFLqg9Bx\",\"nYoc6fEraRbFYbESd\",\"wT5gGgvjKc5wz59AQ\",\"PA6JbX3Y7AAhCdPCg\",\"erEunWkRveQoPZyTC\",\"C4QntmkYtB89GNtpd\",\"DC46Jz5naS68LTdrs\",\"8PwfYqoDQFThzNtvf\",\"FJa6pFTqXKsbocTCu\",\"eHcgvkTGsH7ZziqBo\",\"caoRMhfqpPEKnPz8z\",\"2fxapKr8XGdNeaKi2\",\"FHSJnAYTbcsKFgeQa\",\"6W2GSzrYjMD9ANBFY\",\"Jqk2uJZZxEv5wZFze\",\"Kg94pDSdZJ2wSkMcY\",\"AbrJ8hMyv5fFXG6DN\",\"JJtMjK6QaWrcK5mpS\",\"xyHfEdcYBDznunq6n\",\"9uZpgAtSuPZ7W7DL6\",\"qJZsi5rhRnWA38FbA\",\"A9Bwf9zSrNGhr5GDo\",\"RxjsoBmCqZgg5Fq5a\",\"hwLAvyumMvYXNv3j5\",\"sZDYNicocwXesSMXb\",\"DwetpbChQM4r6Gwah\",\"t7BnRyo7NH5Nx22HR\",\"pzZMMmJRaxwGAgaTH\",\"X4iqEdg7dPjFpoASw\",\"de3DhFz9dW8vdPanZ\",\"nmXg7Hfeh3jMLHSsa\",\"rQWctcxr7vvh32DoM\",\"fMR9RcfgPJWiLgx7k\",\"Q2q7wd5e5cfCrwPxq\",\"bLpgu8xTdpDPFSAsM\",\"azHSATBuuQ5wz9bvB\",\"BZ9aDwsT223J4ZG74\",\"pSdBNsFmshP4TAa7y\",\"u5u2YpHXiNgzDNJdX\",\"RBr66Dmsyt2bcpm9x\",\"F2aeZ4zqupp7a8SkW\",\"s5M5RvgqR9BhB9JoC\",\"HTLibTPoDbHsqxSaf\",\"RDNaX8rgCC587tyr3\",\"GJmKcqu7xppQyBaTt\",\"SuJeLnhfR3smGu3WZ\",\"kDq2TnPdy7hGKdAD5\",\"aEm3Wvj2rFYRL8Lrb\",\"jpiYk9LbC3oDg84dz\",\"BtaTDR5Lj3f5FPMJF\",\"GntfZ8yP7EjSYrpiJ\",\"ftXLsTaA7yHmhuEsY\",\"S9hHPiybdTKyuELsn\",\"kYWb8BwpKwunQkxeX\",\"bJaPCBx63YxdJAuTS\",\"HmKFZqFH9YC346djy\",\"bJxaKHJqR82EWw8Su\",\"3MybBtCNPcFHLMYmJ\",\"vTfyrr4pGddp8rbXc\",\"ZNnsMeNkdDhHjSrZb\",\"CC92AinaaYjsm8xy9\",\"S6ipW8Xzds8QDszn9\",\"5dHucvf2qBYyKim7X\",\"SKeSSfqSmCk65vjYh\",\"fznzd3qnvtbFkkizz\",\"RnTBbuFCrJWW6Ayvj\",\"Nfsj4eNFDjaFa39ga\",\"xn7uGNKeAwPEkP9oA\",\"XALJWMEBZsQ7Zf7ks\",\"KZ2xddpM2f9JRaryB\",\"JhAEbSj5sAMofcxBf\",\"eK8jQjdksmZxtSk3J\",\"cxABox46qWvJRyidE\",\"SgZ2t9xFuRqdJGofp\",\"yTtSCvGPyYna6JuRC\",\"b5zo7s6xrqWgQnPao\",\"GGprTwrkjuccmrQRg\",\"J23RcmzbdtBbPCTjT\",\"hZW6j5s6RHpx35phy\",\"KEmTti9Tza8A2FLQW\",\"GDcZ8xLorv7c8tgkq\",\"h4x2jaMdj5aQZbW5g\",\"9onLFjwWr6DqyRBJw\",\"5rX3qPFdvRQ9G7xZQ\",\"WPf3wuMaAipBActzR\",\"iS5BrkGLzJyPK7nKt\",\"ofwoyn2Aoj2hoXN7x\",\"axJMjk7YuZkZM7mWK\",\"eGDnKTBdj2hudqZn4\",\"b3Dk2LqoEgripS3Y3\",\"mH5AfrrfASMdRvhtK\",\"8sNv5PTHa7XQ8bNqR\",\"TxsYMnonbDnTQ8XDf\",\"yod5YhKtPqw2GfG9B\",\"LQxof8pGabGuWP7Gn\",\"yjtdwc2AC4jA2RWtn\",\"gJYuGdkXEWWmGRLzu\",\"gKnWjDjwrJh7MK2df\",\"T6iBEE2jp7f7iEF2P\",\"pnzfNatg3P32mMYQY\",\"v97tB73ypDGn7Wazg\",\"Kzx9kjSL8Zbt5eX6G\"],\"quality\":[4,5,5,5,5,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"isHidden\":false,\"quality\":4.875,\"family\":[{\"_id\":\"kCapSLB9tWKjCQGNE\",\"language\":\"cpp\"},{\"_id\":\"F2o3AGSk4NEctvieS\",\"language\":\"csharp\"},{\"_id\":\"3r6rTcdpkQtzFmHwy\",\"language\":\"javascript\"},{\"_id\":\"B5J4Bfgg7PoDHBBZQ\",\"language\":\"python3\"},{\"_id\":\"dyfT48zyohBnMBY72\",\"language\":\"ruby\"},{\"_id\":\"7RpwmrgrJLA3e92fq\",\"language\":\"swift\"}]}}"]