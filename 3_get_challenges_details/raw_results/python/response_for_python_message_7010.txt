a["{\"msg\":\"result\",\"id\":\"2212\",\"result\":{\"_id\":\"HdrqkdT4r9DeKPjCM\",\"author\":\"xAlien95\",\"authorId\":\"cRpaCxYRmGcN3Nsoj\",\"code\":\"def is_polygonal(n):\\n\\t\",\"difficulty\":3.4242424242424243,\"editorId\":\"cRpaCxYRmGcN3Nsoj\",\"familyId\":\"7Yp6R7paMRsPKaCYL\",\"instructions\":\"The **centered polygonal numbers** are a family of sequences of 2-dimensional figurate numbers, each formed by a central dot, surrounded by polygonal layers with a constant number of sides. Each side of a polygonal layer contains one dot more than a side in the previous layer.\\n\\n![][i1] | ![][i2]\\n- | -\\nCentered triangular numbers | Centered square numbers\\n![][i3] | ![][i4]\\nCentered pentagonal numbers | Centered hexagonal numbers\\n\\nIn the following table are listed the first 12 terms of the sequences of centered _k_-polygonal numbers, with _k_ from 3 to 22:\\n\\nk | Name | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11\\n-:| - | -:| -:| -:| -:| -:| -:| -:| -:| -:| -:| -:| -:\\n3 | Triangular | 1 | 4 | 10 | 19 | 31 | 46 | 64 | 85 | 109 | 136 | 166 | 199\\n4 | Square | 1 | 5 | 13 | 25 | 41 | 61 | 85 | 113 | 145 | 181 | 221 | 265\\n5 | Pentagonal | 1 | 6 | 16 | 31 | 51 | 76 | 106 | 141 | 181 | 226 | 276 | 331\\n6 | Hexagonal | 1 | 7 | 19 | 37 | 61 | 91 | 127 | 169 | 217 | 271 | 331 | 397\\n7 | Heptagonal | 1 | 8 | 22 | 43 | 71 | 106 | 148 | 197 | 253 | 316 | 386 | 463\\n8 | Octagonal | 1 | 9 | 25 | 49 | 81 | 121 | 169 | 225 | 289 | 361 | 441 | 529\\n9 | Nonagonal | 1 | 10 | 28 | 55 | 91 | 136 | 190 | 253 | 325 | 406 | 496 | 595\\n10 | Decagonal | 1 | 11 | 31 | 61 | 101 | 151 | 211 | 281 | 361 | 451 | 551 | 661\\n11 | Hendecagonal | 1 | 12 | 34 | 67 | 111 | 166 | 232 | 309 | 397 | 496 | 606 | 727\\n12 | Dodecagonal | 1 | 13 | 37 | 73 | 121 | 181 | 253 | 337 | 433 | 541 | 661 | 793\\n13 | Tridecagonal | 1 | 14 | 40 | 79 | 131 | 196 | 274 | 365 | 469 | 586 | 716 | 859\\n14 | Tetradecagonal | 1 | 15 | 43 | 85 | 141 | 211 | 295 | 393 | 505 | 631 | 771 | 925\\n15 | Pentadecagonal | 1 | 16 | 46 | 91 | 151 | 226 | 316 | 421 | 541 | 676 | 826 | 991\\n16 | Hexadecagonal | 1 | 17 | 49 | 97 | 161 | 241 | 337 | 449 | 577 | 721 | 881 | 1057\\n17 | Heptadecagonal | 1 | 18 | 52 | 103 | 171 | 256 | 358 | 477 | 613 | 766 | 936 | 1123\\n18 | Octadecagonal | 1 | 19 | 55 | 109 | 181 | 271 | 379 | 505 | 649 | 811 | 991 | 1189\\n19 | Enneadecagonal | 1 | 20 | 58 | 115 | 191 | 286 | 400 | 533 | 685 | 856 | 1046 | 1255\\n20 | Icosagonal | 1 | 21 | 61 | 121 | 201 | 301 | 421 | 561 | 721 | 901 | 1101 | 1321\\n21 | Icosihenagonal | 1 | 22 | 64 | 127 | 211 | 316 | 442 | 589 | 757 | 946 | 1156 | 1387\\n22 | Icosidigonal | 1 | 23 | 67 | 133 | 221 | 331 | 463 | 617 | 793 | 991 | 1211 | 1453\\n\\nAs you can see:\\n- 6 is the 1st _pentagonal number_.\\n- 16 is the 2nd _pentagonal number_ and the 1st _pentadecagonal number_.\\n- 19 is the 3rd _triangular number_, the 2nd _hexagonal number_ and the 1st _octadecagonal number_.\\n\\nWrite a function that takes an integer `n` as argument and returns its classification as polygonal number:\\n- return `\\\"0th of all\\\"` if `n` is 1, since it is the 0th term of every centered polygonal number sequence.\\n- return a list whose generic element is a string formatted as `\\\"{i}th {k}-gonal number\\\"` if `n` is the _i_-th _k_-gonal number, in _k_-ascending order.\\n- return `False` if `n` is not a _k_-gonal number for any _k_ > 2.\\n\\n[i1]: https://edabit-challenges.s3.amazonaws.com/CenteredTriangularNumber_1.png\\n[i2]: https://edabit-challenges.s3.amazonaws.com/CenteredSquareNumber_2.png\\n[i3]: https://edabit-challenges.s3.amazonaws.com/CenteredPentagonalNumber_3.png\\n[i4]: https://edabit-challenges.s3.amazonaws.com/CenteredHexagonalNumber_4.png\\n\\n### Examples\\n```\\nis_polygonal(3) ➞ False\\n\\nis_polygonal(4) ➞ [\\\"1st 3-gonal number\\\"]\\n\\nis_polygonal(16) ➞ [\\\"2nd 5-gonal number\\\", \\\"1st 15-gonal number\\\"]\\n```\\n\\n### Notes\\nN/A\",\"isHidden\":false,\"lab\":\"Test.assert_equals(is_polygonal(1), \\\"0th of all\\\")\\nTest.assert_equals(is_polygonal(2), False)\\nTest.assert_equals(is_polygonal(3), False)\\nTest.assert_equals(is_polygonal(4), [\\\"1st 3-gonal number\\\"])\\nTest.assert_equals(is_polygonal(5), [\\\"1st 4-gonal number\\\"])\\nTest.assert_equals(is_polygonal(6), [\\\"1st 5-gonal number\\\"])\\nTest.assert_equals(is_polygonal(7), [\\\"1st 6-gonal number\\\"])\\nTest.assert_equals(is_polygonal(8), [\\\"1st 7-gonal number\\\"])\\nTest.assert_equals(is_polygonal(9), [\\\"1st 8-gonal number\\\"])\\nTest.assert_equals(is_polygonal(10), [\\\"2nd 3-gonal number\\\", \\\"1st 9-gonal number\\\"])\\nTest.assert_equals(is_polygonal(11), [\\\"1st 10-gonal number\\\"])\\nTest.assert_equals(is_polygonal(13), [\\\"2nd 4-gonal number\\\", \\\"1st 12-gonal number\\\"])\\nTest.assert_equals(is_polygonal(16), [\\\"2nd 5-gonal number\\\", \\\"1st 15-gonal number\\\"])\\nTest.assert_equals(is_polygonal(19), [\\\"3rd 3-gonal number\\\", \\\"2nd 6-gonal number\\\", \\\"1st 18-gonal number\\\"])\\nTest.assert_equals(is_polygonal(19), [\\\"3rd 3-gonal number\\\", \\\"2nd 6-gonal number\\\", \\\"1st 18-gonal number\\\"])\\nTest.assert_equals(is_polygonal(25), [\\\"3rd 4-gonal number\\\", \\\"2nd 8-gonal number\\\", \\\"1st 24-gonal number\\\"])\\nTest.assert_equals(is_polygonal(31), [\\\"4th 3-gonal number\\\", \\\"3rd 5-gonal number\\\", \\\"2nd 10-gonal number\\\", \\\"1st 30-gonal number\\\"])\\nTest.assert_equals(is_polygonal(37), [\\\"3rd 6-gonal number\\\", \\\"2nd 12-gonal number\\\", \\\"1st 36-gonal number\\\"])\\nTest.assert_equals(is_polygonal(43), [\\\"3rd 7-gonal number\\\", \\\"2nd 14-gonal number\\\", \\\"1st 42-gonal number\\\"])\\nTest.assert_equals(is_polygonal(46), [\\\"5th 3-gonal number\\\", \\\"2nd 15-gonal number\\\", \\\"1st 45-gonal number\\\"])\\nTest.assert_equals(is_polygonal(49), [\\\"3rd 8-gonal number\\\", \\\"2nd 16-gonal number\\\", \\\"1st 48-gonal number\\\"])\\nTest.assert_equals(is_polygonal(55), [\\\"3rd 9-gonal number\\\", \\\"2nd 18-gonal number\\\", \\\"1st 54-gonal number\\\"])\\nTest.assert_equals(is_polygonal(61), [\\\"5th 4-gonal number\\\", \\\"4th 6-gonal number\\\", \\\"3rd 10-gonal number\\\", \\\"2nd 20-gonal number\\\", \\\"1st 60-gonal number\\\"])\\nTest.assert_equals(is_polygonal(64), [\\\"6th 3-gonal number\\\", \\\"2nd 21-gonal number\\\", \\\"1st 63-gonal number\\\"])\\nTest.assert_equals(is_polygonal(67), [\\\"3rd 11-gonal number\\\", \\\"2nd 22-gonal number\\\", \\\"1st 66-gonal number\\\"])\\nTest.assert_equals(is_polygonal(73), [\\\"3rd 12-gonal number\\\", \\\"2nd 24-gonal number\\\", \\\"1st 72-gonal number\\\"])\\nTest.assert_equals(is_polygonal(76), [\\\"5th 5-gonal number\\\", \\\"2nd 25-gonal number\\\", \\\"1st 75-gonal number\\\"])\\nTest.assert_equals(is_polygonal(79), [\\\"3rd 13-gonal number\\\", \\\"2nd 26-gonal number\\\", \\\"1st 78-gonal number\\\"])\\nTest.assert_equals(is_polygonal(85), [\\\"7th 3-gonal number\\\", \\\"6th 4-gonal number\\\", \\\"3rd 14-gonal number\\\", \\\"2nd 28-gonal number\\\", \\\"1st 84-gonal number\\\"])\\nTest.assert_equals(is_polygonal(91), [\\\"5th 6-gonal number\\\", \\\"4th 9-gonal number\\\", \\\"3rd 15-gonal number\\\", \\\"2nd 30-gonal number\\\", \\\"1st 90-gonal number\\\"])\\nTest.assert_equals(is_polygonal(97), [\\\"3rd 16-gonal number\\\", \\\"2nd 32-gonal number\\\", \\\"1st 96-gonal number\\\"])\\nTest.assert_equals(is_polygonal(361), [\\\"15th 3-gonal number\\\", \\\"9th 8-gonal number\\\", \\\"8th 10-gonal number\\\", \\\"5th 24-gonal number\\\", \\\"4th 36-gonal number\\\", \\\"3rd 60-gonal number\\\", \\\"2nd 120-gonal number\\\", \\\"1st 360-gonal number\\\"])\\nTest.assert_equals(is_polygonal(421), [\\\"14th 4-gonal number\\\", \\\"7th 15-gonal number\\\", \\\"6th 20-gonal number\\\", \\\"5th 28-gonal number\\\", \\\"4th 42-gonal number\\\", \\\"3rd 70-gonal number\\\", \\\"2nd 140-gonal number\\\", \\\"1st 420-gonal number\\\"])\\nTest.assert_equals(is_polygonal(721), [\\\"15th 6-gonal number\\\", \\\"9th 16-gonal number\\\", \\\"8th 20-gonal number\\\", \\\"5th 48-gonal number\\\", \\\"4th 72-gonal number\\\", \\\"3rd 120-gonal number\\\", \\\"2nd 240-gonal number\\\", \\\"1st 720-gonal number\\\"])\\nTest.assert_equals(is_polygonal(841), [\\\"20th 4-gonal number\\\", \\\"15th 7-gonal number\\\", \\\"14th 8-gonal number\\\", \\\"7th 30-gonal number\\\", \\\"6th 40-gonal number\\\", \\\"5th 56-gonal number\\\", \\\"4th 84-gonal number\\\", \\\"3rd 140-gonal number\\\", \\\"2nd 280-gonal number\\\", \\\"1st 840-gonal number\\\"])\\nTest.assert_equals(is_polygonal(901), [\\\"24th 3-gonal number\\\", \\\"9th 20-gonal number\\\", \\\"8th 25-gonal number\\\", \\\"5th 60-gonal number\\\", \\\"4th 90-gonal number\\\", \\\"3rd 150-gonal number\\\", \\\"2nd 300-gonal number\\\", \\\"1st 900-gonal number\\\"])\\nTest.assert_equals(is_polygonal(925), [\\\"21st 4-gonal number\\\", \\\"11th 14-gonal number\\\", \\\"7th 33-gonal number\\\", \\\"6th 44-gonal number\\\", \\\"3rd 154-gonal number\\\", \\\"2nd 308-gonal number\\\", \\\"1st 924-gonal number\\\"])\\nTest.assert_equals(is_polygonal(3781), [\\\"35th 6-gonal number\\\", \\\"27th 10-gonal number\\\", \\\"20th 18-gonal number\\\", \\\"14th 36-gonal number\\\", \\\"9th 84-gonal number\\\", \\\"8th 105-gonal number\\\", \\\"7th 135-gonal number\\\", \\\"6th 180-gonal number\\\", \\\"5th 252-gonal number\\\", \\\"4th 378-gonal number\\\", \\\"3rd 630-gonal number\\\", \\\"2nd 1260-gonal number\\\", \\\"1st 3780-gonal number\\\"])\\nTest.assert_equals(is_polygonal(6931), [\\\"44th 7-gonal number\\\", \\\"35th 11-gonal number\\\", \\\"21st 30-gonal number\\\", \\\"20th 33-gonal number\\\", \\\"14th 66-gonal number\\\", \\\"11th 105-gonal number\\\", \\\"10th 126-gonal number\\\", \\\"9th 154-gonal number\\\", \\\"6th 330-gonal number\\\", \\\"5th 462-gonal number\\\", \\\"4th 693-gonal number\\\", \\\"3rd 1155-gonal number\\\", \\\"2nd 2310-gonal number\\\", \\\"1st 6930-gonal number\\\"])\\nTest.assert_equals(is_polygonal(7561), [\\\"35th 12-gonal number\\\", \\\"27th 20-gonal number\\\", \\\"20th 36-gonal number\\\", \\\"15th 63-gonal number\\\", \\\"14th 72-gonal number\\\", \\\"9th 168-gonal number\\\", \\\"8th 210-gonal number\\\", \\\"7th 270-gonal number\\\", \\\"6th 360-gonal number\\\", \\\"5th 504-gonal number\\\", \\\"4th 756-gonal number\\\", \\\"3rd 1260-gonal number\\\", \\\"2nd 2520-gonal number\\\", \\\"1st 7560-gonal number\\\"])\\nTest.assert_equals(is_polygonal(7981), [\\\"56th 5-gonal number\\\", \\\"20th 38-gonal number\\\", \\\"19th 42-gonal number\\\", \\\"14th 76-gonal number\\\", \\\"7th 285-gonal number\\\", \\\"6th 380-gonal number\\\", \\\"5th 532-gonal number\\\", \\\"4th 798-gonal number\\\", \\\"3rd 1330-gonal number\\\", \\\"2nd 2660-gonal number\\\", \\\"1st 7980-gonal number\\\"])\\nTest.assert_equals(is_polygonal(9241), [\\\"55th 6-gonal number\\\", \\\"21st 40-gonal number\\\", \\\"20th 44-gonal number\\\", \\\"15th 77-gonal number\\\", \\\"14th 88-gonal number\\\", \\\"11th 140-gonal number\\\", \\\"10th 168-gonal number\\\", \\\"7th 330-gonal number\\\", \\\"6th 440-gonal number\\\", \\\"5th 616-gonal number\\\", \\\"4th 924-gonal number\\\", \\\"3rd 1540-gonal number\\\", \\\"2nd 3080-gonal number\\\", \\\"1st 9240-gonal number\\\"])\\nTest.assert_equals(is_polygonal(60000), [\\\"1st 59999-gonal number\\\"])\\nTest.assert_equals(is_polygonal(60061), [\\\"104th 11-gonal number\\\", \\\"77th 20-gonal number\\\", \\\"65th 28-gonal number\\\", \\\"55th 39-gonal number\\\", \\\"39th 77-gonal number\\\", \\\"21st 260-gonal number\\\", \\\"20th 286-gonal number\\\", \\\"14th 572-gonal number\\\", \\\"13th 660-gonal number\\\", \\\"12th 770-gonal number\\\", \\\"11th 910-gonal number\\\", \\\"10th 1092-gonal number\\\", \\\"7th 2145-gonal number\\\", \\\"6th 2860-gonal number\\\", \\\"5th 4004-gonal number\\\", \\\"4th 6006-gonal number\\\", \\\"3rd 10010-gonal number\\\", \\\"2nd 20020-gonal number\\\", \\\"1st 60060-gonal number\\\"])\\nTest.assert_equals(is_polygonal(65521), [\\\"104th 12-gonal number\\\", \\\"90th 16-gonal number\\\", \\\"39th 84-gonal number\\\", \\\"35th 104-gonal number\\\", \\\"20th 312-gonal number\\\", \\\"15th 546-gonal number\\\", \\\"14th 624-gonal number\\\", \\\"13th 720-gonal number\\\", \\\"12th 840-gonal number\\\", \\\"9th 1456-gonal number\\\", \\\"8th 1820-gonal number\\\", \\\"7th 2340-gonal number\\\", \\\"6th 3120-gonal number\\\", \\\"5th 4368-gonal number\\\", \\\"4th 6552-gonal number\\\", \\\"3rd 10920-gonal number\\\", \\\"2nd 21840-gonal number\\\", \\\"1st 65520-gonal number\\\"])\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,3,3,4,5,5,0,5,5,2,3,5,4,3,3,4,4,3,3,3,5,2,5,0,4,5,2,4,4],\"rators\":[\"cRpaCxYRmGcN3Nsoj\",\"JWL7tCEkLuFXu9xtm\",\"4oj74SdrYfpJgEAmd\",\"pzZMMmJRaxwGAgaTH\",\"fMR9RcfgPJWiLgx7k\",\"X4iqEdg7dPjFpoASw\",\"t7BnRyo7NH5Nx22HR\",\"Jqk2uJZZxEv5wZFze\",\"3GhZpJLhhrm6AR3aM\",\"8PwfYqoDQFThzNtvf\",\"s5M5RvgqR9BhB9JoC\",\"aEm3Wvj2rFYRL8Lrb\",\"YsAz93yZw8KKPupKv\",\"C3GBEjPfwC5wxmfne\",\"vTfyrr4pGddp8rbXc\",\"DwetpbChQM4r6Gwah\",\"bJxaKHJqR82EWw8Su\",\"W4zFJhfQoDah7sxKu\",\"xn7uGNKeAwPEkP9oA\",\"Ecg4m7srYGgZsb4Ck\",\"QGmp3LSCSoWAbcTjs\",\"PbFZKHNGGqEacTSQS\",\"h4x2jaMdj5aQZbW5g\",\"iS5BrkGLzJyPK7nKt\",\"8sNv5PTHa7XQ8bNqR\",\"yod5YhKtPqw2GfG9B\",\"yjtdwc2AC4jA2RWtn\",\"bJaPCBx63YxdJAuTS\",\"2PufnQcsHsfymufX3\",\"3bpN6HHsJNZv9sGet\"],\"total\":34,\"quality\":[5,5,5]},\"flags\":0},\"summary\":\"The centered polygonal numbers are a family of sequences of 2-dimensional figurate numbers, each formed by a central dot, surrounded by polygonal layers with a constant number of sides. Each side of a polygonal layer contains one dot more than a side in the previous layer.\\n\\n |\\n| -\\nCentered triangular numbers | Centered square numbers\\n |\\nCentered pentagonal num\",\"tags\":[\"math\",\"numbers\"],\"timestamp\":{\"$date\":1580614268615},\"title\":\"Centered Polygonal Number\",\"quality\":5,\"family\":[{\"_id\":\"BWQDbgcWTGaZe4itp\",\"language\":\"cpp\"},{\"_id\":\"ec8eWXPWK7JtPNP8d\",\"language\":\"javascript\"},{\"_id\":\"HdrqkdT4r9DeKPjCM\",\"language\":\"python3\"},{\"_id\":\"Qj7F4FWjtFda3p3u3\",\"language\":\"ruby\"}]}}"]