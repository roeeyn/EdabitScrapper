a["{\"msg\":\"result\",\"id\":\"1158\",\"result\":{\"_id\":\"ePaMPXuKScJNs34Ay\",\"author\":\"Luis Pereira\",\"authorId\":\"aEm3Wvj2rFYRL8Lrb\",\"code\":\"def add_it_up(lst):\\n\\t\",\"difficulty\":1.6111111111111112,\"editorId\":\"aEm3Wvj2rFYRL8Lrb\",\"familyId\":\"g5wad5BxuFLzFczxH\",\"instructions\":\"This challenge concerns some functionality of the `sum` method that is easy to overlook.\\n\\nAs we all know, `sum([4, 14, 17, 10])` is an alternative way of writing `4 + 14 + 17 + 10`.\\n\\nSo far, nothing particularly interesting. However, things get more noteworthy when one recalls that in Python the addition `+` isn't just used to add numbers.\\n\\nFor example, the code:\\n\\n```\\n[1, 2] + [4] + [9, 8, 6]\\n```\\n\\n... also makes perfect sense. And, as it turns out, this code can be rewritten using `sum` as:\\n\\n```\\nsum([[1, 2], [4], [9, 8, 6]], [])\\n```\\n\\n_**Caution:**_ One _must_ include the empty list `[]` in the code, which tells Python \\\"how to start the sum\\\". More explicitly, the code above secretly computes the sum `[] + [1, 2] + [4] + [9, 8, 6]`. Thus, if one doesn't include `[]` then Python will try to start the sum at `0` (e.g. the code `sum([[1, 2], [4], [9, 8, 6]])` computes `0 + [1, 2] + [4] + [9, 8, 6]`), resulting in a type error.\\n\\nAdditionally, `sum` can also be used to add lists of tuples.\\n\\nFor example, the sum:\\n\\n```\\n(2, 4, 5) + (6,) + (9, 8, 7)\\n```\\n\\n... can be similarly rewritten as:\\n\\n```\\nsum([(2, 4, 5), (6,), (9, 8, 7)], ())\\n```\\n\\n**_Goal:_** Write a function which receives a non-empty list whose elements are either numbers, lists, or tuples and **adds them up**. Note that in each test all elements will be of the same type so that adding is possible.\\n\\n### Examples\\n```\\nadd_it_up([4, 14, 17, 10]) ➞ 45\\n# 4 + 14 + 17 + 10\\n\\nadd_it_up([[1, 2], [4], [9, 8, 6]]) ➞ [1, 2, 4, 9, 8, 6]\\n# [1, 2] + [4] + [9, 8, 6]\\n\\nadd_it_up([(2, 4, 5), (6,), (9, 8, 7)]) ➞ (2, 4, 5, 6, 9, 8, 7)\\n# (2, 4, 5) + (6,) + (9, 8, 7)\\n```\\n\\n### Notes\\n- Notably, though Python also allows us to add strings, such as with the code `\\\"addition \\\" + \\\"of \\\" + \\\"strings\\\"`, this addition _**can not**_ be performed using `sum`. If one attempts to run `sum([\\\"addition \\\", \\\"of \\\", \\\"strings\\\"], \\\"\\\")` one obtains an error message explicitly saying that `sum` does not work with strings, and indicating that one must use the alternative `\\\"\\\".join([\\\"addition \\\", \\\"of \\\", \\\"strings\\\"])` syntax instead.\\n- If you are not familiar with tuples, you may be wondering what's the deal with the comma in the tuple `(6,)` in the third example. As it turns out, this comma is _essential_ for Python to recognize `(6,)` as a _tuple with a single entry_, since the code `(6)` is interpreted as simply denoting the number `6`.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(add_it_up([4, 14, 17, 10]), 45)\\nTest.assert_equals(add_it_up([1.5, 8, 9.7, 7.5, 13]), 39.7)\\nTest.assert_equals(add_it_up([[1, 2], [4], [9, 8, 6], [5, 5]]), [1, 2, 4, 9, 8, 6, 5, 5])\\nTest.assert_equals(add_it_up([[1, {4}],[()], [(9,), {1:2}], []]), [1, {4}, (), (9,), {1:2}])\\nTest.assert_equals(add_it_up([(2, 4, 5), (6,), (9, 8, 7)]), (2, 4, 5, 6, 9, 8, 7))\\nTest.assert_equals(add_it_up([(7, [8, 5]), (), ({9, 8},), ((),) ,({8:{9:(1, 2)}},)]), (7, [8, 5], {9, 8}, (), {8:{9:(1, 2)}}))\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[1,1,1,1,1,1,2,0,3,1,0,1,2,1,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,1,0,2,2,1,2,1,3,2,2,1,2,2,3,3,2,2,0,1,2,1,1,2,2,0,2,2,2,2,3,2,2,2,2,1,2,0,2,2,2,2,2],\"rators\":[\"aEm3Wvj2rFYRL8Lrb\",\"gXTAie79kiw28tx5u\",\"3LiSLdtN58n46NEqg\",\"ho3PzYhvquDDgt7BW\",\"tAF9Gf6PiGogbZuWs\",\"6HgMANhu6WiGyXSGN\",\"oBcs8GLX2ZFLXQy8y\",\"XFBkcWM46bhZis4jr\",\"gb9rvGus2Jv7bjZSs\",\"gJYuGdkXEWWmGRLzu\",\"pn7FezrkZZCui7fkJ\",\"8Ni269XqCJJhs65Kw\",\"vnEZA4ncojpbbqzbj\",\"DYDJTyGgKFnBRLm2r\",\"yjtdwc2AC4jA2RWtn\",\"vTfyrr4pGddp8rbXc\",\"7K2GEb5TZRtSpyyGS\",\"KLmLKaJPfsYxp42p2\",\"Nb6LYPoQP6KJZt8mz\",\"axdSNLZpiCDF8RS6n\",\"4fhjJBvLBWh6QeSih\",\"DEDniTrstQYGounXT\",\"5HCu9Ydd86QgHDRNP\",\"a777e8chPvJkY3tKa\",\"8PwfYqoDQFThzNtvf\",\"s5M5RvgqR9BhB9JoC\",\"eMuCpJ2spXWkJjWNz\",\"8JyqsSbN2FJXPr3cw\",\"jNvegJWCk5HCtEMbK\",\"EMJ6uvBZkie429gdg\",\"zd9FLSzsGz3evKafy\",\"tpxMgkGSHwBjS95Ta\",\"9CoqdidjM9KbeKnHY\",\"GF94mzsECzne8pyLx\",\"mG8HqKiAQFTdRZthG\",\"NNE5HNRXAkmhrWgyQ\",\"H4abACFDH5t8CnnyH\",\"iS5BrkGLzJyPK7nKt\",\"8WpvgSbQciTQWdd8T\",\"HF28xZKSLM9wEuqNg\",\"cR3ibTMxLyEdDFCHY\",\"FEYpu9RWysAgW3XnP\",\"7XjpFhwzNaeFiQctW\",\"QRv96jmNaYsWkxQEG\",\"2QGRoQn2dRq3scu7k\",\"PXAcsKkssS2yLyDv2\",\"DPi9QGLctq2y76KuE\",\"J3upzLHuEwXH7Z2hx\",\"dYPkStFnLvAMsHSzZ\",\"R4SjTgDnpigJYDLyL\",\"5XiuAqicKD4hBdu63\",\"RGMbFMZXJr7DhcAJy\",\"dBzwBtRjZqB98DJeB\",\"JS3hNM3XXkxPdg3yk\",\"d8qtzoLB264iP8tdY\",\"Jqk2uJZZxEv5wZFze\",\"J5T8gZqiZXFuFDTQ7\",\"HuNF3xTBzmatyGSTm\",\"5hQnRWiKkhgKJXNMP\",\"wRttWTM59y8m5mx7x\",\"YRAzEBJoLvSaiPtYx\",\"eYfPWvZwnJQkHbSTK\",\"5S9nX4rKsnCcnv4Cz\",\"KJCDwGkoXh8qtbbKr\",\"GGdmhAvxXhqhhibJN\",\"buX4mCQhtXCfBjeno\",\"Ds7L5bksw2QRHjrKL\",\"CHvzhtXnv8HTbPQ56\",\"srJ34BaybkQh3qRkM\",\"sHjfbGQGLHE6JR6qu\",\"iojEnnY9FsMfYzp6f\",\"eHcgvkTGsH7ZziqBo\",\"o4ixjQGSaYqA2JoM4\",\"LQxof8pGabGuWP7Gn\",\"66a9xX73nmTEuKs9k\",\"yod5YhKtPqw2GfG9B\",\"PC3pLs36zNzpRDSuE\",\"9Ly8afdtofp8DXzrt\",\"5cwvQQnT66ArTLRjj\",\"AasGs8AeX9Lcb9xJn\",\"mvJBakQ35CWAnbbEZ\",\"8BFSTCnoe2QggN64c\",\"BrTDhPJcACL2bsrpJ\",\"dzS6WBTMHyFEag6Fp\",\"2PufnQcsHsfymufX3\",\"d9LBRxvADNBB5QJMB\",\"suArq5BbSy7gD6xri\",\"4TmgHkn5vqyHK3sYC\",\"9pzFiFK3ANLjQfnr2\"],\"total\":96,\"quality\":[5,5,5,5,5,5,1,4,5,5,5,5,4,5,5,5,5,5,5,4,5,5]},\"flags\":0},\"summary\":\"This challenge concerns some functionality of the sum method that is easy to overlook.\\n\\nAs we all know, sum([4, 14, 17, 10]) is an alternative way of writing 4 + 14 + 17 + 10.\\n\\nSo far, nothing particularly interesting. However, things get more noteworthy when one recalls that in Python the addition + isn't just used to add numbers.\\n\\nFor example, the code:\\n\\n[1,\",\"tags\":[\"math\",\"language_fundamentals\",\"arrays\"],\"timestamp\":{\"$date\":1598550724403},\"title\":\"Add It Up!\",\"quality\":4.681818181818182,\"family\":[{\"_id\":\"ePaMPXuKScJNs34Ay\",\"language\":\"python3\"}]}}"]