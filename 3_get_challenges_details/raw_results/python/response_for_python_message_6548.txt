a["{\"msg\":\"result\",\"id\":\"1984\",\"result\":{\"_id\":\"A52kaKXg42bB7PKHE\",\"author\":\"skrzyniarzp\",\"authorId\":\"66a9xX73nmTEuKs9k\",\"code\":\"def num_then_char(lst):\\n\\t\",\"difficulty\":2.7701149425287355,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"NDhgoZrHSKPECaxii\",\"instructions\":\"Write a function that sorts list while keeping the list structure.\\nNumbers should be first then letters both in ascending order.\\n\\n### Examples\\n```\\nnum_then_char([\\n  [1, 2, 4, 3, \\\"a\\\", \\\"b\\\"],\\n  [6, \\\"c\\\", 5], [7, \\\"d\\\"],\\n  [\\\"f\\\", \\\"e\\\", 8]\\n]) ➞ [\\n  [1, 2, 3, 4, 5, 6],\\n  [7, 8, \\\"a\\\"],\\n  [\\\"b\\\", \\\"c\\\"], [\\\"d\\\", \\\"e\\\", \\\"f\\\"]\\n]\\n\\nnum_then_char([\\n  [1, 2, 4.4, \\\"f\\\", \\\"a\\\", \\\"b\\\"],\\n  [0], [0.5, \\\"d\\\",\\\"X\\\",3,\\\"s\\\"],\\n  [\\\"f\\\", \\\"e\\\", 8],\\n  [\\\"p\\\",\\\"Y\\\",\\\"Z\\\"],\\n  [12,18]\\n]) ➞ [\\n  [0, 0.5, 1, 2, 3, 4.4],\\n  [8],\\n  [12, 18, \\\"X\\\", \\\"Y\\\", \\\"Z\\\"],\\n  [\\\"a\\\", \\\"b\\\", \\\"d\\\"],\\n  [\\\"e\\\", \\\"f\\\", \\\"f\\\"],\\n  [\\\"p\\\", \\\"s\\\"]\\n]\\n```\\n\\n### Notes\\nTest cases will contain integer and float numbers and single letters.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(num_then_char([\\n    [1, 2, 4, 3, \\\"a\\\", \\\"b\\\"],\\n    [6, \\\"c\\\", 5],\\n    [7, \\\"d\\\"],\\n    [\\\"f\\\", \\\"e\\\", 8]\\n]), [[1, 2, 3, 4, 5, 6], [7, 8, 'a'], ['b', 'c'], ['d', 'e', 'f']])\\n\\nTest.assert_equals(num_then_char([\\n    [1, 2, 4.4, \\\"f\\\", \\\"a\\\", \\\"b\\\"],\\n    [0],\\n    [0.5, \\\"d\\\",\\\"X\\\",3,\\\"s\\\"],\\n    [\\\"f\\\", \\\"e\\\", 8],\\n    [\\\"p\\\",\\\"Y\\\",\\\"Z\\\"],\\n    [12,18]\\n]), [[0, 0.5, 1, 2, 3, 4.4], [8], [12, 18, 'X', 'Y', 'Z'], ['a', 'b', 'd'], ['e', 'f', 'f'], ['p', 's']])\\n\\nTest.assert_equals(num_then_char([\\n    [10, 2],\\n    [\\\"a\\\",3],\\n    [2.2, \\\"d\\\",\\\"h\\\",6,\\\"s\\\",14,1],\\n    [\\\"f\\\", \\\"e\\\"],\\n    [\\\"p\\\",\\\"y\\\",\\\"z\\\",\\\"V\\\"],\\n    [5]\\n]), [[1, 2], [2.2, 3], [5, 6, 10, 14, 'V', 'a', 'd'], ['e', 'f'], ['h', 'p', 's', 'y'], ['z']])\\n\\nTest.assert_equals(num_then_char([\\n    [10, 2,6,6.5,8.1,\\\"q\\\",\\\"w\\\",\\\"a\\\",\\\"s\\\"],\\n    [\\\"f\\\",4],\\n    [2, 3,\\\"h\\\",6,\\\"x\\\",1,0],\\n    [\\\"g\\\"],\\n    [\\\"p\\\",7,\\\"j\\\",\\\"k\\\",\\\"l\\\"],\\n    [5,\\\"C\\\",\\\"A\\\",\\\"B\\\"],\\n    [\\\"L\\\",9]\\n]), [[0, 1, 2, 2, 3, 4, 5, 6, 6], [6.5, 7], [8.1, 9, 10, 'A', 'B', 'C', 'L'], ['a'], ['f', 'g', 'h', 'j', 'k'], ['l', 'p', 'q', 's'], ['w', 'x']])\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[4,4,4,4,4,4,4,1,5,5,5,4,3,2,0,5,5,4,2,2,2,5,3,1,3,4,4,4,1,2,3,3,4,4,0,3,0,5,5,0,2,1,4,4,5,4,5,1,2,2,5,5,2,2,3,2,3,4,2,4,2,1,2,0,0,1,1,2,3,4,4,1,4,0,0,4,2,2,3,2,1,2,2,2,2,1,4],\"rators\":[\"66a9xX73nmTEuKs9k\",\"tAF9Gf6PiGogbZuWs\",\"aEm3Wvj2rFYRL8Lrb\",\"Nb6LYPoQP6KJZt8mz\",\"8PwfYqoDQFThzNtvf\",\"ekQh3jzgGLsEMbKo3\",\"mDWNyaaQ9hvPCRzSd\",\"RHZcTWs7asoBGydH4\",\"s5M5RvgqR9BhB9JoC\",\"W5TajitmCyxz87zAC\",\"aCNWav8S8Try9RkC6\",\"zTZctDDRMSeqYjKQY\",\"a777e8chPvJkY3tKa\",\"bKXdHkYnFt4ex42Dj\",\"cykCKNJcqFBxz4T8s\",\"dzS6WBTMHyFEag6Fp\",\"5dHucvf2qBYyKim7X\",\"LGp9pMnHGQYJnwxxa\",\"Ecg4m7srYGgZsb4Ck\",\"x4dfavjLEcrvAF3QQ\",\"WzEhzQcMwc4sw8z7T\",\"fznzd3qnvtbFkkizz\",\"gb9rvGus2Jv7bjZSs\",\"4fhjJBvLBWh6QeSih\",\"8JyqsSbN2FJXPr3cw\",\"pPtmnJ7q9QchoG2Jq\",\"JA8Xsk3X9Rrb3wdMG\",\"xn7uGNKeAwPEkP9oA\",\"DNACg4rcgZsPtYGZ8\",\"6428wKHtwKkFdvBs5\",\"J23RcmzbdtBbPCTjT\",\"wmW4mGgj6tJxepqpC\",\"SGhPxX5bHGL8zZqtt\",\"v9KtC8YLbMWmXiW2H\",\"hZW6j5s6RHpx35phy\",\"jL4y5fTJAMBjhZmko\",\"p8qqFdJ3FSk5x9z3G\",\"oyKcm3zqdy8Ko5P5d\",\"FdB7yZRr2ZjaFQcpj\",\"8nE8QHnFYsHCFebte\",\"3bH5s2P4iYCRHb5Sk\",\"TzfFXjsN3n6kkFZSY\",\"3sJqNsvbCGCnGxNCq\",\"J83b6T9hJ2EqE5Aov\",\"h4x2jaMdj5aQZbW5g\",\"gSFJPsMXnqAog3Q9f\",\"RtKXXfz77hgyubRQQ\",\"8kMCbpP4DudkobNjb\",\"ZQSG2DF9TjmBGXPwu\",\"BRXiuhWLN3YSbSdvh\",\"XAQm7Z89ZNKgRJQEe\",\"DqNQn9Jsxcu5HijKE\",\"CPeGXEF8QkJ479o55\",\"44dAzThMuyGZ5StXB\",\"C28oXk6hCbo4iZnXf\",\"DPi9QGLctq2y76KuE\",\"qab4tYm6vJQcpKLfi\",\"aaotFPYKJpeDdBmK5\",\"qPpQfR5KyDb5Y3EFf\",\"3JR9S6Rj5LicgMx2X\",\"iS5BrkGLzJyPK7nKt\",\"AvA5ezoh8m6mEEXhu\",\"roHTHRWkWPoCy9eLn\",\"QRv96jmNaYsWkxQEG\",\"hRAd998MG8Jzdpxj6\",\"waQzj2KpX7CbmYFnp\",\"waNsY2k4ndReyEREk\",\"Jqk2uJZZxEv5wZFze\",\"CtKaPhQmtex9wnWcd\",\"Xk2g4CNFAnYcvxiSr\",\"Tg24gZyPmk8uDXcBY\",\"5rX3qPFdvRQ9G7xZQ\",\"B3kmFXcgPZMm2pTvr\",\"W4X4kb9bFHP9wQLKZ\",\"8KNtgAcNpyT2f6bTT\",\"amfj3y4oZMprJ96fg\",\"AZBYSoMRbsCreuAbn\",\"c4DsFkzDj9CptDgDj\",\"T63gcy2WbkwsvEyRB\",\"iBPtFyzzY83pAFACa\",\"7fJvDZzmtsoLXhmje\",\"cw8QZhq4mmkdgifwk\",\"9qdwnisj554famEPb\",\"K9P4HPXReTrHxHpMr\",\"HF28xZKSLM9wEuqNg\",\"j8FR2cHxpsYtNo9Dw\",\"Cia25zjeX3RkCNx5t\",\"vszDSA9eDJ7uh8758\",\"khABovRxfpyzr97L3\",\"GDs7MS38tsHbbpygg\",\"9WPmEdZpBSsEGvszv\",\"kAjhvt8QrT2ggqAen\",\"RDdXanzLqFzuDF2uZ\",\"Qy4Wr4dQLKgYSRXis\",\"ZitsKMQFKHRQw7AhC\",\"2XmSfMuTYvYnQYCWj\",\"f89WBZDy3j7KZY8od\",\"xGdw5GCbjjZL9Hr6J\",\"Hbep7kAusdxJFG5Qv\",\"QBgP4BySQAeCoCFf6\",\"siKtn4x4vNM2m2QBf\",\"i42C33MNpNoSXhJDj\",\"mLjrvoFNrH4uZWHRB\",\"7ifh8r4gvyYMhKB94\",\"mQjpf5TyF358J8Anz\",\"qx7S9WMzk2tfSxapz\",\"FpZGcpPQaooou2BF3\",\"4EgBCgEyiZA2hRsh4\",\"KJZ8ZjBgtPy6nRo9C\",\"Ndxjt77Wvp8zB7ed7\",\"8sNv5PTHa7XQ8bNqR\",\"85BiyYFzHLMbq2A73\",\"MgPT8HripHLxFtiax\",\"Mw8yqSDFdQui28w5N\",\"2YF9pq5TMZcck8GxD\",\"Er39N3Lx3dx2nSpc9\",\"yTtSCvGPyYna6JuRC\",\"srJ34BaybkQh3qRkM\",\"wLDZW9Gv28radJb7Q\",\"iojEnnY9FsMfYzp6f\",\"J3upzLHuEwXH7Z2hx\",\"qZQxPQ2kaNKAMesHT\",\"gJYuGdkXEWWmGRLzu\",\"yjtdwc2AC4jA2RWtn\",\"AasGs8AeX9Lcb9xJn\",\"QvEXmSEo3ANp3yPyH\",\"gKnWjDjwrJh7MK2df\",\"2PufnQcsHsfymufX3\",\"Yp7uvStL97cC9fKkY\",\"gXTAie79kiw28tx5u\",\"suArq5BbSy7gD6xri\",\"GTKsdeEihE636Le9i\",\"K7W5sFbjXM8rCfPAJ\",\"CPLBoAWgM9mndBH2d\",\"vvH5uYCAP4AWHZLyJ\",\"mw9464S5dnenqzvpm\",\"64AQzBJ46kXHo7Y4p\",\"d8qtzoLB264iP8tdY\",\"DQskEvAv5KiJDPtGF\"],\"total\":152,\"quality\":[5,4,5,4,5,4,4,4,4,5,5,5,5,5,5,4,4,1,5,5,4,5,5,5,5,5,1,5,4,5,1,5,5,4,4,5,4,5,5,5,5,5,5,4,5,5,5,5,4,5,4,5,4,5,5,5,5]},\"flags\":0},\"summary\":\"Write a function that sorts list while keeping the list structure.\\nNumbers should be first then letters both in ascending order.\\n\\nExamples\\nnumthenchar([\\n\\t[1, 2, 4, 3, \\\"a\\\", \\\"b\\\"],\\n  [6, \\\"c\\\", 5], [7, \\\"d\\\"],\\n  [\\\"f\\\", \\\"e\\\", 8]\\n]) ➞ [\\n  [1, 2, 3, 4, 5, 6],\\n  [7, 8, \\\"a\\\"],\\n  [\\\"b\\\", \\\"c\\\"], [\\\"d\\\", \\\"e\\\", \\\"f\\\"]\\n]\\n\\nnumthenchar([\\n  [1, 2, 4.4, \\\"f\\\", \\\"a\\\", \\\"b\\\"],\\n  [0], [0.5, \\\"d\\\",\\\"X\\\",3\",\"tags\":[\"arrays\",\"sorting\"],\"timestamp\":{\"$date\":1591997157748},\"title\":\"Numbers First, Letters Second\",\"quality\":4.491228070175438,\"family\":[{\"_id\":\"wkD5ChYH9ukyNSmZm\",\"language\":\"javascript\"},{\"_id\":\"A52kaKXg42bB7PKHE\",\"language\":\"python3\"},{\"_id\":\"x4Ne976u5KQKPz6mN\",\"language\":\"ruby\"}]}}"]