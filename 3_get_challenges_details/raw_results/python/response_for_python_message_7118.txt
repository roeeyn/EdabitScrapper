a["{\"msg\":\"result\",\"id\":\"2265\",\"result\":{\"_id\":\"mm2fm6ynbR7HQQm9z\",\"author\":\"Mubashir Hassan \",\"authorId\":\"T6iBEE2jp7f7iEF2P\",\"code\":\"def knights_jump(square):\\n\\t\",\"difficulty\":3.5416666666666665,\"familyId\":\"2Ba3QQ48jioFvNuXT\",\"instructions\":\"Knights can jump across the board.\\n\\n![Knights in Chess](https://edabit-challenges.s3.amazonaws.com/Rb9v.gif)\\n\\nCreate a function that takes a square where a knight jumps from as a `string` and returns all the possible squares the knight can land on as a `string`. Ignore capturing and further Chess rules. Be aware of the sides of the board. Knights don't go over the edge, obviously.\\n\\n### Examples\\n```\\nknights_jump(\\\"F4\\\") ➞ \\\"E2,G2,D3,H3,D5,H5,E6,G6\\\"\\n\\nknights_jump(\\\"A1\\\") ➞ \\\"C2,B3\\\"\\n\\nknights_jump(\\\"E2\\\") ➞ \\\"C1,G1,C3,G3,D4,F4\\\"\\n```\\n\\n### Notes\\n- The input is always a valid square on the board.\\n- The order of the return string is 1 ➞ 8, A ➞ H.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(knights_jump('A1'), 'C2,B3') \\nTest.assert_equals(knights_jump('H1'), 'F2,G3') \\nTest.assert_equals(knights_jump('F4'), 'E2,G2,D3,H3,D5,H5,E6,G6') \\nTest.assert_equals(knights_jump('E5'), 'D3,F3,C4,G4,C6,G6,D7,F7') \\nTest.assert_equals(knights_jump('A7'), 'B5,C6,C8') \\nTest.assert_equals(knights_jump('B4'), 'A2,C2,D3,D5,A6,C6') \\nTest.assert_equals(knights_jump('F3'), 'E1,G1,D2,H2,D4,H4,E5,G5') \\nTest.assert_equals(knights_jump('C8'), 'B6,D6,A7,E7') \\nTest.assert_equals(knights_jump('E4'), 'D2,F2,C3,G3,C5,G5,D6,F6') \\nTest.assert_equals(knights_jump('G1'), 'E2,F3,H3') \\nTest.assert_equals(knights_jump('G7'), 'F5,H5,E6,E8') \\nTest.assert_equals(knights_jump('F3'), 'E1,G1,D2,H2,D4,H4,E5,G5') \\nTest.assert_equals(knights_jump('C8'), 'B6,D6,A7,E7') \\nTest.assert_equals(knights_jump('B6'), 'A4,C4,D5,D7,A8,C8') \\nTest.assert_equals(knights_jump('E2'), 'C1,G1,C3,G3,D4,F4') \\nTest.assert_equals(knights_jump('H5'), 'G3,F4,F6,G7') \\nTest.assert_equals(knights_jump('D1'), 'B2,F2,C3,E3') \\nTest.assert_equals(knights_jump('G1'), 'E2,F3,H3')\",\"language\":\"python3\",\"quality\":0,\"summary\":\"Knights can jump across the board.\\n\\nKnights in Chess\\n\\nCreate a function that takes a square where a knight jumps from as a string and returns all the possible squares the knight can land on as a string. Ignore capturing and further Chess rules. Be aware of the sides of the board. Knights don't go over the edge, obviously.\\n\\nExamples\\nknights_jump(\\\"F4\\\") ➞ \\\"E2,G2,\",\"tags\":[\"algorithms\",\"arrays\",\"logic\",\"games\"],\"timestamp\":{\"$date\":1606626118708},\"title\":\"Knights Jump\",\"stats\":{\"completed\":{\"total\":21,\"ratings\":[4,4,4,4,4,3,5,1,4,0,5,5,5,5,4,3,1,1,5,5,4,0,4,5],\"quality\":[],\"rators\":[\"tAF9Gf6PiGogbZuWs\",\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\",\"8JyqsSbN2FJXPr3cw\",\"qPpQfR5KyDb5Y3EFf\",\"QBgP4BySQAeCoCFf6\",\"s5M5RvgqR9BhB9JoC\",\"iS5BrkGLzJyPK7nKt\",\"hpZARXGLAJt2EDmcf\",\"mDWNyaaQ9hvPCRzSd\",\"eHcgvkTGsH7ZziqBo\",\"yjtdwc2AC4jA2RWtn\",\"8sNv5PTHa7XQ8bNqR\",\"J3upzLHuEwXH7Z2hx\",\"gJYuGdkXEWWmGRLzu\",\"DPi9QGLctq2y76KuE\",\"gKnWjDjwrJh7MK2df\",\"2PufnQcsHsfymufX3\",\"suArq5BbSy7gD6xri\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"5mHo8v3tX48yY6x2H\",\"language\":\"cpp\"},{\"_id\":\"iDzRZJNrnT7JryKEF\",\"language\":\"javascript\"},{\"_id\":\"mm2fm6ynbR7HQQm9z\",\"language\":\"python3\"},{\"_id\":\"G55TLKfSSQ9FNZPwk\",\"language\":\"ruby\"}]}}"]