a["{\"msg\":\"result\",\"id\":\"1369\",\"result\":{\"_id\":\"Cp3JRpooAqfA4kGkv\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"def node_type(_N, _P, n):\\n\\t\",\"difficulty\":2.024390243902439,\"isHidden\":false,\"familyId\":\"JfFJYTA6pffwN4txP\",\"instructions\":\"We have two lists `_N` and `_P`,  where `_N` represents the value of a node in **Binary Tree**, and `_P` is the parent of `_N`.\\n\\nN | P\\n--- | ---\\n1 | 2\\n3 | 2\\n6 | 8\\n9 | 8\\n2 | 5\\n8 | 5\\n5 | -1\\n\\nWrite a function to find the node type of the node within this Binary Tree, ordered by the value of the node. Output one of the following:\\n\\n- `Root`: If node is root node.\\n- `Leaf`: If node is leaf node.\\n- `Inner`: If node is neither root nor leaf node.\\n- `Not exist`: If node not exist.\\n\\n```\\nnode_type([1, 3, 6, 9, 2, 8, 5], [2, 2, 8, 8, 5, 5, -1], 5) ➞ \\\"Root\\\"\\n\\nnode_type([1, 3, 6, 9, 2, 8, 5], [2, 2, 8, 8, 5, 5, -1], 6) ➞ \\\"Leaf\\\"\\n\\nnode_type([1, 3, 6, 9, 2, 8, 5], [2, 2, 8, 8, 5, 5, -1], 2) ➞ \\\"Inner\\\"\\n\\nnode_type([1, 3, 6, 9, 2, 8, 5], [2, 2, 8, 8, 5, 5, -1], 10) ➞ \\\"Not exist\\\"\\n```\\n\\n![Binary Tree Example](https://edabit-challenges.s3.amazonaws.com/binary-tree-example.png)\\n\\n### Notes\\nAll values of `_N` list are unique.\",\"lab\":\"Test.assert_equals(node_type([1, 3, 6, 9, 2, 8, 5], [2, 2, 8, 8, 5, 5, -1], 1 ), \\\"Leaf\\\")\\nTest.assert_equals(node_type([1, 3, 6, 9, 2, 8, 5], [2, 2, 8, 8, 5, 5, -1], 2), \\\"Inner\\\")\\nTest.assert_equals(node_type([1, 3, 6, 9, 2, 8, 5], [2, 2, 8, 8, 5, 5, -1], 3), \\\"Leaf\\\")\\nTest.assert_equals(node_type([1, 3, 6, 9, 2, 8, 5], [2, 2, 8, 8, 5, 5, -1], 5), \\\"Root\\\")\\nTest.assert_equals(node_type([1, 3, 6, 9, 2, 8, 5], [2, 2, 8, 8, 5, 5, -1], 6), \\\"Leaf\\\")\\nTest.assert_equals(node_type([1, 3, 6, 9, 2, 8, 5], [2, 2, 8, 8, 5, 5, -1], 8), \\\"Inner\\\")\\nTest.assert_equals(node_type([1, 3, 6, 9, 2, 8, 5], [2, 2, 8, 8, 5, 5, -1], 9), \\\"Leaf\\\")\\nTest.assert_equals(node_type([1, 3, 6, 9, 2, 8, 5], [2, 2, 8, 8, 5, 5, -1], 10), \\\"Not exist\\\")\\nTest.assert_equals(node_type([6, 3, 1, 2, 5, 7, 4, 6, 8], [3, 1, 6, 1, 2, 3, 8, -1, 6], 8), \\\"Inner\\\")\\nTest.assert_equals(node_type([5, 6, 8, 7, 1, 9, 4, 11, 10, 2], [8, 8, -1, 8, 7, 4, 5, 4, 1, 1], 11), \\\"Leaf\\\")\\nTest.assert_equals(node_type([3, 2, 4, 9, 11, 10, 8, 5, 6, 7], [-1, 3, 3, 2, 3, 4, 4, 9, 10, 8], 3 ), \\\"Root\\\")\\nTest.assert_equals(node_type([5, 6, 8, 7, 1, 9, 4, 11, 10, 2], [8, 8, -1, 8, 7, 4, 5, 4, 1, 1], 4), \\\"Inner\\\")\\nTest.assert_equals(node_type([3, 2, 4, 9, 11, 10, 8, 5, 6, 7], [-1, 3, 3, 2, 3, 4, 4, 9, 10, 8], 6), \\\"Leaf\\\")\\nTest.assert_equals(node_type([6, 3, 1, 2, 5, 7, 4, 6, 8], [3, 1, 6, 1, 2, 3, 8, -1, 6], 5), \\\"Leaf\\\")\\nTest.assert_equals(node_type([5, 6, 8, 7, 1, 9, 4, 11, 10, 2], [8, 8, -1, 8, 7, 4, 5, 4, 1, 1], 8), \\\"Root\\\")\\nTest.assert_equals(node_type([3, 2, 4, 9, 11, 10, 8, 5, 6, 7], [-1, 3, 3, 2, 3, 4, 4, 9, 10, 8], 10), \\\"Inner\\\")\",\"language\":\"python3\",\"summary\":\"We have two lists N and P,  where N represents the value of a node in Binary Tree, and P is the parent of _N.\\n\\nN | P\\n--- | ---\\n1 | 2\\n3 | 2\\n6 | 8\\n9 | 8\\n2 | 5\\n8 | 5\\n5 | -1\\n\\nWrite a function to find the node type of the node within this Binary Tree, ordered by the value of the node. Output one of the following:\\n\\nRoot: If node is root node.\\nLeaf: If node is leaf n\",\"tags\":[\"algorithms\",\"arrays\",\"conditions\",\"interview\"],\"timestamp\":{\"$date\":1572127242774},\"title\":\"Binary Tree Nodes\",\"stats\":{\"completed\":{\"total\":104,\"ratings\":[3,3,3,3,3,3,2,1,4,3,2,4,3,1,2,1,2,2,2,0,2,3,1,0,1,3,2,0,3,3,3,1,2,3,2,2,4,3,0,3,1,2,1,2,1,2,3,1,1,0,0,3,2,0,3,0,3,1,2,3,2,1,3,3,2,2,2,1,0,2,3,3,3,2,1,1,2,3,3,2,4,2],\"rators\":[\"tAF9Gf6PiGogbZuWs\",\"54GrF4GDAgaxtb64y\",\"gb9rvGus2Jv7bjZSs\",\"kDe2b9FdJnPhEWJzg\",\"HRaD33gfHancxnne2\",\"hrzGaJc9KZqgjAvew\",\"35Xc6fMmxZ6nWESWY\",\"dZGNAJXB24zNh2tsD\",\"AYaEkTWLMmfzpwejr\",\"tK9oBgXjqPsPrGowj\",\"2fxapKr8XGdNeaKi2\",\"PuJDHtAaX6vXeJJTC\",\"LqLArzZcSuzaes2Zx\",\"GvFQm8tY4A6AzkqF6\",\"sfHsh5gna2QYuwsRP\",\"8JyqsSbN2FJXPr3cw\",\"HqmxnQJM66Y57twhn\",\"Jqk2uJZZxEv5wZFze\",\"ab7BsQuhDo3QgE6bh\",\"wpkdvCDiYMr6gTTQ7\",\"E6myn69326auEiR8g\",\"C4QntmkYtB89GNtpd\",\"sWX2tYC7J4m2GkcRC\",\"AasGs8AeX9Lcb9xJn\",\"PytNZK9mNiRiZxPrm\",\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\",\"ZNnsMeNkdDhHjSrZb\",\"YRstQuthRkFeBiXug\",\"NaPpyhnXZ2XLtug83\",\"gJYuGdkXEWWmGRLzu\",\"sXiaXBEpxCpPGR6mP\",\"iS5BrkGLzJyPK7nKt\",\"yjtdwc2AC4jA2RWtn\",\"DEDniTrstQYGounXT\",\"SgZ2t9xFuRqdJGofp\",\"gsbNp3wmahFJQDc45\",\"fznzd3qnvtbFkkizz\",\"9CoqdidjM9KbeKnHY\",\"R4SjTgDnpigJYDLyL\",\"AQECHYqcH2rFsZM8p\",\"zZDaXBxMzTCBhNkgL\",\"ZJTBR5PYuKrEi8xcJ\",\"y7rfKEhb3Zaj5WrPA\",\"b5oEvBqHWLRnJgp22\",\"hE8D67DAZuvZWWfzW\",\"xn7uGNKeAwPEkP9oA\",\"dkcmCKwqApX5jBggc\",\"Yp7uvStL97cC9fKkY\",\"sftR9DgM4jpwtxfAM\",\"oBcs8GLX2ZFLXQy8y\",\"LQxof8pGabGuWP7Gn\",\"mDWNyaaQ9hvPCRzSd\",\"cAP3n5NY64uoMwzRR\",\"GGdmhAvxXhqhhibJN\",\"KJCDwGkoXh8qtbbKr\",\"n2BRY9X8899dcG8Bw\",\"Afnps7TJQuS9sipMb\",\"3LiSLdtN58n46NEqg\",\"RTDx9axf52kxhFjwZ\",\"ouD6cs7ZdxzPfKRKt\",\"iojEnnY9FsMfYzp6f\",\"FEYpu9RWysAgW3XnP\",\"2PufnQcsHsfymufX3\",\"Wpn95NqWxncQrwNgz\",\"Qad4u2BjtZCtECofd\",\"Ds7L5bksw2QRHjrKL\",\"XNmN6ztj36a7eChbD\",\"t4XvcKCmucuJTrD6F\",\"QRv96jmNaYsWkxQEG\",\"J5T8gZqiZXFuFDTQ7\",\"8BFSTCnoe2QggN64c\",\"8sNv5PTHa7XQ8bNqR\",\"et62tKi6E7fWhNSJM\",\"2tzPhhd4vkv3L6Yak\",\"xnz6orK7wQwSidddT\",\"4Lwjr34ypKNQNQCar\",\"nkL2knkcNaiHCerW2\",\"RoGGD5cpHb4ftdLDv\",\"nkH3HfJXLMNcBMM79\",\"4RY3zj9C2t8GGefhi\",\"JC8xt2rJtqR7PeLwN\",\"tbZKd5WhvRAXng8fr\",\"5HCu9Ydd86QgHDRNP\",\"dSd7wHgXGQeG5BQ2P\",\"yod5YhKtPqw2GfG9B\",\"wKuNwxCtKvMRw9mnc\",\"Qyfyyw6oC4EHAndzo\",\"jkbavR2ATFJcpmo8M\",\"BrTDhPJcACL2bsrpJ\",\"hpxpbuEqv9LPBB7pR\",\"5Dd7XwALvvMMwS4Fb\",\"9ivvGvJGvtQfigQaZ\",\"3Kgtr8FytbE9FnJxH\",\"CHvzhtXnv8HTbPQ56\",\"9pzFiFK3ANLjQfnr2\",\"mXXPMi2anfJi5whC9\"],\"quality\":[4,5,1,2,5,5,2,4,5,4,5,4,5,5,5,5,3,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":4.2,\"family\":[{\"_id\":\"rEmRjCzmJ9BwQhpst\",\"language\":\"cpp\"},{\"_id\":\"ycNLF4XMmQub5AeTt\",\"language\":\"javascript\"},{\"_id\":\"Cp3JRpooAqfA4kGkv\",\"language\":\"python3\"},{\"_id\":\"h2CsmKYyrq3GKEkWK\",\"language\":\"ruby\"}]}}"]