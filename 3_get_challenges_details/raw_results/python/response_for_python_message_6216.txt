a["{\"msg\":\"result\",\"id\":\"1818\",\"result\":{\"_id\":\"2iibnCci6G42f8Mjr\",\"author\":\"Jacky Tan\",\"authorId\":\"cSaaAxqkYsPDXmMuf\",\"code\":\"def guess_score(code, guess):\\n\\t\",\"difficulty\":2.5297029702970297,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"xYAGr5qsmemfBZJdt\",\"instructions\":\"The classic game of Mastermind is played on a tray on which the **Mastermind** conceals a `code` and the **Guesser** has 10 tries to guess it. The `code` is a sequence of 4 (or 6, sometimes more) pegs of different colors. Each `guess` is a corresponding sequence of 4 (or more) pegs of different colors. A `guess` is \\\"correct\\\" when the color of every peg in the `guess` exactly matches the corresponding peg in the **Mastermind's** `code`.\\n\\nAfter each `guess` by the **Guesser**, the **Mastermind** will give a `score` comprising black & white pegs, not arranged in any order:\\n\\n- Black peg == `guess` peg matches the color of a `code` peg in the same position.\\n- White peg == `guess` peg matches the color of a `code` peg in another position.\\n\\nCreate a function that takes two strings, `code` and `guess` as arguments, and returns the score in a dictionary.\\n\\n- The `code` and `guess` are strings of numeric digits\\n- The color of the pegs are represented by numeric digits\\n- no \\\"peg\\\" may be double-scored\\n\\n### Examples\\n```\\nguess_score(\\\"1423\\\", \\\"5678\\\") ➞ {\\\"black\\\": 0, \\\"white\\\": 0}\\n\\nguess_score(\\\"1423\\\", \\\"2222\\\") ➞ {\\\"black\\\": 1, \\\"white\\\": 0}\\n\\nguess_score(\\\"1423\\\", \\\"1234\\\") ➞ {\\\"black\\\": 1, \\\"white\\\": 3}\\n\\nguess_score(\\\"1423\\\", \\\"2211\\\") ➞ {\\\"black\\\": 0, \\\"white\\\": 2}\\n```\\n\\n### Notes\\n- The `code` and `guess` sequences will have the same length.\\n- The \\\"pegs\\\" consists of only digits from 0-9.\",\"isHidden\":false,\"lab\":\"Test.assert_equals(guess_score(\\\"1423\\\", \\\"5678\\\"), {\\\"black\\\": 0, \\\"white\\\": 0})\\nTest.assert_equals(guess_score(\\\"1423\\\", \\\"2222\\\"), {\\\"black\\\": 1, \\\"white\\\": 0})\\nTest.assert_equals(guess_score(\\\"1423\\\", \\\"1234\\\"), {\\\"black\\\": 1, \\\"white\\\": 3})\\nTest.assert_equals(guess_score(\\\"1423\\\", \\\"2211\\\"), {\\\"black\\\": 0, \\\"white\\\": 2})\\nTest.assert_equals(guess_score(\\\"2928\\\", \\\"7722\\\"), {\\\"black\\\": 1, \\\"white\\\": 1})\\nTest.assert_equals(guess_score(\\\"4845\\\", \\\"6446\\\"), {\\\"black\\\": 1, \\\"white\\\": 1})\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,2,4,5,3,4,4,2,3,2,1,0,1,2,3,2,2,3,0,3,2,2,2,0,2,3,2,3,3,2,3,2,1,3,2,3,4,4,4,3,4,2,4,3,1,4,4,3,4,2,1,4,1,3,4,2,3,3,0,3,3,3,0,4,4,1,4,2,4,2,3,3,4,5,1,4,2,2,3,3,2,2,4,1,3,2,2,2,3,0,3,2,2,4,2,2,2,3,2,0,2,3,2,3,2,2,0,4,3,3,2,3,2,2,1,2,2,5,3,2,3,1,2,1,4,2,4,3,2,4,1,2,3,2,2,2,3,1,4,3,2,2,4,4,3,3,3,4,4,3,4,2,2,0,5,2,3,2,2,4,1,4,4,3,0,3,4,1,3,1,5,3,1,1,0,4,2,3,1,3,4,0,2,1,3,2,2,1,4,1,4,2,1,4,2,3,2,5],\"rators\":[\"tAF9Gf6PiGogbZuWs\",\"cSaaAxqkYsPDXmMuf\",\"8PwfYqoDQFThzNtvf\",\"s5M5RvgqR9BhB9JoC\",\"jBbd6xWgNR82H68vR\",\"aCNWav8S8Try9RkC6\",\"EQbnbkkPYtGxiviTp\",\"AYaEkTWLMmfzpwejr\",\"Jqk2uJZZxEv5wZFze\",\"XbwyB44kHPnRgQcrB\",\"pBE8fbs7ZWPRxzZ8X\",\"ydEdzuCCZt4yny9Rq\",\"apiyfPkZX9v9EmJrq\",\"qi3vScsvqpsSAtw38\",\"Lw8oRc5SERsuntXMo\",\"gb9rvGus2Jv7bjZSs\",\"SiXF5H5GyFkR9SHhw\",\"iModSdmnkTJ73JYcB\",\"bqvrDWkn8EeaLap4E\",\"JKb5rhL6DKcCAypF9\",\"SGhPxX5bHGL8zZqtt\",\"6AvGPqWEaeiAw9dAi\",\"fBqQjriC4QEtFNxFe\",\"2fxapKr8XGdNeaKi2\",\"AasGs8AeX9Lcb9xJn\",\"aEm3Wvj2rFYRL8Lrb\",\"PytNZK9mNiRiZxPrm\",\"RX8vfGmaNWLahPWpd\",\"yZvzB3qFb8pkHy4dg\",\"kRFAtnGXitccJPfLa\",\"RfxTveatyCxFeHgCf\",\"h47zE2JaXAZBwxR9d\",\"mDWNyaaQ9hvPCRzSd\",\"v3fjGuc7Pq4yjFygS\",\"8JyqsSbN2FJXPr3cw\",\"gJYuGdkXEWWmGRLzu\",\"uYhi6X4Cg5XfELMxL\",\"3Zceb8GudqAG3onG3\",\"YRstQuthRkFeBiXug\",\"TCoQs9Erxoue9BvSj\",\"TvRx4RZB7tFoiZSBA\",\"aP7JkkYer28YWrPvC\",\"xHAobgK2AdYSfNWSW\",\"CMuhZyDkaZXX4pvTD\",\"a4Ln97CHxc8W6dzbq\",\"fznzd3qnvtbFkkizz\",\"wwMcJQRvf3X59Jyev\",\"3pxHTZBsv7MKzFG6Y\",\"4xAD2rEf9K5Tp32ou\",\"ZNnsMeNkdDhHjSrZb\",\"nzqwymsdwC7gxAmip\",\"pWD2YC5s4YRCxFc2i\",\"5R4JAv3Z5xhTG62As\",\"AGMQqooexrFXgMnET\",\"odhwHrfwJvNxcrBCt\",\"mq2W9FwPgf4w75dZi\",\"fZCwknjgeY7icBk9c\",\"4RY3zj9C2t8GGefhi\",\"ywk3XGvcmpTgRxwZa\",\"ykQ8NpFNznwG7cFJK\",\"bJaPCBx63YxdJAuTS\",\"vBJhjd3CjiJJFACBb\",\"yF68LNRo3rXcSFkR9\",\"Phd2FdPjo9BhBfvKh\",\"4c5amwkedLfTRgm7F\",\"wT5gGgvjKc5wz59AQ\",\"4LGKpgWrEJRsTXDkq\",\"RuHad7wL2R98BLRXy\",\"ofFs9wtJDFobG99F9\",\"3qrMaqsGzKWZ4L4N7\",\"FgkYtHLxeD8pETJ8T\",\"bDpmwo4vm9jHeZAPk\",\"diaiQeWEE8GbMnKue\",\"KfXMEiCdZfCZGmjTt\",\"ekQh3jzgGLsEMbKo3\",\"8sNv5PTHa7XQ8bNqR\",\"qPpQfR5KyDb5Y3EFf\",\"9dgvEreRDYRiwLmYv\",\"MK8HigdFigfJzHhyo\",\"RErqK2yM94wYyD2hk\",\"Fjj4bZPgBTgyWjw7c\",\"nLpdvK7EcahCqNe8X\",\"pbCEPQeTrMisB82Ny\",\"YLtspA8ec6ntcoMMf\",\"DpqiRAm2yo3W2x4HX\",\"HYc2k7adkyco3K3gT\",\"QkbpyExhGA8ErJWhk\",\"BwTJWMcmHwFf9TeRG\",\"bytuztnmvXdvKAHN9\",\"oXJbZzDbT6N2qgqR3\",\"6bkpymBvQJck5KZwK\",\"cnmj8mAbLcMnKaqLS\",\"CccXoqbXeoMydtEhh\",\"AtoBC3LqE89p3xhYC\",\"Nfsj4eNFDjaFa39ga\",\"eAR7sx2AnPoRhJQTi\",\"gBtn7gSMiSJtAGRoE\",\"xn7uGNKeAwPEkP9oA\",\"ss5MEqKMTn6CDg54y\",\"DY6edtmqmFq7GJTc8\",\"2XQLufXWKnREqiqe9\",\"wo4cpen33NYFHNca7\",\"jFcHRfu77aNu6YpZg\",\"pPtmnJ7q9QchoG2Jq\",\"LsvxCjXdo5tnmEDQc\",\"vSPc7MGK5Poy8tSFp\",\"WERBvByX6rpXF5iyZ\",\"drdKwcfY8TCL9hoYv\",\"6gS4E2C84vBYTYeDZ\",\"p4mFrwjSNysqFyxyP\",\"obxQjjJfiuHJfBEhj\",\"YP44RxkhTu76WcNKD\",\"9AzxAeaR5xWAoqYxB\",\"9uZpgAtSuPZ7W7DL6\",\"XtgTJNxw5XG8ouJjG\",\"XwHodfEcegFPRqQNr\",\"dKpyCz4GS9fHn2LyY\",\"bNTSYtWJYPQF55k3o\",\"97DthwdtrBLm2y2Yj\",\"ACEZh39brWjdGkZXb\",\"MCw7uAcoWcSTBTmr3\",\"4fhjJBvLBWh6QeSih\",\"TbcQLenGn9xhHwxGK\",\"iojEnnY9FsMfYzp6f\",\"2DrXL4cYLdXLj78t3\",\"f2BoqyCpgnmjEjLqx\",\"dWXHFmTpF8PnGJQL3\",\"yhnpZLDLibMdyaM5W\",\"WzEhzQcMwc4sw8z7T\",\"BN4h4ePZYnRpXJYWN\",\"DTKtcn5HrYxtcBza3\",\"8fZxjQfuXw5HMSRJM\",\"BS2hTgwN8aZxba3WS\",\"K4JsBLPjNKZv5LWnp\",\"974cv448kw6Wu2JF6\",\"aLxRYMdDSeCixE9pz\",\"tpxMgkGSHwBjS95Ta\",\"HqpbA6C6zkAmDsaEm\",\"P7NmFbCJ5offXMRvB\",\"J23RcmzbdtBbPCTjT\",\"iS5BrkGLzJyPK7nKt\",\"MGauu6E56gGGccRHt\",\"b5zo7s6xrqWgQnPao\",\"yjtdwc2AC4jA2RWtn\",\"xBMgNEzwnjgctffdx\",\"QEkDGPgh9LRAWECEx\",\"GGprTwrkjuccmrQRg\",\"RHqqT8ADwXZQJAp6s\",\"hcNbHccysCEQ9yhGp\",\"XjajdyybZZbkz8o5x\",\"c2u7qfdaYxcyuydtu\",\"quEfQhA3xBwsCobcg\",\"oZiGwL535nJ5ZMJr7\",\"7nQcwZdbnMCv4PPj2\",\"wTL9EoE6rj9iApyf7\",\"HbvfMCM4e7SKRE3ip\",\"axdSNLZpiCDF8RS6n\",\"BrTDhPJcACL2bsrpJ\",\"nc7bRhkxgKyqusYe3\",\"6F3Y6ZBAGNDGGTt9B\",\"tkdRHAExhDq8ryDJT\",\"Lm6ChQCWBmaikmk5J\",\"Ecg4m7srYGgZsb4Ck\",\"qYDRywWRZdswy4b6e\",\"6XBFEzEaMxZbYJwJS\",\"Xk2g4CNFAnYcvxiSr\",\"ygDJ7HEzRoJZyPEF4\",\"nFbmNzMQ38TncmfQX\",\"n26pAdsWS6ZXLRjom\",\"m3R9aaRoEbaxRsSNA\",\"v9KtC8YLbMWmXiW2H\",\"J5T8gZqiZXFuFDTQ7\",\"w3o9qJuPR62HHh9mx\",\"TxsYMnonbDnTQ8XDf\",\"uZJqBoqeZRX3RncAR\",\"J3upzLHuEwXH7Z2hx\",\"4rk7szWxbShptuiCL\",\"gXTAie79kiw28tx5u\",\"n2BRY9X8899dcG8Bw\",\"eHcgvkTGsH7ZziqBo\",\"ScaZG69jog5kcqGtQ\",\"K6MfKMytoJJuSGewP\",\"2PufnQcsHsfymufX3\",\"RTDx9axf52kxhFjwZ\",\"27jqdQJjg6GGa5iQb\",\"Wpn95NqWxncQrwNgz\",\"X7dDyoPvRD5tzDPwP\",\"Bmb3scffZ5SujLMmd\",\"9izxzCBrsRCbD9ajK\",\"gLfazgiAGXrJEZpDu\",\"D4aanHJNNiL4RRJsF\",\"ztwZDebmJ8DJGkZca\",\"kedweJpprZRZ5psMn\",\"vfkF8PhtbKTLTSnhW\",\"bccs9koJxyQ9XNiLC\",\"mfm3gB39arY8Rjb2y\",\"zosHZZEeAyWF4xnGL\",\"jyHSJpqL7nx3Jgr3e\",\"x8jcNigdR4EtGB3cx\",\"GD2CqRwMgzxKqiWgC\",\"yZC4aH5ASG9fth66j\",\"4tLFkGSzBMruqzo7Q\",\"ctbThYbufFCYbRK4f\",\"fbr22rabEJMfBp7vD\",\"yFqvQRXNco9um3xSY\",\"3KkyQm77zsew58Dc2\",\"MpfytGFYF77emJ3cT\",\"H9KZi2cjt4FwH7qog\",\"HqmxnQJM66Y57twhn\",\"DPi9QGLctq2y76KuE\",\"oBcs8GLX2ZFLXQy8y\",\"hGpbkaZeYv3Fy4Ec3\",\"dvqtXvh3qKT3HbgJz\",\"cG9FHoGjkWERngSY5\",\"nkL2knkcNaiHCerW2\",\"T6iBEE2jp7f7iEF2P\",\"Yp7uvStL97cC9fKkY\",\"x9F5WvWftdnhG7DqT\",\"CtLaGA3WAjwAPqPgf\",\"Qg6QXprmAo8DczGL9\",\"fKvDei2zrmWJHMKrN\",\"JZqiNBK6Eoy2eS7Gk\",\"jWbd7SYDzLPjc9EDh\",\"N8BTghuNzR3wrteuQ\",\"euPBBaYXyS8RBr9KB\",\"j5Di9evi3xX8GfFX3\",\"TRdQG4RW42y6DMNo8\",\"iqmPb9JuJDgTFeR8Q\",\"GTKsdeEihE636Le9i\",\"QBSSPBFQRJr9tYW6f\",\"xJRJt7dnb4eJdXGBj\",\"8BJyXvRWcrvN3nttS\"],\"total\":260,\"quality\":[3,5,4,5,4,4,3,5,5,1,4,4,5,5,4,2,5,3,5,4,4,4,4,4,5,5,5,3,5,5,5,5,5,3,5]},\"flags\":1},\"summary\":\"The classic game of Mastermind is played on a tray on which the Mastermind conceals a code and the Guesser has 10 tries to guess it. The code is a sequence of 4 (or 6, sometimes more) pegs of different colors. Each guess is a corresponding sequence of 4 (or more) pegs of different colors. A guess is \\\"correct\\\" when the color of every peg in the guess exactly ma\",\"tags\":[\"algorithms\",\"games\",\"logic\"],\"timestamp\":{\"$date\":1580828082527},\"title\":\"Mastermind\",\"quality\":4.2,\"family\":[{\"_id\":\"2iibnCci6G42f8Mjr\",\"language\":\"python3\"}]}}"]