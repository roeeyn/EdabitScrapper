a["{\"msg\":\"result\",\"id\":\"1221\",\"result\":{\"_id\":\"tX5ZhY5EkduHAPZBh\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"def nearest_element(n, lst):\\n\\t\",\"difficulty\":1.7053571428571428,\"familyId\":\"u66cuZpTgcNkwuLoP\",\"instructions\":\"Given a list of integers `lst`, implement a function that returns the index of the number nearest to the given value `n`. If two numbers equally distant from `n` are found, the function will return the greatest of them.\\n\\n### Examples\\n```\\nnearest_element(10, [1, 100, 1000]) ➞ 0\\n# 1 is the number nearest to 10.\\n\\nnearest_element(50, [100, 49, 51]) ➞ 2\\n# 49 and 51 are equally distant from 50, with 51 being the greatest.\\n\\nnearest_element(-20, [-50, -10, -30]) ➞ 1\\n# -10 and -30 are equally distant from -20, with -10 being the greatest.\\n```\\n\\n### Notes\\nIntegers in `lst` will always be unique.\",\"isHidden\":false,\"lab\":\"Test.assert_equals(nearest_element(10, [1, 100, 1000]), 0, \\\"Example #1\\\")\\nTest.assert_equals(nearest_element(50, [100, 49, 51]), 2, \\\"Example #2\\\")\\nTest.assert_equals(nearest_element(-20, [-50, -10, -30]), 1, \\\"Example #3\\\")\\nTest.assert_equals(nearest_element(100, [80, 60, 40]), 0)\\nTest.assert_equals(nearest_element(48, [47, 49, 73, 51, 44, 41]), 1)\\nTest.assert_equals(nearest_element(1, [0, -2, 3, 2, -1]), 3)\\nTest.assert_equals(nearest_element(100, [88, 99, 101, 108, 97, 98, 36]), 2)\\nTest.assert_equals(nearest_element(-50, [13, 86, -49, -51, 8, 0]), 2)\",\"language\":\"python3\",\"summary\":\"Given a list of integers lst, implement a function that returns the index of the number nearest to the given value n. If two numbers equally distant from n are found, the function will return the greatest of them.\\n\\nExamples\\nnearest_element(10, [1, 100, 1000]) ➞ 0\\n1 is the number nearest to 10.\\n\\nnearest_element(50, [100, 49, 51]) ➞ 2\\n49 and 51 are equally dista\",\"tags\":[\"arrays\",\"loops\"],\"timestamp\":{\"$date\":1572902770765},\"title\":\"The Nearest Element\",\"stats\":{\"completed\":{\"total\":134,\"ratings\":[1,1,1,1,1,1,2,1,2,1,2,4,1,2,3,0,2,3,3,0,2,2,2,2,2,2,2,2,2,2,3,2,2,3,1,3,2,0,2,1,2,2,2,1,0,2,2,2,2,2,2,2,2,2,0,1,2,2,2,3,2,2,2,1,2,2,2,1,2,3,1,0,3,2,1,2,3,2,2,1,0,2,1,1,2,2,3,2,1,1,2,2,1,2,2,1,1,0,2,1,2,2,1,2,3,0,3,2,1,2,1,1],\"rators\":[\"gb9rvGus2Jv7bjZSs\",\"ksafdYcNM3SFEQoW9\",\"HqmxnQJM66Y57twhn\",\"K96FwtfDDN5WM4Bb7\",\"tAF9Gf6PiGogbZuWs\",\"3LiSLdtN58n46NEqg\",\"P7xgJDQber9i32aJd\",\"8JyqsSbN2FJXPr3cw\",\"N2wnZXkhDH86mgjQ8\",\"fAoLuqbGvHn4w2PHf\",\"gMJhLdyw3tH7L96X2\",\"bQPAxbehmAdJvMoYd\",\"HQxp7NcdvF92G7bYS\",\"2fxapKr8XGdNeaKi2\",\"otXtuQygbcYATMZoP\",\"XKi8iZXBCHCaebSHh\",\"Nj6FwgBtAXsaQwsM2\",\"SKabuq5XuhXBugKBa\",\"8PE2cfZEhQBPhe8LG\",\"uSh3aNxzD28jBuhxa\",\"PSrcg6fy835R4c5CW\",\"kQH5b8MXJunh84Czq\",\"nQRzZKeDKuLRf9chX\",\"m6Gp2a9B8G3sXfrJy\",\"qJZsi5rhRnWA38FbA\",\"CEd9tLdXeDeNHSzys\",\"DLai9DxpZN6p5TPRX\",\"C4QntmkYtB89GNtpd\",\"6ShafRStcvew4GfCh\",\"xAgd4WTwd9HYmJceT\",\"2rc86eoe88DLhFeJD\",\"PqEKjCDkJtYoYuZfj\",\"tAeWvXWeHNcrwbTPk\",\"yAouD3PxzED8a4gap\",\"Jqk2uJZZxEv5wZFze\",\"TTSFzTyGpi5eckkHZ\",\"w2FwiD5CGk7YsdRXM\",\"GEvSGXDkk7pACfYri\",\"nfXGHENb5md7m355s\",\"ab7BsQuhDo3QgE6bh\",\"Xj6R2zqhgumffQCAN\",\"Yp7uvStL97cC9fKkY\",\"2innwjWqxJHo4eRGh\",\"BeFnbPbMnAM2SjBdZ\",\"AasGs8AeX9Lcb9xJn\",\"4CFzv558qbGcpQwc4\",\"s5M5RvgqR9BhB9JoC\",\"v3fjGuc7Pq4yjFygS\",\"yZvzB3qFb8pkHy4dg\",\"Z85ajWfZ4jDPkbvR4\",\"aEm3Wvj2rFYRL8Lrb\",\"cR3ibTMxLyEdDFCHY\",\"sJWTa7iWeRoRtqJ8N\",\"vLrq4dEDMM2wd68Dc\",\"Jg8ZSRXe3NoDMCqGu\",\"hnyhBFWwNCz9mDfSi\",\"dHZqT6h4JMwk5fPC8\",\"jNvegJWCk5HCtEMbK\",\"ZNnsMeNkdDhHjSrZb\",\"8PwfYqoDQFThzNtvf\",\"gJYuGdkXEWWmGRLzu\",\"DEDniTrstQYGounXT\",\"HF28xZKSLM9wEuqNg\",\"KdNDysEsy2TW5QRJ2\",\"Nua6T3dBurBy3Qfg9\",\"9pzFiFK3ANLjQfnr2\",\"ahk2qiXKJA753wAJk\",\"YLtspA8ec6ntcoMMf\",\"mFqrAKcfZZM58iYmw\",\"LQxof8pGabGuWP7Gn\",\"4rwxLqLs2mNZNg8NB\",\"jN3vmzf6ad7EubAjQ\",\"NG8PWBSjsM8mMhQEq\",\"iojEnnY9FsMfYzp6f\",\"syRNbbPdLCGXbH2Gy\",\"hRiMXDZNAzyPd5tpt\",\"ZrKCkX7xxGGZzauFW\",\"yjtdwc2AC4jA2RWtn\",\"6kz7jjJS8W4tikYQT\",\"YcCLwitFMAEJSnxAW\",\"oBcs8GLX2ZFLXQy8y\",\"QRv96jmNaYsWkxQEG\",\"tpxMgkGSHwBjS95Ta\",\"DYDJTyGgKFnBRLm2r\",\"CTKmXtrqDYqJBnuy8\",\"gXTAie79kiw28tx5u\",\"DPi9QGLctq2y76KuE\",\"9F75P2ijSoCpSGNsX\",\"J3upzLHuEwXH7Z2hx\",\"dYPkStFnLvAMsHSzZ\",\"JS3hNM3XXkxPdg3yk\",\"iS5BrkGLzJyPK7nKt\",\"cAP3n5NY64uoMwzRR\",\"FEYpu9RWysAgW3XnP\",\"zd9FLSzsGz3evKafy\",\"qZQxPQ2kaNKAMesHT\",\"cZccqzRQ9GgjQF6Az\",\"5S9nX4rKsnCcnv4Cz\",\"eYfPWvZwnJQkHbSTK\",\"GGdmhAvxXhqhhibJN\",\"TJdhTQ7eqdFQLJsM3\",\"qAby4AWXmTNeusvg3\",\"Ds7L5bksw2QRHjrKL\",\"J5T8gZqiZXFuFDTQ7\",\"srJ34BaybkQh3qRkM\",\"CHvzhtXnv8HTbPQ56\",\"eHcgvkTGsH7ZziqBo\",\"yr822PZmmiDDenxpB\",\"5HCu9Ydd86QgHDRNP\",\"T6iBEE2jp7f7iEF2P\",\"AFfw7cGg83uYk2Miy\",\"9bQyb6rW7xfE4vgrR\",\"mvJBakQ35CWAnbbEZ\",\"yod5YhKtPqw2GfG9B\",\"dzS6WBTMHyFEag6Fp\",\"BrTDhPJcACL2bsrpJ\",\"DsBFmeergMzBquAfA\",\"d8qtzoLB264iP8tdY\",\"buX4mCQhtXCfBjeno\",\"2PufnQcsHsfymufX3\",\"eMuCpJ2spXWkJjWNz\",\"ey3CASd6Je5LEJzfB\",\"3nied3n8KG8RSNixH\",\"Wi4H6ayKsNDWWQCG5\"],\"quality\":[5,5,5,5,4,2,5,5,5,5,5,5,5,5,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"quality\":4.764705882352941,\"family\":[{\"_id\":\"tyQ7ufHGqcDuMu4rv\",\"language\":\"cpp\"},{\"_id\":\"YE4GQfR9wRbpcPrgE\",\"language\":\"javascript\"},{\"_id\":\"tX5ZhY5EkduHAPZBh\",\"language\":\"python3\"},{\"_id\":\"AL6Sfb25nqwcinvDj\",\"language\":\"ruby\"}]}}"]