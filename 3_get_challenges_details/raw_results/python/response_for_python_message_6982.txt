a["{\"msg\":\"result\",\"id\":\"2199\",\"result\":{\"_id\":\"cHzvB5KCWCK3oCLGL\",\"archived\":false,\"author\":\"kochug\",\"authorId\":\"vQEmjTRgmdGNYB7yk\",\"code\":\"def game_of_life(board):\\n\\t\",\"difficulty\":3.382716049382716,\"familyId\":\"K2HFTftTLPnheYboS\",\"instructions\":\"![Conway's Game of Life](https://s3.amazonaws.com/edabit-images/game-of-life.gif)\\n\\nThe goal of this challenge is to implement the logic used in Conway's Game of Life. Wikipedia will give a better understanding of what it is and how it works (check the resources tab above).\\n\\n### Rules\\n- **For a space that's \\\"populated\\\":**\\n    - Each cell with 0 or 1 neighbours dies, as if by solitude.\\n    - Each cell with 2 or 3 neighbours survives.\\n    - Each cell with 4 or more neighbours dies, as if by overpopulation.\\n- **For a space that's \\\"empty\\\" or \\\"unpopulated\\\":**\\n    - Each cell with 3 neighbours becomes populated.\\n\\n### Parameters\\n`board`: a 2-dimensional list of values 0 to 1.\\n- 0 means that the cell is empty.\\n- 1 means the cell is populated.\\n\\n### Return Value\\nA `string` containing the board's state after the game logic has been applied once.\\n\\n```\\nOn character: I\\nOff character: _\\n```\\n\\n### Notes\\n- The string should be divided by newlines `\\\\n` to signal the end of each row.\\n- A cell's \\\"neighbours\\\" are the eight cells that are vertically, horizontally and diagonally adjacent to it.\",\"lab\":\"example1 = [\\n  [0, 0, 0],\\n  [0, 1, 0],\\n  [0, 0, 0],\\n]\\n\\nexample2 = [\\n  [0, 1, 0],\\n  [1, 1, 1],\\n  [0, 1, 0],\\n]\\n\\nexample3 = [\\n  [1, 0, 0],\\n  [0, 1, 0],\\n  [0, 0, 1],\\n]\\n\\nexample4 = [\\n  [1, 0, 1],\\n  [0, 0, 0],\\n  [1, 0, 0],\\n]\\n\\nglider = [\\n  [0, 0, 0, 0, 0],\\n  [0, 0, 1, 0, 0],\\n  [0, 0, 0, 1, 0],\\n  [0, 1, 1, 1, 0],\\n  [0, 0, 0, 0, 0],\\n]\\n\\nsmallExploder = [\\n  [0, 0, 0, 0, 0],\\n  [0, 0, 1, 0, 0],\\n  [0, 1, 1, 1, 0],\\n  [0, 1, 0, 1, 0],\\n  [0, 0, 1, 0, 0],\\n  [0, 0, 0, 0, 0],\\n]\\n\\nexploder = [\\n  [0, 0, 0, 0, 0, 0, 0],\\n  [0, 1, 0, 1, 0, 1, 0],\\n  [0, 1, 0, 0, 0, 1, 0],\\n  [0, 1, 0, 0, 0, 1, 0],\\n  [0, 1, 0, 0, 0, 1, 0],\\n  [0, 1, 0, 1, 0, 1, 0],\\n  [0, 0, 0, 0, 0, 0, 0],\\n]\\n\\nrowOf10 = [\\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n  [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],\\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n]\\n\\nlightweightSpaceship = [\\n  [0, 0, 0, 0, 0, 0, 0],\\n  [0, 0, 1, 1, 1, 1, 0],\\n  [0, 1, 0, 0, 0, 1, 0],\\n  [0, 0, 0, 0, 0, 1, 0],\\n  [0, 1, 0, 0, 1, 0, 0],\\n  [0, 0, 0, 0, 0, 0, 0],\\n]\\n\\ntumbler = [\\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\\n  [0, 0, 1, 1, 0, 1, 1, 0, 0],\\n  [0, 0, 1, 1, 0, 1, 1, 0, 0],\\n  [0, 0, 0, 1, 0, 1, 0, 0, 0],\\n  [0, 1, 0, 1, 0, 1, 0, 1, 0],\\n  [0, 1, 0, 1, 0, 1, 0, 1, 0],\\n  [0, 1, 1, 0, 0, 0, 1, 1, 0],\\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\\n]\\n\\ncheckerboard = [\\n  [1, 0, 1, 0, 1, 0, 1, 0, 1],\\n  [0, 1, 0, 1, 0, 1, 0, 1, 0],\\n  [1, 0, 1, 0, 1, 0, 1, 0, 1],\\n  [0, 1, 0, 1, 0, 1, 0, 1, 0],\\n  [1, 0, 1, 0, 1, 0, 1, 0, 1],\\n  [0, 1, 0, 1, 0, 1, 0, 1, 0],\\n  [1, 0, 1, 0, 1, 0, 1, 0, 1],\\n]\\n\\nbigShape = [\\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n  [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0],\\n  [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],\\n  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0],\\n  [0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0],\\n  [0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0],\\n  [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0],\\n  [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],\\n  [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0],\\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n]\\n\\nTest.assert_equals(game_of_life(example1),'___\\\\n___\\\\n___')\\nTest.assert_equals(game_of_life(example2),'III\\\\nI_I\\\\nIII')\\nTest.assert_equals(game_of_life(example3),'___\\\\n_I_\\\\n___')\\nTest.assert_equals(game_of_life(example4),'___\\\\n_I_\\\\n___')\\nTest.assert_equals(game_of_life(glider),'_____\\\\n_____\\\\n_I_I_\\\\n__II_\\\\n__I__')\\nTest.assert_equals(game_of_life(smallExploder),'_____\\\\n_III_\\\\n_I_I_\\\\n_I_I_\\\\n__I__\\\\n_____')\\nTest.assert_equals(game_of_life(exploder),'_______\\\\n__I_I__\\\\nII___II\\\\nIII_III\\\\nII___II\\\\n__I_I__\\\\n_______')\\nTest.assert_equals(game_of_life(rowOf10),'__IIIIIIII__\\\\n__IIIIIIII__\\\\n__IIIIIIII__')\\nTest.assert_equals(game_of_life(lightweightSpaceship),'___II__\\\\n__IIII_\\\\n__II_II\\\\n____II_\\\\n_______\\\\n_______')\\nTest.assert_equals(game_of_life(tumbler),'_________\\\\n__II_II__\\\\n_________\\\\n___I_I___\\\\n___I_I___\\\\nII_I_I_II\\\\n_II___II_\\\\n_________')\\nTest.assert_equals(game_of_life(checkerboard),'_IIIIIII_\\\\nI_______I\\\\nI_______I\\\\nI_______I\\\\nI_______I\\\\nI_______I\\\\n_IIIIIII_')\\nTest.assert_equals(game_of_life(bigShape),'_________I_____\\\\n__II____I_I____\\\\n__II____I______\\\\n_I__I__II__I___\\\\n_I_II___I_I_I__\\\\n__I________III_\\\\n___II____I__II_\\\\n____II_________\\\\n_____I__I______\\\\n_______________')\",\"language\":\"python3\",\"summary\":\"Conway's Game of Life\\n\\nThe goal of this challenge is to implement the logic used in Conway's Game of Life. Wikipedia will give a better understanding of what it is and how it works (check the resources tab above).\\n\\nRules\\nFor a space that's \\\"populated\\\":\\n    Each cell with 0 or 1 neighbours dies, as if by solitude.\\n    Each cell with 2 or 3 neighbours survives.\",\"tags\":[\"arrays\",\"games\",\"loops\",\"conditions\"],\"timestamp\":{\"$date\":1524399972916},\"title\":\"Conway's Game of Life\",\"stats\":{\"completed\":{\"total\":87,\"ratings\":[2,2,2,2,2,3,2,2,2,2,3,3,4,3,3,3,4,4,2,3,3,3,4,5,3,4,3,4,3,4,3,4,3,4,2,5,0,2,3,4,3,3,2,4,4,5,3,5,3,5,5,3,4,5,5,5,5,3,3,1,4,5,5,5,1,0,5,2,5,5,2,5,2,3,3,5,5,5,5,2,5],\"rators\":[\"vQEmjTRgmdGNYB7yk\",\"HK3RW4kr7acFSAyL4\",\"tuyDaJzFy78jxvhCY\",\"r3Nz6CMXykQgbEtWZ\",\"6fJpRpAgiWD5zX9qB\",\"5JXnPbYC8RuBG6FkM\",\"oFyPYyJnbMKPb2A35\",\"3mtD7DxrAgDMcxWKt\",\"HzoW2LzYfnXktKYGm\",\"u39MGPSqAhktCMZzQ\",\"5LoHDiuaWur8GNgEQ\",\"pdcaC4fEtsubBz4Wo\",\"QyYmR6GqGSiw8KXYc\",\"wPhd86JGzcCkkQdyy\",\"axnLNbddHAGKR8dtF\",\"tAF9Gf6PiGogbZuWs\",\"RsX6W2ddWM8ajHzss\",\"xQ7uLC6QTtEyKENv9\",\"uJ5A3zjLi9iN5eeXX\",\"vsxmgZACKE2TafBhQ\",\"nydW2HwDGZuk8XaEL\",\"W2RBjMJ9KQPg4tjNZ\",\"8JyqsSbN2FJXPr3cw\",\"yZvzB3qFb8pkHy4dg\",\"gb9rvGus2Jv7bjZSs\",\"MXjxGML2X75x64vJo\",\"AYaEkTWLMmfzpwejr\",\"HqmxnQJM66Y57twhn\",\"aEJumM5K8PvnFwWWm\",\"oWLvfc6Apa5ebBhy5\",\"9xdJPHCYkg5wTiKcF\",\"hwLAvyumMvYXNv3j5\",\"FcYkLyobygEEwcga9\",\"Jqk2uJZZxEv5wZFze\",\"8AipP2ZKTAhvzfQAr\",\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\",\"ypagZTh36kMRyJTxF\",\"AasGs8AeX9Lcb9xJn\",\"fznzd3qnvtbFkkizz\",\"gJYuGdkXEWWmGRLzu\",\"bLpgu8xTdpDPFSAsM\",\"Fjj4bZPgBTgyWjw7c\",\"bJaPCBx63YxdJAuTS\",\"qrC3vRSwnuHCheqx3\",\"neRxsjCeKWgXmLKDL\",\"rQRNL3B4x9gg4SkXf\",\"C28oXk6hCbo4iZnXf\",\"bDpmwo4vm9jHeZAPk\",\"5H9MNfC4DPwxbakTf\",\"aCNWav8S8Try9RkC6\",\"ZSbcGKj67qFTPfzqh\",\"nLpdvK7EcahCqNe8X\",\"SGhPxX5bHGL8zZqtt\",\"Nfsj4eNFDjaFa39ga\",\"W5TajitmCyxz87zAC\",\"xn7uGNKeAwPEkP9oA\",\"4sHkH3t9CJYhbDwjM\",\"GgLd4eWBu79mdjtkP\",\"6428wKHtwKkFdvBs5\",\"4fhjJBvLBWh6QeSih\",\"hZW6j5s6RHpx35phy\",\"YfsHFQYedf4r3Z2D8\",\"emagfXjqjkuDhZCbj\",\"oZiGwL535nJ5ZMJr7\",\"mDWNyaaQ9hvPCRzSd\",\"5hhuYLyGkeqCvaSrf\",\"4Wx8m46eWWadZNuLq\",\"h4x2jaMdj5aQZbW5g\",\"n2e74kbZHY3u7Cgej\",\"waNsY2k4ndReyEREk\",\"Cia25zjeX3RkCNx5t\",\"ZitsKMQFKHRQw7AhC\",\"HF28xZKSLM9wEuqNg\",\"QBgP4BySQAeCoCFf6\",\"2PufnQcsHsfymufX3\",\"s5M5RvgqR9BhB9JoC\",\"8sNv5PTHa7XQ8bNqR\",\"iojEnnY9FsMfYzp6f\",\"YnfabNcKMvWTsyXMb\",\"J3upzLHuEwXH7Z2hx\",\"yjtdwc2AC4jA2RWtn\",\"iS5BrkGLzJyPK7nKt\"],\"quality\":[2,5,5,5,4,5]},\"complaints\":{\"total\":0,\"reasons\":[],\"skippers\":[\"vQEmjTRgmdGNYB7yk\"]},\"instructions\":{\"score\":13.650000000000002,\"voters\":[\"GRZzKCbeb4xKHFCrZ\",\"5LoHDiuaWur8GNgEQ\",\"XcHCqYmeoqxDsoucx\"]},\"tests\":{\"score\":2.25,\"voters\":[\"5LoHDiuaWur8GNgEQ\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.333333333333333,\"family\":[{\"_id\":\"CzfwodvnWs5QjzEgv\",\"language\":\"javascript\"},{\"_id\":\"cHzvB5KCWCK3oCLGL\",\"language\":\"python3\"},{\"_id\":\"K6PWN8NoCxSgToS3h\",\"language\":\"ruby\"}]}}"]