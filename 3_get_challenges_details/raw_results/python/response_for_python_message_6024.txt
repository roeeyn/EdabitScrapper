a["{\"msg\":\"result\",\"id\":\"1727\",\"result\":{\"_id\":\"2hk7hFz6haBahtnof\",\"author\":\"zatoichi49\",\"authorId\":\"tAF9Gf6PiGogbZuWs\",\"code\":\"def competition_rank(results, person):\\n\\t\",\"difficulty\":2.209090909090909,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"HWuLwjhDgJGDk7765\",\"instructions\":\"Standard competition ranking (also known as \\\"1224\\\" ranking) assigns the same rank to matching values. Rank numbers are increased each time, so ranks are sometimes *skipped*. If we have 5 scores (the highest score having a rank of 1):\\n\\nNo matching values:\\n```\\nScores = [99, 98, 97, 96, 95]\\nRank = 1,  2,  3,  4,  5\\n```\\n\\nWith matching values:\\n```\\nScores = [99, 98, 98, 96, 95]\\nRank = 1,  2,  2,  4,  5\\n\\n# Second and third scores are equal, so rank \\\"3\\\" is skipped.\\n```\\n\\nGiven a dictionary containing the names and scores of 5 competitors, and a competitor name, return the *rank* of that competitor after applying competition ranking.\\n\\n### Examples\\n```\\ncompetition_rank({\\n  \\\"George\\\": 96,\\n  \\\"Emily\\\": 95,\\n  \\\"Susan\\\": 93,\\n  \\\"Jane\\\": 89,\\n  \\\"Brett\\\": 82\\n  }, \\\"Jane\\\") ➞ 4\\n\\ncompetition_rank({\\n  \\\"Kate\\\": 92,\\n  \\\"Carol\\\": 92,\\n  \\\"Jess\\\": 87,\\n  \\\"Bruce\\\": 87,\\n  \\\"Scott\\\": 84\\n  }, \\\"Bruce\\\") ➞ 3\\n```\\n\\n### Notes\\nThe highest score has a rank value of 1.\",\"lab\":\"Test.assert_equals(competition_rank({'Aria': 90, 'Brooke': 90, 'Olivia': 90, 'Eve': 74, 'Ellie': 87}, \\\"Ellie\\\"), 4)\\nTest.assert_equals(competition_rank({'Ryan': 97, 'Thomas': 85, 'Kai': 95, 'Aiden': 87, 'Logan': 90}, \\\"Logan\\\"), 3)\\nTest.assert_equals(competition_rank({'Lilly': 91, 'Harris': 87, 'Archie': 93, 'Lexi': 100, 'Ava': 88}, \\\"Lilly\\\"), 3)\\nTest.assert_equals(competition_rank({'Jayden': 90, 'Josh': 90, 'Rebecca': 96, 'Jack': 89, 'Max': 96}, \\\"Rebecca\\\"), 1)\\nTest.assert_equals(competition_rank({'Ben': 78, 'Quinn': 84, 'Lena': 84, 'Isla': 92, 'Kayla': 72}, \\\"Ben\\\"), 4)\\nTest.assert_equals(competition_rank({'Lucy': 81, 'Ella': 90, 'Summer': 91, 'Harper': 81, 'Sadie': 85}, \\\"Ella\\\"), 2)\\nTest.assert_equals(competition_rank({'Cole': 96, 'Carson': 92, 'Gabriel': 91, 'Hollie': 97, 'Penelope': 85}, \\\"Hollie\\\"), 1)\\nTest.assert_equals(competition_rank({'Michael': 89, 'Noah': 98, 'Reuben': 88, 'Sam': 91, 'Mia': 91}, \\\"Mia\\\"), 2)\\nTest.assert_equals(competition_rank({'James': 93, 'Maria': 91, 'Lewis': 95, 'Joseph': 96, 'Imogen': 90}, \\\"Lewis\\\"), 2)\\nTest.assert_equals(competition_rank({'Jessica': 90, 'Emily': 99, 'Hope': 91, 'Charlie': 96, 'Lucas': 87}, \\\"Hope\\\"), 3)\\nTest.assert_equals(competition_rank({'Sophie': 86, 'Piper': 98, 'Elliot': 100, 'Erica': 90, 'Freya': 100}, \\\"Freya\\\"), 1)\\nTest.assert_equals(competition_rank({'Grace': 93, 'Henry': 90, 'Florence': 98, 'Millie': 89, 'David': 99}, \\\"Henry\\\"), 4)\\nTest.assert_equals(competition_rank({'Alfie': 90, 'Elijah': 90, 'Cara': 85, 'Isaac': 96, 'Bella': 92}, \\\"Elijah\\\"), 3)\\nTest.assert_equals(competition_rank({'Clara': 85, 'Matilda': 86, 'Amelia': 98, 'Oliver': 95, 'Adam': 94}, \\\"Clara\\\"), 5)\\nTest.assert_equals(competition_rank({'Nina': 81, 'Tommy': 79, 'Tyler': 84, 'Leo': 79, 'Hallie': 79}, \\\"Nina\\\"), 2)\\nTest.assert_equals(competition_rank({'Violet': 99, 'Finn': 100, 'Eden': 99, 'Frankie': 98, 'Rory': 98}, \\\"Frankie\\\"), 4)\\nTest.assert_equals(competition_rank({'Robbie': 70, 'Julia': 76, 'Owen': 70, 'Phoebe': 92, 'Jacob': 79}, \\\"Owen\\\"), 4)\\nTest.assert_equals(competition_rank({'Andrew': 95, 'Louis': 95, 'Riley': 95, 'Amy': 95, 'Charlotte': 95}, \\\"Charlotte\\\"), 1)\\nTest.assert_equals(competition_rank({'Harry': 81, 'Elsie': 81, 'Grayson': 84, 'John': 84, 'Alex': 81}, \\\"Elsie\\\"), 3)\\nTest.assert_equals(competition_rank({'Innes': 76, 'Lola': 85, 'Anna': 92, 'Cooper': 93, 'Daniel': 93}, \\\"Cooper\\\"), 1)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,3,2,3,2,2,0,3,3,1,3,3,3,3,1,3,0,3,2,2,3,2,2,2,2,0,3,1,0,3,2,4,1,1,3,2,3,2,3,0,1,2,2,2,3,2,3,2,3,2,3,4,0,3,1,3,1,1,3,2,3,3,2,2,3,2,3,2,2,4,4,3,1,3,0,4,2,2,3,3,2,3,2,4,3,0,3,3,3,2,3,3,3,3,3,3,2,1,1,3,0,0,2,2,3,1],\"rators\":[\"gb9rvGus2Jv7bjZSs\",\"yZvzB3qFb8pkHy4dg\",\"tAF9Gf6PiGogbZuWs\",\"yrCNkFYQBEDE76eFS\",\"C9LKGu2g5hSijvDzA\",\"aHKMdSPJgsMW3s2kL\",\"BFNm9gacwba9KyLFW\",\"8JyqsSbN2FJXPr3cw\",\"QGRs577jvdGS9pSnf\",\"aXCm9vWqKwL9XFYoj\",\"kB33rv8vc7mgoaMHG\",\"jYJ26SiLKBu5GRumq\",\"YoBCuhXieTP8bH7ah\",\"Ey7YDkAZKf4a9KFoK\",\"Bw29ZPZGqzTzZrWJk\",\"gMJhLdyw3tH7L96X2\",\"ZbunZ3ASwaBpgteiZ\",\"cR3ibTMxLyEdDFCHY\",\"s5M5RvgqR9BhB9JoC\",\"kQH5b8MXJunh84Czq\",\"BNTzodwX5ar2e5p8e\",\"8S5YEwX455Ye4RtKT\",\"2fxapKr8XGdNeaKi2\",\"AYaEkTWLMmfzpwejr\",\"Jg8ZSRXe3NoDMCqGu\",\"HqmxnQJM66Y57twhn\",\"YTTTwEP9F7mBe5Xgi\",\"otXtuQygbcYATMZoP\",\"Nj6FwgBtAXsaQwsM2\",\"viXCM8udFdJ6BD4nt\",\"stKEm7Cdsauxmhw5Z\",\"K7ipA4FZ8yGYMYXL7\",\"JAe93nc5vNewSckSB\",\"8PwfYqoDQFThzNtvf\",\"Jqk2uJZZxEv5wZFze\",\"6ShafRStcvew4GfCh\",\"K96FwtfDDN5WM4Bb7\",\"5uA8xmgifmiJrqbzy\",\"ab7BsQuhDo3QgE6bh\",\"yoYQqaY6GszuTkNSs\",\"2innwjWqxJHo4eRGh\",\"jaP8tfdxt4XbSGgo6\",\"C4QntmkYtB89GNtpd\",\"pkQBaSzukotPEXmrD\",\"Yp7uvStL97cC9fKkY\",\"4CFzv558qbGcpQwc4\",\"Lw8oRc5SERsuntXMo\",\"Q6AFXWu4FpknpGShD\",\"AasGs8AeX9Lcb9xJn\",\"PytNZK9mNiRiZxPrm\",\"BpkWHjXfgDrCLnjRg\",\"2uqYEp8CL3APJ2zgP\",\"w3A7cBWyAfukk6xEQ\",\"vhoXR5bEdAaucGtfw\",\"ghTAisPZoS5FTqQnK\",\"aEm3Wvj2rFYRL8Lrb\",\"KRmxvA4mWgfKvHmYN\",\"JQ5uoxA4WZgN6HyJk\",\"ZNnsMeNkdDhHjSrZb\",\"ywk3XGvcmpTgRxwZa\",\"wT5gGgvjKc5wz59AQ\",\"RcFJfYquW9quJDnp5\",\"YRstQuthRkFeBiXug\",\"kYWb8BwpKwunQkxeX\",\"55RQznnuTGpsj3EXd\",\"MKJhn7goNzuGtB5y9\",\"EjbDDFRECrzQDkzrX\",\"9dgvEreRDYRiwLmYv\",\"gJYuGdkXEWWmGRLzu\",\"9pzFiFK3ANLjQfnr2\",\"n2BRY9X8899dcG8Bw\",\"AvtKS96FxZxLFymuP\",\"a777e8chPvJkY3tKa\",\"v9KtC8YLbMWmXiW2H\",\"hab8YixsXxe4CcZpP\",\"DSNs8jydjL97Ap7C7\",\"JS3hNM3XXkxPdg3yk\",\"HF28xZKSLM9wEuqNg\",\"f2BoqyCpgnmjEjLqx\",\"dzS6WBTMHyFEag6Fp\",\"YA7SDhpgEtsqynvNL\",\"Ecg4m7srYGgZsb4Ck\",\"Wv2vJnEj8ywNmARoF\",\"gMjAMD8XPK9sbx7eT\",\"yjtdwc2AC4jA2RWtn\",\"DEDniTrstQYGounXT\",\"89u5dciSyZKJzwLKK\",\"wniy5aKNkwYTNAkrz\",\"w3o9qJuPR62HHh9mx\",\"qD2LrwaDrSdiybLKY\",\"vQfCPxLCJk862xHK2\",\"BdnE4RS5puoxo92mA\",\"zZDaXBxMzTCBhNkgL\",\"xn7uGNKeAwPEkP9oA\",\"J3upzLHuEwXH7Z2hx\",\"DPi9QGLctq2y76KuE\",\"p8qqFdJ3FSk5x9z3G\",\"gXTAie79kiw28tx5u\",\"qAby4AWXmTNeusvg3\",\"RTDx9axf52kxhFjwZ\",\"iojEnnY9FsMfYzp6f\",\"bvmTE46bfcM4ogj34\",\"oBcs8GLX2ZFLXQy8y\",\"QRv96jmNaYsWkxQEG\",\"DH9pBwJ2YopK5BXhf\",\"BrTDhPJcACL2bsrpJ\",\"bpqtJYYK2B9BEAo3i\",\"ADycYubh8WTMCXhgR\",\"H9KZi2cjt4FwH7qog\",\"MpfytGFYF77emJ3cT\",\"T6iBEE2jp7f7iEF2P\",\"gKnWjDjwrJh7MK2df\",\"yod5YhKtPqw2GfG9B\",\"4Lwjr34ypKNQNQCar\",\"2PufnQcsHsfymufX3\",\"8sNv5PTHa7XQ8bNqR\"],\"total\":125,\"quality\":[4,5,5,5,5,5,4,5,5,5,3]},\"flags\":0},\"subscribers\":[\"tAF9Gf6PiGogbZuWs\"],\"summary\":\"Standard competition ranking (also known as \\\"1224\\\" ranking) assigns the same rank to matching values. Rank numbers are increased each time, so ranks are sometimes skipped. If we have 5 scores (the highest score having a rank of 1):\\n\\nNo matching values:\\nScores = [99, 98, 97, 96, 95]\\nRank = 1,  2,  3,  4,  5\\n\\nWith matching values:\\nScores = [99, 98, 98, 96, 95]\\nR\",\"tags\":[\"data_structures\",\"objects\"],\"timestamp\":{\"$date\":1564672335297},\"title\":\"Standard Competition Ranking\",\"isHidden\":false,\"quality\":4.636363636363637,\"family\":[{\"_id\":\"g2QxB5HCE9hN3PS75\",\"language\":\"javascript\"},{\"_id\":\"2hk7hFz6haBahtnof\",\"language\":\"python3\"},{\"_id\":\"4FxgBApJsTJjE9BNZ\",\"language\":\"ruby\"}]}}"]