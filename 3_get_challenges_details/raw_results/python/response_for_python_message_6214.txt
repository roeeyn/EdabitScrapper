a["{\"msg\":\"result\",\"id\":\"1817\",\"result\":{\"_id\":\"cToBLderwJrpqML8w\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"def champions(teams):\\n\\t\",\"difficulty\":2.511627906976744,\"familyId\":\"nmiiDR7vkEEWuNG7e\",\"instructions\":\"Create a function that takes a list of football clubs with properties: `name, wins, loss, draws, scored, conceded`, and returns the **team name** with the highest number of points. If two teams have the **same number of points**, return the team with the **largest goal difference**.\\n\\n### How to Calculate Points and Goal Difference\\n```\\nteam = { \\\"name\\\": \\\"Manchester United\\\", \\\"wins\\\": 30, \\\"loss\\\": 3, \\\"draws\\\": 5, \\\"scored\\\": 88, \\\"conceded\\\": 20 }\\n\\nTotal Points = 3 * wins + 0 * loss + 1 * draws = 3 * 30 + 0 * 3 + 5 * 1 = 95 points\\nGoal Difference = scored - conceded = 88 - 20 = 68\\n```\\n\\n### Examples\\n```\\nchampions([\\n  {\\n    \\\"name\\\": \\\"Manchester United\\\",\\n    \\\"wins\\\": 30,\\n    \\\"loss\\\": 3,\\n    \\\"draws\\\": 5,\\n    \\\"scored\\\": 88,\\n    \\\"conceded\\\": 20,\\n  },\\n  {\\n    \\\"name\\\": \\\"Arsenal\\\",\\n    \\\"wins\\\": 24,\\n    \\\"loss\\\": 6,\\n    \\\"draws\\\": 8,\\n    \\\"scored\\\": 98,\\n    \\\"conceded\\\": 29,\\n  },\\n  {\\n    \\\"name\\\": \\\"Chelsea\\\",\\n    \\\"wins\\\": 22,\\n    \\\"loss\\\": 8,\\n    \\\"draws\\\": 8,\\n    \\\"scored\\\": 98,\\n    \\\"conceded\\\": 29,\\n  }\\n]) âžž \\\"Manchester United\\\"\\n```\\n\\n### Notes\\nInput is a list of teams.\",\"isHidden\":false,\"lab\":\"Test.assert_equals(\\n  champions([\\n    {\\n      \\\"name\\\": \\\"Manchester United\\\",\\n      \\\"wins\\\": 30,\\n      \\\"loss\\\": 3,\\n      \\\"draws\\\": 5,\\n      \\\"scored\\\": 88,\\n      \\\"conceded\\\": 20,\\n    },\\n    {\\n      \\\"name\\\": \\\"Arsenal\\\",\\n      \\\"wins\\\": 24,\\n      \\\"loss\\\": 6,\\n      \\\"draws\\\": 8,\\n      \\\"scored\\\": 98,\\n      \\\"conceded\\\": 29,\\n    },\\n    {\\n      \\\"name\\\": \\\"Chelsea\\\",\\n      \\\"wins\\\": 22,\\n      \\\"loss\\\": 8,\\n      \\\"draws\\\": 8,\\n      \\\"scored\\\": 98,\\n      \\\"conceded\\\": 29,\\n    },\\n  ]),\\\"Manchester United\\\"\\n)\\nTest.assert_equals(\\n  champions([\\n    {\\n      \\\"name\\\": \\\"Manchester City\\\",\\n      \\\"wins\\\": 30,\\n      \\\"loss\\\": 8,\\n      \\\"draws\\\": 0,\\n      \\\"scored\\\": 67,\\n      \\\"conceded\\\": 20,\\n    },\\n    {\\n      \\\"name\\\": \\\"Liverpool\\\",\\n      \\\"wins\\\": 34,\\n      \\\"loss\\\": 2,\\n      \\\"draws\\\": 2,\\n      \\\"scored\\\": 118,\\n      \\\"conceded\\\": 29,\\n    },\\n    {\\n      \\\"name\\\": \\\"Leicester City\\\",\\n      \\\"wins\\\": 22,\\n      \\\"loss\\\": 8,\\n      \\\"draws\\\": 8,\\n      \\\"scored\\\": 98,\\n      \\\"conceded\\\": 29,\\n    },\\n  ]),\\\"Liverpool\\\"\\n)\\n\\nTest.assert_equals(\\n  champions([\\n    {\\n      \\\"name\\\": \\\"Manchester City\\\",\\n      \\\"wins\\\": 30,\\n      \\\"loss\\\": 8,\\n      \\\"draws\\\": 0,\\n      \\\"scored\\\": 67,\\n      \\\"conceded\\\": 20,\\n    },\\n    {\\n      \\\"name\\\": \\\"New Castle United\\\",\\n      \\\"wins\\\": 34,\\n      \\\"loss\\\": 2,\\n      \\\"draws\\\": 2,\\n      \\\"scored\\\": 118,\\n      \\\"conceded\\\": 36,\\n    },\\n    {\\n      \\\"name\\\": \\\"Leicester City\\\",\\n      \\\"wins\\\": 34,\\n      \\\"loss\\\": 2,\\n      \\\"draws\\\": 2,\\n      \\\"scored\\\": 108,\\n      \\\"conceded\\\": 21,\\n    },\\n  ]),\\\"Leicester City\\\"\\n)\\nTest.assert_equals(\\n  champions([\\n    {\\n      \\\"name\\\": \\\"Manchester City\\\",\\n      \\\"wins\\\": 30,\\n      \\\"loss\\\": 6,\\n      \\\"draws\\\": 2,\\n      \\\"scored\\\": 102,\\n      \\\"conceded\\\": 20,\\n    },\\n    {\\n      \\\"name\\\": \\\"Liverpool\\\",\\n      \\\"wins\\\": 24,\\n      \\\"loss\\\": 6,\\n      \\\"draws\\\": 8,\\n      \\\"scored\\\": 118,\\n      \\\"conceded\\\": 29,\\n    },\\n    {\\n      \\\"name\\\": \\\"Arsenal\\\",\\n      \\\"wins\\\": 28,\\n      \\\"loss\\\": 2,\\n      \\\"draws\\\": 8,\\n      \\\"scored\\\": 87,\\n      \\\"conceded\\\": 39,\\n    },\\n  ]),\\\"Manchester City\\\"\\n)\\nTest.assert_equals(\\n  champions([\\n    {\\n      \\\"name\\\": \\\"Manchester City\\\",\\n      \\\"wins\\\": 30,\\n      \\\"loss\\\": 6,\\n      \\\"draws\\\": 2,\\n      \\\"scored\\\": 102,\\n      \\\"conceded\\\": 20,\\n    },\\n    {\\n      \\\"name\\\": \\\"Liverpool\\\",\\n      \\\"wins\\\": 24,\\n      \\\"loss\\\": 6,\\n      \\\"draws\\\": 8,\\n      \\\"scored\\\": 118,\\n      \\\"conceded\\\": 29,\\n    },\\n    {\\n      \\\"name\\\": \\\"Arsenal\\\",\\n      \\\"wins\\\": 30,\\n      \\\"loss\\\": 0,\\n      \\\"draws\\\": 8,\\n      \\\"scored\\\": 87,\\n      \\\"conceded\\\": 39,\\n    },\\n  ]),\\\"Arsenal\\\"\\n)\\nTest.assert_equals(\\n  champions([\\n    {\\n      \\\"name\\\": \\\"Chelsea\\\",\\n      \\\"wins\\\": 35,\\n      \\\"loss\\\": 3,\\n      \\\"draws\\\": 0,\\n      \\\"scored\\\": 102,\\n      \\\"conceded\\\": 20,\\n    },\\n    {\\n      \\\"name\\\": \\\"Liverpool\\\",\\n      \\\"wins\\\": 24,\\n      \\\"loss\\\": 6,\\n      \\\"draws\\\": 8,\\n      \\\"scored\\\": 118,\\n      \\\"conceded\\\": 29,\\n    },\\n    {\\n      \\\"name\\\": \\\"Arsenal\\\",\\n      \\\"wins\\\": 28,\\n      \\\"loss\\\": 2,\\n      \\\"draws\\\": 8,\\n      \\\"scored\\\": 87,\\n      \\\"conceded\\\": 39,\\n    },\\n  ]),\\\"Chelsea\\\"\\n)\",\"language\":\"python3\",\"summary\":\"Create a function that takes a list of football clubs with properties: name, wins, loss, draws, scored, conceded, and returns the team name with the highest number of points. If two teams have the same number of points, return the team with the largest goal difference.\\n\\nHow to Calculate Points and Goal Difference\\nteam = { \\\"name\\\": \\\"Manchester United\\\", \\\"wins\\\": 3\",\"tags\":[\"objects\",\"sorting\",\"arrays\"],\"timestamp\":{\"$date\":1598634056328},\"title\":\"Premier League Champions\",\"stats\":{\"completed\":{\"total\":112,\"ratings\":[3,3,3,3,3,4,4,3,1,4,2,2,3,5,0,2,3,2,3,2,2,3,2,0,4,3,1,3,5,2,2,2,3,2,2,2,2,2,3,0,3,4,4,0,4,4,4,3,3,3,2,2,3,1,0,2,4,3,3,2,0,5,2,3,2,0,3,1,3,3,0,3,2,2,3,2,4,4,3,4,0,4,2,2,4,1],\"rators\":[\"a777e8chPvJkY3tKa\",\"8PwfYqoDQFThzNtvf\",\"8JyqsSbN2FJXPr3cw\",\"aEm3Wvj2rFYRL8Lrb\",\"tAF9Gf6PiGogbZuWs\",\"EMJ6uvBZkie429gdg\",\"KZ2xddpM2f9JRaryB\",\"Yp7uvStL97cC9fKkY\",\"riS283qxkB5uHwcHw\",\"Nb6LYPoQP6KJZt8mz\",\"fznzd3qnvtbFkkizz\",\"s5M5RvgqR9BhB9JoC\",\"gb9rvGus2Jv7bjZSs\",\"6428wKHtwKkFdvBs5\",\"xn7uGNKeAwPEkP9oA\",\"4fhjJBvLBWh6QeSih\",\"KTFxMsjaW4xgo5ajY\",\"55RQznnuTGpsj3EXd\",\"8fZxjQfuXw5HMSRJM\",\"8sNv5PTHa7XQ8bNqR\",\"yjtdwc2AC4jA2RWtn\",\"wmW4mGgj6tJxepqpC\",\"HF28xZKSLM9wEuqNg\",\"qPpQfR5KyDb5Y3EFf\",\"iS5BrkGLzJyPK7nKt\",\"9FCeFzjPA4jrQ7oHW\",\"8nE8QHnFYsHCFebte\",\"ygDJ7HEzRoJZyPEF4\",\"dcuCtzKDASzoAJKsd\",\"XoTzZDR6qDYd8PAZB\",\"jopWJWdRStNBMGNXs\",\"8cKm6EDAjrNbL5pWF\",\"JkcimYHcPxFggWXNE\",\"9i2XnAtnTMpLkGyvv\",\"MM3v77RDEPmCDBvE9\",\"A2JSJyNxCd7iTTFp7\",\"geJHa8mvy64irqsgF\",\"r23nqpnuxRqQrRksA\",\"jCwJtCqg5kcDg7CRK\",\"jiT28cugqR6sLujEp\",\"zaNb37qavQQm6LFqe\",\"3DBrSvDtKBKXr8MLf\",\"zm9yBz3sRm9jdbyhK\",\"qLysFYFYKWrjuCKrK\",\"htCCT2CY3eSikknSF\",\"7shPNLiokLBJ4DYcY\",\"S3iFQ3yPcvH9wEzvF\",\"LaYYSfLtno6a9qc4Q\",\"J3upzLHuEwXH7Z2hx\",\"QRv96jmNaYsWkxQEG\",\"ZRxAkXjTCdyQTdSDw\",\"KMZhEF4QaBXbz4NGD\",\"7ifh8r4gvyYMhKB94\",\"yTtSCvGPyYna6JuRC\",\"ce6AanPmAjSD6b7MP\",\"pZMcixurx47FDeCWq\",\"MmhJQjY54sCovjFFd\",\"33boaDzGiY28bCDy6\",\"fSQSHjW3e72MrWxbD\",\"DPi9QGLctq2y76KuE\",\"WMmT8STWxc7Mgnvby\",\"hkiz2Nv927cYGrA86\",\"iojEnnY9FsMfYzp6f\",\"2PufnQcsHsfymufX3\",\"P7NmFbCJ5offXMRvB\",\"gJYuGdkXEWWmGRLzu\",\"AasGs8AeX9Lcb9xJn\",\"ctbThYbufFCYbRK4f\",\"LQxof8pGabGuWP7Gn\",\"fbr22rabEJMfBp7vD\",\"9izxzCBrsRCbD9ajK\",\"MpfytGFYF77emJ3cT\",\"HqmxnQJM66Y57twhn\",\"oBcs8GLX2ZFLXQy8y\",\"AQSqD9oNv2uPfxZCR\",\"PytNZK9mNiRiZxPrm\",\"n7exeKEp4vQkppRrd\",\"nQRzZKeDKuLRf9chX\",\"gKnWjDjwrJh7MK2df\",\"L8oMii2YcbEv86SdN\",\"suArq5BbSy7gD6xri\",\"25gNbNsGgxCfaivgR\",\"YpxTCJxheLgvmXbW9\",\"GTKsdeEihE636Le9i\",\"zSCDJfTLLnwrDeE9j\",\"Rk54WG323KeT6odSb\",\"iqmPb9JuJDgTFeR8Q\",\"JKb5rhL6DKcCAypF9\",\"T6iBEE2jp7f7iEF2P\",\"m3R9aaRoEbaxRsSNA\",\"NeEevQ4QpBDNHwtQw\",\"23oi2a3vQwhtLEbSj\",\"c7ta7vnKyKXKudNBh\",\"K42ijC8Jy8GHBnobP\",\"oFEG3RDs5J99JYtkZ\",\"FhYM27g2HwWBnNyJu\",\"QTJ2zKGF36KsE5XMM\",\"7tW5HqcSbi4b3sLuu\",\"CHvzhtXnv8HTbPQ56\",\"j78hhsDFiMdrATkpZ\",\"pnzfNatg3P32mMYQY\",\"EtXnbx2HotA2Lqsv5\",\"GWBuNz8Hp2YBGToZo\",\"hYfNNvvJRDPE6sy6G\"],\"quality\":[4,5,5,5,5,5,5,5,5,3,4,5,4,5,4,5,5,2,5,5,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"a777e8chPvJkY3tKa\",\"quality\":4.608695652173913,\"family\":[{\"_id\":\"xuFor4LkEXfBmtDqH\",\"language\":\"javascript\"},{\"_id\":\"cToBLderwJrpqML8w\",\"language\":\"python3\"}]}}"]