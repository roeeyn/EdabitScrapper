a["{\"msg\":\"result\",\"id\":\"1034\",\"result\":{\"_id\":\"gfo2RDnW7atsvQqnY\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"def count_smileys(lst):\\n\\t\",\"difficulty\":1.5310880829015545,\"familyId\":\"2XpWYLnyCaCoFKLEm\",\"instructions\":\"Create a function that takes a list of strings and return the number of smiley faces contained within it. These are the components that make up a valid smiley:\\n- A smiley has **eyes**. Eyes can be `:` or `;`.\\n- A smiley has a **nose** but it doesn't have to. A nose can be `-` or `~`.\\n- A smiley has a **mouth** which can be `)` or `D`.\\n\\nNo other characters are allowed except for those mentioned above.\\n\\n### Examples\\n```\\ncount_smileys([\\\":)\\\", \\\";(\\\", \\\";}\\\", \\\":-D\\\"]) ➞ 2\\n\\ncount_smileys([\\\";D\\\", \\\":-(\\\", \\\":-)\\\", \\\";~)\\\"]) ➞ 3\\n\\ncount_smileys([\\\";]\\\", \\\":[\\\", \\\";*\\\", \\\":$\\\", \\\";-D\\\"]) ➞ 1\\n```\\n\\n### Notes\\n- You will always be given a list as input.\\n- An empty list should return 0.\\n- The order of each facial element will always be the same.\\n- Noses are optional (e.g. `:)` and `:-)` are both valid).\",\"lab\":\"Test.assert_equals(count_smileys([\\\":)\\\", \\\";(\\\", \\\";}\\\", \\\":-D\\\"]), 2)\\nTest.assert_equals(count_smileys([\\\";D\\\", \\\":-(\\\", \\\":-)\\\", \\\";~)\\\"]), 3)\\nTest.assert_equals(count_smileys([\\\";]\\\", \\\":[\\\", \\\";*\\\", \\\":$\\\", \\\";-D\\\"]), 1)\\nTest.assert_equals(count_smileys([\\\";(\\\", \\\":>\\\", \\\":}\\\", \\\":]\\\"]), 0)\\nTest.assert_equals(count_smileys([\\\":)\\\", \\\":)\\\", \\\":)\\\", \\\":)\\\", \\\":)\\\", \\\":)\\\", \\\":)\\\", \\\":)\\\", \\\":)\\\", \\\":)\\\", \\\":)\\\", \\\":)\\\", \\\":)\\\",]), 13)\\nTest.assert_equals(count_smileys([':)',':(',':D',':O',':;']), 2)\\nTest.assert_equals(count_smileys([':-)',';~D',':-D',':_D']), 3)\\nTest.assert_equals(count_smileys([':---)','))',';~~D',';D']), 1)\\nTest.assert_equals(count_smileys([';~)',':)',':-)',':--)']), 3)\\nTest.assert_equals(count_smileys([':o)',':--D',';-~)']), 0)\\nTest.assert_equals(count_smileys([]), 0, \\\"An empty list should return 0\\\")\",\"language\":\"python3\",\"summary\":\"Create a function that takes a list of strings and return the number of smiley faces contained within it. These are the components that make up a valid smiley:\\nA smiley has eyes. Eyes can be : or ;.\\nA smiley has a nose but it doesn't have to. A nose can be - or ~.\\nA smiley has a mouth which can be ) or D.\\n\\nNo other characters are allowed except for those menti\",\"tags\":[\"strings\",\"regex\",\"loops\"],\"timestamp\":{\"$date\":1539817698609},\"title\":\"Count the Smiley Faces  :)\",\"stats\":{\"completed\":{\"total\":422,\"ratings\":[1,1,1,1,1,1,1,1,1,1,1,2,1,1,0,2,1,1,2,1,1,2,0,1,1,1,2,1,1,2,1,2,2,1,2,1,3,2,2,2,0,2,1,2,1,2,1,1,3,1,1,0,1,1,1,2,2,0,2,1,3,1,1,1,2,2,1,2,2,1,2,0,1,1,1,1,2,2,2,2,0,1,1,2,1,2,0,2,2,2,1,2,2,2,3,1,2,1,2,0,1,2,1,1,1,2,2,2,2,2,1,5,2,2,2,1,1,2,2,1,1,1,2,1,1,1,2,2,1,2,1,1,2,1,1,2,2,1,1,1,1,2,2,0,2,2,2,0,2,2,3,2,2,1,3,1,1,1,1,2,0,3,2,1,1,1,2,2,0,1,2,2,2,2,1,1,2,1,3,1,2,1,1,2,2,1,2,2,1,1,2,1,2,2,0,0,2,2,2,0,2,1,2,2,1,2,2,2,2,2,1,2,2,2,2,2,1,2,1,1,0,2,1,1,1,2,0,2,2,2,1,2,0,5,1,1,1,2,2,2,3,2,5,2,2,2,2,2,2,2,2,2,3,3,2,1,2,1,2,2,2,2,3,1,1,2,2,0,0,1,2,2,2,0,2,2,1,1,2,0,2,2,1,1,2,2,1,2,0,1,2,1,2,2,2,3,2,2,2,2,2,0,1,0,2,0,2,2,1,2,2,2,2,2,2,2,2,1,2,2,1,2,2,1,2,0,0,1,3,2,2,1,0,2,1,2,2,1,2,2,2,2,1,2,2,2,0,1,2,1,1,1,2,2,3,3,5,2,0,0,2,1,2,0,1,2,2,1,0,2,2,1,2,0,2,0,2,3,2,2,2,2,1,2,2,1],\"rators\":[\"BkPgkDQGHm66X4Qai\",\"tAF9Gf6PiGogbZuWs\",\"2GuzKEuE5QK5nDyrQ\",\"M8jrv2FfpMQp9Qzpx\",\"pzvkvJTaKRQthRjo2\",\"T2W32kBnES6zya9Bv\",\"Qm7WibLuCP7hW3iXi\",\"7CwgH38hHpiGdu2zT\",\"xeQgp6bCbArkSYXKg\",\"9j8nvw7NhJoMm34HF\",\"NfMJuiBk6FN5Jc6ow\",\"THD2EHgtJa2ooivJK\",\"N2wnZXkhDH86mgjQ8\",\"QtMsGCXuedy2kE8pL\",\"QgdwHjy4x6MCPwfh9\",\"WKsvry6M74GDrtqHQ\",\"fwdxEcyYk4pDdHFya\",\"GBm7coD9fKczoq3NQ\",\"cBCgxKeWmdcPwz4MH\",\"nZ58gDWFhqXiZpmZQ\",\"2tCCFm5iefjrRSaxv\",\"eMaBsjDKQC4XMNi3M\",\"T82JyZFPNz8maF8f8\",\"foGoA3nN5Bd4mv7wr\",\"ZbtEeAHsAvPyrme4X\",\"35Z2Qy2cjicZMkSzn\",\"jeuoearPPTcGPgXhf\",\"SKabuq5XuhXBugKBa\",\"sqnW7tN9HzJspNcxD\",\"eW5cHd5p5nv9XoLr4\",\"taNkYYB6myvcZPHn9\",\"D32R5fY5utpwKbxjr\",\"bvcH6ErzLpbzQjZTj\",\"Kzom5ikn7BRrRgiES\",\"SK3kJggzuets9AFj6\",\"nc7bRhkxgKyqusYe3\",\"8yXcdARsCtaYrQaNc\",\"8WpiNuqJ3meC2Bqv5\",\"TJQcScCtNRobD8P4k\",\"huXv4webPXRnp7ihN\",\"Nj6FwgBtAXsaQwsM2\",\"RsX6W2ddWM8ajHzss\",\"LfR9Bopm57BMNNnkp\",\"d2XCAmNhp79ea8a65\",\"HZZobau82wPmkwYyu\",\"PAjQoyYKAkYAXERhf\",\"jdnozNgcs9jSkANYG\",\"9EiNaz4dYwFR3eeLT\",\"gdTRh2YuTSSbLt5tc\",\"aTNWfAYfTZn2Ejn63\",\"76bsExTtMg8MCyX36\",\"n9PZCXcWTygjaDsXs\",\"uJ5A3zjLi9iN5eeXX\",\"wEF3ZhC5iTqFjgw85\",\"vpCDTiajf7vS4Wvyy\",\"S3FkfRaDs9f9D4vza\",\"EBDnngBiJNPkKK5JL\",\"jwgBL9AKmfxPCFoTo\",\"KDfCknbFB67GDq3Yg\",\"oQ6PP8xC4yEe3oPve\",\"owKPDRTN8gi9CcPW2\",\"pT7ESkjcQTjmmaTXv\",\"jj3tN4LhX8Rgs3DKB\",\"PTcHSgSb3S9gHsJhP\",\"W959nYTsTvFf9stJj\",\"W86SWYbsAv36QatiS\",\"hR7GMiqGap4CzEWSy\",\"2RcMmxawiXaAWGida\",\"uSiHKggtKNw9CLzyJ\",\"sXNYqHpzkE7wkXrAX\",\"nRNrCgAwhtMMyS6fC\",\"jtB5tDvfCunf2Ep2X\",\"RP6TXQ57oLFG2EA8X\",\"aqyiYoemWzRKgF9BP\",\"p6MPFLtmJ2z8EQT4Q\",\"83i7PKDRGfBw5DLst\",\"gJpSHq37h3bxTr8Ho\",\"xQ7uLC6QTtEyKENv9\",\"Mdtisn2yQsSiHAuAy\",\"nSMKW77QrS4SGf5DP\",\"WuFYzA49gtxK8pywR\",\"oESR33eXHntMJxp2Q\",\"FjLPxCcT7urtALbos\",\"J3RFGrYLugHTTDxww\",\"CLKnKSGEviZPFLqkC\",\"RS7z6xJFR4ZAx6zZA\",\"eq6bWgNCAXLkFj4tx\",\"zgoEhAyhrjnsSLPGw\",\"ycZbLj5WRWuGWR8oK\",\"6W2GSzrYjMD9ANBFY\",\"rfyq6c7nX5s6tgSat\",\"Qj6ZX8d4HqwMW2yBk\",\"nusQQTi9vR569v4b5\",\"qaR8DnWrTk8Mus5Q2\",\"WFNJLTC9a3xZrbgcF\",\"q5s7yTnMdEoeXRTnH\",\"Z8WFmzQRYcHDxPqX7\",\"k66z8NfCwxStFg2qz\",\"vjgbYJGLr39bACXND\",\"j3XimmYb3NEL5gLxX\",\"8JyqsSbN2FJXPr3cw\",\"KpXzNmd3gyz2Mwka5\",\"vwmjqntQ9FvszKRye\",\"XBmvGz2a28Wtuhj3N\",\"7EtepxmKZfunxFMF4\",\"FHzvDACEZuAjRwL7v\",\"qvEvDcL32a5F4Tg6c\",\"GhPsce93TtsT45o8z\",\"dJ27vWnQZFJbAnD5p\",\"DSE9iBAeDYfb2LMwM\",\"FyDah3MTRW8vXTB6G\",\"mGmoXwXiopnnnqYdh\",\"gb9rvGus2Jv7bjZSs\",\"z7KAn4vEJTcrDKaum\",\"tuNGEHnKo6ia4cXFL\",\"6fJpRpAgiWD5zX9qB\",\"vEHDjxx5FuYiPCaXs\",\"tQekSMpE5Bt9k6BXN\",\"PRPv763woB2EqjWvZ\",\"5B4uao9RP8pDv4hmM\",\"DngKYE9GzXrRNyCPr\",\"X9NeqaKpfykoscpYr\",\"Jqk2uJZZxEv5wZFze\",\"jPpfWknjsoJcZkin2\",\"jpEzGeo2tPtZbgbay\",\"3rt9Yc6qYctx4ep6v\",\"se2ygukKvak5beiBY\",\"tRA43bWeW9bLciKEh\",\"YQRw52Dhb6yKk3oDm\",\"Ge525X3sT75K74LoD\",\"yN2rtCqLi6Mzm2872\",\"yZvzB3qFb8pkHy4dg\",\"LG3fKmLudfrGNhvCK\",\"W2RBjMJ9KQPg4tjNZ\",\"uSh3aNxzD28jBuhxa\",\"4cxKdMqL4Qk2GsJpm\",\"byHBadxxhnF5Ht7xH\",\"nQRzZKeDKuLRf9chX\",\"CndStS6CYLXvmneZ3\",\"MFFKiEMmuLzZgStED\",\"8pQJxMgsQBsf75eaj\",\"mNMQvcxKSSvqqMYCH\",\"hsrNYf3WbexXJKhCq\",\"Y3KkPrBzMBgMiqaQ6\",\"hhKPLkXFLemE6wf4F\",\"kQH5b8MXJunh84Czq\",\"7PTKd4xtWnbL7BzL2\",\"T3ZAuoMrJjvZwN55B\",\"AF6LgdKhEdzwgRJom\",\"hmJar7wTPM99rX4HB\",\"6ckDJWbyznyQQLkrP\",\"ab7BsQuhDo3QgE6bh\",\"P59rek6gvwTzHvRYa\",\"iyZcWmYpoZM469SAx\",\"n5wubRfh6zh8QRymN\",\"Rgdjr9tBGabXFdoXL\",\"JEAi9mG3vvBomJ3Yu\",\"RSzucN8jxPgknQ9D4\",\"4kJMafuJWxzhDht2w\",\"5dvDGoRaJwmYTmRRB\",\"rMa8q8fB7xyTN5R2e\",\"iqmPb9JuJDgTFeR8Q\",\"TNQ7ixK78HHTLP7it\",\"gGnDsJz5hr2t9MKCF\",\"2dfxt7jioxCF2Twdi\",\"gxdjEjj4AdrZv7jCa\",\"XKi8iZXBCHCaebSHh\",\"tHEH9MBHBAGvhgJGd\",\"aXCm9vWqKwL9XFYoj\",\"ahWFxnaxt9bXSA4f3\",\"5JFQgt6KFihmXfHKm\",\"byqTp7CX5oWSEZp4S\",\"PFjMZGHNAPTkgd7tq\",\"zjZe8FuGZYPTDLzta\",\"xJdmLNL3Qoz24byZw\",\"3XWw4ui5Tipb2Qz8o\",\"WkWyq9wMkZhXB6zsD\",\"a88kMGNNXv3o4G6kS\",\"nF9pCCzbGDhzvWgaw\",\"PSrcg6fy835R4c5CW\",\"yrCNkFYQBEDE76eFS\",\"C9LKGu2g5hSijvDzA\",\"jYJ26SiLKBu5GRumq\",\"yAouD3PxzED8a4gap\",\"MJMWfiW978otApbcG\",\"6u7yc9m6HuHGbHzph\",\"td7qPZ7Lv4pEWT2Ya\",\"ZzwR8m8Q6Gozo9ofz\",\"nfXGHENb5md7m355s\",\"sCnrfER8vCe4xhpB2\",\"jHrtWDGBhkbuWa7fG\",\"JiSpvq6C7azQEmENc\",\"gMJhLdyw3tH7L96X2\",\"ae2bb4Zr7YAdN3dMu\",\"3LiSLdtN58n46NEqg\",\"jfadYA8tEji3JrYPN\",\"498CxrZQdThLMa7ki\",\"FgkYtHLxeD8pETJ8T\",\"tczr8H3zHk2kwp8br\",\"4y2bxsHwifCdZXAQA\",\"tADjEJQCYFvZtjPKS\",\"cecRRLKKu5R62D5xE\",\"hexGeeK7zv9mQJgLe\",\"cR3ibTMxLyEdDFCHY\",\"pdheg2KrrhwWJHDZM\",\"EjbrnYyrH8FW4Foju\",\"vkwPoXwJXZjXepHXx\",\"T2vhHPhRR96hRizq8\",\"HQxp7NcdvF92G7bYS\",\"sKfrD9gjCDHuqLzSk\",\"dKpQWv7qH2WaZXPxK\",\"XQivaPk9Erza9BHns\",\"6QEhBfzWmuYwm34zz\",\"fAoLuqbGvHn4w2PHf\",\"9YtQPAffoq4WJLcAP\",\"2fxapKr8XGdNeaKi2\",\"3SKmXhcLPPkmQhjip\",\"otXtuQygbcYATMZoP\",\"8aPJNKDxXq7884eJb\",\"HqmxnQJM66Y57twhn\",\"K3RacTvkWHLfzKF8i\",\"qSf5gxf5TrdadBfnA\",\"K96FwtfDDN5WM4Bb7\",\"v9KtC8YLbMWmXiW2H\",\"EEjNW5t4XPGFLfq3k\",\"yr822PZmmiDDenxpB\",\"3ECpdeExhBmkYXtba\",\"qxB9bnow4EXPHwsPj\",\"u5u2YpHXiNgzDNJdX\",\"ksafdYcNM3SFEQoW9\",\"qJZsi5rhRnWA38FbA\",\"mtRvHDpeLoSGBf8zC\",\"DHBGz3r4dCryvEDAp\",\"H9KZi2cjt4FwH7qog\",\"4tgBydK887PitgAoi\",\"6KcnCdQ3zEnARWogF\",\"LAyLY5fQvfp2wgfbk\",\"oXh8LZ7k6pWZMGZGA\",\"6ShafRStcvew4GfCh\",\"yabtHTtycsWhcGBfD\",\"C4QntmkYtB89GNtpd\",\"CEd9tLdXeDeNHSzys\",\"Xj6R2zqhgumffQCAN\",\"DryNRN98Dj24BpgrL\",\"PXAcsKkssS2yLyDv2\",\"p3dsCFdWGzWGhFrSQ\",\"Z85ajWfZ4jDPkbvR4\",\"2innwjWqxJHo4eRGh\",\"Ycj4iTJGFyvC4bXek\",\"AasGs8AeX9Lcb9xJn\",\"s5M5RvgqR9BhB9JoC\",\"w3A7cBWyAfukk6xEQ\",\"4CFzv558qbGcpQwc4\",\"FovJzwmhALjb7ouFm\",\"t3wwRMtYdLYBwWR4J\",\"v3fjGuc7Pq4yjFygS\",\"hnyhBFWwNCz9mDfSi\",\"3efW5qCKraPjzEfiX\",\"aRqQ42J5zqCmBNd8w\",\"zg8GmMSP2LkHBtAzy\",\"N7GPFEhCaiQ79MKjz\",\"9Ly8afdtofp8DXzrt\",\"FiaTpm7ehfDv43wSG\",\"aEm3Wvj2rFYRL8Lrb\",\"dHZqT6h4JMwk5fPC8\",\"QKtxPPRK5h3eqno6p\",\"vLrq4dEDMM2wd68Dc\",\"ffLo8fDxcS3rqPd66\",\"jpGomfcYMrRJmSQLs\",\"sz8ufn9i8zeiGWpAy\",\"2QGRoQn2dRq3scu7k\",\"jNvegJWCk5HCtEMbK\",\"8PwfYqoDQFThzNtvf\",\"3nied3n8KG8RSNixH\",\"ZNnsMeNkdDhHjSrZb\",\"Yp7uvStL97cC9fKkY\",\"LjoNTyGEMfBpMHHus\",\"q5a96XumccZyhQNyL\",\"gJYuGdkXEWWmGRLzu\",\"Fk9kLwoG4Brf4KsKf\",\"HF28xZKSLM9wEuqNg\",\"bMEg2eSZtsAcT7ZmJ\",\"6c4xjEdFxdYw5xGrt\",\"LmTRmhiuDidAebAsw\",\"wT5gGgvjKc5wz59AQ\",\"DEDniTrstQYGounXT\",\"9pzFiFK3ANLjQfnr2\",\"KdNDysEsy2TW5QRJ2\",\"CMuhZyDkaZXX4pvTD\",\"8LfTheFzvicameoz9\",\"GNLCnfuyXcwFLKBAF\",\"tSFYadMLQgCqx3mnM\",\"5cmvoGYHLNmT8n6jP\",\"orFLgPDw9H5MDzmwo\",\"ahk2qiXKJA753wAJk\",\"FzxTj4GuujhwpZM7y\",\"586FdBhazpwJfnRYR\",\"LWCzZ8mb8gwrRNGfq\",\"XrqNzJ2FRG8HnGiR6\",\"3cF6NXq3ZEwdkgSjb\",\"a777e8chPvJkY3tKa\",\"sbJcFfQjQ59Wfg4Cd\",\"2ptN2mhjFwFcHyPZd\",\"4yNLEwL2rsx4EE5Nt\",\"H4abACFDH5t8CnnyH\",\"zT9LpkiwYjLviYYW6\",\"ZrKCkX7xxGGZzauFW\",\"NG8PWBSjsM8mMhQEq\",\"syRNbbPdLCGXbH2Gy\",\"FEYpu9RWysAgW3XnP\",\"iojEnnY9FsMfYzp6f\",\"R4SjTgDnpigJYDLyL\",\"Pe8vWpDHRuH9nSGKW\",\"YcCLwitFMAEJSnxAW\",\"2HfNkb2SoqdyjKW3o\",\"JS3hNM3XXkxPdg3yk\",\"yjtdwc2AC4jA2RWtn\",\"DJdsqmTeAGDwrgYoZ\",\"PTDFuxAzou7W6asWt\",\"iS5BrkGLzJyPK7nKt\",\"oBcs8GLX2ZFLXQy8y\",\"n2BRY9X8899dcG8Bw\",\"YA7SDhpgEtsqynvNL\",\"M8dQuMrEpP8Hc3tHN\",\"8zQnyekbSwzhoJymu\",\"RehJGBFS6CYiWdjZx\",\"zd9FLSzsGz3evKafy\",\"MKT7khMBGXzA22ykf\",\"tpxMgkGSHwBjS95Ta\",\"KLmLKaJPfsYxp42p2\",\"mG8HqKiAQFTdRZthG\",\"k2Eo3wyfZZ6KxvKhN\",\"gXTAie79kiw28tx5u\",\"gSFJPsMXnqAog3Q9f\",\"rfyEkETeoS96QNH4e\",\"9CoqdidjM9KbeKnHY\",\"QRv96jmNaYsWkxQEG\",\"Kh3Pc2ZRusurLaMyP\",\"EMJ6uvBZkie429gdg\",\"DPi9QGLctq2y76KuE\",\"wRttWTM59y8m5mx7x\",\"dYPkStFnLvAMsHSzZ\",\"cAP3n5NY64uoMwzRR\",\"J3upzLHuEwXH7Z2hx\",\"dj5AyG5fWP8FdsSmZ\",\"8fZxjQfuXw5HMSRJM\",\"RGMbFMZXJr7DhcAJy\",\"CTKmXtrqDYqJBnuy8\",\"5HCu9Ydd86QgHDRNP\",\"Tf7TJFSPktJBgLA4k\",\"5XiuAqicKD4hBdu63\",\"dQK2T76aHcRJkrbKB\",\"kAkLAF9T5McSxXJCT\",\"d8qtzoLB264iP8tdY\",\"Ex394AsMLmJkHRDbX\",\"cZccqzRQ9GgjQF6Az\",\"mDWNyaaQ9hvPCRzSd\",\"BXchg2QHESw2ZmDYe\",\"J5T8gZqiZXFuFDTQ7\",\"C5FizLnRZoDtBrzra\",\"HuNF3xTBzmatyGSTm\",\"MaLpA3hMEfEr22WM3\",\"XXPzK5QGZTWYvEbsX\",\"YRAzEBJoLvSaiPtYx\",\"5S9nX4rKsnCcnv4Cz\",\"KJCDwGkoXh8qtbbKr\",\"GGdmhAvxXhqhhibJN\",\"F2ykFxhDEEkj6N5KE\",\"Wv2vJnEj8ywNmARoF\",\"Ds7L5bksw2QRHjrKL\",\"sHjfbGQGLHE6JR6qu\",\"srJ34BaybkQh3qRkM\",\"qAby4AWXmTNeusvg3\",\"eMuCpJ2spXWkJjWNz\",\"o4ixjQGSaYqA2JoM4\",\"T6iBEE2jp7f7iEF2P\",\"66a9xX73nmTEuKs9k\",\"PC3pLs36zNzpRDSuE\",\"ey3CASd6Je5LEJzfB\",\"yod5YhKtPqw2GfG9B\",\"pWxBFwM2f3Tfb5ixX\",\"sKBGcRfEr6LrvG8A2\",\"mvJBakQ35CWAnbbEZ\",\"eHcgvkTGsH7ZziqBo\",\"JKb5rhL6DKcCAypF9\",\"8BFSTCnoe2QggN64c\",\"BrTDhPJcACL2bsrpJ\",\"qzXAMXsHZGT8o5hTA\",\"rrSC943cCKNG48sH4\",\"CHvzhtXnv8HTbPQ56\",\"2PufnQcsHsfymufX3\",\"X4rzfxGgxx6CS7Bpz\",\"4TmgHkn5vqyHK3sYC\",\"buX4mCQhtXCfBjeno\",\"d9LBRxvADNBB5QJMB\",\"pduNK68oazqQTtbLp\",\"wjc4iejpErBhxWwHo\",\"suArq5BbSy7gD6xri\",\"NzbRqGWspQnWMoDrF\",\"5QN8R22z43SrwoHDz\"],\"quality\":[4,4,4,5,5,5,5,5,5,5,4,3,5,5,5,3,4,5,5,1,5,4,5]},\"tests\":{\"score\":0,\"rators\":[\"BkPgkDQGHm66X4Qai\"]},\"instructions\":{\"score\":10.35,\"rators\":[\"BkPgkDQGHm66X4Qai\"],\"voters\":[\"nxCRcZQknHp8wP2v4\",\"qaR8DnWrTk8Mus5Q2\",\"Z8WFmzQRYcHDxPqX7\"]},\"flags\":0},\"isHidden\":false,\"quality\":4.391304347826087,\"family\":[{\"_id\":\"SmeXCGN2wedvQuHwT\",\"language\":\"cpp\"},{\"_id\":\"pFbR2RAjeJmrf9tua\",\"language\":\"javascript\"},{\"_id\":\"QqGY2grcc9b8tMBks\",\"language\":\"php\"},{\"_id\":\"gfo2RDnW7atsvQqnY\",\"language\":\"python3\"},{\"_id\":\"4dx5maZ5F6EC6edkk\",\"language\":\"ruby\"}]}}"]