a["{\"msg\":\"result\",\"id\":\"1130\",\"result\":{\"_id\":\"HaxQfQTEpo7BFE5rz\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def alternate_pos_neg(lst):\\n\\t\",\"difficulty\":1.5909090909090908,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"6264vW8SQG5XFFXEm\",\"instructions\":\"Create a function which validates whether a given list **alternates** between *positive* and *negative* numbers.\\n\\n### Examples\\n```\\nalternate_pos_neg([3, -2, 5, -5, 2, -8]) ➞ True\\n\\nalternate_pos_neg([-6, 1, -1, 4, -3]) ➞ True\\n\\nalternate_pos_neg([4, 4, -2, 3, -6, 10]) ➞ False\\n```\\n\\n### Notes\\n - Lists can be of any length.\\n - It doesn't matter if a list begins/ends with a positive or negative, as long as it alternates.\\n- If a list contains 0, return `False` (as it is neither positive nor negative).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(alternate_pos_neg([3, -2, 5, -5, 2, -8]), True)\\nTest.assert_equals(alternate_pos_neg([-6, 1, -1, 4, -3]), True)\\nTest.assert_equals(alternate_pos_neg([4, 4, -2, 3, -6, 10]), False)\\nTest.assert_equals(alternate_pos_neg([34, 49, 33, 17, -47]), False)\\nTest.assert_equals(alternate_pos_neg([22]), True)\\nTest.assert_equals(alternate_pos_neg([41, 11, 37, -30, -29, 39, -45, 15, -41, 7]), False)\\nTest.assert_equals(alternate_pos_neg([3, -7, 15, 18]), False)\\nTest.assert_equals(alternate_pos_neg([40]), True)\\nTest.assert_equals(alternate_pos_neg([40, 27, -44, -13, -31]), False)\\nTest.assert_equals(alternate_pos_neg([40, 50, -7, 45, -7]), False)\\nTest.assert_equals(alternate_pos_neg([-23, -16, -9, -15, 16]), False)\\nTest.assert_equals(alternate_pos_neg([0, 0, 0, 0]), False)\\nTest.assert_equals(alternate_pos_neg([50, 28, -5, 25, -14, -2, 20, 26, -32]), False)\\nTest.assert_equals(alternate_pos_neg([24, -10]), True)\\nTest.assert_equals(alternate_pos_neg([-2, 4, 16, -15, 24, 2]), False)\\nTest.assert_equals(alternate_pos_neg([19, -12, -37, 44, -43, 44, 47]), False)\\nTest.assert_equals(alternate_pos_neg([-21, 42, -11, 27, -16, 36, 37]), False)\\nTest.assert_equals(alternate_pos_neg([30]), True)\\nTest.assert_equals(alternate_pos_neg([3, -7, 15, -18]), True)\\nTest.assert_equals(alternate_pos_neg([9, -4, 8, -16]), True)\\nTest.assert_equals(alternate_pos_neg([3, -7, 15, -18, 0]), False)\\nTest.assert_equals(alternate_pos_neg([0]), False)\\nTest.assert_equals(alternate_pos_neg([0, 2, -5, 8, -12]), False)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[1,1,1,1,1,1,2,1,2,0,1,1,0,0,0,0,0,1,1,1,0,2,1,2,3,1,1,1,2,1,2,2,3,0,4,5,1,0,2,2,2,2,2,1,3,2,2,2,2,1,2,1,1,1,2,2,4,2,1,1,1,3,0,3,1,0,1,2,2,1,1,2,4,2,1,2,2,3,1,2,0,2,2,1,4,2,0,1,2,3,2,2,2,2,2,2,2,2,2,2,2,1,1,0,2,0,1,2,0,2,3,2,2,2,1,3,2,1,2,2,2,1,3,1,1,1,0,2,2,2,0,0,1,0,2,2,3,2,2,2,3,2,3,1,2,2,2,1,2,2,2,2,2,1],\"rators\":[\"PXAcsKkssS2yLyDv2\",\"2fxapKr8XGdNeaKi2\",\"aEm3Wvj2rFYRL8Lrb\",\"jNvegJWCk5HCtEMbK\",\"RJ6mfGK5N6pRrGRm9\",\"tAF9Gf6PiGogbZuWs\",\"AasGs8AeX9Lcb9xJn\",\"gb9rvGus2Jv7bjZSs\",\"aRqQ42J5zqCmBNd8w\",\"dHZqT6h4JMwk5fPC8\",\"9Ly8afdtofp8DXzrt\",\"vLrq4dEDMM2wd68Dc\",\"S2jCesJ5doPZiXKJ7\",\"HF28xZKSLM9wEuqNg\",\"Yp7uvStL97cC9fKkY\",\"2QGRoQn2dRq3scu7k\",\"v9oqzoEMCayTrA2TE\",\"4CFzv558qbGcpQwc4\",\"LjoNTyGEMfBpMHHus\",\"b87gBSveHNBZboNGo\",\"cR3ibTMxLyEdDFCHY\",\"qB6KSTYC6H2TQEQY6\",\"KRSKj7ikX2ytWFmod\",\"4RY3zj9C2t8GGefhi\",\"N7P4AnS8nzK4oupHv\",\"KnKPReugubR5yyPyh\",\"QN3AHCaTykyuE5k8B\",\"Ecy2fPuyYDLKmRkcg\",\"5aZnA8Br3u7Wf5ENg\",\"uiEuENARwFpnNMfFs\",\"J5T8gZqiZXFuFDTQ7\",\"qzzyGD7fCCDjX25za\",\"v9KtC8YLbMWmXiW2H\",\"nXEg9buBEisxp8mZ3\",\"KbEkE8oTtD6yK7qLB\",\"hRbXSaPsQSLTst6ZS\",\"av2jD8PY9SE484tqB\",\"5nY48krepaT4a4QTN\",\"2iFe3EHEH2YdhSKrs\",\"AdskwgPdbteQrpLAe\",\"c8yiWYqspRWJoJBNm\",\"JQ5uoxA4WZgN6HyJk\",\"hnyhBFWwNCz9mDfSi\",\"s5M5RvgqR9BhB9JoC\",\"eopWZNd3FQGuSaLzc\",\"DvzpcjeQsLCSZc9r9\",\"orFLgPDw9H5MDzmwo\",\"yZvzB3qFb8pkHy4dg\",\"mxX4rH5ELYkdZ2Mbw\",\"8PwfYqoDQFThzNtvf\",\"Zhy5X7BZnqk8hacEw\",\"NfMJuiBk6FN5Jc6ow\",\"23oi2a3vQwhtLEbSj\",\"8JyqsSbN2FJXPr3cw\",\"w3A7cBWyAfukk6xEQ\",\"ZNnsMeNkdDhHjSrZb\",\"mybpojPXaZigaqsAD\",\"9uZpgAtSuPZ7W7DL6\",\"k5mp7Hkg8w5rwiXpe\",\"ytceK4TxiCchoCLYC\",\"Jqk2uJZZxEv5wZFze\",\"Nua6T3dBurBy3Qfg9\",\"Cc2Cgj4MWXZxsTooC\",\"DEDniTrstQYGounXT\",\"M8dQuMrEpP8Hc3tHN\",\"KdNDysEsy2TW5QRJ2\",\"8LfTheFzvicameoz9\",\"9pzFiFK3ANLjQfnr2\",\"qPSEBYMMi9WJRr8SA\",\"gSFJPsMXnqAog3Q9f\",\"C9LKGu2g5hSijvDzA\",\"N2wnZXkhDH86mgjQ8\",\"MKJhn7goNzuGtB5y9\",\"nfXGHENb5md7m355s\",\"FzxTj4GuujhwpZM7y\",\"ahk2qiXKJA753wAJk\",\"kQH5b8MXJunh84Czq\",\"EXCpDkk5BLif3i5YE\",\"yr822PZmmiDDenxpB\",\"MKT7khMBGXzA22ykf\",\"LWCzZ8mb8gwrRNGfq\",\"4rwxLqLs2mNZNg8NB\",\"m6D2RuQJwrAK6WB3v\",\"a777e8chPvJkY3tKa\",\"DrkR35NqnP9NDLbq6\",\"F2ykFxhDEEkj6N5KE\",\"XrqNzJ2FRG8HnGiR6\",\"2ptN2mhjFwFcHyPZd\",\"H4abACFDH5t8CnnyH\",\"ZrKCkX7xxGGZzauFW\",\"sbJcFfQjQ59Wfg4Cd\",\"NG8PWBSjsM8mMhQEq\",\"iojEnnY9FsMfYzp6f\",\"iS5BrkGLzJyPK7nKt\",\"JS3hNM3XXkxPdg3yk\",\"Pe8vWpDHRuH9nSGKW\",\"nys6kJatAFrKL59Pf\",\"yjtdwc2AC4jA2RWtn\",\"HqmxnQJM66Y57twhn\",\"YcCLwitFMAEJSnxAW\",\"hRiMXDZNAzyPd5tpt\",\"NNE5HNRXAkmhrWgyQ\",\"FEYpu9RWysAgW3XnP\",\"mDWNyaaQ9hvPCRzSd\",\"oBcs8GLX2ZFLXQy8y\",\"w2HhxvSLmDhaGCAjE\",\"zd9FLSzsGz3evKafy\",\"mG8HqKiAQFTdRZthG\",\"k2Eo3wyfZZ6KxvKhN\",\"3cF6NXq3ZEwdkgSjb\",\"KLmLKaJPfsYxp42p2\",\"DYDJTyGgKFnBRLm2r\",\"Wv2vJnEj8ywNmARoF\",\"GGprTwrkjuccmrQRg\",\"DPi9QGLctq2y76KuE\",\"QRv96jmNaYsWkxQEG\",\"J3upzLHuEwXH7Z2hx\",\"FGmXmbE36Zu7umNYq\",\"dYPkStFnLvAMsHSzZ\",\"cAP3n5NY64uoMwzRR\",\"KJCDwGkoXh8qtbbKr\",\"5XiuAqicKD4hBdu63\",\"qZQxPQ2kaNKAMesHT\",\"KEmTti9Tza8A2FLQW\",\"RGMbFMZXJr7DhcAJy\",\"dBzwBtRjZqB98DJeB\",\"LQxof8pGabGuWP7Gn\",\"rfyEkETeoS96QNH4e\",\"d8qtzoLB264iP8tdY\",\"5HCu9Ydd86QgHDRNP\",\"R29kgJ9M7R4qqwjcE\",\"5S9nX4rKsnCcnv4Cz\",\"eYfPWvZwnJQkHbSTK\",\"HuNF3xTBzmatyGSTm\",\"GGdmhAvxXhqhhibJN\",\"4RsakkyRXyYGwFxEa\",\"Ds7L5bksw2QRHjrKL\",\"srJ34BaybkQh3qRkM\",\"wRttWTM59y8m5mx7x\",\"CHvzhtXnv8HTbPQ56\",\"qAby4AWXmTNeusvg3\",\"PWgzeK859suojbrRx\",\"sHjfbGQGLHE6JR6qu\",\"eMuCpJ2spXWkJjWNz\",\"o4ixjQGSaYqA2JoM4\",\"T6iBEE2jp7f7iEF2P\",\"66a9xX73nmTEuKs9k\",\"PC3pLs36zNzpRDSuE\",\"AFfw7cGg83uYk2Miy\",\"xn7uGNKeAwPEkP9oA\",\"yod5YhKtPqw2GfG9B\",\"eHcgvkTGsH7ZziqBo\",\"AJexRBN9cYQmqvYu6\",\"JhX7jvtpwNyxcc39m\",\"buX4mCQhtXCfBjeno\",\"8BFSTCnoe2QggN64c\",\"mvJBakQ35CWAnbbEZ\",\"BdnE4RS5puoxo92mA\",\"ey3CASd6Je5LEJzfB\",\"EfxwqhYdapX3dMQC2\",\"BrTDhPJcACL2bsrpJ\",\"dzS6WBTMHyFEag6Fp\",\"2PufnQcsHsfymufX3\",\"d9LBRxvADNBB5QJMB\",\"4Lwjr34ypKNQNQCar\",\"4TmgHkn5vqyHK3sYC\",\"yAouD3PxzED8a4gap\",\"Wi4H6ayKsNDWWQCG5\"],\"total\":184,\"quality\":[5,3,2,3,5,5,4,5,5,5,5,5,5,5,5,5,5,4,4]},\"flags\":0},\"summary\":\"Create a function which validates whether a given list alternates between positive and negative numbers.\\n\\nExamples\\nalternateposneg([3, -2, 5, -5, 2, -8]) ➞ True\\n\\nalternateposneg([-6, 1, -1, 4, -3]) ➞ True\\n\\nalternateposneg([4, 4, -2, 3, -6, 10]) ➞ False\\n\\nNotes\\n It doesn't matter if a list begins/ends with a positive or negative, as long as it alternates.\\nIf a l\",\"tags\":[\"arrays\",\"numbers\",\"loops\",\"validation\"],\"timestamp\":{\"$date\":1584904168345},\"title\":\"Positives and Negatives\",\"quality\":4.473684210526316,\"family\":[{\"_id\":\"niNu9f22zboTn3wea\",\"language\":\"cpp\"},{\"_id\":\"hYq8J8HJM3pwCFKiZ\",\"language\":\"java\"},{\"_id\":\"SZnDZpQeBwhGXMBPW\",\"language\":\"javascript\"},{\"_id\":\"HaxQfQTEpo7BFE5rz\",\"language\":\"python3\"},{\"_id\":\"kMbMjarbCvkBYGNdS\",\"language\":\"ruby\"}]}}"]