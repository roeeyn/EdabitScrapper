a["{\"msg\":\"result\",\"id\":\"1917\",\"result\":{\"_id\":\"4jNjHdZ2hmMh23pRg\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"def cutting_grass(lst, *cuts):\\n\\t\",\"difficulty\":2.660377358490566,\"familyId\":\"QZ8eY7c5Fy8sbEFnk\",\"instructions\":\"Create a function that takes in an array of grass heights and a **variable** sequence of lawn mower cuts and outputs the array of successive grass heights.\\n\\nIf **after a cut**, any single element in the array reaches zero or negative, return `\\\"Done\\\"`  instead of the array of new heights.\\n\\nA demo:\\n```\\ncutting_grass([3, 4, 4, 4], 1, 1, 1) ➞ [[2, 3, 3, 3], [1, 2, 2, 2], \\\"Done\\\"]\\n\\n# 1st cut shaves off 1: [3, 4, 4, 4] ➞ [2, 3, 3, 3]\\n# 2nd cut shaves off 1: [2, 3, 3, 3] ➞ [1, 2, 2, 2]\\n# 3rd cut shaves off 1: [1, 2, 2, 2]➞ [0, 1, 1, 1], but one element reached zero so we return \\\"Done\\\".\\n```\\n\\n### Examples\\n```\\ncutting_grass([4, 4, 4, 4], 1, 1, 1, 1)\\n➞ [[3, 3, 3, 3], [2, 2, 2, 2], [1, 1, 1, 1], \\\"Done\\\"]\\n\\ncutting_grass([5, 6, 7, 5], 1, 2, 1)\\n➞ [[4, 5, 6, 4], [2, 3, 4, 2], [1, 2, 3, 1]]\\n\\ncutting_grass([8, 9, 9, 8, 8], 2, 3, 2, 1)\\n➞ [[6, 7, 7, 6, 6], [3, 4, 4, 3, 3], [1, 2, 2, 1, 1], \\\"Done\\\"]\\n\\ncutting_grass([1, 0, 1, 1], 1, 1, 1) ➞ [\\\"Done\\\", \\\"Done\\\", \\\"Done\\\"]\\n```\\n\\n### Notes\\n- The number of lawn cuts is variable.\\n- There will be at least one cut.\\n- Return `\\\"Done\\\"` onwards for each additional cut if the grass has already been completely mowed (see fourth example).\",\"lab\":\"Test.assert_equals(cutting_grass([4, 4, 4, 4], 1, 1, 1, 1), \\n\\t[[3, 3, 3, 3], [2, 2, 2, 2], [1, 1, 1, 1], \\\"Done\\\"])\\n\\nTest.assert_equals(cutting_grass([5, 6, 7, 5], 1, 2, 1), \\n\\t[[4, 5, 6, 4], [2, 3, 4, 2], [1, 2, 3, 1]])\\n\\nTest.assert_equals(cutting_grass([8, 9, 9, 8, 8], 2, 3, 2, 1), \\n\\t[[6, 7, 7, 6, 6], [3, 4, 4, 3, 3], [1, 2, 2, 1, 1], \\\"Done\\\"])\\n\\nTest.assert_equals(cutting_grass([1, 0, 1, 1], 1, 1, 1), \\n\\t[\\\"Done\\\", \\\"Done\\\", \\\"Done\\\"])\\n\\nTest.assert_equals(cutting_grass([4, 5, 4, 5], 2, 1, 1), \\n\\t[[2, 3, 2, 3], [1, 2, 1, 2], \\\"Done\\\"])\\n\\nTest.assert_equals(cutting_grass([4, 2, 2], 2, 1, 1), \\n\\t[\\\"Done\\\", \\\"Done\\\", \\\"Done\\\"])\",\"language\":\"python3\",\"summary\":\"Create a function that takes in an array of grass heights and a variable sequence of lawn mower cuts and outputs the array of successive grass heights.\\n\\nIf after a cut, any single element in the array reaches zero or negative, return \\\"Done\\\"  instead of the array of new heights.\\n\\nA demo:\\ncutting_grass([3, 4, 4, 4], 1, 1, 1) ➞ [[2, 3, 3, 3], [1, 2, 2, 2], \\\"Done\\\"\",\"tags\":[\"arrays\",\"language_fundamentals\",\"higher_order_functions\"],\"timestamp\":{\"$date\":1553810689555},\"title\":\"Mowing the Lawn\",\"stats\":{\"completed\":{\"total\":122,\"ratings\":[3,3,3,3,3,3,3,3,3,3,3,0,2,3,2,3,2,2,3,3,3,2,4,4,2,4,3,4,2,1,3,4,3,3,2,1,4,4,2,3,4,3,4,2,3,4,1,1,3,1,5,2,2,4,3,3,1,2,4,4,2,3,3,3,4,3,3,3,3,2,4,3,2,4,3,4,2,0,0,2,4,0,2,4,2,3,4,2,2,1,4,1,1,0,3,3,4,2,4,3,4,1,0,2,2,4],\"rators\":[\"mNMQvcxKSSvqqMYCH\",\"8JyqsSbN2FJXPr3cw\",\"nS5Mo26E8XbAWuyuQ\",\"Jqk2uJZZxEv5wZFze\",\"yZvzB3qFb8pkHy4dg\",\"tAF9Gf6PiGogbZuWs\",\"qaR8DnWrTk8Mus5Q2\",\"T3ZAuoMrJjvZwN55B\",\"gb9rvGus2Jv7bjZSs\",\"cF8nvyGwfFKE5b2iy\",\"nrA8Pacm3A6GqGzq4\",\"5J4tAkdA45c76xAfk\",\"ab7BsQuhDo3QgE6bh\",\"jdQrck9YLmJQFPb7N\",\"EPgZSeQrPkXKnTqdG\",\"pkZ2pAaDxWo6Nwur4\",\"g4R4gRHCE9tsTDt8B\",\"7g3vZaQXhLpxrajyg\",\"hsrNYf3WbexXJKhCq\",\"AYaEkTWLMmfzpwejr\",\"PFjMZGHNAPTkgd7tq\",\"BFNm9gacwba9KyLFW\",\"3ifAHQzsMasfQySoL\",\"cmwasetrBzbwJQbks\",\"nzx4uAPg3hCceyFPE\",\"Wf6AF7TuNwEobxuW6\",\"cecRRLKKu5R62D5xE\",\"j7fyR7k8FfGPLraZx\",\"nF9pCCzbGDhzvWgaw\",\"TgjcWxsTjar7snQx9\",\"RErqK2yM94wYyD2hk\",\"kQH5b8MXJunh84Czq\",\"7BvK9WWXi9Arqh63Q\",\"Tin42WiZ4JTDEnS7b\",\"s5M5RvgqR9BhB9JoC\",\"XKi8iZXBCHCaebSHh\",\"HqmxnQJM66Y57twhn\",\"vuwheqp25x7RkBHXn\",\"73rmKyTQp7oWvRcgq\",\"FgkYtHLxeD8pETJ8T\",\"LdRdFW8qCjGu5nYLQ\",\"6ShafRStcvew4GfCh\",\"2fxapKr8XGdNeaKi2\",\"XbwyB44kHPnRgQcrB\",\"8PwfYqoDQFThzNtvf\",\"2innwjWqxJHo4eRGh\",\"sJWTa7iWeRoRtqJ8N\",\"i8rXgsJvoBjobeP7r\",\"sWX2tYC7J4m2GkcRC\",\"WLFPvm65aHfgwQy7N\",\"aCNWav8S8Try9RkC6\",\"aEm3Wvj2rFYRL8Lrb\",\"pmgFEciNrd3ES9tuu\",\"K5vETaccLsPyu8sbd\",\"Yp7uvStL97cC9fKkY\",\"dXMbkgQFoN37BhruB\",\"AasGs8AeX9Lcb9xJn\",\"KuwfQZn99sQTj6ZsC\",\"ywk3XGvcmpTgRxwZa\",\"55RQznnuTGpsj3EXd\",\"mDWNyaaQ9hvPCRzSd\",\"fznzd3qnvtbFkkizz\",\"gJYuGdkXEWWmGRLzu\",\"ZNnsMeNkdDhHjSrZb\",\"44dAzThMuyGZ5StXB\",\"wT5gGgvjKc5wz59AQ\",\"DQskEvAv5KiJDPtGF\",\"n2BRY9X8899dcG8Bw\",\"W5TajitmCyxz87zAC\",\"Ecg4m7srYGgZsb4Ck\",\"9dgvEreRDYRiwLmYv\",\"MoJmguQFX7yAAxNBb\",\"qPpQfR5KyDb5Y3EFf\",\"bJxaKHJqR82EWw8Su\",\"f2BoqyCpgnmjEjLqx\",\"CnHfMfXRFpHm7fxhP\",\"77dQgT3gTGWLcRPTk\",\"xn7uGNKeAwPEkP9oA\",\"KZ2xddpM2f9JRaryB\",\"zZDaXBxMzTCBhNkgL\",\"4fhjJBvLBWh6QeSih\",\"DNACg4rcgZsPtYGZ8\",\"p8qqFdJ3FSk5x9z3G\",\"x4dfavjLEcrvAF3QQ\",\"xLe22eHviFtWojRem\",\"5dHucvf2qBYyKim7X\",\"8sNv5PTHa7XQ8bNqR\",\"yjtdwc2AC4jA2RWtn\",\"R4SjTgDnpigJYDLyL\",\"HF28xZKSLM9wEuqNg\",\"Z85ajWfZ4jDPkbvR4\",\"v9KtC8YLbMWmXiW2H\",\"m3R9aaRoEbaxRsSNA\",\"iS5BrkGLzJyPK7nKt\",\"8nE8QHnFYsHCFebte\",\"J3upzLHuEwXH7Z2hx\",\"LW8PqW4HFXWfoJGo6\",\"ce6AanPmAjSD6b7MP\",\"yTtSCvGPyYna6JuRC\",\"NfMJuiBk6FN5Jc6ow\",\"hkiz2Nv927cYGrA86\",\"gXTAie79kiw28tx5u\",\"iojEnnY9FsMfYzp6f\",\"QRv96jmNaYsWkxQEG\",\"2PufnQcsHsfymufX3\",\"HhYCji7QqauyN3A7v\",\"eHcgvkTGsH7ZziqBo\",\"GTKsdeEihE636Le9i\",\"ctbThYbufFCYbRK4f\",\"DPi9QGLctq2y76KuE\",\"MpfytGFYF77emJ3cT\",\"eYisiNCtyfk7Kg4Yr\",\"T6iBEE2jp7f7iEF2P\",\"fbr22rabEJMfBp7vD\",\"oBcs8GLX2ZFLXQy8y\",\"gubMgYwJY2ZtppWPS\"],\"quality\":[5,4,5,4,5,3,5,5,5,5,5,5,5,5,4,5,5,5,4]},\"tests\":{\"score\":0,\"rators\":[\"mNMQvcxKSSvqqMYCH\"]},\"instructions\":{\"score\":0,\"rators\":[\"mNMQvcxKSSvqqMYCH\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.684210526315789,\"family\":[{\"_id\":\"L99jAtiuAeWaB9jdm\",\"language\":\"javascript\"},{\"_id\":\"4jNjHdZ2hmMh23pRg\",\"language\":\"python3\"},{\"_id\":\"iGiciX2iqcZurdpci\",\"language\":\"ruby\"}]}}"]