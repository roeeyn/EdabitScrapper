a["{\"msg\":\"result\",\"id\":\"1786\",\"result\":{\"_id\":\"5Q2RRBNJ8KcjCkPwP\",\"author\":\"AniXDownLoe\",\"authorId\":\"incG8tH2dwThHg35f\",\"code\":\"def tic_tac_toe(inputs):\\n\\t\",\"difficulty\":2.3559322033898304,\"familyId\":\"wzgzeDbKXdfyrDn6y\",\"instructions\":\"Create a function that takes a list of character inputs from a Tic Tac Toe game. Inputs will be taken from player1 as `\\\"X\\\"`, player2 as `\\\"O\\\"`, and empty spaces as `\\\"#\\\"`. The program will return the **winner** or **tie** results.\\n\\n### Examples\\n```\\ntic_tac_toe([\\n  [\\\"X\\\", \\\"O\\\", \\\"O\\\"],\\n  [\\\"O\\\", \\\"X\\\", \\\"O\\\"],\\n  [\\\"O\\\", \\\"#\\\", \\\"X\\\"]\\n]) ➞ \\\"Player 1 wins\\\"\\n\\n\\ntic_tac_toe([\\n  [\\\"X\\\", \\\"O\\\", \\\"O\\\"],\\n  [\\\"O\\\", \\\"X\\\", \\\"O\\\"],\\n  [\\\"X\\\", \\\"#\\\", \\\"O\\\"]\\n]) ➞ \\\"Player 2 wins\\\"\\n\\n\\ntic_tac_toe([\\n  [\\\"X\\\", \\\"X\\\", \\\"O\\\"],\\n  [\\\"O\\\", \\\"X\\\", \\\"O\\\"],\\n  [\\\"X\\\", \\\"O\\\", \\\"#\\\"]\\n]) ➞ \\\"It's a Tie\\\"\\n```\\n\\n### Notes\\nN/A\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(tic_tac_toe(\\n [[\\\"X\\\", \\\"O\\\", \\\"O\\\"],\\n  [\\\"O\\\", \\\"X\\\", \\\"O\\\"],\\n  [\\\"O\\\", \\\"#\\\", \\\"X\\\"]]), \\\"Player 1 wins\\\")\\t\\n\\nTest.assert_equals(tic_tac_toe(\\n [[\\\"X\\\", \\\"O\\\", \\\"O\\\"],\\n  [\\\"O\\\", \\\"X\\\", \\\"O\\\"],\\n  [\\\"O\\\", \\\"#\\\", \\\"O\\\"]]), \\\"Player 2 wins\\\")\\n\\nTest.assert_equals(tic_tac_toe(\\n [[\\\"X\\\", \\\"O\\\", \\\"O\\\"],\\n  [\\\"O\\\", \\\"X\\\", \\\"O\\\"],\\n  [\\\"O\\\", \\\"O\\\", \\\"#\\\"]]), \\\"It's a Tie\\\")\\n\\nTest.assert_equals(tic_tac_toe(\\n [[\\\"X\\\", \\\"O\\\", \\\"O\\\"],\\n  [\\\"X\\\", \\\"X\\\", \\\"O\\\"],\\n  [\\\"X\\\", \\\"O\\\", \\\"#\\\"]]), \\\"Player 1 wins\\\")\\n\\nTest.assert_equals(tic_tac_toe(\\n [[\\\"X\\\", \\\"#\\\", \\\"O\\\"],\\n  [\\\"X\\\", \\\"X\\\", \\\"O\\\"],\\n  [\\\"#\\\", \\\"O\\\", \\\"#\\\"]]), \\\"It's a Tie\\\")\\n\\nTest.assert_equals(tic_tac_toe(\\n [[\\\"X\\\", \\\"X\\\", \\\"X\\\"],\\n  [\\\"X\\\", \\\"O\\\", \\\"O\\\"],\\n  [\\\"O\\\", \\\"O\\\", \\\"X\\\"]]), \\\"Player 1 wins\\\")\\n\\nTest.assert_equals(tic_tac_toe(\\n [[\\\"X\\\", \\\"O\\\", \\\"O\\\"],\\n  [\\\"X\\\", \\\"O\\\", \\\"O\\\"],\\n  [\\\"O\\\", \\\"X\\\", \\\"X\\\"]]), \\\"Player 2 wins\\\")\\n\\nTest.assert_equals(tic_tac_toe(\\n [[\\\"X\\\", \\\"O\\\", \\\"O\\\"],\\n  [\\\"X\\\", \\\"O\\\", \\\"O\\\"],\\n  [\\\"#\\\", \\\"X\\\", \\\"X\\\"]]), \\\"It's a Tie\\\")\\n\\nTest.assert_equals(tic_tac_toe(\\n [[\\\"X\\\", \\\"O\\\", \\\"O\\\"],\\n  [\\\"O\\\", \\\"O\\\", \\\"O\\\"],\\n  [\\\"#\\\", \\\"X\\\", \\\"X\\\"]]), \\\"Player 2 wins\\\")\",\"language\":\"python3\",\"quality\":4.75,\"summary\":\"Create a function that takes a list of character inputs from a Tic Tac Toe game. Inputs will be taken from player1 as \\\"X\\\", player2 as \\\"O\\\", and empty spaces as \\\"#\\\". The program will return the winner or tie results.\\n\\nExamples\\ntictactoe([\\n  [\\\"X\\\", \\\"O\\\", \\\"O\\\"],\\n  [\\\"O\\\", \\\"X\\\", \\\"O\\\"],\\n  [\\\"O\\\", \\\"#\\\", \\\"X\\\"]\\n]) ➞ \\\"Player 1 wins\\\"\\n\\ntictactoe([\\n  [\\\"X\\\", \\\"O\\\", \\\"O\\\"],\\n  [\\\"O\\\", \\\"X\\\", \\\"O\\\"\",\"tags\":[\"validation\",\"arrays\",\"games\"],\"timestamp\":{\"$date\":1602013570868},\"title\":\"Tic Tac Toe\",\"stats\":{\"completed\":{\"total\":67,\"ratings\":[3,3,3,3,3,2,4,4,5,2,2,0,3,2,2,1,1,4,2,0,4,3,2,3,2,4,3,3,2,4,3,4,3,4,4,1,1,0,0,0,3,0,2,4,3,2,1,4,0,1,3,3,1,4,3,0,2,3,1],\"quality\":[5,5,5,4,5,4,5,5],\"rators\":[\"incG8tH2dwThHg35f\",\"8PwfYqoDQFThzNtvf\",\"tAF9Gf6PiGogbZuWs\",\"mDWNyaaQ9hvPCRzSd\",\"4fhjJBvLBWh6QeSih\",\"s5M5RvgqR9BhB9JoC\",\"7mdKbwWEy3wKi5H4h\",\"aEm3Wvj2rFYRL8Lrb\",\"8JyqsSbN2FJXPr3cw\",\"HF28xZKSLM9wEuqNg\",\"8sNv5PTHa7XQ8bNqR\",\"yjtdwc2AC4jA2RWtn\",\"gJYuGdkXEWWmGRLzu\",\"Ecg4m7srYGgZsb4Ck\",\"v9KtC8YLbMWmXiW2H\",\"w2HhxvSLmDhaGCAjE\",\"uZJqBoqeZRX3RncAR\",\"dHConQk6pC8c323TE\",\"x3WsGCnE38anLjJqh\",\"nc7bRhkxgKyqusYe3\",\"iS5BrkGLzJyPK7nKt\",\"ygDJ7HEzRoJZyPEF4\",\"xn7uGNKeAwPEkP9oA\",\"gb9rvGus2Jv7bjZSs\",\"axdSNLZpiCDF8RS6n\",\"J3upzLHuEwXH7Z2hx\",\"7ifh8r4gvyYMhKB94\",\"PytNZK9mNiRiZxPrm\",\"zyeCyEyHx7tcNJWWL\",\"n2BRY9X8899dcG8Bw\",\"wFN3AwzWPua28pDGo\",\"gXTAie79kiw28tx5u\",\"hkiz2Nv927cYGrA86\",\"iojEnnY9FsMfYzp6f\",\"QRv96jmNaYsWkxQEG\",\"2PufnQcsHsfymufX3\",\"3KkyQm77zsew58Dc2\",\"AasGs8AeX9Lcb9xJn\",\"fznzd3qnvtbFkkizz\",\"Yp7uvStL97cC9fKkY\",\"HqmxnQJM66Y57twhn\",\"gKnWjDjwrJh7MK2df\",\"T2vhHPhRR96hRizq8\",\"nWbwmuxSsM4WdHLHx\",\"T6iBEE2jp7f7iEF2P\",\"atBnfvuQuejxZFmoQ\",\"jWbd7SYDzLPjc9EDh\",\"FD5wcvocanT3Xih27\",\"yod5YhKtPqw2GfG9B\",\"BBuyQ9gxGWxm4XLz7\",\"SYDBrDffn8NPsbrhi\",\"E2AgJ6HuCN5nar6BP\",\"o6afXeSPTEbfRDrmJ\",\"buX4mCQhtXCfBjeno\",\"oBcs8GLX2ZFLXQy8y\",\"GTKsdeEihE636Le9i\",\"euPBBaYXyS8RBr9KB\",\"iqmPb9JuJDgTFeR8Q\",\"Y7zDbhJG8sLKtJCtZ\",\"23oi2a3vQwhtLEbSj\",\"suArq5BbSy7gD6xri\",\"9pzFiFK3ANLjQfnr2\"]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"rscwis53jKokoKRYo\",\"language\":\"cpp\"},{\"_id\":\"sG8wviXAyMwAu5TyF\",\"language\":\"javascript\"},{\"_id\":\"5Q2RRBNJ8KcjCkPwP\",\"language\":\"python3\"},{\"_id\":\"H6Afv3BCpwNYj63jT\",\"language\":\"ruby\"}]}}"]