a["{\"msg\":\"result\",\"id\":\"2272\",\"result\":{\"_id\":\"uxLZMo6PBXJk7rmdC\",\"archived\":false,\"author\":\"kochug\",\"authorId\":\"vQEmjTRgmdGNYB7yk\",\"code\":\"def navigate(roads, startingNode, endingNode):\\n\\t\",\"difficulty\":3.5531914893617023,\"familyId\":\"XuvdvzqLp739hGY5M\",\"instructions\":\"Road systems can be imagined as a graph of intersections connected by lines. The advantage of this is it makes it easier to find the shortest path between any two intersections.\\n\\n### Task\\nWrite a function that takes as arguments:\\n- A string representing JSON graph of the road system\\n- The starting intersection (node)\\n- The ending intersection (node)\\n\\nAnd returns a dictionary containing information about the shortest path.\\n\\n### Format of the road graph\\nThe road graph follows the JSON graph specification linked in the Resources tab. As an example, this is what one road graph could look like (in JSON):\\n```json\\n{\\n  \\\"graph\\\": {\\n    \\\"directed\\\": false,\\n    \\\"nodes\\\": [\\n      { \\\"id\\\": 0 },\\n      { \\\"id\\\": 1 },\\n      { \\\"id\\\": 2 },\\n       { \\\"id\\\": 3 }\\n    ],\\n    \\\"edges\\\": [\\n      {\\n        \\\"source\\\": 0,\\n        \\\"target\\\": 1,\\n        \\\"metadata\\\": {\\n          \\\"distance\\\": 5\\n        }\\n      },\\n      {\\n        \\\"source\\\": 1,\\n        \\\"target\\\": 3,\\n        \\\"metadata\\\": {\\n          \\\"distance\\\": 9\\n        }\\n      },\\n      {\\n        \\\"source\\\": 3,\\n        \\\"target\\\": 2,\\n        \\\"metadata\\\": {\\n          \\\"distance\\\": 6\\n        }\\n      },\\n      {\\n        \\\"source\\\": 2,\\n        \\\"target\\\": 4,\\n        \\\"metadata\\\": {\\n          \\\"distance\\\": 3\\n        }\\n      },\\n      {\\n        \\\"source\\\": 4,\\n        \\\"target\\\": 3,\\n        \\\"metadata\\\": {\\n          \\\"distance\\\": 8\\n        },\\n      },\\n      {\\n       \\\"source\\\": 4,\\n       \\\"target\\\": 0,\\n       \\\"metadata\\\": {\\n         \\\"distance\\\": 2\\n       }\\n     }\\n    ]\\n  }\\n}\\n```\\nAdditionally, all edges  are **two way roads** (undirected), so you don't need to worry about that. Which node is in `source` and which is in `target` **does not matter**. Edges may contain the property `label`, which is just a street name and not necessary for you to use.\\n\\nAnd remember, the goal is to **minimize** the sum of all the `metadata.distance` properties of edges used.\\n\\n### Format of return value\\nThe return value should be a **dictionary** with keys `distance` and `path`.\\n\\n`distance` should be the number that is the total sum of the distance metadata on each edge used.\\n\\n`path` should be a **list** of **integers**, where each number is the id of a node used along the path from the start to the end.\\n\\nFor example, if the shortest path from node `1` to node id `2` was going from node 1 to node 3 to node 2, then the result should be `[1, 3, 2]`.  You **must** include the starting and ending nodes in the path.\\n\\nIf two paths have the same distance, it **does not matter** which one you return (which won't happen in the tests).\\n\\n### Example\\nIn the example road graph, if I asked you to find the path from node id 2 to node id 0, the function call would be\\n```python\\nnavigate(roads, 2, 0) # Where roads is the example graph structure\\n``` \\nAnd you should return\\n```json\\n{\\n  \\\"distance\\\": 5,\\n  \\\"path\\\": [ 2, 4, 0 ]\\n}\\n```\\n\\n### Notes\\n- If two paths have the same distance, it doesn't matter which one you return (which won't happen in the tests).\\n- Make sure to include the starting and ending nodes in the path.\\n- The order of the path list **does** matter.\\n- Distance between 2 nodes is located in the `metadata.distance` property of the edge connecting them.\",\"lab\":\"roads = \\\"\\\"\\\"\\n{\\n  \\\"directed\\\": false,\\n  \\\"nodes\\\": [\\n    { \\\"id\\\": 0 },\\n    { \\\"id\\\": 1 },\\n    { \\\"id\\\": 2 },\\n    { \\\"id\\\": 3 },\\n    { \\\"id\\\": 4 },\\n    { \\\"id\\\": 5 },\\n    { \\\"id\\\": 6 },\\n    { \\\"id\\\": 7 },\\n    { \\\"id\\\": 8 },\\n    { \\\"id\\\": 9 }\\n  ],\\n  \\\"edges\\\": [\\n    {\\n      \\\"source\\\": 1,\\n      \\\"target\\\": 6,\\n      \\\"label\\\": \\\"Oak Street\\\",\\n      \\\"metadata\\\": {\\n        \\\"distance\\\": 5\\n      }\\n    },\\n    {\\n      \\\"source\\\": 6,\\n      \\\"target\\\": 8,\\n      \\\"label\\\": \\\"Oak Street\\\",\\n      \\\"metadata\\\": {\\n        \\\"distance\\\": 6\\n      }\\n    },\\n    {\\n      \\\"source\\\": 8,\\n      \\\"target\\\": 9,\\n      \\\"label\\\": \\\"Oak Street\\\",\\n      \\\"metadata\\\": {\\n        \\\"distance\\\": 11\\n      }\\n    },\\n    {\\n      \\\"source\\\": 8,\\n      \\\"target\\\": 7,\\n      \\\"label\\\": \\\"Robin Way\\\",\\n      \\\"metadata\\\": {\\n        \\\"distance\\\": 3\\n      }\\n    },\\n    {\\n      \\\"source\\\": 7,\\n      \\\"target\\\": 4,\\n      \\\"label\\\": \\\"Robin Way\\\",\\n      \\\"metadata\\\": {\\n        \\\"distance\\\": 5\\n      }\\n    },\\n    {\\n      \\\"source\\\": 6,\\n      \\\"target\\\": 7,\\n      \\\"label\\\": \\\"Mountain Road\\\",\\n      \\\"metadata\\\": {\\n        \\\"distance\\\": 8\\n      }\\n    },\\n    {\\n      \\\"source\\\": 7,\\n      \\\"target\\\": 9,\\n      \\\"label\\\": \\\"Mountain Road\\\",\\n      \\\"metadata\\\": {\\n        \\\"distance\\\": 9\\n      }\\n    },\\n    {\\n      \\\"source\\\": 4,\\n      \\\"target\\\": 3,\\n      \\\"label\\\": \\\"National Street\\\",\\n      \\\"metadata\\\": {\\n        \\\"distance\\\": 6\\n      }\\n    },\\n    {\\n      \\\"source\\\": 1,\\n      \\\"target\\\": 0,\\n      \\\"label\\\": \\\"Sunrise Drive\\\",\\n      \\\"metadata\\\": {\\n        \\\"distance\\\": 4\\n      }\\n    },\\n    {\\n      \\\"source\\\": 0,\\n      \\\"target\\\": 3,\\n      \\\"label\\\": \\\"Short Street\\\",\\n      \\\"metadata\\\": {\\n        \\\"distance\\\": 3\\n      }\\n    },\\n    {\\n      \\\"source\\\": 5,\\n      \\\"target\\\": 4,\\n      \\\"label\\\": \\\"Rickety Creek\\\",\\n      \\\"metadata\\\": {\\n        \\\"distance\\\": 7\\n      }\\n    },\\n    {\\n      \\\"source\\\": 4,\\n      \\\"target\\\": 0,\\n      \\\"label\\\": \\\"Rickety Creek\\\",\\n      \\\"metadata\\\": {\\n        \\\"distance\\\": 5\\n      }\\n    },\\n    {\\n      \\\"source\\\": 9,\\n      \\\"target\\\": 5,\\n      \\\"label\\\": \\\"Uphill Grove\\\",\\n      \\\"metadata\\\": {\\n        \\\"distance\\\": 6\\n      }\\n    },\\n    {\\n      \\\"source\\\": 5,\\n      \\\"target\\\": 2,\\n      \\\"label\\\": \\\"Uphill Grove\\\",\\n      \\\"metadata\\\": {\\n        \\\"distance\\\": 5\\n      }\\n    },\\n    {\\n      \\\"source\\\": 2,\\n      \\\"target\\\": 3,\\n      \\\"label\\\": \\\"Uphill Grove\\\",\\n      \\\"metadata\\\": {\\n        \\\"distance\\\": 7\\n      }\\n    }\\n  ]\\n}\\n\\\"\\\"\\\"\\n\\nTest.assert_equals(navigate(roads, 1, 5), {'distance': 16, 'path': [ 1, 0, 4, 5 ]})\\nTest.assert_equals(navigate(roads, 6, 2), {'distance': 19, 'path': [ 6, 1, 0, 3, 2 ]})\\nTest.assert_equals(navigate(roads, 3, 4), {'distance': 6, 'path': [ 3, 4 ]})\",\"language\":\"python3\",\"summary\":\"Road systems can be imagined as a graph of intersections connected by lines. The advantage of this is it makes it easier to find the shortest path between any two intersections.\\n\\nTask\\nWrite a function that takes as arguments:\\nA string representing JSON graph of the road system\\nThe starting intersection (node)\\nThe ending intersection (node)\\n\\nAnd returns a dicti\",\"tags\":[\"algorithms\",\"data_structures\"],\"timestamp\":{\"$date\":1524401674834},\"title\":\"Road Navigation\",\"stats\":{\"completed\":{\"total\":49,\"ratings\":[3,3,3,3,3,4,2,3,3,3,0,5,3,3,4,5,4,4,5,5,4,5,5,2,5,5,2,3,5,0,5,0,5,0,1,5,5,5,4,4,5,2,5,4,3,5,5],\"rators\":[\"vQEmjTRgmdGNYB7yk\",\"tuyDaJzFy78jxvhCY\",\"Lyh6nkCyy9X7rTZPi\",\"7eBXcYTe4qmGk7xRR\",\"SFdYdS7WDwuE7XsWJ\",\"ewyPo746vdNES9LwS\",\"Aaz2b7rwGEougSwHw\",\"cXe3JHgyZ8yZrYDix\",\"hxJTBdF9sjMGFZHgx\",\"RsX6W2ddWM8ajHzss\",\"BKtfihRY8JSpH83kA\",\"WKvDiBB7cQFWvu5mc\",\"6fJpRpAgiWD5zX9qB\",\"T3ZAuoMrJjvZwN55B\",\"tAF9Gf6PiGogbZuWs\",\"6W2GSzrYjMD9ANBFY\",\"8JyqsSbN2FJXPr3cw\",\"AYaEkTWLMmfzpwejr\",\"MXjxGML2X75x64vJo\",\"QKYi6pYeaYFovNHX4\",\"duygm2Ffue3bjb3MS\",\"D6Z9oT2ZhjBCxuL2o\",\"5Qvy7fNM2YEQ6PtbY\",\"6qJ8mFbGC9NfjsuKM\",\"jDgJ2fdFS76TSorNc\",\"FHSJnAYTbcsKFgeQa\",\"eHcgvkTGsH7ZziqBo\",\"sZDYNicocwXesSMXb\",\"pzZMMmJRaxwGAgaTH\",\"fMR9RcfgPJWiLgx7k\",\"X4iqEdg7dPjFpoASw\",\"t7BnRyo7NH5Nx22HR\",\"bLpgu8xTdpDPFSAsM\",\"5s4Gs4GF6SauPhtYf\",\"aEm3Wvj2rFYRL8Lrb\",\"fznzd3qnvtbFkkizz\",\"8PwfYqoDQFThzNtvf\",\"W5TajitmCyxz87zAC\",\"bJaPCBx63YxdJAuTS\",\"yf6mfdz6gjWxaKKi4\",\"d6iEb2BDDofyeePh9\",\"SGhPxX5bHGL8zZqtt\",\"yjtdwc2AC4jA2RWtn\",\"iS5BrkGLzJyPK7nKt\",\"gJYuGdkXEWWmGRLzu\"],\"quality\":[4,5]},\"complaints\":{\"total\":0,\"reasons\":[],\"skippers\":[\"vQEmjTRgmdGNYB7yk\"]},\"instructions\":{\"score\":0,\"voters\":[\"o5W6YzxhE5PsY2tNB\",\"X289CatbRjtbje4ZZ\"]},\"tests\":{\"score\":0,\"voters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.5,\"family\":[{\"_id\":\"qQu4kxTEHapogmCgE\",\"language\":\"javascript\"},{\"_id\":\"uxLZMo6PBXJk7rmdC\",\"language\":\"python3\"}]}}"]