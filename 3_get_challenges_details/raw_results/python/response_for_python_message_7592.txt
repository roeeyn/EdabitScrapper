a["{\"msg\":\"result\",\"id\":\"2501\",\"result\":{\"_id\":\"JiuvoGhEXax8mh35Q\",\"author\":\"Evgeny SH\",\"authorId\":\"8PwfYqoDQFThzNtvf\",\"code\":\"def make_fun(code):\\n\\t\",\"difficulty\":5,\"quality\":0,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"uz3WbrFdD5mamArg8\",\"instructions\":\"Python language does not have `goto` keyword. In other languages such statements exist. For example in C++: the `goto` statement transfers control to the location specified by label. The `goto` statement must be in the same function as the label it is referring, it may appear before or after the label.\\n\\nOne good use of `goto` is to exit from a deeply nested routine. For example, consider the following code fragment:\\n\\n```\\nfor(...) {\\n   for(...) {\\n      while(...) {\\n         if(...)\\n             goto stop;\\n      }\\n   }\\n}\\nstop:\\n```\\n\\n_Use of `goto` statement is highly discouraged because it makes it difficult to trace the control flow of a program, making the program hard to understand and hard to modify. Any program that uses a `goto` can be rewritten so that it doesn't need the `goto`._\\n\\nThe above point of view is not being disputed. This here is just a challenge to amuse your imagination: how to translate a function with `goto` into a function without `goto`.\\n\\n### Goal\\nWrite a function that can translate the given function source code into a proper function that can execute according to the `goto` instructions.\\n\\n### Input\\nThe translation function receives a multiline Python source code string of an intended function with `goto` and `labels` statements. These additional instructions are, technically comments, formatted in the following manner:\\n\\n```\\n# goto label_name;\\n...\\n# label_name:\\n```\\n\\n### Output\\nThe Python functions can make other functions. To accomplish the goal, you need to know how to make a runnable function from the text and how to improve the given text such that the output function jumps to the `label` whenever it encounters a `goto` statement.\\n\\n### Examples\\nThe intended function receives a list and two numbers. It has to select `sub_len` first elements from the list `n_subs` times and output a new list. The `make_fun` function processes the source code and returns a function that handles the `goto` jumps.\\n\\n```\\nstr_code = \\\"\\\"\\\"\\ndef make_list(lst, sub_len, n_subs):\\n    res = []\\n    sub_count = 0\\n    # label1:\\n    for i, val in enumerate(lst):\\n        if sub_count < n_subs:\\n            if i < sub_len:\\n                res.append(val)\\n            elif i >= sub_len:\\n                sub_count += 1\\n                # goto label1;\\n        else:\\n            pass\\n            # goto label2;\\n    # label2:\\n    return res\\n\\\"\\\"\\\"\\n\\nlst = [\\\"g\\\", \\\"o\\\", 2, \\\":\\\", 8, \\\"t\\\", \\\"a\\\", \\\"i\\\", \\\"l\\\"]\\n\\nf = make_fun(str_code)\\n\\nf(lst, 5, 4) ➞ [\\\"g\\\", \\\"o\\\", 2, \\\":\\\", 8, \\\"g\\\", \\\"o\\\", 2, \\\":\\\", 8, \\\"g\\\", \\\"o\\\", 2, \\\":\\\", 8, \\\"g\\\", \\\"o\\\", 2, \\\":\\\", 8]\\n\\nf(lst, 2, 3) ➞ [\\\"g\\\", \\\"o\\\", \\\"g\\\", \\\"o\\\", \\\"g\\\", \\\"o\\\"]\\n\\nf(lst, 8, 2) ➞ [\\\"g\\\", \\\"o\\\", 2, \\\":\\\", 8, \\\"t\\\", \\\"a\\\", \\\"i\\\", \\\"g\\\", \\\"o\\\", 2, \\\":\\\", 8, \\\"t\\\", \\\"a\\\", \\\"i\\\"]\\n```\\n\\n### Notes\\nPerformance is not a concern. There are no heavy computations in the tests. Everything runs under 0.01 seconds. The focus of this challenge is on string manipulation and the _goto_ jump’s logic.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"from time import perf_counter\\ntic = perf_counter()\\n\\nstr_code = \\\"\\\"\\\"\\ndef make_list(lst, sub_len, n_subs):\\n    res = []\\n    sub_count = 0\\n    # label1:\\n    for i, val in enumerate(lst):\\n        if sub_count < n_subs:\\n            if i < sub_len:\\n                res.append(val)\\n            elif i >= sub_len:\\n                sub_count += 1\\n                # goto label1;\\n        else:\\n            pass\\n            # goto label2;\\n    # label2:\\n    return res\\n\\\"\\\"\\\"\\nlst = ['g', 'o', 2, ':', 8, 't', 'a', 'i', 'l']\\nf = make_fun(str_code)\\nTest.assert_equals(f(lst, 5, 4), ['g', 'o', 2, ':', 8, 'g', 'o', 2, ':', 8,\\n                                'g', 'o', 2, ':', 8, 'g', 'o', 2, ':', 8])\\nTest.assert_equals(f(lst, 2, 3), ['g', 'o', 'g', 'o', 'g', 'o'])\\nTest.assert_equals(f(lst, 8, 2), ['g', 'o', 2, ':', 8, 't', 'a', 'i',\\n                                'g', 'o', 2, ':', 8, 't', 'a', 'i'])\\n\\nstr_code = \\\"\\\"\\\"\\ndef sums(n1, n2):\\n    sum_primes = 0\\n    sum_div_three = 0\\n    sum_total = 0\\n    is_prime = False\\n    check_done = False\\n    k = n1\\n    # l1:\\n    while k <= n2:\\n        if not check_done:\\n            pass\\n            # goto l2;\\n        if is_prime:\\n            sum_primes += k\\n        elif not k % 3:\\n            sum_div_three += k\\n        k += 1\\n        check_done = False\\n    # goto l3;\\n    # l2:\\n    is_prime = True\\n    for i in range(2, int(pow(k, 0.5)) + 1):\\n        if not k % i:\\n            is_prime = False\\n            check_done = True\\n            # goto l1;\\n    check_done = True\\n    # goto l1;\\n    # l3:\\n    for i in range(n1, n2 + 1):\\n        sum_total += i\\n    return sum_primes, sum_div_three, sum_total - sum_primes - sum_div_three\\n\\\"\\\"\\\"\\nf = make_fun(str_code)\\nTest.assert_equals(f(4, 20), (72, 60, 72))\\nTest.assert_equals(f(50, 100), (732, 1275, 1818))\\nTest.assert_equals(f(200, 400), (9660, 20100, 30540))\\n\\nstr_code = \\\"\\\"\\\"\\ndef collatz(num):\\n    count = 0\\n    n = num\\n    # start:\\n    if n == 1:\\n        pass\\n        # goto end;\\n    if n % 2:\\n        pass\\n        # goto odd;\\n    if not n % 2:\\n        pass\\n        # goto even;\\n    # odd:\\n    n *= 3\\n    n += 1\\n    count += 1\\n    # goto start;\\n    # even:\\n    n //= 2\\n    count += 1\\n    # goto start;\\n    # end:\\n    return count\\n\\\"\\\"\\\"\\nf = make_fun(str_code)\\nTest.assert_equals(f(3), 7)\\nTest.assert_equals(f(345), 125)\\nTest.assert_equals(f(72), 22)\\n\\nstr_code = \\\"\\\"\\\"\\ndef lucky_seven(lst):\\n    len_lst = len(lst)\\n    i = -1\\n    j = 0\\n    k = 0\\n    res = False\\n    # start:\\n    if len_lst <= 2:\\n        pass\\n        # goto end;\\n    # start_i:\\n    i += 1\\n    if i == len_lst - 2 and j == len_lst - 1 and k == len_lst:\\n        pass\\n        # goto end;\\n    j = i\\n    # start_j:\\n    j += 1\\n    if j == len_lst - 1:\\n        pass\\n        # goto start_i;\\n    k = j\\n    # start_k:\\n    k += 1\\n    if k == len_lst:\\n        pass\\n        # goto start_j;\\n    if lst[i] + lst[j] + lst[k] == 7:\\n        res = True\\n        # goto end;\\n    else:\\n        pass\\n        # goto start_k;\\n    # goto start_i;\\n    # end:\\n    return res\\n\\\"\\\"\\\"\\nf = make_fun(str_code)\\nTest.assert_equals(f([2, 4, 3, 8, 9, 1]), True)\\nTest.assert_equals(f([-5, -4, 6, 8, 9, 8, 8]), False)\\nTest.assert_equals(f([2, 3]), False)\\nTest.assert_equals(f([-2, -5, -7, 4, -7, 9, -6, -6]), True)\\n\\nstr_code = \\\"\\\"\\\"\\ndef puzzle(lst):\\n    reps = []\\n    res = []\\n    len_lst = len(lst)\\n    i = 0\\n    n_reps = set()\\n    n_lst = []\\n    max_d = 0\\n    base = 0\\n    n_base = 0\\n    # start_lst:\\n    if i == len_lst:\\n        pass\\n        # goto out;\\n    n_reps = {lst[i]}\\n    n_lst = [int(d) for d in str(lst[i])]\\n    max_d = max(n_lst)\\n    base = max_d + 1\\n    # start_base:\\n    if base == 10:\\n        pass\\n        # goto i_end;\\n    n_base = sum(d * pow(base, i) for i, d in enumerate(n_lst[::-1]))\\n    n_reps.add(n_base)\\n    base += 1\\n    # goto start_base;\\n    # i_end:\\n    reps.append(n_reps)\\n    i += 1\\n    # goto start_lst;\\n    # out:\\n    if not reps:\\n        pass\\n        # goto end:\\n    res = reps[0]\\n    i = 1\\n    # combine:\\n    if i == len(reps):\\n        pass\\n        # goto end;\\n    res &= reps[i]\\n    i += 1\\n    # goto combine;\\n    # end:\\n    res = sorted(res)\\n    return res\\n\\\"\\\"\\\"\\nf = make_fun(str_code)\\nTest.assert_equals(f([525, 305, 238, 401]), [197])\\nTest.assert_equals(f([10, 11, 100]), [4, 9])\\nTest.assert_equals(f([15]), [11, 12, 13, 14, 15])\\nTest.assert_equals(f([123, 321]), [])\\nTest.assert_equals(f([121, 100]), [16, 25, 36, 49, 64, 81, 100])\\n\\nstr_code = \\\"\\\"\\\"\\ndef remainders(lst):\\n    lst = sorted(lst, key=lambda tpl: (-tpl[1], -tpl[0]))\\n    len_lst = len(lst)\\n    len_lst_minus_1 = len_lst - 1\\n    prod = 1\\n    add_on = 1\\n    i = 0\\n    x = 0\\n    y = 0\\n    n = 0\\n    idx = 0\\n    res = 0\\n    # start_i:\\n    if i == len_lst:\\n        pass\\n        # goto end_i;\\n    y = lst[i][1]\\n    prod *= y\\n    i += 1\\n    # goto start_i;\\n    # end_i:\\n    if n > prod:\\n        pass\\n        # goto end;\\n    x, y = lst[idx]\\n    # start_add_on:\\n    if n % y != x:\\n        n += add_on\\n        # goto start_add_on;\\n    add_on *= y\\n    if idx == len_lst_minus_1 and n <= prod:\\n        pass\\n        # goto end;\\n    idx += 1\\n    # goto end_i;\\n    # end:\\n    res = n\\n    return res\\n\\\"\\\"\\\"\\nf = make_fun(str_code)\\nTest.assert_equals(f([(0, 3), (3, 4), (4, 5)]), 39)\\nTest.assert_equals(f([(2, 83), (845, 991), (166, 200)]), 1220766)\\nTest.assert_equals(f([(56, 79), (8, 9), (102, 169), (8, 10), (14, 49)]), 21215348)\\nTest.assert_equals(f([(8, 9), (2, 4), (1, 5), (0, 13), (40, 43), (0, 7),\\n                     (1, 11), (5, 29)]), 145587806)\\n\\nprint('t = {:.3f}'.format(perf_counter() - tic))\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,5,5],\"quality\":[],\"rators\":[\"8PwfYqoDQFThzNtvf\",\"5H9MNfC4DPwxbakTf\"],\"total\":2},\"flags\":0},\"summary\":\"Python language does not have goto keyword. In other languages such statements exist. For example in C++: the goto statement transfers control to the location specified by label. The goto statement must be in the same function as the label it is referring, it may appear before or after the label.\\n\\nOne good use of goto is to exit from a deeply nested routine. F\",\"tags\":[\"logic\",\"strings\"],\"timestamp\":{\"$date\":1600790287866},\"title\":\"Functions with goto Logic\",\"family\":[{\"_id\":\"JiuvoGhEXax8mh35Q\",\"language\":\"python3\"}]}}"]