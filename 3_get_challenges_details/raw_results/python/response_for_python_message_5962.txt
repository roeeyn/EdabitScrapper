a["{\"msg\":\"result\",\"id\":\"1692\",\"result\":{\"_id\":\"brJHwyof9NWpXFgS8\",\"author\":\"BijogFc24\",\"authorId\":\"Nb6LYPoQP6KJZt8mz\",\"code\":\"def bill_count(money, bills):\\n\\t\",\"difficulty\":2.1584158415841586,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"tFH5Qjb2gARXQpcgE\",\"instructions\":\"Create a function `bill_count` that takes two arguments. The first argument is the amount of money the user has and the second is the list of money bills available. Return the **minimum** count of **money bills** required to equal the user money amount.\\n\\n```\\nbill_count(1001, [1, 10, 20])\\n# User Money = €1000 and Bills Available = [€1, €10, €20]\\n\\nbill_count(1001, [1, 10, 20]) -> 51 because 20*50+ 1*1 = 1001\\n# We require 50  20€ bill and 1 1€ bill to equal €1001.\\n# Therefore, Minimum Count Money Bills is 50 + 1 = 51.\\n```\\n\\n### Examples\\n```\\nbill_count(100, [1, 10, 20]) ➞ 5\\n# Because 20 * 5 = 100\\n\\nbill_count(1050, [1, 10, 20, 100]) ➞ 13\\n# Because 100 * 10 + 20 * 2 + 10 * 1 = 1050\\n\\nbill_count(3, [1, 10]) ➞ 3\\n# Because 3 * 1 = 3\\n\\nbill_count(55, [1, 5, 10, 50]) ➞ 2\\n# Because 50 * 1 + 5 * 1 = 55\\n```\\n\\n### Notes\\nMoney amount and bills are all valid.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(bill_count(100, [1, 10, 20]), 5)\\nTest.assert_equals(bill_count(1050, [1, 10, 20, 100]), 13)\\nTest.assert_equals(bill_count(3, [1, 10]), 3)\\nTest.assert_equals(bill_count(555, [1, 10, 100]), 15)\\nTest.assert_equals(bill_count(222, [1, 10, 100]), 6)\\nTest.assert_equals(bill_count(60, [1, 10, 20]), 3)\\nTest.assert_equals(bill_count(55, [1, 5, 10, 50]), 2)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,3,2,2,4,4,3,2,4,2,0,2,2,4,1,2,4,4,4,2,1,2,4,2,1,3,2,3,1,2,5,3,4,1,3,3,2,0,2,0,2,2,3,4,1,2,1,2,4,2,2,2,3,2,2,2,2,0,0,1,3,2,2,2,3,0,3,2,2,1,0,2,3,2,3,3,0,2,3,3,3,2,3,2,1,2,0,1,0,3,3,0,0,2,2,2,2],\"rators\":[\"tAF9Gf6PiGogbZuWs\",\"t9Sz6uBgobfCBJzGL\",\"gb9rvGus2Jv7bjZSs\",\"5dHucvf2qBYyKim7X\",\"8PwfYqoDQFThzNtvf\",\"NaPpyhnXZ2XLtug83\",\"hAcYeP2bPsvZoFBFw\",\"Nb6LYPoQP6KJZt8mz\",\"7g3vZaQXhLpxrajyg\",\"W5TajitmCyxz87zAC\",\"ZNnsMeNkdDhHjSrZb\",\"AasGs8AeX9Lcb9xJn\",\"eHhL37DG7oW3vTcg7\",\"YRstQuthRkFeBiXug\",\"Qq7iNsyjLfeNtwPPQ\",\"ekQh3jzgGLsEMbKo3\",\"W6sCwS23msxRPcBLT\",\"So6PHm74mfJuY2WTs\",\"n2BRY9X8899dcG8Bw\",\"x4kkjxBitX3DfHXtB\",\"mq2W9FwPgf4w75dZi\",\"Phd2FdPjo9BhBfvKh\",\"s5M5RvgqR9BhB9JoC\",\"aEm3Wvj2rFYRL8Lrb\",\"aCNWav8S8Try9RkC6\",\"JQ5uoxA4WZgN6HyJk\",\"PtaiHYXnMwb2rWqQW\",\"zZ43WzxvFu7kaTKZ6\",\"oXJbZzDbT6N2qgqR3\",\"T6xRoSqcSHjvP2Tik\",\"bDpmwo4vm9jHeZAPk\",\"f2BoqyCpgnmjEjLqx\",\"yYxPzFqBgtQ9fsyHM\",\"SGhPxX5bHGL8zZqtt\",\"X4Mcx3NcjzqxMh3mS\",\"HT8tFjNz2KXv23iL5\",\"v7xDCZYGnLQa4eJ2g\",\"jL4y5fTJAMBjhZmko\",\"Ecg4m7srYGgZsb4Ck\",\"3Zceb8GudqAG3onG3\",\"QkbpyExhGA8ErJWhk\",\"6F3Y6ZBAGNDGGTt9B\",\"fxhAoDgz6v7XMCi6J\",\"yTtSCvGPyYna6JuRC\",\"8sNv5PTHa7XQ8bNqR\",\"eAR7sx2AnPoRhJQTi\",\"et4ezbyWYdtQd54X7\",\"YNs8yXoMwZqRJuBg3\",\"DxxNN37iEz7b8t2nf\",\"uLGyRkpKYaMTftLDa\",\"qeqqjviYA9R7uQZEW\",\"kch5ukGsAcRJynWQd\",\"kA7GoyZSmQpCqPKu4\",\"ofFs9wtJDFobG99F9\",\"RErqK2yM94wYyD2hk\",\"Hhvy3EGqWBXt3nFPA\",\"yXuZh6CF6GqKYHzoT\",\"v9KtC8YLbMWmXiW2H\",\"gSFJPsMXnqAog3Q9f\",\"a777e8chPvJkY3tKa\",\"8JyqsSbN2FJXPr3cw\",\"9dgvEreRDYRiwLmYv\",\"gJYuGdkXEWWmGRLzu\",\"iojEnnY9FsMfYzp6f\",\"dzS6WBTMHyFEag6Fp\",\"KZ2xddpM2f9JRaryB\",\"9CoqdidjM9KbeKnHY\",\"E4KGguXaWuR4bd2n7\",\"CRoY655aiRDBDq3uM\",\"yjtdwc2AC4jA2RWtn\",\"cR3ibTMxLyEdDFCHY\",\"HF28xZKSLM9wEuqNg\",\"iS5BrkGLzJyPK7nKt\",\"qD2LrwaDrSdiybLKY\",\"rGpPd6PvpzLaqps4g\",\"mDWNyaaQ9hvPCRzSd\",\"xn7uGNKeAwPEkP9oA\",\"Jqk2uJZZxEv5wZFze\",\"J3upzLHuEwXH7Z2hx\",\"Yp7uvStL97cC9fKkY\",\"DPi9QGLctq2y76KuE\",\"qZQxPQ2kaNKAMesHT\",\"Afnps7TJQuS9sipMb\",\"gXTAie79kiw28tx5u\",\"p8qqFdJ3FSk5x9z3G\",\"ebR9m79RbNzm4cJsJ\",\"RTDx9axf52kxhFjwZ\",\"d8qtzoLB264iP8tdY\",\"oBcs8GLX2ZFLXQy8y\",\"cAP3n5NY64uoMwzRR\",\"QRv96jmNaYsWkxQEG\",\"2u9wghjCydey6aWys\",\"PpJvYybNTnJybKopq\",\"5cwvQQnT66ArTLRjj\",\"HqmxnQJM66Y57twhn\",\"PWgzeK859suojbrRx\",\"GGdmhAvxXhqhhibJN\",\"PC3pLs36zNzpRDSuE\",\"AFfw7cGg83uYk2Miy\",\"gKnWjDjwrJh7MK2df\",\"T6iBEE2jp7f7iEF2P\",\"4Lwjr34ypKNQNQCar\",\"yod5YhKtPqw2GfG9B\",\"suArq5BbSy7gD6xri\",\"2PufnQcsHsfymufX3\"],\"total\":109,\"quality\":[5,5,5,5,5,5,5,4,4]},\"flags\":0},\"summary\":\"Create a function bill_count that takes two arguments. The first argument is the amount of money the user has and the second is the list of money bills available. Return the minimum count of money bills required to equal the user money amount.\\n\\nbill_count(1001, [1, 10, 20])\\nUser Money = €1000 and Bills Available = [€1, €10, €20]\\n\\nbill_count(1001, [1, 10, 20])\",\"tags\":[\"logic\",\"math\",\"numbers\"],\"timestamp\":{\"$date\":1591698898023},\"title\":\"Money Bill Count\",\"quality\":4.777777777777778,\"family\":[{\"_id\":\"P2AasqAqEbYpfoih4\",\"language\":\"cpp\"},{\"_id\":\"4B2hvNaGFvrEgqZEr\",\"language\":\"javascript\"},{\"_id\":\"brJHwyof9NWpXFgS8\",\"language\":\"python3\"},{\"_id\":\"XdBw4o8Sj2K66eHoB\",\"language\":\"ruby\"}]}}"]