a["{\"msg\":\"result\",\"id\":\"943\",\"result\":{\"_id\":\"RcauxLL2SqHYpzZrz\",\"author\":\"Luis Pereira\",\"authorId\":\"aEm3Wvj2rFYRL8Lrb\",\"code\":\"def true_equations(lst):\\n\\t\",\"difficulty\":1.481081081081081,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"w337NQfH8b96aTof2\",\"instructions\":\"In this challenge you will be given a list containing equations, with each equation written as a string. Here's an example:\\n\\n```\\n[\\\"1+1=2\\\", \\\"2+2=3\\\", \\\"5*5=10\\\", \\\"3/3=1\\\"]\\n```\\n\\nIf you do the math, you'll see that the equations `\\\"1+1=2\\\"` and `\\\"3/3=1\\\"` are actually true while `\\\"2+2=3\\\"` and `\\\"5*5=10\\\"` are false nonsense.\\n\\nWrite a function which, given a list of equations as above, returns only the true equations. For instance, for the example above the output should be:\\n\\n```\\n[\\\"1+1=2\\\", \\\"3/3=1\\\"]\\n```\\n\\n### Examples\\n```\\ntrue_equations([\\\"2*2=4\\\"]) ➞ [\\\"2*2=4\\\"]\\n\\ntrue_equations([\\\"1+1=3\\\", \\\"3-1=1\\\"]) ➞ []\\n\\ntrue_equations([\\\"1+1=2\\\", \\\"2+2=3\\\", \\\"5*5=10\\\", \\\"3/3=1\\\"]) ➞ [\\\"1+1=2\\\", \\\"3/3=1\\\"]\\n```\\n\\n### Notes\\n- If all equations are false, return the empty list `[]`, as in the second example.\\n- The equations will only involve the elementary operations: `+`, `-`, `*`, `/`\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(true_equations([\\\"2*2=4\\\"]), [\\\"2*2=4\\\"])\\nTest.assert_equals(true_equations([\\\"1+1=3\\\", \\\"3-1=1\\\"]), [])\\nTest.assert_equals(true_equations([\\\"1+1=2\\\", \\\"2+2=3\\\", \\\"5*5=10\\\", \\\"3/3=1\\\"]), [\\\"1+1=2\\\", \\\"3/3=1\\\"])\\nTest.assert_equals(true_equations([\\\"4/2=2\\\", \\\"8-4=2\\\", \\\"5*5=25\\\", \\\"3/3=14\\\"]), [\\\"4/2=2\\\", \\\"5*5=25\\\"])\\nTest.assert_equals(true_equations([\\\"1-1=0\\\", \\\"2/2=1\\\", \\\"13+9=22\\\", \\\"1*9=9\\\"]), [\\\"1-1=0\\\", \\\"2/2=1\\\", \\\"13+9=22\\\", \\\"1*9=9\\\"])\\nTest.assert_equals(true_equations([\\\"1/41=3\\\", \\\"2+19=14\\\", \\\"13*9=22\\\", \\\"1-9=9\\\"]), [])\\nTest.assert_equals(true_equations([\\\"82/41=2\\\", \\\"21-17=3\\\", \\\"3+99=2\\\", \\\"9*9=81\\\",\\\"7*6=42\\\",\\\"101+10=111\\\",\\\"2*3=5\\\",\\\"143/11=13\\\"]), [\\\"82/41=2\\\",\\\"9*9=81\\\",\\\"7*6=42\\\",\\\"101+10=111\\\",\\\"143/11=13\\\"])\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[1,1,1,1,1,1,2,2,1,2,2,2,2,0,1,2,2,1,1,1,2,1,2,4,1,2,1,1,2,0,2,1,2,1,2,2,1,2,2,0,2,2,2,1,0,1,2,2,2,2,1,0,1,1,2,2,2,5,2,3,1,0,1,1,2,2,2,2,2,1,1,2,1,2,0,2,2,2,2,2,3,1,2,2,2,0,1,0,2,0,3,0,1,2,1,2,2,1,1,2,1,3,2,2,1,2,1,2,2,0,2,0,2,0,1,2,2,0,2,2,1,1,2,2,0,0,1,2,2,2,3,0,2,2,0,0,1,1,0,0,1,1,2,0,3,2,2,2,0,2,1,2,1,2,2,2,2,1,1,1,2,2,1,2,2,2,2,2,2,0,2,1,2,2,2,2,0,2,2,2,3,1,1,1,2],\"rators\":[\"aEm3Wvj2rFYRL8Lrb\",\"9pzFiFK3ANLjQfnr2\",\"MKT7khMBGXzA22ykf\",\"tAF9Gf6PiGogbZuWs\",\"DEDniTrstQYGounXT\",\"Yp7uvStL97cC9fKkY\",\"gJYuGdkXEWWmGRLzu\",\"AasGs8AeX9Lcb9xJn\",\"gb9rvGus2Jv7bjZSs\",\"ZNnsMeNkdDhHjSrZb\",\"jNvegJWCk5HCtEMbK\",\"HiXS9Hofvx4rnqDZz\",\"M8dQuMrEpP8Hc3tHN\",\"vLrq4dEDMM2wd68Dc\",\"yZvzB3qFb8pkHy4dg\",\"8PwfYqoDQFThzNtvf\",\"tDdqXfMYgqZ26Lwvg\",\"8JyqsSbN2FJXPr3cw\",\"mkcf3C3NMxhYZuiLM\",\"cR3ibTMxLyEdDFCHY\",\"Jqk2uJZZxEv5wZFze\",\"s5M5RvgqR9BhB9JoC\",\"JZbBYihgT6m7bKvgc\",\"YaKCTFge7R4AmacxX\",\"2QGRoQn2dRq3scu7k\",\"kYWb8BwpKwunQkxeX\",\"HF28xZKSLM9wEuqNg\",\"Cc2Cgj4MWXZxsTooC\",\"KdNDysEsy2TW5QRJ2\",\"8LfTheFzvicameoz9\",\"hnyhBFWwNCz9mDfSi\",\"N2wnZXkhDH86mgjQ8\",\"dHZqT6h4JMwk5fPC8\",\"2innwjWqxJHo4eRGh\",\"aRqQ42J5zqCmBNd8w\",\"KkZNuFJFE2majZncQ\",\"C9LKGu2g5hSijvDzA\",\"di2hhADLx59Bj4ewM\",\"5cmvoGYHLNmT8n6jP\",\"bCDTKAoS4biDmQ64Y\",\"FEYpu9RWysAgW3XnP\",\"DwetpbChQM4r6Gwah\",\"uiEuENARwFpnNMfFs\",\"mDWNyaaQ9hvPCRzSd\",\"FzxTj4GuujhwpZM7y\",\"bDH2XR5bc4GxcwtBP\",\"aPLuemxzZ5iS57NBQ\",\"AF6LgdKhEdzwgRJom\",\"nfXGHENb5md7m355s\",\"fYXiqjFvkQZqmjgCi\",\"9yHhFzAv5TYxsfmm8\",\"DrkR35NqnP9NDLbq6\",\"J5T8gZqiZXFuFDTQ7\",\"k27vA7iEaLo9YhqQm\",\"4rwxLqLs2mNZNg8NB\",\"WZB5sbuxz3yTde8iP\",\"ahk2qiXKJA753wAJk\",\"yr822PZmmiDDenxpB\",\"RDAijeuBkgHgZfPrG\",\"XrqNzJ2FRG8HnGiR6\",\"n2BRY9X8899dcG8Bw\",\"TR5aWdDKP6iaL6mGK\",\"LWCzZ8mb8gwrRNGfq\",\"PXAcsKkssS2yLyDv2\",\"9bQyb6rW7xfE4vgrR\",\"H9KZi2cjt4FwH7qog\",\"a777e8chPvJkY3tKa\",\"m6D2RuQJwrAK6WB3v\",\"2ptN2mhjFwFcHyPZd\",\"eMuCpJ2spXWkJjWNz\",\"So6PHm74mfJuY2WTs\",\"H4abACFDH5t8CnnyH\",\"ZrKCkX7xxGGZzauFW\",\"3cF6NXq3ZEwdkgSjb\",\"NG8PWBSjsM8mMhQEq\",\"9jss2AGAkQZRTeav6\",\"syRNbbPdLCGXbH2Gy\",\"TwKZ3835iFLog2RuQ\",\"iojEnnY9FsMfYzp6f\",\"u72ipcjbNDSkWX8Gw\",\"hRiMXDZNAzyPd5tpt\",\"Pe8vWpDHRuH9nSGKW\",\"mxX4rH5ELYkdZ2Mbw\",\"9CoqdidjM9KbeKnHY\",\"yjtdwc2AC4jA2RWtn\",\"iS5BrkGLzJyPK7nKt\",\"HqmxnQJM66Y57twhn\",\"NNE5HNRXAkmhrWgyQ\",\"i5iePG5GqhJJ8HEoB\",\"R4SjTgDnpigJYDLyL\",\"ta5CrWnBCRusD2WMo\",\"oBcs8GLX2ZFLXQy8y\",\"GGprTwrkjuccmrQRg\",\"YA7SDhpgEtsqynvNL\",\"Q9afpRu3u8zuWuzLQ\",\"aZp5spFviWcfALzDf\",\"w2HhxvSLmDhaGCAjE\",\"YcCLwitFMAEJSnxAW\",\"zysHJq6ceBrj4e9mM\",\"RehJGBFS6CYiWdjZx\",\"zd9FLSzsGz3evKafy\",\"tpxMgkGSHwBjS95Ta\",\"KLmLKaJPfsYxp42p2\",\"mG8HqKiAQFTdRZthG\",\"PhceyfmFntJcn5Fhf\",\"Kh3Pc2ZRusurLaMyP\",\"hw5macuthRQmKoXkN\",\"gXTAie79kiw28tx5u\",\"JS3hNM3XXkxPdg3yk\",\"kXEfD7xxEyWd7oxxL\",\"QRv96jmNaYsWkxQEG\",\"DPi9QGLctq2y76KuE\",\"kNrnnMxhFZztMTBAX\",\"R2P4K64GKHWiuRtGS\",\"5HCu9Ydd86QgHDRNP\",\"BfwbCTRtW4wG2bsnH\",\"8WpvgSbQciTQWdd8T\",\"dBzwBtRjZqB98DJeB\",\"wRttWTM59y8m5mx7x\",\"4usmYA9Pppx4F8vmF\",\"EMJ6uvBZkie429gdg\",\"J3upzLHuEwXH7Z2hx\",\"NuqGt5u3s7vJ7HBGR\",\"7K2GEb5TZRtSpyyGS\",\"7txFzDQ43vJ7qCY88\",\"dYPkStFnLvAMsHSzZ\",\"cAP3n5NY64uoMwzRR\",\"8fZxjQfuXw5HMSRJM\",\"d8qtzoLB264iP8tdY\",\"KJCDwGkoXh8qtbbKr\",\"g9FyJ8yeT9ic97Qp2\",\"RGMbFMZXJr7DhcAJy\",\"CyzskHGsC6WSmYrLu\",\"dj5AyG5fWP8FdsSmZ\",\"WST3ihLFKaMTYxg9J\",\"NzbRqGWspQnWMoDrF\",\"8BFSTCnoe2QggN64c\",\"qZQxPQ2kaNKAMesHT\",\"qfAabiAPXbupQA8pR\",\"5XiuAqicKD4hBdu63\",\"sHjfbGQGLHE6JR6qu\",\"sKfrD9gjCDHuqLzSk\",\"q7YAahG8D2vWsqXdM\",\"5hQnRWiKkhgKJXNMP\",\"4fjSgcqhQQZM2ZFRP\",\"C2AfMipCicfD58WJ9\",\"DpnYcMphntjsQ96qg\",\"t5sZF4aR7a28Bm56W\",\"EfxwqhYdapX3dMQC2\",\"N9s9bkuJRsHaPxp9m\",\"HuNF3xTBzmatyGSTm\",\"buX4mCQhtXCfBjeno\",\"LQxof8pGabGuWP7Gn\",\"M2DcRBZyaqyZ8u6xQ\",\"Z85ajWfZ4jDPkbvR4\",\"srJ34BaybkQh3qRkM\",\"YRAzEBJoLvSaiPtYx\",\"5S9nX4rKsnCcnv4Cz\",\"GGdmhAvxXhqhhibJN\",\"MXGuntvz3byrP6WJc\",\"eYfPWvZwnJQkHbSTK\",\"utTuvGdmu2sBHWBhQ\",\"yod5YhKtPqw2GfG9B\",\"Ds7L5bksw2QRHjrKL\",\"PWgzeK859suojbrRx\",\"nC4sPB69yYuTSks9T\",\"T2vhHPhRR96hRizq8\",\"CHvzhtXnv8HTbPQ56\",\"q6QsMYNMpPNtmyTeW\",\"wjc4iejpErBhxWwHo\",\"qQQ4hCQpzitmHSkjS\",\"uw8E83imJYpQiiPpP\",\"qAby4AWXmTNeusvg3\",\"xsDyJstYoBZRS8pJH\",\"T6iBEE2jp7f7iEF2P\",\"BJp2WkwLWGHHB5oQW\",\"XD5nmvKQchKezPXhy\",\"u5u2YpHXiNgzDNJdX\",\"AFfw7cGg83uYk2Miy\",\"ey3CASd6Je5LEJzfB\",\"66a9xX73nmTEuKs9k\",\"M6fxKEh6am7YajPiT\",\"BrTDhPJcACL2bsrpJ\",\"Wpn95NqWxncQrwNgz\",\"PC3pLs36zNzpRDSuE\",\"AJexRBN9cYQmqvYu6\",\"GTKsdeEihE636Le9i\",\"2HfNkb2SoqdyjKW3o\",\"c2q7mY39z5JPEMCaM\",\"mvJBakQ35CWAnbbEZ\",\"2PufnQcsHsfymufX3\",\"M2gFMJkocQSY6bsFR\",\"X4rzfxGgxx6CS7Bpz\",\"eHcgvkTGsH7ZziqBo\",\"K6MfKMytoJJuSGewP\",\"ghMkPtdFCpM6w8nax\",\"9Ly8afdtofp8DXzrt\",\"R6YxHWAiLgKwy5YvC\",\"rrSC943cCKNG48sH4\",\"RoGGD5cpHb4ftdLDv\",\"pduNK68oazqQTtbLp\",\"hR7GMiqGap4CzEWSy\",\"2iFe3EHEH2YdhSKrs\",\"sbJcFfQjQ59Wfg4Cd\",\"Afnps7TJQuS9sipMb\",\"JhX7jvtpwNyxcc39m\",\"4Lwjr34ypKNQNQCar\",\"4TmgHkn5vqyHK3sYC\",\"T6Rm8mREPMZSftzrC\",\"d9LBRxvADNBB5QJMB\",\"dzS6WBTMHyFEag6Fp\",\"uGuS9YRXW2nj4p6zf\",\"yAouD3PxzED8a4gap\",\"suArq5BbSy7gD6xri\",\"hpT9yYe5R45poHrYR\",\"3LiSLdtN58n46NEqg\",\"Qyfyyw6oC4EHAndzo\",\"8hptWvPBYBjj8vpbu\",\"rCrbqMiaGPgHYTNxu\",\"5QN8R22z43SrwoHDz\",\"Wi4H6ayKsNDWWQCG5\",\"E2hpke7mHxAWsw5t9\",\"vAbK8sCfKyFC78HYg\",\"8uiLiJcmWxWe6qw65\"],\"total\":249,\"quality\":[5,3,3,4,5,5,5,4,5,5,5,5,5,4,4,5,5,4,5,5,5,5,5,5,5,5,5,5,5,5,4,5,5,5,4,5,5,5,5,5,5,5,5,5]},\"flags\":0},\"summary\":\"In this challenge you will be given a list containing equations, with each equation written as a string. Here's an example:\\n\\n[\\\"1+1=2\\\", \\\"2+2=3\\\", \\\"5*5=10\\\", \\\"3/3=1\\\"]\\n\\nIf you do the math, you'll see that the equations \\\"1+1=2\\\" and \\\"3/3=1\\\" are actually true while \\\"2+2=3\\\" and \\\"5*5=10\\\" are false nonsense.\\n\\nWrite a function which, given a list of equations as above, re\",\"tags\":[\"math\",\"strings\",\"language_fundamentals\",\"algebra\"],\"timestamp\":{\"$date\":1586735944036},\"title\":\"Find the True Equations\",\"quality\":4.75,\"family\":[{\"_id\":\"hr6ouvw2L8SkRzPBJ\",\"language\":\"cpp\"},{\"_id\":\"LaHKrCtXnpJAK7G9h\",\"language\":\"javascript\"},{\"_id\":\"RcauxLL2SqHYpzZrz\",\"language\":\"python3\"},{\"_id\":\"DwdT9ocZLemZvrpkK\",\"language\":\"ruby\"}]}}"]