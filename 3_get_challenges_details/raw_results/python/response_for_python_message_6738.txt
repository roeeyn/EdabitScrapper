a["{\"msg\":\"result\",\"id\":\"2077\",\"result\":{\"_id\":\"XKSwuu4ddzBvkXjvf\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"def sentence_primeness(sentence):\\n\\t\",\"difficulty\":2.90625,\"isHidden\":false,\"familyId\":\"8PozQrjPcyHtbgDmg\",\"instructions\":\"A word value can be established summing up all the numeric values of every single character (excluding spaces and punctuation): a value from 1 (\\\"a\\\") to 26 (\\\"z\\\") is given to letters, while numbers have their literal values, from 0 to 9. The sentence value is the sum of the values of the words.\\n\\n```\\nsentence = \\\"ABC ! abc ... @ 123\\\"\\n# Remove spaces, punctuation and any symbol.\\n\\nsentence = [\\\"ABC\\\", \\\"abc\\\", \\\"123\\\"]\\n\\nwords values = \\\"ABC\\\" = 1+2+3 = 6 | \\\"abc\\\" = 1+2+3 = 6 | \\\"123\\\" = 1+2+3 = 6\\n\\nsentence value = 6 + 6 + 6 = 18\\n```\\n\\nGiven a string `sentence` implement a function that returns:\\n\\n- `Prime Sentence` if the original sentence value is a prime.\\n\\n- `Almost Prime Sentence (xxx)` if the sentence value is not a prime but, after a single removal of any of the words the new sentence value is a prime (see example #2 for a clearer explanation), with _xxx_ being the word removed. If more than a word can be removed to obtain a prime value, return the first encountered in the original sentence.\\n\\n- `Composite Sentence` if the sentence value is not a prime and more than one removal is necessary to make the new sentence value (or if none is possible).\\n\\nLetters values are case insensitive (\\\"aZ\\\" = \\\"Az\\\" = 1 + 26 = 27), while numbers are treated as words (\\\"123\\\" = 1+2+3 = 6).\\n\\n### Examples\\n```\\nsentence_primeness(\\\"Help me!\\\") ➞ \\\"Prime Sentence\\\"\\n# \\\"Help\\\" + \\\"me\\\" = 41 + 18 = 59 (prime)\\n\\nsentence_primeness(\\\"42 is THE aNsWeR...\\\") ➞ \\\"Almost Prime Sentence (aNsWeR)\\n# \\\"42\\\" + \\\"is\\\" + \\\"THE\\\" + \\\"aNsWeR\\\" = 6 + 28 + 33 + 80 = 147 (not prime)\\n# Without \\\"42\\\" new value is 141\\n# Without \\\"is\\\" new value is 119\\n# Without \\\"THE\\\" new value is 114\\n# Without \\\"aNsWeR\\\" new value is 67 (prime!)\\n# If the word \\\"aNsWeR\\\" is removed from sentence the new value is a prime.\\n\\nsentence_primeness(\\\"Did you smoke?\\\") ➞ \\\"Composite Sentence\\\"\\n# \\\"Did\\\" + \\\"you\\\" + \\\"smoke\\\" = 17 + 61 + 63 = 141 (not prime)\\n# Without \\\"Did\\\" new value is 124\\n# Without \\\"you\\\" new value is 80\\n# Without \\\"smoke\\\" new value is 78\\n# No single removals make the new sentence value a prime.\\n```\\n\\n### Notes\\n- Only letters and digits can be part of the sentence.\\n- If it's an Almost Prime Sentence, the removed word between the brackets must maintain the same capitalization format found in the original sentence (see example #2).\\n- The sentence is Almost Prime if just a single word can be removed to make value a prime, no multiple removals allowed.\\n- Remember the rule for numbers: \\\"10\\\" is a word, so its value is 1+0 and not 10.\",\"lab\":\"Test.assert_equals(sentence_primeness(\\\"Help me!\\\"), \\\"Prime Sentence\\\", \\\"Example #1\\\")\\nTest.assert_equals(sentence_primeness(\\\"42 is THE aNsWeR...\\\"), \\\"Almost Prime Sentence (aNsWeR)\\\", \\\"Example #2\\\")\\nTest.assert_equals(sentence_primeness(\\\"Did you Smoke?\\\"), \\\"Composite Sentence\\\", \\\"Example #3\\\")\\nTest.assert_equals(sentence_primeness(\\\"She SellS SeaShellS by the SeaShore\\\"), \\\"Prime Sentence\\\")\\nTest.assert_equals(sentence_primeness(\\\"Lorem. Ipsum. Dolor. Sit. Amet.\\\"), \\\"Almost Prime Sentence (Lorem)\\\")\\nTest.assert_equals(sentence_primeness(\\\"three fASt hUNgry aniMALs -aNd- 3 slow faTTy kiDS\\\"), \\\"Almost Prime Sentence (aniMALs)\\\")\\nTest.assert_equals(sentence_primeness(\\\"This is a 'Prime' Sentence\\\"), \\\"Composite Sentence\\\")\\nTest.assert_equals(sentence_primeness(\\\"this is a composite sentence\\\"), \\\"Almost Prime Sentence (this)\\\")\\nTest.assert_equals(sentence_primeness(\\\"Primes, PRIMES EVERYWHERE!\\\"), \\\"Composite Sentence\\\")\\nTest.assert_equals(sentence_primeness(\\\"10 test cases are enough, this is the last one!\\\"), \\\"Prime Sentence\\\")\",\"language\":\"python3\",\"summary\":\"A word value can be established summing up all the numeric values of every single character (excluding spaces and punctuation): a value from 1 (\\\"a\\\") to 26 (\\\"z\\\") is given to letters, while numbers have their literal values, from 0 to 9. The sentence value is the sum of the values of the words.\\n\\nsentence = \\\"ABC ! abc ... @ 123\\\"\\nRemove spaces, punctuation and any\",\"tags\":[\"strings\",\"numbers\",\"validation\",\"scope\"],\"timestamp\":{\"$date\":1571886635547},\"title\":\"Sentence Primeness\",\"stats\":{\"completed\":{\"total\":71,\"ratings\":[2,2,2,2,2,2,3,2,4,2,2,3,3,3,5,3,3,2,2,2,2,2,1,2,4,5,4,4,2,3,3,3,4,1,2,4,3,3,5,3,4,3,4,5,2,4,2,2,3,4,4,5,3,4,1,4,4,4,1,0,4,3,3,2],\"rators\":[\"gb9rvGus2Jv7bjZSs\",\"tAF9Gf6PiGogbZuWs\",\"uJQo8b5SYpHAcN8nK\",\"6n3Pb8mbxebuhjz7x\",\"8JyqsSbN2FJXPr3cw\",\"s5M5RvgqR9BhB9JoC\",\"HqmxnQJM66Y57twhn\",\"EXZfPb8YH28EL8Rh9\",\"eXW8reZCCZHQzJjQi\",\"FgkYtHLxeD8pETJ8T\",\"C4QntmkYtB89GNtpd\",\"zEwSoioYyEynzxLij\",\"ySRnygsLwGGsmZhfa\",\"ydEdzuCCZt4yny9Rq\",\"t6bXCX76smm7B3bEN\",\"YQxo25GTwFZ8GaN6u\",\"CtECTBENRQP5YHFJS\",\"fupytFiBkMtthfKat\",\"YSMQTa4iXNoq76Rsx\",\"PqEKjCDkJtYoYuZfj\",\"tALtFZAf3kgELgon9\",\"MNgYsvK6HfLRb8wAz\",\"8PwfYqoDQFThzNtvf\",\"Jqk2uJZZxEv5wZFze\",\"PT5pu7kJsgp9TDNGv\",\"2innwjWqxJHo4eRGh\",\"Yp7uvStL97cC9fKkY\",\"3LiSLdtN58n46NEqg\",\"sWX2tYC7J4m2GkcRC\",\"fBqQjriC4QEtFNxFe\",\"JKb5rhL6DKcCAypF9\",\"aEm3Wvj2rFYRL8Lrb\",\"yZvzB3qFb8pkHy4dg\",\"wZoxzQDbso9SMAPkY\",\"K5vETaccLsPyu8sbd\",\"aCNWav8S8Try9RkC6\",\"AasGs8AeX9Lcb9xJn\",\"mDWNyaaQ9hvPCRzSd\",\"daFMtxYmCNMQ9HNsJ\",\"PytNZK9mNiRiZxPrm\",\"fznzd3qnvtbFkkizz\",\"jfb9j3YRnbxdZSsYS\",\"ZNnsMeNkdDhHjSrZb\",\"YRstQuthRkFeBiXug\",\"5dHucvf2qBYyKim7X\",\"YLtspA8ec6ntcoMMf\",\"n2BRY9X8899dcG8Bw\",\"R4SjTgDnpigJYDLyL\",\"xn7uGNKeAwPEkP9oA\",\"S6Zd8mPuvhuh3MFRt\",\"iS5BrkGLzJyPK7nKt\",\"HF28xZKSLM9wEuqNg\",\"buX4mCQhtXCfBjeno\",\"aFYzioHvZPvPaunsg\",\"8sNv5PTHa7XQ8bNqR\",\"iojEnnY9FsMfYzp6f\",\"J3upzLHuEwXH7Z2hx\",\"QRv96jmNaYsWkxQEG\",\"gJYuGdkXEWWmGRLzu\",\"yjtdwc2AC4jA2RWtn\",\"T6iBEE2jp7f7iEF2P\",\"2PufnQcsHsfymufX3\",\"DPi9QGLctq2y76KuE\",\"qZQxPQ2kaNKAMesHT\",\"GTKsdeEihE636Le9i\"],\"quality\":[4,5,5,1,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":4.166666666666667,\"family\":[{\"_id\":\"g8hMSy4tE3bn3ZTNE\",\"language\":\"cpp\"},{\"_id\":\"9KBTmdoTxuA8eMxP9\",\"language\":\"csharp\"},{\"_id\":\"jH4wEAk4gXZommdfo\",\"language\":\"java\"},{\"_id\":\"9cE48rX6wTZqBWeia\",\"language\":\"javascript\"},{\"_id\":\"XKSwuu4ddzBvkXjvf\",\"language\":\"python3\"},{\"_id\":\"wvkAh6dW8TjgXmN37\",\"language\":\"ruby\"},{\"_id\":\"22zFrigLPpuGEPprt\",\"language\":\"swift\"}]}}"]