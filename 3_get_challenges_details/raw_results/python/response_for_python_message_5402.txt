a["{\"msg\":\"result\",\"id\":\"1414\",\"result\":{\"_id\":\"fsNMnyjMkErQtvpMW\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def holey_sort(lst):\\n\\t\",\"difficulty\":2.043956043956044,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"SbwcTsmQjAa7xYDju\",\"instructions\":\"*What do the numbers 4, 6, 8, 9 and 0 have in common? They all have holes in them! Notice how the number 8 contains not one, but two holes.*\\n\\nGiven a list of numbers, sort the list in accordance to how many holes occur in the number. It should be sorted in **ascending order**.\\n\\n### Examples\\n```\\nholey_sort([44, 4, 444, 4444]) ➞ [4, 44, 444, 4444]\\n\\nholey_sort([100, 888, 1660, 11]) ➞ [11, 100, 1660, 888]\\n\\nholey_sort([8, 121, 41, 66]) ➞ [121, 41, 8, 66]\\n```\\n\\n### Notes\\n- If two numbers have the same number of holes in them, sort them by the order they first appeared in.\\n- Despite the number 0 appearing to have *two holes* in certain fonts, it will only have **one hole** for the purposes of this challenge.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(holey_sort([44, 4, 444, 4444]), [4, 44, 444, 4444])\\nTest.assert_equals(holey_sort([100, 888, 1660, 11]), [11, 100, 1660, 888])\\nTest.assert_equals(holey_sort([8, 121, 41, 66]), [121, 41, 8, 66])\\nTest.assert_equals(holey_sort([8866609, 7446374, 8034913, 8192048]), [7446374, 8034913, 8192048, 8866609])\\nTest.assert_equals(holey_sort([3679331, 1237297, 7317174, 5541133, 2319810, 2012006, 4559290, 3135855, 5095791]), [1237297, 7317174, 5541133, 3679331, 3135855, 5095791, 2319810, 2012006, 4559290])\\nTest.assert_equals(holey_sort([5680732, 6544345]), [5680732, 6544345])\\nTest.assert_equals(holey_sort([3867920, 2906311, 2341998, 1308265, 3431794, 4060483, 2562324, 5058728, 3297499, 3858981]), [2562324, 2906311, 3431794, 1308265, 3297499, 3867920, 2341998, 5058728, 4060483, 3858981])\\nTest.assert_equals(holey_sort([7272843, 1574284]), [7272843, 1574284])\\nTest.assert_equals(holey_sort([7055630, 8250202, 1581006, 3814642, 3352271, 7739043, 4500737]), [3352271, 7055630, 7739043, 4500737, 8250202, 1581006, 3814642])\\nTest.assert_equals(holey_sort([932439, 7213398, 9921879, 9896887, 4455707, 1862761, 5291632, 8636466, 1967626, 4674768]), [5291632, 932439, 7213398, 4455707, 1862761, 1967626, 9921879, 4674768, 8636466, 9896887])\\nTest.assert_equals(holey_sort([7626146, 361326, 3169396, 2317924, 3787053]), [361326, 2317924, 3787053, 7626146, 3169396])\\nTest.assert_equals(holey_sort([7293109, 7258402, 8616767]), [7293109, 7258402, 8616767])\\nTest.assert_equals(holey_sort([5438273, 3148430, 9589797, 9189167, 1512456, 6005623]), [1512456, 5438273, 6005623, 3148430, 9589797, 9189167])\\nTest.assert_equals(holey_sort([8100934, 8976162, 5564876, 8508778, 9372523, 3617577, 1460454]), [9372523, 3617577, 8976162, 5564876, 1460454, 8100934, 8508778])\\nTest.assert_equals(holey_sort([8919783, 497415, 3445236, 8856520, 8740983, 8039621, 6826990]), [497415, 3445236, 8039621, 8919783, 8856520, 8740983, 6826990])\\nTest.assert_equals(holey_sort([1382961, 3848104, 698796, 1937294]), [1937294, 1382961, 698796, 3848104])\\nTest.assert_equals(holey_sort([4643506, 3573605, 8635658, 5421175, 8172284]), [5421175, 3573605, 4643506, 8172284, 8635658])\\nTest.assert_equals(holey_sort([1267000, 5109729, 9048778]), [5109729, 1267000, 9048778])\\nTest.assert_equals(holey_sort([3264283, 1784307, 4846052, 3994463, 2762047]), [2762047, 3264283, 1784307, 3994463, 4846052])\\nTest.assert_equals(holey_sort([7972695, 4553534, 657075, 7634858, 7256312, 8405970, 8541506, 2103525, 4996663, 7966014]), [7256312, 2103525, 4553534, 657075, 7972695, 8541506, 7966014, 7634858, 8405970, 4996663])\\nTest.assert_equals(holey_sort([5120580, 9067109, 465134, 6017129, 9841915, 8172139, 1703343, 9354143]), [1703343, 465134, 6017129, 8172139, 9354143, 5120580, 9067109, 9841915])\\nTest.assert_equals(holey_sort([941843, 691454, 9117576, 3233877, 7051186, 9127394, 4977370, 10665, 9952983]), [9117576, 3233877, 9127394, 4977370, 10665, 691454, 7051186, 941843, 9952983])\\nTest.assert_equals(holey_sort([8812775, 3541663, 6419753]), [3541663, 6419753, 8812775])\\nTest.assert_equals(holey_sort([9279101, 1999417, 2619824, 8326952, 3619356, 175745, 8815564, 7155122, 446604]), [7155122, 175745, 9279101, 3619356, 1999417, 8326952, 2619824, 8815564, 446604])\\nTest.assert_equals(holey_sort([2784997, 7829319, 9790303, 7402739, 6221072, 3662653, 9524591, 4647384]), [6221072, 7402739, 3662653, 9524591, 7829319, 9790303, 2784997, 4647384])\\nTest.assert_equals(holey_sort([7121439, 1689070, 526049, 4394589, 4957888, 4298314, 677740, 6351683, 2681477, 9120269]), [7121439, 677740, 526049, 6351683, 2681477, 9120269, 4298314, 1689070, 4394589, 4957888])\\nTest.assert_equals(holey_sort([8054151, 1711796, 2357886, 175960, 7564374, 4324573, 9941142, 3584054, 4557078]), [1711796, 4324573, 175960, 7564374, 8054151, 9941142, 4557078, 2357886, 3584054])\\nTest.assert_equals(holey_sort([2696159, 1412439, 227003, 7121203, 3769512, 1699837, 464887, 4496125, 9876958, 4420612]), [7121203, 227003, 3769512, 1412439, 2696159, 4496125, 4420612, 1699837, 464887, 9876958])\\nTest.assert_equals(holey_sort([7198864, 1613508, 4637240, 1537472, 3813579, 6167704, 5525896, 2852667, 7537786]), [1537472, 3813579, 7537786, 1613508, 4637240, 6167704, 5525896, 2852667, 7198864])\\nTest.assert_equals(holey_sort([6591656, 2710706, 8188755, 1212769, 8271488, 6096692, 1461326, 9277849, 2168713, 5940551]), [1212769, 2710706, 1461326, 2168713, 5940551, 6591656, 9277849, 8188755, 6096692, 8271488])\\nTest.assert_equals(holey_sort([7944781, 7779878, 8013101, 3554869]), [8013101, 7944781, 7779878, 3554869])\\nTest.assert_equals(holey_sort([3956794, 6060721, 3245361, 135212, 1623030, 1944265, 6525516]), [135212, 3245361, 6525516, 1623030, 3956794, 6060721, 1944265])\\nTest.assert_equals(holey_sort([5951179, 4432698, 4254021, 2873537, 3700900]), [5951179, 2873537, 4254021, 3700900, 4432698])\\nTest.assert_equals(holey_sort([2441746, 8181466, 9617745, 6822514, 5949156, 6046499, 7095403, 7362797, 8037395]), [7362797, 9617745, 2441746, 6822514, 5949156, 7095403, 8037395, 8181466, 6046499])\\nTest.assert_equals(holey_sort([1080137, 2411024, 7636253, 7645593, 9685425, 8167800, 9617262]), [7636253, 2411024, 7645593, 9617262, 1080137, 9685425, 8167800])\\nTest.assert_equals(holey_sort([9586914, 9757188]), [9757188, 9586914])\\nTest.assert_equals(holey_sort([2575433, 1748459, 8911261, 7058391, 177087, 8909450]), [2575433, 177087, 8911261, 7058391, 1748459, 8909450])\\nTest.assert_equals(holey_sort([8518560, 1370023, 9745099, 4730154, 7819526, 1790724, 5793209, 6272519]), [1370023, 6272519, 4730154, 1790724, 5793209, 7819526, 9745099, 8518560])\\nTest.assert_equals(holey_sort([1542972, 7703849, 8795260, 1905838]), [1542972, 7703849, 8795260, 1905838])\\nTest.assert_equals(holey_sort([4639825, 6765828, 539320, 663441, 17915, 4572556, 5296974, 2032053, 3024225, 2419916]), [17915, 539320, 4572556, 2032053, 3024225, 663441, 5296974, 2419916, 4639825, 6765828])\\nTest.assert_equals(holey_sort([7191218, 3872992, 924499, 790171, 2454859, 3364830, 1985596]), [790171, 7191218, 3872992, 924499, 2454859, 3364830, 1985596])\\nTest.assert_equals(holey_sort([6970584, 9778427]), [9778427, 6970584])\\nTest.assert_equals(holey_sort([424298, 9242439, 3514235, 7260397]), [3514235, 7260397, 9242439, 424298])\\nTest.assert_equals(holey_sort([7961606, 1632123, 3678883]), [1632123, 7961606, 3678883])\\nTest.assert_equals(holey_sort([2949060, 2607557, 1504697, 7691234, 8995868, 1959945, 6559300, 1828996, 1702938, 277239]), [277239, 2607557, 7691234, 1504697, 1959945, 6559300, 1702938, 2949060, 1828996, 8995868])\\nTest.assert_equals(holey_sort([8914533, 1799140]), [8914533, 1799140])\\nTest.assert_equals(holey_sort([6301196, 8370611, 9646281, 2414320]), [2414320, 6301196, 8370611, 9646281])\\nTest.assert_equals(holey_sort([1040370, 6634777, 6000439]), [6634777, 1040370, 6000439])\\nTest.assert_equals(holey_sort([5622459, 228574, 9494671, 2336417, 9581888, 1877343, 4679775]), [2336417, 5622459, 228574, 1877343, 4679775, 9494671, 9581888])\\nTest.assert_equals(holey_sort([9765218, 7709544, 9134773, 2253923, 2071957, 9958843, 179448, 7877523, 9629471]), [2253923, 9134773, 2071957, 7877523, 9765218, 7709544, 9629471, 179448, 9958843])\\nTest.assert_equals(holey_sort([702777, 2429508, 5755501, 6562253, 4406013, 4260889, 8951265, 6977758]), [702777, 5755501, 6562253, 8951265, 6977758, 2429508, 4406013, 4260889])\\nTest.assert_equals(holey_sort([3509388, 4604267, 7371062, 4331229]), [7371062, 4331229, 4604267, 3509388])\\nTest.assert_equals(holey_sort([8215004, 4111182, 5348044, 6645409, 6659728, 8132875, 2495874]), [4111182, 8132875, 8215004, 6659728, 2495874, 5348044, 6645409])\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,2,3,1,2,1,3,3,2,2,4,1,3,0,2,2,1,3,1,2,3,3,2,3,3,2,2,2,1,3,5,1,3,1,3,1,3,2,0,1,2,0,3,3,2,2,3,3,2,0,0,3,2,2,1,3,0,3,3,2,0,3,3,2,3,1,0,1,2,1,3,3,2,2,3,3,2,2,3,1,2,2,3,1,3,2],\"rators\":[\"PXAcsKkssS2yLyDv2\",\"tAF9Gf6PiGogbZuWs\",\"kQH5b8MXJunh84Czq\",\"gb9rvGus2Jv7bjZSs\",\"AasGs8AeX9Lcb9xJn\",\"2fxapKr8XGdNeaKi2\",\"kfG9deramoXyqrP5L\",\"8PwfYqoDQFThzNtvf\",\"8JyqsSbN2FJXPr3cw\",\"C4QntmkYtB89GNtpd\",\"aCNWav8S8Try9RkC6\",\"sJWTa7iWeRoRtqJ8N\",\"4CFzv558qbGcpQwc4\",\"v9KtC8YLbMWmXiW2H\",\"yZvzB3qFb8pkHy4dg\",\"s5M5RvgqR9BhB9JoC\",\"aEm3Wvj2rFYRL8Lrb\",\"n2BRY9X8899dcG8Bw\",\"ZNnsMeNkdDhHjSrZb\",\"nQRzZKeDKuLRf9chX\",\"YRstQuthRkFeBiXug\",\"2innwjWqxJHo4eRGh\",\"ywk3XGvcmpTgRxwZa\",\"kYWb8BwpKwunQkxeX\",\"EjbDDFRECrzQDkzrX\",\"Yp7uvStL97cC9fKkY\",\"gJYuGdkXEWWmGRLzu\",\"KdNDysEsy2TW5QRJ2\",\"55RQznnuTGpsj3EXd\",\"hnyhBFWwNCz9mDfSi\",\"J5T8gZqiZXFuFDTQ7\",\"4rwxLqLs2mNZNg8NB\",\"PytNZK9mNiRiZxPrm\",\"dzS6WBTMHyFEag6Fp\",\"iojEnnY9FsMfYzp6f\",\"Ecg4m7srYGgZsb4Ck\",\"DEDniTrstQYGounXT\",\"KZ2xddpM2f9JRaryB\",\"HqmxnQJM66Y57twhn\",\"yjtdwc2AC4jA2RWtn\",\"zZDaXBxMzTCBhNkgL\",\"hRiMXDZNAzyPd5tpt\",\"ZrKCkX7xxGGZzauFW\",\"NfMJuiBk6FN5Jc6ow\",\"JA8Xsk3X9Rrb3wdMG\",\"9CoqdidjM9KbeKnHY\",\"xn7uGNKeAwPEkP9oA\",\"KJCDwGkoXh8qtbbKr\",\"DPi9QGLctq2y76KuE\",\"dkcmCKwqApX5jBggc\",\"J3upzLHuEwXH7Z2hx\",\"6MjSiiBLPcvXbXcaZ\",\"JS3hNM3XXkxPdg3yk\",\"gXTAie79kiw28tx5u\",\"oBcs8GLX2ZFLXQy8y\",\"QRv96jmNaYsWkxQEG\",\"buX4mCQhtXCfBjeno\",\"kEkNyqFARK9YBrhRx\",\"gSFJPsMXnqAog3Q9f\",\"jsQJLi9LDjpXKFP28\",\"Jqk2uJZZxEv5wZFze\",\"eYfPWvZwnJQkHbSTK\",\"CHvzhtXnv8HTbPQ56\",\"q2tzvkrLASvSjkek9\",\"GGdmhAvxXhqhhibJN\",\"3LiSLdtN58n46NEqg\",\"2QziknsznNeMPRh3g\",\"srJ34BaybkQh3qRkM\",\"qAby4AWXmTNeusvg3\",\"yyo6YLQN2of6fxp49\",\"FEYpu9RWysAgW3XnP\",\"Wpn95NqWxncQrwNgz\",\"fznzd3qnvtbFkkizz\",\"YcCLwitFMAEJSnxAW\",\"2PufnQcsHsfymufX3\",\"XujK3rHd3JcM9TLJy\",\"PC3pLs36zNzpRDSuE\",\"8BFSTCnoe2QggN64c\",\"nc7bRhkxgKyqusYe3\",\"eHcgvkTGsH7ZziqBo\",\"K6MfKMytoJJuSGewP\",\"4Lwjr34ypKNQNQCar\",\"fbr22rabEJMfBp7vD\",\"T6iBEE2jp7f7iEF2P\",\"8nE8QHnFYsHCFebte\",\"ctbThYbufFCYbRK4f\",\"BrTDhPJcACL2bsrpJ\",\"u5u2YpHXiNgzDNJdX\",\"MpfytGFYF77emJ3cT\",\"gKnWjDjwrJh7MK2df\",\"PWgzeK859suojbrRx\",\"jCjCvyhqhpebkJn34\",\"8sNv5PTHa7XQ8bNqR\",\"jWbd7SYDzLPjc9EDh\",\"AQSqD9oNv2uPfxZCR\",\"yod5YhKtPqw2GfG9B\",\"suArq5BbSy7gD6xri\",\"sbJcFfQjQ59Wfg4Cd\",\"ey3CASd6Je5LEJzfB\",\"nkH3HfJXLMNcBMM79\",\"mw9464S5dnenqzvpm\",\"Ds7L5bksw2QRHjrKL\",\"5HCu9Ydd86QgHDRNP\",\"KfGmizjwhtMAaXspt\",\"wrL4iX2CCSqDCCty3\",\"MKT7khMBGXzA22ykf\",\"n2qKKxomPnb4zez5M\",\"Qyfyyw6oC4EHAndzo\",\"mvJBakQ35CWAnbbEZ\"],\"total\":118,\"quality\":[4,5,3,5,5,5,5,3,5,5,5,5,3,5,5,5,5,5,5,5,5,5,5]},\"flags\":0},\"summary\":\"What do the numbers 4, 6, 8, 9 and 0 have in common? They all have holes in them! Notice how the number 8 contains not one, but two holes.\\n\\nGiven a list of numbers, sort the list in accordance to how many holes occur in the number. It should be sorted in ascending order.\\n\\nExamples\\nholey_sort([44, 4, 444, 4444]) ➞ [4, 44, 444, 4444]\\n\\nholey_sort([100, 888, 1660,\",\"tags\":[\"sorting\",\"numbers\"],\"timestamp\":{\"$date\":1584045504585},\"title\":\"Holey Sort\",\"quality\":4.695652173913044,\"family\":[{\"_id\":\"WdFqAPi5rYBceYdbR\",\"language\":\"cpp\"},{\"_id\":\"sdxaSqNqcuDRfnMHs\",\"language\":\"javascript\"},{\"_id\":\"fsNMnyjMkErQtvpMW\",\"language\":\"python3\"},{\"_id\":\"9YhqspDxeDiGso48g\",\"language\":\"ruby\"}]}}"]