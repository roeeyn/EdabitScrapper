a["{\"msg\":\"result\",\"id\":\"1750\",\"result\":{\"_id\":\"QitxdAHfkav9snvoP\",\"author\":\"caloizou\",\"authorId\":\"pDvFWMCD9fQwoBPcu\",\"code\":\"def defined_adder(num):\\n\\treturn\\n\\nundefined_adder = lambda num: None\\n\\n# ------ See bonus task for code below!\\n# def defined_undefined_adder(num):\\n\\t\",\"difficulty\":2.282051282051282,\"editorId\":\"pDvFWMCD9fQwoBPcu\",\"familyId\":\"PKdcokEifRtQ4nLc3\",\"instructions\":\"Create the function `defined_adder` which takes a number `num` (integer or float) as an argument, and returns another function. This returned function should take another number (integer or float) as an argument and add the original `num` to that number, then return it.\\n\\nAlso create the function `undefined_adder`, which is an exact replica of `defined_adder`, except in the format of a `lambda` (undefined function).\\n\\n### Examples\\n```\\nadd3 = defined_adder(3)\\nadd3(5) ➞ 8            (3 + 5 = 8)\\nadd3(2) ➞ 5            (3 + 2 = 5)\\n\\nadd2_half = undefined_adder(2.5)\\nadd2_half(8) ➞ 10.5     (2.5 + 8 = 10)\\nadd2_half(2.5) ➞ 5       (2.5 + 2.5 = 5)\\n\\n-- BONUS (not necessary for challenge completion)\\nadd_minus3 = defined_undefined_adder(-3)\\nadd_minus3(-2) ➞ -5            (-3 + -2 = -5)\\nadd_minus3(8) ➞ 5               (-3 + 8 = 5)\\n```\\n\\n### Notes\\n- The numbers passed as arguments can be any real number.\\n- In the `defined_adder` function, you must only use defined functions.\\n- In the `undefined_adder` function, you must only use undefined (lambda) functions.\\n- There are three different ways of completing this challenge. For a bonus, write the last (code commented out in `Code` tab). Note: all functions should be different from one-another.\\n- To complete this challenge, you need only create the `defined_adder` and `undefined_adder` functions. If you want to ignore the bonus challenge, please do.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(defined_adder.__name__, \\\"defined_adder\\\", \\\"\\\\nFuntion 'defined_adder' must be a defined function\\\")\\nTest.assert_not_equals(defined_adder(1).__name__, \\\"<lambda>\\\", \\\"\\\\nFunction 'defined_adder' must not contain / return an undefined (lambda) function\\\")\\nTest.assert_equals(undefined_adder.__name__, \\\"<lambda>\\\", \\\"\\\\nFuntion 'undefined_adder' must be an undefined (lambda) function\\\")\\nTest.assert_equals(undefined_adder(1).__name__, \\\"<lambda>\\\", \\\"\\\\nFunction 'undefined_adder' must contain / return an undefined (lambda) function\\\")\\n\\n_min, _max = -5, 6\\n\\nfor adder_function_name in ('defined_adder', 'undefined_adder'):\\n\\tadder_function = eval(adder_function_name)\\n\\tadders = [(k,adder_function(k)) for k in range(_min, _max)] +\\\\\\n\\t\\t[(k+.5, adder_function(k+.5)) for k in range(_min, _max)]\\n\\tnumbers = range(_min, _max)\\n\\n\\tfor (i, adder) in adders:\\n\\t\\tfor number in numbers:\\n\\t\\t\\tTest.assert_equals(adder(number), i+number, \\\\\\n\\t\\t\\t\\\"\\\\n{}({})({}) should equal {}\\\\n\\\".format(adder_function_name,  i, number, i+number))\\n\\n# BONUS FUNCTION SUBMISSIONS\\ntry:\\n\\tTest.assert_equals(defined_undefined_adder.__name__, \\\"defined_undefined_adder\\\", \\\"\\\\nBonus function 'defined_undefined_adder' must be a defined function\\\")\\n\\tTest.assert_equals(defined_undefined_adder(1).__name__, \\\"<lambda>\\\", \\\"\\\\nBonus function 'defined_undefined_adder' must return an undefined (lambda) function\\\")\\n\\tadders = [(k,defined_undefined_adder(k)) for k in range(_min, _max)] +\\\\\\n\\t[(k+.5, defined_undefined_adder(k+.5)) for k in range(_min, _max)]\\n\\tnumbers = range(_min, _max)\\n\\tfor (i, adder) in adders:\\n\\t\\t\\tfor number in numbers:\\n\\t\\t\\t\\tTest.assert_equals(adder(number), i+number, \\\"\\\\n'defined_undefined_adder({})({}) should equal {}\\\".format(i, number, i+number))\\t\\t\\n\\tprint(\\\"Woah... Amazing! \\\\nWell done for completing the bonus challenge!\\\")\\nexcept NameError:\\n\\tprint(\\\"Great work! Now try the bonus challenge ;) \\\")\",\"language\":\"python3\",\"quality\":4.666666666666667,\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,1,2,4,1,3,3,2,0,4,1,4,3,3,2,1,4,1,2,3,4,2,4,0,0,3,2,2,2,2,3,0,1,2,3],\"quality\":[4,5,5],\"rators\":[\"pDvFWMCD9fQwoBPcu\",\"aEm3Wvj2rFYRL8Lrb\",\"8PwfYqoDQFThzNtvf\",\"yjtdwc2AC4jA2RWtn\",\"yieWcSSRzCEQg49mg\",\"foytX6kH9wiSYqLtT\",\"xn7uGNKeAwPEkP9oA\",\"fSQSHjW3e72MrWxbD\",\"PywKdEirq9E88sSve\",\"y6rmzoMWNdRGr3Dk2\",\"FRv5HToEaZ6iRM7T5\",\"p8qqFdJ3FSk5x9z3G\",\"AHodQW2h6YM7p4vSw\",\"8sNv5PTHa7XQ8bNqR\",\"4fhjJBvLBWh6QeSih\",\"Wp5CZXqvjwTpt5SKN\",\"PT5pu7kJsgp9TDNGv\",\"6xTu4r8NMczBFvmtz\",\"8KNtgAcNpyT2f6bTT\",\"syYx2CZhdo5kPZiSW\",\"WPf3wuMaAipBActzR\",\"waNsY2k4ndReyEREk\",\"GNk4efjMZ8YERGL9e\",\"kXEfD7xxEyWd7oxxL\",\"Yp7uvStL97cC9fKkY\",\"bWxaTjsPDSAKLEaw3\",\"aAFKLxcnBD2ZrdDnJ\",\"tC332jRGtZPHb5ik4\",\"iojEnnY9FsMfYzp6f\",\"gb9rvGus2Jv7bjZSs\",\"QRv96jmNaYsWkxQEG\",\"AasGs8AeX9Lcb9xJn\",\"oBcs8GLX2ZFLXQy8y\",\"HqmxnQJM66Y57twhn\",\"H9KZi2cjt4FwH7qog\",\"yod5YhKtPqw2GfG9B\",\"2PufnQcsHsfymufX3\"],\"total\":37},\"flags\":0},\"summary\":\"Create the function defined_adder which takes a number num (integer or float) as an argument, and returns another function. This returned function should take another number (integer or float) as an argument and add the original num to that number, then return it.\\n\\nAlso create the function undefinedadder, which is an exact replica of definedadder, except in th\",\"tags\":[\"math\",\"numbers\"],\"timestamp\":{\"$date\":1603023737496},\"title\":\"Adder Functions\",\"family\":[{\"_id\":\"QitxdAHfkav9snvoP\",\"language\":\"python3\"}]}}"]