a["{\"msg\":\"result\",\"id\":\"2099\",\"result\":{\"_id\":\"mmiLWJzP3mvhjME7b\",\"author\":\"bangyen\",\"authorId\":\"yv7c4H2jimSKHEjtG\",\"code\":\"def divisible(arg):\\n\\t\",\"difficulty\":2.9375,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"hf4xZtPtkPxz5SspT\",\"instructions\":\"Create a function which checks if a binary number is divisible by three by implementing the following [finite-state automaton] (https://en.wikipedia.org/wiki/Finite-state_machine):\\n\\n![](https://edabit-challenges.s3.amazonaws.com/500px-DFA_example_multiplies_of_3.svg.png)\\n\\nThe function should implement the following commands:\\n\\n- `0`, `1` ➞ The next digit in the number.\\n- `\\\"state\\\"` ➞ The automaton's current state: `\\\"S0\\\"`, `\\\"S1\\\"`, or `\\\"S2\\\"`.\\n- `\\\"stop\\\"` ➞ Whether the automaton accepts or rejects the number that's been given. The function should either return `\\\"accept\\\"` or `\\\"reject\\\"`.\\n\\n### Examples\\n```\\ndivisible(1)(1)(0)(1)(0)(\\\"stop\\\") ➞ \\\"reject\\\"\\n# 26 is not divisible by 3, and 26 == 0b11010\\n\\ndivisible(\\\"state\\\") ➞ \\\"S0\\\"\\n# The automaton should start at S0\\n\\ndivisible(1)(0)(1)(\\\"state\\\") ➞ \\\"S2\\\"\\n```\\n\\n### Notes\\n- The function should be capable of handling arbitrarily long binary numbers.\\n- The function will only be fed valid inputs.\\n- The function should terminate after a `\\\"state\\\"` or `\\\"stop\\\"` command.\\n- In this case, acceptance occurs if the state at termination is `\\\"S0\\\"`, whereas rejection occurs if the state at termination is `\\\"S1\\\"` or `\\\"S2\\\"`.\\n- The int function is disabled to prevent conversion from binary to decimal.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"from random import randrange as rand\\n\\n# disables the int function\\ndef int(*a): return 'No cheating!'\\n\\n# example tests\\nTest.assert_equals(divisible(1)(1)(0)(1)(0)('stop'), 'reject', 'Example 1')\\nTest.assert_equals(divisible('state'), 'S0', 'Example 2')\\nTest.assert_equals(divisible(1)(0)(1)('state'), 'S2', 'Example 3')\\nTest.assert_equals(callable(divisible(1)), True, 'Function Check')\\n\\n# random tests\\nfor _ in range(5):\\n\\tnum = rand(1, 2**10)\\n\\tnum_lst = ''.join(['(%s)' % k for k in bin(num)[2:]])\\n\\tstate = 'accept' if num % 3 == 0 else 'reject'\\n\\tmsg = 'Number: ' + str(num)\\n\\tTest.assert_equals(eval('divisible%s(\\\"stop\\\")' % num_lst), state, msg)\\n\\nfor _ in range(5):\\n\\tnum = rand(1, 2**10)\\n\\tnum_lst = ''.join(['(%s)' % k for k in bin(num)[2:]])\\n\\tstate = 'S' + str(num % 3)\\n\\tmsg = 'Number: ' + str(num)\\n\\tTest.assert_equals(eval('divisible%s(\\\"state\\\")' % num_lst), state, msg)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,3,5,2,4,4,4,3,3,5,5,2,1,5,4,2,3,5,0,2,2,2,5,5,0,4,2],\"rators\":[\"yv7c4H2jimSKHEjtG\",\"aEm3Wvj2rFYRL8Lrb\",\"gJYuGdkXEWWmGRLzu\",\"efcsSdKgupNnf9DKD\",\"fznzd3qnvtbFkkizz\",\"R4SjTgDnpigJYDLyL\",\"8PwfYqoDQFThzNtvf\",\"AasGs8AeX9Lcb9xJn\",\"pPmDX5WEA6wXvAmrt\",\"xn7uGNKeAwPEkP9oA\",\"ofwxRp6sGdSX8acZa\",\"jFcHRfu77aNu6YpZg\",\"EksjxkfKerD7ZtqYA\",\"GgLd4eWBu79mdjtkP\",\"4sHkH3t9CJYhbDwjM\",\"97DthwdtrBLm2y2Yj\",\"pscBduNyf8TDHe2Km\",\"TppLLwi3RZptkewZ4\",\"hZW6j5s6RHpx35phy\",\"4fhjJBvLBWh6QeSih\",\"qD2LrwaDrSdiybLKY\",\"oBcs8GLX2ZFLXQy8y\",\"bfLuiMnnLPMGk3y8m\",\"8sNv5PTHa7XQ8bNqR\",\"p8qqFdJ3FSk5x9z3G\",\"foytX6kH9wiSYqLtT\",\"yjtdwc2AC4jA2RWtn\",\"yod5YhKtPqw2GfG9B\",\"bnFwHHeg5vyGzntuv\",\"2PufnQcsHsfymufX3\",\"gXTAie79kiw28tx5u\"],\"total\":32,\"quality\":[5,5,4,5]},\"flags\":0},\"summary\":\"Create a function which checks if a binary number is divisible by three by implementing the following [finite-state automaton] (https://en.wikipedia.org/wiki/Finite-state_machine):\\n\\nThe function should implement the following commands:\\n\\n0, 1 ➞ The next digit in the number.\\n\\\"state\\\" ➞ The automaton's current state: \\\"S0\\\", \\\"S1\\\", or \\\"S2\\\".\\n\\\"stop\\\" ➞ Whether the autom\",\"tags\":[\"closures\",\"functional_programming\",\"higher_order_functions\"],\"timestamp\":{\"$date\":1592191204843},\"title\":\"FSA: Divisible by Three\",\"quality\":4.75,\"family\":[{\"_id\":\"mmiLWJzP3mvhjME7b\",\"language\":\"python3\"}]}}"]