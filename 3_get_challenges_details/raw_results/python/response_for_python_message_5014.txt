a["{\"msg\":\"result\",\"id\":\"1223\",\"result\":{\"_id\":\"oLmAshdKHWLP3ck7e\",\"author\":\"zatoichi49\",\"authorId\":\"tAF9Gf6PiGogbZuWs\",\"code\":\"def min_difference_pair(nums):\\n\\t\",\"difficulty\":1.7086614173228347,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"ipgcXQY95r6osJZqs\",\"instructions\":\"Given a list of numbers, return the _pair_ of numbers that give the minimum absolute _difference_. Return the pair as a _list_, sorted in _ascending_ order. If multiple pairs have the same difference, return the pair with the smallest sum.\\n\\n### Examples\\n```\\nmin_difference_pair([40, 16, 8, 17, 15]) ➞ [15, 16]\\n# [15, 16] has smaller sum than [16, 17]\\n\\nmin_difference_pair([1, -31, -27, -18, -48, -15, -11, -34]) ➞ [-34, -31]\\n\\nmin_difference_pair([0, 2, 35, 42, 45, 14, -6, -1]) ➞ [-1, 0]\\n\\nmin_difference_pair([32, 33, 4, 6, 48, 18, 20, -7, -4, 31]) ➞ [31, 32]\\n```\\n\\n### Notes\\nThere will be no duplicate numbers in the list.\",\"lab\":\"Test.assert_equals(min_difference_pair([27, 49, 28, 13, -9, -2, 50]), [27, 28])\\nTest.assert_equals(min_difference_pair([32, -2, 25, -5, 20, 48, 38, 36, 7, 0]), [-2, 0])\\nTest.assert_equals(min_difference_pair([34, 50, 7, 2, -3, 17, -10, 26]), [-3, 2])\\nTest.assert_equals(min_difference_pair([-1, 10, -2, 3, -6, -10]), [-2, -1])\\nTest.assert_equals(min_difference_pair([15, 2, 17, 19, 5, -4]), [15, 17])\\nTest.assert_equals(min_difference_pair([18, -3, -10, 4, 19, -6, 15, 20, 14, 6]), [14, 15])\\nTest.assert_equals(min_difference_pair([11, 16, 9, 5, 15, -6, 2]), [15, 16])\\nTest.assert_equals(min_difference_pair([-17, 27, -3, 17, -29, 11, 40, 48]), [11, 17])\\nTest.assert_equals(min_difference_pair([43, -8, -17, -19, -9]), [-9, -8])\\nTest.assert_equals(min_difference_pair([27, 11, 22, 42, 1, 43, 21]), [21, 22])\\nTest.assert_equals(min_difference_pair([41, 42, 20, 6, 32, 49, -5, 28, 39, 40, 37]), [39, 40])\\nTest.assert_equals(min_difference_pair([22, -3, 4, 1, 46, 21, 0, 29]), [0, 1])\\nTest.assert_equals(min_difference_pair([35, 41, 48, 30, 24, 46, -2, -4, 34, 11]), [34, 35])\\nTest.assert_equals(min_difference_pair([9, 26, 5, 11, 34, -1, 4, 22, 40, 13, 25]), [4, 5])\\nTest.assert_equals(min_difference_pair([28, 19, 29, 35, 24, 3, 23, 30]), [23, 24])\\nTest.assert_equals(min_difference_pair([32, 33, 0, 39, 38, 29, 23]), [32, 33])\\nTest.assert_equals(min_difference_pair([13, 7, 39, 30, 17, 6, 38, 14]), [6, 7])\\nTest.assert_equals(min_difference_pair([2, 26, 1, 30, 29, 11, 12]), [1, 2])\\nTest.assert_equals(min_difference_pair([38, 0, 21, -1, 40, 8, 22, 32, 27]), [-1, 0])\\nTest.assert_equals(min_difference_pair([9, 8, 7, 6, 5, 4, 3, 2, 1]), [1, 2])\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[1,1,1,1,1,2,1,1,2,2,2,1,1,1,2,2,2,2,2,2,1,1,3,2,1,1,0,1,2,3,1,2,2,2,2,0,1,2,1,2,2,2,3,4,1,2,2,2,0,2,2,3,2,2,2,3,2,2,2,1,1,2,0,2,2,1,2,3,3,2,2,0,2,2,1,2,2,2,2,2,3,2,4,2,2,2,4,2,0,2,1,2,2,1,1,0,2,1,2,1,2,2,1,2,0,2,0,0,2,2,3,5,1,0,1,1,2,2,2,1,2,2,2,2,2,3,1],\"rators\":[\"yrCNkFYQBEDE76eFS\",\"TNMAJidLpPdH4kmBv\",\"AF6LgdKhEdzwgRJom\",\"ahWFxnaxt9bXSA4f3\",\"pXowSYggwhf4dMhDD\",\"e7hZa9EqDzpwivGPH\",\"PSrcg6fy835R4c5CW\",\"uSh3aNxzD28jBuhxa\",\"XKi8iZXBCHCaebSHh\",\"MAYWFNKxwJCTFrbB2\",\"nzx4uAPg3hCceyFPE\",\"C9LKGu2g5hSijvDzA\",\"tAF9Gf6PiGogbZuWs\",\"yZvzB3qFb8pkHy4dg\",\"8JyqsSbN2FJXPr3cw\",\"WkWyq9wMkZhXB6zsD\",\"gb9rvGus2Jv7bjZSs\",\"TNQ7ixK78HHTLP7it\",\"nQRzZKeDKuLRf9chX\",\"o5pRKAbyH9TjiB59q\",\"nc7bRhkxgKyqusYe3\",\"6u7yc9m6HuHGbHzph\",\"M8jrv2FfpMQp9Qzpx\",\"JEAi9mG3vvBomJ3Yu\",\"hsrNYf3WbexXJKhCq\",\"qvEvDcL32a5F4Tg6c\",\"yAouD3PxzED8a4gap\",\"kQH5b8MXJunh84Czq\",\"nfXGHENb5md7m355s\",\"sCnrfER8vCe4xhpB2\",\"td7qPZ7Lv4pEWT2Ya\",\"gMJhLdyw3tH7L96X2\",\"Nj6FwgBtAXsaQwsM2\",\"jHrtWDGBhkbuWa7fG\",\"FgkYtHLxeD8pETJ8T\",\"ZzwR8m8Q6Gozo9ofz\",\"jeuoearPPTcGPgXhf\",\"N2wnZXkhDH86mgjQ8\",\"SKabuq5XuhXBugKBa\",\"cR3ibTMxLyEdDFCHY\",\"i3KxTdoXY7KH88FFh\",\"HQxp7NcdvF92G7bYS\",\"2fxapKr8XGdNeaKi2\",\"otXtuQygbcYATMZoP\",\"HqmxnQJM66Y57twhn\",\"EDbTsaBeoXPCtpfvh\",\"K96FwtfDDN5WM4Bb7\",\"nL6EAKGywddR3mBs3\",\"u5u2YpHXiNgzDNJdX\",\"C4QntmkYtB89GNtpd\",\"fAoLuqbGvHn4w2PHf\",\"cXp7BXyiNJzBWdvYY\",\"K3RacTvkWHLfzKF8i\",\"6ShafRStcvew4GfCh\",\"Jqk2uJZZxEv5wZFze\",\"XjyaCd8bviTitHTwa\",\"Xj6R2zqhgumffQCAN\",\"ab7BsQuhDo3QgE6bh\",\"2innwjWqxJHo4eRGh\",\"BeFnbPbMnAM2SjBdZ\",\"s5M5RvgqR9BhB9JoC\",\"AasGs8AeX9Lcb9xJn\",\"PXAcsKkssS2yLyDv2\",\"4CFzv558qbGcpQwc4\",\"Yp7uvStL97cC9fKkY\",\"g8yJiPAWXbrgxbjfZ\",\"Z85ajWfZ4jDPkbvR4\",\"v3fjGuc7Pq4yjFygS\",\"vLrq4dEDMM2wd68Dc\",\"aEm3Wvj2rFYRL8Lrb\",\"dHZqT6h4JMwk5fPC8\",\"9Ly8afdtofp8DXzrt\",\"jNvegJWCk5HCtEMbK\",\"ZNnsMeNkdDhHjSrZb\",\"8PwfYqoDQFThzNtvf\",\"ySiDrAad7S23QsEN6\",\"hnyhBFWwNCz9mDfSi\",\"gJYuGdkXEWWmGRLzu\",\"DEDniTrstQYGounXT\",\"HF28xZKSLM9wEuqNg\",\"KdNDysEsy2TW5QRJ2\",\"9pzFiFK3ANLjQfnr2\",\"9bQyb6rW7xfE4vgrR\",\"4rwxLqLs2mNZNg8NB\",\"iojEnnY9FsMfYzp6f\",\"syRNbbPdLCGXbH2Gy\",\"nys6kJatAFrKL59Pf\",\"ZrKCkX7xxGGZzauFW\",\"yjtdwc2AC4jA2RWtn\",\"Pe8vWpDHRuH9nSGKW\",\"hRiMXDZNAzyPd5tpt\",\"RnCue6232fMBH22h4\",\"orFLgPDw9H5MDzmwo\",\"YcCLwitFMAEJSnxAW\",\"NNE5HNRXAkmhrWgyQ\",\"oBcs8GLX2ZFLXQy8y\",\"tpxMgkGSHwBjS95Ta\",\"4J4T8DigvcevGWRRh\",\"Ecg4m7srYGgZsb4Ck\",\"QRv96jmNaYsWkxQEG\",\"DPi9QGLctq2y76KuE\",\"c7uBxu2rgY77H5d79\",\"p8qqFdJ3FSk5x9z3G\",\"J3upzLHuEwXH7Z2hx\",\"DYDJTyGgKFnBRLm2r\",\"dYPkStFnLvAMsHSzZ\",\"iS5BrkGLzJyPK7nKt\",\"5XiuAqicKD4hBdu63\",\"cAP3n5NY64uoMwzRR\",\"KJCDwGkoXh8qtbbKr\",\"Wv2vJnEj8ywNmARoF\",\"9CoqdidjM9KbeKnHY\",\"zd9FLSzsGz3evKafy\",\"dBzwBtRjZqB98DJeB\",\"FEYpu9RWysAgW3XnP\",\"qZQxPQ2kaNKAMesHT\",\"5hQnRWiKkhgKJXNMP\",\"5S9nX4rKsnCcnv4Cz\",\"eYfPWvZwnJQkHbSTK\",\"cZccqzRQ9GgjQF6Az\",\"GGdmhAvxXhqhhibJN\",\"CHvzhtXnv8HTbPQ56\",\"qAby4AWXmTNeusvg3\",\"AFfw7cGg83uYk2Miy\",\"Ds7L5bksw2QRHjrKL\",\"J5T8gZqiZXFuFDTQ7\",\"srJ34BaybkQh3qRkM\",\"5HCu9Ydd86QgHDRNP\",\"AJexRBN9cYQmqvYu6\",\"yr822PZmmiDDenxpB\",\"T6iBEE2jp7f7iEF2P\",\"mvJBakQ35CWAnbbEZ\",\"sHjfbGQGLHE6JR6qu\",\"eMuCpJ2spXWkJjWNz\",\"buX4mCQhtXCfBjeno\",\"yod5YhKtPqw2GfG9B\",\"dzS6WBTMHyFEag6Fp\",\"suArq5BbSy7gD6xri\",\"BrTDhPJcACL2bsrpJ\",\"4Lwjr34ypKNQNQCar\",\"2PufnQcsHsfymufX3\",\"ey3CASd6Je5LEJzfB\",\"mxX4rH5ELYkdZ2Mbw\",\"Wi4H6ayKsNDWWQCG5\"],\"total\":152,\"quality\":[5,5,5,4,5,5,5,5,5,4,5,3,5,5,5,5,5,5,5,5,5,5]},\"flags\":0},\"subscribers\":[\"tAF9Gf6PiGogbZuWs\"],\"summary\":\"Given a list of numbers, return the pair of numbers that give the minimum absolute difference. Return the pair as a list, sorted in ascending order. If multiple pairs have the same difference, return the pair with the smallest sum.\\n\\nExamples\\nmindifferencepair([40, 16, 8, 17, 15]) ➞ [15, 16]\\n[15, 16] has smaller sum than [16, 17]\\n\\nmindifferencepair([1, -31, -27\",\"tags\":[\"arrays\",\"language_fundamentals\"],\"timestamp\":{\"$date\":1563035895575},\"title\":\"Minimum Difference Pair\",\"isHidden\":false,\"quality\":4.818181818181818,\"family\":[{\"_id\":\"jXT4cp5bQE76a5ave\",\"language\":\"cpp\"},{\"_id\":\"czFD8Y3E253eNCy8v\",\"language\":\"javascript\"},{\"_id\":\"oLmAshdKHWLP3ck7e\",\"language\":\"python3\"},{\"_id\":\"iYAsgA362hXjWHeNi\",\"language\":\"ruby\"}]}}"]