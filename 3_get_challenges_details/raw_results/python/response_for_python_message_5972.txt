a["{\"msg\":\"result\",\"id\":\"1697\",\"result\":{\"_id\":\"YifX9gJwnu5MS9brs\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"def samples_from_curve(samples, curve):\\n\\t\",\"difficulty\":2.1627906976744184,\"familyId\":\"AeWrCRbnZR9ERDSSA\",\"instructions\":\"Create a function that given a type of `curve` will generate a list containing a `samples` amount of numbers calculated from said `curve`.\\n\\nIt's easier to see with a visual representation:\\n\\n![graph of the 3 curves](https://edabit-challenges.s3.amazonaws.com/sample_points_from_a_curve.png)\\n\\nIf `samples = 3` and `curve = \\\"pow\\\"`, we would sample 3 points along the **x axis** `[0, 0.5, 1]` and figure out the value of `y`, in the case of the `pow` curve the values are `[0, 0.25, 1]`.\\n\\n### Examples\\n```\\nsamples_from_curve(3, \\\"linear\\\") ➞ [0, 0.5, 1]\\n\\nsamples_from_curve(3, \\\"pow\\\") ➞ [0, 0.25, 1]\\n\\nsamples_from_curve(3, \\\"sqrt\\\") ➞ [0, 0.71, 1]\\n\\nsamples_from_curve(5, \\\"linear\\\") ➞ [0, 0.25, 0.5, 0.75, 1]\\n```\\n\\n### Notes\\n- The available curves are `linear`, `pow`, `sqrt` as shown in the picture.\\n- All values returned must have a **maximum of 2 decimals** to avoid floating point problems in the tests.\\n- All values returned must be between `0` and `1` (inclusive).\\n- The `samples` parameter will always be ≥ `2`.\\n- The samples are **evenly distributed** along the **x axis**.\",\"lab\":\"# Linear\\nTest.assert_equals(samples_from_curve(2, 'linear'), [0, 1])\\nTest.assert_equals(samples_from_curve(3, 'linear'), [0, 0.5, 1])\\nTest.assert_equals(samples_from_curve(11, 'linear'), [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1])\\n\\n# Pow\\nTest.assert_equals(samples_from_curve(4, 'pow'), [0, 0.11, 0.44, 1])\\nTest.assert_equals(samples_from_curve(5, 'pow'), [0, 0.06, 0.25, 0.56, 1])\\nTest.assert_equals(samples_from_curve(11, 'pow'), [0, 0.01, 0.04, 0.09, 0.16, 0.25, 0.36, 0.49, 0.64, 0.81, 1])\\n\\n# Sqrt\\nTest.assert_equals(samples_from_curve(6, 'sqrt'), [0, 0.45, 0.63, 0.77, 0.89, 1])\\nTest.assert_equals(samples_from_curve(7, 'sqrt'), [0, 0.41, 0.58, 0.71, 0.82, 0.91, 1])\\nTest.assert_equals(samples_from_curve(11, 'sqrt'), [0, 0.32, 0.45, 0.55, 0.63, 0.71, 0.77, 0.84, 0.89, 0.95, 1])\",\"language\":\"python3\",\"summary\":\"Create a function that given a type of curve will generate a list containing a samples amount of numbers calculated from said curve.\\n\\nIt's easier to see with a visual representation:\\n\\ngraph of the 3 curves\\n\\nIf samples = 3 and curve = \\\"pow\\\", we would sample 3 points along the x axis [0, 0.5, 1] and figure out the value of y, in the case of the pow curve the val\",\"tags\":[\"algebra\",\"arrays\",\"math\"],\"timestamp\":{\"$date\":1565581319697},\"title\":\"Sample Points from a Curve\",\"stats\":{\"completed\":{\"total\":96,\"ratings\":[2,2,2,2,2,2,3,1,1,3,2,2,2,2,1,3,3,3,2,2,1,1,3,2,3,3,2,0,3,2,2,3,2,2,3,1,0,2,4,2,3,3,2,3,3,2,2,2,1,2,3,3,3,2,2,3,2,2,2,3,1,1,3,2,0,3,3,1,3,3,3,2,3,2,1,2,2,3,0,4,0,2,3,2,5,1],\"rators\":[\"C9LKGu2g5hSijvDzA\",\"tAF9Gf6PiGogbZuWs\",\"gb9rvGus2Jv7bjZSs\",\"AF6LgdKhEdzwgRJom\",\"jYJ26SiLKBu5GRumq\",\"yZvzB3qFb8pkHy4dg\",\"BFNm9gacwba9KyLFW\",\"MJMWfiW978otApbcG\",\"ahWFxnaxt9bXSA4f3\",\"uSh3aNxzD28jBuhxa\",\"3XWw4ui5Tipb2Qz8o\",\"nF9pCCzbGDhzvWgaw\",\"WkWyq9wMkZhXB6zsD\",\"HduR4E6us9sFe4ntY\",\"8JyqsSbN2FJXPr3cw\",\"AYaEkTWLMmfzpwejr\",\"cR3ibTMxLyEdDFCHY\",\"gMJhLdyw3tH7L96X2\",\"N2wnZXkhDH86mgjQ8\",\"aCNWav8S8Try9RkC6\",\"Nj6FwgBtAXsaQwsM2\",\"2fxapKr8XGdNeaKi2\",\"otXtuQygbcYATMZoP\",\"HqmxnQJM66Y57twhn\",\"XKi8iZXBCHCaebSHh\",\"u5u2YpHXiNgzDNJdX\",\"m7gqNzexmqFKfjpDc\",\"C4QntmkYtB89GNtpd\",\"JKb5rhL6DKcCAypF9\",\"K96FwtfDDN5WM4Bb7\",\"Jqk2uJZZxEv5wZFze\",\"ab7BsQuhDo3QgE6bh\",\"EQbnbkkPYtGxiviTp\",\"s5M5RvgqR9BhB9JoC\",\"F2aeZ4zqupp7a8SkW\",\"vgTvCCxgvbCTDvaRT\",\"8PwfYqoDQFThzNtvf\",\"w3A7cBWyAfukk6xEQ\",\"PytNZK9mNiRiZxPrm\",\"AasGs8AeX9Lcb9xJn\",\"mDWNyaaQ9hvPCRzSd\",\"v3fjGuc7Pq4yjFygS\",\"nzqwymsdwC7gxAmip\",\"aEm3Wvj2rFYRL8Lrb\",\"ZNnsMeNkdDhHjSrZb\",\"aPLuemxzZ5iS57NBQ\",\"gJYuGdkXEWWmGRLzu\",\"YRstQuthRkFeBiXug\",\"Tb2m9eGdTuSG8RbyD\",\"wS2o3x4nrsadtC3xP\",\"u72ipcjbNDSkWX8Gw\",\"wwMcJQRvf3X59Jyev\",\"9CoqdidjM9KbeKnHY\",\"KZ2xddpM2f9JRaryB\",\"DEDniTrstQYGounXT\",\"yjtdwc2AC4jA2RWtn\",\"hRiMXDZNAzyPd5tpt\",\"vwHs2chujYmpR7hKF\",\"DCLoZNDf8h6TB7gxn\",\"hXoTNPPmJLzkZnkSX\",\"BfwbCTRtW4wG2bsnH\",\"QRv96jmNaYsWkxQEG\",\"xn7uGNKeAwPEkP9oA\",\"DPi9QGLctq2y76KuE\",\"J5T8gZqiZXFuFDTQ7\",\"J3upzLHuEwXH7Z2hx\",\"kXEfD7xxEyWd7oxxL\",\"8hxxLgAf64YbGKRMb\",\"dkcmCKwqApX5jBggc\",\"PkAGTKMBadRihZ7Jk\",\"Yp7uvStL97cC9fKkY\",\"LQxof8pGabGuWP7Gn\",\"oKdRQvxcdrGC6nBiN\",\"5hQnRWiKkhgKJXNMP\",\"9Hp6Z83SwWxMQRouq\",\"kEkNyqFARK9YBrhRx\",\"gXTAie79kiw28tx5u\",\"BrTDhPJcACL2bsrpJ\",\"hnyhBFWwNCz9mDfSi\",\"cAP3n5NY64uoMwzRR\",\"iojEnnY9FsMfYzp6f\",\"oBcs8GLX2ZFLXQy8y\",\"6b3bqJnTQ7fTuLw8G\",\"GTKsdeEihE636Le9i\",\"Wpn95NqWxncQrwNgz\",\"GGdmhAvxXhqhhibJN\",\"MpfytGFYF77emJ3cT\",\"gKnWjDjwrJh7MK2df\",\"yod5YhKtPqw2GfG9B\",\"2PufnQcsHsfymufX3\",\"4Lwjr34ypKNQNQCar\",\"rfyEkETeoS96QNH4e\",\"8sNv5PTHa7XQ8bNqR\"],\"quality\":[4,5,5,4,4,5,5,3,5,5,5,4]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"isHidden\":false,\"quality\":4.5,\"family\":[{\"_id\":\"9se2zfxxSrLPKpyH9\",\"language\":\"javascript\"},{\"_id\":\"YifX9gJwnu5MS9brs\",\"language\":\"python3\"},{\"_id\":\"gu4KEhMazwBZgfhWk\",\"language\":\"ruby\"}]}}"]