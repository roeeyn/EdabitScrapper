a["{\"msg\":\"result\",\"id\":\"1336\",\"result\":{\"_id\":\"kfXz49avvohsYSxoe\",\"author\":\"Christopher Ferguson\",\"authorId\":\"JdfQpGCvHgKHFz89X\",\"code\":\"def binary_search(lst, left, right, elem):\\n\\t\",\"difficulty\":2.007843137254902,\"editorId\":\"JdfQpGCvHgKHFz89X\",\"familyId\":\"zBYDAAXna43wR5QoT\",\"instructions\":\"Welcome to part three of the collection for _Computer Science Algorithms_. Once more we'll be delving into recursion by covering the topic of Binary Searches.\\n\\nA \\\"Binary Search\\\" is a search algorithm that is used on an already sorted array. It  compares the target value to the middle element of an array. If they don't match, the half in which the target cannot lie is ignored and the search continues on the remaining half, again taking the middle element to compare to the target value, and repeating this until the target value is found. If the target value is not contained in the array eventually the left search index and the right search index will cross and that condition should terminate the search.\\n\\n### Algorithm\\nFor the sake of simplicity I'll refer to the array as \\\"arr\\\", the beginning index as \\\"left\\\", the end index as \\\"right\\\", and the element that we're searching for as \\\"elem\\\". The input for left and right initially will be left = 0 and right = sizeOfArray - 1. The rest of the algorithm can be broken down in five steps:\\n\\n1. If \\\"left\\\" > \\\"right\\\" then the search should end as being unsuccessful.\\n2. Set the middle index to the floor division of (\\\"left\\\" + \\\"right\\\") / 2.\\n3. If  arr(middle) < \\\"elem\\\", set \\\"left\\\" = middle + 1 and start the algorithm over again.\\n4. Else if arr(middle) > \\\"elem\\\", set \\\"right\\\" = middle - 1 and start the algorithm over again.\\n5. Otherwise arr(middle) == \\\"elem\\\" and the item you're looking for has been found.\\n\\n### Instructions\\nThe recursive function for this challenge will use a binary search to find an element in a given array. If the inputted element is found then the function should return true. If it fails to find the element then it should return false.\\n\\n### Examples\\n```\\nbinary_search([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], left, right, 7) ➞ True\\n\\nbinary_search([1, 11, 14, 15, 32, 64, 67, 88, 92, 94], left, right, 12) ➞ False\\n\\nbinary_search([3, 6, 9, 12, 15, 18, 21, 24, 27, 30], left, right, 27) ➞ True\\n```\\n\\n### Notes\\n- The operator for floor division in python is `//`.\\n- The array will be an int array and all integers will be positive.\\n- Several of the challenges that will be covered in this collection on algorithms can be solved non-recursively and without implementing the algorithms described in each challenge. I implore anyone solving these challenges to do them as intended. Not understanding the concepts taught will be an obstacle to later challenges and won't aid anyone in advancing their skills as a programmer.\\n- If you are stuck please check the **Resources** tab, **Comments** tab, or if you're really stuck, use the **Solutions** tab to unlock the answers.\",\"lab\":\"Test.assert_equals(binary_search([1,2,3,4,5,6,7,8,9,10],0,9,7), True)\\nTest.assert_equals(binary_search([3,6,14,15,17,18,22,43,55,66],0,9,19), False)\\nTest.assert_equals(binary_search([4,8,12,16,20,24,28,32,36,40],0,9,32), True)\\nTest.assert_equals(binary_search([3,6,9,12,15,18,21,24,27,30],0,9,31), False)\\nTest.assert_equals(binary_search([20,1067,5032,10005,20333,36798,45234,55555,64123,99999],0,9,64123), True)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,2,2,2,3,1,3,1,2,3,2,2,2,3,2,2,3,2,2,2,3,2,1,2,1,1,1,1,2,2,1,3,2,2,3,3,3,0,3,1,2,2,2,3,0,3,2,2,2,3,2,3,2,0,1,2,2,1,3,2,5,2,3,3,2,2,3,3,2,3,2,1,1,3,0,2,3,0,2,2,0,3,2,3,2,3,2,2,3,2,2,2,2,1,3,2,2,2,3,5,3,2,3,2,2,0,1,2,0,2,1,3,2,2,0,2,3,2,2,3,1,3,2,1,1,2,0,3,3,2,1,3,1,3,0,1,0,0,1,2,3,0,3,1,3,2,2,2,1,1,2,1,3,3,2,1,2,3,3,3,1,0,2,1,3,1,2,2,2,2,2,2,2,2,2,2,0,2,2,1,3,2,1,4,3,2,2,4,2,3,3,3,0,3,3,0,2,2,0,1,2,2,3,2,2,2,2,2,3,2,2,0,2,2,2,3,3,2,3,3,3,0,2,3,3,2,2,3,2,1,1,3,3,0,3,3,2,3,2,2,2,1,3,2,2,3,2,2,3,2],\"rators\":[\"JdfQpGCvHgKHFz89X\",\"ahWFxnaxt9bXSA4f3\",\"PFjMZGHNAPTkgd7tq\",\"gb9rvGus2Jv7bjZSs\",\"DJD9vvwqQmjfwdGpt\",\"XhzKztoQYYQzZ2c7o\",\"AF6LgdKhEdzwgRJom\",\"n7Xtib5FznYT4T5GP\",\"tiETrb6KmarBWK5fD\",\"3ifAHQzsMasfQySoL\",\"NvR9Gs5bL8JYPbWHe\",\"BFNm9gacwba9KyLFW\",\"vtBrNNcQn8TFSs275\",\"kJMGsjAcddJ5HRrFE\",\"wcjknenWdPRhrRScv\",\"rZ4CjcRom4x2aZHkW\",\"tAF9Gf6PiGogbZuWs\",\"QkS3Sz2spyyxDXp8x\",\"yZvzB3qFb8pkHy4dg\",\"MJMWfiW978otApbcG\",\"3YTSj6eCXPoiqDaC9\",\"8JyqsSbN2FJXPr3cw\",\"AYaEkTWLMmfzpwejr\",\"xNnExyvwRFrYzfuQZ\",\"5s4qhuRJijYaDNXva\",\"cR3ibTMxLyEdDFCHY\",\"KiEAa2ZtKhtG4pi4r\",\"gMJhLdyw3tH7L96X2\",\"XKi8iZXBCHCaebSHh\",\"pryBJYX32n8nvRvDu\",\"nfXGHENb5md7m355s\",\"aCNWav8S8Try9RkC6\",\"EXZfPb8YH28EL8Rh9\",\"Nj6FwgBtAXsaQwsM2\",\"o9dB4oG6WG5XuWBWp\",\"HhLfku5PjHPCqYBe6\",\"LarcoyPM3xsjp3SGN\",\"6kmq69yr7F5bW5ygQ\",\"ovZt5Z8GGyooMWyBB\",\"AdMsAQ2MJPAw7uWfJ\",\"RoErKvc4oJyj4FZ8J\",\"2fxapKr8XGdNeaKi2\",\"zjsM22NNZFoAm9AAC\",\"2RuXdqALgnGbtTWC7\",\"8aPJNKDxXq7884eJb\",\"RyCu8LFdoba6Gvzp9\",\"5F8kWn4n7fQbnf88e\",\"HTMppwmCi7pqRYg5t\",\"hrzGaJc9KZqgjAvew\",\"iKLApWnh7M35eXupk\",\"NGAnrru2PvnABJSHi\",\"PXSFa2Cvyy7nxcv5T\",\"jYypgEfhDWb9syYP7\",\"otXtuQygbcYATMZoP\",\"w3e8tA7cxpYDfSmWM\",\"54GrF4GDAgaxtb64y\",\"trm8mtb2mJCJ6LyJ7\",\"sfHsh5gna2QYuwsRP\",\"MNgYsvK6HfLRb8wAz\",\"8PE2cfZEhQBPhe8LG\",\"Hz9BzmNzg9dnMhSB2\",\"PXBzmne5W3mNFjtRX\",\"qBaLGrm952ii9K23M\",\"HqmxnQJM66Y57twhn\",\"K96FwtfDDN5WM4Bb7\",\"g4SjQHKTor6qWACAe\",\"Qm3uJQiRDGwQ8cxdR\",\"u5u2YpHXiNgzDNJdX\",\"dLk8RZ8yg7tWPzz8d\",\"DryNRN98Dj24BpgrL\",\"GNcCEduB4wpC9K6ZQ\",\"yoYQqaY6GszuTkNSs\",\"Jqk2uJZZxEv5wZFze\",\"8PwfYqoDQFThzNtvf\",\"FfriSAvWe5QEgsYgo\",\"Kkie93rtG35Gfxatf\",\"s5M5RvgqR9BhB9JoC\",\"ab7BsQuhDo3QgE6bh\",\"2innwjWqxJHo4eRGh\",\"vctXq6yQfmKmWSF4x\",\"sFPqa2S5bySJt5F7w\",\"EjbDDFRECrzQDkzrX\",\"C4QntmkYtB89GNtpd\",\"QnPD4Sv6W4LHc2Qng\",\"2NJuDfSqdrF8kHHni\",\"4CFzv558qbGcpQwc4\",\"QKtxPPRK5h3eqno6p\",\"hWwj6krk3CTL2xK7a\",\"hKrY8hWMgToBavfhD\",\"AasGs8AeX9Lcb9xJn\",\"Ro3ppqamSxiJv2wxP\",\"XYziYR4SmSobmYtRd\",\"aEm3Wvj2rFYRL8Lrb\",\"ZNnsMeNkdDhHjSrZb\",\"sz8ufn9i8zeiGWpAy\",\"4BHrt3NoCQECjvFJC\",\"gJYuGdkXEWWmGRLzu\",\"uMLsCftXNbvx6pcGA\",\"euPBBaYXyS8RBr9KB\",\"J5T8gZqiZXFuFDTQ7\",\"Yp7uvStL97cC9fKkY\",\"YRstQuthRkFeBiXug\",\"wT5gGgvjKc5wz59AQ\",\"eg5iwxQWCEYnktrcm\",\"DDkaPC5SHeoRgg8RC\",\"7PWp9GqwBYrbpjbGm\",\"7CMCKFK3J6dw57T3n\",\"yKttxy9JGn5Jzwuj6\",\"5aZnA8Br3u7Wf5ENg\",\"mfsaETo7uA4x5vqLD\",\"HF28xZKSLM9wEuqNg\",\"ywk3XGvcmpTgRxwZa\",\"9pzFiFK3ANLjQfnr2\",\"yr822PZmmiDDenxpB\",\"Zhy5X7BZnqk8hacEw\",\"vhLJwgSRY2J7aGD2i\",\"DEDniTrstQYGounXT\",\"wS2o3x4nrsadtC3xP\",\"HeK2SXLuQHAMYtcSC\",\"gkqp3EuvuiFXFAFtW\",\"eMuCpJ2spXWkJjWNz\",\"hnyhBFWwNCz9mDfSi\",\"bJxaKHJqR82EWw8Su\",\"yoLy2DcMG3nZXNwv2\",\"9XNbjEKxsC89aX6ae\",\"JPcZTN85b7SXnwjPa\",\"MtSGMTysiWHmv4CRE\",\"f2BoqyCpgnmjEjLqx\",\"DxxNN37iEz7b8t2nf\",\"Nfsj4eNFDjaFa39ga\",\"GW2RWhGaWwtLb7dDG\",\"vbL2zx33LGe2MSzkv\",\"p8qqFdJ3FSk5x9z3G\",\"iojEnnY9FsMfYzp6f\",\"dynD89GCHoau9fvh7\",\"pk6na49xYaQFPFWey\",\"zZDaXBxMzTCBhNkgL\",\"T2vhHPhRR96hRizq8\",\"nBo2LLuSMeEgd5f6G\",\"ypGdjKLkswPZXo89K\",\"BrTDhPJcACL2bsrpJ\",\"RnTBbuFCrJWW6Ayvj\",\"mDWNyaaQ9hvPCRzSd\",\"syRNbbPdLCGXbH2Gy\",\"49XFttjKo2QhEWT3R\",\"ZJQW3bL2KzxJcdEoc\",\"vcBAc4nu5joJduTM6\",\"wymkBJ3ePhAkti3ZM\",\"W5TajitmCyxz87zAC\",\"yjtdwc2AC4jA2RWtn\",\"pscBduNyf8TDHe2Km\",\"2DrXL4cYLdXLj78t3\",\"uEeZaTW4HK8AL4BjQ\",\"ji5f27FPz4wRRF6Ls\",\"8BFSTCnoe2QggN64c\",\"Ja9GA5pCEfhb2jP3N\",\"Y8ySZEtvht9EwdcoY\",\"CPwpoaNPnJpkMGYQb\",\"xwEZk3bNZoNDPJYF5\",\"n2BRY9X8899dcG8Bw\",\"Pe8vWpDHRuH9nSGKW\",\"SgZ2t9xFuRqdJGofp\",\"MCw7uAcoWcSTBTmr3\",\"RehJGBFS6CYiWdjZx\",\"Nb6LYPoQP6KJZt8mz\",\"HhYCji7QqauyN3A7v\",\"CRGb53t7cpX45XgFo\",\"D9PJpqEJYLJLGFJS8\",\"xn7uGNKeAwPEkP9oA\",\"nkefpk66iGg7yYb7A\",\"MfKe55snfKsdnDejs\",\"R4SjTgDnpigJYDLyL\",\"2PufnQcsHsfymufX3\",\"zZ43WzxvFu7kaTKZ6\",\"oNBNrPGYAhQiwbeDv\",\"2RnsLFE4uiw3i7C9r\",\"axdSNLZpiCDF8RS6n\",\"fGN2frPqk4Wb3ia9L\",\"bNZN65S3GkReo8qNT\",\"y372QoK9hSQGAWjCF\",\"QgYoHwBPwG5xWHbkT\",\"9CoqdidjM9KbeKnHY\",\"TSmqW4WqFk9rhrcNe\",\"pmgFEciNrd3ES9tuu\",\"qqRZkseCTKyLoEsG8\",\"MtJ33oGd6Skry3dj4\",\"f9peT7zzJaLdTPxhJ\",\"tXNgbxmMDqkvLc76o\",\"rK3xSCovoqjmkgBL9\",\"SSqGKf3pKQZtjhaSe\",\"DNACg4rcgZsPtYGZ8\",\"ZJTBR5PYuKrEi8xcJ\",\"sQoQnJPb3o2FwAANp\",\"4fhjJBvLBWh6QeSih\",\"oBcs8GLX2ZFLXQy8y\",\"Ssu6LMTQ2KKJZjtau\",\"NnBvtz5b9mwygAHY2\",\"bC49w5JpRaqtjd3Rt\",\"ppxNdL4gjANz8oJLQ\",\"YMBFrhTvTMrAvRYJR\",\"Ecg4m7srYGgZsb4Ck\",\"mDzReRELNxXWY6xTW\",\"rxr3nwpDGDEkBJRgD\",\"6F3Y6ZBAGNDGGTt9B\",\"TFqRD3zervh8PT8op\",\"DrkR35NqnP9NDLbq6\",\"fznzd3qnvtbFkkizz\",\"DPi9QGLctq2y76KuE\",\"Je8i9X6FTE4roo7sm\",\"KJCDwGkoXh8qtbbKr\",\"6MjSiiBLPcvXbXcaZ\",\"gXTAie79kiw28tx5u\",\"4fjSgcqhQQZM2ZFRP\",\"dYPkStFnLvAMsHSzZ\",\"2QziknsznNeMPRh3g\",\"8hxxLgAf64YbGKRMb\",\"q7YAahG8D2vWsqXdM\",\"FaHX6krfMCkHf3XJi\",\"4nMm5uxZxCriJaoHP\",\"gKsunaX2kCGC5CcbC\",\"x2sufZSE9ozE3393f\",\"REpkEcYrskYHBmYzW\",\"gMTr4yRbQsTNdknws\",\"agb6ou9deennRxzhv\",\"v3G4NYnzFwWRhsPY6\",\"ZcmrtSpqFnCBEK5YE\",\"cAP3n5NY64uoMwzRR\",\"CKKxyFh2nit6wj6Nh\",\"NmsxAPWovzNcBJobu\",\"R29kgJ9M7R4qqwjcE\",\"c8pMyAEEeFf5QzWRt\",\"Y97azQAjZi7HZAjBY\",\"aaJyfNectKuRHsv2J\",\"YL9pqyCu8xsds8J49\",\"Nzi4RD5fxAJ4wjnNa\",\"gDpGXGKzojCG7XYeY\",\"ddyTp8rr9m4pNuASn\",\"sftR9DgM4jpwtxfAM\",\"d8qtzoLB264iP8tdY\",\"abCKW9EmBinFsr7KG\",\"2H7qphwdz7PPoFKgc\",\"zd9FLSzsGz3evKafy\",\"FEYpu9RWysAgW3XnP\",\"fRhyffuFFdj8dmJwX\",\"KKPxXDYAqem4tcuHH\",\"ywxtqJWT3W9BxeTiP\",\"QeSdfxcRg2aWN3aPu\",\"yTtSCvGPyYna6JuRC\",\"HaSoJrKFdWZ28KiQs\",\"3ECpdeExhBmkYXtba\",\"FgPNgfwheCvagegvQ\",\"GGdmhAvxXhqhhibJN\",\"8pBm6An63TSSA89YB\",\"ScaZG69jog5kcqGtQ\",\"pfbrH83s66L2EZQsH\",\"Aqc4ojJLti3pEYAXf\",\"3LiSLdtN58n46NEqg\",\"6daecm7mtqzp7mKso\",\"xsD8G4TW6LknknK4K\",\"82nyWEcznkx7ZA9ip\",\"Wpn95NqWxncQrwNgz\",\"QRv96jmNaYsWkxQEG\",\"AQSqD9oNv2uPfxZCR\",\"XNmN6ztj36a7eChbD\",\"5rEiiwNW8YGxvWuH5\",\"bvmTE46bfcM4ogj34\",\"K6MfKMytoJJuSGewP\",\"t4XvcKCmucuJTrD6F\",\"vRXuYYBNuHEQ29fbm\",\"snTKcEB844YPMyH2x\",\"oegsMgYbTKZZzPgWS\",\"Ds7L5bksw2QRHjrKL\",\"wgeKgw6FvjDqgqrD4\",\"Kv92AoBe3KjTCfiBD\",\"9izxzCBrsRCbD9ajK\",\"vhmyKoH2TxNHKuFzF\",\"93MG3YGFz7mihAPjc\",\"8sNv5PTHa7XQ8bNqR\",\"nkL2knkcNaiHCerW2\",\"RoGGD5cpHb4ftdLDv\",\"gKnWjDjwrJh7MK2df\",\"AFfw7cGg83uYk2Miy\",\"LcRuvM5CcbSmJ8ipK\",\"mzsaCBQP3e6YourDN\",\"mvJBakQ35CWAnbbEZ\",\"yod5YhKtPqw2GfG9B\",\"5jC6kt3SXoABZBwsY\",\"nkH3HfJXLMNcBMM79\",\"5HCu9Ydd86QgHDRNP\",\"6fvBEZTe6B6uTdxo4\",\"KgXT7RSZDuoXJeQnQ\",\"xqYQMujmvgQ78bnJc\",\"Qyfyyw6oC4EHAndzo\",\"MHiQx9E8rPgzJfsJy\",\"QNPbruWphPhimnrAv\",\"5Dd7XwALvvMMwS4Fb\",\"vFXxysYBKjYaSXGp8\"],\"total\":334,\"quality\":[5,5,5,3,5,5,5,5,5,5,5,3,5,3,5,4,5,5,5,5,5,5,5,5,5,5,5,5,4,5,4,5,5,5,5,5,4,5,5,5,4,5,5,1,4,5,5]},\"flags\":0},\"subscribers\":[\"JdfQpGCvHgKHFz89X\"],\"summary\":\"Welcome to part three of the collection for Computer Science Algorithms. Once more we'll be delving into recursion by covering the topic of Binary Searches.\\n\\nA \\\"Binary Search\\\" is a search algorithm that is used on an already sorted array. It  compares the target value to the middle element of an array. If they don't match, the half in which the target cannot l\",\"tags\":[\"algorithms\",\"recursion\",\"arrays\"],\"timestamp\":{\"$date\":1562336833317},\"title\":\"Algorithms III: Binary Search\",\"isHidden\":false,\"quality\":4.659574468085107,\"family\":[{\"_id\":\"YaveE6sv8xGf4CNxk\",\"language\":\"java\"},{\"_id\":\"kfXz49avvohsYSxoe\",\"language\":\"python3\"}]}}"]