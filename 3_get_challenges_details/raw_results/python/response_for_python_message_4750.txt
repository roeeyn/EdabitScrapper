a["{\"msg\":\"result\",\"id\":\"1093\",\"result\":{\"_id\":\"bHfb35MfsjyM6DJge\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"def route_diff(directions):\\n\\t\",\"difficulty\":1.5740740740740742,\"familyId\":\"9YijWHaTowwxf55fT\",\"instructions\":\"Suppose you are directionally challenged, and get lost easily. As a result, sometimes you walk in circles or make U-turns. You might take a sub-optimal route. Create a function that returns the difference in length between **your path** and the **optimal path**. Both paths reach the same destination.\\n\\nYou start at `(0,0)` and reach your destination by the end of the input list.\\n\\nA demonstration:\\n\\n```\\nYour route: [\\\"N\\\", \\\"S\\\", \\\"E\\\", \\\"W\\\", \\\"E\\\", \\\"E\\\", \\\"E\\\", \\\"N\\\"]  // 8\\nOptimal route: [\\\"E\\\", \\\"E\\\", \\\"E\\\", \\\"N\\\"] (or [\\\"N\\\", \\\"E\\\", \\\"E\\\", \\\"E\\\"], etc.) // 4\\n# Difference in length: 8 - 4 = 4\\n\\n# Explanation: Your \\\"S\\\" cancels out your \\\"N\\\" and your \\\"W\\\" cancels out your \\\"E\\\" leaving you back at (0,0)\\n```\\n\\n### Examples\\n```\\nroute_diff([\\\"N\\\", \\\"E\\\", \\\"S\\\", \\\"W\\\"]) ➞ 4\\n# You\\\"ve just walked in a circle! You are back at the origin. Your optimal path was `[]`.\\n\\nroute_diff([\\\"N\\\", \\\"N\\\", \\\"N\\\", \\\"E\\\", \\\"N\\\", \\\"E\\\"]) ➞ 0\\n# No improvements here!\\n\\nroute_diff([\\\"N\\\", \\\"S\\\", \\\"N\\\", \\\"S\\\", \\\"E\\\", \\\"W\\\", \\\"E\\\", \\\"E\\\"]) ➞ 6\\n```\\n\\n### Notes\\nRemember that a `N` cancels out a `S`, and an `E` cancels out a `W`.\",\"lab\":\"Test.assert_equals(route_diff(['N', 'E', 'S', 'W']), 4)\\nTest.assert_equals(route_diff(['N', 'N', 'N', 'E', 'N', 'E']), 0)\\nTest.assert_equals(route_diff(['N', 'S', 'N', 'S', 'E', 'W', 'E', 'E']), 6)\\nTest.assert_equals(route_diff(['N', 'S', 'N', 'S', 'E']), 4)\\nTest.assert_equals(route_diff(['N', 'N', 'S', 'S', 'S', 'S', 'E']), 4)\\nTest.assert_equals(route_diff(['N', 'N', 'S', 'S', 'W', 'S', 'E']), 6)\\nTest.assert_equals(route_diff(['N', 'S', 'E']), 2)\\nTest.assert_equals(route_diff(['S', 'S', 'S']), 0)\\nTest.assert_equals(route_diff(['S', 'S', 'S', 'S', 'S', 'N']), 2)\",\"language\":\"python3\",\"summary\":\"Suppose you are directionally challenged, and get lost easily. As a result, sometimes you walk in circles or make U-turns. You might take a sub-optimal route. Create a function that returns the difference in length between your path and the optimal path. Both paths reach the same destination.\\n\\nYou start at (0,0) and reach your destination by the end of the inp\",\"tags\":[\"arrays\",\"control_flow\"],\"timestamp\":{\"$date\":1553223615616},\"title\":\"Directionally Challenged\",\"stats\":{\"completed\":{\"total\":183,\"ratings\":[2,2,2,2,2,2,2,2,2,2,1,2,1,2,1,1,2,1,1,2,1,2,2,2,1,2,2,1,3,2,2,2,1,1,1,1,1,0,2,0,2,2,1,1,1,2,2,2,0,1,2,2,0,2,2,2,1,2,1,2,2,2,2,1,2,1,2,1,2,2,2,2,2,2,1,1,2,2,2,1,1,0,2,0,0,2,2,0,2,1,1,2,2,1,2,1,2,2,2,2,1,0,2,2,2,2,1,2,1,2,2,1,1,0,1,2,2,2,2,2,2,0,0,1,2,1,2,3,3,1,2,2,1,2,0,1,4,2,2,2,2,1,1,3,2,2,2,3,2,2,2,5,1,2,1,1,1,0,2,2,0,1],\"rators\":[\"BkPgkDQGHm66X4Qai\",\"Jqk2uJZZxEv5wZFze\",\"8JyqsSbN2FJXPr3cw\",\"yZvzB3qFb8pkHy4dg\",\"gb9rvGus2Jv7bjZSs\",\"qvEvDcL32a5F4Tg6c\",\"SKabuq5XuhXBugKBa\",\"M8jrv2FfpMQp9Qzpx\",\"nc7bRhkxgKyqusYe3\",\"uSh3aNxzD28jBuhxa\",\"X9NeqaKpfykoscpYr\",\"tAF9Gf6PiGogbZuWs\",\"T3ZAuoMrJjvZwN55B\",\"FikSPhcrHBpQ4CyGC\",\"ab7BsQuhDo3QgE6bh\",\"AF6LgdKhEdzwgRJom\",\"mNMQvcxKSSvqqMYCH\",\"6ckDJWbyznyQQLkrP\",\"6W2GSzrYjMD9ANBFY\",\"4kJMafuJWxzhDht2w\",\"PFjMZGHNAPTkgd7tq\",\"ahWFxnaxt9bXSA4f3\",\"DTE6vdqCL8udPnYs3\",\"C9LKGu2g5hSijvDzA\",\"TNMAJidLpPdH4kmBv\",\"yrCNkFYQBEDE76eFS\",\"PSrcg6fy835R4c5CW\",\"o5pRKAbyH9TjiB59q\",\"6u7yc9m6HuHGbHzph\",\"WkWyq9wMkZhXB6zsD\",\"td7qPZ7Lv4pEWT2Ya\",\"jYJ26SiLKBu5GRumq\",\"XKi8iZXBCHCaebSHh\",\"nfXGHENb5md7m355s\",\"sCnrfER8vCe4xhpB2\",\"gMJhLdyw3tH7L96X2\",\"Nj6FwgBtAXsaQwsM2\",\"JEAi9mG3vvBomJ3Yu\",\"FgkYtHLxeD8pETJ8T\",\"cR3ibTMxLyEdDFCHY\",\"6fbavLhJREvHXvnaY\",\"nzx4uAPg3hCceyFPE\",\"2fxapKr8XGdNeaKi2\",\"otXtuQygbcYATMZoP\",\"ZzwR8m8Q6Gozo9ofz\",\"HqmxnQJM66Y57twhn\",\"4y2bxsHwifCdZXAQA\",\"DLai9DxpZN6p5TPRX\",\"u5u2YpHXiNgzDNJdX\",\"K96FwtfDDN5WM4Bb7\",\"ksafdYcNM3SFEQoW9\",\"4tgBydK887PitgAoi\",\"qJZsi5rhRnWA38FbA\",\"6ShafRStcvew4GfCh\",\"C4QntmkYtB89GNtpd\",\"m6Gp2a9B8G3sXfrJy\",\"vgTvCCxgvbCTDvaRT\",\"Xj6R2zqhgumffQCAN\",\"aP3dk5CrAEeQkKn4k\",\"KdNhsHAQg83SsBTgg\",\"PXAcsKkssS2yLyDv2\",\"BeFnbPbMnAM2SjBdZ\",\"2innwjWqxJHo4eRGh\",\"p3dsCFdWGzWGhFrSQ\",\"M44nifmWzt3wtYyJx\",\"sJWTa7iWeRoRtqJ8N\",\"s5M5RvgqR9BhB9JoC\",\"Ycj4iTJGFyvC4bXek\",\"AasGs8AeX9Lcb9xJn\",\"4CFzv558qbGcpQwc4\",\"v3fjGuc7Pq4yjFygS\",\"Yp7uvStL97cC9fKkY\",\"mxX4rH5ELYkdZ2Mbw\",\"yabtHTtycsWhcGBfD\",\"Z85ajWfZ4jDPkbvR4\",\"dHZqT6h4JMwk5fPC8\",\"9Ly8afdtofp8DXzrt\",\"hnyhBFWwNCz9mDfSi\",\"aRqQ42J5zqCmBNd8w\",\"vLrq4dEDMM2wd68Dc\",\"aEm3Wvj2rFYRL8Lrb\",\"2QGRoQn2dRq3scu7k\",\"8PwfYqoDQFThzNtvf\",\"jNvegJWCk5HCtEMbK\",\"ZNnsMeNkdDhHjSrZb\",\"gJYuGdkXEWWmGRLzu\",\"HF28xZKSLM9wEuqNg\",\"E4piFEMcQJoDD8tqX\",\"DEDniTrstQYGounXT\",\"KdNDysEsy2TW5QRJ2\",\"9pzFiFK3ANLjQfnr2\",\"k27vA7iEaLo9YhqQm\",\"ahk2qiXKJA753wAJk\",\"XrqNzJ2FRG8HnGiR6\",\"4yNLEwL2rsx4EE5Nt\",\"2ptN2mhjFwFcHyPZd\",\"ZrKCkX7xxGGZzauFW\",\"3cF6NXq3ZEwdkgSjb\",\"NG8PWBSjsM8mMhQEq\",\"syRNbbPdLCGXbH2Gy\",\"iojEnnY9FsMfYzp6f\",\"FEYpu9RWysAgW3XnP\",\"ka3mNZM8TnYDyqMEn\",\"yjtdwc2AC4jA2RWtn\",\"eMuCpJ2spXWkJjWNz\",\"R4SjTgDnpigJYDLyL\",\"RnCue6232fMBH22h4\",\"ta5CrWnBCRusD2WMo\",\"GEvSGXDkk7pACfYri\",\"Wv2vJnEj8ywNmARoF\",\"n2BRY9X8899dcG8Bw\",\"oBcs8GLX2ZFLXQy8y\",\"hRiMXDZNAzyPd5tpt\",\"M8dQuMrEpP8Hc3tHN\",\"RehJGBFS6CYiWdjZx\",\"zd9FLSzsGz3evKafy\",\"4P2Tye3qbEKWWYF7C\",\"KLmLKaJPfsYxp42p2\",\"k2Eo3wyfZZ6KxvKhN\",\"7K2GEb5TZRtSpyyGS\",\"tpxMgkGSHwBjS95Ta\",\"p8qqFdJ3FSk5x9z3G\",\"mG8HqKiAQFTdRZthG\",\"BrTDhPJcACL2bsrpJ\",\"gXTAie79kiw28tx5u\",\"oXdhczMThyirgM2eN\",\"KTFxMsjaW4xgo5ajY\",\"9CoqdidjM9KbeKnHY\",\"rfyEkETeoS96QNH4e\",\"DPi9QGLctq2y76KuE\",\"EMJ6uvBZkie429gdg\",\"CB48GHbw7xtwmiuPn\",\"J3upzLHuEwXH7Z2hx\",\"a6fd7AYjdcswcZ8pT\",\"dYPkStFnLvAMsHSzZ\",\"cAP3n5NY64uoMwzRR\",\"5XiuAqicKD4hBdu63\",\"RGMbFMZXJr7DhcAJy\",\"shdSrDq5ZKqfpgjmu\",\"5hQnRWiKkhgKJXNMP\",\"d8qtzoLB264iP8tdY\",\"dBzwBtRjZqB98DJeB\",\"5HCu9Ydd86QgHDRNP\",\"tEymgSzQSfcoYh9Hg\",\"J5T8gZqiZXFuFDTQ7\",\"HuNF3xTBzmatyGSTm\",\"6ciNvoAPMGrZhWYC3\",\"2H7qphwdz7PPoFKgc\",\"wRttWTM59y8m5mx7x\",\"eYfPWvZwnJQkHbSTK\",\"5S9nX4rKsnCcnv4Cz\",\"QRv96jmNaYsWkxQEG\",\"GGdmhAvxXhqhhibJN\",\"Ds7L5bksw2QRHjrKL\",\"xn7uGNKeAwPEkP9oA\",\"qAby4AWXmTNeusvg3\",\"gjiu8kLnHYxe4HoBN\",\"sHjfbGQGLHE6JR6qu\",\"T6iBEE2jp7f7iEF2P\",\"66a9xX73nmTEuKs9k\",\"yod5YhKtPqw2GfG9B\",\"v57wdSs5mY2Ggkvva\",\"mXWfLjZYutTYxx2H6\",\"rX2rJ54f6RhhuTxHB\",\"vbvG4tMeSBkrnE7gC\",\"AcqxyLsLSMMkBWrfK\",\"8BFSTCnoe2QggN64c\",\"Afnps7TJQuS9sipMb\",\"HMfeNhbwykJyDFrCC\",\"dzS6WBTMHyFEag6Fp\",\"rhS8qXRjZcpDXkwnE\",\"RZssSMwJcvA6JDnDD\",\"2PufnQcsHsfymufX3\",\"4TmgHkn5vqyHK3sYC\",\"CHvzhtXnv8HTbPQ56\",\"Wi4H6ayKsNDWWQCG5\"],\"quality\":[5,3,4,5,5,5,5,5,5,4,4,5,5,5,5,5,5,5,4,5,5,5,5]},\"tests\":{\"score\":0,\"rators\":[\"BkPgkDQGHm66X4Qai\"]},\"instructions\":{\"score\":0,\"rators\":[\"BkPgkDQGHm66X4Qai\"]},\"flags\":1},\"isHidden\":false,\"quality\":4.739130434782608,\"family\":[{\"_id\":\"brZ6PduJcYrvM4cm6\",\"language\":\"cpp\"},{\"_id\":\"jRXxKKZh5kGojDd2H\",\"language\":\"javascript\"},{\"_id\":\"bHfb35MfsjyM6DJge\",\"language\":\"python3\"},{\"_id\":\"zJWSpC59Nu5HMBzPZ\",\"language\":\"ruby\"}]}}"]