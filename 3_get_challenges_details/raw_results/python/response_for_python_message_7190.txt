a["{\"msg\":\"result\",\"id\":\"2301\",\"result\":{\"_id\":\"bEz8JJdiwFK74p849\",\"author\":\"Evgeny SH\",\"authorId\":\"8PwfYqoDQFThzNtvf\",\"code\":\"class NestedIterator:\\n    def __init__(self, nestedList):\\n\\t\\t\\t\\n    def next(self) -> int:\\n\\t\\t\\t\\n    def hasNext(self) -> bool:\\n\\t\\t\\t\",\"difficulty\":3.5789473684210527,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"YyLYCPrxRLgnmurCT\",\"instructions\":\"Implement a class iterator to flatten a nested list of lists of integers. Each list element is either an integer or a list. There can be many levels of nested lists in lists.\\n\\nThe class initializes with a nested list. It also has two methods:\\n\\n1. `next()` returns an integer in the order of appearance.\\n2. `hasNext()` returns `True` / `False` regarding if all integers have been retrieved or not.\\n\\nWrite the Class implementation for three required methods.\\n\\n### Examples\\n```\\nni, actual = NestedIterator([[1, 1], 2, [1, 1]]), []\\nwhile ni.hasNext():\\n    actual.append(ni.next())\\nactual ➞ [1, 1, 2, 1, 1]\\n\\nni, actual = NestedIterator([1, [4, [6]]]), []\\nwhile ni.hasNext():\\n    actual.append(ni.next())\\nactual ➞ [1, 4, 6]\\n\\nni, actual = NestedIterator([[[]], []]), []\\nwhile ni.hasNext():\\n    actual.append(ni.next())\\nactual ➞ []\\n```\\n\\n### Notes\\nN/A\",\"isFree\":false,\"isHidden\":false,\"lab\":\"from time import perf_counter\\ntic = perf_counter()\\n\\nni, actual = NestedIterator([[1, 1], 2, [1, 1]]), []\\nwhile ni.hasNext():\\n    actual.append(ni.next())\\nTest.assert_equals(actual, [1, 1, 2, 1, 1])\\n\\nni, actual = NestedIterator([1, [4, [6]]]), []\\nwhile ni.hasNext():\\n    actual.append(ni.next())\\nTest.assert_equals(actual, [1, 4, 6])\\n\\nni, actual = NestedIterator([[[]], []]), []\\nwhile ni.hasNext():\\n    actual.append(ni.next())\\nTest.assert_equals(actual, [])\\n\\nlst_tests = [\\n    [[9, [[80, 63], 75], [-94, 41, [12, [92]], -75], -95],\\n     [9, 80, 63, 75, -94, 41, 12, 92, -75, -95]],\\n    [[[[-62, 98], 52, [-39, 18], -58], [31, 19], [44, 28, [-23, 10], 49], -57,\\n      [66, [-63, [94, -4], -72], -50]],\\n     [-62, 98, 52, -39, 18, -58, 31, 19, 44, 28, -23, 10, 49, -57, 66, -63, 94,\\n      -4, -72, -50]],\\n    [[[-97, [81], -40], [-47, 49, -52], [42, -44, [-1, [61, [-74]]]], 68, 10,\\n      93, [-1, -71], 52, [6, -47, 30, [-15, 14], [79]], -58, -64, -69, -67, 10,\\n      [[[[[[[-66, 5, [-88], -17, 93, -3], 44], 84], -41], 65], 35], -16]],\\n     [-97, 81, -40, -47, 49, -52, 42, -44, -1, 61, -74, 68, 10, 93, -1, -71, 52,\\n      6, -47, 30, -15, 14, 79, -58, -64, -69, -67, 10, -66, 5, -88, -17, 93, -3,\\n      44, 84, -41, 65, 35, -16]],\\n    [[-88, [-3, 15], [36, -53, -87, -55, [-53, -47], 69], [43, [-82], -78], 80,\\n      [40, -26, [-34, -48], [62, 64], 30, 3, 6, 29], -22, [49, -26, -7], -76,\\n      [67, 57, -43, 23], [36, -70, -9, [69, 93]], [41, 27, 100, -76], [-61],\\n      [-28, 45, -10, 19], [23, [47, [52]], -75], [17, -50, -3, 57], [20, -91],\\n      [66, [-57, [100]]]],\\n     [-88, -3, 15, 36, -53, -87, -55, -53, -47, 69, 43, -82, -78, 80, 40, -26,\\n      -34, -48, 62, 64, 30, 3, 6, 29, -22, 49, -26, -7, -76, 67, 57, -43, 23,\\n      36, -70, -9, 69, 93, 41, 27, 100, -76, -61, -28, 45, -10, 19, 23, 47, 52,\\n      -75, 17, -50, -3, 57, 20, -91, 66, -57, 100]],\\n    [[[65, -17], [56, 55, [-94], 8], [-100, -40, 76], [-67, 90, 91, 81], -29,\\n      [89, [24, [-91, 31, -8], -94], 25], [-37, -94], [-81, [-25, -60], 8], -73,\\n      [31, 89, 87, -83, -65, 92, -44], [[-10], 63, 80, -41, -31, 97], -67, 37,\\n      [-72, 89, -75, [10, 45], -41], 71, [-94, -88, -2, 17, 22], [47, -60, -35],\\n      [90, 59, 39], [-9, -51, -13, [-5], -54], [-14, -55, 87, 29, 58, -37, -20],\\n      22, [10, [-85], 17], [-29, -47, 10, 65, -82, -71, -24, -67, 9, 7, 85,\\n      21], [-52, 56, [42, 70], -67, [-95, [25, [89], -62], 86], -79]],\\n     [65, -17, 56, 55, -94, 8, -100, -40, 76, -67, 90, 91, 81, -29, 89, 24, -91,\\n      31, -8, -94, 25, -37, -94, -81, -25, -60, 8, -73, 31, 89, 87, -83, -65,\\n      92, -44, -10, 63, 80, -41, -31, 97, -67, 37, -72, 89, -75, 10, 45, -41,\\n      71, -94, -88, -2, 17, 22, 47, -60, -35, 90, 59, 39, -9, -51, -13, -5, -54,\\n      -14, -55, 87, 29, 58, -37, -20, 22, 10, -85, 17, -29, -47, 10, 65, -82,\\n      -71, -24, -67, 9, 7, 85, 21, -52, 56, 42, 70, -67, -95, 25, 89, -62, 86,\\n      -79]],\\n    [[[[[[[[[[[-94], -26], -74], 91], -67], 80], -34], 34], 77], 64],\\n     [-94, -26, -74, 91, -67, 80, -34, 34, 77, 64]],\\n    [[[-91], [[25, [[-48, [[74, [[97, [[28, [[-52, [[56], [100]]], -98]], 77]],\\n     -40]], -24]], [[95]]]], [46]]],\\n     [-91, 25, -48, 74, 97, 28, -52, 56, 100, -98, 77, -40, -24, 95, 46]]\\n]\\n\\nfor t in lst_tests:\\n    ni, actual = NestedIterator(t[0]), []\\n    while ni.hasNext():\\n        actual.append(ni.next())\\n    Test.assert_equals(actual, t[1])\\n\\nprint('t_sec = {:.6f}'.format(perf_counter() - tic))\",\"language\":\"python3\",\"quality\":0,\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,5,3,5,2,4,3,3,2,1,5,2,2,3,3],\"quality\":[],\"rators\":[\"8PwfYqoDQFThzNtvf\",\"xn7uGNKeAwPEkP9oA\",\"mDWNyaaQ9hvPCRzSd\",\"s5M5RvgqR9BhB9JoC\",\"eHcgvkTGsH7ZziqBo\",\"eMuCpJ2spXWkJjWNz\",\"oLbXCR7s4H4ggqTos\",\"yjtdwc2AC4jA2RWtn\",\"8sNv5PTHa7XQ8bNqR\",\"iS5BrkGLzJyPK7nKt\",\"JKb5rhL6DKcCAypF9\",\"d8qtzoLB264iP8tdY\",\"aEm3Wvj2rFYRL8Lrb\",\"pnzfNatg3P32mMYQY\"],\"total\":15},\"flags\":0},\"summary\":\"Implement a class iterator to flatten a nested list of lists of integers. Each list element is either an integer or a list. There can be many levels of nested lists in lists.\\n\\nThe class initializes with a nested list. It also has two methods:\\n\\nnext() returns an integer in the order of appearance.\\nhasNext() returns True / False regarding if all integers have be\",\"tags\":[\"classes\",\"conditions\",\"data_structures\"],\"timestamp\":{\"$date\":1608651713512},\"title\":\"Flatten Nested List Iterator\",\"family\":[{\"_id\":\"bEz8JJdiwFK74p849\",\"language\":\"python3\"}]}}"]