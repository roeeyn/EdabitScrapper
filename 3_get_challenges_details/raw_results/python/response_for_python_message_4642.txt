a["{\"msg\":\"result\",\"id\":\"1037\",\"result\":{\"_id\":\"uerTkWm9K3oMtMZKz\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def sweetest_icecream(lst):\\n\\t\",\"difficulty\":1.5346534653465347,\"editorId\":\"PXAcsKkssS2yLyDv2\",\"familyId\":\"QCbbgX99tGocPcRvY\",\"instructions\":\"Create a function which takes a list of objects from the class `IceCream` and returns **the sweetness value of the sweetest ice cream**. Note that there is a class provided for you in the **Tests tab**.\\n\\n```python\\nclass IceCream:\\n  def __init__(self, flavor, num_sprinkles):\\n    self.flavor = flavor\\n    self.num_sprinkles = num_sprinkles\\n```\\n\\n* Each sprinkle has a *sweetness value of 1*\\n* Check below for the sweetness values of the different flavors.\\n\\nFlavors | Sweetness Value |\\n--- | --- |\\nPlain | 0\\nVanilla | 5\\nChocolateChip | 5\\nStrawberry | 10\\nChocolate | 10\\n\\n### Examples\\n```\\nice1 = IceCream(\\\"Chocolate\\\", 13)         # value of 23\\nice2 = IceCream(\\\"Vanilla\\\", 0)           # value of 5\\nice3 = IceCream(\\\"Strawberry\\\", 7)         # value of 17\\nice4 = IceCream(\\\"Plain\\\", 18)             # value of 18\\nice5 = IceCream(\\\"ChocolateChip\\\", 3)      # value of 8\\n```\\n\\n```\\nsweetest_icecream([ice1, ice2, ice3, ice4, ice5]) ➞ 23\\n\\nsweetest_icecream([ice3, ice1]) ➞ 23\\n\\nsweetest_icecream([ice3, ice5]) ➞ 17\\n```\\n\\n### Notes\\n- Remember to only return the **sweetness value**.\\n- `IceCream` class is provided (check **Tests** tab).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"class IceCream:\\n\\tdef __init__(self, flavor, num_sprinkles):\\n\\t\\tself.flavor = flavor\\n\\t\\tself.num_sprinkles = num_sprinkles\\n\\nice1 = IceCream(\\\"Chocolate\\\", 13)\\nice2 = IceCream(\\\"Vanilla\\\", 0)\\nice3 = IceCream(\\\"Strawberry\\\", 7)\\nice4 = IceCream(\\\"Plain\\\", 18)\\nice5 = IceCream(\\\"ChocolateChip\\\", 3)\\nice6 = IceCream(\\\"Chocolate\\\", 23)\\nice7 = IceCream(\\\"Strawberry\\\", 0)\\nice8 = IceCream(\\\"Plain\\\", 34)\\nice9 = IceCream(\\\"Plain\\\", 81)\\nice10 = IceCream(\\\"Vanilla\\\", 12)\\n\\nTest.assert_equals(sweetest_icecream([ice1, ice2, ice3, ice4, ice5]), 23)\\nTest.assert_equals(sweetest_icecream([ice7, ice10, ice1, ice6, ice8, ice10, ice2, ice2]), 34)\\nTest.assert_equals(sweetest_icecream([ice10, ice10, ice6, ice8, ice4]), 34)\\nTest.assert_equals(sweetest_icecream([ice2, ice10, ice6, ice9, ice7]), 81)\\nTest.assert_equals(sweetest_icecream([ice10, ice6, ice4, ice1, ice7, ice8, ice6]), 34)\\nTest.assert_equals(sweetest_icecream([ice3, ice1]), 23)\\nTest.assert_equals(sweetest_icecream([ice6, ice7, ice5, ice4, ice3]), 33)\\nTest.assert_equals(sweetest_icecream([ice4, ice8, ice9]), 81)\\nTest.assert_equals(sweetest_icecream([ice5, ice7]), 10)\\nTest.assert_equals(sweetest_icecream([ice5, ice3, ice6, ice2, ice7, ice2, ice7, ice2]), 33)\\nTest.assert_equals(sweetest_icecream([ice1, ice9, ice10, ice9, ice7, ice1, ice9]), 81)\\nTest.assert_equals(sweetest_icecream([ice1, ice4]), 23)\\nTest.assert_equals(sweetest_icecream([ice7, ice4]), 18)\\nTest.assert_equals(sweetest_icecream([ice1, ice8, ice6, ice7, ice3, ice2, ice3, ice7]), 34)\\nTest.assert_equals(sweetest_icecream([ice7, ice8, ice4, ice4, ice5, ice1]), 34)\\nTest.assert_equals(sweetest_icecream([ice10, ice10, ice9, ice4, ice7, ice9]), 81)\\nTest.assert_equals(sweetest_icecream([ice3, ice10, ice1]), 23)\\nTest.assert_equals(sweetest_icecream([ice3, ice4, ice7, ice3, ice7, ice10, ice2]), 18)\\nTest.assert_equals(sweetest_icecream([ice5, ice9, ice9, ice9, ice7, ice5, ice9, ice7]), 81)\\nTest.assert_equals(sweetest_icecream([ice4, ice9, ice2]), 81)\\nTest.assert_equals(sweetest_icecream([ice8, ice2, ice2, ice2, ice4, ice8]), 34)\\nTest.assert_equals(sweetest_icecream([ice4, ice9, ice4, ice3, ice3, ice2, ice5, ice2]), 81)\\nTest.assert_equals(sweetest_icecream([ice8, ice10, ice5]), 34)\\nTest.assert_equals(sweetest_icecream([ice10, ice3, ice2, ice1, ice9]), 81)\\nTest.assert_equals(sweetest_icecream([ice8, ice3, ice4, ice5]), 34)\\nTest.assert_equals(sweetest_icecream([ice10, ice8, ice6, ice7, ice9, ice4]), 81)\\nTest.assert_equals(sweetest_icecream([ice5, ice4, ice6, ice6, ice1]), 33)\\nTest.assert_equals(sweetest_icecream([ice6, ice8, ice2, ice10, ice7, ice10]), 34)\\nTest.assert_equals(sweetest_icecream([ice1, ice9, ice7, ice3]), 81)\\nTest.assert_equals(sweetest_icecream([ice7, ice1, ice9, ice6, ice7, ice10, ice2, ice3]), 81)\\nTest.assert_equals(sweetest_icecream([ice5, ice1, ice7, ice6, ice8, ice1, ice8]), 34)\\nTest.assert_equals(sweetest_icecream([ice10, ice9, ice2, ice4, ice10]), 81)\\nTest.assert_equals(sweetest_icecream([ice3, ice7, ice10]), 17)\\nTest.assert_equals(sweetest_icecream([ice10, ice5, ice4]), 18)\\nTest.assert_equals(sweetest_icecream([ice9, ice2, ice4, ice8, ice3, ice3]), 81)\\nTest.assert_equals(sweetest_icecream([ice6, ice3, ice9, ice8, ice2, ice6]), 81)\\nTest.assert_equals(sweetest_icecream([ice10, ice3]), 17)\\nTest.assert_equals(sweetest_icecream([ice10, ice7, ice5, ice2, ice9]), 81)\\nTest.assert_equals(sweetest_icecream([ice10, ice10, ice4, ice1, ice9]), 81)\\nTest.assert_equals(sweetest_icecream([ice9, ice2, ice6, ice4, ice10, ice3]), 81)\\nTest.assert_equals(sweetest_icecream([ice8, ice10, ice1, ice7, ice8, ice9, ice1]), 81)\\nTest.assert_equals(sweetest_icecream([ice7, ice5, ice3, ice8, ice1, ice9]), 81)\\nTest.assert_equals(sweetest_icecream([ice2, ice6, ice3]), 33)\\nTest.assert_equals(sweetest_icecream([ice6, ice6]), 33)\\nTest.assert_equals(sweetest_icecream([ice9, ice6, ice8, ice3, ice2, ice2]), 81)\\nTest.assert_equals(sweetest_icecream([ice1, ice3, ice3, ice6]), 33)\\nTest.assert_equals(sweetest_icecream([ice8, ice6]), 34)\\nTest.assert_equals(sweetest_icecream([ice1, ice1]), 23)\\nTest.assert_equals(sweetest_icecream([ice4, ice2, ice3, ice9, ice5, ice10, ice6]), 81)\\nTest.assert_equals(sweetest_icecream([ice10, ice8, ice4, ice3, ice9, ice8, ice1, ice10]), 81)\\nTest.assert_equals(sweetest_icecream([ice5, ice8, ice5]), 34)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[1,1,1,1,1,1,1,1,1,2,2,1,1,1,2,1,0,2,1,3,2,1,2,2,2,1,1,3,1,1,0,0,2,1,3,2,1,2,1,0,5,1,0,2,1,2,2,1,1,1,3,2,2,2,2,2,1,2,2,1,1,0,1,0,0,2,2,1,3,2,2,2,0,1,3,2,2,0,2,1,0,3,2,2,2,2,2,2,1,2,2,2,2,1,1,2,1,2,1,2,1,2,2,2,1,2,1,0,2,1,2,2,2,0,0,3,1,2,2,2,2,1,0,2,2,0,2,0,3,1,1,2,3,2,2,2,2,2,1,2,0,1,2,1,2,1,1,3,1,2,1,1,2,2,2,1,2,1,2,2,1,2,1,1,0,1,0,1,2,2,1,0,2,1,2,2,2,3,2,2,2,2,1,2,1,0,2,2,2,1,2,1,2,2,2,2,1,2,2,1,4,2,0,2,2,2,2,2,1,2,0,0,2,3,2,1,2,0,1,2,2,2,1,2,2,3,0,2,2,1,2,2,1,2,2,0,2,2,2,0,2,0,1,2,2,1,2,2,2,1,2,2,2,2,2,1,2,1,2,2,1,2,2,2,1,3,3,0,2,2,2,0,1,2,3,1,1,2,2,2,1,2,0,2,2,2,2,2,2,2,2,0,1,2,0,2,2,0,2,0,2,1,2],\"rators\":[\"PXAcsKkssS2yLyDv2\",\"4CFzv558qbGcpQwc4\",\"LQxof8pGabGuWP7Gn\",\"u5u2YpHXiNgzDNJdX\",\"AasGs8AeX9Lcb9xJn\",\"2fxapKr8XGdNeaKi2\",\"C4QntmkYtB89GNtpd\",\"9Ly8afdtofp8DXzrt\",\"Ezmu66ftDjQcApWeZ\",\"sz8ufn9i8zeiGWpAy\",\"hQJZAKtGhbvtiHRn8\",\"gb9rvGus2Jv7bjZSs\",\"hnyhBFWwNCz9mDfSi\",\"mybpojPXaZigaqsAD\",\"Ycj4iTJGFyvC4bXek\",\"2xB3aoGbxxxcMEJwe\",\"ffJxWJdM8vmgigeLT\",\"RZwfR4TR6fopHpdCD\",\"mCKqRAPMTht5QBnXo\",\"23oi2a3vQwhtLEbSj\",\"v3fjGuc7Pq4yjFygS\",\"PSrcg6fy835R4c5CW\",\"HPMiZMZ2WGu4FWaRH\",\"N7GPFEhCaiQ79MKjz\",\"aRqQ42J5zqCmBNd8w\",\"dHZqT6h4JMwk5fPC8\",\"vWgBJaEtcu3XoYuer\",\"hS8WBiFoAjP5Js6Wv\",\"s5M5RvgqR9BhB9JoC\",\"SPQDPHGT83KCqgb6K\",\"yabtHTtycsWhcGBfD\",\"4y2bxsHwifCdZXAQA\",\"yZvzB3qFb8pkHy4dg\",\"mxX4rH5ELYkdZ2Mbw\",\"ovqQRfyvmEDypjrnC\",\"yKttxy9JGn5Jzwuj6\",\"4tgBydK887PitgAoi\",\"zg8GmMSP2LkHBtAzy\",\"tAF9Gf6PiGogbZuWs\",\"8JyqsSbN2FJXPr3cw\",\"wx7BHoB5zSSQJpBXy\",\"MKT7khMBGXzA22ykf\",\"Q7Qy8oL8agXcYFDyP\",\"cR3ibTMxLyEdDFCHY\",\"rJGeRSCjGzRuYfHZS\",\"A5g5PhdQpmF7ohwsC\",\"uw8E83imJYpQiiPpP\",\"Yp7uvStL97cC9fKkY\",\"geZ3oLjhh9KAw7yHs\",\"NuqGt5u3s7vJ7HBGR\",\"BP6T8n5MxbWJxAtxR\",\"YTRAyZFtn9m68HBLK\",\"wwMcJQRvf3X59Jyev\",\"vLrq4dEDMM2wd68Dc\",\"aEm3Wvj2rFYRL8Lrb\",\"jNvegJWCk5HCtEMbK\",\"BXPLRXsvSyA2xZBLJ\",\"2iFe3EHEH2YdhSKrs\",\"QN3AHCaTykyuE5k8B\",\"2QGRoQn2dRq3scu7k\",\"3PoPSgExQ7hrpLvkm\",\"RX8vfGmaNWLahPWpd\",\"wq8LFjWGvazMzGkCD\",\"9pzFiFK3ANLjQfnr2\",\"4Sntowj2cbMFRDMJa\",\"8PwfYqoDQFThzNtvf\",\"TFaCsTHDyYBnyKxpJ\",\"aQHA4epdjF9u9SFKF\",\"ZNnsMeNkdDhHjSrZb\",\"gJYuGdkXEWWmGRLzu\",\"So6PHm74mfJuY2WTs\",\"TrSnx94ydx5c6JDB4\",\"9uZpgAtSuPZ7W7DL6\",\"q5a96XumccZyhQNyL\",\"KRSKj7ikX2ytWFmod\",\"KRmxvA4mWgfKvHmYN\",\"KpHrC7WPEojnzgEtz\",\"Cc2Cgj4MWXZxsTooC\",\"LjoNTyGEMfBpMHHus\",\"jd9GKhQqSdkeMeCTM\",\"iCDqhZGvszrXpDRuW\",\"Jqk2uJZZxEv5wZFze\",\"6RjvoM4ZdPyYQWaRX\",\"MEhZxXF5P9vqvzPLx\",\"jgimicGErFe9RZtAf\",\"DEDniTrstQYGounXT\",\"Fk9kLwoG4Brf4KsKf\",\"BMnpcJnNa7bc8xDby\",\"fKNBLGL4kPqaEAY72\",\"M8dQuMrEpP8Hc3tHN\",\"FgkYtHLxeD8pETJ8T\",\"nzKTXzTqPT4RDTHvb\",\"khFpmvAEFhfea4zdG\",\"KdNDysEsy2TW5QRJ2\",\"xXxcBvT3poSuSCgBN\",\"B7s63hpQoBswMYPBs\",\"jNE5AHcJQWXz7efuP\",\"dCsoqAmAXnhNBDrbv\",\"gPvrBxxySDP2vpux3\",\"vQizduvjSgzEkCTxZ\",\"qiigShZXZq9EdvTFt\",\"LDtBRPtAiDgrhjxR5\",\"YFuN2JFXepWaW5RwW\",\"KWpKvLn6XJWcBF4jt\",\"jufL2dZQH8tBJajpr\",\"nzqwymsdwC7gxAmip\",\"DHBGz3r4dCryvEDAp\",\"tSFYadMLQgCqx3mnM\",\"69hNsiJ43SLHyTdse\",\"66a9xX73nmTEuKs9k\",\"3qYxBYzigw9hXBwB5\",\"nfXGHENb5md7m355s\",\"3Y69wSDy33D6Tp4EC\",\"C9LKGu2g5hSijvDzA\",\"FEYpu9RWysAgW3XnP\",\"DxxNN37iEz7b8t2nf\",\"awSCTGAhBh6k5hNE4\",\"ahk2qiXKJA753wAJk\",\"a777e8chPvJkY3tKa\",\"zT9LpkiwYjLviYYW6\",\"JS3hNM3XXkxPdg3yk\",\"ZqjP4M6dzu32To33K\",\"bCDTKAoS4biDmQ64Y\",\"oB8MCqep5GBXXuhB8\",\"XrqNzJ2FRG8HnGiR6\",\"BQgoFPHLu2GhosNGt\",\"R4SjTgDnpigJYDLyL\",\"yHbTMNQXXdLzDkvhE\",\"u5hr8LwHsJTDxoDsk\",\"dKtYzJHAswturm7Fe\",\"kkyZ4oyYQC898Nttj\",\"nFhYP8GPCW4qYLHTa\",\"LDfAjJ6TbJza7YRSR\",\"2ptN2mhjFwFcHyPZd\",\"oSHy72cPANqpbBF8X\",\"eMuCpJ2spXWkJjWNz\",\"JQ5uoxA4WZgN6HyJk\",\"CMdKkCoZdTpucBeTP\",\"DpqiRAm2yo3W2x4HX\",\"H4abACFDH5t8CnnyH\",\"Wv2vJnEj8ywNmARoF\",\"3cF6NXq3ZEwdkgSjb\",\"kRAYfZ4CtCh5E8ugt\",\"sfoAF6eygyfp6MWx3\",\"n2BRY9X8899dcG8Bw\",\"syRNbbPdLCGXbH2Gy\",\"8TAYWzqJAkXq2MAba\",\"MK8HigdFigfJzHhyo\",\"zd9FLSzsGz3evKafy\",\"iojEnnY9FsMfYzp6f\",\"pPtmnJ7q9QchoG2Jq\",\"fQjYXfm4Y8Kfkc8fx\",\"NNE5HNRXAkmhrWgyQ\",\"sLteh6cLh6gLKB2mQ\",\"JZbBYihgT6m7bKvgc\",\"Ecg4m7srYGgZsb4Ck\",\"s6qiPXptvyxxEy3vm\",\"yjtdwc2AC4jA2RWtn\",\"dzS6WBTMHyFEag6Fp\",\"p5EN3tadeCfPkW3CB\",\"9PoKio8SZZtinmTCf\",\"ZJQW3bL2KzxJcdEoc\",\"nys6kJatAFrKL59Pf\",\"Q9afpRu3u8zuWuzLQ\",\"CTKmXtrqDYqJBnuy8\",\"qNvnJkCzNppaNGzk4\",\"HqmxnQJM66Y57twhn\",\"ta5CrWnBCRusD2WMo\",\"mmt7jwqbmSjzRSvqh\",\"oBcs8GLX2ZFLXQy8y\",\"q6QsMYNMpPNtmyTeW\",\"8zQnyekbSwzhoJymu\",\"cYoWJ8sQE3mdBhJ9D\",\"WQubx7DAkG6WZE8FA\",\"P7NmFbCJ5offXMRvB\",\"b3BWzq6Yu8nswak5u\",\"mzsaCBQP3e6YourDN\",\"YA7SDhpgEtsqynvNL\",\"BrTDhPJcACL2bsrpJ\",\"XkJ9G89xpZiTj58Eq\",\"tXNgbxmMDqkvLc76o\",\"8sNv5PTHa7XQ8bNqR\",\"PFmCJw9aHadXJFPrX\",\"TPhfpB5tzQWSSn67n\",\"9FCeFzjPA4jrQ7oHW\",\"YwbXmhvQQjZuMQbKb\",\"RehJGBFS6CYiWdjZx\",\"KLmLKaJPfsYxp42p2\",\"BukjbnZ6zC2otopwc\",\"hkiz2Nv927cYGrA86\",\"DYDJTyGgKFnBRLm2r\",\"tpxMgkGSHwBjS95Ta\",\"Kh3Pc2ZRusurLaMyP\",\"mG8HqKiAQFTdRZthG\",\"HMG4ZWX4C7G7HsvYz\",\"3jr2dyncMZqhkMHTP\",\"5Z4o2pWDzmbpw4JHJ\",\"hw5macuthRQmKoXkN\",\"gXTAie79kiw28tx5u\",\"22kSvGZ9z9J2KK8nc\",\"TcAiYpcDXPnQZiSnm\",\"gpYxT9JQ2ypE8E8iq\",\"9CoqdidjM9KbeKnHY\",\"6HgMANhu6WiGyXSGN\",\"QRv96jmNaYsWkxQEG\",\"J3upzLHuEwXH7Z2hx\",\"hKqn2TRhqwwyLcE66\",\"vSvippNru5pBnJQJn\",\"QCvvnevRLhBY8XBJk\",\"j49s8dHmmiyPxZmWj\",\"gg4hgFGgmvK9ZxENE\",\"pdum9ZEFzqdXqtjyQ\",\"dBzwBtRjZqB98DJeB\",\"dYPkStFnLvAMsHSzZ\",\"cAP3n5NY64uoMwzRR\",\"dj5AyG5fWP8FdsSmZ\",\"qAby4AWXmTNeusvg3\",\"5S9nX4rKsnCcnv4Cz\",\"DqLLJmvonxtaq5nbv\",\"RGMbFMZXJr7DhcAJy\",\"5HCu9Ydd86QgHDRNP\",\"wRttWTM59y8m5mx7x\",\"BCPNmfdwmRDs6FqcN\",\"BajWtLookqBgcwmyv\",\"5XiuAqicKD4hBdu63\",\"ANbSYXiYsp4addoDq\",\"4fjSgcqhQQZM2ZFRP\",\"kNrnnMxhFZztMTBAX\",\"d8qtzoLB264iP8tdY\",\"QTZTmQEmkPv5sxQL4\",\"SYoBM3m2TMLYkvqZ8\",\"CEd9tLdXeDeNHSzys\",\"5hQnRWiKkhgKJXNMP\",\"DpnYcMphntjsQ96qg\",\"RyWd7ieDg3PAWLpBa\",\"oyKcm3zqdy8Ko5P5d\",\"FSe2mfd98g84k5DW6\",\"D2B5zXAoub33DEC86\",\"NPHbTDFiEfTMjEXh4\",\"tqD4R4zQx5TpdeEYq\",\"vCxuabDxEv9YC3Szb\",\"9MER8SZ9Xo6xNYMj8\",\"TuZ7Lnyk7dq3tJNmt\",\"LskiHJtzYpBuCmjaP\",\"r9seLLH2zLkN8msP8\",\"TEWdTsJKsK8tREtTo\",\"J5T8gZqiZXFuFDTQ7\",\"csFCABy3kwwpoQXNy\",\"e2vWoEQh5g3c7NS5o\",\"eFh8z7sMmxkrFWZv9\",\"3pxHTZBsv7MKzFG6Y\",\"fznzd3qnvtbFkkizz\",\"eybCguAWtbpvr544M\",\"nM863JaGJjWZfZ3Jb\",\"iF4tdvn5sA9CM4T6T\",\"Lg4t6SEWgtYz4u7Cj\",\"faSkthCez3xqBCi35\",\"CB48GHbw7xtwmiuPn\",\"B3Qn6Y3PJJcDRLKoK\",\"eqa6cvt5yha7z7dPt\",\"axdSNLZpiCDF8RS6n\",\"5prBnBm3YszWAYPTp\",\"iKCnQydNKZp3KoCoP\",\"rx88g3SpXfGecJigj\",\"PWgzeK859suojbrRx\",\"sftR9DgM4jpwtxfAM\",\"oN7LLGSx4FcGmPDmL\",\"rp78xovPotpBHRXxR\",\"nFbmNzMQ38TncmfQX\",\"mJpS4nisA4cdBapyJ\",\"GGdmhAvxXhqhhibJN\",\"eYfPWvZwnJQkHbSTK\",\"7txFzDQ43vJ7qCY88\",\"sHjfbGQGLHE6JR6qu\",\"Ds7L5bksw2QRHjrKL\",\"hwa6rDC4yJfWFEiTt\",\"nc7bRhkxgKyqusYe3\",\"KJCDwGkoXh8qtbbKr\",\"wqdX4wXbZGgJ9Fyb7\",\"kQH5b8MXJunh84Czq\",\"YcCLwitFMAEJSnxAW\",\"jNkvmaoEXcQjsgS3j\",\"ijNKM8DuspXuAnC4y\",\"BG9GLy7SLRexTz6rx\",\"2EbDCCJJvCfKkbYia\",\"vwXiWptwYHBuAhw5b\",\"cXvHGNrC6CRC4yM3m\",\"WsCqifua4yHhKp6N9\",\"NrRa4TS6uZR9xuXRt\",\"pfmr6YpnE5E7guZ6d\",\"yN7aCFGmmQMAWhGMb\",\"6MQcTaBiBhRpvHj9S\",\"bvmTE46bfcM4ogj34\",\"44zR2oW5x8XNG9GZJ\",\"YmQb9Mo4Xcg2vzgbn\",\"Wpn95NqWxncQrwNgz\",\"AFfw7cGg83uYk2Miy\",\"67jCzLbT3zWMdtFm8\",\"zNhgWKdWpp5SoTZmp\",\"N2wnZXkhDH86mgjQ8\",\"mDWNyaaQ9hvPCRzSd\",\"i3GA5qpPp2cGSxWqq\",\"CHvzhtXnv8HTbPQ56\",\"4yMggPMnAMqJN6TeR\",\"A7G8WgwhjsEDTB4DA\",\"dhokkFcukKdYsYA6s\",\"yod5YhKtPqw2GfG9B\",\"zBk2cwJ9SLAhFuM3K\",\"PTDFuxAzou7W6asWt\",\"XHShZ3WMPgGEA2vkR\",\"PC3pLs36zNzpRDSuE\",\"snnZHAz9fZpDjimi5\",\"sbJcFfQjQ59Wfg4Cd\",\"AQSqD9oNv2uPfxZCR\",\"XvKtJgQ8YgJyrbySX\",\"9ivvGvJGvtQfigQaZ\",\"mvJBakQ35CWAnbbEZ\",\"Afnps7TJQuS9sipMb\",\"8BFSTCnoe2QggN64c\",\"bv4ycSophchSEFoK9\",\"ErXNo3Tx2k35RPzZM\",\"PH32cNxBjrK4a28sn\",\"LNCb5rksJLJ43L4Nw\",\"fbyQH246PaDcXumC4\",\"chRdXAA6chuTg7K6C\",\"2MjzJ7yxh3eT3xbng\",\"nkH3HfJXLMNcBMM79\",\"XD5nmvKQchKezPXhy\",\"H5sfMFuQo6yHE8GFL\",\"reSPwrcdzBAnDWs2E\",\"JKb5rhL6DKcCAypF9\",\"2PufnQcsHsfymufX3\",\"858b7KAn3NyWjGR84\",\"4Lwjr34ypKNQNQCar\",\"4TmgHkn5vqyHK3sYC\",\"d9LBRxvADNBB5QJMB\",\"pduNK68oazqQTtbLp\",\"wsi3xpmE8Wesk3sxB\",\"B4y8aoyXJtskYPFEL\",\"ey3CASd6Je5LEJzfB\",\"yAouD3PxzED8a4gap\",\"acFDzp9EJzHg8c2rD\",\"2qtde7moqrzm7B4Ht\",\"wjc4iejpErBhxWwHo\",\"NzbRqGWspQnWMoDrF\",\"rQA9SE8nuwFueaHsR\",\"wrL4iX2CCSqDCCty3\",\"Wi4H6ayKsNDWWQCG5\",\"RoGGD5cpHb4ftdLDv\",\"5QN8R22z43SrwoHDz\",\"naZ3i6sSDPwsieDH7\",\"iDBoAJGB2csBbBPyv\",\"DhfJpC3Y72teNfiKE\"],\"total\":371,\"quality\":[4,5,3,4,5,3,5,4,3,5,3,5,5,5,5,4,5,5,1,5,5,5,3,5,5,4,5,5,5,4,5,5,5,5,5,5,5,4,1,5,5,5,5,4,4,4,4,5,3,5,4,3,4,5,5]},\"flags\":2},\"summary\":\"Create a function which takes a list of objects from the class IceCream and returns the sweetness value of the sweetest icecream. Note that there is a class is provided for you in the Tests tab.\\n\\nclass IceCream:\\n  def init(self, flavor, num_sprinkles):\\n    self.flavor = flavor\\n    self.numsprinkles = numsprinkles\\n\\nEach sprinkle has a sweetness value of 1\\nCheck\",\"tags\":[\"objects\",\"classes\",\"numbers\"],\"timestamp\":{\"$date\":1582387468483},\"title\":\"The Sweetest Ice Cream\",\"quality\":4.363636363636363,\"family\":[{\"_id\":\"HKmJFmZZCX53ff4ke\",\"language\":\"javascript\"},{\"_id\":\"uerTkWm9K3oMtMZKz\",\"language\":\"python3\"}]}}"]