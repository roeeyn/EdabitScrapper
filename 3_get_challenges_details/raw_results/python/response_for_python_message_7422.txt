a["{\"msg\":\"result\",\"id\":\"2417\",\"result\":{\"_id\":\"PgivAghJdMY7HM2pK\",\"author\":\"RandyWaterhouse\",\"authorId\":\"AraFx3EGW7PsqMPWt\",\"code\":\"class FourVector:\\n\\t\",\"difficulty\":4.136363636363637,\"quality\":0,\"editorId\":\"AraFx3EGW7PsqMPWt\",\"familyId\":\"aKCpuxiChuyq9icZe\",\"instructions\":\"In this challenge, we extend the `FourVector` class we created in the [first installment](https://edabit.com/challenge/cPxexgGxmCMi4kas8) of the FourVector collection.\\n\\nSo, please add the following features to the class `FourVector`:\\n- Support multiplication of Four Vectors (FV). This should include multiplication of two FVs as well as multiplications 'scalar times FV' and 'FV times scalar'. Think about magic methods like `__mul__`...\\n- A method `GetLength` which returns the length of the FV. The length is the square root of the absolute value of the product of the FV with itself. **Attention:** contrasting to 'normal' vectors the product of a FV with itself may be negative! For details refer to the Wiki article (see resources). \\n- A method `GetCausalStructure`. Let p the product of the FV with itself. The method then returns \\\"lightlike\\\" if p=0, \\\"spacelike\\\" if p<0 and \\\"timelike\\\" if p>0. The causal structure has an important meaning in special relativity: a lightlike FV can be connected to the origin `(0, 0, 0, 0)` by a ray a light, a timelike FV is connected to the origin by 'more time than space' which means there can be a causal connection (cause and effect) between the origin and the event represented by the FV. In contrast, for a spacelike FV there is 'more space than time' and there can't be a causal connection without violating the 'speed limit' of special relativity.\\n\\n### Examples\\n```\\nv1 = FourVector([1, 2, 3, 4])\\nv2 = FourVector([1, 0, 0, 1])\\n2 * v1 ➞ FourVector([2, 4, 6, 8])\\nv2 * 3 ➞ FourVector([3, 0, 0, 3])\\nv1 * v3 ➞ -3\\nv1.GetLength() ➞ 5.291502622129181\\nv1.GetCausalStructure() ➞ \\\"spacelike\\\"\\n```\\n\\n### Notes\\nPlease save your `FourVector` class for later use, we will add new methods in upcoming challenges in this series!\",\"isFree\":false,\"isHidden\":false,\"lab\":\"v0a = FourVector()\\nv0 = FourVector([0, 0, 0, 0])\\nv1 = FourVector([1, 2, 3, 4])\\nv2 = FourVector([1, 0, 0, 1])\\nv3 = FourVector([1, 0, 1, 0])\\nv4 = FourVector([-1, 4, 1, 2])\\nv5 = FourVector([-1, 37, 55, -108])\\nv6 = FourVector([0.5, 1.0, -2.0, 10.0])\\nv7 = FourVector([-0.25, 1.2, -2.7, 33.3])\\nv8 = FourVector([-1, 2, -3, 4])\\n\\n# multiplication operation \\\"FV times FV\\\":\\nTest.assert_equals(v1 * v2, -3)\\nTest.assert_equals(v3 * v4, -2)\\nTest.assert_equals(v4 * v3, -2)\\nTest.assert_equals(v5 * v5, -16057)\\nTest.assert_equals(v5 * v6, 1152.5)\\nTest.assert_equals(v7 * v6, -339.725)\\n\\n# multiplication operation \\\"Scalar times FV\\\":\\nTest.assert_equals(2 * v1, FourVector([2, 4, 6, 8]))\\nTest.assert_equals(1 * v3, v3)\\nTest.assert_equals(0 * v3, FourVector())\\nTest.assert_equals(-5 * v4, FourVector([5, -20, -5, -10]))\\nTest.assert_equals(-0.25 * v7, FourVector([0.0625, -0.3, 0.675, -8.325]))\\n\\n# multiplication operation \\\"FV times Scalar\\\":\\nTest.assert_equals(v1 * 2, FourVector([2, 4, 6, 8]))\\nTest.assert_equals(v3 * 1, v3)\\nTest.assert_equals(v3 * 0, v0)\\nTest.assert_equals(v4 * (-5), FourVector([5, -20, -5, -10]))\\nTest.assert_equals(v7 * (-0.25), FourVector([0.0625, -0.3, 0.675, -8.325]))\\n\\n# GetLength:\\nlengthes = [0.0, 5.291502622129181, 0.0, 0.0, 4.47213595499958, 126.7162183779172, 10.23474474522936, 33.42988932078597, 5.291502622129181]\\nvectors = [v0, v1, v2, v3, v4, v5, v6, v7, v8]\\nfor i in range(len(vectors)):\\n    Test.assert_equals(round(vectors[i].GetLength(), 5), round(lengthes[i], 5))\\n\\n# GetCausalStructure:\\nstructures = ['lightlike', 'spacelike', 'lightlike', 'lightlike', 'spacelike', 'spacelike', 'spacelike', 'spacelike', 'spacelike']\\nfor i in range(len(vectors)):\\n    Test.assert_equals(vectors[i].GetCausalStructure(), structures[i])\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,5,5,2,5,5,2,4,5,5,5,3,3,5,2,5,1,4],\"quality\":[],\"rators\":[\"AraFx3EGW7PsqMPWt\",\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\",\"xn7uGNKeAwPEkP9oA\",\"ygDJ7HEzRoJZyPEF4\",\"hRAd998MG8Jzdpxj6\",\"h4x2jaMdj5aQZbW5g\",\"fSQSHjW3e72MrWxbD\",\"7TQ3L6GtmN6kQGcdZ\",\"eHcgvkTGsH7ZziqBo\",\"38cEoB5NrMG6ompwH\",\"eMuCpJ2spXWkJjWNz\",\"gJYuGdkXEWWmGRLzu\",\"yjtdwc2AC4jA2RWtn\",\"iS5BrkGLzJyPK7nKt\",\"d8qtzoLB264iP8tdY\",\"s5M5RvgqR9BhB9JoC\"],\"total\":17},\"flags\":0},\"summary\":\"In this challenge, we extend the FourVector class we created in the first installment of the FourVector collection.\\n\\nSo, please add the following features to the class FourVector:\\nSupport multiplication of Four Vectors (FV). This should include multiplication of two FVs as well as multiplications 'scalar times FV' and 'FV times scalar'. Think about magic metho\",\"tags\":[\"physics\",\"math\",\"classes\"],\"timestamp\":{\"$date\":1600061259889},\"title\":\"Four Vectors Part 2: Multiplication and Lengthes\",\"family\":[{\"_id\":\"PgivAghJdMY7HM2pK\",\"language\":\"python3\"}]}}"]