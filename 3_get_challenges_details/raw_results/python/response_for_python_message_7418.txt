a["{\"msg\":\"result\",\"id\":\"2415\",\"result\":{\"_id\":\"kvJrazoaQN7iwNeGw\",\"author\":\"Evgeny SH\",\"authorId\":\"8PwfYqoDQFThzNtvf\",\"code\":\"def snake(field, moves):\\n\\t\",\"difficulty\":4.133333333333334,\"quality\":0,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"cCTeteRqPtZ53ox9e\",\"instructions\":\"Write a function that can simulate a crawling snake.\\n\\n![Alternative Text](https://edabit-images.s3.amazonaws.com/Snake-1.gif)\\n\\n### Input\\n- `field` — A rectangular matrix, list of lists, consisting of numbers corresponding to: 0 – empty cell, 1 – food, 2 – the head of the snake.\\n- `moves` — A list of tuples.\\n\\nEach tuple represents the following moves:\\n- `(1, 0)` — Down\\n- `(0, 1)` — Right\\n- `(-1, 0)` — Up\\n- `(0, -1)` — Left\\n\\n### Output\\nThe final picture of the field, which consists of the snake as a collection of `2` in certain cells and remaining food `1` that has not been eaten during the snake moves.\\n\\n### Rules\\nThe snake’s head moves in the direction specified by the given _move_. If the head moves into an empty cell, then the whole body moves in an orderly fashion (the length of the snake does not change). If the head moves into a food cell, then the body does not move, the new head takes the position of the food (the length of the snake extends by one). If the head bumps into a wall, then _it goes through_ and the head pops up from the opposite wall (on the same row if the move is horizontal, on the same column if the move is vertical).\\n\\nIf the head has to move into its own body, excluding the tip of the tail, then the snake bites itself and inflicts a mortal injury. In this case, stop the function execution, return the string `\\\"Game Over\\\"`.\\n\\nThe head cannot catch the tail. It is assumed in this game that when the head moves, the tail also moves and vacates the cell.\\n\\nThe food cell can only be eaten once! If the snake crawls around and passes the cell again, then this cell has become an empty cell.\\n\\n### Examples\\n```\\nf = [\\n  [0, 0, 0, 0, 0, 1],\\n  [0, 2, 0, 0, 1, 0],\\n  [0, 0, 0, 1, 0, 0],\\n  [0, 1, 0, 0, 0, 0]\\n]\\n\\nm = [\\n  (0, 1), (0, 1), (0, 1), (-1, 0), (0, 1), (0, 1), (0, 1), (1, 0),\\n  (1, 0), (1, 0), (0, 1), (0, 1), (-1, 0), (0, 1), (-1, 0)\\n]\\n\\nsnake(f, m) ➞ [\\n  [0, 0, 0, 0, 0, 0],\\n  [0, 0, 0, 0, 2, 0],\\n  [0, 0, 0, 2, 2, 0],\\n  [0, 0, 2, 2, 0, 0]\\n]\\n```\\n\\n### Notes\\n- At the beginning of the game, the snake’s body is only the head (total length is one).\\n- After the head executes the given list of moves, the happy snake stops and takes a rest. The function output should display the snake’s body's final position in the field.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"from time import perf_counter\\ntic_0 = perf_counter()\\n\\nf = [\\n    [0, 0, 0, 0, 0, 1],\\n    [0, 2, 0, 0, 1, 0],\\n    [0, 0, 0, 1, 0, 0],\\n    [0, 1, 0, 0, 0, 0]\\n]\\nm = [(0, 1), (0, 1), (0, 1), (-1, 0), (0, 1), (0, 1), (0, 1), (1, 0),\\n     (1, 0), (1, 0), (0, 1), (0, 1), (-1, 0), (0, 1), (-1, 0)]\\nresult = [\\n    [0, 0, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 2, 0],\\n    [0, 0, 0, 2, 2, 0],\\n    [0, 0, 2, 2, 0, 0]\\n]\\ntic = perf_counter()\\nTest.assert_equals(snake(f, m), result)\\nprint('Test_{} Time = {:.6f}'.format(0, perf_counter() - tic))\\n\\nlst_test = [\\n    (([[1, 0, 0, 0],\\n       [0, 0, 2, 0],\\n       [0, 0, 1, 0],\\n       [0, 0, 0, 1]],\\n      [(1, 0), (1, 0), (0, 1), (0, 1), (1, 0), (0, -1)]),\\n     [[2, 0, 0, 2],\\n      [0, 0, 0, 0],\\n      [0, 0, 0, 0],\\n      [2, 0, 0, 2]]),\\n    (([[0, 0, 0, 0, 0, 1, 0, 0],\\n       [2, 0, 1, 1, 1, 0, 0, 0],\\n       [0, 0, 0, 0, 0, 0, 0, 0],\\n       [0, 0, 0, 0, 0, 0, 0, 0],\\n       [1, 0, 0, 0, 0, 0, 0, 1]],\\n     [(1, 0), (1, 0), (1, 0), (0, -1), (0, -1), (0, -1), (1, 0), (0, -1),\\n      (1, 0), (1, 0), (0, -1), (-1, 0), (0, -1)]),\\n     [[0, 0, 0, 0, 2, 2, 0, 0],\\n      [0, 0, 2, 2, 2, 0, 0, 0],\\n      [0, 0, 0, 2, 2, 0, 0, 0],\\n      [0, 0, 0, 0, 0, 0, 0, 0],\\n      [0, 0, 0, 0, 0, 0, 0, 0]]),\\n    (([[0, 1, 0, 0],\\n       [2, 0, 1, 1],\\n       [0, 1, 0, 0],\\n       [0, 1, 0, 0],\\n       [0, 0, 0, 0],\\n       [1, 0, 0, 0],\\n       [1, 0, 0, 0],\\n       [0, 0, 1, 0],\\n       [1, 0, 0, 0]],\\n      [(0, 1), (0, 1), (0, 1), (0, 1), (-1, 0), (0, 1), (1, 0), (1, 0), (1, 0),\\n       (0, -1), (1, 0), (1, 0), (1, 0), (1, 0), (1, 0), (0, -1), (-1, 0),\\n       (0, -1), (0, -1), (-1, 0), (0, -1)]),\\n     'Game Over'),\\n    (([[1, 0, 0, 0, 0, 1, 0, 0, 0],\\n       [0, 0, 1, 1, 1, 0, 0, 0, 0],\\n       [0, 0, 0, 0, 0, 0, 1, 0, 0],\\n       [0, 0, 0, 0, 2, 0, 1, 0, 0],\\n       [0, 0, 0, 0, 0, 0, 0, 0, 0],\\n       [1, 0, 0, 0, 1, 0, 0, 1, 1]],\\n      [(1, 0), (1, 0), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (1, 0), (1, 0),\\n       (0, 1), (0, 1), (0, 1), (0, 1), (-1, 0), (0, 1), (0, 1), (0, 1), (0, 1),\\n       (1, 0), (1, 0), (1, 0), (0, -1), (0, -1), (-1, 0), (0, -1), (-1, 0),\\n       (-1, 0), (-1, 0), (-1, 0), (-1, 0), (0, -1), (0, -1)]),\\n     [[0, 0, 0, 0, 0, 2, 0, 0, 0],\\n      [0, 0, 0, 0, 0, 2, 0, 0, 0],\\n      [0, 0, 0, 0, 0, 2, 2, 0, 0],\\n      [0, 0, 0, 2, 2, 2, 2, 2, 2],\\n      [0, 0, 0, 0, 0, 2, 0, 0, 0],\\n      [0, 0, 0, 0, 0, 2, 0, 0, 0]]),\\n    (([[1, 0, 0, 0, 0],\\n       [0, 0, 1, 0, 1],\\n       [1, 0, 0, 0, 0],\\n       [0, 1, 0, 0, 1],\\n       [0, 0, 2, 0, 0],\\n       [0, 0, 0, 0, 1]],\\n      [(1, 0), (0, -1), (0, -1), (0, -1), (-1, 0), (-1, 0), (-1, 0), (-1, 0),\\n       (0, -1), (0, -1), (-1, 0), (0, -1), (0, -1), (0, -1), (0, -1), (1, 0)]),\\n     [[2, 2, 2, 2, 2],\\n      [0, 0, 0, 2, 0],\\n      [1, 0, 0, 0, 0],\\n      [0, 1, 0, 0, 0],\\n      [0, 0, 0, 0, 0],\\n      [0, 0, 0, 0, 0]])\\n]\\nfor idx, t in enumerate(lst_test):\\n    tic = perf_counter()\\n    Test.assert_equals(snake(*t[0]), t[1])\\n    print('Test_{} Time = {:.6f}'.format(idx + 1, perf_counter() - tic))\\n\\nprint('\\\\nTotal Time = {:.6f}'.format(perf_counter() - tic_0))\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,3,4,3,5,5,4,1,5,5,2],\"quality\":[],\"rators\":[\"aEm3Wvj2rFYRL8Lrb\",\"fznzd3qnvtbFkkizz\",\"s5M5RvgqR9BhB9JoC\",\"ZBJ4HuiWQyNYpxChr\",\"Mw8yqSDFdQui28w5N\",\"eHcgvkTGsH7ZziqBo\",\"8sNv5PTHa7XQ8bNqR\",\"gJYuGdkXEWWmGRLzu\",\"iS5BrkGLzJyPK7nKt\",\"yjtdwc2AC4jA2RWtn\"],\"total\":14},\"flags\":0},\"summary\":\"Write a function that can simulate a crawling snake.\\n\\nAlternative Text\\n\\nInput\\nfield — A rectangular matrix, list of lists, consisting of numbers corresponding to: 0 – empty cell, 1 – food, 2 – the head of the snake.\\nmoves — A list of tuples.\\n\\nEach tuple represents the following moves:\\n(1, 0) — Down\\n(0, 1) — Right\\n(-1, 0) — Up\\n(0, -1) — Left\\n\\nOutput\\nThe final p\",\"tags\":[\"games\",\"language_fundamentals\",\"loops\"],\"timestamp\":{\"$date\":1599438485998},\"title\":\"Snake Game\",\"family\":[{\"_id\":\"kvJrazoaQN7iwNeGw\",\"language\":\"python3\"}]}}"]