a["{\"msg\":\"result\",\"id\":\"2447\",\"result\":{\"_id\":\"sggnPGKhbY6Hg8q3y\",\"author\":\"javierdariomartin\",\"authorId\":\"6428wKHtwKkFdvBs5\",\"code\":\"def islands(m):\\n\\t\",\"difficulty\":4.5,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"iAjauaHtZDzWthLEk\",\"instructions\":\"Create a function that takes a matrix as an argument and returns the number of \\\"islands\\\" in the matrix, as well as the quantity of \\\"islands\\\" by type.\\n\\n- You are given a matrix of `nxm` elements.\\n- Each element represents either water (`0`) or land (`1`).\\n- You must determine the total number of \\\"islands\\\" in the matrix (or map, if you want).\\n- An island is a formation of one or more `1`, connected horizontally or vertically (not diagonally).\\n\\nFinally, the program must calculate the number of islands by type:\\n\\nType of Island | Abbreviation for Output | Number of Lands\\n--- | ---\\nMicro | Mic  | 1 |\\nSmall | Sml  | >1 and <= 3 |\\nMedium | Med  | >3 and <=5 |\\nBig | Big  | >5 and <=9 |\\nMassive | Msv  | >9 |\\n\\n### Examples\\n```\\nislands([\\n  [1, 0],\\n  [0, 0],\\n])\\n➞\\nTot Islands: 1\\nMic Islands: 1\\nSml Islands: 0\\nMed Islands: 0\\nBig Islands: 0\\nMsv Islands: 0\\n\\nislands([\\n  [1, 0, 1, 1],\\n  [0, 1, 0, 1],\\n  [0, 1, 0, 0],\\n  [1, 1, 0, 1],\\n])\\n➞\\nTot Islands: 4\\nMic Islands: 2\\nSml Islands: 1\\nMed Islands: 1\\nBig Islands: 0\\nMsv Islands: 0\\n```\\n\\n### Notes\\nN/A\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(islands([\\n    [1, 0],\\n    [0, 1]\\n]), \\n'Tot Islands: 2' + '\\\\n'\\n'Mic Islands: 2' + '\\\\n'\\n'Sml Islands: 0' + '\\\\n'\\n'Med Islands: 0' + '\\\\n'\\n'Big Islands: 0' + '\\\\n'\\n'Msv Islands: 0'\\n)\\n\\nTest.assert_equals(islands([\\n\\t[1, 0, 1, 1],\\n    [0, 1, 0, 1],\\n    [0, 1, 0, 0],\\n    [1, 1, 0, 1]\\n]), \\n'Tot Islands: 4' + '\\\\n'\\n'Mic Islands: 2' + '\\\\n'\\n'Sml Islands: 1' + '\\\\n'\\n'Med Islands: 1' + '\\\\n'\\n'Big Islands: 0' + '\\\\n'\\n'Msv Islands: 0'\\n)\\n\\nTest.assert_equals(islands([\\n    [1, 0, 0, 0, 0, 0, 0, 1, 1, 1],\\n    [0, 1, 0, 0, 0, 0, 0, 1, 1, 1],\\n    [0, 1, 1, 0, 1, 1, 0, 1, 1, 1],\\n    [0, 0, 1, 0, 1, 1, 0, 0, 0, 0],\\n    [0, 1, 1, 0, 0, 0, 0, 0, 0, 0],\\n    [0, 1, 0, 0, 0, 1, 1, 0, 0, 0],\\n    [0, 1, 0, 0, 0, 0, 1, 0, 0, 0],\\n    [0, 1, 1, 0, 0, 0, 0, 0, 1, 0],\\n    [0, 0, 0, 0, 0, 0, 0, 1, 1, 1],\\n    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0]\\n]), \\n'Tot Islands: 6' + '\\\\n'\\n'Mic Islands: 1' + '\\\\n'\\n'Sml Islands: 1' + '\\\\n'\\n'Med Islands: 2' + '\\\\n'\\n'Big Islands: 1' + '\\\\n'\\n'Msv Islands: 1'\\n)\\n\\nTest.assert_equals(islands([\\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n    [0, 1, 1, 0, 0, 0, 1, 1, 0, 0],\\n    [0, 0, 1, 0, 0, 0, 0, 0, 0, 1],\\n    [0, 0, 1, 1, 0, 0, 0, 0, 0, 0],\\n    [0, 0, 1, 1, 0, 0, 0, 1, 0, 0],\\n    [0, 0, 1, 1, 0, 0, 1, 1, 1, 0],\\n    [0, 0, 1, 1, 0, 0, 0, 1, 0, 0],\\n    [0, 1, 1, 1, 0, 0, 0, 1, 0, 0],\\n    [0, 1, 1, 1, 0, 0, 0, 1, 0, 0],\\n    [0, 0, 1, 1, 0, 0, 0, 1, 0, 0],\\n    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 1, 1, 1, 0, 1, 0],\\n    [0, 0, 0, 0, 1, 1, 1, 0, 0, 0],\\n    [0, 0, 0, 0, 1, 1, 1, 0, 0, 0],\\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 1, 1, 1, 0, 0, 0],\\n    [0, 0, 0, 0, 0, 1, 1, 0, 0, 0],\\n    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 0, 1, 1, 1, 1, 0],\\n    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\\n]), \\n'Tot Islands: 11' + '\\\\n'\\n'Mic Islands: 6' + '\\\\n'\\n'Sml Islands: 1' + '\\\\n'\\n'Med Islands: 0' + '\\\\n'\\n'Big Islands: 2' + '\\\\n'\\n'Msv Islands: 2'\\n)\\n\\nTest.assert_equals(islands([\\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0],\\n    [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n    [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n    [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n    [0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n    [0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0],\\n    [0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0],\\n    [0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0],\\n    [0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\\n    [0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\\n    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1],\\n    [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0],\\n    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0],\\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\\n    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0]\\n]), \\n'Tot Islands: 22' + '\\\\n'\\n'Mic Islands: 9' + '\\\\n'\\n'Sml Islands: 4' + '\\\\n'\\n'Med Islands: 2' + '\\\\n'\\n'Big Islands: 3' + '\\\\n'\\n'Msv Islands: 4'\\n)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,5,3,5,5,5,4,5,1,5],\"rators\":[\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\",\"6428wKHtwKkFdvBs5\",\"xn7uGNKeAwPEkP9oA\",\"mDWNyaaQ9hvPCRzSd\",\"eHcgvkTGsH7ZziqBo\",\"iS5BrkGLzJyPK7nKt\",\"8sNv5PTHa7XQ8bNqR\",\"gJYuGdkXEWWmGRLzu\"],\"total\":12,\"quality\":[]},\"flags\":0},\"summary\":\"Create a function that takes a matrix as an argument and returns the number of \\\"islands\\\" in the matrix, as well as the quantity of \\\"islands\\\" by type.\\n\\nYou are given a matrix of nxm elements.\\nEach element represents either water (0) or land (1).\\nYou must determine the total number of \\\"islands\\\" in the matrix (or map, if you want).\\nAn island is a formation of one\",\"tags\":[\"algorithms\",\"math\"],\"timestamp\":{\"$date\":1595118335613},\"title\":\"The Islands\",\"quality\":0,\"family\":[{\"_id\":\"sggnPGKhbY6Hg8q3y\",\"language\":\"python3\"}]}}"]