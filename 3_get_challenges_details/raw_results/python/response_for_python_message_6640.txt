a["{\"msg\":\"result\",\"id\":\"2028\",\"result\":{\"_id\":\"RxHjtFqu3w8L9i5fx\",\"author\":\"Donnamae\",\"authorId\":\"yZvzB3qFb8pkHy4dg\",\"code\":\"def bell(n):\\n\\t\",\"difficulty\":2.8372093023255816,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"oRwyr8WnbKxdGZykE\",\"instructions\":\"The Bell number is the number of ways a list of `n` items can be partitioned into non-empty sublists. See the resources section for an in-depth explanation.\\n\\nCreate a function that takes a number `n` and returns the corresponding Bell number.\\n\\n### Examples\\n```\\nbell(1) ➞ 1\\n# sample_lst = [1]\\n# possible_partitions = [[[1]]]\\n\\nbell(2) ➞ 2\\n# sample_lst = [1, 2]\\n# possible_partitions = [[[1, 2]], [[1], [2]]]\\n\\nbell(3) ➞ 5\\n# sample_lst = [1, 2, 3]\\n# possible_partitions = [[[1, 2, 3]], [[1, 2], [3]], [[1], [2, 3]], [[1, 3], [2]], [[1], [2], [3]]]\\n```\\n\\n### Notes\\nN/A\",\"lab\":\"Test.assert_equals(bell(1), 1)\\nTest.assert_equals(bell(2), 2)\\nTest.assert_equals(bell(3), 5)\\nTest.assert_equals(bell(4), 15)\\nTest.assert_equals(bell(5), 52)\\nTest.assert_equals(bell(6), 203)\",\"language\":\"python3\",\"summary\":\"The Bell number is the number of ways a list of n items can be partitioned into non-empty sublists. See the resources section for an in-depth explanation.\\n\\nCreate a function that takes a number n and returns the corresponding Bell number.\\n\\nExamples\\nbell(1) ➞ 1\\nsample_lst = [1]\\npossible_partitions = [[[1]]]\\n\\nbell(2) ➞ 2\\nsample_lst = [1, 2]\\npossible_partitions =\",\"tags\":[\"loops\",\"math\"],\"timestamp\":{\"$date\":1559236590105},\"title\":\"Bell Number\",\"stats\":{\"completed\":{\"total\":38,\"ratings\":[2,2,2,2,2,2,2,2,2,2,5,3,4,4,2,3,2,2,4,4,4,4,4,3,3,4,3,1,2,4,4,2,4,1,4,2,2,5,3,3,2,3,2],\"rators\":[\"QaE2QnnBbzdiExxPH\",\"tAF9Gf6PiGogbZuWs\",\"MXjxGML2X75x64vJo\",\"7g3vZaQXhLpxrajyg\",\"StJwhPFkevcqZ9swQ\",\"byqTp7CX5oWSEZp4S\",\"RbRrxRryTKPFhxroj\",\"AYaEkTWLMmfzpwejr\",\"vtBrNNcQn8TFSs275\",\"P59rek6gvwTzHvRYa\",\"gb9rvGus2Jv7bjZSs\",\"3ifAHQzsMasfQySoL\",\"BFNm9gacwba9KyLFW\",\"8JyqsSbN2FJXPr3cw\",\"yZvzB3qFb8pkHy4dg\",\"HqmxnQJM66Y57twhn\",\"JKb5rhL6DKcCAypF9\",\"Jqk2uJZZxEv5wZFze\",\"C4QntmkYtB89GNtpd\",\"8PwfYqoDQFThzNtvf\",\"WLFPvm65aHfgwQy7N\",\"aEm3Wvj2rFYRL8Lrb\",\"aCNWav8S8Try9RkC6\",\"s5M5RvgqR9BhB9JoC\",\"kYWb8BwpKwunQkxeX\",\"ZNnsMeNkdDhHjSrZb\",\"8sNv5PTHa7XQ8bNqR\",\"iS5BrkGLzJyPK7nKt\",\"iojEnnY9FsMfYzp6f\",\"xn7uGNKeAwPEkP9oA\",\"yjtdwc2AC4jA2RWtn\",\"AasGs8AeX9Lcb9xJn\",\"gJYuGdkXEWWmGRLzu\",\"2PufnQcsHsfymufX3\",\"gXTAie79kiw28tx5u\",\"buX4mCQhtXCfBjeno\",\"GTKsdeEihE636Le9i\"],\"quality\":[5,5,4,4]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"isHidden\":false,\"quality\":4.5,\"family\":[{\"_id\":\"RonK4TTo87c4qCpry\",\"language\":\"cpp\"},{\"_id\":\"Rarq6J9wR8FsN2qQ4\",\"language\":\"java\"},{\"_id\":\"AS2DsdhRkALvAmNKc\",\"language\":\"javascript\"},{\"_id\":\"RxHjtFqu3w8L9i5fx\",\"language\":\"python3\"},{\"_id\":\"xj4YPEALFQGsydC6u\",\"language\":\"ruby\"}]}}"]