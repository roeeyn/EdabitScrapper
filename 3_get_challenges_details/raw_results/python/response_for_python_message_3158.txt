a["{\"msg\":\"result\",\"id\":\"303\",\"result\":{\"_id\":\"KSQPoma9iaz5bkSnv\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def pyramid_lists(n):\\n\\t\",\"difficulty\":0.627906976744186,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"ocdPJc5JC2DN2hsCT\",\"instructions\":\"Given a number `n`, return a list containing several lists. Each list increments in size, from range `1 to n inclusive`, contaning its length as the elements.\\n\\n### Examples\\n```\\npyramid_lists(1) ➞ [[1]]\\n\\npyramid_lists(3) ➞ [[1], [2, 2], [3, 3, 3]]\\n\\npyramid_lists(5) ➞ [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4], [5, 5, 5, 5, 5]]\\n```\\n\\n### Notes\\n`n` will be a positive integer.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(pyramid_lists(1), [[1]])\\nTest.assert_equals(pyramid_lists(2), [[1], [2, 2]])\\nTest.assert_equals(pyramid_lists(3), [[1], [2, 2], [3, 3, 3]])\\nTest.assert_equals(pyramid_lists(4), [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4]])\\nTest.assert_equals(pyramid_lists(5), [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4], [5, 5, 5, 5, 5]])\\nTest.assert_equals(pyramid_lists(6), [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4], [5, 5, 5, 5, 5], [6, 6, 6, 6, 6, 6]])\\nTest.assert_equals(pyramid_lists(7), [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4], [5, 5, 5, 5, 5], [6, 6, 6, 6, 6, 6], [7, 7, 7, 7, 7, 7, 7]])\\nTest.assert_equals(pyramid_lists(8), [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4], [5, 5, 5, 5, 5], [6, 6, 6, 6, 6, 6], [7, 7, 7, 7, 7, 7, 7], [8, 8, 8, 8, 8, 8, 8, 8]])\\nTest.assert_equals(pyramid_lists(9), [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4], [5, 5, 5, 5, 5], [6, 6, 6, 6, 6, 6], [7, 7, 7, 7, 7, 7, 7], [8, 8, 8, 8, 8, 8, 8, 8], [9, 9, 9, 9, 9, 9, 9, 9, 9]])\\nTest.assert_equals(pyramid_lists(10), [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4], [5, 5, 5, 5, 5], [6, 6, 6, 6, 6, 6], [7, 7, 7, 7, 7, 7, 7], [8, 8, 8, 8, 8, 8, 8, 8], [9, 9, 9, 9, 9, 9, 9, 9, 9], [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]])\",\"language\":\"python3\",\"quality\":4.775510204081633,\"stats\":{\"completed\":{\"ratings\":[1,1,1,1,1,0,0,0,0,0,0,0,0,1,2,0,0,2,2,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,2,0,1,2,0,2,1,0,1,0,1,1,1,1,0,0,0,0,1,0,2,2,0,1,0,0,0,0,0,1,0,2,1,0,2,0,0,2,0,0,0,0,0,1,1,0,1,2,2,1,0,0,0,0,0,2,1,0,0,5,0,0,0,1,0,0,1,2,1,1,0,0,0,1,1,1,0,1,2,0,1,1,1,0,1,2,0,1,2,2,0,0,0],\"quality\":[3,5,5,5,5,5,5,5,5,5,5,5,4,5,5,5,5,5,5,5,5,5,5,2,5,5,5,5,5,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,5,3,5,5],\"rators\":[\"PXAcsKkssS2yLyDv2\",\"buX4mCQhtXCfBjeno\",\"XD5nmvKQchKezPXhy\",\"FEYpu9RWysAgW3XnP\",\"gb9rvGus2Jv7bjZSs\",\"oBcs8GLX2ZFLXQy8y\",\"iS5BrkGLzJyPK7nKt\",\"HBuJYgW2eRBJp9FoG\",\"uin3SooXNbPzwajcP\",\"eGBaixwg8pot2ApcX\",\"Yp7uvStL97cC9fKkY\",\"3cF6NXq3ZEwdkgSjb\",\"Q6gEE9dG8ERy2Xu3c\",\"JKbEBybAsiKrmcqof\",\"DEDniTrstQYGounXT\",\"QRv96jmNaYsWkxQEG\",\"gJYuGdkXEWWmGRLzu\",\"iojEnnY9FsMfYzp6f\",\"66a9xX73nmTEuKs9k\",\"eMuCpJ2spXWkJjWNz\",\"Ds7L5bksw2QRHjrKL\",\"Wpn95NqWxncQrwNgz\",\"eYfPWvZwnJQkHbSTK\",\"pPpmP7xeJzGgK362R\",\"2QGRoQn2dRq3scu7k\",\"sKfrD9gjCDHuqLzSk\",\"5HCu9Ydd86QgHDRNP\",\"sbJcFfQjQ59Wfg4Cd\",\"DPi9QGLctq2y76KuE\",\"zC8WrPp5BC6c2exrW\",\"N2wnZXkhDH86mgjQ8\",\"tAF9Gf6PiGogbZuWs\",\"T6iBEE2jp7f7iEF2P\",\"HBJKQBRFGxT5CmhsH\",\"zd9FLSzsGz3evKafy\",\"YcCLwitFMAEJSnxAW\",\"H9KZi2cjt4FwH7qog\",\"xgCsTDx5rBgFzpboP\",\"AXcnPX68zdMiLNSmu\",\"6oABh8e5vpJJ8utgm\",\"NrRa4TS6uZR9xuXRt\",\"9qoWqLcHGiDX429rE\",\"CHvzhtXnv8HTbPQ56\",\"srJ34BaybkQh3qRkM\",\"PC3pLs36zNzpRDSuE\",\"SgPjF69J25jT3dn4X\",\"AFfw7cGg83uYk2Miy\",\"8JyqsSbN2FJXPr3cw\",\"wRttWTM59y8m5mx7x\",\"J5T8gZqiZXFuFDTQ7\",\"J3upzLHuEwXH7Z2hx\",\"DFpZcskPncmo7fuzR\",\"ghMkPtdFCpM6w8nax\",\"uvLimfW9x3bCp7huQ\",\"cR3ibTMxLyEdDFCHY\",\"mxX4rH5ELYkdZ2Mbw\",\"fTNQmMvTZhhiGBCMe\",\"NP2RxM3eBd3drnDwP\",\"s5M5RvgqR9BhB9JoC\",\"wjc4iejpErBhxWwHo\",\"XEjiqMFvDTLTo2X9G\",\"XrqNzJ2FRG8HnGiR6\",\"a2Kmh6ekWqQQooHiQ\",\"x2Cz7S8rCKJqCE3Xe\",\"YRAzEBJoLvSaiPtYx\",\"yjtdwc2AC4jA2RWtn\",\"8PwfYqoDQFThzNtvf\",\"4bb7pim4ewTwrMTEA\",\"CyzskHGsC6WSmYrLu\",\"aEm3Wvj2rFYRL8Lrb\",\"YmQb9Mo4Xcg2vzgbn\",\"YZL9ec49hQdqcwu2j\",\"i5iePG5GqhJJ8HEoB\",\"FiaTpm7ehfDv43wSG\",\"jWbd7SYDzLPjc9EDh\",\"KEmTti9Tza8A2FLQW\",\"PAzNgJF54C2mYPkR9\",\"9Ly8afdtofp8DXzrt\",\"GC9LB7vyQwSrQXoqt\",\"peCvTbjQBgdWo53Wv\",\"utyt9o5BYPWRbXf2X\",\"Fk9kLwoG4Brf4KsKf\",\"jgyuzt5BpA3ohHG96\",\"mvJBakQ35CWAnbbEZ\",\"T6Rm8mREPMZSftzrC\",\"aXx8tRSKQw65RwBAB\",\"3LiSLdtN58n46NEqg\",\"NzbRqGWspQnWMoDrF\",\"M2gFMJkocQSY6bsFR\",\"iYXdNw7tKcgA3QwBX\",\"j7ebNFtte6fSkMWjj\",\"KypQdzThzogKXwkXE\",\"XbxHXmh5ZmRN2gw3K\",\"dqwatKFAeGpjmf5dm\",\"sHjfbGQGLHE6JR6qu\",\"hRfdHT8bWztZuCqzi\",\"5PaQgfQznXjaF9e6F\",\"XxLKk8pkJnSjfZNHx\",\"bur3yQ8s34zqKGEro\",\"DTyNcDkiScCjgJt28\",\"kqYkfcZMkp5u2EdXZ\",\"JiSpvq6C7azQEmENc\",\"eHcgvkTGsH7ZziqBo\",\"9pzFiFK3ANLjQfnr2\",\"AasGs8AeX9Lcb9xJn\",\"MKT7khMBGXzA22ykf\",\"rrSC943cCKNG48sH4\",\"6LbPw9yW6HHDfn8B8\",\"yAouD3PxzED8a4gap\",\"8f2GuLuAy3nb6KFfY\",\"NYyhWY7soeTZ6ymd5\",\"93ADqsBQnwTEosjbq\",\"hZ2JDAEG2P5rMLWEW\",\"JS3hNM3XXkxPdg3yk\",\"M8dQuMrEpP8Hc3tHN\",\"qD2LrwaDrSdiybLKY\",\"cdXmwjupCXSvJTSNo\",\"kjvgTyRFyKHv44DcH\",\"HqmxnQJM66Y57twhn\",\"syRNbbPdLCGXbH2Gy\",\"C9LKGu2g5hSijvDzA\",\"Afnps7TJQuS9sipMb\",\"hs8WbxhNtYBiqEj9C\",\"PTDFuxAzou7W6asWt\",\"9NcZ23yufhtou68dT\",\"EfxwqhYdapX3dMQC2\",\"sDRY37TfoncsA2FSR\",\"PeopHyCFfiFgzRS3o\",\"FMyZPN6odEFtfuimF\",\"pQwhNKiCne4gEZgcn\",\"zBk2cwJ9SLAhFuM3K\",\"54BFnXEjY3FuRNYpN\",\"gKnWjDjwrJh7MK2df\",\"FRN2W8RYpJ6GPhgRy\",\"b6PEkvr66YeCamroN\",\"5CsHudxuDESxmjTPW\",\"Nv8HhfMn2Rddq6Bei\",\"qAby4AWXmTNeusvg3\",\"SkQcb2sRn4as5KpnN\",\"gpGXTvjS2HrY9Skq5\",\"Jqk2uJZZxEv5wZFze\",\"AQSqD9oNv2uPfxZCR\",\"dYPkStFnLvAMsHSzZ\",\"7q8oBsCHwn48Ppnrq\",\"aN6owKqBeZj7ZefFR\",\"9HPB28hBoTnZnspQE\",\"b7yQWr6eJFxYTmt3j\",\"8ynPy35NQFsnh4WqC\",\"gjiu8kLnHYxe4HoBN\",\"d9LBRxvADNBB5QJMB\",\"fGvJRtjbJFJJZLCnW\",\"YZsZjfvd3PnLhDJrR\",\"gbGzZz5Yq5hT357v8\",\"B4y8aoyXJtskYPFEL\",\"qaPjAANdnxFnWfj5d\",\"5QN8R22z43SrwoHDz\",\"dzS6WBTMHyFEag6Fp\",\"rhS8qXRjZcpDXkwnE\",\"PBnvAuiKXwjqjKG33\",\"JhX7jvtpwNyxcc39m\",\"rF97GDLqCgynr7BaD\",\"suArq5BbSy7gD6xri\",\"mw9464S5dnenqzvpm\",\"afvP29FhRou2bTaav\",\"vAbK8sCfKyFC78HYg\",\"Ne8mK9DDHG8TRkoxG\",\"fMp8sPsKSECdfgF9j\",\"QN4FPwhiak7Pf8kn6\",\"4sSXLSBZDxK2Swoo7\",\"sMcFMPkMJC4Kh6ymj\",\"Wi4H6ayKsNDWWQCG5\",\"M4vq8ATaS9Jg5X7iP\",\"3SgSNoAB3sxaYeT3w\"],\"total\":184},\"flags\":0},\"summary\":\"Given a number n, return a list containing several lists. Each list increments in size, from range 1 to n inclusive, contaning its length as the elements.\\n\\nExamples\\npyramid_lists(1) ➞ [[1]]\\n\\npyramid_lists(3) ➞ [[1], [2, 2], [3, 3, 3]]\\n\\npyramid_lists(5) ➞ [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4], [5, 5, 5, 5, 5]]\\n\\nNotes\\nn will be a positive integer.\",\"tags\":[\"arrays\",\"language_fundamentals\",\"loops\"],\"timestamp\":{\"$date\":1614968061083},\"title\":\"Pyramid Lists\",\"family\":[{\"_id\":\"dC3mpKAckYbT56qq3\",\"language\":\"cpp\"},{\"_id\":\"K8DP9dYQwcfRLgRrW\",\"language\":\"javascript\"},{\"_id\":\"ssvBhCnuAmSgoRuaM\",\"language\":\"php\"},{\"_id\":\"KSQPoma9iaz5bkSnv\",\"language\":\"python3\"},{\"_id\":\"5R8Apj75vKiptjknK\",\"language\":\"ruby\"}]}}"]