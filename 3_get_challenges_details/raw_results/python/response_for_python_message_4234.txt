a["{\"msg\":\"result\",\"id\":\"833\",\"result\":{\"_id\":\"oQ99uE4iPNbEnf9QZ\",\"author\":\"Kelvin Tan\",\"authorId\":\"PytNZK9mNiRiZxPrm\",\"code\":\"def no_perms_digits(n):\\n\\t\",\"difficulty\":1.4019607843137254,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"WXzPxRnKYM88E58ua\",\"instructions\":\"Given a known number of unique items, how many ways could we arrange them in a row?\\n\\nCreate a function that takes an integer `n` and returns the number of digits of the number of possible permutations for `n` unique items. For instance, 5 unique items could be arranged in 120 unique ways. 120 has 3 digits, hence the integer `3` is returned.\\n\\n\\n### Examples\\n```\\nno_perms_digits(0) ➞ 1\\n\\nno_perms_digits(1) ➞ 1\\n\\nno_perms_digits(5) ➞ 3\\n\\nno_perms_digits(8) ➞ 5\\n```\\n\\n### Notes\\nThis challenge requires some understanding of combinatorics.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(no_perms_digits(0), 1)\\nTest.assert_equals(no_perms_digits(1), 1)\\nTest.assert_equals(no_perms_digits(2), 1)\\nTest.assert_equals(no_perms_digits(3), 1)\\nTest.assert_equals(no_perms_digits(4), 2)\\nTest.assert_equals(no_perms_digits(5), 3)\\nTest.assert_equals(no_perms_digits(6), 3)\\nTest.assert_equals(no_perms_digits(7), 4)\\nTest.assert_equals(no_perms_digits(8), 5)\\nTest.assert_equals(no_perms_digits(9), 6)\\nTest.assert_equals(no_perms_digits(10), 7)\\nTest.assert_equals(no_perms_digits(11), 8)\\nTest.assert_equals(no_perms_digits(12), 9)\\nTest.assert_equals(no_perms_digits(13), 10)\\nTest.assert_equals(no_perms_digits(14), 11)\\nTest.assert_equals(no_perms_digits(15), 13)\\nTest.assert_equals(no_perms_digits(16), 14)\\nTest.assert_equals(no_perms_digits(17), 15)\\nTest.assert_equals(no_perms_digits(18), 16)\\nTest.assert_equals(no_perms_digits(19), 18)\\nTest.assert_equals(no_perms_digits(25), 26)\\nTest.assert_equals(no_perms_digits(50), 65)\\nTest.assert_equals(no_perms_digits(75), 110)\\nTest.assert_equals(no_perms_digits(100), 158)\\nTest.assert_equals(no_perms_digits(125), 210)\\nTest.assert_equals(no_perms_digits(150), 263)\\nTest.assert_equals(no_perms_digits(175), 319)\\nTest.assert_equals(no_perms_digits(200), 375)\\nTest.assert_equals(no_perms_digits(225), 434)\\nTest.assert_equals(no_perms_digits(250), 493)\\nTest.assert_equals(no_perms_digits(275), 554)\\nTest.assert_equals(no_perms_digits(300), 615)\\nTest.assert_equals(no_perms_digits(325), 677)\\nTest.assert_equals(no_perms_digits(350), 741)\\nTest.assert_equals(no_perms_digits(375), 805)\\nTest.assert_equals(no_perms_digits(400), 869)\\nTest.assert_equals(no_perms_digits(425), 935)\\nTest.assert_equals(no_perms_digits(450), 1001)\\nTest.assert_equals(no_perms_digits(475), 1067)\\nTest.assert_equals(no_perms_digits(500), 1135)\\nTest.assert_equals(no_perms_digits(525), 1202)\\nTest.assert_equals(no_perms_digits(550), 1271)\\nTest.assert_equals(no_perms_digits(575), 1339)\\nTest.assert_equals(no_perms_digits(600), 1409)\\nTest.assert_equals(no_perms_digits(625), 1478)\\nTest.assert_equals(no_perms_digits(650), 1548)\\nTest.assert_equals(no_perms_digits(675), 1619)\\nTest.assert_equals(no_perms_digits(700), 1690)\\nTest.assert_equals(no_perms_digits(725), 1761)\\nTest.assert_equals(no_perms_digits(750), 1833)\\nTest.assert_equals(no_perms_digits(775), 1905)\\nTest.assert_equals(no_perms_digits(800), 1977)\\nTest.assert_equals(no_perms_digits(825), 2050)\\nTest.assert_equals(no_perms_digits(850), 2123)\\nTest.assert_equals(no_perms_digits(875), 2197)\\nTest.assert_equals(no_perms_digits(900), 2270)\\nTest.assert_equals(no_perms_digits(925), 2344)\\nTest.assert_equals(no_perms_digits(950), 2419)\\nTest.assert_equals(no_perms_digits(975), 2493)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,1,2,2,1,4,2,3,3,1,1,1,2,2,2,1,2,2,2,1,1,3,3,1,2,2,3,2,1,1,2,1,0,1,2,2,3,0,2,2,2,1,1,2,1,3,2,1,2,1,1,2,2,2,2,2,0,1,2,1,0,0,2,2,2,1,2,2,0,2,1,1,0,0,1,1,2,0,1,2,0,2,0,0,2,0,1,0,0,2,2,1,2,2,3,0,1,0,1,1,2,2,0,2,2,1,2,1,1,3,2,2,1,2,1,0,2,2,2,2,1,0,2,1,0,1,5,1,0,1,0,2,1,2,2,1,0,0,2,1,2,0,0,2,2,2,1,1,0,2,1,2,2,2,2,1,0,0,1,2,1,1,2,1,2,2,0,2,2,2,1,1,2,1,2,0,3,2,1,2,2,0,1,2,0,0,1,1,2,0,1,0,1,3,1,2,2,1,2],\"rators\":[\"PytNZK9mNiRiZxPrm\",\"s5M5RvgqR9BhB9JoC\",\"aP7JkkYer28YWrPvC\",\"Yp7uvStL97cC9fKkY\",\"GntfZ8yP7EjSYrpiJ\",\"44dAzThMuyGZ5StXB\",\"AasGs8AeX9Lcb9xJn\",\"8PwfYqoDQFThzNtvf\",\"euPBBaYXyS8RBr9KB\",\"gb9rvGus2Jv7bjZSs\",\"aEm3Wvj2rFYRL8Lrb\",\"aCNWav8S8Try9RkC6\",\"bMEg2eSZtsAcT7ZmJ\",\"3Zceb8GudqAG3onG3\",\"yZvzB3qFb8pkHy4dg\",\"8JyqsSbN2FJXPr3cw\",\"gJYuGdkXEWWmGRLzu\",\"Jg8ZSRXe3NoDMCqGu\",\"XsYhWtDMoky3nAhjd\",\"5kEyLPjTLrt7z2YJZ\",\"cR3ibTMxLyEdDFCHY\",\"vnY88ZRKQL2knGokM\",\"LmBvZRzL54YeFGXcz\",\"ZNnsMeNkdDhHjSrZb\",\"CEd9tLdXeDeNHSzys\",\"aXFzZYos65txjfaTk\",\"uTKCSekw6me9swLdk\",\"soyMGPdjEpGw9CKss\",\"YRstQuthRkFeBiXug\",\"vWgBJaEtcu3XoYuer\",\"J8tApeMXpq36xD6K2\",\"ZJWmhQpRp7GaJNqiB\",\"u7gHmt9xoCFdGsanE\",\"iFrryFjvhLe4Ephrn\",\"vLrq4dEDMM2wd68Dc\",\"TnmBw9PdyipJDqT84\",\"BfCuxhxRiRND56ngA\",\"tDdqXfMYgqZ26Lwvg\",\"tAF9Gf6PiGogbZuWs\",\"jNvegJWCk5HCtEMbK\",\"f9jA87E7jfdi5qeYq\",\"ekQh3jzgGLsEMbKo3\",\"2fxapKr8XGdNeaKi2\",\"qPSEBYMMi9WJRr8SA\",\"uMLsCftXNbvx6pcGA\",\"dHZqT6h4JMwk5fPC8\",\"hnyhBFWwNCz9mDfSi\",\"7CMCKFK3J6dw57T3n\",\"DEDniTrstQYGounXT\",\"HF28xZKSLM9wEuqNg\",\"EjbDDFRECrzQDkzrX\",\"KdNDysEsy2TW5QRJ2\",\"ywk3XGvcmpTgRxwZa\",\"qZQxPQ2kaNKAMesHT\",\"9pzFiFK3ANLjQfnr2\",\"Mjqxm4q6uEtZCnMzn\",\"ahk2qiXKJA753wAJk\",\"9DWrH4rudz8g2cwDf\",\"vhLJwgSRY2J7aGD2i\",\"gkqp3EuvuiFXFAFtW\",\"yoLy2DcMG3nZXNwv2\",\"36ExaQveMHJfvCLFh\",\"iS5BrkGLzJyPK7nKt\",\"NG8PWBSjsM8mMhQEq\",\"iojEnnY9FsMfYzp6f\",\"syRNbbPdLCGXbH2Gy\",\"WwMjW4MJRuNFExoPc\",\"6D8i8x8Jg6cbCvMd9\",\"ZJQW3bL2KzxJcdEoc\",\"ZrKCkX7xxGGZzauFW\",\"Pe8vWpDHRuH9nSGKW\",\"yjtdwc2AC4jA2RWtn\",\"pWD2YC5s4YRCxFc2i\",\"Ecg4m7srYGgZsb4Ck\",\"MAMEYfBWC9onsnGng\",\"PXAcsKkssS2yLyDv2\",\"2aJ3uzQ4YhbJXPNAj\",\"HqmxnQJM66Y57twhn\",\"MG7GrJjKTmTLS7Skb\",\"C9LKGu2g5hSijvDzA\",\"H9KZi2cjt4FwH7qog\",\"XrqNzJ2FRG8HnGiR6\",\"FEYpu9RWysAgW3XnP\",\"NNE5HNRXAkmhrWgyQ\",\"n2BRY9X8899dcG8Bw\",\"M8dQuMrEpP8Hc3tHN\",\"jkys684AAfPRxrYaD\",\"6428wKHtwKkFdvBs5\",\"hRiMXDZNAzyPd5tpt\",\"GCwNX3aujW4Gvamdu\",\"zd9FLSzsGz3evKafy\",\"YA7SDhpgEtsqynvNL\",\"oBcs8GLX2ZFLXQy8y\",\"GGprTwrkjuccmrQRg\",\"w2HhxvSLmDhaGCAjE\",\"PhceyfmFntJcn5Fhf\",\"RehJGBFS6CYiWdjZx\",\"SgZ2t9xFuRqdJGofp\",\"p8qqFdJ3FSk5x9z3G\",\"3cF6NXq3ZEwdkgSjb\",\"WQubx7DAkG6WZE8FA\",\"KLmLKaJPfsYxp42p2\",\"mxX4rH5ELYkdZ2Mbw\",\"FvFhg2wELM3SCZDZQ\",\"k2Eo3wyfZZ6KxvKhN\",\"pW4kxyEPGKewtJbhb\",\"TPhfpB5tzQWSSn67n\",\"9CoqdidjM9KbeKnHY\",\"3nied3n8KG8RSNixH\",\"tpxMgkGSHwBjS95Ta\",\"Kh3Pc2ZRusurLaMyP\",\"mG8HqKiAQFTdRZthG\",\"DYDJTyGgKFnBRLm2r\",\"gXTAie79kiw28tx5u\",\"9FCeFzjPA4jrQ7oHW\",\"DQgaZW4kD74KsyhZF\",\"b5zo7s6xrqWgQnPao\",\"H4abACFDH5t8CnnyH\",\"8BFSTCnoe2QggN64c\",\"BrTDhPJcACL2bsrpJ\",\"kyLPJtua5rBExZuxF\",\"8WpvgSbQciTQWdd8T\",\"kXEfD7xxEyWd7oxxL\",\"kNrnnMxhFZztMTBAX\",\"5HCu9Ydd86QgHDRNP\",\"EMJ6uvBZkie429gdg\",\"DPi9QGLctq2y76KuE\",\"wRttWTM59y8m5mx7x\",\"dNErCjyFobE5sn4Zh\",\"2QGRoQn2dRq3scu7k\",\"dyBcJXfbqJtjTmBZK\",\"7K2GEb5TZRtSpyyGS\",\"dj5AyG5fWP8FdsSmZ\",\"rrSC943cCKNG48sH4\",\"NzbRqGWspQnWMoDrF\",\"Koxa9fiHiZkjhLtoi\",\"sHjfbGQGLHE6JR6qu\",\"axdSNLZpiCDF8RS6n\",\"8fZxjQfuXw5HMSRJM\",\"d8qtzoLB264iP8tdY\",\"cAP3n5NY64uoMwzRR\",\"dYPkStFnLvAMsHSzZ\",\"6MjSiiBLPcvXbXcaZ\",\"RGMbFMZXJr7DhcAJy\",\"dxBXbyMzwkWXN84yy\",\"g9FyJ8yeT9ic97Qp2\",\"sKfrD9gjCDHuqLzSk\",\"J5T8gZqiZXFuFDTQ7\",\"qAby4AWXmTNeusvg3\",\"5XiuAqicKD4hBdu63\",\"DrkR35NqnP9NDLbq6\",\"4fjSgcqhQQZM2ZFRP\",\"C2AfMipCicfD58WJ9\",\"R4SjTgDnpigJYDLyL\",\"HuNF3xTBzmatyGSTm\",\"Jqk2uJZZxEv5wZFze\",\"Cybtjz3cF7RgoiqrN\",\"CyzskHGsC6WSmYrLu\",\"3Qa9ai5N7PbQFcsi7\",\"yMcCr6yobXJnkgxH2\",\"ZyrfhDTZHb8LymH5b\",\"J3upzLHuEwXH7Z2hx\",\"buX4mCQhtXCfBjeno\",\"9bQyb6rW7xfE4vgrR\",\"o4ixjQGSaYqA2JoM4\",\"utTuvGdmu2sBHWBhQ\",\"GqothajHR2vKfEHGZ\",\"GGdmhAvxXhqhhibJN\",\"5S9nX4rKsnCcnv4Cz\",\"5hQnRWiKkhgKJXNMP\",\"QF3PdSrw9TZ8B5RMq\",\"nFbmNzMQ38TncmfQX\",\"YRAzEBJoLvSaiPtYx\",\"srJ34BaybkQh3qRkM\",\"wjc4iejpErBhxWwHo\",\"Ds7L5bksw2QRHjrKL\",\"yod5YhKtPqw2GfG9B\",\"p7js9trz2zk2RorCR\",\"yr822PZmmiDDenxpB\",\"qQQ4hCQpzitmHSkjS\",\"52LKhrt3s9TMq83ug\",\"q6QsMYNMpPNtmyTeW\",\"CHvzhtXnv8HTbPQ56\",\"T6iBEE2jp7f7iEF2P\",\"YcCLwitFMAEJSnxAW\",\"mfsaETo7uA4x5vqLD\",\"XD5nmvKQchKezPXhy\",\"BJp2WkwLWGHHB5oQW\",\"pPpmP7xeJzGgK362R\",\"Rw9nkswSSxoMLMmYW\",\"CHifBvtfPCmBwY49q\",\"AFfw7cGg83uYk2Miy\",\"66a9xX73nmTEuKs9k\",\"q4ZNo4MieJcX9EZc6\",\"Wpn95NqWxncQrwNgz\",\"GTKsdeEihE636Le9i\",\"bvmTE46bfcM4ogj34\",\"Cuy7McJ5y8BkXRRk9\",\"c2q7mY39z5JPEMCaM\",\"Cc2Cgj4MWXZxsTooC\",\"AQSqD9oNv2uPfxZCR\",\"X4rzfxGgxx6CS7Bpz\",\"2PufnQcsHsfymufX3\",\"mvJBakQ35CWAnbbEZ\",\"9ivvGvJGvtQfigQaZ\",\"RoGGD5cpHb4ftdLDv\",\"mCKqRAPMTht5QBnXo\",\"R6YxHWAiLgKwy5YvC\",\"AJexRBN9cYQmqvYu6\",\"wZ22E8EXW4qasgru2\",\"PTDFuxAzou7W6asWt\",\"pduNK68oazqQTtbLp\",\"hR7GMiqGap4CzEWSy\",\"2iFe3EHEH2YdhSKrs\",\"4RY3zj9C2t8GGefhi\",\"796v8eRqahP6wpLdL\",\"4TmgHkn5vqyHK3sYC\",\"StNu7DPyTgEStZsMY\",\"T6Rm8mREPMZSftzrC\",\"jkbavR2ATFJcpmo8M\",\"N2wnZXkhDH86mgjQ8\",\"pQwhNKiCne4gEZgcn\",\"u5u2YpHXiNgzDNJdX\",\"nc7bRhkxgKyqusYe3\",\"jWbd7SYDzLPjc9EDh\",\"fbyQH246PaDcXumC4\",\"8psDmXRuN9cvZqhaZ\",\"4Lwjr34ypKNQNQCar\",\"Zo3qzJFm2WurHQKHN\",\"d9LBRxvADNBB5QJMB\",\"xqYQMujmvgQ78bnJc\",\"AMpQSjKsRqhCDyS2j\",\"dzS6WBTMHyFEag6Fp\",\"9ocTaRo8g8nc3KZW7\",\"yAouD3PxzED8a4gap\",\"B4y8aoyXJtskYPFEL\",\"Qyfyyw6oC4EHAndzo\",\"XDmr29F46vARTgiYW\",\"QWjsXnLaJ7xfL3Amq\",\"qB6KSTYC6H2TQEQY6\",\"DHXQEnTF6RANkv3oN\",\"wLjp8BRfyGvwMeM6y\",\"5QN8R22z43SrwoHDz\",\"eW9R2SCoYnY8HBAdL\",\"MHiQx9E8rPgzJfsJy\",\"Fk9kLwoG4Brf4KsKf\",\"rDgKHd6ZSSpboiAj7\",\"4LRsK5EGNjPSBmsJm\",\"ruzwBPphPDRgLXdnP\",\"NHp9cXgWCyX6KqyMT\",\"3Kgtr8FytbE9FnJxH\",\"Wi4H6ayKsNDWWQCG5\",\"xRLB3T2b3Fo2MiCmg\",\"RfbjShbg8jmhyNtJh\",\"vCeeMuYDbz3MB4vsk\",\"EW2w4yPcfTTLD4Fg2\"],\"total\":290,\"quality\":[5,2,5,4,5,4,4,5,4,5,5,5,5,5,5,4,5,5,5,5,4,5,5,5,4,5,5,5,5,4,5,5,5,5,3,5,5,4,5,5,4,5,5,5,5,5,5,5,4,5,5,5,3,5,4,5,5]},\"flags\":0},\"summary\":\"Given a known number of unique items, how many ways could we arrange them in a row?\\n\\nCreate a function that takes an integer n and returns the number of digits of the number of possible permutations for n unique items. For instance, 5 unique items could be arranged in 120 unique ways. 120 has 3 digits, hence the integer 3 is returned.\\n\\nExamples\\nnopermsdigits(0\",\"tags\":[\"recursion\",\"higher_order_functions\",\"math\"],\"timestamp\":{\"$date\":1586606503199},\"title\":\"Combinatorial Exploration\",\"quality\":4.666666666666667,\"family\":[{\"_id\":\"YE9n7my9REKyReMjP\",\"language\":\"javascript\"},{\"_id\":\"oQ99uE4iPNbEnf9QZ\",\"language\":\"python3\"},{\"_id\":\"8hpcexAyrjqLEqroN\",\"language\":\"ruby\"}]}}"]