a["{\"msg\":\"result\",\"id\":\"1154\",\"result\":{\"_id\":\"HhSS3YReRhBxZAnzk\",\"author\":\"Tjlhut\",\"authorId\":\"DYDJTyGgKFnBRLm2r\",\"code\":\"def gen_values(n, i):\\n\\t\",\"difficulty\":1.6022727272727273,\"editorId\":\"DYDJTyGgKFnBRLm2r\",\"familyId\":\"Ecycu6wzcCNTFGLNT\",\"instructions\":\"Python's range function can only generate a list of integers, your task is to generate a list of floats. Generate a list of values between 0 and an endpoint `n` spaced at  `i` intervals.\\n\\n### Examples\\n```\\ngen_values(2, 0.25) ➞ [0.0, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0]\\n\\ngen_values(1, 0.1) ➞ [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\\n\\ngen_values(20, 2) ➞ [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\\n```\\n\\n### Notes\\n- The endpoint will always be a positive integer.\\n- This function should also work for generating integers (last example).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(gen_values(10, 0.5), [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5, 10.0])\\nTest.assert_equals(gen_values(5, 0.25), [0.0, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0, 2.25, 2.5, 2.75, 3.0, 3.25, 3.5, 3.75, 4.0, 4.25, 4.5, 4.75, 5.0])\\nTest.assert_equals(gen_values(9, 1.5), [0.0, 1.5, 3.0, 4.5, 6.0, 7.5, 9.0])\\nTest.assert_equals(gen_values(1, 0.04), [0.0, 0.04, 0.08, 0.12, 0.16, 0.2, 0.24, 0.28, 0.32, 0.36, 0.4, 0.44, 0.48, 0.52, 0.56, 0.6, 0.64, 0.68, 0.72, 0.76, 0.8, 0.84, 0.88, 0.92, 0.96, 1.0])\\nTest.assert_equals(gen_values(1, 0.09), [0.0, 0.09, 0.18, 0.27, 0.36, 0.45, 0.54, 0.63, 0.72, 0.81, 0.9, 0.99])\\nTest.assert_equals(gen_values(4, 1.5), [0.0, 1.5, 3.0])\\nTest.assert_equals(gen_values(20, 2), [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20])\\nTest.assert_equals(gen_values(21, 2), [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20])\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[1,1,1,1,1,1,1,1,3,1,1,0,2,2,1,2,2,2,2,2,2,1,0,1,2,3,2,1,3,2,2,1,1,2,2,1,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,0,0,2,2,0,5,1,2,1,1,2,2,1,0,2,2,2,1,3,0,3,2,2,3,0,2,2,3,2,2,1,2,1,1],\"rators\":[\"DYDJTyGgKFnBRLm2r\",\"fTNQmMvTZhhiGBCMe\",\"hkJGLuib5md8vZ9HD\",\"iojEnnY9FsMfYzp6f\",\"yjtdwc2AC4jA2RWtn\",\"fptEed83xHsCZAuDA\",\"sHjfbGQGLHE6JR6qu\",\"ta5CrWnBCRusD2WMo\",\"aEm3Wvj2rFYRL8Lrb\",\"ZJQW3bL2KzxJcdEoc\",\"8PwfYqoDQFThzNtvf\",\"uiJ6QPwRvArGyZjuM\",\"K4JsBLPjNKZv5LWnp\",\"ASZk6eFeYMj5pitoe\",\"PXAcsKkssS2yLyDv2\",\"8BFSTCnoe2QggN64c\",\"RkyCNqfDeSrR8TLmA\",\"eMuCpJ2spXWkJjWNz\",\"cR3ibTMxLyEdDFCHY\",\"XrqNzJ2FRG8HnGiR6\",\"gJYuGdkXEWWmGRLzu\",\"GGprTwrkjuccmrQRg\",\"gb9rvGus2Jv7bjZSs\",\"DEDniTrstQYGounXT\",\"tAF9Gf6PiGogbZuWs\",\"syRNbbPdLCGXbH2Gy\",\"Yp7uvStL97cC9fKkY\",\"s5M5RvgqR9BhB9JoC\",\"8JyqsSbN2FJXPr3cw\",\"n2BRY9X8899dcG8Bw\",\"X5MqeHyPh6cSQCXnk\",\"R4SjTgDnpigJYDLyL\",\"yAouD3PxzED8a4gap\",\"FEYpu9RWysAgW3XnP\",\"Pe8vWpDHRuH9nSGKW\",\"9pzFiFK3ANLjQfnr2\",\"AasGs8AeX9Lcb9xJn\",\"Nb6LYPoQP6KJZt8mz\",\"jNvegJWCk5HCtEMbK\",\"i5iePG5GqhJJ8HEoB\",\"YcCLwitFMAEJSnxAW\",\"BBk8ZRmMsTzpKCaux\",\"oBcs8GLX2ZFLXQy8y\",\"hRiMXDZNAzyPd5tpt\",\"mG8HqKiAQFTdRZthG\",\"tpxMgkGSHwBjS95Ta\",\"gXTAie79kiw28tx5u\",\"H4abACFDH5t8CnnyH\",\"qD2LrwaDrSdiybLKY\",\"DPi9QGLctq2y76KuE\",\"kXEfD7xxEyWd7oxxL\",\"J3upzLHuEwXH7Z2hx\",\"dYPkStFnLvAMsHSzZ\",\"cAP3n5NY64uoMwzRR\",\"5XiuAqicKD4hBdu63\",\"zd9FLSzsGz3evKafy\",\"RGMbFMZXJr7DhcAJy\",\"rfyEkETeoS96QNH4e\",\"JS3hNM3XXkxPdg3yk\",\"j49s8dHmmiyPxZmWj\",\"d8qtzoLB264iP8tdY\",\"wRttWTM59y8m5mx7x\",\"5HCu9Ydd86QgHDRNP\",\"J5T8gZqiZXFuFDTQ7\",\"Jqk2uJZZxEv5wZFze\",\"LW8PqW4HFXWfoJGo6\",\"7txFzDQ43vJ7qCY88\",\"HuNF3xTBzmatyGSTm\",\"5S9nX4rKsnCcnv4Cz\",\"eYfPWvZwnJQkHbSTK\",\"hzHsgwjark5sZCQ2c\",\"Wv2vJnEj8ywNmARoF\",\"buX4mCQhtXCfBjeno\",\"GGdmhAvxXhqhhibJN\",\"Ds7L5bksw2QRHjrKL\",\"srJ34BaybkQh3qRkM\",\"sbJcFfQjQ59Wfg4Cd\",\"qAby4AWXmTNeusvg3\",\"o4ixjQGSaYqA2JoM4\",\"T6iBEE2jp7f7iEF2P\",\"CHvzhtXnv8HTbPQ56\",\"PC3pLs36zNzpRDSuE\",\"yr822PZmmiDDenxpB\",\"yod5YhKtPqw2GfG9B\",\"3cF6NXq3ZEwdkgSjb\",\"9Ly8afdtofp8DXzrt\",\"ey3CASd6Je5LEJzfB\",\"eHcgvkTGsH7ZziqBo\",\"mvJBakQ35CWAnbbEZ\",\"qzXAMXsHZGT8o5hTA\",\"BrTDhPJcACL2bsrpJ\",\"Afnps7TJQuS9sipMb\",\"StNu7DPyTgEStZsMY\",\"2PufnQcsHsfymufX3\",\"dzS6WBTMHyFEag6Fp\",\"d9LBRxvADNBB5QJMB\",\"9bQyb6rW7xfE4vgrR\",\"suArq5BbSy7gD6xri\",\"BFSAXBzoaEJ3Wshj8\",\"MKT7khMBGXzA22ykf\",\"3nied3n8KG8RSNixH\",\"4TmgHkn5vqyHK3sYC\",\"Wi4H6ayKsNDWWQCG5\",\"4Lwjr34ypKNQNQCar\"],\"total\":114,\"quality\":[5,1,4,5,5,5,5,4,5,5,5,5,5,5,5,5,5,4,5,5,5]},\"flags\":0},\"summary\":\"Python's range function can only generate a list of integers, your task is to generate a list of floats. Generate a list of values between 0 and an endpoint n spaced at  i intervals.\\n\\nExamples\\ngen_values(2, 0.25) ➞ [0.0, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0]\\n\\ngen_values(1, 0.1) ➞ [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\\n\\ngen_values(20, 2)\",\"tags\":[\"loops\",\"math\",\"numbers\"],\"timestamp\":{\"$date\":1595753367900},\"title\":\"Generate Floats\",\"quality\":4.666666666666667,\"family\":[{\"_id\":\"g9z2gkXH5zurRPpSD\",\"language\":\"javascript\"},{\"_id\":\"HhSS3YReRhBxZAnzk\",\"language\":\"python3\"},{\"_id\":\"kTwAbPHFvYvz2umNP\",\"language\":\"ruby\"}]}}"]