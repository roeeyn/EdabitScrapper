a["{\"msg\":\"result\",\"id\":\"2299\",\"result\":{\"_id\":\"4GT8pM8JQHW97bYzi\",\"author\":\"persolut\",\"authorId\":\"xn7uGNKeAwPEkP9oA\",\"code\":\"def loneliest_number(lo, hi):\\n\\t\",\"difficulty\":3.611111111111111,\"familyId\":\"B8KNpChu5z56J8bia\",\"instructions\":\"In this challenge, write a funcion `loneliest_number` to find the last _Lonely_ number inside a sequence. A number is _Lonely_ if the distance from its **closest** Prime sets a new record of the sequence.\\n\\n```\\nSequence = from 0 to 3\\n\\n# Any number lower than 3 doesn't have a Prime preceeding it...\\n# ...so that you'll consider only its next closest Prime.\\n\\n0 has distance 2 from its closest Prime (2)\\n# It's a new record! 0 It's the first lonely number of the sequence\\n1 has distance 1 from its closest Prime (2)\\n2 has distance 1 from 3\\n3 has distance 1 from 2\\n\\n# The sequence 0 to 3  has only one Lonely number: 0\\n```\\n\\n```\\nSequence = Numbers from 5 to 10\\n\\n5 has distance 2 from its closest Prime (3 or 7)\\n# It's a new record! 5 It's the first lonely number of the sequence\\n6 has distance 1 from 5 or 7\\n7 has distance 2 from 5\\n8 has distance 1 from 7\\n9 has distance 2 from 7 or 11\\n10 has distance 1 from 11\\n\\n# The sequence 5 to 10  has only one Lonely number: 5\\n```\\n\\n```\\nSequence = Numbers from 19 to 24\\n\\n19 has distance 2 from its closest Prime (17)\\n# It's a new record! 19 It's the first lonely number of the sequence\\n20 has distance 1 from 19\\n21 has distance 2 from 5\\n22 has distance 1 from 23\\n23 has distance 4 from 19\\n# It's a new record! 23 is the second lonely number of the sequence\\n24 has distance 1 from 23\\n\\n# The sequence 19 to 24  has two Lonely numbers: 19 and 23\\n```\\n\\nThe function `loneliest_number` must  accept two integers `lo` and `hi` being the **inclusive** bounds of the sequence to analyze, and returns a dictionay (`dict`) object  with the following keys and values:\\n- `number:` is the **last _Lonely_ number found** in the given sequence;\\n- `distance:` is the distance of the `number` from its closest Prime;\\n- `closest:` is the Prime closest to `number` (if two Primes are equally distant from `number`, return the **higher Prime**).\\n\\n### Examples\\n```\\nloneliest_number(0, 22) ➞ {\\n  number: 0, distance: 2, closest: 2\\n}\\n\\nloneliest_number(8, 123) ➞ {\\n  number: 53, distance: 6, closest: 59\\n}\\n\\nloneliest_number(938, 1190) ➞ {\\n  number: 1140, distance: 11, closest: 1151\\n}\\n\\nloneliest_number(120, 1190) ➞ {\\n  number: 211, distance: 12, closest: 223\\n}\\n```\\n\\n### Notes\\n- The numbers  `0`, `1` and `2` have no previous Prime to check, so that you'll consider only the next Prime to set the distance, as in Example #1.\\n- Remember that you are searching for the **closest** Prime when establishing if the distance is a record: `7` has a distance equal to `2` because its closest Prime is `5`.\\n- If a Lonely number is equally distant from two Primes, you have to return the higher Prime, as in Example #2 (`53` has distance `6` from either `47` and `59`).\\n- The first Lonely number of a sequence is (trivially) always equal to the sequence lower bound.\\n- You can expect valid non-negative integers as input, without exceptions to handle.\",\"isHidden\":false,\"lab\":\"Test.assert_equals(loneliest_number(0, 22), {'number': 0, 'distance': 2, 'closest': 2})\\nTest.assert_equals(loneliest_number(8, 123), {'number': 120, 'distance': 7, 'closest': 127})\\nTest.assert_equals(loneliest_number(938, 1190), {'number': 1140, 'distance': 11, 'closest': 1151})\\nTest.assert_equals(loneliest_number(120, 1190), {'number': 211, 'distance': 12, 'closest': 223})\\nTest.assert_equals(loneliest_number(2, 31), {'number': 23, 'distance': 4, 'closest': 19})\\nTest.assert_equals(loneliest_number(14, 50), {'number': 23, 'distance': 4, 'closest': 19})\\nTest.assert_equals(loneliest_number(889, 1389), {'number': 1344, 'distance': 17, 'closest': 1361})\\nTest.assert_equals(loneliest_number(3208, 8752), {'number': 3967, 'distance': 20, 'closest': 3947})\\nTest.assert_equals(loneliest_number(16723, 28775), {'number': 24281, 'distance': 30, 'closest': 24251})\",\"language\":\"python3\",\"summary\":\"In this challenge, write a funcion loneliestnumber to find the last Lonely_ number inside a sequence. A number is Lonely if the distance from its closest Prime sets a new record of the sequence.\\n\\nSequence = from 0 to 3\\n\\nAny number lower than 3 doesn't have a Prime preceeding it...\\n...so that you'll consider only its next closest Prime.\\n\\n0 has distance 2 from i\",\"tags\":[\"classes\",\"numbers\",\"loops\"],\"timestamp\":{\"$date\":1597407899376},\"title\":\"A Lonely Class for Lonely Numbers\",\"stats\":{\"completed\":{\"total\":15,\"ratings\":[3,3,3,3,3,4,5,3,5,4,5,4,2,2,5,2,4,5],\"rators\":[\"xn7uGNKeAwPEkP9oA\",\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\",\"vTfyrr4pGddp8rbXc\",\"2XqgeTopdma89viw3\",\"p8qqFdJ3FSk5x9z3G\",\"eHcgvkTGsH7ZziqBo\",\"yjtdwc2AC4jA2RWtn\",\"8sNv5PTHa7XQ8bNqR\",\"iS5BrkGLzJyPK7nKt\",\"JKb5rhL6DKcCAypF9\",\"2PufnQcsHsfymufX3\",\"gJYuGdkXEWWmGRLzu\"],\"quality\":[]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":0,\"family\":[{\"_id\":\"cmFnYzxQea5LdETgL\",\"language\":\"csharp\"},{\"_id\":\"diSXtsft9ux8Wq98j\",\"language\":\"javascript\"},{\"_id\":\"4GT8pM8JQHW97bYzi\",\"language\":\"python3\"}]}}"]