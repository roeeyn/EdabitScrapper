a["{\"msg\":\"result\",\"id\":\"229\",\"result\":{\"_id\":\"H8DJtxMmzYdyZuYar\",\"author\":\"C# Amateur\",\"authorId\":\"YEMQNE333gAXhGE4c\",\"code\":\"def say_what(obj):\\n\\t\",\"difficulty\":0.5870967741935483,\"familyId\":\"yKKz7tLRpHjh2dfu9\",\"instructions\":\"The insurance guy calls again. Apparently, they were informed by your spouse that some items were not stolen at all and you failed to mention this detail to them. This is a fraud attempt! You freeze and mumble something unintelligible. Find out what you said.\\n\\nGiven a dictionary, return a string that concatenates all the values and adds the 2nd key at the end. Make sure you keep an empty space between them but not at the beginning or end of the string. Look at the examples for a clearer picture.\\n\\n### Examples\\n```\\n{ 1: \\\"Mommy\\\", 2: \\\"please\\\", 3: \\\"help\\\" } ➞ \\\"Mommy please help please\\\"\\n\\n{ 1: \\\"Me\\\", 2: \\\"innocent\\\", 3: \\\"is\\\" } ➞ \\\"Me innocent is innocent\\\"\\n\\n{ 1: \\\"Must\\\", 2: \\\"lawyer\\\", 3: \\\"call\\\" } ➞ \\\"Must lawyer call lawyer\\\"\\n```\\n\\n### Notes\\n- The keys will **always** be `1:` `2:` `3:` etc. in this order. Don't mistake keys with indexes.\\n- I'm rating the challenge very easy because it can be hardcoded **but try to do it dynamically**, that is, if you receive a dictionary with 4 keys instead, your function should still work.\\n- Check the **Resources** for tips if needed.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(say_what({1: \\\"Mommy\\\", 2: \\\"please\\\", 3: \\\"help\\\"}), \\\"Mommy please help please\\\")\\nTest.assert_equals(say_what({1: \\\"Me\\\", 2: \\\"innocent\\\", 3: \\\"is\\\"}), \\\"Me innocent is innocent\\\")\\nTest.assert_equals(say_what({1: \\\"Must\\\", 2: \\\"lawyer\\\", 3: \\\"call\\\"}), \\\"Must lawyer call lawyer\\\")\\nTest.assert_equals(say_what({1: \\\"Call\\\", 2: \\\"agent\\\", 3: \\\"my\\\"}), \\\"Call agent my agent\\\")\\nTest.assert_equals(say_what({1: \\\"My\\\", 2: \\\"spouse\\\", 3: \\\"lying\\\"}), \\\"My spouse lying spouse\\\")\\nTest.assert_equals(say_what({1: \\\"I\\\", 2: \\\"insurance\\\", 3: \\\"need\\\", 4: \\\"new\\\"}), \\\"I insurance need new insurance\\\")\",\"language\":\"python3\",\"quality\":4.589041095890411,\"summary\":\"The insurance guy calls again. Apparently, they were informed by your spouse that some items were not stolen at all and you failed to mention this detail to them. This is a fraud attempt! You freeze and mumble something unintelligible. Find out what you said.\\n\\nGiven a dictionary with always the exact same 3 keys, return a string that concatenates all the value\",\"tags\":[\"arrays\",\"loops\",\"strings\",\"objects\"],\"timestamp\":{\"$date\":1605543497954},\"title\":\"Burglary Series (11): Say What\",\"stats\":{\"completed\":{\"total\":243,\"ratings\":[1,1,1,1,1,1,1,2,0,1,0,0,0,1,1,1,2,0,1,0,1,1,0,1,0,1,0,0,0,0,0,0,0,2,1,1,0,2,3,1,0,0,0,0,0,0,0,0,0,1,1,0,1,1,3,1,0,0,0,2,1,0,3,0,1,0,0,1,1,0,0,0,2,0,1,0,0,0,0,0,0,1,2,0,0,0,0,1,1,0,0,1,0,0,1,0,0,0,1,1,1,0,1,2,1,1,0,0,0,0,0,0,1,2,0,0,0,1,0,1,0,0,1,0,0,0,0,1,0,3,0,0,0,1,1,1,0,1,0,0,1,1,1,2,1,0,0,1,0,1,1,0,1,1,1],\"quality\":[5,5,1,5,5,5,4,5,5,5,5,5,3,5,5,5,5,4,1,5,2,4,5,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,5,5,5,4,5,4,5,5,4,2,5,5,5,5,3,5,5,5],\"rators\":[\"Yp7uvStL97cC9fKkY\",\"E99eHDyJsxJ5nA9Qo\",\"5demJuwPYT3GRSff7\",\"FEYpu9RWysAgW3XnP\",\"RYYanpX6aRsTJSQzG\",\"sykH836ND5MKYQAE5\",\"5prBnBm3YszWAYPTp\",\"i5iePG5GqhJJ8HEoB\",\"GdKtjPh8TcfmJuduv\",\"izDLrvw49P5pHQrN9\",\"cLa38sZL6ir75dX63\",\"5HTSi5wQNAdLm57LB\",\"cAP3n5NY64uoMwzRR\",\"J3upzLHuEwXH7Z2hx\",\"ffjnHrx8Ym7A7pQWe\",\"zmHLpefqQLnmNfusb\",\"zd9FLSzsGz3evKafy\",\"Jqk2uJZZxEv5wZFze\",\"jhfYE4Yj9i2GZ4Dbt\",\"pPpmP7xeJzGgK362R\",\"TLnX8KLpS2ZuEkuLK\",\"nJXgbSQozcoE8Wn4N\",\"Q7Yxda7dqKeYPs2Db\",\"gb9rvGus2Jv7bjZSs\",\"QRv96jmNaYsWkxQEG\",\"wRttWTM59y8m5mx7x\",\"xK6h7xJcMm9h9Nekd\",\"vCeeMuYDbz3MB4vsk\",\"DPi9QGLctq2y76KuE\",\"fW3mQfbTKhp7enxGP\",\"Krto2sGMfGWBLcL7n\",\"Ds7L5bksw2QRHjrKL\",\"aEm3Wvj2rFYRL8Lrb\",\"AFfw7cGg83uYk2Miy\",\"8JyqsSbN2FJXPr3cw\",\"Xa36SustqfM7SHTXW\",\"J5T8gZqiZXFuFDTQ7\",\"buX4mCQhtXCfBjeno\",\"HuNF3xTBzmatyGSTm\",\"PXAcsKkssS2yLyDv2\",\"5HCu9Ydd86QgHDRNP\",\"HAtNvtvpTjB2DkhnG\",\"YcCLwitFMAEJSnxAW\",\"7KsymxNN9S8ZG5oQe\",\"gJYuGdkXEWWmGRLzu\",\"rfyEkETeoS96QNH4e\",\"igLmeTgCMEPu7fQTd\",\"3YDiP56vf8NysvNpX\",\"Q6gEE9dG8ERy2Xu3c\",\"fTNQmMvTZhhiGBCMe\",\"XBTeQ9TMCFZQ2eMNQ\",\"3a69uMSDtWhoLoWmx\",\"WPf3wuMaAipBActzR\",\"YmQb9Mo4Xcg2vzgbn\",\"nDgiSYAdHRmX8ywNT\",\"qmNaxe7JbtECT3gvT\",\"3CekgmagXtfnnTABW\",\"iS5BrkGLzJyPK7nKt\",\"YRAzEBJoLvSaiPtYx\",\"mzbfEWpDFFJzLehvY\",\"v4nbGdoqJwuDBoocS\",\"JS3hNM3XXkxPdg3yk\",\"qAby4AWXmTNeusvg3\",\"CQhaiZqQcP87YteSG\",\"9FCeFzjPA4jrQ7oHW\",\"eYfPWvZwnJQkHbSTK\",\"5wCHxMQ5Km2bjqcGZ\",\"F7wta4nHmabMr9dfd\",\"3LiSLdtN58n46NEqg\",\"oyKcm3zqdy8Ko5P5d\",\"PBnvAuiKXwjqjKG33\",\"5hQnRWiKkhgKJXNMP\",\"oBcs8GLX2ZFLXQy8y\",\"5S9nX4rKsnCcnv4Cz\",\"srJ34BaybkQh3qRkM\",\"PexKJN2gNdthuHKxZ\",\"Lg4t6SEWgtYz4u7Cj\",\"Cg3LKtEAJpsrdWroG\",\"xNCLJDm9Bni6gByMz\",\"8PwfYqoDQFThzNtvf\",\"sKfrD9gjCDHuqLzSk\",\"2MjzJ7yxh3eT3xbng\",\"n93uwjdirjyRCRATo\",\"Fk9kLwoG4Brf4KsKf\",\"PC3pLs36zNzpRDSuE\",\"TmM3AN7g3fkh69ycj\",\"di2hhADLx59Bj4ewM\",\"AYZrBpxmaHxq9th3T\",\"HqmxnQJM66Y57twhn\",\"yEvXDzXnEPNz6tTCK\",\"FuYTQcDNjct58rqPa\",\"8aEGGQPkGesWwoaom\",\"yAouD3PxzED8a4gap\",\"q9FfWNiMDKRiaCJ5j\",\"yjtdwc2AC4jA2RWtn\",\"Nb6LYPoQP6KJZt8mz\",\"eMuCpJ2spXWkJjWNz\",\"vCxuabDxEv9YC3Szb\",\"DEDniTrstQYGounXT\",\"fe3gsFT3MbZ4azEC9\",\"YwAvPdqD6Xi2qjapZ\",\"XD5nmvKQchKezPXhy\",\"StNu7DPyTgEStZsMY\",\"mDWNyaaQ9hvPCRzSd\",\"cZccqzRQ9GgjQF6Az\",\"HBuJYgW2eRBJp9FoG\",\"GZgFDSZdgKBuixp22\",\"AXcnPX68zdMiLNSmu\",\"XrqNzJ2FRG8HnGiR6\",\"mxX4rH5ELYkdZ2Mbw\",\"5f6oSeq4r5WTXLdCQ\",\"9pzFiFK3ANLjQfnr2\",\"7dQYiDeTcMztbGyso\",\"tAF9Gf6PiGogbZuWs\",\"N2wnZXkhDH86mgjQ8\",\"q6QsMYNMpPNtmyTeW\",\"cR3ibTMxLyEdDFCHY\",\"uvLimfW9x3bCp7huQ\",\"LQxof8pGabGuWP7Gn\",\"3cF6NXq3ZEwdkgSjb\",\"CHvzhtXnv8HTbPQ56\",\"4bb7pim4ewTwrMTEA\",\"kjvgTyRFyKHv44DcH\",\"iojEnnY9FsMfYzp6f\",\"NrRa4TS6uZR9xuXRt\",\"2QGRoQn2dRq3scu7k\",\"JKbEBybAsiKrmcqof\",\"66a9xX73nmTEuKs9k\",\"T6iBEE2jp7f7iEF2P\",\"d8qtzoLB264iP8tdY\",\"pwWtbXEjzuvrhEGwt\",\"zC8WrPp5BC6c2exrW\",\"sbJcFfQjQ59Wfg4Cd\",\"fdyejapW3NWN7utPX\",\"4TmgHkn5vqyHK3sYC\",\"RTER5uJdW4khkiNbY\",\"jgyuzt5BpA3ohHG96\",\"9Ly8afdtofp8DXzrt\",\"mvJBakQ35CWAnbbEZ\",\"T6Rm8mREPMZSftzrC\",\"H9KZi2cjt4FwH7qog\",\"a2Kmh6ekWqQQooHiQ\",\"j7ebNFtte6fSkMWjj\",\"NP2RxM3eBd3drnDwP\",\"JiSpvq6C7azQEmENc\",\"AasGs8AeX9Lcb9xJn\",\"FxbTzThBiTnRzfirA\",\"eHcgvkTGsH7ZziqBo\",\"sHjfbGQGLHE6JR6qu\",\"EfxwqhYdapX3dMQC2\",\"TCvpT4EPb8qNssNB7\",\"iYXdNw7tKcgA3QwBX\",\"Afnps7TJQuS9sipMb\",\"hRfdHT8bWztZuCqzi\",\"XbxHXmh5ZmRN2gw3K\",\"MKT7khMBGXzA22ykf\",\"x2Cz7S8rCKJqCE3Xe\",\"gKnWjDjwrJh7MK2df\",\"PTDFuxAzou7W6asWt\",\"pQwhNKiCne4gEZgcn\",\"SkQcb2sRn4as5KpnN\",\"FiaTpm7ehfDv43wSG\",\"7q8oBsCHwn48Ppnrq\",\"dYPkStFnLvAMsHSzZ\",\"aN6owKqBeZj7ZefFR\",\"d9LBRxvADNBB5QJMB\",\"9HPB28hBoTnZnspQE\",\"NYyhWY7soeTZ6ymd5\",\"ecytnKJxjCPk8Kbif\",\"hZ2JDAEG2P5rMLWEW\",\"5nbHH4eApn6So9h2n\",\"QrGnkbEeTo45YwRHy\",\"9LrF5o2TK2iE8BZJh\",\"qaPjAANdnxFnWfj5d\",\"fGvJRtjbJFJJZLCnW\",\"uK58g2EXxqxTaB2iA\",\"PmRyaLmhAF4MMLBtM\",\"B4y8aoyXJtskYPFEL\",\"dzS6WBTMHyFEag6Fp\",\"wjc4iejpErBhxWwHo\",\"rF97GDLqCgynr7BaD\",\"Ne8mK9DDHG8TRkoxG\",\"xjyixzXzqqqTfJARd\",\"gbGzZz5Yq5hT357v8\",\"afvP29FhRou2bTaav\",\"mw9464S5dnenqzvpm\",\"N2sNut8aET59YNhAy\",\"vAbK8sCfKyFC78HYg\",\"M2gFMJkocQSY6bsFR\",\"r83jJeskFETo3RLhZ\",\"tR9grPBLncwacBTzr\",\"M4vq8ATaS9Jg5X7iP\",\"NzbRqGWspQnWMoDrF\",\"5H6WybGSZcsxZnLAW\",\"5jC6kt3SXoABZBwsY\",\"fMp8sPsKSECdfgF9j\",\"syRNbbPdLCGXbH2Gy\",\"ucZ9bQzygDAXDgMoP\",\"quYcmxS33qHALzb4Z\",\"M8dQuMrEpP8Hc3tHN\",\"FT2wBacm3JxrYmZDW\",\"acENs2fSF9d7hkTZx\",\"Si3HYCLMe8PM47rRt\",\"EE6qCDCRphjXXdE3n\",\"rrSC943cCKNG48sH4\",\"rraTtctZqnjXu2L2x\",\"F8dA24AosSC8XXb7D\",\"acFDzp9EJzHg8c2rD\",\"5QN8R22z43SrwoHDz\",\"AwXQLqnTYzcCQrnqQ\",\"gjiu8kLnHYxe4HoBN\",\"sMcFMPkMJC4Kh6ymj\",\"XYwCvWPkjJu4Zn5Qu\",\"4Lwjr34ypKNQNQCar\",\"Wi4H6ayKsNDWWQCG5\",\"dqwatKFAeGpjmf5dm\",\"jWbd7SYDzLPjc9EDh\",\"BrTDhPJcACL2bsrpJ\",\"5CsHudxuDESxmjTPW\",\"mdRQaGT98ycMt87S2\",\"peCvTbjQBgdWo53Wv\",\"7HAL7H6NJmc4NC8Q5\",\"3SgSNoAB3sxaYeT3w\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"7hrjegxToTSF4zAoM\",\"language\":\"javascript\"},{\"_id\":\"H8DJtxMmzYdyZuYar\",\"language\":\"python3\"}]}}"]