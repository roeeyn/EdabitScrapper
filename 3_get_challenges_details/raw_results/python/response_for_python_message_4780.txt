a["{\"msg\":\"result\",\"id\":\"1106\",\"result\":{\"_id\":\"pzQXHMqizBmaLDCHc\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"def calculate_damage(your_type, opponent_type, attack, defense):\\n\\t\",\"difficulty\":1.5789473684210527,\"familyId\":\"iZ8BfuyR6wnEfzcj2\",\"instructions\":\"It's a Pokemon battle! Your task is to calculate the damage that a particular move would do using the following formula (not the actual one from the game):\\n\\n```\\ndamage = 50 * (attack / defense) * effectiveness\\n```\\n\\n- attack = your attack power\\n- defense = the opponent's defense\\n- effectiveness = the effectiveness of the attack based on the matchup (see explanation below)\\n\\nEffectiveness:\\n\\nAttacks can be super effective, neutral, or not very effective depending on the matchup. For example, water would be super effective against fire, but not very effective against grass.\\n\\n- Super effective: 2x damage\\n- Neutral: 1x damage\\n- Not very effective: 0.5x damage\\n\\nTo prevent this challenge from being tedious, you'll only be dealing with four types: fire, water, grass, and electric. Here is the effectiveness of each matchup:\\n\\n- fire > grass\\n- fire < water\\n- fire = electric\\n- water < grass\\n- water < electric\\n- grass = electric\\n\\nThe function you must implement takes in:\\n\\n- your type\\n- the opponent's type\\n- your attack power\\n- the opponent's defense\\n\\n### Examples\\n```\\ncalculate_damage(\\\"fire\\\", \\\"water\\\", 100, 100) ➞ 25\\n\\ncalculate_damage(\\\"grass\\\", \\\"fire\\\", 35, 5) ➞ 175\\n\\ncalculate_damage(\\\"electric\\\", \\\"fire\\\", 100, 100) ➞ 50\\n```\\n\\n### Notes\\nAny type against itself is not very effective. Also, assume that the relationships between different types are symmetric (if A is super effective against B, then B is not very effective against A).\",\"isHidden\":false,\"lab\":\"Test.assert_equals(calculate_damage(\\\"fire\\\", \\\"water\\\", 100, 100), 25)\\nTest.assert_equals(calculate_damage(\\\"grass\\\", \\\"water\\\", 100, 100), 100)\\nTest.assert_equals(calculate_damage(\\\"electric\\\", \\\"fire\\\", 100, 100), 50)\\nTest.assert_equals(calculate_damage(\\\"grass\\\", \\\"electric\\\", 57, 19), 150)\\nTest.assert_equals(calculate_damage(\\\"grass\\\", \\\"water\\\", 40, 40), 100)\\nTest.assert_equals(calculate_damage(\\\"grass\\\", \\\"fire\\\", 35, 5), 175)\\nTest.assert_equals(calculate_damage(\\\"fire\\\", \\\"electric\\\", 10, 2), 250)\",\"language\":\"python3\",\"summary\":\"It's a Pokemon battle! Your task is to calculate the damage that a particular move would do using the following formula (not the actual one from the game):\\n\\ndamage = 50 * (attack / defense) * effectiveness\\n\\nattack = your attack power\\ndefense = the opponent's defense\\neffectiveness = the effectiveness of the attack based on the matchup (see explanation below)\\n\\nE\",\"tags\":[\"conditions\",\"math\",\"logic\",\"games\"],\"timestamp\":{\"$date\":1580190265110},\"title\":\"Pokemon Damage Calculator\",\"stats\":{\"completed\":{\"total\":121,\"ratings\":[2,2,2,2,2,2,2,1,0,2,1,2,2,3,2,0,2,2,2,2,2,2,1,1,2,2,1,2,1,1,3,2,2,2,0,2,2,2,1,2,1,0,0,2,2,2,2,2,0,2,2,1,2,2,0,2,3,3,2,2,2,1,2,2,2,2,1,1,0,2,2,2,2,2,2,1,0,2,2,2,1,1,1,1,2,2,0,2,1,3,0,2,1,0,1],\"rators\":[\"2fxapKr8XGdNeaKi2\",\"tAF9Gf6PiGogbZuWs\",\"Jqk2uJZZxEv5wZFze\",\"kBmhcwkCqxiy4GwiZ\",\"s5M5RvgqR9BhB9JoC\",\"CEd9tLdXeDeNHSzys\",\"gb9rvGus2Jv7bjZSs\",\"8JyqsSbN2FJXPr3cw\",\"C4QntmkYtB89GNtpd\",\"AasGs8AeX9Lcb9xJn\",\"xxxhm6QEkRpah4k94\",\"PXAcsKkssS2yLyDv2\",\"4CFzv558qbGcpQwc4\",\"yZvzB3qFb8pkHy4dg\",\"dHZqT6h4JMwk5fPC8\",\"BEdxteC2PKrmTLbdM\",\"Yp7uvStL97cC9fKkY\",\"cR3ibTMxLyEdDFCHY\",\"ZNnsMeNkdDhHjSrZb\",\"jNvegJWCk5HCtEMbK\",\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\",\"qPSEBYMMi9WJRr8SA\",\"E7Qn6yKjwGJd6EPqM\",\"ytceK4TxiCchoCLYC\",\"gJYuGdkXEWWmGRLzu\",\"LP9R3NfPdHviZb4Wz\",\"DEDniTrstQYGounXT\",\"MKJhn7goNzuGtB5y9\",\"ijDkrdZLoL5Cfqco3\",\"hnyhBFWwNCz9mDfSi\",\"JS3hNM3XXkxPdg3yk\",\"4rfMrvxPiBHvSGnAm\",\"XC9nQxxqYS46pgHTK\",\"9pzFiFK3ANLjQfnr2\",\"mJbo6TRzZbbFQxXmq\",\"ahk2qiXKJA753wAJk\",\"aPLuemxzZ5iS57NBQ\",\"At4snpeHBBYseeMab\",\"BK4vivKay53QJMKRc\",\"NG8PWBSjsM8mMhQEq\",\"syRNbbPdLCGXbH2Gy\",\"iojEnnY9FsMfYzp6f\",\"kXEfD7xxEyWd7oxxL\",\"ZrKCkX7xxGGZzauFW\",\"R4SjTgDnpigJYDLyL\",\"yjtdwc2AC4jA2RWtn\",\"9H7W6MZhf96u92uap\",\"7ie6X2KyerNc9piGW\",\"HqmxnQJM66Y57twhn\",\"jNE5AHcJQWXz7efuP\",\"JqmimEwk6HxiQQyZF\",\"winaFSNGA6hosaNA6\",\"PTDFuxAzou7W6asWt\",\"cYoWJ8sQE3mdBhJ9D\",\"oBcs8GLX2ZFLXQy8y\",\"NNE5HNRXAkmhrWgyQ\",\"dLjgSdhmwniSGBjvS\",\"gXTAie79kiw28tx5u\",\"c2u7qfdaYxcyuydtu\",\"p8qqFdJ3FSk5x9z3G\",\"DPi9QGLctq2y76KuE\",\"J3upzLHuEwXH7Z2hx\",\"YjPkyrF5D3ihxTjwk\",\"dYPkStFnLvAMsHSzZ\",\"FEYpu9RWysAgW3XnP\",\"KdYQN3KAT2DyTzT2a\",\"5XiuAqicKD4hBdu63\",\"3oWGHYzEWze8hMKtt\",\"wYTzTWWMtQinoAmpG\",\"cAP3n5NY64uoMwzRR\",\"RGMbFMZXJr7DhcAJy\",\"zd9FLSzsGz3evKafy\",\"dBzwBtRjZqB98DJeB\",\"LQxof8pGabGuWP7Gn\",\"rfyEkETeoS96QNH4e\",\"5S9nX4rKsnCcnv4Cz\",\"rfz2KFvyY3aQyrquE\",\"4sHkH3t9CJYhbDwjM\",\"GGdmhAvxXhqhhibJN\",\"CTKmXtrqDYqJBnuy8\",\"iS5BrkGLzJyPK7nKt\",\"Ds7L5bksw2QRHjrKL\",\"QRv96jmNaYsWkxQEG\",\"X7dDyoPvRD5tzDPwP\",\"2EbDCCJJvCfKkbYia\",\"J5T8gZqiZXFuFDTQ7\",\"Wpn95NqWxncQrwNgz\",\"xn7uGNKeAwPEkP9oA\",\"5HCu9Ydd86QgHDRNP\",\"ey3CASd6Je5LEJzfB\",\"Kv92AoBe3KjTCfiBD\",\"qzXAMXsHZGT8o5hTA\",\"Afnps7TJQuS9sipMb\",\"EfxwqhYdapX3dMQC2\",\"StNu7DPyTgEStZsMY\",\"9LghqktEpW4YLxdNk\",\"sHjfbGQGLHE6JR6qu\",\"3WaNDEgnMpNnDmFrB\",\"eMuCpJ2spXWkJjWNz\",\"yod5YhKtPqw2GfG9B\",\"BrTDhPJcACL2bsrpJ\",\"dzS6WBTMHyFEag6Fp\",\"2PufnQcsHsfymufX3\",\"BFSAXBzoaEJ3Wshj8\",\"i4MfM38aiCeFAiWtz\",\"T6iBEE2jp7f7iEF2P\",\"4TmgHkn5vqyHK3sYC\",\"Wi4H6ayKsNDWWQCG5\",\"CHvzhtXnv8HTbPQ56\",\"Ncn7Qn2LbdsiJnfFk\"],\"quality\":[5,1,5,5,5,5,5,4,5,5,3,5,5,5,5,5,5,5,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":4.666666666666667,\"family\":[{\"_id\":\"3hgkBd68EyYQF9YxG\",\"language\":\"javascript\"},{\"_id\":\"pzQXHMqizBmaLDCHc\",\"language\":\"python3\"},{\"_id\":\"w3K2JzhBhDp63r9Yi\",\"language\":\"ruby\"}]}}"]