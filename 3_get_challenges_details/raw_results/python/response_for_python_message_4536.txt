a["{\"msg\":\"result\",\"id\":\"984\",\"result\":{\"_id\":\"yGBevdRmXvSyTaBSA\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def sort_drinks_by_price(drinks):\\n\\t\",\"difficulty\":1.497584541062802,\"familyId\":\"GCfrQqgQubyBTrWj6\",\"instructions\":\"You will be given a list of drinks, with each drink being a dictionary with two properties: name and price. Create a function that has the `drinks` list as an argument and return the drinks dictionaries sorted by price in ascending order.\\n\\nAssume that the following array of drink objects needs to be sorted:\\n\\n```\\ndrinks = [\\n  {\\\"name\\\": \\\"lemonade\\\", \\\"price\\\": 50},\\n  {\\\"name\\\": \\\"lime\\\", \\\"price\\\": 10}\\n]\\n```\\n\\nThe output of the sorted drinks object will be:\\n\\n### Examples\\n```\\nsort_drinks_by_price(drinks) ➞ [{name: \\\"lime\\\", price: 10}, {name: \\\"lemonade\\\", price: 50}]\\n```\\n\\n### Notes\\nN/A\",\"isHidden\":false,\"lab\":\"# Original challenge by @meesie1\\n\\ndrinks = [\\n\\t{\\\"name\\\": 'lemonade', \\\"price\\\": 90}, \\n\\t{\\\"name\\\": 'lime', \\\"price\\\": 432}, \\n\\t{\\\"name\\\": 'peach', \\\"price\\\": 23}\\n]\\n\\nans = [\\n\\t{\\\"name\\\": 'peach', \\\"price\\\": 23},\\n\\t{\\\"name\\\": 'lemonade', \\\"price\\\": 90}, \\n\\t{\\\"name\\\": 'lime', \\\"price\\\": 432}\\n]\\n\\nTest.assert_equals(sort_drinks_by_price(drinks), ans, \\\"Object is not sorted.\\\")\\nTest.assert_equals(sort_drinks_by_price([{'name': 'lemonade', 'price': 266}, {'name': 'cola', 'price': 71}, {'name': 'lime', 'price': 467}, {'name': 'peach', 'price': 203}, {'name': 'water', 'price': 216}]), [{'name': 'cola', 'price': 71}, {'name': 'peach', 'price': 203}, {'name': 'water', 'price': 216}, {'name': 'lemonade', 'price': 266}, {'name': 'lime', 'price': 467}], 'Object is not sorted.')\\nTest.assert_equals(sort_drinks_by_price([{'name': 'lemonade', 'price': 467}, {'name': 'cola', 'price': 486}, {'name': 'lime', 'price': 469}]), [{'name': 'lemonade', 'price': 467}, {'name': 'lime', 'price': 469}, {'name': 'cola', 'price': 486}], 'Object is not sorted.')\\nTest.assert_equals(sort_drinks_by_price([{'name': 'lemonade', 'price': 373}, {'name': 'cola', 'price': 459}, {'name': 'lime', 'price': 461}]), [{'name': 'lemonade', 'price': 373}, {'name': 'cola', 'price': 459}, {'name': 'lime', 'price': 461}], 'Object is not sorted.')\\nTest.assert_equals(sort_drinks_by_price([{'name': 'lemonade', 'price': 16}, {'name': 'cola', 'price': 284}, {'name': 'lime', 'price': 233}, {'name': 'peach', 'price': 87}]), [{'name': 'lemonade', 'price': 16}, {'name': 'peach', 'price': 87}, {'name': 'lime', 'price': 233}, {'name': 'cola', 'price': 284}], 'Object is not sorted.')\\nTest.assert_equals(sort_drinks_by_price([{'name': 'lemonade', 'price': 213}, {'name': 'cola', 'price': 42}, {'name': 'lime', 'price': 478}, {'name': 'peach', 'price': 450}, {'name': 'water', 'price': 256}]), [{'name': 'cola', 'price': 42}, {'name': 'lemonade', 'price': 213}, {'name': 'water', 'price': 256}, {'name': 'peach', 'price': 450}, {'name': 'lime', 'price': 478}], 'Object is not sorted.')\\nTest.assert_equals(sort_drinks_by_price([{'name': 'lemonade', 'price': 115}, {'name': 'cola', 'price': 164}, {'name': 'lime', 'price': 88}, {'name': 'peach', 'price': 57}, {'name': 'water', 'price': 407}]), [{'name': 'peach', 'price': 57}, {'name': 'lime', 'price': 88}, {'name': 'lemonade', 'price': 115}, {'name': 'cola', 'price': 164}, {'name': 'water', 'price': 407}], 'Object is not sorted.')\\nTest.assert_equals(sort_drinks_by_price([{'name': 'lemonade', 'price': 382}, {'name': 'cola', 'price': 363}]), [{'name': 'cola', 'price': 363}, {'name': 'lemonade', 'price': 382}], 'Object is not sorted.')\\nTest.assert_equals(sort_drinks_by_price([{'name': 'lemonade', 'price': 13}, {'name': 'cola', 'price': 184}]), [{'name': 'lemonade', 'price': 13}, {'name': 'cola', 'price': 184}], 'Object is not sorted.')\\nTest.assert_equals(sort_drinks_by_price([{'name': 'lemonade', 'price': 147}, {'name': 'cola', 'price': 289}, {'name': 'lime', 'price': 42}, {'name': 'peach', 'price': 486}, {'name': 'water', 'price': 87}]), [{'name': 'lime', 'price': 42}, {'name': 'water', 'price': 87}, {'name': 'lemonade', 'price': 147}, {'name': 'cola', 'price': 289}, {'name': 'peach', 'price': 486}], 'Object is not sorted.')\\nTest.assert_equals(sort_drinks_by_price([{'name': 'lemonade', 'price': 422}, {'name': 'cola', 'price': 43}]), [{'name': 'cola', 'price': 43}, {'name': 'lemonade', 'price': 422}], 'Object is not sorted.')\",\"language\":\"python3\",\"summary\":\"You will be given a list of drinks, with each drink being a dictionary with two properties: name and price. Create a function that has the drinks list as an argument and return the drinks dictionaries sorted by price in ascending order.\\n\\nAssume that the following array of drink objects needs to be sorted:\\n\\ndrinks = [\\n  {\\\"name\\\": \\\"lemonade\\\", \\\"price\\\": 50},\\n  {\\\"na\",\"tags\":[\"objects\",\"sorting\"],\"timestamp\":{\"$date\":1582063847861},\"title\":\"Drink Sorting\",\"stats\":{\"completed\":{\"total\":259,\"ratings\":[1,1,1,1,1,0,1,1,1,3,3,2,2,2,0,0,1,2,2,1,3,1,2,2,2,1,1,2,2,1,1,1,0,3,2,2,2,2,1,1,1,1,2,2,2,0,0,2,2,2,1,1,2,2,2,0,2,2,1,1,1,2,2,2,1,2,0,2,1,1,3,2,2,1,2,2,2,2,2,2,1,2,3,2,3,2,1,1,1,2,1,0,2,2,2,2,2,2,1,2,2,2,0,2,2,2,2,1,2,0,1,2,1,1,1,0,2,0,3,1,0,2,2,2,2,2,2,0,1,2,2,2,1,2,2,2,0,2,3,1,1,2,2,2,1,2,2,2,2,0,1,1,2,2,2,1,1,1,2,2,0,2,2,2,3,2,2,1,0,2,1,1,2,1,1,1,2,2,2,0,2,2,2,2,1,1,2,2,0,2,0,0,2,1,2,2,2,2,2,1,1,1,1,1,1,1,1],\"rators\":[\"gb9rvGus2Jv7bjZSs\",\"N2wnZXkhDH86mgjQ8\",\"ksYKipM57WDXYHNmA\",\"tAF9Gf6PiGogbZuWs\",\"AZ5otB6RPtiWz9Gcn\",\"wmiKeocyx5AvLxRbi\",\"u5u2YpHXiNgzDNJdX\",\"i4YM8iLfgozNR3hZ3\",\"mybpojPXaZigaqsAD\",\"jeuoearPPTcGPgXhf\",\"dHZqT6h4JMwk5fPC8\",\"qvEvDcL32a5F4Tg6c\",\"DvzpcjeQsLCSZc9r9\",\"YsZRGeWLp7so3tQK4\",\"2fxapKr8XGdNeaKi2\",\"DXBbJKYFTBi2pxR7c\",\"AasGs8AeX9Lcb9xJn\",\"QnPD4Sv6W4LHc2Qng\",\"yKttxy9JGn5Jzwuj6\",\"zQ7vxc2qQS47js8iY\",\"Ycj4iTJGFyvC4bXek\",\"C4QntmkYtB89GNtpd\",\"yabtHTtycsWhcGBfD\",\"4CFzv558qbGcpQwc4\",\"BeFnbPbMnAM2SjBdZ\",\"PXAcsKkssS2yLyDv2\",\"s5M5RvgqR9BhB9JoC\",\"ZLagJxgCdmwzZX9QY\",\"X29Ekg7HjqHAYgCSM\",\"mCKqRAPMTht5QBnXo\",\"j2wcHGHmPCHbaQEye\",\"v3fjGuc7Pq4yjFygS\",\"hnyhBFWwNCz9mDfSi\",\"yZvzB3qFb8pkHy4dg\",\"LQxof8pGabGuWP7Gn\",\"N7GPFEhCaiQ79MKjz\",\"aRqQ42J5zqCmBNd8w\",\"PSrcg6fy835R4c5CW\",\"p3dsCFdWGzWGhFrSQ\",\"9Ly8afdtofp8DXzrt\",\"4tgBydK887PitgAoi\",\"zg8GmMSP2LkHBtAzy\",\"RZwfR4TR6fopHpdCD\",\"cwFa96HC7rxGo49wB\",\"sz8ufn9i8zeiGWpAy\",\"8JyqsSbN2FJXPr3cw\",\"cR3ibTMxLyEdDFCHY\",\"Yp7uvStL97cC9fKkY\",\"jNvegJWCk5HCtEMbK\",\"BJsK5WxLmAq9zDmQ9\",\"mxX4rH5ELYkdZ2Mbw\",\"g8yJiPAWXbrgxbjfZ\",\"C9LKGu2g5hSijvDzA\",\"Ro3ppqamSxiJv2wxP\",\"8LfTheFzvicameoz9\",\"aEm3Wvj2rFYRL8Lrb\",\"vLrq4dEDMM2wd68Dc\",\"eDq8mmKpfhLWEDjeY\",\"Ti5BF4jnruwNNzHY8\",\"2iFe3EHEH2YdhSKrs\",\"LJhkQpcb7DhE9L3hR\",\"2QGRoQn2dRq3scu7k\",\"8PwfYqoDQFThzNtvf\",\"HF28xZKSLM9wEuqNg\",\"ZNnsMeNkdDhHjSrZb\",\"gJYuGdkXEWWmGRLzu\",\"vB69vXER5WEL6knPr\",\"q5a96XumccZyhQNyL\",\"KRSKj7ikX2ytWFmod\",\"Nua6T3dBurBy3Qfg9\",\"5kEyLPjTLrt7z2YJZ\",\"Cc2Cgj4MWXZxsTooC\",\"Jqk2uJZZxEv5wZFze\",\"kYWb8BwpKwunQkxeX\",\"rCQRv3doa9zLtwxzr\",\"b37Mu6yENyEfBQuCq\",\"DEDniTrstQYGounXT\",\"iCDqhZGvszrXpDRuW\",\"hab8YixsXxe4CcZpP\",\"KdNDysEsy2TW5QRJ2\",\"9pzFiFK3ANLjQfnr2\",\"5cmvoGYHLNmT8n6jP\",\"gSFJPsMXnqAog3Q9f\",\"nfXGHENb5md7m355s\",\"FzxTj4GuujhwpZM7y\",\"ENsSYogEHHeDSrFod\",\"ahk2qiXKJA753wAJk\",\"RgQD4AXk7k94NXgsa\",\"MKT7khMBGXzA22ykf\",\"s9GzySPz9vpMNQ2vj\",\"a777e8chPvJkY3tKa\",\"XrqNzJ2FRG8HnGiR6\",\"qZQxPQ2kaNKAMesHT\",\"yr822PZmmiDDenxpB\",\"2ptN2mhjFwFcHyPZd\",\"4yNLEwL2rsx4EE5Nt\",\"DrkR35NqnP9NDLbq6\",\"4rwxLqLs2mNZNg8NB\",\"H4abACFDH5t8CnnyH\",\"7txFzDQ43vJ7qCY88\",\"ZrKCkX7xxGGZzauFW\",\"NG8PWBSjsM8mMhQEq\",\"syRNbbPdLCGXbH2Gy\",\"iojEnnY9FsMfYzp6f\",\"eMuCpJ2spXWkJjWNz\",\"FEYpu9RWysAgW3XnP\",\"JZbBYihgT6m7bKvgc\",\"Pe8vWpDHRuH9nSGKW\",\"JS3hNM3XXkxPdg3yk\",\"Ecg4m7srYGgZsb4Ck\",\"yjtdwc2AC4jA2RWtn\",\"xwEZk3bNZoNDPJYF5\",\"hRiMXDZNAzyPd5tpt\",\"iS5BrkGLzJyPK7nKt\",\"NNE5HNRXAkmhrWgyQ\",\"HqmxnQJM66Y57twhn\",\"Wv2vJnEj8ywNmARoF\",\"R4SjTgDnpigJYDLyL\",\"ta5CrWnBCRusD2WMo\",\"oBcs8GLX2ZFLXQy8y\",\"hiun4uwTJtgnwqBKo\",\"n2BRY9X8899dcG8Bw\",\"M8dQuMrEpP8Hc3tHN\",\"YA7SDhpgEtsqynvNL\",\"i5iePG5GqhJJ8HEoB\",\"zd9FLSzsGz3evKafy\",\"YcCLwitFMAEJSnxAW\",\"KZ2xddpM2f9JRaryB\",\"xn7uGNKeAwPEkP9oA\",\"RehJGBFS6CYiWdjZx\",\"7K2GEb5TZRtSpyyGS\",\"zT9LpkiwYjLviYYW6\",\"3cF6NXq3ZEwdkgSjb\",\"k2Eo3wyfZZ6KxvKhN\",\"tpxMgkGSHwBjS95Ta\",\"p8qqFdJ3FSk5x9z3G\",\"mG8HqKiAQFTdRZthG\",\"KLmLKaJPfsYxp42p2\",\"gXTAie79kiw28tx5u\",\"qD2LrwaDrSdiybLKY\",\"osqWm6gk2Xad7AxJf\",\"KTFxMsjaW4xgo5ajY\",\"9FCeFzjPA4jrQ7oHW\",\"foytX6kH9wiSYqLtT\",\"rfyEkETeoS96QNH4e\",\"9CoqdidjM9KbeKnHY\",\"QRv96jmNaYsWkxQEG\",\"KJCDwGkoXh8qtbbKr\",\"Kh3Pc2ZRusurLaMyP\",\"CyzskHGsC6WSmYrLu\",\"DPi9QGLctq2y76KuE\",\"J3upzLHuEwXH7Z2hx\",\"HjZQR6wRLcxN5hKaf\",\"dYPkStFnLvAMsHSzZ\",\"cAP3n5NY64uoMwzRR\",\"dj5AyG5fWP8FdsSmZ\",\"dBzwBtRjZqB98DJeB\",\"DYDJTyGgKFnBRLm2r\",\"5XiuAqicKD4hBdu63\",\"RGMbFMZXJr7DhcAJy\",\"FaHX6krfMCkHf3XJi\",\"wRttWTM59y8m5mx7x\",\"5HCu9Ydd86QgHDRNP\",\"d8qtzoLB264iP8tdY\",\"kNrnnMxhFZztMTBAX\",\"zmPjCroQfN2vzgwpp\",\"PFWkxARJEgCfWBByp\",\"D2B5zXAoub33DEC86\",\"9MER8SZ9Xo6xNYMj8\",\"J5T8gZqiZXFuFDTQ7\",\"HuNF3xTBzmatyGSTm\",\"kAkLAF9T5McSxXJCT\",\"6BTXDH2xdbYLsvjsz\",\"3nied3n8KG8RSNixH\",\"K3RacTvkWHLfzKF8i\",\"ggCr7Kp87qrJyi8QK\",\"eYfPWvZwnJQkHbSTK\",\"buX4mCQhtXCfBjeno\",\"YRAzEBJoLvSaiPtYx\",\"5S9nX4rKsnCcnv4Cz\",\"5hQnRWiKkhgKJXNMP\",\"GGdmhAvxXhqhhibJN\",\"zSXaoNJKnxytvtFMb\",\"Ds7L5bksw2QRHjrKL\",\"e7QB5tCAeoSeRCTxY\",\"sHjfbGQGLHE6JR6qu\",\"CHvzhtXnv8HTbPQ56\",\"qAby4AWXmTNeusvg3\",\"srJ34BaybkQh3qRkM\",\"XujK3rHd3JcM9TLJy\",\"cJJKeX6xYZu9ekgkB\",\"sbJcFfQjQ59Wfg4Cd\",\"Hnh4q6GgX3LtHsHLp\",\"rR2JgJrMLMeZzHmfY\",\"NuqGt5u3s7vJ7HBGR\",\"LWCzZ8mb8gwrRNGfq\",\"6BpQP3ubeg48Q65ya\",\"JhX7jvtpwNyxcc39m\",\"T6iBEE2jp7f7iEF2P\",\"bvmTE46bfcM4ogj34\",\"XP4pRYeYiX9K4ejpW\",\"zWXnCLNyRYvc4oHqQ\",\"66a9xX73nmTEuKs9k\",\"PC3pLs36zNzpRDSuE\",\"EfxwqhYdapX3dMQC2\",\"yod5YhKtPqw2GfG9B\",\"M2gFMJkocQSY6bsFR\",\"mvJBakQ35CWAnbbEZ\",\"BrTDhPJcACL2bsrpJ\",\"8BFSTCnoe2QggN64c\",\"rrSC943cCKNG48sH4\",\"XD5nmvKQchKezPXhy\",\"ey3CASd6Je5LEJzfB\",\"AFfw7cGg83uYk2Miy\",\"rvRisgPcEQtJv5Bgg\",\"2PufnQcsHsfymufX3\",\"reSPwrcdzBAnDWs2E\",\"4TmgHkn5vqyHK3sYC\",\"X4rzfxGgxx6CS7Bpz\",\"4Lwjr34ypKNQNQCar\",\"23oi2a3vQwhtLEbSj\",\"T6Rm8mREPMZSftzrC\",\"d9LBRxvADNBB5QJMB\",\"hR7GMiqGap4CzEWSy\",\"HKRBY4r7jAtqqyahd\",\"dzS6WBTMHyFEag6Fp\",\"xKGFjP5mzqmdrJHNg\",\"RoGGD5cpHb4ftdLDv\",\"mw9464S5dnenqzvpm\",\"pduNK68oazqQTtbLp\",\"yAouD3PxzED8a4gap\",\"wjc4iejpErBhxWwHo\",\"8E4LDpxa9bnzk4i4p\",\"NzbRqGWspQnWMoDrF\",\"nc7bRhkxgKyqusYe3\",\"PWgzeK859suojbrRx\",\"wrL4iX2CCSqDCCty3\",\"ghAuKefZnCyQkvbh3\",\"fnBcd5wE85YLgcrS9\",\"5QN8R22z43SrwoHDz\",\"Wi4H6ayKsNDWWQCG5\",\"uGuS9YRXW2nj4p6zf\"],\"quality\":[5,5,5,5,4,3,5,3,5,5,5,5,3,5,5,4,5,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,5,4,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":4.725,\"family\":[{\"_id\":\"nuXdWHAoHv9y38sn7\",\"language\":\"javascript\"},{\"_id\":\"yGBevdRmXvSyTaBSA\",\"language\":\"python3\"}]}}"]