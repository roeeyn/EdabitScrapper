a["{\"msg\":\"result\",\"id\":\"1321\",\"result\":{\"_id\":\"7jHaJKK7Yw3SPTJRF\",\"author\":\"Masked\",\"authorId\":\"S6Zd8mPuvhuh3MFRt\",\"code\":\"def missing(lst1, lst2):\\n\\t\",\"difficulty\":1.9922480620155039,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"RWdxHj7qyqFcHzS6A\",\"instructions\":\"You are given two lists. The elements in `lst1` threw a party and started to mix around. However, one of the elements got lost! Your task is to return the element which was lost.\\n\\n### Examples\\n```\\nmissing([1, 2, 3, 4, 5, 6, 7, 8], [1, 3, 4, 5, 6, 7, 8]) ➞ 2\\n\\nmissing([True, True, False, False, True], [False, True, False, True]) ➞ True\\n\\nmissing([\\\"Jane\\\", \\\"is\\\", \\\"pretty\\\", \\\"ugly\\\"], [\\\"Jane\\\", \\\"is\\\", \\\"pretty\\\"]) ➞ \\\"ugly\\\"\\n\\nmissing([\\\"different\\\", \\\"types\\\", \\\"5\\\", 5, [5], (5,)], [\\\"5\\\", \\\"different\\\", [5], \\\"types\\\", 5]) ➞ (5,)\\n```\\n\\n### Notes\\n- Assume that the first list always contains 1 or more elements.\\n- Elements are always lost.\\n- An element can also have duplicates.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(missing([1, 2, 3, 4, 5, 6, 7, 8], [1, 3, 4, 5, 6, 7, 8]), 2)\\nTest.assert_equals(missing(['Jane', 'is', 'pretty', 'ugly'], ['Jane', 'is', 'pretty']), 'ugly')\\nTest.assert_equals(missing([True, True, False, False, True], [False, True, False, True]), True)\\nTest.assert_equals(missing(['different', 'types', '5', 5, [5], (5,)], ['5', 'different', [5], 'types', 5]), (5,))\\nTest.assert_equals(missing(list('fate'),list('fat')), 'e')\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[4,4,4,4,4,1,1,1,3,4,1,1,4,2,4,1,3,2,0,4,3,1,1,3,2,2,3,4,2,2,2,4,2,2,3,0,3,2,2,4,1,0,2,3,0,1,3,0,0,2,0,3,3,2,0,0,3,1,1,3,2,1,3,3,2,2,3,2,3,1,0,5,3,0,1,2,2,0,0,2,0,2,1,0,3,1,2,3,3,3,0,2,2,2,2,3,2,3,0,0,0,3,2,0,2,2,3,3,2,2,3,1,1,3,3,1,3,0,1,3,3,2,2,2,3,2,3,3,1],\"rators\":[\"tAF9Gf6PiGogbZuWs\",\"aEm3Wvj2rFYRL8Lrb\",\"nPfdEqn8RZmDzAeMW\",\"DwetpbChQM4r6Gwah\",\"8PwfYqoDQFThzNtvf\",\"8T7JaAagL8rhYfd8p\",\"55RQznnuTGpsj3EXd\",\"TubfazxuZaDNdYQDo\",\"ywk3XGvcmpTgRxwZa\",\"fznzd3qnvtbFkkizz\",\"yZvzB3qFb8pkHy4dg\",\"t8GRbY5ME64BcgWQk\",\"AasGs8AeX9Lcb9xJn\",\"3Zceb8GudqAG3onG3\",\"yKttxy9JGn5Jzwuj6\",\"gJYuGdkXEWWmGRLzu\",\"gb9rvGus2Jv7bjZSs\",\"8JyqsSbN2FJXPr3cw\",\"CMuhZyDkaZXX4pvTD\",\"8LfTheFzvicameoz9\",\"s5M5RvgqR9BhB9JoC\",\"YRstQuthRkFeBiXug\",\"Ti5BF4jnruwNNzHY8\",\"mDWNyaaQ9hvPCRzSd\",\"TvRx4RZB7tFoiZSBA\",\"aP7JkkYer28YWrPvC\",\"azQuTr5LY59adhfkx\",\"LWT2TDou5RKQuKpqv\",\"xHAobgK2AdYSfNWSW\",\"N9m2Y6JJHu5gTvAiv\",\"N962oRnYTtRzEd22M\",\"TCoQs9Erxoue9BvSj\",\"odhwHrfwJvNxcrBCt\",\"b3sMz8dfrr8j9sMH9\",\"Phd2FdPjo9BhBfvKh\",\"5aYo5yds4RftvGKso\",\"4xAD2rEf9K5Tp32ou\",\"ZNnsMeNkdDhHjSrZb\",\"YK2mckdiPDYofop9H\",\"4rwxLqLs2mNZNg8NB\",\"4SpHEvvoC6kSCfQ3E\",\"wwMcJQRvf3X59Jyev\",\"Ecg4m7srYGgZsb4Ck\",\"hRiMXDZNAzyPd5tpt\",\"ra7a6S3WLnLbXYq7Q\",\"HF28xZKSLM9wEuqNg\",\"W5TajitmCyxz87zAC\",\"iojEnnY9FsMfYzp6f\",\"4ZicxybyvEsuA9iET\",\"dzS6WBTMHyFEag6Fp\",\"HqmxnQJM66Y57twhn\",\"DEDniTrstQYGounXT\",\"yjtdwc2AC4jA2RWtn\",\"zZDaXBxMzTCBhNkgL\",\"n2BRY9X8899dcG8Bw\",\"cR3ibTMxLyEdDFCHY\",\"i5iePG5GqhJJ8HEoB\",\"ZrKCkX7xxGGZzauFW\",\"nJ7rrnewDrB4FythE\",\"qPSEBYMMi9WJRr8SA\",\"Yp7uvStL97cC9fKkY\",\"hnyhBFWwNCz9mDfSi\",\"qD2LrwaDrSdiybLKY\",\"orFLgPDw9H5MDzmwo\",\"b5oEvBqHWLRnJgp22\",\"p8qqFdJ3FSk5x9z3G\",\"QRv96jmNaYsWkxQEG\",\"DPi9QGLctq2y76KuE\",\"xn7uGNKeAwPEkP9oA\",\"J3upzLHuEwXH7Z2hx\",\"dkcmCKwqApX5jBggc\",\"gXTAie79kiw28tx5u\",\"AXcnPX68zdMiLNSmu\",\"d8qtzoLB264iP8tdY\",\"oBcs8GLX2ZFLXQy8y\",\"buX4mCQhtXCfBjeno\",\"Jqk2uJZZxEv5wZFze\",\"cAP3n5NY64uoMwzRR\",\"srJ34BaybkQh3qRkM\",\"6BpQP3ubeg48Q65ya\",\"GGdmhAvxXhqhhibJN\",\"LQxof8pGabGuWP7Gn\",\"2u9wghjCydey6aWys\",\"rfyEkETeoS96QNH4e\",\"J5T8gZqiZXFuFDTQ7\",\"PC3pLs36zNzpRDSuE\",\"PH32cNxBjrK4a28sn\",\"PWgzeK859suojbrRx\",\"qaR8DnWrTk8Mus5Q2\",\"2PufnQcsHsfymufX3\",\"gKnWjDjwrJh7MK2df\",\"QvEXmSEo3ANp3yPyH\",\"4Lwjr34ypKNQNQCar\",\"T6iBEE2jp7f7iEF2P\",\"o4ixjQGSaYqA2JoM4\",\"8BFSTCnoe2QggN64c\",\"jCjCvyhqhpebkJn34\",\"RoGGD5cpHb4ftdLDv\",\"8sNv5PTHa7XQ8bNqR\",\"PXAcsKkssS2yLyDv2\",\"kjvgTyRFyKHv44DcH\",\"AQSqD9oNv2uPfxZCR\",\"YcCLwitFMAEJSnxAW\",\"T2vhHPhRR96hRizq8\",\"qmtoFxLkGDQMwcBr6\",\"9gJsF5apWJGWZJprn\",\"yod5YhKtPqw2GfG9B\",\"nkH3HfJXLMNcBMM79\",\"jWbd7SYDzLPjc9EDh\",\"eMuCpJ2spXWkJjWNz\",\"3KkyQm77zsew58Dc2\",\"CHvzhtXnv8HTbPQ56\",\"5HCu9Ydd86QgHDRNP\",\"5QN8R22z43SrwoHDz\",\"sbJcFfQjQ59Wfg4Cd\",\"mvJBakQ35CWAnbbEZ\",\"yTtSCvGPyYna6JuRC\",\"oFEG3RDs5J99JYtkZ\",\"u5u2YpHXiNgzDNJdX\",\"q5S2XFaKHuTwPYgHL\",\"dSd7wHgXGQeG5BQ2P\",\"kQH5b8MXJunh84Czq\",\"ctbThYbufFCYbRK4f\",\"TSph6PLk4tbBAWWHe\",\"ey3CASd6Je5LEJzfB\",\"BrTDhPJcACL2bsrpJ\",\"Qyfyyw6oC4EHAndzo\",\"Ds7L5bksw2QRHjrKL\",\"8nE8QHnFYsHCFebte\",\"JhX7jvtpwNyxcc39m\",\"5kazQPq8ZdDsx6kjf\",\"qB6KSTYC6H2TQEQY6\",\"mTF6oWX2WhFR4M3QK\",\"jkbavR2ATFJcpmo8M\",\"euPBBaYXyS8RBr9KB\",\"MKT7khMBGXzA22ykf\",\"fbr22rabEJMfBp7vD\",\"i4MfM38aiCeFAiWtz\",\"9QC529CCbxSAXDfwe\",\"eXW8reZCCZHQzJjQi\",\"9pzFiFK3ANLjQfnr2\",\"3nied3n8KG8RSNixH\"],\"total\":156,\"quality\":[5,5,5,3,5,5,5,5,4,5,4,5,5,5,5,5,1,5]},\"flags\":0},\"summary\":\"You are given two lists. The elements in lst1 threw a party and started to mix around. However, one of the element got lost! Your task is to return the element which was lost.\\n\\nExamples\\nmissing([1, 2, 3, 4, 5, 6, 7, 8], [1, 3, 4, 5, 6, 7, 8]) ➞ 2\\n\\nmissing([True, True, False, False, True], [False, True, False, True]) ➞ True\\n\\nmissing([\\\"Jane\\\", \\\"is\\\", \\\"pretty\\\", \\\"ug\",\"tags\":[\"arrays\"],\"timestamp\":{\"$date\":1587828352340},\"title\":\"Who Left the List?\",\"quality\":4.555555555555555,\"family\":[{\"_id\":\"yQGTggivy7eadXwBN\",\"language\":\"javascript\"},{\"_id\":\"7jHaJKK7Yw3SPTJRF\",\"language\":\"python3\"},{\"_id\":\"JFrY3JWC3pH3NGXZb\",\"language\":\"ruby\"}]}}"]