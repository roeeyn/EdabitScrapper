a["{\"msg\":\"result\",\"id\":\"1349\",\"result\":{\"_id\":\"KQe5w8AdSLbweW8ck\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"def char_at_pos(r, s):\\n\\t\",\"difficulty\":2.01027397260274,\"familyId\":\"yjBXH2yyyK7xhSKxh\",\"instructions\":\"Create a function that returns the characters from a list or string `r` on odd or even positions, depending on the specifier `s`. The specifier will be **\\\"odd\\\"** for items on *odd positions* (1, 3, 5, ...) and **\\\"even\\\"** for items on *even positions* (2, 4, 6, ...).\\n\\n### Examples\\n```\\nchar_at_pos([2, 4, 6, 8, 10], \\\"even\\\") ➞ [4, 8]\\n# 4 & 8 occupy the 2nd & 4th positions\\n\\nchar_at_pos(\\\"EDABIT\\\", \\\"odd\\\") ➞ \\\"EAI\\\"\\n# \\\"E\\\", \\\"A\\\" and \\\"I\\\" occupy the 1st, 3rd and 5th positions\\n\\nchar_at_pos([\\\"A\\\", \\\"R\\\", \\\"B\\\", \\\"I\\\", \\\"T\\\", \\\"R\\\", \\\"A\\\", \\\"R\\\", \\\"I\\\", \\\"L\\\", \\\"Y\\\"], \\\"odd\\\") ➞ [\\\"A\\\", \\\"B\\\", \\\"T\\\", \\\"A\\\", \\\"I\\\", \\\"Y\\\"]\\n```\\n\\n### Notes\\n- Lists are zero-indexed, so, index+1 = position or position-1 = index.\\n- There will not be an empty string or an empty list.\\n- (**Optional**) Try solving this challenge in a single-line lambda function.\\n- A more advanced version of this challenge can be [found here](https://edabit.com/challenge/72KukSssxk2eHrWqx).\",\"isHidden\":false,\"lab\":\"Test.assert_equals(char_at_pos([2, 4, 6, 8, 10], \\\"even\\\"), [4, 8])\\nTest.assert_equals(char_at_pos([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], \\\"odd\\\"), [1, 3, 5, 7, 9])\\nTest.assert_equals(char_at_pos(\\\"EDABIT\\\", \\\"even\\\"), \\\"DBT\\\")\\nTest.assert_equals(char_at_pos(\\\"EDABIT\\\", \\\"odd\\\"), \\\"EAI\\\")\\nTest.assert_equals(char_at_pos(\\\"QWERTYUIOP\\\", \\\"even\\\"), \\\"WRYIP\\\")\\nTest.assert_equals(char_at_pos(\\\"POIUYTREWQ\\\", \\\"odd\\\"), \\\"PIYRW\\\")\\nTest.assert_equals(char_at_pos(\\\"ASDFGHJKLZ\\\", \\\"odd\\\"), \\\"ADGJL\\\")\\nTest.assert_equals(char_at_pos(\\\"ASDFGHJKLZ\\\", \\\"even\\\"), \\\"SFHKZ\\\")\\nTest.assert_equals(char_at_pos([\\\"!\\\", \\\"@\\\", \\\"#\\\", \\\"$\\\", \\\"%\\\", \\\"^\\\", \\\"&\\\", \\\"*\\\", \\\"(\\\", \\\")\\\"], \\\"odd\\\"), [\\\"!\\\", \\\"#\\\", \\\"%\\\", \\\"&\\\", \\\"(\\\"])\\nTest.assert_equals(char_at_pos([\\\")\\\", \\\"(\\\", \\\"*\\\", \\\"&\\\", \\\"^\\\", \\\"%\\\", \\\"$\\\", \\\"#\\\", \\\"@\\\", \\\"!\\\"], \\\"odd\\\"), [\\\")\\\", \\\"*\\\", \\\"^\\\", \\\"$\\\", \\\"@\\\"])\\nTest.assert_equals(char_at_pos([\\\"A\\\", \\\"R\\\", \\\"B\\\", \\\"I\\\", \\\"T\\\", \\\"R\\\", \\\"A\\\", \\\"R\\\", \\\"I\\\", \\\"L\\\", \\\"Y\\\"], \\\"odd\\\"), [\\\"A\\\", \\\"B\\\", \\\"T\\\", \\\"A\\\", \\\"I\\\", \\\"Y\\\"])\",\"language\":\"python3\",\"summary\":\"Create a function that returns the characters from a list or string r on odd or even positions, depending on the specifier s. The specifier will be \\\"odd\\\" for items on odd positions (1, 3, 5, ...) and \\\"even\\\" for items on even positions (2, 4, 6, ...).\\n\\nExamples\\ncharatpos([2, 4, 6, 8, 10], \\\"even\\\") ➞ [4, 8]\\n4 & 8 occupy the 2nd & 4th positions\\n\\ncharatpos(\\\"EDABIT\\\"\",\"tags\":[\"arrays\",\"functional_programming\",\"validation\"],\"timestamp\":{\"$date\":1594675009176},\"title\":\"Oddly or Evenly Positioned\",\"stats\":{\"completed\":{\"total\":434,\"ratings\":[2,2,2,2,2,3,2,2,2,1,3,1,2,1,3,3,1,2,1,3,1,3,0,3,2,0,3,3,1,2,2,2,2,1,0,3,1,2,2,1,2,3,2,3,2,3,3,2,1,3,3,2,2,3,2,3,2,3,0,3,2,3,1,3,1,3,0,2,2,3,1,3,1,2,1,2,0,3,3,2,0,3,2,1,3,2,0,0,3,2,3,1,1,1,2,2,3,2,2,3,3,3,3,0,1,2,2,2,2,0,3,3,2,4,0,2,3,1,1,1,2,3,3,3,2,2,3,0,0,3,3,2,2,0,3,1,1,1,3,2,3,1,2,2,1,3,1,1,3,0,3,5,3,0,1,3,2,2,1,3,2,2,2,2,2,2,0,2,3,2,2,2,3,3,2,2,3,3,3,2,2,1,1,1,2,2,2,2,2,3,2,0,1,3,2,3,2,2,2,2,1,1,2,2,2,3,1,2,2,3,3,1,2,3,2,2,1,3,2,1,3,2,3,2,0,3,2,3,2,2,3,0,2,3,2,3,2,3,2,3,1,2,0,2,1,2,3,1,3,3,0,0,3,2,3,2,2,2,3,2,1,3,3,4,3,1,4,1,3,3,2,1,3,2,3,2,3,2,2,1,4,3,2,2,2,3,2,3,0,2,3,0],\"rators\":[\"n2BRY9X8899dcG8Bw\",\"AasGs8AeX9Lcb9xJn\",\"W5TajitmCyxz87zAC\",\"gb9rvGus2Jv7bjZSs\",\"bJxaKHJqR82EWw8Su\",\"a777e8chPvJkY3tKa\",\"aEm3Wvj2rFYRL8Lrb\",\"HF28xZKSLM9wEuqNg\",\"s5M5RvgqR9BhB9JoC\",\"DEDniTrstQYGounXT\",\"8PwfYqoDQFThzNtvf\",\"cykCKNJcqFBxz4T8s\",\"hnyhBFWwNCz9mDfSi\",\"yr822PZmmiDDenxpB\",\"Yp7uvStL97cC9fKkY\",\"BrTDhPJcACL2bsrpJ\",\"DpqiRAm2yo3W2x4HX\",\"qPpQfR5KyDb5Y3EFf\",\"b9YQPLb9ZPSADdHXX\",\"4hWjYDZsdixzvKbqQ\",\"pWD2YC5s4YRCxFc2i\",\"fTaoS7NjbqDANvvxF\",\"NfMJuiBk6FN5Jc6ow\",\"ya2ofFqYRC57bfbND\",\"DxxNN37iEz7b8t2nf\",\"8JyqsSbN2FJXPr3cw\",\"gJYuGdkXEWWmGRLzu\",\"c3nsyfKKeQGxp6sKb\",\"sX9GZp3fYyQLrBKMJ\",\"kJMAAWPWEG6qFouEh\",\"E6tYiWYJ7Kyr9MyEW\",\"MXwSvGWf4ggrf8PQP\",\"6Dy6QCqpEK5a9JJbQ\",\"Do6Zvo5NDKQmv9a9g\",\"xdgy7nWSKCekXnaJM\",\"uoLc5C9zTnYCG976B\",\"Qk3NQWimuDTFyQLb7\",\"ubgD8xtZh7GxjEwLH\",\"6gS4E2C84vBYTYeDZ\",\"YCHnE8feJyuhcpDc2\",\"fwPQi2i6ibic7jtHc\",\"iSY8Jq5PQ8wBiWpiw\",\"8NP9zgWW8ZhmvzGzy\",\"tAF9Gf6PiGogbZuWs\",\"TwKZ3835iFLog2RuQ\",\"N43d68KgA2qv7Jm2Y\",\"LHW7fTAJMR5wHhm8c\",\"PtaiHYXnMwb2rWqQW\",\"C75Nyf5jotZJ9TfPW\",\"GGprTwrkjuccmrQRg\",\"iojEnnY9FsMfYzp6f\",\"ZNnsMeNkdDhHjSrZb\",\"DrkR35NqnP9NDLbq6\",\"dzS6WBTMHyFEag6Fp\",\"iS5BrkGLzJyPK7nKt\",\"mtRvHDpeLoSGBf8zC\",\"55RQznnuTGpsj3EXd\",\"cR3ibTMxLyEdDFCHY\",\"djeesDJQwNJay4RTe\",\"Nfsj4eNFDjaFa39ga\",\"hab8YixsXxe4CcZpP\",\"yjtdwc2AC4jA2RWtn\",\"szxRx3Mvq4txBhXvS\",\"jBR47vA7HwAZqp4QA\",\"ji5f27FPz4wRRF6Ls\",\"Ecg4m7srYGgZsb4Ck\",\"9pzFiFK3ANLjQfnr2\",\"HhYCji7QqauyN3A7v\",\"ZrKCkX7xxGGZzauFW\",\"syRNbbPdLCGXbH2Gy\",\"ZsHZ6a5qLfC8m8EyY\",\"HqmxnQJM66Y57twhn\",\"8nE8QHnFYsHCFebte\",\"kQH5b8MXJunh84Czq\",\"JS3hNM3XXkxPdg3yk\",\"axdSNLZpiCDF8RS6n\",\"yvrmHch8yyc8pW4YH\",\"qQQ4hCQpzitmHSkjS\",\"mqJtnfNCs6CedXnay\",\"49XFttjKo2QhEWT3R\",\"P7NmFbCJ5offXMRvB\",\"7sSSWHLA7vyo7FAwn\",\"Jg8ZSRXe3NoDMCqGu\",\"skG34HkAFoQiHk7gg\",\"6SKDJwXpev4qPSzgM\",\"xwEZk3bNZoNDPJYF5\",\"4fhjJBvLBWh6QeSih\",\"3rCGowf2GK7AZTdFu\",\"RehJGBFS6CYiWdjZx\",\"A7BZy6bCmem2aHZvG\",\"KZ2xddpM2f9JRaryB\",\"8zQnyekbSwzhoJymu\",\"oig8ig9SE9RZa8ttL\",\"ekQh3jzgGLsEMbKo3\",\"DNACg4rcgZsPtYGZ8\",\"euPBBaYXyS8RBr9KB\",\"wcQLERs5vMcAwJrEy\",\"Nb6LYPoQP6KJZt8mz\",\"u7i7WPM63n42r8R8o\",\"kyEERyssssTQaZ4y5\",\"oAcTLQZ5g5rEqvGKz\",\"ZNgDGdtv5WFkcEn6K\",\"zfGYZ7gpR8fxJpagh\",\"BC3XhXhX9mTrAScgy\",\"MCw7uAcoWcSTBTmr3\",\"2j3dYApeb9FZ5eP6d\",\"dkcmCKwqApX5jBggc\",\"REbXuiozZdcmS4iiJ\",\"FK2fEQ3F6DD3buSLJ\",\"r8f3uJ4DmJYgAv2QK\",\"wKMK2ao9RMP2BqsLf\",\"XhhL8kqHz32PZNaXY\",\"Wv2vJnEj8ywNmARoF\",\"X5MqeHyPh6cSQCXnk\",\"v7xDCZYGnLQa4eJ2g\",\"8fZxjQfuXw5HMSRJM\",\"cxABox46qWvJRyidE\",\"oNBNrPGYAhQiwbeDv\",\"qm5eyyAHACGv2qknQ\",\"nBo2LLuSMeEgd5f6G\",\"s3p7iygyPJvsCaWSR\",\"tytQfvk4jvE4dyFGk\",\"vSPc7MGK5Poy8tSFp\",\"itDTNAvHdhpXPhg6D\",\"X6G8jvpoas5oyWBD4\",\"xn7uGNKeAwPEkP9oA\",\"DPi9QGLctq2y76KuE\",\"6kz7jjJS8W4tikYQT\",\"BNogTonsWhcfseTjX\",\"pmgFEciNrd3ES9tuu\",\"jD3r3hMzLA9Ai45go\",\"2PufnQcsHsfymufX3\",\"6QHXQkQAcXMJ7C2kK\",\"BvcsMniv2vGdh37b2\",\"8BFSTCnoe2QggN64c\",\"mNYiFFnf5MdGsBDrt\",\"974cv448kw6Wu2JF6\",\"Y8ySZEtvht9EwdcoY\",\"TtNnzXoeFPrSt78mu\",\"TZizQsWMFF5b2KCf4\",\"ZRxAkXjTCdyQTdSDw\",\"PTDFuxAzou7W6asWt\",\"9Ei8JsYdzSnNbfWpL\",\"uX3EL4Qha99wBkozM\",\"ePjeXHLbEYQGfP8xn\",\"MfKe55snfKsdnDejs\",\"J5T8gZqiZXFuFDTQ7\",\"wJosiFATmZti3nEHG\",\"vpRpD5X2Yjnzp9nvZ\",\"ypagZTh36kMRyJTxF\",\"ZCjkdkya8CWD6iF26\",\"Lsy3NTBYynryPsfZz\",\"Kz7ee56Ht4Ns8JjBj\",\"Ssr948vrCsf2WrY9D\",\"Kt4TQ92a6bL869KFv\",\"DCLoZNDf8h6TB7gxn\",\"NuqGt5u3s7vJ7HBGR\",\"E7AdifRdMc49p5kWs\",\"DYDJTyGgKFnBRLm2r\",\"MtJ33oGd6Skry3dj4\",\"MKT7khMBGXzA22ykf\",\"5kazQPq8ZdDsx6kjf\",\"Kh3Pc2ZRusurLaMyP\",\"fyEvJ9FyMuhpLtxmG\",\"hkiz2Nv927cYGrA86\",\"AaKWw8amcFYLrEpNz\",\"Wv9XxYAmCLZdhrTMF\",\"akcSe6dhHY9trwX4b\",\"QCvvnevRLhBY8XBJk\",\"fAWP2PFd3PK5dctij\",\"4uDFMQFPxDcYhiuYK\",\"YcCLwitFMAEJSnxAW\",\"9h7zbxqywLKtYiEpW\",\"mG8HqKiAQFTdRZthG\",\"CEd9tLdXeDeNHSzys\",\"6428wKHtwKkFdvBs5\",\"pevMzsjtd98diLwZM\",\"MRrjdojkTWC8oTrM4\",\"QRRLM2KAunDa6grje\",\"tpxMgkGSHwBjS95Ta\",\"hsrNYf3WbexXJKhCq\",\"ppxNdL4gjANz8oJLQ\",\"aCNWav8S8Try9RkC6\",\"Sy5XanBuQvdqGD4wJ\",\"JzAHBj4agJTT3J6qm\",\"7K2GEb5TZRtSpyyGS\",\"T6xRoSqcSHjvP2Tik\",\"NNE5HNRXAkmhrWgyQ\",\"9FCeFzjPA4jrQ7oHW\",\"RHqqT8ADwXZQJAp6s\",\"gMjAMD8XPK9sbx7eT\",\"bC49w5JpRaqtjd3Rt\",\"oBcs8GLX2ZFLXQy8y\",\"o4LHiY8mAP9PKudWk\",\"CLypXaZksY99mpRCm\",\"3zYY9HEp6araYCKdQ\",\"YMBFrhTvTMrAvRYJR\",\"osqWm6gk2Xad7AxJf\",\"hXoTNPPmJLzkZnkSX\",\"hwE5wDZ4RToL5kjLn\",\"v9KtC8YLbMWmXiW2H\",\"txvThmcwfG3joXevc\",\"5PDPCos3A7oj7JYtP\",\"DfMcEs6XsfGtTpQ26\",\"aoGLENyW54qEPm3JN\",\"rxr3nwpDGDEkBJRgD\",\"GqothajHR2vKfEHGZ\",\"TFqRD3zervh8PT8op\",\"p9riYAbHXwJZ9PhWf\",\"c2u7qfdaYxcyuydtu\",\"E8TMSMSamEbBtf9Lo\",\"brBkqpqkRarKALzgv\",\"REpkEcYrskYHBmYzW\",\"ECykF5mBka6WGEc3Z\",\"9bn6tNgXCNys4n3bN\",\"dXMbkgQFoN37BhruB\",\"nc7bRhkxgKyqusYe3\",\"QRv96jmNaYsWkxQEG\",\"uN5t57RETi5y2z5W8\",\"kWobGYgZWJxN6ZddF\",\"bccs9koJxyQ9XNiLC\",\"zZ43WzxvFu7kaTKZ6\",\"9AzxAeaR5xWAoqYxB\",\"qaMeMbiZGNi7q3TFP\",\"Yrg4bneTc9JEemv8d\",\"6F3Y6ZBAGNDGGTt9B\",\"rNoGMF8qZMr3oX4EQ\",\"qYDRywWRZdswy4b6e\",\"jSaW4kdeAAGoLxcuP\",\"iScDhqn2kD23x4P5B\",\"CQhaiZqQcP87YteSG\",\"BfwbCTRtW4wG2bsnH\",\"QYGFGGjATDQQzzhFM\",\"m6TC9gshrwufWqAYn\",\"SSqGKf3pKQZtjhaSe\",\"fznzd3qnvtbFkkizz\",\"Dxf8tHcYmAJoxYRfN\",\"dhNzCoYizMntWrj5e\",\"yAmwY2G54GJP24Piw\",\"gXTAie79kiw28tx5u\",\"Fb2wehA7QgTFWry2x\",\"wTL9EoE6rj9iApyf7\",\"4RY3zj9C2t8GGefhi\",\"SijL7Kxx89h4p65Py\",\"gSFJPsMXnqAog3Q9f\",\"D62kvgDJ6asnsFaEw\",\"6MjSiiBLPcvXbXcaZ\",\"oHbErJxjYJhD66d5w\",\"KJCDwGkoXh8qtbbKr\",\"ph8dY6HgwydrhpKMq\",\"u3exaHuZqYBnDBZh2\",\"xmd7GGME2DbJNtXFu\",\"7QFZTrgr7mFkX8e4y\",\"dxBXbyMzwkWXN84yy\",\"5ubkq4o2RHFurvjJ9\",\"dmi9KsAmriMQzsDFJ\",\"J3upzLHuEwXH7Z2hx\",\"3LiSLdtN58n46NEqg\",\"k5GPqwirkn4mGGXxd\",\"2QziknsznNeMPRh3g\",\"dYPkStFnLvAMsHSzZ\",\"GcR9CA587pfQuWHyB\",\"7scpcTEp3SEx5Wjg9\",\"5SrjPjgc5ubwY4y8x\",\"dcuCtzKDASzoAJKsd\",\"fbr22rabEJMfBp7vD\",\"X3Temjka6hN4q77b9\",\"LNwMrFy9vXYK2cSCW\",\"xGpqoGZ47sYLJ4ty9\",\"K3RacTvkWHLfzKF8i\",\"mDWNyaaQ9hvPCRzSd\",\"rXDeodKQqFzKJH5nd\",\"xsTAbdxLod7Rka5aj\",\"89vQtWmrSRanMLgB2\",\"DpnYcMphntjsQ96qg\",\"LvLQNiWRhSzvMRQWm\",\"cjN86MMHPvsG3PvdW\",\"3sJqNsvbCGCnGxNCq\",\"6BTXDH2xdbYLsvjsz\",\"mmt7jwqbmSjzRSvqh\",\"x2sufZSE9ozE3393f\",\"3ECpdeExhBmkYXtba\",\"5Y3jeWnhLKBvuCdm7\",\"kEkNyqFARK9YBrhRx\",\"AvA5ezoh8m6mEEXhu\",\"fX86fhApCKAFxgBXM\",\"dtC6u5Jvqni5jCKpu\",\"nmMiWvyJKp6nZEpve\",\"3pxHTZBsv7MKzFG6Y\",\"YRAzEBJoLvSaiPtYx\",\"Dr7WfyD2viGy9djpG\",\"YL9pqyCu8xsds8J49\",\"cAP3n5NY64uoMwzRR\",\"eFh8z7sMmxkrFWZv9\",\"Jqk2uJZZxEv5wZFze\",\"DDevhboRPEbQwcxun\",\"Nzi4RD5fxAJ4wjnNa\",\"MmhJQjY54sCovjFFd\",\"5wCHxMQ5Km2bjqcGZ\",\"no46qNkTbNeHepe64\",\"5hQnRWiKkhgKJXNMP\",\"7fXhjewunpnGvQF9G\",\"aaJWssCWfMa63XJng\",\"PXAcsKkssS2yLyDv2\",\"DyjCBBvcoMytDxAr5\",\"abCKW9EmBinFsr7KG\",\"nCiLcGRxLtXBM2xQB\",\"zd9FLSzsGz3evKafy\",\"isBqgde2r6fi5bC8P\",\"2H7qphwdz7PPoFKgc\",\"iaS9igNEGvpuP8rHs\",\"FEYpu9RWysAgW3XnP\",\"KKPxXDYAqem4tcuHH\",\"Dmkr8kRg692nqCnpm\",\"K6MfKMytoJJuSGewP\",\"EfxwqhYdapX3dMQC2\",\"eYfPWvZwnJQkHbSTK\",\"MXGuntvz3byrP6WJc\",\"q2tzvkrLASvSjkek9\",\"2fxapKr8XGdNeaKi2\",\"4RsakkyRXyYGwFxEa\",\"DQskEvAv5KiJDPtGF\",\"udcPRYfw56v2kJ5C8\",\"JPK4qefX9FqJtHsb8\",\"sbJcFfQjQ59Wfg4Cd\",\"qZQxPQ2kaNKAMesHT\",\"GGdmhAvxXhqhhibJN\",\"ZSLv4RLN9RJXbgpWE\",\"T2vhHPhRR96hRizq8\",\"ZYT9LjgocbP4hzQK5\",\"qAby4AWXmTNeusvg3\",\"Tyb8qLiwb2QXmRGv3\",\"T6iBEE2jp7f7iEF2P\",\"2QGRoQn2dRq3scu7k\",\"9ivvGvJGvtQfigQaZ\",\"ijNKM8DuspXuAnC4y\",\"yyo6YLQN2of6fxp49\",\"6daecm7mtqzp7mKso\",\"buX4mCQhtXCfBjeno\",\"srJ34BaybkQh3qRkM\",\"ey3CASd6Je5LEJzfB\",\"mfsaETo7uA4x5vqLD\",\"Wpn95NqWxncQrwNgz\",\"CTKmXtrqDYqJBnuy8\",\"u5u2YpHXiNgzDNJdX\",\"zza5WjC8QrHcoDZBF\",\"4Lwjr34ypKNQNQCar\",\"6BpQP3ubeg48Q65ya\",\"AQSqD9oNv2uPfxZCR\",\"zMfBAYDE7ZaoefhJa\",\"gNvY6eewjqJzuHeJz\",\"vRXuYYBNuHEQ29fbm\",\"bvmTE46bfcM4ogj34\",\"Ds7L5bksw2QRHjrKL\",\"ghMkPtdFCpM6w8nax\",\"PC3pLs36zNzpRDSuE\",\"CZeLyDD2BQL3jrzzj\",\"beWSbpkhRgPDmQGNy\",\"RErqK2yM94wYyD2hk\",\"KACjjdKDL97rBTyEK\",\"o4ixjQGSaYqA2JoM4\",\"3KkyQm77zsew58Dc2\",\"NojQykDfP7WjHckg4\",\"8sNv5PTHa7XQ8bNqR\",\"ctbThYbufFCYbRK4f\",\"AFfw7cGg83uYk2Miy\",\"PWgzeK859suojbrRx\",\"9gJsF5apWJGWZJprn\",\"jWbd7SYDzLPjc9EDh\",\"MpfytGFYF77emJ3cT\",\"y8WESEqa8wiQSCkjP\",\"yhEXw7srnzqThKFKw\",\"RoGGD5cpHb4ftdLDv\",\"fEHCQXgi8iZMPzwnu\",\"yod5YhKtPqw2GfG9B\",\"5HCu9Ydd86QgHDRNP\",\"mvJBakQ35CWAnbbEZ\",\"JhX7jvtpwNyxcc39m\",\"xQEeGvwDcLZ8C5Bjz\",\"S9hHPiybdTKyuELsn\",\"Qyfyyw6oC4EHAndzo\",\"jkbavR2ATFJcpmo8M\",\"GiTogojAao5sTRHpk\",\"PZqJ7pMtLRqp27q4y\",\"CHvzhtXnv8HTbPQ56\",\"Fkb5sQNcrKt3Tx4kd\",\"PxjZL5AA8R5Dfg8v3\",\"Wi4H6ayKsNDWWQCG5\"],\"quality\":[5,4,1,5,5,4,4,4,5,5,5,5,5,5,5,4,5,5,5,5,5,2,5,5,5,5,5,5,5,5,3,4,5,5,5,5,5,5,4,5,4,5,5,5,5,5,5,4,3,5,4,5,5,4,5,3,5,5,5,5,5,5,5,3,3,5,5,5,5,5,5,4,5,4,5,5,5,5,5,5,5,5,5,5,5,4,5,5,5,5,3,5,5,5,5,5,4,5,5,2,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":4.633663366336633,\"family\":[{\"_id\":\"THuuakBitThtL6rmq\",\"language\":\"java\"},{\"_id\":\"fWkrdJb6EJrHsP7Sm\",\"language\":\"javascript\"},{\"_id\":\"vLaSKySKmozHb4vqr\",\"language\":\"php\"},{\"_id\":\"KQe5w8AdSLbweW8ck\",\"language\":\"python3\"},{\"_id\":\"yDJGyFFgYWFGPzcE9\",\"language\":\"ruby\"}]}}"]