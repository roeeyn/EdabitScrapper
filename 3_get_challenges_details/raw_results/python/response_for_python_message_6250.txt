a["{\"msg\":\"result\",\"id\":\"1835\",\"result\":{\"_id\":\"XKEDTh2NMtTLSyCc2\",\"author\":\"BijogFc24\",\"authorId\":\"Nb6LYPoQP6KJZt8mz\",\"code\":\"def valid_credit_card(number):\\n   \\n\\t\",\"difficulty\":2.5492957746478875,\"familyId\":\"nrr35Cuqk7veCX2qj\",\"instructions\":\"Create a function that takes a number and checks whethers the given number is a valid credit card number using **Luhn Algorithm**. The return value is boolean.\\n\\n### Examples\\n```\\nvalid_credit_card(4111111111111111) ➞ True\\n# Visa Card\\n\\nvalid_credit_card(6451623895684318) ➞ False\\n# Not a valid credit card number.\\n\\nvalid_credit_card(6451623895684318) ➞ False\\n```\\n\\n### Notes\\n- American Express/VISA/Discover/Diner Club may be the credit card type.\\n- Check the **Resources** for help.\",\"isHidden\":false,\"lab\":\"Test.assert_equals(valid_credit_card(2111111111121111), False)\\nTest.assert_equals(valid_credit_card(4111111111111111), True)\\nTest.assert_equals(valid_credit_card(5500000000000004), True)\\nTest.assert_equals(valid_credit_card(378282246310005), True)\\nTest.assert_equals(valid_credit_card(7777777777777777), False)\\nTest.assert_equals(valid_credit_card(6011000000000004), True)\\nTest.assert_equals(valid_credit_card(6451623895684318), False)\",\"language\":\"python3\",\"summary\":\"Create a function that takes a number and checks whethers the given number is a valid credit card number using Luhn Algorithm. The return value is boolean.\\n\\nExamples\\nvalidcreditcard(4111111111111111) ➞ True\\nVisa Card\\n\\nvalidcreditcard(6451623895684318) ➞ False\\nNot a valid credit card number.\\n\\nvalidcreditcard(6451623895684318) ➞ False\\n\\nNotes\\nAmerican Express/VIS\",\"tags\":[\"algorithms\",\"logic\",\"validation\"],\"timestamp\":{\"$date\":1593169271162},\"title\":\"Mod 10 Algorithm\",\"stats\":{\"completed\":{\"total\":80,\"ratings\":[2,2,2,2,2,3,1,3,3,3,3,5,2,1,3,4,3,3,4,2,1,3,2,0,4,2,2,4,2,2,2,4,5,2,4,3,3,3,1,3,3,2,3,3,4,4,4,3,4,2,4,5,1,2,1,4,3,3,3,0,0,2,0,3,2,0,3,1,4,0,3],\"rators\":[\"8PwfYqoDQFThzNtvf\",\"4rwxLqLs2mNZNg8NB\",\"efcsSdKgupNnf9DKD\",\"gJYuGdkXEWWmGRLzu\",\"c3nsyfKKeQGxp6sKb\",\"Nb6LYPoQP6KJZt8mz\",\"s5M5RvgqR9BhB9JoC\",\"6bkpymBvQJck5KZwK\",\"gBtn7gSMiSJtAGRoE\",\"pduNK68oazqQTtbLp\",\"Z4M3NAa4TXquMNkHe\",\"rhCr7ziXLsbWkETH8\",\"cnmj8mAbLcMnKaqLS\",\"Phd2FdPjo9BhBfvKh\",\"aEm3Wvj2rFYRL8Lrb\",\"8sNv5PTHa7XQ8bNqR\",\"Nfsj4eNFDjaFa39ga\",\"SGhPxX5bHGL8zZqtt\",\"pWD2YC5s4YRCxFc2i\",\"GGprTwrkjuccmrQRg\",\"xn7uGNKeAwPEkP9oA\",\"4ZicxybyvEsuA9iET\",\"aiPq9uFZGF8FDEZz8\",\"fKuLXM3E32A8mWTnY\",\"oLxFPCS2iZ4GFMNnL\",\"TFoppnTp7rLpRcHXh\",\"PtaiHYXnMwb2rWqQW\",\"uJvcvnJDboT6hARXq\",\"azQuTr5LY59adhfkx\",\"fTaoS7NjbqDANvvxF\",\"NojQykDfP7WjHckg4\",\"S6ipW8Xzds8QDszn9\",\"8zQnyekbSwzhoJymu\",\"mqJtnfNCs6CedXnay\",\"yTtSCvGPyYna6JuRC\",\"Y8ySZEtvht9EwdcoY\",\"cxABox46qWvJRyidE\",\"tAF9Gf6PiGogbZuWs\",\"n2BRY9X8899dcG8Bw\",\"JhAEbSj5sAMofcxBf\",\"DNACg4rcgZsPtYGZ8\",\"5dHucvf2qBYyKim7X\",\"QxNHN5DHfe97xarhE\",\"P7NmFbCJ5offXMRvB\",\"quEfQhA3xBwsCobcg\",\"yjtdwc2AC4jA2RWtn\",\"HF28xZKSLM9wEuqNg\",\"PytNZK9mNiRiZxPrm\",\"J5T8gZqiZXFuFDTQ7\",\"tkdRHAExhDq8ryDJT\",\"iS5BrkGLzJyPK7nKt\",\"Jqk2uJZZxEv5wZFze\",\"iojEnnY9FsMfYzp6f\",\"J3upzLHuEwXH7Z2hx\",\"gXTAie79kiw28tx5u\",\"GTKsdeEihE636Le9i\",\"HhYCji7QqauyN3A7v\",\"QRv96jmNaYsWkxQEG\",\"9ivvGvJGvtQfigQaZ\",\"PXAcsKkssS2yLyDv2\",\"AasGs8AeX9Lcb9xJn\",\"2PufnQcsHsfymufX3\",\"HqmxnQJM66Y57twhn\",\"H9KZi2cjt4FwH7qog\",\"fznzd3qnvtbFkkizz\",\"T6iBEE2jp7f7iEF2P\",\"oBcs8GLX2ZFLXQy8y\",\"Yp7uvStL97cC9fKkY\",\"gKnWjDjwrJh7MK2df\",\"DPi9QGLctq2y76KuE\",\"fbr22rabEJMfBp7vD\",\"buX4mCQhtXCfBjeno\",\"n2qKKxomPnb4zez5M\",\"iqmPb9JuJDgTFeR8Q\"],\"quality\":[5,3,5,5,5,3,4,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":4.375,\"family\":[{\"_id\":\"dcPJS9rwjfvtXyM2d\",\"language\":\"cpp\"},{\"_id\":\"2cexaD4QfdrPJpDZS\",\"language\":\"javascript\"},{\"_id\":\"XKEDTh2NMtTLSyCc2\",\"language\":\"python3\"},{\"_id\":\"k8KYaguzDt6rTNhbK\",\"language\":\"ruby\"}]}}"]