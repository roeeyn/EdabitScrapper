a["{\"msg\":\"result\",\"id\":\"990\",\"result\":{\"_id\":\"djDJHv3nwWsRM9mtu\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def validate_spelling(txt):\\n\\t\",\"difficulty\":1.5,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"N4rfqttPuBQ3ZAGFJ\",\"instructions\":\"Given a sentence spelling out a word, return `True` if the spelled letters match the *word at the end of the string*.\\n\\n### Examples\\n```\\nvalidate_spelling(\\\"C. Y. T. O. P. L. A. S. M. Cytoplasm?\\\") ➞ True\\n\\nvalidate_spelling(\\\"P. H. A. R. A. O. H. Pharaoh!\\\") ➞ True\\n\\nvalidate_spelling(\\\"H. A. N. K. E. R. C. H. E. I. F. Handkerchief.\\\") ➞ False\\n```\\n\\n### Notes\\n- The word at the end is **always spelled correctly**.\\n- Spelled words will always end in punctuation (but ignore all punctuation).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(validate_spelling(\\\"C. Y. T. O. P. L. A. S. M. Cytoplasm?\\\"), True)\\nTest.assert_equals(validate_spelling(\\\"P. H. A. R. A. O. H. Pharaoh!\\\"), True)\\nTest.assert_equals(validate_spelling(\\\"H. A. N. K. E. R. C. H. E. I. F. Handkerchief.\\\"), False)\\nTest.assert_equals(validate_spelling(\\\"M. E. C. O. M. M. E. N. N. Recommend.\\\"), False)\\nTest.assert_equals(validate_spelling(\\\"C. H. R. Y. S. A. N. T. H. E. M. U. M. Chrysanthemum!\\\"), True)\\nTest.assert_equals(validate_spelling(\\\"A. C. C. O. M. M. O. D. A. M. E. Accommodate!\\\"), False)\\nTest.assert_equals(validate_spelling(\\\"S. U. A. C. E. I. L. L. A. N. C. E. Surveillance.\\\"), False)\\nTest.assert_equals(validate_spelling(\\\"B. U. S. I. N. E. S. S. Business.\\\"), True)\\nTest.assert_equals(validate_spelling(\\\"C. O. N. V. E. N. I. E. N. T. Convenient.\\\"), True)\\nTest.assert_equals(validate_spelling(\\\"C. O. N. V. E. N. O. E. N. T. Convenient!\\\"), False)\\nTest.assert_equals(validate_spelling(\\\"C. H. A. U. F. F. E. U. R. Chauffeur.\\\"), True)\\nTest.assert_equals(validate_spelling(\\\"L. I. A. A. S. O. N. Liaison!\\\"), False)\\nTest.assert_equals(validate_spelling(\\\"O. C. C. U. R. R. E. N. C. E. Occurrence?\\\"), True)\\nTest.assert_equals(validate_spelling(\\\"E. C. C. C. R. R. E. N. C. E. Occurrence!\\\"), False)\\nTest.assert_equals(validate_spelling(\\\"E. A. B. A. R. R. A. S. S. Embarrass!\\\"), False)\\nTest.assert_equals(validate_spelling(\\\"C. O. N. V. E. N. I. E. N. T. Convenient?\\\"), True)\\nTest.assert_equals(validate_spelling(\\\"U. N. C. O. N. S. C. I. C. U. U. Unconscious!\\\"), False)\\nTest.assert_equals(validate_spelling(\\\"I. E. D. R. D. Weird!\\\"), False)\\nTest.assert_equals(validate_spelling(\\\"D. F. F. T. N. I. T. E. L. Y. Definitely?\\\"), False)\\nTest.assert_equals(validate_spelling(\\\"C. A. A. E. N. D. A. R. Calendar.\\\"), False)\\nTest.assert_equals(validate_spelling(\\\"A. C. C. O. M. M. O. D. C. T. E. Accommodate!\\\"), False)\\nTest.assert_equals(validate_spelling(\\\"A. C. C. O. M. M. O. D. A. O. O. Accommodate!\\\"), False)\\nTest.assert_equals(validate_spelling(\\\"S. U. R. V. E. I. L. L. A. N. C. E. Surveillance.\\\"), True)\\nTest.assert_equals(validate_spelling(\\\"S. E. P. A. R. A. T. E. Separate!\\\"), True)\\nTest.assert_equals(validate_spelling(\\\"Q. U. O. S. T. I. O. N. N. A. U. R. E. Questionnaire.\\\"), False)\\nTest.assert_equals(validate_spelling(\\\"S. E. S. A. R. A. T. E. Separate!\\\"), False)\\nTest.assert_equals(validate_spelling(\\\"E. M. B. B. R. R. A. S. R. Embarrass.\\\"), False)\\nTest.assert_equals(validate_spelling(\\\"E. M. B. A. R. R. A. S. S. Embarrass?\\\"), True)\\nTest.assert_equals(validate_spelling(\\\"A. M. C. O. M. O. O. D. A. T. E. Accommodate!\\\"), False)\\nTest.assert_equals(validate_spelling(\\\"B. U. S. I. S. E. S. U. Business.\\\"), False)\\nTest.assert_equals(validate_spelling(\\\"D. E. F. I. N. I. T. E. L. Y. Definitely?\\\"), True)\\nTest.assert_equals(validate_spelling(\\\"C. H. R. Y. S. A. N. T. H. E. M. U. M. Chrysanthemum!\\\"), True)\\nTest.assert_equals(validate_spelling(\\\"N. Y. C. E. S. S. A. R. A. Necessary.\\\"), False)\\nTest.assert_equals(validate_spelling(\\\"A. C. C. O. M. M. O. M. A. T. A. Accommodate?\\\"), False)\\nTest.assert_equals(validate_spelling(\\\"T. O. M. O. R. R. T. M. Tomorrow?\\\"), False)\\nTest.assert_equals(validate_spelling(\\\"N. N. C. O. N. S. S. I. O. U. S. Unconscious.\\\"), False)\\nTest.assert_equals(validate_spelling(\\\"C. H. R. Y. S. A. N. T. H. E. M. U. M. Chrysanthemum?\\\"), True)\\nTest.assert_equals(validate_spelling(\\\"L. I. A. I. S. O. L. Liaison.\\\"), False)\\nTest.assert_equals(validate_spelling(\\\"T. O. M. O. R. R. O. W. Tomorrow.\\\"), True)\\nTest.assert_equals(validate_spelling(\\\"N. E. C. E. S. S. A. R. Y. Necessary?\\\"), True)\\nTest.assert_equals(validate_spelling(\\\"B. U. S. I. N. E. S. S. Business.\\\"), True)\\nTest.assert_equals(validate_spelling(\\\"T. O. M. O. R. R. O. W. Tomorrow!\\\"), True)\\nTest.assert_equals(validate_spelling(\\\"S. U. R. V. E. I. L. L. A. N. C. E. Surveillance.\\\"), True)\\nTest.assert_equals(validate_spelling(\\\"T. O. M. M. R. R. O. W. Tomorrow.\\\"), False)\\nTest.assert_equals(validate_spelling(\\\"C. U. A. U. U. F. E. U. R. Chauffeur!\\\"), False)\\nTest.assert_equals(validate_spelling(\\\"F. H. A. U. C. F. E. U. R. Chauffeur!\\\"), False)\\nTest.assert_equals(validate_spelling(\\\"C. H. A. U. F. F. E. U. R. Chauffeur.\\\"), True)\\nTest.assert_equals(validate_spelling(\\\"S. U. F. F. I. C. I. E. N. S. Sufficient!\\\"), False)\\nTest.assert_equals(validate_spelling(\\\"I. Y. I. O. S. C. N. C. A. R. C. Y. Idiosyncarcy?\\\"), False)\\nTest.assert_equals(validate_spelling(\\\"Q. U. E. S. T. I. O. N. N. A. E. A. E. Questionnaire?\\\"), False)\\nTest.assert_equals(validate_spelling(\\\"A. C. C. M. M. M. E. D. A. T. E. Accommodate!\\\"), False)\\nTest.assert_equals(validate_spelling(\\\"E. M. B. A. R. R. A. S. S. Embarrass!\\\"), True)\\nTest.assert_equals(validate_spelling(\\\"P. A. R. L. I. A. E. P. N. T. Parliament!\\\"), False)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,2,2,3,1,2,2,2,2,2,1,1,2,1,2,1,1,2,1,2,2,2,1,2,1,2,2,1,2,3,1,2,2,0,2,1,1,2,1,1,2,2,1,2,0,2,2,2,2,1,0,1,2,0,2,2,0,1,1,2,2,0,2,0,2,2,2,2,2,1,1,3,2,2,0,0,2,0,2,1,2,2,1,2,2,2,0,0,2,2,1,3,2,2,1,1,2,1,2,2,3,1,2,2,0,2,2,0,1,0,0,5,2,2,0,2,2,2,2,0,0,2,2,2,1,0,1,0,2,1,2,2,1,0,2,2,0,1,1,2,1,2,2,2,2,2,2,2,1,2,1,2,1,2,0,1,1,2,1,2,2],\"rators\":[\"tAF9Gf6PiGogbZuWs\",\"PXAcsKkssS2yLyDv2\",\"C4QntmkYtB89GNtpd\",\"aCNWav8S8Try9RkC6\",\"gb9rvGus2Jv7bjZSs\",\"AasGs8AeX9Lcb9xJn\",\"8JyqsSbN2FJXPr3cw\",\"QnPD4Sv6W4LHc2Qng\",\"et4ezbyWYdtQd54X7\",\"s5M5RvgqR9BhB9JoC\",\"wZoxzQDbso9SMAPkY\",\"Q2q7wd5e5cfCrwPxq\",\"KrESx9wBdxJ4RTwPH\",\"kBmhcwkCqxiy4GwiZ\",\"WLFPvm65aHfgwQy7N\",\"vgTvCCxgvbCTDvaRT\",\"DMH5qWYAScj9hNaRv\",\"Yp7uvStL97cC9fKkY\",\"BeFnbPbMnAM2SjBdZ\",\"4CFzv558qbGcpQwc4\",\"2fxapKr8XGdNeaKi2\",\"eF9cG8n4F9WkDnavC\",\"v3fjGuc7Pq4yjFygS\",\"u5u2YpHXiNgzDNJdX\",\"yZvzB3qFb8pkHy4dg\",\"Jg8ZSRXe3NoDMCqGu\",\"w3A7cBWyAfukk6xEQ\",\"Z85ajWfZ4jDPkbvR4\",\"HQxp7NcdvF92G7bYS\",\"S6Zd8mPuvhuh3MFRt\",\"cR3ibTMxLyEdDFCHY\",\"vLrq4dEDMM2wd68Dc\",\"BEdxteC2PKrmTLbdM\",\"v9KtC8YLbMWmXiW2H\",\"dHZqT6h4JMwk5fPC8\",\"jNvegJWCk5HCtEMbK\",\"ZNnsMeNkdDhHjSrZb\",\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\",\"Jqk2uJZZxEv5wZFze\",\"gJYuGdkXEWWmGRLzu\",\"hnyhBFWwNCz9mDfSi\",\"GEvSGXDkk7pACfYri\",\"HF28xZKSLM9wEuqNg\",\"nvSPaH4her7wGQL7v\",\"DEDniTrstQYGounXT\",\"KdNDysEsy2TW5QRJ2\",\"rgvAJFwfCeYoYnFTK\",\"rrNComrAKsGM6iaLh\",\"gSFJPsMXnqAog3Q9f\",\"2QGRoQn2dRq3scu7k\",\"9pzFiFK3ANLjQfnr2\",\"8LfTheFzvicameoz9\",\"aRqQ42J5zqCmBNd8w\",\"C9LKGu2g5hSijvDzA\",\"a777e8chPvJkY3tKa\",\"ahk2qiXKJA753wAJk\",\"H9KZi2cjt4FwH7qog\",\"4rwxLqLs2mNZNg8NB\",\"yr822PZmmiDDenxpB\",\"LWCzZ8mb8gwrRNGfq\",\"eMuCpJ2spXWkJjWNz\",\"2ptN2mhjFwFcHyPZd\",\"9CoqdidjM9KbeKnHY\",\"MKT7khMBGXzA22ykf\",\"4yNLEwL2rsx4EE5Nt\",\"H4abACFDH5t8CnnyH\",\"ZrKCkX7xxGGZzauFW\",\"NG8PWBSjsM8mMhQEq\",\"syRNbbPdLCGXbH2Gy\",\"3cF6NXq3ZEwdkgSjb\",\"DrkR35NqnP9NDLbq6\",\"iojEnnY9FsMfYzp6f\",\"Pe8vWpDHRuH9nSGKW\",\"zT9LpkiwYjLviYYW6\",\"yjtdwc2AC4jA2RWtn\",\"FEYpu9RWysAgW3XnP\",\"HqmxnQJM66Y57twhn\",\"tQatuCqYXLqvQ2rDh\",\"NNE5HNRXAkmhrWgyQ\",\"ta5CrWnBCRusD2WMo\",\"XrqNzJ2FRG8HnGiR6\",\"mDWNyaaQ9hvPCRzSd\",\"oBcs8GLX2ZFLXQy8y\",\"i5iePG5GqhJJ8HEoB\",\"sX9GZp3fYyQLrBKMJ\",\"hRiMXDZNAzyPd5tpt\",\"M8dQuMrEpP8Hc3tHN\",\"n2BRY9X8899dcG8Bw\",\"mmt7jwqbmSjzRSvqh\",\"YA7SDhpgEtsqynvNL\",\"w2HhxvSLmDhaGCAjE\",\"YcCLwitFMAEJSnxAW\",\"NuqGt5u3s7vJ7HBGR\",\"mxX4rH5ELYkdZ2Mbw\",\"rTuoyp6yzy6oGtx7u\",\"zd9FLSzsGz3evKafy\",\"tpxMgkGSHwBjS95Ta\",\"mG8HqKiAQFTdRZthG\",\"k2Eo3wyfZZ6KxvKhN\",\"KLmLKaJPfsYxp42p2\",\"974cv448kw6Wu2JF6\",\"p8qqFdJ3FSk5x9z3G\",\"JS3hNM3XXkxPdg3yk\",\"QRv96jmNaYsWkxQEG\",\"Yxxftfc3sLWrLFkTd\",\"DPi9QGLctq2y76KuE\",\"iS5BrkGLzJyPK7nKt\",\"J3upzLHuEwXH7Z2hx\",\"spqXrjG3ZFa2j5uTR\",\"dYPkStFnLvAMsHSzZ\",\"cAP3n5NY64uoMwzRR\",\"8fZxjQfuXw5HMSRJM\",\"rfyEkETeoS96QNH4e\",\"KJCDwGkoXh8qtbbKr\",\"5XiuAqicKD4hBdu63\",\"RGMbFMZXJr7DhcAJy\",\"dBzwBtRjZqB98DJeB\",\"d8qtzoLB264iP8tdY\",\"5HCu9Ydd86QgHDRNP\",\"7txFzDQ43vJ7qCY88\",\"g9FyJ8yeT9ic97Qp2\",\"wRttWTM59y8m5mx7x\",\"QJjb5YhFjNf4M4pmY\",\"muQCKmimwtNAdS8rp\",\"kNrnnMxhFZztMTBAX\",\"axdSNLZpiCDF8RS6n\",\"J5T8gZqiZXFuFDTQ7\",\"cZccqzRQ9GgjQF6Az\",\"HuNF3xTBzmatyGSTm\",\"GGdmhAvxXhqhhibJN\",\"WQuC8zfQc6tJ43tTy\",\"YRAzEBJoLvSaiPtYx\",\"R29kgJ9M7R4qqwjcE\",\"3nied3n8KG8RSNixH\",\"R4SjTgDnpigJYDLyL\",\"5S9nX4rKsnCcnv4Cz\",\"5hQnRWiKkhgKJXNMP\",\"dQK2T76aHcRJkrbKB\",\"Lw2W7FB4LT8E9AxrX\",\"MXGuntvz3byrP6WJc\",\"Ds7L5bksw2QRHjrKL\",\"CeMogDiJP9u5w6XiL\",\"srJ34BaybkQh3qRkM\",\"T2vhHPhRR96hRizq8\",\"CTKmXtrqDYqJBnuy8\",\"CHvzhtXnv8HTbPQ56\",\"sHjfbGQGLHE6JR6qu\",\"sbJcFfQjQ59Wfg4Cd\",\"6Lfjkdspqw8m6A7Jk\",\"WuQwqemgYszbR2f6k\",\"qAby4AWXmTNeusvg3\",\"o4ixjQGSaYqA2JoM4\",\"T6iBEE2jp7f7iEF2P\",\"Wpn95NqWxncQrwNgz\",\"EfxwqhYdapX3dMQC2\",\"ey3CASd6Je5LEJzfB\",\"66a9xX73nmTEuKs9k\",\"PC3pLs36zNzpRDSuE\",\"yod5YhKtPqw2GfG9B\",\"8BFSTCnoe2QggN64c\",\"BrTDhPJcACL2bsrpJ\",\"mvJBakQ35CWAnbbEZ\",\"c2q7mY39z5JPEMCaM\",\"JKb5rhL6DKcCAypF9\",\"JhX7jvtpwNyxcc39m\",\"9Ly8afdtofp8DXzrt\",\"rrSC943cCKNG48sH4\",\"qzXAMXsHZGT8o5hTA\",\"RoGGD5cpHb4ftdLDv\",\"2PufnQcsHsfymufX3\",\"2iFe3EHEH2YdhSKrs\",\"eHcgvkTGsH7ZziqBo\",\"utTuvGdmu2sBHWBhQ\",\"X4rzfxGgxx6CS7Bpz\",\"hR7GMiqGap4CzEWSy\",\"AFfw7cGg83uYk2Miy\",\"pduNK68oazqQTtbLp\",\"WhBvpJ5WHnWZgEEuJ\",\"4Lwjr34ypKNQNQCar\",\"4TmgHkn5vqyHK3sYC\",\"T6Rm8mREPMZSftzrC\",\"d9LBRxvADNBB5QJMB\",\"buX4mCQhtXCfBjeno\",\"AJexRBN9cYQmqvYu6\",\"wjc4iejpErBhxWwHo\",\"yAouD3PxzED8a4gap\",\"NzbRqGWspQnWMoDrF\",\"Zyg9xAm6EuH4u3Lo5\",\"3LiSLdtN58n46NEqg\",\"ekbfbYdyZeXHvaG8c\",\"uGuS9YRXW2nj4p6zf\",\"5QN8R22z43SrwoHDz\",\"Wi4H6ayKsNDWWQCG5\",\"rCrbqMiaGPgHYTNxu\",\"naZ3i6sSDPwsieDH7\"],\"total\":215,\"quality\":[5,5,5,3,5,5,5,5,5,5,5,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,5]},\"flags\":0},\"summary\":\"Given a sentence spelling out a word, return True if the spelled letters match the word at the end of the string.\\n\\nExamples\\nvalidate_spelling(\\\"C. Y. T. O. P. L. A. S. M. Cytoplasm?\\\") ➞ True\\n\\nvalidate_spelling(\\\"P. H. A. R. A. O. H. Pharaoh!\\\") ➞ True\\n\\nvalidate_spelling(\\\"H. A. N. K. E. R. C. H. E. I. F. Handkerchief.\\\") ➞ False\\n\\nNotes\\nThe word at the end is always\",\"tags\":[\"strings\",\"validation\",\"regex\"],\"timestamp\":{\"$date\":1581952292538},\"title\":\"Spelling Bee\",\"quality\":4.742857142857143,\"family\":[{\"_id\":\"56zT3LYs7g6LDDfQN\",\"language\":\"cpp\"},{\"_id\":\"LFdGBECCHWfyyZ7fg\",\"language\":\"javascript\"},{\"_id\":\"djDJHv3nwWsRM9mtu\",\"language\":\"python3\"},{\"_id\":\"zL3za84XjgN7MsNRn\",\"language\":\"ruby\"}]}}"]