a["{\"msg\":\"result\",\"id\":\"1888\",\"result\":{\"_id\":\"TcKZnbdgx7q6LLoFR\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"def collect(s, n):\\n\\t# your recursive solution here\",\"difficulty\":2.566666666666667,\"familyId\":\"D44GgRRjLqMtg2E9B\",\"instructions\":\"Write a function that returns an array of strings populated from the slices of **n-length** characters of the given word (a slice after another while **n-length** applies onto the word).\\n\\n### Examples\\n```\\ncollect(\\\"intercontinentalisationalism\\\", 6)\\n➞ [\\\"ationa\\\", \\\"interc\\\", \\\"ntalis\\\", \\\"ontine\\\"]\\n\\ncollect(\\\"strengths\\\", 3)\\n➞ [\\\"eng\\\", \\\"str\\\", \\\"ths\\\"]\\n\\ncollect(\\\"pneumonoultramicroscopicsilicovolcanoconiosis\\\", 15)\\n➞ [\\\"croscopicsilico\\\", \\\"pneumonoultrami\\\", \\\"volcanoconiosis\\\"]\\n```\\n\\n### Notes\\n- Ensure that the resulting array is lexicographically ordered.\\n- Return an **empty** array if the *given string* is less than `n`.\\n- You are expected to solve this challenge via a **recursive** approach.\\n- You can check on the **Resources** tab for more details about recursion.\\n- An **iterative** version of this challenge can be found via this [link](https://edabit.com/challenge/3W2TRbuD2cnBoXuby).\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"from inspect import getsource\\nfrom re import findall, MULTILINE\\n\\ndef check_recursive(fn):\\n  try:\\n    src, n = getsource(fn), fn.__name__\\n    if n == '<lambda>': n = src.split('=')[0].strip()\\n    return len(findall(n, src, flags=MULTILINE)) > 1\\n  except OSError: return True\\n\\nTest.assert_not_equals(check_recursive(collect), False, 'Recursion is required!')\\n\\nstr_vector = [\\n  \\\"intercontinentalisationalism\\\", \\\"strengths\\\", \\\"pneumonoultramicroscopicsilicovolcanoconiosis\\\",\\n  \\\"lexicographically\\\", \\\"anesthesiologists\\\", \\\"subdermatoglyphic\\\", \\\"sesquipedalianism\\\",\\n  \\\"recollection\\\", \\\"pseudopseudohypoparathyroidism\\\", \\\"floccinaucinihilipilification\\\",\\n  \\\"antidisestablishmentarianism\\\", \\\"supercalifragilisticexpialidocious\\\", \\\"incomprehensibilities\\\",\\n  \\\"astrophysicists\\\", \\\"honorificabilitudinitatibus\\\", \\\"unimaginatively\\\", \\\"euouae\\\", \\\"tsktsk\\\",\\n  \\\"uncopyrightable\\\" \\n]\\nnum_vector =\\t[ 6, 3, 15, 4, 6, 6, 6, 3, 7, 2, 5, 3, 9, 4, 12, 8, 7, 6, 11 ]\\nres_vector = [\\n  [\\\"ationa\\\", \\\"interc\\\", \\\"ntalis\\\", \\\"ontine\\\"], [\\\"eng\\\", \\\"str\\\", \\\"ths\\\"],\\n  [\\\"croscopicsilico\\\", \\\"pneumonoultrami\\\", \\\"volcanoconiosis\\\"],\\n  [\\\"aphi\\\", \\\"call\\\", \\\"cogr\\\", \\\"lexi\\\"], [\\\"anesth\\\", \\\"esiolo\\\"], [\\\"matogl\\\", \\\"subder\\\"],\\n  [\\\"pedali\\\", \\\"sesqui\\\"], [\\\"ect\\\", \\\"ion\\\", \\\"oll\\\", \\\"rec\\\"], [\\\"hyroidi\\\", \\\"poparat\\\", \\\"pseudop\\\", \\\"seudohy\\\"],\\n  [\\\"at\\\", \\\"ci\\\", \\\"fl\\\", \\\"ic\\\", \\\"if\\\", \\\"ih\\\", \\\"il\\\", \\\"il\\\", \\\"in\\\", \\\"io\\\", \\\"ip\\\", \\\"na\\\", \\\"oc\\\", \\\"uc\\\"],\\n  [\\\"ablis\\\", \\\"antid\\\", \\\"arian\\\", \\\"hment\\\", \\\"isest\\\"],\\n  [\\\"ali\\\", \\\"ali\\\", \\\"doc\\\", \\\"erc\\\", \\\"fra\\\", \\\"gil\\\", \\\"ice\\\", \\\"iou\\\", \\\"ist\\\", \\\"sup\\\", \\\"xpi\\\"],\\n  [\\\"ensibilit\\\", \\\"incompreh\\\"], [\\\"astr\\\", \\\"ophy\\\", \\\"sici\\\"], [\\\"honorificabi\\\", \\\"litudinitati\\\"],\\n  [\\\"unimagin\\\"], [], [\\\"tsktsk\\\"], [\\\"uncopyright\\\"]\\n]\\nfor i, x in enumerate(str_vector): Test.assert_equals(collect(x, num_vector[i]), res_vector[i])\",\"language\":\"python3\",\"quality\":4.583333333333333,\"summary\":\"Write a function that returns an array of strings populated from the slices of n-length characters of the given word (a slice after another while n-length applies onto the word).\\n\\nExamples\\ncollect(\\\"intercontinentalisationalism\\\", 6)\\n➞ [\\\"ationa\\\", \\\"interc\\\", \\\"ntalis\\\", \\\"ontine\\\"]\\n\\ncollect(\\\"strengths\\\", 3)\\n➞ [\\\"eng\\\", \\\"str\\\", \\\"ths\\\"]\\n\\ncollect(\\\"pneumonoultramicroscopicsili\",\"tags\":[\"recursion\",\"sorting\",\"strings\",\"arrays\"],\"timestamp\":{\"$date\":1602887592653},\"title\":\"Recursion: N-Length Letter Groups\",\"stats\":{\"completed\":{\"total\":87,\"ratings\":[4,4,4,4,4,4,1,5,4,2,4,3,1,1,5,5,3,2,2,2,5,4,0,3,5,1,5,0,1,3,2,5,5,0,5,5,3,3,0,2,1,4,1,0,3,0,3,2,3,0,3,0,1,0,4,2,1,3,2,0],\"quality\":[5,5,1,5,5,3,5,5,5,3,5,5,5,5,5,5,5,4,5,5,4,5,5,5],\"rators\":[\"a777e8chPvJkY3tKa\",\"aEm3Wvj2rFYRL8Lrb\",\"8PwfYqoDQFThzNtvf\",\"tAF9Gf6PiGogbZuWs\",\"xn7uGNKeAwPEkP9oA\",\"gJYuGdkXEWWmGRLzu\",\"qD2LrwaDrSdiybLKY\",\"s5M5RvgqR9BhB9JoC\",\"Ecg4m7srYGgZsb4Ck\",\"5dHucvf2qBYyKim7X\",\"3bH5s2P4iYCRHb5Sk\",\"J3upzLHuEwXH7Z2hx\",\"4fhjJBvLBWh6QeSih\",\"8JyqsSbN2FJXPr3cw\",\"h4x2jaMdj5aQZbW5g\",\"iS5BrkGLzJyPK7nKt\",\"DPi9QGLctq2y76KuE\",\"QRv96jmNaYsWkxQEG\",\"XpWiAfpGjsqJvngqM\",\"CtKaPhQmtex9wnWcd\",\"mePSe5o7qpkYirqxx\",\"BfBiYxyMr7JED3CfC\",\"w2HhxvSLmDhaGCAjE\",\"tkdRHAExhDq8ryDJT\",\"iBPtFyzzY83pAFACa\",\"5rX3qPFdvRQ9G7xZQ\",\"GLgGSqM8SnZuqGzP5\",\"ntaGcjhFbafszWWZ7\",\"Tg24gZyPmk8uDXcBY\",\"SPdKF9vDQTC62XTpo\",\"Xk2g4CNFAnYcvxiSr\",\"WPf3wuMaAipBActzR\",\"W7yEw9tmKBttNxSX6\",\"aM7WkyPp7K2PE6JKF\",\"A2s3kZBihpquE9hnt\",\"SrtSFictS6zShzpxY\",\"vD6KFppvxCPu6ywps\",\"WJ8vMQsx4eSPWcQd5\",\"2DZpaY98od4zj6M59\",\"xKunHCF3i8Z3MpNch\",\"bEMdmXy3cnS8oR35y\",\"coHxA8hE6GnX2JusK\",\"kWobGYgZWJxN6ZddF\",\"CQrLMPjz7gn82rySP\",\"Mw8yqSDFdQui28w5N\",\"Jqk2uJZZxEv5wZFze\",\"oDN67zoApxcztnYdu\",\"HF28xZKSLM9wEuqNg\",\"sftR9DgM4jpwtxfAM\",\"J83b6T9hJ2EqE5Aov\",\"NuuYSwHvWrCbmQLL9\",\"j8FR2cHxpsYtNo9Dw\",\"m9Dj3WvWDwiu73PRh\",\"oq8wc5FgkNaKPRYJE\",\"T7QZG6y34b65Fxyef\",\"2HPz7bBCkwGExngii\",\"DQskEvAv5KiJDPtGF\",\"YSWaAF3wjq9LkWDnq\",\"8sNv5PTHa7XQ8bNqR\",\"DCY34cfeCDFan6BgQ\",\"XNmN6ztj36a7eChbD\",\"d8qtzoLB264iP8tdY\",\"gb9rvGus2Jv7bjZSs\",\"iojEnnY9FsMfYzp6f\",\"yjtdwc2AC4jA2RWtn\",\"AasGs8AeX9Lcb9xJn\",\"GTKsdeEihE636Le9i\",\"PH32cNxBjrK4a28sn\",\"Z85ajWfZ4jDPkbvR4\",\"2PufnQcsHsfymufX3\",\"HqmxnQJM66Y57twhn\",\"fznzd3qnvtbFkkizz\",\"T6iBEE2jp7f7iEF2P\",\"MpfytGFYF77emJ3cT\",\"gXTAie79kiw28tx5u\",\"yTtSCvGPyYna6JuRC\",\"a4Ln97CHxc8W6dzbq\",\"oBcs8GLX2ZFLXQy8y\",\"CHvzhtXnv8HTbPQ56\"]},\"flags\":0},\"editorId\":\"a777e8chPvJkY3tKa\",\"family\":[{\"_id\":\"DbqdoQDMv88NHSgi4\",\"language\":\"java\"},{\"_id\":\"PpqEjypCJ7a4RwxLH\",\"language\":\"javascript\"},{\"_id\":\"TcKZnbdgx7q6LLoFR\",\"language\":\"python3\"}]}}"]