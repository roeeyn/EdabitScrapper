a["{\"msg\":\"result\",\"id\":\"1003\",\"result\":{\"_id\":\"9BJzrtpdMP8JFQg74\",\"author\":\"lllll\",\"authorId\":\"DNACg4rcgZsPtYGZ8\",\"code\":\"def twins(lst):\\n\\t\",\"difficulty\":1.5089285714285714,\"familyId\":\"PGpqD5gxDHtMrGByu\",\"instructions\":\"Create a function that given a list, it returns the index where if split in two-subarrays (last element of the first array has index of (foundIndex-1)), the sum of them are equal.\\n\\n### Examples\\n```\\ntwins([10, 20, 30, 5, 40, 50, 40, 15]) ➞ 5\\n# foundIndex 5 : [10+20+30+5+40]=[50+40+15]\\n\\ntwins([1, 2, 3, 4, 5, 5]) ➞ 4\\n# [1, 2, 3, 4] [5, 5]\\n\\ntwins([3, 3]) ➞ 1\\n```\\n\\n### Notes\\nReturn only the foundIndex, not the divided list.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(twins([1, 2, 3, 4, 5, 5]), 4)\\nTest.assert_equals(twins([3, 3]), 1)\\nTest.assert_equals(twins([10, 20, 30, 5, 40, 50, 40, 15]), 5)\\nTest.assert_equals(twins([3, 4, 6, 7, 6]), 3)\",\"language\":\"python3\",\"quality\":4.75,\"summary\":\"Create a function that given a list, it returns the index where if split in two-subarrays (last element of the first array has index of (foundIndex-1)), the sum of them are equal.\\n\\nExamples\\ntwins([10, 20, 30, 5, 40, 50, 40, 15]) ➞ 5\\nfoundIndex 5 : [10+20+30+5+40]=[50+40+15]\\n\\ntwins([1, 2, 3, 4, 5, 5]) ➞ 4\\n[1, 2, 3, 4] [5, 5]\\n\\ntwins([3, 3]) ➞ 1\\n\\nNotes\\nReturn onl\",\"tags\":[\"data_structures\",\"algorithms\",\"arrays\"],\"timestamp\":{\"$date\":1602872346722},\"title\":\"The List Twins\",\"stats\":{\"completed\":{\"total\":150,\"ratings\":[2,2,2,2,2,1,2,2,3,0,2,2,2,2,3,3,0,2,3,2,1,3,3,3,2,2,2,1,1,0,1,2,1,0,2,2,1,2,1,0,0,2,0,0,1,1,0,2,2,1,1,1,2,2,2,1,0,1,2,1,2,3,2,1,2,0,2,1,1,2,0,2,2,2,2,2,2,2,3,0,2,1,0,2,1,1,2,2,1,1,2,2,2,2,1,0,2,2,1,2,0,0,0,1,1,2,2,2,2,2,3,1],\"quality\":[5,5,3,3,5,5,5,5,5,5,5,4,5,5,5,5,5,5,5,5,5,5,4,5,2,5,5,5,5,5,5,5,5,5,5,5],\"rators\":[\"DNACg4rcgZsPtYGZ8\",\"tAF9Gf6PiGogbZuWs\",\"J3upzLHuEwXH7Z2hx\",\"8PwfYqoDQFThzNtvf\",\"TFqRD3zervh8PT8op\",\"rJRKmoycDWSgCrfbC\",\"D8qPj49Lbu35Z95MQ\",\"Yp7uvStL97cC9fKkY\",\"XJYdH2ihEZmL7Cga5\",\"2CPMRa5mN7Azomc8v\",\"9RjPxa9gtAe8Rspre\",\"yjtdwc2AC4jA2RWtn\",\"5PDPCos3A7oj7JYtP\",\"dkcmCKwqApX5jBggc\",\"aEm3Wvj2rFYRL8Lrb\",\"QRv96jmNaYsWkxQEG\",\"9FCeFzjPA4jrQ7oHW\",\"6428wKHtwKkFdvBs5\",\"iS5BrkGLzJyPK7nKt\",\"gXTAie79kiw28tx5u\",\"6MjSiiBLPcvXbXcaZ\",\"xn7uGNKeAwPEkP9oA\",\"s5M5RvgqR9BhB9JoC\",\"DrkR35NqnP9NDLbq6\",\"v9KtC8YLbMWmXiW2H\",\"gb9rvGus2Jv7bjZSs\",\"KJCDwGkoXh8qtbbKr\",\"3LiSLdtN58n46NEqg\",\"rcdPwRahgrNS6TBjt\",\"sw5JkMKHfBgLbGekd\",\"gJYuGdkXEWWmGRLzu\",\"2Kzz5CubctKWfpPBp\",\"cR3ibTMxLyEdDFCHY\",\"p8qqFdJ3FSk5x9z3G\",\"oBcs8GLX2ZFLXQy8y\",\"qD2LrwaDrSdiybLKY\",\"DPi9QGLctq2y76KuE\",\"8JyqsSbN2FJXPr3cw\",\"HF28xZKSLM9wEuqNg\",\"5hQnRWiKkhgKJXNMP\",\"zZDaXBxMzTCBhNkgL\",\"kAkLAF9T5McSxXJCT\",\"cAP3n5NY64uoMwzRR\",\"FEYpu9RWysAgW3XnP\",\"BycBDC2QZ2uAqHsic\",\"zd9FLSzsGz3evKafy\",\"RGMbFMZXJr7DhcAJy\",\"Jqk2uJZZxEv5wZFze\",\"PXAcsKkssS2yLyDv2\",\"d8qtzoLB264iP8tdY\",\"eYfPWvZwnJQkHbSTK\",\"dBzwBtRjZqB98DJeB\",\"5HCu9Ydd86QgHDRNP\",\"HqmxnQJM66Y57twhn\",\"J5T8gZqiZXFuFDTQ7\",\"5S9nX4rKsnCcnv4Cz\",\"6xTu4r8NMczBFvmtz\",\"HuNF3xTBzmatyGSTm\",\"2QGRoQn2dRq3scu7k\",\"buX4mCQhtXCfBjeno\",\"GGdmhAvxXhqhhibJN\",\"3nied3n8KG8RSNixH\",\"wRttWTM59y8m5mx7x\",\"srJ34BaybkQh3qRkM\",\"4RsakkyRXyYGwFxEa\",\"Ds7L5bksw2QRHjrKL\",\"nqtDWq2hStPpjzDaN\",\"JwLKvWBSQcLs9R9vv\",\"YcCLwitFMAEJSnxAW\",\"RTDx9axf52kxhFjwZ\",\"JS3hNM3XXkxPdg3yk\",\"sHjfbGQGLHE6JR6qu\",\"qAby4AWXmTNeusvg3\",\"iojEnnY9FsMfYzp6f\",\"3cF6NXq3ZEwdkgSjb\",\"eMuCpJ2spXWkJjWNz\",\"3KkyQm77zsew58Dc2\",\"CTKmXtrqDYqJBnuy8\",\"DEDniTrstQYGounXT\",\"AJexRBN9cYQmqvYu6\",\"YmQb9Mo4Xcg2vzgbn\",\"8mGWypY7S2RcGcAPR\",\"M6fxKEh6am7YajPiT\",\"66a9xX73nmTEuKs9k\",\"Wpn95NqWxncQrwNgz\",\"CHvzhtXnv8HTbPQ56\",\"NQQzu4wyLWW9faWtK\",\"7d2XJAQELT9BB8w7G\",\"ey3CASd6Je5LEJzfB\",\"yod5YhKtPqw2GfG9B\",\"yr822PZmmiDDenxpB\",\"PC3pLs36zNzpRDSuE\",\"5XiuAqicKD4hBdu63\",\"eHcgvkTGsH7ZziqBo\",\"mvJBakQ35CWAnbbEZ\",\"9Ly8afdtofp8DXzrt\",\"AasGs8AeX9Lcb9xJn\",\"H4LqzfSad6d4BCgwy\",\"8BFSTCnoe2QggN64c\",\"BrTDhPJcACL2bsrpJ\",\"rrSC943cCKNG48sH4\",\"qzXAMXsHZGT8o5hTA\",\"RoGGD5cpHb4ftdLDv\",\"2NDSt8HyP33cFRHsu\",\"9gJsF5apWJGWZJprn\",\"Afnps7TJQuS9sipMb\",\"jy583EgYBZgtmrctK\",\"XD5nmvKQchKezPXhy\",\"AFfw7cGg83uYk2Miy\",\"EHtTFoDbt722AH667\",\"QvEXmSEo3ANp3yPyH\",\"2PufnQcsHsfymufX3\",\"T6Rm8mREPMZSftzrC\",\"dzS6WBTMHyFEag6Fp\",\"4TmgHkn5vqyHK3sYC\",\"suArq5BbSy7gD6xri\",\"4Lwjr34ypKNQNQCar\",\"d9LBRxvADNBB5QJMB\",\"MKT7khMBGXzA22ykf\",\"pduNK68oazqQTtbLp\",\"wjc4iejpErBhxWwHo\",\"AXdgPwPcYHJrXue4P\",\"u5u2YpHXiNgzDNJdX\",\"mw9464S5dnenqzvpm\",\"yAouD3PxzED8a4gap\",\"mxX4rH5ELYkdZ2Mbw\",\"NzbRqGWspQnWMoDrF\",\"fSQSHjW3e72MrWxbD\",\"EC3vxzsccoFjfhf86\",\"syRNbbPdLCGXbH2Gy\",\"5Dd7XwALvvMMwS4Fb\",\"Ncn7Qn2LbdsiJnfFk\",\"5QN8R22z43SrwoHDz\",\"9pzFiFK3ANLjQfnr2\",\"X4rzfxGgxx6CS7Bpz\",\"rCrbqMiaGPgHYTNxu\",\"Wi4H6ayKsNDWWQCG5\",\"uGuS9YRXW2nj4p6zf\",\"Qyfyyw6oC4EHAndzo\",\"2fxapKr8XGdNeaKi2\",\"PBuJo62j782fEoH4w\",\"naZ3i6sSDPwsieDH7\",\"wrL4iX2CCSqDCCty3\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"fn8MLzsTMjBSTD73P\",\"language\":\"cpp\"},{\"_id\":\"W9TyA4At3HNYn4B5u\",\"language\":\"javascript\"},{\"_id\":\"9BJzrtpdMP8JFQg74\",\"language\":\"python3\"},{\"_id\":\"cRka7BwCN3yknpPwZ\",\"language\":\"ruby\"}]}}"]