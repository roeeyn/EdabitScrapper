a["{\"msg\":\"result\",\"id\":\"2252\",\"result\":{\"_id\":\"qosZ7W2qppFo7MhNB\",\"author\":\"xAlien95\",\"authorId\":\"cRpaCxYRmGcN3Nsoj\",\"code\":\"def hex_distance(grid):\\n\\t\",\"difficulty\":3.515151515151515,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"24nizc5DPGPRbh85X\",\"instructions\":\"A **hexagonal grid** is a commonly used **game board design** based on hexagonal tiling. In the following grid, the two marked locations have a minimum distance of 6 because at least 6 steps are needed to reach the second location starting from the first one.\\n\\n![](https://edabit-challenges.s3.amazonaws.com/HiD.svg)\\n\\nWrite a function that takes a hexagonal grid with two marked locations as input and returns their distance.\\n\\nThe input grid will be a list of strings in which each tile is represented with `o` and the two marked locations with `x`.\\n\\n### Examples\\n```\\nhex_distance([\\n  \\\"  o o  \\\",\\n  \\\" o x o \\\",\\n  \\\"  o x  \\\",\\n]) ➞ 1\\n\\nhex_distance([\\n  \\\"  o o  \\\",\\n  \\\" x o o \\\",\\n  \\\"  o x  \\\",\\n]) ➞ 2\\n\\nhex_distance([\\n  \\\"   o o o   \\\",\\n  \\\"  o o o o  \\\",\\n  \\\" o o o o o \\\",\\n  \\\"  x o o x  \\\",\\n  \\\"   o o o   \\\",\\n]) ➞ 3\\n```\\n\\n### Notes\\nN/A\",\"isHidden\":false,\"lab\":\"Test.assert_equals(hex_distance([\\n\\t\\\"  o o  \\\",\\n\\t\\\" o x o \\\",\\n\\t\\\"  o x  \\\",\\n]), 1)\\n\\nTest.assert_equals(hex_distance([\\n\\t\\\"  x o  \\\",\\n\\t\\\" o o x \\\",\\n\\t\\\"  o o  \\\",\\n]), 2)\\n\\nTest.assert_equals(hex_distance([\\n\\t\\\"   o o o   \\\",\\n\\t\\\"  o o o o  \\\",\\n\\t\\\" o o o o o \\\",\\n\\t\\\"  x o o x  \\\",\\n\\t\\\"   o o o   \\\",\\n]), 3)\\n\\nTest.assert_equals(hex_distance([\\n\\t\\\"   o x o   \\\",\\n\\t\\\"  o x o o  \\\",\\n\\t\\\" o o o o o \\\",\\n\\t\\\"  o o o o  \\\",\\n\\t\\\"   o o o   \\\",\\n]), 1)\\n\\nTest.assert_equals(hex_distance([\\n\\t\\\"    o o o o    \\\",\\n\\t\\\"   o o o o o   \\\",\\n\\t\\\"  x o o o o o  \\\",\\n\\t\\\" o o o o o o o \\\",\\n\\t\\\"  o o o o o x  \\\",\\n\\t\\\"   o o o o o   \\\",\\n\\t\\\"    o o o o    \\\",\\n]), 6)\\n\\nTest.assert_equals(hex_distance([\\n\\t\\\"    o o o o    \\\",\\n\\t\\\"   o o x o o   \\\",\\n\\t\\\"  o o o o o o  \\\",\\n\\t\\\" o o o o o o o \\\",\\n\\t\\\"  o o o o o o  \\\",\\n\\t\\\"   o o x o o   \\\",\\n\\t\\\"    o o o o    \\\",\\n]), 4)\\n\\nTest.assert_equals(hex_distance([\\n\\t\\\"     x o o o o     \\\",\\n\\t\\\"    o o o o o o    \\\",\\n\\t\\\"   o o o o o o o   \\\",\\n\\t\\\"  o o o o o o o o  \\\",\\n\\t\\\" o o o o o o o o o \\\",\\n\\t\\\"  o o o o o o o o  \\\",\\n\\t\\\"   o o o o o o o   \\\",\\n\\t\\\"    o o o o o o    \\\",\\n\\t\\\"     o o o o x     \\\",\\n]), 8)\\n\\nTest.assert_equals(hex_distance([\\n\\t\\\"     x o o o o     \\\",\\n\\t\\\"    o o o o o o    \\\",\\n\\t\\\"   o o o o o o o   \\\",\\n\\t\\\"  o o o o o o o o  \\\",\\n\\t\\\" o o o o o o o o o \\\",\\n\\t\\\"  o o o o o o o o  \\\",\\n\\t\\\"   o o o o o o o   \\\",\\n\\t\\\"    o o o o o o    \\\",\\n\\t\\\"     x o o o o     \\\",\\n]), 8)\\n\\nTest.assert_equals(hex_distance([\\n\\t\\\"     o o o o x     \\\",\\n\\t\\\"    o o o o o o    \\\",\\n\\t\\\"   o o o o o o o   \\\",\\n\\t\\\"  o o o o o o o o  \\\",\\n\\t\\\" x o o o o o o o o \\\",\\n\\t\\\"  o o o o o o o o  \\\",\\n\\t\\\"   o o o o o o o   \\\",\\n\\t\\\"    o o o o o o    \\\",\\n\\t\\\"     o o o o o     \\\",\\n]), 8)\\n\\nTest.assert_equals(hex_distance([\\n\\t\\\"     o o o o o     \\\",\\n\\t\\\"    o o o o o o    \\\",\\n\\t\\\"   o o o o o o o   \\\",\\n\\t\\\"  o o o o o x o o  \\\",\\n\\t\\\" o o o o o o o o o \\\",\\n\\t\\\"  o o o o o o o o  \\\",\\n\\t\\\"   o o o x o o o   \\\",\\n\\t\\\"    o o o o o o    \\\",\\n\\t\\\"     o o o o o     \\\",\\n]), 3)\\n\\nTest.assert_equals(hex_distance([\\n\\t\\\"     o o o o o     \\\",\\n\\t\\\"    o o o o o o    \\\",\\n\\t\\\"   o x o o o o o   \\\",\\n\\t\\\"  o o o o o x o o  \\\",\\n\\t\\\" o o o o o o o o o \\\",\\n\\t\\\"  o o o o o o o o  \\\",\\n\\t\\\"   o o o o o o o   \\\",\\n\\t\\\"    o o o o o o    \\\",\\n\\t\\\"     o o o o o     \\\",\\n]), 4)\\n\\nTest.assert_equals(hex_distance([\\n\\t\\\"     x o o o o     \\\",\\n\\t\\\"    o o o o o o    \\\",\\n\\t\\\"   o o o o o o o   \\\",\\n\\t\\\"  o o o o o o o o  \\\",\\n\\t\\\" o o o o o o o o o \\\",\\n\\t\\\"  o o o o o o o o  \\\",\\n\\t\\\"   o o o x o o o   \\\",\\n\\t\\\"    o o o o o o    \\\",\\n\\t\\\"     o o o o o     \\\",\\n]), 6)\\n\\nTest.assert_equals(hex_distance([\\n\\t\\\"     o o o o o     \\\",\\n\\t\\\"    o o o o o o    \\\",\\n\\t\\\"   o o o o o o o   \\\",\\n\\t\\\"  o o o o o o o o  \\\",\\n\\t\\\" o o o o o o o o o \\\",\\n\\t\\\"  o o o o o o o o  \\\",\\n\\t\\\"   o o x x o o o   \\\",\\n\\t\\\"    o o o o o o    \\\",\\n\\t\\\"     o o o o o     \\\",\\n]), 1)\\n\\nTest.assert_equals(hex_distance([\\n\\t\\\"     o o o o o     \\\",\\n\\t\\\"    o o o o o o    \\\",\\n\\t\\\"   o o o o o o o   \\\",\\n\\t\\\"  o o o o o o o o  \\\",\\n\\t\\\" o o o o o o o o o \\\",\\n\\t\\\"  o x o o o o o o  \\\",\\n\\t\\\"   o o o x o o o   \\\",\\n\\t\\\"    o o o o o o    \\\",\\n\\t\\\"     o o o o o     \\\",\\n]), 3)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,4,3,5,0,5,5,5,5,5,3,1,3,3,5,4,0,5,4,2,4,5,3,5,1,2,5,4,5],\"rators\":[\"cRpaCxYRmGcN3Nsoj\",\"GiK8LZt3JRKNJjj5W\",\"X4iqEdg7dPjFpoASw\",\"fMR9RcfgPJWiLgx7k\",\"t7BnRyo7NH5Nx22HR\",\"de3DhFz9dW8vdPanZ\",\"tAF9Gf6PiGogbZuWs\",\"8PwfYqoDQFThzNtvf\",\"3GhZpJLhhrm6AR3aM\",\"mYfBtboCAW2iTvQTv\",\"Z85ajWfZ4jDPkbvR4\",\"aEm3Wvj2rFYRL8Lrb\",\"DwetpbChQM4r6Gwah\",\"vTfyrr4pGddp8rbXc\",\"fznzd3qnvtbFkkizz\",\"W5TajitmCyxz87zAC\",\"bJaPCBx63YxdJAuTS\",\"xn7uGNKeAwPEkP9oA\",\"4fhjJBvLBWh6QeSih\",\"mDWNyaaQ9hvPCRzSd\",\"QBgP4BySQAeCoCFf6\",\"bvSrhzjcj6JZdZyD6\",\"iS5BrkGLzJyPK7nKt\",\"yjtdwc2AC4jA2RWtn\",\"8sNv5PTHa7XQ8bNqR\",\"gJYuGdkXEWWmGRLzu\",\"s5M5RvgqR9BhB9JoC\",\"2PufnQcsHsfymufX3\"],\"total\":29,\"quality\":[]},\"flags\":0},\"summary\":\"A hexagonal grid is a commonly used game board design based on hexagonal tiling. In the following grid, the two marked locations have a minimum distance of 6 because at least 6 steps are needed to reach the second location starting from the first one.\\n\\nWrite a function that takes a hexagonal grid with two marked locations as input and returns their distance.\",\"tags\":[\"games\",\"logic\",\"arrays\"],\"timestamp\":{\"$date\":1580692277000},\"title\":\"Hexagonal Grid: Distance\",\"quality\":0,\"family\":[{\"_id\":\"wjcNjRaNyts3swS4M\",\"language\":\"cpp\"},{\"_id\":\"YuWnXNtiRAnETbf3P\",\"language\":\"javascript\"},{\"_id\":\"qosZ7W2qppFo7MhNB\",\"language\":\"python3\"},{\"_id\":\"PtgTcyrov7z6Y8R7H\",\"language\":\"ruby\"}]}}"]