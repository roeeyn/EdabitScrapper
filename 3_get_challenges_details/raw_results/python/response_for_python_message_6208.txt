a["{\"msg\":\"result\",\"id\":\"1814\",\"result\":{\"_id\":\"EuHGfJfCeLyx9BEdG\",\"author\":\"MyName\",\"authorId\":\"P7NmFbCJ5offXMRvB\",\"code\":\"def party_people(lst):\\n\\t\",\"difficulty\":2.5128205128205128,\"editorId\":\"P7NmFbCJ5offXMRvB\",\"familyId\":\"a4JFynRSckHmag9ni\",\"instructions\":\"Ava, Mark, Sheila, and Pete are at a party. However, Ava and Sheila are only staying if there are at least 4 people, Pete is only staying if there's 1 person, and Mark is only staying if there are at least 5 people. Therefore, Mark leaves, which makes Ava and Sheila leave, and Pete is left alone.\\n\\nGiven a list with the preferences of every person at a party for the minimum number of people present, determine how many people will stay.\\n\\nIt is required that you solve this challenge recursively.\\n\\n### Examples\\n```\\nparty_people([4, 5, 4, 1]) ➞ 1\\n# Ava's minimum number is 4, Mark's is 5, Sheila's is 4, and Pete's is 1.\\n# Only 1 person (Pete) stays.\\n\\nparty_people([10, 12, 15, 15, 5]) ➞ 0\\n\\nparty_people([2, 1, 2, 0]) ➞ 4\\n```\\n\\n### Notes\\n- All attendees are included in the list.\\n- Any person's count includes themself.\\n- Expect valid input only.\\n- For the iterative version of this challenge, check out [Part II](https://edabit.com/challenge/F3QP7JBD5aCrFD8aj).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"# Checking for recursivity.\\n# For tests, scroll down to line 40.\\nfrom bdb import Bdb\\nimport sys\\n\\nclass RecursionDetected(Exception):\\n    pass\\n\\nclass RecursionDetector(Bdb):\\n    def do_clear(self, arg):\\n        pass\\n\\n    def __init__(self, *args):\\n        Bdb.__init__(self, *args)\\n        self.stack = set()\\n\\n    def user_call(self, frame, argument_list):\\n        code = frame.f_code\\n        if code in self.stack:\\n            raise RecursionDetected\\n        self.stack.add(code)\\n\\n    def user_return(self, frame, return_value):\\n        self.stack.remove(frame.f_code)\\n\\ndef test_recursion(func):\\n    detector = RecursionDetector()\\n    detector.set_trace()\\n    try:\\n        func()\\n    except RecursionDetected:\\n        return True\\n    else:\\n        return False\\n    finally:\\n        sys.settrace(None)\\n\\t\\t\\nTest.assert_equals(test_recursion(lambda: party_people([4, 5, 4, 1])), True, 'Recursion is required!')\\n\\n#Tests\\nTest.assert_equals(party_people([4, 5, 4, 1]), 1)\\nTest.assert_equals(party_people([10, 12, 15, 15, 5]), 0)\\nTest.assert_equals(party_people([2, 1, 2, 0]), 4)\\nTest.assert_equals(party_people([0, 0, 0, 0]), 4)\\nTest.assert_equals(party_people([5, 5, 5, 5]), 0)\\nTest.assert_equals(party_people([5, 5, 5, 5, 5]), 5)\\nTest.assert_equals(party_people([1, 5, 3, 5, 0]), 5)\\nTest.assert_equals(party_people([13, 8, 11, 15, 13, 3, 12, 13, 6, 3]), 0)\\nTest.assert_equals(party_people([11, 3, 4, 3, 11, 4, 0, 1, 1, 3]), 8)\\nTest.assert_equals(party_people([15, 3, 8, 0, 2, 12, 13, 7, 6]), 3)\\nTest.assert_equals(party_people([3, 11, 15, 5, 3, 4, 10, 8, 14, 6, 13, 1]), 6)\\nTest.assert_equals(party_people([7, 14, 14, 0, 7, 3, 2, 2]), 4)\\nTest.assert_equals(party_people([2, 6, 7, 4, 6, 10, 4, 3, 6, 2, 0]), 11)\",\"language\":\"python3\",\"quality\":0,\"stats\":{\"completed\":{\"ratings\":[4,4,4,4,4,5,2,1,2,2,3,4,1,4,4,0,2,2,3,4,3,0,1,3,2,2,0,2,2,3,2,2,3,2,4,2,1,3,2],\"quality\":[],\"rators\":[\"8PwfYqoDQFThzNtvf\",\"mDWNyaaQ9hvPCRzSd\",\"s5M5RvgqR9BhB9JoC\",\"58M252WF7SPRinfBx\",\"8JyqsSbN2FJXPr3cw\",\"2PufnQcsHsfymufX3\",\"iS5BrkGLzJyPK7nKt\",\"8sNv5PTHa7XQ8bNqR\",\"J23RcmzbdtBbPCTjT\",\"p8qqFdJ3FSk5x9z3G\",\"bccs9koJxyQ9XNiLC\",\"2oM2gF7qFJtNjhsWr\",\"eHcgvkTGsH7ZziqBo\",\"J3upzLHuEwXH7Z2hx\",\"iojEnnY9FsMfYzp6f\",\"gJYuGdkXEWWmGRLzu\",\"yjtdwc2AC4jA2RWtn\",\"yr822PZmmiDDenxpB\",\"AasGs8AeX9Lcb9xJn\",\"H9KZi2cjt4FwH7qog\",\"MpfytGFYF77emJ3cT\",\"HqmxnQJM66Y57twhn\",\"fznzd3qnvtbFkkizz\",\"oBcs8GLX2ZFLXQy8y\",\"aEm3Wvj2rFYRL8Lrb\",\"gXTAie79kiw28tx5u\",\"4RY3zj9C2t8GGefhi\",\"DPi9QGLctq2y76KuE\",\"rhS8qXRjZcpDXkwnE\",\"tAF9Gf6PiGogbZuWs\",\"Wf4wWoPyrF8gkcBv5\",\"n2qKKxomPnb4zez5M\",\"iqmPb9JuJDgTFeR8Q\",\"CHvzhtXnv8HTbPQ56\"],\"total\":36},\"flags\":0},\"summary\":\"Ava, Mark, Sheila, and Pete are at a party. However, Ava and Sheila are only staying if there are at least 4 people, Pete is only staying if there's 1 person, and Mark is only staying if there are at least 5 people. Therefore, Mark leaves, which makes Ava and Sheila leave, and Pete is left alone.\\n\\nGiven a list with the preferences of every person at a party fo\",\"tags\":[\"recursion\",\"numbers\"],\"timestamp\":{\"$date\":1611067658219},\"title\":\"Party People Part I: Make it Recursive\",\"family\":[{\"_id\":\"EuHGfJfCeLyx9BEdG\",\"language\":\"python3\"}]}}"]