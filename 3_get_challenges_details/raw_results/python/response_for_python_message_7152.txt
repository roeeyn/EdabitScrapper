a["{\"msg\":\"result\",\"id\":\"2282\",\"result\":{\"_id\":\"XzT5P3rQ47z3B8NC8\",\"author\":\"Mubashir Hassan \",\"authorId\":\"T6iBEE2jp7f7iEF2P\",\"code\":\"def condi_cipher(message, key, shift):\\n\\t\",\"difficulty\":3.5789473684210527,\"familyId\":\"r4jDQCLPEjChWiYS4\",\"instructions\":\"In **Condi Cipher**, encoding is done by shifting a string of messages in correspondence with a given key in the plaintext.\\n\\nCreate a function that takes three arguments, `key`, `shift` and `message`, and returns the **encoded message**.\\n\\nThere are some variations on the rules of encipherment. One version of the cipher rules are outlined below:\\n\\n```\\nmessage = \\\"on.,\\\"\\nshift = 10\\nkey = \\\"cryptogram\\\"\\n\\ncondi_cipher(message, key, shift) ➞ \\\"jx.,\\\"\\n```\\n\\nStep 1: **Remove duplicate alphabets** of the key. **Rearrange alphabets** from A-Z, such that the keyword appears first, followed by the rest of the alphabets in the usual order.\\n\\n```\\nc r y p t o g a m b d e f h i j k l n q s u v w x z\\n```\\nStep 2: Starting from 1, **assign numbers** to the letters:\\n\\n```\\n1  2  3  4  5  6  7  8  9  10 11 12 13\\nc  r  y  p  t  o  g  a  m  b  d  e  f \\n14 15 16 17 18 19 20 21 22 23 24 25 26\\nh  i  j  k  l  n  q  s  u  v  w  x  z\\n```\\n\\nStep 3: **Replace each alphabet** of the message with the letter in the modified key shifter by a constant positive number `shift` (wrapping is required if the shift is greater than key size):\\n\\n```\\n   'o' = 'j'\\n# 'j' is 10 places right to 'o'\\n```\\n\\nStep 4: Use the **position of the previous letter** as the number of places to move to encode the next plaintext number. If you have just encoded an 'o' (position 6), and you now want to encode 'n', then you have to move 6 places to the right from 'n' which brings you to 'x'.\\n\\n```\\n   'n' = 'x'\\n# 'x' is 6 places right to 'n'\\n# keep other characters in same order\\n\\neMessage = \\\"jx.,\\\"\\n```\\n\\nSee the below examples for a better understanding:\\n\\n### Examples\\n```\\ncondi_cipher(\\\"on.,\\\", \\\"cryptogam\\\", 10) ➞ \\\"jx.,\\\"\\n\\ncondi_cipher(\\\"mubashir\\\", \\\"airforce\\\", 6) ➞ \\\"ugrdtfko\\\"\\n\\ncondi_cipher(\\\"matt\\\", \\\"edabit\\\", 2) ➞ \\\"opgk\\\"\\n```\\n\\n### Notes\\nN/A\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(condi_cipher(\\\"on.,\\\", \\\"cryptogam\\\", 10), \\\"jx.,\\\")\\nTest.assert_equals(condi_cipher(\\\"mubashir\\\", \\\"airforce\\\", 6), \\\"ugrdtfko\\\")\\nTest.assert_equals(condi_cipher(\\\"matt\\\", \\\"edabit\\\", 2), \\\"opgk\\\")\\nTest.assert_equals(condi_cipher(\\\"pakistan\\\", \\\"amazzziiinnnngggg\\\", 8), \\\"xqlqwlug\\\")\\nTest.assert_equals(condi_cipher(\\\"mubashir+edabit\\\", \\\"amazing\\\", 5), \\\"bwzctgov+zrecfx\\\")\\nTest.assert_equals(condi_cipher(\\\"m-u-b-l-o-v-e-h-e-l\\\", \\\"google\\\", 7), \\\"u-f-g-f-a-x-z-m-m-c\\\")\\nTest.assert_equals(condi_cipher(\\\"cryptogram\\\", \\\"cryptogam\\\", 0), \\\"cytgmdfmbk\\\")\\nTest.assert_equals(condi_cipher(\\\"on the first day i got lost.\\\", \\\"cryptogam\\\", 10), \\\"jx wnz xrkvz jnd l ufd vwcz.\\\")\\nTest.assert_equals(condi_cipher(\\\"i will never eat any grapes again\\\", \\\"superkey\\\", 4), \\\"n ggka cvssb bfe esz omgdyr bqqva\\\")\",\"language\":\"python3\",\"quality\":0,\"summary\":\"In Condi Cipher, encoding is done by shifting a string of messages in correspondence with a given key in the plaintext.\\n\\nCreate a function that takes three arguments, key, shift and message, and returns the encoded message.\\n\\nThere are some variations on the rules of encipherment. One version of the cipher rules are outlined below:\\n\\nmessage = \\\"on.,\\\"\\nshift = 10\",\"tags\":[\"cryptography\",\"algorithms\",\"strings\",\"logic\"],\"timestamp\":{\"$date\":1609152027205},\"title\":\"Condi Cipher\",\"stats\":{\"completed\":{\"total\":15,\"ratings\":[5,5,5,5,5,1,5,5,2,3,5,4,1,1,1,5,3,3,4],\"quality\":[],\"rators\":[\"T6iBEE2jp7f7iEF2P\",\"8PwfYqoDQFThzNtvf\",\"iS5BrkGLzJyPK7nKt\",\"s5M5RvgqR9BhB9JoC\",\"XHShZ3WMPgGEA2vkR\",\"XNmN6ztj36a7eChbD\",\"gJYuGdkXEWWmGRLzu\",\"8nE8QHnFYsHCFebte\",\"yjtdwc2AC4jA2RWtn\",\"8sNv5PTHa7XQ8bNqR\",\"J3upzLHuEwXH7Z2hx\",\"yTtSCvGPyYna6JuRC\",\"2PufnQcsHsfymufX3\",\"DPi9QGLctq2y76KuE\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"NhgubyWttLM6xvRHf\",\"language\":\"cpp\"},{\"_id\":\"GhW3bhPRKZtYiznsK\",\"language\":\"javascript\"},{\"_id\":\"XzT5P3rQ47z3B8NC8\",\"language\":\"python3\"},{\"_id\":\"ruAgX9HgPPyv3FD3o\",\"language\":\"ruby\"}]}}"]