a["{\"msg\":\"result\",\"id\":\"1190\",\"result\":{\"_id\":\"LQgpGFMK9t9MELvph\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"def get_diagonals(lst):\\n\\t\",\"difficulty\":1.6466165413533835,\"familyId\":\"2nPeK9BKQC3EocFrw\",\"instructions\":\"Given a square list (_n_\\\\*_n_ size) implement a function that returns a new list containing two lists equal to the two diagonals, in the following order:\\n\\n```\\ndiagonal 1 = from upper-left to lower-right corner\\ndiagonal 2 = from upper-right to lower-left corner\\n```\\n\\n### Examples\\n```\\nget_diagonals([ [1, 2], [3, 4] ]) ➞ [ [1, 4], [2, 3] ]\\n\\nget_diagonals([ [\\\"a\\\", \\\"b\\\", \\\"c\\\"], [\\\"d\\\", \\\"e\\\", \\\"f\\\"], [\\\"g\\\", \\\"h\\\", \\\"i\\\"] ]) ➞ [ [\\\"a\\\", \\\"e\\\", \\\"i\\\"], [\\\"c\\\", \\\"e\\\", \\\"g\\\"] ]\\n\\nget_diagonals([ [True] ]) ➞ [ [True], [True] ]\\n```\\n\\n### Notes\\n- Your function must also work with single elements or empty lists.\\n- Try to build both diagonals with a single loop.\",\"lab\":\"Test.assert_equals(get_diagonals([\\n\\t[1, 2, 3],\\n\\t[4, 5, 6],\\n\\t[7, 8, 9]\\n]), [\\n\\t[1, 5, 9], \\n\\t[3, 5, 7]\\n])\\n\\nTest.assert_equals(get_diagonals([\\n\\t[\\\"e\\\", \\\"z\\\", \\\"y\\\", \\\"o\\\", \\\"p\\\", \\\"t\\\"],\\n\\t[\\\"b\\\", \\\"d\\\", \\\"a\\\", \\\"t\\\", \\\"i\\\", \\\"w\\\"],\\n\\t[\\\"u\\\", \\\"l\\\", \\\"a\\\", \\\"n\\\", \\\"s\\\", \\\"k\\\"],\\n\\t[\\\"s\\\", \\\"v\\\", \\\"k\\\", \\\"b\\\", \\\"r\\\", \\\"z\\\"],\\n\\t[\\\"h\\\", \\\"e\\\", \\\"w\\\", \\\"c\\\", \\\"i\\\", \\\"j\\\"],\\n\\t[\\\"r\\\", \\\"p\\\", \\\"y\\\", \\\"d\\\", \\\"x\\\", \\\"t\\\"]\\n]), [\\n\\t[\\\"e\\\", \\\"d\\\", \\\"a\\\", \\\"b\\\", \\\"i\\\", \\\"t\\\"], \\n\\t[\\\"t\\\", \\\"i\\\", \\\"n\\\", \\\"k\\\", \\\"e\\\", \\\"r\\\"]\\n])\\n\\nTest.assert_equals(get_diagonals([\\n\\t[True, False, True, False],\\n\\t[False, True, False, True],\\n\\t[True, False, True, False],\\n\\t[False, False, False, True]\\n]), [\\n\\t[True, True, True, True], \\n\\t[False, False, False, False]\\n])\\n\\nTest.assert_equals(get_diagonals([\\n\\t[0, 1, 1, 0, 1, 1, 1, 0, 1, 0],\\n\\t[0, 0, 1, 0, 0, 1, 0, 1, 1, 1],\\n\\t[0, 0, 0, 0, 1, 1, 1, 1, 0, 0],\\n\\t[1, 0, 1, 1, 1, 0, 0, 1, 0, 1],\\n\\t[1, 0, 0, 1, 0, 0, 1, 1, 0, 0],\\n\\t[0, 0, 1, 0, 1, 0, 0, 1, 1, 1],\\n\\t[1, 1, 1, 1, 0, 1, 0, 0, 0, 1],\\n\\t[0, 0, 1, 1, 0, 1, 1, 0, 0, 0],\\n\\t[0, 1, 1, 1, 0, 1, 1, 1, 0, 0],\\n\\t[1, 0, 0, 0, 1, 1, 1, 1, 1, 1]\\n]), [\\n\\t[0, 0, 0, 1, 0, 0, 0, 0, 0, 1], \\n\\t[0, 1, 1, 0, 0, 1, 1, 1, 1, 1]\\n])\\n\\nTest.assert_equals(get_diagonals([[\\\"Trivial\\\"]]), [ [\\\"Trivial\\\"], [\\\"Trivial\\\"]])\\nTest.assert_equals(get_diagonals([]), [ [], [] ])\",\"language\":\"python3\",\"summary\":\"Given a square list (n\\\\*n size) implement a function that returns a new list containing two lists equal to the two diagonals, in the following order:\\n\\ndiagonal 1 = from upper-left to lower-right corner\\ndiagonal 2 = from upper-right to lower-left corner\\n\\nExamples\\nget_diagonals([ [1, 2], [3, 4] ]) ➞ [ [1, 4], [2, 3] ]\\n\\nget_diagonals([ [\\\"a\\\", \\\"b\\\", \\\"c\\\"], [\\\"d\\\", \\\"e\\\",\",\"tags\":[\"arrays\",\"loops\",\"language_fundamentals\"],\"timestamp\":{\"$date\":1571292974144},\"title\":\"Get the Diagonals\",\"stats\":{\"completed\":{\"total\":155,\"ratings\":[1,1,1,1,1,2,2,1,1,1,2,3,2,1,1,2,0,1,3,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,3,2,3,2,1,2,2,2,2,0,2,1,2,1,2,2,1,3,1,2,3,2,0,0,2,2,2,1,2,1,2,2,1,2,1,2,2,2,0,2,0,2,0,2,1,2,2,2,2,0,3,0,2,2,1,2,1,2,2,2,1,1,1,2,2,2,3,2,2,2,2,2,1,2,1,2,1,2,1,3,1,2,2,1,1,1,1,1,2,2,2,2,4,1],\"rators\":[\"Nj6FwgBtAXsaQwsM2\",\"dYYWjMAerXySffgWQ\",\"tAF9Gf6PiGogbZuWs\",\"N2wnZXkhDH86mgjQ8\",\"AdXwRoC2CsKr9QcSN\",\"cR3ibTMxLyEdDFCHY\",\"63rvTdQApCkodYrMD\",\"XKi8iZXBCHCaebSHh\",\"8JyqsSbN2FJXPr3cw\",\"gb9rvGus2Jv7bjZSs\",\"2fxapKr8XGdNeaKi2\",\"otXtuQygbcYATMZoP\",\"ahWFxnaxt9bXSA4f3\",\"SKabuq5XuhXBugKBa\",\"kaB9Yh7Z698fX88ir\",\"gMJhLdyw3tH7L96X2\",\"9cKQ9BxGZ4vQAcM5x\",\"8aPJNKDxXq7884eJb\",\"HQxp7NcdvF92G7bYS\",\"jYJ26SiLKBu5GRumq\",\"FgkYtHLxeD8pETJ8T\",\"4y2bxsHwifCdZXAQA\",\"78D8EBdJesQZRwFt6\",\"HqmxnQJM66Y57twhn\",\"JEAi9mG3vvBomJ3Yu\",\"fiAZ4Rp5uNhgSbf8m\",\"7CwgH38hHpiGdu2zT\",\"Rps7FytjRoDLW53dy\",\"K96FwtfDDN5WM4Bb7\",\"DLai9DxpZN6p5TPRX\",\"PSrcg6fy835R4c5CW\",\"k4ddNNRduYBMR7B28\",\"K3RacTvkWHLfzKF8i\",\"u5u2YpHXiNgzDNJdX\",\"6ShafRStcvew4GfCh\",\"C4QntmkYtB89GNtpd\",\"wLkPWcS3y4LXkiwMR\",\"AnjjyuE9aWLzK3nkg\",\"Jqk2uJZZxEv5wZFze\",\"42AaqpTvE8T8AbaDp\",\"Yp7uvStL97cC9fKkY\",\"Xj6R2zqhgumffQCAN\",\"p3dsCFdWGzWGhFrSQ\",\"ab7BsQuhDo3QgE6bh\",\"2innwjWqxJHo4eRGh\",\"BeFnbPbMnAM2SjBdZ\",\"QnPD4Sv6W4LHc2Qng\",\"apiyfPkZX9v9EmJrq\",\"AasGs8AeX9Lcb9xJn\",\"4CFzv558qbGcpQwc4\",\"s5M5RvgqR9BhB9JoC\",\"sJWTa7iWeRoRtqJ8N\",\"orFLgPDw9H5MDzmwo\",\"vLrq4dEDMM2wd68Dc\",\"6uCNJcdrwsMy72Hnw\",\"dHZqT6h4JMwk5fPC8\",\"X74H8PYX8XYkrGRQc\",\"eMuCpJ2spXWkJjWNz\",\"9Ly8afdtofp8DXzrt\",\"M4vq8ATaS9Jg5X7iP\",\"jNvegJWCk5HCtEMbK\",\"ZNnsMeNkdDhHjSrZb\",\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\",\"Ro3ppqamSxiJv2wxP\",\"qZQxPQ2kaNKAMesHT\",\"yZvzB3qFb8pkHy4dg\",\"gJYuGdkXEWWmGRLzu\",\"HF28xZKSLM9wEuqNg\",\"DEDniTrstQYGounXT\",\"KdNDysEsy2TW5QRJ2\",\"9pzFiFK3ANLjQfnr2\",\"2QGRoQn2dRq3scu7k\",\"rgvAJFwfCeYoYnFTK\",\"ahk2qiXKJA753wAJk\",\"a777e8chPvJkY3tKa\",\"aRqQ42J5zqCmBNd8w\",\"NG8PWBSjsM8mMhQEq\",\"syRNbbPdLCGXbH2Gy\",\"H4abACFDH5t8CnnyH\",\"iojEnnY9FsMfYzp6f\",\"ZrKCkX7xxGGZzauFW\",\"Pe8vWpDHRuH9nSGKW\",\"yjtdwc2AC4jA2RWtn\",\"GaJNJwcdyB9ueYFst\",\"hRiMXDZNAzyPd5tpt\",\"YcCLwitFMAEJSnxAW\",\"mCKqRAPMTht5QBnXo\",\"R4SjTgDnpigJYDLyL\",\"PXAcsKkssS2yLyDv2\",\"NNE5HNRXAkmhrWgyQ\",\"dfAhBDprqHtbX5sn3\",\"oBcs8GLX2ZFLXQy8y\",\"mG8HqKiAQFTdRZthG\",\"tpxMgkGSHwBjS95Ta\",\"mxX4rH5ELYkdZ2Mbw\",\"gXTAie79kiw28tx5u\",\"cRoHBaA7HjePc8wb2\",\"QRv96jmNaYsWkxQEG\",\"FEYpu9RWysAgW3XnP\",\"DPi9QGLctq2y76KuE\",\"yTtSCvGPyYna6JuRC\",\"J3upzLHuEwXH7Z2hx\",\"Ecg4m7srYGgZsb4Ck\",\"dYPkStFnLvAMsHSzZ\",\"Wv2vJnEj8ywNmARoF\",\"iS5BrkGLzJyPK7nKt\",\"5XiuAqicKD4hBdu63\",\"cAP3n5NY64uoMwzRR\",\"RGMbFMZXJr7DhcAJy\",\"zd9FLSzsGz3evKafy\",\"rfyEkETeoS96QNH4e\",\"d8qtzoLB264iP8tdY\",\"5hQnRWiKkhgKJXNMP\",\"hzHsgwjark5sZCQ2c\",\"5S9nX4rKsnCcnv4Cz\",\"GGdmhAvxXhqhhibJN\",\"eYfPWvZwnJQkHbSTK\",\"qAby4AWXmTNeusvg3\",\"J5T8gZqiZXFuFDTQ7\",\"Ds7L5bksw2QRHjrKL\",\"66a9xX73nmTEuKs9k\",\"o4ixjQGSaYqA2JoM4\",\"5HCu9Ydd86QgHDRNP\",\"T6iBEE2jp7f7iEF2P\",\"AFfw7cGg83uYk2Miy\",\"srJ34BaybkQh3qRkM\",\"yr822PZmmiDDenxpB\",\"sKBGcRfEr6LrvG8A2\",\"eHcgvkTGsH7ZziqBo\",\"AJexRBN9cYQmqvYu6\",\"PytNZK9mNiRiZxPrm\",\"LQxof8pGabGuWP7Gn\",\"PC3pLs36zNzpRDSuE\",\"mvJBakQ35CWAnbbEZ\",\"yod5YhKtPqw2GfG9B\",\"BrTDhPJcACL2bsrpJ\",\"dzS6WBTMHyFEag6Fp\",\"rhS8qXRjZcpDXkwnE\",\"CHvzhtXnv8HTbPQ56\",\"ey3CASd6Je5LEJzfB\",\"2PufnQcsHsfymufX3\",\"tRuBLPKFwBxbkcLTG\",\"3nied3n8KG8RSNixH\",\"6GYJx8A4TuQXJm4fJ\",\"Wi4H6ayKsNDWWQCG5\"],\"quality\":[4,5,5,2,5,4,5,4,5,5,5,5,5,5,5,4,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.611111111111111,\"family\":[{\"_id\":\"GwdGioqhZGdGRD2FJ\",\"language\":\"javascript\"},{\"_id\":\"LQgpGFMK9t9MELvph\",\"language\":\"python3\"},{\"_id\":\"JK3QkHgJyyAfpE2gM\",\"language\":\"ruby\"}]}}"]