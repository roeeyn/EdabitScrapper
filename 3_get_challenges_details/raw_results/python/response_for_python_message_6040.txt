a["{\"msg\":\"result\",\"id\":\"1732\",\"result\":{\"_id\":\"4hFDo2uytDJmvKMfG\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"def happy_algorithm(num):\\n\\t\",\"difficulty\":2.235294117647059,\"familyId\":\"ZabXBMvQ95daB6rAZ\",\"instructions\":\"In this challenge, you have to implement an algorithm to establish if a given positive integer `num` is a Happy number, and how many steps of the algorithm are needed to establish it.\\n\\nYou have to repeatedly transform the given `num` into the sum of its squared digits:\\n- If after the transformation the new number is equal to `1`, `num` is a Happy number and the algorithm stops.\\n- If after the transformation, the new number is not equal to `1`, you have to transform it again.\\n\\n![Happy Numbers](https://edabit-challenges.s3.amazonaws.com/happyjcnc.png)\\n\\nIf a number can't be reduced to `1`, sooner or later the algorithm will enter into an infinitely repeating loop:\\n\\n```\\n... 20, 4, 16, 37, 58, 89, 145, 42, 20, 4 ...\\n```\\n\\nGiven a positive integer `num`, implement a function that returns:\\n- If `num` is a Happy number, the string `\\\"HAPPY x\\\"` with the \\\"**x**\\\" being the number of steps necessary to reduce `num` to 1.\\n- If `num` is not a Happy number, the string `\\\"SAD x\\\"` with the \\\"**x**\\\" being the number of steps necessary to enter into the infinite loop reaching so any number in the series `4, 16, 37, 58, 89, 145, 42, 20`, plus the number of steps necessary to obtain again that number.\\n\\nLook at the examples below for a better visualization.\\n\\n### Examples\\n```\\nhappy_algorithm(139) ➞ \\\"HAPPY 5\\\"\\n\\n# Step 1: Transform 139\\n# 1² + 3² + 9² = 1 + 9 + 81 = 91\\n\\n# Step 2: Transform 91\\n# 9² + 1² = 81 + 1 = 82\\n\\n# Step 3: Transform 82\\n# 8² + 2² = 64 + 4 = 68\\n\\n# Step 4: Transform 68\\n# 6² + 8² = 36 + 64 = 100\\n\\n# Step 5: Transform 100\\n# 1² + 0² + 0² = 1 + 0 + 0 = 1\\n\\n# The algorithm stops at step 5: 139 is a Happy number\\n\\nhappy_algorithm(67) ➞ \\\"SAD 10\\\"\\n\\n# Step 1: Transform 67\\n# 6² + 7² = 36 + 49 = 85\\n\\n# Step 2: Transform 85\\n# 8² + 5² = 64 + 25 = 89\\n# It entered into the infinite loop...\\n# ...but we have to demonstrate that is a loop!\\n\\n# Step 3: Transform 89\\n# 8² + 9² = 64 + 81 = 145\\n\\n# Step 4: Transform 145: result is 42\\n# Step 5: Transform 42: result is 20\\n# Step 6: Transform 20: result is 4\\n# Step 7: Transform 4: result is 16\\n# Step 8: Transform 16: result is 37\\n# Step 9: Transform 37: result is 58\\n# Step 10: Transform 58: result is 89\\n\\n# 89 was the result of step 2: it's a loop\\n# The algorithm stops at step 10: 67 is not a Happy number\\n\\nhappy_algorithm(1) ➞ \\\"HAPPY 1\\\"\\n\\n# Step 1: Transform 1\\n# 1² = 1\\n\\n# The algorithm stops at step 1: 1 is a Happy number\\n\\nhappy_algorithm(89) ➞ \\\"SAD 8\\\"\\n\\n# Step 1: Transform 89: result is 145\\n# Step 2: Transform 145: result is 42\\n# Step 3: Transform 42: result is 20\\n# Step 4: Transform 20: result is 4\\n# Step 5: Transform 4: result is 16\\n# Step 6: Transform 16: result is 37\\n# Step 7: Transform 37: result is 58\\n# Step 8: Transform 58: result is 89\\n\\n# 89 was the original number: it's a loop\\n# The algorithm stops at step 8: 89 is not a Happy number\\n```\\n\\n### Notes\\n- The transformation of a single-digit number is, trivially, the square of the digit (see example #3).\\n- If the given number is `1`, a step is needed to establish if it's Happy (see example #3).\\n- To establish if a number is not happy, you have to find the number of steps necessary to obtain again a number already found (it can be a number obtained through a transformation as in example #2 or the same given number as in example #4).\\n- You can expect only positive integers as input, without exceptions to handle.\",\"isHidden\":false,\"lab\":\"Test.assert_equals(happy_algorithm(139), \\\"HAPPY 5\\\", \\\"Example #1\\\")\\nTest.assert_equals(happy_algorithm(67), \\\"SAD 10\\\", \\\"Example #2\\\")\\nTest.assert_equals(happy_algorithm(1), \\\"HAPPY 1\\\", \\\"Example #3\\\")\\nTest.assert_equals(happy_algorithm(44), \\\"HAPPY 4\\\")\\nTest.assert_equals(happy_algorithm(89), \\\"SAD 8\\\")\\nTest.assert_equals(happy_algorithm(10), \\\"HAPPY 1\\\")\\nTest.assert_equals(happy_algorithm(1327), \\\"SAD 17\\\")\\nTest.assert_equals(happy_algorithm(2871), \\\"SAD 17\\\")\\nTest.assert_equals(happy_algorithm(3970), \\\"HAPPY 6\\\")\\nTest.assert_equals(happy_algorithm(5209), \\\"SAD 11\\\")\\nTest.assert_equals(happy_algorithm(6329), \\\"HAPPY 3\\\")\\nTest.assert_equals(happy_algorithm(8888), \\\"SAD 12\\\")\\nTest.assert_equals(happy_algorithm(9331), \\\"HAPPY 2\\\")\\nTest.assert_equals(happy_algorithm(10000), \\\"HAPPY 1\\\")\",\"language\":\"python3\",\"summary\":\"In this challenge, you have to implement an algorithm to establish if a given positive integer num is a Happy number, and how many steps of the algorithm are needed to establish it.\\n\\nYou have to repeatedly transform the given num into the sum of its squared digits:\\nIf after the transformation the new number is equal to 1, num is a Happy number and the algorith\",\"tags\":[\"algorithms\",\"numbers\",\"loops\",\"recursion\"],\"timestamp\":{\"$date\":1580673523800},\"title\":\"The Happy Function\",\"stats\":{\"completed\":{\"total\":82,\"ratings\":[2,2,2,2,2,2,2,2,2,2,3,2,3,3,3,3,1,2,2,3,1,3,3,3,3,0,0,3,1,2,3,2,3,2,1,3,4,1,2,3,4,3,2,0,3,3,3,3,2,1,0,0,2,2,2,3,2,1,3,3,2,2,3,2,4,4,3,2],\"rators\":[\"tAF9Gf6PiGogbZuWs\",\"2fxapKr8XGdNeaKi2\",\"Jqk2uJZZxEv5wZFze\",\"s5M5RvgqR9BhB9JoC\",\"8JyqsSbN2FJXPr3cw\",\"2innwjWqxJHo4eRGh\",\"C4QntmkYtB89GNtpd\",\"PytNZK9mNiRiZxPrm\",\"gb9rvGus2Jv7bjZSs\",\"AasGs8AeX9Lcb9xJn\",\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\",\"yZvzB3qFb8pkHy4dg\",\"ZNnsMeNkdDhHjSrZb\",\"nzqwymsdwC7gxAmip\",\"55RQznnuTGpsj3EXd\",\"a777e8chPvJkY3tKa\",\"YRstQuthRkFeBiXug\",\"YLtspA8ec6ntcoMMf\",\"gJYuGdkXEWWmGRLzu\",\"v9KtC8YLbMWmXiW2H\",\"cykCKNJcqFBxz4T8s\",\"f2BoqyCpgnmjEjLqx\",\"vpLFyr4p56fPjqDCu\",\"HF28xZKSLM9wEuqNg\",\"DEDniTrstQYGounXT\",\"Ecg4m7srYGgZsb4Ck\",\"iojEnnY9FsMfYzp6f\",\"cR3ibTMxLyEdDFCHY\",\"bJxaKHJqR82EWw8Su\",\"KZ2xddpM2f9JRaryB\",\"ekQh3jzgGLsEMbKo3\",\"Pe8vWpDHRuH9nSGKW\",\"yjtdwc2AC4jA2RWtn\",\"MGWPtC4DrSL7fA5dm\",\"zZDaXBxMzTCBhNkgL\",\"qD2LrwaDrSdiybLKY\",\"xn7uGNKeAwPEkP9oA\",\"J3upzLHuEwXH7Z2hx\",\"DPi9QGLctq2y76KuE\",\"QRv96jmNaYsWkxQEG\",\"p8qqFdJ3FSk5x9z3G\",\"Yp7uvStL97cC9fKkY\",\"iS5BrkGLzJyPK7nKt\",\"mDWNyaaQ9hvPCRzSd\",\"RTDx9axf52kxhFjwZ\",\"Afnps7TJQuS9sipMb\",\"oBcs8GLX2ZFLXQy8y\",\"cAP3n5NY64uoMwzRR\",\"buX4mCQhtXCfBjeno\",\"PH32cNxBjrK4a28sn\",\"T6iBEE2jp7f7iEF2P\",\"gKnWjDjwrJh7MK2df\",\"GGdmhAvxXhqhhibJN\",\"utDMr3chbvFzGpKTC\",\"rhS8qXRjZcpDXkwnE\",\"yod5YhKtPqw2GfG9B\",\"2PufnQcsHsfymufX3\",\"eHcgvkTGsH7ZziqBo\",\"8sNv5PTHa7XQ8bNqR\",\"2t4jHPLkGiAH6YmKC\",\"uSZFmXTzzdn4B2m7W\",\"yw237iFXEK5xwgp7P\",\"Dh7eZuDtu7EMWiDj6\",\"trb5TCR89z4r5BMc2\",\"zQa2K5oqurRQxMxQp\",\"WhuuWxGHEymg4WXCm\",\"p2HEaHrPqwX5oGymi\",\"oSFc8XFEXYafu2WWF\",\"5SK47g2HRyxbs4WDR\"],\"quality\":[4,4,4,5,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":4.571428571428571,\"family\":[{\"_id\":\"KAkXmQFM4vPxnKo7P\",\"language\":\"cpp\"},{\"_id\":\"q5tAZPFbLzuERDybw\",\"language\":\"java\"},{\"_id\":\"NMCc4pcDx6d7hkvcu\",\"language\":\"javascript\"},{\"_id\":\"4hFDo2uytDJmvKMfG\",\"language\":\"python3\"},{\"_id\":\"xysoQkEHcuBCxBrZ6\",\"language\":\"ruby\"}]}}"]