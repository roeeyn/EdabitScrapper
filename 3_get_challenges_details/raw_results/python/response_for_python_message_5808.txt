a["{\"msg\":\"result\",\"id\":\"1615\",\"result\":{\"_id\":\"5EeHDHMx9WbjnnbJZ\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"def elapsed_time(sa, st):\\n\\t\",\"difficulty\":2.1142857142857143,\"familyId\":\"NbYA5qjZraoraJkoX\",\"instructions\":\"Create a function that takes a timestamp for the start time `sa` and stop time `st` in **HH:MM:SS** format and returns the measured amount of **elapsed time** between start and stop times.\\n\\n### Examples\\n```\\nelapsed_time(\\\"11:00:00\\\", \\\"12:00:00\\\") ➞ \\\"01:00:00\\\"\\n\\nelapsed_time(\\\"13:01:43\\\", \\\"21:41:57\\\") ➞ \\\"08:40:14\\\"\\n\\nelapsed_time(\\\"17:34:43\\\", \\\"17:34:42\\\") ➞ \\\"23:59:59\\\"\\n```\\n\\n### Notes\\n- All times will be provided in 24 Hrs format.\\n- Consider Elapsed time will always be less than 24 Hrs.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(elapsed_time(\\\"11:00:00\\\", \\\"12:00:00\\\"), \\\"01:00:00\\\") \\nTest.assert_equals(elapsed_time(\\\"13:01:43\\\", \\\"21:41:57\\\"), \\\"08:40:14\\\")\\nTest.assert_equals(elapsed_time(\\\"17:34:43\\\", \\\"17:34:42\\\"), \\\"23:59:59\\\") \\nTest.assert_equals(elapsed_time(\\\"15:01:27\\\", \\\"02:51:33\\\"), \\\"11:50:06\\\") \\nTest.assert_equals(elapsed_time(\\\"00:00:01\\\", \\\"17:34:42\\\"), \\\"17:34:41\\\") \\nTest.assert_equals(elapsed_time(\\\"07:59:59\\\", \\\"08:00:00\\\"), \\\"00:00:01\\\") \\nTest.assert_equals(elapsed_time(\\\"23:59:59\\\", \\\"00:00:00\\\"), \\\"00:00:01\\\") \\nTest.assert_equals(elapsed_time(\\\"15:00:00\\\", \\\"15:01:00\\\"), \\\"00:01:00\\\") \\nTest.assert_equals(elapsed_time(\\\"06:12:27\\\", \\\"10:34:13\\\"), \\\"04:21:46\\\") \\nTest.assert_equals(elapsed_time(\\\"03:22:44\\\", \\\"18:04:11\\\"), \\\"14:41:27\\\")\",\"language\":\"python3\",\"quality\":0,\"summary\":\"Create a function that takes a timestamp for the start time sa and stop time st in HH:MM:SS format and returns the measured amount of elapsed time between start and stop times.\\n\\nExamples\\nelapsed_time(\\\"11:00:00\\\", \\\"12:00:00\\\") ➞ \\\"01:00:00\\\"\\n\\nelapsed_time(\\\"13:01:43\\\", \\\"21:41:57\\\") ➞ \\\"08:40:14\\\"\\n\\nelapsed_time(\\\"17:34:43\\\", \\\"17:34:42\\\") ➞ \\\"23:59:59\\\"\\n\\nNotes\\nAll times will b\",\"tags\":[\"numbers\",\"strings\"],\"timestamp\":{\"$date\":1603585897122},\"title\":\"Calculate Elapsed Time\",\"stats\":{\"completed\":{\"total\":31,\"ratings\":[2,2,2,2,2,3,1,2,3,3,3,2,3,1,3,3,3,2,3,3,3,1,3,2,1,2,2,3,2,0,0,0,2,2,3],\"quality\":[],\"rators\":[\"xn7uGNKeAwPEkP9oA\",\"s5M5RvgqR9BhB9JoC\",\"tAF9Gf6PiGogbZuWs\",\"8PwfYqoDQFThzNtvf\",\"J3upzLHuEwXH7Z2hx\",\"HF28xZKSLM9wEuqNg\",\"8JyqsSbN2FJXPr3cw\",\"iS5BrkGLzJyPK7nKt\",\"aEm3Wvj2rFYRL8Lrb\",\"DPi9QGLctq2y76KuE\",\"gJYuGdkXEWWmGRLzu\",\"Yp7uvStL97cC9fKkY\",\"gXTAie79kiw28tx5u\",\"QRv96jmNaYsWkxQEG\",\"p8qqFdJ3FSk5x9z3G\",\"2PufnQcsHsfymufX3\",\"8sNv5PTHa7XQ8bNqR\",\"iojEnnY9FsMfYzp6f\",\"7gGWPJdFX7xFv9NYv\",\"yjtdwc2AC4jA2RWtn\",\"Cc2Cgj4MWXZxsTooC\",\"oBcs8GLX2ZFLXQy8y\",\"AasGs8AeX9Lcb9xJn\",\"qD2LrwaDrSdiybLKY\",\"HqmxnQJM66Y57twhn\",\"GGdmhAvxXhqhhibJN\",\"gKnWjDjwrJh7MK2df\",\"o4ixjQGSaYqA2JoM4\",\"yod5YhKtPqw2GfG9B\",\"Ds7L5bksw2QRHjrKL\"]},\"flags\":0},\"family\":[{\"_id\":\"GDRaujTACyHZnnrPk\",\"language\":\"cpp\"},{\"_id\":\"d9u29SPX4qWnyvnEF\",\"language\":\"javascript\"},{\"_id\":\"5EeHDHMx9WbjnnbJZ\",\"language\":\"python3\"},{\"_id\":\"s2QAKiHP6Mdhq3ZiP\",\"language\":\"ruby\"}]}}"]