a["{\"msg\":\"result\",\"id\":\"1072\",\"result\":{\"_id\":\"8NyNftbNXd6CZCDXf\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def get_coin_balances(lst1, lst2):\\n\\t\",\"difficulty\":1.5593220338983051,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"Wko2QX35PzCZasRnB\",\"instructions\":\"Let's say that there exists a machine that gives out free coins, but with a twist!\\n\\nSeparating two people is a wall, and this machine is placed in such a way that both people are able to access it. Spending a coin in this machine will give the person on the other side **3 coins** and vice versa.\\n\\nIf both people continually spend coins for each other (SHARING), then they'll both gain a net profit of **2 coins per turn.** However, there is always the possibility for someone to act selfishly (STEALING): they spend no coins, yet they still receive the generous **3 coin** gift from the other person!\\n\\n*Here's an example of Red taking advantage of Green!*\\n![Red chose to betray](https://edabit-challenges.s3.amazonaws.com/JNBHVgvHBnjhbhvvHB.png)\\n\\n### The Challenge\\nAssuming that both people **start with 3 coins each**, create a function that calculates both people's final number of coins. You will be given two lists of strings, with each string being the words `'share'` or `'steal'`.\\n\\n### Examples\\n```\\nget_coin_balances([\\\"share\\\"], [\\\"share\\\"]) ➞ [5, 5]\\n# Both people spend one coin, and receive 3 coins each.\\n\\nget_coin_balances([\\\"steal\\\"], [\\\"share\\\"]) ➞ [6, 2]\\n# Person 1 gains 3 coins, while person 2 loses a coin.\\n\\nget_coin_balances([\\\"steal\\\"], [\\\"steal\\\"]) ➞ [3, 3]\\n# Neither person spends any coins and so no one gets rewarded.\\n\\nget_coin_balances([\\\"share\\\", \\\"share\\\", \\\"share\\\"], [\\\"steal\\\", \\\"share\\\", \\\"steal\\\"]) ➞ [3, 11]\\n```\\n\\n### Notes\\n- No tests will include a negative number of coins.\\n- All words will be given in lowercase.\\n- This challenge is adapted from a famous game theory example called the **Prisoner's Dilemma**, which you can learn more about in the **Resources** tab.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(get_coin_balances(['share'], ['share']), [5, 5])\\nTest.assert_equals(get_coin_balances(['steal'], ['share']), [6, 2])\\nTest.assert_equals(get_coin_balances(['share'], ['steal']), [2, 6])\\nTest.assert_equals(get_coin_balances(['steal'], ['steal']), [3, 3])\\n\\nTest.assert_equals(get_coin_balances(['share', 'share', 'share'], ['steal', 'share', 'steal']), [3, 11])\\nTest.assert_equals(get_coin_balances(['share', 'share', 'steal', 'share'], ['steal', 'steal', 'steal', 'steal']), [0, 12])\\nTest.assert_equals(get_coin_balances(['steal', 'steal', 'steal'], ['share', 'share', 'share']), [12, 0])\\nTest.assert_equals(get_coin_balances(['share', 'share'], ['share', 'share']), [7, 7])\\nTest.assert_equals(get_coin_balances(['share', 'steal', 'steal', 'steal'], ['share', 'share', 'steal', 'share']), [11, 3])\\nTest.assert_equals(get_coin_balances(['share', 'share', 'steal', 'share'], ['steal', 'share', 'steal', 'steal']), [3, 11])\\nTest.assert_equals(get_coin_balances(['steal', 'steal', 'steal', 'steal'], ['steal', 'steal', 'steal', 'steal']), [3, 3])\\nTest.assert_equals(get_coin_balances(['steal', 'share', 'steal', 'steal'], ['share', 'share', 'steal', 'steal']), [8, 4])\\nTest.assert_equals(get_coin_balances(['steal', 'steal'], ['share', 'share']), [9, 1])\\nTest.assert_equals(get_coin_balances(['steal', 'share'], ['share', 'steal']), [5, 5])\",\"language\":\"python3\",\"quality\":4.714285714285714,\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,3,3,3,2,2,0,0,0,2,2,3,3,1,0,1,1,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,2,1,0,2,1,2,1,0,2,1,1,2,0,2,1,2,1,1,2,1,1,2],\"quality\":[5,5,3,5,5,5,5,5,5,5,5,3,5,5],\"rators\":[\"PXAcsKkssS2yLyDv2\",\"8PwfYqoDQFThzNtvf\",\"buX4mCQhtXCfBjeno\",\"iS5BrkGLzJyPK7nKt\",\"a777e8chPvJkY3tKa\",\"gXTAie79kiw28tx5u\",\"T6iBEE2jp7f7iEF2P\",\"cAP3n5NY64uoMwzRR\",\"FEYpu9RWysAgW3XnP\",\"fznzd3qnvtbFkkizz\",\"2PufnQcsHsfymufX3\",\"xn7uGNKeAwPEkP9oA\",\"s5M5RvgqR9BhB9JoC\",\"oBcs8GLX2ZFLXQy8y\",\"2QGRoQn2dRq3scu7k\",\"3LiSLdtN58n46NEqg\",\"iaKGLhDb7sGYGZivM\",\"p8qqFdJ3FSk5x9z3G\",\"YcCLwitFMAEJSnxAW\",\"Yp7uvStL97cC9fKkY\",\"GGdmhAvxXhqhhibJN\",\"zd9FLSzsGz3evKafy\",\"gJYuGdkXEWWmGRLzu\",\"8JyqsSbN2FJXPr3cw\",\"qAby4AWXmTNeusvg3\",\"iojEnnY9FsMfYzp6f\",\"cR3ibTMxLyEdDFCHY\",\"KJCDwGkoXh8qtbbKr\",\"J3upzLHuEwXH7Z2hx\",\"Ds7L5bksw2QRHjrKL\",\"QRv96jmNaYsWkxQEG\",\"gb9rvGus2Jv7bjZSs\",\"yjtdwc2AC4jA2RWtn\",\"bvmTE46bfcM4ogj34\",\"JhX7jvtpwNyxcc39m\",\"AQSqD9oNv2uPfxZCR\",\"tpzczqAZJXhLWrmNN\",\"AFfw7cGg83uYk2Miy\",\"AJexRBN9cYQmqvYu6\",\"J5T8gZqiZXFuFDTQ7\",\"CHvzhtXnv8HTbPQ56\",\"DEDniTrstQYGounXT\",\"5HCu9Ydd86QgHDRNP\",\"AasGs8AeX9Lcb9xJn\",\"eHcgvkTGsH7ZziqBo\",\"LQxof8pGabGuWP7Gn\",\"qD2LrwaDrSdiybLKY\",\"HqmxnQJM66Y57twhn\",\"qzXAMXsHZGT8o5hTA\",\"tAF9Gf6PiGogbZuWs\",\"aEm3Wvj2rFYRL8Lrb\",\"DPi9QGLctq2y76KuE\",\"sHjfbGQGLHE6JR6qu\",\"Jqk2uJZZxEv5wZFze\",\"mvJBakQ35CWAnbbEZ\",\"8BFSTCnoe2QggN64c\",\"BrTDhPJcACL2bsrpJ\",\"yod5YhKtPqw2GfG9B\",\"dzS6WBTMHyFEag6Fp\",\"AMpQSjKsRqhCDyS2j\",\"sBoNkD5c6zGSZNbqL\",\"4TmgHkn5vqyHK3sYC\",\"3nied3n8KG8RSNixH\",\"pduNK68oazqQTtbLp\",\"9pzFiFK3ANLjQfnr2\",\"66a9xX73nmTEuKs9k\",\"Wi4H6ayKsNDWWQCG5\",\"X4rzfxGgxx6CS7Bpz\"],\"total\":72},\"flags\":0},\"summary\":\"Let's say that there exists a machine that gives out free coins, but with a twist!\\n\\nSeparating two people is a wall, and this machine is placed in such a way that both people are able to access it. Spending a coin in this machine will give the person on the other side 3 coins and vice versa.\\n\\nIf both people continually spend coins for each other (SHARING), the\",\"tags\":[\"loops\",\"algorithms\",\"interview\",\"language_fundamentals\"],\"timestamp\":{\"$date\":1612903497943},\"title\":\"Coin Co-Operation\",\"family\":[{\"_id\":\"9M4efRd2ZTW9RGFpj\",\"language\":\"cpp\"},{\"_id\":\"WmGeYLJbud69ezCew\",\"language\":\"java\"},{\"_id\":\"PuGi7j9rm5nHBX8Ec\",\"language\":\"javascript\"},{\"_id\":\"F7DBaK85jKLDMiugA\",\"language\":\"php\"},{\"_id\":\"8NyNftbNXd6CZCDXf\",\"language\":\"python3\"},{\"_id\":\"QqFBTz4i7YxWjszXx\",\"language\":\"ruby\"}]}}"]