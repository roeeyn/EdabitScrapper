a["{\"msg\":\"result\",\"id\":\"2114\",\"result\":{\"_id\":\"L24crt5ZA3rdjcmxv\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"months = { \\\"1\\\": \\\"A\\\", \\\"2\\\": \\\"B\\\", \\\"3\\\": \\\"C\\\", \\\"4\\\": \\\"D\\\", \\\"5\\\": \\\"E\\\", \\\"6\\\": \\\"H\\\",\\n\\\"7\\\": \\\"L\\\", \\\"8\\\": \\\"M\\\", \\\"9\\\": \\\"P\\\", \\\"10\\\": \\\"R\\\", \\\"11\\\": \\\"S\\\", \\\"12\\\": \\\"T\\\" }\\n\\ndef fiscal_code(person):\\n\\t\",\"difficulty\":2.9741379310344827,\"familyId\":\"Ds84ovYLFsJ4JH2Xf\",\"instructions\":\"Each person in Italy has an unique identifying ID code issued by the national tax office after the birth registration: the Fiscal Code (_Codice Fiscale_). Check the **Resources** tab for more info on this.\\n\\nGiven a dictionary containing the personal data of a person (name, surname, gender and date of birth) return the 11 code characters as a string following these steps:\\n\\n- Generate 3 capital letters from the **surname**, if it has:\\n  - At least 3 consonants then the first three consonants are used. (_Newman -> NWM_).\\n  - Less than 3 consonants then vowels will replace missing characters in the same order they appear (_Fox -> FXO | Hope -> HPO_).\\n  - Less than three letters then \\\"X\\\" will take the third slot after the consonant and the vowel (_Yu -> YUX_).\\n\\n- Generate 3 capital letters from the **name**, if it has:\\n  - Exactly 3 consonants then consonants are used in the order they appear (_Matt -> MTT_).\\n  - More than 3 consonants then first, third and fourth consonant are used (_Samantha -> SNT | Thomas -> TMS_).\\n  - Less than 3 consonants then vowels will replace missing characters in the same order they appear (_Bob -> BBO | Paula -> PLA_).\\n  - Less than three letters then \\\"X\\\" will take the the third slot after the consonant and the vowel (_Al -> LAX_).\\n\\n- Generate 2 numbers, 1 letter and 2 numbers from **date of birth** and **gender**:\\n  - Take the last two digits of the year of birth (_1985 -> 85_).\\n  - Generate a letter corresponding to the month of birth (_January -> A | December -> T_) using the table for conversion included in the code.\\n  - For males take the day of birth adding one zero at the start if is less than 10 (_any 9th day -> 09 | any 20th day -> 20_).\\n  - For females take the day of birth and sum 40 to it (_any 9th day -> 49 | any 20th day -> 60_).\\n\\n### Examples\\n```\\nfiscal_code({\\n  \\\"name\\\": \\\"Matt\\\",\\n  \\\"surname\\\": \\\"Edabit\\\",\\n  \\\"gender\\\": \\\"M\\\",\\n  \\\"dob\\\": \\\"1/1/1900\\\"\\n}) ➞ \\\"DBTMTT00A01\\\"\\n\\nfiscal_code({ \\n  \\\"name\\\": \\\"Helen\\\",\\n  \\\"surname\\\": \\\"Yu\\\",\\n  \\\"gender\\\": \\\"F\\\",\\n  \\\"dob\\\": \\\"1/12/1950\\\"\\n}) ➞ \\\"YUXHLN50T41\\\"\\n\\nfiscal_code({\\n  \\\"name\\\": \\\"Mickey\\\",\\n  \\\"surname\\\": \\\"Mouse\\\",\\n  \\\"gender\\\": \\\"M\\\",\\n  \\\"dob\\\": \\\"16/1/1928\\\"\\n}) ➞ \\\"MSOMKY28A16\\\"\\n```\\n\\n### Notes\\n- Code letters must be uppercase.\\n- Date of birth is given in D/M/YYYY format.\\n- The conversion table for months is already in the starting code.\\n- Y is not a vowel.\",\"lab\":\"Test.assert_equals(fiscal_code({ \\\"name\\\": \\\"Brendan\\\", \\\"surname\\\": \\\"Eich\\\", \\\"gender\\\": \\\"M\\\", \\\"dob\\\": \\\"1/12/1961\\\"}), \\\"CHEBND61T01\\\")\\nTest.assert_equals(fiscal_code({ \\\"name\\\": \\\"Helen\\\", \\\"surname\\\": \\\"Yu\\\", \\\"gender\\\": \\\"F\\\", \\\"dob\\\": \\\"1/12/1950\\\"}), \\\"YUXHLN50T41\\\")\\nTest.assert_equals(fiscal_code({ \\\"name\\\": \\\"Al\\\", \\\"surname\\\": \\\"Capone\\\", \\\"gender\\\": \\\"M\\\", \\\"dob\\\": \\\"17/1/1899\\\"}), \\\"CPNLAX99A17\\\")\\nTest.assert_equals(fiscal_code({ \\\"name\\\": \\\"Mickey\\\", \\\"surname\\\": \\\"Mouse\\\", \\\"gender\\\": \\\"M\\\", \\\"dob\\\": \\\"16/1/1928\\\"}), \\\"MSOMKY28A16\\\")\\nTest.assert_equals(fiscal_code({ \\\"name\\\": \\\"Marie\\\", \\\"surname\\\": \\\"Curie\\\", \\\"gender\\\": \\\"F\\\", \\\"dob\\\": \\\"7/11/1867\\\"}), \\\"CRUMRA67S47\\\")\",\"language\":\"python3\",\"summary\":\"Each person in Italy has an unique identifying ID code issued by the national tax office after the birth registration: the Fiscal Code (Codice Fiscale). Check the Resources tab for more info on this.\\n\\nGiven a dictionary containing the personal data of a person (name, surname, gender and date of birth) return the 11 code characters as a string following these s\",\"tags\":[\"strings\",\"algorithms\",\"formatting\",\"objects\"],\"timestamp\":{\"$date\":1569531998811},\"title\":\"The Fiscal Code\",\"stats\":{\"completed\":{\"total\":160,\"ratings\":[3,3,3,3,3,2,3,2,4,3,3,1,4,5,5,2,4,1,3,5,4,1,2,4,0,3,4,1,2,3,3,2,2,4,4,4,4,2,3,3,2,5,4,5,2,3,2,2,4,4,1,3,3,5,5,4,5,5,5,1,5,5,0,2,2,5,3,3,5,5,3,5,0,1,3,5,5,3,5,0,0,2,5,2,4,5,2,5,4,0,1,2,1,0,0,0,3,2,3,5,2,2,2,3,1,4,4,5,2,5,4,1,4,2,2,4],\"rators\":[\"gb9rvGus2Jv7bjZSs\",\"tAF9Gf6PiGogbZuWs\",\"AYaEkTWLMmfzpwejr\",\"3ifAHQzsMasfQySoL\",\"8JyqsSbN2FJXPr3cw\",\"PuJDHtAaX6vXeJJTC\",\"s5M5RvgqR9BhB9JoC\",\"HqmxnQJM66Y57twhn\",\"FgkYtHLxeD8pETJ8T\",\"DryNRN98Dj24BpgrL\",\"YuqRybodQemYZ3udH\",\"aCNWav8S8Try9RkC6\",\"dNBGNMKLZam4bvHuZ\",\"eHcgvkTGsH7ZziqBo\",\"8PwfYqoDQFThzNtvf\",\"a8xrM6PdmSsE8AErM\",\"nYSebjpPsiBXiho7y\",\"Fki4LenXE4ocaumd5\",\"Kg94pDSdZJ2wSkMcY\",\"AbrJ8hMyv5fFXG6DN\",\"rEWQdNHK6YjuBqmrR\",\"7BvK9WWXi9Arqh63Q\",\"Jqk2uJZZxEv5wZFze\",\"4xwButZn34q92d9Yn\",\"vhoXR5bEdAaucGtfw\",\"aAFKLxcnBD2ZrdDnJ\",\"aEm3Wvj2rFYRL8Lrb\",\"AasGs8AeX9Lcb9xJn\",\"fznzd3qnvtbFkkizz\",\"mDWNyaaQ9hvPCRzSd\",\"PytNZK9mNiRiZxPrm\",\"B4jPYeyvixcfEZknA\",\"ZNnsMeNkdDhHjSrZb\",\"9MSsMC5o2EfQabLkg\",\"YLtspA8ec6ntcoMMf\",\"7wYk9uixaQGgiJLTn\",\"YNs8yXoMwZqRJuBg3\",\"Z4M3NAa4TXquMNkHe\",\"qfBAT8Sb7agxigGn5\",\"x2AThkdrQ5do9eE9M\",\"tChLPLw8XeSqHQqQp\",\"4fhjJBvLBWh6QeSih\",\"nFbmNzMQ38TncmfQX\",\"xn7uGNKeAwPEkP9oA\",\"Cy7NWunXL4DeG6gso\",\"974cv448kw6Wu2JF6\",\"gJYuGdkXEWWmGRLzu\",\"a777e8chPvJkY3tKa\",\"q8EzytB3BxnWhc87v\",\"HmPy2TME2MDMatkqF\",\"DNACg4rcgZsPtYGZ8\",\"6F3Y6ZBAGNDGGTt9B\",\"NtQgpwy9RHfKvMHKG\",\"LhLMDsjjsP9juPFuw\",\"JvtckywAquTG4TeqG\",\"vtCRvSGbisHDqs585\",\"5dHucvf2qBYyKim7X\",\"J23RcmzbdtBbPCTjT\",\"j8FR2cHxpsYtNo9Dw\",\"9qdwnisj554famEPb\",\"d8qtzoLB264iP8tdY\",\"xjwYSw7ABvAWhTXWo\",\"kkYFRyACQ75GvQp94\",\"9AzxAeaR5xWAoqYxB\",\"3RLsmdeFmzqFEkgn9\",\"TbLmz2B9us2faWfeP\",\"oZiGwL535nJ5ZMJr7\",\"pXZb7k3oc567CbC3F\",\"Fb2wehA7QgTFWry2x\",\"SGhPxX5bHGL8zZqtt\",\"hZW6j5s6RHpx35phy\",\"SfN48TwtmPJ6C2NjS\",\"3MybBtCNPcFHLMYmJ\",\"c2u7qfdaYxcyuydtu\",\"R4SjTgDnpigJYDLyL\",\"JtL9JDoDMw6A7NzMb\",\"QXR2qGcvrK5Xkxdea\",\"EH68sDGGufTc5vifi\",\"eyog4zCdBuks2PaYK\",\"7M5ceSTyefL2S2xHY\",\"3bH5s2P4iYCRHb5Sk\",\"9i6KoESyhnwmZGjWC\",\"tGkHoSmX8oHmmpdf5\",\"kYwWgJMTN9j6cxJaf\",\"g6rd7oTEdiFxHQ6on\",\"BRXiuhWLN3YSbSdvh\",\"h4x2jaMdj5aQZbW5g\",\"5hhuYLyGkeqCvaSrf\",\"eEdkrMmDQKCTonTBG\",\"uMxob526prFuTTNve\",\"mePSe5o7qpkYirqxx\",\"afGhZGqYxdcoNr8RQ\",\"MWpCwuKjhfZMKxQte\",\"dkpp45brwPQsYXoun\",\"yCm5QFNKRyZfJbr3G\",\"yNZ3D8daLAMdF4E2o\",\"fBYjEbJ9Y93hbRugG\",\"JtrbeZbmHppqvASEf\",\"aaotFPYKJpeDdBmK5\",\"6C6HPZZHwaHhxDXPa\",\"xumt4h8jvh7o4xkhr\",\"6viSsDHE35PwDQZT3\",\"hy2sfJ3jfnR4WaduT\",\"yLS55vSaoGh7EE82L\",\"fjo64MWRERriEhtqc\",\"CtKaPhQmtex9wnWcd\",\"jc78FCWR67g8GmSD6\",\"8KNtgAcNpyT2f6bTT\",\"B3kmFXcgPZMm2pTvr\",\"bFpdBMnaPizHaeeYG\",\"zd9FLSzsGz3evKafy\",\"amfj3y4oZMprJ96fg\",\"T63gcy2WbkwsvEyRB\",\"c4DsFkzDj9CptDgDj\",\"KktidZuhzfEBK2bdm\",\"iBPtFyzzY83pAFACa\",\"syYx2CZhdo5kPZiSW\",\"SbGLSZ5piLATC8bop\",\"5rX3qPFdvRQ9G7xZQ\",\"7mqLZqiA5o7q96DJL\",\"ExkaEKHD4F8CvFG2W\",\"83estQegwgR4TXKk6\",\"HF28xZKSLM9wEuqNg\",\"auoQ4Aq8m7ACQebeF\",\"8sNv5PTHa7XQ8bNqR\",\"ZT2Y9S5hyNd9M2KGW\",\"GbDnveoLWcFmpiXXz\",\"CGJQnFX5x4WeRnjPm\",\"rCx9Ga9rWT35YbZWB\",\"J3upzLHuEwXH7Z2hx\",\"KXyGFAhv8ytv2Ejse\",\"bY3AtfNfWpC2peHjS\",\"yjtdwc2AC4jA2RWtn\",\"K9ncwb6W27Ldj4yQ7\",\"AW23i7PiTgQ9tXkku\",\"66Hzqjdmzou2uczij\",\"GTKsdeEihE636Le9i\",\"nPRSY8LhCsKYoxPJ9\",\"FDJkr4bni4kPhL9Hs\",\"iS5BrkGLzJyPK7nKt\",\"RAXRr4ceFEP2RSkiQ\",\"tmTAbizpJLnZDZ5JJ\",\"d9vyukL4SPP9SAYrJ\",\"nWbwmuxSsM4WdHLHx\",\"R6E6WjtD92Sc3agJa\",\"2PufnQcsHsfymufX3\",\"yTtSCvGPyYna6JuRC\",\"5JyY5eDxizCH7TYT7\",\"DPi9QGLctq2y76KuE\"],\"quality\":[5,5,5,5,4,4,5,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,4,5,5,5,4,5,5,4,5,5,5,5,5,5,3,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.7631578947368425,\"family\":[{\"_id\":\"FToTLuiB7bmFngkjr\",\"language\":\"java\"},{\"_id\":\"Pa2rHJ6KeRBTF28Pg\",\"language\":\"javascript\"},{\"_id\":\"L24crt5ZA3rdjcmxv\",\"language\":\"python3\"},{\"_id\":\"gqpKQMdhNh7YEAxRw\",\"language\":\"ruby\"}]}}"]