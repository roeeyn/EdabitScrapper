a["{\"msg\":\"result\",\"id\":\"2241\",\"result\":{\"_id\":\"66xK46dhKFCe5REDg\",\"author\":\"poinsettiarain\",\"authorId\":\"HqmxnQJM66Y57twhn\",\"code\":\"def x_and_o(board):\\n\\t\",\"difficulty\":3.5,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"f6S9CM6ujecMiQBJr\",\"instructions\":\"Given a list containing three strings, representing the rows of an O's and X's board from top to bottom, return the row and column position of the winning move for X's. Return `False` if the game cannot be won.\\n\\n### Examples\\n```\\nx_and_o(board = [\\\" | | \\\", \\\" |X| \\\", \\\"X| | \\\"]) ➞  [1, 3]\\n\\n# Board becomes:\\n#    |   |\\n#    |X |\\n# X |   |\\n\\nx_and_o(board = [\\\"X|X|O\\\", \\\"O|X| \\\", \\\"X|O| \\\"]) ➞ [3, 3]\\n\\n# Board becomes:\\n# X|X|O\\n# O|X|\\n# X|O|\\n```\\n\\n### Notes\\nThere is no 0 index for the row or column.\",\"isHidden\":false,\"lab\":\"Test.assert_equals(x_and_o(board = [\\n\\t\\\" | | \\\", \\n\\t\\\" |X| \\\", \\n\\t\\\"X| | \\\"\\n]), [1,3])\\n\\n\\nTest.assert_equals(x_and_o(board = [\\n\\t\\\"X|X|O\\\", \\n\\t\\\"O|X| \\\", \\n\\t\\\"X|O| \\\"\\n]), [3,3])\\n\\n\\nTest.assert_equals(x_and_o(board = [\\n\\t\\\"X|X|O\\\", \\n\\t\\\"O|O| \\\", \\n\\t\\\"X|O| \\\"\\n]), False)\\n\\n\\nTest.assert_equals(x_and_o(board = [\\n\\t\\\"X|X| \\\", \\n\\t\\\"O|O| \\\", \\n\\t\\\"X|O| \\\"\\n]), [1,3])\\n\\n\\nTest.assert_equals(x_and_o(board = [\\n\\t\\\"X| | \\\", \\n\\t\\\"O|O| \\\", \\n\\t\\\"X|O|X\\\"\\n]), False)\\n\\n\\nTest.assert_equals(x_and_o(board = [\\n\\t\\\"X|X|O\\\", \\n\\t\\\" |O| \\\", \\n\\t\\\"X|O| \\\"\\n]), [2,1])\\n\\n\\nTest.assert_equals(x_and_o(board = [\\n\\t\\\" | |X\\\", \\n\\t\\\"O| | \\\", \\n\\t\\\"X|O| \\\"\\n]), [2,2])\\n\\n\\nTest.assert_equals(x_and_o(board = [\\n\\t\\\" | |X\\\", \\n\\t\\\"O|X| \\\", \\n\\t\\\" |O| \\\"\\n]), [3,1])\\n\\n\\nTest.assert_equals(x_and_o(board = [\\n\\t\\\" | |X\\\", \\n\\t\\\"O|O| \\\", \\n\\t\\\"X|O|X\\\"\\n]), [2,3])\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,3,3,3,3,3,3,5,4,5,5,5,3,0,5,3,3,3,5,3,5,3,4,4,4,2,5,4,4,0,4,2,3,5,2,3,4,5,5,2,5,0,4,4,5,5],\"rators\":[\"HqmxnQJM66Y57twhn\",\"3GhZpJLhhrm6AR3aM\",\"qJZsi5rhRnWA38FbA\",\"Q8mpPYfwDNuzfjK6y\",\"RxjsoBmCqZgg5Fq5a\",\"tAF9Gf6PiGogbZuWs\",\"8PwfYqoDQFThzNtvf\",\"DwetpbChQM4r6Gwah\",\"fMR9RcfgPJWiLgx7k\",\"X4iqEdg7dPjFpoASw\",\"iMHrN3Wiefh9Ame38\",\"GiK8LZt3JRKNJjj5W\",\"gb9rvGus2Jv7bjZSs\",\"s5M5RvgqR9BhB9JoC\",\"SGhPxX5bHGL8zZqtt\",\"CByQtwf9BqB8jfEC3\",\"aEm3Wvj2rFYRL8Lrb\",\"9uZpgAtSuPZ7W7DL6\",\"vKNfYTFHEW7JQsRTA\",\"AasGs8AeX9Lcb9xJn\",\"8JyqsSbN2FJXPr3cw\",\"vTfyrr4pGddp8rbXc\",\"fznzd3qnvtbFkkizz\",\"Wv2vJnEj8ywNmARoF\",\"W5TajitmCyxz87zAC\",\"Lfut9z3euZ3odxFcH\",\"ss5MEqKMTn6CDg54y\",\"mDWNyaaQ9hvPCRzSd\",\"bJaPCBx63YxdJAuTS\",\"Ecg4m7srYGgZsb4Ck\",\"4fhjJBvLBWh6QeSih\",\"xn7uGNKeAwPEkP9oA\",\"S6Zd8mPuvhuh3MFRt\",\"bfLuiMnnLPMGk3y8m\",\"iS5BrkGLzJyPK7nKt\",\"58M252WF7SPRinfBx\",\"b3Dk2LqoEgripS3Y3\",\"X7dDyoPvRD5tzDPwP\",\"8sNv5PTHa7XQ8bNqR\",\"eHcgvkTGsH7ZziqBo\",\"yjtdwc2AC4jA2RWtn\",\"J3upzLHuEwXH7Z2hx\",\"gJYuGdkXEWWmGRLzu\",\"T6iBEE2jp7f7iEF2P\",\"2PufnQcsHsfymufX3\",\"DPi9QGLctq2y76KuE\",\"5xcPnT7ttWbvRPN6t\",\"suArq5BbSy7gD6xri\"],\"total\":52,\"quality\":[5,4,5,5,5,4,5]},\"flags\":0},\"summary\":\"Given a list containing three strings, representing the rows of an O's and X's board from top to bottom, return the row and column position of the winning move for X's. Return False if the game cannot be won.\\n\\nExamples\\nxando(board = [\\\" | | \\\", \\\" |X| \\\", \\\"X| | \\\"]) ➞  [1, 3]\\n\\nBoard becomes:\\n|   |\\n|X |\\nX |   |\\n\\nxando(board = [\\\"X|X|O\\\", \\\"O|X| \\\", \\\"X|O| \\\"]) ➞ [3, 3]\\n\\nB\",\"tags\":[\"games\",\"arrays\"],\"timestamp\":{\"$date\":1573228848095},\"title\":\"O's and X's\",\"quality\":4.714285714285714,\"family\":[{\"_id\":\"buN4KeJfrACFB6DSX\",\"language\":\"cpp\"},{\"_id\":\"S6syDE5cK8q3Xe4pR\",\"language\":\"javascript\"},{\"_id\":\"66xK46dhKFCe5REDg\",\"language\":\"python3\"},{\"_id\":\"wap4bCtvC8gEewsdr\",\"language\":\"ruby\"}]}}"]