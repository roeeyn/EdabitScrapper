a["{\"msg\":\"result\",\"id\":\"2329\",\"result\":{\"_id\":\"JZfyYujftavv6APLs\",\"author\":\"joegal\",\"authorId\":\"fznzd3qnvtbFkkizz\",\"code\":\"class Fraction:\\n\\t\",\"difficulty\":3.769230769230769,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"Fyoxbqe9iEe5dmzdN\",\"instructions\":\"Mathematically, a fraction can be defined as the ratio a/b, where a and b are integers and b is non zero.\\n\\nIn this challenge, we are going to implement a Fraction class and some methods to support arithmetic and comparison operations on them. Write a Fraction class that meets the following requirements:\\n\\n- **Initialisation:** Create a Fraction object with a as numerator and _b_ as denominator, e.g. `Fraction(5, 6)` where _a_ = 5 and _b_ = 6. Validate that _a_ and _b_ are both integers and _b_ is non-zero. If not, print the error message shown below and do not create any variables. The numerator and denominator should also be stored in factorized form, e.g. 4/6 should be stored as 2/3.\\n\\n- **Representation:** It should be possible to print a Fraction or obtain a string representation of it via the `str` built-in function. For a positive fraction, this should return the string \\\"x/y\\\" e.g.  \\\"5/4\\\". If the fraction is negative, return \\\"- x/y\\\" e.g. \\\"- 5/9\\\" (note the space after the `-` sign). If the fraction has failed to initialize, detect this (it shouldn't have any instance variables) and return the string \\\"Initialisation Failed\\\".\\n\\n- **Arithmetic Operations:** Implement suitable methods to support `+`, `-`, `*`, and `/` operations between two fractions with the usual arithmetic meaning. Return the appropriate factorised Fraction e.g `Fraction(2, 3) * Fraction(2, 5)` should return `Fraction(4, 15)`. A division operation could result in a zero denominator and this should be catered for by printing the error message described in the initialization section and returning `None`. If the result of an operation is a negative fraction, return the numerator as the negative integer.\\n\\n- **Comparison Operations:** Implement suitable methods to compare two Fraction objects using operators `==`,` !=`, `<`, `>`, `<=` and `>=` with the usual meanings. For `==`, apply a tolerance factor of _10^-7_.\\n\\n- **Instance Method:** Implement instance method decimal. This should return the decimal equivalent of the Fraction object to up to seven decimal places e.g. `Fraction(1/4).decimal()` -> 0.25.\\n\\n- **Class Method:** Implement class method fraction(decimal) which returns a Fraction object equivalent to decimal to up to seven decimal places e.g. `Fraction.fraction(2.5)` -> `Fraction(5, 2)`. If the parameter decimal is an integer, set the denominator in Fraction to 1.\\n\\n### Examples\\n```\\nstr(Fraction(2, -3)) ➞ \\\"\\\"- 2/3\\\"\\n\\nstr(Fraction(3, 0)) ➞ \\\"Initialisation Failed\\\"\\n# Should print \\\"numerator must be an integer and denominator a non zero integer\\\".\\n\\nFraction(1, 5) + Fraction(3, 10) ➞ Fraction(1, 2)\\n\\nFraction(5, 2) * Fraction(6, -10) ➞ Fraction(-3, 2)\\n\\nFraction(0, 3) / Fraction(0, 5) ➞ None\\n# Should print \\\"numerator must be an integer and denominator a non zero integer\\\".\\n\\nFraction(-4, 5) > Fraction(-3, 5) ➞ False\\n\\nFraction(10, 9) < Fraction(2, 1) ➞ True\\n\\nFraction.fraction(11) ➞ Fraction(11, 1)\\n\\nFraction(5, 9).decimal() ➞ 0.5555556\\n```\\n### Notes\\n\\nYou will need to use a technique called operator overloading to successfully complete this challenge. This requires the use of what are termed _magic_ or _dunder_ methods in Python (**Resources** have a useful link for these). If you need to brush up on arithmetic with fractions, there's a link for that too.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"a = Fraction(-1,2); b = Fraction(3,6); c = Fraction(1,4)\\n\\ntests = [\\n('a + a', 'Fraction(-1,1)'),\\n('str(Fraction(1,2))', \\\"'1/2'\\\"),\\n('str(Fraction(2,0))', \\\"'Initialisation Failed'\\\"),\\n('a - b - c', 'Fraction(-5,4)'),\\n('Fraction(-2,6) - Fraction(1,3)', 'Fraction(-2,3)'),\\n('Fraction(-2,3) * Fraction(3,4)', 'Fraction(-1,2)'),\\n('Fraction(-2,3) / Fraction(8,6)', 'Fraction(-1,2)'),\\n('Fraction(-2,-3) + Fraction(-8,-4)', 'Fraction(8,3)'),\\n('Fraction(9,5) * Fraction(10,18)', 'Fraction(1,1)'),\\n('Fraction(0,2) / Fraction(0,2)', 'None'),\\n('Fraction.fraction(2.0)', 'Fraction(2,1)'),\\n('Fraction.fraction(2.9145)', 'Fraction(5829,2000)'),\\n('c.decimal()', '0.25'), \\n('Fraction(5,9).decimal()', '0.5555556'),\\n('Fraction(22,7).decimal()', '3.1428571'),\\n('Fraction(1,3) ==  Fraction(2,6)', 'True'),\\n('Fraction(1,3) != Fraction(-2,6)', 'True'),\\n('Fraction(-4,5) > Fraction(-3,5)', 'False'),\\n('Fraction(-3,5) < Fraction(-4,5)', 'False'),\\n('Fraction(-4,5) <= Fraction(-3,5)', 'True'),\\n('Fraction(-3,5) >= Fraction(-4,5)', 'True'),\\n('str(Fraction(3,-7))', \\\"'- 3/7'\\\"),\\n('str(Fraction(-5,-9))', \\\"'5/9'\\\")\\n]\\n\\nfor test in tests:\\n    Test.assert_equals(eval(test[0]), eval(test[1]))\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[4,4,4,4,4,4,4,5,5,4,3,2,0,5,4,3,5,5,3,5,5,5,1,3,2,5],\"rators\":[\"fznzd3qnvtbFkkizz\",\"aEm3Wvj2rFYRL8Lrb\",\"8PwfYqoDQFThzNtvf\",\"xn7uGNKeAwPEkP9oA\",\"6xTu4r8NMczBFvmtz\",\"h4x2jaMdj5aQZbW5g\",\"MyMKjdFiT42qh7jRL\",\"hwa6rDC4yJfWFEiTt\",\"tCTzB2rgHg25Zpabs\",\"fSQSHjW3e72MrWxbD\",\"eMuCpJ2spXWkJjWNz\",\"eHcgvkTGsH7ZziqBo\",\"wwMcJQRvf3X59Jyev\",\"yjtdwc2AC4jA2RWtn\",\"J3upzLHuEwXH7Z2hx\",\"iS5BrkGLzJyPK7nKt\",\"JKb5rhL6DKcCAypF9\",\"d8qtzoLB264iP8tdY\",\"k9BkBo9XBNBRtpWLq\",\"s5M5RvgqR9BhB9JoC\",\"pnzfNatg3P32mMYQY\"],\"total\":22,\"quality\":[]},\"flags\":0},\"summary\":\"Mathematically, a fraction can be defined as the ratio a/b, where a and b are integers and b is non zero.\\n\\nIn this challenge, we are going to implement a Fraction class and some methods to support arithmetic and comparison operations on them. Write a Fraction class that meets the following requirements:\\n\\nInitialisation: Create a Fraction object with a as numer\",\"tags\":[\"classes\",\"language_fundamentals\",\"math\",\"validation\"],\"timestamp\":{\"$date\":1596120446153},\"title\":\"A Fraction Class\",\"quality\":0,\"family\":[{\"_id\":\"JZfyYujftavv6APLs\",\"language\":\"python3\"}]}}"]