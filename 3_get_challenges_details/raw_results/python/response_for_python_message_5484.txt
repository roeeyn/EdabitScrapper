a["{\"msg\":\"result\",\"id\":\"1455\",\"result\":{\"_id\":\"SKS6J8AHck7gq3Jbj\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"def tidy_books(lst):\\n\\t\",\"difficulty\":2.0647058823529414,\"familyId\":\"QZn6FhYFxsea3Fj2x\",\"instructions\":\"You have a list of strings, each consisting of a **book title** and an **author's name**.\\n\\nTo illustrate:\\n```\\n[\\n  [\\\"   Death of a Salesman - Arthur Miller    \\\"],\\n  [\\\"   Macbeth - William Shakespeare    \\\"],\\n  [\\\"    A Separate Peace - John Knowles     \\\"],\\n  [\\\" Lord of the Flies - William Golding\\\"],\\n  [\\\"A Tale of Two Cities - Charles Dickens\\\"]\\n]\\n```\\n\\nCreate a function that takes a list like the one above and transforms it into the same format as the one below:\\n\\n```\\n[\\n  [\\\"Death of a Salesman\\\", \\\"Arthur Miller\\\"],\\n  [\\\"Macbeth\\\", \\\"William Shakespeare\\\"],\\n  [\\\"A Separate Peace\\\", \\\"John Knowles\\\"],\\n  [\\\"Lord of the Flies\\\", \\\"William Golding\\\"],\\n  [\\\"A Tale of Two Cities\\\", \\\"Charles Dickens\\\"]\\n]\\n```\\n\\n### Examples\\n```\\ntidy_books([\\n  [\\\"     The Catcher in the Rye - J. D. Salinger    \\\"],\\n  [\\\"    Brave New World - Aldous Huxley   \\\"],\\n  [\\\"    Of Mice and Men - John Steinbeck    \\\"]\\n]) âžž [\\n  [\\\"The Catcher in the Rye\\\", \\\"J. D. Salinger\\\"],\\n  [\\\"Brave New World\\\", \\\"Aldous Huley\\\"],\\n  [\\\"Of Mice and Men\\\", \\\"John Steinbeck\\\"]\\n]\\n```\\n\\n### Notes\\nSome of these entries have excess white space. Remove this white space in your final output.\",\"lab\":\"Test.assert_equals(tidy_books([\\n\\t[\\\"     The Catcher in the Rye - J. D. Salinger    \\\"], \\n\\t[\\\"    Brave New World - Aldous Huxley   \\\"], \\n\\t[\\\"    Of Mice and Men - John Steinbeck    \\\"]]), \\n\\t[[\\\"The Catcher in the Rye\\\", \\\"J. D. Salinger\\\"], \\n\\t[\\\"Brave New World\\\", \\\"Aldous Huxley\\\"], \\n\\t[\\\"Of Mice and Men\\\", \\\"John Steinbeck\\\"]\\n])\\n\\nTest.assert_equals(tidy_books([\\n\\t[\\\"     The Grapes of Wrath - John Steinbeck    \\\"], \\n\\t[\\\"    Great Expectations - Charles Dickens   \\\"], \\n\\t[\\\"    The Scarlet Letter - Nathaniel Hawthorne    \\\"]]), \\n\\t[[\\\"The Grapes of Wrath\\\", \\\"John Steinbeck\\\"], \\n\\t[\\\"Great Expectations\\\", \\\"Charles Dickens\\\"], \\n\\t[\\\"The Scarlet Letter\\\", \\\"Nathaniel Hawthorne\\\"]\\n])\",\"language\":\"python3\",\"summary\":\"You have a list of strings, each consisting of a book title and an author's name.\\n\\nTo illustrate:\\n[\\n  [\\\"   Death of a Salesman - Arthur Miller    \\\"],\\n  [\\\"   Macbeth - William Shakespeare    \\\"],\\n  [\\\"    A Separate Peace - John Knowles     \\\"],\\n  [\\\" Lord of the Flies - William Golding\\\"],\\n  [\\\"A Tale of Two Cities - Charles Dickens\\\"]\\n]\\n\\nCreate a function that takes\",\"tags\":[\"strings\",\"regex\",\"arrays\",\"formatting\"],\"timestamp\":{\"$date\":1553280769084},\"title\":\"Tidy Title and Author Strings\",\"stats\":{\"completed\":{\"total\":185,\"ratings\":[2,2,2,2,2,2,2,2,2,2,2,3,2,1,2,5,3,0,3,1,3,2,3,2,2,3,1,2,2,0,1,3,2,0,1,3,3,0,2,2,1,1,3,3,2,0,3,2,2,2,2,1,2,3,2,0,3,3,2,2,2,1,3,1,2,2,2,2,3,2,2,1,3,2,2,2,3,2,3,3,2,3,2,4,3,0,3,4,3,2,3,3,3,1,3,2,2,1,2,3,1,2,3,1,3,3,3,2,3,2,3,2,2,3,3,1,2,2,0,2,3,1,5,2,3,2,2,3,0,3,2,2,3,2,0,1,1,2,3,3,0,4,3,2,2,3,1,3,2,2,3,3,0,2,1,2,2,0,1,3,0,1,3,2,0,0,2,2,3,3],\"rators\":[\"BkPgkDQGHm66X4Qai\",\"gb9rvGus2Jv7bjZSs\",\"J67hC7LSEYS5JwhPj\",\"8JyqsSbN2FJXPr3cw\",\"Jqk2uJZZxEv5wZFze\",\"mNMQvcxKSSvqqMYCH\",\"vjgbYJGLr39bACXND\",\"yZvzB3qFb8pkHy4dg\",\"tAF9Gf6PiGogbZuWs\",\"4HC75a4BAtjSd8jPv\",\"T3ZAuoMrJjvZwN55B\",\"M8jrv2FfpMQp9Qzpx\",\"ab7BsQuhDo3QgE6bh\",\"FikSPhcrHBpQ4CyGC\",\"iqmPb9JuJDgTFeR8Q\",\"nc7bRhkxgKyqusYe3\",\"kQH5b8MXJunh84Czq\",\"PFjMZGHNAPTkgd7tq\",\"AF6LgdKhEdzwgRJom\",\"C9LKGu2g5hSijvDzA\",\"6u7yc9m6HuHGbHzph\",\"aXCm9vWqKwL9XFYoj\",\"jYJ26SiLKBu5GRumq\",\"yrCNkFYQBEDE76eFS\",\"td7qPZ7Lv4pEWT2Ya\",\"PSrcg6fy835R4c5CW\",\"WkWyq9wMkZhXB6zsD\",\"BFNm9gacwba9KyLFW\",\"AYaEkTWLMmfzpwejr\",\"JEAi9mG3vvBomJ3Yu\",\"nSGTrLtXACpygCDCB\",\"tADjEJQCYFvZtjPKS\",\"3fjCCrpR2aD32sTrc\",\"DXBbJKYFTBi2pxR7c\",\"eQ98it9fkQfRMXZjL\",\"tKCgSWX7X4CWHMWGw\",\"Dw8RZgg5iHBuFrWwQ\",\"3XWw4ui5Tipb2Qz8o\",\"CKBHYxYu7mCqz9q6x\",\"gMJhLdyw3tH7L96X2\",\"7G4BWvmKhTvXg8Mei\",\"N2wnZXkhDH86mgjQ8\",\"FH7BrsRArEbGhZD9E\",\"xNnExyvwRFrYzfuQZ\",\"FsiWfB3PYdoNzmmQ8\",\"XKi8iZXBCHCaebSHh\",\"T2vhHPhRR96hRizq8\",\"EKrSBrTXuhE3f4xsR\",\"vtBrNNcQn8TFSs275\",\"Dd4MibaSEPy7br7fE\",\"HQxp7NcdvF92G7bYS\",\"GR5P7gLKtxGyTAZTB\",\"cR3ibTMxLyEdDFCHY\",\"FgkYtHLxeD8pETJ8T\",\"EjbrnYyrH8FW4Foju\",\"mG93NkvEZfh2kPrMq\",\"vF7SNNRvLK3mu4W4H\",\"m6YXN9vH959zn3BJB\",\"LbaSE5MWP3FXWpWvX\",\"mtFpvaSsfKoKnq7Zv\",\"EXZfPb8YH28EL8Rh9\",\"QLcFxARNuZmaPThyg\",\"nfXGHENb5md7m355s\",\"ozqX8HKbqPZnrjjaN\",\"hsrNYf3WbexXJKhCq\",\"Ti5BF4jnruwNNzHY8\",\"dvmrZXzqS7b6ruPXP\",\"AMQWYNMLmwYwvDtoS\",\"ZvK8bvvz922hF2ztw\",\"mtRvHDpeLoSGBf8zC\",\"Nj6FwgBtAXsaQwsM2\",\"vuwheqp25x7RkBHXn\",\"3efW5qCKraPjzEfiX\",\"N4QjiZzLyunefpXeS\",\"3SKmXhcLPPkmQhjip\",\"dKpQWv7qH2WaZXPxK\",\"otXtuQygbcYATMZoP\",\"RXb6cmCNaYbczuDwy\",\"stKEm7Cdsauxmhw5Z\",\"HqmxnQJM66Y57twhn\",\"2fxapKr8XGdNeaKi2\",\"JKb5rhL6DKcCAypF9\",\"5uA8xmgifmiJrqbzy\",\"K96FwtfDDN5WM4Bb7\",\"rEWQdNHK6YjuBqmrR\",\"6ShafRStcvew4GfCh\",\"C4QntmkYtB89GNtpd\",\"2innwjWqxJHo4eRGh\",\"8AipP2ZKTAhvzfQAr\",\"AasGs8AeX9Lcb9xJn\",\"p3dsCFdWGzWGhFrSQ\",\"4CFzv558qbGcpQwc4\",\"aEm3Wvj2rFYRL8Lrb\",\"8PwfYqoDQFThzNtvf\",\"wZoxzQDbso9SMAPkY\",\"dXMbkgQFoN37BhruB\",\"PytNZK9mNiRiZxPrm\",\"LjoNTyGEMfBpMHHus\",\"ZNnsMeNkdDhHjSrZb\",\"mDWNyaaQ9hvPCRzSd\",\"s5M5RvgqR9BhB9JoC\",\"YRstQuthRkFeBiXug\",\"eJ2Jrj5ibMnRGp69g\",\"EjbDDFRECrzQDkzrX\",\"rrNComrAKsGM6iaLh\",\"gJYuGdkXEWWmGRLzu\",\"HF28xZKSLM9wEuqNg\",\"rgvAJFwfCeYoYnFTK\",\"Tb2m9eGdTuSG8RbyD\",\"586FdBhazpwJfnRYR\",\"Yp7uvStL97cC9fKkY\",\"euPBBaYXyS8RBr9KB\",\"LQxof8pGabGuWP7Gn\",\"J5T8gZqiZXFuFDTQ7\",\"LA2YneDcbtiSj5SH6\",\"n2BRY9X8899dcG8Bw\",\"W5TajitmCyxz87zAC\",\"R4SjTgDnpigJYDLyL\",\"hnyhBFWwNCz9mDfSi\",\"cykCKNJcqFBxz4T8s\",\"DEDniTrstQYGounXT\",\"W4zFJhfQoDah7sxKu\",\"KdNDysEsy2TW5QRJ2\",\"iojEnnY9FsMfYzp6f\",\"zZDaXBxMzTCBhNkgL\",\"yjtdwc2AC4jA2RWtn\",\"Ecg4m7srYGgZsb4Ck\",\"6428wKHtwKkFdvBs5\",\"MKT7khMBGXzA22ykf\",\"ZrKCkX7xxGGZzauFW\",\"DrkR35NqnP9NDLbq6\",\"v9KtC8YLbMWmXiW2H\",\"XjajdyybZZbkz8o5x\",\"mG8HqKiAQFTdRZthG\",\"iS5BrkGLzJyPK7nKt\",\"6F3Y6ZBAGNDGGTt9B\",\"DPi9QGLctq2y76KuE\",\"xn7uGNKeAwPEkP9oA\",\"dkcmCKwqApX5jBggc\",\"J3upzLHuEwXH7Z2hx\",\"gXTAie79kiw28tx5u\",\"55RQznnuTGpsj3EXd\",\"oBcs8GLX2ZFLXQy8y\",\"4RsakkyRXyYGwFxEa\",\"sbJcFfQjQ59Wfg4Cd\",\"QRv96jmNaYsWkxQEG\",\"cAP3n5NY64uoMwzRR\",\"qAby4AWXmTNeusvg3\",\"GTKsdeEihE636Le9i\",\"srJ34BaybkQh3qRkM\",\"EfxwqhYdapX3dMQC2\",\"aFYzioHvZPvPaunsg\",\"GGdmhAvxXhqhhibJN\",\"PWgzeK859suojbrRx\",\"AFfw7cGg83uYk2Miy\",\"PC3pLs36zNzpRDSuE\",\"rfyEkETeoS96QNH4e\",\"gKnWjDjwrJh7MK2df\",\"buX4mCQhtXCfBjeno\",\"yod5YhKtPqw2GfG9B\",\"o4ixjQGSaYqA2JoM4\",\"2PufnQcsHsfymufX3\",\"ekbfbYdyZeXHvaG8c\",\"8sNv5PTHa7XQ8bNqR\",\"ey3CASd6Je5LEJzfB\",\"d8qtzoLB264iP8tdY\",\"4Lwjr34ypKNQNQCar\",\"Ds7L5bksw2QRHjrKL\",\"nkH3HfJXLMNcBMM79\",\"CHvzhtXnv8HTbPQ56\",\"5HCu9Ydd86QgHDRNP\",\"K4Jjxcas2GL33s5nS\",\"9pzFiFK3ANLjQfnr2\",\"3KkyQm77zsew58Dc2\",\"Qyfyyw6oC4EHAndzo\"],\"quality\":[5,5,5,3,5,5,4,5,5,5,5,5,5,5]},\"tests\":{\"score\":0,\"rators\":[\"BkPgkDQGHm66X4Qai\"]},\"instructions\":{\"score\":0,\"rators\":[\"BkPgkDQGHm66X4Qai\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.785714285714286,\"family\":[{\"_id\":\"fqjhrQoMCEyXRhhnz\",\"language\":\"cpp\"},{\"_id\":\"5vz5mrd7BTd7Q7XSz\",\"language\":\"javascript\"},{\"_id\":\"SKS6J8AHck7gq3Jbj\",\"language\":\"python3\"},{\"_id\":\"5sy4uY4BbhKKFupWR\",\"language\":\"ruby\"}]}}"]