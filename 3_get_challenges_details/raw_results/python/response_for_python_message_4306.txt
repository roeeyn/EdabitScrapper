a["{\"msg\":\"result\",\"id\":\"871\",\"result\":{\"_id\":\"8qD23E6XRMaWhyJ5z\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def happiness_number(s):\\n\\t\",\"difficulty\":1.4201183431952662,\"quality\":4.568548387096774,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"y5cCQrCq7L8NDgktj\",\"instructions\":\"You will be given a string of characters containing only the three characters: `( ) :`\\n\\nCreate a function that returns a number based on the number of sad and smiley faces there are.\\n* The happy faces `:)` and `(:` are worth **1.**\\n* The sad faces `:(` and `):` are worth **-1**.\\n\\n\\n### Worked Example\\n```\\nhappiness_number(\\\":):(\\\") ➞ -1\\n# The first 2 characters are :)        +1      Total: 1\\n# 2nd and 3rd characters are ):     -1      Total: 0\\n# 3rd and 4th characters are :(      -1      Total: -1\\n```\\n\\n### Examples\\n```\\nhappiness_number(\\\":):(\\\") ➞ -1\\n\\nhappiness_number(\\\"(:)\\\") ➞ 2\\n\\nhappiness_number(\\\"::::\\\") ➞ 0\\n```\\n\\n### Notes\\nAll test cases will be valid.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(happiness_number(':):('), -1)\\nTest.assert_equals(happiness_number('(:)'), 2)\\nTest.assert_equals(happiness_number('::::'), 0)\\nTest.assert_equals(happiness_number(':)::(()::'), -2)\\nTest.assert_equals(happiness_number('))):'), -1)\\nTest.assert_equals(happiness_number(':):)('), 1)\\nTest.assert_equals(happiness_number(':(:(:()):'), -2)\\nTest.assert_equals(happiness_number('()((:())):'), -1)\\nTest.assert_equals(happiness_number(':(:)'), 1)\\nTest.assert_equals(happiness_number('(:):(:)(('), 2)\\nTest.assert_equals(happiness_number(':(:(:'), 0)\\nTest.assert_equals(happiness_number(')())(()'), 0)\\nTest.assert_equals(happiness_number(':()):'), -2)\\nTest.assert_equals(happiness_number('():(('), -2)\\nTest.assert_equals(happiness_number('::::(():('), -3)\\nTest.assert_equals(happiness_number(')(():((::'), -1)\\nTest.assert_equals(happiness_number('(::):('), 0)\\nTest.assert_equals(happiness_number('):()::('), -4)\\nTest.assert_equals(happiness_number(':::(:('), -1)\\nTest.assert_equals(happiness_number(')((:'), 1)\\nTest.assert_equals(happiness_number('(:::(:('), 0)\\nTest.assert_equals(happiness_number('))(:(:'), 1)\\nTest.assert_equals(happiness_number('::))(:('), 1)\\nTest.assert_equals(happiness_number('(((())))'), 0)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[1,1,1,1,1,1,2,2,2,2,2,2,0,2,0,0,2,2,1,2,2,0,2,5,2,0,1,1,0,2,2,2,1,0,0,1,2,2,1,0,3,2,1,2,0,1,0,1,2,2,2,1,0,3,1,0,1,2,4,1,1,2,2,0,2,0,1,1,0,2,2,2,0,3,2,1,2,1,2,2,2,2,1,1,0,1,1,2,0,0,0,1,0,2,2,2,0,2,1,0,2,3,1,1,1,3,1,2,1,1,2,2,3,2,2,2,1,0,4,2,2,1,3,1,1,0,2,0,1,4,1,1,2,1,2,1,2,2,1,2,1,2,2,0,2,2,2,2,0,1,2,2,2,4,2,1,0,1,2,2,2,2,1,1,2,1,1,0,2],\"quality\":[1,5,5,5,5,5,4,5,4,5,5,3,5,5,5,2,3,4,5,5,2,5,3,4,5,4,2,4,4,4,3,4,3,5,4,5,5,5,5,5,5,5,4,4,5,3,5,5,5,4,5,5,4,5,5,4,5,3,5,4,5,3,4,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,5,5,5,5,3,5,5,4,4,5,5,5,4,5,5,5,5,5,5,5,5,4,3,5,5,5,5,4,5,5,5,5,5,5,4,4,3,5,5,5,3,5,5,5,5,4,5,5,5,4,4,5,4,1,4,5,4,5,5,3,5,5,5,5,5,5,4,5,5,4,5,5,5,5,5,5,5,4,5,4,5,5,5,5,5,1,5,5,5,5,5,4,4,5,5,5,5,5,5,5,5,5,4,4,5,5,5,5,2,3,5,5,5,3,5,5,5,5,5,4,5,5,5,5,5,5,5,5,5,5,4,5,4,4,5,5,5,4,4,5,5,5,5,4,5,5,5,5,5,5,5,5,5,5,5,4,5,5,5,5,5,5,5,5,4,5],\"rators\":[\"oyKcm3zqdy8Ko5P5d\",\"qQQ4hCQpzitmHSkjS\",\"2A2vzmpJtiRzT4Gsk\",\"GqErHwe6rLZi8SRFL\",\"mQ52hWdbHC3i6LX7s\",\"NA8EnKMf7BAzRvCok\",\"a777e8chPvJkY3tKa\",\"ZQ8mKQahKn6bux3cc\",\"6428wKHtwKkFdvBs5\",\"AYFWSAgkK4aETvLHi\",\"ppxNdL4gjANz8oJLQ\",\"j3xjkcQ7o4ERPBjwh\",\"ZiCQg9WKfrzPWLG6L\",\"XpKKoJ2KDL2gcJiXb\",\"AaKWw8amcFYLrEpNz\",\"aKzYNPqBqb3J3ZgyD\",\"wNCZGAxE3dGsT3Mia\",\"mHvoroWGDLYbJqQJa\",\"k4zh85ZZaESAHvvzQ\",\"qqRZkseCTKyLoEsG8\",\"kNrnnMxhFZztMTBAX\",\"axdSNLZpiCDF8RS6n\",\"DEDniTrstQYGounXT\",\"gXTAie79kiw28tx5u\",\"akcSe6dhHY9trwX4b\",\"dHveFar5wvQxcDsJy\",\"SgZ2t9xFuRqdJGofp\",\"DPi9QGLctq2y76KuE\",\"KwCNsccpXQ3apyfpr\",\"dj5AyG5fWP8FdsSmZ\",\"uFz9mrStNaCDLhcBW\",\"ATv9qT8oPJ3j2R3j6\",\"DqyvuCMKFzmKCegmw\",\"n2e74kbZHY3u7Cgej\",\"dgymrNaAEsPGKXWFY\",\"h3ZYorNeuCW5NtkjE\",\"uEZeZi2g2LLqRjFzs\",\"bX3mFhhqsnyE5mb7n\",\"YmCtjmaboJdK5xCkN\",\"K7ceQpsgi36uLxTMr\",\"QRv96jmNaYsWkxQEG\",\"72oyXuXwKRY95fpkt\",\"yGfwTFE7Eds7ynWqK\",\"6HgMANhu6WiGyXSGN\",\"s4YHxEDBTTq5EBMRs\",\"fdwpk3NnxA49cW34R\",\"8JyqsSbN2FJXPr3cw\",\"3nZwaKurkcR6tWajy\",\"gb9rvGus2Jv7bjZSs\",\"CB48GHbw7xtwmiuPn\",\"bLGqk6rTP3a5pfG7o\",\"E4KGguXaWuR4bd2n7\",\"N2wnZXkhDH86mgjQ8\",\"9bn6tNgXCNys4n3bN\",\"JS3hNM3XXkxPdg3yk\",\"skbp3mauBhvs2Pjee\",\"DAhoDmrLmkoRsJhRx\",\"PTDFuxAzou7W6asWt\",\"GEc9k9Ycha9Gja8Hd\",\"fTNQmMvTZhhiGBCMe\",\"5HCu9Ydd86QgHDRNP\",\"KLmLKaJPfsYxp42p2\",\"uN5t57RETi5y2z5W8\",\"b6jJRWFKaLf9tivuc\",\"TMhwgGLkkiTEaBZ9Z\",\"jACZErwRsSEFYFtkG\",\"fKsHKQ9ZTyEgmcQmQ\",\"L5HTAwwohh2J3oST7\",\"cR3ibTMxLyEdDFCHY\",\"PEZjvhf6N3hYTgSrq\",\"GqDfCGkkLMrPjfMSS\",\"ShdkKMbZm68GukC8M\",\"9yAhideCxv35Adb4Y\",\"sSJhMqDpXn8CEjcqZ\",\"DzaymdzXZKCFpbPiv\",\"eybCguAWtbpvr544M\",\"P6iNMZpMakXYY2c46\",\"u3exaHuZqYBnDBZh2\",\"A7BZy6bCmem2aHZvG\",\"fnkbcP3nH3soTAFKx\",\"oRdsdmmPpzfSK4tDq\",\"vCeeMuYDbz3MB4vsk\",\"MFdsMsLxbwSLbjBH4\",\"TFqRD3zervh8PT8op\",\"D2B5zXAoub33DEC86\",\"R29kgJ9M7R4qqwjcE\",\"9CoqdidjM9KbeKnHY\",\"DvquuxqkkE5DzrcZe\",\"PMdL8dy4hEjFf6bYv\",\"htJ2fQTJiztMfztKz\",\"rfyEkETeoS96QNH4e\",\"xjyixzXzqqqTfJARd\",\"D5rD37nLuESYuZ9LZ\",\"9HbQoBB2So66CGKQS\",\"GGprTwrkjuccmrQRg\",\"f8B4wR5GXFfW2ydNt\",\"5QbTCbpFMGDYAs23L\",\"f7mC2hTEBzZvF7J8A\",\"4PEXNFR6be6ygGgd7\",\"hqCKn35dAQKEG3XsA\",\"9rhsisf8ofHavG5aT\",\"HF28xZKSLM9wEuqNg\",\"Q6QKJiTYnbvoYH6Jq\",\"YLBbF8RnZLTy5putY\",\"Czx7pvdNmsF263rKj\",\"8W8MQjzMsJZokTXsd\",\"9PP5Ds2GooKRqHSSk\",\"yod5YhKtPqw2GfG9B\",\"ZmjMv5wfB4e7bTJQZ\",\"vTtRiDBpx7WdsNgx3\",\"rm5WaTAX657FE2Afr\",\"v9PoG3jaEbzFeL8SK\",\"CF8sz9kdosnebmj8e\",\"4bo2KGwds3EHovESr\",\"Z4aNu596Qni4ytqbW\",\"sHjfbGQGLHE6JR6qu\",\"qBu6YdRD2Aa6qfKic\",\"nyx7vx6tDXPy7waPm\",\"sfsGgepJqNC9KD23u\",\"DYDJTyGgKFnBRLm2r\",\"SkQcb2sRn4as5KpnN\",\"8PwfYqoDQFThzNtvf\",\"9FCeFzjPA4jrQ7oHW\",\"b5oEvBqHWLRnJgp22\",\"p8qqFdJ3FSk5x9z3G\",\"4ArGCifHnsz8p525A\",\"mxX4rH5ELYkdZ2Mbw\",\"M8dQuMrEpP8Hc3tHN\",\"2QGRoQn2dRq3scu7k\",\"8fZxjQfuXw5HMSRJM\",\"FK2fEQ3F6DD3buSLJ\",\"NuqGt5u3s7vJ7HBGR\",\"7K2GEb5TZRtSpyyGS\",\"rrSC943cCKNG48sH4\",\"zfGYZ7gpR8fxJpagh\",\"8BFSTCnoe2QggN64c\",\"d8qtzoLB264iP8tdY\",\"jNvegJWCk5HCtEMbK\",\"KYNLpiPWNcmn8jRTL\",\"DHBGz3r4dCryvEDAp\",\"s66ybqHn4MG953AsN\",\"Lm6ChQCWBmaikmk5J\",\"YxmKxcbarjNRhrAfK\",\"SPYSWseH56TkTzKGf\",\"HAtNvtvpTjB2DkhnG\",\"6MjSiiBLPcvXbXcaZ\",\"et9amN3eDoQvo5oks\",\"i42C33MNpNoSXhJDj\",\"b596MeE6Qy5Pjvhfe\",\"Cuy7McJ5y8BkXRRk9\",\"XbxHXmh5ZmRN2gw3K\",\"YoWyETmZcgAii9jyW\",\"Lg4t6SEWgtYz4u7Cj\",\"odmc6y6XMstL2XMAx\",\"KTy2iqwjsH9PeErTB\",\"bHW2DujifaHo4YRWQ\",\"TrKrLaaKFZnn8FW4m\",\"mDWNyaaQ9hvPCRzSd\",\"pJj86xc32Bs7Frxvi\",\"eMuCpJ2spXWkJjWNz\",\"kQH5b8MXJunh84Czq\",\"J5T8gZqiZXFuFDTQ7\",\"dYPkStFnLvAMsHSzZ\",\"YA7SDhpgEtsqynvNL\",\"iS5BrkGLzJyPK7nKt\",\"YjPkyrF5D3ihxTjwk\",\"5XiuAqicKD4hBdu63\",\"Wv2vJnEj8ywNmARoF\",\"R4SjTgDnpigJYDLyL\",\"GbsnjyJxYDd5q4bGC\",\"HuNF3xTBzmatyGSTm\",\"Jqk2uJZZxEv5wZFze\",\"o4ixjQGSaYqA2JoM4\",\"pduNK68oazqQTtbLp\",\"ikkjHDqBHu6fT3vGL\",\"5hQnRWiKkhgKJXNMP\",\"MXGuntvz3byrP6WJc\",\"WdKdsgH9gXkKgCycx\",\"NfMJuiBk6FN5Jc6ow\",\"p7js9trz2zk2RorCR\",\"buX4mCQhtXCfBjeno\",\"AJexRBN9cYQmqvYu6\",\"C2AfMipCicfD58WJ9\",\"wjc4iejpErBhxWwHo\",\"HqmxnQJM66Y57twhn\",\"YRAzEBJoLvSaiPtYx\",\"GGdmhAvxXhqhhibJN\",\"5S9nX4rKsnCcnv4Cz\",\"gf7u4MKcGDFiijzK9\",\"Fk9kLwoG4Brf4KsKf\",\"FW3eWJuZGz5CL5BnC\",\"7bWyEMKEuEseRgihX\",\"nZvYrLJgjhQQ7Zo4c\",\"ndhjbXLAB5fLetypw\",\"t3nuEDP4Y5reviayX\",\"33boaDzGiY28bCDy6\",\"mtRvHDpeLoSGBf8zC\",\"tyLS9T6YMfg9fMtYJ\",\"S2nsqB5dNPjKFhojW\",\"ZyrfhDTZHb8LymH5b\",\"XL2xgexMeHzoyyQ6i\",\"Ds7L5bksw2QRHjrKL\",\"sftR9DgM4jpwtxfAM\",\"euTB6YthAd9Mwfj2t\",\"Nb6LYPoQP6KJZt8mz\",\"LPGPHgJc8MkvcEDBc\",\"utTuvGdmu2sBHWBhQ\",\"K6MfKMytoJJuSGewP\",\"nFbmNzMQ38TncmfQX\",\"q9FfWNiMDKRiaCJ5j\",\"gDwp4e3PzkwDCdx5f\",\"NyrXqcYya38cBg9q4\",\"i4YM8iLfgozNR3hZ3\",\"srJ34BaybkQh3qRkM\",\"zBXxfCw6cyXdxHBfZ\",\"Pue9uFnWn6TTmeXbY\",\"DdERFmZXdXmQ8nkj3\",\"Bw2bXzvk8DAZxxekw\",\"JLQLosczQ5MquJoL8\",\"S6FmA9hRfExghscS4\",\"xAMuN7wh2uorXC9q2\",\"MgPT8HripHLxFtiax\",\"t4SbjvzCjCbeyhjcj\",\"awzEzqH6xsw4asPBT\",\"jsQJLi9LDjpXKFP28\",\"2JfRD95Sba2zmeRmW\",\"r2wGuMbdf9tKqt9Qk\",\"w3kedxuWMaR9uEGyt\",\"baAKFXJXw8XkACsAn\",\"AFJTgLaPrtbqSvh7b\",\"di2hhADLx59Bj4ewM\",\"mPrWM9FxwdMPBDX7J\",\"q2tzvkrLASvSjkek9\",\"jWbd7SYDzLPjc9EDh\",\"hTKErjHjWuSGmShdk\",\"KDfmGkQoajgNwwAm3\",\"BrTDhPJcACL2bsrpJ\",\"nwnn99np52pPyALF7\",\"bpz5o7apFs8vW7JMY\",\"jDRjg5Sf5MD7WyAMk\",\"nc7bRhkxgKyqusYe3\",\"rZt6mfNGCof9JJCMy\",\"2fxapKr8XGdNeaKi2\",\"EsRKN3D4chNvFFaSZ\",\"gbk9zyC3tGrQpG2BZ\",\"jL4y5fTJAMBjhZmko\",\"q3gemRW2Kh9f5tbdX\",\"di8ikzbLPSZKCDAAC\",\"sbJcFfQjQ59Wfg4Cd\",\"Jzthnf66RxWAkMArt\",\"KACjjdKDL97rBTyEK\",\"DqNQn9Jsxcu5HijKE\",\"65T3fe9EZJbjmT8Cg\",\"zgoEhAyhrjnsSLPGw\",\"uouMMdEWBuLBWPbzr\",\"fBqQjriC4QEtFNxFe\",\"eYfPWvZwnJQkHbSTK\",\"pPpmP7xeJzGgK362R\",\"q6QsMYNMpPNtmyTeW\",\"bccs9koJxyQ9XNiLC\",\"PiRFsaY372Gbgs8qF\",\"KBxTPknCRmB2b5y3i\",\"zwruFCmuHkwJTpYqg\",\"GcjzsRe24JQ42kqZc\",\"vR9XyHxKy3gHmDS7w\",\"PJQJDjZaBxTXu4FyG\",\"2u2QfdLjDKZpTXmih\",\"n2BRY9X8899dcG8Bw\",\"LFSASkxgw9hr3KqmC\",\"T2vhHPhRR96hRizq8\",\"YcCLwitFMAEJSnxAW\",\"abFmcWoyQWCHfhSS8\",\"ZgWwEdWxjy83WpPQX\",\"noZDgMMXkcPCLN8Ye\",\"CZeLyDD2BQL3jrzzj\",\"f5xd6EFHgPprS4Cib\",\"RYYmc3gFPNEmD8NFc\",\"qZQxPQ2kaNKAMesHT\",\"CTKmXtrqDYqJBnuy8\",\"qAby4AWXmTNeusvg3\",\"mKu7N9fmLuS4PCPzY\",\"7txFzDQ43vJ7qCY88\",\"sKfrD9gjCDHuqLzSk\",\"rLMeCAzEE9Grp3yce\",\"XD5nmvKQchKezPXhy\",\"3cF6NXq3ZEwdkgSjb\",\"2EbDCCJJvCfKkbYia\",\"T6iBEE2jp7f7iEF2P\",\"AFfw7cGg83uYk2Miy\",\"AQSqD9oNv2uPfxZCR\",\"iojEnnY9FsMfYzp6f\",\"BJp2WkwLWGHHB5oQW\",\"dYgxQgSzJNMnWzhhE\",\"yyo6YLQN2of6fxp49\",\"dJzNF59j2p8jWZxiQ\",\"Wpn95NqWxncQrwNgz\",\"66a9xX73nmTEuKs9k\",\"DfHHpvnubuFmeNky9\",\"6BpQP3ubeg48Q65ya\",\"CKHKhvJcq9jNMqrmd\",\"2PufnQcsHsfymufX3\",\"GTKsdeEihE636Le9i\",\"5kazQPq8ZdDsx6kjf\",\"RoGGD5cpHb4ftdLDv\",\"4Lwjr34ypKNQNQCar\",\"vDFmCJg5dArEbn6DE\",\"Y9zyHwuyA7MJ8SPDh\",\"p9AhGmAfcSKXj6j29\",\"qfSxhwmfJN6Y6wNJq\",\"PC3pLs36zNzpRDSuE\",\"Yp4Jtxj7pHqZjheN7\",\"KXnxMWSphrE8hsvyG\",\"Z7uafmBhoFRpGbT6e\",\"vA3sBoGvJmYKZHdmE\",\"c2q7mY39z5JPEMCaM\",\"cp5smeXkoJGBGFyGB\",\"Ygvk5oEbAoGTyByhK\",\"t5sNCSo4totJxsKM2\",\"w3QDkmjZj2dAFDsjq\",\"w984rxvnQrA9TEXNx\",\"LfJt95yYfPP6wKYDC\",\"Cc2Cgj4MWXZxsTooC\",\"ghMkPtdFCpM6w8nax\",\"X4rzfxGgxx6CS7Bpz\",\"vMYxgcL9FJXZEQtch\",\"FpZv7ZrLXipiGeKSW\",\"ZcaGJMnMq3r3YGJv7\",\"zPzodf6p8hHJpDWha\",\"4oJg4noyTi6b8J8A4\",\"GJmKcqu7xppQyBaTt\",\"DXEsQPsQt95hy2Kcj\",\"bL9hGcDttQKxodf2W\",\"9Gf6g4fuKc3uou9w2\",\"M2hoNeCwEydxtnEsu\",\"Ga6S945KhkqH7mbE9\",\"no46qNkTbNeHepe64\",\"zSTQQB8d5wMQb2Chr\",\"WviamGzmYW8XTLPbM\",\"prPgqAY5ma2inThMs\",\"tdfY4iBvD7oh2ufnN\",\"YmQb9Mo4Xcg2vzgbn\",\"NEgk5aZEPJ2tiiQYu\",\"yB7AmYKjY8iyYPAzx\",\"9s8grMKsyuYgs2YeP\",\"J8sP2skT9JTTyCx4i\",\"27iSgFZLs3AcxmyW9\",\"Lkcku4D8wh449piQh\",\"wwMcJQRvf3X59Jyev\",\"BqFvymb2rHAZrttgE\",\"5BMA97Bn7GZJPCK7b\",\"zjGbjWs9bZ95hoDrX\",\"rgvAJFwfCeYoYnFTK\",\"yr822PZmmiDDenxpB\",\"QFZcdxGKBaFZb7Zbk\",\"CHvzhtXnv8HTbPQ56\",\"mvJBakQ35CWAnbbEZ\",\"q5a96XumccZyhQNyL\",\"WQubx7DAkG6WZE8FA\",\"9Ly8afdtofp8DXzrt\",\"YXQvrgeiGzLd6cTW9\",\"AasGs8AeX9Lcb9xJn\",\"SguFQ6zR5TZLXQk9r\",\"R6YxHWAiLgKwy5YvC\",\"StNu7DPyTgEStZsMY\",\"w67KfQgZ6WAeY7K4Y\",\"ij2DPkwTsR9LEkoKg\",\"2qGAf4ktagymJeP3F\",\"etoxSpG4fGKThLozM\",\"qzXAMXsHZGT8o5hTA\",\"9pzFiFK3ANLjQfnr2\",\"fKzJMR2LLbiRtGetj\",\"8uiLiJcmWxWe6qw65\",\"hEpaAYfTpAp7xunYa\",\"4RY3zj9C2t8GGefhi\",\"hR7GMiqGap4CzEWSy\",\"T6Rm8mREPMZSftzrC\",\"2iFe3EHEH2YdhSKrs\",\"4TmgHkn5vqyHK3sYC\",\"796v8eRqahP6wpLdL\",\"ckMvGF5TAyCwcxJBm\",\"9GBs9k9E9Ru8hPBPN\",\"nkH3HfJXLMNcBMM79\",\"jkbavR2ATFJcpmo8M\",\"pQwhNKiCne4gEZgcn\",\"tm3R3qmjwwqy2Kj6T\",\"RgXdM6tgn6po2KgcX\",\"uK58g2EXxqxTaB2iA\",\"oig8ig9SE9RZa8ttL\",\"d9LBRxvADNBB5QJMB\",\"AMpQSjKsRqhCDyS2j\",\"rCrbqMiaGPgHYTNxu\",\"dzS6WBTMHyFEag6Fp\",\"TCvpT4EPb8qNssNB7\",\"3KkyQm77zsew58Dc2\",\"hpT9yYe5R45poHrYR\",\"yAouD3PxzED8a4gap\",\"dSd7wHgXGQeG5BQ2P\",\"Qyfyyw6oC4EHAndzo\",\"B4y8aoyXJtskYPFEL\",\"QWjsXnLaJ7xfL3Amq\",\"qB6KSTYC6H2TQEQY6\",\"suArq5BbSy7gD6xri\",\"mw9464S5dnenqzvpm\",\"5QN8R22z43SrwoHDz\",\"eW9R2SCoYnY8HBAdL\",\"zQ7vxc2qQS47js8iY\",\"6LbPw9yW6HHDfn8B8\",\"2HfNkb2SoqdyjKW3o\",\"Wi4H6ayKsNDWWQCG5\",\"vAbK8sCfKyFC78HYg\",\"ruzwBPphPDRgLXdnP\",\"wrL4iX2CCSqDCCty3\"],\"total\":587},\"flags\":1},\"summary\":\"You will be given a string of characters containing only the three characters: ( ) :\\n\\nCreate a function that returns a number based on the number of sad and smiley faces there are.\\nThe happy faces :) and (: are worth 1.\\nThe sad faces :( and ): are worth -1.\\n\\nWorked Example\\nhappiness_number(\\\":):(\\\") ➞ -1\\nThe first 2 characters are :)        +1      Total: 1\\n2nd\",\"tags\":[\"strings\",\"language_fundamentals\"],\"timestamp\":{\"$date\":1599391442618},\"title\":\"Smiley Faces :)\",\"family\":[{\"_id\":\"eCmEgrKNtnfhpssQp\",\"language\":\"javascript\"},{\"_id\":\"8qD23E6XRMaWhyJ5z\",\"language\":\"python3\"},{\"_id\":\"4nHvN9RzrMu6oDgnb\",\"language\":\"ruby\"}]}}"]