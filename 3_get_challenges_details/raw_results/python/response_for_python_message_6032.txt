a["{\"msg\":\"result\",\"id\":\"1721\",\"result\":{\"_id\":\"f24TDCGbYRjGfALQp\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"def is_exact(n):\\n\\t\",\"difficulty\":2.1578947368421053,\"familyId\":\"YosHKnZpZgAE4KRyS\",\"instructions\":\"Create a  function that tests if a number is the **exact upper bound** of the factorial of `n`. If so, return a list containing the **exact factorial bound** and `n`, or otherwise, the string `\\\"Not exact!\\\"`.\\n\\n### Examples\\n```\\nis_exact(6) ➞ [6, 3]\\n\\nis_exact(24) ➞ [24, 4]\\n\\nis_exact(125) ➞ \\\"Not exact!\\\"\\n\\nis_exact(720) ➞ [720, 6]\\n\\nis_exact(1024) ➞ \\\"Not exact!\\\"\\n\\nis_exact(40320) ➞ [40320, 8]\\n```\\n\\n### Notes\\n- There will be no exceptions to handle, all inputs are positive integers.\\n- A **recursive** version of this challenge can be found via this [link](https://edabit.com/challenge/zhqL89ZWgbxbixsdD).\",\"isHidden\":false,\"lab\":\"Test.assert_equals(is_exact(2), [2, 2])\\nTest.assert_equals(is_exact(6), [6, 3])\\nTest.assert_equals(is_exact(24), [24, 4])\\nTest.assert_equals(is_exact(120), [120, 5])\\nTest.assert_equals(is_exact(5040), [5040, 7])\\nTest.assert_equals(is_exact(40320), [40320, 8])\\nTest.assert_equals(is_exact(3628800), [3628800, 10])\\nTest.assert_equals(is_exact(20922789888000), [20922789888000, 16])\\nTest.assert_equals(is_exact(125), \\\"Not exact!\\\")\\nTest.assert_equals(is_exact(721), \\\"Not exact!\\\")\\nTest.assert_equals(is_exact(1024), \\\"Not exact!\\\")\\nTest.assert_equals(is_exact(41845579776000), \\\"Not exact!\\\")\",\"language\":\"python3\",\"summary\":\"Create a  function that tests if a number is the exact upper bound of the factorial of n. If so, return a list containing the exact factorial bound and n, or otherwise, the string \\\"Not exact!\\\".\\n\\nExamples\\nis_exact(6) ➞ [6, 3]\\n\\nis_exact(24) ➞ [24, 4]\\n\\nis_exact(125) ➞ \\\"Not exact!\\\"\\n\\nis_exact(720) ➞ [720, 6]\\n\\nis_exact(1024) ➞ \\\"Not exact!\\\"\\n\\nis_exact(40320) ➞ [40320,\",\"tags\":[\"loops\",\"numbers\",\"validation\"],\"timestamp\":{\"$date\":1594857674843},\"title\":\"Exact Factorial Bounds\",\"stats\":{\"completed\":{\"total\":63,\"ratings\":[3,3,3,3,3,4,2,0,1,3,1,2,2,3,2,3,0,2,2,1,2,1,3,3,3,3,0,3,3,2,4,3,3,3,2,3,3,2,2,2,3,1,3,2,5,1,2,2,3,0,2,0,2,2,1,1,0],\"rators\":[\"a777e8chPvJkY3tKa\",\"gb9rvGus2Jv7bjZSs\",\"hZW6j5s6RHpx35phy\",\"aEm3Wvj2rFYRL8Lrb\",\"qab4tYm6vJQcpKLfi\",\"jFcHRfu77aNu6YpZg\",\"xn7uGNKeAwPEkP9oA\",\"8PwfYqoDQFThzNtvf\",\"s5M5RvgqR9BhB9JoC\",\"gJYuGdkXEWWmGRLzu\",\"dfon4ySR6XeZk7dmK\",\"axdSNLZpiCDF8RS6n\",\"ZNnsMeNkdDhHjSrZb\",\"8JyqsSbN2FJXPr3cw\",\"HF28xZKSLM9wEuqNg\",\"n2BRY9X8899dcG8Bw\",\"cR3ibTMxLyEdDFCHY\",\"iojEnnY9FsMfYzp6f\",\"DEDniTrstQYGounXT\",\"KZ2xddpM2f9JRaryB\",\"tAF9Gf6PiGogbZuWs\",\"yjtdwc2AC4jA2RWtn\",\"Nb6LYPoQP6KJZt8mz\",\"Cy7NWunXL4DeG6gso\",\"oSHHLMKfDxREC7nu9\",\"WWGwYA6b6rNFtuycN\",\"4iGeoajtKD7rRRttr\",\"PytNZK9mNiRiZxPrm\",\"Bof5WwcxWFQEkNTsN\",\"Ecg4m7srYGgZsb4Ck\",\"qD2LrwaDrSdiybLKY\",\"J3upzLHuEwXH7Z2hx\",\"zd9FLSzsGz3evKafy\",\"DPi9QGLctq2y76KuE\",\"iS5BrkGLzJyPK7nKt\",\"MfKe55snfKsdnDejs\",\"Yp7uvStL97cC9fKkY\",\"R4SjTgDnpigJYDLyL\",\"gXTAie79kiw28tx5u\",\"buX4mCQhtXCfBjeno\",\"Jqk2uJZZxEv5wZFze\",\"QRv96jmNaYsWkxQEG\",\"p8qqFdJ3FSk5x9z3G\",\"6bBpBoxvSfNZkPSyF\",\"EQu6oPhZ9mRChfYSz\",\"JKb5rhL6DKcCAypF9\",\"eHcgvkTGsH7ZziqBo\",\"joZXzqJS4J9PPWGvu\",\"AasGs8AeX9Lcb9xJn\",\"oBcs8GLX2ZFLXQy8y\",\"AFfw7cGg83uYk2Miy\",\"T6iBEE2jp7f7iEF2P\",\"yod5YhKtPqw2GfG9B\",\"CHvzhtXnv8HTbPQ56\",\"rhS8qXRjZcpDXkwnE\",\"2PufnQcsHsfymufX3\",\"n2qKKxomPnb4zez5M\",\"8sNv5PTHa7XQ8bNqR\",\"d8qtzoLB264iP8tdY\"],\"quality\":[4,5,3,2,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"a777e8chPvJkY3tKa\",\"quality\":4.142857142857143,\"family\":[{\"_id\":\"3fruHQM3iQjKwY4oi\",\"language\":\"cpp\"},{\"_id\":\"hTWrPnnCScgSsoN9A\",\"language\":\"java\"},{\"_id\":\"jFqttm7eFe8j4WMPu\",\"language\":\"javascript\"},{\"_id\":\"f24TDCGbYRjGfALQp\",\"language\":\"python3\"},{\"_id\":\"cMktD3Exn4bWgBYc5\",\"language\":\"ruby\"}]}}"]