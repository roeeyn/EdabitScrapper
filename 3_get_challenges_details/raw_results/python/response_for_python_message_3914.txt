a["{\"msg\":\"result\",\"id\":\"677\",\"result\":{\"_id\":\"zDei9LFWkX9d7wXyb\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"def malthusian(food_growth, pop_mult):\\n\\t\",\"difficulty\":1.1009174311926606,\"familyId\":\"oCfJhjcSrkXh3T5ck\",\"instructions\":\"A man named Thomas Malthus described what is now called a _Malthusian Catastrophe_. According to him, food production grows by a fixed amount, but population grows by a percentage. So, the food supply would soon be insufficient for the population.\\n\\nYour job is to find out when that will occur. For this challenge, assume 1 population needs 1 unit of food production. Food production and population both start at 100. The year starts at 0.\\n\\nThe catastrophe happens when the population is larger than food production.\\n\\nThe function will pass:\\n\\n- `food_growth` \u2060— an integer \u2060— food production increase per year.\\n- `pop_mult` \u2060— a floating-point number \u2060— population growth multiplier per year.\\n\\n### Examples\\n```\\nmalthusian(4255, 1.41) ➞ 20\\n# { food_prod: 85,200, pop: 96,467.77..., year: 20 }\\n\\nmalthusian(9433, 1.09) ➞ 107\\n# { food_prod: 1,009,431, pop: 1,010,730.28..., year: 107 }\\n\\nmalthusian(5879, 1.77) ➞ 12\\n# { food_prod: 70,648, pop: 94,553.84..., year: 12 }\\n```\\n\\n### Notes\\n- Return the year that the overtake happens, not the next year.\\n- Make sure you don't make the mistake of adding a year,  _then_ calculating the changes to **food** and **population**. That way, you miss year 0.\\n- If the population and food production are equal, that is _not_ a catastrophe.\",\"isHidden\":false,\"lab\":\"Test.assert_equals(malthusian(3900, 1.26), 31)\\nTest.assert_equals(malthusian(3367, 1.16), 51)\\nTest.assert_equals(malthusian(2393, 1.86), 9)\\nTest.assert_equals(malthusian(6560, 1.66), 14)\\nTest.assert_equals(malthusian(8481, 1.35), 26)\\nTest.assert_equals(malthusian(3805, 1.98), 9)\\nTest.assert_equals(malthusian(9492, 1.06), 166)\\nTest.assert_equals(malthusian(8278, 1.35), 26)\\nTest.assert_equals(malthusian(1228, 1.91), 7)\\nTest.assert_equals(malthusian(4791, 1.25), 34)\\nTest.assert_equals(malthusian(8194, 1.12), 78)\\nTest.assert_equals(malthusian(7418, 1.63), 15)\\nTest.assert_equals(malthusian(8700, 1.18), 51)\\nTest.assert_equals(malthusian(1066, 1.78), 8)\\nTest.assert_equals(malthusian(811, 1.46), 13)\\nTest.assert_equals(malthusian(7836, 1.33), 27)\\nTest.assert_equals(malthusian(4082, 1.54), 15)\\nTest.assert_equals(malthusian(4859, 1.87), 10)\\nTest.assert_equals(malthusian(4656, 1.44), 19)\\nTest.assert_equals(malthusian(2214, 1.53), 14)\\nTest.assert_equals(malthusian(1240, 1.10), 72)\\nTest.assert_equals(malthusian(4434, 1.21), 40)\\nTest.assert_equals(malthusian(2995, 1.51), 15)\\nTest.assert_equals(malthusian(578, 1.10), 62)\\nTest.assert_equals(malthusian(9768, 1.47), 20)\\nTest.assert_equals(malthusian(1508, 1.10), 74)\\nTest.assert_equals(malthusian(6311, 1.54), 17)\\nTest.assert_equals(malthusian(5502, 1.70), 13)\\nTest.assert_equals(malthusian(3170, 1.68), 12)\\nTest.assert_equals(malthusian(7139, 1.10), 93)\\nTest.assert_equals(malthusian(7385, 1.56), 16)\\nTest.assert_equals(malthusian(5845, 1.66), 14)\\nTest.assert_equals(malthusian(9937, 1.74), 13)\\nTest.assert_equals(malthusian(6516, 1.13), 69)\\nTest.assert_equals(malthusian(1973, 1.85), 9)\\nTest.assert_equals(malthusian(8045, 1.65), 15)\\nTest.assert_equals(malthusian(9784, 1.12), 79)\\nTest.assert_equals(malthusian(4520, 1.11), 79)\\nTest.assert_equals(malthusian(217, 1.17), 26)\\nTest.assert_equals(malthusian(1840, 1.37), 19)\\nTest.assert_equals(malthusian(7702, 1.08), 119)\\nTest.assert_equals(malthusian(6217, 1.16), 55)\\nTest.assert_equals(malthusian(7812, 1.96), 10)\\nTest.assert_equals(malthusian(8381, 1.80), 12)\\nTest.assert_equals(malthusian(9284, 1.11), 87)\\nTest.assert_equals(malthusian(6068, 1.71), 13)\\nTest.assert_equals(malthusian(5486, 1.86), 11)\\nTest.assert_equals(malthusian(2197, 1.27), 27)\\nTest.assert_equals(malthusian(3182, 1.40), 20)\\nTest.assert_equals(malthusian(8196, 1.55), 17)\\nTest.assert_equals(malthusian(3513, 1.20), 40)\\nTest.assert_equals(malthusian(4152, 1.24), 34)\\nTest.assert_equals(malthusian(2886, 1.79), 10)\\nTest.assert_equals(malthusian(1646, 1.63), 11)\\nTest.assert_equals(malthusian(8030, 1.18), 51)\\nTest.assert_equals(malthusian(2514, 1.10), 80)\\nTest.assert_equals(malthusian(1345, 1.53), 12)\\nTest.assert_equals(malthusian(877, 1.96), 6)\\nTest.assert_equals(malthusian(2035, 1.26), 28)\\nTest.assert_equals(malthusian(6007, 1.52), 17)\\n\\n# By Harith Shah\",\"language\":\"python3\",\"summary\":\"A man named Thomas Malthus described what is now called a Malthusian Catastrophe. According to him, food production grows by a fixed amount, but population grows by a percentage. So, the food supply would soon be insufficient for the population.\\n\\nYour job is to find out when that will occur. For this challenge, assume 1 population needs 1 unit of food producti\",\"tags\":[\"conditions\",\"dates\",\"math\",\"numbers\"],\"timestamp\":{\"$date\":1589759580073},\"title\":\"Malthusian Catastrophe\",\"stats\":{\"completed\":{\"total\":256,\"ratings\":[1,1,1,1,1,2,1,1,1,0,0,0,1,2,1,0,1,0,0,1,2,1,0,2,1,0,1,2,2,1,0,2,1,1,1,1,0,1,2,2,1,3,1,0,2,2,1,1,2,2,1,1,2,1,1,2,4,0,0,0,1,1,5,1,1,0,1,0,2,0,0,1,1,1,1,1,0,2,3,1,0,1,0,1,1,3,2,2,0,1,1,1,0,1,1,2,2,0,0,1,1,1,1,0,2,1,2,2,1,0,2,0,1,1,1,1,1,1,1,2,5,0,1,0,1,1,2,0,1,3,1,1,0,2,1,1,1,2,0,1,0,0,0,2,1,1,2,0,1,1,2,2,1,1,1,2,1,2,1,1,1,2,0,0,1,2,1,2,2,1,1,0,1,1,1,1,2,1,1,0,0,2,2,1,1,1,1,1,1,2,1,1,1,2,0,0,1,2,1,1,1,1,2,1,0,1,2,1,2,1,1,2,1,0,1,1,1,1],\"rators\":[\"n2BRY9X8899dcG8Bw\",\"AasGs8AeX9Lcb9xJn\",\"KdNDysEsy2TW5QRJ2\",\"gJYuGdkXEWWmGRLzu\",\"eMuCpJ2spXWkJjWNz\",\"66a9xX73nmTEuKs9k\",\"5HCu9Ydd86QgHDRNP\",\"FEYpu9RWysAgW3XnP\",\"RuHad7wL2R98BLRXy\",\"DEDniTrstQYGounXT\",\"avQssZaHSQRb5xzvC\",\"tAF9Gf6PiGogbZuWs\",\"GGdmhAvxXhqhhibJN\",\"nfXGHENb5md7m355s\",\"ZNnsMeNkdDhHjSrZb\",\"p6MPFLtmJ2z8EQT4Q\",\"NG8PWBSjsM8mMhQEq\",\"So6PHm74mfJuY2WTs\",\"P6qCi2LsR8cKG3XAK\",\"uMSxJGWe43a9FssCa\",\"d6my4JXaoZLGo6t3g\",\"YcCLwitFMAEJSnxAW\",\"R3HbDRbTpJKegtiiA\",\"Ln4MDDedCGJvQGvuK\",\"AF6LgdKhEdzwgRJom\",\"KPFGiRC3NYZJGrtED\",\"69hNsiJ43SLHyTdse\",\"Z3xHMKxAeZkz9HvQx\",\"8NpEgM3kbpnRYJCKT\",\"s2ZMtR9deh6Kia7pb\",\"FxJxxwowtXYCaLaeD\",\"mxX4rH5ELYkdZ2Mbw\",\"Nua6T3dBurBy3Qfg9\",\"s9GzySPz9vpMNQ2vj\",\"Nu7WgsBvrfPYxxMiN\",\"Fdo46T6EYE4ZyHuq9\",\"CnmcoGtQW6J3cakAT\",\"gb9rvGus2Jv7bjZSs\",\"hFYWNWgoipTZunHzB\",\"Wd9fkZkgWicQQxy42\",\"6yGuzK7Q2b6tsHD8X\",\"a777e8chPvJkY3tKa\",\"zd9FLSzsGz3evKafy\",\"ekQh3jzgGLsEMbKo3\",\"9pzFiFK3ANLjQfnr2\",\"vyaFTJDKChqYfczdu\",\"X88T4uAbWjBED8HeC\",\"4yNLEwL2rsx4EE5Nt\",\"MCbRkJAT6LJ94fRTi\",\"sDRY37TfoncsA2FSR\",\"s5M5RvgqR9BhB9JoC\",\"Cuy7McJ5y8BkXRRk9\",\"JEAi9mG3vvBomJ3Yu\",\"ahk2qiXKJA753wAJk\",\"cR3ibTMxLyEdDFCHY\",\"Yp7uvStL97cC9fKkY\",\"yr822PZmmiDDenxpB\",\"J5T8gZqiZXFuFDTQ7\",\"E3Ed7skMQ3fyGxEzf\",\"XrqNzJ2FRG8HnGiR6\",\"2QGRoQn2dRq3scu7k\",\"N2wnZXkhDH86mgjQ8\",\"aPLuemxzZ5iS57NBQ\",\"C9LKGu2g5hSijvDzA\",\"4rwxLqLs2mNZNg8NB\",\"yYxPzFqBgtQ9fsyHM\",\"8JyqsSbN2FJXPr3cw\",\"2ptN2mhjFwFcHyPZd\",\"qZQxPQ2kaNKAMesHT\",\"tRA43bWeW9bLciKEh\",\"rgvAJFwfCeYoYnFTK\",\"aRqQ42J5zqCmBNd8w\",\"8BFSTCnoe2QggN64c\",\"KpHrC7WPEojnzgEtz\",\"qB6KSTYC6H2TQEQY6\",\"NzbRqGWspQnWMoDrF\",\"3cF6NXq3ZEwdkgSjb\",\"aEm3Wvj2rFYRL8Lrb\",\"jNvegJWCk5HCtEMbK\",\"H4abACFDH5t8CnnyH\",\"FvFhg2wELM3SCZDZQ\",\"NGWPQ4zS6gusqbsQ3\",\"jNE5AHcJQWXz7efuP\",\"sHjfbGQGLHE6JR6qu\",\"JgWpNj5G78uttDiE2\",\"PXAcsKkssS2yLyDv2\",\"ckHFA5y8pkrXbsevA\",\"syRNbbPdLCGXbH2Gy\",\"Stye5FSYwYNbhFHgR\",\"4X3bLdgJjHMF8Lxug\",\"yNjkHfHESBAnCssPB\",\"R4SjTgDnpigJYDLyL\",\"3LiSLdtN58n46NEqg\",\"pDvFWMCD9fQwoBPcu\",\"dj5AyG5fWP8FdsSmZ\",\"9CoqdidjM9KbeKnHY\",\"yAouD3PxzED8a4gap\",\"fD42arz6uZxQcrQjn\",\"M8dQuMrEpP8Hc3tHN\",\"iojEnnY9FsMfYzp6f\",\"Pe8vWpDHRuH9nSGKW\",\"u7BA8hWLLg7sxyYwz\",\"7K2GEb5TZRtSpyyGS\",\"oBcs8GLX2ZFLXQy8y\",\"xK5Le9LPn9ZNddfbP\",\"i5iePG5GqhJJ8HEoB\",\"HqmxnQJM66Y57twhn\",\"SkQcb2sRn4as5KpnN\",\"p8qqFdJ3FSk5x9z3G\",\"yjtdwc2AC4jA2RWtn\",\"hkJGLuib5md8vZ9HD\",\"TPhfpB5tzQWSSn67n\",\"ta5CrWnBCRusD2WMo\",\"ZeTRCF5ufwFqAsHKt\",\"DYDJTyGgKFnBRLm2r\",\"KRyczPZSHYbKrBYnY\",\"g4NCSxxHqHCGMpWwT\",\"RehJGBFS6CYiWdjZx\",\"u7i7WPM63n42r8R8o\",\"aKzYNPqBqb3J3ZgyD\",\"8vWWL8Tx2yDai4ydm\",\"23KndF374EHHZNbL8\",\"ffjnHrx8Ym7A7pQWe\",\"dik7wis3hBJJBkYwK\",\"Lm6ChQCWBmaikmk5J\",\"CTKmXtrqDYqJBnuy8\",\"pduNK68oazqQTtbLp\",\"6HgMANhu6WiGyXSGN\",\"pn7FezrkZZCui7fkJ\",\"mG8HqKiAQFTdRZthG\",\"tpxMgkGSHwBjS95Ta\",\"8WpvgSbQciTQWdd8T\",\"gXTAie79kiw28tx5u\",\"skbp3mauBhvs2Pjee\",\"rrSC943cCKNG48sH4\",\"QRv96jmNaYsWkxQEG\",\"d8qtzoLB264iP8tdY\",\"bmthyKcDF922zNqxK\",\"o4ixjQGSaYqA2JoM4\",\"LJkoYfgJwZ6oB7jBn\",\"oXdhczMThyirgM2eN\",\"DPi9QGLctq2y76KuE\",\"axdSNLZpiCDF8RS6n\",\"wRttWTM59y8m5mx7x\",\"mHvoroWGDLYbJqQJa\",\"BrTDhPJcACL2bsrpJ\",\"dBzwBtRjZqB98DJeB\",\"Kh3Pc2ZRusurLaMyP\",\"rxr3nwpDGDEkBJRgD\",\"yod5YhKtPqw2GfG9B\",\"RGMbFMZXJr7DhcAJy\",\"GcR9CA587pfQuWHyB\",\"cAP3n5NY64uoMwzRR\",\"J3upzLHuEwXH7Z2hx\",\"GqErHwe6rLZi8SRFL\",\"ga7aTTEThzsELuC2j\",\"dYPkStFnLvAMsHSzZ\",\"4Wx8m46eWWadZNuLq\",\"4fjSgcqhQQZM2ZFRP\",\"5f6oSeq4r5WTXLdCQ\",\"yTtSCvGPyYna6JuRC\",\"fTNQmMvTZhhiGBCMe\",\"wjc4iejpErBhxWwHo\",\"5XiuAqicKD4hBdu63\",\"nJXgbSQozcoE8Wn4N\",\"HuNF3xTBzmatyGSTm\",\"FuYTQcDNjct58rqPa\",\"cZccqzRQ9GgjQF6Az\",\"WdKdsgH9gXkKgCycx\",\"5hQnRWiKkhgKJXNMP\",\"DpnYcMphntjsQ96qg\",\"DqNQn9Jsxcu5HijKE\",\"kAkLAF9T5McSxXJCT\",\"Jqk2uJZZxEv5wZFze\",\"nFbmNzMQ38TncmfQX\",\"hERDiXzMt3bagzfKp\",\"974cv448kw6Wu2JF6\",\"Fk9kLwoG4Brf4KsKf\",\"iF4tdvn5sA9CM4T6T\",\"buX4mCQhtXCfBjeno\",\"Fb2wehA7QgTFWry2x\",\"pveK5gtGcm8k4wScM\",\"Lg4t6SEWgtYz4u7Cj\",\"Ds7L5bksw2QRHjrKL\",\"AXcnPX68zdMiLNSmu\",\"5S9nX4rKsnCcnv4Cz\",\"5HTSi5wQNAdLm57LB\",\"eYfPWvZwnJQkHbSTK\",\"vCxuabDxEv9YC3Szb\",\"srJ34BaybkQh3qRkM\",\"pCMhfoZ5c6eBuCqbp\",\"q9FfWNiMDKRiaCJ5j\",\"KJCDwGkoXh8qtbbKr\",\"LQxof8pGabGuWP7Gn\",\"LCuvvWMwiGuqTwNRi\",\"pPpmP7xeJzGgK362R\",\"7dQYiDeTcMztbGyso\",\"CHvzhtXnv8HTbPQ56\",\"AFfw7cGg83uYk2Miy\",\"XD5nmvKQchKezPXhy\",\"qAby4AWXmTNeusvg3\",\"BJp2WkwLWGHHB5oQW\",\"PC3pLs36zNzpRDSuE\",\"c2q7mY39z5JPEMCaM\",\"u5u2YpHXiNgzDNJdX\",\"ep2onrEqLZbxaWRwG\",\"2EbDCCJJvCfKkbYia\",\"X4rzfxGgxx6CS7Bpz\",\"w3QDkmjZj2dAFDsjq\",\"9Ly8afdtofp8DXzrt\",\"FxbTzThBiTnRzfirA\",\"4TmgHkn5vqyHK3sYC\",\"vCeeMuYDbz3MB4vsk\",\"g2mqHYvQmr78mET8i\",\"wwz3ixWSv8rFDHBXd\",\"NGvCPuMiAP3xrRLfB\",\"Afnps7TJQuS9sipMb\",\"eW9R2SCoYnY8HBAdL\",\"S45HcJsBaNxKrAfur\",\"gKnWjDjwrJh7MK2df\",\"jBo3xAopr37GFzY8g\",\"8PwfYqoDQFThzNtvf\",\"E9ttMPTkLkKG6nZrg\",\"d9LBRxvADNBB5QJMB\",\"iP7wNofhZXTkJ9ryG\",\"zC8WrPp5BC6c2exrW\",\"pwWtbXEjzuvrhEGwt\",\"MKT7khMBGXzA22ykf\",\"rCrbqMiaGPgHYTNxu\",\"dzS6WBTMHyFEag6Fp\",\"B4y8aoyXJtskYPFEL\",\"Qyfyyw6oC4EHAndzo\",\"JS3hNM3XXkxPdg3yk\",\"5QN8R22z43SrwoHDz\",\"2MjzJ7yxh3eT3xbng\",\"gbGzZz5Yq5hT357v8\",\"cdXmwjupCXSvJTSNo\",\"ahWFxnaxt9bXSA4f3\",\"Wi4H6ayKsNDWWQCG5\",\"GgQqni8TkbqEBGcsy\",\"sMcFMPkMJC4Kh6ymj\",\"FiaTpm7ehfDv43wSG\",\"cmH5k3s9REYMzDBMn\"],\"quality\":[3,5,5,5,4,5,5,5,5,5,4,5,5,5,5,3,5,5,5,5,5,5,5,5,5,5,5,5,5,3]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":4.733333333333333,\"family\":[{\"_id\":\"4BeTkEwBXeuSKJTYe\",\"language\":\"javascript\"},{\"_id\":\"zDei9LFWkX9d7wXyb\",\"language\":\"python3\"},{\"_id\":\"xCgbyMvWNfebFF2yS\",\"language\":\"ruby\"}]}}"]