a["{\"msg\":\"result\",\"id\":\"1562\",\"result\":{\"_id\":\"pnd7xPYuvogkNfHg6\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"def get_best_student(grades):\\n\\t\",\"difficulty\":2.0974358974358975,\"familyId\":\"XFJqLacdNYCzYp5FA\",\"instructions\":\"Given a dictionary with students and the grades that they made on the tests that they took, determine which student has the best Test Average. The `key` will be the student's name and the `value` will be a list of their grades. You will only have to **return the student's name**. You do not need to return their Test Average.\\n\\n### Examples\\n```\\nget_best_student({\\n  \\\"John\\\": [100, 90, 80],\\n  \\\"Bob\\\": [100, 70, 80]\\n}) ➞ \\\"John\\\"\\n\\n# John's avg = 90\\n# Bob's avg = 83.33\\n\\nget_best_student({\\n  \\\"Susan\\\": [67, 84, 75, 63],\\n  \\\"Mike\\\": [87, 98, 64, 71],\\n  \\\"Jim\\\": [90, 58, 73, 86]\\n}) ➞ \\\"Mike\\\"\\n```\\n\\n### Notes\\nAll students in a dictionary will have the same amount of test scores. So no student will have taken more tests than another.\",\"isHidden\":false,\"lab\":\"Test.assert_equals(get_best_student({\\n\\t\\\"John\\\": [100, 90, 80],\\n\\t\\\"Bob\\\": [100, 70, 80]\\n}), \\\"John\\\", \\\"Example #1\\\")\\n\\nTest.assert_equals(get_best_student({\\n\\t\\\"Susan\\\": [67, 84, 75, 63],\\n  \\\"Mike\\\": [87, 98, 64, 71],\\n  \\\"Jim\\\": [90, 58, 73, 86]\\n}), \\\"Mike\\\", \\\"Example #2\\\")\\n\\nTest.assert_equals(get_best_student({\\n\\t\\\"Tim\\\": [93, 84, 49, 71, 76, 83],\\n  \\\"Nick\\\": [88, 91, 74, 72, 63, 68],\\n  \\\"Brad\\\": [100, 94, 72, 64, 58, 81],\\n\\t\\\"Annie\\\": [79, 93, 82, 82, 63, 87]\\n}), \\\"Annie\\\")\\n\\nTest.assert_equals(get_best_student({\\n\\t\\\"Eddie\\\": [65, 85, 72, 76],\\n  \\\"Brock\\\": [55, 97, 82, 91],\\n  \\\"Jessica\\\": [78, 62, 79, 99]\\n}), \\\"Brock\\\")\",\"language\":\"python3\",\"summary\":\"Given a dictionary with students and the grades that they made on the tests that they took, determine which student has the best Test Average. The key will be the student's name and the value will be a list of their grades. You will only have to return the student's name. You do not need to return their Test Average.\\n\\nExamples\\ngetbeststudent({\\n  \\\"John\\\": [100, \",\"tags\":[\"objects\",\"arrays\",\"sorting\",\"loops\"],\"timestamp\":{\"$date\":1574289027514},\"title\":\"Get Student with Best Test Avg.\",\"stats\":{\"completed\":{\"total\":229,\"ratings\":[2,2,2,2,2,2,1,2,3,0,2,3,4,2,1,2,2,2,2,3,0,3,3,2,2,1,2,1,2,3,2,3,2,2,2,2,2,2,2,3,2,2,1,2,1,1,2,3,2,3,2,1,3,2,1,2,1,3,3,2,3,3,3,1,2,3,0,4,2,0,3,1,0,2,2,2,2,2,3,2,3,3,3,1,1,2,3,2,2,2,1,2,3,3,1,2,2,3,1,3,2,3,1,3,3,1,1,2,3,2,3,2,3,3,2,5,3,1,3,1,1,2,3,0,1,2,3,3,3,1,2,0,3,3,3,0,0,3,2,3,2,3,2,3,3,1,1,3,3,1,3,3,1,2,0,3,2,1,2,3,2,2,2,3,3,2,2,2,3,3,3,1,2,3,2,3,3,5,2,3,3,3,0,0,2,2,2,2,2,3,2,1,1,1,3],\"rators\":[\"tAF9Gf6PiGogbZuWs\",\"AYaEkTWLMmfzpwejr\",\"24tzJ97DEQKk3BzQh\",\"DWfFB2SBrXFtpfXrH\",\"Dw8RZgg5iHBuFrWwQ\",\"HqmxnQJM66Y57twhn\",\"ScqeBJf3ajJxC5A6v\",\"kWi8wiAR2yLFYXoHf\",\"HQxp7NcdvF92G7bYS\",\"8JyqsSbN2FJXPr3cw\",\"fAoLuqbGvHn4w2PHf\",\"tsgTLnTRSv6ojieBh\",\"Jg8ZSRXe3NoDMCqGu\",\"6ShafRStcvew4GfCh\",\"N2wnZXkhDH86mgjQ8\",\"otXtuQygbcYATMZoP\",\"DvzpcjeQsLCSZc9r9\",\"fP7mHD7yL42xBFNgw\",\"d2rkaKAaLFYsyTLQq\",\"Nj6FwgBtAXsaQwsM2\",\"gb9rvGus2Jv7bjZSs\",\"ySRnygsLwGGsmZhfa\",\"YJQ3MQobBRcRM6Xmz\",\"FgkYtHLxeD8pETJ8T\",\"hAzy9apJgLWwRFGPJ\",\"wZMGsR6M9RezNhgMJ\",\"XKi8iZXBCHCaebSHh\",\"3PLxkYD7foyKRQ6rK\",\"mYfBtboCAW2iTvQTv\",\"WX6R5brerMTrHs5ZM\",\"2fxapKr8XGdNeaKi2\",\"aCNWav8S8Try9RkC6\",\"omQhBXTwsBMv6kgz4\",\"j4yrNb6JAQJmBw2Pz\",\"zZo9NtDMkY4HdWmWP\",\"7HnYJaxquTgbBx2eM\",\"nzx4uAPg3hCceyFPE\",\"8Nt83ze8MuAp7ar7u\",\"nc7bRhkxgKyqusYe3\",\"XjyaCd8bviTitHTwa\",\"C4QntmkYtB89GNtpd\",\"K96FwtfDDN5WM4Bb7\",\"8PwfYqoDQFThzNtvf\",\"x3sS44ajEuS9Wm7ET\",\"u5u2YpHXiNgzDNJdX\",\"cXp7BXyiNJzBWdvYY\",\"kBmhcwkCqxiy4GwiZ\",\"PqEKjCDkJtYoYuZfj\",\"xxGEyjQLHJPZzxQXS\",\"ydEdzuCCZt4yny9Rq\",\"yKttxy9JGn5Jzwuj6\",\"s5M5RvgqR9BhB9JoC\",\"iHMehMwgYQGhGAF72\",\"2rc86eoe88DLhFeJD\",\"4zvByd8MNcc3PpRFN\",\"s2NvfmnJKupbpnA4k\",\"4Sntowj2cbMFRDMJa\",\"EKrSBrTXuhE3f4xsR\",\"Jqk2uJZZxEv5wZFze\",\"JAe93nc5vNewSckSB\",\"pMuvoqcmxHbuRSfb9\",\"gMJhLdyw3tH7L96X2\",\"wwMcJQRvf3X59Jyev\",\"JTk9wB6o6aQDqfkS6\",\"ab7BsQuhDo3QgE6bh\",\"kQH5b8MXJunh84Czq\",\"EQbnbkkPYtGxiviTp\",\"yoYQqaY6GszuTkNSs\",\"aW4DkonHaJw6Q8PyP\",\"paMgo7dtjXrgJXJeq\",\"sz8ufn9i8zeiGWpAy\",\"2innwjWqxJHo4eRGh\",\"wZoxzQDbso9SMAPkY\",\"ftRou9zcw69GCx4iv\",\"dMnE8vgYgSmqJTXFB\",\"p3dsCFdWGzWGhFrSQ\",\"5J4tAkdA45c76xAfk\",\"Jsrfs8nEy37mJxbqD\",\"jaP8tfdxt4XbSGgo6\",\"Yp7uvStL97cC9fKkY\",\"AasGs8AeX9Lcb9xJn\",\"4CFzv558qbGcpQwc4\",\"pkQBaSzukotPEXmrD\",\"PXAcsKkssS2yLyDv2\",\"fjTNxwuBDJhAbwQtx\",\"XbwyB44kHPnRgQcrB\",\"BeFnbPbMnAM2SjBdZ\",\"WLFPvm65aHfgwQy7N\",\"kyxi2FwerhAoufTyB\",\"yZvzB3qFb8pkHy4dg\",\"w3A7cBWyAfukk6xEQ\",\"CEd9tLdXeDeNHSzys\",\"g8yJiPAWXbrgxbjfZ\",\"cR3ibTMxLyEdDFCHY\",\"axj8sXojNZFJNqjPc\",\"mDWNyaaQ9hvPCRzSd\",\"n2BRY9X8899dcG8Bw\",\"aEm3Wvj2rFYRL8Lrb\",\"dXMbkgQFoN37BhruB\",\"ghTAisPZoS5FTqQnK\",\"JQ5uoxA4WZgN6HyJk\",\"ZNnsMeNkdDhHjSrZb\",\"YRstQuthRkFeBiXug\",\"iCDqhZGvszrXpDRuW\",\"j4aMvjansKZHMHyik\",\"3Zceb8GudqAG3onG3\",\"ywk3XGvcmpTgRxwZa\",\"kYWb8BwpKwunQkxeX\",\"gJYuGdkXEWWmGRLzu\",\"EjbDDFRECrzQDkzrX\",\"J5T8gZqiZXFuFDTQ7\",\"8sNv5PTHa7XQ8bNqR\",\"KdNDysEsy2TW5QRJ2\",\"ekQh3jzgGLsEMbKo3\",\"HF28xZKSLM9wEuqNg\",\"yr822PZmmiDDenxpB\",\"bjCsNdAEP4v9RwAjK\",\"DQskEvAv5KiJDPtGF\",\"5s4qhuRJijYaDNXva\",\"KRmxvA4mWgfKvHmYN\",\"MKT7khMBGXzA22ykf\",\"GmnxPhfiD7roRhsRX\",\"DEDniTrstQYGounXT\",\"hnyhBFWwNCz9mDfSi\",\"3pxHTZBsv7MKzFG6Y\",\"DrkR35NqnP9NDLbq6\",\"4rwxLqLs2mNZNg8NB\",\"djeesDJQwNJay4RTe\",\"So6PHm74mfJuY2WTs\",\"b5p2BRxyHrrpGC5J3\",\"W5TajitmCyxz87zAC\",\"Ecg4m7srYGgZsb4Ck\",\"hab8YixsXxe4CcZpP\",\"4yNLEwL2rsx4EE5Nt\",\"a777e8chPvJkY3tKa\",\"9dgvEreRDYRiwLmYv\",\"JZbBYihgT6m7bKvgc\",\"JS3hNM3XXkxPdg3yk\",\"NfMJuiBk6FN5Jc6ow\",\"iojEnnY9FsMfYzp6f\",\"JmkgMJyvrvqTMfdqF\",\"dzS6WBTMHyFEag6Fp\",\"Wv2vJnEj8ywNmARoF\",\"CwXsu25ygLEwQbmQC\",\"5qfcG54cbBC8ujxav\",\"9pzFiFK3ANLjQfnr2\",\"iS5BrkGLzJyPK7nKt\",\"yjtdwc2AC4jA2RWtn\",\"ZrKCkX7xxGGZzauFW\",\"dEuJGZbBQkveCXEFk\",\"f2BoqyCpgnmjEjLqx\",\"gSFJPsMXnqAog3Q9f\",\"55RQznnuTGpsj3EXd\",\"jBR47vA7HwAZqp4QA\",\"GGprTwrkjuccmrQRg\",\"pmgFEciNrd3ES9tuu\",\"dkcmCKwqApX5jBggc\",\"YRdu63HNTKd6YmWpd\",\"xwEZk3bNZoNDPJYF5\",\"gMjAMD8XPK9sbx7eT\",\"axdSNLZpiCDF8RS6n\",\"9FCeFzjPA4jrQ7oHW\",\"DPi9QGLctq2y76KuE\",\"8fZxjQfuXw5HMSRJM\",\"QRv96jmNaYsWkxQEG\",\"xn7uGNKeAwPEkP9oA\",\"TJv44Lcsc9NnDuDkP\",\"HjZQR6wRLcxN5hKaf\",\"dYPkStFnLvAMsHSzZ\",\"J3upzLHuEwXH7Z2hx\",\"6MjSiiBLPcvXbXcaZ\",\"gXTAie79kiw28tx5u\",\"4fhjJBvLBWh6QeSih\",\"oBcs8GLX2ZFLXQy8y\",\"7scpcTEp3SEx5Wjg9\",\"7ifh8r4gvyYMhKB94\",\"2QziknsznNeMPRh3g\",\"8we49y2cXuirbyGZg\",\"eYfPWvZwnJQkHbSTK\",\"cAP3n5NY64uoMwzRR\",\"CqoDZaJGarmKbvfQd\",\"qAby4AWXmTNeusvg3\",\"srJ34BaybkQh3qRkM\",\"RTDx9axf52kxhFjwZ\",\"EfxwqhYdapX3dMQC2\",\"GGdmhAvxXhqhhibJN\",\"FEYpu9RWysAgW3XnP\",\"PWgzeK859suojbrRx\",\"YcCLwitFMAEJSnxAW\",\"rfyEkETeoS96QNH4e\",\"zoMdfcxPxTLrhKvAd\",\"PC3pLs36zNzpRDSuE\",\"MpfytGFYF77emJ3cT\",\"ey3CASd6Je5LEJzfB\",\"gKnWjDjwrJh7MK2df\",\"T6iBEE2jp7f7iEF2P\",\"suArq5BbSy7gD6xri\",\"2PufnQcsHsfymufX3\",\"o4ixjQGSaYqA2JoM4\",\"yod5YhKtPqw2GfG9B\",\"6dqoF6LmEaRPsCSpT\",\"JhX7jvtpwNyxcc39m\",\"mw9464S5dnenqzvpm\",\"n2qKKxomPnb4zez5M\",\"eHcgvkTGsH7ZziqBo\",\"wrL4iX2CCSqDCCty3\",\"Ds7L5bksw2QRHjrKL\"],\"quality\":[5,5,5,3,5,5,5,5,4,5,5,5,5,5,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"quality\":4.823529411764706,\"family\":[{\"_id\":\"nSg24HbusyCQKn9xk\",\"language\":\"javascript\"},{\"_id\":\"pnd7xPYuvogkNfHg6\",\"language\":\"python3\"},{\"_id\":\"ALrBpait7dY5W49oJ\",\"language\":\"ruby\"}]}}"]