a["{\"msg\":\"result\",\"id\":\"2098\",\"result\":{\"_id\":\"2rQcGmSYvXRtxSuHn\",\"author\":\"persolut\",\"authorId\":\"xn7uGNKeAwPEkP9oA\",\"code\":\"def rotate_matrix(mat, turns):\\n\\t\",\"difficulty\":2.9375,\"quality\":4.666666666666667,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"F34yB4vrE6B9HStjm\",\"instructions\":\"Create a function which takes 2 parameters:\\n-  A matrix `mat` with `m` rows and `n` columns, containing data of any type.\\n-  An optional integer parameter `turns` giving the number of clockwise 90 degree rotations by which to transform the matrix (defaults to 1).\\n\\nThe function should return a new matrix with the elements rotated clockwise or counter-clockwise by the number of turns given.\\n\\nFor positive integers: 1 turn = 90° clockwise, 2 turns = 180° clockwise, 3 turns = 270° clockwise, 4 turns = 360° clockwise, etc.\\n\\nFor negative integers: -1 turn = 90° counter-clockwise, -2 turns = 180° counter-clockwise, -3 turns = 270° counter-clockwise, -4 turns = 360° counter-clockwise, etc.\\n\\n### Examples\\n```\\nrotate_matrix([\\n  [1,  2,  3,  4],\\n  [5,  6,  7,  8],\\n  [9, 10, 11, 12]\\n]) ➞ [\\n  [ 9, 5, 1],\\n  [10, 6, 2],\\n  [11, 7, 3],\\n  [12, 8, 4]\\n]\\n# A clockwise rotation.\\n# Left to right columns become rows in bottom to top order.\\n\\n\\nrotate_matrix([[\\\"+\\\", \\\"-\\\"], [\\\"*\\\", \\\"/\\\"]], -1) ➞ [[\\\"-\\\", \\\"/\\\"], [\\\"+\\\", \\\"*\\\"]]\\n# A counter-clockwise rotation.\\n# Right to left columns become rows in top to bottom order.\\n\\n\\nrotate_matrix([[1, 2, 3], [4, 5, 6]], 4) ➞ [[1, 2, 3], [4, 5, 6]]\\n# A 360° turn returns all elements to their original positions.\\n```\\n\\n### Notes\\n-  All given matrices (2-dimensional lists) will have at least 1 row and at least 1 column.\\n-  Do not mutate the original matrix, the return value should be a new 2-dimensional list with values _copied_ from the original list.\\n-  **Do not import any libraries** - the challenge is to come up with your own solution.\\n-  Make sure your solution is efficient enough to cope with a large number of turns\\n-  You must provide a default value for the `turns` parameter.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"mat1 = [[1,2,3], [4, 5, 6]]\\nmat2 = [[1,2,3,4,5,6,7,8,9]]\\n\\nTest.assert_equals(rotate_matrix(mat1), [[4,1], [5,2], [6,3]])\\nTest.assert_equals(rotate_matrix(mat1, -1), [[3,6], [2,5], [1,4]])\\nTest.assert_equals(rotate_matrix(mat1, 2), [[6,5,4], [3,2,1]])\\nTest.assert_equals(rotate_matrix(mat1, 4), [[1,2,3], [4, 5, 6]])\\nTest.assert_equals(rotate_matrix(mat2, 1), [[1],[2],[3],[4],[5],[6],[7],[8],[9]])\\nTest.assert_equals(rotate_matrix(mat2, 2), [[9,8,7,6,5,4,3,2,1]])\\nTest.assert_equals(rotate_matrix(mat2, 3), [[9],[8],[7],[6],[5],[4],[3],[2],[1]])\\nTest.assert_equals(rotate_matrix([['+','-'], ['*','/']], -1), [['-','/'], ['+','*']])\\nTest.assert_equals(rotate_matrix([\\n    ['#', '#', '#', '|', '*', '*', '*'], \\n    ['#', '#', '#', '|', '*', '*', '*'], \\n    ['#', '#', '#', '|', '*', '*', '*'], \\n    ['-', '-', '-', '|', '-', '-', '-'], \\n    ['$', '$', '$', '|', '&', '&', '&'], \\n    ['$', '$', '$', '|', '&', '&', '&'], \\n    ['$', '$', '$', '|', '&', '&', '&']\\n], -5),[\\n    ['*', '*', '*', '-', '&', '&', '&'], \\n    ['*', '*', '*', '-', '&', '&', '&'], \\n    ['*', '*', '*', '-', '&', '&', '&'], \\n    ['|', '|', '|', '|', '|', '|', '|'], \\n    ['#', '#', '#', '-', '$', '$', '$'], \\n    ['#', '#', '#', '-', '$', '$', '$'], \\n    ['#', '#', '#', '-', '$', '$', '$']])\\nTest.assert_equals(rotate_matrix([['in','mainly','plain'], ['rain','falls','the'], ['The','Spain','on']], 4097), [['The','rain','in'], ['Spain','falls','mainly'], ['on','the','plain']])\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,4,5,4,2,3,5,3,4,3,2,5,3,3,5,4,5,3,4,1,1,3,3,5,1,2,3,5,4,2,0,3,0,1,5,0,5,3,1,3,2,0,4,2],\"quality\":[5,5,3,5,5,5],\"rators\":[\"xn7uGNKeAwPEkP9oA\",\"8PwfYqoDQFThzNtvf\",\"tAF9Gf6PiGogbZuWs\",\"aEm3Wvj2rFYRL8Lrb\",\"s5M5RvgqR9BhB9JoC\",\"5dHucvf2qBYyKim7X\",\"mDWNyaaQ9hvPCRzSd\",\"kDq2TnPdy7hGKdAD5\",\"4fhjJBvLBWh6QeSih\",\"SGhPxX5bHGL8zZqtt\",\"no46qNkTbNeHepe64\",\"siKtn4x4vNM2m2QBf\",\"h4x2jaMdj5aQZbW5g\",\"iS5BrkGLzJyPK7nKt\",\"58M252WF7SPRinfBx\",\"d6iEb2BDDofyeePh9\",\"eHcgvkTGsH7ZziqBo\",\"p8qqFdJ3FSk5x9z3G\",\"b3Dk2LqoEgripS3Y3\",\"8sNv5PTHa7XQ8bNqR\",\"8JyqsSbN2FJXPr3cw\",\"J23RcmzbdtBbPCTjT\",\"2PufnQcsHsfymufX3\",\"i8EWTxQrBKXyXLsyy\",\"yjtdwc2AC4jA2RWtn\",\"iojEnnY9FsMfYzp6f\",\"rYdP2qk6PxthStpce\",\"HubwLRWj6WDeP8MkN\",\"J3upzLHuEwXH7Z2hx\",\"gJYuGdkXEWWmGRLzu\",\"bJaPCBx63YxdJAuTS\",\"Hx8ABi9dWW9bctRSo\",\"ss8kTqmbJyWsx2dp9\",\"DPi9QGLctq2y76KuE\",\"G7aKL8DYhZ6MPQXXj\",\"T6iBEE2jp7f7iEF2P\",\"tkRuKMWxoSyTXnvbb\",\"Fk9YcngdB7meTXSgA\",\"SbGLSZ5piLATC8bop\",\"qKaafrxyeXizQhtnm\",\"68zWiHdiSfDcaZths\",\"3cMFqsSFXrDtL2fYc\",\"SFyGnexSYdfWGvMsS\",\"5ZJBtTykFhiapwxzC\",\"QWjsXnLaJ7xfL3Amq\",\"bt6gYPR2zgkqSA72i\",\"qcHggCrixktdEEYC4\",\"m3R9aaRoEbaxRsSNA\",\"GTKsdeEihE636Le9i\"],\"total\":53},\"flags\":0},\"summary\":\"Create a function which takes 2 parameters:\\nA matrix mat with m rows and n columns, containing data of any type.\\nAn optional integer parameter turns giving the number of clockwise 90 degree rotations by which to transform the matrix (defaults to 1).\\n\\nThe function should return a new matrix with the elements rotated clockwise or counter-clockwise by the number\",\"tags\":[\"algorithms\",\"arrays\",\"data_structures\"],\"timestamp\":{\"$date\":1601220811838},\"title\":\"Right Rotation\",\"family\":[{\"_id\":\"YaNGpXokSdzXXZXyP\",\"language\":\"cpp\"},{\"_id\":\"teiwZ6f27KebAdeQe\",\"language\":\"javascript\"},{\"_id\":\"2rQcGmSYvXRtxSuHn\",\"language\":\"python3\"},{\"_id\":\"jcQWMGW83W9uA23Ya\",\"language\":\"ruby\"}]}}"]