a["{\"msg\":\"result\",\"id\":\"1919\",\"result\":{\"_id\":\"dHGpjWHJ265BCthiM\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"def current_streak(today, lst):\\n\\t\",\"difficulty\":2.6666666666666665,\"familyId\":\"WPTPKJin7qpZHwNgX\",\"instructions\":\"Create a function that takes the current day (e.g. `\\\"2019-09-30\\\"`), a list of date dictionaries and returns the \\\"current streak\\\" (i.e. number of consecutive days in a row).\\n\\n### Examples\\n```\\ncurrent_streak(\\\"2019-09-23\\\", [\\n  {\\n    \\\"date\\\": \\\"2019-09-18\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-09-19\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-09-21\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-09-22\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-09-23\\\"\\n  }\\n]) ➞ 3\\n\\ncurrent_streak(\\\"2019-09-25\\\", [\\n  {\\n    \\\"date\\\": \\\"2019-09-16\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-09-17\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-09-21\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-09-22\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-09-23\\\"\\n  }\\n]) ➞ 0\\n```\\n\\n- The list of dates is sorted chronologically.\\n- The `today` parameter will always be greater than or equal to the last date in the list.\\n- An empty list should return `0`.\",\"isHidden\":false,\"lab\":\"Test.assert_equals(current_streak(\\\"1985-03-19\\\", [\\n  {\\n    \\\"date\\\": \\\"1985-03-19\\\"\\n  }\\n]), 1)\\n\\nTest.assert_equals(current_streak(\\\"2019-09-23\\\", [\\n  {\\n    \\\"date\\\": \\\"2019-09-18\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-09-19\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-09-21\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-09-22\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-09-23\\\"\\n  }\\n]), 3)\\n\\nTest.assert_equals(current_streak(\\\"2019-09-30\\\", [\\n  {\\n    \\\"date\\\": \\\"2019-09-18\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-09-19\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-09-20\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-09-26\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-09-27\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-09-30\\\"\\n  }\\n]), 1)\\n\\nTest.assert_equals(current_streak(\\\"2019-09-23\\\", [\\n  {\\n    \\\"date\\\": \\\"2019-09-18\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-09-19\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-09-20\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-09-21\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-09-22\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-09-23\\\"\\n  }\\n]), 6)\\n\\nTest.assert_equals(current_streak(\\\"2019-09-23\\\", [\\n  {\\n    \\\"date\\\": \\\"2019-06-25\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-06-28\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-07-02\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-07-07\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-07-09\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-07-12\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-07-13\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-07-14\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-07-15\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-07-16\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-07-17\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-07-25\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-07-26\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-07-29\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-07-31\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-08-03\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-08-06\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-08-07\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-08-09\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-08-12\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-08-13\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-08-14\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-08-16\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-08-17\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-08-21\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-08-22\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-08-23\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-08-24\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-08-25\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-08-26\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-08-27\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-08-28\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-08-29\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-08-30\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-09-02\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-09-03\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-09-04\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-09-05\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-09-06\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-09-08\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-09-11\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-09-12\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-09-13\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-09-15\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-09-16\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-09-17\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-09-18\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-09-20\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-09-22\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-09-23\\\"\\n  }\\n]), 2)\\n\\nTest.assert_equals(current_streak(\\\"2019-09-25\\\", [\\n  {\\n    \\\"date\\\": \\\"2019-09-16\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-09-17\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-09-21\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-09-22\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-09-23\\\"\\n  }\\n]), 0)\\n\\nTest.assert_equals(current_streak(\\\"2019-09-16\\\", []), 0, \\\"An empty list should return 0.\\\")\",\"language\":\"python3\",\"summary\":\"Create a function that takes the current day (e.g. \\\"2019-09-30\\\"), a list of date dictionaries and returns the \\\"current streak\\\" (i.e. number of consecutive days in a row).\\n\\nExamples\\ncurrent_streak(\\\"2019-09-23\\\", [\\n  {\\n    \\\"date\\\": \\\"2019-09-18\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-09-19\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-09-21\\\"\\n  },\\n  {\\n    \\\"date\\\": \\\"2019-09-22\\\"\\n  },\\n  {\\n    \\\"date\\\"\",\"tags\":[\"dates\",\"loops\",\"objects\",\"games\"],\"timestamp\":{\"$date\":1572693083273},\"title\":\"Current Streak\",\"stats\":{\"completed\":{\"total\":94,\"ratings\":[1,1,1,1,1,3,3,2,3,1,0,2,0,3,3,3,3,2,2,3,2,2,5,4,3,3,2,3,4,3,3,3,1,2,2,3,3,3,5,4,2,4,0,5,2,0,4,2,2,3,3,4,4,1,3,4,1,3,3,3,4,4,4,2,2,3,3,3,5,3,3,2,4,2,2,4,2,4,4,3,2,3,2,3,2,2,4],\"rators\":[\"JEAi9mG3vvBomJ3Yu\",\"grdgbva88QijFMPkn\",\"tAF9Gf6PiGogbZuWs\",\"K96FwtfDDN5WM4Bb7\",\"8JyqsSbN2FJXPr3cw\",\"otXtuQygbcYATMZoP\",\"HqmxnQJM66Y57twhn\",\"gMJhLdyw3tH7L96X2\",\"2fxapKr8XGdNeaKi2\",\"Nj6FwgBtAXsaQwsM2\",\"XKi8iZXBCHCaebSHh\",\"SKabuq5XuhXBugKBa\",\"8QNgZLrNbHPFRAEu5\",\"dW5BJXE5uY2CB2MY6\",\"hAzy9apJgLWwRFGPJ\",\"JpeTZm5QTWFLqg9Bx\",\"J2zXLowtk6azJyFaD\",\"pryBJYX32n8nvRvDu\",\"ekvdWQoiFkX5cQbk9\",\"nQRzZKeDKuLRf9chX\",\"gb9rvGus2Jv7bjZSs\",\"Jqk2uJZZxEv5wZFze\",\"sJWTa7iWeRoRtqJ8N\",\"s5M5RvgqR9BhB9JoC\",\"SGhPxX5bHGL8zZqtt\",\"AasGs8AeX9Lcb9xJn\",\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\",\"6c4xjEdFxdYw5xGrt\",\"ZNnsMeNkdDhHjSrZb\",\"n2BRY9X8899dcG8Bw\",\"YRstQuthRkFeBiXug\",\"gJYuGdkXEWWmGRLzu\",\"sz8ufn9i8zeiGWpAy\",\"g4nCzXkh6uMaEgmdY\",\"Z3qcxWmjx4G5HQ3Lr\",\"nLpdvK7EcahCqNe8X\",\"jFcHRfu77aNu6YpZg\",\"7g3vZaQXhLpxrajyg\",\"4xwButZn34q92d9Yn\",\"W5TajitmCyxz87zAC\",\"73eTfjtjyYWojAZ6r\",\"WsDuvk36hThvkXRs7\",\"yr822PZmmiDDenxpB\",\"Lkcku4D8wh449piQh\",\"qeqqjviYA9R7uQZEW\",\"f2BoqyCpgnmjEjLqx\",\"Phd2FdPjo9BhBfvKh\",\"qPpQfR5KyDb5Y3EFf\",\"cnmj8mAbLcMnKaqLS\",\"aiPq9uFZGF8FDEZz8\",\"NrkLFyfNRp9aE2Z3R\",\"3cGJ9gKcA2FRPBrmT\",\"ASsfbyG6AwkhqRZSB\",\"ya2ofFqYRC57bfbND\",\"LFSASkxgw9hr3KqmC\",\"E4dE7Px4BQzSQeh2y\",\"GM2X83qnuLXTHe5zA\",\"xn7uGNKeAwPEkP9oA\",\"8sNv5PTHa7XQ8bNqR\",\"K9P4HPXReTrHxHpMr\",\"R4SjTgDnpigJYDLyL\",\"77dQgT3gTGWLcRPTk\",\"cxABox46qWvJRyidE\",\"mqJtnfNCs6CedXnay\",\"zZDaXBxMzTCBhNkgL\",\"5ZR5C8Hh44gtGfMou\",\"5dHucvf2qBYyKim7X\",\"Ecg4m7srYGgZsb4Ck\",\"4fhjJBvLBWh6QeSih\",\"yjtdwc2AC4jA2RWtn\",\"HF28xZKSLM9wEuqNg\",\"Yp7uvStL97cC9fKkY\",\"iS5BrkGLzJyPK7nKt\",\"J3upzLHuEwXH7Z2hx\",\"mDWNyaaQ9hvPCRzSd\",\"hkiz2Nv927cYGrA86\",\"gXTAie79kiw28tx5u\",\"2PufnQcsHsfymufX3\",\"iojEnnY9FsMfYzp6f\",\"QRv96jmNaYsWkxQEG\",\"ctbThYbufFCYbRK4f\",\"MpfytGFYF77emJ3cT\",\"fznzd3qnvtbFkkizz\",\"WnsFabhFQ4J4gns2u\",\"GTKsdeEihE636Le9i\",\"DPi9QGLctq2y76KuE\",\"fbr22rabEJMfBp7vD\",\"oBcs8GLX2ZFLXQy8y\",\"3ECtWEiKJnjea5mQ6\"],\"quality\":[5,4,5,5,5,4,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":4.75,\"family\":[{\"_id\":\"QxdWqug8d8vkMtobH\",\"language\":\"javascript\"},{\"_id\":\"dHGpjWHJ265BCthiM\",\"language\":\"python3\"},{\"_id\":\"xmyZzaKiouqqzsCZz\",\"language\":\"ruby\"}]}}"]