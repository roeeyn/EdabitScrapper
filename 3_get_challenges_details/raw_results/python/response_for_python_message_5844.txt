a["{\"msg\":\"result\",\"id\":\"1633\",\"result\":{\"_id\":\"auLEvdvBT5PRnALvn\",\"author\":\"Mubashir Hassan \",\"authorId\":\"T6iBEE2jp7f7iEF2P\",\"code\":\"def mirror_cipher(message):\\n\\t\",\"difficulty\":2.1228070175438596,\"familyId\":\"hX8Gw36zhKb843vw8\",\"instructions\":\"In **Mirror Cipher**, encoding is done by switching message characters with its mirror opposite character of the key.\\n\\nCreate a function that takes two arguments; a `message` and an optional `key`, and return the **encoded message**.\\n\\nThere are some variations on the rules of encipherment. One version of the cipher rules are outlined below:\\n\\n```\\nmessage = \\\"Mubashir Hassan\\\"\\nkey = \\\"edabitisamazing\\\"\\n\\nmirror_cipher(message, key) ➞ \\\"tuzishar hissid\\\"\\n```\\n\\n**Step 1:** Replace all characters of the given message with mirror character in the key:\\n\\n```\\nM = t, # 't' is mirror character of 'M'\\nu = u, # 'u' is not part of the key\\nb = z, # 'z' is mirror character of 'b'\\na = i, and so on ...\\n```\\n\\n**Step 2:** Return encoded message in lower case:\\n\\n```\\n\\\"tuzishar hissid\\\"\\n```\\n\\nIf optional `key` is not given, consider the whole alphabet as a default (i.e. `key` = **\\\"abc..z\\\"**).\\n\\n### Examples\\n```\\nmirror_cipher(\\\"Mubashir Hassan\\\", \\\"edabitisamazing\\\") ➞ \\\"tuzishar hissid\\\"\\n\\nmirror_cipher(\\\"Matt MacPherson\\\") ➞ \\\"nzgg nzxksvihlm\\\"\\n\\nmirror_cipher(\\\"Airforce is best\\\", \\\"pilot\\\") ➞ \\\"aorfirce os besp\\\"\\n```\\n\\n### Notes\\nIgnore case of message and key, (e.g. \\\"M\\\" = \\\"m\\\").\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(mirror_cipher(\\\"Mubashir Hassan\\\", \\\"edabitisamazing\\\"), \\\"tuzishar hissid\\\")\\nTest.assert_equals(mirror_cipher(\\\"Matt MacPherson\\\"), \\\"nzgg nzxksvihlm\\\")\\nTest.assert_equals(mirror_cipher(\\\"Airforce is best\\\", \\\"pilot\\\"), \\\"aorfirce os besp\\\")\\nTest.assert_equals(mirror_cipher(\\\"hello\\\"), \\\"svool\\\")\\nTest.assert_equals(mirror_cipher(\\\"goodbye\\\"), \\\"tllwybv\\\")\\nTest.assert_equals(mirror_cipher(\\\"ngmlsoor\\\"), \\\"mtnohlli\\\")\\nTest.assert_equals(mirror_cipher(\\\"gsrh rh z hvxivg\\\"), \\\"this is a secret\\\")\\nTest.assert_equals(mirror_cipher(\\\"hello\\\", \\\"abcdefgh\\\"), \\\"adllo\\\")\\nTest.assert_equals(mirror_cipher(\\\"goodbye\\\", \\\"\\\"), \\\"goodbye\\\")\\nTest.assert_equals(mirror_cipher(\\\"this is a secret\\\", \\\" *\\\"), \\\"this*is*a*secret\\\")\\n# Mubashir\",\"language\":\"python3\",\"quality\":3.7777777777777777,\"summary\":\"In Mirror Cipher, encoding is done by switching message characters with its mirror opposite character of the key.\\n\\nCreate a function that takes two arguments; a message and an optional key, and return the encoded message.\\n\\nThere are some variations on the rules of encipherment. One version of the cipher rules are outlined below:\\n\\nmessage = \\\"Mubashir Hassan\\\"\\nke\",\"tags\":[\"algorithms\",\"cryptography\",\"logic\",\"strings\"],\"timestamp\":{\"$date\":1611036890438},\"title\":\"Mirror Cipher\",\"stats\":{\"completed\":{\"total\":67,\"ratings\":[2,2,2,2,2,1,3,2,0,2,3,3,1,2,3,2,0,2,1,1,0,2,2,2,3,3,3,3,1,2,2,2,2,3,2,4,2,3,2,3,0,3,3,3,3,2,3,0,3,3,1,5,3,2,1,1,3],\"quality\":[1,5,5,3,3,5,5,2,5],\"rators\":[\"T6iBEE2jp7f7iEF2P\",\"8PwfYqoDQFThzNtvf\",\"5NCnqpeNji2qXupog\",\"Jqk2uJZZxEv5wZFze\",\"gXTAie79kiw28tx5u\",\"iS5BrkGLzJyPK7nKt\",\"p8qqFdJ3FSk5x9z3G\",\"yjtdwc2AC4jA2RWtn\",\"oBcs8GLX2ZFLXQy8y\",\"XHShZ3WMPgGEA2vkR\",\"n2BRY9X8899dcG8Bw\",\"GGdmhAvxXhqhhibJN\",\"2a54L5fJYhMixJsQk\",\"xJCoAW46qXTwb9ari\",\"QhurCiqDmuFixK6Xa\",\"WF2iS4azdv6YKoBjz\",\"YcCLwitFMAEJSnxAW\",\"QRv96jmNaYsWkxQEG\",\"u5u2YpHXiNgzDNJdX\",\"HF28xZKSLM9wEuqNg\",\"2PufnQcsHsfymufX3\",\"J23RcmzbdtBbPCTjT\",\"jGedAexr93psS9uYn\",\"jDBLwczxoPrGtbufB\",\"eHcgvkTGsH7ZziqBo\",\"mfm3gB39arY8Rjb2y\",\"Afnps7TJQuS9sipMb\",\"fznzd3qnvtbFkkizz\",\"dJzNF59j2p8jWZxiQ\",\"gb9rvGus2Jv7bjZSs\",\"8BFSTCnoe2QggN64c\",\"Hhvy3EGqWBXt3nFPA\",\"x3BAyM3Q3WqnF2wua\",\"8pBm6An63TSSA89YB\",\"C8Gd66wwGagHmj2t8\",\"Yp7uvStL97cC9fKkY\",\"8JyqsSbN2FJXPr3cw\",\"PXAcsKkssS2yLyDv2\",\"XNmN6ztj36a7eChbD\",\"qAby4AWXmTNeusvg3\",\"iojEnnY9FsMfYzp6f\",\"cR3ibTMxLyEdDFCHY\",\"hnyhBFWwNCz9mDfSi\",\"FEYpu9RWysAgW3XnP\",\"gJYuGdkXEWWmGRLzu\",\"J3upzLHuEwXH7Z2hx\",\"MfKe55snfKsdnDejs\",\"Wpn95NqWxncQrwNgz\",\"xn7uGNKeAwPEkP9oA\",\"BrTDhPJcACL2bsrpJ\",\"AasGs8AeX9Lcb9xJn\",\"HqmxnQJM66Y57twhn\",\"PC3pLs36zNzpRDSuE\",\"buX4mCQhtXCfBjeno\",\"aEm3Wvj2rFYRL8Lrb\",\"J5T8gZqiZXFuFDTQ7\",\"tAF9Gf6PiGogbZuWs\",\"yod5YhKtPqw2GfG9B\",\"oG6ogzo5692C8eFay\",\"8sNv5PTHa7XQ8bNqR\",\"DPi9QGLctq2y76KuE\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"o6MQAGXi6iP2iBMkE\",\"language\":\"cpp\"},{\"_id\":\"pwYsCgk8g7ZjC3d7p\",\"language\":\"javascript\"},{\"_id\":\"auLEvdvBT5PRnALvn\",\"language\":\"python3\"},{\"_id\":\"KMFpKGmBsskLT2ruj\",\"language\":\"ruby\"}]}}"]