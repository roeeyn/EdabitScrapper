a["{\"msg\":\"result\",\"id\":\"1918\",\"result\":{\"_id\":\"dKeLAqAxpddbkvNhh\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"def group_seats(lst, n):\\n\\t\",\"difficulty\":2.6666666666666665,\"familyId\":\"gpfatkuK8gauitcst\",\"instructions\":\"A group of `n` friends are going to see a movie. They would like to find a spot where they can sit next to each other in the same row. A movie theater's seat layout can be represented as a 2-D matrix, where `0`s represent empty seats and `1`s represent taken seats.\\n\\n```\\n[[1, 0, 0, 0, 1, 1, 1],\\n[1, 1, 1, 0, 1, 1, 1],\\n[1, 0, 1, 0, 1, 0, 1],\\n[1, 1, 0, 1, 1, 0, 1],\\n[1, 0, 1, 1, 1, 1, 1],\\n[1, 0, 1, 1, 0, 0, 0]]\\n```\\nCreate a function that, given a seat layout and the number of friends `n`, returns the number of available spots for all `n` friends to sit together. In the above example, if `n = 3`, there would be 2 spots (the first row and last row).\\n\\n### Examples\\n```\\ngroup_seats([\\n  [1, 0, 1, 0, 1, 0, 1],\\n  [0, 1, 0, 1, 0, 1, 0],\\n  [0, 0, 1, 1, 1, 1, 1],\\n  [1, 0, 1, 1, 0, 0, 1],\\n  [1, 1, 1, 0, 1, 0, 1],\\n  [0, 1, 1, 1, 1, 0, 0]\\n], 2) ➞ 3\\n\\ngroup_seats([\\n  [1, 0, 1, 0, 1, 0, 1],\\n  [0, 1, 0, 0, 0, 0, 0],\\n], 4) ➞ 2\\n```\\n\\n### Notes\\nMultiple free arrangements that overlap still count as distinct arrangements (see example #2).\",\"lab\":\"Test.assert_equals(group_seats([\\n\\t[1, 0, 1, 0, 1, 0, 1], \\n\\t[0, 1, 0, 1, 0, 1, 0], \\n\\t[0, 0, 0, 0, 0, 0, 0], \\n\\t[1, 0, 1, 1, 0, 0, 1], \\n\\t[1, 1, 1, 0, 0, 0, 1], \\n\\t[0, 1, 1, 1, 1, 0, 0]\\n], 7), 1)\\n\\nTest.assert_equals(group_seats([\\n\\t[1, 0, 0, 0, 1, 1, 1], \\n\\t[1, 1, 1, 0, 1, 1, 1], \\n\\t[1, 0, 1, 0, 1, 0, 1], \\n\\t[1, 1, 0, 1, 1, 0, 1], \\n\\t[1, 0, 1, 1, 1, 1, 1],\\n\\t[1, 0, 1, 1, 0, 0, 0]\\n], 3), 2)\\n\\nTest.assert_equals(group_seats([\\n\\t[1, 0, 0, 0, 0, 1, 1], \\n\\t[1, 1, 1, 0, 1, 1, 1], \\n\\t[1, 0, 1, 0, 1, 0, 1], \\n\\t[1, 1, 0, 1, 1, 0, 1], \\n\\t[1, 0, 1, 1, 1, 1, 1],\\n\\t[1, 0, 1, 1, 0, 0, 0]\\n], 4), 1)\\n\\nTest.assert_equals(group_seats([\\n\\t[1, 0, 1, 0, 0, 1, 1], \\n\\t[1, 1, 1, 0, 1, 1, 1], \\n\\t[1, 0, 1, 0, 1, 0, 1], \\n\\t[1, 1, 0, 1, 1, 0, 1], \\n\\t[1, 0, 1, 1, 1, 1, 1],\\n\\t[1, 0, 1, 1, 0, 0, 0]\\n], 5), 0)\\n\\nTest.assert_equals(group_seats([\\n\\t[1, 0, 1, 0, 0, 1, 1], \\n\\t[1, 1, 1, 0, 1, 1, 1], \\n\\t[1, 0, 1, 0, 1, 0, 1], \\n\\t[1, 1, 0, 1, 0, 0, 1], \\n\\t[1, 0, 1, 1, 1, 1, 1],\\n\\t[1, 0, 1, 1, 0, 0, 0]\\n], 2), 4)\\n\\nTest.assert_equals(group_seats([\\n\\t[1, 0, 1, 0, 1, 0, 1], \\n\\t[0, 1, 0, 1, 0, 1, 0], \\n\\t[0, 0, 1, 1, 1, 1, 1], \\n\\t[1, 0, 1, 1, 0, 0, 1], \\n\\t[1, 1, 1, 0, 1, 0, 1], \\n\\t[0, 1, 1, 1, 1, 0, 0]\\n], 2), 3)\\n\\nTest.assert_equals(group_seats([\\n\\t[1, 0, 1, 0, 1, 0, 1], \\n\\t[0, 1, 0, 0, 0, 0, 0], \\n], 4), 2)\",\"language\":\"python3\",\"summary\":\"A group of n friends are going to see a movie. They would like to find a spot where they can sit next to each other in the same row. A movie theater's seat layout can be represented as a 2-D matrix, where 0s represent empty seats and 1s represent taken seats.\\n\\n[[1, 0, 0, 0, 1, 1, 1],\\n[1, 1, 1, 0, 1, 1, 1],\\n[1, 0, 1, 0, 1, 0, 1],\\n[1, 1, 0, 1, 1, 0, 1],\\n[1, 0, 1\",\"tags\":[\"arrays\",\"higher_order_functions\",\"loops\"],\"timestamp\":{\"$date\":1553911029125},\"title\":\"Movie Theater Seating\",\"stats\":{\"completed\":{\"total\":93,\"ratings\":[3,3,3,3,3,3,3,3,3,3,3,3,3,5,3,2,2,3,3,3,3,5,2,1,2,2,2,4,3,2,2,4,3,1,4,4,3,3,2,3,4,4,2,4,2,3,4,1,2,3,3,4,2,3,3,3,1,2,3,1,2,2,3,1,2,4,3,1,2,4,4,3,3,3,1,1,1,4,3,4,0,0,2,2,2,2,4],\"rators\":[\"mNMQvcxKSSvqqMYCH\",\"yZvzB3qFb8pkHy4dg\",\"GC7GztYtk4KoNStso\",\"8JyqsSbN2FJXPr3cw\",\"W2RBjMJ9KQPg4tjNZ\",\"37Dn89S4JAJqazGy6\",\"eq6bWgNCAXLkFj4tx\",\"Jqk2uJZZxEv5wZFze\",\"4cxKdMqL4Qk2GsJpm\",\"qaR8DnWrTk8Mus5Q2\",\"a9fS7XG2wBs5odiwR\",\"SSCT6hDKSybxGGGks\",\"Coqc9JJMSWMpL37Gu\",\"5uM9326sXAWGh27wr\",\"P7nYMvnybArXCKgJ2\",\"tAF9Gf6PiGogbZuWs\",\"gb9rvGus2Jv7bjZSs\",\"ab7BsQuhDo3QgE6bh\",\"MXjxGML2X75x64vJo\",\"FikSPhcrHBpQ4CyGC\",\"AYaEkTWLMmfzpwejr\",\"PFjMZGHNAPTkgd7tq\",\"nzx4uAPg3hCceyFPE\",\"BFNm9gacwba9KyLFW\",\"wadXYaQi9osoDvsc5\",\"hsrNYf3WbexXJKhCq\",\"3ifAHQzsMasfQySoL\",\"jYJ26SiLKBu5GRumq\",\"dZGNAJXB24zNh2tsD\",\"s5M5RvgqR9BhB9JoC\",\"fAoLuqbGvHn4w2PHf\",\"qmetzMnhdAowTk8Pp\",\"HqmxnQJM66Y57twhn\",\"HrXfQrvuHJj4Mdguk\",\"5uA8xmgifmiJrqbzy\",\"pMuvoqcmxHbuRSfb9\",\"6ShafRStcvew4GfCh\",\"8PwfYqoDQFThzNtvf\",\"ydEdzuCCZt4yny9Rq\",\"aEm3Wvj2rFYRL8Lrb\",\"Ti5BF4jnruwNNzHY8\",\"AasGs8AeX9Lcb9xJn\",\"fznzd3qnvtbFkkizz\",\"ZNnsMeNkdDhHjSrZb\",\"Nua6T3dBurBy3Qfg9\",\"wT5gGgvjKc5wz59AQ\",\"gJYuGdkXEWWmGRLzu\",\"W5TajitmCyxz87zAC\",\"44dAzThMuyGZ5StXB\",\"2RTh69vSmMqLu4774\",\"Ecg4m7srYGgZsb4Ck\",\"xn7uGNKeAwPEkP9oA\",\"bJxaKHJqR82EWw8Su\",\"WzEhzQcMwc4sw8z7T\",\"ACEZh39brWjdGkZXb\",\"5qfcG54cbBC8ujxav\",\"f2BoqyCpgnmjEjLqx\",\"KZ2xddpM2f9JRaryB\",\"orFLgPDw9H5MDzmwo\",\"5dHucvf2qBYyKim7X\",\"yjtdwc2AC4jA2RWtn\",\"p8qqFdJ3FSk5x9z3G\",\"HF28xZKSLM9wEuqNg\",\"K3RacTvkWHLfzKF8i\",\"9rhsisf8ofHavG5aT\",\"9FCeFzjPA4jrQ7oHW\",\"v9KtC8YLbMWmXiW2H\",\"Wv2vJnEj8ywNmARoF\",\"iS5BrkGLzJyPK7nKt\",\"8sNv5PTHa7XQ8bNqR\",\"J3upzLHuEwXH7Z2hx\",\"PXAcsKkssS2yLyDv2\",\"iojEnnY9FsMfYzp6f\",\"gXTAie79kiw28tx5u\",\"2PufnQcsHsfymufX3\",\"GTKsdeEihE636Le9i\",\"H9KZi2cjt4FwH7qog\",\"8nE8QHnFYsHCFebte\",\"DPi9QGLctq2y76KuE\",\"PH32cNxBjrK4a28sn\",\"v74fPhegePGxCm2uk\",\"gKnWjDjwrJh7MK2df\",\"T6iBEE2jp7f7iEF2P\",\"w3EY7Ccg3vLgPWeYh\",\"fbr22rabEJMfBp7vD\",\"rhS8qXRjZcpDXkwnE\",\"oBcs8GLX2ZFLXQy8y\",\"DQskEvAv5KiJDPtGF\"],\"quality\":[3,4,5,5,5,5,4,5,5,4]},\"tests\":{\"score\":0,\"rators\":[\"mNMQvcxKSSvqqMYCH\"]},\"instructions\":{\"score\":0,\"rators\":[\"mNMQvcxKSSvqqMYCH\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.5,\"family\":[{\"_id\":\"N7LuCieCrotxajSqB\",\"language\":\"javascript\"},{\"_id\":\"dKeLAqAxpddbkvNhh\",\"language\":\"python3\"},{\"_id\":\"oNuDgNESkZw2uR5tT\",\"language\":\"ruby\"}]}}"]