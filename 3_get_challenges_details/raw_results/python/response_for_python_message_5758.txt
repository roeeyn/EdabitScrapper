a["{\"msg\":\"result\",\"id\":\"1592\",\"result\":{\"_id\":\"XcQ5zTsFiHh6m28FW\",\"author\":\"Mubashir Hassan \",\"authorId\":\"T6iBEE2jp7f7iEF2P\",\"code\":\"def string_expansion(txt):\\n\\t\",\"difficulty\":2.103448275862069,\"familyId\":\"PkLjMmiDYgzdnCwL7\",\"instructions\":\"Create a function that takes a string `txt` and expands it as per the following rules:\\n\\n1. The numeric values represent the occurrence of each letter preceding that numeric value.\\n\\n```\\nstring_expansion(\\\"3M2u5b2a1s1h2i1r\\\") ➞ \\\"MMMuubbbbbaashiir\\\"\\n```\\n\\n2. The first occurrence of a numeric value should be the **number of times each character behind it is repeated**, until the next numeric value appears.\\n\\n```\\nstring_expansion(\\\"3Mat\\\")➞ \\\"MMMaaattt\\\"      # correct\\n\\nstring_expansion(\\\"3Mat\\\") ➞ \\\"MMMat\\\"          # wrong\\nstring_expansion(\\\"3Mat\\\") ➞ \\\"MatMatMat\\\"      # wrong\\n```\\n\\n3. If there are consecutive numeric characters, ignore them all except **last one**.\\n\\n```\\nstring_expansion(\\\"3M123u42b12a\\\") ➞ \\\"MMMuuubbaa\\\"\\n```\\n\\n4. If there are **two consecutive alphabetic characters** then the string will remain unchanged.\\n\\n```\\nstring_expansion(\\\"airforce\\\") ➞ \\\"airforce\\\"\\n```\\n\\n5. Empty strings should return an empty string.\\n\\n```\\nstring_expansion(\\\"\\\") ➞ \\\"\\\"\\n```\\n\\n### Notes\\nN/A\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(string_expansion(\\\"3M2u5b2a1s1h2i1r\\\"),\\\"MMMuubbbbbaashiir\\\")\\nTest.assert_equals(string_expansion(\\\"3Mat\\\"),\\\"MMMaaattt\\\")\\nTest.assert_equals(string_expansion(\\\"3M123u42b12a\\\"),\\\"MMMuuubbaa\\\")\\nTest.assert_equals(string_expansion(\\\"3n6s7f3n\\\"),\\\"nnnssssssfffffffnnn\\\")\\nTest.assert_equals(string_expansion(\\\"0d4n8d2b\\\"),\\\"nnnnddddddddbb\\\")\\nTest.assert_equals(string_expansion(\\\"0c3b1n7m\\\"),\\\"bbbnmmmmmmm\\\")\\nTest.assert_equals(string_expansion(\\\"7m3j4ik2a\\\"),\\\"mmmmmmmjjjiiiikkkkaa\\\")\\nTest.assert_equals(string_expansion(\\\"3A5m3B3Y\\\"),\\\"AAAmmmmmBBBYYY\\\")\\nTest.assert_equals(string_expansion(\\\"5M0L8P1\\\"),\\\"MMMMMPPPPPPPP\\\")\\nTest.assert_equals(string_expansion(\\\"2B\\\"),\\\"BB\\\")\\nTest.assert_equals(string_expansion(\\\"7M1n3K\\\"),\\\"MMMMMMMnKKK\\\")\\nTest.assert_equals(string_expansion(\\\"A4g1b4d\\\"),\\\"Aggggbdddd\\\")\\nTest.assert_equals(string_expansion(\\\"111111\\\"),\\\"\\\")\\nTest.assert_equals(string_expansion(\\\"4d324n2\\\"),\\\"ddddnnnn\\\")\\nTest.assert_equals(string_expansion(\\\"5919nf3u\\\"),\\\"nnnnnnnnnfffffffffuuu\\\")\\nTest.assert_equals(string_expansion(\\\"2n1k523n4i\\\"),\\\"nnknnniiii\\\")\\nTest.assert_equals(string_expansion(\\\"6o23M32d\\\"),\\\"ooooooMMMdd\\\")\\nTest.assert_equals(string_expansion(\\\"1B44n3r\\\"),\\\"Bnnnnrrr\\\")\\nTest.assert_equals(string_expansion(\\\"M21d1r32\\\"),\\\"Mdr\\\")\\nTest.assert_equals(string_expansion(\\\"23M31r2r2\\\"),\\\"MMMrrr\\\")\\nTest.assert_equals(string_expansion(\\\"8494mM25K2A\\\"),\\\"mmmmMMMMKKKKKAA\\\")\\nTest.assert_equals(string_expansion(\\\"4A46D6B3C\\\"),\\\"AAAADDDDDDBBBBBBCCC\\\")\\nTest.assert_equals(string_expansion(\\\"23D42B3A\\\"),\\\"DDDBBAAA\\\")\\nTest.assert_equals(string_expansion(\\\"143D36C1A\\\"),\\\"DDDCCCCCCA\\\")\\nTest.assert_equals(string_expansion(\\\"asdf\\\"),\\\"asdf\\\")\\nTest.assert_equals(string_expansion(\\\"23jbjl1eb\\\"),\\\"jjjbbbjjjllleb\\\")\\nTest.assert_equals(string_expansion(\\\"43ibadsr3\\\"),\\\"iiibbbaaadddsssrrr\\\")\\nTest.assert_equals(string_expansion(\\\"123p9cdbjs\\\"),\\\"pppcccccccccdddddddddbbbbbbbbbjjjjjjjjjsssssssss\\\")\\nTest.assert_equals(string_expansion(\\\"2309ew7eh\\\"),\\\"eeeeeeeeewwwwwwwwweeeeeeehhhhhhh\\\")\\nTest.assert_equals(string_expansion(\\\"312987rfebd\\\"),\\\"rrrrrrrfffffffeeeeeeebbbbbbbddddddd\\\")\\nTest.assert_equals(string_expansion(\\\"126cgec\\\"),\\\"ccccccggggggeeeeeecccccc\\\")\\nTest.assert_equals(string_expansion(\\\"1chwq3rfb\\\"),\\\"chwqrrrfffbbb\\\")\\nTest.assert_equals(string_expansion(\\\"389fg21c\\\"),\\\"fffffffffgggggggggc\\\")\\nTest.assert_equals(string_expansion(\\\"239vbsac\\\"),\\\"vvvvvvvvvbbbbbbbbbsssssssssaaaaaaaaaccccccccc\\\")\\nTest.assert_equals(string_expansion(\\\"davhb327vuc\\\"),\\\"davhbvvvvvvvuuuuuuuccccccc\\\")\\nTest.assert_equals(string_expansion(\\\"cvyb239bved2dv\\\"),\\\"cvybbbbbbbbbbvvvvvvvvveeeeeeeeedddddddddddvv\\\")\\nTest.assert_equals(string_expansion(\\\"\\\"),\\\"\\\")\\n# Mubashir\",\"language\":\"python3\",\"quality\":4.571428571428571,\"summary\":\"Create a function that takes a string txt and expands it as per the following rules:\\n\\nThe numeric values represent the occurrence of each letter preceding that numeric value.\\n\\nstring_expansion(\\\"3M2u5b2a1s1h2i1r\\\") ➞ \\\"MMMuubbbbbaashiir\\\"\\n\\nThe first occurrence of a numeric value should be the number of times each character behind it is repeated, until the next num\",\"tags\":[\"strings\",\"language_fundamentals\",\"interview\",\"logic\",\"regex\"],\"timestamp\":{\"$date\":1611120708924},\"title\":\"String Expansion\",\"stats\":{\"completed\":{\"total\":63,\"ratings\":[2,2,2,2,2,1,3,3,2,3,0,3,1,0,3,2,4,2,4,1,3,3,3,2,3,2,1,3,3,2,1,2,0,0,3,3,0,2,2,1,3,3,5,2,2,0,2,4,0,2,1,3,1,3,3,2,3,2],\"quality\":[5,5,5,5,5,5,2],\"rators\":[\"T6iBEE2jp7f7iEF2P\",\"7sGYgAmH8gAkYpwdj\",\"p8qqFdJ3FSk5x9z3G\",\"gXTAie79kiw28tx5u\",\"8PwfYqoDQFThzNtvf\",\"Jqk2uJZZxEv5wZFze\",\"hnyhBFWwNCz9mDfSi\",\"yjtdwc2AC4jA2RWtn\",\"cAP3n5NY64uoMwzRR\",\"iS5BrkGLzJyPK7nKt\",\"5kn7FqvMktwwDBLqF\",\"YzZZpieLYPk2AqiMd\",\"n2BRY9X8899dcG8Bw\",\"mDWNyaaQ9hvPCRzSd\",\"s5M5RvgqR9BhB9JoC\",\"mfm3gB39arY8Rjb2y\",\"QRv96jmNaYsWkxQEG\",\"HF28xZKSLM9wEuqNg\",\"Yp7uvStL97cC9fKkY\",\"8JyqsSbN2FJXPr3cw\",\"gb9rvGus2Jv7bjZSs\",\"ouD6cs7ZdxzPfKRKt\",\"qAby4AWXmTNeusvg3\",\"iojEnnY9FsMfYzp6f\",\"gJYuGdkXEWWmGRLzu\",\"J3upzLHuEwXH7Z2hx\",\"oBcs8GLX2ZFLXQy8y\",\"NWDdF99a5H7HDaza8\",\"xn7uGNKeAwPEkP9oA\",\"AQSqD9oNv2uPfxZCR\",\"cR3ibTMxLyEdDFCHY\",\"srJ34BaybkQh3qRkM\",\"AasGs8AeX9Lcb9xJn\",\"GTKsdeEihE636Le9i\",\"DPi9QGLctq2y76KuE\",\"GGdmhAvxXhqhhibJN\",\"2PufnQcsHsfymufX3\",\"JKb5rhL6DKcCAypF9\",\"HqmxnQJM66Y57twhn\",\"8BFSTCnoe2QggN64c\",\"fznzd3qnvtbFkkizz\",\"d8qtzoLB264iP8tdY\",\"fbr22rabEJMfBp7vD\",\"tAF9Gf6PiGogbZuWs\",\"J5T8gZqiZXFuFDTQ7\",\"Nua6T3dBurBy3Qfg9\",\"eHcgvkTGsH7ZziqBo\",\"gKnWjDjwrJh7MK2df\",\"o4ixjQGSaYqA2JoM4\",\"aFYzioHvZPvPaunsg\",\"T2vhHPhRR96hRizq8\",\"yod5YhKtPqw2GfG9B\",\"8sNv5PTHa7XQ8bNqR\",\"buX4mCQhtXCfBjeno\",\"aEm3Wvj2rFYRL8Lrb\",\"4Lwjr34ypKNQNQCar\",\"Ds7L5bksw2QRHjrKL\",\"ey3CASd6Je5LEJzfB\",\"mXXPMi2anfJi5whC9\",\"CHvzhtXnv8HTbPQ56\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"G69GKiTu6ELTykSTZ\",\"language\":\"cpp\"},{\"_id\":\"4NKNkPZtN39cqCQMk\",\"language\":\"javascript\"},{\"_id\":\"XcQ5zTsFiHh6m28FW\",\"language\":\"python3\"},{\"_id\":\"en53iSDnbQLLT4WSu\",\"language\":\"ruby\"}]}}"]