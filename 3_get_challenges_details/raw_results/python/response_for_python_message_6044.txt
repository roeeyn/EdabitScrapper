a["{\"msg\":\"result\",\"id\":\"1733\",\"result\":{\"_id\":\"6pdkWtD3ME22P78xb\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"def equal_count(txt, names):\\n\\t\",\"difficulty\":2.230769230769231,\"familyId\":\"JZ37wxrnDYxec3MvP\",\"instructions\":\"Create a function that counts the embedded names in the string and determines the equality. The names are embedded in a string of mixed special symbols and characters. The names to be counted to are adjoined with the ampersand symbol `&` and as the second parameter. See the following examples for more details.\\n\\n### Examples\\n```\\nequal_count(\\\"Peter!@#$Paul&*#Peter!--@|#$Paul#$Peter@|Paul$%^^Peter++Paul%$%^Peter++Paul#$#$#Peter@|Paul\\\", \\\"Peter&Paul\\\")\\n➞ {\\\"Peter\\\":6, \\\"Paul\\\": 6, \\\"equality\\\": True}\\n\\nequal_count(\\\"Elliot!@#$Sam!--@|#$Elliot@|Sam++Elliot$%^Elliot@|Sam!@#Elliot!@#$Sam!--@|#$Elliot\\\", \\\"Sam&Elliot\\\")\\n➞ {\\\"Sam\\\": 4, \\\"Elliot\\\": 6, \\\"equality\\\": False, \\\"difference\\\": 2}\\n# \\\"difference\\\" key is added if count is not equal.\\n\\nequal_count(\\\"Tim!@#$Kit&&*#Tim!--@|#$Kit#$%Tim@|Kit$%^^Tim++Kit%$%^Tim++Kit#$#$#Tim@|Kit\\\", \\\"Ken&Tom\\\")\\n➞ {\\\"Ken\\\": 0, \\\"Tom\\\": 0, \\\"equality\\\": True}\\n```\\n\\n### Notes\\nMake sure to return the result as a **dict** with the corresponding keys seen in the above examples and the `difference` key when needed.\",\"isHidden\":false,\"lab\":\"strVector = [\\n  [\\\"Peter!@#$Paul&*#Peter!--@|#$Paul#$Peter@|Paul$%^^Peter++Paul%$%^Peter++Paul#$#$#Peter@|Paul\\\", \\\"Peter&Paul\\\"],\\n  [\\\"Elliot!@#$Sam!--@|#$Elliot@|Sam++Elliot$%^Elliot@|Sam!@#Elliot!@#$Sam!--@|#$Elliot\\\", \\\"Sam&Elliot\\\"],\\n  [\\\"Tim!@#$Kit&&*#Tim!--@|#$Kit#$%Tim@|Kit$%^^Tim++Kit%$%^Tim++Kit#$#$#Tim@|Kit\\\", \\\"Ken&Tom\\\"],\\n  [\\\"Barnes!@#$Noble@|Barnes++Noble$%^Barnes!--@|#$Noble!@#$Barnes@|Noble!@#$Barnes++Noble\\\", \\\"Barnes&Noble\\\"],\\n  [\\\"Dick!@#$Harry!--@|#$Dick@|Harry++Dick$%^Harry-$%^Dick!@#Harry!@#Dick!@*Harry\\\", \\\"Dick&Harry\\\"],\\n  [\\\"$#%#%Henry+++&&***Hank!@#$%^Henry)(*&^%$)Henry$^$%^%$Henry+Hank$Henry%^$^Hank%^Henry\\\", \\\"Henry&Hank\\\"],\\n  [\\\"$$$^Mary+++&&***John&###@@Mary|Mary;$$John:Mary*John--#@John^&&)(()\\\", \\\"John&Mary\\\"]\\n]\\nobjRes = [\\n  {\\\"Peter\\\": 6, \\\"Paul\\\": 6, \\\"equality\\\": True},\\n  {\\\"Sam\\\": 4, \\\"Elliot\\\": 6, \\\"equality\\\": False, \\\"difference\\\": 2},\\n  {\\\"Ken\\\": 0, \\\"Tom\\\": 0, \\\"equality\\\": True},\\n  {\\\"Barnes\\\": 5, \\\"Noble\\\": 5, \\\"equality\\\": True},\\n  {\\\"Dick\\\": 5, \\\"Harry\\\": 5, \\\"equality\\\": True},\\n  {\\\"Henry\\\": 6, \\\"Hank\\\": 3, \\\"equality\\\": False, \\\"difference\\\": 3},\\n  {\\\"John\\\": 4,\\\"Mary\\\": 4, \\\"equality\\\": True}\\n]\\nfor i, (s, n) in enumerate(strVector):\\n  Test.assert_equals(equal_count(s, n), objRes[i])\",\"language\":\"python3\",\"summary\":\"Create a function that counts the embedded names in the string and determines the equality. The names are embedded in a string of mixed special symbols and characters. The names to be counted to are adjoined with the ampersand symbol & and as the second parameter. See the following examples for more details.\\n\\nExamples\\nequal_count(\\\"Peter!@#$Paul&*#Peter!--@|#$P\",\"tags\":[\"strings\",\"objects\"],\"timestamp\":{\"$date\":1594923384768},\"title\":\"Name Count Equality\",\"stats\":{\"completed\":{\"total\":90,\"ratings\":[3,3,3,3,3,3,4,2,2,2,2,2,4,3,2,1,2,2,4,1,4,2,1,2,5,2,4,3,4,0,4,1,2,2,2,2,3,3,3,1,2,2,1,2,1,4,2,2,3,1,4,1,2,4,2,3,3,2,3,2,3,1,3,1,0,0,1,3,2,2,2,2,0,1,0,2,2,2],\"rators\":[\"a777e8chPvJkY3tKa\",\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\",\"mDWNyaaQ9hvPCRzSd\",\"gb9rvGus2Jv7bjZSs\",\"s5M5RvgqR9BhB9JoC\",\"xn7uGNKeAwPEkP9oA\",\"rbFTTxs6S4D9TxByN\",\"tAF9Gf6PiGogbZuWs\",\"S6ipW8Xzds8QDszn9\",\"8JyqsSbN2FJXPr3cw\",\"pPtmnJ7q9QchoG2Jq\",\"ZNnsMeNkdDhHjSrZb\",\"jFcHRfu77aNu6YpZg\",\"qab4tYm6vJQcpKLfi\",\"tcsswuFnfw39XE6rh\",\"ya2ofFqYRC57bfbND\",\"8sNv5PTHa7XQ8bNqR\",\"DCMKC7fnTWgyBj47Y\",\"KRyczPZSHYbKrBYnY\",\"77dQgT3gTGWLcRPTk\",\"n2BRY9X8899dcG8Bw\",\"NfMJuiBk6FN5Jc6ow\",\"f2BoqyCpgnmjEjLqx\",\"qPpQfR5KyDb5Y3EFf\",\"obxQjjJfiuHJfBEhj\",\"Ecg4m7srYGgZsb4Ck\",\"Nfsj4eNFDjaFa39ga\",\"RpcWqjNd5nMeB4WZS\",\"gJYuGdkXEWWmGRLzu\",\"97DthwdtrBLm2y2Yj\",\"rneLEF52nLZxZCYp6\",\"SGhPxX5bHGL8zZqtt\",\"dte7tMcRcPzyQG9fy\",\"55RQznnuTGpsj3EXd\",\"cxABox46qWvJRyidE\",\"4fhjJBvLBWh6QeSih\",\"HhYCji7QqauyN3A7v\",\"Wv2vJnEj8ywNmARoF\",\"aLxRYMdDSeCixE9pz\",\"iojEnnY9FsMfYzp6f\",\"akcSe6dhHY9trwX4b\",\"oAcTLQZ5g5rEqvGKz\",\"8ajWPPALNEYAMsb6X\",\"vpRpD5X2Yjnzp9nvZ\",\"wNuGsAdwdPtRn9JXz\",\"MCw7uAcoWcSTBTmr3\",\"RehJGBFS6CYiWdjZx\",\"KpHrC7WPEojnzgEtz\",\"zZDaXBxMzTCBhNkgL\",\"DNACg4rcgZsPtYGZ8\",\"cnmj8mAbLcMnKaqLS\",\"6428wKHtwKkFdvBs5\",\"WzEhzQcMwc4sw8z7T\",\"5jGoTvTmgcdKd6Zx9\",\"cRtekS7Xj7duSH87A\",\"mqJtnfNCs6CedXnay\",\"xhCe8aAuimqGyiWQe\",\"p8qqFdJ3FSk5x9z3G\",\"dEuJGZbBQkveCXEFk\",\"jL4y5fTJAMBjhZmko\",\"yjtdwc2AC4jA2RWtn\",\"Yp7uvStL97cC9fKkY\",\"v9KtC8YLbMWmXiW2H\",\"HF28xZKSLM9wEuqNg\",\"iS5BrkGLzJyPK7nKt\",\"J3upzLHuEwXH7Z2hx\",\"Jqk2uJZZxEv5wZFze\",\"qAby4AWXmTNeusvg3\",\"QRv96jmNaYsWkxQEG\",\"LQxof8pGabGuWP7Gn\",\"AasGs8AeX9Lcb9xJn\",\"GTKsdeEihE636Le9i\",\"oBcs8GLX2ZFLXQy8y\",\"cR3ibTMxLyEdDFCHY\",\"HqmxnQJM66Y57twhn\",\"PWgzeK859suojbrRx\",\"T6iBEE2jp7f7iEF2P\",\"yod5YhKtPqw2GfG9B\",\"eHcgvkTGsH7ZziqBo\",\"2PufnQcsHsfymufX3\"],\"quality\":[4,4,5,4,5,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":4.625,\"family\":[{\"_id\":\"KLyD6Ce6KkA2364sH\",\"language\":\"javascript\"},{\"_id\":\"6pdkWtD3ME22P78xb\",\"language\":\"python3\"}]}}"]