a["{\"msg\":\"result\",\"id\":\"1557\",\"result\":{\"_id\":\"rGAcibgZ6u9MtasfW\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"def is_happy(n):\\n\\t\",\"difficulty\":2.111111111111111,\"quality\":4.083333333333333,\"familyId\":\"E9cqZE3HYjNDqWeT9\",\"instructions\":\"A **happy number** is a number which yields a `1` by repeatedly summing up the square of its digits. If such a process results in an endless cycle of numbers containing `4`, the number is said to be an **unhappy number**.\\n\\nCreate a function that accepts a number and determines whether the number is a *happy number* or not. Return `True` if so, `False` otherwise.\\n\\n### Examples\\n```\\nis_happy(67) ➞ False\\n\\nis_happy(89) ➞ False\\n\\nis_happy(139) ➞ True\\n\\nis_happy(1327) ➞ False\\n\\nis_happy(2871) ➞ False\\n\\nis_happy(3970) ➞ True\\n```\\n\\n### Notes\\n- **Hint**: Your loop terminates if the value of `n` is either `1` or `4`.\\n- **Alternatively**,  you can solve this challenge via a recursive approach.\\n-  A recursive version of this challenge can be found via this [link] (https://edabit.com/challenge/J9fCHDa3yYJWnK3A7).\",\"isHidden\":false,\"lab\":\"num_vector, res_vector = [\\n  [1, 10, 44, 67, 89, 139, 1327, 2871, 3970, 5209, 6329, 8888, 9331, 10000],\\n  [True, True, True, False, False, True, False, False, True, False, True, False, True, True]\\n]\\nfor i, n in enumerate(num_vector): Test.assert_equals(res_vector[i], is_happy(n))\",\"language\":\"python3\",\"summary\":\"A happy number is a number which yields a 1 by repeatedly summing up the square of its digit. If such a process results in an endless cycle of numbers containing 4, the number is said to be an unhappy number.\\n\\nCreate a function that accepts a number and determines whether the number is a happy number or not. Return True if so, False otherwise.\\n\\nExamples\\nis_hap\",\"tags\":[\"strings\",\"arrays\",\"loops\",\"math\",\"validation\"],\"timestamp\":{\"$date\":1601564745086},\"title\":\"Happy Number\",\"stats\":{\"completed\":{\"total\":63,\"ratings\":[3,3,3,3,3,3,4,5,0,1,3,2,0,1,2,4,1,0,2,2,3,2,2,2,1,2,2,2,3,3,2,5,3,3,1,2,0,3,0,0,0,0,2,1,3,1,5,3,2,2,1,2,3,3],\"quality\":[5,3,5,1,5,4,5,3,3,5,5,5],\"rators\":[\"a777e8chPvJkY3tKa\",\"8PwfYqoDQFThzNtvf\",\"DNACg4rcgZsPtYGZ8\",\"aEm3Wvj2rFYRL8Lrb\",\"3MybBtCNPcFHLMYmJ\",\"tAF9Gf6PiGogbZuWs\",\"gb9rvGus2Jv7bjZSs\",\"yjtdwc2AC4jA2RWtn\",\"s5M5RvgqR9BhB9JoC\",\"6428wKHtwKkFdvBs5\",\"Xk2g4CNFAnYcvxiSr\",\"8sNv5PTHa7XQ8bNqR\",\"L3BJygJoLeHsTZqfo\",\"8JyqsSbN2FJXPr3cw\",\"HF28xZKSLM9wEuqNg\",\"cR3ibTMxLyEdDFCHY\",\"v9KtC8YLbMWmXiW2H\",\"4RY3zj9C2t8GGefhi\",\"qD2LrwaDrSdiybLKY\",\"kWobGYgZWJxN6ZddF\",\"R4SjTgDnpigJYDLyL\",\"fznzd3qnvtbFkkizz\",\"shdSrDq5ZKqfpgjmu\",\"xn7uGNKeAwPEkP9oA\",\"X6G8jvpoas5oyWBD4\",\"gJYuGdkXEWWmGRLzu\",\"DPi9QGLctq2y76KuE\",\"iS5BrkGLzJyPK7nKt\",\"J3upzLHuEwXH7Z2hx\",\"Jqk2uJZZxEv5wZFze\",\"t6uYPB3GvZxBeTE4B\",\"Yp7uvStL97cC9fKkY\",\"fSQSHjW3e72MrWxbD\",\"gXTAie79kiw28tx5u\",\"p8qqFdJ3FSk5x9z3G\",\"YmMgWhzhHhQLmGGgH\",\"5dHucvf2qBYyKim7X\",\"J23RcmzbdtBbPCTjT\",\"iojEnnY9FsMfYzp6f\",\"QRv96jmNaYsWkxQEG\",\"eHcgvkTGsH7ZziqBo\",\"AasGs8AeX9Lcb9xJn\",\"oBcs8GLX2ZFLXQy8y\",\"HqmxnQJM66Y57twhn\",\"PC3pLs36zNzpRDSuE\",\"p4hvRAJMx84x5hBHc\",\"GGdmhAvxXhqhhibJN\",\"T6iBEE2jp7f7iEF2P\",\"gKnWjDjwrJh7MK2df\",\"2PufnQcsHsfymufX3\",\"o4ixjQGSaYqA2JoM4\",\"rfyEkETeoS96QNH4e\",\"8BFSTCnoe2QggN64c\",\"J5T8gZqiZXFuFDTQ7\",\"AFfw7cGg83uYk2Miy\",\"yod5YhKtPqw2GfG9B\",\"v39g8eNsCQLNfXQwg\",\"CHvzhtXnv8HTbPQ56\",\"rhS8qXRjZcpDXkwnE\",\"Ds7L5bksw2QRHjrKL\",\"oaEDng4NPAkd4HrKn\"]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"a777e8chPvJkY3tKa\",\"family\":[{\"_id\":\"S5y88pjHnpr3qd5BD\",\"language\":\"java\"},{\"_id\":\"y3e9Xdemxr65JQFX8\",\"language\":\"javascript\"},{\"_id\":\"rGAcibgZ6u9MtasfW\",\"language\":\"python3\"}]}}"]