a["{\"msg\":\"result\",\"id\":\"1815\",\"result\":{\"_id\":\"whmsRve8YQ23wZuh4\",\"author\":\"Alessandro Manicone\",\"authorId\":\"AasGs8AeX9Lcb9xJn\",\"code\":\"def sort_dates(lst, mode):\\n\\t\",\"difficulty\":2.5238095238095237,\"familyId\":\"FW9eQ77xgLfkht5hW\",\"instructions\":\"In this challenge, sort a list containing a series of dates given as strings. Each date is given in the format `DD-MM-YYYY_HH:MM`:\\n\\n```\\n\\\"12-02-2012_13:44\\\"\\n```\\n\\nThe priority of criteria used for sorting will be:\\n- Year\\n- Month\\n- Day\\n- Hours\\n- Minutes\\n\\nGiven a list `lst` and a string `mode`, implement a function that returns:\\n- if `mode` is equal to `\\\"ASC\\\"`, the list `lst` sorted in ascending order.\\n- if `mode` is equal to `\\\"DSC\\\"`, the list `lst` sorted in descending order.\\n\\n### Examples\\n```\\nsort_dates([\\\"10-02-2018_12:30\\\", \\\"10-02-2016_12:30\\\", \\\"10-02-2018_12:15\\\"], \\\"ASC\\\") ➞ [\\\"10-02-2016_12:30\\\", \\\"10-02-2018_12:15\\\", \\\"10-02-2018_12:30\\\"]\\n\\nsort_dates([\\\"10-02-2018_12:30\\\", \\\"10-02-2016_12:30\\\", \\\"10-02-2018_12:15\\\"], \\\"DSC\\\") ➞ [\\\"10-02-2018_12:30\\\", \\\"10-02-2018_12:15\\\", \\\"10-02-2016_12:30\\\"]\\n\\nsort_dates([\\\"09-02-2000_10:03\\\", \\\"10-02-2000_18:29\\\", \\\"01-01-1999_00:55\\\"], \\\"ASC\\\") ➞ [\\\"01-01-1999_00:55\\\", \\\"09-02-2000_10:03\\\", \\\"10-02-2000_18:29\\\"]\\n```\\n\\n### Notes\\n- Remember: the date is in the format `DD-MM-YYYY_HH:MM`.\\n- You can expect only valid formatted dates, without exceptions to handle.\",\"isHidden\":false,\"lab\":\"dates1 = [\\n\\t'18-10-2016_12:09', '01-12-2017_20:32', '18-10-2016_12:04',\\n\\t'19-10-2017_16:20', '18-10-2017_16:19', '18-10-2016_16:19'\\n]\\n\\nTest.assert_equals(sort_dates(dates1, 'ASC'), [\\n\\t'18-10-2016_12:04',\\n\\t'18-10-2016_12:09',\\n\\t'18-10-2016_16:19',\\n\\t'18-10-2017_16:19',\\n\\t'19-10-2017_16:20',\\n\\t'01-12-2017_20:32',\\n])\\n\\nTest.assert_equals(sort_dates(dates1, 'DSC'), [\\n\\t'01-12-2017_20:32',\\n\\t'19-10-2017_16:20',\\n\\t'18-10-2017_16:19',\\n\\t'18-10-2016_16:19',\\n\\t'18-10-2016_12:09',\\n\\t'18-10-2016_12:04'\\n])\\n\\ndates2 = [\\n\\t'11-02-2011_00:01', '21-04-2013_11:43', '02-09-2018_11:00',\\n\\t'02-09-2018_10:00', '02-09-2018_10:30', '11-02-2011_00:00'\\n]\\n\\nTest.assert_equals(sort_dates(dates2, 'DSC'), [\\n\\t'02-09-2018_11:00',\\n\\t'02-09-2018_10:30',\\n\\t'02-09-2018_10:00',\\n\\t'21-04-2013_11:43',\\n\\t'11-02-2011_00:01',\\n\\t'11-02-2011_00:00'\\n])\\n\\nTest.assert_equals(sort_dates(dates2, 'ASC'), [\\n\\t'11-02-2011_00:00',\\n\\t'11-02-2011_00:01',\\n\\t'21-04-2013_11:43',\\n\\t'02-09-2018_10:00',\\n\\t'02-09-2018_10:30',\\n\\t'02-09-2018_11:00'\\n])\\n\\ndates3 = [\\n\\t'03-04-1982_12:11', '09-08-2010_09:11', '14-12-2004_10:32',\\n\\t'08-12-2004_08:00', '08-12-2004_08:45', '12-02-1985_00:58'\\n]\\n\\nTest.assert_equals(sort_dates(dates3, 'ASC'), [\\n\\t'03-04-1982_12:11',\\n\\t'12-02-1985_00:58',\\n\\t'08-12-2004_08:00',\\n\\t'08-12-2004_08:45',\\n\\t'14-12-2004_10:32',\\n\\t'09-08-2010_09:11'\\n])\\n\\nTest.assert_equals(sort_dates(dates3, 'DSC'), [\\n\\t'09-08-2010_09:11',\\n\\t'14-12-2004_10:32',\\n\\t'08-12-2004_08:45',\\n\\t'08-12-2004_08:00',\\n\\t'12-02-1985_00:58',\\n\\t'03-04-1982_12:11'\\n])\\n\\n# Challenge by er0s\\n# Translated from JavaScript\",\"language\":\"python3\",\"summary\":\"In this challenge, sort a list containing a series of dates given as strings. Each date is given in the format DD-MM-YYYY_HH:MM:\\n\\n\\\"12-02-2012_13:44\\\"\\n\\nThe priority of criteria used for sorting will be:\\nYear\\nMonth\\nDay\\nHours\\nMinutes\\n\\nGiven a list lst and a string mode, implement a function that returns:\\nif mode is equal to \\\"ASC\\\", the list lst sorted ascendigly;\\ni\",\"tags\":[\"dates\",\"strings\",\"sorting\"],\"timestamp\":{\"$date\":1586454201854},\"title\":\"Sort the Dates\",\"stats\":{\"completed\":{\"total\":245,\"ratings\":[2,2,2,2,2,2,2,2,2,3,3,4,3,2,3,4,3,4,1,3,3,3,4,2,2,2,3,2,5,2,4,3,4,4,4,0,2,2,2,2,4,2,3,2,1,4,4,2,0,4,2,1,1,0,1,2,2,1,4,4,4,3,4,3,0,1,2,2,4,2,0,0,3,3,2,3,1,3,3,2,4,3,3,3,5,3,4,3,2,3,3,1,0,4,3,4,3,2,3,4,5,2,2,2,3,3,4,3,3,0,2,3,1,3,2,2,2,1,2,2,3,2,0,1,3,1,4,2,3,3,1,2,4,3,0,3,4,3,1,3,3,0,2,2,4,3,3,4,2,2,2,3,1,2,2,3,3,4,3,4,3,3,3,4,3,3,3,2],\"rators\":[\"AasGs8AeX9Lcb9xJn\",\"8JyqsSbN2FJXPr3cw\",\"tAF9Gf6PiGogbZuWs\",\"gb9rvGus2Jv7bjZSs\",\"aEm3Wvj2rFYRL8Lrb\",\"8PwfYqoDQFThzNtvf\",\"mDWNyaaQ9hvPCRzSd\",\"s5M5RvgqR9BhB9JoC\",\"6RjvoM4ZdPyYQWaRX\",\"miZ9j3xNv9iPitxv3\",\"bLpgu8xTdpDPFSAsM\",\"fznzd3qnvtbFkkizz\",\"P7XAauR6pbNvGP3hM\",\"6c4xjEdFxdYw5xGrt\",\"gJYuGdkXEWWmGRLzu\",\"3Zceb8GudqAG3onG3\",\"aCNWav8S8Try9RkC6\",\"sbJcFfQjQ59Wfg4Cd\",\"ZNnsMeNkdDhHjSrZb\",\"axC4Ye5xnfo9MEWj6\",\"zChStAhRfotvGC6C5\",\"kYWb8BwpKwunQkxeX\",\"a777e8chPvJkY3tKa\",\"bJaPCBx63YxdJAuTS\",\"YRstQuthRkFeBiXug\",\"5dHucvf2qBYyKim7X\",\"n2BRY9X8899dcG8Bw\",\"sz8ufn9i8zeiGWpAy\",\"w2NGhfAGohsq6WhhN\",\"vNqidzYii8vSSBxoE\",\"Ecg4m7srYGgZsb4Ck\",\"bJxaKHJqR82EWw8Su\",\"SGhPxX5bHGL8zZqtt\",\"YA7SDhpgEtsqynvNL\",\"W5TajitmCyxz87zAC\",\"Phd2FdPjo9BhBfvKh\",\"ya2ofFqYRC57bfbND\",\"Z4M3NAa4TXquMNkHe\",\"cykCKNJcqFBxz4T8s\",\"xn7uGNKeAwPEkP9oA\",\"wwMcJQRvf3X59Jyev\",\"GM2X83qnuLXTHe5zA\",\"R4SjTgDnpigJYDLyL\",\"yTtSCvGPyYna6JuRC\",\"cxABox46qWvJRyidE\",\"DCMKC7fnTWgyBj47Y\",\"zZDaXBxMzTCBhNkgL\",\"Zh2h8fiTGcTnWAkN4\",\"vSPc7MGK5Poy8tSFp\",\"DTKtcn5HrYxtcBza3\",\"4fhjJBvLBWh6QeSih\",\"MCw7uAcoWcSTBTmr3\",\"yhnpZLDLibMdyaM5W\",\"iZHFkJnWMcFMb5hN8\",\"8zQnyekbSwzhoJymu\",\"6TZp5F9a7SdsEnuKs\",\"x4dfavjLEcrvAF3QQ\",\"HqpbA6C6zkAmDsaEm\",\"jDa4yp4YcRZoGftfj\",\"CLypXaZksY99mpRCm\",\"Yp7uvStL97cC9fKkY\",\"HF28xZKSLM9wEuqNg\",\"yjtdwc2AC4jA2RWtn\",\"v9KtC8YLbMWmXiW2H\",\"5HkEJE35W56jRhuNi\",\"BfwbCTRtW4wG2bsnH\",\"c2u7qfdaYxcyuydtu\",\"opk4KQXn29RvFGrZw\",\"tXcqs5WDEoK3Gie7m\",\"NfMJuiBk6FN5Jc6ow\",\"9AzxAeaR5xWAoqYxB\",\"Xk2g4CNFAnYcvxiSr\",\"pDvFWMCD9fQwoBPcu\",\"8KPxjQTdS6qHY6wKz\",\"8sNv5PTHa7XQ8bNqR\",\"GW4QMoqTDwKp7wpQR\",\"2QziknsznNeMPRh3g\",\"LFSASkxgw9hr3KqmC\",\"6F3Y6ZBAGNDGGTt9B\",\"uZJqBoqeZRX3RncAR\",\"QyYmR6GqGSiw8KXYc\",\"J5T8gZqiZXFuFDTQ7\",\"qwYTa35zwtAXEkSrq\",\"axdSNLZpiCDF8RS6n\",\"FvFhg2wELM3SCZDZQ\",\"jkhtwYDag2nK3eT7Q\",\"9w8aMTRz3iqpMKhJt\",\"Lm6ChQCWBmaikmk5J\",\"nc7bRhkxgKyqusYe3\",\"YtuEYsCMYJa8CcTyN\",\"tGkHoSmX8oHmmpdf5\",\"PcB74cM6JmB5rt5uQ\",\"h4x2jaMdj5aQZbW5g\",\"stE8JiME3GqcYwFAN\",\"T3nnYbGvGdhg36Hok\",\"S6Zd8mPuvhuh3MFRt\",\"rvek9cdmYejviEBbX\",\"X3Temjka6hN4q77b9\",\"f5AKHaBuY8fdiXYew\",\"SuhokLqQw2GKeWAYp\",\"tis2x6gZcaucwdrtQ\",\"ZYohx5sF62bqMBnvw\",\"6xTu4r8NMczBFvmtz\",\"QRv96jmNaYsWkxQEG\",\"Y2H5JNv4CRWTjccYs\",\"ytfQKkDogjYiGmF4h\",\"4Ytzg5uu2quL2jmqt\",\"p7js9trz2zk2RorCR\",\"qCxqDqwCxeS5DkmNQ\",\"TgPPcw7LSYmueuav5\",\"XJYdH2ihEZmL7Cga5\",\"v2rponevFCpBsLrQD\",\"m3R9aaRoEbaxRsSNA\",\"DpnYcMphntjsQ96qg\",\"yieWcSSRzCEQg49mg\",\"N57qgAhDZ2fsRtmqq\",\"9mMNQz7k3jPnoWp3o\",\"DqNQn9Jsxcu5HijKE\",\"y6rmzoMWNdRGr3Dk2\",\"W5d8SJGpWNwvgCztM\",\"N3tLQqsAyo76aDBh4\",\"AW6dT7votojqC9voG\",\"bxeJYbwgjJ7ZP5HDz\",\"Lw8oRc5SERsuntXMo\",\"7amNEuZodjynhaDQq\",\"XTAFWZ5ooMT3gkjda\",\"aCgnGzZfQhjxoPgo2\",\"3WQPKtsN2GzAexjyB\",\"2EP5guaHR3aeWZTMx\",\"PpnKYDFsc2Cs6ak5v\",\"Bh8kmRake3Mama2GE\",\"4yRTYRKF3Pnhy98Hj\",\"ZBJ4HuiWQyNYpxChr\",\"AHodQW2h6YM7p4vSw\",\"9PzjsCDv7gHMdpead\",\"gH2iDjx4WAKSLiugK\",\"J3upzLHuEwXH7Z2hx\",\"4DF38N8GMFwNTKutK\",\"QZfBqLS7msPLCkS5v\",\"Kd9cbANRqNspHmByA\",\"Tg24gZyPmk8uDXcBY\",\"AXcnPX68zdMiLNSmu\",\"DHghRMdMFbnwMj7WW\",\"XmmGZyRxA7fgQ3veZ\",\"wWrDS4WKQGZQnxyBE\",\"R3KHfs7CMQT5Kejmz\",\"3ECpdeExhBmkYXtba\",\"DQskEvAv5KiJDPtGF\",\"58M252WF7SPRinfBx\",\"naX78eorMtcT9hhvn\",\"DPi9QGLctq2y76KuE\",\"DQqu286StTaCEZQTA\",\"eMuCpJ2spXWkJjWNz\",\"gXTAie79kiw28tx5u\",\"7FrGpxKuTbXrzXjyY\",\"hkiz2Nv927cYGrA86\",\"ScaZG69jog5kcqGtQ\",\"2PufnQcsHsfymufX3\",\"hRAd998MG8Jzdpxj6\",\"FnnL3A9M87KuSpdm9\",\"yyo6YLQN2of6fxp49\",\"iojEnnY9FsMfYzp6f\",\"Bmb3scffZ5SujLMmd\",\"4z4h4Ljr575FyeZqT\",\"AQSqD9oNv2uPfxZCR\",\"8nE8QHnFYsHCFebte\",\"mfm3gB39arY8Rjb2y\",\"MXjxGML2X75x64vJo\",\"7ZfixTRFMyGGx6jYM\",\"GGdmhAvxXhqhhibJN\",\"QgPB6xZTZsvbQTtyd\",\"ctbThYbufFCYbRK4f\",\"fbr22rabEJMfBp7vD\",\"PC3pLs36zNzpRDSuE\",\"3KkyQm77zsew58Dc2\",\"ZC8qX5DGKHortTacY\",\"rGpPd6PvpzLaqps4g\",\"hR7GMiqGap4CzEWSy\",\"dNBGNMKLZam4bvHuZ\",\"8BFSTCnoe2QggN64c\",\"XdaQbHty4sZkvopco\",\"oBcs8GLX2ZFLXQy8y\",\"HqmxnQJM66Y57twhn\",\"gmzEk5e5F2RmQ8yRw\",\"u7Jv6WxkEAkowzb8R\",\"97DthwdtrBLm2y2Yj\",\"nkL2knkcNaiHCerW2\",\"nQRzZKeDKuLRf9chX\",\"ghMkPtdFCpM6w8nax\",\"dqa7FwRWsk5mbnuM7\",\"uGuS9YRXW2nj4p6zf\",\"6tahZBpmqXBxnsSpg\",\"nYcaTG9rTgkijvji2\",\"CPiALorXgNNLW3b66\",\"gKnWjDjwrJh7MK2df\",\"E9ttMPTkLkKG6nZrg\",\"y7mxst8kGbYP8c5WD\",\"u5u2YpHXiNgzDNJdX\",\"YZsZjfvd3PnLhDJrR\",\"23oi2a3vQwhtLEbSj\",\"PjSSjHCqbEYr8mu6u\",\"9wTLAEKftnzaL5cwy\",\"AhZwrR5qRuHYSxCd9\",\"dyYpK5BLYDDmEZRpt\",\"Si6jT3DnRMXYd27k9\",\"5XzCJH4kzbemDhsmF\",\"dSd7wHgXGQeG5BQ2P\",\"YpSJRXsxDrD7x48YX\",\"Hu4SkoNyWCP4vmsZE\",\"BvRwtF8ZSMeGA4MEH\",\"JKb5rhL6DKcCAypF9\",\"qZQxPQ2kaNKAMesHT\",\"BrTDhPJcACL2bsrpJ\",\"pXLFspu2kcogZipkN\",\"6dqoF6LmEaRPsCSpT\",\"XsyNsxsQnxdaCAKLy\",\"iqmPb9JuJDgTFeR8Q\",\"aFYzioHvZPvPaunsg\",\"jWbd7SYDzLPjc9EDh\",\"h8q7ZcjsMQN4jxSon\",\"ouSfngufpR53JEYQG\",\"ey3CASd6Je5LEJzfB\",\"FhYM27g2HwWBnNyJu\",\"6eRm9ycMujNDWoTyL\",\"RZejvpBSigGCH9FRS\",\"hfBxNa6ydrbQubd5z\",\"7isWCAorJha9DeGZi\",\"hYfNNvvJRDPE6sy6G\"],\"quality\":[4,5,5,4,5,5,5,5,5,5,5,5,4,5,5,4,5,5,5,5,5,5,5,5,5,5,5,5,5,3,4,5,5,3,5,5,5,5,4,5,5,5,4,5,4,4,5,5,4,5,5,5,5,5,4,5,5,5,5,5,5,5,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":4.769230769230769,\"family\":[{\"_id\":\"axeAeZJmSFd6CjChG\",\"language\":\"cpp\"},{\"_id\":\"KWNt5yhvxtEJRMwJZ\",\"language\":\"javascript\"},{\"_id\":\"whmsRve8YQ23wZuh4\",\"language\":\"python3\"},{\"_id\":\"7hYKKYiXpYSH9LZAj\",\"language\":\"ruby\"}]}}"]