a["{\"msg\":\"result\",\"id\":\"2138\",\"result\":{\"_id\":\"CMDy4pvnTZkFwJmmx\",\"author\":\"Alessandro Manicone\",\"authorId\":\"AasGs8AeX9Lcb9xJn\",\"code\":\"class Sudoku:\\n\\t\",\"difficulty\":3.208791208791209,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"waAreNsiXq8FTGBcY\",\"instructions\":\"Create a class `Sudoku` that takes a **string** as an argument. The string will contain the numbers of a regular 9x9 sudoku board **left to right and top to bottom**, with zeros filling up the empty cells.\\n\\n### Attributes\\nAn instance of the class `Sudoku` will have one attribute:\\n- `board`: a list representing the board, with sublits for each **row**, with the numbers as **integers**. Empty cell represented with `0`.\\n\\n### Methods\\nAn instance of the class `Sudoku` wil have three methods:\\n- `get_row(n)`: will return the row in position `n`.\\n- `get_col(n)`: will return the column in position `n`.\\n- `get_sqr([n, m])`: will return the square in position `n` if only one argument is given, and the square to which the cell in position `(n, m)` belongs to if two arguments are given.\\n\\n### Example\\n![Sudoku picture](https://edabit-challenges.s3.amazonaws.com/sudoku_hard_039.gif)\\n\\n```\\ngame = Sudoku(\\\"417950030000000700060007000050009106800600000000003400900005000000430000200701580\\\")\\n\\ngame.board ➞ [\\n  [4, 1, 7, 9, 5, 0, 0, 3, 0],\\n  [0, 0, 0, 0, 0, 0, 7, 0, 0],\\n  [0, 6, 0, 0, 0, 7, 0, 0, 0],\\n  [0, 5, 0, 0, 0, 9, 1, 0, 6],\\n  [8, 0, 0, 6, 0, 0, 0, 0, 0],\\n  [0, 0, 0, 0, 0, 3, 4, 0, 0],\\n  [9, 0, 0, 0, 0, 5, 0, 0, 0],\\n  [0, 0, 0, 4, 3, 0, 0, 0, 0],\\n  [2, 0, 0, 7, 0, 1, 5, 8, 0]\\n]\\n\\ngame.get_row(0) ➞ [4, 1, 7, 9, 5, 0, 0, 3, 0]\\ngame.get_col(8) ➞ [0, 0, 0, 6, 0, 0, 0, 0, 0]\\ngame.get_sqr(1) ➞ [9, 5, 0, 0, 0, 0, 0, 0, 7]\\ngame.get_sqr(1, 8) ➞ [0, 3, 0, 7, 0, 0, 0, 0, 0]\\ngame.get_sqr(8, 3) ➞ [0, 0, 5, 4, 3, 0, 7, 0, 1]\\n```\\n\\n### Notes\\n- All positions are indexed to 0.\\n- All orders are assigned left to right and top to bottom.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"g1 = Sudoku(\\\"417950030000000700060007000050009106800600000000003400900005000000430000200701580\\\")\\ng2 = Sudoku(\\\"005001000287369100416520000000700692000000000000806453843000000000930000950074200\\\")\\ng3 = Sudoku(\\\"270981006015726983869000271092678354057134829384259617730800462028407130040302798\\\")\\n\\nTest.assert_equals(g1.board, [[4, 1, 7, 9, 5, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0], [0, 6, 0, 0, 0, 7, 0, 0, 0], [0, 5, 0, 0, 0, 9, 1, 0, 6], [8, 0, 0, 6, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 4, 0, 0], [9, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 4, 3, 0, 0, 0, 0], [2, 0, 0, 7, 0, 1, 5, 8, 0]], \\\"Example Sudoku\\\")\\nTest.assert_equals(g1.get_row(0), [4, 1, 7, 9, 5, 0, 0, 3, 0], \\\"Example Sudoku\\\")\\nTest.assert_equals(g1.get_col(8), [0, 0, 0, 6, 0, 0, 0, 0, 0], \\\"Example Sudoku\\\")\\nTest.assert_equals(g1.get_sqr(1), [9, 5, 0, 0, 0, 0, 0, 0, 7], \\\"Example Sudoku\\\")\\nTest.assert_equals(g1.get_sqr(1, 8), [0, 3, 0, 7, 0, 0, 0, 0, 0], \\\"Example Sudoku\\\")\\nTest.assert_equals(g1.get_sqr(8, 3), [0, 0, 5, 4, 3, 0, 7, 0, 1], \\\"Example Sudoku\\\")\\n\\nTest.assert_equals(g2.board, [[0, 0, 5, 0, 0, 1, 0, 0, 0], [2, 8, 7, 3, 6, 9, 1, 0, 0], [4, 1, 6, 5, 2, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 6, 9, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 0, 6, 4, 5, 3], [8, 4, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 9, 3, 0, 0, 0, 0], [9, 5, 0, 0, 7, 4, 2, 0, 0]])\\nTest.assert_equals(g2.get_row(6), [8, 4, 3, 0, 0, 0, 0, 0, 0])\\nTest.assert_equals(g2.get_col(2), [5, 7, 6, 0, 0, 0, 3, 0, 0])\\nTest.assert_equals(g2.get_sqr(2), [0, 0, 0, 1, 0, 0, 0, 0, 0])\\nTest.assert_equals(g2.get_sqr(5, 2), [0, 0, 0, 0, 0, 0, 0, 0, 0])\\nTest.assert_equals(g2.get_sqr(8, 0), [8, 4, 3, 0, 0, 0, 9, 5, 0])\\n\\nTest.assert_equals(g3.board, [[2, 7, 0, 9, 8, 1, 0, 0, 6], [0, 1, 5, 7, 2, 6, 9, 8, 3], [8, 6, 9, 0, 0, 0, 2, 7, 1], [0, 9, 2, 6, 7, 8, 3, 5, 4], [0, 5, 7, 1, 3, 4, 8, 2, 9], [3, 8, 4, 2, 5, 9, 6, 1, 7], [7, 3, 0, 8, 0, 0, 4, 6, 2], [0, 2, 8, 4, 0, 7, 1, 3, 0], [0, 4, 0, 3, 0, 2, 7, 9, 8]])\\nTest.assert_equals(g3.get_row(3), [0, 9, 2, 6, 7, 8, 3, 5, 4])\\nTest.assert_equals(g3.get_col(6), [0, 9, 2, 3, 8, 6, 4, 1, 7])\\nTest.assert_equals(g3.get_sqr(3), [0, 9, 2, 0, 5, 7, 3, 8, 4])\\nTest.assert_equals(g3.get_sqr(1, 2), [2, 7, 0, 0, 1, 5, 8, 6, 9])\\nTest.assert_equals(g3.get_sqr(4, 5), [6, 7, 8, 1, 3, 4, 2, 5, 9])\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,3,5,5,5,4,5,2,3,4,5,5,4,3,3,5,5,3,2,3,3,4,4,0,2,2,5,5,2,3,4,3,5,2,2,3,3,4,2,4,2,5,3,2,2,3,5,2,3,2,4,2,4,2,3,4,0,5,2,1,3,0,4,3,5,2,0,5,5,3,2,5,0,5,2,4,2,4,5,5,5,2,0,3,4,4,3],\"rators\":[\"AasGs8AeX9Lcb9xJn\",\"tAF9Gf6PiGogbZuWs\",\"8PwfYqoDQFThzNtvf\",\"2tkaaSSTqhBDg3tiA\",\"a777e8chPvJkY3tKa\",\"aEm3Wvj2rFYRL8Lrb\",\"s5M5RvgqR9BhB9JoC\",\"gb9rvGus2Jv7bjZSs\",\"S6Zd8mPuvhuh3MFRt\",\"KpHrC7WPEojnzgEtz\",\"fznzd3qnvtbFkkizz\",\"W5TajitmCyxz87zAC\",\"8JyqsSbN2FJXPr3cw\",\"R4SjTgDnpigJYDLyL\",\"AGMQqooexrFXgMnET\",\"JQ5uoxA4WZgN6HyJk\",\"2dAt4J5XPniWBuzaB\",\"sfoAF6eygyfp6MWx3\",\"BMEud9eeJnPDC8A2k\",\"5ZR5C8Hh44gtGfMou\",\"MK8HigdFigfJzHhyo\",\"cykCKNJcqFBxz4T8s\",\"J83b6T9hJ2EqE5Aov\",\"ZJQW3bL2KzxJcdEoc\",\"DbGqnKakhW4EJnLM5\",\"bJaPCBx63YxdJAuTS\",\"4fhjJBvLBWh6QeSih\",\"8WpvgSbQciTQWdd8T\",\"mDWNyaaQ9hvPCRzSd\",\"xn7uGNKeAwPEkP9oA\",\"i2ZTh6CcEFL6oo9oe\",\"wFws9y3mXvC4vL9Q2\",\"JGAQgGGrsRMmeANJh\",\"2XqgeTopdma89viw3\",\"Wv2vJnEj8ywNmARoF\",\"eg5iwxQWCEYnktrcm\",\"hRAd998MG8Jzdpxj6\",\"h4x2jaMdj5aQZbW5g\",\"fJuAZYWy9FuibjAiy\",\"qLysFYFYKWrjuCKrK\",\"A2JSJyNxCd7iTTFp7\",\"9i2XnAtnTMpLkGyvv\",\"jiT28cugqR6sLujEp\",\"nwNwJjCu7rC2ecRcE\",\"7shPNLiokLBJ4DYcY\",\"r23nqpnuxRqQrRksA\",\"MM3v77RDEPmCDBvE9\",\"XoTzZDR6qDYd8PAZB\",\"geJHa8mvy64irqsgF\",\"jCwJtCqg5kcDg7CRK\",\"rSCfdarBPboC3amHu\",\"zm9yBz3sRm9jdbyhK\",\"LaYYSfLtno6a9qc4Q\",\"8cKm6EDAjrNbL5pWF\",\"S3iFQ3yPcvH9wEzvF\",\"zaNb37qavQQm6LFqe\",\"YRM5Wr3P4g7AujtiM\",\"htCCT2CY3eSikknSF\",\"Mw8yqSDFdQui28w5N\",\"nFbmNzMQ38TncmfQX\",\"QBgP4BySQAeCoCFf6\",\"p8qqFdJ3FSk5x9z3G\",\"LmDTFiEm58iFLW5QT\",\"58M252WF7SPRinfBx\",\"eoXvH6nQgePAfL6Wc\",\"SGhPxX5bHGL8zZqtt\",\"23oi2a3vQwhtLEbSj\",\"hkiz2Nv927cYGrA86\",\"EQu6oPhZ9mRChfYSz\",\"pDseeQ5ubSuNK7eB8\",\"b3Dk2LqoEgripS3Y3\",\"8sNv5PTHa7XQ8bNqR\",\"38cEoB5NrMG6ompwH\",\"eMuCpJ2spXWkJjWNz\",\"kB7vZaNsDMSJQJTdb\",\"KTPWqRDerNrhQ6Gw2\",\"yr822PZmmiDDenxpB\",\"2PufnQcsHsfymufX3\",\"quwbxHTdqWtt3N2FT\",\"NDeHaTXBDM3o55zY5\",\"YnfabNcKMvWTsyXMb\",\"eHcgvkTGsH7ZziqBo\",\"yjtdwc2AC4jA2RWtn\",\"iS5BrkGLzJyPK7nKt\",\"gJYuGdkXEWWmGRLzu\",\"vBH2Qwy4Jq5BbwXnL\",\"DrTeBk3bpLqhsLS4g\",\"vhZgCDRqMncYjfFB9\",\"kDq2TnPdy7hGKdAD5\",\"v9KRKBS5cRtbJvhxr\",\"d8qtzoLB264iP8tdY\",\"974cv448kw6Wu2JF6\",\"LeC6LLPde9Wy5TtuS\",\"MXjxGML2X75x64vJo\",\"TsFQ5Fxr942s8Pwye\",\"y2wzvTmp4wRQuf4PR\",\"tMgst3J3A6oKgBHzZ\",\"T6iBEE2jp7f7iEF2P\",\"isGuKpi5TX7jYa42Y\",\"A5Yk8K7W76v8JJYQg\",\"9pqtNWrsTJdZcRbEZ\",\"qKwpsXswpygmWqrkE\",\"Jjz79FfaC6dyNHq47\",\"68zWiHdiSfDcaZths\",\"5xcPnT7ttWbvRPN6t\",\"S7uNwE48eRQcfcMq7\",\"dbgWF79585oqSNW2f\",\"YREmgD3mXd6v6oma2\",\"9jstf8smopHw3kx62\",\"8f2GuLuAy3nb6KFfY\",\"9i5HgF4JxH8xGnJ8o\",\"r54pkzTWqWDcEDGFQ\",\"rPEMbGJr4NorP7bm8\",\"Ncn7Qn2LbdsiJnfFk\",\"hP3dY9tJ9yC6ZoKtH\",\"8ALH5xNvzy692uzy4\",\"mTF6oWX2WhFR4M3QK\",\"DwetpbChQM4r6Gwah\"],\"total\":127,\"quality\":[5,4,5,5,4,5,3,4,5,3,1,5,4,5,4,5,3,5,2,4,4,5,5,5,5,5,5,4,5,5,5,5,5]},\"flags\":0},\"summary\":\"Create a class Sudoku that takes a string as an argument. The string will contain the numbers of a regular 9x9 sudoku board left to right and top to bottom, with zeros filling up the empty cells.\\n\\nAttributes\\nAn instance of the class Sudoku will have one attribute:\\nboard: a list representing the board, with sublits for each row, with the numbers as integers. Em\",\"tags\":[\"classes\",\"strings\",\"games\",\"arrays\"],\"timestamp\":{\"$date\":1590399459102},\"title\":\"Sudoku Parser\",\"quality\":4.363636363636363,\"family\":[{\"_id\":\"CMDy4pvnTZkFwJmmx\",\"language\":\"python3\"}]}}"]