a["{\"msg\":\"result\",\"id\":\"2029\",\"result\":{\"_id\":\"6RHxTTndfASnPyp8Z\",\"author\":\"Evgeny SH\",\"authorId\":\"8PwfYqoDQFThzNtvf\",\"code\":\"def compress(chars):\\n\\t\",\"difficulty\":2.8375,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"KTeMez2rh4JyoLgBj\",\"instructions\":\"The function is given an array of characters. Compress the array into a string using the following rules. For each group of consecutively repeating characters:\\n- If the number of repeating characters is one, append the string with only this character.\\n- If the number `n` of repeating characters `x` is greater than one, append the string with `\\\"x\\\" + str(n)`.\\n\\n### Examples\\n```\\ncompress([\\\"a\\\", \\\"a\\\", \\\"b\\\", \\\"b\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\"]) ➞ \\\"a2b2c3\\\"\\n\\ncompress([\\\"a\\\"]) ➞ \\\"a\\\"\\n\\ncompress([\\\"a\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\"]) ➞ \\\"ab12\\\"\\n\\ncompress([\\\"a\\\", \\\"a\\\", \\\"a\\\", \\\"b\\\", \\\"b\\\", \\\"a\\\", \\\"a\\\"]) ➞ \\\"a3b2a2\\\"\\n```\\n\\n### Notes\\nN/A\",\"isFree\":false,\"isHidden\":false,\"lab\":\"from time import perf_counter\\nfrom random import randint\\ntic = perf_counter()\\n\\nTest.assert_equals(compress([\\\"a\\\", \\\"a\\\", \\\"b\\\", \\\"b\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\"]), \\\"a2b2c3\\\")\\nTest.assert_equals(compress([\\\"a\\\"]), \\\"a\\\")\\nTest.assert_equals(compress([\\\"a\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\"]), \\\"ab12\\\")\\nTest.assert_equals(compress([\\\"a\\\", \\\"a\\\", \\\"a\\\", \\\"b\\\", \\\"b\\\", \\\"a\\\", \\\"a\\\"]), \\\"a3b2a2\\\")\\n\\nt_fun = 0\\nfor _ in range(20):\\n    arr = []\\n    expected = []\\n    for idx in range(randint(1, 200)):\\n        c = chr(97 + idx % 26)\\n        len_c = randint(1, 200)\\n        arr += [c] * len_c\\n        expected.append(c)\\n        if len_c > 1:\\n            expected.append(str(len_c))\\n\\n    tic_fun = perf_counter()\\n    \\\"\\\"\\\"function call\\\"\\\"\\\"\\n    Test.assert_equals(compress(arr), \\\"\\\".join(expected))\\n    t_fun += perf_counter() - tic_fun\\n\\nprint('t_fun = {:.6f}'.format(t_fun))\\nprint('Total = {:.6f}'.format(perf_counter() - tic))\",\"language\":\"python3\",\"quality\":0,\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,5,4,5,4,3,1,5,4,2,0,1,4,4,2,1,0,5,3,3,1,3,3,3,2,4,2,5,4,3,1,1,1,3,3,5,2,5,2,1,1,5,5,2,4,5,4,3,5,0,2,3,3,4,1,2,5,3,3,3,4,0,2,1,0,5,2,0,0,4,2,4,2,1,2,0],\"quality\":[],\"rators\":[\"8PwfYqoDQFThzNtvf\",\"mDWNyaaQ9hvPCRzSd\",\"9pzFiFK3ANLjQfnr2\",\"a777e8chPvJkY3tKa\",\"QRv96jmNaYsWkxQEG\",\"eYfPWvZwnJQkHbSTK\",\"iS5BrkGLzJyPK7nKt\",\"buX4mCQhtXCfBjeno\",\"eHcgvkTGsH7ZziqBo\",\"GGdmhAvxXhqhhibJN\",\"SGhPxX5bHGL8zZqtt\",\"fSQSHjW3e72MrWxbD\",\"tAF9Gf6PiGogbZuWs\",\"8JyqsSbN2FJXPr3cw\",\"8sNv5PTHa7XQ8bNqR\",\"yjtdwc2AC4jA2RWtn\",\"J3upzLHuEwXH7Z2hx\",\"gb9rvGus2Jv7bjZSs\",\"2PufnQcsHsfymufX3\",\"bqr9SHKpQE6LNdY8q\",\"gJYuGdkXEWWmGRLzu\",\"AasGs8AeX9Lcb9xJn\",\"DPi9QGLctq2y76KuE\",\"J23RcmzbdtBbPCTjT\",\"zoDHPoPn9mhXpmka7\",\"3bBf2gCQXQY4q4K3Z\",\"wZ22E8EXW4qasgru2\",\"kDq2TnPdy7hGKdAD5\",\"LQxof8pGabGuWP7Gn\",\"8nE8QHnFYsHCFebte\",\"QLMxPhEN8pDaBcaGp\",\"hR7GMiqGap4CzEWSy\",\"4hvtWvakTXEpt2ZMr\",\"JGG3L7koNEh5Ys2gh\",\"XHShZ3WMPgGEA2vkR\",\"Yp7uvStL97cC9fKkY\",\"fE3fuScfCwCpmToq9\",\"8BFSTCnoe2QggN64c\",\"2iFe3EHEH2YdhSKrs\",\"bCFecqKyXTCnGgPSc\",\"5XiuAqicKD4hBdu63\",\"qNszsXx28cTxvGSNj\",\"dNBGNMKLZam4bvHuZ\",\"oEkDZvzwDpH3oiyJh\",\"GEP7C256YHMN7nrzN\",\"RZyZpteXnziFCueQ2\",\"r3GNSq3oReDjMQrhL\",\"gLcykmFjpHDgQJ2Ga\",\"vhZgCDRqMncYjfFB9\",\"97DthwdtrBLm2y2Yj\",\"hGpbkaZeYv3Fy4Ec3\",\"pQwhNKiCne4gEZgcn\",\"Nub6XnAgFtegmmWb4\",\"mueySHWyTHwm8b6Pr\",\"4xwButZn34q92d9Yn\",\"JrWQy3LbTZMp6nGju\",\"FcWRDYhNiMsxjsdJD\",\"pduNK68oazqQTtbLp\",\"bxMDD8vhiHw8rNdDD\",\"tBZdgxAjy3AjDhnqF\",\"T6iBEE2jp7f7iEF2P\",\"8nsLFM52gnSgK5GcP\",\"njzhkQi8ANdF2ABvj\",\"v9KtC8YLbMWmXiW2H\",\"WnsFabhFQ4J4gns2u\",\"NpxzZk8fyyh28rBmw\",\"d8qtzoLB264iP8tdY\",\"gKnWjDjwrJh7MK2df\",\"aFYzioHvZPvPaunsg\",\"gXTAie79kiw28tx5u\",\"suArq5BbSy7gD6xri\",\"GTKsdeEihE636Le9i\",\"yTtSCvGPyYna6JuRC\",\"aEm3Wvj2rFYRL8Lrb\",\"n2qKKxomPnb4zez5M\"],\"total\":78},\"flags\":0},\"summary\":\"The function is given an array of characters. Compress the array into a string using the following rules. For each group of consecutively repeating characters:\\nIf the number of repeating characters is one, append the string with only this character.\\nIf the number n of repeating characters x is greater than one, append the string with \\\"x\\\" + str(n).\\n\\nExamples\\nco\",\"tags\":[\"arrays\",\"control_flow\",\"language_fundamentals\",\"strings\"],\"timestamp\":{\"$date\":1610138134244},\"title\":\"String Compression from Characters Array\",\"family\":[{\"_id\":\"CsTELuWcqFAQYhwpY\",\"language\":\"java\"},{\"_id\":\"Pb6JrAEsFbizx7Ssz\",\"language\":\"javascript\"},{\"_id\":\"gEJwv2KgysoG9vaDh\",\"language\":\"php\"},{\"_id\":\"6RHxTTndfASnPyp8Z\",\"language\":\"python3\"},{\"_id\":\"QXPeCxsrNfxSuCxcc\",\"language\":\"ruby\"}]}}"]