a["{\"msg\":\"result\",\"id\":\"192\",\"result\":{\"_id\":\"YA5sLYuTzQpWLF8xP\",\"author\":\"Mubashir Hassan \",\"authorId\":\"T6iBEE2jp7f7iEF2P\",\"code\":\"def clean_up_list(lst):\\n\\t\",\"difficulty\":0.5596330275229358,\"familyId\":\"PPmAYKBjed6gw34TK\",\"instructions\":\"Create a function that takes a list. This list will contain numbers represented as strings.\\n\\nYour function should split this list into two new lists. The first list should contain only even numbers. The second only odd. Then, wrap these two lists in one main list and return it.\\n\\nReturn an empty list if there are no even numbers, or odd.\\n\\n### Examples\\n```\\nclean_up_list([\\\"8\\\"]) ➞ [[8], []]\\n\\nclean_up_list([\\\"11\\\"]) ➞ [[], [11]]\\n\\nclean_up_list([\\\"7\\\", \\\"4\\\", \\\"8\\\"]) ➞ [[4, 8], [7]]\\n\\nclean_up_list([\\\"9\\\", \\\"4\\\", \\\"5\\\", \\\"8\\\"]) ➞ [[4, 8], [9, 5]]\\n```\\n\\n### Notes\\nAll numbers will be positive integers.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"# JavaScript\\nTest.assert_equals(clean_up_list(['9', '4', '5', '8']), [[4, 8], [9, 5]])\\nTest.assert_equals(clean_up_list(['1', '4', '5', '4', '5', '8', '9']), [[4, 4, 8], [1, 5, 5, 9]])\\nTest.assert_equals(clean_up_list(['38', '80', '13', '73', '66', '70', '83', '6', '93', '9', '7', '8', '41']), [[38, 80, 66, 70, 6, 8], [13, 73, 83, 93, 9, 7, 41]])\\nTest.assert_equals(clean_up_list(['3', '8', '0', '15', '2']), [[8, 0, 2], [3, 15]])\\nTest.assert_equals(clean_up_list(['5', '1', '7', '4', '8', '8']), [[4, 8, 8], [5, 1, 7]])\\nTest.assert_equals(clean_up_list(['8']), [[8], []])\\nTest.assert_equals(clean_up_list(['2', '64', '16', '4', '72']), [[2, 64, 16, 4, 72], []])\\nTest.assert_equals(clean_up_list(['7', '4', '8']), [[4, 8], [7]])\\nTest.assert_equals(clean_up_list(['13', '16', '8', '22', '4', '29', '6', '20', '25']), [[16, 8, 22, 4, 6, 20], [13, 29, 25]])\\nTest.assert_equals(clean_up_list(['9', '3', '7', '4']), [[4], [9, 3, 7]])\\nTest.assert_equals(clean_up_list(['15', '23', '14', '1', '27', '28', '30', '9']), [[14, 28, 30], [15, 23, 1, 27, 9]])\\nTest.assert_equals(clean_up_list(['9', '3', '8']), [[8], [9, 3]])\\nTest.assert_equals(clean_up_list(['3', '26', '18', '17', '6', '8', '30']), [[26, 18, 6, 8, 30], [3, 17]])\\nTest.assert_equals(clean_up_list(['9', '5', '1', '3', '3', '8', '3', '6', '9']), [[8, 6], [9, 5, 1, 3, 3, 3, 9]])\\nTest.assert_equals(clean_up_list(['2', '11', '23', '22', '20', '9', '5', '7', '27']), [[2, 22, 20], [11, 23, 9, 5, 7, 27]])\\nTest.assert_equals(clean_up_list(['2', '1', '7', '4', '9', '6', '11']), [[2, 4, 6], [1, 7, 9, 11]])\\nTest.assert_equals(clean_up_list(['9', '4', '13', '1', '6', '5', '0', '3']), [[4, 6, 0], [9, 13, 1, 5, 3]])\\nTest.assert_equals(clean_up_list(['11']), [[], [11]])\\nTest.assert_equals(clean_up_list(['3', '7', '21', '33', '5']), [[], [3, 7, 21, 33, 5]])\",\"language\":\"python3\",\"quality\":4.733333333333333,\"summary\":\"Create a function that takes a list. This list will contain numbers represented as strings.\\n\\nYour function should split this list into two new lists. The first list should contain only even numbers. The second only odd. Then, wrap these two lists in one main list and return it.\\n\\nReturn an empty list if there are no even numbers, or odd.\\n\\nExamples\\ncleanuplist([\",\"tags\":[\"arrays\",\"numbers\",\"strings\",\"conditions\"],\"timestamp\":{\"$date\":1615640373996},\"title\":\"Cleaning Up Messy Lists\",\"stats\":{\"completed\":{\"total\":327,\"ratings\":[0,0,0,0,0,0,0,1,1,1,0,0,0,2,0,0,0,2,1,0,0,0,0,0,0,2,0,0,0,1,1,0,0,0,1,0,0,0,1,1,1,1,0,1,0,1,0,0,1,0,0,1,1,1,0,0,2,0,0,0,1,0,1,1,0,1,0,1,0,1,0,2,0,0,0,1,0,0,2,0,0,1,0,1,0,0,0,0,2,0,2,0,0,0,2,1,0,0,0,0,2,0,0,1,5,1,1,0,0,0,0,0,2,0,3,0,0,1,1,2,0,1,0,1,1,0,0,0,0,0,2,0,2,0,0,1,2,0,0,0,0,1,1,1,0,0,0,1,0,0,1,2,0,0,2,0,1,0,0,1,1,0,0,0,0,1,1,0,0,1,0,0,0,1,1,2,1,0,3,0,0,1,2,0,0,1,0,0,1,1,0,0,0,0,1,0,1,0,1,0,1,1,0,2,1,1,1,0,1,1,2,1,3,0,0,0,0,1],\"quality\":[5,5,5,5,3,5,5,5,5,5,5,5,5,3,5,5,5,5,5,5,5,5,5,5,5,4,4,2,5,5,5,5,4,5,5,3,5,5,4,4,5,5,4,5,5,5,5,5,4,5,3,5,5,5,5,5,5,4,5,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,5,5,5,5,5,5,5,4,5,5,5,5,5],\"rators\":[\"T6iBEE2jp7f7iEF2P\",\"ApbsE5hcAsG35vWR5\",\"PXAcsKkssS2yLyDv2\",\"Lfut9z3euZ3odxFcH\",\"DfHHpvnubuFmeNky9\",\"srJ34BaybkQh3qRkM\",\"Z2M9PKEfpBP5WBQPm\",\"tAF9Gf6PiGogbZuWs\",\"LabfGDTnJi9Xpa6Cc\",\"q9g2bvzryJypdnvoR\",\"66a9xX73nmTEuKs9k\",\"cjBLpm8m8Ajw3GsJo\",\"QRv96jmNaYsWkxQEG\",\"PC3pLs36zNzpRDSuE\",\"s5M5RvgqR9BhB9JoC\",\"buX4mCQhtXCfBjeno\",\"5HCu9Ydd86QgHDRNP\",\"SkSuFttr6gDL8rTr5\",\"XD5nmvKQchKezPXhy\",\"FEYpu9RWysAgW3XnP\",\"ey3CASd6Je5LEJzfB\",\"iS5BrkGLzJyPK7nKt\",\"zC8WrPp5BC6c2exrW\",\"pwWtbXEjzuvrhEGwt\",\"ZpLEmGnaRkQxf8Hfi\",\"GZ2AECipc4ybZzmp9\",\"AaTGkKFhA7tX4EvMi\",\"cR3ibTMxLyEdDFCHY\",\"h9RRjZqDymieWayne\",\"jw486FE54gNCYTx29\",\"nG3MPJQdBJ2jwKWQP\",\"DPi9QGLctq2y76KuE\",\"3cF6NXq3ZEwdkgSjb\",\"JKbEBybAsiKrmcqof\",\"TaR99FvyohFFQQfHQ\",\"DhxQYuNmzib7gpjoh\",\"sbJcFfQjQ59Wfg4Cd\",\"DEDniTrstQYGounXT\",\"GC9LB7vyQwSrQXoqt\",\"eMuCpJ2spXWkJjWNz\",\"m86y4gi8hMzGz8js7\",\"iojEnnY9FsMfYzp6f\",\"xbaRiyzSWq46EZ23e\",\"Ds7L5bksw2QRHjrKL\",\"WWS37MrHbt2NBFNXm\",\"NP2RxM3eBd3drnDwP\",\"tkNJoJGJqvpoMKeS9\",\"SanXoiYrfnQsJwMeJ\",\"Td32pyqK4wXPQCSht\",\"zd9FLSzsGz3evKafy\",\"a835PgGTZqd554oNH\",\"szQg8dxKNNre3v3Jk\",\"Rb4N2Z7mpyZCboMKu\",\"sX9GZp3fYyQLrBKMJ\",\"iNDxRctukmaaz2AMH\",\"NzbRqGWspQnWMoDrF\",\"2QGRoQn2dRq3scu7k\",\"qTxaBELSPzsgihBog\",\"WihjZ5iusPAPKcsr5\",\"AXcnPX68zdMiLNSmu\",\"93ADqsBQnwTEosjbq\",\"gb9rvGus2Jv7bjZSs\",\"XrqNzJ2FRG8HnGiR6\",\"CHvzhtXnv8HTbPQ56\",\"7gsyqgMhbByy34TQB\",\"wjc4iejpErBhxWwHo\",\"utyt9o5BYPWRbXf2X\",\"YcCLwitFMAEJSnxAW\",\"XbxHXmh5ZmRN2gw3K\",\"AFfw7cGg83uYk2Miy\",\"eYfPWvZwnJQkHbSTK\",\"4TmgHkn5vqyHK3sYC\",\"J5T8gZqiZXFuFDTQ7\",\"QXNiYjsix9aHQxB8u\",\"FiaTpm7ehfDv43wSG\",\"HBuJYgW2eRBJp9FoG\",\"mxX4rH5ELYkdZ2Mbw\",\"TiDFmxf3QEpbfXi4f\",\"i5iePG5GqhJJ8HEoB\",\"oBcs8GLX2ZFLXQy8y\",\"Q6gEE9dG8ERy2Xu3c\",\"gJYuGdkXEWWmGRLzu\",\"9qoWqLcHGiDX429rE\",\"8JyqsSbN2FJXPr3cw\",\"N2wnZXkhDH86mgjQ8\",\"yjtdwc2AC4jA2RWtn\",\"jWbd7SYDzLPjc9EDh\",\"9Gf6g4fuKc3uou9w2\",\"ghMkPtdFCpM6w8nax\",\"zMrNuQsBHWMJtaEhM\",\"SNjYcnXgeCMEdoSRs\",\"CyzskHGsC6WSmYrLu\",\"3LiSLdtN58n46NEqg\",\"H9KZi2cjt4FwH7qog\",\"fTNQmMvTZhhiGBCMe\",\"YRAzEBJoLvSaiPtYx\",\"4bb7pim4ewTwrMTEA\",\"rfyEkETeoS96QNH4e\",\"x2Cz7S8rCKJqCE3Xe\",\"dj5AyG5fWP8FdsSmZ\",\"J3upzLHuEwXH7Z2hx\",\"9pzFiFK3ANLjQfnr2\",\"LQxof8pGabGuWP7Gn\",\"wJCoBWQJrpEtFvb2P\",\"hnyhBFWwNCz9mDfSi\",\"Yp7uvStL97cC9fKkY\",\"a2Kmh6ekWqQQooHiQ\",\"pPpmP7xeJzGgK362R\",\"Cg3LKtEAJpsrdWroG\",\"sKfrD9gjCDHuqLzSk\",\"MKT7khMBGXzA22ykf\",\"8teSHp77vHhhvJWiS\",\"aEm3Wvj2rFYRL8Lrb\",\"Wpn95NqWxncQrwNgz\",\"5Ti9ZK75zbT9PoQLZ\",\"2u9wghjCydey6aWys\",\"A7G8WgwhjsEDTB4DA\",\"PweZwtXTDkEwxZXQ4\",\"YZL9ec49hQdqcwu2j\",\"FxbTzThBiTnRzfirA\",\"qNszsXx28cTxvGSNj\",\"DFpZcskPncmo7fuzR\",\"NrRa4TS6uZR9xuXRt\",\"p8qqFdJ3FSk5x9z3G\",\"9Ly8afdtofp8DXzrt\",\"Fk9kLwoG4Brf4KsKf\",\"hqiTnCHZxYu2nvNK5\",\"iY25XNrJX2giBLvnd\",\"FgMe2gzbxog9WzaRr\",\"JS3hNM3XXkxPdg3yk\",\"MPXveqimuKhE2MvqW\",\"NioGGZL9KCn5Ln96t\",\"uPkXMf9WEJQLL9a5Z\",\"mvJBakQ35CWAnbbEZ\",\"dzS6WBTMHyFEag6Fp\",\"AYZrBpxmaHxq9th3T\",\"7ajSwbNMNp9ggPewT\",\"dqwatKFAeGpjmf5dm\",\"DBFTyR5w5TzNmDGfw\",\"H8ob4bbKy27vWp9Ev\",\"5PaQgfQznXjaF9e6F\",\"YmQb9Mo4Xcg2vzgbn\",\"KypQdzThzogKXwkXE\",\"bur3yQ8s34zqKGEro\",\"K6MfKMytoJJuSGewP\",\"TFRbA7nkidNkBB5uu\",\"T6Rm8mREPMZSftzrC\",\"aHY44nrovcknWN63K\",\"a2PQbkxH2NhSWQ4SL\",\"Qmb8nsFJTyRrNyQ5u\",\"MMrsg6HXaBN7Whg6q\",\"kqYkfcZMkp5u2EdXZ\",\"u5jLXaWAKo7K4JvTR\",\"sHjfbGQGLHE6JR6qu\",\"w3QDkmjZj2dAFDsjq\",\"6LbPw9yW6HHDfn8B8\",\"wWDXL7Lz6oTAZF4mj\",\"EfxwqhYdapX3dMQC2\",\"3hSzE837A9SKsi5X4\",\"hs8WbxhNtYBiqEj9C\",\"JiSpvq6C7azQEmENc\",\"di2hhADLx59Bj4ewM\",\"829BhxnwhhyHT9fRQ\",\"M2gFMJkocQSY6bsFR\",\"cfDt8NAsAGFy4w3fY\",\"Qp3LB3TcLgoiJSFCc\",\"j7ebNFtte6fSkMWjj\",\"DM2rQSYE3NzYvuWot\",\"Dq24MSpogRmq6L4hX\",\"FGEeCTorXbX3WvjFW\",\"NYyhWY7soeTZ6ymd5\",\"jWrysbS3AqiQN8rmo\",\"gGXghWEN4u5vuoXcR\",\"CBwziWoAPy7qfE5MM\",\"DTyNcDkiScCjgJt28\",\"hRfdHT8bWztZuCqzi\",\"bPhkDcd22h6sE2n8v\",\"2MjzJ7yxh3eT3xbng\",\"2a9b3pJq6kEiDKYPr\",\"MXGuntvz3byrP6WJc\",\"obkXHqRsxLmBajuwb\",\"dQd664XYR6QKHFvHW\",\"vhmyKoH2TxNHKuFzF\",\"XujK3rHd3JcM9TLJy\",\"AasGs8AeX9Lcb9xJn\",\"m7hHWJrBub7ueaokh\",\"z7FcXbC7SkhPejDrZ\",\"rrSC943cCKNG48sH4\",\"ecytnKJxjCPk8Kbif\",\"5Dd7XwALvvMMwS4Fb\",\"yAouD3PxzED8a4gap\",\"hZ2JDAEG2P5rMLWEW\",\"M8dQuMrEpP8Hc3tHN\",\"bM2eBtpFQCv8632C9\",\"8f2GuLuAy3nb6KFfY\",\"kjvgTyRFyKHv44DcH\",\"bSeEB8ypsxnQxX2SJ\",\"qD2LrwaDrSdiybLKY\",\"cdXmwjupCXSvJTSNo\",\"HqmxnQJM66Y57twhn\",\"Afnps7TJQuS9sipMb\",\"syRNbbPdLCGXbH2Gy\",\"TCvpT4EPb8qNssNB7\",\"rHDq28dQa3QZgRYrn\",\"FMyZPN6odEFtfuimF\",\"sDRY37TfoncsA2FSR\",\"eHcgvkTGsH7ZziqBo\",\"PTDFuxAzou7W6asWt\",\"pQwhNKiCne4gEZgcn\",\"FocLpCB2WEiK2gGni\",\"zBk2cwJ9SLAhFuM3K\",\"HsEqBz8kiBNZJA3Qw\",\"54BFnXEjY3FuRNYpN\",\"8PwfYqoDQFThzNtvf\",\"gKnWjDjwrJh7MK2df\",\"Nv8HhfMn2Rddq6Bei\",\"5CsHudxuDESxmjTPW\",\"Mtbjs2R65YnswKuw2\",\"peCvTbjQBgdWo53Wv\",\"AQSqD9oNv2uPfxZCR\",\"PBnvAuiKXwjqjKG33\",\"EA3m4tEa89QaeS55E\",\"qAby4AWXmTNeusvg3\",\"PmRyaLmhAF4MMLBtM\",\"a47wtdv3DqFWLHMiK\",\"b7yQWr6eJFxYTmt3j\",\"8BFSTCnoe2QggN64c\",\"pJ2bL5PHsgoeMsmzN\",\"5nbHH4eApn6So9h2n\",\"9HPB28hBoTnZnspQE\",\"Jqk2uJZZxEv5wZFze\",\"d9LBRxvADNBB5QJMB\",\"crEnTT8upDBFiKTZp\",\"dYPkStFnLvAMsHSzZ\",\"yXGiiSAR5nBHnH3yr\",\"7q8oBsCHwn48Ppnrq\",\"aYemFjcSRyv7T76h8\",\"NeZ7AEFmMtNCPcm8j\",\"wRttWTM59y8m5mx7x\",\"Ne8mK9DDHG8TRkoxG\",\"wYR7GAr2STaYrFabh\",\"8ynPy35NQFsnh4WqC\",\"LWCzZ8mb8gwrRNGfq\",\"jRNj5RZyC6AHmoPGa\",\"BrTDhPJcACL2bsrpJ\",\"o2Q8uM5DwJnSRmerd\",\"9LrF5o2TK2iE8BZJh\",\"PwZPGSrYmD8nq7fmv\",\"QWjsXnLaJ7xfL3Amq\",\"fGvJRtjbJFJJZLCnW\",\"5QN8R22z43SrwoHDz\",\"B4y8aoyXJtskYPFEL\",\"YZsZjfvd3PnLhDJrR\",\"Akkq6AENwYNwo8rSw\",\"NpYMiwgXBGonwx3Fg\",\"qaPjAANdnxFnWfj5d\",\"bZB6FhufsrHsYipXk\",\"xjyixzXzqqqTfJARd\",\"GktgG4zuF225EApih\",\"rhS8qXRjZcpDXkwnE\",\"rF97GDLqCgynr7BaD\",\"3SgSNoAB3sxaYeT3w\",\"kJMAAWPWEG6qFouEh\",\"RLgTyu6hj6Fw6FGvi\",\"afvP29FhRou2bTaav\",\"acFDzp9EJzHg8c2rD\",\"B4LpueSJhLDYMEQAW\",\"cPz8Tv943k2H422Tj\",\"M4vq8ATaS9Jg5X7iP\",\"N2sNut8aET59YNhAy\",\"vAbK8sCfKyFC78HYg\",\"r83jJeskFETo3RLhZ\",\"cz3wdxxPWoedzT3LS\",\"gjiu8kLnHYxe4HoBN\",\"tR9grPBLncwacBTzr\",\"5jC6kt3SXoABZBwsY\",\"iYXdNw7tKcgA3QwBX\",\"5H6WybGSZcsxZnLAW\",\"2qtde7moqrzm7B4Ht\",\"fMp8sPsKSECdfgF9j\",\"rQA9SE8nuwFueaHsR\",\"4sSXLSBZDxK2Swoo7\",\"pnfwbXY4dgrSKq2Fv\",\"Si3HYCLMe8PM47rRt\",\"E45zy9qvm9DeJhDWL\",\"acENs2fSF9d7hkTZx\",\"FT2wBacm3JxrYmZDW\",\"AwXQLqnTYzcCQrnqQ\",\"EE6qCDCRphjXXdE3n\",\"SjPPNc7xzsHhmiBdG\",\"rraTtctZqnjXu2L2x\",\"F8dA24AosSC8XXb7D\",\"dCHJHgKdWNMGaAA7W\",\"4ZyLqTQ9e6hrh26H5\",\"DhfJpC3Y72teNfiKE\",\"XYwCvWPkjJu4Zn5Qu\",\"oaJbwGAbtpgYhMEgd\",\"8BJyXvRWcrvN3nttS\",\"Wi4H6ayKsNDWWQCG5\",\"d8qtzoLB264iP8tdY\",\"4Lwjr34ypKNQNQCar\",\"CTW3MRyc4wNkcjGZQ\",\"7HAL7H6NJmc4NC8Q5\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"EEWcSX7Rz5cWzes5d\",\"language\":\"javascript\"},{\"_id\":\"gmBqGDRFvQgH6maLH\",\"language\":\"php\"},{\"_id\":\"YA5sLYuTzQpWLF8xP\",\"language\":\"python3\"},{\"_id\":\"m6zKvtgS8fqLKmxhb\",\"language\":\"ruby\"}]}}"]