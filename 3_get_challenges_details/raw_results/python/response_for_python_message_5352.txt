a["{\"msg\":\"result\",\"id\":\"1389\",\"result\":{\"_id\":\"72XK73LFkd7wuakwZ\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"def junction_or_self(n):\\n\\t\",\"difficulty\":2.035502958579882,\"familyId\":\"KkT6vmjmuyHNCj6ta\",\"instructions\":\"In this challenge, you have to separate integers into two families, establishing if they are Junction Numbers or Self Numbers. Given a number `n`:\\n\\n- If exists at least a single number which added to the sum of its digits is equal to `n`, then `n` is a Junction Number.\\n\\n- If there are not numbers which added to the sum of their digits are equal to `n`, then `n` is a Self Number.\\n\\nGiven a positive integer `n`, implement a function that returns:\\n- The string `\\\"Self\\\"` if `n` is a Self Number.\\n- If `n` is a Junction Number an array, ordered descendingly, containing the numbers which generate `n`.\\n\\n### Examples\\n```\\njunction_or_self(25) ➞ [17]\\n# If we add 17 to the sum of its digits...\\n# ...17 + 1 + 7 = 25\\n# 25 is a Junction Number\\n\\njunction_or_self(818) ➞ [805, 796]\\n# If we add 805 to the sum of its digits...\\n# ...805 + 8 + 0 + 5 = 818\\n# If we add 796 to the sum of its digits...\\n# ...796 + 7 + 9 + 6 = 818\\n# 818 is a Junction Number\\n\\njunction_or_self(7) ➞ \\\"Self\\\"\\n# 1 + 1 = 2\\n# 2 + 2 = 4\\n# 3 + 3 = 6\\n# No number added to its own digits is equal to 7\\n# 7 is a Self Number\\n```\\n### Notes\\n- As in example #3, the sum of the digits of a positive integer lower than 10 is equal to that same integer.\\n- By the formal definition, a Junction number must have at least two other numbers that generate it, so that the Instructions are to be considered valid only for this specific challenge.\\n- You can expect only valid data as input.\\n- _Trivia_: the first Junction Number that can be generated by three different numbers is `10000000000001`, while the first generated by four different numbers is `1000000000000000000000102`.\",\"isHidden\":false,\"lab\":\"Test.assert_equals(junction_or_self(25), [17], \\\"Example #1\\\")\\nTest.assert_equals(junction_or_self(818), [805, 796], \\\"Example #2\\\")\\nTest.assert_equals(junction_or_self(7), \\\"Self\\\", \\\"Example #3\\\")\\nTest.assert_equals(junction_or_self(309), [303, 294])\\nTest.assert_equals(junction_or_self(406), [401, 392])\\nTest.assert_equals(junction_or_self(188), [175])\\nTest.assert_equals(junction_or_self(20), \\\"Self\\\")\\nTest.assert_equals(junction_or_self(1), \\\"Self\\\")\\nTest.assert_equals(junction_or_self(2), [1])\\nTest.assert_equals(junction_or_self(11), [10])\\nTest.assert_equals(junction_or_self(117), [108, 99])\\nTest.assert_equals(junction_or_self(165), \\\"Self\\\")\",\"language\":\"python3\",\"summary\":\"In this challenge, you have to separate integers into two families, establishing if they are Junction Numbers or Self Numbers. Given a number n:\\n\\nIf exists at least a single number which added to the sum of its digits is equal to n, then n is a Junction Number.\\n\\nIf there are not numbers which added to the sum of their digits are equal to n, then n is a Self Nu\",\"tags\":[\"numbers\",\"loops\"],\"timestamp\":{\"$date\":1580359533631},\"title\":\"Junction or Self?\",\"stats\":{\"completed\":{\"total\":198,\"ratings\":[2,2,2,2,2,2,1,2,2,2,4,2,2,1,2,2,2,2,2,2,3,3,2,3,2,0,1,2,1,2,2,3,3,1,3,2,4,3,1,2,2,2,3,2,3,1,2,1,2,0,3,1,1,2,2,2,3,2,2,3,2,3,2,3,1,2,2,3,0,1,3,0,0,0,3,2,1,3,3,1,3,0,2,3,3,2,3,3,3,3,2,0,0,0,3,3,2,1,0,2,3,2,2,3,2,2,1,3,3,3,1,2,1,3,0,3,2,2,3,2,3,0,2,3,3,2,3,1,2,2,3,3,3,3,1,2,3,2,3,3,3,2,0,3,3,0,3,3,3,3,2,0,2,0,3,2,2,3,1,3,2,0,3,3,2,3,2,3,0],\"rators\":[\"2fxapKr8XGdNeaKi2\",\"Jqk2uJZZxEv5wZFze\",\"tAF9Gf6PiGogbZuWs\",\"gb9rvGus2Jv7bjZSs\",\"2innwjWqxJHo4eRGh\",\"J5T8gZqiZXFuFDTQ7\",\"8JyqsSbN2FJXPr3cw\",\"cRpaCxYRmGcN3Nsoj\",\"s5M5RvgqR9BhB9JoC\",\"iMHrN3Wiefh9Ame38\",\"QnPD4Sv6W4LHc2Qng\",\"ek7cHB9P7rbmGEKwB\",\"C4QntmkYtB89GNtpd\",\"M44nifmWzt3wtYyJx\",\"EjbDDFRECrzQDkzrX\",\"kQH5b8MXJunh84Czq\",\"4CFzv558qbGcpQwc4\",\"uw8E83imJYpQiiPpP\",\"8PwfYqoDQFThzNtvf\",\"AasGs8AeX9Lcb9xJn\",\"v9KtC8YLbMWmXiW2H\",\"LjoNTyGEMfBpMHHus\",\"mDWNyaaQ9hvPCRzSd\",\"aEm3Wvj2rFYRL8Lrb\",\"wZoxzQDbso9SMAPkY\",\"fXfjsrGcdwpy7hedt\",\"vsE62YBA9NpMFBNiw\",\"aCNWav8S8Try9RkC6\",\"cR3ibTMxLyEdDFCHY\",\"PytNZK9mNiRiZxPrm\",\"8LfTheFzvicameoz9\",\"iHMehMwgYQGhGAF72\",\"n2BRY9X8899dcG8Bw\",\"ZNnsMeNkdDhHjSrZb\",\"Nua6T3dBurBy3Qfg9\",\"gSFJPsMXnqAog3Q9f\",\"3Zceb8GudqAG3onG3\",\"YRstQuthRkFeBiXug\",\"Yp7uvStL97cC9fKkY\",\"gJYuGdkXEWWmGRLzu\",\"k5mp7Hkg8w5rwiXpe\",\"xKNjRWsbgGCo8r6Yu\",\"3pxHTZBsv7MKzFG6Y\",\"HF28xZKSLM9wEuqNg\",\"YsAz93yZw8KKPupKv\",\"ekQh3jzgGLsEMbKo3\",\"KRmxvA4mWgfKvHmYN\",\"JQ5uoxA4WZgN6HyJk\",\"3ECpdeExhBmkYXtba\",\"DNpiCnDQLMs2Kefb9\",\"ZRxAkXjTCdyQTdSDw\",\"QDrLtnBsA2LJfptvT\",\"muQCKmimwtNAdS8rp\",\"uMLsCftXNbvx6pcGA\",\"hnyhBFWwNCz9mDfSi\",\"RErqK2yM94wYyD2hk\",\"a777e8chPvJkY3tKa\",\"rgvAJFwfCeYoYnFTK\",\"DEDniTrstQYGounXT\",\"Sj4iamMmNvxwWJBiF\",\"DrkR35NqnP9NDLbq6\",\"9pzFiFK3ANLjQfnr2\",\"djeesDJQwNJay4RTe\",\"yXuZh6CF6GqKYHzoT\",\"3LiSLdtN58n46NEqg\",\"RGDvx8G7JF2DExyja\",\"JS3hNM3XXkxPdg3yk\",\"pDvFWMCD9fQwoBPcu\",\"8TAYWzqJAkXq2MAba\",\"efcsSdKgupNnf9DKD\",\"rXLCRKrADddSeR6G7\",\"E8TMSMSamEbBtf9Lo\",\"KZvaNQrXBFJ9bKLYx\",\"f2BoqyCpgnmjEjLqx\",\"W5TajitmCyxz87zAC\",\"Ce2aet2A9HN4RfCNz\",\"Ecg4m7srYGgZsb4Ck\",\"qeqqjviYA9R7uQZEW\",\"BrTDhPJcACL2bsrpJ\",\"azQuTr5LY59adhfkx\",\"PtaiHYXnMwb2rWqQW\",\"fsziNDMoc3TX7xuvj\",\"DxxNN37iEz7b8t2nf\",\"CmMAoNcXDHWksrs2m\",\"Z4M3NAa4TXquMNkHe\",\"bJxaKHJqR82EWw8Su\",\"5qfcG54cbBC8ujxav\",\"dEuJGZbBQkveCXEFk\",\"pWD2YC5s4YRCxFc2i\",\"CwXsu25ygLEwQbmQC\",\"iojEnnY9FsMfYzp6f\",\"fK2ousiaKc5gvevyW\",\"cykCKNJcqFBxz4T8s\",\"vSPc7MGK5Poy8tSFp\",\"jBR47vA7HwAZqp4QA\",\"TwKZ3835iFLog2RuQ\",\"SGhPxX5bHGL8zZqtt\",\"NchnDcEmsLTeFZ4FH\",\"7sSSWHLA7vyo7FAwn\",\"CTKmXtrqDYqJBnuy8\",\"nBo2LLuSMeEgd5f6G\",\"ZJQW3bL2KzxJcdEoc\",\"49XFttjKo2QhEWT3R\",\"8zQnyekbSwzhoJymu\",\"ZrKCkX7xxGGZzauFW\",\"ACEZh39brWjdGkZXb\",\"KZ2xddpM2f9JRaryB\",\"yjtdwc2AC4jA2RWtn\",\"wZ22E8EXW4qasgru2\",\"HqmxnQJM66Y57twhn\",\"J22wvS5AWunXS7jcK\",\"7saJ6s2T8HRDfThbx\",\"Ja9GA5pCEfhb2jP3N\",\"6SKDJwXpev4qPSzgM\",\"P7NmFbCJ5offXMRvB\",\"QEkDGPgh9LRAWECEx\",\"axdSNLZpiCDF8RS6n\",\"CQrLMPjz7gn82rySP\",\"N43d68KgA2qv7Jm2Y\",\"dkcmCKwqApX5jBggc\",\"EMJ6uvBZkie429gdg\",\"pmgFEciNrd3ES9tuu\",\"4fhjJBvLBWh6QeSih\",\"MfKe55snfKsdnDejs\",\"4uDFMQFPxDcYhiuYK\",\"w2HhxvSLmDhaGCAjE\",\"mG8HqKiAQFTdRZthG\",\"xn7uGNKeAwPEkP9oA\",\"eqa6cvt5yha7z7dPt\",\"tpxMgkGSHwBjS95Ta\",\"zvR7koBTGcaj5pJNQ\",\"8BFSTCnoe2QggN64c\",\"NfMJuiBk6FN5Jc6ow\",\"CQhaiZqQcP87YteSG\",\"qD2LrwaDrSdiybLKY\",\"ppxNdL4gjANz8oJLQ\",\"4u53tzw39QRftQwBh\",\"L3BJygJoLeHsTZqfo\",\"6F3Y6ZBAGNDGGTt9B\",\"DPi9QGLctq2y76KuE\",\"oBcs8GLX2ZFLXQy8y\",\"6MjSiiBLPcvXbXcaZ\",\"gXTAie79kiw28tx5u\",\"dYPkStFnLvAMsHSzZ\",\"J3upzLHuEwXH7Z2hx\",\"cGwqKDCYRv6AP4GPa\",\"nc7bRhkxgKyqusYe3\",\"shdSrDq5ZKqfpgjmu\",\"7scpcTEp3SEx5Wjg9\",\"fznzd3qnvtbFkkizz\",\"cAP3n5NY64uoMwzRR\",\"kEkNyqFARK9YBrhRx\",\"9RaccqxB9dRZuS7z4\",\"QRv96jmNaYsWkxQEG\",\"GGdmhAvxXhqhhibJN\",\"PXAcsKkssS2yLyDv2\",\"FEYpu9RWysAgW3XnP\",\"Wpn95NqWxncQrwNgz\",\"2PufnQcsHsfymufX3\",\"qZQxPQ2kaNKAMesHT\",\"d8qtzoLB264iP8tdY\",\"qzXAMXsHZGT8o5hTA\",\"T6iBEE2jp7f7iEF2P\",\"4Lwjr34ypKNQNQCar\",\"gKnWjDjwrJh7MK2df\",\"9bQyb6rW7xfE4vgrR\",\"4RY3zj9C2t8GGefhi\",\"yod5YhKtPqw2GfG9B\",\"K53qgA9wNWsDh5ha2\",\"8sNv5PTHa7XQ8bNqR\",\"RoGGD5cpHb4ftdLDv\",\"rhS8qXRjZcpDXkwnE\",\"5HCu9Ydd86QgHDRNP\",\"Ds7L5bksw2QRHjrKL\",\"nkH3HfJXLMNcBMM79\",\"3KkyQm77zsew58Dc2\",\"Qyfyyw6oC4EHAndzo\",\"h96caAS2Whbje6Lw3\",\"jkbavR2ATFJcpmo8M\",\"CHvzhtXnv8HTbPQ56\"],\"quality\":[4,5,5,4,5,5,4,5,5,3,5,5,4,5,5,4]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"quality\":4.5625,\"family\":[{\"_id\":\"dpc8d3knJRf2aBkif\",\"language\":\"javascript\"},{\"_id\":\"72XK73LFkd7wuakwZ\",\"language\":\"python3\"},{\"_id\":\"pgJA38TzvhGcrFskk\",\"language\":\"ruby\"}]}}"]