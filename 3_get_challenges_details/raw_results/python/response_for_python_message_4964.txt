a["{\"msg\":\"result\",\"id\":\"1197\",\"result\":{\"_id\":\"jjPGM3a22AgzcBFCx\",\"author\":\"TheDuckOne78\",\"authorId\":\"HrF7YmdsHqWw3oo5d\",\"code\":\"def decrypt(lst):\\n\\t\",\"difficulty\":1.6650717703349283,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"BxSZ65zZQzmNPC4Su\",\"instructions\":\"Our fleet managed to get one of the enemy's top-secret codes from the remains of its fallen ship. The codes were immediately sent over to our code-breaking base over at **Bleckley Park** ;) for analysis. The team found that each code contains 25 numbers with one missing. The missing number corresponds to a letter in the English alphabet. Your job is to find a more efficient Method of decrypting the messages by `digitizing` the process.\\n\\nWrite a function that takes a list, detects the missing number (in the list), and returns its **corresponding letter**.\\n\\n### Examples\\n```\\ndecrypt([19, 12, 14, 21, 22, 3, 11, 20, 9, 16, 24, 17, 2, 10, 13, 18, 7, 8, 4, 5, 1, 6, 25, 23, 26]) ➞ \\\"O\\\"\\n# The missing number is 15.\\n\\ndecrypt(24, 12, 2, ..., 25) ➞ \\\"N\\\"\\n# The missing number is 14.\\n\\ndecrypt(24, 12, 2, ..., 25) ➞ \\\"P\\\"\\n# The missing number is 16.\\n```\\n\\n### Notes\\n- The list will only contain positive integers from 1 to 26 with one missing.\\n- There will be no duplicate numbers.\\n- Return the **capital** letter.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(decrypt([21, 2, 5, 25, 7, 20, 15, 3, 6, 9, 16, 19, 1, 4, 11, 22, 10, 13, 12, 18, 24, 17, 23, 14, 26]), \\\"H\\\")\\nTest.assert_equals(decrypt([22, 7, 2, 15, 10, 4, 11, 25, 1, 8, 23, 12, 17, 16, 14, 13, 3, 21, 20, 6, 19, 9, 24, 18, 26]),\\\"E\\\")\\nTest.assert_equals(decrypt([17, 3, 15, 6, 21, 7, 18, 5, 13, 23, 24, 16, 8, 19, 25, 2, 9, 11, 22, 10, 20, 14, 1, 4, 26]), \\\"L\\\")\\nTest.assert_equals(decrypt([8, 6, 23, 4, 25, 13, 7, 19, 15, 3, 14, 5, 21, 11, 1, 2, 24, 18, 22, 16, 9, 20, 10, 17, 26]),\\\"L\\\")\\nTest.assert_equals(decrypt([19, 12, 14, 21, 22, 3, 11, 20, 9, 16, 24, 17, 2, 10, 13, 18, 7, 8, 4, 5, 1, 6, 25, 23, 26]),\\\"O\\\")\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,3,1,2,3,0,1,1,1,3,2,3,2,1,1,1,3,1,3,2,3,3,1,2,2,2,2,2,0,2,3,3,1,0,3,1,1,1,3,2,2,2,3,3,1,0,2,2,2,3,1,0,2,3,3,2,1,0,1,2,3,4,0,1,1,0,3,1,1,3,0,2,2,2,2,2,2,1,1,0,0,2,2,4,2,2,3,5,2,2,2,2,2,2,1,2,3,2,0,2,2,3,0,1,3,2,1,1,1,2,2,2,2,1,1,2,2,2,3,3,2,1,2,1,1,3,2,1,2,2,2,1,1,0,3,2,2,0,1,1,0,2,0,0,0,2,2,2,3,4,1,1,2,3,2,2,0,0,0,2,0,2,0,2,0,1,2,2,3,0,2,0,0,1,1,2,0,2,5,1,2,2,0,3,2,1,1,2,2,2,0,1,0,1,1,2,1,1,2,2,1,2,2,1,0],\"rators\":[\"8PwfYqoDQFThzNtvf\",\"ya2ofFqYRC57bfbND\",\"aEm3Wvj2rFYRL8Lrb\",\"rbFTTxs6S4D9TxByN\",\"qPpQfR5KyDb5Y3EFf\",\"8NP9zgWW8ZhmvzGzy\",\"gb9rvGus2Jv7bjZSs\",\"s5M5RvgqR9BhB9JoC\",\"hnyhBFWwNCz9mDfSi\",\"gJYuGdkXEWWmGRLzu\",\"Z4M3NAa4TXquMNkHe\",\"tAF9Gf6PiGogbZuWs\",\"HF28xZKSLM9wEuqNg\",\"PweZwtXTDkEwxZXQ4\",\"8JyqsSbN2FJXPr3cw\",\"n2BRY9X8899dcG8Bw\",\"Yp7uvStL97cC9fKkY\",\"TwKZ3835iFLog2RuQ\",\"eJWFhY7M6ke5YhPuB\",\"DEDniTrstQYGounXT\",\"iojEnnY9FsMfYzp6f\",\"rgvAJFwfCeYoYnFTK\",\"fK2ousiaKc5gvevyW\",\"KdNDysEsy2TW5QRJ2\",\"ekQh3jzgGLsEMbKo3\",\"zZDaXBxMzTCBhNkgL\",\"pPtmnJ7q9QchoG2Jq\",\"DYDJTyGgKFnBRLm2r\",\"mDWNyaaQ9hvPCRzSd\",\"iS5BrkGLzJyPK7nKt\",\"5MNidSqxoLB89n5DR\",\"cR3ibTMxLyEdDFCHY\",\"ryspbqExe5ccjH7Qk\",\"CwXsu25ygLEwQbmQC\",\"yoGH52jxymttrP5Mo\",\"GGprTwrkjuccmrQRg\",\"BrTDhPJcACL2bsrpJ\",\"8zQnyekbSwzhoJymu\",\"w59FKuefC8SghcbJe\",\"ZrKCkX7xxGGZzauFW\",\"f2BoqyCpgnmjEjLqx\",\"7sSSWHLA7vyo7FAwn\",\"djeesDJQwNJay4RTe\",\"syRNbbPdLCGXbH2Gy\",\"axdSNLZpiCDF8RS6n\",\"xdgy7nWSKCekXnaJM\",\"DfMcEs6XsfGtTpQ26\",\"mS9ksMDr2KzGt8J2m\",\"6gS4E2C84vBYTYeDZ\",\"ZsHZ6a5qLfC8m8EyY\",\"pWD2YC5s4YRCxFc2i\",\"pscBduNyf8TDHe2Km\",\"j57Xos8wYZWcwqMrt\",\"WGKpjDMbEhmGdkorb\",\"Wv2vJnEj8ywNmARoF\",\"MCw7uAcoWcSTBTmr3\",\"9t2pdrwjexddbfjxu\",\"55RQznnuTGpsj3EXd\",\"6SKDJwXpev4qPSzgM\",\"77dQgT3gTGWLcRPTk\",\"ZgmNZTKEEBSyKujwG\",\"XwHodfEcegFPRqQNr\",\"bJxaKHJqR82EWw8Su\",\"eAR7sx2AnPoRhJQTi\",\"wS2o3x4nrsadtC3xP\",\"9cWTAMQmN7PZMqdec\",\"mqJtnfNCs6CedXnay\",\"RpcWqjNd5nMeB4WZS\",\"FK2fEQ3F6DD3buSLJ\",\"PPGJZrzcxRL4gE8TC\",\"rcdPwRahgrNS6TBjt\",\"qNvnJkCzNppaNGzk4\",\"yJ6ooPG3nRXGgwix2\",\"xBQC5uQdx6WndJ3iM\",\"zyFPLXxJzpku4xZYt\",\"vcBAc4nu5joJduTM6\",\"CinftobevkY9TuKcR\",\"6vvGnTKJmqSBcNZEn\",\"HqmxnQJM66Y57twhn\",\"yjtdwc2AC4jA2RWtn\",\"Lhcy73hmzbjDqY5f7\",\"9pzFiFK3ANLjQfnr2\",\"JhAEbSj5sAMofcxBf\",\"xJHw6qF7ZsMf6NWJv\",\"FeHjHusaLYJbY7pXA\",\"WKBD42MKDBF4ue8zp\",\"AXJXCAjdQkJAkBrom\",\"eK8jQjdksmZxtSk3J\",\"qQQ4hCQpzitmHSkjS\",\"n4FhidQRcttfRG4ho\",\"BC3XhXhX9mTrAScgy\",\"DrkR35NqnP9NDLbq6\",\"SgnXaxrjwGYuShnHh\",\"jBR47vA7HwAZqp4QA\",\"cxABox46qWvJRyidE\",\"dkcmCKwqApX5jBggc\",\"6428wKHtwKkFdvBs5\",\"ZQSG2DF9TjmBGXPwu\",\"b5YCWfeYdsmPvEYBp\",\"E4KGguXaWuR4bd2n7\",\"ji5f27FPz4wRRF6Ls\",\"dEuJGZbBQkveCXEFk\",\"8BFSTCnoe2QggN64c\",\"Nb6LYPoQP6KJZt8mz\",\"suaEBYJRrEGzyWnku\",\"Ja9GA5pCEfhb2jP3N\",\"NNbiEWyvnKPNkLFLK\",\"RLGFzgobbQeMYfpT2\",\"RXgLif2vM276W4tgZ\",\"KveNo7QtazNvRAXxa\",\"HXPTo2odL5Csxhejr\",\"tkgTjBuTiYxeZbDXN\",\"pJj86xc32Bs7Frxvi\",\"H4zgQE4J89hdCFQkP\",\"k7A3iQEewkKLuHLBG\",\"oAcTLQZ5g5rEqvGKz\",\"EMJ6uvBZkie429gdg\",\"xwEZk3bNZoNDPJYF5\",\"NPHbTDFiEfTMjEXh4\",\"e3Wf64w5trKbnefsX\",\"H9KZi2cjt4FwH7qog\",\"REbXuiozZdcmS4iiJ\",\"orFLgPDw9H5MDzmwo\",\"RehJGBFS6CYiWdjZx\",\"NrP8YjG6bf3nW2MMT\",\"FRL8gkq6aBCoTzxTF\",\"BrhZwnP2hwBwNknnA\",\"eGmTKmhxCSQaNWgPk\",\"JZ3u84Sa8Wrmz3ySq\",\"JqY7RiWr9259Lkfsw\",\"PELYBQ6iBSDaczv5v\",\"NG8PWBSjsM8mMhQEq\",\"Jud2m4FTc4JDuzu9A\",\"XTJp4MfjMJvnP5xaE\",\"K4JsBLPjNKZv5LWnp\",\"C7HBPrsAnwaccBwwy\",\"EDPQYbrJx8TPb7HvZ\",\"bQo8STwxFBXXd5cPh\",\"DEMZvkgty7S2teDRA\",\"KHnmawdkEQBHwjEeR\",\"KEusdQghvL633t9Gg\",\"Ecg4m7srYGgZsb4Ck\",\"AasGs8AeX9Lcb9xJn\",\"jNvegJWCk5HCtEMbK\",\"YcCLwitFMAEJSnxAW\",\"R4SjTgDnpigJYDLyL\",\"9cnex9yAD4hyb5y5S\",\"N43d68KgA2qv7Jm2Y\",\"ddPkBXx3jwybtxAnt\",\"skWLrSCPagcDN9oay\",\"85PAWNajZLAezxkiE\",\"uGuS9YRXW2nj4p6zf\",\"w2HhxvSLmDhaGCAjE\",\"qEyYdgisv7FoxLBjH\",\"tpxMgkGSHwBjS95Ta\",\"NNE5HNRXAkmhrWgyQ\",\"vTaTFcLYTgof4dsyw\",\"q6peoEWzrwZzogT5w\",\"YRAzEBJoLvSaiPtYx\",\"gXTAie79kiw28tx5u\",\"AaKWw8amcFYLrEpNz\",\"DPi9QGLctq2y76KuE\",\"gojReckJvzYvoHqSu\",\"MJxpynP7LgfFvCWdk\",\"dxBXbyMzwkWXN84yy\",\"PTcm3qFvxvLnaKttM\",\"FQZdRwXTbW55k9mvc\",\"dQiiuLnAXEmXLbYhX\",\"FEYpu9RWysAgW3XnP\",\"MJCypveAX88aKKoee\",\"CLypXaZksY99mpRCm\",\"J3upzLHuEwXH7Z2hx\",\"spqXrjG3ZFa2j5uTR\",\"oH5za8CuPrt4XyoKx\",\"dYPkStFnLvAMsHSzZ\",\"zLRL6xyoN2eYsJ3Ni\",\"5XiuAqicKD4hBdu63\",\"qA7uQzz39BtENz2vf\",\"5hQnRWiKkhgKJXNMP\",\"hvCCRgzL6sDBEGuut\",\"cAP3n5NY64uoMwzRR\",\"rdiz7urA4aK5x45m6\",\"cZccqzRQ9GgjQF6Az\",\"Kqj6HdAfxJk5beWCD\",\"8we49y2cXuirbyGZg\",\"LfDeQBAH37L7wgT4Z\",\"LQxof8pGabGuWP7Gn\",\"umtQ5dtq9vrWb7qGF\",\"xexoFFWqWw76sZhRj\",\"zd9FLSzsGz3evKafy\",\"RGMbFMZXJr7DhcAJy\",\"gzF5pkKZaA3pa83QN\",\"Q2TPP8bx8kBBjhz68\",\"Jqk2uJZZxEv5wZFze\",\"MaLpA3hMEfEr22WM3\",\"PXAcsKkssS2yLyDv2\",\"5JGnoBpw84hhmmuhf\",\"Krto2sGMfGWBLcL7n\",\"dBzwBtRjZqB98DJeB\",\"YacynRiGgShSggpEF\",\"5S9nX4rKsnCcnv4Cz\",\"ambkvthmJjRB82EQZ\",\"eYfPWvZwnJQkHbSTK\",\"GGdmhAvxXhqhhibJN\",\"u5u2YpHXiNgzDNJdX\",\"noQWXvRuTuY8ZYZiK\",\"qAby4AWXmTNeusvg3\",\"Ds7L5bksw2QRHjrKL\",\"yTAeuT4dWRkkQR6gn\",\"R29kgJ9M7R4qqwjcE\",\"Wpn95NqWxncQrwNgz\",\"M6fxKEh6am7YajPiT\",\"CHvzhtXnv8HTbPQ56\",\"J5T8gZqiZXFuFDTQ7\",\"M2gFMJkocQSY6bsFR\",\"o4ixjQGSaYqA2JoM4\",\"66a9xX73nmTEuKs9k\",\"srJ34BaybkQh3qRkM\",\"5HCu9Ydd86QgHDRNP\",\"JhX7jvtpwNyxcc39m\",\"yr822PZmmiDDenxpB\",\"AJZaeHCiWLiyWrPEW\",\"qzXAMXsHZGT8o5hTA\",\"XjrDTNxutEbzLyFkw\",\"Afnps7TJQuS9sipMb\",\"a2Kmh6ekWqQQooHiQ\",\"NcxToYWJoZkC37SGP\",\"XwmunySaPs6HGKqnP\",\"rdmB7WJ7HmYL7mDoq\",\"mvJBakQ35CWAnbbEZ\",\"sHjfbGQGLHE6JR6qu\",\"yod5YhKtPqw2GfG9B\",\"dzS6WBTMHyFEag6Fp\",\"suArq5BbSy7gD6xri\",\"rhS8qXRjZcpDXkwnE\",\"d9LBRxvADNBB5QJMB\",\"fZaGAGEPmzDhJtPy3\",\"xi6sH47sHxoZQnJu5\",\"2PufnQcsHsfymufX3\",\"4Lwjr34ypKNQNQCar\",\"mxX4rH5ELYkdZ2Mbw\",\"5aQYQ7ugCF4QYsxy5\",\"7txFzDQ43vJ7qCY88\",\"Wi4H6ayKsNDWWQCG5\",\"3nied3n8KG8RSNixH\"],\"total\":264,\"quality\":[5,5,5,5,4,5,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,4,5,5,4,5,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5]},\"flags\":0},\"summary\":\"Our fleet managed to get one of the enemy's top-secret codes from the remains of its fallen ship. The codes were immediately sent over to our code-breaking base over at Bleckley Park ;) for analysis. The team found that each code contains 25 numbers with one missing. The missing number corresponds to a letter in the English alphabet. Your job is to find a more\",\"tags\":[\"cryptography\",\"logic\",\"numbers\",\"arrays\"],\"timestamp\":{\"$date\":1594916062273},\"title\":\"Crypto Wars: Missing Number\",\"quality\":4.804878048780488,\"family\":[{\"_id\":\"qMw27EExXGfgJejXs\",\"language\":\"cpp\"},{\"_id\":\"XWvtA5y9wux4HAwR8\",\"language\":\"javascript\"},{\"_id\":\"jjPGM3a22AgzcBFCx\",\"language\":\"python3\"},{\"_id\":\"GeWLuYEeDpL64XboA\",\"language\":\"ruby\"}]}}"]