a["{\"msg\":\"result\",\"id\":\"873\",\"result\":{\"_id\":\"zW9JME7XNew4tgCCE\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"def reversible_inclusive_list(start_of_range, end_of_range):\\n\\t\",\"difficulty\":1.42,\"editorId\":\"a777e8chPvJkY3tKa\",\"familyId\":\"ybYMEamrx7BAuSwpL\",\"instructions\":\"Write a function that, given the `start_of_range` and `end_of_range` values, returns an array containing all the numbers **inclusive** to that range. See examples below.\\n\\n### Examples\\n```\\nreversible_inclusive_list(1, 5) ➞ [1, 2, 3, 4, 5]\\n\\nreversible_inclusive_list(2, 8) ➞ [2, 3, 4, 5, 6, 7, 8]\\n\\nreversible_inclusive_list(10, 20) ➞ [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\\n\\nreversible_inclusive_list(24, 17) ➞ [24, 23, 22, 21, 20, 19, 18, 17]\\n```\\n\\n### Notes\\n- The sort order of the resulting array is dependent of the input values.\\n- All inputs provided in the test scenarios are valid.\\n- If `start_of_range` is greater than `end_of_range`, return a **descendingly** sorted array, otherwise, **ascendingly** sorted.\\n- A **recursive** version of this challenge can be found via this [link](https://edabit.com/challenge/3ucrYGBkvJwjbFL4G).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"actual_param = [[5, 1], [6, 2], [10, 20], [24, 17], [40, 50], [51, 41], [11, 66], [9, 3], [6, 16]]\\nexpected_param = [\\n  [5, 4, 3, 2, 1],\\n  [6, 5, 4, 3, 2],\\n  [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],\\n  [24, 23, 22, 21, 20, 19, 18, 17],\\n  [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50],\\n  [51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41],\\n  [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\\n   40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66],\\n  [9, 8, 7, 6, 5, 4, 3],\\n  [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\\n]\\nfor i, n in enumerate(actual_param): Test.assert_equals(reversible_inclusive_list(*n), expected_param[i])\",\"language\":\"python3\",\"quality\":4.742857142857143,\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,1,3,3,3,3,0,2,1,2,1,0,1,1,1,0,2,1,1,2,2,2,1,2,1,2,2,2,1,0,1,0,0,1,0,2,0,0,2,2,0,2,0,1,0,2,0,2,0,2,1,4,1,1,0,2,3,1,2,1,3,2,2,3,1,1,2,1,2,0,0,0,0,1,0,2,2,1,2,2,1,2,1,0,1,1,2,0,2,1,0,0,2,2,0,2,2,3,2,2,1,1,2,1,1,0,2,4,2,3,2,1,2,2,0,1,2,2,2,0,2,0,1,0,2,4,2,1,1,1,2,2,1,1,1,0,1,2,2,0,0,2,2,0,2,1,2,2,1,4,0,1,1,2,2,2,1,1,2,2,2,1,1,0,2,5,2,2,2,2,1,3,0,2,3,2,2,1,2,1,0,2,1,2,1,2,2,2,2,1,1,0,1,2,1],\"quality\":[5,5,5,5,5,5,1,4,5,5,5,5,4,4,5,5,5,5,5,5,5,4,5,5,5,5,5,5,5,5,5,4,3,5,5,5,4,5,5,5,4,5,5,5,4,4,5,5,5,4,5,5,5,5,5,5,5,5,5,5,5,5,4,5,5,3,5,5,5,5,5,5,5,5,5,3,5,5,5,5,5,4,4,5,5,5,5,5,5,4,3,5,5,5,5,5,5,5,5,5,5,5,5,4,5],\"rators\":[\"a777e8chPvJkY3tKa\",\"Ecg4m7srYGgZsb4Ck\",\"8PwfYqoDQFThzNtvf\",\"fSQSHjW3e72MrWxbD\",\"J3upzLHuEwXH7Z2hx\",\"xn7uGNKeAwPEkP9oA\",\"aEm3Wvj2rFYRL8Lrb\",\"Yp7uvStL97cC9fKkY\",\"8JyqsSbN2FJXPr3cw\",\"aXx8tRSKQw65RwBAB\",\"s5M5RvgqR9BhB9JoC\",\"cAP3n5NY64uoMwzRR\",\"55RQznnuTGpsj3EXd\",\"fznzd3qnvtbFkkizz\",\"gb9rvGus2Jv7bjZSs\",\"QRv96jmNaYsWkxQEG\",\"7ifh8r4gvyYMhKB94\",\"EfxwqhYdapX3dMQC2\",\"dBzwBtRjZqB98DJeB\",\"zd9FLSzsGz3evKafy\",\"RGMbFMZXJr7DhcAJy\",\"gXTAie79kiw28tx5u\",\"iS5BrkGLzJyPK7nKt\",\"gJYuGdkXEWWmGRLzu\",\"cRoHBaA7HjePc8wb2\",\"Jqk2uJZZxEv5wZFze\",\"p8qqFdJ3FSk5x9z3G\",\"HF28xZKSLM9wEuqNg\",\"buX4mCQhtXCfBjeno\",\"oBcs8GLX2ZFLXQy8y\",\"PXAcsKkssS2yLyDv2\",\"2jN9Nq9KKm4g7ib7X\",\"EXbD3ZjgP9oaoFLYw\",\"FEYpu9RWysAgW3XnP\",\"DPi9QGLctq2y76KuE\",\"kXEfD7xxEyWd7oxxL\",\"ZyrfhDTZHb8LymH5b\",\"rfyEkETeoS96QNH4e\",\"2QGRoQn2dRq3scu7k\",\"5HCu9Ydd86QgHDRNP\",\"d8qtzoLB264iP8tdY\",\"J5T8gZqiZXFuFDTQ7\",\"yMcCr6yobXJnkgxH2\",\"wRttWTM59y8m5mx7x\",\"StNu7DPyTgEStZsMY\",\"HqmxnQJM66Y57twhn\",\"yjtdwc2AC4jA2RWtn\",\"4jmcRWi7WtT5hzdP9\",\"o4ixjQGSaYqA2JoM4\",\"YRAzEBJoLvSaiPtYx\",\"5S9nX4rKsnCcnv4Cz\",\"5XiuAqicKD4hBdu63\",\"DqNQn9Jsxcu5HijKE\",\"GGdmhAvxXhqhhibJN\",\"9Hp6Z83SwWxMQRouq\",\"5hQnRWiKkhgKJXNMP\",\"R4SjTgDnpigJYDLyL\",\"7txFzDQ43vJ7qCY88\",\"MXGuntvz3byrP6WJc\",\"axdSNLZpiCDF8RS6n\",\"HuNF3xTBzmatyGSTm\",\"gf7u4MKcGDFiijzK9\",\"kNrnnMxhFZztMTBAX\",\"srJ34BaybkQh3qRkM\",\"GqothajHR2vKfEHGZ\",\"Qy4Wr4dQLKgYSRXis\",\"epPqSJrwXJY27mpmi\",\"tyLS9T6YMfg9fMtYJ\",\"RJ6mfGK5N6pRrGRm9\",\"DEDniTrstQYGounXT\",\"dcNc5ctZYmeArefr4\",\"nb2QchJrdRJdv4pfE\",\"kdddXc6war8aB7Gzu\",\"RfoRo7LBevRHNS6wx\",\"SPYSWseH56TkTzKGf\",\"XL2xgexMeHzoyyQ6i\",\"gDwp4e3PzkwDCdx5f\",\"Ds7L5bksw2QRHjrKL\",\"WdKdsgH9gXkKgCycx\",\"euTB6YthAd9Mwfj2t\",\"KwnrvyR7uuABxeWYZ\",\"LPGPHgJc8MkvcEDBc\",\"utTuvGdmu2sBHWBhQ\",\"PJQJDjZaBxTXu4FyG\",\"33boaDzGiY28bCDy6\",\"Cia25zjeX3RkCNx5t\",\"qEwpcQ9aNCCzQnPaW\",\"7N6c3Xu244bnQWjBs\",\"xdy69fQcSNd8gYSJc\",\"hzHsgwjark5sZCQ2c\",\"AFJTgLaPrtbqSvh7b\",\"FW3eWJuZGz5CL5BnC\",\"eYfPWvZwnJQkHbSTK\",\"Fk9kLwoG4Brf4KsKf\",\"dQd664XYR6QKHFvHW\",\"7bWyEMKEuEseRgihX\",\"oN7LLGSx4FcGmPDmL\",\"fKsHKQ9ZTyEgmcQmQ\",\"YmMgWhzhHhQLmGGgH\",\"HuCs8Tr9HGFtjaMMD\",\"Nb6LYPoQP6KJZt8mz\",\"NzbRqGWspQnWMoDrF\",\"JLQLosczQ5MquJoL8\",\"B8n7KqbvEDjZzgj2D\",\"K6MfKMytoJJuSGewP\",\"vCxuabDxEv9YC3Szb\",\"CTKmXtrqDYqJBnuy8\",\"oWSpzbikwd8N3N2YA\",\"di2hhADLx59Bj4ewM\",\"dPLhPPxafFJDaRW9G\",\"M2gFMJkocQSY6bsFR\",\"txWQESwH8wCm3Z4gb\",\"nFbmNzMQ38TncmfQX\",\"KJCDwGkoXh8qtbbKr\",\"pduNK68oazqQTtbLp\",\"yod5YhKtPqw2GfG9B\",\"2fxapKr8XGdNeaKi2\",\"p7js9trz2zk2RorCR\",\"sHjfbGQGLHE6JR6qu\",\"qAby4AWXmTNeusvg3\",\"CHvzhtXnv8HTbPQ56\",\"N2wnZXkhDH86mgjQ8\",\"8BFSTCnoe2QggN64c\",\"wjc4iejpErBhxWwHo\",\"q6QsMYNMpPNtmyTeW\",\"qQQ4hCQpzitmHSkjS\",\"YcCLwitFMAEJSnxAW\",\"T2vhHPhRR96hRizq8\",\"cR3ibTMxLyEdDFCHY\",\"9ivvGvJGvtQfigQaZ\",\"pPpmP7xeJzGgK362R\",\"sKfrD9gjCDHuqLzSk\",\"iYXdNw7tKcgA3QwBX\",\"KBxTPknCRmB2b5y3i\",\"Lkcku4D8wh449piQh\",\"jWbd7SYDzLPjc9EDh\",\"eMuCpJ2spXWkJjWNz\",\"RoGGD5cpHb4ftdLDv\",\"B3g8XLaAPDrGEkw62\",\"axFGc8QrcLfdPgmhi\",\"Jg8ZSRXe3NoDMCqGu\",\"Cuy7McJ5y8BkXRRk9\",\"XD5nmvKQchKezPXhy\",\"JS3hNM3XXkxPdg3yk\",\"RTDx9axf52kxhFjwZ\",\"NfMJuiBk6FN5Jc6ow\",\"pHfkqrQCssxLpJi4y\",\"iKCnQydNKZp3KoCoP\",\"XjyaCd8bviTitHTwa\",\"rLMeCAzEE9Grp3yce\",\"GMQM52abpXNgEBote\",\"BrTDhPJcACL2bsrpJ\",\"Fmzo3d9rAck5RH8cq\",\"KR9QSQRXFeqd29GJR\",\"pFqEnYTCapSfnrtmP\",\"AFfw7cGg83uYk2Miy\",\"T6iBEE2jp7f7iEF2P\",\"PSyWQry47wkdmXD8f\",\"AQSqD9oNv2uPfxZCR\",\"KEmTti9Tza8A2FLQW\",\"4AoQy4B5fPs2KBinr\",\"2EbDCCJJvCfKkbYia\",\"YA7SDhpgEtsqynvNL\",\"SBCCfAArRzCrA3F5m\",\"BJp2WkwLWGHHB5oQW\",\"w4ZT8Y56aw873WXdh\",\"4EQAT4Z3k2zjNj8dw\",\"dJzNF59j2p8jWZxiQ\",\"jhpjLPkSo6yjCPNwe\",\"vLcF8rRLTcmXRsvYQ\",\"WssWD9Grn7ejMYSr3\",\"maQHZbiiLfyigv6mn\",\"2QziknsznNeMPRh3g\",\"KDfmGkQoajgNwwAm3\",\"2HfNkb2SoqdyjKW3o\",\"QSpAu8WEP62fg5rb6\",\"aAFKLxcnBD2ZrdDnJ\",\"uGuS9YRXW2nj4p6zf\",\"wwMcJQRvf3X59Jyev\",\"kWobGYgZWJxN6ZddF\",\"daKe8m3yuip3WwzA7\",\"3cF6NXq3ZEwdkgSjb\",\"iojEnnY9FsMfYzp6f\",\"QHcNEadRcCStpv7dj\",\"yyo6YLQN2of6fxp49\",\"AuFLSZzvwBn7hyFBi\",\"EPLdgQ3qhYTZcKvd3\",\"vhLJwgSRY2J7aGD2i\",\"tAF9Gf6PiGogbZuWs\",\"pfbrH83s66L2EZQsH\",\"DQJhf4WY3LehMhXoL\",\"Fb2wehA7QgTFWry2x\",\"sbJcFfQjQ59Wfg4Cd\",\"GTKsdeEihE636Le9i\",\"mfsaETo7uA4x5vqLD\",\"fBqQjriC4QEtFNxFe\",\"q8N3pjdRdqia69JPi\",\"PTDFuxAzou7W6asWt\",\"dYgxQgSzJNMnWzhhE\",\"iX3TZPCoA2qBuy8DM\",\"dqwatKFAeGpjmf5dm\",\"ey3CASd6Je5LEJzfB\",\"66a9xX73nmTEuKs9k\",\"jL4y5fTJAMBjhZmko\",\"Wpn95NqWxncQrwNgz\",\"LWCzZ8mb8gwrRNGfq\",\"u5u2YpHXiNgzDNJdX\",\"tDMGeCBWHFJqtTBfr\",\"PC3pLs36zNzpRDSuE\",\"2PufnQcsHsfymufX3\",\"Cc2Cgj4MWXZxsTooC\",\"ghMkPtdFCpM6w8nax\",\"c2q7mY39z5JPEMCaM\",\"X4rzfxGgxx6CS7Bpz\",\"AH3ugFx3X28PEcAoh\",\"i5iePG5GqhJJ8HEoB\",\"gdndm3hHunARcYWow\",\"CKHKhvJcq9jNMqrmd\",\"J23RcmzbdtBbPCTjT\",\"QFZcdxGKBaFZb7Zbk\",\"yr822PZmmiDDenxpB\",\"rgvAJFwfCeYoYnFTK\",\"tdfY4iBvD7oh2ufnN\",\"HhYCji7QqauyN3A7v\",\"GJmKcqu7xppQyBaTt\",\"mvJBakQ35CWAnbbEZ\",\"9Ly8afdtofp8DXzrt\",\"WQubx7DAkG6WZE8FA\",\"4Lwjr34ypKNQNQCar\",\"jkys684AAfPRxrYaD\",\"eHcgvkTGsH7ZziqBo\",\"w3QDkmjZj2dAFDsjq\",\"AasGs8AeX9Lcb9xJn\",\"R6YxHWAiLgKwy5YvC\",\"FvFhg2wELM3SCZDZQ\",\"rrSC943cCKNG48sH4\",\"93ADqsBQnwTEosjbq\",\"mTF6oWX2WhFR4M3QK\",\"JiSpvq6C7azQEmENc\",\"bv4ycSophchSEFoK9\",\"4RY3zj9C2t8GGefhi\",\"fKzJMR2LLbiRtGetj\",\"2FCRyJqwqzFTKSTgJ\",\"RiyutyYdeA8WXzC3c\",\"9pzFiFK3ANLjQfnr2\",\"qzXAMXsHZGT8o5hTA\",\"nc7bRhkxgKyqusYe3\",\"Kv92AoBe3KjTCfiBD\",\"YXQvrgeiGzLd6cTW9\",\"fr9mr2pgEcPkdrDkX\",\"5Dd7XwALvvMMwS4Fb\",\"ctbThYbufFCYbRK4f\",\"4TmgHkn5vqyHK3sYC\",\"hR7GMiqGap4CzEWSy\",\"hEpaAYfTpAp7xunYa\",\"kJMAAWPWEG6qFouEh\",\"8uiLiJcmWxWe6qw65\",\"T6Rm8mREPMZSftzrC\",\"7ajSwbNMNp9ggPewT\",\"pQwhNKiCne4gEZgcn\",\"NGvCPuMiAP3xrRLfB\",\"NiPjKwpgEmTdH5uZg\",\"796v8eRqahP6wpLdL\",\"Afnps7TJQuS9sipMb\",\"2iFe3EHEH2YdhSKrs\",\"hiGXnxds6zo7XsfTw\",\"MKT7khMBGXzA22ykf\",\"hcAeJ5mhA7KTA6wkd\",\"nkH3HfJXLMNcBMM79\",\"tm3R3qmjwwqy2Kj6T\",\"KH4Wr3YSvNddCSRJ2\",\"5s4qhuRJijYaDNXva\",\"kQH5b8MXJunh84Czq\",\"dYPkStFnLvAMsHSzZ\",\"d9LBRxvADNBB5QJMB\",\"AMpQSjKsRqhCDyS2j\",\"dSd7wHgXGQeG5BQ2P\",\"dzS6WBTMHyFEag6Fp\",\"TCvpT4EPb8qNssNB7\",\"rhS8qXRjZcpDXkwnE\",\"rCrbqMiaGPgHYTNxu\",\"yAouD3PxzED8a4gap\",\"mw9464S5dnenqzvpm\",\"Qyfyyw6oC4EHAndzo\",\"B4y8aoyXJtskYPFEL\",\"QWjsXnLaJ7xfL3Amq\",\"3KkyQm77zsew58Dc2\",\"qB6KSTYC6H2TQEQY6\",\"DHXQEnTF6RANkv3oN\",\"mxX4rH5ELYkdZ2Mbw\",\"5QN8R22z43SrwoHDz\",\"dj5AyG5fWP8FdsSmZ\",\"gpGXTvjS2HrY9Skq5\",\"eW9R2SCoYnY8HBAdL\",\"Wi4H6ayKsNDWWQCG5\",\"vAbK8sCfKyFC78HYg\",\"ruzwBPphPDRgLXdnP\",\"E2hpke7mHxAWsw5t9\",\"naZ3i6sSDPwsieDH7\",\"rDgKHd6ZSSpboiAj7\"],\"total\":320},\"flags\":0},\"summary\":\"Write a function that, given the startofrange and endofrange values, returns an array containing all the numbers inclusive to that range. See examples below.\\n\\nExamples\\nreversibleinclusivelist(1, 5) ➞ [1, 2, 3, 4, 5]\\n\\nreversibleinclusivelist(2, 8) ➞ [2, 3, 4, 5, 6, 7, 8]\\n\\nreversibleinclusivelist(10, 20) ➞ [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\\n\\nreversible\",\"tags\":[\"math\",\"numbers\",\"scope\",\"loops\"],\"timestamp\":{\"$date\":1604910693531},\"title\":\"Reversible Inclusive List Ranges\",\"family\":[{\"_id\":\"akLRnxrtrAsnyYuZb\",\"language\":\"java\"},{\"_id\":\"2HZ8DqCaZxLHN6cP6\",\"language\":\"javascript\"},{\"_id\":\"zW9JME7XNew4tgCCE\",\"language\":\"python3\"}]}}"]