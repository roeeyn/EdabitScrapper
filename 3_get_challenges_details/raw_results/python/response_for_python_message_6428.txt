a["{\"msg\":\"result\",\"id\":\"1923\",\"result\":{\"_id\":\"HSKvp4qYA2AhDWxn6\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"def total_points(guesses, word):\",\"difficulty\":2.6714285714285713,\"familyId\":\"TEvw5FnKwqzwAwdzG\",\"instructions\":\"In **Text Twist**, players try to score points by forming words using the letters from a 6-letter scrambled word. They win the round if they can successfully unscramble the 6-letter word.\\n\\nCreate a function that takes in an array of **already-guessed words**, the **unscrambled 6-letter word** and returns the total number of points the player scored in a particular round using the following rubric:\\n\\n1. **3-letter** words are **1 pt**\\n2. **4-letter** words are **2 pts**\\n3. **5-letter** words are **3 pts**\\n4. **6-letter** words are **4 pts** + **50 pt bonus** (for unscrambling the word) \\n\\nRemember that **invalid words** (words that cannot be formed from the 6-letter unscrambled words) count as **0 pts**.\\n\\n### Examples\\n```\\ntotal_points([\\\"cat\\\", \\\"create\\\", \\\"sat\\\"], \\\"caster\\\") ➞ 2\\n# Since \\\"create\\\" is an invalid word.\\n\\ntotal_points([\\\"trance\\\", \\\"recant\\\"], \\\"recant\\\") ➞ 108\\n# Since \\\"trance\\\" and \\\"recant\\\" score 54 pts each.\\n\\ntotal_points([\\\"dote\\\", \\\"dotes\\\", \\\"toes\\\", \\\"set\\\", \\\"dot\\\", \\\"dots\\\", \\\"sted\\\"], \\\"tossed\\\") ➞ 13\\n# Since 2 + 3 + 2 + 1 + 1 + 2 + 2 = 13\\n```\\n\\n### Notes\\n- If a 6-letter word has multiple anagrams, **count each 6-letter unscramble as an additional 54 pts**. For example, if the word is **arches**, and the player guessed **arches** and **chaser**, add **108 pts** for both words.\\n- You can play Text Twist here: http://text-twist2.com\",\"lab\":\"Test.assert_equals(total_points([\\\"dote\\\", \\\"dotes\\\", \\\"toes\\\", \\\"set\\\", \\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t \\\"dot\\\", \\\"dots\\\", \\\"sted\\\"], \\\"tossed\\\"), 13)\\nTest.assert_equals(total_points([\\\"dial\\\", \\\"tail\\\", \\\"lid\\\", \\\"tide\\\", \\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t \\\"date\\\", \\\"late\\\", \\\"tad\\\"], \\\"detail\\\"), 12)\\n\\n# It should work with 6-letter words \\nTest.assert_equals(total_points([\\\"trance\\\", \\\"recant\\\"], \\\"recant\\\"), 108)\\nTest.assert_equals(total_points([\\\"bluest\\\", \\\"sublet\\\", \\\"let\\\", \\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t \\\"set\\\", \\\"belt\\\", \\\"belts\\\", \\\"bet\\\", \\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"bets\\\", \\\"sted\\\", \\\"but\\\", \\\"tule\\\"], \\\"subtle\\\"), 121)\\n\\n# It should work with incorrect words too \\nTest.assert_equals(total_points([\\\"cat\\\", \\\"create\\\", \\\"sat\\\"], \\\"caster\\\"), 2)\\nTest.assert_equals(total_points([\\\"emote\\\", \\\"tome\\\", \\\"root\\\"], \\\"meteor\\\"), 5)\",\"language\":\"python3\",\"summary\":\"In Text Twist, players try to score points by forming words using the letters from a 6-letter scrambled word. They win the round if they can successfully unscramble the 6-letter word.\\n\\nCreate a function that takes in an array of already-guessed words, the unscrambled 6-letter word and returns the total number of points the player scored in a particular round u\",\"tags\":[\"strings\",\"higher_order_functions\",\"games\"],\"timestamp\":{\"$date\":1554603790656},\"title\":\"Text Twist!\",\"stats\":{\"completed\":{\"total\":155,\"ratings\":[3,3,3,3,3,3,3,3,3,3,1,3,3,3,2,3,3,1,2,4,2,3,2,2,2,1,1,3,4,3,1,3,2,3,4,2,3,3,4,2,4,4,4,4,2,3,4,2,3,4,2,3,4,1,3,4,4,2,4,3,3,2,2,2,0,4,3,2,3,2,4,2,1,4,1,2,3,3,2,4,4,3,2,2,2,2,3,1,3,3,2,3,2,2,3,4,2,4,4,4,4,1,4,3,4,2,4,3,3,3,4,1,5,4,2,4,1,4,2,3,0,3,1,2,3,2,4,2,3,1,2,0,3,1,2,0,4,3,2,2],\"rators\":[\"mNMQvcxKSSvqqMYCH\",\"w5eZ2n8eBykhYQiAE\",\"yZvzB3qFb8pkHy4dg\",\"8JyqsSbN2FJXPr3cw\",\"tAF9Gf6PiGogbZuWs\",\"T3ZAuoMrJjvZwN55B\",\"gb9rvGus2Jv7bjZSs\",\"nrA8Pacm3A6GqGzq4\",\"ab7BsQuhDo3QgE6bh\",\"M8jrv2FfpMQp9Qzpx\",\"QaE2QnnBbzdiExxPH\",\"MXjxGML2X75x64vJo\",\"FikSPhcrHBpQ4CyGC\",\"7g3vZaQXhLpxrajyg\",\"StJwhPFkevcqZ9swQ\",\"byqTp7CX5oWSEZp4S\",\"cecRRLKKu5R62D5xE\",\"AYaEkTWLMmfzpwejr\",\"Gw825qtBHBJhLkWEN\",\"Mb5sjE2qnvjL2xcBG\",\"kfG9deramoXyqrP5L\",\"yZzvg933wFk6uCLyc\",\"inEQthEoPuP337WTY\",\"PFjMZGHNAPTkgd7tq\",\"DJD9vvwqQmjfwdGpt\",\"ZLtfKAoGTN9okARqk\",\"nt9bv5CvNp7cozBY2\",\"sCnrfER8vCe4xhpB2\",\"BFNm9gacwba9KyLFW\",\"KWHYqCuXcKrzxtqHt\",\"kmaNtPidHyrArCTxk\",\"9Gf6g4fuKc3uou9w2\",\"3ifAHQzsMasfQySoL\",\"rcJsWYJJb2npFZY36\",\"GCxj7RJCeWYNxj8oQ\",\"C9LKGu2g5hSijvDzA\",\"cmwasetrBzbwJQbks\",\"tSkayeLtGJdgLEPdy\",\"6W2GSzrYjMD9ANBFY\",\"GgLd4eWBu79mdjtkP\",\"j7fyR7k8FfGPLraZx\",\"AdMsAQ2MJPAw7uWfJ\",\"xyHfEdcYBDznunq6n\",\"mG93NkvEZfh2kPrMq\",\"TgjcWxsTjar7snQx9\",\"RErqK2yM94wYyD2hk\",\"aCNWav8S8Try9RkC6\",\"Tin42WiZ4JTDEnS7b\",\"eYWgXzijKqfqgZNDi\",\"dvmrZXzqS7b6ruPXP\",\"4rg9g6TKYZ8aifrYc\",\"dZGNAJXB24zNh2tsD\",\"PuJDHtAaX6vXeJJTC\",\"s5M5RvgqR9BhB9JoC\",\"JpeTZm5QTWFLqg9Bx\",\"Dw8RZgg5iHBuFrWwQ\",\"HqmxnQJM66Y57twhn\",\"FgkYtHLxeD8pETJ8T\",\"73rmKyTQp7oWvRcgq\",\"2tkaaSSTqhBDg3tiA\",\"LdRdFW8qCjGu5nYLQ\",\"6ShafRStcvew4GfCh\",\"2fxapKr8XGdNeaKi2\",\"XbwyB44kHPnRgQcrB\",\"8PwfYqoDQFThzNtvf\",\"ydEdzuCCZt4yny9Rq\",\"2innwjWqxJHo4eRGh\",\"z29voMGDksmh5wajq\",\"PT5pu7kJsgp9TDNGv\",\"C4QntmkYtB89GNtpd\",\"3LiSLdtN58n46NEqg\",\"WLFPvm65aHfgwQy7N\",\"T9WcjJPEu3rcTsKbF\",\"3CddxEkvCvRoCLQ7b\",\"aEm3Wvj2rFYRL8Lrb\",\"AJwBauGHyrbqgDYce\",\"SGhPxX5bHGL8zZqtt\",\"itDTNAvHdhpXPhg6D\",\"zokSkNKBQsrk4jRpH\",\"AasGs8AeX9Lcb9xJn\",\"K5vETaccLsPyu8sbd\",\"pmgFEciNrd3ES9tuu\",\"Nua6T3dBurBy3Qfg9\",\"EjbDDFRECrzQDkzrX\",\"ywk3XGvcmpTgRxwZa\",\"5zBmcs43Gc7jkoTEc\",\"daFMtxYmCNMQ9HNsJ\",\"DwetpbChQM4r6Gwah\",\"dXMbkgQFoN37BhruB\",\"YRstQuthRkFeBiXug\",\"6E8GoWCrHpDvHZjWG\",\"3Zceb8GudqAG3onG3\",\"KXYHpCQvmTtpbGXYg\",\"fznzd3qnvtbFkkizz\",\"gJYuGdkXEWWmGRLzu\",\"N9m2Y6JJHu5gTvAiv\",\"ZNnsMeNkdDhHjSrZb\",\"bJaPCBx63YxdJAuTS\",\"aLwJNALj2MpjAGZz4\",\"Kf2z6kZ7hfzg2YyEJ\",\"R4SjTgDnpigJYDLyL\",\"wT5gGgvjKc5wz59AQ\",\"LFSASkxgw9hr3KqmC\",\"rcvAxbpK7Nb73Y9ve\",\"So6PHm74mfJuY2WTs\",\"mDWNyaaQ9hvPCRzSd\",\"a777e8chPvJkY3tKa\",\"Ecg4m7srYGgZsb4Ck\",\"f2BoqyCpgnmjEjLqx\",\"xn7uGNKeAwPEkP9oA\",\"77dQgT3gTGWLcRPTk\",\"dEuJGZbBQkveCXEFk\",\"guKxq2rMRAYmEKNFP\",\"S6Zd8mPuvhuh3MFRt\",\"KZ2xddpM2f9JRaryB\",\"Y8ySZEtvht9EwdcoY\",\"zZDaXBxMzTCBhNkgL\",\"5dHucvf2qBYyKim7X\",\"8sNv5PTHa7XQ8bNqR\",\"c2u7qfdaYxcyuydtu\",\"P7NmFbCJ5offXMRvB\",\"yjtdwc2AC4jA2RWtn\",\"XjajdyybZZbkz8o5x\",\"HF28xZKSLM9wEuqNg\",\"4fhjJBvLBWh6QeSih\",\"Z85ajWfZ4jDPkbvR4\",\"J3upzLHuEwXH7Z2hx\",\"iS5BrkGLzJyPK7nKt\",\"tkdRHAExhDq8ryDJT\",\"QRv96jmNaYsWkxQEG\",\"jL4y5fTJAMBjhZmko\",\"iojEnnY9FsMfYzp6f\",\"GTKsdeEihE636Le9i\",\"55RQznnuTGpsj3EXd\",\"2PufnQcsHsfymufX3\",\"DPi9QGLctq2y76KuE\",\"H9KZi2cjt4FwH7qog\",\"T6iBEE2jp7f7iEF2P\",\"MpfytGFYF77emJ3cT\",\"Yp7uvStL97cC9fKkY\",\"77ChWogs2J8hNYBNK\",\"oBcs8GLX2ZFLXQy8y\"],\"quality\":[5,5,5,4,5,5,5,5,5,5,3]},\"tests\":{\"score\":0,\"rators\":[\"mNMQvcxKSSvqqMYCH\"]},\"instructions\":{\"score\":0,\"rators\":[\"mNMQvcxKSSvqqMYCH\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.7272727272727275,\"family\":[{\"_id\":\"BnmJTpMNfJo2ajoQS\",\"language\":\"cpp\"},{\"_id\":\"3iDnqHWoSgKzYerPZ\",\"language\":\"java\"},{\"_id\":\"Ht7CqJtytgzfezwXA\",\"language\":\"javascript\"},{\"_id\":\"HSKvp4qYA2AhDWxn6\",\"language\":\"python3\"},{\"_id\":\"xCZKTPq7GG5ebCw77\",\"language\":\"ruby\"}]}}"]