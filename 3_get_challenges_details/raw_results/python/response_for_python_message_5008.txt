a["{\"msg\":\"result\",\"id\":\"1220\",\"result\":{\"_id\":\"NpJMkLRfApRCK7Js6\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"def is_palindrome(wrd):\\n\\t# your recursive solution here\",\"difficulty\":1.7062937062937062,\"familyId\":\"QgccuSCKEa7pdAB7m\",\"instructions\":\"Create a **recursive** function that determines whether a word is a **palindrome** or not.\\n\\n### Examples\\n```\\nis_palindrome(\\\"madam\\\") ➞ true\\n\\nis_palindrome(\\\"adieu\\\") ➞ false\\n\\nis_palindrome(\\\"rotor\\\") ➞ true\\n```\\n\\n### Notes\\n- All inputs are in lowercase.\\n- You are expected to solve this challenge via **recursion**.\\n- You can check on the **Resources** tab for more details about *recursion*.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"from re import findall, MULTILINE\\nfrom inspect import getsource\\n\\ndef check_recursive(fn):\\n  try:\\n    src, n = getsource(fn), fn.__name__\\n    if n == '<lambda>': n = src.split('=')[0].strip()\\n    return len(findall(n, src, flags=MULTILINE)) > 1\\n  except OSError: return True\\n\\nTest.assert_not_equals(check_recursive(is_palindrome), False, 'Recursion is required!')\\n\\nstr_vector, res_vector = [\\n  [\\\"rascal\\\", \\\"racecar\\\", \\\"madam\\\", \\\"adieu\\\", \\\"radar\\\", \\\"rotor\\\", \\\"abacus\\\", \\\"rotator\\\", \\\"scholars\\\"], \\\\\\n  [False, True, True, False, True, True, False, True, False]\\n]\\nfor i, n in enumerate(str_vector): Test.assert_equals(is_palindrome(n), res_vector[i])\",\"language\":\"python3\",\"quality\":4.648648648648648,\"summary\":\"Create a recursive function that determines whether a word is a palindrome or not.\\n\\nExamples\\nis_palindrome(\\\"madam\\\") ➞ true\\n\\nis_palindrome(\\\"adieu\\\") ➞ false\\n\\nis_palindrome(\\\"rotor\\\") ➞ true\\n\\nNotes\\nAll inputs are in lowercase.\\nYou are expected to solve this challenge via recursion.\\nYou can check on the Resources tab for more details about recursion.\",\"tags\":[\"recursion\",\"strings\",\"validation\"],\"timestamp\":{\"$date\":1602272019907},\"title\":\"Recursion: Palindrome Word\",\"stats\":{\"completed\":{\"total\":230,\"ratings\":[3,3,3,3,3,3,1,1,3,2,3,1,5,4,3,4,2,4,2,1,2,1,1,3,0,2,0,0,1,0,3,2,4,1,1,0,2,2,2,1,2,0,0,2,3,2,2,2,2,0,2,1,1,3,2,0,1,2,2,2,2,2,2,2,2,1,2,4,1,1,2,1,2,0,0,1,2,0,2,2,2,1,2,2,2,3,3,1,2,1,2,1,3,1,2,2,2,0,2,5,3,1,2,2,0,2,2,3,2,0,2,2,1,0,1,1,1,1,2,3,2,0,0,5,0,0,0,1,2,2,1,2,2,2,0,2,1,2,1,3,1,0,1],\"quality\":[5,5,5,5,5,3,4,4,4,5,5,5,5,1,5,5,5,5,5,5,4,5,5,5,5,5,5,5,5,5,5,4,5,5,5,3,4,5,4,5,5,5,5,5,5,4,5,5,5,4,5,4,5,5,4,4,5,5,5,5,5,3,5,5,5,4,5,4,5,5,5,5,3,5],\"rators\":[\"a777e8chPvJkY3tKa\",\"Bu4uGeo4jjuyFi29D\",\"yjtdwc2AC4jA2RWtn\",\"KZ2xddpM2f9JRaryB\",\"8sNv5PTHa7XQ8bNqR\",\"kWobGYgZWJxN6ZddF\",\"aEm3Wvj2rFYRL8Lrb\",\"FdB7yZRr2ZjaFQcpj\",\"5dHucvf2qBYyKim7X\",\"tkdRHAExhDq8ryDJT\",\"8PwfYqoDQFThzNtvf\",\"s5M5RvgqR9BhB9JoC\",\"mDWNyaaQ9hvPCRzSd\",\"tAF9Gf6PiGogbZuWs\",\"HF28xZKSLM9wEuqNg\",\"8JyqsSbN2FJXPr3cw\",\"Ecg4m7srYGgZsb4Ck\",\"4fhjJBvLBWh6QeSih\",\"iS5BrkGLzJyPK7nKt\",\"QRv96jmNaYsWkxQEG\",\"A3pBp3qBMnYZpQKZu\",\"Lp7GZjgfrPp7LqTJj\",\"AXcnPX68zdMiLNSmu\",\"akPRns5QiD5cT5sva\",\"qD2LrwaDrSdiybLKY\",\"cR3ibTMxLyEdDFCHY\",\"ANbSYXiYsp4addoDq\",\"xn7uGNKeAwPEkP9oA\",\"gJYuGdkXEWWmGRLzu\",\"Yp7uvStL97cC9fKkY\",\"J3upzLHuEwXH7Z2hx\",\"DPi9QGLctq2y76KuE\",\"C2mmEAYsgGaDc4d8H\",\"buX4mCQhtXCfBjeno\",\"ctuhatHPA9Woxd89w\",\"uQXSbgmySpau77aAQ\",\"gXTAie79kiw28tx5u\",\"Cia25zjeX3RkCNx5t\",\"Jqk2uJZZxEv5wZFze\",\"oBcs8GLX2ZFLXQy8y\",\"fSQSHjW3e72MrWxbD\",\"jsQJLi9LDjpXKFP28\",\"2fxapKr8XGdNeaKi2\",\"YmMgWhzhHhQLmGGgH\",\"yr822PZmmiDDenxpB\",\"hnyhBFWwNCz9mDfSi\",\"kZzmqZARhHHNDgwaj\",\"cAP3n5NY64uoMwzRR\",\"9pzFiFK3ANLjQfnr2\",\"3LiSLdtN58n46NEqg\",\"T2vhHPhRR96hRizq8\",\"GGdmhAvxXhqhhibJN\",\"P7NmFbCJ5offXMRvB\",\"nc7bRhkxgKyqusYe3\",\"XNmN6ztj36a7eChbD\",\"KbpBK7pXgKksJRT9j\",\"n2BRY9X8899dcG8Bw\",\"PXAcsKkssS2yLyDv2\",\"q2tzvkrLASvSjkek9\",\"9ivvGvJGvtQfigQaZ\",\"2QziknsznNeMPRh3g\",\"NfMJuiBk6FN5Jc6ow\",\"CHvzhtXnv8HTbPQ56\",\"qS5Xbh5sBC28e6j7E\",\"73DCBaHpY7yXRtcEB\",\"dSd7wHgXGQeG5BQ2P\",\"ZmtvLNX6XvyXwgHAW\",\"CGR9ePuR9A6F6Tr2p\",\"2PufnQcsHsfymufX3\",\"mfm3gB39arY8Rjb2y\",\"NzuLkRixvf2uwBcZm\",\"fznzd3qnvtbFkkizz\",\"mmt7jwqbmSjzRSvqh\",\"cE44ruABDPGu2JcNm\",\"ojX2zaGwv6czoehft\",\"3owWHBwaBbK8Yb5gF\",\"jDBLwczxoPrGtbufB\",\"p7js9trz2zk2RorCR\",\"eHcgvkTGsH7ZziqBo\",\"Zka6SnS5e4xZqkr7g\",\"XtgTJNxw5XG8ouJjG\",\"yMfpc4AFBxD8jL5iB\",\"BE5HvcNpgF6pttGwD\",\"Afnps7TJQuS9sipMb\",\"kyqc3GMiF5oP5JQxu\",\"FEYpu9RWysAgW3XnP\",\"TePz42wc3ZZ5CKA6L\",\"9EwjEqDipfRFdMvDB\",\"JS3hNM3XXkxPdg3yk\",\"GQic448Nge5LehboY\",\"z46DbeYx8YBabz7WJ\",\"BJp2WkwLWGHHB5oQW\",\"7TQ3L6GtmN6kQGcdZ\",\"J23RcmzbdtBbPCTjT\",\"axFGc8QrcLfdPgmhi\",\"23oi2a3vQwhtLEbSj\",\"fzXQHrcvyuusyqPDf\",\"Eo2EuGyi9ZCb6Yru9\",\"BorFjSWrt2gYFf3KA\",\"L3esWnKaSLDzrKJyk\",\"ScaZG69jog5kcqGtQ\",\"kWFMzBkgH8SBQtiX3\",\"yK7zzK2aGJwuWKHRL\",\"HWq5F4JyFbXdmcazH\",\"oywoqZAAM9aGfvrgm\",\"pHB9dNX6sq26bRaKh\",\"7LM4GsLioPLWF8iCz\",\"8M6iTktSukaB25bba\",\"cGZfY45zzm8YQ4egF\",\"8Q5xv926YYvuzafkE\",\"dpkS6hbuXNdshJLsy\",\"58pXCe6t46DdkEbSN\",\"sytFM7EYj59J79zYa\",\"gr344siEd3vgSfGJL\",\"5JFQgt6KFihmXfHKm\",\"r7JXHsnJGCbRxYvDf\",\"r9PYpqaRPEmbvk98G\",\"x3BAyM3Q3WqnF2wua\",\"rfyEkETeoS96QNH4e\",\"Tyb8qLiwb2QXmRGv3\",\"iyT7wAXNiYCbRRMNv\",\"fG2HwkR4BtAGX4QzZ\",\"zd9FLSzsGz3evKafy\",\"QHcNEadRcCStpv7dj\",\"iojEnnY9FsMfYzp6f\",\"2MRASQN7AXApYFwwq\",\"ceuxK7jxKY9SCqTza\",\"RTDx9axf52kxhFjwZ\",\"p5EN3tadeCfPkW3CB\",\"eSBYJFGiRwL4HpEFR\",\"yyo6YLQN2of6fxp49\",\"XHShZ3WMPgGEA2vkR\",\"NKm2RAfZ8bCdcxLt3\",\"dvkfaeBEtqxp834Ad\",\"nd9fk7wiq7Q6CCYKY\",\"8uiLiJcmWxWe6qw65\",\"vhLJwgSRY2J7aGD2i\",\"mfsaETo7uA4x5vqLD\",\"ijNKM8DuspXuAnC4y\",\"WNQosXPjDj998aJ2a\",\"JqCwfC4WymX69QNxF\",\"7ESgLwgqsFM5Lbcwf\",\"yEDrzzFjReDWNt8By\",\"jbHaS3gkN85w4g9FA\",\"dbgSzLXdovfM4xt5y\",\"5HkEJE35W56jRhuNi\",\"JnZ7LnLTs8GEovCGi\",\"tpKbkqLEqszKr8s88\",\"9NpYN2MT5mE3KYfp9\",\"sa6JYEuvgqmgxKNww\",\"pkDeKBfMqSLcpaLDP\",\"Ds7L5bksw2QRHjrKL\",\"zdNcM85HdFNZz9gQb\",\"J5T8gZqiZXFuFDTQ7\",\"WWS37MrHbt2NBFNXm\",\"ZjmRm3RjLyafDtvmE\",\"jWb7i8QD8ATq3jWNn\",\"Wpn95NqWxncQrwNgz\",\"Ewq4HD83cGQskcXxB\",\"92bhLK9oA8TEQ3jLd\",\"MoSLJyuuSB5T6nRfW\",\"ou7oWzaZTZc93uEEy\",\"9Pyn6ayq9Ju2zCuN3\",\"R9eKphGTuaX26FZ2k\",\"2CBThYR89LrfExPDi\",\"Xb92Ru8nKXGjaqWnJ\",\"DmjEwgadNrexJ3wPM\",\"RME8k3b4KXsWfxgCA\",\"mg7EECKnZBGimjJXE\",\"iXQanWxhj8mt8HxdC\",\"PQMHWfL4eLrutQRL8\",\"av9jN3SbNRM7Xe2qw\",\"fEKYxcHjk7rvpjSRJ\",\"eSYwzxpMzmCyoW25b\",\"3tZyqPYDEqRuxrchp\",\"vMB3hQ9TMZStwMBXj\",\"JC8xt2rJtqR7PeLwN\",\"y29ghsTZ3W56hj5J2\",\"zk2zpPtaqAwvJpH5E\",\"ocEX2gdWELY7u8WtZ\",\"7RjTWkrhiBzZ5sdbT\",\"kxccB3jSigukZgAur\",\"H9KZi2cjt4FwH7qog\",\"DEDniTrstQYGounXT\",\"o4ixjQGSaYqA2JoM4\",\"jkys684AAfPRxrYaD\",\"AasGs8AeX9Lcb9xJn\",\"sbJcFfQjQ59Wfg4Cd\",\"srJ34BaybkQh3qRkM\",\"bZEYgddqd3Xm8yd2j\",\"5HCu9Ydd86QgHDRNP\",\"HqmxnQJM66Y57twhn\",\"mvJBakQ35CWAnbbEZ\",\"qzXAMXsHZGT8o5hTA\",\"T6iBEE2jp7f7iEF2P\",\"9LghqktEpW4YLxdNk\",\"x6mA8qiFEyJFD6wBs\",\"yod5YhKtPqw2GfG9B\",\"eMuCpJ2spXWkJjWNz\",\"rhS8qXRjZcpDXkwnE\",\"WeBsQrjX8XaAkGMFh\",\"z4usJEiSjS5PiPavW\",\"T6Rm8mREPMZSftzrC\",\"BrTDhPJcACL2bsrpJ\",\"3rQcH9AEoAkscgX65\",\"ZvoqkwZQC52on5hpY\",\"mxX4rH5ELYkdZ2Mbw\",\"Wi4H6ayKsNDWWQCG5\",\"suArq5BbSy7gD6xri\",\"5FmhHNDpgkKR86tRe\",\"d8qtzoLB264iP8tdY\",\"vFXxysYBKjYaSXGp8\"]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":1},\"editorId\":\"a777e8chPvJkY3tKa\",\"family\":[{\"_id\":\"Ly8iQqDfaouRLgKNb\",\"language\":\"java\"},{\"_id\":\"aeHGWC6M44KhLCRBt\",\"language\":\"javascript\"},{\"_id\":\"NpJMkLRfApRCK7Js6\",\"language\":\"python3\"}]}}"]