a["{\"msg\":\"result\",\"id\":\"1364\",\"result\":{\"_id\":\"kjJWvK9XtdbEJ2EKe\",\"author\":\"Vympel\",\"authorId\":\"w9ccpyskdwvqCanmJ\",\"code\":\"def sort_array(lst):\\n\\t\",\"difficulty\":2.0206896551724136,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"DXkyKfKQFYaM5TbuJ\",\"instructions\":\"Python has a beautiful built-in function `sorted` that sorts an iterable, usually an array of numbers, sorting them in ascending order, but using `key=` you can sort the iterable in different ways.\\n\\nCreate a function that takes an array of integers as an argument and returns the same array in ascending order. Using `sorted()` would be easy, but for this challenge YOU have to sort the array creating your own algorithm.\\n\\n### Examples\\n```\\nsort_array([2, -5, 1, 4, 7, 8]) ➞ [-5, 1, 2, 4, 7, 8]\\n\\nsort_array([23, 15, 34, 17, -28]) ➞ [-28, 15, 17, 23, 34]\\n\\nsort_array([38, 57, 45, 18, 47, 39]) ➞ [18, 38, 39, 45, 47, 57]\\n```\\n\\n### Notes\\n- The arrays can contain either positive or negative elements.\\n- The arrays will only contain integers.\\n- The arrays won't contain duplicate numbers.\\n- This is a challenge to enhance your ability, using the sorted built-in won't enhance your skills.\",\"isHidden\":false,\"lab\":\"Test.assert_equals(sort_array([2, -5, 1, 4, 7, 8]), [-5, 1, 2, 4, 7, 8])\\nTest.assert_equals(sort_array([23, 15, 34, 17, -28]), [-28, 15, 17, 23, 34])\\nTest.assert_equals(sort_array([38, 57, 45, 18, 47, 39]), [18, 38, 39, 45, 47, 57])\\nTest.assert_equals(sort_array([26, -1, -45, 74, 20]), [-45, -1, 20, 26, 74])\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,3,4,0,3,1,4,3,3,4,0,4,3,4,1,3,3,1,2,1,2,3,1,0,4,4,5,1,1,2,1,1,3,1,2,2,2,0,2,3,0,3,2,2,2,2,1,0,2,2,3,3,3,2,2,3,2,1,2,3,3,0,3,0,3,0,0,3,2,3,2,0,1,2,1,0,0,2,0,2,3,2,3,4,2,2,3,3,0,2,3,3,4,2,3,0,4,2,0,0,3,0,1,2,2,1,3,3,3,3,1,2,2,3,3,1,1,3,2,3,2,2,0,1,2,1,2,0,3,2,2,3,3,2,1,3,1,2,0,3,2],\"rators\":[\"2fxapKr8XGdNeaKi2\",\"tAF9Gf6PiGogbZuWs\",\"XjyaCd8bviTitHTwa\",\"gb9rvGus2Jv7bjZSs\",\"8JyqsSbN2FJXPr3cw\",\"4Sntowj2cbMFRDMJa\",\"GamaMNrnhrjj5tXTx\",\"fz7SWP39DFns9FsgX\",\"hAzy9apJgLWwRFGPJ\",\"ekbfbYdyZeXHvaG8c\",\"8PwfYqoDQFThzNtvf\",\"6ShafRStcvew4GfCh\",\"XNcFbNk3geETcD5ut\",\"s5M5RvgqR9BhB9JoC\",\"7BvK9WWXi9Arqh63Q\",\"aCNWav8S8Try9RkC6\",\"Jqk2uJZZxEv5wZFze\",\"PT5pu7kJsgp9TDNGv\",\"Lw8oRc5SERsuntXMo\",\"rZ8PD3qRmGCvccSb9\",\"K5vETaccLsPyu8sbd\",\"d6XGoaf2oJXkWg5fH\",\"JKb5rhL6DKcCAypF9\",\"qJZsi5rhRnWA38FbA\",\"55QccTBvpjaGbTkoM\",\"Yy8aRYThob7RC9ZkX\",\"tAEWyCJgzAtFWcpsm\",\"nF4YGHuRBa6NsWQFQ\",\"Wmf3GfnEn4B3ttkmp\",\"aZEggJjPEmXn85XAw\",\"EQbnbkkPYtGxiviTp\",\"cmwasetrBzbwJQbks\",\"LtD5jQnA63GoHjAq2\",\"C4QntmkYtB89GNtpd\",\"5J4tAkdA45c76xAfk\",\"wZoxzQDbso9SMAPkY\",\"zg8GmMSP2LkHBtAzy\",\"PytNZK9mNiRiZxPrm\",\"AasGs8AeX9Lcb9xJn\",\"mcJDA2TkghmFqLe3i\",\"mDWNyaaQ9hvPCRzSd\",\"LJhkQpcb7DhE9L3hR\",\"QHcNEadRcCStpv7dj\",\"n2BRY9X8899dcG8Bw\",\"aEm3Wvj2rFYRL8Lrb\",\"KBzzKtGw9NxkqD2FE\",\"cEwfQp74BF9PkxXwy\",\"ZNnsMeNkdDhHjSrZb\",\"c3nsyfKKeQGxp6sKb\",\"kYWb8BwpKwunQkxeX\",\"sbJcFfQjQ59Wfg4Cd\",\"EjbDDFRECrzQDkzrX\",\"JS3hNM3XXkxPdg3yk\",\"YRstQuthRkFeBiXug\",\"xsfJEceYqEivRfEzM\",\"RHZcTWs7asoBGydH4\",\"m6D2RuQJwrAK6WB3v\",\"4rwxLqLs2mNZNg8NB\",\"7txFzDQ43vJ7qCY88\",\"gJYuGdkXEWWmGRLzu\",\"v9KtC8YLbMWmXiW2H\",\"HF28xZKSLM9wEuqNg\",\"q6QsMYNMpPNtmyTeW\",\"iojEnnY9FsMfYzp6f\",\"tmPGWurf3Da8mhybw\",\"cR3ibTMxLyEdDFCHY\",\"DEDniTrstQYGounXT\",\"Ecg4m7srYGgZsb4Ck\",\"iS5BrkGLzJyPK7nKt\",\"zZDaXBxMzTCBhNkgL\",\"HqmxnQJM66Y57twhn\",\"yjtdwc2AC4jA2RWtn\",\"5jLWPqX2hB8Djzto2\",\"HhYCji7QqauyN3A7v\",\"hRiMXDZNAzyPd5tpt\",\"dEuJGZbBQkveCXEFk\",\"jBR47vA7HwAZqp4QA\",\"u7i7WPM63n42r8R8o\",\"377aXz9FPFSZxyrSv\",\"DrkR35NqnP9NDLbq6\",\"skG34HkAFoQiHk7gg\",\"hnyhBFWwNCz9mDfSi\",\"pmgFEciNrd3ES9tuu\",\"f9peT7zzJaLdTPxhJ\",\"9CoqdidjM9KbeKnHY\",\"mG8HqKiAQFTdRZthG\",\"w2HhxvSLmDhaGCAjE\",\"Yp7uvStL97cC9fKkY\",\"fJfqZzhj2qpL5f4xn\",\"RbRoa7RJ5nEooSYd7\",\"J5T8gZqiZXFuFDTQ7\",\"abt2C3Y82RX3qbaPt\",\"R4SjTgDnpigJYDLyL\",\"xwEZk3bNZoNDPJYF5\",\"9FCeFzjPA4jrQ7oHW\",\"xn7uGNKeAwPEkP9oA\",\"dkcmCKwqApX5jBggc\",\"BfwbCTRtW4wG2bsnH\",\"BrTDhPJcACL2bsrpJ\",\"DPi9QGLctq2y76KuE\",\"qD2LrwaDrSdiybLKY\",\"QRv96jmNaYsWkxQEG\",\"J3upzLHuEwXH7Z2hx\",\"6MjSiiBLPcvXbXcaZ\",\"gXTAie79kiw28tx5u\",\"oBcs8GLX2ZFLXQy8y\",\"qZQxPQ2kaNKAMesHT\",\"WPf3wuMaAipBActzR\",\"WWMN9D6oscGQah2k7\",\"DQskEvAv5KiJDPtGF\",\"d8qtzoLB264iP8tdY\",\"T2vhHPhRR96hRizq8\",\"cAP3n5NY64uoMwzRR\",\"CHvzhtXnv8HTbPQ56\",\"RTDx9axf52kxhFjwZ\",\"PXAcsKkssS2yLyDv2\",\"2QziknsznNeMPRh3g\",\"srJ34BaybkQh3qRkM\",\"Afnps7TJQuS9sipMb\",\"GGdmhAvxXhqhhibJN\",\"3LiSLdtN58n46NEqg\",\"yyo6YLQN2of6fxp49\",\"FEYpu9RWysAgW3XnP\",\"fznzd3qnvtbFkkizz\",\"9ivvGvJGvtQfigQaZ\",\"9pS8Wky8QB5kG74t4\",\"XujK3rHd3JcM9TLJy\",\"rfyEkETeoS96QNH4e\",\"2PufnQcsHsfymufX3\",\"H9KZi2cjt4FwH7qog\",\"8BFSTCnoe2QggN64c\",\"PC3pLs36zNzpRDSuE\",\"LQxof8pGabGuWP7Gn\",\"4RY3zj9C2t8GGefhi\",\"buX4mCQhtXCfBjeno\",\"AQSqD9oNv2uPfxZCR\",\"fbr22rabEJMfBp7vD\",\"qzXAMXsHZGT8o5hTA\",\"4Lwjr34ypKNQNQCar\",\"9LghqktEpW4YLxdNk\",\"ey3CASd6Je5LEJzfB\",\"o4ixjQGSaYqA2JoM4\",\"nkH3HfJXLMNcBMM79\",\"T6iBEE2jp7f7iEF2P\",\"suArq5BbSy7gD6xri\",\"yod5YhKtPqw2GfG9B\",\"8sNv5PTHa7XQ8bNqR\",\"rhS8qXRjZcpDXkwnE\",\"5HCu9Ydd86QgHDRNP\",\"Ds7L5bksw2QRHjrKL\",\"mw9464S5dnenqzvpm\",\"3KkyQm77zsew58Dc2\",\"mvJBakQ35CWAnbbEZ\",\"Qyfyyw6oC4EHAndzo\",\"KfGmizjwhtMAaXspt\",\"wrL4iX2CCSqDCCty3\",\"55RQznnuTGpsj3EXd\",\"eMuCpJ2spXWkJjWNz\",\"RErqK2yM94wYyD2hk\",\"n2qKKxomPnb4zez5M\",\"jkbavR2ATFJcpmo8M\",\"9pzFiFK3ANLjQfnr2\"],\"total\":175,\"quality\":[5,1,5,5,5,5,5,5,5,5,4,5,5,5,5,5,5,5,5,5,5,5]},\"flags\":0},\"summary\":\"Python has a beautiful built-in function sorted that sorts an iterable, usually an array of numbers, sorting them in ascending order, but using key= you can sort the iterable in different ways.\\n\\nCreate a function that takes an array of integers as an argument and returns the same array in ascending order. Using sorted() would be easy, but for this challenge YO\",\"tags\":[\"algorithms\",\"logic\",\"sorting\",\"language_fundamentals\"],\"timestamp\":{\"$date\":1578245398688},\"title\":\"Sorting Time\",\"quality\":4.7727272727272725,\"family\":[{\"_id\":\"4ka9TBAWuy4ZMv2d6\",\"language\":\"cpp\"},{\"_id\":\"38Ctuc4jKhExdE6uQ\",\"language\":\"javascript\"},{\"_id\":\"kjJWvK9XtdbEJ2EKe\",\"language\":\"python3\"},{\"_id\":\"9TsJiCzxSatxcY2go\",\"language\":\"ruby\"}]}}"]