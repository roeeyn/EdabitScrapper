a["{\"msg\":\"result\",\"id\":\"1418\",\"result\":{\"_id\":\"Egh2HES8eqPTTX9Q2\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"def rolling_cipher(txt, n):\\n\\t\",\"difficulty\":2.04040404040404,\"familyId\":\"Rt26PPS8A7HpgX7cH\",\"instructions\":\"Write a function that accepts a string and an `n` and returns a cipher by rolling each character forward (n > 0) or backward (n < 0) `n` times.\\n\\nNote: Think of the letters as a connected loop, so rolling `a` backwards once will yield `z`, and rolling `z` forward once will yield `a`. If you roll 26 times in either direction, you should end up back where you started.\\n\\n### Examples\\n```\\nrolling_cipher(\\\"abcd\\\", 1) ➞ \\\"bcde\\\"\\n\\nrolling_cipher(\\\"abcd\\\", -1) ➞ \\\"zabc\\\"\\n\\nrolling_cipher(\\\"abcd\\\", 3) ➞ \\\"defg\\\"\\n\\nrolling_cipher(\\\"abcd\\\", 26) ➞ \\\"abcd\\\"\\n```\\n\\n### Notes\\n- All letters are lower cased.\\n- No spacing.\\n- Each character is rotated the same number of times.\",\"lab\":\"Test.assert_equals(rolling_cipher('abcd', 1), 'bcde')\\nTest.assert_equals(rolling_cipher('abcd', -1), 'zabc')\\nTest.assert_equals(rolling_cipher('abcd', 3), 'defg')\\nTest.assert_equals(rolling_cipher('abcd', 25), 'zabc')\\nTest.assert_equals(rolling_cipher('abcd', 26), 'abcd')\\nTest.assert_equals(rolling_cipher('abcd', 27), 'bcde')\\nTest.assert_equals(rolling_cipher('abcd', 0), 'abcd')\",\"language\":\"python3\",\"summary\":\"Write a function that accepts a string and an n and returns a cipher by rolling each character forward (n > 0) or backward (n < 0) n times.\\n\\nNote: Think of the letters as a connected loop, so rolling a backwards once will yield z, and rolling z forward once will yield a. If you roll 26 times in either direction, you should end up back where you started.\\n\\nExamp\",\"tags\":[\"arrays\",\"cryptography\"],\"timestamp\":{\"$date\":1552696099267},\"title\":\"Rolling Cipher\",\"stats\":{\"completed\":{\"total\":230,\"ratings\":[2,2,2,2,2,2,2,2,2,2,1,1,3,2,3,3,2,2,2,3,2,2,3,3,2,3,1,1,4,2,0,0,3,2,1,2,3,2,3,1,2,1,1,0,2,2,2,2,3,2,1,2,1,3,3,3,1,3,0,2,3,3,3,3,2,3,2,3,0,2,2,3,3,2,0,3,3,2,3,3,1,2,2,3,1,4,2,1,3,3,2,1,2,1,2,3,2,3,1,0,1,1,3,3,2,3,2,2,3,0,2,5,2,1,3,3,3,2,2,2,3,3,1,2,3,0,2,3,1,4,2,3,3,0,3,1,3,2,3,1,2,1,2,3,1,2,3,0,2,2,0,3,0,0,1,2,3,3,3,1,1,3,1,3,2,2,2,2,2,2,2,4,3,3,0,2,3,1,0,2,3,2,1,1,3,2,1,0,2,1,3,3,2,3,3,4,3,0],\"rators\":[\"BkPgkDQGHm66X4Qai\",\"Jqk2uJZZxEv5wZFze\",\"qvEvDcL32a5F4Tg6c\",\"qaR8DnWrTk8Mus5Q2\",\"6W2GSzrYjMD9ANBFY\",\"gb9rvGus2Jv7bjZSs\",\"8JyqsSbN2FJXPr3cw\",\"yZvzB3qFb8pkHy4dg\",\"tAF9Gf6PiGogbZuWs\",\"T3ZAuoMrJjvZwN55B\",\"M8jrv2FfpMQp9Qzpx\",\"ab7BsQuhDo3QgE6bh\",\"4cxKdMqL4Qk2GsJpm\",\"MXjxGML2X75x64vJo\",\"kQH5b8MXJunh84Czq\",\"PFjMZGHNAPTkgd7tq\",\"nF9pCCzbGDhzvWgaw\",\"FiHK5ZDMhR7d5WFET\",\"AF6LgdKhEdzwgRJom\",\"5s4qhuRJijYaDNXva\",\"C9LKGu2g5hSijvDzA\",\"6u7yc9m6HuHGbHzph\",\"td7qPZ7Lv4pEWT2Ya\",\"jYJ26SiLKBu5GRumq\",\"aXCm9vWqKwL9XFYoj\",\"yrCNkFYQBEDE76eFS\",\"QGRs577jvdGS9pSnf\",\"BFNm9gacwba9KyLFW\",\"hsrNYf3WbexXJKhCq\",\"WkWyq9wMkZhXB6zsD\",\"AYaEkTWLMmfzpwejr\",\"t8GRbY5ME64BcgWQk\",\"gMJhLdyw3tH7L96X2\",\"cR3ibTMxLyEdDFCHY\",\"T2vhHPhRR96hRizq8\",\"FgkYtHLxeD8pETJ8T\",\"aCNWav8S8Try9RkC6\",\"XKi8iZXBCHCaebSHh\",\"ToTyoZx9QFGFn2BKE\",\"mG93NkvEZfh2kPrMq\",\"x9A83cZkyA7E7utn3\",\"GR5P7gLKtxGyTAZTB\",\"QLcFxARNuZmaPThyg\",\"nfXGHENb5md7m355s\",\"s2tcgbTiSD7foboTW\",\"ozqX8HKbqPZnrjjaN\",\"rPvq3ZKT8KGQoBdLx\",\"YMoaoPSBBMzMgweJb\",\"EKrSBrTXuhE3f4xsR\",\"N962oRnYTtRzEd22M\",\"ouPtoRyNq8hKH2WkT\",\"o4MiZc8CrPqn8TN9T\",\"Z8WFmzQRYcHDxPqX7\",\"ZnWyAsqYcD4G8aqMF\",\"Nj6FwgBtAXsaQwsM2\",\"ZbunZ3ASwaBpgteiZ\",\"2fxapKr8XGdNeaKi2\",\"DcPPgzMRYLuKS4Q85\",\"qmetzMnhdAowTk8Pp\",\"otXtuQygbcYATMZoP\",\"nzx4uAPg3hCceyFPE\",\"oqGkxvASXq52iTDvp\",\"HQxp7NcdvF92G7bYS\",\"EXZfPb8YH28EL8Rh9\",\"s5M5RvgqR9BhB9JoC\",\"v9KtC8YLbMWmXiW2H\",\"qBaLGrm952ii9K23M\",\"HqmxnQJM66Y57twhn\",\"qJZsi5rhRnWA38FbA\",\"8aPJNKDxXq7884eJb\",\"u5u2YpHXiNgzDNJdX\",\"AbrJ8hMyv5fFXG6DN\",\"C4QntmkYtB89GNtpd\",\"K96FwtfDDN5WM4Bb7\",\"8PwfYqoDQFThzNtvf\",\"vgTvCCxgvbCTDvaRT\",\"6ShafRStcvew4GfCh\",\"2innwjWqxJHo4eRGh\",\"Z85ajWfZ4jDPkbvR4\",\"4zh9hoYRedNq6GxN7\",\"4CFzv558qbGcpQwc4\",\"Wv5c7WsK6R8yb4mTt\",\"pmgFEciNrd3ES9tuu\",\"AasGs8AeX9Lcb9xJn\",\"t3zzMqgPFuQy7Ept4\",\"WLFPvm65aHfgwQy7N\",\"PytNZK9mNiRiZxPrm\",\"mDWNyaaQ9hvPCRzSd\",\"8DH2opL3T5kdcoiRJ\",\"aEm3Wvj2rFYRL8Lrb\",\"wZoxzQDbso9SMAPkY\",\"ZNnsMeNkdDhHjSrZb\",\"Fk9kLwoG4Brf4KsKf\",\"YRstQuthRkFeBiXug\",\"3Zceb8GudqAG3onG3\",\"gJYuGdkXEWWmGRLzu\",\"kYWb8BwpKwunQkxeX\",\"Yp7uvStL97cC9fKkY\",\"EjbDDFRECrzQDkzrX\",\"euPBBaYXyS8RBr9KB\",\"pWD2YC5s4YRCxFc2i\",\"4RY3zj9C2t8GGefhi\",\"J5T8gZqiZXFuFDTQ7\",\"4BHrt3NoCQECjvFJC\",\"3pxHTZBsv7MKzFG6Y\",\"sz8ufn9i8zeiGWpAy\",\"dHZqT6h4JMwk5fPC8\",\"GM2X83qnuLXTHe5zA\",\"uSEfi7FRPHFCRCwdz\",\"n2BRY9X8899dcG8Bw\",\"KdNDysEsy2TW5QRJ2\",\"9dgvEreRDYRiwLmYv\",\"ekQh3jzgGLsEMbKo3\",\"HF28xZKSLM9wEuqNg\",\"yr822PZmmiDDenxpB\",\"fZCwknjgeY7icBk9c\",\"n2ck2WGuM35vbZiFz\",\"MKT7khMBGXzA22ykf\",\"DEDniTrstQYGounXT\",\"mmjoLhCivx5pjfbWw\",\"Wv2vJnEj8ywNmARoF\",\"PweZwtXTDkEwxZXQ4\",\"LjoNTyGEMfBpMHHus\",\"hnyhBFWwNCz9mDfSi\",\"Ecg4m7srYGgZsb4Ck\",\"AioJKoJ5ogzeBL5ZH\",\"bJxaKHJqR82EWw8Su\",\"Z4M3NAa4TXquMNkHe\",\"iMGbywFawxuZJfdc7\",\"iojEnnY9FsMfYzp6f\",\"fK2ousiaKc5gvevyW\",\"pPtmnJ7q9QchoG2Jq\",\"DYDJTyGgKFnBRLm2r\",\"9CyzZC65NoyiHHxSm\",\"zZDaXBxMzTCBhNkgL\",\"yjtdwc2AC4jA2RWtn\",\"ZsHZ6a5qLfC8m8EyY\",\"iS5BrkGLzJyPK7nKt\",\"dEuJGZbBQkveCXEFk\",\"ZrKCkX7xxGGZzauFW\",\"q6peoEWzrwZzogT5w\",\"XjajdyybZZbkz8o5x\",\"qD2LrwaDrSdiybLKY\",\"jBR47vA7HwAZqp4QA\",\"YRAzEBJoLvSaiPtYx\",\"dkcmCKwqApX5jBggc\",\"axdSNLZpiCDF8RS6n\",\"L3BJygJoLeHsTZqfo\",\"QRv96jmNaYsWkxQEG\",\"gojReckJvzYvoHqSu\",\"DPi9QGLctq2y76KuE\",\"9CoqdidjM9KbeKnHY\",\"8fZxjQfuXw5HMSRJM\",\"xn7uGNKeAwPEkP9oA\",\"nc7bRhkxgKyqusYe3\",\"CLypXaZksY99mpRCm\",\"6MjSiiBLPcvXbXcaZ\",\"9FCeFzjPA4jrQ7oHW\",\"dYPkStFnLvAMsHSzZ\",\"J3upzLHuEwXH7Z2hx\",\"oBcs8GLX2ZFLXQy8y\",\"7scpcTEp3SEx5Wjg9\",\"DNACg4rcgZsPtYGZ8\",\"hvCCRgzL6sDBEGuut\",\"bccs9koJxyQ9XNiLC\",\"fznzd3qnvtbFkkizz\",\"LfDeQBAH37L7wgT4Z\",\"GgKjkeEerKDRpWRa5\",\"56hAvfRozp7pDdKcB\",\"xexoFFWqWw76sZhRj\",\"cAP3n5NY64uoMwzRR\",\"yTtSCvGPyYna6JuRC\",\"9RaccqxB9dRZuS7z4\",\"tmoGTLEavNvihegWz\",\"PXAcsKkssS2yLyDv2\",\"XNmN6ztj36a7eChbD\",\"GGdmhAvxXhqhhibJN\",\"4pZyHCoqjD2o3fWMv\",\"XHShZ3WMPgGEA2vkR\",\"Hhvy3EGqWBXt3nFPA\",\"sbJcFfQjQ59Wfg4Cd\",\"qAby4AWXmTNeusvg3\",\"FEYpu9RWysAgW3XnP\",\"Wpn95NqWxncQrwNgz\",\"GTKsdeEihE636Le9i\",\"9ivvGvJGvtQfigQaZ\",\"2PufnQcsHsfymufX3\",\"rfyEkETeoS96QNH4e\",\"H9KZi2cjt4FwH7qog\",\"8BFSTCnoe2QggN64c\",\"PC3pLs36zNzpRDSuE\",\"giN3ZhbXunzpDp7Ru\",\"fKzJMR2LLbiRtGetj\",\"7XjpFhwzNaeFiQctW\",\"4Lwjr34ypKNQNQCar\",\"gKnWjDjwrJh7MK2df\",\"o4ixjQGSaYqA2JoM4\",\"MpfytGFYF77emJ3cT\",\"yod5YhKtPqw2GfG9B\",\"9pzFiFK3ANLjQfnr2\",\"8sNv5PTHa7XQ8bNqR\",\"RoGGD5cpHb4ftdLDv\",\"rhS8qXRjZcpDXkwnE\",\"CuFnjjjWfnqF9YNy4\",\"5HCu9Ydd86QgHDRNP\",\"CJxPyhJirydwiaj7x\",\"fZaGAGEPmzDhJtPy3\",\"buX4mCQhtXCfBjeno\",\"Ds7L5bksw2QRHjrKL\",\"mvJBakQ35CWAnbbEZ\",\"3KkyQm77zsew58Dc2\",\"Qyfyyw6oC4EHAndzo\",\"KfGmizjwhtMAaXspt\",\"jkbavR2ATFJcpmo8M\",\"n2qKKxomPnb4zez5M\"],\"quality\":[5,5,4,5,4,5,5,5,5,5,4,5,5,5,5,5,5,5,5,5,4,5,5,5,4,5]},\"tests\":{\"score\":0,\"rators\":[\"BkPgkDQGHm66X4Qai\"]},\"instructions\":{\"score\":0,\"rators\":[\"BkPgkDQGHm66X4Qai\"]},\"flags\":1},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.8076923076923075,\"family\":[{\"_id\":\"nvL6bEmidsTFKcWLu\",\"language\":\"cpp\"},{\"_id\":\"MDpnWs4vim4HbPJnD\",\"language\":\"csharp\"},{\"_id\":\"38kbFLBZdtCWSKHDZ\",\"language\":\"javascript\"},{\"_id\":\"Egh2HES8eqPTTX9Q2\",\"language\":\"python3\"},{\"_id\":\"auAFWv48jcyhYcdLv\",\"language\":\"ruby\"},{\"_id\":\"Nc6Retax2huPcTw6C\",\"language\":\"swift\"}]}}"]