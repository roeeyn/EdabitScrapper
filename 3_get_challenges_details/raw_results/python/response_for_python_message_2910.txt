a["{\"msg\":\"result\",\"id\":\"180\",\"result\":{\"_id\":\"jjL3GT8aBWP24eAvm\",\"author\":\"Brendan Campbell-hartzell\",\"authorId\":\"xmMqX6Dkh7yxb7ycH\",\"code\":\"arr = [\\\"cars\\\", \\\"planes\\\", [\\\"trains\\\", [\\\"motorcycles\\\"]]]\\n\\n# Fix the following using destructuring\\n# Only edit what's inside of [ trans1, trans2, trans3, trans4 ]\\n# this statement, as written, will cause a ValueError\\n[ trans1, trans2, trans3, trans4 ] = arr\\n\\n'''\\nprint(trans1) # should output \\\"cars\\\"\\nprint(trans2) # should output \\\"planes\\\"\\nprint(trans3) # should output \\\"trains\\\"\\nprint(trans4) # should output \\\"motorcycles\\\"\\n'''\",\"difficulty\":0.5540540540540541,\"familyId\":\"DBpLShoRA63GWtPMF\",\"instructions\":\"We can destructure lists like this:\\n\\n```\\narr = [\\\"1\\\", \\\"2\\\", \\\"3\\\"]\\na, b, c = arr\\n```\\n\\nbut what if the list has nested lists, like the following?\\n\\n```\\narr = [\\\"cars\\\", \\\"planes\\\", [\\\"trains\\\", [\\\"motorcycles\\\"]]]\\n\\ntrans1 = arr[0]\\ntrans2 = arr[1]\\ntrans3 = arr[2][0]\\ntrans4 = arr[2][1][0]\\n\\nprintln(trans1) # outputs \\\"cars\\\"\\nprintln(trans2) # outputs \\\"planes\\\"\\nprintln(trans3) # outputs \\\"trains\\\"\\nprintln(trans4) # outputs \\\"motorcycles\\\"\\n```\\n\\nCan you use list destructuring to assign all four variables at once?\\n\\n### Notes\\nCheck the **Resources** tab for more examples.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(trans1, \\\"cars\\\", 'trans1 does not equal \\\"cars\\\"')\\nTest.assert_equals(trans2, \\\"planes\\\", 'trans2 does not equal \\\"planes\\\"')\\nTest.assert_equals(trans3, \\\"trains\\\", 'trans3 does not equal \\\"trains\\\"')\\nTest.assert_equals(trans4, \\\"motorcycles\\\", 'trans4 does not equal \\\"motorcycles\\\"')\",\"language\":\"python3\",\"quality\":4.571428571428571,\"summary\":\"We can descructure lists like this:\\n\\narr = [\\\"1\\\", \\\"2\\\", \\\"3\\\"]\\na, b, c = arr\\n\\nbut what if the list has nested lists, like the following?\\n\\narr = [\\\"cars\\\", \\\"planes\\\", [\\\"trains\\\", [\\\"motorcycles\\\"]]]\\n\\ntrans1 = arr[0]\\ntrans2 = arr[1]\\ntrans3 = arr2\\ntrans4 = arr2[0]\\n\\nprintln(trans1) # outputs \\\"cars\\\"\\nprintln(trans2) # outputs \\\"planes\\\"\\nprintln(trans3) # outputs \\\"trains\\\"\\nprintl\",\"tags\":[\"language_fundamentals\",\"arrays\"],\"timestamp\":{\"$date\":1607017647155},\"title\":\"Destructuring Lists II\",\"stats\":{\"completed\":{\"total\":210,\"ratings\":[1,1,1,1,1,1,0,1,1,1,0,0,1,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,2,1,0,1,1,0,0,0,2,0,0,0,2,2,0,2,2,2,0,0,0,2,1,3,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,1,1,0,0,1,0,0,2,1,0,2,1,0,0,0,0,0,2,0,1,0,0,0,0,1,0,0,1,1,0,1,0,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,2,0,1,0,0,0,0,1,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,2,1,1,1,1,0,1,0,2],\"quality\":[4,5,5,5,1,4,5,3,4,5,5,5,5,5,5,5,5,5,5,1,5,5,5,4,5,5,5,5,5,4,5,4,4,5,5,5,4,4,5,5,5,5,5,3,5,5,5,5,5],\"rators\":[\"q9FfWNiMDKRiaCJ5j\",\"di2hhADLx59Bj4ewM\",\"TKm2tReEtdweH9Qno\",\"Ds7L5bksw2QRHjrKL\",\"Yp7uvStL97cC9fKkY\",\"vCxuabDxEv9YC3Szb\",\"iS5BrkGLzJyPK7nKt\",\"gb9rvGus2Jv7bjZSs\",\"gJYuGdkXEWWmGRLzu\",\"srJ34BaybkQh3qRkM\",\"Krto2sGMfGWBLcL7n\",\"yjtdwc2AC4jA2RWtn\",\"Jqk2uJZZxEv5wZFze\",\"QRv96jmNaYsWkxQEG\",\"J3upzLHuEwXH7Z2hx\",\"FEYpu9RWysAgW3XnP\",\"YRAzEBJoLvSaiPtYx\",\"HqmxnQJM66Y57twhn\",\"B8n7KqbvEDjZzgj2D\",\"QbWwoxMsD5DosBmRJ\",\"fe3gsFT3MbZ4azEC9\",\"zERid8pE9JnysiN5Q\",\"DEDniTrstQYGounXT\",\"qxxXuL9fNGXKfe5sK\",\"aEm3Wvj2rFYRL8Lrb\",\"zd9FLSzsGz3evKafy\",\"7KsymxNN9S8ZG5oQe\",\"9Q3hk6gYokuBMNmAW\",\"S6FmA9hRfExghscS4\",\"fDxLFpkZDLDfpG3Gy\",\"m2kfE6tTgty4vtWwg\",\"6gHaCTMvjCk5ggBFm\",\"xmMqX6Dkh7yxb7ycH\",\"pnkBesnLDfK7CfjNu\",\"PTDFuxAzou7W6asWt\",\"oqPwBd5aaE5x6Ybbm\",\"TuGMFnbaaSmJ3N2qD\",\"5HCu9Ydd86QgHDRNP\",\"PXAcsKkssS2yLyDv2\",\"F7wta4nHmabMr9dfd\",\"pPpmP7xeJzGgK362R\",\"XD5nmvKQchKezPXhy\",\"eBBSiBrLntfRfqRwF\",\"M2gFMJkocQSY6bsFR\",\"zFL4DfdwXCdyGLMz9\",\"xLMuE3gi2h7QRdgCp\",\"5S9nX4rKsnCcnv4Cz\",\"HnKYkpitPsdx6zwtN\",\"PC3pLs36zNzpRDSuE\",\"LfGif7sGS3AjxwD4N\",\"wRttWTM59y8m5mx7x\",\"J5T8gZqiZXFuFDTQ7\",\"EA3m4tEa89QaeS55E\",\"YaybbCdfjFQmsfgtp\",\"GZgFDSZdgKBuixp22\",\"AXcnPX68zdMiLNSmu\",\"cCFRcwA8Z4TCwsMGo\",\"LuTaJy9SW2t9CqkXZ\",\"oBcs8GLX2ZFLXQy8y\",\"8JyqsSbN2FJXPr3cw\",\"mxX4rH5ELYkdZ2Mbw\",\"GMQM52abpXNgEBote\",\"Stye5FSYwYNbhFHgR\",\"GqnEdzvEGRkgBxqHB\",\"v647CD8GKNeTbqSH6\",\"JS3hNM3XXkxPdg3yk\",\"CQhaiZqQcP87YteSG\",\"buX4mCQhtXCfBjeno\",\"xNCLJDm9Bni6gByMz\",\"2MjzJ7yxh3eT3xbng\",\"XrqNzJ2FRG8HnGiR6\",\"Fk9kLwoG4Brf4KsKf\",\"5f6oSeq4r5WTXLdCQ\",\"9pzFiFK3ANLjQfnr2\",\"fTNQmMvTZhhiGBCMe\",\"5NGxHLcQ8Af2RJ4TN\",\"tAF9Gf6PiGogbZuWs\",\"mDWNyaaQ9hvPCRzSd\",\"jNvegJWCk5HCtEMbK\",\"uvLimfW9x3bCp7huQ\",\"3cF6NXq3ZEwdkgSjb\",\"qAby4AWXmTNeusvg3\",\"6LbPw9yW6HHDfn8B8\",\"iojEnnY9FsMfYzp6f\",\"kjvgTyRFyKHv44DcH\",\"2QGRoQn2dRq3scu7k\",\"66a9xX73nmTEuKs9k\",\"T6iBEE2jp7f7iEF2P\",\"zC8WrPp5BC6c2exrW\",\"pwWtbXEjzuvrhEGwt\",\"i5iePG5GqhJJ8HEoB\",\"fdyejapW3NWN7utPX\",\"4TmgHkn5vqyHK3sYC\",\"YmQb9Mo4Xcg2vzgbn\",\"Q6gEE9dG8ERy2Xu3c\",\"RTER5uJdW4khkiNbY\",\"DFpZcskPncmo7fuzR\",\"jgyuzt5BpA3ohHG96\",\"9Ly8afdtofp8DXzrt\",\"a2Kmh6ekWqQQooHiQ\",\"CHvzhtXnv8HTbPQ56\",\"8PwfYqoDQFThzNtvf\",\"T6Rm8mREPMZSftzrC\",\"3LiSLdtN58n46NEqg\",\"9qoWqLcHGiDX429rE\",\"j7ebNFtte6fSkMWjj\",\"NP2RxM3eBd3drnDwP\",\"N2wnZXkhDH86mgjQ8\",\"XxLKk8pkJnSjfZNHx\",\"XEjiqMFvDTLTo2X9G\",\"AasGs8AeX9Lcb9xJn\",\"yAouD3PxzED8a4gap\",\"TiDFmxf3QEpbfXi4f\",\"Cg3LKtEAJpsrdWroG\",\"x2Cz7S8rCKJqCE3Xe\",\"JiSpvq6C7azQEmENc\",\"Afnps7TJQuS9sipMb\",\"zBk2cwJ9SLAhFuM3K\",\"gKnWjDjwrJh7MK2df\",\"j22fPdGZvaryte8j5\",\"MKT7khMBGXzA22ykf\",\"pQwhNKiCne4gEZgcn\",\"sbJcFfQjQ59Wfg4Cd\",\"cdXmwjupCXSvJTSNo\",\"FiaTpm7ehfDv43wSG\",\"syRNbbPdLCGXbH2Gy\",\"aN6owKqBeZj7ZefFR\",\"dYPkStFnLvAMsHSzZ\",\"d9LBRxvADNBB5QJMB\",\"9HPB28hBoTnZnspQE\",\"ecytnKJxjCPk8Kbif\",\"hZ2JDAEG2P5rMLWEW\",\"8ynPy35NQFsnh4WqC\",\"7q8oBsCHwn48Ppnrq\",\"hRfdHT8bWztZuCqzi\",\"gbGzZz5Yq5hT357v8\",\"PmRyaLmhAF4MMLBtM\",\"b7yQWr6eJFxYTmt3j\",\"fGvJRtjbJFJJZLCnW\",\"5Dd7XwALvvMMwS4Fb\",\"5QN8R22z43SrwoHDz\",\"YZsZjfvd3PnLhDJrR\",\"B4y8aoyXJtskYPFEL\",\"FGEeCTorXbX3WvjFW\",\"qaPjAANdnxFnWfj5d\",\"PBnvAuiKXwjqjKG33\",\"5nbHH4eApn6So9h2n\",\"dzS6WBTMHyFEag6Fp\",\"rF97GDLqCgynr7BaD\",\"3SgSNoAB3sxaYeT3w\",\"9mfNFEJiFasqLrjvP\",\"rQA9SE8nuwFueaHsR\",\"vAbK8sCfKyFC78HYg\",\"M4vq8ATaS9Jg5X7iP\",\"AQSqD9oNv2uPfxZCR\",\"tR9grPBLncwacBTzr\",\"5H6WybGSZcsxZnLAW\",\"QWjsXnLaJ7xfL3Amq\",\"fMp8sPsKSECdfgF9j\",\"jWbd7SYDzLPjc9EDh\",\"pduNK68oazqQTtbLp\",\"SCM8d6sEN4n77R2Ft\",\"4sSXLSBZDxK2Swoo7\",\"M8dQuMrEpP8Hc3tHN\",\"E45zy9qvm9DeJhDWL\",\"PKu9i6fmR67WGCgad\",\"AwXQLqnTYzcCQrnqQ\",\"EE6qCDCRphjXXdE3n\",\"Si3HYCLMe8PM47rRt\",\"rrSC943cCKNG48sH4\",\"F8dA24AosSC8XXb7D\",\"a2PQbkxH2NhSWQ4SL\",\"dCHJHgKdWNMGaAA7W\",\"4akHBgnDEDj3Rkv5n\",\"5CsHudxuDESxmjTPW\",\"BrTDhPJcACL2bsrpJ\",\"jcPZ5ySXseCB7Ec3x\",\"BgZcBs3KWeYCRKChr\",\"Wi4H6ayKsNDWWQCG5\",\"szQg8dxKNNre3v3Jk\",\"xT2YiBTkgtZ9t6XPA\",\"mdRQaGT98ycMt87S2\",\"H469XosMjfNu8Fop7\",\"q8QGySvjPML3PWtw7\",\"peCvTbjQBgdWo53Wv\",\"63wBQ9L6hLJtHvZFb\",\"sKfrD9gjCDHuqLzSk\",\"K6S8HCswXg68EWHmo\",\"gDkNhSGtcCBLrEB23\",\"ta3DbDAhs5SZMzQYL\",\"CTW3MRyc4wNkcjGZQ\",\"7HAL7H6NJmc4NC8Q5\"]},\"flags\":0},\"editorId\":\"xmMqX6Dkh7yxb7ycH\",\"family\":[{\"_id\":\"HBNwoHQJn5uTWJCgM\",\"language\":\"javascript\"},{\"_id\":\"jjL3GT8aBWP24eAvm\",\"language\":\"python3\"}]}}"]