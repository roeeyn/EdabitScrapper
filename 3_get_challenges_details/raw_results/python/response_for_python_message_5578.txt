a["{\"msg\":\"result\",\"id\":\"1505\",\"result\":{\"_id\":\"6QYwhZstMuHYtZRbT\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"def prime_count(a, b):\\n\\t\",\"difficulty\":2.0714285714285716,\"familyId\":\"7Nskd4tDqQfzYqQHZ\",\"instructions\":\"Given two integers create a function that counts the number of primes between the two given integers.\\n\\n### Examples\\n```\\nprime_count(1, 10) ➞ 4\\n# range = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\\n# primes = [2, 3, 5, 7]\\n# answer = 4\\n\\nprime_count(1, 100) ➞ 25\\n\\nprime_count(1, 1000) ➞ 168\\n```\\n\\n### Notes\\nIf there are no primes within the given range, return `0`.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(prime_count(1, 10), 4)\\nTest.assert_equals(prime_count(1, 100), 25)\\nTest.assert_equals(prime_count(1, 1000), 168)\\nTest.assert_equals(prime_count(1, 10000), 1229)\\nTest.assert_equals(prime_count(1, 100000), 9592)\\nTest.assert_equals(prime_count(2090, 2098), 0)\\nTest.assert_equals(prime_count(548, 556), 0)\\nTest.assert_equals(prime_count(3297, 4297), 128)\",\"language\":\"python3\",\"quality\":5,\"summary\":\"Given two integers create a function that counts the number of primes between the two given integers.\\n\\nExamples\\nprime_count(1, 10) ➞ 4\\nrange = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\\nprimes = [2, 3, 5, 7]\\nanswer = 4\\n\\nprime_count(1, 100) ➞ 25\\n\\nprime_count(1, 1000) ➞ 168\\n\\nNotes\\nIf there are no primes within the given range, return 0.\",\"tags\":[\"loops\",\"math\",\"logic\"],\"timestamp\":{\"$date\":1605421724957},\"title\":\"Count the Primes within a Range\",\"stats\":{\"completed\":{\"total\":56,\"ratings\":[2,2,2,2,2,2,3,2,2,3,1,1,3,4,2,3,2,1,1,2,2,2,3,3,1,3,2,3,1,3,3,1,3,0,0,1,2,3,3,5,0,3,2,2,1,0,1,1,3,2,2,2,3,2,3,3],\"quality\":[5,5],\"rators\":[\"s5M5RvgqR9BhB9JoC\",\"8PwfYqoDQFThzNtvf\",\"Yp7uvStL97cC9fKkY\",\"J3upzLHuEwXH7Z2hx\",\"iS5BrkGLzJyPK7nKt\",\"QRv96jmNaYsWkxQEG\",\"HF28xZKSLM9wEuqNg\",\"w2HhxvSLmDhaGCAjE\",\"gJYuGdkXEWWmGRLzu\",\"gb9rvGus2Jv7bjZSs\",\"DPi9QGLctq2y76KuE\",\"R4SjTgDnpigJYDLyL\",\"aEm3Wvj2rFYRL8Lrb\",\"Jqk2uJZZxEv5wZFze\",\"kEkNyqFARK9YBrhRx\",\"oBcs8GLX2ZFLXQy8y\",\"2fxapKr8XGdNeaKi2\",\"hnyhBFWwNCz9mDfSi\",\"K3RacTvkWHLfzKF8i\",\"yjtdwc2AC4jA2RWtn\",\"R29kgJ9M7R4qqwjcE\",\"xn7uGNKeAwPEkP9oA\",\"buX4mCQhtXCfBjeno\",\"iojEnnY9FsMfYzp6f\",\"cR3ibTMxLyEdDFCHY\",\"AFfw7cGg83uYk2Miy\",\"AasGs8AeX9Lcb9xJn\",\"srJ34BaybkQh3qRkM\",\"LQxof8pGabGuWP7Gn\",\"qRMyPsTjFp255TrrK\",\"HqmxnQJM66Y57twhn\",\"GGdmhAvxXhqhhibJN\",\"fznzd3qnvtbFkkizz\",\"8BFSTCnoe2QggN64c\",\"2PufnQcsHsfymufX3\",\"PC3pLs36zNzpRDSuE\",\"J5T8gZqiZXFuFDTQ7\",\"gKnWjDjwrJh7MK2df\",\"tAF9Gf6PiGogbZuWs\",\"suArq5BbSy7gD6xri\",\"yod5YhKtPqw2GfG9B\",\"rhS8qXRjZcpDXkwnE\",\"T6iBEE2jp7f7iEF2P\",\"8sNv5PTHa7XQ8bNqR\",\"5HCu9Ydd86QgHDRNP\",\"Ds7L5bksw2QRHjrKL\",\"Qyfyyw6oC4EHAndzo\",\"mvJBakQ35CWAnbbEZ\",\"3KkyQm77zsew58Dc2\",\"BrTDhPJcACL2bsrpJ\",\"MKT7khMBGXzA22ykf\",\"PytNZK9mNiRiZxPrm\",\"9pzFiFK3ANLjQfnr2\"]},\"flags\":0},\"family\":[{\"_id\":\"jWn5kRQHq5HRqPAeQ\",\"language\":\"cpp\"},{\"_id\":\"kqeXu4S4cyfzNExk3\",\"language\":\"javascript\"},{\"_id\":\"pofaA9CGw53LjAFvJ\",\"language\":\"php\"},{\"_id\":\"6QYwhZstMuHYtZRbT\",\"language\":\"python3\"},{\"_id\":\"JgwpMac9nbqhFQkK7\",\"language\":\"ruby\"},{\"_id\":\"iJKEQv3dGQMvnNzjL\",\"language\":\"swift\"}]}}"]