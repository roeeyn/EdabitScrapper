a["{\"msg\":\"result\",\"id\":\"2147\",\"result\":{\"_id\":\"zhqL89ZWgbxbixsdD\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"def is_exact(n):\\n\\t# recursive code here\",\"difficulty\":3.2244897959183674,\"familyId\":\"neWhQdGFaHGu6PQgQ\",\"instructions\":\"Create a **recursive** function that tests if a number is the exact upper bound of the factorial of `n`. If so, return a list that contains the **exact factorial bound** and `n`, or otherwise, the string `\\\"Not exact!\\\"`.\\n\\n\\n### Examples\\n```\\nis_exact(6) ➞ [6, 3]\\n\\nis_exact(24) ➞ [24, 4]\\n\\nis_exact(125) ➞ \\\"Not exact!\\\"\\n\\nis_exact(720) ➞ [720, 6]\\n\\nis_exact(1024) ➞ \\\"Not exact!\\\"\\n\\nis_exact(40320) ➞ [40320, 8]\\n```\\n\\n### Notes\\n- It is expected from the challenge-takers to come up with a solution using the concept of **recursion** or the so-called **recursive approach**.\\n- You can read on more topics about recursion (see **Resources** tab) if you aren't familiar with it yet or haven't fully understood the concept behind it before taking up this challenge.\\n- There will be no exceptions to handle. All inputs are positive integers.\\n- A non-recursive version of this challenge (of lesser difficulty and which gives you the total liberty of not using the recursive approach) can be found in [here](https://edabit.com/challenge/f24TDCGbYRjGfALQp).\",\"isHidden\":false,\"lab\":\"from inspect import getsource\\nfrom re import findall, MULTILINE\\n\\ndef check_recursive(fn):\\n  try:\\n    src, n = getsource(fn), fn.__name__\\n    if n == '<lambda>': n = src.split('=')[0].strip()\\n    return len(findall(n, src, flags=MULTILINE)) > 1\\n  except OSError: return True\\n\\nfor v in [True, False]:\\n  if v: Test.assert_equals(check_recursive(is_exact), v)\\n  else: Test.assert_not_equals(check_recursive(is_exact), v, 'Recursion is required!')\\n\\nnum_vectors, res_vectors = [\\n  2, 6, 24, 120, 5040, 40320, 3628800, 20922789888000, \\n  125, 721, 1024, 41845579776000], [\\n  [2, 2], [6, 3], [24, 4], [120, 5], [5040, 7], [40320, 8], [3628800, 10], [20922789888000, 16],\\n  \\\"Not exact!\\\", \\\"Not exact!\\\", \\\"Not exact!\\\", \\\"Not exact!\\\"\\n] \\n\\nfor i, n in enumerate(num_vectors):\\n  Test.assert_equals(is_exact(n), res_vectors[i])\",\"language\":\"python3\",\"summary\":\"Create a recursive function that tests if a number is the exact upper bound of the factorial of n. If so, return a list that  contains the exact factorial bound and n, or otherwise, the string \\\"Not exact!\\\".\\n\\nExamples\\nis_exact(6) ➞ [6, 3]\\n\\nis_exact(24) ➞ [24, 4]\\n\\nis_exact(125) ➞ \\\"Not exact!\\\"\\n\\nis_exact(720) ➞ [720, 6]\\n\\nis_exact(1024) ➞ \\\"Not exact!\\\"\\n\\nis_exact(403\",\"tags\":[\"recursion\",\"numbers\",\"math\"],\"timestamp\":{\"$date\":1594858844214},\"title\":\"Recursion: Exact Factorial Bounds\",\"stats\":{\"completed\":{\"total\":64,\"ratings\":[5,5,5,5,5,5,1,5,3,3,2,1,1,5,5,2,0,2,4,4,3,2,5,5,4,2,2,5,2,5,3,2,1,4,5,3,2,0,5,5,5,5,0,0,3,2,4,4,2],\"rators\":[\"a777e8chPvJkY3tKa\",\"aEm3Wvj2rFYRL8Lrb\",\"8PwfYqoDQFThzNtvf\",\"vTfyrr4pGddp8rbXc\",\"gJYuGdkXEWWmGRLzu\",\"axdSNLZpiCDF8RS6n\",\"bJxaKHJqR82EWw8Su\",\"HF28xZKSLM9wEuqNg\",\"bJaPCBx63YxdJAuTS\",\"5dHucvf2qBYyKim7X\",\"gb9rvGus2Jv7bjZSs\",\"bytuztnmvXdvKAHN9\",\"4fhjJBvLBWh6QeSih\",\"xn7uGNKeAwPEkP9oA\",\"fznzd3qnvtbFkkizz\",\"8JyqsSbN2FJXPr3cw\",\"DYDJTyGgKFnBRLm2r\",\"Ecg4m7srYGgZsb4Ck\",\"GgLd4eWBu79mdjtkP\",\"GGprTwrkjuccmrQRg\",\"6428wKHtwKkFdvBs5\",\"b5zo7s6xrqWgQnPao\",\"K5xocXSEBaQX86Lay\",\"tAF9Gf6PiGogbZuWs\",\"qD2LrwaDrSdiybLKY\",\"kDq2TnPdy7hGKdAD5\",\"fSQSHjW3e72MrWxbD\",\"J3upzLHuEwXH7Z2hx\",\"zd9FLSzsGz3evKafy\",\"h4x2jaMdj5aQZbW5g\",\"s5M5RvgqR9BhB9JoC\",\"Cia25zjeX3RkCNx5t\",\"iS5BrkGLzJyPK7nKt\",\"PcB74cM6JmB5rt5uQ\",\"mDWNyaaQ9hvPCRzSd\",\"DPi9QGLctq2y76KuE\",\"yr822PZmmiDDenxpB\",\"buX4mCQhtXCfBjeno\",\"58M252WF7SPRinfBx\",\"XNmN6ztj36a7eChbD\",\"QRv96jmNaYsWkxQEG\",\"Yp7uvStL97cC9fKkY\",\"8sNv5PTHa7XQ8bNqR\",\"2PufnQcsHsfymufX3\",\"iojEnnY9FsMfYzp6f\",\"J23RcmzbdtBbPCTjT\",\"SbGLSZ5piLATC8bop\",\"yjtdwc2AC4jA2RWtn\",\"9ivvGvJGvtQfigQaZ\",\"sSRa2YMqzRKeecD3q\",\"wZ22E8EXW4qasgru2\",\"fr9mr2pgEcPkdrDkX\",\"XHShZ3WMPgGEA2vkR\",\"T6iBEE2jp7f7iEF2P\",\"PH32cNxBjrK4a28sn\",\"MpfytGFYF77emJ3cT\",\"rhS8qXRjZcpDXkwnE\",\"5QN8R22z43SrwoHDz\",\"GMCMXNYipwEXvryDW\",\"DwetpbChQM4r6Gwah\"],\"quality\":[5,3,5,4,5,2,4,5,5,3,5,5,3,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"a777e8chPvJkY3tKa\",\"quality\":4.3125,\"family\":[{\"_id\":\"HJSpyCG7we27Afkqn\",\"language\":\"java\"},{\"_id\":\"chDJCBDzZkjSExMwm\",\"language\":\"javascript\"},{\"_id\":\"zhqL89ZWgbxbixsdD\",\"language\":\"python3\"}]}}"]