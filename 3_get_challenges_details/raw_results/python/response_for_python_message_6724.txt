a["{\"msg\":\"result\",\"id\":\"2070\",\"result\":{\"_id\":\"wEDHiAcALvS2KuRBJ\",\"archived\":false,\"author\":\"kochug\",\"authorId\":\"vQEmjTRgmdGNYB7yk\",\"code\":\"class StackCalc:\\n\\n\\tdef __init__(self):\\n\\n\\tdef run(self, instructions):\\n\\n\\tdef getValue(self):\",\"difficulty\":2.8976377952755907,\"familyId\":\"5Dn9mqWScqxsht9Nz\",\"instructions\":\"A stack machine processes instructions by pushing and popping values to an internal stack.  \\nA simple example of this is a calculator.\\n\\nThe argument passed to `run(instructions)` will always be a string containing a series of instructions.  \\nThe instruction set of the calculator will be this:  \\n- `+`: Pop the last 2 values from the stack, add them, and push the result onto the stack.\\n- `-`: Pop the last 2 values from the stack, subtract the lower one from the topmost one, and push the result.\\n- `*`: Pop the last 2 values, multiply, and push the result.\\n- `/`: Pop the last 2 values, divide the topmost one by the lower one, and push the result.\\n- `DUP`: Duplicate (not double) the top value on the stack.\\n- `POP`: Pop the last value from the stack and discard it.\\n- `PSH`: Performed whenever a number appears as an instruction. Push the number to the stack.\\n- Any other instruction (for example, a letter) should result in the value \\\"Invalid instruction: \\\\[instruction]\\\"\\n\\n### Examples\\n```\\n\\\"\\\" ➞ 0\\n\\n\\\"5 6 +\\\" ➞ 11\\n\\n\\\"3 DUP +\\\" ➞ 6\\n\\n\\\"6 5 5 7 * - /\\\" ➞ 5\\n\\n\\\"x y +\\\" ➞ Invalid instruction: x\\n```\\n\\n### Notes\\n- If there are no instructions, the value should remain 0.\\n- The return value of `getValue()` should be the topmost value on the stack.\",\"lab\":\"tests = [\\n  {'arg': '12', 'ans': 12},\\n  {'arg': '5 6 +', 'ans': 11},\\n  {'arg': '3 6 -', 'ans': 3},\\n  {'arg': '3 DUP +', 'ans': 6},\\n  {'arg': '2 5 - 5 + DUP +', 'ans': 16},\\n  {'arg': '9 14 DUP + - 3 POP', 'ans': 19},\\n  {'arg': '1 2 3 4 5 POP POP POP', 'ans': 2},\\n  {'arg': '13 DUP 4 POP 5 DUP + DUP + -', 'ans': 7},\\n  {'arg': '6 5 5 7 * - /', 'ans': 5},\\n  {'arg': '4 2 4 * 3 + 5 + / 5 -', 'ans': 1},\\n  {'arg': '5 8 + 4 5 1 + POP 13 +', 'ans': 17},\\n  {'arg': 'x', 'ans': 'Invalid instruction: x'},\\n  {'arg': '4 6 + x', 'ans': 'Invalid instruction: x'},\\n  {'arg': 'y x *', 'ans': 'Invalid instruction: y'},\\n  {'arg': '', 'ans': 0},\\n  {'arg': '4 POP', 'ans': 0}\\n]\\n\\nfor dict in tests:\\n\\targ = dict['arg']\\n\\tans = dict['ans']\\n\\tmachine = StackCalc()\\n\\tmachine.run(arg)\\n\\tTest.assert_equals(machine.getValue(), ans)\",\"language\":\"python3\",\"summary\":\"A stack machine processes instructions by pushing and popping values to an internal stack.\\nA simple example of this is a calculator.\\n\\nThe argument passed to run(instructions) will always be a string containing a series of instructions.\\nThe instruction set of the calculator will be this:\\n+: Pop the last 2 values from the stack, add them, and push the result ont\",\"tags\":[\"algorithms\",\"math\",\"numbers\",\"classes\",\"data_structures\"],\"timestamp\":{\"$date\":1524396208154},\"title\":\"Stack Calculator\",\"stats\":{\"completed\":{\"total\":134,\"ratings\":[2,2,2,2,2,2,3,2,1,2,2,4,2,3,3,3,3,3,4,2,3,3,2,1,2,3,2,2,3,2,3,5,3,3,2,3,5,4,2,3,2,5,4,2,3,3,3,3,2,3,3,4,4,1,5,4,3,2,2,4,2,4,4,3,4,3,3,3,1,4,3,3,3,4,1,3,3,3,2,3,3,3,2,2,3,4,4,4,4,3,2,4,4,5,3,4,4,2,0,4,3,2,3,2,3,1,3,4,1,3,2,3,4,3,0,3,5,5,1,4,4,5,5,3,3,3,0],\"rators\":[\"vQEmjTRgmdGNYB7yk\",\"HK3RW4kr7acFSAyL4\",\"tuyDaJzFy78jxvhCY\",\"Lyh6nkCyy9X7rTZPi\",\"tzHQmfmDbNJgqbeLx\",\"vqur2ZxtN8oX8xXne\",\"iEMnJaXXfa6dzdQzb\",\"3mtD7DxrAgDMcxWKt\",\"KHLJJM4grqF6xmo5t\",\"GRZzKCbeb4xKHFCrZ\",\"pdcaC4fEtsubBz4Wo\",\"m2iiZZHTpzHcEKJMn\",\"QyYmR6GqGSiw8KXYc\",\"wPhd86JGzcCkkQdyy\",\"mqXfzC24CdThpCaGd\",\"THD2EHgtJa2ooivJK\",\"M8jrv2FfpMQp9Qzpx\",\"T82JyZFPNz8maF8f8\",\"RsX6W2ddWM8ajHzss\",\"wEF3ZhC5iTqFjgw85\",\"KDfCknbFB67GDq3Yg\",\"6fJpRpAgiWD5zX9qB\",\"sXNYqHpzkE7wkXrAX\",\"PRPv763woB2EqjWvZ\",\"jjRWanDeqDvct4AnM\",\"6W2GSzrYjMD9ANBFY\",\"8JyqsSbN2FJXPr3cw\",\"yZvzB3qFb8pkHy4dg\",\"T3ZAuoMrJjvZwN55B\",\"gb9rvGus2Jv7bjZSs\",\"FkCM6nNgxYepHvWvM\",\"nN5iAnMzdgLLZLosm\",\"QzqL4jkcY4BMmNuS8\",\"tAF9Gf6PiGogbZuWs\",\"ab7BsQuhDo3QgE6bh\",\"4fQSjCThZyxYGfyHf\",\"guXi2wo9SeipBXXhC\",\"P59rek6gvwTzHvRYa\",\"3hNfP34uoz5WfhMca\",\"tsHLih5WxvYR7wCeu\",\"StJwhPFkevcqZ9swQ\",\"t5KZQw6TPiN2zDXpm\",\"byqTp7CX5oWSEZp4S\",\"AYaEkTWLMmfzpwejr\",\"PFjMZGHNAPTkgd7tq\",\"BFNm9gacwba9KyLFW\",\"ADhJSxuK4MjrjPWWR\",\"duygm2Ffue3bjb3MS\",\"Mb5sjE2qnvjL2xcBG\",\"hYwHEYBAzfLhsKozD\",\"k66z8NfCwxStFg2qz\",\"yfYmQT6jgJRsbSvFd\",\"Ti5BF4jnruwNNzHY8\",\"eYWgXzijKqfqgZNDi\",\"jYypgEfhDWb9syYP7\",\"MNgYsvK6HfLRb8wAz\",\"9cKQ9BxGZ4vQAcM5x\",\"HqmxnQJM66Y57twhn\",\"hrzGaJc9KZqgjAvew\",\"s5M5RvgqR9BhB9JoC\",\"qJZsi5rhRnWA38FbA\",\"C4QntmkYtB89GNtpd\",\"2fxapKr8XGdNeaKi2\",\"DwetpbChQM4r6Gwah\",\"AbrJ8hMyv5fFXG6DN\",\"8PwfYqoDQFThzNtvf\",\"DryNRN98Dj24BpgrL\",\"2innwjWqxJHo4eRGh\",\"Jqk2uJZZxEv5wZFze\",\"JKb5rhL6DKcCAypF9\",\"aRqQ42J5zqCmBNd8w\",\"AasGs8AeX9Lcb9xJn\",\"TyEeGAgsF7tG3fubX\",\"A5g5PhdQpmF7ohwsC\",\"QN3AHCaTykyuE5k8B\",\"Ecy2fPuyYDLKmRkcg\",\"aEm3Wvj2rFYRL8Lrb\",\"mDWNyaaQ9hvPCRzSd\",\"BByKDngfPvW6w4m7d\",\"3PoPSgExQ7hrpLvkm\",\"ghTAisPZoS5FTqQnK\",\"wT5gGgvjKc5wz59AQ\",\"qukQkxmedze5KqfBu\",\"WtFQigNmNZ5EREPzo\",\"irsssD7oCeibgm4hY\",\"KpHrC7WPEojnzgEtz\",\"ZNnsMeNkdDhHjSrZb\",\"B4jPYeyvixcfEZknA\",\"zQ8ioTQfJP8zjMnqg\",\"b3yseG7yE4My44QtA\",\"fxdGNWYS6PWMmswrF\",\"fznzd3qnvtbFkkizz\",\"a777e8chPvJkY3tKa\",\"uzwYcrm8PvfHZR7YF\",\"W5TajitmCyxz87zAC\",\"R4SjTgDnpigJYDLyL\",\"NaPpyhnXZ2XLtug83\",\"CMdKkCoZdTpucBeTP\",\"sfoAF6eygyfp6MWx3\",\"5ZR5C8Hh44gtGfMou\",\"uEeZaTW4HK8AL4BjQ\",\"mzhB3LXoJ2EGyqr3n\",\"zZ43WzxvFu7kaTKZ6\",\"LFSASkxgw9hr3KqmC\",\"4fhjJBvLBWh6QeSih\",\"xn7uGNKeAwPEkP9oA\",\"foytX6kH9wiSYqLtT\",\"tpxMgkGSHwBjS95Ta\",\"p8qqFdJ3FSk5x9z3G\",\"HF28xZKSLM9wEuqNg\",\"5S9nX4rKsnCcnv4Cz\",\"h4x2jaMdj5aQZbW5g\",\"qAby4AWXmTNeusvg3\",\"T2vhHPhRR96hRizq8\",\"ScaZG69jog5kcqGtQ\",\"eMuCpJ2spXWkJjWNz\",\"iojEnnY9FsMfYzp6f\",\"eHcgvkTGsH7ZziqBo\",\"gJYuGdkXEWWmGRLzu\",\"QRv96jmNaYsWkxQEG\",\"yjtdwc2AC4jA2RWtn\",\"zBk2cwJ9SLAhFuM3K\",\"J3upzLHuEwXH7Z2hx\",\"iS5BrkGLzJyPK7nKt\",\"StNu7DPyTgEStZsMY\",\"QxWgwpF6RofdzFXgi\",\"PXAcsKkssS2yLyDv2\",\"2PufnQcsHsfymufX3\",\"syRNbbPdLCGXbH2Gy\"],\"quality\":[3,5,5,2,5,5]},\"complaints\":{\"total\":0,\"reasons\":[],\"skippers\":[\"vQEmjTRgmdGNYB7yk\"]},\"instructions\":{\"score\":-27.65,\"voters\":[\"xv2WGQMNBh8xxXheW\",\"gb2Fr2NWvg5SJNjqj\",\"hy63rX7K3hEfyp8B4\"]},\"tests\":{\"score\":-11.350000000000001,\"voters\":[\"QyYmR6GqGSiw8KXYc\",\"axnLNbddHAGKR8dtF\"]},\"flags\":0},\"isHidden\":false,\"quality\":4.166666666666667,\"family\":[{\"_id\":\"WyuiphFcBXZSoKpEt\",\"language\":\"javascript\"},{\"_id\":\"wEDHiAcALvS2KuRBJ\",\"language\":\"python3\"}]}}"]