a["{\"msg\":\"result\",\"id\":\"2056\",\"result\":{\"_id\":\"Jjbbjqm3JuA6WnPYH\",\"author\":\"Albrecht\",\"authorId\":\"EKrSBrTXuhE3f4xsR\",\"code\":\"def bit_rotate(n, m, d):\\n\\t\",\"difficulty\":2.8727272727272726,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"ykieJmfF444Nacxas\",\"instructions\":\"Python offers some bit operations but not bit rotation. To complete that, create a function that takes three parameters:\\n\\n1. `n`: Integer, which in binary representaion should be rotated.\\n2. `m`:  Number of rotation steps that should be performed.\\n3. `d`: Boolean value; `True` = rotation right, `False` = rotation left.\\n\\nYour function should return an integer as a result of its rotated binary representation.\\n\\n### Examples\\n```\\nbit_rotate(8, 1, True) ➞ 4\\n# 8 in bin: 1000, rotated 1 step to the right: 0100, in dec: 4\\n\\nbit_rotate(16, 1, False) ➞ 1\\n# 16 in bin: 10000, rotated 1 step to the left: 00001, in dec: 1\\n\\nbit_rotate(17, 2, False) ➞ 6\\n# 17 in bin: 10001, rotated 2 steps to the left: 00110, in dec: 6\\n```\\n\\n### Notes\\n- For parameters use unsigned integers only.\\n- There is a solution with string operations and combined bit operations.\",\"lab\":\"Test.assert_equals(bit_rotate(8, 1, True), 4)\\nTest.assert_equals(bit_rotate(16, 2, True), 4)\\nTest.assert_equals(bit_rotate(283, 7, True), 110)\\nTest.assert_equals(bit_rotate(16, 1, False), 1)\\nTest.assert_equals(bit_rotate(17, 2, False), 6)\\nTest.assert_equals(bit_rotate(122, 7, False), 122)\\nTest.assert_equals(bit_rotate(125, 10, True), 95)\\nTest.assert_equals(bit_rotate(1022, 8, False), 767)\\nTest.assert_equals(bit_rotate(33, 6, True), 33)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,3,3,5,5,2,4,4,3,2,4,2,5,4,5,2,4,1,3,4,3,5,3,5,4,5,0,5,5,2,5,1,0,1,2,2,3,5,3,5,0,5,5,2,5,3,2,3,3,2,1,0,5,3,1,3,2,2,3,3,1,0,3,5,0,4,5,1,5,5,0,3,2,5,1,2,2,2,2,4,2,3,2,4,4,3,3,4,2,3,3,1,2,3,1,3,3,2,2,4,3,2,2,0,2,4],\"rators\":[\"EKrSBrTXuhE3f4xsR\",\"tAF9Gf6PiGogbZuWs\",\"FQKLJZoeNetX4cty7\",\"bRD4Ls3FoPdiBBFvt\",\"gb9rvGus2Jv7bjZSs\",\"HThhFmiv96Di2EYSN\",\"Tin42WiZ4JTDEnS7b\",\"7BvK9WWXi9Arqh63Q\",\"5Qvy7fNM2YEQ6PtbY\",\"BAXQYFC46bxoDjEg4\",\"AYaEkTWLMmfzpwejr\",\"Nj6FwgBtAXsaQwsM2\",\"cXdji3zveDkuNo9ch\",\"aCNWav8S8Try9RkC6\",\"RHSuurSWTrogyYJGk\",\"JiDXhxGzzSuXrBnmE\",\"DC46Jz5naS68LTdrs\",\"qJZsi5rhRnWA38FbA\",\"6W2GSzrYjMD9ANBFY\",\"CZeLyDD2BQL3jrzzj\",\"jsGMdvCPs9iTKQEQp\",\"JpeTZm5QTWFLqg9Bx\",\"nYoc6fEraRbFYbESd\",\"oWLvfc6Apa5ebBhy5\",\"nLpdvK7EcahCqNe8X\",\"FHSJnAYTbcsKFgeQa\",\"jDgJ2fdFS76TSorNc\",\"pzZMMmJRaxwGAgaTH\",\"2fxapKr8XGdNeaKi2\",\"8PwfYqoDQFThzNtvf\",\"Jqk2uJZZxEv5wZFze\",\"sZDYNicocwXesSMXb\",\"DwetpbChQM4r6Gwah\",\"nmXg7Hfeh3jMLHSsa\",\"kpiQQzE6CcFHfauGb\",\"4YXNcgvGg7dygvqpH\",\"6gsMupsCZJQgiwzJi\",\"GiK8LZt3JRKNJjj5W\",\"X4iqEdg7dPjFpoASw\",\"fMR9RcfgPJWiLgx7k\",\"t7BnRyo7NH5Nx22HR\",\"rQWctcxr7vvh32DoM\",\"azHSATBuuQ5wz9bvB\",\"bLpgu8xTdpDPFSAsM\",\"SGhPxX5bHGL8zZqtt\",\"C4QntmkYtB89GNtpd\",\"2Td9Aj3o6FAxaqx7w\",\"u5u2YpHXiNgzDNJdX\",\"3SKmXhcLPPkmQhjip\",\"LiW7nXr48ko64x82W\",\"ovqQRfyvmEDypjrnC\",\"MZAaNetbxGT3v8eDp\",\"GamaMNrnhrjj5tXTx\",\"aRqQ42J5zqCmBNd8w\",\"dYEtpRLeR8fb9yBRW\",\"pkQBaSzukotPEXmrD\",\"Q7Qy8oL8agXcYFDyP\",\"nAQCy7vYceD7z3Bmi\",\"aEm3Wvj2rFYRL8Lrb\",\"CuY5BaTCcu7Mp9tDu\",\"5dPTdykqWZTAiSoxn\",\"5ouyAPCFWTcjqx4MK\",\"CWTZqhLrZswDzDTQb\",\"zxmtE2mYR4xQzTHoy\",\"WLFPvm65aHfgwQy7N\",\"AJwBauGHyrbqgDYce\",\"7ZkXDBE8Ff3Eavci8\",\"NDqtX7jaEsxdBAWby\",\"skNeBwKFzeb3Wz9YR\",\"mS2oaNzM5vCgLjYu5\",\"fXfjsrGcdwpy7hedt\",\"qE2viwrEkeM95f3Ts\",\"DhQQ6fA4KS7Mof2b7\",\"Lw8oRc5SERsuntXMo\",\"CNApbsXZYYfj8GJRM\",\"3nied3n8KG8RSNixH\",\"vWgBJaEtcu3XoYuer\",\"8JyqsSbN2FJXPr3cw\",\"BQMNhNzLdgY4yajCC\",\"s5M5RvgqR9BhB9JoC\",\"fKuLXM3E32A8mWTnY\",\"ZNnsMeNkdDhHjSrZb\",\"uzwYcrm8PvfHZR7YF\",\"5dHucvf2qBYyKim7X\",\"Tb2m9eGdTuSG8RbyD\",\"RHZcTWs7asoBGydH4\",\"fznzd3qnvtbFkkizz\",\"QRRLM2KAunDa6grje\",\"Z4M3NAa4TXquMNkHe\",\"xn7uGNKeAwPEkP9oA\",\"Ecg4m7srYGgZsb4Ck\",\"nkefpk66iGg7yYb7A\",\"foytX6kH9wiSYqLtT\",\"BfwbCTRtW4wG2bsnH\",\"HF28xZKSLM9wEuqNg\",\"siKtn4x4vNM2m2QBf\",\"8sNv5PTHa7XQ8bNqR\",\"gJYuGdkXEWWmGRLzu\",\"yjtdwc2AC4jA2RWtn\",\"AasGs8AeX9Lcb9xJn\",\"GTKsdeEihE636Le9i\",\"hkiz2Nv927cYGrA86\",\"aFYzioHvZPvPaunsg\",\"2PufnQcsHsfymufX3\",\"gXTAie79kiw28tx5u\",\"pb6dyYzcRi3rTA9Lo\",\"T6iBEE2jp7f7iEF2P\",\"rhS8qXRjZcpDXkwnE\",\"DQskEvAv5KiJDPtGF\"],\"total\":114,\"quality\":[5,5,5,5]},\"flags\":0},\"subscribers\":[\"EKrSBrTXuhE3f4xsR\"],\"summary\":\"Python offers some bit operations but not bit rotation. To complete that, create a function that takes three parameters:\\n\\nn: Integer, which in binary representaion should be rotated.\\nm:  Number of rotation steps that should be performed.\\nd: Boolean value; True = rotation right, False = rotation left.\\n\\nYour function should return an integer as a result of its r\",\"tags\":[\"bit_operations\",\"strings\"],\"timestamp\":{\"$date\":1569371426131},\"title\":\"Bit Rotation\",\"isHidden\":false,\"quality\":5,\"family\":[{\"_id\":\"NgtAmTiF3sg4X2D38\",\"language\":\"cpp\"},{\"_id\":\"tNKWXJZPgRHZAc9Ja\",\"language\":\"java\"},{\"_id\":\"GAgu4fL6JY9ZnFWcd\",\"language\":\"javascript\"},{\"_id\":\"Jjbbjqm3JuA6WnPYH\",\"language\":\"python3\"},{\"_id\":\"WXxP8bN5unkyBjSze\",\"language\":\"ruby\"}]}}"]