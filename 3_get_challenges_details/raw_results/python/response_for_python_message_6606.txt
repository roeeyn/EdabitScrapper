a["{\"msg\":\"result\",\"id\":\"2011\",\"result\":{\"_id\":\"tY5fmSbk85N8digXQ\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"def ones_infection(arr):\\n\\t\",\"difficulty\":2.80188679245283,\"familyId\":\"sMWaoihJRuMKBsZkS\",\"instructions\":\"Write a function that replaces every row and column that contains at least one **1** into a row/column that is filled **entirely** with **1s**.\\n\\nSolve this **without** returning a copy of the input list.\\n\\n### Examples\\n```\\nones_infection([\\n  [0, 0, 1],\\n  [0, 0, 0],\\n  [0, 0, 0]\\n]) ➞ [\\n  [1, 1, 1],\\n  [0, 0, 1],\\n  [0, 0, 1]\\n]\\n\\nones_infection([\\n  [1, 0, 1, 0],\\n  [0, 1, 0, 0],\\n  [0, 0, 0, 0]\\n]) ➞ [\\n  [1, 1, 1, 1],\\n  [1, 1, 1, 1],\\n  [1, 1, 1, 0]\\n]\\n\\nones_infection([\\n  [0, 1, 0, 1],\\n  [0, 0, 0, 0],\\n  [0, 1, 0, 0]\\n]) ➞ [\\n  [1, 1, 1, 1],\\n  [0, 1, 0, 1],\\n  [1, 1, 1, 1]\\n]\\n```\\n\\n### Notes\\n- You must **mutate** the original matrix.\\n- Input matrices will have at least row and one column.\\n- **Bonus**: Solve this **without** using any higher-order functions.\",\"lab\":\"# Input arrays of various types \\ni1 = [\\n[0, 0, 1], \\n[0, 0, 0], \\n[0, 0, 0]\\n]\\ni2 = [\\n[1, 0, 1, 0], \\n[0, 1, 0, 0], \\n[0, 0, 0, 0]\\n]\\ni3 = [\\n[0, 1, 0, 1], \\n[0, 0, 0, 0], \\n[0, 1, 0, 0]\\n]\\ni4 = [\\n[0, 1, 0, 1, 0], \\n[0, 0, 0, 0, 0], \\n[0, 1, 1, 1, 0]\\n]\\ni5 = [\\n[1, 0, 1, 0], \\n[0, 0, 0, 0], \\n[0, 0, 0, 0]\\n]\\ni6 = [\\n[0, 0, 0, 1], \\n[0, 0, 0, 0], \\n[0, 0, 0, 0]\\n]\\ni7 = [\\n[0, 1, 1], \\n[0, 0, 0], \\n[1, 0, 0]\\n]\\ni8 = [\\n[0, 0, 0], \\n[0, 0, 0], \\n[0, 0, 0]\\n]\\ni9 = [\\n[0, 0, 0], \\n[1, 0, 0]\\n]\\ni10 = [\\n[0]\\n]\\ni11 = [\\n[1]\\n]\\ni12 = [\\n[1, 0]\\n]\\n\\n\\nTest.assert_equals(ones_infection(i1), [\\n[1, 1, 1], \\n[0, 0, 1], \\n[0, 0, 1]\\n])\\n\\nTest.assert_equals(ones_infection(i2), [\\n[1, 1, 1, 1], \\n[1, 1, 1, 1], \\n[1, 1, 1, 0]\\n])\\n\\nTest.assert_equals(ones_infection(i3), [\\n[1, 1, 1, 1], \\n[0, 1, 0, 1], \\n[1, 1, 1, 1]\\n])\\n\\nTest.assert_equals(ones_infection(i4), [\\n[1, 1, 1, 1, 1], \\n[0, 1, 1, 1, 0], \\n[1, 1, 1, 1, 1]\\n])\\n\\nTest.assert_equals(ones_infection(i5), [\\n[1, 1, 1, 1], \\n[1, 0, 1, 0], \\n[1, 0, 1, 0]\\n])\\n\\nTest.assert_equals(ones_infection(i6), [\\n[1, 1, 1, 1], \\n[0, 0, 0, 1], \\n[0, 0, 0, 1]\\n])\\n\\nTest.assert_equals(ones_infection(i7), [\\n[1, 1, 1], \\n[1, 1, 1], \\n[1, 1, 1]\\n])\\n\\nTest.assert_equals(ones_infection(i8), [\\n[0, 0, 0], \\n[0, 0, 0], \\n[0, 0, 0]\\n])\\n\\nTest.assert_equals(ones_infection(i9), [\\n[1, 0, 0], \\n[1, 1, 1]\\n])\\n\\nTest.assert_equals(ones_infection(i10), [\\n[0]\\n])\\n\\nTest.assert_equals(ones_infection(i11), [\\n[1]\\n])\\n\\nTest.assert_equals(ones_infection(i12), [\\n[1, 1]\\n])\\n\\nr1 = ones_infection(i1);\\nr2 = ones_infection(i2);\\nr3 = ones_infection(i3);\\nr4 = ones_infection(i4);\\nr5 = ones_infection(i5);\\nr6 = ones_infection(i6);\\nr7 = ones_infection(i7);\\nr8 = ones_infection(i8);\\nr9 = ones_infection(i9);\\nr10 = ones_infection(i10);\\nr11 = ones_infection(i11);\\nr12 = ones_infection(i12);\\n\\n\\n# Test for mutations only (no copies)\\nTest.assert_equals(id(i1), id(r1))\\nTest.assert_equals(id(i2), id(r2))\\nTest.assert_equals(id(i3), id(r3))\\nTest.assert_equals(id(i4), id(r4))\\nTest.assert_equals(id(i5), id(r5))\\nTest.assert_equals(id(i6), id(r6))\\nTest.assert_equals(id(i7), id(r7))\\nTest.assert_equals(id(i8), id(r8))\\nTest.assert_equals(id(i9), id(r9))\\nTest.assert_equals(id(i10), id(r10))\\nTest.assert_equals(id(i11), id(r11))\\nTest.assert_equals(id(i12), id(r12))\",\"language\":\"python3\",\"summary\":\"Write a function that replaces every row and column that contains at least one 1 into a row/column that is filled entirely with 1s.\\n\\nSolve this without returning a copy of the input list.\\n\\nExamples\\nones_infection([\\n  [0, 0, 1],\\n  [0, 0, 0],\\n  [0, 0, 0]\\n]) ➞ [\\n  [1, 1, 1],\\n  [0, 0, 1],\\n  [0, 0, 1]\\n]\\n\\nones_infection([\\n  [1, 0, 1, 0],\\n  [0, 1, 0, 0],\\n  [0, 0, 0,\",\"tags\":[\"arrays\",\"language_fundamentals\"],\"timestamp\":{\"$date\":1557257656715},\"title\":\"Infection of the Ones\",\"stats\":{\"completed\":{\"total\":109,\"ratings\":[3,3,3,3,3,3,3,3,3,3,3,4,3,3,5,0,3,4,4,3,2,0,1,2,3,4,4,4,2,4,4,2,2,4,4,4,5,2,4,5,1,5,3,2,3,3,1,2,4,2,5,3,2,5,3,4,5,3,2,4,3,3,3,2,3,5,1,2,5,1,4,3,3,3,0,2,4,1,2,4,3,0,3,3,3,3,3,2,4,1,2,1,4,4,1,1,1,4,2,3,0,2,3,0,4,0],\"rators\":[\"mNMQvcxKSSvqqMYCH\",\"tAF9Gf6PiGogbZuWs\",\"yZvzB3qFb8pkHy4dg\",\"gb9rvGus2Jv7bjZSs\",\"nrA8Pacm3A6GqGzq4\",\"aW2AfRdBxWt3K9AaH\",\"WEsTtgWsLWeYmryTR\",\"BoqELuXYpWrnwZewz\",\"6W2GSzrYjMD9ANBFY\",\"qaR8DnWrTk8Mus5Q2\",\"8JyqsSbN2FJXPr3cw\",\"ab7BsQuhDo3QgE6bh\",\"AdpjH99CAHmMNNzXf\",\"AYaEkTWLMmfzpwejr\",\"PFjMZGHNAPTkgd7tq\",\"BFNm9gacwba9KyLFW\",\"cmwasetrBzbwJQbks\",\"3ifAHQzsMasfQySoL\",\"sPkiKqgdEPawiNWrK\",\"hrzGaJc9KZqgjAvew\",\"fAoLuqbGvHn4w2PHf\",\"HqmxnQJM66Y57twhn\",\"Jqk2uJZZxEv5wZFze\",\"EQbnbkkPYtGxiviTp\",\"8PwfYqoDQFThzNtvf\",\"s5M5RvgqR9BhB9JoC\",\"S6Zd8mPuvhuh3MFRt\",\"bLpgu8xTdpDPFSAsM\",\"aEm3Wvj2rFYRL8Lrb\",\"9uZpgAtSuPZ7W7DL6\",\"mkde7ka8xgYrXdukY\",\"SNiXMrGpyjDGPaaeG\",\"DryNRN98Dj24BpgrL\",\"J6JFEBRDvRhendwKq\",\"8Tikd2acFcCBT8YeQ\",\"Fbynp7a5PvdZLowY3\",\"kFnRC7ERm6t9G6YFx\",\"KbgAkqksEQ2aaagZh\",\"CNApbsXZYYfj8GJRM\",\"vsE62YBA9NpMFBNiw\",\"iTxfDAyC4ymrz2XFv\",\"kyfLYgQHBQxw2JPZ9\",\"Z638r8eyyCAFQionR\",\"PTim3WupE5rNuQJgQ\",\"Cc2Cgj4MWXZxsTooC\",\"23oi2a3vQwhtLEbSj\",\"hS8WBiFoAjP5Js6Wv\",\"f4T9LeMPCsAfbY68N\",\"XtRDtnH9Xu5yQRN5j\",\"pHpGCimfadYznq5Wb\",\"4oj74SdrYfpJgEAmd\",\"vvQHxayds7X8qf9Sk\",\"FHSJnAYTbcsKFgeQa\",\"ckHFA5y8pkrXbsevA\",\"BXPLRXsvSyA2xZBLJ\",\"RiwS9QTek4bMS3wtA\",\"kXEfD7xxEyWd7oxxL\",\"wPxeazAYct9gG2eRM\",\"DwetpbChQM4r6Gwah\",\"aCNWav8S8Try9RkC6\",\"YsAz93yZw8KKPupKv\",\"dNBGNMKLZam4bvHuZ\",\"AtwHFFqmXCEXoPg2g\",\"mhwJATYEcAEQ8Bmeb\",\"ZatR59KfT8s4Z3JTQ\",\"Ccw6oYCEjrcrWBnH7\",\"vTfyrr4pGddp8rbXc\",\"YRstQuthRkFeBiXug\",\"m4taAgaxZCTTYMhFr\",\"KXnxMWSphrE8hsvyG\",\"7djAghy9fBhtLnKw3\",\"AasGs8AeX9Lcb9xJn\",\"AGNX2Wynh3dNrvxfy\",\"aYuKFKSE7oKvBGHKr\",\"mDWNyaaQ9hvPCRzSd\",\"uw8E83imJYpQiiPpP\",\"ZNnsMeNkdDhHjSrZb\",\"ACEZh39brWjdGkZXb\",\"k5mp7Hkg8w5rwiXpe\",\"fznzd3qnvtbFkkizz\",\"Ecg4m7srYGgZsb4Ck\",\"x4dfavjLEcrvAF3QQ\",\"orFLgPDw9H5MDzmwo\",\"xn7uGNKeAwPEkP9oA\",\"f2BoqyCpgnmjEjLqx\",\"HF28xZKSLM9wEuqNg\",\"tkdRHAExhDq8ryDJT\",\"yTtSCvGPyYna6JuRC\",\"iS5BrkGLzJyPK7nKt\",\"8sNv5PTHa7XQ8bNqR\",\"d8qtzoLB264iP8tdY\",\"eHcgvkTGsH7ZziqBo\",\"p8qqFdJ3FSk5x9z3G\",\"iojEnnY9FsMfYzp6f\",\"J3upzLHuEwXH7Z2hx\",\"9kkK4JAjYqsxivpQH\",\"gJYuGdkXEWWmGRLzu\",\"yjtdwc2AC4jA2RWtn\",\"CZeLyDD2BQL3jrzzj\",\"yr822PZmmiDDenxpB\",\"GTKsdeEihE636Le9i\",\"2PufnQcsHsfymufX3\",\"gKnWjDjwrJh7MK2df\",\"DQskEvAv5KiJDPtGF\",\"n2qKKxomPnb4zez5M\"],\"quality\":[5,5,5,5,5,5,4,5]},\"tests\":{\"score\":0,\"rators\":[\"mNMQvcxKSSvqqMYCH\"]},\"instructions\":{\"score\":0,\"rators\":[\"mNMQvcxKSSvqqMYCH\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.875,\"family\":[{\"_id\":\"7jGPAFMCqX9ZSs8NT\",\"language\":\"cpp\"},{\"_id\":\"wtPATmEY9xQCpzWNT\",\"language\":\"javascript\"},{\"_id\":\"tY5fmSbk85N8digXQ\",\"language\":\"python3\"},{\"_id\":\"Seq6MJFy86S6F4Hew\",\"language\":\"ruby\"}]}}"]