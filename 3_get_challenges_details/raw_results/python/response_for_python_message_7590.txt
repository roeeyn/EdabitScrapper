a["{\"msg\":\"result\",\"id\":\"2500\",\"result\":{\"_id\":\"H2NCAro2tdbGavzg7\",\"author\":\"Luis Pereira\",\"authorId\":\"aEm3Wvj2rFYRL8Lrb\",\"code\":\"def password_checker(txt):\\n\\t\",\"difficulty\":5,\"familyId\":\"LQeCv8H3XDZdc373J\",\"instructions\":\"A password is considered **strong** if all the following conditions are met:\\n\\n1. It has at least 8 characters and at most 20 characters.\\n2. It contains at least one lowercase letter, one uppercase letter and one digit.\\n3. It must NOT contain three repeating characters in a row (e.g. \\\"...aaa...\\\" is weak, but \\\"...aa...a...\\\" is strong, assuming other conditions are met).\\n\\nWrite a function that takes a string `txt` and return the **MINIMUM** change required to make it a strong password. If it's already strong, return `0`.\\n\\n### Examples\\n```\\npassword_checker(\\\"Edabit!\\\") ➞ 1\\n# 7 characters total, need to add one more digit for a strong password.\\n# 1 minimum change.\\n\\npassword_checker(\\\"edabit1!\\\") ➞ 1\\n# 8 characters total, need to add an uppercase letter.\\n# 1 minimum change.\\n\\npassword_checker(\\\"EDABITEDABITEDABITEDA\\\") ➞ 3\\n# 21 characters total, only uppercase letters, need to delete one\\n# character and replace two characters, 1 with a digit, 1 with a\\n# lowercase letter.\\n# 3 minimum changes.\\n\\npassword_checker(\\\"Edaaaabit!!1\\\") ➞ 1\\n# Contains more than 3 repeating characters in a row - \\\"aaaa\\\", need\\n# to replace an \\\"a\\\" with a different character (e.g. \\\"a3aa\\\" or in some\\n# cases add a character in the middle \\\"aa2aa\\\".\\n# 1 minimum change.\\n\\npassword_checker(\\\"000aaaBBBccccDDDDeeeee\\\") ➞ 6\\n# 22 characters, and 6 sets of repeating characters.\\n# 2 characters need to be removed, and one change is needed in each set.\\n# removing one 0 and one a, and replacing one of the middle characters\\n# in each of the four BBB,cccc,DDDD,eeeee blocks does the trick\\n# 6 minimum changes.\\n```\\n\\n### Notes\\n- Insertion, deletion or replacement of any one character is considered one change.\\n- Spaces will be ignored for this challange.\",\"isHidden\":false,\"lab\":\"# Original JavaScript challenge by DanielosC\\nTest.assert_equals(password_checker('Edabit!'), 1)\\nTest.assert_equals(password_checker('edabit1!'), 1)\\nTest.assert_equals(password_checker('EDABITEDABITEDABITEDA'), 3)\\nTest.assert_equals(password_checker('Edaaaabit!!1'), 1)\\nTest.assert_equals(password_checker('Edab1111111t!!!'), 3)\\nTest.assert_equals(password_checker('1234'), 4)\\nTest.assert_equals(password_checker('1234ABCD'), 1)\\nTest.assert_equals(password_checker('ilikeapples'), 2)\\nTest.assert_equals(password_checker('password1234'), 1)\\nTest.assert_equals(password_checker('passAword123B!2%##4'), 0)\\nTest.assert_equals(password_checker('S$t@r1o2n3gPas3swrd'), 0)\\nTest.assert_equals(password_checker('!!2aEd'), 2)\\nTest.assert_equals(password_checker('Arewehumanorarewecoders?'), 5)\\nTest.assert_equals(password_checker('RosesAreRedVioletsAreBlue'), 6)\\nTest.assert_equals(password_checker('Unexpected\\\"{\\\"OnLine32'), 1)\\nTest.assert_equals(password_checker('ICanTypeAnythingHereAndGetAwayWithIt'), 17)\\nTest.assert_equals(password_checker('orcani?'), 2)\\nTest.assert_equals(password_checker('ULTRAstrongP455w0rdthatstoolong'), 11)\\nTest.assert_equals(password_checker('7777777777777777777777777'), 11)\\nTest.assert_equals(password_checker('aaaaaaaaaaaaaaaaaaaaaaa'), 9)\\nTest.assert_equals(password_checker('aaaaaaaa'), 2)\\nTest.assert_equals(password_checker('LLLLLLLLLLLLLLLLLLLL'), 6)\\nTest.assert_equals(password_checker(''), 8)\\n\\n# Additional tests not in the original challenge\\n# (this should be where things get spicy)\\n# These all require carefully choosing which characters to delete\\n# so as to minimize the number of replacements needed in each block\\n# of repeated characters, just as in the last example in the instructions\\nTest.assert_equals(password_checker('000aaaBBBccccDDDDeeeee'), 6)\\nTest.assert_equals(password_checker('000000aaaaaaBBBBBBcccccc'), 8)\\nTest.assert_equals(password_checker('0000000aaaaaaaBBBBBBBccccccc'), 12)\\nTest.assert_equals(password_checker('0000000aaaaaaaBBBBBBB'), 7)\\nTest.assert_equals(password_checker('00000000aaaaaaaaBBBBBBBB'), 9)\\nTest.assert_equals(password_checker('000000000aaaaaaaaaBBBBBBBBB'), 12)\\nTest.assert_equals(password_checker('000aaaaBBBBBcccccc2222'), 6)\\nTest.assert_equals(password_checker('000aaaaBBBBBcccccc2222dd'), 7)\\nTest.assert_equals(password_checker('0aaBBBcccc22222dddddd4444444'), 11)\",\"language\":\"python3\",\"summary\":\"A password is considered strong if all the following conditions are met:\\n\\nIt has at least 8 characters and at most 20 characters.\\nIt contains at least one lowercase letter, one uppercase letter and one digit.\\nIt must NOT contain three repeating characters in a row (e.g. \\\"...aaa...\\\" is weak, but \\\"...aa...a...\\\" is strong, assuming other conditions are met).\\n\\nWri\",\"tags\":[\"logic\",\"numbers\",\"higher_order_functions\",\"functional_programming\"],\"timestamp\":{\"$date\":1595716216175},\"title\":\"Strong Password Checker\",\"stats\":{\"completed\":{\"total\":6,\"ratings\":[5,5,5,5,5,5,5,5,5,5,5],\"rators\":[\"aEm3Wvj2rFYRL8Lrb\",\"vTfyrr4pGddp8rbXc\",\"8PwfYqoDQFThzNtvf\",\"s5M5RvgqR9BhB9JoC\",\"yjtdwc2AC4jA2RWtn\",\"iS5BrkGLzJyPK7nKt\"],\"quality\":[]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":0,\"family\":[{\"_id\":\"wSo3ozqxsfWAeSFWR\",\"language\":\"cpp\"},{\"_id\":\"DHXAMErsWL4y98hH6\",\"language\":\"javascript\"},{\"_id\":\"H2NCAro2tdbGavzg7\",\"language\":\"python3\"},{\"_id\":\"HEZ6RW94LR3rgK7vq\",\"language\":\"ruby\"}]}}"]