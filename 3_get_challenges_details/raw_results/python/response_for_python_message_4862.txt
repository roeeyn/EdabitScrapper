a["{\"msg\":\"result\",\"id\":\"1147\",\"result\":{\"_id\":\"yFEMocjdiRjPhoDqv\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"def prime_in_range(n1, n2):\\n\\t\",\"difficulty\":1.6025641025641026,\"quality\":4.745762711864407,\"familyId\":\"3Wi4G53YsY29spEns\",\"instructions\":\"Create a function that returns `True` if there's at least one prime number in the given range (`n1` to `n2` (inclusive)), `False` otherwise.\\n\\n### Examples\\n```\\nprime_in_range(10, 15) ➞ True\\n# Prime numbers in range: 11, 13\\n\\nprime_in_range(62, 66) ➞ False\\n# No prime numbers in range.\\n\\nprime_in_range(3, 5) ➞ True\\n# Prime numbers in range: 3, 5\\n```\\n\\n### Notes\\n- `n2` is always greater than `n1`.\\n- `n1` and `n2` are always positive.\\n- 0 and 1 aren't prime numbers.\",\"isHidden\":false,\"lab\":\"num_vector, res_vector = [[10, 12], [62, 66], [441, 445], [0, 2], [20, 22], [4444, 5555], [114, 120]], \\\\\\n                        [True, False, True, True, False, True, False]\\nfor i, x in enumerate(num_vector): Test.assert_equals(prime_in_range(*x), res_vector[i])\",\"language\":\"python3\",\"summary\":\"Create a function that returns True if there's at least one prime number in the given range (n1 to n2), False otherwise.\\n\\nExamples\\nprimeinrange(10, 15) ➞ True\\nPrime numbers in range: 11, 13\\n\\nprimeinrange(62, 66) ➞ False\\nNo prime numbers in range.\\n\\nprimeinrange(3, 5) ➞ True\\nPrime numbers in range: 3, 5\\n\\nNotes\\nn2 is always greater than n1.\\nn1 and n2 are always p\",\"tags\":[\"algebra\",\"algorithms\",\"math\",\"numbers\"],\"timestamp\":{\"$date\":1600702585447},\"title\":\"Any Prime Number in Range\",\"stats\":{\"completed\":{\"total\":141,\"ratings\":[1,1,1,1,1,1,1,2,3,2,2,2,2,1,2,1,2,1,2,2,2,0,0,1,1,1,2,3,3,2,2,0,2,2,1,0,5,2,1,0,0,2,2,2,0,5,0,2,0,2,2,0,2,1,2,2,2,2,2,4,2,1,1,1,2,1,2,2,1,4,2,2,2,1,2,1,2,1],\"quality\":[5,5,5,3,5,5,4,5,5,5,4,5,5,2,5,4,4,5,4,5,4,5,5,5,5,5,4,5,5,4,5,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,5,5,5,5,5,5,5,5,5],\"rators\":[\"a777e8chPvJkY3tKa\",\"gb9rvGus2Jv7bjZSs\",\"gJYuGdkXEWWmGRLzu\",\"J3upzLHuEwXH7Z2hx\",\"eZ5mW4WeS5vdbAF9Q\",\"aEm3Wvj2rFYRL8Lrb\",\"tAF9Gf6PiGogbZuWs\",\"oBcs8GLX2ZFLXQy8y\",\"HF28xZKSLM9wEuqNg\",\"qD2LrwaDrSdiybLKY\",\"8JyqsSbN2FJXPr3cw\",\"xn7uGNKeAwPEkP9oA\",\"QRv96jmNaYsWkxQEG\",\"5HCu9Ydd86QgHDRNP\",\"H4abACFDH5t8CnnyH\",\"gXTAie79kiw28tx5u\",\"FEYpu9RWysAgW3XnP\",\"DPi9QGLctq2y76KuE\",\"8PwfYqoDQFThzNtvf\",\"zd9FLSzsGz3evKafy\",\"DEDniTrstQYGounXT\",\"p8qqFdJ3FSk5x9z3G\",\"2QGRoQn2dRq3scu7k\",\"9CoqdidjM9KbeKnHY\",\"SKeSSfqSmCk65vjYh\",\"tpxMgkGSHwBjS95Ta\",\"yjtdwc2AC4jA2RWtn\",\"kXEfD7xxEyWd7oxxL\",\"orFLgPDw9H5MDzmwo\",\"dj5AyG5fWP8FdsSmZ\",\"jNvegJWCk5HCtEMbK\",\"3LiSLdtN58n46NEqg\",\"cAP3n5NY64uoMwzRR\",\"M8dQuMrEpP8Hc3tHN\",\"DxxNN37iEz7b8t2nf\",\"iS5BrkGLzJyPK7nKt\",\"d8qtzoLB264iP8tdY\",\"dBzwBtRjZqB98DJeB\",\"R29kgJ9M7R4qqwjcE\",\"s5M5RvgqR9BhB9JoC\",\"Lm6ChQCWBmaikmk5J\",\"zZDaXBxMzTCBhNkgL\",\"PXAcsKkssS2yLyDv2\",\"w2HhxvSLmDhaGCAjE\",\"xdgy7nWSKCekXnaJM\",\"cR3ibTMxLyEdDFCHY\",\"Yp7uvStL97cC9fKkY\",\"spqXrjG3ZFa2j5uTR\",\"dYPkStFnLvAMsHSzZ\",\"9FCeFzjPA4jrQ7oHW\",\"wRttWTM59y8m5mx7x\",\"RGMbFMZXJr7DhcAJy\",\"8fZxjQfuXw5HMSRJM\",\"kxKR2bx7DrNDPqJPz\",\"KEmTti9Tza8A2FLQW\",\"KJCDwGkoXh8qtbbKr\",\"5XiuAqicKD4hBdu63\",\"TxsYMnonbDnTQ8XDf\",\"JS3hNM3XXkxPdg3yk\",\"kNrnnMxhFZztMTBAX\",\"5hQnRWiKkhgKJXNMP\",\"zSXaoNJKnxytvtFMb\",\"DpnYcMphntjsQ96qg\",\"oriWwkSDoejDH9ru5\",\"Jqk2uJZZxEv5wZFze\",\"YRAzEBJoLvSaiPtYx\",\"HuNF3xTBzmatyGSTm\",\"6428wKHtwKkFdvBs5\",\"axdSNLZpiCDF8RS6n\",\"J5T8gZqiZXFuFDTQ7\",\"buX4mCQhtXCfBjeno\",\"LQxof8pGabGuWP7Gn\",\"2H7qphwdz7PPoFKgc\",\"Z85ajWfZ4jDPkbvR4\",\"R4SjTgDnpigJYDLyL\",\"AXcnPX68zdMiLNSmu\",\"HqmxnQJM66Y57twhn\",\"5S9nX4rKsnCcnv4Cz\",\"sHjfbGQGLHE6JR6qu\",\"eYfPWvZwnJQkHbSTK\",\"srJ34BaybkQh3qRkM\",\"GGdmhAvxXhqhhibJN\",\"q2tzvkrLASvSjkek9\",\"MXGuntvz3byrP6WJc\",\"Ds7L5bksw2QRHjrKL\",\"9pzFiFK3ANLjQfnr2\",\"mfsaETo7uA4x5vqLD\",\"CHvzhtXnv8HTbPQ56\",\"YcCLwitFMAEJSnxAW\",\"iojEnnY9FsMfYzp6f\",\"3cF6NXq3ZEwdkgSjb\",\"eMuCpJ2spXWkJjWNz\",\"qAby4AWXmTNeusvg3\",\"JhX7jvtpwNyxcc39m\",\"Wpn95NqWxncQrwNgz\",\"T6iBEE2jp7f7iEF2P\",\"66a9xX73nmTEuKs9k\",\"PC3pLs36zNzpRDSuE\",\"yod5YhKtPqw2GfG9B\",\"8BFSTCnoe2QggN64c\",\"NQQzu4wyLWW9faWtK\",\"vRXuYYBNuHEQ29fbm\",\"yr822PZmmiDDenxpB\",\"BrTDhPJcACL2bsrpJ\",\"W94qNHzKN8iuuWm6N\",\"mcnTo3PeaX8hDYtsS\",\"AjaG3NJbME88Zg3n6\",\"AFfw7cGg83uYk2Miy\",\"9Ly8afdtofp8DXzrt\",\"mvJBakQ35CWAnbbEZ\",\"AasGs8AeX9Lcb9xJn\",\"Yf4L2ydef9zmSKnqP\",\"XPKNsEdkvigx4eX6o\",\"KH4Wr3YSvNddCSRJ2\",\"Afnps7TJQuS9sipMb\",\"BdnE4RS5puoxo92mA\",\"9bQyb6rW7xfE4vgrR\",\"dzS6WBTMHyFEag6Fp\",\"2PufnQcsHsfymufX3\",\"rhS8qXRjZcpDXkwnE\",\"d9LBRxvADNBB5QJMB\",\"4TmgHkn5vqyHK3sYC\",\"u5u2YpHXiNgzDNJdX\",\"cWB2wnn3fpbwtKJXe\",\"2RapTfFSRMqJ2k7A8\",\"SEerPuQRh8ctQYXT2\",\"MyGNWWyX9yYueTyBz\",\"bLddgnAy6QgLtZyQ6\",\"MKT7khMBGXzA22ykf\",\"oG6ogzo5692C8eFay\",\"reNwCbDbpcz6bdTxz\",\"Wi4H6ayKsNDWWQCG5\"]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"NjJ9gGNPGaQGxTxCc\",\"language\":\"java\"},{\"_id\":\"mLLqf6apACKBLF3Pe\",\"language\":\"javascript\"},{\"_id\":\"yFEMocjdiRjPhoDqv\",\"language\":\"python3\"},{\"_id\":\"HtygcuDyqKXP7sKCM\",\"language\":\"ruby\"}]}}"]