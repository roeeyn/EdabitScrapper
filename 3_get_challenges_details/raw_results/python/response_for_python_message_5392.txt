a["{\"msg\":\"result\",\"id\":\"1409\",\"result\":{\"_id\":\"vBwRuR4mF5yQ4cNuc\",\"author\":\"SpanTag\",\"authorId\":\"ekvdWQoiFkX5cQbk9\",\"code\":\"def count_missing_nums(lst):\\n\\t\",\"difficulty\":2.0419847328244276,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"reLrY5Ya8kGdfqNTe\",\"instructions\":\"Create a function that takes a list of \\\"mostly\\\" numbers, counts the amount of missing numbers and returns their sum. Watch out for strings!\\n\\n### Examples\\n```\\ncount_missing_nums([\\\"1\\\", \\\"3\\\", \\\"5\\\", \\\"7\\\", \\\"9\\\"]) ➞ 4\\n# 1+1+1+1\\n\\ncount_missing_nums([\\\"7\\\", \\\"3\\\", \\\"1\\\", \\\"9\\\", \\\"5\\\"]) ➞ 4\\n\\ncount_missing_nums([\\\"1\\\", \\\"5\\\", \\\"B\\\", \\\"9\\\", \\\"z\\\"]) ➞ 6\\n```\\n\\n### Notes\\nThe data might be dirty! Clean out any filthy strings.\",\"isHidden\":false,\"lab\":\"Test.assert_equals(count_missing_nums(['1', '3', '5', '7', '9']), 4)\\nTest.assert_equals(count_missing_nums(['7', '3', '1', '9', '5']), 4)\\nTest.assert_equals(count_missing_nums(['10', '20', '30', '40', '50']), 36)\\nTest.assert_equals(count_missing_nums(['1', '78', 'B', '9', 'z']), 75)\\nTest.assert_equals(count_missing_nums(['95', '96', '97', '98', '99']), 0)\\nTest.assert_equals(count_missing_nums(['45', 'EDABIT', '56']), 10)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,3,2,2,1,2,3,1,2,2,3,2,4,3,1,1,0,2,1,0,1,4,3,3,2,1,2,2,3,2,2,1,4,1,2,3,1,1,2,2,3,3,3,1,0,0,2,1,1,1,3,3,2,2,2,2,3,3,2,2,3,4,3,3,3,2,2,1,2,0,3,2,2,2,1,2,1,1,3,2,3,3,2,3,0,1,0,2,2,3,0,2,1,2,2,1,3,3,3,3,0,3,3,2,3,3,3,2,3,3,1,2,3,1,3,3,3,2,3,1,2,1,1,2,2,1,3,3,3,2,1,1,2,3,1,1,2,2,3,2,3,2,3,1,2,1,2,2,3,1,3,0,0,2,3,1,2,2,2,3,1,3,2,3,2,2,3,3,2,3,2,3,4,3,3,0,0,1,3,2,3,3,3,1,3,3,3,0,2,3,3,2,0,1,2,2,3,3,2,1,1,3,0,2,3,2,2,2,1,2,1,3,2,2,2,5,0,3,2,2,0,2,3,2,0,1,2,3,2,1,2,3,4,0,2,3,2,0,3,2,2,1,3,2,3,0,3,2,2,3,2,3,2,2,3,3,2],\"rators\":[\"ekvdWQoiFkX5cQbk9\",\"u5u2YpHXiNgzDNJdX\",\"2fxapKr8XGdNeaKi2\",\"tAF9Gf6PiGogbZuWs\",\"5Zq3aGdvh4LHBvnJL\",\"K96FwtfDDN5WM4Bb7\",\"8PwfYqoDQFThzNtvf\",\"8JyqsSbN2FJXPr3cw\",\"Jqk2uJZZxEv5wZFze\",\"6ShafRStcvew4GfCh\",\"aW4DkonHaJw6Q8PyP\",\"RiA6dZnhNC8QMf39C\",\"9Gf6g4fuKc3uou9w2\",\"HqmxnQJM66Y57twhn\",\"gb9rvGus2Jv7bjZSs\",\"gMJhLdyw3tH7L96X2\",\"yoYQqaY6GszuTkNSs\",\"s5M5RvgqR9BhB9JoC\",\"ouPtoRyNq8hKH2WkT\",\"hAzy9apJgLWwRFGPJ\",\"vgTvCCxgvbCTDvaRT\",\"6ZXYTAfkYvbNK3JaR\",\"s4zPi3rSJrG5ruYv7\",\"YTwwSYtqudH2JnrBX\",\"XbwyB44kHPnRgQcrB\",\"XjyaCd8bviTitHTwa\",\"TePz42wc3ZZ5CKA6L\",\"Y8vRjszbgZxXai4nZ\",\"RnbpYh3GKbdBewLc7\",\"7hzSvcYdq6QjoRnJY\",\"FgkYtHLxeD8pETJ8T\",\"ydEdzuCCZt4yny9Rq\",\"J5T8gZqiZXFuFDTQ7\",\"C4QntmkYtB89GNtpd\",\"9sfzBRx9q3nn92sbK\",\"mtRvHDpeLoSGBf8zC\",\"kBmhcwkCqxiy4GwiZ\",\"PT5pu7kJsgp9TDNGv\",\"HQxp7NcdvF92G7bYS\",\"ZauXkDfNKEc6E3869\",\"5PMNRxiLifJLBM9dT\",\"ZE5TjKG5Sz6nA45Sy\",\"xowjbn5yEv7c93axA\",\"kQH5b8MXJunh84Czq\",\"ab7BsQuhDo3QgE6bh\",\"yKttxy9JGn5Jzwuj6\",\"kP2C2Ye5H6WoTodFN\",\"3ECpdeExhBmkYXtba\",\"xxxhm6QEkRpah4k94\",\"CuY5BaTCcu7Mp9tDu\",\"ftRou9zcw69GCx4iv\",\"WKsvry6M74GDrtqHQ\",\"2innwjWqxJHo4eRGh\",\"mZnXCe6hcnbv3DNvp\",\"SPbZFbfgmG6TPsgpt\",\"Z85ajWfZ4jDPkbvR4\",\"sXs4Dvtk8Pvn2t9ZP\",\"T9WcjJPEu3rcTsKbF\",\"jHhjzHgFhzGRj3YDK\",\"iMHrN3Wiefh9Ame38\",\"omQhBXTwsBMv6kgz4\",\"CNbfRkjBfgk3td6Ef\",\"5uA8xmgifmiJrqbzy\",\"LQxof8pGabGuWP7Gn\",\"PytNZK9mNiRiZxPrm\",\"AasGs8AeX9Lcb9xJn\",\"Yp7uvStL97cC9fKkY\",\"yZvzB3qFb8pkHy4dg\",\"wZoxzQDbso9SMAPkY\",\"T2vhHPhRR96hRizq8\",\"WLFPvm65aHfgwQy7N\",\"4CFzv558qbGcpQwc4\",\"pmgFEciNrd3ES9tuu\",\"aCNWav8S8Try9RkC6\",\"BeFnbPbMnAM2SjBdZ\",\"sJWTa7iWeRoRtqJ8N\",\"Q2q7wd5e5cfCrwPxq\",\"Jg8ZSRXe3NoDMCqGu\",\"vJS2qEPc3Psk9nSpH\",\"aEm3Wvj2rFYRL8Lrb\",\"Z4Wd4iFu5mdjSJDSA\",\"iQDJebZbrW5QWBbs3\",\"w3A7cBWyAfukk6xEQ\",\"euPBBaYXyS8RBr9KB\",\"v9KtC8YLbMWmXiW2H\",\"mDWNyaaQ9hvPCRzSd\",\"cR3ibTMxLyEdDFCHY\",\"fXfjsrGcdwpy7hedt\",\"v3fjGuc7Pq4yjFygS\",\"vLrq4dEDMM2wd68Dc\",\"rgrr54ZaXdu5sfkCn\",\"vWgBJaEtcu3XoYuer\",\"orFLgPDw9H5MDzmwo\",\"23oi2a3vQwhtLEbSj\",\"aoRaYQZEQPrJT22wX\",\"9pzFiFK3ANLjQfnr2\",\"dXMbkgQFoN37BhruB\",\"3CddxEkvCvRoCLQ7b\",\"Zhy5X7BZnqk8hacEw\",\"SncRrBzRiyKRFJm8e\",\"kXEfD7xxEyWd7oxxL\",\"qgYikiD7WB8JciTdo\",\"SBoDxhFzmTha4YeMe\",\"5nY48krepaT4a4QTN\",\"n2BRY9X8899dcG8Bw\",\"M9DhkxE77ztbJWz6e\",\"44dAzThMuyGZ5StXB\",\"Cc2Cgj4MWXZxsTooC\",\"sz8ufn9i8zeiGWpAy\",\"q6veqifJDaSqcGmNt\",\"ZNnsMeNkdDhHjSrZb\",\"6rTmpHrvXiSWitRrY\",\"3Zceb8GudqAG3onG3\",\"CEd9tLdXeDeNHSzys\",\"gJYuGdkXEWWmGRLzu\",\"YRstQuthRkFeBiXug\",\"itDTNAvHdhpXPhg6D\",\"LmTRmhiuDidAebAsw\",\"kYWb8BwpKwunQkxeX\",\"RcFJfYquW9quJDnp5\",\"EjbDDFRECrzQDkzrX\",\"4RY3zj9C2t8GGefhi\",\"3LiSLdtN58n46NEqg\",\"nPfdEqn8RZmDzAeMW\",\"JQ5uoxA4WZgN6HyJk\",\"yYxPzFqBgtQ9fsyHM\",\"4BHrt3NoCQECjvFJC\",\"XsYhWtDMoky3nAhjd\",\"uMLsCftXNbvx6pcGA\",\"zChStAhRfotvGC6C5\",\"3pxHTZBsv7MKzFG6Y\",\"bCDTKAoS4biDmQ64Y\",\"ekQh3jzgGLsEMbKo3\",\"YcCLwitFMAEJSnxAW\",\"KRmxvA4mWgfKvHmYN\",\"yv7c4H2jimSKHEjtG\",\"vjQizqDbKpjfHrvZA\",\"c3nsyfKKeQGxp6sKb\",\"DrkR35NqnP9NDLbq6\",\"xXxcBvT3poSuSCgBN\",\"GM2X83qnuLXTHe5zA\",\"6ZapS9L6t66jQCqxA\",\"NfMJuiBk6FN5Jc6ow\",\"HF28xZKSLM9wEuqNg\",\"MKT7khMBGXzA22ykf\",\"KdNDysEsy2TW5QRJ2\",\"rgvAJFwfCeYoYnFTK\",\"hnyhBFWwNCz9mDfSi\",\"So6PHm74mfJuY2WTs\",\"gSFJPsMXnqAog3Q9f\",\"eEK5MpDgtJyYtZzuM\",\"FRN2W8RYpJ6GPhgRy\",\"4rwxLqLs2mNZNg8NB\",\"yr822PZmmiDDenxpB\",\"6QHXQkQAcXMJ7C2kK\",\"55RQznnuTGpsj3EXd\",\"ZRxAkXjTCdyQTdSDw\",\"RErqK2yM94wYyD2hk\",\"DxxNN37iEz7b8t2nf\",\"9bQyb6rW7xfE4vgrR\",\"4LGKpgWrEJRsTXDkq\",\"2rc86eoe88DLhFeJD\",\"5s4qhuRJijYaDNXva\",\"QkbpyExhGA8ErJWhk\",\"SGhPxX5bHGL8zZqtt\",\"ENsSYogEHHeDSrFod\",\"DEDniTrstQYGounXT\",\"3hSzE837A9SKsi5X4\",\"hJSbLTTS78uHQK7u5\",\"GamaMNrnhrjj5tXTx\",\"wS2o3x4nrsadtC3xP\",\"djeesDJQwNJay4RTe\",\"p9riYAbHXwJZ9PhWf\",\"7txFzDQ43vJ7qCY88\",\"ELfyvLSAPDbhksDBb\",\"Ecg4m7srYGgZsb4Ck\",\"W5TajitmCyxz87zAC\",\"bJxaKHJqR82EWw8Su\",\"6BZMSxML2SjRgRCZn\",\"dEuJGZbBQkveCXEFk\",\"JS3hNM3XXkxPdg3yk\",\"f2BoqyCpgnmjEjLqx\",\"a777e8chPvJkY3tKa\",\"hRiMXDZNAzyPd5tpt\",\"iojEnnY9FsMfYzp6f\",\"HkRkGMGbaD8xQXomq\",\"zZDaXBxMzTCBhNkgL\",\"dzS6WBTMHyFEag6Fp\",\"GGprTwrkjuccmrQRg\",\"CwXsu25ygLEwQbmQC\",\"iS5BrkGLzJyPK7nKt\",\"KZ2xddpM2f9JRaryB\",\"qPpQfR5KyDb5Y3EFf\",\"yjtdwc2AC4jA2RWtn\",\"4ZicxybyvEsuA9iET\",\"ZrKCkX7xxGGZzauFW\",\"ji5f27FPz4wRRF6Ls\",\"H9KZi2cjt4FwH7qog\",\"9CoqdidjM9KbeKnHY\",\"p8qqFdJ3FSk5x9z3G\",\"HhYCji7QqauyN3A7v\",\"N43d68KgA2qv7Jm2Y\",\"axdSNLZpiCDF8RS6n\",\"P7NmFbCJ5offXMRvB\",\"mG8HqKiAQFTdRZthG\",\"XjajdyybZZbkz8o5x\",\"cYRbcFGcgBEhStusq\",\"4fhjJBvLBWh6QeSih\",\"QCvvnevRLhBY8XBJk\",\"dkcmCKwqApX5jBggc\",\"8fZxjQfuXw5HMSRJM\",\"abt2C3Y82RX3qbaPt\",\"xn7uGNKeAwPEkP9oA\",\"hXoTNPPmJLzkZnkSX\",\"tpxMgkGSHwBjS95Ta\",\"nc7bRhkxgKyqusYe3\",\"DPi9QGLctq2y76KuE\",\"QRv96jmNaYsWkxQEG\",\"8nE8QHnFYsHCFebte\",\"6MjSiiBLPcvXbXcaZ\",\"gXTAie79kiw28tx5u\",\"dYPkStFnLvAMsHSzZ\",\"J3upzLHuEwXH7Z2hx\",\"oBcs8GLX2ZFLXQy8y\",\"7scpcTEp3SEx5Wjg9\",\"7ifh8r4gvyYMhKB94\",\"DNACg4rcgZsPtYGZ8\",\"fznzd3qnvtbFkkizz\",\"bccs9koJxyQ9XNiLC\",\"GHEstHruhxR6kZ2cZ\",\"R29kgJ9M7R4qqwjcE\",\"fHeYpHLgzDPqcoDh6\",\"cAP3n5NY64uoMwzRR\",\"kEkNyqFARK9YBrhRx\",\"aaJWssCWfMa63XJng\",\"Nzi4RD5fxAJ4wjnNa\",\"xQ9jZmngg97XHXCq6\",\"Wv2vJnEj8ywNmARoF\",\"MXGuntvz3byrP6WJc\",\"PXAcsKkssS2yLyDv2\",\"K3RacTvkWHLfzKF8i\",\"GGdmhAvxXhqhhibJN\",\"CHvzhtXnv8HTbPQ56\",\"2QziknsznNeMPRh3g\",\"RTDx9axf52kxhFjwZ\",\"yyo6YLQN2of6fxp49\",\"FEYpu9RWysAgW3XnP\",\"9ivvGvJGvtQfigQaZ\",\"Wpn95NqWxncQrwNgz\",\"LA2YneDcbtiSj5SH6\",\"K6MfKMytoJJuSGewP\",\"2PufnQcsHsfymufX3\",\"rfyEkETeoS96QNH4e\",\"PWgzeK859suojbrRx\",\"PC3pLs36zNzpRDSuE\",\"eHcgvkTGsH7ZziqBo\",\"8BFSTCnoe2QggN64c\",\"EfxwqhYdapX3dMQC2\",\"BdnE4RS5puoxo92mA\",\"4Lwjr34ypKNQNQCar\",\"srJ34BaybkQh3qRkM\",\"3KkyQm77zsew58Dc2\",\"fbr22rabEJMfBp7vD\",\"etoxSpG4fGKThLozM\",\"ctbThYbufFCYbRK4f\",\"o4ixjQGSaYqA2JoM4\",\"T6iBEE2jp7f7iEF2P\",\"jWbd7SYDzLPjc9EDh\",\"MpfytGFYF77emJ3cT\",\"jCjCvyhqhpebkJn34\",\"8sNv5PTHa7XQ8bNqR\",\"RoGGD5cpHb4ftdLDv\",\"yod5YhKtPqw2GfG9B\",\"kjvgTyRFyKHv44DcH\",\"5HCu9Ydd86QgHDRNP\",\"Ds7L5bksw2QRHjrKL\",\"mvJBakQ35CWAnbbEZ\",\"ey3CASd6Je5LEJzfB\",\"buX4mCQhtXCfBjeno\",\"nkH3HfJXLMNcBMM79\",\"Qyfyyw6oC4EHAndzo\",\"BrTDhPJcACL2bsrpJ\",\"KfGmizjwhtMAaXspt\",\"jkbavR2ATFJcpmo8M\",\"Prj5hBTQhiJRwewJj\",\"e8nsYvyyjwb4Xd5T6\"],\"total\":318,\"quality\":[5,5,3,4,5,5,5,5,5,4,5,5,4,5,5,3,2,5,5,5,5,4,5,5,5,5,5,5,5]},\"flags\":0},\"summary\":\"Create a function that takes a list of \\\"mostly\\\" numbers, counts the amount of missing numbers and returns their sum. Watch out for strings!\\n\\nExamples\\ncountmissingnums([\\\"1\\\", \\\"3\\\", \\\"5\\\", \\\"7\\\", \\\"9\\\"]) ➞ 4\\n1+1+1+1\\n\\ncountmissingnums([\\\"7\\\", \\\"3\\\", \\\"1\\\", \\\"9\\\", \\\"5\\\"]) ➞ 4\\n\\ncountmissingnums([\\\"1\\\", \\\"5\\\", \\\"B\\\", \\\"9\\\", \\\"z\\\"]) ➞ 6\\n\\nNotes\\nThe data might be dirty! Clean out any filthy strin\",\"tags\":[\"math\",\"numbers\",\"validation\"],\"timestamp\":{\"$date\":1577405061037},\"title\":\"Count Missing Numbers\",\"quality\":4.620689655172414,\"family\":[{\"_id\":\"p9oBC7NoWGgCr7fBs\",\"language\":\"cpp\"},{\"_id\":\"5X9SgidXaNf7pikbp\",\"language\":\"javascript\"},{\"_id\":\"vBwRuR4mF5yQ4cNuc\",\"language\":\"python3\"},{\"_id\":\"ickmkCWEx2Z6ba37C\",\"language\":\"ruby\"}]}}"]