a["{\"msg\":\"result\",\"id\":\"2079\",\"result\":{\"_id\":\"ygeGjszQEdEXE8R8d\",\"author\":\"bangyen\",\"authorId\":\"yv7c4H2jimSKHEjtG\",\"code\":\"def move(mat):\\n\\t\",\"difficulty\":2.909090909090909,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"9KixpLPGrqzJGgXLz\",\"instructions\":\"Create a function which takes a parameter `mat`, where `mat` is a matrix (`list` of `list`s) such that all but one entry equals `0` (and the non-zero entry equals `1`). The function, after being passed a matrix, should be repeatedly callable with the following `str` commands:\\n\\n- `\\\"up\\\"` ➞ Move the `1` to the cell above it.\\n- `\\\"down\\\"` ➞ Move the `1` to the cell below it.\\n- `\\\"left\\\"` ➞ Move the `1` to the cell to the left of it.\\n- `\\\"right\\\"` ➞ Move the `1` to the cell to the right of it.\\n- `\\\"stop\\\"` ➞ Return the resulting matrix.\\n\\n### Examples\\n```\\none = [\\n  [1]\\n]\\n\\ntwo = [\\n  [1, 0],\\n  [0, 0]\\n]\\n\\n# Should work for 1×1 matrices\\nmove(one)(\\\"up\\\")(\\\"stop\\\") ➞ [\\n  [1]\\n]\\n\\n# The 1 should wrap around\\nmove(two)(\\\"left\\\")(\\\"stop\\\") ➞ [\\n  [0, 1],\\n  [0, 0]\\n]\\n\\n# Should accept multiple commands\\nmove(two)(\\\"right\\\")(\\\"down\\\")(\\\"stop\\\") ➞ [\\n  [0, 0],\\n  [0, 1]\\n]\\n\\n# Should return a function\\ncallable(move(two)) ➞ True\\n```\\n\\n### Notes\\n- The matrix can be of any size `m×n`, where `m ≥ 1` and `n ≥ 1`.\\n- The `1` should be able to wrap around, e.g. if the non-zero entry is at the top of the matrix, calling the command `'up'` should move it to the bottom of the matrix.\\n- The result of the original function `move` should be callable an arbitrary number of times.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"from random import randrange as rand\\n\\n# example matrices\\ndef matrix(m, n, x=0, y=0):\\n\\tm = [[0]*n for _ in range(m)]\\n\\tm[y][x] = 1; return m\\none = matrix(1, 1)\\ntwo = matrix(2, 2)\\n\\n# example tests\\nTest.assert_equals(move(one)('up')('stop'), one, 'Example 1')\\nTest.assert_equals(move(two)('left')('stop'), [\\n\\t[0, 1],\\n\\t[0, 0]\\n], 'Example 1')\\nTest.assert_equals(move(two)('right')('down')('stop'), [\\n\\t[0, 0],\\n\\t[0, 1]\\n], 'Example 2')\\nTest.assert_equals(callable(move(two)), True, 'Example 5')\\nTest.assert_equals(callable(move(two)('up')), True, 'Example 5')\\n\\n# random tests\\nfor _ in range(5):\\n\\tm,n = rand(1, 10), rand(1, 10)\\n\\tx,y = rand(n), rand(m)\\n\\tu,l = rand(20), rand(20)\\n\\tnx,ny = (x - (l % n)) % n, (y - (u % m)) % m\\n\\tmat = matrix(m, n, x, y)\\n\\tnmt = matrix(m, n, nx, ny)\\n\\ts2,s3 = '(\\\"up\\\")'*u, '(\\\"left\\\")'*l\\n\\tTest.assert_equals(eval('move(mat)%s%s(\\\"stop\\\")' % (s2, s3)), nmt, 'up - %s, left - %s' % (u, l))\\nfor _ in range(5):\\n\\tm,n = rand(1, 10), rand(1, 10)\\n\\tx,y = rand(n), rand(m)\\n\\td,r = rand(20), rand(20)\\n\\tnx,ny = (x + (r % n)) % n, (y + (d % m)) % m\\n\\tmat = matrix(m, n, x, y)\\n\\tnmt = matrix(m, n, nx, ny)\\n\\ts2,s3 = '(\\\"down\\\")'*d, '(\\\"right\\\")'*r\\n\\tTest.assert_equals(eval('move(mat)%s%s(\\\"stop\\\")' % (s2, s3)), nmt, 'down - %s, right - %s' % (d, r))\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,1,3,3,0,3,3,3,3,4,5,3,3,5,4,4,3,4],\"rators\":[\"yv7c4H2jimSKHEjtG\",\"2innwjWqxJHo4eRGh\",\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\",\"ZNnsMeNkdDhHjSrZb\",\"AasGs8AeX9Lcb9xJn\",\"uGuS9YRXW2nj4p6zf\",\"pPmDX5WEA6wXvAmrt\",\"n2BRY9X8899dcG8Bw\",\"xn7uGNKeAwPEkP9oA\",\"4fhjJBvLBWh6QeSih\",\"8sNv5PTHa7XQ8bNqR\",\"h4x2jaMdj5aQZbW5g\",\"iojEnnY9FsMfYzp6f\",\"2PufnQcsHsfymufX3\",\"s5M5RvgqR9BhB9JoC\",\"FvHwg9nTDqmaDBrvP\"],\"total\":20,\"quality\":[]},\"flags\":0},\"summary\":\"Create a function which takes a parameter mat, where mat is a matrix (list of lists) such that all but one entry equals 0 (and the non-zero entry equals 1). The function, after being passed a matrix, should be repeatedly callable with the following str commands:\\n\\n\\\"up\\\" ➞ Move the 1 to the cell above it.\\n\\\"down\\\" ➞ Move the 1 to the cell below it.\\n\\\"left\\\" ➞ Move th\",\"tags\":[\"arrays\",\"closures\",\"functional_programming\"],\"timestamp\":{\"$date\":1592098245627},\"title\":\"Matrix Movement\",\"quality\":0,\"family\":[{\"_id\":\"ygeGjszQEdEXE8R8d\",\"language\":\"python3\"},{\"_id\":\"8bQtjAw9ZP3Ybp74M\",\"language\":\"ruby\"}]}}"]