a["{\"msg\":\"result\",\"id\":\"2366\",\"result\":{\"_id\":\"4eRim6495deGXZrgF\",\"author\":\"zatoichi49\",\"authorId\":\"tAF9Gf6PiGogbZuWs\",\"code\":\"def column_chart(productA, productB, target):\\n\\t\",\"difficulty\":3.869565217391304,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"JBzsHHiHJFYpKDR2d\",\"instructions\":\"Given three lists (daily sales of product A, daily sales of product B, daily sales targets), return a string representing a *stacked column chart* of the total sales (with targets) for each day of the week.\\n\\n- All sales are rounded to the nearest 10 units.\\n- Each column uses \\\"+\\\" for product A, \\\"*\\\" for product B, and an underscore (\\\"_\\\") for the target line.\\n- The y-axis shows the total sales (the maximum combined sales will be 80).\\n- The x-axis shows the first two letters of each day of the week (Monday to Sunday).\\n- Product A sales are stacked on top of product B sales.\\n- Target underscores sit on the row above their actual value (see notes).\\n- Daily sales will never be greater than the target.\\n- All columns have a width of two characters.\\n- A single column of \\\"|\\\" is used to border the left and right-hand sides of the chart.\\n- All elements of the chart (x-axis, columns, borders) are seperate by a blank column one space wide.\\n- Use the newline character (\\\"\\\\n\\\") to separate each line in the chart.\\n\\n### Example\\n```\\ncolumn_chart([30, 20, 10, 30, 10, 20, 10], [20, 10, 10, 10, 20, 0, 10], [50, 40, 20, 40, 30, 30, 40]))\\nâžž \\\"60 | __                   |\\\\n50 | ** __    __       __ |\\\\n40 | **       ** __ __    |\\\\n30 | ++ ** __ ++ **       |\\\\n20 | ++ ++ ** ++ ** ++ ** |\\\\n10 | ++ ++ ++ ++ ++ ++ ++ |\\\\n   | Mo Tu We Th Fr Sa Su |\\\"\\n\\nBy day:\\n\\n            Mo  Tu  We  Th  Fr  Sa  Su\\nproductA = [30, 20, 10, 30, 10, 20, 10]\\nproductB = [20, 10, 10, 10, 20,  0, 10]\\ntarget   = [50, 40, 20, 40, 30, 30, 40]\\n\\nWhen printed:\\n\\n60 | __                   |\\n50 | ** __    __       __ |\\n40 | **       ** __ __    |\\n30 | ++ ** __ ++ **       |\\n20 | ++ ++ ** ++ ** ++ ** |\\n10 | ++ ++ ++ ++ ++ ++ ++ |\\n   | Mo Tu We Th Fr Sa Su |\\n```\\n\\n### Notes\\nBe careful when placing the target underscores. Although the Monday target is 50 in the example above, the underscore is placed on the row where sales equal 60).\",\"isHidden\":false,\"lab\":\"Test.assert_equals(column_chart([40, 60, 20, 40, 50, 40, 20], [40, 20, 30, 0, 0, 0, 10], [80, 80, 80, 40, 50, 70, 50]), \\\"90 | __ __ __             |\\\\n80 | ** **          __    |\\\\n70 | ** **                |\\\\n60 | ** ++       __    __ |\\\\n50 | ** ++ ** __ ++       |\\\\n40 | ++ ++ ** ++ ++ ++    |\\\\n30 | ++ ++ ** ++ ++ ++ ** |\\\\n20 | ++ ++ ++ ++ ++ ++ ++ |\\\\n10 | ++ ++ ++ ++ ++ ++ ++ |\\\\n   | Mo Tu We Th Fr Sa Su |\\\")\\nTest.assert_equals(column_chart([30, 20, 10, 30, 10, 20, 10], [20, 10, 10, 10, 20, 0, 10], [50, 40, 20, 40, 30, 30, 40]), \\\"60 | __                   |\\\\n50 | ** __    __       __ |\\\\n40 | **       ** __ __    |\\\\n30 | ++ ** __ ++ **       |\\\\n20 | ++ ++ ** ++ ** ++ ** |\\\\n10 | ++ ++ ++ ++ ++ ++ ++ |\\\\n   | Mo Tu We Th Fr Sa Su |\\\")\\nTest.assert_equals(column_chart([30, 30, 30, 20, 10, 10, 20], [0, 30, 50, 20, 30, 20, 10], [50, 60, 80, 60, 70, 60, 50]), \\\"90 |       __             |\\\\n80 |       **    __       |\\\\n70 |    __ ** __    __    |\\\\n60 | __ ** **          __ |\\\\n50 |    ** **             |\\\\n40 |    ** ** ** **       |\\\\n30 | ++ ++ ++ ** ** ** ** |\\\\n20 | ++ ++ ++ ++ ** ** ++ |\\\\n10 | ++ ++ ++ ++ ++ ++ ++ |\\\\n   | Mo Tu We Th Fr Sa Su |\\\")\\nTest.assert_equals(column_chart([20, 30, 20, 10, 20, 40, 40], [30, 0, 0, 10, 20, 40, 0], [80, 60, 40, 40, 50, 80, 70]), \\\"90 | __             __    |\\\\n80 |                ** __ |\\\\n70 |    __          **    |\\\\n60 |             __ **    |\\\\n50 | **    __ __    **    |\\\\n40 | **          ** ++ ++ |\\\\n30 | ** ++       ** ++ ++ |\\\\n20 | ++ ++ ++ ** ++ ++ ++ |\\\\n10 | ++ ++ ++ ++ ++ ++ ++ |\\\\n   | Mo Tu We Th Fr Sa Su |\\\")\\nTest.assert_equals(column_chart([10, 20, 20, 40, 20, 60, 10], [10, 10, 30, 0, 0, 10, 0], [50, 40, 80, 40, 50, 80, 40]), \\\"90 |       __       __    |\\\\n80 |                      |\\\\n70 |                **    |\\\\n60 | __          __ ++    |\\\\n50 |    __ ** __    ++ __ |\\\\n40 |       ** ++    ++    |\\\\n30 |    ** ** ++    ++    |\\\\n20 | ** ++ ++ ++ ++ ++    |\\\\n10 | ++ ++ ++ ++ ++ ++ ++ |\\\\n   | Mo Tu We Th Fr Sa Su |\\\")\\nTest.assert_equals(column_chart([20, 20, 20, 10, 10, 40, 10], [30, 0, 30, 60, 0, 10, 30], [70, 50, 70, 70, 40, 80, 50]), \\\"90 |                __    |\\\\n80 | __    __ __          |\\\\n70 |          **          |\\\\n60 |    __    **       __ |\\\\n50 | **    ** ** __ **    |\\\\n40 | **    ** **    ++ ** |\\\\n30 | **    ** **    ++ ** |\\\\n20 | ++ ++ ++ **    ++ ** |\\\\n10 | ++ ++ ++ ++ ++ ++ ++ |\\\\n   | Mo Tu We Th Fr Sa Su |\\\")\\nTest.assert_equals(column_chart([30, 50, 50, 50, 10, 20, 20], [0, 20, 0, 10, 30, 20, 20], [60, 70, 60, 70, 50, 50, 60]), \\\"80 |    __    __          |\\\\n70 | __ ** __          __ |\\\\n60 |    **    ** __ __    |\\\\n50 |    ++ ++ ++          |\\\\n40 |    ++ ++ ++ ** ** ** |\\\\n30 | ++ ++ ++ ++ ** ** ** |\\\\n20 | ++ ++ ++ ++ ** ++ ++ |\\\\n10 | ++ ++ ++ ++ ++ ++ ++ |\\\\n   | Mo Tu We Th Fr Sa Su |\\\")\\nTest.assert_equals(column_chart([20, 40, 10, 30, 40, 10, 20], [10, 40, 40, 40, 0, 40, 10], [50, 80, 60, 80, 60, 60, 60]), \\\"90 |    __    __          |\\\\n80 |    **                |\\\\n70 |    ** __ ** __ __ __ |\\\\n60 | __ **    **          |\\\\n50 |    ** ** **    **    |\\\\n40 |    ++ ** ** ++ **    |\\\\n30 | ** ++ ** ++ ++ ** ** |\\\\n20 | ++ ++ ** ++ ++ ** ++ |\\\\n10 | ++ ++ ++ ++ ++ ++ ++ |\\\\n   | Mo Tu We Th Fr Sa Su |\\\")\\nTest.assert_equals(column_chart([10, 30, 70, 20, 10, 30, 20], [40, 10, 0, 60, 40, 20, 10], [70, 50, 80, 80, 50, 70, 50]), \\\"90 |       __ __          |\\\\n80 | __       **    __    |\\\\n70 |       ++ **          |\\\\n60 |    __ ++ ** __    __ |\\\\n50 | **    ++ ** ** **    |\\\\n40 | ** ** ++ ** ** **    |\\\\n30 | ** ++ ++ ** ** ++ ** |\\\\n20 | ** ++ ++ ++ ** ++ ++ |\\\\n10 | ++ ++ ++ ++ ++ ++ ++ |\\\\n   | Mo Tu We Th Fr Sa Su |\\\")\\nTest.assert_equals(column_chart([20, 10, 10, 30, 20, 50, 50], [60, 50, 40, 0, 10, 0, 0], [80, 60, 70, 60, 40, 70, 50]), \\\"90 | __                   |\\\\n80 | **    __       __    |\\\\n70 | ** __    __          |\\\\n60 | ** **             __ |\\\\n50 | ** ** **    __ ++ ++ |\\\\n40 | ** ** **       ++ ++ |\\\\n30 | ** ** ** ++ ** ++ ++ |\\\\n20 | ++ ** ** ++ ++ ++ ++ |\\\\n10 | ++ ++ ++ ++ ++ ++ ++ |\\\\n   | Mo Tu We Th Fr Sa Su |\\\")\\nTest.assert_equals(column_chart([40, 50, 10, 70, 20, 20, 40], [0, 0, 30, 0, 0, 10, 10], [50, 50, 70, 80, 40, 60, 80]), \\\"90 |          __       __ |\\\\n80 |       __             |\\\\n70 |          ++    __    |\\\\n60 | __ __    ++          |\\\\n50 |    ++    ++ __    ** |\\\\n40 | ++ ++ ** ++       ++ |\\\\n30 | ++ ++ ** ++    ** ++ |\\\\n20 | ++ ++ ** ++ ++ ++ ++ |\\\\n10 | ++ ++ ++ ++ ++ ++ ++ |\\\\n   | Mo Tu We Th Fr Sa Su |\\\")\\nTest.assert_equals(column_chart([10, 40, 10, 10, 50, 30, 20], [50, 20, 50, 20, 10, 0, 0], [70, 70, 80, 50, 60, 50, 40]), \\\"90 |       __             |\\\\n80 | __ __                |\\\\n70 |             __       |\\\\n60 | ** ** ** __ ** __    |\\\\n50 | ** ** **    ++    __ |\\\\n40 | ** ++ **    ++       |\\\\n30 | ** ++ ** ** ++ ++    |\\\\n20 | ** ++ ** ** ++ ++ ++ |\\\\n10 | ++ ++ ++ ++ ++ ++ ++ |\\\\n   | Mo Tu We Th Fr Sa Su |\\\")\\nTest.assert_equals(column_chart([10, 10, 20, 20, 20, 10, 10], [30, 40, 0, 60, 20, 20, 20], [60, 70, 50, 80, 40, 50, 60]), \\\"90 |          __          |\\\\n80 |    __    **          |\\\\n70 | __       **       __ |\\\\n60 |       __ **    __    |\\\\n50 |    **    ** __       |\\\\n40 | ** **    ** **       |\\\\n30 | ** **    ** ** ** ** |\\\\n20 | ** ** ++ ++ ++ ** ** |\\\\n10 | ++ ++ ++ ++ ++ ++ ++ |\\\\n   | Mo Tu We Th Fr Sa Su |\\\")\\nTest.assert_equals(column_chart([20, 20, 10, 30, 30, 20, 20], [20, 40, 30, 40, 30, 30, 0], [40, 70, 70, 80, 70, 50, 50]), \\\"90 |          __          |\\\\n80 |    __ __    __       |\\\\n70 |          **          |\\\\n60 |    **    ** ** __ __ |\\\\n50 | __ **    ** ** **    |\\\\n40 | ** ** ** ** ** **    |\\\\n30 | ** ** ** ++ ++ **    |\\\\n20 | ++ ++ ** ++ ++ ++ ++ |\\\\n10 | ++ ++ ++ ++ ++ ++ ++ |\\\\n   | Mo Tu We Th Fr Sa Su |\\\")\\nTest.assert_equals(column_chart([10, 10, 10, 30, 10, 60, 50], [0, 10, 0, 10, 10, 0, 0], [40, 50, 40, 40, 40, 80, 80]), \\\"90 |                __ __ |\\\\n80 |                      |\\\\n70 |                      |\\\\n60 |    __          ++    |\\\\n50 | __    __ __ __ ++ ++ |\\\\n40 |          **    ++ ++ |\\\\n30 |          ++    ++ ++ |\\\\n20 |    **    ++ ** ++ ++ |\\\\n10 | ++ ++ ++ ++ ++ ++ ++ |\\\\n   | Mo Tu We Th Fr Sa Su |\\\")\\nTest.assert_equals(column_chart([40, 10, 30, 20, 50, 30, 40], [20, 10, 30, 40, 30, 0, 20], [70, 50, 60, 60, 80, 40, 70]), \\\"90 |             __       |\\\\n80 | __          **    __ |\\\\n70 |       __ __ **       |\\\\n60 | ** __ ** ** **    ** |\\\\n50 | **    ** ** ++ __ ** |\\\\n40 | ++    ** ** ++    ++ |\\\\n30 | ++    ++ ** ++ ++ ++ |\\\\n20 | ++ ** ++ ++ ++ ++ ++ |\\\\n10 | ++ ++ ++ ++ ++ ++ ++ |\\\\n   | Mo Tu We Th Fr Sa Su |\\\")\\nTest.assert_equals(column_chart([50, 10, 10, 60, 20, 40, 40], [0, 30, 30, 0, 20, 10, 20], [70, 40, 70, 60, 60, 70, 70]), \\\"80 | __    __       __ __ |\\\\n70 |          __ __       |\\\\n60 |          ++       ** |\\\\n50 | ++ __    ++    ** ** |\\\\n40 | ++ ** ** ++ ** ++ ++ |\\\\n30 | ++ ** ** ++ ** ++ ++ |\\\\n20 | ++ ** ** ++ ++ ++ ++ |\\\\n10 | ++ ++ ++ ++ ++ ++ ++ |\\\\n   | Mo Tu We Th Fr Sa Su |\\\")\\nTest.assert_equals(column_chart([20, 20, 20, 20, 20, 30, 10], [60, 40, 10, 20, 20, 0, 10], [80, 80, 50, 40, 40, 50, 50]), \\\"90 | __ __                |\\\\n80 | **                   |\\\\n70 | **                   |\\\\n60 | ** ** __       __ __ |\\\\n50 | ** **    __ __       |\\\\n40 | ** **    ** **       |\\\\n30 | ** ** ** ** ** ++    |\\\\n20 | ++ ++ ++ ++ ++ ++ ** |\\\\n10 | ++ ++ ++ ++ ++ ++ ++ |\\\\n   | Mo Tu We Th Fr Sa Su |\\\")\\nTest.assert_equals(column_chart([10, 10, 10, 10, 10, 20, 30], [30, 10, 30, 40, 30, 10, 0], [40, 30, 50, 50, 50, 30, 30]), \\\"60 |       __ __ __       |\\\\n50 | __       **          |\\\\n40 | ** __ ** ** ** __ __ |\\\\n30 | **    ** ** ** ** ++ |\\\\n20 | ** ** ** ** ** ++ ++ |\\\\n10 | ++ ++ ++ ++ ++ ++ ++ |\\\\n   | Mo Tu We Th Fr Sa Su |\\\")\\nTest.assert_equals(column_chart([10, 50, 20, 40, 70, 30, 20], [10, 0, 50, 20, 0, 40, 30], [40, 60, 80, 80, 70, 70, 60]), \\\"90 |       __ __          |\\\\n80 |             __ __    |\\\\n70 |    __ **    ++ ** __ |\\\\n60 |       ** ** ++ **    |\\\\n50 | __ ++ ** ** ++ ** ** |\\\\n40 |    ++ ** ++ ++ ** ** |\\\\n30 |    ++ ** ++ ++ ++ ** |\\\\n20 | ** ++ ++ ++ ++ ++ ++ |\\\\n10 | ++ ++ ++ ++ ++ ++ ++ |\\\\n   | Mo Tu We Th Fr Sa Su |\\\")\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[4,4,4,4,4,5,5,4,0,5,5,4,5,4,4,5,0,5,2,2,5,5,4],\"rators\":[\"tAF9Gf6PiGogbZuWs\",\"HqmxnQJM66Y57twhn\",\"AYaEkTWLMmfzpwejr\",\"FHSJnAYTbcsKFgeQa\",\"8PwfYqoDQFThzNtvf\",\"4xwButZn34q92d9Yn\",\"3GhZpJLhhrm6AR3aM\",\"9uZpgAtSuPZ7W7DL6\",\"aEm3Wvj2rFYRL8Lrb\",\"DwetpbChQM4r6Gwah\",\"mDWNyaaQ9hvPCRzSd\",\"W5TajitmCyxz87zAC\",\"iS5BrkGLzJyPK7nKt\",\"8sNv5PTHa7XQ8bNqR\",\"yjtdwc2AC4jA2RWtn\",\"J3upzLHuEwXH7Z2hx\",\"gJYuGdkXEWWmGRLzu\",\"s5M5RvgqR9BhB9JoC\"],\"total\":21,\"quality\":[]},\"flags\":0},\"summary\":\"Given three lists (daily sales of product A, daily sales of product B, daily sales targets), return a string representing a stacked column chart of the total sales (with targets) for each day of the week.\\n\\nAll sales are rounded to the nearest 10 units.\\nEach column uses \\\"+\\\" for product A, \\\"*\\\" for product B, and an underscore (\\\"_\\\") for the target line.\\nThe y-axi\",\"tags\":[\"strings\"],\"timestamp\":{\"$date\":1576541026978},\"title\":\"ASCII Charts (Part 3: Column Chart)\",\"quality\":0,\"family\":[{\"_id\":\"iXmbCZMYPukzztpBq\",\"language\":\"javascript\"},{\"_id\":\"4eRim6495deGXZrgF\",\"language\":\"python3\"},{\"_id\":\"GYteJKcYzTqXgNm9H\",\"language\":\"ruby\"}]}}"]