a["{\"msg\":\"result\",\"id\":\"856\",\"result\":{\"_id\":\"rnvBtoNMBtznXLhs8\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def win_round(you, opp):\\n\\t\",\"difficulty\":1.4131147540983606,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"GGMn8Z37ev4EfEKpn\",\"instructions\":\"You have a pack of 5 randomly numbered cards, which can range from 0-9. You can win if you can produce a higher **two-digit** number from your cards, than your opponent. Return `True` if your cards win that round.\\n\\n### Worked Example\\n```\\nwin_round([2, 5, 2, 6, 9], [3, 7, 3, 1, 2]) ➞ True\\n# Your cards can make the number 96\\n# Your opponent can make the number 73\\n# You win the round since 96 > 73\\n```\\n\\n### Examples\\n```\\nwin_round([2, 5, 2, 6, 9], [3, 7, 3, 1, 2]) ➞ True\\n\\nwin_round([1, 2, 3, 4, 5], [9, 8, 7, 6, 5]) ➞ False\\n\\nwin_round([4, 3, 4, 4, 5], [3, 2, 5, 4, 1]) ➞ False\\n```\\n\\n### Notes\\nReturn `False` if you and your opponent reach the same maximum number (see example #3).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(win_round([2, 5, 2, 6, 9], [3, 7, 3, 1, 2]), True, '96 is higher than 73')\\nTest.assert_equals(win_round([1, 2, 3, 4, 5], [9, 8, 7, 6, 5]), False, '54 is lower than 98')\\nTest.assert_equals(win_round([4, 3, 4, 4, 5], [3, 2, 5, 4, 1]), False, '54 is the same as 54')\\nTest.assert_equals(win_round([3, 2, 8, 9, 4], [0, 7, 9, 3, 1]), True, '98 is higher than 97')\\nTest.assert_equals(win_round([1, 4, 9, 2, 1], [3, 7, 7, 8, 7]), True, '94 is higher than 87')\\nTest.assert_equals(win_round([6, 5, 5, 8, 5], [6, 2, 5, 2, 5]), True, '86 is higher than 65')\\nTest.assert_equals(win_round([5, 3, 5, 9, 2], [5, 9, 2, 8, 0]), False, '95 is lower than 98')\\nTest.assert_equals(win_round([3, 2, 0, 3, 5], [7, 5, 8, 6, 2]), False, '53 is lower than 87')\\nTest.assert_equals(win_round([4, 1, 0, 2, 9], [3, 5, 5, 2, 8]), True, '94 is higher than 85')\\nTest.assert_equals(win_round([9, 8, 7, 3, 4], [5, 3, 4, 7, 9]), True, '98 is higher than 97')\\nTest.assert_equals(win_round([3, 3, 3, 9, 9], [9, 0, 0, 6, 6]), True, '99 is higher than 96')\\nTest.assert_equals(win_round([3, 2, 8, 2, 0], [8, 5, 4, 5, 7]), False, '83 is lower than 87')\\nTest.assert_equals(win_round([6, 2, 6, 8, 0], [7, 6, 3, 2, 9]), False, '86 is lower than 97')\\nTest.assert_equals(win_round([8, 3, 5, 3, 5], [5, 5, 4, 4, 6]), True, '85 is higher than 65')\\nTest.assert_equals(win_round([4, 0, 7, 7, 7], [8, 6, 7, 6, 3]), False, '77 is lower than 87')\\nTest.assert_equals(win_round([5, 4, 8, 4, 8], [6, 6, 9, 3, 6]), False, '88 is lower than 96')\\nTest.assert_equals(win_round([8, 1, 2, 6, 5], [2, 6, 7, 1, 8]), False, '86 is lower than 87')\\nTest.assert_equals(win_round([9, 3, 8, 8, 6], [3, 1, 7, 9, 3]), True, '98 is higher than 97')\\nTest.assert_equals(win_round([7, 2, 3, 0, 3], [1, 7, 9, 9, 9]), False, '73 is lower than 99')\\nTest.assert_equals(win_round([2, 7, 4, 6, 5], [2, 3, 1, 5, 6]), True, '76 is higher than 65')\\nTest.assert_equals(win_round([1, 7, 6, 3, 3], [8, 0, 7, 1, 1]), False, '76 is lower than 87')\\nTest.assert_equals(win_round([5, 1, 6, 4, 7], [0, 7, 0, 1, 0]), True, '76 is higher than 71')\\nTest.assert_equals(win_round([6, 0, 9, 5, 9], [4, 0, 3, 2, 5]), True, '99 is higher than 54')\\nTest.assert_equals(win_round([1, 1, 7, 0, 5], [0, 0, 4, 7, 2]), True, '75 is higher than 74')\\nTest.assert_equals(win_round([3, 3, 8, 3, 8], [8, 8, 4, 5, 5]), False, '88 is the same as 88')\\nTest.assert_equals(win_round([4, 4, 2, 3, 4], [3, 6, 1, 5, 7]), False, '44 is lower than 76')\\nTest.assert_equals(win_round([4, 0, 4, 0, 1], [2, 5, 1, 4, 1]), False, '44 is lower than 54')\\nTest.assert_equals(win_round([5, 0, 1, 7, 5], [6, 9, 7, 2, 7]), False, '75 is lower than 97')\\nTest.assert_equals(win_round([6, 1, 1, 4, 2], [6, 4, 7, 1, 2]), False, '64 is lower than 76')\\nTest.assert_equals(win_round([8, 3, 5, 8, 4], [0, 8, 7, 8, 7]), False, '88 is the same as 88')\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[1,1,1,1,1,1,2,1,1,0,1,4,2,1,1,2,3,2,1,2,1,1,1,2,0,2,3,2,2,2,1,0,1,1,0,1,2,1,1,0,1,1,2,1,1,1,2,2,2,2,2,1,1,2,0,2,1,0,1,3,1,1,1,2,2,2,2,2,2,1,2,0,1,0,2,1,1,1,1,1,1,1,2,2,2,2,0,1,2,1,2,2,0,1,1,3,1,0,2,1,1,0,1,2,0,0,1,2,3,2,3,3,1,1,2,1,1,2,0,1,1,0,2,1,1,2,1,2,2,2,2,0,2,0,2,1,2,2,2,0,0,1,0,2,2,2,2,2,2,1,3,0,2,2,0,1,2,1,2,1,2,2,3,2,1,2,0,2,1,2,2,0,1,2,2,2,1,1,2,2,2,2,2,0,1,2,1,2,2,2,1,4,2,2,3,2,2,0,2,1,0,1,2,2,2,2,1,2,0,2,1,2,2,0,5,2,0,1,2,1,2,1,0,2,2,2,1,2,2,1,2,1,2,1,1,2,3,1,1,2,2,2,0,0,2,1,2,1,2,1,1,2,1,1,1,1,1,2,1,1,1,2,2,0,2,2,0,1,2,1,2,2,2,2,2,0,1,2,2,2,2,1,1,1,2,0,0,1,1,2,2,2,2,2,2,0,2,2,0,1,1,0,2,1,2],\"rators\":[\"PXAcsKkssS2yLyDv2\",\"pWesgwpKdXfvy4JZf\",\"snEnPHNwdgtzqPneR\",\"FQu2wLYD7vF7TkLh4\",\"g4NCSxxHqHCGMpWwT\",\"wzbkHfLQ4TCcCv5MA\",\"w2HhxvSLmDhaGCAjE\",\"xW9NGjvcevY6qdzvw\",\"REbXuiozZdcmS4iiJ\",\"jHetG4cpyhNrN9HFS\",\"ZpjYqnL4FXAF4Fvtx\",\"mzhrQ8vWtqTf9azwo\",\"PiTW4nqhyv6DkEKSr\",\"TTgP9jcqGxCfKotZ3\",\"ta5CrWnBCRusD2WMo\",\"zkZo5vnkqxNJbjXn5\",\"nC4sPB69yYuTSks9T\",\"tAF9Gf6PiGogbZuWs\",\"8PwfYqoDQFThzNtvf\",\"eMuCpJ2spXWkJjWNz\",\"d4EAMmTWhFWkJN6w7\",\"iojEnnY9FsMfYzp6f\",\"iS5BrkGLzJyPK7nKt\",\"a777e8chPvJkY3tKa\",\"DEDniTrstQYGounXT\",\"syRNbbPdLCGXbH2Gy\",\"HqmxnQJM66Y57twhn\",\"cR3ibTMxLyEdDFCHY\",\"rgvAJFwfCeYoYnFTK\",\"yjtdwc2AC4jA2RWtn\",\"Yp7uvStL97cC9fKkY\",\"8JyqsSbN2FJXPr3cw\",\"s5M5RvgqR9BhB9JoC\",\"6428wKHtwKkFdvBs5\",\"FEYpu9RWysAgW3XnP\",\"DnAnnW8czBJ28ZWib\",\"gJYuGdkXEWWmGRLzu\",\"XhhL8kqHz32PZNaXY\",\"p8qqFdJ3FSk5x9z3G\",\"Y8ySZEtvht9EwdcoY\",\"6SKDJwXpev4qPSzgM\",\"n2BRY9X8899dcG8Bw\",\"R4SjTgDnpigJYDLyL\",\"HT8tFjNz2KXv23iL5\",\"sX9GZp3fYyQLrBKMJ\",\"WQubx7DAkG6WZE8FA\",\"Q9afpRu3u8zuWuzLQ\",\"JS3hNM3XXkxPdg3yk\",\"YcCLwitFMAEJSnxAW\",\"sHjfbGQGLHE6JR6qu\",\"hkJGLuib5md8vZ9HD\",\"hRiMXDZNAzyPd5tpt\",\"Y9zyHwuyA7MJ8SPDh\",\"qH586ETmMdtjhAoBc\",\"oNBNrPGYAhQiwbeDv\",\"NNE5HNRXAkmhrWgyQ\",\"5HCu9Ydd86QgHDRNP\",\"Pe8vWpDHRuH9nSGKW\",\"oBcs8GLX2ZFLXQy8y\",\"9pzFiFK3ANLjQfnr2\",\"yAouD3PxzED8a4gap\",\"CTKmXtrqDYqJBnuy8\",\"q6QsMYNMpPNtmyTeW\",\"Wv2vJnEj8ywNmARoF\",\"jtbc7sm5A6LQNPvL7\",\"6gS4E2C84vBYTYeDZ\",\"kXEfD7xxEyWd7oxxL\",\"aEm3Wvj2rFYRL8Lrb\",\"PhceyfmFntJcn5Fhf\",\"ji5f27FPz4wRRF6Ls\",\"gb9rvGus2Jv7bjZSs\",\"RehJGBFS6CYiWdjZx\",\"mzhB3LXoJ2EGyqr3n\",\"GGprTwrkjuccmrQRg\",\"zbnmN2wrvzZgY7CyN\",\"YA7SDhpgEtsqynvNL\",\"P7NmFbCJ5offXMRvB\",\"zd9FLSzsGz3evKafy\",\"TPhfpB5tzQWSSn67n\",\"HWyuRTg8adqiZZgPm\",\"XrqNzJ2FRG8HnGiR6\",\"AasGs8AeX9Lcb9xJn\",\"yNjkHfHESBAnCssPB\",\"Z4M3NAa4TXquMNkHe\",\"yr822PZmmiDDenxpB\",\"NrP8YjG6bf3nW2MMT\",\"vpvNdpy6hLbEECJGu\",\"27jqdQJjg6GGa5iQb\",\"3LiSLdtN58n46NEqg\",\"3cF6NXq3ZEwdkgSjb\",\"3jr2dyncMZqhkMHTP\",\"ihWWwoyPrvHSZeQy3\",\"u7i7WPM63n42r8R8o\",\"obxQjjJfiuHJfBEhj\",\"v9gjnSj3JKmBJeut7\",\"PTDFuxAzou7W6asWt\",\"M8dQuMrEpP8Hc3tHN\",\"9dgvEreRDYRiwLmYv\",\"Nb6LYPoQP6KJZt8mz\",\"axdSNLZpiCDF8RS6n\",\"jNvegJWCk5HCtEMbK\",\"mxX4rH5ELYkdZ2Mbw\",\"N2wnZXkhDH86mgjQ8\",\"b9YQPLb9ZPSADdHXX\",\"BTujkAfXi6FPAiHhH\",\"ekQh3jzgGLsEMbKo3\",\"mDWNyaaQ9hvPCRzSd\",\"NzbRqGWspQnWMoDrF\",\"bJxaKHJqR82EWw8Su\",\"H9KZi2cjt4FwH7qog\",\"JJmKj7ACC2P52uo95\",\"Njm5BzHyQBmECGbq5\",\"C9LKGu2g5hSijvDzA\",\"9CoqdidjM9KbeKnHY\",\"DfMcEs6XsfGtTpQ26\",\"FK2fEQ3F6DD3buSLJ\",\"ZJQW3bL2KzxJcdEoc\",\"Zv2hR3wNTPzFhft8A\",\"Jg8ZSRXe3NoDMCqGu\",\"orFLgPDw9H5MDzmwo\",\"E5iw5hyyWum9KshGA\",\"8BFSTCnoe2QggN64c\",\"NfMJuiBk6FN5Jc6ow\",\"wJosiFATmZti3nEHG\",\"22kSvGZ9z9J2KK8nc\",\"K4JsBLPjNKZv5LWnp\",\"Ey9pB2PRqejNubQmf\",\"yZMHS95vJhb7xa3A3\",\"HnJuYrgwLJwXtboE3\",\"b3BWzq6Yu8nswak5u\",\"GEvSGXDkk7pACfYri\",\"HF28xZKSLM9wEuqNg\",\"7txFzDQ43vJ7qCY88\",\"kyEERyssssTQaZ4y5\",\"AgY6WsWyt69H9sC8C\",\"aRqQ42J5zqCmBNd8w\",\"WWAnGFmWbCtnnGrW7\",\"ZNoBc3SmeW45eQt3v\",\"XnnRQdbeBCKBH9KHa\",\"Wv9XxYAmCLZdhrTMF\",\"tt3ZzoL5BWvsagnDp\",\"tvepubsYyqKtAdFJy\",\"PBn3fhAqsEqHEHq3E\",\"7K2GEb5TZRtSpyyGS\",\"oig8ig9SE9RZa8ttL\",\"7X8jszx94c8EK2uiv\",\"4fhjJBvLBWh6QeSih\",\"SkQcb2sRn4as5KpnN\",\"vCeeMuYDbz3MB4vsk\",\"ztDNuxZgtEMizcDoN\",\"2q838RhAci4BssKci\",\"PcfcAbTJPrdzJN2FW\",\"3QQG7K2vH7D4m4AGj\",\"tytQfvk4jvE4dyFGk\",\"BC3XhXhX9mTrAScgy\",\"KLmLKaJPfsYxp42p2\",\"vW8dPw4aRygenERwp\",\"TEN7AF5j6oEocKzwE\",\"skG34HkAFoQiHk7gg\",\"zfGYZ7gpR8fxJpagh\",\"FvFhg2wELM3SCZDZQ\",\"6HgMANhu6WiGyXSGN\",\"szfbcmKCDgDZyjkef\",\"377aXz9FPFSZxyrSv\",\"dWXHFmTpF8PnGJQL3\",\"6kWw79YpGaHcowJfv\",\"gSFJPsMXnqAog3Q9f\",\"EtaeKcsEguyy8uf3t\",\"cYoWJ8sQE3mdBhJ9D\",\"4KMHiq3dndMuqW2ho\",\"K3RacTvkWHLfzKF8i\",\"qxDNahXB7goQwRrvh\",\"mmt7jwqbmSjzRSvqh\",\"KGaQqhoaLiPQNjoxc\",\"k2Eo3wyfZZ6KxvKhN\",\"EKdnuyAecux7YZ7yc\",\"EMJ6uvBZkie429gdg\",\"b5zo7s6xrqWgQnPao\",\"qD2LrwaDrSdiybLKY\",\"tpxMgkGSHwBjS95Ta\",\"mG8HqKiAQFTdRZthG\",\"8vWWL8Tx2yDai4ydm\",\"8Ni269XqCJJhs65Kw\",\"DYDJTyGgKFnBRLm2r\",\"Kh3Pc2ZRusurLaMyP\",\"b5oEvBqHWLRnJgp22\",\"Lm6ChQCWBmaikmk5J\",\"gXTAie79kiw28tx5u\",\"8WpvgSbQciTQWdd8T\",\"rfyEkETeoS96QNH4e\",\"CEd9tLdXeDeNHSzys\",\"nzAG9wfxxReP68Tht\",\"oet95WsBxxzdiZfz6\",\"H4abACFDH5t8CnnyH\",\"tcn2oAsxPQDmCxGmg\",\"QRv96jmNaYsWkxQEG\",\"9FCeFzjPA4jrQ7oHW\",\"aKzYNPqBqb3J3ZgyD\",\"dyBcJXfbqJtjTmBZK\",\"zvR7koBTGcaj5pJNQ\",\"jL4y5fTJAMBjhZmko\",\"dBzwBtRjZqB98DJeB\",\"vSvippNru5pBnJQJn\",\"2QGRoQn2dRq3scu7k\",\"8fZxjQfuXw5HMSRJM\",\"g9FyJ8yeT9ic97Qp2\",\"d8qtzoLB264iP8tdY\",\"ZqjP4M6dzu32To33K\",\"cZccqzRQ9GgjQF6Az\",\"drdKwcfY8TCL9hoYv\",\"J3upzLHuEwXH7Z2hx\",\"bccs9koJxyQ9XNiLC\",\"cAP3n5NY64uoMwzRR\",\"9rhsisf8ofHavG5aT\",\"RGMbFMZXJr7DhcAJy\",\"kQH5b8MXJunh84Czq\",\"6MjSiiBLPcvXbXcaZ\",\"dYPkStFnLvAMsHSzZ\",\"KJCDwGkoXh8qtbbKr\",\"Cuy7McJ5y8BkXRRk9\",\"pJj86xc32Bs7Frxvi\",\"pduNK68oazqQTtbLp\",\"9uRZernrbaMo4wRW3\",\"yod5YhKtPqw2GfG9B\",\"YRAzEBJoLvSaiPtYx\",\"spqXrjG3ZFa2j5uTR\",\"uzuMpnWZcTHfBBg4S\",\"jWQefsikqLckkRjQ2\",\"Cybtjz3cF7RgoiqrN\",\"4fjSgcqhQQZM2ZFRP\",\"hKqn2TRhqwwyLcE66\",\"5XiuAqicKD4hBdu63\",\"J5T8gZqiZXFuFDTQ7\",\"t3koQ4dQFWdnyXxBB\",\"nfXGHENb5md7m355s\",\"ey3CASd6Je5LEJzfB\",\"3pxHTZBsv7MKzFG6Y\",\"shdSrDq5ZKqfpgjmu\",\"C2AfMipCicfD58WJ9\",\"ZyrfhDTZHb8LymH5b\",\"HuNF3xTBzmatyGSTm\",\"Jqk2uJZZxEv5wZFze\",\"CsJKoPjBsdQ4mBked\",\"o4ixjQGSaYqA2JoM4\",\"NELDkFz4nR7yxZM2Y\",\"AJexRBN9cYQmqvYu6\",\"poiKbjDNKCGrzWeW6\",\"CyzskHGsC6WSmYrLu\",\"ANbSYXiYsp4addoDq\",\"wjc4iejpErBhxWwHo\",\"GgKjkeEerKDRpWRa5\",\"xexoFFWqWw76sZhRj\",\"yFqHMYNXoEYgDfmta\",\"xpGSi4pXEaJnL6KMR\",\"LWCzZ8mb8gwrRNGfq\",\"GGdmhAvxXhqhhibJN\",\"Hu4SkoNyWCP4vmsZE\",\"R29kgJ9M7R4qqwjcE\",\"WdKdsgH9gXkKgCycx\",\"eYfPWvZwnJQkHbSTK\",\"Lg4t6SEWgtYz4u7Cj\",\"srJ34BaybkQh3qRkM\",\"DqNQn9Jsxcu5HijKE\",\"5S9nX4rKsnCcnv4Cz\",\"5hQnRWiKkhgKJXNMP\",\"LQxof8pGabGuWP7Gn\",\"7N6c3Xu244bnQWjBs\",\"buX4mCQhtXCfBjeno\",\"GqothajHR2vKfEHGZ\",\"nFbmNzMQ38TncmfQX\",\"Fk9kLwoG4Brf4KsKf\",\"Ds7L5bksw2QRHjrKL\",\"BrTDhPJcACL2bsrpJ\",\"2fxapKr8XGdNeaKi2\",\"p7js9trz2zk2RorCR\",\"4RsakkyRXyYGwFxEa\",\"JhX7jvtpwNyxcc39m\",\"qAby4AWXmTNeusvg3\",\"qQQ4hCQpzitmHSkjS\",\"CHvzhtXnv8HTbPQ56\",\"5uj4mTXdaDL3wLDWw\",\"T6iBEE2jp7f7iEF2P\",\"dYgxQgSzJNMnWzhhE\",\"EfxwqhYdapX3dMQC2\",\"XD5nmvKQchKezPXhy\",\"BJp2WkwLWGHHB5oQW\",\"hiGXnxds6zo7XsfTw\",\"AFfw7cGg83uYk2Miy\",\"Wpn95NqWxncQrwNgz\",\"GTKsdeEihE636Le9i\",\"PC3pLs36zNzpRDSuE\",\"c2q7mY39z5JPEMCaM\",\"2HfNkb2SoqdyjKW3o\",\"Cc2Cgj4MWXZxsTooC\",\"K6MfKMytoJJuSGewP\",\"2PufnQcsHsfymufX3\",\"X4rzfxGgxx6CS7Bpz\",\"oJx5acEiYhhKXT496\",\"cGXxkpaTvQwuGKC3v\",\"9Ly8afdtofp8DXzrt\",\"RoGGD5cpHb4ftdLDv\",\"ghMkPtdFCpM6w8nax\",\"4Lwjr34ypKNQNQCar\",\"R6YxHWAiLgKwy5YvC\",\"jWbd7SYDzLPjc9EDh\",\"sbJcFfQjQ59Wfg4Cd\",\"kjvgTyRFyKHv44DcH\",\"59i8FXFn8qgY6w67v\",\"sKBGcRfEr6LrvG8A2\",\"sKfrD9gjCDHuqLzSk\",\"nc7bRhkxgKyqusYe3\",\"pPpmP7xeJzGgK362R\",\"NcxToYWJoZkC37SGP\",\"hR7GMiqGap4CzEWSy\",\"PwuGPsF7Bi5nWme3m\",\"2FCRyJqwqzFTKSTgJ\",\"fKzJMR2LLbiRtGetj\",\"4RY3zj9C2t8GGefhi\",\"2iFe3EHEH2YdhSKrs\",\"796v8eRqahP6wpLdL\",\"4TmgHkn5vqyHK3sYC\",\"JpfawoNASKe8ZztFA\",\"uBXzq8ZaZMYkn4wW5\",\"T6Rm8mREPMZSftzrC\",\"jkbavR2ATFJcpmo8M\",\"FRN2W8RYpJ6GPhgRy\",\"uGuS9YRXW2nj4p6zf\",\"u5u2YpHXiNgzDNJdX\",\"5s4qhuRJijYaDNXva\",\"StNu7DPyTgEStZsMY\",\"SGEohskFG6ouMzxAo\",\"AQSqD9oNv2uPfxZCR\",\"d9LBRxvADNBB5QJMB\",\"hpT9yYe5R45poHrYR\",\"dzS6WBTMHyFEag6Fp\",\"pPPaHqWkmnDAfyisS\",\"AMpQSjKsRqhCDyS2j\",\"oj72iDTvN89H4gebC\",\"Qyfyyw6oC4EHAndzo\",\"LrcMEPYSk5Mfcrf25\",\"B4y8aoyXJtskYPFEL\",\"rCrbqMiaGPgHYTNxu\",\"RooBGHmPaSRLAeHkA\",\"M2gFMJkocQSY6bsFR\",\"QWjsXnLaJ7xfL3Amq\",\"BdnE4RS5puoxo92mA\",\"8uiLiJcmWxWe6qw65\",\"qB6KSTYC6H2TQEQY6\",\"ctbThYbufFCYbRK4f\",\"CdXigydGTBLgA577m\",\"DHXQEnTF6RANkv3oN\",\"3KkyQm77zsew58Dc2\",\"mw9464S5dnenqzvpm\",\"Zyg9xAm6EuH4u3Lo5\",\"5QN8R22z43SrwoHDz\",\"C8tNQmnJ4o6NM4PHc\",\"eW9R2SCoYnY8HBAdL\",\"Wi4H6ayKsNDWWQCG5\",\"vAbK8sCfKyFC78HYg\",\"rDgKHd6ZSSpboiAj7\",\"ruzwBPphPDRgLXdnP\",\"DQskEvAv5KiJDPtGF\",\"PCqJmarbp8frpG9x8\",\"wrL4iX2CCSqDCCty3\"],\"total\":407,\"quality\":[2,5,4,5,5,4,5,5,5,4,2,5,5,5,5,5,5,3,4,5,5,5,5,4,5,5,5,5,5,5,5,5,4,5,5,5,5,5,5,5,5,4,5,5,5,5,5,5,5,5,5,5,5,5,5,1,1,5,4,4,5,5,5,5]},\"flags\":0},\"summary\":\"You have a pack of 5 randomly numbered cards, which can range from 0-9. You can win if you can produce a higher two-digit number from your cards, than your opponent. Return True if your cards win that round.\\n\\nWorked Example\\nwin_round([2, 5, 2, 6, 9], [3, 7, 3, 1, 2]) ➞ True\\nYour cards can make the number 96\\nYour opponent can make the number 73\\nYou win the roun\",\"tags\":[\"arrays\",\"numbers\",\"games\",\"validation\"],\"timestamp\":{\"$date\":1595780414217},\"title\":\"Numbered Cards\",\"quality\":4.609375,\"family\":[{\"_id\":\"WKDLPg5MqXXMXAzhC\",\"language\":\"cpp\"},{\"_id\":\"qE9gCJtrtcMurvQtT\",\"language\":\"java\"},{\"_id\":\"JMht24XNt8Swf4MRL\",\"language\":\"javascript\"},{\"_id\":\"rnvBtoNMBtznXLhs8\",\"language\":\"python3\"},{\"_id\":\"fPg3kAJBNhphZKMsG\",\"language\":\"ruby\"}]}}"]