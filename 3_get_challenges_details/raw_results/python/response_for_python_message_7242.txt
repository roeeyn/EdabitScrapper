a["{\"msg\":\"result\",\"id\":\"2327\",\"result\":{\"_id\":\"XmQjSjbsfLg3y33ES\",\"author\":\"Luis Pereira\",\"authorId\":\"aEm3Wvj2rFYRL8Lrb\",\"code\":\"def legalbacklog(cases, max_daily_sessions):\\n\\t\",\"difficulty\":3.7142857142857144,\"editorId\":\"aEm3Wvj2rFYRL8Lrb\",\"familyId\":\"WFN28yWF4raZaiiKt\",\"instructions\":\"A courthouse has a backlog of several cases that need to be heard, and is trying to set up an efficient schedule to clear this backlog. You will be given the following inputs:\\n- A dictionary `cases` whose values are the number of court sessions each case needs to be concluded.\\n- An integer `max_daily_sessions` which gives the maximum number of court sessions that can be held each day.\\n\\nCrucially, it is _**not possible** to have two sessions of the same case in the same day_.\\n\\nWrite a function that _determines the **minimum number of days** needed to clear the backlog_.\\n\\n### Examples\\n```\\nlegalbacklog({\\\"A\\\":4, \\\"B\\\": 3, \\\"C\\\": 2}, 5) ➞ 4\\n# There are three cases \\\"A\\\", \\\"B\\\", \\\"C\\\" needing 4, 3, 2 sessions, respectively. \\n# Moreover, up to five sessions can be held each day.\\n# A possible schedule is:\\n# day1 = [\\\"A\\\", \\\"B\\\", \\\"C\\\"], day2 = [\\\"A\\\", \\\"B\\\", \\\"C\\\"], day3 = [\\\"A\\\", \\\"B\\\"],\\n# day4 = [\\\"A\\\"]\\n\\nlegalbacklog({\\\"A\\\":4, \\\"B\\\": 3, \\\"C\\\": 2}, 3) ➞ 4\\n# Same cases as above, but now with up to three sessions each day\\n# Same schedule as above still words\\n\\nlegalbacklog({\\\"A\\\":4, \\\"B\\\": 3, \\\"C\\\": 2}, 1) ➞ 9\\n# Again same cases, but only one case per day,\\n# hence answer is the number of cases, i.e. 9 \\n\\nlegalbacklog({\\\"A\\\":4, \\\"B\\\": 3, \\\"C\\\": 2}, 2) ➞ 5\\n# Same cases, but at most two sessions per day.\\n# A possible schedule:\\n# day1 = [\\\"A\\\", \\\"B\\\"], day2 = [\\\"A\\\", \\\"B\\\"], day3 = [\\\"A\\\", \\\"B\\\"],\\n# day4 = [\\\"A\\\", \\\"C\\\"], day5 = [\\\"C\\\"]\\n\\nlegalbacklog({\\\"A\\\":4, \\\"B\\\": 4, \\\"C\\\": 4}, 2) ➞ 6\\n# Different case load, at most two sessions per day\\n# A possible schedule:\\n# day1 = [\\\"A\\\", \\\"C\\\"], day2 = [\\\"A\\\", \\\"C\\\"], day3 = [\\\"A\\\", \\\"B\\\"],\\n# day4 = [\\\"A\\\", \\\"B\\\"], day5 = [\\\"C\\\", \\\"B\\\"], day6 = [\\\"C\\\", \\\"B\\\"]\\n```\",\"isFree\":false,\"isHidden\":false,\"lab\":\"import time\\nstart = time.time()\\n\\nTest.assert_equals(legalbacklog({'A': 4, 'B': 3, 'C': 2}, 5), 4)\\nTest.assert_equals(legalbacklog({'A': 4, 'B': 3, 'C': 2}, 3), 4)\\nTest.assert_equals(legalbacklog({'A': 4, 'B': 3, 'C': 2}, 1), 9)\\nTest.assert_equals(legalbacklog({'A': 4, 'B': 3, 'C': 2}, 2), 5)\\nTest.assert_equals(legalbacklog({'A': 4, 'B': 4, 'C': 4}, 2), 6)\\nTest.assert_equals(legalbacklog({'A': 4, 'B': 4, 'C': 4, 'D': 4}, 2), 8)\\nTest.assert_equals(legalbacklog({'A': 4, 'B': 4, 'C': 4, 'D': 4}, 3), 6)\\nTest.assert_equals(legalbacklog({'A': 20, 'B': 10, 'C': 10, 'D': 10}, 2), 25)\\nTest.assert_equals(legalbacklog({'A': 20, 'B': 10, 'C': 10, 'D': 10}, 3), 20)\\nTest.assert_equals(legalbacklog({'A': 20, 'B': 14, 'C': 14, 'D': 14}, 3), 21)\\nTest.assert_equals(legalbacklog({'A': 17, 'B': 14, 'C': 14, 'D': 14}, 3), 20)\\nTest.assert_equals(legalbacklog({'A': 30, 'B': 25, 'C': 25, 'D': 15, 'E': 15, 'F': 10, 'G': 10}, 4), 33)\\nTest.assert_equals(legalbacklog({'A': 30, 'B': 30, 'C': 30, 'D': 15, 'E': 15, 'F': 10, 'G': 10}, 4), 35)\\nTest.assert_equals(legalbacklog({'A': 70, 'B': 60, 'C': 50, 'D': 15, 'E': 15, 'F': 10, 'G': 10, 'H': 10, 'I': 10}, 6), 70)\\nTest.assert_equals(legalbacklog({'A': 70, 'B': 60, 'C': 50, 'D': 15, 'E': 15, 'F': 10, 'G': 10, 'H': 10, 'I': 10}, 3), 84)\\nTest.assert_equals(legalbacklog({'A': 70, 'B': 60, 'C': 60, 'D': 15, 'E': 15, 'F': 10, 'G': 10, 'H': 10, 'I': 10}, 3), 87)\\n\\n\\n\\nprint('{:.6f}s'.format(time.time()-start))\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[4,4,4,4,4,5,5,4,2,2,1,5,5,3],\"rators\":[\"vTfyrr4pGddp8rbXc\",\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\",\"8WpvgSbQciTQWdd8T\",\"yjtdwc2AC4jA2RWtn\",\"8sNv5PTHa7XQ8bNqR\",\"iS5BrkGLzJyPK7nKt\",\"MpfytGFYF77emJ3cT\",\"s5M5RvgqR9BhB9JoC\"],\"total\":11,\"quality\":[]},\"flags\":0},\"summary\":\"A courthouse has a backlog of several cases that need to be heard, and is trying to set up an efficient schedule to clear this backlog. You will be given the following inputs:\\nA dictionary cases whose values are the number of court sessions each case needs to be concluded.\\nAn integer maxdailysessions which gives the maximum number of court sessions that can be\",\"tags\":[\"algorithms\",\"math\",\"logic\"],\"timestamp\":{\"$date\":1596157308098},\"title\":\"Legal Backlog\",\"quality\":0,\"family\":[{\"_id\":\"XmQjSjbsfLg3y33ES\",\"language\":\"python3\"}]}}"]