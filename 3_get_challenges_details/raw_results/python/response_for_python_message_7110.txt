a["{\"msg\":\"result\",\"id\":\"2261\",\"result\":{\"_id\":\"pN7iSYmghjdnHiMvT\",\"author\":\"Luis Pereira\",\"authorId\":\"aEm3Wvj2rFYRL8Lrb\",\"code\":\"# CHARACTER SET\\n# \\\" \\\" -> empty\\n# \\\"s\\\" -> ship\\n# \\\".\\\" -> miss\\n# \\\"X\\\" -> hit\\n\\nclass Battleship:\\n\\tdef __init__(self, scheme, guesses):\\n\\t\\tpass\\n\\n\\tdef board(self):\\n\\t\\tpass\\n\\n\\tdef hits(self):\\n\\t\\tpass\\n\\n\\tdef sunk(self):\\n\\t\\tpass\\n\\n\\tdef points(self):\\n\\t\\tpass\",\"difficulty\":3.5348837209302326,\"familyId\":\"HbrXJjcPkCvLurujS\",\"instructions\":\"In this challenge, you have to build a `class` that will store and manipulate the data of a simplified clone of **Battleship**, the popular strategy game.\\n\\nThe game is played on a **5x5** square board, with rows indexed by uppercase letters from **A to E** (from top to bottom), and columns indexed by numbers from **1 to 5** (from left to right).\\n\\n### Rules of the Game\\n- There are two types of ship: the **Patrol** and the **Cruiser**. The Patrol occupies a single cell, the Cruiser occupies two cells, horizontally or vertically.\\n- Three Patrols and three Cruisers will be placed randomly in the grid, **without ships adjacent in rows and columns** (in particular, two adjacent cells can only both be ship cells if they belong to the same Cruiser).\\n- The player _calls_ six different cells, trying to guess if there's a Patrol or a Cruiser in it.\\n- Hits and misses are recorded on the board. For every hit Patrol or Cruiser, a point is gained, and if a Cruiser is sunk, two additional points are gained.\\n\\n### Class \\\"Battleship\\\"\\nEach instance of the Battleship class in the **Tests** tab will be declared with two parameters:\\n- `scheme` is a list containing **9** strings which are the coordinates indicating where the ships are placed on the board.\\n- `guesses` is a list containing **6** strings which are the coordinates of the guesses made by the player.\\n\\n### What do you have to implement?\\nThe **Tests** will expect each instance of the  `Battleship` class to possess four methods:\\n\\n- `board()` will return the final state of the board, based on the placement of the ships and the results of the player guesses, as a matrix of size 5x5. To vizually represent the state of the game, you will use four different characters:\\n\\n  - ' ' =  a blank space on the board.\\n  - 's' =  a space occupied by a ship.\\n  - '.' =  a miss (wrong guess).\\n  - 'X' =  a hit (a correct guess).\\n\\n- `hits()`  will return the **total number of hits** made by the player (correct guesses), either on Patrols or on Cruisers.\\n- `sunk()` will return the **total number of sunk** Cruisers (two adjacent correct guesses, either horizontally or vertically).\\n- `points()` will return the **total number of points** gained by the player (1 for every hit, plus 2 for every sunk Cruiser).\\n\\n### Examples\\n```\\nscheme = [\\\"A1\\\", \\\"C1\\\", \\\"B2\\\", \\\"B3\\\", \\\"D2\\\", \\\"E2\\\", \\\"E4\\\", \\\"E5\\\", \\\"A5\\\"]\\n\\nguesses = [\\\"A1\\\", \\\"B2\\\", \\\"C3\\\", \\\"D4\\\", \\\"E5\\\", \\\"E4\\\"]\\n\\nbattleship.board() ➞ [\\n  [X,  ,  ,  , s],\\n  [ , X, s,  ,  ],\\n  [s,  , .,  ,  ],\\n  [ , s,  , .,  ],\\n  [ , s,  , X, X]\\n]\\n\\nbattleship.hits() ➞ 4\\n# Total hits.\\n\\nbattleship.sunk() ➞ 1\\n# Sunk Cruisers only, sunk Patrols not included.\\n\\nbattleship.points() ➞ 6\\n# Hits + additional points given by sunk Cruisers.\\n```\\n### Notes\\n- If two cruisers are in the same row or the same column, there will be a blank cell between them, so that it will be possible to distinguish them as different ships.\\n- The board **is not** given, you have to build it.\\n- In the **Examples** above, the symbols in the board are not between quotation marks for readability, but they are strings.\",\"isHidden\":false,\"lab\":\"# Original Javascript challenge by er0s\\nscheme1 = [\\\"A1\\\", \\\"C1\\\", \\\"B2\\\", \\\"B3\\\", \\\"D2\\\", \\\"E2\\\", \\\"E4\\\", \\\"E5\\\", \\\"A5\\\"]\\nscheme2 = [\\\"A1\\\", \\\"B1\\\", \\\"D1\\\", \\\"E1\\\", \\\"A3\\\", \\\"A4\\\", \\\"D3\\\", \\\"E4\\\", \\\"D5\\\"]\\nscheme3 = [\\\"A2\\\", \\\"A4\\\", \\\"C1\\\", \\\"C2\\\", \\\"E3\\\", \\\"C4\\\", \\\"C5\\\", \\\"D3\\\", \\\"E5\\\"]\\nguesses1 = [\\\"A1\\\", \\\"B2\\\", \\\"C3\\\", \\\"D4\\\", \\\"E5\\\", \\\"E4\\\"]\\nguesses2 = [\\\"A2\\\", \\\"B4\\\", \\\"C1\\\", \\\"D3\\\", \\\"E5\\\", \\\"A5\\\"]\\nguesses3 = [\\\"A1\\\", \\\"B1\\\", \\\"D1\\\", \\\"E1\\\", \\\"A3\\\", \\\"A4\\\"]\\n\\nbattleship1 = Battleship(scheme1, guesses1);\\nTest.assert_equals(battleship1.board(), [\\n  [ 'X', ' ', ' ', ' ', 's' ],\\n  [ ' ', 'X', 's', ' ', ' ' ],\\n  [ 's', ' ', '.', ' ', ' ' ],\\n  [ ' ', 's', ' ', '.', ' ' ],\\n  [ ' ', 's', ' ', 'X', 'X' ]\\n], \\\"Instructions/Example\\\");\\nTest.assert_equals(battleship1.hits(), 4, \\\"Instructions/Example\\\");\\nTest.assert_equals(battleship1.sunk(), 1, \\\"Instructions/Example\\\");\\nTest.assert_equals(battleship1.points(), 6, \\\"Instructions/Example\\\");\\n\\n\\nbattleship2 = Battleship(scheme1, guesses2)\\nTest.assert_equals(battleship2.board(), [\\n  [ 's', '.', ' ', ' ', 'X' ],\\n  [ ' ', 's', 's', '.', ' ' ],\\n  [ 'X', ' ', ' ', ' ', ' ' ],\\n  [ ' ', 's', '.', ' ', ' ' ],\\n  [ ' ', 's', ' ', 's', 'X' ]\\n]);\\nTest.assert_equals(battleship2.hits(), 3);\\nTest.assert_equals(battleship2.sunk(), 0);\\nTest.assert_equals(battleship2.points(), 3);\\n\\n\\nbattleship3 = Battleship(scheme2, guesses3)\\nTest.assert_equals(battleship3.board(), [\\n  [ 'X', ' ', 'X', 'X', ' ' ],\\n  [ 'X', ' ', ' ', ' ', ' ' ],\\n  [ ' ', ' ', ' ', ' ', ' ' ],\\n  [ 'X', ' ', 's', ' ', 's' ],\\n  [ 'X', ' ', ' ', 's', ' ' ]\\n])\\n\\nTest.assert_equals(battleship3.hits(), 6);\\nTest.assert_equals(battleship3.sunk(), 3);\\nTest.assert_equals(battleship3.points(), 12);\\n\\nbattleship4 = Battleship(scheme2, guesses2)\\nTest.assert_equals(battleship4.board(), [\\n  [ 's', '.', 's', 's', '.' ],\\n  [ 's', ' ', ' ', '.', ' ' ],\\n  [ '.', ' ', ' ', ' ', ' ' ],\\n  [ 's', ' ', 'X', ' ', 's' ],\\n  [ 's', ' ', ' ', 's', '.' ]\\n])\\n\\nTest.assert_equals(battleship4.hits(), 1)\\nTest.assert_equals(battleship4.sunk(), 0)\\nTest.assert_equals(battleship4.points(), 1)\\n\\nbattleship5 = Battleship(scheme3, guesses1)\\nTest.assert_equals(battleship5.board(), [\\n  [ '.', 's', ' ', 's', ' ' ],\\n  [ ' ', '.', ' ', ' ', ' ' ],\\n  [ 's', 's', '.', 's', 's' ],\\n  [ ' ', ' ', 's', '.', ' ' ],\\n  [ ' ', ' ', 's', '.', 'X' ]\\n])\\n\\nTest.assert_equals(battleship5.hits(), 1)\\nTest.assert_equals(battleship5.sunk(), 0)\\nTest.assert_equals(battleship5.points(), 1)\",\"language\":\"python3\",\"summary\":\"In this challenge, you have to build a class that will store and manipulate the data of a simplified clone of Battleship, the popular strategy game.\\n\\nThe game is played on a 5x5 square board, with rows indexed by uppercase letters from A to E (from top to bottom), and columns indexed by numbers from 1 to 5 (from left to right).\\n\\nRules of the Game\\nThere are two\",\"tags\":[\"classes\",\"arrays\",\"data_structures\",\"games\"],\"timestamp\":{\"$date\":1596307058574},\"title\":\"Do Classes Dream of Electric Ship?\",\"stats\":{\"completed\":{\"total\":62,\"ratings\":[3,3,3,3,3,3,4,0,4,5,5,4,2,5,3,5,5,2,2,3,2,3,4,5,2,2,4,3,4,3,5,5,1,4,2,5,5,5,5,5,5,3,3],\"rators\":[\"aEm3Wvj2rFYRL8Lrb\",\"xn7uGNKeAwPEkP9oA\",\"pHpGCimfadYznq5Wb\",\"vTfyrr4pGddp8rbXc\",\"8PwfYqoDQFThzNtvf\",\"GgLd4eWBu79mdjtkP\",\"fznzd3qnvtbFkkizz\",\"s6qiPXptvyxxEy3vm\",\"a777e8chPvJkY3tKa\",\"s5M5RvgqR9BhB9JoC\",\"8WpvgSbQciTQWdd8T\",\"mzsaCBQP3e6YourDN\",\"RkBtBG7KGM838Ewdg\",\"XkJ9G89xpZiTj58Eq\",\"4fhjJBvLBWh6QeSih\",\"emagfXjqjkuDhZCbj\",\"tpxMgkGSHwBjS95Ta\",\"6F3Y6ZBAGNDGGTt9B\",\"8JyqsSbN2FJXPr3cw\",\"wFws9y3mXvC4vL9Q2\",\"mDWNyaaQ9hvPCRzSd\",\"hZW6j5s6RHpx35phy\",\"cHQu4YYGymPFk36x2\",\"p8qqFdJ3FSk5x9z3G\",\"AW6dT7votojqC9voG\",\"2XqgeTopdma89viw3\",\"h4x2jaMdj5aQZbW5g\",\"6xTu4r8NMczBFvmtz\",\"DR5tfZrFaSDeLygnA\",\"Wv2vJnEj8ywNmARoF\",\"ygDJ7HEzRoJZyPEF4\",\"LskiHJtzYpBuCmjaP\",\"T6xRoSqcSHjvP2Tik\",\"QBgP4BySQAeCoCFf6\",\"58M252WF7SPRinfBx\",\"6k46WoSbN4cJp9SCr\",\"d6iEb2BDDofyeePh9\",\"eoXvH6nQgePAfL6Wc\",\"ScaZG69jog5kcqGtQ\",\"jhpjLPkSo6yjCPNwe\",\"EQu6oPhZ9mRChfYSz\",\"pDseeQ5ubSuNK7eB8\",\"wwMcJQRvf3X59Jyev\",\"aAFKLxcnBD2ZrdDnJ\",\"8sNv5PTHa7XQ8bNqR\",\"eMuCpJ2spXWkJjWNz\",\"2PufnQcsHsfymufX3\",\"yr822PZmmiDDenxpB\",\"wT5gGgvjKc5wz59AQ\",\"Afnps7TJQuS9sipMb\",\"yjtdwc2AC4jA2RWtn\",\"bJaPCBx63YxdJAuTS\",\"gJYuGdkXEWWmGRLzu\",\"J3upzLHuEwXH7Z2hx\",\"sFMXNMFryYLjHsjYj\",\"iS5BrkGLzJyPK7nKt\",\"J23RcmzbdtBbPCTjT\",\"mWPKdDYh9K6LRpQzt\",\"QxWgwpF6RofdzFXgi\"],\"quality\":[5,5,5,4,5,4,4,5,4,5,5,5,5,5,5,5,5,5,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"aEm3Wvj2rFYRL8Lrb\",\"quality\":4.809523809523809,\"family\":[{\"_id\":\"Y6hNbTncED6dp6gFu\",\"language\":\"java\"},{\"_id\":\"pbeqf95r3H4PRQKJr\",\"language\":\"javascript\"},{\"_id\":\"pN7iSYmghjdnHiMvT\",\"language\":\"python3\"}]}}"]