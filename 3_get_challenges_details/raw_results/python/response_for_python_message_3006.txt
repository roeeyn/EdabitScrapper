a["{\"msg\":\"result\",\"id\":\"228\",\"result\":{\"_id\":\"YisvASuJeaooFLesN\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def max_total(nums):\\n\\t\",\"difficulty\":0.5874587458745875,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"9zWRLcYhQa2T5AWB5\",\"instructions\":\"Given a list of 10 numbers, return the **maximum possible total** made by summing just  **5 of the 10 numbers**.\\n\\n### Examples\\n```\\nmax_total([1, 1, 0, 1, 3, 10, 10, 10, 10, 1]) ➞ 43\\n\\nmax_total([0, 0, 0, 0, 0, 0, 0, 0, 0, 100]) ➞ 100\\n\\nmax_total([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ 40\\n```\\n\\n### Notes\\nYou can select any 5 numbers from the given array to form maximum possible total.\",\"isHidden\":false,\"lab\":\"Test.assert_equals(max_total([1, 1, 0, 1, 3, 10, 10, 10, 10, 1]), 43)\\nTest.assert_equals(max_total([0, 0, 0, 0, 0, 0, 0, 0, 0, 100]), 100)\\nTest.assert_equals(max_total([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 40)\\nTest.assert_equals(max_total([12, 8, 73, 1, 24, 11, 88, 39, 2, -47]), 236)\\nTest.assert_equals(max_total([48, 90, 42, -12, 1, -14, -36, -37, -9, -4]), 177)\\nTest.assert_equals(max_total([-99, -38, -13, -84, 66, 13, -13, -16, 14, 15]), 95)\\nTest.assert_equals(max_total([60, -70, -53, -4, 53, -66, 10, -7, 56, 89]), 268)\\nTest.assert_equals(max_total([88, 45, 76, 34, -42, 10, -22, 85, -52, 49]), 343)\\nTest.assert_equals(max_total([70, -74, 20, -56, -15, 93, -75, 98, 46, 36]), 343)\\nTest.assert_equals(max_total([-20, -61, 50, 52, 60, -70, 0, 69, 91, -36]), 322)\\nTest.assert_equals(max_total([31, 75, 78, 76, -51, -8, 17, -23, 34, 100]), 363)\\nTest.assert_equals(max_total([-79, 85, 55, -5, -86, -72, 31, -68, 13, 1]), 185)\\nTest.assert_equals(max_total([-93, -79, -26, 53, 74, -55, 68, -36, -6, -94]), 163)\\nTest.assert_equals(max_total([-100, 21, 22, 65, 19, 2, -11, 3, 24, 73]), 205)\\nTest.assert_equals(max_total([92, -43, 80, 43, 23, -41, -19, 90, 78, 31]), 383)\\nTest.assert_equals(max_total([-71, -11, -89, 60, 71, -62, 54, 11, 73, 49]), 307)\\nTest.assert_equals(max_total([61, -55, 60, -30, 27, 61, -68, -1, -36, -27]), 208)\\nTest.assert_equals(max_total([67, -44, 40, -75, 27, 71, -59, 4, 45, -91]), 250)\\nTest.assert_equals(max_total([27, -61, 81, -28, 5, 45, -81, 37, 30, 36]), 229)\\nTest.assert_equals(max_total([42, 34, -11, -41, -73, 53, 52, 34, 63, -15]), 244)\\nTest.assert_equals(max_total([-89, 51, -24, -12, 26, 52, -98, -14, -99, 85]), 202)\\nTest.assert_equals(max_total([-77, 24, 83, -67, -5, 58, -64, 21, 86, 41]), 292)\\nTest.assert_equals(max_total([-69, 74, -78, 56, -9, -28, 39, 54, -74, 30]), 253)\\nTest.assert_equals(max_total([70, -25, 78, -58, -49, -42, -77, -52, 93, -37]), 179)\\nTest.assert_equals(max_total([-30, -29, 32, -60, 84, -13, 67, -77, 94, 64]), 341)\\nTest.assert_equals(max_total([-54, 7, 18, 83, -45, 68, 0, 78, 55, -30]), 302)\\nTest.assert_equals(max_total([-81, -51, 63, 94, 22, -91, -75, 75, 28, -97]), 282)\\nTest.assert_equals(max_total([69, -34, -94, -50, -94, -38, -73, 33, 39, -99]), 69)\\nTest.assert_equals(max_total([-60, -69, -55, -69, 5, 14, 97, 59, 93, 15]), 278)\\nTest.assert_equals(max_total([48, 77, -31, 74, 39, 8, -22, 24, 87, 10]), 325)\\nTest.assert_equals(max_total([56, 24, 46, 28, 61, 38, -32, 85, -36, -80]), 286)\\nTest.assert_equals(max_total([-73, 72, 94, -5, 72, 0, 30, -93, -24, -10]), 268)\\nTest.assert_equals(max_total([-48, 75, 31, -31, 29, 74, -56, -14, 7, -55]), 216)\\nTest.assert_equals(max_total([-11, -92, 89, -23, -67, 45, 89, 10, -28, 76]), 309)\\nTest.assert_equals(max_total([37, -9, -27, -71, 62, 25, -55, 50, -56, -41]), 165)\\nTest.assert_equals(max_total([45, -34, 48, 19, 92, 73, -72, 67, 92, -32]), 372)\\nTest.assert_equals(max_total([-26, -1, -37, 25, 4, -42, -44, -59, 83, 27]), 138)\\nTest.assert_equals(max_total([-44, 92, -98, -8, -88, -65, 56, 66, -64, 35]), 241)\\nTest.assert_equals(max_total([45, -12, -73, 1, -6, -75, 94, 41, -7, -67]), 175)\\nTest.assert_equals(max_total([68, -27, -25, -54, -65, -20, 97, 61, 69, 31]), 326)\\nTest.assert_equals(max_total([11, -14, -9, -32, 79, -62, 81, -78, 62, -91]), 224)\\nTest.assert_equals(max_total([-6, -82, 41, -44, 12, -10, 48, 84, 2, -18]), 187)\\nTest.assert_equals(max_total([8, -4, 19, -81, 26, -10, -96, 47, 50, 64]), 206)\\nTest.assert_equals(max_total([1, -98, 69, -46, -88, 12, 23, 85, 6, -18]), 195)\\nTest.assert_equals(max_total([65, 46, 62, 62, 0, -79, -35, -53, 43, 73]), 308)\\nTest.assert_equals(max_total([38, 8, 48, -1, -52, -22, 12, -61, -90, 9]), 115)\\nTest.assert_equals(max_total([-48, 74, 81, -66, 33, -89, 16, 13, -82, 37]), 241)\\nTest.assert_equals(max_total([-88, 3, 30, -16, 57, 17, -46, 26, -33, -55]), 133)\\nTest.assert_equals(max_total([4, -8, 28, 100, 71, -10, 7, 36, -57, 18]), 253)\\nTest.assert_equals(max_total([-41, 73, 25, -55, 78, -76, -77, -80, 70, 78]), 324)\\nTest.assert_equals(max_total([3, -84, -65, -38, 80, -57, -75, -42, 87, -23]), 109)\\nTest.assert_equals(max_total([-92, -18, 28, -63, 99, -80, -89, 89, -95, -27]), 171)\\nTest.assert_equals(max_total([32, -100, 29, -81, 14, 19, 23, -10, 55, -57]), 158)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[0,0,0,0,0,0,1,0,1,1,1,0,1,1,2,1,1,1,0,1,2,0,0,0,0,1,1,0,0,1,5,0,0,1,0,0,0,1,1,1,1,0,0,1,1,2,0,0,1,0,2,1,1,0,2,2,1,0,0,0,0,0,0,2,0,1,0,0,5,1,0,0,0,0,1,0,1,0,0,0,0,1,2,0,0,0,0,1,1,0,5,2,1,0,0,2,2,0,0,0,0,0,2,0,1,0,0,0,1,3,1,0,0,0,1,0,0,2,1,0,1,0,0,0,0,2,0,1,2,0,1,0,0,0,2,1,0,2,0,0,0,1,0,1,1,1,1,0,0,1,1,1,1,0,1,1,0,0,5,1,0,0,0,1,0,1,0,1,0,1,1,0,0,1,0,3,0,0,0,1,0,1,3,2,0,1,0,0,0,2,0,0,0,1,2,2,0,1,0,1,0,1,0,0,1,1,1,1,0,0,0,0,1,0,1,0,1,1,0,1,0,0,1,0,0,1,0,0,2,2,0,2,0,0,0,1,1,1,0,0,0,1,1,1,1,0,0,0,2,0,0,5,0,0,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,1,1,1,2,1,0,0,0,0,0,1,1,0,0,0,0,1,0,1,4,1,2,0,0,1,1,1,1,0,0,2,1,2,2,0,2,1,0,1,0,1,0,1,0,1,0,1,0,1,2,0,2,0,0,1,0,1,1,1,0,0,1,1,0,0,1,1,0,1,0,0,1,0,0,2,2,0,1,0,0,1,0,0,0,0,1,1,0,1,2,0,0,0,0,0,2,0,1,0,3,0,0,1,2,1,1,0,0,0,0,1,2,0,0,0,0,1,1,1,0,1,1,0,0,0,1,1,0,1,0,2,0,3,0,0,0,0,1,2,0,2,1,0,0,2,0,1,0,2,1,1,1,0,0,1,0,1,0,0,0,1,1,0,0,2,1,0,0,0,0,0,0,2,2,0,0,1,0,2,1,1,0,1,1,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,0,0,1,0,2,1,0,1,0,0,1,1,0,0,1,0,2,0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,2,1,0,0,0,1,0,1,1,0,0,0,0,0,1,0,0,0,1,2,0,1,4,1,0,0,2,0,0,0,1,2,0,0,0,0,0,1,0,0,0,1,0,0,1,0,1,0,0,0,1,0,0,1,1,1,1,1,0,0,1,1,0,0,0,0,1,0,0,1,0,1,0,1],\"rators\":[\"PXAcsKkssS2yLyDv2\",\"ZWPDhGz4W4iJp3nbi\",\"v3fjGuc7Pq4yjFygS\",\"R3YoPdvDu9rxbLDya\",\"srC8SN3W4FT2Z26zp\",\"Qq2AEGMAtYKJeRRHm\",\"N2wnZXkhDH86mgjQ8\",\"6cqfmLeJatyfETsBb\",\"Jqk2uJZZxEv5wZFze\",\"2fxapKr8XGdNeaKi2\",\"JmWyLwQ4FwwPLCjgB\",\"E9ttMPTkLkKG6nZrg\",\"YTRAyZFtn9m68HBLK\",\"8JyqsSbN2FJXPr3cw\",\"hLaSooLKru65ckKvk\",\"hnyhBFWwNCz9mDfSi\",\"gb9rvGus2Jv7bjZSs\",\"ffjnHrx8Ym7A7pQWe\",\"cRpaCxYRmGcN3Nsoj\",\"9Ly8afdtofp8DXzrt\",\"C4QntmkYtB89GNtpd\",\"AasGs8AeX9Lcb9xJn\",\"u5u2YpHXiNgzDNJdX\",\"PweZwtXTDkEwxZXQ4\",\"u5jLXaWAKo7K4JvTR\",\"M8u5Pf7PK85S8cd9b\",\"zg8GmMSP2LkHBtAzy\",\"WoKygnR2BoTuSG9y5\",\"J5T8gZqiZXFuFDTQ7\",\"HQxp7NcdvF92G7bYS\",\"CBXLutgEKHKvbgE3h\",\"myXAR5qDJsBaPnff2\",\"pfgcN6p9AtBZE7DEL\",\"HMDstWCacD9szEeBY\",\"tAF9Gf6PiGogbZuWs\",\"Cyd66Eo9xMehZzgvo\",\"5LRGQaYAufQtg8B5Q\",\"XbxHXmh5ZmRN2gw3K\",\"Ycj4iTJGFyvC4bXek\",\"yKttxy9JGn5Jzwuj6\",\"QnPD4Sv6W4LHc2Qng\",\"zd9FLSzsGz3evKafy\",\"6abffx8jQDCf7kgvb\",\"MxcAyZdGHd4knaoAe\",\"dHZqT6h4JMwk5fPC8\",\"oKNAZ5BNeNWyvkiiB\",\"Tpg3ek75vt9MrhEHZ\",\"4uPCFC6LBJYZ74uYu\",\"YZsZjfvd3PnLhDJrR\",\"zGBTg8pHNJjuPXAA5\",\"6nwXmK4psZdZtvJyE\",\"7gsyqgMhbByy34TQB\",\"jeuoearPPTcGPgXhf\",\"yabtHTtycsWhcGBfD\",\"mxX4rH5ELYkdZ2Mbw\",\"qCJmsSheAmwXtcGEz\",\"4CFzv558qbGcpQwc4\",\"ArWzhxZEjsxjGF77p\",\"LgNA3FaYgZjajngzv\",\"AXcnPX68zdMiLNSmu\",\"orFLgPDw9H5MDzmwo\",\"j2wcHGHmPCHbaQEye\",\"PhceyfmFntJcn5Fhf\",\"28GnGmft835XWqNNW\",\"pMg2Zddm29zRGP6wg\",\"pwWtbXEjzuvrhEGwt\",\"zC8WrPp5BC6c2exrW\",\"bC7yAKktHb63ReMBf\",\"4tgBydK887PitgAoi\",\"cXEDKJP8GNnPStuRq\",\"gMJhLdyw3tH7L96X2\",\"qAby4AWXmTNeusvg3\",\"ZQSG2DF9TjmBGXPwu\",\"gudC5KZrykfdfGD3J\",\"Abhb2zxoinXBCoyJy\",\"eebeY4dPvLYcmzy2v\",\"N5XawSqwYquEjnSae\",\"hAQN76ynEpNyKE6LQ\",\"oXh8LZ7k6pWZMGZGA\",\"Nw5Co4WxYtGovKnmA\",\"aRqQ42J5zqCmBNd8w\",\"kvR2cWXYZYR7TiLXx\",\"boMXxa5zxP6yJHTje\",\"uw47663LqPME8btaA\",\"uygmBem9t6NgSnCX2\",\"sFdLT2Zh9n6De85f6\",\"wmiKeocyx5AvLxRbi\",\"Wv5c7WsK6R8yb4mTt\",\"XgRXeb4YyZqmiMTLe\",\"Yp7uvStL97cC9fKkY\",\"8BFSTCnoe2QggN64c\",\"N57qgAhDZ2fsRtmqq\",\"N7P4AnS8nzK4oupHv\",\"LWCzZ8mb8gwrRNGfq\",\"yAouD3PxzED8a4gap\",\"wdoG642oE9cm8y9aH\",\"hKrY8hWMgToBavfhD\",\"gv5xGeXBT73oknz9p\",\"vLrq4dEDMM2wd68Dc\",\"TMxg4W7Xyu7t8R8iR\",\"9f9LG2exEqL5gNrA7\",\"5kEyLPjTLrt7z2YJZ\",\"v8iedwMBcGiN2PHGM\",\"MKT7khMBGXzA22ykf\",\"HPMiZMZ2WGu4FWaRH\",\"8WeJLyNE4h6nJ2dNh\",\"yZvzB3qFb8pkHy4dg\",\"hS8WBiFoAjP5Js6Wv\",\"7jL3ijPqP46GJ4cfJ\",\"g5HmbDCH36PdPd6aR\",\"bg4G79DdkMaDxXvdv\",\"geZ3oLjhh9KAw7yHs\",\"KvcKs5bmWo5fK4GFj\",\"mfJcJtAYaK9TN6mHg\",\"cR3ibTMxLyEdDFCHY\",\"9HNXFh24LLvAZTyB7\",\"g4NCSxxHqHCGMpWwT\",\"3LiSLdtN58n46NEqg\",\"d4Myxr6T992RFYJnx\",\"9YtQPAffoq4WJLcAP\",\"GJfqjgFShBiHSTiaP\",\"Hantb9DenwrBHk5tv\",\"HMweSoHkGZN6tfew7\",\"9LLN4tbHA92uRLfHq\",\"C9LKGu2g5hSijvDzA\",\"iYgYbusfgvRAJ6wkF\",\"KMze4vkbmvnL2aDsi\",\"s2ZMtR9deh6Kia7pb\",\"FovJzwmhALjb7ouFm\",\"AqgCu4a5vd4nahhJd\",\"erEunWkRveQoPZyTC\",\"68r3J5vGtfW7p7qko\",\"TMRkrneSDdaCCTeje\",\"rJGeRSCjGzRuYfHZS\",\"obgiitvusGnJyzhGP\",\"puCobPgduCEZMXu69\",\"SB8QRjuWA9viDms5n\",\"BKjhZeZp8YLhd7ynb\",\"dyBcJXfbqJtjTmBZK\",\"SEjhBYzri4HHmm5Fv\",\"mQWa59kFDuqwfkdCD\",\"y8ci4crEusJKj7uj4\",\"KRSKj7ikX2ytWFmod\",\"HDksZLiRAmpnCKHta\",\"c9nu6dMCYHn5NoGFZ\",\"PWJq8oJNMEhwRGD4M\",\"6BQLjjAsf9hasbK9g\",\"gJYuGdkXEWWmGRLzu\",\"4rwxLqLs2mNZNg8NB\",\"FEYpu9RWysAgW3XnP\",\"xG4jFH32NX5WP3aMx\",\"94FLQj5fEsSg4E498\",\"jpGomfcYMrRJmSQLs\",\"hqiTnCHZxYu2nvNK5\",\"Fk9kLwoG4Brf4KsKf\",\"moFrJ4vxzxPynByzB\",\"X74H8PYX8XYkrGRQc\",\"DghD3McairtxGn8wa\",\"gZCBY2gP7xHRy5JzG\",\"PeK3KRQZZYEWNXBxf\",\"XrqNzJ2FRG8HnGiR6\",\"aEm3Wvj2rFYRL8Lrb\",\"rAfkXcFyvbbtuDMRA\",\"6SKDJwXpev4qPSzgM\",\"asFMXHqwKb4D4D5J8\",\"M8dQuMrEpP8Hc3tHN\",\"So6PHm74mfJuY2WTs\",\"DEDniTrstQYGounXT\",\"qrZB59AcTKF4SkrKr\",\"xnEa4eQMGae5ALrK8\",\"veAhgEKubmGCuoCyh\",\"Z6rYpEZZsDpc2X7TA\",\"GyduiSf6FtJbnAxBh\",\"QGKb9AGd3TWtMHZQ2\",\"B7xNs2GQLTqNcHhgf\",\"tRA43bWeW9bLciKEh\",\"x65vwZF2KcoqxGQQp\",\"gfjEP2wEAk7Dyfjbi\",\"EfuBzbisdKE5weiHa\",\"4zkChgTrb5EDzYZmd\",\"7dQYiDeTcMztbGyso\",\"QhKSLxXMGXbZcqbWG\",\"Rqud7mLt9GaDyMFFj\",\"kYWb8BwpKwunQkxeX\",\"3XBMkqYX2PT7GA4T9\",\"DrkR35NqnP9NDLbq6\",\"ZAg7PjoNJ4PPgtHiJ\",\"PcfcAbTJPrdzJN2FW\",\"BuJGC3jNcCvTugHQM\",\"a9pr6B8yNaXayoDiQ\",\"Q6gEE9dG8ERy2Xu3c\",\"Q7Yxda7dqKeYPs2Db\",\"di2hhADLx59Bj4ewM\",\"YcCLwitFMAEJSnxAW\",\"tZq3teF4PFbjFtjAy\",\"9pzFiFK3ANLjQfnr2\",\"5dHucvf2qBYyKim7X\",\"usRAT3gR3GFus28mo\",\"FzxTj4GuujhwpZM7y\",\"Lfut9z3euZ3odxFcH\",\"Afhh6h5QQ4ZwPoKo8\",\"nzKTXzTqPT4RDTHvb\",\"phBCbSCtppiyR2dwk\",\"qPSEBYMMi9WJRr8SA\",\"P4gwFe4j9nh78injK\",\"QpZ9b8ygwameoA97h\",\"SzdT9nsTbXE4ahFsv\",\"fADhdibCKmu7upByT\",\"mGzrqcrJYviuy5qn4\",\"TTgP9jcqGxCfKotZ3\",\"AF6LgdKhEdzwgRJom\",\"5JyY5eDxizCH7TYT7\",\"6c4xjEdFxdYw5xGrt\",\"kjvgTyRFyKHv44DcH\",\"64ZBqm6Z6S3wgXaF6\",\"MPCGnji5kxS9qbkjd\",\"w7SQoM5wW9wREZ4Gz\",\"sDRY37TfoncsA2FSR\",\"9RktapPikK5m2Q5SA\",\"wqcmaA9xyrm2px3Ys\",\"AkNdYK2xbbmDcZrjM\",\"Wsa72DwmWTh83YZQf\",\"agGDFTddYbZMnL5LL\",\"5RKPHpT4qSv2Sumto\",\"zwnrLPPgr5KdBq3ZJ\",\"scX957f456kQPJB27\",\"Q3Dj4QQARwgWRfjxw\",\"Stye5FSYwYNbhFHgR\",\"yTvPwwMSXG4hMCKcm\",\"66a9xX73nmTEuKs9k\",\"nxJHjePuKX2YNmcx2\",\"rzFoNTJHyapwc2zZH\",\"5HCu9Ydd86QgHDRNP\",\"586FdBhazpwJfnRYR\",\"n2BRY9X8899dcG8Bw\",\"WWD6uwvCr54JJGu5S\",\"jufL2dZQH8tBJajpr\",\"JRacQYm77Ltir8aK8\",\"MgcZBeKBAvJSaLuGv\",\"NG8PWBSjsM8mMhQEq\",\"7Z9KdHmzkoF3TQC8s\",\"xPXqCYhPEgdQJ26Qm\",\"6ENQfGxyYpG2zviBC\",\"X8BW96KGWpZAiFeDg\",\"k5mp7Hkg8w5rwiXpe\",\"Z4dHig4b5MK4beJYs\",\"Y9SPwnGra4STbviL4\",\"zHeWstaHtWNPDyLwh\",\"FRN2W8RYpJ6GPhgRy\",\"Yg5KsgKxN3tWmuEKG\",\"Epo92QDe24M6R4Qk8\",\"2CRF2WT69Z7T72uBj\",\"m7KZ5donpz5F6AR3z\",\"nfXGHENb5md7m355s\",\"4yNLEwL2rsx4EE5Nt\",\"3sGiT8qjdkzqinpde\",\"GJgQQ8WdTY6MgScc6\",\"vHCE9yxc32udWbTKj\",\"xr2fujuvCApGEzSWd\",\"nx3gu7spJkhJ35qQa\",\"2ZFoLTxcCARhwc8xX\",\"y775Z4v5u29nD6hpC\",\"SKeSSfqSmCk65vjYh\",\"H4abACFDH5t8CnnyH\",\"JS3hNM3XXkxPdg3yk\",\"ai8HyfiT9DYFrRGim\",\"aPLuemxzZ5iS57NBQ\",\"yHbTMNQXXdLzDkvhE\",\"3ahu3txFTAEibkgRt\",\"jgyuzt5BpA3ohHG96\",\"G2pMfCik8KtdaSNqr\",\"2TQBhLpgrSLbKKGMG\",\"3cF6NXq3ZEwdkgSjb\",\"2ptN2mhjFwFcHyPZd\",\"3eLqLYh2iPZuShtMY\",\"fXEddPYM3dSYwLGWF\",\"qMfpXAFRSMc6gEzCh\",\"rgvAJFwfCeYoYnFTK\",\"JKbEBybAsiKrmcqof\",\"f7TXfBLmouH4BfamK\",\"PAzNgJF54C2mYPkR9\",\"a777e8chPvJkY3tKa\",\"p3zah7ZzLWs9j4NyE\",\"NRCH4eiebS7LBjSCa\",\"RYYanpX6aRsTJSQzG\",\"Br9aaArg7qJLcNdhP\",\"XpRh7W7jGst278HTG\",\"PMTfF8TMyy9psw6ai\",\"7XjpFhwzNaeFiQctW\",\"Ne8mK9DDHG8TRkoxG\",\"wS2o3x4nrsadtC3xP\",\"3xr56NiGaGt6FPAJW\",\"rv4AzXszM3czjqbWH\",\"JgWpNj5G78uttDiE2\",\"yFDL8HndbQKRbFkPk\",\"MNKE5PyqhNdFJgm6S\",\"JXmXpBXqmsKtPuWhA\",\"xjyixzXzqqqTfJARd\",\"dXK7tiXRSEm5kjitv\",\"vx9wccR68iPfZGJZp\",\"6C94M4PPHbBumAuja\",\"b9YQPLb9ZPSADdHXX\",\"yNjkHfHESBAnCssPB\",\"xHcL9dMiAPtp9vgK5\",\"8DH2opL3T5kdcoiRJ\",\"5AHe67SapnPQeESpv\",\"dryymdkPHpQgRtW6n\",\"iEJJE8r9M4KYJyk5S\",\"n5P3xDbGTAQR4h8HC\",\"eMuCpJ2spXWkJjWNz\",\"wpC9ZTxW7iy24tzcf\",\"C6Y8ermwQopHM2N8W\",\"syRNbbPdLCGXbH2Gy\",\"KLmLKaJPfsYxp42p2\",\"M23Yf6rufJzaSYmxL\",\"Y9zyHwuyA7MJ8SPDh\",\"dhptYH6DcS7f6rC2R\",\"cN55Pbcik8wonXDZE\",\"xau8yPuE3yWkDFEmc\",\"dj5AyG5fWP8FdsSmZ\",\"iY25XNrJX2giBLvnd\",\"uX66RpufnTtXG7CKp\",\"WSLnCZNtpiCrdaXnd\",\"i5iePG5GqhJJ8HEoB\",\"8vWWL8Tx2yDai4ydm\",\"RoGGD5cpHb4ftdLDv\",\"PBnvAuiKXwjqjKG33\",\"LSNTFjWvTPwoQSHCb\",\"nTamDQutEJDBN4vXr\",\"v5WqiQCsCrZank8xb\",\"vuGJmyKLHtAuSxWLF\",\"75EzwsDHG7mD9EPTZ\",\"fTNQmMvTZhhiGBCMe\",\"KdYQN3KAT2DyTzT2a\",\"uouMMdEWBuLBWPbzr\",\"agb6ou9deennRxzhv\",\"eH9mdhz5FEWBxdTjW\",\"aLRk9SnZ4NBLLCEBy\",\"krYm4tDix6dKg6oWu\",\"dj5xjEAMBnDiXNpWN\",\"NP2RxM3eBd3drnDwP\",\"zigHw4RqWudQvG7sv\",\"mmjoLhCivx5pjfbWw\",\"oRxtFuig9K42kSiEK\",\"muCHE6pvwTaDBFarv\",\"DJdsqmTeAGDwrgYoZ\",\"2innwjWqxJHo4eRGh\",\"oBcs8GLX2ZFLXQy8y\",\"SkQcb2sRn4as5KpnN\",\"KJCDwGkoXh8qtbbKr\",\"Y54tZomhF5aYQGyZE\",\"TjeuzxKBd7b4ZajSs\",\"2zt28FKm8DvsHfqBj\",\"iCDqhZGvszrXpDRuW\",\"YnvEysTMLBk2KMSe4\",\"iS5BrkGLzJyPK7nKt\",\"tz8gZXKm6CParWiXS\",\"HwCcxujBuAjzk9Pb7\",\"Y2Y5CRMMPmdsKCSwL\",\"Xj6R2zqhgumffQCAN\",\"TPhfpB5tzQWSSn67n\",\"mzhrQ8vWtqTf9azwo\",\"iojEnnY9FsMfYzp6f\",\"FyFqWMjZQPkcsCAgr\",\"BXBReSCbChJqgxrfR\",\"whfykmA3bBzqJKzTf\",\"vfDYAQsdiAJB4pFFB\",\"dSd7wHgXGQeG5BQ2P\",\"hRiMXDZNAzyPd5tpt\",\"JEAi9mG3vvBomJ3Yu\",\"C6prbNbCwgh4GrXdD\",\"DTyNcDkiScCjgJt28\",\"w4NPSkntK5nBB2sSE\",\"WpNHMgfjZE8aNN2MP\",\"HkzyeB5JKY6PRoKnx\",\"F9GLWPxRrMSdP66Y5\",\"u7i7WPM63n42r8R8o\",\"q6QsMYNMpPNtmyTeW\",\"aKzYNPqBqb3J3ZgyD\",\"dKpesT6tnCimdoQjw\",\"RkyCNqfDeSrR8TLmA\",\"7K4emAv8FE9xcDNQy\",\"AwJD8PFqFD3Y8hy2T\",\"QPEejhBicc4eB66xF\",\"ta5CrWnBCRusD2WMo\",\"FM4ShiyqhkfkyWDy5\",\"vCXAR9dcbRxmwbCen\",\"nrgrxTy6dmtQwrFgx\",\"NrRa4TS6uZR9xuXRt\",\"yjtdwc2AC4jA2RWtn\",\"HqmxnQJM66Y57twhn\",\"BajWtLookqBgcwmyv\",\"vAbK8sCfKyFC78HYg\",\"PEZjvhf6N3hYTgSrq\",\"DkeEd2uhXypnPDnNT\",\"Nc3ydHrrJXkE9a48m\",\"g8BLPxHXsMKff5c9A\",\"kNrnnMxhFZztMTBAX\",\"zXgwEs94QFkLraLMH\",\"rGA5sQC5vSaqCmh6E\",\"zyFPLXxJzpku4xZYt\",\"5rGQbcH4AabTkXhRp\",\"6HgMANhu6WiGyXSGN\",\"pwJAQRdX4FAFdymZh\",\"QCNbhwB72essyThvE\",\"csxCzWqzHW8JsrzQq\",\"kQ86mSGBiBQQvXzQR\",\"kREyqnZuEqzWrjSkC\",\"4bnRYgbirDp5unwGQ\",\"CWnZYFNAzm5K8NiiC\",\"wNuGsAdwdPtRn9JXz\",\"wCXRmtaqTLTT5S3ce\",\"DDD5tzD2m8bcntBB8\",\"uqSa9nyEpr786ZkgH\",\"8aEGGQPkGesWwoaom\",\"m7hHWJrBub7ueaokh\",\"Q9afpRu3u8zuWuzLQ\",\"GWjEcCYSqDNZS9rQN\",\"7h6RQYLtSmZdwkrpP\",\"XA57y3cGHXTqqneoL\",\"a2Sb9bxiS8GaAu7M8\",\"Dq24MSpogRmq6L4hX\",\"qD2LrwaDrSdiybLKY\",\"WjuN7douP7Fe26xYE\",\"dxKw3G4pTZWiS6PEm\",\"DPi9QGLctq2y76KuE\",\"PnzR8TWfcT5QHrek8\",\"capjEKEghfZ2tj5pC\",\"nC4sPB69yYuTSks9T\",\"TzEDcbz2PZM4Cfgit\",\"YG3vSsRurbQ2KGnyh\",\"BSxFyfmt5GnRApPw7\",\"Kh3Pc2ZRusurLaMyP\",\"QRv96jmNaYsWkxQEG\",\"FcMu2WPvDobEbWhyr\",\"Cg3LKtEAJpsrdWroG\",\"yJgsKN8WPu7aSicEM\",\"Cybtjz3cF7RgoiqrN\",\"RCzpsCinz5SQnBAta\",\"vfTKm6ChiZFd3cDDy\",\"omTzG6P3YKpb64LmZ\",\"rrSC943cCKNG48sH4\",\"sKfrD9gjCDHuqLzSk\",\"u72ipcjbNDSkWX8Gw\",\"runmPkgMmJXZu8mHo\",\"spYFrLhsowc47QNNE\",\"CccXoqbXeoMydtEhh\",\"e4iESukvp745guEeE\",\"oqnKnp8g6g4fKFKNt\",\"wRttWTM59y8m5mx7x\",\"mAARx8JHyScLzDA5W\",\"j3xjkcQ7o4ERPBjwh\",\"ZEjaJfFNNtjY85eue\",\"8teSHp77vHhhvJWiS\",\"HAtNvtvpTjB2DkhnG\",\"Rzd7NoyBQDzkLQnp5\",\"s8e5oetjiQBj578hj\",\"PPhq9DcoWd4auHM4s\",\"6akGaXW83HnSC5PSy\",\"k2Eo3wyfZZ6KxvKhN\",\"4hzd4qde3g9We8N4E\",\"qxcBxW68yuoB3hoRY\",\"6428wKHtwKkFdvBs5\",\"3H276eDisS2QHMn9L\",\"RnY25enEBE8T9P5GS\",\"RGMbFMZXJr7DhcAJy\",\"AaKWw8amcFYLrEpNz\",\"oyKcm3zqdy8Ko5P5d\",\"CB48GHbw7xtwmiuPn\",\"pyuo54af62cmuGgow\",\"4airvwdXr4Xd5vgHK\",\"Tf7TJFSPktJBgLA4k\",\"iBsN2jda8GGPgqj3u\",\"g9FyJ8yeT9ic97Qp2\",\"GGprTwrkjuccmrQRg\",\"LScavCBEeSxjXqxpA\",\"J3upzLHuEwXH7Z2hx\",\"vCeeMuYDbz3MB4vsk\",\"yEvXDzXnEPNz6tTCK\",\"iF4tdvn5sA9CM4T6T\",\"FuYTQcDNjct58rqPa\",\"biWB5ezaqJuntQ7oC\",\"sbJcFfQjQ59Wfg4Cd\",\"BtdZezHfckxRLm7xR\",\"AGGpkckh9tB3vYJAW\",\"DAhoDmrLmkoRsJhRx\",\"AhnDjTug6oyETrN96\",\"EfxwqhYdapX3dMQC2\",\"k7f82n7oxaWsmhdzT\",\"dky93oMkJsJjEJKk2\",\"dDFzTqzPhpkeTcG2b\",\"MnrmRMy2PP3Mk4sSY\",\"fKsHKQ9ZTyEgmcQmQ\",\"HcdukZiuzgvoHjjz3\",\"s4YHxEDBTTq5EBMRs\",\"YRAzEBJoLvSaiPtYx\",\"dYPkStFnLvAMsHSzZ\",\"emJ8qzP9ucoMTaqR9\",\"migNc2HGygHufcxYn\",\"nJXgbSQozcoE8Wn4N\",\"CQhaiZqQcP87YteSG\",\"vgT3ehH2o2KC94NsY\",\"qZ3h2ijjMyDiZFibz\",\"9FCeFzjPA4jrQ7oHW\",\"Ds7L5bksw2QRHjrKL\",\"7D76ZPLjgjZideoy9\",\"Amg84cBAt8p7GX34n\",\"93ADqsBQnwTEosjbq\",\"oHbErJxjYJhD66d5w\",\"5S9nX4rKsnCcnv4Cz\",\"vDuJoZJRFbGyzLJ3d\",\"FSe2mfd98g84k5DW6\",\"wypdvuJQZB2TFyb2g\",\"9uRZernrbaMo4wRW3\",\"5XiuAqicKD4hBdu63\",\"RSTdK2S8CecymSS6h\",\"igLmeTgCMEPu7fQTd\",\"CkcqajsaNu4nso9oY\",\"5HTSi5wQNAdLm57LB\",\"kAkLAF9T5McSxXJCT\",\"uN5t57RETi5y2z5W8\",\"n93uwjdirjyRCRATo\",\"KEmTti9Tza8A2FLQW\",\"xNCLJDm9Bni6gByMz\",\"QTZTmQEmkPv5sxQL4\",\"enmGKZK3YpeBA2rSS\",\"PC3pLs36zNzpRDSuE\",\"ZqjP4M6dzu32To33K\",\"xP8kzdvDHBaDRGJfb\",\"opcrDAS4AgXqrJXnb\",\"DpnYcMphntjsQ96qg\",\"XanFBoer6Lw9KXvuE\",\"xGpqoGZ47sYLJ4ty9\",\"GdKtjPh8TcfmJuduv\",\"ejXMnyXqd4R6GdKE9\",\"Krto2sGMfGWBLcL7n\",\"5hQnRWiKkhgKJXNMP\",\"SoRHbR9JnqHG8BZZ9\",\"AFfw7cGg83uYk2Miy\",\"W9eswrEEzJHtrQbYW\",\"pfbrH83s66L2EZQsH\",\"gEqTEX2vrEzoYcFas\",\"Lg4t6SEWgtYz4u7Cj\",\"mQjpf5TyF358J8Anz\",\"8PwfYqoDQFThzNtvf\",\"fW3mQfbTKhp7enxGP\",\"hERDiXzMt3bagzfKp\",\"DDFvEXnueWTSBn7EX\",\"5wCHxMQ5Km2bjqcGZ\",\"3YDiP56vf8NysvNpX\",\"qkuvEvJycTXvF22cy\",\"7DfJbZeNNQ5e4znvN\",\"ZyrfhDTZHb8LymH5b\",\"7zd88coQRZm85KyBa\",\"pPpmP7xeJzGgK362R\",\"F7wta4nHmabMr9dfd\",\"buX4mCQhtXCfBjeno\",\"MyyfuAJrdaoBE2xGk\",\"5CsHudxuDESxmjTPW\",\"Wp5CZXqvjwTpt5SKN\",\"LQxof8pGabGuWP7Gn\",\"3sD2EHTzJEhwWusNS\",\"7KsymxNN9S8ZG5oQe\",\"DoRnR5xcPeQtvsNgc\",\"CN2Jg7GX3c57eXiCp\",\"fHeYpHLgzDPqcoDh6\",\"oo77LnhNgKaNJKaWj\",\"XeNskNoh5DcHuKTWX\",\"NzbRqGWspQnWMoDrF\",\"iYXdNw7tKcgA3QwBX\",\"icsLTze3op3SPQbzy\",\"udPrCoSWY6sHT2qLp\",\"Gfjre5fz3AHYamm2e\",\"iZhkeyxpRsrNhmznM\",\"eYfPWvZwnJQkHbSTK\",\"srJ34BaybkQh3qRkM\",\"PexKJN2gNdthuHKxZ\",\"ghMkPtdFCpM6w8nax\",\"2MjzJ7yxh3eT3xbng\",\"nTiHKkA74LNuZmZAB\",\"v647CD8GKNeTbqSH6\",\"6QquZCZrdhJQw3ZAk\",\"TmM3AN7g3fkh69ycj\",\"T78CHCScDRZjf5Cjy\",\"YwAvPdqD6Xi2qjapZ\",\"LW8PqW4HFXWfoJGo6\",\"QC7hqZ5o4vjwNtxdo\",\"q9FfWNiMDKRiaCJ5j\",\"vCxuabDxEv9YC3Szb\",\"fe3gsFT3MbZ4azEC9\",\"HBuJYgW2eRBJp9FoG\",\"XD5nmvKQchKezPXhy\",\"m2kfE6tTgty4vtWwg\",\"b8cX9sc3oXiAiaHMB\",\"S6FmA9hRfExghscS4\",\"eBBSiBrLntfRfqRwF\",\"pnkBesnLDfK7CfjNu\",\"oqPwBd5aaE5x6Ybbm\",\"sX9GZp3fYyQLrBKMJ\",\"GZgFDSZdgKBuixp22\",\"zERid8pE9JnysiN5Q\",\"nFbmNzMQ38TncmfQX\",\"GwJiyLRmLAC6Q8wAj\",\"pRvX3AjNx3AA4fpPR\",\"M2gFMJkocQSY6bsFR\",\"fDxLFpkZDLDfpG3Gy\",\"cCFRcwA8Z4TCwsMGo\",\"YaybbCdfjFQmsfgtp\",\"2vCfHGGtaoeC7SFv2\",\"jb9RLyyuo565bKDzN\",\"GMQM52abpXNgEBote\",\"JskJ7Q6dJqnkrs2fe\",\"8EJ4j2fcfjTJ7Zrzu\",\"7q8oBsCHwn48Ppnrq\",\"uvLimfW9x3bCp7huQ\",\"XujK3rHd3JcM9TLJy\",\"JhX7jvtpwNyxcc39m\",\"2QGRoQn2dRq3scu7k\",\"C5h42RTzbdrpPfeZo\",\"4bb7pim4ewTwrMTEA\",\"CHvzhtXnv8HTbPQ56\",\"Dwpiei4miJi7ry8W4\",\"DfHHpvnubuFmeNky9\",\"DFpZcskPncmo7fuzR\",\"s5M5RvgqR9BhB9JoC\",\"XEjiqMFvDTLTo2X9G\",\"HM7vdu5scNv2NcfXF\",\"T6iBEE2jp7f7iEF2P\",\"4TmgHkn5vqyHK3sYC\",\"9qoWqLcHGiDX429rE\",\"YmQb9Mo4Xcg2vzgbn\",\"a2Kmh6ekWqQQooHiQ\",\"RTER5uJdW4khkiNbY\",\"mvJBakQ35CWAnbbEZ\",\"PqFpDvmcaPk4yE5xm\",\"T6Rm8mREPMZSftzrC\",\"jkbavR2ATFJcpmo8M\",\"JiSpvq6C7azQEmENc\",\"h9azrsq7TmmPWYCK7\",\"sHjfbGQGLHE6JR6qu\",\"TiDFmxf3QEpbfXi4f\",\"x2Cz7S8rCKJqCE3Xe\",\"yr822PZmmiDDenxpB\",\"hRfdHT8bWztZuCqzi\",\"hZ2JDAEG2P5rMLWEW\",\"FiaTpm7ehfDv43wSG\",\"jWbd7SYDzLPjc9EDh\",\"eHcgvkTGsH7ZziqBo\",\"bSeEB8ypsxnQxX2SJ\",\"TCvpT4EPb8qNssNB7\",\"C7R4pi5F5xpN7CaYY\",\"Afnps7TJQuS9sipMb\",\"pQwhNKiCne4gEZgcn\",\"Ki9t2KmA5MWfGJXD8\",\"zBk2cwJ9SLAhFuM3K\",\"nZdRDXTfWKr8j4Arc\",\"gKnWjDjwrJh7MK2df\",\"cdXmwjupCXSvJTSNo\",\"yXGiiSAR5nBHnH3yr\",\"aN6owKqBeZj7ZefFR\",\"d9LBRxvADNBB5QJMB\",\"5nbHH4eApn6So9h2n\",\"ecytnKJxjCPk8Kbif\",\"fGvJRtjbJFJJZLCnW\",\"5QN8R22z43SrwoHDz\",\"B4y8aoyXJtskYPFEL\",\"PmRyaLmhAF4MMLBtM\",\"dzS6WBTMHyFEag6Fp\",\"rhS8qXRjZcpDXkwnE\",\"jcPZ5ySXseCB7Ec3x\",\"wjc4iejpErBhxWwHo\",\"arWdYjT3J9QKzoPLd\",\"rF97GDLqCgynr7BaD\",\"gbGzZz5Yq5hT357v8\",\"afvP29FhRou2bTaav\",\"mw9464S5dnenqzvpm\",\"AQSqD9oNv2uPfxZCR\",\"tR9grPBLncwacBTzr\",\"CdXigydGTBLgA577m\",\"fMp8sPsKSECdfgF9j\",\"M4vq8ATaS9Jg5X7iP\",\"r83jJeskFETo3RLhZ\",\"4sSXLSBZDxK2Swoo7\",\"suArq5BbSy7gD6xri\",\"FT2wBacm3JxrYmZDW\",\"EE6qCDCRphjXXdE3n\",\"iBjwTeXx4KiWffy64\",\"PKu9i6fmR67WGCgad\",\"AwXQLqnTYzcCQrnqQ\",\"Si3HYCLMe8PM47rRt\",\"Wi4H6ayKsNDWWQCG5\",\"dqwatKFAeGpjmf5dm\",\"4akHBgnDEDj3Rkv5n\",\"Cnx3Ss6zhhKExXxbC\",\"mdRQaGT98ycMt87S2\",\"x6zWWvmst3aGNr3Cr\",\"szQg8dxKNNre3v3Jk\",\"acENs2fSF9d7hkTZx\",\"o2Q8uM5DwJnSRmerd\",\"PJu3WcTpfRrvHfQiS\",\"K6S8HCswXg68EWHmo\",\"BrTDhPJcACL2bsrpJ\",\"FGEeCTorXbX3WvjFW\",\"3SgSNoAB3sxaYeT3w\",\"peCvTbjQBgdWo53Wv\"],\"total\":752,\"quality\":[4,3,5,4,4,5,5,4,5,5,5,5,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,5,5,5,3,5,5,3,5,5,5,5,5,5,4,5,5,5,5,5,5,5,4,5,5,5,5,5,5,5,5,5,5,5,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,4,4,5,1,5,5,5,4,5,3,5,5,5,5,5,5,5,5,3,5,5,4,5,5]},\"flags\":1},\"summary\":\"Given a list of 10 numbers, return the maximum possible total made by summing just  5 of the 10 numbers.\\n\\nExamples\\nmax_total([1, 1, 0, 1, 3, 10, 10, 10, 10, 1]) ➞ 43\\n\\nmax_total([0, 0, 0, 0, 0, 0, 0, 0, 0, 100]) ➞ 100\\n\\nmax_total([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ 40\\n\\nNotes\\nYou can select any 5 numbers from the given array to form maximum possible total.\",\"tags\":[\"arrays\",\"language_fundamentals\"],\"timestamp\":{\"$date\":1580751189223},\"title\":\"Maximum Possible Total\",\"quality\":4.711538461538462,\"family\":[{\"_id\":\"xbBkvdPeKtfLnw2ir\",\"language\":\"cpp\"},{\"_id\":\"TM5f33Mpu52m2jcat\",\"language\":\"java\"},{\"_id\":\"Wg3pBiH8HQggcfaTg\",\"language\":\"javascript\"},{\"_id\":\"73Xx5nt5MH6J2ponN\",\"language\":\"php\"},{\"_id\":\"YisvASuJeaooFLesN\",\"language\":\"python3\"},{\"_id\":\"cqrirPxJPYiiXe3Xm\",\"language\":\"ruby\"}]}}"]