a["{\"msg\":\"result\",\"id\":\"1637\",\"result\":{\"_id\":\"RBzzMdGPwnpSxCTCs\",\"author\":\"Evgeny SH\",\"authorId\":\"8PwfYqoDQFThzNtvf\",\"code\":\"def bridges(s):\\n\\t\",\"difficulty\":2.125,\"quality\":4.666666666666667,\"familyId\":\"zc5bx2T2EvhLK7n95\",\"instructions\":\"Create a function that returns the count of all bridges in a two-dimensional grid.\\n\\nBridge **B** should be counted if:\\n\\n- It connects from one end of the grid to the one opposite to it.\\n- It is unobstructed.\\n\\n### Example\\n```\\n\\\"#########/#       #/#   #   #/#   #   #/#### ####/#   #   #/#   #   #/#       #/#########\\\"\\n```\\n\\nIn this case the number 4 is returned because, when unraveled, the string reveals four bridges that meet the requirements listed above as shown:\\n\\n```\\n#########/\\n#       #/\\n#   #   #/\\n#   #   #/\\n#### ####/\\n#   #   #/\\n#   #   #/\\n#       #/\\n#########\\n```\\n\\n### Notes\\n- Slashes `/` act as separators.\\n- Intersecting bridges **can still count**, as shown.\\n- **Vertical bridges** count as long as the requirements are met.\",\"isHidden\":false,\"lab\":\"from time import perf_counter\\ntic = perf_counter()\\n\\nTest.assert_equals(bridges(\\\"   ###   /    #    /    #    /#   #   #/#########/#   #   #/    #    /    #    /   ###   \\\"), 2)\\nTest.assert_equals(bridges(\\\"         /         /         /#########/#   #   #/#########/         /         /         \\\"), 2)\\nTest.assert_equals(bridges(\\\"#########/#       #/#   #   #/#   #   #/#### ####/#   #   #/#   #   #/#       #/#########\\\"), 4)\\nTest.assert_equals(bridges(\\\"# # # # #/ # # # # /# # # # #/ # # # # /# # # # #/ # # # # /# # # # #/ # # # # /# # # # #\\\"), 0)\\nTest.assert_equals(bridges(\\\"    #    /#########/#########/#########/#########/#########/#########/#########/ ####### \\\"), 8)\\nTest.assert_equals(bridges(\\\"#########/    #   #/ ########/    #   #/#########/#   #    /######## /#   #    /#########\\\"), 4)\\nTest.assert_equals(bridges(\\\"#########/#########/#########/#########/#########/#########/#########/#########/#########\\\"), 18)\\nTest.assert_equals(bridges(\\\"# # # # #/# # # # #/# # # # #/# # # # #/#########/# # # # #/# # # # #/# # # # #/# # # # #\\\"), 6)\\nTest.assert_equals(bridges(\\\"### #####/# # #   #/# # # ###/#   #    /#########/    #   #/### # # #/#   # # #/##### ###\\\"), 2)\\nTest.assert_equals(bridges(\\\"##     ##/##     ##/##     ##/##     ##/#########/##     ##/##     ##/##     ##/##     ##\\\"), 5)\\nTest.assert_equals(bridges(\\\"### ### ###/###########/#### # ####/###########\\\"), 9)\\nTest.assert_equals(bridges(\\\"####/ ## /####\\\"), 4)\\nTest.assert_equals(bridges(\\\" ###/### / ###/####/ ###/### /### \\\"), 3)\\nTest.assert_equals(bridges(\\\"## ###/  ##  / #####\\\"), 1)\\nTest.assert_equals(bridges(\\\"# ### ### #### /## ### ### ####/ ## ### ### ###/#### ### ### ##\\\"), 1)\\nTest.assert_equals(bridges(\\\"#\\\"), 2)\\nTest.assert_equals(bridges(\\\"# ##/####/## #/####/# ##/####/####/ ###\\\"), 5)\\nTest.assert_equals(bridges(\\\"#/#/ /#/#\\\"), 4)\\nTest.assert_equals(bridges(\\\"###/ ##/# #/ ##/###\\\"), 3)\\nTest.assert_equals(bridges(\\\"##/# \\\"), 2)\\n\\nprint('t_sec = {:.6f}'.format(perf_counter() - tic))\",\"language\":\"python3\",\"summary\":\"Create a function that returns the count of all bridges in a two-dimensional grid.\\n\\nBridge B should be counted if:\\n\\nIt connects from one end of the grid to the one opposite to it.\\nIt is unobstructed.\\n\\nExample\\n\\\"#########/#       #/#   #   #/#   #   #/#### ####/#   #   #/#   #   #/#       #/#########\\\"\\n\\nIn this case the number 4 is returned because, when unravele\",\"tags\":[\"strings\",\"loops\"],\"timestamp\":{\"$date\":1601127502993},\"title\":\"Broken Bridge II\",\"stats\":{\"completed\":{\"total\":54,\"ratings\":[1,1,1,1,1,2,3,3,2,2,2,3,2,3,3,0,3,2,2,3,2,2,3,5,4,3,0,3,1,3,0,0,1,3,3,0,0,1,3,2,2,3,3,3,2,3,3,4],\"quality\":[4,5,5,4,5,5,4,5,5],\"rators\":[\"8PwfYqoDQFThzNtvf\",\"J3upzLHuEwXH7Z2hx\",\"DPi9QGLctq2y76KuE\",\"tAF9Gf6PiGogbZuWs\",\"aEm3Wvj2rFYRL8Lrb\",\"qD2LrwaDrSdiybLKY\",\"xn7uGNKeAwPEkP9oA\",\"TZizQsWMFF5b2KCf4\",\"6dZFWNGPH8GKYA8sN\",\"m6TC9gshrwufWqAYn\",\"axdSNLZpiCDF8RS6n\",\"c2u7qfdaYxcyuydtu\",\"s5M5RvgqR9BhB9JoC\",\"Yp7uvStL97cC9fKkY\",\"SSqGKf3pKQZtjhaSe\",\"R4SjTgDnpigJYDLyL\",\"yjtdwc2AC4jA2RWtn\",\"CLypXaZksY99mpRCm\",\"tpxMgkGSHwBjS95Ta\",\"oBcs8GLX2ZFLXQy8y\",\"gXTAie79kiw28tx5u\",\"8JyqsSbN2FJXPr3cw\",\"J5T8gZqiZXFuFDTQ7\",\"gJYuGdkXEWWmGRLzu\",\"Wv2vJnEj8ywNmARoF\",\"iS5BrkGLzJyPK7nKt\",\"TePz42wc3ZZ5CKA6L\",\"Jqk2uJZZxEv5wZFze\",\"gb9rvGus2Jv7bjZSs\",\"iojEnnY9FsMfYzp6f\",\"hnyhBFWwNCz9mDfSi\",\"d8qtzoLB264iP8tdY\",\"cAP3n5NY64uoMwzRR\",\"AasGs8AeX9Lcb9xJn\",\"GGdmhAvxXhqhhibJN\",\"HqmxnQJM66Y57twhn\",\"fznzd3qnvtbFkkizz\",\"srJ34BaybkQh3qRkM\",\"2PufnQcsHsfymufX3\",\"gKnWjDjwrJh7MK2df\",\"T6iBEE2jp7f7iEF2P\",\"8sNv5PTHa7XQ8bNqR\",\"RoGGD5cpHb4ftdLDv\",\"jCjCvyhqhpebkJn34\",\"BrTDhPJcACL2bsrpJ\",\"AhZwrR5qRuHYSxCd9\",\"yod5YhKtPqw2GfG9B\",\"buX4mCQhtXCfBjeno\",\"ey3CASd6Je5LEJzfB\",\"suArq5BbSy7gD6xri\",\"Ds7L5bksw2QRHjrKL\",\"xBEHvQwCrppFNQibG\"]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"8PwfYqoDQFThzNtvf\",\"family\":[{\"_id\":\"6goaNCgXQLxCMW5AQ\",\"language\":\"cpp\"},{\"_id\":\"RGwqnBMmbDKJpZs2a\",\"language\":\"csharp\"},{\"_id\":\"gH9RyFhkzSBTaA7PD\",\"language\":\"javascript\"},{\"_id\":\"RBzzMdGPwnpSxCTCs\",\"language\":\"python3\"},{\"_id\":\"Gkz8qw2gcrnEyHT4v\",\"language\":\"ruby\"},{\"_id\":\"EHx2RCu6fcJe7rQuA\",\"language\":\"swift\"}]}}"]