a["{\"msg\":\"result\",\"id\":\"1444\",\"result\":{\"_id\":\"fnLXJnqoDFTJNZk5r\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"def sort_contacts(names, sort):\\n\\t\",\"difficulty\":2.0476190476190474,\"familyId\":\"boF9CobvmPifNngt6\",\"instructions\":\"Write a sorting function that takes in a list of names and sorts them **by last name** either alphabetically (`ASC`) or reverse-alphabetically (`DESC`).\\n\\n### Examples\\n```\\nsort_contacts([\\n  \\\"John Locke\\\",\\n  \\\"Thomas Aquinas\\\",\\n  \\\"David Hume\\\",\\n  \\\"Rene Descartes\\\"\\n], \\\"ASC\\\") ➞ [\\n  \\\"Thomas Aquinas\\\",\\n  \\\"Rene Descartes\\\",\\n  \\\"David Hume\\\",\\n  \\\"John Locke\\\"\\n]\\n\\n# Aquinas (A) < Descartes (D) < Hume (H) < Locke (L)\\n\\nsort_contacts([\\n  \\\"Paul Erdos\\\",\\n  \\\"Leonhard Euler\\\",\\n  \\\"Carl Gauss\\\"\\n], \\\"DESC\\\") ➞ [\\n  \\\"Carl Gauss\\\",\\n  \\\"Leonhard Euler\\\",\\n  \\\"Paul Erdos\\\"\\n]\\n\\n# Gauss (G) > Erdos (ER) > Euler (EU)\\n\\nsort_contacts([], \\\"DESC\\\") ➞ []\\n\\nsort_contacts(None, \\\"DESC\\\") ➞ []\\n```\\n\\n### Notes\\n- A list with a single name should be trivially returned.\\n- An empty list, or an input of `None` should return an empty list.\",\"lab\":\"Test.assert_equals(sort_contacts(['John Locke', 'Thomas Aquinas', 'David Hume', 'Rene Descartes'], 'ASC'), ['Thomas Aquinas', 'Rene Descartes', 'David Hume', 'John Locke'])\\nTest.assert_equals(sort_contacts(['Paul Erdos', 'Leonhard Euler', 'Carl Gauss'], 'DESC'), ['Carl Gauss', 'Leonhard Euler', 'Paul Erdos'])\\nTest.assert_equals(sort_contacts(['Michael Phelps', 'Jesse Owens', 'Michael Jordan', 'Usain Bolt'], 'DESC'), ['Michael Phelps', 'Jesse Owens', 'Michael Jordan', 'Usain Bolt'])\\nTest.assert_equals(sort_contacts(['Al Gore', 'Barack Obama'], 'ASC'), ['Al Gore', 'Barack Obama'])\\nTest.assert_equals(sort_contacts(['Albert Einstein'], 'ASC'), ['Albert Einstein'])\\nTest.assert_equals(sort_contacts([], 'DESC'), [])\\nTest.assert_equals(sort_contacts(None, 'DESC'), [])\",\"language\":\"python3\",\"summary\":\"Write a sorting function that takes in a list of names and sorts them by last name either alphabetically (ASC) or reverse-alphabetically (DESC).\\n\\nExamples\\nsort_contacts([\\n  \\\"John Locke\\\",\\n  \\\"Thomas Aquinas\\\",\\n  \\\"David Hume\\\",\\n  \\\"Rene Descartes\\\"\\n], \\\"ASC\\\") ➞ [\\n  \\\"Thomas Aquinas\\\",\\n  \\\"Rene Descartes\\\",\\n  \\\"David Hume\\\",\\n  \\\"John Locke\\\"\\n]\\n\\nAquinas (A)  Erdos (ER) > Euler\",\"tags\":[\"sorting\",\"arrays\"],\"timestamp\":{\"$date\":1552796480578},\"title\":\"Contact List\",\"stats\":{\"completed\":{\"total\":218,\"ratings\":[2,2,2,2,2,2,2,2,2,2,3,3,2,2,2,2,2,2,2,2,3,3,3,1,2,3,0,2,2,2,2,1,3,3,0,1,2,1,0,2,0,3,2,2,3,3,3,1,2,2,3,1,2,3,4,3,3,0,2,2,3,3,2,2,2,1,2,1,3,1,1,1,3,2,3,2,3,2,2,2,2,1,2,2,3,1,3,2,2,0,3,3,2,3,1,3,3,3,3,2,2,5,2,2,3,1,2,2,3,1,2,2,0,3,2,2,3,3,3,3,0,3,0,1,1,2,2,3,2,3,0,1,2,3,3,0,3,0,2,2,3,2,3,2,3,3,3,2,2,2,3,3,2,1,2,1,0,0,3,0,3,3,2,0,3,3,3,0,2,2,0,1,1,3,3,2,2,0,3,3,3,3,3,2,1,3,3,3,1],\"rators\":[\"BkPgkDQGHm66X4Qai\",\"qaR8DnWrTk8Mus5Q2\",\"MFFKiEMmuLzZgStED\",\"gb9rvGus2Jv7bjZSs\",\"Jqk2uJZZxEv5wZFze\",\"J67hC7LSEYS5JwhPj\",\"8JyqsSbN2FJXPr3cw\",\"yZvzB3qFb8pkHy4dg\",\"5JFQgt6KFihmXfHKm\",\"tAF9Gf6PiGogbZuWs\",\"T3ZAuoMrJjvZwN55B\",\"ab7BsQuhDo3QgE6bh\",\"FikSPhcrHBpQ4CyGC\",\"kQH5b8MXJunh84Czq\",\"PFjMZGHNAPTkgd7tq\",\"AF6LgdKhEdzwgRJom\",\"nF9pCCzbGDhzvWgaw\",\"6u7yc9m6HuHGbHzph\",\"C9LKGu2g5hSijvDzA\",\"hsrNYf3WbexXJKhCq\",\"jHrtWDGBhkbuWa7fG\",\"yrCNkFYQBEDE76eFS\",\"AYaEkTWLMmfzpwejr\",\"jYJ26SiLKBu5GRumq\",\"WkWyq9wMkZhXB6zsD\",\"Dw8RZgg5iHBuFrWwQ\",\"cR3ibTMxLyEdDFCHY\",\"N2wnZXkhDH86mgjQ8\",\"nfXGHENb5md7m355s\",\"T2vhHPhRR96hRizq8\",\"XKi8iZXBCHCaebSHh\",\"gMJhLdyw3tH7L96X2\",\"3mLcjFCw4MPHAEcKk\",\"jQGuidt8ocuvRGioE\",\"FgkYtHLxeD8pETJ8T\",\"3XWw4ui5Tipb2Qz8o\",\"PKS5S5aJchwGfjGwM\",\"aCNWav8S8Try9RkC6\",\"TgjcWxsTjar7snQx9\",\"N4QjiZzLyunefpXeS\",\"HQxp7NcdvF92G7bYS\",\"Nj6FwgBtAXsaQwsM2\",\"vuwheqp25x7RkBHXn\",\"EXZfPb8YH28EL8Rh9\",\"7BvK9WWXi9Arqh63Q\",\"rPvq3ZKT8KGQoBdLx\",\"7hzSvcYdq6QjoRnJY\",\"fAoLuqbGvHn4w2PHf\",\"otXtuQygbcYATMZoP\",\"oqGkxvASXq52iTDvp\",\"Jg8ZSRXe3NoDMCqGu\",\"qBaLGrm952ii9K23M\",\"HqmxnQJM66Y57twhn\",\"EFzxnQ8N4qiHG7AS6\",\"2fxapKr8XGdNeaKi2\",\"JKb5rhL6DKcCAypF9\",\"C4QntmkYtB89GNtpd\",\"yKttxy9JGn5Jzwuj6\",\"K96FwtfDDN5WM4Bb7\",\"8PwfYqoDQFThzNtvf\",\"ydEdzuCCZt4yny9Rq\",\"s5M5RvgqR9BhB9JoC\",\"3j6Z7of7jgwFmeKxW\",\"4Sntowj2cbMFRDMJa\",\"6ShafRStcvew4GfCh\",\"u5u2YpHXiNgzDNJdX\",\"tK9oBgXjqPsPrGowj\",\"aW4DkonHaJw6Q8PyP\",\"2innwjWqxJHo4eRGh\",\"QnPD4Sv6W4LHc2Qng\",\"AasGs8AeX9Lcb9xJn\",\"JYbyC7EiD3PuwuxEv\",\"wZoxzQDbso9SMAPkY\",\"4CFzv558qbGcpQwc4\",\"BeFnbPbMnAM2SjBdZ\",\"WLFPvm65aHfgwQy7N\",\"itDTNAvHdhpXPhg6D\",\"Z4Wd4iFu5mdjSJDSA\",\"w3A7cBWyAfukk6xEQ\",\"rnsXDmJtoYR4EMwsn\",\"v9KtC8YLbMWmXiW2H\",\"euPBBaYXyS8RBr9KB\",\"mDWNyaaQ9hvPCRzSd\",\"aEm3Wvj2rFYRL8Lrb\",\"Zhy5X7BZnqk8hacEw\",\"ZNnsMeNkdDhHjSrZb\",\"YRstQuthRkFeBiXug\",\"gJYuGdkXEWWmGRLzu\",\"kYWb8BwpKwunQkxeX\",\"3Zceb8GudqAG3onG3\",\"Yp7uvStL97cC9fKkY\",\"EjbDDFRECrzQDkzrX\",\"J5T8gZqiZXFuFDTQ7\",\"vhLJwgSRY2J7aGD2i\",\"gSFJPsMXnqAog3Q9f\",\"nPfdEqn8RZmDzAeMW\",\"3pxHTZBsv7MKzFG6Y\",\"n2BRY9X8899dcG8Bw\",\"KdNDysEsy2TW5QRJ2\",\"ekQh3jzgGLsEMbKo3\",\"HF28xZKSLM9wEuqNg\",\"yr822PZmmiDDenxpB\",\"Cc2Cgj4MWXZxsTooC\",\"4rwxLqLs2mNZNg8NB\",\"9pzFiFK3ANLjQfnr2\",\"rgvAJFwfCeYoYnFTK\",\"MKT7khMBGXzA22ykf\",\"DEDniTrstQYGounXT\",\"GmnxPhfiD7roRhsRX\",\"GamaMNrnhrjj5tXTx\",\"a777e8chPvJkY3tKa\",\"W5TajitmCyxz87zAC\",\"hnyhBFWwNCz9mDfSi\",\"pDvFWMCD9fQwoBPcu\",\"KRmxvA4mWgfKvHmYN\",\"bJxaKHJqR82EWw8Su\",\"5s4qhuRJijYaDNXva\",\"JS3hNM3XXkxPdg3yk\",\"iojEnnY9FsMfYzp6f\",\"K3RacTvkWHLfzKF8i\",\"f2BoqyCpgnmjEjLqx\",\"hRiMXDZNAzyPd5tpt\",\"dzS6WBTMHyFEag6Fp\",\"zZDaXBxMzTCBhNkgL\",\"CwXsu25ygLEwQbmQC\",\"Wv2vJnEj8ywNmARoF\",\"Ecg4m7srYGgZsb4Ck\",\"iS5BrkGLzJyPK7nKt\",\"yjtdwc2AC4jA2RWtn\",\"ZrKCkX7xxGGZzauFW\",\"xn7uGNKeAwPEkP9oA\",\"ji5f27FPz4wRRF6Ls\",\"p8qqFdJ3FSk5x9z3G\",\"N43d68KgA2qv7Jm2Y\",\"jBR47vA7HwAZqp4QA\",\"pmgFEciNrd3ES9tuu\",\"P7NmFbCJ5offXMRvB\",\"mG8HqKiAQFTdRZthG\",\"XjajdyybZZbkz8o5x\",\"dkcmCKwqApX5jBggc\",\"QRv96jmNaYsWkxQEG\",\"DPi9QGLctq2y76KuE\",\"8fZxjQfuXw5HMSRJM\",\"9CoqdidjM9KbeKnHY\",\"dYPkStFnLvAMsHSzZ\",\"axdSNLZpiCDF8RS6n\",\"J3upzLHuEwXH7Z2hx\",\"6MjSiiBLPcvXbXcaZ\",\"nc7bRhkxgKyqusYe3\",\"gXTAie79kiw28tx5u\",\"eMuCpJ2spXWkJjWNz\",\"7scpcTEp3SEx5Wjg9\",\"oBcs8GLX2ZFLXQy8y\",\"eYfPWvZwnJQkHbSTK\",\"EfxwqhYdapX3dMQC2\",\"cAP3n5NY64uoMwzRR\",\"d8qtzoLB264iP8tdY\",\"GGdmhAvxXhqhhibJN\",\"3LiSLdtN58n46NEqg\",\"qAby4AWXmTNeusvg3\",\"srJ34BaybkQh3qRkM\",\"PXAcsKkssS2yLyDv2\",\"FEYpu9RWysAgW3XnP\",\"NfMJuiBk6FN5Jc6ow\",\"Wpn95NqWxncQrwNgz\",\"CHvzhtXnv8HTbPQ56\",\"sbJcFfQjQ59Wfg4Cd\",\"fznzd3qnvtbFkkizz\",\"9ivvGvJGvtQfigQaZ\",\"YcCLwitFMAEJSnxAW\",\"rfyEkETeoS96QNH4e\",\"2PufnQcsHsfymufX3\",\"8BFSTCnoe2QggN64c\",\"PC3pLs36zNzpRDSuE\",\"4Lwjr34ypKNQNQCar\",\"fbr22rabEJMfBp7vD\",\"buX4mCQhtXCfBjeno\",\"ctbThYbufFCYbRK4f\",\"y8WESEqa8wiQSCkjP\",\"gKnWjDjwrJh7MK2df\",\"ey3CASd6Je5LEJzfB\",\"o4ixjQGSaYqA2JoM4\",\"T6iBEE2jp7f7iEF2P\",\"nkH3HfJXLMNcBMM79\",\"8sNv5PTHa7XQ8bNqR\",\"kjvgTyRFyKHv44DcH\",\"RoGGD5cpHb4ftdLDv\",\"yod5YhKtPqw2GfG9B\",\"suArq5BbSy7gD6xri\",\"5HCu9Ydd86QgHDRNP\",\"AQSqD9oNv2uPfxZCR\",\"Ds7L5bksw2QRHjrKL\",\"mvJBakQ35CWAnbbEZ\",\"Qyfyyw6oC4EHAndzo\",\"BrTDhPJcACL2bsrpJ\",\"wrL4iX2CCSqDCCty3\",\"8nE8QHnFYsHCFebte\",\"xqoisFmSjeDeAhuXF\",\"3KkyQm77zsew58Dc2\",\"DQskEvAv5KiJDPtGF\",\"E2hpke7mHxAWsw5t9\"],\"quality\":[5,5,5,5,5,5,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5]},\"tests\":{\"score\":0,\"rators\":[\"BkPgkDQGHm66X4Qai\"]},\"instructions\":{\"score\":0,\"rators\":[\"BkPgkDQGHm66X4Qai\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.904761904761905,\"family\":[{\"_id\":\"BxiTHaprzDiTvdSA4\",\"language\":\"csharp\"},{\"_id\":\"SnZ5y2hyxjZnWrMec\",\"language\":\"java\"},{\"_id\":\"oK8YTFzTDBzjQpmtH\",\"language\":\"javascript\"},{\"_id\":\"fnLXJnqoDFTJNZk5r\",\"language\":\"python3\"},{\"_id\":\"W8DnnocsCoDkdZ7oE\",\"language\":\"ruby\"}]}}"]