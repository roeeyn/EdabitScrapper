a["{\"msg\":\"result\",\"id\":\"1376\",\"result\":{\"_id\":\"MhtcQNMbkP82ZKJpm\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def get_notes_distribution(students):\\n\\t\",\"difficulty\":2.0283018867924527,\"familyId\":\"rPAv6mvnv4guWDTg2\",\"instructions\":\"Create a function that takes a list of students and returns a dictionary representing their notes distribution. Keep in mind that invalid notes should not be counted in the distribution. Valid notes are: `1, 2, 3, 4, 5`\\n\\n### Example\\n```\\nget_notes_distribution([\\n  {\\n    \\\"name\\\": \\\"Steve\\\",\\n    \\\"notes\\\": [5, 5, 3, -1, 6]\\n  },\\n  {\\n    \\\"name\\\": \\\"John\\\",\\n    \\\"notes\\\": [3, 2, 5, 0, -3]\\n  }\\n] ➞ {\\n  5: 3,\\n  3: 2,\\n  2: 1\\n})\\n```\\n\\n### Notes\\nN/A\",\"isHidden\":false,\"lab\":\"# Original challenge by @Bartosz Cytrowski\\n\\nTest.assert_equals(get_notes_distribution([\\n{\\n\\t\\\"name\\\": \\\"Steve\\\",\\n\\t\\\"notes\\\": [5, 5, 3, -1, 6]\\n},\\n{\\n\\t\\\"name\\\": \\\"John\\\",\\n\\t\\\"notes\\\": [3, 2, 5, 0, -3]\\n}]), \\n{\\n  5: 3,\\n  3: 2,\\n  2: 1\\n})\\n\\nTest.assert_equals(get_notes_distribution([{'name': 'Joshua', 'notes': [2, -2, 4, 5, -3]}, {'name': 'Kevin', 'notes': [-3, 2, -1, 1, -3]}, {'name': 'Joshua', 'notes': [5, -1, -1, 4, 5]}, {'name': 'Jay', 'notes': [4, 4, 1, 3, -2]}, {'name': 'Marcus', 'notes': [4, 4, 3, -1, -2]}, {'name': 'Adam', 'notes': [3, 3, -1, 5, 3]}]), {2: 2, 4: 6, 5: 4, 1: 2, 3: 5})\\nTest.assert_equals(get_notes_distribution([{'name': 'Joseph', 'notes': [2, -1, 2, 4, 4]}, {'name': 'Joshua', 'notes': [4, 1, -3, 0, 1]}, {'name': 'Jacob', 'notes': [3, 5, 0, 4, 2]}, {'name': 'Joel', 'notes': [2, 1, 5, 0, 1]}, {'name': 'Mark', 'notes': [2, 2, 4, 4, 5]}, {'name': 'Jacob', 'notes': [3, 5, -3, 0, 4]}, {'name': 'Jacob', 'notes': [3, 0, -2, 2, 0]}]), {2: 7, 4: 7, 1: 4, 3: 3, 5: 4})\\nTest.assert_equals(get_notes_distribution([{'name': 'Joseph', 'notes': [0, 2, 0, 3, 4]}, {'name': 'Marcus', 'notes': [2, 1, -2, -2, -3]}, {'name': 'Joseph', 'notes': [-2, -3, -1, 4, 1]}]), {2: 2, 3: 1, 4: 2, 1: 2})\\nTest.assert_equals(get_notes_distribution([{'name': 'Kevin', 'notes': [0, 3, -2, 0, 4]}, {'name': 'Jacob', 'notes': [0, -3, 2, 2, 3]}, {'name': 'Kevin', 'notes': [5, 3, -2, -3, 0]}, {'name': 'Sarah', 'notes': [3, 1, 3, 4, -2]}]), {3: 5, 4: 2, 2: 2, 5: 1, 1: 1})\\nTest.assert_equals(get_notes_distribution([{'name': 'Joshua', 'notes': [2, 1, 2, 0, 2]}]), {2: 3, 1: 1})\\nTest.assert_equals(get_notes_distribution([{'name': 'Kevin', 'notes': [5, 1, 0, -2, -1]}, {'name': 'Jay', 'notes': [-1, 1, 5, 0, 2]}, {'name': 'Mark', 'notes': [1, 5, 2, 3, -2]}, {'name': 'Kevin', 'notes': [1, 2, 2, -3, 2]}]), {5: 3, 1: 4, 2: 5, 3: 1})\\nTest.assert_equals(get_notes_distribution([{'name': 'Mark', 'notes': [5, -3, -3, -3, 0]}, {'name': 'Joseph', 'notes': [0, -2, -1, 5, -3]}]), {5: 2})\\nTest.assert_equals(get_notes_distribution([{'name': 'Marcus', 'notes': [-3, 0, 4, 1, 3]}, {'name': 'Joshua', 'notes': [0, -3, -1, 0, 1]}, {'name': 'Adam', 'notes': [-3, 4, 2, -3, -3]}]), {4: 2, 1: 2, 3: 1, 2: 1})\\nTest.assert_equals(get_notes_distribution([{'name': 'Adam', 'notes': [3, -1, -3, 1, -2]}, {'name': 'Adam', 'notes': [5, 2, 5, 2, 3]}, {'name': 'Joel', 'notes': [0, 4, -2, 3, -1]}, {'name': 'Joseph', 'notes': [-1, 5, -2, 0, -2]}]), {3: 3, 1: 1, 5: 3, 2: 2, 4: 1})\\nTest.assert_equals(get_notes_distribution([{'name': 'Marcus', 'notes': [-3, -2, 2, 2, 2]}, {'name': 'Joel', 'notes': [-3, 1, 4, 3, 4]}, {'name': 'Kevin', 'notes': [0, -1, 4, 1, -3]}, {'name': 'Adam', 'notes': [-1, 1, 2, 2, 2]}, {'name': 'Adam', 'notes': [4, 0, -1, -2, -1]}]), {2: 6, 1: 3, 4: 4, 3: 1})\\nTest.assert_equals(get_notes_distribution([{'name': 'Jacob', 'notes': [0, -1, 2, -3, 4]}, {'name': 'Adam', 'notes': [-2, 5, 1, 1, 2]}, {'name': 'Kevin', 'notes': [-3, 0, 2, -3, -2]}, {'name': 'Adam', 'notes': [5, -1, 3, 5, 1]}, {'name': 'Joel', 'notes': [1, -3, -2, 2, -3]}, {'name': 'Kevin', 'notes': [2, -3, 4, 3, 0]}]), {2: 5, 4: 2, 5: 3, 1: 4, 3: 2})\\nTest.assert_equals(get_notes_distribution([{'name': 'Kevin', 'notes': [-1, -1, -2, -3, 0]}, {'name': 'Marcus', 'notes': [-1, -1, 3, 5, 1]}, {'name': 'Sarah', 'notes': [3, 0, 4, -1, -3]}, {'name': 'Jay', 'notes': [-3, -2, 0, 0, 0]}, {'name': 'Joel', 'notes': [3, 4, -3, 1, 0]}, {'name': 'Jacob', 'notes': [3, 5, 1, 4, 4]}, {'name': 'Joseph', 'notes': [2, 0, -1, -2, -3]}]), {3: 4, 5: 2, 1: 3, 4: 4, 2: 1})\\nTest.assert_equals(get_notes_distribution([{'name': 'Joseph', 'notes': [1, 2, 3, 3, -3]}, {'name': 'Joel', 'notes': [0, 5, 5, 5, 2]}, {'name': 'Joshua', 'notes': [5, 4, 2, 0, 3]}]), {1: 1, 2: 3, 3: 3, 5: 4, 4: 1})\\nTest.assert_equals(get_notes_distribution([{'name': 'Adam', 'notes': [3, 5, 5, 4, 4]}, {'name': 'Sarah', 'notes': [4, 0, -1, 0, 5]}, {'name': 'Jacob', 'notes': [-3, -1, 0, -1, -2]}, {'name': 'Joshua', 'notes': [-3, 5, 5, -1, 3]}]), {3: 2, 5: 5, 4: 3})\\nTest.assert_equals(get_notes_distribution([{'name': 'Joshua', 'notes': [-3, -2, 2, 4, 5]}]), {2: 1, 4: 1, 5: 1})\\nTest.assert_equals(get_notes_distribution([{'name': 'Joel', 'notes': [-2, 5, -2, 3, 3]}, {'name': 'Joseph', 'notes': [3, 4, -2, -1, 2]}, {'name': 'Jake', 'notes': [2, 4, 0, -3, -3]}]), {5: 1, 3: 3, 4: 2, 2: 2})\\nTest.assert_equals(get_notes_distribution([{'name': 'Jay', 'notes': [-1, 2, 1, 2, -1]}, {'name': 'Jay', 'notes': [3, 1, -3, 0, 1]}, {'name': 'Sarah', 'notes': [0, -2, 1, 4, 3]}, {'name': 'Jay', 'notes': [-3, 0, 5, 5, 0]}, {'name': 'Kevin', 'notes': [5, -2, 5, -1, 1]}, {'name': 'Sarah', 'notes': [-3, -3, 4, 1, -2]}, {'name': 'Adam', 'notes': [2, 4, -1, 0, 4]}, {'name': 'Joel', 'notes': [1, 0, -1, -1, -2]}]), {2: 3, 1: 7, 3: 2, 4: 4, 5: 4})\\nTest.assert_equals(get_notes_distribution([{'name': 'Kevin', 'notes': [-2, 0, 4, 0, 2]}, {'name': 'Joseph', 'notes': [1, 1, -1, -1, -2]}, {'name': 'Marcus', 'notes': [1, -3, 5, 3, -1]}, {'name': 'Kevin', 'notes': [2, -3, -1, 4, -3]}, {'name': 'Jacob', 'notes': [-3, 5, -3, 5, -1]}]), {4: 2, 2: 2, 1: 3, 5: 3, 3: 1})\\nTest.assert_equals(get_notes_distribution([{'name': 'Jacob', 'notes': [-2, 3, 4, 3, 4]}, {'name': 'Mark', 'notes': [-1, -1, 2, 1, 5]}, {'name': 'Jay', 'notes': [5, 5, 2, 3, 2]}, {'name': 'Kevin', 'notes': [0, -2, 5, 4, 4]}, {'name': 'Jake', 'notes': [0, 5, 0, 4, 3]}, {'name': 'Joshua', 'notes': [5, 4, 5, -3, 2]}, {'name': 'Mark', 'notes': [-1, 5, 2, 3, 5]}]), {3: 5, 4: 6, 2: 5, 1: 1, 5: 9})\\nTest.assert_equals(get_notes_distribution([{'name': 'Kevin', 'notes': [5, -3, -3, 3, 3]}, {'name': 'Adam', 'notes': [5, 1, 3, 1, -1]}, {'name': 'Kevin', 'notes': [1, 5, 2, 2, -3]}, {'name': 'Adam', 'notes': [-2, 2, 2, 5, 3]}, {'name': 'Joel', 'notes': [1, -2, 5, 2, 4]}, {'name': 'Sarah', 'notes': [3, 4, 3, 3, -2]}, {'name': 'Adam', 'notes': [-3, 3, -1, -1, 0]}]), {5: 5, 3: 8, 1: 4, 2: 5, 4: 2})\\nTest.assert_equals(get_notes_distribution([{'name': 'Sarah', 'notes': [2, -1, 4, -3, -2]}]), {2: 1, 4: 1})\\nTest.assert_equals(get_notes_distribution([{'name': 'Joseph', 'notes': [3, -1, 5, 4, -3]}]), {3: 1, 5: 1, 4: 1})\\nTest.assert_equals(get_notes_distribution([{'name': 'Adam', 'notes': [0, 4, 3, -3, -2]}, {'name': 'Adam', 'notes': [3, 0, 4, -2, -1]}, {'name': 'Joel', 'notes': [5, 3, -1, -3, 0]}, {'name': 'Jacob', 'notes': [-1, 1, 5, 0, 0]}, {'name': 'Joshua', 'notes': [0, 1, -2, 0, 3]}]), {4: 2, 3: 4, 5: 2, 1: 2})\\nTest.assert_equals(get_notes_distribution([{'name': 'Joseph', 'notes': [2, -3, 1, -1, 1]}, {'name': 'Jay', 'notes': [4, 0, -3, 4, 4]}, {'name': 'Jay', 'notes': [-1, 2, 2, 5, 3]}, {'name': 'Joel', 'notes': [3, 5, 2, 0, -2]}, {'name': 'Jacob', 'notes': [-1, 4, 1, 0, -1]}, {'name': 'Joshua', 'notes': [0, 4, -3, -3, 1]}]), {2: 4, 1: 4, 4: 5, 5: 2, 3: 2})\\nTest.assert_equals(get_notes_distribution([{'name': 'Mark', 'notes': [-2, -3, -2, 4, -1]}, {'name': 'Jake', 'notes': [5, 3, -3, 3, 1]}, {'name': 'Joshua', 'notes': [3, -1, -3, 0, 5]}, {'name': 'Kevin', 'notes': [-1, 4, -2, -1, 0]}, {'name': 'Joshua', 'notes': [-3, -3, -1, 4, 1]}]), {4: 3, 5: 2, 3: 3, 1: 2})\\nTest.assert_equals(get_notes_distribution([{'name': 'Joseph', 'notes': [0, -1, -3, 1, 5]}, {'name': 'Adam', 'notes': [-2, -1, 2, 4, -2]}, {'name': 'Marcus', 'notes': [1, -1, 1, 0, 3]}, {'name': 'Joseph', 'notes': [5, 0, -2, 0, 2]}, {'name': 'Jacob', 'notes': [-2, -3, -1, -1, 0]}, {'name': 'Kevin', 'notes': [-3, 0, 2, 2, 4]}]), {1: 3, 5: 2, 2: 4, 4: 2, 3: 1})\\nTest.assert_equals(get_notes_distribution([{'name': 'Jake', 'notes': [-1, 0, -2, -1, 1]}, {'name': 'Jacob', 'notes': [1, 4, 3, -1, 4]}, {'name': 'Joseph', 'notes': [-1, 3, -2, -3, 2]}, {'name': 'Sarah', 'notes': [-1, -1, -2, -3, -1]}, {'name': 'Joel', 'notes': [1, 4, 3, -3, -2]}, {'name': 'Kevin', 'notes': [4, 0, 1, 5, 2]}, {'name': 'Jay', 'notes': [1, -1, 0, 4, 0]}, {'name': 'Adam', 'notes': [-1, 1, 3, -1, 1]}]), {1: 7, 4: 5, 3: 4, 2: 2, 5: 1})\\nTest.assert_equals(get_notes_distribution([{'name': 'Adam', 'notes': [-3, 1, -2, -1, 3]}]), {1: 1, 3: 1})\\nTest.assert_equals(get_notes_distribution([{'name': 'Mark', 'notes': [-2, 2, 3, -2, 2]}, {'name': 'Jake', 'notes': [5, -3, 2, 5, -1]}, {'name': 'Joel', 'notes': [3, -3, 4, 1, -3]}, {'name': 'Kevin', 'notes': [4, 3, 0, -1, -3]}, {'name': 'Jacob', 'notes': [-3, -3, 5, 5, 1]}, {'name': 'Jake', 'notes': [3, 5, 2, -3, 5]}, {'name': 'Joseph', 'notes': [0, 1, 0, 1, -2]}, {'name': 'Mark', 'notes': [2, -3, -1, -3, 2]}, {'name': 'Joshua', 'notes': [0, 4, -2, 0, 0]}]), {2: 6, 3: 4, 5: 6, 4: 3, 1: 4})\\nTest.assert_equals(get_notes_distribution([{'name': 'Sarah', 'notes': [4, -2, 5, 1, 0]}, {'name': 'Kevin', 'notes': [-1, 4, 0, -2, 4]}]), {4: 3, 5: 1, 1: 1})\",\"language\":\"python3\",\"summary\":\"Create a function that takes a list of students and returns an dictionary representing their notes distribution. Have in mind that all invalid notes should not be count in the distribution. Valid notes are: 1, 2, 3, 4, 5\\n\\nExamples\\n[\\n  {\\n    name: \\\"Steve\\\",\\n    notes: [5, 5, 3, -1, 6]\\n  },\\n  {\\n    name: \\\"John\\\",\\n    notes: [3, 2, 5, 0, -3]\\n  }\\n] ➞ {\\n  5: 3,\\n  3:\",\"tags\":[\"arrays\",\"objects\"],\"timestamp\":{\"$date\":1581869782246},\"title\":\"Get Notes Distribution\",\"stats\":{\"completed\":{\"total\":124,\"ratings\":[3,3,3,3,3,2,3,2,4,2,1,3,3,1,2,2,2,0,2,2,3,1,2,2,2,2,2,2,4,2,1,0,2,0,3,2,3,2,3,3,1,3,2,0,1,3,3,0,3,3,3,1,3,1,3,1,2,2,0,0,3,1,2,2,2,2,2,1,2,1,3,3,3,1,2,2,0,2,3,0,1,0,2,2,3,3,2,2,3,2,2,3,3,1,2,3,3,3,3,2,3,1,0,2,2,3],\"rators\":[\"tAF9Gf6PiGogbZuWs\",\"PXAcsKkssS2yLyDv2\",\"QnPD4Sv6W4LHc2Qng\",\"8PwfYqoDQFThzNtvf\",\"gb9rvGus2Jv7bjZSs\",\"s5M5RvgqR9BhB9JoC\",\"3LiSLdtN58n46NEqg\",\"myXAR5qDJsBaPnff2\",\"sWX2tYC7J4m2GkcRC\",\"hdm3457uPzJLghf8g\",\"bqvrDWkn8EeaLap4E\",\"bHGTzzdEHK5Js2gev\",\"fBqQjriC4QEtFNxFe\",\"2fxapKr8XGdNeaKi2\",\"AasGs8AeX9Lcb9xJn\",\"PytNZK9mNiRiZxPrm\",\"8JyqsSbN2FJXPr3cw\",\"JQ5uoxA4WZgN6HyJk\",\"aEm3Wvj2rFYRL8Lrb\",\"ghTAisPZoS5FTqQnK\",\"yZvzB3qFb8pkHy4dg\",\"L6oQAqBfQy4b2WLpr\",\"ZNnsMeNkdDhHjSrZb\",\"RpmGuKA3d34t4gkBr\",\"EjbDDFRECrzQDkzrX\",\"55RQznnuTGpsj3EXd\",\"v9KtC8YLbMWmXiW2H\",\"gJYuGdkXEWWmGRLzu\",\"Ecg4m7srYGgZsb4Ck\",\"hnyhBFWwNCz9mDfSi\",\"n2BRY9X8899dcG8Bw\",\"DEDniTrstQYGounXT\",\"HF28xZKSLM9wEuqNg\",\"iS5BrkGLzJyPK7nKt\",\"iojEnnY9FsMfYzp6f\",\"cR3ibTMxLyEdDFCHY\",\"Yp7uvStL97cC9fKkY\",\"Wv2vJnEj8ywNmARoF\",\"HqmxnQJM66Y57twhn\",\"yjtdwc2AC4jA2RWtn\",\"Nua6T3dBurBy3Qfg9\",\"DrkR35NqnP9NDLbq6\",\"kXEfD7xxEyWd7oxxL\",\"p8qqFdJ3FSk5x9z3G\",\"w2HhxvSLmDhaGCAjE\",\"XjajdyybZZbkz8o5x\",\"qD2LrwaDrSdiybLKY\",\"DPi9QGLctq2y76KuE\",\"xn7uGNKeAwPEkP9oA\",\"yoYQqaY6GszuTkNSs\",\"dkcmCKwqApX5jBggc\",\"mDWNyaaQ9hvPCRzSd\",\"J3upzLHuEwXH7Z2hx\",\"gXTAie79kiw28tx5u\",\"8ZhzKvdhsdKgpf6BT\",\"yTtSCvGPyYna6JuRC\",\"qZQxPQ2kaNKAMesHT\",\"oBcs8GLX2ZFLXQy8y\",\"buX4mCQhtXCfBjeno\",\"Jqk2uJZZxEv5wZFze\",\"QRv96jmNaYsWkxQEG\",\"cAP3n5NY64uoMwzRR\",\"qAby4AWXmTNeusvg3\",\"RTDx9axf52kxhFjwZ\",\"d8qtzoLB264iP8tdY\",\"FEYpu9RWysAgW3XnP\",\"GGdmhAvxXhqhhibJN\",\"YcCLwitFMAEJSnxAW\",\"fznzd3qnvtbFkkizz\",\"Wpn95NqWxncQrwNgz\",\"2PufnQcsHsfymufX3\",\"PC3pLs36zNzpRDSuE\",\"8BFSTCnoe2QggN64c\",\"NfMJuiBk6FN5Jc6ow\",\"J5T8gZqiZXFuFDTQ7\",\"4Lwjr34ypKNQNQCar\",\"Afnps7TJQuS9sipMb\",\"fbr22rabEJMfBp7vD\",\"YmMgWhzhHhQLmGGgH\",\"PWgzeK859suojbrRx\",\"MKT7khMBGXzA22ykf\",\"u5u2YpHXiNgzDNJdX\",\"uPGPH8AjEcsawJWkt\",\"EfxwqhYdapX3dMQC2\",\"o4ixjQGSaYqA2JoM4\",\"ey3CASd6Je5LEJzfB\",\"gKnWjDjwrJh7MK2df\",\"nc7bRhkxgKyqusYe3\",\"kjvgTyRFyKHv44DcH\",\"T6iBEE2jp7f7iEF2P\",\"8sNv5PTHa7XQ8bNqR\",\"5HCu9Ydd86QgHDRNP\",\"mvJBakQ35CWAnbbEZ\",\"5NSGznAvaqMdMEBYo\",\"jWbd7SYDzLPjc9EDh\",\"AQSqD9oNv2uPfxZCR\",\"qmtoFxLkGDQMwcBr6\",\"yod5YhKtPqw2GfG9B\",\"Ds7L5bksw2QRHjrKL\",\"eMuCpJ2spXWkJjWNz\",\"LQxof8pGabGuWP7Gn\",\"sbJcFfQjQ59Wfg4Cd\",\"ctbThYbufFCYbRK4f\",\"ipTmetLBmD4M5XhRs\",\"wqJHvTS4vcaeHZKRc\",\"Qyfyyw6oC4EHAndzo\",\"BrTDhPJcACL2bsrpJ\",\"3Kgtr8FytbE9FnJxH\",\"jkbavR2ATFJcpmo8M\",\"KfGmizjwhtMAaXspt\",\"nkH3HfJXLMNcBMM79\",\"fZrLzFjr7PJQCbcqx\",\"CHvzhtXnv8HTbPQ56\",\"9ivvGvJGvtQfigQaZ\",\"RErqK2yM94wYyD2hk\",\"9pzFiFK3ANLjQfnr2\"],\"quality\":[5,5,3,5,5,4,5,5,5,5,5,5,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":4.8,\"family\":[{\"_id\":\"WyEL2YcemhrS4waEE\",\"language\":\"javascript\"},{\"_id\":\"MhtcQNMbkP82ZKJpm\",\"language\":\"python3\"},{\"_id\":\"zAE9CqTBTnEtSCxKJ\",\"language\":\"ruby\"}]}}"]