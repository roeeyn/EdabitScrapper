a["{\"msg\":\"result\",\"id\":\"2195\",\"result\":{\"_id\":\"CMqa7tAtffudQ7hs4\",\"author\":\"Jollywatt\",\"authorId\":\"dirYdBPx55gG3iCfc\",\"code\":\"def sorting_steps(lst):\\n    swaps = [(1, 2)]\\n    return swaps\\n\",\"difficulty\":3.3777777777777778,\"editorId\":\"dirYdBPx55gG3iCfc\",\"familyId\":\"3BXFPZBBCpyrXjfyY\",\"instructions\":\"Given a shuffled list `l`, return a sequence of _transpositions_ which sorts the list (as in `sorted(l)`). A transposition is a pair of indices `(i, j)` representing that `l[i]` and `l[j]` be swapped. Specifically, the output is a list of transpositions to be applied. Transpositions are applied as in:\\n\\n```\\ndef apply_transpositions(l, swaps):\\n  for i, j in swaps:\\n  l[i], l[j] = l[j], l[i]\\nreturn l\\n```\\n\\n### Examples\\n```\\nsorting_steps([5, -5]) ➞ [(0, 1)]\\n# Swap first and second elements.\\n\\nsorting_steps([4, 3, 2, 1]) ➞ [(0, 3), (1, 2)] or even [(0, 1), (1, 2), (2, 3), (0, 1), (1, 2), (0, 1)]\\n\\nsorting_steps([6, 6]) ➞ []\\n```\\n\\n### Notes\\nOutput is not unique! A given list may be sorted with varying numbers of transpositions stemming from various sorting techniques. You need only produce output which works.\\n(This gives the problem algorithimic freedom!)\",\"lab\":\"def ___apply_transpositions(l, swaps):\\n\\tfor i, j in swaps:\\n\\t\\t\\t\\ttry:\\n\\t\\t\\t\\t\\t\\tl[i], l[j] = l[j], l[i]\\n\\t\\t\\t\\texcept IndexError as e:\\n\\t\\t\\t\\t\\t\\traise IndexError(\\\"Transposition contains out of range index\\\")\\tfrom e\\n\\treturn l\\n\\ndef ___test(a):\\n\\t\\texpected = sorted(a)\\n\\t\\tactual = ___apply_transpositions(a, sorting_steps(a.copy()))\\n\\t\\tTest.assert_equals(actual, expected)\\n\\t\\t\\nfor a in [\\n\\t[],\\n\\t[-5,5],\\n\\t[0,0,0],\\n\\t[1, 5.5, 5, 4, -5, -5.5, -6, 6],\\n\\t[8,7,6,0,-1],\\n\\t[0,-5,-5,0],\\n\\t[1,3,3,3,1],\\n]:\\n\\t___test(a)\\n\\nfrom random import sample\\nfor n in range(30):\\n\\t___test(sample(range(n), n))\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,4,4,5,2,4,3,3,5,5,0,5,3,5,0,5,4,3,3,0,5,4,4,5,5,1,2,2,3,1,3,2,5,5,5,4,2,5,5,1,5],\"rators\":[\"dirYdBPx55gG3iCfc\",\"tAF9Gf6PiGogbZuWs\",\"AYaEkTWLMmfzpwejr\",\"5Qvy7fNM2YEQ6PtbY\",\"Tin42WiZ4JTDEnS7b\",\"5F8kWn4n7fQbnf88e\",\"nLpdvK7EcahCqNe8X\",\"HqmxnQJM66Y57twhn\",\"jDgJ2fdFS76TSorNc\",\"FHSJnAYTbcsKFgeQa\",\"8PwfYqoDQFThzNtvf\",\"2fxapKr8XGdNeaKi2\",\"aCNWav8S8Try9RkC6\",\"fMR9RcfgPJWiLgx7k\",\"de3DhFz9dW8vdPanZ\",\"gb9rvGus2Jv7bjZSs\",\"aEm3Wvj2rFYRL8Lrb\",\"SGhPxX5bHGL8zZqtt\",\"9uZpgAtSuPZ7W7DL6\",\"bLpgu8xTdpDPFSAsM\",\"AasGs8AeX9Lcb9xJn\",\"fznzd3qnvtbFkkizz\",\"DwetpbChQM4r6Gwah\",\"bJaPCBx63YxdJAuTS\",\"3MybBtCNPcFHLMYmJ\",\"foytX6kH9wiSYqLtT\",\"4fhjJBvLBWh6QeSih\",\"xn7uGNKeAwPEkP9oA\",\"AQECHYqcH2rFsZM8p\",\"GgLd4eWBu79mdjtkP\",\"J23RcmzbdtBbPCTjT\",\"8JyqsSbN2FJXPr3cw\",\"hZW6j5s6RHpx35phy\",\"s5M5RvgqR9BhB9JoC\",\"eyog4zCdBuks2PaYK\",\"3bH5s2P4iYCRHb5Sk\",\"DNACg4rcgZsPtYGZ8\",\"h4x2jaMdj5aQZbW5g\",\"Ecg4m7srYGgZsb4Ck\",\"waNsY2k4ndReyEREk\",\"iS5BrkGLzJyPK7nKt\",\"Tg24gZyPmk8uDXcBY\",\"khABovRxfpyzr97L3\",\"HF28xZKSLM9wEuqNg\",\"Cia25zjeX3RkCNx5t\",\"mDWNyaaQ9hvPCRzSd\",\"J83b6T9hJ2EqE5Aov\",\"8sNv5PTHa7XQ8bNqR\",\"2PufnQcsHsfymufX3\",\"iojEnnY9FsMfYzp6f\",\"J3upzLHuEwXH7Z2hx\",\"yjtdwc2AC4jA2RWtn\",\"gJYuGdkXEWWmGRLzu\"],\"total\":59,\"quality\":[4,5,4,4,5,5,5,5,5,3,5,1,4]},\"flags\":0},\"subscribers\":[\"dirYdBPx55gG3iCfc\"],\"summary\":\"Given a shuffled list l, return a sequence of transpositions which sorts the list (as in sorted(l)). A transposition is a pair of indices (i, j) representing that l[i] and l[j] be swapped. Specifically, the output is a list of transpositions to be applied. Transpositions are applied as in:\\n\\ndef apply_transpositions(l, swaps):\\n  for i, j in swaps:\\n  l[i], l[j]\",\"tags\":[\"algorithms\",\"arrays\",\"sorting\",\"loops\"],\"timestamp\":{\"$date\":1567474403697},\"title\":\"Give Steps to Sort a List\",\"isHidden\":false,\"quality\":4.230769230769231,\"family\":[{\"_id\":\"CMqa7tAtffudQ7hs4\",\"language\":\"python3\"}]}}"]