a["{\"msg\":\"result\",\"id\":\"2319\",\"result\":{\"_id\":\"Pjffmm9TTr7CxGDRn\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"def is_ascending(s):\\n\\t# recursive code in here\",\"difficulty\":3.6956521739130435,\"familyId\":\"vodSjrpyPTPaviSsr\",\"instructions\":\"Write a function that will return `True` if a given string (divided and grouped into a size) will contain a set of **consecutive ascending** numbers, otherwise, return `False`.\\n\\n\\n### IMPORTANT\\nThe expected solution for this challenge is done **recursively**. Please check out the **Resources** tab for more details about **recursion** if it needs be.\\n\\n\\n### Examples\\n```\\nis_ascending(\\\"123124125\\\") ➞ True\\n# Contains a set of consecutive ascending numbers\\n# if grouped into 3's : 123, 124, 125\\n\\nis_ascending(\\\"101112131415\\\") ➞ True\\n# Contains a set of consecutive ascending numbers\\n# if grouped into 2's : 10, 11, 12, 13, 14, 15\\n\\nis_ascending(\\\"32332432536\\\") ➞ False\\n# Regardless of the grouping size, the numbers can't be consecutive.\\n\\nis_ascending(\\\"326325324323\\\") ➞ False\\n# Though the numbers (if grouped into 3's) are consecutive but descending.\\n\\nis_ascending(\\\"666667\\\") ➞ True\\n# Consecutive numbers: 666 and 667.\\n```\\n\\n\\n### Notes\\n- A **number** can consist of any number of digits, so long as the numbers are **adjacent to each other**, and the string has **at least two** of them.\\n- An **iterative** version of this challenge can be found via this [link](https://edabit.com/challenge/LMoP4Jhpm9kx4WQ3a).\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"from re import findall, MULTILINE as M\\nfrom inspect import getsource\\n\\ndef is_recursive(src):\\n\\ttry:\\n\\t\\tn = getsource(src).split(\\\"=\\\")[0].strip() if src.__name__ == \\\"<lambda>\\\" else src.__name__\\n\\t\\treturn len(findall(n, getsource(src), flags=M)) > 1\\n\\texcept OSError: return True\\n\\nTest.assert_not_equals(is_recursive(is_ascending), False, 'Recursion is required!')\\n\\nactual_param = [\\n  \\\"123124125\\\", \\\"101112131415\\\", \\\"666667\\\", \\\"232425\\\", \\\"444445\\\", \\\"1234567\\\", \\\"123412351236\\\", \\\"57585960616263\\\", \\\"500001500002500003\\\",\\n  \\\"919920921\\\", \\\"12341235123612371238\\\", \\\"32332432536\\\", \\\"326325324323\\\", \\\"2324256\\\", \\\"1235\\\", \\\"121316\\\", \\\"12131213\\\", \\\"54321\\\",\\n  \\\"56555453\\\", \\\"90090190290\\\", \\\"35236237238\\\"\\n]\\nexpected = [\\n  True, True, True, True, True, True, True, True, True, True, True,\\n  False, False, False, False, False, False, False, False, False, False\\n]\\nfor i, n in enumerate(actual_param): Test.assert_equals(is_ascending(n), expected[i])\",\"language\":\"python3\",\"quality\":0,\"summary\":\"Write a function that will return True if a given string (divided and grouped into a size) will contain a set of consecutive ascending numbers, otherwise, return False.\\n\\nIMPORTANT\\nThe expected solution for this challenge is done recursively. Please check out the Resources tab for more details about recursion if it needs be.\\n\\nExamples\\nis_ascending(\\\"123124125\\\")\",\"tags\":[\"recursion\",\"strings\",\"numbers\",\"arrays\"],\"timestamp\":{\"$date\":1605199745979},\"title\":\"Recursion: Consecutive Ascending Numbers\",\"stats\":{\"completed\":{\"total\":20,\"ratings\":[5,5,5,5,5,5,5,1,3,3,5,3,4,5,4,5,5,1,4,0,5,0,2],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\",\"8sNv5PTHa7XQ8bNqR\",\"s5M5RvgqR9BhB9JoC\",\"mDWNyaaQ9hvPCRzSd\",\"DPi9QGLctq2y76KuE\",\"DNGkwLuAzEACszkAx\",\"XNmN6ztj36a7eChbD\",\"gJYuGdkXEWWmGRLzu\",\"iojEnnY9FsMfYzp6f\",\"iS5BrkGLzJyPK7nKt\",\"yjtdwc2AC4jA2RWtn\",\"AasGs8AeX9Lcb9xJn\",\"PH32cNxBjrK4a28sn\",\"MpfytGFYF77emJ3cT\",\"T6iBEE2jp7f7iEF2P\",\"eHcgvkTGsH7ZziqBo\"]},\"flags\":0},\"editorId\":\"a777e8chPvJkY3tKa\",\"family\":[{\"_id\":\"SRSgm5r3P6tRZPRAy\",\"language\":\"java\"},{\"_id\":\"ckAccFkn3yR5d4xSm\",\"language\":\"javascript\"},{\"_id\":\"Pjffmm9TTr7CxGDRn\",\"language\":\"python3\"}]}}"]