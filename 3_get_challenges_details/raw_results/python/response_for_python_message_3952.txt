a["{\"msg\":\"result\",\"id\":\"694\",\"result\":{\"_id\":\"cWQ5Qf98dQPoPJTjX\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def find_occurrences(txt, ch):\\n\\t\",\"difficulty\":1.1169590643274854,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"degLfzN57kKSEp7Bt\",\"instructions\":\"Create a function that takes in a **sentence** and a **character** to find. Return a dictionary of each word in the sentence, with the number of the specified character as the value.\\n\\n### Examples\\n```\\nfind_occurrences(\\\"Hello World\\\", \\\"o\\\") ➞ {\\n  \\\"hello\\\" : 1,\\n  \\\"world\\\" : 1\\n}\\n\\nfind_occurrences(\\\"Create a nice JUICY function\\\", \\\"c\\\") ➞  {\\n  \\\"create\\\" : 1,\\n  \\\"a\\\" : 0,\\n  \\\"nice\\\" : 1,\\n  \\\"juicy\\\" : 1,\\n  \\\"function\\\" : 1\\n}\\n\\nfind_occurrences(\\\"An APPLE a day keeps an Archeologist AWAY...\\\", \\\"A\\\") ➞ {\\n  \\\"an\\\" : 1,\\n  \\\"apple\\\" : 1,\\n  \\\"a\\\" : 1,\\n  \\\"day\\\" : 1,\\n  \\\"keeps\\\" : 0,\\n  \\\"archeologist\\\" : 1,\\n  \\\"away...\\\" : 2\\n}\\n```\\n\\n### Notes\\n- The function shouldn't be case sensitive.\\n- Words in the dictionary should be in lowercase.\\n- You may be required to find punctuation.\\n- Duplicate words should be ignored (see example #3 for the word \\\"an\\\").\",\"isHidden\":false,\"lab\":\"Test.assert_equals(find_occurrences(\\\"Hello World\\\", \\\"o\\\"), {\\n\\t\\\"hello\\\" : 1,\\n\\t\\\"world\\\" : 1\\n})\\n\\n\\nTest.assert_equals(find_occurrences(\\\"Create a nice JUICY function\\\", \\\"c\\\"),  {\\n\\t\\\"create\\\" : 1,\\n\\t\\\"a\\\" : 0,\\n\\t\\\"nice\\\" : 1,\\n\\t\\\"juicy\\\" : 1,\\n\\t\\\"function\\\" : 1\\n})\\n\\n\\nTest.assert_equals(find_occurrences(\\\"An APPLE a day keeps an Archeologist AWAY...\\\", \\\"a\\\"), {\\n\\t\\\"an\\\" : 1,\\n\\t\\\"apple\\\" : 1,\\n\\t\\\"a\\\" : 1,\\n\\t\\\"day\\\" : 1,\\n\\t\\\"keeps\\\" : 0,\\n\\t\\\"archeologist\\\" : 1,\\n\\t\\\"away...\\\" : 2\\n})\\n\\nTest.assert_equals(find_occurrences(\\\"hello people of the planet Earth\\\", \\\"g\\\"), {\\\"hello\\\": 0, \\\"people\\\": 0, \\\"of\\\": 0, \\\"the\\\": 0, \\\"planet\\\": 0, \\\"earth\\\": 0})\\nTest.assert_equals(find_occurrences(\\\"Reference site about Lorem Ipsum, giving information on its origins, as well as a random Lipsum generator.\\\", \\\"R\\\"), {\\\"reference\\\": 2, \\\"site\\\": 0, \\\"about\\\": 0, \\\"lorem\\\": 1, \\\"ipsum,\\\": 0, \\\"giving\\\": 0, \\\"information\\\": 1, \\\"on\\\": 0, \\\"its\\\": 0, \\\"origins,\\\": 1, \\\"as\\\": 0, \\\"well\\\": 0, \\\"a\\\": 0, \\\"random\\\": 1, \\\"lipsum\\\": 0, \\\"generator.\\\": 2})\\nTest.assert_equals(find_occurrences(\\\"Lift your spirits with funny jokes, trending memes, entertaining gifs, inspiring stories,\\\", \\\"l\\\"), {\\\"lift\\\": 1, \\\"your\\\": 0, \\\"spirits\\\": 0, \\\"with\\\": 0, \\\"funny\\\": 0, \\\"jokes,\\\": 0, \\\"trending\\\": 0, \\\"memes,\\\": 0, \\\"entertaining\\\": 0, \\\"gifs,\\\": 0, \\\"inspiring\\\": 0, \\\"stories,\\\": 0})\\nTest.assert_equals(find_occurrences(\\\"Thats not a camel, thats my wife.\\\", \\\"a\\\"), {\\\"thats\\\": 1, \\\"not\\\": 0, \\\"a\\\": 1, \\\"camel,\\\": 1, \\\"my\\\": 0, \\\"wife.\\\": 0})\\nTest.assert_equals(find_occurrences(\\\"hippopotomonstrosesquippedaliophobia is the fear of long words\\\", \\\"p\\\"), {\\\"hippopotomonstrosesquippedaliophobia\\\": 6, \\\"is\\\": 0, \\\"the\\\": 0, \\\"fear\\\": 0, \\\"of\\\": 0, \\\"long\\\": 0, \\\"words\\\": 0})\\nTest.assert_equals(find_occurrences(\\\"Some writers believe longs sentences are simply made by coupling clauses with the word and. This is called polysyndeton, and yes, it is one of twelve literary devices you can use to take charge of your boring writing. But its a cheap way to get a long sentence.\\\", \\\"s\\\"), {\\\"some\\\": 1, \\\"writers\\\": 1, \\\"believe\\\": 0, \\\"longs\\\": 1, \\\"sentences\\\": 2, \\\"are\\\": 0, \\\"simply\\\": 1, \\\"made\\\": 0, \\\"by\\\": 0, \\\"coupling\\\": 0, \\\"clauses\\\": 2, \\\"with\\\": 0, \\\"the\\\": 0, \\\"word\\\": 0, \\\"and.\\\": 0, \\\"this\\\": 1, \\\"is\\\": 1, \\\"called\\\": 0, \\\"polysyndeton,\\\": 1, \\\"and\\\": 0, \\\"yes,\\\": 1, \\\"it\\\": 0, \\\"one\\\": 0, \\\"of\\\": 0, \\\"twelve\\\": 0, \\\"literary\\\": 0, \\\"devices\\\": 1, \\\"you\\\": 0, \\\"can\\\": 0, \\\"use\\\": 1, \\\"to\\\": 0, \\\"take\\\": 0, \\\"charge\\\": 0, \\\"your\\\": 0, \\\"boring\\\": 0, \\\"writing.\\\": 0, \\\"but\\\": 0, \\\"its\\\": 1, \\\"a\\\": 0, \\\"cheap\\\": 0, \\\"way\\\": 0, \\\"get\\\": 0, \\\"long\\\": 0, \\\"sentence.\\\": 1})\\nTest.assert_equals(find_occurrences(\\\"i wrote code to give me these long long long long long sentences\\\", \\\"l\\\"), {\\\"i\\\": 0, \\\"wrote\\\": 0, \\\"code\\\": 0, \\\"to\\\": 0, \\\"give\\\": 0, \\\"me\\\": 0, \\\"these\\\": 0, \\\"long\\\": 1, \\\"sentences\\\": 0})\\nTest.assert_equals(find_occurrences(\\\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa a spider\\\", \\\"a\\\"), {\\\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\": 133, \\\"a\\\": 1, \\\"spider\\\": 0})\\nTest.assert_equals(find_occurrences(\\\"she sell sea shells on the sea shore\\\", \\\"s\\\"), {\\\"she\\\": 1, \\\"sell\\\": 1, \\\"sea\\\": 1, \\\"shells\\\": 2, \\\"on\\\": 0, \\\"the\\\": 0, \\\"shore\\\": 1})\\nTest.assert_equals(find_occurrences(\\\"Woah, I just realised, that I could, use this, to find, punctuation also.\\\", \\\",\\\"), {\\\"woah,\\\": 1, \\\"i\\\": 0, \\\"just\\\": 0, \\\"realised,\\\": 1, \\\"that\\\": 0, \\\"could,\\\": 1, \\\"use\\\": 0, \\\"this,\\\": 1, \\\"to\\\": 0, \\\"find,\\\": 1, \\\"punctuation\\\": 0, \\\"also.\\\": 0})\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[1,1,1,1,1,1,1,2,1,2,0,1,1,1,0,1,1,1,2,2,0,1,2,1,1,0,1,0,4,0,0,1,2,5,0,2,1,1,2,1,2,1,1,1,1,2,0,1,2,1,2,0,1,0,2,1,0,0,2,2,2,0,1,0,2,2,2,3,1,1,2,0,0,1,0,1,1,1,1,1,1,0,1,0,2,1,0,5,1,1,2,1,1,0,0,1,1,2,1,1,1,1,1,1,1,1,2,1,0,1,1,2,0,1,1,1,1,1,2,2,0,1,3,2,2,3,1,1,1,2,1,1,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,2,3,1,1,1,2,1,1,0,0,1,1,2,1,1,1,1,1,1,1,1,0,2,1,1,1,0,2,2,2,2,0,1,2,0,1,0,3,1,2,0,1,1,0,2,1,2,2,3,2,2,2,0,1,0,1,1,1,1,2,0,1,1,1,0,0,1,1,1,2,2,1,3,0,2,1,2,1,2,3,3,0,0,0,2,2,2,1,1,1,1,0,1,2,2,1,0,1,2,1,1,1,2,1,0,2,1,1,0,0,0,0,1,0,2,1,3,1,1,0,1,1,0,1,1,1,1,0,1,1,3,1,1,3,1,1,1,1,1,1,1,1,1,0,1,1,2,1,2,1,1,1,1,2,0,2,1,1,1,1,1,1,1,1,0,0,1,1,0,2,1,2,2,1,1,3,0,1,0,1,0,0,0,1,1,0,1,1,1,0,1],\"rators\":[\"PXAcsKkssS2yLyDv2\",\"Cc2Cgj4MWXZxsTooC\",\"KdNhsHAQg83SsBTgg\",\"tAF9Gf6PiGogbZuWs\",\"QnPD4Sv6W4LHc2Qng\",\"yKttxy9JGn5Jzwuj6\",\"zC8WrPp5BC6c2exrW\",\"AasGs8AeX9Lcb9xJn\",\"Jqk2uJZZxEv5wZFze\",\"d5ELxQXSryjWXtWwB\",\"u5u2YpHXiNgzDNJdX\",\"gb9rvGus2Jv7bjZSs\",\"myXAR5qDJsBaPnff2\",\"2fxapKr8XGdNeaKi2\",\"sz8ufn9i8zeiGWpAy\",\"WcqujsAnCdQ9uRbeZ\",\"N7GPFEhCaiQ79MKjz\",\"Ycj4iTJGFyvC4bXek\",\"rJFxP8NgzZhZ6ryXq\",\"yabtHTtycsWhcGBfD\",\"CuY5BaTCcu7Mp9tDu\",\"HQxp7NcdvF92G7bYS\",\"j2wcHGHmPCHbaQEye\",\"JPtpz9cnJwtS8L7ui\",\"kMzFDf8vZg6vAzqLM\",\"mxX4rH5ELYkdZ2Mbw\",\"mjxZARnWk8dAGzgS9\",\"76GWKGTsNEG6R4APD\",\"fMR9RcfgPJWiLgx7k\",\"C4QntmkYtB89GNtpd\",\"BeFnbPbMnAM2SjBdZ\",\"XbxHXmh5ZmRN2gw3K\",\"4CFzv558qbGcpQwc4\",\"hnyhBFWwNCz9mDfSi\",\"Fk9kLwoG4Brf4KsKf\",\"N2wnZXkhDH86mgjQ8\",\"nfXGHENb5md7m355s\",\"8JyqsSbN2FJXPr3cw\",\"jeuoearPPTcGPgXhf\",\"Yp7uvStL97cC9fKkY\",\"CBXLutgEKHKvbgE3h\",\"HqmxnQJM66Y57twhn\",\"ey3CASd6Je5LEJzfB\",\"4fctAnxyFRB8stPRQ\",\"pDBjKHH2azj2js4SB\",\"NfMJuiBk6FN5Jc6ow\",\"AbrJ8hMyv5fFXG6DN\",\"v3fjGuc7Pq4yjFygS\",\"jNvegJWCk5HCtEMbK\",\"Cyd66Eo9xMehZzgvo\",\"9Ly8afdtofp8DXzrt\",\"zg8GmMSP2LkHBtAzy\",\"gMJhLdyw3tH7L96X2\",\"2umEzgZgfrp9RaXAG\",\"jNE5AHcJQWXz7efuP\",\"LQxof8pGabGuWP7Gn\",\"cSaaAxqkYsPDXmMuf\",\"pQoNMyzypNKAPn9dY\",\"4tgBydK887PitgAoi\",\"mybpojPXaZigaqsAD\",\"Wv5c7WsK6R8yb4mTt\",\"X29Ekg7HjqHAYgCSM\",\"5diQb8rbt5d5nvmhB\",\"rJGeRSCjGzRuYfHZS\",\"iYFq5mMiFgrCq54xm\",\"w3A7cBWyAfukk6xEQ\",\"dHZqT6h4JMwk5fPC8\",\"k5mp7Hkg8w5rwiXpe\",\"PSrcg6fy835R4c5CW\",\"PhceyfmFntJcn5Fhf\",\"pmgFEciNrd3ES9tuu\",\"LQhEi8yAC8WzEYY8h\",\"8fhbZ2xkaSQB4Cb2L\",\"zd9FLSzsGz3evKafy\",\"yZvzB3qFb8pkHy4dg\",\"gudC5KZrykfdfGD3J\",\"6abffx8jQDCf7kgvb\",\"WoKygnR2BoTuSG9y5\",\"ovqQRfyvmEDypjrnC\",\"Tpg3ek75vt9MrhEHZ\",\"JZbBYihgT6m7bKvgc\",\"RnhF2MMpevuvB3sqm\",\"J5T8gZqiZXFuFDTQ7\",\"4y2bxsHwifCdZXAQA\",\"jBo3xAopr37GFzY8g\",\"cR3ibTMxLyEdDFCHY\",\"X74H8PYX8XYkrGRQc\",\"vLrq4dEDMM2wd68Dc\",\"C9LKGu2g5hSijvDzA\",\"aRqQ42J5zqCmBNd8w\",\"s2ZMtR9deh6Kia7pb\",\"2iFe3EHEH2YdhSKrs\",\"8LfTheFzvicameoz9\",\"BP6T8n5MxbWJxAtxR\",\"aEm3Wvj2rFYRL8Lrb\",\"eLkj3Zb2DqiW4AEEh\",\"v8iedwMBcGiN2PHGM\",\"5kEyLPjTLrt7z2YJZ\",\"7tbM7oMYc5oDvD88Z\",\"N7P4AnS8nzK4oupHv\",\"c9nu6dMCYHn5NoGFZ\",\"MKT7khMBGXzA22ykf\",\"2QGRoQn2dRq3scu7k\",\"v9KtC8YLbMWmXiW2H\",\"KRSKj7ikX2ytWFmod\",\"M8dQuMrEpP8Hc3tHN\",\"gJYuGdkXEWWmGRLzu\",\"9uZpgAtSuPZ7W7DL6\",\"5JZNWts9XEHejpvur\",\"ALcgrkPgXfJMvE5CX\",\"sJWTa7iWeRoRtqJ8N\",\"ZNnsMeNkdDhHjSrZb\",\"HF28xZKSLM9wEuqNg\",\"YzaMuXsKkut8nSNDH\",\"vWgBJaEtcu3XoYuer\",\"n2ck2WGuM35vbZiFz\",\"ffjnHrx8Ym7A7pQWe\",\"ukMGNti4cKTJBZqsg\",\"9PGk6auzrKALn9mEn\",\"wcCc58K5kNxrBYwei\",\"YKHHGw9KsveRr2jDR\",\"GEvSGXDkk7pACfYri\",\"DEDniTrstQYGounXT\",\"HiXS9Hofvx4rnqDZz\",\"23oi2a3vQwhtLEbSj\",\"BEdxteC2PKrmTLbdM\",\"s5M5RvgqR9BhB9JoC\",\"KdNDysEsy2TW5QRJ2\",\"kYWb8BwpKwunQkxeX\",\"9pzFiFK3ANLjQfnr2\",\"nBZE9jW8SaKZdbWzM\",\"XJKbK8a58Z9HRHE4b\",\"7m8s7cADBu3XwGpxw\",\"bMEg2eSZtsAcT7ZmJ\",\"yAouD3PxzED8a4gap\",\"FEYpu9RWysAgW3XnP\",\"ZiDufW2cYE4zos2gL\",\"AF6LgdKhEdzwgRJom\",\"XrqNzJ2FRG8HnGiR6\",\"di2hhADLx59Bj4ewM\",\"ekQh3jzgGLsEMbKo3\",\"9dgvEreRDYRiwLmYv\",\"FzxTj4GuujhwpZM7y\",\"ahk2qiXKJA753wAJk\",\"hab8YixsXxe4CcZpP\",\"dKKMvaYoJunNPk5Wa\",\"CYzKNikwEfSE3pxuD\",\"oKkTzYNZvisJ3iB5M\",\"NG8PWBSjsM8mMhQEq\",\"yr822PZmmiDDenxpB\",\"a777e8chPvJkY3tKa\",\"nx3gu7spJkhJ35qQa\",\"7Z9KdHmzkoF3TQC8s\",\"NNE5HNRXAkmhrWgyQ\",\"yYxPzFqBgtQ9fsyHM\",\"4rwxLqLs2mNZNg8NB\",\"NzbRqGWspQnWMoDrF\",\"9bQyb6rW7xfE4vgrR\",\"DWp2uozZmattoNS87\",\"RgWhcJMQRoJP6b8Wg\",\"2ptN2mhjFwFcHyPZd\",\"3cF6NXq3ZEwdkgSjb\",\"JS3hNM3XXkxPdg3yk\",\"qZQxPQ2kaNKAMesHT\",\"sbJcFfQjQ59Wfg4Cd\",\"H4abACFDH5t8CnnyH\",\"ZrKCkX7xxGGZzauFW\",\"eMuCpJ2spXWkJjWNz\",\"mtRvHDpeLoSGBf8zC\",\"8BFSTCnoe2QggN64c\",\"YcCLwitFMAEJSnxAW\",\"YA7SDhpgEtsqynvNL\",\"syRNbbPdLCGXbH2Gy\",\"FvFhg2wELM3SCZDZQ\",\"2innwjWqxJHo4eRGh\",\"LCZ6JTAhBZBmWLzm8\",\"PztZtN8TD4yJcnnQ4\",\"sHjfbGQGLHE6JR6qu\",\"So6PHm74mfJuY2WTs\",\"7CAsPMje4Ewv5R5bH\",\"5HCu9Ydd86QgHDRNP\",\"R4SjTgDnpigJYDLyL\",\"3LiSLdtN58n46NEqg\",\"b9YQPLb9ZPSADdHXX\",\"ckHFA5y8pkrXbsevA\",\"iojEnnY9FsMfYzp6f\",\"Pe8vWpDHRuH9nSGKW\",\"Ecg4m7srYGgZsb4Ck\",\"Q9afpRu3u8zuWuzLQ\",\"hRiMXDZNAzyPd5tpt\",\"dj5AyG5fWP8FdsSmZ\",\"kxKR2bx7DrNDPqJPz\",\"iS5BrkGLzJyPK7nKt\",\"q4vhNKvdnjB6XTmxE\",\"r3hY3XhLXZ8bgj9tZ\",\"YRdu63HNTKd6YmWpd\",\"i5iePG5GqhJJ8HEoB\",\"G6dS96Kivi7zkHBRh\",\"dzS6WBTMHyFEag6Fp\",\"oBcs8GLX2ZFLXQy8y\",\"yjtdwc2AC4jA2RWtn\",\"3XmLf4kbokuCy7Dbi\",\"SkQcb2sRn4as5KpnN\",\"ta5CrWnBCRusD2WMo\",\"hkJGLuib5md8vZ9HD\",\"9CoqdidjM9KbeKnHY\",\"7XjpFhwzNaeFiQctW\",\"mmt7jwqbmSjzRSvqh\",\"q6QsMYNMpPNtmyTeW\",\"jS9FNSp9XhvmJ2Dpc\",\"u7i7WPM63n42r8R8o\",\"g4NCSxxHqHCGMpWwT\",\"TPhfpB5tzQWSSn67n\",\"RehJGBFS6CYiWdjZx\",\"aKzYNPqBqb3J3ZgyD\",\"EM54GFtAyAEdmqxNe\",\"NP2RxM3eBd3drnDwP\",\"s6AZk3GGm3mkakzNi\",\"w2HhxvSLmDhaGCAjE\",\"Ey9pB2PRqejNubQmf\",\"8vWWL8Tx2yDai4ydm\",\"TTgP9jcqGxCfKotZ3\",\"KLmLKaJPfsYxp42p2\",\"mSjddMnY7SYC7gCoH\",\"7K2GEb5TZRtSpyyGS\",\"CyzskHGsC6WSmYrLu\",\"Lm6ChQCWBmaikmk5J\",\"8aEGGQPkGesWwoaom\",\"pWYjN62ZAKQZ7Xp3W\",\"u72ipcjbNDSkWX8Gw\",\"k2Eo3wyfZZ6KxvKhN\",\"b3BWzq6Yu8nswak5u\",\"23KndF374EHHZNbL8\",\"mG8HqKiAQFTdRZthG\",\"pn7FezrkZZCui7fkJ\",\"y372QoK9hSQGAWjCF\",\"8xhYxugEiwY6XEmGc\",\"RDAijeuBkgHgZfPrG\",\"DYDJTyGgKFnBRLm2r\",\"tpxMgkGSHwBjS95Ta\",\"gXTAie79kiw28tx5u\",\"8WpvgSbQciTQWdd8T\",\"6HgMANhu6WiGyXSGN\",\"rrSC943cCKNG48sH4\",\"wniy5aKNkwYTNAkrz\",\"oXdhczMThyirgM2eN\",\"wRttWTM59y8m5mx7x\",\"DPi9QGLctq2y76KuE\",\"zZDaXBxMzTCBhNkgL\",\"g9FyJ8yeT9ic97Qp2\",\"yod5YhKtPqw2GfG9B\",\"pduNK68oazqQTtbLp\",\"Cybtjz3cF7RgoiqrN\",\"QRv96jmNaYsWkxQEG\",\"pJj86xc32Bs7Frxvi\",\"RGMbFMZXJr7DhcAJy\",\"HhYCji7QqauyN3A7v\",\"J3upzLHuEwXH7Z2hx\",\"cAP3n5NY64uoMwzRR\",\"4hzd4qde3g9We8N4E\",\"9gJsF5apWJGWZJprn\",\"oyKcm3zqdy8Ko5P5d\",\"9FCeFzjPA4jrQ7oHW\",\"dky93oMkJsJjEJKk2\",\"dYPkStFnLvAMsHSzZ\",\"ga7aTTEThzsELuC2j\",\"Fb2wehA7QgTFWry2x\",\"FSe2mfd98g84k5DW6\",\"GGdmhAvxXhqhhibJN\",\"YRAzEBJoLvSaiPtYx\",\"4fjSgcqhQQZM2ZFRP\",\"XmThR9XBSHSdToYYX\",\"p8qqFdJ3FSk5x9z3G\",\"5XiuAqicKD4hBdu63\",\"wjc4iejpErBhxWwHo\",\"HuNF3xTBzmatyGSTm\",\"o4ixjQGSaYqA2JoM4\",\"C2AfMipCicfD58WJ9\",\"oriWwkSDoejDH9ru5\",\"5hQnRWiKkhgKJXNMP\",\"DpnYcMphntjsQ96qg\",\"kAkLAF9T5McSxXJCT\",\"FuYTQcDNjct58rqPa\",\"DqNQn9Jsxcu5HijKE\",\"hERDiXzMt3bagzfKp\",\"axdSNLZpiCDF8RS6n\",\"ih9XYDHApsS6YBK93\",\"vCxuabDxEv9YC3Szb\",\"nmMiWvyJKp6nZEpve\",\"buX4mCQhtXCfBjeno\",\"rp78xovPotpBHRXxR\",\"kYjFYGCSqCwzYR7Fx\",\"JMAmMMBMrQqRy72Cc\",\"AXcnPX68zdMiLNSmu\",\"Lg4t6SEWgtYz4u7Cj\",\"qAby4AWXmTNeusvg3\",\"eYfPWvZwnJQkHbSTK\",\"mHvoroWGDLYbJqQJa\",\"BrTDhPJcACL2bsrpJ\",\"MXGuntvz3byrP6WJc\",\"5S9nX4rKsnCcnv4Cz\",\"5HTSi5wQNAdLm57LB\",\"Ds7L5bksw2QRHjrKL\",\"srJ34BaybkQh3qRkM\",\"B8n7KqbvEDjZzgj2D\",\"nFbmNzMQ38TncmfQX\",\"6xTu4r8NMczBFvmtz\",\"Q7Yxda7dqKeYPs2Db\",\"EL3LPDnCeLsAFGHFX\",\"KJCDwGkoXh8qtbbKr\",\"q9FfWNiMDKRiaCJ5j\",\"NQugpSPQBmPwo6njh\",\"2HfNkb2SoqdyjKW3o\",\"PWgzeK859suojbrRx\",\"EfxwqhYdapX3dMQC2\",\"pPpmP7xeJzGgK362R\",\"LCuvvWMwiGuqTwNRi\",\"CHvzhtXnv8HTbPQ56\",\"7dQYiDeTcMztbGyso\",\"XD5nmvKQchKezPXhy\",\"na46NPbcAprCfigi9\",\"RTDx9axf52kxhFjwZ\",\"AFfw7cGg83uYk2Miy\",\"y33YsDn3RqpxNYgp4\",\"iYXdNw7tKcgA3QwBX\",\"T6iBEE2jp7f7iEF2P\",\"fTNQmMvTZhhiGBCMe\",\"2EbDCCJJvCfKkbYia\",\"BJp2WkwLWGHHB5oQW\",\"AJexRBN9cYQmqvYu6\",\"PC3pLs36zNzpRDSuE\",\"66a9xX73nmTEuKs9k\",\"YmQb9Mo4Xcg2vzgbn\",\"ghMkPtdFCpM6w8nax\",\"CKHKhvJcq9jNMqrmd\",\"NQQzu4wyLWW9faWtK\",\"8uiLiJcmWxWe6qw65\",\"mvJBakQ35CWAnbbEZ\",\"3mDLLrPSSSYAEWAoq\",\"dZzdZbg3QCAbqXuEw\",\"JiSpvq6C7azQEmENc\",\"T6Rm8mREPMZSftzrC\",\"4TmgHkn5vqyHK3sYC\",\"LixhXu9NRb22fQpKz\",\"jkbavR2ATFJcpmo8M\",\"g2mqHYvQmr78mET8i\",\"Afnps7TJQuS9sipMb\",\"MMRLwT9rqMNLaLTGe\",\"2NDSt8HyP33cFRHsu\",\"gjiu8kLnHYxe4HoBN\",\"Dq24MSpogRmq6L4hX\",\"gKnWjDjwrJh7MK2df\",\"NH43Mn9agBWjcj9q3\",\"eW9R2SCoYnY8HBAdL\",\"vCeeMuYDbz3MB4vsk\",\"d9LBRxvADNBB5QJMB\",\"9LrF5o2TK2iE8BZJh\",\"hRfdHT8bWztZuCqzi\",\"8PwfYqoDQFThzNtvf\",\"TCvpT4EPb8qNssNB7\",\"rCrbqMiaGPgHYTNxu\",\"FiaTpm7ehfDv43wSG\",\"uK58g2EXxqxTaB2iA\",\"B4y8aoyXJtskYPFEL\",\"gbGzZz5Yq5hT357v8\",\"mw9464S5dnenqzvpm\",\"vAh63eGRwkuJtoP8v\",\"2E6jQWFmYiGsd3TrC\",\"X4rzfxGgxx6CS7Bpz\",\"RYLiBvHZfZahTA3rm\",\"qB6KSTYC6H2TQEQY6\",\"5QN8R22z43SrwoHDz\",\"AmmHpHGQayM3wsw2H\",\"m2iiZZHTpzHcEKJMn\",\"vAbK8sCfKyFC78HYg\",\"c2q7mY39z5JPEMCaM\",\"hPMgnPPjNSfMkH46u\",\"TDt46Kh4kpyGQHE4a\",\"Ncn7Qn2LbdsiJnfFk\",\"7DXJ3mvKMHHqBLt92\",\"Wi4H6ayKsNDWWQCG5\",\"2MjzJ7yxh3eT3xbng\",\"GgQqni8TkbqEBGcsy\",\"FT2wBacm3JxrYmZDW\",\"wrL4iX2CCSqDCCty3\",\"sMcFMPkMJC4Kh6ymj\",\"mdRQaGT98ycMt87S2\",\"rraTtctZqnjXu2L2x\"],\"total\":420,\"quality\":[4,4,5,5,5,5,5,5,5,1,5,5,5,5,5,5,4,5,5,4,5,5,5,5,5,5,5,5,5,5,5,1,5,4,5,5,5,5,5,5,5,5,5,5,5,4,4,1,3,5,5]},\"flags\":2},\"summary\":\"Create a function that takes in a sentence and a character to find. Return a dictionary of each word in the sentence, with the number of the specified character as the value.\\n\\nExamples\\nfind_occurrences(\\\"Hello World\\\", \\\"o\\\") ➞ {\\n  \\\"hello\\\" : 1,\\n  \\\"world\\\" : 1\\n}\\n\\nfind_occurrences(\\\"Create a nice JUICY function\\\", \\\"c\\\") ➞  {\\n  \\\"create\\\" : 1,\\n  \\\"a\\\" : 0,\\n  \\\"nice\\\" : 1,\\n  \\\"j\",\"tags\":[\"arrays\",\"data_structures\",\"algorithms\"],\"timestamp\":{\"$date\":1580061410674},\"title\":\"Letter Occurrences Per Word\",\"quality\":4.588235294117647,\"family\":[{\"_id\":\"gA9dpoanWY6StiKR9\",\"language\":\"javascript\"},{\"_id\":\"cWQ5Qf98dQPoPJTjX\",\"language\":\"python3\"},{\"_id\":\"iqYLE3HsieTS5yCXq\",\"language\":\"ruby\"}]}}"]