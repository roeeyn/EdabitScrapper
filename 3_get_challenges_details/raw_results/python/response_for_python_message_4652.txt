a["{\"msg\":\"result\",\"id\":\"1042\",\"result\":{\"_id\":\"RqhLJk82ySnmxxJBi\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"def power_morphic(num):\\n\\t\",\"difficulty\":1.5384615384615385,\"familyId\":\"GobY5ZuLvAx2GLH4p\",\"instructions\":\"A number `num`, that elevated to the power of another number `k` \\\"ends\\\" with the same `num`, it's automorphic.\\n\\n```\\n5² = 25\\n# It's automorphic because \\\"25\\\" ends with \\\"5\\\"\\n\\n5³  = 125\\n# It's automorphic because \\\"125\\\" ends with \\\"5\\\"\\n\\n76⁴ = 33362176\\n# It's automorphic because \\\"33362176\\\" ends with \\\"76\\\"\\n```\\n\\nA number can have various powers that make it automorphic (i.e. look at number `5` in the above example). In this challenge, you have to verify if the given number is automorphic for each power from `2` up to `10`.\\n\\nGiven a non-negative integer `num`, implement a function that returns the string:\\n- `\\\"Polymorphic\\\"` if `num` is automorphic for **every** power from `2` up to `10`.\\n- `\\\"Quadrimorphic\\\"`  if `num` is automorphic for **only four** powers (any from `2` up to `10`).\\n- `\\\"Dimorphic\\\"`  if `num` is automorphic for **only two** powers (any from `2` up to `10`).\\n- `\\\"Enamorphic\\\"`  if `num` is automorphic for **only one** power (any from `2` up to `10`).\\n- `\\\"Amorphic\\\"`  if `num` is **not automorphic** for for any powers from `2` up to `10`.\\n\\n### Examples\\n```\\npower_morphic(5) ➞ \\\"Polymorphic\\\"\\n# From 2 up to 10, every power of 5 ends with 5\\n\\npower_morphic(21) ➞ \\\"Enamorphic\\\"\\n# 21⁶ = 85766121\\n\\npower_morphic(7) ➞ \\\"Dimorphic\\\"\\n# 7⁵ = 716807\\n# 7⁹ = 40353607\\n\\npower_morphic(4) ➞ \\\"Quadrimorphic\\\"\\n# 4³ = 64\\n# 4⁵ = 1024\\n# 4⁷ = 16384\\n# 4⁹ = 262144\\n\\npower_morphic(10) ➞ \\\"Amorphic\\\"\\n# There are no powers that make it automorphic\\n```\\n\\n### Notes\\n- You can do a complete loop cycle to check if `num` is automorphic for each power, or you can try to spot the discriminants that permit you to shorten the logic of your code.\\n- Despite being inspired by the OEIS sequence A003226, the assertions of this challenge are to be considered properly valid only in the specific context.\",\"isHidden\":false,\"lab\":\"Test.assert_equals(power_morphic(0), \\\"Polymorphic\\\")\\nTest.assert_equals(power_morphic(1), \\\"Polymorphic\\\")\\nTest.assert_equals(power_morphic(4), \\\"Quadrimorphic\\\")\\nTest.assert_equals(power_morphic(7), \\\"Dimorphic\\\")\\nTest.assert_equals(power_morphic(10), \\\"Amorphic\\\")\\nTest.assert_equals(power_morphic(68), \\\"Dimorphic\\\")\\nTest.assert_equals(power_morphic(121), \\\"Amorphic\\\")\\nTest.assert_equals(power_morphic(501), \\\"Quadrimorphic\\\")\\nTest.assert_equals(power_morphic(625), \\\"Polymorphic\\\")\\nTest.assert_equals(power_morphic(3376), \\\"Enamorphic\\\")\\nTest.assert_equals(power_morphic(2030), \\\"Amorphic\\\")\\nTest.assert_equals(power_morphic(3751), \\\"Quadrimorphic\\\")\\nTest.assert_equals(power_morphic(9376), \\\"Polymorphic\\\")\\nTest.assert_equals(power_morphic(9999), \\\"Quadrimorphic\\\")\",\"language\":\"python3\",\"summary\":\"A number num, that elevated to the power of another number k \\\"ends\\\" with the same num, it's automorphic.\\n\\n5² = 25\\nIt's automorphic because \\\"25\\\" ends with \\\"5\\\"\\n\\n5³  = 125\\nIt's automorphic because \\\"125\\\" ends with \\\"5\\\"\\n\\n76⁴ = 33362176\\nIt's automorphic because \\\"33362176\\\" ends with \\\"76\\\"\\n\\nA number can have various powers that make it automorphic (i.e. look at number 5\",\"tags\":[\"numbers\",\"logic\",\"conditions\",\"loops\"],\"timestamp\":{\"$date\":1580790884040},\"title\":\"Numerical Morphisms\",\"stats\":{\"completed\":{\"total\":206,\"ratings\":[1,1,1,1,1,2,1,2,0,2,2,2,2,3,2,2,2,1,2,1,1,2,2,2,2,2,2,1,0,1,0,1,2,1,0,2,0,0,2,1,1,2,2,2,2,2,1,1,2,2,1,2,0,0,1,2,2,2,2,1,2,2,1,1,1,1,1,3,2,2,2,1,3,2,1,2,1,2,1,2,2,2,1,2,0,2,2,1,2,3,0,2,1,2,2,2,0,2,2,2,2,2,1,2,2,1,2,2,2,1,1,1,0,1,1,2,2,2,0,2,2,3,2,2,2,1,2,2,2,1,0,1,5,2,1,0,2,2,1,2,0,2,2,3,2,0,3,0,2,2,0,1,1,2,2,2,2,2,1,2,3,2,2,2,1,1,2,1,1],\"rators\":[\"2fxapKr8XGdNeaKi2\",\"C4QntmkYtB89GNtpd\",\"Ycj4iTJGFyvC4bXek\",\"Jqk2uJZZxEv5wZFze\",\"HQxp7NcdvF92G7bYS\",\"eKPZp5XdiAprW6648\",\"zREEDWWu2PcWajAGA\",\"yabtHTtycsWhcGBfD\",\"q85Lo85cGnQmFZKE6\",\"tAF9Gf6PiGogbZuWs\",\"u5u2YpHXiNgzDNJdX\",\"gb9rvGus2Jv7bjZSs\",\"8JyqsSbN2FJXPr3cw\",\"PXAcsKkssS2yLyDv2\",\"mxX4rH5ELYkdZ2Mbw\",\"s5M5RvgqR9BhB9JoC\",\"AasGs8AeX9Lcb9xJn\",\"4CFzv558qbGcpQwc4\",\"BeFnbPbMnAM2SjBdZ\",\"2ahpwvBErWo33rdBH\",\"pHfkqrQCssxLpJi4y\",\"Yp7uvStL97cC9fKkY\",\"v3fjGuc7Pq4yjFygS\",\"Z85ajWfZ4jDPkbvR4\",\"4tgBydK887PitgAoi\",\"jeuoearPPTcGPgXhf\",\"N7GPFEhCaiQ79MKjz\",\"9Ly8afdtofp8DXzrt\",\"cR3ibTMxLyEdDFCHY\",\"dHZqT6h4JMwk5fPC8\",\"sz8ufn9i8zeiGWpAy\",\"aRqQ42J5zqCmBNd8w\",\"6abffx8jQDCf7kgvb\",\"WLFPvm65aHfgwQy7N\",\"E8TMSMSamEbBtf9Lo\",\"X29Ekg7HjqHAYgCSM\",\"zd9FLSzsGz3evKafy\",\"5nY48krepaT4a4QTN\",\"N2wnZXkhDH86mgjQ8\",\"C9LKGu2g5hSijvDzA\",\"E9ttMPTkLkKG6nZrg\",\"CEd9tLdXeDeNHSzys\",\"j2wcHGHmPCHbaQEye\",\"hnyhBFWwNCz9mDfSi\",\"jNvegJWCk5HCtEMbK\",\"2iFe3EHEH2YdhSKrs\",\"aEm3Wvj2rFYRL8Lrb\",\"v9KtC8YLbMWmXiW2H\",\"4AoQy4B5fPs2KBinr\",\"2QGRoQn2dRq3scu7k\",\"RX8vfGmaNWLahPWpd\",\"PWJq8oJNMEhwRGD4M\",\"8PwfYqoDQFThzNtvf\",\"mybpojPXaZigaqsAD\",\"9uZpgAtSuPZ7W7DL6\",\"eLkj3Zb2DqiW4AEEh\",\"gJYuGdkXEWWmGRLzu\",\"ZNnsMeNkdDhHjSrZb\",\"KRSKj7ikX2ytWFmod\",\"q5a96XumccZyhQNyL\",\"HF28xZKSLM9wEuqNg\",\"Cc2Cgj4MWXZxsTooC\",\"k5mp7Hkg8w5rwiXpe\",\"DEDniTrstQYGounXT\",\"YaKCTFge7R4AmacxX\",\"kYWb8BwpKwunQkxeX\",\"KdNDysEsy2TW5QRJ2\",\"8LfTheFzvicameoz9\",\"4BHrt3NoCQECjvFJC\",\"ytceK4TxiCchoCLYC\",\"yZvzB3qFb8pkHy4dg\",\"M8dQuMrEpP8Hc3tHN\",\"Nua6T3dBurBy3Qfg9\",\"Lfut9z3euZ3odxFcH\",\"9pzFiFK3ANLjQfnr2\",\"axC4Ye5xnfo9MEWj6\",\"9yHhFzAv5TYxsfmm8\",\"gSFJPsMXnqAog3Q9f\",\"9dgvEreRDYRiwLmYv\",\"FRN2W8RYpJ6GPhgRy\",\"FEYpu9RWysAgW3XnP\",\"JS3hNM3XXkxPdg3yk\",\"nfXGHENb5md7m355s\",\"FzxTj4GuujhwpZM7y\",\"EBcDZTAZN4KnQqrck\",\"ahk2qiXKJA753wAJk\",\"hab8YixsXxe4CcZpP\",\"4rwxLqLs2mNZNg8NB\",\"a777e8chPvJkY3tKa\",\"DrkR35NqnP9NDLbq6\",\"XrqNzJ2FRG8HnGiR6\",\"eMuCpJ2spXWkJjWNz\",\"2ptN2mhjFwFcHyPZd\",\"So6PHm74mfJuY2WTs\",\"4yNLEwL2rsx4EE5Nt\",\"bJxaKHJqR82EWw8Su\",\"H4abACFDH5t8CnnyH\",\"3cF6NXq3ZEwdkgSjb\",\"ZrKCkX7xxGGZzauFW\",\"n2BRY9X8899dcG8Bw\",\"syRNbbPdLCGXbH2Gy\",\"NG8PWBSjsM8mMhQEq\",\"iojEnnY9FsMfYzp6f\",\"YcCLwitFMAEJSnxAW\",\"Pe8vWpDHRuH9nSGKW\",\"yjtdwc2AC4jA2RWtn\",\"NNE5HNRXAkmhrWgyQ\",\"HqmxnQJM66Y57twhn\",\"R4SjTgDnpigJYDLyL\",\"6SKDJwXpev4qPSzgM\",\"oBcs8GLX2ZFLXQy8y\",\"GGprTwrkjuccmrQRg\",\"ta5CrWnBCRusD2WMo\",\"PhceyfmFntJcn5Fhf\",\"6gS4E2C84vBYTYeDZ\",\"RehJGBFS6CYiWdjZx\",\"w2HhxvSLmDhaGCAjE\",\"zPQm4aRmkjg4gWCwf\",\"k2Eo3wyfZZ6KxvKhN\",\"j49s8dHmmiyPxZmWj\",\"tpxMgkGSHwBjS95Ta\",\"KLmLKaJPfsYxp42p2\",\"mG8HqKiAQFTdRZthG\",\"gXTAie79kiw28tx5u\",\"EMJ6uvBZkie429gdg\",\"QRv96jmNaYsWkxQEG\",\"9CoqdidjM9KbeKnHY\",\"DPi9QGLctq2y76KuE\",\"J3upzLHuEwXH7Z2hx\",\"9bQyb6rW7xfE4vgrR\",\"wRttWTM59y8m5mx7x\",\"dYPkStFnLvAMsHSzZ\",\"KJCDwGkoXh8qtbbKr\",\"cAP3n5NY64uoMwzRR\",\"dj5AyG5fWP8FdsSmZ\",\"RGMbFMZXJr7DhcAJy\",\"5HCu9Ydd86QgHDRNP\",\"5XiuAqicKD4hBdu63\",\"d8qtzoLB264iP8tdY\",\"kNrnnMxhFZztMTBAX\",\"dBzwBtRjZqB98DJeB\",\"xiY3z64v4gf9NLxtc\",\"J5T8gZqiZXFuFDTQ7\",\"HuNF3xTBzmatyGSTm\",\"3nied3n8KG8RSNixH\",\"YRAzEBJoLvSaiPtYx\",\"5S9nX4rKsnCcnv4Cz\",\"5hQnRWiKkhgKJXNMP\",\"buX4mCQhtXCfBjeno\",\"GGdmhAvxXhqhhibJN\",\"YTexq52K4j9i6tTXq\",\"eYfPWvZwnJQkHbSTK\",\"Ds7L5bksw2QRHjrKL\",\"qAby4AWXmTNeusvg3\",\"sHjfbGQGLHE6JR6qu\",\"srJ34BaybkQh3qRkM\",\"Afnps7TJQuS9sipMb\",\"o4ixjQGSaYqA2JoM4\",\"zoDHPoPn9mhXpmka7\",\"2EbDCCJJvCfKkbYia\",\"T6iBEE2jp7f7iEF2P\",\"66a9xX73nmTEuKs9k\",\"yod5YhKtPqw2GfG9B\",\"PC3pLs36zNzpRDSuE\",\"CHvzhtXnv8HTbPQ56\",\"LQxof8pGabGuWP7Gn\",\"mvJBakQ35CWAnbbEZ\",\"AJexRBN9cYQmqvYu6\",\"rrSC943cCKNG48sH4\",\"8BFSTCnoe2QggN64c\",\"qzXAMXsHZGT8o5hTA\",\"EfxwqhYdapX3dMQC2\",\"BrTDhPJcACL2bsrpJ\",\"XD5nmvKQchKezPXhy\",\"AFfw7cGg83uYk2Miy\",\"2PufnQcsHsfymufX3\",\"X4rzfxGgxx6CS7Bpz\",\"4TmgHkn5vqyHK3sYC\",\"dzS6WBTMHyFEag6Fp\",\"d9LBRxvADNBB5QJMB\",\"pduNK68oazqQTtbLp\",\"wjc4iejpErBhxWwHo\",\"yAouD3PxzED8a4gap\",\"ey3CASd6Je5LEJzfB\",\"NzbRqGWspQnWMoDrF\",\"mw9464S5dnenqzvpm\",\"RoGGD5cpHb4ftdLDv\",\"Wi4H6ayKsNDWWQCG5\",\"cTHHMhaqyaZQb4iJN\"],\"quality\":[4,5,4,2,5,4,4,5,4,5,5,5,4,5,5,5,5,4,5,5,5,5,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":4.6,\"family\":[{\"_id\":\"TFnrbZNSE6PxjFBcr\",\"language\":\"javascript\"},{\"_id\":\"RqhLJk82ySnmxxJBi\",\"language\":\"python3\"},{\"_id\":\"oubiQ6aJo7Da2t8XH\",\"language\":\"ruby\"}]}}"]