a["{\"msg\":\"result\",\"id\":\"1015\",\"result\":{\"_id\":\"NybeH5L7wFPYeynCn\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def three_letter_collection(s):\\n\\t\",\"difficulty\":1.5188679245283019,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"SsD52eFxbqXCZbcKz\",\"instructions\":\"Given a string, return a **sorted list** of words formed from the first three letters, then the next three letters, shifting by only one.\\n\\n### Worked Example\\n```\\nthree_letter_collection(\\\"edabit\\\") ➞ [\\\"abi\\\", \\\"bit\\\", \\\"dab\\\", \\\"eda\\\"]\\n# 1st word: \\\"eda\\\"\\n# 2nd word: \\\"dab\\\"\\n# 3rd word: \\\"abi\\\"\\n# 4th word: \\\"bit\\\"\\n# Remember to sort the list!\\n```\\n\\n### Examples\\n```\\nthree_letter_collection(\\\"slap\\\") ➞ [\\\"lap\\\", \\\"sla\\\"]\\n\\nthree_letter_collection(\\\"click\\\") ➞ [\\\"cli\\\", \\\"ick\\\", \\\"lic\\\"]\\n\\nthree_letter_collection(\\\"cat\\\") ➞ [\\\"cat\\\"]\\n\\nthree_letter_collection(\\\"hi\\\") ➞ []\\n```\\n\\n### Notes\\nReturn an *empty list*  if given a word with **less** than **3 letters**.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(three_letter_collection(\\\"slap\\\"), [\\\"lap\\\", \\\"sla\\\"])\\nTest.assert_equals(three_letter_collection(\\\"click\\\"), [\\\"cli\\\", \\\"ick\\\", \\\"lic\\\"])\\nTest.assert_equals(three_letter_collection(\\\"cat\\\"), [\\\"cat\\\"])\\nTest.assert_equals(three_letter_collection(\\\"hi\\\"), [])\\nTest.assert_equals(three_letter_collection(\\\"e\\\"), [])\\nTest.assert_equals(three_letter_collection(\\\"\\\"), [])\\nTest.assert_equals(three_letter_collection(\\\"programming\\\"), [\\\"amm\\\", \\\"gra\\\", \\\"ing\\\", \\\"min\\\", \\\"mmi\\\", \\\"ogr\\\", \\\"pro\\\", \\\"ram\\\", \\\"rog\\\"])\\nTest.assert_equals(three_letter_collection(\\\"antidisestablishmentarianism\\\"), [\\\"abl\\\", \\\"ani\\\", \\\"ant\\\", \\\"ari\\\", \\\"bli\\\", \\\"dis\\\", \\\"ent\\\", \\\"est\\\", \\\"hme\\\", \\\"ian\\\", \\\"idi\\\", \\\"ise\\\", \\\"ish\\\", \\\"ism\\\", \\\"lis\\\", \\\"men\\\", \\\"nis\\\", \\\"nta\\\", \\\"nti\\\", \\\"ria\\\", \\\"ses\\\", \\\"shm\\\", \\\"sta\\\", \\\"tab\\\", \\\"tar\\\", \\\"tid\\\"])\\nTest.assert_equals(three_letter_collection(\\\"zoology\\\"), [\\\"log\\\", \\\"ogy\\\", \\\"olo\\\", \\\"ool\\\", \\\"zoo\\\"])\\nTest.assert_equals(three_letter_collection(\\\"assassination\\\"), [\\\"ass\\\", \\\"ass\\\", \\\"ati\\\", \\\"ina\\\", \\\"ion\\\", \\\"nat\\\", \\\"sas\\\", \\\"sin\\\", \\\"ssa\\\", \\\"ssi\\\", \\\"tio\\\"])\\nTest.assert_equals(three_letter_collection(\\\"bookkeeper\\\"), [\\\"boo\\\", \\\"eep\\\", \\\"epe\\\", \\\"kee\\\", \\\"kke\\\", \\\"okk\\\", \\\"ook\\\", \\\"per\\\"])\",\"language\":\"python3\",\"quality\":4.742857142857143,\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,3,2,2,1,1,1,2,3,2,2,2,2,1,2,2,2,2,2,3,2,2,2,1,1,2,3,1,1,1,1,2,1,0,0,0,1,0,1,0,2,2,2,2,0,0,2,1,2,0,0,2,0,2,3,2,2,3,2,2,2,0,0,2,0,2,1,2,1,1,1,2,2,2,0,2,2,3,2,2,1,2,1,1,2,1,2,2,2,1,0,2,1,1,2,2,2,2,1,2,1,1],\"quality\":[5,4,5,5,5,5,5,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,5,4,5,5,5,5,5,1,5,5,5],\"rators\":[\"8PwfYqoDQFThzNtvf\",\"PXAcsKkssS2yLyDv2\",\"tAF9Gf6PiGogbZuWs\",\"HF28xZKSLM9wEuqNg\",\"s5M5RvgqR9BhB9JoC\",\"8JyqsSbN2FJXPr3cw\",\"a777e8chPvJkY3tKa\",\"euPBBaYXyS8RBr9KB\",\"hkiz2Nv927cYGrA86\",\"J3upzLHuEwXH7Z2hx\",\"Yp7uvStL97cC9fKkY\",\"MKT7khMBGXzA22ykf\",\"QRv96jmNaYsWkxQEG\",\"q7YAahG8D2vWsqXdM\",\"iS5BrkGLzJyPK7nKt\",\"6428wKHtwKkFdvBs5\",\"gJYuGdkXEWWmGRLzu\",\"6MjSiiBLPcvXbXcaZ\",\"LNwMrFy9vXYK2cSCW\",\"xn7uGNKeAwPEkP9oA\",\"dYPkStFnLvAMsHSzZ\",\"gXTAie79kiw28tx5u\",\"qD2LrwaDrSdiybLKY\",\"dj5AyG5fWP8FdsSmZ\",\"Di59tpzoNqogWjDNH\",\"dkcmCKwqApX5jBggc\",\"5ubkq4o2RHFurvjJ9\",\"fznzd3qnvtbFkkizz\",\"p8qqFdJ3FSk5x9z3G\",\"tis2x6gZcaucwdrtQ\",\"4Ytzg5uu2quL2jmqt\",\"JS3hNM3XXkxPdg3yk\",\"gb9rvGus2Jv7bjZSs\",\"aEm3Wvj2rFYRL8Lrb\",\"EMED9x5CXGSevWAp4\",\"dHConQk6pC8c323TE\",\"jp7Aeb9imqFXSNZDA\",\"p7js9trz2zk2RorCR\",\"oBcs8GLX2ZFLXQy8y\",\"pDvFWMCD9fQwoBPcu\",\"axdSNLZpiCDF8RS6n\",\"yjtdwc2AC4jA2RWtn\",\"FEYpu9RWysAgW3XnP\",\"5XiuAqicKD4hBdu63\",\"DPi9QGLctq2y76KuE\",\"cR3ibTMxLyEdDFCHY\",\"cAP3n5NY64uoMwzRR\",\"7D76ZPLjgjZideoy9\",\"zd9FLSzsGz3evKafy\",\"RGMbFMZXJr7DhcAJy\",\"KJCDwGkoXh8qtbbKr\",\"rfyEkETeoS96QNH4e\",\"cRoHBaA7HjePc8wb2\",\"buX4mCQhtXCfBjeno\",\"d8qtzoLB264iP8tdY\",\"Jqk2uJZZxEv5wZFze\",\"5HCu9Ydd86QgHDRNP\",\"2QGRoQn2dRq3scu7k\",\"wRttWTM59y8m5mx7x\",\"J5T8gZqiZXFuFDTQ7\",\"HuNF3xTBzmatyGSTm\",\"3nied3n8KG8RSNixH\",\"YRAzEBJoLvSaiPtYx\",\"R4SjTgDnpigJYDLyL\",\"HqmxnQJM66Y57twhn\",\"5S9nX4rKsnCcnv4Cz\",\"5hQnRWiKkhgKJXNMP\",\"eYfPWvZwnJQkHbSTK\",\"Nb6LYPoQP6KJZt8mz\",\"GGdmhAvxXhqhhibJN\",\"Wv2vJnEj8ywNmARoF\",\"sHjfbGQGLHE6JR6qu\",\"srJ34BaybkQh3qRkM\",\"JhX7jvtpwNyxcc39m\",\"9bQyb6rW7xfE4vgrR\",\"Ds7L5bksw2QRHjrKL\",\"DEDniTrstQYGounXT\",\"kWfNDxZyXFJxaTd2S\",\"YcCLwitFMAEJSnxAW\",\"T2vhHPhRR96hRizq8\",\"fSQSHjW3e72MrWxbD\",\"iojEnnY9FsMfYzp6f\",\"eMuCpJ2spXWkJjWNz\",\"qAby4AWXmTNeusvg3\",\"o4ixjQGSaYqA2JoM4\",\"ZosmA4djXWLk8idGA\",\"T6iBEE2jp7f7iEF2P\",\"CHvzhtXnv8HTbPQ56\",\"sbJcFfQjQ59Wfg4Cd\",\"66a9xX73nmTEuKs9k\",\"PC3pLs36zNzpRDSuE\",\"yod5YhKtPqw2GfG9B\",\"kdcWyvQAs27aCfbr8\",\"yr822PZmmiDDenxpB\",\"6qWDsbR4JYTkRnhPr\",\"AJexRBN9cYQmqvYu6\",\"8BFSTCnoe2QggN64c\",\"mvJBakQ35CWAnbbEZ\",\"BrTDhPJcACL2bsrpJ\",\"AasGs8AeX9Lcb9xJn\",\"3cF6NXq3ZEwdkgSjb\",\"9Ly8afdtofp8DXzrt\",\"bv4ycSophchSEFoK9\",\"L3KXZhRGpFoN4QX8D\",\"rrSC943cCKNG48sH4\",\"RoGGD5cpHb4ftdLDv\",\"ey3CASd6Je5LEJzfB\",\"LQxof8pGabGuWP7Gn\",\"qzXAMXsHZGT8o5hTA\",\"2PufnQcsHsfymufX3\",\"Afnps7TJQuS9sipMb\",\"PytNZK9mNiRiZxPrm\",\"XD5nmvKQchKezPXhy\",\"AFfw7cGg83uYk2Miy\",\"T6Rm8mREPMZSftzrC\",\"4TmgHkn5vqyHK3sYC\",\"4Lwjr34ypKNQNQCar\",\"dzS6WBTMHyFEag6Fp\",\"d9LBRxvADNBB5QJMB\",\"pduNK68oazqQTtbLp\",\"wjc4iejpErBhxWwHo\",\"u5u2YpHXiNgzDNJdX\",\"yAouD3PxzED8a4gap\",\"mxX4rH5ELYkdZ2Mbw\",\"NzbRqGWspQnWMoDrF\",\"PWgzeK859suojbrRx\",\"5QN8R22z43SrwoHDz\",\"5Dd7XwALvvMMwS4Fb\",\"X4rzfxGgxx6CS7Bpz\",\"9pzFiFK3ANLjQfnr2\",\"PzWCGSW4mA9Xicq2e\",\"7htNMeJaq9xvLYCNs\",\"dZjatCymgJrivseBF\",\"2Gh7rLkAHMQyDjgwn\",\"Wi4H6ayKsNDWWQCG5\",\"rCrbqMiaGPgHYTNxu\"],\"total\":146},\"flags\":0},\"summary\":\"Given a string, return a sorted list of words formed from the first three letters, then the next three letters, shifting by only one.\\n\\nWorked Example\\nthreelettercollection(\\\"edabit\\\") ➞ [\\\"abi\\\", \\\"bit\\\", \\\"dab\\\", \\\"eda\\\"]\\n1st word: \\\"eda\\\"\\n2nd word: \\\"dab\\\"\\n3rd word: \\\"abi\\\"\\n4th word: \\\"bit\\\"\\nRemember to sort the list!\\n\\nExamples\\nthreelettercollection(\\\"slap\\\") ➞ [\\\"lap\\\", \\\"sla\\\"]\",\"tags\":[\"loops\",\"strings\",\"arrays\",\"algorithms\"],\"timestamp\":{\"$date\":1602695886531},\"title\":\"Triple Letter Groupings\",\"family\":[{\"_id\":\"PkqSq3ea2bfJvF6Tk\",\"language\":\"java\"},{\"_id\":\"LoBo2DoWQuuzSr6Ft\",\"language\":\"javascript\"},{\"_id\":\"NybeH5L7wFPYeynCn\",\"language\":\"python3\"},{\"_id\":\"FwpmJZ9LLQcxMk5Yi\",\"language\":\"ruby\"}]}}"]