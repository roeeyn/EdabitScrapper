a["{\"msg\":\"result\",\"id\":\"1432\",\"result\":{\"_id\":\"f6X7pa38iQyoytJgr\",\"author\":\"zatoichi49\",\"authorId\":\"tAF9Gf6PiGogbZuWs\",\"code\":\"def increasing_word_weights(sentence):\\n\\t\",\"difficulty\":2.05,\"editorId\":\"tAF9Gf6PiGogbZuWs\",\"familyId\":\"vB4eXfw8wiMRvHqS5\",\"instructions\":\"The *weight* of an English word can be calculated by summing the `ASCII` code point for each character in the word, *excluding* any punctuation:\\n\\n```\\n\\\"Wouldn't\\\" = 87 + 111 + 117 + 108 + 100 + 110 + 116 = 749\\n```\\n\\nWrite a function that takes a sentence as a string, returning `True` if all word weights increase for each word in the sentence, and `False` if any word weight decreases or remains the same. For any single-word sentences, return `True`.\\n\\n### Examples\\n```\\nincreasing_word_weights(\\\"Why not try?\\\") ➞ True\\n# 312 -> 337 -> 351 (weights increase)\\n\\nincreasing_word_weights(\\\"All other roads.\\\") ➞ False\\n# 281 -> 546 -> 537 (537 is less than 546)\\n```\\n\\n### Notes\\nCheck the **Resources** for links on how to return character codes.\",\"lab\":\"Test.assert_equals(increasing_word_weights(\\\"Why not try?\\\"), True)\\nTest.assert_equals(increasing_word_weights(\\\"Face your fears, never settle.\\\"), True)\\nTest.assert_equals(increasing_word_weights(\\\"DON'T SHOUT!\\\"), True)\\nTest.assert_equals(increasing_word_weights(\\\"Can you just leave?\\\"), True)\\nTest.assert_equals(increasing_word_weights(\\\"You will push ahead, creating solutions!\\\"), True)\\nTest.assert_equals(increasing_word_weights(\\\"All that money doesn't guarantee happiness.\\\"), True)\\nTest.assert_equals(increasing_word_weights(\\\"Full steam ahead!\\\"), False)\\nTest.assert_equals(increasing_word_weights(\\\"Not all those who wander are lost.\\\"), False)\\nTest.assert_equals(increasing_word_weights(\\\"All other roads.\\\"), False)\\nTest.assert_equals(increasing_word_weights(\\\"Whatever you are, be a good one.\\\"), False)\\nTest.assert_equals(increasing_word_weights(\\\"Standing on the shoulders of giants.\\\"), False)\\nTest.assert_equals(increasing_word_weights(\\\"You get what you settle for.\\\"), False)\\nTest.assert_equals(increasing_word_weights(\\\"Louise's grannie escapes hassled village gardens.\\\"), False)\\nTest.assert_equals(increasing_word_weights(\\\"Inconceivable!\\\"), True)\",\"language\":\"python3\",\"summary\":\"The weight of an English word can be calculated by summing the ASCII code point for each character in the word, excluding any punctuation:\\n\\n\\\"Wouldn't\\\" = 87 + 111 + 117 + 108 + 100 + 110 + 116 = 749\\n\\nWrite a function that takes a sentence as a string, returning True if all word weights increase for each word in the sentence, and False if any word weight decreas\",\"tags\":[\"arrays\",\"strings\",\"language_fundamentals\",\"validation\"],\"timestamp\":{\"$date\":1559310506669},\"title\":\"Increasing Word Weights\",\"stats\":{\"completed\":{\"total\":181,\"ratings\":[2,2,2,2,2,2,2,2,2,2,3,3,3,1,2,3,3,1,2,2,2,2,3,3,0,3,3,2,3,0,2,1,2,1,3,0,0,2,2,2,2,3,2,3,3,3,3,3,2,2,2,0,2,3,3,1,1,3,1,1,2,2,3,3,0,2,2,1,2,3,2,2,2,3,3,1,2,2,3,1,3,2,3,3,2,2,2,3,5,2,2,2,3,0,2,1,2,2,3,2,3,3,3,3,0,4,1,1,3,1,3,0,2,2,3,2,2,2,3,2,2,0,2,3,3,0,0,2,2,2,3,0,2,1,2,2,1,0,4,2,2,3,3,3,0,2,3,2,1,3,0,2,3,3,0,3,2,2,3,3],\"rators\":[\"FikSPhcrHBpQ4CyGC\",\"tAF9Gf6PiGogbZuWs\",\"8JyqsSbN2FJXPr3cw\",\"kQH5b8MXJunh84Czq\",\"PFjMZGHNAPTkgd7tq\",\"AF6LgdKhEdzwgRJom\",\"HmPDdBBnwpopZRQAY\",\"C9LKGu2g5hSijvDzA\",\"7g3vZaQXhLpxrajyg\",\"nF9pCCzbGDhzvWgaw\",\"6u7yc9m6HuHGbHzph\",\"hsrNYf3WbexXJKhCq\",\"zjQPuEyZ38tTW6P5w\",\"Wf6AF7TuNwEobxuW6\",\"jYJ26SiLKBu5GRumq\",\"gMJhLdyw3tH7L96X2\",\"cR3ibTMxLyEdDFCHY\",\"T2vhHPhRR96hRizq8\",\"N2wnZXkhDH86mgjQ8\",\"Jg8ZSRXe3NoDMCqGu\",\"oqGkxvASXq52iTDvp\",\"otXtuQygbcYATMZoP\",\"v9KtC8YLbMWmXiW2H\",\"W2wFFFx9pqgwmkFi3\",\"AYaEkTWLMmfzpwejr\",\"hAzy9apJgLWwRFGPJ\",\"fAoLuqbGvHn4w2PHf\",\"qBaLGrm952ii9K23M\",\"PuJDHtAaX6vXeJJTC\",\"HQxp7NcdvF92G7bYS\",\"HqmxnQJM66Y57twhn\",\"Nj6FwgBtAXsaQwsM2\",\"eXW8reZCCZHQzJjQi\",\"AbrJ8hMyv5fFXG6DN\",\"fxLjWpWbBeaYcvdgB\",\"K96FwtfDDN5WM4Bb7\",\"8PwfYqoDQFThzNtvf\",\"5uA8xmgifmiJrqbzy\",\"Jqk2uJZZxEv5wZFze\",\"6ShafRStcvew4GfCh\",\"7hzSvcYdq6QjoRnJY\",\"DLai9DxpZN6p5TPRX\",\"u5u2YpHXiNgzDNJdX\",\"knT3HJMb87iKpjqdM\",\"ab7BsQuhDo3QgE6bh\",\"2innwjWqxJHo4eRGh\",\"vgTvCCxgvbCTDvaRT\",\"FgW5SSLhP733riDMb\",\"ouPtoRyNq8hKH2WkT\",\"AasGs8AeX9Lcb9xJn\",\"4CFzv558qbGcpQwc4\",\"pmgFEciNrd3ES9tuu\",\"PXAcsKkssS2yLyDv2\",\"8LfTheFzvicameoz9\",\"aEm3Wvj2rFYRL8Lrb\",\"ZNnsMeNkdDhHjSrZb\",\"sz8ufn9i8zeiGWpAy\",\"55RQznnuTGpsj3EXd\",\"itDTNAvHdhpXPhg6D\",\"kYWb8BwpKwunQkxeX\",\"YRstQuthRkFeBiXug\",\"EjbDDFRECrzQDkzrX\",\"gJYuGdkXEWWmGRLzu\",\"euPBBaYXyS8RBr9KB\",\"J5T8gZqiZXFuFDTQ7\",\"3pxHTZBsv7MKzFG6Y\",\"KdNDysEsy2TW5QRJ2\",\"HF28xZKSLM9wEuqNg\",\"yr822PZmmiDDenxpB\",\"gSFJPsMXnqAog3Q9f\",\"DEDniTrstQYGounXT\",\"m6D2RuQJwrAK6WB3v\",\"hnyhBFWwNCz9mDfSi\",\"DrkR35NqnP9NDLbq6\",\"iojEnnY9FsMfYzp6f\",\"hRiMXDZNAzyPd5tpt\",\"ACEZh39brWjdGkZXb\",\"zZDaXBxMzTCBhNkgL\",\"CwXsu25ygLEwQbmQC\",\"Ecg4m7srYGgZsb4Ck\",\"iS5BrkGLzJyPK7nKt\",\"yjtdwc2AC4jA2RWtn\",\"wymkBJ3ePhAkti3ZM\",\"KZ2xddpM2f9JRaryB\",\"w2HhxvSLmDhaGCAjE\",\"XjajdyybZZbkz8o5x\",\"8fZxjQfuXw5HMSRJM\",\"DPi9QGLctq2y76KuE\",\"dkcmCKwqApX5jBggc\",\"J3upzLHuEwXH7Z2hx\",\"6MjSiiBLPcvXbXcaZ\",\"JS3hNM3XXkxPdg3yk\",\"axdSNLZpiCDF8RS6n\",\"gXTAie79kiw28tx5u\",\"9rhsisf8ofHavG5aT\",\"QRv96jmNaYsWkxQEG\",\"7scpcTEp3SEx5Wjg9\",\"oBcs8GLX2ZFLXQy8y\",\"7ifh8r4gvyYMhKB94\",\"5f6oSeq4r5WTXLdCQ\",\"cAP3n5NY64uoMwzRR\",\"ebR9m79RbNzm4cJsJ\",\"CHvzhtXnv8HTbPQ56\",\"GGdmhAvxXhqhhibJN\",\"FEYpu9RWysAgW3XnP\",\"Wpn95NqWxncQrwNgz\",\"9ivvGvJGvtQfigQaZ\",\"d8qtzoLB264iP8tdY\",\"YcCLwitFMAEJSnxAW\",\"T6iBEE2jp7f7iEF2P\",\"PWgzeK859suojbrRx\",\"2PufnQcsHsfymufX3\",\"8BFSTCnoe2QggN64c\",\"fznzd3qnvtbFkkizz\",\"Yp7uvStL97cC9fKkY\",\"s5M5RvgqR9BhB9JoC\",\"gb9rvGus2Jv7bjZSs\",\"PC3pLs36zNzpRDSuE\",\"4Lwjr34ypKNQNQCar\",\"qD2LrwaDrSdiybLKY\",\"fbr22rabEJMfBp7vD\",\"3KkyQm77zsew58Dc2\",\"BrTDhPJcACL2bsrpJ\",\"MKT7khMBGXzA22ykf\",\"ctbThYbufFCYbRK4f\",\"fSQSHjW3e72MrWxbD\",\"o4ixjQGSaYqA2JoM4\",\"gKnWjDjwrJh7MK2df\",\"LWcndkRmRFLP7zNTs\",\"kBNCPDJxWtLYE3pp5\",\"yod5YhKtPqw2GfG9B\",\"8sNv5PTHa7XQ8bNqR\",\"buX4mCQhtXCfBjeno\",\"5HCu9Ydd86QgHDRNP\",\"mvJBakQ35CWAnbbEZ\",\"Ds7L5bksw2QRHjrKL\",\"ey3CASd6Je5LEJzfB\",\"p8qqFdJ3FSk5x9z3G\",\"Qyfyyw6oC4EHAndzo\",\"KfGmizjwhtMAaXspt\",\"eMuCpJ2spXWkJjWNz\",\"jkbavR2ATFJcpmo8M\",\"9pzFiFK3ANLjQfnr2\"],\"quality\":[5,3,5,5,5,5,5,5,4,5,5,5,4,5,5,5,4,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"isHidden\":false,\"quality\":4.722222222222222,\"family\":[{\"_id\":\"mpwN3wmXAihhHAuoY\",\"language\":\"cpp\"},{\"_id\":\"HCc5AiPdjjREC7jRP\",\"language\":\"javascript\"},{\"_id\":\"f6X7pa38iQyoytJgr\",\"language\":\"python3\"},{\"_id\":\"MXWzzsghZiSWWqJPr\",\"language\":\"ruby\"}]}}"]