a["{\"msg\":\"result\",\"id\":\"2416\",\"result\":{\"_id\":\"C9LBX4DpgNj2nmLb3\",\"author\":\"zatoichi49\",\"authorId\":\"tAF9Gf6PiGogbZuWs\",\"code\":\"def word_search2(letters, words):\\n\\t\",\"difficulty\":4.136363636363637,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"XmM7M6fXmbouyNJsS\",\"instructions\":\"This challenge involves finding words in an 8x8 grid. Given a string of 64 `letters` and a list of `words` to find, convert the string to an 8x8 list, and return `True` if *all* words can be found in the list. Return `False` otherwise. Words can be read in any direction (horizontally, vertically or diagonally), and can also `wrap` over the same column, row or diagonal.\\n\\n### Example\\n```\\nletters = \\\"HWAVEOWCFONNANFABEOAMOIAHODOXORTACTIDINOBWZODGELINEEAFASTETAPELL\\\"\\nwords = [\\\"slot\\\", \\\"donate\\\", \\\"orthodox\\\", \\\"rated\\\", \\\"wave\\\", \\\"tape\\\", \\\"leg\\\", \\\"habit\\\", \\\"add\\\", \\\"fox\\\"]\\n```\\n\\nThis would give the array below:\\n\\n```\\n[\\n  [\\\"H\\\", \\\"W\\\", \\\"A\\\", \\\"V\\\", \\\"E\\\", \\\"O\\\", \\\"W\\\", \\\"C\\\"],\\n  [\\\"F\\\", \\\"O\\\", \\\"N\\\", \\\"N\\\", \\\"A\\\", \\\"N\\\", \\\"F\\\", \\\"A\\\"],\\n  [\\\"B\\\", \\\"E\\\", \\\"O\\\", \\\"A\\\", \\\"M\\\", \\\"O\\\", \\\"I\\\", \\\"A\\\"],\\n  [\\\"H\\\", \\\"O\\\", \\\"D\\\", \\\"O\\\", \\\"X\\\", \\\"O\\\", \\\"R\\\", \\\"T\\\"],\\n  [\\\"A\\\", \\\"C\\\", \\\"T\\\", \\\"I\\\", \\\"D\\\", \\\"I\\\", \\\"N\\\", \\\"O\\\"],\\n  [\\\"B\\\", \\\"W\\\", \\\"Z\\\", \\\"O\\\", \\\"D\\\", \\\"G\\\", \\\"E\\\", \\\"L\\\"],\\n  [\\\"I\\\", \\\"N\\\", \\\"E\\\", \\\"E\\\", \\\"A\\\", \\\"F\\\", \\\"A\\\", \\\"S\\\"],\\n  [\\\"T\\\", \\\"E\\\", \\\"T\\\", \\\"A\\\", \\\"P\\\", \\\"E\\\", \\\"L\\\", \\\"L\\\"]\\n]\\n```\\n\\nYou would return `True` as all words can be found:\\n\\n```\\n[\\n  [\\\"_\\\", \\\"W\\\", \\\"A\\\", \\\"V\\\", \\\"E\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\"],\\n  [\\\"_\\\", \\\"_\\\", \\\"N\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\", \\\"F\\\", \\\"_\\\"],\\n  [\\\"_\\\", \\\"_\\\", \\\"O\\\", \\\"_\\\", \\\"_\\\", \\\"O\\\", \\\"_\\\", \\\"A\\\"],\\n  [\\\"H\\\", \\\"O\\\", \\\"D\\\", \\\"O\\\", \\\"X\\\", \\\"O\\\", \\\"R\\\", \\\"T\\\"],\\n  [\\\"A\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\", \\\"D\\\", \\\"_\\\", \\\"_\\\", \\\"O\\\"],\\n  [\\\"B\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\", \\\"D\\\", \\\"G\\\", \\\"E\\\", \\\"L\\\"],\\n  [\\\"I\\\", \\\"_\\\", \\\"E\\\", \\\"E\\\", \\\"A\\\", \\\"_\\\", \\\"_\\\", \\\"S\\\"],\\n  [\\\"T\\\", \\\"_\\\", \\\"T\\\", \\\"A\\\", \\\"P\\\", \\\"E\\\", \\\"_\\\", \\\"_\\\"]\\n]\\n```\\n\\nExamples of the `wrapped` words:\\n\\n```\\n[\\n  [\\\"_\\\", \\\"_\\\", \\\"A\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\"],\\n  [\\\"_\\\", \\\"_\\\", \\\"N\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\"],\\n  [\\\"_\\\", \\\"_\\\", \\\"O\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\", \\\"A\\\"],\\n  [\\\"H\\\", \\\"O\\\", \\\"D\\\", \\\"O\\\", \\\"X\\\", \\\"O\\\", \\\"R\\\", \\\"T\\\"],\\n  [\\\"_\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\"],\\n  [\\\"_\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\", \\\"D\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\"],\\n  [\\\"_\\\", \\\"_\\\", \\\"E\\\", \\\"E\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\"],\\n  [\\\"_\\\", \\\"_\\\", \\\"T\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\", \\\"_\\\"]\\n]\\n\\n# \\\"orthodox\\\" -> horizontal\\n# \\\"donate\\\" -> vertical\\n# \\\"rated\\\" -> diagonal\\n```\\n\\n### Notes\\nSee the resources section for links on how to index nested lists.\",\"lab\":\"Test.assert_equals(word_search2('LUEWENTENRFICTIOVIVORSURWAIXTYEJUBADSLLEOEBWUASUYLLHSNLSUAETNAMN', ['analyst', 'census', 'ensue', 'bad', 'survivor', 'fuss', 'fiction', 'viable', 'jet', 'blue']), True)\\nTest.assert_equals(word_search2('BARRIERGUFUAOYEOPLANESFYCWOUNDNMPKIEIFCURIFNGPJDOFCKSRKLOHAVYHGO', ['car', 'cup', 'barrier', 'folk', 'offense', 'mud', 'log', 'wound', 'jury', 'plane']), False)\\nTest.assert_equals(word_search2('OJODAORGFRIENDLYNEEBMOBIIGASOKVCAUGFDWIATLNIFZDMNALKYEOPURCOMRET', ['zero', 'road', 'fountain', 'fool', 'bow', 'friendly', 'regular', 'bin', 'camp', 'not']), True)\\nTest.assert_equals(word_search2('IEYPINAHYFCNHMVUOOHAOENTLARCRMAYNSTISLENHCUBENMRMORUGDUPKECHUDIS', ['hut', 'dump', 'mean', 'ceremony', 'disk', 'pin', 'horse', 'fee', 'harsh', 'comma']), False)\\nTest.assert_equals(word_search2('OPCASHENAVSUNDEWKFGEAMONPEHSEBMILRCRMKCTAITOUBLWNXAVIEOAEHRGESOY', ['monk', 'plane', 'tin', 'mean', 'sow', 'way', 'wait', 'bow', 'scratch', 'extreme']), True)\\nTest.assert_equals(word_search2('EDATEBPEUROMCROPLDAIAAPEACSNHIERENSSTNFAEPEROTSLHOMFAROIPREDICTL', ['tolerant', 'deep', 'fan', 'predict', 'store', 'sleep', 'pop', 'brain', 'bet', 'mess']), False)\\nTest.assert_equals(word_search2('ANEIOLDRDICHWUHTLNHMGSWTAWEAAEOEIGCFORCGNEKREUGOCTLTPDLIHYAOITNL', ['inch', 'old', 'rotate', 'cow', 'margin', 'oil', 'result', 'check', 'lot', 'defend']), True)\\nTest.assert_equals(word_search2('DATERMSOEBIUSECUBINWOAOSETCYOHMTSNTESTSIPIONCHAMKNYKUDNEHSEYARTA', ['instinct', 'terms', 'end', 'time', 'champion', 'test', 'shout', 'bed', 'kit', 'ash']), False)\\nTest.assert_equals(word_search2('ITNESSAWTIECROFIHBESCWNLEAPTREIDBHMNEWNGOFCIWIOUCPNNXRBEYILENERG', ['crew', 'habit', 'witness', 'index', 'tip', 'energy', 'wild', 'nun', 'mix', 'force']), True)\\nTest.assert_equals(word_search2('TPEHNAPNRLATEMAHCOMPOUNDEVECOGDIYRIBEFLNOARSUAKSLEOKWFAENNNSITNW', ['metal', 'leaf', 'iron', 'rib', 'compound', 'wine', 'sit', 'complain', 'nose', 'ask']), False)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,4,5,4,5,3,5,0,5,5,5,5,4,2,1,3,5,5],\"rators\":[\"gb9rvGus2Jv7bjZSs\",\"yZvzB3qFb8pkHy4dg\",\"AYaEkTWLMmfzpwejr\",\"tAF9Gf6PiGogbZuWs\",\"8JyqsSbN2FJXPr3cw\",\"HqmxnQJM66Y57twhn\",\"FHSJnAYTbcsKFgeQa\",\"aCNWav8S8Try9RkC6\",\"8PwfYqoDQFThzNtvf\",\"3GhZpJLhhrm6AR3aM\",\"aEm3Wvj2rFYRL8Lrb\",\"vTfyrr4pGddp8rbXc\",\"mDWNyaaQ9hvPCRzSd\",\"xn7uGNKeAwPEkP9oA\",\"8sNv5PTHa7XQ8bNqR\",\"yjtdwc2AC4jA2RWtn\",\"iS5BrkGLzJyPK7nKt\",\"gJYuGdkXEWWmGRLzu\"],\"total\":22,\"quality\":[3]},\"flags\":0},\"subscribers\":[\"tAF9Gf6PiGogbZuWs\"],\"summary\":\"This challenge involves finding words in an 8x8 grid. Given a string of 64 letters and a list of words to find, convert the string to an 8x8 list, and return True if all words can be found in the list. Return False otherwise. Words can be read in any direction (horizontally, vertically or diagonally), and can also wrap over the same column, row or diagonal.\\n\\nE\",\"tags\":[\"arrays\",\"strings\"],\"timestamp\":{\"$date\":1562686829571},\"title\":\"Word Search (Part 2)\",\"isHidden\":false,\"quality\":3,\"family\":[{\"_id\":\"PxjMBvGwp75dBqXpi\",\"language\":\"javascript\"},{\"_id\":\"C9LBX4DpgNj2nmLb3\",\"language\":\"python3\"},{\"_id\":\"ZqNcxnSWuknQRRhn5\",\"language\":\"ruby\"}]}}"]