a["{\"msg\":\"result\",\"id\":\"1028\",\"result\":{\"_id\":\"kPKNb4c3QjCf5tHRM\",\"author\":\"Luis Pereira\",\"authorId\":\"aEm3Wvj2rFYRL8Lrb\",\"code\":\"def total_sales(sales_table, product):\\n\\t\",\"difficulty\":1.5265957446808511,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"HBdmZd4a63mMxaib5\",\"instructions\":\"In this question you will be given a table as below, where the first row lists the names of products, and each of row after that lists the sales of the product for each day (over some time range).\\n\\n```\\n[\\n  [\\\"A\\\", \\\"B\\\", \\\"C\\\"],\\n  [ 2 ,  7 ,  1 ],\\n  [ 3 ,  6 ,  6 ],\\n  [ 4 ,  5 ,  5 ]\\n]\\n```\\n\\nWrite a function that receives:\\n- A sales table `sales_table` as shown above.\\n- The name of a product `product`.\\n\\n... and returns the **total sales if the product is on the list**, otherwise return the string `\\\"Product not found\\\"`.\\n\\n### Examples\\n```\\ntotal_sales([\\n  [\\\"A\\\", \\\"B\\\", \\\"C\\\"],\\n  [ 2 ,  7 ,  1 ],\\n  [ 3 ,  6 ,  6 ],\\n  [ 4 ,  5 ,  5 ]\\n], \\\"A\\\") ➞ 9\\n\\n# 2 + 3 + 4 = 9\\n\\n\\ntotal_sales([\\n  [\\\"A\\\", \\\"B\\\", \\\"C\\\"],\\n  [ 2 ,  7 ,  1 ],\\n  [ 3 ,  6 ,  6 ],\\n  [ 4 ,  5 ,  5 ]\\n], \\\"C\\\") ➞ 12\\n\\n# 1 + 6 + 5 = 12\\n\\n\\ntotal_sales([\\n  [\\\"A\\\", \\\"B\\\", \\\"C\\\"],\\n  [ 2 ,  7 ,  1 ],\\n  [ 3 ,  6 ,  6 ],\\n  [ 4 ,  5 ,  5 ]\\n], \\\"D\\\") ➞ \\\"Product not found\\\"\\n```\\n\\n### Notes\\nThe examples above all use the same sales table, but in the tests the table will vary.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"table1 = [\\n ['A', 'B', 'C'],\\n [ 2 ,  7 ,  1 ],\\n [ 3 ,  6 ,  6 ],\\n [ 4 ,  5 ,  5 ]]\\n \\ntable2 = [\\n ['W', 'X', 'Y', 'Z'],\\n [ 3 ,  5 ,  7 ,  1 ],\\n [ 4 ,  5 ,  2 ,  3 ]]\\n \\ntable3 = [\\n ['R', 'T', 'V', 'W', 'C'],\\n [ 2 ,  3 ,  7 ,  7 ,  4 ],\\n [ 8 ,  5 ,  2 ,  9 ,  0 ],\\n [ 2 ,  5 ,  8 ,  7 ,  4 ],\\n [ 5 ,  3 ,  7 ,  2 ,  3 ]]\\n\\nTest.assert_equals(total_sales(table1,'A'), 9)\\nTest.assert_equals(total_sales(table1,'B'), 18)\\nTest.assert_equals(total_sales(table1,'C'), 12)\\nTest.assert_equals(total_sales(table1,'D'), 'Product not found')\\n\\nTest.assert_equals(total_sales(table2,'A'), 'Product not found')\\nTest.assert_equals(total_sales(table2,'W'), 7)\\nTest.assert_equals(total_sales(table2,'Y'), 9)\\nTest.assert_equals(total_sales(table2,'Z'), 4)\\n\\nTest.assert_equals(total_sales(table3,'A'), 'Product not found')\\nTest.assert_equals(total_sales(table3,'T'), 16)\\nTest.assert_equals(total_sales(table3,'Y'), 'Product not found')\\nTest.assert_equals(total_sales(table3,'W'), 25)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[1,1,1,1,1,1,2,2,5,2,2,2,1,2,2,2,1,2,2,2,1,2,3,1,1,1,2,1,2,1,2,2,2,1,1,2,0,0,2,0,2,1,1,0,2,2,1,2,0,2,1,0,1,1,0,2,0,2,2,2,2,2,1,2,2,1,1,3,2,2,1,2,2,2,2,2,2,2,2,2,2,1,2,1,1,0,0,3,1,2,2,0,2,1,2,2,2,2,2,1,1,0,2,3,2,1,0,2,2,1,1,1,2,2,2,2,2,1,2,2,2,2,2,2,2,2,1,1,1,0,2,1,0,0,1,2,0,2,0,1,1,1,1,2,1,2,2,3,2,1,0,1,1,2,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,1,0,2,2,2,2,1,2,2,2,1],\"rators\":[\"aEm3Wvj2rFYRL8Lrb\",\"Yp7uvStL97cC9fKkY\",\"XQq43hRq8fwvfrPQH\",\"J5T8gZqiZXFuFDTQ7\",\"Ro3ppqamSxiJv2wxP\",\"hnyhBFWwNCz9mDfSi\",\"ZNnsMeNkdDhHjSrZb\",\"gb9rvGus2Jv7bjZSs\",\"AasGs8AeX9Lcb9xJn\",\"jNvegJWCk5HCtEMbK\",\"gSFJPsMXnqAog3Q9f\",\"2fxapKr8XGdNeaKi2\",\"8JyqsSbN2FJXPr3cw\",\"8PwfYqoDQFThzNtvf\",\"s5M5RvgqR9BhB9JoC\",\"ytotxvNtSzHumcQ9m\",\"gJYuGdkXEWWmGRLzu\",\"dHZqT6h4JMwk5fPC8\",\"cR3ibTMxLyEdDFCHY\",\"yZvzB3qFb8pkHy4dg\",\"GEvSGXDkk7pACfYri\",\"TR5aWdDKP6iaL6mGK\",\"tAF9Gf6PiGogbZuWs\",\"DEDniTrstQYGounXT\",\"HF28xZKSLM9wEuqNg\",\"KdNDysEsy2TW5QRJ2\",\"9pzFiFK3ANLjQfnr2\",\"29MTvBZopCWjotnc5\",\"4rwxLqLs2mNZNg8NB\",\"nx3gu7spJkhJ35qQa\",\"wYBLRB4YuWXE3HRp9\",\"ahk2qiXKJA753wAJk\",\"W5TajitmCyxz87zAC\",\"EjbDDFRECrzQDkzrX\",\"aRqQ42J5zqCmBNd8w\",\"JS3hNM3XXkxPdg3yk\",\"LQhEi8yAC8WzEYY8h\",\"Sk5h9RsRyCjSNKubE\",\"2QGRoQn2dRq3scu7k\",\"DrkR35NqnP9NDLbq6\",\"a777e8chPvJkY3tKa\",\"orFLgPDw9H5MDzmwo\",\"4yNLEwL2rsx4EE5Nt\",\"n2ck2WGuM35vbZiFz\",\"MKT7khMBGXzA22ykf\",\"XrqNzJ2FRG8HnGiR6\",\"yr822PZmmiDDenxpB\",\"2ptN2mhjFwFcHyPZd\",\"3cF6NXq3ZEwdkgSjb\",\"eMuCpJ2spXWkJjWNz\",\"LxPkmgoN5cmLCNEN7\",\"yKttxy9JGn5Jzwuj6\",\"dKtYzJHAswturm7Fe\",\"2innwjWqxJHo4eRGh\",\"H4abACFDH5t8CnnyH\",\"NG8PWBSjsM8mMhQEq\",\"jBR47vA7HwAZqp4QA\",\"eMAZLFsnEKjQZxgq2\",\"5JyY5eDxizCH7TYT7\",\"QkbpyExhGA8ErJWhk\",\"9dgvEreRDYRiwLmYv\",\"H9KZi2cjt4FwH7qog\",\"v5WqiQCsCrZank8xb\",\"So6PHm74mfJuY2WTs\",\"n2BRY9X8899dcG8Bw\",\"syRNbbPdLCGXbH2Gy\",\"zd9FLSzsGz3evKafy\",\"QuQqdww2t72mqEtue\",\"PXAcsKkssS2yLyDv2\",\"TwKZ3835iFLog2RuQ\",\"FEYpu9RWysAgW3XnP\",\"C75Nyf5jotZJ9TfPW\",\"iojEnnY9FsMfYzp6f\",\"tcn2oAsxPQDmCxGmg\",\"Kv8GEg3aJZ9Cnxu6L\",\"sbJcFfQjQ59Wfg4Cd\",\"Pe8vWpDHRuH9nSGKW\",\"i5iePG5GqhJJ8HEoB\",\"dzS6WBTMHyFEag6Fp\",\"fJJirq6bMLnDWYRRs\",\"yjtdwc2AC4jA2RWtn\",\"hRiMXDZNAzyPd5tpt\",\"iS5BrkGLzJyPK7nKt\",\"NNE5HNRXAkmhrWgyQ\",\"YcCLwitFMAEJSnxAW\",\"xwEZk3bNZoNDPJYF5\",\"HqmxnQJM66Y57twhn\",\"R4SjTgDnpigJYDLyL\",\"Ecg4m7srYGgZsb4Ck\",\"oBcs8GLX2ZFLXQy8y\",\"CTKmXtrqDYqJBnuy8\",\"yAouD3PxzED8a4gap\",\"ta5CrWnBCRusD2WMo\",\"rK3xSCovoqjmkgBL9\",\"Wv2vJnEj8ywNmARoF\",\"YA7SDhpgEtsqynvNL\",\"M8dQuMrEpP8Hc3tHN\",\"7K2GEb5TZRtSpyyGS\",\"w2HhxvSLmDhaGCAjE\",\"b3BWzq6Yu8nswak5u\",\"RehJGBFS6CYiWdjZx\",\"mxX4rH5ELYkdZ2Mbw\",\"KLmLKaJPfsYxp42p2\",\"GGprTwrkjuccmrQRg\",\"ayAfcoqEdZrX9pMge\",\"p8qqFdJ3FSk5x9z3G\",\"tpxMgkGSHwBjS95Ta\",\"mG8HqKiAQFTdRZthG\",\"qD2LrwaDrSdiybLKY\",\"Kh3Pc2ZRusurLaMyP\",\"gXTAie79kiw28tx5u\",\"wniy5aKNkwYTNAkrz\",\"g9FyJ8yeT9ic97Qp2\",\"9CoqdidjM9KbeKnHY\",\"zfGYZ7gpR8fxJpagh\",\"DPi9QGLctq2y76KuE\",\"wRttWTM59y8m5mx7x\",\"CyzskHGsC6WSmYrLu\",\"4hzd4qde3g9We8N4E\",\"zZDaXBxMzTCBhNkgL\",\"9gJsF5apWJGWZJprn\",\"J3upzLHuEwXH7Z2hx\",\"GRdzonfH6egrzm68u\",\"w3o9qJuPR62HHh9mx\",\"dBzwBtRjZqB98DJeB\",\"9FCeFzjPA4jrQ7oHW\",\"dYPkStFnLvAMsHSzZ\",\"cAP3n5NY64uoMwzRR\",\"KJCDwGkoXh8qtbbKr\",\"YjPkyrF5D3ihxTjwk\",\"dj5AyG5fWP8FdsSmZ\",\"5XiuAqicKD4hBdu63\",\"RGMbFMZXJr7DhcAJy\",\"K3RacTvkWHLfzKF8i\",\"kAkLAF9T5McSxXJCT\",\"5EPe7bdNQ69vjsKv7\",\"5HCu9Ydd86QgHDRNP\",\"d8qtzoLB264iP8tdY\",\"hRAd998MG8Jzdpxj6\",\"Jqk2uJZZxEv5wZFze\",\"etDYCbDYZ79LDy8Lz\",\"22kSvGZ9z9J2KK8nc\",\"HuNF3xTBzmatyGSTm\",\"2H7qphwdz7PPoFKgc\",\"5hQnRWiKkhgKJXNMP\",\"eYfPWvZwnJQkHbSTK\",\"buX4mCQhtXCfBjeno\",\"5S9nX4rKsnCcnv4Cz\",\"6xTu4r8NMczBFvmtz\",\"GGdmhAvxXhqhhibJN\",\"sHjfbGQGLHE6JR6qu\",\"EfxwqhYdapX3dMQC2\",\"o4ixjQGSaYqA2JoM4\",\"srJ34BaybkQh3qRkM\",\"axdSNLZpiCDF8RS6n\",\"Ds7L5bksw2QRHjrKL\",\"4RsakkyRXyYGwFxEa\",\"CHvzhtXnv8HTbPQ56\",\"kWfNDxZyXFJxaTd2S\",\"qAby4AWXmTNeusvg3\",\"T2vhHPhRR96hRizq8\",\"dLmepN3JWxhXMtyNK\",\"XrQQn7T4mskXQ8Gx8\",\"HNT9Xx6pnQS7wigCp\",\"T6iBEE2jp7f7iEF2P\",\"xfftcHHe5riRf4T93\",\"ey3CASd6Je5LEJzfB\",\"66a9xX73nmTEuKs9k\",\"YmQb9Mo4Xcg2vzgbn\",\"8mGWypY7S2RcGcAPR\",\"wjc4iejpErBhxWwHo\",\"8BFSTCnoe2QggN64c\",\"XD5nmvKQchKezPXhy\",\"bvmTE46bfcM4ogj34\",\"NzbRqGWspQnWMoDrF\",\"PC3pLs36zNzpRDSuE\",\"mfsaETo7uA4x5vqLD\",\"N2wnZXkhDH86mgjQ8\",\"AFfw7cGg83uYk2Miy\",\"yod5YhKtPqw2GfG9B\",\"Wpn95NqWxncQrwNgz\",\"BrTDhPJcACL2bsrpJ\",\"AJexRBN9cYQmqvYu6\",\"mvJBakQ35CWAnbbEZ\",\"Bj7NhtTmfcGLFNafH\",\"eHcgvkTGsH7ZziqBo\",\"c2q7mY39z5JPEMCaM\",\"9Ly8afdtofp8DXzrt\",\"utTuvGdmu2sBHWBhQ\",\"H4LqzfSad6d4BCgwy\",\"2PufnQcsHsfymufX3\",\"R6YxHWAiLgKwy5YvC\",\"rrSC943cCKNG48sH4\",\"K6MfKMytoJJuSGewP\",\"Cc2Cgj4MWXZxsTooC\",\"X4rzfxGgxx6CS7Bpz\",\"RoGGD5cpHb4ftdLDv\",\"JhX7jvtpwNyxcc39m\",\"w67KfQgZ6WAeY7K4Y\",\"qzXAMXsHZGT8o5hTA\",\"Afnps7TJQuS9sipMb\",\"fbyQH246PaDcXumC4\",\"2iFe3EHEH2YdhSKrs\",\"XiANvTc8eYWTFu54Q\",\"hR7GMiqGap4CzEWSy\",\"pduNK68oazqQTtbLp\",\"4TmgHkn5vqyHK3sYC\",\"4Lwjr34ypKNQNQCar\",\"T6Rm8mREPMZSftzrC\",\"d9LBRxvADNBB5QJMB\",\"vAh63eGRwkuJtoP8v\",\"u5u2YpHXiNgzDNJdX\",\"dYgxQgSzJNMnWzhhE\",\"AXdgPwPcYHJrXue4P\",\"qZQxPQ2kaNKAMesHT\",\"q6RnyQoAhDAzkWwwz\",\"BdnE4RS5puoxo92mA\",\"Ncn7Qn2LbdsiJnfFk\",\"suArq5BbSy7gD6xri\",\"5QN8R22z43SrwoHDz\",\"tRuBLPKFwBxbkcLTG\",\"BmycprFRHbDaTdR5e\",\"Wi4H6ayKsNDWWQCG5\",\"rCrbqMiaGPgHYTNxu\",\"PBuJo62j782fEoH4w\",\"naZ3i6sSDPwsieDH7\",\"wrL4iX2CCSqDCCty3\"],\"total\":246,\"quality\":[4,4,4,4,5,5,5,4,4,5,5,5,5,5,5,4,5,5,5,5,5,5,4,5,5,5,4,5,5,5,5,5,5,5,5,4,5,4,5,1,3,5,5,5]},\"flags\":0},\"summary\":\"In this question you will be given a table as below, where the first row lists the names of products, and each of row after that lists the sales of the product for each day (over some time range).\\n\\n[\\n  [\\\"A\\\", \\\"B\\\", \\\"C\\\"],\\n  [ 2 ,  7 ,  1 ],\\n  [ 3 ,  6 ,  6 ],\\n  [ 4 ,  5 ,  5 ]\\n]\\n\\nWrite a function that receives:\\nA sales table sales_table as shown above.\\nThe name o\",\"tags\":[\"arrays\",\"data_structures\",\"language_fundamentals\",\"loops\"],\"timestamp\":{\"$date\":1588436522685},\"title\":\"Total Sales of Product\",\"quality\":4.613636363636363,\"family\":[{\"_id\":\"ZyRoiEiegKfLued8g\",\"language\":\"javascript\"},{\"_id\":\"kPKNb4c3QjCf5tHRM\",\"language\":\"python3\"},{\"_id\":\"97BT2BYWc3kqXwtQx\",\"language\":\"ruby\"}]}}"]