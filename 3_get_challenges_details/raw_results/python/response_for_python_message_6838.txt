a["{\"msg\":\"result\",\"id\":\"2129\",\"result\":{\"_id\":\"grorumaEjyFDmZQCx\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"def is_wristband(lst):\\n\\t\",\"difficulty\":3.1515151515151514,\"familyId\":\"hQ4MBuEj3CR4YbDN2\",\"instructions\":\"A wristband can have 4 patterns: \\n\\n1. **horizontal**: each item in a row is identical.\\n2. **vertical**: each item in each column is identical.\\n3. **diagonal left**: each item is identical to the one on it's upper left or bottom right.\\n4. **diagonal right**: each item is identical to the one on it's upper right or bottom left.\\n\\nYou are shown an **incomplete section** of a wristband.\\n\\nWrite a function that returns `True` if the section can be correctly classified into one of the 4 types, and `False` otherwise.\\n\\n### Examples\\n```\\nis_wristband([\\n  [\\\"A\\\", \\\"A\\\"],\\n  [\\\"B\\\", \\\"B\\\"],\\n  [\\\"C\\\", \\\"C\\\"]\\n]) ➞ True \\n# Part of horizontal wristband.\\n\\nis_wristband([\\n  [\\\"A\\\", \\\"B\\\"],\\n  [\\\"A\\\", \\\"B\\\"],\\n  [\\\"A\\\", \\\"B\\\"]\\n]) ➞ True \\n# Part of vertical wristband.\\n\\nis_wristband([\\n  [\\\"A\\\", \\\"B\\\", \\\"C\\\"],\\n  [\\\"C\\\", \\\"A\\\", \\\"B\\\"],\\n  [\\\"B\\\", \\\"C\\\", \\\"A\\\"],\\n  [\\\"A\\\", \\\"B\\\", \\\"C\\\"]\\n]) ➞ True\\n# Part of diagonal left wristband.\\n\\nis_wristband([\\n  [\\\"A\\\", \\\"B\\\", \\\"C\\\"],\\n  [\\\"B\\\", \\\"C\\\", \\\"A\\\"],\\n  [\\\"C\\\", \\\"A\\\", \\\"B\\\"],\\n  [\\\"A\\\", \\\"B\\\", \\\"A\\\"]\\n]) ➞ True\\n# Part of diagonal right wristband.\\n```\\n\\n### Notes\\nN/A\",\"lab\":\"Test.assert_equals(is_wristband( \\n[['A', 'A'], \\n['B', 'B'], \\n['C', 'C']]), True)\\n\\nTest.assert_equals(is_wristband(\\n[['A', 'B'], \\n['A', 'B'], \\n['A', 'B']]), True)\\n\\nTest.assert_equals(is_wristband(\\n[['A', 'B', 'C'], \\n['C', 'A', 'B'], \\n['B', 'C', 'A'], \\n['A', 'B', 'C']]), True)\\n\\nTest.assert_equals(is_wristband(\\n[['A', 'B', 'C'], \\n['C', 'A', 'B'], \\n['D', 'C', 'A'], \\n['E', 'D', 'C']]), True)\\n\\nTest.assert_equals(is_wristband(\\n[['A', 'B', 'C'], \\n['B', 'A', 'B'], \\n['D', 'C', 'A'], \\n['E', 'D', 'C']]), False)\\n\\nTest.assert_equals(is_wristband(\\n[['A', 'B', 'C'], \\n['B', 'C', 'A'], \\n['C', 'A', 'B'], \\n['A', 'B', 'A']]), True)\\n\\nTest.assert_equals(is_wristband(\\n[['A', 'B', 'C'], \\n['B', 'C', 'D'], \\n['C', 'D', 'E'], \\n['D', 'E', 'F']]), True)\\n\\nTest.assert_equals(is_wristband(\\n[['A', 'B', 'C'], \\n['B', 'C', 'D'], \\n['C', 'D', 'E'], \\n['D', 'E', 'E']]), True)\\n\\nTest.assert_equals(is_wristband(\\n[['A', 'B', 'C'], \\n['B', 'C', 'D'], \\n['C', 'D', 'E'], \\n['D', 'F', 'E']]), False)\\n\\nTest.assert_equals(is_wristband(\\n[['A', 'B', 'C'], \\n['B', 'D', 'A'], \\n['C', 'A', 'B'], \\n['A', 'B', 'A']]), False)\\n\\nTest.assert_equals(is_wristband(\\n[['A', 'B'],  \\n['A', 'B'], \\n['A', 'C'],\\n['A', 'B']]), False)\\n\\nTest.assert_equals(is_wristband(\\n[['A', 'A'],\\n['B', 'B'],\\n['C', 'C'],\\n['D', 'B']]), False)\\n \\nTest.assert_equals(is_wristband(\\n[['A', 'A'],\\n['B', 'B'],\\n['C', 'C'],\\n['C', 'C']]), True)\",\"language\":\"python3\",\"summary\":\"A wristband can have 4 patterns:\\n\\nhorizontal: each item in a row is identical.\\nvertical: each item in each column is identical.\\ndiagonal left: each item is identical to the one on it's upper left or bottom right.\\ndiagonal right: each item is identical to the one on it's upper right or bottom left.\\n\\nYou are shown an incomplete section of a wristband.\\n\\nWrite a f\",\"tags\":[\"arrays\",\"validation\",\"functional_programming\",\"loops\"],\"timestamp\":{\"$date\":1553379706972},\"title\":\"Patterned Wristband\",\"stats\":{\"completed\":{\"total\":129,\"ratings\":[3,3,3,3,3,3,3,3,3,3,2,3,3,3,4,3,4,0,3,4,4,5,0,1,2,4,4,4,3,4,5,4,2,2,3,0,4,3,2,2,4,0,4,3,4,4,4,4,5,5,2,4,3,0,5,5,4,1,5,5,1,5,0,3,5,4,5,5,5,5,0,1,5,1,2,5,5,5,2,2,1,4,3,5,2,4,1,5,5,4,3,2,3,3,4,0,3,3,3],\"rators\":[\"BkPgkDQGHm66X4Qai\",\"AYaEkTWLMmfzpwejr\",\"yZvzB3qFb8pkHy4dg\",\"8JyqsSbN2FJXPr3cw\",\"tAF9Gf6PiGogbZuWs\",\"gb9rvGus2Jv7bjZSs\",\"B9kgBbvFEFSMvb6ir\",\"qaR8DnWrTk8Mus5Q2\",\"aW2AfRdBxWt3K9AaH\",\"PFjMZGHNAPTkgd7tq\",\"BFNm9gacwba9KyLFW\",\"HqmxnQJM66Y57twhn\",\"9xdJPHCYkg5wTiKcF\",\"ScqBWHmzyHEauiHn3\",\"YLiQ2gKYetNjpEG7B\",\"s5M5RvgqR9BhB9JoC\",\"FgkYtHLxeD8pETJ8T\",\"8PwfYqoDQFThzNtvf\",\"pmgFEciNrd3ES9tuu\",\"aEm3Wvj2rFYRL8Lrb\",\"AasGs8AeX9Lcb9xJn\",\"zbDjaYZcYccgJtr4z\",\"mDWNyaaQ9hvPCRzSd\",\"SpTi3f5uA7t7ygtLv\",\"kzncCp95mWSfJkRmb\",\"KouYhiYSyoKMRrjhR\",\"AMc6ecyukYnkGCEbG\",\"Rg7muyz9TL7a63ySj\",\"Kf2z6kZ7hfzg2YyEJ\",\"Sj4iamMmNvxwWJBiF\",\"ZNnsMeNkdDhHjSrZb\",\"fznzd3qnvtbFkkizz\",\"W5TajitmCyxz87zAC\",\"xn7uGNKeAwPEkP9oA\",\"3QQG7K2vH7D4m4AGj\",\"yTtSCvGPyYna6JuRC\",\"HnoDeuYM8h3PkXtSz\",\"gJYuGdkXEWWmGRLzu\",\"Wv2vJnEj8ywNmARoF\",\"h4x2jaMdj5aQZbW5g\",\"EMKs2TepjZ48JoAmR\",\"aaotFPYKJpeDdBmK5\",\"DNACg4rcgZsPtYGZ8\",\"thdXcfP7HsepWHQRo\",\"PbFZKHNGGqEacTSQS\",\"QhhG4qLFwgHj8eTgF\",\"4fhjJBvLBWh6QeSih\",\"Zorao6RrmW7joGWTY\",\"hy2sfJ3jfnR4WaduT\",\"ZJc8FLgZd2zNLHxXt\",\"6xTu4r8NMczBFvmtz\",\"3MybBtCNPcFHLMYmJ\",\"JzwjSkBEPFr5vLxP7\",\"d6iEb2BDDofyeePh9\",\"pNFJCXem7aB7fA5xd\",\"CtKaPhQmtex9wnWcd\",\"T63gcy2WbkwsvEyRB\",\"afGhZGqYxdcoNr8RQ\",\"KktidZuhzfEBK2bdm\",\"Tg24gZyPmk8uDXcBY\",\"B3kmFXcgPZMm2pTvr\",\"W4X4kb9bFHP9wQLKZ\",\"35nqHqncj2j4KB36r\",\"czQYdQXp9cAxjD3g9\",\"syYx2CZhdo5kPZiSW\",\"iBPtFyzzY83pAFACa\",\"HF28xZKSLM9wEuqNg\",\"p8qqFdJ3FSk5x9z3G\",\"SPdKF9vDQTC62XTpo\",\"fSgCtTbtfBQBmGM2m\",\"5dHucvf2qBYyKim7X\",\"CQrLMPjz7gn82rySP\",\"8nE8QHnFYsHCFebte\",\"WTkzg8RHQH9rAxrHs\",\"Cia25zjeX3RkCNx5t\",\"Er39N3Lx3dx2nSpc9\",\"fNtNTiNhQTsHJxvTS\",\"jdNjduxzbqfSEhEX8\",\"SBzZXaahGicGuPtYT\",\"S6ipW8Xzds8QDszn9\",\"bHhuudonsyz2auRBk\",\"2k7JfdCnTaxXSi8HG\",\"sh93GfTP59nhgPdY3\",\"5H9MNfC4DPwxbakTf\",\"Jqk2uJZZxEv5wZFze\",\"iS5BrkGLzJyPK7nKt\",\"58M252WF7SPRinfBx\",\"hBKf7LeSP6i2saXjk\",\"b3Dk2LqoEgripS3Y3\",\"2PufnQcsHsfymufX3\",\"J23RcmzbdtBbPCTjT\",\"YCTrQ9PuZmg4S8tsf\",\"GNk4efjMZ8YERGL9e\",\"8sNv5PTHa7XQ8bNqR\",\"RfG2csESdQb3qcBAy\",\"SbGLSZ5piLATC8bop\",\"QYh2kagDtGd3nYgiT\",\"6wXcDnf6Pqn4tpFZF\",\"WBkDXBR4gDrjwaB62\",\"5WS8LPEYRfswL5vRm\",\"iojEnnY9FsMfYzp6f\",\"62tvtxwHxH3JCoPQJ\",\"iCJ2mHoYh8GPbjcCn\",\"4sHkH3t9CJYhbDwjM\",\"yjtdwc2AC4jA2RWtn\",\"hjz6kxzENmSHJjQRE\",\"bCFecqKyXTCnGgPSc\",\"4SNg5Qy6eHvwqQGSR\",\"DPi9QGLctq2y76KuE\",\"QLMxPhEN8pDaBcaGp\",\"DrTeBk3bpLqhsLS4g\",\"97DthwdtrBLm2y2Yj\",\"C5LRCGYeGWapYZknY\",\"CSuaZAHNjHiTgPEt4\",\"GMCMXNYipwEXvryDW\",\"N2TvuSM4zXZM9q5qT\",\"e6Ldo3gXosENLvaRq\",\"MBA5BzRXuMRx822ty\",\"DwetpbChQM4r6Gwah\"],\"quality\":[5,5,5,5,5,5,5,5,5,3,5,5,4,4,5,1,5,5,5,4,5,5,4,5,5,4,5,5,3]},\"tests\":{\"score\":0,\"rators\":[\"BkPgkDQGHm66X4Qai\"]},\"instructions\":{\"score\":-0.8,\"rators\":[\"BkPgkDQGHm66X4Qai\"],\"voters\":[\"8YjoJAwcJzvTgE3wZ\"]},\"flags\":1},\"isHidden\":false,\"quality\":4.551724137931035,\"family\":[{\"_id\":\"poqNoKkyiQpcjSQn7\",\"language\":\"cpp\"},{\"_id\":\"HX5eEuKb7epMgsKsj\",\"language\":\"javascript\"},{\"_id\":\"grorumaEjyFDmZQCx\",\"language\":\"python3\"},{\"_id\":\"vBrE9w7qRiaeXyuis\",\"language\":\"ruby\"}]}}"]