a["{\"msg\":\"result\",\"id\":\"1545\",\"result\":{\"_id\":\"NjpPt2b88s3SBuenX\",\"author\":\"Werdna\",\"authorId\":\"buX4mCQhtXCfBjeno\",\"code\":\"def get_name_and_top_note(students):\\n\\t\",\"difficulty\":2.087719298245614,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"JQDABCyLRnb8Lx3kC\",\"instructions\":\"Create a function that takes a list of dictionaries like `[{ \\\"name\\\": \\\"John\\\", \\\"notes\\\": [3, 5, 4]},  { \\\"name\\\": \\\"Mich\\\", \\\"notes\\\": [1, 3, 5]}]` and returns a list of dictionaries like `[{ \\\"name\\\": \\\"John\\\", \\\"top_note\\\": 5 }, {\\\"name\\\": \\\"Mich\\\", \\\"top_note\\\": 5}]`.\\n\\nIf a student has no notes (an empty list), return  `top_note:  0`.\\n\\n### Examples\\n```\\nget_name_and_top_note([{ \\\"name\\\": \\\"John\\\", \\\"notes\\\": [2, 4, 5]}, { \\\"name\\\": \\\"Mich\\\", \\\"notes\\\": [1, 3, 5]}])  ➞ [{ \\\"name\\\": \\\"John\\\", \\\"top_note\\\": 5 }, {\\\"name\\\": \\\"Mich\\\", \\\"top_note\\\": 5}]\\n\\nget_name_and_top_note([{ \\\"name\\\": \\\"Paul\\\", \\\"notes\\\": []}, {\\\"name\\\": \\\"Victoria\\\", \\\"notes\\\": [3, 4, 2, 1]}])  ➞ [{ \\\"name\\\": \\\"Paul\\\", \\\"top_note\\\": 0 }, {\\\"name\\\": \\\"Victoria\\\", \\\"top_note\\\": 4}]\\n```\\n\\n### Notes\\n- **Please do not translate this challenge into JavaScript.**\\n- This challenge is a translation of Bartosz Cytrowski's JavaScript challenge that was not properly translated to Python. You can find the challenge [here](https://edabit.com/challenge/GJD5x54NaFZwbtxQW).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(get_name_and_top_note([{ 'name': \\\"John\\\", 'notes': [2, 4, 5]}, { 'name': \\\"Mich\\\", 'notes': [1, 3, 5]}]),\\n[{ 'name': \\\"John\\\", 'top_note': 5 }, {'name': 'Mich', 'top_note': 5}])\\nTest.assert_equals(get_name_and_top_note([{ 'name': \\\"Paul\\\", 'notes': []}, {'name': 'Victoria', 'notes': [3, 4, 2, 1]}]),\\n[{ 'name': \\\"Paul\\\", 'top_note': 0 }, {'name': 'Victoria', 'top_note': 4}])\\nTest.assert_equals(get_name_and_top_note([{ 'name': \\\"Victor\\\", 'notes': [1, 3, 2]}]), [{ 'name': \\\"Victor\\\", 'top_note': 3}])\\nTest.assert_equals(get_name_and_top_note([{ 'name': \\\"Brandy\\\", 'notes': [2, 4, 1]}]), [{ 'name': \\\"Brandy\\\", 'top_note': 4 }])\\nTest.assert_equals(get_name_and_top_note([{ 'name': \\\"Vicky\\\", 'notes': [3, 2]}, { 'name': \\\"Sanders\\\", 'notes': [1, 1, 1]}]), \\n[{ 'name': \\\"Vicky\\\", 'top_note': 3 }, {'name': 'Sanders', 'top_note': 1}])\\nTest.assert_equals(get_name_and_top_note([{ 'name': \\\"Marcus\\\", 'notes': [1, 0, 1]}]), [{ 'name': \\\"Marcus\\\", 'top_note': 1 }])\\nTest.assert_equals(get_name_and_top_note([{ 'name': \\\"Solo\\\", 'notes': []}]), [{ 'name': \\\"Solo\\\", 'top_note': 0 }])\",\"language\":\"python3\",\"quality\":5,\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,0,2,4,4,2,3,1,2,5,1,3,2,2,3,2,3,3,2,2,1,0,2,2,2,3,3,3,1,0,2,1,1,3,2,0,0,3,0,0,2,5,3,2,2,2,2,2,3,0,2,1,3],\"quality\":[5,5,5,5,5,5,5],\"rators\":[\"buX4mCQhtXCfBjeno\",\"s5M5RvgqR9BhB9JoC\",\"8PwfYqoDQFThzNtvf\",\"iS5BrkGLzJyPK7nKt\",\"HF28xZKSLM9wEuqNg\",\"p8qqFdJ3FSk5x9z3G\",\"8sNv5PTHa7XQ8bNqR\",\"StNu7DPyTgEStZsMY\",\"FdiawuMWGaDMkH2S6\",\"55RQznnuTGpsj3EXd\",\"8nE8QHnFYsHCFebte\",\"n2BRY9X8899dcG8Bw\",\"DQskEvAv5KiJDPtGF\",\"kQH5b8MXJunh84Czq\",\"8JyqsSbN2FJXPr3cw\",\"fSQSHjW3e72MrWxbD\",\"QRv96jmNaYsWkxQEG\",\"gXTAie79kiw28tx5u\",\"xJ5YLoFRnSKrn2EAj\",\"eHcgvkTGsH7ZziqBo\",\"Hhvy3EGqWBXt3nFPA\",\"qAby4AWXmTNeusvg3\",\"Yp7uvStL97cC9fKkY\",\"gb9rvGus2Jv7bjZSs\",\"PytNZK9mNiRiZxPrm\",\"RTDx9axf52kxhFjwZ\",\"iojEnnY9FsMfYzp6f\",\"GTKsdeEihE636Le9i\",\"KJCDwGkoXh8qtbbKr\",\"gJYuGdkXEWWmGRLzu\",\"f7ityYdWKWmtsfqLN\",\"J3upzLHuEwXH7Z2hx\",\"yjtdwc2AC4jA2RWtn\",\"xn7uGNKeAwPEkP9oA\",\"cR3ibTMxLyEdDFCHY\",\"JKb5rhL6DKcCAypF9\",\"EfxwqhYdapX3dMQC2\",\"oBcs8GLX2ZFLXQy8y\",\"AasGs8AeX9Lcb9xJn\",\"AFfw7cGg83uYk2Miy\",\"Afnps7TJQuS9sipMb\",\"HqmxnQJM66Y57twhn\",\"GGdmhAvxXhqhhibJN\",\"PC3pLs36zNzpRDSuE\",\"gKnWjDjwrJh7MK2df\",\"T6iBEE2jp7f7iEF2P\",\"2PufnQcsHsfymufX3\",\"J5T8gZqiZXFuFDTQ7\",\"tAF9Gf6PiGogbZuWs\",\"wJ2kRDLYK9TmMSkG8\",\"yod5YhKtPqw2GfG9B\",\"4Lwjr34ypKNQNQCar\",\"xQEeGvwDcLZ8C5Bjz\",\"Nsnt7WJuREHjzZmjE\",\"DPi9QGLctq2y76KuE\",\"aEm3Wvj2rFYRL8Lrb\",\"S9hHPiybdTKyuELsn\",\"tTXfbnziyqCHkuCEL\",\"Ds7L5bksw2QRHjrKL\"],\"total\":61},\"flags\":0},\"summary\":\"Create a function that takes a list of dictionaries like [{ \\\"name\\\": \\\"John\\\", \\\"notes\\\": [3, 5, 4]},  { \\\"name\\\": \\\"Mich\\\", \\\"notes\\\": [1, 3, 5]}] and returns a list of dictionaries like [{ \\\"name\\\": \\\"John\\\", \\\"topnote\\\": 5 }, {\\\"name\\\": \\\"Mich\\\", \\\"topnote\\\": 5}].\\n\\nIf a student has no notes (an empty list), return  top_note:  0.\\n\\nExamples\\ngetnameandtopnote([{ \\\"name\\\": \\\"John\\\", \\\"not\",\"tags\":[\"arrays\",\"functional_programming\",\"objects\"],\"timestamp\":{\"$date\":1608655648710},\"title\":\"Get Students with Names and Top Notes II\",\"family\":[{\"_id\":\"NjpPt2b88s3SBuenX\",\"language\":\"python3\"},{\"_id\":\"FKDQkWkat6Q3y4dQw\",\"language\":\"ruby\"}]}}"]