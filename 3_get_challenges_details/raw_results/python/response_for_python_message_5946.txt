a["{\"msg\":\"result\",\"id\":\"1683\",\"result\":{\"_id\":\"CoSFaDzSxrSjsZ8F6\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"def inclusive_list(start_num, end_num):\\n\\t# recursive code here\",\"difficulty\":2.1515151515151514,\"familyId\":\"gCtDGWFi239KEnXkL\",\"instructions\":\"Write a function that, given the start `start_num` and end `end_num` values, return a list containing all the numbers **inclusive** to that range. See examples below.\\n\\n\\n### Examples\\n```\\ninclusive_list(1, 5) ➞ [1, 2, 3, 4, 5]\\n\\ninclusive_list(2, 8) ➞ [2, 3, 4, 5, 6, 7, 8]\\n\\ninclusive_list(10, 20) ➞ [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\\n\\ninclusive_list(17, 5) ➞ [17]\\n```\\n\\n\\n### Notes\\n- The numbers in the list are sorted in ascending order.\\n- If `start_num` is greater than `end_num`, return a list with the higher value. See example #4.\\n- An **iterative** version of this challenge can be found via this [link](https://edabit.com/challenge/bHTb8p5nybCrjFPze).\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"from re import findall as f_all, MULTILINE as M\\nfrom inspect import getsource as g_src\\n\\ndef func_chk(src, *uf):\\n  try:\\n    m = uf[0]+'|'+uf[1]\\n    return len(f_all(m, g_src(src), flags=M)) < 1\\n  except OSError: return True\\n\\ndef recur_chk(fn):\\n  try:\\n    src, n = g_src(fn), fn.__name__\\n    if n == '<lambda>': n = src.split('=')[0].strip()\\n    return len(f_all(n, src, flags=M)) > 1\\n  except OSError: return True\\n\\nTest.assert_not_equals(recur_chk(inclusive_list), False, 'Recursion is required!')\\nTest.assert_not_equals(func_chk(inclusive_list, 'range', 'enumerate'), False,\\n                  'These methods: [range(), enumerate()] are not acceptable.')\\n\\nactual = [[1, 5], [2, 8], [10, 20], [17, 5], [40, 50], [1, 41], [24, 17], [11, 66], [9, 3], [6, 16]]\\nexpected = [[1, 2, 3, 4, 5],\\n            [2, 3, 4, 5, 6, 7, 8],\\n            [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],\\n            [17],\\n            [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50],\\n            [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41],\\n            [24],\\n            [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66],\\n            [9],\\n            [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\\n\\t\\t\\t\\t\\t\\t\\nfor i, n in enumerate(actual): \\n\\tTest.assert_equals(inclusive_list(*n), expected[i])\",\"language\":\"python3\",\"quality\":4.64,\"summary\":\"Write a function that, given the start startnum and end endnum values, return a list containing all the numbers inclusive to that range. See examples below.\\n\\nExamples\\ninclusive_list(1, 5) ➞ [1, 2, 3, 4, 5]\\n\\ninclusive_list(2, 8) ➞ [2, 3, 4, 5, 6, 7, 8]\\n\\ninclusive_list(10, 20) ➞ [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\\n\\ninclusive_list(17, 5) ➞ [17]\\n\\nNotes\\nTh\",\"tags\":[\"recursion\",\"arrays\",\"sorting\"],\"timestamp\":{\"$date\":1604608820039},\"title\":\"Recursion: Inclusive List Ranges\",\"stats\":{\"completed\":{\"total\":91,\"ratings\":[3,3,3,3,3,3,5,2,2,3,3,4,2,5,5,0,2,0,4,4,1,3,3,2,1,2,1,1,3,2,0,4,0,1,1,1,0,2,4,3,3,3,3,3,1,3,3,1,2,3,0,3,4,0,1,3,0,2,0,0,3,0,2,1,2,2],\"quality\":[5,5,5,1,5,5,5,5,5,5,3,4,5,5,5,4,5,4,5,5,5,5,5,5,5],\"rators\":[\"a777e8chPvJkY3tKa\",\"8PwfYqoDQFThzNtvf\",\"8JyqsSbN2FJXPr3cw\",\"g9ML4TtThkPJtsXrJ\",\"iS5BrkGLzJyPK7nKt\",\"mDWNyaaQ9hvPCRzSd\",\"p5EN3tadeCfPkW3CB\",\"ZQSG2DF9TjmBGXPwu\",\"gzF5pkKZaA3pa83QN\",\"5dHucvf2qBYyKim7X\",\"aEm3Wvj2rFYRL8Lrb\",\"s5M5RvgqR9BhB9JoC\",\"4fhjJBvLBWh6QeSih\",\"v5vkFqE7EnubSZ5Y5\",\"zd9FLSzsGz3evKafy\",\"Yp7uvStL97cC9fKkY\",\"buX4mCQhtXCfBjeno\",\"gJYuGdkXEWWmGRLzu\",\"vpT3dGjqEppYsLWhD\",\"X8meA6kqZB77Tsr96\",\"Ecg4m7srYGgZsb4Ck\",\"HF28xZKSLM9wEuqNg\",\"8sNv5PTHa7XQ8bNqR\",\"WdKdsgH9gXkKgCycx\",\"fSQSHjW3e72MrWxbD\",\"tkdRHAExhDq8ryDJT\",\"J3upzLHuEwXH7Z2hx\",\"gb9rvGus2Jv7bjZSs\",\"oyKcm3zqdy8Ko5P5d\",\"axdSNLZpiCDF8RS6n\",\"h4x2jaMdj5aQZbW5g\",\"p8qqFdJ3FSk5x9z3G\",\"8KNtgAcNpyT2f6bTT\",\"QF3PdSrw9TZ8B5RMq\",\"xAXCrp8BEebMsjhuX\",\"EjhD9gjbRDfYyg5fY\",\"gRorS4EjBW97TnrW7\",\"DPi9QGLctq2y76KuE\",\"yr822PZmmiDDenxpB\",\"44dAzThMuyGZ5StXB\",\"eHcgvkTGsH7ZziqBo\",\"3e8sBuCbPY8AKeJur\",\"SFuc8apoJLtqsGJYn\",\"n2BRY9X8899dcG8Bw\",\"6axnYtKS9tE9X8B2T\",\"KD9Ri2ZXswD43yj9b\",\"T2vhHPhRR96hRizq8\",\"gXTAie79kiw28tx5u\",\"Jqk2uJZZxEv5wZFze\",\"XNmN6ztj36a7eChbD\",\"iojEnnY9FsMfYzp6f\",\"QRv96jmNaYsWkxQEG\",\"zMfBAYDE7ZaoefhJa\",\"PytNZK9mNiRiZxPrm\",\"yjtdwc2AC4jA2RWtn\",\"xn7uGNKeAwPEkP9oA\",\"oegsMgYbTKZZzPgWS\",\"PkZToh2YFx2q4Yryd\",\"Wpn95NqWxncQrwNgz\",\"8ZQcS3dPw3wepGBd4\",\"AasGs8AeX9Lcb9xJn\",\"xBQC5uQdx6WndJ3iM\",\"XWscf4qM4BrxK3AQ4\",\"K8Nj6Y9NZARZ4y7sL\",\"baJigWtyBEH38rSyM\",\"2PufnQcsHsfymufX3\",\"nAT5ecCasuBSaWoLx\",\"Cc2Cgj4MWXZxsTooC\",\"oBcs8GLX2ZFLXQy8y\",\"srJ34BaybkQh3qRkM\",\"HqmxnQJM66Y57twhn\",\"H9KZi2cjt4FwH7qog\",\"tAF9Gf6PiGogbZuWs\",\"T6iBEE2jp7f7iEF2P\",\"MpfytGFYF77emJ3cT\",\"AFfw7cGg83uYk2Miy\",\"gKnWjDjwrJh7MK2df\",\"LQxof8pGabGuWP7Gn\",\"d8qtzoLB264iP8tdY\",\"GGdmhAvxXhqhhibJN\",\"rhS8qXRjZcpDXkwnE\",\"CHvzhtXnv8HTbPQ56\",\"yod5YhKtPqw2GfG9B\",\"QbNhFRPLbmkkouwvy\",\"WDyt5HzfeHn9HY2zM\",\"rfyEkETeoS96QNH4e\"]},\"flags\":1},\"editorId\":\"a777e8chPvJkY3tKa\",\"family\":[{\"_id\":\"uqZD99bDGx3LnSv6w\",\"language\":\"java\"},{\"_id\":\"v46dEzuJvHKawduxb\",\"language\":\"javascript\"},{\"_id\":\"CoSFaDzSxrSjsZ8F6\",\"language\":\"python3\"}]}}"]