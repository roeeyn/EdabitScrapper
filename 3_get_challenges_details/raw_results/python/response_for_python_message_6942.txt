a["{\"msg\":\"result\",\"id\":\"2179\",\"result\":{\"_id\":\"Y4gwcGfcGb3SKz6Tu\",\"author\":\"MyName\",\"authorId\":\"P7NmFbCJ5offXMRvB\",\"code\":\"def max_separator(txt):\\n\\t\",\"difficulty\":3.3529411764705883,\"quality\":4.285714285714286,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"FnLDnxoGM6bTXyFCp\",\"instructions\":\"Given a string of letters, create a function that returns a list with the separator that yields the longest possible substring, provided that:\\n- The substring starts and ends with the separator.\\n- The separator doesn't occur inside the substring other than at the ends.\\n\\nIf two or more separators yield substrings with the same length, they should appear in alphabetical order.\\n\\n### Examples\\n```\\nmax_separator(\\\"supercalifragilistic\\\") ➞ [\\\"s\\\"]\\n# The longest substring is \\\"supercalifragilis\\\".\\n\\nmax_separator(\\\"laboratory\\\") ➞ [\\\"a\\\", \\\"o\\\", \\\"r\\\"]\\n# \\\"abora\\\", \\\"orato\\\" and \\\"rator\\\" are the same length.\\n\\nmax_separator(\\\"candle\\\") ➞ []\\n# No possible substrings.\\n```\\n\\n### Notes\\n- All substrings should be at least of length 2 (i.e. no single-letter substrings).\\n- Expect lowercase alphabetic characters only.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(max_separator(\\\"supercalifragilistic\\\"), [\\\"s\\\"], \\\"Test case 1\\\")\\nTest.assert_equals(max_separator(\\\"laboratory\\\"), [\\\"a\\\", \\\"o\\\", \\\"r\\\"], \\\"Test case 2\\\")\\nTest.assert_equals(max_separator(\\\"candle\\\"), [], \\\"Test case 3\\\")\\nTest.assert_equals(max_separator(\\\"eagle\\\"), [\\\"e\\\"], \\\"input: eagle\\\")\\nTest.assert_equals(max_separator(\\\"acquaintance\\\"), [\\\"c\\\"], \\\"input: acquaintance\\\")\\nTest.assert_equals(max_separator(\\\"bookkeeper\\\"), [\\\"e\\\"], \\\"input: bookkeeper\\\")\\nTest.assert_equals(max_separator(\\\"couple\\\"), [], \\\"input: couple\\\")\\nTest.assert_equals(max_separator(\\\"slippery\\\"), [\\\"p\\\"], \\\"input: slippery\\\")\\nTest.assert_equals(max_separator(\\\"address\\\"), [\\\"d\\\", \\\"s\\\"], \\\"input: address\\\")\\nTest.assert_equals(max_separator(\\\"tatertot\\\"), [\\\"t\\\"], \\\"input: tatertot\\\")\\nTest.assert_equals(max_separator(\\\"transmissive\\\"), [\\\"i\\\", \\\"s\\\"], \\\"input: transmissive\\\")\\nTest.assert_equals(max_separator(\\\"stereotype\\\"), [\\\"e\\\", \\\"t\\\"], \\\"input: stereotype\\\")\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,0,4,2,4,4,4,5,2,0,5,4,4,4,2,3,3,5,5,4,3,5,3,3,5,0,3,5,3,5],\"quality\":[4,5,5,4,3,5,5,4,3,1,4,3,5,5,5,5,4,5,5,5,5],\"rators\":[\"iBsN2jda8GGPgqj3u\",\"Ecg4m7srYGgZsb4Ck\",\"Fb2wehA7QgTFWry2x\",\"NfMJuiBk6FN5Jc6ow\",\"yjtdwc2AC4jA2RWtn\",\"6F3Y6ZBAGNDGGTt9B\",\"5dHucvf2qBYyKim7X\",\"gJYuGdkXEWWmGRLzu\",\"8sNv5PTHa7XQ8bNqR\",\"HF28xZKSLM9wEuqNg\",\"Wv2vJnEj8ywNmARoF\",\"eqa6cvt5yha7z7dPt\",\"J3upzLHuEwXH7Z2hx\",\"6xTu4r8NMczBFvmtz\",\"buX4mCQhtXCfBjeno\",\"aaotFPYKJpeDdBmK5\",\"iS5BrkGLzJyPK7nKt\",\"k2yNko8KMNGEYzria\",\"4EgBCgEyiZA2hRsh4\",\"SjxhuvWoXqJHMMLmo\",\"hzHsgwjark5sZCQ2c\",\"Tg24gZyPmk8uDXcBY\",\"X4iqEdg7dPjFpoASw\",\"t7BnRyo7NH5Nx22HR\",\"xsDyJstYoBZRS8pJH\",\"iojEnnY9FsMfYzp6f\",\"oEkDZvzwDpH3oiyJh\",\"SbGLSZ5piLATC8bop\",\"4sHkH3t9CJYhbDwjM\",\"HqpbA6C6zkAmDsaEm\",\"2PufnQcsHsfymufX3\",\"MXjxGML2X75x64vJo\",\"gGq2d9kHacxZ4J4s8\",\"dHEeK62j7f5ggbRBy\",\"AmgukkQiBiYyJzJLD\",\"5icjZw6e5gpwKHdqi\",\"F8CP3NDk2GCR7MoD3\",\"8nE8QHnFYsHCFebte\",\"bJaPCBx63YxdJAuTS\",\"AasGs8AeX9Lcb9xJn\",\"JKb5rhL6DKcCAypF9\",\"xqoinxH9Fakasqhhg\",\"hR7GMiqGap4CzEWSy\",\"fznzd3qnvtbFkkizz\",\"MpfytGFYF77emJ3cT\",\"T6iBEE2jp7f7iEF2P\",\"ZQSG2DF9TjmBGXPwu\",\"suArq5BbSy7gD6xri\",\"BByKDngfPvW6w4m7d\",\"aFYzioHvZPvPaunsg\"],\"total\":70},\"flags\":0},\"summary\":\"Given a string of letters, create a function that returns a list with the separator that yields the longest possible substring, provided that:\\nThe substring starts and ends with the separator.\\nThe separator doesn't occur inside the substring other than at the ends.\\n\\nIf two or more separators yield substrings with the same length, they should appear in alphabet\",\"tags\":[\"strings\",\"regex\"],\"timestamp\":{\"$date\":1599438167085},\"title\":\"The Longest Substring\",\"family\":[{\"_id\":\"vhgEb79ag8dzTmRQs\",\"language\":\"cpp\"},{\"_id\":\"7k59Z9bk46uKH9og3\",\"language\":\"javascript\"},{\"_id\":\"Y4gwcGfcGb3SKz6Tu\",\"language\":\"python3\"},{\"_id\":\"oN32ZvTEPKjTqAuS7\",\"language\":\"ruby\"}]}}"]