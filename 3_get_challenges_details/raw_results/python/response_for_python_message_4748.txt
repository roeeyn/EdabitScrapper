a["{\"msg\":\"result\",\"id\":\"1090\",\"result\":{\"_id\":\"LgvppFDZoMpBKf8JW\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"def digital_clock(seconds):\\n\\t\",\"difficulty\":1.5733333333333333,\"quality\":4.607142857142857,\"familyId\":\"5RnxudjTYuWBvJyg8\",\"instructions\":\"Write a function that takes the number of `seconds` and returns the digital format clock time as a string. Time should be counted from `00:00:00`.\\n\\n### Examples\\n```\\ndigital_clock(5025) ➞ \\\"01:23:45\\\"\\n# 5025 seconds is 1 hour, 23 mins, 45 secs.\\n\\ndigital_clock(61201) ➞ \\\"17:00:01\\\"\\n# No AM/PM. 24h format.\\n\\ndigital_clock(87000) ➞ \\\"00:10:00\\\"\\n# It's 00:10 next day.\\n```\\n\\n### Notes\\n`seconds` is always greater than or equal to 0.\",\"isHidden\":false,\"lab\":\"arr_vector, res_vector = [\\n  [5025, 61201, 87000, 40271, 86399, 4666, 178056],\\n  [\\\"01:23:45\\\", \\\"17:00:01\\\", \\\"00:10:00\\\", \\\"11:11:11\\\", \\\"23:59:59\\\", \\\"01:17:46\\\", \\\"01:27:36\\\"]\\n]\\nfor i, s in enumerate(arr_vector): Test.assert_equals(digital_clock(s), res_vector[i])\",\"language\":\"python3\",\"summary\":\"Write a function that takes the number of seconds and returns the digital format clock time as a string. Time should be counted from 00:00:00.\\n\\nExamples\\ndigital_clock(5025) ➞ \\\"01:23:45\\\"\\n5025 seconds is 1 hour, 23 mins, 45 secs.\\n\\ndigital_clock(61201) ➞ \\\"17:00:01\\\"\\nNo AM/PM. 24h format.\\n\\ndigital_clock(87000) ➞ \\\"00:10:00\\\"\\nIt's 00:10 next day.\\n\\nNotes\\nseconds is alw\",\"tags\":[\"algebra\",\"strings\",\"math\",\"numbers\"],\"timestamp\":{\"$date\":1601135157559},\"title\":\"Time Conversion\",\"stats\":{\"completed\":{\"total\":134,\"ratings\":[1,1,1,1,1,2,2,1,1,2,0,2,1,3,1,2,1,1,0,2,2,2,1,0,0,1,2,1,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,5,2,2,1,0,2,2,1,2,2,2,0,0,2,2,2,2,2,2,1,2,0,2,2,2,2,2,2,1,0,3,2],\"quality\":[5,5,5,4,5,5,4,5,5,5,5,1,5,5,4,5,5,5,5,5,5,5,1,4,5,4,5,5,5,5,5,4,5,5,5,5,5,5,5,5,4,5,5,5,5,5,5,1,5,5,5,5,4,3,5,5],\"rators\":[\"J3upzLHuEwXH7Z2hx\",\"xn7uGNKeAwPEkP9oA\",\"a777e8chPvJkY3tKa\",\"qaPjAANdnxFnWfj5d\",\"8PwfYqoDQFThzNtvf\",\"2QGRoQn2dRq3scu7k\",\"faiLz9cFKmaiNHo5e\",\"cAP3n5NY64uoMwzRR\",\"ShDM7SCppXZLugqg3\",\"tAF9Gf6PiGogbZuWs\",\"qD2LrwaDrSdiybLKY\",\"aEm3Wvj2rFYRL8Lrb\",\"8BFSTCnoe2QggN64c\",\"kXEfD7xxEyWd7oxxL\",\"gb9rvGus2Jv7bjZSs\",\"6MjSiiBLPcvXbXcaZ\",\"QRv96jmNaYsWkxQEG\",\"HAtNvtvpTjB2DkhnG\",\"NzbRqGWspQnWMoDrF\",\"FEYpu9RWysAgW3XnP\",\"bccs9koJxyQ9XNiLC\",\"d8qtzoLB264iP8tdY\",\"NT926o5DhjZPWR5L3\",\"cR3ibTMxLyEdDFCHY\",\"yod5YhKtPqw2GfG9B\",\"RGMbFMZXJr7DhcAJy\",\"7K2GEb5TZRtSpyyGS\",\"H4abACFDH5t8CnnyH\",\"KMnufQYJvJq9Whu5b\",\"DPi9QGLctq2y76KuE\",\"3LiSLdtN58n46NEqg\",\"DYDJTyGgKFnBRLm2r\",\"iS5BrkGLzJyPK7nKt\",\"wRttWTM59y8m5mx7x\",\"sHjfbGQGLHE6JR6qu\",\"6428wKHtwKkFdvBs5\",\"SfN48TwtmPJ6C2NjS\",\"Yp7uvStL97cC9fKkY\",\"QYGFGGjATDQQzzhFM\",\"H9oJsZ8bpfXEHknQo\",\"hZZcAYv62aKbvg5zE\",\"HF28xZKSLM9wEuqNg\",\"s5M5RvgqR9BhB9JoC\",\"JriMzcQciCsXCDw7L\",\"4Ss448qJfv8h9kauv\",\"8JyqsSbN2FJXPr3cw\",\"CyyCsoHMAmd9ipNYo\",\"8fZxjQfuXw5HMSRJM\",\"gJYuGdkXEWWmGRLzu\",\"c2u7qfdaYxcyuydtu\",\"oyKcm3zqdy8Ko5P5d\",\"gXTAie79kiw28tx5u\",\"pJj86xc32Bs7Frxvi\",\"mtRvHDpeLoSGBf8zC\",\"oBcs8GLX2ZFLXQy8y\",\"REpkEcYrskYHBmYzW\",\"axdSNLZpiCDF8RS6n\",\"zd9FLSzsGz3evKafy\",\"PXAcsKkssS2yLyDv2\",\"dYPkStFnLvAMsHSzZ\",\"rrSC943cCKNG48sH4\",\"5HCu9Ydd86QgHDRNP\",\"YA7SDhpgEtsqynvNL\",\"Cuy7McJ5y8BkXRRk9\",\"yjtdwc2AC4jA2RWtn\",\"9CoqdidjM9KbeKnHY\",\"dj5AyG5fWP8FdsSmZ\",\"sbJcFfQjQ59Wfg4Cd\",\"tpxMgkGSHwBjS95Ta\",\"rfyEkETeoS96QNH4e\",\"FvFhg2wELM3SCZDZQ\",\"qyPR5bFaSGuiEdXCX\",\"5XiuAqicKD4hBdu63\",\"JS3hNM3XXkxPdg3yk\",\"5hQnRWiKkhgKJXNMP\",\"ZyrfhDTZHb8LymH5b\",\"C2AfMipCicfD58WJ9\",\"J5T8gZqiZXFuFDTQ7\",\"N9s9bkuJRsHaPxp9m\",\"6JMWyFfGM8R4kG8sw\",\"cZccqzRQ9GgjQF6Az\",\"Jqk2uJZZxEv5wZFze\",\"HqmxnQJM66Y57twhn\",\"buX4mCQhtXCfBjeno\",\"5S9nX4rKsnCcnv4Cz\",\"HuNF3xTBzmatyGSTm\",\"Nb6LYPoQP6KJZt8mz\",\"eYfPWvZwnJQkHbSTK\",\"LWCzZ8mb8gwrRNGfq\",\"EXbD3ZjgP9oaoFLYw\",\"GGdmhAvxXhqhhibJN\",\"PWgzeK859suojbrRx\",\"Ds7L5bksw2QRHjrKL\",\"YcCLwitFMAEJSnxAW\",\"srJ34BaybkQh3qRkM\",\"iojEnnY9FsMfYzp6f\",\"3cF6NXq3ZEwdkgSjb\",\"qAby4AWXmTNeusvg3\",\"eMuCpJ2spXWkJjWNz\",\"xu5dCnJ2T6SvR3Dia\",\"o4ixjQGSaYqA2JoM4\",\"T6iBEE2jp7f7iEF2P\",\"2u9wghjCydey6aWys\",\"CHvzhtXnv8HTbPQ56\",\"DEDniTrstQYGounXT\",\"yr822PZmmiDDenxpB\",\"PC3pLs36zNzpRDSuE\",\"AasGs8AeX9Lcb9xJn\",\"9Ly8afdtofp8DXzrt\",\"BrTDhPJcACL2bsrpJ\",\"pQwhNKiCne4gEZgcn\",\"Afnps7TJQuS9sipMb\",\"XD5nmvKQchKezPXhy\",\"xxyxCs8Hr7MQAsFvv\",\"2PufnQcsHsfymufX3\",\"dzS6WBTMHyFEag6Fp\",\"4TmgHkn5vqyHK3sYC\",\"d9LBRxvADNBB5QJMB\",\"pduNK68oazqQTtbLp\",\"u5u2YpHXiNgzDNJdX\",\"mxX4rH5ELYkdZ2Mbw\",\"7txFzDQ43vJ7qCY88\",\"Wi4H6ayKsNDWWQCG5\",\"9pzFiFK3ANLjQfnr2\",\"X4rzfxGgxx6CS7Bpz\",\"MKT7khMBGXzA22ykf\"]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"a777e8chPvJkY3tKa\",\"family\":[{\"_id\":\"dDjLzbMh2JqjTtG8J\",\"language\":\"java\"},{\"_id\":\"vGg5Q5WGHw5fNgwr7\",\"language\":\"javascript\"},{\"_id\":\"LgvppFDZoMpBKf8JW\",\"language\":\"python3\"},{\"_id\":\"KDaWiwnxLav4dRQkC\",\"language\":\"ruby\"}]}}"]