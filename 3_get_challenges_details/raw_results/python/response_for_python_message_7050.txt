a["{\"msg\":\"result\",\"id\":\"2231\",\"result\":{\"_id\":\"5pYkwf948KBQ3pNwz\",\"author\":\"Masked\",\"authorId\":\"S6Zd8mPuvhuh3MFRt\",\"code\":\"def most_common_words() # enter the necessary arguments\\n\\t\",\"difficulty\":3.466666666666667,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"sgbYb5478tKFnx742\",\"instructions\":\"This challenge requires you to find the most common words. There will be two leyword arguments passed in `text` and `n`. Return the most common words in the form of a dictionary.\\n\\n`text` would be the variable containing all the words, while `n` is a number that means _return the top `n` most common words_ from `text`. In case `n` exceeds the total number of unique words, return the full dictionary of most common words.\\n\\n`text` will only contain letters, spaces, and basic punctuation like fullstops, commas, exclamation marks, question marks and apostrophes, which means you would have to split the text into words as well.\\n\\nIn the case of an apostrophe:\\n_\\\"where's\\\"_ would be considered as two words, _\\\"where\\\"_ and _\\\"s\\\"_, and _\\\"I'm\\\"_ would be _\\\"i\\\"_ and _\\\"m\\\"_.\\n\\nAll words in the returned dictionary should be lower case.\\n\\n### Examples\\n```\\nwords = \\\"How much wood could a woodchuck chuck If a woodchuck could chuck wood? As much wood as a woodchuck could chuck, If a woodchuck could chuck wood\\\"\\n\\nmost_common_words(text=words, n=3) ➞ {\\n  \\\"wood\\\": 4,\\n  \\\"could\\\": 4,\\n  \\\"a\\\": 4\\n}\\n\\nmost_common_words(text=words, n=7) ➞ {\\n  \\\"wood\\\": 4,\\n  \\\"could\\\": 4,\\n  \\\"a\\\": 4,\\n  \\\"woodchuck\\\": 4,\\n  \\\"chuck\\\": 4,\\n  \\\"much\\\": 2,\\n  \\\"if\\\": 2\\n}\\n\\nmost_common_words(text=words, n=999) ➞ {\\n  \\\"wood\\\": 4,\\n  \\\"could\\\": 4,\\n  \\\"a\\\": 4,\\n  \\\"woodchuck\\\": 4,\\n  \\\"chuck\\\": 4,\\n  \\\"much\\\": 2,\\n  \\\"if\\\": 2,\\n  \\\"as\\\": 2,\\n  \\\"how\\\": 1\\n}\\n```\\n\\n### Notes\\nIn the case of duplicate values (eg. { \\\"word1\\\": 1,  \\\"word2\\\": 1 }), their order of appearance should follow their position in the text.\\n\\nFor example:\\n\\n```\\nmost_common_words(\\\"word1, word2\\\", 1) ➞ { \\\"word1\\\": 1 }\\nmost_common_words(\\\"word2, word1\\\", 1) ➞ { \\\"word2\\\": 1 }\\n```\",\"isFree\":false,\"isHidden\":false,\"lab\":\"woodchuck = \\\"\\\"\\\"How much wood could a woodchuck chuck\\nIf a woodchuck could chuck wood?\\nAs much wood as a woodchuck could chuck,\\nIf a woodchuck could chuck wood.\\\"\\\"\\\"\\n\\npeter = \\\"\\\"\\\"Peter Piper picked a peck of pickled peppers\\nA peck of pickled peppers Peter Piper picked\\nIf Peter Piper picked a peck of pickled peppers\\nWhere's the peck of pickled peppers Peter Piper picked?\\\"\\\"\\\"\\n\\nseashells = \\\"\\\"\\\"She sells seashells on the seashore.\\nThe shells she sells are seashells, I'm sure.\\nAnd if she sells seashells on the seashore,\\nThen I'm sure she sells seashore shells.\\\"\\\"\\\"\\n\\n# Woodchuck\\nTest.assert_equals(most_common_words(text=woodchuck, n=4), {'wood': 4, 'could': 4, 'a': 4, 'woodchuck': 4})\\nTest.assert_equals(most_common_words(text=woodchuck, n=2), {'wood': 4, 'could': 4})\\nTest.assert_equals(most_common_words(text=woodchuck, n=1000), {'wood': 4, 'could': 4, 'a': 4, 'woodchuck': 4, 'chuck': 4, 'much': 2, 'if': 2, 'as': 2, 'how': 1})\\n\\n# Peter\\nTest.assert_equals(most_common_words(text=peter, n=0), {})\\nTest.assert_equals(most_common_words(text=peter, n=6), {'peter': 4, 'piper': 4, 'picked': 4, 'peck': 4, 'of': 4, 'pickled': 4})\\nTest.assert_equals(most_common_words(text=peter, n=9), {'peter': 4, 'piper': 4, 'picked': 4, 'peck': 4, 'of': 4, 'pickled': 4, 'peppers': 4, 'a': 3, 'if': 1})\\n\\n# Seashells\\nTest.assert_equals(most_common_words(text=seashells, n=3), {'she': 4, 'sells': 4, 'seashells': 3})\\nTest.assert_equals(most_common_words(text=seashells, n=2147483647), {'she': 4, 'sells': 4, 'seashells': 3, 'the': 3, 'seashore': 3, 'on': 2, 'shells': 2, 'i': 2, 'm': 2, 'sure': 2, 'are': 1, 'and': 1, 'if': 1, 'then': 1})\\nTest.assert_equals(most_common_words(text=seashells, n=7), {'she': 4, 'sells': 4, 'seashells': 3, 'the': 3, 'seashore': 3, 'on': 2, 'shells': 2})\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[4,4,4,4,4,5,2,5,3,3,3,2,4,3,4,4,5,5,3,1,4,1,3,4,5,4,5,5,1,0],\"rators\":[\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\",\"n2BRY9X8899dcG8Bw\",\"2innwjWqxJHo4eRGh\",\"tAF9Gf6PiGogbZuWs\",\"qab4tYm6vJQcpKLfi\",\"EksjxkfKerD7ZtqYA\",\"fznzd3qnvtbFkkizz\",\"8JyqsSbN2FJXPr3cw\",\"X6G8jvpoas5oyWBD4\",\"xn7uGNKeAwPEkP9oA\",\"drQy2fDHWMMBEEL9G\",\"iS5BrkGLzJyPK7nKt\",\"eHcgvkTGsH7ZziqBo\",\"8sNv5PTHa7XQ8bNqR\",\"J3upzLHuEwXH7Z2hx\",\"yjtdwc2AC4jA2RWtn\",\"fSQSHjW3e72MrWxbD\",\"2PufnQcsHsfymufX3\",\"MpfytGFYF77emJ3cT\",\"s5M5RvgqR9BhB9JoC\",\"gJYuGdkXEWWmGRLzu\",\"suArq5BbSy7gD6xri\",\"d8qtzoLB264iP8tdY\",\"T6iBEE2jp7f7iEF2P\"],\"total\":28,\"quality\":[]},\"flags\":0},\"summary\":\"This challenge requires you to find the most common words. There will be two leyword arguments passed in text and n. Return the most common words in the form of a dictionary.\\n\\ntext would be the variable containing all the words, while n is a number that means return the top n most common words from text. In case n exceeds the total number of unique words, retu\",\"tags\":[\"algorithms\",\"objects\"],\"timestamp\":{\"$date\":1594181033987},\"title\":\"Most Common Words\",\"quality\":0,\"family\":[{\"_id\":\"5pYkwf948KBQ3pNwz\",\"language\":\"python3\"}]}}"]