a["{\"msg\":\"result\",\"id\":\"1165\",\"result\":{\"_id\":\"YXjx9G5uQ4CdYPuB4\",\"author\":\"Mubashir Hassan \",\"authorId\":\"T6iBEE2jp7f7iEF2P\",\"code\":\"def simple_comp(lst1, lst2):\\n\\t\",\"difficulty\":1.6176470588235294,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"uq9mkScbQGWmgJxoQ\",\"instructions\":\"**Mubashir** needs your help to compare two lists.\\n\\nFirst list `lst1` contains some numbers and second list `lst2` contains **squared values of numbers given in the first list**.\\n\\nCreate a function which takes these two lists and returns `True` if all square values are available, `False` otherwise.\\n\\n```\\nlst1 = [121, 144, 19, 161, 19, 144, 19, 11]  \\nlst2 = [121, 14641, 20736, 361, 25921, 361, 20736, 361]\\n```\\n\\nReturns `True` because **121 is square of 11, 14641 is square of 121, 20736 is square of 144, 361 is square of 19, 25921 the square of 161, and so on...**\\n\\n```\\nlst1 = [121, 144, 19, 161, 19, 144, 19, 11] \\nlst2 = [11*11, 121*121, 144*144, 19*19, 161*161, 19*19, 144*144, 19*19]\\n```\\n\\n### Examples\\n```\\nsimple_comp([121, 144, 19, 161, 19, 144, 19, 11], [121, 14641, 20736, 361, 25921, 361, 20736, 361]) ➞ True\\n\\nsimple_comp([4, 4], [1, 31]) ➞ False\\n\\nsimple_comp([2, 2, 3], [4, 4, 9]) ➞ True\\n```\\n\\n### Notes\\nNumbers can be in any order.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"lst1 = [121, 144, 19, 161, 19, 144, 19, 11]\\nlst2 = [11*11, 121*121, 144*144, 19*19, 161*161, 19*19, 144*144, 19*19]\\nTest.assert_equals(simple_comp(lst1, lst2), True)\\nlst1 = [4, 4]\\nlst2 = [1, 31]\\nTest.assert_equals(simple_comp(lst1, lst2), False)\\nlst1 = [121, 144, 19, 161, 19, 144, 19, 11]\\nlst2 = [11*21, 121*121, 144*144, 19*19, 161*161, 19*19, 144*144, 19*19]\\nTest.assert_equals(simple_comp(lst1, lst2), False)\\nlst1 = [121, 144, 19, 161, 19, 144, 19, 11]\\nlst2 = [11*11, 121*121, 144*144, 190*190, 161*161, 19*19, 144*144, 19*19]\\nTest.assert_equals(simple_comp(lst1, lst2), False)\\nlst1 = []\\nlst2 = []\\nTest.assert_equals(simple_comp(lst1, lst2), True)\\nlst1 = []\\nlst2 = None\\nTest.assert_equals(simple_comp(lst1, lst2), False)\\nlst1 = [121, 144, 19, 161, 19, 144, 19, 11, 1008]\\nlst2 = [11*11, 121*121, 144*144, 190*190, 161*161, 19*19, 144*144, 19*19]\\nTest.assert_equals(simple_comp(lst1, lst2), False)\\nlst1 = [10000000, 100000000]\\nlst2 = [10000000 * 10000000, 100000000 * 100000000]\\nTest.assert_equals(simple_comp(lst1, lst2), True)\\nlst1 = [10000001, 100000000]\\nlst2 = [10000000 * 10000000, 100000000 * 100000000]\\nTest.assert_equals(simple_comp(lst1, lst2), False)\\nlst1 = [2, 2, 3]\\nlst2 = [4, 9, 9]\\nTest.assert_equals(simple_comp(lst1, lst2), False)\\nlst1 = [2, 2, 3]\\nlst2 = [4, 4, 9]\\nTest.assert_equals(simple_comp(lst1, lst2), True)\\nlst1 = None\\nlst2 = []\\nTest.assert_equals(simple_comp(lst1, lst2), False)\\nTest.assert_equals(simple_comp([], [1]), False)\\nlst1 = [-121, -144, 19, -161, 19, -144, 19, -11]\\nlst2 = [11*11, 121*121, 144*144, 19*19, 161*161, 19*19, 144*144, 19*19]\\nTest.assert_equals(simple_comp(lst1, lst2), True)\\nlst1 = [42, 42]\\nlst2 = [42, 42]\\nTest.assert_equals(simple_comp(lst1, lst2), False)\\n#Mubashir\",\"language\":\"python3\",\"quality\":4.5,\"stats\":{\"completed\":{\"ratings\":[1,1,1,1,1,0,1,2,2,3,1,2,1,1,2,2,3,1,3,3,0,5,2,2,1,2,2,2,2,0,1,2,2,1,2,2,3,3,1,2,0,3,1,2,1,0,2,0,0,2,2,1,3,3,2,0,1,2,2,2,2,2,0,3,1,2,0,2],\"quality\":[5,5,5,4,4,3,5,5],\"rators\":[\"T6iBEE2jp7f7iEF2P\",\"iojEnnY9FsMfYzp6f\",\"cR3ibTMxLyEdDFCHY\",\"pPpmP7xeJzGgK362R\",\"XD5nmvKQchKezPXhy\",\"BdnE4RS5puoxo92mA\",\"vjWzDJa6NQnuwA3s5\",\"Yp7uvStL97cC9fKkY\",\"sX9GZp3fYyQLrBKMJ\",\"8PwfYqoDQFThzNtvf\",\"iS5BrkGLzJyPK7nKt\",\"KbQNvWQGcQHEtmCNK\",\"yv7c4H2jimSKHEjtG\",\"QRv96jmNaYsWkxQEG\",\"gJYuGdkXEWWmGRLzu\",\"GGdmhAvxXhqhhibJN\",\"J5T8gZqiZXFuFDTQ7\",\"8JyqsSbN2FJXPr3cw\",\"zd9FLSzsGz3evKafy\",\"oBcs8GLX2ZFLXQy8y\",\"p8qqFdJ3FSk5x9z3G\",\"gb9rvGus2Jv7bjZSs\",\"gXTAie79kiw28tx5u\",\"PXAcsKkssS2yLyDv2\",\"FEYpu9RWysAgW3XnP\",\"s5M5RvgqR9BhB9JoC\",\"yjtdwc2AC4jA2RWtn\",\"srJ34BaybkQh3qRkM\",\"cAP3n5NY64uoMwzRR\",\"Ds7L5bksw2QRHjrKL\",\"AQSqD9oNv2uPfxZCR\",\"CHvzhtXnv8HTbPQ56\",\"J3upzLHuEwXH7Z2hx\",\"YcCLwitFMAEJSnxAW\",\"bvmTE46bfcM4ogj34\",\"2u9wghjCydey6aWys\",\"kdcWyvQAs27aCfbr8\",\"o4ixjQGSaYqA2JoM4\",\"DEDniTrstQYGounXT\",\"eHcgvkTGsH7ZziqBo\",\"5HCu9Ydd86QgHDRNP\",\"9Ly8afdtofp8DXzrt\",\"AasGs8AeX9Lcb9xJn\",\"HqmxnQJM66Y57twhn\",\"w2HhxvSLmDhaGCAjE\",\"aEm3Wvj2rFYRL8Lrb\",\"tAF9Gf6PiGogbZuWs\",\"EfxwqhYdapX3dMQC2\",\"Jqk2uJZZxEv5wZFze\",\"buX4mCQhtXCfBjeno\",\"mvJBakQ35CWAnbbEZ\",\"sHjfbGQGLHE6JR6qu\",\"BrTDhPJcACL2bsrpJ\",\"SxzqqQZ4HEwY9oCzE\",\"8BFSTCnoe2QggN64c\",\"EHtTFoDbt722AH667\",\"DPi9QGLctq2y76KuE\",\"yod5YhKtPqw2GfG9B\",\"NqsYZi3NYoMzJKBqX\",\"dzS6WBTMHyFEag6Fp\",\"qaPjAANdnxFnWfj5d\",\"sBoNkD5c6zGSZNbqL\",\"2PufnQcsHsfymufX3\",\"mxX4rH5ELYkdZ2Mbw\",\"ey3CASd6Je5LEJzfB\",\"9pzFiFK3ANLjQfnr2\",\"MKT7khMBGXzA22ykf\",\"Wi4H6ayKsNDWWQCG5\",\"FQoDbW3f7viY9x6xq\",\"d8qtzoLB264iP8tdY\",\"4TmgHkn5vqyHK3sYC\"],\"total\":77},\"flags\":1},\"summary\":\"Mubashir needs your help to compare two lists.\\n\\nFirst list lst1 contains some numbers and second list lst2 contains squared values of numbers given in the first list.\\n\\nCreate a function which takes these two lists and returns True if all square values are available, False otherwise.\\n\\nlst1 = [121, 144, 19, 161, 19, 144, 19, 11]\\nlst2 = [121, 14641, 20736, 361, 2\",\"tags\":[\"math\",\"numbers\",\"arrays\",\"interview\"],\"timestamp\":{\"$date\":1614513307499},\"title\":\"A Simple Comparison\",\"family\":[{\"_id\":\"2srwHiYjSpGdfoPzc\",\"language\":\"cpp\"},{\"_id\":\"DTvQD5MeTDbYh27nL\",\"language\":\"javascript\"},{\"_id\":\"YXjx9G5uQ4CdYPuB4\",\"language\":\"python3\"},{\"_id\":\"fyMs9Jih68xGDToWu\",\"language\":\"ruby\"}]}}"]