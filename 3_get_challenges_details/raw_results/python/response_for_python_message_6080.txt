a["{\"msg\":\"result\",\"id\":\"1751\",\"result\":{\"_id\":\"Rww5GiNRH3b2BRC83\",\"archived\":false,\"author\":\"kochug\",\"authorId\":\"vQEmjTRgmdGNYB7yk\",\"code\":\"def data_regex_lovely(txt):\\n\\t\",\"difficulty\":2.283582089552239,\"familyId\":\"p45PePzc3p5xZ3jem\",\"instructions\":\"You are to create a special regex that will detect if an HTML GET request is valid or not (with some gotchas). Strings are formated like so:\\n\\n```\\nname1=val1&name2=val2&name3=val3&name4=val4\\n```\\n\\nYou need to detect requests with the four names: _\\\"val\\\", \\\"id\\\", \\\"desc\\\", \\\"time\\\"_ (each value can have a different order).\\n\\n### Example #1\\n```\\n\\\"val=val1&id=val2&desc=val3&time=val4\\\"\\n\\n\\\"id=val2&val=val1&time=val4&desc=val3\\\"\\n```\\n\\nEach name has a specific value:\\n\\n1. **val** could contain  string a to z and number 0 to 9 (any case accepted).\\n2. **id** is a number from 0 to 10.\\n3. **desc** could contain strings a to z.\\n4. **time** is formated value (00:00 to 99:99).\\n\\n### Example #2\\n```\\n\\\"val=test1151&id=5&desc=helloWorld&time=54:33\\\"\\n\\n\\\"id=10&val=123test&time=99:00&desc=itsok\\\"\\n```\\n\\nWhen the regex checker is finished, you need to put all names and their values from the request into an object and return it with the given function `data_regex_lovely()`. The parameter `txt` is a valid GET request (no gotchas).\\n\\n### Notes\\n- The regex length is limited to < 161 characters ( \\\"/\\\" and \\\\[flags] included).\\n- You might get an empty string `\\\"\\\"` when users don't send a request.\\n- Warning about data object value types.\",\"lab\":\"Test.assert_equals(data_regex_lovely(\\\"desc=dzgr&val=xyz54&time=01:41&id=1\\\"), {'desc':\\\"dzgr\\\",'val':\\\"xyz54\\\",'time':\\\"01:41\\\",'id':1})\\nTest.assert_equals(data_regex_lovely(\\\"time=01:41&id=1&desc=dzgr&val=12345\\\"), {'desc':\\\"dzgr\\\",'val':\\\"12345\\\",'time':\\\"01:41\\\",'id':1})\\nTest.assert_equals(data_regex_lovely(\\\"time=11:41&id=10&desc=dzgraa&val=54\\\"), {'desc':\\\"dzgraa\\\",'val':\\\"54\\\",'time':\\\"11:41\\\",'id':10})\",\"language\":\"python3\",\"summary\":\"You are to create a special regex that will detect if an HTML GET request is valid or not (with some gotchas). Strings are formated like so:\\n\\nname1=val1&name2=val2&name3=val3&name4=val4\\n\\nYou need to detect requests with the four names: \\\"val\\\", \\\"id\\\", \\\"desc\\\", \\\"time\\\" (each value can have a different order).\\n\\nExample #1\\n\\\"val=val1&id=val2&desc=val3&time=val4\\\"\\n\\n\\\"id=v\",\"tags\":[\"regex\",\"strings\",\"validation\"],\"timestamp\":{\"$date\":1524289012138},\"title\":\"Regex HTML Get Request Checker\",\"stats\":{\"completed\":{\"total\":68,\"ratings\":[3,3,3,3,3,2,5,2,2,2,1,2,3,3,2,2,1,0,2,3,2,1,3,0,3,3,2,2,3,2,3,2,3,3,2,2,5,1,1,1,1,2,1,3,2,2,2,3,3,3,3,2,3,3,3,3,2,2,3,3,3,2,0,2,2,3,1],\"rators\":[\"vQEmjTRgmdGNYB7yk\",\"tuyDaJzFy78jxvhCY\",\"3mtD7DxrAgDMcxWKt\",\"Lyh6nkCyy9X7rTZPi\",\"ZdP4Y6apsbFtm3wj8\",\"JXJaA6scMybp2H5zJ\",\"iEMnJaXXfa6dzdQzb\",\"6fJpRpAgiWD5zX9qB\",\"GRZzKCbeb4xKHFCrZ\",\"wPhd86JGzcCkkQdyy\",\"axnLNbddHAGKR8dtF\",\"tAF9Gf6PiGogbZuWs\",\"7qdj5aWT2sT2kRRjp\",\"v45LnijojEMMfLHpL\",\"sugzbfJyLjWxmx2pq\",\"jeuoearPPTcGPgXhf\",\"QgdwHjy4x6MCPwfh9\",\"gdTRh2YuTSSbLt5tc\",\"M8jrv2FfpMQp9Qzpx\",\"RsX6W2ddWM8ajHzss\",\"uJ5A3zjLi9iN5eeXX\",\"KDfCknbFB67GDq3Yg\",\"n9PZCXcWTygjaDsXs\",\"8JyqsSbN2FJXPr3cw\",\"6W2GSzrYjMD9ANBFY\",\"83i7PKDRGfBw5DLst\",\"mGmoXwXiopnnnqYdh\",\"vjgbYJGLr39bACXND\",\"gb9rvGus2Jv7bjZSs\",\"yZvzB3qFb8pkHy4dg\",\"T3ZAuoMrJjvZwN55B\",\"ab7BsQuhDo3QgE6bh\",\"FjzEmrkRd6DNtHFK6\",\"PFjMZGHNAPTkgd7tq\",\"jHrtWDGBhkbuWa7fG\",\"gMJhLdyw3tH7L96X2\",\"HqmxnQJM66Y57twhn\",\"2fxapKr8XGdNeaKi2\",\"s5M5RvgqR9BhB9JoC\",\"Jqk2uJZZxEv5wZFze\",\"pmgFEciNrd3ES9tuu\",\"C4QntmkYtB89GNtpd\",\"aEm3Wvj2rFYRL8Lrb\",\"AasGs8AeX9Lcb9xJn\",\"8PwfYqoDQFThzNtvf\",\"PytNZK9mNiRiZxPrm\",\"RcFJfYquW9quJDnp5\",\"ZNnsMeNkdDhHjSrZb\",\"Nua6T3dBurBy3Qfg9\",\"YRstQuthRkFeBiXug\",\"n2BRY9X8899dcG8Bw\",\"R4SjTgDnpigJYDLyL\",\"gJYuGdkXEWWmGRLzu\",\"yjtdwc2AC4jA2RWtn\",\"Yp7uvStL97cC9fKkY\",\"mDWNyaaQ9hvPCRzSd\",\"xn7uGNKeAwPEkP9oA\",\"J3upzLHuEwXH7Z2hx\",\"iojEnnY9FsMfYzp6f\",\"oBcs8GLX2ZFLXQy8y\",\"JKb5rhL6DKcCAypF9\",\"gKnWjDjwrJh7MK2df\",\"DPi9QGLctq2y76KuE\",\"yod5YhKtPqw2GfG9B\",\"2PufnQcsHsfymufX3\",\"8sNv5PTHa7XQ8bNqR\"],\"quality\":[4,5,4]},\"complaints\":{\"total\":0,\"reasons\":[],\"skippers\":[\"vQEmjTRgmdGNYB7yk\"]},\"instructions\":{\"score\":-1.35,\"voters\":[\"NJFwquxQe58KQMmCX\",\"72RkYjdDzRupHxJwn\"]},\"tests\":{\"score\":0,\"voters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.333333333333333,\"family\":[{\"_id\":\"2GQ4MishQPNA8FPKr\",\"language\":\"javascript\"},{\"_id\":\"Rww5GiNRH3b2BRC83\",\"language\":\"python3\"}]}}"]