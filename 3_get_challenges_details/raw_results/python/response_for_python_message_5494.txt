a["{\"msg\":\"result\",\"id\":\"1460\",\"result\":{\"_id\":\"9zf6scCreprSaQAPq\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def sort_by_answer(lst):\\n\\t\",\"difficulty\":2.0588235294117645,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"HAAu2652SZCp2rNoj\",\"instructions\":\"Given a list of *math expressions*, create a function which **sorts** the list by **their answer**. It should be sorted in **ascending** order.\\n\\n### Examples\\n```\\nsort_by_answer([\\\"1 + 1\\\", \\\"1 + 7\\\", \\\"1 + 5\\\", \\\"1 + 4\\\"]) ➞ [\\\"1 + 1\\\", \\\"1 + 4\\\", \\\"1 + 5\\\", \\\"1 + 7\\\"]\\n\\nsort_by_answer([\\\"4 - 4\\\", \\\"2 - 2\\\", \\\"5 - 5\\\", \\\"10 - 10\\\"]) ➞ [\\\"4 - 4\\\", \\\"2 - 2\\\", \\\"5 - 5\\\", \\\"10 - 10\\\"]\\n\\nsort_by_answer([\\\"2 + 2\\\", \\\"2 - 2\\\", \\\"2 * 1\\\"]) ➞ [\\\"2 - 2\\\", \\\"2 * 1\\\", \\\"2 + 2\\\"]\\n```\\n\\n### Notes\\n- If multiple expressions have the *same answer*, put them in the order of which they appear (see example #2).\\n- You won't need to worry about *divisions by zero*.\\n- The symbol used for multiplication is `x` instead of `*`.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(sort_by_answer([\\\"1 + 1\\\", \\\"1 + 7\\\", \\\"1 + 5\\\", \\\"1 + 4\\\"]), [\\\"1 + 1\\\", \\\"1 + 4\\\", \\\"1 + 5\\\", \\\"1 + 7\\\"])\\nTest.assert_equals(sort_by_answer([\\\"2 + 2\\\", \\\"2 - 2\\\", \\\"2 x 2\\\", \\\"2 / 2\\\"]), [\\\"2 - 2\\\", \\\"2 / 2\\\", \\\"2 + 2\\\", \\\"2 x 2\\\"])\\nTest.assert_equals(sort_by_answer([\\\"1 x 1\\\", \\\"3 x 3\\\", \\\"-1 x -1\\\", \\\"-3 x -3\\\"]), [\\\"1 x 1\\\", \\\"-1 x -1\\\", \\\"3 x 3\\\", \\\"-3 x -3\\\"])\\nTest.assert_equals(sort_by_answer([\\\"4 - 4\\\", \\\"2 - 2\\\", \\\"5 - 5\\\", \\\"10 - 10\\\"]), [\\\"4 - 4\\\", \\\"2 - 2\\\", \\\"5 - 5\\\", \\\"10 - 10\\\"], \\\"The answers are all the same, so return the elements in the order they came\\\")\\nTest.assert_equals(sort_by_answer([\\\"2 + 2\\\", \\\"2 - 2\\\", \\\"2 x 1\\\"]), [\\\"2 - 2\\\", \\\"2 x 1\\\", \\\"2 + 2\\\"])\\nTest.assert_equals(sort_by_answer([\\\"4 - 4\\\", \\\"2 - 2\\\", \\\"5 + 5\\\", \\\"10 - 10\\\"]), [\\\"4 - 4\\\", \\\"2 - 2\\\", \\\"10 - 10\\\", \\\"5 + 5\\\"])\\nTest.assert_equals(sort_by_answer([\\\"49 x -6\\\", \\\"21 - 25\\\", \\\"-11 / 26\\\", \\\"6 + -37\\\", \\\"1 / 49\\\", \\\"22 x -46\\\", \\\"-7 / 10\\\", \\\"16 + -34\\\", \\\"-37 x -27\\\", \\\"23 / -41\\\"]), [\\\"22 x -46\\\", \\\"49 x -6\\\", \\\"6 + -37\\\", \\\"16 + -34\\\", \\\"21 - 25\\\", \\\"-7 / 10\\\", \\\"23 / -41\\\", \\\"-11 / 26\\\", \\\"1 / 49\\\", \\\"-37 x -27\\\"])\\nTest.assert_equals(sort_by_answer([\\\"18 / -13\\\", \\\"41 + -14\\\", \\\"6 x 19\\\", \\\"-7 x 3\\\", \\\"44 + 37\\\", \\\"-13 + -32\\\", \\\"47 + -15\\\"]), [\\\"-13 + -32\\\", \\\"-7 x 3\\\", \\\"18 / -13\\\", \\\"41 + -14\\\", \\\"47 + -15\\\", \\\"44 + 37\\\", \\\"6 x 19\\\"])\\nTest.assert_equals(sort_by_answer([\\\"-45 - 30\\\", \\\"-6 / 21\\\", \\\"-31 x 40\\\"]), [\\\"-31 x 40\\\", \\\"-45 - 30\\\", \\\"-6 / 21\\\"])\\nTest.assert_equals(sort_by_answer([\\\"4 + 13\\\", \\\"14 + 42\\\", \\\"-25 / 39\\\", \\\"-18 / 49\\\", \\\"34 + 41\\\", \\\"21 / -32\\\", \\\"3 / -17\\\", \\\"-38 + 38\\\", \\\"22 + 15\\\", \\\"-11 x 33\\\", \\\"-20 x -25\\\", \\\"3 / -28\\\", \\\"44 - 15\\\", \\\"26 / -29\\\", \\\"-23 - 43\\\", \\\"4 / 26\\\", \\\"8 + -45\\\", \\\"-4 + 28\\\", \\\"0 / 46\\\", \\\"8 x -9\\\"]), [\\\"-11 x 33\\\", \\\"8 x -9\\\", \\\"-23 - 43\\\", \\\"8 + -45\\\", \\\"26 / -29\\\", \\\"21 / -32\\\", \\\"-25 / 39\\\", \\\"-18 / 49\\\", \\\"3 / -17\\\", \\\"3 / -28\\\", \\\"-38 + 38\\\", \\\"0 / 46\\\", \\\"4 / 26\\\", \\\"4 + 13\\\", \\\"-4 + 28\\\", \\\"44 - 15\\\", \\\"22 + 15\\\", \\\"14 + 42\\\", \\\"34 + 41\\\", \\\"-20 x -25\\\"])\\nTest.assert_equals(sort_by_answer([\\\"-42 - 47\\\", \\\"7 x 17\\\", \\\"-36 + -30\\\"]), [\\\"-42 - 47\\\", \\\"-36 + -30\\\", \\\"7 x 17\\\"])\\nTest.assert_equals(sort_by_answer([\\\"-45 / 7\\\", \\\"44 - 49\\\", \\\"-17 x 49\\\", \\\"-22 + -40\\\"]), [\\\"-17 x 49\\\", \\\"-22 + -40\\\", \\\"-45 / 7\\\", \\\"44 - 49\\\"])\\nTest.assert_equals(sort_by_answer([\\\"2 + -18\\\", \\\"-22 + 11\\\", \\\"-49 + -31\\\", \\\"32 / -20\\\", \\\"-10 x 5\\\", \\\"35 x -3\\\"]), [\\\"35 x -3\\\", \\\"-49 + -31\\\", \\\"-10 x 5\\\", \\\"2 + -18\\\", \\\"-22 + 11\\\", \\\"32 / -20\\\"])\\nTest.assert_equals(sort_by_answer([\\\"-35 - 27\\\", \\\"38 - 41\\\", \\\"47 x -44\\\", \\\"-6 x -38\\\"]), [\\\"47 x -44\\\", \\\"-35 - 27\\\", \\\"38 - 41\\\", \\\"-6 x -38\\\"])\\nTest.assert_equals(sort_by_answer([\\\"23 / 33\\\", \\\"-5 / 26\\\", \\\"36 + -1\\\", \\\"-35 / 26\\\", \\\"3 / 4\\\", \\\"-44 - 42\\\", \\\"-30 - 20\\\", \\\"-12 - 9\\\", \\\"33 - 23\\\", \\\"14 + 12\\\", \\\"-28 + 10\\\", \\\"14 + -24\\\", \\\"48 x -47\\\", \\\"35 x 47\\\", \\\"-28 x 9\\\", \\\"-26 + 2\\\"]), [\\\"48 x -47\\\", \\\"-28 x 9\\\", \\\"-44 - 42\\\", \\\"-30 - 20\\\", \\\"-26 + 2\\\", \\\"-12 - 9\\\", \\\"-28 + 10\\\", \\\"14 + -24\\\", \\\"-35 / 26\\\", \\\"-5 / 26\\\", \\\"23 / 33\\\", \\\"3 / 4\\\", \\\"33 - 23\\\", \\\"14 + 12\\\", \\\"36 + -1\\\", \\\"35 x 47\\\"])\\nTest.assert_equals(sort_by_answer([\\\"-26 / -27\\\", \\\"31 / -5\\\", \\\"-20 / -39\\\", \\\"-41 x 37\\\", \\\"14 x 6\\\", \\\"-2 - 13\\\", \\\"-5 - 14\\\", \\\"22 + 45\\\", \\\"4 + 2\\\", \\\"35 + 43\\\", \\\"46 + -11\\\", \\\"19 / 45\\\", \\\"-27 + -43\\\", \\\"-30 + -10\\\", \\\"-6 x -36\\\", \\\"-2 - 37\\\", \\\"4 - 41\\\", \\\"27 / -30\\\"]), [\\\"-41 x 37\\\", \\\"-27 + -43\\\", \\\"-30 + -10\\\", \\\"-2 - 37\\\", \\\"4 - 41\\\", \\\"-5 - 14\\\", \\\"-2 - 13\\\", \\\"31 / -5\\\", \\\"27 / -30\\\", \\\"19 / 45\\\", \\\"-20 / -39\\\", \\\"-26 / -27\\\", \\\"4 + 2\\\", \\\"46 + -11\\\", \\\"22 + 45\\\", \\\"35 + 43\\\", \\\"14 x 6\\\", \\\"-6 x -36\\\"])\\nTest.assert_equals(sort_by_answer([\\\"-5 / 25\\\", \\\"0 / 24\\\", \\\"-17 x 28\\\", \\\"-22 x 49\\\"]), [\\\"-22 x 49\\\", \\\"-17 x 28\\\", \\\"-5 / 25\\\", \\\"0 / 24\\\"])\\nTest.assert_equals(sort_by_answer([\\\"-37 / -24\\\", \\\"-21 - 34\\\", \\\"40 x -7\\\", \\\"19 x 40\\\", \\\"-40 / -5\\\"]), [\\\"40 x -7\\\", \\\"-21 - 34\\\", \\\"-37 / -24\\\", \\\"-40 / -5\\\", \\\"19 x 40\\\"])\\nTest.assert_equals(sort_by_answer([\\\"13 / 47\\\", \\\"31 - 27\\\", \\\"-47 - 46\\\", \\\"-1 / -1\\\", \\\"28 + -23\\\", \\\"-23 + 15\\\", \\\"34 / -8\\\", \\\"-36 + 25\\\", \\\"-24 x -26\\\", \\\"-12 + 33\\\", \\\"2 + 17\\\", \\\"-36 + 12\\\"]), [\\\"-47 - 46\\\", \\\"-36 + 12\\\", \\\"-36 + 25\\\", \\\"-23 + 15\\\", \\\"34 / -8\\\", \\\"13 / 47\\\", \\\"-1 / -1\\\", \\\"31 - 27\\\", \\\"28 + -23\\\", \\\"2 + 17\\\", \\\"-12 + 33\\\", \\\"-24 x -26\\\"])\\nTest.assert_equals(sort_by_answer([\\\"31 x 21\\\", \\\"-31 x 4\\\", \\\"-48 x -20\\\", \\\"-26 x -36\\\", \\\"-38 - 18\\\", \\\"-42 / -42\\\", \\\"42 - 38\\\"]), [\\\"-31 x 4\\\", \\\"-38 - 18\\\", \\\"-42 / -42\\\", \\\"42 - 38\\\", \\\"31 x 21\\\", \\\"-26 x -36\\\", \\\"-48 x -20\\\"])\\nTest.assert_equals(sort_by_answer([\\\"30 - 0\\\", \\\"23 x -31\\\", \\\"25 + 33\\\", \\\"42 + 5\\\", \\\"38 x 36\\\", \\\"22 / -23\\\", \\\"12 - 13\\\", \\\"47 x -48\\\", \\\"16 + -31\\\"]), [\\\"47 x -48\\\", \\\"23 x -31\\\", \\\"16 + -31\\\", \\\"12 - 13\\\", \\\"22 / -23\\\", \\\"30 - 0\\\", \\\"42 + 5\\\", \\\"25 + 33\\\", \\\"38 x 36\\\"])\\nTest.assert_equals(sort_by_answer([\\\"33 / -38\\\", \\\"50 x 0\\\", \\\"-50 x -43\\\", \\\"-34 x -15\\\", \\\"-26 - 11\\\", \\\"2 / 26\\\", \\\"-17 x -47\\\", \\\"-34 x -36\\\", \\\"-14 / -46\\\", \\\"10 - 10\\\", \\\"25 + 4\\\"]), [\\\"-26 - 11\\\", \\\"33 / -38\\\", \\\"50 x 0\\\", \\\"10 - 10\\\", \\\"2 / 26\\\", \\\"-14 / -46\\\", \\\"25 + 4\\\", \\\"-34 x -15\\\", \\\"-17 x -47\\\", \\\"-34 x -36\\\", \\\"-50 x -43\\\"])\\nTest.assert_equals(sort_by_answer([\\\"-24 / 27\\\"]), [\\\"-24 / 27\\\"])\\nTest.assert_equals(sort_by_answer([\\\"41 - 41\\\", \\\"31 x -22\\\", \\\"-25 + -1\\\", \\\"-47 - 23\\\", \\\"-41 x 0\\\"]), [\\\"31 x -22\\\", \\\"-47 - 23\\\", \\\"-25 + -1\\\", \\\"41 - 41\\\", \\\"-41 x 0\\\"])\\nTest.assert_equals(sort_by_answer([\\\"-19 + -6\\\", \\\"-44 + -20\\\", \\\"2 / 5\\\", \\\"39 - 5\\\", \\\"-43 x 23\\\"]), [\\\"-43 x 23\\\", \\\"-44 + -20\\\", \\\"-19 + -6\\\", \\\"2 / 5\\\", \\\"39 - 5\\\"])\\nTest.assert_equals(sort_by_answer([\\\"1 + 6\\\", \\\"-11 + 31\\\", \\\"-15 - 32\\\", \\\"39 / -42\\\", \\\"38 / 6\\\", \\\"15 - 41\\\"]), [\\\"-15 - 32\\\", \\\"15 - 41\\\", \\\"39 / -42\\\", \\\"38 / 6\\\", \\\"1 + 6\\\", \\\"-11 + 31\\\"])\\nTest.assert_equals(sort_by_answer([\\\"27 + -19\\\", \\\"43 + -33\\\", \\\"-5 - 9\\\", \\\"-44 x 27\\\", \\\"-2 / -22\\\", \\\"-18 / -32\\\", \\\"13 / 47\\\", \\\"-34 / 27\\\", \\\"0 - 42\\\", \\\"2 x 27\\\", \\\"9 x -15\\\"]), [\\\"-44 x 27\\\", \\\"9 x -15\\\", \\\"0 - 42\\\", \\\"-5 - 9\\\", \\\"-34 / 27\\\", \\\"-2 / -22\\\", \\\"13 / 47\\\", \\\"-18 / -32\\\", \\\"27 + -19\\\", \\\"43 + -33\\\", \\\"2 x 27\\\"])\\nTest.assert_equals(sort_by_answer([\\\"23 / 31\\\", \\\"33 + 49\\\", \\\"-15 / -15\\\", \\\"0 / -5\\\", \\\"32 - 31\\\", \\\"37 / -38\\\", \\\"0 + 40\\\", \\\"-10 x 1\\\", \\\"-13 x 34\\\", \\\"32 - 32\\\", \\\"18 x 12\\\", \\\"15 x 2\\\", \\\"-33 - 3\\\", \\\"49 x -24\\\", \\\"-31 / 29\\\", \\\"-3 / 39\\\"]), [\\\"49 x -24\\\", \\\"-13 x 34\\\", \\\"-33 - 3\\\", \\\"-10 x 1\\\", \\\"-31 / 29\\\", \\\"37 / -38\\\", \\\"-3 / 39\\\", \\\"0 / -5\\\", \\\"32 - 32\\\", \\\"23 / 31\\\", \\\"-15 / -15\\\", \\\"32 - 31\\\", \\\"15 x 2\\\", \\\"0 + 40\\\", \\\"33 + 49\\\", \\\"18 x 12\\\"])\\nTest.assert_equals(sort_by_answer([\\\"-6 - 24\\\", \\\"6 - 49\\\", \\\"15 - 8\\\", \\\"11 + 0\\\", \\\"44 - 49\\\", \\\"3 - 10\\\", \\\"45 + 16\\\", \\\"-37 x 6\\\"]), [\\\"-37 x 6\\\", \\\"6 - 49\\\", \\\"-6 - 24\\\", \\\"3 - 10\\\", \\\"44 - 49\\\", \\\"15 - 8\\\", \\\"11 + 0\\\", \\\"45 + 16\\\"])\\nTest.assert_equals(sort_by_answer([\\\"-27 / 6\\\", \\\"-21 x -39\\\", \\\"-21 x 40\\\", \\\"-49 x -45\\\", \\\"39 / 43\\\", \\\"-37 x 45\\\", \\\"-36 + -11\\\"]), [\\\"-37 x 45\\\", \\\"-21 x 40\\\", \\\"-36 + -11\\\", \\\"-27 / 6\\\", \\\"39 / 43\\\", \\\"-21 x -39\\\", \\\"-49 x -45\\\"])\\nTest.assert_equals(sort_by_answer([\\\"-8 / -8\\\", \\\"-27 / -6\\\", \\\"-31 - 43\\\", \\\"2 x -21\\\", \\\"7 x 49\\\", \\\"26 x 16\\\", \\\"-32 - 5\\\", \\\"-4 + -36\\\", \\\"-30 + 21\\\", \\\"-44 / 39\\\", \\\"-21 - 8\\\", \\\"30 - 20\\\", \\\"17 / -1\\\", \\\"-49 / 22\\\", \\\"-48 + 48\\\"]), [\\\"-31 - 43\\\", \\\"2 x -21\\\", \\\"-4 + -36\\\", \\\"-32 - 5\\\", \\\"-21 - 8\\\", \\\"17 / -1\\\", \\\"-30 + 21\\\", \\\"-49 / 22\\\", \\\"-44 / 39\\\", \\\"-48 + 48\\\", \\\"-8 / -8\\\", \\\"-27 / -6\\\", \\\"30 - 20\\\", \\\"7 x 49\\\", \\\"26 x 16\\\"])\\nTest.assert_equals(sort_by_answer([\\\"48 + -49\\\", \\\"8 x 46\\\", \\\"-47 - 34\\\", \\\"17 + -41\\\", \\\"-40 + -28\\\", \\\"27 / 27\\\", \\\"22 - 44\\\", \\\"-32 / 27\\\", \\\"-27 / -11\\\", \\\"50 / 10\\\", \\\"38 + 32\\\", \\\"-1 x -10\\\", \\\"-15 + -29\\\", \\\"-9 - 37\\\", \\\"-42 x -43\\\", \\\"-19 x -21\\\", \\\"7 - 10\\\", \\\"-27 - 14\\\", \\\"-39 + -7\\\", \\\"20 - 45\\\"]), [\\\"-47 - 34\\\", \\\"-40 + -28\\\", \\\"-9 - 37\\\", \\\"-39 + -7\\\", \\\"-15 + -29\\\", \\\"-27 - 14\\\", \\\"20 - 45\\\", \\\"17 + -41\\\", \\\"22 - 44\\\", \\\"7 - 10\\\", \\\"-32 / 27\\\", \\\"48 + -49\\\", \\\"27 / 27\\\", \\\"-27 / -11\\\", \\\"50 / 10\\\", \\\"-1 x -10\\\", \\\"38 + 32\\\", \\\"8 x 46\\\", \\\"-19 x -21\\\", \\\"-42 x -43\\\"])\\nTest.assert_equals(sort_by_answer([\\\"35 / 23\\\", \\\"-27 + -26\\\", \\\"1 - 39\\\", \\\"42 / 45\\\", \\\"-35 - 37\\\", \\\"-34 x -11\\\"]), [\\\"-35 - 37\\\", \\\"-27 + -26\\\", \\\"1 - 39\\\", \\\"42 / 45\\\", \\\"35 / 23\\\", \\\"-34 x -11\\\"])\\nTest.assert_equals(sort_by_answer([\\\"-33 + -6\\\", \\\"-9 x -1\\\", \\\"43 + 18\\\", \\\"-12 - 44\\\", \\\"-27 x 49\\\", \\\"42 + 17\\\", \\\"34 + 17\\\"]), [\\\"-27 x 49\\\", \\\"-12 - 44\\\", \\\"-33 + -6\\\", \\\"-9 x -1\\\", \\\"34 + 17\\\", \\\"42 + 17\\\", \\\"43 + 18\\\"])\\nTest.assert_equals(sort_by_answer([\\\"-1 / 12\\\", \\\"21 + 19\\\", \\\"6 + 22\\\", \\\"7 - 1\\\", \\\"-29 x 1\\\", \\\"-46 / 26\\\", \\\"1 x 50\\\", \\\"12 + 18\\\", \\\"8 + 40\\\", \\\"-23 - 34\\\", \\\"-12 x -28\\\", \\\"-19 + -17\\\", \\\"34 + 22\\\", \\\"3 / -32\\\", \\\"0 / -9\\\", \\\"-39 - 37\\\", \\\"-39 + 26\\\"]), [\\\"-39 - 37\\\", \\\"-23 - 34\\\", \\\"-19 + -17\\\", \\\"-29 x 1\\\", \\\"-39 + 26\\\", \\\"-46 / 26\\\", \\\"3 / -32\\\", \\\"-1 / 12\\\", \\\"0 / -9\\\", \\\"7 - 1\\\", \\\"6 + 22\\\", \\\"12 + 18\\\", \\\"21 + 19\\\", \\\"8 + 40\\\", \\\"1 x 50\\\", \\\"34 + 22\\\", \\\"-12 x -28\\\"])\\nTest.assert_equals(sort_by_answer([\\\"11 + -17\\\", \\\"14 / -1\\\", \\\"19 - 48\\\", \\\"-5 - 33\\\", \\\"37 / 3\\\", \\\"-47 + 47\\\", \\\"24 - 37\\\", \\\"-18 / -6\\\", \\\"22 + 3\\\", \\\"41 x 31\\\", \\\"-13 - 1\\\", \\\"-26 + 41\\\", \\\"-12 - 36\\\", \\\"-32 + 7\\\", \\\"-28 / -15\\\", \\\"-50 / -35\\\"]), [\\\"-12 - 36\\\", \\\"-5 - 33\\\", \\\"19 - 48\\\", \\\"-32 + 7\\\", \\\"14 / -1\\\", \\\"-13 - 1\\\", \\\"24 - 37\\\", \\\"11 + -17\\\", \\\"-47 + 47\\\", \\\"-50 / -35\\\", \\\"-28 / -15\\\", \\\"-18 / -6\\\", \\\"37 / 3\\\", \\\"-26 + 41\\\", \\\"22 + 3\\\", \\\"41 x 31\\\"])\\nTest.assert_equals(sort_by_answer([\\\"7 / -29\\\", \\\"-46 x -9\\\", \\\"-44 / 35\\\", \\\"-38 + 31\\\", \\\"-12 + 39\\\", \\\"-35 + 6\\\", \\\"41 + 20\\\", \\\"-24 - 20\\\", \\\"33 - 2\\\", \\\"18 - 14\\\", \\\"-18 + 33\\\", \\\"23 x -14\\\", \\\"-31 - 33\\\", \\\"22 + 31\\\", \\\"-35 + -36\\\", \\\"35 + 25\\\", \\\"-19 / 22\\\"]), [\\\"23 x -14\\\", \\\"-35 + -36\\\", \\\"-31 - 33\\\", \\\"-24 - 20\\\", \\\"-35 + 6\\\", \\\"-38 + 31\\\", \\\"-44 / 35\\\", \\\"-19 / 22\\\", \\\"7 / -29\\\", \\\"18 - 14\\\", \\\"-18 + 33\\\", \\\"-12 + 39\\\", \\\"33 - 2\\\", \\\"22 + 31\\\", \\\"35 + 25\\\", \\\"41 + 20\\\", \\\"-46 x -9\\\"])\\nTest.assert_equals(sort_by_answer([\\\"3 / -10\\\", \\\"36 x -10\\\", \\\"32 - 26\\\", \\\"21 + 49\\\", \\\"11 - 30\\\", \\\"-10 - 38\\\", \\\"-4 - 37\\\", \\\"-8 - 46\\\", \\\"-50 x 31\\\", \\\"29 x 23\\\", \\\"-15 / 9\\\", \\\"-10 + 22\\\", \\\"15 + -36\\\", \\\"40 + -28\\\", \\\"41 x 18\\\", \\\"-36 + -32\\\", \\\"27 / -47\\\", \\\"34 x -4\\\"]), [\\\"-50 x 31\\\", \\\"36 x -10\\\", \\\"34 x -4\\\", \\\"-36 + -32\\\", \\\"-8 - 46\\\", \\\"-10 - 38\\\", \\\"-4 - 37\\\", \\\"15 + -36\\\", \\\"11 - 30\\\", \\\"-15 / 9\\\", \\\"27 / -47\\\", \\\"3 / -10\\\", \\\"32 - 26\\\", \\\"-10 + 22\\\", \\\"40 + -28\\\", \\\"21 + 49\\\", \\\"29 x 23\\\", \\\"41 x 18\\\"])\\nTest.assert_equals(sort_by_answer([\\\"-38 - 19\\\", \\\"1 / -46\\\", \\\"5 x -1\\\", \\\"-43 / -33\\\", \\\"-41 / -33\\\", \\\"-50 x 35\\\", \\\"2 / -26\\\", \\\"29 / -47\\\", \\\"14 - 1\\\", \\\"8 + 44\\\", \\\"6 / -10\\\", \\\"6 - 42\\\", \\\"-4 / 49\\\", \\\"-3 x 46\\\", \\\"13 / -19\\\", \\\"-24 / -35\\\", \\\"9 / -25\\\", \\\"-1 x 42\\\", \\\"36 x -24\\\"]), [\\\"-50 x 35\\\", \\\"36 x -24\\\", \\\"-3 x 46\\\", \\\"-38 - 19\\\", \\\"-1 x 42\\\", \\\"6 - 42\\\", \\\"5 x -1\\\", \\\"13 / -19\\\", \\\"29 / -47\\\", \\\"6 / -10\\\", \\\"9 / -25\\\", \\\"-4 / 49\\\", \\\"2 / -26\\\", \\\"1 / -46\\\", \\\"-24 / -35\\\", \\\"-41 / -33\\\", \\\"-43 / -33\\\", \\\"14 - 1\\\", \\\"8 + 44\\\"])\\nTest.assert_equals(sort_by_answer([\\\"-33 - 13\\\", \\\"21 - 10\\\", \\\"19 x -20\\\", \\\"-39 x -1\\\", \\\"-21 x -13\\\", \\\"5 + 36\\\", \\\"7 - 11\\\", \\\"-19 - 22\\\", \\\"-28 + 49\\\", \\\"11 - 38\\\", \\\"26 x -48\\\", \\\"-22 / 17\\\", \\\"-13 / 33\\\"]), [\\\"26 x -48\\\", \\\"19 x -20\\\", \\\"-33 - 13\\\", \\\"-19 - 22\\\", \\\"11 - 38\\\", \\\"7 - 11\\\", \\\"-22 / 17\\\", \\\"-13 / 33\\\", \\\"21 - 10\\\", \\\"-28 + 49\\\", \\\"-39 x -1\\\", \\\"5 + 36\\\", \\\"-21 x -13\\\"])\\nTest.assert_equals(sort_by_answer([\\\"-31 - 24\\\", \\\"31 x -28\\\", \\\"-41 - 32\\\", \\\"-8 - 32\\\", \\\"-6 / 40\\\", \\\"26 - 0\\\", \\\"-26 x -4\\\", \\\"21 + 11\\\", \\\"2 x -36\\\", \\\"42 x 34\\\", \\\"-34 x 40\\\", \\\"-8 - 33\\\"]), [\\\"-34 x 40\\\", \\\"31 x -28\\\", \\\"-41 - 32\\\", \\\"2 x -36\\\", \\\"-31 - 24\\\", \\\"-8 - 33\\\", \\\"-8 - 32\\\", \\\"-6 / 40\\\", \\\"26 - 0\\\", \\\"21 + 11\\\", \\\"-26 x -4\\\", \\\"42 x 34\\\"])\\nTest.assert_equals(sort_by_answer([\\\"30 x 14\\\"]), [\\\"30 x 14\\\"])\\nTest.assert_equals(sort_by_answer([\\\"-41 + 45\\\", \\\"42 + -48\\\", \\\"34 - 8\\\", \\\"-45 + 41\\\", \\\"-46 + 21\\\"]), [\\\"-46 + 21\\\", \\\"42 + -48\\\", \\\"-45 + 41\\\", \\\"-41 + 45\\\", \\\"34 - 8\\\"])\\nTest.assert_equals(sort_by_answer([\\\"-35 - 48\\\", \\\"21 - 45\\\", \\\"-10 x -13\\\", \\\"-42 + 39\\\", \\\"-49 x -17\\\", \\\"-1 / 20\\\", \\\"-19 x -23\\\", \\\"-25 x -37\\\", \\\"44 + -3\\\", \\\"-27 - 3\\\", \\\"-46 / 31\\\", \\\"-24 - 2\\\", \\\"-15 - 10\\\", \\\"-14 + -31\\\", \\\"-6 / 30\\\", \\\"-43 - 27\\\", \\\"-45 x 39\\\", \\\"-36 / 28\\\", \\\"-23 + -6\\\", \\\"46 + -18\\\"]), [\\\"-45 x 39\\\", \\\"-35 - 48\\\", \\\"-43 - 27\\\", \\\"-14 + -31\\\", \\\"-27 - 3\\\", \\\"-23 + -6\\\", \\\"-24 - 2\\\", \\\"-15 - 10\\\", \\\"21 - 45\\\", \\\"-42 + 39\\\", \\\"-46 / 31\\\", \\\"-36 / 28\\\", \\\"-6 / 30\\\", \\\"-1 / 20\\\", \\\"46 + -18\\\", \\\"44 + -3\\\", \\\"-10 x -13\\\", \\\"-19 x -23\\\", \\\"-49 x -17\\\", \\\"-25 x -37\\\"])\\nTest.assert_equals(sort_by_answer([\\\"-20 / -24\\\", \\\"-25 + -18\\\", \\\"41 - 20\\\", \\\"-19 x -13\\\", \\\"-48 / -18\\\", \\\"-40 - 38\\\", \\\"-33 + -37\\\"]), [\\\"-40 - 38\\\", \\\"-33 + -37\\\", \\\"-25 + -18\\\", \\\"-20 / -24\\\", \\\"-48 / -18\\\", \\\"41 - 20\\\", \\\"-19 x -13\\\"])\\nTest.assert_equals(sort_by_answer([\\\"36 + 46\\\", \\\"-15 - 23\\\", \\\"-40 x -39\\\", \\\"43 / 1\\\", \\\"21 x 20\\\", \\\"49 x -22\\\", \\\"-48 / 12\\\", \\\"-32 x -4\\\", \\\"22 x 49\\\", \\\"34 / -13\\\", \\\"-21 - 15\\\", \\\"-36 + 19\\\", \\\"-42 + 40\\\", \\\"-31 x -12\\\", \\\"37 x 22\\\", \\\"-3 + 33\\\", \\\"19 - 29\\\", \\\"22 / -34\\\", \\\"-19 / 39\\\"]), [\\\"49 x -22\\\", \\\"-15 - 23\\\", \\\"-21 - 15\\\", \\\"-36 + 19\\\", \\\"19 - 29\\\", \\\"-48 / 12\\\", \\\"34 / -13\\\", \\\"-42 + 40\\\", \\\"22 / -34\\\", \\\"-19 / 39\\\", \\\"-3 + 33\\\", \\\"43 / 1\\\", \\\"36 + 46\\\", \\\"-32 x -4\\\", \\\"-31 x -12\\\", \\\"21 x 20\\\", \\\"37 x 22\\\", \\\"22 x 49\\\", \\\"-40 x -39\\\"])\\nTest.assert_equals(sort_by_answer([\\\"31 / 8\\\", \\\"-16 - 28\\\", \\\"49 / -11\\\", \\\"-14 x -50\\\", \\\"-25 - 9\\\", \\\"-30 + 9\\\", \\\"20 x 4\\\", \\\"-48 / 39\\\", \\\"46 x 20\\\", \\\"-25 - 47\\\", \\\"40 + -30\\\", \\\"-37 - 3\\\", \\\"-41 / -3\\\"]), [\\\"-25 - 47\\\", \\\"-16 - 28\\\", \\\"-37 - 3\\\", \\\"-25 - 9\\\", \\\"-30 + 9\\\", \\\"49 / -11\\\", \\\"-48 / 39\\\", \\\"31 / 8\\\", \\\"40 + -30\\\", \\\"-41 / -3\\\", \\\"20 x 4\\\", \\\"-14 x -50\\\", \\\"46 x 20\\\"])\\nTest.assert_equals(sort_by_answer([\\\"22 x 42\\\", \\\"-41 / -8\\\", \\\"-46 - 47\\\", \\\"25 x 50\\\", \\\"21 / -35\\\", \\\"3 + -36\\\", \\\"-9 x 3\\\", \\\"39 - 26\\\", \\\"13 - 24\\\", \\\"-22 - 39\\\", \\\"5 - 40\\\", \\\"-47 + -29\\\", \\\"-17 / -16\\\", \\\"29 / 14\\\", \\\"24 / 6\\\", \\\"-17 - 23\\\"]), [\\\"-46 - 47\\\", \\\"-47 + -29\\\", \\\"-22 - 39\\\", \\\"-17 - 23\\\", \\\"5 - 40\\\", \\\"3 + -36\\\", \\\"-9 x 3\\\", \\\"13 - 24\\\", \\\"21 / -35\\\", \\\"-17 / -16\\\", \\\"29 / 14\\\", \\\"24 / 6\\\", \\\"-41 / -8\\\", \\\"39 - 26\\\", \\\"22 x 42\\\", \\\"25 x 50\\\"])\\nTest.assert_equals(sort_by_answer([\\\"37 x 14\\\", \\\"33 - 16\\\"]), [\\\"33 - 16\\\", \\\"37 x 14\\\"])\\nTest.assert_equals(sort_by_answer([\\\"-15 + 37\\\", \\\"26 / 5\\\", \\\"1 - 8\\\", \\\"-2 - 49\\\", \\\"-41 - 12\\\", \\\"17 - 7\\\", \\\"-15 - 24\\\", \\\"34 - 7\\\", \\\"-9 - 17\\\"]), [\\\"-41 - 12\\\", \\\"-2 - 49\\\", \\\"-15 - 24\\\", \\\"-9 - 17\\\", \\\"1 - 8\\\", \\\"26 / 5\\\", \\\"17 - 7\\\", \\\"-15 + 37\\\", \\\"34 - 7\\\"])\\nTest.assert_equals(sort_by_answer([\\\"30 / 48\\\", \\\"-32 / 18\\\", \\\"-41 - 49\\\", \\\"41 / 13\\\", \\\"0 / 26\\\", \\\"-41 / 38\\\", \\\"-9 + 18\\\", \\\"25 + -1\\\"]), [\\\"-41 - 49\\\", \\\"-32 / 18\\\", \\\"-41 / 38\\\", \\\"0 / 26\\\", \\\"30 / 48\\\", \\\"41 / 13\\\", \\\"-9 + 18\\\", \\\"25 + -1\\\"])\\nTest.assert_equals(sort_by_answer([\\\"20 - 36\\\", \\\"-14 / 6\\\", \\\"4 - 32\\\", \\\"39 x 36\\\", \\\"29 / 32\\\", \\\"-38 / -23\\\", \\\"9 x 30\\\", \\\"-27 + -2\\\", \\\"-8 + -8\\\", \\\"9 + 37\\\"]), [\\\"-27 + -2\\\", \\\"4 - 32\\\", \\\"20 - 36\\\", \\\"-8 + -8\\\", \\\"-14 / 6\\\", \\\"29 / 32\\\", \\\"-38 / -23\\\", \\\"9 + 37\\\", \\\"9 x 30\\\", \\\"39 x 36\\\"])\\nTest.assert_equals(sort_by_answer([\\\"-24 / -16\\\", \\\"22 / -26\\\", \\\"-35 x -17\\\", \\\"31 - 50\\\", \\\"-41 x 50\\\", \\\"-50 + -5\\\", \\\"-47 / 12\\\", \\\"13 / -48\\\", \\\"22 x -3\\\", \\\"27 + 37\\\", \\\"8 - 18\\\", \\\"8 / -48\\\", \\\"-17 / -37\\\", \\\"-18 + -34\\\", \\\"-17 + -22\\\", \\\"-25 x 47\\\", \\\"-4 - 45\\\", \\\"-50 - 5\\\", \\\"-28 x 19\\\", \\\"-23 + -28\\\"]), [\\\"-41 x 50\\\", \\\"-25 x 47\\\", \\\"-28 x 19\\\", \\\"22 x -3\\\", \\\"-50 + -5\\\", \\\"-50 - 5\\\", \\\"-18 + -34\\\", \\\"-23 + -28\\\", \\\"-4 - 45\\\", \\\"-17 + -22\\\", \\\"31 - 50\\\", \\\"8 - 18\\\", \\\"-47 / 12\\\", \\\"22 / -26\\\", \\\"13 / -48\\\", \\\"8 / -48\\\", \\\"-17 / -37\\\", \\\"-24 / -16\\\", \\\"27 + 37\\\", \\\"-35 x -17\\\"])\\nTest.assert_equals(sort_by_answer([\\\"27 - 2\\\", \\\"-34 x -21\\\", \\\"-49 / 41\\\", \\\"-3 / -6\\\", \\\"-11 / 6\\\", \\\"-30 / 29\\\", \\\"4 + 39\\\", \\\"-5 + 43\\\", \\\"12 + -33\\\", \\\"-34 + 3\\\", \\\"-2 - 45\\\", \\\"10 / -36\\\"]), [\\\"-2 - 45\\\", \\\"-34 + 3\\\", \\\"12 + -33\\\", \\\"-11 / 6\\\", \\\"-49 / 41\\\", \\\"-30 / 29\\\", \\\"10 / -36\\\", \\\"-3 / -6\\\", \\\"27 - 2\\\", \\\"-5 + 43\\\", \\\"4 + 39\\\", \\\"-34 x -21\\\"])\\nTest.assert_equals(sort_by_answer([\\\"-28 - 45\\\", \\\"-10 x 33\\\", \\\"0 + -10\\\", \\\"-26 / 38\\\", \\\"-23 - 36\\\", \\\"-7 / -22\\\"]), [\\\"-10 x 33\\\", \\\"-28 - 45\\\", \\\"-23 - 36\\\", \\\"0 + -10\\\", \\\"-26 / 38\\\", \\\"-7 / -22\\\"])\\nTest.assert_equals(sort_by_answer([\\\"-50 / 1\\\", \\\"3 / 32\\\", \\\"-46 + -37\\\", \\\"4 / -4\\\", \\\"-44 - 50\\\", \\\"12 / -19\\\", \\\"-11 / 37\\\", \\\"-7 + 37\\\", \\\"-15 / -10\\\", \\\"-31 + 8\\\"]), [\\\"-44 - 50\\\", \\\"-46 + -37\\\", \\\"-50 / 1\\\", \\\"-31 + 8\\\", \\\"4 / -4\\\", \\\"12 / -19\\\", \\\"-11 / 37\\\", \\\"3 / 32\\\", \\\"-15 / -10\\\", \\\"-7 + 37\\\"])\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,3,1,0,0,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,2,3,2,0,3,3,5,0,2,1,2,3,3,2,1,3,3,1,5,3,2,3,2,2,3,3,3,0,3,2,3,2,1,3,2,2,0,0,2,3,1,3,3,0,0,3,2,2,3,1,3,0,3,2,1,0,3,1,3],\"rators\":[\"PXAcsKkssS2yLyDv2\",\"tAF9Gf6PiGogbZuWs\",\"gb9rvGus2Jv7bjZSs\",\"kBmhcwkCqxiy4GwiZ\",\"PcSuMEQxWQxTiGeWh\",\"AasGs8AeX9Lcb9xJn\",\"C4QntmkYtB89GNtpd\",\"BeFnbPbMnAM2SjBdZ\",\"s5M5RvgqR9BhB9JoC\",\"Yp7uvStL97cC9fKkY\",\"4CFzv558qbGcpQwc4\",\"2fxapKr8XGdNeaKi2\",\"v3fjGuc7Pq4yjFygS\",\"yZvzB3qFb8pkHy4dg\",\"8JyqsSbN2FJXPr3cw\",\"aEm3Wvj2rFYRL8Lrb\",\"iWTjtH9SLKBa9fN7e\",\"mDWNyaaQ9hvPCRzSd\",\"Ryex26xWQvkccedKv\",\"aCNWav8S8Try9RkC6\",\"8PwfYqoDQFThzNtvf\",\"w3A7cBWyAfukk6xEQ\",\"kQH5b8MXJunh84Czq\",\"bB6S2iEZDdaJZEwnF\",\"v9KtC8YLbMWmXiW2H\",\"euPBBaYXyS8RBr9KB\",\"PytNZK9mNiRiZxPrm\",\"i6gWrtfn3kEhfPYjE\",\"Z85ajWfZ4jDPkbvR4\",\"cR3ibTMxLyEdDFCHY\",\"ZNnsMeNkdDhHjSrZb\",\"YRstQuthRkFeBiXug\",\"3Zceb8GudqAG3onG3\",\"EjbDDFRECrzQDkzrX\",\"giHmmxKbE2pvCR2YQ\",\"55RQznnuTGpsj3EXd\",\"gJYuGdkXEWWmGRLzu\",\"n2BRY9X8899dcG8Bw\",\"sbJcFfQjQ59Wfg4Cd\",\"J5T8gZqiZXFuFDTQ7\",\"a777e8chPvJkY3tKa\",\"HF28xZKSLM9wEuqNg\",\"hnyhBFWwNCz9mDfSi\",\"jL4y5fTJAMBjhZmko\",\"pduNK68oazqQTtbLp\",\"hab8YixsXxe4CcZpP\",\"iojEnnY9FsMfYzp6f\",\"KZ2xddpM2f9JRaryB\",\"yjtdwc2AC4jA2RWtn\",\"DEDniTrstQYGounXT\",\"QRv96jmNaYsWkxQEG\",\"w2HhxvSLmDhaGCAjE\",\"gMjAMD8XPK9sbx7eT\",\"xn7uGNKeAwPEkP9oA\",\"J3upzLHuEwXH7Z2hx\",\"DPi9QGLctq2y76KuE\",\"p8qqFdJ3FSk5x9z3G\",\"9bQyb6rW7xfE4vgrR\",\"7ifh8r4gvyYMhKB94\",\"gXTAie79kiw28tx5u\",\"Jqk2uJZZxEv5wZFze\",\"4RsakkyRXyYGwFxEa\",\"buX4mCQhtXCfBjeno\",\"xsDyJstYoBZRS8pJH\",\"qAby4AWXmTNeusvg3\",\"cAP3n5NY64uoMwzRR\",\"oBcs8GLX2ZFLXQy8y\",\"srJ34BaybkQh3qRkM\",\"GGdmhAvxXhqhhibJN\",\"HqmxnQJM66Y57twhn\",\"EfxwqhYdapX3dMQC2\",\"PC3pLs36zNzpRDSuE\",\"d8qtzoLB264iP8tdY\",\"qZQxPQ2kaNKAMesHT\",\"MpfytGFYF77emJ3cT\",\"T6iBEE2jp7f7iEF2P\",\"gKnWjDjwrJh7MK2df\",\"2PufnQcsHsfymufX3\",\"o4ixjQGSaYqA2JoM4\",\"yod5YhKtPqw2GfG9B\",\"nkH3HfJXLMNcBMM79\",\"8sNv5PTHa7XQ8bNqR\",\"ey3CASd6Je5LEJzfB\",\"CHvzhtXnv8HTbPQ56\",\"Ds7L5bksw2QRHjrKL\",\"DQskEvAv5KiJDPtGF\",\"4Lwjr34ypKNQNQCar\",\"5HCu9Ydd86QgHDRNP\",\"9pzFiFK3ANLjQfnr2\",\"BrTDhPJcACL2bsrpJ\",\"Qyfyyw6oC4EHAndzo\"],\"total\":96,\"quality\":[5,5,4,3,3,5,4,5,5,5,5]},\"flags\":0},\"summary\":\"Given a list of math expressions, create a function which sorts the list by their answer. It should be sorted in ascending order.\\n\\nExamples\\nsortbyanswer([\\\"1 + 1\\\", \\\"1 + 7\\\", \\\"1 + 5\\\", \\\"1 + 4\\\"]) ➞ [\\\"1 + 1\\\", \\\"1 + 4\\\", \\\"1 + 5\\\", \\\"1 + 7\\\"]\\n\\nsortbyanswer([\\\"4 - 4\\\", \\\"2 - 2\\\", \\\"5 - 5\\\", \\\"10 - 10\\\"]) ➞ [\\\"4 - 4\\\", \\\"2 - 2\\\", \\\"5 - 5\\\", \\\"10 - 10\\\"]\\n\\nsortbyanswer([\\\"2 + 2\\\", \\\"2 - 2\\\", \\\"2 *\",\"tags\":[\"math\",\"arrays\",\"language_fundamentals\"],\"timestamp\":{\"$date\":1582036143179},\"title\":\"Sort by Answer\",\"quality\":4.454545454545454,\"family\":[{\"_id\":\"Lw3gNjyef2fjDmdvS\",\"language\":\"cpp\"},{\"_id\":\"9BgTpRsJYhX4T4ZXk\",\"language\":\"javascript\"},{\"_id\":\"9zf6scCreprSaQAPq\",\"language\":\"python3\"},{\"_id\":\"3TeC463vzQM8u4Jsp\",\"language\":\"ruby\"}]}}"]