a["{\"msg\":\"result\",\"id\":\"1016\",\"result\":{\"_id\":\"cGqjxKhNqZPZ76zac\",\"author\":\"BijogFc24\",\"authorId\":\"Nb6LYPoQP6KJZt8mz\",\"code\":\"def fire(matrix, coordinates):\\n\\t\",\"difficulty\":1.5196078431372548,\"familyId\":\"3GSP875bLLpgFF4zH\",\"instructions\":\"Remember the game Battleship? Ships are floating in a matrix. You have to fire torpedos at their suspected coordinates, to try and hit them.\\n\\nCreate a function that takes a list of lists (matrix) and a coordinate as a string. If the coordinate contains only water  `\\\".\\\"`, return `\\\"splash\\\"` and if the coordinate contains a ship `\\\"*\\\"`, return `\\\"BOOM\\\"`.\\n\\nInstruction text contains two blank spaces between quotation marks; the code/test does not. See examples below.\\n\\n### Examples\\n```\\n[\\n  [\\\".\\\", \\\".\\\", \\\".\\\", \\\"*\\\", \\\"*\\\"],\\n  [\\\".\\\", \\\"*\\\", \\\".\\\", \\\".\\\", \\\".\\\"],\\n  [\\\".\\\", \\\"*\\\", \\\".\\\", \\\".\\\", \\\".\\\"],\\n  [\\\".\\\", \\\"*\\\", \\\".\\\", \\\".\\\", \\\".\\\"],\\n  [\\\".\\\", \\\".\\\", \\\"*\\\", \\\"*\\\", \\\".\\\"],\\n]\\n\\nfire(matrix, \\\"A1\\\") ➞ \\\"splash\\\"\\n\\nfire(matrix, \\\"A4\\\") ➞ \\\"BOOM\\\"\\n\\nfire(matrix, \\\"D2\\\") ➞ \\\"BOOM\\\"\\n```\\n\\n### Notes\\n- The provided matrix is always a square.\\n- The provided matrix will not be larger than 5 \\\\* 5 ( A1 \\\\* E5).\",\"isHidden\":false,\"lab\":\"Test.assert_equals(fire([\\n\\t[\\\".\\\", \\\".\\\", \\\".\\\", \\\"*\\\", \\\"*\\\"],\\n\\t[\\\".\\\", \\\"*\\\", \\\".\\\", \\\".\\\", \\\".\\\"],\\n\\t[\\\".\\\", \\\"*\\\", \\\".\\\", \\\".\\\", \\\".\\\"],\\n\\t[\\\".\\\", \\\"*\\\", \\\".\\\", \\\".\\\", \\\".\\\"],\\n\\t[\\\".\\\", \\\".\\\", \\\"*\\\", \\\"*\\\", \\\".\\\"],\\n],\\\"A1\\\"), \\\"splash\\\", \\\"A1: target first nested array, first element\\\")\\n\\nTest.assert_equals(fire([\\n\\t[\\\".\\\", \\\".\\\", \\\".\\\", \\\"*\\\", \\\"*\\\"],\\n\\t[\\\".\\\", \\\"*\\\", \\\".\\\", \\\".\\\", \\\".\\\"],\\n\\t[\\\".\\\", \\\"*\\\", \\\".\\\", \\\".\\\", \\\".\\\"],\\n\\t[\\\".\\\", \\\"*\\\", \\\".\\\", \\\".\\\", \\\".\\\"],\\n\\t[\\\".\\\", \\\".\\\", \\\"*\\\", \\\"*\\\", \\\".\\\"],\\n],\\\"C2\\\"), \\\"BOOM\\\", \\\"C2: target third nested array, second element\\\")\\n\\nTest.assert_equals(fire([\\n\\t[\\\".\\\", \\\".\\\"],\\n\\t[\\\"*\\\", \\\"*\\\"]\\n],\\\"B1\\\"), \\\"BOOM\\\")\\n\\nTest.assert_equals(fire([\\n\\t[\\\".\\\", \\\".\\\"],\\n\\t[\\\"*\\\", \\\"*\\\"]\\n],\\\"A2\\\"), \\\"splash\\\")\\n\\nTest.assert_equals(fire([\\n\\t[\\\"*\\\", \\\".\\\", \\\".\\\"],\\n\\t[\\\".\\\", \\\".\\\", \\\".\\\"],\\n\\t[\\\".\\\", \\\"*\\\", \\\"*\\\"],\\n],\\\"C3\\\"), \\\"BOOM\\\")\\n\\nTest.assert_equals(fire([\\n\\t[\\\"*\\\", \\\".\\\", \\\".\\\"],\\n\\t[\\\".\\\", \\\".\\\", \\\".\\\"],\\n\\t[\\\".\\\", \\\"*\\\", \\\"*\\\"],\\n],\\\"A3\\\"), \\\"splash\\\")\\n\\nTest.assert_equals(fire([\\n\\t[\\\".\\\", \\\".\\\", \\\".\\\", \\\".\\\"],\\n\\t[\\\".\\\", \\\"*\\\", \\\"*\\\", \\\".\\\"],\\n\\t[\\\".\\\", \\\".\\\", \\\".\\\", \\\".\\\"],\\n\\t[\\\".\\\", \\\".\\\", \\\".\\\", \\\".\\\"],\\n],\\\"B3\\\"), \\\"BOOM\\\")\\n\\nTest.assert_equals(fire([\\n\\t[\\\".\\\", \\\".\\\", \\\".\\\", \\\".\\\"],\\n\\t[\\\".\\\", \\\"*\\\", \\\"*\\\", \\\".\\\"],\\n\\t[\\\".\\\", \\\".\\\", \\\".\\\", \\\".\\\"],\\n\\t[\\\".\\\", \\\".\\\", \\\".\\\", \\\".\\\"],\\n],\\\"B4\\\"), \\\"splash\\\")\\n\\nTest.assert_equals(fire([\\n\\t[\\\"*\\\"]\\n],\\\"A1\\\"), \\\"BOOM\\\")\\n\\n# Author:Jeroen Ndh\",\"language\":\"python3\",\"summary\":\"Remember the game Battleship? Ships are floating in a matrix. You have to fire torpedos at their suspected coordinates, to try and hit them.\\n\\nCreate a function that takes a list of lists (matrix) and a coordinate as a string. If the coordinate contains only water  \\\".\\\", return \\\"splash\\\" and if the coordinate contains a ship \\\"*\\\", return \\\"BOOM\\\".\\n\\nInstruction text\",\"tags\":[\"games\",\"arrays\",\"language_fundamentals\",\"validation\"],\"timestamp\":{\"$date\":1598581870229},\"title\":\"You Sunk My Battleship!\",\"stats\":{\"completed\":{\"total\":145,\"ratings\":[2,2,2,2,2,0,2,2,0,2,1,1,2,2,2,1,1,1,2,1,1,1,2,2,0,0,2,2,2,2,3,1,2,2,2,0,2,1,1,2,2,2,2,2,3,0,2,0,2,2,3,0,2,2,1,2,2,0,2,0,0,1,2,1,2,2,2,1,2,0,2,2,2,2,0,1,1,1,1,2,2,2,1,2,2,2,2,0,2,2,2,2,2,1,2,2,2,2,1,1,1,2],\"rators\":[\"yjtdwc2AC4jA2RWtn\",\"DEDniTrstQYGounXT\",\"tAF9Gf6PiGogbZuWs\",\"hRiMXDZNAzyPd5tpt\",\"mG8HqKiAQFTdRZthG\",\"cR3ibTMxLyEdDFCHY\",\"Yp7uvStL97cC9fKkY\",\"8PwfYqoDQFThzNtvf\",\"s5M5RvgqR9BhB9JoC\",\"8JyqsSbN2FJXPr3cw\",\"jNvegJWCk5HCtEMbK\",\"aEm3Wvj2rFYRL8Lrb\",\"gb9rvGus2Jv7bjZSs\",\"p8qqFdJ3FSk5x9z3G\",\"oBcs8GLX2ZFLXQy8y\",\"tpxMgkGSHwBjS95Ta\",\"9CoqdidjM9KbeKnHY\",\"7K2GEb5TZRtSpyyGS\",\"Kh3Pc2ZRusurLaMyP\",\"eMuCpJ2spXWkJjWNz\",\"3LiSLdtN58n46NEqg\",\"EMJ6uvBZkie429gdg\",\"k2Eo3wyfZZ6KxvKhN\",\"8BFSTCnoe2QggN64c\",\"gXTAie79kiw28tx5u\",\"w2HhxvSLmDhaGCAjE\",\"NNE5HNRXAkmhrWgyQ\",\"gJYuGdkXEWWmGRLzu\",\"KLmLKaJPfsYxp42p2\",\"H4abACFDH5t8CnnyH\",\"Lfut9z3euZ3odxFcH\",\"cYoWJ8sQE3mdBhJ9D\",\"mxX4rH5ELYkdZ2Mbw\",\"HF28xZKSLM9wEuqNg\",\"yk7DdKgLCzDasPqae\",\"3nied3n8KG8RSNixH\",\"c2u7qfdaYxcyuydtu\",\"QRv96jmNaYsWkxQEG\",\"8WpvgSbQciTQWdd8T\",\"Ecg4m7srYGgZsb4Ck\",\"kNrnnMxhFZztMTBAX\",\"KTFxMsjaW4xgo5ajY\",\"M8dQuMrEpP8Hc3tHN\",\"DPi9QGLctq2y76KuE\",\"2QGRoQn2dRq3scu7k\",\"vSvippNru5pBnJQJn\",\"drdKwcfY8TCL9hoYv\",\"a6fd7AYjdcswcZ8pT\",\"J3upzLHuEwXH7Z2hx\",\"yod5YhKtPqw2GfG9B\",\"kXEfD7xxEyWd7oxxL\",\"dYPkStFnLvAMsHSzZ\",\"cAP3n5NY64uoMwzRR\",\"5HCu9Ydd86QgHDRNP\",\"wRttWTM59y8m5mx7x\",\"dj5AyG5fWP8FdsSmZ\",\"iS5BrkGLzJyPK7nKt\",\"5XiuAqicKD4hBdu63\",\"RGMbFMZXJr7DhcAJy\",\"Wv2vJnEj8ywNmARoF\",\"dBzwBtRjZqB98DJeB\",\"KJCDwGkoXh8qtbbKr\",\"d8qtzoLB264iP8tdY\",\"Jqk2uJZZxEv5wZFze\",\"buX4mCQhtXCfBjeno\",\"5hQnRWiKkhgKJXNMP\",\"J5T8gZqiZXFuFDTQ7\",\"HuNF3xTBzmatyGSTm\",\"R4SjTgDnpigJYDLyL\",\"HqmxnQJM66Y57twhn\",\"5S9nX4rKsnCcnv4Cz\",\"nPRDLtMR8iztbB7Es\",\"eYfPWvZwnJQkHbSTK\",\"GGdmhAvxXhqhhibJN\",\"Ds7L5bksw2QRHjrKL\",\"sHjfbGQGLHE6JR6qu\",\"YcCLwitFMAEJSnxAW\",\"qAby4AWXmTNeusvg3\",\"iojEnnY9FsMfYzp6f\",\"o4ixjQGSaYqA2JoM4\",\"3cF6NXq3ZEwdkgSjb\",\"T6iBEE2jp7f7iEF2P\",\"66a9xX73nmTEuKs9k\",\"CHvzhtXnv8HTbPQ56\",\"BrTDhPJcACL2bsrpJ\",\"AFfw7cGg83uYk2Miy\",\"yr822PZmmiDDenxpB\",\"AJexRBN9cYQmqvYu6\",\"mvJBakQ35CWAnbbEZ\",\"Wpn95NqWxncQrwNgz\",\"AasGs8AeX9Lcb9xJn\",\"9Ly8afdtofp8DXzrt\",\"ey3CASd6Je5LEJzfB\",\"rrSC943cCKNG48sH4\",\"Cc2Cgj4MWXZxsTooC\",\"qzXAMXsHZGT8o5hTA\",\"RoGGD5cpHb4ftdLDv\",\"2PufnQcsHsfymufX3\",\"XD5nmvKQchKezPXhy\",\"Afnps7TJQuS9sipMb\",\"uBXzq8ZaZMYkn4wW5\",\"YA7SDhpgEtsqynvNL\",\"hR7GMiqGap4CzEWSy\",\"pduNK68oazqQTtbLp\",\"utTuvGdmu2sBHWBhQ\",\"StNu7DPyTgEStZsMY\",\"4TmgHkn5vqyHK3sYC\",\"X4rzfxGgxx6CS7Bpz\",\"SGEohskFG6ouMzxAo\",\"T6Rm8mREPMZSftzrC\",\"qM4cFjDW9EBf6BNsA\",\"d9LBRxvADNBB5QJMB\",\"RnY25enEBE8T9P5GS\",\"dzS6WBTMHyFEag6Fp\",\"u5u2YpHXiNgzDNJdX\",\"vAh63eGRwkuJtoP8v\",\"LrcMEPYSk5Mfcrf25\",\"yAouD3PxzED8a4gap\",\"wjc4iejpErBhxWwHo\",\"NzbRqGWspQnWMoDrF\",\"PWgzeK859suojbrRx\",\"2fxapKr8XGdNeaKi2\",\"3iNc8eGCtE9RYM8LC\",\"9pzFiFK3ANLjQfnr2\",\"Wi4H6ayKsNDWWQCG5\",\"5QN8R22z43SrwoHDz\",\"rCrbqMiaGPgHYTNxu\",\"uGuS9YRXW2nj4p6zf\"],\"quality\":[4,4,5,5,5,5,5,5,5,4,5,5,5,4,5,5,5,5,5,5,5,5,5,5,5,4,4,5,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":4.806451612903226,\"family\":[{\"_id\":\"fRvgzR5krQWXKKMqq\",\"language\":\"cpp\"},{\"_id\":\"uQAYSdC3HFtGp3NY8\",\"language\":\"javascript\"},{\"_id\":\"cGqjxKhNqZPZ76zac\",\"language\":\"python3\"},{\"_id\":\"NBo7xcKqiDmzHsceF\",\"language\":\"ruby\"}]}}"]