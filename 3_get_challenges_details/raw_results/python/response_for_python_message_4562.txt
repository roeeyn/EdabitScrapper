a["{\"msg\":\"result\",\"id\":\"996\",\"result\":{\"_id\":\"G2QnBrxvpq9FacFuo\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def possible_path(lst):\\n\\t\",\"difficulty\":1.5061728395061729,\"editorId\":\"PXAcsKkssS2yLyDv2\",\"familyId\":\"QPpY4MLDHgm5mamrJ\",\"instructions\":\"A floor plan is arranged as follows:\\n- Four rooms, which all lead into the hallway.\\n- It's impossible to move between rooms without first going into the hallway.\\n\\n![Room](https://edabit-challenges.s3.amazonaws.com/hdUYysBhbdS.png)\\n\\nCreate a function that validates whether the path between rooms is possible. The hallway will be given as the letter `\\\"H\\\"`.\\n\\n### Examples\\n```\\npossible_path([1, \\\"H\\\", 2, \\\"H\\\", 3, \\\"H\\\", 4]) ➞ True\\n\\npossible_path([\\\"H\\\", 3, \\\"H\\\"]) ➞ True\\n\\npossible_path([1, 2, \\\"H\\\", 3]) ➞ False\\n```\\n\\n### Notes\\n- A route may begin or end in a hallway.\\n- All inputs are either numbers 1-4, or the letter \\\"H\\\".\\n- No rooms will repeat.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(possible_path([1, 'H', 2, 'H', 3, 'H', 4]), True)\\nTest.assert_equals(possible_path(['H', 3, 'H']), True)\\nTest.assert_equals(possible_path(['H']), True)\\nTest.assert_equals(possible_path([3]), True)\\nTest.assert_equals(possible_path([1, 2, 'H', 3]), False)\\nTest.assert_equals(possible_path(['H', 1, 3]), False)\\nTest.assert_equals(possible_path([2, 4, 'H']), False)\\nTest.assert_equals(possible_path([1, 'H', 1, 'H', 1, 'H']), True)\\nTest.assert_equals(possible_path([3, 'H', 2, 'H', 3, 'H', 1]), True)\\nTest.assert_equals(possible_path(['H', 2, 'H', 3, 4, 'H', 1, 'H', 2, 'H']), False)\",\"language\":\"python3\",\"quality\":4.896551724137931,\"stats\":{\"completed\":{\"ratings\":[1,1,1,1,1,1,3,2,2,1,2,2,1,1,0,2,2,2,2,2,0,0,2,5,1,2,2,0,2,1,1,1,1,1,0,2,2,2,0,0,2,2,2,3,2,2,0,2,5,2,2,1,1,2,1,2,0,2,2,0,1,1,2,2,2,2,1,1,0,2,2,1,1,2,2,2,2,1,1,2,2],\"quality\":[5,5,5,5,5,5,5,4,5,5,5,5,4,5,5,5,5,5,5,5,5,4,5,5,5,5,5,5,5],\"rators\":[\"PXAcsKkssS2yLyDv2\",\"BJp2WkwLWGHHB5oQW\",\"iS5BrkGLzJyPK7nKt\",\"XD5nmvKQchKezPXhy\",\"s5M5RvgqR9BhB9JoC\",\"buX4mCQhtXCfBjeno\",\"8PwfYqoDQFThzNtvf\",\"cR3ibTMxLyEdDFCHY\",\"a777e8chPvJkY3tKa\",\"cAP3n5NY64uoMwzRR\",\"srJ34BaybkQh3qRkM\",\"5NGxHLcQ8Af2RJ4TN\",\"QRv96jmNaYsWkxQEG\",\"wRttWTM59y8m5mx7x\",\"zd9FLSzsGz3evKafy\",\"FEYpu9RWysAgW3XnP\",\"2QGRoQn2dRq3scu7k\",\"gXTAie79kiw28tx5u\",\"J5T8gZqiZXFuFDTQ7\",\"8JyqsSbN2FJXPr3cw\",\"oBcs8GLX2ZFLXQy8y\",\"YcCLwitFMAEJSnxAW\",\"GGdmhAvxXhqhhibJN\",\"HF28xZKSLM9wEuqNg\",\"rfyEkETeoS96QNH4e\",\"p8qqFdJ3FSk5x9z3G\",\"gb9rvGus2Jv7bjZSs\",\"Ds7L5bksw2QRHjrKL\",\"w2HhxvSLmDhaGCAjE\",\"gJYuGdkXEWWmGRLzu\",\"Yp7uvStL97cC9fKkY\",\"sHjfbGQGLHE6JR6qu\",\"o4ixjQGSaYqA2JoM4\",\"CHvzhtXnv8HTbPQ56\",\"iojEnnY9FsMfYzp6f\",\"3cF6NXq3ZEwdkgSjb\",\"tAF9Gf6PiGogbZuWs\",\"BrTDhPJcACL2bsrpJ\",\"3nied3n8KG8RSNixH\",\"5HCu9Ydd86QgHDRNP\",\"eMuCpJ2spXWkJjWNz\",\"8BFSTCnoe2QggN64c\",\"yjtdwc2AC4jA2RWtn\",\"qAby4AWXmTNeusvg3\",\"T6iBEE2jp7f7iEF2P\",\"vjWzDJa6NQnuwA3s5\",\"pPpmP7xeJzGgK362R\",\"LWCzZ8mb8gwrRNGfq\",\"wjc4iejpErBhxWwHo\",\"ey3CASd6Je5LEJzfB\",\"KJCDwGkoXh8qtbbKr\",\"J3upzLHuEwXH7Z2hx\",\"H9KZi2cjt4FwH7qog\",\"DEDniTrstQYGounXT\",\"NzbRqGWspQnWMoDrF\",\"66a9xX73nmTEuKs9k\",\"GTKsdeEihE636Le9i\",\"dJzNF59j2p8jWZxiQ\",\"K6MfKMytoJJuSGewP\",\"PC3pLs36zNzpRDSuE\",\"Wpn95NqWxncQrwNgz\",\"c2q7mY39z5JPEMCaM\",\"Cc2Cgj4MWXZxsTooC\",\"2PufnQcsHsfymufX3\",\"DPi9QGLctq2y76KuE\",\"yod5YhKtPqw2GfG9B\",\"NQQzu4wyLWW9faWtK\",\"JhX7jvtpwNyxcc39m\",\"AFfw7cGg83uYk2Miy\",\"5XiuAqicKD4hBdu63\",\"yr822PZmmiDDenxpB\",\"ffSTZyMf4y6K46fMc\",\"mvJBakQ35CWAnbbEZ\",\"AasGs8AeX9Lcb9xJn\",\"HqmxnQJM66Y57twhn\",\"qD2LrwaDrSdiybLKY\",\"aEm3Wvj2rFYRL8Lrb\",\"rrSC943cCKNG48sH4\",\"EfxwqhYdapX3dMQC2\",\"ABoPZydPJsPAHXgiH\",\"qzXAMXsHZGT8o5hTA\",\"RoGGD5cpHb4ftdLDv\",\"ecmhgtfPMoqK8QhH2\",\"Jqk2uJZZxEv5wZFze\",\"YA7SDhpgEtsqynvNL\",\"hR7GMiqGap4CzEWSy\",\"4Lwjr34ypKNQNQCar\",\"X4rzfxGgxx6CS7Bpz\",\"4TmgHkn5vqyHK3sYC\",\"dYPkStFnLvAMsHSzZ\",\"T6Rm8mREPMZSftzrC\",\"dzS6WBTMHyFEag6Fp\",\"NpxzZk8fyyh28rBmw\",\"d9LBRxvADNBB5QJMB\",\"u5u2YpHXiNgzDNJdX\",\"rhS8qXRjZcpDXkwnE\",\"pduNK68oazqQTtbLp\",\"yAouD3PxzED8a4gap\",\"2fxapKr8XGdNeaKi2\",\"mw9464S5dnenqzvpm\",\"5QN8R22z43SrwoHDz\",\"Wi4H6ayKsNDWWQCG5\",\"rCrbqMiaGPgHYTNxu\",\"MKT7khMBGXzA22ykf\",\"pnfwbXY4dgrSKq2Fv\"],\"total\":111},\"flags\":0},\"summary\":\"A floor plan is arranged as follows:\\nFour rooms, which all lead into the hallway.\\nIt's impossible to move between rooms without first going into the hallway.\\n\\nRoom\\n\\nCreate a function that validates whether the path between rooms is possible. The hallway will be given as the letter \\\"H\\\".\\n\\nExamples\\npossible_path([1, \\\"H\\\", 2, \\\"H\\\", 3, \\\"H\\\", 4]) ➞ True\\n\\npossible_path(\",\"tags\":[\"loops\",\"algorithms\",\"validation\"],\"timestamp\":{\"$date\":1612376227224},\"title\":\"Hall Monitor\",\"family\":[{\"_id\":\"p5PsoKc2z8QaYNjNG\",\"language\":\"java\"},{\"_id\":\"igaRcBWdqjik9oY7K\",\"language\":\"javascript\"},{\"_id\":\"gDZmSrySzmMZZRjcc\",\"language\":\"php\"},{\"_id\":\"G2QnBrxvpq9FacFuo\",\"language\":\"python3\"},{\"_id\":\"Yf4vRrs4AMq9KTFo9\",\"language\":\"ruby\"}]}}"]