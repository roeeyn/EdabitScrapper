a["{\"msg\":\"result\",\"id\":\"2096\",\"result\":{\"_id\":\"C4nht9fQk7tN8mkPa\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"def cannot_capture(board):\\n\\t\",\"difficulty\":2.934640522875817,\"familyId\":\"56hxdQkZWT6TQkiQq\",\"instructions\":\"Write a function that returns `True` if the knights are placed on a chessboard such that **no knight can capture another knight**. Here, `0`s represent empty squares and `1`s represent knights.\\n\\n### Examples\\n```\\ncannot_capture([\\n  [0, 0, 0, 1, 0, 0, 0, 0],\\n  [0, 0, 0, 0, 0, 0, 0, 0],\\n  [0, 1, 0, 0, 0, 1, 0, 0],\\n  [0, 0, 0, 0, 1, 0, 1, 0],\\n  [0, 1, 0, 0, 0, 1, 0, 0],\\n  [0, 0, 0, 0, 0, 0, 0, 0],\\n  [0, 1, 0, 0, 0, 0, 0, 1],\\n  [0, 0, 0, 0, 1, 0, 0, 0]\\n]) ➞ True\\n\\ncannot_capture([\\n  [1, 0, 1, 0, 1, 0, 1, 0],\\n  [0, 1, 0, 1, 0, 1, 0, 1],\\n  [0, 0, 0, 0, 1, 0, 1, 0],\\n  [0, 0, 1, 0, 0, 1, 0, 1],\\n  [1, 0, 0, 0, 1, 0, 1, 0],\\n  [0, 0, 0, 0, 0, 1, 0, 1],\\n  [1, 0, 0, 0, 1, 0, 1, 0],\\n  [0, 0, 0, 1, 0, 1, 0, 1]\\n]) ➞ False\\n```\\n\\n### Notes\\n- Knights can be present in any of the 64 squares.\\n- No other pieces except knights exist.\",\"lab\":\"Test.assert_equals(cannot_capture([\\n[0, 0, 0, 1, 0, 0, 0, 0],\\n[0, 0, 0, 0, 0, 0, 0, 0],\\n[0, 1, 0, 0, 0, 1, 0, 0],\\n[0, 0, 0, 0, 1, 0, 1, 0],\\n[0, 1, 0, 0, 0, 1, 0, 0],\\n[0, 0, 0, 0, 0, 0, 0, 0],\\n[0, 1, 0, 0, 0, 0, 0, 1],\\n[0, 0, 0, 0, 1, 0, 0, 0]\\n]), True)\\n\\nTest.assert_equals(cannot_capture([\\n[1, 0, 1, 0, 1, 0, 1, 0],\\n[0, 1, 0, 1, 0, 1, 0, 1],\\n[0, 0, 1, 0, 1, 0, 1, 0],\\n[0, 0, 0, 1, 0, 1, 0, 1],\\n[0, 0, 0, 0, 1, 0, 1, 0],\\n[0, 0, 0, 0, 0, 1, 0, 1],\\n[0, 0, 0, 0, 0, 0, 1, 0],\\n[0, 0, 0, 0, 0, 0, 0, 1]\\n]), True)\\n\\nTest.assert_equals(cannot_capture([\\n[1, 0, 1, 0, 1, 0, 1, 0],\\n[0, 1, 0, 1, 0, 1, 0, 1],\\n[1, 0, 1, 0, 1, 0, 1, 0],\\n[0, 0, 0, 1, 0, 1, 0, 1],\\n[1, 0, 0, 0, 1, 0, 1, 0],\\n[1, 0, 0, 0, 0, 1, 0, 1],\\n[1, 0, 0, 0, 0, 0, 1, 0],\\n[1, 0, 0, 0, 0, 0, 0, 1]\\n]), True)\\n\\nTest.assert_equals(cannot_capture([\\n[1, 0, 1, 0, 1, 0, 1, 0],\\n[0, 1, 0, 1, 0, 1, 0, 1],\\n[1, 0, 1, 0, 1, 0, 1, 0],\\n[0, 0, 0, 1, 0, 1, 0, 1],\\n[1, 0, 0, 0, 1, 0, 1, 0],\\n[0, 0, 0, 0, 0, 1, 0, 1],\\n[1, 0, 0, 0, 1, 0, 1, 0],\\n[0, 0, 0, 1, 0, 1, 0, 1]\\n]), True)\\n\\nTest.assert_equals(cannot_capture([\\n[1, 0, 1, 0, 1, 0, 1, 0],\\n[0, 1, 0, 1, 0, 1, 0, 1],\\n[1, 0, 1, 0, 1, 0, 1, 0],\\n[0, 0, 0, 1, 0, 1, 0, 1],\\n[1, 0, 0, 0, 1, 0, 1, 0],\\n[0, 0, 0, 0, 0, 1, 0, 1],\\n[1, 0, 1, 0, 1, 0, 1, 0],\\n[0, 0, 0, 1, 0, 0, 0, 1]\\n]), True)\\n\\nTest.assert_equals(cannot_capture([\\n[1, 0, 1, 0, 1, 0, 1, 0],\\n[0, 1, 0, 1, 0, 1, 0, 1],\\n[1, 0, 1, 0, 1, 0, 1, 0],\\n[0, 0, 0, 1, 0, 1, 0, 1],\\n[1, 0, 0, 0, 1, 0, 1, 0],\\n[0, 0, 0, 0, 0, 1, 0, 1],\\n[1, 0, 1, 0, 1, 0, 1, 0],\\n[1, 0, 0, 1, 0, 0, 0, 1]\\n]), False)\\n\\nTest.assert_equals(cannot_capture([\\n[1, 0, 1, 0, 1, 0, 1, 0],\\n[0, 1, 0, 1, 0, 1, 0, 1],\\n[1, 0, 1, 0, 1, 1, 1, 0],\\n[0, 0, 0, 1, 0, 1, 0, 1],\\n[1, 0, 0, 0, 1, 0, 1, 0],\\n[0, 0, 0, 0, 0, 1, 0, 1],\\n[1, 0, 1, 0, 1, 0, 1, 0],\\n[0, 0, 0, 1, 0, 0, 0, 1]\\n]), False)\\n\\nTest.assert_equals(cannot_capture([\\n[1, 0, 1, 0, 1, 0, 1, 0],\\n[0, 1, 0, 1, 0, 1, 0, 1],\\n[0, 0, 0, 0, 1, 0, 1, 0],\\n[0, 0, 1, 0, 0, 1, 0, 1],\\n[1, 0, 0, 0, 1, 0, 1, 0],\\n[0, 0, 0, 0, 0, 1, 0, 1],\\n[1, 0, 0, 0, 1, 0, 1, 0],\\n[0, 0, 0, 1, 0, 1, 0, 1]\\n]), False)\\n\\nTest.assert_equals(cannot_capture([\\n[1, 0, 1, 0, 1, 0, 1, 0],\\n[0, 1, 0, 1, 0, 1, 0, 1],\\n[0, 0, 0, 0, 1, 1, 1, 0],\\n[0, 0, 0, 0, 0, 0, 0, 1],\\n[1, 0, 0, 0, 1, 0, 1, 0],\\n[0, 0, 0, 0, 0, 1, 0, 1],\\n[1, 0, 0, 0, 1, 0, 1, 0],\\n[0, 0, 0, 1, 0, 1, 0, 1]\\n]), False)\\n\\nTest.assert_equals(cannot_capture([\\n[1, 0, 1, 0, 1, 0, 1, 0],\\n[0, 1, 0, 1, 0, 1, 0, 1],\\n[0, 0, 0, 0, 1, 0, 1, 0],\\n[0, 0, 0, 0, 0, 0, 0, 1],\\n[1, 0, 0, 0, 1, 0, 1, 0],\\n[0, 0, 0, 0, 0, 1, 0, 1],\\n[1, 0, 0, 0, 1, 0, 1, 0],\\n[0, 0, 1, 1, 0, 1, 0, 1]\\n]), False)\\n\\nTest.assert_equals(cannot_capture([\\n[0, 0, 0, 1, 0, 0, 0, 0],\\n[0, 0, 0, 0, 0, 0, 0, 0],\\n[0, 1, 0, 0, 0, 1, 1, 0],\\n[0, 0, 0, 0, 1, 0, 1, 0],\\n[0, 1, 0, 0, 0, 1, 0, 0],\\n[0, 0, 0, 0, 0, 0, 0, 0],\\n[0, 1, 0, 0, 0, 0, 0, 1],\\n[0, 0, 0, 0, 1, 0, 0, 0]\\n]), False)\",\"language\":\"python3\",\"summary\":\"Write a function that returns True if the knights are placed on a chessboard such that no knight can capture another knight. Here, 0s represent empty squares and 1s represent knights.\\n\\nExamples\\ncannot_capture([\\n  [0, 0, 0, 1, 0, 0, 0, 0],\\n  [0, 0, 0, 0, 0, 0, 0, 0],\\n  [0, 1, 0, 0, 0, 1, 0, 0],\\n  [0, 0, 0, 0, 1, 0, 1, 0],\\n  [0, 1, 0, 0, 0, 1, 0, 0],\\n  [0, 0, 0,\",\"tags\":[\"validation\",\"arrays\",\"games\"],\"timestamp\":{\"$date\":1556485751308},\"title\":\"Knights on a Board\",\"stats\":{\"completed\":{\"total\":156,\"ratings\":[3,3,3,3,3,3,3,3,3,3,3,2,4,2,3,3,5,5,0,5,5,5,4,5,2,2,2,3,3,3,5,2,0,3,4,2,4,0,4,3,0,2,3,2,4,4,3,3,4,1,5,5,5,3,4,5,3,5,2,2,2,2,2,3,4,0,5,3,5,3,3,3,4,5,5,4,0,5,2,4,1,5,1,1,3,5,2,3,4,3,5,2,4,4,4,5,3,2,4,4,1,2,1,2,3,3,2,2,3,2,2,5,3,3,2,4,2,2,3,2,4,0,2,4,1,2,3,2,2,0,4,3,4,1,2,3,1,3,2,3,4,5,1,4,4,3,3,2,4,2,3,2,0],\"rators\":[\"mNMQvcxKSSvqqMYCH\",\"tAF9Gf6PiGogbZuWs\",\"T3ZAuoMrJjvZwN55B\",\"yZvzB3qFb8pkHy4dg\",\"aWFssoL37daSzqM9j\",\"8JyqsSbN2FJXPr3cw\",\"gb9rvGus2Jv7bjZSs\",\"MXjxGML2X75x64vJo\",\"Q22ybHcQ9Rvfg6Muv\",\"qr28t3MiuxdsqWcbo\",\"3kYa64fwxtCZLGFve\",\"rdNqeKKCwqmELuhvJ\",\"Davb2r7AbFrdGMhXi\",\"7g3vZaQXhLpxrajyg\",\"QaE2QnnBbzdiExxPH\",\"AYaEkTWLMmfzpwejr\",\"KoPtgfPyb2MEeM79W\",\"tAzKDfb3oztBwzNo3\",\"nLpdvK7EcahCqNe8X\",\"RbRrxRryTKPFhxroj\",\"MzN9N2Z9AxjTv3sB5\",\"cdvwuSNJYydmwJu3D\",\"u5r7mFQ2Swy3aXj2F\",\"PcbSbkQX8hMxB8Leh\",\"pYgorHTLHPChinFCm\",\"iHKLz8WKC8wnqCKQY\",\"QKYi6pYeaYFovNHX4\",\"5e83ejbgSSY2p9SHr\",\"xf2cbScdssp52NGNu\",\"BFNm9gacwba9KyLFW\",\"BFmdJRbRoamync8kM\",\"YAsRhvoARsuNigs6L\",\"mKK6Z6WEKKJ2W2ZNT\",\"Tin42WiZ4JTDEnS7b\",\"s5M5RvgqR9BhB9JoC\",\"HqmxnQJM66Y57twhn\",\"5kc2gqHdyka73AyKj\",\"kpiQQzE6CcFHfauGb\",\"aCNWav8S8Try9RkC6\",\"W6Q99aAdkbkMqYwka\",\"azHSATBuuQ5wz9bvB\",\"6W2GSzrYjMD9ANBFY\",\"8PwfYqoDQFThzNtvf\",\"NAz2Cft7NsfomqNHv\",\"RBr66Dmsyt2bcpm9x\",\"3LiSLdtN58n46NEqg\",\"bLpgu8xTdpDPFSAsM\",\"GiK8LZt3JRKNJjj5W\",\"qJZsi5rhRnWA38FbA\",\"FSHzqc7ui3njdBXgT\",\"bEzNQyMN2gMp5osYJ\",\"ydEdzuCCZt4yny9Rq\",\"REGfLPcYRumHsPMik\",\"HvekvpLWKGPr2Sxun\",\"yLpj24ZLhvy2EvT4E\",\"SGhPxX5bHGL8zZqtt\",\"tAeWvXWeHNcrwbTPk\",\"BequD5k9EfGgz8XZ6\",\"ySRnygsLwGGsmZhfa\",\"Kn9yjT4NvcnnvjCrL\",\"eHcgvkTGsH7ZziqBo\",\"hhDLeh3f2FNhpLSry\",\"jGrqoesacgEqRRNad\",\"4LoNMTudMYpfL26yr\",\"hqiTnCHZxYu2nvNK5\",\"g2eJRHbFyurijnyEn\",\"kDq2TnPdy7hGKdAD5\",\"QAzqQXEy5i9LecLwA\",\"2rbhQRJ7y5m6nsPwx\",\"9ANbzDE2n59SrX2iA\",\"CByQtwf9BqB8jfEC3\",\"fdo4pRvnDcqAttvYu\",\"MZAaNetbxGT3v8eDp\",\"XfSQvXPPEo7rjG57K\",\"DEMZvkgty7S2teDRA\",\"SuJeLnhfR3smGu3WZ\",\"DhQQ6fA4KS7Mof2b7\",\"CuY5BaTCcu7Mp9tDu\",\"ftHKkYbL2GGNYscuc\",\"X4dSk5nKvacduox88\",\"aEm3Wvj2rFYRL8Lrb\",\"AJwBauGHyrbqgDYce\",\"mS2oaNzM5vCgLjYu5\",\"pQKacoMccp6HYmWZ8\",\"tw5p3m3Dump7FwYN7\",\"Ti5BF4jnruwNNzHY8\",\"bDpmwo4vm9jHeZAPk\",\"qE2viwrEkeM95f3Ts\",\"Lw8oRc5SERsuntXMo\",\"SNiXMrGpyjDGPaaeG\",\"5nY48krepaT4a4QTN\",\"Q7Ptk6h3FMyjctax3\",\"nNMTJtD5DN2Htnvst\",\"pHpGCimfadYznq5Wb\",\"2iFe3EHEH2YdhSKrs\",\"23oi2a3vQwhtLEbSj\",\"9uZpgAtSuPZ7W7DL6\",\"8Tikd2acFcCBT8YeQ\",\"f4T9LeMPCsAfbY68N\",\"XtRDtnH9Xu5yQRN5j\",\"wPxeazAYct9gG2eRM\",\"xfPT5fiAHtJZy2pwe\",\"mCCS83crw4GFEhnif\",\"FHSJnAYTbcsKFgeQa\",\"imBtErREGoyK93EBs\",\"RiwS9QTek4bMS3wtA\",\"mhwJATYEcAEQ8Bmeb\",\"NCgqvvXaGksrMDiw7\",\"YsAz93yZw8KKPupKv\",\"ZatR59KfT8s4Z3JTQ\",\"DwetpbChQM4r6Gwah\",\"6E8GoWCrHpDvHZjWG\",\"Ccw6oYCEjrcrWBnH7\",\"vTfyrr4pGddp8rbXc\",\"AasGs8AeX9Lcb9xJn\",\"Jqk2uJZZxEv5wZFze\",\"KXnxMWSphrE8hsvyG\",\"7djAghy9fBhtLnKw3\",\"HvZKAceLrTy9rYt5m\",\"Kg94pDSdZJ2wSkMcY\",\"tDdqXfMYgqZ26Lwvg\",\"Yp7uvStL97cC9fKkY\",\"ZNnsMeNkdDhHjSrZb\",\"fznzd3qnvtbFkkizz\",\"WMMTB6LTyPLjZQjXA\",\"W5TajitmCyxz87zAC\",\"2Dshb8tZeq8phPAcC\",\"CyQx8j6fu6aZSTBpB\",\"j6i4xNzwPLFKTf5CK\",\"yGGWB7LzShM3K46tt\",\"xn7uGNKeAwPEkP9oA\",\"x4dfavjLEcrvAF3QQ\",\"44dAzThMuyGZ5StXB\",\"HF28xZKSLM9wEuqNg\",\"iS5BrkGLzJyPK7nKt\",\"a777e8chPvJkY3tKa\",\"8sNv5PTHa7XQ8bNqR\",\"iojEnnY9FsMfYzp6f\",\"J3upzLHuEwXH7Z2hx\",\"gJYuGdkXEWWmGRLzu\",\"yjtdwc2AC4jA2RWtn\",\"PytNZK9mNiRiZxPrm\",\"YMoaoPSBBMzMgweJb\",\"MpfytGFYF77emJ3cT\",\"GTKsdeEihE636Le9i\",\"2PufnQcsHsfymufX3\",\"gXTAie79kiw28tx5u\",\"T6iBEE2jp7f7iEF2P\"],\"quality\":[4,5,5,4]},\"tests\":{\"score\":0,\"rators\":[\"mNMQvcxKSSvqqMYCH\"]},\"instructions\":{\"score\":0,\"rators\":[\"mNMQvcxKSSvqqMYCH\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.5,\"family\":[{\"_id\":\"ZKWXigCFnEFf7tAad\",\"language\":\"cpp\"},{\"_id\":\"EwAXuk4urzK8WkRGw\",\"language\":\"csharp\"},{\"_id\":\"Ebw8nnRzgFcWgY5p8\",\"language\":\"java\"},{\"_id\":\"YFkyAh5sm9Guqth85\",\"language\":\"javascript\"},{\"_id\":\"grT2qADBtQaby7qYb\",\"language\":\"php\"},{\"_id\":\"C4nht9fQk7tN8mkPa\",\"language\":\"python3\"},{\"_id\":\"CSKhET7BW6v2D4EYv\",\"language\":\"ruby\"}]}}"]