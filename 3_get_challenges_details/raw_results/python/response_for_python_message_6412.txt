a["{\"msg\":\"result\",\"id\":\"1915\",\"result\":{\"_id\":\"dKLJ4uvssAJwRDtCo\",\"author\":\"Alessandro Manicone\",\"authorId\":\"AasGs8AeX9Lcb9xJn\",\"code\":\"def vending_machine(products, money, product_number):\\n\\t\",\"difficulty\":2.6545454545454548,\"familyId\":\"fifMBbQ6gZheCcSyP\",\"instructions\":\"Your task is to create a function that simulates a vending machine.\\n\\nGiven an amount of `money` (in cents **¢** to make it simpler) and a `product_number`, the vending machine should output the correct product name and give back the correct amount of change.\\n\\nThe coins used for the change are the following: `[500, 200, 100, 50, 20, 10]`\\n\\nThe return value is a dictionary with 2 properties:\\n\\n- `product`: the product name that the user selected.\\n- `change`: an array of coins (can be empty, must be sorted in descending order).\\n\\n### Examples\\n```\\nvending_machine(products, 200, 7) ➞ { \\\"product\\\": \\\"Crackers\\\", \\\"change\\\": [ 50, 20, 10 ] }\\n\\nvending_machine(products, 500, 0) ➞ \\\"Enter a valid product number\\\"\\n\\nvending_machine(products, 90, 1) ➞ \\\"Not enough money for this product\\\"\\n```\\n\\n### Notes\\n- The products are fixed and you can find them in the **Tests** tab.\\n- If `product_number` is invalid (out of range) you should return the *string*: \\\"Enter a valid product number\\\".\\n- If `money` is not enough to buy a certain product you should return the *string*: \\\"Not enough money for this product\\\".\\n- If there's no change, return an empty array as the `change`.\",\"isHidden\":false,\"lab\":\"# Products available\\nproducts = [\\n  { 'number': 1, 'price': 100, 'name': 'Orange juice' },\\n  { 'number': 2, 'price': 200, 'name': 'Soda' },\\n  { 'number': 3, 'price': 150, 'name': 'Chocolate snack' },\\n  { 'number': 4, 'price': 250, 'name': 'Cookies' },\\n  { 'number': 5, 'price': 180, 'name': 'Gummy bears' },\\n  { 'number': 6, 'price': 500, 'name': 'Condoms' },\\n  { 'number': 7, 'price': 120, 'name': 'Crackers' },\\n  { 'number': 8, 'price': 220, 'name': 'Potato chips' },\\n  { 'number': 9, 'price': 80,  'name': 'Small snack' }\\n]\\n\\n# Tests\\nTest.assert_equals(vending_machine(products, 500, 8), { 'product': 'Potato chips', 'change': [ 200, 50, 20, 10 ] })\\nTest.assert_equals(vending_machine(products, 500, 1), { 'product': 'Orange juice', 'change': [ 200, 200 ] })\\nTest.assert_equals(vending_machine(products, 200, 7), { 'product': 'Crackers', 'change': [ 50, 20, 10 ] })\\nTest.assert_equals(vending_machine(products, 100, 9), { 'product': 'Small snack', 'change': [ 20 ] })\\nTest.assert_equals(vending_machine(products, 1000, 6), { 'product': 'Condoms', 'change': [ 500 ] })\\nTest.assert_equals(vending_machine(products, 250, 4), { 'product': 'Cookies', 'change': [] })\\nTest.assert_equals(vending_machine(products, 500, 0), 'Enter a valid product number')\\nTest.assert_equals(vending_machine(products, 90, 1), 'Not enough money for this product')\\nTest.assert_equals(vending_machine(products, 0, 0), 'Enter a valid product number')\\n\\n# Translated from JavaScript\\n# Originally posted by Pustur\",\"language\":\"python3\",\"summary\":\"Your task is to create a function that simulates a vending machine.\\n\\nGiven an amount of money (in cents ¢ to make it simpler) and a product_number, the vending machine should output the correct product name and give back the correct amount of change.\\n\\nThe coins used for the change are the following: [500, 200, 100, 50, 20, 10]\\n\\nThe return value is a dictionary\",\"tags\":[\"arrays\",\"objects\",\"recursion\",\"loops\",\"interview\"],\"timestamp\":{\"$date\":1587004571823},\"title\":\"Vending Machine\",\"stats\":{\"completed\":{\"total\":131,\"ratings\":[2,2,2,2,2,3,2,2,3,2,2,2,3,2,2,2,3,3,3,3,3,3,3,2,3,3,4,3,1,3,2,2,2,2,3,4,2,4,4,4,4,4,0,4,3,4,3,2,4,2,2,2,3,4,4,3,4,4,3,1,3,4,4,2,2,4,3,3,2,3,2,2,4,2,2,3,3,4,3,4,0,3,4,3,2,5,5,3,2,3,2,2,1,3,3,3,1,3,2,0,0,1,2,3,0,2,2,4,3,2],\"rators\":[\"AasGs8AeX9Lcb9xJn\",\"aEm3Wvj2rFYRL8Lrb\",\"yZvzB3qFb8pkHy4dg\",\"8PwfYqoDQFThzNtvf\",\"8JyqsSbN2FJXPr3cw\",\"JQ5uoxA4WZgN6HyJk\",\"JQkZXeaLy3giT5p6W\",\"YRstQuthRkFeBiXug\",\"s5M5RvgqR9BhB9JoC\",\"2fxapKr8XGdNeaKi2\",\"ZNnsMeNkdDhHjSrZb\",\"gb9rvGus2Jv7bjZSs\",\"CMdKkCoZdTpucBeTP\",\"wT5gGgvjKc5wz59AQ\",\"tAF9Gf6PiGogbZuWs\",\"zrKW9g4QaF555zmgJ\",\"ywk3XGvcmpTgRxwZa\",\"wTjeN46qZZoGkXgJn\",\"mDWNyaaQ9hvPCRzSd\",\"mq2W9FwPgf4w75dZi\",\"TQhN6YPSfQiiuCE68\",\"fznzd3qnvtbFkkizz\",\"eHhL37DG7oW3vTcg7\",\"Lw8oRc5SERsuntXMo\",\"3ECpdeExhBmkYXtba\",\"tsECkG48snwNTPD3m\",\"yYxPzFqBgtQ9fsyHM\",\"vgGr9jrC7rBWsbi3E\",\"uzwYcrm8PvfHZR7YF\",\"NzuLkRixvf2uwBcZm\",\"ZRxAkXjTCdyQTdSDw\",\"pDvFWMCD9fQwoBPcu\",\"n2BRY9X8899dcG8Bw\",\"kch5ukGsAcRJynWQd\",\"diaiQeWEE8GbMnKue\",\"gJYuGdkXEWWmGRLzu\",\"FgkYtHLxeD8pETJ8T\",\"W5TajitmCyxz87zAC\",\"Phd2FdPjo9BhBfvKh\",\"RErqK2yM94wYyD2hk\",\"PtaiHYXnMwb2rWqQW\",\"Kf2z6kZ7hfzg2YyEJ\",\"CFycnoJ4dioCrmqg5\",\"ekQh3jzgGLsEMbKo3\",\"fxocBHt9D8JM8huFe\",\"qeqqjviYA9R7uQZEW\",\"Sj4iamMmNvxwWJBiF\",\"f2BoqyCpgnmjEjLqx\",\"yro9W5sMuBASbki8p\",\"nLpdvK7EcahCqNe8X\",\"6428wKHtwKkFdvBs5\",\"sz8ufn9i8zeiGWpAy\",\"TzfFXjsN3n6kkFZSY\",\"iSY8Jq5PQ8wBiWpiw\",\"xn7uGNKeAwPEkP9oA\",\"ayMh5YRnAXsxsk7bg\",\"AGMQqooexrFXgMnET\",\"JrADeNRHRTrvc98ry\",\"Ecg4m7srYGgZsb4Ck\",\"SGhPxX5bHGL8zZqtt\",\"PKhDHWStj5f8RywEu\",\"Nfsj4eNFDjaFa39ga\",\"Wv2vJnEj8ywNmARoF\",\"c7uBxu2rgY77H5d79\",\"tddGZHLhgeGnrYDHY\",\"BrTDhPJcACL2bsrpJ\",\"zZDaXBxMzTCBhNkgL\",\"8sNv5PTHa7XQ8bNqR\",\"CLypXaZksY99mpRCm\",\"y7rfKEhb3Zaj5WrPA\",\"mis4LiWDy7Ceupn3c\",\"x4dfavjLEcrvAF3QQ\",\"diPN886H2QkKbtzF2\",\"oZiGwL535nJ5ZMJr7\",\"DPi9QGLctq2y76KuE\",\"yjtdwc2AC4jA2RWtn\",\"p8qqFdJ3FSk5x9z3G\",\"HF28xZKSLM9wEuqNg\",\"w2HhxvSLmDhaGCAjE\",\"ouD6cs7ZdxzPfKRKt\",\"ygDJ7HEzRoJZyPEF4\",\"fJkqxLANsv29r65TN\",\"fjo64MWRERriEhtqc\",\"p2TdSD7n7LijR3xu9\",\"tEymgSzQSfcoYh9Hg\",\"tkdRHAExhDq8ryDJT\",\"4J4T8DigvcevGWRRh\",\"5pwxBnqW6Ci5vTcJm\",\"yTtSCvGPyYna6JuRC\",\"iS5BrkGLzJyPK7nKt\",\"GiN5ZMCzNCqBryTYz\",\"DQskEvAv5KiJDPtGF\",\"mAtnSZ7HfvMANcRoj\",\"wdpjLRRrjkvrQd4hb\",\"NWDdF99a5H7HDaza8\",\"J3upzLHuEwXH7Z2hx\",\"iojEnnY9FsMfYzp6f\",\"Si6jT3DnRMXYd27k9\",\"AQSqD9oNv2uPfxZCR\",\"LQxof8pGabGuWP7Gn\",\"GTKsdeEihE636Le9i\",\"a5syAeXax29CDsQwo\",\"38txvwyNnhqg6WuxD\",\"ZwHtR5Fyoz3aoH7kZ\",\"MpfytGFYF77emJ3cT\",\"2PufnQcsHsfymufX3\",\"qNszsXx28cTxvGSNj\",\"5YXG48dcdfYFWRpAi\",\"Ep6fHYmKXXFXWmWiJ\",\"aA3x7iHuvm9JqXdr2\",\"974cv448kw6Wu2JF6\",\"T6iBEE2jp7f7iEF2P\",\"gKnWjDjwrJh7MK2df\",\"nkH3HfJXLMNcBMM79\",\"ZwdgpkCfN5LA4jDnE\",\"wKuNwxCtKvMRw9mnc\",\"af94rigDyYDaT43Lm\",\"fbr22rabEJMfBp7vD\",\"oBcs8GLX2ZFLXQy8y\",\"6eRm9ycMujNDWoTyL\",\"5e98j4ejZBfhxDwxB\",\"pnzfNatg3P32mMYQY\"],\"quality\":[5,5,3,5,5,4,4,5,5,4,4,5,5,5,4,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":4.588235294117647,\"family\":[{\"_id\":\"PYXbvQh9W3c9i72xx\",\"language\":\"javascript\"},{\"_id\":\"dKLJ4uvssAJwRDtCo\",\"language\":\"python3\"}]}}"]