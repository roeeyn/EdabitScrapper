a["{\"msg\":\"result\",\"id\":\"2159\",\"result\":{\"_id\":\"fbqmyDjCigbYhWLJa\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"def split_into_buckets(phrase, n):\\n\\t\",\"difficulty\":3.282258064516129,\"familyId\":\"Mku3TSW2u6dufvP8A\",\"instructions\":\"Write a function that divides a phrase into word buckets, with each bucket containing `n` or fewer characters. Only include full words inside each bucket.\\n\\n### Examples\\n```\\nsplit_into_buckets(\\\"she sells sea shells by the sea\\\", 10)\\n➞ [\\\"she sells\\\", \\\"sea shells\\\", \\\"by the sea\\\"]\\n\\nsplit_into_buckets(\\\"the mouse jumped over the cheese\\\", 7)\\n➞ [\\\"the\\\", \\\"mouse\\\", \\\"jumped\\\", \\\"over\\\", \\\"the\\\", \\\"cheese\\\"]\\n\\nsplit_into_buckets(\\\"fairy dust coated the air\\\", 20)\\n➞ [\\\"fairy dust coated\\\", \\\"the air\\\"]\\n\\nsplit_into_buckets(\\\"a b c d e\\\", 2)\\n➞ [\\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"d\\\", \\\"e\\\"]\\n```\\n\\n### Notes\\n- Spaces count as one character.\\n- Trim beginning and end spaces for each word bucket (see final example).\\n- If buckets are too small to hold a single word, return an empty list: `[]`\\n- The final goal isn't to return just the words with a length equal (or lower) to the given `n`, but to return the entire given phrase bucketized (if possible). So, for the specific case of \\\"by\\\" the only word with a proper length, the phrase can't be bucketized, and the returned list has to be empty.\",\"lab\":\"Test.assert_equals(split_into_buckets(\\\"she sells sea shells by the sea\\\", 2), [])\\nTest.assert_equals(split_into_buckets(\\\"ab bc cd\\\", 1), [])\\nTest.assert_equals(split_into_buckets(\\\"she sells sea shells by the sea\\\", 10), [\\\"she sells\\\", \\\"sea shells\\\", \\\"by the sea\\\"])\\nTest.assert_equals(split_into_buckets(\\\"the mouse jumped over the cheese\\\", 7), [\\\"the\\\", \\\"mouse\\\", \\\"jumped\\\", \\\"over\\\", \\\"the\\\", \\\"cheese\\\"])\\nTest.assert_equals(split_into_buckets(\\\"fairy dust coated the air\\\", 20), [\\\"fairy dust coated\\\", \\\"the air\\\"])\\nTest.assert_equals(split_into_buckets(\\\"do the hokey pokey\\\", 6), [\\\"do the\\\", \\\"hokey\\\", \\\"pokey\\\"])\\nTest.assert_equals(split_into_buckets(\\\"do the hokey pokey\\\", 12), [\\\"do the hokey\\\", \\\"pokey\\\"])\\nTest.assert_equals(split_into_buckets(\\\"rich magnificent trees dotted the landscape\\\", 12), [\\\"rich\\\", \\\"magnificent\\\", \\\"trees dotted\\\", \\\"the\\\", \\\"landscape\\\"])\\nTest.assert_equals(split_into_buckets(\\\"rich magnificent trees dotted the landscape\\\", 15), [\\\"rich\\\", \\\"magnificent\\\", \\\"trees dotted\\\", \\\"the landscape\\\"])\\nTest.assert_equals(split_into_buckets(\\\"rich magnificent trees dotted the landscape\\\", 18), [\\\"rich magnificent\\\", \\\"trees dotted the\\\", \\\"landscape\\\"])\\nTest.assert_equals(split_into_buckets(\\\"rich magnificent trees dotted the landscape\\\", 22), [\\\"rich magnificent trees\\\", \\\"dotted the landscape\\\"])\\nTest.assert_equals(split_into_buckets(\\\"rich magnificent trees dotted the landscape\\\", 40), [\\\"rich magnificent trees dotted the\\\", \\\"landscape\\\"])\\nTest.assert_equals(split_into_buckets(\\\"rich magnificent trees dotted the landscape\\\", 43), [\\\"rich magnificent trees dotted the landscape\\\"])\\nTest.assert_equals(split_into_buckets(\\\"beep bo bee bop bee bo bo bop\\\", 6), [\\\"beep\\\", \\\"bo bee\\\", \\\"bop\\\", \\\"bee bo\\\", \\\"bo bop\\\"])\\nTest.assert_equals(split_into_buckets(\\\"beep bo bee bop bee bo bo bop\\\", 10), [\\\"beep bo\\\", \\\"bee bop\\\", \\\"bee bo bo\\\", \\\"bop\\\"])\\nTest.assert_equals(split_into_buckets(\\\"a b c d e\\\", 3), [\\\"a b\\\", \\\"c d\\\", \\\"e\\\"])\\nTest.assert_equals(split_into_buckets(\\\"a b c d e\\\", 2), [\\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"d\\\", \\\"e\\\"])\\nTest.assert_equals(split_into_buckets(\\\"a b c d e\\\", 1), [\\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"d\\\", \\\"e\\\"])\",\"language\":\"python3\",\"summary\":\"Write a function that divides a phrase into word buckets, with each bucket containing n or fewer characters. Only include full words inside each bucket.\\n\\nExamples\\nsplitintobuckets(\\\"she sells sea shells by the sea\\\", 10)\\n➞ [\\\"she sells\\\", \\\"sea shells\\\", \\\"by the sea\\\"]\\n\\nsplitintobuckets(\\\"the mouse jumped over the cheese\\\", 7)\\n➞ [\\\"the\\\", \\\"mouse\\\", \\\"jumped\\\", \\\"over\\\", \\\"the\\\"\",\"tags\":[\"strings\",\"control_flow\"],\"timestamp\":{\"$date\":1557290728419},\"title\":\"Word Buckets\",\"stats\":{\"completed\":{\"total\":142,\"ratings\":[4,4,4,4,4,4,4,4,4,4,3,3,3,3,1,2,4,4,2,4,3,3,3,5,2,5,5,5,5,3,3,5,2,0,5,4,3,5,1,5,1,2,2,0,2,5,5,2,0,3,5,3,1,3,4,4,3,4,5,1,5,3,5,5,2,3,0,0,3,5,5,5,5,3,4,1,3,2,4,2,1,5,0,2,3,2,2,5,2,4,4,4,5,3,3,5,5,5,3,1,3,3,3,2,1,4,5,5,5,2,2,1,5,1,4,3,5,5,4,5,3,5,4,2],\"rators\":[\"mNMQvcxKSSvqqMYCH\",\"8JyqsSbN2FJXPr3cw\",\"yZvzB3qFb8pkHy4dg\",\"tAF9Gf6PiGogbZuWs\",\"MXjxGML2X75x64vJo\",\"AYaEkTWLMmfzpwejr\",\"QKYi6pYeaYFovNHX4\",\"BFNm9gacwba9KyLFW\",\"YAsRhvoARsuNigs6L\",\"wumioEQzxPiXb6s9w\",\"gb9rvGus2Jv7bjZSs\",\"Br5dkvNSpHFHnr3w8\",\"hdm3457uPzJLghf8g\",\"pci5yjeqMeYpPhfhL\",\"ogyeeaEAjmdSBsnta\",\"5Qvy7fNM2YEQ6PtbY\",\"aCNWav8S8Try9RkC6\",\"NhHfEn47pfwCksgt4\",\"BBP9BE5mKHRzaRpJr\",\"YLQjibQtLdwL4ZmWq\",\"aBSFyfFobN4KZGvPD\",\"ej9Edj6NBe2XqB5cT\",\"HqmxnQJM66Y57twhn\",\"nYSebjpPsiBXiho7y\",\"FHSJnAYTbcsKFgeQa\",\"jDgJ2fdFS76TSorNc\",\"R5s7YZe9KJigCJsjS\",\"eHcgvkTGsH7ZziqBo\",\"8PwfYqoDQFThzNtvf\",\"sZDYNicocwXesSMXb\",\"N6c7FM5g7an4t6wTX\",\"Jqk2uJZZxEv5wZFze\",\"DwetpbChQM4r6Gwah\",\"cSMKd6Yq8Pyq8TvWR\",\"fMR9RcfgPJWiLgx7k\",\"X4iqEdg7dPjFpoASw\",\"de3DhFz9dW8vdPanZ\",\"t7BnRyo7NH5Nx22HR\",\"azHSATBuuQ5wz9bvB\",\"CByQtwf9BqB8jfEC3\",\"GiK8LZt3JRKNJjj5W\",\"bLpgu8xTdpDPFSAsM\",\"C4QntmkYtB89GNtpd\",\"zxmtE2mYR4xQzTHoy\",\"aEm3Wvj2rFYRL8Lrb\",\"SuJeLnhfR3smGu3WZ\",\"SGhPxX5bHGL8zZqtt\",\"9uZpgAtSuPZ7W7DL6\",\"BByKDngfPvW6w4m7d\",\"AasGs8AeX9Lcb9xJn\",\"YsAz93yZw8KKPupKv\",\"zT9LpkiwYjLviYYW6\",\"aLwJNALj2MpjAGZz4\",\"bJaPCBx63YxdJAuTS\",\"yKttxy9JGn5Jzwuj6\",\"SpTi3f5uA7t7ygtLv\",\"HmKFZqFH9YC346djy\",\"pwtpSwoCdRXS6tcFJ\",\"W5TajitmCyxz87zAC\",\"ZNnsMeNkdDhHjSrZb\",\"5H9MNfC4DPwxbakTf\",\"neRxsjCeKWgXmLKDL\",\"PWAySsq7gkZWHjaZm\",\"ZSbcGKj67qFTPfzqh\",\"mDWNyaaQ9hvPCRzSd\",\"fznzd3qnvtbFkkizz\",\"Ecg4m7srYGgZsb4Ck\",\"xn7uGNKeAwPEkP9oA\",\"dzS6WBTMHyFEag6Fp\",\"WzEhzQcMwc4sw8z7T\",\"bJxaKHJqR82EWw8Su\",\"diA4hKkZ9WRCu4ive\",\"GgLd4eWBu79mdjtkP\",\"hZW6j5s6RHpx35phy\",\"4fhjJBvLBWh6QeSih\",\"rycT9gbwMWPqmLAf8\",\"xxr9cuQtxZ5wGTACr\",\"97DthwdtrBLm2y2Yj\",\"gnqiMtWWsK2aCjbpA\",\"b3Dk2LqoEgripS3Y3\",\"vNqidzYii8vSSBxoE\",\"YPiKeyo2oBhLzMuxX\",\"8WpvgSbQciTQWdd8T\",\"a777e8chPvJkY3tKa\",\"4uDFMQFPxDcYhiuYK\",\"DPi9QGLctq2y76KuE\",\"RchMnY9TchtEYXFsu\",\"J23RcmzbdtBbPCTjT\",\"HsKZgdFc4ZqD6AFwH\",\"oZiGwL535nJ5ZMJr7\",\"5dHucvf2qBYyKim7X\",\"EH68sDGGufTc5vifi\",\"gSFJPsMXnqAog3Q9f\",\"8nE8QHnFYsHCFebte\",\"juxcyZ5yYgiFamrtW\",\"3sJqNsvbCGCnGxNCq\",\"MxQXA7kigYpyBS37i\",\"ZQSG2DF9TjmBGXPwu\",\"m3R9aaRoEbaxRsSNA\",\"h4x2jaMdj5aQZbW5g\",\"9XL2aczknvc38bB9d\",\"Wv2vJnEj8ywNmARoF\",\"v2rponevFCpBsLrQD\",\"mePSe5o7qpkYirqxx\",\"c4DsFkzDj9CptDgDj\",\"5rX3qPFdvRQ9G7xZQ\",\"8KNtgAcNpyT2f6bTT\",\"Tg24gZyPmk8uDXcBY\",\"HF28xZKSLM9wEuqNg\",\"iPWizZHGb88NgM8DJ\",\"4EgBCgEyiZA2hRsh4\",\"85BiyYFzHLMbq2A73\",\"eYfPWvZwnJQkHbSTK\",\"8sNv5PTHa7XQ8bNqR\",\"iS5BrkGLzJyPK7nKt\",\"2k7JfdCnTaxXSi8HG\",\"DQskEvAv5KiJDPtGF\",\"zSLiwuSnZH5SmaXE3\",\"8pBm6An63TSSA89YB\",\"DY6edtmqmFq7GJTc8\",\"s5M5RvgqR9BhB9JoC\",\"2PufnQcsHsfymufX3\",\"v9KtC8YLbMWmXiW2H\",\"XNmN6ztj36a7eChbD\",\"iojEnnY9FsMfYzp6f\",\"J3upzLHuEwXH7Z2hx\",\"yjtdwc2AC4jA2RWtn\",\"gJYuGdkXEWWmGRLzu\",\"PH32cNxBjrK4a28sn\",\"MpfytGFYF77emJ3cT\",\"6s9vXhx6eaZ5473Rr\",\"rDgKHd6ZSSpboiAj7\"],\"quality\":[5,3,3,5,4,4,4,4,5,5,4,4,5,5,5,5,5]},\"tests\":{\"score\":0,\"rators\":[\"mNMQvcxKSSvqqMYCH\"]},\"instructions\":{\"score\":0,\"rators\":[\"mNMQvcxKSSvqqMYCH\"]},\"flags\":1},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.411764705882353,\"family\":[{\"_id\":\"E5xwvwQucx5AQKzR4\",\"language\":\"cpp\"},{\"_id\":\"3FAMXz4wAYGqpCtDR\",\"language\":\"java\"},{\"_id\":\"Q7foiyejfJG6pqqws\",\"language\":\"javascript\"},{\"_id\":\"fbqmyDjCigbYhWLJa\",\"language\":\"python3\"},{\"_id\":\"t5LZhfsBnQxRZuYNt\",\"language\":\"ruby\"}]}}"]