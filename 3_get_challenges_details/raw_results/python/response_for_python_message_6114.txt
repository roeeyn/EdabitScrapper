a["{\"msg\":\"result\",\"id\":\"1768\",\"result\":{\"_id\":\"zQespQxTsiGoeMNP3\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"def can_build(lst):\\n\\t\",\"difficulty\":2.330508474576271,\"familyId\":\"3DCF2Q2C2bgpSzffP\",\"instructions\":\"You are given an input list of strings, ordered by ascending length.\\n\\nWrite a function that returns `True` if, for each pair of consecutive strings, the second string can be formed from the first by adding a **single letter** either at the **beginning or end**.\\n\\n### Examples\\n```\\ncan_build([\\\"a\\\", \\\"at\\\", \\\"ate\\\", \\\"late\\\", \\\"plate\\\", \\\"plates\\\"]) ➞ True\\n\\ncan_build([\\\"a\\\", \\\"at\\\", \\\"ate\\\", \\\"late\\\", \\\"plate\\\", \\\"plater\\\", \\\"platter\\\"]) ➞ False\\n# \\\"platter\\\" is formed by adding \\\"t\\\" in the middle of \\\"plater\\\"\\n\\ncan_build([\\\"it\\\", \\\"bit\\\", \\\"bite\\\", \\\"biters\\\"]) ➞ False\\n# \\\"biters\\\" is formed by adding two letters - we can only add one\\n\\ncan_build([\\\"mean\\\", \\\"meany\\\"]) ➞ True\\n```\\n\\n### Notes\\n- Return `False` if a word is **NOT** formed by adding **only one letter**.\\n- Return `False` if the letter is added to the **middle** of the previous word.\\n- Letters in tests will all be **lower case**.\",\"lab\":\"Test.assert_equals(can_build(['a', 'at', 'ate', 'late', 'plate', 'plates']), True)\\nTest.assert_equals(can_build(['u', 'ut', 'but', 'butt', 'butte', 'butter', 'buttery']), True)\\nTest.assert_equals(can_build(['a', 'ka', 'ika', 'pika', 'pikac', 'pikach', 'pikachu']), True)\\nTest.assert_equals(can_build(['a', 'at', 'tat', 'stat', 'state', 'estate', 'estates']), True)\\nTest.assert_equals(can_build(['o', 'ol', 'old', 'bold', 'bolde', 'mbolde', 'embolde', 'embolden']), True)\\nTest.assert_equals(can_build(['mean', 'meany']), True)\\nTest.assert_equals(can_build(['at', 'cat', 'cate', 'cater', 'caters']), True)\\n\\nTest.assert_equals(can_build(['a', 'at', 'ate', 'late', 'plate', 'plater', 'platter']), False)\\nTest.assert_equals(can_build(['i', 'it', 'bit', 'bite', 'biters']), False)\\nTest.assert_equals(can_build(['e', 'tea', 'teac', 'teach', 'teache', 'teacher', 'teachers']), False)\\nTest.assert_equals(can_build(['m', 'ma', 'man', 'many', 'meany']), False)\\nTest.assert_equals(can_build(['o', 'op', 'top', 'stop', 'stops', 'stoops']), False)\\nTest.assert_equals(can_build(['air', 'air', 'airy', 'fairy']), False)\\nTest.assert_equals(can_build(['men', 'mean', 'meany']), False)\",\"language\":\"python3\",\"summary\":\"You are given an input list of strings, ordered by ascending length.\\n\\nWrite a function that returns True if, for each pair of consecutive strings, the second string can be formed from the first by adding a single letter either at the beginning or end.\\n\\nExamples\\ncan_build([\\\"a\\\", \\\"at\\\", \\\"ate\\\", \\\"late\\\", \\\"plate\\\", \\\"plates\\\"]) ➞ True\\n\\ncan_build([\\\"a\\\", \\\"at\\\", \\\"ate\\\", \\\"late\\\"\",\"tags\":[\"strings\",\"validation\",\"arrays\"],\"timestamp\":{\"$date\":1557246335217},\"title\":\"Building up a Word\",\"stats\":{\"completed\":{\"total\":249,\"ratings\":[3,3,3,3,3,3,3,3,3,3,3,2,3,2,3,3,3,2,1,1,3,3,4,4,3,2,4,1,3,4,1,3,3,3,2,2,4,4,1,3,2,4,3,4,4,0,3,4,4,3,3,2,2,3,2,2,3,3,2,2,2,2,1,4,4,0,2,1,2,0,3,2,3,2,3,2,1,2,4,1,1,0,2,4,2,3,2,3,1,5,4,3,3,1,1,2,2,3,1,2,3,3,3,2,2,1,2,4,4,2,1,2,1,2,2,4,0,2,2,4,5,2,2,2,2,2,0,1,3,3,3,1,0,4,3,2,2,4,1,2,4,2,2,2,1,1,2,3,2,4,0,2,2,4,3,3,2,4,2,3,4,3,4,2,2,1,4,4,2,2,2,2,2,4,0,1,1,1,1,4,2,4,2,1,2,3,5,3,2,2,3,2,0,1,1,2,1,3,3,2,2,3,2,1,0,2,1,4,3,2,2,3,3,3,1,3,3,2,1,3,2,3,2,3,3,2,3,3,0,0,0,0,2,1,2,1],\"rators\":[\"mNMQvcxKSSvqqMYCH\",\"tAF9Gf6PiGogbZuWs\",\"8JyqsSbN2FJXPr3cw\",\"yZvzB3qFb8pkHy4dg\",\"gb9rvGus2Jv7bjZSs\",\"ab7BsQuhDo3QgE6bh\",\"MXjxGML2X75x64vJo\",\"FikSPhcrHBpQ4CyGC\",\"5JFQgt6KFihmXfHKm\",\"AYaEkTWLMmfzpwejr\",\"PFjMZGHNAPTkgd7tq\",\"7g3vZaQXhLpxrajyg\",\"DJD9vvwqQmjfwdGpt\",\"kQH5b8MXJunh84Czq\",\"KWHYqCuXcKrzxtqHt\",\"BFNm9gacwba9KyLFW\",\"C9LKGu2g5hSijvDzA\",\"3ifAHQzsMasfQySoL\",\"cmwasetrBzbwJQbks\",\"M2k5STtKaQx6tsgWe\",\"pci5yjeqMeYpPhfhL\",\"jHrtWDGBhkbuWa7fG\",\"GgLd4eWBu79mdjtkP\",\"x9A83cZkyA7E7utn3\",\"aCNWav8S8Try9RkC6\",\"Ti5BF4jnruwNNzHY8\",\"mG93NkvEZfh2kPrMq\",\"jYJ26SiLKBu5GRumq\",\"FQKLJZoeNetX4cty7\",\"5airAWy8rSJDRewDR\",\"7BvK9WWXi9Arqh63Q\",\"eYWgXzijKqfqgZNDi\",\"ryYyXJAGf5bgcNNGm\",\"RErqK2yM94wYyD2hk\",\"gMJhLdyw3tH7L96X2\",\"nF9pCCzbGDhzvWgaw\",\"9YtQPAffoq4WJLcAP\",\"S8nRnCyqEdKAr7Rap\",\"Tin42WiZ4JTDEnS7b\",\"5F8kWn4n7fQbnf88e\",\"RXb6cmCNaYbczuDwy\",\"dZGNAJXB24zNh2tsD\",\"oqGkxvASXq52iTDvp\",\"2NJuDfSqdrF8kHHni\",\"4rg9g6TKYZ8aifrYc\",\"HqmxnQJM66Y57twhn\",\"rurh72mGpAthfGRGt\",\"QezqcSA2QaBSG2v8r\",\"rPvq3ZKT8KGQoBdLx\",\"pYgorHTLHPChinFCm\",\"PuJDHtAaX6vXeJJTC\",\"LqLArzZcSuzaes2Zx\",\"5fioB7qGh8Zmidput\",\"sfHsh5gna2QYuwsRP\",\"CZeLyDD2BQL3jrzzj\",\"kWi8wiAR2yLFYXoHf\",\"s5M5RvgqR9BhB9JoC\",\"t6bXCX76smm7B3bEN\",\"SxxCQ7g8DK5nCWQou\",\"2fxapKr8XGdNeaKi2\",\"td7qPZ7Lv4pEWT2Ya\",\"8aPJNKDxXq7884eJb\",\"Dw8RZgg5iHBuFrWwQ\",\"onj28D3uoZHZLF3xK\",\"JpeTZm5QTWFLqg9Bx\",\"vjQizqDbKpjfHrvZA\",\"uqLLFA6pHFLfMLJp6\",\"2m2joa99MiCoSDD2T\",\"FgkYtHLxeD8pETJ8T\",\"RyCu8LFdoba6Gvzp9\",\"qw6cXNezF4FBSJzT9\",\"Du863uXQ6TKWszNmA\",\"vuwheqp25x7RkBHXn\",\"pryBJYX32n8nvRvDu\",\"NSCWFQBMJnKFEaDi4\",\"KGPeT8nLxKBHzvPhL\",\"6ShafRStcvew4GfCh\",\"mhwJATYEcAEQ8Bmeb\",\"C4QntmkYtB89GNtpd\",\"ySRnygsLwGGsmZhfa\",\"oMJGBDMEwnKw2rm5o\",\"2tkaaSSTqhBDg3tiA\",\"8xgKKaqGKffpFgAjs\",\"omQhBXTwsBMv6kgz4\",\"X5rQz4tpncjYZ6uZr\",\"xmEiF7KSH6Gaximmd\",\"LdRdFW8qCjGu5nYLQ\",\"ryspbqExe5ccjH7Qk\",\"ZYT9LjgocbP4hzQK5\",\"ydEdzuCCZt4yny9Rq\",\"8sR2FLQtgkXLqSHwJ\",\"DH4jthtCJDpXtXbJS\",\"PA6JbX3Y7AAhCdPCg\",\"PTcm3qFvxvLnaKttM\",\"YQxo25GTwFZ8GaN6u\",\"HTMppwmCi7pqRYg5t\",\"JqTdj55bF76zrL3SQ\",\"8XQxubj2jnoi5RvsG\",\"55QccTBvpjaGbTkoM\",\"Do6z6DbgoxgTtNaqW\",\"jAFc3ZshPeAHyxowA\",\"CtECTBENRQP5YHFJS\",\"NZLykjYrhd2HtoHnZ\",\"hAzy9apJgLWwRFGPJ\",\"vLhi4ZbaqGanej2JS\",\"k66z8NfCwxStFg2qz\",\"EJ3imhwwbAtbFojjo\",\"fupytFiBkMtthfKat\",\"Pe6p94THEJHmzH3wt\",\"3j6Z7of7jgwFmeKxW\",\"8PwfYqoDQFThzNtvf\",\"PqEKjCDkJtYoYuZfj\",\"eHcgvkTGsH7ZziqBo\",\"yKttxy9JGn5Jzwuj6\",\"kRz5JrAqDNRqeu3xB\",\"sXs4Dvtk8Pvn2t9ZP\",\"zEwSoioYyEynzxLij\",\"FHSJnAYTbcsKFgeQa\",\"YZsZjfvd3PnLhDJrR\",\"pMuvoqcmxHbuRSfb9\",\"DvzpcjeQsLCSZc9r9\",\"sW4cynRBQNtTuWzFz\",\"kQ3QhjsGsLnCKFZZN\",\"nYSebjpPsiBXiho7y\",\"gbBckbpQSvzSBp3a4\",\"fRcXJqz2KiRFTw7M2\",\"DwetpbChQM4r6Gwah\",\"Wmf3GfnEn4B3ttkmp\",\"jDgJ2fdFS76TSorNc\",\"7vGrsWrHjgArHv7h6\",\"Fki4LenXE4ocaumd5\",\"MNgYsvK6HfLRb8wAz\",\"w6YLFuizZ4QGqNeMX\",\"kfG9deramoXyqrP5L\",\"5HkEJE35W56jRhuNi\",\"kBmhcwkCqxiy4GwiZ\",\"vgTvCCxgvbCTDvaRT\",\"tK9oBgXjqPsPrGowj\",\"3JNgL6MdAG8HKxzDC\",\"z29voMGDksmh5wajq\",\"pzZMMmJRaxwGAgaTH\",\"fMR9RcfgPJWiLgx7k\",\"XbwyB44kHPnRgQcrB\",\"DXyqDpF6GC9SN3d2h\",\"4Sntowj2cbMFRDMJa\",\"wXSmXawhmdzcQMhLx\",\"aKkGuZwxeCSodN4DB\",\"wwMcJQRvf3X59Jyev\",\"cNYan8ZWPxmjRteBx\",\"BW9rr7Ktufv4Fk9hv\",\"CbaeWRARjiGi6HbLq\",\"DryNRN98Dj24BpgrL\",\"ftRou9zcw69GCx4iv\",\"5Bikpk3S6zGEvGDaC\",\"bGx5XJCz8Tkugvypf\",\"fF9rKQmnp5TpnnWGb\",\"Jqk2uJZZxEv5wZFze\",\"YTwwSYtqudH2JnrBX\",\"xxxhm6QEkRpah4k94\",\"M6jpRARa4YDQM5tqA\",\"qJZsi5rhRnWA38FbA\",\"xyHfEdcYBDznunq6n\",\"vGxGDPs9RBqP8oTjW\",\"7hzSvcYdq6QjoRnJY\",\"m2iiZZHTpzHcEKJMn\",\"ePrQatjrpPQKpmwFf\",\"PT5pu7kJsgp9TDNGv\",\"pHpGCimfadYznq5Wb\",\"8QAMphNjomBjcX3j9\",\"7vyub5zTHNfMfQWoW\",\"aMCK6QtaGMR46obgb\",\"rMc3LPajSgm68hNfC\",\"Cc2Cgj4MWXZxsTooC\",\"4zvByd8MNcc3PpRFN\",\"DLai9DxpZN6p5TPRX\",\"nc7bRhkxgKyqusYe3\",\"cG7psgkbckNQNn6vX\",\"RxjsoBmCqZgg5Fq5a\",\"rZ8PD3qRmGCvccSb9\",\"5nY48krepaT4a4QTN\",\"K5vETaccLsPyu8sbd\",\"Yp7uvStL97cC9fKkY\",\"Q8mpPYfwDNuzfjK6y\",\"ruyBZ3BQsi7TKgJy9\",\"kP2C2Ye5H6WoTodFN\",\"3ECpdeExhBmkYXtba\",\"Bo457Fm7HpxBzs5YT\",\"2innwjWqxJHo4eRGh\",\"n8b3BmLYPdTKjWXjb\",\"PXAcsKkssS2yLyDv2\",\"JYbyC7EiD3PuwuxEv\",\"PytNZK9mNiRiZxPrm\",\"2ahpwvBErWo33rdBH\",\"AasGs8AeX9Lcb9xJn\",\"mDWNyaaQ9hvPCRzSd\",\"aEm3Wvj2rFYRL8Lrb\",\"55RQznnuTGpsj3EXd\",\"ZNnsMeNkdDhHjSrZb\",\"9pzFiFK3ANLjQfnr2\",\"EjbDDFRECrzQDkzrX\",\"gJYuGdkXEWWmGRLzu\",\"gSFJPsMXnqAog3Q9f\",\"gj87yXyoJxhoQLetq\",\"fRuL2dZNwv5JifSrL\",\"iojEnnY9FsMfYzp6f\",\"ZJQW3bL2KzxJcdEoc\",\"Ecg4m7srYGgZsb4Ck\",\"v9KtC8YLbMWmXiW2H\",\"HF28xZKSLM9wEuqNg\",\"iS5BrkGLzJyPK7nKt\",\"spqXrjG3ZFa2j5uTR\",\"J3upzLHuEwXH7Z2hx\",\"qZQxPQ2kaNKAMesHT\",\"DPi9QGLctq2y76KuE\",\"d8qtzoLB264iP8tdY\",\"p8qqFdJ3FSk5x9z3G\",\"QRv96jmNaYsWkxQEG\",\"GTKsdeEihE636Le9i\",\"PWgzeK859suojbrRx\",\"xn7uGNKeAwPEkP9oA\",\"aKFKBn6sYqMB52ETX\",\"buX4mCQhtXCfBjeno\",\"srJ34BaybkQh3qRkM\",\"AFfw7cGg83uYk2Miy\",\"HdapHJPXHZwFYBCnn\",\"oBcs8GLX2ZFLXQy8y\",\"MpfytGFYF77emJ3cT\",\"T6iBEE2jp7f7iEF2P\",\"gKnWjDjwrJh7MK2df\",\"T2vhHPhRR96hRizq8\",\"CHvzhtXnv8HTbPQ56\",\"yod5YhKtPqw2GfG9B\",\"4Lwjr34ypKNQNQCar\",\"2PufnQcsHsfymufX3\",\"8sNv5PTHa7XQ8bNqR\"],\"quality\":[5,5,5,5,5,5,5,5]},\"tests\":{\"score\":0,\"rators\":[\"mNMQvcxKSSvqqMYCH\"]},\"instructions\":{\"score\":0,\"rators\":[\"mNMQvcxKSSvqqMYCH\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":5,\"family\":[{\"_id\":\"3L5nGsiBp95gmGhG7\",\"language\":\"cpp\"},{\"_id\":\"Eiyu2SZk9rgdp5gZd\",\"language\":\"java\"},{\"_id\":\"P7SoyRXhQrhdZTFak\",\"language\":\"javascript\"},{\"_id\":\"zQespQxTsiGoeMNP3\",\"language\":\"python3\"},{\"_id\":\"Ryc76RB3iAXLq7Ask\",\"language\":\"ruby\"}]}}"]