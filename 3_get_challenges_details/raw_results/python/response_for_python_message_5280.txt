a["{\"msg\":\"result\",\"id\":\"1354\",\"result\":{\"_id\":\"64w3Mpumi7kTA82Sv\",\"author\":\"Mubashir Hassan \",\"authorId\":\"T6iBEE2jp7f7iEF2P\",\"code\":\"def simple_symbols(txt):\\n\\t\",\"difficulty\":2.0166666666666666,\"familyId\":\"zrhd82Bv5ySqdpcE4\",\"instructions\":\"Create a function that takes a string and determine if it's a valid sequence by either returning `True` or `False`. The string will be composed of **+** and **=** symbols with several characters between them (e.g. `\\\"++d+===+c++==a\\\"`) and for the string to be `True`, each letter must be surrounded by a **+** symbol. So the string to the left would be `False`.\\n\\n### Examples\\n```\\nsimple_symbols(\\\"f++d+\\\") ➞ False\\n\\nsimple_symbols(\\\"+d+=3=+s+\\\") ➞ True\\n\\nsimple_symbols(\\\"==+p+++++++++====8+z++++\\\") ➞ True\\n```\\n\\n### Notes\\nThe given string will not be empty and will have at least one letter.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(simple_symbols(\\\"======2+++4+u===+i+\\\"), False)\\nTest.assert_equals(simple_symbols(\\\"+u+====3+mmmmm===m++\\\"), False)\\nTest.assert_equals(simple_symbols(\\\"==+p+++++++++====8+z++++\\\"), True)\\nTest.assert_equals(simple_symbols(\\\"+d+=3=+s+\\\"), True)\\nTest.assert_equals(simple_symbols(\\\"f++d+\\\"), False)\",\"language\":\"python3\",\"quality\":4.6,\"summary\":\"Create a function that takes a string and determine if it's a valid sequence by either returning True or False. The string will be composed of + and = symbols with several characters between them (e.g. \\\"++d+===+c++==a\\\") and for the string to be True, each letter must be surrounded by a + symbol. So the string to the left would be False.\\n\\nExamples\\nsimple_symbol\",\"tags\":[\"regex\",\"validation\"],\"timestamp\":{\"$date\":1605004894875},\"title\":\"Simple Symbols\",\"stats\":{\"completed\":{\"total\":69,\"ratings\":[2,2,2,2,2,3,2,2,2,4,2,2,2,3,3,3,2,1,2,3,2,3,3,1,1,0,2,0,0,2,5,3,2,0,1,0,3,2,3,1,3,3,3,2,1,3,3,0,0,3,3,1,2,2,2,2,2,3,3,0],\"quality\":[5,5,5,5,3],\"rators\":[\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\",\"Yp7uvStL97cC9fKkY\",\"8JyqsSbN2FJXPr3cw\",\"iS5BrkGLzJyPK7nKt\",\"J3upzLHuEwXH7Z2hx\",\"xn7uGNKeAwPEkP9oA\",\"HF28xZKSLM9wEuqNg\",\"gJYuGdkXEWWmGRLzu\",\"w2HhxvSLmDhaGCAjE\",\"s5M5RvgqR9BhB9JoC\",\"DPi9QGLctq2y76KuE\",\"Jqk2uJZZxEv5wZFze\",\"QRv96jmNaYsWkxQEG\",\"p8qqFdJ3FSk5x9z3G\",\"gb9rvGus2Jv7bjZSs\",\"iojEnnY9FsMfYzp6f\",\"CTKmXtrqDYqJBnuy8\",\"yjtdwc2AC4jA2RWtn\",\"cR3ibTMxLyEdDFCHY\",\"cAP3n5NY64uoMwzRR\",\"oBcs8GLX2ZFLXQy8y\",\"GGdmhAvxXhqhhibJN\",\"Wpn95NqWxncQrwNgz\",\"H9KZi2cjt4FwH7qog\",\"AQSqD9oNv2uPfxZCR\",\"8BFSTCnoe2QggN64c\",\"2PufnQcsHsfymufX3\",\"DEDniTrstQYGounXT\",\"K6MfKMytoJJuSGewP\",\"J5T8gZqiZXFuFDTQ7\",\"AasGs8AeX9Lcb9xJn\",\"JKb5rhL6DKcCAypF9\",\"HqmxnQJM66Y57twhn\",\"fznzd3qnvtbFkkizz\",\"fbr22rabEJMfBp7vD\",\"tAF9Gf6PiGogbZuWs\",\"4Lwjr34ypKNQNQCar\",\"ctbThYbufFCYbRK4f\",\"o4ixjQGSaYqA2JoM4\",\"jWbd7SYDzLPjc9EDh\",\"MpfytGFYF77emJ3cT\",\"JhX7jvtpwNyxcc39m\",\"yod5YhKtPqw2GfG9B\",\"8sNv5PTHa7XQ8bNqR\",\"buX4mCQhtXCfBjeno\",\"Ds7L5bksw2QRHjrKL\",\"Z85ajWfZ4jDPkbvR4\",\"5HCu9Ydd86QgHDRNP\",\"jkbavR2ATFJcpmo8M\",\"BrTDhPJcACL2bsrpJ\",\"f7HWp5JScdnjokgGC\",\"3KkyQm77zsew58Dc2\",\"MKT7khMBGXzA22ykf\",\"mvJBakQ35CWAnbbEZ\",\"eMuCpJ2spXWkJjWNz\",\"RErqK2yM94wYyD2hk\",\"Qyfyyw6oC4EHAndzo\",\"9pzFiFK3ANLjQfnr2\",\"CHvzhtXnv8HTbPQ56\"]},\"flags\":2},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"cX8LuRmoE8y5HH9bX\",\"language\":\"cpp\"},{\"_id\":\"rsjKiutZuYaBYeaXt\",\"language\":\"javascript\"},{\"_id\":\"64w3Mpumi7kTA82Sv\",\"language\":\"python3\"},{\"_id\":\"3R33W9ECMmNahRKki\",\"language\":\"ruby\"}]}}"]