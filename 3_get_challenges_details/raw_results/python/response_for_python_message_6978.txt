a["{\"msg\":\"result\",\"id\":\"2197\",\"result\":{\"_id\":\"E9Wkppxyo763XywBe\",\"author\":\"zatoichi49\",\"authorId\":\"tAF9Gf6PiGogbZuWs\",\"code\":\"def binary_clock(time):\\n\\t\",\"difficulty\":3.3797468354430378,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"hZDpZNZW9dDpXvj7b\",\"instructions\":\"A binary clock displays the time of day in binary format. Modern binary clocks have six columns of lights; two for each of the hours, minutes and seconds. The photo below shows a binary clock displaying the time \\\"12:15:45\\\":\\n\\n![](https://edabit-challenges.s3.amazonaws.com/220px-Digital-BCD-clock.jpg)\\n\\nThe binary values increase from the bottom to the top row. Lights on the bottom row have a value of 1, lights on the row above have a value of 2, then 4 on the row above that, and finally a value of 8 on the top row. Any 24-hour time can be shown by switching on a certain combination of lights. For example, to show the time \\\"10:37:49\\\":\\n\\n![](https://edabit-challenges.s3.amazonaws.com/440px-Binary_clock.svg.png)\\n\\nYou've decided to build your own binary clock, and you need to figure out how to light each row of the clock to show the correct time. Given the time as a string, return a `list` containing strings that shows the lights for each row of the clock (top to bottom). Use \\\"1\\\" for on, and \\\"0\\\" for off. Leave a blank space for any part of the row that doesn't require a light.\\n\\n### Examples\\n```\\nbinary_clock(\\\"10:37:49\\\") ➞ [\\n  \\\" 0 0 1\\\",\\n  \\\" 00110\\\",\\n  \\\"001100\\\",\\n  \\\"101101\\\"\\n]\\n\\nbinary_clock(\\\"18:57:31\\\") ➞ [\\n  \\\" 1 0 0\\\",\\n  \\\" 01100\\\",\\n  \\\"000110\\\",\\n  \\\"101111\\\"\\n]\\n\\nbinary_clock(\\\"10:50:22\\\") ➞ [\\n  \\\" 0 0 0\\\",\\n  \\\" 01000\\\",\\n  \\\"000011\\\",\\n  \\\"101000\\\"\\n]\\n```\\n\\n### Notes\\nSee the **Resources** section for more information on binary clocks.\",\"isHidden\":false,\"lab\":\"Test.assert_equals(binary_clock(\\\"07:24:16\\\"), [' 0 0 0', ' 10101', '011001', '010010'])\\nTest.assert_equals(binary_clock(\\\"13:48:18\\\"), [' 0 1 1', ' 01000', '010000', '110010'])\\nTest.assert_equals(binary_clock(\\\"18:48:15\\\"), [' 1 1 0', ' 01001', '000000', '100011'])\\nTest.assert_equals(binary_clock(\\\"11:47:55\\\"), [' 0 0 0', ' 01111', '000100', '110111'])\\nTest.assert_equals(binary_clock(\\\"05:46:39\\\"), [' 0 0 1', ' 11100', '000110', '010011'])\\nTest.assert_equals(binary_clock(\\\"20:35:19\\\"), [' 0 0 1', ' 00100', '101000', '001111'])\\nTest.assert_equals(binary_clock(\\\"10:51:40\\\"), [' 0 0 0', ' 01010', '000000', '101100'])\\nTest.assert_equals(binary_clock(\\\"10:16:17\\\"), [' 0 0 0', ' 00101', '000101', '101011'])\\nTest.assert_equals(binary_clock(\\\"08:17:26\\\"), [' 1 0 0', ' 00101', '000111', '001100'])\\nTest.assert_equals(binary_clock(\\\"17:48:59\\\"), [' 0 1 1', ' 11010', '010000', '110011'])\\nTest.assert_equals(binary_clock(\\\"20:04:33\\\"), [' 0 0 0', ' 00100', '100011', '000011'])\\nTest.assert_equals(binary_clock(\\\"01:35:39\\\"), [' 0 0 1', ' 00100', '001010', '011111'])\\nTest.assert_equals(binary_clock(\\\"13:23:39\\\"), [' 0 0 1', ' 00000', '011110', '110111'])\\nTest.assert_equals(binary_clock(\\\"01:56:09\\\"), [' 0 0 1', ' 01100', '000100', '011001'])\\nTest.assert_equals(binary_clock(\\\"10:50:22\\\"), [' 0 0 0', ' 01000', '000011', '101000'])\\nTest.assert_equals(binary_clock(\\\"07:41:09\\\"), [' 0 0 1', ' 11000', '010000', '010101'])\\nTest.assert_equals(binary_clock(\\\"10:20:42\\\"), [' 0 0 0', ' 00010', '001001', '100000'])\\nTest.assert_equals(binary_clock(\\\"02:19:30\\\"), [' 0 1 0', ' 00000', '010010', '001110'])\\nTest.assert_equals(binary_clock(\\\"13:41:41\\\"), [' 0 0 0', ' 01010', '010000', '110101'])\\nTest.assert_equals(binary_clock(\\\"03:17:28\\\"), [' 0 0 1', ' 00100', '010110', '011100'])\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,3,2,3,3,2,4,3,2,2,5,4,2,3,4,5,5,5,2,2,5,3,5,2,4,5,0,5,2,5,3,4,5,3,4,4,2,4,3,2,2,0,5,3,4,3,5,3,0,0,3,4,3,4,5,5,0,5,4,2,3,5,2,1,5,5,5,5,5,3,5,5,5,5,2],\"rators\":[\"tAF9Gf6PiGogbZuWs\",\"w8KSCPw3ZN4izB5d3\",\"SADW5CHahXhp7AHk8\",\"gb9rvGus2Jv7bjZSs\",\"Jqk2uJZZxEv5wZFze\",\"8PwfYqoDQFThzNtvf\",\"Yp7uvStL97cC9fKkY\",\"aEm3Wvj2rFYRL8Lrb\",\"yZvzB3qFb8pkHy4dg\",\"aCNWav8S8Try9RkC6\",\"uw8E83imJYpQiiPpP\",\"YsAz93yZw8KKPupKv\",\"8JyqsSbN2FJXPr3cw\",\"AasGs8AeX9Lcb9xJn\",\"ftXLsTaA7yHmhuEsY\",\"73eTfjtjyYWojAZ6r\",\"zbDjaYZcYccgJtr4z\",\"7Z988uEkfXvTLytfc\",\"HmKFZqFH9YC346djy\",\"5H9MNfC4DPwxbakTf\",\"MxQXA7kigYpyBS37i\",\"n2BRY9X8899dcG8Bw\",\"t9Sz6uBgobfCBJzGL\",\"eHhL37DG7oW3vTcg7\",\"jE24TRMFGTRLrGsME\",\"W5TajitmCyxz87zAC\",\"ZSbcGKj67qFTPfzqh\",\"pDvFWMCD9fQwoBPcu\",\"nLpdvK7EcahCqNe8X\",\"bJxaKHJqR82EWw8Su\",\"gA665h7JhxfMBRBxH\",\"aiNXLHHqupzR3A5Ty\",\"SGhPxX5bHGL8zZqtt\",\"iSY8Jq5PQ8wBiWpiw\",\"fznzd3qnvtbFkkizz\",\"yWwASsv3iZzfQTbzx\",\"RehJGBFS6CYiWdjZx\",\"xn7uGNKeAwPEkP9oA\",\"XkJ9G89xpZiTj58Eq\",\"4fhjJBvLBWh6QeSih\",\"hZW6j5s6RHpx35phy\",\"gnqiMtWWsK2aCjbpA\",\"pPtmnJ7q9QchoG2Jq\",\"mshwdRrChqXHRL7db\",\"emagfXjqjkuDhZCbj\",\"GgLd4eWBu79mdjtkP\",\"Ecg4m7srYGgZsb4Ck\",\"J23RcmzbdtBbPCTjT\",\"FuxNmPK2CgEgoSYKo\",\"EH68sDGGufTc5vifi\",\"EFjSWc7WkcPoRphfa\",\"Jh37QFpwiwmGwfW5u\",\"SdhXGjg7suaZQCvoH\",\"QrcqAWbJ6KuNzWMuC\",\"h4x2jaMdj5aQZbW5g\",\"LJe3yrh3WBcEPwPR3\",\"5dHucvf2qBYyKim7X\",\"3bH5s2P4iYCRHb5Sk\",\"WzWXNbPKjWsJnq4M5\",\"Wor6DaEyozninmyzL\",\"FdB7yZRr2ZjaFQcpj\",\"LfDeQBAH37L7wgT4Z\",\"6xTu4r8NMczBFvmtz\",\"iS5BrkGLzJyPK7nKt\",\"xumt4h8jvh7o4xkhr\",\"5hhuYLyGkeqCvaSrf\",\"5rX3qPFdvRQ9G7xZQ\",\"T63gcy2WbkwsvEyRB\",\"Tg24gZyPmk8uDXcBY\",\"GLgGSqM8SnZuqGzP5\",\"2wW36evZLxtnzkZpQ\",\"ictNujqhPkdKotqe2\",\"HF28xZKSLM9wEuqNg\",\"4EgBCgEyiZA2hRsh4\",\"fNtNTiNhQTsHJxvTS\",\"85BiyYFzHLMbq2A73\",\"mLjrvoFNrH4uZWHRB\",\"q2tzvkrLASvSjkek9\",\"S6ipW8Xzds8QDszn9\",\"58M252WF7SPRinfBx\",\"AJwBauGHyrbqgDYce\",\"8sNv5PTHa7XQ8bNqR\",\"zSLiwuSnZH5SmaXE3\",\"8pBm6An63TSSA89YB\",\"b3Dk2LqoEgripS3Y3\",\"dFXpwPCtpThmcdpbP\",\"eHcgvkTGsH7ZziqBo\",\"2PufnQcsHsfymufX3\",\"yGyvKr9Qntq7YDvi5\",\"hBKf7LeSP6i2saXjk\",\"wT5gGgvjKc5wz59AQ\",\"Wpn95NqWxncQrwNgz\",\"ayqtxdYoDCcWuyXL7\",\"JhAEbSj5sAMofcxBf\",\"3zfg83pXukbJooh9R\",\"CZeLyDD2BQL3jrzzj\",\"snTKcEB844YPMyH2x\",\"J3upzLHuEwXH7Z2hx\",\"yjtdwc2AC4jA2RWtn\",\"GTKsdeEihE636Le9i\",\"bJaPCBx63YxdJAuTS\",\"gJYuGdkXEWWmGRLzu\",\"aMRkiWFriAbMPSpHS\",\"GmmbjgtmmmMgyvdtp\",\"Ce3QvRPfXG49L3JKT\",\"WCvRjpY8dRc3pRYt6\",\"9AyBHGWkdovTuwbdv\",\"FNFfXPL7gavBjPYSE\"],\"total\":114,\"quality\":[4,5,5,5,4,3,5,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,5,4,5,5,5,5,5,5,5]},\"flags\":0},\"summary\":\"A binary clock displays the time of day in binary format. Modern binary clocks have six columns of lights; two for each of the hours, minutes and seconds. The photo below shows a binary clock displaying the time \\\"12:15:45\\\":\\n\\nThe binary values increase from the bottom to the top row. Lights on the bottom row have a value of 1, lights on the row above have a val\",\"tags\":[\"arrays\",\"strings\"],\"timestamp\":{\"$date\":1577738569145},\"title\":\"Building a Binary Clock\",\"quality\":4.764705882352941,\"family\":[{\"_id\":\"JrP8aXb8tF92SriAY\",\"language\":\"cpp\"},{\"_id\":\"DZL7PpHQyPvkYiyDL\",\"language\":\"csharp\"},{\"_id\":\"3zB2qyJRpvJGCsCj4\",\"language\":\"javascript\"},{\"_id\":\"E9Wkppxyo763XywBe\",\"language\":\"python3\"},{\"_id\":\"Mmnx4S5ZJncJPhbnr\",\"language\":\"ruby\"},{\"_id\":\"NEKp7kukbwmCPDc5n\",\"language\":\"swift\"}]}}"]