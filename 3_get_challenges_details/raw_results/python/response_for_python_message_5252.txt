a["{\"msg\":\"result\",\"id\":\"1340\",\"result\":{\"_id\":\"bwCDG9X8cJiAdvfxE\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"def add_str_nums(num1, num2):\\n\\t\",\"difficulty\":2.0106951871657754,\"familyId\":\"fko6mjjBJyW2PtYAC\",\"instructions\":\"Write a function that adds two numbers. The catch, however, is that the numbers will be strings.\\n\\n### Examples\\n```\\nadd_str_nums(\\\"4\\\", \\\"5\\\") ➞ \\\"9\\\"\\n\\nadd_str_nums(\\\"abcdefg\\\", \\\"3\\\") ➞ \\\"-1\\\"\\n\\nadd_str_nums(\\\"1\\\", \\\"\\\") ➞ \\\"1\\\"\\n\\nadd_str_nums(\\\"1874682736267235927359283579235789257\\\", \\\"32652983572985729\\\") ➞ \\\"1874682736267235927391936562808774986\\\"\\n```\\n\\n### Notes\\n- If there are any non-numerical characters, return `\\\"-1\\\"`.\\n- An empty parameter should be treated as `\\\"0\\\"`.\\n- Python supports the addition of integers without limit, try this challenge without using this functionality.\\n- Your function doesn't have to add negative numbers.\\n- Zeros at the beginning of the string should be trimmed.\",\"lab\":\"Test.assert_equals(add_str_nums(\\\"\\\", \\\"\\\"), \\\"0\\\")\\nTest.assert_equals(add_str_nums(\\\"1\\\", \\\"01\\\"), \\\"2\\\")\\nTest.assert_equals(add_str_nums(\\\"1\\\",\\\"\\\"), \\\"1\\\")\\nTest.assert_equals(add_str_nums(\\\"198547982570192857109283570192837509218375091283750192835710298357019237509125710925710923759012375901275901285701925712035712983571092562945875310962518235712385971230956127856123571209358712905610923587102395716258125612095710298\\\",\\\"510298570192857910827519027510982561875691857120958371029586187585198273501982573091857091875901875809175091659812750918275091875091857918265901265918659816591750981750981759817598175089175891720570129571098758901750917501975\\\"), \\\"198548492868763049967194397711865020200936966975607313794081327943206822707399212908284015616104251803151710460793585524786631258662967654803793576863784154372202562981937878837883388807533802081502644157231966815017027363013212273\\\")\\nTest.assert_equals(add_str_nums(\\\"0000001\\\", \\\"020006\\\"), \\\"20007\\\")\\nTest.assert_equals(add_str_nums(\\\"1325123515s238579875987\\\", \\\"38698592523525325\\\"), \\\"-1\\\")\\nTest.assert_equals(add_str_nums(\\\"123456788654323456543456765432345678843234567150666666666666612735980127350918265309182653091635916258165871265087126121827562875835613875612875360182653127560192756012975608172560817653081760126578132617265192561923051397585261519826512951827401928470192864312873561298357120985710927561287356129857120851235612835712935612385971230598612035912635189273651289357120983571298035612836518237481235098172350891623508912375981206598127539128035619286350912836509123856710298560918236590138257013257219857182935681923569032656109851629851605109283560192863598126359125710982375918237598125091256012893570128357128935609128350192873501928365019283750129837401928374019283740189237401298374019823740912365012381075109823650912837501923561023650123659812375091862350912735\\\", \\\"1023570192835719836509165309156091653091875309312365123569182365123051235710298365109236501928365019283650291836501928365091256109823560921865091263509126509126350921568091265309128653091263590165309160912653809126510560165016501650650165016835610285172356137845623745623592835692836592837569283756832795693827564\\\"), \\\"123456788654323456543456765432345678843234567150666666666666612735980127350918265309182653091635916258165871265087126121827562875835613875612875360182653127560192756012975608172560817653081760126578132617265192561923051397585261519826512951827401928470192864312873561298357120985710927561287356129857120851235612835712935612385971230598612035912635189273651289357120983571298035612836518237481235098172350891623508912375981206598127539128035619286350913860079316692430135070083545746229910105132529169548059251105934155707345561928216714345785488557882881776650962212910741009493707948652177877984833637483638061960049918284138811057018110547340295146562841027828410250749402417800024669988757747975297553431247669274658461094759253860242961229096131924658044740299\\\")\",\"language\":\"python3\",\"summary\":\"Write a function that adds two numbers. The catch, however, is that the numbers will be strings.\\n\\nExamples\\naddstrnums(\\\"4\\\", \\\"5\\\") ➞ \\\"9\\\"\\n\\naddstrnums(\\\"abcdefg\\\", \\\"3\\\") ➞ \\\"-1\\\"\\n\\naddstrnums(\\\"1\\\", \\\"\\\") ➞ \\\"1\\\"\\n\\naddstrnums(\\\"1874682736267235927359283579235789257\\\", \\\"32652983572985729\\\") ➞ \\\"1874682736267235927391936562808774986\\\"\\n\\nNotes\\nIf there are any non-numerical characters,\",\"tags\":[\"strings\",\"numbers\",\"language_fundamentals\",\"math\"],\"timestamp\":{\"$date\":1568261469670},\"title\":\"Add Two String Numbers\",\"stats\":{\"completed\":{\"total\":447,\"ratings\":[3,3,3,3,3,0,2,3,2,1,1,1,3,5,2,2,1,2,1,1,3,0,0,1,2,2,3,2,3,2,0,1,0,3,3,3,2,2,0,1,2,3,3,0,2,0,3,2,2,3,3,3,3,4,2,1,3,1,1,2,0,2,2,3,2,5,2,3,2,5,3,2,2,0,3,0,3,2,3,0,1,2,2,3,3,3,1,1,2,1,3,3,3,0,1,1,0,2,0,1,3,2,2,1,2,2,2,2,3,1,2,2,5,2,3,3,2,1,2,3,1,0,2,2,1,0,1,2,3,1,2,3,1,1,3,2,2,1,3,3,3,2,2,2,1,3,2,3,2,3,2,3,0,2,3,2,2,2,2,3,2,3,3,3,3,3,3,2,1,2,2,1,0,3,3,2,3,2,2,2,1,2,1,3,3,2,2,2,1,2,1,2,3,3,1,2,2,1,1,3,2,2,2,3,1,2,2,3,3,1,3,2,0,2,2,2,2,2,2,2,3,3,1,0,1,1,3,4,3,2,2,1,5,1,0,1,1,3,1,3,3,0,1,2,3,3,2,2,1,3,3,3,2,3,0,4,2,0,3,2,2,3,3,2,3,0,1,3,2,0,0,3,2,2,3,2,1,1,3,3,1,2,3,2,1,3,2,0,1,2,1,2,2,2,3,1,2,1,3,2,0,3,3,2,3,1,2,3,2,2,2,2,3,2,0,3,0,3,2,3,2,3,3,2,3,1,4,0,0,3,1,3,2,3,2,0,3,2,3,3,1,0,3,2,1,2,3,0,3,1,3,2,1,2,2,3,3,2,0,3,3,0,0,5,1,2,2,4,3,3,3,3,2,3],\"rators\":[\"KX2fwZ8RoSsNCkCCh\",\"rp5QqQQRJxu4DcSoM\",\"tAF9Gf6PiGogbZuWs\",\"W4KHPW2WE22N4jSMY\",\"Mrij2JRigbS77FNj2\",\"gb9rvGus2Jv7bjZSs\",\"hsrNYf3WbexXJKhCq\",\"kQH5b8MXJunh84Czq\",\"zjQPuEyZ38tTW6P5w\",\"yZvzB3qFb8pkHy4dg\",\"8JyqsSbN2FJXPr3cw\",\"jHrtWDGBhkbuWa7fG\",\"nzx4uAPg3hCceyFPE\",\"gMJhLdyw3tH7L96X2\",\"cR3ibTMxLyEdDFCHY\",\"N2wnZXkhDH86mgjQ8\",\"Gkt5gbFRhhtA93B7A\",\"Dw8RZgg5iHBuFrWwQ\",\"cZ4MRs9RvG3DkSme5\",\"HQxp7NcdvF92G7bYS\",\"ttjgpjjdifjjpPXfS\",\"hSfK7dhSiKdNjMbLr\",\"wfZXhbaW5AREXapdP\",\"8PE2cfZEhQBPhe8LG\",\"3ECpdeExhBmkYXtba\",\"Jg8ZSRXe3NoDMCqGu\",\"KauecksBkbp4fdnZJ\",\"otXtuQygbcYATMZoP\",\"fP7mHD7yL42xBFNgw\",\"hAzy9apJgLWwRFGPJ\",\"nPLHaqKcAvTKqeNNe\",\"TQB5JkiQCHR7rQLmJ\",\"vewKwcMeGuk3p3MsN\",\"KpJj2dAHNBgKDF3XK\",\"BLxmcNubTiT6RH9J7\",\"hJkX94ypDvaMPFCdw\",\"EKrSBrTXuhE3f4xsR\",\"JiDXhxGzzSuXrBnmE\",\"PuJDHtAaX6vXeJJTC\",\"MaMcEJb4wrx5dbx24\",\"v9KtC8YLbMWmXiW2H\",\"2fxapKr8XGdNeaKi2\",\"78D8EBdJesQZRwFt6\",\"fAoLuqbGvHn4w2PHf\",\"TKwvG2PoWnux6kP6T\",\"h4K7zjRsZz7T6onbL\",\"dZGNAJXB24zNh2tsD\",\"m2iiZZHTpzHcEKJMn\",\"qJZsi5rhRnWA38FbA\",\"qBaLGrm952ii9K23M\",\"s5M5RvgqR9BhB9JoC\",\"HqmxnQJM66Y57twhn\",\"d4cCQRiP8rbSahjCu\",\"LqLArzZcSuzaes2Zx\",\"AYaEkTWLMmfzpwejr\",\"8S5YEwX455Ye4RtKT\",\"u5u2YpHXiNgzDNJdX\",\"CZeLyDD2BQL3jrzzj\",\"DvzpcjeQsLCSZc9r9\",\"ku7RM5GAzTssNDu6u\",\"EEjNW5t4XPGFLfq3k\",\"ySRnygsLwGGsmZhfa\",\"bLQYFBhBthDLQE3LN\",\"r5YeFXWikthQXogSb\",\"pryBJYX32n8nvRvDu\",\"Nj6FwgBtAXsaQwsM2\",\"nL6EAKGywddR3mBs3\",\"m7gqNzexmqFKfjpDc\",\"WX6R5brerMTrHs5ZM\",\"5uA8xmgifmiJrqbzy\",\"jP583n9XgXk2phWwr\",\"2rc86eoe88DLhFeJD\",\"C4QntmkYtB89GNtpd\",\"6ShafRStcvew4GfCh\",\"ydEdzuCCZt4yny9Rq\",\"yKttxy9JGn5Jzwuj6\",\"PqEKjCDkJtYoYuZfj\",\"K96FwtfDDN5WM4Bb7\",\"8PwfYqoDQFThzNtvf\",\"vJS2qEPc3Psk9nSpH\",\"GamaMNrnhrjj5tXTx\",\"Jqk2uJZZxEv5wZFze\",\"yoYQqaY6GszuTkNSs\",\"tK9oBgXjqPsPrGowj\",\"YZsZjfvd3PnLhDJrR\",\"JKb5rhL6DKcCAypF9\",\"WZMgtMKJmAymPhqt6\",\"FgkYtHLxeD8pETJ8T\",\"ab7BsQuhDo3QgE6bh\",\"kBmhcwkCqxiy4GwiZ\",\"vgTvCCxgvbCTDvaRT\",\"Z85ajWfZ4jDPkbvR4\",\"iMHrN3Wiefh9Ame38\",\"XbwyB44kHPnRgQcrB\",\"9o3TRDwE7jYs4vPLw\",\"p3dsCFdWGzWGhFrSQ\",\"iMqnZazJtLf2nhuow\",\"kc9hbbzEtggnqitHb\",\"fxtf2TvHnmCFAEi6m\",\"EQbnbkkPYtGxiviTp\",\"ek7cHB9P7rbmGEKwB\",\"3LiSLdtN58n46NEqg\",\"BByKDngfPvW6w4m7d\",\"fhc63eWh6sEazFTPJ\",\"EjbDDFRECrzQDkzrX\",\"5J4tAkdA45c76xAfk\",\"nc7bRhkxgKyqusYe3\",\"J5T8gZqiZXFuFDTQ7\",\"E6myn69326auEiR8g\",\"5Xn5ubB2EKa62BN2g\",\"aCNWav8S8Try9RkC6\",\"myXAR5qDJsBaPnff2\",\"apyi6oXgmDnnq7qw9\",\"vKbhmPuF8g5BtwZHo\",\"8hPpfWYF95K8FPDGN\",\"fENpAHmM4NPWgCNrQ\",\"fBqQjriC4QEtFNxFe\",\"BeFnbPbMnAM2SjBdZ\",\"WLFPvm65aHfgwQy7N\",\"ASZk6eFeYMj5pitoe\",\"T2vhHPhRR96hRizq8\",\"Q2q7wd5e5cfCrwPxq\",\"DXBbJKYFTBi2pxR7c\",\"4CFzv558qbGcpQwc4\",\"CXJkYoNHWPiYhqxXz\",\"aoRaYQZEQPrJT22wX\",\"7hzSvcYdq6QjoRnJY\",\"zGBTg8pHNJjuPXAA5\",\"Hryvbd5DHrRZPSeM8\",\"PXAcsKkssS2yLyDv2\",\"gRC9pSxYrN3jxCZHx\",\"GNcCEduB4wpC9K6ZQ\",\"X74H8PYX8XYkrGRQc\",\"MQoamJ5rNF7MJ58xB\",\"Hy29Av6ur3nvFNEKj\",\"sbJcFfQjQ59Wfg4Cd\",\"aEm3Wvj2rFYRL8Lrb\",\"v3fjGuc7Pq4yjFygS\",\"5nY48krepaT4a4QTN\",\"xmXodaaPF23kb5YaQ\",\"jhjeWvdDfgi8of9QT\",\"23oi2a3vQwhtLEbSj\",\"S6Zd8mPuvhuh3MFRt\",\"w3A7cBWyAfukk6xEQ\",\"KcpfY4XZ7fNamyLd3\",\"Kwj9nwCXCLL7s49KE\",\"Z4Wd4iFu5mdjSJDSA\",\"AJwBauGHyrbqgDYce\",\"3xMGAo7DPjfFyb3iw\",\"6LhWEvsGQm4iL9Hei\",\"aW4DkonHaJw6Q8PyP\",\"mDWNyaaQ9hvPCRzSd\",\"8LfTheFzvicameoz9\",\"fXfjsrGcdwpy7hedt\",\"LgLFhE8AcHxQBWBZS\",\"9pzFiFK3ANLjQfnr2\",\"Zhy5X7BZnqk8hacEw\",\"n2BRY9X8899dcG8Bw\",\"qgYikiD7WB8JciTdo\",\"So6PHm74mfJuY2WTs\",\"vLrq4dEDMM2wd68Dc\",\"Yp7uvStL97cC9fKkY\",\"3Zceb8GudqAG3onG3\",\"ZNnsMeNkdDhHjSrZb\",\"YRstQuthRkFeBiXug\",\"gJYuGdkXEWWmGRLzu\",\"YACDEqzcuKv3pZotp\",\"eMuCpJ2spXWkJjWNz\",\"peAFm8bfcEWoGPAJ3\",\"44dAzThMuyGZ5StXB\",\"kYWb8BwpKwunQkxeX\",\"eEcvEdsEXswzqgC5W\",\"3fFpbxbA9kMtEsWGv\",\"9BRiTS38aT5Yrz7zH\",\"RcFJfYquW9quJDnp5\",\"4RY3zj9C2t8GGefhi\",\"JQ5uoxA4WZgN6HyJk\",\"yYxPzFqBgtQ9fsyHM\",\"dHZqT6h4JMwk5fPC8\",\"azQuTr5LY59adhfkx\",\"XsYhWtDMoky3nAhjd\",\"FS78GK2Ysu7u8ndMs\",\"3pxHTZBsv7MKzFG6Y\",\"bCDTKAoS4biDmQ64Y\",\"zbDjaYZcYccgJtr4z\",\"KRmxvA4mWgfKvHmYN\",\"gSFJPsMXnqAog3Q9f\",\"bDH2XR5bc4GxcwtBP\",\"eEK5MpDgtJyYtZzuM\",\"5JZNWts9XEHejpvur\",\"QLdiCEGwkQZBYqTiq\",\"c3nsyfKKeQGxp6sKb\",\"yv7c4H2jimSKHEjtG\",\"8BFSTCnoe2QggN64c\",\"vBJhjd3CjiJJFACBb\",\"YsAz93yZw8KKPupKv\",\"MKT7khMBGXzA22ykf\",\"CYzKNikwEfSE3pxuD\",\"xYwt98f84WdejoLNf\",\"HF28xZKSLM9wEuqNg\",\"ZRxAkXjTCdyQTdSDw\",\"KdNDysEsy2TW5QRJ2\",\"hnyhBFWwNCz9mDfSi\",\"GM2X83qnuLXTHe5zA\",\"yr822PZmmiDDenxpB\",\"qS5Xbh5sBC28e6j7E\",\"RErqK2yM94wYyD2hk\",\"W5TajitmCyxz87zAC\",\"QkbpyExhGA8ErJWhk\",\"HAppzsJ3qECh3gBLE\",\"gWAJJmL2LL56z8oDt\",\"Cfx3cu6CedA3Hi6Fw\",\"ENsSYogEHHeDSrFod\",\"bJxaKHJqR82EWw8Su\",\"DEDniTrstQYGounXT\",\"4yNLEwL2rsx4EE5Nt\",\"rcvAxbpK7Nb73Y9ve\",\"8sNv5PTHa7XQ8bNqR\",\"wS2o3x4nrsadtC3xP\",\"6QHXQkQAcXMJ7C2kK\",\"ZMJZNTJ2Ng8o8euQJ\",\"ELfyvLSAPDbhksDBb\",\"gkqp3EuvuiFXFAFtW\",\"RpeuJcCMD4YqkG6Yq\",\"ACfb6tb7YAgoaE2ci\",\"Nua6T3dBurBy3Qfg9\",\"b5p2BRxyHrrpGC5J3\",\"Ecg4m7srYGgZsb4Ck\",\"8TAYWzqJAkXq2MAba\",\"oTg8DzeCftvYLRbae\",\"bjCsNdAEP4v9RwAjK\",\"dbB3HPu256eBrC3EX\",\"efcsSdKgupNnf9DKD\",\"yJmwiykSNfLv9NqJ2\",\"RQvQLnbRxGx6yrdHi\",\"f2BoqyCpgnmjEjLqx\",\"Lfut9z3euZ3odxFcH\",\"JS3hNM3XXkxPdg3yk\",\"HpCdcD8g3iwJTHyCg\",\"Z4M3NAa4TXquMNkHe\",\"6428wKHtwKkFdvBs5\",\"yro9W5sMuBASbki8p\",\"HDksZLiRAmpnCKHta\",\"xdgy7nWSKCekXnaJM\",\"BHp9mbAEZREsE7k8E\",\"fsziNDMoc3TX7xuvj\",\"hab8YixsXxe4CcZpP\",\"Bgo3RsQ5kzX4AvmXA\",\"twZZZnBmBsbgFyE9B\",\"qPpQfR5KyDb5Y3EFf\",\"aqFky3bJ32b5mFfaA\",\"ekQh3jzgGLsEMbKo3\",\"dynD89GCHoau9fvh7\",\"6BZMSxML2SjRgRCZn\",\"niM4xfdLG7YRvky43\",\"DpqiRAm2yo3W2x4HX\",\"pkQBaSzukotPEXmrD\",\"sX9GZp3fYyQLrBKMJ\",\"x4dfavjLEcrvAF3QQ\",\"C75Nyf5jotZJ9TfPW\",\"cykCKNJcqFBxz4T8s\",\"cRpaCxYRmGcN3Nsoj\",\"iojEnnY9FsMfYzp6f\",\"C8Gd66wwGagHmj2t8\",\"dEuJGZbBQkveCXEFk\",\"ACEZh39brWjdGkZXb\",\"6gS4E2C84vBYTYeDZ\",\"CLjeHenWc75nd8bWG\",\"BrTDhPJcACL2bsrpJ\",\"CwXsu25ygLEwQbmQC\",\"ZrKCkX7xxGGZzauFW\",\"KyJxeCm5f5SoDtRHD\",\"yjtdwc2AC4jA2RWtn\",\"eoepTq5ES5tfgY9XT\",\"xn7uGNKeAwPEkP9oA\",\"syRNbbPdLCGXbH2Gy\",\"eLSg7393cvn7gSMDM\",\"wymkBJ3ePhAkti3ZM\",\"jBR47vA7HwAZqp4QA\",\"mqJtnfNCs6CedXnay\",\"ji5f27FPz4wRRF6Ls\",\"cRtekS7Xj7duSH87A\",\"GaJNJwcdyB9ueYFst\",\"p8qqFdJ3FSk5x9z3G\",\"P7NmFbCJ5offXMRvB\",\"X5MqeHyPh6cSQCXnk\",\"Kz7ee56Ht4Ns8JjBj\",\"RehJGBFS6CYiWdjZx\",\"ZNgDGdtv5WFkcEn6K\",\"dkcmCKwqApX5jBggc\",\"zfGYZ7gpR8fxJpagh\",\"377aXz9FPFSZxyrSv\",\"Wv2vJnEj8ywNmARoF\",\"pmgFEciNrd3ES9tuu\",\"REbXuiozZdcmS4iiJ\",\"jQqahAQX57zz7PTMs\",\"Kt4TQ92a6bL869KFv\",\"K8bApEeWxN8FozSck\",\"Kh3Pc2ZRusurLaMyP\",\"QCvvnevRLhBY8XBJk\",\"4fhjJBvLBWh6QeSih\",\"MfKe55snfKsdnDejs\",\"mG8HqKiAQFTdRZthG\",\"DNACg4rcgZsPtYGZ8\",\"MtJ33oGd6Skry3dj4\",\"XjajdyybZZbkz8o5x\",\"mtRvHDpeLoSGBf8zC\",\"J23RcmzbdtBbPCTjT\",\"oig8ig9SE9RZa8ttL\",\"hkiz2Nv927cYGrA86\",\"abt2C3Y82RX3qbaPt\",\"ppxNdL4gjANz8oJLQ\",\"K4JsBLPjNKZv5LWnp\",\"qD2LrwaDrSdiybLKY\",\"EMJ6uvBZkie429gdg\",\"oBcs8GLX2ZFLXQy8y\",\"osqWm6gk2Xad7AxJf\",\"c2u7qfdaYxcyuydtu\",\"bC49w5JpRaqtjd3Rt\",\"L3BJygJoLeHsTZqfo\",\"hXoTNPPmJLzkZnkSX\",\"7ifh8r4gvyYMhKB94\",\"QRv96jmNaYsWkxQEG\",\"6F3Y6ZBAGNDGGTt9B\",\"gMjAMD8XPK9sbx7eT\",\"YRAzEBJoLvSaiPtYx\",\"bccs9koJxyQ9XNiLC\",\"mmt7jwqbmSjzRSvqh\",\"quEfQhA3xBwsCobcg\",\"DPi9QGLctq2y76KuE\",\"d8qtzoLB264iP8tdY\",\"fznzd3qnvtbFkkizz\",\"kXEfD7xxEyWd7oxxL\",\"8fZxjQfuXw5HMSRJM\",\"Fb2wehA7QgTFWry2x\",\"oHbErJxjYJhD66d5w\",\"6MjSiiBLPcvXbXcaZ\",\"KJCDwGkoXh8qtbbKr\",\"uZJqBoqeZRX3RncAR\",\"gXTAie79kiw28tx5u\",\"NG8PWBSjsM8mMhQEq\",\"J3upzLHuEwXH7Z2hx\",\"dYPkStFnLvAMsHSzZ\",\"sKfrD9gjCDHuqLzSk\",\"CLypXaZksY99mpRCm\",\"QWB32ngnJAQuAQ6Hv\",\"kEkNyqFARK9YBrhRx\",\"MKJhn7goNzuGtB5y9\",\"cAP3n5NY64uoMwzRR\",\"GT9wLv8Lipyp6YYTp\",\"xAMuN7wh2uorXC9q2\",\"5wCHxMQ5Km2bjqcGZ\",\"2nD3hNDExw2LNYq4F\",\"zd9FLSzsGz3evKafy\",\"a777e8chPvJkY3tKa\",\"NT926o5DhjZPWR5L3\",\"PytNZK9mNiRiZxPrm\",\"iaS9igNEGvpuP8rHs\",\"xQ9jZmngg97XHXCq6\",\"NGgaD9D4JHRdfWhcR\",\"GGdmhAvxXhqhhibJN\",\"q2tzvkrLASvSjkek9\",\"2QziknsznNeMPRh3g\",\"yMfpc4AFBxD8jL5iB\",\"Hhvy3EGqWBXt3nFPA\",\"K6MfKMytoJJuSGewP\",\"qAby4AWXmTNeusvg3\",\"FEYpu9RWysAgW3XnP\",\"Wpn95NqWxncQrwNgz\",\"2PufnQcsHsfymufX3\",\"YcCLwitFMAEJSnxAW\",\"rfyEkETeoS96QNH4e\",\"XNmN6ztj36a7eChbD\",\"YmQb9Mo4Xcg2vzgbn\",\"bvmTE46bfcM4ogj34\",\"vRXuYYBNuHEQ29fbm\",\"3KkyQm77zsew58Dc2\",\"KACjjdKDL97rBTyEK\",\"PWgzeK859suojbrRx\",\"fbr22rabEJMfBp7vD\",\"4Lwjr34ypKNQNQCar\",\"AQSqD9oNv2uPfxZCR\",\"u7i7WPM63n42r8R8o\",\"Ds7L5bksw2QRHjrKL\",\"LQxof8pGabGuWP7Gn\",\"w67KfQgZ6WAeY7K4Y\",\"saFDccaz4DQJrjx62\",\"eHcgvkTGsH7ZziqBo\",\"ey3CASd6Je5LEJzfB\",\"jWbd7SYDzLPjc9EDh\",\"XCnbSuZF8gdA7Lc8o\",\"kjvgTyRFyKHv44DcH\",\"o4ixjQGSaYqA2JoM4\",\"T6iBEE2jp7f7iEF2P\",\"Gt4Tebd9EWe2butv8\",\"RoGGD5cpHb4ftdLDv\",\"gKnWjDjwrJh7MK2df\",\"5HCu9Ydd86QgHDRNP\",\"mvJBakQ35CWAnbbEZ\",\"9bQyb6rW7xfE4vgrR\",\"yod5YhKtPqw2GfG9B\",\"JhX7jvtpwNyxcc39m\",\"mDgdhW58tWxaZhRxt\",\"5QN8R22z43SrwoHDz\",\"buX4mCQhtXCfBjeno\",\"Qyfyyw6oC4EHAndzo\",\"jkbavR2ATFJcpmo8M\",\"QNPbruWphPhimnrAv\",\"mw9464S5dnenqzvpm\"],\"quality\":[3,5,3,3,5,5,5,5,5,5,5,3,5,5,2,4,5,4,5,4,5,5,5,4,3,4,5,5,5,5,4,5,5,5,3,3,5,5,4,4]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.375,\"family\":[{\"_id\":\"6H6dch4q68BXQbFcM\",\"language\":\"cpp\"},{\"_id\":\"QwGgDuvWtFmDTeRHw\",\"language\":\"java\"},{\"_id\":\"3q6tbKL8BS4CgaR4c\",\"language\":\"javascript\"},{\"_id\":\"bwCDG9X8cJiAdvfxE\",\"language\":\"python3\"},{\"_id\":\"mE4XYBoSEtJmTCQZu\",\"language\":\"ruby\"}]}}"]