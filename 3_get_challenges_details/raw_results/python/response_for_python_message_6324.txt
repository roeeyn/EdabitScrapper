a["{\"msg\":\"result\",\"id\":\"1875\",\"result\":{\"_id\":\"8BQKa98d3s9Kis4vv\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"def final(r, c, i):\\n\\t\",\"difficulty\":2.5806451612903225,\"familyId\":\"Anv86bZgaeeGENgCL\",\"instructions\":\"Write a function that takes in three parameters: `r, c, i`, where:\\n\\n- `r` and `c` are the number of **rows** and **columns** to initialize a zero matrix.\\n- `i` represents the **list of incrementing operations** (+1).\\n\\nAnd returns the resulting matrix after applying all the increment operations. Each increment operation will **add 1** to the rows or columns specified in the **incrementing list**.\\n\\nTo illustrate:\\n```\\nfinal(3, 3, [\\\"2r\\\", \\\"2c\\\", \\\"1r\\\", \\\"0c\\\"])\\n\\n# Initialize a 3 x 3 matrix of zeroes.\\n\\n[\\n  [0, 0, 0],\\n  [0, 0, 0],\\n  [0, 0, 0]\\n]\\n\\n# Apply \\\"2r\\\" (increment index 2 row).\\n\\n[\\n  [0, 0, 0],\\n  [0, 0, 0],\\n  [1, 1, 1]\\n]\\n\\n# Apply \\\"2c\\\" (increment index 2 column).\\n\\n[\\n  [0, 0, 1],\\n  [0, 0, 1],\\n  [1, 1, 2]\\n]\\n\\n# Apply \\\"1r\\\" (increment index 1 row).\\n\\n[\\n  [0, 0, 1],\\n  [1, 1, 2],\\n  [1, 1, 2]\\n]\\n\\n# Apply \\\"0c\\\" (increment index 0 column).\\n# This is the result you should return.\\n\\n[\\n  [1, 0, 1],\\n  [2, 1, 2],\\n  [2, 1, 2]\\n]\\n```\\n\\n### Examples\\n```\\nfinal(2, 2, [\\\"0r\\\", \\\"0r\\\", \\\"0r\\\", \\\"1c\\\"]) ➞ [\\n  [3, 4],\\n  [0, 1]\\n]\\n\\nfinal(2, 2, [\\\"0c\\\"]) ➞ [\\n  [1, 0],\\n  [1, 0]\\n]\\n\\nfinal(3, 3, [\\\"1c\\\", \\\"2c\\\", \\\"2c\\\", \\\"3c\\\", \\\"3c\\\", \\\"3c\\\"]) ➞ [\\n    [1, 2, 3],\\n    [1, 2, 3],\\n    [1, 2, 3]\\n]\\n\\nfinal(3, 3, []) ➞ [\\n  [0, 0, 0],\\n  [0, 0, 0],\\n  [0, 0, 0]\\n]\\n```\\n\\n### Notes\\n- The 2D matrix is 0-indexed.\\n- The matrix created will have at least one row and one column.\\n- All **increment operations**  will be exactly `+1`.\",\"lab\":\"Test.assert_equals(final(2, 2, ['0r', '0r', '0r', '1c']), [\\n[3, 4], \\n[0, 1]\\n])\\n\\nTest.assert_equals(final(2, 2, ['0c']), [\\n[1, 0], \\n[1, 0]\\n])\\n\\nTest.assert_equals(final(3, 3, ['0c', '1c', '1c', '2c', '2c', '2c']), [\\n[1, 2, 3], \\n[1, 2, 3], \\n[1, 2, 3]\\n])\\n\\nTest.assert_equals(final(3, 3, [\\\"2r\\\", \\\"2c\\\", \\\"1r\\\", \\\"0c\\\"]), [\\n[1, 0, 1], \\n[2, 1, 2], \\n[2, 1, 2]\\n])\\n\\nTest.assert_equals(final(1, 1, []), [[0]])\\n\\nTest.assert_equals(final(3, 3, ['0r', '2c', '1r', '2c', '1c', '1r', '1r']), [\\n[1, 2, 3], \\n[3, 4, 5], \\n[0, 1, 2]\\n])\\n\\nTest.assert_equals(final(3, 3, []), [\\n[0, 0, 0], \\n[0, 0, 0], \\n[0, 0, 0]\\n])\\n\\nTest.assert_equals(final(3, 4, ['1r', '1r', '1r', '3c', '3c', '3c']), [\\n[0, 0, 0, 3], \\n[3, 3, 3, 6], \\n[0, 0, 0, 3]\\n])\\n\\nTest.assert_equals(final(10, 1, ['1r', '2r', '3r', '0c']), [\\n[1], \\n[2], \\n[2], \\n[2], \\n[1], \\n[1], \\n[1], \\n[1], \\n[1], \\n[1]\\n])\\n\\nTest.assert_equals(final(2, 5, ['1r', '1r', '1r', '1c', '0c', '0c', '1r', '0c', '1r', '0c']), [\\n[4, 1, 0, 0, 0], \\n[9, 6, 5, 5, 5]\\n])\",\"language\":\"python3\",\"summary\":\"Write a function that takes in three parameters: r, c, i, where:\\n\\nr and c are the number of rows and columns to initialize a zero matrix.\\ni represents the list of incrementing operations (+1).\\n\\nAnd returns the resulting matrix after applying all the increment operations. Each increment operation will add 1 to the rows or columns specified in the incrementing l\",\"tags\":[\"arrays\",\"higher_order_functions\"],\"timestamp\":{\"$date\":1557244749513},\"title\":\"Incrementing Rows and Columns\",\"stats\":{\"completed\":{\"total\":93,\"ratings\":[3,3,3,3,3,3,3,3,3,3,3,3,3,4,3,3,2,5,0,5,3,4,2,4,2,4,4,0,2,2,2,2,4,3,4,2,0,4,3,2,2,4,2,3,3,3,4,4,2,3,2,4,3,3,2,3,3,3,4,0,1,2,2,2,3,2,2,0,1,4,2,4,2,3,1,2,0,3,1,3,5,0,0,0,3,2,2,3,2,2,4,4,2],\"rators\":[\"mNMQvcxKSSvqqMYCH\",\"tAF9Gf6PiGogbZuWs\",\"8JyqsSbN2FJXPr3cw\",\"cXphpJ2WYBgvqKaPT\",\"yZvzB3qFb8pkHy4dg\",\"gb9rvGus2Jv7bjZSs\",\"nrA8Pacm3A6GqGzq4\",\"SvWKyZPZeAn6KpSBi\",\"AdpjH99CAHmMNNzXf\",\"WEsTtgWsLWeYmryTR\",\"aW2AfRdBxWt3K9AaH\",\"BoqELuXYpWrnwZewz\",\"6W2GSzrYjMD9ANBFY\",\"ab7BsQuhDo3QgE6bh\",\"MXjxGML2X75x64vJo\",\"C97pK78zjcJuB6kHq\",\"7g3vZaQXhLpxrajyg\",\"ZexarDybriuFWGA5a\",\"WHSnBonknsgyuJsFE\",\"yQgD7dzqCqA9mwEgT\",\"CioWqrzmDwyunW5zS\",\"AYaEkTWLMmfzpwejr\",\"PFjMZGHNAPTkgd7tq\",\"BFNm9gacwba9KyLFW\",\"hsrNYf3WbexXJKhCq\",\"HqmxnQJM66Y57twhn\",\"zEwSoioYyEynzxLij\",\"AbrJ8hMyv5fFXG6DN\",\"FgkYtHLxeD8pETJ8T\",\"6ShafRStcvew4GfCh\",\"Jqk2uJZZxEv5wZFze\",\"2fxapKr8XGdNeaKi2\",\"8PwfYqoDQFThzNtvf\",\"EQbnbkkPYtGxiviTp\",\"2innwjWqxJHo4eRGh\",\"Yp7uvStL97cC9fKkY\",\"aEm3Wvj2rFYRL8Lrb\",\"aCNWav8S8Try9RkC6\",\"mDWNyaaQ9hvPCRzSd\",\"AasGs8AeX9Lcb9xJn\",\"tZnAkGkxNtBoS49R2\",\"sAaYMweK7ed4mmFQW\",\"fznzd3qnvtbFkkizz\",\"nPfdEqn8RZmDzAeMW\",\"fZCwknjgeY7icBk9c\",\"ZNnsMeNkdDhHjSrZb\",\"s5M5RvgqR9BhB9JoC\",\"TQhN6YPSfQiiuCE68\",\"Nua6T3dBurBy3Qfg9\",\"GamaMNrnhrjj5tXTx\",\"W5TajitmCyxz87zAC\",\"Ecg4m7srYGgZsb4Ck\",\"xn7uGNKeAwPEkP9oA\",\"SGhPxX5bHGL8zZqtt\",\"6fJpRpAgiWD5zX9qB\",\"77dQgT3gTGWLcRPTk\",\"zZDaXBxMzTCBhNkgL\",\"5dHucvf2qBYyKim7X\",\"4fhjJBvLBWh6QeSih\",\"yjtdwc2AC4jA2RWtn\",\"HF28xZKSLM9wEuqNg\",\"v9KtC8YLbMWmXiW2H\",\"8sNv5PTHa7XQ8bNqR\",\"K3RacTvkWHLfzKF8i\",\"J3upzLHuEwXH7Z2hx\",\"iS5BrkGLzJyPK7nKt\",\"a777e8chPvJkY3tKa\",\"fSQSHjW3e72MrWxbD\",\"iojEnnY9FsMfYzp6f\",\"gXTAie79kiw28tx5u\",\"gJYuGdkXEWWmGRLzu\",\"2PufnQcsHsfymufX3\",\"yr822PZmmiDDenxpB\",\"GTKsdeEihE636Le9i\",\"PH32cNxBjrK4a28sn\",\"9izxzCBrsRCbD9ajK\",\"H9KZi2cjt4FwH7qog\",\"hkiz2Nv927cYGrA86\",\"TbFKbci4gcyWzjSBo\",\"d8qtzoLB264iP8tdY\",\"T6iBEE2jp7f7iEF2P\",\"gKnWjDjwrJh7MK2df\",\"oBcs8GLX2ZFLXQy8y\",\"Cy34THXNefcoyNNY4\",\"eHcgvkTGsH7ZziqBo\",\"hnyhBFWwNCz9mDfSi\",\"yTtSCvGPyYna6JuRC\",\"fbr22rabEJMfBp7vD\",\"euPBBaYXyS8RBr9KB\",\"buX4mCQhtXCfBjeno\",\"3iNc8eGCtE9RYM8LC\"],\"quality\":[4,5,5,5,5,5,5]},\"tests\":{\"score\":0,\"rators\":[\"mNMQvcxKSSvqqMYCH\"]},\"instructions\":{\"score\":0,\"rators\":[\"mNMQvcxKSSvqqMYCH\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.857142857142857,\"family\":[{\"_id\":\"MshtuGs6cstBqnhDu\",\"language\":\"cpp\"},{\"_id\":\"jvyJ6xmPyrWab2MeX\",\"language\":\"java\"},{\"_id\":\"Hr6HTn3ngCbmJayd4\",\"language\":\"javascript\"},{\"_id\":\"8BQKa98d3s9Kis4vv\",\"language\":\"python3\"},{\"_id\":\"Cmh2Kjr9iBKTnTPyx\",\"language\":\"ruby\"}]}}"]