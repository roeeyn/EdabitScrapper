a["{\"msg\":\"result\",\"id\":\"2003\",\"result\":{\"_id\":\"KZFEAv8Sqh9zW5eLS\",\"author\":\"bengabay1994\",\"authorId\":\"wvLkohNfDYxYbMeeC\",\"code\":\"def is_val_in_tree(tree, val):\\n\\t\",\"difficulty\":2.7954545454545454,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"w5yFNi2SavAoR3E4A\",\"instructions\":\"A list that represents a **Binary Tree** is in the following form:\\n\\n```\\nbinary_tree = [val, lst_left, lst_right]\\n```\\n\\nWhen `lst_left` is the left side of the tree and `lst_right` is the right side of the tree.\\n\\nTo illustrate:\\n\\n```\\nlist1 = [3, [ 8, [ 5, None, None], None], [ 7, None, None]]\\n\\n# list1 represents the following Binary Tree:\\n\\n                    3\\n                   / \\\\\\n                  8   7\\n                 /\\\\   /\\\\\\n                5  N N  N\\n               /\\\\\\n               N N\\n\\n# While N represents None.\\n```\\n\\nCreate a function that takes a list that represent a Binary Tree and a value and return `True` if the value is in the tree and, `False` otherwise.\\n\\n### Examples\\n```\\nis_val_in_tree(list1, 5) ➞ True\\n\\nis_val_in_tree(list1, 9) ➞ False\\n\\nis_val_in_tree(lst2, 51) ➞ False\\n```\\n\\n### Notes\\nThe tree will contain integers only and will be presented by a list in the specified format.\",\"lab\":\"lst1 = [3, [7, [1, None, None], [8, None, None]], [5, None, [4, None, None]]]\\nlst2_8 = [2, None, None]\\nlst2_6 = [24, None, None]\\nlst2_7 = [18, None, None]\\nlst2_4 = [4, lst2_8, None]\\nlst2_3 = [12, None, lst2_4]\\nlst2_2 = [10, None, lst2_3]\\nlst2_1 = [15, lst2_2, None]\\nlst2_5 = [6, lst2_6, lst2_7]\\nlst2 = [9, lst2_1, lst2_5]\\nlst3_1 = [4, None, None]\\nlst3_2 = [9, None, None]\\nlst3_3 = [21, None, None]\\nlst3_4 = [17, None, None]\\nlst3_5 = [25, None, None]\\nlst3_6 = [18, lst3_5, None]\\nlst3_7 = [20, lst3_3, lst3_4]\\nlst3_8 = [91, lst3_2, None]\\nlst3_9 = [75, None, lst3_1]\\nlst3_10 = [45, None, None]\\nlst3_11 = [71, None, None]\\nlst3_12 = [34, None, None]\\nlst3_13 = [11, None, None]\\nlst3_14 = [10, lst3_6, lst3_13]\\nlst3_15 = [3, lst3_7, lst3_12]\\nlst3_16 = [26, lst3_8, lst3_11]\\nlst3_17 = [1, lst3_9, lst3_10]\\nlst3_18 = [66, lst3_14, lst3_17]\\nlst3_19 = [52, lst3_16, lst3_15]\\nlst3 = [97, lst3_18, lst3_19]\\n\\nTest.assert_equals(is_val_in_tree(lst1, 7), True)\\nTest.assert_equals(is_val_in_tree(lst1, 4), True)\\nTest.assert_equals(is_val_in_tree(lst1, 15), False)\\nTest.assert_equals(is_val_in_tree(lst2, 18), True)\\nTest.assert_equals(is_val_in_tree(lst2, 51), False)\\nTest.assert_equals(is_val_in_tree(lst2, 23), False)\\nTest.assert_equals(is_val_in_tree(lst3, 52), True)\\nTest.assert_equals(is_val_in_tree(lst3, 120), False)\\nTest.assert_equals(is_val_in_tree(lst3, -2), False)\\nTest.assert_equals(is_val_in_tree(lst3, 91), True)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,4,4,5,4,5,1,2,0,3,3,2,4,2,3,5,1,3,4,5,1,0,5,4,5,2,3,0,4,1,2,2,5,5,0,2,5,2,3,0,0,5,4,5,5,0,3,4,5,5,0,3,5,5,5,5,1,5,2,1,2,3,0,4,2,3,0,5,3,0,5,5,3,2,5,2,5,3,2,5,0,0,2,2,2,1,0,0,2,3,2,3,2,4,2,3,4,2,2,4,3,3,2,2,3,2,5,4,2,0,2,3,0,1,3,4,5,4,1,2,2,0,4,2,0,2,3,2],\"rators\":[\"gb9rvGus2Jv7bjZSs\",\"tAF9Gf6PiGogbZuWs\",\"wvLkohNfDYxYbMeeC\",\"Ti5BF4jnruwNNzHY8\",\"CRBuiWyb9B8c5XW7w\",\"AYaEkTWLMmfzpwejr\",\"AdMsAQ2MJPAw7uWfJ\",\"Tin42WiZ4JTDEnS7b\",\"ogyeeaEAjmdSBsnta\",\"RHSuurSWTrogyYJGk\",\"8JyqsSbN2FJXPr3cw\",\"7So32qCfwhBZYWyvQ\",\"vjQizqDbKpjfHrvZA\",\"rurh72mGpAthfGRGt\",\"Nj6FwgBtAXsaQwsM2\",\"hWoF9quQYAsSsFjRn\",\"2m2joa99MiCoSDD2T\",\"JiDXhxGzzSuXrBnmE\",\"HqmxnQJM66Y57twhn\",\"z3HJc5FMzibFCs5Dv\",\"DCgMK8uoCkigbQmix\",\"6gsMupsCZJQgiwzJi\",\"wT5gGgvjKc5wz59AQ\",\"jDgJ2fdFS76TSorNc\",\"eHcgvkTGsH7ZziqBo\",\"2fxapKr8XGdNeaKi2\",\"FHSJnAYTbcsKFgeQa\",\"nLpdvK7EcahCqNe8X\",\"YuqRybodQemYZ3udH\",\"Fki4LenXE4ocaumd5\",\"AbrJ8hMyv5fFXG6DN\",\"4KoFhzpWScSMBbBxM\",\"8PwfYqoDQFThzNtvf\",\"ekbfbYdyZeXHvaG8c\",\"Kg94pDSdZJ2wSkMcY\",\"DryNRN98Dj24BpgrL\",\"izA2d4KFioKWAPmHq\",\"xyHfEdcYBDznunq6n\",\"9uZpgAtSuPZ7W7DL6\",\"v5CwS76PDQfbpTKni\",\"jN6KB4KTvvgwoYN54\",\"7YD4zQL8AGKgPhTc5\",\"T9tPSCb6hoDnZb7Zn\",\"qJZsi5rhRnWA38FbA\",\"ab7BsQuhDo3QgE6bh\",\"Q8mpPYfwDNuzfjK6y\",\"RxjsoBmCqZgg5Fq5a\",\"vGxGDPs9RBqP8oTjW\",\"LtD5jQnA63GoHjAq2\",\"hwLAvyumMvYXNv3j5\",\"sZDYNicocwXesSMXb\",\"t7BnRyo7NH5Nx22HR\",\"pzZMMmJRaxwGAgaTH\",\"X4iqEdg7dPjFpoASw\",\"4oj74SdrYfpJgEAmd\",\"nmXg7Hfeh3jMLHSsa\",\"rQWctcxr7vvh32DoM\",\"rxoqzeHeR2skKwtnp\",\"DwetpbChQM4r6Gwah\",\"Jqk2uJZZxEv5wZFze\",\"LsL3axAGtFcysTLGj\",\"7ZkXDBE8Ff3Eavci8\",\"BZ9aDwsT223J4ZG74\",\"GiK8LZt3JRKNJjj5W\",\"hAzy9apJgLWwRFGPJ\",\"fMR9RcfgPJWiLgx7k\",\"pSdBNsFmshP4TAa7y\",\"oTm8JAxW6Kxed8P6B\",\"FfogBoXMLT9wmT7no\",\"wgtHfymX9PwAsiRns\",\"vsxmgZACKE2TafBhQ\",\"tLfGHcayr2SJARuDz\",\"6W2GSzrYjMD9ANBFY\",\"JPtpz9cnJwtS8L7ui\",\"ofp8Fe9fTZhwwwyS6\",\"PweZwtXTDkEwxZXQ4\",\"3LiSLdtN58n46NEqg\",\"pypDYowvJak6xqReA\",\"Q6AFXWu4FpknpGShD\",\"ySRnygsLwGGsmZhfa\",\"azHSATBuuQ5wz9bvB\",\"8AipP2ZKTAhvzfQAr\",\"bEzNQyMN2gMp5osYJ\",\"4zh9hoYRedNq6GxN7\",\"aRqQ42J5zqCmBNd8w\",\"hE7gq3f7dLhESFehh\",\"zxmtE2mYR4xQzTHoy\",\"pAC5jpwEjjvjevyiH\",\"AasGs8AeX9Lcb9xJn\",\"aEm3Wvj2rFYRL8Lrb\",\"EAt7xgPBa69cnyDvN\",\"5HkEJE35W56jRhuNi\",\"fznzd3qnvtbFkkizz\",\"ZNnsMeNkdDhHjSrZb\",\"ywk3XGvcmpTgRxwZa\",\"gJYuGdkXEWWmGRLzu\",\"bJxaKHJqR82EWw8Su\",\"44dAzThMuyGZ5StXB\",\"MKJhn7goNzuGtB5y9\",\"2RTh69vSmMqLu4774\",\"f2BoqyCpgnmjEjLqx\",\"mDWNyaaQ9hvPCRzSd\",\"Nfsj4eNFDjaFa39ga\",\"xn7uGNKeAwPEkP9oA\",\"RehJGBFS6CYiWdjZx\",\"Nb6LYPoQP6KJZt8mz\",\"dZCm5As7ukAYa8exT\",\"Xee5tZbXofdLqNTZP\",\"qZKmArqxePB8yxE6y\",\"CybtRXsjMwA49Zfx9\",\"4LRsK5EGNjPSBmsJm\",\"a2rXtpvi3JwF7mnNd\",\"i9ZFuewHCAN5Y9sXo\",\"oyKcm3zqdy8Ko5P5d\",\"yTtSCvGPyYna6JuRC\",\"jsQJLi9LDjpXKFP28\",\"NQeRaMcSPG6RjxEXs\",\"8sNv5PTHa7XQ8bNqR\",\"iS5BrkGLzJyPK7nKt\",\"p8qqFdJ3FSk5x9z3G\",\"kWobGYgZWJxN6ZddF\",\"pfbrH83s66L2EZQsH\",\"sWQjcgDjKvNFktEPB\",\"uw8E83imJYpQiiPpP\",\"Wpn95NqWxncQrwNgz\",\"NZspSPTuFT3qvxjcY\",\"iojEnnY9FsMfYzp6f\",\"SjmvyuXe8954uYy63\",\"QRv96jmNaYsWkxQEG\",\"yjtdwc2AC4jA2RWtn\",\"Yp7uvStL97cC9fKkY\",\"SuhokLqQw2GKeWAYp\",\"9DmGYP8uq8E23qCz3\",\"GTKsdeEihE636Le9i\",\"PH32cNxBjrK4a28sn\",\"2PufnQcsHsfymufX3\",\"gXTAie79kiw28tx5u\",\"jTM8SP7MZtofRTKzc\",\"kThx8MsNaFpt3XTJC\",\"5rX3qPFdvRQ9G7xZQ\",\"hpxpbuEqv9LPBB7pR\"],\"total\":149,\"quality\":[5,5,5,4,5,5,5,5,5,5,4,5,5,5]},\"flags\":0},\"subscribers\":[\"wvLkohNfDYxYbMeeC\"],\"summary\":\"A list that represents a Binary Tree is in the following form:\\n\\nbinarytree = [val, lstleft, lst_right]\\n\\nWhen lstleft is the left side of the tree and lstright is the right side of the tree.\\n\\nTo illustrate:\\n\\nlist1 = [3, [ 8, [ 5, None, None], None], [ 7, None, None]]\\n\\nlist1 represents the following Binary Tree:\\n\\n                    3\\n                   / \\\\\",\"tags\":[\"recursion\",\"data_structures\",\"validation\"],\"timestamp\":{\"$date\":1569269403154},\"title\":\"Find Value in a Binary Tree\",\"isHidden\":false,\"quality\":4.857142857142857,\"family\":[{\"_id\":\"GGDMJ33wg8y3EHQfP\",\"language\":\"javascript\"},{\"_id\":\"KZFEAv8Sqh9zW5eLS\",\"language\":\"python3\"},{\"_id\":\"8Awn6y97C8E7EQSg3\",\"language\":\"ruby\"}]}}"]