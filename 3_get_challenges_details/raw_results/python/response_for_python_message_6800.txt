a["{\"msg\":\"result\",\"id\":\"2108\",\"result\":{\"_id\":\"28wYr5mXCa5hMimHZ\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"def valid_name(name):\\n\\t\",\"difficulty\":2.961904761904762,\"familyId\":\"RtAkDWWtweqB4tj6i\",\"instructions\":\"For this exercise, keep in mind the following two terms (mutually exclusive):\\n\\n1. **initials** = 1 character\\n2. **words** = 2+ characters (no dots allowed)\\n\\nA **valid name** is a name written in one of the following ways:\\n\\n- H. Wells\\n- H. G. Wells\\n- Herbert G. Wells\\n- Herbert George Wells\\n\\nThe following names are **invalid**:\\n\\n- Herbert  or Wells (single names not allowed)\\n- H Wells or H. G Wells (initials must end with dot)\\n- h. Wells or H. wells or h. g. Wells (incorrect capitalization)\\n- H. George Wells (middle name expanded, while first still left as initial)\\n- H. G. W. (last name is not a word)\\n- Herb. G. W. (dot only allowed after initial, not word)\\n\\n### Rules\\n1. Both initials and words must be capitalized.\\n2. Initials must end with a dot.\\n3. A name must be either 2 or 3 words long (depending on whether a middle name exists).\\n4. If the name is 3 words long, you can expand the first and middle name or expand the first name only. You **cannot** keep the first name as an initial and expand the middle name only.\\n5. The last name must be a word (not an initial).\\n\\nYour task is to write a function that determines whether a name is valid or not. Return `True` if the name is valid, `False` otherwise.\\n\\n### Examples\\n```\\nvalid_name(\\\"H. Wells\\\") ➞ True\\n\\nvalid_name(\\\"H. G. Wells\\\") ➞ True\\n\\nvalid_name(\\\"Herbert G. Wells\\\") ➞ True\\n\\nvalid_name(\\\"Herbert\\\") ➞ False\\n# Must be 2 or 3 words\\n\\nvalid_name(\\\"h. Wells\\\") ➞ False\\n# Incorrect capitalization\\n\\nvalid_name(\\\"H Wells\\\") ➞ False\\n# Missing dot after initial\\n\\nvalid_name(\\\"H. George Wells\\\") ➞ False\\n# Cannot have: initial first name + word middle name\\n\\nvalid_name(\\\"H. George W.\\\") ➞ False\\n# Last name cannot be initial\\n```\\n\\n### Notes\\nN/A\",\"lab\":\"Test.assert_equals(valid_name(\\\"H. Wells\\\"), True)\\nTest.assert_equals(valid_name(\\\"H. G. Wells\\\"), True)\\nTest.assert_equals(valid_name(\\\"Herbert G. Wells\\\"), True)\\nTest.assert_equals(valid_name(\\\"Herbert George Wells\\\"), True)\\nTest.assert_equals(valid_name(\\\"Herbert\\\"), False, \\\"Name must be 2 or 3 words.\\\")\\nTest.assert_equals(valid_name(\\\"Herbert W. G. Wells\\\"), False, \\\"Name must be 2 or 3 words.\\\")\\nTest.assert_equals(valid_name(\\\"h. Wells\\\"), False, \\\"Incorrect capitalization.\\\")\\nTest.assert_equals(valid_name(\\\"herbert G. Wells\\\"), False, \\\"Incorrect capitalization.\\\")\\nTest.assert_equals(valid_name(\\\"H Wells\\\"), False, \\\"Initials must end with a dot.\\\")\\nTest.assert_equals(valid_name(\\\"Herb. Wells\\\"), False, \\\"Words cannot end with a dot.\\\")\\nTest.assert_equals(valid_name(\\\"H. George Wells\\\"), False, \\\"First name is initial but middle name is word.\\\")\\nTest.assert_equals(valid_name(\\\"Herbert George W.\\\"), False, \\\"Last name cannot be an initial.\\\")\",\"language\":\"python3\",\"summary\":\"For this exercise, keep in mind the following two terms (mutually exclusive):\\n\\ninitials = 1 character\\nwords = 2+ characters (no dots allowed)\\n\\nA valid name is a name written in one of the following ways:\\n\\nH. Wells\\nH. G. Wells\\nHerbert G. Wells\\nHerbert George Wells\\n\\nThe following names are invalid:\\n\\nHerbert  or Wells (single names not allowed)\\nH Wells or H. G We\",\"tags\":[\"regex\",\"conditions\",\"functional_programming\"],\"timestamp\":{\"$date\":1552695073828},\"title\":\"Valid Name\",\"stats\":{\"completed\":{\"total\":221,\"ratings\":[4,4,4,4,4,4,4,4,4,4,3,2,2,3,3,2,2,2,2,5,3,3,4,3,5,4,5,5,4,4,5,5,4,4,5,2,2,2,5,5,4,4,2,3,2,3,4,2,4,3,5,2,0,3,2,0,0,1,2,5,0,1,5,2,0,2,4,4,3,0,2,4,2,5,3,5,3,1,4,3,2,5,3,0,2,5,3,2,5,0,4,3,0,5,3,2,2,2,2,5,3,5,5,3,4,3,5,5,0,3,3,2,3,3,5,3,5,5,5,5,3,5,1,3,3,3,2,2,4,2,3,2,5,2,4,1,0,2,2,5,2,2,0,2,2,2,5,0,2,5,3,2,5,4,3,5,2,3,2,2,1,2,2,2,5,5,3,5,2,2,3,2,2,2,3,0,4,2,0,3,2,3,4,3,1,2,4,3,3,2,4,3,2,3,1,4,5,5,1,1,3,3,3,5,3,4,2,2,4,1],\"rators\":[\"BkPgkDQGHm66X4Qai\",\"nydW2HwDGZuk8XaEL\",\"AYaEkTWLMmfzpwejr\",\"uSh3aNxzD28jBuhxa\",\"RT2F5THkSKcdmPgBb\",\"8JyqsSbN2FJXPr3cw\",\"ifev84ENvG5ZXsJPd\",\"vjgbYJGLr39bACXND\",\"tAF9Gf6PiGogbZuWs\",\"T3ZAuoMrJjvZwN55B\",\"hkB99Rfsg7cpuHn7P\",\"gb9rvGus2Jv7bjZSs\",\"6W2GSzrYjMD9ANBFY\",\"yZvzB3qFb8pkHy4dg\",\"P59rek6gvwTzHvRYa\",\"aW2AfRdBxWt3K9AaH\",\"WEsTtgWsLWeYmryTR\",\"nrA8Pacm3A6GqGzq4\",\"M8jrv2FfpMQp9Qzpx\",\"MXjxGML2X75x64vJo\",\"Davb2r7AbFrdGMhXi\",\"cMpkyKtXcDnuJXoZs\",\"qr28t3MiuxdsqWcbo\",\"KruzMuPcbuBw8E2CR\",\"7g3vZaQXhLpxrajyg\",\"PYg2boGDLrEcF3i4j\",\"QKYi6pYeaYFovNHX4\",\"BFNm9gacwba9KyLFW\",\"hdm3457uPzJLghf8g\",\"pci5yjeqMeYpPhfhL\",\"Ti5BF4jnruwNNzHY8\",\"Tin42WiZ4JTDEnS7b\",\"ogyeeaEAjmdSBsnta\",\"aiewS4ttQkzMquNrY\",\"FZqvnnkNHnykkwzpp\",\"6gsMupsCZJQgiwzJi\",\"dNBGNMKLZam4bvHuZ\",\"qJZsi5rhRnWA38FbA\",\"Yb4nqwm86Cgueg9d4\",\"8QNgZLrNbHPFRAEu5\",\"QACQjfJKRdg3CqFxK\",\"HqmxnQJM66Y57twhn\",\"NZLykjYrhd2HtoHnZ\",\"FHSJnAYTbcsKFgeQa\",\"p8RzB2C9xixAMaxPb\",\"Jqk2uJZZxEv5wZFze\",\"hwLAvyumMvYXNv3j5\",\"sZDYNicocwXesSMXb\",\"DwetpbChQM4r6Gwah\",\"4YXNcgvGg7dygvqpH\",\"8PwfYqoDQFThzNtvf\",\"fMR9RcfgPJWiLgx7k\",\"X4iqEdg7dPjFpoASw\",\"t7BnRyo7NH5Nx22HR\",\"C4QntmkYtB89GNtpd\",\"azHSATBuuQ5wz9bvB\",\"XbwyB44kHPnRgQcrB\",\"3SKmXhcLPPkmQhjip\",\"sJWTa7iWeRoRtqJ8N\",\"FSHzqc7ui3njdBXgT\",\"bLpgu8xTdpDPFSAsM\",\"s5M5RvgqR9BhB9JoC\",\"b86frufsMqmL5Rfxi\",\"4RB33hqWWaJ69igYK\",\"qcJrxNa4YdfHWEtPx\",\"p3g8wKKTGTocpSbtL\",\"BequD5k9EfGgz8XZ6\",\"eHcgvkTGsH7ZziqBo\",\"hhDLeh3f2FNhpLSry\",\"A7N96SLCc6ewD2Q4c\",\"2HMFHov8LPxFRTKig\",\"SGhPxX5bHGL8zZqtt\",\"R5s7YZe9KJigCJsjS\",\"LiW7nXr48ko64x82W\",\"hqiTnCHZxYu2nvNK5\",\"qRfAEHwBqZZwo4tBC\",\"Bo457Fm7HpxBzs5YT\",\"nuc8rnPKXMC3cJRqm\",\"hCwR4ufxSEu6Tfx4K\",\"2rbhQRJ7y5m6nsPwx\",\"tNAAsKADHufYRu2M4\",\"kkNuxk9p55ASzfEpG\",\"mSQTEEhWP2DZ4LRQP\",\"NciDgc6e2coTEAKAJ\",\"CByQtwf9BqB8jfEC3\",\"8LfTheFzvicameoz9\",\"6vZEAbJwvucFrCSJf\",\"fdo4pRvnDcqAttvYu\",\"7tsWn6vcuCzZFzQrH\",\"BFqWnEFkrG3hdW2zb\",\"fmDNcKsGHGfXb3zzw\",\"qLzNrPrXQwzqSwhEb\",\"zwoQipqKjhQiB3e9z\",\"MZAaNetbxGT3v8eDp\",\"SQyjqEGxsGHRSjqZ6\",\"SuJeLnhfR3smGu3WZ\",\"oCowgWfkwQR4jnyEd\",\"DhQQ6fA4KS7Mof2b7\",\"QqbFrc8xjd9cH9Lyx\",\"zxmtE2mYR4xQzTHoy\",\"7J3QpGM4fsRcGnNPR\",\"aEm3Wvj2rFYRL8Lrb\",\"k2HSpGL7RBwNM6aYs\",\"ftHKkYbL2GGNYscuc\",\"8JHcGKHg7WSdjJvdY\",\"AJwBauGHyrbqgDYce\",\"pQKacoMccp6HYmWZ8\",\"Bp96MGgshEWhymp3h\",\"zFW3LMzcHLeZhzh8s\",\"7ZkXDBE8Ff3Eavci8\",\"LQFs3xtNHpRhCZ5aT\",\"X4q24xiKnEcsxaLfb\",\"T2TdvKL8e4H4muqvT\",\"AasGs8AeX9Lcb9xJn\",\"EjbDDFRECrzQDkzrX\",\"CAq8B4PeGS9qfyT2y\",\"w328pJmrewmCTo2YG\",\"TpaErvdqgSrNYXWNk\",\"xvrvHfqw6iSwuwc5b\",\"23oi2a3vQwhtLEbSj\",\"SNiXMrGpyjDGPaaeG\",\"9uZpgAtSuPZ7W7DL6\",\"vvQHxayds7X8qf9Sk\",\"J6JFEBRDvRhendwKq\",\"8Tikd2acFcCBT8YeQ\",\"XtRDtnH9Xu5yQRN5j\",\"PTim3WupE5rNuQJgQ\",\"pHpGCimfadYznq5Wb\",\"2iFe3EHEH2YdhSKrs\",\"CRoY655aiRDBDq3uM\",\"xfPT5fiAHtJZy2pwe\",\"RiwS9QTek4bMS3wtA\",\"NCgqvvXaGksrMDiw7\",\"Ccw6oYCEjrcrWBnH7\",\"Cc2Cgj4MWXZxsTooC\",\"vTfyrr4pGddp8rbXc\",\"ZatR59KfT8s4Z3JTQ\",\"eHhL37DG7oW3vTcg7\",\"pWD2YC5s4YRCxFc2i\",\"Lfut9z3euZ3odxFcH\",\"aYuKFKSE7oKvBGHKr\",\"qb4Gv7jLm4H8xJcEd\",\"m4taAgaxZCTTYMhFr\",\"vjxLM6QpR3ZiduN9E\",\"pXNFJBaby2F7Jz7Me\",\"a9CkKmo3fkLvb3eBA\",\"6E8GoWCrHpDvHZjWG\",\"GBWaSpHiHXgBkyFn8\",\"KZcKDw8iSzX8Kpp68\",\"9zBQ4k7pWXa8Jfro4\",\"k9GEg8MW9pQeeSAX9\",\"poqx2psfWnEswCdYB\",\"3Zceb8GudqAG3onG3\",\"KXYHpCQvmTtpbGXYg\",\"C2hhPWdDZ3n9NrsvB\",\"5H9MNfC4DPwxbakTf\",\"nRXmaZgfiB5Dim8DG\",\"DryNRN98Dj24BpgrL\",\"apPTiMtyW8KNykzp8\",\"7uSjhJnYj8gTQDLdv\",\"Dbsaam5eWT8QDbhH2\",\"BqSTw7WB32ny32Nua\",\"h7in8vLPnqpKGASHo\",\"7ws5HaSof5kkoRwTM\",\"X9DEb9w3uL6bRMEsc\",\"KAK74PnuFRq5Hgk8x\",\"Fq5HQBFTP7BiTEetj\",\"wT5gGgvjKc5wz59AQ\",\"yNBxyGx8MvwGRiXSC\",\"7duFupgkxBA9Mwy2F\",\"ZNnsMeNkdDhHjSrZb\",\"5MamwZwnnEbiLzcKx\",\"7j5WZYiP4uoE7AqYC\",\"Z4M3NAa4TXquMNkHe\",\"mDWNyaaQ9hvPCRzSd\",\"R4SjTgDnpigJYDLyL\",\"tmPGWurf3Da8mhybw\",\"53HB4PyQgYTpBpsnX\",\"9LawFQ8NRRT7R8mYe\",\"xn7uGNKeAwPEkP9oA\",\"KZ2xddpM2f9JRaryB\",\"a777e8chPvJkY3tKa\",\"hakqP3KnEFbiTypxs\",\"kQGGbHYrf5fHKLdEw\",\"Bu4uGeo4jjuyFi29D\",\"Y2H5JNv4CRWTjccYs\",\"NWEAErMCtiiHxgCxM\",\"Y6w9WxXzRweSiy3Ls\",\"d8qtzoLB264iP8tdY\",\"Qy4Wr4dQLKgYSRXis\",\"sEQvZDbN3a92EcRG9\",\"8sNv5PTHa7XQ8bNqR\",\"iS5BrkGLzJyPK7nKt\",\"bvmTE46bfcM4ogj34\",\"CipP6YKLHpnfc6PSE\",\"buX4mCQhtXCfBjeno\",\"J3upzLHuEwXH7Z2hx\",\"gJYuGdkXEWWmGRLzu\",\"yjtdwc2AC4jA2RWtn\",\"croHcYvgvzmNGvWxL\",\"JKb5rhL6DKcCAypF9\",\"QjbJv5aSpuTtFBi6g\",\"emxiq9aqmoXHLWmSS\",\"J5T8gZqiZXFuFDTQ7\",\"jrRtjvrLqai7GsTKd\",\"2PufnQcsHsfymufX3\",\"GTKsdeEihE636Le9i\",\"gXTAie79kiw28tx5u\",\"DPi9QGLctq2y76KuE\",\"BByKDngfPvW6w4m7d\"],\"quality\":[4,4,4,4,5,4,5,5,5]},\"tests\":{\"score\":0,\"rators\":[\"BkPgkDQGHm66X4Qai\"]},\"instructions\":{\"score\":-12.299999999999999,\"rators\":[\"BkPgkDQGHm66X4Qai\"],\"voters\":[\"qF43zPgDdaaW4JE7Z\",\"nnpWq5dzmAYrHJKAW\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.444444444444445,\"family\":[{\"_id\":\"aZBfsFhLZmE384E5m\",\"language\":\"cpp\"},{\"_id\":\"pcHzxfGheeNE4JDpR\",\"language\":\"csharp\"},{\"_id\":\"jLbdG6YvkYCizS662\",\"language\":\"java\"},{\"_id\":\"xPBFGvKQfRFEyy4vx\",\"language\":\"javascript\"},{\"_id\":\"28wYr5mXCa5hMimHZ\",\"language\":\"python3\"},{\"_id\":\"yhm3AinMBWtygkWYM\",\"language\":\"ruby\"},{\"_id\":\"qxa32yuNGHxiST8mj\",\"language\":\"swift\"}]}}"]