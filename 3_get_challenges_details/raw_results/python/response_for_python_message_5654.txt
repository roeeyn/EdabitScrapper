a["{\"msg\":\"result\",\"id\":\"1540\",\"result\":{\"_id\":\"Rp6MLyZsGoTeM3QZQ\",\"author\":\"Rahul Choubey\",\"authorId\":\"zZ43WzxvFu7kaTKZ6\",\"code\":\"def char_box(size):\\n\\t\",\"difficulty\":2.0985915492957745,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"eqiz6AcvLR3SHtNxT\",\"instructions\":\"This is based on Helen Yu's [Making a Box](https://edabit.com/challenge/dy3WWJr34gSGRPLee) challenge. This challenge is the same execpt that instead of a list of strings, your function should output a matrix of characters.\\n\\n### Examples\\n```\\nchar_box(1) ➞ [\\n  [\\\"#\\\"]\\n]\\n\\nchar_box(4) ➞ [\\n  [\\\"#\\\", \\\"#\\\", \\\"#\\\", \\\"#\\\"],\\n  [\\\"#\\\", \\\" \\\", \\\" \\\", \\\"#\\\"],\\n  [\\\"#\\\", \\\" \\\", \\\" \\\", \\\"#\\\"],\\n  [\\\"#\\\", \\\"#\\\", \\\"#\\\", \\\"#\\\"]\\n]\\n\\nchar_box(2) ➞ [\\n  [\\\"#\\\", \\\"#\\\"],\\n  [\\\"#\\\", \\\"#\\\"]\\n]\\n```\\n\\n### Notes\\nAs an added bonus, try making `char_box(0)` output `[[]]` and make any strings, non-integers, and negative numbers output `-1`.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"# standard cases\\nTest.assert_equals(char_box(1), [[\\\"#\\\"]])\\nTest.assert_equals(char_box(2), [[\\\"#\\\", \\\"#\\\"], [\\\"#\\\", \\\"#\\\"]])\\nTest.assert_equals(char_box(4), [[\\\"#\\\", \\\"#\\\", \\\"#\\\", \\\"#\\\"], [\\\"#\\\", \\\" \\\", \\\" \\\", \\\"#\\\"], [\\\"#\\\", \\\" \\\", \\\" \\\", \\\"#\\\"], [\\\"#\\\", \\\"#\\\", \\\"#\\\", \\\"#\\\"]])\\nTest.assert_equals(char_box(3), [[\\\"#\\\", \\\"#\\\", \\\"#\\\"], [\\\"#\\\", \\\" \\\", \\\"#\\\"], [\\\"#\\\", \\\"#\\\", \\\"#\\\"]])\\nTest.assert_equals(char_boxn# special cases\\nTest.assert_equals(char_box(0), [[]], \\\"Value at 0 should be empty\\\")\\nTest.assert_equals(char_box(\\\"Hi\\\"), -1, \\\"String values should output -1\\\")\\nTest.assert_equals(char_box(.23), -1, \\\"Decimal valus should output -1\\\")\\nTest.assert_equals(char_box(-4), -1, \\\"Negative values should output -1\\\")\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,1,3,4,1,3,2,3,2,1,1,0,0,0,5,2,2,1,0,2,3,3,3,2,3,3,2,3,1,2,1,1,3,3,2,2,3,3,3,2,2,1,2,3,1,3,0,3,3,0,0,4,2,3,2,1,3,2,0,1,3,3,1,3,2,2,3],\"rators\":[\"aEm3Wvj2rFYRL8Lrb\",\"mDWNyaaQ9hvPCRzSd\",\"8PwfYqoDQFThzNtvf\",\"55RQznnuTGpsj3EXd\",\"DpqiRAm2yo3W2x4HX\",\"yYxPzFqBgtQ9fsyHM\",\"ekQh3jzgGLsEMbKo3\",\"AasGs8AeX9Lcb9xJn\",\"v7xDCZYGnLQa4eJ2g\",\"qPpQfR5KyDb5Y3EFf\",\"jFcHRfu77aNu6YpZg\",\"qab4tYm6vJQcpKLfi\",\"W5TajitmCyxz87zAC\",\"J5T8gZqiZXFuFDTQ7\",\"gb9rvGus2Jv7bjZSs\",\"gJYuGdkXEWWmGRLzu\",\"8JyqsSbN2FJXPr3cw\",\"v9KtC8YLbMWmXiW2H\",\"p9riYAbHXwJZ9PhWf\",\"sz8ufn9i8zeiGWpAy\",\"DEDniTrstQYGounXT\",\"hnyhBFWwNCz9mDfSi\",\"4rwxLqLs2mNZNg8NB\",\"aCNWav8S8Try9RkC6\",\"n2BRY9X8899dcG8Bw\",\"Nua6T3dBurBy3Qfg9\",\"iojEnnY9FsMfYzp6f\",\"wmrQRvKKNT2YE4aYi\",\"zZDaXBxMzTCBhNkgL\",\"yjtdwc2AC4jA2RWtn\",\"cR3ibTMxLyEdDFCHY\",\"tAF9Gf6PiGogbZuWs\",\"s5M5RvgqR9BhB9JoC\",\"Yp7uvStL97cC9fKkY\",\"p8qqFdJ3FSk5x9z3G\",\"8fZxjQfuXw5HMSRJM\",\"DPi9QGLctq2y76KuE\",\"QRv96jmNaYsWkxQEG\",\"xn7uGNKeAwPEkP9oA\",\"iS5BrkGLzJyPK7nKt\",\"J3upzLHuEwXH7Z2hx\",\"DyjCBBvcoMytDxAr5\",\"gXTAie79kiw28tx5u\",\"StNu7DPyTgEStZsMY\",\"Jqk2uJZZxEv5wZFze\",\"qZQxPQ2kaNKAMesHT\",\"Z85ajWfZ4jDPkbvR4\",\"PytNZK9mNiRiZxPrm\",\"cAP3n5NY64uoMwzRR\",\"oBcs8GLX2ZFLXQy8y\",\"Wpn95NqWxncQrwNgz\",\"GGdmhAvxXhqhhibJN\",\"HqmxnQJM66Y57twhn\",\"PC3pLs36zNzpRDSuE\",\"PWgzeK859suojbrRx\",\"QvEXmSEo3ANp3yPyH\",\"gKnWjDjwrJh7MK2df\",\"PH32cNxBjrK4a28sn\",\"AhZwrR5qRuHYSxCd9\",\"AFfw7cGg83uYk2Miy\",\"yod5YhKtPqw2GfG9B\",\"CHvzhtXnv8HTbPQ56\",\"2PufnQcsHsfymufX3\",\"qaR8DnWrTk8Mus5Q2\",\"T6iBEE2jp7f7iEF2P\",\"8sNv5PTHa7XQ8bNqR\",\"nkH3HfJXLMNcBMM79\",\"Ds7L5bksw2QRHjrKL\",\"k3uLZZYRxc3vxPBcZ\",\"ey3CASd6Je5LEJzfB\",\"eHcgvkTGsH7ZziqBo\",\"DQskEvAv5KiJDPtGF\",\"9pzFiFK3ANLjQfnr2\"],\"total\":78,\"quality\":[4,5,5,5,3,5,5]},\"flags\":0},\"summary\":\"This is based on Helen Yu's Making a Box challenge. This challenge is the same execpt that instead of a list of strings, your function should output a matrix of characters.\\n\\nExamples\\nchar_box(1) ➞ [\\n  [\\\"#\\\"]\\n]\\n\\nchar_box(4) ➞ [\\n  [\\\"#\\\", \\\"#\\\", \\\"#\\\", \\\"#\\\"],\\n  [\\\"#\\\", \\\" \\\", \\\" \\\", \\\"#\\\"],\\n  [\\\"#\\\", \\\" \\\", \\\" \\\", \\\"#\\\"],\\n  [\\\"#\\\", \\\"#\\\", \\\"#\\\", \\\"#\\\"]\\n]\\n\\nchar_box(2) ➞ [\\n  [\\\"#\\\", \\\"#\\\"],\\n  [\\\"#\\\",\",\"tags\":[\"validation\",\"formatting\"],\"timestamp\":{\"$date\":1592165290354},\"title\":\"Making a Box 2.0!\",\"quality\":4.571428571428571,\"family\":[{\"_id\":\"jXJZoEXNF5jBvc7j4\",\"language\":\"javascript\"},{\"_id\":\"Rp6MLyZsGoTeM3QZQ\",\"language\":\"python3\"}]}}"]