a["{\"msg\":\"result\",\"id\":\"1213\",\"result\":{\"_id\":\"Wm8Zin8gQGsupNmbJ\",\"archived\":false,\"author\":\"kochug\",\"authorId\":\"vQEmjTRgmdGNYB7yk\",\"code\":\"def binary_conversion(txt):\\n\\t\",\"difficulty\":1.6940639269406392,\"familyId\":\"ibACzTMt3sz9F6n6p\",\"instructions\":\"Create a function that takes a string of 1's and 0's (binary) as an argument and return the equivalent decoded ASCII text. Characters can be in the range of \\\"00000000\\\" to \\\"11111111\\\", which means every **eight digits** of binary input represents a single character.\\n\\n- a = 01100001\\n- b = 01100010\\n- c = 01100011\\n\\nIf you were to combine these characters into the string \\\"abc\\\", the corresponding binary would be 011000010110001001100011. Use the resources tab for more info on how to approach this.\\n\\n### Examples\\n```\\nbinary_conversion(\\\"011001010110010001100001011000100110100101110100\\\") ➞ \\\"edabit\\\"\\n\\nbinary_conversion(\\\"001100010011001000110011\\\") ➞ \\\"123\\\"\\n\\nbinary_conversion(\\\"010010000110010101101100011011000110111100111111\\\") ➞ \\\"Hello?\\\"\\n```\\n\\n### Notes\\nIf you are given an empty string as input, you must also return an empty string. Otherwise, the input  will always be a valid binary string.\",\"lab\":\"Test.assert_equals(binary_conversion(\\\"011001010110010001100001011000100110100101110100\\\"), 'edabit')\\nTest.assert_equals(binary_conversion(\\\"001100010011001000110011\\\"), \\\"123\\\")\\nTest.assert_equals(binary_conversion(\\\"010010000110010101101100011011000110111100111111\\\"), \\\"Hello?\\\")\\nTest.assert_equals(binary_conversion(\\\"\\\"), \\\"\\\")\\nTest.assert_equals(binary_conversionrtyUIOLdfgbbhnmIKBJKHIUO(?>?<~~~~~)(*&%^98713/-/*-*/\\\")\",\"language\":\"python3\",\"summary\":\"Create a function that takes a string of 1's and 0's (binary) as an argument and return the equivalent decoded ASCII text. Characters can be in the range of \\\"00000000\\\" to \\\"11111111\\\", which means every eight digits of binary input represents a single character.\\n\\na = 01100001\\nb = 01100010\\nc = 01100011\\n\\nIf you were to combine these characters into the string \\\"abc\",\"tags\":[\"strings\",\"formatting\"],\"timestamp\":{\"$date\":1524386288433},\"title\":\"Binary to ASCII Conversion\",\"stats\":{\"completed\":{\"total\":244,\"ratings\":[1,1,1,1,1,3,2,2,1,0,2,1,0,2,1,2,2,2,2,1,2,2,2,0,2,1,2,1,2,2,1,2,0,2,2,2,2,1,2,1,1,1,2,1,1,2,3,2,3,1,1,1,2,2,2,1,2,2,2,0,2,2,2,2,3,1,2,1,1,2,2,1,1,3,2,1,2,2,1,2,2,1,2,3,5,2,2,2,1,3,2,2,1,2,2,3,2,2,2,2,2,2,1,2,2,2,2,2,3,1,2,2,2,2,2,1,1,2,1,1,2,0,1,2,2,2,2,2,2,2,2,0,2,2,2,2,2,1,2,2,1,2,2,1,3,2,1,2,2,2,2,1,3,2,2,3,2,1,2,1,1,2,1,2,2,2,2,2,2,0,0,2,2,2,2,2,1,2,1,1,2,2,3,0,2,2,2,2,1,2,2,0,3,2,2,2,5,1,1,1,2,2,1,2,1,2,1,1,0,2,1,2,2,2,1,1,3,1,1],\"rators\":[\"vQEmjTRgmdGNYB7yk\",\"HK3RW4kr7acFSAyL4\",\"ifeqMFy5JCW3Gujx2\",\"tuyDaJzFy78jxvhCY\",\"6fJpRpAgiWD5zX9qB\",\"iEMnJaXXfa6dzdQzb\",\"Ws72RoCASTFuTyokF\",\"23oi2a3vQwhtLEbSj\",\"KHLJJM4grqF6xmo5t\",\"5JXnPbYC8RuBG6FkM\",\"QjpzasKxy3xBakLzz\",\"mqXfzC24CdThpCaGd\",\"ewyPo746vdNES9LwS\",\"neTnZrjDSnHoYZFsB\",\"ZxF3LkWqeo4fe4ziK\",\"GRZzKCbeb4xKHFCrZ\",\"m2iiZZHTpzHcEKJMn\",\"LfR9Bopm57BMNNnkp\",\"4NnRqrPwSGKGKT4Nb\",\"WKsvry6M74GDrtqHQ\",\"mgJoduE8pStdjNmPD\",\"tEZYGGHp8ux3TrPy6\",\"pdcaC4fEtsubBz4Wo\",\"3aSufMRSzHQ3cuo9n\",\"jDoFYBX4iQiTXFEdf\",\"NtYYXX2xhtZx5FsoT\",\"aW8Qb8d3hAsWp2rWn\",\"QyYmR6GqGSiw8KXYc\",\"mCMD9CNp9rA7tbYoB\",\"wPhd86JGzcCkkQdyy\",\"ARMcFvGNE8u93RdM4\",\"7CwgH38hHpiGdu2zT\",\"5f8x8WgpAPxfx9ZKo\",\"SYtafu5CmMMHqBtJi\",\"JxADc5CTg3NZvRR74\",\"wsLXJ3frxkTxTs9mh\",\"sbbmKmrBrszLvWqqC\",\"YG776yzpLWoxa5GJs\",\"nZ58gDWFhqXiZpmZQ\",\"tAF9Gf6PiGogbZuWs\",\"mdfg7jzShpAzFi2Bb\",\"z9FqvdkSb7hYJ63p5\",\"3hnNN45MzxXW7uPR8\",\"8yXcdARsCtaYrQaNc\",\"9j8nvw7NhJoMm34HF\",\"2GuzKEuE5QK5nDyrQ\",\"THD2EHgtJa2ooivJK\",\"M8jrv2FfpMQp9Qzpx\",\"Qm7WibLuCP7hW3iXi\",\"2tCCFm5iefjrRSaxv\",\"mJvkMXND2BjRvtped\",\"T2W32kBnES6zya9Bv\",\"jeuoearPPTcGPgXhf\",\"T82JyZFPNz8maF8f8\",\"SK3kJggzuets9AFj6\",\"RsX6W2ddWM8ajHzss\",\"eW5cHd5p5nv9XoLr4\",\"Kzom5ikn7BRrRgiES\",\"QgdwHjy4x6MCPwfh9\",\"Nj6FwgBtAXsaQwsM2\",\"SKabuq5XuhXBugKBa\",\"uJ5A3zjLi9iN5eeXX\",\"76bsExTtMg8MCyX36\",\"jwgBL9AKmfxPCFoTo\",\"PAjQoyYKAkYAXERhf\",\"pT7ESkjcQTjmmaTXv\",\"n9PZCXcWTygjaDsXs\",\"hR7GMiqGap4CzEWSy\",\"xQ7uLC6QTtEyKENv9\",\"uSiHKggtKNw9CLzyJ\",\"TJQcScCtNRobD8P4k\",\"FjLPxCcT7urtALbos\",\"83i7PKDRGfBw5DLst\",\"zgoEhAyhrjnsSLPGw\",\"q5s7yTnMdEoeXRTnH\",\"oESR33eXHntMJxp2Q\",\"vjgbYJGLr39bACXND\",\"ArC3TpnruJnWYDzHM\",\"J3RFGrYLugHTTDxww\",\"6W2GSzrYjMD9ANBFY\",\"vwmjqntQ9FvszKRye\",\"8JyqsSbN2FJXPr3cw\",\"FHzvDACEZuAjRwL7v\",\"j3XimmYb3NEL5gLxX\",\"qvEvDcL32a5F4Tg6c\",\"z7KAn4vEJTcrDKaum\",\"mGmoXwXiopnnnqYdh\",\"gb9rvGus2Jv7bjZSs\",\"FyDah3MTRW8vXTB6G\",\"pCwfK44dG72qZWzvs\",\"PRPv763woB2EqjWvZ\",\"Jqk2uJZZxEv5wZFze\",\"p6MPFLtmJ2z8EQT4Q\",\"yZvzB3qFb8pkHy4dg\",\"4HC75a4BAtjSd8jPv\",\"X9NeqaKpfykoscpYr\",\"uSh3aNxzD28jBuhxa\",\"Y3KkPrBzMBgMiqaQ6\",\"T3ZAuoMrJjvZwN55B\",\"FikSPhcrHBpQ4CyGC\",\"ab7BsQuhDo3QgE6bh\",\"AF6LgdKhEdzwgRJom\",\"eq6bWgNCAXLkFj4tx\",\"4kJMafuJWxzhDht2w\",\"6ckDJWbyznyQQLkrP\",\"nc7bRhkxgKyqusYe3\",\"PFjMZGHNAPTkgd7tq\",\"TNQ7ixK78HHTLP7it\",\"ahWFxnaxt9bXSA4f3\",\"tHEH9MBHBAGvhgJGd\",\"kQH5b8MXJunh84Czq\",\"C9LKGu2g5hSijvDzA\",\"TNMAJidLpPdH4kmBv\",\"yrCNkFYQBEDE76eFS\",\"PSrcg6fy835R4c5CW\",\"6u7yc9m6HuHGbHzph\",\"WkWyq9wMkZhXB6zsD\",\"gMJhLdyw3tH7L96X2\",\"nfXGHENb5md7m355s\",\"JEAi9mG3vvBomJ3Yu\",\"N2wnZXkhDH86mgjQ8\",\"498CxrZQdThLMa7ki\",\"XKi8iZXBCHCaebSHh\",\"cR3ibTMxLyEdDFCHY\",\"yAouD3PxzED8a4gap\",\"T2vhHPhRR96hRizq8\",\"HQxp7NcdvF92G7bYS\",\"otXtuQygbcYATMZoP\",\"HqmxnQJM66Y57twhn\",\"2fxapKr8XGdNeaKi2\",\"K96FwtfDDN5WM4Bb7\",\"K3RacTvkWHLfzKF8i\",\"u5u2YpHXiNgzDNJdX\",\"C4QntmkYtB89GNtpd\",\"6ShafRStcvew4GfCh\",\"EDbTsaBeoXPCtpfvh\",\"DLai9DxpZN6p5TPRX\",\"3LiSLdtN58n46NEqg\",\"Xj6R2zqhgumffQCAN\",\"8ypYnCjboRkHCmWEd\",\"PXAcsKkssS2yLyDv2\",\"2innwjWqxJHo4eRGh\",\"BeFnbPbMnAM2SjBdZ\",\"vgTvCCxgvbCTDvaRT\",\"AasGs8AeX9Lcb9xJn\",\"4CFzv558qbGcpQwc4\",\"s5M5RvgqR9BhB9JoC\",\"v3fjGuc7Pq4yjFygS\",\"sJWTa7iWeRoRtqJ8N\",\"vLrq4dEDMM2wd68Dc\",\"dHZqT6h4JMwk5fPC8\",\"Yp7uvStL97cC9fKkY\",\"jNvegJWCk5HCtEMbK\",\"ZNnsMeNkdDhHjSrZb\",\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\",\"gJYuGdkXEWWmGRLzu\",\"DEDniTrstQYGounXT\",\"HF28xZKSLM9wEuqNg\",\"hnyhBFWwNCz9mDfSi\",\"KdNDysEsy2TW5QRJ2\",\"rgvAJFwfCeYoYnFTK\",\"9pzFiFK3ANLjQfnr2\",\"2L4wnWTvoXdAst9wG\",\"F2ykFxhDEEkj6N5KE\",\"ahk2qiXKJA753wAJk\",\"4rwxLqLs2mNZNg8NB\",\"a777e8chPvJkY3tKa\",\"FxJxxwowtXYCaLaeD\",\"n2BRY9X8899dcG8Bw\",\"NG8PWBSjsM8mMhQEq\",\"iojEnnY9FsMfYzp6f\",\"syRNbbPdLCGXbH2Gy\",\"LLvmxMFKX6zqHPxtx\",\"yjtdwc2AC4jA2RWtn\",\"Pe8vWpDHRuH9nSGKW\",\"i5iePG5GqhJJ8HEoB\",\"b5oEvBqHWLRnJgp22\",\"w2HhxvSLmDhaGCAjE\",\"hRiMXDZNAzyPd5tpt\",\"oBcs8GLX2ZFLXQy8y\",\"tpxMgkGSHwBjS95Ta\",\"gYTBmuAkzZxfG3es2\",\"QRv96jmNaYsWkxQEG\",\"gXTAie79kiw28tx5u\",\"DPi9QGLctq2y76KuE\",\"J3upzLHuEwXH7Z2hx\",\"dYPkStFnLvAMsHSzZ\",\"iS5BrkGLzJyPK7nKt\",\"FEYpu9RWysAgW3XnP\",\"5XiuAqicKD4hBdu63\",\"cAP3n5NY64uoMwzRR\",\"t5sZF4aR7a28Bm56W\",\"zd9FLSzsGz3evKafy\",\"dBzwBtRjZqB98DJeB\",\"RGMbFMZXJr7DhcAJy\",\"YmMgWhzhHhQLmGGgH\",\"5S9nX4rKsnCcnv4Cz\",\"YRAzEBJoLvSaiPtYx\",\"GGdmhAvxXhqhhibJN\",\"rfyEkETeoS96QNH4e\",\"srJ34BaybkQh3qRkM\",\"YcCLwitFMAEJSnxAW\",\"sbJcFfQjQ59Wfg4Cd\",\"qAby4AWXmTNeusvg3\",\"Ds7L5bksw2QRHjrKL\",\"M6fxKEh6am7YajPiT\",\"2u9wghjCydey6aWys\",\"J5T8gZqiZXFuFDTQ7\",\"o4ixjQGSaYqA2JoM4\",\"CHvzhtXnv8HTbPQ56\",\"eMuCpJ2spXWkJjWNz\",\"5HCu9Ydd86QgHDRNP\",\"yr822PZmmiDDenxpB\",\"AJexRBN9cYQmqvYu6\",\"RnCue6232fMBH22h4\",\"qzXAMXsHZGT8o5hTA\",\"buX4mCQhtXCfBjeno\",\"T6iBEE2jp7f7iEF2P\",\"mvJBakQ35CWAnbbEZ\",\"sHjfbGQGLHE6JR6qu\",\"yod5YhKtPqw2GfG9B\",\"dzS6WBTMHyFEag6Fp\",\"rhS8qXRjZcpDXkwnE\",\"BrTDhPJcACL2bsrpJ\",\"T6Rm8mREPMZSftzrC\",\"ey3CASd6Je5LEJzfB\",\"2PufnQcsHsfymufX3\",\"4Lwjr34ypKNQNQCar\",\"mxX4rH5ELYkdZ2Mbw\",\"5rX3qPFdvRQ9G7xZQ\",\"3nied3n8KG8RSNixH\",\"Wi4H6ayKsNDWWQCG5\"],\"quality\":[5,5,4,3,5,5,5,5,2,5,5,5,5,5,5,5,5,5]},\"complaints\":{\"total\":0,\"reasons\":[],\"skippers\":[\"vQEmjTRgmdGNYB7yk\"]},\"instructions\":{\"score\":6.6,\"voters\":[\"j9gg82Bp2L7nw7DyJ\"]},\"tests\":{\"score\":0,\"voters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.666666666666667,\"family\":[{\"_id\":\"gWfAshz33PQLopPpC\",\"language\":\"cpp\"},{\"_id\":\"GqqYA3RKuok5Pw2Bx\",\"language\":\"java\"},{\"_id\":\"p3NwqZ2evahs9jnPh\",\"language\":\"javascript\"},{\"_id\":\"Wm8Zin8gQGsupNmbJ\",\"language\":\"python3\"},{\"_id\":\"j7MK2s5h8Loqo5FbK\",\"language\":\"ruby\"}]}}"]