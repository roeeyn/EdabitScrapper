a["{\"msg\":\"result\",\"id\":\"1747\",\"result\":{\"_id\":\"dLnZLi8FjaK6qKcvv\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"class Shiritori:\\n\\t\",\"difficulty\":2.2783783783783784,\"familyId\":\"HRraG5TEEebBMfEzr\",\"instructions\":\"This challenge is an English twist on the Japanese word game **Shiritori**. The basic premise is to follow two rules:\\n\\n1. **First character** of **next word** must match **last character** of **previous word**.\\n2. The word must not have already been said.\\n\\nBelow is an example of a **Shiritori** game:\\n```\\n[\\\"word\\\", \\\"dowry\\\", \\\"yodel\\\", \\\"leader\\\", \\\"righteous\\\", \\\"serpent\\\"]  #valid!\\n\\n[\\\"motive\\\", \\\"beach\\\"]  # invalid! - beach should start with \\\"e\\\"\\n\\n[\\\"hive\\\", \\\"eh\\\", \\\"hive\\\"]  # invalid! - \\\"hive\\\" has already been said\\n```\\n\\nWrite a **Shiritori class** that has **two instance variables**:\\n\\n- **words**: a list of words already said.\\n- **game_over**: a boolean that is true if the game is over.\\n\\nand **two instance methods**:\\n\\n- **play**: a method that takes in a word as an argument and checks if it is valid (the word should follow rules #1 and #2 above).\\n\\n    - If it is valid, it adds the word to the **words** list, and returns the **words** list.\\n    - If it is invalid (either rule is broken), it returns **\\\"game over\\\"** and sets the **game_over** boolean to **true**.\\n\\n- **restart**: a method that sets the **words** list to an empty one `[]` and sets the **game_over** boolean to **false**. It should return **\\\"game restarted\\\"**.\\n\\n\\n### Examples\\n```\\nmy_shiritori = Shiritori()\\n\\nmy_shiritori.play(\\\"apple\\\") ➞ [\\\"apple\\\"]\\nmy_shiritori.play(\\\"ear\\\") ➞ [\\\"apple\\\", \\\"ear\\\"]\\nmy_shiritori.play(\\\"rhino\\\") ➞ [\\\"apple\\\", \\\"ear\\\", \\\"rhino\\\"]\\nmy_shiritori.play(\\\"corn\\\") ➞ \\\"game over\\\"\\n\\n# Corn does not start with an \\\"o\\\".\\n\\nmy_shiritori.words ➞  [\\\"apple\\\", \\\"ear\\\", \\\"rhino\\\"]\\n\\n# Words should be accessible.\\n\\nmy_shiritori.restart() ➞ \\\"game restarted\\\"\\nmy_shiritori.words ➞ []\\n\\n# Words list should be set back to empty.\\n\\nmy_shiritori.play(\\\"hostess\\\") ➞ [\\\"hostess\\\"]\\nmy_shiritori.play(\\\"stash\\\") ➞ [\\\"hostess\\\", \\\"stash\\\"]\\nmy_shiritori.play(\\\"hostess\\\") ➞ \\\"game over\\\"\\n\\n# Words cannot have already been said.\\n```\\n\\n### Notes\\n- Note: The **play** method should **not** add an invalid word to the **words** list.\\n- You don't need to worry about capitalization or white spaces for the inputs for the **play** method.\\n- The **play** method will only take in **single arguments** as inputs.\\n- Read more about Shiritori in the **Resources** tab.\",\"lab\":\"my_shiritori = Shiritori()\\n\\nTest.assert_equals(my_shiritori.game_over, False)\\nTest.assert_equals(my_shiritori.play(\\\"apple\\\"), [\\\"apple\\\"])\\nTest.assert_equals(my_shiritori.words, [\\\"apple\\\"])\\nTest.assert_equals(my_shiritori.play(\\\"ear\\\"), [\\\"apple\\\", \\\"ear\\\"])\\nTest.assert_equals(my_shiritori.play(\\\"rhino\\\"), [\\\"apple\\\", \\\"ear\\\", \\\"rhino\\\"])\\nTest.assert_equals(my_shiritori.play(\\\"ocelot\\\"), [\\\"apple\\\", \\\"ear\\\", \\\"rhino\\\", \\\"ocelot\\\"])\\nTest.assert_equals(my_shiritori.game_over, False)\\nTest.assert_equals(my_shiritori.play(\\\"oops\\\"), \\\"game over\\\", \\\"does not follow Rule 1 (input word's first character = last words last character)\\\")\\nTest.assert_equals(my_shiritori.game_over, True)\\nTest.assert_equals(my_shiritori.words, [\\\"apple\\\", \\\"ear\\\", \\\"rhino\\\", \\\"ocelot\\\"], \\\"oops should not be added to the array\\\")\\n\\nTest.assert_equals(my_shiritori.restart(), \\\"game restarted\\\")\\nTest.assert_equals(my_shiritori.words, [])\\nTest.assert_equals(my_shiritori.game_over, False)\\nTest.assert_equals(my_shiritori.play(\\\"hostess\\\"), [\\\"hostess\\\"])\\nTest.assert_equals(my_shiritori.game_over, False)\\nTest.assert_equals(my_shiritori.play(\\\"stash\\\"), [\\\"hostess\\\", \\\"stash\\\"])\\nTest.assert_equals(my_shiritori.play(\\\"hostess\\\"), \\\"game over\\\", \\\"does not follow Rule 2 (word already exists in array)\\\")\\nTest.assert_equals(my_shiritori.words, [\\\"hostess\\\", \\\"stash\\\"])\",\"language\":\"python3\",\"summary\":\"This challenge is an English twist on the Japanese word game Shiritori. The basic premise is to follow two rules:\\n\\nFirst character of next word must match last character of previous word.\\nThe word must not have already been said.\\n\\nBelow is an example of a Shiritori game:\\n[\\\"word\\\", \\\"dowry\\\", \\\"yodel\\\", \\\"leader\\\", \\\"righteous\\\", \\\"serpent\\\"]  #valid!\\n\\n[\\\"motive\\\", \\\"beach\\\"]\",\"tags\":[\"control_flow\",\"games\",\"classes\",\"strings\"],\"timestamp\":{\"$date\":1556774856203},\"title\":\"Shiritori Game\",\"stats\":{\"completed\":{\"total\":433,\"ratings\":[3,3,3,3,3,3,3,3,3,3,2,3,2,3,4,4,0,1,1,3,2,4,3,3,4,4,3,1,1,3,2,3,3,1,3,4,3,1,2,2,3,4,2,1,2,4,3,4,3,3,4,3,3,4,2,3,3,2,2,2,3,2,2,2,2,0,4,1,2,2,4,4,3,5,2,3,2,2,1,2,1,1,4,4,3,4,1,3,4,2,2,1,2,3,0,2,2,5,2,1,2,2,3,2,2,2,2,2,1,3,1,1,2,1,3,3,3,3,3,2,1,1,2,1,1,4,3,2,2,3,3,3,2,2,5,3,2,1,3,0,2,1,2,3,1,4,3,2,1,2,1,3,0,3,1,1,2,2,3,2,0,2,2,2,2,3,2,1,3,3,2,2,2,2,2,2,4,2,3,3,1,2,3,3,3,2,2,2,2,3,3,3,2,2,2,3,2,2,2,2,2,2,3,2,2,3,3,1,3,2,2,3,2,3,3,2,2,3,2,2,2,2,3,2,3,3,2,1,1,4,3,3,3,2,3,2,3,3,2,2,3,2,4,3,2,1,1,3,2,1,2,2,2,3,3,3,1,3,0,3,2,3,3,3,2,1,2,2,0,3,2,3,3,3,5,3,1,1,2,3,1,2,1,2,1,2,3,2,1,1,2,1,3,1,2,3,2,2,3,2,1,1,2,3,4,2,3,2,1,2,2,2,3,2,3,3,2,2,3,2,2,3,2,2,2,3,3,3,2,3,2,2,2,2,0,4,2,5,2,3,3,1,2,2,1,0,3,2,0,3,3,0,1,2,0,2,2,3,3,2,2,0,1,1,2,1,3,3,1,3],\"rators\":[\"mNMQvcxKSSvqqMYCH\",\"8XkaLLpmbnqwB7ZTp\",\"8JyqsSbN2FJXPr3cw\",\"gb9rvGus2Jv7bjZSs\",\"yZvzB3qFb8pkHy4dg\",\"tAF9Gf6PiGogbZuWs\",\"MXjxGML2X75x64vJo\",\"wMPEWcGvGXwsMJ7SE\",\"AYaEkTWLMmfzpwejr\",\"PFjMZGHNAPTkgd7tq\",\"7g3vZaQXhLpxrajyg\",\"jHrtWDGBhkbuWa7fG\",\"BgP7LFjSWhPvp547w\",\"BFNm9gacwba9KyLFW\",\"g4R4gRHCE9tsTDt8B\",\"3ifAHQzsMasfQySoL\",\"cmwasetrBzbwJQbks\",\"j7fyR7k8FfGPLraZx\",\"5airAWy8rSJDRewDR\",\"vuHZGcRAyE56PzLWi\",\"7BvK9WWXi9Arqh63Q\",\"pryBJYX32n8nvRvDu\",\"Ti5BF4jnruwNNzHY8\",\"S8nRnCyqEdKAr7Rap\",\"gRC9pSxYrN3jxCZHx\",\"kDe2b9FdJnPhEWJzg\",\"oD4zgQracSnoeF78b\",\"SJAWq3aYZqoMwLnhj\",\"hrzGaJc9KZqgjAvew\",\"eDmE2DscmShjauARX\",\"r3JxNtA5vxryJP9Z9\",\"XKi8iZXBCHCaebSHh\",\"As7BP6xfcdjQStrka\",\"BTz4hrBKeHYwDHGMW\",\"w3e8tA7cxpYDfSmWM\",\"jYypgEfhDWb9syYP7\",\"RyCu8LFdoba6Gvzp9\",\"HqmxnQJM66Y57twhn\",\"MNgYsvK6HfLRb8wAz\",\"9cKQ9BxGZ4vQAcM5x\",\"EXZfPb8YH28EL8Rh9\",\"Zhp5DNAzeuu2TLfK7\",\"bAkGeqZqyPFYMCL94\",\"tK9oBgXjqPsPrGowj\",\"QezqcSA2QaBSG2v8r\",\"2fxapKr8XGdNeaKi2\",\"5fioB7qGh8Zmidput\",\"s5M5RvgqR9BhB9JoC\",\"t6bXCX76smm7B3bEN\",\"4zvByd8MNcc3PpRFN\",\"JpeTZm5QTWFLqg9Bx\",\"FgkYtHLxeD8pETJ8T\",\"73rmKyTQp7oWvRcgq\",\"ySRnygsLwGGsmZhfa\",\"mhwJATYEcAEQ8Bmeb\",\"C4QntmkYtB89GNtpd\",\"rzo6gPpP8qAQ9oXAg\",\"5Bikpk3S6zGEvGDaC\",\"LdRdFW8qCjGu5nYLQ\",\"HrXfQrvuHJj4Mdguk\",\"6ShafRStcvew4GfCh\",\"8PwfYqoDQFThzNtvf\",\"j47GEgPABfbrCPAmA\",\"sXs4Dvtk8Pvn2t9ZP\",\"E68ctoBTYBLqCdjwg\",\"KMfDGWCF375aw6ntJ\",\"pMuvoqcmxHbuRSfb9\",\"XbwyB44kHPnRgQcrB\",\"jDgJ2fdFS76TSorNc\",\"TNMAJidLpPdH4kmBv\",\"eHcgvkTGsH7ZziqBo\",\"LQhEi8yAC8WzEYY8h\",\"kBmhcwkCqxiy4GwiZ\",\"JKb5rhL6DKcCAypF9\",\"z29voMGDksmh5wajq\",\"DwetpbChQM4r6Gwah\",\"XNcFbNk3geETcD5ut\",\"PT5pu7kJsgp9TDNGv\",\"u5u2YpHXiNgzDNJdX\",\"HTtHAh9matng4Awvd\",\"AnjjyuE9aWLzK3nkg\",\"T7QZG6y34b65Fxyef\",\"rxoqzeHeR2skKwtnp\",\"ruyBZ3BQsi7TKgJy9\",\"DryNRN98Dj24BpgrL\",\"nF4YGHuRBa6NsWQFQ\",\"3ECpdeExhBmkYXtba\",\"kpiQQzE6CcFHfauGb\",\"WEBZquTmPNoch7gFR\",\"xxxhm6QEkRpah4k94\",\"Lw8oRc5SERsuntXMo\",\"KXnxMWSphrE8hsvyG\",\"tdTjjvaSqtvpJ7Lx5\",\"dMnE8vgYgSmqJTXFB\",\"8H565hXdivAbX9d8P\",\"aW4DkonHaJw6Q8PyP\",\"CMdKkCoZdTpucBeTP\",\"m8hiDkTnCe9gBBuFx\",\"5nY48krepaT4a4QTN\",\"apyi6oXgmDnnq7qw9\",\"Jqk2uJZZxEv5wZFze\",\"7wgAseFnTvae4gpag\",\"4a27hfuvpN4GLbRbP\",\"cmYWCNRkpPDR8iiAD\",\"JAe93nc5vNewSckSB\",\"SiXF5H5GyFkR9SHhw\",\"3LiSLdtN58n46NEqg\",\"qi3vScsvqpsSAtw38\",\"EjbDDFRECrzQDkzrX\",\"Yp7uvStL97cC9fKkY\",\"cBdGopWzwfdJoYwGk\",\"Q2q7wd5e5cfCrwPxq\",\"SGhPxX5bHGL8zZqtt\",\"E6myn69326auEiR8g\",\"72faYgdNHThiGLnKv\",\"kac4smmzjCv22Sgjx\",\"qcJrxNa4YdfHWEtPx\",\"bqvrDWkn8EeaLap4E\",\"cSMKd6Yq8Pyq8TvWR\",\"RK7vGaBqoofrAGKj3\",\"zbDSr72gioFwoQdWg\",\"PXAcsKkssS2yLyDv2\",\"hCwR4ufxSEu6Tfx4K\",\"sGHXrQzttpvt6bkPL\",\"yLpj24ZLhvy2EvT4E\",\"R5s7YZe9KJigCJsjS\",\"mCKqRAPMTht5QBnXo\",\"aeBYaaZebyrfSWcrd\",\"HMK3eoJxo2yXeDMHJ\",\"phzHtZP9SW2qWsAkq\",\"4usmYA9Pppx4F8vmF\",\"aoRaYQZEQPrJT22wX\",\"aRqQ42J5zqCmBNd8w\",\"7ahqhw9a4NLoypzhT\",\"QqbFrc8xjd9cH9Lyx\",\"zxmtE2mYR4xQzTHoy\",\"PYg2boGDLrEcF3i4j\",\"SuJeLnhfR3smGu3WZ\",\"jwDnqwhbotxJqvnYH\",\"DEMZvkgty7S2teDRA\",\"aEm3Wvj2rFYRL8Lrb\",\"BByKDngfPvW6w4m7d\",\"AasGs8AeX9Lcb9xJn\",\"ojK4Qohfj5Ds2bY9z\",\"PqmNqRarvMqp3nJ3o\",\"CfR7sv8pb332vKwEw\",\"hrgdGwGujFTnEGFpj\",\"BFu8HefyqsjnWp3fn\",\"P8ueo4xBBS4f8ktm2\",\"iS8rkeDrMv9mebwKp\",\"A5g5PhdQpmF7ohwsC\",\"eMuCpJ2spXWkJjWNz\",\"eANYLN7gazvMLrYYA\",\"QN3AHCaTykyuE5k8B\",\"BXPLRXsvSyA2xZBLJ\",\"Ecy2fPuyYDLKmRkcg\",\"3Zceb8GudqAG3onG3\",\"dH4KCHZaFcL274ZL3\",\"KRmxvA4mWgfKvHmYN\",\"mCyBvGwKAWPTdBsMz\",\"dmjnZpzyFZAWfepdb\",\"YRstQuthRkFeBiXug\",\"Co8eCrdMTL6BrYNyk\",\"wKD6fXcrksTCyCvdB\",\"3PoPSgExQ7hrpLvkm\",\"LjoNTyGEMfBpMHHus\",\"3Xd6WT95BrewRxWpF\",\"M9DhkxE77ztbJWz6e\",\"awxTyavq6BNM86LTD\",\"S6Zd8mPuvhuh3MFRt\",\"53uJADeqd5ys7ZAdM\",\"ghTAisPZoS5FTqQnK\",\"8GSZREMqgcWBwzw36\",\"BQMNhNzLdgY4yajCC\",\"wT5gGgvjKc5wz59AQ\",\"qukQkxmedze5KqfBu\",\"nzKTXzTqPT4RDTHvb\",\"24jMuoxwhTniGBtop\",\"mFS48ZMjNPYoBNhtE\",\"khFpmvAEFhfea4zdG\",\"N9m2Y6JJHu5gTvAiv\",\"4BHrt3NoCQECjvFJC\",\"xXxcBvT3poSuSCgBN\",\"jNE5AHcJQWXz7efuP\",\"KpHrC7WPEojnzgEtz\",\"ZNnsMeNkdDhHjSrZb\",\"7m8s7cADBu3XwGpxw\",\"kch5ukGsAcRJynWQd\",\"c7iE4nrZpXfLczpvv\",\"LDtBRPtAiDgrhjxR5\",\"gPvrBxxySDP2vpux3\",\"YFuN2JFXepWaW5RwW\",\"MkErvo2t8LvQBPNrt\",\"DHBGz3r4dCryvEDAp\",\"KWpKvLn6XJWcBF4jt\",\"fZCwknjgeY7icBk9c\",\"B4jPYeyvixcfEZknA\",\"MKJhn7goNzuGtB5y9\",\"JS3hNM3XXkxPdg3yk\",\"uSEfi7FRPHFCRCwdz\",\"bCDTKAoS4biDmQ64Y\",\"giHmmxKbE2pvCR2YQ\",\"dKtYzJHAswturm7Fe\",\"u5hr8LwHsJTDxoDsk\",\"DpqiRAm2yo3W2x4HX\",\"r5DMeYhgwin6JExLa\",\"R4SjTgDnpigJYDLyL\",\"nFhYP8GPCW4qYLHTa\",\"tvQ9kEwWKi4qxigtX\",\"2ptN2mhjFwFcHyPZd\",\"m6D2RuQJwrAK6WB3v\",\"gBtn7gSMiSJtAGRoE\",\"oSHy72cPANqpbBF8X\",\"b5p2BRxyHrrpGC5J3\",\"w6Xxsgx6uAxjk6uX4\",\"f2BoqyCpgnmjEjLqx\",\"6BZMSxML2SjRgRCZn\",\"Wv2vJnEj8ywNmARoF\",\"JQ5uoxA4WZgN6HyJk\",\"XghikBbq7obhPSKjX\",\"gJYuGdkXEWWmGRLzu\",\"xyk7XeuqKQYZqd7Rk\",\"yro9W5sMuBASbki8p\",\"a777e8chPvJkY3tKa\",\"sfoAF6eygyfp6MWx3\",\"n2BRY9X8899dcG8Bw\",\"5ZR5C8Hh44gtGfMou\",\"MK8HigdFigfJzHhyo\",\"ZgmNZTKEEBSyKujwG\",\"pPtmnJ7q9QchoG2Jq\",\"cykCKNJcqFBxz4T8s\",\"JZbBYihgT6m7bKvgc\",\"sLteh6cLh6gLKB2mQ\",\"nMDMMPWxws2kTgGKk\",\"CkjEKj3n9GYn5ATxL\",\"Ecg4m7srYGgZsb4Ck\",\"ZJQW3bL2KzxJcdEoc\",\"dzS6WBTMHyFEag6Fp\",\"Y8ySZEtvht9EwdcoY\",\"Pe8vWpDHRuH9nSGKW\",\"nys6kJatAFrKL59Pf\",\"kQCnJdq4psgrpvphr\",\"RehJGBFS6CYiWdjZx\",\"9PoKio8SZZtinmTCf\",\"s9GzySPz9vpMNQ2vj\",\"b3BWzq6Yu8nswak5u\",\"WzEhzQcMwc4sw8z7T\",\"XkJ9G89xpZiTj58Eq\",\"foytX6kH9wiSYqLtT\",\"tXNgbxmMDqkvLc76o\",\"PFmCJw9aHadXJFPrX\",\"w3xpYGxSeu2yKJ5mm\",\"RuvsqfBoAzmjPyoSW\",\"Kz7ee56Ht4Ns8JjBj\",\"AgLkwojGnqaSgEJ8r\",\"7K2GEb5TZRtSpyyGS\",\"3drq3rdyQSgCgGevx\",\"DYDJTyGgKFnBRLm2r\",\"r2N4kpphFEgbcn5Sb\",\"pBTrwvNXXzXoBfPSm\",\"winaFSNGA6hosaNA6\",\"twnzf8Weahgkz6rxa\",\"5Z4o2pWDzmbpw4JHJ\",\"3jr2dyncMZqhkMHTP\",\"JqmimEwk6HxiQQyZF\",\"QqTP27sC79gmiQdzS\",\"CCGWpahce6AhuXESv\",\"4fhjJBvLBWh6QeSih\",\"yjtdwc2AC4jA2RWtn\",\"J3upzLHuEwXH7Z2hx\",\"vpLFyr4p56fPjqDCu\",\"7AXYH9roEb8ff6ZGw\",\"vSvippNru5pBnJQJn\",\"HF28xZKSLM9wEuqNg\",\"muQCKmimwtNAdS8rp\",\"hKqn2TRhqwwyLcE66\",\"SJAYbvLdYW794sCEi\",\"KJCDwGkoXh8qtbbKr\",\"j49s8dHmmiyPxZmWj\",\"REpkEcYrskYHBmYzW\",\"TFqRD3zervh8PT8op\",\"JGAQgGGrsRMmeANJh\",\"Kh3Pc2ZRusurLaMyP\",\"jSaW4kdeAAGoLxcuP\",\"Bof5WwcxWFQEkNTsN\",\"pdum9ZEFzqdXqtjyQ\",\"DqLLJmvonxtaq5nbv\",\"eADnqywZR6P7fbJar\",\"mrrpfRpk9i5Zkk5Tm\",\"6dZFWNGPH8GKYA8sN\",\"4fjSgcqhQQZM2ZFRP\",\"p8qqFdJ3FSk5x9z3G\",\"5kazQPq8ZdDsx6kjf\",\"etoSR23iELGGgs9rA\",\"ANbSYXiYsp4addoDq\",\"CEd9tLdXeDeNHSzys\",\"5S9nX4rKsnCcnv4Cz\",\"DR5tfZrFaSDeLygnA\",\"t3koQ4dQFWdnyXxBB\",\"D2B5zXAoub33DEC86\",\"xn7uGNKeAwPEkP9oA\",\"vCxuabDxEv9YC3Szb\",\"RyWd7ieDg3PAWLpBa\",\"hRAd998MG8Jzdpxj6\",\"LskiHJtzYpBuCmjaP\",\"NPHbTDFiEfTMjEXh4\",\"e2vWoEQh5g3c7NS5o\",\"csFCABy3kwwpoQXNy\",\"sXuNKexvQ7ivKmsst\",\"h4x2jaMdj5aQZbW5g\",\"9MER8SZ9Xo6xNYMj8\",\"K3RacTvkWHLfzKF8i\",\"hXoTNPPmJLzkZnkSX\",\"faSkthCez3xqBCi35\",\"Lg4t6SEWgtYz4u7Cj\",\"PARDjDrwXvhpjRR9e\",\"axdSNLZpiCDF8RS6n\",\"QRoCZoXbRtHhvy7dE\",\"CB48GHbw7xtwmiuPn\",\"rx88g3SpXfGecJigj\",\"CLypXaZksY99mpRCm\",\"xpGSi4pXEaJnL6KMR\",\"sftR9DgM4jpwtxfAM\",\"nFbmNzMQ38TncmfQX\",\"kXEfD7xxEyWd7oxxL\",\"AFJTgLaPrtbqSvh7b\",\"gg4hgFGgmvK9ZxENE\",\"Hhvy3EGqWBXt3nFPA\",\"eYfPWvZwnJQkHbSTK\",\"gXTAie79kiw28tx5u\",\"KBxTPknCRmB2b5y3i\",\"CqoDZaJGarmKbvfQd\",\"qAby4AWXmTNeusvg3\",\"hkiz2Nv927cYGrA86\",\"ScaZG69jog5kcqGtQ\",\"jhpjLPkSo6yjCPNwe\",\"t5NSWsj9oQ3RbEkQJ\",\"2EbDCCJJvCfKkbYia\",\"QRv96jmNaYsWkxQEG\",\"7vm9XEB24nbPssuDu\",\"8nE8QHnFYsHCFebte\",\"pDseeQ5ubSuNK7eB8\",\"RTDx9axf52kxhFjwZ\",\"iojEnnY9FsMfYzp6f\",\"Y6w9WxXzRweSiy3Ls\",\"EsvHn9XYzGQurJpSk\",\"bvmTE46bfcM4ogj34\",\"scLA8EcDKhf3yTpku\",\"4qxzM4DG53QEn9W2A\",\"Wpn95NqWxncQrwNgz\",\"9Gf6g4fuKc3uou9w2\",\"nW6RRgszpxwSzeRwz\",\"hjTy57jKpx9nbbp86\",\"xyDGmX3BKZuvtr3tP\",\"WsCqifua4yHhKp6N9\",\"4yMggPMnAMqJN6TeR\",\"g2h22xXQEA87Td3sF\",\"PytNZK9mNiRiZxPrm\",\"4GDjQdekK8gqTrNxK\",\"C2vo5PNpM6i7ThFeS\",\"AFfw7cGg83uYk2Miy\",\"Afnps7TJQuS9sipMb\",\"zBk2cwJ9SLAhFuM3K\",\"fGQthgRWhpw3fXhzG\",\"Jwek34G5PjFxiYv27\",\"vhZgCDRqMncYjfFB9\",\"ckAunSrJmvqibvbLc\",\"cYWAW5iExKNJ3CXr5\",\"HfSjP6vavzE3xeSZW\",\"YBrrgYWJEi7aSKBo9\",\"fbyQH246PaDcXumC4\",\"NFtJpr56jy2HDX4TR\",\"H9KZi2cjt4FwH7qog\",\"77JQmfuSCyDcKopgo\",\"i5Nn7L8wRjX4fAZNN\",\"yd5sXGT45KRARFqTv\",\"gKnWjDjwrJh7MK2df\",\"ZmK3L5q8PoqoXJQjy\",\"mzsaCBQP3e6YourDN\",\"T6iBEE2jp7f7iEF2P\",\"qM4cFjDW9EBf6BNsA\",\"dSd7wHgXGQeG5BQ2P\",\"GZbF4FihwhWqaupNK\",\"fznzd3qnvtbFkkizz\",\"9wXH7kEc2oNKszt2z\",\"uK58g2EXxqxTaB2iA\",\"yod5YhKtPqw2GfG9B\",\"StNu7DPyTgEStZsMY\",\"M9rN2QTcyevxCuFKi\",\"ctbThYbufFCYbRK4f\",\"aShxaedKmGhkxbsoB\",\"ucZ9bQzygDAXDgMoP\",\"rojiqmjXtv8c2M9CH\",\"d8qtzoLB264iP8tdY\",\"BdnE4RS5puoxo92mA\",\"sW78rbapvsS3AnuJe\",\"syRNbbPdLCGXbH2Gy\",\"2PufnQcsHsfymufX3\",\"rQA9SE8nuwFueaHsR\",\"8sNv5PTHa7XQ8bNqR\",\"fzKdJiiBivrTPFQXz\"],\"quality\":[5,5,5,5,4,4,5,3,5,4,5,5,5,5,5,5,5,5,5,3,3,5,5,5,5,5,5,5,3,4,5,5,5,3,5,5,4,5,5,5]},\"tests\":{\"score\":0,\"rators\":[\"mNMQvcxKSSvqqMYCH\"]},\"instructions\":{\"score\":0,\"rators\":[\"mNMQvcxKSSvqqMYCH\"]},\"flags\":1},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.625,\"family\":[{\"_id\":\"rqum6rzyZQrC43Ldv\",\"language\":\"java\"},{\"_id\":\"6o5tYwwbY2ys7XTm4\",\"language\":\"javascript\"},{\"_id\":\"dLnZLi8FjaK6qKcvv\",\"language\":\"python3\"},{\"_id\":\"ZBfQk7YMoXTh2hnzx\",\"language\":\"ruby\"}]}}"]