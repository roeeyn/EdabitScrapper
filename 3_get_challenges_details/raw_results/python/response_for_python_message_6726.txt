a["{\"msg\":\"result\",\"id\":\"2071\",\"result\":{\"_id\":\"Nr33pizZC2XdHXAm6\",\"archived\":false,\"author\":\"kochug\",\"authorId\":\"vQEmjTRgmdGNYB7yk\",\"code\":\"def months_interval(dateStart, dateEnd):\\n\\t\",\"difficulty\":2.8979591836734695,\"familyId\":\"5Kr8k63AfxZdZ2JzJ\",\"instructions\":\"Create a function that, given 2 dates, returns the names of the months that are present between them (inclusive).\\n\\n### Examples\\n  **Input**\\n  ```python\\n   january = datetime.date(2017, 1, 1)\\n   march = datetime.date(2017, 3, 1)\\n\\n  monthsInterval(january, march)\\n  ```\\n\\n  **Output**\\n  ```python\\n  ['January', 'February', 'March']\\n  ```\\n\\n  **Input**\\n  ```python\\n   december = datetime.date(2017, 12, 1)\\n   january = datetime.date(2018, 1, 1)\\n\\n  monthsInterval(december, january)\\n  ```\\n\\n  **Output**\\n  ```python\\n  ['January', 'December']\\n  ```\\n\\n  **Input**\\n  ```python\\n   january2017 = datetime.date(2017, 0, 1)\\n   january2018 = datetime.date(2018, 0, 1)\\n\\n  monthsInterval(january2017, january2018)\\n  ```\\n\\n  **Output**\\n  ```python\\n  ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\\n  ```\\n  (Notice that January is **not** duplicated!)\\n\\n### Notes\\n- The returned list should include the months of `dateStart` and `dateEnd` (inclusive)\\n- The returned list **must not** include duplicate values\\n- The month names returned by the function should be sorted (not alphabetically, but ordered by which comes first (January = 1st month, February = 2nd month, â€¦ , December = 12th month))\\n- The function should produce the same output even if `dateStart` is greater than `dateEnd`\",\"lab\":\"import datetime\\n\\nTest.assert_equals(months_interval(datetime.date(2017, 1, 1), datetime.date(2017, 1, 1)), ['January'])\\nTest.assert_equals(months_interval(datetime.date(2016, 1, 1), datetime.date(2017, 1, 1)), ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'])\\nTest.assert_equals(months_interval(datetime.date(2017, 1, 1), datetime.date(2016, 1, 1)), ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'])\\nTest.assert_equals(months_interval(datetime.date(2017, 4, 1), datetime.date(2017, 8, 1)), ['April', 'May', 'June', 'July', 'August'])\\nTest.assert_equals(months_interval(datetime.date(2017, 8, 1), datetime.date(2017, 4, 1)), ['April', 'May', 'June', 'July', 'August'])\\nTest.assert_equals(months_interval(datetime.date(2017, 12, 1), datetime.date(2018, 1, 1)), ['January', 'December'])\\nTest.assert_equals(months_interval(datetime.date(2018, 1, 1), datetime.date(2017, 12, 1)),['January', 'December'])\\nTest.assert_equals(months_interval(datetime.date(2017, 4, 1), datetime.date(2019, 4, 1)), ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'])\\nTest.assert_equals(months_interval(datetime.date(2019, 4, 1), datetime.date(2017, 4, 1)), ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'])\\nTest.assert_equals(months_interval(datetime.date(2017, 4, 1), datetime.date(2043, 10, 1)), ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'])\\nTest.assert_equals(months_interval(datetime.date(2043, 10, 1), datetime.date(2017, 4, 1)), ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'])\",\"language\":\"python3\",\"summary\":\"Create a function that, given 2 dates, returns the names of the months that are present between them (inclusive).\\n\\nExamples\\n  Input\\n     january = datetime.date(2017, 1, 1)\\n   march = datetime.date(2017, 3, 1)\\n\\n  monthsInterval(january, march)\\n\\n  Output\\n    ['January', 'February', 'March']\\n\\n  Input\\n     december = datetime.date(2017, 12, 1)\\n   january = dateti\",\"tags\":[\"arrays\",\"dates\",\"sorting\"],\"timestamp\":{\"$date\":1524294029707},\"title\":\"Get the Months Between Two Dates\",\"stats\":{\"completed\":{\"total\":100,\"ratings\":[2,2,2,2,2,1,2,1,2,2,2,3,2,2,2,3,1,2,3,3,3,2,2,3,3,3,3,1,3,3,3,2,2,3,3,4,4,4,4,4,4,3,3,3,3,5,4,2,4,3,3,2,3,3,4,3,4,3,3,4,2,4,4,4,3,3,2,3,3,3,4,3,3,3,4,3,3,2,4,4,4,4,2,4,3,4,2,4,1,4,4,5,2,0,3,3,2,3],\"rators\":[\"vQEmjTRgmdGNYB7yk\",\"HK3RW4kr7acFSAyL4\",\"tuyDaJzFy78jxvhCY\",\"6fJpRpAgiWD5zX9qB\",\"iEMnJaXXfa6dzdQzb\",\"tzHQmfmDbNJgqbeLx\",\"5JXnPbYC8RuBG6FkM\",\"3mtD7DxrAgDMcxWKt\",\"GRZzKCbeb4xKHFCrZ\",\"hAYDyShHjN3c5vYSM\",\"m2iiZZHTpzHcEKJMn\",\"mqXfzC24CdThpCaGd\",\"QjpzasKxy3xBakLzz\",\"ZJztwFpsWWp6kdNJE\",\"pdcaC4fEtsubBz4Wo\",\"bTW2rpGRLNhrwS7eu\",\"wPhd86JGzcCkkQdyy\",\"jDoFYBX4iQiTXFEdf\",\"tAF9Gf6PiGogbZuWs\",\"YG776yzpLWoxa5GJs\",\"xWN2EDdMDnG89QXjm\",\"QgdwHjy4x6MCPwfh9\",\"M8jrv2FfpMQp9Qzpx\",\"RsX6W2ddWM8ajHzss\",\"KpyqFN3MSyywfPrCd\",\"uJ5A3zjLi9iN5eeXX\",\"KDfCknbFB67GDq3Yg\",\"7LWPxYbe6HKibjNd9\",\"n9PZCXcWTygjaDsXs\",\"zgoEhAyhrjnsSLPGw\",\"8JyqsSbN2FJXPr3cw\",\"6W2GSzrYjMD9ANBFY\",\"nydW2HwDGZuk8XaEL\",\"mGmoXwXiopnnnqYdh\",\"yZvzB3qFb8pkHy4dg\",\"gb9rvGus2Jv7bjZSs\",\"jdQrck9YLmJQFPb7N\",\"XjC9ivzaAxfcFiSGj\",\"T3ZAuoMrJjvZwN55B\",\"tQsPenm9qfM6mPbNa\",\"ye4QaoZY96k76jXB7\",\"P59rek6gvwTzHvRYa\",\"YMzDWdSyrtgyphd2Q\",\"P9kRacTvAmXdLQMds\",\"M2k5STtKaQx6tsgWe\",\"hsrNYf3WbexXJKhCq\",\"byqTp7CX5oWSEZp4S\",\"AYaEkTWLMmfzpwejr\",\"MXjxGML2X75x64vJo\",\"PFjMZGHNAPTkgd7tq\",\"BFNm9gacwba9KyLFW\",\"mKK6Z6WEKKJ2W2ZNT\",\"3ifAHQzsMasfQySoL\",\"pMuvoqcmxHbuRSfb9\",\"9YtQPAffoq4WJLcAP\",\"nF9pCCzbGDhzvWgaw\",\"hrzGaJc9KZqgjAvew\",\"XKi8iZXBCHCaebSHh\",\"RyCu8LFdoba6Gvzp9\",\"MNgYsvK6HfLRb8wAz\",\"oqGkxvASXq52iTDvp\",\"s5M5RvgqR9BhB9JoC\",\"2RuXdqALgnGbtTWC7\",\"HqmxnQJM66Y57twhn\",\"fF9rKQmnp5TpnnWGb\",\"2fxapKr8XGdNeaKi2\",\"8PwfYqoDQFThzNtvf\",\"Jqk2uJZZxEv5wZFze\",\"WLFPvm65aHfgwQy7N\",\"pmgFEciNrd3ES9tuu\",\"aEm3Wvj2rFYRL8Lrb\",\"J6JFEBRDvRhendwKq\",\"BByKDngfPvW6w4m7d\",\"6c4xjEdFxdYw5xGrt\",\"PytNZK9mNiRiZxPrm\",\"Nua6T3dBurBy3Qfg9\",\"AasGs8AeX9Lcb9xJn\",\"kYWb8BwpKwunQkxeX\",\"ZNnsMeNkdDhHjSrZb\",\"sz8ufn9i8zeiGWpAy\",\"YRstQuthRkFeBiXug\",\"a777e8chPvJkY3tKa\",\"R4SjTgDnpigJYDLyL\",\"xn7uGNKeAwPEkP9oA\",\"AXcnPX68zdMiLNSmu\",\"mDWNyaaQ9hvPCRzSd\",\"8sNv5PTHa7XQ8bNqR\",\"iS5BrkGLzJyPK7nKt\",\"p8qqFdJ3FSk5x9z3G\",\"iojEnnY9FsMfYzp6f\",\"gJYuGdkXEWWmGRLzu\",\"yjtdwc2AC4jA2RWtn\",\"gKnWjDjwrJh7MK2df\",\"2PufnQcsHsfymufX3\",\"DPi9QGLctq2y76KuE\",\"gXTAie79kiw28tx5u\",\"GTKsdeEihE636Le9i\"],\"quality\":[5,5,5]},\"complaints\":{\"total\":0,\"reasons\":[],\"skippers\":[\"vQEmjTRgmdGNYB7yk\"]},\"instructions\":{\"score\":25.3,\"voters\":[\"XcHCqYmeoqxDsoucx\"]},\"tests\":{\"score\":-1.6,\"voters\":[\"xWN2EDdMDnG89QXjm\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":5,\"family\":[{\"_id\":\"JhQ8qCptpTbZMvnRz\",\"language\":\"javascript\"},{\"_id\":\"Nr33pizZC2XdHXAm6\",\"language\":\"python3\"}]}}"]