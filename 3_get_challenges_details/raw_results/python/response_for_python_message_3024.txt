a["{\"msg\":\"result\",\"id\":\"237\",\"result\":{\"_id\":\"stAFzKqQnWHztzrAW\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def add_nums(nums):\\n\\t\",\"difficulty\":0.5908141962421712,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"BWxTxEyZZeu2wK8jn\",\"instructions\":\"Given a string of numbers separated by a *comma and space*, return the **total** sum of all the numbers.\\n\\n### Examples\\n```\\nadd_nums(\\\"2, 5, 1, 8, 4\\\") ➞ 20\\n\\nadd_nums(\\\"1, 2, 3, 4, 5, 6, 7\\\") ➞ 28\\n\\nadd_nums(\\\"10\\\") ➞ 10\\n```\\n\\n### Notes\\n- Numbers will always be separated by a comma and space.\\n- Your function should accept negative numbers.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(add_nums(\\\"2, 5, 1, 8, 4\\\"), 20)\\nTest.assert_equals(add_nums(\\\"1, 2, 3, 4, 5, 6, 7\\\"), 28)\\nTest.assert_equals(add_nums(\\\"10\\\"), 10)\\nTest.assert_equals(add_nums(\\\"-12, -8, 2, 11, -16, 16\\\"), -7)\\nTest.assert_equals(add_nums(\\\"25, -4, -15, -7, 27, 12, 29, -6, 20, 9\\\"), 90)\\nTest.assert_equals(add_nums(\\\"24, 7, -15, -28, -21, 6, 5, -6, 23, 24, -22, 30, -21, -10, -10, -12, 24, -18, -13, -27, 22, -30, -11, -13, 6, 7, 27, 1\\\"), -51)\\nTest.assert_equals(add_nums(\\\"-17, -18, -18, -14, -8, 0, 12, 2, 10, 5, -8, 12, -17, 8, -5, -23, 2, 29, -30, 13, -22, 19, 13, -18, -8\\\"), -81)\\nTest.assert_equals(add_nums(\\\"16, 8, 19, 25, 18, 26, 2, 14\\\"), 128)\\nTest.assert_equals(add_nums(\\\"-18, -10, 9, 12, -16, 22, 2, 17, 10, -25, 1, -25, -15, -29, 12, 11, 4\\\"), -38)\\nTest.assert_equals(add_nums(\\\"12, -30, 26, -18, -4, 25, 19, -22, 7, -17, 3, -30, -27, 10, -12, -12, -24\\\"), -94)\\nTest.assert_equals(add_nums(\\\"0, 21, 20, 0, 26, -9, 12, -9, 20\\\"), 81)\\nTest.assert_equals(add_nums(\\\"-27, 28, -9, -9, 4, -22, -13, 0, -2, 19, 9, 5, 20, 21, -3, 22, 6, -10, -1, -12, 2\\\"), 28)\\nTest.assert_equals(add_nums(\\\"13, -29, 13, 22, 23, 14, 2\\\"), 58)\\nTest.assert_equals(add_nums(\\\"-18, 3, 30, 13, 20, -23, -18, -27, -30, 1, -19, -3, -19, -22, -1\\\"), -113)\\nTest.assert_equals(add_nums(\\\"18, 20, 11, -7, -1, -7, -17, -3, 25, 23, 25, 6, 7, -1, -11, -24, -19, -18, 8, 24, 29, 19, 13, 0, -19, -25, -2, 8\\\"), 82)\\nTest.assert_equals(add_nums(\\\"-13, -30, -1, -9, -25, -9, 11, -28, 0, 10, -23, -20, -5, 21, -29, 6, 20, -23, -23, -24, 30, -14, 24\\\"), -154)\\nTest.assert_equals(add_nums(\\\"5, -16\\\"), -11)\\nTest.assert_equals(add_nums(\\\"-28, -1, 12, 15, 16, -11, 23\\\"), 26)\\nTest.assert_equals(add_nums(\\\"16, -3, 15, -20\\\"), 8)\\nTest.assert_equals(add_nums(\\\"10, -2, -3, 6, -17, -8, -4, -9, -19, -13, 9, 19, 26, 26, -23, 5, 4, 2, -22, -10, 3, 11, -1, 10, 2, 23\\\"), 25)\\nTest.assert_equals(add_nums(\\\"-19, -25, -27, 27, -16, -29, 19, -30, -18\\\"), -118)\\nTest.assert_equals(add_nums(\\\"-28, 14, -19, -24, -17, 30, -1, 8, -13, -21, -4, 29, 4, 6, 29, -23, -9, -26, 8, -20, -14, -22\\\"), -113)\\nTest.assert_equals(add_nums(\\\"-28, -11, -29\\\"), -68)\\nTest.assert_equals(add_nums(\\\"18, -10, 22, -17, -6, -20, -25, -23, -1, 22, -16, 0, -24, 26, 20, 21, 3, -27, -24, -5, -28, -4, -3, 16, -18, 19, 26, -29\\\"), -87)\\nTest.assert_equals(add_nums(\\\"-14, -25, -29, 3, 7, 11, 27, 12, -23, -12, 1, -17, -17, 4, 21, -29\\\"), -80)\\nTest.assert_equals(add_nums(\\\"-4, 4, 11, 18, 3, -15, 19, 25, 29\\\"), 90)\\nTest.assert_equals(add_nums(\\\"14, 7, -24, -25, 6, 5, 13, -7, -9, -3, 15, -20, 28, -19, 29, -5, -10, 12, -22, 15, -30, 3, 11, 27, 4, 21\\\"), 36)\\nTest.assert_equals(add_nums(\\\"-28, -10, 19, 25, -27, -26, 25, -18, 10, 13, 0, 30, -4, 8, 21, -27, -25, -6, -25, -9, -14, -7, -19, 3, 8\\\"), -83)\\nTest.assert_equals(add_nums(\\\"23, -25, 27, -15, -5, -9, -17, -9, 1, -11, -12, -17, 18, 4, -30, -15, -13, 16, -21, -7, 10, 20, 19, 27, 24, -17, 10\\\"), -24)\\nTest.assert_equals(add_nums(\\\"14, -6, -22, 12, 4, 20, -1, -22, 9, 26, 12, -17, 29, -28, 17, -10, 26\\\"), 63)\\nTest.assert_equals(add_nums(\\\"-3, -25, 3, -2, -30, -16, -12, 3, -10, 15, -2, 15, -4, -3, 16, -8, -5, -14, -10, -14\\\"), -106)\\nTest.assert_equals(add_nums(\\\"27, 28, -18, -19, -25, 2, 24, -2, -10, 5, -12, 9\\\"), 9)\\nTest.assert_equals(add_nums(\\\"18\\\"), 18)\\nTest.assert_equals(add_nums(\\\"-16, -13, 11, 4, 26, -26\\\"), -14)\\nTest.assert_equals(add_nums(\\\"25, -5, 11, -23, -1, 14\\\"), 21)\\nTest.assert_equals(add_nums(\\\"-6, 29, 15, 9, -28, 11, -16, 10, 7, -9, -3, -1, 11, -29, 9, 6, -7, -30, -6, 26, 6\\\"), 4)\\nTest.assert_equals(add_nums(\\\"30, 6, 22, 12, 21, -2, -1, -14, 5\\\"), 79)\\nTest.assert_equals(add_nums(\\\"-28, -12, -8, 17, -23, -7, -26, -30, 11, -18, -16, 23, 26, 4, 24, 10, 24, -19, -22, -29, 6, -26, 16, -10, -25, -27, -28, 26\\\"), -167)\\nTest.assert_equals(add_nums(\\\"12, -18, 18, -21, -8, 21, 24, -27, 29, -22, -16, -30, -13, 3, 14, 3, 20, 29, 30, -20, 6, -15, 0, -4, -17\\\"), -2)\\nTest.assert_equals(add_nums(\\\"-9, -18, -26, -2, -12, 0, 3, -3\\\"), -67)\\nTest.assert_equals(add_nums(\\\"-28, 23, 30, -26, -2, 14, 4, 20\\\"), 35)\\nTest.assert_equals(add_nums(\\\"-8, -21, -9, 25, -20, 10, -20, -9, -3, -9, 2, 20, 29, -21\\\"), -34)\\nTest.assert_equals(add_nums(\\\"20, 7, -26, -12, -10, 27, 0, -12, 11, -5, 30, 7, -9, -6, -1, 27, 21\\\"), 69)\\nTest.assert_equals(add_nums(\\\"17, -12, -15, -9, -19, 29, 13\\\"), 4)\\nTest.assert_equals(add_nums(\\\"-7, -23, -3, -26, 10, -10, -2, -19, 6, 22, 8\\\"), -44)\\nTest.assert_equals(add_nums(\\\"11, 21, -27, 28, -30, 23, -10, 19, -13, 30, -6, -9, 28, -24, 25, 30, -23, -3, -10, 15, -29, -17, 16, -19, -16\\\"), 10)\\nTest.assert_equals(add_nums(\\\"8, -10, 29, -29, -6, -7, 4, 16, 5, -23\\\"), -13)\\nTest.assert_equals(add_nums(\\\"-5, -13, -17, -21, -14, -14, 30, -5, -3, -9, -18, -29, 14, -29, 20, 21, 10, 30, 13, -5, -24, -11, 11, 7\\\"), -61)\\nTest.assert_equals(add_nums(\\\"-11, -22, 19, -6, 14, 27, -22, 26, -29, -4, 14, 10\\\"), 16)\\nTest.assert_equals(add_nums(\\\"18, 19, 9, -25, 8, -21, 5, -3, -5, 23, -28, -27, 6, 28, 24, 2, -17, -14, -12, 26, -15, -26\\\"), -25)\\nTest.assert_equals(add_nums(\\\"19, 23, -17, 13, -28, 28, -26, -8, -5, 10, -7, -11, 28, -8\\\"), 11)\\nTest.assert_equals(add_nums(\\\"-4, -4, -28\\\"), -36)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[0,0,0,0,0,1,1,0,3,2,0,0,0,0,0,1,0,1,0,1,5,0,0,0,0,0,0,1,1,0,0,2,0,1,0,0,1,2,0,0,1,1,2,0,0,0,1,1,5,0,0,0,1,0,0,0,2,0,1,0,0,0,0,0,1,0,2,5,2,0,1,0,2,0,0,2,0,1,1,0,0,1,1,1,0,0,0,5,0,0,0,0,0,1,0,0,0,0,1,1,0,1,1,1,2,1,0,2,2,0,1,1,1,0,1,0,1,0,0,0,0,0,2,2,2,0,1,1,1,0,2,1,0,1,2,1,0,0,1,1,1,0,0,0,0,1,0,0,0,2,2,0,0,2,0,1,2,1,1,0,1,0,0,1,0,0,0,2,0,1,1,3,1,0,1,1,0,0,1,1,1,1,0,0,0,0,1,0,0,0,0,0,2,2,0,0,2,2,2,0,0,2,1,1,0,0,0,0,2,0,0,0,0,2,0,0,1,1,0,0,0,0,0,0,0,1,2,0,0,0,1,1,0,1,1,0,0,2,2,0,1,0,0,0,0,0,1,0,2,0,0,0,0,2,0,0,0,1,1,0,2,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,2,0,2,1,2,1,2,1,2,1,0,0,0,0,0,0,0,0,0,1,0,2,0,0,0,0,1,1,1,2,1,1,1,0,2,0,0,0,0,0,2,0,0,1,1,1,1,0,0,0,0,0,1,1,0,2,2,1,1,1,0,0,1,1,1,0,2,1,0,1,0,0,0,1,0,0,0,0,1,1,1,1,1,1,1,1,2,1,1,0,1,0,1,0,1,0,0,1,0,0,1,0,0,0,3,0,1,2,1,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,2,0,1,0,3,1,0,1,0,1,1,0,0,0,0,1,2,0,0,0,0,1,0,0,0,1,0,1,1,1,0,1,1,0,1,1,0,0,0,1,0,1,2,0],\"rators\":[\"C4QntmkYtB89GNtpd\",\"ksYKipM57WDXYHNmA\",\"dsShModvpizssfZMb\",\"bYWysqrLBkP5Xo4ST\",\"HWHGW2Kwqp6SeSyPw\",\"PXAcsKkssS2yLyDv2\",\"yZvzB3qFb8pkHy4dg\",\"3LiSLdtN58n46NEqg\",\"BJTPDwCaPoZaukX7C\",\"8BFSTCnoe2QggN64c\",\"iYgYbusfgvRAJ6wkF\",\"g4NCSxxHqHCGMpWwT\",\"Tfd2Y5arK8cx6nS5y\",\"cR3ibTMxLyEdDFCHY\",\"2fxapKr8XGdNeaKi2\",\"J5T8gZqiZXFuFDTQ7\",\"zd9FLSzsGz3evKafy\",\"6abffx8jQDCf7kgvb\",\"N2wnZXkhDH86mgjQ8\",\"9Ly8afdtofp8DXzrt\",\"zGBTg8pHNJjuPXAA5\",\"AasGs8AeX9Lcb9xJn\",\"dyBcJXfbqJtjTmBZK\",\"HMweSoHkGZN6tfew7\",\"u5u2YpHXiNgzDNJdX\",\"gb9rvGus2Jv7bjZSs\",\"u5jLXaWAKo7K4JvTR\",\"aRqQ42J5zqCmBNd8w\",\"qrZB59AcTKF4SkrKr\",\"9f9LG2exEqL5gNrA7\",\"9YtQPAffoq4WJLcAP\",\"F2aeZ4zqupp7a8SkW\",\"PweZwtXTDkEwxZXQ4\",\"yKttxy9JGn5Jzwuj6\",\"geZ3oLjhh9KAw7yHs\",\"tAF9Gf6PiGogbZuWs\",\"hnyhBFWwNCz9mDfSi\",\"TR5aWdDKP6iaL6mGK\",\"wdoG642oE9cm8y9aH\",\"zC8WrPp5BC6c2exrW\",\"bC7yAKktHb63ReMBf\",\"pwWtbXEjzuvrhEGwt\",\"NMEDQhGCKoQQwbmez\",\"hqiTnCHZxYu2nvNK5\",\"YZsZjfvd3PnLhDJrR\",\"jeuoearPPTcGPgXhf\",\"4tgBydK887PitgAoi\",\"Hantb9DenwrBHk5tv\",\"vLrq4dEDMM2wd68Dc\",\"7jL3ijPqP46GJ4cfJ\",\"zg8GmMSP2LkHBtAzy\",\"oKNAZ5BNeNWyvkiiB\",\"ArWzhxZEjsxjGF77p\",\"HQxp7NcdvF92G7bYS\",\"N7P4AnS8nzK4oupHv\",\"4CFzv558qbGcpQwc4\",\"XgRXeb4YyZqmiMTLe\",\"jNvegJWCk5HCtEMbK\",\"v8iedwMBcGiN2PHGM\",\"erEunWkRveQoPZyTC\",\"yAouD3PxzED8a4gap\",\"WndXKZqpzd97m53GK\",\"FM8JdFNeu5mCKKARu\",\"gv5xGeXBT73oknz9p\",\"dHZqT6h4JMwk5fPC8\",\"X74H8PYX8XYkrGRQc\",\"GHvarH2b22cZtNWxG\",\"E9ttMPTkLkKG6nZrg\",\"PhceyfmFntJcn5Fhf\",\"d4Myxr6T992RFYJnx\",\"KvcKs5bmWo5fK4GFj\",\"Nw5Co4WxYtGovKnmA\",\"TMxg4W7Xyu7t8R8iR\",\"MKT7khMBGXzA22ykf\",\"C9LKGu2g5hSijvDzA\",\"mxX4rH5ELYkdZ2Mbw\",\"RosFXZYJkcRwjkaog\",\"GJfqjgFShBiHSTiaP\",\"SB8QRjuWA9viDms5n\",\"5kEyLPjTLrt7z2YJZ\",\"s2ZMtR9deh6Kia7pb\",\"Yp7uvStL97cC9fKkY\",\"28GnGmft835XWqNNW\",\"68r3J5vGtfW7p7qko\",\"FovJzwmhALjb7ouFm\",\"rJGeRSCjGzRuYfHZS\",\"gudC5KZrykfdfGD3J\",\"puCobPgduCEZMXu69\",\"Ycj4iTJGFyvC4bXek\",\"yabtHTtycsWhcGBfD\",\"8JyqsSbN2FJXPr3cw\",\"BKjhZeZp8YLhd7ynb\",\"kHMvbWa69czPnSKWg\",\"c9nu6dMCYHn5NoGFZ\",\"GZ63ieFurvwzvAevZ\",\"obgiitvusGnJyzhGP\",\"mQWa59kFDuqwfkdCD\",\"YTRAyZFtn9m68HBLK\",\"boMXxa5zxP6yJHTje\",\"AqgCu4a5vd4nahhJd\",\"gJYuGdkXEWWmGRLzu\",\"HDksZLiRAmpnCKHta\",\"hS8WBiFoAjP5Js6Wv\",\"9LLN4tbHA92uRLfHq\",\"fbagSSAGD2gAfNJZC\",\"94FLQj5fEsSg4E498\",\"moFrJ4vxzxPynByzB\",\"PWJq8oJNMEhwRGD4M\",\"4zkChgTrb5EDzYZmd\",\"FEYpu9RWysAgW3XnP\",\"XrqNzJ2FRG8HnGiR6\",\"Fk9kLwoG4Brf4KsKf\",\"q5a96XumccZyhQNyL\",\"dKKMvaYoJunNPk5Wa\",\"PeK3KRQZZYEWNXBxf\",\"Z6rYpEZZsDpc2X7TA\",\"DEDniTrstQYGounXT\",\"rzF2F7DgSjgJrneo8\",\"veAhgEKubmGCuoCyh\",\"x65vwZF2KcoqxGQQp\",\"aEm3Wvj2rFYRL8Lrb\",\"6SKDJwXpev4qPSzgM\",\"B7xNs2GQLTqNcHhgf\",\"gZCBY2gP7xHRy5JzG\",\"n2ck2WGuM35vbZiFz\",\"Z4riTkod3EjueH2RT\",\"ffjnHrx8Ym7A7pQWe\",\"tRA43bWeW9bLciKEh\",\"Jqk2uJZZxEv5wZFze\",\"EfuBzbisdKE5weiHa\",\"M8dQuMrEpP8Hc3tHN\",\"kYWb8BwpKwunQkxeX\",\"4rwxLqLs2mNZNg8NB\",\"a9pr6B8yNaXayoDiQ\",\"Q7Yxda7dqKeYPs2Db\",\"YcCLwitFMAEJSnxAW\",\"9pzFiFK3ANLjQfnr2\",\"FzxTj4GuujhwpZM7y\",\"SzdT9nsTbXE4ahFsv\",\"mGzrqcrJYviuy5qn4\",\"5dHucvf2qBYyKim7X\",\"So6PHm74mfJuY2WTs\",\"AF6LgdKhEdzwgRJom\",\"QpZ9b8ygwameoA97h\",\"Q6gEE9dG8ERy2Xu3c\",\"7dQYiDeTcMztbGyso\",\"GYJuRfz6caZY87JBh\",\"usRAT3gR3GFus28mo\",\"PcfcAbTJPrdzJN2FW\",\"kjvgTyRFyKHv44DcH\",\"nzKTXzTqPT4RDTHvb\",\"TTgP9jcqGxCfKotZ3\",\"sDRY37TfoncsA2FSR\",\"Stye5FSYwYNbhFHgR\",\"586FdBhazpwJfnRYR\",\"jufL2dZQH8tBJajpr\",\"NG8PWBSjsM8mMhQEq\",\"gMJhLdyw3tH7L96X2\",\"agGDFTddYbZMnL5LL\",\"5HCu9Ydd86QgHDRNP\",\"JRacQYm77Ltir8aK8\",\"Z4dHig4b5MK4beJYs\",\"5JyY5eDxizCH7TYT7\",\"66a9xX73nmTEuKs9k\",\"AkNdYK2xbbmDcZrjM\",\"Wsa72DwmWTh83YZQf\",\"zTZctDDRMSeqYjKQY\",\"Y9SPwnGra4STbviL4\",\"nfXGHENb5md7m355s\",\"CBXLutgEKHKvbgE3h\",\"2CRF2WT69Z7T72uBj\",\"PawDbyv9NrZ9Xd2J3\",\"7Z9KdHmzkoF3TQC8s\",\"Yg5KsgKxN3tWmuEKG\",\"a777e8chPvJkY3tKa\",\"jjEJgn9nqsvwNMTa3\",\"2ZFoLTxcCARhwc8xX\",\"Lfut9z3euZ3odxFcH\",\"H4abACFDH5t8CnnyH\",\"3eLqLYh2iPZuShtMY\",\"FRN2W8RYpJ6GPhgRy\",\"3cF6NXq3ZEwdkgSjb\",\"3sGiT8qjdkzqinpde\",\"G2pMfCik8KtdaSNqr\",\"WWD6uwvCr54JJGu5S\",\"p3zah7ZzLWs9j4NyE\",\"2ptN2mhjFwFcHyPZd\",\"X8BW96KGWpZAiFeDg\",\"H9KZi2cjt4FwH7qog\",\"ai8HyfiT9DYFrRGim\",\"4yNLEwL2rsx4EE5Nt\",\"JKbEBybAsiKrmcqof\",\"Br9aaArg7qJLcNdhP\",\"b9YQPLb9ZPSADdHXX\",\"aPLuemxzZ5iS57NBQ\",\"qMfpXAFRSMc6gEzCh\",\"5AHe67SapnPQeESpv\",\"yNjkHfHESBAnCssPB\",\"XpRh7W7jGst278HTG\",\"DrkR35NqnP9NDLbq6\",\"6C94M4PPHbBumAuja\",\"syRNbbPdLCGXbH2Gy\",\"M23Yf6rufJzaSYmxL\",\"n5P3xDbGTAQR4h8HC\",\"X5MqeHyPh6cSQCXnk\",\"iY25XNrJX2giBLvnd\",\"eMuCpJ2spXWkJjWNz\",\"gEkiWY4QfTccH2Yp5\",\"cN55Pbcik8wonXDZE\",\"vuGJmyKLHtAuSxWLF\",\"WSLnCZNtpiCrdaXnd\",\"JS3hNM3XXkxPdg3yk\",\"G3arGZkymS7H3Ba8a\",\"uouMMdEWBuLBWPbzr\",\"KdYQN3KAT2DyTzT2a\",\"xjyixzXzqqqTfJARd\",\"i5iePG5GqhJJ8HEoB\",\"dXK7tiXRSEm5kjitv\",\"8vWWL8Tx2yDai4ydm\",\"NP2RxM3eBd3drnDwP\",\"2innwjWqxJHo4eRGh\",\"dj5AyG5fWP8FdsSmZ\",\"oBcs8GLX2ZFLXQy8y\",\"ACEZh39brWjdGkZXb\",\"agb6ou9deennRxzhv\",\"KJCDwGkoXh8qtbbKr\",\"4bnRYgbirDp5unwGQ\",\"RoGGD5cpHb4ftdLDv\",\"MNKE5PyqhNdFJgm6S\",\"iS5BrkGLzJyPK7nKt\",\"SkQcb2sRn4as5KpnN\",\"DJdsqmTeAGDwrgYoZ\",\"zigHw4RqWudQvG7sv\",\"PBnvAuiKXwjqjKG33\",\"Xj6R2zqhgumffQCAN\",\"KLmLKaJPfsYxp42p2\",\"tz8gZXKm6CParWiXS\",\"TPhfpB5tzQWSSn67n\",\"iojEnnY9FsMfYzp6f\",\"JEAi9mG3vvBomJ3Yu\",\"DTyNcDkiScCjgJt28\",\"fTNQmMvTZhhiGBCMe\",\"HwCcxujBuAjzk9Pb7\",\"C6prbNbCwgh4GrXdD\",\"hRiMXDZNAzyPd5tpt\",\"WpNHMgfjZE8aNN2MP\",\"XbxHXmh5ZmRN2gw3K\",\"vfDYAQsdiAJB4pFFB\",\"BXBReSCbChJqgxrfR\",\"TjeuzxKBd7b4ZajSs\",\"Q9afpRu3u8zuWuzLQ\",\"u7i7WPM63n42r8R8o\",\"dKpesT6tnCimdoQjw\",\"q6QsMYNMpPNtmyTeW\",\"dSd7wHgXGQeG5BQ2P\",\"aKzYNPqBqb3J3ZgyD\",\"GEDsDpNX4QMhZAxtJ\",\"uX66RpufnTtXG7CKp\",\"RkyCNqfDeSrR8TLmA\",\"mzhrQ8vWtqTf9azwo\",\"QPEejhBicc4eB66xF\",\"ta5CrWnBCRusD2WMo\",\"wS2o3x4nrsadtC3xP\",\"bmthyKcDF922zNqxK\",\"AwJD8PFqFD3Y8hy2T\",\"xHcL9dMiAPtp9vgK5\",\"nrgrxTy6dmtQwrFgx\",\"F9GLWPxRrMSdP66Y5\",\"yjtdwc2AC4jA2RWtn\",\"HqmxnQJM66Y57twhn\",\"BajWtLookqBgcwmyv\",\"vAbK8sCfKyFC78HYg\",\"NrRa4TS6uZR9xuXRt\",\"DkeEd2uhXypnPDnNT\",\"kNrnnMxhFZztMTBAX\",\"zXgwEs94QFkLraLMH\",\"PnzR8TWfcT5QHrek8\",\"CweSNtrMCbkZLY2Zj\",\"rGA5sQC5vSaqCmh6E\",\"8JDkF84xzTWTbTwak\",\"4Np3uu6Jj67L2CxiR\",\"wNuGsAdwdPtRn9JXz\",\"CWnZYFNAzm5K8NiiC\",\"CccXoqbXeoMydtEhh\",\"yEvXDzXnEPNz6tTCK\",\"nC4sPB69yYuTSks9T\",\"uxMb7RHC39EjWjFAM\",\"PEZjvhf6N3hYTgSrq\",\"uqSa9nyEpr786ZkgH\",\"bDbMWK6GrCnMSur6p\",\"zyFPLXxJzpku4xZYt\",\"K4AatGHfnPq2P5a3L\",\"DDD5tzD2m8bcntBB8\",\"6HgMANhu6WiGyXSGN\",\"jgyuzt5BpA3ohHG96\",\"kQ86mSGBiBQQvXzQR\",\"7h6RQYLtSmZdwkrpP\",\"8aEGGQPkGesWwoaom\",\"krYm4tDix6dKg6oWu\",\"smwekPWuzuHp82Q5m\",\"wCXRmtaqTLTT5S3ce\",\"zHmodYAbmY7u4zPo8\",\"a2Sb9bxiS8GaAu7M8\",\"WjuN7douP7Fe26xYE\",\"Ecg4m7srYGgZsb4Ck\",\"csxCzWqzHW8JsrzQq\",\"GWjEcCYSqDNZS9rQN\",\"NShP9rJAJJYSF2y5J\",\"7K4emAv8FE9xcDNQy\",\"yr822PZmmiDDenxpB\",\"oXDZm5zTCBJs5TdLo\",\"i2ZyBQDbgjH3xEBn8\",\"6akGaXW83HnSC5PSy\",\"omTzG6P3YKpb64LmZ\",\"CyzskHGsC6WSmYrLu\",\"dxKw3G4pTZWiS6PEm\",\"k7f82n7oxaWsmhdzT\",\"qD2LrwaDrSdiybLKY\",\"DPi9QGLctq2y76KuE\",\"Y2Y5CRMMPmdsKCSwL\",\"Lqnzx8i2kGeyYeEG6\",\"6gS4E2C84vBYTYeDZ\",\"capjEKEghfZ2tj5pC\",\"PyQHfCb2b4c4pXqqu\",\"4ZicxybyvEsuA9iET\",\"pwJAQRdX4FAFdymZh\",\"AYZrBpxmaHxq9th3T\",\"gwn5ho8yoS6n5Emcu\",\"yJgsKN8WPu7aSicEM\",\"unxAa6wr77rpd7ojc\",\"TzEDcbz2PZM4Cfgit\",\"RCzpsCinz5SQnBAta\",\"Cybtjz3cF7RgoiqrN\",\"QRv96jmNaYsWkxQEG\",\"YG3vSsRurbQ2KGnyh\",\"Kh3Pc2ZRusurLaMyP\",\"qkuvEvJycTXvF22cy\",\"FH5BXGChz34nc75Nd\",\"AgY6WsWyt69H9sC8C\",\"oqnKnp8g6g4fKFKNt\",\"8teSHp77vHhhvJWiS\",\"sKfrD9gjCDHuqLzSk\",\"oHbErJxjYJhD66d5w\",\"rrSC943cCKNG48sH4\",\"u72ipcjbNDSkWX8Gw\",\"mAARx8JHyScLzDA5W\",\"HAtNvtvpTjB2DkhnG\",\"kCtq4k5yvosjz9RoL\",\"spYFrLhsowc47QNNE\",\"wRttWTM59y8m5mx7x\",\"e4iESukvp745guEeE\",\"dDFzTqzPhpkeTcG2b\",\"iQ98ogih3WYqf6gZx\",\"xPXqCYhPEgdQJ26Qm\",\"s8e5oetjiQBj578hj\",\"NRCH4eiebS7LBjSCa\",\"k2Eo3wyfZZ6KxvKhN\",\"Cg3LKtEAJpsrdWroG\",\"6428wKHtwKkFdvBs5\",\"4hzd4qde3g9We8N4E\",\"RnY25enEBE8T9P5GS\",\"m4WSY9qvwPWGxhjKZ\",\"GGprTwrkjuccmrQRg\",\"NkScWttyMG45aK7zd\",\"RGMbFMZXJr7DhcAJy\",\"4J4T8DigvcevGWRRh\",\"CB48GHbw7xtwmiuPn\",\"oyKcm3zqdy8Ko5P5d\",\"R8HfPE3kgrwButJ8L\",\"BtdZezHfckxRLm7xR\",\"htJ2fQTJiztMfztKz\",\"Tf7TJFSPktJBgLA4k\",\"iBsN2jda8GGPgqj3u\",\"mEvwXi4fm6Hm49GBk\",\"sX9GZp3fYyQLrBKMJ\",\"vCeeMuYDbz3MB4vsk\",\"J3upzLHuEwXH7Z2hx\",\"LCZ6JTAhBZBmWLzm8\",\"iF4tdvn5sA9CM4T6T\",\"FuYTQcDNjct58rqPa\",\"biWB5ezaqJuntQ7oC\",\"DAhoDmrLmkoRsJhRx\",\"EfxwqhYdapX3dMQC2\",\"MnrmRMy2PP3Mk4sSY\",\"nJXgbSQozcoE8Wn4N\",\"s4YHxEDBTTq5EBMRs\",\"dYPkStFnLvAMsHSzZ\",\"YRAzEBJoLvSaiPtYx\",\"migNc2HGygHufcxYn\",\"vgT3ehH2o2KC94NsY\",\"CQhaiZqQcP87YteSG\",\"Ds7L5bksw2QRHjrKL\",\"PHYPYQ8bXGY6nYKwN\",\"HcdukZiuzgvoHjjz3\",\"5S9nX4rKsnCcnv4Cz\",\"7D76ZPLjgjZideoy9\",\"5XiuAqicKD4hBdu63\",\"wypdvuJQZB2TFyb2g\",\"RSTdK2S8CecymSS6h\",\"igLmeTgCMEPu7fQTd\",\"CkcqajsaNu4nso9oY\",\"uN5t57RETi5y2z5W8\",\"AXcnPX68zdMiLNSmu\",\"GEkPC7kh6zFe9hpfy\",\"QTZTmQEmkPv5sxQL4\",\"xNCLJDm9Bni6gByMz\",\"DpnYcMphntjsQ96qg\",\"qAby4AWXmTNeusvg3\",\"opcrDAS4AgXqrJXnb\",\"PC3pLs36zNzpRDSuE\",\"KEmTti9Tza8A2FLQW\",\"Krto2sGMfGWBLcL7n\",\"ZyrfhDTZHb8LymH5b\",\"AFfw7cGg83uYk2Miy\",\"SoRHbR9JnqHG8BZZ9\",\"n93uwjdirjyRCRATo\",\"fW3mQfbTKhp7enxGP\",\"DDFvEXnueWTSBn7EX\",\"mQjpf5TyF358J8Anz\",\"MXGuntvz3byrP6WJc\",\"Lg4t6SEWgtYz4u7Cj\",\"JLghX6Yduykf3kqwt\",\"5wCHxMQ5Km2bjqcGZ\",\"JoKQzpY7E7muQ8WYe\",\"pPpmP7xeJzGgK362R\",\"7zd88coQRZm85KyBa\",\"C5h42RTzbdrpPfeZo\",\"MyyfuAJrdaoBE2xGk\",\"buX4mCQhtXCfBjeno\",\"F7wta4nHmabMr9dfd\",\"Wp5CZXqvjwTpt5SKN\",\"LQxof8pGabGuWP7Gn\",\"hERDiXzMt3bagzfKp\",\"8PwfYqoDQFThzNtvf\",\"iYXdNw7tKcgA3QwBX\",\"XeNskNoh5DcHuKTWX\",\"iZhkeyxpRsrNhmznM\",\"Gfjre5fz3AHYamm2e\",\"eYfPWvZwnJQkHbSTK\",\"srJ34BaybkQh3qRkM\",\"ghMkPtdFCpM6w8nax\",\"2MjzJ7yxh3eT3xbng\",\"T78CHCScDRZjf5Cjy\",\"5hQnRWiKkhgKJXNMP\",\"LW8PqW4HFXWfoJGo6\",\"TmM3AN7g3fkh69ycj\",\"PexKJN2gNdthuHKxZ\",\"q9FfWNiMDKRiaCJ5j\",\"6QquZCZrdhJQw3ZAk\",\"YwAvPdqD6Xi2qjapZ\",\"zERid8pE9JnysiN5Q\",\"XD5nmvKQchKezPXhy\",\"b8cX9sc3oXiAiaHMB\",\"YaybbCdfjFQmsfgtp\",\"vCxuabDxEv9YC3Szb\",\"pnkBesnLDfK7CfjNu\",\"GZgFDSZdgKBuixp22\",\"NzbRqGWspQnWMoDrF\",\"cCFRcwA8Z4TCwsMGo\",\"cZccqzRQ9GgjQF6Az\",\"m7KZ5donpz5F6AR3z\",\"GMQM52abpXNgEBote\",\"JskJ7Q6dJqnkrs2fe\",\"8EJ4j2fcfjTJ7Zrzu\",\"wWDXL7Lz6oTAZF4mj\",\"uvLimfW9x3bCp7huQ\",\"XujK3rHd3JcM9TLJy\",\"2QGRoQn2dRq3scu7k\",\"oaJbwGAbtpgYhMEgd\",\"4bb7pim4ewTwrMTEA\",\"7q8oBsCHwn48Ppnrq\",\"CHvzhtXnv8HTbPQ56\",\"sbJcFfQjQ59Wfg4Cd\",\"DFpZcskPncmo7fuzR\",\"Dq24MSpogRmq6L4hX\",\"gjiu8kLnHYxe4HoBN\",\"T6iBEE2jp7f7iEF2P\",\"4TmgHkn5vqyHK3sYC\",\"s5M5RvgqR9BhB9JoC\",\"9qoWqLcHGiDX429rE\",\"YmQb9Mo4Xcg2vzgbn\",\"RTER5uJdW4khkiNbY\",\"a2Kmh6ekWqQQooHiQ\",\"mvJBakQ35CWAnbbEZ\",\"PqFpDvmcaPk4yE5xm\",\"T6Rm8mREPMZSftzrC\",\"jWbd7SYDzLPjc9EDh\",\"M2gFMJkocQSY6bsFR\",\"JiSpvq6C7azQEmENc\",\"Wpn95NqWxncQrwNgz\",\"x2Cz7S8rCKJqCE3Xe\",\"h9azrsq7TmmPWYCK7\",\"TiDFmxf3QEpbfXi4f\",\"sHjfbGQGLHE6JR6qu\",\"hZ2JDAEG2P5rMLWEW\",\"FiaTpm7ehfDv43wSG\",\"Afnps7TJQuS9sipMb\",\"TCvpT4EPb8qNssNB7\",\"pQwhNKiCne4gEZgcn\",\"zBk2cwJ9SLAhFuM3K\",\"PTDFuxAzou7W6asWt\",\"gKnWjDjwrJh7MK2df\",\"cdXmwjupCXSvJTSNo\",\"yXGiiSAR5nBHnH3yr\",\"aN6owKqBeZj7ZefFR\",\"d9LBRxvADNBB5QJMB\",\"ecytnKJxjCPk8Kbif\",\"5nbHH4eApn6So9h2n\",\"fGvJRtjbJFJJZLCnW\",\"5QN8R22z43SrwoHDz\",\"uK58g2EXxqxTaB2iA\",\"B4y8aoyXJtskYPFEL\",\"rhS8qXRjZcpDXkwnE\",\"dzS6WBTMHyFEag6Fp\",\"suArq5BbSy7gD6xri\",\"wjc4iejpErBhxWwHo\",\"arWdYjT3J9QKzoPLd\",\"rF97GDLqCgynr7BaD\",\"Ne8mK9DDHG8TRkoxG\",\"gbGzZz5Yq5hT357v8\",\"afvP29FhRou2bTaav\",\"PmRyaLmhAF4MMLBtM\",\"AQSqD9oNv2uPfxZCR\",\"tR9grPBLncwacBTzr\",\"CdXigydGTBLgA577m\",\"fMp8sPsKSECdfgF9j\",\"M4vq8ATaS9Jg5X7iP\",\"r83jJeskFETo3RLhZ\",\"PKu9i6fmR67WGCgad\",\"EE6qCDCRphjXXdE3n\",\"AwXQLqnTYzcCQrnqQ\",\"rraTtctZqnjXu2L2x\",\"Si3HYCLMe8PM47rRt\",\"XYwCvWPkjJu4Zn5Qu\",\"5CsHudxuDESxmjTPW\",\"Wi4H6ayKsNDWWQCG5\",\"4akHBgnDEDj3Rkv5n\",\"dqwatKFAeGpjmf5dm\",\"4Lwjr34ypKNQNQCar\",\"Cnx3Ss6zhhKExXxbC\",\"mdRQaGT98ycMt87S2\",\"szQg8dxKNNre3v3Jk\",\"o2Q8uM5DwJnSRmerd\",\"FGEeCTorXbX3WvjFW\",\"BrTDhPJcACL2bsrpJ\",\"3SgSNoAB3sxaYeT3w\"],\"total\":581,\"quality\":[4,5,5,5,5,4,5,5,5,5,5,5,5,5,5,1,5,5,5,5,3,4,3,5,5,5,5,5,5,3,4,4,5,5,5,5,5,5,5,3,5,4,5,5,5,5,5,5,5,5,5,5,4,5,5,3,5,5,5,5,5,5,5,5,5,5,5,5,5,4,5,5]},\"flags\":1},\"summary\":\"Given a string of numbers separated by a comma and space, return the total sum of all the numbers.\\n\\nExamples\\nadd_nums(\\\"2, 5, 1, 8, 4\\\") ➞ 20\\n\\nadd_nums(\\\"1, 2, 3, 4, 5, 6, 7\\\") ➞ 28\\n\\nadd_nums(\\\"10\\\") ➞ 10\\n\\nNotes\\nNumbers will always be separated by a comma and space.\\nYour function should accept negative numbers.\",\"tags\":[\"language_fundamentals\",\"numbers\"],\"timestamp\":{\"$date\":1582995050212},\"title\":\"Adding Numbers in a String\",\"quality\":4.694444444444445,\"family\":[{\"_id\":\"9SxN2Mh85B5SBTFWP\",\"language\":\"java\"},{\"_id\":\"qKQ8Bn6ontrLTTNsr\",\"language\":\"javascript\"},{\"_id\":\"stAFzKqQnWHztzrAW\",\"language\":\"python3\"},{\"_id\":\"3ta5jiGmBDXhKNNne\",\"language\":\"ruby\"}]}}"]