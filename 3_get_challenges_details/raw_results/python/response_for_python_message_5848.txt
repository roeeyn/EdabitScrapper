a["{\"msg\":\"result\",\"id\":\"1636\",\"result\":{\"_id\":\"E8TSTy4R5eWEkkaKf\",\"archived\":false,\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"def is_valid(txt):\\n\\t\",\"difficulty\":2.125,\"familyId\":\"eikCf83tZGeiGjok5\",\"instructions\":\"Create a function that takes a string (IPv4 address in standard dot-decimal format) and returns `True` if the IP is valid or `False` if it's not. For information on IPv4 formatting, please refer to the resources in the **Resources** tab.\\n\\n### Examples\\n```\\nis_valid(\\\"1.2.3.4\\\") ➞ True\\n\\nis_valid(\\\"1.2.3\\\") ➞ False\\n\\nis_valid(\\\"1.2.3.4.5\\\") ➞ False\\n\\nis_valid(\\\"123.45.67.89\\\") ➞ True\\n\\nis_valid(\\\"123.456.78.90\\\") ➞ False\\n\\nis_valid(\\\"123.045.067.089\\\") ➞ False\\n```\\n\\n### Notes\\n- IPv6 addresses are not valid.\\n- Leading zeros are not valid (`\\\"123.045.067.089\\\"` should return `False`).\\n- You can expect a single string for every test case.\\n- Numbers may only be between 1 and 255.\\n- The last digit may not be zero, but any other might.\",\"lab\":\"Test.assert_equals(is_valid(\\\"12.255.56.1\\\"), True, \\\"This is a valid IPv4\\\")\\nTest.assert_equals(is_valid(\\\"1.2.3.4\\\"), True, \\\"This is a valid IPv4\\\")\\nTest.assert_equals(is_valid(\\\"1.2.3\\\"), False, \\\"IPv4 contain exactly four octets.\\\")\\nTest.assert_equals(is_valid(\\\"1.2.3.4.5\\\"), False, \\\"IPv4 contain exactly four octets.\\\")\\nTest.assert_equals(is_valid(\\\"123.45.67.89\\\"), True, \\\"This is a valid IPv4\\\")\\nTest.assert_equals(is_valid(\\\"123.456.78.90\\\"), False, \\\"Each octet must be a decimal value between 0 and 255.\\\")\\nTest.assert_equals(is_valid(\\\"123.045.067.089\\\"), False, \\\"Each octet must be a decimal value between 0 and 255.\\\")\\nTest.assert_equals(is_valid(\\\"\\\"), False, \\\"An empty string is invalid.\\\")\\nTest.assert_equals(is_valid(\\\"abc.def.ghi.jkl\\\"), False, \\\"This is not in dot decimal format.\\\")\\nTest.assert_equals(is_valid(\\\"123.456.789.0\\\"), False, \\\"Each octet must be a decimal value between 0 and 255.\\\")\\nTest.assert_equals(is_valid(\\\"12.34.56\\\"), False, \\\"IPv4 contain exactly four octets.\\\")\\nTest.assert_equals(is_valid(\\\"12.34.56 .1\\\"), False, \\\"Check for spaces.\\\")\\nTest.assert_equals(is_valid(\\\"12.34.56.-1\\\"), False, \\\"Check for invalid characters.\\\")\\nTest.assert_equals(is_valid(\\\"123.045.067.089\\\"), False, \\\"Each octet must be a decimal value between 0 and 255.\\\")\\nTest.assert_equals(is_valid(\\\"192.168.1.1\\\"), True, \\\"This is a valid IPv4\\\")\\nTest.assert_equals(is_valid(\\\"192.168.1.1  \\\"), False, \\\"IPs with trailing spaces are invalid.\\\")\\nTest.assert_equals(is_valid(\\\"  192.168.1.1\\\"), False, \\\"IPs with leading spaces are invalid.\\\")\\nTest.assert_equals(is_valid(\\\"0.232.47.227\\\"), True, \\\"This is a valid IPv4\\\")\\nTest.assert_equals(is_valid(\\\"1e0.1e0.1e0.1e0\\\"), False, \\\"Each octet must be a decimal value between 0 and 255.\\\")\",\"language\":\"python3\",\"summary\":\"Create a function that takes a string (IPv4 address in standard dot-decimal format) and returns True if the IP is valid or False if it's not. For information on IPv4 formatting, please refer to the resources in the Resources tab.\\n\\nExamples\\nis_valid(\\\"1.2.3.4\\\") ➞ True\\n\\nis_valid(\\\"1.2.3\\\") ➞ False\\n\\nis_valid(\\\"1.2.3.4.5\\\") ➞ False\\n\\nis_valid(\\\"123.45.67.89\\\") ➞ True\\n\\nis_\",\"tags\":[\"validation\",\"algorithms\",\"regex\",\"strings\"],\"timestamp\":{\"$date\":1495258271649},\"title\":\"IPv4 Validation\",\"stats\":{\"completed\":{\"total\":265,\"ratings\":[2,2,2,2,2,1,0,1,3,2,1,2,2,2,1,2,1,1,2,3,1,1,2,0,2,2,1,3,1,2,2,3,1,2,3,2,1,2,2,2,1,1,2,2,1,2,1,1,2,2,3,1,2,2,2,1,1,2,1,2,3,2,1,2,3,2,3,3,2,2,2,3,1,2,2,1,1,2,2,2,1,1,2,2,2,2,3,5,2,3,1,2,2,2,2,2,2,3,2,3,3,2,2,2,1,3,2,2,2,3,0,3,1,2,3,2,2,2,3,3,3,2,3,2,2,2,3,3,2,3,3,1,2,3,3,3,4,3,3,3,2,2,2,3,3,3,3,3,3,2,2,2,3,3,1,2,2,3,2,3,2,2,2,3,2,2,3,2,3,0,1,3,3,2,3,3,2,3,2,3,0,3,2,3,4,3,3,0,3,1,3,2,3,2,2,3,1,2,3,3,2,2,3,3,3,2,2,3,3,3,2,3,3,0,1,2,3,3,3,3,2,1,3,3,1,3,0,3,1,0,3,3,4,2,2,1,3,0,4,5,0,0,2,3,3,1,2,0],\"rators\":[\"BkPgkDQGHm66X4Qai\",\"hi7Hvtq2mJfkXEGF2\",\"6fJpRpAgiWD5zX9qB\",\"MNNxtLjCPkedM7MFo\",\"yh7uB3NycmvCowCSv\",\"9cuKHXfCc5BW7CQpf\",\"WQLJPkqSsMDaTSxu5\",\"fbNWxXTqZy2mXNbGJ\",\"CvuRWPXsgkd9AFyAi\",\"5JLH29PSSii5bsAhm\",\"QKBz5hsLk5dNp3Awd\",\"KEQ7kEDJaAaD6CXcz\",\"Z8kAZW5QPX9wQMSES\",\"7KvPvzkX8uxH7pjo7\",\"xBqnMCkCDaDuqFia4\",\"BdbdeqmG8Ps48niyS\",\"pu7CuLPebkd5NEfKw\",\"HK3RW4kr7acFSAyL4\",\"tuyDaJzFy78jxvhCY\",\"iEMnJaXXfa6dzdQzb\",\"5JXnPbYC8RuBG6FkM\",\"tzHQmfmDbNJgqbeLx\",\"23oi2a3vQwhtLEbSj\",\"QiKGftY3qFAsv8GCG\",\"ewyPo746vdNES9LwS\",\"ZxF3LkWqeo4fe4ziK\",\"GRZzKCbeb4xKHFCrZ\",\"N2Asiecm97YpAP3nz\",\"QjpzasKxy3xBakLzz\",\"LfR9Bopm57BMNNnkp\",\"mqXfzC24CdThpCaGd\",\"4NnRqrPwSGKGKT4Nb\",\"nbmdkwFpFjSSdrtyz\",\"m2iiZZHTpzHcEKJMn\",\"mgJoduE8pStdjNmPD\",\"pdcaC4fEtsubBz4Wo\",\"WKsvry6M74GDrtqHQ\",\"jDoFYBX4iQiTXFEdf\",\"L2CCL7YFmfGjaygY5\",\"wPhd86JGzcCkkQdyy\",\"PwHLy9Fe5uctkKote\",\"wTpsQ2SdXt98yKkk2\",\"j9gg82Bp2L7nw7DyJ\",\"axnLNbddHAGKR8dtF\",\"HQ22rsRQRSgBc2uPy\",\"5f8x8WgpAPxfx9ZKo\",\"gMpPzrMTMnBZJMhmR\",\"YG776yzpLWoxa5GJs\",\"tAF9Gf6PiGogbZuWs\",\"z9FqvdkSb7hYJ63p5\",\"7CwgH38hHpiGdu2zT\",\"2GuzKEuE5QK5nDyrQ\",\"THD2EHgtJa2ooivJK\",\"koW8Q837QJc3XF6EP\",\"Qm7WibLuCP7hW3iXi\",\"M8jrv2FfpMQp9Qzpx\",\"9j8nvw7NhJoMm34HF\",\"QgdwHjy4x6MCPwfh9\",\"mJvkMXND2BjRvtped\",\"T82JyZFPNz8maF8f8\",\"jeuoearPPTcGPgXhf\",\"ixv6Lu4Esnwv7FyCr\",\"SK3kJggzuets9AFj6\",\"cBCgxKeWmdcPwz4MH\",\"RsX6W2ddWM8ajHzss\",\"nc7bRhkxgKyqusYe3\",\"Nj6FwgBtAXsaQwsM2\",\"jdnozNgcs9jSkANYG\",\"uJ5A3zjLi9iN5eeXX\",\"PAjQoyYKAkYAXERhf\",\"aTNWfAYfTZn2Ejn63\",\"6QwHpeajrbLQAm64L\",\"n9PZCXcWTygjaDsXs\",\"FHzvDACEZuAjRwL7v\",\"TJQcScCtNRobD8P4k\",\"zgoEhAyhrjnsSLPGw\",\"83i7PKDRGfBw5DLst\",\"q5s7yTnMdEoeXRTnH\",\"xQ7uLC6QTtEyKENv9\",\"vjgbYJGLr39bACXND\",\"jdpby6Bgjvsuofqkt\",\"6W2GSzrYjMD9ANBFY\",\"8JyqsSbN2FJXPr3cw\",\"vwmjqntQ9FvszKRye\",\"z7KAn4vEJTcrDKaum\",\"mGmoXwXiopnnnqYdh\",\"qvEvDcL32a5F4Tg6c\",\"Jqk2uJZZxEv5wZFze\",\"p6MPFLtmJ2z8EQT4Q\",\"FyDah3MTRW8vXTB6G\",\"SKabuq5XuhXBugKBa\",\"7jdhG9kLxnNcZ5522\",\"gb9rvGus2Jv7bjZSs\",\"qaR8DnWrTk8Mus5Q2\",\"Wf6AF7TuNwEobxuW6\",\"RTAEo5QwQQkxREFQu\",\"J67hC7LSEYS5JwhPj\",\"rB53BwZLCNjMautKC\",\"RbH5qgqQxL97gcGx7\",\"5uM9326sXAWGh27wr\",\"QzqL4jkcY4BMmNuS8\",\"uirSRaG8642XD4Axq\",\"yZvzB3qFb8pkHy4dg\",\"N9ut74w8QbhN4YX78\",\"nWjL7xNgTzut9xcRN\",\"X9NeqaKpfykoscpYr\",\"efWYnYAMeczjDFnAt\",\"hsrNYf3WbexXJKhCq\",\"3ifAHQzsMasfQySoL\",\"nN5iAnMzdgLLZLosm\",\"vH5ky4S9isLZTQ6ph\",\"WmayPioph5bDDZddM\",\"T3ZAuoMrJjvZwN55B\",\"CNNCmzsB78cw868HB\",\"XjC9ivzaAxfcFiSGj\",\"ftrNJtKATEapkZ6yh\",\"P865cxeMupiPucJSK\",\"FRcr2SRsNdmCSYJKe\",\"cF8nvyGwfFKE5b2iy\",\"3W7CgbRjEtA9YmoTM\",\"ZCC9ZDA8QwRdn8ter\",\"FkCM6nNgxYepHvWvM\",\"4fQSjCThZyxYGfyHf\",\"Dj9ttv8j9E3NHYKXF\",\"ab7BsQuhDo3QgE6bh\",\"P59rek6gvwTzHvRYa\",\"Y3KkPrBzMBgMiqaQ6\",\"n5wubRfh6zh8QRymN\",\"kQH5b8MXJunh84Czq\",\"6fwzAwFY549EuSvms\",\"C97pK78zjcJuB6kHq\",\"e9JqvRoBDCY7wFgMR\",\"GMbZRE4gvgfkDxSvY\",\"rWABomHWzrJonaBzh\",\"kYppDQBsh2uejpAxz\",\"iyZcWmYpoZM469SAx\",\"CioWqrzmDwyunW5zS\",\"BFhZeLGuWkzfHy3hB\",\"jo9STxPcJMSAEWEDi\",\"W2wFFFx9pqgwmkFi3\",\"JXvSEnsCSjjLNhAXB\",\"QaE2QnnBbzdiExxPH\",\"3bB8mJha9tBmKzmtm\",\"7g3vZaQXhLpxrajyg\",\"EKjBJc6wPe3sJfx7H\",\"CBtkR95QjjgT4gFBs\",\"cecRRLKKu5R62D5xE\",\"StJwhPFkevcqZ9swQ\",\"Mb5sjE2qnvjL2xcBG\",\"mBGpSNpLxBmS68CET\",\"PFjMZGHNAPTkgd7tq\",\"ogo5Rxp4yxK3XEc4n\",\"AF6LgdKhEdzwgRJom\",\"4HC75a4BAtjSd8jPv\",\"ahWFxnaxt9bXSA4f3\",\"AoFJktvBLQnafXDfb\",\"tHEH9MBHBAGvhgJGd\",\"nF8JNXxgffxeMbtPq\",\"inEQthEoPuP337WTY\",\"TNQ7ixK78HHTLP7it\",\"RkpDGH3gMkJivXBvm\",\"NvR9Gs5bL8JYPbWHe\",\"BFNm9gacwba9KyLFW\",\"TNMAJidLpPdH4kmBv\",\"vtBrNNcQn8TFSs275\",\"td7qPZ7Lv4pEWT2Ya\",\"6u7yc9m6HuHGbHzph\",\"GAMLghpc9JMXz3jvs\",\"aXCm9vWqKwL9XFYoj\",\"yrCNkFYQBEDE76eFS\",\"jYJ26SiLKBu5GRumq\",\"WkWyq9wMkZhXB6zsD\",\"AYaEkTWLMmfzpwejr\",\"zZo9NtDMkY4HdWmWP\",\"cR3ibTMxLyEdDFCHY\",\"N2wnZXkhDH86mgjQ8\",\"gMJhLdyw3tH7L96X2\",\"3SKmXhcLPPkmQhjip\",\"jYypgEfhDWb9syYP7\",\"jhtzDqnPZYFyKesFg\",\"XKi8iZXBCHCaebSHh\",\"oqGkxvASXq52iTDvp\",\"HqmxnQJM66Y57twhn\",\"otXtuQygbcYATMZoP\",\"9akqRbyayqb9C3hpS\",\"AbrJ8hMyv5fFXG6DN\",\"2fxapKr8XGdNeaKi2\",\"EXZfPb8YH28EL8Rh9\",\"JKb5rhL6DKcCAypF9\",\"CbaeWRARjiGi6HbLq\",\"ouPtoRyNq8hKH2WkT\",\"K96FwtfDDN5WM4Bb7\",\"s5M5RvgqR9BhB9JoC\",\"C4QntmkYtB89GNtpd\",\"4CFzv558qbGcpQwc4\",\"AasGs8AeX9Lcb9xJn\",\"aEm3Wvj2rFYRL8Lrb\",\"w3A7cBWyAfukk6xEQ\",\"Z4Wd4iFu5mdjSJDSA\",\"8PwfYqoDQFThzNtvf\",\"yTtSCvGPyYna6JuRC\",\"mDWNyaaQ9hvPCRzSd\",\"ZNnsMeNkdDhHjSrZb\",\"YRstQuthRkFeBiXug\",\"PytNZK9mNiRiZxPrm\",\"EjbDDFRECrzQDkzrX\",\"gJYuGdkXEWWmGRLzu\",\"9pzFiFK3ANLjQfnr2\",\"HF28xZKSLM9wEuqNg\",\"586FdBhazpwJfnRYR\",\"55RQznnuTGpsj3EXd\",\"PCTGbXBpNgYbFf48T\",\"Nb6LYPoQP6KJZt8mz\",\"hLYtjmHXAxNTtdSFY\",\"n2BRY9X8899dcG8Bw\",\"KSkHGWmBKfMDqkTbP\",\"R4SjTgDnpigJYDLyL\",\"cykCKNJcqFBxz4T8s\",\"iojEnnY9FsMfYzp6f\",\"DEDniTrstQYGounXT\",\"zZDaXBxMzTCBhNkgL\",\"eoepTq5ES5tfgY9XT\",\"yjtdwc2AC4jA2RWtn\",\"JQkZXeaLy3giT5p6W\",\"bNZN65S3GkReo8qNT\",\"9CoqdidjM9KbeKnHY\",\"Yp7uvStL97cC9fKkY\",\"v9KtC8YLbMWmXiW2H\",\"qD2LrwaDrSdiybLKY\",\"QRv96jmNaYsWkxQEG\",\"p8qqFdJ3FSk5x9z3G\",\"rGpPd6PvpzLaqps4g\",\"xn7uGNKeAwPEkP9oA\",\"J5T8gZqiZXFuFDTQ7\",\"dkcmCKwqApX5jBggc\",\"J3upzLHuEwXH7Z2hx\",\"DPi9QGLctq2y76KuE\",\"8sAqLqpeSBWfaGe8f\",\"gywE8Lb2RgQEWpvTX\",\"gXTAie79kiw28tx5u\",\"StNu7DPyTgEStZsMY\",\"oBcs8GLX2ZFLXQy8y\",\"cAP3n5NY64uoMwzRR\",\"FEYpu9RWysAgW3XnP\",\"aFYzioHvZPvPaunsg\",\"GGdmhAvxXhqhhibJN\",\"ADycYubh8WTMCXhgR\",\"H9KZi2cjt4FwH7qog\",\"PX8mHXhg9wM3Y9C5T\",\"rfyEkETeoS96QNH4e\",\"T6iBEE2jp7f7iEF2P\",\"gKnWjDjwrJh7MK2df\",\"yod5YhKtPqw2GfG9B\",\"buX4mCQhtXCfBjeno\",\"2PufnQcsHsfymufX3\",\"8sNv5PTHa7XQ8bNqR\",\"4Lwjr34ypKNQNQCar\",\"CHvzhtXnv8HTbPQ56\"],\"quality\":[4,4,5,5,4,4,5,5,2,5,4,5,4,5]},\"complaints\":{\"total\":2,\"reasons\":[[\"confusing\"],[\"bad_resources\"]],\"skippers\":[\"BkPgkDQGHm66X4Qai\",\"LtbAJoRp7ejepFgzz\",\"y2DyK9zDQLv2swH5t\"]},\"instructions\":{\"score\":-0.55,\"voters\":[\"ixv6Lu4Esnwv7FyCr\"]},\"tests\":{\"score\":0,\"voters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.357142857142857,\"family\":[{\"_id\":\"vk3NibPRqsR2RquTM\",\"language\":\"cpp\"},{\"_id\":\"BNKRr4N2oFZQfrTY3\",\"language\":\"csharp\"},{\"_id\":\"kHLmnk3RhekGKe7fP\",\"language\":\"java\"},{\"_id\":\"S5nPFF44x7JceXPBn\",\"language\":\"javascript\"},{\"_id\":\"THCzM2cv7Wu5M34eu\",\"language\":\"php\"},{\"_id\":\"E8TSTy4R5eWEkkaKf\",\"language\":\"python3\"},{\"_id\":\"H5fRQBZwD8kYviS8E\",\"language\":\"ruby\"},{\"_id\":\"pXuNFANTvvWAmrrea\",\"language\":\"swift\"}]}}"]