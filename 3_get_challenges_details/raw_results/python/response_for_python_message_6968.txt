a["{\"msg\":\"result\",\"id\":\"2193\",\"result\":{\"_id\":\"eoK63mG5tJDu439nJ\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"def isWordChain(words):\\n\",\"difficulty\":3.371794871794872,\"familyId\":\"diGZd2RYkdGzWsCqK\",\"instructions\":\"Let's update our previous **word-chain** definition. In this 2.0 version, a **word-chain** is an array of words, where the next word is formed by either: \\n\\n1. Changing exactly **one** letter from the previous word\\n2. Adding or subtracting **one** letter\\n\\nNote: You can only do one (not both) for each word change.\\n\\n### Examples\\n```\\nisWordChain([\\\"row\\\", \\\"crow\\\", \\\"crown\\\", \\\"brown\\\", \\\"brawn\\\"]) ➞ True\\n# add \\\"c\\\" to \\\"row\\\" to get \\\"crow\\\", \\\"n\\\" to get \\\"crown\\\", etc. \\n\\nisWordChain([\\\"flew\\\", \\\"flaw\\\", \\\"flan\\\", \\\"flat\\\", \\\"fat\\\", \\\"rat\\\", \\\"rot\\\", \\\"tot\\\"]) ➞ True\\n\\nisWordChain([\\\"meek\\\", \\\"meet\\\", \\\"meat\\\", \\\"teal\\\"]) ➞ False\\n# \\\"meat\\\" => \\\"teal\\\" changes 2 letters (can only change 1)\\n\\nisWordChain([\\\"run\\\", \\\"runny\\\", \\\"bunny\\\"]) ➞ False\\n# \\\"run\\\" => \\\"runny\\\" adds 2 letters (can only add 1)\\n```\\n\\n### Notes\\n* All words will be in lower-case.\",\"lab\":\"Test.assert_equals(isWordChain([\\\"row\\\", \\\"crow\\\", \\\"crown\\\", \\\"brown\\\", \\\"brawn\\\"]), True)\\nTest.assert_equals(isWordChain([\\\"flew\\\", \\\"flaw\\\", \\\"flan\\\", \\\"flat\\\", \\\"fat\\\", \\\"rat\\\", \\\"rot\\\", \\\"tot\\\"]), True)\\nTest.assert_equals(isWordChain([\\\"meek\\\", \\\"meet\\\", \\\"meat\\\", \\\"teal\\\"]), False)\\nTest.assert_equals(isWordChain([\\\"run\\\", \\\"runny\\\", \\\"bunny\\\"]), False)\\nTest.assert_equals(isWordChain([\\\"fun\\\", \\\"fund\\\", \\\"find\\\", \\\"bind\\\", \\\"wind\\\", \\\"wild\\\", \\\"wile\\\", \\\"wiles\\\"]), True)\\nTest.assert_equals(isWordChain([\\\"nut\\\", \\\"but\\\", \\\"bot\\\", \\\"boot\\\", \\\"loot\\\", \\\"look\\\", \\\"book\\\", \\\"brook\\\"]), True)\\nTest.assert_equals(isWordChain([\\\"some\\\", \\\"tome\\\", \\\"tame\\\", \\\"lame\\\", \\\"flame\\\", \\\"flamer\\\", \\\"blamer\\\", \\\"blamers\\\"]), True)\\nTest.assert_equals(isWordChain([\\\"a\\\", \\\"at\\\", \\\"hat\\\", \\\"that\\\", \\\"what\\\", \\\"flat\\\"]), False)\\nTest.assert_equals(isWordChain([\\\"link\\\", \\\"blink\\\", \\\"wink\\\", \\\"sink\\\"]), False)\\n\\n\\n\\n\\n\",\"language\":\"python3\",\"summary\":\"Let's update our previous word-chain definition. In this 2.0 version, a word-chain is an array of words, where the next word is formed by either:\\n\\nChanging exactly one letter from the previous word\\nAdding or subtracting one letter\\n\\nNote: You can only do one (not both) for each word change.\\n\\nExamples\\nisWordChain([\\\"row\\\", \\\"crow\\\", \\\"crown\\\", \\\"brown\\\", \\\"brawn\\\"]) ➞ Tru\",\"tags\":[\"arrays\",\"strings\",\"validation\"],\"timestamp\":{\"$date\":1553893292621},\"title\":\"Word Chain 2.0\",\"stats\":{\"completed\":{\"total\":85,\"ratings\":[3,3,3,3,3,3,3,3,3,3,4,2,3,5,3,3,3,0,3,2,2,4,2,3,3,2,4,4,2,3,4,4,4,3,3,5,3,4,3,4,3,5,4,3,5,4,5,5,4,5,5,1,4,4,0,5,2,3,2,5,0,4,2,2,4,4,5,5,5,4,0,5,2,4,5,5,5,4],\"rators\":[\"mNMQvcxKSSvqqMYCH\",\"yZvzB3qFb8pkHy4dg\",\"uvSpFzgYjBKFwgLcA\",\"xX3nNpjgboHRcPow7\",\"4SssKnKkfSorw2n9e\",\"8JyqsSbN2FJXPr3cw\",\"tAF9Gf6PiGogbZuWs\",\"T3ZAuoMrJjvZwN55B\",\"MenQHdCnYgNBYrZQy\",\"gb9rvGus2Jv7bjZSs\",\"AYaEkTWLMmfzpwejr\",\"PFjMZGHNAPTkgd7tq\",\"BFNm9gacwba9KyLFW\",\"s5M5RvgqR9BhB9JoC\",\"HqmxnQJM66Y57twhn\",\"KZpjBTFm49P6nburM\",\"Jqk2uJZZxEv5wZFze\",\"8PwfYqoDQFThzNtvf\",\"WLFPvm65aHfgwQy7N\",\"aEm3Wvj2rFYRL8Lrb\",\"AasGs8AeX9Lcb9xJn\",\"ebPYSECG97bnpAp7s\",\"PytNZK9mNiRiZxPrm\",\"gJYuGdkXEWWmGRLzu\",\"mDWNyaaQ9hvPCRzSd\",\"ywk3XGvcmpTgRxwZa\",\"W6sCwS23msxRPcBLT\",\"ZNnsMeNkdDhHjSrZb\",\"W5TajitmCyxz87zAC\",\"HmKFZqFH9YC346djy\",\"isYbk8LbCe2FX8sg7\",\"vYkK7qEuFnmQe54fX\",\"KpHrC7WPEojnzgEtz\",\"44dAzThMuyGZ5StXB\",\"FDWEEwwAtxD7SkqBD\",\"vGRSrdg2F3NKqEP5e\",\"SGhPxX5bHGL8zZqtt\",\"hAcYeP2bPsvZoFBFw\",\"aCNWav8S8Try9RkC6\",\"MxQXA7kigYpyBS37i\",\"bJaPCBx63YxdJAuTS\",\"5H9MNfC4DPwxbakTf\",\"3MybBtCNPcFHLMYmJ\",\"w8CnB7XMSgn2anXNB\",\"fznzd3qnvtbFkkizz\",\"qPpQfR5KyDb5Y3EFf\",\"5dHucvf2qBYyKim7X\",\"diA4hKkZ9WRCu4ive\",\"xn7uGNKeAwPEkP9oA\",\"Ecg4m7srYGgZsb4Ck\",\"GgLd4eWBu79mdjtkP\",\"hZW6j5s6RHpx35phy\",\"Bc2LasqgBayt2oLqX\",\"4fhjJBvLBWh6QeSih\",\"3CEQhN9ZBnrLd5AxJ\",\"8WpvgSbQciTQWdd8T\",\"DPi9QGLctq2y76KuE\",\"J23RcmzbdtBbPCTjT\",\"oZiGwL535nJ5ZMJr7\",\"EH68sDGGufTc5vifi\",\"8nE8QHnFYsHCFebte\",\"pxxhsEH7yhp4GJ5BM\",\"h4x2jaMdj5aQZbW5g\",\"ofwoyn2Aoj2hoXN7x\",\"siKtn4x4vNM2m2QBf\",\"HF28xZKSLM9wEuqNg\",\"xyMcsLZsKgcbPzZ4N\",\"58M252WF7SPRinfBx\",\"hpZARXGLAJt2EDmcf\",\"iS5BrkGLzJyPK7nKt\",\"b3Dk2LqoEgripS3Y3\",\"8sNv5PTHa7XQ8bNqR\",\"yGyvKr9Qntq7YDvi5\",\"hBKf7LeSP6i2saXjk\",\"2PufnQcsHsfymufX3\",\"a777e8chPvJkY3tKa\",\"iojEnnY9FsMfYzp6f\",\"J3upzLHuEwXH7Z2hx\",\"yjtdwc2AC4jA2RWtn\",\"MpfytGFYF77emJ3cT\",\"buX4mCQhtXCfBjeno\"],\"quality\":[3,5,5,5,5,5,5,5,5,5,5,5]},\"tests\":{\"score\":0,\"rators\":[\"mNMQvcxKSSvqqMYCH\"]},\"instructions\":{\"score\":0,\"rators\":[\"mNMQvcxKSSvqqMYCH\"]},\"flags\":0},\"isHidden\":false,\"quality\":4.833333333333333,\"family\":[{\"_id\":\"4aPh4ryS5CPihFojQ\",\"language\":\"cpp\"},{\"_id\":\"hbHJdMv4HubYs5TRv\",\"language\":\"java\"},{\"_id\":\"yGvaYr3X8xHPxWRcb\",\"language\":\"javascript\"},{\"_id\":\"eoK63mG5tJDu439nJ\",\"language\":\"python3\"},{\"_id\":\"X6aT5HiSpZ33mbkN5\",\"language\":\"ruby\"}]}}"]