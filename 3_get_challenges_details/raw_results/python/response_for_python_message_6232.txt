a["{\"msg\":\"result\",\"id\":\"1827\",\"result\":{\"_id\":\"yiEHCxMC9byCqEPNX\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"def is_palindrome(p):\\n\\t# your recursive solution here\",\"difficulty\":2.4864864864864864,\"familyId\":\"G9vRTHbTdfsfxqe75\",\"instructions\":\"A palindrome is a series of letters or numbers that reads equivocally backwards. Write a **recursive** function that determines whether a given string is a **palindrome** or not.\\n\\n### Examples\\n```\\nis_palindrome(\\\"Go hang a salami, I'm a lasagna hog!\\\") ➞ True\\n\\nis_palindrome(\\\"This phrase, surely, is not a palindrome!\\\") ➞ False\\n\\nis_palindrome(\\\"Eva, can I see bees in a cave?\\\") ➞ True\\n```\\n\\n### Notes\\n- Symbols and special characters should be ignored.\\n- You are expected to solve this challenge via **recursion**.\\n- You can check on the **Resources** tab for more details about *recursion*.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"from re import findall, MULTILINE\\nfrom inspect import getsource\\n\\ndef check_recursive(fn):\\n  try:\\n    src, n = getsource(fn), fn.__name__\\n    if n == '<lambda>': n = src.split('=')[0].strip()\\n    return len(findall(n, src, flags=MULTILINE)) > 1\\n  except OSError: return True\\n\\nTest.assert_not_equals(check_recursive(is_palindrome), False, 'Recursion is required!')\\n\\nstr_vector, res_vector = [\\n  \\\"Maneuquenam\\\", \\\"Not a palindrome\\\", \\\"A man, a plan, a cat, a ham, a yak, a yam, a hat, a canal-Panama!\\\",\\n  \\\"Go hang a salami, I'm a lasagna hog!\\\", \\\"This phrase is really this!\\\", \\\"Red rum, sir, is murder.\\\",\\n  \\\"Big step on no pets, Gib!\\\", \\\"One True fortune, but no!\\\", \\\"Don't nod.\\\", \\\"I did, did I?\\\", \\\"My gym.\\\",\\n  \\\"Top spot.\\\", \\\"Was it a cat I saw?\\\", \\\"No lemon, no melon.\\\", \\\"Eva, can I see bees in a cave?\\\",\\n  \\\"Can I be iconic?\\\", \\\"Madam I'm Adam.\\\", \\\"The man on the moon are them.\\\", \\\"Sit on a potato pan, Otis.\\\",\\n  \\\"Truly, a classic caddilac!\\\", \\\"Able was I, ere I saw Elba.\\\", \\\"Step on no pets!\\\"\\n], [\\n  True, False, True, True, False, True, True, False, True, True, True,\\n  True, True, True, True, False, True, False, True, False, True, True\\n]\\nfor i, n in enumerate(str_vector): Test.assert_equals(is_palindrome(n), res_vector[i])\",\"language\":\"python3\",\"quality\":5,\"summary\":\"A palindrome is a series of letters or numbers that reads equivocally backwards. Write a recursive function that determines whether a given string is a palindrome or not.\\n\\nExamples\\nis_palindrome(\\\"Go hang a salami, I'm a lasagna hog!\\\") ➞ True\\n\\nis_palindrome(\\\"This phrase, surely, is not a palindrome!\\\") ➞ False\\n\\nis_palindrome(\\\"Eva, can I see bees in a cave?\\\") ➞ T\",\"tags\":[\"recursion\",\"strings\",\"validation\",\"logic\"],\"timestamp\":{\"$date\":1602337157570},\"title\":\"Recursion: Palindrome Phrase\",\"stats\":{\"completed\":{\"total\":121,\"ratings\":[5,5,5,5,5,4,0,5,2,3,5,2,3,1,5,4,3,5,0,0,3,2,2,1,1,0,4,0,1,4,2,4,0,2,2,3,5,3,0,4,4,2,1,1,0,0,2,1,4,0,0,4,2,4,2,3,2,0,3,4,2,4,3,2,4,2,3,0,3,5,2,1,2,2,2,4,2,2,2,3,4,2,2,3,3,0,4,2,2,2,2,5,2,2,4,4,2,1,2,0,3,4,4,4,5,2,0,3,2,0,2],\"quality\":[5,5,5,5],\"rators\":[\"a777e8chPvJkY3tKa\",\"RnTBbuFCrJWW6Ayvj\",\"8PwfYqoDQFThzNtvf\",\"mDWNyaaQ9hvPCRzSd\",\"KZ2xddpM2f9JRaryB\",\"tAF9Gf6PiGogbZuWs\",\"aEm3Wvj2rFYRL8Lrb\",\"6QHXQkQAcXMJ7C2kK\",\"s5M5RvgqR9BhB9JoC\",\"5dHucvf2qBYyKim7X\",\"DPi9QGLctq2y76KuE\",\"h4x2jaMdj5aQZbW5g\",\"iS5BrkGLzJyPK7nKt\",\"dB6s7p6pFMEyagbn2\",\"GGdmhAvxXhqhhibJN\",\"w2HhxvSLmDhaGCAjE\",\"Jqk2uJZZxEv5wZFze\",\"8JyqsSbN2FJXPr3cw\",\"HF28xZKSLM9wEuqNg\",\"j8FR2cHxpsYtNo9Dw\",\"Tg24gZyPmk8uDXcBY\",\"F3qx3D3MiJjZvDWWE\",\"T2vhHPhRR96hRizq8\",\"8sNv5PTHa7XQ8bNqR\",\"p8qqFdJ3FSk5x9z3G\",\"SuhokLqQw2GKeWAYp\",\"XNmN6ztj36a7eChbD\",\"7LM4GsLioPLWF8iCz\",\"hkiz2Nv927cYGrA86\",\"pfbrH83s66L2EZQsH\",\"iojEnnY9FsMfYzp6f\",\"gXTAie79kiw28tx5u\",\"J3upzLHuEwXH7Z2hx\",\"gJYuGdkXEWWmGRLzu\",\"QRv96jmNaYsWkxQEG\",\"xn7uGNKeAwPEkP9oA\",\"yjtdwc2AC4jA2RWtn\",\"2PufnQcsHsfymufX3\",\"AasGs8AeX9Lcb9xJn\",\"ebPYSECG97bnpAp7s\",\"BuYaCdQjtba2YWzEW\",\"MpfytGFYF77emJ3cT\",\"H9KZi2cjt4FwH7qog\",\"d8qtzoLB264iP8tdY\",\"HqmxnQJM66Y57twhn\",\"7pkCr9LZf42mECNLX\",\"fznzd3qnvtbFkkizz\",\"AQSqD9oNv2uPfxZCR\",\"gdndm3hHunARcYWow\",\"T6iBEE2jp7f7iEF2P\",\"nkL2knkcNaiHCerW2\",\"Yp7uvStL97cC9fKkY\",\"3KkyQm77zsew58Dc2\",\"nc944MfYpWghDnNu6\",\"XydQ745ewcdXpxfAr\",\"RoErKvc4oJyj4FZ8J\",\"PH32cNxBjrK4a28sn\",\"hZu74uvdDyYew4ruW\",\"KgPGrnSu7dFcn6A3t\",\"jg3qo9HhxPphgEcE6\",\"NfMJuiBk6FN5Jc6ow\",\"dqa7FwRWsk5mbnuM7\",\"dNBGNMKLZam4bvHuZ\",\"6tahZBpmqXBxnsSpg\",\"oBcs8GLX2ZFLXQy8y\",\"P7NmFbCJ5offXMRvB\",\"gKnWjDjwrJh7MK2df\",\"42daw5PafNk6AoTgX\",\"3YC4suDFTJjXvKhiR\",\"rhS8qXRjZcpDXkwnE\",\"x9F5WvWftdnhG7DqT\",\"suArq5BbSy7gD6xri\",\"9pqtNWrsTJdZcRbEZ\",\"Zr5pa7aDmco4WEfaC\",\"aFYzioHvZPvPaunsg\",\"yTtSCvGPyYna6JuRC\",\"fzJ86D3jYP6Wv5Hks\",\"5QN8R22z43SrwoHDz\",\"KpBYDbcBDDvtmZNfA\",\"EM4TC7L4yp6TQWZwp\",\"k9BkBo9XBNBRtpWLq\",\"okCRdHPFDYX4PGtwL\",\"JKb5rhL6DKcCAypF9\",\"5xcPnT7ttWbvRPN6t\",\"gQ7APkqpRnn78e35D\",\"GagpWTe5kgmjoSzya\",\"psXeXhMvKsWTerC9J\",\"BrTDhPJcACL2bsrpJ\",\"FNi2H5fKc5EAQ2Hcq\",\"zMso7SJcPdoqEwS8y\",\"ESacWhHCTP8aZr9zt\",\"bnq8itMEfDLiPCNAw\",\"MHiQx9E8rPgzJfsJy\",\"euPBBaYXyS8RBr9KB\",\"iqmPb9JuJDgTFeR8Q\",\"Rk54WG323KeT6odSb\",\"dWx4RJ5F7vdb8Njjt\",\"23oi2a3vQwhtLEbSj\",\"Fa2FjBNgP5NpX2CNc\",\"W8tg6oMDjmzGzaW8r\",\"Fu56JWoBzq98dPt85\",\"DHQZJTBodhnfcS8Qp\",\"m3R9aaRoEbaxRsSNA\",\"cZFrJSFYf9BzAQug7\",\"P5xdBe6cYBLCE7pwY\",\"n2qKKxomPnb4zez5M\",\"RZejvpBSigGCH9FRS\",\"FFwRo7BQbosKtRbK9\",\"CHvzhtXnv8HTbPQ56\",\"9uNHHmrgWLQ5sz9Tb\"]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"iY6e9fMQSWi38J699\",\"language\":\"java\"},{\"_id\":\"NmmKFQWA9dzWz5can\",\"language\":\"javascript\"},{\"_id\":\"yiEHCxMC9byCqEPNX\",\"language\":\"python3\"}]}}"]