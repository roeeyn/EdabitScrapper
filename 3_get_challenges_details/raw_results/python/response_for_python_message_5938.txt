a["{\"msg\":\"result\",\"id\":\"1680\",\"result\":{\"_id\":\"tbEwDviZBadDSeGSz\",\"author\":\"Albrecht\",\"authorId\":\"EKrSBrTXuhE3f4xsR\",\"code\":\"def morse(txt):\\n\\td = {\\\"A\\\":\\\".-\\\",\\\"B\\\":\\\"-...\\\",\\\"C\\\":\\\"-.-.\\\",\\\"D\\\":\\\"-..\\\",\\\"E\\\":\\\".\\\",\\n\\t\\\"F\\\":\\\"..-.\\\",\\\"G\\\":\\\"--.\\\",\\\"H\\\":\\\"....\\\",\\\"I\\\":\\\"..\\\",\\\"J\\\":\\\".---\\\",\\n\\t\\\"K\\\":\\\"-.-\\\",\\\"L\\\":\\\".-..\\\",\\\"M\\\":\\\"--\\\",\\\"N\\\":\\\"-.\\\",\\\"O\\\":\\\"---\\\",\\n\\t\\\"P\\\":\\\".--.\\\",\\\"Q\\\":\\\"--.-\\\",\\\"R\\\":\\\".-.\\\",\\\"S\\\":\\\"...\\\",\\\"T\\\":\\\"-\\\",\\n\\t\\\"U\\\":\\\"..-\\\",\\\"V\\\":\\\"...-\\\",\\\"W\\\":\\\".--\\\",\\\"X\\\":\\\"-..-\\\",\\\"Y\\\":\\\"-.--\\\",\\\"Z\\\":\\\"--..\\\",\\n \\t\\\" \\\":\\\".....\\\"}\",\"difficulty\":2.1463414634146343,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"WtejRCck2pzHD582F\",\"instructions\":\"Given is a dict with the Morse alphabet, added a code for space between words. Write a function, which takes a string, either out of letters or out of Morse code from the dictionary. The function outputs an encrypted letter string of a decrypted Mmorse code.\\n\\n### Examples\\n```\\nmorse(\\\"F Mueller\\\") ➞ \\\"..-. ..... -- ..- . .-.. .-.. . .-.\\\"\\n\\nmorse(\\\".--- --- .... -. ..... ..-. ..... -.- . -. -. . -.. -.--\\\") ➞ \\\"JOHN F KENNEDY\\\"\\n\\nmorse(\\\"Barack Obama\\\") ➞ \\\"-... .- .-. .- -.-. -.- ..... --- -... .- -- .-\\\"\\n```\\n\\n### Notes\\n- You can use capital or small letters, however Morse always returns capitals.\\n- Use only letters and Morse codes from the dictionary.\",\"isHidden\":false,\"lab\":\"Test.assert_equals(morse(\\\"Barack Obama\\\"), \\\"-... .- .-. .- -.-. -.- ..... --- -... .- -- .-\\\")\\nTest.assert_equals(morse(\\\"Bill Clinton\\\"), \\\"-... .. .-.. .-.. ..... -.-. .-.. .. -. - --- -.\\\")\\nTest.assert_equals(morse(\\\"George Washington\\\"), \\\"--. . --- .-. --. . ..... .-- .- ... .... .. -. --. - --- -.\\\")\\nTest.assert_equals(morse(\\\"Benjamin Franklin\\\"), \\\"-... . -. .--- .- -- .. -. ..... ..-. .-. .- -. -.- .-.. .. -.\\\")\\nTest.assert_equals(morse(\\\"..-. .-. .. . -.. .-. .. -.-. .... ..... ... -.-. .... .. .-.. .-.. . .-.\\\"), \\\"FRIEDRICH SCHILLER\\\")\\nTest.assert_equals(morse(\\\".--- --- .... .- -. -. ..... .-- --- .-.. ..-. --. .- -. --. ..... ...- --- -. ..... --. --- . - .... .\\\"), \\\"JOHANN WOLFGANG VON GOETHE\\\")\\nTest.assert_equals(morse(\\\".--. . - . .-. ..... .... .- -. -.. -.- .\\\"), \\\"PETER HANDKE\\\")\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,2,1,2,3,1,2,2,2,2,2,1,3,3,3,2,2,2,1,2,3,2,3,2,1,3,2,0,1,1,2,2,2,3,3,3,1,3,3,0,3,3,4,2,2,3,2,3,2,2,3,3,1,2,2,2,2,3,3,3,3,3,3,2,2,0,0,3,2,3,3,2,3,3,3,3,0,1,1,2,1,2,2,2,0,3,3,2,3,2,2,3,3,2,2,3,2,3,1,1,4,3,3,2,0,0,3,2,2,3,3,2,2,1,3,2,3,2],\"rators\":[\"EKrSBrTXuhE3f4xsR\",\"tAF9Gf6PiGogbZuWs\",\"pHpGCimfadYznq5Wb\",\"2fxapKr8XGdNeaKi2\",\"8PwfYqoDQFThzNtvf\",\"gb9rvGus2Jv7bjZSs\",\"C4QntmkYtB89GNtpd\",\"u5u2YpHXiNgzDNJdX\",\"K96FwtfDDN5WM4Bb7\",\"YQxo25GTwFZ8GaN6u\",\"8rqK2mskjog6v33Fk\",\"xAgd4WTwd9HYmJceT\",\"eJyp6W4fb7EPZJyBW\",\"w9ccpyskdwvqCanmJ\",\"yKttxy9JGn5Jzwuj6\",\"s5M5RvgqR9BhB9JoC\",\"XKi8iZXBCHCaebSHh\",\"FgkYtHLxeD8pETJ8T\",\"Hjtz8gpNpsqMGsrxL\",\"6ShafRStcvew4GfCh\",\"tK9oBgXjqPsPrGowj\",\"kxYTcCkZJ5buinLTr\",\"4Sntowj2cbMFRDMJa\",\"8JyqsSbN2FJXPr3cw\",\"Jqk2uJZZxEv5wZFze\",\"wwMcJQRvf3X59Jyev\",\"4CFzv558qbGcpQwc4\",\"gMJhLdyw3tH7L96X2\",\"tFJbHuodF8d4sMczz\",\"JAeHobSunmZM7wBtj\",\"7hzSvcYdq6QjoRnJY\",\"WZDjLcmA77sDjKGhf\",\"KcpfY4XZ7fNamyLd3\",\"gcWz82uo9koftwf85\",\"w6YLFuizZ4QGqNeMX\",\"Q33WbXR2bawzMYqWF\",\"kBmhcwkCqxiy4GwiZ\",\"HQxp7NcdvF92G7bYS\",\"M44nifmWzt3wtYyJx\",\"ab7BsQuhDo3QgE6bh\",\"qPmCHcsRuPHAmdprw\",\"6af6qZowN4xMZscDz\",\"HfKkqCKSb4j3QwMFQ\",\"AasGs8AeX9Lcb9xJn\",\"yZvzB3qFb8pkHy4dg\",\"WLFPvm65aHfgwQy7N\",\"w3A7cBWyAfukk6xEQ\",\"8DH2opL3T5kdcoiRJ\",\"YACDEqzcuKv3pZotp\",\"cR3ibTMxLyEdDFCHY\",\"aEm3Wvj2rFYRL8Lrb\",\"PytNZK9mNiRiZxPrm\",\"ZNnsMeNkdDhHjSrZb\",\"vTfyrr4pGddp8rbXc\",\"44dAzThMuyGZ5StXB\",\"bDH2XR5bc4GxcwtBP\",\"YRstQuthRkFeBiXug\",\"kYWb8BwpKwunQkxeX\",\"wT5gGgvjKc5wz59AQ\",\"MKJhn7goNzuGtB5y9\",\"6BZMSxML2SjRgRCZn\",\"EZvdd5y9P3Bumz6Ns\",\"n2BRY9X8899dcG8Bw\",\"rgvAJFwfCeYoYnFTK\",\"gJYuGdkXEWWmGRLzu\",\"v9KtC8YLbMWmXiW2H\",\"JS3hNM3XXkxPdg3yk\",\"HF28xZKSLM9wEuqNg\",\"Ecg4m7srYGgZsb4Ck\",\"DEDniTrstQYGounXT\",\"Z4M3NAa4TXquMNkHe\",\"PweZwtXTDkEwxZXQ4\",\"kQZk8GwxAW9HnaDgg\",\"iojEnnY9FsMfYzp6f\",\"s9GzySPz9vpMNQ2vj\",\"EM54GFtAyAEdmqxNe\",\"dEuJGZbBQkveCXEFk\",\"yjtdwc2AC4jA2RWtn\",\"Pe8vWpDHRuH9nSGKW\",\"qPSEBYMMi9WJRr8SA\",\"3drq3rdyQSgCgGevx\",\"Wv2vJnEj8ywNmARoF\",\"C8Gd66wwGagHmj2t8\",\"gMjAMD8XPK9sbx7eT\",\"BrTDhPJcACL2bsrpJ\",\"wniy5aKNkwYTNAkrz\",\"iS5BrkGLzJyPK7nKt\",\"w2HhxvSLmDhaGCAjE\",\"qD2LrwaDrSdiybLKY\",\"QRv96jmNaYsWkxQEG\",\"w3o9qJuPR62HHh9mx\",\"DPi9QGLctq2y76KuE\",\"CLypXaZksY99mpRCm\",\"eADnqywZR6P7fbJar\",\"xn7uGNKeAwPEkP9oA\",\"zZDaXBxMzTCBhNkgL\",\"dkcmCKwqApX5jBggc\",\"J3upzLHuEwXH7Z2hx\",\"KJCDwGkoXh8qtbbKr\",\"3pxHTZBsv7MKzFG6Y\",\"Yp7uvStL97cC9fKkY\",\"hvCCRgzL6sDBEGuut\",\"cZccqzRQ9GgjQF6Az\",\"LfDeQBAH37L7wgT4Z\",\"8kvQLk3zr6W74rG5t\",\"gXTAie79kiw28tx5u\",\"faSkthCez3xqBCi35\",\"qZQxPQ2kaNKAMesHT\",\"d8qtzoLB264iP8tdY\",\"v2d8o47YdYEuEzzGo\",\"XNmN6ztj36a7eChbD\",\"qAby4AWXmTNeusvg3\",\"oBcs8GLX2ZFLXQy8y\",\"cAP3n5NY64uoMwzRR\",\"PXAcsKkssS2yLyDv2\",\"bvmTE46bfcM4ogj34\",\"K7r5ykaJubqkRK4re\",\"EfxwqhYdapX3dMQC2\",\"hnyhBFWwNCz9mDfSi\",\"GGdmhAvxXhqhhibJN\",\"eHcgvkTGsH7ZziqBo\",\"2u9wghjCydey6aWys\",\"7BYyh2wgo8vPtg42s\",\"PC3pLs36zNzpRDSuE\",\"2NDSt8HyP33cFRHsu\",\"T6iBEE2jp7f7iEF2P\",\"gKnWjDjwrJh7MK2df\",\"AFfw7cGg83uYk2Miy\",\"suArq5BbSy7gD6xri\",\"yod5YhKtPqw2GfG9B\",\"CoutYG4M83EHyYuqt\",\"2PufnQcsHsfymufX3\",\"CJxPyhJirydwiaj7x\",\"fZaGAGEPmzDhJtPy3\",\"8sNv5PTHa7XQ8bNqR\",\"dSd7wHgXGQeG5BQ2P\",\"4Lwjr34ypKNQNQCar\",\"DQskEvAv5KiJDPtGF\",\"wrL4iX2CCSqDCCty3\"],\"total\":147,\"quality\":[5,5,5,5,5,2,3,5,5,5,5,4,5,4,5,5,5,5,4,5,5]},\"flags\":0},\"summary\":\"Given is a dict with the Morse alphabet, added a code for space between words. Write a function, which takes a string, either out of letters or out of Morse code from the dictionary. The function outputs an encrypted letter string of a decrypted Mmorse code.\\n\\nExamples\\nmorse(\\\"F Mueller\\\") ➞ \\\"..-. ..... -- ..- . .-.. .-.. . .-.\\\"\\n\\nmorse(\\\".-.. --- .... -. ..... ..-\",\"tags\":[\"data_structures\",\"cryptography\"],\"timestamp\":{\"$date\":1576605417065},\"title\":\"Morse Alphabet\",\"quality\":4.619047619047619,\"family\":[{\"_id\":\"heamNm6MXBn4w6exw\",\"language\":\"javascript\"},{\"_id\":\"tbEwDviZBadDSeGSz\",\"language\":\"python3\"},{\"_id\":\"hf5cgJMxmceEZGMsD\",\"language\":\"ruby\"}]}}"]