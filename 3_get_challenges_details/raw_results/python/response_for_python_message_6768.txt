a["{\"msg\":\"result\",\"id\":\"2092\",\"result\":{\"_id\":\"amYH2SMto4yZw9E6n\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"def validate(s):\\n\\t\",\"difficulty\":2.9285714285714284,\"familyId\":\"eiYwT38Ya7tMvCAcb\",\"instructions\":\"Write a function that returns `True` if the phone number is in a valid format. Valid formats are as follows:\\n\\n**With Country Code** | **Without Country Code**\\n--- | ---\\n+1-892-445-7663 | 892-445-7663\\n1-892-445-7663 | (892) 445-7663\\n1 (892) 445-7663 | 892.567.8901\\n1.892.567.8901 | 1/892/567/8901\\n1 892 567 8901 | 892/567/8901\\n18925678901 | 892 567 8901\\n\\n### Examples\\n```\\nvalidate(\\\"578-332-1114\\\") ➞ True\\n\\nvalidate(\\\"57-332-1114\\\") ➞ False\\n\\nvalidate(\\\"577 332  1114\\\") ➞ False\\n# More than one space in between digits clusters.\\n\\nvalidate(\\\"57 332 1114\\\") ➞ False\\n# Unacceptable digit cluster length.\\n\\nvalidate(\\\"157%332-1114\\\") ➞ False\\n# Unacceptable delimiter.\\n```\\n\\n### Notes\\n- The country code will always be `+1` or `1`.\\n- Each phone number will contain either 10 or 11 digits (depending on whether the country code exists).\\n- There must either be exactly one space, a delimiter, or no space at all between the digit clusters.\\n- You do not have to worry about extensions.\",\"lab\":\"Test.assert_equals(validate(\\\"+1-892-445-7663\\\"), True)\\nTest.assert_equals(validate(\\\"1-892-445-7663\\\"), True)\\nTest.assert_equals(validate(\\\"1 (892) 445-7663\\\"), True)\\nTest.assert_equals(validate(\\\"1.892.567.8901\\\"), True)\\nTest.assert_equals(validate(\\\"1/892/567/8901\\\"), True)\\nTest.assert_equals(validate(\\\"1 892 567 8901\\\"), True)\\nTest.assert_equals(validate(\\\"18925678901\\\"), True)\\nTest.assert_equals(validate(\\\"892-445-7663\\\"), True)\\nTest.assert_equals(validate(\\\"(892) 445-7663\\\"), True)\\nTest.assert_equals(validate(\\\"892.567.8901\\\"), True)\\nTest.assert_equals(validate(\\\"892/567/8901\\\"), True)\\nTest.assert_equals(validate(\\\"892 567 8901\\\"), True)\\nTest.assert_equals(validate(\\\"8925678901\\\"), True)\\nTest.assert_equals(validate(\\\"89-445-7663\\\"), False, \\\"Invalid digit clusters.\\\")\\nTest.assert_equals(validate(\\\"(892) 4454-7663\\\"), False, \\\"Invalid digit clusters.\\\")\\nTest.assert_equals(validate(\\\"892  567 8901\\\"), False, \\\"Additional space.\\\")\\nTest.assert_equals(validate(\\\"892?567?8901\\\"), False, \\\"Invalid delimiter.\\\")\\nTest.assert_equals(validate(\\\"!1-892-567-8901\\\"), False, \\\"Invalid international code.\\\")\\nTest.assert_equals(validate(\\\"(8924) 445-7663\\\"), False, \\\"Invalid digit clusters.\\\")\\nTest.assert_equals(validate(\\\"12 892 445-7663\\\"), False, \\\"Invalid international code.\\\")\\nTest.assert_equals(validate(\\\"1&892&445-7663\\\"), False, \\\"Invalid delimiter.\\\")\\nTest.assert_equals(validate(\\\"894-445-766\\\"), False, \\\"Invalid digit clusters.\\\")\\nTest.assert_equals(validate(\\\"894 445 766\\\"), False, \\\"Invalid digit clusters.\\\")\",\"language\":\"python3\",\"summary\":\"Write a function that returns True if the phone number is in a valid format. Valid formats are as follows:\\n\\nWith Country Code | Without Country Code\\n--- | ---\\n+1-892-445-7663 | 892-445-7663\\n1-892-445-7663 | (892) 445-7663\\n1 (892) 445-7663 | 892.567.8901\\n1.892.567.8901 | 1/892/567/8901\\n1 892 567 8901 | 892/567/8901\\n18925678901 | 892 567 8901\\n\\nExamples\\nvalidate(\",\"tags\":[\"regex\",\"strings\",\"validation\"],\"timestamp\":{\"$date\":1555698493649},\"title\":\"Validate Phone Numbers\",\"stats\":{\"completed\":{\"total\":55,\"ratings\":[2,2,2,2,2,2,2,2,2,2,2,3,3,3,2,3,4,2,0,4,3,3,3,2,3,4,3,4,4,3,4,3,4,3,4,5,3,3,3,3,5,4,4,4,1,2,4,3,3,4,5,2,1,3,2,4],\"rators\":[\"mNMQvcxKSSvqqMYCH\",\"tAF9Gf6PiGogbZuWs\",\"8JyqsSbN2FJXPr3cw\",\"M8jrv2FfpMQp9Qzpx\",\"yZvzB3qFb8pkHy4dg\",\"T3ZAuoMrJjvZwN55B\",\"iqmPb9JuJDgTFeR8Q\",\"gb9rvGus2Jv7bjZSs\",\"jHrtWDGBhkbuWa7fG\",\"gMJhLdyw3tH7L96X2\",\"AYaEkTWLMmfzpwejr\",\"HqmxnQJM66Y57twhn\",\"2fxapKr8XGdNeaKi2\",\"Jqk2uJZZxEv5wZFze\",\"5J4tAkdA45c76xAfk\",\"C4QntmkYtB89GNtpd\",\"SiXF5H5GyFkR9SHhw\",\"3LiSLdtN58n46NEqg\",\"qcJrxNa4YdfHWEtPx\",\"XsYhWtDMoky3nAhjd\",\"Kn9yjT4NvcnnvjCrL\",\"8PwfYqoDQFThzNtvf\",\"2HMFHov8LPxFRTKig\",\"JKb5rhL6DKcCAypF9\",\"aEm3Wvj2rFYRL8Lrb\",\"aCNWav8S8Try9RkC6\",\"J5T8gZqiZXFuFDTQ7\",\"Z4Wd4iFu5mdjSJDSA\",\"pmgFEciNrd3ES9tuu\",\"Nua6T3dBurBy3Qfg9\",\"AasGs8AeX9Lcb9xJn\",\"s5M5RvgqR9BhB9JoC\",\"wT5gGgvjKc5wz59AQ\",\"PytNZK9mNiRiZxPrm\",\"h2DNszP9a5tFj2YeC\",\"R4SjTgDnpigJYDLyL\",\"4fhjJBvLBWh6QeSih\",\"xn7uGNKeAwPEkP9oA\",\"Ecg4m7srYGgZsb4Ck\",\"KZ2xddpM2f9JRaryB\",\"HF28xZKSLM9wEuqNg\",\"Y6w9WxXzRweSiy3Ls\",\"6xTu4r8NMczBFvmtz\",\"iS5BrkGLzJyPK7nKt\",\"8sNv5PTHa7XQ8bNqR\",\"buX4mCQhtXCfBjeno\",\"J3upzLHuEwXH7Z2hx\",\"DPi9QGLctq2y76KuE\",\"eHcgvkTGsH7ZziqBo\",\"gJYuGdkXEWWmGRLzu\",\"yjtdwc2AC4jA2RWtn\",\"2PufnQcsHsfymufX3\",\"gXTAie79kiw28tx5u\",\"aFYzioHvZPvPaunsg\"],\"quality\":[5,5,5,5,5,5,4]},\"tests\":{\"score\":0,\"rators\":[\"mNMQvcxKSSvqqMYCH\"]},\"instructions\":{\"score\":0,\"rators\":[\"mNMQvcxKSSvqqMYCH\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.857142857142857,\"family\":[{\"_id\":\"6v7NRKsdPCCGFnQkG\",\"language\":\"cpp\"},{\"_id\":\"kJu2Hvsr4L2BRZqHW\",\"language\":\"java\"},{\"_id\":\"LQvRrzwHzc2BAXBQx\",\"language\":\"javascript\"},{\"_id\":\"amYH2SMto4yZw9E6n\",\"language\":\"python3\"},{\"_id\":\"9gF4g6zkrMuM3hyTJ\",\"language\":\"ruby\"}]}}"]