a["{\"msg\":\"result\",\"id\":\"1439\",\"result\":{\"_id\":\"XALogvSrMr3LRwXPH\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def is_shuffled_well(lst):\\n\\t\",\"difficulty\":2.0516129032258066,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"JrKgqjPKhqG3qMMNj\",\"instructions\":\"Given a list of *10 numbers*, return whether or not the list is shuffled sufficiently enough. In this case, if **3 or more** numbers appear **consecutively** (ascending or descending), return `False`.\\n\\n### Examples\\n```\\nis_shuffled_well([1, 2, 3, 5, 8, 6, 9, 10, 7, 4]) ➞ False\\n# 1, 2, 3 appear consecutively\\n\\nis_shuffled_well([3, 5, 1, 9, 8, 7, 6, 4, 2, 10]) ➞ False\\n# 9, 8, 7, 6 appear consecutively\\n\\nis_shuffled_well([1, 5, 3, 8, 10, 2, 7, 6, 4, 9]) ➞ True\\n# No consecutive numbers appear\\n\\nis_shuffled_well([1, 3, 5, 7, 9, 2, 4, 6, 8, 10]) ➞ True\\n# No consecutive numbers appear\\n```\\n\\n### Notes\\n- Only steps of 1 in either direction count as consecutive (i.e. a sequence of odd and even numbers would count as being properly shuffled (see example #4)).\\n- You will get numbers from 1-10.\",\"isHidden\":false,\"lab\":\"Test.assert_equals(is_shuffled_well([1, 2, 3, 5, 8, 6, 9, 10, 7, 4]), False, \\\"1, 2, 3 appear consecutively.\\\")\\nTest.assert_equals(is_shuffled_well([3, 5, 1, 9, 8, 7, 6, 4, 2, 10]), False, \\\"9, 8, 7, 6 appear consecutively.\\\")\\nTest.assert_equals(is_shuffled_well([1, 5, 3, 8, 10, 2, 7, 6, 4, 9]), True, \\\"No consecutive numbers appear.\\\")\\nTest.assert_equals(is_shuffled_well([1, 3, 5, 7, 9, 2, 4, 6, 8, 10]), True, \\\"No consecutive numbers appear.\\\")\\nTest.assert_equals(is_shuffled_well([5, 6, 7, 9, 1, 10, 3, 8, 2, 4]), False)\\nTest.assert_equals(is_shuffled_well([3, 9, 7, 5, 2, 4, 10, 1, 8, 6]), True)\\nTest.assert_equals(is_shuffled_well([6, 4, 2, 1, 3, 7, 8, 10, 5, 9]), True)\\nTest.assert_equals(is_shuffled_well([2, 6, 10, 9, 8, 1, 4, 7, 3, 5]), False)\\nTest.assert_equals(is_shuffled_well([6, 10, 5, 8, 4, 2, 7, 9, 3, 1]), True)\\nTest.assert_equals(is_shuffled_well([3, 10, 5, 2, 6, 9, 8, 4, 1, 7]), True)\\nTest.assert_equals(is_shuffled_well([10, 7, 9, 5, 4, 6, 3, 8, 2, 1]), True)\\nTest.assert_equals(is_shuffled_well([3, 5, 9, 6, 10, 1, 4, 8, 7, 2]), True)\\nTest.assert_equals(is_shuffled_well([10, 7, 8, 4, 3, 9, 5, 1, 2, 6]), True)\\nTest.assert_equals(is_shuffled_well([2, 4, 8, 7, 3, 9, 1, 10, 6, 5]), True)\\nTest.assert_equals(is_shuffled_well([9, 6, 1, 3, 10, 8, 5, 4, 7, 2]), True)\\nTest.assert_equals(is_shuffled_well([2, 3, 9, 7, 10, 8, 4, 6, 1, 5]), True)\\nTest.assert_equals(is_shuffled_well([3, 8, 5, 6, 2, 7, 4, 1, 10, 9]), True)\\nTest.assert_equals(is_shuffled_well([1, 6, 4, 10, 3, 5, 7, 2, 9, 8]), True)\\nTest.assert_equals(is_shuffled_well([1, 10, 8, 9, 2, 3, 4, 7, 5, 6]), False)\\nTest.assert_equals(is_shuffled_well([5, 4, 3, 10, 9, 2, 7, 6, 8, 1]), False)\\nTest.assert_equals(is_shuffled_well([4, 7, 8, 3, 5, 9, 2, 6, 1, 10]), True)\\nTest.assert_equals(is_shuffled_well([5, 8, 6, 7, 3, 2, 4, 9, 10, 1]), True)\\nTest.assert_equals(is_shuffled_well([3, 7, 1, 4, 8, 6, 5, 9, 10, 2]), True)\\nTest.assert_equals(is_shuffled_well([10, 1, 9, 4, 3, 2, 7, 8, 6, 5]), False)\\nTest.assert_equals(is_shuffled_well([3, 2, 6, 4, 1, 5, 8, 10, 9, 7]), True)\\nTest.assert_equals(is_shuffled_well([1, 7, 8, 5, 9, 10, 4, 6, 2, 3]), True)\\nTest.assert_equals(is_shuffled_well([2, 3, 9, 7, 5, 6, 8, 1, 10, 4]), True)\\nTest.assert_equals(is_shuffled_well([1, 9, 3, 4, 6, 2, 10, 8, 7, 5]), True)\\nTest.assert_equals(is_shuffled_well([1, 7, 8, 5, 10, 9, 6, 4, 2, 3]), True)\\nTest.assert_equals(is_shuffled_well([2, 9, 10, 3, 5, 7, 6, 4, 8, 1]), True)\\nTest.assert_equals(is_shuffled_well([6, 3, 10, 8, 5, 2, 1, 9, 7, 4]), True)\\nTest.assert_equals(is_shuffled_well([6, 8, 7, 3, 4, 9, 5, 10, 1, 2]), True)\\nTest.assert_equals(is_shuffled_well([8, 4, 9, 5, 6, 3, 1, 10, 7, 2]), True)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,2,1,2,2,3,3,1,2,1,2,2,2,3,2,2,2,2,2,2,5,1,3,3,2,3,1,2,3,3,1,1,3,2,2,3,3,0,1,2,3,3,2,2,1,3,0,3,0,0,0,3,3,3,3,1,0,2,1,1,3,3,3,3,1,3,3,3,1,2,0,3,0,3,3,2,3,2,1,2,0,3,1,3,3,2,0,2,1,3,3,1,2,4,0,2,3,2,1,3,3,3,2,3,2,2,3,2,2,3,3,2,2,1,3,2,0,1,3,2,1,3,2,3,2,2,3,3,0,0,2,2,2,1,3,2,1,4,3,3,3,1,2,0,2,2,3,3,3,2],\"rators\":[\"tAF9Gf6PiGogbZuWs\",\"2fxapKr8XGdNeaKi2\",\"s5M5RvgqR9BhB9JoC\",\"zvs28NFXJdRpxNo8C\",\"CuY5BaTCcu7Mp9tDu\",\"dQvyz6v92233cGwkD\",\"T9WcjJPEu3rcTsKbF\",\"Jqk2uJZZxEv5wZFze\",\"gb9rvGus2Jv7bjZSs\",\"8JyqsSbN2FJXPr3cw\",\"vgTvCCxgvbCTDvaRT\",\"2innwjWqxJHo4eRGh\",\"EQbnbkkPYtGxiviTp\",\"iMHrN3Wiefh9Ame38\",\"Qcv3kqBdyGHHbzWY5\",\"QnPD4Sv6W4LHc2Qng\",\"ek7cHB9P7rbmGEKwB\",\"C4QntmkYtB89GNtpd\",\"sJWTa7iWeRoRtqJ8N\",\"kQH5b8MXJunh84Czq\",\"J5T8gZqiZXFuFDTQ7\",\"g8yJiPAWXbrgxbjfZ\",\"AasGs8AeX9Lcb9xJn\",\"Jsrfs8nEy37mJxbqD\",\"yZvzB3qFb8pkHy4dg\",\"8PwfYqoDQFThzNtvf\",\"mDWNyaaQ9hvPCRzSd\",\"w3A7cBWyAfukk6xEQ\",\"M9DhkxE77ztbJWz6e\",\"PytNZK9mNiRiZxPrm\",\"aEm3Wvj2rFYRL8Lrb\",\"ZNnsMeNkdDhHjSrZb\",\"kYWb8BwpKwunQkxeX\",\"YRstQuthRkFeBiXug\",\"55RQznnuTGpsj3EXd\",\"a777e8chPvJkY3tKa\",\"QDrLtnBsA2LJfptvT\",\"bCDTKAoS4biDmQ64Y\",\"KdNDysEsy2TW5QRJ2\",\"Sj4iamMmNvxwWJBiF\",\"DQskEvAv5KiJDPtGF\",\"ekQh3jzgGLsEMbKo3\",\"gJYuGdkXEWWmGRLzu\",\"k5mp7Hkg8w5rwiXpe\",\"HF28xZKSLM9wEuqNg\",\"Yp7uvStL97cC9fKkY\",\"ACEZh39brWjdGkZXb\",\"euPBBaYXyS8RBr9KB\",\"v9KtC8YLbMWmXiW2H\",\"W5TajitmCyxz87zAC\",\"Ecg4m7srYGgZsb4Ck\",\"fsziNDMoc3TX7xuvj\",\"ELfyvLSAPDbhksDBb\",\"hnyhBFWwNCz9mDfSi\",\"DEDniTrstQYGounXT\",\"KRmxvA4mWgfKvHmYN\",\"djeesDJQwNJay4RTe\",\"ZRxAkXjTCdyQTdSDw\",\"8TAYWzqJAkXq2MAba\",\"E8TMSMSamEbBtf9Lo\",\"c3nsyfKKeQGxp6sKb\",\"f2BoqyCpgnmjEjLqx\",\"hab8YixsXxe4CcZpP\",\"p9riYAbHXwJZ9PhWf\",\"4rwxLqLs2mNZNg8NB\",\"yr822PZmmiDDenxpB\",\"knEz9y3xqhP3oY4sf\",\"aCNWav8S8Try9RkC6\",\"bJxaKHJqR82EWw8Su\",\"x4dfavjLEcrvAF3QQ\",\"cykCKNJcqFBxz4T8s\",\"N43d68KgA2qv7Jm2Y\",\"qPpQfR5KyDb5Y3EFf\",\"BrTDhPJcACL2bsrpJ\",\"iojEnnY9FsMfYzp6f\",\"4ZicxybyvEsuA9iET\",\"CwXsu25ygLEwQbmQC\",\"rzX5PujzJGJK7mMCi\",\"JmkgMJyvrvqTMfdqF\",\"zZDaXBxMzTCBhNkgL\",\"dynD89GCHoau9fvh7\",\"iS5BrkGLzJyPK7nKt\",\"cR3ibTMxLyEdDFCHY\",\"n2BRY9X8899dcG8Bw\",\"obxQjjJfiuHJfBEhj\",\"JS3hNM3XXkxPdg3yk\",\"HqmxnQJM66Y57twhn\",\"ji5f27FPz4wRRF6Ls\",\"yjtdwc2AC4jA2RWtn\",\"9pzFiFK3ANLjQfnr2\",\"ZrKCkX7xxGGZzauFW\",\"syRNbbPdLCGXbH2Gy\",\"6428wKHtwKkFdvBs5\",\"ZD2R9TPTuSc8AT9pS\",\"u7i7WPM63n42r8R8o\",\"kyEERyssssTQaZ4y5\",\"P7NmFbCJ5offXMRvB\",\"Jg8ZSRXe3NoDMCqGu\",\"orFLgPDw9H5MDzmwo\",\"pmgFEciNrd3ES9tuu\",\"DCLoZNDf8h6TB7gxn\",\"xwEZk3bNZoNDPJYF5\",\"gSFJPsMXnqAog3Q9f\",\"mG8HqKiAQFTdRZthG\",\"dkcmCKwqApX5jBggc\",\"REbXuiozZdcmS4iiJ\",\"GGprTwrkjuccmrQRg\",\"4fhjJBvLBWh6QeSih\",\"xn7uGNKeAwPEkP9oA\",\"EMJ6uvBZkie429gdg\",\"mNYiFFnf5MdGsBDrt\",\"Wv2vJnEj8ywNmARoF\",\"CEd9tLdXeDeNHSzys\",\"8fZxjQfuXw5HMSRJM\",\"QRv96jmNaYsWkxQEG\",\"DPi9QGLctq2y76KuE\",\"D62kvgDJ6asnsFaEw\",\"nc7bRhkxgKyqusYe3\",\"axdSNLZpiCDF8RS6n\",\"6MjSiiBLPcvXbXcaZ\",\"9FCeFzjPA4jrQ7oHW\",\"J3upzLHuEwXH7Z2hx\",\"gXTAie79kiw28tx5u\",\"oBcs8GLX2ZFLXQy8y\",\"7scpcTEp3SEx5Wjg9\",\"cAP3n5NY64uoMwzRR\",\"StNu7DPyTgEStZsMY\",\"eiuiYojfsaWdEhxdg\",\"kEkNyqFARK9YBrhRx\",\"Nzi4RD5fxAJ4wjnNa\",\"GGdmhAvxXhqhhibJN\",\"4RsakkyRXyYGwFxEa\",\"3LiSLdtN58n46NEqg\",\"JhX7jvtpwNyxcc39m\",\"Jq87qh4HJvE8yKcWt\",\"yyo6YLQN2of6fxp49\",\"FEYpu9RWysAgW3XnP\",\"fznzd3qnvtbFkkizz\",\"YcCLwitFMAEJSnxAW\",\"2PufnQcsHsfymufX3\",\"srJ34BaybkQh3qRkM\",\"eHcgvkTGsH7ZziqBo\",\"8BFSTCnoe2QggN64c\",\"K6MfKMytoJJuSGewP\",\"ctbThYbufFCYbRK4f\",\"PC3pLs36zNzpRDSuE\",\"T6iBEE2jp7f7iEF2P\",\"gKnWjDjwrJh7MK2df\",\"o4ixjQGSaYqA2JoM4\",\"jCjCvyhqhpebkJn34\",\"LQxof8pGabGuWP7Gn\",\"8sNv5PTHa7XQ8bNqR\",\"RoGGD5cpHb4ftdLDv\",\"yod5YhKtPqw2GfG9B\",\"nkH3HfJXLMNcBMM79\",\"AQSqD9oNv2uPfxZCR\",\"buX4mCQhtXCfBjeno\",\"Ds7L5bksw2QRHjrKL\",\"ey3CASd6Je5LEJzfB\",\"5HCu9Ydd86QgHDRNP\",\"3KkyQm77zsew58Dc2\",\"CHvzhtXnv8HTbPQ56\",\"eMuCpJ2spXWkJjWNz\",\"gMDzfLw5nbtyzjs8Q\",\"RErqK2yM94wYyD2hk\",\"jkbavR2ATFJcpmo8M\",\"Qyfyyw6oC4EHAndzo\",\"XGBjbjgN8Zt2j347X\"],\"total\":186,\"quality\":[5,5,5,4,5,4,5,5,2,5,5,4,5,5,5,5,5,5]},\"flags\":0},\"summary\":\"Given a list of 10 numbers, return whether or not the list is shuffled sufficiently enough. In this case, if 3 or more numbers appear consecutively (ascending or descending), return False.\\n\\nExamples\\nisshuffledwell([1, 2, 3, 5, 8, 6, 9, 10, 7, 4]) ➞ False\\n1, 2, 3 appear consecutively\\n\\nisshuffledwell([3, 5, 1, 9, 8, 7, 6, 4, 2, 10]) ➞ False\\n9, 8, 7, 6 appear con\",\"tags\":[\"arrays\",\"validation\",\"numbers\",\"loops\"],\"timestamp\":{\"$date\":1580574407832},\"title\":\"Shuffled Properly?\",\"quality\":4.666666666666667,\"family\":[{\"_id\":\"bPykwNHsoiLcjT7kw\",\"language\":\"cpp\"},{\"_id\":\"jx9hhCFHp92EpjB2J\",\"language\":\"javascript\"},{\"_id\":\"XALogvSrMr3LRwXPH\",\"language\":\"python3\"},{\"_id\":\"thryBoErsvF8yogu2\",\"language\":\"ruby\"}]}}"]