a["{\"msg\":\"result\",\"id\":\"1560\",\"result\":{\"_id\":\"KdcCd2Xi96bMa4F8A\",\"author\":\"Mubashir Hassan \",\"authorId\":\"T6iBEE2jp7f7iEF2P\",\"code\":\"def anna_likes(boy):\\n\\t\",\"difficulty\":2.0217391304347827,\"familyId\":\"bwQNTQm4zsv5yAjCA\",\"instructions\":\"Anna is a strange girl. She likes certain boys, but not others. You have to figure out why she likes some, and not the others.\\n\\n### Examples\\n```\\nanna_likes(\\\"David\\\") ➞ False\\n\\nanna_likes(\\\"Samuel\\\") ➞ True\\n\\nanna_likes(\\\"Gary\\\") ➞ False\\n```\\n\\n### Notes\\n- All names / inputs are valid.\\n- Anna likes her own name.\\n- Check the **Tests** tab for all 100 examples.\\n- Try to solve this one using RegEx.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(anna_likes(\\\"James\\\"), False) ## Test 1\\nTest.assert_equals(anna_likes(\\\"John\\\"), False) ## Test 2 \\nTest.assert_equals(anna_likes(\\\"Robert\\\"), False) ## Test 3 \\nTest.assert_equals(anna_likes(\\\"Michael\\\"), False) ## Test 4 \\nTest.assert_equals(anna_likes(\\\"William\\\"), False) ## Test 5\\nTest.assert_equals(anna_likes(\\\"David\\\"), False) ## Test 6 \\nTest.assert_equals(anna_likes(\\\"Richard\\\"), False) ## Test 7 \\nTest.assert_equals(anna_likes(\\\"Joseph\\\"), False) ## Test 8 \\nTest.assert_equals(anna_likes(\\\"Thomas\\\"), False) ## Test 9 \\nTest.assert_equals(anna_likes(\\\"Charles\\\"), False) ## Test 10 \\nTest.assert_equals(anna_likes(\\\"Christopher\\\"), False) ## Test 11 \\nTest.assert_equals(anna_likes(\\\"Daniel\\\"), True) ## Test 12 \\nTest.assert_equals(anna_likes(\\\"Matthew\\\"), False) ## Test 13 \\nTest.assert_equals(anna_likes(\\\"Anthony\\\"), False) ## Test 14 \\nTest.assert_equals(anna_likes(\\\"Donald\\\"), False) ## Test 15 \\nTest.assert_equals(anna_likes(\\\"Mark\\\"), False) ## Test 16 \\nTest.assert_equals(anna_likes(\\\"Paul\\\"), True) ## Test 17 \\nTest.assert_equals(anna_likes(\\\"Steven\\\"), False) ## Test 18 \\nTest.assert_equals(anna_likes(\\\"Andrew\\\"), False) ## Test 19 \\nTest.assert_equals(anna_likes(\\\"Kenneth\\\"), False) ## Test 20 \\nTest.assert_equals(anna_likes(\\\"Joshua\\\"), True) ## Test 21 \\nTest.assert_equals(anna_likes(\\\"Kevin\\\"), False) ## Test 22 \\nTest.assert_equals(anna_likes(\\\"Brian\\\"), False) ## Test 23 \\nTest.assert_equals(anna_likes(\\\"George\\\"), True) ## Test 24 \\nTest.assert_equals(anna_likes(\\\"Edward\\\"), False) ## Test 25 \\nTest.assert_equals(anna_likes(\\\"Ronald\\\"), False) ## Test 26 \\nTest.assert_equals(anna_likes(\\\"Timothy\\\"), False) ## Test 27 \\nTest.assert_equals(anna_likes(\\\"Jason\\\"), False) ## Test 28 \\nTest.assert_equals(anna_likes(\\\"Jeffrey\\\"), False) ## Test 29 \\nTest.assert_equals(anna_likes(\\\"Ryan\\\"), False) ## Test 30 \\nTest.assert_equals(anna_likes(\\\"Jacob\\\"), False) ## Test 31 \\nTest.assert_equals(anna_likes(\\\"Gary\\\"), False) ## Test 32 \\nTest.assert_equals(anna_likes(\\\"Nicholas\\\"), False) ## Test 33 \\nTest.assert_equals(anna_likes(\\\"Eric\\\"), True) ## Test 34 \\nTest.assert_equals(anna_likes(\\\"Jonathan\\\"), False) ## Test 35 \\nTest.assert_equals(anna_likes(\\\"Stephen\\\"), False) ## Test 36 \\nTest.assert_equals(anna_likes(\\\"Larry\\\"), False) ## Test 37 \\nTest.assert_equals(anna_likes(\\\"Justin\\\"), False) ## Test 38 \\nTest.assert_equals(anna_likes(\\\"Scott\\\"), False) ## Test 39 \\nTest.assert_equals(anna_likes(\\\"Brandon\\\"), False) ## Test 40 \\nTest.assert_equals(anna_likes(\\\"Benjamin\\\"), False) ## Test 41 \\nTest.assert_equals(anna_likes(\\\"Samuel\\\"), True) ## Test 42 \\nTest.assert_equals(anna_likes(\\\"Frank\\\"), False) ## Test 43 \\nTest.assert_equals(anna_likes(\\\"Gregory\\\"), False) ## Test 44 \\nTest.assert_equals(anna_likes(\\\"Raymond\\\"), False) ## Test 45 \\nTest.assert_equals(anna_likes(\\\"Alexander\\\"), False) ## Test 46 \\nTest.assert_equals(anna_likes(\\\"Patrick\\\"), False) ## Test 47 \\nTest.assert_equals(anna_likes(\\\"Jack\\\"), False) ## Test 48 \\nTest.assert_equals(anna_likes(\\\"Dennis\\\"), False) ## Test 49 \\nTest.assert_equals(anna_likes(\\\"Jerry\\\"), False) ## Test 50 \\nTest.assert_equals(anna_likes(\\\"Tyler\\\"), False) ## Test 51 \\nTest.assert_equals(anna_likes(\\\"Aaron\\\"), False) ## Test 52 \\nTest.assert_equals(anna_likes(\\\"Jose\\\"), True) ## Test 53 \\nTest.assert_equals(anna_likes(\\\"Henry\\\"), False) ## Test 54 \\nTest.assert_equals(anna_likes(\\\"Adam\\\"), True) ## Test 55 \\nTest.assert_equals(anna_likes(\\\"Douglas\\\"), False) ## Test 56 \\nTest.assert_equals(anna_likes(\\\"Nathan\\\"), False) ## Test 57 \\nTest.assert_equals(anna_likes(\\\"Peter\\\"), False) ## Test 58 \\nTest.assert_equals(anna_likes(\\\"Zachary\\\"), False) ## Test 59 \\nTest.assert_equals(anna_likes(\\\"Kyle\\\"), False) ## Test 60 \\nTest.assert_equals(anna_likes(\\\"Walter\\\"), False) ## Test 61 \\nTest.assert_equals(anna_likes(\\\"Harold\\\"), False) ## Test 62 \\nTest.assert_equals(anna_likes(\\\"Jeremy\\\"), False) ## Test 63 \\nTest.assert_equals(anna_likes(\\\"Ethan\\\"), False) ## Test 64 \\nTest.assert_equals(anna_likes(\\\"Carl\\\"), False) ## Test 65 \\nTest.assert_equals(anna_likes(\\\"Keith\\\"), False) ## Test 66 \\nTest.assert_equals(anna_likes(\\\"Roger\\\"), False) ## Test 67 \\nTest.assert_equals(anna_likes(\\\"Gerald\\\"), False) ## Test 68 \\nTest.assert_equals(anna_likes(\\\"Christian\\\"), False) ## Test 69 \\nTest.assert_equals(anna_likes(\\\"Terry\\\"), False) ## Test 70 \\nTest.assert_equals(anna_likes(\\\"Sean\\\"), True) ## Test 71 \\nTest.assert_equals(anna_likes(\\\"Arthur\\\"), False) ## Test 72 \\nTest.assert_equals(anna_likes(\\\"Austin\\\"), True) ## Test 73 \\nTest.assert_equals(anna_likes(\\\"Noah\\\"), True) ## Test 74 \\nTest.assert_equals(anna_likes(\\\"Lawrence\\\"), False) ## Test 75 \\nTest.assert_equals(anna_likes(\\\"Jesse\\\"), False) ## Test 76 \\nTest.assert_equals(anna_likes(\\\"Joe\\\"), False) ## Test 77 \\nTest.assert_equals(anna_likes(\\\"Bryan\\\"), False) ## Test 78 \\nTest.assert_equals(anna_likes(\\\"Billy\\\"), False) ## Test 79 \\nTest.assert_equals(anna_likes(\\\"Jordan\\\"), False) ## Test 80 \\nTest.assert_equals(anna_likes(\\\"Albert\\\"), False) ## Test 81 \\nTest.assert_equals(anna_likes(\\\"Dylan\\\"), False) ## Test 82 \\nTest.assert_equals(anna_likes(\\\"Bruce\\\"), False) ## Test 83 \\nTest.assert_equals(anna_likes(\\\"Willie\\\"), True) ## Test 84 \\nTest.assert_equals(anna_likes(\\\"Gabriel\\\"), False) ## Test 85 \\nTest.assert_equals(anna_likes(\\\"Alan\\\"), True) ## Test 86 \\nTest.assert_equals(anna_likes(\\\"Juan\\\"), True) ## Test 87 \\nTest.assert_equals(anna_likes(\\\"Logan\\\"), False) ## Test 88 \\nTest.assert_equals(anna_likes(\\\"Wayne\\\"), False) ## Test 89 \\nTest.assert_equals(anna_likes(\\\"Ralph\\\"), False) ## Test 90 \\nTest.assert_equals(anna_likes(\\\"Roy\\\"), False) ## Test 91 \\nTest.assert_equals(anna_likes(\\\"Eugene\\\"), False) ## Test 92 \\nTest.assert_equals(anna_likes(\\\"Randy\\\"), False) ## Test 93 \\nTest.assert_equals(anna_likes(\\\"Vincent\\\"), False) ## Test 94 \\nTest.assert_equals(anna_likes(\\\"Russell\\\"), False) ## Test 95 \\nTest.assert_equals(anna_likes(\\\"Louis\\\"), False) ## Test 96 \\nTest.assert_equals(anna_likes(\\\"Philip\\\"), False) ## Test 97 \\nTest.assert_equals(anna_likes(\\\"Bobby\\\"), False) ## Test 98 \\nTest.assert_equals(anna_likes(\\\"Johnny\\\"), False) ## Test 99 \\nTest.assert_equals(anna_likes(\\\"Bradley\\\"), False) ## Test 100\",\"language\":\"python3\",\"quality\":5,\"summary\":\"Anna is a strange girl. She likes certain boys, but not others. You have to figure out why she likes some, and not the others.\\n\\nExamples\\nanna_likes(\\\"David\\\") ➞ False\\n\\nanna_likes(\\\"Samuel\\\") ➞ True\\n\\nanna_likes(\\\"Gary\\\") ➞ False\\n\\nNotes\\nAll names / inputs are valid.\\nAnna likes her own name.\\nCheck the Tests tab for all 100 examples.\\nTry to solve this one using RegEx.\",\"tags\":[\"regex\",\"strings\",\"validation\"],\"timestamp\":{\"$date\":1605185763684},\"title\":\"Anna Likes Daniel\",\"stats\":{\"completed\":{\"total\":45,\"ratings\":[2,2,2,2,2,3,3,2,2,2,0,2,1,2,0,2,2,3,1,2,2,2,5,3,1,5,1,4,3,2,1,3,0,3,2,0,3,3,2,3,2,1,0,3,0,2],\"quality\":[5,5],\"rators\":[\"8PwfYqoDQFThzNtvf\",\"Yp7uvStL97cC9fKkY\",\"aEm3Wvj2rFYRL8Lrb\",\"J3upzLHuEwXH7Z2hx\",\"DPi9QGLctq2y76KuE\",\"6HhTu4TXizR9ZBBH9\",\"6MjSiiBLPcvXbXcaZ\",\"cAP3n5NY64uoMwzRR\",\"fSQSHjW3e72MrWxbD\",\"QRv96jmNaYsWkxQEG\",\"om8W6mohJ9zMJ2iKq\",\"uRQcdCitEpiQKsd6y\",\"xumt4h8jvh7o4xkhr\",\"6JMWyFfGM8R4kG8sw\",\"6xTu4r8NMczBFvmtz\",\"2QziknsznNeMPRh3g\",\"agb6ou9deennRxzhv\",\"no46qNkTbNeHepe64\",\"oBcs8GLX2ZFLXQy8y\",\"Jqk2uJZZxEv5wZFze\",\"n2BRY9X8899dcG8Bw\",\"yjtdwc2AC4jA2RWtn\",\"tmFrnHWoFLv5S7rrL\",\"xn7uGNKeAwPEkP9oA\",\"iojEnnY9FsMfYzp6f\",\"gb9rvGus2Jv7bjZSs\",\"GGdmhAvxXhqhhibJN\",\"AasGs8AeX9Lcb9xJn\",\"JKb5rhL6DKcCAypF9\",\"H9KZi2cjt4FwH7qog\",\"8BFSTCnoe2QggN64c\",\"MpfytGFYF77emJ3cT\",\"gKnWjDjwrJh7MK2df\",\"2PufnQcsHsfymufX3\",\"tAF9Gf6PiGogbZuWs\",\"yod5YhKtPqw2GfG9B\",\"buX4mCQhtXCfBjeno\",\"8sNv5PTHa7XQ8bNqR\",\"eHcgvkTGsH7ZziqBo\",\"CHvzhtXnv8HTbPQ56\",\"9pzFiFK3ANLjQfnr2\",\"5HCu9Ydd86QgHDRNP\",\"BrTDhPJcACL2bsrpJ\"]},\"flags\":2},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"o4rSFcA4dbFEDaugS\",\"language\":\"cpp\"},{\"_id\":\"9kTgWLWEgpqRKakoy\",\"language\":\"javascript\"},{\"_id\":\"KdcCd2Xi96bMa4F8A\",\"language\":\"python3\"},{\"_id\":\"kA8GcirXrvRt7PvCy\",\"language\":\"ruby\"}]}}"]