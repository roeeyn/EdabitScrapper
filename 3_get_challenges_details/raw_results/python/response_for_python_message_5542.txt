a["{\"msg\":\"result\",\"id\":\"1484\",\"result\":{\"_id\":\"NbZ2cMeEfH3KpQRku\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"def portion_happy(numbers):\\n\\t\",\"difficulty\":2.0655737704918034,\"familyId\":\"8wPwKYbm4L74MvRCB\",\"instructions\":\"You are given a list of `0`s and `1`s, like the one below:\\n\\n```\\n[0, 1, 0, 0, 0, 1, 1, 1, 0, 1]\\n\\n# The first element, a 0, and the last element, a 1 are both unhappy.\\n# The second element, a 1 is unhappy.\\n# The second-to-last element, a 0 is unhappy.\\n# All other numbers in this list are happy.\\n```\\n\\nA `1` is **unhappy** if the digit to its left and the digit to its right are both 0s.\\nA `0` is **unhappy** if the digit to its left and the digit to its right are both 1s. \\nIf a number has only one neighbor, it is **unhappy** if its only neighbor is different. \\nOtherwise, a number is **happy**.\\n\\nWrite a function that takes in a list of `0`s and `1`s and outputs the **portion of numbers which are happy**. The total portion of numbers which are happy can be represented as:\\n\\n```\\nportion of happy numbers = (happy 0s + happy 1s) / total numbers\\n```\\n\\nIn the example above, `0.6` is the number of happy numbers.\\n\\n### Examples\\n```\\nportion_happy([0, 1, 0, 1, 0]) ➞ 0\\n\\nportion_happy([0, 1, 1, 0]) ➞ 0.5\\n\\nportion_happy([0, 0, 0, 1, 1]) ➞ 1\\n\\nportion_happy([1, 0, 0, 1, 1]) ➞ 0.8\\n```\\n\\n### Notes\\n- Remember: a `0` border number is unhappy if its only neighbor is a `1` and vice versa.\\n- A list will contain at least two elements.\",\"lab\":\"Test.assert_equals(portion_happy([0, 1, 0, 1, 0]), 0)\\nTest.assert_equals(portion_happy([0, 1, 1, 0]), 0.5)\\nTest.assert_equals(portion_happy([0, 0, 0, 1, 1]), 1)\\nTest.assert_equals(portion_happy([1, 0, 0, 1, 1]), 0.8)\\nTest.assert_equals(portion_happy([1, 1, 1, 1, 1]), 1)\\nTest.assert_equals(portion_happy([1, 1, 0, 0, 1, 1]), 1)\\nTest.assert_equals(portion_happy([1, 1, 0, 0, 0, 1, 1]), 1)\\nTest.assert_equals(portion_happy([1, 0, 0, 0, 1]), 0.6)\\nTest.assert_equals(portion_happy([1, 0, 1, 0, 0, 0]), 0.5)\\nTest.assert_equals(portion_happy([1, 1]), 1)\\nTest.assert_equals(portion_happy([1, 0]), 0)\",\"language\":\"python3\",\"summary\":\"You are given a list of 0s and 1s, like the one below:\\n\\n[0, 1, 0, 0, 0, 1, 1, 1, 0, 1]\\n\\nThe first element, a 0, and the last element, a 1 are both unhappy.\\nThe second element, a 1 is unhappy.\\nThe second-to-last element, a 0 is unhappy.\\nAll other numbers in this list are happy.\\n\\nA 1 is unhappy if the digit to its left and the digit to its right are both 0s.\\nA 0\",\"tags\":[\"arrays\",\"loops\",\"numbers\"],\"timestamp\":{\"$date\":1552948107523},\"title\":\"Happy Numbers\",\"stats\":{\"completed\":{\"total\":132,\"ratings\":[2,2,2,2,2,2,2,2,2,2,1,2,2,2,1,2,3,3,3,2,2,2,2,3,3,2,2,2,2,2,3,2,1,2,3,1,1,3,0,3,2,3,2,2,2,3,3,2,2,2,2,2,0,3,2,3,2,3,2,2,2,3,1,2,1,2,2,0,3,3,0,0,3,2,2,1,3,2,3,0,1,2,2,2,2,2,3,1,3,1,2,0,3,3,3,3,3,1,3,3,3,5,3,3,2,2,3,3,1,0,3,0,2,2,1,3,3,0,0,3,3,3],\"rators\":[\"BkPgkDQGHm66X4Qai\",\"Jqk2uJZZxEv5wZFze\",\"35LM2gn6MyXPgYFbA\",\"M8jrv2FfpMQp9Qzpx\",\"yZvzB3qFb8pkHy4dg\",\"qvEvDcL32a5F4Tg6c\",\"8JyqsSbN2FJXPr3cw\",\"SKabuq5XuhXBugKBa\",\"gb9rvGus2Jv7bjZSs\",\"tAF9Gf6PiGogbZuWs\",\"T3ZAuoMrJjvZwN55B\",\"ab7BsQuhDo3QgE6bh\",\"wcjknenWdPRhrRScv\",\"4fQSjCThZyxYGfyHf\",\"9Gf6g4fuKc3uou9w2\",\"QaE2QnnBbzdiExxPH\",\"MXjxGML2X75x64vJo\",\"nc7bRhkxgKyqusYe3\",\"PFjMZGHNAPTkgd7tq\",\"5dvDGoRaJwmYTmRRB\",\"AF6LgdKhEdzwgRJom\",\"BFNm9gacwba9KyLFW\",\"C9LKGu2g5hSijvDzA\",\"jHrtWDGBhkbuWa7fG\",\"AYaEkTWLMmfzpwejr\",\"jYJ26SiLKBu5GRumq\",\"cR3ibTMxLyEdDFCHY\",\"gMJhLdyw3tH7L96X2\",\"Nj6FwgBtAXsaQwsM2\",\"otXtuQygbcYATMZoP\",\"8aPJNKDxXq7884eJb\",\"oqGkxvASXq52iTDvp\",\"HqmxnQJM66Y57twhn\",\"2fxapKr8XGdNeaKi2\",\"EXZfPb8YH28EL8Rh9\",\"C4QntmkYtB89GNtpd\",\"FgkYtHLxeD8pETJ8T\",\"j47GEgPABfbrCPAmA\",\"s5M5RvgqR9BhB9JoC\",\"K96FwtfDDN5WM4Bb7\",\"2innwjWqxJHo4eRGh\",\"Yp7uvStL97cC9fKkY\",\"AasGs8AeX9Lcb9xJn\",\"Z85ajWfZ4jDPkbvR4\",\"8PwfYqoDQFThzNtvf\",\"w3A7cBWyAfukk6xEQ\",\"PytNZK9mNiRiZxPrm\",\"aEm3Wvj2rFYRL8Lrb\",\"aCNWav8S8Try9RkC6\",\"mDWNyaaQ9hvPCRzSd\",\"YRstQuthRkFeBiXug\",\"EjbDDFRECrzQDkzrX\",\"gJYuGdkXEWWmGRLzu\",\"DtMuKf5LHWYpdHXBg\",\"ekQh3jzgGLsEMbKo3\",\"HF28xZKSLM9wEuqNg\",\"yr822PZmmiDDenxpB\",\"9pzFiFK3ANLjQfnr2\",\"v9KtC8YLbMWmXiW2H\",\"DEDniTrstQYGounXT\",\"hnyhBFWwNCz9mDfSi\",\"W5TajitmCyxz87zAC\",\"Ecg4m7srYGgZsb4Ck\",\"f2BoqyCpgnmjEjLqx\",\"4rwxLqLs2mNZNg8NB\",\"uMLsCftXNbvx6pcGA\",\"yJmwiykSNfLv9NqJ2\",\"Z4M3NAa4TXquMNkHe\",\"bJxaKHJqR82EWw8Su\",\"dXMbkgQFoN37BhruB\",\"dEuJGZbBQkveCXEFk\",\"5qfcG54cbBC8ujxav\",\"SGhPxX5bHGL8zZqtt\",\"R4SjTgDnpigJYDLyL\",\"JS3hNM3XXkxPdg3yk\",\"CTKmXtrqDYqJBnuy8\",\"oig8ig9SE9RZa8ttL\",\"iojEnnY9FsMfYzp6f\",\"KyJxeCm5f5SoDtRHD\",\"KZ2xddpM2f9JRaryB\",\"yjtdwc2AC4jA2RWtn\",\"BrTDhPJcACL2bsrpJ\",\"bccs9koJxyQ9XNiLC\",\"mqJtnfNCs6CedXnay\",\"BsQtg7fnYvbyQRBBZ\",\"jBR47vA7HwAZqp4QA\",\"n2BRY9X8899dcG8Bw\",\"pmgFEciNrd3ES9tuu\",\"d8qtzoLB264iP8tdY\",\"mG8HqKiAQFTdRZthG\",\"dkcmCKwqApX5jBggc\",\"XjajdyybZZbkz8o5x\",\"J5T8gZqiZXFuFDTQ7\",\"9CoqdidjM9KbeKnHY\",\"xn7uGNKeAwPEkP9oA\",\"8fZxjQfuXw5HMSRJM\",\"eADnqywZR6P7fbJar\",\"dYPkStFnLvAMsHSzZ\",\"J3upzLHuEwXH7Z2hx\",\"6MjSiiBLPcvXbXcaZ\",\"DPi9QGLctq2y76KuE\",\"gXTAie79kiw28tx5u\",\"oBcs8GLX2ZFLXQy8y\",\"7scpcTEp3SEx5Wjg9\",\"cAP3n5NY64uoMwzRR\",\"QRv96jmNaYsWkxQEG\",\"FEYpu9RWysAgW3XnP\",\"GGdmhAvxXhqhhibJN\",\"PC3pLs36zNzpRDSuE\",\"2PufnQcsHsfymufX3\",\"jCjCvyhqhpebkJn34\",\"T6iBEE2jp7f7iEF2P\",\"AFfw7cGg83uYk2Miy\",\"gKnWjDjwrJh7MK2df\",\"e5AJsJt6Z3BJpeqcR\",\"yod5YhKtPqw2GfG9B\",\"8sNv5PTHa7XQ8bNqR\",\"buX4mCQhtXCfBjeno\",\"Ds7L5bksw2QRHjrKL\",\"CHvzhtXnv8HTbPQ56\",\"5HCu9Ydd86QgHDRNP\",\"h96caAS2Whbje6Lw3\",\"Qyfyyw6oC4EHAndzo\",\"3KkyQm77zsew58Dc2\"],\"quality\":[1,4,5,3,5,2,4,5,5,5,5]},\"tests\":{\"score\":0,\"rators\":[\"BkPgkDQGHm66X4Qai\"]},\"instructions\":{\"score\":0,\"rators\":[\"BkPgkDQGHm66X4Qai\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4,\"family\":[{\"_id\":\"3WCghTW5jKNjJh9y9\",\"language\":\"cpp\"},{\"_id\":\"Qoqaohvgh4Mi3bpjj\",\"language\":\"javascript\"},{\"_id\":\"NbZ2cMeEfH3KpQRku\",\"language\":\"python3\"},{\"_id\":\"hBAi7BXbWuiBp6Txy\",\"language\":\"ruby\"}]}}"]