a["{\"msg\":\"result\",\"id\":\"958\",\"result\":{\"_id\":\"DGK42TmQiocZqifxi\",\"author\":\"Yesselman Lab UNL \",\"authorId\":\"5PuL6D3CTfBy7Thy5\",\"code\":\"def reverse_complement(input_sequence):\\n\\t\",\"difficulty\":1.4885496183206106,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"rjfboaeGGrZCCp2Xx\",\"instructions\":\"Create a function that finds the reverse complement of a ribonucleic acid (RNA) strand. The RNA will be represented as a string containing only the characters \\\"A\\\", \\\"C\\\", \\\"G\\\" and \\\"U\\\". Since RNA can only (canonically) allow pairings of A/U and G/C, the complement of an RNA would be as follows:\\n\\n```\\noriginal -> complement\\n\\\"AAA\\\" -> \\\"UUU\\\"\\n\\\"UUU\\\" -> \\\"AAA\\\"\\n\\\"GGG\\\" -> \\\"CCC\\\"\\n\\\"CCC\\\" -> \\\"GGG\\\"\\n\\\"GGAACC\\\" -> \\\"CCUUGG\\\"\\n```\\n\\nYour function should find the complement on the right **AND** also reverse the resulting string.\\n\\n### Examples\\n```\\nreverse_complement(\\\"GUGU\\\") ➞ \\\"ACAC\\\"\\n\\nreverse_complement(\\\"UCUCG\\\") ➞ \\\"CGAGA\\\"\\n\\nreverse_complement(\\\"CAGGU\\\") ➞ \\\"ACCUG\\\"\\n```\\n\\n### Notes\\nAssume all input seqeuences are valid.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(reverse_complement(\\\"GAGGC\\\"), \\\"GCCUC\\\")\\nTest.assert_equals(reverse_complement(\\\"UCUCG\\\"), \\\"CGAGA\\\")\\nTest.assert_equals(reverse_complement(\\\"CAGGU\\\"), \\\"ACCUG\\\")\\nTest.assert_equals(reverse_complement(\\\"UAUUUUUCCA\\\"), \\\"UGGAAAAAUA\\\")\\nTest.assert_equals(reverse_complement(\\\"GUAGGCAACA\\\"), \\\"UGUUGCCUAC\\\")\\nTest.assert_equals(reverse_complement(\\\"UAGCUAAAUC\\\"), \\\"GAUUUAGCUA\\\")\\nTest.assert_equals(reverse_complement(\\\"AUGAGCGUAC\\\"), \\\"GUACGCUCAU\\\")\\nTest.assert_equals(reverse_complement(\\\"UUAUACCCGAGUCGGAUUUGUCACU\\\"), \\\"AGUGACAAAUCCGACUCGGGUAUAA\\\")\\nTest.assert_equals(reverse_complement(\\\"CUUGUGCGCUAUACAUCGAGUAGUUGCUAGAGUAUGUUACUCAAGAGCGC\\\"), \\\"GCGCUCUUGAGUAACAUACUCUAGCAACUACUCGAUGUAUAGCGCACAAG\\\")\\nTest.assert_equals(reverse_complement(\\\"UUAACUGGGGUGAACUGUCCUGAGCCUAUGGAUCUGCGCGCAGGGCUUCAAAUGGAGUUCGGAAUGACCAUCGAUUCUCGAUGUUUGGCACGAAGUCGCA\\\"), \\\"UGCGACUUCGUGCCAAACAUCGAGAAUCGAUGGUCAUUCCGAACUCCAUUUGAAGCCCUGCGCGCAGAUCCAUAGGCUCAGGACAGUUCACCCCAGUUAA\\\")\\nTest.assert_equals(reverse_complement(\\\"GCAGCUCCCCGUCCAUCGAUAAGAGACGUUCCUGCCACGGUUGCUCUACUUUAGAGGUACAACUCUCUUGUAUAAGCCUAGCGUCCUUCCGGAGGAGCCGGGUGCCGUCUCAUGGAUCCGCAUUGUCAGGUUGGCCACGACCAUUCAAAAUUUAACUUACACUUAUGAUGCGAAAUGCACACCAUAGUGCCACCGUGAUAAGUUUCCAGCCGAACUAUGCGAGUUUGCGAGAGGCAGGCUCAAUGCCAGCAGGGGCCAGUGAGGGCUCGAUCUAAAACCCGCUGUUGAUAUUCGUAAACGGUGGCCCGCCUGUUCAGUUACUCUCCAUAUCAUCACCUCAGGUUGAGCCAAAGUAGCCGCGCCGCAUCAAGCUGAGAGAAGUGCACGAGGUUUACACGUAGCCCUCUCUGAUCCGGUUGCCGUGCACUAGCGAUUUGUUUCACAUGAAUCGGUCGGGAGUACACACACAUAUAUUAUUAGAGUUGUUCAAUCCCGCAGAG\\\"), \\\"CUCUGCGGGAUUGAACAACUCUAAUAAUAUAUGUGUGUGUACUCCCGACCGAUUCAUGUGAAACAAAUCGCUAGUGCACGGCAACCGGAUCAGAGAGGGCUACGUGUAAACCUCGUGCACUUCUCUCAGCUUGAUGCGGCGCGGCUACUUUGGCUCAACCUGAGGUGAUGAUAUGGAGAGUAACUGAACAGGCGGGCCACCGUUUACGAAUAUCAACAGCGGGUUUUAGAUCGAGCCCUCACUGGCCCCUGCUGGCAUUGAGCCUGCCUCUCGCAAACUCGCAUAGUUCGGCUGGAAACUUAUCACGGUGGCACUAUGGUGUGCAUUUCGCAUCAUAAGUGUAAGUUAAAUUUUGAAUGGUCGUGGCCAACCUGACAAUGCGGAUCCAUGAGACGGCACCCGGCUCCUCCGGAAGGACGCUAGGCUUAUACAAGAGAGUUGUACCUCUAAAGUAGAGCAACCGUGGCAGGAACGUCUCUUAUCGAUGGACGGGGAGCUGC\\\")\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,2,2,3,1,3,1,5,1,1,2,2,1,2,1,1,2,2,0,1,1,2,2,0,2,1,1,2,2,0,1,2,0,0,2,2,2,3,1,1,0,2,2,1,2,3,2,2,1,2,3,2,0,2,0,0,2,2,1,1,1,3,2,2,2,1,2,2,0,2,0,2,1,1,1,2,1,1,1,0,2,0,1,2,2,1,2,0,2,1,0,0,2,1,1,2,0,2,2,2,0,2,2,2,1,1,1,2,2,1,1,2,2,2,2,0,2,2,1,2,2,2,2,2,1,2],\"rators\":[\"MKT7khMBGXzA22ykf\",\"AasGs8AeX9Lcb9xJn\",\"tAF9Gf6PiGogbZuWs\",\"4za87fFyw9qxkD936\",\"s5M5RvgqR9BhB9JoC\",\"8PwfYqoDQFThzNtvf\",\"gb9rvGus2Jv7bjZSs\",\"J5T8gZqiZXFuFDTQ7\",\"KRmxvA4mWgfKvHmYN\",\"gJYuGdkXEWWmGRLzu\",\"aCNWav8S8Try9RkC6\",\"n2BRY9X8899dcG8Bw\",\"ZNnsMeNkdDhHjSrZb\",\"5nY48krepaT4a4QTN\",\"3ECpdeExhBmkYXtba\",\"CEd9tLdXeDeNHSzys\",\"NuqGt5u3s7vJ7HBGR\",\"7ea8XTQfzRWmpKAT2\",\"hcHvBjqkn4XKgF4EH\",\"KouYhiYSyoKMRrjhR\",\"JRacQYm77Ltir8aK8\",\"hnyhBFWwNCz9mDfSi\",\"DEDniTrstQYGounXT\",\"HF28xZKSLM9wEuqNg\",\"Yp7uvStL97cC9fKkY\",\"cR3ibTMxLyEdDFCHY\",\"8JyqsSbN2FJXPr3cw\",\"dHZqT6h4JMwk5fPC8\",\"9pzFiFK3ANLjQfnr2\",\"ahk2qiXKJA753wAJk\",\"aEm3Wvj2rFYRL8Lrb\",\"PXAcsKkssS2yLyDv2\",\"ia7nbrXmdkZkHx2Qw\",\"2QGRoQn2dRq3scu7k\",\"H9KZi2cjt4FwH7qog\",\"qHuZ8KPG4W3acKdJh\",\"x4dfavjLEcrvAF3QQ\",\"Nb6LYPoQP6KJZt8mz\",\"jNvegJWCk5HCtEMbK\",\"iBTooWAGe7dD9svva\",\"aRqQ42J5zqCmBNd8w\",\"NG8PWBSjsM8mMhQEq\",\"ZrKCkX7xxGGZzauFW\",\"syRNbbPdLCGXbH2Gy\",\"H4abACFDH5t8CnnyH\",\"istg3MKFvSX3eQTp4\",\"iojEnnY9FsMfYzp6f\",\"Pe8vWpDHRuH9nSGKW\",\"R4SjTgDnpigJYDLyL\",\"i5iePG5GqhJJ8HEoB\",\"ypGdjKLkswPZXo89K\",\"LFSASkxgw9hr3KqmC\",\"yjtdwc2AC4jA2RWtn\",\"a777e8chPvJkY3tKa\",\"HqmxnQJM66Y57twhn\",\"NNE5HNRXAkmhrWgyQ\",\"BBk8ZRmMsTzpKCaux\",\"XrqNzJ2FRG8HnGiR6\",\"oBcs8GLX2ZFLXQy8y\",\"FEYpu9RWysAgW3XnP\",\"tpxMgkGSHwBjS95Ta\",\"KLmLKaJPfsYxp42p2\",\"iS5BrkGLzJyPK7nKt\",\"mxX4rH5ELYkdZ2Mbw\",\"QRv96jmNaYsWkxQEG\",\"p8qqFdJ3FSk5x9z3G\",\"DPi9QGLctq2y76KuE\",\"J3upzLHuEwXH7Z2hx\",\"dYPkStFnLvAMsHSzZ\",\"5XiuAqicKD4hBdu63\",\"cAP3n5NY64uoMwzRR\",\"5hQnRWiKkhgKJXNMP\",\"KJCDwGkoXh8qtbbKr\",\"RGMbFMZXJr7DhcAJy\",\"C8CjSD4rKfnTWuWDA\",\"dBzwBtRjZqB98DJeB\",\"zd9FLSzsGz3evKafy\",\"rfyEkETeoS96QNH4e\",\"DiWMTKG3JEgRBTWaT\",\"d8qtzoLB264iP8tdY\",\"22kSvGZ9z9J2KK8nc\",\"5HCu9Ydd86QgHDRNP\",\"Jqk2uJZZxEv5wZFze\",\"9bQyb6rW7xfE4vgrR\",\"HuNF3xTBzmatyGSTm\",\"xygE63XtvXatGvuzd\",\"eMuCpJ2spXWkJjWNz\",\"wRttWTM59y8m5mx7x\",\"3nied3n8KG8RSNixH\",\"YRAzEBJoLvSaiPtYx\",\"5S9nX4rKsnCcnv4Cz\",\"B8n7KqbvEDjZzgj2D\",\"buX4mCQhtXCfBjeno\",\"GGdmhAvxXhqhhibJN\",\"o4ixjQGSaYqA2JoM4\",\"sHjfbGQGLHE6JR6qu\",\"AJexRBN9cYQmqvYu6\",\"Ds7L5bksw2QRHjrKL\",\"N2wnZXkhDH86mgjQ8\",\"Wv2vJnEj8ywNmARoF\",\"srJ34BaybkQh3qRkM\",\"T2vhHPhRR96hRizq8\",\"ebR9m79RbNzm4cJsJ\",\"qAby4AWXmTNeusvg3\",\"3cF6NXq3ZEwdkgSjb\",\"3KkyQm77zsew58Dc2\",\"JhX7jvtpwNyxcc39m\",\"T6iBEE2jp7f7iEF2P\",\"66a9xX73nmTEuKs9k\",\"8BFSTCnoe2QggN64c\",\"XD5nmvKQchKezPXhy\",\"wjc4iejpErBhxWwHo\",\"Wpn95NqWxncQrwNgz\",\"NzbRqGWspQnWMoDrF\",\"AFfw7cGg83uYk2Miy\",\"PC3pLs36zNzpRDSuE\",\"BrTDhPJcACL2bsrpJ\",\"yod5YhKtPqw2GfG9B\",\"CHvzhtXnv8HTbPQ56\",\"Cc2Cgj4MWXZxsTooC\",\"c2q7mY39z5JPEMCaM\",\"yr822PZmmiDDenxpB\",\"mvJBakQ35CWAnbbEZ\",\"X4rzfxGgxx6CS7Bpz\",\"M2gFMJkocQSY6bsFR\",\"K6MfKMytoJJuSGewP\",\"2PufnQcsHsfymufX3\",\"utTuvGdmu2sBHWBhQ\",\"rrSC943cCKNG48sH4\",\"R6YxHWAiLgKwy5YvC\",\"RoGGD5cpHb4ftdLDv\",\"qzXAMXsHZGT8o5hTA\",\"JiSpvq6C7azQEmENc\",\"pduNK68oazqQTtbLp\",\"fSQSHjW3e72MrWxbD\",\"hR7GMiqGap4CzEWSy\",\"2iFe3EHEH2YdhSKrs\",\"4Lwjr34ypKNQNQCar\",\"4RY3zj9C2t8GGefhi\",\"ZEmLth3xsiCJENKz4\",\"KH4Wr3YSvNddCSRJ2\",\"YA7SDhpgEtsqynvNL\",\"4TmgHkn5vqyHK3sYC\",\"u5u2YpHXiNgzDNJdX\",\"T6Rm8mREPMZSftzrC\",\"5Dd7XwALvvMMwS4Fb\",\"dzS6WBTMHyFEag6Fp\",\"d9LBRxvADNBB5QJMB\",\"yAouD3PxzED8a4gap\",\"2fxapKr8XGdNeaKi2\",\"uGuS9YRXW2nj4p6zf\",\"EC3vxzsccoFjfhf86\",\"hpT9yYe5R45poHrYR\",\"Qyfyyw6oC4EHAndzo\",\"5QN8R22z43SrwoHDz\",\"Wi4H6ayKsNDWWQCG5\",\"rCrbqMiaGPgHYTNxu\"],\"total\":172,\"quality\":[5,5,4,5,3,5,3,5,4,4,5,5,5,5,5,4,5,5,5,5,5,5,4,5,5,1,5,5,2,5,4]},\"flags\":0},\"summary\":\"Create a function that finds the reverse complement of a ribonucleic acid (RNA) strand. The RNA will be represented as a string containing only the characters \\\"A\\\", \\\"C\\\", \\\"G\\\" and \\\"U\\\". Since RNA can only (canonically) allow pairings of A/U and G/C, the complement of an RNA would be as follows:\\n\\noriginal -> complement\\n\\\"AAA\\\" -> \\\"UUU\\\"\\n\\\"UUU\\\" -> \\\"AAA\\\"\\n\\\"GGG\\\" -> \\\"CCC\\\"\\n\\\"\",\"tags\":[\"algorithms\",\"loops\"],\"timestamp\":{\"$date\":1590104828540},\"title\":\"RNA Reverse Complement\",\"quality\":4.451612903225806,\"family\":[{\"_id\":\"WMrrk4zDY5vYr3Hyb\",\"language\":\"cpp\"},{\"_id\":\"9gtnTRq5iksMCKWRZ\",\"language\":\"javascript\"},{\"_id\":\"DGK42TmQiocZqifxi\",\"language\":\"python3\"},{\"_id\":\"H4z4CDKatxD2AHc89\",\"language\":\"ruby\"}]}}"]