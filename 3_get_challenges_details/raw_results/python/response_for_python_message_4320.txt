a["{\"msg\":\"result\",\"id\":\"878\",\"result\":{\"_id\":\"ffeLkHfoGDbApgNSA\",\"author\":\"Alessandro Manicone\",\"authorId\":\"AasGs8AeX9Lcb9xJn\",\"code\":\"import re\\n\\npattern = \\\"yourregularexpressionhere\\\"\",\"difficulty\":1.4310344827586208,\"familyId\":\"DJGD5jfhrYhXE3tMH\",\"instructions\":\"A **Character Set** will match any characters within a pair of brackets `[ ] `. You can specify a **range** of characters by using a **hyphen**.\\n\\n```\\n[abcd] == [a-d]\\n```\\n\\nIf the hyphen appears as the **first** or **last** character then it is considered a **literal** hyphen.\\n\\n```\\ntxt = \\\"non-profit\\\"\\npattern = \\\"[abc-]\\\"\\n\\nre.findall(pattern, txt) ➞ [\\\"-\\\"]\\n```\\n\\nYou can also use **character classes** in a character set.\\n\\n```\\n[a-zA-Z0-9_] == [\\\\w]\\n```\\n\\nWrite the **regular expression** that will match an \\\"x\\\" followed by two hexadecimal digits. A hexadecimal digit can be either one of the 10 decimal digits (0 to 9) or a letter from A to F.\\n\\n### Examples\\n```\\ntxt1 = \\\"Exception 0xAF\\\"\\ntxt2 = \\\"Exception 0xD3\\\"\\ntxt3 = \\\"Exception 0xd3\\\"\\ntxt4 = \\\"Exception 0xZZ\\\"\\npattern = \\\"yourregularexpressionhere\\\"\\n\\nre.findall(pattern, txt1) ➞ [\\\"xAF\\\"]\\nre.findall(pattern, txt2) ➞ [\\\"xD3\\\"]\\nre.findall(pattern, txt3) ➞ []\\nre.findall(pattern, txt4) ➞ []\\n```\\n\\n### Notes\\n- You **don't** need to write a function, just the pattern.\\n- Do **not** remove `import re` from the code.\\n- Find more info on RegEx and character sets in **Resources**.\\n- You can find all the challenges of this series in my [Basic RegEx](https://edabit.com/collection/8PEq2azWDtAZWPFe2) collection.\",\"isHidden\":false,\"lab\":\"txt1 = 'Exception 0xAF'\\ntxt2 = 'Exception 0x1A'\\ntxt3 = 'Exception 0x22'\\ntxt4 = 'Exception 0xF9'\\ntxt5 = 'Exception 0x9H'\\ntxt6 = 'Exception 0xf9'\\ntxt7 = 'Exception 0xB'\\ntxt8 = 'Exception 0xBA6C3'\\n\\nTest.assert_equals('[' in pattern and ']' in pattern, True, 'You must use a character set your expression.')\\n\\nTest.assert_equals(re.findall(pattern, txt1), ['xAF'])\\nTest.assert_equals(re.findall(pattern, txt2), ['x1A'])\\nTest.assert_equals(re.findall(pattern, txt3), ['x22'])\\nTest.assert_equals(re.findall(pattern, txt4), ['xF9'])\\nTest.assert_equals(re.findall(pattern, txt5), [], 'Letters should be between A and F')\\nTest.assert_equals(re.findall(pattern, txt6), [], 'Letters must be upper case')\\nTest.assert_equals(re.findall(pattern, txt7), [], 'There should be at least two hexadecimal digits')\\nTest.assert_equals(re.findall(pattern, txt8), ['xBA'], 'There should be no more than two hexadecimal digits')\\n\\n\\n# Note from the original:\\n# Credits to https://javascript.info/regexp-character-sets-and-ranges\\n\\n# Translated from JavaScript.\\n# The RegEx series was originally posted by Isaac Pak.\",\"language\":\"python3\",\"summary\":\"A Character Set will match any characters within a pair of brackets [ ] . You can specify a range of characters by using a hyphen.\\n\\n[abcd] == [a-d]\\n\\nIf the hyphen appears as the first or last character then it is considered a literal hyphen.\\n\\ntxt = \\\"non-profit\\\"\\npattern = \\\"[abc-]\\\"\\n\\nre.findall(pattern, txt) ➞ [\\\"-\\\"]\\n\\nYou can also use character classes in a charac\",\"tags\":[\"regex\"],\"timestamp\":{\"$date\":1587012566723},\"title\":\"RegEx XIV: Character Sets\",\"stats\":{\"completed\":{\"total\":305,\"ratings\":[1,1,1,1,1,2,1,1,1,1,1,1,0,0,1,1,2,2,1,1,2,1,0,1,2,3,2,2,2,2,2,2,1,1,0,3,1,2,2,2,2,2,0,2,1,2,2,1,1,5,2,2,0,0,2,2,1,1,2,1,1,2,1,1,2,2,2,2,1,2,0,2,0,1,1,0,1,1,1,2,3,1,1,2,2,1,2,2,1,4,1,1,2,1,2,1,1,2,0,0,1,1,2,3,2,1,1,1,2,2,2,2,2,1,2,0,0,0,2,2,2,0,2,4,1,2,1,0,0,2,1,2,1,2,1,2,2,1,1,3,1,1,1,0,2,2,1,0,1,0,1,3,2,2,2,3,2,1,1,2,2,2,2,2,1,1,2,3,2,0,1,2,1,0,2,2,1,2,3,2,1,0,1,2,0,2,2,2,2,2,0,2,2,1,2,1,2,1,0,2,2,1,1,2,2,1,1,2,1,2,1,1,0,0,2,2,1,2,2,1,5,2,2,1,0,2,0,2,1,2,0,1],\"rators\":[\"AasGs8AeX9Lcb9xJn\",\"aEm3Wvj2rFYRL8Lrb\",\"tAF9Gf6PiGogbZuWs\",\"DEDniTrstQYGounXT\",\"KdNDysEsy2TW5QRJ2\",\"poqx2psfWnEswCdYB\",\"ZNnsMeNkdDhHjSrZb\",\"HF28xZKSLM9wEuqNg\",\"n7won7uQNyJdrtrY6\",\"sHjfbGQGLHE6JR6qu\",\"9zwRb7df96BkcfBKP\",\"DYim5qcKiqDLeag3Q\",\"uH4HvaiESNCeYdSyZ\",\"8JyqsSbN2FJXPr3cw\",\"Jqk2uJZZxEv5wZFze\",\"LjoNTyGEMfBpMHHus\",\"HQxp7NcdvF92G7bYS\",\"2QGRoQn2dRq3scu7k\",\"Yp7uvStL97cC9fKkY\",\"bMEg2eSZtsAcT7ZmJ\",\"ckHFA5y8pkrXbsevA\",\"8LfTheFzvicameoz9\",\"GEvSGXDkk7pACfYri\",\"awxTyavq6BNM86LTD\",\"mkcf3C3NMxhYZuiLM\",\"N2wnZXkhDH86mgjQ8\",\"Cn9tye48LCWzCqCc5\",\"8BFSTCnoe2QggN64c\",\"Fk9kLwoG4Brf4KsKf\",\"PhW2FuCk6KHqjckFp\",\"KpHrC7WPEojnzgEtz\",\"e8zndiMnKLvSb8e7q\",\"jNvegJWCk5HCtEMbK\",\"Nt2qqga6sgvoLr9xj\",\"FDWEEwwAtxD7SkqBD\",\"5DRzYouHzFb7yjrcy\",\"vt6MbZKuKZptRkwcr\",\"6c4xjEdFxdYw5xGrt\",\"dHZqT6h4JMwk5fPC8\",\"GM2X83qnuLXTHe5zA\",\"vLrq4dEDMM2wd68Dc\",\"AGMQqooexrFXgMnET\",\"E6fNivJ9po4ntpEES\",\"uiEuENARwFpnNMfFs\",\"J5T8gZqiZXFuFDTQ7\",\"sz8ufn9i8zeiGWpAy\",\"wT5gGgvjKc5wz59AQ\",\"aRqQ42J5zqCmBNd8w\",\"zg8GmMSP2LkHBtAzy\",\"jNE5AHcJQWXz7efuP\",\"8PwfYqoDQFThzNtvf\",\"aP7JkkYer28YWrPvC\",\"YsAz93yZw8KKPupKv\",\"pWD2YC5s4YRCxFc2i\",\"CMuhZyDkaZXX4pvTD\",\"gb9rvGus2Jv7bjZSs\",\"efcsSdKgupNnf9DKD\",\"PXAcsKkssS2yLyDv2\",\"AF6LgdKhEdzwgRJom\",\"tSFYadMLQgCqx3mnM\",\"hnyhBFWwNCz9mDfSi\",\"Nua6T3dBurBy3Qfg9\",\"dZGNAJXB24zNh2tsD\",\"a777e8chPvJkY3tKa\",\"KYS7J9RaGR9WJ6S8s\",\"586FdBhazpwJfnRYR\",\"di2hhADLx59Bj4ewM\",\"ahk2qiXKJA753wAJk\",\"nfXGHENb5md7m355s\",\"XrqNzJ2FRG8HnGiR6\",\"NRCH4eiebS7LBjSCa\",\"ySiDrAad7S23QsEN6\",\"EjbDDFRECrzQDkzrX\",\"Fq5HQBFTP7BiTEetj\",\"FzxTj4GuujhwpZM7y\",\"ZJYMYPmyQAJ5B863h\",\"yr822PZmmiDDenxpB\",\"E8TMSMSamEbBtf9Lo\",\"DxxNN37iEz7b8t2nf\",\"YRstQuthRkFeBiXug\",\"pkQBaSzukotPEXmrD\",\"vqfgSfaczQSe7F2Pq\",\"FEYpu9RWysAgW3XnP\",\"vGRSrdg2F3NKqEP5e\",\"vyaFTJDKChqYfczdu\",\"2ptN2mhjFwFcHyPZd\",\"3cF6NXq3ZEwdkgSjb\",\"H4abACFDH5t8CnnyH\",\"4LGKpgWrEJRsTXDkq\",\"kfzkjHwhXQg8LExE4\",\"p5EN3tadeCfPkW3CB\",\"yJmwiykSNfLv9NqJ2\",\"rfyEkETeoS96QNH4e\",\"PhceyfmFntJcn5Fhf\",\"8TAYWzqJAkXq2MAba\",\"R4SjTgDnpigJYDLyL\",\"AtoBC3LqE89p3xhYC\",\"iojEnnY9FsMfYzp6f\",\"aCNWav8S8Try9RkC6\",\"uouMMdEWBuLBWPbzr\",\"BtdZezHfckxRLm7xR\",\"NzbRqGWspQnWMoDrF\",\"Pe8vWpDHRuH9nSGKW\",\"2innwjWqxJHo4eRGh\",\"YcCLwitFMAEJSnxAW\",\"KZvaNQrXBFJ9bKLYx\",\"yAouD3PxzED8a4gap\",\"K4JsBLPjNKZv5LWnp\",\"XSt47ad5D5LLZSupD\",\"JS3hNM3XXkxPdg3yk\",\"yjtdwc2AC4jA2RWtn\",\"DJdsqmTeAGDwrgYoZ\",\"HqmxnQJM66Y57twhn\",\"oBcs8GLX2ZFLXQy8y\",\"n2BRY9X8899dcG8Bw\",\"SkQcb2sRn4as5KpnN\",\"s6qiPXptvyxxEy3vm\",\"FvFhg2wELM3SCZDZQ\",\"S5juYy9cQBJwx6zvu\",\"3LiSLdtN58n46NEqg\",\"Tpc5NKFiQyz3NTZau\",\"PTDFuxAzou7W6asWt\",\"MCw7uAcoWcSTBTmr3\",\"M8dQuMrEpP8Hc3tHN\",\"ta5CrWnBCRusD2WMo\",\"Pw3gpBkyTg8e6oAsa\",\"YA7SDhpgEtsqynvNL\",\"xW9NGjvcevY6qdzvw\",\"9cWTAMQmN7PZMqdec\",\"4597PD5mbXzHa3vdi\",\"ji5f27FPz4wRRF6Ls\",\"Ge3xgZrEGB58ofBPT\",\"RehJGBFS6CYiWdjZx\",\"zZ43WzxvFu7kaTKZ6\",\"JJmKj7ACC2P52uo95\",\"ACEZh39brWjdGkZXb\",\"pscBduNyf8TDHe2Km\",\"kNrnnMxhFZztMTBAX\",\"HnJuYrgwLJwXtboE3\",\"kyEERyssssTQaZ4y5\",\"TPhfpB5tzQWSSn67n\",\"pPtmnJ7q9QchoG2Jq\",\"8WpvgSbQciTQWdd8T\",\"mmt7jwqbmSjzRSvqh\",\"BqT6sMHBAjkw4hjG6\",\"9CoqdidjM9KbeKnHY\",\"cxABox46qWvJRyidE\",\"NuqGt5u3s7vJ7HBGR\",\"KLmLKaJPfsYxp42p2\",\"8zQnyekbSwzhoJymu\",\"pmgFEciNrd3ES9tuu\",\"ijNKM8DuspXuAnC4y\",\"mBtSsKTHdQniYAfsZ\",\"MKT7khMBGXzA22ykf\",\"tpxMgkGSHwBjS95Ta\",\"cfjnqyiLFDmytnE6N\",\"mG8HqKiAQFTdRZthG\",\"jsm4KL8xxxddBnbLv\",\"uEeZaTW4HK8AL4BjQ\",\"m6TC9gshrwufWqAYn\",\"oHbErJxjYJhD66d5w\",\"Kh3Pc2ZRusurLaMyP\",\"5Z4o2pWDzmbpw4JHJ\",\"QRv96jmNaYsWkxQEG\",\"aKzYNPqBqb3J3ZgyD\",\"yTtSCvGPyYna6JuRC\",\"wRttWTM59y8m5mx7x\",\"vhLJwgSRY2J7aGD2i\",\"hXoTNPPmJLzkZnkSX\",\"rNoGMF8qZMr3oX4EQ\",\"DPi9QGLctq2y76KuE\",\"7eYSYKpM4i2N4NZ92\",\"rrSC943cCKNG48sH4\",\"2QziknsznNeMPRh3g\",\"J3upzLHuEwXH7Z2hx\",\"uN5t57RETi5y2z5W8\",\"c2u7qfdaYxcyuydtu\",\"dyBcJXfbqJtjTmBZK\",\"JPsNHTzSzYagiorba\",\"LCZ6JTAhBZBmWLzm8\",\"jSaW4kdeAAGoLxcuP\",\"d8qtzoLB264iP8tdY\",\"YRAzEBJoLvSaiPtYx\",\"CEd9tLdXeDeNHSzys\",\"RGMbFMZXJr7DhcAJy\",\"incG8tH2dwThHg35f\",\"cAP3n5NY64uoMwzRR\",\"dYPkStFnLvAMsHSzZ\",\"KTy2iqwjsH9PeErTB\",\"pduNK68oazqQTtbLp\",\"6MjSiiBLPcvXbXcaZ\",\"obsLt2HzJ5r9f8pkM\",\"5XiuAqicKD4hBdu63\",\"4fjSgcqhQQZM2ZFRP\",\"dQK2T76aHcRJkrbKB\",\"QJjb5YhFjNf4M4pmY\",\"DpnYcMphntjsQ96qg\",\"6xTu4r8NMczBFvmtz\",\"L5HTAwwohh2J3oST7\",\"FRv5HToEaZ6iRM7T5\",\"HuNF3xTBzmatyGSTm\",\"XMYbe9cezEyMp2QMo\",\"utTuvGdmu2sBHWBhQ\",\"ANbSYXiYsp4addoDq\",\"StNu7DPyTgEStZsMY\",\"m9Dj3WvWDwiu73PRh\",\"WdKdsgH9gXkKgCycx\",\"5hQnRWiKkhgKJXNMP\",\"GGdmhAvxXhqhhibJN\",\"5S9nX4rKsnCcnv4Cz\",\"axdSNLZpiCDF8RS6n\",\"nFbmNzMQ38TncmfQX\",\"Ds7L5bksw2QRHjrKL\",\"yod5YhKtPqw2GfG9B\",\"srJ34BaybkQh3qRkM\",\"HTv3FdeB6pYK7ZKJa\",\"CTKmXtrqDYqJBnuy8\",\"bvmTE46bfcM4ogj34\",\"CHvzhtXnv8HTbPQ56\",\"qAby4AWXmTNeusvg3\",\"KBxTPknCRmB2b5y3i\",\"4iocshxRuzitdpEJz\",\"AFfw7cGg83uYk2Miy\",\"82nyWEcznkx7ZA9ip\",\"66a9xX73nmTEuKs9k\",\"Wpn95NqWxncQrwNgz\",\"qNszsXx28cTxvGSNj\",\"s7PAdYARQvr8scq84\",\"w3QDkmjZj2dAFDsjq\",\"BrTDhPJcACL2bsrpJ\",\"JwkwCHcXthnGDsdFr\",\"c2q7mY39z5JPEMCaM\",\"mvJBakQ35CWAnbbEZ\",\"2PufnQcsHsfymufX3\",\"X4rzfxGgxx6CS7Bpz\",\"RoGGD5cpHb4ftdLDv\",\"R6YxHWAiLgKwy5YvC\",\"JKb5rhL6DKcCAypF9\",\"PC3pLs36zNzpRDSuE\",\"sbJcFfQjQ59Wfg4Cd\",\"4Lwjr34ypKNQNQCar\",\"hR7GMiqGap4CzEWSy\",\"ctbThYbufFCYbRK4f\",\"2iFe3EHEH2YdhSKrs\",\"4TmgHkn5vqyHK3sYC\",\"97DthwdtrBLm2y2Yj\",\"T6Rm8mREPMZSftzrC\",\"eHcgvkTGsH7ZziqBo\",\"rCrbqMiaGPgHYTNxu\",\"u5u2YpHXiNgzDNJdX\",\"AQSqD9oNv2uPfxZCR\",\"AMpQSjKsRqhCDyS2j\",\"Qyfyyw6oC4EHAndzo\",\"ag8tcfPvJZWpRnwet\",\"MHiQx9E8rPgzJfsJy\",\"ExtLwnLBEiWJxAskL\",\"DdHnWE8gjciwCXhSL\",\"4ZpaT4BHT9hAT8q6x\",\"Z85ajWfZ4jDPkbvR4\",\"5QN8R22z43SrwoHDz\",\"vw4Byxdm9XQwbDtGC\",\"Wi4H6ayKsNDWWQCG5\",\"BJp2WkwLWGHHB5oQW\",\"gbGzZz5Yq5hT357v8\",\"bNENiqqEDxM5a5JBf\",\"ruzwBPphPDRgLXdnP\",\"wrL4iX2CCSqDCCty3\"],\"quality\":[5,4,5,5,5,1,5,5,4,4,5,5,5,3,4,5,5,5,5,5,5,5,5,5,5,5,5,4,5,5,5,4,5,5,5,5,4,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":4.675,\"family\":[{\"_id\":\"vqwqCwfJ3r4zFvzPn\",\"language\":\"javascript\"},{\"_id\":\"ffeLkHfoGDbApgNSA\",\"language\":\"python3\"}]}}"]