a["{\"msg\":\"result\",\"id\":\"2318\",\"result\":{\"_id\":\"oQGhFdj2HHnFEjtAx\",\"author\":\"yanni\",\"authorId\":\"aCNWav8S8Try9RkC6\",\"code\":\"def slicer(string, slic):\\n\\t\",\"difficulty\":3.6956521739130435,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"MTPowtg2mgwzjewNr\",\"instructions\":\"In this challenge you are given a string and a slice made from that string. Make a function that returns an expression that can be used to make that slice. Your answer must contain only the minimum number of keystrokes needed to make the slice.\\n\\n### Examples\\n```\\nslicer(\\\"abcd\\\", \\\"b\\\") ➞ \\\"[1]\\\"\\n\\nslicer(\\\"abcdefg\\\", \\\"cb\\\") ➞ \\\"[2:0:-1]\\\"\\n\\nslicer(\\\"abcdefg\\\", \\\"be\\\") ➞ \\\"[1::3]\\\"\\n\\nslicer(\\\"abcdefgh\\\", \\\"bdf\\\") ➞ \\\"[1:6:2]\\\"\\n```\\n\\n### Notes\\n- Test cases are slices that can be made with the `[start:end:step]` type expression.\\n- The strings are composed of unique characters (no repeats).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(slicer(\\\"abc\\\", \\\"a\\\"),\\\"[0]\\\")\\nTest.assert_equals(slicer(\\\"abcdef\\\", \\\"abc\\\"),\\\"[:3]\\\")\\nTest.assert_equals(slicer(\\\"abcdefg\\\", \\\"def\\\"),\\\"[3:6]\\\")\\nTest.assert_equals(slicer(\\\"abcdefghi\\\", \\\"gf\\\"),\\\"[6:4:-1]\\\")\\nTest.assert_equals(slicer(\\\"abcdefg\\\", \\\"be\\\"),\\\"[1::3]\\\")\\nTest.assert_equals(slicer(\\\"abcdefg\\\", \\\"gda\\\"),\\\"[::-3]\\\")\\nTest.assert_equals(slicer(\\\"abc\\\", \\\"abc\\\"),\\\"[:]\\\")\\nTest.assert_equals(slicer(\\\"abc\\\", \\\"cba\\\"),\\\"[::-1]\\\")\\nTest.assert_equals(slicer(\\\"abcdefg\\\", \\\"gfedcb\\\"),\\\"[:0:-1]\\\")\\nTest.assert_equals(slicer(\\\"abcdefg\\\", \\\"fdb\\\"),\\\"[5::-2]\\\")\\nTest.assert_equals(slicer(\\\"abcdefg\\\", \\\"bdf\\\"),\\\"[1::2]\\\")\\nTest.assert_equals(slicer(\\\"abcdefg\\\", \\\"cdef\\\"),\\\"[2:6]\\\")\\nTest.assert_equals(slicer(\\\"abcdefg\\\", \\\"ag\\\"),\\\"[::6]\\\")\\nTest.assert_equals(slicer(\\\"abcdefg\\\", \\\"ga\\\"),\\\"[::-6]\\\")\\nTest.assert_equals(slicer(\\\"abcdefgh\\\", \\\"bdf\\\"),\\\"[1:6:2]\\\")\\nTest.assert_equals(slicer(\\\"abcdef\\\", \\\"ae\\\"),\\\"[::4]\\\")\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,3,4,5,2,5,5,5,3,4,4,3,5,5,4,2,2,4,5],\"rators\":[\"aCNWav8S8Try9RkC6\",\"8PwfYqoDQFThzNtvf\",\"vTfyrr4pGddp8rbXc\",\"aEm3Wvj2rFYRL8Lrb\",\"8GPnpgq26E9A8JMS8\",\"mDWNyaaQ9hvPCRzSd\",\"2innwjWqxJHo4eRGh\",\"W5TajitmCyxz87zAC\",\"SKeSSfqSmCk65vjYh\",\"jL4y5fTJAMBjhZmko\",\"8JyqsSbN2FJXPr3cw\",\"DNACg4rcgZsPtYGZ8\",\"iS5BrkGLzJyPK7nKt\",\"eHcgvkTGsH7ZziqBo\",\"8sNv5PTHa7XQ8bNqR\",\"yjtdwc2AC4jA2RWtn\",\"J3upzLHuEwXH7Z2hx\",\"gJYuGdkXEWWmGRLzu\"],\"total\":21,\"quality\":[]},\"flags\":0},\"summary\":\"In this challenge you are given a string and a slice made from that string. Make a function that returns an expression that can be used to make that slice. Your answer must contain only the minimum number of keystrokes needed to make the slice.\\n\\nExamples\\nslicer(\\\"abcd\\\", \\\"b\\\") ➞ \\\"[1]\\\"\\n\\nslicer(\\\"abcdefg\\\", \\\"cb\\\") ➞ \\\"[2:0:-1]\\\"\\n\\nslicer(\\\"abcdefg\\\", \\\"be\\\") ➞ \\\"[1::3]\\\"\\n\\nslic\",\"tags\":[\"language_fundamentals\",\"strings\"],\"timestamp\":{\"$date\":1594145649423},\"title\":\"Slicing Strings\",\"quality\":0,\"family\":[{\"_id\":\"oQGhFdj2HHnFEjtAx\",\"language\":\"python3\"}]}}"]