a["{\"msg\":\"result\",\"id\":\"1931\",\"result\":{\"_id\":\"4afgmFpLP6CpwtRMY\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"def sudoku_validator(x):\",\"difficulty\":2.6941176470588237,\"familyId\":\"xs3FoXXKyhgaJWpjL\",\"instructions\":\"Write a **sudoku validator**. This function should return `True` if the 2-D array represents a valid sudoku and `False` otherwise. To be a valid sudoku:\\n\\n1. Each row must have the digits from 1 to 9 exactly once.\\n2. Each column must have the digits from 1 to 9 exactly once.\\n3. Each 3x3 box must have the digits from 1 to 9 exactly once.\\n\\n### Examples\\n```\\nsudoku_validator([\\n  [ 1, 5, 2, 4, 8, 9, 3, 7, 6 ],\\n  [ 7, 3, 9, 2, 5, 6, 8, 4, 1 ],\\n  [ 4, 6, 8, 3, 7, 1, 2, 9, 5 ],\\n  [ 3, 8, 7, 1, 2, 4, 6, 5, 9 ],\\n  [ 5, 9, 1, 7, 6, 3, 4, 2, 8 ],\\n  [ 2, 4, 6, 8, 9, 5, 7, 1, 3 ],\\n  [ 9, 1, 4, 6, 3, 7, 5, 8, 2 ],\\n  [ 6, 2, 5, 9, 4, 8, 1, 3, 7 ],\\n  [ 8, 7, 3, 5, 1, 2, 9, 6, 4 ]\\n]) ➞ True\\n\\nsudoku_validator([\\n  [ 1, 1, 2, 4, 8, 9, 3, 7, 6 ],\\n  [ 7, 3, 9, 2, 5, 6, 8, 4, 1 ],\\n  [ 4, 6, 8, 3, 7, 1, 2, 9, 5 ],\\n  [ 3, 8, 7, 1, 2, 4, 6, 5, 9 ],\\n  [ 5, 9, 1, 7, 6, 3, 4, 2, 8 ],\\n  [ 2, 4, 6, 8, 9, 5, 7, 1, 3 ],\\n  [ 9, 1, 4, 6, 3, 7, 5, 8, 2 ],\\n  [ 6, 2, 5, 9, 4, 8, 1, 3, 7 ],\\n  [ 8, 7, 3, 5, 1, 2, 9, 6, 4 ]\\n]) ➞ False\\n```\\n\\n### Notes\\nN/A\",\"lab\":\"# Validate 3 x 3 Boxes\\nTest.assert_equals(sudoku_validator(\\n[ [ 1, 5, 2, 4, 8, 9, 3, 7, 6 ],\\n  [ 7, 3, 9, 2, 5, 6, 8, 4, 1 ],\\n  [ 4, 6, 5, 3, 7, 1, 2, 9, 8 ],\\n  [ 3, 8, 7, 1, 2, 4, 6, 5, 9 ],\\n  [ 8, 9, 1, 7, 6, 3, 4, 2, 5 ],\\n  [ 2, 4, 6, 5, 9, 8, 7, 1, 3 ],\\n  [ 9, 1, 4, 6, 3, 7, 5, 8, 2 ],\\n  [ 6, 2, 8, 9, 4, 5, 1, 3, 7 ],\\n  [ 5, 7, 3, 8, 1, 2, 9, 6, 4 ] ]), \\nFalse)\\n\\n### Others\\nTest.assert_equals(sudoku_validator(\\n[ [ 1, 5, 2, 4, 8, 9, 3, 7, 6 ],\\n  [ 7, 3, 9, 2, 5, 6, 8, 4, 1 ],\\n  [ 4, 6, 8, 3, 7, 1, 2, 9, 5 ],\\n  [ 3, 8, 7, 1, 2, 4, 6, 5, 9 ],\\n  [ 5, 9, 1, 7, 6, 3, 4, 2, 8 ],\\n  [ 2, 4, 6, 8, 9, 5, 7, 1, 3 ],\\n  [ 9, 1, 4, 6, 3, 7, 5, 8, 2 ],\\n  [ 6, 2, 5, 9, 4, 8, 1, 3, 7 ],\\n  [ 8, 7, 3, 5, 1, 2, 9, 6, 4 ] ]), \\nTrue)\\n\\nTest.assert_equals(sudoku_validator(\\n[ [ 8, 2, 7, 1, 5, 4, 3, 9, 6 ],\\n  [ 9, 6, 5, 3, 2, 7, 1, 4, 8 ],\\n  [ 3, 4, 1, 6, 8, 9, 7, 5, 2 ],\\n  [ 5, 9, 3, 4, 6, 8, 2, 7, 1 ],\\n  [ 4, 7, 2, 5, 1, 3, 6, 8, 9 ],\\n  [ 6, 1, 8, 9, 7, 2, 4, 3, 5 ],\\n  [ 7, 8, 6, 2, 3, 5, 9, 1, 4 ],\\n  [ 1, 5, 4, 7, 9, 6, 8, 2, 3 ],\\n  [ 2, 3, 9, 8, 4, 1, 5, 6, 7 ] ]), \\nTrue)\\n\\nTest.assert_equals(sudoku_validator(\\n[ [ 8, 2, 7, 1, 5, 4, 3, 9, 6 ],\\n  [ 9, 6, 5, 3, 2, 7, 1, 4, 8 ],\\n  [ 3, 4, 1, 6, 8, 9, 7, 5, 2 ],\\n  [ 5, 9, 3, 4, 6, 8, 2, 7, 1 ],\\n  [ 4, 7, 2, 5, 1, 5, 6, 8, 9 ],\\n  [ 6, 1, 8, 9, 7, 2, 4, 3, 5 ],\\n  [ 7, 8, 6, 2, 3, 5, 9, 1, 4 ],\\n  [ 1, 5, 4, 7, 9, 6, 8, 2, 3 ],\\n  [ 2, 3, 9, 8, 4, 1, 5, 6, 7 ] ]), \\nFalse)\\n\\nTest.assert_equals(sudoku_validator(\\n[ [ 1, 5, 2, 4, 8, 9, 3, 7, 6 ],\\n  [ 3, 3, 9, 2, 5, 6, 8, 4, 1 ],\\n  [ 4, 6, 8, 3, 7, 1, 2, 9, 5 ],\\n  [ 3, 8, 7, 1, 2, 4, 6, 5, 9 ],\\n  [ 5, 9, 1, 7, 6, 3, 4, 2, 8 ],\\n  [ 2, 4, 6, 8, 9, 5, 7, 1, 3 ],\\n  [ 9, 1, 4, 6, 3, 7, 5, 8, 2 ],\\n  [ 6, 2, 5, 9, 4, 8, 1, 3, 7 ],\\n  [ 8, 7, 3, 5, 1, 2, 9, 6, 4 ] ]), \\nFalse)\\n\\n## Additional Tests \\nTest.assert_equals(sudoku_validator(\\n[ [ 5, 3, 4, 6, 7, 8, 9, 1, 2 ],\\n  [ 6, 7, 2, 1, 9, 5, 3, 4, 8 ],\\n  [ 1, 9, 8, 3, 4, 2, 5, 6, 7 ],\\n  [ 8, 5, 9, 7, 6, 1, 4, 2, 3 ],\\n  [ 4, 2, 6, 8, 5, 3, 7, 9, 1 ],\\n  [ 7, 1, 3, 9, 2, 4, 8, 5, 6 ],\\n  [ 9, 6, 1, 5, 3, 7, 2, 8, 4 ],\\n  [ 2, 8, 7, 4, 1, 9, 6, 3, 5 ],\\n  [ 3, 4, 5, 2, 8, 6, 1, 7, 9 ] ]), \\nTrue)\\n\\nTest.assert_equals(sudoku_validator(\\n[ [ 1, 5, 2, 4, 6, 9, 3, 7, 8 ],\\n  [ 7, 8, 9, 2, 1, 3, 4, 5, 6 ],\\n  [ 4, 3, 6, 5, 8, 7, 2, 9, 1 ],\\n  [ 6, 1, 3, 8, 7, 2, 5, 4, 9 ],\\n  [ 9, 7, 4, 1, 5, 6, 8, 2, 3 ],\\n  [ 8, 2, 5, 9, 3, 4, 1, 6, 7 ],\\n  [ 5, 6, 7, 3, 4, 8, 9, 1, 2 ],\\n  [ 2, 4, 8, 6, 9, 1, 7, 3, 5 ],\\n  [ 3, 9, 1, 7, 2, 5, 6, 8, 4 ] ]), \\nTrue)\\n\\nTest.assert_equals(sudoku_validator(\\n[ [ 2, 5, 1, 4, 6, 9, 3, 7, 8 ],\\n  [ 7, 8, 9, 2, 1, 3, 4, 5, 6 ],\\n  [ 4, 3, 6, 5, 8, 7, 2, 9, 1 ],\\n  [ 6, 1, 3, 8, 7, 2, 5, 4, 9 ],\\n  [ 9, 7, 4, 1, 5, 6, 8, 2, 3 ],\\n  [ 8, 2, 5, 9, 3, 4, 1, 6, 7 ],\\n  [ 5, 6, 7, 3, 4, 8, 9, 1, 2 ],\\n  [ 2, 4, 8, 6, 9, 1, 7, 3, 5 ],\\n  [ 3, 9, 1, 7, 2, 5, 6, 8, 4 ] ]), \\nFalse)\\n\\nTest.assert_equals(sudoku_validator(\\n[ [ 5, 3, 4, 6, 7, 8, 9, 1, 2 ],\\n  [ 6, 7, 2, 1, 9, 5, 3, 4, 8 ],\\n  [ 1, 9, 8, 3, 4, 2, 5, 6, 7 ],\\n  [ 8, 5, 9, 7, 6, 1, 4, 2, 3 ],\\n  [ 4, 2, 6, 8, 5, 3, 7, 9, 1 ],\\n  [ 7, 1, 3, 2, 9, 4, 8, 5, 6 ],\\n  [ 9, 6, 1, 5, 3, 7, 2, 8, 4 ],\\n  [ 2, 8, 7, 4, 1, 9, 6, 3, 5 ],\\n  [ 3, 4, 5, 2, 8, 6, 1, 7, 9 ] ]), \\nFalse)\\n\\nTest.assert_equals(sudoku_validator(\\n[ [ 1, 3, 4, 6, 7, 8, 9, 1, 2 ],\\n  [ 6, 7, 2, 1, 9, 5, 3, 4, 8 ],\\n  [ 5, 9, 8, 3, 4, 2, 5, 6, 7 ],\\n  [ 8, 5, 9, 7, 6, 1, 4, 2, 3 ],\\n  [ 4, 2, 6, 8, 5, 3, 7, 9, 1 ],\\n  [ 7, 1, 3, 9, 2, 4, 8, 5, 6 ],\\n  [ 9, 6, 1, 5, 3, 7, 2, 8, 4 ],\\n  [ 2, 8, 7, 4, 1, 9, 6, 3, 5 ],\\n  [ 3, 4, 5, 2, 8, 6, 1, 7, 9 ] ]), \\nFalse)\",\"language\":\"python3\",\"summary\":\"Write a sudoku validator. This function should return True if the 2-D array represents a valid sudoku and False otherwise. To be a valid sudoku:\\n\\nEach row must have the digits from 1 to 9 exactly once.\\nEach column must have the digits from 1 to 9 exactly once.\\nEach 3x3 box must have the digits from 1 to 9 exactly once.\\n\\nExamples\\nsudoku_validator([\\n  [ 1, 5, 2,\",\"tags\":[\"higher_order_functions\",\"validation\",\"functional_programming\"],\"timestamp\":{\"$date\":1554145770599},\"title\":\"Sudoku Validation\",\"stats\":{\"completed\":{\"total\":91,\"ratings\":[3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,2,4,2,2,4,4,2,4,3,4,4,3,4,4,3,2,2,2,3,4,3,2,2,2,2,4,4,3,3,1,3,3,3,4,4,4,2,3,0,4,2,3,3,0,2,3,2,2,3,3,3,4,3,3,4,4,1,1,2,4,2,0,2,4,0,3,2,0,2,2],\"rators\":[\"mNMQvcxKSSvqqMYCH\",\"GPkiByKiDZA8gxhKw\",\"8JyqsSbN2FJXPr3cw\",\"5uM9326sXAWGh27wr\",\"M8jrv2FfpMQp9Qzpx\",\"Jqk2uJZZxEv5wZFze\",\"tAF9Gf6PiGogbZuWs\",\"G3dYzqzuo6n9KYGg6\",\"gb9rvGus2Jv7bjZSs\",\"3WAiFHE4pGfShhXCz\",\"MXjxGML2X75x64vJo\",\"AYaEkTWLMmfzpwejr\",\"KruzMuPcbuBw8E2CR\",\"TzKWLbEFMHuwuEmAt\",\"PFjMZGHNAPTkgd7tq\",\"pMuvoqcmxHbuRSfb9\",\"LedHyumvECjurao5L\",\"CRBuiWyb9B8c5XW7w\",\"fWegdXx4hQmpR5M85\",\"aiewS4ttQkzMquNrY\",\"s5M5RvgqR9BhB9JoC\",\"hrzGaJc9KZqgjAvew\",\"HqmxnQJM66Y57twhn\",\"zEwSoioYyEynzxLij\",\"ekvdWQoiFkX5cQbk9\",\"vgTvCCxgvbCTDvaRT\",\"EQbnbkkPYtGxiviTp\",\"C4QntmkYtB89GNtpd\",\"8PwfYqoDQFThzNtvf\",\"KkQLhG5bps9BKQdx2\",\"aEm3Wvj2rFYRL8Lrb\",\"ZzYjack6nKZZoq3W3\",\"tZnAkGkxNtBoS49R2\",\"AasGs8AeX9Lcb9xJn\",\"ywk3XGvcmpTgRxwZa\",\"YRstQuthRkFeBiXug\",\"PytNZK9mNiRiZxPrm\",\"fznzd3qnvtbFkkizz\",\"7QFKJDLTjmknyQjKQ\",\"CiSnqdZFjqCNFxBKS\",\"ZNnsMeNkdDhHjSrZb\",\"v9KtC8YLbMWmXiW2H\",\"mDWNyaaQ9hvPCRzSd\",\"Ecg4m7srYGgZsb4Ck\",\"gJYuGdkXEWWmGRLzu\",\"NchnDcEmsLTeFZ4FH\",\"RnTBbuFCrJWW6Ayvj\",\"W5TajitmCyxz87zAC\",\"xn7uGNKeAwPEkP9oA\",\"a5Nd5R69uASQRLkq9\",\"KZ2xddpM2f9JRaryB\",\"x4dfavjLEcrvAF3QQ\",\"n2e74kbZHY3u7Cgej\",\"SGhPxX5bHGL8zZqtt\",\"bmthyKcDF922zNqxK\",\"ygDJ7HEzRoJZyPEF4\",\"yjtdwc2AC4jA2RWtn\",\"K3RacTvkWHLfzKF8i\",\"5hhuYLyGkeqCvaSrf\",\"hkiz2Nv927cYGrA86\",\"Wv2vJnEj8ywNmARoF\",\"hXoTNPPmJLzkZnkSX\",\"8sNv5PTHa7XQ8bNqR\",\"iS5BrkGLzJyPK7nKt\",\"eYfPWvZwnJQkHbSTK\",\"5NGxHLcQ8Af2RJ4TN\",\"p8qqFdJ3FSk5x9z3G\",\"J3upzLHuEwXH7Z2hx\",\"iojEnnY9FsMfYzp6f\",\"5rX3qPFdvRQ9G7xZQ\",\"eHcgvkTGsH7ZziqBo\",\"yr822PZmmiDDenxpB\",\"BrTDhPJcACL2bsrpJ\",\"2PufnQcsHsfymufX3\",\"53uJADeqd5ys7ZAdM\",\"T6iBEE2jp7f7iEF2P\",\"gXTAie79kiw28tx5u\",\"DPi9QGLctq2y76KuE\",\"gKnWjDjwrJh7MK2df\",\"okCRdHPFDYX4PGtwL\",\"GTKsdeEihE636Le9i\",\"pMxDFFGrSfHCQAW2k\",\"oBcs8GLX2ZFLXQy8y\",\"n2qKKxomPnb4zez5M\"],\"quality\":[5,4,5,4,5,5,5,5,5,5,5]},\"tests\":{\"score\":0,\"rators\":[\"mNMQvcxKSSvqqMYCH\"]},\"instructions\":{\"score\":0,\"rators\":[\"mNMQvcxKSSvqqMYCH\"]},\"flags\":0},\"editorId\":\"mNMQvcxKSSvqqMYCH\",\"isHidden\":false,\"quality\":4.818181818181818,\"family\":[{\"_id\":\"pn98BSiyPAqyi2d5W\",\"language\":\"cpp\"},{\"_id\":\"rGTJckjQsBDq2M8WL\",\"language\":\"javascript\"},{\"_id\":\"4afgmFpLP6CpwtRMY\",\"language\":\"python3\"},{\"_id\":\"4zbniwkqGsisHFLnq\",\"language\":\"ruby\"},{\"_id\":\"8HvxzPPudwZfGnJux\",\"language\":\"swift\"}]}}"]