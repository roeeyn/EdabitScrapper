a["{\"msg\":\"result\",\"id\":\"2400\",\"result\":{\"_id\":\"hPtHit4fyRJffu5nw\",\"author\":\"Mubashir Hassan \",\"authorId\":\"T6iBEE2jp7f7iEF2P\",\"code\":\"def ragbaby_cipher(message, key):\\n\\t\",\"difficulty\":4,\"familyId\":\"hXfwKsHwpD9z6rHkc\",\"instructions\":\"In **Ragbaby Cipher**, encoding is done by a string of keys and their position in the plaintext word of a message.\\n\\nCreate a function that takes two arguments, `key` and `message`, and returns the **encoded message**.\\n\\nThere are some variations on the rules of encipherment. One version of the cipher rules are outlined below:\\n\\n```\\nmessage = \\\"This is an example.\\\"\\nkey = \\\"cipher\\\"\\n\\nragbaby_cipher(message, key) ➞ \\\"Urew pu bq rzfsbtj.\\\"\\n```\\n\\nStep 1: **Remove duplicate alphabets** of the key. **Rearrange alphabets** from A-Z, such that the keyword appears first, followed by the rest of the alphabets in the usual order.\\n\\n```\\nc i p h e r a b d f g j k l m n o q s t u v w x y z\\n```\\n\\nStep 2: Word-by-word, **assign numbers** to the letters of the given message:\\n\\n```\\nT h i s   i s   a n   e x a m p l e .\\n1 2 3 4   1 2   1 2   1 2 3 4 5 6 7\\n```\\n\\nStep 3: **Replace each alphabet** of the word with the letter in the keyed alphabet the corresponding number of places to the right of it (wrapping if necessary). Keep all characters other than alphabets in the same order and without any change.\\n\\n```\\neMessage = \\\"Urew pu bq rzfsbtj.\\\"\\n# 'u' is 1 place right to 't'\\n# 'r' is 2 places right to 'h'\\n# 'e' is 3 places right to 'i' and so on.\\n# keep the '.' in the same position.\\n```\\n\\nSee the below examples for a better understanding:\\n\\n### Examples\\n```\\nragbaby_cipher(\\\"This is an example.\\\", \\\"cipher\\\") ➞ \\\"Urew pu bq rzfsbtj.\\\"\\n\\nragbaby_cipher(\\\"mubashir\\\", \\\"edabit\\\") ➞ \\\"nwccyoke\\\"\\n\\nragbaby_cipher(\\\"mattttt\\\", \\\"eedddabit\\\") ➞ \\\"nighjkl\\\"\\n```\\n\\n### Notes\\n- Keys will have lowercase letters only but encoded messages should keep the order of uppercase and lowercase as the original message.\\n- The assigning of numbers to letters resets with every non-letter character.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(ragbaby_cipher(\\\"l-o-v-e\\\",\\\"googlehele\\\"), \\\"e-l-w-h\\\")\\nTest.assert_equals(ragbaby_cipher(\\\"mubashir\\\",\\\"edabit\\\"), \\\"nwccyoke\\\")\\nTest.assert_equals(ragbaby_cipher(\\\"mattttt\\\",\\\"eedddabit\\\"), \\\"nighjkl\\\")\\nTest.assert_equals(ragbaby_cipher(\\\"My name is Mubashir and I am a stupid Engineer\\\",\\\"nottrue\\\"), \\\"Pn ocsd jw Paffzpsg bth J bq b vubwpk Atjmeghg\\\")\\nTest.assert_equals(ragbaby_cipher(\\\"I wish I could tell her before she went away\\\",\\\"whocares\\\"), \\\"J hkfr J aayqk ubpq obb dbjefi bcd hbty roso\\\")\\nTest.assert_equals(ragbaby_cipher(\\\"m.u^b#a@s!h4ir\\\",\\\"helen\\\"), \\\"o.v^c#b@t!e4jt\\\")\\nTest.assert_equals(ragbaby_cipher(\\\"cipher\\\",\\\"cipher\\\"), \\\"ihrbfj\\\")\\nTest.assert_equals(ragbaby_cipher(\\\"$@pakistan..\\\",\\\"airforce\\\"), \\\"$@qrncxzbx..\\\")\\nTest.assert_equals(ragbaby_cipher(\\\"cipher\\\",\\\"cccciiiiippphheeeeerrrrr\\\"), \\\"ihrbfj\\\" )\\nTest.assert_equals(ragbaby_cipher(\\\"This is an example.\\\",\\\"cipher\\\"), \\\"Urew pu bq rzfsbtj.\\\" )\\nTest.assert_equals(ragbaby_cipher(\\\"This.tHis.thIs.thiS...\\\",\\\"cipher\\\"), \\\"Urew.uRew.urEw.ureW...\\\" )\",\"language\":\"python3\",\"quality\":0,\"summary\":\"In Ragbaby Cipher, encoding is done by a string of keys and their position in the plaintext word of a message.\\n\\nCreate a function that takes two arguments, key and message, and returns the encoded message.\\n\\nThere are some variations on the rules of encipherment. One version of the cipher rules are outlined below:\\n\\nmessage = \\\"This is an example.\\\"\\nkey = \\\"cipher\\\"\",\"tags\":[\"cryptography\",\"algorithms\",\"strings\",\"logic\"],\"timestamp\":{\"$date\":1609058614900},\"title\":\"Ragbaby Cipher\",\"stats\":{\"completed\":{\"total\":15,\"ratings\":[5,5,5,5,5,1,5,5,5,5,1,3,4,1,5,5,3,3,5],\"quality\":[],\"rators\":[\"T6iBEE2jp7f7iEF2P\",\"8PwfYqoDQFThzNtvf\",\"iS5BrkGLzJyPK7nKt\",\"s5M5RvgqR9BhB9JoC\",\"XNmN6ztj36a7eChbD\",\"yjtdwc2AC4jA2RWtn\",\"yr822PZmmiDDenxpB\",\"J3upzLHuEwXH7Z2hx\",\"8sNv5PTHa7XQ8bNqR\",\"gJYuGdkXEWWmGRLzu\",\"hEpaAYfTpAp7xunYa\",\"8nE8QHnFYsHCFebte\",\"yTtSCvGPyYna6JuRC\",\"DPi9QGLctq2y76KuE\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"Ze9hjQQ6rjJbGoHmC\",\"language\":\"cpp\"},{\"_id\":\"uYfDwainfQ8FNRZLe\",\"language\":\"javascript\"},{\"_id\":\"hPtHit4fyRJffu5nw\",\"language\":\"python3\"},{\"_id\":\"WPt3cupwyosnCqYwD\",\"language\":\"ruby\"}]}}"]