a["{\"msg\":\"result\",\"id\":\"1155\",\"result\":{\"_id\":\"pyDemMDspSSFdWsh4\",\"author\":\"Mubashir Hassan \",\"authorId\":\"T6iBEE2jp7f7iEF2P\",\"code\":\"def digital_decipher(eMessage, key):\",\"difficulty\":1.6103896103896105,\"familyId\":\"ez5yMdRnryx4K4ufd\",\"instructions\":\"In **Digital Decipher**, decoding is done by the simple subtraction of numbers in the key and the corresponding characters on a given list. You may want to solve [this challenge](https://edabit.com/challenge/WFmZesxp2GXQcT8PE) before proceeding further. \\n\\nCreate a function that takes two arguments; a positive integer and a list of integers and returns a decoded message as string.\\n\\nAssign a unique number to each letter of the alphabet.\\n\\n```\\n a  b  c  d  e  f  g  h  i  j  k  l  m\\n 1  2  3  4  5  6  7  8  9  10 11 12 13\\n n  o  p  q  r  s  t  u  v  w  x  y  z\\n 14 15 16 17 18 19 20 21 22 23 24 25 26\\n```\\n\\nThere are some variations on the rules of encipherment. One version of the cipher rules are outlined below:\\n\\n```\\neMessage = [20, 12, 18, 30, 21]\\nkey = 1939\\n\\ndigital_decipher(eMessage, key) ➞ \\\"scout\\\"\\n```\\n\\nSubtract each key digit from eMessage consecutive digits:\\n\\n```\\n  20 12 18 30 21\\n-  1  9  3  9  1\\n ---------------\\n  19  3 15 21 20\\n```\\n\\nWrite the corresponding number against each character:\\n\\n```\\n s  c  o  u  t\\n19  3 15 21 20\\n```\\nSee the below example for a better understanding:\\n\\n```\\neMessage = [14, 10, 22, 29, 6, 27, 19, 18, 6, 12, 8]\\nkey = 1939\\n\\ndigital_decipher(eMessage, key) ➞ \\\"masterpiece\\\"\\n\\n  14 10 22 29  6 27 19 18  6  12 8\\n-  1  9  3  9  1  9  3  9  1  9  3\\n  --------------------------------\\n  13  1 19 20  5 18 16  9  5  3  5\\n   m  a  s  t  e  r  p  i  e  c  e\\n```\\n\\n### Examples\\n```\\ndigital_decipher([20, 12, 18, 30, 21], 1939) ➞ \\\"scout\\\"\\n\\ndigital_decipher([14, 30, 11, 1, 20, 17, 18, 18], 1990) ➞ \\\"mubashir\\\"\\n\\ndigital_decipher([6, 4, 1, 3, 9, 20], 100) ➞ \\\"edabit\\\"\\n```\\n\\n### Notes\\nN/A\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(digital_decipher([20, 12, 18, 30, 21], 1939), \\\"scout\\\")\\nTest.assert_equals(digital_decipher([14, 10, 22, 29, 6, 27, 19, 18, 6, 12, 8], 1939), \\\"masterpiece\\\")\\nTest.assert_equals(digital_decipher([15, 17, 14, 17, 19, 7, 21, 7, 2, 20, 20], 12),\\\"nomoretears\\\" )\\nTest.assert_equals(digital_decipher([14, 30, 11, 1, 20, 17, 18, 18], 1990), \\\"mubashir\\\")\\nTest.assert_equals(digital_decipher([17, 10, 15, 16, 20, 29, 5, 21], 1947), \\\"pakistan\\\")\\nTest.assert_equals(digital_decipher([17,10, 17, 14, 20, 29, 7, 19, 2, 18, 24, 11, 16, 27, 9, 10], 1965), \\\"pakistanairforce\\\")\\nTest.assert_equals(digital_decipher([6, 4, 1, 3, 9, 20], 100), \\\"edabit\\\")\\n\\n# Mubashir\",\"language\":\"python3\",\"quality\":4.592592592592593,\"summary\":\"In Digital Decipher, decoding is done by the simple subtraction of numbers in the key and the corresponding characters on a given list. You may want to solve this challenge before proceeding further.\\n\\nCreate a function that takes two arguments; a positive integer and a list of integers and returns a decoded message as string.\\n\\nAssign a unique number to each le\",\"tags\":[\"cryptography\",\"algorithms\",\"logic\"],\"timestamp\":{\"$date\":1608108176047},\"title\":\"Digital Decipher\",\"stats\":{\"completed\":{\"total\":102,\"ratings\":[0,0,0,0,0,2,2,2,2,2,2,1,2,1,0,2,2,1,2,0,1,3,3,3,0,2,1,2,0,0,2,2,2,2,2,3,2,0,0,2,2,2,2,2,1,2,2,5,2,2,1,3,1,2,3,1,2,0,1,2,0,2,2,2,2,2,2,1,2,2,3,3,2,1,2,2,1],\"quality\":[4,5,3,5,5,5,5,5,5,5,4,5,4,1,5,5,5,5,4,5,5,5,5,5,4,5,5],\"rators\":[\"q9FfWNiMDKRiaCJ5j\",\"7FFMrYBhmCQxzdGuW\",\"5S9nX4rKsnCcnv4Cz\",\"DEDniTrstQYGounXT\",\"XL2xgexMeHzoyyQ6i\",\"m7RyYGcMkBRtjHoda\",\"u5u2YpHXiNgzDNJdX\",\"5HCu9Ydd86QgHDRNP\",\"Nb6LYPoQP6KJZt8mz\",\"HqmxnQJM66Y57twhn\",\"fznzd3qnvtbFkkizz\",\"ssJsxRTuNNiXSrewx\",\"Jqk2uJZZxEv5wZFze\",\"oBcs8GLX2ZFLXQy8y\",\"J5Jb5bdBRtpTWDqqH\",\"iS5BrkGLzJyPK7nKt\",\"srJ34BaybkQh3qRkM\",\"mcxMB9wacA4tRkHkr\",\"YLFHcoEWk6PzJPsnZ\",\"axdSNLZpiCDF8RS6n\",\"Yp7uvStL97cC9fKkY\",\"KJCDwGkoXh8qtbbKr\",\"QRv96jmNaYsWkxQEG\",\"FEYpu9RWysAgW3XnP\",\"d8qtzoLB264iP8tdY\",\"AFJTgLaPrtbqSvh7b\",\"Ds7L5bksw2QRHjrKL\",\"fZfJQuz9uz8vsrAu5\",\"nFbmNzMQ38TncmfQX\",\"8PwfYqoDQFThzNtvf\",\"gXTAie79kiw28tx5u\",\"gJYuGdkXEWWmGRLzu\",\"p8qqFdJ3FSk5x9z3G\",\"7jL3ijPqP46GJ4cfJ\",\"s5M5RvgqR9BhB9JoC\",\"PXAcsKkssS2yLyDv2\",\"GGdmhAvxXhqhhibJN\",\"2QGRoQn2dRq3scu7k\",\"DPi9QGLctq2y76KuE\",\"MKT7khMBGXzA22ykf\",\"J3upzLHuEwXH7Z2hx\",\"BrTDhPJcACL2bsrpJ\",\"HF28xZKSLM9wEuqNg\",\"yod5YhKtPqw2GfG9B\",\"3nied3n8KG8RSNixH\",\"sHjfbGQGLHE6JR6qu\",\"cAP3n5NY64uoMwzRR\",\"buX4mCQhtXCfBjeno\",\"p7js9trz2zk2RorCR\",\"eYfPWvZwnJQkHbSTK\",\"wRttWTM59y8m5mx7x\",\"yjtdwc2AC4jA2RWtn\",\"97uLPLqYFb7mXXtn7\",\"KBxTPknCRmB2b5y3i\",\"c4Pxs9ZDkWKj7oRvY\",\"wjc4iejpErBhxWwHo\",\"J5T8gZqiZXFuFDTQ7\",\"YcCLwitFMAEJSnxAW\",\"zd9FLSzsGz3evKafy\",\"8JyqsSbN2FJXPr3cw\",\"cR3ibTMxLyEdDFCHY\",\"qAby4AWXmTNeusvg3\",\"iojEnnY9FsMfYzp6f\",\"AFfw7cGg83uYk2Miy\",\"o4ixjQGSaYqA2JoM4\",\"SGRb6X4NKevESNQcC\",\"Wpn95NqWxncQrwNgz\",\"gb9rvGus2Jv7bjZSs\",\"66a9xX73nmTEuKs9k\",\"AJexRBN9cYQmqvYu6\",\"LQxof8pGabGuWP7Gn\",\"yr822PZmmiDDenxpB\",\"9bQyb6rW7xfE4vgrR\",\"tAF9Gf6PiGogbZuWs\",\"AasGs8AeX9Lcb9xJn\",\"PC3pLs36zNzpRDSuE\",\"aEm3Wvj2rFYRL8Lrb\",\"9pzFiFK3ANLjQfnr2\",\"qD2LrwaDrSdiybLKY\",\"CHvzhtXnv8HTbPQ56\",\"8BFSTCnoe2QggN64c\",\"mvJBakQ35CWAnbbEZ\",\"qzXAMXsHZGT8o5hTA\",\"ZrwJ38Bb33PTfPzuk\",\"Afnps7TJQuS9sipMb\",\"XD5nmvKQchKezPXhy\",\"a2Kmh6ekWqQQooHiQ\",\"StNu7DPyTgEStZsMY\",\"2PufnQcsHsfymufX3\",\"dzS6WBTMHyFEag6Fp\",\"T6Rm8mREPMZSftzrC\",\"cTzRTGNAwDyiD2oAP\",\"fZaGAGEPmzDhJtPy3\",\"wSfNProqhBCAtGARD\",\"yAouD3PxzED8a4gap\",\"mxX4rH5ELYkdZ2Mbw\",\"4TmgHkn5vqyHK3sYC\",\"3w4GAEqkDeDBdgJ7B\",\"Wi4H6ayKsNDWWQCG5\"]},\"flags\":1},\"editorId\":\"T6iBEE2jp7f7iEF2P\",\"family\":[{\"_id\":\"jXXrasXD78TEzGGyr\",\"language\":\"cpp\"},{\"_id\":\"tfeccdFSN8Eh2NiCE\",\"language\":\"javascript\"},{\"_id\":\"pyDemMDspSSFdWsh4\",\"language\":\"python3\"},{\"_id\":\"dXimC9rjhxgFgxz4g\",\"language\":\"ruby\"}]}}"]