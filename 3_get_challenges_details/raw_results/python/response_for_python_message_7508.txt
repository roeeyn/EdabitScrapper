a["{\"msg\":\"result\",\"id\":\"2459\",\"result\":{\"_id\":\"n2pny2vEkp52jHMcn\",\"author\":\"Evgeny SH\",\"authorId\":\"8PwfYqoDQFThzNtvf\",\"code\":\"def odd_even_list(head):\\n\\t\",\"difficulty\":4.583333333333333,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"QyyYTDxyCuAMjH2iH\",\"instructions\":\"The function is given a linked list `node1->node2->node3->node4->node5->None`. Relink the original list such that first all odd nodes and then all even nodes follow each other preserving the original order of appearance. The changed list should be: `node1->node3->node5->node2->node4->None`. The Linked List Class is defined in the _Tests_ tab:\\n\\n```\\nclass ListNode:\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\n```\\n\\nThe class has `.val` field and reference for the next node `.next`. The function receives the reference to the list head, rearranges the internal links and returns the reference to the head.\\n\\n### Examples\\n```\\nlst = [12, 21]\\nll = ListNode(lst[0])\\nll.add_data(lst[1:])\\nodd_even_list(ll).get_data() ➞ [12, 21]\\n\\nlst = [8, 7, 6]\\nll = ListNode(lst[0])\\nll.add_data(lst[1:])\\nodd_even_list(ll).get_data() ➞ [8, 6, 7]\\n\\nlst = [1, 2, 3, 4, 5, 6]\\nll = ListNode(lst[0])\\nll.add_data(lst[1:])\\nodd_even_list(ll).get_data() ➞ [1, 3, 5, 2, 4, 6]\\n```\\n\\n### Notes\\nIt is preferable to relink the list in place, without making new nodes, although other less efficient solutions can also pass.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"from time import perf_counter\\nfrom random import randint\\n\\nclass ListNode:\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\n\\n    def add_data(self, lst):\\n        current = self\\n        while lst:\\n            current.next = ListNode(lst[0])\\n            current = current.next\\n            lst = lst[1:]\\n\\n    def get_data(self):\\n        if self is None:\\n            return []\\n        res = []\\n        current = self\\n        while current:\\n            res.append(current.val)\\n            current = current.next\\n        return res\\n\\ntic = perf_counter()\\n\\nlst = [12, 21]\\nll = ListNode(lst[0])\\nll.add_data(lst[1:])\\nTest.assert_equals(odd_even_list(ll).get_data(), [12, 21])\\n\\nlst = [8, 7, 6]\\nll = ListNode(lst[0])\\nll.add_data(lst[1:])\\nTest.assert_equals(odd_even_list(ll).get_data(), [8, 6, 7])\\n\\nlst = [1, 2, 3, 4, 5, 6]\\nll = ListNode(lst[0])\\nll.add_data(lst[1:])\\nTest.assert_equals(odd_even_list(ll).get_data(), [1, 3, 5, 2, 4, 6])\\n\\nt_function = 0\\nfor _ in range(100):\\n    lst = []\\n    odd_lst = []\\n    even_lst = []\\n    for _ in range(randint(0, 1000)):\\n        val = randint(-100, 100)\\n        lst.append(val)\\n        odd_lst.append(val)\\n        val = randint(-100, 100)\\n        lst.append(val)\\n        even_lst.append(val)\\n    if randint(0, 1):\\n        val = randint(-100, 100)\\n        lst.append(val)\\n        odd_lst.append(val)\\n    if lst:\\n        ll = ListNode(lst[0])\\n        if len(lst) > 1:\\n            ll.add_data(lst[1:])\\n    else:\\n        ll = None\\n    t_fun = perf_counter()\\n    \\\"\\\"\\\"function call\\\"\\\"\\\"\\n    actual = odd_even_list(ll)\\n    t_function += perf_counter() - t_fun\\n\\n    Test.assert_equals(actual.get_data() if actual else [], odd_lst + even_lst)\\n\\nprint('t_function = {:.3f}'.format(t_function))\\nprint('       t_total = {:.3f}'.format(perf_counter() - tic))\",\"language\":\"python3\",\"quality\":0,\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,5,5,3,5,5,4,3],\"quality\":[],\"rators\":[\"8PwfYqoDQFThzNtvf\",\"mDWNyaaQ9hvPCRzSd\",\"eMuCpJ2spXWkJjWNz\",\"iojEnnY9FsMfYzp6f\",\"iS5BrkGLzJyPK7nKt\",\"JKb5rhL6DKcCAypF9\",\"Gp6HexkcR4mHmReRB\"],\"total\":8},\"flags\":0},\"summary\":\"The function is given a linked list node1->node2->node3->node4->node5->None. Relink the original list such that first all odd nodes and then all even nodes follow each other preserving the original order of appearance. The changed list should be: node1->node3->node5->node2->node4->None. The Linked List Class is defined in the Tests tab:\\n\\nclass ListNode:\\n    de\",\"tags\":[\"algorithms\",\"classes\",\"control_flow\",\"data_structures\"],\"timestamp\":{\"$date\":1608557403483},\"title\":\"Regroup the Linked List\",\"family\":[{\"_id\":\"n2pny2vEkp52jHMcn\",\"language\":\"python3\"}]}}"]