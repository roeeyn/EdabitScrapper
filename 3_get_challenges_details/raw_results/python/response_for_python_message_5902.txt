a["{\"msg\":\"result\",\"id\":\"1663\",\"result\":{\"_id\":\"yi2RNQshfhnJvDMSW\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"def squish(lst, d):\\n\\t\",\"difficulty\":2.1358024691358026,\"familyId\":\"nRFBMSSpyEbzWuM9C\",\"instructions\":\"Write a function that squishes a list from the left or the right.\\n\\n### Examples\\n```\\nsquish([1, 2, 3, 4, 5], \\\"left\\\") \\n➞ [[1, 2, 3, 4, 5], [3, 3, 4, 5], [6, 4, 5], [10, 5], [15]]\\n\\nsquish([1, 2, 3, 4, 5], \\\"right\\\")\\n➞ [[1, 2, 3, 4, 5], [1, 2, 3, 9], [1, 2, 12], [1, 14], [15]]\\n\\nsquish([1, 0, 2, -3], \\\"left\\\")\\n➞ [[1, 0, 2, -3], [1, 2, -3], [3, -3], [0]]\\n\\nsquish([1, 0, 2, -3], \\\"right\\\")\\n➞ [[1, 0, 2, -3], [1, 0, -1], [1, -1], [0]]\\n```\\n\\n### Notes\\n- Squishing from the left is to successively sum the first two elements of a list (shortening the list in the process).\\n- Squishing from the right is to successively sum the last two elements of a list.\\n- Include the original list as the first element in either squish.\\n- Return an empty list if the input is an empty list.\",\"lab\":\"Test.assert_equals(squish([1, 2, 3, 4, 5], \\\"left\\\"), [[1, 2, 3, 4, 5], [3, 3, 4, 5], [6, 4, 5], [10, 5], [15]])\\nTest.assert_equals(squish([1, 0, 2, -3], \\\"left\\\"), [[1, 0, 2, -3], [1, 2, -3], [3, -3], [0]])\\nTest.assert_equals(squish([4, 9, -3, 2, 5], \\\"left\\\"), [[4, 9, -3, 2, 5], [13, -3, 2, 5], [10, 2, 5], [12, 5], [17]])\\nTest.assert_equals(squish([8, -7, 6, 1, 0, 2], \\\"left\\\"), [[8, -7, 6, 1, 0, 2], [1, 6, 1, 0, 2], [7, 1, 0, 2], [8, 0, 2], [8, 2], [10]])\\nTest.assert_equals(squish([8, 7], \\\"left\\\"), [[8, 7], [15]])\\nTest.assert_equals(squish([8], \\\"left\\\"), [[8]])\\nTest.assert_equals(squish([], \\\"left\\\"), [])\\n\\nTest.assert_equals(squish([1, 2, 3, 4, 5], \\\"right\\\"), [[1, 2, 3, 4, 5], [1, 2, 3, 9], [1, 2, 12], [1, 14], [15]])\\nTest.assert_equals(squish([1, 0, 2, -3], \\\"right\\\"), [[1, 0, 2, -3], [1, 0, -1], [1, -1], [0]])\\nTest.assert_equals(squish([4, 9, -3, 2, 5], \\\"right\\\"), [[4, 9, -3, 2, 5], [4, 9, -3, 7], [4, 9, 4], [4, 13], [17]])\\nTest.assert_equals(squish([8, -7, 6, 1, 0, 2], \\\"right\\\"), [[8, -7, 6, 1, 0, 2], [8, -7, 6, 1, 2], [8, -7, 6, 3], [8, -7, 9], [8, 2], [10]])\\nTest.assert_equals(squish([8, 7], \\\"right\\\"), [[8, 7], [15]])\\nTest.assert_equals(squish([8], \\\"right\\\"), [[8]])\\nTest.assert_equals(squish([], \\\"right\\\"), [])\",\"language\":\"python3\",\"summary\":\"Write a function that squishes a list from the left or the right.\\n\\nExamples\\nsquish([1, 2, 3, 4, 5], \\\"left\\\")\\n➞ [[1, 2, 3, 4, 5], [3, 3, 4, 5], [6, 4, 5], [10, 5], [15]]\\n\\nsquish([1, 2, 3, 4, 5], \\\"right\\\")\\n➞ [[1, 2, 3, 4, 5], [1, 2, 3, 9], [1, 2, 12], [1, 14], [15]]\\n\\nsquish([1, 0, 2, -3], \\\"left\\\")\\n➞ [[1, 0, 2, -3], [1, 2, -3], [3, -3], [0]]\\n\\nsquish([1, 0, 2, -3], \\\"\",\"tags\":[\"arrays\",\"higher_order_functions\"],\"timestamp\":{\"$date\":1555108010836},\"title\":\"Squishing a List\",\"stats\":{\"completed\":{\"total\":87,\"ratings\":[2,2,2,2,2,2,2,2,2,2,3,3,3,2,2,2,2,0,2,3,3,3,2,2,1,2,1,3,2,3,2,4,3,0,3,2,2,2,3,2,2,2,2,3,3,3,2,3,2,1,3,2,4,3,3,0,0,2,3,3,1,3,3,3,3,2,2,2,4,3,0,0,0,2,2,2,3,2,2,0,1],\"rators\":[\"mNMQvcxKSSvqqMYCH\",\"yZvzB3qFb8pkHy4dg\",\"8JyqsSbN2FJXPr3cw\",\"gb9rvGus2Jv7bjZSs\",\"tAF9Gf6PiGogbZuWs\",\"T3ZAuoMrJjvZwN55B\",\"ab7BsQuhDo3QgE6bh\",\"C9LKGu2g5hSijvDzA\",\"6u7yc9m6HuHGbHzph\",\"aXCm9vWqKwL9XFYoj\",\"jYJ26SiLKBu5GRumq\",\"AF6LgdKhEdzwgRJom\",\"kQH5b8MXJunh84Czq\",\"jHrtWDGBhkbuWa7fG\",\"hsrNYf3WbexXJKhCq\",\"AYaEkTWLMmfzpwejr\",\"cR3ibTMxLyEdDFCHY\",\"gMJhLdyw3tH7L96X2\",\"Nj6FwgBtAXsaQwsM2\",\"Jg8ZSRXe3NoDMCqGu\",\"N2wnZXkhDH86mgjQ8\",\"yr822PZmmiDDenxpB\",\"PuJDHtAaX6vXeJJTC\",\"HqmxnQJM66Y57twhn\",\"otXtuQygbcYATMZoP\",\"Qn2cXjNudoyxw5FnA\",\"2fxapKr8XGdNeaKi2\",\"yoYQqaY6GszuTkNSs\",\"Jqk2uJZZxEv5wZFze\",\"6ShafRStcvew4GfCh\",\"2innwjWqxJHo4eRGh\",\"PXAcsKkssS2yLyDv2\",\"C4QntmkYtB89GNtpd\",\"AasGs8AeX9Lcb9xJn\",\"4CFzv558qbGcpQwc4\",\"8PwfYqoDQFThzNtvf\",\"PytNZK9mNiRiZxPrm\",\"s5M5RvgqR9BhB9JoC\",\"Nua6T3dBurBy3Qfg9\",\"7djAghy9fBhtLnKw3\",\"aEm3Wvj2rFYRL8Lrb\",\"mDWNyaaQ9hvPCRzSd\",\"ZNnsMeNkdDhHjSrZb\",\"kYWb8BwpKwunQkxeX\",\"55RQznnuTGpsj3EXd\",\"gJYuGdkXEWWmGRLzu\",\"v9KtC8YLbMWmXiW2H\",\"Ecg4m7srYGgZsb4Ck\",\"HF28xZKSLM9wEuqNg\",\"iojEnnY9FsMfYzp6f\",\"n2BRY9X8899dcG8Bw\",\"yjtdwc2AC4jA2RWtn\",\"DEDniTrstQYGounXT\",\"KZ2xddpM2f9JRaryB\",\"qD2LrwaDrSdiybLKY\",\"xn7uGNKeAwPEkP9oA\",\"J3upzLHuEwXH7Z2hx\",\"DPi9QGLctq2y76KuE\",\"p8qqFdJ3FSk5x9z3G\",\"Yp7uvStL97cC9fKkY\",\"gXTAie79kiw28tx5u\",\"qAby4AWXmTNeusvg3\",\"QRv96jmNaYsWkxQEG\",\"RTDx9axf52kxhFjwZ\",\"PWgzeK859suojbrRx\",\"KJCDwGkoXh8qtbbKr\",\"cAP3n5NY64uoMwzRR\",\"oBcs8GLX2ZFLXQy8y\",\"RSDaEWKZnWJbCEjJy\",\"MpfytGFYF77emJ3cT\",\"T6iBEE2jp7f7iEF2P\",\"GGdmhAvxXhqhhibJN\",\"gKnWjDjwrJh7MK2df\",\"yod5YhKtPqw2GfG9B\",\"4Lwjr34ypKNQNQCar\",\"rhS8qXRjZcpDXkwnE\",\"2PufnQcsHsfymufX3\",\"aiaNmS8QpcWS3DW3q\",\"nkH3HfJXLMNcBMM79\",\"d8qtzoLB264iP8tdY\",\"8sNv5PTHa7XQ8bNqR\"],\"quality\":[5,5,3,5,5,4,5,5,5]},\"tests\":{\"score\":0,\"rators\":[\"mNMQvcxKSSvqqMYCH\"]},\"instructions\":{\"score\":0,\"rators\":[\"mNMQvcxKSSvqqMYCH\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.666666666666667,\"family\":[{\"_id\":\"8p7apuCwgSzWkaTC8\",\"language\":\"javascript\"},{\"_id\":\"yi2RNQshfhnJvDMSW\",\"language\":\"python3\"},{\"_id\":\"3wPxKJ2MaGRPc5uKd\",\"language\":\"ruby\"}]}}"]