a["{\"msg\":\"result\",\"id\":\"1203\",\"result\":{\"_id\":\"6rztMMwkt6ijzqcF6\",\"author\":\"Luis Pereira\",\"authorId\":\"aEm3Wvj2rFYRL8Lrb\",\"code\":\"def is_repeated(strn):\\n\\t\",\"difficulty\":1.6734693877551021,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"gtyrJQgtqnxwfS87N\",\"instructions\":\"This challenge concerns strings such as:\\n\\n```\\n\\\"repeatedrepeatedrepeated\\\"\\n```\\n\\n... that are obtained by repeating a smaller string, which in this case is the string `\\\"repeated\\\"`.\\n\\nOn a related note, since the string above is made of 3 repetitions, one way to produce this string is via the code `3 * \\\"repeated\\\"`.\\n\\nWrite a function that, given a string, either:\\n- Returns `False` if the string isn't made by repeating a smaller string or ...\\n- Returns **the number of repetitions** if the string repeats a smaller string.\\n\\n### Examples\\n```\\nis_repeated(\\\"repeatedrepeatedrepeated\\\") ➞ 3\\n\\nis_repeated(\\\"overintellectualizations\\\") ➞ False\\n\\nis_repeated(\\\"nononononononononononono\\\") ➞ 12\\n\\nis_repeated(\\\"moremoremoremoremoremore\\\") ➞ 6\\n\\nis_repeated(\\\",,,,,,,,,,,,,,,,,,,,,,,,\\\") ➞ 24\\n```\\n\\n### Notes\\nTo keep things a little simpler, all strings in the tests will have length exactly 24, just as in all the examples above. In particular, the answers will always be divisors of 24.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(is_repeated(3*\\\"repeated\\\"), 3)\\nTest.assert_equals(is_repeated(4*\\\"repeat\\\"), 4)\\nTest.assert_equals(is_repeated(12*\\\"no\\\"), 12)\\nTest.assert_equals(is_repeated(6*\\\"more\\\"), 6)\\nTest.assert_equals(is_repeated(6*\\\"puns\\\"), 6)\\nTest.assert_equals(is_repeated(24*\\\",\\\"), 24)\\nTest.assert_equals(is_repeated(4*\\\"please\\\"), 4)\\nTest.assert_equals(is_repeated(6*\\\"stop\\\"), 6)\\nTest.assert_equals(is_repeated(8*\\\"now\\\"), 8)\\nTest.assert_equals(is_repeated(\\\"overintellectualizations\\\"), False)\\nTest.assert_equals(is_repeated(\\\"intercomprehensibilities\\\"), False)\\nTest.assert_equals(is_repeated(\\\"microspectrophotometries\\\"), False)\\nTest.assert_equals(is_repeated(2*\\\"accomplished\\\"), 2)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[0,0,0,0,0,0,2,1,0,1,1,4,1,2,2,2,3,2,1,2,2,1,1,2,2,2,3,2,2,3,2,1,1,3,2,1,3,2,2,2,1,2,2,2,2,0,2,3,2,1,0,3,1,2,1,1,2,3,0,2,1,2,3,2,2,1,2,2,1,1,0,1,2,2,3,2,2,2,1,5,2,2,2,2,0,2,1,2,3,1,2,1,2,2,2,2,1,3],\"rators\":[\"aEm3Wvj2rFYRL8Lrb\",\"AasGs8AeX9Lcb9xJn\",\"eqtASdRy4PdeqxztF\",\"DEDniTrstQYGounXT\",\"gJYuGdkXEWWmGRLzu\",\"FEYpu9RWysAgW3XnP\",\"veAhgEKubmGCuoCyh\",\"6RjvoM4ZdPyYQWaRX\",\"ZNnsMeNkdDhHjSrZb\",\"xoaTRuXdEwMKpgNkH\",\"8JyqsSbN2FJXPr3cw\",\"z2YLi5nChn9w2fNEF\",\"2fxapKr8XGdNeaKi2\",\"HQxp7NcdvF92G7bYS\",\"NicLsc3Em7WEGm5z2\",\"3Zceb8GudqAG3onG3\",\"9pzFiFK3ANLjQfnr2\",\"Jqk2uJZZxEv5wZFze\",\"MKT7khMBGXzA22ykf\",\"q5a96XumccZyhQNyL\",\"vt6MbZKuKZptRkwcr\",\"Ro3ppqamSxiJv2wxP\",\"Cc2Cgj4MWXZxsTooC\",\"8PwfYqoDQFThzNtvf\",\"Nt2qqga6sgvoLr9xj\",\"gb9rvGus2Jv7bjZSs\",\"2QGRoQn2dRq3scu7k\",\"KdNDysEsy2TW5QRJ2\",\"kYWb8BwpKwunQkxeX\",\"HF28xZKSLM9wEuqNg\",\"vLrq4dEDMM2wd68Dc\",\"d28dPgMHYJssbtmMz\",\"tAF9Gf6PiGogbZuWs\",\"s5M5RvgqR9BhB9JoC\",\"Yp7uvStL97cC9fKkY\",\"cR3ibTMxLyEdDFCHY\",\"jNvegJWCk5HCtEMbK\",\"yZvzB3qFb8pkHy4dg\",\"JQkZXeaLy3giT5p6W\",\"hnyhBFWwNCz9mDfSi\",\"aRqQ42J5zqCmBNd8w\",\"k5mp7Hkg8w5rwiXpe\",\"dHZqT6h4JMwk5fPC8\",\"8LfTheFzvicameoz9\",\"nfXGHENb5md7m355s\",\"ahk2qiXKJA753wAJk\",\"PXAcsKkssS2yLyDv2\",\"4rwxLqLs2mNZNg8NB\",\"H4abACFDH5t8CnnyH\",\"yr822PZmmiDDenxpB\",\"syRNbbPdLCGXbH2Gy\",\"iojEnnY9FsMfYzp6f\",\"7txFzDQ43vJ7qCY88\",\"HqmxnQJM66Y57twhn\",\"Pe8vWpDHRuH9nSGKW\",\"yjtdwc2AC4jA2RWtn\",\"iBTooWAGe7dD9svva\",\"ji5f27FPz4wRRF6Ls\",\"Ecg4m7srYGgZsb4Ck\",\"i5iePG5GqhJJ8HEoB\",\"NNE5HNRXAkmhrWgyQ\",\"oBcs8GLX2ZFLXQy8y\",\"mG8HqKiAQFTdRZthG\",\"tpxMgkGSHwBjS95Ta\",\"gXTAie79kiw28tx5u\",\"QRv96jmNaYsWkxQEG\",\"J3upzLHuEwXH7Z2hx\",\"xn7uGNKeAwPEkP9oA\",\"fznzd3qnvtbFkkizz\",\"R4SjTgDnpigJYDLyL\",\"dYPkStFnLvAMsHSzZ\",\"iS5BrkGLzJyPK7nKt\",\"DPi9QGLctq2y76KuE\",\"5XiuAqicKD4hBdu63\",\"cAP3n5NY64uoMwzRR\",\"cZccqzRQ9GgjQF6Az\",\"RGMbFMZXJr7DhcAJy\",\"KJCDwGkoXh8qtbbKr\",\"zd9FLSzsGz3evKafy\",\"dBzwBtRjZqB98DJeB\",\"rfyEkETeoS96QNH4e\",\"JS3hNM3XXkxPdg3yk\",\"9CoqdidjM9KbeKnHY\",\"d8qtzoLB264iP8tdY\",\"5hQnRWiKkhgKJXNMP\",\"5S9nX4rKsnCcnv4Cz\",\"buX4mCQhtXCfBjeno\",\"5HCu9Ydd86QgHDRNP\",\"sbJcFfQjQ59Wfg4Cd\",\"GGdmhAvxXhqhhibJN\",\"J5T8gZqiZXFuFDTQ7\",\"YcCLwitFMAEJSnxAW\",\"Ds7L5bksw2QRHjrKL\",\"qAby4AWXmTNeusvg3\",\"nWsCRg6cwBMayucxp\",\"eMuCpJ2spXWkJjWNz\",\"66a9xX73nmTEuKs9k\",\"T6iBEE2jp7f7iEF2P\",\"o4ixjQGSaYqA2JoM4\",\"CHvzhtXnv8HTbPQ56\",\"PC3pLs36zNzpRDSuE\",\"JhX7jvtpwNyxcc39m\",\"qzXAMXsHZGT8o5hTA\",\"mvJBakQ35CWAnbbEZ\",\"uw8E83imJYpQiiPpP\",\"yod5YhKtPqw2GfG9B\",\"BrTDhPJcACL2bsrpJ\",\"dzS6WBTMHyFEag6Fp\",\"suArq5BbSy7gD6xri\",\"sHjfbGQGLHE6JR6qu\",\"4Lwjr34ypKNQNQCar\",\"d9LBRxvADNBB5QJMB\",\"2PufnQcsHsfymufX3\",\"ey3CASd6Je5LEJzfB\",\"Wi4H6ayKsNDWWQCG5\",\"3nied3n8KG8RSNixH\"],\"total\":124,\"quality\":[4,5,5,5,5,5,5,1,5,5,4,3,5,5,5,5,5,5,5,5,4,5,5]},\"flags\":0},\"summary\":\"This challenge concerns strings such as:\\n\\n\\\"repeatedrepeatedrepeated\\\"\\n\\n... that are obtained by repeating a smaller string, which in this case is the string \\\"repeated\\\".\\n\\nOn a related note, since the string above is made of 3 repetitions, one way to produce this string is via the code 3 * \\\"repeated\\\".\\n\\nWrite a function that, given a string, either:\\nReturns False\",\"tags\":[\"strings\",\"language_fundamentals\",\"numbers\"],\"timestamp\":{\"$date\":1586999343865},\"title\":\"\ud83d\udca5repeatedrepeatedrepeated\ud83d\udca5\",\"quality\":4.608695652173913,\"family\":[{\"_id\":\"RTGusMtBRRdE5ivEP\",\"language\":\"javascript\"},{\"_id\":\"6rztMMwkt6ijzqcF6\",\"language\":\"python3\"},{\"_id\":\"tHM8zLQFM3kdt5uM8\",\"language\":\"ruby\"}]}}"]