a["{\"msg\":\"result\",\"id\":\"2198\",\"result\":{\"_id\":\"DottLgHxGke8fW8uK\",\"author\":\"sigma144\",\"authorId\":\"bJaPCBx63YxdJAuTS\",\"code\":\"def nPr(n, r):\\n\\t\\n\\ndef nCr(n, r):\\n\\t\",\"difficulty\":3.3823529411764706,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"mZbADgn6exoBNSmx7\",\"instructions\":\"Write a function that efficiently calculates **nPr** (number of permutations of `r` items from a set of size `n`) and another function that efficiently calculates **nCr** (number of combinations of `r` items from a set of size `n`, regardless of order).\\n\\n- The formula for calculating nPr is `n!/(n-r)!` (`\\\"!\\\"` is the factorial operation).\\n- The formula for calculating nCr is `n!/(r!(n-r)!)`.\\n\\nYour functions should work efficiently for cases where `n!` or `r!` are very large compared to the result. Simply calculating the factorials and dividing will cause your program to time out. See if you can think of a more efficient method.\\n\\n### Examples\\n```\\n# Permutations\\n\\nnPr(7, 4) ➞ 840\\nnPr(300, 3) ➞ 26730600\\n\\n# Combinations\\n\\nnCr(7, 4) ➞ 35\\nnCr(300, 3) ➞ 4455100\\nnCr(300, 297) ➞ 4455100\\n```\\n\\n### Notes\\n- `n` and `r` will always be positive integers where `n` >= `r`.\\n- Think about what factors will cancel out when dividing the factorials.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"testsP = [\\n\\t((7, 4), 840),\\n\\t((8, 5), 6720),\\n\\t((4, 3), 24),\\n\\t((7, 7), 5040),\\n\\t((7, 1), 7),\\n\\t((300, 3), 26730600),\\n\\t((1000000, 2), 999999000000),\\n\\t((1000000000, 1), 1000000000),\\n]\\n\\ntestsC = [\\n\\t((7, 4), 35),\\n\\t((8, 5), 56),\\n\\t((4, 3), 4),\\n\\t((7, 7), 1),\\n\\t((7, 1), 7),\\n\\t((300, 3), 4455100),\\n\\t((300, 297), 4455100),\\n\\t((1000000, 2), 499999500000),\\n\\t((1000000, 999998), 499999500000),\\n\\t((1000000000, 1), 1000000000),\\n\\t((1000000000, 1000000000), 1),\\n]\\nprint('Testing Permuations')\\nfor test in testsP:\\n\\tprint(\\\"Input: \\\" + str(test[0]))\\n\\tTest.assert_equals(nPr(*test[0]), test[1])\\nprint('Testing Combinations')\\nfor test in testsC:\\n\\tprint(\\\"Input: \\\" + str(test[0]))\\n\\tTest.assert_equals(nCr(*test[0]), test[1])\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,5,5,3,2,4,3,3,4,3,5,2,4,2,2,3,5,4,4,4,1,4,3,1,5,0,4,0,0,5],\"rators\":[\"bJaPCBx63YxdJAuTS\",\"8PwfYqoDQFThzNtvf\",\"tAF9Gf6PiGogbZuWs\",\"aEm3Wvj2rFYRL8Lrb\",\"gb9rvGus2Jv7bjZSs\",\"s5M5RvgqR9BhB9JoC\",\"aPLuemxzZ5iS57NBQ\",\"vTfyrr4pGddp8rbXc\",\"R4SjTgDnpigJYDLyL\",\"5dHucvf2qBYyKim7X\",\"SGhPxX5bHGL8zZqtt\",\"Z4M3NAa4TXquMNkHe\",\"bJxaKHJqR82EWw8Su\",\"KZ2xddpM2f9JRaryB\",\"SgZ2t9xFuRqdJGofp\",\"mNYiFFnf5MdGsBDrt\",\"b5zo7s6xrqWgQnPao\",\"KEmTti9Tza8A2FLQW\",\"3pxHTZBsv7MKzFG6Y\",\"siKtn4x4vNM2m2QBf\",\"83hqwxpEWiE4C8XpR\",\"fSQSHjW3e72MrWxbD\",\"Jqk2uJZZxEv5wZFze\",\"eHcgvkTGsH7ZziqBo\",\"8sNv5PTHa7XQ8bNqR\",\"yjtdwc2AC4jA2RWtn\",\"gJYuGdkXEWWmGRLzu\",\"NpxzZk8fyyh28rBmw\",\"2PufnQcsHsfymufX3\",\"gKnWjDjwrJh7MK2df\",\"T6iBEE2jp7f7iEF2P\",\"v97tB73ypDGn7Wazg\"],\"total\":35,\"quality\":[5,5,5]},\"flags\":0},\"summary\":\"Write a function that efficiently calculates nPr (number of permutations of r items from a set of size n) and another function that efficiently calculates nCr (number of combinations of r items from a set of size n, regardless of order).\\n\\nThe formula for calculating nPr is n!/(n-r)! (\\\"!\\\" is the factorial operation).\\nThe formula for calculating nCr is n!/(r!(n-\",\"tags\":[\"numbers\",\"math\",\"algebra\"],\"timestamp\":{\"$date\":1590350000149},\"title\":\"nPr and nCr\",\"quality\":5,\"family\":[{\"_id\":\"4nzN7RuhPKD5TZfwJ\",\"language\":\"cpp\"},{\"_id\":\"5WEzjzSrJ9W7t6dLX\",\"language\":\"javascript\"},{\"_id\":\"DottLgHxGke8fW8uK\",\"language\":\"python3\"},{\"_id\":\"EqE8iMyWK4vQXuJof\",\"language\":\"ruby\"}]}}"]