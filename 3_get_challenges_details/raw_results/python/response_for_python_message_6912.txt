a["{\"msg\":\"result\",\"id\":\"2164\",\"result\":{\"_id\":\"Zx9L2dpHr2nMjaKXp\",\"author\":\"persolut\",\"authorId\":\"xn7uGNKeAwPEkP9oA\",\"code\":\"def int_to_vlq(n):\\n\\t\\n\\ndef vlq_to_int(lst):\\n\\t\",\"difficulty\":3.2916666666666665,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"W4pEpF3XMyFtogCgF\",\"instructions\":\"In this challenge, you have to create functions to encode and decode variable-length quantities. A variable-length quantity (VLQ) is a universal code that uses an arbitrary number of binary octets (eight-bit bytes) to represent an arbitrarily large integer. A VLQ is essentially a base-128 representation of an unsigned integer with the addition of the eighth bit to mark a continuation of bytes.\\n\\nThe way it works is fairly simple. As a big-endian series of bytes, the most significant bit (MSB) of each byte is a 1 to indicate that another VLQ byte follows. The remaining 7 bits of each byte make up the decoded value.\\n\\n### Examples\\n```\\n# ENCODE:\\nint_to_vlq(127) ➞ [127]\\n# numbers between 0 and 127 are unchanged\\n# binary: [01111111]\\n\\nint_to_vlq(128) ➞ [129, 0]\\n# 1st byte = 1 + 128 equivalent to 1 * 128 with MSB set to 1 indicating byte follows\\n# 2nd byte = 0 \\n# 128 + 0 ➞ 128\\n# binary: [10000001, 00000000]\\n\\nint_to_vlq(106903) ➞ [134, 195, 23]\\n# 1st byte = 128 + 6 ➞ 6 * 128^2 ➞ 98304\\n# 2nd byte = 128 + 67 ➞ 67 * 128 ➞ 8576\\n# 3rd byte = 23 ➞ 23\\n# 98304 + 8576 + 23 = 106903\\n# binary: [10000110, 11000011, 00010111]\\n\\n# DECODE:\\nvlq_to_int([229, 145, 63]) ➞ 1657023\\n# (229 - 128)*128^2 + (145 - 128)*128 + 63 = 1657023\\n\\n```\\n\\n### Notes\\nInteger values for encoding will be in the range 0 <= n <= 2^63\",\"isFree\":false,\"isHidden\":false,\"lab\":\"# encode VLQ\\nTest.assert_equals(int_to_vlq(0), [0])\\nTest.assert_equals(int_to_vlq(12), [12])\\nTest.assert_equals(int_to_vlq(128), [129, 0])\\nTest.assert_equals(int_to_vlq(106903), [134, 195, 23])\\nTest.assert_equals(int_to_vlq(268435455), [255, 255, 255, 127])\\nTest.assert_equals(int_to_vlq(1234567890123), [163, 247, 143, 236, 137, 75])\\nTest.assert_equals(int_to_vlq(562949953421312), [129, 128, 128, 128, 128, 128, 128, 0])\\nTest.assert_equals(int_to_vlq(9223372036854775807), [255, 255, 255, 255, 255, 255, 255, 255, 127])\\n\\n# decode VLQ\\nTest.assert_equals(vlq_to_int([12]), 12 )\\nTest.assert_equals(vlq_to_int([129, 0]), 128)\\nTest.assert_equals(vlq_to_int([134, 195, 23]), 106903)\\nTest.assert_equals(vlq_to_int([255, 255, 255, 127]), 268435455)\\nTest.assert_equals(vlq_to_int([163, 247, 143, 236, 137, 75]), 1234567890123)\\nTest.assert_equals(vlq_to_int([129, 128, 128, 128, 128, 128, 128, 0]), 562949953421312)\\nTest.assert_equals(vlq_to_int([255, 255, 255, 255, 255, 255, 255, 255, 127]), 9223372036854775807)\",\"language\":\"python3\",\"quality\":0,\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,2,3,4,1,4,4,4,5,3,4,3,2,2,2,5,4,5,5,2],\"quality\":[],\"rators\":[\"xn7uGNKeAwPEkP9oA\",\"s5M5RvgqR9BhB9JoC\",\"8PwfYqoDQFThzNtvf\",\"8sNv5PTHa7XQ8bNqR\",\"p8qqFdJ3FSk5x9z3G\",\"iS5BrkGLzJyPK7nKt\",\"2PufnQcsHsfymufX3\",\"5dHucvf2qBYyKim7X\",\"J23RcmzbdtBbPCTjT\",\"SGhPxX5bHGL8zZqtt\",\"L73mddgeEiHq9PCdu\",\"WEgPzjctWkJ46GFHd\",\"yjtdwc2AC4jA2RWtn\",\"nweRDtL2ZPxYmRNkd\",\"4sHkH3t9CJYhbDwjM\",\"MXjxGML2X75x64vJo\",\"bJaPCBx63YxdJAuTS\",\"gJYuGdkXEWWmGRLzu\",\"aEm3Wvj2rFYRL8Lrb\"],\"total\":20},\"flags\":0},\"summary\":\"In this challenge, you have to create functions to encode and decode variable-length quantities. A variable-length quantity (VLQ) is a universal code that uses an arbitrary number of binary octets (eight-bit bytes) to represent an arbitrarily large integer. A VLQ is essentially a base-128 representation of an unsigned integer with the addition of the eighth bi\",\"tags\":[\"algorithms\",\"bit_operations\",\"data_structures\"],\"timestamp\":{\"$date\":1610710132504},\"title\":\"Variable Length Quantity (VLQ) Encoding\",\"family\":[{\"_id\":\"Jp6SYqJWdGi2ABRt4\",\"language\":\"csharp\"},{\"_id\":\"M9AmkND2m9B42PRAe\",\"language\":\"javascript\"},{\"_id\":\"Zx9L2dpHr2nMjaKXp\",\"language\":\"python3\"},{\"_id\":\"aJFuLJSiWjntA93tr\",\"language\":\"ruby\"},{\"_id\":\"td499qJDFSZkoNDSY\",\"language\":\"swift\"}]}}"]