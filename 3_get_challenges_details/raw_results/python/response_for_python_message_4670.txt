a["{\"msg\":\"result\",\"id\":\"1051\",\"result\":{\"_id\":\"K4aKGbfmzgyNNYEcM\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def is_shape_possible(n, angles):\\n\",\"difficulty\":1.5486111111111112,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"FiTSyNAdF5XZ6DNcQ\",\"instructions\":\"Given the *number* `n` and a *list of interior angles* `angles`, return whether or not it's possible to make a convex polygon with `n` sides with the `angles` given. Remember that angles must be **under 180°**.\\n\\n```\\nis_shape_possible(3, [80, 70, 30]) ➞ True\\n```\\n\\n![Triangle with the angles 80, 70 and 30](https://edabit-challenges.s3.amazonaws.com/interior-angles-triangle.png)\\n\\nA shape with **3** sides and the angles **80°, 70° and 30°** is a possible shape.\\n\\n### Examples\\n```\\nis_shape_possible(4, [90, 90, 90, 90]) ➞ True\\n\\nis_shape_possible(3, [20, 20, 140]) ➞ True\\n\\nis_shape_possible(1, [21]) ➞ False\\n# n must be larger than 2\\n\\nis_shape_possible(5, [500, 10, 10, 10, 10]) ➞ False\\n# You can't have an interior angle bigger than 180°\\n```\\n\\n### Notes\\n- Return `False` if `n` is less than 3 (see example #3).\\n- There will always be an `n` number of positive integers given as `angles`.\\n- The sum of interior angles is **(n - 2) x 180°**.\",\"isHidden\":false,\"lab\":\"Test.assert_equals(is_shape_possible(4, [90, 90, 90, 90]), True)\\nTest.assert_equals(is_shape_possible(3, [20, 20, 140]), True)\\nTest.assert_equals(is_shape_possible(1, [21]), False,'Remember not to allow shapes with under 3 sides')\\nTest.assert_equals(is_shape_possible(5, [100, 100, 100, 200, 40]), False)\\nTest.assert_equals(is_shape_possible(7, [830, 20, 20, 10, 10, 5, 5]), False, 'Angles cannot be larger than 180')\\nTest.assert_equals(is_shape_possible(4, [90, 90, 90, 89]), False)\\nTest.assert_equals(is_shape_possible(2, [21, 78]), False)\\nTest.assert_equals(is_shape_possible(8, [135, 135, 135, 135, 135, 135, 135, 135]), True)\\nTest.assert_equals(is_shape_possible(5, [500, 10, 10, 10, 10]), False)\\nTest.assert_equals(is_shape_possible(10, [21, 12, 333, 2, 2532, 52, 2, 2, 1, 8]), False)\\nTest.assert_equals(is_shape_possible(5, [108, 108, 108, 108, 108]), True)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,2,1,2,2,3,1,2,1,1,1,1,1,1,2,2,0,1,2,5,2,2,1,1,2,1,2,2,1,2,1,2,1,0,1,2,2,1,1,2,2,1,1,1,0,2,3,0,1,2,2,1,1,0,1,2,0,1,2,1,1,0,1,2,0,5,3,2,3,1,2,1,1,1,1,2,2,2,2,1,1,1,3,2,2,0,2,1,2,1,0,2,2,3,2,1,2,1,2,2,2,2,2,1,1,1,2,1,2,2,2,2,0,2,2,2,2,0,2,2,2,1,1,1,2,2,2,2,2,0,2,2,2,2,1,2,1,1,2],\"rators\":[\"PXAcsKkssS2yLyDv2\",\"tAF9Gf6PiGogbZuWs\",\"Jqk2uJZZxEv5wZFze\",\"5J4tAkdA45c76xAfk\",\"jNE5AHcJQWXz7efuP\",\"p3dsCFdWGzWGhFrSQ\",\"gb9rvGus2Jv7bjZSs\",\"iMqnZazJtLf2nhuow\",\"ZD3sFkhuCNoEHEekx\",\"CuY5BaTCcu7Mp9tDu\",\"AbrJ8hMyv5fFXG6DN\",\"5Zq3aGdvh4LHBvnJL\",\"8JyqsSbN2FJXPr3cw\",\"C4QntmkYtB89GNtpd\",\"2fxapKr8XGdNeaKi2\",\"u5u2YpHXiNgzDNJdX\",\"vgTvCCxgvbCTDvaRT\",\"s5M5RvgqR9BhB9JoC\",\"Ycj4iTJGFyvC4bXek\",\"H9KZi2cjt4FwH7qog\",\"AasGs8AeX9Lcb9xJn\",\"4CFzv558qbGcpQwc4\",\"v3fjGuc7Pq4yjFygS\",\"yZvzB3qFb8pkHy4dg\",\"HQxp7NcdvF92G7bYS\",\"aP3dk5CrAEeQkKn4k\",\"w3A7cBWyAfukk6xEQ\",\"N2wnZXkhDH86mgjQ8\",\"sJWTa7iWeRoRtqJ8N\",\"vLrq4dEDMM2wd68Dc\",\"cR3ibTMxLyEdDFCHY\",\"Yp7uvStL97cC9fKkY\",\"mxX4rH5ELYkdZ2Mbw\",\"dHZqT6h4JMwk5fPC8\",\"9Ly8afdtofp8DXzrt\",\"jNvegJWCk5HCtEMbK\",\"hnyhBFWwNCz9mDfSi\",\"mDWNyaaQ9hvPCRzSd\",\"ZNnsMeNkdDhHjSrZb\",\"8PwfYqoDQFThzNtvf\",\"5kEyLPjTLrt7z2YJZ\",\"aEm3Wvj2rFYRL8Lrb\",\"2QGRoQn2dRq3scu7k\",\"gJYuGdkXEWWmGRLzu\",\"HF28xZKSLM9wEuqNg\",\"DEDniTrstQYGounXT\",\"kYWb8BwpKwunQkxeX\",\"aRqQ42J5zqCmBNd8w\",\"KdNDysEsy2TW5QRJ2\",\"9bQyb6rW7xfE4vgrR\",\"8LfTheFzvicameoz9\",\"9pzFiFK3ANLjQfnr2\",\"5cmvoGYHLNmT8n6jP\",\"4rwxLqLs2mNZNg8NB\",\"nfXGHENb5md7m355s\",\"FzxTj4GuujhwpZM7y\",\"ahk2qiXKJA753wAJk\",\"FEYpu9RWysAgW3XnP\",\"yr822PZmmiDDenxpB\",\"3cF6NXq3ZEwdkgSjb\",\"XrqNzJ2FRG8HnGiR6\",\"aPLuemxzZ5iS57NBQ\",\"NG8PWBSjsM8mMhQEq\",\"4yNLEwL2rsx4EE5Nt\",\"dKKMvaYoJunNPk5Wa\",\"J5T8gZqiZXFuFDTQ7\",\"a777e8chPvJkY3tKa\",\"2ptN2mhjFwFcHyPZd\",\"CRHedBcNM5EnnFRBz\",\"zT9LpkiwYjLviYYW6\",\"H4abACFDH5t8CnnyH\",\"ZrKCkX7xxGGZzauFW\",\"i5iePG5GqhJJ8HEoB\",\"n2BRY9X8899dcG8Bw\",\"syRNbbPdLCGXbH2Gy\",\"Fhwnime223hGiaHaA\",\"iojEnnY9FsMfYzp6f\",\"tcn2oAsxPQDmCxGmg\",\"YcCLwitFMAEJSnxAW\",\"Pe8vWpDHRuH9nSGKW\",\"NNE5HNRXAkmhrWgyQ\",\"yjtdwc2AC4jA2RWtn\",\"iS5BrkGLzJyPK7nKt\",\"i2ZyBQDbgjH3xEBn8\",\"JS3hNM3XXkxPdg3yk\",\"HqmxnQJM66Y57twhn\",\"ta5CrWnBCRusD2WMo\",\"ACEZh39brWjdGkZXb\",\"oBcs8GLX2ZFLXQy8y\",\"YA7SDhpgEtsqynvNL\",\"M8dQuMrEpP8Hc3tHN\",\"b5oEvBqHWLRnJgp22\",\"GCwNX3aujW4Gvamdu\",\"w2HhxvSLmDhaGCAjE\",\"KRHXusBcYJQiRBLs5\",\"RehJGBFS6CYiWdjZx\",\"zd9FLSzsGz3evKafy\",\"tpxMgkGSHwBjS95Ta\",\"p8qqFdJ3FSk5x9z3G\",\"mG8HqKiAQFTdRZthG\",\"k2Eo3wyfZZ6KxvKhN\",\"KLmLKaJPfsYxp42p2\",\"gXTAie79kiw28tx5u\",\"fnkbcP3nH3soTAFKx\",\"qD2LrwaDrSdiybLKY\",\"QRv96jmNaYsWkxQEG\",\"kXEfD7xxEyWd7oxxL\",\"9CoqdidjM9KbeKnHY\",\"DPi9QGLctq2y76KuE\",\"fSQSHjW3e72MrWxbD\",\"J3upzLHuEwXH7Z2hx\",\"dYPkStFnLvAMsHSzZ\",\"cAP3n5NY64uoMwzRR\",\"rfyEkETeoS96QNH4e\",\"5XiuAqicKD4hBdu63\",\"dBzwBtRjZqB98DJeB\",\"d8qtzoLB264iP8tdY\",\"5HCu9Ydd86QgHDRNP\",\"wRttWTM59y8m5mx7x\",\"ZyrfhDTZHb8LymH5b\",\"HuNF3xTBzmatyGSTm\",\"3nied3n8KG8RSNixH\",\"R4SjTgDnpigJYDLyL\",\"R29kgJ9M7R4qqwjcE\",\"5S9nX4rKsnCcnv4Cz\",\"5hQnRWiKkhgKJXNMP\",\"eYfPWvZwnJQkHbSTK\",\"c9JGdptv2MXtdghwZ\",\"GGdmhAvxXhqhhibJN\",\"buX4mCQhtXCfBjeno\",\"5f6oSeq4r5WTXLdCQ\",\"Ds7L5bksw2QRHjrKL\",\"mLLeY7R7Fe6qhZBgP\",\"srJ34BaybkQh3qRkM\",\"7txFzDQ43vJ7qCY88\",\"sHjfbGQGLHE6JR6qu\",\"eMuCpJ2spXWkJjWNz\",\"o4ixjQGSaYqA2JoM4\",\"T6iBEE2jp7f7iEF2P\",\"CHvzhtXnv8HTbPQ56\",\"Wpn95NqWxncQrwNgz\",\"EfxwqhYdapX3dMQC2\",\"PC3pLs36zNzpRDSuE\",\"yod5YhKtPqw2GfG9B\",\"mvJBakQ35CWAnbbEZ\",\"8BFSTCnoe2QggN64c\",\"zxcufQCtqBqexXS6n\",\"BrTDhPJcACL2bsrpJ\",\"XD5nmvKQchKezPXhy\",\"AFfw7cGg83uYk2Miy\",\"Afnps7TJQuS9sipMb\",\"2PufnQcsHsfymufX3\",\"T6Rm8mREPMZSftzrC\",\"dzS6WBTMHyFEag6Fp\",\"4TmgHkn5vqyHK3sYC\",\"pduNK68oazqQTtbLp\",\"wjc4iejpErBhxWwHo\",\"yAouD3PxzED8a4gap\",\"Wi4H6ayKsNDWWQCG5\",\"X4rzfxGgxx6CS7Bpz\",\"5QN8R22z43SrwoHDz\",\"NzbRqGWspQnWMoDrF\",\"RoGGD5cpHb4ftdLDv\"],\"total\":178,\"quality\":[5,5,5,4,4,2,4,4,5,5,2,5,5,5,2,5,4,5,5,5,4,4,5,5]},\"flags\":0},\"summary\":\"Given the number n and a list of interior angles angles, return whether or not it's possible to make a convex polygon with n sides with the angles given. Remember that angles must be under 180°.\\n\\nisshapepossible(3, [80, 70, 30]) ➞ True\\n\\nTriangle with the angles 80, 70 and 30\\n\\nA shape with 3 sides and the angles 80°, 70° and 30° is a possible shape.\\n\\nExamples\\ni\",\"tags\":[\"validation\",\"math\"],\"timestamp\":{\"$date\":1580931341701},\"title\":\"A Possible Shape?\",\"quality\":4.333333333333333,\"family\":[{\"_id\":\"ZWEmZ8DdDNBnoRfz9\",\"language\":\"cpp\"},{\"_id\":\"H2fcrbXCBPpsJ59wv\",\"language\":\"javascript\"},{\"_id\":\"K4aKGbfmzgyNNYEcM\",\"language\":\"python3\"},{\"_id\":\"qq5qorxMjkPe6AKP2\",\"language\":\"ruby\"}]}}"]