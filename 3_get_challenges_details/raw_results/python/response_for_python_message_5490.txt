a["{\"msg\":\"result\",\"id\":\"1458\",\"result\":{\"_id\":\"Es985FEDzEQ2tkM75\",\"author\":\"Noelt2003\",\"authorId\":\"p8RzB2C9xixAMaxPb\",\"code\":\"def caesar_cipher(text, key):\\n\\talphabet = \\\"abcdefghijklmnopqrstuvwxyz\\\"\",\"difficulty\":2.0597826086956523,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"tBad8EgQCz4mpYvBa\",\"instructions\":\"Create a function that takes two arguments (`text`, `key`) and returns a new encrypted text using the `key`. For example, if the input is `\\\"a\\\"` and the key is `1`, it should move that letter 1 step in alphabetic order so the output would be `\\\"b\\\"`.\\n\\n### Examples\\n```\\ncaesar_cipher(\\\"hello\\\", 5) ➞ \\\"mjqqt\\\"\\n\\ncaesar_cipher(\\\"hello world\\\", 1) ➞ \\\"ifmmp xpsme\\\"\\n\\ncaesar_cipher(\\\"a\\\", 2) ➞ \\\"c\\\"\\n```\\n\\n### Notes\\nThe input is only letters and spaces; no special characters.\",\"isHidden\":false,\"lab\":\"Test.assert_equals(caesar_cipher(\\\"hello world\\\", 1), \\\"ifmmp xpsme\\\")\\nTest.assert_equals(caesar_cipher(\\\"hello world\\\", 26), \\\"hello world\\\")\\nTest.assert_equals(caesar_cipher(\\\"iwxh xh p rwxetg\\\", 11), \\\"this is a chiper\\\")\\nTest.assert_equals(caesar_cipher(\\\"z\\\", 2), \\\"b\\\")\\nTest.assert_equals(caesar_cipher(\\\"fruuhfw\\\", 23), \\\"correct\\\")\\nTest.assert_equals(caesar_cipher(\\\"tfexirkj\\\", 9), \\\"congrats\\\")\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,3,2,2,2,0,0,2,2,2,3,0,4,2,1,3,4,2,3,1,3,1,1,1,2,2,0,2,3,1,3,2,2,2,2,2,2,3,3,3,3,2,5,3,3,3,0,3,1,2,3,2,1,3,2,3,0,3,3,4,2,3,0,2,2,1,3,3,3,3,1,1,2,0,3,2,2,2,1,2,2,2,2,3,2,2,2,2,3,3,3,2,2,3,3,1,3,2,0,3,2,2,2,2,3,3,0,3,3,3,2,1,3,3,2,2,1,0,3,3,2,2,0,0,2,3,3,3,2,2,3,1,1,0,2,2,3,2,2,1,3,3,2,1,0,3,2,0,2,3,3,2,1,1,3,0,1,1,4,3,2,1,2,2,2,0,2,3,0,2,3,2,3,1,3,3,4,3,2],\"rators\":[\"p8RzB2C9xixAMaxPb\",\"tAF9Gf6PiGogbZuWs\",\"wwMcJQRvf3X59Jyev\",\"2fxapKr8XGdNeaKi2\",\"gb9rvGus2Jv7bjZSs\",\"Jqk2uJZZxEv5wZFze\",\"gMJhLdyw3tH7L96X2\",\"u5u2YpHXiNgzDNJdX\",\"9Ct9EYenTi6JXEaWW\",\"4tgBydK887PitgAoi\",\"FQDwscZZbqMZNcazT\",\"PqEKjCDkJtYoYuZfj\",\"7hzSvcYdq6QjoRnJY\",\"nc7bRhkxgKyqusYe3\",\"pMsRRJHhat4hFh9rn\",\"aW4DkonHaJw6Q8PyP\",\"J5T8gZqiZXFuFDTQ7\",\"K96FwtfDDN5WM4Bb7\",\"6ShafRStcvew4GfCh\",\"s5M5RvgqR9BhB9JoC\",\"krjawd7wMfsvkjGNP\",\"C4QntmkYtB89GNtpd\",\"tFJbHuodF8d4sMczz\",\"Lw8oRc5SERsuntXMo\",\"h4drd4JwgfEgJ5o87\",\"wAJ2f7u5DBdazhHgN\",\"XbwyB44kHPnRgQcrB\",\"DLw5TLmtCmL3GA9rW\",\"MjdCNCPDXdTmhMt6r\",\"ydEdzuCCZt4yny9Rq\",\"NXDM2LA8smpk7jkoX\",\"tkZnn9tCRuZJ2t7rA\",\"kP2C2Ye5H6WoTodFN\",\"PT5pu7kJsgp9TDNGv\",\"6NwdjBQPBtLAjWiMt\",\"F6Au8mKZD4NqYh8Ea\",\"fz7SWP39DFns9FsgX\",\"5PMNRxiLifJLBM9dT\",\"d6XGoaf2oJXkWg5fH\",\"7rXZ2qYaoKybv3SLo\",\"5uA8xmgifmiJrqbzy\",\"ZMNeWuRGvfmypzSZ2\",\"7YD4zQL8AGKgPhTc5\",\"tAGf67NSsYh7ptKY9\",\"DQFYrg6i7BWnGwMo4\",\"egpGbzJw37SX7Wepg\",\"ab7BsQuhDo3QgE6bh\",\"kQH5b8MXJunh84Czq\",\"Cc2Cgj4MWXZxsTooC\",\"2innwjWqxJHo4eRGh\",\"4CFzv558qbGcpQwc4\",\"PTcm3qFvxvLnaKttM\",\"8JyqsSbN2FJXPr3cw\",\"Wv5c7WsK6R8yb4mTt\",\"T2vhHPhRR96hRizq8\",\"AasGs8AeX9Lcb9xJn\",\"yoYQqaY6GszuTkNSs\",\"8PwfYqoDQFThzNtvf\",\"PXAcsKkssS2yLyDv2\",\"S6Zd8mPuvhuh3MFRt\",\"yZvzB3qFb8pkHy4dg\",\"pkQBaSzukotPEXmrD\",\"5aZnA8Br3u7Wf5ENg\",\"w3A7cBWyAfukk6xEQ\",\"8DH2opL3T5kdcoiRJ\",\"TrSnx94ydx5c6JDB4\",\"PytNZK9mNiRiZxPrm\",\"wZoxzQDbso9SMAPkY\",\"dXMbkgQFoN37BhruB\",\"mDWNyaaQ9hvPCRzSd\",\"aEm3Wvj2rFYRL8Lrb\",\"cR3ibTMxLyEdDFCHY\",\"NwGDqjc7ptNHc4wwF\",\"ZNnsMeNkdDhHjSrZb\",\"kYWb8BwpKwunQkxeX\",\"3Zceb8GudqAG3onG3\",\"YRstQuthRkFeBiXug\",\"FS78GK2Ysu7u8ndMs\",\"pWD2YC5s4YRCxFc2i\",\"EjbDDFRECrzQDkzrX\",\"Yp7uvStL97cC9fKkY\",\"gJYuGdkXEWWmGRLzu\",\"3pxHTZBsv7MKzFG6Y\",\"sz8ufn9i8zeiGWpAy\",\"C9LKGu2g5hSijvDzA\",\"k5mp7Hkg8w5rwiXpe\",\"uSEfi7FRPHFCRCwdz\",\"n2BRY9X8899dcG8Bw\",\"JpuqAGE3qLpkWHRt4\",\"aCNWav8S8Try9RkC6\",\"JNt2nSuFJMHeaWX72\",\"d6w7S49nhKzCTWLp6\",\"KdNDysEsy2TW5QRJ2\",\"ekQh3jzgGLsEMbKo3\",\"Mv9rvJmRg2mBgMyyj\",\"HF28xZKSLM9wEuqNg\",\"DQskEvAv5KiJDPtGF\",\"92NgEJXis9BczFMTY\",\"n2ck2WGuM35vbZiFz\",\"wQ95dETSD3cvnXmxs\",\"ikkjHDqBHu6fT3vGL\",\"Ko8toH9wc4dmA9zqx\",\"WDuMpnmwBwkuMSSsK\",\"PweZwtXTDkEwxZXQ4\",\"6428wKHtwKkFdvBs5\",\"7txFzDQ43vJ7qCY88\",\"v9KtC8YLbMWmXiW2H\",\"hnyhBFWwNCz9mDfSi\",\"Z4M3NAa4TXquMNkHe\",\"DEDniTrstQYGounXT\",\"hX2iktknBz6it4BwK\",\"Ecg4m7srYGgZsb4Ck\",\"efnyFTQf365aSxS4p\",\"iojEnnY9FsMfYzp6f\",\"jL4y5fTJAMBjhZmko\",\"pPtmnJ7q9QchoG2Jq\",\"DYDJTyGgKFnBRLm2r\",\"dEuJGZbBQkveCXEFk\",\"BC3XhXhX9mTrAScgy\",\"f2BoqyCpgnmjEjLqx\",\"zZDaXBxMzTCBhNkgL\",\"MKT7khMBGXzA22ykf\",\"HqmxnQJM66Y57twhn\",\"yjtdwc2AC4jA2RWtn\",\"m6t474j4QLzGzdPe8\",\"ZrKCkX7xxGGZzauFW\",\"sX9GZp3fYyQLrBKMJ\",\"qEyYdgisv7FoxLBjH\",\"9CoqdidjM9KbeKnHY\",\"9qQEDELhzg58uSvjg\",\"qD2LrwaDrSdiybLKY\",\"p8qqFdJ3FSk5x9z3G\",\"YRAzEBJoLvSaiPtYx\",\"mHFfyLsLhgMvXSALK\",\"8fZxjQfuXw5HMSRJM\",\"AaKWw8amcFYLrEpNz\",\"gojReckJvzYvoHqSu\",\"QGmp3LSCSoWAbcTjs\",\"DPi9QGLctq2y76KuE\",\"xn7uGNKeAwPEkP9oA\",\"dkcmCKwqApX5jBggc\",\"CLypXaZksY99mpRCm\",\"QRv96jmNaYsWkxQEG\",\"iS5BrkGLzJyPK7nKt\",\"9rhsisf8ofHavG5aT\",\"J3upzLHuEwXH7Z2hx\",\"6MjSiiBLPcvXbXcaZ\",\"axdSNLZpiCDF8RS6n\",\"gXTAie79kiw28tx5u\",\"Wv2vJnEj8ywNmARoF\",\"DpxvcKcHomSpGcE76\",\"oBcs8GLX2ZFLXQy8y\",\"7scpcTEp3SEx5Wjg9\",\"LfDeQBAH37L7wgT4Z\",\"gzF5pkKZaA3pa83QN\",\"8kvQLk3zr6W74rG5t\",\"PfG8saeBG2GHm4g3M\",\"buX4mCQhtXCfBjeno\",\"Q2TPP8bx8kBBjhz68\",\"tmoGTLEavNvihegWz\",\"KszNDDKcJgdbK2A2a\",\"Dmkr8kRg692nqCnpm\",\"cAP3n5NY64uoMwzRR\",\"XNmN6ztj36a7eChbD\",\"XHShZ3WMPgGEA2vkR\",\"sKfrD9gjCDHuqLzSk\",\"GGdmhAvxXhqhhibJN\",\"RTDx9axf52kxhFjwZ\",\"qAby4AWXmTNeusvg3\",\"xqYQMujmvgQ78bnJc\",\"AYj67jMApehKJbkw4\",\"FEYpu9RWysAgW3XnP\",\"Wpn95NqWxncQrwNgz\",\"XujK3rHd3JcM9TLJy\",\"9ivvGvJGvtQfigQaZ\",\"2PufnQcsHsfymufX3\",\"8BFSTCnoe2QggN64c\",\"PC3pLs36zNzpRDSuE\",\"KACjjdKDL97rBTyEK\",\"fKzJMR2LLbiRtGetj\",\"fznzd3qnvtbFkkizz\",\"fbr22rabEJMfBp7vD\",\"ctbThYbufFCYbRK4f\",\"gKnWjDjwrJh7MK2df\",\"8nE8QHnFYsHCFebte\",\"o4ixjQGSaYqA2JoM4\",\"3Zmh5qrGG4PfsS4qo\",\"AFfw7cGg83uYk2Miy\",\"yod5YhKtPqw2GfG9B\",\"8sNv5PTHa7XQ8bNqR\",\"rhS8qXRjZcpDXkwnE\",\"CJxPyhJirydwiaj7x\",\"fZaGAGEPmzDhJtPy3\",\"5HCu9Ydd86QgHDRNP\",\"mvJBakQ35CWAnbbEZ\",\"Ds7L5bksw2QRHjrKL\",\"XogKZhczbDGZaXEZm\",\"ey3CASd6Je5LEJzfB\",\"Qyfyyw6oC4EHAndzo\",\"KfGmizjwhtMAaXspt\",\"3KkyQm77zsew58Dc2\",\"4Lwjr34ypKNQNQCar\",\"mTF6oWX2WhFR4M3QK\",\"jkbavR2ATFJcpmo8M\",\"9pzFiFK3ANLjQfnr2\",\"hrzGaJc9KZqgjAvew\",\"MerrTncNxeXeC6dHz\"],\"total\":223,\"quality\":[5,4,5,5,5,5,3,5,5,5,5,5,5,5,4,5,5,5,5,4,5,4,5,5,4,5,4,5]},\"flags\":0},\"summary\":\"Create a function that takes two arguments (text, key) and returns a new encrypted text using the key. For example, if the input is \\\"a\\\" and the key is 1, it should move that letter 1 step in alphabetic order so the output would be \\\"b\\\".\\n\\nExamples\\ncaesar_cipher(\\\"hello\\\", 5) ➞ \\\"mjqqt\\\"\\n\\ncaesar_cipher(\\\"hello world\\\", 1) ➞ \\\"ifmmp xpsme\\\"\\n\\ncaesar_cipher(\\\"a\\\", 2) ➞ \\\"c\\\"\\n\\nN\",\"tags\":[\"cryptography\",\"strings\",\"loops\"],\"timestamp\":{\"$date\":1578340436224},\"title\":\"Caesar Cipher\",\"quality\":4.714285714285714,\"family\":[{\"_id\":\"NY34pgkYeEpP7wBxS\",\"language\":\"cpp\"},{\"_id\":\"5yGyWGnihggppfWqQ\",\"language\":\"javascript\"},{\"_id\":\"Es985FEDzEQ2tkM75\",\"language\":\"python3\"},{\"_id\":\"3Rj2KPLsaYRMznRSg\",\"language\":\"ruby\"}]}}"]