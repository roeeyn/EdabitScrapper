a["{\"msg\":\"result\",\"id\":\"2122\",\"result\":{\"_id\":\"PYEuCAdGJsRS9AABA\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"class CoffeeShop:\\n\\tdef __init__(self, name, menu, orders):\\n\\t\\tpass\",\"difficulty\":3.1097560975609757,\"familyId\":\"98yLJQdHBTnwFLnbF\",\"instructions\":\"Write a **class** called **CoffeeShop**, which has **three instance variables**:\\n\\n1. **name** : a string (basically, of the shop)\\n2. **menu** : a list of items (of dict type), with each item containing the **item** (name of the item), **type** (whether a _food_ or a _drink_) and **price**.\\n3. **orders** : an empty list\\n\\nand **seven methods**:\\n\\n1. **add_order**: adds the **name** of the item to the end of the **orders** list if it exists on the **menu**, otherwise, return `\\\"This item is currently unavailable!\\\"`\\n2. **fulfill_order**: if the **orders** list is **not empty**, return `\\\"The {item} is ready!\\\"`. If the **orders** list is empty, return `\\\"All orders have been fulfilled!\\\"`\\n3. **list_orders**: returns the _item_ **names** of the **orders** taken, otherwise, an **empty** list.\\n4. **due_amount**: returns the total amount due for the **orders** taken.\\n5. **cheapest_item**: returns the **name** of the cheapest item on the menu.\\n6. **drinks_only**: returns only the _item_ **names** of _type_ **drink** from the menu.\\n7. **food_only**: returns only the _item_ **names** of _type_ **food** from the menu.\\n\\n**IMPORTANT**: Orders are fulfilled in a **FIFO** (first-in, first-out) order.\\n\\n\\n### Examples\\n```\\ntcs.add_order(\\\"hot cocoa\\\") ➞ \\\"This item is currently unavailable!\\\"\\n# Tesha's coffee shop does not sell hot cocoa\\ntcs.add_order(\\\"iced tea\\\") ➞ \\\"This item is currently unavailable!\\\"\\n# specifying the variant of \\\"iced tea\\\" will help the process\\n\\ntcs.add_order(\\\"cinnamon roll\\\") ➞  \\\"Order added!\\\"\\ntcs.add_order(\\\"iced coffee\\\") ➞ \\\"Order added!\\\"\\ntcs.list_orders ➞ [\\\"cinnamon roll\\\", \\\"iced coffee\\\"]\\n# all items of the current order\\n\\ntcs.due_amount() ➞ 2.17\\n\\ntcs.fulfill_order() ➞ \\\"The cinnamon roll is ready!\\\"\\ntcs.fulfill_order() ➞ \\\"The iced coffee is ready!\\\"\\ntcs.fulfill_order() ➞ \\\"All orders have been fulfilled!\\\"\\n# all orders have been presumably served\\n\\ntcs.list_orders() ➞ []\\n# an empty list is returned if all orders have been exhausted\\n\\ntcs.due_amount() ➞ 0.0\\n# no new orders taken, expect a zero payable\\n\\ntcs.cheapest_item() ➞ \\\"lemonade\\\"\\ntcs.drinks_only() ➞ [\\\"orange juice\\\", \\\"lemonade\\\", \\\"cranberry juice\\\", \\\"pineapple juice\\\", \\\"lemon iced tea\\\", \\\"vanilla chai latte\\\", \\\"hot chocolate\\\", \\\"iced coffee\\\"]\\ntcs.food_only() ➞ [\\\"tuna sandwich\\\", \\\"ham and cheese sandwich\\\", \\\"bacon and egg\\\", \\\"steak\\\", \\\"hamburger\\\", \\\"cinnamon roll\\\"]\\n```\\n\\n### Notes\\nRound off **due amount** up to **two decimal** places.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"m1, m2, m3 = [\\n  [\\\"orange juice\\\", \\\"drink\\\", 2.13], [\\\"lemonade\\\", \\\"drink\\\", 0.85], [\\\"cranberry juice\\\", \\\"drink\\\", 3.36],\\n  [\\\"pineapple juice\\\", \\\"drink\\\", 1.89], [\\\"lemon iced tea\\\", \\\"drink\\\", 1.28], [\\\"apple iced tea\\\", \\\"drink\\\", 1.28],\\n  [\\\"vanilla chai latte\\\", \\\"drink\\\", 2.48], [\\\"hot chocolate\\\", \\\"drink\\\", 0.99], [\\\"iced coffee\\\", \\\"drink\\\", 1.12],\\n  [\\\"tuna sandwich\\\", \\\"food\\\", 0.95], [\\\"ham and cheese sandwich\\\", \\\"food\\\", 1.35], [\\\"bacon and egg\\\", \\\"food\\\", 1.15],\\n  [\\\"steak\\\", \\\"food\\\", 3.28], [\\\"hamburger\\\", \\\"food\\\", 1.05], [\\\"cinnamon roll\\\", \\\"food\\\", 1.05]\\n], [\\n  [\\\"turkey english muffin\\\", \\\"food\\\", 7.99], [\\\"avocado toast\\\", \\\"food\\\", 5.05], [\\\"chocolate croissant\\\", \\\"food\\\", 3.00],\\n  [\\\"espresso\\\", \\\"drink\\\", 2.99], [\\\"iced caramel macchiato\\\", \\\"drink\\\", 4.50], [\\\"cortado\\\", \\\"drink\\\", 4.00],\\n  [\\\"nitro cold brew tester\\\", \\\"drink\\\", 8.00]\\n], [\\n  [\\\"cheeseburger with fries\\\", \\\"food\\\", 5.44],\\n  [\\\"cinnamon roll\\\", \\\"food\\\", 4.99],\\n  [\\\"hot chocolate\\\", \\\"drink\\\", 2.99],\\n  [\\\"lemon tea\\\", \\\"drink\\\", 2.50],\\n  [\\\"iced coffee\\\", \\\"drink\\\", 3.00],\\n  [\\\"vanilla chai latte\\\", \\\"drink\\\", 4.00]\\n]\\nmenu1 = [{'item': x[0], 'type': x[1], 'price': x[2]} for x in m1]\\nmenu2 = [{'item': x[0], 'type': x[1], 'price': x[2]} for x in m2]\\nmenu3 = [{'item': x[0], 'type': x[1], 'price': x[2]} for x in m3]\\n\\nshopx = CoffeeShop(\\\"Xavier's\\\", menu1, list())\\nTest.assert_equals(shopx.add_order('cinnamon roll'), 'Order added!')\\nTest.assert_equals(shopx.add_order('iced coffee'), 'Order added!')\\nTest.assert_equals(shopx.list_orders(), ['cinnamon roll', 'iced coffee'])\\nTest.assert_equals(shopx.due_amount(), 2.17)\\nTest.assert_equals(shopx.fulfill_order(), 'The cinnamon roll is ready!')\\nTest.assert_equals(shopx.fulfill_order(), 'The iced coffee is ready!')\\nTest.assert_equals(shopx.fulfill_order(), 'All orders have been fulfilled!')\\nTest.assert_equals(shopx.add_order('hot cocoa'), 'This item is currently unavailable!')\\nTest.assert_equals(shopx.add_order('iced tea'), 'This item is currently unavailable!')\\nTest.assert_equals(shopx.list_orders(), [])\\nTest.assert_equals(shopx.due_amount(), 0)\\nTest.assert_equals(shopx.cheapest_item(), 'lemonade')\\nTest.assert_equals(shopx.drinks_only(), ['orange juice', 'lemonade', 'cranberry juice', 'pineapple juice', 'lemon iced tea', 'apple iced tea', 'vanilla chai latte', 'hot chocolate', 'iced coffee'])\\nTest.assert_equals(shopx.food_only(), ['tuna sandwich', 'ham and cheese sandwich', 'bacon and egg', 'steak', 'hamburger', 'cinnamon roll'])\\n\\nshopy = CoffeeShop('Deep Into Coffee', menu2, list())\\nTest.assert_equals(shopy.add_order(\\\"cortado\\\"), \\\"Order added!\\\")\\nTest.assert_equals(shopy.fulfill_order(), \\\"The cortado is ready!\\\")\\nTest.assert_equals(shopy.fulfill_order(), \\\"All orders have been fulfilled!\\\")\\nTest.assert_equals(shopy.add_order(\\\"avocado toast\\\"), \\\"Order added!\\\")\\nTest.assert_equals(shopy.list_orders(), [\\\"avocado toast\\\"])\\nTest.assert_equals(shopy.due_amount(), 5.05)\\nTest.assert_equals(shopy.cheapest_item(), \\\"espresso\\\")\\nTest.assert_equals(shopy.drinks_only(), [\\\"espresso\\\", \\\"iced caramel macchiato\\\", \\\"cortado\\\", \\\"nitro cold brew tester\\\"])\\nTest.assert_equals(shopy.food_only(), [\\\"turkey english muffin\\\", \\\"avocado toast\\\", \\\"chocolate croissant\\\"])\\n\\nshopz = CoffeeShop(\\\"Tesha's\\\", menu3, list())\\nTest.assert_equals(shopz.add_order(\\\"hot cocoa\\\"), \\\"This item is currently unavailable!\\\")\\nTest.assert_equals(shopz.due_amount(), 0.0)\\nTest.assert_equals(shopz.add_order(\\\"cheeseburger with fries\\\"), \\\"Order added!\\\")\\nTest.assert_equals(shopz.add_order(\\\"lemon tea\\\"), \\\"Order added!\\\")\\nTest.assert_equals(shopz.add_order(\\\"iced coffee\\\"), \\\"Order added!\\\")\\nTest.assert_equals(shopz.list_orders(), [\\\"cheeseburger with fries\\\", \\\"lemon tea\\\", \\\"iced coffee\\\"])\\nTest.assert_equals(shopz.due_amount(), 10.94)\\nTest.assert_equals(shopz.fulfill_order(), \\\"The cheeseburger with fries is ready!\\\")\\nTest.assert_equals(shopz.fulfill_order(), \\\"The lemon tea is ready!\\\")\\nTest.assert_equals(shopz.fulfill_order(), \\\"The iced coffee is ready!\\\")\\nTest.assert_equals(shopz.list_orders(), [])\\nTest.assert_equals(shopz.cheapest_item(), \\\"lemon tea\\\")\\nTest.assert_equals(shopz.drinks_only(), [\\\"hot chocolate\\\", \\\"lemon tea\\\", \\\"iced coffee\\\", \\\"vanilla chai latte\\\"])\\nTest.assert_equals(shopz.food_only(), [\\\"cheeseburger with fries\\\", \\\"cinnamon roll\\\"])\",\"language\":\"python3\",\"quality\":5,\"summary\":\"Write a class called CoffeeShop, which has three instance variables:\\n\\nname : a string (basically, of the shop)\\nmenu : a list of items (of dict type), with each item containing the item (name of the item), type (whether a food or a drink) and price.\\norders : an empty list\\n\\nand seven methods:\\n\\nadd_order: adds the name of the item to the end of the orders list if\",\"tags\":[\"classes\",\"objects\",\"arrays\"],\"timestamp\":{\"$date\":1610035136552},\"title\":\"Coffee Shop\",\"stats\":{\"completed\":{\"total\":81,\"ratings\":[4,4,4,4,4,3,5,2,0,4,5,5,2,1,5,4,4,5,3,2,1,4,2,4,5,4,2,2,4,3,4,5,4,4,3,2,5,3,2,5,5,2,5,2,3,3,2,4,2,2,5,5,0,3,4,2,0,5,4,4,2,4,3,1,3,2,2,3,1,2,1,3,2,3,3,2,3,4,3,2,2,4],\"quality\":[5],\"rators\":[\"a777e8chPvJkY3tKa\",\"8PwfYqoDQFThzNtvf\",\"s5M5RvgqR9BhB9JoC\",\"qab4tYm6vJQcpKLfi\",\"p8qqFdJ3FSk5x9z3G\",\"fSQSHjW3e72MrWxbD\",\"iS5BrkGLzJyPK7nKt\",\"hwa6rDC4yJfWFEiTt\",\"HdapHJPXHZwFYBCnn\",\"58M252WF7SPRinfBx\",\"hkiz2Nv927cYGrA86\",\"8JyqsSbN2FJXPr3cw\",\"eMuCpJ2spXWkJjWNz\",\"wwMcJQRvf3X59Jyev\",\"8nE8QHnFYsHCFebte\",\"8sNv5PTHa7XQ8bNqR\",\"X92m3L77skxknC2MZ\",\"g2h22xXQEA87Td3sF\",\"2PufnQcsHsfymufX3\",\"iojEnnY9FsMfYzp6f\",\"eHcgvkTGsH7ZziqBo\",\"yr822PZmmiDDenxpB\",\"yjtdwc2AC4jA2RWtn\",\"yod5YhKtPqw2GfG9B\",\"AasGs8AeX9Lcb9xJn\",\"gb9rvGus2Jv7bjZSs\",\"xBQC5uQdx6WndJ3iM\",\"bJaPCBx63YxdJAuTS\",\"ii29nS7Yko3iSLJFa\",\"FgA9hxXkjxe2pH6Af\",\"fGQthgRWhpw3fXhzG\",\"LQxof8pGabGuWP7Gn\",\"gJYuGdkXEWWmGRLzu\",\"5HH239FpCsu6fTr5R\",\"Dh6nt4CiC7WzwQhG3\",\"J3upzLHuEwXH7Z2hx\",\"TdjwWaJRtW3Lazvb4\",\"qAby4AWXmTNeusvg3\",\"sFMXNMFryYLjHsjYj\",\"r3GNSq3oReDjMQrhL\",\"J23RcmzbdtBbPCTjT\",\"foytX6kH9wiSYqLtT\",\"974cv448kw6Wu2JF6\",\"42daw5PafNk6AoTgX\",\"JKb5rhL6DKcCAypF9\",\"mzsaCBQP3e6YourDN\",\"wHRL7k3uYZ54b3yRc\",\"kQH5b8MXJunh84Czq\",\"T6iBEE2jp7f7iEF2P\",\"nQRzZKeDKuLRf9chX\",\"yAia3z7kTm8anHb7Z\",\"9pqtNWrsTJdZcRbEZ\",\"QvEXmSEo3ANp3yPyH\",\"tAF9Gf6PiGogbZuWs\",\"aEm3Wvj2rFYRL8Lrb\",\"Gp6HexkcR4mHmReRB\",\"5bz9yvmmdB5ddbS5r\",\"SFyGnexSYdfWGvMsS\",\"nFbmNzMQ38TncmfQX\",\"KyCNjcbgRoHsJRs2e\",\"sW78rbapvsS3AnuJe\",\"RjnXnHgwatpXJ2wdZ\",\"wNLWme2gvvpMPHk7A\",\"cZFrJSFYf9BzAQug7\",\"rPEMbGJr4NorP7bm8\",\"e6Ldo3gXosENLvaRq\",\"e5tS8PDWAwdPcWT88\",\"YMDWX8AKj72exohz6\",\"eCTdZhaqkLLyvj63H\",\"FvHwg9nTDqmaDBrvP\",\"hP3dY9tJ9yC6ZoKtH\",\"edmov2rvpnyBfuW55\",\"TcSDcPrrSPsATFeB6\",\"pnzfNatg3P32mMYQY\",\"P5xdBe6cYBLCE7pwY\",\"5SK47g2HRyxbs4WDR\",\"DwetpbChQM4r6Gwah\",\"8NvGXadvQEppXXZD7\"]},\"flags\":0},\"editorId\":\"a777e8chPvJkY3tKa\",\"family\":[{\"_id\":\"k3pg4uMgKcDA95sqb\",\"language\":\"java\"},{\"_id\":\"ydgurBgEdGkueNmmp\",\"language\":\"javascript\"},{\"_id\":\"PYEuCAdGJsRS9AABA\",\"language\":\"python3\"},{\"_id\":\"RsciMbmhrJCSkeoq4\",\"language\":\"ruby\"}]}}"]