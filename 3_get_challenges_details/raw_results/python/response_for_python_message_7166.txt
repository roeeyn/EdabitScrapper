a["{\"msg\":\"result\",\"id\":\"2290\",\"result\":{\"_id\":\"FATFWknwgmyc7vDcf\",\"author\":\"KarelOmab\",\"authorId\":\"qD2LrwaDrSdiybLKY\",\"code\":\"def small_favor(sentence):\\n\\t# GL HF\",\"difficulty\":3.59375,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"DDfw2WZfuechs6XxK\",\"instructions\":\"My friend required some help with an assignment in school and I thought this would be a nice addition to be added as a challenge here as well.\\n\\nCreate a function that takes a sentence and returns a modified sentence abided by these rules:\\n- If you encounter a **date** within the sentence, **in the format DD/MM/YY** or **DD.MM.YY**, you have to change it over to **DD/MM/YYYY** or **DD.MM.YYYY** (same separator char).\\n- If you encounter a **date** within the sentence, **in the format MonthName, DD. YY.** you have to change it over to **MonthName, DD. YYYY.**\\n- If you encounter an **invalid MonthName** then leave it as is.\\n- **For this challenge there is an arbitrary rule that if YY is less than 25 the year-prefix will be 20, otherwise, the year-prefix will be 19**.\\n- Meaning 08/11/20 -> 08/11/2020 or 02/11/95 -> 02/11/1995\\n\\n### Examples\\n```\\nsmall_favor(\\\"I was born on 11/02/98\\\")\\n➞ \\\"I was born on 11/02/1998\\\"\\n\\nsmall_favor(\\\"I was born on 11/02/98 and what about you?\\\")\\n➞ \\\"I was born on 11/02/1998 and what about you?\\\"\\n\\nsmall_favor(\\\"I was born on 02.11.19\\\")\\n➞ \\\"I was born on 02.11.2019\\\"\\n\\nsmall_favor(\\\"I was born on February, 02. 98.\\\")\\n➞ \\\"I was born on February, 02. 1998.\\\"\\n\\nsmall_favor(\\\"I was born on January, 01. 15. and today is October, 08. 20.\\\")\\n➞ \\\"I was born on January, 01. 2015. and today is October, 08. 2020.\\\"\\n\\nsmall_favor(\\\"I was born on Fakemonthy, 01. 15. dont change invalid dates\\\")\\n➞ \\\"I was born on Fakemonthy, 01. 15. dont change invalid dates\\\"\\n```\\n\\n### Notes\\nDon't forget to apply the arbitrary year-prefix rule defined above.\\n\\n- DD/MM/YY -> DD/MM/YYYY\\n- DD.MM.YY -> DD.MM.YYYY\\n- Month, DD. YY. -> Month, DD. YYYY.\\n- DD|MM|YY -> DD|MM|YY (**invalid separator**, means it remains unchanged)\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(small_favor(\\\"I was born on 11/02/98\\\"),\\\"I was born on 11/02/1998\\\")\\nTest.assert_equals(small_favor(\\\"I was born on 11/02/98 and what about you?\\\"),\\\"I was born on 11/02/1998 and what about you?\\\", \\\"dont slice the string but instead parse it!\\\")\\nTest.assert_equals(small_favor(\\\"I was born on 11.02.98\\\"),\\\"I was born on 11.02.1998\\\")\\nTest.assert_equals(small_favor(\\\"I was born on 11|02|98\\\"),\\\"I was born on 11|02|98\\\")\\nTest.assert_equals(small_favor(\\\"I was born on 02/11/19\\\"),\\\"I was born on 02/11/2019\\\")\\nTest.assert_equals(small_favor(\\\"I was born on 02.11.19\\\"),\\\"I was born on 02.11.2019\\\")\\nTest.assert_equals(small_favor(\\\"I was born on February, 02. 98.\\\"),\\\"I was born on February, 02. 1998.\\\")\\nTest.assert_equals(small_favor(\\\"I was born on January, 01. 15. and today is 08/10/20\\\"),\\\"I was born on January, 01. 2015. and today is 08/10/2020\\\")\\nTest.assert_equals(small_favor(\\\"I was born on January, 01. 15. and today is October, 08. 20.\\\"),\\\"I was born on January, 01. 2015. and today is October, 08. 2020.\\\")\\nTest.assert_equals(small_favor(\\\"I was born on Fakemonthy, 01. 15. dont change invalid dates\\\"),\\\"I was born on Fakemonthy, 01. 15. dont change invalid dates\\\")\",\"language\":\"python3\",\"quality\":0,\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,3,1,3,3,2,3,5,4,5,1,5,5,4,5,3,5,5,2,2,3,5,5,5,5,3,4,4],\"quality\":[],\"rators\":[\"qD2LrwaDrSdiybLKY\",\"hZW6j5s6RHpx35phy\",\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\",\"s5M5RvgqR9BhB9JoC\",\"yjtdwc2AC4jA2RWtn\",\"xn7uGNKeAwPEkP9oA\",\"mDWNyaaQ9hvPCRzSd\",\"uMxob526prFuTTNve\",\"4Wx8m46eWWadZNuLq\",\"jEYXtpsNHuN9f69Ep\",\"Xk2g4CNFAnYcvxiSr\",\"h4x2jaMdj5aQZbW5g\",\"QxC7zdybu4aex33Jm\",\"8JyqsSbN2FJXPr3cw\",\"DQskEvAv5KiJDPtGF\",\"iS5BrkGLzJyPK7nKt\",\"Cc2Cgj4MWXZxsTooC\",\"8sNv5PTHa7XQ8bNqR\",\"sXyousNEPbHPufbNN\",\"yod5YhKtPqw2GfG9B\",\"J3upzLHuEwXH7Z2hx\",\"gJYuGdkXEWWmGRLzu\",\"tAF9Gf6PiGogbZuWs\",\"J23RcmzbdtBbPCTjT\",\"vBH2Qwy4Jq5BbwXnL\",\"2PufnQcsHsfymufX3\"],\"total\":29},\"flags\":0},\"summary\":\"My friend required some help with an assignment in school and I thought this would be a nice addition to be added as a challenge here as well.\\n\\nCreate a function that takes a sentence and returns a modified sentence abided by these rules:\\nIf you encounter a date within the sentence, in the format DD/MM/YY or DD.MM.YY, you have to change it over to DD/MM/YYYY o\",\"tags\":[\"formatting\",\"strings\",\"regex\"],\"timestamp\":{\"$date\":1602134175576},\"title\":\"One Small Favor\",\"family\":[{\"_id\":\"2qxrxEfTsfQN9H6LB\",\"language\":\"cpp\"},{\"_id\":\"efGS7Yu4kRqEcs4n7\",\"language\":\"javascript\"},{\"_id\":\"FATFWknwgmyc7vDcf\",\"language\":\"python3\"},{\"_id\":\"rjqfxpgwGp6Qya7Yk\",\"language\":\"ruby\"}]}}"]