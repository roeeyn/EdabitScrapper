a["{\"msg\":\"result\",\"id\":\"811\",\"result\":{\"_id\":\"rix73vi9mFYWWqPoA\",\"author\":\"Werdna\",\"authorId\":\"buX4mCQhtXCfBjeno\",\"code\":\"def record_temps(records, currentWeek):\\n\\t\",\"difficulty\":1.3873239436619718,\"familyId\":\"v53xcYrnCf4jeapS6\",\"instructions\":\"You are given two lists that each contain data that represents the min and max weather temperatures for each day of the week.\\n\\nThe records list contains the all-time record low/high temperatures for that day of the week.\\n\\n```\\n[[record low, record high], ...]\\n```\\n\\nThe current week list contains the daily low/high temperatures for each day of the current week.\\n\\n```\\n[[daily low, daily high], ...]\\n```\\n\\nA daily high temperature is considered a new record high if it is higher than the record high for that day of the week. A daily low temperature is considered a new record low if it is lower than the record low for that day of the week.\\n\\nCompare the daily low/high temperatures of the current week to the record lows/highs and return a list with the updated record temperatures.\\n\\n- There may be multiple record temperatures in a week.\\n- If there are no broken records return the original records list.\\n\\n### Example\\n```\\n#             sun       mon      tues       wed      thur      fri       sat\\nrecord_temps([[34, 82], [24, 82], [20, 89],  [5, 88],  [9, 88], [26, 89], [27, 83]],\\n            [[44, 72], [19, 70], [40, 69], [39, 68], [33, 64], [36, 70], [38, 69]])\\n\\n➞           [[34, 82], [19, 82], [20, 89], [5, 88], [9, 88], [26, 89], [27, 83]]\\n```\\nThe previous record low for Monday was 24. The current week's low for Monday was 19. So 19 replaces 24 as Monday's new record low.\\n\\n### Notes\\n- There won't be a record high and record low set on the same day.\\n- Index 0  will always be the low and index 1 will always be the high `[low, high]`.\\n- For reference these temps are °F but you do not need to convert any temperatures.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(record_temps([[34, 82], [24, 82], [20, 89], [5, 88], [9, 88], [26, 89], [27, 83]],\\n        \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[[44, 72], [19, 70], [40, 69], [39, 68], [33, 64], [36, 70], [38, 69]]), \\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[[34, 82], [19, 82], [20, 89], [5, 88], [9, 88], [26, 89], [27, 83]]);\\nTest.assert_equals(record_temps(\\n        [\\n          [25, 80],\\n          [27, 88],\\n          [19, 88],\\n          [23, 85],\\n          [21, 89],\\n          [23, 78],\\n          [17, 79],\\n        ],\\n        [\\n          [40, 70],\\n          [41, 68],\\n          [45, 68],\\n          [39, 65],\\n          [44, 72],\\n          [43, 69],\\n          [37, 68],\\n        ]\\n      ), [\\n      [25, 80],\\n      [27, 88],\\n      [19, 88],\\n      [23, 85],\\n      [21, 89],\\n      [23, 78],\\n      [17, 79],\\n    ])\\nTest.assert_equals(record_temps(\\n        [\\n          [19, 78],\\n          [21, 79],\\n          [22, 90],\\n          [21, 79],\\n          [30, 86],\\n          [25, 82],\\n          [19, 80],\\n        ],\\n        [\\n          [29, 68],\\n          [24, 69],\\n          [28, 63],\\n          [20, 50],\\n          [25, 65],\\n          [28, 56],\\n          [30, 61],\\n        ]\\n      ), [\\n      [19, 78],\\n      [21, 79],\\n      [22, 90],\\n      [20, 79],\\n      [25, 86],\\n      [25, 82],\\n      [19, 80],\\n    ])\\nTest.assert_equals(record_temps(\\n        [\\n          [29, 90],\\n          [19, 78],\\n          [26, 91],\\n          [20, 86],\\n          [29, 79],\\n          [16, 84],\\n          [24, 83],\\n        ],\\n        [\\n          [33, 68],\\n          [38, 58],\\n          [36, 59],\\n          [40, 56],\\n          [37, 69],\\n          [39, 70],\\n          [41, 69],\\n        ]\\n      ), [\\n      [29, 90],\\n      [19, 78],\\n      [26, 91],\\n      [20, 86],\\n      [29, 79],\\n      [16, 84],\\n      [24, 83],\\n    ])\\nTest.assert_equals(      record_temps(\\n        [\\n          [17, 84],\\n          [17, 90],\\n          [28, 85],\\n          [15, 89],\\n          [21, 80],\\n          [6, 86],\\n          [28, 87],\\n        ],\\n        [\\n          [27, 64],\\n          [31, 60],\\n          [33, 59],\\n          [35, 63],\\n          [32, 60],\\n          [35, 66],\\n          [25, 53],\\n        ]\\n      ), [\\n      [17, 84],\\n      [17, 90],\\n      [28, 85],\\n      [15, 89],\\n      [21, 80],\\n      [6, 86],\\n      [25, 87],\\n    ])\\nTest.assert_equals(  record_temps(\\n        [\\n          [30, 88],\\n          [19, 89],\\n          [17, 79],\\n          [26, 93],\\n          [24, 84],\\n          [30, 90],\\n          [17, 90],\\n        ],\\n        [\\n          [33, 60],\\n          [29, 69],\\n          [34, 58],\\n          [36, 55],\\n          [30, 53],\\n          [28, 60],\\n          [29, 62],\\n        ]\\n      ), [\\n      [30, 88],\\n      [19, 89],\\n      [17, 79],\\n      [26, 93],\\n      [24, 84],\\n      [28, 90],\\n      [17, 90],\\n    ])\\nTest.assert_equals( record_temps(\\n        [\\n          [22, 91],\\n          [13, 79],\\n          [11, 80],\\n          [30, 91],\\n          [18, 77],\\n          [19, 85],\\n          [7, 87],\\n        ],\\n        [\\n          [32, 61],\\n          [23, 69],\\n          [31, 70],\\n          [31, 66],\\n          [28, 59],\\n          [27, 55],\\n          [23, 51],\\n        ]\\n      ), [\\n      [22, 91],\\n      [13, 79],\\n      [11, 80],\\n      [30, 91],\\n      [18, 77],\\n      [19, 85],\\n      [7, 87],\\n    ])\\nTest.assert_equals(record_temps(\\n        [\\n          [39, 103],\\n          [38, 99],\\n          [38, 104],\\n          [31, 99],\\n          [34, 103],\\n          [36, 101],\\n          [35, 99],\\n        ],\\n        [\\n          [53, 93],\\n          [58, 91],\\n          [49, 94],\\n          [51, 95],\\n          [54, 95],\\n          [56, 98],\\n          [60, 99],\\n        ]\\n      ), [\\n      [39, 103],\\n      [38, 99],\\n      [38, 104],\\n      [31, 99],\\n      [34, 103],\\n      [36, 101],\\n      [35, 99],\\n    ])\\nTest.assert_equals(record_temps(\\n        [\\n          [42, 106],\\n          [37, 97],\\n          [31, 101],\\n          [30, 100],\\n          [38, 101],\\n          [29, 98],\\n          [27, 99],\\n        ],\\n        [\\n          [52, 93],\\n          [61, 91],\\n          [60, 95],\\n          [60, 97],\\n          [68, 93],\\n          [70, 100],\\n          [57, 96],\\n        ]\\n      ), [\\n      [42, 106],\\n      [37, 97],\\n      [31, 101],\\n      [30, 100],\\n      [38, 101],\\n      [29, 100],\\n      [27, 99],\\n    ])\\nTest.assert_equals(record_temps(\\n        [\\n          [40, 98],\\n          [30, 100],\\n          [35, 100],\\n          [29, 105],\\n          [33, 100],\\n          [27, 96],\\n          [29, 97],\\n        ],\\n        [\\n          [60, 97],\\n          [57, 99],\\n          [65, 98],\\n          [59, 97],\\n          [63, 101],\\n          [57, 93],\\n          [69, 100],\\n        ]\\n      ), [\\n      [40, 98],\\n      [30, 100],\\n      [35, 100],\\n      [29, 105],\\n      [33, 101],\\n      [27, 96],\\n      [29, 100],\\n    ])\\nTest.assert_equals(record_temps(\\n        [\\n          [45, 99],\\n          [32, 99],\\n          [32, 102],\\n          [28, 103],\\n          [31, 99],\\n          [34, 104],\\n          [32, 100],\\n        ],\\n        [\\n          [65, 94],\\n          [62, 94],\\n          [72, 100],\\n          [68, 100],\\n          [71, 96],\\n          [69, 100],\\n          [72, 99],\\n        ]\\n      ), [\\n      [45, 99],\\n      [32, 99],\\n      [32, 102],\\n      [28, 103],\\n      [31, 99],\\n      [34, 104],\\n      [32, 100],\\n    ])\\nTest.assert_equals(record_temps(\\n        [\\n          [39, 101],\\n          [35, 98],\\n          [30, 97],\\n          [33, 103],\\n          [29, 98],\\n          [36, 97],\\n          [30, 103],\\n        ],\\n        [\\n          [69, 100],\\n          [65, 97],\\n          [70, 95],\\n          [73, 100],\\n          [75, 99],\\n          [73, 100],\\n          [70, 100],\\n        ]\\n      ), [\\n      [39, 101],\\n      [35, 98],\\n      [30, 97],\\n      [33, 103],\\n      [29, 99],\\n      [36, 100],\\n      [30, 103],\\n    ])\\nTest.assert_equals(record_temps(\\n        [\\n          [50, 105],\\n          [40, 100],\\n          [24, 99],\\n          [29, 99],\\n          [38, 100],\\n          [31, 100],\\n          [33, 100],\\n        ],\\n        [\\n          [70, 102],\\n          [70, 101],\\n          [69, 97],\\n          [68, 98],\\n          [71, 100],\\n          [72, 103],\\n          [73, 102],\\n        ]\\n      ), [\\n      [50, 105],\\n      [40, 101],\\n      [24, 99],\\n      [29, 99],\\n      [38, 100],\\n      [31, 103],\\n      [33, 102],\\n    ])\\nTest.assert_equals(record_temps(\\n        [\\n          [37, 100],\\n          [31, 104],\\n          [38, 102],\\n          [30, 97],\\n          [40, 107],\\n          [29, 99],\\n          [28, 101],\\n        ],\\n        [\\n          [71, 98],\\n          [71, 100],\\n          [72, 101],\\n          [70, 99],\\n          [68, 99],\\n          [69, 97],\\n          [69, 99],\\n        ]\\n      ), [\\n      [37, 100],\\n      [31, 104],\\n      [38, 102],\\n      [30, 99],\\n      [40, 107],\\n      [29, 99],\\n      [28, 101],\\n    ])\\nTest.assert_equals(record_temps(\\n        [\\n          [32, 99],\\n          [40, 97],\\n          [25, 101],\\n          [34, 97],\\n          [19, 103],\\n          [35, 98],\\n          [36, 102],\\n        ],\\n        [\\n          [72, 96],\\n          [70, 99],\\n          [65, 100],\\n          [71, 97],\\n          [73, 99],\\n          [65, 100],\\n          [66, 100],\\n        ]\\n      ), [\\n      [32, 99],\\n      [40, 99],\\n      [25, 101],\\n      [34, 97],\\n      [19, 103],\\n      [35, 100],\\n      [36, 102],\\n    ])\\nTest.assert_equals(record_temps(\\n        [\\n          [42, 98],\\n          [35, 105],\\n          [29, 98],\\n          [33, 104],\\n          [29, 104],\\n          [30, 102],\\n          [32, 98],\\n        ],\\n        [\\n          [62, 98],\\n          [69, 101],\\n          [68, 96],\\n          [73, 100],\\n          [69, 100],\\n          [70, 99],\\n          [72, 97],\\n        ]\\n      ), [\\n      [42, 98],\\n      [35, 105],\\n      [29, 98],\\n      [33, 104],\\n      [29, 104],\\n      [30, 102],\\n      [32, 98],\\n    ])\\n\\t\\n\\t# Author: ABO\",\"language\":\"python3\",\"quality\":4.416666666666667,\"summary\":\"You are given two lists that each contain data that represents the min and max weather temperatures for each day of the week.\\n\\nThe records list contains the all-time record low/high temperatures for that day of the week.\\n\\n[[record low, record high], ...]\\n\\nThe current week list contains the daily low/high temperatures for each day of the current week.\\n\\n[[daily\",\"tags\":[\"loops\",\"arrays\"],\"timestamp\":{\"$date\":1614890689902},\"title\":\"Record Temperatures\",\"stats\":{\"completed\":{\"total\":170,\"ratings\":[1,1,1,1,1,0,0,2,2,0,0,0,0,0,2,2,0,1,0,1,0,1,0,3,0,2,2,5,1,1,1,2,1,2,1,2,2,1,1,0,2,2,1,1,3,1,1,1,1,2,0,2,1,1,2,1,1,1,1,1,2,1,1,0,2,3,1,3,2,2,0,2,0,1,2,1,2,1,4,2,1,2,2,5,0,1,4,1,2,2,2,2,2,2,2,2,2,2,2,1,0,2,0,1,1,1,2,1,2,0,2,2,1,2,1,2,2,1,2,0,1,1,1,3,1,1,2,1,0,1,1,2,1,2,2,2,2,2,1,1,2,2],\"quality\":[4,5,2,2,5,5,5,5,5,4,5,5,5,5,5,5,5,5,1,5,3,5,5,5],\"rators\":[\"buX4mCQhtXCfBjeno\",\"iS5BrkGLzJyPK7nKt\",\"pPpmP7xeJzGgK362R\",\"gb9rvGus2Jv7bjZSs\",\"bQPZKqjjN7NMXASsZ\",\"QRv96jmNaYsWkxQEG\",\"FEYpu9RWysAgW3XnP\",\"5HCu9Ydd86QgHDRNP\",\"DEDniTrstQYGounXT\",\"zd9FLSzsGz3evKafy\",\"xKzHKvG7Hux9joJqs\",\"YcCLwitFMAEJSnxAW\",\"XD5nmvKQchKezPXhy\",\"iojEnnY9FsMfYzp6f\",\"Ds7L5bksw2QRHjrKL\",\"66a9xX73nmTEuKs9k\",\"cR3ibTMxLyEdDFCHY\",\"3cF6NXq3ZEwdkgSjb\",\"JKbEBybAsiKrmcqof\",\"8JyqsSbN2FJXPr3cw\",\"AFfw7cGg83uYk2Miy\",\"oBcs8GLX2ZFLXQy8y\",\"J5T8gZqiZXFuFDTQ7\",\"t3wwRMtYdLYBwWR4J\",\"dJzNF59j2p8jWZxiQ\",\"NP2RxM3eBd3drnDwP\",\"tdfY4iBvD7oh2ufnN\",\"ghW3Nvg42xRxFzjPi\",\"8HAR8XNbN69nuEDFd\",\"cAP3n5NY64uoMwzRR\",\"dAJYkPoHW3CEDuczE\",\"CKHKhvJcq9jNMqrmd\",\"tkNJoJGJqvpoMKeS9\",\"3LcQCzFrAPpLCRsL4\",\"2QGRoQn2dRq3scu7k\",\"p8qqFdJ3FSk5x9z3G\",\"vCeeMuYDbz3MB4vsk\",\"9queh6zL4uB9PikvA\",\"8PwfYqoDQFThzNtvf\",\"GGdmhAvxXhqhhibJN\",\"tAF9Gf6PiGogbZuWs\",\"XrqNzJ2FRG8HnGiR6\",\"sHjfbGQGLHE6JR6qu\",\"gJYuGdkXEWWmGRLzu\",\"s5M5RvgqR9BhB9JoC\",\"BrTDhPJcACL2bsrpJ\",\"CHvzhtXnv8HTbPQ56\",\"NzbRqGWspQnWMoDrF\",\"Yp7uvStL97cC9fKkY\",\"8JMhoyJ5sBNFAn8TW\",\"DXEsQPsQt95hy2Kcj\",\"yjtdwc2AC4jA2RWtn\",\"eMuCpJ2spXWkJjWNz\",\"fTNQmMvTZhhiGBCMe\",\"AJexRBN9cYQmqvYu6\",\"PC3pLs36zNzpRDSuE\",\"Fk9kLwoG4Brf4KsKf\",\"5XiuAqicKD4hBdu63\",\"mvJBakQ35CWAnbbEZ\",\"9Ly8afdtofp8DXzrt\",\"YRAzEBJoLvSaiPtYx\",\"3nied3n8KG8RSNixH\",\"AasGs8AeX9Lcb9xJn\",\"utTuvGdmu2sBHWBhQ\",\"rrSC943cCKNG48sH4\",\"EfxwqhYdapX3dMQC2\",\"T6Rm8mREPMZSftzrC\",\"4TmgHkn5vqyHK3sYC\",\"srJ34BaybkQh3qRkM\",\"HqmxnQJM66Y57twhn\",\"J3upzLHuEwXH7Z2hx\",\"FxbTzThBiTnRzfirA\",\"aEm3Wvj2rFYRL8Lrb\",\"DPi9QGLctq2y76KuE\",\"2Qk2mFu9HBFzrB24i\",\"Afnps7TJQuS9sipMb\",\"jkbavR2ATFJcpmo8M\",\"ey3CASd6Je5LEJzfB\",\"JS3hNM3XXkxPdg3yk\",\"fSQSHjW3e72MrWxbD\",\"YA7SDhpgEtsqynvNL\",\"N2wnZXkhDH86mgjQ8\",\"Jqk2uJZZxEv5wZFze\",\"MKT7khMBGXzA22ykf\",\"Lm6ChQCWBmaikmk5J\",\"jBo3xAopr37GFzY8g\",\"9LrF5o2TK2iE8BZJh\",\"dK7DTve8Aav59WjzS\",\"YQeqr3HzwFudKeZ46\",\"wbEdSRoNSZaF4tYNy\",\"FDQPig295GLkvnnvc\",\"xqoisFmSjeDeAhuXF\",\"9m2aYvgi34y2f7fhz\",\"jFbLqgnqm68vKF3Bw\",\"HKqhMHf2SLBfG37C8\",\"2x5Dkd3zxW5Bmjam8\",\"s66ybqHn4MG953AsN\",\"Si6jT3DnRMXYd27k9\",\"FMyZPN6odEFtfuimF\",\"kA4Q5PHYQNoLtqf7T\",\"dSd7wHgXGQeG5BQ2P\",\"dYPkStFnLvAMsHSzZ\",\"xXNhgawxxHafw4WFZ\",\"e6paQz3qBXcnBb5JL\",\"54BFnXEjY3FuRNYpN\",\"45GX4BmrtSNeJ7XbS\",\"nc7bRhkxgKyqusYe3\",\"yod5YhKtPqw2GfG9B\",\"2PufnQcsHsfymufX3\",\"3SycWyFPDHp9meMXp\",\"u5u2YpHXiNgzDNJdX\",\"AQSqD9oNv2uPfxZCR\",\"gzkTwGBiCopvFeNAF\",\"uGuS9YRXW2nj4p6zf\",\"Ce6tXQ9cjHSY5M9HP\",\"w3QDkmjZj2dAFDsjq\",\"qAby4AWXmTNeusvg3\",\"gXTAie79kiw28tx5u\",\"KHtDsPMy4rLq8yfv4\",\"jWbd7SYDzLPjc9EDh\",\"rCrbqMiaGPgHYTNxu\",\"dzS6WBTMHyFEag6Fp\",\"AMpQSjKsRqhCDyS2j\",\"8BFSTCnoe2QggN64c\",\"6LbPw9yW6HHDfn8B8\",\"2fxapKr8XGdNeaKi2\",\"wjc4iejpErBhxWwHo\",\"RoGGD5cpHb4ftdLDv\",\"QWjsXnLaJ7xfL3Amq\",\"yAouD3PxzED8a4gap\",\"Qyfyyw6oC4EHAndzo\",\"B4y8aoyXJtskYPFEL\",\"pduNK68oazqQTtbLp\",\"uHwrphqMasgPdYJdi\",\"xjyixzXzqqqTfJARd\",\"ctbThYbufFCYbRK4f\",\"qB6KSTYC6H2TQEQY6\",\"3KkyQm77zsew58Dc2\",\"syRNbbPdLCGXbH2Gy\",\"RGN3QTb5LXj4ZPPkj\",\"nFbmNzMQ38TncmfQX\",\"Hu4SkoNyWCP4vmsZE\",\"5Dd7XwALvvMMwS4Fb\",\"mxX4rH5ELYkdZ2Mbw\",\"YXQvrgeiGzLd6cTW9\",\"5QN8R22z43SrwoHDz\",\"QZ3rEDRyuCdvnZukf\",\"rDgKHd6ZSSpboiAj7\",\"mBtSsKTHdQniYAfsZ\",\"RcR2rAdhJr95XGEQM\",\"2HfNkb2SoqdyjKW3o\",\"K42ijC8Jy8GHBnobP\",\"RfbjShbg8jmhyNtJh\",\"StNu7DPyTgEStZsMY\",\"QDiHtAiYuyEEmoCgv\",\"BJp2WkwLWGHHB5oQW\",\"Wi4H6ayKsNDWWQCG5\",\"ozQAuaiAAN6wsMcTT\",\"WQubx7DAkG6WZE8FA\",\"FiaTpm7ehfDv43wSG\",\"wrL4iX2CCSqDCCty3\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"oR2wK4q7Z8wfWr7CJ\",\"language\":\"javascript\"},{\"_id\":\"rix73vi9mFYWWqPoA\",\"language\":\"python3\"},{\"_id\":\"iQowMxboTXmusqmjw\",\"language\":\"ruby\"}]}}"]