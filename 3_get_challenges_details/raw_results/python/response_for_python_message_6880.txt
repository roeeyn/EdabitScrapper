a["{\"msg\":\"result\",\"id\":\"2148\",\"result\":{\"_id\":\"2C3gtb4treAFyWJMg\",\"author\":\"Donnamae\",\"authorId\":\"yZvzB3qFb8pkHy4dg\",\"code\":\"def polybius(text):\\n\\t\",\"difficulty\":3.2551724137931033,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"tM4EH8R762TBmk4kz\",\"instructions\":\"The **Polybius Square** cipher is a simple substitution cipher that makes use of a 5x5 square grid. The letters A-Z are written into the grid, with \\\"I\\\" and \\\"J\\\" typically sharing a slot (as there are 26 letters and only 25 slots).\\n\\n| |1|2|3|4|5\\n---|---|---|---|---|---\\n**1**|A|B|C|D|E\\n**2**|F|G|H|I/J|K\\n**3**|L|M|N|O|P\\n**4**|Q|R|S|T|U\\n**5**|V|W|X|Y|Z\\n\\nTo encipher a message, each letter is merely replaced by its row and column numbers in the grid.\\n\\nCreate a function that takes a plaintext or ciphertext message, and returns the corresponding ciphertext or plaintext.\\n\\n### Examples\\n```\\npolybius(\\\"Hi\\\") ➞ \\\"2324\\\"\\n\\npolybius(\\\"2324  4423154215\\\") ➞ \\\"hi there\\\"\\n\\npolybius(\\\"543445 14343344 522433 21422415331443 52244423 4311311114\\\") ➞ \\\"you dont win friends with salad\\\"\\n```\\n\\n### Notes\\nAs \\\"I\\\" and \\\"J\\\" share a slot, both are enciphered into 24, but deciphered only into \\\"I\\\" (see third and fourth test).\",\"lab\":\"Test.assert_equals(polybius('4323343531242144243322 2443 11 51241344243231154343 1342243215 31242515 3545331323243322 43343215343315 2433 442315 14114225'), \\\"shoplifting is a victimless crime like punching someone in the dark\\\")\\nTest.assert_equals(polybius('Hi'), '2324')\\nTest.assert_equals(polybius(\\\"Just because I don't care doesn't mean that I don't understand\\\"), '24454344 12151311454315 24 14343344 13114215 143415433344 32151133 44231144 24 14343344 45331415424344113314', \\\"Disregard punctuation, but keep spaces\\\")\\nTest.assert_equals(polybius('24454344 12151311454315 24 14343344 13114215 143415433344 32151133 44231144 24 14343344 45331415424344113314'), 'iust because i dont care doesnt mean that i dont understand')\\nTest.assert_equals(polybius('543445 14343344 522433 21422415331443 52244423 4311311114'), 'you dont win friends with salad')\\nTest.assert_equals(polybius('The lesson is: never try'), '442315 311543433433 2443 3315511542 444254')\\n\\n# Credit: Simpsons\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,3,3,3,2,3,4,3,4,5,4,4,2,4,3,3,5,2,5,4,4,1,4,5,5,2,2,5,5,4,5,5,5,5,3,3,3,2,5,0,2,5,0,2,0,5,5,0,3,4,1,0,5,5,4,2,2,3,4,2,2,5,2,3,5,5,4,4,5,1,3,1,5,5,3,3,2,4,3,5,2,5,4,5,3,4,3,2,5,0,0,5,5,5,0,2,3,3,3,4,1,5,4,0,3,3,5,4,5,3,5,3,5,3,5,0,2,5,3,3,5,3,3,2,1,1,2,5,5,5,3,4,5,2,0,3,5,3,3,5,4],\"rators\":[\"tAF9Gf6PiGogbZuWs\",\"8JyqsSbN2FJXPr3cw\",\"AYaEkTWLMmfzpwejr\",\"MzN9N2Z9AxjTv3sB5\",\"gb9rvGus2Jv7bjZSs\",\"cecRRLKKu5R62D5xE\",\"yZvzB3qFb8pkHy4dg\",\"7g3vZaQXhLpxrajyg\",\"cNq8QuBtjR3RJ44cm\",\"MXjxGML2X75x64vJo\",\"7REMi9ZPhC4R5qveo\",\"PFjMZGHNAPTkgd7tq\",\"7G4BWvmKhTvXg8Mei\",\"XxEryRzJT6zFcePCx\",\"G2byapinS4HELHHz2\",\"EAMb37R2eqve4MwLF\",\"fWegdXx4hQmpR5M85\",\"3mLcjFCw4MPHAEcKk\",\"aCNWav8S8Try9RkC6\",\"ogyeeaEAjmdSBsnta\",\"N5zhhxuniwSTvwAsc\",\"bRD4Ls3FoPdiBBFvt\",\"Ti5BF4jnruwNNzHY8\",\"4rg9g6TKYZ8aifrYc\",\"BAXQYFC46bxoDjEg4\",\"5Qvy7fNM2YEQ6PtbY\",\"6W2GSzrYjMD9ANBFY\",\"nN5iAnMzdgLLZLosm\",\"7BvK9WWXi9Arqh63Q\",\"HqmxnQJM66Y57twhn\",\"JiDXhxGzzSuXrBnmE\",\"PuJDHtAaX6vXeJJTC\",\"qJZsi5rhRnWA38FbA\",\"3SKmXhcLPPkmQhjip\",\"u5u2YpHXiNgzDNJdX\",\"oWLvfc6Apa5ebBhy5\",\"s5M5RvgqR9BhB9JoC\",\"jDgJ2fdFS76TSorNc\",\"FHSJnAYTbcsKFgeQa\",\"DwetpbChQM4r6Gwah\",\"8PwfYqoDQFThzNtvf\",\"hwLAvyumMvYXNv3j5\",\"Jqk2uJZZxEv5wZFze\",\"sZDYNicocwXesSMXb\",\"pzZMMmJRaxwGAgaTH\",\"LzAr38NtigjfEfdzR\",\"X4iqEdg7dPjFpoASw\",\"nmXg7Hfeh3jMLHSsa\",\"BZ9aDwsT223J4ZG74\",\"azHSATBuuQ5wz9bvB\",\"fMR9RcfgPJWiLgx7k\",\"4oj74SdrYfpJgEAmd\",\"t7BnRyo7NH5Nx22HR\",\"sFPqa2S5bySJt5F7w\",\"wMdYEpWhq7ftaA8Sg\",\"SGhPxX5bHGL8zZqtt\",\"ovqQRfyvmEDypjrnC\",\"LQxof8pGabGuWP7Gn\",\"ydEdzuCCZt4yny9Rq\",\"4xwButZn34q92d9Yn\",\"bLpgu8xTdpDPFSAsM\",\"LiW7nXr48ko64x82W\",\"aRqQ42J5zqCmBNd8w\",\"2rbhQRJ7y5m6nsPwx\",\"GJmKcqu7xppQyBaTt\",\"csrxsMsk57AAQ5ngF\",\"oCowgWfkwQR4jnyEd\",\"Cc2Cgj4MWXZxsTooC\",\"zxmtE2mYR4xQzTHoy\",\"aEm3Wvj2rFYRL8Lrb\",\"mS2oaNzM5vCgLjYu5\",\"AJwBauGHyrbqgDYce\",\"Zhy5X7BZnqk8hacEw\",\"9uZpgAtSuPZ7W7DL6\",\"NCgqvvXaGksrMDiw7\",\"7djAghy9fBhtLnKw3\",\"Nua6T3dBurBy3Qfg9\",\"AasGs8AeX9Lcb9xJn\",\"yKttxy9JGn5Jzwuj6\",\"8DH2opL3T5kdcoiRJ\",\"bJaPCBx63YxdJAuTS\",\"nPfdEqn8RZmDzAeMW\",\"5H9MNfC4DPwxbakTf\",\"HmKFZqFH9YC346djy\",\"MxQXA7kigYpyBS37i\",\"ywk3XGvcmpTgRxwZa\",\"t9Sz6uBgobfCBJzGL\",\"neRxsjCeKWgXmLKDL\",\"pHpGCimfadYznq5Wb\",\"W5TajitmCyxz87zAC\",\"ZSbcGKj67qFTPfzqh\",\"GypbCPC7MaMm8Pfpx\",\"HRdtZBvxDh8YzkvQk\",\"Ecg4m7srYGgZsb4Ck\",\"bCFecqKyXTCnGgPSc\",\"bJxaKHJqR82EWw8Su\",\"ya2ofFqYRC57bfbND\",\"v74rfadNwQeFf2MAt\",\"Kg94pDSdZJ2wSkMcY\",\"3MybBtCNPcFHLMYmJ\",\"6428wKHtwKkFdvBs5\",\"gBtn7gSMiSJtAGRoE\",\"ENS9wE2HHz2Y5DjRk\",\"Nfsj4eNFDjaFa39ga\",\"uwqyDfcC4mjagS5kN\",\"5dHucvf2qBYyKim7X\",\"fznzd3qnvtbFkkizz\",\"Z4M3NAa4TXquMNkHe\",\"jFcHRfu77aNu6YpZg\",\"pPtmnJ7q9QchoG2Jq\",\"PJQJDjZaBxTXu4FyG\",\"rvj8KP5oXbit6cHNu\",\"xn7uGNKeAwPEkP9oA\",\"GgLd4eWBu79mdjtkP\",\"hZW6j5s6RHpx35phy\",\"4fhjJBvLBWh6QeSih\",\"cxABox46qWvJRyidE\",\"yod5YhKtPqw2GfG9B\",\"J23RcmzbdtBbPCTjT\",\"oZiGwL535nJ5ZMJr7\",\"EH68sDGGufTc5vifi\",\"FdB7yZRr2ZjaFQcpj\",\"h4x2jaMdj5aQZbW5g\",\"n2e74kbZHY3u7Cgej\",\"iS5BrkGLzJyPK7nKt\",\"waNsY2k4ndReyEREk\",\"5rX3qPFdvRQ9G7xZQ\",\"b6NLccZmmaAanzEZ4\",\"c4DsFkzDj9CptDgDj\",\"HF28xZKSLM9wEuqNg\",\"RDdXanzLqFzuDF2uZ\",\"xyMcsLZsKgcbPzZ4N\",\"4EgBCgEyiZA2hRsh4\",\"9LfZc6753HJxzkgc3\",\"58M252WF7SPRinfBx\",\"XNmN6ztj36a7eChbD\",\"p8qqFdJ3FSk5x9z3G\",\"d6iEb2BDDofyeePh9\",\"XHShZ3WMPgGEA2vkR\",\"8pBm6An63TSSA89YB\",\"b3Dk2LqoEgripS3Y3\",\"8nE8QHnFYsHCFebte\",\"8sNv5PTHa7XQ8bNqR\",\"2PufnQcsHsfymufX3\",\"hBKf7LeSP6i2saXjk\",\"hRAd998MG8Jzdpxj6\",\"QRv96jmNaYsWkxQEG\",\"J3upzLHuEwXH7Z2hx\",\"4sHkH3t9CJYhbDwjM\",\"yjtdwc2AC4jA2RWtn\",\"gJYuGdkXEWWmGRLzu\",\"oEkDZvzwDpH3oiyJh\",\"gWunBquqRKWcCHo79\",\"DrTeBk3bpLqhsLS4g\",\"GGXypNoWDGPpQd3En\",\"NojQykDfP7WjHckg4\",\"wEB7KWKB3hHPEyZzB\",\"gKnWjDjwrJh7MK2df\",\"nQRzZKeDKuLRf9chX\",\"y2wzvTmp4wRQuf4PR\",\"n88bzTaZbvoRgHfQ6\",\"DPi9QGLctq2y76KuE\",\"cZFrJSFYf9BzAQug7\",\"buX4mCQhtXCfBjeno\"],\"total\":182,\"quality\":[5,3,5,5,5,5,5,5,1,5,5,5,3,4,5,5,4,4,5,4,5,4,5,5]},\"flags\":0},\"subscribers\":[\"yZvzB3qFb8pkHy4dg\"],\"summary\":\"The Polybius Square cipher is a simple substitution cipher that makes use of a 5x5 square grid. The letters A-Z are written into the grid, with \\\"I\\\" and \\\"J\\\" typically sharing a slot (as there are 26 letters and only 25 slots).\\n\\n| |1|2|3|4|5\\n---|---|---|---|---|---\\n1|A|B|C|D|E\\n2|F|G|H|I/J|K\\n3|L|M|N|O|P\\n4|Q|R|S|T|U\\n5|V|W|X|Y|Z\\n\\nTo encipher a message, each letter\",\"tags\":[\"cryptography\",\"arrays\",\"strings\"],\"timestamp\":{\"$date\":1561556095836},\"title\":\"Polybius Square (Basic)\",\"isHidden\":false,\"quality\":4.458333333333333,\"family\":[{\"_id\":\"JukSvPFLwkdXBexCf\",\"language\":\"cpp\"},{\"_id\":\"sGYuA9fEJLHqEBSjA\",\"language\":\"javascript\"},{\"_id\":\"2C3gtb4treAFyWJMg\",\"language\":\"python3\"},{\"_id\":\"KdJ5pFoGFw9kPfMry\",\"language\":\"ruby\"}]}}"]