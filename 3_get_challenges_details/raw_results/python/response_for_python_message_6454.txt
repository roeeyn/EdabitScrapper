a["{\"msg\":\"result\",\"id\":\"1935\",\"result\":{\"_id\":\"fRB5QRYn5WC8jMGTe\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"def time_difference(city_a, timestamp, city_b):\\n\\t\",\"difficulty\":2.7,\"familyId\":\"cmAGteXLYkK3asJws\",\"instructions\":\"In this challenge, the goal is to calculate what time it is in two different cities. You're given a string `city_a` and the related string `timestamp` (time in `city_a`) with the date formatted in full **U.S. notation**, as in this example:\\n\\n```\\n\\\"July 21, 1983 23:01\\\"\\n```\\n\\nYou have to return a new timestamp with date and corresponding time in `city_b`, formatted as in this example:\\n\\n```\\n\\\"1983-7-22 23:01\\\"\\n```\\n\\nSee the table below for a list of given cities and their **GMT** (_Greenwich Mean Time_) hours offsets.\\n\\n|GMT|City|\\n|---|---|\\n| - 08:00 | Los Angeles\\n| - 05:00 | New York\\n| - 04:30 | Caracas\\n| - 03:00 | Buenos Aires\\n|   00:00 | London\\n| + 01:00 | Rome\\n| + 03:00 | Moscow\\n| + 03:30 | Tehran\\n| + 05:30 | New Delhi\\n| + 08:00 | Beijing\\n| + 10:00 | Canberra\\n\\n### Examples\\n```\\ntime_difference(\\\"Los Angeles\\\", \\\"April 1, 2011 23:23\\\", \\\"Canberra\\\") ➞ \\\"2011-4-2 17:23\\\"\\n# Can be a new day.\\n\\ntime_difference(\\\"London\\\", \\\"July 31, 1983 23:01\\\", \\\"Rome\\\") ➞ \\\"1983-8-1 00:01\\\"\\n# Can be a new month.\\n\\ntime_difference(\\\"New York\\\", \\\"December 31, 1970 13:40\\\", \\\"Beijing\\\") ➞ \\\"1971-1-1 02:40\\\"\\n# Can be a new year.\\n```\\n### Notes\\n- Pay attention to hours and minutes, a leading `0` is needed in the returned timestamp when they're a single digit.\\n- Pay attention to cities with half hours offsets.\",\"lab\":\"Test.assert_equals(time_difference(\\\"Los Angeles\\\", \\\"April 1, 2011 23:23\\\", \\\"Canberra\\\"), \\\"2011-4-2 17:23\\\", \\\"Example #1\\\")\\nTest.assert_equals(time_difference(\\\"London\\\", \\\"July 31, 1983 23:01\\\", \\\"Rome\\\"), \\\"1983-8-1 00:01\\\", \\\"Example #2\\\")\\nTest.assert_equals(time_difference(\\\"New York\\\", \\\"December 31, 1970 13:40\\\", \\\"Beijing\\\"), \\\"1971-1-1 02:40\\\", \\\"Example #3\\\")\\nTest.assert_equals(time_difference(\\\"London\\\", \\\"August 20, 1985 12:23\\\", \\\"Buenos Aires\\\"), \\\"1985-8-20 09:23\\\")\\nTest.assert_equals(time_difference(\\\"Rome\\\", \\\"December 21, 1987 15:11\\\", \\\"New Delhi\\\"), \\\"1987-12-21 19:41\\\")\\nTest.assert_equals(time_difference(\\\"Canberra\\\", \\\"March 1, 2009 18:32\\\", \\\"Caracas\\\"), \\\"2009-3-1 04:02\\\")\\nTest.assert_equals(time_difference(\\\"Moscow\\\", \\\"September 14, 1953 19:54\\\", \\\"New York\\\"), \\\"1953-9-14 11:54\\\")\\nTest.assert_equals(time_difference(\\\"Beijing\\\", \\\"November 18, 1999 02:03\\\", \\\"New Delhi\\\"), \\\"1999-11-17 23:33\\\")\\nTest.assert_equals(time_difference(\\\"Tehran\\\", \\\"June 3, 1977 11:18\\\", \\\"Moscow\\\"), \\\"1977-6-3 10:48\\\")\\nTest.assert_equals(time_difference(\\\"Caracas\\\", \\\"January 21, 1990 12:44\\\", \\\"London\\\"), \\\"1990-1-21 17:14\\\")\\nTest.assert_equals(time_difference(\\\"New York\\\", \\\"February 21, 2016 17:56\\\", \\\"Rome\\\"), \\\"2016-2-21 23:56\\\")\",\"language\":\"python3\",\"summary\":\"In this challenge, the goal is to calculate what time it is in two different cities. You're given a string citya and the related string timestamp (time in citya) with the date formatted in full U.S. notation, as in this example:\\n\\n\\\"July 21, 1983 23:01\\\"\\n\\nYou have to return a new timestamp with date and corresponding time in city_b, formatted as in this example:\",\"tags\":[\"dates\",\"formatting\"],\"timestamp\":{\"$date\":1571526482650},\"title\":\"Time Around the World\",\"stats\":{\"completed\":{\"total\":51,\"ratings\":[2,2,2,2,2,3,3,3,3,0,2,3,2,2,2,3,3,3,3,3,2,3,3,4,3,5,2,5,2,2,4,2,2,3,5,2,4,3,4,3,2,2,1,4,3,3,4,0,3,2],\"rators\":[\"tAF9Gf6PiGogbZuWs\",\"8JyqsSbN2FJXPr3cw\",\"HqmxnQJM66Y57twhn\",\"ekvdWQoiFkX5cQbk9\",\"FHSJnAYTbcsKFgeQa\",\"m6Gp2a9B8G3sXfrJy\",\"2fxapKr8XGdNeaKi2\",\"gb9rvGus2Jv7bjZSs\",\"s5M5RvgqR9BhB9JoC\",\"Jqk2uJZZxEv5wZFze\",\"5J4tAkdA45c76xAfk\",\"pmgFEciNrd3ES9tuu\",\"PytNZK9mNiRiZxPrm\",\"iiuRN2zai4D8boafQ\",\"AasGs8AeX9Lcb9xJn\",\"Yk3FrJnFJyAkCjYyp\",\"8PwfYqoDQFThzNtvf\",\"2iFe3EHEH2YdhSKrs\",\"Phd2FdPjo9BhBfvKh\",\"aEm3Wvj2rFYRL8Lrb\",\"6E8GoWCrHpDvHZjWG\",\"BByKDngfPvW6w4m7d\",\"DwetpbChQM4r6Gwah\",\"TYqJKPuQyJDNEprDy\",\"YsAz93yZw8KKPupKv\",\"P7XAauR6pbNvGP3hM\",\"KXYHpCQvmTtpbGXYg\",\"6c4xjEdFxdYw5xGrt\",\"odhwHrfwJvNxcrBCt\",\"gJYuGdkXEWWmGRLzu\",\"ZNnsMeNkdDhHjSrZb\",\"bJaPCBx63YxdJAuTS\",\"YRstQuthRkFeBiXug\",\"sz8ufn9i8zeiGWpAy\",\"xn7uGNKeAwPEkP9oA\",\"R4SjTgDnpigJYDLyL\",\"4FYe2Q6Gh47nj2XPP\",\"yjtdwc2AC4jA2RWtn\",\"8sNv5PTHa7XQ8bNqR\",\"J3upzLHuEwXH7Z2hx\",\"p8qqFdJ3FSk5x9z3G\",\"iS5BrkGLzJyPK7nKt\",\"hkiz2Nv927cYGrA86\",\"iojEnnY9FsMfYzp6f\",\"2PufnQcsHsfymufX3\",\"gKnWjDjwrJh7MK2df\",\"nQRzZKeDKuLRf9chX\",\"oBcs8GLX2ZFLXQy8y\"],\"quality\":[5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":5,\"family\":[{\"_id\":\"TaFvkCoHo5Y25zwxX\",\"language\":\"cpp\"},{\"_id\":\"d9DKamDvmX6TiSd5u\",\"language\":\"java\"},{\"_id\":\"5fN46pGqkjd9EQXca\",\"language\":\"javascript\"},{\"_id\":\"fRB5QRYn5WC8jMGTe\",\"language\":\"python3\"},{\"_id\":\"42Yvs3M93PJTJhRkJ\",\"language\":\"ruby\"}]}}"]