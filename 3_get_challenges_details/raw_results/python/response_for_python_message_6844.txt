a["{\"msg\":\"result\",\"id\":\"2127\",\"result\":{\"_id\":\"v2eHXTn2qobw2WYJP\",\"author\":\"lllll\",\"authorId\":\"DNACg4rcgZsPtYGZ8\",\"code\":\"def minesweeper_numbers(board):\\n\\t\",\"difficulty\":3.076923076923077,\"familyId\":\"tJs8rGxGPx2Cm53Af\",\"instructions\":\"Create a function that takes a list representation of a Minesweeper board, and returns another board where the value of each cell is the amount of its neighbouring mines.\\n\\n### Examples\\nThe input may look like this:\\n\\n```\\n[\\n  [0, 1, 0, 0],\\n  [0, 0, 1, 0],\\n  [0, 1, 0, 1],\\n  [1, 1, 0, 0]\\n]\\n```\\n\\nThe `0` represents an **empty space**  .\\nThe `1` represents a **mine**.\\n\\nYou will have to replace each **mine** with a `9` and each **empty space** with the number of adjacent mines, the output will look like this:\\n\\n```\\n[\\n  [1, 9, 2, 1],\\n  [2, 3, 9, 2],\\n  [3, 9, 4, 9],\\n  [9, 9, 3, 1]\\n]\\n```\\n\\n### Notes\\n- Since in the output the numbers `0-8` are used to determine the amount of adjacent mines, the number `9` will be used to identify the mines instead.\\n- A wikipedia page explaining how Minesweeper works is available in the **Resources** tab.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(minesweeper_numbers([]), [])\\n\\nTest.assert_equals(minesweeper_numbers([\\n  [1, 1, 1],\\n  [1, 0, 1],\\n  [1, 1, 1]\\n]), [\\n  [9, 9, 9],\\n  [9, 8, 9],\\n  [9, 9, 9]\\n])\\n\\nTest.assert_equals(minesweeper_numbers([\\n  [0, 0, 0, 1],\\n  [0, 1, 0, 0],\\n  [1, 0, 0, 0],\\n  [0, 0, 1, 0]\\n]), [\\n  [1, 1, 2, 9],\\n  [2, 9, 2, 1],\\n  [9, 3, 2, 1],\\n  [1, 2, 9, 1]\\n])\\n\\nTest.assert_equals(minesweeper_numbers([\\n\\t[0, 1, 0, 0],\\n  [0, 0, 1, 0],\\n  [0, 1, 0, 1],\\n  [1, 1, 0, 0],\\n]), [\\n  [1, 9, 2, 1],\\n  [2, 3, 9, 2],\\n  [3, 9, 4, 9],\\n  [9, 9, 3, 1],\\n])\\n\\nTest.assert_equals(minesweeper_numbers([\\n\\t[1, 0, 0, 0, 0, 0, 1, 0],\\n  [1, 0, 1, 0, 1, 0, 0, 0],\\n  [0, 0, 0, 0, 0, 0, 1, 0],\\n  [0, 1, 0, 1, 0, 0, 0, 1],\\n  [0, 0, 0, 1, 0, 1, 1, 0],\\n  [0, 1, 1, 0, 0, 0, 1, 1],\\n  [1, 0, 0, 0, 0, 0, 0, 0],\\n  [0, 0, 1, 0, 0, 1, 0, 1],\\n]), [\\n  [9, 3, 1, 2, 1, 2, 9, 1],\\n  [9, 3, 9, 2, 9, 3, 2, 2],\\n  [2, 3, 3, 3, 2, 2, 9, 2],\\n  [1, 9, 3, 9, 3, 3, 4, 9],\\n  [2, 3, 5, 9, 3, 9, 9, 4],\\n  [2, 9, 9, 2, 2, 3, 9, 9],\\n  [9, 4, 3, 2, 1, 2, 4, 3],\\n  [1, 2, 9, 1, 1, 9, 2, 9],\\n])\\n\\nTest.assert_equals(minesweeper_numbers([\\n  [1, 1, 0, 0, 0, 0, 0, 0],\\n  [1, 1, 0, 0, 0, 0, 0, 0],\\n  [0, 0, 0, 0, 0, 0, 1, 0],\\n  [1, 1, 0, 0, 0, 0, 0, 0],\\n  [0, 0, 0, 1, 1, 1, 1, 0],\\n  [0, 1, 0, 0, 0, 0, 1, 1],\\n  [1, 0, 0, 0, 1, 0, 0, 0],\\n  [0, 0, 1, 0, 1, 0, 1, 1],\\n]), [\\n  [9, 9, 2, 0, 0, 0, 0, 0],\\n  [9, 9, 2, 0, 0, 1, 1, 1],\\n  [4, 4, 2, 0, 0, 1, 9, 1],\\n  [9, 9, 2, 2, 3, 4, 3, 2],\\n  [3, 3, 3, 9, 9, 9, 9, 3],\\n  [2, 9, 2, 3, 4, 5, 9, 9],\\n  [9, 3, 2, 3, 9, 4, 4, 4],\\n  [1, 2, 9, 3, 9, 3, 9, 9],\\n])\",\"language\":\"python3\",\"quality\":5,\"summary\":\"Create a function that takes a list representation of a Minesweeper board, and returns another board where the value of each cell is the amount of its neighbouring mines.\\n\\nExamples\\nThe input may look like this:\\n\\n[\\n  [0, 1, 0, 0],\\n  [0, 0, 1, 0],\\n  [0, 1, 0, 1],\\n  [1, 1, 0, 0]\\n]\\n\\nThe 0 represents an empty space  .\\nThe 1 represents a mine.\\n\\nYou will have to repl\",\"tags\":[\"arrays\",\"games\",\"loops\",\"functional_programming\",\"numbers\"],\"timestamp\":{\"$date\":1603555704777},\"title\":\"Minesweeper Number of Neighbouring Mines\",\"stats\":{\"completed\":{\"total\":57,\"ratings\":[3,3,3,3,3,2,4,5,2,5,2,3,3,3,5,3,0,4,1,2,2,2,4,3,4,3,1,3,4,4,2,4,5,5,5,1,2,5,0,5,2,4,5,0,3,2,5,5,5,3,2,1],\"quality\":[5,5,5,5,5],\"rators\":[\"DNACg4rcgZsPtYGZ8\",\"8PwfYqoDQFThzNtvf\",\"kDq2TnPdy7hGKdAD5\",\"tAF9Gf6PiGogbZuWs\",\"mDWNyaaQ9hvPCRzSd\",\"h4x2jaMdj5aQZbW5g\",\"ZQSG2DF9TjmBGXPwu\",\"p8qqFdJ3FSk5x9z3G\",\"uMxob526prFuTTNve\",\"s5M5RvgqR9BhB9JoC\",\"Ecg4m7srYGgZsb4Ck\",\"dkpp45brwPQsYXoun\",\"8kMCbpP4DudkobNjb\",\"dB6s7p6pFMEyagbn2\",\"aEm3Wvj2rFYRL8Lrb\",\"HF28xZKSLM9wEuqNg\",\"gJYuGdkXEWWmGRLzu\",\"8JyqsSbN2FJXPr3cw\",\"iS5BrkGLzJyPK7nKt\",\"zgoEhAyhrjnsSLPGw\",\"8sNv5PTHa7XQ8bNqR\",\"AasGs8AeX9Lcb9xJn\",\"xn7uGNKeAwPEkP9oA\",\"7xtPMWcPabJjJ9WWA\",\"iojEnnY9FsMfYzp6f\",\"J3upzLHuEwXH7Z2hx\",\"gb9rvGus2Jv7bjZSs\",\"yjtdwc2AC4jA2RWtn\",\"2PufnQcsHsfymufX3\",\"GTKsdeEihE636Le9i\",\"DPi9QGLctq2y76KuE\",\"tq6kwem5dGetoM28g\",\"87Kt2839SamZkzvwb\",\"p4hvRAJMx84x5hBHc\",\"s7Yk3PxBMaiB7pMDj\",\"LhNQMA6gLSzQ5zFjL\",\"7CD5po73MjGq5nimp\",\"eCTdZhaqkLLyvj63H\",\"9dHZSFRtTepdD7Tv5\",\"eMuCpJ2spXWkJjWNz\",\"hzrsKQEfzgqd96oL6\",\"oxxCvNpWYDcBYiXE6\",\"68zWiHdiSfDcaZths\",\"8ALH5xNvzy692uzy4\",\"hP3dY9tJ9yC6ZoKtH\",\"xfRsa9sGHET9ZFoEq\",\"FvHwg9nTDqmaDBrvP\",\"f7X4ymW7D3Gfy8Top\",\"8faJmF2Seh7B4Ajxz\",\"rDgKHd6ZSSpboiAj7\",\"T7QZG6y34b65Fxyef\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"vb9BDiGC9noYLdyCF\",\"language\":\"cpp\"},{\"_id\":\"Hs9MayvcfE7gHzuLT\",\"language\":\"javascript\"},{\"_id\":\"v2eHXTn2qobw2WYJP\",\"language\":\"python3\"},{\"_id\":\"sQrchMe3BeQHebS7M\",\"language\":\"ruby\"}]}}"]