a["{\"msg\":\"result\",\"id\":\"1098\",\"result\":{\"_id\":\"46Raiu9C7caNsgjqH\",\"author\":\"EugeneBee\",\"authorId\":\"EEjNW5t4XPGFLfq3k\",\"code\":\"def compare_data(args):\\n\\t\",\"difficulty\":1.5757575757575757,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"GANCcQcqHZFH445nM\",\"instructions\":\"Create a function that checks if the given arguments are of the same type. Return `True` if they are and `False` if they're not.\\n\\n### Examples\\n```\\ncompare_data(1, 6, 5, 3, 7, 9) ➞ True\\n\\ncompare_data(1, 6, 5, 3, \\\"7\\\", 9) ➞ False\\n\\ncompare_data([]) ➞ True\\n\\ncompare_data([1], (1)) ➞ False\\n```\\n\\n### Notes\\n- If no input is given or only one input, return `True`.\\n- Use the (\\\\*args)  construct to enter an undefined number of function arguments.\",\"isHidden\":false,\"lab\":\"Test.assert_equals(compare_data(), True, \\\"It's no data, expected True\\\")\\nTest.assert_equals(compare_data('T','e','s','t'), True, \\\"All is string, expected True\\\")\\nTest.assert_equals(compare_data([]), True, \\\"It's emply list expected True\\\")\\nTest.assert_equals(compare_data(2,5,7,9,0,1,2,4,6), True, \\\"It's multiple integers expected True\\\")\\nTest.assert_equals(compare_data(2,5,7,'9',0,1,2,4,6), False, \\\"It's multiple integers  and string expected False\\\")\\nTest.assert_equals(compare_data(True,False), True, \\\"It's bool, expected True\\\")\\nTest.assert_equals(compare_data(True,'False'), False, \\\"It's bool and string, expected False\\\")\\nTest.assert_equals(compare_data((i for i in range(10)), (j**2 for j in range(8))), True, \\\"It's 'generator', expected True\\\")\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,5,2,2,2,3,2,1,2,1,0,3,0,1,2,1,2,1,1,2,1,1,2,2,2,2,2,2,2,2,1,2,2,2,2,2,0,2,2,2,2,2,3,1,2,0,2,1,2,0,2,1,2,3,1,1,2,3,1,2,0,0,2,1,2,2,0,2,2,2,1,0,0,2,2,2,2,1,2,2,0,1,1,2,3,2,2,1,0,0,2,2,2,2,2,2,2,1,0,1,2,1,1,1,1,0,1,2,2,0,2,1,2,3,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,1,1,1,1,1,2,2,2,1,1,0,2,1,2,2,1,2,2,2,1,2,2,2,1,1,2,2,1,2,2,2],\"rators\":[\"EEjNW5t4XPGFLfq3k\",\"tAF9Gf6PiGogbZuWs\",\"AYaEkTWLMmfzpwejr\",\"fAoLuqbGvHn4w2PHf\",\"8JyqsSbN2FJXPr3cw\",\"W7Jv9JtDm5TEsec4z\",\"gb9rvGus2Jv7bjZSs\",\"3ECpdeExhBmkYXtba\",\"8PE2cfZEhQBPhe8LG\",\"gMJhLdyw3tH7L96X2\",\"XKi8iZXBCHCaebSHh\",\"otXtuQygbcYATMZoP\",\"Jg8ZSRXe3NoDMCqGu\",\"jNwWv2JFCYWEWWYzD\",\"4zvByd8MNcc3PpRFN\",\"dLMwA7bAx3ArJoqC5\",\"i8YPbosHqqhtQgfc8\",\"hAzy9apJgLWwRFGPJ\",\"N2wnZXkhDH86mgjQ8\",\"HqmxnQJM66Y57twhn\",\"qxB9bnow4EXPHwsPj\",\"hq5pNh36cTyapKKDT\",\"8S5YEwX455Ye4RtKT\",\"HQxp7NcdvF92G7bYS\",\"jeuoearPPTcGPgXhf\",\"Nj6FwgBtAXsaQwsM2\",\"2fxapKr8XGdNeaKi2\",\"K3RacTvkWHLfzKF8i\",\"K96FwtfDDN5WM4Bb7\",\"nL6EAKGywddR3mBs3\",\"kQH5b8MXJunh84Czq\",\"yabtHTtycsWhcGBfD\",\"qJZsi5rhRnWA38FbA\",\"C4QntmkYtB89GNtpd\",\"6ShafRStcvew4GfCh\",\"kBmhcwkCqxiy4GwiZ\",\"tYjQweAK2k8goR4Bq\",\"Jqk2uJZZxEv5wZFze\",\"ytceK4TxiCchoCLYC\",\"RArcvHEvrTkCPn9MX\",\"4tgBydK887PitgAoi\",\"ehQCCKBjsmdtKjJNv\",\"7hzSvcYdq6QjoRnJY\",\"AnjjyuE9aWLzK3nkg\",\"zg8GmMSP2LkHBtAzy\",\"Qz5uEinRnWuuwLtej\",\"nfXGHENb5md7m355s\",\"WH7G4Z5CyZDTpLYkS\",\"ab7BsQuhDo3QgE6bh\",\"ACSnvC9CYwaycAxpY\",\"t3wwRMtYdLYBwWR4J\",\"2innwjWqxJHo4eRGh\",\"FiaTpm7ehfDv43wSG\",\"Yp7uvStL97cC9fKkY\",\"Fk9kLwoG4Brf4KsKf\",\"qJhL4H3ecaDCmnaG2\",\"TTSFzTyGpi5eckkHZ\",\"s5M5RvgqR9BhB9JoC\",\"AasGs8AeX9Lcb9xJn\",\"AXcnPX68zdMiLNSmu\",\"PXAcsKkssS2yLyDv2\",\"4CFzv558qbGcpQwc4\",\"LQhEi8yAC8WzEYY8h\",\"v3fjGuc7Pq4yjFygS\",\"yZvzB3qFb8pkHy4dg\",\"Z85ajWfZ4jDPkbvR4\",\"BpkWHjXfgDrCLnjRg\",\"22zxCNvL8ySies4J3\",\"vLrq4dEDMM2wd68Dc\",\"cR3ibTMxLyEdDFCHY\",\"aRqQ42J5zqCmBNd8w\",\"dHZqT6h4JMwk5fPC8\",\"9Ly8afdtofp8DXzrt\",\"M9DhkxE77ztbJWz6e\",\"jNvegJWCk5HCtEMbK\",\"hnyhBFWwNCz9mDfSi\",\"ZNnsMeNkdDhHjSrZb\",\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\",\"2QGRoQn2dRq3scu7k\",\"gJYuGdkXEWWmGRLzu\",\"ytotxvNtSzHumcQ9m\",\"DEDniTrstQYGounXT\",\"kYWb8BwpKwunQkxeX\",\"KdNDysEsy2TW5QRJ2\",\"Nua6T3dBurBy3Qfg9\",\"9pzFiFK3ANLjQfnr2\",\"ahk2qiXKJA753wAJk\",\"4rwxLqLs2mNZNg8NB\",\"LWCzZ8mb8gwrRNGfq\",\"JS3hNM3XXkxPdg3yk\",\"H4abACFDH5t8CnnyH\",\"ZrKCkX7xxGGZzauFW\",\"NG8PWBSjsM8mMhQEq\",\"sbJcFfQjQ59Wfg4Cd\",\"iojEnnY9FsMfYzp6f\",\"syRNbbPdLCGXbH2Gy\",\"eMuCpJ2spXWkJjWNz\",\"Ecg4m7srYGgZsb4Ck\",\"q4vhNKvdnjB6XTmxE\",\"dzS6WBTMHyFEag6Fp\",\"6kz7jjJS8W4tikYQT\",\"fJJirq6bMLnDWYRRs\",\"Pe8vWpDHRuH9nSGKW\",\"yjtdwc2AC4jA2RWtn\",\"i5iePG5GqhJJ8HEoB\",\"CTKmXtrqDYqJBnuy8\",\"XrqNzJ2FRG8HnGiR6\",\"FEYpu9RWysAgW3XnP\",\"Wv2vJnEj8ywNmARoF\",\"NNE5HNRXAkmhrWgyQ\",\"oBcs8GLX2ZFLXQy8y\",\"w2HhxvSLmDhaGCAjE\",\"b3BWzq6Yu8nswak5u\",\"YcCLwitFMAEJSnxAW\",\"mG8HqKiAQFTdRZthG\",\"wniy5aKNkwYTNAkrz\",\"tpxMgkGSHwBjS95Ta\",\"sGXCyrfZW2bSWn85R\",\"KTFxMsjaW4xgo5ajY\",\"QRv96jmNaYsWkxQEG\",\"DPi9QGLctq2y76KuE\",\"g9FyJ8yeT9ic97Qp2\",\"zfGYZ7gpR8fxJpagh\",\"EMJ6uvBZkie429gdg\",\"J3upzLHuEwXH7Z2hx\",\"CLypXaZksY99mpRCm\",\"dYPkStFnLvAMsHSzZ\",\"zZDaXBxMzTCBhNkgL\",\"fYKAHqcSbHi6QA27q\",\"cAP3n5NY64uoMwzRR\",\"5XiuAqicKD4hBdu63\",\"KJCDwGkoXh8qtbbKr\",\"RGMbFMZXJr7DhcAJy\",\"zd9FLSzsGz3evKafy\",\"xn7uGNKeAwPEkP9oA\",\"fznzd3qnvtbFkkizz\",\"3pxHTZBsv7MKzFG6Y\",\"dBzwBtRjZqB98DJeB\",\"R4SjTgDnpigJYDLyL\",\"5EPe7bdNQ69vjsKv7\",\"d8qtzoLB264iP8tdY\",\"qZQxPQ2kaNKAMesHT\",\"2H7qphwdz7PPoFKgc\",\"eYfPWvZwnJQkHbSTK\",\"5HCu9Ydd86QgHDRNP\",\"YRAzEBJoLvSaiPtYx\",\"5S9nX4rKsnCcnv4Cz\",\"6xTu4r8NMczBFvmtz\",\"GGdmhAvxXhqhhibJN\",\"T2vhHPhRR96hRizq8\",\"srJ34BaybkQh3qRkM\",\"Ds7L5bksw2QRHjrKL\",\"7txFzDQ43vJ7qCY88\",\"qAby4AWXmTNeusvg3\",\"J5T8gZqiZXFuFDTQ7\",\"JhX7jvtpwNyxcc39m\",\"YA7SDhpgEtsqynvNL\",\"AFfw7cGg83uYk2Miy\",\"o4ixjQGSaYqA2JoM4\",\"bvmTE46bfcM4ogj34\",\"sHjfbGQGLHE6JR6qu\",\"T6iBEE2jp7f7iEF2P\",\"66a9xX73nmTEuKs9k\",\"PC3pLs36zNzpRDSuE\",\"CHvzhtXnv8HTbPQ56\",\"EfxwqhYdapX3dMQC2\",\"yr822PZmmiDDenxpB\",\"yod5YhKtPqw2GfG9B\",\"eHcgvkTGsH7ZziqBo\",\"H4LqzfSad6d4BCgwy\",\"ij2DPkwTsR9LEkoKg\",\"uLNHHfzXqBjWAM7Af\",\"LQxof8pGabGuWP7Gn\",\"mvJBakQ35CWAnbbEZ\",\"8BFSTCnoe2QggN64c\",\"qzXAMXsHZGT8o5hTA\",\"ey3CASd6Je5LEJzfB\",\"BrTDhPJcACL2bsrpJ\",\"Afnps7TJQuS9sipMb\",\"XD5nmvKQchKezPXhy\",\"mzsaCBQP3e6YourDN\",\"2PufnQcsHsfymufX3\",\"suArq5BbSy7gD6xri\",\"d9LBRxvADNBB5QJMB\",\"4Lwjr34ypKNQNQCar\",\"vAh63eGRwkuJtoP8v\",\"4TmgHkn5vqyHK3sYC\",\"pduNK68oazqQTtbLp\",\"FvHwg9nTDqmaDBrvP\",\"3nied3n8KG8RSNixH\",\"MKT7khMBGXzA22ykf\",\"reNwCbDbpcz6bdTxz\",\"Wi4H6ayKsNDWWQCG5\",\"x6zWWvmst3aGNr3Cr\",\"X4rzfxGgxx6CS7Bpz\",\"mXXPMi2anfJi5whC9\"],\"total\":211,\"quality\":[5,5,3,4,5,4,5,4,5,5,5,5,5,5,5,5,3,5,5,4,5,5,5,5,5,5,5,5,5,5,5,4,5,5,5,5,5]},\"flags\":0},\"summary\":\"Create a function that checks if the given arguments are of the same type. Return True if they are and False if they're not.\\n\\nExamples\\ncompare_data(1, 6, 5, 3, 7, 9) ➞ True\\n\\ncompare_data(1, 6, 5, 3, \\\"7\\\", 9) ➞ False\\n\\ncompare_data([]) ➞ True\\n\\ncompare_data([1], (1)) ➞ False\\n\\nNotes\\nIf no input is given or only one input, return True.\\nUse the (\\\\*args)  construct to\",\"tags\":[\"data_structures\",\"validation\"],\"timestamp\":{\"$date\":1573735816644},\"title\":\"Check That Input Type Is the Same\",\"quality\":4.756756756756757,\"family\":[{\"_id\":\"46Raiu9C7caNsgjqH\",\"language\":\"python3\"}]}}"]