a["{\"msg\":\"result\",\"id\":\"2216\",\"result\":{\"_id\":\"cXoBRe9RdDGeLNfaD\",\"author\":\"yanni\",\"authorId\":\"aCNWav8S8Try9RkC6\",\"code\":\"def eight_bit(exp):\\n\\t\",\"difficulty\":3.4285714285714284,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"5j8ZZn79G5jHWvNSQ\",\"instructions\":\"You will be given a simple string expression representing an addition or subtraction in 8-bit 2's complement arithmetic.  Write a function that returns the result in base 10 followed by a binary representation. If any of the values are outside the range of 8-bit 2's complement, return `\\\"Overflow\\\"`.\\n\\n### Examples\\n```\\neight_bit(\\\"3 + 12\\\") ➞ (15, \\\"11 + 1100 = 1111\\\")\\n\\neight_bit(\\\"3 - 12\\\") ➞ (-9, \\\"11 - 1100 = 11110111\\\")\\n\\neight_bit(\\\"-18 - 6\\\") ➞ (-24, \\\"11101110 - 110 = 11101000\\\")\\n\\neight_bit(\\\"65 + 70\\\") ➞ \\\"Overflow\\\"\\n\\neight_bit(\\\"-127 + 127\\\") ➞ (0, \\\"10000001 + 1111111 = 0\\\")\\n```\\n\\n### Notes\\nNumbers in 8-bit 2's complement notation can range from -128 to 127. The eighth (leftmost) bit signifies a negative number. See **Resources** for details.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(eight_bit('0 + 0'),(0, '0 + 0 = 0'))\\nTest.assert_equals(eight_bit('0 - 1'),(-1, '0 - 1 = 11111111') )\\nTest.assert_equals(eight_bit('1 + 126'),(127, '1 + 1111110 = 1111111'))\\nTest.assert_equals(eight_bit('128 - 56'),'Overflow')\\nTest.assert_equals(eight_bit('92 - 108'),(-16, '1011100 - 1101100 = 11110000'))\\nTest.assert_equals(eight_bit('111 - 39'),(72, '1101111 - 100111 = 1001000'))\\nTest.assert_equals(eight_bit('-99 - 30'),'Overflow')\\nTest.assert_equals(eight_bit('-45 + 100'),(55, '11010011 + 1100100 = 110111'))\\nTest.assert_equals(eight_bit('-10 - 118'),(-128, '11110110 - 1110110 = 10000000'))\\nTest.assert_equals(eight_bit('-128 + 127'),(-1, '10000000 + 1111111 = 11111111'))\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,3,3,5,4,4,5,3,5,5,5,0,3,5,2,2,3,2,5,4,5,5,0,3],\"rators\":[\"aCNWav8S8Try9RkC6\",\"aEm3Wvj2rFYRL8Lrb\",\"n2BRY9X8899dcG8Bw\",\"ZNnsMeNkdDhHjSrZb\",\"fznzd3qnvtbFkkizz\",\"8PwfYqoDQFThzNtvf\",\"AraFx3EGW7PsqMPWt\",\"Nb6LYPoQP6KJZt8mz\",\"oet95WsBxxzdiZfz6\",\"s5M5RvgqR9BhB9JoC\",\"PbFZKHNGGqEacTSQS\",\"4fhjJBvLBWh6QeSih\",\"QBgP4BySQAeCoCFf6\",\"eHcgvkTGsH7ZziqBo\",\"8sNv5PTHa7XQ8bNqR\",\"gb9rvGus2Jv7bjZSs\",\"yjtdwc2AC4jA2RWtn\",\"bJaPCBx63YxdJAuTS\",\"2PufnQcsHsfymufX3\",\"tAF9Gf6PiGogbZuWs\",\"gJYuGdkXEWWmGRLzu\",\"gKnWjDjwrJh7MK2df\",\"e5tS8PDWAwdPcWT88\"],\"total\":26,\"quality\":[]},\"flags\":0},\"summary\":\"You will be given a simple string expression representing an addition or subtraction in 8-bit 2's complement arithmetic.  Write a function that returns the result in base 10 followed by a binary representation. If any of the values are outside the range of 8-bit 2's complement, return \\\"Overflow\\\".\\n\\nExamples\\neight_bit(\\\"3 + 12\\\") ➞ (15, \\\"11 + 1100 = 1111\\\")\\n\\neight_\",\"tags\":[\"bit_operations\",\"numbers\"],\"timestamp\":{\"$date\":1592951629327},\"title\":\"8 Bit Arithmetic\",\"quality\":0,\"family\":[{\"_id\":\"Lv9SkDPAvtnbqPzxp\",\"language\":\"javascript\"},{\"_id\":\"cXoBRe9RdDGeLNfaD\",\"language\":\"python3\"}]}}"]