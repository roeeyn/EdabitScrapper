a["{\"msg\":\"result\",\"id\":\"692\",\"result\":{\"_id\":\"YqeS2Ta52jyjS7cD7\",\"author\":\"Alessandro Manicone\",\"authorId\":\"AasGs8AeX9Lcb9xJn\",\"code\":\"def is_prime(n):\\n\\tif n == 0:\\n\\t\\treturn False\\n\\tif n == 1:\\n\\t\\treturn False\\n\\ti = 2\\n\\twhile i < n:\\n\\t\\tif n %  == 0:\\n\\t\\t\\treturn False\\n\\t\\ti += 1\\n\\treturn True\",\"difficulty\":1.1132530120481927,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"NyDXnEuewv2hwYubA\",\"instructions\":\"Check the principles of minimalist code in the [intro to the first challenge] (https://edabit.com/challenge/2XLjgZhmACph76Pkr).\\n\\nIn the **Code** tab you will find code that is missing a single character in order to pass the tests. However, your goal is to submit a function that is as **minimalist** as possible. Use the tips in the tips section below.\\n\\nWrite a function that returns `True` if the given positive integer is a **prime number** and `False` if it's not.\\n\\n### Tips\\nEverything you write **after** `if`, `not`, `while` or **around** `and`, `or`, `is`, `in` is interpreted as a boolean.\\n\\nA function that prints a **countdown** from the absolute value of `x` and also prints `\\\"hey\\\"` if the number is a multiple of `3` and contains the digit `\\\"3\\\"`, could be written as:\\n\\n```\\ndef countdown(x):\\n    if x < 0:\\n        x = x * -1\\n    while x > 0:\\n        if x % 3 == 0:\\n            if \\\"3\\\" in str(x):\\n                print(x)\\n                print(\\\"hey\\\")\\n        else:\\n            print(x)\\n        x = x - 1\\n```\\n\\nThis can be simplified to:\\n\\n```\\ndef countdown(x):\\n    x = abs(x)\\n    while x:\\n        print(x)\\n        if not x % 3 and \\\"3\\\" in str(x):\\n            print(\\\"hey\\\")\\n        x -= 1\\n```\\n\\n- `abs()` gets the absolute value of a number.\\n- `while` will interpret `x` as a boolean, [exiting the loop after reaching zero] (https://www.freecodecamp.org/news/truthy-and-falsy-values-in-python/).\\n- `print(x)` needs to be called whether `x` is a \\\"hey number\\\" or not. This can be done outside of any `if` statement, instead of in both.\\n- Both conditions `x % 3 == 0` and `\\\"3\\\" in str(x)` need to be `True`, so they can be joined with an `and`.\\n\\n### Bonus\\nA more Pythonistic approach:\\n\\n```\\ndef countdown(x):\\n    for i in range(abs(x), -1, -1):\\n        print(x)\\n        if not x % 3 and \\\"3\\\" in str(x):\\n            print(\\\"hey\\\")\\n```\\n\\n### Notes\\n- This is an open series: there isn't a definite list of features for the challenges. Please, do not hesitate to leave your **suggestions** in the **Comment tab**.\\n- _**Readability**_ is indeed a subjective concept. **Let's discuss it!** Feel free to leave your opinion in the **Comments tab**.\\n- You can find all the exercises in this series [over here].\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(is_prime(0), False)\\nTest.assert_equals(is_prime(1), False)\\nTest.assert_equals(is_prime(2), True)\\nTest.assert_equals(is_prime(3), True)\\nTest.assert_equals(is_prime(4), False)\\nTest.assert_equals(is_prime(5), True)\\nTest.assert_equals(is_prime(6), False)\\nTest.assert_equals(is_prime(7), True)\\nTest.assert_equals(is_prime(8), False)\\nTest.assert_equals(is_prime(9), False)\\nTest.assert_equals(is_prime(10), False)\\nTest.assert_equals(is_prime(71), True)\\nTest.assert_equals(is_prime(72), False)\\nTest.assert_equals(is_prime(73), True)\\nTest.assert_equals(is_prime(112), False)\\nTest.assert_equals(is_prime(197), True)\\nTest.assert_equals(is_prime(5851), True)\\nTest.assert_equals(is_prime(7906), False)\\nTest.assert_equals(is_prime(7907), True)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[1,1,1,1,1,1,4,0,2,1,1,1,1,2,0,1,1,1,1,1,1,1,2,1,0,0,1,1,0,0,0,2,1,2,1,0,1,1,1,1,1,0,0,1,2,1,0,2,1,1,3,1,0,1,0,2,0,1,2,0,1,0,1,2,1,1,2,1,1,1,1,3,2,1,1,1,0,0,5,1,0,3,1,1,0,1,0,1,0,1,1,3,1,0,0,1,1,0,1,0,1,0,0,0,2,1,0,5,1,0,1,0,2,2,1,2,1,3,1,0,1,1,2,1,2,0,2,1,1,1,1,0,1,0,0,1,2,2,1,2,0,1,2,1,0,1,0,1,3,0,2,2,2,0,2,2,0,3,3,0,2,2,0,2,0,2,1,1,1,1,1,0,1,1,0,0,1,1,1,0,2,1,3,4,1,1,1,1,0,1,1,1,2,0,1,0,1,2,2,2,0,2,0,2,3,1,0,0,1,0,2,0,0,1,2,1,2,3,2,0,1,2,0,2,1,1,2,1,0,2,2,2,2,2,2,1,2,2,1,1,2,1,1,1,1,0,1,0,1,1,1,0,2,0,1,1,1,0,1,2,0,0,1,0,1,1,1,2,1,1,0,1,1,0,1,3,3,0,1,3,1,1,0,1,0,1,2,0,2,1,1,0,0,1,1,0,1,0,1,0,2,1,2,0,3,5,0,1,1,3,0,0,1,1,1,1,2,1,2,1,3,0,1,1,1,2,2,1,0,1,1,0,2,0,2,1,1,1,2,3,3,1,0,1,3,2,0,0,1,1,2,1,2,0,1,2,1,2,0,3,1,1,1,1,3,0,1,3,2,2,3,2,1,1,1,1,1,1,2,1,0,0,2,1,0,1,1,1,1,1,1,1,2,1,2,0,1,0,1,2,1,1,1,2,2,1,1,0,2,0,0,1,1,1,1],\"rators\":[\"AasGs8AeX9Lcb9xJn\",\"uEtBD4BhdRstPLcnR\",\"NzbRqGWspQnWMoDrF\",\"PA9zZLYoJC8HM8FNZ\",\"gb9rvGus2Jv7bjZSs\",\"8JyqsSbN2FJXPr3cw\",\"jBR47vA7HwAZqp4QA\",\"FxJxxwowtXYCaLaeD\",\"8PwfYqoDQFThzNtvf\",\"JjJjxY8xRXaJi2Wqe\",\"veAhgEKubmGCuoCyh\",\"GEvSGXDkk7pACfYri\",\"a777e8chPvJkY3tKa\",\"ZNnsMeNkdDhHjSrZb\",\"DEDniTrstQYGounXT\",\"gJYuGdkXEWWmGRLzu\",\"Yp7uvStL97cC9fKkY\",\"jNE5AHcJQWXz7efuP\",\"9pzFiFK3ANLjQfnr2\",\"4zkChgTrb5EDzYZmd\",\"dKKMvaYoJunNPk5Wa\",\"FEYpu9RWysAgW3XnP\",\"CuiazXJNxHYTp3Rfr\",\"ujrDHoRMSm6QNewn6\",\"Fk9kLwoG4Brf4KsKf\",\"6h6t6qhwLHitGcYNK\",\"jjEj8LAMuhxR6mLDK\",\"mDCytYrQDCJh49xNj\",\"DhdGHvhXj2mgwgCCa\",\"N7P4AnS8nzK4oupHv\",\"yYxPzFqBgtQ9fsyHM\",\"ETr5kP3hx73Dyektd\",\"4NYSbpYYQxDGMechT\",\"s5M5RvgqR9BhB9JoC\",\"Hzfz5KbyWge78pFLb\",\"n2BRY9X8899dcG8Bw\",\"pCBsMEmLjnR8GseRE\",\"eMuCpJ2spXWkJjWNz\",\"yCusdBo2DgkhhfssY\",\"7FtsWoer4JeMf2ttA\",\"GAcop6q4Xm99WtMQK\",\"eFGWicpoc9kw2qQgT\",\"LDtBRPtAiDgrhjxR5\",\"TR5aWdDKP6iaL6mGK\",\"CpXse4AQDgTvEe4at\",\"pXNFJBaby2F7Jz7Me\",\"uiEuENARwFpnNMfFs\",\"aRqQ42J5zqCmBNd8w\",\"WXJvukif774ts7Jqs\",\"CB3KcKRNYqYJnPYtm\",\"5JyY5eDxizCH7TYT7\",\"586FdBhazpwJfnRYR\",\"yf3oTWpAXs2Wbn9tq\",\"esPK6Y4Fg4xASKegx\",\"QZTkcg8f56RkFberP\",\"vxnMD4WonEHxNB6CB\",\"JRacQYm77Ltir8aK8\",\"w7c8yyuyvZQdS78TM\",\"vYvdcg6QHcTEJy9mk\",\"DQByYiPjN6JhvDYNv\",\"73eTfjtjyYWojAZ6r\",\"cewmm7az7fhkCTRxd\",\"BMnHkis7wxhNcBCHL\",\"vyaFTJDKChqYfczdu\",\"EYzRpNLaQXL5vMk9t\",\"nqEdXan26Fk4MjvTN\",\"HTpMJZ98immCpey8u\",\"HF28xZKSLM9wEuqNg\",\"TTgP9jcqGxCfKotZ3\",\"KpHrC7WPEojnzgEtz\",\"2jeeb348pA43jfhHK\",\"ahk2qiXKJA753wAJk\",\"AF6LgdKhEdzwgRJom\",\"BnCfCxrhQSk5t92AN\",\"X88T4uAbWjBED8HeC\",\"XrqNzJ2FRG8HnGiR6\",\"cFnh3st63rXNrQQxC\",\"PXAcsKkssS2yLyDv2\",\"tAF9Gf6PiGogbZuWs\",\"5aZnA8Br3u7Wf5ENg\",\"zd9FLSzsGz3evKafy\",\"dhokkFcukKdYsYA6s\",\"yv7c4H2jimSKHEjtG\",\"JEAi9mG3vvBomJ3Yu\",\"4yNLEwL2rsx4EE5Nt\",\"So6PHm74mfJuY2WTs\",\"Cuy7McJ5y8BkXRRk9\",\"orFLgPDw9H5MDzmwo\",\"3LiSLdtN58n46NEqg\",\"HE2mrszq5oi8NFiSS\",\"smwekPWuzuHp82Q5m\",\"jufL2dZQH8tBJajpr\",\"66a9xX73nmTEuKs9k\",\"AuyShoR9hTHNQmB3M\",\"BAMyqjtZsrtTnJpuB\",\"ifZgxv4DRGAbj4kaE\",\"TSDwR9ucTLTSECMbD\",\"7iMwqRTbsGTSxa8HC\",\"B6v9kwy5fXL54S9rJ\",\"hpd2FdMKa4HHkYfdJ\",\"c2q7mY39z5JPEMCaM\",\"3qYxBYzigw9hXBwB5\",\"J5T8gZqiZXFuFDTQ7\",\"ggDnbbds4K8snwQ3E\",\"qb8k9ZKhW64ofWyHJ\",\"A9BD7C5MTEmFmzHgs\",\"mGzrqcrJYviuy5qn4\",\"wYpwNAP4a4besAnQt\",\"yF68LNRo3rXcSFkR9\",\"DrkR35NqnP9NDLbq6\",\"EXCpDkk5BLif3i5YE\",\"NG8PWBSjsM8mMhQEq\",\"ZJYMYPmyQAJ5B863h\",\"k68pEQTKGCzxDoPBh\",\"9Avp5FAfzEdEQdW8u\",\"jNvegJWCk5HCtEMbK\",\"4KvfTfy9P65h2iq3B\",\"FK2fEQ3F6DD3buSLJ\",\"HzcRKsvi3ieuDpLNh\",\"bJaPCBx63YxdJAuTS\",\"nfXGHENb5md7m355s\",\"JS3hNM3XXkxPdg3yk\",\"mDWNyaaQ9hvPCRzSd\",\"6SKDJwXpev4qPSzgM\",\"RuHad7wL2R98BLRXy\",\"GDLvq9o2JCxA6Dccd\",\"o3jGbQBTMHkfjRNge\",\"QDiHtAiYuyEEmoCgv\",\"yr822PZmmiDDenxpB\",\"kjvgTyRFyKHv44DcH\",\"7tbtTx6uxePv6eQwP\",\"e6b3QLiHnX6uaGoNB\",\"CBXLutgEKHKvbgE3h\",\"Me7gWb79GroCBnt8K\",\"ai4jis2vCvmNAHA4M\",\"NRCH4eiebS7LBjSCa\",\"2T7fzHJDeaSmkkd24\",\"2ptN2mhjFwFcHyPZd\",\"mDf6QGn4BidFhSfJG\",\"cR3ibTMxLyEdDFCHY\",\"YsAz93yZw8KKPupKv\",\"GGdmhAvxXhqhhibJN\",\"sDRY37TfoncsA2FSR\",\"faZmH79jbKzJdDYBs\",\"Yh8GFNkELpqxyGFm3\",\"7HFeWsLtx3Cn5NaE4\",\"NuqGt5u3s7vJ7HBGR\",\"TScKWHbgJyjY32oZh\",\"TKgHN2GQ6gRdygtsw\",\"Sj4iamMmNvxwWJBiF\",\"gR3pmQcHhT3jAswA3\",\"KouYhiYSyoKMRrjhR\",\"oRdsdmmPpzfSK4tDq\",\"2FCRyJqwqzFTKSTgJ\",\"FRN2W8RYpJ6GPhgRy\",\"32sfXXEJHYfSsrEy9\",\"ENsSYogEHHeDSrFod\",\"sHjfbGQGLHE6JR6qu\",\"FvFhg2wELM3SCZDZQ\",\"aEm3Wvj2rFYRL8Lrb\",\"kch5ukGsAcRJynWQd\",\"TP8xuSLNax26Czg7v\",\"vhLJwgSRY2J7aGD2i\",\"MKT7khMBGXzA22ykf\",\"pSAW4JtPndSGofLd4\",\"2ZFoLTxcCARhwc8xX\",\"4rwxLqLs2mNZNg8NB\",\"8BFSTCnoe2QggN64c\",\"tRA43bWeW9bLciKEh\",\"PhceyfmFntJcn5Fhf\",\"TQhN6YPSfQiiuCE68\",\"JgWpNj5G78uttDiE2\",\"3cF6NXq3ZEwdkgSjb\",\"rgvAJFwfCeYoYnFTK\",\"FXDoKGLjmknnkQT55\",\"LjoNTyGEMfBpMHHus\",\"xK5Le9LPn9ZNddfbP\",\"KfQdr2znuAu5qSMvB\",\"H9KZi2cjt4FwH7qog\",\"jzorpPo7TYt6i589D\",\"aMtbLig8dA5QWPgGp\",\"9bQyb6rW7xfE4vgrR\",\"a9A9yJregn8ECmv2d\",\"8DH2opL3T5kdcoiRJ\",\"H4abACFDH5t8CnnyH\",\"9XNbjEKxsC89aX6ae\",\"w2NGhfAGohsq6WhhN\",\"ekQh3jzgGLsEMbKo3\",\"jBo3xAopr37GFzY8g\",\"YA7SDhpgEtsqynvNL\",\"5HCu9Ydd86QgHDRNP\",\"7x4NJtbkmpQHCP9Tj\",\"4X3bLdgJjHMF8Lxug\",\"k7f82n7oxaWsmhdzT\",\"gBtn7gSMiSJtAGRoE\",\"dR4B9t7SZJDzGhTZw\",\"oo6WneCiAM8tdQhxP\",\"GW2RWhGaWwtLb7dDG\",\"GGprTwrkjuccmrQRg\",\"5khyYS3abpwyJq2Mx\",\"ckHFA5y8pkrXbsevA\",\"syRNbbPdLCGXbH2Gy\",\"sX9GZp3fYyQLrBKMJ\",\"cXS5hBMiJ5kxLPHi4\",\"yNjkHfHESBAnCssPB\",\"23KndF374EHHZNbL8\",\"pDvFWMCD9fQwoBPcu\",\"6ArBr2L3C7TMrR3j9\",\"fTaoS7NjbqDANvvxF\",\"R4SjTgDnpigJYDLyL\",\"BHp9mbAEZREsE7k8E\",\"Yp4Jtxj7pHqZjheN7\",\"8PEgcFyLGhsNpiqpx\",\"6SkBKxvzayh5E84qk\",\"BMEud9eeJnPDC8A2k\",\"yAouD3PxzED8a4gap\",\"9CoqdidjM9KbeKnHY\",\"khyMimbf5SB9DeJE8\",\"jBAGSwAQdScfGBmqz\",\"fD42arz6uZxQcrQjn\",\"Pe8vWpDHRuH9nSGKW\",\"ZDymmRcAKKjbuMS5G\",\"Y9zyHwuyA7MJ8SPDh\",\"M8dQuMrEpP8Hc3tHN\",\"iS5BrkGLzJyPK7nKt\",\"iojEnnY9FsMfYzp6f\",\"BnhJeKDXMMEaxwxEo\",\"Nfsj4eNFDjaFa39ga\",\"D6rdZCxgZngRm7ijZ\",\"ji5f27FPz4wRRF6Ls\",\"qBCCfGCNRuG76mgi8\",\"mxX4rH5ELYkdZ2Mbw\",\"p8qqFdJ3FSk5x9z3G\",\"kkDMhyAZxL4T6559Y\",\"6428wKHtwKkFdvBs5\",\"7w8XeRNysbuT7ZBRu\",\"SNm8qiF9itx7zRA4d\",\"oBcs8GLX2ZFLXQy8y\",\"oHbErJxjYJhD66d5w\",\"i5iePG5GqhJJ8HEoB\",\"KdYQN3KAT2DyTzT2a\",\"BtdZezHfckxRLm7xR\",\"iKCnQydNKZp3KoCoP\",\"SkQcb2sRn4as5KpnN\",\"DYDJTyGgKFnBRLm2r\",\"HhYCji7QqauyN3A7v\",\"yjtdwc2AC4jA2RWtn\",\"ta5CrWnBCRusD2WMo\",\"HqmxnQJM66Y57twhn\",\"RehJGBFS6CYiWdjZx\",\"hkJGLuib5md8vZ9HD\",\"dj5AyG5fWP8FdsSmZ\",\"8aEGGQPkGesWwoaom\",\"PcfcAbTJPrdzJN2FW\",\"S6ipW8Xzds8QDszn9\",\"kQ86mSGBiBQQvXzQR\",\"XNi3MX2ENL8j9roTe\",\"aKzYNPqBqb3J3ZgyD\",\"g4NCSxxHqHCGMpWwT\",\"dik7wis3hBJJBkYwK\",\"TPhfpB5tzQWSSn67n\",\"Q8L8znnCCXfN3bEtn\",\"jS9FNSp9XhvmJ2Dpc\",\"3nied3n8KG8RSNixH\",\"q6QsMYNMpPNtmyTeW\",\"Ey9pB2PRqejNubQmf\",\"8vWWL8Tx2yDai4ydm\",\"mHvoroWGDLYbJqQJa\",\"xLe22eHviFtWojRem\",\"4Np3uu6Jj67L2CxiR\",\"Lm6ChQCWBmaikmk5J\",\"5ExafWGBxaMWgKkkP\",\"bmthyKcDF922zNqxK\",\"wNuGsAdwdPtRn9JXz\",\"w2HhxvSLmDhaGCAjE\",\"BBk8ZRmMsTzpKCaux\",\"KLmLKaJPfsYxp42p2\",\"ffjnHrx8Ym7A7pQWe\",\"LA2YneDcbtiSj5SH6\",\"JYvJJKjerbQYjNG9b\",\"4QYcz4rdtZeEoeGhh\",\"BqT6sMHBAjkw4hjG6\",\"zXgwEs94QFkLraLMH\",\"pduNK68oazqQTtbLp\",\"6gS4E2C84vBYTYeDZ\",\"iK4YSmTqnL58ELXH2\",\"pn7FezrkZZCui7fkJ\",\"ZrXkPD45QRS4oXJmA\",\"b3BWzq6Yu8nswak5u\",\"LLehQqK6RjoA3T5BL\",\"MCw7uAcoWcSTBTmr3\",\"Kz7ee56Ht4Ns8JjBj\",\"mBtSsKTHdQniYAfsZ\",\"b5zo7s6xrqWgQnPao\",\"zbnmN2wrvzZgY7CyN\",\"27vGKEEn4SnAiPmAy\",\"2EbDCCJJvCfKkbYia\",\"E4KGguXaWuR4bd2n7\",\"ZSMRttRtZhGWXzCnB\",\"S7qFsPq9XKbu4iY8B\",\"oYyNMcQk2NfN2HLtW\",\"d8qtzoLB264iP8tdY\",\"Kh3Pc2ZRusurLaMyP\",\"yenSMD3zYHpn5dcHT\",\"tpxMgkGSHwBjS95Ta\",\"okBzYf3Pd9kAYug7m\",\"yTtSCvGPyYna6JuRC\",\"rrSC943cCKNG48sH4\",\"MFdsMsLxbwSLbjBH4\",\"mG8HqKiAQFTdRZthG\",\"rxr3nwpDGDEkBJRgD\",\"RMi3GRnhqtpbNqiF6\",\"974cv448kw6Wu2JF6\",\"7c7QLhrSPc3AM5EtA\",\"pJj86xc32Bs7Frxvi\",\"yod5YhKtPqw2GfG9B\",\"qD2LrwaDrSdiybLKY\",\"SgZ2t9xFuRqdJGofp\",\"PTDFuxAzou7W6asWt\",\"vwPMjKoiebvrgxGg2\",\"gXTAie79kiw28tx5u\",\"5Bh7sTaNoKDDbJ8vh\",\"sN9bLNiNtg8o7rzCP\",\"6HgMANhu6WiGyXSGN\",\"oyKcm3zqdy8Ko5P5d\",\"wRttWTM59y8m5mx7x\",\"TTwrsG4dc9YgkkA5j\",\"qvNk7pHSveLu3jqWw\",\"QRv96jmNaYsWkxQEG\",\"6nf7iwfwuF2pDJFBa\",\"7zd88coQRZm85KyBa\",\"oXdhczMThyirgM2eN\",\"o4ixjQGSaYqA2JoM4\",\"dBzwBtRjZqB98DJeB\",\"MnrmRMy2PP3Mk4sSY\",\"RGMbFMZXJr7DhcAJy\",\"qQQ4hCQpzitmHSkjS\",\"J3upzLHuEwXH7Z2hx\",\"spqXrjG3ZFa2j5uTR\",\"cAP3n5NY64uoMwzRR\",\"2QziknsznNeMPRh3g\",\"Fb2wehA7QgTFWry2x\",\"2QGRoQn2dRq3scu7k\",\"uX3EL4Qha99wBkozM\",\"4PrkhJduKGuQgqdBc\",\"dky93oMkJsJjEJKk2\",\"BrW5A64EAFqCKXoaz\",\"ga7aTTEThzsELuC2j\",\"axdSNLZpiCDF8RS6n\",\"dYPkStFnLvAMsHSzZ\",\"DPi9QGLctq2y76KuE\",\"incG8tH2dwThHg35f\",\"g9FyJ8yeT9ic97Qp2\",\"xSNdn3XovWh6c6Bjd\",\"uzuMpnWZcTHfBBg4S\",\"HuNF3xTBzmatyGSTm\",\"BMJffXrypJSAzTG7w\",\"W4cLjos2dNMkKzpXX\",\"cZccqzRQ9GgjQF6Az\",\"wjc4iejpErBhxWwHo\",\"mxgQ9Jt29CNkP9qa5\",\"aQtZoyJ9bSYi3wCLx\",\"oriWwkSDoejDH9ru5\",\"5XiuAqicKD4hBdu63\",\"6dkzRMf67DCWqRzj2\",\"nJXgbSQozcoE8Wn4N\",\"C2AfMipCicfD58WJ9\",\"q7YAahG8D2vWsqXdM\",\"5zGMciq3fB4aeu9uj\",\"DxZ8pZSZ5hftimzgN\",\"SJC2kkbxWzhwyC6fW\",\"WdKdsgH9gXkKgCycx\",\"5hQnRWiKkhgKJXNMP\",\"DpnYcMphntjsQ96qg\",\"BrTDhPJcACL2bsrpJ\",\"8N99kojRhfZXWNAk6\",\"DqNQn9Jsxcu5HijKE\",\"nbYtt6Rx8cri7rSTQ\",\"FRv5HToEaZ6iRM7T5\",\"F939uec2dYtYyNYy8\",\"FuYTQcDNjct58rqPa\",\"Jqk2uJZZxEv5wZFze\",\"LEnC2BqNJpPN2HpM4\",\"XeNskNoh5DcHuKTWX\",\"rK3xSCovoqjmkgBL9\",\"RuEb9zSwMaYoSwdxW\",\"GtWPwFmkp8TiobSN6\",\"Lg4t6SEWgtYz4u7Cj\",\"buX4mCQhtXCfBjeno\",\"p7js9trz2zk2RorCR\",\"Ds7L5bksw2QRHjrKL\",\"2H7qphwdz7PPoFKgc\",\"jL4y5fTJAMBjhZmko\",\"StNu7DPyTgEStZsMY\",\"oDN67zoApxcztnYdu\",\"MXGuntvz3byrP6WJc\",\"5S9nX4rKsnCcnv4Cz\",\"xBbFXBcuadhGFGnFf\",\"5HTSi5wQNAdLm57LB\",\"eYfPWvZwnJQkHbSTK\",\"BNEcpQnAnD7ceSAZf\",\"YRAzEBJoLvSaiPtYx\",\"srJ34BaybkQh3qRkM\",\"y4cAbnNzbFfWHSizi\",\"n3vwuE5GnW2yFguL7\",\"B8n7KqbvEDjZzgj2D\",\"M2gFMJkocQSY6bsFR\",\"q9FfWNiMDKRiaCJ5j\",\"97mMkvdDxbhkQXNPp\",\"2HfNkb2SoqdyjKW3o\",\"ycNxq43AahfbGowWz\",\"pPpmP7xeJzGgK362R\",\"fTNQmMvTZhhiGBCMe\",\"Po3v3dHCk6wYGKMwi\",\"XD5nmvKQchKezPXhy\",\"AFfw7cGg83uYk2Miy\",\"7dQYiDeTcMztbGyso\",\"qAby4AWXmTNeusvg3\",\"BJp2WkwLWGHHB5oQW\",\"gjiu8kLnHYxe4HoBN\",\"iYXdNw7tKcgA3QwBX\",\"8HAR8XNbN69nuEDFd\",\"CHvzhtXnv8HTbPQ56\",\"AmdiwjipTnwSfFNxD\",\"ghMkPtdFCpM6w8nax\",\"Wpn95NqWxncQrwNgz\",\"bur3yQ8s34zqKGEro\",\"9m6tfreywaxbQemCx\",\"JwkwCHcXthnGDsdFr\",\"mvJBakQ35CWAnbbEZ\",\"9Ly8afdtofp8DXzrt\",\"T6Rm8mREPMZSftzrC\",\"4TmgHkn5vqyHK3sYC\",\"jkbavR2ATFJcpmo8M\",\"NGvCPuMiAP3xrRLfB\",\"Afnps7TJQuS9sipMb\",\"sbJcFfQjQ59Wfg4Cd\",\"eW9R2SCoYnY8HBAdL\",\"E9ttMPTkLkKG6nZrg\",\"d9LBRxvADNBB5QJMB\",\"SBNdAEEGJSzSuqvqr\",\"rCrbqMiaGPgHYTNxu\",\"rhS8qXRjZcpDXkwnE\",\"dzS6WBTMHyFEag6Fp\",\"B4y8aoyXJtskYPFEL\",\"TCvpT4EPb8qNssNB7\",\"RJJm3dizCfNgoFtw7\",\"8uiLiJcmWxWe6qw65\",\"u5u2YpHXiNgzDNJdX\",\"zC8WrPp5BC6c2exrW\",\"pwWtbXEjzuvrhEGwt\",\"X4rzfxGgxx6CS7Bpz\",\"acENs2fSF9d7hkTZx\",\"5QN8R22z43SrwoHDz\",\"gbGzZz5Yq5hT357v8\",\"Wi4H6ayKsNDWWQCG5\",\"GgQqni8TkbqEBGcsy\",\"2MjzJ7yxh3eT3xbng\",\"FiaTpm7ehfDv43wSG\",\"sMcFMPkMJC4Kh6ymj\",\"QN4FPwhiak7Pf8kn6\",\"rraTtctZqnjXu2L2x\",\"vCeeMuYDbz3MB4vsk\"],\"total\":496,\"quality\":[5,5,5,5,5,5,5,4,5,5,5,5,5,5,1,5,4,5,5,5,4,5,5,4,5,5,3,5,5,5,5,5,5,5,4,5,5,5,5,4,4,5,5,5,5,5,5,5,5,4,5,1,5]},\"flags\":0},\"summary\":\"Check the principles of minimalist code in the [intro to the first challenge] (https://edabit.com/challenge/2XLjgZhmACph76Pkr).\\n\\nIn the Code tab you will find a code that is missing a single character in order to pass the tests. However, your goal is to submit a function as minimalist as possible. Use the tips in the tips section below.\\n\\nWrite a function that\",\"tags\":[\"logic\",\"language_fundamentals\",\"conditions\"],\"timestamp\":{\"$date\":1588957321240},\"title\":\"Minimal III: You're a Boolean Now\",\"quality\":4.660377358490566,\"family\":[{\"_id\":\"YqeS2Ta52jyjS7cD7\",\"language\":\"python3\"}]}}"]