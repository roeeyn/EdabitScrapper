a["{\"msg\":\"result\",\"id\":\"2497\",\"result\":{\"_id\":\"36jXRwMcJztHDcFgw\",\"author\":\"Evgeny SH\",\"authorId\":\"8PwfYqoDQFThzNtvf\",\"code\":\"user_name = \\\"\\\"\",\"difficulty\":5,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"NKww7Fi9S7f2jopQB\",\"instructions\":\"The bookstore from [this collection]( https://edabit.com/collection/dnXtkLPZpX25t227q) is adamant in using `eval()`, but has moved the user’s records into a file to prevent copying. For security, the bookstore also creates several files with fake user records to obscure the intruder. The `check_user(user_name)` function returns entries for users which match a given username.\\n\\nCreate a query that copies all user records to `res` as list of strings.\\n\\n### Examples\\n```\\n# User’s records are stored in a file line by line (name password):\\n# u_etfylfe p_mmc\\n# u_vlrw p_davcx\\n# u_uau p_svlb\\n# u_yup p_htdgr\\n# u_tvhfjccd p_dlohtcjoz\\n\\nres = eval(\\\"check_user(\\\\\\\"{}\\\\\\\")\\\".format(user_name),\\n           {'check_user': check_user})\\n\\nprint(res) ➞ real_users\\n```\\n\\n### Notes\\nCreate a string, not a function.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"import tempfile\\nfrom random import randint, seed\\nimport time\\ntic = time.perf_counter()\\n\\nfor t in range(5):\\n    with tempfile.TemporaryDirectory() as tmp_dir:\\n        seed()\\n        n_files = randint(3, 9)\\n        pwd_file_id = randint(0, n_files - 1)\\n        real_users = []\\n        file_name = [''.join(chr(randint(97, 122))\\n                             for _ in range(randint(3, 9)))\\n                     + '.txt' for _ in range(n_files)]\\n        for i in range(n_files):\\n            with open(tmp_dir + '/' + file_name[i], 'w') as f:\\n                for j in range(randint(3, 9)):\\n                    user_rec = ('u_{} p_{}'.\\n                                format(''.join(chr(randint(97, 122))\\n                                               for _ in range(randint(3, 9))),\\n                                       ''.join(chr(randint(97, 122))\\n                                               for _ in range(randint(3, 9)))))\\n                    f.write(user_rec + '\\\\n')\\n                    if i == pwd_file_id:\\n                        real_users.append(user_rec)\\n        time.sleep(0.01)\\n\\n        def check_user(usr_name, path=tmp_dir, f_id=pwd_file_id):\\n            with open(path + '/' + file_name[f_id], 'r') as _f:\\n                lst_users = _f.readlines()\\n            with open(path + '/' + file_name[f_id], 'w') as _f:\\n                _f.writelines(lst_users)\\n            for record in lst_users:\\n                if record.startswith(usr_name):\\n                    return record[:-1]\\n            return ''\\n\\n        \\\"\\\"\\\"demonstrate that we can find a real user\\\"\\\"\\\"\\n        user_id = randint(0, len(real_users) - 1)\\n        u_name, u_pwd = real_users[user_id].split()\\n        f_record = check_user(u_name)\\n        print('User found = {}'.format(f_record == real_users[user_id]))\\n\\n        \\\"\\\"\\\"Entry Point for the Injection String\\\"\\\"\\\"\\n        res = eval(\\\"check_user(\\\\\\\"{}\\\\\\\")\\\".format(user_name),\\n                   {'check_user': check_user})\\n\\n        if (type(res) == list and all(type(rec) == str for rec in res)\\n                and len(res) == len(real_users)):\\n            Test.assert_equals(res, real_users)\\n        else:\\n            print('\\\"res\\\" is not a list of strings of the required length')\\n            Test.assert_equals(False, True)\\n\\nprint('Runtime(sec) = {:.6f}'.format(time.perf_counter() - tic))\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,5,5],\"rators\":[\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\"],\"total\":2,\"quality\":[]},\"flags\":0},\"summary\":\"The bookstore from this collection is adamant in using eval(), but has moved the user’s records into a file to prevent copying. For security, the bookstore also creates several files with fake user records to obscure the intruder. The checkuser(username) function returns entries for users which match a given username.\\n\\nCreate a query that copies all user recor\",\"tags\":[\"data_structures\",\"games\",\"logic\",\"strings\"],\"timestamp\":{\"$date\":1594767512066},\"title\":\"Injection IV.F: Inside the File\",\"quality\":0,\"family\":[{\"_id\":\"36jXRwMcJztHDcFgw\",\"language\":\"python3\"}]}}"]