a["{\"msg\":\"result\",\"id\":\"826\",\"result\":{\"_id\":\"rwPguhgju54AMR2kM\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def construct_deconstruct(s):\\n\\t\",\"difficulty\":1.3937947494033414,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"mh6Sg873h7PBxYqgF\",\"instructions\":\"Given a string, create a function that outputs a list, **building** and **deconstructing** the string *letter by letter*. See the examples below for some helpful guidance.\\n\\n### Examples\\n```\\nconstruct_deconstruct(\\\"Hello\\\") ➞ [\\n  \\\"H\\\",\\n  \\\"He\\\",\\n  \\\"Hel\\\",\\n  \\\"Hell\\\",\\n  \\\"Hello\\\",\\n  \\\"Hell\\\",\\n  \\\"Hel\\\",\\n  \\\"He\\\",\\n  \\\"H\\\"\\n]\\n\\nconstruct_deconstruct(\\\"edabit\\\") ➞ [\\n  \\\"e\\\",\\n  \\\"ed\\\",\\n  \\\"eda\\\",\\n  \\\"edab\\\",\\n  \\\"edabi\\\",\\n  \\\"edabit\\\",\\n  \\\"edabi\\\",\\n  \\\"edab\\\",\\n  \\\"eda\\\",\\n  \\\"ed\\\",\\n  \\\"e\\\"\\n]\\n\\nconstruct_deconstruct(\\\"the sun\\\") ➞ [\\n  \\\"t\\\",\\n  \\\"th\\\",\\n  \\\"the\\\",\\n  \\\"the \\\",\\n  \\\"the s\\\",\\n  \\\"the su\\\",\\n  \\\"the sun\\\",\\n  \\\"the su\\\",\\n  \\\"the s\\\",\\n  \\\"the \\\",\\n  \\\"the\\\",\\n  \\\"th\\\",\\n  \\\"t\\\"\\n]\\n```\\n\\n### Notes\\nInclude spaces (see example #3).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(construct_deconstruct(\\\"Hello\\\"), [\\n\\t\\\"H\\\",\\n\\t\\\"He\\\",\\n\\t\\\"Hel\\\",\\n\\t\\\"Hell\\\",\\n\\t\\\"Hello\\\", \\n\\t\\\"Hell\\\",\\n\\t\\\"Hel\\\",\\n\\t\\\"He\\\",\\n\\t\\\"H\\\"\\n])\\n\\nTest.assert_equals(construct_deconstruct(\\\"edabit\\\"), [\\n\\t\\\"e\\\",\\n\\t\\\"ed\\\",\\n\\t\\\"eda\\\",\\n\\t\\\"edab\\\",\\n\\t\\\"edabi\\\",\\n\\t\\\"edabit\\\",\\n\\t\\\"edabi\\\",\\n\\t\\\"edab\\\",\\n\\t\\\"eda\\\",\\n\\t\\\"ed\\\",\\n\\t\\\"e\\\"\\n])\\n\\nTest.assert_equals(construct_deconstruct(\\\"the sun\\\"), [\\n\\t\\\"t\\\",\\n\\t\\\"th\\\",\\n\\t\\\"the\\\",\\n\\t\\\"the \\\",\\n\\t\\\"the s\\\",\\n\\t\\\"the su\\\",\\n\\t\\\"the sun\\\",\\n\\t\\\"the su\\\",\\n\\t\\\"the s\\\",\\n\\t\\\"the \\\",\\n\\t\\\"the\\\",\\n\\t\\\"th\\\",\\n\\t\\\"t\\\"\\n])\\n\\nTest.assert_equals(construct_deconstruct(\\\"so long partner\\\"), [\\\"s\\\", \\\"so\\\", \\\"so \\\", \\\"so l\\\", \\\"so lo\\\", \\\"so lon\\\", \\\"so long\\\", \\\"so long \\\", \\\"so long p\\\", \\\"so long pa\\\", \\\"so long par\\\", \\\"so long part\\\", \\\"so long partn\\\", \\\"so long partne\\\", \\\"so long partner\\\", \\\"so long partne\\\", \\\"so long partn\\\", \\\"so long part\\\", \\\"so long par\\\", \\\"so long pa\\\", \\\"so long p\\\", \\\"so long \\\", \\\"so long\\\", \\\"so lon\\\", \\\"so lo\\\", \\\"so l\\\", \\\"so \\\", \\\"so\\\", \\\"s\\\"])\\nTest.assert_equals(construct_deconstruct(\\\"s p a c e s\\\"), [\\\"s\\\", \\\"s \\\", \\\"s p\\\", \\\"s p \\\", \\\"s p a\\\", \\\"s p a \\\", \\\"s p a c\\\", \\\"s p a c \\\", \\\"s p a c e\\\", \\\"s p a c e \\\", \\\"s p a c e s\\\", \\\"s p a c e \\\", \\\"s p a c e\\\", \\\"s p a c \\\", \\\"s p a c\\\", \\\"s p a \\\", \\\"s p a\\\", \\\"s p \\\", \\\"s p\\\", \\\"s \\\", \\\"s\\\"])\\nTest.assert_equals(construct_deconstruct(\\\"edabit is a awesome\\\"), [\\\"e\\\", \\\"ed\\\", \\\"eda\\\", \\\"edab\\\", \\\"edabi\\\", \\\"edabit\\\", \\\"edabit \\\", \\\"edabit i\\\", \\\"edabit is\\\", \\\"edabit is \\\", \\\"edabit is a\\\", \\\"edabit is a \\\", \\\"edabit is a a\\\", \\\"edabit is a aw\\\", \\\"edabit is a awe\\\", \\\"edabit is a awes\\\", \\\"edabit is a aweso\\\", \\\"edabit is a awesom\\\", \\\"edabit is a awesome\\\", \\\"edabit is a awesom\\\", \\\"edabit is a aweso\\\", \\\"edabit is a awes\\\", \\\"edabit is a awe\\\", \\\"edabit is a aw\\\", \\\"edabit is a a\\\", \\\"edabit is a \\\", \\\"edabit is a\\\", \\\"edabit is \\\", \\\"edabit is\\\", \\\"edabit i\\\", \\\"edabit \\\", \\\"edabit\\\", \\\"edabi\\\", \\\"edab\\\", \\\"eda\\\", \\\"ed\\\", \\\"e\\\"])\\nTest.assert_equals(construct_deconstruct(\\\"123456789\\\"), [\\\"1\\\", \\\"12\\\", \\\"123\\\", \\\"1234\\\", \\\"12345\\\", \\\"123456\\\", \\\"1234567\\\", \\\"12345678\\\", \\\"123456789\\\", \\\"12345678\\\", \\\"1234567\\\", \\\"123456\\\", \\\"12345\\\", \\\"1234\\\", \\\"123\\\", \\\"12\\\", \\\"1\\\"])\\nTest.assert_equals(construct_deconstruct(\\\"\\\"), [])\\nTest.assert_equals(construct_deconstruct(\\\"        \\\"), [\\\" \\\", \\\"  \\\", \\\"   \\\", \\\"    \\\", \\\"     \\\", \\\"      \\\", \\\"       \\\", \\\"        \\\", \\\"       \\\", \\\"      \\\", \\\"     \\\", \\\"    \\\", \\\"   \\\", \\\"  \\\", \\\" \\\"])\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[1,1,1,1,1,1,0,2,1,0,2,1,1,2,0,2,1,0,1,1,0,0,1,2,1,2,1,1,0,1,0,0,2,1,2,0,0,1,1,1,1,1,1,1,3,1,1,2,1,0,0,2,1,0,2,0,0,2,2,1,0,5,2,0,2,2,1,2,1,1,5,1,0,1,2,1,1,1,2,1,1,2,1,0,1,0,2,1,2,2,1,0,2,1,2,1,1,1,1,0,1,0,0,1,1,3,2,1,1,1,1,1,2,2,2,1,1,2,1,2,1,2,1,1,2,2,0,1,1,2,1,1,2,1,2,1,1,0,0,1,1,0,0,1,2,2,1,2,1,1,1,1,1,0,0,0,0,1,3,2,0,2,1,1,1,0,0,2,0,0,1,2,0,2,2,2,3,2,1,0,1,1,1,1,1,1,0,1,1,1,5,1,1,0,1,0,2,1,2,2,2,1,3,1,1,1,2,2,2,1,0,1,1,1,0,1,1,1,1,2,2,1,2,1,1,0,2,1,2,0,1,2,1,2,1,1,1,3,1,2,3,1,2,1,1,2,2,2,0,2,1,2,5,1,2,3,2,2,2,1,2,2,3,2,2,3,2,2,2,2,2,1,2,2,2,2,2,1,2,2,0,3,0,2,2,2,1,2,1,2,1,1,3,2,3,1,2,1,0,2,0,2,1,5,2,1,2,2,2,1,2,1,1,3,2,2,2,1,0,3,2,2,2,1,2,1,0,2,2,1,0,2,2,0,2,2,2,2,2,2,2,0,1,2,3,1,2,2,2,2,2,2,1,2,3,2,4,2,2,2,1,1,2,2,2,1,0,1,2,1,1,4,2,0,2,2,2,1,1,1,1,3,1,5,0,2,2,2,2,2,2,0,1,2,2,1,1,2,2,2,2,2,2,2,3,2,0,0,2,0,1,0,1,1,1,2,2,3,2],\"rators\":[\"C4QntmkYtB89GNtpd\",\"aRqQ42J5zqCmBNd8w\",\"hAxMJscA45zM8rD5K\",\"u5u2YpHXiNgzDNJdX\",\"tAF9Gf6PiGogbZuWs\",\"tnxfdy4zyYg3DfhJy\",\"mybpojPXaZigaqsAD\",\"zd9FLSzsGz3evKafy\",\"QnPD4Sv6W4LHc2Qng\",\"6abffx8jQDCf7kgvb\",\"2fxapKr8XGdNeaKi2\",\"AasGs8AeX9Lcb9xJn\",\"azHSATBuuQ5wz9bvB\",\"eebeY4dPvLYcmzy2v\",\"9Ly8afdtofp8DXzrt\",\"gb9rvGus2Jv7bjZSs\",\"fBqQjriC4QEtFNxFe\",\"N2wnZXkhDH86mgjQ8\",\"YXH4ED2LYayDE454C\",\"orFLgPDw9H5MDzmwo\",\"hnyhBFWwNCz9mDfSi\",\"8fhbZ2xkaSQB4Cb2L\",\"kvNjMaKxNeScDEapK\",\"4CFzv558qbGcpQwc4\",\"Yp7uvStL97cC9fKkY\",\"gudC5KZrykfdfGD3J\",\"dHZqT6h4JMwk5fPC8\",\"pT7ESkjcQTjmmaTXv\",\"qvEvDcL32a5F4Tg6c\",\"YsZRGeWLp7so3tQK4\",\"vLrq4dEDMM2wd68Dc\",\"k5mp7Hkg8w5rwiXpe\",\"Jqk2uJZZxEv5wZFze\",\"cXEDKJP8GNnPStuRq\",\"WoKygnR2BoTuSG9y5\",\"JMh7pkAJMA3P5B9uu\",\"8JyqsSbN2FJXPr3cw\",\"Ycj4iTJGFyvC4bXek\",\"QCMh4wAEYmmvE92wj\",\"o4FYGsoNXyLFpnvTr\",\"jeuoearPPTcGPgXhf\",\"PSrcg6fy835R4c5CW\",\"WYzQhqWAfC2eR7a7h\",\"DMH5qWYAScj9hNaRv\",\"HqmxnQJM66Y57twhn\",\"wgsTw3Gu49MLDkHhN\",\"jBo3xAopr37GFzY8g\",\"LP9R3NfPdHviZb4Wz\",\"jNvegJWCk5HCtEMbK\",\"wmiKeocyx5AvLxRbi\",\"aiLGtqxCmJn4gnADi\",\"gMJhLdyw3tH7L96X2\",\"Tpg3ek75vt9MrhEHZ\",\"Wv5c7WsK6R8yb4mTt\",\"Fk9kLwoG4Brf4KsKf\",\"yZvzB3qFb8pkHy4dg\",\"J5T8gZqiZXFuFDTQ7\",\"pNvH75WKPPh9rGnfL\",\"gE9YGzesbCmt8oPrs\",\"sFcMwG5a4L5FiRPmT\",\"sz8ufn9i8zeiGWpAy\",\"XbwyB44kHPnRgQcrB\",\"NfMJuiBk6FN5Jc6ow\",\"cSMKd6Yq8Pyq8TvWR\",\"BeFnbPbMnAM2SjBdZ\",\"ENmpZtzzuYcSHXNh4\",\"pmgFEciNrd3ES9tuu\",\"zg8GmMSP2LkHBtAzy\",\"oKNAZ5BNeNWyvkiiB\",\"w3A7cBWyAfukk6xEQ\",\"LQxof8pGabGuWP7Gn\",\"N7GPFEhCaiQ79MKjz\",\"yabtHTtycsWhcGBfD\",\"jNE5AHcJQWXz7efuP\",\"X29Ekg7HjqHAYgCSM\",\"4y2bxsHwifCdZXAQA\",\"rJGeRSCjGzRuYfHZS\",\"mxX4rH5ELYkdZ2Mbw\",\"X74H8PYX8XYkrGRQc\",\"cR3ibTMxLyEdDFCHY\",\"9uZpgAtSuPZ7W7DL6\",\"Lg74S7Hm9R378BCvX\",\"j2wcHGHmPCHbaQEye\",\"8LfTheFzvicameoz9\",\"E9ttMPTkLkKG6nZrg\",\"aEm3Wvj2rFYRL8Lrb\",\"C9LKGu2g5hSijvDzA\",\"FiaTpm7ehfDv43wSG\",\"s2ZMtR9deh6Kia7pb\",\"2iFe3EHEH2YdhSKrs\",\"4AoQy4B5fPs2KBinr\",\"eLkj3Zb2DqiW4AEEh\",\"7tbM7oMYc5oDvD88Z\",\"v8iedwMBcGiN2PHGM\",\"2QGRoQn2dRq3scu7k\",\"N7P4AnS8nzK4oupHv\",\"v9KtC8YLbMWmXiW2H\",\"HF28xZKSLM9wEuqNg\",\"4RY3zj9C2t8GGefhi\",\"aiy37pdgqNinQpTFQ\",\"uiEuENARwFpnNMfFs\",\"YzaMuXsKkut8nSNDH\",\"gJYuGdkXEWWmGRLzu\",\"ALcgrkPgXfJMvE5CX\",\"moFrJ4vxzxPynByzB\",\"5kEyLPjTLrt7z2YJZ\",\"KRSKj7ikX2ytWFmod\",\"M8dQuMrEpP8Hc3tHN\",\"Cc2Cgj4MWXZxsTooC\",\"5JZNWts9XEHejpvur\",\"ZNnsMeNkdDhHjSrZb\",\"MKT7khMBGXzA22ykf\",\"9PGk6auzrKALn9mEn\",\"kYWb8BwpKwunQkxeX\",\"Ro3ppqamSxiJv2wxP\",\"DEDniTrstQYGounXT\",\"HiXS9Hofvx4rnqDZz\",\"z9guJRB4sMe9mpxKv\",\"KdNDysEsy2TW5QRJ2\",\"ywk3XGvcmpTgRxwZa\",\"9pzFiFK3ANLjQfnr2\",\"ffjnHrx8Ym7A7pQWe\",\"bMEg2eSZtsAcT7ZmJ\",\"FEYpu9RWysAgW3XnP\",\"yAouD3PxzED8a4gap\",\"jL4y5fTJAMBjhZmko\",\"wf98HW4sLSE4F4N6z\",\"ekQh3jzgGLsEMbKo3\",\"XrqNzJ2FRG8HnGiR6\",\"di2hhADLx59Bj4ewM\",\"AF6LgdKhEdzwgRJom\",\"s5M5RvgqR9BhB9JoC\",\"dKKMvaYoJunNPk5Wa\",\"ahk2qiXKJA753wAJk\",\"nfXGHENb5md7m355s\",\"a777e8chPvJkY3tKa\",\"yYxPzFqBgtQ9fsyHM\",\"JEAi9mG3vvBomJ3Yu\",\"NG8PWBSjsM8mMhQEq\",\"8BFSTCnoe2QggN64c\",\"yr822PZmmiDDenxpB\",\"NzbRqGWspQnWMoDrF\",\"4yNLEwL2rsx4EE5Nt\",\"3cF6NXq3ZEwdkgSjb\",\"H9KZi2cjt4FwH7qog\",\"Sg3oaeSYhkEGFgYtZ\",\"H4abACFDH5t8CnnyH\",\"2ptN2mhjFwFcHyPZd\",\"FRN2W8RYpJ6GPhgRy\",\"n2ck2WGuM35vbZiFz\",\"eMuCpJ2spXWkJjWNz\",\"GgnTYyMXTPkZpG3B7\",\"YcCLwitFMAEJSnxAW\",\"FvFhg2wELM3SCZDZQ\",\"ckHFA5y8pkrXbsevA\",\"syRNbbPdLCGXbH2Gy\",\"So6PHm74mfJuY2WTs\",\"Stye5FSYwYNbhFHgR\",\"R4SjTgDnpigJYDLyL\",\"i5iePG5GqhJJ8HEoB\",\"sHjfbGQGLHE6JR6qu\",\"5HCu9Ydd86QgHDRNP\",\"mfJcJtAYaK9TN6mHg\",\"3LiSLdtN58n46NEqg\",\"pDvFWMCD9fQwoBPcu\",\"X5MqeHyPh6cSQCXnk\",\"b9YQPLb9ZPSADdHXX\",\"GGdmhAvxXhqhhibJN\",\"LjoNTyGEMfBpMHHus\",\"iojEnnY9FsMfYzp6f\",\"Pe8vWpDHRuH9nSGKW\",\"dj5AyG5fWP8FdsSmZ\",\"iS5BrkGLzJyPK7nKt\",\"kNrnnMxhFZztMTBAX\",\"hRiMXDZNAzyPd5tpt\",\"Y9zyHwuyA7MJ8SPDh\",\"KdYQN3KAT2DyTzT2a\",\"9CoqdidjM9KbeKnHY\",\"oBcs8GLX2ZFLXQy8y\",\"sbJcFfQjQ59Wfg4Cd\",\"ta5CrWnBCRusD2WMo\",\"yjtdwc2AC4jA2RWtn\",\"SkQcb2sRn4as5KpnN\",\"HhYCji7QqauyN3A7v\",\"hkJGLuib5md8vZ9HD\",\"KRyczPZSHYbKrBYnY\",\"q6QsMYNMpPNtmyTeW\",\"TPhfpB5tzQWSSn67n\",\"g4NCSxxHqHCGMpWwT\",\"RehJGBFS6CYiWdjZx\",\"u7i7WPM63n42r8R8o\",\"PcfcAbTJPrdzJN2FW\",\"aKzYNPqBqb3J3ZgyD\",\"8vWWL8Tx2yDai4ydm\",\"23KndF374EHHZNbL8\",\"KLmLKaJPfsYxp42p2\",\"XbxHXmh5ZmRN2gw3K\",\"Lm6ChQCWBmaikmk5J\",\"pn7FezrkZZCui7fkJ\",\"DYDJTyGgKFnBRLm2r\",\"mG8HqKiAQFTdRZthG\",\"DPi9QGLctq2y76KuE\",\"tpxMgkGSHwBjS95Ta\",\"gXTAie79kiw28tx5u\",\"8WpvgSbQciTQWdd8T\",\"6HgMANhu6WiGyXSGN\",\"k2Eo3wyfZZ6KxvKhN\",\"rrSC943cCKNG48sH4\",\"cZccqzRQ9GgjQF6Az\",\"axdSNLZpiCDF8RS6n\",\"d8qtzoLB264iP8tdY\",\"JYvJJKjerbQYjNG9b\",\"E5cu6oJFNFDXqae9q\",\"wRttWTM59y8m5mx7x\",\"Kh3Pc2ZRusurLaMyP\",\"rxr3nwpDGDEkBJRgD\",\"pJj86xc32Bs7Frxvi\",\"Cybtjz3cF7RgoiqrN\",\"pduNK68oazqQTtbLp\",\"yod5YhKtPqw2GfG9B\",\"g9FyJ8yeT9ic97Qp2\",\"RGMbFMZXJr7DhcAJy\",\"J3upzLHuEwXH7Z2hx\",\"cAP3n5NY64uoMwzRR\",\"xLe22eHviFtWojRem\",\"oyKcm3zqdy8Ko5P5d\",\"dky93oMkJsJjEJKk2\",\"9FCeFzjPA4jrQ7oHW\",\"Fb2wehA7QgTFWry2x\",\"dYPkStFnLvAMsHSzZ\",\"o4ixjQGSaYqA2JoM4\",\"skbp3mauBhvs2Pjee\",\"ga7aTTEThzsELuC2j\",\"p8qqFdJ3FSk5x9z3G\",\"YRAzEBJoLvSaiPtYx\",\"CyzskHGsC6WSmYrLu\",\"4fjSgcqhQQZM2ZFRP\",\"Tf7TJFSPktJBgLA4k\",\"rEecHXXCTwgG5wWNA\",\"5XiuAqicKD4hBdu63\",\"wjc4iejpErBhxWwHo\",\"nJXgbSQozcoE8Wn4N\",\"Aqm6FuTEhMGYn2J5h\",\"HuNF3xTBzmatyGSTm\",\"C2AfMipCicfD58WJ9\",\"oriWwkSDoejDH9ru5\",\"DpnYcMphntjsQ96qg\",\"5hQnRWiKkhgKJXNMP\",\"WdKdsgH9gXkKgCycx\",\"DqNQn9Jsxcu5HijKE\",\"dNErCjyFobE5sn4Zh\",\"hERDiXzMt3bagzfKp\",\"mHvoroWGDLYbJqQJa\",\"buX4mCQhtXCfBjeno\",\"Lg4t6SEWgtYz4u7Cj\",\"qAby4AWXmTNeusvg3\",\"ZMCBdxtiCWsSuh3ke\",\"GgZ7v6ALAcHpRkxaJ\",\"eYfPWvZwnJQkHbSTK\",\"5S9nX4rKsnCcnv4Cz\",\"JS3hNM3XXkxPdg3yk\",\"LW8PqW4HFXWfoJGo6\",\"BrTDhPJcACL2bsrpJ\",\"FSe2mfd98g84k5DW6\",\"Ds7L5bksw2QRHjrKL\",\"srJ34BaybkQh3qRkM\",\"Q7Yxda7dqKeYPs2Db\",\"KJCDwGkoXh8qtbbKr\",\"q9FfWNiMDKRiaCJ5j\",\"obxnkaoRRnEZLYeXo\",\"PWgzeK859suojbrRx\",\"pPpmP7xeJzGgK362R\",\"EfxwqhYdapX3dMQC2\",\"CHvzhtXnv8HTbPQ56\",\"LCuvvWMwiGuqTwNRi\",\"XD5nmvKQchKezPXhy\",\"8PwfYqoDQFThzNtvf\",\"AFfw7cGg83uYk2Miy\",\"BJp2WkwLWGHHB5oQW\",\"T6iBEE2jp7f7iEF2P\",\"66a9xX73nmTEuKs9k\",\"PC3pLs36zNzpRDSuE\",\"AJexRBN9cYQmqvYu6\",\"fTNQmMvTZhhiGBCMe\",\"CKHKhvJcq9jNMqrmd\",\"mvJBakQ35CWAnbbEZ\",\"JiSpvq6C7azQEmENc\",\"BdnE4RS5puoxo92mA\",\"ghMkPtdFCpM6w8nax\",\"RpgERwDm8vLhLF8sB\",\"ijDkrdZLoL5Cfqco3\",\"nLkfry33XzBFNAsQy\",\"5GmszQFtfcQzTL5kz\",\"ipj2CKRaCBXpqYXf6\",\"XHShZ3WMPgGEA2vkR\",\"dbgSzLXdovfM4xt5y\",\"RoGGD5cpHb4ftdLDv\",\"wwMcJQRvf3X59Jyev\",\"ShKXTq9PsTbp9Z6ZJ\",\"eBrW9KhRfYAkvqDhi\",\"X4rzfxGgxx6CS7Bpz\",\"oS4rJmw5qrnQf4tQ2\",\"eHcgvkTGsH7ZziqBo\",\"QZ3rEDRyuCdvnZukf\",\"2PufnQcsHsfymufX3\",\"yFEkz4siFN23Yp2wy\",\"jWbd7SYDzLPjc9EDh\",\"KQTgsjJyfh5KZ7qca\",\"GDAm8LCDSvgZT8cbs\",\"GJmKcqu7xppQyBaTt\",\"MMrsg6HXaBN7Whg6q\",\"Tewge9CvhaPK4iBEN\",\"D3Pr2EFee3652zsyR\",\"eHsLq38Azw3DhfANL\",\"9ivvGvJGvtQfigQaZ\",\"K6MfKMytoJJuSGewP\",\"a2Kmh6ekWqQQooHiQ\",\"mTF6oWX2WhFR4M3QK\",\"w3QDkmjZj2dAFDsjq\",\"TAZjm3HrM66jbrjFK\",\"8b38f4zjNvFqjf3Bb\",\"vNMWvESXfnKvoH2eK\",\"Tzt6u9udv6vthq2jM\",\"Hk7jbW4KWjeLAQDqn\",\"ifkMmBTotWQkLhzTM\",\"zsskgGLrEMLyHe7uS\",\"79TyGZsxETD3ZCh8K\",\"4Lwjr34ypKNQNQCar\",\"eHTQCexStWoGCAMxF\",\"aXDsZX4DSAzajNvkb\",\"YmMgWhzhHhQLmGGgH\",\"JhAEbSj5sAMofcxBf\",\"4tLFkGSzBMruqzo7Q\",\"5icjZw6e5gpwKHdqi\",\"w67KfQgZ6WAeY7K4Y\",\"GP2qkRFwiB4KMdgoH\",\"NGZ8NiyozrKCuJscH\",\"ey3CASd6Je5LEJzfB\",\"sKfrD9gjCDHuqLzSk\",\"hcAeJ5mhA7KTA6wkd\",\"j7ebNFtte6fSkMWjj\",\"qNszsXx28cTxvGSNj\",\"CNApbsXZYYfj8GJRM\",\"X4NJJi7cmYYMdud47\",\"RmwYNt4oSLCLLd8a5\",\"sg6DcBBRZCEGpD7Nn\",\"CZXa2Tzx75MXscb6B\",\"TyWfgZkRwM4e8K3it\",\"utyt9o5BYPWRbXf2X\",\"Jg8ZSRXe3NoDMCqGu\",\"r4SxRjftAGHkhn2qW\",\"k8uDKQFcoZDaoTfyC\",\"NPdFbTqe89K74mJGo\",\"cNQC9EWyvT2u37Wc9\",\"Fms9pER3egwxKfRwE\",\"wgeKgw6FvjDqgqrD4\",\"a6fgDQTddtZCKfnzR\",\"Wpn95NqWxncQrwNgz\",\"gBttqXDdpzevnT6Nr\",\"2jHL3YASvQgtmHoWe\",\"mCKqRAPMTht5QBnXo\",\"qiN6SCM5gpvsn9JRv\",\"T7QZG6y34b65Fxyef\",\"vCeeMuYDbz3MB4vsk\",\"chqzxpf5eLQWz4RxC\",\"brnCMatAy3RcqkGNh\",\"toquGJXpGmn3NHp5x\",\"ypGdjKLkswPZXo89K\",\"7k8SnQ7KihHkGRwoZ\",\"bJaPCBx63YxdJAuTS\",\"84JodiLhnefeD33gr\",\"baJigWtyBEH38rSyM\",\"XTXPqAC7A9aYR7QAp\",\"9fkNRdzrqSM2dwr4a\",\"xsDyJstYoBZRS8pJH\",\"kRLZtRJwJEBZkFBxd\",\"K9ncwb6W27Ldj4yQ7\",\"Yp4Jtxj7pHqZjheN7\",\"YNrfM5nZjFTdnoyAd\",\"xhA58Q3KHTK4mtuok\",\"fbr22rabEJMfBp7vD\",\"hygamCJnC9by3vogZ\",\"R6YxHWAiLgKwy5YvC\",\"StNu7DPyTgEStZsMY\",\"nc7bRhkxgKyqusYe3\",\"H4LqzfSad6d4BCgwy\",\"Xxug7QqQtgZP3syqD\",\"Wv2vJnEj8ywNmARoF\",\"S8tr6bsx8ZoKZ36Fd\",\"R2Bfn9Bkh7ATB6FJi\",\"qB6KSTYC6H2TQEQY6\",\"4z4h4Ljr575FyeZqT\",\"etoxSpG4fGKThLozM\",\"dubq5rhcr3LMBbWye\",\"C3qCXRTSJRgx2y2Ak\",\"ctbThYbufFCYbRK4f\",\"wxbE4MxxtjqCLzdjR\",\"6KqyvLcR4qjc4CmAC\",\"v7eDJjwv6vjBMu38q\",\"J23RcmzbdtBbPCTjT\",\"32Sgv3CF5hfzhuWEk\",\"T6Rm8mREPMZSftzrC\",\"JY8bKAMCAWjPiRkG3\",\"2fvHm3YPY7CiYTrwQ\",\"ho8SghmJswvP9QG6k\",\"kQH5b8MXJunh84Czq\",\"8YdAsw9XvwAgKKQnu\",\"KH4Wr3YSvNddCSRJ2\",\"GTKsdeEihE636Le9i\",\"4TmgHkn5vqyHK3sYC\",\"rMSmpyktYXkvAf6Sh\",\"cQ95Sm7uqkFSfX3jz\",\"7n8sLLk342c3xgTdz\",\"jPodEnpx7AwWpCpCa\",\"DHBGz3r4dCryvEDAp\",\"QWjsXnLaJ7xfL3Amq\",\"waHvhqyyDQNavYmBJ\",\"kc27cpmSvHZiv8LBk\",\"mmt7jwqbmSjzRSvqh\",\"PTDFuxAzou7W6asWt\",\"jCjCvyhqhpebkJn34\",\"qS5Xbh5sBC28e6j7E\",\"2FCRyJqwqzFTKSTgJ\",\"YXQvrgeiGzLd6cTW9\",\"hEpaAYfTpAp7xunYa\",\"iBHx7eL6anoBnF7yQ\",\"BQM7YYv9wrEqcbcN5\",\"AQSqD9oNv2uPfxZCR\",\"ckMvGF5TAyCwcxJBm\",\"m2XyPeyusHwBujAkD\",\"hR7GMiqGap4CzEWSy\",\"zkpiGFEto6X659waH\",\"ahBkkYXQaSQmhnvqT\",\"uGuS9YRXW2nj4p6zf\",\"Si6jT3DnRMXYd27k9\",\"pQwhNKiCne4gEZgcn\",\"sZ2eCa6pF6EN9PMmd\",\"NGvCPuMiAP3xrRLfB\",\"NiPjKwpgEmTdH5uZg\",\"796v8eRqahP6wpLdL\",\"hiGXnxds6zo7XsfTw\",\"9gJsF5apWJGWZJprn\",\"jkbavR2ATFJcpmo8M\",\"nkH3HfJXLMNcBMM79\",\"NuqGt5u3s7vJ7HBGR\",\"gdndm3hHunARcYWow\",\"tm3R3qmjwwqy2Kj6T\",\"mfsaETo7uA4x5vqLD\",\"ZjDaxu55uGTz82rXn\",\"no46qNkTbNeHepe64\",\"oig8ig9SE9RZa8ttL\",\"PH32cNxBjrK4a28sn\",\"CLypXaZksY99mpRCm\",\"4WYjScmBWK9eXRzvd\",\"cEtFW5ZFfCxDtRW2f\",\"LWcndkRmRFLP7zNTs\",\"WXJvukif774ts7Jqs\",\"bQR48QRLctu7MbA6K\",\"p7js9trz2zk2RorCR\",\"HBuJYgW2eRBJp9FoG\",\"iP7wNofhZXTkJ9ryG\",\"gpGXTvjS2HrY9Skq5\",\"LeC6LLPde9Wy5TtuS\",\"dSd7wHgXGQeG5BQ2P\",\"3KkyQm77zsew58Dc2\",\"d9LBRxvADNBB5QJMB\",\"TCvpT4EPb8qNssNB7\",\"GTZKQqf5GCu62c2ev\",\"rCrbqMiaGPgHYTNxu\",\"dzS6WBTMHyFEag6Fp\",\"AMpQSjKsRqhCDyS2j\",\"eW9R2SCoYnY8HBAdL\",\"peCvTbjQBgdWo53Wv\",\"sAmkYZXtFcQ9suGZc\",\"B4y8aoyXJtskYPFEL\",\"Qyfyyw6oC4EHAndzo\",\"vAh63eGRwkuJtoP8v\",\"suArq5BbSy7gD6xri\",\"5QN8R22z43SrwoHDz\",\"xjyixzXzqqqTfJARd\",\"xdgy7nWSKCekXnaJM\",\"MfAA58Bz5482Z5qQt\",\"Zyg9xAm6EuH4u3Lo5\",\"nFbmNzMQ38TncmfQX\",\"Hu4SkoNyWCP4vmsZE\",\"rDgKHd6ZSSpboiAj7\",\"wrL4iX2CCSqDCCty3\",\"54BFnXEjY3FuRNYpN\",\"vAbK8sCfKyFC78HYg\",\"ruzwBPphPDRgLXdnP\",\"NHp9cXgWCyX6KqyMT\",\"7DXJ3mvKMHHqBLt92\",\"Wi4H6ayKsNDWWQCG5\",\"CTAEoRuk6Yzoypvhp\",\"dqwatKFAeGpjmf5dm\",\"RfbjShbg8jmhyNtJh\",\"WQubx7DAkG6WZE8FA\"],\"total\":532,\"quality\":[3,5,5,5,4,5,1,5,5,3,5,4,5,5,5,5,5,5,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,5,5,5,5,5,5,5,4,5,5,5,5,5,5,4,5,5,4,5,3,5,3,5,5,4,5,5,5,5,5,5,5,5,5,4,5,5,5,5,5,4]},\"flags\":0},\"summary\":\"Given a string, create a function that outputs a list, building and deconstructing the string letter by letter. See the examples below for some helpful guidance.\\n\\nExamples\\nconstruct_deconstruct(\\\"Hello\\\") ➞ [\\n  \\\"H\\\",\\n  \\\"He\\\",\\n  \\\"Hel\\\",\\n  \\\"Hell\\\",\\n  \\\"Hello\\\",\\n  \\\"Hell\\\",\\n  \\\"Hel\\\",\\n  \\\"He\\\",\\n  \\\"H\\\"\\n]\\n\\nconstruct_deconstruct(\\\"edabit\\\") ➞ [\\n  \\\"e\\\",\\n  \\\"ed\\\",\\n  \\\"eda\\\",\\n  \\\"edab\\\",\\n  \\\"e\",\"tags\":[\"language_fundamentals\",\"strings\",\"arrays\",\"loops\"],\"timestamp\":{\"$date\":1581773842871},\"title\":\"Construct and Deconstruct\",\"quality\":4.72289156626506,\"family\":[{\"_id\":\"jikcGNCLLGNpeLKEP\",\"language\":\"cpp\"},{\"_id\":\"ALy97jpKC2CPRJsYR\",\"language\":\"javascript\"},{\"_id\":\"e3RdbwNqcso47X3gu\",\"language\":\"php\"},{\"_id\":\"rwPguhgju54AMR2kM\",\"language\":\"python3\"},{\"_id\":\"M5ENGZahmefiky5Xk\",\"language\":\"ruby\"}]}}"]