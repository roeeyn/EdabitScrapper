a["{\"msg\":\"result\",\"id\":\"899\",\"result\":{\"_id\":\"qM6zWQM7gdfPgE9Hh\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def filter_by_rating(d, rating):\\n\\t\",\"difficulty\":1.4454022988505748,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"zZA9CL4EAiAfjDGWN\",\"instructions\":\"Given a *dictionary* of some items with *star ratings* and a *specified star rating*, return a new dictionary of items **which match the specified star rating**. Return `\\\"No results found\\\"` if *no item* matches the *star rating* given.\\n\\n### Examples\\n```\\nfilter_by_rating({\\n  \\\"Luxury Chocolates\\\" : \\\"*****\\\",\\n  \\\"Tasty Chocolates\\\" : \\\"****\\\",\\n  \\\"Aunty May Chocolates\\\" : \\\"*****\\\",\\n  \\\"Generic Chocolates\\\" : \\\"***\\\"\\n}, \\\"*****\\\") ➞ {\\n  \\\"Luxury Chocolates\\\" : \\\"*****\\\",\\n  \\\"Aunty May Chocolates\\\" : \\\"*****\\\"\\n}\\n\\nfilter_by_rating({\\n  \\\"Continental Hotel\\\" : \\\"****\\\",\\n  \\\"Big Street Hotel\\\" : \\\"**\\\",\\n  \\\"Corner Hotel\\\" : \\\"**\\\",\\n  \\\"Trashviews Hotel\\\" : \\\"*\\\",\\n  \\\"Hazbins\\\" : \\\"*****\\\"\\n}, \\\"*\\\") ➞ {\\n  \\\"Trashviews Hotel\\\" : \\\"*\\\"\\n}\\n\\nfilter_by_rating({\\n  \\\"Solo Restaurant\\\" : \\\"***\\\",\\n  \\\"Finest Dinings\\\" : \\\"*****\\\",\\n  \\\"Burger Stand\\\" : \\\"***\\\"\\n}, \\\"****\\\") ➞ \\\"No results found\\\"\\n```\\n\\n### Notes\\nN/A\",\"isHidden\":false,\"lab\":\"Test.assert_equals(filter_by_rating({\\\"Brand A\\\": \\\"*\\\", \\\"Brand B\\\": \\\"*****\\\", \\\"Brand C\\\": \\\"*\\\", \\\"Brand D\\\": \\\"**\\\", \\\"Brand E\\\": \\\"****\\\", \\\"Brand F\\\": \\\"*****\\\", \\\"Brand G\\\": \\\"****\\\", \\\"Brand H\\\": \\\"****\\\", \\\"Brand I\\\": \\\"*****\\\", \\\"Brand K\\\": \\\"***\\\", \\\"Brand L\\\": \\\"*****\\\", \\\"Brand M\\\": \\\"***\\\", \\\"Brand N\\\": \\\"*\\\", \\\"Brand O\\\": \\\"***\\\", \\\"Brand P\\\": \\\"*****\\\", \\\"Brand Q\\\": \\\"**\\\", \\\"Brand R\\\": \\\"****\\\"}, \\\"***\\\"), {\\\"Brand K\\\": \\\"***\\\", \\\"Brand M\\\": \\\"***\\\", \\\"Brand O\\\": \\\"***\\\"})\\nTest.assert_equals(filter_by_rating({\\\"Brand A\\\": \\\"*\\\", \\\"Brand B\\\": \\\"***\\\", \\\"Brand C\\\": \\\"**\\\", \\\"Brand D\\\": \\\"*****\\\", \\\"Brand E\\\": \\\"*\\\", \\\"Brand F\\\": \\\"****\\\", \\\"Brand G\\\": \\\"*****\\\", \\\"Brand H\\\": \\\"*****\\\", \\\"Brand I\\\": \\\"**\\\", \\\"Brand K\\\": \\\"*\\\", \\\"Brand L\\\": \\\"*\\\", \\\"Brand M\\\": \\\"***\\\", \\\"Brand N\\\": \\\"*\\\", \\\"Brand O\\\": \\\"*\\\", \\\"Brand P\\\": \\\"**\\\", \\\"Brand Q\\\": \\\"**\\\", \\\"Brand R\\\": \\\"****\\\", \\\"Brand S\\\": \\\"****\\\", \\\"Brand T\\\": \\\"**\\\", \\\"Brand U\\\": \\\"*\\\", \\\"Brand V\\\": \\\"*\\\", \\\"Brand W\\\": \\\"*\\\", \\\"Brand X\\\": \\\"***\\\", \\\"Brand Y\\\": \\\"*****\\\", \\\"Brand Z\\\": \\\"****\\\"}, \\\"**\\\"), {\\\"Brand C\\\": \\\"**\\\", \\\"Brand I\\\": \\\"**\\\", \\\"Brand P\\\": \\\"**\\\", \\\"Brand Q\\\": \\\"**\\\", \\\"Brand T\\\": \\\"**\\\"})\\nTest.assert_equals(filter_by_rating({\\\"Brand A\\\": \\\"***\\\", \\\"Brand B\\\": \\\"**\\\", \\\"Brand C\\\": \\\"****\\\", \\\"Brand D\\\": \\\"*\\\", \\\"Brand E\\\": \\\"*\\\", \\\"Brand F\\\": \\\"**\\\", \\\"Brand G\\\": \\\"***\\\", \\\"Brand H\\\": \\\"*\\\", \\\"Brand I\\\": \\\"**\\\", \\\"Brand K\\\": \\\"*****\\\", \\\"Brand L\\\": \\\"**\\\", \\\"Brand M\\\": \\\"*\\\"}, \\\"**\\\"), {\\\"Brand B\\\": \\\"**\\\", \\\"Brand F\\\": \\\"**\\\", \\\"Brand I\\\": \\\"**\\\", \\\"Brand L\\\": \\\"**\\\"})\\nTest.assert_equals(filter_by_rating({\\\"Brand A\\\": \\\"*\\\", \\\"Brand B\\\": \\\"***\\\", \\\"Brand C\\\": \\\"***\\\", \\\"Brand D\\\": \\\"***\\\", \\\"Brand E\\\": \\\"*\\\", \\\"Brand F\\\": \\\"**\\\", \\\"Brand G\\\": \\\"***\\\", \\\"Brand H\\\": \\\"*****\\\", \\\"Brand I\\\": \\\"**\\\", \\\"Brand K\\\": \\\"***\\\", \\\"Brand L\\\": \\\"*\\\", \\\"Brand M\\\": \\\"****\\\", \\\"Brand N\\\": \\\"****\\\", \\\"Brand O\\\": \\\"***\\\", \\\"Brand P\\\": \\\"**\\\", \\\"Brand Q\\\": \\\"*****\\\", \\\"Brand R\\\": \\\"*\\\", \\\"Brand S\\\": \\\"*\\\", \\\"Brand T\\\": \\\"*****\\\", \\\"Brand U\\\": \\\"*****\\\", \\\"Brand V\\\": \\\"*\\\", \\\"Brand W\\\": \\\"*****\\\", \\\"Brand X\\\": \\\"****\\\", \\\"Brand Y\\\": \\\"*\\\", \\\"Brand Z\\\": \\\"*****\\\"}, \\\"****\\\"), {\\\"Brand M\\\": \\\"****\\\", \\\"Brand N\\\": \\\"****\\\", \\\"Brand X\\\": \\\"****\\\"})\\nTest.assert_equals(filter_by_rating({\\\"Brand A\\\": \\\"*\\\", \\\"Brand B\\\": \\\"****\\\", \\\"Brand C\\\": \\\"*****\\\", \\\"Brand D\\\": \\\"*\\\", \\\"Brand E\\\": \\\"**\\\", \\\"Brand F\\\": \\\"***\\\", \\\"Brand G\\\": \\\"*\\\", \\\"Brand H\\\": \\\"**\\\", \\\"Brand I\\\": \\\"*\\\", \\\"Brand K\\\": \\\"**\\\", \\\"Brand L\\\": \\\"****\\\"}, \\\"*\\\"), {\\\"Brand A\\\": \\\"*\\\", \\\"Brand D\\\": \\\"*\\\", \\\"Brand G\\\": \\\"*\\\", \\\"Brand I\\\": \\\"*\\\"})\\nTest.assert_equals(filter_by_rating({\\\"Brand A\\\": \\\"****\\\", \\\"Brand B\\\": \\\"****\\\", \\\"Brand C\\\": \\\"**\\\", \\\"Brand D\\\": \\\"*\\\", \\\"Brand E\\\": \\\"**\\\", \\\"Brand F\\\": \\\"***\\\", \\\"Brand G\\\": \\\"***\\\", \\\"Brand H\\\": \\\"**\\\", \\\"Brand I\\\": \\\"*\\\", \\\"Brand K\\\": \\\"*\\\", \\\"Brand L\\\": \\\"****\\\", \\\"Brand M\\\": \\\"*\\\", \\\"Brand N\\\": \\\"*****\\\", \\\"Brand O\\\": \\\"**\\\", \\\"Brand P\\\": \\\"*\\\", \\\"Brand Q\\\": \\\"*****\\\", \\\"Brand R\\\": \\\"*\\\"}, \\\"****\\\"), {\\\"Brand A\\\": \\\"****\\\", \\\"Brand B\\\": \\\"****\\\", \\\"Brand L\\\": \\\"****\\\"})\\nTest.assert_equals(filter_by_rating({\\\"Brand A\\\": \\\"**\\\", \\\"Brand B\\\": \\\"*\\\", \\\"Brand C\\\": \\\"*\\\"}, \\\"**\\\"), {\\\"Brand A\\\": \\\"**\\\"})\\nTest.assert_equals(filter_by_rating({\\\"Brand A\\\": \\\"****\\\", \\\"Brand B\\\": \\\"*\\\", \\\"Brand C\\\": \\\"****\\\", \\\"Brand D\\\": \\\"***\\\", \\\"Brand E\\\": \\\"*****\\\"}, \\\"**\\\"), \\\"No results found\\\")\\nTest.assert_equals(filter_by_rating({\\\"Brand A\\\": \\\"****\\\", \\\"Brand B\\\": \\\"****\\\", \\\"Brand C\\\": \\\"***\\\", \\\"Brand D\\\": \\\"****\\\", \\\"Brand E\\\": \\\"*****\\\", \\\"Brand F\\\": \\\"*\\\", \\\"Brand G\\\": \\\"****\\\", \\\"Brand H\\\": \\\"*****\\\", \\\"Brand I\\\": \\\"*\\\", \\\"Brand K\\\": \\\"****\\\", \\\"Brand L\\\": \\\"****\\\", \\\"Brand M\\\": \\\"*\\\", \\\"Brand N\\\": \\\"***\\\", \\\"Brand O\\\": \\\"**\\\", \\\"Brand P\\\": \\\"*\\\", \\\"Brand Q\\\": \\\"*\\\", \\\"Brand R\\\": \\\"****\\\", \\\"Brand S\\\": \\\"*****\\\", \\\"Brand T\\\": \\\"****\\\", \\\"Brand U\\\": \\\"*****\\\", \\\"Brand V\\\": \\\"****\\\", \\\"Brand W\\\": \\\"****\\\", \\\"Brand X\\\": \\\"**\\\", \\\"Brand Y\\\": \\\"*\\\"}, \\\"****\\\"), {\\\"Brand A\\\": \\\"****\\\", \\\"Brand B\\\": \\\"****\\\", \\\"Brand D\\\": \\\"****\\\", \\\"Brand G\\\": \\\"****\\\", \\\"Brand K\\\": \\\"****\\\", \\\"Brand L\\\": \\\"****\\\", \\\"Brand R\\\": \\\"****\\\", \\\"Brand T\\\": \\\"****\\\", \\\"Brand V\\\": \\\"****\\\", \\\"Brand W\\\": \\\"****\\\"})\\nTest.assert_equals(filter_by_rating({\\\"Brand A\\\": \\\"**\\\", \\\"Brand B\\\": \\\"****\\\", \\\"Brand C\\\": \\\"***\\\", \\\"Brand D\\\": \\\"****\\\", \\\"Brand E\\\": \\\"*\\\", \\\"Brand F\\\": \\\"*\\\", \\\"Brand G\\\": \\\"**\\\", \\\"Brand H\\\": \\\"***\\\", \\\"Brand I\\\": \\\"***\\\", \\\"Brand K\\\": \\\"**\\\", \\\"Brand L\\\": \\\"***\\\", \\\"Brand M\\\": \\\"**\\\", \\\"Brand N\\\": \\\"**\\\", \\\"Brand O\\\": \\\"*\\\", \\\"Brand P\\\": \\\"*\\\", \\\"Brand Q\\\": \\\"*****\\\", \\\"Brand R\\\": \\\"***\\\", \\\"Brand S\\\": \\\"**\\\", \\\"Brand T\\\": \\\"*\\\", \\\"Brand U\\\": \\\"**\\\", \\\"Brand V\\\": \\\"*\\\", \\\"Brand W\\\": \\\"**\\\", \\\"Brand X\\\": \\\"****\\\"}, \\\"**\\\"), {\\\"Brand A\\\": \\\"**\\\", \\\"Brand G\\\": \\\"**\\\", \\\"Brand K\\\": \\\"**\\\", \\\"Brand M\\\": \\\"**\\\", \\\"Brand N\\\": \\\"**\\\", \\\"Brand S\\\": \\\"**\\\", \\\"Brand U\\\": \\\"**\\\", \\\"Brand W\\\": \\\"**\\\"})\\nTest.assert_equals(filter_by_rating({\\\"Brand A\\\": \\\"*\\\", \\\"Brand B\\\": \\\"**\\\", \\\"Brand C\\\": \\\"****\\\", \\\"Brand D\\\": \\\"*****\\\", \\\"Brand E\\\": \\\"*****\\\", \\\"Brand F\\\": \\\"*****\\\", \\\"Brand G\\\": \\\"****\\\", \\\"Brand H\\\": \\\"*\\\", \\\"Brand I\\\": \\\"*\\\", \\\"Brand K\\\": \\\"*\\\", \\\"Brand L\\\": \\\"****\\\", \\\"Brand M\\\": \\\"*\\\", \\\"Brand N\\\": \\\"***\\\", \\\"Brand O\\\": \\\"****\\\", \\\"Brand P\\\": \\\"****\\\", \\\"Brand Q\\\": \\\"****\\\", \\\"Brand R\\\": \\\"****\\\", \\\"Brand S\\\": \\\"**\\\", \\\"Brand T\\\": \\\"****\\\"}, \\\"*\\\"), {\\\"Brand A\\\": \\\"*\\\", \\\"Brand H\\\": \\\"*\\\", \\\"Brand I\\\": \\\"*\\\", \\\"Brand K\\\": \\\"*\\\", \\\"Brand M\\\": \\\"*\\\"})\\nTest.assert_equals(filter_by_rating({\\\"Brand A\\\": \\\"**\\\", \\\"Brand B\\\": \\\"*\\\", \\\"Brand C\\\": \\\"*****\\\", \\\"Brand D\\\": \\\"*****\\\"}, \\\"*****\\\"), {\\\"Brand C\\\": \\\"*****\\\", \\\"Brand D\\\": \\\"*****\\\"})\\nTest.assert_equals(filter_by_rating({\\\"Brand A\\\": \\\"*****\\\", \\\"Brand B\\\": \\\"***\\\", \\\"Brand C\\\": \\\"***\\\", \\\"Brand D\\\": \\\"***\\\", \\\"Brand E\\\": \\\"***\\\", \\\"Brand F\\\": \\\"***\\\", \\\"Brand G\\\": \\\"****\\\", \\\"Brand H\\\": \\\"*\\\", \\\"Brand I\\\": \\\"**\\\", \\\"Brand K\\\": \\\"***\\\", \\\"Brand L\\\": \\\"****\\\", \\\"Brand M\\\": \\\"*\\\", \\\"Brand N\\\": \\\"*****\\\", \\\"Brand O\\\": \\\"**\\\", \\\"Brand P\\\": \\\"*\\\", \\\"Brand Q\\\": \\\"****\\\", \\\"Brand R\\\": \\\"**\\\", \\\"Brand S\\\": \\\"****\\\", \\\"Brand T\\\": \\\"*\\\", \\\"Brand U\\\": \\\"*****\\\", \\\"Brand V\\\": \\\"**\\\", \\\"Brand W\\\": \\\"*\\\", \\\"Brand X\\\": \\\"**\\\", \\\"Brand Y\\\": \\\"*****\\\"}, \\\"****\\\"), {\\\"Brand G\\\": \\\"****\\\", \\\"Brand L\\\": \\\"****\\\", \\\"Brand Q\\\": \\\"****\\\", \\\"Brand S\\\": \\\"****\\\"})\\nTest.assert_equals(filter_by_rating({\\\"Brand A\\\": \\\"*\\\", \\\"Brand B\\\": \\\"*****\\\", \\\"Brand C\\\": \\\"*****\\\", \\\"Brand D\\\": \\\"*\\\", \\\"Brand E\\\": \\\"****\\\", \\\"Brand F\\\": \\\"*\\\", \\\"Brand G\\\": \\\"****\\\", \\\"Brand H\\\": \\\"*****\\\", \\\"Brand I\\\": \\\"***\\\", \\\"Brand K\\\": \\\"***\\\", \\\"Brand L\\\": \\\"***\\\", \\\"Brand M\\\": \\\"*\\\", \\\"Brand N\\\": \\\"****\\\", \\\"Brand O\\\": \\\"****\\\", \\\"Brand P\\\": \\\"**\\\", \\\"Brand Q\\\": \\\"*****\\\", \\\"Brand R\\\": \\\"***\\\"}, \\\"****\\\"), {\\\"Brand E\\\": \\\"****\\\", \\\"Brand G\\\": \\\"****\\\", \\\"Brand N\\\": \\\"****\\\", \\\"Brand O\\\": \\\"****\\\"})\\nTest.assert_equals(filter_by_rating({\\\"Brand A\\\": \\\"***\\\", \\\"Brand B\\\": \\\"****\\\", \\\"Brand C\\\": \\\"****\\\", \\\"Brand D\\\": \\\"*\\\", \\\"Brand E\\\": \\\"**\\\", \\\"Brand F\\\": \\\"****\\\", \\\"Brand G\\\": \\\"*****\\\", \\\"Brand H\\\": \\\"****\\\", \\\"Brand I\\\": \\\"*\\\"}, \\\"****\\\"), {\\\"Brand B\\\": \\\"****\\\", \\\"Brand C\\\": \\\"****\\\", \\\"Brand F\\\": \\\"****\\\", \\\"Brand H\\\": \\\"****\\\"})\\nTest.assert_equals(filter_by_rating({\\\"Brand A\\\": \\\"*\\\", \\\"Brand B\\\": \\\"*****\\\", \\\"Brand C\\\": \\\"**\\\", \\\"Brand D\\\": \\\"*****\\\", \\\"Brand E\\\": \\\"**\\\", \\\"Brand F\\\": \\\"*\\\", \\\"Brand G\\\": \\\"**\\\", \\\"Brand H\\\": \\\"***\\\", \\\"Brand I\\\": \\\"***\\\", \\\"Brand K\\\": \\\"*****\\\"}, \\\"*****\\\"), {\\\"Brand B\\\": \\\"*****\\\", \\\"Brand D\\\": \\\"*****\\\", \\\"Brand K\\\": \\\"*****\\\"})\\nTest.assert_equals(filter_by_rating({\\\"Brand A\\\": \\\"****\\\", \\\"Brand B\\\": \\\"****\\\", \\\"Brand C\\\": \\\"*****\\\", \\\"Brand D\\\": \\\"*****\\\", \\\"Brand E\\\": \\\"****\\\", \\\"Brand F\\\": \\\"***\\\", \\\"Brand G\\\": \\\"**\\\", \\\"Brand H\\\": \\\"**\\\", \\\"Brand I\\\": \\\"****\\\", \\\"Brand K\\\": \\\"****\\\", \\\"Brand L\\\": \\\"****\\\", \\\"Brand M\\\": \\\"****\\\", \\\"Brand N\\\": \\\"***\\\", \\\"Brand O\\\": \\\"**\\\"}, \\\"****\\\"), {\\\"Brand A\\\": \\\"****\\\", \\\"Brand B\\\": \\\"****\\\", \\\"Brand E\\\": \\\"****\\\", \\\"Brand I\\\": \\\"****\\\", \\\"Brand K\\\": \\\"****\\\", \\\"Brand L\\\": \\\"****\\\", \\\"Brand M\\\": \\\"****\\\"})\\nTest.assert_equals(filter_by_rating({\\\"Brand A\\\": \\\"***\\\", \\\"Brand B\\\": \\\"***\\\"}, \\\"*****\\\"), \\\"No results found\\\")\\nTest.assert_equals(filter_by_rating({\\\"Brand A\\\": \\\"***\\\", \\\"Brand B\\\": \\\"*****\\\", \\\"Brand C\\\": \\\"*\\\", \\\"Brand D\\\": \\\"****\\\", \\\"Brand E\\\": \\\"*\\\", \\\"Brand F\\\": \\\"**\\\", \\\"Brand G\\\": \\\"**\\\", \\\"Brand H\\\": \\\"*****\\\", \\\"Brand I\\\": \\\"**\\\", \\\"Brand K\\\": \\\"****\\\", \\\"Brand L\\\": \\\"**\\\", \\\"Brand M\\\": \\\"**\\\", \\\"Brand N\\\": \\\"****\\\", \\\"Brand O\\\": \\\"****\\\", \\\"Brand P\\\": \\\"*****\\\"}, \\\"***\\\"), {\\\"Brand A\\\": \\\"***\\\"})\\nTest.assert_equals(filter_by_rating({\\\"Brand A\\\": \\\"**\\\", \\\"Brand B\\\": \\\"*\\\", \\\"Brand C\\\": \\\"*****\\\", \\\"Brand D\\\": \\\"*****\\\", \\\"Brand E\\\": \\\"*\\\", \\\"Brand F\\\": \\\"***\\\", \\\"Brand G\\\": \\\"*\\\", \\\"Brand H\\\": \\\"**\\\", \\\"Brand I\\\": \\\"*\\\", \\\"Brand K\\\": \\\"**\\\", \\\"Brand L\\\": \\\"*\\\", \\\"Brand M\\\": \\\"***\\\", \\\"Brand N\\\": \\\"*****\\\", \\\"Brand O\\\": \\\"*\\\"}, \\\"*****\\\"), {\\\"Brand C\\\": \\\"*****\\\", \\\"Brand D\\\": \\\"*****\\\", \\\"Brand N\\\": \\\"*****\\\"})\\nTest.assert_equals(filter_by_rating({\\\"Brand A\\\": \\\"*\\\", \\\"Brand B\\\": \\\"*\\\", \\\"Brand C\\\": \\\"*\\\", \\\"Brand D\\\": \\\"***\\\", \\\"Brand E\\\": \\\"****\\\", \\\"Brand F\\\": \\\"***\\\", \\\"Brand G\\\": \\\"*****\\\", \\\"Brand H\\\": \\\"**\\\", \\\"Brand I\\\": \\\"*\\\", \\\"Brand K\\\": \\\"*****\\\", \\\"Brand L\\\": \\\"***\\\", \\\"Brand M\\\": \\\"***\\\", \\\"Brand N\\\": \\\"***\\\", \\\"Brand O\\\": \\\"**\\\", \\\"Brand P\\\": \\\"**\\\", \\\"Brand Q\\\": \\\"*****\\\", \\\"Brand R\\\": \\\"****\\\", \\\"Brand S\\\": \\\"***\\\", \\\"Brand T\\\": \\\"****\\\", \\\"Brand U\\\": \\\"*****\\\", \\\"Brand V\\\": \\\"***\\\", \\\"Brand W\\\": \\\"*****\\\", \\\"Brand X\\\": \\\"*****\\\", \\\"Brand Y\\\": \\\"***\\\"}, \\\"*****\\\"), {\\\"Brand G\\\": \\\"*****\\\", \\\"Brand K\\\": \\\"*****\\\", \\\"Brand Q\\\": \\\"*****\\\", \\\"Brand U\\\": \\\"*****\\\", \\\"Brand W\\\": \\\"*****\\\", \\\"Brand X\\\": \\\"*****\\\"})\\nTest.assert_equals(filter_by_rating({\\\"Brand A\\\": \\\"*****\\\", \\\"Brand B\\\": \\\"****\\\", \\\"Brand C\\\": \\\"****\\\", \\\"Brand D\\\": \\\"*\\\", \\\"Brand E\\\": \\\"*\\\", \\\"Brand F\\\": \\\"****\\\", \\\"Brand G\\\": \\\"****\\\", \\\"Brand H\\\": \\\"**\\\", \\\"Brand I\\\": \\\"****\\\", \\\"Brand K\\\": \\\"****\\\", \\\"Brand L\\\": \\\"*****\\\", \\\"Brand M\\\": \\\"*****\\\", \\\"Brand N\\\": \\\"***\\\", \\\"Brand O\\\": \\\"****\\\", \\\"Brand P\\\": \\\"**\\\", \\\"Brand Q\\\": \\\"***\\\", \\\"Brand R\\\": \\\"***\\\", \\\"Brand S\\\": \\\"*****\\\", \\\"Brand T\\\": \\\"*\\\", \\\"Brand U\\\": \\\"*****\\\", \\\"Brand V\\\": \\\"****\\\", \\\"Brand W\\\": \\\"***\\\"}, \\\"****\\\"), {\\\"Brand B\\\": \\\"****\\\", \\\"Brand C\\\": \\\"****\\\", \\\"Brand F\\\": \\\"****\\\", \\\"Brand G\\\": \\\"****\\\", \\\"Brand I\\\": \\\"****\\\", \\\"Brand K\\\": \\\"****\\\", \\\"Brand O\\\": \\\"****\\\", \\\"Brand V\\\": \\\"****\\\"})\\nTest.assert_equals(filter_by_rating({\\\"Brand A\\\": \\\"*\\\", \\\"Brand B\\\": \\\"****\\\", \\\"Brand C\\\": \\\"*\\\", \\\"Brand D\\\": \\\"*****\\\", \\\"Brand E\\\": \\\"**\\\", \\\"Brand F\\\": \\\"****\\\", \\\"Brand G\\\": \\\"***\\\", \\\"Brand H\\\": \\\"****\\\", \\\"Brand I\\\": \\\"*\\\", \\\"Brand K\\\": \\\"*\\\", \\\"Brand L\\\": \\\"*****\\\", \\\"Brand M\\\": \\\"*****\\\", \\\"Brand N\\\": \\\"*\\\", \\\"Brand O\\\": \\\"**\\\", \\\"Brand P\\\": \\\"*****\\\", \\\"Brand Q\\\": \\\"**\\\", \\\"Brand R\\\": \\\"*****\\\", \\\"Brand S\\\": \\\"*****\\\", \\\"Brand T\\\": \\\"****\\\", \\\"Brand U\\\": \\\"*****\\\", \\\"Brand V\\\": \\\"*****\\\", \\\"Brand W\\\": \\\"**\\\", \\\"Brand X\\\": \\\"***\\\"}, \\\"**\\\"), {\\\"Brand E\\\": \\\"**\\\", \\\"Brand O\\\": \\\"**\\\", \\\"Brand Q\\\": \\\"**\\\", \\\"Brand W\\\": \\\"**\\\"})\\nTest.assert_equals(filter_by_rating({\\\"Brand A\\\": \\\"**\\\", \\\"Brand B\\\": \\\"**\\\", \\\"Brand C\\\": \\\"**\\\", \\\"Brand D\\\": \\\"***\\\", \\\"Brand E\\\": \\\"*****\\\", \\\"Brand F\\\": \\\"**\\\"}, \\\"****\\\"), \\\"No results found\\\")\\nTest.assert_equals(filter_by_rating({\\\"Brand A\\\": \\\"*\\\", \\\"Brand B\\\": \\\"*\\\", \\\"Brand C\\\": \\\"**\\\", \\\"Brand D\\\": \\\"*\\\", \\\"Brand E\\\": \\\"****\\\", \\\"Brand F\\\": \\\"****\\\", \\\"Brand G\\\": \\\"**\\\", \\\"Brand H\\\": \\\"*\\\", \\\"Brand I\\\": \\\"***\\\", \\\"Brand K\\\": \\\"**\\\", \\\"Brand L\\\": \\\"***\\\", \\\"Brand M\\\": \\\"***\\\", \\\"Brand N\\\": \\\"****\\\", \\\"Brand O\\\": \\\"*\\\", \\\"Brand P\\\": \\\"*****\\\", \\\"Brand Q\\\": \\\"*****\\\", \\\"Brand R\\\": \\\"*\\\", \\\"Brand S\\\": \\\"****\\\", \\\"Brand T\\\": \\\"****\\\", \\\"Brand U\\\": \\\"*\\\", \\\"Brand V\\\": \\\"**\\\", \\\"Brand W\\\": \\\"****\\\", \\\"Brand X\\\": \\\"****\\\", \\\"Brand Y\\\": \\\"****\\\", \\\"Brand Z\\\": \\\"**\\\"}, \\\"***\\\"), {\\\"Brand I\\\": \\\"***\\\", \\\"Brand L\\\": \\\"***\\\", \\\"Brand M\\\": \\\"***\\\"})\\nTest.assert_equals(filter_by_rating({\\\"Brand A\\\": \\\"**\\\", \\\"Brand B\\\": \\\"*****\\\", \\\"Brand C\\\": \\\"***\\\", \\\"Brand D\\\": \\\"**\\\", \\\"Brand E\\\": \\\"*\\\", \\\"Brand F\\\": \\\"****\\\", \\\"Brand G\\\": \\\"****\\\", \\\"Brand H\\\": \\\"*\\\", \\\"Brand I\\\": \\\"*\\\", \\\"Brand K\\\": \\\"*\\\", \\\"Brand L\\\": \\\"****\\\", \\\"Brand M\\\": \\\"*\\\", \\\"Brand N\\\": \\\"**\\\", \\\"Brand O\\\": \\\"*\\\", \\\"Brand P\\\": \\\"**\\\", \\\"Brand Q\\\": \\\"*\\\"}, \\\"*****\\\"), {\\\"Brand B\\\": \\\"*****\\\"})\\nTest.assert_equals(filter_by_rating({\\\"Brand A\\\": \\\"****\\\", \\\"Brand B\\\": \\\"*****\\\", \\\"Brand C\\\": \\\"*****\\\", \\\"Brand D\\\": \\\"****\\\", \\\"Brand E\\\": \\\"**\\\", \\\"Brand F\\\": \\\"*\\\", \\\"Brand G\\\": \\\"**\\\", \\\"Brand H\\\": \\\"**\\\", \\\"Brand I\\\": \\\"***\\\", \\\"Brand K\\\": \\\"***\\\", \\\"Brand L\\\": \\\"***\\\", \\\"Brand M\\\": \\\"***\\\", \\\"Brand N\\\": \\\"****\\\", \\\"Brand O\\\": \\\"*****\\\", \\\"Brand P\\\": \\\"*\\\", \\\"Brand Q\\\": \\\"*\\\", \\\"Brand R\\\": \\\"****\\\", \\\"Brand S\\\": \\\"**\\\", \\\"Brand T\\\": \\\"**\\\", \\\"Brand U\\\": \\\"*****\\\", \\\"Brand V\\\": \\\"***\\\", \\\"Brand W\\\": \\\"***\\\"}, \\\"**\\\"), {\\\"Brand E\\\": \\\"**\\\", \\\"Brand G\\\": \\\"**\\\", \\\"Brand H\\\": \\\"**\\\", \\\"Brand S\\\": \\\"**\\\", \\\"Brand T\\\": \\\"**\\\"})\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[1,1,1,1,1,1,1,0,2,2,1,2,1,2,0,2,1,1,1,0,2,0,1,1,1,1,2,2,1,1,2,2,1,1,1,1,1,2,5,0,2,2,2,1,2,1,2,2,0,0,1,3,1,2,2,2,2,0,0,2,1,2,2,2,3,2,2,2,2,2,2,1,1,2,1,2,1,2,1,1,2,1,2,0,1,1,1,0,3,2,1,1,2,2,2,1,2,2,2,2,1,3,5,2,2,0,1,2,1,2,1,2,1,2,0,0,1,0,2,2,1,1,1,2,1,2,2,1,2,3,1,0,2,2,2,1,1,2,1,2,2,2,2,2,1,1,2,0,2,2,2,2,1,1,2,1,2,0,0,2,2,1,2,0,1,1,2,1,1,1,0,1,1,3,0,2,2,2,1,2,2,2,2,2,1,1,2,2,2,2,2,1,1,1,2,2,2,2,0,1,2,2,2,2,0,2,3,0,1,1,2,0,2,2,2,1,2,1,2,2,1,2,2,1,2,2,0,2,2,2,2,3,1,1,1,1,2,0,1,2,2,0,2,2,2,4,2,2,0,1,1,1,0,1,2,2,0,2,1,1,0,0,1,0,2,2,0,2,2,2,1,2,2,1,2,0,1,0,1,2,2,2,1,0,2,2,2,2,2,2,0,2,2,2,1,2,1,0,2,1,2,2,2,2,2,2,2,3,2,2,2,0,1,0,2,1,2,1,2,2,2,1,1,2,1,2,1,2,1,1,1,1,2,0,2,1,2,1,1,2,1,0,1,2,2,2,1,1],\"rators\":[\"tAF9Gf6PiGogbZuWs\",\"4CFzv558qbGcpQwc4\",\"WcqujsAnCdQ9uRbeZ\",\"N7b2y49qSY4STXDgj\",\"QnPD4Sv6W4LHc2Qng\",\"N2wnZXkhDH86mgjQ8\",\"Wv5c7WsK6R8yb4mTt\",\"u5u2YpHXiNgzDNJdX\",\"gb9rvGus2Jv7bjZSs\",\"TPrfNreYTj6pQQBh7\",\"2fxapKr8XGdNeaKi2\",\"rJFxP8NgzZhZ6ryXq\",\"ey3CASd6Je5LEJzfB\",\"j2wcHGHmPCHbaQEye\",\"yabtHTtycsWhcGBfD\",\"sz8ufn9i8zeiGWpAy\",\"Jqk2uJZZxEv5wZFze\",\"cSMKd6Yq8Pyq8TvWR\",\"iMHrN3Wiefh9Ame38\",\"cSaaAxqkYsPDXmMuf\",\"pDBjKHH2azj2js4SB\",\"Ycj4iTJGFyvC4bXek\",\"Hryvbd5DHrRZPSeM8\",\"8JyqsSbN2FJXPr3cw\",\"C4QntmkYtB89GNtpd\",\"hnyhBFWwNCz9mDfSi\",\"HQxp7NcdvF92G7bYS\",\"XbxHXmh5ZmRN2gw3K\",\"AasGs8AeX9Lcb9xJn\",\"jeuoearPPTcGPgXhf\",\"4fctAnxyFRB8stPRQ\",\"v3fjGuc7Pq4yjFygS\",\"3aD4qe2ht5ewZ75wX\",\"JPtpz9cnJwtS8L7ui\",\"mxX4rH5ELYkdZ2Mbw\",\"5nY48krepaT4a4QTN\",\"xowjbn5yEv7c93axA\",\"Cyd66Eo9xMehZzgvo\",\"jNvegJWCk5HCtEMbK\",\"2innwjWqxJHo4eRGh\",\"kc9hbbzEtggnqitHb\",\"eaDQzC2wde292kRcL\",\"aRqQ42J5zqCmBNd8w\",\"HqmxnQJM66Y57twhn\",\"xxxhm6QEkRpah4k94\",\"s5M5RvgqR9BhB9JoC\",\"3SKmXhcLPPkmQhjip\",\"3ECpdeExhBmkYXtba\",\"ZyXFY3e2bwSGxw9Yz\",\"sXs4Dvtk8Pvn2t9ZP\",\"qJhL4H3ecaDCmnaG2\",\"eKPZp5XdiAprW6648\",\"zg8GmMSP2LkHBtAzy\",\"yKttxy9JGn5Jzwuj6\",\"sjz6dH5Gig2ytmxQ4\",\"cqDm5TJgJLAQyhkiN\",\"HtGKcY8GkKqHZCBMw\",\"3DksEtFLyj3uFrEng\",\"BeFnbPbMnAM2SjBdZ\",\"jNE5AHcJQWXz7efuP\",\"iMqnZazJtLf2nhuow\",\"4tgBydK887PitgAoi\",\"GH4HL4iHLHppCjjWW\",\"Yp7uvStL97cC9fKkY\",\"9Ly8afdtofp8DXzrt\",\"p3dsCFdWGzWGhFrSQ\",\"LQxof8pGabGuWP7Gn\",\"LQhEi8yAC8WzEYY8h\",\"SPQDPHGT83KCqgb6K\",\"yZvzB3qFb8pkHy4dg\",\"w3A7cBWyAfukk6xEQ\",\"dLmepN3JWxhXMtyNK\",\"TCaTpxjzt2x9xAL86\",\"N7GPFEhCaiQ79MKjz\",\"PSrcg6fy835R4c5CW\",\"XKi8iZXBCHCaebSHh\",\"LP9R3NfPdHviZb4Wz\",\"DXBbJKYFTBi2pxR7c\",\"dHZqT6h4JMwk5fPC8\",\"hQJZAKtGhbvtiHRn8\",\"4y2bxsHwifCdZXAQA\",\"orFLgPDw9H5MDzmwo\",\"6abffx8jQDCf7kgvb\",\"HPMiZMZ2WGu4FWaRH\",\"g8yJiPAWXbrgxbjfZ\",\"wZoxzQDbso9SMAPkY\",\"cR3ibTMxLyEdDFCHY\",\"rJGeRSCjGzRuYfHZS\",\"sbJcFfQjQ59Wfg4Cd\",\"23oi2a3vQwhtLEbSj\",\"X29Ekg7HjqHAYgCSM\",\"w3rBPi8hNrmQ7gYKd\",\"C9LKGu2g5hSijvDzA\",\"ASZk6eFeYMj5pitoe\",\"vLrq4dEDMM2wd68Dc\",\"aEm3Wvj2rFYRL8Lrb\",\"E9ttMPTkLkKG6nZrg\",\"J5T8gZqiZXFuFDTQ7\",\"uw8E83imJYpQiiPpP\",\"WtFQigNmNZ5EREPzo\",\"2QGRoQn2dRq3scu7k\",\"2iFe3EHEH2YdhSKrs\",\"TR5aWdDKP6iaL6mGK\",\"ywk3XGvcmpTgRxwZa\",\"8PwfYqoDQFThzNtvf\",\"ZNnsMeNkdDhHjSrZb\",\"gJYuGdkXEWWmGRLzu\",\"KRSKj7ikX2ytWFmod\",\"q5a96XumccZyhQNyL\",\"9uZpgAtSuPZ7W7DL6\",\"kGwkJGKrHotSoTPuL\",\"Cc2Cgj4MWXZxsTooC\",\"HF28xZKSLM9wEuqNg\",\"DEDniTrstQYGounXT\",\"kYWb8BwpKwunQkxeX\",\"KdNDysEsy2TW5QRJ2\",\"M8dQuMrEpP8Hc3tHN\",\"Fk9kLwoG4Brf4KsKf\",\"YPoXQyWruLC8KTKgp\",\"9pzFiFK3ANLjQfnr2\",\"b37Mu6yENyEfBQuCq\",\"FxJxxwowtXYCaLaeD\",\"RcFJfYquW9quJDnp5\",\"YcCLwitFMAEJSnxAW\",\"uiEuENARwFpnNMfFs\",\"v4sQHwMAwZXXRZJwh\",\"uGGbTfxFQ5tn5wMA6\",\"ytotxvNtSzHumcQ9m\",\"SC4xS8gbw3BjDEx3J\",\"MKT7khMBGXzA22ykf\",\"JCusodx8pbLAEHA9G\",\"FEYpu9RWysAgW3XnP\",\"rzF2F7DgSjgJrneo8\",\"CMQwRi4wcqy8G7SSN\",\"DwetpbChQM4r6Gwah\",\"mDWNyaaQ9hvPCRzSd\",\"FzxTj4GuujhwpZM7y\",\"nQRzZKeDKuLRf9chX\",\"di2hhADLx59Bj4ewM\",\"nfXGHENb5md7m355s\",\"AF6LgdKhEdzwgRJom\",\"mfsaETo7uA4x5vqLD\",\"ahk2qiXKJA753wAJk\",\"DrkR35NqnP9NDLbq6\",\"2NGSwAJk9NHt3toCo\",\"n2BRY9X8899dcG8Bw\",\"wYBLRB4YuWXE3HRp9\",\"XrqNzJ2FRG8HnGiR6\",\"yr822PZmmiDDenxpB\",\"EjbDDFRECrzQDkzrX\",\"NG8PWBSjsM8mMhQEq\",\"a777e8chPvJkY3tKa\",\"dKKMvaYoJunNPk5Wa\",\"JS3hNM3XXkxPdg3yk\",\"4yNLEwL2rsx4EE5Nt\",\"ekQh3jzgGLsEMbKo3\",\"E8TMSMSamEbBtf9Lo\",\"5JyY5eDxizCH7TYT7\",\"v9KtC8YLbMWmXiW2H\",\"4rwxLqLs2mNZNg8NB\",\"jBR47vA7HwAZqp4QA\",\"qZQxPQ2kaNKAMesHT\",\"2ptN2mhjFwFcHyPZd\",\"R7euMCu7v5vFD4L67\",\"zAsNgFHdyiHeiHB8C\",\"eMuCpJ2spXWkJjWNz\",\"mtRvHDpeLoSGBf8zC\",\"3cF6NXq3ZEwdkgSjb\",\"dKtYzJHAswturm7Fe\",\"W5TajitmCyxz87zAC\",\"H4abACFDH5t8CnnyH\",\"So6PHm74mfJuY2WTs\",\"ZrKCkX7xxGGZzauFW\",\"NNE5HNRXAkmhrWgyQ\",\"6428wKHtwKkFdvBs5\",\"HCP8ZsX84rLZe2vHT\",\"zd9FLSzsGz3evKafy\",\"iQx6PmRfjXYBq27Y4\",\"zf6ZWfs28H95JoJX2\",\"DSNs8jydjL97Ap7C7\",\"syRNbbPdLCGXbH2Gy\",\"fJJirq6bMLnDWYRRs\",\"FjFasnZRHBKhKBoTJ\",\"GM2X83qnuLXTHe5zA\",\"8BFSTCnoe2QggN64c\",\"8zWoQQvtYdg5yoweM\",\"6SKDJwXpev4qPSzgM\",\"KGiM2KiXnNJYfSzBF\",\"R4SjTgDnpigJYDLyL\",\"iojEnnY9FsMfYzp6f\",\"Ecg4m7srYGgZsb4Ck\",\"zYKpbJSq99gFpBgqy\",\"Pe8vWpDHRuH9nSGKW\",\"hRiMXDZNAzyPd5tpt\",\"tZtama5GRL2EnGrDr\",\"JZbBYihgT6m7bKvgc\",\"b9YQPLb9ZPSADdHXX\",\"q4vhNKvdnjB6XTmxE\",\"r3hY3XhLXZ8bgj9tZ\",\"dzS6WBTMHyFEag6Fp\",\"ssGSikKpzBezNd2od\",\"iS5BrkGLzJyPK7nKt\",\"yjtdwc2AC4jA2RWtn\",\"i5iePG5GqhJJ8HEoB\",\"cYoWJ8sQE3mdBhJ9D\",\"oBcs8GLX2ZFLXQy8y\",\"jS9FNSp9XhvmJ2Dpc\",\"ta5CrWnBCRusD2WMo\",\"GaJNJwcdyB9ueYFst\",\"uC5RJCMt3qBN3W84X\",\"YA7SDhpgEtsqynvNL\",\"EM54GFtAyAEdmqxNe\",\"mzhB3LXoJ2EGyqr3n\",\"CTKmXtrqDYqJBnuy8\",\"6gS4E2C84vBYTYeDZ\",\"Wv2vJnEj8ywNmARoF\",\"EMJ6uvBZkie429gdg\",\"sX9GZp3fYyQLrBKMJ\",\"RehJGBFS6CYiWdjZx\",\"7txFzDQ43vJ7qCY88\",\"TPhfpB5tzQWSSn67n\",\"HnJuYrgwLJwXtboE3\",\"7K2GEb5TZRtSpyyGS\",\"ji5f27FPz4wRRF6Ls\",\"b3BWzq6Yu8nswak5u\",\"KLmLKaJPfsYxp42p2\",\"FvFhg2wELM3SCZDZQ\",\"k2Eo3wyfZZ6KxvKhN\",\"9CoqdidjM9KbeKnHY\",\"ayAfcoqEdZrX9pMge\",\"YTRAyZFtn9m68HBLK\",\"Kh3Pc2ZRusurLaMyP\",\"Ssr948vrCsf2WrY9D\",\"tpxMgkGSHwBjS95Ta\",\"mG8HqKiAQFTdRZthG\",\"gXTAie79kiw28tx5u\",\"5HCu9Ydd86QgHDRNP\",\"RDHb7eCA9L2TiXFns\",\"b5zo7s6xrqWgQnPao\",\"wniy5aKNkwYTNAkrz\",\"kNrnnMxhFZztMTBAX\",\"3uxbBcR3pHapTpuso\",\"NuqGt5u3s7vJ7HBGR\",\"6HgMANhu6WiGyXSGN\",\"GGprTwrkjuccmrQRg\",\"5Z4o2pWDzmbpw4JHJ\",\"abt2C3Y82RX3qbaPt\",\"3LiSLdtN58n46NEqg\",\"KTFxMsjaW4xgo5ajY\",\"8WpvgSbQciTQWdd8T\",\"NzbRqGWspQnWMoDrF\",\"wRttWTM59y8m5mx7x\",\"dj5AyG5fWP8FdsSmZ\",\"DPi9QGLctq2y76KuE\",\"zZDaXBxMzTCBhNkgL\",\"aKzYNPqBqb3J3ZgyD\",\"DYDJTyGgKFnBRLm2r\",\"dBzwBtRjZqB98DJeB\",\"dyBcJXfbqJtjTmBZK\",\"bBvhn46xMzKbMAZpm\",\"rrSC943cCKNG48sH4\",\"drdKwcfY8TCL9hoYv\",\"4hzd4qde3g9We8N4E\",\"sHjfbGQGLHE6JR6qu\",\"9FCeFzjPA4jrQ7oHW\",\"gSFJPsMXnqAog3Q9f\",\"J3upzLHuEwXH7Z2hx\",\"9gJsF5apWJGWZJprn\",\"GRdzonfH6egrzm68u\",\"cAP3n5NY64uoMwzRR\",\"8fZxjQfuXw5HMSRJM\",\"d8qtzoLB264iP8tdY\",\"w3o9qJuPR62HHh9mx\",\"RGMbFMZXJr7DhcAJy\",\"dYPkStFnLvAMsHSzZ\",\"KJCDwGkoXh8qtbbKr\",\"6MjSiiBLPcvXbXcaZ\",\"spqXrjG3ZFa2j5uTR\",\"Tf7TJFSPktJBgLA4k\",\"5XiuAqicKD4hBdu63\",\"axdSNLZpiCDF8RS6n\",\"Lm6ChQCWBmaikmk5J\",\"qAby4AWXmTNeusvg3\",\"4fjSgcqhQQZM2ZFRP\",\"5EPe7bdNQ69vjsKv7\",\"3pxHTZBsv7MKzFG6Y\",\"C2AfMipCicfD58WJ9\",\"DpnYcMphntjsQ96qg\",\"Cybtjz3cF7RgoiqrN\",\"YRAzEBJoLvSaiPtYx\",\"HuNF3xTBzmatyGSTm\",\"vCxuabDxEv9YC3Szb\",\"utTuvGdmu2sBHWBhQ\",\"jKZ8h9e2sRHfE79LB\",\"pduNK68oazqQTtbLp\",\"o4ixjQGSaYqA2JoM4\",\"XBTeQ9TMCFZQ2eMNQ\",\"5wCHxMQ5Km2bjqcGZ\",\"6BTXDH2xdbYLsvjsz\",\"RtKXXfz77hgyubRQQ\",\"WdKdsgH9gXkKgCycx\",\"2H7qphwdz7PPoFKgc\",\"nJXgbSQozcoE8Wn4N\",\"buX4mCQhtXCfBjeno\",\"eYfPWvZwnJQkHbSTK\",\"MXGuntvz3byrP6WJc\",\"8ZhzKvdhsdKgpf6BT\",\"5S9nX4rKsnCcnv4Cz\",\"M4jH5WWXofTB5SoCT\",\"GGdmhAvxXhqhhibJN\",\"v2d8o47YdYEuEzzGo\",\"5hQnRWiKkhgKJXNMP\",\"6xTu4r8NMczBFvmtz\",\"JMAmMMBMrQqRy72Cc\",\"zSrSD5B5gz7KBo2xx\",\"Lg4t6SEWgtYz4u7Cj\",\"hzHsgwjark5sZCQ2c\",\"srJ34BaybkQh3qRkM\",\"Ds7L5bksw2QRHjrKL\",\"yod5YhKtPqw2GfG9B\",\"p7js9trz2zk2RorCR\",\"p5EN3tadeCfPkW3CB\",\"wjc4iejpErBhxWwHo\",\"Dq24MSpogRmq6L4hX\",\"MfKe55snfKsdnDejs\",\"q6QsMYNMpPNtmyTeW\",\"ebR9m79RbNzm4cJsJ\",\"T2vhHPhRR96hRizq8\",\"PWgzeK859suojbrRx\",\"CHvzhtXnv8HTbPQ56\",\"JwLKvWBSQcLs9R9vv\",\"K6MfKMytoJJuSGewP\",\"c7uBxu2rgY77H5d79\",\"nc7bRhkxgKyqusYe3\",\"T6iBEE2jp7f7iEF2P\",\"XD5nmvKQchKezPXhy\",\"HNT9Xx6pnQS7wigCp\",\"BJp2WkwLWGHHB5oQW\",\"vhhv6HQyH4r9Q6d6n\",\"AFfw7cGg83uYk2Miy\",\"66a9xX73nmTEuKs9k\",\"EfxwqhYdapX3dMQC2\",\"YmQb9Mo4Xcg2vzgbn\",\"bvmTE46bfcM4ogj34\",\"BrTDhPJcACL2bsrpJ\",\"Wpn95NqWxncQrwNgz\",\"AJexRBN9cYQmqvYu6\",\"PC3pLs36zNzpRDSuE\",\"GTKsdeEihE636Le9i\",\"c2q7mY39z5JPEMCaM\",\"2HfNkb2SoqdyjKW3o\",\"mvJBakQ35CWAnbbEZ\",\"M6fxKEh6am7YajPiT\",\"X4rzfxGgxx6CS7Bpz\",\"2PufnQcsHsfymufX3\",\"dZzdZbg3QCAbqXuEw\",\"H8etafgMrXs7gMeRi\",\"ghMkPtdFCpM6w8nax\",\"szhbxxYmug92m3cpG\",\"H4LqzfSad6d4BCgwy\",\"R6YxHWAiLgKwy5YvC\",\"eHcgvkTGsH7ZziqBo\",\"ErXNo3Tx2k35RPzZM\",\"4Lwjr34ypKNQNQCar\",\"hR7GMiqGap4CzEWSy\",\"2NDSt8HyP33cFRHsu\",\"4RY3zj9C2t8GGefhi\",\"fbyQH246PaDcXumC4\",\"Afnps7TJQuS9sipMb\",\"4TmgHkn5vqyHK3sYC\",\"WhBvpJ5WHnWZgEEuJ\",\"T6Rm8mREPMZSftzrC\",\"reSPwrcdzBAnDWs2E\",\"NfMJuiBk6FN5Jc6ow\",\"yd5sXGT45KRARFqTv\",\"d9LBRxvADNBB5QJMB\",\"suArq5BbSy7gD6xri\",\"uGuS9YRXW2nj4p6zf\",\"uK58g2EXxqxTaB2iA\",\"AQSqD9oNv2uPfxZCR\",\"m2DoMHw5bQb52qF5Z\",\"vAh63eGRwkuJtoP8v\",\"AMpQSjKsRqhCDyS2j\",\"yAouD3PxzED8a4gap\",\"Qyfyyw6oC4EHAndzo\",\"3rQcH9AEoAkscgX65\",\"B4y8aoyXJtskYPFEL\",\"rCrbqMiaGPgHYTNxu\",\"dmaABzJsHvchrqX26\",\"qB6KSTYC6H2TQEQY6\",\"trRQk8Smm8ofdbKko\",\"mw9464S5dnenqzvpm\",\"pPpmP7xeJzGgK362R\",\"XfXsHCrMy8xGvpNAM\",\"RGN3QTb5LXj4ZPPkj\",\"GzbbSHXWoWQFqBQ6K\",\"5QN8R22z43SrwoHDz\",\"nFbmNzMQ38TncmfQX\",\"Ncn7Qn2LbdsiJnfFk\",\"jWbd7SYDzLPjc9EDh\",\"7DXJ3mvKMHHqBLt92\",\"vw4Byxdm9XQwbDtGC\",\"Wi4H6ayKsNDWWQCG5\",\"vCeeMuYDbz3MB4vsk\",\"8uiLiJcmWxWe6qw65\",\"vAbK8sCfKyFC78HYg\",\"ruzwBPphPDRgLXdnP\",\"wrL4iX2CCSqDCCty3\",\"eW9R2SCoYnY8HBAdL\",\"naZ3i6sSDPwsieDH7\",\"PBuJo62j782fEoH4w\",\"E2hpke7mHxAWsw5t9\",\"WQubx7DAkG6WZE8FA\"],\"total\":448,\"quality\":[4,5,5,2,5,5,5,5,3,4,5,5,4,5,2,5,5,5,5,4,5,5,5,5,5,5,4,5,5,5,3,4,5,4,5,5,5,5,5,4,5,5,5,5,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]},\"flags\":0},\"summary\":\"Given a dictionary of some items with star ratings and a specified star rating, return a new dictionary of items which match the specified star rating. Return \\\"No results found\\\" if no item matches the star rating given.\\n\\nExamples\\nfilterbyrating({\\n  \\\"Luxury Chocolates\\\" : \\\"*\\\",\\n  \\\"Tasty Chocolates\\\" : \\\"**\\\",\\n  \\\"Aunty May Chocolates\\\" : \\\"*\\\",\\n  \\\"Generic Chocolates\\\" :\",\"tags\":[\"arrays\",\"data_structures\",\"objects\"],\"timestamp\":{\"$date\":1580578117735},\"title\":\"Filtering by Star Rating\",\"quality\":4.728571428571429,\"family\":[{\"_id\":\"qM6zWQM7gdfPgE9Hh\",\"language\":\"python3\"}]}}"]