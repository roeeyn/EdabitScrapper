a["{\"msg\":\"result\",\"id\":\"2205\",\"result\":{\"_id\":\"Sjti2fmLY6sLJHr9p\",\"author\":\"sigma144\",\"authorId\":\"bJaPCBx63YxdJAuTS\",\"code\":\"def look_and_say(start, n):\\n\\t\",\"difficulty\":3.40625,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"zfo5dRnv6SSSnEnmH\",\"instructions\":\"Create a function that takes in two positive integers `start` and `n` and returns a list of the first `n` terms of the **look-and-say sequence** starting at the given `start`. \\n\\nEach term of the look-and-say sequence (except for the first term) is created from the previous term using the following process.\\n\\nStart with a term in the sequence (for example, 111312211):\\n\\n```\\n111312211\\n```\\n\\nSplit it into subsequences of consecutive repeating digits:\\n\\n```\\n111 3 1 22 11\\n```\\n\\nCount the number of digits in each subsequence:\\n\\n```\\nthree 1, one 3, one 1, two 2, two 1\\n```\\n\\nTurn everything into digits:\\n\\n```\\n3 1, 1 3, 1 1, 2 2, 2 1\\n```\\n\\nNow combine everything into one number:\\n\\n```\\n3113112221\\n```\\n\\nSo 3113112221 is the next term in the sequence after 111312211.\\n\\n### Examples\\n```\\nlook_and_say(1, 7) ➞ [1, 11, 21, 1211, 111221, 312211, 13112221]\\n\\nlook_and_say(123, 4) ➞ [123, 111213, 31121113, 1321123113]\\n\\nlook_and_say(70, 5) ➞ [70, 1710, 11171110, 31173110, 132117132110]\\n```\\n\\n### Notes\\nYour output should be a list of integers.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"tests = [\\n\\t((1, 7), [1, 11, 21, 1211, 111221, 312211, 13112221]),\\n\\t((123, 4), [123, 111213, 31121113, 1321123113]),\\n\\t((70, 5),  [70, 1710, 11171110, 31173110, 132117132110]),\\n\\t((111312211, 2),  [111312211, 3113112221]),\\n\\t((2, 10), [2, 12, 1112, 3112, 132112, 1113122112, 311311222112, 13211321322112, 1113122113121113222112, 31131122211311123113322112]),\\n\\t((144, 4), [144, 1124, 211214, 1221121114]),\\n\\t((11111111, 3), [11111111, 81, 1811]),\\n\\t((0, 4), [0, 10, 1110, 3110]),\\n]\\n\\t\\nfor test in tests:\\n\\tprint(\\\"Input: \\\" + str(test[0]))\\n\\tTest.assert_equals(look_and_say(*test[0]), test[1])\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[4,4,4,4,4,4,3,5,2,3,5,5,0,2,5,2,5,2,3,3,1,2,4,4,3,5,2,3,0,4,2,2,4,3,3,5,2,3,4,2,3,5,3,5,4,1,4,3,5,3,0,4,5,5,5,3,1,4,5,4,5,5,5,4],\"rators\":[\"bJaPCBx63YxdJAuTS\",\"tAF9Gf6PiGogbZuWs\",\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\",\"gb9rvGus2Jv7bjZSs\",\"S6Zd8mPuvhuh3MFRt\",\"aCNWav8S8Try9RkC6\",\"pDvFWMCD9fQwoBPcu\",\"C28oXk6hCbo4iZnXf\",\"mDWNyaaQ9hvPCRzSd\",\"2dAt4J5XPniWBuzaB\",\"5dHucvf2qBYyKim7X\",\"s5M5RvgqR9BhB9JoC\",\"jL4y5fTJAMBjhZmko\",\"SGhPxX5bHGL8zZqtt\",\"YLtspA8ec6ntcoMMf\",\"bJxaKHJqR82EWw8Su\",\"xn7uGNKeAwPEkP9oA\",\"fznzd3qnvtbFkkizz\",\"ZNnsMeNkdDhHjSrZb\",\"GgLd4eWBu79mdjtkP\",\"8JyqsSbN2FJXPr3cw\",\"4sHkH3t9CJYhbDwjM\",\"hZW6j5s6RHpx35phy\",\"rneLEF52nLZxZCYp6\",\"b3Dk2LqoEgripS3Y3\",\"4fhjJBvLBWh6QeSih\",\"62agN2oNiy8R7CxLy\",\"KZ2xddpM2f9JRaryB\",\"8WpvgSbQciTQWdd8T\",\"gnqiMtWWsK2aCjbpA\",\"ZXoHSjPt3jqAXXgbD\",\"MxQXA7kigYpyBS37i\",\"y2bTnE6oD2iFFsAYH\",\"xjwYSw7ABvAWhTXWo\",\"J23RcmzbdtBbPCTjT\",\"EMJ6uvBZkie429gdg\",\"DNACg4rcgZsPtYGZ8\",\"oQ4Qa7vnqsQn6pdQF\",\"JevFwimoYEusLEM5u\",\"Bo457Fm7HpxBzs5YT\",\"JvtckywAquTG4TeqG\",\"FuxNmPK2CgEgoSYKo\",\"oZiGwL535nJ5ZMJr7\",\"SbGLSZ5piLATC8bop\",\"rTz4zA62Z5xLtkAqm\",\"EH68sDGGufTc5vifi\",\"T6xRoSqcSHjvP2Tik\",\"GJH6ntAFXf89jpfxh\",\"Z85ajWfZ4jDPkbvR4\",\"v9KtC8YLbMWmXiW2H\",\"mePSe5o7qpkYirqxx\",\"SExX3m5YftBWmsk2e\",\"h4x2jaMdj5aQZbW5g\",\"ZQSG2DF9TjmBGXPwu\",\"Wv2vJnEj8ywNmARoF\",\"DPi9QGLctq2y76KuE\",\"QRv96jmNaYsWkxQEG\",\"MW5noWmMHjcowKJZi\",\"waNsY2k4ndReyEREk\",\"CtKaPhQmtex9wnWcd\",\"8nE8QHnFYsHCFebte\",\"iS5BrkGLzJyPK7nKt\",\"Cia25zjeX3RkCNx5t\",\"HF28xZKSLM9wEuqNg\",\"2k7JfdCnTaxXSi8HG\",\"58M252WF7SPRinfBx\",\"8sNv5PTHa7XQ8bNqR\",\"AJwBauGHyrbqgDYce\",\"eHcgvkTGsH7ZziqBo\",\"kDq2TnPdy7hGKdAD5\",\"XtbLJYQwtgCNSbyNN\",\"2PufnQcsHsfymufX3\",\"iojEnnY9FsMfYzp6f\",\"J3upzLHuEwXH7Z2hx\",\"yjtdwc2AC4jA2RWtn\",\"gJYuGdkXEWWmGRLzu\",\"suArq5BbSy7gD6xri\",\"buX4mCQhtXCfBjeno\"],\"total\":87,\"quality\":[5,5,5,5,5,5,3,5,5,5,5,5,4,4,5,5,5,4,5,5]},\"flags\":1},\"summary\":\"Create a function that takes in two positive integers start and n and returns a list of the first n terms of the look-and-say sequence starting at the given start.\\n\\nEach term of the look-and-say sequence (except for the first term) is created from the previous term using the following process.\\n\\nStart with a term in the sequence (for example, 111312211):\\n\\n11131\",\"tags\":[\"numbers\",\"strings\"],\"timestamp\":{\"$date\":1590100718335},\"title\":\"Look-and-Say Sequence\",\"quality\":4.75,\"family\":[{\"_id\":\"xocBnmFJRR4ovxeuk\",\"language\":\"cpp\"},{\"_id\":\"A3Nt3ae39NTFxbtAF\",\"language\":\"csharp\"},{\"_id\":\"j7JBtYKtKWAXpNQDd\",\"language\":\"javascript\"},{\"_id\":\"Sjti2fmLY6sLJHr9p\",\"language\":\"python3\"},{\"_id\":\"mqwcA9NDENNsH4Bea\",\"language\":\"ruby\"}]}}"]