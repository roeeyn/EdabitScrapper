a["{\"msg\":\"result\",\"id\":\"1763\",\"result\":{\"_id\":\"55f9SDtxuLgSaJdcK\",\"author\":\"zatoichi49\",\"authorId\":\"tAF9Gf6PiGogbZuWs\",\"code\":\"def balanced_word(word):\\n\\t\",\"difficulty\":2.3187919463087248,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"QFFSpvuhkhHX44wCF\",\"instructions\":\"We can assign a value to each character in a word, based on their position in the alphabet (a = 1, b = 2, ... , z = 26).  A **balanced word** is one where the sum of values on the left-hand side of the word equals the sum of values on the right-hand side. For odd length words, the middle character (balance point) is ignored.\\n\\nWrite a function that returns `True` if the word is balanced, and `False` if it's not.\\n\\n### Examples\\n```\\nbalanced_word(\\\"zips\\\") ➞ True\\n# \\\"zips\\\" = \\\"zi|ps\\\" = 26+9|16+19 = 35|35 = True\\n\\nbalanced_word(\\\"brake\\\") ➞ False\\n# \\\"brake\\\" = \\\"br|ke\\\" = 2+18|11+5 = 20|16 = False\\n```\\n\\n### Notes\\n- All words will be lowercase, and have a minimum of 2 characters.\\n- Palindromic words will always be balanced.\",\"lab\":\"Test.assert_equals(balanced_word('at'), False)\\nTest.assert_equals(balanced_word('forgetful'), False)\\nTest.assert_equals(balanced_word('vegetation'), True)\\nTest.assert_equals(balanced_word('disillusioned'), False)\\nTest.assert_equals(balanced_word('abstract'), True)\\nTest.assert_equals(balanced_word('clever'), False)\\nTest.assert_equals(balanced_word('conditionalities'), True)\\nTest.assert_equals(balanced_word('seasoning'), True)\\nTest.assert_equals(balanced_word('uptight'), False)\\nTest.assert_equals(balanced_word('ticket'), False)\\nTest.assert_equals(balanced_word('calculate'), False)\\nTest.assert_equals(balanced_word('measure'), False)\\nTest.assert_equals(balanced_word('join'), False)\\nTest.assert_equals(balanced_word('anesthesiologies'), True)\\nTest.assert_equals(balanced_word('command'), False)\\nTest.assert_equals(balanced_word('graphite'), True)\\nTest.assert_equals(balanced_word('quadratically'), True)\\nTest.assert_equals(balanced_word('right'), False)\\nTest.assert_equals(balanced_word('fossil'), True)\\nTest.assert_equals(balanced_word('sparkling'), False)\\nTest.assert_equals(balanced_word('dolphin'), True)\\nTest.assert_equals(balanced_word('baseball'), True)\\nTest.assert_equals(balanced_word('immense'), False)\\nTest.assert_equals(balanced_word('pattern'), True)\\nTest.assert_equals(balanced_word('hand'), False)\\nTest.assert_equals(balanced_word('radar'), True)\\nTest.assert_equals(balanced_word('oven'), False)\\nTest.assert_equals(balanced_word('immutability'), True)\\nTest.assert_equals(balanced_word('kayak'), True)\\nTest.assert_equals(balanced_word('bartender'), True)\\nTest.assert_equals(balanced_word('weight'), False)\\nTest.assert_equals(balanced_word('lightbulbs'), True)\\nTest.assert_equals(balanced_word('tail'), True)\",\"language\":\"python3\",\"summary\":\"We can assign a value to each character in a word, based on their position in the alphabet (a = 1, b = 2, ... , z = 26).  A balanced word is one where the sum of values on the left-hand side of the word equals the sum of values on the right-hand side. For odd length words, the middle character (balance point) is ignored.\\n\\nWrite a function that returns True if\",\"tags\":[\"strings\",\"validation\"],\"timestamp\":{\"$date\":1559299537382},\"title\":\"Balanced Words\",\"stats\":{\"completed\":{\"total\":316,\"ratings\":[3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,2,3,1,1,4,2,2,2,2,2,4,4,4,3,3,4,4,1,1,3,2,3,1,4,3,3,4,3,3,4,5,2,2,4,1,3,4,2,4,4,3,3,3,1,4,1,3,0,1,2,1,2,2,2,4,4,2,4,2,2,4,4,4,4,1,1,2,3,1,1,2,2,2,2,2,3,2,1,2,2,2,1,3,3,3,0,2,3,2,3,2,2,2,0,2,2,0,2,2,4,4,4,0,2,2,2,1,2,5,2,2,4,2,3,4,2,4,1,5,2,4,1,4,3,2,2,4,1,4,4,0,3,3,2,2,4,3,4,3,2,4,4,4,3,3,3,1,3,3,4,2,3,1,2,3,3,2,1,1,4,3,2,2,1,2,2,2,3,2,2,1,1,2,2,2,3,3,0,2,1,4,2,2,0,2,1,2,3,3,3,2,2,2,3,2,2,1,3,2,2,1,3,3,3,1,3,2,2,4,1,2,3,1,0,3,1,1,0,4,5,3,3,1,3,0,3,3,3,2,3,1,2,0,1,0,2,2,1,2,2,3,0,3,3,1,2,0,0,2,0,2,3,3,2,1,2,2,4,2,3,3,3,3,3,3,2,0,3,3,0,1,3,0,3,2,0,2,0,0,2,2,1,4],\"rators\":[\"yZvzB3qFb8pkHy4dg\",\"tAF9Gf6PiGogbZuWs\",\"7g3vZaQXhLpxrajyg\",\"MXjxGML2X75x64vJo\",\"8JyqsSbN2FJXPr3cw\",\"gb9rvGus2Jv7bjZSs\",\"FikSPhcrHBpQ4CyGC\",\"AYaEkTWLMmfzpwejr\",\"PFjMZGHNAPTkgd7tq\",\"DJD9vvwqQmjfwdGpt\",\"hsrNYf3WbexXJKhCq\",\"5JFQgt6KFihmXfHKm\",\"cecRRLKKu5R62D5xE\",\"MDCe63NWxMnkwN3M3\",\"c7KA3HQz6SEX5cJEC\",\"kQH5b8MXJunh84Czq\",\"5cEduQmMBFx3d42cg\",\"KWHYqCuXcKrzxtqHt\",\"M2k5STtKaQx6tsgWe\",\"BFNm9gacwba9KyLFW\",\"pci5yjeqMeYpPhfhL\",\"3ifAHQzsMasfQySoL\",\"cmwasetrBzbwJQbks\",\"ekbfbYdyZeXHvaG8c\",\"msE99cETKzgGn6Hmv\",\"aCNWav8S8Try9RkC6\",\"j7fyR7k8FfGPLraZx\",\"jHrtWDGBhkbuWa7fG\",\"ToTyoZx9QFGFn2BKE\",\"E2MgQfJtPehQHuSiB\",\"iqmPb9JuJDgTFeR8Q\",\"zZo9NtDMkY4HdWmWP\",\"xonkKdAAgaoZnDSmP\",\"pMuvoqcmxHbuRSfb9\",\"nF9pCCzbGDhzvWgaw\",\"JwbZgzd3nhE3TJ7LE\",\"TgjcWxsTjar7snQx9\",\"eYWgXzijKqfqgZNDi\",\"Tin42WiZ4JTDEnS7b\",\"KpJj2dAHNBgKDF3XK\",\"XKi8iZXBCHCaebSHh\",\"MNgYsvK6HfLRb8wAz\",\"oqGkxvASXq52iTDvp\",\"HqmxnQJM66Y57twhn\",\"kDe2b9FdJnPhEWJzg\",\"dZGNAJXB24zNh2tsD\",\"fAoLuqbGvHn4w2PHf\",\"PuJDHtAaX6vXeJJTC\",\"s5M5RvgqR9BhB9JoC\",\"5F8kWn4n7fQbnf88e\",\"qm75TsDNyQetyWWJ3\",\"6n3Pb8mbxebuhjz7x\",\"vuwheqp25x7RkBHXn\",\"LdRdFW8qCjGu5nYLQ\",\"ydEdzuCCZt4yny9Rq\",\"2fxapKr8XGdNeaKi2\",\"t6bXCX76smm7B3bEN\",\"FgkYtHLxeD8pETJ8T\",\"fF9rKQmnp5TpnnWGb\",\"DryNRN98Dj24BpgrL\",\"6ShafRStcvew4GfCh\",\"zEwSoioYyEynzxLij\",\"5Bikpk3S6zGEvGDaC\",\"JJtMjK6QaWrcK5mpS\",\"XbwyB44kHPnRgQcrB\",\"8PwfYqoDQFThzNtvf\",\"XNcFbNk3geETcD5ut\",\"7BvK9WWXi9Arqh63Q\",\"wT5gGgvjKc5wz59AQ\",\"Jqk2uJZZxEv5wZFze\",\"PT5pu7kJsgp9TDNGv\",\"rZ8PD3qRmGCvccSb9\",\"LtD5jQnA63GoHjAq2\",\"Lw8oRc5SERsuntXMo\",\"3ECpdeExhBmkYXtba\",\"2innwjWqxJHo4eRGh\",\"EQbnbkkPYtGxiviTp\",\"sJWTa7iWeRoRtqJ8N\",\"W6Q99aAdkbkMqYwka\",\"z29voMGDksmh5wajq\",\"3LiSLdtN58n46NEqg\",\"tdTjjvaSqtvpJ7Lx5\",\"C4QntmkYtB89GNtpd\",\"fENpAHmM4NPWgCNrQ\",\"Kn9yjT4NvcnnvjCrL\",\"JKb5rhL6DKcCAypF9\",\"kXEfD7xxEyWd7oxxL\",\"GFLjQ33tnJYfRHqSi\",\"WLFPvm65aHfgwQy7N\",\"qcJrxNa4YdfHWEtPx\",\"hAzy9apJgLWwRFGPJ\",\"xeDkQhCHnuqnchebq\",\"u5u2YpHXiNgzDNJdX\",\"M3kk3ydZnE2ZrA9n5\",\"bqvrDWkn8EeaLap4E\",\"myXAR5qDJsBaPnff2\",\"8QAMphNjomBjcX3j9\",\"96QjKD2ChaxLtuJwd\",\"fBqQjriC4QEtFNxFe\",\"CuY5BaTCcu7Mp9tDu\",\"hCwR4ufxSEu6Tfx4K\",\"ySRnygsLwGGsmZhfa\",\"mHvoroWGDLYbJqQJa\",\"BFqWnEFkrG3hdW2zb\",\"QqbFrc8xjd9cH9Lyx\",\"FQDwscZZbqMZNcazT\",\"pQKacoMccp6HYmWZ8\",\"DEMZvkgty7S2teDRA\",\"T9WcjJPEu3rcTsKbF\",\"aEm3Wvj2rFYRL8Lrb\",\"3CddxEkvCvRoCLQ7b\",\"BByKDngfPvW6w4m7d\",\"Q7Qy8oL8agXcYFDyP\",\"J5T8gZqiZXFuFDTQ7\",\"SGhPxX5bHGL8zZqtt\",\"wZoxzQDbso9SMAPkY\",\"AJwBauGHyrbqgDYce\",\"psTwY94arhgunkRw4\",\"ftHKkYbL2GGNYscuc\",\"EjbDDFRECrzQDkzrX\",\"kfG9deramoXyqrP5L\",\"kHKearqf76exc3kX2\",\"itDTNAvHdhpXPhg6D\",\"g2eJRHbFyurijnyEn\",\"bDpmwo4vm9jHeZAPk\",\"KakQgfNR6m94AF79b\",\"WaXbc2Sjt5s2ffgBX\",\"dmjnZpzyFZAWfepdb\",\"S6Zd8mPuvhuh3MFRt\",\"KveqRNgcZ3a8wHXtN\",\"5nY48krepaT4a4QTN\",\"Phd2FdPjo9BhBfvKh\",\"pHpGCimfadYznq5Wb\",\"sL3xDZHA84qZA5zdK\",\"mDWNyaaQ9hvPCRzSd\",\"Z85ajWfZ4jDPkbvR4\",\"kRFAtnGXitccJPfLa\",\"mhwJATYEcAEQ8Bmeb\",\"zokSkNKBQsrk4jRpH\",\"AasGs8AeX9Lcb9xJn\",\"jj3tN4LhX8Rgs3DKB\",\"K5vETaccLsPyu8sbd\",\"8R3kEL4hagDQ5B5kn\",\"eHhL37DG7oW3vTcg7\",\"SgZ2t9xFuRqdJGofp\",\"xJHw6qF7ZsMf6NWJv\",\"ebPYSECG97bnpAp7s\",\"3fFpbxbA9kMtEsWGv\",\"dXMbkgQFoN37BhruB\",\"Jg8ZSRXe3NoDMCqGu\",\"idwHijAKTzsBfWSXb\",\"wPxeazAYct9gG2eRM\",\"6E8GoWCrHpDvHZjWG\",\"vsE62YBA9NpMFBNiw\",\"daFMtxYmCNMQ9HNsJ\",\"23oi2a3vQwhtLEbSj\",\"K3RacTvkWHLfzKF8i\",\"5JZNWts9XEHejpvur\",\"DERsW7XTpCRaWsHtR\",\"WKsvry6M74GDrtqHQ\",\"Ts3LAX94yxM55Yeo3\",\"8LfTheFzvicameoz9\",\"J6JFEBRDvRhendwKq\",\"nu6xgqgD3WHctg25a\",\"9uZpgAtSuPZ7W7DL6\",\"aP7JkkYer28YWrPvC\",\"GntfZ8yP7EjSYrpiJ\",\"PSyWQry47wkdmXD8f\",\"dNBGNMKLZam4bvHuZ\",\"et4ezbyWYdtQd54X7\",\"xmfxEqsraWqbrrWCT\",\"ywk3XGvcmpTgRxwZa\",\"XTAFWZ5ooMT3gkjda\",\"h4neSmyxsE9PtnLkf\",\"YsAz93yZw8KKPupKv\",\"auDSB7emGGdBhEwXw\",\"DwetpbChQM4r6Gwah\",\"tFHNPXCmM77ooz7ga\",\"YRstQuthRkFeBiXug\",\"qRfAEHwBqZZwo4tBC\",\"9qdwnisj554famEPb\",\"KuwfQZn99sQTj6ZsC\",\"4xAD2rEf9K5Tp32ou\",\"bjHoTL3b3hFvw8h43\",\"v4sQHwMAwZXXRZJwh\",\"NfMJuiBk6FN5Jc6ow\",\"fznzd3qnvtbFkkizz\",\"jDh7j3tZwpChgE5bT\",\"yKttxy9JGn5Jzwuj6\",\"mfsaETo7uA4x5vqLD\",\"3Zceb8GudqAG3onG3\",\"pCbFsvyiooabCFEgd\",\"t8GRbY5ME64BcgWQk\",\"P7XAauR6pbNvGP3hM\",\"sbhEwSH96pQ5hvpQo\",\"JSeYQMYWMaLxHcQPA\",\"Kdq8A2akx8JFqaZhv\",\"gJYuGdkXEWWmGRLzu\",\"5kvoqxzQfecujwKYG\",\"qkjeQ2ZMkHsYBhZ4Z\",\"NzuLkRixvf2uwBcZm\",\"CMuhZyDkaZXX4pvTD\",\"eoZxrByrKitbqbJZH\",\"44dAzThMuyGZ5StXB\",\"qab4tYm6vJQcpKLfi\",\"h47zE2JaXAZBwxR9d\",\"zqD4vpfdACmrPiF4M\",\"TCoQs9Erxoue9BvSj\",\"SYQfSLYGZYcSwsnkZ\",\"pWD2YC5s4YRCxFc2i\",\"N9m2Y6JJHu5gTvAiv\",\"xHAobgK2AdYSfNWSW\",\"odhwHrfwJvNxcrBCt\",\"azQuTr5LY59adhfkx\",\"bCDTKAoS4biDmQ64Y\",\"KAK74PnuFRq5Hgk8x\",\"j7ozHexMDBgk7S3tx\",\"qR6hLPuagPSHAgcwn\",\"eMuCpJ2spXWkJjWNz\",\"tczr8H3zHk2kwp8br\",\"pkQBaSzukotPEXmrD\",\"hBKf7LeSP6i2saXjk\",\"ukMGNti4cKTJBZqsg\",\"bDH2XR5bc4GxcwtBP\",\"bLpgu8xTdpDPFSAsM\",\"xXxcBvT3poSuSCgBN\",\"LAgD8zJENgFGH8BsD\",\"i6mFdjMy8PnsJLWH2\",\"wwMcJQRvf3X59Jyev\",\"4RY3zj9C2t8GGefhi\",\"hbniYBa8NnveXeMzh\",\"c3nsyfKKeQGxp6sKb\",\"3pxHTZBsv7MKzFG6Y\",\"6c4xjEdFxdYw5xGrt\",\"sz8ufn9i8zeiGWpAy\",\"6RjvoM4ZdPyYQWaRX\",\"nPfdEqn8RZmDzAeMW\",\"HE2mrszq5oi8NFiSS\",\"ZNnsMeNkdDhHjSrZb\",\"axC4Ye5xnfo9MEWj6\",\"BYCr9jEinp3XSM6v3\",\"f8mPCHFHxkDLiX8N9\",\"DYP3Y37tHNgoZoK2d\",\"WXJvukif774ts7Jqs\",\"Yp7uvStL97cC9fKkY\",\"n2BRY9X8899dcG8Bw\",\"4rwxLqLs2mNZNg8NB\",\"GamaMNrnhrjj5tXTx\",\"a777e8chPvJkY3tKa\",\"55RQznnuTGpsj3EXd\",\"rgvAJFwfCeYoYnFTK\",\"qPpQfR5KyDb5Y3EFf\",\"hRiMXDZNAzyPd5tpt\",\"Phy6Ejm8TxDQBZ2m6\",\"vdR4hCEHHXLppszTY\",\"xn7uGNKeAwPEkP9oA\",\"yjtdwc2AC4jA2RWtn\",\"v9KtC8YLbMWmXiW2H\",\"HF28xZKSLM9wEuqNg\",\"b5oEvBqHWLRnJgp22\",\"w2HhxvSLmDhaGCAjE\",\"qD2LrwaDrSdiybLKY\",\"shdSrDq5ZKqfpgjmu\",\"9rhsisf8ofHavG5aT\",\"vwqC9fbbe9664BdkF\",\"J3upzLHuEwXH7Z2hx\",\"LmWQ4rcXjxwNrZp3N\",\"DPi9QGLctq2y76KuE\",\"DQskEvAv5KiJDPtGF\",\"9bQyb6rW7xfE4vgrR\",\"gXTAie79kiw28tx5u\",\"T2vhHPhRR96hRizq8\",\"jNR3Hid6JfpJg4qwX\",\"RTDx9axf52kxhFjwZ\",\"p8qqFdJ3FSk5x9z3G\",\"QRv96jmNaYsWkxQEG\",\"iojEnnY9FsMfYzp6f\",\"AQSqD9oNv2uPfxZCR\",\"PWgzeK859suojbrRx\",\"HipTZaftaG7yvXHyo\",\"PytNZK9mNiRiZxPrm\",\"AFfw7cGg83uYk2Miy\",\"oBcs8GLX2ZFLXQy8y\",\"PH32cNxBjrK4a28sn\",\"RgGPHXXDAGiE6Wddx\",\"pyxKgTetZoNgbyb2P\",\"H9KZi2cjt4FwH7qog\",\"fbr22rabEJMfBp7vD\",\"v23Ft2Ye7zzEn7Hmd\",\"gKnWjDjwrJh7MK2df\",\"JhX7jvtpwNyxcc39m\",\"buX4mCQhtXCfBjeno\",\"CHvzhtXnv8HTbPQ56\",\"yod5YhKtPqw2GfG9B\",\"d8qtzoLB264iP8tdY\",\"T6iBEE2jp7f7iEF2P\",\"PgE2uuYBYcWkC3haS\",\"2PufnQcsHsfymufX3\",\"8sNv5PTHa7XQ8bNqR\",\"biRFKCafbA5fT7ymZ\"],\"quality\":[4,4,5,5,5,5,4,5,5,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"isHidden\":false,\"quality\":4.75,\"family\":[{\"_id\":\"WC2QgAvWYCgk6L36j\",\"language\":\"cpp\"},{\"_id\":\"NGnsMw8CG8gxEFW7w\",\"language\":\"java\"},{\"_id\":\"8QTBwLzAdaM8wkrXu\",\"language\":\"javascript\"},{\"_id\":\"55f9SDtxuLgSaJdcK\",\"language\":\"python3\"},{\"_id\":\"DG4mYHXNYodQaS8MY\",\"language\":\"ruby\"}]}}"]