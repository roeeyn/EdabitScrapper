a["{\"msg\":\"result\",\"id\":\"2469\",\"result\":{\"_id\":\"answn8heoA5fYoszt\",\"author\":\"ElohmroW\",\"authorId\":\"CByQtwf9BqB8jfEC3\",\"code\":\"class Cell:\\n\\t\\n\\ndef getRegionData(puzzle):\\n\\t\",\"difficulty\":4.714285714285714,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"qWKorcNgMw2SRzgAc\",\"instructions\":\"A Sudoku puzzle contains 81 \\\"cells\\\" of numbers in a `9 x 9` grid. One helpful approach to solving a Sudoku puzzle is to make a class that represents each cell in the puzzle along with three different formats of the Sudoku puzzle representing each region type:\\n\\n- row\\n- column\\n- box\\n\\nKeep in mind that the definition for a cell's region is as follows:\\n- Each cell has a \\\"region\\\" which contains all values in the cell's row, column, and box **excluding** the cell itself.\\n\\n### Task I\\nCreate a class `Cell` with the following attributes:\\n- `val`: The value of the cell.\\n- `rLocation`: The location of the cell in `rowData` with the format `(r0, r1)`.\\n\\nThe class should have the following methods:\\n- `convIndices()`: convert the row indices into column and box index formats.\\n- `getRegions(regionData)`: get the cell's region.\\n\\n### Task II\\nCreate a function `getRegionData(puzzle)`:\\n- The function should return a list containing three different regional representations of the puzzle *(as described below)*.\\n- The function should create and store `Cell` **instances** in each nested list.\\n\\n### Puzzle Format\\nThe Sudoku puzzle will be formatted in a `9 x 9` list where each nested list is a row in the puzzle:\\n\\n```\\npuzzle = [\\n  [0, 0, 0, 0, 0, 0, 9, 0, 6],\\n  [3, 0, 2, 0, 6, 0, 0, 0, 0],\\n  [8, 0, 0, 7, 0, 3, 0, 0, 5],\\n  [0, 0, 3, 9, 0, 6, 0, 0, 0],\\n  [6, 0, 0, 0, 5, 0, 0, 0, 0],\\n  [0, 0, 4, 8, 0, 1, 0, 0, 0],\\n  [7, 0, 0, 4, 0, 8, 0, 0, 2],\\n  [5, 0, 8, 0, 9, 0, 0, 0, 0],\\n  [0, 0, 0, 0, 0, 0, 7, 0, 1]\\n]\\n```\\n\\n_Note: Zeros represent unsolved cells._\\n\\n### The getRegionData(puzzle) Function\\n\\nThis function should return a list containing the three lists representing different region types of the puzzle. For these purposes, these lists will be referred to as:\\n- `rowData`: same format as `puzzle`.\\n- `colData`: 2D list of columns.\\n- `boxData`: 2D list of boxes ordered as shown below.\\n\\n0 | 1 | 2\\n--- | --- | ---\\n**3** | **4** | **5**\\n**6** | **7** | **8**\\n\\n_Note: Each box contains another `3 x 3` box ordered like its container. The numbers shown above represent indices that correspond to the following list structure:_\\n- `[[0], ... , [8]]` where each nested list is `[0, ... , 8]`\\n\\n### The convIndices() Method\\nThis method should be **called on initialization** and create two new attributes:\\n- `cLocation`: the location of the cell in `colData` with the format `(c0, c1)`\\n- `bLocation`: the location of the cell in `boxData` with the format `(b0, b1)`\\n\\n_Hint:_ `rowData[r0][r1]` = `colData[c0][c1]` = `boxData[b0][b1]`\\n\\n### Example #1\\n```\\ncell = Cell(_, (1, 2))\\n\\ncell.rLocation\\n(1, 2)\\n\\ncell.cLocation\\n(2, 1)\\n\\ncell.bLocation\\n(0, 5)\\n```\\n\\n### The getRegions(regionData) Method\\n\\nThis method should take in `regionData` and create one new attribute:\\n- `regions`: a 2D list containing the row, column, and box region for the cell.\\n\\n_Note: Each cell's region should contain `Cell` **instances excluding** the cell._\\n\\n### Example #2\\n```\\nregionData = getRegionData(puzzle)\\ncell.getRegions(regionData)\\n\\ncell.regions\\n[[row region], [col region], [box region]]\\n```\\n\\n### Notes\\nN/A\",\"isFree\":false,\"isHidden\":false,\"lab\":\"puzzle = [\\n    [8, 6, 7, 1, 3, 0, 0, 4, 0],\\n    [0, 0, 3, 0, 0, 0, 0, 0, 7],\\n    [1, 9, 0, 0, 7, 5, 0, 0, 0],\\n    [9, 8, 1, 6, 0, 0, 0, 0, 2],\\n    [7, 0, 6, 0, 0, 8, 3, 0, 4],\\n    [0, 0, 5, 0, 0, 9, 0, 8, 0],\\n    [0, 4, 0, 0, 5, 1, 9, 7, 0],\\n    [3, 0, 9, 2, 8, 0, 1, 6, 0],\\n    [0, 1, 8, 0, 6, 0, 4, 2, 3]\\n]\\n\\n# (cell.val, cell.rLocation, cell.cLocation, cell.bLocation, cell.regions)\\ntestVals = [\\n   (8, (0, 0), (0, 0), (0, 0), [6, 7, 1, 3, 0, 0, 4, 0, 0, 1, 9, 7, 0, 0, 3, 0, 6, 7, 0, 0, 3, 1, 9, 0]),\\n   (6, (0, 1), (1, 0), (0, 1), [8, 7, 1, 3, 0, 0, 4, 0, 0, 9, 8, 0, 0, 4, 0, 1, 8, 7, 0, 0, 3, 1, 9, 0]),\\n   (7, (0, 2), (2, 0), (0, 2), [8, 6, 1, 3, 0, 0, 4, 0, 3, 0, 1, 6, 5, 0, 9, 8, 8, 6, 0, 0, 3, 1, 9, 0]),\\n   (1, (0, 3), (3, 0), (1, 0), [8, 6, 7, 3, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 7, 5]),\\n   (3, (0, 4), (4, 0), (1, 1), [8, 6, 7, 1, 0, 0, 4, 0, 0, 7, 0, 0, 0, 5, 8, 6, 1, 0, 0, 0, 0, 0, 7, 5]),\\n   (0, (0, 5), (5, 0), (1, 2), [8, 6, 7, 1, 3, 0, 4, 0, 0, 5, 0, 8, 9, 1, 0, 0, 1, 3, 0, 0, 0, 0, 7, 5]),\\n   (0, (0, 6), (6, 0), (2, 0), [8, 6, 7, 1, 3, 0, 4, 0, 0, 0, 0, 3, 0, 9, 1, 4, 4, 0, 0, 0, 7, 0, 0, 0]),\\n   (4, (0, 7), (7, 0), (2, 1), [8, 6, 7, 1, 3, 0, 0, 0, 0, 0, 0, 0, 8, 7, 6, 2, 0, 0, 0, 0, 7, 0, 0, 0]),\\n   (0, (0, 8), (8, 0), (2, 2), [8, 6, 7, 1, 3, 0, 0, 4, 7, 0, 2, 4, 0, 0, 0, 3, 0, 4, 0, 0, 7, 0, 0, 0]),\\n   (0, (1, 0), (0, 1), (0, 3), [0, 3, 0, 0, 0, 0, 0, 7, 8, 1, 9, 7, 0, 0, 3, 0, 8, 6, 7, 0, 3, 1, 9, 0]),\\n   (0, (1, 1), (1, 1), (0, 4), [0, 3, 0, 0, 0, 0, 0, 7, 6, 9, 8, 0, 0, 4, 0, 1, 8, 6, 7, 0, 3, 1, 9, 0]),\\n   (3, (1, 2), (2, 1), (0, 5), [0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 1, 6, 5, 0, 9, 8, 8, 6, 7, 0, 0, 1, 9, 0]),\\n   (0, (1, 3), (3, 1), (1, 3), [0, 0, 3, 0, 0, 0, 0, 7, 1, 0, 6, 0, 0, 0, 2, 0, 1, 3, 0, 0, 0, 0, 7, 5]),\\n   (0, (1, 4), (4, 1), (1, 4), [0, 0, 3, 0, 0, 0, 0, 7, 3, 7, 0, 0, 0, 5, 8, 6, 1, 3, 0, 0, 0, 0, 7, 5]),\\n   (0, (1, 5), (5, 1), (1, 5), [0, 0, 3, 0, 0, 0, 0, 7, 0, 5, 0, 8, 9, 1, 0, 0, 1, 3, 0, 0, 0, 0, 7, 5]),\\n   (0, (1, 6), (6, 1), (2, 3), [0, 0, 3, 0, 0, 0, 0, 7, 0, 0, 0, 3, 0, 9, 1, 4, 0, 4, 0, 0, 7, 0, 0, 0]),\\n   (0, (1, 7), (7, 1), (2, 4), [0, 0, 3, 0, 0, 0, 0, 7, 4, 0, 0, 0, 8, 7, 6, 2, 0, 4, 0, 0, 7, 0, 0, 0]),\\n   (7, (1, 8), (8, 1), (2, 5), [0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 4, 0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0]),\\n   (1, (2, 0), (0, 2), (0, 6), [9, 0, 0, 7, 5, 0, 0, 0, 8, 0, 9, 7, 0, 0, 3, 0, 8, 6, 7, 0, 0, 3, 9, 0]),\\n   (9, (2, 1), (1, 2), (0, 7), [1, 0, 0, 7, 5, 0, 0, 0, 6, 0, 8, 0, 0, 4, 0, 1, 8, 6, 7, 0, 0, 3, 1, 0]),\\n   (0, (2, 2), (2, 2), (0, 8), [1, 9, 0, 7, 5, 0, 0, 0, 7, 3, 1, 6, 5, 0, 9, 8, 8, 6, 7, 0, 0, 3, 1, 9]),\\n   (0, (2, 3), (3, 2), (1, 6), [1, 9, 0, 7, 5, 0, 0, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 3, 0, 0, 0, 0, 7, 5]),\\n   (7, (2, 4), (4, 2), (1, 7), [1, 9, 0, 0, 5, 0, 0, 0, 3, 0, 0, 0, 0, 5, 8, 6, 1, 3, 0, 0, 0, 0, 0, 5]),\\n   (5, (2, 5), (5, 2), (1, 8), [1, 9, 0, 0, 7, 0, 0, 0, 0, 0, 0, 8, 9, 1, 0, 0, 1, 3, 0, 0, 0, 0, 0, 7]),\\n   (0, (2, 6), (6, 2), (2, 6), [1, 9, 0, 0, 7, 5, 0, 0, 0, 0, 0, 3, 0, 9, 1, 4, 0, 4, 0, 0, 0, 7, 0, 0]),\\n   (0, (2, 7), (7, 2), (2, 7), [1, 9, 0, 0, 7, 5, 0, 0, 4, 0, 0, 0, 8, 7, 6, 2, 0, 4, 0, 0, 0, 7, 0, 0]),\\n   (0, (2, 8), (8, 2), (2, 8), [1, 9, 0, 0, 7, 5, 0, 0, 0, 7, 2, 4, 0, 0, 0, 3, 0, 4, 0, 0, 0, 7, 0, 0]),\\n   (9, (3, 0), (0, 3), (3, 0), [8, 1, 6, 0, 0, 0, 0, 2, 8, 0, 1, 7, 0, 0, 3, 0, 8, 1, 7, 0, 6, 0, 0, 5]),\\n   (8, (3, 1), (1, 3), (3, 1), [9, 1, 6, 0, 0, 0, 0, 2, 6, 0, 9, 0, 0, 4, 0, 1, 9, 1, 7, 0, 6, 0, 0, 5]),\\n   (1, (3, 2), (2, 3), (3, 2), [9, 8, 6, 0, 0, 0, 0, 2, 7, 3, 0, 6, 5, 0, 9, 8, 9, 8, 7, 0, 6, 0, 0, 5]),\\n   (6, (3, 3), (3, 3), (4, 0), [9, 8, 1, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 8, 0, 0, 9]),\\n   (0, (3, 4), (4, 3), (4, 1), [9, 8, 1, 6, 0, 0, 0, 2, 3, 0, 7, 0, 0, 5, 8, 6, 6, 0, 0, 0, 8, 0, 0, 9]),\\n   (0, (3, 5), (5, 3), (4, 2), [9, 8, 1, 6, 0, 0, 0, 2, 0, 0, 5, 8, 9, 1, 0, 0, 6, 0, 0, 0, 8, 0, 0, 9]),\\n   (0, (3, 6), (6, 3), (5, 0), [9, 8, 1, 6, 0, 0, 0, 2, 0, 0, 0, 3, 0, 9, 1, 4, 0, 2, 3, 0, 4, 0, 8, 0]),\\n   (0, (3, 7), (7, 3), (5, 1), [9, 8, 1, 6, 0, 0, 0, 2, 4, 0, 0, 0, 8, 7, 6, 2, 0, 2, 3, 0, 4, 0, 8, 0]),\\n   (2, (3, 8), (8, 3), (5, 2), [9, 8, 1, 6, 0, 0, 0, 0, 0, 7, 0, 4, 0, 0, 0, 3, 0, 0, 3, 0, 4, 0, 8, 0]),\\n   (7, (4, 0), (0, 4), (3, 3), [0, 6, 0, 0, 8, 3, 0, 4, 8, 0, 1, 9, 0, 0, 3, 0, 9, 8, 1, 0, 6, 0, 0, 5]),\\n   (0, (4, 1), (1, 4), (3, 4), [7, 6, 0, 0, 8, 3, 0, 4, 6, 0, 9, 8, 0, 4, 0, 1, 9, 8, 1, 7, 6, 0, 0, 5]),\\n   (6, (4, 2), (2, 4), (3, 5), [7, 0, 0, 0, 8, 3, 0, 4, 7, 3, 0, 1, 5, 0, 9, 8, 9, 8, 1, 7, 0, 0, 0, 5]),\\n   (0, (4, 3), (3, 4), (4, 3), [7, 0, 6, 0, 8, 3, 0, 4, 1, 0, 0, 6, 0, 0, 2, 0, 6, 0, 0, 0, 8, 0, 0, 9]),\\n   (0, (4, 4), (4, 4), (4, 4), [7, 0, 6, 0, 8, 3, 0, 4, 3, 0, 7, 0, 0, 5, 8, 6, 6, 0, 0, 0, 8, 0, 0, 9]),\\n   (8, (4, 5), (5, 4), (4, 5), [7, 0, 6, 0, 0, 3, 0, 4, 0, 0, 5, 0, 9, 1, 0, 0, 6, 0, 0, 0, 0, 0, 0, 9]),\\n   (3, (4, 6), (6, 4), (5, 3), [7, 0, 6, 0, 0, 8, 0, 4, 0, 0, 0, 0, 0, 9, 1, 4, 0, 0, 2, 0, 4, 0, 8, 0]),\\n   (0, (4, 7), (7, 4), (5, 4), [7, 0, 6, 0, 0, 8, 3, 4, 4, 0, 0, 0, 8, 7, 6, 2, 0, 0, 2, 3, 4, 0, 8, 0]),\\n   (4, (4, 8), (8, 4), (5, 5), [7, 0, 6, 0, 0, 8, 3, 0, 0, 7, 0, 2, 0, 0, 0, 3, 0, 0, 2, 3, 0, 0, 8, 0]),\\n   (0, (5, 0), (0, 5), (3, 6), [0, 5, 0, 0, 9, 0, 8, 0, 8, 0, 1, 9, 7, 0, 3, 0, 9, 8, 1, 7, 0, 6, 0, 5]),\\n   (0, (5, 1), (1, 5), (3, 7), [0, 5, 0, 0, 9, 0, 8, 0, 6, 0, 9, 8, 0, 4, 0, 1, 9, 8, 1, 7, 0, 6, 0, 5]),\\n   (5, (5, 2), (2, 5), (3, 8), [0, 0, 0, 0, 9, 0, 8, 0, 7, 3, 0, 1, 6, 0, 9, 8, 9, 8, 1, 7, 0, 6, 0, 0]),\\n   (0, (5, 3), (3, 5), (4, 6), [0, 0, 5, 0, 9, 0, 8, 0, 1, 0, 0, 6, 0, 0, 2, 0, 6, 0, 0, 0, 0, 8, 0, 9]),\\n   (0, (5, 4), (4, 5), (4, 7), [0, 0, 5, 0, 9, 0, 8, 0, 3, 0, 7, 0, 0, 5, 8, 6, 6, 0, 0, 0, 0, 8, 0, 9]),\\n   (9, (5, 5), (5, 5), (4, 8), [0, 0, 5, 0, 0, 0, 8, 0, 0, 0, 5, 0, 8, 1, 0, 0, 6, 0, 0, 0, 0, 8, 0, 0]),\\n   (0, (5, 6), (6, 5), (5, 6), [0, 0, 5, 0, 0, 9, 8, 0, 0, 0, 0, 0, 3, 9, 1, 4, 0, 0, 2, 3, 0, 4, 8, 0]),\\n   (8, (5, 7), (7, 5), (5, 7), [0, 0, 5, 0, 0, 9, 0, 0, 4, 0, 0, 0, 0, 7, 6, 2, 0, 0, 2, 3, 0, 4, 0, 0]),\\n   (0, (5, 8), (8, 5), (5, 8), [0, 0, 5, 0, 0, 9, 0, 8, 0, 7, 0, 2, 4, 0, 0, 3, 0, 0, 2, 3, 0, 4, 0, 8]),\\n   (0, (6, 0), (0, 6), (6, 0), [4, 0, 0, 5, 1, 9, 7, 0, 8, 0, 1, 9, 7, 0, 3, 0, 4, 0, 3, 0, 9, 0, 1, 8]),\\n   (4, (6, 1), (1, 6), (6, 1), [0, 0, 0, 5, 1, 9, 7, 0, 6, 0, 9, 8, 0, 0, 0, 1, 0, 0, 3, 0, 9, 0, 1, 8]),\\n   (0, (6, 2), (2, 6), (6, 2), [0, 4, 0, 5, 1, 9, 7, 0, 7, 3, 0, 1, 6, 5, 9, 8, 0, 4, 3, 0, 9, 0, 1, 8]),\\n   (0, (6, 3), (3, 6), (7, 0), [0, 4, 0, 5, 1, 9, 7, 0, 1, 0, 0, 6, 0, 0, 2, 0, 5, 1, 2, 8, 0, 0, 6, 0]),\\n   (5, (6, 4), (4, 6), (7, 1), [0, 4, 0, 0, 1, 9, 7, 0, 3, 0, 7, 0, 0, 0, 8, 6, 0, 1, 2, 8, 0, 0, 6, 0]),\\n   (1, (6, 5), (5, 6), (7, 2), [0, 4, 0, 0, 5, 9, 7, 0, 0, 0, 5, 0, 8, 9, 0, 0, 0, 5, 2, 8, 0, 0, 6, 0]),\\n   (9, (6, 6), (6, 6), (8, 0), [0, 4, 0, 0, 5, 1, 7, 0, 0, 0, 0, 0, 3, 0, 1, 4, 7, 0, 1, 6, 0, 4, 2, 3]),\\n   (7, (6, 7), (7, 6), (8, 1), [0, 4, 0, 0, 5, 1, 9, 0, 4, 0, 0, 0, 0, 8, 6, 2, 9, 0, 1, 6, 0, 4, 2, 3]),\\n   (0, (6, 8), (8, 6), (8, 2), [0, 4, 0, 0, 5, 1, 9, 7, 0, 7, 0, 2, 4, 0, 0, 3, 9, 7, 1, 6, 0, 4, 2, 3]),\\n   (3, (7, 0), (0, 7), (6, 3), [0, 9, 2, 8, 0, 1, 6, 0, 8, 0, 1, 9, 7, 0, 0, 0, 0, 4, 0, 0, 9, 0, 1, 8]),\\n   (0, (7, 1), (1, 7), (6, 4), [3, 9, 2, 8, 0, 1, 6, 0, 6, 0, 9, 8, 0, 0, 4, 1, 0, 4, 0, 3, 9, 0, 1, 8]),\\n   (9, (7, 2), (2, 7), (6, 5), [3, 0, 2, 8, 0, 1, 6, 0, 7, 3, 0, 1, 6, 5, 0, 8, 0, 4, 0, 3, 0, 0, 1, 8]),\\n   (2, (7, 3), (3, 7), (7, 3), [3, 0, 9, 8, 0, 1, 6, 0, 1, 0, 0, 6, 0, 0, 0, 0, 0, 5, 1, 8, 0, 0, 6, 0]),\\n   (8, (7, 4), (4, 7), (7, 4), [3, 0, 9, 2, 0, 1, 6, 0, 3, 0, 7, 0, 0, 0, 5, 6, 0, 5, 1, 2, 0, 0, 6, 0]),\\n   (0, (7, 5), (5, 7), (7, 5), [3, 0, 9, 2, 8, 1, 6, 0, 0, 0, 5, 0, 8, 9, 1, 0, 0, 5, 1, 2, 8, 0, 6, 0]),\\n   (1, (7, 6), (6, 7), (8, 3), [3, 0, 9, 2, 8, 0, 6, 0, 0, 0, 0, 0, 3, 0, 9, 4, 9, 7, 0, 6, 0, 4, 2, 3]),\\n   (6, (7, 7), (7, 7), (8, 4), [3, 0, 9, 2, 8, 0, 1, 0, 4, 0, 0, 0, 0, 8, 7, 2, 9, 7, 0, 1, 0, 4, 2, 3]),\\n   (0, (7, 8), (8, 7), (8, 5), [3, 0, 9, 2, 8, 0, 1, 6, 0, 7, 0, 2, 4, 0, 0, 3, 9, 7, 0, 1, 6, 4, 2, 3]),\\n   (0, (8, 0), (0, 8), (6, 6), [1, 8, 0, 6, 0, 4, 2, 3, 8, 0, 1, 9, 7, 0, 0, 3, 0, 4, 0, 3, 0, 9, 1, 8]),\\n   (1, (8, 1), (1, 8), (6, 7), [0, 8, 0, 6, 0, 4, 2, 3, 6, 0, 9, 8, 0, 0, 4, 0, 0, 4, 0, 3, 0, 9, 0, 8]),\\n   (8, (8, 2), (2, 8), (6, 8), [0, 1, 0, 6, 0, 4, 2, 3, 7, 3, 0, 1, 6, 5, 0, 9, 0, 4, 0, 3, 0, 9, 0, 1]),\\n   (0, (8, 3), (3, 8), (7, 6), [0, 1, 8, 6, 0, 4, 2, 3, 1, 0, 0, 6, 0, 0, 0, 2, 0, 5, 1, 2, 8, 0, 6, 0]),\\n   (6, (8, 4), (4, 8), (7, 7), [0, 1, 8, 0, 0, 4, 2, 3, 3, 0, 7, 0, 0, 0, 5, 8, 0, 5, 1, 2, 8, 0, 0, 0]),\\n   (0, (8, 5), (5, 8), (7, 8), [0, 1, 8, 0, 6, 4, 2, 3, 0, 0, 5, 0, 8, 9, 1, 0, 0, 5, 1, 2, 8, 0, 0, 6]),\\n   (4, (8, 6), (6, 8), (8, 6), [0, 1, 8, 0, 6, 0, 2, 3, 0, 0, 0, 0, 3, 0, 9, 1, 9, 7, 0, 1, 6, 0, 2, 3]),\\n   (2, (8, 7), (7, 8), (8, 7), [0, 1, 8, 0, 6, 0, 4, 3, 4, 0, 0, 0, 0, 8, 7, 6, 9, 7, 0, 1, 6, 0, 4, 3]),\\n   (3, (8, 8), (8, 8), (8, 8), [0, 1, 8, 0, 6, 0, 4, 2, 0, 7, 0, 2, 4, 0, 0, 0, 9, 7, 0, 1, 6, 0, 4, 2])\\n]\\n\\n# [rowData, colData, boxData]\\ntestData = [\\n    [8, 6, 7, 1, 3, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 0, 0, 7, 1, 9, 0, 0, 7, 5, 0, 0, 0, 9, 8, 1, 6, 0, 0, 0, 0, 2, 7, 0, 6, 0, 0, 8, 3, 0, 4, 0, 0, 5, 0, 0, 9, 0, 8, 0, 0, 4, 0, 0, 5, 1, 9, 7, 0, 3, 0, 9, 2, 8, 0, 1, 6, 0, 0, 1, 8, 0, 6, 0, 4, 2, 3],\\n    [8, 0, 1, 9, 7, 0, 0, 3, 0, 6, 0, 9, 8, 0, 0, 4, 0, 1, 7, 3, 0, 1, 6, 5, 0, 9, 8, 1, 0, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 5, 8, 6, 0, 0, 5, 0, 8, 9, 1, 0, 0, 0, 0, 0, 0, 3, 0, 9, 1, 4, 4, 0, 0, 0, 0, 8, 7, 6, 2, 0, 7, 0, 2, 4, 0, 0, 0, 3],\\n    [8, 6, 7, 0, 0, 3, 1, 9, 0, 1, 3, 0, 0, 0, 0, 0, 7, 5, 0, 4, 0, 0, 0, 7, 0, 0, 0, 9, 8, 1, 7, 0, 6, 0, 0, 5, 6, 0, 0, 0, 0, 8, 0, 0, 9, 0, 0, 2, 3, 0, 4, 0, 8, 0, 0, 4, 0, 3, 0, 9, 0, 1, 8, 0, 5, 1, 2, 8, 0, 0, 6, 0, 9, 7, 0, 1, 6, 0, 4, 2, 3]\\n]\\n\\ncells = []\\n\\nregionData = getRegionData(puzzle)\\n\\nfor (i, row) in enumerate(puzzle):\\n    for (j, cell) in enumerate(row):\\n        cells.append(Cell(cell, (i, j)))\\n\\nfor (i, cell) in enumerate(cells):\\n    cell.getRegions(regionData)\\n    regions = [c.val for _ in cell.regions for c in _]\\n\\n    Test.assert_equals(cell.val, testVals[i][0], 'Invalid cell attribute: \\\\'.val\\\\'')\\n    Test.assert_equals(cell.rLocation, testVals[i][1], 'Invalid cell attribute: \\\\'.rlocation\\\\'')\\n    Test.assert_equals(cell.cLocation, testVals[i][2], 'Invalid cell attribute: \\\\'.clocation\\\\'')\\n    Test.assert_equals(cell.bLocation, testVals[i][3], 'Invalid cell attribute: \\\\'.bLocation\\\\'')\\n    Test.assert_equals(regions, testVals[i][4], 'Invalid cell attribute: \\\\'.regions\\\\'')\\n\\nfor (i, region) in enumerate(regionData):\\n    regionData[i] = [c.val for _ in region for c in _]\\n\\nTest.assert_equals(regionData, testData)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,5,5,5,5,4,4,5,5,5,5,4,5,5,5,5,2],\"rators\":[\"CByQtwf9BqB8jfEC3\",\"SuJeLnhfR3smGu3WZ\",\"AasGs8AeX9Lcb9xJn\",\"tAF9Gf6PiGogbZuWs\",\"TyEeGAgsF7tG3fubX\",\"A5g5PhdQpmF7ohwsC\",\"aEm3Wvj2rFYRL8Lrb\",\"8PwfYqoDQFThzNtvf\",\"wT5gGgvjKc5wz59AQ\",\"zQ8ioTQfJP8zjMnqg\",\"fxdGNWYS6PWMmswrF\",\"KpHrC7WPEojnzgEtz\",\"R4SjTgDnpigJYDLyL\",\"sfoAF6eygyfp6MWx3\",\"p8qqFdJ3FSk5x9z3G\",\"d8qtzoLB264iP8tdY\"],\"total\":16,\"quality\":[]},\"flags\":0},\"summary\":\"A Sudoku puzzle contains 81 \\\"cells\\\" of numbers in a 9 x 9 grid. One helpful approach to solving a Sudoku puzzle is to make a class that represents each cell in the puzzle along with three different formats of the Sudoku puzzle representing each region type:\\n\\nrow\\ncolumn\\nbox\\n\\nKeep in mind that the definition for a cell's region is as follows:\\nEach cell has a \\\"re\",\"tags\":[\"classes\",\"arrays\",\"algorithms\",\"higher_order_functions\"],\"timestamp\":{\"$date\":1583531765470},\"title\":\"Sudoku Cell\",\"quality\":0,\"family\":[{\"_id\":\"answn8heoA5fYoszt\",\"language\":\"python3\"}]}}"]