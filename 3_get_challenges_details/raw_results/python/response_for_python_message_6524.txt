a["{\"msg\":\"result\",\"id\":\"1969\",\"result\":{\"_id\":\"Ld4xBpqBXqygwQ5St\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"class Testpaper:\\n\\t\\n\\nclass Student:\\n\\t\",\"difficulty\":2.7464788732394365,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"iRrdCFv8eunEY8x2h\",\"instructions\":\"Your task is to write a program which allows teachers to create a *multiple choice test* in a class called `Testpaper` and to be also able to assign a *minimum pass mark*. The testpaper's subject should also be included. The attributes are in the following order:\\n\\n1. `subject`\\n2. `markscheme`\\n3. `pass_mark`\\n\\nAs well as that, we need to create student objects to take the test itself! Create another class called `Student` and do the following:\\n- Create an attribute called `tests_taken` and set the default as `'No tests taken'`.\\n- Make a method called `take_test()`, which takes in the testpaper object they are completing and the student's answers. Compare what they wrote to the mark scheme, and **append to the/create a** dictionary assigned to `tests_taken` in the way as shown in the point below.\\n- Each key in the dictionary should be the *testpaper subject* and each value should be a string in the format seen in the examples below (*whether or not the student has failed, and their percentage in brackets)*.\\n\\n### Examples\\n```\\npaper1 = Testpaper(\\\"Maths\\\", [\\\"1A\\\", \\\"2C\\\", \\\"3D\\\", \\\"4A\\\", \\\"5A\\\"], \\\"60%\\\")\\npaper2 = Testpaper(\\\"Chemistry\\\", [\\\"1C\\\", \\\"2C\\\", \\\"3D\\\", \\\"4A\\\"], \\\"75%\\\")\\npaper3 = Testpaper(\\\"Computing\\\", [\\\"1D\\\", \\\"2C\\\", \\\"3C\\\", \\\"4B\\\", \\\"5D\\\", \\\"6C\\\", \\\"7A\\\"], \\\"75%\\\")\\n\\nstudent1 = Student()\\nstudent2 = Student()\\n```\\n\\n```\\nstudent1.tests_taken ➞ \\\"No tests taken\\\"\\nstudent1.take_test(paper1, [\\\"1A\\\", \\\"2D\\\", \\\"3D\\\", \\\"4A\\\", \\\"5A\\\"])\\nstudent1.tests_taken ➞ {\\\"Maths\\\" : \\\"Passed! (80%)\\\"}\\n\\nstudent2.take_test(paper2, [\\\"1C\\\", \\\"2D\\\", \\\"3A\\\", \\\"4C\\\"])\\nstudent2.take_test(paper3, [\\\"1A\\\", \\\"2C\\\", \\\"3A\\\", \\\"4C\\\", \\\"5D\\\", \\\"6C\\\", \\\"7B\\\"])\\nstudent2.tests_taken ➞ {\\\"Chemistry\\\" : \\\"Failed! (25%)\\\", \\\"Computing\\\" : \\\"Failed! (43%)\\\"}\\n```\\n\\n### Notes\\n- Round percentages to the **nearest whole number**.\\n- Remember that the attribute `tests_taken` should return 'No tests taken' when no tests have been taken yet.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"paper1 = Testpaper('Maths', ['1A', '2C', '3D', '4A', '5A'], '60%')\\npaper2 = Testpaper('Chemistry', ['1C', '2C', '3D', '4A'], '75%')\\npaper3 = Testpaper('Computing', ['1D', '2C', '3C', '4B', '5D', '6C', '7A'], '75%')\\npaper4 = Testpaper('Physics', ['1A', '2B', '3A', '4C', '5A', '6C', '7A', '8C', '9D', '10A', '11A'], '90%')\\n\\nstudent1 = Student()\\nstudent2 = Student()\\nstudent3 = Student()\\n\\n\\nTest.assert_equals(student1.tests_taken, 'No tests taken')\\nstudent1.take_test(paper1, ['1A', '2D', '3D', '4A', '5A'])\\nTest.assert_equals(student1.tests_taken, {'Maths' : 'Passed! (80%)'})\\n\\nstudent2.take_test(paper2, ['1C', '2D', '3A', '4C'])\\nstudent2.take_test(paper3, ['1A', '2C', '3A', '4C', '5D', '6C', '7B'])\\nTest.assert_equals(student2.tests_taken, {'Chemistry' : 'Failed! (25%)', 'Computing' : 'Failed! (43%)'})\\n\\nTest.assert_equals(student3.tests_taken, 'No tests taken')\\nstudent3.take_test(paper1, ['1C', '2D', '3A', '4C', '5A'])\\nstudent3.take_test(paper3, ['1A', '2C', '3A', '4C', '5D', '6C', '7B'])\\nTest.assert_equals(student3.tests_taken, {'Maths' : 'Failed! (20%)', 'Computing' : 'Failed! (43%)'})\\nstudent3.take_test(paper4, ['1A', '2C', '3A', '4C', '5D', '6C', '7B', '8C', '9D', '10A', '11A'])\\nTest.assert_equals(student3.tests_taken, {'Maths' : 'Failed! (20%)', 'Computing' : 'Failed! (43%)', 'Physics' : 'Failed! (73%)'})\\n\\nTest.assert_equals(paper1.subject, 'Maths')\\nTest.assert_equals(paper2.subject, 'Chemistry')\\nTest.assert_equals(paper3.subject, 'Computing')\\nTest.assert_equals(paper4.subject, 'Physics')\\n\\nTest.assert_equals(paper1.markscheme, ['1A', '2C', '3D', '4A', '5A'])\\nTest.assert_equals(paper2.markscheme, ['1C', '2C', '3D', '4A'])\\nTest.assert_equals(paper3.markscheme, ['1D', '2C', '3C', '4B', '5D', '6C', '7A'])\\nTest.assert_equals(paper4.markscheme, ['1A', '2B', '3A', '4C', '5A', '6C', '7A', '8C', '9D', '10A', '11A'])\\n\\nTest.assert_equals(paper1.pass_mark, '60%')\\nTest.assert_equals(paper2.pass_mark, '75%')\\nTest.assert_equals(paper3.pass_mark, '75%')\\nTest.assert_equals(paper4.pass_mark, '90%')\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,3,5,2,5,4,0,3,2,2,3,4,3,2,4,2,2,3,2,3,2,3,3,2,3,1,4,3,3,3,3,3,4,3,3,3,4,3,0,2,0,4,4,4,4,3,3,4,2,3,2,3,4,4,3,3,3,3,3,3,4,2,4,2,4,3,2,4,3,4,0,1,2,1,2,4,1,2,1,3,4,3,2,2,3,3,3,4,2,4,2,4,3,3,1,3,2,3,2,0,3,3,1,3,4,3,2,3,2,3,2,3,2,4,4,1,3,5,2,3,2,4,4,4,4,1,4,3,3,2,4,0,3,1,1,2,0,4],\"rators\":[\"PXAcsKkssS2yLyDv2\",\"SuJeLnhfR3smGu3WZ\",\"yZvzB3qFb8pkHy4dg\",\"tAF9Gf6PiGogbZuWs\",\"AasGs8AeX9Lcb9xJn\",\"zxmtE2mYR4xQzTHoy\",\"s5M5RvgqR9BhB9JoC\",\"gb9rvGus2Jv7bjZSs\",\"SGhPxX5bHGL8zZqtt\",\"aEm3Wvj2rFYRL8Lrb\",\"8PwfYqoDQFThzNtvf\",\"hnLL3EuW85LygGM2S\",\"bDpmwo4vm9jHeZAPk\",\"DryNRN98Dj24BpgrL\",\"mS2oaNzM5vCgLjYu5\",\"TyEeGAgsF7tG3fubX\",\"kfG9deramoXyqrP5L\",\"QN3AHCaTykyuE5k8B\",\"A5g5PhdQpmF7ohwsC\",\"Ecy2fPuyYDLKmRkcg\",\"4Sntowj2cbMFRDMJa\",\"dH4KCHZaFcL274ZL3\",\"5qxnDT2Kx3LHeSSFb\",\"BByKDngfPvW6w4m7d\",\"KRmxvA4mWgfKvHmYN\",\"mCyBvGwKAWPTdBsMz\",\"3Xd6WT95BrewRxWpF\",\"8JyqsSbN2FJXPr3cw\",\"ywk3XGvcmpTgRxwZa\",\"WtFQigNmNZ5EREPzo\",\"hNMQuEQrQfRJu2kBd\",\"wT5gGgvjKc5wz59AQ\",\"FgkYtHLxeD8pETJ8T\",\"qukQkxmedze5KqfBu\",\"KpHrC7WPEojnzgEtz\",\"fznzd3qnvtbFkkizz\",\"yv7c4H2jimSKHEjtG\",\"S6Zd8mPuvhuh3MFRt\",\"ZNnsMeNkdDhHjSrZb\",\"KWpKvLn6XJWcBF4jt\",\"gJYuGdkXEWWmGRLzu\",\"bJaPCBx63YxdJAuTS\",\"zQ8ioTQfJP8zjMnqg\",\"B4jPYeyvixcfEZknA\",\"SBjGHJBMJ9P59j8ND\",\"fxdGNWYS6PWMmswrF\",\"rneLEF52nLZxZCYp6\",\"uzwYcrm8PvfHZR7YF\",\"tz3nSGtp8A6zkiDxw\",\"JS3hNM3XXkxPdg3yk\",\"5nY48krepaT4a4QTN\",\"AGMQqooexrFXgMnET\",\"JrADeNRHRTrvc98ry\",\"R3ucLSZd83gmBKXF2\",\"R4SjTgDnpigJYDLyL\",\"gPvrBxxySDP2vpux3\",\"Nua6T3dBurBy3Qfg9\",\"NaPpyhnXZ2XLtug83\",\"f2BoqyCpgnmjEjLqx\",\"DpqiRAm2yo3W2x4HX\",\"JQ5uoxA4WZgN6HyJk\",\"XghikBbq7obhPSKjX\",\"sfoAF6eygyfp6MWx3\",\"n2BRY9X8899dcG8Bw\",\"W5TajitmCyxz87zAC\",\"5ZR5C8Hh44gtGfMou\",\"TzfFXjsN3n6kkFZSY\",\"MK8HigdFigfJzHhyo\",\"nMDMMPWxws2kTgGKk\",\"cykCKNJcqFBxz4T8s\",\"ZJQW3bL2KzxJcdEoc\",\"JmkgMJyvrvqTMfdqF\",\"dzS6WBTMHyFEag6Fp\",\"Pe8vWpDHRuH9nSGKW\",\"Y8ySZEtvht9EwdcoY\",\"qab4tYm6vJQcpKLfi\",\"xn7uGNKeAwPEkP9oA\",\"wwMcJQRvf3X59Jyev\",\"Wv2vJnEj8ywNmARoF\",\"9PoKio8SZZtinmTCf\",\"kQCnJdq4psgrpvphr\",\"mzsaCBQP3e6YourDN\",\"foytX6kH9wiSYqLtT\",\"WzEhzQcMwc4sw8z7T\",\"s6qiPXptvyxxEy3vm\",\"7K2GEb5TZRtSpyyGS\",\"PytNZK9mNiRiZxPrm\",\"tpxMgkGSHwBjS95Ta\",\"WzxYNYGEiP97ZeNBo\",\"jL4y5fTJAMBjhZmko\",\"J3upzLHuEwXH7Z2hx\",\"6F3Y6ZBAGNDGGTt9B\",\"vSvippNru5pBnJQJn\",\"uznjMqKo6mzk5fsJh\",\"REpkEcYrskYHBmYzW\",\"qRMyPsTjFp255TrrK\",\"Kh3Pc2ZRusurLaMyP\",\"wFws9y3mXvC4vL9Q2\",\"E7Qn6yKjwGJd6EPqM\",\"JGAQgGGrsRMmeANJh\",\"7op39dyw7MJj52e8E\",\"jSaW4kdeAAGoLxcuP\",\"yjtdwc2AC4jA2RWtn\",\"QGmp3LSCSoWAbcTjs\",\"HF28xZKSLM9wEuqNg\",\"dHConQk6pC8c323TE\",\"5kazQPq8ZdDsx6kjf\",\"6dZFWNGPH8GKYA8sN\",\"5S9nX4rKsnCcnv4Cz\",\"DR5tfZrFaSDeLygnA\",\"ZLunbeQYT7maSa8Yb\",\"D2B5zXAoub33DEC86\",\"eg5iwxQWCEYnktrcm\",\"hRAd998MG8Jzdpxj6\",\"8sNv5PTHa7XQ8bNqR\",\"LskiHJtzYpBuCmjaP\",\"RyWd7ieDg3PAWLpBa\",\"9MER8SZ9Xo6xNYMj8\",\"tBZPtvo6Zrq3bPbsT\",\"r9hcWPFRkykfmBh9d\",\"rx88g3SpXfGecJigj\",\"xpGSi4pXEaJnL6KMR\",\"7ifh8r4gvyYMhKB94\",\"axdSNLZpiCDF8RS6n\",\"nFbmNzMQ38TncmfQX\",\"o4wnhXS98h3o4927m\",\"StNu7DPyTgEStZsMY\",\"eYfPWvZwnJQkHbSTK\",\"DCLoZNDf8h6TB7gxn\",\"qAby4AWXmTNeusvg3\",\"kWwCmmWHqYDkNgsxa\",\"4RsakkyRXyYGwFxEa\",\"kedweJpprZRZ5psMn\",\"ScaZG69jog5kcqGtQ\",\"hkiz2Nv927cYGrA86\",\"jhpjLPkSo6yjCPNwe\",\"eMuCpJ2spXWkJjWNz\",\"2EbDCCJJvCfKkbYia\",\"iojEnnY9FsMfYzp6f\",\"8nE8QHnFYsHCFebte\",\"38cEoB5NrMG6ompwH\",\"i3GA5qpPp2cGSxWqq\",\"XHShZ3WMPgGEA2vkR\",\"gXTAie79kiw28tx5u\",\"ii29nS7Yko3iSLJFa\",\"cNQC9EWyvT2u37Wc9\",\"fGQthgRWhpw3fXhzG\",\"zBk2cwJ9SLAhFuM3K\",\"Afnps7TJQuS9sipMb\",\"GShFyQvHxf7W5jj3A\",\"MpfytGFYF77emJ3cT\",\"hbmtExj5KRxjFkqb9\",\"aA3x7iHuvm9JqXdr2\",\"2PufnQcsHsfymufX3\",\"JKb5rhL6DKcCAypF9\",\"kQH5b8MXJunh84Czq\",\"T6iBEE2jp7f7iEF2P\",\"nQRzZKeDKuLRf9chX\",\"yTtSCvGPyYna6JuRC\",\"cpSdN6McMMEsKRN4h\",\"ZEoSTJxQbxsSYSkvo\",\"syRNbbPdLCGXbH2Gy\",\"m3R9aaRoEbaxRsSNA\"],\"total\":176,\"quality\":[5,5,4,3,3,4,3,3,3,5,5,5,4,5,5,5,5,5,5,5,5,5,4,5,5,5]},\"flags\":0},\"summary\":\"Your task is to write a program which allows teachers to create a multiple choice test in a class called Testpaper and to be also able to assign a minimum pass mark. The testpaper's subject should also be included. The attributes are in the following order:\\n\\nsubject\\nmarkscheme\\npass_mark\\n\\nAs well as that, we need to create student objects to take the test itsel\",\"tags\":[\"classes\",\"objects\",\"numbers\",\"formatting\"],\"timestamp\":{\"$date\":1583787209796},\"title\":\"Multiple Choice Tests\",\"quality\":4.461538461538462,\"family\":[{\"_id\":\"thXMEAWNWyk9cCZcM\",\"language\":\"csharp\"},{\"_id\":\"Ld4xBpqBXqygwQ5St\",\"language\":\"python3\"}]}}"]