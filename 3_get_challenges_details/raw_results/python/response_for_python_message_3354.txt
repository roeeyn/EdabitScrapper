a["{\"msg\":\"result\",\"id\":\"400\",\"result\":{\"_id\":\"5pBHzWb8Psot9EQNk\",\"author\":\"Mubashir Hassan \",\"authorId\":\"T6iBEE2jp7f7iEF2P\",\"code\":\"def simple_encoder(s):\\n\\t\",\"difficulty\":0.7222222222222222,\"familyId\":\"RzKtmDnxSn6zYH9oz\",\"instructions\":\"Create a function that takes a string `str` and performs simple encoding as per the following method:\\n\\n- Replace all single occurrence characters with `[`\\n- Replace all characters with **two or more** occurrences with `]`\\n\\nReturn the final string after modification.\\n\\n### Examples\\n```\\nsimple_encoder(\\\"Mubashir\\\") ➞ \\\"[[[[[[[[\\\"\\n# '[' for each character\\n\\nsimple_encoder(\\\"Matt\\\") ➞ \\\"[[]]\\\"\\n# ']' for both 't'\\n\\nsimple_encoder(\\\"eD  aBiT\\\") ➞ \\\"[[]][[[[\\\"\\n# Two spaces in between\\n```\\n\\n### Notes\\n- Strings can contain lower and uppercase letters. Treat them equally (i.e. A = a, B = b).\\n- Spaces are also characters.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(simple_encoder(\\\"Mubashir\\\"), \\\"[[[[[[[[\\\")\\nTest.assert_equals(simple_encoder(\\\"Matt\\\"), \\\"[[]]\\\")\\nTest.assert_equals(simple_encoder(\\\"Mu ba sh ir Ha ss an\\\"), \\\"[[][]]]]][[]]]]]]]][\\\")\\nTest.assert_equals(simple_encoder(\\\"HelEn\\\"), \\\"[][][\\\")\\nTest.assert_equals(simple_encoder(\\\"Air  force\\\"), \\\"[[]]][[][[\\\")\\nTest.assert_equals(simple_encoder(\\\"Pakistan\\\"), \\\"[][[[[][\\\")\\nTest.assert_equals(simple_encoder(\\\"eD  aBiT\\\"), \\\"[[]][[[[\\\")\\nTest.assert_equals(simple_encoder(\\\"Success\\\"), \\\"][]][]]\\\")\\nTest.assert_equals(simple_encoder(\\\"iiiiii\\\"), \\\"]]]]]]\\\")\\n# Mubashir\",\"language\":\"python3\",\"quality\":4.7560975609756095,\"summary\":\"Create a function that takes a string str and performs simple encoding as per the following method:\\n\\nReplace all single occurrence characters with [\\nReplace all characters with two or more occurrences with ]\\n\\nReturn the final string after modification.\\n\\nExamples\\nsimple_encoder(\\\"Mubashir\\\") ➞ \\\"[[[[[[[[\\\"\\n'[' for each character\\n\\nsimple_encoder(\\\"Matt\\\") ➞ \\\"[[]]\\\"\\n']'\",\"tags\":[\"cryptography\",\"arrays\",\"strings\",\"language_fundamentals\"],\"timestamp\":{\"$date\":1610795020222},\"title\":\"Simple Encoder\",\"stats\":{\"completed\":{\"total\":154,\"ratings\":[0,0,0,0,0,1,2,1,1,0,0,1,1,1,0,0,0,0,0,0,0,2,2,1,0,1,0,0,0,0,0,0,0,2,0,0,1,0,0,1,1,2,1,0,0,0,0,0,0,1,0,3,0,0,0,0,1,1,1,1,0,2,1,2,1,2,4,2,0,1,0,1,0,1,1,1,0,1,0,1,2,0,0,2,1,0,0,1,0,1,1,2,2,0,2,1,1,1,0,1,1,1,2,1,0,2,0,2],\"quality\":[5,5,5,5,5,5,5,5,5,5,3,5,5,5,4,5,5,5,5,5,3,5,5,2,5,5,5,5,5,5,5,5,3,5,5,5,5,5,5,5,5],\"rators\":[\"T6iBEE2jp7f7iEF2P\",\"gXTAie79kiw28tx5u\",\"Ds7L5bksw2QRHjrKL\",\"PXAcsKkssS2yLyDv2\",\"Yp7uvStL97cC9fKkY\",\"iS5BrkGLzJyPK7nKt\",\"sX9GZp3fYyQLrBKMJ\",\"srJ34BaybkQh3qRkM\",\"F6GsF4gLfNNd6di6x\",\"7dQYiDeTcMztbGyso\",\"wRttWTM59y8m5mx7x\",\"E8DcBnATah6GrjzYt\",\"eYfPWvZwnJQkHbSTK\",\"AXcnPX68zdMiLNSmu\",\"5HCu9Ydd86QgHDRNP\",\"FEYpu9RWysAgW3XnP\",\"C5fDGFphbqipEZmYn\",\"jGMaswu5hyXyr7A4Z\",\"ghMkPtdFCpM6w8nax\",\"DEDniTrstQYGounXT\",\"QRv96jmNaYsWkxQEG\",\"fTNQmMvTZhhiGBCMe\",\"eMuCpJ2spXWkJjWNz\",\"LCuvvWMwiGuqTwNRi\",\"J5T8gZqiZXFuFDTQ7\",\"AFfw7cGg83uYk2Miy\",\"HBuJYgW2eRBJp9FoG\",\"p8qqFdJ3FSk5x9z3G\",\"uvLimfW9x3bCp7huQ\",\"Jqk2uJZZxEv5wZFze\",\"pPpmP7xeJzGgK362R\",\"oBcs8GLX2ZFLXQy8y\",\"peCvTbjQBgdWo53Wv\",\"gJYuGdkXEWWmGRLzu\",\"tc343mwcc6eeBX475\",\"yjtdwc2AC4jA2RWtn\",\"buX4mCQhtXCfBjeno\",\"cR3ibTMxLyEdDFCHY\",\"gb9rvGus2Jv7bjZSs\",\"cRoHBaA7HjePc8wb2\",\"2MjzJ7yxh3eT3xbng\",\"DPi9QGLctq2y76KuE\",\"N2wnZXkhDH86mgjQ8\",\"J3upzLHuEwXH7Z2hx\",\"9qoWqLcHGiDX429rE\",\"zd9FLSzsGz3evKafy\",\"zC8WrPp5BC6c2exrW\",\"Q6gEE9dG8ERy2Xu3c\",\"wjc4iejpErBhxWwHo\",\"XD5nmvKQchKezPXhy\",\"PC3pLs36zNzpRDSuE\",\"YRAzEBJoLvSaiPtYx\",\"RekwjHxtheNZ4T36v\",\"aEm3Wvj2rFYRL8Lrb\",\"yAouD3PxzED8a4gap\",\"MXGuntvz3byrP6WJc\",\"j7ebNFtte6fSkMWjj\",\"s5M5RvgqR9BhB9JoC\",\"2QGRoQn2dRq3scu7k\",\"u5jLXaWAKo7K4JvTR\",\"8PwfYqoDQFThzNtvf\",\"CHvzhtXnv8HTbPQ56\",\"XHShZ3WMPgGEA2vkR\",\"i5iePG5GqhJJ8HEoB\",\"oaJbwGAbtpgYhMEgd\",\"kjvgTyRFyKHv44DcH\",\"7q8oBsCHwn48Ppnrq\",\"q6QsMYNMpPNtmyTeW\",\"JS3hNM3XXkxPdg3yk\",\"qAby4AWXmTNeusvg3\",\"hnyhBFWwNCz9mDfSi\",\"a2Kmh6ekWqQQooHiQ\",\"NP2RxM3eBd3drnDwP\",\"yZfJxYa6uMShvBLP5\",\"NrRa4TS6uZR9xuXRt\",\"8JyqsSbN2FJXPr3cw\",\"iojEnnY9FsMfYzp6f\",\"cuhyJF4RPN6zYbRyK\",\"sKfrD9gjCDHuqLzSk\",\"GC9LB7vyQwSrQXoqt\",\"tAF9Gf6PiGogbZuWs\",\"SgPjF69J25jT3dn4X\",\"sbme4fRJjjBjYXRbY\",\"66a9xX73nmTEuKs9k\",\"mxX4rH5ELYkdZ2Mbw\",\"4TmgHkn5vqyHK3sYC\",\"XrqNzJ2FRG8HnGiR6\",\"u5u2YpHXiNgzDNJdX\",\"CyzskHGsC6WSmYrLu\",\"RTER5uJdW4khkiNbY\",\"YmQb9Mo4Xcg2vzgbn\",\"YZL9ec49hQdqcwu2j\",\"Dh3qTd94ZAtrFt5va\",\"8teSHp77vHhhvJWiS\",\"M2gFMJkocQSY6bsFR\",\"jgyuzt5BpA3ohHG96\",\"Dq24MSpogRmq6L4hX\",\"9Ly8afdtofp8DXzrt\",\"Fk9kLwoG4Brf4KsKf\",\"C9LKGu2g5hSijvDzA\",\"T6Rm8mREPMZSftzrC\",\"3SmhoMc8wsBg9w8Lc\",\"jkbavR2ATFJcpmo8M\",\"DTyNcDkiScCjgJt28\",\"JiSpvq6C7azQEmENc\",\"LQxof8pGabGuWP7Gn\",\"AasGs8AeX9Lcb9xJn\",\"eHcgvkTGsH7ZziqBo\",\"9pzFiFK3ANLjQfnr2\",\"Cg3LKtEAJpsrdWroG\",\"EfxwqhYdapX3dMQC2\",\"sHjfbGQGLHE6JR6qu\",\"HqmxnQJM66Y57twhn\",\"MKT7khMBGXzA22ykf\",\"Afnps7TJQuS9sipMb\",\"acobNBkckrEAqarbu\",\"WDpJcoqDvmkLbtrZL\",\"XbxHXmh5ZmRN2gw3K\",\"gKnWjDjwrJh7MK2df\",\"cdXmwjupCXSvJTSNo\",\"dYPkStFnLvAMsHSzZ\",\"R9yZbvYa6Z593MtQF\",\"FiaTpm7ehfDv43wSG\",\"gjiu8kLnHYxe4HoBN\",\"9LrF5o2TK2iE8BZJh\",\"TCvpT4EPb8qNssNB7\",\"qaPjAANdnxFnWfj5d\",\"B4y8aoyXJtskYPFEL\",\"5QN8R22z43SrwoHDz\",\"dzS6WBTMHyFEag6Fp\",\"sbJcFfQjQ59Wfg4Cd\",\"5nbHH4eApn6So9h2n\",\"vAbK8sCfKyFC78HYg\",\"rF97GDLqCgynr7BaD\",\"K3RacTvkWHLfzKF8i\",\"tR9grPBLncwacBTzr\",\"fMp8sPsKSECdfgF9j\",\"suArq5BbSy7gD6xri\",\"Mhajwo3ErvByGky9y\",\"rrSC943cCKNG48sH4\",\"Wi4H6ayKsNDWWQCG5\",\"Ne8mK9DDHG8TRkoxG\",\"mdRQaGT98ycMt87S2\",\"7HAL7H6NJmc4NC8Q5\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"tPE5FvBoum9N6r2hS\",\"language\":\"cpp\"},{\"_id\":\"hcXPiNgjXDhs8mGmq\",\"language\":\"javascript\"},{\"_id\":\"5pBHzWb8Psot9EQNk\",\"language\":\"python3\"},{\"_id\":\"2DFN2eEJuruQD2KoC\",\"language\":\"ruby\"}]}}"]