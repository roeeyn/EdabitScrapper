a["{\"msg\":\"result\",\"id\":\"1163\",\"result\":{\"_id\":\"cv5vRuexCzi4hvxdd\",\"author\":\"MyName\",\"authorId\":\"P7NmFbCJ5offXMRvB\",\"code\":\"album_dict = {\\n\\t2015: (\\\"Vulnicura\\\", \\\"Honeymoon\\\", \\\"Rebel Heart\\\"),\\n\\t2016: (\\\"Lemonade\\\", \\\"Blackstar\\\", \\\"A Moon Shaped Pool\\\"),\\n\\t2017: (\\\"Flower Boy\\\", \\\"Antisocialites\\\"),\\n\\t2018: (\\\"El Mal Querer\\\", \\\"Someone Out There\\\", \\\"Cranberry\\\", \\\"Kamikaze\\\"),\\n\\t2019: (\\\"thank u next\\\", \\\"Magdalene\\\", \\\"Ode to Joy\\\"),\\n\\t2020: (\\\"Rough and Rowdy Ways\\\", \\\"folklore\\\", \\\"Future Nostalgia\\\", \\\"Colores\\\")\\n}\\n\\ndef release_year(album):\\n\\t\",\"difficulty\":1.6153846153846154,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"XNJhKooo4qcX5RjfL\",\"instructions\":\"You have a dictionary with years 2015-2020 as keys and some albums released for each year as key values. Write a function that takes an album and returns the year in which it was released.\\n\\n### Examples\\n```\\nrelease_year(\\\"Ode to Joy\\\") ➞ 2019\\n\\nrelease_year(\\\"Honeymoon\\\") ➞ 2015\\n\\nrelease_year(\\\"Fake_album\\\") ➞ \\\"Unknown\\\"\\n```\\n\\n### Notes\\n- Albums dictionary is made for you.\\n- If the album isn't in the dictionary, return the string `\\\"Unknown\\\"`.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(release_year('Rebel Heart'), 2015, 'error')\\nTest.assert_equals(release_year('Someone Out There'), 2018, 'error')\\nTest.assert_equals(release_year('Where Wildness Grows'), 'Unknown', 'error')\\nTest.assert_equals(release_year('thank u next'), 2019, 'error')\\nTest.assert_equals(release_year(2017), 'Unknown', 'error')\\nTest.assert_equals(release_year('Flower Boy'), 2017, 'error')\\nTest.assert_equals(release_year('Kamikaze'), 2018, 'error')\\nTest.assert_equals(release_year('folklore'), 2020, 'error')\\nTest.assert_equals(release_year('Opal'), 'Unknown', 'error')\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,0,2,2,2,3,1,3,2,3,2,1,2,3,3,1,3,1,1,2,1,0,1,1,1,3,3,3,2,1,2,2,1,1,1,3,2,1,2,2,2,0,2,1,1,1,1,1,1,0,2,1,2,1,3,2,1,2,2,1,3,2,2,2,2,3,2,2,0,2,1,2,0,5,1,2,2,1,0,2,2,2,3,0,2,2,0,2,1,2,0,1,1,2,2,2,2,1,2,2,1,0,0,0,1,1,2,1,2,1,2,2],\"rators\":[\"P7NmFbCJ5offXMRvB\",\"yjtdwc2AC4jA2RWtn\",\"Nb6LYPoQP6KJZt8mz\",\"gJYuGdkXEWWmGRLzu\",\"AasGs8AeX9Lcb9xJn\",\"CwXsu25ygLEwQbmQC\",\"XyqPxiQdjZGdGC8tS\",\"ZrKCkX7xxGGZzauFW\",\"tAF9Gf6PiGogbZuWs\",\"8PwfYqoDQFThzNtvf\",\"BYWmPuD9wvYz7N37r\",\"8JyqsSbN2FJXPr3cw\",\"Yp7uvStL97cC9fKkY\",\"jBR47vA7HwAZqp4QA\",\"DEDniTrstQYGounXT\",\"MtJ33oGd6Skry3dj4\",\"iojEnnY9FsMfYzp6f\",\"aEm3Wvj2rFYRL8Lrb\",\"gb9rvGus2Jv7bjZSs\",\"ZpjYqnL4FXAF4Fvtx\",\"2DrXL4cYLdXLj78t3\",\"55RQznnuTGpsj3EXd\",\"5JFQgt6KFihmXfHKm\",\"RehJGBFS6CYiWdjZx\",\"DCLoZNDf8h6TB7gxn\",\"rr2jCfQp8qpzCqs29\",\"tytQfvk4jvE4dyFGk\",\"ji5f27FPz4wRRF6Ls\",\"MfKe55snfKsdnDejs\",\"3QQG7K2vH7D4m4AGj\",\"23KndF374EHHZNbL8\",\"euPBBaYXyS8RBr9KB\",\"MKT7khMBGXzA22ykf\",\"6428wKHtwKkFdvBs5\",\"wNuGsAdwdPtRn9JXz\",\"mDWNyaaQ9hvPCRzSd\",\"idjmFCuqPacBPvCzw\",\"MCw7uAcoWcSTBTmr3\",\"9YTFEtK6rT7Nr6Nam\",\"Q9afpRu3u8zuWuzLQ\",\"oig8ig9SE9RZa8ttL\",\"8MbxDrqWwubLM8kk8\",\"s5M5RvgqR9BhB9JoC\",\"jNvegJWCk5HCtEMbK\",\"Pe8vWpDHRuH9nSGKW\",\"PTDFuxAzou7W6asWt\",\"R4SjTgDnpigJYDLyL\",\"cR3ibTMxLyEdDFCHY\",\"gSFJPsMXnqAog3Q9f\",\"hRiMXDZNAzyPd5tpt\",\"b3BWzq6Yu8nswak5u\",\"Wv2vJnEj8ywNmARoF\",\"YcCLwitFMAEJSnxAW\",\"NNE5HNRXAkmhrWgyQ\",\"w2HhxvSLmDhaGCAjE\",\"oBcs8GLX2ZFLXQy8y\",\"wniy5aKNkwYTNAkrz\",\"HF28xZKSLM9wEuqNg\",\"Yxxftfc3sLWrLFkTd\",\"hueNJXvGX8Ex6mZCv\",\"gXTAie79kiw28tx5u\",\"QRv96jmNaYsWkxQEG\",\"bBvhn46xMzKbMAZpm\",\"am8jWchNEhm7PsTv9\",\"g9FyJ8yeT9ic97Qp2\",\"DPi9QGLctq2y76KuE\",\"p8qqFdJ3FSk5x9z3G\",\"cjFSCiYCvdTPvsDTK\",\"QCvvnevRLhBY8XBJk\",\"J3upzLHuEwXH7Z2hx\",\"zZDaXBxMzTCBhNkgL\",\"dYPkStFnLvAMsHSzZ\",\"iS5BrkGLzJyPK7nKt\",\"FEYpu9RWysAgW3XnP\",\"9bQyb6rW7xfE4vgrR\",\"PXAcsKkssS2yLyDv2\",\"CTKmXtrqDYqJBnuy8\",\"KJCDwGkoXh8qtbbKr\",\"5XiuAqicKD4hBdu63\",\"kAkLAF9T5McSxXJCT\",\"cAP3n5NY64uoMwzRR\",\"7txFzDQ43vJ7qCY88\",\"DYDJTyGgKFnBRLm2r\",\"aKG88gRogT2AAGRFB\",\"zd9FLSzsGz3evKafy\",\"RGMbFMZXJr7DhcAJy\",\"dBzwBtRjZqB98DJeB\",\"Jqk2uJZZxEv5wZFze\",\"K3RacTvkWHLfzKF8i\",\"2H7qphwdz7PPoFKgc\",\"mh4FSvMYi6zprdMmz\",\"5hQnRWiKkhgKJXNMP\",\"brXqQwizFwowjs7sN\",\"eYfPWvZwnJQkHbSTK\",\"HqmxnQJM66Y57twhn\",\"As83XFL89deJfprRY\",\"5S9nX4rKsnCcnv4Cz\",\"KLgMMvi4MXTbW2X3X\",\"GGdmhAvxXhqhhibJN\",\"T2vhHPhRR96hRizq8\",\"rfyEkETeoS96QNH4e\",\"dLmepN3JWxhXMtyNK\",\"qAby4AWXmTNeusvg3\",\"sbJcFfQjQ59Wfg4Cd\",\"vhhv6HQyH4r9Q6d6n\",\"Ds7L5bksw2QRHjrKL\",\"PWgzeK859suojbrRx\",\"d8qtzoLB264iP8tdY\",\"bvmTE46bfcM4ogj34\",\"J5T8gZqiZXFuFDTQ7\",\"EfxwqhYdapX3dMQC2\",\"o4ixjQGSaYqA2JoM4\",\"dZzdZbg3QCAbqXuEw\",\"BaiCherbjQ2n7XXCn\",\"CHvzhtXnv8HTbPQ56\",\"eHcgvkTGsH7ZziqBo\",\"eMuCpJ2spXWkJjWNz\",\"5HCu9Ydd86QgHDRNP\",\"yr822PZmmiDDenxpB\",\"PC3pLs36zNzpRDSuE\",\"AJexRBN9cYQmqvYu6\",\"JhX7jvtpwNyxcc39m\",\"srJ34BaybkQh3qRkM\",\"qzXAMXsHZGT8o5hTA\",\"Afnps7TJQuS9sipMb\",\"2NDSt8HyP33cFRHsu\",\"T6iBEE2jp7f7iEF2P\",\"mvJBakQ35CWAnbbEZ\",\"yod5YhKtPqw2GfG9B\",\"buX4mCQhtXCfBjeno\",\"dzS6WBTMHyFEag6Fp\",\"BrTDhPJcACL2bsrpJ\",\"sHjfbGQGLHE6JR6qu\",\"vAh63eGRwkuJtoP8v\",\"suArq5BbSy7gD6xri\",\"d9LBRxvADNBB5QJMB\",\"8Ha7KAEkhZYav9fay\",\"mw9464S5dnenqzvpm\",\"4ZpaT4BHT9hAT8q6x\",\"2PufnQcsHsfymufX3\",\"4Lwjr34ypKNQNQCar\",\"syRNbbPdLCGXbH2Gy\",\"mxX4rH5ELYkdZ2Mbw\",\"Ncn7Qn2LbdsiJnfFk\",\"LfyKY4X5rTdGEuLfa\",\"9pzFiFK3ANLjQfnr2\",\"4TmgHkn5vqyHK3sYC\",\"3nied3n8KG8RSNixH\",\"YtzEMKvCXJZETkhY5\",\"Wi4H6ayKsNDWWQCG5\",\"mXXPMi2anfJi5whC9\",\"wrL4iX2CCSqDCCty3\"],\"total\":167,\"quality\":[5,5,4,5,3,4,4,3,5,5,5,5,5,5,5,5,4,5,5,5,5,4,5,5,4,5,5,5,5,5,5,5,5,4,5,5,5,5,5,5]},\"flags\":0},\"summary\":\"You have a dictionary with years 2015-2020 as keys and some albums released for each year as key values. Write a function that takes an album and returns the year in which it was released.\\n\\nExamples\\nrelease_year(\\\"Ode to Joy\\\") ➞ 2019\\n\\nrelease_year(\\\"Honeymoon\\\") ➞ 2015\\n\\nreleaseyear(\\\"Fakealbum\\\") ➞ \\\"Unknown\\\"\\n\\nNotes\\nAlbums dictionary is made for you.\\nIf the album is\",\"tags\":[\"data_structures\",\"language_fundamentals\"],\"timestamp\":{\"$date\":1597023560604},\"title\":\"Reverse Dictionary\",\"quality\":4.725,\"family\":[{\"_id\":\"ebf4Loe3LfQuqYrr6\",\"language\":\"javascript\"},{\"_id\":\"cv5vRuexCzi4hvxdd\",\"language\":\"python3\"}]}}"]