a["{\"msg\":\"result\",\"id\":\"770\",\"result\":{\"_id\":\"GiXejjZrExmeAPtp7\",\"author\":\"Francesco Di Viesto\",\"authorId\":\"zd9FLSzsGz3evKafy\",\"code\":\"def fifth():\\n\\t\",\"difficulty\":1.3564356435643565,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"GLJoSgAfDKSQd2YQC\",\"instructions\":\"Create a function (named fifth) that takes some  arguments and returns the type of the fifth argument. In case the arguments were less than 5, return `\\\"Not enough arguments\\\"`.\\n\\n### Examples\\n```\\nfifth(1, 2, 3, 4, 5) ➞ int\\n\\nfifth(\\\"a\\\", 2, 3, [1, 2, 3], \\\"five\\\") ➞ str\\n\\nfifth() ➞ \\\"Not enough arguments\\\"\\n```\\n\\n### Notes\\n- Don't get confused between zero-indexing and one-indexing.\\n- If you get stuck check the **Resources** tab.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(fifth('a',2,3,4,[5]),list)\\nTest.assert_equals(fifth('zero','one','two','three','four','five'),str)\\nTest.assert_equals(fifth(1,2,3,4,'5'),str)\\nTest.assert_equals(fifth(1,2,3,4,5),int)\\nTest.assert_equals(fifth(1,2,3),'Not enough arguments')\",\"language\":\"python3\",\"quality\":4.728971962616822,\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,3,2,2,0,2,0,1,2,0,1,0,1,1,0,2,1,0,1,2,2,5,2,2,1,0,1,3,1,0,0,1,0,0,2,2,2,2,1,0,2,2,2,0,1,1,2,2,2,3,2,1,2,2,0,1,0,2,2,2,0,1,2,1,2,1,1,1,1,0,1,2,2,2,0,1,1,2,1,1,1,0,2,1,2,2,2,1,0,2,2,2,1,0,2,0,2,1,3,2,0,2,1,2,3,1,2,1,2,2,2,2,2,0,1,5,4,1,2,1,2,1,1,0,1,1,1,1,1,2,1,1,1,2,1,1,2,2,2,1,1,2,2,1,0,2,1,2,1,0,2,2,1,2,2,2,1,2,2,0,0,2,3,2,2,2,1,0,2,1,1,1,0,2,2,2,2,0,2,0,1,1,0,2,1,0,1,1,0,0,1,2,1,2,1,0,2],\"quality\":[5,5,3,4,4,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,5,5,1,5,5,5,4,5,5,5,5,5,5,5,5,4,5,5,5,4,5,5,4,5,4,5,5,5,5,5,5,5,5,4,5,5,4,5,5,5,5,5,3,5,5,4,5,5,5,5,2,5,5,5,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],\"rators\":[\"zd9FLSzsGz3evKafy\",\"8PwfYqoDQFThzNtvf\",\"gJYuGdkXEWWmGRLzu\",\"J3upzLHuEwXH7Z2hx\",\"QRv96jmNaYsWkxQEG\",\"tAF9Gf6PiGogbZuWs\",\"aEm3Wvj2rFYRL8Lrb\",\"Yp7uvStL97cC9fKkY\",\"6xTu4r8NMczBFvmtz\",\"yjtdwc2AC4jA2RWtn\",\"gb9rvGus2Jv7bjZSs\",\"FEYpu9RWysAgW3XnP\",\"dBzwBtRjZqB98DJeB\",\"wRttWTM59y8m5mx7x\",\"5HCu9Ydd86QgHDRNP\",\"t5sZF4aR7a28Bm56W\",\"2EbDCCJJvCfKkbYia\",\"Jqk2uJZZxEv5wZFze\",\"yr822PZmmiDDenxpB\",\"cRoHBaA7HjePc8wb2\",\"Cybtjz3cF7RgoiqrN\",\"J5T8gZqiZXFuFDTQ7\",\"utTuvGdmu2sBHWBhQ\",\"oBcs8GLX2ZFLXQy8y\",\"8JyqsSbN2FJXPr3cw\",\"PXAcsKkssS2yLyDv2\",\"HF28xZKSLM9wEuqNg\",\"s5M5RvgqR9BhB9JoC\",\"cAP3n5NY64uoMwzRR\",\"d8qtzoLB264iP8tdY\",\"RGMbFMZXJr7DhcAJy\",\"gXTAie79kiw28tx5u\",\"DPi9QGLctq2y76KuE\",\"p8qqFdJ3FSk5x9z3G\",\"w2HhxvSLmDhaGCAjE\",\"hNtC6BTygkPYknybs\",\"rfyEkETeoS96QNH4e\",\"axdSNLZpiCDF8RS6n\",\"sHjfbGQGLHE6JR6qu\",\"C2AfMipCicfD58WJ9\",\"o4ixjQGSaYqA2JoM4\",\"NzbRqGWspQnWMoDrF\",\"vCxuabDxEv9YC3Szb\",\"Fk9kLwoG4Brf4KsKf\",\"3Qa9ai5N7PbQFcsi7\",\"wjc4iejpErBhxWwHo\",\"wjt5iyzrjjAxzMbdK\",\"REbXuiozZdcmS4iiJ\",\"8BFSTCnoe2QggN64c\",\"fSQSHjW3e72MrWxbD\",\"i5iePG5GqhJJ8HEoB\",\"pduNK68oazqQTtbLp\",\"7KsymxNN9S8ZG5oQe\",\"DqNQn9Jsxcu5HijKE\",\"PRCy9gHjEN2KKgukx\",\"JS3hNM3XXkxPdg3yk\",\"AJexRBN9cYQmqvYu6\",\"eMuCpJ2spXWkJjWNz\",\"xumt4h8jvh7o4xkhr\",\"buX4mCQhtXCfBjeno\",\"5prBnBm3YszWAYPTp\",\"iF4tdvn5sA9CM4T6T\",\"MfKe55snfKsdnDejs\",\"dNErCjyFobE5sn4Zh\",\"GGdmhAvxXhqhhibJN\",\"R4SjTgDnpigJYDLyL\",\"no46qNkTbNeHepe64\",\"eFh8z7sMmxkrFWZv9\",\"KDfmGkQoajgNwwAm3\",\"CQhaiZqQcP87YteSG\",\"iS5BrkGLzJyPK7nKt\",\"6P66oZKKgeb36q6dp\",\"BgQGXorPgFysSbvvL\",\"vkxXy4HA5zju68Pz5\",\"5hQnRWiKkhgKJXNMP\",\"Lg4t6SEWgtYz4u7Cj\",\"WdKdsgH9gXkKgCycx\",\"abCKW9EmBinFsr7KG\",\"ttAQuoHpCGacfBcoe\",\"K3RacTvkWHLfzKF8i\",\"oyKcm3zqdy8Ko5P5d\",\"p7js9trz2zk2RorCR\",\"EfxwqhYdapX3dMQC2\",\"5S9nX4rKsnCcnv4Cz\",\"HqmxnQJM66Y57twhn\",\"MXGuntvz3byrP6WJc\",\"YRAzEBJoLvSaiPtYx\",\"2H7qphwdz7PPoFKgc\",\"7N6c3Xu244bnQWjBs\",\"9ivvGvJGvtQfigQaZ\",\"gf7u4MKcGDFiijzK9\",\"gWebsnHK6P9vyeq72\",\"qAby4AWXmTNeusvg3\",\"kNrnnMxhFZztMTBAX\",\"sftR9DgM4jpwtxfAM\",\"B8n7KqbvEDjZzgj2D\",\"Ds7L5bksw2QRHjrKL\",\"euTB6YthAd9Mwfj2t\",\"srJ34BaybkQh3qRkM\",\"LPGPHgJc8MkvcEDBc\",\"Nb6LYPoQP6KJZt8mz\",\"nFbmNzMQ38TncmfQX\",\"EMDwtFCPyxjEEAwKY\",\"KJCDwGkoXh8qtbbKr\",\"JLQLosczQ5MquJoL8\",\"5HTSi5wQNAdLm57LB\",\"q9FfWNiMDKRiaCJ5j\",\"K6MfKMytoJJuSGewP\",\"yod5YhKtPqw2GfG9B\",\"BrTDhPJcACL2bsrpJ\",\"eYfPWvZwnJQkHbSTK\",\"2fxapKr8XGdNeaKi2\",\"N2wnZXkhDH86mgjQ8\",\"jL4y5fTJAMBjhZmko\",\"BdnE4RS5puoxo92mA\",\"Z8JgWJddZucj8Kp7y\",\"iYXdNw7tKcgA3QwBX\",\"kWfNDxZyXFJxaTd2S\",\"YA7SDhpgEtsqynvNL\",\"StNu7DPyTgEStZsMY\",\"vyXXRaCK8jXica5bf\",\"YmMgWhzhHhQLmGGgH\",\"di8ikzbLPSZKCDAAC\",\"dqwatKFAeGpjmf5dm\",\"Jzthnf66RxWAkMArt\",\"2HfNkb2SoqdyjKW3o\",\"bccs9koJxyQ9XNiLC\",\"dNMfvZPAYyFfj9eTy\",\"n2BRY9X8899dcG8Bw\",\"mPctfMYEsFDhbTikW\",\"7jL3ijPqP46GJ4cfJ\",\"y775Z4v5u29nD6hpC\",\"PTDFuxAzou7W6asWt\",\"oH5za8CuPrt4XyoKx\",\"YEMQNE333gAXhGE4c\",\"LFSASkxgw9hr3KqmC\",\"PtaiHYXnMwb2rWqQW\",\"zgoEhAyhrjnsSLPGw\",\"mHqghY3RKDaxrjJzw\",\"pPpmP7xeJzGgK362R\",\"TdNEA4FjoYevkQrwF\",\"BajWtLookqBgcwmyv\",\"cPhuRqExptFTTPpgM\",\"KBxTPknCRmB2b5y3i\",\"QNNfcKLz98qmmtNRE\",\"xFPM4HuY3mGAdMmsD\",\"4hbdSgMnhZC7C9mRv\",\"aAFKLxcnBD2ZrdDnJ\",\"65T3fe9EZJbjmT8Cg\",\"CHvzhtXnv8HTbPQ56\",\"jWbd7SYDzLPjc9EDh\",\"mDWNyaaQ9hvPCRzSd\",\"xsDyJstYoBZRS8pJH\",\"fBqQjriC4QEtFNxFe\",\"uouMMdEWBuLBWPbzr\",\"RhWecL96F9KJgrFwn\",\"NfMJuiBk6FN5Jc6ow\",\"CTKmXtrqDYqJBnuy8\",\"uGuS9YRXW2nj4p6zf\",\"q6QsMYNMpPNtmyTeW\",\"JhX7jvtpwNyxcc39m\",\"zwruFCmuHkwJTpYqg\",\"T2vhHPhRR96hRizq8\",\"kQH5b8MXJunh84Czq\",\"YcCLwitFMAEJSnxAW\",\"cR3ibTMxLyEdDFCHY\",\"Lkcku4D8wh449piQh\",\"aiy37pdgqNinQpTFQ\",\"noZDgMMXkcPCLN8Ye\",\"f5xd6EFHgPprS4Cib\",\"R3yirpWWQtKTGh35W\",\"hPX9tRBh5LnXsjHfu\",\"Cuy7McJ5y8BkXRRk9\",\"QSpAu8WEP62fg5rb6\",\"mPrWM9FxwdMPBDX7J\",\"sKfrD9gjCDHuqLzSk\",\"mJHfyitKgkSsp83qv\",\"nc7bRhkxgKyqusYe3\",\"XD5nmvKQchKezPXhy\",\"3cF6NXq3ZEwdkgSjb\",\"GMQM52abpXNgEBote\",\"rLMeCAzEE9Grp3yce\",\"AQSqD9oNv2uPfxZCR\",\"AFfw7cGg83uYk2Miy\",\"T6iBEE2jp7f7iEF2P\",\"4AoQy4B5fPs2KBinr\",\"ebR9m79RbNzm4cJsJ\",\"GTKsdeEihE636Le9i\",\"RoGGD5cpHb4ftdLDv\",\"gjiu8kLnHYxe4HoBN\",\"iojEnnY9FsMfYzp6f\",\"BJp2WkwLWGHHB5oQW\",\"Fb2wehA7QgTFWry2x\",\"sbJcFfQjQ59Wfg4Cd\",\"6daecm7mtqzp7mKso\",\"dYgxQgSzJNMnWzhhE\",\"yyo6YLQN2of6fxp49\",\"dJzNF59j2p8jWZxiQ\",\"22ApZ4qLm5tsj8PRb\",\"Wpn95NqWxncQrwNgz\",\"hzHsgwjark5sZCQ2c\",\"ey3CASd6Je5LEJzfB\",\"7txFzDQ43vJ7qCY88\",\"4iocshxRuzitdpEJz\",\"NrRa4TS6uZR9xuXRt\",\"66a9xX73nmTEuKs9k\",\"DfHHpvnubuFmeNky9\",\"eHcgvkTGsH7ZziqBo\",\"PC3pLs36zNzpRDSuE\",\"2PufnQcsHsfymufX3\",\"Cc2Cgj4MWXZxsTooC\",\"c2q7mY39z5JPEMCaM\",\"ghMkPtdFCpM6w8nax\",\"X4rzfxGgxx6CS7Bpz\",\"4Lwjr34ypKNQNQCar\",\"CKHKhvJcq9jNMqrmd\",\"5XiuAqicKD4hBdu63\",\"rgvAJFwfCeYoYnFTK\",\"mvJBakQ35CWAnbbEZ\",\"6qWDsbR4JYTkRnhPr\",\"yDKR3g2tk3ciDHBj9\",\"M2gFMJkocQSY6bsFR\",\"sKBGcRfEr6LrvG8A2\",\"AasGs8AeX9Lcb9xJn\",\"R6YxHWAiLgKwy5YvC\",\"rrSC943cCKNG48sH4\",\"wwMcJQRvf3X59Jyev\",\"w67KfQgZ6WAeY7K4Y\",\"3hNKapkfvbakK9yfZ\",\"KNDFSyYmXSrxBKjEJ\",\"qzXAMXsHZGT8o5hTA\",\"dsJkDZkun3Gj2Fhy4\",\"YBrrgYWJEi7aSKBo9\",\"pdRLQpmLyPiy5mGem\",\"dEk8rPf3kxPHT7q58\",\"75voXwdTmsg8YP4ja\",\"fKzJMR2LLbiRtGetj\",\"9pzFiFK3ANLjQfnr2\",\"4RY3zj9C2t8GGefhi\",\"MKT7khMBGXzA22ykf\",\"3ihjbMwtP9baunShp\",\"wcfairbiob9h8yiDB\",\"hR7GMiqGap4CzEWSy\",\"u5u2YpHXiNgzDNJdX\",\"LzEjkXshG62mMJTd7\",\"Afnps7TJQuS9sipMb\",\"2iFe3EHEH2YdhSKrs\",\"796v8eRqahP6wpLdL\",\"4TmgHkn5vqyHK3sYC\",\"jkbavR2ATFJcpmo8M\",\"T6Rm8mREPMZSftzrC\",\"DrTeBk3bpLqhsLS4g\",\"pQwhNKiCne4gEZgcn\",\"2FCRyJqwqzFTKSTgJ\",\"xdgy7nWSKCekXnaJM\",\"pkX7FLhHCrAm77WKH\",\"QWjsXnLaJ7xfL3Amq\",\"7ajSwbNMNp9ggPewT\",\"oig8ig9SE9RZa8ttL\",\"dYPkStFnLvAMsHSzZ\",\"BqcLmbfXzJLjvN5Ao\",\"d9LBRxvADNBB5QJMB\",\"hpT9yYe5R45poHrYR\",\"AMpQSjKsRqhCDyS2j\",\"dSd7wHgXGQeG5BQ2P\",\"rCrbqMiaGPgHYTNxu\",\"dzS6WBTMHyFEag6Fp\",\"TCvpT4EPb8qNssNB7\",\"3KkyQm77zsew58Dc2\",\"PytNZK9mNiRiZxPrm\",\"yAouD3PxzED8a4gap\",\"vAh63eGRwkuJtoP8v\",\"Qyfyyw6oC4EHAndzo\",\"B4y8aoyXJtskYPFEL\",\"mZ9MnhYdibpGBmf4j\",\"ctbThYbufFCYbRK4f\",\"8uiLiJcmWxWe6qw65\",\"qB6KSTYC6H2TQEQY6\",\"mw9464S5dnenqzvpm\",\"5QN8R22z43SrwoHDz\",\"quYcmxS33qHALzb4Z\",\"eW9R2SCoYnY8HBAdL\",\"Cg3LKtEAJpsrdWroG\",\"4ZpaT4BHT9hAT8q6x\",\"syRNbbPdLCGXbH2Gy\",\"XbxHXmh5ZmRN2gw3K\",\"mxX4rH5ELYkdZ2Mbw\",\"dj5AyG5fWP8FdsSmZ\",\"RGN3QTb5LXj4ZPPkj\",\"rDgKHd6ZSSpboiAj7\",\"gpGXTvjS2HrY9Skq5\",\"vAbK8sCfKyFC78HYg\",\"ruzwBPphPDRgLXdnP\",\"Wi4H6ayKsNDWWQCG5\",\"RfbjShbg8jmhyNtJh\",\"C9LKGu2g5hSijvDzA\",\"FiaTpm7ehfDv43wSG\",\"NHp9cXgWCyX6KqyMT\",\"BgZcBs3KWeYCRKChr\",\"2MjzJ7yxh3eT3xbng\",\"YXQvrgeiGzLd6cTW9\",\"E2hpke7mHxAWsw5t9\",\"GgQqni8TkbqEBGcsy\",\"vCeeMuYDbz3MB4vsk\"],\"total\":329},\"flags\":0},\"summary\":\"Create a function (named fifth) that takes some  arguments and returns the type of the fifth argument. In case the arguments were less than 5, return \\\"Not enough arguments\\\".\\n\\nExamples\\nfifth(1, 2, 3, 4, 5) ➞ int\\n\\nfifth(\\\"a\\\", 2, 3, [1, 2, 3], \\\"five\\\") ➞ str\\n\\nfifth() ➞ \\\"Not enough arguments\\\"\\n\\nNotes\\nDon't get confused between zero-indexing and one-indexing.\\nIf you g\",\"tags\":[\"language_fundamentals\",\"conditions\"],\"timestamp\":{\"$date\":1604783081763},\"title\":\"The Fifth Argument\",\"family\":[{\"_id\":\"ATFL4pNx3KTJzinAm\",\"language\":\"javascript\"},{\"_id\":\"GiXejjZrExmeAPtp7\",\"language\":\"python3\"},{\"_id\":\"7E7SXF4X3QECxjous\",\"language\":\"ruby\"}]}}"]