a["{\"msg\":\"result\",\"id\":\"2458\",\"result\":{\"_id\":\"LLieA2XafALFxXRT5\",\"author\":\"Luis Pereira\",\"authorId\":\"aEm3Wvj2rFYRL8Lrb\",\"code\":\"def min_bombs_needed(grid):\\n\\t\",\"difficulty\":4.5625,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"RC9a8msnNdA59mRKa\",\"instructions\":\"This is a direct sequel to [Chain Reaction (Part #2)](https://edabit.com/challenge/8tDW5gt4SAX2LKALJ),\\nwhich was an easier particular case of this challenge (my suggestion is to try that one first).\\n\\nAs in the previous part, you will be given a rectangular array representing a \\\"map\\\" with three types of spaces:\\n- \\\"+\\\" bombs: when activated, their explosion activates any bombs directly above, below, left, or right of the \\\"+\\\" bomb.\\n- \\\"x\\\" bombs: when activated, their explosion activates any bombs placed in any of the four diagonal directions next to the \\\"x\\\" bomb.\\n- Empty spaces \\\"0\\\".\\n\\nThe goal is simple: given a map, return the minimum number of bombs that need to be set off for all bombs to be destroyed by the chain reaction.\\n\\nLet's look at some examples:\\n\\n```\\n[[\\\"+\\\", \\\"x\\\"]]\\n```\\n\\nFor the map above, the answer is  `1`: to explode both bombs one can pick the '+' bomb. However, note that picking the 'x' bomb does not work.\\n\\n```\\n[\\n  [\\\"+\\\", \\\"0\\\", \\\"x\\\"],\\n  [\\\"x\\\", \\\"x\\\", \\\"x\\\"]\\n]\\n```\\n\\nFor the map above, the answer is `2`: one can either pick the two 'x' bombs on the right column or the center and right 'x' bombs in the bottom row. No other choice will work.\\n\\n```\\n[\\n  [\\\"x\\\", \\\"x\\\", \\\"x\\\"],\\n  [\\\"x\\\", \\\"+\\\", \\\"x\\\"],\\n  [\\\"x\\\", \\\"x\\\", \\\"x\\\"]\\n]\\n```\\n\\nFor the map above, the answer is `4`: pick the four 'x' bombs in the corners. No other choice works.\\n\\n```\\n[\\n  [\\\"x\\\", \\\"x\\\", \\\"+\\\"],\\n  [\\\"+\\\", \\\"0\\\", \\\"+\\\"],\\n  [\\\"+\\\", \\\"x\\\", \\\"x\\\"]\\n]\\n```\\n\\nFor the map above, the answer is `1`: any bomb other than the \\\"x\\\" bombs in the top left and bottom right will work.\\n\\n### Examples\\n```\\nmin_bombs_needed([\\n  [\\\"+\\\", \\\"x\\\"]\\n]) ➞ 1\\n\\nmin_bombs_needed([\\n  [\\\"+\\\", \\\"0\\\", \\\"x\\\"],\\n  [\\\"x\\\", \\\"x\\\", \\\"x\\\"]\\n]) ➞ 2\\n\\nmin_bombs_needed([\\n  [\\\"x\\\", \\\"x\\\", \\\"x\\\"],\\n  [\\\"x\\\", \\\"+\\\", \\\"x\\\"],\\n  [\\\"x\\\", \\\"x\\\", \\\"x\\\"]\\n]) ➞ 4\\n\\nmin_bombs_needed([\\n  [\\\"x\\\", \\\"x\\\", \\\"+\\\"],\\n  [\\\"+\\\", \\\"0\\\", \\\"+\\\"],\\n  [\\\"+\\\", \\\"x\\\", \\\"x\\\"]\\n]) ➞ 1\\n```\\n\\n### Notes\\n- Note that both \\\"+\\\" and \\\"x\\\" bombs have an \\\"explosion range\\\" of 1.\\n- Many strategies that worked for part #2 will fail in this one. See the **Comments** for some hints on how to approach this.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(min_bombs_needed([['+', 'x']]), 1)\\nTest.assert_equals(min_bombs_needed([['x', '+']]), 1)\\nTest.assert_equals(min_bombs_needed([['+', 'x', '+']]), 2)\\nTest.assert_equals(min_bombs_needed([['x', '+', 'x']]), 1)\\n\\nTest.assert_equals(min_bombs_needed(\\n[['+', 'x'],\\n ['x', 'x']])\\n, 1)\\n\\nTest.assert_equals(min_bombs_needed(\\n[['x', 'x'],\\n ['x', 'x']])\\n, 2)\\n\\nTest.assert_equals(min_bombs_needed(\\n[['+', 'x'],\\n ['x', '+']])\\n, 2)\\n\\nTest.assert_equals(min_bombs_needed(\\n[['x', '+'],\\n ['+', 'x']])\\n, 2)\\n\\nTest.assert_equals(min_bombs_needed(\\n[['+', '0', 'x'],\\n ['x', 'x', 'x']])\\n, 2)\\n\\nTest.assert_equals(min_bombs_needed(\\n[['+', '0', '+'],\\n ['+', 'x', '+'],\\n ['+', '0', '+']])\\n, 1)\\n\\nTest.assert_equals(min_bombs_needed(\\n[['x', '0', 'x'],\\n ['x', '+', 'x'],\\n ['x', '0', 'x']])\\n, 4)\\n\\nTest.assert_equals(min_bombs_needed(\\n[['x', '0', 'x'],\\n ['x', 'x', 'x'],\\n ['x', '0', 'x']])\\n, 3)\\n\\nTest.assert_equals(min_bombs_needed(\\n[['x', '0', 'x'],\\n ['+', 'x', '+'],\\n ['x', '0', 'x']])\\n, 2)\\n\\nTest.assert_equals(min_bombs_needed(\\n[['x', 'x', 'x'],\\n ['x', '+', 'x'],\\n ['x', 'x', 'x']])\\n, 4)\\n\\nTest.assert_equals(min_bombs_needed(\\n[['+', 'x', '+'],\\n ['x', '+', 'x'],\\n ['+', 'x', '+']])\\n, 5)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,5,5,5,5,4,5,3,5,4,2,5],\"rators\":[\"aEm3Wvj2rFYRL8Lrb\",\"8PwfYqoDQFThzNtvf\",\"aCNWav8S8Try9RkC6\",\"bJaPCBx63YxdJAuTS\",\"fznzd3qnvtbFkkizz\",\"vTfyrr4pGddp8rbXc\",\"W5TajitmCyxz87zAC\",\"mDWNyaaQ9hvPCRzSd\",\"eHcgvkTGsH7ZziqBo\",\"yjtdwc2AC4jA2RWtn\",\"iS5BrkGLzJyPK7nKt\"],\"total\":11,\"quality\":[]},\"flags\":0},\"summary\":\"This is a direct sequel to Chain Reaction (Part #2),\\nwhich was an easier particular case of this challenge (my suggestion is to try that one first).\\n\\nAs in the previous part, you will be given a rectangular array representing a \\\"map\\\" with three types of spaces:\\n\\\"+\\\" bombs: when activated, their explosion activates any bombs directly above, below, left, or right\",\"tags\":[\"arrays\",\"games\"],\"timestamp\":{\"$date\":1586656698952},\"title\":\"Chain Reaction (Part #3)\",\"quality\":0,\"family\":[{\"_id\":\"4BjqqDh5fp8mLvxeN\",\"language\":\"cpp\"},{\"_id\":\"u9256ZwPXbg8Aj5Wp\",\"language\":\"javascript\"},{\"_id\":\"LLieA2XafALFxXRT5\",\"language\":\"python3\"},{\"_id\":\"iuWTBpZpyke2rQZuP\",\"language\":\"ruby\"}]}}"]