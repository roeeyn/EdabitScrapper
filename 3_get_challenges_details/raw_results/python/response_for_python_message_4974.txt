a["{\"msg\":\"result\",\"id\":\"1202\",\"result\":{\"_id\":\"kdhgEC2ECXAfoXWQP\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"def transpose_matrix(mtx):\\n\\t\",\"difficulty\":1.6715328467153285,\"familyId\":\"uo3HcBe6cw6EBFZgh\",\"instructions\":\"In this challenge, you have to obtain a sentence from the elements of a given matrix. In the matrix, each word of the sentence follows a columnar order from the top to the bottom, instead of the usual left-to-right order: it's time for **transposition**!\\n\\nGiven a matrix `mtx`, implement a function that returns the complete sentence as a string, with the words separated by a space between them.\\n\\n### Examples\\n```\\ntranspose_matrix([\\n  [\\\"Enter\\\"],\\n  [\\\"the\\\"],\\n  [\\\"Matrix!\\\"]\\n]) ➞ \\\"Enter the Matrix!\\\"\\n\\ntranspose_matrix([\\n  [\\\"The\\\", \\\"are\\\"],\\n  [\\\"columns\\\", \\\"rows.\\\"]\\n]) ➞ \\\"The columns are rows.\\\"\\n\\ntranspose_matrix([\\n  [\\\"You\\\", \\\"the\\\"],\\n  [\\\"must\\\", \\\"table\\\"],\\n  [\\\"transpose\\\", \\\"order.\\\"]\\n]) ➞ \\\"You must transpose the table order.\\\"\\n```\\n\\n### Notes\\n- All given matrices are regular, as to say that each column has the same length.\\n- Punctuation is already given, you just have to add the spaces in the returned string.\",\"isHidden\":false,\"lab\":\"Test.assert_equals(transpose_matrix([\\n\\t[\\\"Enter\\\"],\\n\\t[\\\"the\\\"],\\n\\t[\\\"Matrix.\\\"]\\n]), \\\"Enter the Matrix.\\\")\\n\\nTest.assert_equals(transpose_matrix([\\n\\t[\\\"Unfortunately,\\\", \\\"be\\\", \\\"is.\\\", \\\"see\\\"],\\n\\t[\\\"no\\\", \\\"told\\\", \\\"You'll\\\", \\\"it\\\"],\\n\\t[\\\"one\\\", \\\"what\\\", \\\"have\\\", \\\"for\\\"],\\n\\t[\\\"can\\\", \\\"Matrix\\\", \\\"to\\\", \\\"yourself.\\\"]\\n]), \\\"Unfortunately, no one can be told what Matrix is. You'll have to see it for yourself.\\\")\\n\\nTest.assert_equals(transpose_matrix([\\n\\t[\\\"Matrix\\\", \\\"that\\\"],\\n\\t[\\\"is\\\", \\\"system\\\"],\\n\\t[\\\"a\\\", \\\"is\\\"],\\n\\t[\\\"system\\\", \\\"our\\\"],\\n\\t[\\\"Neo,\\\", \\\"enemy.\\\"]\\n]), \\\"Matrix is a system Neo, that system is our enemy.\\\")\\n\\nTest.assert_equals(transpose_matrix([\\n\\t[\\\"If\\\", \\\"killed\\\", \\\"you\\\"],\\n\\t[\\\"you\\\", \\\"in\\\", \\\"die\\\"],\\n\\t[\\\"are\\\", \\\"Matrix\\\", \\\"here?\\\"]\\n]), \\\"If you are killed in Matrix you die here?\\\")\\n\\nTest.assert_equals(transpose_matrix([\\n\\t[\\\"As\\\", \\\"human\\\"],\\n\\t[\\\"long\\\", \\\"race\\\"],\\n\\t[\\\"as\\\", \\\"will\\\"],\\n\\t[\\\"Matrix\\\", \\\"never\\\"],\\n\\t[\\\"exists,\\\", \\\"be\\\"],\\n\\t[\\\"the\\\", \\\"free.\\\"]\\n]), \\\"As long as Matrix exists, the human race will never be free.\\\")\",\"language\":\"python3\",\"summary\":\"In this challenge, you have to obtain a sentence from the elements of a given matrix. In the matrix, each word of the sentence follows a columnar order from the top to the bottom, instead of the usual left-to-right order: it's time for transposition!\\n\\nGiven a matrix mtx, implement a function that returns the complete sentence as a string, with the words separa\",\"tags\":[\"arrays\"],\"timestamp\":{\"$date\":1574022184609},\"title\":\"Enter the Matrix\",\"stats\":{\"completed\":{\"total\":162,\"ratings\":[1,1,1,1,1,2,2,3,0,1,1,0,1,2,2,2,2,3,2,2,2,2,2,2,2,0,1,3,1,2,2,2,2,2,2,0,2,2,2,1,1,1,3,3,2,2,3,2,2,0,2,2,2,2,2,2,2,1,2,0,2,1,2,0,0,2,2,1,2,2,2,2,2,0,3,0,2,2,3,2,2,1,0,2,2,2,2,2,1,1,0,2,2,3,2,2,1,2,2,0,2,2,2,1,2,2,2,2,1,3,2,2,4,1,2,2,2,1,5,3,1,0,2,3,0,1,1,1,1,2,1,1,2,2,2,1,2],\"rators\":[\"bLQYFBhBthDLQE3LN\",\"N2wnZXkhDH86mgjQ8\",\"qJZsi5rhRnWA38FbA\",\"HqmxnQJM66Y57twhn\",\"3SKmXhcLPPkmQhjip\",\"qxB9bnow4EXPHwsPj\",\"M8dQuMrEpP8Hc3tHN\",\"3c9iCs4DiWNpChoZf\",\"gb9rvGus2Jv7bjZSs\",\"JEAi9mG3vvBomJ3Yu\",\"CEd9tLdXeDeNHSzys\",\"eebeY4dPvLYcmzy2v\",\"aHY44nrovcknWN63K\",\"fAoLuqbGvHn4w2PHf\",\"Nj6FwgBtAXsaQwsM2\",\"HQxp7NcdvF92G7bYS\",\"tAF9Gf6PiGogbZuWs\",\"XKi8iZXBCHCaebSHh\",\"8JyqsSbN2FJXPr3cw\",\"2fxapKr8XGdNeaKi2\",\"otXtuQygbcYATMZoP\",\"DLai9DxpZN6p5TPRX\",\"SKabuq5XuhXBugKBa\",\"uSh3aNxzD28jBuhxa\",\"K96FwtfDDN5WM4Bb7\",\"sKfrD9gjCDHuqLzSk\",\"PSrcg6fy835R4c5CW\",\"kQH5b8MXJunh84Czq\",\"3LiSLdtN58n46NEqg\",\"MXHMyhxS4P9wJewwo\",\"Yb4nqwm86Cgueg9d4\",\"sW4cynRBQNtTuWzFz\",\"u5u2YpHXiNgzDNJdX\",\"ahWFxnaxt9bXSA4f3\",\"nzx4uAPg3hCceyFPE\",\"C4QntmkYtB89GNtpd\",\"Jqk2uJZZxEv5wZFze\",\"6ShafRStcvew4GfCh\",\"gMJhLdyw3tH7L96X2\",\"4tgBydK887PitgAoi\",\"Xj6R2zqhgumffQCAN\",\"pDvFWMCD9fQwoBPcu\",\"PTcm3qFvxvLnaKttM\",\"p3dsCFdWGzWGhFrSQ\",\"ab7BsQuhDo3QgE6bh\",\"K3RacTvkWHLfzKF8i\",\"BeFnbPbMnAM2SjBdZ\",\"2innwjWqxJHo4eRGh\",\"Yp7uvStL97cC9fKkY\",\"AasGs8AeX9Lcb9xJn\",\"PXAcsKkssS2yLyDv2\",\"4CFzv558qbGcpQwc4\",\"s5M5RvgqR9BhB9JoC\",\"v3fjGuc7Pq4yjFygS\",\"Z85ajWfZ4jDPkbvR4\",\"C9LKGu2g5hSijvDzA\",\"cR3ibTMxLyEdDFCHY\",\"vLrq4dEDMM2wd68Dc\",\"v9KtC8YLbMWmXiW2H\",\"dHZqT6h4JMwk5fPC8\",\"9Ly8afdtofp8DXzrt\",\"mxX4rH5ELYkdZ2Mbw\",\"yZvzB3qFb8pkHy4dg\",\"jNvegJWCk5HCtEMbK\",\"ZNnsMeNkdDhHjSrZb\",\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\",\"hnyhBFWwNCz9mDfSi\",\"2QGRoQn2dRq3scu7k\",\"gJYuGdkXEWWmGRLzu\",\"HF28xZKSLM9wEuqNg\",\"DEDniTrstQYGounXT\",\"KdNDysEsy2TW5QRJ2\",\"kYWb8BwpKwunQkxeX\",\"rgvAJFwfCeYoYnFTK\",\"9pzFiFK3ANLjQfnr2\",\"FxJxxwowtXYCaLaeD\",\"ahk2qiXKJA753wAJk\",\"a777e8chPvJkY3tKa\",\"F2ykFxhDEEkj6N5KE\",\"9dgvEreRDYRiwLmYv\",\"H9KZi2cjt4FwH7qog\",\"TR5aWdDKP6iaL6mGK\",\"4rwxLqLs2mNZNg8NB\",\"syRNbbPdLCGXbH2Gy\",\"eMuCpJ2spXWkJjWNz\",\"iojEnnY9FsMfYzp6f\",\"ZrKCkX7xxGGZzauFW\",\"ra7a6S3WLnLbXYq7Q\",\"H4abACFDH5t8CnnyH\",\"Pe8vWpDHRuH9nSGKW\",\"yjtdwc2AC4jA2RWtn\",\"LyaZoABZYGfJBw2RF\",\"tcn2oAsxPQDmCxGmg\",\"hRiMXDZNAzyPd5tpt\",\"YcCLwitFMAEJSnxAW\",\"n2BRY9X8899dcG8Bw\",\"R4SjTgDnpigJYDLyL\",\"NNE5HNRXAkmhrWgyQ\",\"oBcs8GLX2ZFLXQy8y\",\"mG8HqKiAQFTdRZthG\",\"tpxMgkGSHwBjS95Ta\",\"Ecg4m7srYGgZsb4Ck\",\"qD2LrwaDrSdiybLKY\",\"gXTAie79kiw28tx5u\",\"QRv96jmNaYsWkxQEG\",\"p8qqFdJ3FSk5x9z3G\",\"DPi9QGLctq2y76KuE\",\"J3upzLHuEwXH7Z2hx\",\"FEYpu9RWysAgW3XnP\",\"dYPkStFnLvAMsHSzZ\",\"iS5BrkGLzJyPK7nKt\",\"5XiuAqicKD4hBdu63\",\"cAP3n5NY64uoMwzRR\",\"RGMbFMZXJr7DhcAJy\",\"Ba7nXvxBcNaWdKb2Y\",\"dBzwBtRjZqB98DJeB\",\"zd9FLSzsGz3evKafy\",\"rfyEkETeoS96QNH4e\",\"5S9nX4rKsnCcnv4Cz\",\"eYfPWvZwnJQkHbSTK\",\"cZccqzRQ9GgjQF6Az\",\"GGdmhAvxXhqhhibJN\",\"KJCDwGkoXh8qtbbKr\",\"qAby4AWXmTNeusvg3\",\"JhX7jvtpwNyxcc39m\",\"Ds7L5bksw2QRHjrKL\",\"d8qtzoLB264iP8tdY\",\"J5T8gZqiZXFuFDTQ7\",\"AFfw7cGg83uYk2Miy\",\"qZQxPQ2kaNKAMesHT\",\"PC3pLs36zNzpRDSuE\",\"o4ixjQGSaYqA2JoM4\",\"CHvzhtXnv8HTbPQ56\",\"66a9xX73nmTEuKs9k\",\"mDWNyaaQ9hvPCRzSd\",\"srJ34BaybkQh3qRkM\",\"5HCu9Ydd86QgHDRNP\",\"yr822PZmmiDDenxpB\",\"AJexRBN9cYQmqvYu6\",\"buX4mCQhtXCfBjeno\",\"T6iBEE2jp7f7iEF2P\",\"mvJBakQ35CWAnbbEZ\",\"2qtde7moqrzm7B4Ht\",\"StNu7DPyTgEStZsMY\",\"yod5YhKtPqw2GfG9B\",\"Cy34THXNefcoyNNY4\",\"BrTDhPJcACL2bsrpJ\",\"dzS6WBTMHyFEag6Fp\",\"4Lwjr34ypKNQNQCar\",\"2PufnQcsHsfymufX3\",\"PWgzeK859suojbrRx\",\"3nied3n8KG8RSNixH\",\"MKT7khMBGXzA22ykf\"],\"quality\":[5,5,5,5,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"quality\":4.909090909090909,\"family\":[{\"_id\":\"HC6h6dT3xMg7qEk2S\",\"language\":\"cpp\"},{\"_id\":\"YGFhsF3veFwqKyp4x\",\"language\":\"java\"},{\"_id\":\"3mKNTsZ5f7b9hHTky\",\"language\":\"javascript\"},{\"_id\":\"kdhgEC2ECXAfoXWQP\",\"language\":\"python3\"},{\"_id\":\"QAYrydsMzoxNtgiMp\",\"language\":\"ruby\"}]}}"]