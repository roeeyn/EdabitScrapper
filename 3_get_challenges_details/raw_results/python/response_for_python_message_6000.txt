a["{\"msg\":\"result\",\"id\":\"1711\",\"result\":{\"_id\":\"u9nd9D3HYcLxNZr7x\",\"archived\":false,\"author\":\"hhqrk\",\"authorId\":\"6fJpRpAgiWD5zX9qB\",\"code\":\"def group_monotonic(a):\\n\\t\",\"difficulty\":2.1782178217821784,\"familyId\":\"9JyLR3rv5S9Hmafri\",\"instructions\":\"Create a function which returns the indices where the monotonicity of a 1-D list changes. If there are none, return an empty list. A monotonic list is one that is either non-increasing or non-decreasing.\\n\\n### Examples\\n```\\ngroup_monotonic([0, 1]) ➞ []\\n\\ngroup_monotonic([0, 2, 1]) ➞ [1]\\n\\ngroup_monotonic([0, 1, 1, 0]) ➞ [2]\\n```\\n\\n### Notes\\n- Trivially, all points and line-segments are monotonic (see example \\\\#1).\\n- Return the indices where each monotonic section stops, not where each new one begins: i.e. return the \\\"peaks\\\" of the triangles (see example \\\\#2).\\n- Monotonic lists are allowed to be constant (see example \\\\#3).\\n- You can expect positive and negative values in the list.\",\"lab\":\"lst = [\\n    [[], []],\\n    [[0], []],\\n    [[1], []],\\n    [[0, 1], []],\\n    [[1, 0], []],\\n    [[1, 1], []],\\n    [[0, 1, 2], []],\\n    [[2, 1, 0], []],\\n    [[0, 2, 1], [1]],\\n    [[1, 0, 2], [1]],\\n    [[0, 1, 1, 0], [2]],\\n    [[1, 2, 3, 4, 4, 4, 3, 2, 1], [5]],\\n    [[0, 6, 10, 9, 3, -3, -9, -10, -6, 0], [2, 7]]]\\nfor input, output in lst:\\n    Test.assert_equals(group_monotonic(input), output)\",\"language\":\"python3\",\"summary\":\"Create a function which returns the indices where the monotonicity of a 1-D list changes. If there are none, return an empty list. A monotonic list is one that is either non-increasing or non-decreasing.\\n\\nExamples\\ngroup_monotonic([0, 1]) ➞ []\\n\\ngroup_monotonic([0, 2, 1]) ➞ [1]\\n\\ngroup_monotonic([0, 1, 1, 0]) ➞ [2]\\n\\nNotes\\nTrivially, all points and line-segments a\",\"tags\":[\"algorithms\",\"math\"],\"timestamp\":{\"$date\":1494692595136},\"title\":\"Group Monotonicity\",\"stats\":{\"completed\":{\"total\":95,\"ratings\":[2,2,2,2,2,4,2,1,1,3,1,1,3,2,1,2,2,4,3,3,3,3,0,1,1,3,2,2,2,2,2,1,2,1,2,1,1,2,2,3,2,2,1,2,3,3,3,3,3,3,2,3,3,2,2,2,3,5,3,2,2,3,3,4,1,3,3,2,0,3,2,3,3,2,3,1,3,0,0,2,4,3,2,2,3,4,2,2,2,3,2,2,0,3,2,3,0,3,3,0,1],\"rators\":[\"6fJpRpAgiWD5zX9qB\",\"65dbBZynphj53nXqA\",\"hi7Hvtq2mJfkXEGF2\",\"v3LTSGvpkXAdu3r2Q\",\"MNNxtLjCPkedM7MFo\",\"CWTZqhLrZswDzDTQb\",\"yh7uB3NycmvCowCSv\",\"JzcuZQNK6GD4B4pwB\",\"fbNWxXTqZy2mXNbGJ\",\"5JLH29PSSii5bsAhm\",\"RtEdsmRHH4RwHHopp\",\"95vqAcqExYNBEmBfD\",\"xBqnMCkCDaDuqFia4\",\"YXr4KEtTuKn7SfPsp\",\"pu7CuLPebkd5NEfKw\",\"HK3RW4kr7acFSAyL4\",\"tuyDaJzFy78jxvhCY\",\"pGXXGXyDu6FGErkSo\",\"tzHQmfmDbNJgqbeLx\",\"iEMnJaXXfa6dzdQzb\",\"5JXnPbYC8RuBG6FkM\",\"qNK48yvocYbK2qDAC\",\"GRZzKCbeb4xKHFCrZ\",\"QjpzasKxy3xBakLzz\",\"mgJoduE8pStdjNmPD\",\"mqXfzC24CdThpCaGd\",\"m2iiZZHTpzHcEKJMn\",\"wPhd86JGzcCkkQdyy\",\"jDoFYBX4iQiTXFEdf\",\"AgBoEoyrNKReSz9uG\",\"tAF9Gf6PiGogbZuWs\",\"Qm7WibLuCP7hW3iXi\",\"T82JyZFPNz8maF8f8\",\"SK3kJggzuets9AFj6\",\"QgdwHjy4x6MCPwfh9\",\"xWN2EDdMDnG89QXjm\",\"M8jrv2FfpMQp9Qzpx\",\"RsX6W2ddWM8ajHzss\",\"uJ5A3zjLi9iN5eeXX\",\"7LWPxYbe6HKibjNd9\",\"n9PZCXcWTygjaDsXs\",\"zgoEhAyhrjnsSLPGw\",\"HhnABpXPHrEjpkhEy\",\"8JyqsSbN2FJXPr3cw\",\"6W2GSzrYjMD9ANBFY\",\"nydW2HwDGZuk8XaEL\",\"p6MPFLtmJ2z8EQT4Q\",\"Jqk2uJZZxEv5wZFze\",\"yZvzB3qFb8pkHy4dg\",\"T3ZAuoMrJjvZwN55B\",\"MXjxGML2X75x64vJo\",\"PFjMZGHNAPTkgd7tq\",\"gb9rvGus2Jv7bjZSs\",\"JKb5rhL6DKcCAypF9\",\"2fxapKr8XGdNeaKi2\",\"ab7BsQuhDo3QgE6bh\",\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\",\"mDWNyaaQ9hvPCRzSd\",\"AasGs8AeX9Lcb9xJn\",\"ZNnsMeNkdDhHjSrZb\",\"s5M5RvgqR9BhB9JoC\",\"Sj4iamMmNvxwWJBiF\",\"YRstQuthRkFeBiXug\",\"5aZnA8Br3u7Wf5ENg\",\"v9KtC8YLbMWmXiW2H\",\"HF28xZKSLM9wEuqNg\",\"gJYuGdkXEWWmGRLzu\",\"KZ2xddpM2f9JRaryB\",\"cR3ibTMxLyEdDFCHY\",\"yjtdwc2AC4jA2RWtn\",\"DEDniTrstQYGounXT\",\"zZDaXBxMzTCBhNkgL\",\"qD2LrwaDrSdiybLKY\",\"xn7uGNKeAwPEkP9oA\",\"iS5BrkGLzJyPK7nKt\",\"Yp7uvStL97cC9fKkY\",\"gXTAie79kiw28tx5u\",\"p8qqFdJ3FSk5x9z3G\",\"iojEnnY9FsMfYzp6f\",\"cAP3n5NY64uoMwzRR\",\"oBcs8GLX2ZFLXQy8y\",\"GTKsdeEihE636Le9i\",\"QRv96jmNaYsWkxQEG\",\"GGdmhAvxXhqhhibJN\",\"MpfytGFYF77emJ3cT\",\"nkH3HfJXLMNcBMM79\",\"buX4mCQhtXCfBjeno\",\"gKnWjDjwrJh7MK2df\",\"yod5YhKtPqw2GfG9B\",\"2PufnQcsHsfymufX3\",\"T6iBEE2jp7f7iEF2P\",\"8sNv5PTHa7XQ8bNqR\"],\"quality\":[4,4,5,4,5]},\"complaints\":{\"total\":1,\"reasons\":[[\"confusing\"]],\"skippers\":[\"6fJpRpAgiWD5zX9qB\",\"4XKiHaWaiAEkPDAM4\"]},\"instructions\":{\"score\":-24.9,\"voters\":[\"tzHQmfmDbNJgqbeLx\",\"QjpzasKxy3xBakLzz\",\"cDRHHZWbsAutswrnN\",\"YG776yzpLWoxa5GJs\"]},\"tests\":{\"score\":-6.6,\"voters\":[\"nydW2HwDGZuk8XaEL\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.4,\"family\":[{\"_id\":\"kQ5RDqeTP3otjuKEt\",\"language\":\"cpp\"},{\"_id\":\"RPfHDE8xNuDu8Te3F\",\"language\":\"javascript\"},{\"_id\":\"u9nd9D3HYcLxNZr7x\",\"language\":\"python3\"},{\"_id\":\"8yFgW8kwt64DYsNyo\",\"language\":\"ruby\"}]}}"]