a["{\"msg\":\"result\",\"id\":\"2176\",\"result\":{\"_id\":\"FnyAGdwgcH4whynjR\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"def get_subsets(lst, n):\\n\\t\",\"difficulty\":3.343283582089552,\"familyId\":\"g9DubpDpKgzqdcBRF\",\"instructions\":\"Create a function that returns all sublists in a list that sum to a particular value. Return the sublists in the following order:\\n\\n1. First by **ascending length**.\\n2. Second by comparing element-by-element, starting from the leftmost one. Put the list with the **smaller** element first in the pairwise comparison.\\n\\nThe following example will illustrate:\\n```\\nget_subsets([-3, -2, -1, 0, 1, 2, 3], 2)\\n[ # All the subsets below sum to 2.\\n  [2],\\n  [-1, 3],\\n  [0, 2], # Same length: -1 < 0, so [-1, 3] goes before [0, 2]\\n  [-3, 2, 3],\\n  [-2, 1, 3],\\n  [-1, 0, 3],\\n  [-1, 1, 2],\\n  [-3, 0, 2, 3],\\n  [-2, -1, 2, 3],\\n  [-2, 0, 1, 3], # Same length + same first element: -1 < 0, so [-2, -1, 2, 3] goes before [-2, 0, 1, 3]\\n  [-1, 0, 1, 2],\\n  [-3, -1, 1, 2, 3],\\n  [-2, -1, 0, 2, 3],\\n  [-3, -1, 0, 1, 2, 3]\\n]\\n```\\n\\n### Examples\\n```\\nget_subsets([-1, 0, 1, 2], 2) ➞ [[2], [0, 2], [-1, 1, 2], [-1, 0, 1, 2]]\\n\\nget_subsets([-1, 0, 1, 2], 3) ➞ [[1, 2], [0, 1, 2]]\\n\\nget_subsets([1, 2, 3, 4], 5) ➞ [[1, 4], [2, 3]]\\n\\nget_subsets([-1, 0, 1, 2], 4) ➞ []\\n```\\n\\n### Notes\\n- Lists will have unique numbers.\\n- Return an empty list if there does not a exist a subset whose numbers sum to that value (see fourth example).\",\"lab\":\"Test.assert_equals(get_subsets([-1, 0, 1, 2], 2), [[2], [0, 2], [-1, 1, 2], [-1, 0, 1, 2]])\\nTest.assert_equals(get_subsets([-1, 0, 1, 2], 3), [[1, 2], [0, 1, 2]])\\nTest.assert_equals(get_subsets([1, 2, 3, 4], 5), [[1, 4], [2, 3]])\\nTest.assert_equals(get_subsets([-1, 0, 1, 2], 4), [])\\nTest.assert_equals(get_subsets([1, 2, 3, 4, 5, 6], 6), [[6], [1, 5], [2, 4], [1, 2, 3]])\\nTest.assert_equals(get_subsets([-3, -2, -1, 0, 1, 2, 3], 2),\\n[[2], \\n[-1, 3], \\n[0, 2], \\n[-3, 2, 3], \\n[-2, 1, 3], \\n[-1, 0, 3],\\n[-1, 1, 2], \\n[-3, 0, 2, 3], \\n[-2, -1, 2, 3], \\n[-2, 0, 1, 3], \\n[-1, 0, 1, 2], \\n[-3, -1, 1, 2, 3], \\n[-2, -1, 0, 2, 3], \\n[-3, -1, 0, 1, 2, 3]])\",\"language\":\"python3\",\"summary\":\"Create a function that returns all sublists in a list that sum to a particular value. Return the sublists in the following order:\\n\\nFirst by ascending length.\\nSecond by comparing element-by-element, starting from the leftmost one. Put the list with the smaller element first in the pairwise comparison.\\n\\nThe following example will illustrate:\\nget_subsets([-3, -2,\",\"tags\":[\"arrays\",\"higher_order_functions\",\"sorting\"],\"timestamp\":{\"$date\":1553820721956},\"title\":\"All Subsets that Add to a Value\",\"stats\":{\"completed\":{\"total\":74,\"ratings\":[4,4,4,4,4,4,4,4,4,4,1,5,2,4,2,2,4,4,4,3,1,5,5,4,4,2,4,5,5,5,0,3,5,5,0,5,2,5,4,5,2,1,4,4,5,2,2,2,2,5,5,1,2,3,2,1,3,3,4,5,1,0,5,5,1,4,5],\"rators\":[\"mNMQvcxKSSvqqMYCH\",\"BSmc8xErynmuaXkcp\",\"W2RBjMJ9KQPg4tjNZ\",\"Jqk2uJZZxEv5wZFze\",\"8JyqsSbN2FJXPr3cw\",\"tAF9Gf6PiGogbZuWs\",\"T3ZAuoMrJjvZwN55B\",\"gb9rvGus2Jv7bjZSs\",\"yZvzB3qFb8pkHy4dg\",\"ab7BsQuhDo3QgE6bh\",\"nrA8Pacm3A6GqGzq4\",\"gACqch7nq2LNKufhP\",\"MXjxGML2X75x64vJo\",\"6W2GSzrYjMD9ANBFY\",\"AYaEkTWLMmfzpwejr\",\"BFNm9gacwba9KyLFW\",\"4rg9g6TKYZ8aifrYc\",\"qJZsi5rhRnWA38FbA\",\"HqmxnQJM66Y57twhn\",\"jDgJ2fdFS76TSorNc\",\"6niWwTvL2kcpBqArR\",\"FHSJnAYTbcsKFgeQa\",\"cMGTQmbpzJJdF53ij\",\"wT5gGgvjKc5wz59AQ\",\"de3DhFz9dW8vdPanZ\",\"fMR9RcfgPJWiLgx7k\",\"8PwfYqoDQFThzNtvf\",\"Lw8oRc5SERsuntXMo\",\"aCNWav8S8Try9RkC6\",\"SuJeLnhfR3smGu3WZ\",\"9uZpgAtSuPZ7W7DL6\",\"aEm3Wvj2rFYRL8Lrb\",\"DwetpbChQM4r6Gwah\",\"AasGs8AeX9Lcb9xJn\",\"mDWNyaaQ9hvPCRzSd\",\"Zhy5X7BZnqk8hacEw\",\"s5M5RvgqR9BhB9JoC\",\"5s4qhuRJijYaDNXva\",\"W5TajitmCyxz87zAC\",\"Ecg4m7srYGgZsb4Ck\",\"bJaPCBx63YxdJAuTS\",\"xn7uGNKeAwPEkP9oA\",\"fznzd3qnvtbFkkizz\",\"bNZN65S3GkReo8qNT\",\"6428wKHtwKkFdvBs5\",\"fSgCtTbtfBQBmGM2m\",\"4fhjJBvLBWh6QeSih\",\"h4x2jaMdj5aQZbW5g\",\"iS5BrkGLzJyPK7nKt\",\"eYfPWvZwnJQkHbSTK\",\"HF28xZKSLM9wEuqNg\",\"58M252WF7SPRinfBx\",\"5dHucvf2qBYyKim7X\",\"8sNv5PTHa7XQ8bNqR\",\"J23RcmzbdtBbPCTjT\",\"2PufnQcsHsfymufX3\",\"eHcgvkTGsH7ZziqBo\",\"J3upzLHuEwXH7Z2hx\",\"yjtdwc2AC4jA2RWtn\",\"gJYuGdkXEWWmGRLzu\",\"GMBC8aDPdFPwb4v2z\",\"QvEXmSEo3ANp3yPyH\",\"Sh7oCvsWeiAt6TYFx\",\"suArq5BbSy7gD6xri\",\"3R3gfdZkyekiBTt3u\",\"nQRzZKeDKuLRf9chX\",\"d84da2istdx3fzJhp\"],\"quality\":[5,5,5,5,4,5,5,5,5]},\"tests\":{\"score\":0,\"rators\":[\"mNMQvcxKSSvqqMYCH\"]},\"instructions\":{\"score\":0,\"rators\":[\"mNMQvcxKSSvqqMYCH\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.888888888888889,\"family\":[{\"_id\":\"hTQCFxFSgxAy7Hmdq\",\"language\":\"cpp\"},{\"_id\":\"5B5bqA9pFwCobWXMH\",\"language\":\"javascript\"},{\"_id\":\"FnyAGdwgcH4whynjR\",\"language\":\"python3\"},{\"_id\":\"pap7oBaXpX77ySCsn\",\"language\":\"ruby\"}]}}"]