a["{\"msg\":\"result\",\"id\":\"2448\",\"result\":{\"_id\":\"7fe6MAGJveyK2Fqao\",\"author\":\"Evgeny SH\",\"authorId\":\"8PwfYqoDQFThzNtvf\",\"code\":\"def split_fibonacci(s):\\n\\t\",\"difficulty\":4.5,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"TmFzwhET574NNmZP9\",\"instructions\":\"The function is given a string of digits. Make a list of numbers from these digits such that:\\n- The length of the list is at least three.\\n- All numbers put together make the original string. (Thus one can only cut the string without permutations).\\n- Starting from the third number, each number equal to the sum of two previous numbers, i.e. `lst[i - 2] + lst[i - 1] == lst[i]`\\n- A number cannot have a leading zero, unless this number is zero. (`0` - allowed, `01` - not allowed)\\n- Each number in the list is less than `2^31` (to make this challenge compatible with strongly-typed languages).\\n\\nFind the list of numbers that satisfy the above properties and return it. If a Fibonacci look-alike sequence cannot be found, return an empty list `[]`.\\n\\n### Examples\\n```\\nsplit_fibonacci(\\\"11235813\\\") ➞ [1, 1, 2, 3, 5, 8, 13]\\n\\nsplit_fibonacci(\\\"112358130\\\") ➞ []\\n\\nsplit_fibonacci(\\\"123456579\\\") ➞ [123, 456, 579]\\n\\nsplit_fibonacci(\\\"0000\\\") ➞ [0, 0, 0, 0]\\n```\\n\\n### Notes\\nMultiple solutions to some tests are possible. That is why there is a helper function in the _Tests_ window to check that the output list satisfies the requirements. This allows freedom to finding a sequence.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"from time import perf_counter\\ntic = perf_counter()\\n\\nTest.assert_equals(split_fibonacci(\\\"11235813\\\"), [1, 1, 2, 3, 5, 8, 13])\\nTest.assert_equals(split_fibonacci(\\\"112358130\\\"), [])\\nTest.assert_equals(split_fibonacci(\\\"123456579\\\"), [123, 456, 579])\\nTest.assert_equals(split_fibonacci(\\\"0000\\\"), [0, 0, 0, 0])\\n\\ndef check_split(lst, st):\\n    return (type(lst) == list and len(lst) > 2 and st == \\\"\\\".join(map(str, lst))\\n            and all(lst[i - 2] + lst[i - 1] == lst[i] < 2147483648\\n                    for i in range(2, len(lst))))\\n\\nlst_test = [\\n    (\\\"3471118\\\", True), (\\\"0123\\\", False), (\\\"1101111\\\", True),\\n    (\\\"539834657215398346785398346991079669377161950407626991734534318677529701785098211336528511\\\", False),\\n    (\\\"417420815174208193484163452262453871040871393665402264706273658371675923077949581449611550452755\\\", True),\\n    (\\\"3413536711071718\\\", False), (\\\"5535861119180299479778\\\", True), (\\\"5621\\\", False),\\n    (\\\"1141519345387140227367\\\", True), (\\\"336915243963102175\\\", False),\\n    (\\\"101101111212323535859381523246139846445104291687427303\\\", True),\\n    (\\\"11155166221387608995160325984201679911100017799287994659875397121995\\\", False),\\n    (\\\"17778155233388621100916302639426969081117718085292624734776609123956200565324521\\\", True),\\n    (\\\"421772193966151011162626374263690011163180632922647289765151238042003193241235244428485651373007222157235945799\\\", False),\\n    (\\\"6799166265431696112718232950477377231249620219327155293485649138583224232362815587047949862153690924867714023680651045110534131170445822757871344623295722020081168253031890273113058526144948799258007325391295612464209634500333919574675488302470888025993714368562407232488223443761738475160866207095984835918461593497989412578333907874171831897286750165805151092199770243\\\", False),\\n    (\\\"711182947761231993225218431364220735715778934915127244763960364079103682167761271443439204710647114985118604983010349487084778811961275204320633239333852825401852187403803141422324228826127370248451599074578969323029\\\", True),\\n    (\\\"224610162642681101782884667541220197431945168836213530218923542257314927361500502427863928366356221028458166408026925384356618704915611405774184549302986070448315634781763381264919722046683103311602825358285928669888741402817466\\\", True)\\n]\\n\\nfor t in lst_test:\\n    Test.assert_equals(check_split(split_fibonacci(t[0]), t[0]), t[1])\\n\\nprint('t = {:.6f}'.format(perf_counter() - tic))\",\"language\":\"python3\",\"quality\":0,\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,5,5,4,5,1],\"quality\":[],\"rators\":[\"8PwfYqoDQFThzNtvf\",\"vTfyrr4pGddp8rbXc\",\"eHcgvkTGsH7ZziqBo\",\"iS5BrkGLzJyPK7nKt\",\"8sNv5PTHa7XQ8bNqR\"],\"total\":7},\"flags\":0},\"summary\":\"The function is given a string of digits. Make a list of numbers from these digits such that:\\nThe length of the list is at least three.\\nAll numbers put together make the original string. (Thus one can only cut the string without permutations).\\nStarting from the third number, each number equal to the sum of two previous numbers, i.e. lst[i - 2] + lst[i - 1] ==\",\"tags\":[\"algorithms\",\"arrays\",\"numbers\",\"strings\"],\"timestamp\":{\"$date\":1614788181292},\"title\":\"Split the String into Fibonacci Type of Sequence\",\"family\":[{\"_id\":\"7fe6MAGJveyK2Fqao\",\"language\":\"python3\"}]}}"]