a["{\"msg\":\"result\",\"id\":\"1955\",\"result\":{\"_id\":\"hCAStny5sJwYP3evS\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"def is_early_bird(_range, n):\\n\\t\",\"difficulty\":2.7346938775510203,\"familyId\":\"uMWwGX4xQEfXHfn4X\",\"instructions\":\"A **Natural Number String Sequence** is a string containing all numbers, starting from 0, joined without spaces or other delimitators between them.\\n\\n```\\n\\\"01234567891011121314151617181920...\\\"\\n```\\n\\nIf you think of the sequence as a list, any number has a natural position index it occupies within a string long enough to contain it based on the real position in the numeric sequence. Looking at the example above, numbers from 0 to 9 are equals to their index position in the string; starting from 10, every number has a string natural index position different from itself (number 10 has a position of 10|11 because it has two digits, number 11 has a position of 12|13, and so on).\\n\\nWhen a number appears in the sequence **before** its natural position is an **Early Bird**. Suppose that we want to know if number 12 is an Early Bird in the above example sequence:\\n\\n```\\n01234567891011121314151617181920\\n_!!___________!!________________\\n```\\n\\nNatural position index of 12 is **|14, 15|** (after 11 and before 13 in the numeric sequence), but, if we look closely at the sequence, it appears before its natural position, at index **|1, 2|** (after 0 and before 3): 12 is then an Early Bird number (and the first to appear, also).\\n\\nYou are given two integers as parameters: `_range` is the ending number of the string sequence to generate, and `n` is the number to analyze. You must implement a function that returns a list that contains the position indexes of `n` (with every position index being a list in turn), and the string `\\\"Early Bird!\\\"` as the last element of the list only if `n` is an Early Bird. If `n` it's not an Early Bird and the returned list has to contain just the list with its natural position index.\\n\\n### Examples\\n```\\nis_early_bird(20, 14) ➞ [[18, 19]]\\n\\nis_early_bird(20, 12) ➞ [[1, 2], [14, 15], \\\"Early Bird!\\\"]\\n\\nis_early_bird(101, 101) ➞ [[10, 11, 12], [193, 194, 195], \\\"Early Bird!\\\"]\\n```\\n\\n### Notes\\n- The given number `n` will be greater than 9 for every case, as trivially every single-digit number appears at the same index in the numeric sequence and in the string sequence.\\n- The position indexes have to be in the order they appear in the string sequence.\\n- The string at the end of the list has to be present only if  `n` is an Early Bird.\\n- Check the **Resources** tab for more info on this sequence.\",\"isHidden\":false,\"lab\":\"Test.assert_equals(is_early_bird(20, 12), [[1, 2], [14, 15], 'Early Bird!'], \\\"Example in Instructions tab\\\")\\nTest.assert_equals(is_early_bird(20, 14), [[18, 19]])\\nTest.assert_equals(is_early_bird(101, 101), [[10, 11, 12], [193, 194, 195], 'Early Bird!'])\\nTest.assert_equals(is_early_bird(50, 34), [[3, 4], [58, 59], [77, 78], 'Early Bird!'])\\nTest.assert_equals(is_early_bird(212, 156), [[358, 359, 360]])\\nTest.assert_equals(is_early_bird(400, 240), [[610, 611, 612]])\\nTest.assert_equals(is_early_bird(900, 888), [[166, 167, 168], [2554, 2555, 2556], [2555, 2556, 2557], [2556, 2557, 2558], 'Early Bird!'])\\nTest.assert_equals(is_early_bird(1200, 745), [[1263, 1264, 1265], [1613, 1614, 1615], [2125, 2126, 2127], 'Early Bird!'])\\nTest.assert_equals(is_early_bird(2000, 666), [[122, 123, 124], [1888, 1889, 1890], [1889, 1890, 1891], [1890, 1891, 1892], [5555, 5556, 5557], 'Early Bird!'])\",\"language\":\"python3\",\"summary\":\"A Natural Number String Sequence is a string containing all numbers, starting from 0, joined without spaces or other delimitators between them.\\n\\n\\\"01234567891011121314151617181920...\\\"\\n\\nIf you think of the sequence as a list, any number has a natural position index it occupies within a string long enough to contain it based on the real position in the numeric se\",\"tags\":[\"numbers\",\"strings\",\"arrays\",\"regex\"],\"timestamp\":{\"$date\":1572633036393},\"title\":\"Early Birds\",\"stats\":{\"completed\":{\"total\":53,\"ratings\":[2,2,2,2,2,3,2,2,3,0,3,3,0,5,3,2,0,3,3,3,3,2,4,5,4,3,4,4,4,4,3,4,3,4,3,2,2,4,4,3,2,0,4,0,5,3,1,3,2],\"rators\":[\"tAF9Gf6PiGogbZuWs\",\"8JyqsSbN2FJXPr3cw\",\"gb9rvGus2Jv7bjZSs\",\"AYaEkTWLMmfzpwejr\",\"gMJhLdyw3tH7L96X2\",\"8S5YEwX455Ye4RtKT\",\"HqmxnQJM66Y57twhn\",\"otXtuQygbcYATMZoP\",\"EEjNW5t4XPGFLfq3k\",\"2fxapKr8XGdNeaKi2\",\"Jqk2uJZZxEv5wZFze\",\"ab7BsQuhDo3QgE6bh\",\"C4QntmkYtB89GNtpd\",\"yZvzB3qFb8pkHy4dg\",\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\",\"ZNnsMeNkdDhHjSrZb\",\"AasGs8AeX9Lcb9xJn\",\"a777e8chPvJkY3tKa\",\"n2BRY9X8899dcG8Bw\",\"KfXMEiCdZfCZGmjTt\",\"fznzd3qnvtbFkkizz\",\"X4Mcx3NcjzqxMh3mS\",\"Phd2FdPjo9BhBfvKh\",\"RErqK2yM94wYyD2hk\",\"YRstQuthRkFeBiXug\",\"aCNWav8S8Try9RkC6\",\"bJxaKHJqR82EWw8Su\",\"YLtspA8ec6ntcoMMf\",\"xn7uGNKeAwPEkP9oA\",\"SGhPxX5bHGL8zZqtt\",\"Ecg4m7srYGgZsb4Ck\",\"5dHucvf2qBYyKim7X\",\"yjtdwc2AC4jA2RWtn\",\"gJYuGdkXEWWmGRLzu\",\"8sNv5PTHa7XQ8bNqR\",\"iS5BrkGLzJyPK7nKt\",\"p8qqFdJ3FSk5x9z3G\",\"J3upzLHuEwXH7Z2hx\",\"iojEnnY9FsMfYzp6f\",\"JKb5rhL6DKcCAypF9\",\"MpfytGFYF77emJ3cT\",\"T6iBEE2jp7f7iEF2P\",\"2PufnQcsHsfymufX3\",\"d8qtzoLB264iP8tdY\",\"Yp7uvStL97cC9fKkY\",\"s5M5RvgqR9BhB9JoC\",\"yTtSCvGPyYna6JuRC\",\"DPi9QGLctq2y76KuE\",\"GTKsdeEihE636Le9i\"],\"quality\":[5,5,5,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":5,\"family\":[{\"_id\":\"oPcmocNP9BDwbN43L\",\"language\":\"javascript\"},{\"_id\":\"hCAStny5sJwYP3evS\",\"language\":\"python3\"},{\"_id\":\"FRoMcXz2WQZnsBfFL\",\"language\":\"ruby\"}]}}"]