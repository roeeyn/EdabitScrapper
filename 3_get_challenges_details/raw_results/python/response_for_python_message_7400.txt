a["{\"msg\":\"result\",\"id\":\"2406\",\"result\":{\"_id\":\"q9gmGpcurXFcso2kg\",\"author\":\"jota\",\"authorId\":\"vTfyrr4pGddp8rbXc\",\"code\":\"def mod(ran, key):\\n    loop = key - 6\\n    for i in range(ran):\\n        loop = ((loop+6)+6*i*(i+2)) % key\\n    return loop\",\"difficulty\":4.066666666666666,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"MpLJutitzsXmnGXde\",\"instructions\":\"Modify the inefficient code in the **Code** tab so it can pass the tests.\\n\\n### Examples\\n```\\nmod(7, 6) ➞ 0\\n\\nmod(8, 6) ➞ 0\\n\\nmod(9, 6) ➞ 0\\n\\nmod(32345453245, 25433) ➞ 10232\\n```\\n\\n### Notes\\n- The variables will be natural numbers.\\n- If the loop has to sweep the entire range **ran** it will overload.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"import time\\ntic = time.perf_counter()\\nTest.assert_equals(mod(7, 6), 0)\\nTest.assert_equals(mod(8, 6), 0)\\nTest.assert_equals(mod(9, 6) , 0)\\nTest.assert_equals(mod(32245, 253), 86)\\nTest.assert_equals(mod(423454323454235245234234734464324542, 54323454324524632), 47626492691369020)\\nTest.assert_equals(mod(6*10**30+1, 5432), 5384)\\nTest.assert_equals(mod(4323467234562436725347244534634267534565432456734565423452345236, 234), 72)\\nprint('t = {:.9f} sec'.format(time.perf_counter() - tic))\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,5,3,4,5,4,4,5,2,2,2],\"rators\":[\"vTfyrr4pGddp8rbXc\",\"aEm3Wvj2rFYRL8Lrb\",\"n2BRY9X8899dcG8Bw\",\"8PwfYqoDQFThzNtvf\",\"SGhPxX5bHGL8zZqtt\",\"eHcgvkTGsH7ZziqBo\",\"iS5BrkGLzJyPK7nKt\",\"hySpcNb4eGY7eGe79\",\"yjtdwc2AC4jA2RWtn\",\"38h6CDqeBePDiejwB\"],\"total\":10,\"quality\":[]},\"flags\":0},\"summary\":\"Modify the inefficient code in the Code tab so it can pass the tests.\\n\\nExamples\\nmod(7, 6) ➞ 0\\n\\nmod(8, 6) ➞ 0\\n\\nmod(9, 6) ➞ 0\\n\\nmod(32345453245, 25433) ➞ 10232\\n\\nNotes\\nThe variables will be natural numbers.\\nIf the loop has to sweep the entire range ran it will overload.\",\"tags\":[\"math\",\"algebra\",\"bugs\"],\"timestamp\":{\"$date\":1594837052208},\"title\":\"Modular Arithmetic (Part #4)\",\"quality\":0,\"family\":[{\"_id\":\"q9gmGpcurXFcso2kg\",\"language\":\"python3\"}]}}"]