a["{\"msg\":\"result\",\"id\":\"2103\",\"result\":{\"_id\":\"BcjsjPPmPEMQwB86Y\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"def get_vowel_substrings(txt):\\n\\t\\n\\ndef get_consonant_substrings(txt):\\n\\t\",\"difficulty\":2.9504950495049505,\"familyId\":\"pafeGjgnMBipGQsxc\",\"instructions\":\"Write two functions:\\n\\n1. One to retrieve all **unique** substrings that **start** and **end** with a **vowel**.\\n2. One to retrieve all **unique** substrings that **start** and **end** with a **consonant**.\\n\\nThe resulting array should be sorted in lexicographic ascending order (same order as a dictionary).\\n\\n### Examples\\n```\\nget_vowel_substrings(\\\"apple\\\")\\n➞ [\\\"a\\\", \\\"apple\\\", \\\"e\\\"]\\n\\nget_vowel_substrings(\\\"hmm\\\") ➞ []\\n\\nget_consonant_substrings(\\\"aviation\\\")\\n➞ [\\\"n\\\", \\\"t\\\", \\\"tion\\\", \\\"v\\\", \\\"viat\\\", \\\"viation\\\"]\\n\\nget_consonant_substrings(\\\"motor\\\")\\n➞ [\\\"m\\\", \\\"mot\\\", \\\"motor\\\", \\\"r\\\", \\\"t\\\", \\\"tor\\\"]\\n```\\n\\n### Notes\\n- Remember the output array should have **unique** values.\\n- The word itself counts as a potential substring.\\n- Exclude the empty string when outputting the array.\",\"lab\":\"Test.assert_equals(get_vowel_substrings(\\\"apple\\\"), [\\\"a\\\", \\\"apple\\\", \\\"e\\\"])\\nTest.assert_equals(get_vowel_substrings(\\\"carrot\\\"), [\\\"a\\\", \\\"arro\\\", \\\"o\\\"])\\nTest.assert_equals(get_vowel_substrings(\\\"aviation\\\"), [\\\"a\\\", \\\"ati\\\", \\\"atio\\\", \\\"avi\\\", \\\"avia\\\", \\\"aviati\\\", \\\"aviatio\\\", \\\"i\\\", \\\"ia\\\", \\\"iati\\\", \\\"iatio\\\", \\\"io\\\", \\\"o\\\"])\\nTest.assert_equals(get_vowel_substrings(\\\"motor\\\"), [\\\"o\\\", \\\"oto\\\"])\\nTest.assert_equals(get_vowel_substrings(\\\"rhyme\\\"), [\\\"e\\\"])\\nTest.assert_equals(get_vowel_substrings(\\\"hmm\\\"), [])\\n\\nTest.assert_equals(get_consonant_substrings(\\\"apple\\\"), [\\\"l\\\", \\\"p\\\", \\\"pl\\\", \\\"pp\\\", \\\"ppl\\\"])\\nTest.assert_equals(get_consonant_substrings(\\\"carrot\\\"), [\\\"c\\\", \\\"car\\\", \\\"carr\\\", \\\"carrot\\\", \\\"r\\\", \\\"rot\\\", \\\"rr\\\", \\\"rrot\\\", \\\"t\\\"])\\nTest.assert_equals(get_consonant_substrings(\\\"aviation\\\"), [\\\"n\\\", \\\"t\\\", \\\"tion\\\", \\\"v\\\", \\\"viat\\\", \\\"viation\\\"])\\nTest.assert_equals(get_consonant_substrings(\\\"motor\\\"), [\\\"m\\\", \\\"mot\\\", \\\"motor\\\", \\\"r\\\", \\\"t\\\", \\\"tor\\\"])\\nTest.assert_equals(get_consonant_substrings(\\\"rhyme\\\"), [\\\"h\\\", \\\"hy\\\", \\\"hym\\\", \\\"m\\\", \\\"r\\\", \\\"rh\\\", \\\"rhy\\\", \\\"rhym\\\", \\\"y\\\", \\\"ym\\\"])\\nTest.assert_equals(get_consonant_substrings(\\\"hmm\\\"), [\\\"h\\\", \\\"hm\\\", \\\"hmm\\\", \\\"m\\\", \\\"mm\\\"])\",\"language\":\"python3\",\"summary\":\"Write two functions:\\n\\nOne to retrieve all unique substrings that start and end with a vowel.\\nOne to retrieve all unique substrings that start and end with a consonant.\\n\\nThe resulting array should be sorted in lexicographic ascending order (same order as a dictionary).\\n\\nExamples\\ngetvowelsubstrings(\\\"apple\\\")\\n➞ [\\\"a\\\", \\\"apple\\\", \\\"e\\\"]\\n\\ngetvowelsubstrings(\\\"hmm\\\") ➞ []\",\"tags\":[\"strings\",\"loops\"],\"timestamp\":{\"$date\":1555985024302},\"title\":\"Substring Consonant-Vowel Groups\",\"stats\":{\"completed\":{\"total\":102,\"ratings\":[3,3,3,3,3,3,3,3,3,3,4,3,3,3,5,2,2,3,0,4,3,2,3,3,4,4,3,4,5,2,5,3,2,2,2,5,4,2,5,1,3,0,3,4,3,3,3,3,5,5,1,2,3,1,3,3,2,4,5,5,5,5,0,3,1,3,3,2,2,5,2,5,5,1,3,4,5,1,2,3,0,1,1,3,3,2,1,2,4,2,4,3,3,3,4,3,4,4,0,3,4],\"rators\":[\"mNMQvcxKSSvqqMYCH\",\"yZvzB3qFb8pkHy4dg\",\"8JyqsSbN2FJXPr3cw\",\"tAF9Gf6PiGogbZuWs\",\"FuojScruE4aktnfif\",\"pJtD3KZ94Jz29j6X5\",\"T3ZAuoMrJjvZwN55B\",\"FRcr2SRsNdmCSYJKe\",\"nrA8Pacm3A6GqGzq4\",\"WEsTtgWsLWeYmryTR\",\"MXjxGML2X75x64vJo\",\"AYaEkTWLMmfzpwejr\",\"gb9rvGus2Jv7bjZSs\",\"PFjMZGHNAPTkgd7tq\",\"BFNm9gacwba9KyLFW\",\"hsrNYf3WbexXJKhCq\",\"HqmxnQJM66Y57twhn\",\"xmEiF7KSH6Gaximmd\",\"LXWAWeLFMNaJjWwRF\",\"j2wWykfvtwxDGq6gb\",\"pDvFWMCD9fQwoBPcu\",\"PA6JbX3Y7AAhCdPCg\",\"fxgjP2DzARKtZrS8i\",\"insmKHXTNAQSmdSfj\",\"JqTdj55bF76zrL3SQ\",\"KrhNfD5CLAeSnFoQD\",\"Q4u5fSdoWfFiivkho\",\"nLpdvK7EcahCqNe8X\",\"ma8R2S2xd6uSkCR9P\",\"d6g2ucy6uSwAWhufQ\",\"CtECTBENRQP5YHFJS\",\"FJa6pFTqXKsbocTCu\",\"FHSJnAYTbcsKFgeQa\",\"eHcgvkTGsH7ZziqBo\",\"FgkYtHLxeD8pETJ8T\",\"2fxapKr8XGdNeaKi2\",\"Kg94pDSdZJ2wSkMcY\",\"rPvq3ZKT8KGQoBdLx\",\"bQfJzDj5RKvQ2ZpgA\",\"8PwfYqoDQFThzNtvf\",\"MNgYsvK6HfLRb8wAz\",\"FcYkLyobygEEwcga9\",\"BeFnbPbMnAM2SjBdZ\",\"vgTvCCxgvbCTDvaRT\",\"Jqk2uJZZxEv5wZFze\",\"DwetpbChQM4r6Gwah\",\"BW9rr7Ktufv4Fk9hv\",\"eq6bWgNCAXLkFj4tx\",\"wXSmXawhmdzcQMhLx\",\"SDBdkyoEb7RMJs4vW\",\"LzAr38NtigjfEfdzR\",\"ds9ZtbGhiyMqBjkvf\",\"N6c7FM5g7an4t6wTX\",\"fMR9RcfgPJWiLgx7k\",\"ybtFmqyLs8hAua2fY\",\"Du863uXQ6TKWszNmA\",\"qJZsi5rhRnWA38FbA\",\"xyHfEdcYBDznunq6n\",\"9uZpgAtSuPZ7W7DL6\",\"2gTwvgK652u97hzN4\",\"m2iiZZHTpzHcEKJMn\",\"ySRnygsLwGGsmZhfa\",\"jN6KB4KTvvgwoYN54\",\"7YD4zQL8AGKgPhTc5\",\"hAzy9apJgLWwRFGPJ\",\"6MWbxDS6jMhQ7d3ZS\",\"RxjsoBmCqZgg5Fq5a\",\"fngqDBFfuXC8bx5vy\",\"dNBGNMKLZam4bvHuZ\",\"3ECpdeExhBmkYXtba\",\"jaP8tfdxt4XbSGgo6\",\"sZDYNicocwXesSMXb\",\"nmXg7Hfeh3jMLHSsa\",\"aEm3Wvj2rFYRL8Lrb\",\"axC4Ye5xnfo9MEWj6\",\"AasGs8AeX9Lcb9xJn\",\"55RQznnuTGpsj3EXd\",\"s5M5RvgqR9BhB9JoC\",\"ZNnsMeNkdDhHjSrZb\",\"fznzd3qnvtbFkkizz\",\"Ecg4m7srYGgZsb4Ck\",\"gJYuGdkXEWWmGRLzu\",\"77dQgT3gTGWLcRPTk\",\"xn7uGNKeAwPEkP9oA\",\"K3RacTvkWHLfzKF8i\",\"HF28xZKSLM9wEuqNg\",\"DPi9QGLctq2y76KuE\",\"jL4y5fTJAMBjhZmko\",\"8sNv5PTHa7XQ8bNqR\",\"Z85ajWfZ4jDPkbvR4\",\"iS5BrkGLzJyPK7nKt\",\"J3upzLHuEwXH7Z2hx\",\"yjtdwc2AC4jA2RWtn\",\"aFYzioHvZPvPaunsg\",\"T6iBEE2jp7f7iEF2P\",\"2PufnQcsHsfymufX3\",\"buX4mCQhtXCfBjeno\"],\"quality\":[5,5,3,5,5]},\"tests\":{\"score\":0,\"rators\":[\"mNMQvcxKSSvqqMYCH\"]},\"instructions\":{\"score\":0,\"rators\":[\"mNMQvcxKSSvqqMYCH\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.6,\"family\":[{\"_id\":\"Dc7ojN3ryZACMfgng\",\"language\":\"cpp\"},{\"_id\":\"rgEiYWCq6Z3J7RNwq\",\"language\":\"javascript\"},{\"_id\":\"BcjsjPPmPEMQwB86Y\",\"language\":\"python3\"},{\"_id\":\"2PHF5gebnXyRPuvhf\",\"language\":\"ruby\"}]}}"]