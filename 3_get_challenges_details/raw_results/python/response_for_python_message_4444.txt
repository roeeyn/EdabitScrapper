a["{\"msg\":\"result\",\"id\":\"940\",\"result\":{\"_id\":\"LuBtaT9dwStbd7mnK\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def tallest_building_height(lst):\\n\\t\",\"difficulty\":1.4775641025641026,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"yL5BFcffBowkSu8pJ\",\"instructions\":\"Given a list of strings (depicting a skyline of *several buildings*), return *in meters* the **height of the tallest building**. *Each line* in the list represents **20m**.\\n\\n### Examples\\n```\\ntallest_building_height([\\n  \\\"            ##\\\",\\n  \\\"            ##\\\",\\n  \\\"            ##\\\",\\n  \\\"###   ###   ##\\\",\\n  \\\"###   ###   ###\\\",\\n  \\\"###   ###   ###\\\",\\n  \\\"###   ###   ###\\\"\\n]) ➞ \\\"140m\\\"\\n\\n# Tallest building is 7 characters\\n# 7 x 20m = 140m\\n\\ntallest_building_height([\\n  \\\"               \\\",\\n  \\\"               \\\",\\n  \\\"               \\\",\\n  \\\"       #    ###\\\",\\n  \\\"      # #   ###\\\",\\n  \\\"###   ###   ###\\\",\\n  \\\"###   ###   ###\\\"\\n]) ➞ \\\"80m\\\"\\n\\n# Tallest building is 4 characters\\n# 4 x 20m = 80m\\n\\ntallest_building_height([\\n  \\\"                              \\\",\\n  \\\"                         ###  \\\",\\n  \\\"                         ###  \\\",\\n  \\\"###                    #####  \\\",\\n  \\\"###      #             #####  \\\",\\n  \\\"###     ###            #####  \\\",\\n  \\\"######  ###            #######\\\",\\n  \\\"######  ######  ###    #######\\\",\\n  \\\"###################    #######\\\",\\n  \\\"###############################\\\",\\n  \\\"###############################\\\"\\n]) ➞ \\\"200m\\\"\\n\\n# Tallest building is 10 characters\\n# 10 x 20m = 200m\\n```\\n\\n### Notes\\n- There may be some **open sky** above buildings (can't *just* find the length of the list).\\n- There may be multiple tallest buildings (see example #2).\",\"isHidden\":false,\"lab\":\"Test.assert_equals(tallest_building_height([\\n\\t\\\"         \\\",\\n\\t\\\" ##      \\\",\\n\\t\\\" ##      \\\",\\n\\t\\\"###   ## \\\",\\n\\t\\\"###   ## \\\",\\n\\t\\\"###   ###\\\",\\n\\t\\\"###   ###\\\"\\n]), \\\"120m\\\")\\n\\nTest.assert_equals(tallest_building_height([\\n\\t\\\"            ##\\\",\\n\\t\\\"            ##\\\",\\n\\t\\\"            ##\\\",\\n\\t\\\"###   ###   ##\\\",\\n\\t\\\"###   ###   ###\\\",\\n\\t\\\"###   ###   ###\\\",\\n\\t\\\"###   ###   ###\\\"\\n]), \\\"140m\\\")\\n\\nTest.assert_equals(tallest_building_height([\\n\\t\\\"               \\\",\\n\\t\\\"               \\\",\\n\\t\\\"               \\\",\\n\\t\\\"       #    ###\\\",\\n\\t\\\"      # #   ###\\\",\\n\\t\\\"###   ###   ###\\\",\\n\\t\\\"###   ###   ###\\\"\\n]), \\\"80m\\\")\\n\\nTest.assert_equals(tallest_building_height([\\n\\t\\\"               \\\",\\n\\t\\\"               \\\",\\n\\t\\\"               \\\",\\n\\t\\\"               \\\",\\n\\t\\\"               \\\",\\n\\t\\\"###   ###   ###\\\",\\n\\t\\\"###   ###   ###\\\"\\n]), \\\"40m\\\")\\n\\nTest.assert_equals(tallest_building_height([\\n\\t\\\"                  \\\",\\n\\t\\\" #                \\\",\\n\\t\\\" #     #          \\\",\\n\\t\\\"###    #    ###   \\\",\\n\\t\\\"###   # #   ###   #\\\",\\n\\t\\\"###   ###   ###   #\\\",\\n\\t\\\"###   ###   ###   #\\\"\\n]), \\\"120m\\\")\\n\\nTest.assert_equals(tallest_building_height([\\n\\t\\\"          \\\",\\n\\t\\\"###   # # \\\",\\n\\t\\\"###   ### \\\",\\n\\t\\\"###   ### \\\"\\n]), \\\"60m\\\")\\n\\nTest.assert_equals(tallest_building_height([\\n\\t\\\"###                    #####  \\\",\\n\\t\\\"###      #             #####  \\\",\\n\\t\\\"###     ###            #####  \\\",\\n\\t\\\"######  ###            #######\\\",\\n\\t\\\"######  ######  ###    #######\\\",\\n\\t\\\"###################    #######\\\",\\n\\t\\\"###############################\\\",\\n\\t\\\"###############################\\\"\\n]), \\\"160m\\\")\\n\\nTest.assert_equals(tallest_building_height([\\n\\t\\\"                              \\\",\\n\\t\\\"                              \\\",\\n\\t\\\"                              \\\",\\n\\t\\\"###                    #####  \\\",\\n\\t\\\"###      #             #####  \\\",\\n\\t\\\"###     ###            #####  \\\",\\n\\t\\\"######  ###            #######\\\",\\n\\t\\\"######  ######  ###    #######\\\",\\n\\t\\\"###################    #######\\\",\\n\\t\\\"###############################\\\",\\n\\t\\\"###############################\\\"\\n]), \\\"160m\\\")\\n\\nTest.assert_equals(tallest_building_height([\\n\\t\\\"                              \\\",\\n\\t\\\"                         ###  \\\",\\n\\t\\\"                         ###  \\\",\\n\\t\\\"###                    #####  \\\",\\n\\t\\\"###      #             #####  \\\",\\n\\t\\\"###     ###            #####  \\\",\\n\\t\\\"######  ###            #######\\\",\\n\\t\\\"######  ######  ###    #######\\\",\\n\\t\\\"###################    #######\\\",\\n\\t\\\"###############################\\\",\\n\\t\\\"###############################\\\"\\n]), \\\"200m\\\")\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[1,1,1,1,1,1,1,1,2,2,1,0,2,1,1,1,2,5,1,1,2,2,0,1,2,3,1,1,0,1,5,0,2,0,1,2,1,0,2,1,1,0,2,2,1,2,2,1,2,1,1,2,2,1,2,1,1,1,2,1,2,2,2,2,0,1,1,1,1,2,2,1,2,1,2,0,1,2,2,1,2,0,1,3,2,2,1,3,2,2,0,0,2,2,2,0,0,2,2,1,2,1,5,0,2,0,0,0,2,2,3,2,2,1,1,0,1,2,1,1,2,1,3,0,1,2,2,3,1,2,2,3,2,1,2,0,2,2,2,2,0,2,2,2,1,0,0,2,2,1,2,2,0,3,2,0,0,1,2,2,3,1,2,2,0,2,0,2,2,2,2,1,1,1,2,2,1,1,2,4,2,2,0,1,1,2,2,1,1,1,1,2,2,2,0,2,1,2,1,2,2,2,2,1,1,2,1,0,2,3,2,3,2,0,2,1,1,2,2,0,2,2,4,2,3,1,2,2,2,0,1,0,2,2,1,1,1,2,2,1,1,2,2,2,2,2,2,2,2,0,0,1,3,0,0,2,2,2,2,0,1,1,2,2,1,2,2,2,0,2,1,2,0,2,2,2,2,0,2,2,0,0,2,2,2,2,1,0,2,2,3,2,2,2,1,2,1,2,1,1,2,2,2,1,1,2,1,1,2,2,1,2],\"rators\":[\"PXAcsKkssS2yLyDv2\",\"Hryvbd5DHrRZPSeM8\",\"Jqk2uJZZxEv5wZFze\",\"E9ttMPTkLkKG6nZrg\",\"6cqfmLeJatyfETsBb\",\"mybpojPXaZigaqsAD\",\"8JyqsSbN2FJXPr3cw\",\"gb9rvGus2Jv7bjZSs\",\"cRpaCxYRmGcN3Nsoj\",\"C4QntmkYtB89GNtpd\",\"Fk9kLwoG4Brf4KsKf\",\"2fxapKr8XGdNeaKi2\",\"JPtpz9cnJwtS8L7ui\",\"Ycj4iTJGFyvC4bXek\",\"aRqQ42J5zqCmBNd8w\",\"tAF9Gf6PiGogbZuWs\",\"hnyhBFWwNCz9mDfSi\",\"zd9FLSzsGz3evKafy\",\"u5u2YpHXiNgzDNJdX\",\"2innwjWqxJHo4eRGh\",\"XbxHXmh5ZmRN2gw3K\",\"HQxp7NcdvF92G7bYS\",\"jeuoearPPTcGPgXhf\",\"mxX4rH5ELYkdZ2Mbw\",\"CuY5BaTCcu7Mp9tDu\",\"H9KZi2cjt4FwH7qog\",\"HqmxnQJM66Y57twhn\",\"AasGs8AeX9Lcb9xJn\",\"v3fjGuc7Pq4yjFygS\",\"s5M5RvgqR9BhB9JoC\",\"KMrasP2mhRSPpZxjf\",\"Jg8ZSRXe3NoDMCqGu\",\"3ECpdeExhBmkYXtba\",\"yabtHTtycsWhcGBfD\",\"j2wcHGHmPCHbaQEye\",\"Z85ajWfZ4jDPkbvR4\",\"yKttxy9JGn5Jzwuj6\",\"aCNWav8S8Try9RkC6\",\"3SKmXhcLPPkmQhjip\",\"kiABXcJdQRk5ACRSR\",\"HtGKcY8GkKqHZCBMw\",\"4CFzv558qbGcpQwc4\",\"5nY48krepaT4a4QTN\",\"mZnXCe6hcnbv3DNvp\",\"cSaaAxqkYsPDXmMuf\",\"N2wnZXkhDH86mgjQ8\",\"LQxof8pGabGuWP7Gn\",\"tv6MeH8TqbT6nm7i7\",\"4tgBydK887PitgAoi\",\"LA2YneDcbtiSj5SH6\",\"ZWPDhGz4W4iJp3nbi\",\"BeFnbPbMnAM2SjBdZ\",\"boMXxa5zxP6yJHTje\",\"rJGeRSCjGzRuYfHZS\",\"9Ly8afdtofp8DXzrt\",\"xxxhm6QEkRpah4k94\",\"pMg2Zddm29zRGP6wg\",\"XKi8iZXBCHCaebSHh\",\"sz8ufn9i8zeiGWpAy\",\"k5mp7Hkg8w5rwiXpe\",\"sGHXrQzttpvt6bkPL\",\"JCNwgv5FH3Y4cKWhh\",\"5JFQgt6KFihmXfHKm\",\"X29Ekg7HjqHAYgCSM\",\"2ahpwvBErWo33rdBH\",\"23oi2a3vQwhtLEbSj\",\"Yp7uvStL97cC9fKkY\",\"WLFPvm65aHfgwQy7N\",\"8fhbZ2xkaSQB4Cb2L\",\"ZQSG2DF9TjmBGXPwu\",\"Lfut9z3euZ3odxFcH\",\"yZvzB3qFb8pkHy4dg\",\"knT3HJMb87iKpjqdM\",\"RZwfR4TR6fopHpdCD\",\"CMdKkCoZdTpucBeTP\",\"TCaTpxjzt2x9xAL86\",\"dLmepN3JWxhXMtyNK\",\"ovqQRfyvmEDypjrnC\",\"HPMiZMZ2WGu4FWaRH\",\"iF6X8FeXyfJHXCPQR\",\"myXAR5qDJsBaPnff2\",\"hQJZAKtGhbvtiHRn8\",\"jNvegJWCk5HCtEMbK\",\"dZGNAJXB24zNh2tsD\",\"PSrcg6fy835R4c5CW\",\"6abffx8jQDCf7kgvb\",\"dHZqT6h4JMwk5fPC8\",\"GJmKcqu7xppQyBaTt\",\"wx7BHoB5zSSQJpBXy\",\"C9LKGu2g5hSijvDzA\",\"cR3ibTMxLyEdDFCHY\",\"cuAeJFK5w7BJtnmux\",\"XYziYR4SmSobmYtRd\",\"8LfTheFzvicameoz9\",\"aEm3Wvj2rFYRL8Lrb\",\"vLrq4dEDMM2wd68Dc\",\"QSunJmCo4wjSH6hXk\",\"J5T8gZqiZXFuFDTQ7\",\"2iFe3EHEH2YdhSKrs\",\"ey3CASd6Je5LEJzfB\",\"v9KtC8YLbMWmXiW2H\",\"2QGRoQn2dRq3scu7k\",\"p8qqFdJ3FSk5x9z3G\",\"GM2X83qnuLXTHe5zA\",\"Qq2AEGMAtYKJeRRHm\",\"NfMJuiBk6FN5Jc6ow\",\"8PwfYqoDQFThzNtvf\",\"eLkj3Zb2DqiW4AEEh\",\"ZNnsMeNkdDhHjSrZb\",\"HF28xZKSLM9wEuqNg\",\"Cc2Cgj4MWXZxsTooC\",\"KRSKj7ikX2ytWFmod\",\"ZMJZNTJ2Ng8o8euQJ\",\"u7gHmt9xoCFdGsanE\",\"CEd9tLdXeDeNHSzys\",\"3Zceb8GudqAG3onG3\",\"daFMtxYmCNMQ9HNsJ\",\"uiEuENARwFpnNMfFs\",\"9uZpgAtSuPZ7W7DL6\",\"Rm56jv97BhcBx7mGj\",\"MKT7khMBGXzA22ykf\",\"qx7S9WMzk2tfSxapz\",\"YRstQuthRkFeBiXug\",\"9pzFiFK3ANLjQfnr2\",\"RmwYNt4oSLCLLd8a5\",\"DEDniTrstQYGounXT\",\"Nua6T3dBurBy3Qfg9\",\"kYWb8BwpKwunQkxeX\",\"KdNDysEsy2TW5QRJ2\",\"qPSEBYMMi9WJRr8SA\",\"M8dQuMrEpP8Hc3tHN\",\"b37Mu6yENyEfBQuCq\",\"D35uago3Zadzk3RhL\",\"iHMehMwgYQGhGAF72\",\"YcCLwitFMAEJSnxAW\",\"YFuN2JFXepWaW5RwW\",\"5cmvoGYHLNmT8n6jP\",\"Ro3ppqamSxiJv2wxP\",\"nzqwymsdwC7gxAmip\",\"FEYpu9RWysAgW3XnP\",\"4rwxLqLs2mNZNg8NB\",\"eMuCpJ2spXWkJjWNz\",\"DwetpbChQM4r6Gwah\",\"n2BRY9X8899dcG8Bw\",\"fWy4vgzSxpYcn5hdw\",\"di2hhADLx59Bj4ewM\",\"zbDjaYZcYccgJtr4z\",\"Xj6R2zqhgumffQCAN\",\"DrkR35NqnP9NDLbq6\",\"AF6LgdKhEdzwgRJom\",\"66a9xX73nmTEuKs9k\",\"ahk2qiXKJA753wAJk\",\"nfXGHENb5md7m355s\",\"Ne8mK9DDHG8TRkoxG\",\"R4SjTgDnpigJYDLyL\",\"nx3gu7spJkhJ35qQa\",\"XrqNzJ2FRG8HnGiR6\",\"mfsaETo7uA4x5vqLD\",\"QsK4h5bfyCFgoKgsM\",\"ijDkrdZLoL5Cfqco3\",\"YpYBWqTNrmp9azJa7\",\"LZQxLPgLGcGgLGmZc\",\"yr822PZmmiDDenxpB\",\"6SKDJwXpev4qPSzgM\",\"a777e8chPvJkY3tKa\",\"4yNLEwL2rsx4EE5Nt\",\"zAsNgFHdyiHeiHB8C\",\"NG8PWBSjsM8mMhQEq\",\"E8TMSMSamEbBtf9Lo\",\"DxxNN37iEz7b8t2nf\",\"So6PHm74mfJuY2WTs\",\"yoLy2DcMG3nZXNwv2\",\"jBR47vA7HwAZqp4QA\",\"ikkjHDqBHu6fT3vGL\",\"gkqp3EuvuiFXFAFtW\",\"ekQh3jzgGLsEMbKo3\",\"2ptN2mhjFwFcHyPZd\",\"n2ck2WGuM35vbZiFz\",\"3cF6NXq3ZEwdkgSjb\",\"WrfcNvRzFhxoyMHDh\",\"EPkSaWoZ77tPNjs36\",\"CeXAMDjPqrjtPpYJ3\",\"XyvFF7WmEuYmPpACF\",\"8AyD5aEXaoys93jPp\",\"o9w2rffsyzxaMmeMY\",\"AAmP8P75vbi89WGcj\",\"uKFwxoa9zmG8qHtmC\",\"H4abACFDH5t8CnnyH\",\"ZrKCkX7xxGGZzauFW\",\"W5TajitmCyxz87zAC\",\"8BFSTCnoe2QggN64c\",\"NNE5HNRXAkmhrWgyQ\",\"s2ZMtR9deh6Kia7pb\",\"syRNbbPdLCGXbH2Gy\",\"DoDsp3ets8frF9W3C\",\"8zWoQQvtYdg5yoweM\",\"TwKZ3835iFLog2RuQ\",\"iojEnnY9FsMfYzp6f\",\"KGiM2KiXnNJYfSzBF\",\"yNjkHfHESBAnCssPB\",\"Z6eqrAatHZjffx4s3\",\"bJxaKHJqR82EWw8Su\",\"hRiMXDZNAzyPd5tpt\",\"Pe8vWpDHRuH9nSGKW\",\"b9YQPLb9ZPSADdHXX\",\"xwEZk3bNZoNDPJYF5\",\"iS5BrkGLzJyPK7nKt\",\"JS3hNM3XXkxPdg3yk\",\"yjtdwc2AC4jA2RWtn\",\"XALJWMEBZsQ7Zf7ks\",\"ypGdjKLkswPZXo89K\",\"RnS7dwRYfRo2AxaT3\",\"YuchXW5T2A57Gv45E\",\"pnhbRg6xZftQC3xmQ\",\"Q3o5YXioTwptsppo5\",\"CPMZm7eDQ5k43KcmM\",\"sPeqQsnHg8wucDjH5\",\"8JfLEAhJcGRiu5oRj\",\"RAKCR7yrhfM3QLvsc\",\"cS4cwebSoorPDtyxr\",\"D9hyhxyEdQxDvgcuK\",\"ta5CrWnBCRusD2WMo\",\"oBcs8GLX2ZFLXQy8y\",\"6gS4E2C84vBYTYeDZ\",\"dzS6WBTMHyFEag6Fp\",\"RehJGBFS6CYiWdjZx\",\"u7i7WPM63n42r8R8o\",\"TPhfpB5tzQWSSn67n\",\"ji5f27FPz4wRRF6Ls\",\"Wv2vJnEj8ywNmARoF\",\"EMJ6uvBZkie429gdg\",\"kxKR2bx7DrNDPqJPz\",\"KLmLKaJPfsYxp42p2\",\"DYDJTyGgKFnBRLm2r\",\"k2Eo3wyfZZ6KxvKhN\",\"9CoqdidjM9KbeKnHY\",\"3nied3n8KG8RSNixH\",\"tpxMgkGSHwBjS95Ta\",\"mG8HqKiAQFTdRZthG\",\"gXTAie79kiw28tx5u\",\"qD2LrwaDrSdiybLKY\",\"7K2GEb5TZRtSpyyGS\",\"BiXxBRkJYKTaECqba\",\"b5zo7s6xrqWgQnPao\",\"6HgMANhu6WiGyXSGN\",\"ihWWwoyPrvHSZeQy3\",\"kNrnnMxhFZztMTBAX\",\"5HCu9Ydd86QgHDRNP\",\"g9FyJ8yeT9ic97Qp2\",\"QRv96jmNaYsWkxQEG\",\"NzbRqGWspQnWMoDrF\",\"KjcP8mgxWhMTJwTtG\",\"wRttWTM59y8m5mx7x\",\"DPi9QGLctq2y76KuE\",\"KTFxMsjaW4xgo5ajY\",\"dBzwBtRjZqB98DJeB\",\"axdSNLZpiCDF8RS6n\",\"dj5AyG5fWP8FdsSmZ\",\"J3upzLHuEwXH7Z2hx\",\"8fZxjQfuXw5HMSRJM\",\"74LAPLfQHfTuydDA2\",\"rrSC943cCKNG48sH4\",\"cAP3n5NY64uoMwzRR\",\"dYPkStFnLvAMsHSzZ\",\"d8qtzoLB264iP8tdY\",\"sHjfbGQGLHE6JR6qu\",\"6MjSiiBLPcvXbXcaZ\",\"spqXrjG3ZFa2j5uTR\",\"RGMbFMZXJr7DhcAJy\",\"KJCDwGkoXh8qtbbKr\",\"4jmcRWi7WtT5hzdP9\",\"WaJ3zN9ugsSy9uDu6\",\"5XiuAqicKD4hBdu63\",\"Xee5tZbXofdLqNTZP\",\"4fjSgcqhQQZM2ZFRP\",\"5hQnRWiKkhgKJXNMP\",\"C2AfMipCicfD58WJ9\",\"HuNF3xTBzmatyGSTm\",\"8N99kojRhfZXWNAk6\",\"o4ixjQGSaYqA2JoM4\",\"9FCeFzjPA4jrQ7oHW\",\"pduNK68oazqQTtbLp\",\"8we49y2cXuirbyGZg\",\"2H7qphwdz7PPoFKgc\",\"buX4mCQhtXCfBjeno\",\"eYfPWvZwnJQkHbSTK\",\"CTKmXtrqDYqJBnuy8\",\"srJ34BaybkQh3qRkM\",\"rcBdBt8oq5uwENDmj\",\"5S9nX4rKsnCcnv4Cz\",\"Afnps7TJQuS9sipMb\",\"tjDh259vrCGNQKS8c\",\"GGdmhAvxXhqhhibJN\",\"AJexRBN9cYQmqvYu6\",\"q2tzvkrLASvSjkek9\",\"yod5YhKtPqw2GfG9B\",\"5f6oSeq4r5WTXLdCQ\",\"Ds7L5bksw2QRHjrKL\",\"4RsakkyRXyYGwFxEa\",\"CHvzhtXnv8HTbPQ56\",\"JhX7jvtpwNyxcc39m\",\"qQQ4hCQpzitmHSkjS\",\"wjc4iejpErBhxWwHo\",\"qAby4AWXmTNeusvg3\",\"bvmTE46bfcM4ogj34\",\"T6iBEE2jp7f7iEF2P\",\"XD5nmvKQchKezPXhy\",\"Wpn95NqWxncQrwNgz\",\"PC3pLs36zNzpRDSuE\",\"i5iePG5GqhJJ8HEoB\",\"AFfw7cGg83uYk2Miy\",\"NQQzu4wyLWW9faWtK\",\"c2q7mY39z5JPEMCaM\",\"mvJBakQ35CWAnbbEZ\",\"M2gFMJkocQSY6bsFR\",\"2PufnQcsHsfymufX3\",\"X4rzfxGgxx6CS7Bpz\",\"K6MfKMytoJJuSGewP\",\"R6YxHWAiLgKwy5YvC\",\"RoGGD5cpHb4ftdLDv\",\"qzXAMXsHZGT8o5hTA\",\"tdfY4iBvD7oh2ufnN\",\"ZEmLth3xsiCJENKz4\",\"KH4Wr3YSvNddCSRJ2\",\"4Lwjr34ypKNQNQCar\",\"4TmgHkn5vqyHK3sYC\",\"nc7bRhkxgKyqusYe3\",\"T6Rm8mREPMZSftzrC\",\"d9LBRxvADNBB5QJMB\",\"hR7GMiqGap4CzEWSy\",\"yAouD3PxzED8a4gap\",\"suArq5BbSy7gD6xri\",\"uGuS9YRXW2nj4p6zf\",\"EC3vxzsccoFjfhf86\",\"hpT9yYe5R45poHrYR\",\"Qyfyyw6oC4EHAndzo\",\"rCrbqMiaGPgHYTNxu\",\"5QN8R22z43SrwoHDz\",\"pPpmP7xeJzGgK362R\",\"Wi4H6ayKsNDWWQCG5\",\"wrL4iX2CCSqDCCty3\",\"AQSqD9oNv2uPfxZCR\",\"FT2wBacm3JxrYmZDW\",\"E2hpke7mHxAWsw5t9\",\"8uiLiJcmWxWe6qw65\"],\"total\":375,\"quality\":[5,3,5,4,5,5,5,4,3,5,3,5,5,4,5,5,5,5,5,5,5,5,4,5,4,5,5,1,5,4,5,5,5,5,5,5,1,4]},\"flags\":0},\"summary\":\"Given a list of strings (depicting a skyline of several buildings), return in meters the height of the tallest building. Each line in the list represents 20m.\\n\\nExamples\\ntallestbuildingheight([\\n  \\\"            ##\\\",\\n  \\\"            ##\\\",\\n  \\\"            ##\\\",\\n  \\\"###   ###   ##\\\",\\n  \\\"###   ###   ###\\\",\\n  \\\"###   ###   ###\\\",\\n  \\\"###   ###   ###\\\"\\n]) ➞ \\\"140m\\\"\\n\\nTallest buildi\",\"tags\":[\"arrays\",\"algorithms\",\"strings\"],\"timestamp\":{\"$date\":1580752905239},\"title\":\"Height of the Tallest Building\",\"quality\":4.447368421052632,\"family\":[{\"_id\":\"Dkj3cvmzZiWtuZyNR\",\"language\":\"cpp\"},{\"_id\":\"rpTEWc6boQEgQB8D6\",\"language\":\"javascript\"},{\"_id\":\"NsRTPHigG4CPCST82\",\"language\":\"php\"},{\"_id\":\"LuBtaT9dwStbd7mnK\",\"language\":\"python3\"},{\"_id\":\"btYaWRMn4TSL56L8F\",\"language\":\"ruby\"}]}}"]