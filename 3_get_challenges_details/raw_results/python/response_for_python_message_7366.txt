a["{\"msg\":\"result\",\"id\":\"2389\",\"result\":{\"_id\":\"5hiiBo2RNRqCcRk2u\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"def extremes(lst):\\n\\t# your recursive solution here\\n\\treturn extremes(lst)\",\"difficulty\":3.9565217391304346,\"familyId\":\"LF57bBJMSSPMoQqyC\",\"instructions\":\"Write a function that extracts the upper and lower bounds of the elements in the list, value-wise, including its corresponding index, list-wise. Although these tasks are achievable with the use of some built-in Array functions, the purpose and intent of this challenge is for your to solve it recursively.\\n\\n**_Output Structure_**:\\n```\\n[{index: lower_bound}, {index: upper_bound}]\\n```\\n\\n### Examples\\n```\\nextremes([107, 19, -18, -79, 36, 23, 97]) ➞ [{3: -79}, {0: 107}]\\n\\nextremes([31, 7, 2, 13, 7, 9, 10, 13]) ➞ [{2: 2}, {0: 31}]\\n\\nextremes([4, 4, 4, 4, 4, 4]) ➞ \\\"No bounds!\\\"\\n```\\n\\n### Notes\\n- Return `\\\"No bounds!\\\"` if the lower bound happens to be equal to its supposed upper bound (because logically and numerically, lower and upper bound values cannot be equal, thus, their respective names (see above example).\\n- The use of `index()`, `max()` and `min()` are restricted.\\n- You can read more about recursion (see **Resources** tab) if you aren't familiar with it yet or haven't fully understood the concept before taking up this challenge.\",\"isHidden\":false,\"lab\":\"from inspect import getsource as src\\nfrom re import findall, search, M\\n\\ndef recursive(fn):\\n  try:\\n    s, n = src(fn), fn.__name__\\n    if n == '<lambda>': n = 'extremes'\\n    return len(findall(n, s, M)) > 1\\n  except OSError: return True\\n\\ndef no_min_max(fn):\\n  try: return not search('min|max|index', src(fn), M)\\n  except OSError: return True\\n\\nTest.assert_not_equals(recursive(extremes), False, 'Recursion is required!')\\nTest.assert_not_equals(no_min_max(extremes), False,\\n    'The use of built-in functions max() and min() are prohibited!')\\n\\n\\nnum_vectors, res_vectors = [\\n  [107, 19, -18, -79, 36, 23, 97],\\n  [31, 7, 2, 13, 7, 9, 10, 13],\\n  [4, 4, 4, 4, 4, 4],\\n  [-31, -7, -13, -7, -9, -13],\\n  [1, 3, 9, 5, -1, 7, 9, 49],\\n  [63, 77, 13, 75, 91, 113],\\n  [6, 6, 6, 6, 6, 6]], [\\n  [{3: -79}, {0: 107}],\\n  [{2: 2}, {0: 31}],\\n  \\\"No bounds!\\\",\\n  [{0: -31}, {1: -7}],\\n  [{4: -1}, {7: 49}],\\n  [{2: 13}, {5: 113}],\\n  \\\"No bounds!\\\"]\\nfor i, r in enumerate(num_vectors): Test.assert_equals(extremes(r), res_vectors[i])\",\"language\":\"python3\",\"summary\":\"Write a function that extracts the upper and lower bounds of the elements in the list, value-wise, including its corresponding index, list-wise. Although these tasks are achievable with the use of some built-in Array functions, the purpose and intent of this challenge is for your to solve it recursively.\\n\\nOutput Structure:\\n[{index: lowerbound}, {index: upperbo\",\"tags\":[\"recursion\",\"arrays\"],\"timestamp\":{\"$date\":1595701364572},\"title\":\"Recursion: Extreme Indices and Values\",\"stats\":{\"completed\":{\"total\":19,\"ratings\":[5,5,5,5,5,2,5,5,1,5,5,4,3,5,5,5,5,4,1,1,4,5,1],\"rators\":[\"aEm3Wvj2rFYRL8Lrb\",\"a777e8chPvJkY3tKa\",\"8PwfYqoDQFThzNtvf\",\"bJxaKHJqR82EWw8Su\",\"vTfyrr4pGddp8rbXc\",\"xn7uGNKeAwPEkP9oA\",\"DPi9QGLctq2y76KuE\",\"eHcgvkTGsH7ZziqBo\",\"XNmN6ztj36a7eChbD\",\"iojEnnY9FsMfYzp6f\",\"QRv96jmNaYsWkxQEG\",\"iS5BrkGLzJyPK7nKt\",\"c7uBxu2rgY77H5d79\",\"8sNv5PTHa7XQ8bNqR\",\"yjtdwc2AC4jA2RWtn\",\"tAF9Gf6PiGogbZuWs\",\"gJYuGdkXEWWmGRLzu\",\"T6iBEE2jp7f7iEF2P\"],\"quality\":[]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"quality\":0,\"family\":[{\"_id\":\"DHsH9FpFrt66ei7ku\",\"language\":\"javascript\"},{\"_id\":\"5hiiBo2RNRqCcRk2u\",\"language\":\"python3\"}]}}"]