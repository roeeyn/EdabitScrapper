a["{\"msg\":\"result\",\"id\":\"2069\",\"result\":{\"_id\":\"8tDW5gt4SAX2LKALJ\",\"author\":\"Luis Pereira\",\"authorId\":\"aEm3Wvj2rFYRL8Lrb\",\"code\":\"def min_bombs_needed(grid):\\n\\t\",\"difficulty\":2.896551724137931,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"isSRzrfaGoixoukLm\",\"instructions\":\"This is a sequel to [Chain Reaction (Part #1)](https://edabit.com/challenge/bf3QRDxH9Ns2SZWZw),\\nwith the same setup, but a different flavor.\\n\\nAs in the previous part, you will be given a rectangular array representing a \\\"map\\\" with three types of spaces:\\n- \\\"+\\\" bombs: when activated, their explosion activates any bombs directly above, below, left, or right of the \\\"+\\\" bomb.\\n- \\\"x\\\" bombs: when activated, their explosion activates any bombs placed in any of the four diagonal directions next to the \\\"x\\\" bomb.\\n- Empty spaces \\\"0\\\".\\n\\nThe goal is simple: **given a map, return the minimum number of bombs that need to be set off for all bombs to be destroyed by the chain reaction**.\\n\\nLet's look at some examples:\\n\\n```\\n[\\n  [\\\"+\\\", \\\"+\\\", \\\"+\\\", \\\"0\\\", \\\"+\\\", \\\"+\\\", \\\"+\\\"],\\n  [\\\"+\\\", \\\"+\\\", \\\"+\\\", \\\"0\\\", \\\"0\\\", \\\"+\\\", \\\"+\\\"]\\n]\\n```\\n\\nFor the map above, the answer is  `2`; to explode all bombs you just need to set off one \\\"+\\\" bomb in the right cluster and one in the left cluster.\\n\\n```\\n[\\n  [\\\"x\\\", \\\"0\\\", \\\"x\\\"],\\n  [\\\"x\\\", \\\"x\\\", \\\"x\\\"]\\n]\\n```\\n\\nFor the map above, the answer is `3`; clearly setting off the three bottom \\\"x\\\" bombs is enough, and no less than three bombs suffice.\\n\\n```\\n[\\n  [\\\"x\\\", \\\"x\\\", \\\"x\\\", \\\"0\\\", \\\"x\\\"],\\n  [\\\"x\\\", \\\"x\\\", \\\"x\\\", \\\"x\\\", \\\"x\\\"],\\n  [\\\"x\\\", \\\"x\\\", \\\"x\\\", \\\"0\\\", \\\"x\\\"]\\n]\\n```\\n\\nFor the map above, the answer is `3`; setting off the three rightmost bombs in the middle row will do the trick.\\n\\n### Examples\\n```\\nmin_bombs_needed([\\n  [\\\"+\\\", \\\"+\\\", \\\"+\\\", \\\"0\\\", \\\"+\\\", \\\"+\\\", \\\"+\\\"],\\n  [\\\"+\\\", \\\"+\\\", \\\"+\\\", \\\"0\\\", \\\"0\\\", \\\"+\\\", \\\"+\\\"]\\n]) ➞ 2\\n\\nmin_bombs_needed([\\n  [\\\"x\\\", \\\"0\\\", \\\"x\\\"],\\n  [\\\"x\\\", \\\"x\\\", \\\"x\\\"]\\n]) ➞ 3\\n\\nmin_bombs_needed([\\n  [\\\"x\\\", \\\"x\\\", \\\"x\\\", \\\"0\\\", \\\"x\\\"],\\n  [\\\"x\\\", \\\"x\\\", \\\"x\\\", \\\"x\\\", \\\"x\\\"],\\n  [\\\"x\\\", \\\"x\\\", \\\"x\\\", \\\"0\\\", \\\"x\\\"]\\n]) ➞ 3\\n```\\n\\n### Notes\\n- Note that both \\\"+\\\" and \\\"x\\\" bombs have an \\\"explosion range\\\" of 1.\\n- To limit the difficulty, in this challenge each map will have only \\\"+\\\" or only \\\"x\\\" bombs. The more challenging case of maps with both \\\"+\\\" and \\\"x\\\" bombs will be [part 3](https://edabit.com/challenge/LLieA2XafALFxXRT5)!\\n- Figuring out what to do is half the fun, but if you'd prefer to just handle the coding, a hint on to how to attack this challenge can be found in the comments.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(min_bombs_needed(\\n[['+', '0', '+'],\\n ['+', '+', '+']])\\n, 1)\\n\\nTest.assert_equals(min_bombs_needed(\\n[['+', '+', '+', '0', '+', '+', '+'],\\n ['+', '+', '+', '0', '0', '+', '+']])\\n, 2)\\n\\nTest.assert_equals(min_bombs_needed(\\n[['0', '+', '+', '0', '+'],\\n ['+', '0', '+', '+', '0'],\\n ['+', '+', '0', '0', '+']])\\n, 4)\\n\\nTest.assert_equals(min_bombs_needed(\\n[['+', '+', '0', '+', '+'],\\n ['+', '0', '+', '0', '+'],\\n ['0', '+', '+', '+', '0'],\\n ['+', '0', '+', '0', '+'],\\n ['+', '+', '0', '+', '+']])\\n, 5)\\n\\nTest.assert_equals(min_bombs_needed(\\n[['x', '0', 'x'],\\n ['x', 'x', 'x']])\\n, 3)\\n\\nTest.assert_equals(min_bombs_needed(\\n[['x', 'x', 'x', '0', 'x'],\\n ['x', 'x', 'x', 'x', 'x'],\\n ['x', 'x', 'x', '0', 'x']])\\n, 3)\\n\\nTest.assert_equals(min_bombs_needed(\\n[['x', 'x', 'x', '0', 'x'],\\n ['0', 'x', '0', 'x', 'x'],\\n ['x', 'x', 'x', '0', 'x']])\\n, 4)\\n\\nTest.assert_equals(min_bombs_needed(\\n[['x', '0', 'x', '0', 'x'],\\n ['0', 'x', 'x', 'x', '0'],\\n ['x', '0', 'x', '0', 'x'],\\n ['0', 'x', 'x', 'x', '0'],\\n ['x', '0', 'x', '0', 'x']])\\n, 3)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,1,4,4,2,3,4,0,2,4,4,2,2,3,5,5,0,3,5,3,1,3,5,2,2],\"rators\":[\"aEm3Wvj2rFYRL8Lrb\",\"8PwfYqoDQFThzNtvf\",\"aCNWav8S8Try9RkC6\",\"YsAz93yZw8KKPupKv\",\"8JyqsSbN2FJXPr3cw\",\"AasGs8AeX9Lcb9xJn\",\"XXjteBrdd4o55qTcL\",\"ZNnsMeNkdDhHjSrZb\",\"bJaPCBx63YxdJAuTS\",\"fznzd3qnvtbFkkizz\",\"3MybBtCNPcFHLMYmJ\",\"W5TajitmCyxz87zAC\",\"xn7uGNKeAwPEkP9oA\",\"6428wKHtwKkFdvBs5\",\"mDWNyaaQ9hvPCRzSd\",\"g6rd7oTEdiFxHQ6on\",\"h4x2jaMdj5aQZbW5g\",\"s5M5RvgqR9BhB9JoC\",\"eHcgvkTGsH7ZziqBo\",\"8sNv5PTHa7XQ8bNqR\",\"iS5BrkGLzJyPK7nKt\",\"gJYuGdkXEWWmGRLzu\",\"yjtdwc2AC4jA2RWtn\",\"gXTAie79kiw28tx5u\"],\"total\":26,\"quality\":[]},\"flags\":0},\"summary\":\"This is a sequel to Chain Reaction (Part #1),\\nwith the same setup, but a different flavor.\\n\\nAs in the previous part, you will be given a rectangular array representing a \\\"map\\\" with three types of spaces:\\n\\\"+\\\" bombs: when activated, their explosion activates any bombs directly above, below, left, or right of the \\\"+\\\" bomb.\\n\\\"x\\\" bombs: when activated, their explosi\",\"tags\":[\"arrays\",\"games\"],\"timestamp\":{\"$date\":1586228768412},\"title\":\"Chain Reaction (Part #2)\",\"quality\":0,\"family\":[{\"_id\":\"TbZMygSashyh5GmCw\",\"language\":\"cpp\"},{\"_id\":\"NnK7XKRomETbNszXx\",\"language\":\"javascript\"},{\"_id\":\"8tDW5gt4SAX2LKALJ\",\"language\":\"python3\"},{\"_id\":\"a76Rdyd5mgj2mzxNB\",\"language\":\"ruby\"}]}}"]