a["{\"msg\":\"result\",\"id\":\"896\",\"result\":{\"_id\":\"XYvyirQMkmPHGLaZi\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def boom_intensity(n):\\n\\t\",\"difficulty\":1.446969696969697,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"WiLJwmGhfWoeP3me7\",\"instructions\":\"Given a number, return a string of the word `\\\"Boom\\\"`, which varies in the following ways:\\n\\n- The string should include `n` number of \\\"o\\\"s, unless `n` is below 2 (in that case, return `\\\"boom\\\"`).\\n- If `n` is _evenly divisible by 2_, add an exclamation mark to the end.\\n- If `n` is _evenly divisible by 5_, return the string in _ALL CAPS_.\\n\\nThe example below should help clarify these instructions.\\n\\n### Examples\\n```\\nboom_intensity(4) ➞ \\\"Boooom!\\\"\\n# There are 4 \\\"o\\\"s and 4 is divisible by 2 (exclamation mark included)\\n\\nboom_intensity(1) ➞ \\\"boom\\\"\\n# 1 is lower than 2, so we return \\\"boom\\\"\\n\\nboom_intensity(5) ➞ \\\"BOOOOOM\\\"\\n# There are 5 \\\"o\\\"s and 5 is divisible by 5 (all caps)\\n\\nboom_intensity(10) ➞ \\\"BOOOOOOOOOOM!\\\"\\n# There are 10 \\\"o\\\"s and 10 is divisible by 2 and 5 (all caps and exclamation mark included)\\n```\\n\\n### Notes\\n- A number which is evenly divisible by 2 **and** 5 will have both effects applied (see example #4).\\n- `\\\"Boom\\\"` will always start with a capital \\\"B\\\", except when `n` is _less than 2_, then return a minature explosion as `\\\"boom\\\"`.\",\"isHidden\":false,\"lab\":\"Test.assert_equals(boom_intensity(0), \\\"boom\\\")\\nTest.assert_equals(boom_intensity(1), \\\"boom\\\")\\nTest.assert_equals(boom_intensity(2), \\\"Boom!\\\")\\nTest.assert_equals(boom_intensity(3), \\\"Booom\\\")\\nTest.assert_equals(boom_intensity(4), \\\"Boooom!\\\")\\nTest.assert_equals(boom_intensity(5), \\\"BOOOOOM\\\")\\nTest.assert_equals(boom_intensity(6), \\\"Boooooom!\\\")\\nTest.assert_equals(boom_intensity(7), \\\"Booooooom\\\")\\nTest.assert_equals(boom_intensity(8), \\\"Boooooooom!\\\")\\nTest.assert_equals(boom_intensity(9), \\\"Booooooooom\\\")\\nTest.assert_equals(boom_intensity(10), \\\"BOOOOOOOOOOM!\\\")\\nTest.assert_equals(boom_intensity(11), \\\"Booooooooooom\\\")\\nTest.assert_equals(boom_intensity(12), \\\"Boooooooooooom!\\\")\\nTest.assert_equals(boom_intensity(13), \\\"Booooooooooooom\\\")\\nTest.assert_equals(boom_intensity(14), \\\"Boooooooooooooom!\\\")\\nTest.assert_equals(boom_intensity(15), \\\"BOOOOOOOOOOOOOOOM\\\")\\nTest.assert_equals(boom_intensity(16), \\\"Boooooooooooooooom!\\\")\\nTest.assert_equals(boom_intensity(17), \\\"Booooooooooooooooom\\\")\\nTest.assert_equals(boom_intensity(18), \\\"Boooooooooooooooooom!\\\")\\nTest.assert_equals(boom_intensity(19), \\\"Booooooooooooooooooom\\\")\\nTest.assert_equals(boom_intensity(20), \\\"BOOOOOOOOOOOOOOOOOOOOM!\\\")\\nTest.assert_equals(boom_intensity(21), \\\"Booooooooooooooooooooom\\\")\\nTest.assert_equals(boom_intensity(22), \\\"Boooooooooooooooooooooom!\\\")\\nTest.assert_equals(boom_intensity(23), \\\"Booooooooooooooooooooooom\\\")\\nTest.assert_equals(boom_intensity(24), \\\"Boooooooooooooooooooooooom!\\\")\\nTest.assert_equals(boom_intensity(25), \\\"BOOOOOOOOOOOOOOOOOOOOOOOOOM\\\")\\nTest.assert_equals(boom_intensity(26), \\\"Boooooooooooooooooooooooooom!\\\")\\nTest.assert_equals(boom_intensity(27), \\\"Booooooooooooooooooooooooooom\\\")\\nTest.assert_equals(boom_intensity(28), \\\"Boooooooooooooooooooooooooooom!\\\")\\nTest.assert_equals(boom_intensity(29), \\\"Booooooooooooooooooooooooooooom\\\")\\nTest.assert_equals(boom_intensity(30), \\\"BOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOM!\\\")\\nTest.assert_equals(boom_intensity(31), \\\"Booooooooooooooooooooooooooooooom\\\")\\nTest.assert_equals(boom_intensity(32), \\\"Boooooooooooooooooooooooooooooooom!\\\")\\nTest.assert_equals(boom_intensity(33), \\\"Booooooooooooooooooooooooooooooooom\\\")\\nTest.assert_equals(boom_intensity(34), \\\"Boooooooooooooooooooooooooooooooooom!\\\")\\nTest.assert_equals(boom_intensity(35), \\\"BOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOM\\\")\\nTest.assert_equals(boom_intensity(36), \\\"Boooooooooooooooooooooooooooooooooooom!\\\")\\nTest.assert_equals(boom_intensity(37), \\\"Booooooooooooooooooooooooooooooooooooom\\\")\\nTest.assert_equals(boom_intensity(38), \\\"Boooooooooooooooooooooooooooooooooooooom!\\\")\\nTest.assert_equals(boom_intensity(39), \\\"Booooooooooooooooooooooooooooooooooooooom\\\")\\nTest.assert_equals(boom_intensity(40), \\\"BOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOM!\\\")\\nTest.assert_equals(boom_intensity(41), \\\"Booooooooooooooooooooooooooooooooooooooooom\\\")\\nTest.assert_equals(boom_intensity(42), \\\"Boooooooooooooooooooooooooooooooooooooooooom!\\\")\\nTest.assert_equals(boom_intensity(43), \\\"Booooooooooooooooooooooooooooooooooooooooooom\\\")\\nTest.assert_equals(boom_intensity(44), \\\"Boooooooooooooooooooooooooooooooooooooooooooom!\\\")\\nTest.assert_equals(boom_intensity(45), \\\"BOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOM\\\")\\nTest.assert_equals(boom_intensity(46), \\\"Boooooooooooooooooooooooooooooooooooooooooooooom!\\\")\\nTest.assert_equals(boom_intensity(47), \\\"Booooooooooooooooooooooooooooooooooooooooooooooom\\\")\\nTest.assert_equals(boom_intensity(48), \\\"Boooooooooooooooooooooooooooooooooooooooooooooooom!\\\")\\nTest.assert_equals(boom_intensity(49), \\\"Booooooooooooooooooooooooooooooooooooooooooooooooom\\\")\\nTest.assert_equals(boom_intensity(50), \\\"BOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOM!\\\")\\nTest.assert_equals(boom_intensity(51), \\\"Booooooooooooooooooooooooooooooooooooooooooooooooooom\\\")\\nTest.assert_equals(boom_intensity(52), \\\"Boooooooooooooooooooooooooooooooooooooooooooooooooooom!\\\")\\nTest.assert_equals(boom_intensity(53), \\\"Booooooooooooooooooooooooooooooooooooooooooooooooooooom\\\")\\nTest.assert_equals(boom_intensity(54), \\\"Boooooooooooooooooooooooooooooooooooooooooooooooooooooom!\\\")\\nTest.assert_equals(boom_intensity(55), \\\"BOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOM\\\")\\nTest.assert_equals(boom_intensity(56), \\\"Boooooooooooooooooooooooooooooooooooooooooooooooooooooooom!\\\")\\nTest.assert_equals(boom_intensity(57), \\\"Booooooooooooooooooooooooooooooooooooooooooooooooooooooooom\\\")\\nTest.assert_equals(boom_intensity(58), \\\"Boooooooooooooooooooooooooooooooooooooooooooooooooooooooooom!\\\")\\nTest.assert_equals(boom_intensity(59), \\\"Booooooooooooooooooooooooooooooooooooooooooooooooooooooooooom\\\")\\nTest.assert_equals(boom_intensity(60), \\\"BOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOM!\\\")\\nTest.assert_equals(boom_intensity(61), \\\"Booooooooooooooooooooooooooooooooooooooooooooooooooooooooooooom\\\")\\nTest.assert_equals(boom_intensity(62), \\\"Boooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooom!\\\")\\nTest.assert_equals(boom_intensity(63), \\\"Booooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooom\\\")\\nTest.assert_equals(boom_intensity(64), \\\"Boooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooom!\\\")\\nTest.assert_equals(boom_intensity(65), \\\"BOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOM\\\")\\nTest.assert_equals(boom_intensity(66), \\\"Boooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooom!\\\")\\nTest.assert_equals(boom_intensity(67), \\\"Booooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooom\\\")\\nTest.assert_equals(boom_intensity(68), \\\"Boooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooom!\\\")\\nTest.assert_equals(boom_intensity(69), \\\"Booooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooom\\\")\\nTest.assert_equals(boom_intensity(70), \\\"BOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOM!\\\")\\nTest.assert_equals(boom_intensity(71), \\\"Booooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooom\\\")\\nTest.assert_equals(boom_intensity(72), \\\"Boooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooom!\\\")\\nTest.assert_equals(boom_intensity(73), \\\"Booooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooom\\\")\\nTest.assert_equals(boom_intensity(74), \\\"Boooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooom!\\\")\\nTest.assert_equals(boom_intensity(75), \\\"BOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOM\\\")\\nTest.assert_equals(boom_intensity(76), \\\"Boooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooom!\\\")\\nTest.assert_equals(boom_intensity(77), \\\"Booooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooom\\\")\\nTest.assert_equals(boom_intensity(78), \\\"Boooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooom!\\\")\\nTest.assert_equals(boom_intensity(79), \\\"Booooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooom\\\")\\nTest.assert_equals(boom_intensity(80), \\\"BOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOM!\\\")\\nTest.assert_equals(boom_intensity(81), \\\"Booooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooom\\\")\\nTest.assert_equals(boom_intensity(82), \\\"Boooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooom!\\\")\\nTest.assert_equals(boom_intensity(83), \\\"Booooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooom\\\")\\nTest.assert_equals(boom_intensity(84), \\\"Boooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooom!\\\")\\nTest.assert_equals(boom_intensity(85), \\\"BOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOM\\\")\\nTest.assert_equals(boom_intensity(86), \\\"Boooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooom!\\\")\\nTest.assert_equals(boom_intensity(87), \\\"Booooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooom\\\")\\nTest.assert_equals(boom_intensity(88), \\\"Boooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooom!\\\")\\nTest.assert_equals(boom_intensity(89), \\\"Booooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooom\\\")\\nTest.assert_equals(boom_intensity(90), \\\"BOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOM!\\\")\\nTest.assert_equals(boom_intensity(91), \\\"Booooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooom\\\")\\nTest.assert_equals(boom_intensity(92), \\\"Boooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooom!\\\")\\nTest.assert_equals(boom_intensity(93), \\\"Booooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooom\\\")\\nTest.assert_equals(boom_intensity(94), \\\"Boooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooom!\\\")\\nTest.assert_equals(boom_intensity(95), \\\"BOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOM\\\")\\nTest.assert_equals(boom_intensity(96), \\\"Boooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooom!\\\")\\nTest.assert_equals(boom_intensity(97), \\\"Booooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooom\\\")\\nTest.assert_equals(boom_intensity(98), \\\"Boooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooom!\\\")\\nTest.assert_equals(boom_intensity(99), \\\"Booooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooom\\\")\\nTest.assert_equals(boom_intensity(100), \\\"BOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOM!\\\")\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[1,1,1,1,1,1,1,1,2,1,2,2,1,0,1,2,1,1,0,1,2,0,1,1,1,1,1,1,1,1,0,2,0,2,5,2,1,1,1,1,0,1,1,2,5,2,1,2,2,2,1,2,1,2,1,2,2,1,1,1,2,2,0,2,2,5,1,0,1,2,2,1,2,2,1,1,1,2,1,1,2,1,0,2,2,1,0,2,2,2,2,2,1,1,2,3,2,2,2,1,1,0,2,5,1,1,0,0,3,1,2,2,2,1,1,1,2,2,3,0,1,0,2,2,1,0,2,2,1,0,0,2,1,2,2,1,1,3,2,2,1,2,2,1,0,2,1,1,0,1,2,2,1,2,2,1,0,2,1,2,2,2,2,2,2,1,1,2,2,2,0,1,2,0,2,2,2,0,2,1,2,2,0,0,2,1,2,1,1,1,2,1,2,2,1,1,2,1,2,2,2,2,2,1,1,1,2,2,0,2,1,1,2,1,1,3,1,0,2,2,1,0,2,1,1,2,1,1,1,2,1,1,1,0,1,1,2,2,3,1,1,2,2,2,2,1,2,1,1,2,1,2,3,2,1,2,0,0,2,2,2,2,2,2,2,1,1,3,1,2,0,1,2,1,2,2,1,0,0,2,1,3,1,2,2,2,1,2,1,2,0,2,0,2,1,1,2,2,0,0,0,2,1,2,2,2,2,0,1,2,2,2,1,0,1,3,2,1,2,2,0,1,2,4,1,1,3,2,1,2,2,1,2,2,0,2,0,1,2,2,2,2,1,1,2,1,2,2,2,2,1,3,1,1,2,2,0,0,2,2,5,2,2,3,2,2,0,2,1,2,2,0,0,2,2,1,2,0,2,2,2,2,2,1,1,2,1,1,2,2,1,2,0,0,2,2],\"rators\":[\"j2wcHGHmPCHbaQEye\",\"PXAcsKkssS2yLyDv2\",\"QnPD4Sv6W4LHc2Qng\",\"EQbnbkkPYtGxiviTp\",\"tAF9Gf6PiGogbZuWs\",\"ruyBZ3BQsi7TKgJy9\",\"4fctAnxyFRB8stPRQ\",\"gb9rvGus2Jv7bjZSs\",\"u5u2YpHXiNgzDNJdX\",\"N2wnZXkhDH86mgjQ8\",\"2fxapKr8XGdNeaKi2\",\"ey3CASd6Je5LEJzfB\",\"myXAR5qDJsBaPnff2\",\"Jqk2uJZZxEv5wZFze\",\"HQxp7NcdvF92G7bYS\",\"Ycj4iTJGFyvC4bXek\",\"mxX4rH5ELYkdZ2Mbw\",\"mjxZARnWk8dAGzgS9\",\"KdNhsHAQg83SsBTgg\",\"jeuoearPPTcGPgXhf\",\"N7GPFEhCaiQ79MKjz\",\"Nj6FwgBtAXsaQwsM2\",\"AasGs8AeX9Lcb9xJn\",\"C4QntmkYtB89GNtpd\",\"XbxHXmh5ZmRN2gw3K\",\"4CFzv558qbGcpQwc4\",\"8JyqsSbN2FJXPr3cw\",\"WcqujsAnCdQ9uRbeZ\",\"Wv5c7WsK6R8yb4mTt\",\"qz9yxbrcCeoNouemo\",\"BeFnbPbMnAM2SjBdZ\",\"76GWKGTsNEG6R4APD\",\"CuY5BaTCcu7Mp9tDu\",\"yabtHTtycsWhcGBfD\",\"hnyhBFWwNCz9mDfSi\",\"HqmxnQJM66Y57twhn\",\"Cc2Cgj4MWXZxsTooC\",\"rJFxP8NgzZhZ6ryXq\",\"NfMJuiBk6FN5Jc6ow\",\"JPtpz9cnJwtS8L7ui\",\"2innwjWqxJHo4eRGh\",\"aRqQ42J5zqCmBNd8w\",\"CNbfRkjBfgk3td6Ef\",\"uq6nbESfR48SPowQ2\",\"7iyEJcw9hP7pGKrbR\",\"kP2C2Ye5H6WoTodFN\",\"23oi2a3vQwhtLEbSj\",\"apyi6oXgmDnnq7qw9\",\"iMHrN3Wiefh9Ame38\",\"tvHe5taC5yhgA6LQQ\",\"aoRaYQZEQPrJT22wX\",\"LgNA3FaYgZjajngzv\",\"b2b3J9BxSbgpnW6Jr\",\"RJ6mfGK5N6pRrGRm9\",\"kc9hbbzEtggnqitHb\",\"dZGNAJXB24zNh2tsD\",\"Xiu2665bWTaW3Fyhv\",\"Qcv3kqBdyGHHbzWY5\",\"zHdcQydaKdxckwcEo\",\"M44nifmWzt3wtYyJx\",\"H9KZi2cjt4FwH7qog\",\"s5M5RvgqR9BhB9JoC\",\"Z85ajWfZ4jDPkbvR4\",\"3ECpdeExhBmkYXtba\",\"DCLoZNDf8h6TB7gxn\",\"xowjbn5yEv7c93axA\",\"4tgBydK887PitgAoi\",\"jNE5AHcJQWXz7efuP\",\"cqDm5TJgJLAQyhkiN\",\"cSaaAxqkYsPDXmMuf\",\"ZWPDhGz4W4iJp3nbi\",\"nc7bRhkxgKyqusYe3\",\"LA2YneDcbtiSj5SH6\",\"cfxiZ5g5tzM88KHzX\",\"9Ly8afdtofp8DXzrt\",\"pMg2Zddm29zRGP6wg\",\"Yp7uvStL97cC9fKkY\",\"k5mp7Hkg8w5rwiXpe\",\"bLpgu8xTdpDPFSAsM\",\"LQxof8pGabGuWP7Gn\",\"ovqQRfyvmEDypjrnC\",\"ydEdzuCCZt4yny9Rq\",\"hKrY8hWMgToBavfhD\",\"Fk9kLwoG4Brf4KsKf\",\"mtRvHDpeLoSGBf8zC\",\"2EpTEdXyMYe9SKQTf\",\"n2BRY9X8899dcG8Bw\",\"8fhbZ2xkaSQB4Cb2L\",\"knT3HJMb87iKpjqdM\",\"iF6X8FeXyfJHXCPQR\",\"yKttxy9JGn5Jzwuj6\",\"DXBbJKYFTBi2pxR7c\",\"TCaTpxjzt2x9xAL86\",\"aP3dk5CrAEeQkKn4k\",\"hQJZAKtGhbvtiHRn8\",\"LQhEi8yAC8WzEYY8h\",\"jNvegJWCk5HCtEMbK\",\"XKi8iZXBCHCaebSHh\",\"J5T8gZqiZXFuFDTQ7\",\"PSrcg6fy835R4c5CW\",\"oKNAZ5BNeNWyvkiiB\",\"6abffx8jQDCf7kgvb\",\"dHZqT6h4JMwk5fPC8\",\"HPMiZMZ2WGu4FWaRH\",\"cR3ibTMxLyEdDFCHY\",\"sXs4Dvtk8Pvn2t9ZP\",\"sz8ufn9i8zeiGWpAy\",\"uw8E83imJYpQiiPpP\",\"g8yJiPAWXbrgxbjfZ\",\"8LfTheFzvicameoz9\",\"aEm3Wvj2rFYRL8Lrb\",\"mybpojPXaZigaqsAD\",\"E9ttMPTkLkKG6nZrg\",\"eq9dWq4Q6bPCG4AsA\",\"2QGRoQn2dRq3scu7k\",\"2iFe3EHEH2YdhSKrs\",\"HDksZLiRAmpnCKHta\",\"CYXE62pnN5ruGf7s3\",\"8PwfYqoDQFThzNtvf\",\"Qq2AEGMAtYKJeRRHm\",\"9uZpgAtSuPZ7W7DL6\",\"gJYuGdkXEWWmGRLzu\",\"eLkj3Zb2DqiW4AEEh\",\"ZNnsMeNkdDhHjSrZb\",\"QTosJpvW98hTsTF6B\",\"HF28xZKSLM9wEuqNg\",\"CEd9tLdXeDeNHSzys\",\"KRSKj7ikX2ytWFmod\",\"So6PHm74mfJuY2WTs\",\"SjwEe68FMFwWBYKtJ\",\"q5a96XumccZyhQNyL\",\"gZCBY2gP7xHRy5JzG\",\"uiEuENARwFpnNMfFs\",\"uQPEy85JZBEqBuwm8\",\"dXMbkgQFoN37BhruB\",\"vqMYzCnmeLMnhF3y3\",\"MKT7khMBGXzA22ykf\",\"5kEyLPjTLrt7z2YJZ\",\"JQkZXeaLy3giT5p6W\",\"kGwkJGKrHotSoTPuL\",\"DEDniTrstQYGounXT\",\"3Zceb8GudqAG3onG3\",\"9pzFiFK3ANLjQfnr2\",\"M8dQuMrEpP8Hc3tHN\",\"aYwihs6cziWs3fr5w\",\"HiXS9Hofvx4rnqDZz\",\"RmwYNt4oSLCLLd8a5\",\"kYWb8BwpKwunQkxeX\",\"hiGXnxds6zo7XsfTw\",\"Nt2qqga6sgvoLr9xj\",\"KdNDysEsy2TW5QRJ2\",\"eMuCpJ2spXWkJjWNz\",\"KcCCxkrWiSdzQnyBq\",\"qs8P8yuZSpKuem3pb\",\"LmTRmhiuDidAebAsw\",\"LWCzZ8mb8gwrRNGfq\",\"vt6MbZKuKZptRkwcr\",\"7txFzDQ43vJ7qCY88\",\"bDH2XR5bc4GxcwtBP\",\"Gz2tRFCAk883x3npw\",\"FS78GK2Ysu7u8ndMs\",\"5cmvoGYHLNmT8n6jP\",\"r5GGrGb3G47LHmPWF\",\"6ZapS9L6t66jQCqxA\",\"Ro3ppqamSxiJv2wxP\",\"4rwxLqLs2mNZNg8NB\",\"FEYpu9RWysAgW3XnP\",\"oKkTzYNZvisJ3iB5M\",\"di2hhADLx59Bj4ewM\",\"sbJcFfQjQ59Wfg4Cd\",\"DwetpbChQM4r6Gwah\",\"mDWNyaaQ9hvPCRzSd\",\"bCDTKAoS4biDmQ64Y\",\"FzxTj4GuujhwpZM7y\",\"DxxNN37iEz7b8t2nf\",\"zbDjaYZcYccgJtr4z\",\"5yeoMQjs4NQ3wtoDF\",\"dKKMvaYoJunNPk5Wa\",\"ahk2qiXKJA753wAJk\",\"Ne8mK9DDHG8TRkoxG\",\"E6fNivJ9po4ntpEES\",\"DrkR35NqnP9NDLbq6\",\"XrqNzJ2FRG8HnGiR6\",\"DcBsMxz8LSiZ6yRWA\",\"nfXGHENb5md7m355s\",\"ahShRaM3SEFT33gvS\",\"H325N3oYrYJ7jGDrG\",\"CYzKNikwEfSE3pxuD\",\"hab8YixsXxe4CcZpP\",\"zAsNgFHdyiHeiHB8C\",\"orFLgPDw9H5MDzmwo\",\"djeesDJQwNJay4RTe\",\"QsK4h5bfyCFgoKgsM\",\"4yNLEwL2rsx4EE5Nt\",\"a777e8chPvJkY3tKa\",\"zd9FLSzsGz3evKafy\",\"eFGWicpoc9kw2qQgT\",\"ekQh3jzgGLsEMbKo3\",\"6SKDJwXpev4qPSzgM\",\"JLB2csZQTB4Brpufk\",\"E8TMSMSamEbBtf9Lo\",\"NG8PWBSjsM8mMhQEq\",\"s2ZMtR9deh6Kia7pb\",\"v9KtC8YLbMWmXiW2H\",\"CD74TjEgiakJGBuYi\",\"TTgP9jcqGxCfKotZ3\",\"jBR47vA7HwAZqp4QA\",\"ELfyvLSAPDbhksDBb\",\"yoLy2DcMG3nZXNwv2\",\"2ptN2mhjFwFcHyPZd\",\"9BRiTS38aT5Yrz7zH\",\"3cF6NXq3ZEwdkgSjb\",\"dKtYzJHAswturm7Fe\",\"H4abACFDH5t8CnnyH\",\"j57Xos8wYZWcwqMrt\",\"gPvrBxxySDP2vpux3\",\"yYxPzFqBgtQ9fsyHM\",\"ZrKCkX7xxGGZzauFW\",\"NNE5HNRXAkmhrWgyQ\",\"HpCdcD8g3iwJTHyCg\",\"Z4M3NAa4TXquMNkHe\",\"8BFSTCnoe2QggN64c\",\"4X3bLdgJjHMF8Lxug\",\"yJmwiykSNfLv9NqJ2\",\"YcCLwitFMAEJSnxAW\",\"7a3hpSoL3kKes9z2P\",\"syRNbbPdLCGXbH2Gy\",\"5qfcG54cbBC8ujxav\",\"8TAYWzqJAkXq2MAba\",\"Wv2vJnEj8ywNmARoF\",\"NzbRqGWspQnWMoDrF\",\"GGprTwrkjuccmrQRg\",\"DoDsp3ets8frF9W3C\",\"LCZ6JTAhBZBmWLzm8\",\"4hWjYDZsdixzvKbqQ\",\"R4SjTgDnpigJYDLyL\",\"fTdvvdwjgW2Njyg4y\",\"FvFhg2wELM3SCZDZQ\",\"QRRLM2KAunDa6grje\",\"TjeuzxKBd7b4ZajSs\",\"yNjkHfHESBAnCssPB\",\"iojEnnY9FsMfYzp6f\",\"KGiM2KiXnNJYfSzBF\",\"sX9GZp3fYyQLrBKMJ\",\"uouMMdEWBuLBWPbzr\",\"ZMJZNTJ2Ng8o8euQJ\",\"CwXsu25ygLEwQbmQC\",\"b9YQPLb9ZPSADdHXX\",\"Pe8vWpDHRuH9nSGKW\",\"6kz7jjJS8W4tikYQT\",\"yAouD3PxzED8a4gap\",\"M35nSp9motwe2cDrP\",\"yjtdwc2AC4jA2RWtn\",\"ypGdjKLkswPZXo89K\",\"gSFJPsMXnqAog3Q9f\",\"ZrXkPD45QRS4oXJmA\",\"oBcs8GLX2ZFLXQy8y\",\"i5iePG5GqhJJ8HEoB\",\"SkQcb2sRn4as5KpnN\",\"6gS4E2C84vBYTYeDZ\",\"ta5CrWnBCRusD2WMo\",\"YA7SDhpgEtsqynvNL\",\"BC3XhXhX9mTrAScgy\",\"qsxEWC39oMoWATCPr\",\"kTCjGr4RJvjqaJasq\",\"hRiMXDZNAzyPd5tpt\",\"szxRx3Mvq4txBhXvS\",\"ji5f27FPz4wRRF6Ls\",\"RehJGBFS6CYiWdjZx\",\"hkJGLuib5md8vZ9HD\",\"JS3hNM3XXkxPdg3yk\",\"bJxaKHJqR82EWw8Su\",\"u7i7WPM63n42r8R8o\",\"3LiSLdtN58n46NEqg\",\"TPhfpB5tzQWSSn67n\",\"kxKR2bx7DrNDPqJPz\",\"w2HhxvSLmDhaGCAjE\",\"p8qqFdJ3FSk5x9z3G\",\"7K2GEb5TZRtSpyyGS\",\"2j3dYApeb9FZ5eP6d\",\"skG34HkAFoQiHk7gg\",\"KBxTPknCRmB2b5y3i\",\"EMJ6uvBZkie429gdg\",\"9CoqdidjM9KbeKnHY\",\"KLmLKaJPfsYxp42p2\",\"6HgMANhu6WiGyXSGN\",\"XayewWYWMWrCR4bgf\",\"5HCu9Ydd86QgHDRNP\",\"k2Eo3wyfZZ6KxvKhN\",\"Ey9pB2PRqejNubQmf\",\"DYDJTyGgKFnBRLm2r\",\"Kh3Pc2ZRusurLaMyP\",\"tpxMgkGSHwBjS95Ta\",\"kNrnnMxhFZztMTBAX\",\"sHjfbGQGLHE6JR6qu\",\"qD2LrwaDrSdiybLKY\",\"mG8HqKiAQFTdRZthG\",\"PcfcAbTJPrdzJN2FW\",\"gXTAie79kiw28tx5u\",\"zfGYZ7gpR8fxJpagh\",\"b5zo7s6xrqWgQnPao\",\"8WpvgSbQciTQWdd8T\",\"QRv96jmNaYsWkxQEG\",\"oXdhczMThyirgM2eN\",\"zZDaXBxMzTCBhNkgL\",\"dj5AyG5fWP8FdsSmZ\",\"dBzwBtRjZqB98DJeB\",\"9FCeFzjPA4jrQ7oHW\",\"NuqGt5u3s7vJ7HBGR\",\"DPi9QGLctq2y76KuE\",\"BfwbCTRtW4wG2bsnH\",\"rrSC943cCKNG48sH4\",\"8fZxjQfuXw5HMSRJM\",\"tcn2oAsxPQDmCxGmg\",\"d8qtzoLB264iP8tdY\",\"axdSNLZpiCDF8RS6n\",\"J3upzLHuEwXH7Z2hx\",\"cAP3n5NY64uoMwzRR\",\"RGMbFMZXJr7DhcAJy\",\"6MjSiiBLPcvXbXcaZ\",\"pJj86xc32Bs7Frxvi\",\"dYPkStFnLvAMsHSzZ\",\"WaJ3zN9ugsSy9uDu6\",\"spk67gat9WwdbvNeW\",\"spqXrjG3ZFa2j5uTR\",\"ZJasJBsyGh34qLdCp\",\"yod5YhKtPqw2GfG9B\",\"YRAzEBJoLvSaiPtYx\",\"GtWPwFmkp8TiobSN6\",\"Tf7TJFSPktJBgLA4k\",\"boEezRWcg9o8EDCNY\",\"NA3P7biBE2p928KEt\",\"Cybtjz3cF7RgoiqrN\",\"4fjSgcqhQQZM2ZFRP\",\"5XiuAqicKD4hBdu63\",\"LqTWjkqo9irQzGSL2\",\"RAi3b2JZuKZtFcs9Q\",\"oyKcm3zqdy8Ko5P5d\",\"LTKB4aNF7E9QvuPww\",\"PK72yKRPFs9zW7agn\",\"TzDerfatHrCxg6drE\",\"L3woRGT39d8dTrCTR\",\"WXXPk4FsDLcF4Ppmz\",\"TsiTMLq9wH5gueXMe\",\"t5KaHR6BK3sbxgpr4\",\"nHGL5YYdSiuWMzXnk\",\"8wfGQB8XAbJq6u7r2\",\"7PJN8PeqTM8HQjEYd\",\"5hQnRWiKkhgKJXNMP\",\"C2AfMipCicfD58WJ9\",\"KJCDwGkoXh8qtbbKr\",\"g9FyJ8yeT9ic97Qp2\",\"HuNF3xTBzmatyGSTm\",\"DYgfbX6HTd8Bdkdoe\",\"EfxwqhYdapX3dMQC2\",\"pduNK68oazqQTtbLp\",\"o4ixjQGSaYqA2JoM4\",\"xGpqoGZ47sYLJ4ty9\",\"wjc4iejpErBhxWwHo\",\"WdKdsgH9gXkKgCycx\",\"nJXgbSQozcoE8Wn4N\",\"buX4mCQhtXCfBjeno\",\"DqNQn9Jsxcu5HijKE\",\"GGdmhAvxXhqhhibJN\",\"5S9nX4rKsnCcnv4Cz\",\"Lg4t6SEWgtYz4u7Cj\",\"MaLpA3hMEfEr22WM3\",\"7N6c3Xu244bnQWjBs\",\"nFbmNzMQ38TncmfQX\",\"q2tzvkrLASvSjkek9\",\"Ds7L5bksw2QRHjrKL\",\"srJ34BaybkQh3qRkM\",\"qZQxPQ2kaNKAMesHT\",\"p7js9trz2zk2RorCR\",\"eYfPWvZwnJQkHbSTK\",\"KakR276kZoEz8DTza\",\"PWgzeK859suojbrRx\",\"q6QsMYNMpPNtmyTeW\",\"AFfw7cGg83uYk2Miy\",\"JhX7jvtpwNyxcc39m\",\"3KkyQm77zsew58Dc2\",\"qAby4AWXmTNeusvg3\",\"bvmTE46bfcM4ogj34\",\"6BpQP3ubeg48Q65ya\",\"BJp2WkwLWGHHB5oQW\",\"XD5nmvKQchKezPXhy\",\"BrTDhPJcACL2bsrpJ\",\"66a9xX73nmTEuKs9k\",\"Wpn95NqWxncQrwNgz\",\"PC3pLs36zNzpRDSuE\",\"2EbDCCJJvCfKkbYia\",\"GTKsdeEihE636Le9i\",\"CHvzhtXnv8HTbPQ56\",\"c2q7mY39z5JPEMCaM\",\"2PufnQcsHsfymufX3\",\"ci9KPhB6uA9jC6HMn\",\"mvJBakQ35CWAnbbEZ\",\"M2gFMJkocQSY6bsFR\",\"K6MfKMytoJJuSGewP\",\"X4rzfxGgxx6CS7Bpz\",\"ghMkPtdFCpM6w8nax\",\"RoGGD5cpHb4ftdLDv\",\"R6YxHWAiLgKwy5YvC\",\"59i8FXFn8qgY6w67v\",\"SJ9JYFaFLuFsLrgci\",\"tdfY4iBvD7oh2ufnN\",\"qzXAMXsHZGT8o5hTA\",\"W3esi7nZLHyXmyZSd\",\"hR7GMiqGap4CzEWSy\",\"4Lwjr34ypKNQNQCar\",\"4TmgHkn5vqyHK3sYC\",\"PH32cNxBjrK4a28sn\",\"QiC86S8WYvoyukYLy\",\"jWbd7SYDzLPjc9EDh\",\"T6Rm8mREPMZSftzrC\",\"4RY3zj9C2t8GGefhi\",\"d9LBRxvADNBB5QJMB\",\"dzS6WBTMHyFEag6Fp\",\"AQSqD9oNv2uPfxZCR\",\"hpT9yYe5R45poHrYR\",\"9bQyb6rW7xfE4vgrR\",\"Qyfyyw6oC4EHAndzo\",\"CdXigydGTBLgA577m\",\"qB6KSTYC6H2TQEQY6\",\"rCrbqMiaGPgHYTNxu\",\"pPpmP7xeJzGgK362R\",\"5QN8R22z43SrwoHDz\",\"8uiLiJcmWxWe6qw65\",\"mw9464S5dnenqzvpm\",\"2HfNkb2SoqdyjKW3o\",\"Wi4H6ayKsNDWWQCG5\",\"5aQYQ7ugCF4QYsxy5\",\"ruzwBPphPDRgLXdnP\",\"Ncn7Qn2LbdsiJnfFk\",\"eW9R2SCoYnY8HBAdL\",\"FT2wBacm3JxrYmZDW\"],\"total\":485,\"quality\":[5,5,3,5,5,3,4,5,5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5,3,5,4,5,5,4,5,5,5,4,1,3,4,5,5,5,5,5,4,5,5]},\"flags\":0},\"summary\":\"Given an number, return a string of the word \\\"Boom\\\", which varies in the following ways:\\n\\nThe string should include n number of \\\"o\\\"s, unless n is below 2 (in that case, return \\\"boom\\\").\\nIf n is evenly divisible by 2, add an exclamation mark to the end.\\nIf n is evenly divisible by 5, return the string in ALL CAPS.\\n\\nThe example below should help clarify these ins\",\"tags\":[\"strings\",\"formatting\",\"algorithms\"],\"timestamp\":{\"$date\":1579988402634},\"title\":\"Explosion Intensity\",\"quality\":4.511111111111111,\"family\":[{\"_id\":\"uMzCdoNctZJ4jzEG5\",\"language\":\"cpp\"},{\"_id\":\"XnZAcvr4tCD9ppyrN\",\"language\":\"javascript\"},{\"_id\":\"XYvyirQMkmPHGLaZi\",\"language\":\"python3\"},{\"_id\":\"jvsSYLokBCe2rFDkk\",\"language\":\"ruby\"}]}}"]