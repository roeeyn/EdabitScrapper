a["{\"msg\":\"result\",\"id\":\"951\",\"result\":{\"_id\":\"994QjWPmdhaR94DeF\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def get_birthday_cake(name, age):\\n\\t\",\"difficulty\":1.4846938775510203,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"cKv3Rx6ekXD5tkyug\",\"instructions\":\"Create a function which **constructs** a *rectangular* birthday cake, based on someone's `name` and `age`! Build it out of *strings* in a list and make sure to surround the birthday message with the character that fits the rule:\\n\\n- If the age is an **even number**, surround the message with \\\"#\\\".\\n- If the age is an **odd number**, surround the message with \\\"*\\\".\\n\\nOther important rules:\\n- The message should be in the format: **{age} Happy Birthday {name}! {age}**\\n- **Leave a space** between the edge of the cake and the age numbers.\\n\\n### Examples\\n```\\nget_birthday_cake(\\\"Jack\\\", 10) ➞ [\\n  \\\"##############################\\\",\\n  \\\"# 10 Happy Birthday Jack! 10 #\\\",\\n  \\\"##############################\\\"\\n]\\n\\nget_birthday_cake(\\\"Russell\\\", 19) ➞ [\\n  \\\"*********************************\\\",\\n  \\\"* 19 Happy Birthday Russell! 19 *\\\",\\n  \\\"*********************************\\\"\\n]\\n\\nget_birthday_cake(\\\"Isabelle\\\", 2) ➞ [\\n  \\\"################################\\\",\\n  \\\"# 2 Happy Birthday Isabelle! 2 #\\\",\\n  \\\"################################\\\"\\n]\\n```\\n\\n### Notes\\nThe amount of characters in the banner should be the same length as the message to pass the tests.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(get_birthday_cake(\\\"Jack\\\", 10), [\\n\\t\\\"##############################\\\",\\n\\t\\\"# 10 Happy Birthday Jack! 10 #\\\",\\n\\t\\\"##############################\\\"\\n])\\n\\nTest.assert_equals(get_birthday_cake(\\\"Russell\\\", 19), [\\n\\t\\\"*********************************\\\",\\n\\t\\\"* 19 Happy Birthday Russell! 19 *\\\",\\n\\t\\\"*********************************\\\"\\n])\\n\\nTest.assert_equals(get_birthday_cake(\\\"Isabelle\\\", 2), [\\n\\t\\\"################################\\\",\\n\\t\\\"# 2 Happy Birthday Isabelle! 2 #\\\",\\n\\t\\\"################################\\\"\\n])\\n\\n# Time for a right mess\\nTest.assert_equals(get_birthday_cake(\\\"Princess\\\", 40), [\\\"##################################\\\", \\\"# 40 Happy Birthday Princess! 40 #\\\", \\\"##################################\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Maxwell\\\", 85), [\\\"*********************************\\\", \\\"* 85 Happy Birthday Maxwell! 85 *\\\", \\\"*********************************\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Zenobia\\\", 63), [\\\"*********************************\\\", \\\"* 63 Happy Birthday Zenobia! 63 *\\\", \\\"*********************************\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Adrian\\\", 91), [\\\"********************************\\\", \\\"* 91 Happy Birthday Adrian! 91 *\\\", \\\"********************************\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Gayle\\\", 28), [\\\"###############################\\\", \\\"# 28 Happy Birthday Gayle! 28 #\\\", \\\"###############################\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Jo\\\", 69), [\\\"****************************\\\", \\\"* 69 Happy Birthday Jo! 69 *\\\", \\\"****************************\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Val\\\", 80), [\\\"#############################\\\", \\\"# 80 Happy Birthday Val! 80 #\\\", \\\"#############################\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Jo\\\", 22), [\\\"############################\\\", \\\"# 22 Happy Birthday Jo! 22 #\\\", \\\"############################\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Gayle\\\", 4), [\\\"#############################\\\", \\\"# 4 Happy Birthday Gayle! 4 #\\\", \\\"#############################\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Norine\\\", 24), [\\\"################################\\\", \\\"# 24 Happy Birthday Norine! 24 #\\\", \\\"################################\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Val\\\", 63), [\\\"*****************************\\\", \\\"* 63 Happy Birthday Val! 63 *\\\", \\\"*****************************\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Gayle\\\", 25), [\\\"*******************************\\\", \\\"* 25 Happy Birthday Gayle! 25 *\\\", \\\"*******************************\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Princess\\\", 52), [\\\"##################################\\\", \\\"# 52 Happy Birthday Princess! 52 #\\\", \\\"##################################\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Adrian\\\", 90), [\\\"################################\\\", \\\"# 90 Happy Birthday Adrian! 90 #\\\", \\\"################################\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Loyd\\\", 90), [\\\"##############################\\\", \\\"# 90 Happy Birthday Loyd! 90 #\\\", \\\"##############################\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Shelia\\\", 76), [\\\"################################\\\", \\\"# 76 Happy Birthday Shelia! 76 #\\\", \\\"################################\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Evangelina\\\", 75), [\\\"************************************\\\", \\\"* 75 Happy Birthday Evangelina! 75 *\\\", \\\"************************************\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Lorenzo\\\", 15), [\\\"*********************************\\\", \\\"* 15 Happy Birthday Lorenzo! 15 *\\\", \\\"*********************************\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Riva\\\", 4), [\\\"############################\\\", \\\"# 4 Happy Birthday Riva! 4 #\\\", \\\"############################\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Fletcher\\\", 72), [\\\"##################################\\\", \\\"# 72 Happy Birthday Fletcher! 72 #\\\", \\\"##################################\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Hulda\\\", 51), [\\\"*******************************\\\", \\\"* 51 Happy Birthday Hulda! 51 *\\\", \\\"*******************************\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Bari\\\", 15), [\\\"******************************\\\", \\\"* 15 Happy Birthday Bari! 15 *\\\", \\\"******************************\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Dorris\\\", 48), [\\\"################################\\\", \\\"# 48 Happy Birthday Dorris! 48 #\\\", \\\"################################\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Ervin\\\", 83), [\\\"*******************************\\\", \\\"* 83 Happy Birthday Ervin! 83 *\\\", \\\"*******************************\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Cherelle\\\", 80), [\\\"##################################\\\", \\\"# 80 Happy Birthday Cherelle! 80 #\\\", \\\"##################################\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Deedee\\\", 93), [\\\"********************************\\\", \\\"* 93 Happy Birthday Deedee! 93 *\\\", \\\"********************************\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Youlanda\\\", 29), [\\\"**********************************\\\", \\\"* 29 Happy Birthday Youlanda! 29 *\\\", \\\"**********************************\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Deedee\\\", 48), [\\\"################################\\\", \\\"# 48 Happy Birthday Deedee! 48 #\\\", \\\"################################\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Kristine\\\", 6), [\\\"################################\\\", \\\"# 6 Happy Birthday Kristine! 6 #\\\", \\\"################################\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Kristine\\\", 43), [\\\"**********************************\\\", \\\"* 43 Happy Birthday Kristine! 43 *\\\", \\\"**********************************\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Fletcher\\\", 61), [\\\"**********************************\\\", \\\"* 61 Happy Birthday Fletcher! 61 *\\\", \\\"**********************************\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Bari\\\", 94), [\\\"##############################\\\", \\\"# 94 Happy Birthday Bari! 94 #\\\", \\\"##############################\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Clotilde\\\", 35), [\\\"**********************************\\\", \\\"* 35 Happy Birthday Clotilde! 35 *\\\", \\\"**********************************\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Ervin\\\", 98), [\\\"###############################\\\", \\\"# 98 Happy Birthday Ervin! 98 #\\\", \\\"###############################\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Margot\\\", 89), [\\\"********************************\\\", \\\"* 89 Happy Birthday Margot! 89 *\\\", \\\"********************************\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Shelia\\\", 8), [\\\"##############################\\\", \\\"# 8 Happy Birthday Shelia! 8 #\\\", \\\"##############################\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Clotilde\\\", 46), [\\\"##################################\\\", \\\"# 46 Happy Birthday Clotilde! 46 #\\\", \\\"##################################\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Riva\\\", 1), [\\\"****************************\\\", \\\"* 1 Happy Birthday Riva! 1 *\\\", \\\"****************************\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Bobby\\\", 89), [\\\"*******************************\\\", \\\"* 89 Happy Birthday Bobby! 89 *\\\", \\\"*******************************\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Riva\\\", 8), [\\\"############################\\\", \\\"# 8 Happy Birthday Riva! 8 #\\\", \\\"############################\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Todd\\\", 32), [\\\"##############################\\\", \\\"# 32 Happy Birthday Todd! 32 #\\\", \\\"##############################\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Jefferey\\\", 49), [\\\"**********************************\\\", \\\"* 49 Happy Birthday Jefferey! 49 *\\\", \\\"**********************************\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Cherelle\\\", 44), [\\\"##################################\\\", \\\"# 44 Happy Birthday Cherelle! 44 #\\\", \\\"##################################\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Jacques\\\", 7), [\\\"*******************************\\\", \\\"* 7 Happy Birthday Jacques! 7 *\\\", \\\"*******************************\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Maxwell\\\", 84), [\\\"#################################\\\", \\\"# 84 Happy Birthday Maxwell! 84 #\\\", \\\"#################################\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Clotilde\\\", 92), [\\\"##################################\\\", \\\"# 92 Happy Birthday Clotilde! 92 #\\\", \\\"##################################\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Evangelina\\\", 60), [\\\"####################################\\\", \\\"# 60 Happy Birthday Evangelina! 60 #\\\", \\\"####################################\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Dorris\\\", 54), [\\\"################################\\\", \\\"# 54 Happy Birthday Dorris! 54 #\\\", \\\"################################\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Jacqulyn\\\", 52), [\\\"##################################\\\", \\\"# 52 Happy Birthday Jacqulyn! 52 #\\\", \\\"##################################\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Lucrecia\\\", 95), [\\\"**********************************\\\", \\\"* 95 Happy Birthday Lucrecia! 95 *\\\", \\\"**********************************\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Shelia\\\", 75), [\\\"********************************\\\", \\\"* 75 Happy Birthday Shelia! 75 *\\\", \\\"********************************\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Gayle\\\", 59), [\\\"*******************************\\\", \\\"* 59 Happy Birthday Gayle! 59 *\\\", \\\"*******************************\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Margot\\\", 25), [\\\"********************************\\\", \\\"* 25 Happy Birthday Margot! 25 *\\\", \\\"********************************\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Hulda\\\", 55), [\\\"*******************************\\\", \\\"* 55 Happy Birthday Hulda! 55 *\\\", \\\"*******************************\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Adrian\\\", 23), [\\\"********************************\\\", \\\"* 23 Happy Birthday Adrian! 23 *\\\", \\\"********************************\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Stephine\\\", 48), [\\\"##################################\\\", \\\"# 48 Happy Birthday Stephine! 48 #\\\", \\\"##################################\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Loyd\\\", 23), [\\\"******************************\\\", \\\"* 23 Happy Birthday Loyd! 23 *\\\", \\\"******************************\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Dorris\\\", 5), [\\\"******************************\\\", \\\"* 5 Happy Birthday Dorris! 5 *\\\", \\\"******************************\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Riva\\\", 41), [\\\"******************************\\\", \\\"* 41 Happy Birthday Riva! 41 *\\\", \\\"******************************\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Evangelina\\\", 97), [\\\"************************************\\\", \\\"* 97 Happy Birthday Evangelina! 97 *\\\", \\\"************************************\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Jacques\\\", 68), [\\\"#################################\\\", \\\"# 68 Happy Birthday Jacques! 68 #\\\", \\\"#################################\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Todd\\\", 53), [\\\"******************************\\\", \\\"* 53 Happy Birthday Todd! 53 *\\\", \\\"******************************\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Agnus\\\", 18), [\\\"###############################\\\", \\\"# 18 Happy Birthday Agnus! 18 #\\\", \\\"###############################\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Vernita\\\", 88), [\\\"#################################\\\", \\\"# 88 Happy Birthday Vernita! 88 #\\\", \\\"#################################\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Gayle\\\", 7), [\\\"*****************************\\\", \\\"* 7 Happy Birthday Gayle! 7 *\\\", \\\"*****************************\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Jacques\\\", 95), [\\\"*********************************\\\", \\\"* 95 Happy Birthday Jacques! 95 *\\\", \\\"*********************************\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Kasandra\\\", 57), [\\\"**********************************\\\", \\\"* 57 Happy Birthday Kasandra! 57 *\\\", \\\"**********************************\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Phoebe\\\", 39), [\\\"********************************\\\", \\\"* 39 Happy Birthday Phoebe! 39 *\\\", \\\"********************************\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Fletcher\\\", 76), [\\\"##################################\\\", \\\"# 76 Happy Birthday Fletcher! 76 #\\\", \\\"##################################\\\"])\\nTest.assert_equals(get_birthday_cake(\\\"Kristine\\\", 12), [\\\"##################################\\\", \\\"# 12 Happy Birthday Kristine! 12 #\\\", \\\"##################################\\\"])\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,3,2,1,2,2,2,1,1,1,0,3,2,2,2,2,2,2,1,1,0,1,1,0,2,1,2,0,1,2,1,1,2,0,0,2,2,1,2,1,2,2,0,0,1,2,1,1,2,1,2,1,2,2,1,0,2,1,2,5,2,0,1,2,2,2,1,2,1,1,1,1,2,2,2,2,2,2,1,2,1,0,1,2,2,1,2,2,2,2,1,2,1,2,1,2,1,2,2,2,2,1,1,1,2,3,1,0,1,1,0,0,2,2,2,1,2,1,2,3,2,3,2,1,2,2,2,1,1,2,2,2,2,2,2,2,1,2,2,0,0,2,0,2,1,0,0,0,2,2,0,1,0,2,1,2,2,0,2,2,2,1,2,2,1,0,2,2,1,2,1,2,1,2,0,2,0,2,2,1,2,2,2,2,2,3,2,2,1,2,1],\"rators\":[\"PXAcsKkssS2yLyDv2\",\"tAF9Gf6PiGogbZuWs\",\"s5M5RvgqR9BhB9JoC\",\"gb9rvGus2Jv7bjZSs\",\"C4QntmkYtB89GNtpd\",\"AasGs8AeX9Lcb9xJn\",\"wwMcJQRvf3X59Jyev\",\"kBmhcwkCqxiy4GwiZ\",\"F2aeZ4zqupp7a8SkW\",\"DMH5qWYAScj9hNaRv\",\"gP5jeJZWkRoasDRa9\",\"JWSJRFbkiwwKTW8Sz\",\"BeFnbPbMnAM2SjBdZ\",\"4CFzv558qbGcpQwc4\",\"2fxapKr8XGdNeaKi2\",\"yTtDT6jAhgCp5BvRR\",\"DXBbJKYFTBi2pxR7c\",\"2xB3aoGbxxxcMEJwe\",\"Q2q7wd5e5cfCrwPxq\",\"v3fjGuc7Pq4yjFygS\",\"5aZnA8Br3u7Wf5ENg\",\"yZvzB3qFb8pkHy4dg\",\"u5u2YpHXiNgzDNJdX\",\"Z85ajWfZ4jDPkbvR4\",\"Jg8ZSRXe3NoDMCqGu\",\"8JyqsSbN2FJXPr3cw\",\"jeuoearPPTcGPgXhf\",\"mxX4rH5ELYkdZ2Mbw\",\"cR3ibTMxLyEdDFCHY\",\"HQxp7NcdvF92G7bYS\",\"orFLgPDw9H5MDzmwo\",\"4tgBydK887PitgAoi\",\"hnyhBFWwNCz9mDfSi\",\"dHZqT6h4JMwk5fPC8\",\"aRqQ42J5zqCmBNd8w\",\"N2wnZXkhDH86mgjQ8\",\"sz8ufn9i8zeiGWpAy\",\"PSrcg6fy835R4c5CW\",\"vLrq4dEDMM2wd68Dc\",\"9Ly8afdtofp8DXzrt\",\"jNvegJWCk5HCtEMbK\",\"8LfTheFzvicameoz9\",\"v9KtC8YLbMWmXiW2H\",\"2QGRoQn2dRq3scu7k\",\"2iFe3EHEH2YdhSKrs\",\"8PwfYqoDQFThzNtvf\",\"ZNnsMeNkdDhHjSrZb\",\"jpiYk9LbC3oDg84dz\",\"So6PHm74mfJuY2WTs\",\"HF28xZKSLM9wEuqNg\",\"eLkj3Zb2DqiW4AEEh\",\"Yp7uvStL97cC9fKkY\",\"gJYuGdkXEWWmGRLzu\",\"mybpojPXaZigaqsAD\",\"KRSKj7ikX2ytWFmod\",\"9uZpgAtSuPZ7W7DL6\",\"CEd9tLdXeDeNHSzys\",\"q5a96XumccZyhQNyL\",\"RosFXZYJkcRwjkaog\",\"J5T8gZqiZXFuFDTQ7\",\"aEm3Wvj2rFYRL8Lrb\",\"kGwkJGKrHotSoTPuL\",\"Jqk2uJZZxEv5wZFze\",\"Cc2Cgj4MWXZxsTooC\",\"kYWb8BwpKwunQkxeX\",\"DEDniTrstQYGounXT\",\"M8dQuMrEpP8Hc3tHN\",\"9pzFiFK3ANLjQfnr2\",\"KdNDysEsy2TW5QRJ2\",\"gSFJPsMXnqAog3Q9f\",\"5cmvoGYHLNmT8n6jP\",\"FEYpu9RWysAgW3XnP\",\"LWCzZ8mb8gwrRNGfq\",\"mDWNyaaQ9hvPCRzSd\",\"TR5aWdDKP6iaL6mGK\",\"sbJcFfQjQ59Wfg4Cd\",\"MKT7khMBGXzA22ykf\",\"a777e8chPvJkY3tKa\",\"nfXGHENb5md7m355s\",\"FzxTj4GuujhwpZM7y\",\"4rwxLqLs2mNZNg8NB\",\"ahk2qiXKJA753wAJk\",\"yKttxy9JGn5Jzwuj6\",\"ENsSYogEHHeDSrFod\",\"DrkR35NqnP9NDLbq6\",\"XrqNzJ2FRG8HnGiR6\",\"4yNLEwL2rsx4EE5Nt\",\"2ptN2mhjFwFcHyPZd\",\"NG8PWBSjsM8mMhQEq\",\"H4abACFDH5t8CnnyH\",\"3cF6NXq3ZEwdkgSjb\",\"ZrKCkX7xxGGZzauFW\",\"Wv2vJnEj8ywNmARoF\",\"n2BRY9X8899dcG8Bw\",\"syRNbbPdLCGXbH2Gy\",\"KtWcQ6Hnmpxq7Cs9u\",\"NNE5HNRXAkmhrWgyQ\",\"iojEnnY9FsMfYzp6f\",\"2innwjWqxJHo4eRGh\",\"YcCLwitFMAEJSnxAW\",\"CwXsu25ygLEwQbmQC\",\"6kz7jjJS8W4tikYQT\",\"q6QsMYNMpPNtmyTeW\",\"Pe8vWpDHRuH9nSGKW\",\"rfyEkETeoS96QNH4e\",\"iS5BrkGLzJyPK7nKt\",\"yjtdwc2AC4jA2RWtn\",\"hRiMXDZNAzyPd5tpt\",\"X5MqeHyPh6cSQCXnk\",\"6SKDJwXpev4qPSzgM\",\"PhceyfmFntJcn5Fhf\",\"HqmxnQJM66Y57twhn\",\"ta5CrWnBCRusD2WMo\",\"R4SjTgDnpigJYDLyL\",\"oBcs8GLX2ZFLXQy8y\",\"TTgP9jcqGxCfKotZ3\",\"Q9afpRu3u8zuWuzLQ\",\"YA7SDhpgEtsqynvNL\",\"zd9FLSzsGz3evKafy\",\"b9YQPLb9ZPSADdHXX\",\"7K2GEb5TZRtSpyyGS\",\"w2HhxvSLmDhaGCAjE\",\"i5iePG5GqhJJ8HEoB\",\"RehJGBFS6CYiWdjZx\",\"TPhfpB5tzQWSSn67n\",\"KLmLKaJPfsYxp42p2\",\"k2Eo3wyfZZ6KxvKhN\",\"p8qqFdJ3FSk5x9z3G\",\"tpxMgkGSHwBjS95Ta\",\"mG8HqKiAQFTdRZthG\",\"EMJ6uvBZkie429gdg\",\"gXTAie79kiw28tx5u\",\"9CoqdidjM9KbeKnHY\",\"Kh3Pc2ZRusurLaMyP\",\"DPi9QGLctq2y76KuE\",\"QRv96jmNaYsWkxQEG\",\"H5BH9LCBDJgTF9hXD\",\"GGprTwrkjuccmrQRg\",\"8WpvgSbQciTQWdd8T\",\"wRttWTM59y8m5mx7x\",\"J3upzLHuEwXH7Z2hx\",\"9bQyb6rW7xfE4vgrR\",\"dYPkStFnLvAMsHSzZ\",\"9qZCkf7gio5b4voFF\",\"cAP3n5NY64uoMwzRR\",\"KJCDwGkoXh8qtbbKr\",\"dBzwBtRjZqB98DJeB\",\"dj5AyG5fWP8FdsSmZ\",\"5XiuAqicKD4hBdu63\",\"RGMbFMZXJr7DhcAJy\",\"JS3hNM3XXkxPdg3yk\",\"5HCu9Ydd86QgHDRNP\",\"d8qtzoLB264iP8tdY\",\"kNrnnMxhFZztMTBAX\",\"Kd9cbANRqNspHmByA\",\"HuNF3xTBzmatyGSTm\",\"buX4mCQhtXCfBjeno\",\"eYfPWvZwnJQkHbSTK\",\"5S9nX4rKsnCcnv4Cz\",\"5hQnRWiKkhgKJXNMP\",\"sHjfbGQGLHE6JR6qu\",\"o4ixjQGSaYqA2JoM4\",\"GGdmhAvxXhqhhibJN\",\"MXGuntvz3byrP6WJc\",\"yod5YhKtPqw2GfG9B\",\"Ds7L5bksw2QRHjrKL\",\"axdSNLZpiCDF8RS6n\",\"EfxwqhYdapX3dMQC2\",\"CHvzhtXnv8HTbPQ56\",\"srJ34BaybkQh3qRkM\",\"qAby4AWXmTNeusvg3\",\"8BFSTCnoe2QggN64c\",\"wjc4iejpErBhxWwHo\",\"T6iBEE2jp7f7iEF2P\",\"66a9xX73nmTEuKs9k\",\"XD5nmvKQchKezPXhy\",\"NzbRqGWspQnWMoDrF\",\"AFfw7cGg83uYk2Miy\",\"YmQb9Mo4Xcg2vzgbn\",\"BrTDhPJcACL2bsrpJ\",\"2EbDCCJJvCfKkbYia\",\"PC3pLs36zNzpRDSuE\",\"Wpn95NqWxncQrwNgz\",\"LQxof8pGabGuWP7Gn\",\"AJexRBN9cYQmqvYu6\",\"c2q7mY39z5JPEMCaM\",\"mvJBakQ35CWAnbbEZ\",\"v2uuoaRYZyZRStMSf\",\"2PufnQcsHsfymufX3\",\"ey3CASd6Je5LEJzfB\",\"R6YxHWAiLgKwy5YvC\",\"rrSC943cCKNG48sH4\",\"X4rzfxGgxx6CS7Bpz\",\"K6MfKMytoJJuSGewP\",\"RoGGD5cpHb4ftdLDv\",\"qzXAMXsHZGT8o5hTA\",\"pduNK68oazqQTtbLp\",\"2u9wghjCydey6aWys\",\"hR7GMiqGap4CzEWSy\",\"Afnps7TJQuS9sipMb\",\"4Lwjr34ypKNQNQCar\",\"4TmgHkn5vqyHK3sYC\",\"SDnSk8mGaAg2e77Sb\",\"d9LBRxvADNBB5QJMB\",\"dzS6WBTMHyFEag6Fp\",\"uGuS9YRXW2nj4p6zf\",\"GTKsdeEihE636Le9i\",\"yAouD3PxzED8a4gap\",\"v74fPhegePGxCm2uk\",\"B4y8aoyXJtskYPFEL\",\"AQSqD9oNv2uPfxZCR\",\"o2AEoyCijeNx5MEqW\",\"mw9464S5dnenqzvpm\",\"hpT9yYe5R45poHrYR\",\"Qyfyyw6oC4EHAndzo\",\"5QN8R22z43SrwoHDz\",\"haWWTT8HxWCgdqEzC\",\"Zyg9xAm6EuH4u3Lo5\",\"Wi4H6ayKsNDWWQCG5\",\"5FmhHNDpgkKR86tRe\",\"E2hpke7mHxAWsw5t9\"],\"total\":241,\"quality\":[3,5,2,5,5,5,4,5,4,5,5,5,5,5,5,4,4,5,5,5,5,4,5,5,5,5,5,5,5,4]},\"flags\":0},\"summary\":\"Create a function which constructs a rectangular birthday cake, based on someone's name and age! Build it out of strings in a list and makes sure to surround the birthday message with the character that fits the rule:\\n\\nIf the age is an even number, surround the message with \\\"#\\\".\\nIf the age is an odd number, surround the message with \\\"*\\\".\\n\\nOther important rules\",\"tags\":[\"arrays\",\"formatting\"],\"timestamp\":{\"$date\":1582146230443},\"title\":\"Birthday Cake\",\"quality\":4.633333333333334,\"family\":[{\"_id\":\"4QksBtqAEBJRB8bEK\",\"language\":\"cpp\"},{\"_id\":\"diiEDD4JQyysFR7zh\",\"language\":\"java\"},{\"_id\":\"BBFPC6HhZ2ZFv3fpK\",\"language\":\"javascript\"},{\"_id\":\"MNpLAgh7NiLRTJRPe\",\"language\":\"php\"},{\"_id\":\"994QjWPmdhaR94DeF\",\"language\":\"python3\"},{\"_id\":\"X9vWYqquZ7Zrjczkj\",\"language\":\"ruby\"}]}}"]