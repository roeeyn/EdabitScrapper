a["{\"msg\":\"result\",\"id\":\"1496\",\"result\":{\"_id\":\"jtN8gQ5KDoqEJ8HMx\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"def nom_nom(lst):\\n\\t\",\"difficulty\":2.0757575757575757,\"familyId\":\"StK8evZGneQG7aEwJ\",\"instructions\":\"A number can **eat** the number to the right of it if it's **smaller** than itself. After eating that number, it becomes the sum of itself and that number. Your job is to create a function that returns the final list after the leftmost element has finished \\\"eating\\\".\\n\\n### Examples\\n```\\n[5, 3, 7] ➞ [8, 7] ➞ [15]\\n\\n# 5 eats 3 to become 8\\n# 8 eats 7 to become 15\\n```\\n```\\n[5, 3, 9] ➞ [8, 9]\\n\\n# 5 eats 3 to become 8\\n# 8 cannot eat 9, since 8 < 9\\n```\\n```\\nnom_nom([1, 2, 3]) ➞ [1, 2, 3]\\n\\nnom_nom([2, 1, 3]) ➞ [3, 3]\\n\\nnom_nom([8, 5, 9]) ➞ [22]\\n```\\n\\n### Notes\\nTest input contains only a list of numbers.\",\"lab\":\"Test.assert_equals(nom_nom([1, 2, 3]), [1, 2, 3])\\nTest.assert_equals(nom_nom([2, 1, 3]), [3, 3])\\nTest.assert_equals(nom_nom([8, 5, 9]), [22])\\nTest.assert_equals(nom_nom([5, 3, 7]), [15])\\nTest.assert_equals(nom_nom([5, 3, 9]), [8, 9])\\nTest.assert_equals(nom_nom([6, 5, 6, 100]), [17, 100])\",\"language\":\"python3\",\"summary\":\"A number can eat the number to the right of it if it's smaller than itself. After eating that number, it becomes the sum of itself and that number. Your job is to create a function that returns the final list after the leftmost element has finished \\\"eating\\\".\\n\\nExamples\\n[5, 3, 7] ➞ [8, 7] ➞ [15]\\n\\n5 eats 3 to become 8\\n8 eats 7 to become 15\\n[5, 3, 9] ➞ [8, 9]\\n\\n5 e\",\"tags\":[\"arrays\",\"math\",\"logic\"],\"timestamp\":{\"$date\":1552597773616},\"title\":\"Seven Ate Nine\",\"stats\":{\"completed\":{\"total\":139,\"ratings\":[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,2,1,2,3,1,2,3,3,2,1,3,3,3,3,2,0,2,2,3,3,2,2,4,3,3,2,3,1,5,3,1,3,0,2,0,2,2,2,3,3,1,2,2,2,1,1,2,2,1,3,3,1,2,2,3,1,3,3,2,2,2,2,2,2,3,3,2,3,2,3,1,3,1,2,1,1,2,2,3,1,1,3,2,3,0,3,5,4,2,3,0,0,2,1,1,3,0,0,0,2,1,1,3,0,0,2,3,2,3,3,3,3,5,1,3,3],\"rators\":[\"BkPgkDQGHm66X4Qai\",\"eb5XAGpwKA48ya99p\",\"Jqk2uJZZxEv5wZFze\",\"qaR8DnWrTk8Mus5Q2\",\"35LM2gn6MyXPgYFbA\",\"8JyqsSbN2FJXPr3cw\",\"yZvzB3qFb8pkHy4dg\",\"gb9rvGus2Jv7bjZSs\",\"tAF9Gf6PiGogbZuWs\",\"g25ehEEwEchxXteaJ\",\"M8jrv2FfpMQp9Qzpx\",\"T3ZAuoMrJjvZwN55B\",\"FkCM6nNgxYepHvWvM\",\"cF8nvyGwfFKE5b2iy\",\"5J4tAkdA45c76xAfk\",\"ab7BsQuhDo3QgE6bh\",\"qvEvDcL32a5F4Tg6c\",\"Mb5sjE2qnvjL2xcBG\",\"Y3KkPrBzMBgMiqaQ6\",\"MXjxGML2X75x64vJo\",\"nc7bRhkxgKyqusYe3\",\"PFjMZGHNAPTkgd7tq\",\"5dvDGoRaJwmYTmRRB\",\"ahWFxnaxt9bXSA4f3\",\"inEQthEoPuP337WTY\",\"tHEH9MBHBAGvhgJGd\",\"c89SxuYYjfeRh4toG\",\"eoo54vPGzwD3HZuHC\",\"AF6LgdKhEdzwgRJom\",\"7g3vZaQXhLpxrajyg\",\"KWHYqCuXcKrzxtqHt\",\"nF9pCCzbGDhzvWgaw\",\"C9LKGu2g5hSijvDzA\",\"kQH5b8MXJunh84Czq\",\"jHrtWDGBhkbuWa7fG\",\"zjQPuEyZ38tTW6P5w\",\"jYJ26SiLKBu5GRumq\",\"s5M5RvgqR9BhB9JoC\",\"HqmxnQJM66Y57twhn\",\"YTTTwEP9F7mBe5Xgi\",\"2fxapKr8XGdNeaKi2\",\"yoYQqaY6GszuTkNSs\",\"2innwjWqxJHo4eRGh\",\"C4QntmkYtB89GNtpd\",\"AasGs8AeX9Lcb9xJn\",\"8PwfYqoDQFThzNtvf\",\"sJWTa7iWeRoRtqJ8N\",\"mDWNyaaQ9hvPCRzSd\",\"pmgFEciNrd3ES9tuu\",\"jpiYk9LbC3oDg84dz\",\"y8ci4crEusJKj7uj4\",\"aEm3Wvj2rFYRL8Lrb\",\"ZNnsMeNkdDhHjSrZb\",\"55RQznnuTGpsj3EXd\",\"Lfut9z3euZ3odxFcH\",\"cR3ibTMxLyEdDFCHY\",\"YRstQuthRkFeBiXug\",\"qS5Xbh5sBC28e6j7E\",\"gSFJPsMXnqAog3Q9f\",\"gJYuGdkXEWWmGRLzu\",\"KdNDysEsy2TW5QRJ2\",\"n2BRY9X8899dcG8Bw\",\"HF28xZKSLM9wEuqNg\",\"Yp7uvStL97cC9fKkY\",\"hab8YixsXxe4CcZpP\",\"bJxaKHJqR82EWw8Su\",\"JS3hNM3XXkxPdg3yk\",\"knEz9y3xqhP3oY4sf\",\"s6qiPXptvyxxEy3vm\",\"4rwxLqLs2mNZNg8NB\",\"qaGY47ZiaCqSiqSS5\",\"DEDniTrstQYGounXT\",\"W5TajitmCyxz87zAC\",\"M8GQ4xu7hzfsD9LBs\",\"hnyhBFWwNCz9mDfSi\",\"fK2ousiaKc5gvevyW\",\"iojEnnY9FsMfYzp6f\",\"dzS6WBTMHyFEag6Fp\",\"iS5BrkGLzJyPK7nKt\",\"zZDaXBxMzTCBhNkgL\",\"KZ2xddpM2f9JRaryB\",\"yjtdwc2AC4jA2RWtn\",\"Ecg4m7srYGgZsb4Ck\",\"7txFzDQ43vJ7qCY88\",\"vSTK7aCEH576sA65R\",\"f2BoqyCpgnmjEjLqx\",\"gMjAMD8XPK9sbx7eT\",\"orFLgPDw9H5MDzmwo\",\"PXAcsKkssS2yLyDv2\",\"qYDRywWRZdswy4b6e\",\"8fZxjQfuXw5HMSRJM\",\"DPi9QGLctq2y76KuE\",\"xn7uGNKeAwPEkP9oA\",\"yDu6dgHnX9oDxzL87\",\"cD6q65iNycYDvhBag\",\"dkcmCKwqApX5jBggc\",\"kXEfD7xxEyWd7oxxL\",\"J3upzLHuEwXH7Z2hx\",\"QRv96jmNaYsWkxQEG\",\"J5T8gZqiZXFuFDTQ7\",\"eEZ8zeWX8b3SWs84P\",\"dPLhPPxafFJDaRW9G\",\"gXTAie79kiw28tx5u\",\"StNu7DPyTgEStZsMY\",\"cAP3n5NY64uoMwzRR\",\"oBcs8GLX2ZFLXQy8y\",\"JKb5rhL6DKcCAypF9\",\"qZQxPQ2kaNKAMesHT\",\"GGdmhAvxXhqhhibJN\",\"AFfw7cGg83uYk2Miy\",\"LQxof8pGabGuWP7Gn\",\"ksBP8Yt7mk27N8Y4j\",\"BdnE4RS5puoxo92mA\",\"2PufnQcsHsfymufX3\",\"gKnWjDjwrJh7MK2df\",\"T6iBEE2jp7f7iEF2P\",\"d8qtzoLB264iP8tdY\",\"yod5YhKtPqw2GfG9B\",\"8sNv5PTHa7XQ8bNqR\",\"suArq5BbSy7gD6xri\",\"RoGGD5cpHb4ftdLDv\",\"CHvzhtXnv8HTbPQ56\",\"5HCu9Ydd86QgHDRNP\",\"nkH3HfJXLMNcBMM79\",\"AQSqD9oNv2uPfxZCR\",\"ey3CASd6Je5LEJzfB\",\"Ds7L5bksw2QRHjrKL\",\"3KkyQm77zsew58Dc2\",\"nWFX7WpqFGKcyDDaR\",\"buX4mCQhtXCfBjeno\",\"ExtLwnLBEiWJxAskL\",\"rRhWLbHa3iywLCCLu\",\"9pzFiFK3ANLjQfnr2\",\"Qyfyyw6oC4EHAndzo\"],\"quality\":[5,3,5,4,5,5,4,5,5,5,5]},\"tests\":{\"score\":0,\"rators\":[\"BkPgkDQGHm66X4Qai\"]},\"instructions\":{\"score\":2.7,\"rators\":[\"BkPgkDQGHm66X4Qai\"],\"voters\":[\"eb5XAGpwKA48ya99p\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.636363636363637,\"family\":[{\"_id\":\"tmGfpenPtBadNPTQh\",\"language\":\"cpp\"},{\"_id\":\"dHAk8zPwacSev6Hmv\",\"language\":\"javascript\"},{\"_id\":\"jtN8gQ5KDoqEJ8HMx\",\"language\":\"python3\"},{\"_id\":\"6ntbtnRpBQiFBo9TL\",\"language\":\"ruby\"}]}}"]