a["{\"msg\":\"result\",\"id\":\"879\",\"result\":{\"_id\":\"R4D59C9CQbJvqWaKd\",\"author\":\"Werdna\",\"authorId\":\"buX4mCQhtXCfBjeno\",\"code\":\"def batting_avg(lst):\\n\\t\",\"difficulty\":1.435897435897436,\"familyId\":\"DkY9Akoopjst4cxCy\",\"instructions\":\"A baseball  player's batting average is calculated by the following formula:\\n\\n```\\nBA = (number of hits) / (number of official at-bats)\\n```\\n\\nBatting averages are always expressed rounded to the nearest thousandth with no leading zero. The top 3 MLB batting averages of all-time are:\\n\\n1. Ty Cobb .366\\n2. Rogers Hornsby .358\\n3. Shoeless Joe Jackson .356\\n\\nThe given list represents a season of games. Each list item indicates a player's `[hits, official at bats]` per game. Return a string with the player's seasonal batting average rounded to the nearest thousandth.\\n\\n### Examples\\n```\\nbatting_avg([[0, 0], [1, 3], [2, 2], [0, 4], [1, 5]]) ➞ \\\".286\\\"\\n\\nbatting_avg([[2, 5], [2, 3], [0, 3], [1, 5], [2, 4]]) ➞ \\\".350\\\"\\n\\nbatting_avg([[2, 3], [1, 5], [2, 4], [1, 5], [0, 5]]) ➞ \\\".273\\\"\\n```\\n\\n### Notes\\n- The number of hits will not exceed the number of official at-bats.\\n- The list includes official at-bats only. No other plate-appearances (walks, hit-by-pitches, sacrifices, etc.) are included in the list.\\n- HINT: Think in terms of total hits and total at-bats.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"# Author: ABO\\n\\nTest.assert_equals(batting_avg([\\n      [0, 0],\\n      [1, 3],\\n      [2, 2],\\n      [0, 4],\\n      [1, 5],\\n    ]), '.286')\\nTest.assert_equals(batting_avg([\\n      [2, 5],\\n      [2, 3],\\n      [0, 3],\\n      [1, 5],\\n      [2, 4],\\n    ]), '.350')\\nTest.assert_equals(batting_avg([\\n      [2, 3],\\n      [1, 5],\\n      [2, 4],\\n      [1, 5],\\n      [0, 5],\\n    ]), '.273')\\nTest.assert_equals(batting_avg([\\n      [1, 4],\\n      [0, 5],\\n      [4, 4],\\n      [1, 5],\\n      [0, 5],\\n    ]), '.261')\\nTest.assert_equals(batting_avg([\\n      [3, 3],\\n      [0, 5],\\n      [0, 4],\\n      [3, 5],\\n      [1, 5],\\n    ]), '.318')\\nTest.assert_equals(batting_avg([\\n      [0, 5],\\n      [1, 2],\\n      [1, 1],\\n      [4, 5],\\n      [1, 6],\\n      [2, 5],\\n      [0, 4],\\n      [3, 3],\\n      [0, 4],\\n      [0, 3],\\n    ]), '.316')\\nTest.assert_equals(batting_avg([\\n      [1, 6],\\n      [1, 4],\\n      [0, 4],\\n      [3, 6],\\n      [2, 5],\\n      [1, 4],\\n      [1, 6],\\n      [0, 1],\\n      [2, 5],\\n      [2, 6],\\n    ]), '.277')\\nTest.assert_equals(batting_avg([\\n      [2, 4],\\n      [1, 6],\\n      [2, 6],\\n      [1, 4],\\n      [4, 4],\\n      [3, 6],\\n      [2, 5],\\n      [0, 4],\\n      [0, 5],\\n      [0, 5],\\n    ]), '.306')\\nTest.assert_equals(batting_avg([\\n      [2, 6],\\n      [0, 3],\\n      [2, 5],\\n      [1, 3],\\n      [4, 6],\\n      [1, 4],\\n      [0, 5],\\n      [0, 5],\\n      [0, 6],\\n      [3, 3],\\n    ]), '.283')\\nTest.assert_equals(batting_avg([\\n      [1, 6],\\n      [0, 5],\\n      [0, 6],\\n      [0, 3],\\n      [2, 4],\\n      [3, 3],\\n      [1, 6],\\n      [3, 4],\\n      [0, 5],\\n      [1, 5],\\n    ]), '.234')\\nTest.assert_equals(batting_avg([\\n      [1, 1],\\n      [1, 5],\\n      [0, 3],\\n      [1, 3],\\n      [2, 6],\\n      [0, 4],\\n      [0, 5],\\n      [1, 5],\\n      [1, 6],\\n      [2, 2],\\n    ]), '.225')\\nTest.assert_equals(batting_avg([\\n      [2, 6],\\n      [0, 5],\\n      [1, 4],\\n      [2, 4],\\n      [4, 5],\\n      [1, 6],\\n      [2, 2],\\n      [0, 4],\\n      [1, 5],\\n      [0, 5],\\n    ]), '.283')\\nTest.assert_equals(batting_avg([\\n      [0, 3],\\n      [1, 5],\\n      [3, 4],\\n      [0, 6],\\n      [1, 2],\\n      [3, 4],\\n      [4, 5],\\n      [0, 5],\\n      [0, 5],\\n      [1, 5],\\n    ]), '.295')\\nTest.assert_equals(batting_avg([\\n      [3, 3],\\n      [0, 1],\\n      [0, 3],\\n      [3, 5],\\n      [1, 5],\\n      [1, 1],\\n      [2, 6],\\n      [0, 4],\\n      [1, 5],\\n      [2, 6],\\n    ]), '.333')\\nTest.assert_equals(batting_avg([\\n      [1, 6],\\n      [1, 5],\\n      [1, 6],\\n      [3, 5],\\n      [3, 5],\\n      [1, 5],\\n      [1, 4],\\n      [2, 6],\\n      [1, 5],\\n      [3, 6],\\n    ]), '.321')\",\"language\":\"python3\",\"quality\":4.576923076923077,\"summary\":\"A baseball  player's batting average is calculated by the following formula:\\n\\nBA = (number of hits) / (number of official at-bats)\\n\\nBatting averages are always expressed rounded to the nearest thousandth with no leading zero. The top 3 MLB batting averages of all-time are:\\n\\nTy Cobb .366\\nRogers Hornsby .358\\nShoeless Joe Jackson .356\\n\\nThe given list represents a\",\"tags\":[\"arrays\",\"formatting\",\"strings\",\"numbers\"],\"timestamp\":{\"$date\":1614893488451},\"title\":\"Baseball Batting Average\",\"stats\":{\"completed\":{\"total\":178,\"ratings\":[1,1,1,1,1,0,0,1,2,1,2,1,1,0,1,2,2,2,1,1,1,2,1,1,0,1,2,0,2,2,1,1,0,2,2,1,0,2,5,2,2,2,2,2,1,2,2,1,1,2,0,1,2,1,2,1,1,2,1,0,2,2,2,0,2,2,2,5,2,2,2,1,1,1,2,2,0,1,2,2,2,2,0,2,2,1,2,2,1,2,0,2,2,1,1,2,0,2,0,3,1,2,2,2,2,2,1,2,2,1,0,1,2,2,1,1,2],\"quality\":[5,5,4,5,5,5,4,5,4,5,5,4,5,5,5,5,4,4,5,5,5,5,5,2,5,5,5,4,5,4,5,5,5,3,3,5,5,4,4,5,5,4,5,5,3,5,5,5,5,4,5,4],\"rators\":[\"buX4mCQhtXCfBjeno\",\"iS5BrkGLzJyPK7nKt\",\"pPpmP7xeJzGgK362R\",\"JKbEBybAsiKrmcqof\",\"QRv96jmNaYsWkxQEG\",\"gJYuGdkXEWWmGRLzu\",\"gb9rvGus2Jv7bjZSs\",\"EfxwqhYdapX3dMQC2\",\"FEYpu9RWysAgW3XnP\",\"X4rzfxGgxx6CS7Bpz\",\"zd9FLSzsGz3evKafy\",\"PXAcsKkssS2yLyDv2\",\"fMqM2TQBS3dBmLJCR\",\"PC3pLs36zNzpRDSuE\",\"cAP3n5NY64uoMwzRR\",\"YcCLwitFMAEJSnxAW\",\"XD5nmvKQchKezPXhy\",\"oBcs8GLX2ZFLXQy8y\",\"BrTDhPJcACL2bsrpJ\",\"iojEnnY9FsMfYzp6f\",\"Ds7L5bksw2QRHjrKL\",\"hmCW47w9iFLjdFc88\",\"srJ34BaybkQh3qRkM\",\"KJCDwGkoXh8qtbbKr\",\"AFfw7cGg83uYk2Miy\",\"8JyqsSbN2FJXPr3cw\",\"o4ixjQGSaYqA2JoM4\",\"DEDniTrstQYGounXT\",\"rfyEkETeoS96QNH4e\",\"p8qqFdJ3FSk5x9z3G\",\"eMuCpJ2spXWkJjWNz\",\"3cF6NXq3ZEwdkgSjb\",\"3nied3n8KG8RSNixH\",\"cR3ibTMxLyEdDFCHY\",\"66a9xX73nmTEuKs9k\",\"5HCu9Ydd86QgHDRNP\",\"tAF9Gf6PiGogbZuWs\",\"c2q7mY39z5JPEMCaM\",\"J3upzLHuEwXH7Z2hx\",\"J5T8gZqiZXFuFDTQ7\",\"8PwfYqoDQFThzNtvf\",\"s5M5RvgqR9BhB9JoC\",\"Wpn95NqWxncQrwNgz\",\"TZcYZfqBSXGjcm3NE\",\"bxrb3Pvro3Ze62mmZ\",\"jWbd7SYDzLPjc9EDh\",\"4Lwjr34ypKNQNQCar\",\"2PufnQcsHsfymufX3\",\"2QGRoQn2dRq3scu7k\",\"g4NFrcCNJ3Xxchb2i\",\"RoGGD5cpHb4ftdLDv\",\"Fb2wehA7QgTFWry2x\",\"xqYQMujmvgQ78bnJc\",\"cp5smeXkoJGBGFyGB\",\"XHShZ3WMPgGEA2vkR\",\"jL4y5fTJAMBjhZmko\",\"8BFSTCnoe2QggN64c\",\"GGdmhAvxXhqhhibJN\",\"dJzNF59j2p8jWZxiQ\",\"gXTAie79kiw28tx5u\",\"NzbRqGWspQnWMoDrF\",\"Cc2Cgj4MWXZxsTooC\",\"ghMkPtdFCpM6w8nax\",\"NfMJuiBk6FN5Jc6ow\",\"T6iBEE2jp7f7iEF2P\",\"vA3sBoGvJmYKZHdmE\",\"no46qNkTbNeHepe64\",\"p6CqBEdjxfdrsRSrs\",\"bL9hGcDttQKxodf2W\",\"vCeeMuYDbz3MB4vsk\",\"Yp7uvStL97cC9fKkY\",\"9Gf6g4fuKc3uou9w2\",\"QP5mdQbYEvYMmzpgk\",\"iyT7wAXNiYCbRRMNv\",\"sKfrD9gjCDHuqLzSk\",\"Dh3qTd94ZAtrFt5va\",\"3jsPXMbLZPAw5bLBy\",\"yjtdwc2AC4jA2RWtn\",\"tdfY4iBvD7oh2ufnN\",\"8uiLiJcmWxWe6qw65\",\"hsrNYf3WbexXJKhCq\",\"2EbDCCJJvCfKkbYia\",\"NDL7N2Hq4jua6Jevk\",\"CHvzhtXnv8HTbPQ56\",\"qNszsXx28cTxvGSNj\",\"wjc4iejpErBhxWwHo\",\"DwetpbChQM4r6Gwah\",\"oig8ig9SE9RZa8ttL\",\"yikJLCKcpgji5kwHD\",\"kRLZtRJwJEBZkFBxd\",\"b6dDPCFzttKobEBe5\",\"RvcdfoxNfmbsu6SjX\",\"82nyWEcznkx7ZA9ip\",\"AmdiwjipTnwSfFNxD\",\"4z4h4Ljr575FyeZqT\",\"pCH2RMQftTECiuPcx\",\"iBHx7eL6anoBnF7yQ\",\"CKHKhvJcq9jNMqrmd\",\"53dYiAHjZxvAscWfm\",\"nc7bRhkxgKyqusYe3\",\"Si6jT3DnRMXYd27k9\",\"Cuy7McJ5y8BkXRRk9\",\"N2wnZXkhDH86mgjQ8\",\"GTKsdeEihE636Le9i\",\"sHjfbGQGLHE6JR6qu\",\"yod5YhKtPqw2GfG9B\",\"2fxapKr8XGdNeaKi2\",\"5XiuAqicKD4hBdu63\",\"yr822PZmmiDDenxpB\",\"AJexRBN9cYQmqvYu6\",\"z2YRmjGdvCcE3BF9Z\",\"4X8TcY8uPwgFvigYc\",\"hrGSHEWYiSX9KxJ5q\",\"AasGs8AeX9Lcb9xJn\",\"utTuvGdmu2sBHWBhQ\",\"apw6sQyACz5aCGicJ\",\"aoeKFDdQRpHDqM4KW\",\"R6YxHWAiLgKwy5YvC\",\"rrSC943cCKNG48sH4\",\"fSQSHjW3e72MrWxbD\",\"HqmxnQJM66Y57twhn\",\"qD2LrwaDrSdiybLKY\",\"pduNK68oazqQTtbLp\",\"qzXAMXsHZGT8o5hTA\",\"9pzFiFK3ANLjQfnr2\",\"MKT7khMBGXzA22ykf\",\"ihW86QeMghXp49kqC\",\"2Qk2mFu9HBFzrB24i\",\"hR7GMiqGap4CzEWSy\",\"L3aEQ6uTe2a3AyMWe\",\"4RY3zj9C2t8GGefhi\",\"2iFe3EHEH2YdhSKrs\",\"796v8eRqahP6wpLdL\",\"ey3CASd6Je5LEJzfB\",\"4TmgHkn5vqyHK3sYC\",\"YA7SDhpgEtsqynvNL\",\"T6Rm8mREPMZSftzrC\",\"Jqk2uJZZxEv5wZFze\",\"jkbavR2ATFJcpmo8M\",\"u5u2YpHXiNgzDNJdX\",\"uGuS9YRXW2nj4p6zf\",\"p7js9trz2zk2RorCR\",\"DPi9QGLctq2y76KuE\",\"aEm3Wvj2rFYRL8Lrb\",\"hpT9yYe5R45poHrYR\",\"dzS6WBTMHyFEag6Fp\",\"dSd7wHgXGQeG5BQ2P\",\"AMpQSjKsRqhCDyS2j\",\"rCrbqMiaGPgHYTNxu\",\"yAouD3PxzED8a4gap\",\"AQSqD9oNv2uPfxZCR\",\"Qyfyyw6oC4EHAndzo\",\"B4y8aoyXJtskYPFEL\",\"qB6KSTYC6H2TQEQY6\",\"o2AEoyCijeNx5MEqW\",\"mxX4rH5ELYkdZ2Mbw\",\"5QN8R22z43SrwoHDz\",\"dj5AyG5fWP8FdsSmZ\",\"nFbmNzMQ38TncmfQX\",\"StNu7DPyTgEStZsMY\",\"BJp2WkwLWGHHB5oQW\",\"Wi4H6ayKsNDWWQCG5\",\"E2hpke7mHxAWsw5t9\",\"WQubx7DAkG6WZE8FA\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"MEZtqvEeMbGg2YKtt\",\"language\":\"javascript\"},{\"_id\":\"GEDzF9MkZxKazXHR2\",\"language\":\"php\"},{\"_id\":\"R4D59C9CQbJvqWaKd\",\"language\":\"python3\"},{\"_id\":\"4HNrqEDQYzivL4fFz\",\"language\":\"ruby\"}]}}"]