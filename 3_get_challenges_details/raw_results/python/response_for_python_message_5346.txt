a["{\"msg\":\"result\",\"id\":\"1386\",\"result\":{\"_id\":\"nm8zFcqcQ9Rzu45Fm\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"def bridge_shuffle(lst1, lst2):\\n\\t\",\"difficulty\":2.035019455252918,\"familyId\":\"ThJrGae893A9ZTBKR\",\"instructions\":\"Create a function to **bridge shuffle** two lists. To **bridge shuffle**, you interleave the elements from both lists in an alternating fashion, like so:\\n\\n```\\nList 1 = [\\\"A\\\", \\\"A\\\", \\\"A\\\"]\\nList 2 = [\\\"B\\\", \\\"B\\\", \\\"B\\\"]\\n\\nShuffled List = [\\\"A\\\", \\\"B\\\", \\\"A\\\", \\\"B\\\", \\\"A\\\", \\\"B\\\"]\\n```\\n\\nThis can still work with two lists of uneven length. We simply tack on the extra elements from the longer list, like so:\\n\\n```\\nList 1 = [\\\"C\\\", \\\"C\\\", \\\"C\\\", \\\"C\\\"]\\nList 2 = [\\\"D\\\"]\\n\\nShuffled List = [\\\"C\\\", \\\"D\\\", \\\"C\\\", \\\"C\\\", \\\"C\\\"]\\n```\\n\\nCreate a function that takes in two lists and returns the bridge-shuffled list.\\n\\n### Examples\\n```\\nbridge_shuffle([\\\"A\\\", \\\"A\\\", \\\"A\\\"], [\\\"B\\\", \\\"B\\\", \\\"B\\\"]) ➞ [\\\"A\\\", \\\"B\\\", \\\"A\\\", \\\"B\\\", \\\"A\\\", \\\"B\\\"]\\n\\nbridge_shuffle([\\\"C\\\", \\\"C\\\", \\\"C\\\", \\\"C\\\"], [\\\"D\\\"]) ➞ [\\\"C\\\", \\\"D\\\", \\\"C\\\", \\\"C\\\", \\\"C\\\"]\\n\\nbridge_shuffle([1, 3, 5, 7], [2, 4, 6]) ➞ [1, 2, 3, 4, 5, 6, 7]\\n```\\n\\n### Notes\\n- Elements in both lists can be strings or integers.\\n- If two lists are of unequal length, add the additional elements of the longer list to the end of the shuffled list.\\n- Always start your shuffle with the first element of List 1.\",\"lab\":\"Test.assert_equals(bridge_shuffle(['A', 'A', 'A'], ['B', 'B', 'B']), ['A', 'B', 'A', 'B', 'A', 'B'])\\nTest.assert_equals(bridge_shuffle(['C', 'C', 'C', 'C'], ['D']), ['C', 'D', 'C', 'C', 'C'])\\nTest.assert_equals(bridge_shuffle([1, 3, 5, 7], [2, 4, 6]), [1, 2, 3, 4, 5, 6, 7])\\nTest.assert_equals(bridge_shuffle([10, 9, 8], [1, 2, 3, 4]), [10, 1, 9, 2, 8, 3, 4])\\nTest.assert_equals(bridge_shuffle(['h', 'h', 'h'], ['a', 'a', 'a']), ['h', 'a', 'h', 'a', 'h', 'a'])\",\"language\":\"python3\",\"summary\":\"Create a function to bridge shuffle two lists. To bridge shuffle, you interleave the elements from both lists in an alternating fashion, like so:\\n\\nList 1 = [\\\"A\\\", \\\"A\\\", \\\"A\\\"]\\nList 2 = [\\\"B\\\", \\\"B\\\", \\\"B\\\"]\\n\\nShuffled List = [\\\"A\\\", \\\"B\\\", \\\"A\\\", \\\"B\\\", \\\"A\\\", \\\"B\\\"]\\n\\nThis can still work with two lists of uneven length. We simply tack on the extra elements from the longer list, like\",\"tags\":[\"arrays\",\"loops\"],\"timestamp\":{\"$date\":1552876388087},\"title\":\"Bridge Shuffle\",\"stats\":{\"completed\":{\"total\":280,\"ratings\":[2,2,2,2,2,2,2,2,2,2,2,2,2,3,2,2,2,2,1,2,2,2,2,2,3,2,2,2,3,1,3,1,2,3,3,3,1,2,1,2,3,1,2,3,2,2,3,2,1,1,2,1,0,0,1,2,3,1,3,2,2,2,1,2,1,2,2,2,3,2,1,2,2,3,3,2,3,2,1,2,3,2,3,4,3,3,2,2,0,2,2,2,3,2,2,3,2,1,3,2,2,2,0,2,2,3,1,1,2,3,1,3,5,2,0,3,1,0,3,2,2,3,2,1,2,2,2,3,3,3,2,2,3,2,3,0,2,2,2,3,1,2,2,3,0,2,1,3,3,3,4,0,3,3,2,2,2,1,0,4,3,3,2,3,3,3,3,3,2,2,1,1,3,3,2,2,2,5,2,2,2,3,0,3,1,3,0,3,3,0,2,3,3,1,3,2,1,3,0,3,3,1,2,3,2,3,0,2,2,3,2,2,2,2,0,0,2,2,1,3,3,3,3,2,3,0,1,0,2,3,0,2,1,2,0,3,3,1,2,3,1,0,1,3,3,3,2,4,1,2,2,2,0,3,3,2,2],\"rators\":[\"BkPgkDQGHm66X4Qai\",\"mP4JatKyBHAJpFK2L\",\"qaR8DnWrTk8Mus5Q2\",\"Jqk2uJZZxEv5wZFze\",\"gb9rvGus2Jv7bjZSs\",\"5uM9326sXAWGh27wr\",\"rnye35ZBjmf2fKSQ8\",\"M8jrv2FfpMQp9Qzpx\",\"8JyqsSbN2FJXPr3cw\",\"yZvzB3qFb8pkHy4dg\",\"tAF9Gf6PiGogbZuWs\",\"4HC75a4BAtjSd8jPv\",\"T3ZAuoMrJjvZwN55B\",\"cF8nvyGwfFKE5b2iy\",\"hsrNYf3WbexXJKhCq\",\"M2k5STtKaQx6tsgWe\",\"FikSPhcrHBpQ4CyGC\",\"ab7BsQuhDo3QgE6bh\",\"MXjxGML2X75x64vJo\",\"9Gf6g4fuKc3uou9w2\",\"4fQSjCThZyxYGfyHf\",\"Y3KkPrBzMBgMiqaQ6\",\"qvEvDcL32a5F4Tg6c\",\"wcjknenWdPRhrRScv\",\"QaE2QnnBbzdiExxPH\",\"kQH5b8MXJunh84Czq\",\"nc7bRhkxgKyqusYe3\",\"QG8wMXkXjuYLyqoE3\",\"rzX5PujzJGJK7mMCi\",\"PFjMZGHNAPTkgd7tq\",\"5dvDGoRaJwmYTmRRB\",\"kac4smmzjCv22Sgjx\",\"AF6LgdKhEdzwgRJom\",\"c89SxuYYjfeRh4toG\",\"XBmvGz2a28Wtuhj3N\",\"ahWFxnaxt9bXSA4f3\",\"7g3vZaQXhLpxrajyg\",\"nF9pCCzbGDhzvWgaw\",\"tHEH9MBHBAGvhgJGd\",\"inEQthEoPuP337WTY\",\"eoo54vPGzwD3HZuHC\",\"TNQ7ixK78HHTLP7it\",\"WYCQt5qMw82RczA5K\",\"WHuF2rdyFpnTs2qMz\",\"mBGpSNpLxBmS68CET\",\"iHKLz8WKC8wnqCKQY\",\"DJD9vvwqQmjfwdGpt\",\"P59rek6gvwTzHvRYa\",\"AYaEkTWLMmfzpwejr\",\"ekKafJ3ap8Btw2BDG\",\"rZ4CjcRom4x2aZHkW\",\"ZLtfKAoGTN9okARqk\",\"tiETrb6KmarBWK5fD\",\"PNJ9ga8zDL2QagomH\",\"JMDx2cfKatEdXHbLf\",\"ba3gwyxvQoCyHqE4x\",\"C9LKGu2g5hSijvDzA\",\"5JFQgt6KFihmXfHKm\",\"dvmrZXzqS7b6ruPXP\",\"CxnvQqTsD7hekBsQp\",\"P8Eeqn9rz4phQGvfx\",\"byqTp7CX5oWSEZp4S\",\"owFyii4XN3DXXNAX5\",\"mfKsnz7JkZC9gsSx9\",\"jHrtWDGBhkbuWa7fG\",\"mL5s4eh3r8brokd2T\",\"3ifAHQzsMasfQySoL\",\"FiHK5ZDMhR7d5WFET\",\"nmeyrFbZpLR74iC7j\",\"YdRcRS2e6iai93gvW\",\"ygAuMpMwWo3EJDYad\",\"PYg2boGDLrEcF3i4j\",\"5cEduQmMBFx3d42cg\",\"ZexarDybriuFWGA5a\",\"Z8T9LqguEJ8f6ocuk\",\"LimEAWLwjEDmoNusM\",\"BFNm9gacwba9KyLFW\",\"TNMAJidLpPdH4kmBv\",\"8kAhBdSqtYtMsbMq4\",\"td7qPZ7Lv4pEWT2Ya\",\"xbkeGwsw2bgiavHic\",\"CKBHYxYu7mCqz9q6x\",\"LJce8TSNkLQRJwSaB\",\"3ShPMJeCcBLfBGqBX\",\"QKYi6pYeaYFovNHX4\",\"aXCm9vWqKwL9XFYoj\",\"bq6qgZeujxtEXHuzq\",\"psw2CP35AmCdox6zX\",\"3fjCCrpR2aD32sTrc\",\"cmwasetrBzbwJQbks\",\"dfEQnX44BEewxycAb\",\"yrCNkFYQBEDE76eFS\",\"jYJ26SiLKBu5GRumq\",\"6u7yc9m6HuHGbHzph\",\"o5pRKAbyH9TjiB59q\",\"uSh3aNxzD28jBuhxa\",\"GCxj7RJCeWYNxj8oQ\",\"PSrcg6fy835R4c5CW\",\"ZGhZhnqAHiQypqZrp\",\"WkWyq9wMkZhXB6zsD\",\"DybkA6uHjv7fY9dYG\",\"tFJbHuodF8d4sMczz\",\"jADekCvbsunNiWigi\",\"zjQPuEyZ38tTW6P5w\",\"MJMWfiW978otApbcG\",\"Dw8RZgg5iHBuFrWwQ\",\"aCNWav8S8Try9RkC6\",\"cR3ibTMxLyEdDFCHY\",\"T2vhHPhRR96hRizq8\",\"gMJhLdyw3tH7L96X2\",\"nfXGHENb5md7m355s\",\"N2wnZXkhDH86mgjQ8\",\"Nj6FwgBtAXsaQwsM2\",\"XKi8iZXBCHCaebSHh\",\"vuwheqp25x7RkBHXn\",\"dKpQWv7qH2WaZXPxK\",\"3efW5qCKraPjzEfiX\",\"HQxp7NcdvF92G7bYS\",\"kDe2b9FdJnPhEWJzg\",\"yr822PZmmiDDenxpB\",\"9NCu6PzqPBbbrZ8L9\",\"2fxapKr8XGdNeaKi2\",\"HhnEZJXhdiaQeSDMd\",\"8aPJNKDxXq7884eJb\",\"EXZfPb8YH28EL8Rh9\",\"9cKQ9BxGZ4vQAcM5x\",\"otXtuQygbcYATMZoP\",\"Jg8ZSRXe3NoDMCqGu\",\"oqGkxvASXq52iTDvp\",\"jhtzDqnPZYFyKesFg\",\"ZnWyAsqYcD4G8aqMF\",\"goG7cSfe2q9XwA8jZ\",\"s5M5RvgqR9BhB9JoC\",\"PuJDHtAaX6vXeJJTC\",\"CZeLyDD2BQL3jrzzj\",\"v9KtC8YLbMWmXiW2H\",\"fAoLuqbGvHn4w2PHf\",\"HqmxnQJM66Y57twhn\",\"BNTzodwX5ar2e5p8e\",\"hJkX94ypDvaMPFCdw\",\"2RuXdqALgnGbtTWC7\",\"FgkYtHLxeD8pETJ8T\",\"WX6R5brerMTrHs5ZM\",\"6ShafRStcvew4GfCh\",\"8PwfYqoDQFThzNtvf\",\"ydEdzuCCZt4yny9Rq\",\"yKttxy9JGn5Jzwuj6\",\"K96FwtfDDN5WM4Bb7\",\"C4QntmkYtB89GNtpd\",\"N962oRnYTtRzEd22M\",\"wwMcJQRvf3X59Jyev\",\"tK9oBgXjqPsPrGowj\",\"JKb5rhL6DKcCAypF9\",\"2innwjWqxJHo4eRGh\",\"AasGs8AeX9Lcb9xJn\",\"uEeZaTW4HK8AL4BjQ\",\"4CFzv558qbGcpQwc4\",\"w3A7cBWyAfukk6xEQ\",\"WLFPvm65aHfgwQy7N\",\"mDWNyaaQ9hvPCRzSd\",\"aEm3Wvj2rFYRL8Lrb\",\"ZNnsMeNkdDhHjSrZb\",\"orFLgPDw9H5MDzmwo\",\"3Zceb8GudqAG3onG3\",\"kYWb8BwpKwunQkxeX\",\"24jMuoxwhTniGBtop\",\"YRstQuthRkFeBiXug\",\"Yp7uvStL97cC9fKkY\",\"J5T8gZqiZXFuFDTQ7\",\"gJYuGdkXEWWmGRLzu\",\"3pxHTZBsv7MKzFG6Y\",\"KdNDysEsy2TW5QRJ2\",\"dZGNAJXB24zNh2tsD\",\"HF28xZKSLM9wEuqNg\",\"w2NGhfAGohsq6WhhN\",\"4rwxLqLs2mNZNg8NB\",\"euPBBaYXyS8RBr9KB\",\"W5TajitmCyxz87zAC\",\"DEDniTrstQYGounXT\",\"hnyhBFWwNCz9mDfSi\",\"Ecg4m7srYGgZsb4Ck\",\"bJxaKHJqR82EWw8Su\",\"ekQh3jzgGLsEMbKo3\",\"n2BRY9X8899dcG8Bw\",\"ACEZh39brWjdGkZXb\",\"d8XYg5kWmafEeThAk\",\"48XFEzbMAdQQzdgxr\",\"KAE5csCXsqwzSCQqP\",\"iojEnnY9FsMfYzp6f\",\"hRiMXDZNAzyPd5tpt\",\"zZDaXBxMzTCBhNkgL\",\"iS5BrkGLzJyPK7nKt\",\"yjtdwc2AC4jA2RWtn\",\"ZrKCkX7xxGGZzauFW\",\"f2BoqyCpgnmjEjLqx\",\"mG8HqKiAQFTdRZthG\",\"w2HhxvSLmDhaGCAjE\",\"LQxof8pGabGuWP7Gn\",\"XjajdyybZZbkz8o5x\",\"Luh9so8wP5aZTHRhH\",\"QRv96jmNaYsWkxQEG\",\"9rhsisf8ofHavG5aT\",\"DPi9QGLctq2y76KuE\",\"dkcmCKwqApX5jBggc\",\"xn7uGNKeAwPEkP9oA\",\"dYPkStFnLvAMsHSzZ\",\"axdSNLZpiCDF8RS6n\",\"J3upzLHuEwXH7Z2hx\",\"gXTAie79kiw28tx5u\",\"7CwgH38hHpiGdu2zT\",\"oBcs8GLX2ZFLXQy8y\",\"7scpcTEp3SEx5Wjg9\",\"7ifh8r4gvyYMhKB94\",\"yTtSCvGPyYna6JuRC\",\"yoYQqaY6GszuTkNSs\",\"cAP3n5NY64uoMwzRR\",\"4RsakkyRXyYGwFxEa\",\"GGdmhAvxXhqhhibJN\",\"FEYpu9RWysAgW3XnP\",\"PWgzeK859suojbrRx\",\"Wpn95NqWxncQrwNgz\",\"fznzd3qnvtbFkkizz\",\"YcCLwitFMAEJSnxAW\",\"PytNZK9mNiRiZxPrm\",\"2PufnQcsHsfymufX3\",\"8BFSTCnoe2QggN64c\",\"PC3pLs36zNzpRDSuE\",\"YmMgWhzhHhQLmGGgH\",\"MKT7khMBGXzA22ykf\",\"T6iBEE2jp7f7iEF2P\",\"EfxwqhYdapX3dMQC2\",\"gKnWjDjwrJh7MK2df\",\"o4ixjQGSaYqA2JoM4\",\"buX4mCQhtXCfBjeno\",\"QvEXmSEo3ANp3yPyH\",\"4Lwjr34ypKNQNQCar\",\"suArq5BbSy7gD6xri\",\"yod5YhKtPqw2GfG9B\",\"8sNv5PTHa7XQ8bNqR\",\"RoGGD5cpHb4ftdLDv\",\"v39g8eNsCQLNfXQwg\",\"nkH3HfJXLMNcBMM79\",\"3KkyQm77zsew58Dc2\",\"JhX7jvtpwNyxcc39m\",\"d8qtzoLB264iP8tdY\",\"5HCu9Ydd86QgHDRNP\",\"eHcgvkTGsH7ZziqBo\",\"Ds7L5bksw2QRHjrKL\",\"AQSqD9oNv2uPfxZCR\",\"ey3CASd6Je5LEJzfB\",\"mvJBakQ35CWAnbbEZ\",\"Qyfyyw6oC4EHAndzo\",\"2qtde7moqrzm7B4Ht\",\"BrTDhPJcACL2bsrpJ\",\"KfGmizjwhtMAaXspt\",\"3iNc8eGCtE9RYM8LC\",\"CHvzhtXnv8HTbPQ56\",\"jkbavR2ATFJcpmo8M\",\"RErqK2yM94wYyD2hk\",\"9pzFiFK3ANLjQfnr2\",\"mw9464S5dnenqzvpm\"],\"quality\":[5,5,5,5,5,5,5,5,5,5,5,5,5]},\"tests\":{\"score\":0,\"rators\":[\"BkPgkDQGHm66X4Qai\"]},\"instructions\":{\"score\":0,\"rators\":[\"BkPgkDQGHm66X4Qai\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":5,\"family\":[{\"_id\":\"CSf9zMBJBdc6YAHKo\",\"language\":\"cpp\"},{\"_id\":\"8ZkrgupsQxf6f9xXR\",\"language\":\"javascript\"},{\"_id\":\"nm8zFcqcQ9Rzu45Fm\",\"language\":\"python3\"},{\"_id\":\"ZtzJSb2bLRKHCiHrw\",\"language\":\"ruby\"}]}}"]