a["{\"msg\":\"result\",\"id\":\"1307\",\"result\":{\"_id\":\"kS8tfJD2ggohQbWx7\",\"author\":\"MysticSoup\",\"authorId\":\"k66z8NfCwxStFg2qz\",\"code\":\"def last_name_lensort(names):\\n\\t\",\"difficulty\":1.9830508474576272,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"PYoiwkXvKiyHmcdXR\",\"instructions\":\"Create a function that takes a list of names in the format \\\"First Name Last Name\\\" (e.g. \\\"John Doe\\\"), and returns a list of these names sorted by the **length** of their **last** names. If the length of multiple last names are the same, then proceed to sort alphabetically by last name.\\n\\n### Examples\\n```\\nlast_name_lensort([\\n  \\\"Jennifer Figueroa\\\",\\n  \\\"Heather Mcgee\\\",\\n  \\\"Amanda Schwartz\\\",\\n  \\\"Nicole Yoder\\\",\\n  \\\"Melissa Hoffman\\\"\\n]) âžž [\\\"Heather Mcgee\\\", \\\"Nicole Yoder\\\", \\\"Melissa Hoffman\\\", \\\"Jennifer Figueroa\\\", \\\"Amanda Schwartz\\\"]\\n```\\n\\n### Notes\\nIf last names are of the same length, sort alphabetically by last name.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(last_name_lensort([\\\"Jennifer Figueroa\\\",\\\"Heather Mcgee\\\",\\\"Amanda Schwartz\\\",\\\"Nicole Yoder\\\",\\\"Melissa Hoffman\\\"]), ['Heather Mcgee', 'Nicole Yoder', 'Melissa Hoffman', 'Jennifer Figueroa', 'Amanda Schwartz'])\\nTest.assert_equals(last_name_lensort([\\\"Hitagi Senjougahara\\\",\\\"Edward Elric\\\",\\\"Light Yagami\\\",\\\"Rintaro Okabe\\\",\\\"Kurisu Makise\\\"]), [\\\"Edward Elric\\\",\\\"Rintaro Okabe\\\",\\\"Kurisu Makise\\\",\\\"Light Yagami\\\",\\\"Hitagi Senjougahara\\\"])\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,2,3,3,3,2,2,2,1,1,3,2,2,1,2,2,3,3,3,3,0,2,1,3,3,3,2,3,0,2,3,4,0,1,3,3,1,3,2,0,0,3,3,2,1,2,3,0,1,2,3,3,3,3,5,2,3,1,3,2,3,2,2,1,2,1,1,3,2,3,1,0,3,1,3,2,1,3,0,0,2,2,2,2,0,3,0,1,2,3,1,3,1,3,3,2,2,3,0,3,0,1,3,2,1,3,2,2,3,1,1,1,3],\"rators\":[\"duygm2Ffue3bjb3MS\",\"8JyqsSbN2FJXPr3cw\",\"Yp7uvStL97cC9fKkY\",\"8PwfYqoDQFThzNtvf\",\"JQ5uoxA4WZgN6HyJk\",\"ZNnsMeNkdDhHjSrZb\",\"AasGs8AeX9Lcb9xJn\",\"yZvzB3qFb8pkHy4dg\",\"gb9rvGus2Jv7bjZSs\",\"pWD2YC5s4YRCxFc2i\",\"gJYuGdkXEWWmGRLzu\",\"nzqwymsdwC7gxAmip\",\"s5M5RvgqR9BhB9JoC\",\"aEm3Wvj2rFYRL8Lrb\",\"YRstQuthRkFeBiXug\",\"yYxPzFqBgtQ9fsyHM\",\"kYWb8BwpKwunQkxeX\",\"tAF9Gf6PiGogbZuWs\",\"EjbDDFRECrzQDkzrX\",\"EXCpDkk5BLif3i5YE\",\"4rwxLqLs2mNZNg8NB\",\"mDWNyaaQ9hvPCRzSd\",\"HF28xZKSLM9wEuqNg\",\"ekQh3jzgGLsEMbKo3\",\"9pzFiFK3ANLjQfnr2\",\"YLtspA8ec6ntcoMMf\",\"pkQBaSzukotPEXmrD\",\"wS2o3x4nrsadtC3xP\",\"v9KtC8YLbMWmXiW2H\",\"DEDniTrstQYGounXT\",\"n2BRY9X8899dcG8Bw\",\"oBbwyfihNdEkHnLrs\",\"dzS6WBTMHyFEag6Fp\",\"ACEZh39brWjdGkZXb\",\"iojEnnY9FsMfYzp6f\",\"KdNDysEsy2TW5QRJ2\",\"cR3ibTMxLyEdDFCHY\",\"Z4M3NAa4TXquMNkHe\",\"zZDaXBxMzTCBhNkgL\",\"HqmxnQJM66Y57twhn\",\"yjtdwc2AC4jA2RWtn\",\"ZrKCkX7xxGGZzauFW\",\"CwXsu25ygLEwQbmQC\",\"KZ2xddpM2f9JRaryB\",\"tXNgbxmMDqkvLc76o\",\"PFmCJw9aHadXJFPrX\",\"MKT7khMBGXzA22ykf\",\"hRiMXDZNAzyPd5tpt\",\"uGuS9YRXW2nj4p6zf\",\"jBR47vA7HwAZqp4QA\",\"P7NmFbCJ5offXMRvB\",\"euPBBaYXyS8RBr9KB\",\"mG8HqKiAQFTdRZthG\",\"hnyhBFWwNCz9mDfSi\",\"pmgFEciNrd3ES9tuu\",\"iQx6PmRfjXYBq27Y4\",\"J5T8gZqiZXFuFDTQ7\",\"KJCDwGkoXh8qtbbKr\",\"qD2LrwaDrSdiybLKY\",\"QRv96jmNaYsWkxQEG\",\"spqXrjG3ZFa2j5uTR\",\"Ecg4m7srYGgZsb4Ck\",\"DPi9QGLctq2y76KuE\",\"xn7uGNKeAwPEkP9oA\",\"J3upzLHuEwXH7Z2hx\",\"dkcmCKwqApX5jBggc\",\"55RQznnuTGpsj3EXd\",\"nmMiWvyJKp6nZEpve\",\"gXTAie79kiw28tx5u\",\"85BiyYFzHLMbq2A73\",\"Jqk2uJZZxEv5wZFze\",\"buX4mCQhtXCfBjeno\",\"oBcs8GLX2ZFLXQy8y\",\"eYfPWvZwnJQkHbSTK\",\"qAby4AWXmTNeusvg3\",\"NRcES4Fvey4SWLRCA\",\"cAP3n5NY64uoMwzRR\",\"GTKsdeEihE636Le9i\",\"gjiu8kLnHYxe4HoBN\",\"PXAcsKkssS2yLyDv2\",\"EfxwqhYdapX3dMQC2\",\"GGdmhAvxXhqhhibJN\",\"srJ34BaybkQh3qRkM\",\"CHvzhtXnv8HTbPQ56\",\"H9KZi2cjt4FwH7qog\",\"BdnE4RS5puoxo92mA\",\"PC3pLs36zNzpRDSuE\",\"8BFSTCnoe2QggN64c\",\"fznzd3qnvtbFkkizz\",\"2PufnQcsHsfymufX3\",\"QvEXmSEo3ANp3yPyH\",\"gKnWjDjwrJh7MK2df\",\"sJWTa7iWeRoRtqJ8N\",\"o4ixjQGSaYqA2JoM4\",\"LQxof8pGabGuWP7Gn\",\"4Lwjr34ypKNQNQCar\",\"T6iBEE2jp7f7iEF2P\",\"RoGGD5cpHb4ftdLDv\",\"8sNv5PTHa7XQ8bNqR\",\"8nE8QHnFYsHCFebte\",\"yod5YhKtPqw2GfG9B\",\"AQSqD9oNv2uPfxZCR\",\"5HCu9Ydd86QgHDRNP\",\"suArq5BbSy7gD6xri\",\"QxFn3b52LkbbHXEug\",\"jWbd7SYDzLPjc9EDh\",\"sbJcFfQjQ59Wfg4Cd\",\"nkH3HfJXLMNcBMM79\",\"Gp6HexkcR4mHmReRB\",\"ctbThYbufFCYbRK4f\",\"8E4LDpxa9bnzk4i4p\",\"Ds7L5bksw2QRHjrKL\",\"fbr22rabEJMfBp7vD\",\"BrTDhPJcACL2bsrpJ\",\"Qyfyyw6oC4EHAndzo\",\"ey3CASd6Je5LEJzfB\",\"qB6KSTYC6H2TQEQY6\",\"jkbavR2ATFJcpmo8M\",\"tN8QWy3aaEzC2MnfA\",\"wrL4iX2CCSqDCCty3\",\"4WqaWqo7h3bhpuzXk\",\"eEp2xxJSstaf4aQp7\",\"E2hpke7mHxAWsw5t9\",\"3nied3n8KG8RSNixH\",\"bNENiqqEDxM5a5JBf\"],\"total\":136,\"quality\":[5,5,3,5,3,5,5,5,4,3,5,5]},\"flags\":0},\"summary\":\"Create a function that takes a list of names in the format \\\"First Name Last Name\\\" (e.g. \\\"John Doe\\\"), and returns a list of these names sorted by the length of their last names. If the length of multiple last names are the same, then proceed to sort alphabetically.\\n\\nExamples\\nlastnamelensort([\\n  \\\"Jennifer Figueroa\\\",\\n  \\\"Heather Mcgee\\\",\\n  \\\"Amanda Schwartz\\\",\\n  \\\"Nic\",\"tags\":[\"algorithms\",\"control_flow\",\"strings\",\"sorting\"],\"timestamp\":{\"$date\":1588858768303},\"title\":\"Sort Names According to the Length of Their Last Names\",\"quality\":4.416666666666667,\"family\":[{\"_id\":\"LtM7uCLNBf52tLMMM\",\"language\":\"cpp\"},{\"_id\":\"PcSNdgbfiDf9JYJjz\",\"language\":\"javascript\"},{\"_id\":\"kS8tfJD2ggohQbWx7\",\"language\":\"python3\"},{\"_id\":\"fYsNx5WhYyNMDCiPm\",\"language\":\"ruby\"}]}}"]