a["{\"msg\":\"result\",\"id\":\"332\",\"result\":{\"_id\":\"wBuZ2Qp9okzGeZc6e\",\"author\":\"Cool_Kidd\",\"authorId\":\"i5iePG5GqhJJ8HEoB\",\"code\":\"def first_place(road):\\n\\t\",\"difficulty\":0.6388888888888888,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"npS4cQ9ShtkcYNTvJ\",\"instructions\":\"Create a function that takes a string `road` and returns the car that's in first place. The road will be made of \\\"=\\\", and cars will be represented by letters in the alphabet.\\n\\n### Examples\\n```\\nfirst_place(\\\"====b===O===e===U=A==\\\") ➞ \\\"A\\\"\\n\\nfirst_place(\\\"e==B=Fe\\\") ➞ \\\"e\\\"\\n\\nfirst_place(\\\"proeNeoOJGnfl\\\") ➞ \\\"l\\\"\\n```\\n\\n### Notes\\nReturn `None` if there are no cars on the road or if there is no road.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(first_place(\\\"====b===O===e===U=A==\\\"), \\\"A\\\")\\nTest.assert_equals(first_place(\\\"e==B=Fe\\\"), \\\"e\\\")\\nTest.assert_equals(first_place(\\\"proeNeoOJGnfl\\\"), \\\"l\\\")\\nTest.assert_equals(first_place(\\\"F=============\\\"), \\\"F\\\")\\nTest.assert_equals(first_place(\\\"C===A===R\\\"), \\\"R\\\")\\nTest.assert_equals(first_place(\\\"p\\\"), \\\"p\\\")\\nTest.assert_equals(first_place(\\\"==========================\\\"), None)\\nTest.assert_equals(first_place(\\\"\\\"), None)\",\"language\":\"python3\",\"quality\":4.64367816091954,\"stats\":{\"completed\":{\"ratings\":[1,1,1,1,1,1,1,0,0,1,0,0,0,0,1,0,0,0,0,1,2,2,0,0,1,0,0,0,1,1,0,1,0,0,1,0,0,0,2,1,1,0,1,0,0,0,0,0,1,0,0,0,1,3,0,1,1,0,0,0,1,0,1,1,0,2,0,0,2,0,1,1,0,2,0,1,0,1,0,3,1,2,1,1,0,1,0,1,0,0,1,1,0,0,0,0,0,1,0,0,0,2,1,1,0,1,1,1,0,1,0,1,0,0,1,2,0,0,1,0,0,0,0,1,0,2,1,0,0,2,2,0,0,2,0,0,1,0,1,0,0,1,2,1,1,1,0,0,1,0,1,1,0,0,2,0,2,2,1,0,1,0,0,1,1,1,0,0,2,2,2,1,0,1,1,0,2,0,2,0],\"quality\":[5,5,5,5,4,5,5,5,5,5,5,3,5,1,5,5,5,5,5,5,5,3,5,4,5,5,4,5,3,5,5,4,5,5,5,5,5,4,5,5,5,5,5,1,4,5,5,5,5,5,1,5,5,5,5,5,5,5,5,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,5,5,1],\"rators\":[\"i5iePG5GqhJJ8HEoB\",\"pCMhfoZ5c6eBuCqbp\",\"PXAcsKkssS2yLyDv2\",\"Yp7uvStL97cC9fKkY\",\"zd9FLSzsGz3evKafy\",\"MXGuntvz3byrP6WJc\",\"iS5BrkGLzJyPK7nKt\",\"Ds7L5bksw2QRHjrKL\",\"buX4mCQhtXCfBjeno\",\"J3upzLHuEwXH7Z2hx\",\"Krto2sGMfGWBLcL7n\",\"AXcnPX68zdMiLNSmu\",\"jcPZ5ySXseCB7Ec3x\",\"7oFgkj6xtsABqx8wc\",\"FuYTQcDNjct58rqPa\",\"Q6gEE9dG8ERy2Xu3c\",\"JhX7jvtpwNyxcc39m\",\"QRv96jmNaYsWkxQEG\",\"jWbd7SYDzLPjc9EDh\",\"gJYuGdkXEWWmGRLzu\",\"8teSHp77vHhhvJWiS\",\"wRttWTM59y8m5mx7x\",\"eYfPWvZwnJQkHbSTK\",\"fTNQmMvTZhhiGBCMe\",\"FeoRbSr6CGJRqshTS\",\"hERDiXzMt3bagzfKp\",\"5HCu9Ydd86QgHDRNP\",\"vCeeMuYDbz3MB4vsk\",\"J5T8gZqiZXFuFDTQ7\",\"5S9nX4rKsnCcnv4Cz\",\"GqnEdzvEGRkgBxqHB\",\"FEYpu9RWysAgW3XnP\",\"QbWwoxMsD5DosBmRJ\",\"F7wta4nHmabMr9dfd\",\"XgRXeb4YyZqmiMTLe\",\"8aEGGQPkGesWwoaom\",\"HqmxnQJM66Y57twhn\",\"7KsymxNN9S8ZG5oQe\",\"Jqk2uJZZxEv5wZFze\",\"DPi9QGLctq2y76KuE\",\"AFfw7cGg83uYk2Miy\",\"oyKcm3zqdy8Ko5P5d\",\"m2kfE6tTgty4vtWwg\",\"8JyqsSbN2FJXPr3cw\",\"HBuJYgW2eRBJp9FoG\",\"kw5ZQBP3fTNB8rtKs\",\"YRAzEBJoLvSaiPtYx\",\"6428wKHtwKkFdvBs5\",\"fDxLFpkZDLDfpG3Gy\",\"2MjzJ7yxh3eT3xbng\",\"ghMkPtdFCpM6w8nax\",\"gb9rvGus2Jv7bjZSs\",\"q9FfWNiMDKRiaCJ5j\",\"pPpmP7xeJzGgK362R\",\"s6kkhXZo8QCPXQ4yz\",\"9FCeFzjPA4jrQ7oHW\",\"srJ34BaybkQh3qRkM\",\"T78CHCScDRZjf5Cjy\",\"5CsHudxuDESxmjTPW\",\"fW3mQfbTKhp7enxGP\",\"eMuCpJ2spXWkJjWNz\",\"uo7MdTu2FWZhYE7nL\",\"TuGMFnbaaSmJ3N2qD\",\"HuNF3xTBzmatyGSTm\",\"aEm3Wvj2rFYRL8Lrb\",\"Fk9kLwoG4Brf4KsKf\",\"kx7faN4NL4pHnYyeG\",\"rfyEkETeoS96QNH4e\",\"N2wnZXkhDH86mgjQ8\",\"PTDFuxAzou7W6asWt\",\"9qoWqLcHGiDX429rE\",\"sX9GZp3fYyQLrBKMJ\",\"JS3hNM3XXkxPdg3yk\",\"wypdvuJQZB2TFyb2g\",\"oWSpzbikwd8N3N2YA\",\"NzbRqGWspQnWMoDrF\",\"wjc4iejpErBhxWwHo\",\"ALAcCb6D2afK8aAyr\",\"XShyGekJgwF4NoXPw\",\"LNRX3SS9qBbRimzfW\",\"2Qwmi6nmqsyyHJ8df\",\"YwAvPdqD6Xi2qjapZ\",\"ZyrfhDTZHb8LymH5b\",\"XD5nmvKQchKezPXhy\",\"mxX4rH5ELYkdZ2Mbw\",\"PC3pLs36zNzpRDSuE\",\"GMQM52abpXNgEBote\",\"eL7Yv8HjSi6WBy3gq\",\"Lg4t6SEWgtYz4u7Cj\",\"qZ3h2ijjMyDiZFibz\",\"ntaGcjhFbafszWWZ7\",\"zRK5D443K6RxR9xWn\",\"EfxwqhYdapX3dMQC2\",\"8KSqAnTHDMSuMiR2c\",\"LfGif7sGS3AjxwD4N\",\"oBcs8GLX2ZFLXQy8y\",\"yEvXDzXnEPNz6tTCK\",\"5hQnRWiKkhgKJXNMP\",\"r9hcWPFRkykfmBh9d\",\"WE7GiKSQQ2qyeZRgT\",\"p8qqFdJ3FSk5x9z3G\",\"yjtdwc2AC4jA2RWtn\",\"DTyNcDkiScCjgJt28\",\"pnkBesnLDfK7CfjNu\",\"GZgFDSZdgKBuixp22\",\"opcrDAS4AgXqrJXnb\",\"YcCLwitFMAEJSnxAW\",\"ambwnPckkzNebg8fk\",\"9CXi5HK6iB2LcFvEa\",\"3LiSLdtN58n46NEqg\",\"9Q3hk6gYokuBMNmAW\",\"J9TQG4TpP6hCfnhQC\",\"iYz3c3XSKCvSg9pLw\",\"oqPwBd5aaE5x6Ybbm\",\"Nb6LYPoQP6KJZt8mz\",\"DEDniTrstQYGounXT\",\"PBnvAuiKXwjqjKG33\",\"8PwfYqoDQFThzNtvf\",\"GdKtjPh8TcfmJuduv\",\"EA3m4tEa89QaeS55E\",\"vCxuabDxEv9YC3Szb\",\"ekC5dnksxypGBwq4X\",\"BNEcpQnAnD7ceSAZf\",\"zERid8pE9JnysiN5Q\",\"4QjwGqTD7AEy34eDg\",\"MfKe55snfKsdnDejs\",\"TmM3AN7g3fkh69ycj\",\"sKfrD9gjCDHuqLzSk\",\"k2Eo3wyfZZ6KxvKhN\",\"PexKJN2gNdthuHKxZ\",\"Cg3LKtEAJpsrdWroG\",\"CQhaiZqQcP87YteSG\",\"xNCLJDm9Bni6gByMz\",\"cCFRcwA8Z4TCwsMGo\",\"XrqNzJ2FRG8HnGiR6\",\"5f6oSeq4r5WTXLdCQ\",\"9pzFiFK3ANLjQfnr2\",\"m7KZ5donpz5F6AR3z\",\"CyzskHGsC6WSmYrLu\",\"R4SjTgDnpigJYDLyL\",\"MKT7khMBGXzA22ykf\",\"7dQYiDeTcMztbGyso\",\"gjiu8kLnHYxe4HoBN\",\"8EJ4j2fcfjTJ7Zrzu\",\"tAF9Gf6PiGogbZuWs\",\"jNvegJWCk5HCtEMbK\",\"q6QsMYNMpPNtmyTeW\",\"3cF6NXq3ZEwdkgSjb\",\"cR3ibTMxLyEdDFCHY\",\"uvLimfW9x3bCp7huQ\",\"XujK3rHd3JcM9TLJy\",\"s5M5RvgqR9BhB9JoC\",\"qAby4AWXmTNeusvg3\",\"2QGRoQn2dRq3scu7k\",\"DFpZcskPncmo7fuzR\",\"Dwpiei4miJi7ry8W4\",\"kjvgTyRFyKHv44DcH\",\"4bb7pim4ewTwrMTEA\",\"sStHeW5DXkC76TJEX\",\"zC8WrPp5BC6c2exrW\",\"pwWtbXEjzuvrhEGwt\",\"j7ebNFtte6fSkMWjj\",\"7q8oBsCHwn48Ppnrq\",\"6LbPw9yW6HHDfn8B8\",\"CHvzhtXnv8HTbPQ56\",\"NrRa4TS6uZR9xuXRt\",\"DfHHpvnubuFmeNky9\",\"iojEnnY9FsMfYzp6f\",\"yAouD3PxzED8a4gap\",\"m7hHWJrBub7ueaokh\",\"XxLKk8pkJnSjfZNHx\",\"JKbEBybAsiKrmcqof\",\"SgPjF69J25jT3dn4X\",\"66a9xX73nmTEuKs9k\",\"Dq24MSpogRmq6L4hX\",\"u5u2YpHXiNgzDNJdX\",\"4TmgHkn5vqyHK3sYC\",\"a2Kmh6ekWqQQooHiQ\",\"RTER5uJdW4khkiNbY\",\"YmQb9Mo4Xcg2vzgbn\",\"jgyuzt5BpA3ohHG96\",\"9Ly8afdtofp8DXzrt\",\"mvJBakQ35CWAnbbEZ\",\"x2Cz7S8rCKJqCE3Xe\",\"T6Rm8mREPMZSftzrC\",\"H9KZi2cjt4FwH7qog\",\"NP2RxM3eBd3drnDwP\",\"JiSpvq6C7azQEmENc\",\"hRfdHT8bWztZuCqzi\",\"kqYkfcZMkp5u2EdXZ\",\"FxbTzThBiTnRzfirA\",\"sHjfbGQGLHE6JR6qu\",\"AasGs8AeX9Lcb9xJn\",\"sbJcFfQjQ59Wfg4Cd\",\"Diyz4XjYybMb7p4xE\",\"CBwziWoAPy7qfE5MM\",\"FiaTpm7ehfDv43wSG\",\"cdXmwjupCXSvJTSNo\",\"c7uBxu2rgY77H5d79\",\"Afnps7TJQuS9sipMb\",\"TCvpT4EPb8qNssNB7\",\"j22fPdGZvaryte8j5\",\"KypQdzThzogKXwkXE\",\"a2PQbkxH2NhSWQ4SL\",\"pduNK68oazqQTtbLp\",\"pQwhNKiCne4gEZgcn\",\"XbxHXmh5ZmRN2gw3K\",\"rrSC943cCKNG48sH4\",\"rHDq28dQa3QZgRYrn\",\"zBk2cwJ9SLAhFuM3K\",\"iYXdNw7tKcgA3QwBX\",\"9NcZ23yufhtou68dT\",\"FMyZPN6odEFtfuimF\",\"gKnWjDjwrJh7MK2df\",\"54BFnXEjY3FuRNYpN\",\"J6SNmrWd6PwfEgmud\",\"syRNbbPdLCGXbH2Gy\",\"dYPkStFnLvAMsHSzZ\",\"aN6owKqBeZj7ZefFR\",\"d9LBRxvADNBB5QJMB\",\"ecytnKJxjCPk8Kbif\",\"QrGnkbEeTo45YwRHy\",\"AQSqD9oNv2uPfxZCR\",\"8ynPy35NQFsnh4WqC\",\"aYemFjcSRyv7T76h8\",\"5nbHH4eApn6So9h2n\",\"9LrF5o2TK2iE8BZJh\",\"b7yQWr6eJFxYTmt3j\",\"fGvJRtjbJFJJZLCnW\",\"uK58g2EXxqxTaB2iA\",\"B4y8aoyXJtskYPFEL\",\"dzS6WBTMHyFEag6Fp\",\"5QN8R22z43SrwoHDz\",\"qaPjAANdnxFnWfj5d\",\"PmRyaLmhAF4MMLBtM\",\"LWCzZ8mb8gwrRNGfq\",\"rhS8qXRjZcpDXkwnE\",\"xjyixzXzqqqTfJARd\",\"rF97GDLqCgynr7BaD\",\"Ne8mK9DDHG8TRkoxG\",\"mw9464S5dnenqzvpm\",\"afvP29FhRou2bTaav\",\"vAbK8sCfKyFC78HYg\",\"M2gFMJkocQSY6bsFR\",\"suArq5BbSy7gD6xri\",\"3EggYWs7RTTYFsNia\",\"Zyg9xAm6EuH4u3Lo5\",\"tR9grPBLncwacBTzr\",\"fMp8sPsKSECdfgF9j\",\"guqbR3zoBX8F8oKmk\",\"gQ7APkqpRnn78e35D\",\"r83jJeskFETo3RLhZ\",\"gXTAie79kiw28tx5u\",\"sMcFMPkMJC4Kh6ymj\",\"Wi4H6ayKsNDWWQCG5\",\"4akHBgnDEDj3Rkv5n\",\"rraTtctZqnjXu2L2x\",\"mdRQaGT98ycMt87S2\",\"iBjwTeXx4KiWffy64\",\"M8dQuMrEpP8Hc3tHN\",\"7HAL7H6NJmc4NC8Q5\",\"3SgSNoAB3sxaYeT3w\"],\"total\":276},\"flags\":0},\"summary\":\"Create a function that takes a string road and returns the car that's in first place. The road will be made of \\\"=\\\", and cars will be represented by letters in the alphabet.\\n\\nExamples\\nfirst_place(\\\"====b===O===e===U=A==\\\") ➞ \\\"A\\\"\\n\\nfirst_place(\\\"e==B=Fe\\\") ➞ \\\"e\\\"\\n\\nfirst_place(\\\"proeNeoOJGnfl\\\") ➞ \\\"l\\\"\\n\\nNotes\\nReturn None if there are no cars on the road or if there is no\",\"tags\":[\"strings\",\"language_fundamentals\",\"loops\"],\"timestamp\":{\"$date\":1606675648899},\"title\":\"Who's in First Place?\",\"family\":[{\"_id\":\"CYrMGHFN3bfbAnZgJ\",\"language\":\"cpp\"},{\"_id\":\"94rJjLxQbRhoypdCa\",\"language\":\"javascript\"},{\"_id\":\"wBuZ2Qp9okzGeZc6e\",\"language\":\"python3\"},{\"_id\":\"bK7HYeaSGKpDq6tN3\",\"language\":\"ruby\"}]}}"]