a["{\"msg\":\"result\",\"id\":\"2139\",\"result\":{\"_id\":\"JzXH3QnwHmpptadQr\",\"archived\":false,\"author\":\"Theodore\",\"authorId\":\"hi7Hvtq2mJfkXEGF2\",\"code\":\"def bitwise_logical_negation(x):\\n\\treturn 1 if x is 0 else 0\",\"difficulty\":3.231578947368421,\"familyId\":\"7xLWQSuAcx5E8gC7K\",\"instructions\":\"Given a number (positive, negative, or 0), return the logical negation (as a 1 or 0) of that number. Do so using only bitwise operators:\\n\\n```\\n(~, &, |, ^, >>, <<, etc) and +\\n```\\n\\nAny of these characters/constructs are not allowed: \\n\\n```\\nif, do, while, for, -, not, or, and, is, [,] and any functions.\\n```\\n\\n### Examples\\n```\\nbitwise_logical_negation(1) ➞ 0\\n\\nbitwise_logical_negation(5) ➞ 0\\n\\nbitwise_logical_negation(0) ➞ 1\\n\\nbitwise_logical_negation(3) ➞ 0\\n```\\n\\n### Notes\\nUse as few operators as possible for more of a challenge.\",\"lab\":\"import dis\\nimport inspect\\nimport random\\ndisallowed = ['SETUP_LOOP',\\n              'BUILD_LIST',\\n              'CALL_FUNCTION',\\n              'COMPARE_OP',\\n              'JUMP_IF_FALSE_OR_POP',\\n              'JUMP_IF_TRUE_OR_POP',\\n              'POP_JUMP_IF_TRUE',\\n              'POP_JUMP_IF_FALSE',\\n              'BINARY_SUBTRACT',\\n              'UNARY_NOT']\\nTest.assert_equals(inspect.isfunction(bitwise_logical_negation), True)\\n\\n#bytecode = dis.Bytecode(fn).dis().split('\\\\n')\\n#print(bytecode)\\ninstrs = [x.opname for x in dis.get_instructions(bitwise_logical_negation)]\\n\\nprint(\\\"Checking bytecode for disallowed operations:\\\")\\nfor x in disallowed:\\n  print(\\\"Checking for \\\" + x)\\n  Test.assert_equals(x in instrs, False, \\\"Cannot use \\\" + x)\\n  \\ndef ans(x):\\n  return 1 if x is 0 else 0\\n\\nfor x in range(0, 512, 3):\\n  if random.random() < 0.1:\\n    x = 0\\n  print(\\\"Testing \\\" + str(x))\\n  Test.assert_equals(bitwise_logical_negation(x), ans(x))\\n  if x is not 0:\\n    Test.assert_equals(bitwise_logical_negation(-x), ans(-x))\\n\",\"language\":\"python3\",\"summary\":\"Given a number (positive, negative, or 0), return the logical negation (as a 1 or 0) of that number. Do so using only bitwise operators:\\n\\n(~, &, |, ^, >>, <<, etc) and +\\n\\nAny of these characters/constructs are not allowed:\\n\\nif, do, while, for, -, not, or, and, is, [,] and any functions.\\n\\nExamples\\nbitwiselogicalnegation(1) ➞ 0\\n\\nbitwiselogicalnegation(5) ➞ 0\\n\\nbi\",\"tags\":[\"logic\",\"bit_operations\"],\"timestamp\":{\"$date\":1495252117356},\"title\":\"Bitwise Logical Negation\",\"stats\":{\"completed\":{\"total\":122,\"ratings\":[2,2,2,2,2,2,2,2,3,3,4,3,4,3,3,4,0,3,3,4,3,2,1,2,3,5,3,5,4,4,4,4,4,4,4,5,5,4,3,5,3,0,5,0,4,5,0,5,5,3,3,1,4,5,5,5,3,4,2,3,4,2,3,3,5,1,5,0,2,5,5,2,1,4,5,2,0,3,0,5,5,5,5,0,5,5,5,3,2,5,5,0,5,3,5],\"rators\":[\"hi7Hvtq2mJfkXEGF2\",\"6fJpRpAgiWD5zX9qB\",\"MNNxtLjCPkedM7MFo\",\"RtEdsmRHH4RwHHopp\",\"xBqnMCkCDaDuqFia4\",\"Wg8kg48vmdpCaSHH6\",\"hjTPK8dttsYRn2Ldy\",\"tuyDaJzFy78jxvhCY\",\"3mtD7DxrAgDMcxWKt\",\"7eBXcYTe4qmGk7xRR\",\"iEMnJaXXfa6dzdQzb\",\"GRZzKCbeb4xKHFCrZ\",\"xkD2ctfcwsGbidRtD\",\"tAF9Gf6PiGogbZuWs\",\"v45LnijojEMMfLHpL\",\"SK3kJggzuets9AFj6\",\"RsX6W2ddWM8ajHzss\",\"C43JQxYDMmjebxZPF\",\"wFM2emAxBGFwensJH\",\"gghyGRFrEu3ha49Kz\",\"aWFssoL37daSzqM9j\",\"yZvzB3qFb8pkHy4dg\",\"ab7BsQuhDo3QgE6bh\",\"P59rek6gvwTzHvRYa\",\"AYaEkTWLMmfzpwejr\",\"BFNm9gacwba9KyLFW\",\"gb9rvGus2Jv7bjZSs\",\"vWgBJaEtcu3XoYuer\",\"cXdji3zveDkuNo9ch\",\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\",\"bLpgu8xTdpDPFSAsM\",\"uTKCSekw6me9swLdk\",\"FHSJnAYTbcsKFgeQa\",\"k9GEg8MW9pQeeSAX9\",\"vTfyrr4pGddp8rbXc\",\"SpTi3f5uA7t7ygtLv\",\"AMc6ecyukYnkGCEbG\",\"DPtkBHhNn7m5EK2Xf\",\"jFcHRfu77aNu6YpZg\",\"ZNnsMeNkdDhHjSrZb\",\"73eTfjtjyYWojAZ6r\",\"EAoDdZBWGzecod2ZM\",\"neRxsjCeKWgXmLKDL\",\"ZSbcGKj67qFTPfzqh\",\"SQMvudwwDLtganaJu\",\"yfeu7SJENAjNvT7bn\",\"3MybBtCNPcFHLMYmJ\",\"fznzd3qnvtbFkkizz\",\"zQGRoJD3EGghM5gJe\",\"GgLd4eWBu79mdjtkP\",\"ZuTDmZ87nYbQjiNu4\",\"bCFecqKyXTCnGgPSc\",\"Z2TRQ5qxTLmfwjapj\",\"J7zJG7pwyrhQmD7NE\",\"Kg94pDSdZJ2wSkMcY\",\"8GPnpgq26E9A8JMS8\",\"SGhPxX5bHGL8zZqtt\",\"bKXdHkYnFt4ex42Dj\",\"5Qvy7fNM2YEQ6PtbY\",\"eoepTq5ES5tfgY9XT\",\"EksjxkfKerD7ZtqYA\",\"RehJGBFS6CYiWdjZx\",\"hZW6j5s6RHpx35phy\",\"4fhjJBvLBWh6QeSih\",\"gnqiMtWWsK2aCjbpA\",\"4sHkH3t9CJYhbDwjM\",\"XjrgSFNFz5Hg2mo5o\",\"WrHv7QnEPe6qS9wus\",\"J23RcmzbdtBbPCTjT\",\"vciL5ZR4eWvoWTuow\",\"i67n9u6MencCtkp9u\",\"7ws5HaSof5kkoRwTM\",\"vF4rp7r2AeFnKsfkQ\",\"aa3uAM8ugQqdmqdpk\",\"uMxob526prFuTTNve\",\"qrMJvG3Jfs2BCQ7af\",\"oGqZrjLaM6BriS2Tu\",\"aJkmBuz3Mr9sB35Ym\",\"uQ94ExDTJK2HZHH3a\",\"aaotFPYKJpeDdBmK5\",\"ZC4ikriG9TK5SFHMC\",\"tGkHoSmX8oHmmpdf5\",\"hy2sfJ3jfnR4WaduT\",\"waNsY2k4ndReyEREk\",\"FduKFqTnNNcRRCjFW\",\"CtKaPhQmtex9wnWcd\",\"ZJc8FLgZd2zNLHxXt\",\"Jqk2uJZZxEv5wZFze\",\"B3kmFXcgPZMm2pTvr\",\"c4DsFkzDj9CptDgDj\",\"W4X4kb9bFHP9wQLKZ\",\"KktidZuhzfEBK2bdm\",\"xGdw5GCbjjZL9Hr6J\",\"QBgP4BySQAeCoCFf6\",\"i42C33MNpNoSXhJDj\",\"fNtNTiNhQTsHJxvTS\",\"Er39N3Lx3dx2nSpc9\",\"8KNtgAcNpyT2f6bTT\",\"9ivvGvJGvtQfigQaZ\",\"58M252WF7SPRinfBx\",\"auoQ4Aq8m7ACQebeF\",\"8sNv5PTHa7XQ8bNqR\",\"g3Jh47H2g9xtZGxqK\",\"CJmeiKEXvhurrrztH\",\"4nJywCSudGeMCN8bW\",\"rvExrAkJ5dRo2R8YX\",\"yjtdwc2AC4jA2RWtn\",\"Y6w9WxXzRweSiy3Ls\",\"AasGs8AeX9Lcb9xJn\",\"gJYuGdkXEWWmGRLzu\",\"T2vhHPhRR96hRizq8\",\"5QN8R22z43SrwoHDz\",\"yMSJpupwohyuNLhct\",\"wnaPaA3PTyoYA8pQB\"],\"quality\":[4,5,5,5,5,5,5,5,5,5,5,1,5,5,1,5,5,4,5,4,4,5,4,1]},\"complaints\":{\"total\":2,\"reasons\":[[\"confusing\"],[\"bad_resources\"]],\"skippers\":[\"hi7Hvtq2mJfkXEGF2\",\"W3s5joDdNgqFB3cMo\",\"4XKiHaWaiAEkPDAM4\"]},\"instructions\":{\"score\":50.699999999999996,\"voters\":[\"NdYBdg9Ft2bSm8enk\",\"HQuhas4KXrETxYk9o\",\"XcHCqYmeoqxDsoucx\",\"e4xS5pFQbmgQpnjFp\"]},\"tests\":{\"score\":2.05,\"voters\":[\"xkD2ctfcwsGbidRtD\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.291666666666667,\"family\":[{\"_id\":\"e639gt6uquCbgKxA2\",\"language\":\"javascript\"},{\"_id\":\"JzXH3QnwHmpptadQr\",\"language\":\"python3\"}]}}"]