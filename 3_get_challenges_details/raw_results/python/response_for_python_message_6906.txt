a["{\"msg\":\"result\",\"id\":\"2163\",\"result\":{\"_id\":\"HqpZQPZiHbPK4HgEB\",\"author\":\"yanni\",\"authorId\":\"aCNWav8S8Try9RkC6\",\"code\":\"def maxmin(n):\\n\\t\",\"difficulty\":3.290909090909091,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"ANZSP7WzbqN6CaBXN\",\"instructions\":\"Maxie is the largest number that can be obtained by **swapping two digits**, Minnie is the smallest.  Write a function that takes a number and returns Maxie and Minnie. Leading zeros are not permitted.\\n\\n### Examples\\n```\\nmaxmin(12340) ➞ (42310, 10342)\\n\\nmaxmin(98761) ➞ (98761, 18769)\\n\\nmaxmin(9000) ➞ (9000, 9000)\\n# Sometimes no swap needed.\\n\\nmaxmin(11321) ➞ (31121, 11123)\\n```\\n\\n### Notes\\nN/A\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(maxmin(9876543210), (9876543210, 1876543290))\\nTest.assert_equals(maxmin(1234567890), (9234567810, 1034567892))\\nTest.assert_equals(maxmin(190015878798001), (990015878718001, 100015878798091))\\nTest.assert_equals(maxmin(411347917692022), (911347917642022, 111347947692022))\\nTest.assert_equals(maxmin(91620336331950), (99620336331150, 11620336339950))\\nTest.assert_equals(maxmin(428256072523076), (824256072523076, 228256072543076))\\nTest.assert_equals(maxmin(999607251369567), (999907251366567, 199607259369567))\\nTest.assert_equals(maxmin(10936404093733), (90936404013733, 10036404993733))\\nTest.assert_equals(maxmin(116962727585478), (916162727585478, 112962767585478))\\nTest.assert_equals(maxmin(645440811595719), (945440811595716, 145440811595769))\\nTest.assert_equals(maxmin(304732653285373), (804732653235373, 204732653385373))\\nTest.assert_equals(maxmin(734694929081563), (934694927081563, 134694929087563))\\nTest.assert_equals(maxmin(597202395684464), (997202355684464, 297205395684464))\\nTest.assert_equals(maxmin(111090753368874), (911010753368874, 101091753368874))\\nTest.assert_equals(maxmin(357758017083851), (857758017083351, 157758017083853))\\nTest.assert_equals(maxmin(744888865698909), (944888865698907, 447888865698909))\\nTest.assert_equals(maxmin(589067130451808), (985067130451808, 189067130455808))\\nTest.assert_equals(maxmin(236077600527389), (936077600527382, 206077603527389))\\nTest.assert_equals(maxmin(405272406161141), (705242406161141, 105272406161144))\\nTest.assert_equals(maxmin(21460234556134), (61460234552134, 11460234556234))\\nTest.assert_equals(maxmin(347435942637955), (947435942637355, 247435943637955))\\nTest.assert_equals(maxmin(942631615759140), (992631615754140, 142631615759940))\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,2,4,3,5,5,5,1,2,2,5,3,4,5,0,5,3,5,5,1,4,3,4,1,2,2,5,0,5,4,5,5,4,1,1,0,1,5,5,5,2,3,2,5,5,2,3,4,4,4,5],\"rators\":[\"aCNWav8S8Try9RkC6\",\"tAF9Gf6PiGogbZuWs\",\"aEm3Wvj2rFYRL8Lrb\",\"AJwBauGHyrbqgDYce\",\"8PwfYqoDQFThzNtvf\",\"oTm8JAxW6Kxed8P6B\",\"DwetpbChQM4r6Gwah\",\"Nua6T3dBurBy3Qfg9\",\"8JyqsSbN2FJXPr3cw\",\"L96uq5NFRTsYNdsv8\",\"HmKFZqFH9YC346djy\",\"mDWNyaaQ9hvPCRzSd\",\"vTfyrr4pGddp8rbXc\",\"W5TajitmCyxz87zAC\",\"KpHrC7WPEojnzgEtz\",\"ZNnsMeNkdDhHjSrZb\",\"bJaPCBx63YxdJAuTS\",\"5H9MNfC4DPwxbakTf\",\"3MybBtCNPcFHLMYmJ\",\"fznzd3qnvtbFkkizz\",\"9XNbjEKxsC89aX6ae\",\"xn7uGNKeAwPEkP9oA\",\"EksjxkfKerD7ZtqYA\",\"6fJpRpAgiWD5zX9qB\",\"4fhjJBvLBWh6QeSih\",\"GgLd4eWBu79mdjtkP\",\"hZW6j5s6RHpx35phy\",\"gnqiMtWWsK2aCjbpA\",\"cxABox46qWvJRyidE\",\"HsKZgdFc4ZqD6AFwH\",\"fSgCtTbtfBQBmGM2m\",\"oZiGwL535nJ5ZMJr7\",\"EH68sDGGufTc5vifi\",\"h4x2jaMdj5aQZbW5g\",\"iS5BrkGLzJyPK7nKt\",\"DPi9QGLctq2y76KuE\",\"cMpmn3uCJQ4AXA3ev\",\"Cia25zjeX3RkCNx5t\",\"Tg24gZyPmk8uDXcBY\",\"mLjrvoFNrH4uZWHRB\",\"Er39N3Lx3dx2nSpc9\",\"2YF9pq5TMZcck8GxD\",\"kWobGYgZWJxN6ZddF\",\"4EgBCgEyiZA2hRsh4\",\"pEGcXtqiTDm22pnjz\",\"fNtNTiNhQTsHJxvTS\",\"8sNv5PTHa7XQ8bNqR\",\"g3Jh47H2g9xtZGxqK\",\"K3RacTvkWHLfzKF8i\",\"eb6SRT4dS8Gy6km8R\",\"P9LftDEZQetEBcvYz\",\"22vqjk4gfZFNAeajb\",\"hFMEHoCLcgaBaivi6\",\"eHcgvkTGsH7ZziqBo\",\"b3Dk2LqoEgripS3Y3\",\"hBKf7LeSP6i2saXjk\",\"p8qqFdJ3FSk5x9z3G\",\"f8PWr7p2aKmYn4uvp\",\"2PufnQcsHsfymufX3\",\"zfrhof8pbZnQizdmi\",\"yjtdwc2AC4jA2RWtn\",\"4sHkH3t9CJYhbDwjM\",\"gJYuGdkXEWWmGRLzu\",\"cNQC9EWyvT2u37Wc9\",\"SGhPxX5bHGL8zZqtt\",\"SRwxbsLj2X4uPctZf\",\"2Z6JyyFgKoKYEnErv\",\"suArq5BbSy7gD6xri\"],\"total\":81,\"quality\":[5,5,5,5,3,5,5,2,5,5,5,5,5,5,4,5,4,5]},\"flags\":0},\"summary\":\"Maxie is the largest number that can be obtained by swapping two digits, Minnie is the smallest.  Write a function that takes a number and returns Maxie and Minnie. Leading zeros are not permitted.\\n\\nExamples\\nmaxmin(12340) ➞ (42310, 10342)\\n\\nmaxmin(98761) ➞ (98761, 18769)\\n\\nmaxmin(9000) ➞ (9000, 9000)\\nSometimes no swap needed.\\n\\nmaxmin(11321) ➞ (31121, 11123)\\n\\nNot\",\"tags\":[\"numbers\",\"strings\"],\"timestamp\":{\"$date\":1584135607195},\"title\":\"Maxie and Minnie\",\"quality\":4.611111111111111,\"family\":[{\"_id\":\"nMW5Tb8odgy3ePvGy\",\"language\":\"csharp\"},{\"_id\":\"AoZkgsYvGxx2gsFCP\",\"language\":\"javascript\"},{\"_id\":\"HqpZQPZiHbPK4HgEB\",\"language\":\"python3\"},{\"_id\":\"deki4mrf4dEAs66ov\",\"language\":\"ruby\"}]}}"]