a["{\"msg\":\"result\",\"id\":\"1088\",\"result\":{\"_id\":\"z3wYnBQPgBTzy87WA\",\"author\":\"Albrecht\",\"authorId\":\"EKrSBrTXuhE3f4xsR\",\"code\":\"import numpy as np\\ndef rps(s1, s2):\\n\\t\",\"difficulty\":1.5714285714285714,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"wogwZZTJhNuLT3ZfH\",\"instructions\":\"Create a function which simulates the game \\\"rock, paper, scissors\\\". The function takes the input of both players (rock, paper or scissors), first parameter from first player, second from second player. The function returns the result as such:\\n\\n- \\\"Player 1 wins\\\"\\n- \\\"Player 2 wins\\\"\\n- \\\"TIE\\\" (if both inputs are the same)\\n\\nThe rules of rock, paper, scissors, if not known:\\n\\n- Both players have to say either \\\"rock\\\", \\\"paper\\\" or \\\"scissors\\\" at the same time.\\n- Rock beats scissors, paper beats rock, scissors beat paper.\\n\\n### Examples\\n```\\nrps(\\\"rock\\\", \\\"paper\\\") ➞ \\\"Player 2 wins\\\"\\n\\nrps(\\\"paper\\\", \\\"rock\\\") ➞ \\\"Player 1 wins\\\"\\n\\nrps(\\\"paper\\\", \\\"scissors\\\") ➞ \\\"Player 2 wins\\\"\\n\\nrps(\\\"scissors\\\", \\\"scissors\\\") ➞ \\\"TIE\\\"\\n\\nrps(\\\"scissors\\\", \\\"paper\\\") ➞ \\\"Player 1 wins\\\"\\n```\\n\\n### Notes\\nTry to use a numpy array as a lookup table instead of if-constructions.\",\"isHidden\":false,\"lab\":\"Test.assert_equals(rps(\\\"rock\\\", \\\"paper\\\"), \\\"Player 2 wins\\\")\\nTest.assert_equals(rps(\\\"paper\\\", \\\"rock\\\"), \\\"Player 1 wins\\\")\\nTest.assert_equals(rps(\\\"paper\\\", \\\"scissors\\\"), \\\"Player 2 wins\\\")\\nTest.assert_equals(rps(\\\"scissors\\\", \\\"scissors\\\"), \\\"TIE\\\")\\nTest.assert_equals(rps(\\\"scissors\\\", \\\"paper\\\"), \\\"Player 1 wins\\\")\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,1,3,0,1,2,1,2,2,1,2,2,2,1,2,2,1,1,1,0,2,2,2,0,0,3,0,0,0,2,3,1,2,2,0,1,0,1,1,2,2,1,1,2,0,0,2,1,2,0,2,0,1,1,2,1,1,0,0,2,2,1,2,2,2,2,3,1,2,2,4,2,2,2,1,3,2,0,1,2,2,3,2,1,5,1,0,2,2,1,2,2,1,2,3,1,1,2,2,3,2,5,1,1,1,2,3,2,1,1,2,2,2,2,2,1,2,2,1,3,2,2,1,2,1,1,1,2,1,1,2,2,1,1,2,3,1,2,0,2,2,2,2,1,0,2,1,0,2,2,2,0,2,2,3,0,3,2,0,2,1,1,2,0,2,2,2,2,1,2,2,2,1,2,2,2,2],\"rators\":[\"EKrSBrTXuhE3f4xsR\",\"tAF9Gf6PiGogbZuWs\",\"HqmxnQJM66Y57twhn\",\"otXtuQygbcYATMZoP\",\"N2wnZXkhDH86mgjQ8\",\"fP7mHD7yL42xBFNgw\",\"SKabuq5XuhXBugKBa\",\"Nj6FwgBtAXsaQwsM2\",\"2fxapKr8XGdNeaKi2\",\"K96FwtfDDN5WM4Bb7\",\"gusMxRNBXAnXmAcnk\",\"gb9rvGus2Jv7bjZSs\",\"XKi8iZXBCHCaebSHh\",\"FZrPeYAgHotCGGkgd\",\"C4QntmkYtB89GNtpd\",\"K7ipA4FZ8yGYMYXL7\",\"6ShafRStcvew4GfCh\",\"Jqk2uJZZxEv5wZFze\",\"rLHMKDHNejzfDn69h\",\"u5u2YpHXiNgzDNJdX\",\"gMJhLdyw3tH7L96X2\",\"4tgBydK887PitgAoi\",\"wtqZoXqEJzvMZcZWc\",\"eCNv6dDWEyCrSHPBa\",\"PhceyfmFntJcn5Fhf\",\"DryNRN98Dj24BpgrL\",\"s5M5RvgqR9BhB9JoC\",\"HQxp7NcdvF92G7bYS\",\"YGLHNqjFtkXQMn84h\",\"xowjbn5yEv7c93axA\",\"TePz42wc3ZZ5CKA6L\",\"nfXGHENb5md7m355s\",\"yabtHTtycsWhcGBfD\",\"2innwjWqxJHo4eRGh\",\"ab7BsQuhDo3QgE6bh\",\"rEWQdNHK6YjuBqmrR\",\"cZGJGxM65Nq6oCevW\",\"Ycj4iTJGFyvC4bXek\",\"t3wwRMtYdLYBwWR4J\",\"j2wcHGHmPCHbaQEye\",\"4fctAnxyFRB8stPRQ\",\"XJHwEtdyjcW2nZKFM\",\"8JyqsSbN2FJXPr3cw\",\"4CFzv558qbGcpQwc4\",\"yKttxy9JGn5Jzwuj6\",\"CuY5BaTCcu7Mp9tDu\",\"gajmJMyZpWNj5ZKzt\",\"krjawd7wMfsvkjGNP\",\"p3dsCFdWGzWGhFrSQ\",\"Zpxgjf24bNtrmkiry\",\"23oi2a3vQwhtLEbSj\",\"WcqujsAnCdQ9uRbeZ\",\"FdPRaPpar8xBdaBrr\",\"AasGs8AeX9Lcb9xJn\",\"wwz3ixWSv8rFDHBXd\",\"kXEfD7xxEyWd7oxxL\",\"F2aeZ4zqupp7a8SkW\",\"iMHrN3Wiefh9Ame38\",\"kQ3QhjsGsLnCKFZZN\",\"qJhL4H3ecaDCmnaG2\",\"4FLJf9nkYfGoSvMxf\",\"BZ9aDwsT223J4ZG74\",\"nkaZM35jaNQ5sSccj\",\"S9JdLfPzgo2AhS48a\",\"7DA5QzM6btwePZQ5L\",\"w4NRttjXgRXJEZFgK\",\"q9uxW7BAoY75irxBy\",\"aRqQ42J5zqCmBNd8w\",\"bLpgu8xTdpDPFSAsM\",\"v3fjGuc7Pq4yjFygS\",\"rGg3ChGaCZSrfs4rt\",\"hnyhBFWwNCz9mDfSi\",\"9Ly8afdtofp8DXzrt\",\"pMg2Zddm29zRGP6wg\",\"ABhs5LEMpxBbNRqbt\",\"w3A7cBWyAfukk6xEQ\",\"yZvzB3qFb8pkHy4dg\",\"dHZqT6h4JMwk5fPC8\",\"cR3ibTMxLyEdDFCHY\",\"scjPs6jdbBPThPxzE\",\"gDZdQN2efkqTu7W5d\",\"WLFPvm65aHfgwQy7N\",\"vLrq4dEDMM2wd68Dc\",\"hKrY8hWMgToBavfhD\",\"J5T8gZqiZXFuFDTQ7\",\"Rm56jv97BhcBx7mGj\",\"2QGRoQn2dRq3scu7k\",\"jNvegJWCk5HCtEMbK\",\"8PwfYqoDQFThzNtvf\",\"ZNnsMeNkdDhHjSrZb\",\"Yp7uvStL97cC9fKkY\",\"5kEyLPjTLrt7z2YJZ\",\"q5a96XumccZyhQNyL\",\"gJYuGdkXEWWmGRLzu\",\"Nua6T3dBurBy3Qfg9\",\"aEm3Wvj2rFYRL8Lrb\",\"Lw8oRc5SERsuntXMo\",\"HF28xZKSLM9wEuqNg\",\"DEDniTrstQYGounXT\",\"KdNDysEsy2TW5QRJ2\",\"KkZNuFJFE2majZncQ\",\"9pzFiFK3ANLjQfnr2\",\"zT9LpkiwYjLviYYW6\",\"ahk2qiXKJA753wAJk\",\"nx3gu7spJkhJ35qQa\",\"LWCzZ8mb8gwrRNGfq\",\"Z6eqrAatHZjffx4s3\",\"RjKTSeuvQkmCjyofZ\",\"R4SjTgDnpigJYDLyL\",\"c2csYH5Amafb5xEQk\",\"4yNLEwL2rsx4EE5Nt\",\"H4abACFDH5t8CnnyH\",\"ZrKCkX7xxGGZzauFW\",\"NG8PWBSjsM8mMhQEq\",\"a777e8chPvJkY3tKa\",\"syRNbbPdLCGXbH2Gy\",\"iojEnnY9FsMfYzp6f\",\"DfMcEs6XsfGtTpQ26\",\"yjtdwc2AC4jA2RWtn\",\"9CoqdidjM9KbeKnHY\",\"Pe8vWpDHRuH9nSGKW\",\"qezMkJ2RzmEBjkfw5\",\"XrqNzJ2FRG8HnGiR6\",\"JS3hNM3XXkxPdg3yk\",\"NNE5HNRXAkmhrWgyQ\",\"tcn2oAsxPQDmCxGmg\",\"eWHoALe25bx3CgiAr\",\"oBcs8GLX2ZFLXQy8y\",\"FEYpu9RWysAgW3XnP\",\"4P2Tye3qbEKWWYF7C\",\"E4KGguXaWuR4bd2n7\",\"mG8HqKiAQFTdRZthG\",\"tpxMgkGSHwBjS95Ta\",\"qD2LrwaDrSdiybLKY\",\"Ys9R8QujbaYvbRLr3\",\"c2u7qfdaYxcyuydtu\",\"zZDaXBxMzTCBhNkgL\",\"dYPkStFnLvAMsHSzZ\",\"iS5BrkGLzJyPK7nKt\",\"5XiuAqicKD4hBdu63\",\"RGMbFMZXJr7DhcAJy\",\"3oWGHYzEWze8hMKtt\",\"zd9FLSzsGz3evKafy\",\"rfyEkETeoS96QNH4e\",\"dBzwBtRjZqB98DJeB\",\"EfxwqhYdapX3dMQC2\",\"d8qtzoLB264iP8tdY\",\"5HCu9Ydd86QgHDRNP\",\"4xDqkRhmBJhMXDdm5\",\"5S9nX4rKsnCcnv4Cz\",\"HuNF3xTBzmatyGSTm\",\"6xTu4r8NMczBFvmtz\",\"GGdmhAvxXhqhhibJN\",\"zSXaoNJKnxytvtFMb\",\"KJCDwGkoXh8qtbbKr\",\"Ds7L5bksw2QRHjrKL\",\"nCSa4MndzZ2JtizSu\",\"GPYJTewKx5LaAH7aN\",\"qAby4AWXmTNeusvg3\",\"sbJcFfQjQ59Wfg4Cd\",\"YcCLwitFMAEJSnxAW\",\"o4ixjQGSaYqA2JoM4\",\"eMuCpJ2spXWkJjWNz\",\"sHjfbGQGLHE6JR6qu\",\"n3shdmsAgymHMGEwP\",\"Mzue5t6AobHz2edJH\",\"uTZ3NEpSuwSgGehGH\",\"joxsWNqkSudzBYLpw\",\"pWD2YC5s4YRCxFc2i\",\"M6fxKEh6am7YajPiT\",\"T6iBEE2jp7f7iEF2P\",\"yod5YhKtPqw2GfG9B\",\"quwbxHTdqWtt3N2FT\",\"3cF6NXq3ZEwdkgSjb\",\"H4LqzfSad6d4BCgwy\",\"srJ34BaybkQh3qRkM\",\"8BFSTCnoe2QggN64c\",\"CHvzhtXnv8HTbPQ56\",\"buX4mCQhtXCfBjeno\",\"BrTDhPJcACL2bsrpJ\",\"qzXAMXsHZGT8o5hTA\",\"2NDSt8HyP33cFRHsu\",\"M4vq8ATaS9Jg5X7iP\",\"9azx6pJHMGK7dvDzQ\",\"2PufnQcsHsfymufX3\",\"T2vhHPhRR96hRizq8\",\"suArq5BbSy7gD6xri\",\"4TmgHkn5vqyHK3sYC\",\"MKT7khMBGXzA22ykf\",\"pduNK68oazqQTtbLp\",\"mw9464S5dnenqzvpm\",\"AXdgPwPcYHJrXue4P\",\"yAouD3PxzED8a4gap\",\"cCGJgtoeTjxW55wrW\",\"Wi4H6ayKsNDWWQCG5\",\"BfnPf8JzPpfxcQ5Qd\",\"Ca5uivce6mGKyszRD\",\"DQskEvAv5KiJDPtGF\",\"mXXPMi2anfJi5whC9\"],\"total\":212,\"quality\":[5,5,5,5,5,5,5,5,5,4,5,4,5,3,5,5,5,5,4,5,4,4]},\"flags\":0},\"summary\":\"Create a function which simulates the game \\\"rock, paper, scissors\\\". The function takes the input of both players (rock, paper or scissors), first parameter from first player, socond from second player. The function returns the result as such:\\n\\n\\\"Player 1 wins\\\"\\n\\\"Player 2 wins\\\"\\n\\\"TIE\\\" (if both inputs are the same)\\n\\nThe rules of rock, paper, scissors, if not known:\",\"tags\":[\"data_structures\",\"games\"],\"timestamp\":{\"$date\":1574953313487},\"title\":\"Simulate the Game \\\"Rock,  Paper,  Scissors\\\"\",\"quality\":4.681818181818182,\"family\":[{\"_id\":\"MYqnQ3DpPZi9di4iW\",\"language\":\"cpp\"},{\"_id\":\"3S8XppR6Yf5mXPxij\",\"language\":\"java\"},{\"_id\":\"2n6kGrNsqpexmvJhQ\",\"language\":\"javascript\"},{\"_id\":\"z3wYnBQPgBTzy87WA\",\"language\":\"python3\"},{\"_id\":\"cMeLkPAWKR9kkbQv8\",\"language\":\"ruby\"}]}}"]