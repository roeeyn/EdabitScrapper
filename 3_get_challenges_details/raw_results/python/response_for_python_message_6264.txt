a["{\"msg\":\"result\",\"id\":\"1841\",\"result\":{\"_id\":\"gQgFJiNy8ZDCqaZb4\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def overlap(s1, s2):\\n\\t\",\"difficulty\":2.5247524752475248,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"GNZ2PKjjvfDQ8pfEk\",\"instructions\":\"Given two words, overlap them in such a way, morphing the last few letters of the first word with the first few letters of the second word. Return the shortest overlapped word possible.\\n\\n### Examples\\n```\\noverlap(\\\"sweden\\\", \\\"denmark\\\") ➞ \\\"swedenmark\\\"\\n\\noverlap(\\\"edabit\\\", \\\"iterate\\\") ➞ \\\"edabiterate\\\"\\n\\noverlap(\\\"honey\\\", \\\"milk\\\") ➞ \\\"honeymilk\\\"\\n\\noverlap(\\\"dodge\\\", \\\"dodge\\\") ➞ \\\"dodge\\\"\\n```\\n\\n### Notes\\n- All words will be given in lowercase.\\n- If no overlap is possible, return both words one after the other (example #3).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(overlap(\\\"sweden\\\", \\\"denmark\\\"), \\\"swedenmark\\\")\\nTest.assert_equals(overlap(\\\"edabit\\\", \\\"iterate\\\"), \\\"edabiterate\\\")\\nTest.assert_equals(overlap(\\\"honey\\\", \\\"milk\\\"), \\\"honeymilk\\\")\\nTest.assert_equals(overlap(\\\"dodge\\\", \\\"dodge\\\"), \\\"dodge\\\")\\nTest.assert_equals(overlap(\\\"colossal\\\", \\\"alligator\\\"), \\\"colossalligator\\\")\\nTest.assert_equals(overlap(\\\"leave\\\", \\\"eavesdrop\\\"), \\\"leavesdrop\\\")\\nTest.assert_equals(overlap(\\\"joshua\\\", \\\"osha\\\"), \\\"joshuaosha\\\")\\nTest.assert_equals(overlap(\\\"diction\\\", \\\"dictionary\\\"), \\\"dictionary\\\")\\nTest.assert_equals(overlap(\\\"massive\\\", \\\"mass\\\"), \\\"massivemass\\\")\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,3,3,2,3,2,1,4,2,2,4,4,2,3,4,3,4,2,0,4,4,3,2,3,4,1,4,5,4,3,3,4,0,3,2,1,2,4,0,1,2,0,2,0,3,1,4,1,0,4,2,2,3,4,4,4,4,4,3,1,4,0,2,4,4,3,3,2,3,3,4,2,2,4,1,0,4,4,0,0,2,2,2,1,2,2,0,3,4,3,2,3,2,3,3,4,0],\"rators\":[\"PXAcsKkssS2yLyDv2\",\"tAF9Gf6PiGogbZuWs\",\"aEm3Wvj2rFYRL8Lrb\",\"WLFPvm65aHfgwQy7N\",\"gb9rvGus2Jv7bjZSs\",\"yZvzB3qFb8pkHy4dg\",\"AJwBauGHyrbqgDYce\",\"2fxapKr8XGdNeaKi2\",\"8JyqsSbN2FJXPr3cw\",\"8PwfYqoDQFThzNtvf\",\"mDWNyaaQ9hvPCRzSd\",\"zokSkNKBQsrk4jRpH\",\"K5vETaccLsPyu8sbd\",\"aCNWav8S8Try9RkC6\",\"s5M5RvgqR9BhB9JoC\",\"S6Zd8mPuvhuh3MFRt\",\"uw8E83imJYpQiiPpP\",\"q3uHSmiZHPus75uyb\",\"YRstQuthRkFeBiXug\",\"dXMbkgQFoN37BhruB\",\"AasGs8AeX9Lcb9xJn\",\"et4ezbyWYdtQd54X7\",\"3Zceb8GudqAG3onG3\",\"fznzd3qnvtbFkkizz\",\"55RQznnuTGpsj3EXd\",\"daFMtxYmCNMQ9HNsJ\",\"iHMehMwgYQGhGAF72\",\"kYWb8BwpKwunQkxeX\",\"ZNnsMeNkdDhHjSrZb\",\"LjoNTyGEMfBpMHHus\",\"YLtspA8ec6ntcoMMf\",\"Ecg4m7srYGgZsb4Ck\",\"m6D2RuQJwrAK6WB3v\",\"ACEZh39brWjdGkZXb\",\"W5TajitmCyxz87zAC\",\"xn7uGNKeAwPEkP9oA\",\"f2BoqyCpgnmjEjLqx\",\"5qfcG54cbBC8ujxav\",\"yTtSCvGPyYna6JuRC\",\"x4dfavjLEcrvAF3QQ\",\"kXEfD7xxEyWd7oxxL\",\"8sNv5PTHa7XQ8bNqR\",\"mqJtnfNCs6CedXnay\",\"zZDaXBxMzTCBhNkgL\",\"4fhjJBvLBWh6QeSih\",\"TM2t3Le4qPcqSnzKX\",\"J23RcmzbdtBbPCTjT\",\"dEuJGZbBQkveCXEFk\",\"W6Yn9jErAR8W6ugbh\",\"DTKtcn5HrYxtcBza3\",\"yhnpZLDLibMdyaM5W\",\"9AzxAeaR5xWAoqYxB\",\"cX76cHEerRP5q3Pu2\",\"wcQLERs5vMcAwJrEy\",\"8Y5ShQEchgSZx6vBK\",\"5dHucvf2qBYyKim7X\",\"P7NmFbCJ5offXMRvB\",\"SGhPxX5bHGL8zZqtt\",\"yjtdwc2AC4jA2RWtn\",\"8nE8QHnFYsHCFebte\",\"v9KtC8YLbMWmXiW2H\",\"XjajdyybZZbkz8o5x\",\"quEfQhA3xBwsCobcg\",\"HF28xZKSLM9wEuqNg\",\"qPpQfR5KyDb5Y3EFf\",\"tkdRHAExhDq8ryDJT\",\"QRv96jmNaYsWkxQEG\",\"D62kvgDJ6asnsFaEw\",\"m3R9aaRoEbaxRsSNA\",\"yoYQqaY6GszuTkNSs\",\"J5T8gZqiZXFuFDTQ7\",\"w3o9qJuPR62HHh9mx\",\"SExX3m5YftBWmsk2e\",\"TxsYMnonbDnTQ8XDf\",\"ECykF5mBka6WGEc3Z\",\"K3RacTvkWHLfzKF8i\",\"XmmGZyRxA7fgQ3veZ\",\"d8qtzoLB264iP8tdY\",\"ReJkqc43MY6pNcMDh\",\"J3upzLHuEwXH7Z2hx\",\"8KNtgAcNpyT2f6bTT\",\"DPi9QGLctq2y76KuE\",\"3e8sBuCbPY8AKeJur\",\"n2BRY9X8899dcG8Bw\",\"gXTAie79kiw28tx5u\",\"Yp7uvStL97cC9fKkY\",\"u4e7YFH8BCpNDQ8ez\",\"iojEnnY9FsMfYzp6f\",\"2PufnQcsHsfymufX3\",\"HhYCji7QqauyN3A7v\",\"SuhokLqQw2GKeWAYp\",\"ctbThYbufFCYbRK4f\",\"H9KZi2cjt4FwH7qog\",\"HqmxnQJM66Y57twhn\",\"etoxSpG4fGKThLozM\",\"MpfytGFYF77emJ3cT\",\"T6iBEE2jp7f7iEF2P\",\"gKnWjDjwrJh7MK2df\",\"oBcs8GLX2ZFLXQy8y\",\"nkH3HfJXLMNcBMM79\",\"zY2wmrbhRc6F47G5W\",\"k9BkBo9XBNBRtpWLq\",\"Qg6QXprmAo8DczGL9\",\"nQRzZKeDKuLRf9chX\",\"x9F5WvWftdnhG7DqT\",\"JKb5rhL6DKcCAypF9\",\"FNi2H5fKc5EAQ2Hcq\",\"euPBBaYXyS8RBr9KB\",\"GTKsdeEihE636Le9i\",\"Fu56JWoBzq98dPt85\",\"c2as3q6EWXevLYp9Y\",\"iqmPb9JuJDgTFeR8Q\",\"RErqK2yM94wYyD2hk\",\"kK4j2h8a2jpPrpjsM\",\"n2qKKxomPnb4zez5M\"],\"total\":127,\"quality\":[5,5,1,5,5,5,5,4,3,5,5,5,4,5,5,5,4,5,5]},\"flags\":1},\"summary\":\"Given two words, overlap them in such a way, morphing the last few letters of the first word with the first few letters of the second word. Return the shortest overlapped word possible.\\n\\nExamples\\noverlap(\\\"sweden\\\", \\\"denmark\\\") ➞ \\\"swedenmark\\\"\\n\\noverlap(\\\"edabit\\\", \\\"iterate\\\") ➞ \\\"edabiterate\\\"\\n\\noverlap(\\\"honey\\\", \\\"milk\\\") ➞ \\\"honeymilk\\\"\\n\\noverlap(\\\"dodge\\\", \\\"dodge\\\") ➞ \\\"dodge\\\"\",\"tags\":[\"strings\",\"loops\",\"algorithms\"],\"timestamp\":{\"$date\":1584293838856},\"title\":\"Word Overlapping\",\"quality\":4.526315789473684,\"family\":[{\"_id\":\"BWeHysqycwat6Djf7\",\"language\":\"cpp\"},{\"_id\":\"kficszsYY2ojKfDL9\",\"language\":\"javascript\"},{\"_id\":\"gQgFJiNy8ZDCqaZb4\",\"language\":\"python3\"},{\"_id\":\"jwXbq9TcXfiq2wNCo\",\"language\":\"ruby\"}]}}"]