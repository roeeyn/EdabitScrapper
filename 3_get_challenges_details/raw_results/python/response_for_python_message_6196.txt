a["{\"msg\":\"result\",\"id\":\"1811\",\"result\":{\"_id\":\"ZwmfET5azpvBTWoQT\",\"author\":\"zatoichi49\",\"authorId\":\"tAF9Gf6PiGogbZuWs\",\"code\":\"def valid_word_nest(word, nest):\\n\\t\",\"difficulty\":2.515527950310559,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"EAbQqeZkgna25J7Cs\",\"instructions\":\"A word nest is created by taking a starting word, and generating a new string by placing the word inside itself. This process is then repeated.\\n\\nNesting 3 times with the word \\\"incredible\\\":\\n\\n```\\nstart  = incredible\\nfirst  = incre(incredible)dible\\nsecond = increin(incredible)credibledible\\nthird  = increinincr(incredible)ediblecredibledible\\n```\\n\\nThe final nest is `increinincrincredibleediblecredibledible` (depth = 3)\\n\\nValid word nests can always be *collapsed* to show the starting word, by reversing the process above:\\n\\n```\\nword = \\\"incredible\\\"\\nnest = \\\"increinincrincredibleediblecredibledible\\\"\\n\\nSteps:\\n=> \\\"increinincrincredibleediblecredibledible\\\" # starting nest\\n=> \\\"increinincr(incredible)ediblecredibledible\\\" # find word in nest\\n=> \\\"increinincr            ediblecredibledible\\\" # remove word\\n=> \\\"increinincrediblecredibledible\\\" # join remaining halves\\n=> \\\"increin(incredible)credibledible\\\" # find word in nest...\\n\\n... repeat steps until single word remains\\n\\n=> \\\"incredible\\\" (return True as \\\"incredible\\\" = word)\\n```\\n\\nWhen *in*valid word nests are collapsed, the starting word isn't found:\\n\\n```\\nword = \\\"spring\\\"\\nnest = \\\"sprspspspringringringg\\\"\\n\\nSteps:\\n=> \\\"sprspspspringringringg\\\" # starting nest\\n=> \\\"sprspsp(spring)ringringg\\\" # find word in nest\\n=> \\\"sprspsp        ringringg\\\" # remove word\\n=> \\\"sprspspringringg\\\" # join remaining halves\\n=> \\\"sprsp(spring)ringg\\\" # find word in nest...\\n\\n... repeat steps until single word remains\\n\\n=> \\\"sprg\\\" (return False as \\\"sprig\\\" != \\\"spring\\\")\\n```\\n\\nGiven a *starting word* and a *final word nest*, return `True` if the word nest is valid. Return `False` otherwise.\\n\\n### Examples\\n```\\nvalid_word_nest(\\\"deep\\\", \\\"deep\\\") ➞ True\\n\\nvalid_word_nest(\\\"novel\\\", \\\"nonnonovnovnovelelelvelovelvel\\\") ➞ True\\n\\nvalid_word_nest(\\\"painter\\\", \\\"ppaintppapaipainterinternteraintererainter\\\") ➞ False\\n# Doesn't show starting word after being collapsed.\\n\\nvalid_word_nest(\\\"shape\\\", \\\"sssshapeshapehahapehpeape\\\") ➞ False\\n# Word placed outside, not inside itself.\\n```\\n\\n### Notes\\nValid word nests can only be created by repeatedly placing the word inside *itself*, so at any point when collapsing the nest, there should only be *one* instance of the word to be found.\",\"lab\":\"Test.assert_equals(valid_word_nest(\\\"redeem\\\", \\\"rederedredrredredrerrrederedeememedeemedeemedeeemeemmedeemeemeemem\\\"), False)\\nTest.assert_equals(valid_word_nest(\\\"survey\\\", \\\"sursursurvsurvssurssursusurveyrveyveyurveyveyurveyeyeyveyvey\\\"), True)\\nTest.assert_equals(valid_word_nest(\\\"sensation\\\", \\\"sensatissenssensastssenensensasenssensensensationsationsationationtionsationatioionantionensationon\\\"), False)\\nTest.assert_equals(valid_word_nest(\\\"feed\\\", \\\"feefeeded\\\"), False)\\nTest.assert_equals(valid_word_nest(\\\"station\\\", \\\"ststatstasstatistationontationtionionation\\\"), True)\\nTest.assert_equals(valid_word_nest(\\\"quarrel\\\", \\\"quaquarrquarrelrerell\\\"), False)\\nTest.assert_equals(valid_word_nest(\\\"broadcast\\\", \\\"broadcbroadcastbroadcastast\\\"), False)\\nTest.assert_equals(valid_word_nest(\\\"current\\\", \\\"currccurrcurcurrcucucurrentrrentrrententrententurrentent\\\"), True)\\nTest.assert_equals(valid_word_nest(\\\"diet\\\", \\\"diet\\\"), True)\\nTest.assert_equals(valid_word_nest(\\\"park\\\", \\\"pppappappapapapapparkarkarkrkrkrkrkkarkrkrarkark\\\"), False)\\nTest.assert_equals(valid_word_nest(\\\"undermine\\\", \\\"undermiundermundermiunununderundermineminederminedermineneinene\\\"), True)\\nTest.assert_equals(valid_word_nest(\\\"nail\\\", \\\"nannnailnailailil\\\"), False)\\nTest.assert_equals(valid_word_nest(\\\"show\\\", \\\"sshssshowhowhowowhow\\\"), True)\\nTest.assert_equals(valid_word_nest(\\\"demand\\\", \\\"dedemdeamademademandndndmandnd\\\"), False)\\nTest.assert_equals(valid_word_nest(\\\"publicity\\\", \\\"publicppublicityublicityity\\\"), True)\\nTest.assert_equals(valid_word_nest(\\\"relief\\\", \\\"rrerelirerreerrereliefliefelielifliefliefefliefelfeief\\\"), False)\\nTest.assert_equals(valid_word_nest(\\\"pipe\\\", \\\"ppppppipeipeipeipeipeipe\\\"), True)\\nTest.assert_equals(valid_word_nest(\\\"diagram\\\", \\\"diargdiadidiadiagramgramagramgramam\\\"), False)\\nTest.assert_equals(valid_word_nest(\\\"salt\\\", \\\"ssaltalt\\\"), True)\\nTest.assert_equals(valid_word_nest(\\\"pioneer\\\", \\\"pionpippipioppionpiopipioneeroneerneereerioneerneeroneerioneeroneereer\\\"), True)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,2,2,3,2,3,3,3,4,1,4,4,3,4,1,2,3,1,4,3,3,3,4,2,2,3,3,4,2,1,3,3,3,2,1,4,0,4,2,2,1,1,2,2,2,3,4,4,2,0,2,3,2,3,3,3,3,1,3,3,2,0,2,2,2,0,4,4,1,0,2,4,2,1,3,3,0,2,3,4,3,1,1,2,2,3,2,3,3,1,2,2,3,2,3,3,3,3,2,2,3,3,0,4,3,2,3,3,3,2,4,1,3,3,2,1,2,5,3,4,2,0,3,2,3,3,2,2,3,2,4,4,2,2,3,2,2,2,3,3,3,4,0,4,4,2,2,4,4,4,3,2,3,3,4,3,1],\"rators\":[\"yZvzB3qFb8pkHy4dg\",\"gb9rvGus2Jv7bjZSs\",\"AYaEkTWLMmfzpwejr\",\"8JyqsSbN2FJXPr3cw\",\"tAF9Gf6PiGogbZuWs\",\"msE99cETKzgGn6Hmv\",\"BFNm9gacwba9KyLFW\",\"GCxj7RJCeWYNxj8oQ\",\"jHrtWDGBhkbuWa7fG\",\"3ifAHQzsMasfQySoL\",\"Nj6FwgBtAXsaQwsM2\",\"HqmxnQJM66Y57twhn\",\"wT5gGgvjKc5wz59AQ\",\"nYSebjpPsiBXiho7y\",\"vgTvCCxgvbCTDvaRT\",\"2fxapKr8XGdNeaKi2\",\"Jqk2uJZZxEv5wZFze\",\"8PwfYqoDQFThzNtvf\",\"WLFPvm65aHfgwQy7N\",\"pmgFEciNrd3ES9tuu\",\"aEm3Wvj2rFYRL8Lrb\",\"aCNWav8S8Try9RkC6\",\"pkQBaSzukotPEXmrD\",\"AasGs8AeX9Lcb9xJn\",\"mDWNyaaQ9hvPCRzSd\",\"gJYuGdkXEWWmGRLzu\",\"daFMtxYmCNMQ9HNsJ\",\"ZNnsMeNkdDhHjSrZb\",\"qR6hLPuagPSHAgcwn\",\"hnyhBFWwNCz9mDfSi\",\"bJaPCBx63YxdJAuTS\",\"aLwJNALj2MpjAGZz4\",\"n2BRY9X8899dcG8Bw\",\"55RQznnuTGpsj3EXd\",\"a777e8chPvJkY3tKa\",\"Ecg4m7srYGgZsb4Ck\",\"f2BoqyCpgnmjEjLqx\",\"xn7uGNKeAwPEkP9oA\",\"RXgLif2vM276W4tgZ\",\"zZDaXBxMzTCBhNkgL\",\"8sNv5PTHa7XQ8bNqR\",\"nZs57bxjesuEdNGAj\",\"zZ43WzxvFu7kaTKZ6\",\"4fhjJBvLBWh6QeSih\",\"dWXHFmTpF8PnGJQL3\",\"P7NmFbCJ5offXMRvB\",\"cRpaCxYRmGcN3Nsoj\",\"DNACg4rcgZsPtYGZ8\",\"yjtdwc2AC4jA2RWtn\",\"XjajdyybZZbkz8o5x\",\"HF28xZKSLM9wEuqNg\",\"SGhPxX5bHGL8zZqtt\",\"eqa6cvt5yha7z7dPt\",\"iS5BrkGLzJyPK7nKt\",\"iBsN2jda8GGPgqj3u\",\"uZJqBoqeZRX3RncAR\",\"v9KtC8YLbMWmXiW2H\",\"974cv448kw6Wu2JF6\",\"K3RacTvkWHLfzKF8i\",\"J3upzLHuEwXH7Z2hx\",\"zd9FLSzsGz3evKafy\",\"2g9DndhBotcaKDiFD\",\"Kd9cbANRqNspHmByA\",\"8KNtgAcNpyT2f6bTT\",\"8nE8QHnFYsHCFebte\",\"3ahQHoAWtRTbjs335\",\"gXTAie79kiw28tx5u\",\"QRv96jmNaYsWkxQEG\",\"ScaZG69jog5kcqGtQ\",\"2PufnQcsHsfymufX3\",\"QHcNEadRcCStpv7dj\",\"iojEnnY9FsMfYzp6f\",\"9izxzCBrsRCbD9ajK\",\"R6qQ4bM29HAvvQQEb\",\"mfm3gB39arY8Rjb2y\",\"MXjxGML2X75x64vJo\",\"eHcgvkTGsH7ZziqBo\",\"s5M5RvgqR9BhB9JoC\",\"ctbThYbufFCYbRK4f\",\"JKb5rhL6DKcCAypF9\",\"tfhD52NNMdkPtGgLa\",\"hkiz2Nv927cYGrA86\",\"RgGPHXXDAGiE6Wddx\",\"oBcs8GLX2ZFLXQy8y\",\"MpfytGFYF77emJ3cT\",\"suaEBYJRrEGzyWnku\",\"E6sRiQd5xuyefLimm\",\"T6iBEE2jp7f7iEF2P\",\"LNCb5rksJLJ43L4Nw\",\"7wEd3pvkQCeixZ4mn\",\"nkL2knkcNaiHCerW2\",\"97DthwdtrBLm2y2Yj\",\"y5aiHcLmXRYR2Hsty\",\"mFeC4dexaEuvSWtYG\",\"FxiKefjjFrNKTFHyv\",\"2cdvd8yuPLSwvGj9w\",\"a5syAeXax29CDsQwo\",\"aeZ3FFW7kYqgGwqDo\",\"oFEG3RDs5J99JYtkZ\",\"RoErKvc4oJyj4FZ8J\",\"hR7GMiqGap4CzEWSy\",\"Diyz4XjYybMb7p4xE\",\"dyAGqDRkFZog24SWA\",\"tkY6eyniNAThNyW8K\",\"mfsaETo7uA4x5vqLD\",\"h5Mwf3BTPKuhq957g\",\"E9ttMPTkLkKG6nZrg\",\"k2jDSMEtYyzfWWzka\",\"3Hc3zbbgdjusAhuYC\",\"rKwKNnb6ujvmwJGiX\",\"ZPJgJqis2bXyHZvqT\",\"9KeGcFLPp9hxuSHCb\",\"5NJudwCk2RuALPABx\",\"YgYYKh6Fdcxx8XFtG\",\"BuGWvGZGiJELoMy5G\",\"hZu74uvdDyYew4ruW\",\"JwkwCHcXthnGDsdFr\",\"2cFEkS68gQA5vtKc4\",\"LoX23rW7s5LuSRaFL\",\"dqa7FwRWsk5mbnuM7\",\"XHShZ3WMPgGEA2vkR\",\"FwhoTHgLe9cNSzcT5\",\"5qwwbgd8zs6NFwJti\",\"gfittN7BWxzvzuF9h\",\"HbrA4HjPBodbLyEHS\",\"yhEXw7srnzqThKFKw\",\"fhAQbzS6a4jhB6vFB\",\"T6kEfMLB6qb8zrk6m\",\"fysXNeWzSQX5wadMp\",\"GDMxpZnTZ6g6Amjxu\",\"kDS65HqCv4sngukej\",\"ZFuRxFLawEikh87jL\",\"E6sdKnmsmffakJXSG\",\"zrQuMFJE2HPziHphf\",\"ZyLGmndfstLRjYciA\",\"s66ybqHn4MG953AsN\",\"J5T8gZqiZXFuFDTQ7\",\"AhZwrR5qRuHYSxCd9\",\"RwCKTDzJ98fFr7K5H\",\"PjSSjHCqbEYr8mu6u\",\"x9F5WvWftdnhG7DqT\",\"3mke8mGD2mHgrtoRD\",\"23oi2a3vQwhtLEbSj\",\"fHQwbcsBGw7casZzN\",\"k9Lu64YQgoFYhWgKs\",\"scDrfGysNHiDgReDx\",\"9pqtNWrsTJdZcRbEZ\",\"iE7dwp9t7fG8uJr8k\",\"A54M97c9R3DRRfGXT\",\"Si6jT3DnRMXYd27k9\",\"dSd7wHgXGQeG5BQ2P\",\"hYq2tQbwKgxWpMN6z\",\"BrTDhPJcACL2bsrpJ\",\"fbmQmknzYvRZSq88k\",\"7tSAjpxntsow3Enma\",\"yTtSCvGPyYna6JuRC\",\"yod5YhKtPqw2GfG9B\",\"QJM5KcENEwS24NDs7\",\"hKFLMhz2bxa8KbgKR\",\"DPi9QGLctq2y76KuE\",\"iC3KzMHEFWKi2G54H\",\"d8qtzoLB264iP8tdY\",\"jWbd7SYDzLPjc9EDh\",\"yZxixWN2iXeAHZz8o\",\"FNi2H5fKc5EAQ2Hcq\",\"fbr22rabEJMfBp7vD\",\"iqmPb9JuJDgTFeR8Q\",\"sMtBQu4wRKGDJrBwW\",\"aFYzioHvZPvPaunsg\",\"eXW8reZCCZHQzJjQi\",\"GTKsdeEihE636Le9i\",\"twgSs5DbGN4qcqFa3\",\"Fu56JWoBzq98dPt85\",\"m3R9aaRoEbaxRsSNA\",\"RZejvpBSigGCH9FRS\",\"Wi4H6ayKsNDWWQCG5\"],\"total\":184,\"quality\":[5,4,5,3,4,5,4,4,5,4,4,4,5,4,5,5,5,5,4,1]},\"flags\":2},\"subscribers\":[\"tAF9Gf6PiGogbZuWs\"],\"summary\":\"A word nest is created by taking a starting word, and generating a new string by placing the word inside itself. This process is then repeated.\\n\\nNesting 3 times with the word \\\"incredible\\\":\\n\\nstart  = incredible\\nfirst  = incre(incredible)dible\\nsecond = increin(incredible)credibledible\\nthird  = increinincr(incredible)ediblecredibledible\\n\\nThe final nest is increin\",\"tags\":[\"conditions\",\"strings\",\"language_fundamentals\",\"regex\"],\"timestamp\":{\"$date\":1563223595345},\"title\":\"Word Nests (Part 2)\",\"isHidden\":false,\"quality\":4.25,\"family\":[{\"_id\":\"MJRsKyhL9MTNCmrXi\",\"language\":\"cpp\"},{\"_id\":\"qRRYmmyTRBhJJNMwq\",\"language\":\"java\"},{\"_id\":\"nm5jyuTK9KdgtYEjJ\",\"language\":\"javascript\"},{\"_id\":\"ZwmfET5azpvBTWoQT\",\"language\":\"python3\"},{\"_id\":\"sM4LWbKsjCrdEfKRC\",\"language\":\"ruby\"}]}}"]