a["{\"msg\":\"result\",\"id\":\"650\",\"result\":{\"_id\":\"Fx7hyoNTZNMGzc3uj\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def number_len_sort(lst):\\n\\t\",\"difficulty\":1.0919881305637982,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"Cu9JMBkAvPEEWMAi2\",\"instructions\":\"Create a sorting function which sorts numbers *not by numerical order*, but by **number length!** This means sorting numbers with the least digits first, up to the numbers with the most digits.\\n\\n### Examples\\n```\\nnumber_len_sort([1, 54, 1, 2, 463, 2]) ➞ [1, 1, 2, 2, 54, 463]\\n\\nnumber_len_sort([999, 421, 22, 990, 32]) ➞ [22, 32, 999, 421, 990]\\n\\nnumber_len_sort([9, 8, 7, 6, 5, 4, 31, 2, 1, 3]) ➞ [9, 8, 7, 6, 5, 4, 2, 1, 3, 31]\\n```\\n\\n### Notes\\nIf two numbers have the same number of digits, return them in the order they first appeared (this makes it different to just sorting the numbers normally).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(number_len_sort([1, 54, 1, 2, 463, 2]), [1, 1, 2, 2, 54, 463])\\nTest.assert_equals(number_len_sort([999, 421, 22, 990, 32]), [22, 32, 999, 421, 990])\\nTest.assert_equals(number_len_sort([9, 8, 7, 6, 5, 4, 31, 2, 1, 3]), [9, 8, 7, 6, 5, 4, 2, 1, 3, 31])\\nTest.assert_equals(number_len_sort([755, 1109, 9374, 94, 3683, 8695, 4135, 5177, 3216]), [94, 755, 1109, 9374, 3683, 8695, 4135, 5177, 3216])\\nTest.assert_equals(number_len_sort([8013, 1753, 7283, 6830, 73, 6278, 4931, 4556]), [73, 8013, 1753, 7283, 6830, 6278, 4931, 4556])\\nTest.assert_equals(number_len_sort([2762, 5905, 9433, 9809, 6511, 7141, 1050, 2610, 8123]), [2762, 5905, 9433, 9809, 6511, 7141, 1050, 2610, 8123])\\nTest.assert_equals(number_len_sort([9103, 5630, 7273, 2024]), [9103, 5630, 7273, 2024])\\nTest.assert_equals(number_len_sort([1342, 7567, 3504, 4378, 3070, 6592, 3645]), [1342, 7567, 3504, 4378, 3070, 6592, 3645])\\nTest.assert_equals(number_len_sort([237, 574, 3703, 2251, 4963, 2640]), [237, 574, 3703, 2251, 4963, 2640])\\nTest.assert_equals(number_len_sort([3633, 4402, 6745]), [3633, 4402, 6745])\\nTest.assert_equals(number_len_sort([6053, 2486, 8238]), [6053, 2486, 8238])\\nTest.assert_equals(number_len_sort([7919, 2725, 6296, 3517, 1788, 1321, 9049, 4481]), [7919, 2725, 6296, 3517, 1788, 1321, 9049, 4481])\\nTest.assert_equals(number_len_sort([1488, 764, 1053, 7053, 1718, 2950, 4697]), [764, 1488, 1053, 7053, 1718, 2950, 4697])\\nTest.assert_equals(number_len_sort([1321, 7671, 4235, 5989]), [1321, 7671, 4235, 5989])\\nTest.assert_equals(number_len_sort([3640, 4634, 9183, 6361, 7823]), [3640, 4634, 9183, 6361, 7823])\\nTest.assert_equals(number_len_sort([2900, 7995]), [2900, 7995])\\nTest.assert_equals(number_len_sort([7620, 3510]), [7620, 3510])\\nTest.assert_equals(number_len_sort([5533, 8639, 8297, 7591, 3280, 3354]), [5533, 8639, 8297, 7591, 3280, 3354])\\nTest.assert_equals(number_len_sort([9403, 9403]), [9403, 9403])\\nTest.assert_equals(number_len_sort([3470, 8155, 6086, 2095, 3445, 1869]), [3470, 8155, 6086, 2095, 3445, 1869])\\nTest.assert_equals(number_len_sort([3772, 9711, 1576, 5919, 7966, 1528]), [3772, 9711, 1576, 5919, 7966, 1528])\\nTest.assert_equals(number_len_sort([5751, 5472, 6910, 3678]), [5751, 5472, 6910, 3678])\\nTest.assert_equals(number_len_sort([7195, 9518, 9523, 7713, 6969, 739, 7313, 8588, 8545, 4414]), [739, 7195, 9518, 9523, 7713, 6969, 7313, 8588, 8545, 4414])\\nTest.assert_equals(number_len_sort([2209, 918, 8152, 1726, 8326, 2734]), [918, 2209, 8152, 1726, 8326, 2734])\\nTest.assert_equals(number_len_sort([5653, 5848, 4107, 2802, 6050, 1034, 2435, 5952]), [5653, 5848, 4107, 2802, 6050, 1034, 2435, 5952])\\nTest.assert_equals(number_len_sort([3587, 6762, 6215, 6995, 8731, 7989, 4913, 5251]), [3587, 6762, 6215, 6995, 8731, 7989, 4913, 5251])\\nTest.assert_equals(number_len_sort([6826, 5156, 8915, 4002]), [6826, 5156, 8915, 4002])\\nTest.assert_equals(number_len_sort([1280, 4939, 9179, 551, 9712, 6871]), [551, 1280, 4939, 9179, 9712, 6871])\\nTest.assert_equals(number_len_sort([8798, 8615, 1035, 4647, 8706, 7017, 9221, 6120]), [8798, 8615, 1035, 4647, 8706, 7017, 9221, 6120])\\nTest.assert_equals(number_len_sort([2744, 8325, 9185, 7703, 9732, 9603, 3817, 4448, 7025]), [2744, 8325, 9185, 7703, 9732, 9603, 3817, 4448, 7025])\\nTest.assert_equals(number_len_sort([7297, 2434, 9661, 9883, 9273]), [7297, 2434, 9661, 9883, 9273])\\nTest.assert_equals(number_len_sort([4950, 6059, 6961, 5026]), [4950, 6059, 6961, 5026])\\nTest.assert_equals(number_len_sort([7824, 187, 8454, 5269, 5576, 9835, 4142, 5154, 2682]), [187, 7824, 8454, 5269, 5576, 9835, 4142, 5154, 2682])\\nTest.assert_equals(number_len_sort([7168, 2449, 5870]), [7168, 2449, 5870])\\nTest.assert_equals(number_len_sort([4227, 2439]), [4227, 2439])\\nTest.assert_equals(number_len_sort([7123, 3851, 5730]), [7123, 3851, 5730])\\nTest.assert_equals(number_len_sort([1782]), [1782])\\nTest.assert_equals(number_len_sort([3940, 4334]), [3940, 4334])\\nTest.assert_equals(number_len_sort([9834, 9404, 1736, 2429, 500, 1446, 668, 2993, 2981, 9442]), [500, 668, 9834, 9404, 1736, 2429, 1446, 2993, 2981, 9442])\\nTest.assert_equals(number_len_sort([9164, 2647, 4861, 7721, 1198]), [9164, 2647, 4861, 7721, 1198])\\nTest.assert_equals(number_len_sort([4144, 1983]), [4144, 1983])\\nTest.assert_equals(number_len_sort([6562, 8367, 3499, 7010]), [6562, 8367, 3499, 7010])\\nTest.assert_equals(number_len_sort([8581, 2111, 9257, 4423, 3217, 9852, 2313, 4073, 2487]), [8581, 2111, 9257, 4423, 3217, 9852, 2313, 4073, 2487])\\nTest.assert_equals(number_len_sort([7309]), [7309])\\nTest.assert_equals(number_len_sort([9641, 4306, 9064]), [9641, 4306, 9064])\\nTest.assert_equals(number_len_sort([6245, 4677, 792, 9823, 3366]), [792, 6245, 4677, 9823, 3366])\\nTest.assert_equals(number_len_sort([4038, 4156]), [4038, 4156])\\nTest.assert_equals(number_len_sort([5429, 274, 256, 3437, 3222, 3294, 5648, 3281, 6696, 1883]), [274, 256, 5429, 3437, 3222, 3294, 5648, 3281, 6696, 1883])\\nTest.assert_equals(number_len_sort([6509, 6244, 4466, 7738, 1935, 9724, 6590]), [6509, 6244, 4466, 7738, 1935, 9724, 6590])\\nTest.assert_equals(number_len_sort([1001, 5842, 4261, 969]), [969, 1001, 5842, 4261])\\nTest.assert_equals(number_len_sort([7139]), [7139])\\nTest.assert_equals(number_len_sort([6623, 9247, 2175, 3306, 558, 6236, 9709, 643, 9737]), [558, 643, 6623, 9247, 2175, 3306, 6236, 9709, 9737])\\nTest.assert_equals(number_len_sort([1139, 1756, 772]), [772, 1139, 1756])\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[0,0,0,0,0,0,0,2,0,5,1,2,0,1,2,0,0,1,0,1,2,0,0,0,2,1,2,0,3,1,2,2,2,1,1,1,1,0,1,2,0,1,2,0,1,1,1,2,2,1,1,1,1,3,1,2,2,2,1,1,2,1,1,1,2,1,1,0,1,2,2,0,1,0,2,2,0,1,1,0,1,0,1,2,4,0,2,1,1,1,0,1,3,0,2,0,1,1,2,0,1,0,1,1,2,2,2,0,1,2,1,1,0,0,3,1,2,0,1,2,1,1,1,1,3,2,3,0,2,1,2,2,1,1,1,1,1,1,2,2,2,1,1,1,1,0,2,2,0,0,0,1,1,1,1,1,1,1,1,2,2,1,0,1,1,1,2,1,1,1,1,0,1,2,2,1,0,0,1,1,1,1,0,2,1,2,0,0,2,2,1,0,2,0,1,1,1,1,3,0,1,1,1,1,1,0,1,5,1,1,1,1,1,0,2,1,1,0,1,0,1,1,3,1,2,2,0,1,1,0,1,1,0,0,1,1,1,1,1,1,2,1,2,1,0,1,0,1,1,1,0,2,1,2,1,1,1,0,0,2,1,0,2,1,0,1,1,1,2,1,1,3,1,1,4,0,1,1,2,1,2,1,0,1,0,1,1,3,2,1,1,1,2,1,1,1,1,1,1,1,1,1,1,0,2,2,2,1,1,0,2,1,0,0,1,1,1,1,2,1,1,1,2,1,0,0,1,2,1,0,1,2,0,1,1,1,1],\"rators\":[\"PXAcsKkssS2yLyDv2\",\"tAF9Gf6PiGogbZuWs\",\"gJYuGdkXEWWmGRLzu\",\"9Ly8afdtofp8DXzrt\",\"J5T8gZqiZXFuFDTQ7\",\"KRSKj7ikX2ytWFmod\",\"AasGs8AeX9Lcb9xJn\",\"u5u2YpHXiNgzDNJdX\",\"W2k6iNDvNfEsJYQ9Q\",\"hoP56kvfXgesNY7CP\",\"aRqQ42J5zqCmBNd8w\",\"8YjNtvtDwmcXGv7wN\",\"2fxapKr8XGdNeaKi2\",\"N7P4AnS8nzK4oupHv\",\"vLrq4dEDMM2wd68Dc\",\"6GcAywWyFsQdi2FoH\",\"jNvegJWCk5HCtEMbK\",\"mxX4rH5ELYkdZ2Mbw\",\"gb9rvGus2Jv7bjZSs\",\"E9ttMPTkLkKG6nZrg\",\"geZ3oLjhh9KAw7yHs\",\"erEunWkRveQoPZyTC\",\"3LiSLdtN58n46NEqg\",\"32FP53oWqh8ape42s\",\"N2wnZXkhDH86mgjQ8\",\"MseM3t3dtbumxQ6jh\",\"M49qkakv2MfR5XK52\",\"LRYDPkkACQX2WZrNQ\",\"aEm3Wvj2rFYRL8Lrb\",\"8BFSTCnoe2QggN64c\",\"8JyqsSbN2FJXPr3cw\",\"HQxp7NcdvF92G7bYS\",\"5aZnA8Br3u7Wf5ENg\",\"xowjbn5yEv7c93axA\",\"mwQx3tM8MB7tjWbra\",\"jpGomfcYMrRJmSQLs\",\"GEvSGXDkk7pACfYri\",\"bCWNaboMxLwx6wNaY\",\"zGBTg8pHNJjuPXAA5\",\"4AoQy4B5fPs2KBinr\",\"mybpojPXaZigaqsAD\",\"8LfTheFzvicameoz9\",\"C4QntmkYtB89GNtpd\",\"4CFzv558qbGcpQwc4\",\"Yp7uvStL97cC9fKkY\",\"7tbM7oMYc5oDvD88Z\",\"cR3ibTMxLyEdDFCHY\",\"5JZNWts9XEHejpvur\",\"mDWNyaaQ9hvPCRzSd\",\"BFTdj4nsMKw9v5R3C\",\"g8yJiPAWXbrgxbjfZ\",\"w3A7cBWyAfukk6xEQ\",\"sz8ufn9i8zeiGWpAy\",\"pYgorHTLHPChinFCm\",\"hnyhBFWwNCz9mDfSi\",\"XJ6fsX3eJBTDM37ZP\",\"oKNAZ5BNeNWyvkiiB\",\"MKT7khMBGXzA22ykf\",\"v8iedwMBcGiN2PHGM\",\"Cc2Cgj4MWXZxsTooC\",\"FiaTpm7ehfDv43wSG\",\"vWgBJaEtcu3XoYuer\",\"2QGRoQn2dRq3scu7k\",\"eLkj3Zb2DqiW4AEEh\",\"CNApbsXZYYfj8GJRM\",\"WtFQigNmNZ5EREPzo\",\"2iFe3EHEH2YdhSKrs\",\"YzaMuXsKkut8nSNDH\",\"Z85ajWfZ4jDPkbvR4\",\"NfMJuiBk6FN5Jc6ow\",\"HF28xZKSLM9wEuqNg\",\"gudC5KZrykfdfGD3J\",\"eNxHCK7jd64LDW2NS\",\"4RY3zj9C2t8GGefhi\",\"X4iqEdg7dPjFpoASw\",\"87sGsKnu5dM9NbFWz\",\"4usmYA9Pppx4F8vmF\",\"xqYQMujmvgQ78bnJc\",\"bXTvvBavDPo6LypX5\",\"Ep7277Ae6CiggCdNz\",\"v9KtC8YLbMWmXiW2H\",\"tuGufgKGByTtAjXRX\",\"Fk9kLwoG4Brf4KsKf\",\"Hryvbd5DHrRZPSeM8\",\"C9LKGu2g5hSijvDzA\",\"yZvzB3qFb8pkHy4dg\",\"wPxeazAYct9gG2eRM\",\"6E8GoWCrHpDvHZjWG\",\"X74H8PYX8XYkrGRQc\",\"Zhy5X7BZnqk8hacEw\",\"6abffx8jQDCf7kgvb\",\"ZNnsMeNkdDhHjSrZb\",\"uhJRtyFA2GZnCx6mL\",\"moFrJ4vxzxPynByzB\",\"qzzyGD7fCCDjX25za\",\"aAFKLxcnBD2ZrdDnJ\",\"HdapHJPXHZwFYBCnn\",\"qB6KSTYC6H2TQEQY6\",\"fjTNxwuBDJhAbwQtx\",\"Tg45JGZezaJhNXLMS\",\"cJvBf2WZeuB2mQJ43\",\"NzMXbj4qFaCYNA6To\",\"9uZpgAtSuPZ7W7DL6\",\"J6JFEBRDvRhendwKq\",\"Z638r8eyyCAFQionR\",\"YCv8nxhsuHFZS3nnm\",\"jypixRQBZc9KuYEoB\",\"KRmxvA4mWgfKvHmYN\",\"n2ck2WGuM35vbZiFz\",\"cPfJFBXKTJycQ82sp\",\"HiXS9Hofvx4rnqDZz\",\"9PGk6auzrKALn9mEn\",\"ukMGNti4cKTJBZqsg\",\"9pzFiFK3ANLjQfnr2\",\"HPM6M6AvSrSGwfQpJ\",\"M8dQuMrEpP8Hc3tHN\",\"9itFfY5C9QcRaXF57\",\"kYWb8BwpKwunQkxeX\",\"DEDniTrstQYGounXT\",\"5diQb8rbt5d5nvmhB\",\"ywk3XGvcmpTgRxwZa\",\"k5mp7Hkg8w5rwiXpe\",\"zg8GmMSP2LkHBtAzy\",\"Jqk2uJZZxEv5wZFze\",\"hiGXnxds6zo7XsfTw\",\"z9guJRB4sMe9mpxKv\",\"KdNDysEsy2TW5QRJ2\",\"2innwjWqxJHo4eRGh\",\"FEYpu9RWysAgW3XnP\",\"4zkChgTrb5EDzYZmd\",\"tDdqXfMYgqZ26Lwvg\",\"bMEg2eSZtsAcT7ZmJ\",\"yAouD3PxzED8a4gap\",\"ekQh3jzgGLsEMbKo3\",\"di2hhADLx59Bj4ewM\",\"XrqNzJ2FRG8HnGiR6\",\"AF6LgdKhEdzwgRJom\",\"s5M5RvgqR9BhB9JoC\",\"iCDqhZGvszrXpDRuW\",\"FzxTj4GuujhwpZM7y\",\"dKKMvaYoJunNPk5Wa\",\"ahk2qiXKJA753wAJk\",\"jNE5AHcJQWXz7efuP\",\"JEAi9mG3vvBomJ3Yu\",\"yYxPzFqBgtQ9fsyHM\",\"s2ZMtR9deh6Kia7pb\",\"nfXGHENb5md7m355s\",\"NzbRqGWspQnWMoDrF\",\"a777e8chPvJkY3tKa\",\"zd9FLSzsGz3evKafy\",\"sbJcFfQjQ59Wfg4Cd\",\"NG8PWBSjsM8mMhQEq\",\"yr822PZmmiDDenxpB\",\"4rwxLqLs2mNZNg8NB\",\"DxxNN37iEz7b8t2nf\",\"5TmNFDqQsa4fiDf5K\",\"9bQyb6rW7xfE4vgrR\",\"JS3hNM3XXkxPdg3yk\",\"2ptN2mhjFwFcHyPZd\",\"pDvFWMCD9fQwoBPcu\",\"So6PHm74mfJuY2WTs\",\"H9KZi2cjt4FwH7qog\",\"3cF6NXq3ZEwdkgSjb\",\"H4abACFDH5t8CnnyH\",\"m6D2RuQJwrAK6WB3v\",\"ZrKCkX7xxGGZzauFW\",\"eMuCpJ2spXWkJjWNz\",\"YcCLwitFMAEJSnxAW\",\"FvFhg2wELM3SCZDZQ\",\"GGprTwrkjuccmrQRg\",\"YA7SDhpgEtsqynvNL\",\"syRNbbPdLCGXbH2Gy\",\"sHjfbGQGLHE6JR6qu\",\"ckHFA5y8pkrXbsevA\",\"4X3bLdgJjHMF8Lxug\",\"Stye5FSYwYNbhFHgR\",\"yNjkHfHESBAnCssPB\",\"XpRh7W7jGst278HTG\",\"LjoNTyGEMfBpMHHus\",\"TTgP9jcqGxCfKotZ3\",\"R4SjTgDnpigJYDLyL\",\"5HCu9Ydd86QgHDRNP\",\"GGdmhAvxXhqhhibJN\",\"Y9zyHwuyA7MJ8SPDh\",\"iojEnnY9FsMfYzp6f\",\"Pe8vWpDHRuH9nSGKW\",\"dj5AyG5fWP8FdsSmZ\",\"iS5BrkGLzJyPK7nKt\",\"hRiMXDZNAzyPd5tpt\",\"3nied3n8KG8RSNixH\",\"mBtSsKTHdQniYAfsZ\",\"kNrnnMxhFZztMTBAX\",\"9CoqdidjM9KbeKnHY\",\"7K2GEb5TZRtSpyyGS\",\"KdYQN3KAT2DyTzT2a\",\"HqmxnQJM66Y57twhn\",\"oBcs8GLX2ZFLXQy8y\",\"i5iePG5GqhJJ8HEoB\",\"7txFzDQ43vJ7qCY88\",\"HhYCji7QqauyN3A7v\",\"yjtdwc2AC4jA2RWtn\",\"ta5CrWnBCRusD2WMo\",\"KRyczPZSHYbKrBYnY\",\"SkQcb2sRn4as5KpnN\",\"hkJGLuib5md8vZ9HD\",\"TPhfpB5tzQWSSn67n\",\"q6QsMYNMpPNtmyTeW\",\"ZeTRCF5ufwFqAsHKt\",\"g4NCSxxHqHCGMpWwT\",\"xLe22eHviFtWojRem\",\"RehJGBFS6CYiWdjZx\",\"aKzYNPqBqb3J3ZgyD\",\"Ey9pB2PRqejNubQmf\",\"8vWWL8Tx2yDai4ydm\",\"8aEGGQPkGesWwoaom\",\"23KndF374EHHZNbL8\",\"dik7wis3hBJJBkYwK\",\"Lm6ChQCWBmaikmk5J\",\"XbxHXmh5ZmRN2gw3K\",\"KLmLKaJPfsYxp42p2\",\"pduNK68oazqQTtbLp\",\"pWYjN62ZAKQZ7Xp3W\",\"ey3CASd6Je5LEJzfB\",\"DYDJTyGgKFnBRLm2r\",\"qD2LrwaDrSdiybLKY\",\"pn7FezrkZZCui7fkJ\",\"CyzskHGsC6WSmYrLu\",\"6HgMANhu6WiGyXSGN\",\"JYvJJKjerbQYjNG9b\",\"Kh3Pc2ZRusurLaMyP\",\"u7i7WPM63n42r8R8o\",\"pJj86xc32Bs7Frxvi\",\"8WpvgSbQciTQWdd8T\",\"tpxMgkGSHwBjS95Ta\",\"mG8HqKiAQFTdRZthG\",\"okBzYf3Pd9kAYug7m\",\"ji5f27FPz4wRRF6Ls\",\"gXTAie79kiw28tx5u\",\"GWjEcCYSqDNZS9rQN\",\"axdSNLZpiCDF8RS6n\",\"rrSC943cCKNG48sH4\",\"d8qtzoLB264iP8tdY\",\"974cv448kw6Wu2JF6\",\"PTDFuxAzou7W6asWt\",\"SgZ2t9xFuRqdJGofp\",\"QRv96jmNaYsWkxQEG\",\"E4KGguXaWuR4bd2n7\",\"wRttWTM59y8m5mx7x\",\"yod5YhKtPqw2GfG9B\",\"rxr3nwpDGDEkBJRgD\",\"DPi9QGLctq2y76KuE\",\"bmthyKcDF922zNqxK\",\"6428wKHtwKkFdvBs5\",\"o4ixjQGSaYqA2JoM4\",\"mNYiFFnf5MdGsBDrt\",\"LC4Hizd3L3hibz5tH\",\"LJkoYfgJwZ6oB7jBn\",\"mHvoroWGDLYbJqQJa\",\"bLGqk6rTP3a5pfG7o\",\"qQQ4hCQpzitmHSkjS\",\"J3upzLHuEwXH7Z2hx\",\"cAP3n5NY64uoMwzRR\",\"RGMbFMZXJr7DhcAJy\",\"g9FyJ8yeT9ic97Qp2\",\"Fb2wehA7QgTFWry2x\",\"uX3EL4Qha99wBkozM\",\"oyKcm3zqdy8Ko5P5d\",\"BrTDhPJcACL2bsrpJ\",\"4iGeoajtKD7rRRttr\",\"9FCeFzjPA4jrQ7oHW\",\"oDN67zoApxcztnYdu\",\"fTNQmMvTZhhiGBCMe\",\"4fjSgcqhQQZM2ZFRP\",\"2HfNkb2SoqdyjKW3o\",\"foytX6kH9wiSYqLtT\",\"dky93oMkJsJjEJKk2\",\"ga7aTTEThzsELuC2j\",\"PBn3fhAqsEqHEHq3E\",\"brBkqpqkRarKALzgv\",\"YRAzEBJoLvSaiPtYx\",\"CLypXaZksY99mpRCm\",\"cZccqzRQ9GgjQF6Az\",\"dYPkStFnLvAMsHSzZ\",\"YkWX8KxYQCcH7qqpC\",\"KJCDwGkoXh8qtbbKr\",\"yTtSCvGPyYna6JuRC\",\"DAhoDmrLmkoRsJhRx\",\"RC8wXGidezWFvdwQS\",\"BdnE4RS5puoxo92mA\",\"HuNF3xTBzmatyGSTm\",\"734MLX2YgLcZpSNHi\",\"FuYTQcDNjct58rqPa\",\"T2Xr8tDTevucQAQeE\",\"ygmKmjF4ja52BrNMR\",\"rEecHXXCTwgG5wWNA\",\"oRdsdmmPpzfSK4tDq\",\"9vP9Sg4nyzQT4ED9C\",\"wjc4iejpErBhxWwHo\",\"utTuvGdmu2sBHWBhQ\",\"RCzpsCinz5SQnBAta\",\"nJXgbSQozcoE8Wn4N\",\"s4YHxEDBTTq5EBMRs\",\"AXcnPX68zdMiLNSmu\",\"4ArGCifHnsz8p525A\",\"5zGMciq3fB4aeu9uj\",\"incG8tH2dwThHg35f\",\"5XiuAqicKD4hBdu63\",\"fKsHKQ9ZTyEgmcQmQ\",\"nFbmNzMQ38TncmfQX\",\"sKfrD9gjCDHuqLzSk\",\"WdKdsgH9gXkKgCycx\",\"CTKmXtrqDYqJBnuy8\",\"5hQnRWiKkhgKJXNMP\",\"Yp4Jtxj7pHqZjheN7\",\"5uj4mTXdaDL3wLDWw\",\"DpnYcMphntjsQ96qg\",\"4fhjJBvLBWh6QeSih\",\"hERDiXzMt3bagzfKp\",\"Lg4t6SEWgtYz4u7Cj\",\"DqNQn9Jsxcu5HijKE\",\"5S9nX4rKsnCcnv4Cz\",\"pveK5gtGcm8k4wScM\",\"iF4tdvn5sA9CM4T6T\",\"LQxof8pGabGuWP7Gn\",\"buX4mCQhtXCfBjeno\",\"Ds7L5bksw2QRHjrKL\",\"no46qNkTbNeHepe64\",\"PWgzeK859suojbrRx\",\"utdj2v4ruJdN644DR\",\"qAby4AWXmTNeusvg3\",\"MXGuntvz3byrP6WJc\",\"eYfPWvZwnJQkHbSTK\",\"5HTSi5wQNAdLm57LB\",\"97mMkvdDxbhkQXNPp\",\"srJ34BaybkQh3qRkM\",\"B8n7KqbvEDjZzgj2D\",\"pCMhfoZ5c6eBuCqbp\",\"5vnRSeHDAaMwSRQnL\",\"q9FfWNiMDKRiaCJ5j\",\"YaybbCdfjFQmsfgtp\",\"LCuvvWMwiGuqTwNRi\",\"pPpmP7xeJzGgK362R\",\"CHvzhtXnv8HTbPQ56\",\"EfxwqhYdapX3dMQC2\",\"AFfw7cGg83uYk2Miy\",\"XD5nmvKQchKezPXhy\",\"iYXdNw7tKcgA3QwBX\",\"ghMkPtdFCpM6w8nax\",\"7dQYiDeTcMztbGyso\",\"BJp2WkwLWGHHB5oQW\",\"T6iBEE2jp7f7iEF2P\",\"CpBXKtD553wP8fTZc\",\"8uiLiJcmWxWe6qw65\",\"NrRa4TS6uZR9xuXRt\",\"PC3pLs36zNzpRDSuE\",\"66a9xX73nmTEuKs9k\",\"c2q7mY39z5JPEMCaM\",\"CKHKhvJcq9jNMqrmd\",\"X4rzfxGgxx6CS7Bpz\",\"YmQb9Mo4Xcg2vzgbn\",\"w3QDkmjZj2dAFDsjq\",\"AJexRBN9cYQmqvYu6\",\"mvJBakQ35CWAnbbEZ\",\"4TmgHkn5vqyHK3sYC\",\"T6Rm8mREPMZSftzrC\",\"JiSpvq6C7azQEmENc\",\"jkbavR2ATFJcpmo8M\",\"vCeeMuYDbz3MB4vsk\",\"K6MfKMytoJJuSGewP\",\"g2mqHYvQmr78mET8i\",\"FxbTzThBiTnRzfirA\",\"eW9R2SCoYnY8HBAdL\",\"796v8eRqahP6wpLdL\",\"NGvCPuMiAP3xrRLfB\",\"Afnps7TJQuS9sipMb\",\"Dq24MSpogRmq6L4hX\",\"iP7wNofhZXTkJ9ryG\",\"gKnWjDjwrJh7MK2df\",\"HBuJYgW2eRBJp9FoG\",\"4bb7pim4ewTwrMTEA\",\"TCvpT4EPb8qNssNB7\",\"jBo3xAopr37GFzY8g\",\"d9LBRxvADNBB5QJMB\",\"9LrF5o2TK2iE8BZJh\",\"rCrbqMiaGPgHYTNxu\",\"8PwfYqoDQFThzNtvf\",\"dzS6WBTMHyFEag6Fp\",\"uK58g2EXxqxTaB2iA\",\"B4y8aoyXJtskYPFEL\",\"rhS8qXRjZcpDXkwnE\",\"suArq5BbSy7gD6xri\",\"2MjzJ7yxh3eT3xbng\",\"FMyZPN6odEFtfuimF\",\"mw9464S5dnenqzvpm\",\"Qyfyyw6oC4EHAndzo\",\"zC8WrPp5BC6c2exrW\",\"pwWtbXEjzuvrhEGwt\",\"4Lwjr34ypKNQNQCar\",\"5QN8R22z43SrwoHDz\",\"ekbfbYdyZeXHvaG8c\",\"ahWFxnaxt9bXSA4f3\",\"wrL4iX2CCSqDCCty3\",\"GgQqni8TkbqEBGcsy\",\"Wi4H6ayKsNDWWQCG5\",\"sMcFMPkMJC4Kh6ymj\",\"5nbHH4eApn6So9h2n\",\"mdRQaGT98ycMt87S2\",\"cmH5k3s9REYMzDBMn\",\"rraTtctZqnjXu2L2x\",\"jWbd7SYDzLPjc9EDh\",\"E2hpke7mHxAWsw5t9\"],\"total\":439,\"quality\":[4,5,5,5,4,5,4,4,5,5,5,5,5,4,4,1,5,5,5,3,5,5,4,5,4,5,5,5,3,5,5,5,5,5,3,5,5,5,5,5,5,5,5,5,5,3,5,5,5,5,5,5,4,5,5,5,5,5,5,5,4,5,5,5,5,5,4,5,5,4,5,5,5,5,1,5,5,5,5]},\"flags\":0},\"summary\":\"Create a sorting function which sorts numbers not by numerical order, but by number length! This means sorting numbers with the least digits first, up to the numbers with the most digits.\\n\\nExamples\\nnumberlensort([1, 54, 1, 2, 463, 2]) ➞ [1, 1, 2, 2, 54, 463]\\n\\nnumberlensort([999, 421, 22, 990, 32]) ➞ [22, 32, 999, 421, 990]\\n\\nnumberlensort([9, 8, 7, 6, 5, 4, 31,\",\"tags\":[\"numbers\",\"sorting\"],\"timestamp\":{\"$date\":1584482034358},\"title\":\"Number Length Sort\",\"quality\":4.6455696202531644,\"family\":[{\"_id\":\"xRYSAT5uAhPHhvp6d\",\"language\":\"cpp\"},{\"_id\":\"fuvMP8KMtiQY3QXrJ\",\"language\":\"javascript\"},{\"_id\":\"Fx7hyoNTZNMGzc3uj\",\"language\":\"python3\"},{\"_id\":\"5CK7n2rZhXtHhmJ7P\",\"language\":\"ruby\"}]}}"]