a["{\"msg\":\"result\",\"id\":\"2311\",\"result\":{\"_id\":\"J67xWvM4jFhn9nEpJ\",\"author\":\"AniXDownLoe\",\"authorId\":\"incG8tH2dwThHg35f\",\"code\":\"def is_magic(size):\\n\\t\",\"difficulty\":3.6666666666666665,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"qrozojSJCJLDMn66e\",\"instructions\":\"Make a function that takes a integer, `size`, returns 2D list that is a Magic Square with side lengths of `size`\\n\\n A Magic Square is an arrangement of numbers in a square in such a way that the sum of each row, column, and diagonal is one constant number, the \\\"magic constant.\\\" \\nFor this challenge I will be testing with the assumption that your magic squares are made with whole numbers from 1 - n^2\\n\\n### Example\\n```\\nmake_magic(3) âžž [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\\n# Rows: 2+7+6 = 9+5+1 = 4+3+8 = 15\\n# Columns: 2+9+4 = 7+5+3 = 6+1+8 = 15\\n# Diagonals: 2+5+8 = 6+5+4 = 15\\n```\\n\\n### Notes\\nFor this challenge I will only be testing with sizes >= 3 as there are no Magic Squares of size 2 at least as I have described them.\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"#~~~~~~~~~~~~~~~~Testing_Function~~~~~~~~~~~~~~~~~~~~\\ndef isMagic(square):\\n\\tsize = len(square)\\n\\tmagicNum =  (size**3 + size)/2\\n\\t# check rows:\\n\\tfor row in square:\\n\\t\\t\\tif sum(row) != magicNum or len(row) != size:\\n\\t\\t\\t\\t\\treturn False\\t\\n\\t# check columns:\\n\\tfor col in range(size):\\n\\t\\t\\tcolumn = [square[row][col] for row in range(size)]\\n\\t\\t\\tif sum(column) != magicNum:\\n\\t\\t\\t\\t\\treturn False\\n\\t\\t\\t\\t\\t\\n\\t# check diagonals:\\n\\tif sum([square[i][i] for i in range(size)]) != magicNum:\\n\\t\\t\\treturn False\\n\\tif sum([square[i][(size-1)-i] for i in range(size)]) != magicNum:\\n\\t\\t\\treturn False\\n\\t\\t\\t\\n\\t# It must be magical then\\n\\treturn True\\n\\n\\n#~~~~~~~~~~~~~~~~Tests start Here~~~~~~~~~~~~~~~~~~~~\\n\\nTest.assert_equals(isMagic(make_magic(3)), True)\\nTest.assert_equals(isMagic(make_magic(4)), True)\\nTest.assert_equals(isMagic(make_magic(5)), True)\\nTest.assert_equals(isMagic(make_magic(6)), True)\\nTest.assert_equals(isMagic(make_magic(7)), True)\\nTest.assert_equals(isMagic(make_magic(8)), True)\\nTest.assert_equals(isMagic(make_magic(9)), True)\\nTest.assert_equals(isMagic(make_magic(10)), True)\\nTest.assert_equals(isMagic(make_magic(11)), True)\\nTest.assert_equals(isMagic(make_magic(12)), True)\\nTest.assert_equals(isMagic(make_magic(13)), True)\\nTest.assert_equals(isMagic(make_magic(14)), True)\\nTest.assert_equals(isMagic(make_magic(15)), True)\\nTest.assert_equals(isMagic(make_magic(16)), True)\",\"language\":\"python3\",\"quality\":0,\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,3,2,4,4,5,4,5,5,3,5],\"quality\":[],\"rators\":[\"incG8tH2dwThHg35f\",\"bCFecqKyXTCnGgPSc\",\"8PwfYqoDQFThzNtvf\",\"va3fDAQm4sqSMoy3R\",\"5dHucvf2qBYyKim7X\",\"h4x2jaMdj5aQZbW5g\",\"Mw8yqSDFdQui28w5N\",\"eHcgvkTGsH7ZziqBo\",\"yjtdwc2AC4jA2RWtn\",\"iS5BrkGLzJyPK7nKt\"],\"total\":13},\"flags\":1},\"summary\":\"Make a function that takes a integer, size, returns 2D list that is a Magic Square with side lengths of size\\n\\n A Magic Square is an arrangement of numbers in a square in such a way that the sum of each row, column, and diagonal is one constant number, the \\\"magic constant.\\\"\\nFor this challenge I will be testing with the assumption that your magic squares are mad\",\"tags\":[\"algorithms\",\"arrays\",\"geometry\",\"games\"],\"timestamp\":{\"$date\":1602191340502},\"title\":\"Magic Square Gen\",\"family\":[{\"_id\":\"J67xWvM4jFhn9nEpJ\",\"language\":\"python3\"}]}}"]