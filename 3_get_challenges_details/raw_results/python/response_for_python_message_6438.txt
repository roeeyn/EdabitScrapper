a["{\"msg\":\"result\",\"id\":\"1928\",\"result\":{\"_id\":\"ZipMJJocMyozDZ6iP\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"def group(lst, size):\\n\\t\",\"difficulty\":2.69,\"familyId\":\"zQqBnGzQ7Ta6H7aFh\",\"instructions\":\"Create a function that groups a list of numbers based on a **size** parameter. The **size** represents the maximum length of each sub-list.\\n\\n```\\n[1, 2, 3, 4, 5, 6], 3\\n[[1, 3, 5], [2, 4, 6]]\\n# Divide list into groups of size 3.\\n\\n[1, 2, 3, 4, 5, 6], 2\\n[[1, 4], [2, 5], [3, 6]]\\n# Divide list into groups of size 2.\\n\\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 4\\n[[1, 4, 7, 10], [2, 5, 8, 11], [3, 6, 9]]\\n# \\\"Leftover\\\" lists are okay.\\n```\\n\\n### Examples\\n```\\ngroup([1, 2, 3, 4], 2) ➞ [[1, 3], [2, 4]]\\n\\ngroup([1, 2, 3, 4, 5, 6, 7], 4) ➞ [[1, 3, 5, 7], [2, 4, 6]]\\n\\ngroup([1, 2, 3, 4, 5], 1) ➞ [[1], [2], [3], [4], [5]]\\n\\ngroup([1, 2, 3, 4, 5, 6], 4) ➞ [[1, 3, 5], [2, 4, 6]]\\n```\\n\\n### Notes\\n- The **size** parameter represents the maximum size for each sub-list (see ex.4). You should try to fill each sub-list evenly. In other words, ex.4 should be `[[1, 3, 5], [2, 4, 6]]`, not `[[1, 3, 5, 6], [2, 4]]`.\\n- Keep the relative order of the numbers in each sub-list the same as the order in the original list.\\n- When distributing the numbers into the sub-lists, each sub-list should have a number in it prior to receiving a new number (e.g. for example 1, your sub-lists will be of size 2, and because there are 4 numbers, you will need 2 sub-lists. When interating through the original list to fill the sub-lists it should go `[[],[]]` -> `[[1],[]]` -> `[[1],[2]]` -> `[[1, 3], [2]]` -> `[[1, 3], [2, 4]]`).\",\"lab\":\"Test.assert_equals(group([1, 2, 3, 4], 2), [[1, 3], [2, 4]])\\nTest.assert_equals(group([1, 2, 3, 4, 5, 6, 7], 4), [[1, 3, 5, 7], [2, 4, 6]])\\nTest.assert_equals(group([1, 2, 3, 4, 5], 1), [[1], [2], [3], [4], [5]])\\nTest.assert_equals(group([1, 2, 3, 4, 5, 6], 4), [[1, 3, 5], [2, 4, 6]])\\nTest.assert_equals(group([1, 2, 3, 4, 5, 6], 3), [[1, 3, 5], [2, 4, 6]])\\nTest.assert_equals(group([1, 2, 3, 4, 5, 6], 2), [[1, 4], [2, 5], [3, 6]])\\nTest.assert_equals(group([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 4), [[1, 4, 7, 10], [2, 5, 8, 11], [3, 6, 9]])\\nTest.assert_equals(group([1, 2, 3, 4, 5, 6, 7, 8], 2), [[1, 5], [2, 6], [3, 7], [4, 8]])\",\"language\":\"python3\",\"summary\":\"Create a function that groups a list of numbers based on a size parameter. The size represents the maximum length of each sub-list.\\n\\n[1, 2, 3, 4, 5, 6], 3\\n[[1, 3, 5], [2, 4, 6]]\\nDivide list into groups of size 3.\\n\\n[1, 2, 3, 4, 5, 6], 2\\n[[1, 4], [2, 5], [3, 6]]\\nDivide list into groups of size 2.\\n\\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 4\\n[[1, 4, 7, 10], [2, 5, 8, \",\"tags\":[\"arrays\",\"closures\",\"scope\"],\"timestamp\":{\"$date\":1553212802368},\"title\":\"Group in Order\",\"stats\":{\"completed\":{\"total\":104,\"ratings\":[3,3,3,3,3,3,3,3,3,3,2,2,3,2,0,4,2,1,3,3,3,4,4,3,3,4,2,3,4,4,4,2,4,2,3,3,1,4,2,4,1,2,3,3,4,1,3,3,4,0,2,2,3,4,3,4,4,2,4,2,0,2,1,3,0,4,3,3,3,4,4,2,2,1,0,3,3,2,1,2,4,3,4,2,2,3,5,3,3,2,4,3,3,2,0,2,4,2,4,2],\"rators\":[\"BkPgkDQGHm66X4Qai\",\"AYaEkTWLMmfzpwejr\",\"yZvzB3qFb8pkHy4dg\",\"8JyqsSbN2FJXPr3cw\",\"tAF9Gf6PiGogbZuWs\",\"5s4qhuRJijYaDNXva\",\"qaR8DnWrTk8Mus5Q2\",\"T3ZAuoMrJjvZwN55B\",\"XjC9ivzaAxfcFiSGj\",\"ab7BsQuhDo3QgE6bh\",\"QzqL4jkcY4BMmNuS8\",\"gb9rvGus2Jv7bjZSs\",\"QaE2QnnBbzdiExxPH\",\"g4R4gRHCE9tsTDt8B\",\"MXjxGML2X75x64vJo\",\"Y3KkPrBzMBgMiqaQ6\",\"7g3vZaQXhLpxrajyg\",\"PFjMZGHNAPTkgd7tq\",\"BFNm9gacwba9KyLFW\",\"r45DETkNsmXquKgcf\",\"3ifAHQzsMasfQySoL\",\"pci5yjeqMeYpPhfhL\",\"oqGkxvASXq52iTDvp\",\"dZGNAJXB24zNh2tsD\",\"vjQizqDbKpjfHrvZA\",\"PuJDHtAaX6vXeJJTC\",\"XKi8iZXBCHCaebSHh\",\"s5M5RvgqR9BhB9JoC\",\"HqmxnQJM66Y57twhn\",\"hrzGaJc9KZqgjAvew\",\"FgkYtHLxeD8pETJ8T\",\"Jqk2uJZZxEv5wZFze\",\"2fxapKr8XGdNeaKi2\",\"6ShafRStcvew4GfCh\",\"6NPSerrhxLrejF5Er\",\"8PwfYqoDQFThzNtvf\",\"4xwButZn34q92d9Yn\",\"2innwjWqxJHo4eRGh\",\"Yp7uvStL97cC9fKkY\",\"WLFPvm65aHfgwQy7N\",\"GJmKcqu7xppQyBaTt\",\"pAC5jpwEjjvjevyiH\",\"EPbEBF6b8Jbq8BPx6\",\"aEm3Wvj2rFYRL8Lrb\",\"Zhy5X7BZnqk8hacEw\",\"AasGs8AeX9Lcb9xJn\",\"YRstQuthRkFeBiXug\",\"BQMNhNzLdgY4yajCC\",\"SGhPxX5bHGL8zZqtt\",\"fznzd3qnvtbFkkizz\",\"ZNnsMeNkdDhHjSrZb\",\"W5TajitmCyxz87zAC\",\"jL4y5fTJAMBjhZmko\",\"KfXMEiCdZfCZGmjTt\",\"LFSASkxgw9hr3KqmC\",\"Ecg4m7srYGgZsb4Ck\",\"Phd2FdPjo9BhBfvKh\",\"a777e8chPvJkY3tKa\",\"mDWNyaaQ9hvPCRzSd\",\"gJYuGdkXEWWmGRLzu\",\"nLpdvK7EcahCqNe8X\",\"f2BoqyCpgnmjEjLqx\",\"dzS6WBTMHyFEag6Fp\",\"R4SjTgDnpigJYDLyL\",\"ya2ofFqYRC57bfbND\",\"u72ipcjbNDSkWX8Gw\",\"n2BRY9X8899dcG8Bw\",\"xn7uGNKeAwPEkP9oA\",\"zZDaXBxMzTCBhNkgL\",\"8sNv5PTHa7XQ8bNqR\",\"4fhjJBvLBWh6QeSih\",\"5dHucvf2qBYyKim7X\",\"yjtdwc2AC4jA2RWtn\",\"S6Zd8mPuvhuh3MFRt\",\"8fZxjQfuXw5HMSRJM\",\"XjajdyybZZbkz8o5x\",\"quEfQhA3xBwsCobcg\",\"HF28xZKSLM9wEuqNg\",\"585XRBCotKx6wh96Q\",\"yTtSCvGPyYna6JuRC\",\"v9KtC8YLbMWmXiW2H\",\"J3upzLHuEwXH7Z2hx\",\"h4x2jaMdj5aQZbW5g\",\"DPi9QGLctq2y76KuE\",\"fSQSHjW3e72MrWxbD\",\"roavRomeeDy4Po3FA\",\"XHShZ3WMPgGEA2vkR\",\"gXTAie79kiw28tx5u\",\"iojEnnY9FsMfYzp6f\",\"buX4mCQhtXCfBjeno\",\"eHcgvkTGsH7ZziqBo\",\"joZXzqJS4J9PPWGvu\",\"2PufnQcsHsfymufX3\",\"Z85ajWfZ4jDPkbvR4\",\"PH32cNxBjrK4a28sn\",\"H9KZi2cjt4FwH7qog\",\"MpfytGFYF77emJ3cT\",\"GTKsdeEihE636Le9i\",\"bNENiqqEDxM5a5JBf\",\"oBcs8GLX2ZFLXQy8y\"],\"quality\":[3,5,3,5,5,5,4,5,5]},\"tests\":{\"score\":0,\"rators\":[\"BkPgkDQGHm66X4Qai\"]},\"instructions\":{\"score\":-55,\"rators\":[\"BkPgkDQGHm66X4Qai\"],\"voters\":[\"QjGNkRM3Xc78yShJN\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.444444444444445,\"family\":[{\"_id\":\"WyDFRaMNFpJ8rSd7k\",\"language\":\"cpp\"},{\"_id\":\"w5LTwJwDLK4uQ3Dmv\",\"language\":\"javascript\"},{\"_id\":\"ZipMJJocMyozDZ6iP\",\"language\":\"python3\"},{\"_id\":\"TEnW9BfvkwhkmL9ra\",\"language\":\"ruby\"}]}}"]