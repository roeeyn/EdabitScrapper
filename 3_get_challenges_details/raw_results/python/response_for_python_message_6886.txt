a["{\"msg\":\"result\",\"id\":\"2151\",\"result\":{\"_id\":\"PCtTk9RRPPKXCxnAx\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"def modulo(x, y):\\n\\t# Your recursive solution here.\\n\\treturn modulo(x, y)\",\"difficulty\":3.2093023255813953,\"editorId\":\"a777e8chPvJkY3tKa\",\"familyId\":\"jvnpy2RskoCPg6FYy\",\"instructions\":\"The **modulo operation** can also be done by **repetitive subtraction or addition**. In this challenge, you're going to create a function that mimics such an operation and returns the modulo of the two given numbers by **recursively** subtracting or adding them.\\n\\n### Examples\\n```\\nmodulo(100, 25) ➞ 0\\n\\nmodulo(-51, -4) ➞ -3\\n\\nmodulo(3, 9) ➞ 3\\n\\nmodulo(-21, 5) ➞ -1\\n# -1 instead of 4 (which is what actually Python \\n# yields with the modulo operator %)\\n\\nmodulo(1024, 7) ➞ 2\\n\\nmodulo(273, -6) ➞ 3\\n```\\n\\n### Notes\\n- There will be no **zero-values** for the *modulo divisor*.\\n- You're expected to solve this challenge using a **recursive approach**.\\n- You can read on more topics about recursion (see **Resources** tab) if you aren't familiar with it yet or haven't fully assumed the concept behind it before taking up this challenge.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"from inspect import getsource\\nfrom re import findall, MULTILINE\\n\\ndef check_recursive(fn):\\n  try:\\n    src, n = getsource(fn), fn.__name__\\n    if n == '<lambda>': n = src.split('=')[0].strip()\\n    return len(findall(n, src, flags=MULTILINE)) > 1\\n  except OSError: return True\\n\\nfor v in [True, False]:\\n  if v: Test.assert_equals(check_recursive(modulo), v)\\n  else: Test.assert_not_equals(check_recursive(modulo), v, 'Recursion is required!')\\n\\nnum_vector, res_vector = [[100, 25], [-51, -4], [3, 9], [-21, 5], [1024, 7], [273, -6]], [0, -3, 3, -1, 2, 3]\\n\\nfor i, x in enumerate(num_vector):\\n  Test.assert_equals(modulo(*x), res_vector[i])\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,5,0,5,1,5,3,3,2,5,2,4,0,5,2,2,2,0,4,5,3,3,4,1,4,4,5,5,3,5,0,2,5,4,0,4,3,2,1],\"rators\":[\"a777e8chPvJkY3tKa\",\"aEm3Wvj2rFYRL8Lrb\",\"8PwfYqoDQFThzNtvf\",\"bJxaKHJqR82EWw8Su\",\"vTfyrr4pGddp8rbXc\",\"9XNbjEKxsC89aX6ae\",\"s5M5RvgqR9BhB9JoC\",\"hcNbHccysCEQ9yhGp\",\"b5zo7s6xrqWgQnPao\",\"Ecg4m7srYGgZsb4Ck\",\"mDWNyaaQ9hvPCRzSd\",\"aaotFPYKJpeDdBmK5\",\"iS5BrkGLzJyPK7nKt\",\"j8FR2cHxpsYtNo9Dw\",\"d8qtzoLB264iP8tdY\",\"h4x2jaMdj5aQZbW5g\",\"Jqk2uJZZxEv5wZFze\",\"p8qqFdJ3FSk5x9z3G\",\"fSQSHjW3e72MrWxbD\",\"QRv96jmNaYsWkxQEG\",\"HF28xZKSLM9wEuqNg\",\"DPi9QGLctq2y76KuE\",\"58M252WF7SPRinfBx\",\"DCY34cfeCDFan6BgQ\",\"XNmN6ztj36a7eChbD\",\"TzfFXjsN3n6kkFZSY\",\"8sNv5PTHa7XQ8bNqR\",\"2PufnQcsHsfymufX3\",\"J23RcmzbdtBbPCTjT\",\"eHcgvkTGsH7ZziqBo\",\"iojEnnY9FsMfYzp6f\",\"J3upzLHuEwXH7Z2hx\",\"yjtdwc2AC4jA2RWtn\",\"bJaPCBx63YxdJAuTS\",\"gJYuGdkXEWWmGRLzu\",\"XHShZ3WMPgGEA2vkR\",\"tAF9Gf6PiGogbZuWs\",\"PH32cNxBjrK4a28sn\",\"ap4p6PnYo4cwdaTsT\",\"MpfytGFYF77emJ3cT\",\"HNkZPGQZmZc2naCbr\",\"gKnWjDjwrJh7MK2df\",\"6HbLFKgEZ8yR2e5pu\",\"tkRuKMWxoSyTXnvbb\",\"8JyqsSbN2FJXPr3cw\",\"DwetpbChQM4r6Gwah\"],\"total\":52,\"quality\":[3,3,5,4,4,5,5,4]},\"flags\":0},\"summary\":\"The modulo operation can also be done by repetitive subtraction or addition. In this challenge, you're going to create a function that mimics such an operation and returns the modulo of the two given numbers by recursively subtracting or adding them.\\n\\nExamples\\nmodulo(100, 25) ➞ 0\\n\\nmodulo(-51, -4) ➞ -3\\n\\nmodulo(3, 9) ➞ 3\\n\\nmodulo(-21, 5) ➞ -1\\n-1 instead of 4 (whi\",\"tags\":[\"recursion\",\"math\"],\"timestamp\":{\"$date\":1595352199876},\"title\":\"Recursion: Modulo by Subtraction\",\"quality\":4.125,\"family\":[{\"_id\":\"kWrkGRDRyCdCbX8Yx\",\"language\":\"javascript\"},{\"_id\":\"PCtTk9RRPPKXCxnAx\",\"language\":\"python3\"}]}}"]