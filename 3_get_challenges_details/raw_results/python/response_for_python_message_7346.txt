a["{\"msg\":\"result\",\"id\":\"2379\",\"result\":{\"_id\":\"MrySrdhd93xLGoRJj\",\"author\":\"Evgeny SH\",\"authorId\":\"8PwfYqoDQFThzNtvf\",\"code\":\"def split_string(s):\\n\\t\",\"difficulty\":3.933333333333333,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"tTttsr54b22PuApRw\",\"instructions\":\"The function is given a string with lower-case characters. Split the string into as many substrings as possible such that each character appears in only one substring. Return the list of lengths of the resulting substrings.\\n\\n### Examples\\n```\\nsplit_string(\\\"abbccc\\\"), [1, 2, 3]\\n# \\\"a\\\", \\\"bb\\\", \\\"ccc\\\"\\n\\nsplit_string(\\\"abbacdceef\\\"), [4, 3, 2, 1]\\n# \\\"abba\\\", \\\"cdc\\\", \\\"ee\\\", \\\"f\\\"\\n\\nsplit_string(\\\"abacded\\\"), [3, 1, 3]\\n# \\\"aba\\\", \\\"c\\\", \\\"ded\\\"\\n\\nsplit_string(\\\"abcdea\\\"), [6]\\n# \\\"abcdea\\\" because first letter is equal to the last letter.\\n```\\n\\n### Notes\\n_Xavier_ would _deeply_ appreciate if you solve this challenge with recursion using greedy approach.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"from time import perf_counter\\ntic = perf_counter()\\n\\nTest.assert_equals(split_string(\\\"abbccc\\\"), [1, 2, 3])\\nTest.assert_equals(split_string(\\\"abbacdceef\\\"), [4, 3, 2, 1])\\nTest.assert_equals(split_string('abacded'), [3, 1, 3])\\nTest.assert_equals(split_string('abcdea'), [6])\\nTest.assert_equals(split_string(\\\"ababcbacadefegdehijhklij\\\"), [9, 7, 8])\\nTest.assert_equals(split_string(\\\"swsqsvwwqvwljipejpjeepipigelggcttcmtftcmfcdbyydybybdokkkoouuuarzzrarzaxnhxxxhhhn\\\"), [11, 19, 12, 10, 6, 3, 9, 10])\\nTest.assert_equals(split_string(\\\"zzlbpbpzblqqiqiuqiwuiwuukxfkfxfmmgeddjedgejjjgegchocyyhhyhoynvssvrrrvvsnsttaat\\\"), [10, 14, 7, 2, 15, 12, 13, 5])\\nTest.assert_equals(split_string('wdywdywsvissigikgkeevccfzfmhfzhqooqmomqxbtbalntlanjlujunjxppprrr'), [7, 14, 2, 16, 19, 3, 3])\\nTest.assert_equals(split_string('qrmkybbzkrjjskzymrzvvqsiddiouhhghcggoidcuexntetnllxapfawfappw'), [23, 18, 10, 10])\\nTest.assert_equals(split_string('omoeqmoqmeeqcwwxggxwcgwypaaayyappypvtddtvddrflrfkfrkllkijnsjujinssnunusbhzbbhzzhz'), [12, 11, 12, 8, 12, 16, 10])\\nTest.assert_equals(split_string('bommxxbxvvovblhlycslsychsqdnnfzfzqdanappguupugiitwkwktwtkejjjrer'), [13, 12, 13, 8, 2, 9, 7])\\nTest.assert_equals(split_string('oloqjqocjqljqocseyyyesseeswgdwzwgwgzzgdnhbnhbhbnhrmaauvfmrumvumffratxikpiktxpk'), [15, 11, 13, 10, 18, 11])\\nTest.assert_equals(split_string('ozjzjogojggoiiixrmyiximriiyxxmyyyrryymrqpqpqpkppkpkqkhhvhnhnnhnnvsssscecsccsesdadlttdatltaffadfdlafbubwuwbbuuubb'), [12, 27, 14, 12, 13, 21, 13])\\nTest.assert_equals(split_string('eexarxprapxrpperpaxxpexpuvdvbubuvuwhdjbwtuhvbwjdhvubwdudtwwdwbjslfqycszzoocolggoiigogfmlgfnymqflfcilyynyycmogiicyqomlgkkkkkkk'), [24, 39, 55, 7])\\nTest.assert_equals(split_string('drkauhykwogzbobzllolbeqpvxxtjpctmfjxvmnifjms'), [1, 1, 6, 1, 12, 1, 1, 20, 1])\\nTest.assert_equals(split_string('pqjzzqdjljjzdjzzqqllqqjkwkcixuchchcwhixkxwcwbcuwivukuiixuurfafayayffrffnntenemtttmmetmennmetgssoogsggoo'), [1, 22, 35, 13, 21, 11])\\nTest.assert_equals(split_string('tvflyzoazttlvflvzhaahzahhvlfzflfguuguukkkgggukbdmjsiwbmwwiimbcjsbpijjcjbsnxnqnrnqeeee'), [32, 14, 27, 8, 4])\\nTest.assert_equals(split_string('kujjjkyyuuhihtihithttiopemeppoeeopgggffddgdfgrvacrqcrcaqrqaccqrbbnxnbwwbsxbxxwwlzll'), [10, 12, 12, 11, 18, 16, 4])\\nTest.assert_equals(split_string('phaaphalahynxjjvsfjudxuzbmjfouozruzzeosdexvgtkckwcqwwcci'), [10, 1, 1, 31, 1, 1, 10, 1])\\nTest.assert_equals(split_string('qqpgqqqpgggqqqerkezrrcvcvrevreererrvrvaoxalxxloaxoaxaxxaxaoxoybjynnjjynbjnuynubuybbubbnjjynuyjjbnjbunyyufdfmfmfddfmwhsisshhstshhshh'), [14, 24, 23, 43, 11, 1, 15])\\nTest.assert_equals(split_string('mjmtttttmmjjjtjjmmjmjtmjmtjmjmmttmmysaaiisyssaaaiyiisyyaaysiyyyssaaaasyaysiisssaasisyiisqlqblqqqqbqqbulqqulqqqqvczvcvvvczznncvnzzzzzvncvvzvczcnvzvvvzzdppphhpdddhphdhddhdddhhpdhphdpddokkfffkkokkxkokofxooookokofxfxkkffofxxffxkkoorgegwwrewgewegwreeweeregregggwwrwwrgweegeweeewgwrr'), [35, 53, 23, 39, 32, 45, 50])\\n\\nprint('t_sec = {:.6f}'.format(perf_counter() - tic))\",\"language\":\"python3\",\"quality\":0,\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,5,5,3,5,5,1,5,0,2,3],\"quality\":[],\"rators\":[\"8PwfYqoDQFThzNtvf\",\"mDWNyaaQ9hvPCRzSd\",\"eHcgvkTGsH7ZziqBo\",\"iojEnnY9FsMfYzp6f\",\"iS5BrkGLzJyPK7nKt\",\"8sNv5PTHa7XQ8bNqR\",\"gJYuGdkXEWWmGRLzu\",\"T6iBEE2jp7f7iEF2P\",\"yjtdwc2AC4jA2RWtn\",\"s5M5RvgqR9BhB9JoC\"],\"total\":11},\"flags\":0},\"summary\":\"The function is given a string with lower-case characters. Split the string into as many substrings as possible such that each character appears in only one substring. Return the list of lengths of the resulting substrings.\\n\\nExamples\\nsplit_string(\\\"abbccc\\\"), [1, 2, 3]\\n\\\"a\\\", \\\"bb\\\", \\\"ccc\\\"\\n\\nsplit_string(\\\"abbacdceef\\\"), [4, 3, 2, 1]\\n\\\"abba\\\", \\\"cdc\\\", \\\"ee\\\", \\\"f\\\"\\n\\nsplit_str\",\"tags\":[\"algorithms\",\"conditions\",\"recursion\",\"strings\"],\"timestamp\":{\"$date\":1613678599291},\"title\":\"Split the String into Substrings with Non-overlapping Characters\",\"family\":[{\"_id\":\"MrySrdhd93xLGoRJj\",\"language\":\"python3\"}]}}"]