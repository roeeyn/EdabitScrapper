a["{\"msg\":\"result\",\"id\":\"2178\",\"result\":{\"_id\":\"ARRBHsfXtnydhwtgt\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"def compress(c):\\n\\t# recursive code here\",\"difficulty\":3.347826086956522,\"editorId\":\"a777e8chPvJkY3tKa\",\"familyId\":\"GQHf8riMgyddYiXJi\",\"instructions\":\"The function is given an array of characters. **Recursively compress** the array into a string using the following rules. For each group of consecutively repeating characters:\\n- If the number of repeating characters is one, append the string with only this character.\\n- If the number `n` of repeating characters `x` is greater than one, append the string with `\\\"x\\\" + str(n)`.\\n\\n### Examples\\n```\\ncompress([\\\"t\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"s\\\", \\\"s\\\", \\\"s\\\", \\\"h\\\"]) ➞ \\\"te14s3h\\\"\\n\\ncompress([\\\"a\\\", \\\"a\\\", \\\"b\\\", \\\"b\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\"]) ➞ \\\"a2b2c3\\\"\\n\\ncompress([\\\"a\\\"]) ➞ \\\"a\\\"\\n\\ncompress([\\\"a\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\"]) ➞ \\\"ab12\\\"\\n\\ncompress([\\\"a\\\", \\\"a\\\", \\\"a\\\", \\\"b\\\", \\\"b\\\", \\\"a\\\", \\\"a\\\"]) ➞ \\\"a3b2a2\\\"\\n```\\n\\n### Notes\\n- You are expected to solve this challenge using the concept of **recursion**.\\n- Check out the **Resources** tab for more details on _recursion_.\\n- An **iterative** version of this challenge (which was originally published by @Evgeny SH) can be found via this [link](https://edabit.com/challenge/6RHxTTndfASnPyp8Z).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"from random import randint\\nfrom inspect import getsource\\nfrom re import findall, MULTILINE\\n\\ndef is_recursive(fn):\\n  try:\\n    src, n = getsource(fn), fn.__name__\\n    if n == '<lambda>': n = src.split('=')[0].strip()\\n    return len(findall(n, src, flags=MULTILINE)) > 1\\n  except OSError: return True\\n\\nTest.assert_not_equals(is_recursive(compress), False, 'Recursion is required!')\\n\\nactual_param = [\\n  [\\\"a\\\", \\\"a\\\", \\\"b\\\", \\\"b\\\", \\\"c\\\", \\\"c\\\", \\\"c\\\"], [\\\"a\\\"], [\\\"a\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\", \\\"b\\\"],\\n  [\\\"a\\\", \\\"a\\\", \\\"a\\\", \\\"b\\\", \\\"b\\\", \\\"a\\\", \\\"a\\\"],\\n  [\\\"t\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"e\\\", \\\"s\\\", \\\"s\\\", \\\"s\\\", \\\"h\\\"]\\n]\\nexpected_param = [\\\"a2b2c3\\\", \\\"a\\\", \\\"ab12\\\", \\\"a3b2a2\\\", \\\"te14s3h\\\"]\\nfor i, x in enumerate(actual_param): Test.assert_equals(compress(x), expected_param[i])\\nfor _ in range(20):\\n  a, x = [], []\\n  for i in range(randint(1, 200)):\\n    s, n = chr(97 + i % 26), randint(1, 200)\\n    a, x = a + [s] * n, x + [s if n < 2 else s + str(n)]\\n  Test.assert_equals(compress(a), ''.join(x))\",\"language\":\"python3\",\"quality\":0,\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,5,5,1,3,3,5,1,5,1,2,3,5,0,5,2,4,2,0],\"quality\":[],\"rators\":[\"a777e8chPvJkY3tKa\",\"8PwfYqoDQFThzNtvf\",\"mDWNyaaQ9hvPCRzSd\",\"xn7uGNKeAwPEkP9oA\",\"eHcgvkTGsH7ZziqBo\",\"XNmN6ztj36a7eChbD\",\"GGdmhAvxXhqhhibJN\",\"iS5BrkGLzJyPK7nKt\",\"8sNv5PTHa7XQ8bNqR\",\"yjtdwc2AC4jA2RWtn\",\"PytNZK9mNiRiZxPrm\",\"gJYuGdkXEWWmGRLzu\",\"T6iBEE2jp7f7iEF2P\",\"tAF9Gf6PiGogbZuWs\",\"s5M5RvgqR9BhB9JoC\",\"2PufnQcsHsfymufX3\",\"aEm3Wvj2rFYRL8Lrb\",\"d8qtzoLB264iP8tdY\"],\"total\":19},\"flags\":0},\"summary\":\"The function is given an array of characters. Recursively compress the array into a string using the following rules. For each group of consecutively repeating characters:\\nIf the number of repeating characters is one, append the string with only this character.\\nIf the number n of repeating characters x is greater than one, append the string with \\\"x\\\" + str(n).\",\"tags\":[\"recursion\",\"strings\",\"arrays\"],\"timestamp\":{\"$date\":1610223064561},\"title\":\"Recursion: String Compression from Character Array\",\"family\":[{\"_id\":\"imM3Hz44BLEPCKoFe\",\"language\":\"java\"},{\"_id\":\"hNCyj6c5B6FmG3KGE\",\"language\":\"javascript\"},{\"_id\":\"ARRBHsfXtnydhwtgt\",\"language\":\"python3\"}]}}"]