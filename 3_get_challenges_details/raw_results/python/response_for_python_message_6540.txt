a["{\"msg\":\"result\",\"id\":\"1979\",\"result\":{\"_id\":\"aMTXfakahQ45oZbJP\",\"author\":\"Helen Yu\",\"authorId\":\"mNMQvcxKSSvqqMYCH\",\"code\":\"def complete_bracelet(lst):\\n\\t\",\"difficulty\":2.7625,\"familyId\":\"7qYAmvkdCb3GtNMnT\",\"instructions\":\"A **complete bracelet** is a list with at least one subsequence (pattern) repeating *at least two times*, and *completely* - the subsequence cannot be cut-off at any point. The subsequence **must have length two or greater**.\\n\\n**Complete bracelets**:\\n\\n```\\n[1, 2, 3, 3, 1, 2, 3, 3]  # Pattern: [1, 2, 3, 3]\\n\\n[1, 2, 1, 2, 1, 2, 1, 2]  # Pattern: [1, 2] or [1, 2, 1, 2]\\n\\n[1, 1, 6, 1, 1, 7, 1, 1, 6, 1, 1, 7, 1, 1, 6, 1, 1, 7]  # Pattern: [1, 1, 6, 1, 1, 7]\\n\\n[4, 4, 3, 4, 4, 4, 4, 3, 4, 4]  # Pattern: [4, 4, 3, 4, 4]\\n```\\n\\n**Incomplete bracelets**:\\n\\n```\\n[1, 2, 2, 2, 1, 2, 2, 2, 1]  # Incomplete (chopped off)\\n\\n[1, 1, 6, 1, 1, 7]  # Incomplete (subsequence repeats only once)\\n```\\n\\nCreate a function that returns `True` if a bracelet is **complete**, and `False` otherwise.\\n\\n### Examples\\n```\\ncomplete_bracelet([1, 2, 2, 1, 2, 2]) ➞ True\\n\\ncomplete_bracelet([5, 1, 2, 2]) ➞ False\\n\\ncomplete_bracelet([5, 5, 5]) ➞ False\\n# potential pattern [5, 5] cut-off (patterns >= 2)\\n```\\n\\n### Notes\\n- Patterns must be at least two integers in length.\\n- See **Comments** for a hint if you are stuck.\",\"lab\":\"Test.assert_equals(complete_bracelet([1, 2, 2, 1, 2, 2]), True)\\nTest.assert_equals(complete_bracelet([5, 1, 2, 2]), False)\\nTest.assert_equals(complete_bracelet([5, 5, 5]), False)\\nTest.assert_equals(complete_bracelet([5, 5, 7, 7]), False)\\nTest.assert_equals(complete_bracelet([5, 5, 7, 7, 5, 5, 7, 7]), True)\\nTest.assert_equals(complete_bracelet([1, 2, 1, 2, 1, 2]), True)\\nTest.assert_equals(complete_bracelet([1, 2, 2, 2, 1, 2, 2]), False)\\nTest.assert_equals(complete_bracelet([1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2]), True)\\nTest.assert_equals(complete_bracelet([5, 2, 5, 5, 2, 5, 2, 5, 2, 2, 5, 2, 5, 2, 5, 5, 2, 5, 2, 5, 2, 2, 5, 2]), True)\\nTest.assert_equals(complete_bracelet([1, 2, 3, 3, 1, 2, 3, 3]), True)\\nTest.assert_equals(complete_bracelet([1, 2, 1, 2, 1, 2, 1, 2]), True)\\nTest.assert_equals(complete_bracelet([1, 1, 6, 1, 1, 7, 1, 1, 6, 1, 1, 7, 1, 1, 6, 1, 1, 7]), True)\\nTest.assert_equals(complete_bracelet([4, 4, 3, 4, 4, 4, 4, 3, 4, 4]), True)\\nTest.assert_equals(complete_bracelet([1, 2, 2, 2, 1, 2, 2, 2, 1]), False)\\nTest.assert_equals(complete_bracelet([1, 1, 6, 1, 1, 7]), False)\\nTest.assert_equals(complete_bracelet([5, 5]), False)\",\"language\":\"python3\",\"summary\":\"A complete bracelet is a list with at least one subsequence (pattern) repeating at least two times, and completely - the subsequence cannot be cut-off at any point. The subsequence must have length two or greater.\\n\\nComplete bracelets:\\n\\n[1, 2, 3, 3, 1, 2, 3, 3]  # Pattern: [1, 2, 3, 3]\\n\\n[1, 2, 1, 2, 1, 2, 1, 2]  # Pattern: [1, 2] or [1, 2, 1, 2]\\n\\n[1, 1, 6, 1, 1\",\"tags\":[\"arrays\",\"loops\",\"scope\",\"validation\"],\"timestamp\":{\"$date\":1553099009921},\"title\":\"The Complete Bracelet\",\"stats\":{\"completed\":{\"total\":81,\"ratings\":[3,3,3,3,3,3,3,3,3,3,3,3,1,3,2,3,2,2,3,3,4,3,2,4,1,4,3,4,1,3,2,3,4,3,3,3,2,3,2,5,3,2,4,3,4,3,2,3,3,3,3,2,4,3,3,2,0,4,4,0,3,2,3,2,3,3,4,4,4,4,4,3,1,1,0,3,2,1,3,2],\"rators\":[\"BkPgkDQGHm66X4Qai\",\"yZvzB3qFb8pkHy4dg\",\"qaR8DnWrTk8Mus5Q2\",\"AYaEkTWLMmfzpwejr\",\"8JyqsSbN2FJXPr3cw\",\"tAF9Gf6PiGogbZuWs\",\"gb9rvGus2Jv7bjZSs\",\"ab7BsQuhDo3QgE6bh\",\"T3ZAuoMrJjvZwN55B\",\"tQsPenm9qfM6mPbNa\",\"FikSPhcrHBpQ4CyGC\",\"MXjxGML2X75x64vJo\",\"hsrNYf3WbexXJKhCq\",\"PFjMZGHNAPTkgd7tq\",\"BFNm9gacwba9KyLFW\",\"jHrtWDGBhkbuWa7fG\",\"nF9pCCzbGDhzvWgaw\",\"mG93NkvEZfh2kPrMq\",\"Tin42WiZ4JTDEnS7b\",\"4rg9g6TKYZ8aifrYc\",\"jYJ26SiLKBu5GRumq\",\"rurh72mGpAthfGRGt\",\"2fxapKr8XGdNeaKi2\",\"PuJDHtAaX6vXeJJTC\",\"dZGNAJXB24zNh2tsD\",\"XKi8iZXBCHCaebSHh\",\"Dw8RZgg5iHBuFrWwQ\",\"2m2joa99MiCoSDD2T\",\"HqmxnQJM66Y57twhn\",\"vuwheqp25x7RkBHXn\",\"FgkYtHLxeD8pETJ8T\",\"xAgd4WTwd9HYmJceT\",\"Jqk2uJZZxEv5wZFze\",\"8PwfYqoDQFThzNtvf\",\"Yp7uvStL97cC9fKkY\",\"WLFPvm65aHfgwQy7N\",\"pmgFEciNrd3ES9tuu\",\"aEm3Wvj2rFYRL8Lrb\",\"Nua6T3dBurBy3Qfg9\",\"mDWNyaaQ9hvPCRzSd\",\"s5M5RvgqR9BhB9JoC\",\"AasGs8AeX9Lcb9xJn\",\"ZNnsMeNkdDhHjSrZb\",\"fznzd3qnvtbFkkizz\",\"aLwJNALj2MpjAGZz4\",\"YRstQuthRkFeBiXug\",\"zT9LpkiwYjLviYYW6\",\"W5TajitmCyxz87zAC\",\"aCNWav8S8Try9RkC6\",\"gJYuGdkXEWWmGRLzu\",\"Ecg4m7srYGgZsb4Ck\",\"YLtspA8ec6ntcoMMf\",\"KY8ojbnCXAM9LuJP8\",\"n2BRY9X8899dcG8Bw\",\"xn7uGNKeAwPEkP9oA\",\"R4SjTgDnpigJYDLyL\",\"u72ipcjbNDSkWX8Gw\",\"ZgmNZTKEEBSyKujwG\",\"S6Zd8mPuvhuh3MFRt\",\"Bof5WwcxWFQEkNTsN\",\"tkdRHAExhDq8ryDJT\",\"HF28xZKSLM9wEuqNg\",\"d8qtzoLB264iP8tdY\",\"8sNv5PTHa7XQ8bNqR\",\"iS5BrkGLzJyPK7nKt\",\"DQskEvAv5KiJDPtGF\",\"SGhPxX5bHGL8zZqtt\",\"p8qqFdJ3FSk5x9z3G\",\"iojEnnY9FsMfYzp6f\",\"J3upzLHuEwXH7Z2hx\",\"yr822PZmmiDDenxpB\",\"yjtdwc2AC4jA2RWtn\",\"T6iBEE2jp7f7iEF2P\",\"2PufnQcsHsfymufX3\",\"suArq5BbSy7gD6xri\",\"yTtSCvGPyYna6JuRC\",\"8PMaZwToeg92Ziifx\",\"GTKsdeEihE636Le9i\"],\"quality\":[5,5,4,5,5,5,4]},\"tests\":{\"score\":0,\"rators\":[\"BkPgkDQGHm66X4Qai\"]},\"instructions\":{\"score\":0,\"rators\":[\"BkPgkDQGHm66X4Qai\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"isHidden\":false,\"quality\":4.714285714285714,\"family\":[{\"_id\":\"c2SvzJC6cxjTbrb5Q\",\"language\":\"csharp\"},{\"_id\":\"v4fxXDcyqWx7FnX2s\",\"language\":\"javascript\"},{\"_id\":\"aMTXfakahQ45oZbJP\",\"language\":\"python3\"},{\"_id\":\"HNua2z5MfWWqn4PkF\",\"language\":\"ruby\"},{\"_id\":\"kzBdYfSiWCQJRrwEp\",\"language\":\"swift\"}]}}"]