a["{\"msg\":\"result\",\"id\":\"2295\",\"result\":{\"_id\":\"vdx5oXuTsos4vLvrn\",\"author\":\"lllll\",\"authorId\":\"DNACg4rcgZsPtYGZ8\",\"code\":\"def kaprekar_numbers(p, q):\\n\\t\",\"difficulty\":3.619047619047619,\"quality\":0,\"familyId\":\"TAgrobTaSi4ENivk4\",\"instructions\":\"A modified Kaprekar number is a positive whole number with a special property. If you square it, then split the number into two integers and sum those integers, you have the same value you started with.\\n\\nConsider a positive whole number `n` with `d` digits. We square `n` to arrive at a number that is either `2 * d` digits long or `(2 * d) - 1` digits long. Split the string representation of the square into two parts, `l` and  `r`. The right-hand part, `r` must be `d` digits long. The left is the remaining substring. Convert those two substrings back to integers, add them and see if you get `n`.\\n\\nFor example, if `n=5`, `d=1`, then `n` squared = `25` . We split that into two strings and convert them back to integers `2` and `5`. We test `2+5=7=5`, so this is not a modified Kaprekar number. If `n=9`, `d=1`, and `n` squared = `81`. This gives us `1+8=9`, the original `n`.\\n\\nNote that `r` may have leading zeros.\\n\\nComplete the `kaprekar_numbers()` method. It should return the list of modified Kaprekar numbers in ascending order. `kaprekar_numbers()` has the following parameter(s):\\n- `p`: an integer representing the lower integer limit.\\n- `q`: an integer representing the upper integer limit.\\n\\n### Examples\\n```\\nkaprekar_numbers(1, 10) ➞ \\\"1 9\\\"\\n\\nkaprekar_numbers(100, 300) ➞ \\\"297\\\"\\n\\nkaprekar_numbers(1, 100) ➞ \\\"1 9 45 55 99\\\"\\n```\\n\\n### Notes\\n- Upper and lower ranges should be inclusive of the limits.\\n- If no modified Kaprekar numbers exist in the given range, return `\\\"INVALID RANGE\\\"`.\",\"isHidden\":false,\"lab\":\"Test.assert_equals(kaprekar_numbers(1, 100), \\\"1 9 45 55 99\\\")\\nTest.assert_equals(kaprekar_numbers(100, 300), \\\"297\\\")\\nTest.assert_equals(kaprekar_numbers(1, 99999), \\\"1 9 45 55 99 297 703 999 2223 2728 4950 5050 7272 7777 9999 17344 22222 77778 82656 95121 99999\\\")\\nTest.assert_equals(kaprekar_numbers(1, 10), \\\"1 9\\\")\\nTest.assert_equals(kaprekar_numbers(2, 4), \\\"INVALID RANGE\\\")\",\"language\":\"python3\",\"summary\":\"A modified Kaprekar number is a positive whole number with a special property. If you square it, then split the number into two integers and sum those integers, you have the same value you started with.\\n\\nConsider a positive whole number n with d digits. We square n to arrive at a number that is either 2 * d digits long or (2 * d) - 1 digits long. Split the str\",\"tags\":[\"algorithms\",\"numbers\"],\"timestamp\":{\"$date\":1601401368187},\"title\":\"Modified Kaprekar Numbers\",\"stats\":{\"completed\":{\"total\":19,\"ratings\":[4,4,4,4,4,5,5,3,1,3,5,0,5,5,5,5,1,1,5,3,4],\"quality\":[],\"rators\":[\"8PwfYqoDQFThzNtvf\",\"tAF9Gf6PiGogbZuWs\",\"s5M5RvgqR9BhB9JoC\",\"aEm3Wvj2rFYRL8Lrb\",\"xn7uGNKeAwPEkP9oA\",\"5dHucvf2qBYyKim7X\",\"PbFZKHNGGqEacTSQS\",\"fSQSHjW3e72MrWxbD\",\"iS5BrkGLzJyPK7nKt\",\"XNmN6ztj36a7eChbD\",\"eHcgvkTGsH7ZziqBo\",\"8sNv5PTHa7XQ8bNqR\",\"yjtdwc2AC4jA2RWtn\",\"gJYuGdkXEWWmGRLzu\",\"LQxof8pGabGuWP7Gn\",\"buX4mCQhtXCfBjeno\"]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"gH7hdCnyJvuoDrTgi\",\"language\":\"cpp\"},{\"_id\":\"HJCqdv4A3TMHrEvrk\",\"language\":\"java\"},{\"_id\":\"ZHResBjuzYzXfWHAy\",\"language\":\"javascript\"},{\"_id\":\"vdx5oXuTsos4vLvrn\",\"language\":\"python3\"},{\"_id\":\"QthgHJPgRcwZKH9PE\",\"language\":\"ruby\"},{\"_id\":\"H7qe4pyCuTmkXappp\",\"language\":\"swift\"}]}}"]