a["{\"msg\":\"result\",\"id\":\"1279\",\"result\":{\"_id\":\"pqpkRBP4YT5dwBDHm\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def show_the_love(lst):\\n\\t\",\"difficulty\":1.9681818181818183,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"h2hKffjZAuK4SK6iy\",\"instructions\":\"Given a list of numbers, create a function that removes 25% from every number in the list except the smallest number, and adds the total amount removed to the smallest number.\\n\\n### Examples\\n```\\nshow_the_love([4, 1, 4]) ➞ [3, 3, 3]\\n\\nshow_the_love([16, 10, 8]) ➞ [12, 7.5, 14.5]\\n\\nshow_the_love([2, 100]) ➞ [27, 75]\\n```\\n\\n### Notes\\nThere will only be one smallest number in a given list.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(show_the_love([4, 1, 4]), [3, 3, 3,])\\nTest.assert_equals(show_the_love([16, 10, 8]), [12, 7.5, 14.5])\\nTest.assert_equals(show_the_love([2, 100]), [27, 75])\\nTest.assert_equals(show_the_love([75, 64, 55]), [56.25, 48.0, 89.75])\\nTest.assert_equals(show_the_love([84, 94, 26, 80, 16]), [63.0, 70.5, 19.5, 60.0, 87.0])\\nTest.assert_equals(show_the_love([55, 27]), [41.25, 40.75])\\nTest.assert_equals(show_the_love([13, 80, 75, 45, 11]), [9.75, 60.0, 56.25, 33.75, 64.25])\\nTest.assert_equals(show_the_love([48, 28, 18]), [36.0, 21.0, 37.0])\\nTest.assert_equals(show_the_love([17, 9]), [12.75, 13.25])\\nTest.assert_equals(show_the_love([38, 23, 31, 16]), [28.5, 17.25, 23.25, 39.0])\\nTest.assert_equals(show_the_love([54, 62, 59]), [84.25, 46.5, 44.25])\\nTest.assert_equals(show_the_love([44, 46]), [55.5, 34.5])\\nTest.assert_equals(show_the_love([21, 97, 45, 58]), [71.0, 72.75, 33.75, 43.5])\\nTest.assert_equals(show_the_love([43, 9]), [32.25, 19.75])\\nTest.assert_equals(show_the_love([53, 0, 14, 58]), [39.75, 31.25, 10.5, 43.5])\\nTest.assert_equals(show_the_love([16, 19, 42, 43, 6]), [12.0, 14.25, 31.5, 32.25, 36.0])\\nTest.assert_equals(show_the_love([26, 17, 28, 31, 79]), [19.5, 58.0, 21.0, 23.25, 59.25])\\nTest.assert_equals(show_the_love([47, 57, 18, 2, 72]), [35.25, 42.75, 13.5, 50.5, 54.0])\\nTest.assert_equals(show_the_love([27, 77]), [46.25, 57.75])\\nTest.assert_equals(show_the_love([22, 52]), [35.0, 39.0])\\nTest.assert_equals(show_the_love([85, 49, 60, 78, 6]), [63.75, 36.75, 45.0, 58.5, 74.0])\\nTest.assert_equals(show_the_love([96, 38]), [72.0, 62.0])\\nTest.assert_equals(show_the_love([29, 73, 81]), [67.5, 54.75, 60.75])\\nTest.assert_equals(show_the_love([51, 46, 81, 85]), [38.25, 100.25, 60.75, 63.75])\\nTest.assert_equals(show_the_love([26, 48, 84, 70, 8]), [19.5, 36.0, 63.0, 52.5, 65.0])\\nTest.assert_equals(show_the_love([69, 64]), [51.75, 81.25])\\nTest.assert_equals(show_the_love([33, 26, 39, 58]), [24.75, 58.5, 29.25, 43.5])\\nTest.assert_equals(show_the_love([4, 51, 66]), [33.25, 38.25, 49.5])\\nTest.assert_equals(show_the_love([0, 52, 83, 55, 40]), [57.5, 39.0, 62.25, 41.25, 30.0])\\nTest.assert_equals(show_the_love([39, 3, 36, 52, 25]), [29.25, 41.0, 27.0, 39.0, 18.75])\\nTest.assert_equals(show_the_love([32, 78, 12]), [24.0, 58.5, 39.5])\\nTest.assert_equals(show_the_love([75, 51, 24]), [56.25, 38.25, 55.5])\\nTest.assert_equals(show_the_love([42, 21, 93, 47]), [31.5, 66.5, 69.75, 35.25])\\nTest.assert_equals(show_the_love([72, 97, 26, 1]), [54.0, 72.75, 19.5, 49.75])\\nTest.assert_equals(show_the_love([90, 45, 12]), [67.5, 33.75, 45.75])\\nTest.assert_equals(show_the_love([37, 47, 82]), [69.25, 35.25, 61.5])\\nTest.assert_equals(show_the_love([54, 11]), [40.5, 24.5])\\nTest.assert_equals(show_the_love([78, 86, 19, 46, 51]), [58.5, 64.5, 84.25, 34.5, 38.25])\\nTest.assert_equals(show_the_love([7, 31, 74, 69]), [50.5, 23.25, 55.5, 51.75])\\nTest.assert_equals(show_the_love([100, 26, 3, 28, 19]), [75.0, 19.5, 46.25, 21.0, 14.25])\\nTest.assert_equals(show_the_love([87, 29, 92, 57]), [65.25, 88.0, 69.0, 42.75])\\nTest.assert_equals(show_the_love([64, 24]), [48.0, 40.0])\\nTest.assert_equals(show_the_love([82, 89, 52, 25, 50]), [61.5, 66.75, 39.0, 93.25, 37.5])\\nTest.assert_equals(show_the_love([90, 17, 11]), [67.5, 12.75, 37.75])\\nTest.assert_equals(show_the_love([14, 24, 27]), [26.75, 18.0, 20.25])\\nTest.assert_equals(show_the_love([21, 4]), [15.75, 9.25])\\nTest.assert_equals(show_the_love([70, 64, 25, 16]), [52.5, 48.0, 18.75, 55.75])\\nTest.assert_equals(show_the_love([50, 17, 87, 20]), [37.5, 56.25, 65.25, 15.0])\\nTest.assert_equals(show_the_love([60, 27, 56]), [45.0, 56.0, 42.0])\\nTest.assert_equals(show_the_love([99, 21]), [74.25, 45.75])\\nTest.assert_equals(show_the_love([80, 0, 45, 84]), [60.0, 52.25, 33.75, 63.0])\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,3,3,1,2,1,2,2,5,2,2,2,2,1,1,2,3,2,3,1,3,2,2,3,1,2,0,2,2,2,1,2,4,1,3,3,3,1,2,2,2,3,2,0,3,3,0,3,3,3,2,0,0,2,2,2,3,2,0,3,3,2,3,2,2,2,0,2,2,2,1,0,1,1,2,3,2,2,3,0,3,3,2,2,2,2,2,3,2,1,0,2,2,2,2,1,2,2,3,3,2,2,1,2,1,2,2,3,3,2,2,0,3,2,3,1,3,2,3,3,3,3,2,3,2,3,0,3,1,2,2,3,0,2,1,2,2,3,1,1,0,2,3,3,3,2,1,2,0,3,2,2,3,2,3,2,1,3,3,1,3,1,3,3,1,1,3,0,3,2,1,1,0,2,2,0,3,2,1,1,2,2,4,3,0,3,2,2,3,1,3,3,2,1,2,2,2,1,2,1,1,3,2,1,2,3,2,2,2,3,3,1,2,1,2],\"rators\":[\"tAF9Gf6PiGogbZuWs\",\"dXMbkgQFoN37BhruB\",\"8PwfYqoDQFThzNtvf\",\"s5M5RvgqR9BhB9JoC\",\"AdskwgPdbteQrpLAe\",\"AasGs8AeX9Lcb9xJn\",\"aEm3Wvj2rFYRL8Lrb\",\"gb9rvGus2Jv7bjZSs\",\"J5T8gZqiZXFuFDTQ7\",\"wZoxzQDbso9SMAPkY\",\"8JyqsSbN2FJXPr3cw\",\"qx7S9WMzk2tfSxapz\",\"yZvzB3qFb8pkHy4dg\",\"2fxapKr8XGdNeaKi2\",\"ZNnsMeNkdDhHjSrZb\",\"3Zceb8GudqAG3onG3\",\"CEd9tLdXeDeNHSzys\",\"24jMuoxwhTniGBtop\",\"kYWb8BwpKwunQkxeX\",\"cR3ibTMxLyEdDFCHY\",\"gJYuGdkXEWWmGRLzu\",\"EjbDDFRECrzQDkzrX\",\"YRstQuthRkFeBiXug\",\"Yp7uvStL97cC9fKkY\",\"4rwxLqLs2mNZNg8NB\",\"aCNWav8S8Try9RkC6\",\"FRN2W8RYpJ6GPhgRy\",\"KdNDysEsy2TW5QRJ2\",\"n2BRY9X8899dcG8Bw\",\"JQ5uoxA4WZgN6HyJk\",\"KRmxvA4mWgfKvHmYN\",\"rgvAJFwfCeYoYnFTK\",\"rKiKAJynBxsFCccXf\",\"HF28xZKSLM9wEuqNg\",\"ekQh3jzgGLsEMbKo3\",\"So6PHm74mfJuY2WTs\",\"xXxcBvT3poSuSCgBN\",\"55RQznnuTGpsj3EXd\",\"yr822PZmmiDDenxpB\",\"MKT7khMBGXzA22ykf\",\"9pzFiFK3ANLjQfnr2\",\"DEDniTrstQYGounXT\",\"GamaMNrnhrjj5tXTx\",\"v9KtC8YLbMWmXiW2H\",\"djeesDJQwNJay4RTe\",\"4yNLEwL2rsx4EE5Nt\",\"Ecg4m7srYGgZsb4Ck\",\"6428wKHtwKkFdvBs5\",\"euPBBaYXyS8RBr9KB\",\"kQH5b8MXJunh84Czq\",\"bJxaKHJqR82EWw8Su\",\"W5TajitmCyxz87zAC\",\"dynD89GCHoau9fvh7\",\"2innwjWqxJHo4eRGh\",\"44dAzThMuyGZ5StXB\",\"GGprTwrkjuccmrQRg\",\"NfMJuiBk6FN5Jc6ow\",\"JS3hNM3XXkxPdg3yk\",\"hRiMXDZNAzyPd5tpt\",\"c3nsyfKKeQGxp6sKb\",\"iojEnnY9FsMfYzp6f\",\"zZDaXBxMzTCBhNkgL\",\"CwXsu25ygLEwQbmQC\",\"wYzfsvtCwkeBwfmSB\",\"Y8ySZEtvht9EwdcoY\",\"KZ2xddpM2f9JRaryB\",\"qPpQfR5KyDb5Y3EFf\",\"yjtdwc2AC4jA2RWtn\",\"ji5f27FPz4wRRF6Ls\",\"ZrKCkX7xxGGZzauFW\",\"mzhB3LXoJ2EGyqr3n\",\"HqmxnQJM66Y57twhn\",\"ZsHZ6a5qLfC8m8EyY\",\"syRNbbPdLCGXbH2Gy\",\"6SKDJwXpev4qPSzgM\",\"ZgmNZTKEEBSyKujwG\",\"MCw7uAcoWcSTBTmr3\",\"8BFSTCnoe2QggN64c\",\"f2BoqyCpgnmjEjLqx\",\"axdSNLZpiCDF8RS6n\",\"xwEZk3bNZoNDPJYF5\",\"49XFttjKo2QhEWT3R\",\"jBR47vA7HwAZqp4QA\",\"mqJtnfNCs6CedXnay\",\"nQRzZKeDKuLRf9chX\",\"P7NmFbCJ5offXMRvB\",\"WD5Qf4xygPSTajuuN\",\"DNACg4rcgZsPtYGZ8\",\"CQrLMPjz7gn82rySP\",\"4fhjJBvLBWh6QeSih\",\"dEuJGZbBQkveCXEFk\",\"ZNgDGdtv5WFkcEn6K\",\"dkcmCKwqApX5jBggc\",\"Lhcy73hmzbjDqY5f7\",\"zfGYZ7gpR8fxJpagh\",\"3QQG7K2vH7D4m4AGj\",\"jNvegJWCk5HCtEMbK\",\"jhNAa5BxEQRpvkzgG\",\"XhhL8kqHz32PZNaXY\",\"T6RHqGYS9mMjMXPw6\",\"Jg8ZSRXe3NoDMCqGu\",\"oig8ig9SE9RZa8ttL\",\"Wv2vJnEj8ywNmARoF\",\"4RY3zj9C2t8GGefhi\",\"CRGb53t7cpX45XgFo\",\"uXWWXsRp9QtoFAd4H\",\"mghE9RR34KjXpYgNb\",\"TM2t3Le4qPcqSnzKX\",\"NchnDcEmsLTeFZ4FH\",\"BYWmPuD9wvYz7N37r\",\"EMJ6uvBZkie429gdg\",\"vSPc7MGK5Poy8tSFp\",\"tytQfvk4jvE4dyFGk\",\"xn7uGNKeAwPEkP9oA\",\"DPi9QGLctq2y76KuE\",\"SvsTKrEmBGPtvTDnz\",\"pmgFEciNrd3ES9tuu\",\"CTKmXtrqDYqJBnuy8\",\"ZRxAkXjTCdyQTdSDw\",\"iS5BrkGLzJyPK7nKt\",\"Kt4TQ92a6bL869KFv\",\"QCvvnevRLhBY8XBJk\",\"REbXuiozZdcmS4iiJ\",\"YcCLwitFMAEJSnxAW\",\"RErqK2yM94wYyD2hk\",\"mG8HqKiAQFTdRZthG\",\"XjajdyybZZbkz8o5x\",\"tpxMgkGSHwBjS95Ta\",\"gMJhLdyw3tH7L96X2\",\"zvR7koBTGcaj5pJNQ\",\"9FCeFzjPA4jrQ7oHW\",\"JGWaPacr9EhuKPuxx\",\"8fZxjQfuXw5HMSRJM\",\"L3BJygJoLeHsTZqfo\",\"ppxNdL4gjANz8oJLQ\",\"QRv96jmNaYsWkxQEG\",\"N6pmP89gXiKzYB5eg\",\"oBcs8GLX2ZFLXQy8y\",\"nc7bRhkxgKyqusYe3\",\"CLypXaZksY99mpRCm\",\"6MjSiiBLPcvXbXcaZ\",\"g9FyJ8yeT9ic97Qp2\",\"gXTAie79kiw28tx5u\",\"dYPkStFnLvAMsHSzZ\",\"J3upzLHuEwXH7Z2hx\",\"fznzd3qnvtbFkkizz\",\"bccs9koJxyQ9XNiLC\",\"7scpcTEp3SEx5Wjg9\",\"7ifh8r4gvyYMhKB94\",\"gSFJPsMXnqAog3Q9f\",\"TFqRD3zervh8PT8op\",\"DCLoZNDf8h6TB7gxn\",\"YL9pqyCu8xsds8J49\",\"kDBHusg5XpsRpBR5c\",\"ZMJZNTJ2Ng8o8euQJ\",\"3LiSLdtN58n46NEqg\",\"uN5t57RETi5y2z5W8\",\"kEkNyqFARK9YBrhRx\",\"974cv448kw6Wu2JF6\",\"Jqk2uJZZxEv5wZFze\",\"KakQgfNR6m94AF79b\",\"AvA5ezoh8m6mEEXhu\",\"gxrsPpEAuBNBoBM6a\",\"9RaccqxB9dRZuS7z4\",\"3pxHTZBsv7MKzFG6Y\",\"EfxwqhYdapX3dMQC2\",\"2nD3hNDExw2LNYq4F\",\"cAP3n5NY64uoMwzRR\",\"GT9wLv8Lipyp6YYTp\",\"xAMuN7wh2uorXC9q2\",\"RDdXanzLqFzuDF2uZ\",\"tkXdQXRPd3hjBgP8T\",\"DDevhboRPEbQwcxun\",\"eFh8z7sMmxkrFWZv9\",\"29MTvBZopCWjotnc5\",\"Nzi4RD5fxAJ4wjnNa\",\"NtAgmhY2RuTFD9wvy\",\"abCKW9EmBinFsr7KG\",\"LW8PqW4HFXWfoJGo6\",\"zd9FLSzsGz3evKafy\",\"iaS9igNEGvpuP8rHs\",\"K6MfKMytoJJuSGewP\",\"xQ9jZmngg97XHXCq6\",\"FEYpu9RWysAgW3XnP\",\"YfJQiCCAhnYRsSnZo\",\"mmt7jwqbmSjzRSvqh\",\"SGhPxX5bHGL8zZqtt\",\"CHvzhtXnv8HTbPQ56\",\"ySey5cL9oQsrC7D9w\",\"4RsakkyRXyYGwFxEa\",\"GGdmhAvxXhqhhibJN\",\"qZQxPQ2kaNKAMesHT\",\"T2vhHPhRR96hRizq8\",\"q2tzvkrLASvSjkek9\",\"ZYT9LjgocbP4hzQK5\",\"2QziknsznNeMPRh3g\",\"buX4mCQhtXCfBjeno\",\"yyo6YLQN2of6fxp49\",\"DZoEMJpc7bbAaaPHr\",\"mfsaETo7uA4x5vqLD\",\"srJ34BaybkQh3qRkM\",\"9ivvGvJGvtQfigQaZ\",\"2PufnQcsHsfymufX3\",\"MfKe55snfKsdnDejs\",\"5kazQPq8ZdDsx6kjf\",\"T6iBEE2jp7f7iEF2P\",\"pxrcWESFef87mKhmF\",\"Q39K6XTr2mFaiYb8F\",\"4Lwjr34ypKNQNQCar\",\"hsrNYf3WbexXJKhCq\",\"u5u2YpHXiNgzDNJdX\",\"ghMkPtdFCpM6w8nax\",\"PC3pLs36zNzpRDSuE\",\"PWgzeK859suojbrRx\",\"3KkyQm77zsew58Dc2\",\"KACjjdKDL97rBTyEK\",\"AQSqD9oNv2uPfxZCR\",\"4tLFkGSzBMruqzo7Q\",\"fbr22rabEJMfBp7vD\",\"wwMcJQRvf3X59Jyev\",\"hqvExZcs9dqew7Bm2\",\"Ds7L5bksw2QRHjrKL\",\"ctbThYbufFCYbRK4f\",\"qzXAMXsHZGT8o5hTA\",\"o4ixjQGSaYqA2JoM4\",\"jWbd7SYDzLPjc9EDh\",\"QvEXmSEo3ANp3yPyH\",\"RoGGD5cpHb4ftdLDv\",\"ey3CASd6Je5LEJzfB\",\"8sNv5PTHa7XQ8bNqR\",\"jCjCvyhqhpebkJn34\",\"5HCu9Ydd86QgHDRNP\",\"XHShZ3WMPgGEA2vkR\",\"etoxSpG4fGKThLozM\",\"nkH3HfJXLMNcBMM79\",\"i5Nn7L8wRjX4fAZNN\",\"5s4qhuRJijYaDNXva\",\"StNu7DPyTgEStZsMY\",\"9gJsF5apWJGWZJprn\",\"BrTDhPJcACL2bsrpJ\",\"mvJBakQ35CWAnbbEZ\",\"PH32cNxBjrK4a28sn\",\"JhX7jvtpwNyxcc39m\",\"YZsZjfvd3PnLhDJrR\",\"qmtoFxLkGDQMwcBr6\",\"yod5YhKtPqw2GfG9B\",\"DrTeBk3bpLqhsLS4g\",\"TKabAeLSa25GrxHWq\",\"hR7GMiqGap4CzEWSy\",\"dSd7wHgXGQeG5BQ2P\",\"sbJcFfQjQ59Wfg4Cd\",\"mw9464S5dnenqzvpm\",\"yTtSCvGPyYna6JuRC\",\"5QN8R22z43SrwoHDz\",\"Qyfyyw6oC4EHAndzo\",\"oFEG3RDs5J99JYtkZ\",\"xdgy7nWSKCekXnaJM\",\"23oi2a3vQwhtLEbSj\",\"Z85ajWfZ4jDPkbvR4\",\"qB6KSTYC6H2TQEQY6\",\"jkbavR2ATFJcpmo8M\",\"5Dd7XwALvvMMwS4Fb\",\"GTKsdeEihE636Le9i\",\"RbRoa7RJ5nEooSYd7\",\"DdHnWE8gjciwCXhSL\",\"kuX3hww7mfsdo6jmG\",\"mTF6oWX2WhFR4M3QK\",\"8NvGXadvQEppXXZD7\",\"bNENiqqEDxM5a5JBf\",\"8BJyXvRWcrvN3nttS\",\"PNKQHXBQEWZ8x95M4\",\"XdaQbHty4sZkvopco\",\"3nied3n8KG8RSNixH\",\"wrL4iX2CCSqDCCty3\"],\"total\":307,\"quality\":[5,4,5,5,5,3,5,5,5,5,5,5,4,5,4,4,3,3,5,4,3,5,5,4,5,5,5,5,5,5,5,5,5,5,4,5,5,5,5,5,5,5,5,5,5,5,4,5,5,4,5,4,5,5,4,4,5,5,5]},\"flags\":0},\"summary\":\"Given a list of numbers, create a function which removes a quarter from the total from every number in the list, and adds it to the smallest number.\\n\\nExamples\\nshowthelove([4, 1, 4]) ➞ [3, 3, 3]\\n\\nshowthelove([16, 10, 8]) ➞ [12, 7.5, 14.5]\\n\\nshowthelove([2, 100]) ➞ [27, 75]\\n\\nNotes\\nThere will only be one smallest number in a given list.\",\"tags\":[\"arrays\",\"numbers\"],\"timestamp\":{\"$date\":1585658031185},\"title\":\"Sharing is Caring\",\"quality\":4.661016949152542,\"family\":[{\"_id\":\"t5w3KeLXzs5ChWDMo\",\"language\":\"javascript\"},{\"_id\":\"ozhN7ey68uKntsRgw\",\"language\":\"php\"},{\"_id\":\"pqpkRBP4YT5dwBDHm\",\"language\":\"python3\"},{\"_id\":\"tBDHKza4XRvJm79GG\",\"language\":\"ruby\"}]}}"]