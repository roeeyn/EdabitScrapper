a["{\"msg\":\"result\",\"id\":\"2044\",\"result\":{\"_id\":\"CxxaYAGcuk8TyA9Jt\",\"author\":\"Arun Suryan\",\"authorId\":\"mqJtnfNCs6CedXnay\",\"code\":\"def check_balance(expression):\\n\\t\",\"difficulty\":2.857142857142857,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"GTfAgwtkv3FGW3i73\",\"instructions\":\"Write a function that takes a string of source code and checks whether the braces/parentheses are balanced. Every `(` or `{` must be closed by a `}` or `)` in the opposite order. Return the index at which an imbalance occurs, or `-1` if the string is balanced. If any `(` or `{` are never closed, return the string's length.\\n\\n### Examples\\n```\\ncheck_balance(\\\"if (a(4) > 9) { foo(a(2)); }\\\") ➞ -1\\n# Returns -1 because it's balanced.\\n\\ncheck_balance(\\\"for (i=0;i<a(3};i++) { foo{); )\\\") ➞ 14\\n# Returns 14 because } is out of order.\\n\\ncheck_balance(\\\"if (x) {\\\")  ➞ 8\\n# Returns 8 because { is never closed.\\n```\\n\\n### Notes\\nThink about how you can leverage [Stack Data Structure](https://www.geeksforgeeks.org/stack-in-python/).\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(check_balance(\\\"if (a(4) > 9) { foo(a(2)); }\\\"), -1)\\nTest.assert_equals(check_balance(\\\"for (i=0;i<a(3};i++) { foo{); )\\\"), 14)\\nTest.assert_equals(check_balance(\\\"while (true) foo(); }{ ()\\\"), 20)\\nTest.assert_equals(check_balance(\\\"if (x) {\\\"), 8)\\nTest.assert_equals(check_balance(\\\"if (x) }\\\"), 7)\\nTest.assert_equals(check_balance(\\\"(({{}}){}{}())\\\"), -1)\\nTest.assert_equals(check_balance(\\\"({)}\\\"), 2)\\nTest.assert_equals(check_balance(\\\"(\\\"), 1)\\nTest.assert_equals(check_balance(\\\"}\\\"), 0)\\nTest.assert_equals(check_balance(\\\"\\\"), -1)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,2,4,1,4,1,5,5,3,1,4,1,2,4,4,1,5,3,3,0,0,3,5,4,0,0,0,2,2,2,4],\"rators\":[\"aEm3Wvj2rFYRL8Lrb\",\"8PwfYqoDQFThzNtvf\",\"ipNZ2qxozHBXvMgZH\",\"s5M5RvgqR9BhB9JoC\",\"d8qtzoLB264iP8tdY\",\"iS5BrkGLzJyPK7nKt\",\"tAF9Gf6PiGogbZuWs\",\"eHcgvkTGsH7ZziqBo\",\"8sNv5PTHa7XQ8bNqR\",\"J3upzLHuEwXH7Z2hx\",\"yjtdwc2AC4jA2RWtn\",\"MSpQ9cSg39BZANxad\",\"gJYuGdkXEWWmGRLzu\",\"fSQSHjW3e72MrWxbD\",\"8nE8QHnFYsHCFebte\",\"2PufnQcsHsfymufX3\",\"sFMXNMFryYLjHsjYj\",\"J23RcmzbdtBbPCTjT\",\"T6iBEE2jp7f7iEF2P\",\"T2vhHPhRR96hRizq8\",\"Y6dSgXpu5FTejJ8FR\",\"RriCQNKWZmYKexd8R\",\"5QN8R22z43SrwoHDz\",\"3rQcH9AEoAkscgX65\",\"68zWiHdiSfDcaZths\",\"8zH4p3E4MHjXRpkcN\",\"gXTAie79kiw28tx5u\",\"GTKsdeEihE636Le9i\",\"hrzGaJc9KZqgjAvew\",\"6eRm9ycMujNDWoTyL\"],\"total\":34,\"quality\":[]},\"flags\":0},\"summary\":\"Write a function that takes a string of source code and checks whether the braces/parentheses are balanced. Every ( or { must be closed by a } or ) in the opposite order. Return the index at which an imbalance occurs, or -1 if the string is balanced. If any ( or { are never closed, return the string's length.\\n\\nExamples\\ncheck_balance(\\\"if (a(4) > 9) { foo(a(2));\",\"tags\":[\"strings\",\"validation\",\"data_structures\",\"algorithms\"],\"timestamp\":{\"$date\":1598805334758},\"title\":\"Check for Balance\",\"quality\":0,\"family\":[{\"_id\":\"CxxaYAGcuk8TyA9Jt\",\"language\":\"python3\"}]}}"]