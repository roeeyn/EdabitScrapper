a["{\"msg\":\"result\",\"id\":\"1672\",\"result\":{\"_id\":\"yCGJEcij4LaXLcKXE\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def maximum_items(prices, budget):\\n\\t\",\"difficulty\":2.141025641025641,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"TFy45y6zoH6f2pdYp\",\"instructions\":\"_On a vacation abroad, you see a souvenir shop and decide to head inside. There are snow globes, postcards, fridge magnets and all the other goodies you'd typically find._\\n\\nGiven a list of _prices of things in the store_ and _the amount of money you have_, return the **maximum** number of items you could possibly buy.\\n\\n### Examples\\n```\\nmaximum_items([\\\"$1\\\", \\\"$1\\\", \\\"$2\\\"], \\\"$3\\\") ➞ 2\\n\\nmaximum_items([\\\"$10\\\", \\\"$7\\\", \\\"$2\\\", \\\"$60\\\"], \\\"$20\\\") ➞ 3\\n\\nmaximum_items([\\\"$15\\\", \\\"$5\\\", \\\"$30\\\", \\\"$30\\\", \\\"$10\\\"], \\\"$2\\\") ➞ \\\"Not enough funds!\\\"\\n```\\n\\n### Notes\\n- If you cannot afford anything, return `\\\"Not enough funds!\\\"`\\n- Prices will be whole numbers.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(maximum_items([\\\"$1\\\", \\\"$1\\\", \\\"$2\\\"], \\\"$3\\\"), 2)\\nTest.assert_equals(maximum_items([\\\"$10\\\", \\\"$7\\\", \\\"$2\\\", \\\"$60\\\"], \\\"$20\\\"), 3)\\nTest.assert_equals(maximum_items([\\\"$15\\\", \\\"$5\\\", \\\"$30\\\", \\\"$30\\\", \\\"$10\\\"], \\\"$2\\\"), \\\"Not enough funds!\\\")\\nTest.assert_equals(maximum_items([\\\"$99\\\", \\\"$8\\\"], \\\"$9\\\"), 1)\\nTest.assert_equals(maximum_items([\\\"$85\\\", \\\"$88\\\", \\\"$72\\\", \\\"$77\\\", \\\"$53\\\"], \\\"$56\\\"), 1)\\nTest.assert_equals(maximum_items([\\\"$12\\\", \\\"$2\\\", \\\"$49\\\", \\\"$21\\\", \\\"$76\\\", \\\"$64\\\"], \\\"$37\\\"), 3)\\nTest.assert_equals(maximum_items([\\\"$3\\\", \\\"$17\\\", \\\"$12\\\", \\\"$98\\\", \\\"$12\\\", \\\"$91\\\", \\\"$41\\\", \\\"$73\\\"], \\\"$116\\\"), 5)\\nTest.assert_equals(maximum_items([\\\"$18\\\", \\\"$16\\\", \\\"$32\\\", \\\"$30\\\", \\\"$43\\\", \\\"$80\\\", \\\"$13\\\"], \\\"$86\\\"), 4)\\nTest.assert_equals(maximum_items([\\\"$20\\\", \\\"$11\\\", \\\"$8\\\", \\\"$59\\\", \\\"$64\\\", \\\"$36\\\", \\\"$41\\\", \\\"$99\\\", \\\"$98\\\"], \\\"$357\\\"), 8)\\nTest.assert_equals(maximum_items([\\\"$12\\\", \\\"$98\\\", \\\"$56\\\", \\\"$88\\\"], \\\"$489\\\"), 4)\\nTest.assert_equals(maximum_items([\\\"$12\\\"], \\\"$26\\\"), 1)\\nTest.assert_equals(maximum_items([\\\"$65\\\", \\\"$78\\\", \\\"$78\\\", \\\"$61\\\", \\\"$51\\\", \\\"$91\\\", \\\"$76\\\", \\\"$27\\\", \\\"$85\\\", \\\"$70\\\"], \\\"$64\\\"), 1)\\nTest.assert_equals(maximum_items([\\\"$28\\\", \\\"$64\\\"], \\\"$404\\\"), 2)\\nTest.assert_equals(maximum_items([\\\"$69\\\"], \\\"$188\\\"), 1)\\nTest.assert_equals(maximum_items([\\\"$59\\\", \\\"$99\\\", \\\"$59\\\", \\\"$90\\\", \\\"$75\\\", \\\"$19\\\", \\\"$36\\\", \\\"$56\\\", \\\"$79\\\", \\\"$5\\\"], \\\"$74\\\"), 3)\\nTest.assert_equals(maximum_items([\\\"$73\\\", \\\"$7\\\", \\\"$75\\\", \\\"$33\\\", \\\"$7\\\", \\\"$95\\\", \\\"$11\\\"], \\\"$463\\\"), 7)\\nTest.assert_equals(maximum_items([\\\"$58\\\", \\\"$64\\\", \\\"$85\\\", \\\"$21\\\", \\\"$91\\\", \\\"$1\\\"], \\\"$333\\\"), 6)\\nTest.assert_equals(maximum_items([\\\"$89\\\", \\\"$7\\\", \\\"$27\\\"], \\\"$451\\\"), 3)\\nTest.assert_equals(maximum_items([\\\"$10\\\", \\\"$63\\\", \\\"$25\\\", \\\"$2\\\", \\\"$10\\\", \\\"$59\\\", \\\"$71\\\", \\\"$60\\\", \\\"$88\\\"], \\\"$129\\\"), 5)\\nTest.assert_equals(maximum_items([\\\"$23\\\", \\\"$82\\\", \\\"$75\\\", \\\"$17\\\", \\\"$67\\\", \\\"$67\\\", \\\"$95\\\", \\\"$48\\\", \\\"$15\\\"], \\\"$185\\\"), 5)\\nTest.assert_equals(maximum_items([\\\"$86\\\", \\\"$22\\\", \\\"$92\\\", \\\"$8\\\", \\\"$44\\\", \\\"$97\\\"], \\\"$102\\\"), 3)\\nTest.assert_equals(maximum_items([\\\"$16\\\"], \\\"$136\\\"), 1)\\nTest.assert_equals(maximum_items([\\\"$37\\\", \\\"$46\\\", \\\"$68\\\", \\\"$7\\\", \\\"$75\\\", \\\"$53\\\", \\\"$79\\\"], \\\"$20\\\"), 1)\\nTest.assert_equals(maximum_items([\\\"$71\\\", \\\"$36\\\", \\\"$5\\\", \\\"$56\\\", \\\"$33\\\", \\\"$66\\\", \\\"$91\\\", \\\"$49\\\"], \\\"$120\\\"), 3)\\nTest.assert_equals(maximum_items([\\\"$43\\\", \\\"$70\\\", \\\"$25\\\", \\\"$100\\\", \\\"$47\\\", \\\"$95\\\", \\\"$8\\\"], \\\"$66\\\"), 2)\\nTest.assert_equals(maximum_items([\\\"$70\\\", \\\"$11\\\", \\\"$87\\\", \\\"$65\\\", \\\"$6\\\", \\\"$9\\\", \\\"$63\\\", \\\"$55\\\", \\\"$90\\\", \\\"$95\\\"], \\\"$177\\\"), 5)\\nTest.assert_equals(maximum_items([\\\"$24\\\", \\\"$90\\\", \\\"$100\\\", \\\"$31\\\", \\\"$99\\\"], \\\"$287\\\"), 4)\\nTest.assert_equals(maximum_items([\\\"$34\\\", \\\"$62\\\", \\\"$62\\\", \\\"$98\\\", \\\"$100\\\"], \\\"$101\\\"), 2)\\nTest.assert_equals(maximum_items([\\\"$59\\\", \\\"$90\\\", \\\"$97\\\", \\\"$34\\\", \\\"$31\\\", \\\"$37\\\", \\\"$31\\\", \\\"$97\\\", \\\"$52\\\", \\\"$70\\\"], \\\"$224\\\"), 5)\\nTest.assert_equals(maximum_items([\\\"$29\\\", \\\"$71\\\", \\\"$23\\\", \\\"$27\\\", \\\"$46\\\", \\\"$33\\\"], \\\"$100\\\"), 3)\\nTest.assert_equals(maximum_items([\\\"$34\\\", \\\"$6\\\"], \\\"$263\\\"), 2)\\nTest.assert_equals(maximum_items([\\\"$36\\\", \\\"$34\\\", \\\"$74\\\", \\\"$90\\\", \\\"$14\\\", \\\"$21\\\", \\\"$96\\\", \\\"$24\\\", \\\"$67\\\"], \\\"$306\\\"), 7)\\nTest.assert_equals(maximum_items([\\\"$78\\\", \\\"$83\\\"], \\\"$239\\\"), 2)\\nTest.assert_equals(maximum_items([\\\"$6\\\", \\\"$8\\\", \\\"$67\\\", \\\"$64\\\"], \\\"$349\\\"), 4)\\nTest.assert_equals(maximum_items([\\\"$95\\\", \\\"$59\\\", \\\"$58\\\", \\\"$28\\\", \\\"$82\\\", \\\"$38\\\", \\\"$65\\\", \\\"$33\\\", \\\"$29\\\"], \\\"$247\\\"), 6)\\nTest.assert_equals(maximum_items([\\\"$57\\\", \\\"$97\\\", \\\"$47\\\", \\\"$91\\\", \\\"$70\\\", \\\"$78\\\"], \\\"$440\\\"), 6)\\nTest.assert_equals(maximum_items([\\\"$45\\\"], \\\"$319\\\"), 1)\\nTest.assert_equals(maximum_items([\\\"$5\\\", \\\"$89\\\", \\\"$78\\\", \\\"$73\\\", \\\"$44\\\", \\\"$93\\\", \\\"$57\\\", \\\"$80\\\"], \\\"$402\\\"), 6)\\nTest.assert_equals(maximum_items([\\\"$1\\\", \\\"$26\\\", \\\"$54\\\", \\\"$12\\\", \\\"$5\\\", \\\"$61\\\"], \\\"$47\\\"), 4)\\nTest.assert_equals(maximum_items([\\\"$16\\\", \\\"$50\\\"], \\\"$331\\\"), 2)\\nTest.assert_equals(maximum_items([\\\"$6\\\", \\\"$51\\\"], \\\"$88\\\"), 2)\\nTest.assert_equals(maximum_items([\\\"$74\\\", \\\"$91\\\"], \\\"$493\\\"), 2)\\nTest.assert_equals(maximum_items([\\\"$51\\\", \\\"$81\\\", \\\"$64\\\", \\\"$51\\\"], \\\"$47\\\"), \\\"Not enough funds!\\\")\\nTest.assert_equals(maximum_items([\\\"$32\\\", \\\"$60\\\", \\\"$12\\\", \\\"$93\\\", \\\"$82\\\"], \\\"$242\\\"), 4)\\nTest.assert_equals(maximum_items([\\\"$92\\\", \\\"$55\\\", \\\"$35\\\", \\\"$78\\\", \\\"$1\\\"], \\\"$421\\\"), 5)\\nTest.assert_equals(maximum_items([\\\"$46\\\", \\\"$41\\\", \\\"$47\\\", \\\"$52\\\", \\\"$99\\\", \\\"$62\\\", \\\"$50\\\", \\\"$62\\\", \\\"$65\\\", \\\"$38\\\"], \\\"$5\\\"), \\\"Not enough funds!\\\")\\nTest.assert_equals(maximum_items([\\\"$33\\\", \\\"$4\\\", \\\"$4\\\"], \\\"$475\\\"), 3)\\nTest.assert_equals(maximum_items([\\\"$78\\\", \\\"$11\\\", \\\"$37\\\", \\\"$95\\\", \\\"$60\\\", \\\"$11\\\", \\\"$53\\\", \\\"$58\\\", \\\"$97\\\"], \\\"$231\\\"), 6)\\nTest.assert_equals(maximum_items([\\\"$20\\\", \\\"$69\\\", \\\"$46\\\", \\\"$91\\\", \\\"$42\\\", \\\"$49\\\", \\\"$54\\\", \\\"$44\\\", \\\"$96\\\"], \\\"$476\\\"), 8)\\nTest.assert_equals(maximum_items([\\\"$60\\\", \\\"$42\\\", \\\"$93\\\", \\\"$47\\\", \\\"$67\\\"], \\\"$478\\\"), 5)\\nTest.assert_equals(maximum_items([\\\"$81\\\", \\\"$14\\\", \\\"$12\\\", \\\"$89\\\", \\\"$69\\\"], \\\"$377\\\"), 5)\\nTest.assert_equals(maximum_items([\\\"$16\\\", \\\"$67\\\", \\\"$76\\\", \\\"$78\\\", \\\"$72\\\", \\\"$19\\\"], \\\"$288\\\"), 5)\\nTest.assert_equals(maximum_items([\\\"$47\\\", \\\"$55\\\", \\\"$27\\\", \\\"$73\\\", \\\"$72\\\"], \\\"$461\\\"), 5)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,3,2,2,2,2,3,2,0,2,3,3,2,3,4,2,0,2,3,1,2,3,2,3,2,2,2,2,2,2,2,3,3,2,2,0,3,3,3,3,2,0,2,0,1,4,2,1,3,3,2,1,2,3,3,3,3,3,2,3,5,0,2,2,0,2,0,3,5,2,0,3,1],\"rators\":[\"PXAcsKkssS2yLyDv2\",\"8PwfYqoDQFThzNtvf\",\"tAF9Gf6PiGogbZuWs\",\"2fxapKr8XGdNeaKi2\",\"s5M5RvgqR9BhB9JoC\",\"C4QntmkYtB89GNtpd\",\"4CFzv558qbGcpQwc4\",\"23G9sGRYjvB4hTaLt\",\"Z85ajWfZ4jDPkbvR4\",\"WLFPvm65aHfgwQy7N\",\"Z4Wd4iFu5mdjSJDSA\",\"aCNWav8S8Try9RkC6\",\"8JyqsSbN2FJXPr3cw\",\"AasGs8AeX9Lcb9xJn\",\"S6Zd8mPuvhuh3MFRt\",\"mDWNyaaQ9hvPCRzSd\",\"9uZpgAtSuPZ7W7DL6\",\"w3A7cBWyAfukk6xEQ\",\"wZoxzQDbso9SMAPkY\",\"aEm3Wvj2rFYRL8Lrb\",\"ZNnsMeNkdDhHjSrZb\",\"PytNZK9mNiRiZxPrm\",\"NnQshxHiXS3EhZXpn\",\"kYWb8BwpKwunQkxeX\",\"nzqwymsdwC7gxAmip\",\"Yp7uvStL97cC9fKkY\",\"YRstQuthRkFeBiXug\",\"gSFJPsMXnqAog3Q9f\",\"9dgvEreRDYRiwLmYv\",\"gb9rvGus2Jv7bjZSs\",\"gJYuGdkXEWWmGRLzu\",\"HF28xZKSLM9wEuqNg\",\"a777e8chPvJkY3tKa\",\"NaPpyhnXZ2XLtug83\",\"4rwxLqLs2mNZNg8NB\",\"v9KtC8YLbMWmXiW2H\",\"DEDniTrstQYGounXT\",\"GSoEdG3NzkmwFHr9D\",\"n2BRY9X8899dcG8Bw\",\"iojEnnY9FsMfYzp6f\",\"ztDNuxZgtEMizcDoN\",\"tmPGWurf3Da8mhybw\",\"zZDaXBxMzTCBhNkgL\",\"HqmxnQJM66Y57twhn\",\"yjtdwc2AC4jA2RWtn\",\"DrkR35NqnP9NDLbq6\",\"Ecg4m7srYGgZsb4Ck\",\"cR3ibTMxLyEdDFCHY\",\"CwXsu25ygLEwQbmQC\",\"MKT7khMBGXzA22ykf\",\"KZ2xddpM2f9JRaryB\",\"6kz7jjJS8W4tikYQT\",\"hnyhBFWwNCz9mDfSi\",\"XjajdyybZZbkz8o5x\",\"8fZxjQfuXw5HMSRJM\",\"DPi9QGLctq2y76KuE\",\"xn7uGNKeAwPEkP9oA\",\"J5T8gZqiZXFuFDTQ7\",\"KJCDwGkoXh8qtbbKr\",\"J3upzLHuEwXH7Z2hx\",\"dkcmCKwqApX5jBggc\",\"CTKmXtrqDYqJBnuy8\",\"Q2TPP8bx8kBBjhz68\",\"QcfQ8wJhkmAgkLtZH\",\"Jqk2uJZZxEv5wZFze\",\"DQskEvAv5KiJDPtGF\",\"cAP3n5NY64uoMwzRR\",\"oBcs8GLX2ZFLXQy8y\",\"QRv96jmNaYsWkxQEG\",\"eHcgvkTGsH7ZziqBo\",\"qZQxPQ2kaNKAMesHT\",\"9rhsisf8ofHavG5aT\",\"PWgzeK859suojbrRx\",\"CHvzhtXnv8HTbPQ56\",\"GGdmhAvxXhqhhibJN\",\"LQxof8pGabGuWP7Gn\",\"MpfytGFYF77emJ3cT\",\"gKnWjDjwrJh7MK2df\",\"yod5YhKtPqw2GfG9B\",\"T6iBEE2jp7f7iEF2P\",\"buX4mCQhtXCfBjeno\",\"rfyEkETeoS96QNH4e\",\"2PufnQcsHsfymufX3\",\"yTtSCvGPyYna6JuRC\",\"JhX7jvtpwNyxcc39m\",\"8sNv5PTHa7XQ8bNqR\"],\"total\":95,\"quality\":[5,2,5,4,5,5,3,5,5,5,5,5,5]},\"flags\":0},\"summary\":\"On a vacation abroad, you see a souvenir shop and decide to head inside. There are snow globes, postcards, fridge magnets and all the other goodies you'd typically find.\\n\\nGiven a list of prices of things in the store and the amount of money you have, return the maximum number of items you could possibly buy.\\n\\nExamples\\nmaximum_items([\\\"$1\\\", \\\"$1\\\", \\\"$2\\\"], \\\"$3\\\") ➞\",\"tags\":[\"loops\",\"arrays\",\"algorithms\"],\"timestamp\":{\"$date\":1583439588815},\"title\":\"Souvenir Shop\",\"quality\":4.538461538461538,\"family\":[{\"_id\":\"HWEDMyddfkihb3PqZ\",\"language\":\"cpp\"},{\"_id\":\"KTrcDJkkW9inXesDy\",\"language\":\"javascript\"},{\"_id\":\"yCGJEcij4LaXLcKXE\",\"language\":\"python3\"},{\"_id\":\"2HwPe8umRksX8t4jx\",\"language\":\"ruby\"}]}}"]