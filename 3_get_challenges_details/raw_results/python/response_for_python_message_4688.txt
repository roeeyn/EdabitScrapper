a["{\"msg\":\"result\",\"id\":\"1063\",\"result\":{\"_id\":\"bRWLNW6MvsJWW2iQC\",\"author\":\"Alessandro Manicone\",\"authorId\":\"AasGs8AeX9Lcb9xJn\",\"code\":\"import re\\n\\nnothing = \\\"yourregularexpressionhere\\\"\\nanything = \\\"yourregularexpressionhere\\\"\\nsomething = \\\"yourregularexpressionhere\\\"\",\"difficulty\":1.553191489361702,\"familyId\":\"XW68v4Qh56Qh9pzKb\",\"instructions\":\"Write three **regular expressions:** one called \\\"nothing\\\" that will match only an empty string, one called \\\"anything\\\" that will match any string empty or not, and one called \\\"something\\\" that will match non-empty strings only.\\n\\n### Example\\n```\\ntxt1 = \\\"\\\"\\ntxt2 = \\\"This is not an empty string.\\\"\\n\\nnothing = \\\"yourregularexpressionhere\\\"\\nanything = \\\"yourregularexpressionhere\\\"\\nsomething = \\\"yourregularexpressionhere\\\"\\n\\nbool(re.match(nothing, txt1)) ➞ True\\nbool(re.match(nothing, txt2)) ➞ False\\nre.findall(nothing, txt1) ➞ [\\\"\\\"]\\nre.findall(nothing, txt2) ➞ []\\n\\nbool(re.match(anything, txt1)) ➞ True\\nbool(re.match(anything, txt2)) ➞ True\\nre.findall(anything, txt1) ➞ [\\\"\\\"]\\nre.findall(anything, txt2) ➞ [\\\"This is not an empty string.\\\"]\\n\\nbool(re.match(something, txt1)) ➞ False\\nbool(re.match(something, txt2)) ➞ True\\nre.findall(something, txt1) ➞ []\\nre.findall(something, txt2) ➞ [\\\"This is not an empty string.\\\"]\\n```\\n\\n### Notes\\n- You **don't** need to write a function, just the pattern.\\n- Do **not** remove `import re` from the code.\\n- Find more info on RegEx in **Resources**.\\n- You can find all the challenges of this series in my [Basic RegEx](https://edabit.com/collection/8PEq2azWDtAZWPFe2) collection.\",\"isHidden\":false,\"lab\":\"txt1 = ''\\ntxt2 = 'This is not an empty string.'\\n\\nTest.assert_equals(bool(re.match(nothing, txt1)), True)\\nTest.assert_equals(bool(re.match(nothing, txt2)), False)\\nTest.assert_equals(re.findall(nothing, txt1), [''])\\nTest.assert_equals(re.findall(nothing, txt2), [])\\n\\nTest.assert_equals(bool(re.match(anything, txt1)), True)\\nTest.assert_equals(bool(re.match(anything, txt2)), True)\\nTest.assert_equals(re.findall(anything, txt1), [''])\\nTest.assert_equals(re.findall(anything, txt2), ['This is not an empty string.'])\\n\\nTest.assert_equals(bool(re.match(something, txt1)), False)\\nTest.assert_equals(bool(re.match(something, txt2)), True)\\nTest.assert_equals(re.findall(something, txt1), [])\\nTest.assert_equals(re.findall(something, txt2), ['This is not an empty string.'])\\n\\n#Note from the original:\\n#Credits to https://javascript.info/regexp-anchors\\n\\n#Translated from JavaScript.\\n#The RegEx series was originally posted by Isaac Pak.\",\"language\":\"python3\",\"summary\":\"Write three regular expressions: one called \\\"nothing\\\" that will match only an empty string, one called \\\"anything\\\" that will match any string empty or not, and one called \\\"something\\\" that will match non-empty strings only.\\n\\nExample\\ntxt1 = \\\"\\\"\\ntxt2 = \\\"This is not an empty string.\\\"\\n\\nnothing = \\\"yourregularexpressionhere\\\"\\nanything = \\\"yourregularexpressionhere\\\"\\nsomet\",\"tags\":[\"regex\"],\"timestamp\":{\"$date\":1587869890413},\"title\":\"RegEx Exercise #0: Existentialism\",\"stats\":{\"completed\":{\"total\":99,\"ratings\":[1,1,1,1,1,1,2,0,1,1,2,2,0,1,0,0,2,3,5,2,2,1,2,1,1,2,2,2,2,0,1,1,4,0,2,1,2,0,0,2,3,1,2,2,2,1,5,2,2,2,3,1,3,1,1,1,0,0,2,1,2,2,2,3,2,1,2,2,2,3,2,2,0,2,2,2,2,2,1,0,2,2,1,2,0,2,1,2,2,2,0,2,2,0],\"rators\":[\"AasGs8AeX9Lcb9xJn\",\"aEm3Wvj2rFYRL8Lrb\",\"aRqQ42J5zqCmBNd8w\",\"2fxapKr8XGdNeaKi2\",\"vWgBJaEtcu3XoYuer\",\"nFjZ5BBDfW7E3gD6q\",\"XrqNzJ2FRG8HnGiR6\",\"Fk9kLwoG4Brf4KsKf\",\"tAF9Gf6PiGogbZuWs\",\"SzdT9nsTbXE4ahFsv\",\"XAwTiv7MEXnXZFf3S\",\"6RpWizr4Tf7cbfXqZ\",\"KKPxXDYAqem4tcuHH\",\"DEDniTrstQYGounXT\",\"23oi2a3vQwhtLEbSj\",\"8PwfYqoDQFThzNtvf\",\"KRmxvA4mWgfKvHmYN\",\"dHZqT6h4JMwk5fPC8\",\"HF28xZKSLM9wEuqNg\",\"8JyqsSbN2FJXPr3cw\",\"3dj5xLy9qXaDCF2CA\",\"Yp7uvStL97cC9fKkY\",\"jNvegJWCk5HCtEMbK\",\"YsAz93yZw8KKPupKv\",\"pWD2YC5s4YRCxFc2i\",\"gb9rvGus2Jv7bjZSs\",\"AF6LgdKhEdzwgRJom\",\"2rc86eoe88DLhFeJD\",\"ytceK4TxiCchoCLYC\",\"hnyhBFWwNCz9mDfSi\",\"Nua6T3dBurBy3Qfg9\",\"bDH2XR5bc4GxcwtBP\",\"586FdBhazpwJfnRYR\",\"ahk2qiXKJA753wAJk\",\"F2ykFxhDEEkj6N5KE\",\"9pzFiFK3ANLjQfnr2\",\"nfXGHENb5md7m355s\",\"8BFSTCnoe2QggN64c\",\"ySiDrAad7S23QsEN6\",\"FzxTj4GuujhwpZM7y\",\"2ptN2mhjFwFcHyPZd\",\"J5T8gZqiZXFuFDTQ7\",\"H4abACFDH5t8CnnyH\",\"zT9LpkiwYjLviYYW6\",\"Pe8vWpDHRuH9nSGKW\",\"iojEnnY9FsMfYzp6f\",\"Fi2J2wPjFvH6M4Gkt\",\"KZvaNQrXBFJ9bKLYx\",\"yjtdwc2AC4jA2RWtn\",\"PTDFuxAzou7W6asWt\",\"MCw7uAcoWcSTBTmr3\",\"DJdsqmTeAGDwrgYoZ\",\"HqmxnQJM66Y57twhn\",\"FEYpu9RWysAgW3XnP\",\"4597PD5mbXzHa3vdi\",\"oBcs8GLX2ZFLXQy8y\",\"pscBduNyf8TDHe2Km\",\"n2BRY9X8899dcG8Bw\",\"DYDJTyGgKFnBRLm2r\",\"8WpvgSbQciTQWdd8T\",\"hR7GMiqGap4CzEWSy\",\"8zQnyekbSwzhoJymu\",\"d8qtzoLB264iP8tdY\",\"tpxMgkGSHwBjS95Ta\",\"KLmLKaJPfsYxp42p2\",\"qD2LrwaDrSdiybLKY\",\"QRv96jmNaYsWkxQEG\",\"dYPkStFnLvAMsHSzZ\",\"J3upzLHuEwXH7Z2hx\",\"5XiuAqicKD4hBdu63\",\"DpnYcMphntjsQ96qg\",\"RGMbFMZXJr7DhcAJy\",\"zd9FLSzsGz3evKafy\",\"XeNskNoh5DcHuKTWX\",\"PXAcsKkssS2yLyDv2\",\"5S9nX4rKsnCcnv4Cz\",\"Jqk2uJZZxEv5wZFze\",\"GGdmhAvxXhqhhibJN\",\"CTKmXtrqDYqJBnuy8\",\"Ds7L5bksw2QRHjrKL\",\"XNmN6ztj36a7eChbD\",\"bvmTE46bfcM4ogj34\",\"82nyWEcznkx7ZA9ip\",\"o4ixjQGSaYqA2JoM4\",\"sbJcFfQjQ59Wfg4Cd\",\"eMuCpJ2spXWkJjWNz\",\"JKb5rhL6DKcCAypF9\",\"qzXAMXsHZGT8o5hTA\",\"BrTDhPJcACL2bsrpJ\",\"yod5YhKtPqw2GfG9B\",\"2PufnQcsHsfymufX3\",\"u5u2YpHXiNgzDNJdX\",\"4TmgHkn5vqyHK3sYC\",\"CHvzhtXnv8HTbPQ56\",\"4Lwjr34ypKNQNQCar\",\"X4rzfxGgxx6CS7Bpz\",\"5QN8R22z43SrwoHDz\"],\"quality\":[5,5,5,5,5,4,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"AasGs8AeX9Lcb9xJn\",\"quality\":4.875,\"family\":[{\"_id\":\"bAqxpvYmDuuvz4LQz\",\"language\":\"javascript\"},{\"_id\":\"bRWLNW6MvsJWW2iQC\",\"language\":\"python3\"}]}}"]