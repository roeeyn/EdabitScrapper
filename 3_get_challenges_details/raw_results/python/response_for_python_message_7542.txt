a["{\"msg\":\"result\",\"id\":\"2476\",\"result\":{\"_id\":\"dDuAF2pz5XceNcKt7\",\"author\":\"Evgeny SH\",\"authorId\":\"8PwfYqoDQFThzNtvf\",\"code\":\"user = \\\"\\\"\",\"difficulty\":4.75,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"6Pk3jKyYvu8wuEqd8\",\"instructions\":\"The bookstore from [this collection]( https://edabit.com/collection/dnXtkLPZpX25t227q) is adamant in using `eval()`, but made it difficult to access the dictionary of users to prevent copying. The dictionary `hacker911` holds the `user_name` and `password` for all users. The bookstore doesn't allow the string `user` to contain `h`, `k`, or a digit, hoping it will keep the dictionary inaccessible from the `eval()` procedure. The `get_user(user_name)` function returns entries for users which match a given username.\\n\\nCreate an _injection_ string `user` that copies the user's dictionary to `res`.\\n\\n### Examples\\n```\\nhacker911 = {\\n  \\\"u_DHQAIC\\\": \\\"pwd_AHGBLIXIO\\\",\\n  \\\"u_BEOUROGP\\\": \\\"pwd_GQGWVE\\\",\\n  \\\"u_RPZSQBT\\\": \\\"pwd_EFLT\\\",\\n  \\\"u_DABRZJRIV\\\": \\\"pwd_EHZUQBW\\\",\\n  \\\"u_JVGQJC\\\": \\\"pwd_NQFXBQ\\\",\\n  \\\"u_RVUUIB\\\": \\\"pwd_JNKBLTHEC\\\"\\n}\\n\\ndef get_user(s):\\n    if s in hacker911:\\n        return {s: hacker911[s]}\\n    return dict()\\n\\nres = eval(\\\"get_user(\\\\\\\"{}\\\\\\\")\\\".format(user))\\n\\nprint(res) âžž hacker911\\n```\\n\\n### Notes\\n- The dictionary `hacker911` is randomly generated per test iteration.\\n- Create a string, not a function.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"import re\\nfrom random import randint, seed\\nimport time\\n\\ntic = time.perf_counter()\\nfor t in range(10):\\n    seed()\\n    \\\"\\\"\\\"make a dictionary of random users\\\"\\\"\\\"\\n    hacker911 = {'u_' + ''.join(chr(randint(65, 90))\\n                                for _ in range(randint(3, 9))):\\n                 'pwd_' + ''.join(chr(randint(65, 90))\\n                                  for _ in range(randint(3, 9)))\\n                 for _ in range(randint(3, 9))}\\n\\n    \\\"\\\"\\\"define utility function\\\"\\\"\\\"\\n    def get_user(s):\\n        if s in hacker911:\\n            return {s: hacker911[s]}\\n        return dict()\\n\\n    \\\"\\\"\\\"check that the restricted characters are not used\\\"\\\"\\\"\\n    if (bool(re.findall('h', user, flags=re.MULTILINE)) or\\n        bool(re.findall('k', user, flags=re.MULTILINE)) or\\n            bool(re.findall(r'\\\\d', user, flags=re.MULTILINE))):\\n        print('\\\"h\\\", \\\"k\\\" or digits are not allowed in the \\\"user\\\" string')\\n        Test.assert_equals(True, False)\\n    else:\\n        \\\"\\\"\\\"Entry point for the Injection string\\\"\\\"\\\"\\n        res = eval(\\\"get_user(\\\\\\\"{}\\\\\\\")\\\".format(user))\\n\\n        if type(res) == dict and len(res) == len(hacker911):\\n            Test.assert_equals(res, hacker911)\\n        else:\\n            print('\\\"res\\\" is not a dictionary of the required length')\\n            Test.assert_equals(True, False)\\n\\nprint('Runtime(sec) = {:.6f}'.format(time.perf_counter() - tic))\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[5,5,5,5,5,5,5,4,3,5,5,5],\"rators\":[\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\",\"53HB4PyQgYTpBpsnX\",\"wNc5vZ22fiYCgnwxe\",\"eHcgvkTGsH7ZziqBo\",\"foytX6kH9wiSYqLtT\",\"KwcTj3nfN7fKuzPt7\"],\"total\":7,\"quality\":[]},\"flags\":0},\"summary\":\"The bookstore from this collection is adamant in using eval(), but made it difficult to access the dictionary of users to prevent copying. The dictionary hacker911 holds the username and password for all users. The bookstore doesn't allow the string user to contain h, k, or a digit, hoping it will keep the dictionary inaccessible from the eval() procedure. The\",\"tags\":[\"data_structures\",\"logic\",\"strings\"],\"timestamp\":{\"$date\":1595462542284},\"title\":\"Injection VI: Characters Restriction\",\"quality\":0,\"family\":[{\"_id\":\"dDuAF2pz5XceNcKt7\",\"language\":\"python3\"}]}}"]