a["{\"msg\":\"result\",\"id\":\"2262\",\"result\":{\"_id\":\"38SP9cjt6BfRbLowA\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"def double_dot(d1, d2):\\n\\t\",\"difficulty\":3.5384615384615383,\"familyId\":\"cQ9TqBnFSRcebAqiJ\",\"instructions\":\"In this challenge, you'll write a function that calculates the [double dot product](https://en.wikipedia.org/wiki/Dyadics#Product_of_dyadic_and_dyadic) of a pair of [dyadics](https://en.wikipedia.org/wiki/Dyadics). What's a dyadic? And what's the double dot product?\\n\\nFirst, let's talk about (Euclidean) vectors. A vector is a geometric object. Its existence doesn't depend on the choice of the coordinate system, or indeed on choosing a coordinate system at all!\\n\\nBut coordinate systems are useful, and in particular, it's often convenient to represent a vector as a matrix of its Cartesian components, either a single column or a single row. We'll use the notation \\\\[**v**\\\\] to indicate the column-matrix representation of a vector **v** (called a column-vector). To indicate its row-matrix representation (called a row-vector), we'll use the [transpose](https://en.wikipedia.org/wiki/Transpose) and write \\\\[**v**\\\\]ᵀ.\\n\\n(We'll work only in three-dimensional space, so each vector has three Cartesian components: x, y, and z.)\\n\\nIf we [matrix-multiply](https://en.wikipedia.org/wiki/Matrix_multiplication) a row-vector with a column-vector (in that order), the result is a 1-by-1 matrix whose single element is the [dot product](https://en.wikipedia.org/wiki/Dot_product) of the two vectors:\\n\\n```\\na • b = Tr([a]ᵀ[b])\\n```\\n\\n(where we've used the [trace](https://en.wikipedia.org/wiki/Trace_(linear_algebra))). Note that the dot product is commutative (i.e., **a** • **b** = **b** • **a**).\\n\\nIf we matrix-multiply in the _opposite_ order (column-vector first), the result is a 3-by-3, the matrix representation of a geometric object called a dyad. To notate the dyad formed by vectors **a** and **b**, we'll write **ab**, and we'll notate its matrix-representation \\\\[**ab**\\\\]. So:\\n\\n```\\n[ab] = [a][b]ᵀ\\n```\\n\\nNote that unlike the dot product, the dyadic product is not commutative, and in fact:\\n\\n```\\n[ab] = [ba]ᵀ\\n```\\n\\n_Now_ we can talk about dyadics. Dyadics are dyads and _sums of dyads_. Every dyadic can be represented as a square-matrix of its 9 components. For example, the dyadic (**ab** + **cd**):\\n\\n```\\n[ab + cd] = [ab] + [cd] = [a][b]ᵀ + [c][d]ᵀ\\n```\\n\\nThe double dot product of a pair of dyadics is an operation that outputs a scalar (a number). For a pair of _dyads_, it's defined like this:\\n\\n```\\n(ab):(cd) = (a • c)(b • d)\\n```\\n\\nThis definition can be extended to arbitrary _dyadics_ by putting the dyadics in sum-of-dyads form and distributing:\\n\\n```\\n(ab + cd):(ef + gh) = (ab):(ef) + (ab):(gh) + (cd):(ef) + (cd):(gh)\\n```\\n\\nYour task is to write a function that takes as parameters the 3-by-3 matrix-representations of a pair of dyadics (each will be a two-dimensional list with numbers for elements) and returns their double dot product (as a number).\\n\\nThe hard part here isn't the coding so much as it is coming up with a matrix-representation of the double dot product that works for arbitrary dyadics. (You might be able to arrive at the answer by trial and error, but try to work it out mathematically!) If you're stuck, see the **Comments** for a hint.\\n\\n### Examples\\n\\n```\\ndouble_dot(\\n  [\\n    [265, -385, -115],\\n    [-741, -148, 916],\\n    [235, -410, 433]\\n  ],\\n  [\\n    [440, -359, 453],\\n    [-453, -254, 169],\\n    [-314, 403, -331]\\n  ]\\n) ➞ 348446\\n```\\n\\n```\\ndouble_dot(\\n  [\\n    [709, -422, 612],\\n    [761, 495, 852],\\n    [-473, 614, 443]\\n  ],\\n  [\\n    [-305, 345, 858],\\n    [931, -747, -422],\\n    [855, -156, 109]\\n  ]\\n) ➞ -309469\\n```\\n\\n```\\ndouble_dot(\\n  [\\n    [-545, -641, -533],\\n    [130, 871, 699],\\n    [712, -375, 164]\\n  ],\\n  [\\n    [157, -647, -631],\\n    [381, -956, -223],\\n    [878, -589, -155]\\n  ]\\n) ➞ 547053\\n```\\n\\n### Notes\\n\\n- There's a second species of double dot product, which for dyads is defined like this:\\n\\n```\\n(ab) • • (cd) = (a • d)(b • c)\\n```\\n\\n- Dyadics aren't used very often these days. In the more powerful framework of tensor analysis, dyadics are contravariant rank-2 tensors, the dyadic product is a special case of the tensor product, and both species of double dot product are tensor contractions (as is the normal dot product between vectors, by the way).\",\"isFlagged\":false,\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(double_dot(\\n\\t[\\n\\t\\t[265, -385, -115],\\n\\t\\t[-741, -148, 916],\\n\\t\\t[235, -410, 433]\\n\\t],\\n\\t[\\n\\t\\t[440, -359, 453],\\n\\t\\t[-453, -254, 169],\\n\\t\\t[-314, 403, -331]\\n\\t]\\n), 348446)\\n\\nTest.assert_equals(double_dot(\\n\\t[\\n\\t\\t[709, -422, 612],\\n\\t\\t[761, 495, 852],\\n\\t\\t[-473, 614, 443]\\n\\t],\\n\\t[\\n\\t\\t[-305, 345, 858],\\n\\t\\t[931, -747, -422],\\n\\t\\t[855, -156, 109]\\n\\t]\\n), -309469)\\n\\nTest.assert_equals(double_dot(\\n\\t[\\n\\t\\t[-545, -641, -533],\\n\\t\\t[130, 871, 699],\\n\\t\\t[712, -375, 164]\\n\\t],\\n\\t[\\n\\t\\t[157, -647, -631],\\n\\t\\t[381, -956, -223],\\n\\t\\t[878, -589, -155]\\n\\t]\\n), 547053)\",\"language\":\"python3\",\"quality\":0,\"summary\":\"In this challenge, you'll write a function that calculates the double dot product of a pair of dyadics. What's a dyadic? And what's the double dot product?\\n\\nFirst, let's talk about (Euclidean) vectors. A vector is a geometric object. Its existence doesn't depend on the choice of the coordinate system, or indeed on choosing a coordinate system at all!\\n\\nBut coor\",\"tags\":[\"algebra\",\"arrays\",\"geometry\",\"math\"],\"timestamp\":{\"$date\":1604347339811},\"title\":\"Double Dot Product\",\"stats\":{\"completed\":{\"total\":9,\"ratings\":[4,4,4,4,4,5,2,2,0,5,5,2,5],\"quality\":[],\"rators\":[\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\",\"yjtdwc2AC4jA2RWtn\",\"T6iBEE2jp7f7iEF2P\",\"sFMXNMFryYLjHsjYj\",\"iS5BrkGLzJyPK7nKt\",\"J23RcmzbdtBbPCTjT\",\"gJYuGdkXEWWmGRLzu\"]},\"flags\":0},\"editorId\":\"BkPgkDQGHm66X4Qai\",\"family\":[{\"_id\":\"yf6Wp6zw2n2qDNtx4\",\"language\":\"cpp\"},{\"_id\":\"zuEnZDWgwe4tToavm\",\"language\":\"javascript\"},{\"_id\":\"38SP9cjt6BfRbLowA\",\"language\":\"python3\"},{\"_id\":\"b99RnwaHkv5Zazie6\",\"language\":\"ruby\"}]}}"]