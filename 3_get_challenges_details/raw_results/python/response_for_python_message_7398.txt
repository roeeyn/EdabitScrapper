a["{\"msg\":\"result\",\"id\":\"2405\",\"result\":{\"_id\":\"3oyGFABKKpk2XMhMN\",\"author\":\"Masked\",\"authorId\":\"S6Zd8mPuvhuh3MFRt\",\"code\":\"def area(shapes)\\n\\t\",\"difficulty\":4.066666666666666,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"PbkW7dJiW9Zaz2iTi\",\"instructions\":\"Ben draws shape(s) with 1s in a list of lists. Ben wants to calculate the area of the shape(s) he has drawn. However, his shapes are not always a valid shape. A valid shape should be enclosed.\\n\\nIf the shape is not enclosed (invalid), it would have an area of 0. If the shape is just a dot (a single '1' is enclosed on a point), it would be an infinitely small point with 0 area. Assume there will not be shapes inside of shapes.\\n\\n_\\\\*More about enclosed and closed shapes in the **Notes** below._\\n\\n### Enclosed Shape\\n```\\narea([\\n  [0, 0, 0, 0, 0, 0, 0],\\n  [0, 1, 1, 1, 1, 1, 0],\\n  [0, 1, 0, 0, 0, 1, 0],\\n  [0, 1, 1, 1, 1, 1, 0],\\n  [0, 0, 0, 0, 0, 0, 0]\\n]) ➞ 3\\n\\n\\narea([\\n  [0, 0, 1, 0, 1, 0, 0],\\n  [0, 1, 0, 1, 0, 1, 0],\\n  [0, 1, 0, 0, 0, 1, 0],\\n  [0, 0, 1, 0, 1, 0, 0],\\n  [0, 0, 0, 1, 0, 0, 0]\\n]) ➞ 6\\n\\n# Diagonals can be traced as well.\\n```\\n\\n### Invalid Shape(s)\\n```\\narea([\\n  [0, 0, 0, 0, 0, 0, 0],\\n  [0, 0, 0, 0, 0, 0, 0],\\n  [0, 0, 1, 1, 1, 0, 0],\\n  [0, 0, 0, 0, 0, 0, 0],\\n  [0, 0, 0, 0, 0, 0, 0]\\n]) ➞ 0\\n\\n\\narea([\\n  [0, 0, 0, 0, 0, 0, 0],\\n  [0, 0, 0, 0, 1, 0, 0],\\n  [0, 0, 1, 1, 1, 0, 0],\\n  [0, 0, 1, 0, 0, 0, 0],\\n  [0, 0, 0, 0, 0, 0, 0]\\n]) ➞ 0\\n\\n\\narea([\\n  [0, 0, 0, 0, 0, 0, 0],\\n  [0, 1, 1, 0, 1, 1, 0],\\n  [0, 0, 1, 0, 1, 0, 0],\\n  [0, 1, 1, 0, 1, 1, 0],\\n  [0, 0, 0, 0, 0, 0, 0]\\n]) ➞ 0\\n\\n# Doesn't really matter that there are more than\\n# one invalid shapes; they all have zero area anyway.\\n```\\n\\n### More Than One Valid Shape\\n```\\narea([\\n  [1, 1, 1, 0, 1, 1, 1],\\n  [1, 0, 1, 0, 1, 0, 1],\\n  [1, 0, 1, 0, 1, 0, 1],\\n  [1, 0, 1, 0, 1, 0, 1],\\n  [1, 1, 1, 0, 1, 1, 1]\\n]) ➞ 6\\n\\n# Two shapes.\\n\\n\\narea([\\n  [1, 1, 1, 0, 1, 1, 1],\\n  [1, 0, 1, 0, 1, 0, 1],\\n  [1, 1, 1, 0, 1, 1, 1],\\n  [0, 0, 0, 0, 0, 0, 0],\\n  [1, 1, 1, 0, 1, 1, 1],\\n  [1, 0, 1, 1, 0, 0, 1],\\n  [1, 0, 0, 0, 0, 0, 1],\\n  [1, 1, 1, 1, 1, 1, 1]\\n]) ➞ 10\\n\\n# Three shapes, diagonals can be traced.\\n```\\n\\n### A Mix of Enclosed and Invalid Shape(s)\\n```\\narea([\\n  [0, 0, 0, 0, 0, 0, 0],\\n  [1, 1, 1, 0, 1, 1, 1],\\n  [1, 0, 1, 0, 0, 0, 0],\\n  [1, 0, 1, 0, 1, 1, 0],\\n  [1, 1, 1, 0, 0, 1, 1]\\n]) ➞ 2\\n\\n# Invalid shapes count as zero area.\\n```\\n\\n### Lines Protruding from a Valid Shape\\n```\\narea([\\n  [1, 0, 0, 1, 0, 0, 1],\\n  [0, 1, 0, 1, 0, 1, 0],\\n  [0, 0, 1, 1, 1, 0, 0],\\n  [1, 1, 1, 0, 1, 1, 1],\\n  [0, 0, 1, 1, 1, 0, 0],\\n  [0, 1, 0, 1, 0, 1, 0],\\n  [1, 0, 0, 1, 0, 0, 1]\\n]) ➞ 1\\n\\n# We can see there is an enclosed shape in the center.\\n```\\n\\nYou could think about this in two ways:\\n- The protrusions are not part of the perimeter of the shape, neither are they enclosed, so they are Invalid shapes and have an area of 0.\\n- The protrusions are part of the shape, but since they are single lines, hence they have an area of 0.\\n\\n### Joint Shapes\\n```\\narea([\\n  [1, 1, 1, 1, 1, 1, 1],\\n  [1, 0, 0, 1, 0, 0, 1],\\n  [1, 0, 0, 1, 0, 0, 1],\\n  [1, 0, 0, 1, 0, 0, 1],\\n  [1, 1, 1, 1, 1, 1, 1]\\n]) ➞ 12\\n\\n# Even though they share parts of their parameters,\\n# they are still enclosed as you can trace each shape\\n# without any interruptions.\\n```\\n\\n### Shapes Joint by Protrusion/Line\\n```\\narea([\\n  [1, 1, 1, 0, 1, 1, 1],\\n  [1, 0, 1, 1, 1, 0, 1],\\n  [1, 1, 1, 0, 1, 1, 1]\\n]) ➞ 2\\n\\n# The joint doesn't really affect the validity of the\\n# two shapes on the left and right side, neither does\\n# it have any area.\\n```\\n\\n### Notes\\nIf a shape is enclosed, you can (imaging) taking a pencil and tracing it all the way around back to where you started, without running into any breaks. If there is a break in the shape, or you did not manage to get back to where you started without backtracking, that means it is not enclosed. For this test, you can trace across diagonal 1s, which means they are connected.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"#Case 1: 1 enclosed shape\\nTest.assert_equals(area([[0,0,0,0,0,0,0],\\n\\t\\t\\t\\t\\t\\t            [0,1,1,1,1,1,0],\\n                        [0,1,0,0,0,1,0],\\n                        [0,1,1,1,1,1,0],\\n                        [0,0,0,0,0,0,0]]), 3)\\n\\t\\t\\t\\t\\t\\nTest.assert_equals(area([[0,0,0,0,0,0,0],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  [0,1,1,1,1,0,0],\\n            \\t\\t\\t\\t\\t  [0,1,0,0,1,0,0],\\n            \\t\\t\\t\\t\\t  [0,1,1,1,1,0,0],\\n           \\t\\t\\t\\t\\t    [0,0,0,0,0,0,0]]), 2)\\n\\nTest.assert_equals(area([[0,0,0,0,0,0,0],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  [0,1,0,0,0,0,0],\\n            \\t\\t\\t\\t\\t  [0,0,0,1,0,0,0],\\n            \\t\\t\\t\\t\\t  [0,0,0,0,0,0,0],\\n            \\t\\t\\t\\t\\t  [0,0,0,0,1,0,0]]), 0) #0 area shapes scattered across without connecting\\n\\t\\t\\t\\t\\t\\nTest.assert_equals(area([[1,1,1,1,1,1,1],\\n                \\t\\t\\t   [1,0,0,0,0,0,1],\\n                \\t\\t\\t   [1,0,0,0,0,0,1],\\n                \\t\\t\\t   [1,0,0,0,0,0,1],\\n                \\t\\t\\t   [1,1,1,1,1,1,1]]), 15)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t \\nTest.assert_equals(area([[0,0,1,0,1,0,0],\\n               \\t\\t\\t    [0,1,0,1,0,1,0],\\n               \\t\\t\\t    [0,1,0,0,0,1,0],\\n               \\t\\t\\t    [0,0,1,0,1,0,0],\\n               \\t\\t\\t    [0,0,0,1,0,0,0]]), 6)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n#Case 2: Invalid shape(s)\\nTest.assert_equals(area([[0,0,0,0,0,0,0],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  [0,0,0,0,0,0,0],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  [0,0,1,1,1,0,0],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  [0,0,0,0,0,0,0],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  [0,0,0,0,0,0,0]]), 0 )\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\nTest.assert_equals(area([[0,0,0,0,0,0,0],\\n              \\t\\t\\t\\t  [0,0,0,0,1,0,0],\\n              \\t\\t\\t\\t  [0,0,1,1,1,0,0],\\n              \\t\\t\\t\\t  [0,0,1,0,0,0,0],\\n              \\t\\t\\t\\t  [0,0,0,0,0,0,0]]), 0)\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\nTest.assert_equals(area([[0,0,0,0,0,0,0],\\n               \\t\\t\\t\\t  [0,0,1,0,1,0,0],\\n               \\t\\t\\t\\t  [0,0,1,1,1,0,0],\\n               \\t\\t\\t\\t  [0,0,0,0,0,0,0],\\n               \\t\\t\\t\\t  [0,0,0,0,0,0,0]]), 0)\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\nTest.assert_equals(area([[0,0,0,0,0,1,1],\\n                \\t\\t\\t   [0,0,0,0,1,0,1],\\n                \\t\\t\\t   [1,0,0,1,0,0,1],\\n                \\t\\t\\t   [1,0,1,0,0,0,0],\\n                \\t\\t\\t   [1,1,0,0,0,0,0]]), 0)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\nTest.assert_equals(area([[1,1,1,1,1,1,0],\\n               \\t\\t\\t    [1,0,0,0,0,0,0],\\n               \\t\\t\\t    [1,0,0,0,0,0,1],\\n               \\t\\t\\t    [1,0,0,0,0,0,1],\\n               \\t\\t\\t    [1,1,1,1,1,1,1]]), 0)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\nTest.assert_equals(area([[0,0,0,0,0,0,0],\\n               \\t\\t\\t\\t  [0,1,1,0,1,1,0],\\n               \\t\\t\\t\\t  [0,0,1,0,1,0,0],\\n               \\t\\t\\t\\t  [0,1,1,0,1,1,0],\\n               \\t\\t\\t\\t  [0,0,0,0,0,0,0]]), 0)\\t\\n\\n#Case 3: More than 1 valid shape\\n\\nTest.assert_equals(area([[1,1,1,0,1,1,1],\\n               \\t\\t\\t    [1,0,1,0,1,0,1],\\n               \\t\\t\\t    [1,0,1,0,1,0,1],\\n               \\t\\t\\t    [1,0,1,0,1,0,1],\\n               \\t\\t\\t    [1,1,1,0,1,1,1]]), 6)\\n\\t\\t\\t\\t\\t\\t\\t\\nTest.assert_equals(area([[1,1,1,0,1,1,1],\\n               \\t\\t\\t    [1,0,1,0,1,0,1],\\n               \\t\\t\\t    [1,1,1,0,1,1,1],\\n               \\t\\t\\t    [0,0,0,0,0,0,0],\\n               \\t\\t\\t    [1,1,1,0,1,1,1],\\n               \\t\\t\\t    [1,0,1,1,0,0,1],\\n               \\t\\t\\t    [1,0,0,0,0,0,1],\\n             \\t\\t\\t      [1,1,1,1,1,1,1]]), 10)\\n\\t\\t\\t\\t\\t\\t\\t\\n#Case 4: A mix of Enclosed and Invalid shape(s)\\nTest.assert_equals(area([[1,1,1,0,1,1,1],\\n               \\t\\t\\t\\t  [1,0,1,0,1,0,1],\\n               \\t\\t\\t\\t  [1,1,1,0,1,1,1],\\n               \\t\\t\\t\\t  [0,0,0,0,0,0,0],\\n               \\t\\t\\t\\t  [1,1,1,0,1,1,1]]), 2)\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n#Case 5:  Lines protruding from a valid shape\\nTest.assert_equals(area([[1,0,0,1,0,0,1],\\n               \\t\\t\\t\\t  [0,1,0,1,0,1,0],\\n             \\t\\t\\t\\t    [0,0,1,1,1,0,0],\\n          \\t\\t\\t\\t      [1,1,1,0,1,1,1],\\n          \\t\\t\\t\\t      [0,0,1,1,1,0,0],\\n          \\t\\t\\t\\t      [0,1,0,1,0,1,0],\\n            \\t\\t\\t      [1,0,0,1,0,0,1]]), 1)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\nTest.assert_equals(area([[0,0,0,0,0,0,0],\\n               \\t\\t\\t\\t  [0,1,1,1,1,1,0],\\n             \\t\\t\\t\\t    [0,1,0,0,0,1,0],\\n          \\t\\t\\t\\t      [0,1,1,1,1,1,0],\\n          \\t\\t\\t\\t      [0,0,1,0,0,0,0],\\n          \\t\\t\\t\\t      [0,0,1,1,1,1,0],\\n            \\t\\t\\t      [0,0,0,0,0,1,0]]), 3)\\n#Case 6: Joint shapes\\nTest.assert_equals(area([[1,1,1,1,1,1,1],\\n               \\t        [1,0,0,1,0,0,1],\\n               \\t        [1,0,0,1,0,0,1],\\n              \\t        [1,0,0,1,0,0,1],\\n             \\t          [1,1,1,1,1,1,1]]), 12)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t \\nTest.assert_equals(area([[1,1,1,1,1,1,1],\\n               \\t        [1,0,0,0,0,0,1],\\n               \\t        [1,1,1,1,1,1,1],\\n              \\t        [1,0,0,0,0,0,1],\\n             \\t          [1,1,1,1,1,1,1]]), 10)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t \\n#Case 7: Shapes joint by protrusion/line\\n\\nTest.assert_equals(area([[1,1,1,0,1,1,1],\\n                        [1,0,1,1,1,0,1],\\n                        [1,1,1,0,1,1,1]]), 2)\\n\\nTest.assert_equals(area([[1,1,1,1,0,0,0,0,0,0,0],\\n                        [1,0,0,1,0,0,0,0,0,0,0],\\n                        [1,0,0,1,0,0,0,0,0,0,0],\\n                        [1,1,1,1,0,0,0,0,0,0,0],\\n                        [0,0,0,0,1,1,1,0,0,0,0],\\n                        [0,0,0,0,0,0,0,1,1,1,1],\\n                        [0,0,0,0,0,0,0,1,0,0,1],\\n                        [0,0,0,0,0,0,0,1,0,0,1],\\n                        [0,0,0,0,0,0,0,1,1,1,1]]), 8)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n#Final \\nTest.assert_equals(area([[1,1,1,1,1,1,0,0,1,1,1],\\n                        [1,0,1,0,0,1,1,1,1,0,1],\\n                        [1,1,1,1,1,1,0,0,1,1,1],\\n                        [0,0,0,0,0,0,0,0,0,1,0],\\n                        [0,1,0,0,1,0,0,0,0,1,0],\\n                        [1,0,1,0,1,0,0,0,1,1,1],\\n                        [1,0,1,0,1,1,1,0,1,0,1],\\n                        [0,1,0,0,0,0,0,0,1,1,1],\\n                        [0,1,1,1,1,1,1,0,0,0,0]]), 7)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[4,4,4,4,4,5,2,5,5,5,5,5,2,2,5],\"rators\":[\"aEm3Wvj2rFYRL8Lrb\",\"LP9R3NfPdHviZb4Wz\",\"8PwfYqoDQFThzNtvf\",\"mDWNyaaQ9hvPCRzSd\",\"xn7uGNKeAwPEkP9oA\",\"s5M5RvgqR9BhB9JoC\",\"iS5BrkGLzJyPK7nKt\",\"yjtdwc2AC4jA2RWtn\",\"8sNv5PTHa7XQ8bNqR\",\"gJYuGdkXEWWmGRLzu\"],\"total\":10,\"quality\":[]},\"flags\":0},\"summary\":\"Ben draws shape(s) with 1s in a list of lists. Ben wants to calculate the area of the shape(s) he has drawn. However, his shapes are not always a valid shape. A valid shape should be enclosed.\\n\\nIf the shape is not enclosed (invalid), it would have an area of 0. If the shape is just a dot (a single '1' is enclosed on a point), it would be an infinitely small po\",\"tags\":[\"algorithms\",\"arrays\",\"numbers\"],\"timestamp\":{\"$date\":1587054035351},\"title\":\"Area of a List\",\"quality\":0,\"family\":[{\"_id\":\"vWt3YC5KhzCZS74hE\",\"language\":\"cpp\"},{\"_id\":\"o2C3oyJPE6K2QNYuz\",\"language\":\"javascript\"},{\"_id\":\"3oyGFABKKpk2XMhMN\",\"language\":\"python3\"},{\"_id\":\"eszwtFGrxYxZowv5Z\",\"language\":\"ruby\"}]}}"]