a["{\"msg\":\"result\",\"id\":\"1378\",\"result\":{\"_id\":\"E9FwvGyad5CDbiH4C\",\"author\":\"Gowrav\",\"authorId\":\"44dAzThMuyGZ5StXB\",\"code\":\"def block(lst):\\n\\t\",\"difficulty\":2.0336538461538463,\"editorId\":\"44dAzThMuyGZ5StXB\",\"familyId\":\"PB4awcxKxJhi86H95\",\"instructions\":\"Create a function that takes a 2D array as an argument and returns the number of people whose view is blocked by a tall person. The concert stage is pointed towards the top of the 2D array and the tall person (represented by a 2) blocks the view of all the people (represented by a 1) behind them.\\n\\n### Examples\\n```\\nblock([\\n  [1, 1, 1, 1, 1],\\n  [1, 1, 1, 1, 1],\\n  [1, 1, 1, 1, 2],\\n  [1, 1, 1, 1, 1],\\n  [1, 1, 1, 1, 1]\\n]) ➞ 2\\n\\n# The tall person blocks 2 people behind him thus\\n# the function returns 2.\\n\\n\\nblock([\\n  [1, 2, 1, 1],\\n  [1, 1, 1, 2],\\n  [1, 1, 1, 1],\\n  [1, 1, 1, 1],\\n]) ➞ 5\\n\\n# There are 2 tall people that block everyone behind\\n# them. The first tall person in the first row blocks 3\\n# people behind him while the second tall person in\\n# the second row blocks 2 people behind him thus the\\n# function returns 5.\\n\\n\\nblock([\\n  [1, 1, 1, 1],\\n  [2, 1, 1, 2],\\n  [1, 1, 1, 1],\\n  [1, 1, 1, 1],\\n]) ➞ 4\\n```\\n\\n### Notes\\n1. There is only a maximum of 1 tall person in every column.\\n2. No view is blocked if the tall person is in the last row.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(block([\\n  [1, 1, 1, 1, 1], \\n  [1, 1, 1, 1, 1], \\n  [1, 1, 1, 1, 2], \\n  [1, 1, 1, 1, 1], \\n  [1, 1, 1, 1, 1]\\n]), 2)\\n\\nTest.assert_equals(block([\\n  [1, 2, 1, 1], \\n  [1, 1, 1, 2], \\n  [1, 1, 1, 1], \\n  [1, 1, 1, 1], \\n]), 5)\\n\\nTest.assert_equals(block([\\n  [1, 1, 1, 1], \\n  [2, 1, 1, 2], \\n  [1, 1, 1, 1], \\n  [1, 1, 1, 1], \\n]), 4)\\n\\nTest.assert_equals(block([\\n  [1, 1, 1, 1], \\n  [2, 1, 1, 2], \\n  [1, 1, 1, 1], \\n  [1, 1, 2, 1], \\n\\t[1, 1, 1, 1], \\n\\t[1, 1, 1, 1]\\n]), 10)\\n\\nTest.assert_equals(block([\\n  [1, 2, 1, 1], \\n  [2, 1, 1, 2]\\n]), 1)\\n\\nTest.assert_equals(block([\\n  [1, 1, 1, 1, 1, 1, 2], \\n  [1, 1, 1, 1, 1, 1, 1], \\n\\t[1, 2, 1, 2, 1, 1, 1]\\n]), 2)\\n\\nTest.assert_equals(block([\\n  [1, 1, 1, 1, 1, 1, 1], \\n  [1, 1, 1, 1, 1, 1, 1], \\n\\t[1, 1, 1, 1, 1, 1, 1], \\n\\t[1, 1, 1, 1, 1, 1, 1], \\n\\t[1, 2, 1, 2, 1, 2, 1]\\n]), 0)\\n\\nTest.assert_equals(block([\\n  [1, 2, 1, 1, 1, 2, 1], \\n  [1, 1, 1, 2, 1, 1, 1], \\n\\t[1, 1, 1, 1, 1, 1, 1], \\n\\t[1, 1, 1, 1, 1, 1, 1]\\n]), 8)\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[2,2,2,2,2,2,1,2,2,2,2,2,1,2,1,3,2,2,2,2,3,0,2,2,1,3,1,2,2,2,2,5,3,0,1,3,3,1,3,2,2,2,3,4,1,1,3,3,1,2,2,1,2,2,2,1,2,3,2,2,2,0,2,1,3,3,2,3,2,0,3,2,3,1,3,3,1,0,3,2,2,1,1,3,0,2,2,1,3,0,2,3,2,0,3,2,2,3,2,2,1,3,2,1,3,3,2,2,2,2,1,1,2,1,1,3,1,1,3,3,2,1,2,3,3,3,3,3,3,1,3,2,3,3,2,3,3,1,1,3,2,3,3,1,2,2,3,3,3,2,2,2,0,3,2,3,2,0,2,2,3,3,3,2,2,2,3,2,1,3,2,2,3,3,2,2,3,0,2,0,3,0,4,1,2,3,3,2,2,2,0,3,1,2,3,3,1,1,0,3,3,4,3,3,2,0,0,3],\"rators\":[\"44dAzThMuyGZ5StXB\",\"gb9rvGus2Jv7bjZSs\",\"BYCr9jEinp3XSM6v3\",\"tAF9Gf6PiGogbZuWs\",\"ckRXzQNZ8QXSxFoN8\",\"aCNWav8S8Try9RkC6\",\"up2Lq3Cg3DGWX8MGB\",\"53uJADeqd5ys7ZAdM\",\"8sNv5PTHa7XQ8bNqR\",\"ZNnsMeNkdDhHjSrZb\",\"Bk33vA7Kwje3Hm4n2\",\"AasGs8AeX9Lcb9xJn\",\"qzWAqfJNhmKCLoTRj\",\"W5TajitmCyxz87zAC\",\"KdNDysEsy2TW5QRJ2\",\"2rc86eoe88DLhFeJD\",\"aFNK5j4AQkjtbBsQH\",\"3pxHTZBsv7MKzFG6Y\",\"JNt2nSuFJMHeaWX72\",\"s5M5RvgqR9BhB9JoC\",\"ikkjHDqBHu6fT3vGL\",\"HF28xZKSLM9wEuqNg\",\"CEd9tLdXeDeNHSzys\",\"YwvimRB49ju7e6yJ8\",\"4fDDrRhf4XkKqKwfr\",\"QkbpyExhGA8ErJWhk\",\"J5T8gZqiZXFuFDTQ7\",\"8PwfYqoDQFThzNtvf\",\"JQ5uoxA4WZgN6HyJk\",\"vDwW27S2brhBhjeQB\",\"ekQh3jzgGLsEMbKo3\",\"YRstQuthRkFeBiXug\",\"5JyY5eDxizCH7TYT7\",\"hnyhBFWwNCz9mDfSi\",\"mDWNyaaQ9hvPCRzSd\",\"MKT7khMBGXzA22ykf\",\"RnTBbuFCrJWW6Ayvj\",\"gJYuGdkXEWWmGRLzu\",\"c3nsyfKKeQGxp6sKb\",\"B8MqTLfvM3LPcun5Z\",\"KRmxvA4mWgfKvHmYN\",\"euPBBaYXyS8RBr9KB\",\"dXMbkgQFoN37BhruB\",\"aEm3Wvj2rFYRL8Lrb\",\"muQCKmimwtNAdS8rp\",\"yr822PZmmiDDenxpB\",\"55RQznnuTGpsj3EXd\",\"DNpiCnDQLMs2Kefb9\",\"ZRxAkXjTCdyQTdSDw\",\"Yp7uvStL97cC9fKkY\",\"cR3ibTMxLyEdDFCHY\",\"uMLsCftXNbvx6pcGA\",\"o5dSLuGQ2eqAkZoHA\",\"5nY48krepaT4a4QTN\",\"8JyqsSbN2FJXPr3cw\",\"RErqK2yM94wYyD2hk\",\"Lfut9z3euZ3odxFcH\",\"ENsSYogEHHeDSrFod\",\"4LGKpgWrEJRsTXDkq\",\"WWD6uwvCr54JJGu5S\",\"9pzFiFK3ANLjQfnr2\",\"DxxNN37iEz7b8t2nf\",\"3CddxEkvCvRoCLQ7b\",\"yZvzB3qFb8pkHy4dg\",\"dHZqT6h4JMwk5fPC8\",\"gWAJJmL2LL56z8oDt\",\"3LiSLdtN58n46NEqg\",\"kQH5b8MXJunh84Czq\",\"CwMEkZw8bGuTsnFqg\",\"DEDniTrstQYGounXT\",\"gj87yXyoJxhoQLetq\",\"wS2o3x4nrsadtC3xP\",\"4za87fFyw9qxkD936\",\"gkqp3EuvuiFXFAFtW\",\"ELfyvLSAPDbhksDBb\",\"4rwxLqLs2mNZNg8NB\",\"cxbQnktoNTzR9jcGe\",\"v7xDCZYGnLQa4eJ2g\",\"mq2W9FwPgf4w75dZi\",\"v9KtC8YLbMWmXiW2H\",\"n8WJM5kdmPZbGoX7e\",\"HdapHJPXHZwFYBCnn\",\"ZMJZNTJ2Ng8o8euQJ\",\"zAppXL8MZJiNAStc5\",\"TP8xuSLNax26Czg7v\",\"XghikBbq7obhPSKjX\",\"EAoDdZBWGzecod2ZM\",\"vjQizqDbKpjfHrvZA\",\"yXuZh6CF6GqKYHzoT\",\"B4G2FKcFpvbzriGAG\",\"fSawAcidbRKJfFoqp\",\"QM7kDTz2CSsttPrtP\",\"Wv2vJnEj8ywNmARoF\",\"DrkR35NqnP9NDLbq6\",\"Z3BGkYJi3M6mNSWg5\",\"eMuCpJ2spXWkJjWNz\",\"HT8tFjNz2KXv23iL5\",\"R4SjTgDnpigJYDLyL\",\"2ujBPzYfkiuJWNK3j\",\"BrTDhPJcACL2bsrpJ\",\"jE24TRMFGTRLrGsME\",\"T2QhZRhybEKeJTb44\",\"RHZcTWs7asoBGydH4\",\"pkQBaSzukotPEXmrD\",\"qPpQfR5KyDb5Y3EFf\",\"E8TMSMSamEbBtf9Lo\",\"Ecg4m7srYGgZsb4Ck\",\"MT3R2p9DaEvGSv8Jg\",\"ACEZh39brWjdGkZXb\",\"MnFagKvC7eeFnAqfQ\",\"kch5ukGsAcRJynWQd\",\"KtGuNp3ynDS9pCy7i\",\"YsAz93yZw8KKPupKv\",\"p9LrbZNFe3SxCHKji\",\"yKttxy9JGn5Jzwuj6\",\"YCHnE8feJyuhcpDc2\",\"4RY3zj9C2t8GGefhi\",\"zCF9Hovhxzttxmqmw\",\"ffA5qAQ4Lctb8mb5f\",\"DCLoZNDf8h6TB7gxn\",\"6BZMSxML2SjRgRCZn\",\"Ce2aet2A9HN4RfCNz\",\"9BRiTS38aT5Yrz7zH\",\"efcsSdKgupNnf9DKD\",\"yJmwiykSNfLv9NqJ2\",\"RQvQLnbRxGx6yrdHi\",\"p9riYAbHXwJZ9PhWf\",\"n2BRY9X8899dcG8Bw\",\"MoJmguQFX7yAAxNBb\",\"JS3hNM3XXkxPdg3yk\",\"f2BoqyCpgnmjEjLqx\",\"TmKhuC8kMMMiWfwvA\",\"v2fPSGBDDHwLYv2dT\",\"bJxaKHJqR82EWw8Su\",\"hqPjjz7usTRwBMtXn\",\"DrPJuMKffyXYgXq6Y\",\"AfZhSH7dGhbD7ussL\",\"2innwjWqxJHo4eRGh\",\"CnHfMfXRFpHm7fxhP\",\"TwKZ3835iFLog2RuQ\",\"cRpaCxYRmGcN3Nsoj\",\"iojEnnY9FsMfYzp6f\",\"CTKmXtrqDYqJBnuy8\",\"CwXsu25ygLEwQbmQC\",\"dzS6WBTMHyFEag6Fp\",\"rzX5PujzJGJK7mMCi\",\"zZDaXBxMzTCBhNkgL\",\"hRiMXDZNAzyPd5tpt\",\"CzwiWyp36GqH38jgv\",\"yjtdwc2AC4jA2RWtn\",\"ZrKCkX7xxGGZzauFW\",\"HhYCji7QqauyN3A7v\",\"HqmxnQJM66Y57twhn\",\"ZsHZ6a5qLfC8m8EyY\",\"9CoqdidjM9KbeKnHY\",\"ji5f27FPz4wRRF6Ls\",\"C75Nyf5jotZJ9TfPW\",\"N43d68KgA2qv7Jm2Y\",\"kyEERyssssTQaZ4y5\",\"jBR47vA7HwAZqp4QA\",\"p8qqFdJ3FSk5x9z3G\",\"P7NmFbCJ5offXMRvB\",\"KZ2xddpM2f9JRaryB\",\"orFLgPDw9H5MDzmwo\",\"mG8HqKiAQFTdRZthG\",\"w2HhxvSLmDhaGCAjE\",\"jL4y5fTJAMBjhZmko\",\"XjajdyybZZbkz8o5x\",\"DNACg4rcgZsPtYGZ8\",\"xn7uGNKeAwPEkP9oA\",\"dkcmCKwqApX5jBggc\",\"4fhjJBvLBWh6QeSih\",\"EMJ6uvBZkie429gdg\",\"qD2LrwaDrSdiybLKY\",\"8fZxjQfuXw5HMSRJM\",\"axdSNLZpiCDF8RS6n\",\"DPi9QGLctq2y76KuE\",\"6MjSiiBLPcvXbXcaZ\",\"9FCeFzjPA4jrQ7oHW\",\"QRv96jmNaYsWkxQEG\",\"dYPkStFnLvAMsHSzZ\",\"gXTAie79kiw28tx5u\",\"nc7bRhkxgKyqusYe3\",\"J3upzLHuEwXH7Z2hx\",\"oBcs8GLX2ZFLXQy8y\",\"Jg8ZSRXe3NoDMCqGu\",\"7scpcTEp3SEx5Wjg9\",\"AXcnPX68zdMiLNSmu\",\"bccs9koJxyQ9XNiLC\",\"hRAd998MG8Jzdpxj6\",\"cAP3n5NY64uoMwzRR\",\"kEkNyqFARK9YBrhRx\",\"Nzi4RD5fxAJ4wjnNa\",\"Jqk2uJZZxEv5wZFze\",\"2fxapKr8XGdNeaKi2\",\"PXAcsKkssS2yLyDv2\",\"di8ikzbLPSZKCDAAC\",\"GGdmhAvxXhqhhibJN\",\"RTDx9axf52kxhFjwZ\",\"uw8E83imJYpQiiPpP\",\"NfMJuiBk6FN5Jc6ow\",\"FEYpu9RWysAgW3XnP\",\"YcCLwitFMAEJSnxAW\",\"2PufnQcsHsfymufX3\",\"T6iBEE2jp7f7iEF2P\",\"PC3pLs36zNzpRDSuE\",\"8BFSTCnoe2QggN64c\",\"K6MfKMytoJJuSGewP\",\"3KkyQm77zsew58Dc2\",\"fbr22rabEJMfBp7vD\",\"PWgzeK859suojbrRx\",\"ctbThYbufFCYbRK4f\",\"u5u2YpHXiNgzDNJdX\",\"o4ixjQGSaYqA2JoM4\",\"EfxwqhYdapX3dMQC2\",\"ey3CASd6Je5LEJzfB\",\"gKnWjDjwrJh7MK2df\",\"AFfw7cGg83uYk2Miy\",\"nkH3HfJXLMNcBMM79\",\"yod5YhKtPqw2GfG9B\",\"RoGGD5cpHb4ftdLDv\",\"buX4mCQhtXCfBjeno\",\"suArq5BbSy7gD6xri\",\"rhS8qXRjZcpDXkwnE\",\"5HCu9Ydd86QgHDRNP\",\"kjvgTyRFyKHv44DcH\",\"Ds7L5bksw2QRHjrKL\",\"mvJBakQ35CWAnbbEZ\",\"iedy2PsuTswZ4yGpj\",\"Qyfyyw6oC4EHAndzo\",\"edmov2rvpnyBfuW55\",\"n2qKKxomPnb4zez5M\",\"CHvzhtXnv8HTbPQ56\",\"jkbavR2ATFJcpmo8M\"],\"total\":252,\"quality\":[5,5,5,5,4,5,5,5,5,5,3,5,5,5,5,5,5,5,5,5,3,5,5,5,5,5,5,5,5,5,5]},\"flags\":0},\"summary\":\"Create a function that takes a 2D array as an argument and returns the number of people whose view is blocked by a tall person. The concert stage is pointed towards the top of the 2D array and the tall person (represented by a 2) blocks the view of all the people (represented by a 1) behind them.\\n\\nExamples\\nblock([\\n  [1, 1, 1, 1, 1],\\n  [1, 1, 1, 1, 1],\\n  [1, 1,\",\"tags\":[\"loops\",\"arrays\"],\"timestamp\":{\"$date\":1590527068298},\"title\":\"Tall People\",\"quality\":4.838709677419355,\"family\":[{\"_id\":\"9mvtpJikez53htMzZ\",\"language\":\"cpp\"},{\"_id\":\"5evtRfyL7kyxXZciY\",\"language\":\"javascript\"},{\"_id\":\"E9FwvGyad5CDbiH4C\",\"language\":\"python3\"},{\"_id\":\"tjF42ZijcrgSPHx8q\",\"language\":\"ruby\"}]}}"]