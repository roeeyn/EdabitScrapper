a["{\"msg\":\"result\",\"id\":\"1776\",\"result\":{\"_id\":\"vYqGnNuXqznAZ4KR2\",\"author\":\"Matt\",\"authorId\":\"BkPgkDQGHm66X4Qai\",\"code\":\"def dice_range(txt):\\n\\t\",\"difficulty\":2.3214285714285716,\"familyId\":\"48k4nSnHh3aQLvp3k\",\"instructions\":\"You are playing a game of JavaScript & Jackalopes with your friends, and need to roll dice as part of the game. None of you actually own dice, but you do have a computer handy!\\n\\nYou'll be given a string representing the number of dice to roll, how many faces each die has, and a \\\"modifier\\\" to apply to the final result after adding up all the dice. For example, rolling a single six-sided die with no modifier might be represented by the string `\\\"1d6\\\"` — one die with six sides and values ranging from 1 through 6. If you wanted to add 2 to the result of rolling the same die, you might represent that as `\\\"1d6+2\\\"`.\\n\\nCreate a function that takes a string representing a set of dice to be rolled as an argument, and returns a list of two numbers representing the minimum and maximum possible values that could be achieved.\\n\\n### Examples\\n```\\ndice_range(\\\"1d6\\\") ➞ [1, 6]\\n# If a modifier is not given, assume that nothing will be\\n# added to/subtracted from the results.\\n\\ndice_range(\\\"1d6+2\\\") ➞ [3, 8]\\n\\ndice_range(\\\"d6\\\") ➞ [1, 6]\\n# If a number of dice is not provided, assume only one is\\n# being rolled.\\n\\ndice_range(\\\"d6-2\\\") ➞ [-1, 4]\\n# If a modifier is negative, the resulting values may be\\n# negative as well.\\n\\ndice_range(\\\"2d6\\\") ➞ [2, 12]\\n\\ndice_range(\\\"2d6-1\\\") ➞ [1, 11]\\n# The modifier should be added to/subtracted from the\\n# final result after rolling all the dice and adding up their\\n# results, not applied to each roll!\\n\\ndice_range(\\\"0d6+1\\\") ➞ [1, 1]\\n# If you roll no dice, the result will only be whatever the\\n# modifier's value is with no randomness.\\n```\\n\\n### Notes\\n- All inputs will be valid inputs for the function.\\n- The number of dice to roll in each test will be either a positive integer, zero, or omitted (with a default assumed value of 1).\\n- The number of sides of the dice to roll in each test will be a positive integer.\\n- The modifier in each test will be either an integer (positive, negative, or zero) or omitted (with a default assumed value of 0).\",\"lab\":\"Test.assert_equals(dice_range(\\\"1d6\\\"), [1, 6])\\nTest.assert_equals(dice_range(\\\"1d6+1\\\"), [2, 7])\\nTest.assert_equals(dice_range(\\\"1d6-2\\\"), [-1, 4])\\nTest.assert_equals(dice_range(\\\"2d6\\\"), [2, 12])\\nTest.assert_equals(dice_range(\\\"2d6+38\\\"), [40, 50])\\nTest.assert_equals(dice_range(\\\"2d6-22\\\"), [-20, -10])\\nTest.assert_equals(dice_range(\\\"d6\\\"), [1, 6])\\nTest.assert_equals(dice_range(\\\"0d6+3\\\"), [3, 3])\\nTest.assert_equals(dice_range(\\\"0d6-4\\\"), [-4, -4])\\nTest.assert_equals(dice_range(\\\"0d6\\\"), [0, 0])\\nTest.assert_equals(dice_range(\\\"0d6+0\\\"), [0, 0])\\nTest.assert_equals(dice_range(\\\"0d6-0\\\"), [0, 0])\\nTest.assert_equals(dice_range(\\\"5d20+2\\\"), [7, 102])\\nTest.assert_equals(dice_range(\\\"15d4-1\\\"), [14, 59])\\nTest.assert_equals(dice_range(\\\"12d100+99\\\"), [111, 1299])\\nTest.assert_equals(dice_range(\\\"24d8-100\\\"), [-76, 92])\\nTest.assert_equals(dice_range(\\\"50d12\\\"), [50, 600])\",\"language\":\"python3\",\"summary\":\"You are playing a game of JavaScript & Jackalopes with your friends, and need to roll dice as part of the game. None of you actually own dice, but you do have a computer handy!\\n\\nYou'll be given a string representing the number of dice to roll, how many faces each die has, and a \\\"modifier\\\" to apply to the final result after adding up all the dice. For example, \",\"tags\":[\"strings\",\"games\"],\"timestamp\":{\"$date\":1565210749416},\"title\":\"Range of Rolled Dice\",\"stats\":{\"completed\":{\"total\":63,\"ratings\":[3,3,3,3,3,2,3,2,1,2,2,2,2,2,0,3,2,2,0,2,3,1,2,4,0,3,2,3,3,2,2,3,2,4,2,3,3,3,3,3,1,0,2,3,3,2,3,4,2,3,2,3,2,3,3,1],\"rators\":[\"gb9rvGus2Jv7bjZSs\",\"tAF9Gf6PiGogbZuWs\",\"yZvzB3qFb8pkHy4dg\",\"AYaEkTWLMmfzpwejr\",\"cecRRLKKu5R62D5xE\",\"BFNm9gacwba9KyLFW\",\"8JyqsSbN2FJXPr3cw\",\"N6b7mWFChTsPQBBZz\",\"C9LKGu2g5hSijvDzA\",\"gMJhLdyw3tH7L96X2\",\"HqmxnQJM66Y57twhn\",\"2fxapKr8XGdNeaKi2\",\"Jqk2uJZZxEv5wZFze\",\"ab7BsQuhDo3QgE6bh\",\"s5M5RvgqR9BhB9JoC\",\"2innwjWqxJHo4eRGh\",\"23oi2a3vQwhtLEbSj\",\"C4QntmkYtB89GNtpd\",\"4CFzv558qbGcpQwc4\",\"T7QZG6y34b65Fxyef\",\"8PwfYqoDQFThzNtvf\",\"w3A7cBWyAfukk6xEQ\",\"AasGs8AeX9Lcb9xJn\",\"PytNZK9mNiRiZxPrm\",\"aEm3Wvj2rFYRL8Lrb\",\"ZNnsMeNkdDhHjSrZb\",\"gJYuGdkXEWWmGRLzu\",\"mFqrAKcfZZM58iYmw\",\"R4SjTgDnpigJYDLyL\",\"MsyzJZez239WmAXuS\",\"n2BRY9X8899dcG8Bw\",\"YPrQCBKed9tgouRzC\",\"sAaYMweK7ed4mmFQW\",\"mDWNyaaQ9hvPCRzSd\",\"9CoqdidjM9KbeKnHY\",\"d8qtzoLB264iP8tdY\",\"kXEfD7xxEyWd7oxxL\",\"yjtdwc2AC4jA2RWtn\",\"KdYQN3KAT2DyTzT2a\",\"HF28xZKSLM9wEuqNg\",\"9PwGaj3dLboYDL8MF\",\"iS5BrkGLzJyPK7nKt\",\"xn7uGNKeAwPEkP9oA\",\"8hxxLgAf64YbGKRMb\",\"J3upzLHuEwXH7Z2hx\",\"Wv2vJnEj8ywNmARoF\",\"hzHsgwjark5sZCQ2c\",\"Yp7uvStL97cC9fKkY\",\"gXTAie79kiw28tx5u\",\"QRv96jmNaYsWkxQEG\",\"p8qqFdJ3FSk5x9z3G\",\"RTDx9axf52kxhFjwZ\",\"iojEnnY9FsMfYzp6f\",\"oBcs8GLX2ZFLXQy8y\",\"PWgzeK859suojbrRx\",\"yod5YhKtPqw2GfG9B\",\"DPi9QGLctq2y76KuE\",\"2PufnQcsHsfymufX3\",\"8sNv5PTHa7XQ8bNqR\"],\"quality\":[5,5,5,5,4,5,5,5]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"isHidden\":false,\"quality\":4.875,\"family\":[{\"_id\":\"92am52aiwdKRAJjtL\",\"language\":\"javascript\"},{\"_id\":\"vYqGnNuXqznAZ4KR2\",\"language\":\"python3\"},{\"_id\":\"L7Ycwz54Afik8avvM\",\"language\":\"ruby\"}]}}"]