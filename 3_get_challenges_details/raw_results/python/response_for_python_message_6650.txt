a["{\"msg\":\"result\",\"id\":\"2033\",\"result\":{\"_id\":\"KgBqna3XhRkoL2mo7\",\"author\":\"Evgeny SH\",\"authorId\":\"8PwfYqoDQFThzNtvf\",\"code\":\"def decrypt(s):\\n\\t\",\"difficulty\":2.8452380952380953,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"c2rm6zxziMNfnxAfr\",\"instructions\":\"Given a string `s` consisting from digits and `#`, translate `s` to English lowercase characters as follows:\\n\\n- Characters (\\\"a\\\" to \\\"i\\\") are represented by (\\\"1\\\" to \\\"9\\\").\\n- Characters (\\\"j\\\" to \\\"z\\\") are represented by (\\\"10#\\\" to \\\"26#\\\").\\n\\n### Examples\\n```\\ndecrypt(\\\"10#11#12\\\") ➞ \\\"jkab\\\"\\n\\ndecrypt(\\\"1326#\\\") ➞ \\\"acz\\\"\\n\\ndecrypt(\\\"25#\\\") ➞ \\\"y\\\"\\n```\\n\\n### Notes\\nN/A\",\"isFree\":false,\"isHidden\":false,\"lab\":\"from time import perf_counter\\nfrom random import randint\\ntic = perf_counter()\\n\\nTest.assert_equals(decrypt(\\\"10#11#12\\\"), \\\"jkab\\\")\\nTest.assert_equals(decrypt(\\\"1326#\\\"), \\\"acz\\\")\\nTest.assert_equals(decrypt(\\\"25#\\\"), \\\"y\\\")\\nTest.assert_equals(decrypt(\\\"12345678910#11#12#13#14#15#16#17#18#19#20#21#22#23#24#25#26#\\\"), \\\"abcdefghijklmnopqrstuvwxyz\\\")\\n\\nfor _ in range(100):\\n    input_lst = []\\n    expected_lst = []\\n    for _ in range(randint(1, 100)):\\n        k = randint(1, 26)\\n        input_lst.append(\\\"{}{}\\\".format(str(k), \\\"#\\\" if k > 9 else \\\"\\\"))\\n        expected_lst.append(chr(96 + k))\\n    Test.assert_equals(decrypt(\\\"\\\".join(input_lst)), \\\"\\\".join(expected_lst))\\n\\nprint('t_sec = {:.6f}'.format(perf_counter() - tic))\",\"language\":\"python3\",\"quality\":4.846153846153846,\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,3,3,5,2,3,2,5,4,2,2,3,4,5,2,5,5,5,5,1,2,5,2,2,5,5,0,3,1,1,3,2,5,4,4,4,5,2,1,0,1,5,5,2,3,2,4,1,3,3,4,3,2,3,2,1,5,4,3,5,4,2,3,2,2,1,2,2,0,1,0,0,4,4,2,0,3,3,3,3],\"quality\":[5,4,5,5,5,5,5,5,5,5,5,5,5,4,5,5,5,4,5,5,5,5,5,4,5,5,4,5,4,5,5,5,5,4,5,5,5,5,5,5,5,5,5,5,4,5,5,5,5,5,5,5],\"rators\":[\"8PwfYqoDQFThzNtvf\",\"tAF9Gf6PiGogbZuWs\",\"no46qNkTbNeHepe64\",\"SGhPxX5bHGL8zZqtt\",\"s5M5RvgqR9BhB9JoC\",\"LfDeQBAH37L7wgT4Z\",\"Xk2g4CNFAnYcvxiSr\",\"fSQSHjW3e72MrWxbD\",\"aEm3Wvj2rFYRL8Lrb\",\"Ecg4m7srYGgZsb4Ck\",\"QZfBqLS7msPLCkS5v\",\"mDWNyaaQ9hvPCRzSd\",\"zd9FLSzsGz3evKafy\",\"QRv96jmNaYsWkxQEG\",\"buX4mCQhtXCfBjeno\",\"8nE8QHnFYsHCFebte\",\"waNsY2k4ndReyEREk\",\"5dHucvf2qBYyKim7X\",\"Tg24gZyPmk8uDXcBY\",\"Jqk2uJZZxEv5wZFze\",\"iS5BrkGLzJyPK7nKt\",\"fSgCtTbtfBQBmGM2m\",\"HF28xZKSLM9wEuqNg\",\"hzHsgwjark5sZCQ2c\",\"p8qqFdJ3FSk5x9z3G\",\"7ifh8r4gvyYMhKB94\",\"Cia25zjeX3RkCNx5t\",\"YRAzEBJoLvSaiPtYx\",\"5f6oSeq4r5WTXLdCQ\",\"TmabA7AGCEoaYyqqz\",\"58M252WF7SPRinfBx\",\"DPi9QGLctq2y76KuE\",\"hvZqMn5XtmqoLLRGx\",\"AJwBauGHyrbqgDYce\",\"8sNv5PTHa7XQ8bNqR\",\"d6iEb2BDDofyeePh9\",\"822C6ihm2tAoYzuku\",\"Kn9yjT4NvcnnvjCrL\",\"wvZ2Bt9ZrSXrF5kXK\",\"eMuCpJ2spXWkJjWNz\",\"8JyqsSbN2FJXPr3cw\",\"w2arJGEFKw5wynYQK\",\"hRAd998MG8Jzdpxj6\",\"WF2iS4azdv6YKoBjz\",\"XHShZ3WMPgGEA2vkR\",\"iTxfDAyC4ymrz2XFv\",\"uvB7ntjeJykQNPhpw\",\"6QHXQkQAcXMJ7C2kK\",\"innQWYNLEaTFwLeEr\",\"T6xRoSqcSHjvP2Tik\",\"J23RcmzbdtBbPCTjT\",\"SoyMzrcY9kLPQCXwY\",\"hBKf7LeSP6i2saXjk\",\"b3Dk2LqoEgripS3Y3\",\"Y6psiGfJxvrjK4HYZ\",\"2PufnQcsHsfymufX3\",\"s2ZMtR9deh6Kia7pb\",\"XNmN6ztj36a7eChbD\",\"xn7uGNKeAwPEkP9oA\",\"TbgmCM5emcQRGiEGv\",\"zfrhof8pbZnQizdmi\",\"zszDEGuspHnAsCAct\",\"enLDwSzRSKoWxRDLY\",\"yod5YhKtPqw2GfG9B\",\"WbDtRP37ZDrQQM5KJ\",\"iojEnnY9FsMfYzp6f\",\"bEYFjuCiczaKHxJg5\",\"tuGGntJM7tRS5wPph\",\"yjtdwc2AC4jA2RWtn\",\"4xwButZn34q92d9Yn\",\"5WS8LPEYRfswL5vRm\",\"SbGLSZ5piLATC8bop\",\"MqWb4bwEqo37t4zd6\",\"sXyousNEPbHPufbNN\",\"GwSNH82wDgQ2B3jwW\",\"qXhkpWF3moWKMq2ts\",\"RwENNGdrhrtAgs5Qb\",\"9uZpgAtSuPZ7W7DL6\",\"QYh2kagDtGd3nYgiT\",\"u5r7mFQ2Swy3aXj2F\",\"TxsYMnonbDnTQ8XDf\",\"4sHkH3t9CJYhbDwjM\",\"LbPQq9qik8HKtwMeC\",\"nrA8Pacm3A6GqGzq4\",\"nweRDtL2ZPxYmRNkd\",\"HiEHMuwA36EZgbjw8\",\"MMizB37Mcj9jBEKTd\",\"9s2DgX3eYwudZCXGJ\",\"CZeLyDD2BQL3jrzzj\",\"PBSw3WGPXyi5yhfRJ\",\"wwMcJQRvf3X59Jyev\",\"JPunrkJYHekz9WyGH\",\"csfmLWyeJLYdKXLSG\",\"gJYuGdkXEWWmGRLzu\",\"5icjZw6e5gpwKHdqi\",\"D3Pr2EFee3652zsyR\",\"NGZ8NiyozrKCuJscH\",\"htDAQKjMttjyLaqwn\",\"9pzFiFK3ANLjQfnr2\",\"iC3KzMHEFWKi2G54H\",\"6uYDrxSrkr5LKoozv\",\"QR9XDDz9w7g2irPka\",\"yKXMKjgLSijb84nw7\",\"KQTgsjJyfh5KZ7qca\",\"gb9rvGus2Jv7bjZSs\",\"YZfqPmKBJDLMETGbM\",\"AasGs8AeX9Lcb9xJn\",\"F8CP3NDk2GCR7MoD3\",\"bJaPCBx63YxdJAuTS\",\"Yp7uvStL97cC9fKkY\",\"J3upzLHuEwXH7Z2hx\",\"hjgkNySbaZT74LqCT\",\"PTDFuxAzou7W6asWt\",\"dqwatKFAeGpjmf5dm\",\"ua3syogsXKrAPcRQS\",\"8BFSTCnoe2QggN64c\",\"vhZgCDRqMncYjfFB9\",\"NYfFt4kwPDsjf8er3\",\"Hx8ABi9dWW9bctRSo\",\"BMAAxy9E4PCbSFJdt\",\"eHcgvkTGsH7ZziqBo\",\"T6iBEE2jp7f7iEF2P\",\"gKnWjDjwrJh7MK2df\",\"v74fPhegePGxCm2uk\",\"aFYzioHvZPvPaunsg\",\"gXTAie79kiw28tx5u\",\"yTtSCvGPyYna6JuRC\",\"tkRuKMWxoSyTXnvbb\",\"en6o48SqvQaxiAuLy\",\"tTXfbnziyqCHkuCEL\",\"GTKsdeEihE636Le9i\"],\"total\":138},\"flags\":0},\"summary\":\"Given a string s consisting from digits and #, translate s to English lowercase characters as follows:\\n\\nCharacters (\\\"a\\\" to \\\"i\\\") are represented by (\\\"1\\\" to \\\"9\\\").\\nCharacters (\\\"j\\\" to \\\"z\\\") are represented by (\\\"10#\\\" to \\\"26#\\\").\\n\\nExamples\\ndecrypt(\\\"10#11#12\\\") ➞ \\\"jkab\\\"\\n\\ndecrypt(\\\"1326#\\\") ➞ \\\"acz\\\"\\n\\ndecrypt(\\\"25#\\\") ➞ \\\"y\\\"\\n\\nNotes\\nN/A\",\"tags\":[\"conditions\",\"cryptography\",\"loops\",\"strings\"],\"timestamp\":{\"$date\":1605727731146},\"title\":\"Decrypt the String from Digits to Letters\",\"family\":[{\"_id\":\"NWYyMRW4PjKnsuqrp\",\"language\":\"cpp\"},{\"_id\":\"NmBBGYTMNugKTSMkX\",\"language\":\"javascript\"},{\"_id\":\"KgBqna3XhRkoL2mo7\",\"language\":\"python3\"},{\"_id\":\"p2p7fZsbBmcvu5WPX\",\"language\":\"ruby\"}]}}"]