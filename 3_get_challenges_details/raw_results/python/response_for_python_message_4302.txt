a["{\"msg\":\"result\",\"id\":\"868\",\"result\":{\"_id\":\"XfSvKco6KZFRfgQyj\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def find_a_seat(n, lst):\\n\\n\\t\\t\",\"difficulty\":1.4137931034482758,\"editorId\":\"PXAcsKkssS2yLyDv2\",\"familyId\":\"hkKz8z5LC5KkAQbtj\",\"instructions\":\"A train has a maximum capacity of `n` passengers overall, which means each carriage's capacity will share an equal proportion of the maximum capacity.\\n\\nCreate a function which returns the **index** of the first carriage which holds **50% or less** of its maximum capacity. If no such carriage exists, return `-1`.\\n\\n### Worked Example\\n```\\nfind_a_seat(200, [35, 23, 18, 10, 40]) ➞ 2\\n\\n# There are 5 carriages which each have a maximum capacity of 40 (200 / 5 = 40).\\n# Index 0's carriage is too full (35 is 87.5% of the maximum).\\n# Index 1's carriage is too full (23 is 57.5% of the maximum).\\n# Index 2's carriage is good enough (18 is 45% of the maximum).\\n# Return 2.\\n```\\n\\n### Examples\\n```\\nfind_a_seat(20, [3, 5, 4, 2]) ➞ 3\\n\\nfind_a_seat(1000, [50, 20, 80, 90, 100, 60, 30, 50, 80, 60]) ➞ 0\\n\\nfind_a_seat(200, [35, 23, 40, 21, 38]) ➞ -1\\n```\\n\\n### Notes\\n* This means if a train can hold **200** passengers, and has **5** carriages, then that means each carriage can hold a maximum of  **40** passengers each.\\n* All carriage numbers will be positive integers, which will be able to divide evenly.\\n* Remember to return `-1` if no carriage is empty enough.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(find_a_seat(20, [3, 5, 4, 2]), 3)\\nTest.assert_equals(find_a_seat(1000, [50, 20, 80, 90, 100, 60, 30, 50, 80, 60]), 0)\\nTest.assert_equals(find_a_seat(200, [35, 23, 40, 21, 38]), -1)\\nTest.assert_equals(find_a_seat(200, [35, 23, 18, 10, 40]), 2)\\nTest.assert_equals(find_a_seat(21, [6, 3, 7]), 1)\\nTest.assert_equals(find_a_seat(11037, [1839, 0, 0]), 0)\",\"language\":\"python3\",\"quality\":4.588235294117647,\"stats\":{\"completed\":{\"ratings\":[1,1,1,1,1,5,1,2,1,2,2,2,2,1,1,2,2,0,1,3,2,0,0,2,1,0,0,2,2,1,2,2,2,1,2,1,2,0,2,2,2,1,2,0,2,0,2,2,1,1,0,1,3,2,1,0,2,2,1,3,1,0,0,2,2,1,2,1,2,1,2,2,2,1,2,1,2,1,0,1,2,1,2,2,2,1,0,2,1,1,2,1,2,1,2,1,2,0,0,2,2,2,2,2,0,2,0,3,2,1,2,0,2,0,1,2,1,1,2,1,1,1,2,4,2,0,1,3,1,2,1,1,2,1,0,1,2,2,1,0,1,4,2,2,1],\"quality\":[5,3,4,5,4,5,5,5,4,5,4,4,4,5,3,5,5,5,5,5,5,5,5,4,5,5,3,5,5,5,5,5,5,4],\"rators\":[\"J5T8gZqiZXFuFDTQ7\",\"cR3ibTMxLyEdDFCHY\",\"8PwfYqoDQFThzNtvf\",\"s5M5RvgqR9BhB9JoC\",\"iS5BrkGLzJyPK7nKt\",\"buX4mCQhtXCfBjeno\",\"PXAcsKkssS2yLyDv2\",\"p8qqFdJ3FSk5x9z3G\",\"QRv96jmNaYsWkxQEG\",\"a777e8chPvJkY3tKa\",\"HF28xZKSLM9wEuqNg\",\"8JyqsSbN2FJXPr3cw\",\"cAP3n5NY64uoMwzRR\",\"gb9rvGus2Jv7bjZSs\",\"w2HhxvSLmDhaGCAjE\",\"gXTAie79kiw28tx5u\",\"FEYpu9RWysAgW3XnP\",\"sHjfbGQGLHE6JR6qu\",\"zd9FLSzsGz3evKafy\",\"oBcs8GLX2ZFLXQy8y\",\"2QGRoQn2dRq3scu7k\",\"CHvzhtXnv8HTbPQ56\",\"gJYuGdkXEWWmGRLzu\",\"pPpmP7xeJzGgK362R\",\"GGdmhAvxXhqhhibJN\",\"Yp7uvStL97cC9fKkY\",\"DPi9QGLctq2y76KuE\",\"YcCLwitFMAEJSnxAW\",\"9ivvGvJGvtQfigQaZ\",\"wjc4iejpErBhxWwHo\",\"Ds7L5bksw2QRHjrKL\",\"qAby4AWXmTNeusvg3\",\"o4ixjQGSaYqA2JoM4\",\"K6MfKMytoJJuSGewP\",\"iojEnnY9FsMfYzp6f\",\"5HCu9Ydd86QgHDRNP\",\"yjtdwc2AC4jA2RWtn\",\"tAF9Gf6PiGogbZuWs\",\"3cF6NXq3ZEwdkgSjb\",\"8BFSTCnoe2QggN64c\",\"J3upzLHuEwXH7Z2hx\",\"T6iBEE2jp7f7iEF2P\",\"srJ34BaybkQh3qRkM\",\"yod5YhKtPqw2GfG9B\",\"ouD6cs7ZdxzPfKRKt\",\"3nied3n8KG8RSNixH\",\"AQSqD9oNv2uPfxZCR\",\"LWCzZ8mb8gwrRNGfq\",\"KJCDwGkoXh8qtbbKr\",\"H9KZi2cjt4FwH7qog\",\"XD5nmvKQchKezPXhy\",\"DEDniTrstQYGounXT\",\"bvmTE46bfcM4ogj34\",\"dRpSwgukY2jHSxuwq\",\"66a9xX73nmTEuKs9k\",\"BrTDhPJcACL2bsrpJ\",\"LmjcY5n89kRkPKX5y\",\"dJzNF59j2p8jWZxiQ\",\"NzbRqGWspQnWMoDrF\",\"AFfw7cGg83uYk2Miy\",\"GTKsdeEihE636Le9i\",\"zvvqfWovdJDMq2Hpk\",\"PC3pLs36zNzpRDSuE\",\"Wpn95NqWxncQrwNgz\",\"c2q7mY39z5JPEMCaM\",\"2PufnQcsHsfymufX3\",\"X4rzfxGgxx6CS7Bpz\",\"5XiuAqicKD4hBdu63\",\"Cc2Cgj4MWXZxsTooC\",\"2fxapKr8XGdNeaKi2\",\"NfMJuiBk6FN5Jc6ow\",\"JC8xt2rJtqR7PeLwN\",\"ey3CASd6Je5LEJzfB\",\"zaEhZypEd8RNPaJXF\",\"m25KxjgFeCXPgvmkT\",\"yr822PZmmiDDenxpB\",\"RoGGD5cpHb4ftdLDv\",\"kdcWyvQAs27aCfbr8\",\"nQnz2rbfxxqTFEnWi\",\"nFbmNzMQ38TncmfQX\",\"9Ly8afdtofp8DXzrt\",\"Cuy7McJ5y8BkXRRk9\",\"AasGs8AeX9Lcb9xJn\",\"R6YxHWAiLgKwy5YvC\",\"rrSC943cCKNG48sH4\",\"JhX7jvtpwNyxcc39m\",\"EfxwqhYdapX3dMQC2\",\"sKfrD9gjCDHuqLzSk\",\"HqmxnQJM66Y57twhn\",\"StNu7DPyTgEStZsMY\",\"4Lwjr34ypKNQNQCar\",\"nc7bRhkxgKyqusYe3\",\"aEm3Wvj2rFYRL8Lrb\",\"MKT7khMBGXzA22ykf\",\"jQZ33w5EDynkkab8m\",\"c69QaWJeNY83veoKE\",\"N2wnZXkhDH86mgjQ8\",\"JiSpvq6C7azQEmENc\",\"LQxof8pGabGuWP7Gn\",\"2FCRyJqwqzFTKSTgJ\",\"waHvhqyyDQNavYmBJ\",\"AJexRBN9cYQmqvYu6\",\"WFHB8qXFsXTicj9zq\",\"pduNK68oazqQTtbLp\",\"hR7GMiqGap4CzEWSy\",\"Afnps7TJQuS9sipMb\",\"2iFe3EHEH2YdhSKrs\",\"4RY3zj9C2t8GGefhi\",\"796v8eRqahP6wpLdL\",\"4TmgHkn5vqyHK3sYC\",\"DCMAaZCGD7w2PxEuC\",\"jkbavR2ATFJcpmo8M\",\"WjwA5Yi7iCSw4rpsB\",\"YA7SDhpgEtsqynvNL\",\"T6Rm8mREPMZSftzrC\",\"Jqk2uJZZxEv5wZFze\",\"uGuS9YRXW2nj4p6zf\",\"Ny3xhk2E4zuL2qfPK\",\"SxzqqQZ4HEwY9oCzE\",\"jWbd7SYDzLPjc9EDh\",\"wY23YQtK2T3T4N47P\",\"u5u2YpHXiNgzDNJdX\",\"uw8E83imJYpQiiPpP\",\"dgzKPB3v93obQZYCA\",\"5Dd7XwALvvMMwS4Fb\",\"dYPkStFnLvAMsHSzZ\",\"cwwrbPAdwx3aat7mh\",\"D2ZAjHmd2ZJiWPRC5\",\"dSd7wHgXGQeG5BQ2P\",\"d9LBRxvADNBB5QJMB\",\"CLypXaZksY99mpRCm\",\"qM4cFjDW9EBf6BNsA\",\"NpxzZk8fyyh28rBmw\",\"NqsYZi3NYoMzJKBqX\",\"w3QDkmjZj2dAFDsjq\",\"uK58g2EXxqxTaB2iA\",\"oig8ig9SE9RZa8ttL\",\"hpT9yYe5R45poHrYR\",\"AMpQSjKsRqhCDyS2j\",\"DkYeAMDMzM8F6Zba5\",\"dzS6WBTMHyFEag6Fp\",\"TAvGuapQnnQxaTyeT\",\"5EFbgnAJJCXr6dwP5\",\"rCrbqMiaGPgHYTNxu\",\"3KkyQm77zsew58Dc2\",\"sBoNkD5c6zGSZNbqL\",\"8uiLiJcmWxWe6qw65\",\"yAouD3PxzED8a4gap\",\"K3RacTvkWHLfzKF8i\",\"eW9R2SCoYnY8HBAdL\",\"vCeeMuYDbz3MB4vsk\",\"Qyfyyw6oC4EHAndzo\",\"Si6jT3DnRMXYd27k9\",\"B4y8aoyXJtskYPFEL\",\"QWjsXnLaJ7xfL3Amq\",\"mxX4rH5ELYkdZ2Mbw\",\"ctbThYbufFCYbRK4f\",\"qB6KSTYC6H2TQEQY6\",\"xjyixzXzqqqTfJARd\",\"2Qk2mFu9HBFzrB24i\",\"5QN8R22z43SrwoHDz\",\"6Z7DRFRvZXstaoKHo\",\"CGFgo4YKenX4eWvLz\",\"rDgKHd6ZSSpboiAj7\",\"BHjiqYKNfY6gDF4LM\",\"2HfNkb2SoqdyjKW3o\",\"QnC9PTEvtSX73vCNS\",\"Wi4H6ayKsNDWWQCG5\",\"ruzwBPphPDRgLXdnP\",\"NHp9cXgWCyX6KqyMT\",\"RfbjShbg8jmhyNtJh\",\"5rX3qPFdvRQ9G7xZQ\",\"FQoDbW3f7viY9x6xq\",\"RGN3QTb5LXj4ZPPkj\"],\"total\":190},\"flags\":0},\"summary\":\"A train has a maximum capacity of n passengers overall, which means each carriage's capacity will share an equal proportion of the maximum capacity.\\n\\nCreate a function which returns the index of the first carriage which holds 50% or less of its maximum capacity. If no such carriage exists, return -1.\\n\\nWorked Example\\nfindaseat(200, [35, 23, 18, 10, 40]) ➞ 2\\n\\nTh\",\"tags\":[\"loops\",\"numbers\",\"interview\"],\"timestamp\":{\"$date\":1612702679321},\"title\":\"Crowded Carriage Capacity\",\"family\":[{\"_id\":\"qphEa8vtYY9AvADN8\",\"language\":\"cpp\"},{\"_id\":\"A2M6aC7BR2P4Qj2Kr\",\"language\":\"java\"},{\"_id\":\"auxE4Rj2YNcHNqE7H\",\"language\":\"javascript\"},{\"_id\":\"iFdEfPoYKwB9wNKXi\",\"language\":\"php\"},{\"_id\":\"XfSvKco6KZFRfgQyj\",\"language\":\"python3\"},{\"_id\":\"A6JKk5Nc9vvrXnfqb\",\"language\":\"ruby\"}]}}"]