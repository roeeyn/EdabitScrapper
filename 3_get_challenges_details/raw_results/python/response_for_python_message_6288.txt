a["{\"msg\":\"result\",\"id\":\"1854\",\"result\":{\"_id\":\"ZeeWN5NdFa8ALJq5G\",\"author\":\"Joshua Señoron\",\"authorId\":\"PXAcsKkssS2yLyDv2\",\"code\":\"def nearest_chapter(chapt, page):\\n\\t\",\"difficulty\":2.537037037037037,\"quality\":4.928571428571429,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"EjkH89XENvuZXg8RL\",\"instructions\":\"Create a function that returns which chapter is **nearest** to the page you're on. If two chapters are equidistant, return the chapter with the **higher** page number.\\n\\n### Examples\\n```\\nnearest_chapter({\\n  \\\"Chapter 1\\\" : 1,\\n  \\\"Chapter 2\\\" : 15,\\n  \\\"Chapter 3\\\" : 37\\n}, 10) ➞ \\\"Chapter 2\\\"\\n\\n\\nnearest_chapter({\\n  \\\"New Beginnings\\\" : 1,\\n  \\\"Strange Developments\\\" : 62,\\n  \\\"The End?\\\" : 194,\\n  \\\"The True Ending\\\" : 460\\n}, 200) ➞ \\\"The End?\\\"\\n\\n\\nnearest_chapter({\\n  \\\"Chapter 1a\\\" : 1,\\n  \\\"Chapter 1b\\\" : 5\\n}, 3) ➞ \\\"Chapter 1b\\\"\\n```\\n\\n### Notes\\nAll page numbers in the dictionary will be valid integers.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(nearest_chapter({\\n\\t\\\"Chapter 1\\\" : 1, \\n\\t\\\"Chapter 2\\\" : 15,\\n\\t\\\"Chapter 3\\\" : 37\\n}, 10), \\\"Chapter 2\\\")\\n\\nTest.assert_equals(nearest_chapter({\\n\\t\\\"New Beginnings\\\" : 1,\\n\\t\\\"Strange Developments\\\" : 62,\\n\\t\\\"The End?\\\" : 194,\\n\\t\\\"The True Ending\\\" : 460\\n}, 200), \\\"The End?\\\")\\n\\nTest.assert_equals(nearest_chapter({\\n\\t\\\"Chapter 1a\\\" : 1,\\n\\t\\\"Chapter 1b\\\" : 5\\n}, 3), \\\"Chapter 1b\\\")\\n\\nTest.assert_equals(nearest_chapter({\\n\\t\\\"Chapter 1a\\\" : 1,\\n\\t\\\"Chapter 1b\\\" : 5,\\n\\t\\\"Chapter 1c\\\" : 50,\\n\\t\\\"Chapter 1d\\\" : 100\\n}, 75), \\\"Chapter 1d\\\")\\n\\nTest.assert_equals(nearest_chapter({\\n\\t\\\"Chapter 1a\\\" : 1,\\n\\t\\\"Chapter 1b\\\" : 5,\\n\\t\\\"Chapter 1c\\\" : 50,\\n\\t\\\"Chapter 1d\\\" : 100,\\n\\t\\\"Chapter 1e\\\" : 200\\n}, 150), \\\"Chapter 1e\\\")\\n\\nTest.assert_equals(nearest_chapter({\\n\\t\\\"Chapter 1a\\\" : 1,\\n\\t\\\"Chapter 1b\\\" : 5,\\n\\t\\\"Chapter 1c\\\" : 50,\\n\\t\\\"Chapter 1d\\\" : 100,\\n\\t\\\"Chapter 1e\\\" : 200\\n}, 74), \\\"Chapter 1c\\\")\\n\\nTest.assert_equals(nearest_chapter({\\n\\t\\\"Chapter 1a\\\" : 1,\\n\\t\\\"Chapter 1b\\\" : 5,\\n\\t\\\"Chapter 1c\\\" : 50,\\n\\t\\\"Chapter 1d\\\" : 100,\\n\\t\\\"Chapter 1e\\\" : 200,\\n\\t\\\"Chapter 1f\\\" : 400\\n}, 300), \\\"Chapter 1f\\\")\",\"language\":\"python3\",\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,3,3,5,3,3,4,4,2,3,3,1,0,1,2,3,3,3,1,1,1,2,3,0,2,4,5,2,5,4,3,3,2,4,3,0,0,3,3,4,4,0,2,2,1,4,2,2,0,4],\"quality\":[5,5,5,5,5,4,5,5,5,5,5,5,5,5],\"rators\":[\"PXAcsKkssS2yLyDv2\",\"6428wKHtwKkFdvBs5\",\"8PwfYqoDQFThzNtvf\",\"zPzodf6p8hHJpDWha\",\"RSv8NXPgK3wZfufTW\",\"tAF9Gf6PiGogbZuWs\",\"xn7uGNKeAwPEkP9oA\",\"s5M5RvgqR9BhB9JoC\",\"gb9rvGus2Jv7bjZSs\",\"p8qqFdJ3FSk5x9z3G\",\"hZW6j5s6RHpx35phy\",\"EFjSWc7WkcPoRphfa\",\"aEm3Wvj2rFYRL8Lrb\",\"HF28xZKSLM9wEuqNg\",\"yjtdwc2AC4jA2RWtn\",\"mDWNyaaQ9hvPCRzSd\",\"a777e8chPvJkY3tKa\",\"8JyqsSbN2FJXPr3cw\",\"Ecg4m7srYGgZsb4Ck\",\"4fhjJBvLBWh6QeSih\",\"8sNv5PTHa7XQ8bNqR\",\"w3o9qJuPR62HHh9mx\",\"SExX3m5YftBWmsk2e\",\"qPpQfR5KyDb5Y3EFf\",\"2XqgeTopdma89viw3\",\"Xk2g4CNFAnYcvxiSr\",\"iS5BrkGLzJyPK7nKt\",\"QRv96jmNaYsWkxQEG\",\"gJYuGdkXEWWmGRLzu\",\"TxsYMnonbDnTQ8XDf\",\"R4SjTgDnpigJYDLyL\",\"N3tLQqsAyo76aDBh4\",\"J5T8gZqiZXFuFDTQ7\",\"8nE8QHnFYsHCFebte\",\"fSQSHjW3e72MrWxbD\",\"J3upzLHuEwXH7Z2hx\",\"amfj3y4oZMprJ96fg\",\"NfMJuiBk6FN5Jc6ow\",\"Jqk2uJZZxEv5wZFze\",\"SuvvczCnd2TjKWCcu\",\"qAby4AWXmTNeusvg3\",\"iojEnnY9FsMfYzp6f\",\"SGhPxX5bHGL8zZqtt\",\"2PufnQcsHsfymufX3\",\"qZQxPQ2kaNKAMesHT\",\"AasGs8AeX9Lcb9xJn\",\"P7NmFbCJ5offXMRvB\",\"LQxof8pGabGuWP7Gn\",\"HqmxnQJM66Y57twhn\",\"T6iBEE2jp7f7iEF2P\",\"fznzd3qnvtbFkkizz\",\"Yp7uvStL97cC9fKkY\",\"MpfytGFYF77emJ3cT\",\"3KkyQm77zsew58Dc2\",\"gKnWjDjwrJh7MK2df\",\"oBcs8GLX2ZFLXQy8y\",\"fbr22rabEJMfBp7vD\",\"GTKsdeEihE636Le9i\",\"euPBBaYXyS8RBr9KB\",\"suArq5BbSy7gD6xri\",\"55RQznnuTGpsj3EXd\",\"n2qKKxomPnb4zez5M\",\"iqmPb9JuJDgTFeR8Q\"],\"total\":68},\"flags\":0},\"summary\":\"Create a function that returns which chapter is nearest to the page you're on. If two chapters are equidistant, return the chapter with the higher page number.\\n\\nExamples\\nnearest_chapter({\\n  \\\"Chapter 1\\\" : 1,\\n  \\\"Chapter 2\\\" : 15,\\n  \\\"Chapter 3\\\" : 37\\n}, 10) ➞ \\\"Chapter 2\\\"\\n\\nnearest_chapter({\\n  \\\"New Beginnings\\\" : 1,\\n  \\\"Strange Developments\\\" : 62,\\n  \\\"The End?\\\" : 194,\",\"tags\":[\"objects\",\"math\",\"loops\"],\"timestamp\":{\"$date\":1601840877909},\"title\":\"Nearest Chapter\",\"family\":[{\"_id\":\"WtxvjezcFYGQo2v48\",\"language\":\"java\"},{\"_id\":\"E5kxeJA782rNX2bch\",\"language\":\"javascript\"},{\"_id\":\"ZeeWN5NdFa8ALJq5G\",\"language\":\"python3\"}]}}"]