a["{\"msg\":\"result\",\"id\":\"1945\",\"result\":{\"_id\":\"J9fCHDa3yYJWnK3A7\",\"author\":\"Deep Xavier\",\"authorId\":\"a777e8chPvJkY3tKa\",\"code\":\"def is_happy(n):\\n\\t# your recursive solution here\",\"difficulty\":2.7142857142857144,\"quality\":4.260869565217392,\"familyId\":\"49QQ7SqTT68etHGdA\",\"instructions\":\"A **happy number** is a number which yields a `1` by repeatedly summing up the square of its digit. If such a process results in an endless cycle of numbers containing `4`, the number is said to be an **unhappy number**.\\n\\nCreate a function that accepts a number and determines whether the number is a *happy number* or not. Return `True` if so, `False` otherwise.\\n\\n\\n### Examples\\n```\\nis_happy(67) ➞ False\\n\\nis_happy(89) ➞ False\\n\\nis_happy(139) ➞ True\\n\\nis_happy(1327) ➞ False\\n\\nis_happy(2871) ➞ False\\n\\nis_happy(3970) ➞ True\\n```\\n\\n\\n### Notes\\n- You are expected to solve this challenge via recursion.\\n- You can check on the **Resources** tab for more details about recursion.\\n- A non-recursive version of this challenge can be found in [here](https://edabit.com/challenge/rGAcibgZ6u9MtasfW).\",\"isHidden\":false,\"lab\":\"from inspect import getsource\\nfrom re import findall, MULTILINE\\n\\ndef check_recursive(fn):\\n  try:\\n    src, n = getsource(fn), fn.__name__\\n    if n == '<lambda>': n = src.split('=')[0].strip()\\n    return len(findall(n, src, flags=MULTILINE)) > 1\\n  except OSError: return True\\n\\n\\nTest.assert_not_equals(False, check_recursive(is_happy), 'Recursion is required!')\\n\\nnum_vector, res_vector = [[1, 10, 44, 67, 89, 139, 1327, 2871, 3970, 5209, 6329, 8888, 9331, 10000],\\n  [True, True, True, False, False, True, False, False, True, False, True, False, True, True]\\n]\\n\\nfor i, n in enumerate(num_vector): Test.assert_equals(res_vector[i], is_happy(n))\",\"language\":\"python3\",\"summary\":\"A happy number is a number which yields a 1 by repeatedly summing up the square of its digit. If such a process results in an endless cycle of numbers containing 4, the number is said to be an unhappy number.\\n\\nCreate a function that accepts a number and determines whether the number is a happy number or not. Return True if so, False otherwise.\\n\\nExamples\\nis_hap\",\"tags\":[\"arrays\",\"recursion\",\"validation\"],\"timestamp\":{\"$date\":1601360447906},\"title\":\"Recursion: Happy Number\",\"stats\":{\"completed\":{\"total\":82,\"ratings\":[5,5,5,5,5,4,5,3,3,2,2,5,3,3,2,3,2,2,5,0,2,0,4,5,1,2,2,3,3,5,4,2,1,3,2,3,2,5,5,4,2,5,2,1,2,0,2,3,2,4,3,0,3,1,4,0,1,2,2,1,1,3,0],\"quality\":[5,2,4,5,5,4,4,4,5,4,5,5,2,5,3,5,3,5,4,5,4,5,5],\"rators\":[\"a777e8chPvJkY3tKa\",\"8PwfYqoDQFThzNtvf\",\"aEm3Wvj2rFYRL8Lrb\",\"foytX6kH9wiSYqLtT\",\"7D76ZPLjgjZideoy9\",\"qD2LrwaDrSdiybLKY\",\"tAF9Gf6PiGogbZuWs\",\"gJYuGdkXEWWmGRLzu\",\"iS5BrkGLzJyPK7nKt\",\"s5M5RvgqR9BhB9JoC\",\"J3upzLHuEwXH7Z2hx\",\"Yp7uvStL97cC9fKkY\",\"8JyqsSbN2FJXPr3cw\",\"fSQSHjW3e72MrWxbD\",\"Jqk2uJZZxEv5wZFze\",\"SGhPxX5bHGL8zZqtt\",\"SbGLSZ5piLATC8bop\",\"p8qqFdJ3FSk5x9z3G\",\"yr822PZmmiDDenxpB\",\"2k7JfdCnTaxXSi8HG\",\"4xwButZn34q92d9Yn\",\"KXnxMWSphrE8hsvyG\",\"sh93GfTP59nhgPdY3\",\"n2BRY9X8899dcG8Bw\",\"5dHucvf2qBYyKim7X\",\"XuwZznbqD8GqjjGMc\",\"YyXcTjfNCoZ4wsLaB\",\"8sNv5PTHa7XQ8bNqR\",\"HqpbA6C6zkAmDsaEm\",\"F6PRjJDeA2GkcGyyM\",\"58M252WF7SPRinfBx\",\"jqzdXd4EARdwPLaj8\",\"eaeho3Mtc84ZxtFQq\",\"eHcgvkTGsH7ZziqBo\",\"DPi9QGLctq2y76KuE\",\"AJwBauGHyrbqgDYce\",\"XNmN6ztj36a7eChbD\",\"J23RcmzbdtBbPCTjT\",\"PmomCDGw8Z9gM6SjE\",\"W6Yn9jErAR8W6ugbh\",\"8KZXR5k4XYsppctFK\",\"HdapHJPXHZwFYBCnn\",\"2PufnQcsHsfymufX3\",\"TWDNxvNQNSo9c9nJy\",\"vh8opxBtuFmi62ChH\",\"NfMJuiBk6FN5Jc6ow\",\"TzfFXjsN3n6kkFZSY\",\"b3Dk2LqoEgripS3Y3\",\"DNGkwLuAzEACszkAx\",\"7xtPMWcPabJjJ9WWA\",\"kWobGYgZWJxN6ZddF\",\"oXJbZzDbT6N2qgqR3\",\"fdmLeChnSi6RgNA8h\",\"bccs9koJxyQ9XNiLC\",\"kYfoAqvCbcnL9Nqxi\",\"yEDrzzFjReDWNt8By\",\"hkiz2Nv927cYGrA86\",\"dDXc2WncJNpKr5JhB\",\"ceuxK7jxKY9SCqTza\",\"nvbqMSPcB5kmwFjEF\",\"3JR9S6Rj5LicgMx2X\",\"XHShZ3WMPgGEA2vkR\",\"Dkmhhh8whDTD2NfMq\",\"aEwDmryb2woarWS82\",\"iojEnnY9FsMfYzp6f\",\"aiPq9uFZGF8FDEZz8\",\"pEdiHJxCwgzo6zWp8\",\"yRPusHN4txBbzCeoz\",\"QRv96jmNaYsWkxQEG\",\"AasGs8AeX9Lcb9xJn\",\"yjtdwc2AC4jA2RWtn\",\"MpfytGFYF77emJ3cT\",\"p4hvRAJMx84x5hBHc\",\"T6iBEE2jp7f7iEF2P\",\"hPZyDDcegPqPAML7S\",\"rhS8qXRjZcpDXkwnE\",\"gXTAie79kiw28tx5u\",\"yTtSCvGPyYna6JuRC\",\"JGhm2n33DfSXc4F2j\",\"9ivvGvJGvtQfigQaZ\",\"WB8PBW8Bc7Jvns5i9\"]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":1},\"editorId\":\"a777e8chPvJkY3tKa\",\"family\":[{\"_id\":\"oibF2LtNoiGsJuj6b\",\"language\":\"java\"},{\"_id\":\"GnF85aA7XgZdZYrZp\",\"language\":\"javascript\"},{\"_id\":\"J9fCHDa3yYJWnK3A7\",\"language\":\"python3\"}]}}"]