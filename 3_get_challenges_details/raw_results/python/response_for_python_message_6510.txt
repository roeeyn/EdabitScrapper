a["{\"msg\":\"result\",\"id\":\"1964\",\"result\":{\"_id\":\"dix2XgYpxcsmaukA7\",\"author\":\"persolut\",\"authorId\":\"xn7uGNKeAwPEkP9oA\",\"code\":\"def express_factors(n):\\n\\t\",\"difficulty\":2.742857142857143,\"editorId\":\"BkPgkDQGHm66X4Qai\",\"familyId\":\"3SCSPcJX94fzq4FY2\",\"instructions\":\"Create a function that takes a positive integer and returns a string expressing how the number can be made by multiplying powers of its prime factors.\\n\\n### Examples\\n```\\nexpress_factors(2) ➞ \\\"2\\\"\\n\\nexpress_factors(4) ➞ \\\"2^2\\\"\\n\\nexpress_factors(10) ➞ \\\"2 x 5\\\"\\n\\nexpress_factors(60) ➞ \\\"2^2 x 3 x 5\\\"\\n```\\n\\n### Notes\\n- All inputs will be positive integers in the range 1 < n < 10,000.\\n- If a factor is repeated express it in the form **\\\"x^y\\\"** where x is the factor and y is the number of repetitions of the factor.\\n- If `n` is a prime number, return `n` as a string as in example #1 above.\\n- Factors should appear in ascending order in the expression.\\n- Make sure you include the space either side of the multiplication sign, `\\\" x \\\"`.\\n- Check the **Resources** if you need to understand **Prime Factorization**.\",\"isFree\":false,\"isHidden\":false,\"lab\":\"Test.assert_equals(express_factors(2), \\\"2\\\")\\nTest.assert_equals(express_factors(4), \\\"2^2\\\")\\nTest.assert_equals(express_factors(10), \\\"2 x 5\\\")\\nTest.assert_equals(express_factors(11), \\\"11\\\")\\nTest.assert_equals(express_factors(29), \\\"29\\\")\\nTest.assert_equals(express_factors(60), \\\"2^2 x 3 x 5\\\")\\nTest.assert_equals(express_factors(100), \\\"2^2 x 5^2\\\")\\nTest.assert_equals(express_factors(151), \\\"151\\\")\\nTest.assert_equals(express_factors(323), \\\"17 x 19\\\")\\nTest.assert_equals(express_factors(997), \\\"997\\\")\\nTest.assert_equals(express_factors(3349), \\\"17 x 197\\\")\\nTest.assert_equals(express_factors(5040), \\\"2^4 x 3^2 x 5 x 7\\\")\\nTest.assert_equals(express_factors(6097), \\\"7 x 13 x 67\\\")\\nTest.assert_equals(express_factors(8192), \\\"2^13\\\")\\nTest.assert_equals(express_factors(9870), \\\"2 x 3 x 5 x 7 x 47\\\")\\nTest.assert_equals(express_factors(9973), \\\"9973\\\")\\nTest.assert_equals(express_factors(9999), \\\"3^2 x 11 x 101\\\")\",\"language\":\"python3\",\"quality\":5,\"stats\":{\"completed\":{\"ratings\":[3,3,3,3,3,3,5,3,5,4,3,4,0,3,3,0,2,3,4,3,2,3,3,1,3,4,4,1,3,2,3,2,2,0,3],\"quality\":[5,5,5,5],\"rators\":[\"xn7uGNKeAwPEkP9oA\",\"5dHucvf2qBYyKim7X\",\"s5M5RvgqR9BhB9JoC\",\"8PwfYqoDQFThzNtvf\",\"tAF9Gf6PiGogbZuWs\",\"aEm3Wvj2rFYRL8Lrb\",\"aCNWav8S8Try9RkC6\",\"PbFZKHNGGqEacTSQS\",\"4fhjJBvLBWh6QeSih\",\"h4x2jaMdj5aQZbW5g\",\"FdB7yZRr2ZjaFQcpj\",\"SGhPxX5bHGL8zZqtt\",\"HF28xZKSLM9wEuqNg\",\"iS5BrkGLzJyPK7nKt\",\"aAFKLxcnBD2ZrdDnJ\",\"xzZgH6C4hNAGviegv\",\"mDWNyaaQ9hvPCRzSd\",\"DPi9QGLctq2y76KuE\",\"8sNv5PTHa7XQ8bNqR\",\"eHcgvkTGsH7ZziqBo\",\"srJ34BaybkQh3qRkM\",\"iojEnnY9FsMfYzp6f\",\"J3upzLHuEwXH7Z2hx\",\"gJYuGdkXEWWmGRLzu\",\"QRv96jmNaYsWkxQEG\",\"yjtdwc2AC4jA2RWtn\",\"gb9rvGus2Jv7bjZSs\",\"AasGs8AeX9Lcb9xJn\",\"MpfytGFYF77emJ3cT\",\"2PufnQcsHsfymufX3\",\"gXTAie79kiw28tx5u\",\"GTKsdeEihE636Le9i\",\"T6iBEE2jp7f7iEF2P\",\"buX4mCQhtXCfBjeno\"],\"total\":38},\"flags\":0},\"summary\":\"Create a function that takes a positive integer and returns a string expressing how the number can be made by multiplying powers of its prime factors.\\n\\nExamples\\nexpress_factors(2) ➞ \\\"2\\\"\\n\\nexpress_factors(4) ➞ \\\"2^2\\\"\\n\\nexpress_factors(10) ➞ \\\"2 x 5\\\"\\n\\nexpress_factors(60) ➞ \\\"2^2 x 3 x 5\\\"\\n\\nNotes\\nAll inputs will be positive integers in the range 1 < n < 10,000.\\nIf a fa\",\"tags\":[\"algorithms\",\"formatting\",\"math\"],\"timestamp\":{\"$date\":1603191755075},\"title\":\"Powerful Prime Factor\",\"family\":[{\"_id\":\"RZwB74ERGqa6FY3C2\",\"language\":\"cpp\"},{\"_id\":\"cR976ve6HR7bzBaEa\",\"language\":\"csharp\"},{\"_id\":\"B2v5qnwvYK929TnWB\",\"language\":\"javascript\"},{\"_id\":\"dix2XgYpxcsmaukA7\",\"language\":\"python3\"},{\"_id\":\"FmprgBBEMz3pTGbpa\",\"language\":\"ruby\"}]}}"]