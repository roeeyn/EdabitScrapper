a["{\"msg\":\"result\",\"id\":\"2293\",\"result\":{\"_id\":\"8xZxYsG7LDpcpXXZ9\",\"author\":\"Alessandro Manicone\",\"authorId\":\"AasGs8AeX9Lcb9xJn\",\"code\":\"import re\\n\\ninvalid = \\\"yourregularexpressionhere\\\"\\nweak = \\\"yourregularexpressionhere\\\"\\nstrong = \\\"yourregularexpressionhere\\\"\",\"difficulty\":3.6,\"familyId\":\"C3nLLkSKxZuckZKK2\",\"instructions\":\"Write three **regular expressions** that will be passed to `re.match()` in order to test a password strength:\\n- One called `invalid` that will match a password if it's **shorter than 6 characters** or **longer than 30 characters**, if it contains **any disallowed characters**, or if it does **not** contain **at least one** character from each category.\\n- One called `weak` that will match a **valid** password that is _either_ **between 6 and 15 characters long** _or_ contains **less than three** characters from each category.\\n- One called `strong` that will match a **valid** password **between 16 and 30 characters long** and containing **at least three** character from each category.\\n\\n### Categories\\n- **Lowercase**: all lowercase letters from \\\"a\\\" to \\\"z\\\".\\n- **Uppercase**: all uppercase letters from \\\"A\\\" to \\\"Z\\\".\\n- **Numbers**: all digits from 0 to 9.\\n- **Symbols**: all of the following symbols `!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_\\\\{|}`\\n\\n### Disallowed Characters\\nSpaces, tabs, line breaks and any other character that doesn't belong in one of the four categories.\\n\\n### Example\\n```\\n# There are four invalid, four weak and four strong passwords (in that order).\\n\\npasswords = [\\n    r'a3%Z',\\n    r'qwerty123456666666666666666666',\\n    r'sjfajfewjrjiodjfsrw0998(*(8q9432-4dfjsoijfj3))',\\n    r'this is an   invalid password',\\n    r'3d/-\\\\b1T',\\n    r'This1s4VeryVeryl0n6Pa$$word',\\n    r'AAaa11&&',\\n    r'yFtZaqR%eN3nsu8VvxqK!LDfxbCnj',\\n    r'S*=7v!7rM5k!H+)@',\\n    r'H#4qq2_j[T|R!(7:;.aT',\\n    r'AP6&Ju~=ec<?\\\"zj#8frDq=\\\\3{%^P$',\\n    r\\\"1111aaaaA^AA;;;1111aaaaAAAA;;'\\\"\\n]\\n\\ninvalid = \\\"yourregularexpressionhere\\\"\\nweak = \\\"yourregularexpressionhere\\\"\\nstrong = \\\"yourregularexpressionhere\\\"\\n\\n[bool(re.match(invalid, i)) for i in passwords] ➞ [True, True, True, True, False, False, False, False, False, False, False, False]\\n[bool(re.match(weak, i)) for i in passwords] ➞ [False, False, False, False, True, True, True, True, False, False, False, False]\\n[bool(re.match(strong, i)) for i in passwords] ➞ [False, False, False, False, False, False, False, False, True, True, True, True]\\n```\\n\\n### Notes\\n- You **don't** need to write a function, just the pattern.\\n- Do **not** remove `import re` from the code.\\n- Find more info on RegEx in **Resources**.\\n- You can find all the challenges of this series [here](https://edabit.com/collection/8geJw3tgpm5LDAxwR).\",\"isHidden\":false,\"lab\":\"pw1 = r'a3%Z'\\npw2 = r'qwerty123456666666666666666666'\\npw3 = r'sjfajfewjrjiodjfsrw0998(*(8q9432-4dfjsoijfj3))'\\npw4 = r'this is an\\t invalid password'\\npw5 = r'3d/-\\\\b1T'\\npw6 = r'This1s4VeryVeryl0n6Pa$$word'\\npw7 = r'AAAaaa111&&&'\\npw8 = r'yFtZaqR%eN3nsu8VvxqK!LDfxbCnj'\\npw9 = r'S*=7v!7rM5k!H+)@'\\npw10 = r'H#4qq2_j[T!R!(7:;.aT'\\npw11 = r'AP6&Ju$=ec<?\\\"zj#8frDq=\\\\3{%^P$'\\npw12 = r\\\"1111aaaaA^AA;;;1111aaaaAAAA;;'\\\"\\n\\nlst = [pw1, pw2, pw3, pw4, pw5, pw6, pw7, pw8, pw9, pw10, pw11, pw12]\\n\\nfor idx, i in enumerate(lst):\\n\\tiv, wk, st = (bool(re.match(pattern, i)) for pattern in (invalid, weak, strong))\\n\\t\\n\\tprint(\\\"Test for pw{}: '{}'\\\".format(idx+1, i))\\n\\tprint('Expected result: {}'.format(['Invalid', 'Weak', 'Strong'][(4 <= idx) + (8 <= idx)]))\\n\\tprint('---------$---------')\\n\\tprint('Received result:')\\n\\tprint('Invalid ({})'.format(iv))\\n\\tprint('Weak ({})'.format(wk))\\n\\tprint('Strong ({})'.format(st))\\n\\tprint('---------$---------')\\n\\tTest.assert_equals(iv, idx < 4)\\n\\tTest.assert_equals(wk, 4 <= idx < 8)\\n\\tTest.assert_equals(st, 8 <= idx)\\n\\tprint('---------$---------')\\n\\t\\nprint('CONGRATULATIONS')\\nprint(\\\"You've solved the Ultimate RegEx Challenge\\\")\\n\\n#Note from the original:\\n#Credits to https://levelup.gitconnected.com/extremely-useful-regular-expression-examples-for-real-world-applications-567e844a0822\\n\\n#Translated from JavaScript.\\n#The RegEx series was originally posted by Isaac Pak.\",\"language\":\"python3\",\"summary\":\"Write three regular expressions that will be passed to re.match() in order to test a password strength:\\nOne called invalid that will match a password if it's shorter than 6 characters or longer than 30 characters, if it contains any disallowed characters, or if it does not contain at least one character from each category.\\nOne called weak that will match a val\",\"tags\":[\"regex\",\"validation\"],\"timestamp\":{\"$date\":1588019515911},\"title\":\"RegEx Exercise #5: Password Validation\",\"stats\":{\"completed\":{\"total\":15,\"ratings\":[2,2,2,2,2,5,5,5,5,0,5,5,1,4,5,5,4,5,5,3],\"rators\":[\"AasGs8AeX9Lcb9xJn\",\"aEm3Wvj2rFYRL8Lrb\",\"8PwfYqoDQFThzNtvf\",\"DwetpbChQM4r6Gwah\",\"Cfx3cu6CedA3Hi6Fw\",\"3ECpdeExhBmkYXtba\",\"bLpgu8xTdpDPFSAsM\",\"3MybBtCNPcFHLMYmJ\",\"SQMvudwwDLtganaJu\",\"Kg94pDSdZJ2wSkMcY\",\"R4SjTgDnpigJYDLyL\",\"pscBduNyf8TDHe2Km\",\"8WpvgSbQciTQWdd8T\",\"d6iEb2BDDofyeePh9\",\"yjtdwc2AC4jA2RWtn\"],\"quality\":[]},\"instructions\":{\"upvoters\":[],\"downvoters\":[]},\"flags\":0},\"editorId\":\"AasGs8AeX9Lcb9xJn\",\"quality\":0,\"family\":[{\"_id\":\"RCbczQk6jdAd5N46D\",\"language\":\"javascript\"},{\"_id\":\"8xZxYsG7LDpcpXXZ9\",\"language\":\"python3\"}]}}"]