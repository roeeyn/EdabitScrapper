[
  {
    "_id": "8ym3dKrL3svkYr4h4",
    "difficulty": 0.2088101489067479,
    "language": "python3",
    "summary": "This is an introduction to how challenges on Edabit work. In the Code tab above you'll see a starter function that looks like this:\n\ndef hello():\n\nAll you have to do is type return \"hello edabit.com\" on the second line and then click the Check button. If you did this correctly, the button will turn red and say SUBMIT FINAL. Click it and see what happens.\n\nNote",
    "tags": [
      "strings",
      "language_fundamentals"
    ],
    "title": "How Edabit Works"
  },
  {
    "_id": "rZToTkR5eB9Zn4zLh",
    "difficulty": 0.27223796033994335,
    "language": "python3",
    "summary": "Create a function that takes two numbers as arguments and returns their sum.\n\nExamples\naddition(3, 2) ➞ 5\n\naddition(-3, -6) ➞ -9\n\naddition(7, 3) ➞ 10\n\nNotes\nDon't forget to return the result.\nIf you get stuck on a challenge, find help in the Resources tab.\nIf you're really stuck, unlock solutions in the Solutions tab.",
    "tags": [
      "algebra",
      "math",
      "numbers",
      "language_fundamentals"
    ],
    "title": "Return the Sum of Two Numbers"
  },
  {
    "_id": "KjCS7occ9hfu5snpb",
    "difficulty": 0.30317100792751983,
    "language": "python3",
    "summary": "Create a function that takes a number as an argument, increments the number by +1 and returns the result.\n\nExamples\naddition(0) ➞ 1\n\naddition(9) ➞ 10\n\naddition(-3) ➞ -2\n\nNotes\nDon't forget to return the result.\nIf you get stuck on a challenge, find help in the Resources tab.\nIf you're really stuck, unlock solutions in the Solutions tab.",
    "tags": [
      "math",
      "numbers",
      "algebra"
    ],
    "title": "Return the Next Number from the Integer Passed"
  },
  {
    "_id": "FQyaaJx7orS7tiwz8",
    "difficulty": 0.3214665067671749,
    "language": "python3",
    "summary": "Write a function that takes an integer minutes and converts it to seconds.\n\nExamples\nconvert(5) ➞ 300\n\nconvert(3) ➞ 180\n\nconvert(2) ➞ 120\n\nNotes\nDon't forget to return the result.\nIf you get stuck on a challenge, find help in the Resources tab.\nIf you're really stuck, unlock solutions in the Solutions tab.",
    "tags": [
      "language_fundamentals",
      "math",
      "numbers"
    ],
    "title": "Convert Minutes into Seconds"
  },
  {
    "_id": "aWLTzrRsrw7RakYrN",
    "difficulty": 0.35060255932413964,
    "language": "python3",
    "summary": "Write a function that takes the base and height of a triangle and return its area.\n\nExamples\ntri_area(3, 2) ➞ 3\n\ntri_area(7, 4) ➞ 14\n\ntri_area(10, 10) ➞ 50\n\nNotes\nThe area of a triangle is: (base * height) / 2\nDon't forget to return the result.\nIf you get stuck on a challenge, find help in the Resources tab.\nIf you're really stuck, unlock solutions in the Solu",
    "tags": [
      "math",
      "numbers",
      "geometry"
    ],
    "title": "Area of a Triangle"
  },
  {
    "_id": "CjXamaNRmKxwkmBxq",
    "difficulty": 0.36114732724902215,
    "language": "python3",
    "summary": "Fix the code in the code tab to pass this challenge (only syntax errors). Look at the examples below to get an idea of what the function should do.\n\nExamples\ncube(3) ➞ 27\n\ncube(5) ➞ 125\n\ncube(10) ➞ 1000\n\nNotes\nREAD EVERY WORD CAREFULLY, CHARACTER BY CHARACTER!\nDon't overthink this challenge; it's not supposed to be hard.",
    "tags": [
      "bugs",
      "language_fundamentals"
    ],
    "title": "Buggy Code (Part 1)"
  },
  {
    "_id": "nyeNvKWdDFKRAk4Da",
    "difficulty": 0.3621176121176121,
    "language": "python3",
    "summary": "Write a function that converts hours into seconds.\n\nExamples\nhowmanyseconds(2) ➞ 7200\n\nhowmanyseconds(10) ➞ 36000\n\nhowmanyseconds(24) ➞ 86400\n\nNotes\n60 seconds in a minute, 60 minutes in an hour\nDon't forget to return your answer.",
    "tags": [
      "math",
      "numbers",
      "language_fundamentals"
    ],
    "title": "Convert Hours into Seconds"
  },
  {
    "_id": "Zerwo2AENbvRZTe83",
    "difficulty": 0.3725059181602976,
    "language": "python3",
    "summary": "Create a function that finds the maximum range of a triangle's third edge, where the side lengths are all integers.\n\nExamples\nnext_edge(8, 10) ➞ 17\n\nnext_edge(5, 7) ➞ 11\n\nnext_edge(9, 2) ➞ 10\n\nNotes\n(side1 + side2) - 1 = maximum range of third edge.\nThe side lengths of the triangle are positive integers.\nDon't forget to return the result.",
    "tags": [
      "algorithms",
      "math",
      "numbers"
    ],
    "title": "Maximum Edge of a Triangle"
  },
  {
    "_id": "KWoj7kWiHRqJtG6S2",
    "difficulty": 0.3786882423825099,
    "language": "python3",
    "summary": "There is a single operator in Python, capable of providing the remainder of a division operation. Two numbers are passed as parameters. The first parameter divided by the second parameter will have a remainder, possibly zero. Return that value.\n\nExamples\nremainder(1, 3) ➞ 1\n\nremainder(3, 4) ➞ 3\n\nremainder(5, 5) ➞ 0\n\nremainder(7, 2) ➞ 1\n\nNotes\nThe tests only us",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "Return the Remainder from Two Numbers"
  },
  {
    "_id": "GPmoRCZKkyNtoJMcN",
    "difficulty": 0.3842382873099597,
    "language": "python3",
    "summary": "Create a function that takes a string and returns it as an integer.\n\nExamples\nstring_int(\"6\") ➞ 6\n\nstring_int(\"1000\") ➞ 1000\n\nstring_int(\"12\") ➞ 12\n\nNotes\nAll numbers will be whole.\nAll numbers will be positive.",
    "tags": [
      "strings",
      "numbers",
      "language_fundamentals"
    ],
    "title": "Return a String as an Integer"
  },
  {
    "_id": "xbZR26rHMNo32yz35",
    "difficulty": 0.3854989231873654,
    "language": "python3",
    "summary": "Create a function that takes the age and return the age in days.\n\nExamples\ncalc_age(65) ➞ 23725\n\ncalc_age(0) ➞ 0\n\ncalc_age(20) ➞ 7300\n\nNotes\nUse 365 days as the length of a year for this challenge.\nIgnore leap years and days between last birthday and now.\nExpect only positive integer inputs.",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "Convert Age to Days"
  },
  {
    "_id": "Yx2a9B57vXRuPevGh",
    "difficulty": 0.3906617904914583,
    "language": "python3",
    "summary": "Create a function that takes length and width and finds the perimeter of a rectangle.\n\nExamples\nfind_perimeter(6, 7) ➞ 26\n\nfind_perimeter(20, 10) ➞ 60\n\nfind_perimeter(2, 9) ➞ 22\n\nNotes\nDon't forget to return the result.\nIf you're stuck, find help in the Resources tab.\nIf you're really stuck, find solutions in the Solutions tab.",
    "tags": [
      "math",
      "language_fundamentals",
      "numbers",
      "geometry"
    ],
    "title": "Find the Perimeter of a Rectangle"
  },
  {
    "_id": "v5gc8FQkDEepkqpfp",
    "difficulty": 0.3912175648702595,
    "language": "python3",
    "summary": "Create a function that takes voltage and current  and returns the calculated power.\n\nExamples\ncircuit_power(230, 10) ➞ 2300\n\ncircuit_power(110, 3) ➞ 330\n\ncircuit_power(480, 20) ➞ 9600\n\nNotes\nRequires basic calculation of electrical circuits (see Resources for info).",
    "tags": [
      "numbers",
      "math"
    ],
    "title": "Power Calculator"
  },
  {
    "_id": "mDzheHpwtqyXePEBE",
    "difficulty": 0.4007707129094412,
    "language": "python3",
    "summary": "Given an n-sided regular polygon n, return the total sum of internal angles (in degrees).\n\nExamples\nsum_polygon(3) ➞ 180\n\nsum_polygon(4) ➞ 360\n\nsum_polygon(6) ➞ 720\n\nNotes\nn will always be greater than 2.\nThe formula (n - 2) x 180 gives the sum of all the measures of the angles of an n-sided polygon.",
    "tags": [
      "math",
      "numbers",
      "functional_programming"
    ],
    "title": "Sum of Polygon Angles"
  },
  {
    "_id": "xWSjvoH7mEkSnqS7H",
    "difficulty": 0.4143077530226384,
    "language": "python3",
    "summary": "Create a function that takes a base number and an exponent number and returns the calculation.\n\nExamples\ncalculate_exponent(5, 5) ➞ 3125\n\ncalculate_exponent(10, 10) ➞ 10000000000\n\ncalculate_exponent(3, 3) ➞ 27\n\nNotes\nAll test inputs will be positive integers.\nDon't forget to return the result.\nIf you get stuck on a challenge, find help in the Resources tab.\nIf",
    "tags": [
      "logic",
      "loops",
      "math",
      "numbers"
    ],
    "title": "To the Power of _____"
  },
  {
    "_id": "QQp2o22huzBCkHesy",
    "difficulty": 0.4166666666666667,
    "language": "python3",
    "summary": "Create a function that takes a boolean variable flag and returns it as a string.\n\nExamples\nbooltostring(True) ➞ \"True\"\n\nbooltostring(False) ➞ \"False\"\n\nNotes\nDon't forget to return the result.\nIf you get stuck on a challenge, find help in the Resources tab.\nIf you're really stuck, unlock solutions in the Solutions tab.",
    "tags": [
      "bit_operations",
      "conditions",
      "logic",
      "strings"
    ],
    "title": "Boolean to String Conversion"
  },
  {
    "_id": "sLkTkfLgZYs5wejsg",
    "difficulty": 0.41678573647263467,
    "language": "python3",
    "summary": "Fix the code in the code tab to pass this challenge (only syntax errors). Look at the examples below to get an idea of what the function should do.\n\nExamples\nsquared(5) ➞ 25\n\nsquared(9) ➞ 81\n\nsquared(100) ➞ 10000\n\nNotes\nREAD EVERY WORD CAREFULLY, CHARACTER BY CHARACTER!\nDon't overthink this challenge; it's not supposed to be hard.",
    "tags": [
      "bugs",
      "language_fundamentals",
      "algebra"
    ],
    "title": "Correct the Mistakes"
  },
  {
    "_id": "hEQ3rBrKrztQK8qAd",
    "difficulty": 0.41856052248356207,
    "language": "python3",
    "summary": "Create a function that takes a list containing only numbers and return the first element.\n\nExamples\ngetfirstvalue([1, 2, 3]) ➞ 1\n\ngetfirstvalue([80, 5, 100]) ➞ 80\n\ngetfirstvalue([-500, 0, 50]) ➞ -500\n\nNotes\nThe first element in a list always has an index of 0.",
    "tags": [
      "arrays",
      "language_fundamentals"
    ],
    "title": "Return the First Element in a List"
  },
  {
    "_id": "gwqqc5p3oiFXRJAQm",
    "difficulty": 0.4209666570577496,
    "language": "python3",
    "summary": "Create a function that takes the number of wins, draws and losses and calculates the number of points a football team has obtained so far.\n\nwins get 3 points\ndraws get 1 point\nlosses get 0 points\n\nExamples\nfootball_points(3, 4, 2) ➞ 13\n\nfootball_points(5, 0, 2) ➞ 15\n\nfootball_points(0, 0, 1) ➞ 0\n\nNotes\nInputs will be numbers greater than or equal to 0.",
    "tags": [
      "algebra",
      "numbers",
      "math"
    ],
    "title": "Football Points"
  },
  {
    "_id": "QzXtDnSZL6y4ZcEvT",
    "difficulty": 0.42121629425614143,
    "language": "python3",
    "summary": "In this challenge, a farmer is asking you to tell him how many legs can be counted among all his animals. The farmer breeds three species:\n\nchickens = 2 legs\ncows = 4 legs\npigs = 4 legs\n\nThe farmer has counted his animals and he gives you a subtotal for each species. You have to implement a function that returns the total number of legs of all the animals.\n\nEx",
    "tags": [
      "algorithms",
      "math",
      "language_fundamentals"
    ],
    "title": "The Farm Problem"
  },
  {
    "_id": "YN9mNNc4mMPDxyhFf",
    "difficulty": 0.4216417910447761,
    "language": "python3",
    "summary": "A student learning Python was trying to make a function. His code should concatenate a passed string name with string \"Edabit\" and store it in a variable called result. He needs your help to fix this code.\n\nExamples\nname_string(\"Mubashir\") ➞ \"MubashirEdabit\"\n\nname_string(\"Matt\") ➞ \"MattEdabit\"\n\nname_string(\"python\") ➞ \"pythonEdabit\"\n\nNotes\nDon't forget to retu",
    "tags": [
      "bugs",
      "functional_programming",
      "language_fundamentals",
      "strings"
    ],
    "title": "Basic Variable Assignment"
  },
  {
    "_id": "PjcKZRx8YE5KzRN63",
    "difficulty": 0.422205718529521,
    "language": "python3",
    "summary": "Write a function that takes two integers (hours, minutes), converts them to seconds, and adds them.\n\nExamples\nconvert(1, 3) ➞ 3780\n\nconvert(2, 0) ➞ 7200\n\nconvert(0, 0) ➞ 0\n\nNotes\nDon't forget to return the result.\nIf you get stuck on a challenge, find help in the Resources tab.\nIf you're really stuck, unlock solutions in the Solutions tab.",
    "tags": [
      "language_fundamentals",
      "math"
    ],
    "title": "Convert Hours and Minutes into Seconds"
  },
  {
    "_id": "jKAjLk5epb8XDzTwC",
    "difficulty": 0.4222222222222222,
    "language": "python3",
    "summary": "You call your spouse in anger and a \"little\" argument takes place. Count the total amount of adjectives used. Given a dictionary of adjectives, return the total amount of adjectives used.\n\nExamples\ntotalamountadjectives({ \"a\": \"moron\" }) ➞ 1\n\ntotalamountadjectives({ \"a\": \"idiot\", \"b\": \"idiot\", \"c\": \"idiot\" }) ➞ 3\n\ntotalamountadjectives({ \"a\": \"moron\", \"b\": \"sc",
    "tags": [
      "objects",
      "arrays",
      "language_fundamentals"
    ],
    "title": "Burglary Series (14): Adjectives Total"
  },
  {
    "_id": "WKJwo2xDNjKxwtGoH",
    "difficulty": 0.42308089145687167,
    "language": "python3",
    "summary": "Write two functions:\n\nto_int() : A function to convert a string to an integer.\nto_str() : A function to convert an integer to a string.\n\nExamples\nto_int(\"77\") ➞ 77\n\nto_int(\"532\") ➞ 532\n\nto_str(77) ➞ \"77\"\n\nto_str(532) ➞ \"532\"\n\nNotes\nDon't forget to return the result.\nIf you get stuck on a challenge, find help in the Resources tab.\nIf you're really stuck, unlock",
    "tags": [
      "strings",
      "language_fundamentals"
    ],
    "title": "String to Integer and Vice Versa"
  },
  {
    "_id": "QJiqdu9QGMmAgK5Fi",
    "difficulty": 0.4233289646133683,
    "language": "python3",
    "summary": "Create a function that checks to see if two object arguments are equal to one another. Return True if the objects are equal, otherwise, return False.\n\nExamples\nThe first object parameter.\n\nobj_one = {\n  \"name\": \"Benny\",\n  \"phone\": \"3325558745\",\n  \"email\": \"benny@edabit.com\"\n}\n\nThe second object parameter.\n\nobj_two = {\n  \"name\": \"Jason\",\n  \"phone\": \"9853759720\"",
    "tags": [
      "objects",
      "validation",
      "language_fundamentals"
    ],
    "title": "Check if objOne Is Equal to objTwo"
  },
  {
    "_id": "XXJbGFEkrMWCp8yFn",
    "difficulty": 0.42440870387890256,
    "language": "python3",
    "summary": "Write a function that returns the string \"something\" joined with a space \" \" and the given argument a.\n\nExamples\ngivemesomething(\"is better than nothing\") ➞ \"something is better than nothing\"\n\ngivemesomething(\"Bob Jane\") ➞ \"something Bob Jane\"\n\ngivemesomething(\"something\") ➞ \"something something\"\n\nNotes\nAssume an input is given.",
    "tags": [
      "language_fundamentals",
      "strings"
    ],
    "title": "Return Something to Me!"
  },
  {
    "_id": "KWnJrMzK9CumnfxTF",
    "difficulty": 0.4247619047619048,
    "language": "python3",
    "summary": "You are counting points for a basketball game, given the amount of 3-pointers scored and 2-pointers scored, find the final points for the team and return that value\n(\\[2 -pointers scored, 3-pointers scored]).\n\nExamples\npoints(1, 1) ➞ 5\n\npoints(7, 5) ➞ 29\n\npoints(38, 8) ➞ 100\n\nNotes\nN/A",
    "tags": [
      "math",
      "numbers",
      "language_fundamentals"
    ],
    "title": "Basketball Points"
  },
  {
    "_id": "yfooETHj3sHoHTJsv",
    "difficulty": 0.42608089260808923,
    "language": "python3",
    "summary": "Create a function that returns True when num1 is equal to num2; otherwise return False.\n\nExamples\nissamenum(4, 8) ➞ False\n\nissamenum(2, 2) ➞  True\n\nissamenum(2, \"2\") ➞ False\n\nNotes\nDon't forget to return the result.",
    "tags": [
      "numbers",
      "language_fundamentals",
      "conditions",
      "validation"
    ],
    "title": "Are the Numbers Equal?"
  },
  {
    "_id": "Rx2pkSA9dCmtwS8xt",
    "difficulty": 0.4262972245428386,
    "language": "python3",
    "summary": "Create a function that takes a number as its only argument and returns True if it's less than or equal to zero, otherwise return False.\n\nExamples\nlessthanorequalto_zero(5) ➞ False\n\nlessthanorequalto_zero(0) ➞ True\n\nlessthanorequalto_zero(-2) ➞ True\n\nNotes\nDon't forget to return the result.\nIf you get stuck on a challenge, find help in the Resources tab.\nIf you",
    "tags": [
      "conditions",
      "validation",
      "language_fundamentals"
    ],
    "title": "Is the Number Less than or Equal to Zero?"
  },
  {
    "_id": "2HhmMdGPSpJ8EFrZe",
    "difficulty": 0.42701227830832195,
    "language": "python3",
    "summary": "Emmy has written a function that returns a greeting to users. However, she's in love with Mubashir, and would like to greet him slightly differently. She added a special case in her function, but she made a mistake.\n\nCan you help her?\n\nExamples\ngreeting(\"Matt\") ➞ \"Hello, Matt!\"\n\ngreeting(\"Helen\") ➞ \"Hello, Helen!\"\n\ngreeting(\"Mubashir\") ➞ \"Hello, my Love!\"\n\nNot",
    "tags": [
      "strings",
      "bugs",
      "conditions"
    ],
    "title": "Buggy Code (Part 4)"
  },
  {
    "_id": "D2Hvq6NZchp7Q6ftR",
    "difficulty": 0.4277726001863933,
    "language": "python3",
    "summary": "Create a function which returns the Modulo of the two given numbers.\n\nExamples\nmod(-13, 64) ➞ 51\n\nmod(50, 25) ➞ 0\n\nmod(-6, 3) ➞ 0\n\nNotes\nAll test cases contain valid numbers.",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "Proper Modulo Operator"
  },
  {
    "_id": "A7hyDnb72prWryeuY",
    "difficulty": 0.4290697674418605,
    "language": "python3",
    "summary": "Create a function that takes a list of numbers. Return the largest number in the list.\n\nExamples\nfindLargestNum([4, 5, 1, 3]) ➞ 5\n\nfindLargestNum([300, 200, 600, 150]) ➞ 600\n\nfindLargestNum([1000, 1001, 857, 1]) ➞ 1001\n\nNotes\nExpect either positive numbers or zero (there are no negative numbers).\nIf you get stuck on a challenge, find help in the Resources tab.",
    "tags": [
      "arrays",
      "sorting",
      "numbers",
      "loops"
    ],
    "title": "Find the Largest Number in a List"
  },
  {
    "_id": "ecSZ5kDBwCD3ctjE6",
    "difficulty": 0.4291293480524891,
    "language": "python3",
    "summary": "Create a function that takes a list of numbers and returns the smallest number in the list.\n\nExamples\nfindsmallestnum([34, 15, 88, 2]) ➞ 2\n\nfindsmallestnum([34, -345, -1, 100]) ➞ -345\n\nfindsmallestnum([-76, 1.345, 1, 0]) ➞ -76\n\nfindsmallestnum([0.4356, 0.8795, 0.5435, -0.9999]) ➞ -0.9999\n\nfindsmallestnum([7, 7, 7]) ➞ 7\n\nNotes\nTest cases contain decimals.\nIf yo",
    "tags": [
      "arrays",
      "loops",
      "sorting",
      "numbers"
    ],
    "title": "Find the Smallest Number in a List"
  },
  {
    "_id": "iBL3eDRWzpxgfQyHx",
    "difficulty": 0.43,
    "language": "python3",
    "summary": "Fix the code in the Code tab so the function returns true if and only if x is equal to 7. Try to debug code and pass all the tests.\n\nExamples\nis_seven(4) ➞ False\n\nis_seven(9) ➞ False\n\nis_seven(7) ➞ True\n\nNotes\nThe bug can be hard to find, so look closely!",
    "tags": [
      "bugs",
      "language_fundamentals",
      "validation"
    ],
    "title": "Fix the Expression"
  },
  {
    "_id": "XsJLwhAddzbxdQqr4",
    "difficulty": 0.43028645239723423,
    "language": "python3",
    "summary": "Create a function that takes a list and returns the difference between the smallest and biggest numbers.\n\nExamples\ndifferencemaxmin([10, 4, 1, 4, -10, -50, 32, 21]) ➞ 82\nSmallest number is -50, biggest is 32.\n\ndifferencemaxmin([44, 32, 86, 19]) ➞ 67\nSmallest number is 19, biggest is 86.\n\nNotes\nN/A",
    "tags": [
      "arrays",
      "numbers",
      "math",
      "loops"
    ],
    "title": "Difference of Max and Min Numbers in List"
  },
  {
    "_id": "cCWMeiJCP9Ef8XMq8",
    "difficulty": 0.4304953207030358,
    "language": "python3",
    "summary": "Create a function to concatenate two integer lists.\n\nExamples\nconcat([1, 3, 5], [2, 6, 8]) ➞ [1, 3, 5, 2, 6, 8]\n\nconcat([7, 8], [10, 9, 1, 1, 2]) ➞ [7, 8, 10, 9, 1, 1, 2]\n\nconcat([4, 5, 1], [3, 3, 3, 3, 3]) ➞ [4, 5, 1, 3, 3, 3, 3, 3]\n\nNotes\nDon't forget to return the result.\nSee Resources tab for more info.",
    "tags": [
      "arrays",
      "language_fundamentals",
      "numbers"
    ],
    "title": "Concatenating Two Integer Lists"
  },
  {
    "_id": "6fx8iNCHETW8KqAui",
    "difficulty": 0.4304969145826567,
    "language": "python3",
    "summary": "Given a list of integers, return the difference between the largest and smallest integers in the list.\n\nExamples\ndifference([10, 15, 20, 2, 10, 6]) ➞ 18\n20 - 2 = 18\n\ndifference([-3, 4, -9, -1, -2, 15]) ➞ 24\n15 - (-9) = 24\n\ndifference([4, 17, 12, 2, 10, 2]) ➞ 15\n\nNotes\nN/A",
    "tags": [
      "arrays",
      "math",
      "numbers"
    ],
    "title": "Maximum Difference"
  },
  {
    "_id": "pZ3HxBfvejsvkEDo4",
    "difficulty": 0.43074292228766864,
    "language": "python3",
    "summary": "Given two numbers, return True if the sum of both numbers is less than 100. Otherwise return False.\n\nExamples\nlessthan100(22, 15) ➞ True\n22 + 15 = 37\n\nlessthan100(83, 34) ➞ False\n83 + 34 = 117\n\nlessthan100(3, 77) ➞ True\n\nNotes\nN/A",
    "tags": [
      "math",
      "validation",
      "language_fundamentals"
    ],
    "title": "Less Than 100?"
  },
  {
    "_id": "uPtuNNTuASzPZMQrW",
    "difficulty": 0.43114897042055134,
    "language": "python3",
    "summary": "Create a function that accepts a list and returns the last item in the list. The list  can be either homogeneous or heterogeneous.\n\nExamples\ngetlastitem([1, 2, 3]) ➞ 3\n\ngetlastitem([\"cat\", \"dog\", \"duck\"]) ➞ \"duck\"\n\ngetlastitem([True, False, True]) ➞ True\n\ngetlastitem([7, \"String\", False]) ➞ False\n\nNotes\nDon't forget to return the result.\nIf you get stuck on a",
    "tags": [
      "arrays",
      "validation",
      "language_fundamentals"
    ],
    "title": "Return the Last Element in a List"
  },
  {
    "_id": "coRuMC4Ykksti8Z47",
    "difficulty": 0.4318253717178108,
    "language": "python3",
    "summary": "Create a function that takes a name and returns a greeting in the form of a string.\n\nExamples\nhello_name(\"Gerald\") ➞ \"Hello Gerald!\"\n\nhello_name(\"Tiffany\") ➞ \"Hello Tiffany!\"\n\nhello_name(\"Ed\") ➞ \"Hello Ed!\"\n\nNotes\nThe input is always a name (as string).\nDon't forget the exclamation mark!\nIf you get stuck on a challenge, find help in the Resources tab.\nIf you'r",
    "tags": [
      "strings",
      "language_fundamentals",
      "formatting"
    ],
    "title": "Name Greeting!"
  },
  {
    "_id": "HuWQaCpFR7iTeCvTm",
    "difficulty": 0.4319620253164557,
    "language": "python3",
    "summary": "Create a function that takes two arguments. Both arguments are integers, a and b. Return True if one of them is 10 or if their sum is 10.\n\nExamples\nmakes10(9, 10) ➞ True\n\nmakes10(9, 9) ➞ False\n\nmakes10(1, 9) ➞ True\n\nNotes\nDon't forget to return the result.",
    "tags": [
      "algorithms",
      "conditions",
      "validation"
    ],
    "title": "Two Makes Ten"
  },
  {
    "_id": "SNM5EZ3FePECt2HQn",
    "difficulty": 0.4320354231093618,
    "language": "python3",
    "summary": "Create a function that takes three arguments prob, prize, pay and returns True if prob * prize > pay; otherwise return False.\n\nTo illustrate:\n\nprofitable_gamble(0.2, 50, 9)\n\n... should yield True, since the net profit is 1 (0.2 * 50 - 9), and 1 > 0.\n\nExamples\nprofitable_gamble(0.2, 50, 9) ➞ True\n\nprofitable_gamble(0.9, 1, 2) ➞ False\n\nprofitable_gamble(0.9, 3,",
    "tags": [
      "math",
      "validation",
      "conditions"
    ],
    "title": "Profitable Gamble"
  },
  {
    "_id": "49pyDP8dE3pJ2dYMW",
    "difficulty": 0.4320654331771619,
    "language": "python3",
    "summary": "Create a function that returns True if an integer is evenly divisible by 5, and False otherwise.\n\nExamples\ndivisiblebyfive(5) ➞ True\n\ndivisiblebyfive(-55) ➞ True\n\ndivisiblebyfive(37) ➞ False\n\nNotes\nDon't forget to return the result.\nIf you get stuck on a challenge, find help in the Resources tab.\nIf you're really stuck, unlock solutions in the Solutions tab.",
    "tags": [
      "numbers",
      "math",
      "validation"
    ],
    "title": "Check if an Integer is Divisible By Five"
  },
  {
    "_id": "foFKdr68vSENQ9AYB",
    "difficulty": 0.432438739789965,
    "language": "python3",
    "summary": "Create a function that takes a list and returns the sum of all numbers in the list.\n\nExamples\ngetsumof_elements([2, 7, 4]) ➞ 13\n\ngetsumof_elements([45, 3, 0]) ➞ 48\n\ngetsumof_elements([-2, 84, 23]) ➞ 105\n\nNotes\nN/A",
    "tags": [
      "arrays",
      "language_fundamentals",
      "math",
      "numbers"
    ],
    "title": "Get the Sum of All List Elements"
  },
  {
    "_id": "Yj2Rew5XQYpu7Nosq",
    "difficulty": 0.4325946445060018,
    "language": "python3",
    "summary": "Create a function that returns the number of frames shown in a given number of minutes for a certain FPS.\n\nExamples\nframes(1, 1) ➞ 60\n\nframes(10, 1) ➞ 600\n\nframes(10, 25) ➞ 15000\n\nNotes\nFPS stands for \"frames per second\" and it's the number of frames a computer screen shows every second.",
    "tags": [
      "algorithms",
      "language_fundamentals",
      "math",
      "numbers"
    ],
    "title": "Frames Per Second"
  },
  {
    "_id": "NebFhjXTn8NEbhYXY",
    "difficulty": 0.4337565104166667,
    "language": "python3",
    "summary": "Create a function that takes an integer and returns True if it's divisible by 100, otherwise return False.\n\nExamples\ndivisible(1) ➞ False\n\ndivisible(1000) ➞ True\n\ndivisible(100) ➞ True\nNotes\nDon't forget to return the result.\nIf you get stuck on a challenge, find help in the Resources tab.\nIf you're really stuck, unlock solutions in the Solutions tab.",
    "tags": [
      "algebra",
      "conditions",
      "math",
      "validation"
    ],
    "title": "Multiple of 100"
  },
  {
    "_id": "gbWDtMHtZARm7sdNA",
    "difficulty": 0.4343288952860741,
    "language": "python3",
    "summary": "Python has a logical operator and, which can also be written as &. The and operator takes two boolean values, and returns True if both values are True.\n\nConsider a and b:\n\na is checked if it is True or False.\nIf a is False,  False is returned.\nb is checked if it is True or False.\nIf b is False, False is returned.\nOtherwise, True is returned (as both a and b ar",
    "tags": [
      "logic",
      "language_fundamentals",
      "validation"
    ],
    "title": "Using the \"and\" Operator"
  },
  {
    "_id": "pKyeEDkNqZraqS3rW",
    "difficulty": 0.43478260869565216,
    "language": "python3",
    "summary": "Write a function that returns True if k^k == n for input (n, k) and return False otherwise.\n\nExamples\nktok(4, 2) ➞ True\n\nktok(387420489, 9) ➞ True\n9^9 == 387420489\n\nktok(3124, 5) ➞ False\n\nktok(17, 3) ➞ False\n\nNotes\nThe ^ operator refers to exponentiation operation **, not the bitwise XOR operation.",
    "tags": [
      "numbers",
      "math",
      "validation",
      "bit_operations"
    ],
    "title": "Testing K^K == N?"
  },
  {
    "_id": "F5ycABGyZtghMpYjr",
    "difficulty": 0.43492769744160176,
    "language": "python3",
    "summary": "Fix the code in the code tab to pass this challenge (only syntax errors). Look at the examples below to get an idea of what the function should do.\n\nExamples\nmax_num(3, 7) ➞ 7\n\nmax_num(-1, 0) ➞ 0\n\nmax_num(1000, 400) ➞ 1000\n\nNotes\nREAD EVERY WORD CAREFULLY, CHARACTER BY CHARACTER!\nDon't overthink this challenge; it's not supposed to be hard.",
    "tags": [
      "bugs",
      "language_fundamentals"
    ],
    "title": "Buggy Code (Part 2)"
  },
  {
    "_id": "C3N2JEfFQoh4cqQ98",
    "difficulty": 0.4359421734795613,
    "language": "python3",
    "summary": "Create a function that takes two strings as arguments and return either True or False depending on whether the total number of characters in the first string is equal to the total number of characters in the second string.\n\nExamples\ncomp(\"AB\", \"CD\") ➞ True\n\ncomp(\"ABC\", \"DE\") ➞ False\n\ncomp(\"hello\", \"edabit\") ➞ False\n\nNotes\nDon't forget to return the result.\nIf ",
    "tags": [
      "strings",
      "conditions",
      "validation"
    ],
    "title": "Compare Strings by Count of Characters"
  },
  {
    "_id": "NRxWszQRw5JqSDmQS",
    "difficulty": 0.43636363636363634,
    "language": "python3",
    "summary": "Given two integers, a and b, return True if a can be divided evenly by b. Return False otherwise.\n\nExamples\ndivides_evenly(98, 7) ➞ True\n98/7 = 14\n\ndivides_evenly(85, 4) ➞ False\n85/4 = 21.25\n\nNotes\na will always be greater than or equal to b.",
    "tags": [
      "math",
      "validation",
      "numbers"
    ],
    "title": "Divides Evenly"
  },
  {
    "_id": "ZAYqnMhmqT5K3JWu8",
    "difficulty": 0.437414030261348,
    "language": "python3",
    "summary": "A vehicle needs 10 times the amount of fuel than the distance it travels. However, it must always carry a minimum of 100 fuel before setting off.\n\nCreate a function which calculates the amount of fuel it needs, given the distance.\n\nExamples\ncalculate_fuel(15) ➞ 150\n\ncalculate_fuel(23.5) ➞ 235\n\ncalculate_fuel(3) ➞ 100\n\nNotes\nDistance will be a number greater th",
    "tags": [
      "language_fundamentals",
      "numbers",
      "control_flow"
    ],
    "title": "Let's Fuel Up!"
  },
  {
    "_id": "wtu32ZFxHJsuQnogX",
    "difficulty": 0.43867519328051924,
    "language": "python3",
    "summary": "Create a function that returns True if a string is empty and False otherwise.\n\nExamples\nis_empty(\"\") ➞ True\n\nis_empty(\" \") ➞ False\n\nis_empty(\"a\") ➞ False\n\nNotes\nA string containing only whitespaces \" \" does not count as empty.\nDon't forget to return the result.\nIf you get stuck on a challenge, find help in the Resources tab.\nIf you're really stuck, unlock solu",
    "tags": [
      "strings",
      "validation",
      "language_fundamentals"
    ],
    "title": "Is the String Empty?"
  },
  {
    "_id": "QKmETue6fMTdcB8Rq",
    "difficulty": 0.4397590361445783,
    "language": "python3",
    "summary": "Create a recursive function that takes two parameters and repeats the string n number of times. The first parameter txt is the string to be repeated and the second parameter is the number of times the string is to be repeated.\n\nExamples\nrepetition(\"ab\", 3) ➞ \"ababab\"\n\nrepetition(\"kiwi\", 1) ➞ \"kiwi\"\n\nrepetition(\"cherry\", 2) ➞ \"cherrycherry\"\n\nNotes\nThe second pa",
    "tags": [
      "strings",
      "recursion"
    ],
    "title": "Recursion to Repeat a String n Number of Times"
  },
  {
    "_id": "j9hv6sXmfvqkicLJC",
    "difficulty": 0.4439461883408072,
    "language": "python3",
    "summary": "Create a function that takes a number as an argument and returns negative of that number. Return negative numbers without any change.\n\nExamples\nreturn_negative(4) ➞ -4\n\nreturn_negative(15) ➞ -15\n\nreturn_negative(-4) ➞ -4\n\nreturn_negative(0) ➞ 0\n\nNotes\nN/A",
    "tags": [
      "numbers",
      "logic",
      "language_fundamentals"
    ],
    "title": "Return Negative"
  },
  {
    "_id": "2BvLTb49ywi2vubpm",
    "difficulty": 0.44648318042813456,
    "language": "python3",
    "summary": "Mubashir wants to swap two given numbers!\n\nIt is not returning the right values. Can you help him fix it?\n\na = 100\nb = 200\na, b = swap(a, b)\nprint(a, b) # Should print out \"200, 100\", but the function prints out \"100, 100\"\n\nExamples\nswap(100, 200) ➞ [200, 100]\n\nswap(44, 33) ➞ [33, 44]\n\nswap(21, 12) ➞ [12, 21]\n\nNotes\nN/A",
    "tags": [
      "numbers",
      "interview",
      "language_fundamentals",
      "bugs"
    ],
    "title": "Buggy Code (Part 7)"
  },
  {
    "_id": "HRu9WggWxdSpYjxNf",
    "difficulty": 0.4511627906976744,
    "language": "python3",
    "summary": "Given a list of numbers, return True if the sum of the values in the list is less than 100; otherwise return False.\n\nExamples\nlistlessthan_100([5, 57]) ➞ True\n\nlistlessthan_100([77, 30]) ➞ False\n\nlistlessthan_100([0]) ➞ True\n\nNotes\nN/A",
    "tags": [
      "language_fundamentals",
      "math",
      "validation",
      "arrays"
    ],
    "title": "Sum of List Less Than 100  List Remix"
  },
  {
    "_id": "pFQPcaaASgHuACbaS",
    "difficulty": 0.45236431399953414,
    "language": "python3",
    "summary": "Given two strings, firstname and lastname, return a single string in the format \"last, first\".\n\nExamples\nconcat_name(\"First\", \"Last\") ➞ \"Last, First\"\n\nconcat_name(\"John\", \"Doe\") ➞ \"Doe, John\"\n\nconcat_name(\"Mary\", \"Jane\") ➞ \"Jane, Mary\"\n\nNotes\nDon't forget to return the result.\nIf you get stuck on a challenge, find help in the Resources tab.\nIf you're really st",
    "tags": [
      "strings",
      "formatting",
      "language_fundamentals"
    ],
    "title": "Concatenate First and Last Name into One String"
  },
  {
    "_id": "F7qjLMhPzJgyNEqdi",
    "difficulty": 0.45528455284552843,
    "language": "python3",
    "summary": "Create a function that will handle simple math expressions. The input is an expression in the form of a string.\n\nExamples\ncalculator(\"23+4\") ➞ 27\n\ncalculator(\"45-15\") ➞ 30\n\ncalculator(\"13+2-5*2\") ➞ 5\n\ncalculator(\"49/7*2-3\") ➞ 11\n\nNotes\nThere will be no brackets in the input line.\nNo need to calculate mathematical functions (sin, cos, ln...).\nThere are no gaps",
    "tags": [
      "math",
      "algebra",
      "strings"
    ],
    "title": "Miserable Parody of a Calculator"
  },
  {
    "_id": "cZ6zaRiKn7dfvJhnF",
    "difficulty": 0.4568679495686795,
    "language": "python3",
    "summary": "Creates a function that takes a string and returns the concatenated first and last character.\n\nExamples\nfirst_last(\"ganesh\") ➞ \"gh\"\n\nfirst_last(\"kali\") ➞ \"ki\"\n\nfirst_last(\"shiva\") ➞ \"sa\"\n\nfirst_last(\"vishnu\") ➞ \"vu\"\n\nfirst_last(\"durga\") ➞ \"da\"\n\nNotes\nThere is no empty string.",
    "tags": [
      "strings",
      "language_fundamentals"
    ],
    "title": "Concatenating First and Last Character of a String"
  },
  {
    "_id": "YEwPHzQ5XJCafCQmE",
    "difficulty": 0.45714285714285713,
    "language": "python3",
    "summary": "Given a string, return True if its length is even or False if the length is odd.\n\nExamples\noddoreven(\"apples\") ➞ True\nThe word \"apples\" has 6 characters.\n6 is an even number, so the program outputs True.\n\noddoreven(\"pears\") ➞ False\n\"pears\" has 5 letters, and 5 is odd.\nTherefore the program outputs False.\n\noddoreven(\"cherry\") ➞ True\n\nNotes\nN/A",
    "tags": [
      "strings",
      "conditions",
      "validation"
    ],
    "title": "Is the String Odd or Even?"
  },
  {
    "_id": "EkhfsvH6drYCLmAbL",
    "difficulty": 0.4573170731707317,
    "language": "python3",
    "summary": "Create a function that returns its given argument, but by using a lambda function.\n\nA lambda function is constructed like so:\n\nlambda_func=lambda \"\"\"parameters\"\"\":#code here\n\nExamples\nlambda_func(3) ➞ 3\n\nlambda_func(\"3\") ➞ \"3\"\n\nlambda_func(True) ➞ True\n\nNotes\nCheck the Resources tab for more information on lambda functions.",
    "tags": [
      "data_structures",
      "language_fundamentals"
    ],
    "title": "Using Lambda Functions"
  },
  {
    "_id": "Qei2FyKLmSCbYDkbm",
    "difficulty": 0.45759368836291914,
    "language": "python3",
    "summary": "Fix the code in the code tab to pass this challenge (only syntax errors). Look at the examples below to get an idea of what the function should do.\n\nExamples\nsum_lst([1, 2, 3, 4, 5]) ➞ 15\n\nsum_lst([-1, 0, 1]) ➞ 0\n\nsum_lst([0, 4, 8, 12]) ➞ 24\n\nNotes\nREAD EVERY WORD CAREFULLY, CHARACTER BY CHARACTER!\nDon't overthink this challenge; it's not supposed to be hard.",
    "tags": [
      "bugs",
      "language_fundamentals",
      "arrays"
    ],
    "title": "Buggy Code (Part 3)"
  },
  {
    "_id": "JCZqhijycsNizczsR",
    "difficulty": 0.46256038647342995,
    "language": "python3",
    "summary": "Given two arguements, return a list contains these two arguements.\n\nExamples\nmake_pair(1, 2) ➞ [1, 2]\n\nmake_pair(51, 21) ➞ [51, 21]\n\nmake_pair(512124, 215) ➞ [512124, 215]\n\nNotes\nN/A",
    "tags": [
      "language_fundamentals",
      "arrays"
    ],
    "title": "Pair Management"
  },
  {
    "_id": "ayQTiQAcFJhtauhe3",
    "difficulty": 0.46345811051693403,
    "language": "python3",
    "summary": "Given a list of integers, determine whether the sum of its elements is even or odd.\n\nThe output should be a string (\"odd\" or \"even\").\n\nIf the input list is empty, consider it as a list with a zero ([0]).\n\nExamples\nevenorodd([0]) ➞ \"even\"\n\nevenorodd([1]) ➞ \"odd\"\n\nevenorodd([]) ➞ \"even\"\n\nevenorodd([0, 1, 5]) ➞ \"even\"\n\nNotes\nN/A",
    "tags": [
      "language_fundamentals",
      "algorithms",
      "arrays"
    ],
    "title": "Even or Odd?"
  },
  {
    "_id": "dP9osvXn6r6F36wYF",
    "difficulty": 0.46439628482972134,
    "language": "python3",
    "summary": "Create a function that takes a string; we'll say that the front is the first three characters of the string. If the string length is less than three characters, the front is whatever is there. Return a new string, which is three copies of the front.\n\nExamples\nfront3(\"Python\") ➞ \"PytPytPyt\"\n\nfront3(\"Cucumber\") ➞ \"CucCucCuc\"\n\nfront3(\"bioshock\") ➞ \"biobiobio\"\n\nNo",
    "tags": [
      "strings",
      "conditions"
    ],
    "title": "Front 3 - Slice Check Repeat Concatenate"
  },
  {
    "_id": "cStXTiYtCwyY4tEpP",
    "difficulty": 0.46842525979216626,
    "language": "python3",
    "summary": "Create a function that returns True if two lists contain identical values, and False otherwise.\n\nTo solve this question, your friend writes the following code:\n\ndef check_equals(lst1, lst2):\n    if lst1 is lst2:\n        return True\n    else:\n        return False\n\nBut testing the code, you see that something is not quite right.\nRunning the code yields the follo",
    "tags": [
      "bugs",
      "validation"
    ],
    "title": "Fix the Error: Value vs. Reference Types"
  },
  {
    "_id": "FtwouqMohuumDZh23",
    "difficulty": 0.46984126984126984,
    "language": "python3",
    "summary": "Given an index using INTEGER division and a list, return the value of the list with the given index.\n\nExamples\nvalue_at([1, 2, 3, 4, 5, 6], 10 // 2) ➞ 6\n\nvalue_at([1, 2, 3, 4, 5, 6], 8.0 // 2) ➞ 5\n\nvalue_at([1, 2, 3, 4], 6.535355314 // 2) ➞ 4\n\nNotes\nN/A",
    "tags": [
      "language_fundamentals",
      "arrays"
    ],
    "title": "Indexing with Integer Division"
  },
  {
    "_id": "hCmiYBGTCXxPoHBio",
    "difficulty": 0.47121535181236673,
    "language": "python3",
    "summary": "You can assign variables from lists with destructuring like this:\n\narr = [\"eyes\", \"nose\", \"lips\", \"ears\"]\neyes, nose, lips, ears = arr\n\nIf you need to change any items in an existing array, you can refer to the items with a similar syntax. Just skip over existing  items in the list using _  in place of a value name, like so:\n\narr = [\"eyes\", \"nose\", \"lips\", \"ea",
    "tags": [
      "language_fundamentals",
      "arrays"
    ],
    "title": "Destructuring Lists III"
  },
  {
    "_id": "2XLjgZhmACph76Pkr",
    "difficulty": 0.47126436781609193,
    "language": "python3",
    "summary": "In this series we're going to see common redundancies and superfluities that make our code unnecessarily complicated and less readable, and we're going to learn how to avoid them.\n\nIn line with the spirit of the series, we can summarize the general rules of minimalist code in two simple principles:\n Keep your code clean and readable.\n While not violating the f",
    "tags": [
      "conditions",
      "language_fundamentals",
      "logic",
      "validation"
    ],
    "title": "Minimal I: If Boolean Then Boolean"
  },
  {
    "_id": "vFFsWbTX2JuvjKZvf",
    "difficulty": 0.472636815920398,
    "language": "python3",
    "summary": "Mubashir created an infinite loop! Help him by fixing the code in the code tab to pass this challenge. Look at the examples below to get an idea of what the function should do.\n\nExamples\nprint_list(1) ➞ [1]\n\nprint_list(3) ➞ [1, 2, 3]\n\nprint_list(6) ➞ [1, 2, 3, 4, 5, 6]\n\nNotes\nREAD EVERY WORD CAREFULLY, CHARACTER BY CHARACTER!\nDon't overthink this challenge; it",
    "tags": [
      "loops",
      "bugs",
      "numbers",
      "data_structures"
    ],
    "title": "Buggy Code (Part 5)"
  },
  {
    "_id": "LRevQqmaH78mwyYXi",
    "difficulty": 0.47478991596638653,
    "language": "python3",
    "summary": "Create a function that accepts a measurement value in inches and returns the equivalent of the measurement value in feet.\n\nExamples\ninchestofeet(324) ➞ 27\n\ninchestofeet(12) ➞ 1\n\ninchestofeet(36) ➞ 3\n\nNotes\nIf inches are under 12, return 0.\n12 inches = 1 foot.",
    "tags": [
      "math",
      "language_fundamentals"
    ],
    "title": "Inches to Feet"
  },
  {
    "_id": "7ECZC8CBEhy5QkvN3",
    "difficulty": 0.47961630695443647,
    "language": "python3",
    "summary": "I have a bucket containing an amount of navy blue paint and I'd like to paint as many walls as possible. Create a function that returns the number of complete walls that I can paint, before I need to head to the shops to buy more.\n\nn is the number of square meters I can paint.\nw and h are the widths and heights of a single wall in meters.\n\nExamples\nhowmanywall",
    "tags": [
      "numbers",
      "math"
    ],
    "title": "I'd Like a New Shade of Blue, Please"
  },
  {
    "_id": "jcAfvJxEqA2fuE2qZ",
    "difficulty": 0.4798439531859558,
    "language": "python3",
    "summary": "Éowyn has written the function is_odd() to check if a given number is odd or not. Unfortunately, the function does not return the correct result for all the inputs. Help her fix the error.\n\ndef is_odd(num):\n  return num % 1 == 1 or 2\n\nExamples\nis_odd(-5) ➞ True\n\nis_odd(25) ➞ True\n\nis_odd(0) ➞ False\n\nNotes\nAll the inputs will only be integers.",
    "tags": [
      "bugs",
      "numbers",
      "validation"
    ],
    "title": "Fix the Error: Check Whether a Given Number Is Odd"
  },
  {
    "_id": "gcKthyMugQzDEFJTg",
    "difficulty": 0.48044692737430167,
    "language": "python3",
    "summary": "Create a function that returns a list of all the integers between two given numbers start and end.\n\nExamples\nrangeofnum(2, 4) ➞ [3]\n\nrangeofnum(5, 9) ➞ [6, 7, 8]\n\nrangeofnum(2, 11) ➞ [3, 4, 5, 6, 7, 8, 9, 10]\n\nNotes\nstart will always be <= end.\nstart and  end are NOT included in the final list.\nIf start  ==  end, return an empty list.",
    "tags": [
      "arrays",
      "language_fundamentals",
      "numbers"
    ],
    "title": "List From a Range of Numbers"
  },
  {
    "_id": "f3jm7sk7LaYttYyLP",
    "difficulty": 0.4806395203597302,
    "language": "python3",
    "summary": "Create a function that takes a number (from 1 - 60) and returns a corresponding string of hyphens.\n\nExamples\nnumtodashes(1) ➞ \"-\"\n\nnumtodashes(5) ➞ \"-----\"\n\nnumtodashes(3) ➞ \"---\"\n\nNotes\nYou will be provided integers ranging from 1 to 60.\nDon't forget to return your result as a string.\nIf you get stuck on a challenge, find help in the Resources tab.\nIf you're",
    "tags": [
      "loops",
      "strings",
      "numbers"
    ],
    "title": "Convert Number to String of Dashes"
  },
  {
    "_id": "YWoJkmMHYEENCvgRP",
    "difficulty": 0.48118279569892475,
    "language": "python3",
    "summary": "You can assign variables from lists like this:\n\nlst = [1, 2, 3, 4, 5, 6, 7, 8]\nfirst = lst[0]\nsecond = lst[1]\nthird = lst[2]\nother = lst[3:]\n\nprint(first) ➞ outputs 1\nprint(second) ➞ outputs 2\nprint(third) ➞ outputs 3\nprint(other) ➞ outputs [4, 5, 6, 7, 8]\n\nCreate variables first, second,  third and other from the given list using Destructuring Assignment (che",
    "tags": [
      "language_fundamentals",
      "interview",
      "objects",
      "logic"
    ],
    "title": "Destructuring Assignment"
  },
  {
    "_id": "7ujabrnbRK9w6Z5xb",
    "difficulty": 0.48157894736842105,
    "language": "python3",
    "summary": "Create a function that takes a list of integers and strings. Convert integers to strings and return the new list.\n\nExamples\nparse_list([1, 2, \"a\", \"b\"]) ➞ [\"1\", \"2\", \"a\", \"b\"]\n\nparse_list([\"abc\", 123, \"def\", 456]) ➞ [\"abc\", \"123\", \"def\", \"456\"]\n\nparse_list([1, 2, 3, 17, 24, 3, \"a\", \"123b\"]) ➞ [\"1\", \"2\", \"3\", \"17\", \"24\", \"3\", \"a\", \"123b\"]\n\nparse_list([]) ➞ []",
    "tags": [
      "arrays",
      "language_fundamentals"
    ],
    "title": "Convert All List Items to String"
  },
  {
    "_id": "WYq4aFwSNuoyFCW5G",
    "difficulty": 0.4821852731591449,
    "language": "python3",
    "summary": "Create a function that takes a number n and returns the nth even number beginning with 0 as the first.\n\nExamples\nnth_even(1) ➞ 0\n0 is first even number\n\nnth_even(2) ➞ 2\n2 is second even number\n\nnth_even(100) ➞ 198\n\nNotes\nN/A",
    "tags": [
      "math",
      "numbers",
      "language_fundamentals"
    ],
    "title": "Nth Even Number"
  },
  {
    "_id": "ZGezQDXsturZGpQcS",
    "difficulty": 0.4843576109805861,
    "language": "python3",
    "summary": "Write a function to check if a list contains a particular number.\n\nExamples\ncheck([1, 2, 3, 4, 5], 3) ➞ True\n\ncheck([1, 1, 2, 1, 1], 3) ➞ False\n\ncheck([5, 5, 5, 6], 5) ➞ True\n\ncheck([], 5) ➞ False\n\nNotes\nDon't forget to return the result.\nIf you get stuck on a challenge, find help in the Resources tab.\nIf you're really stuck, unlock solutions in the Solutions",
    "tags": [
      "arrays",
      "validation",
      "language_fundamentals"
    ],
    "title": "Check if a List Contains a Given Number"
  },
  {
    "_id": "PtrPzWCWrPW54xfxK",
    "difficulty": 0.484375,
    "language": "python3",
    "summary": "You are in charge of the cake for a child's birthday. You have decided the cake will have one candle for each year of their total age. They will only be able to blow out the tallest of the candles. Count how many candles are tallest.\n\nExamples\nbirthdaycakecandles([4, 4, 1, 3]) ➞ 2\nThe maximum height candles are four units high.\nThere are two of them, so you re",
    "tags": [
      "arrays"
    ],
    "title": "Tallest Birthday Cake Candles"
  },
  {
    "_id": "DruRW8YM8PNiH9Kg7",
    "difficulty": 0.48579738245273874,
    "language": "python3",
    "summary": "Create a function that takes a number as an argument and returns \"even\" for even numbers and \"odd\" for odd numbers.\n\nExamples\nisEvenOrOdd(3) ➞ \"odd\"\n\nisEvenOrOdd(146) ➞ \"even\"\n\nisEvenOrOdd(19) ➞ \"odd\"\n\nNotes\nDont forget to return the result.\nInput will always be a valid integer.\nExpect negative integers (whole numbers).\nTests are case sensitive (return \"even\" ",
    "tags": [
      "math",
      "validation",
      "numbers",
      "conditions"
    ],
    "title": "Is the Number Even or Odd?"
  },
  {
    "_id": "jozLzME3YptxydiQm",
    "difficulty": 0.4863256520638136,
    "language": "python3",
    "summary": "Create a function that takes in a word and determines whether or not it is plural. A plural word is one that ends in \"s\".\n\nExamples\nis_plural(\"changes\") ➞ True\n\nis_plural(\"change\") ➞ False\n\nis_plural(\"dudes\") ➞ True\n\nis_plural(\"magic\") ➞ False\n\nNotes\nDon't forget to return the result.\nRemember that return True (boolean) is not the same as return \"True\" (string",
    "tags": [
      "strings",
      "validation",
      "conditions"
    ],
    "title": "Is the Word Singular or Plural?"
  },
  {
    "_id": "HQXRKxQXECFTCFTtn",
    "difficulty": 0.4868366067697451,
    "language": "python3",
    "summary": "Create a function that returns how many possible arrangements can come from a certain number of switches (on / off). In other words, for a given number of switches, how many different patterns of on and off can we have?\n\nExamples\npos_com(1) ➞ 2\n\npos_com(3) ➞ 8\n\npos_com(10) ➞ 1024\n\nNotes\nAll numbers will be whole and positive.",
    "tags": [
      "algebra",
      "math",
      "logic"
    ],
    "title": "On/Off Switches"
  },
  {
    "_id": "PE8XQipGLS5bhpLZ5",
    "difficulty": 0.48695652173913045,
    "language": "python3",
    "summary": "Programmer Pete is trying to create a function that returns True if two lists share the same length and have identical numerical values at every index, otherwise, it will return False.\n\nHowever, the solution his function gives is in an unexpected format. Can you fix Pete's function so that it behaves as seen in the examples below?\n\nExamples\ncheck_equals([1, 2]",
    "tags": [
      "arrays",
      "bugs",
      "validation"
    ],
    "title": "Fix the Errors / Comparing Arrays"
  },
  {
    "_id": "8rXfBzRZbgZP7mzyR",
    "difficulty": 0.4870641169853768,
    "language": "python3",
    "summary": "Create a function that takes a string (a random name). If the last character of the name is an \"n\", return True, otherwise return False.\n\nExamples\nislastcharacter_n(\"Aiden\") ➞ True\n\nislastcharacter_n(\"Piet\") ➞ False\n\nislastcharacter_n(\"Bert\") ➞ False\n\nislastcharacter_n(\"Dean\") ➞ True\n\nNotes\nThe function must return a boolean value ( i.e. True or False).",
    "tags": [
      "strings",
      "conditions",
      "regex",
      "validation"
    ],
    "title": "Is the Last Character an \"N\"?"
  },
  {
    "_id": "8rcrBw82sfHyCmJMG",
    "difficulty": 0.4875,
    "language": "python3",
    "summary": "There is an easy way to assign to array values to the nth index by using the Rest element.\n\nhead, tail = [1, 2, 3, 4]\n\nprint(head) ➞ 1\nprint(tail) ➞ 2\n\nBut how could I make tail =  [2, 3, 4] instead of tail = 2?\nAdd something into the code and make this happen.\n\nNotes\nCheck the Resources tab for more examples.",
    "tags": [
      "language_fundamentals",
      "arrays"
    ],
    "title": "Iterable Unpacking"
  },
  {
    "_id": "Ne2LgRan7bZWs7BS7",
    "difficulty": 0.4889937106918239,
    "language": "python3",
    "summary": "The packaging system is running wild! The candy is lying loose all over in the warehouse, the cereal is missing, and bread is stuffed in a bottle. What is going on here? The candy should be in plastic and the bread should be in a bag.\n\nThe packaging machine is running the get_container() function to retrieve the container of a product. But something is not rig",
    "tags": [
      "bugs",
      "control_flow",
      "conditions",
      "logic"
    ],
    "title": "Find the Bug: Returning the Container"
  },
  {
    "_id": "iwtHzRDB6pMKoBLaa",
    "difficulty": 0.4909090909090909,
    "language": "python3",
    "summary": "Create a function that takes two numbers and returns their sum as a binary string.\n\nExamples\nadd_binary(1, 1) ➞ \"10\"\n\nadd_binary(1, 2) ➞ \"11\"\n\nadd_binary(4, 5) ➞ \"1001\"\n\nNotes\nRemember to return the converted result as a string.\nCheck the resources tab in case you are stuck :)",
    "tags": [
      "algorithms",
      "bit_operations",
      "numbers"
    ],
    "title": "Binary Addition + 0 1 0 1"
  },
  {
    "_id": "irb783PpFTDqnumhN",
    "difficulty": 0.49198772587794065,
    "language": "python3",
    "summary": "Create a function that returns the string \"Burp\" with the amount of \"r's\" determined by the input parameters of the function.\n\nExamples\nlong_burp(3) ➞ \"Burrrp\"\n\nlong_burp(5) ➞ \"Burrrrrp\"\n\nlong_burp(9) ➞ \"Burrrrrrrrrp\"\n\nNotes\nExpect num to always be >= 1.\nRemember to use a capital \"B\".\nDon't forget to return the result.",
    "tags": [
      "math",
      "strings"
    ],
    "title": "Burrrrrrrp"
  },
  {
    "_id": "xNxZx7DDr6BumJLaB",
    "difficulty": 0.4921259842519685,
    "language": "python3",
    "summary": "Mubashir wants to remove numbers from a given string!\n\nHelp him by fixing the code in the code tab to pass this challenge. Look at the examples below to get an idea of what the function should do.\n\nExamples\nremove_numbers(\"mubashir1\") ➞ \"mubashir\"\n\nremove_numbers(\"12ma23tt\") ➞ \"matt\"\n\nremove_numbers(\"e1d2a3b4i5t6\") ➞ \"edabit\"\n\nNotes\nREAD EVERY WORD CAREFULLY, ",
    "tags": [
      "strings",
      "bugs",
      "interview",
      "formatting"
    ],
    "title": "Buggy Code (Part 6)"
  },
  {
    "_id": "9wfEZ4898nnpa9wL5",
    "difficulty": 0.4924716855429713,
    "language": "python3",
    "summary": "Create a function that returns the ASCII value of the passed in character.\n\nExamples\nctoa(\"A\") ➞ 65\n\nctoa(\"m\") ➞ 109\n\nctoa(\"[\") ➞ 91\n\nctoa(\"\\\") ➞ 92\n\nNotes\nDon't forget to return the result.\nIf you get stuck on a challenge, find help in the Resources tab.\nIf you're really stuck, unlock solutions in the Solutions tab.",
    "tags": [
      "numbers",
      "algorithms",
      "strings"
    ],
    "title": "Char-to-ASCII"
  },
  {
    "_id": "Fej5HSzcvHMdm2i4N",
    "difficulty": 0.4925373134328358,
    "language": "python3",
    "summary": "Create a function that returns True if the combined weight of a car car and the weight of the passengers p in the car is less than the maximum weight max_weight the car is allowed to carry. Otherwise, return False. The weight of the car and the weight of the passengers are given in pounds. The maximum weight is given in kilograms.\n\nExamples\nweight_allowed(3000",
    "tags": [
      "math",
      "language_fundamentals",
      "validation"
    ],
    "title": "Maximum Weight Allowed"
  },
  {
    "_id": "EPS5tFxKQB7vWXLs6",
    "difficulty": 0.494077834179357,
    "language": "python3",
    "summary": "Create a function that calculates the area of a rectangle. If the arguments are invalid, your function must return -1.\n\nExamples\narea(3, 4) ➞ 12\n\narea(10, 11) ➞ 110\n\narea(-1, 5) ➞ -1\n\narea(0, 2) ➞ -1\n\nNotes\nN/A",
    "tags": [
      "algebra",
      "geometry",
      "math"
    ],
    "title": "Area of a Rectangle"
  },
  {
    "_id": "QM6ZgHxvQCDX9Tzoa",
    "difficulty": 0.49444444444444446,
    "language": "python3",
    "summary": "Create a function that evaluates an equation.\n\nExamples\neq(\"1+2\") ➞ 3\n\neq(\"6/(9-7)\") ➞ 3\n\neq(\"3+2-4\") ➞ 1\n\nNotes\nDon't print, return a value.\nReturn the value, not the equation.\nThe method used to solve this challenge should not be used in practice. However, it's important to be aware of how this functionality works and why it should not be used. Check the Res",
    "tags": [
      "math",
      "numbers",
      "strings"
    ],
    "title": "Evaluate an Equation"
  },
  {
    "_id": "fBzF8TuQQxx6C7dWm",
    "difficulty": 0.4946808510638298,
    "language": "python3",
    "summary": "Create a function that will put the first argument, a character, between every word in the second argument, a string.\n\nExamples\nadd(\"R\", \"python is fun\") ➞ \"pythonRisRfun\"\n\nadd(\"#\", \"hello world!\") ➞ \"hello#world!\"\n\nadd(\"#\", \" \") ➞ \"#\"\n\nNotes\nMake sure there are no spaces between words when returning the function.",
    "tags": [
      "strings",
      "formatting"
    ],
    "title": "WordCharWord"
  },
  {
    "_id": "oZAkiD6H7sf7zpZpn",
    "difficulty": 0.49477351916376305,
    "language": "python3",
    "summary": "Create a function that takes two numbers and a mathematical operator and returns the result.\n\nExamples\ncalculate(4, 9, \"+\") ➞ 13\n\ncalculate(12, 5, \"-\") ➞ 7\n\ncalculate(6, 3, \"*\") ➞ 18\n\ncalculate(25, 5, \"//\") ➞ 5\n\ncalculate(14, 3, \"%\") ➞ 2\n\ncalculate(7, 2, \"/\") ➞ 3.5\n\nNotes\nNumbers can be negative.\nThe only operations used are those in the examples above.",
    "tags": [
      "strings",
      "math",
      "algebra"
    ],
    "title": "Calculate Using String Operation"
  },
  {
    "_id": "vBEm4jimnvxaFhdgs",
    "difficulty": 0.49507389162561577,
    "language": "python3",
    "summary": "I'd like to calculate how long on average I've lived in the same house.\n\nGiven a person's age and the number of times they've moved house as moves, return the average number of years that they've spent living in the same house.\n\nExamples\nyearsinone_house(30, 1) ➞ 15\n\nyearsinone_house(15, 2) ➞ 5\n\nyearsinone_house(80, 0) ➞ 80\n\nNotes\nYou can assume that the tests",
    "tags": [
      "math",
      "language_fundamentals"
    ],
    "title": "Moving House"
  },
  {
    "_id": "jmn5FDFyLDPA4t6zP",
    "difficulty": 0.49508307900983384,
    "language": "python3",
    "summary": "Due to a programming concept known as truthiness, certain values can be evaluated to (i.e. take the place of) booleans. For example, 1 (or any number other than 0) is often equivalent to True, and 0 is often equivalent to False.\n\nCreate a function that returns the opposite of the given boolean, as a number.\n\nExamples\nflip_bool(True) ➞ 0\n\nflip_bool(False) ➞ 1",
    "tags": [
      "logic",
      "language_fundamentals",
      "conditions",
      "validation"
    ],
    "title": "Flip the Boolean"
  },
  {
    "_id": "ogjDWJAT2kTXEzkD5",
    "difficulty": 0.49534883720930234,
    "language": "python3",
    "summary": "Create a function that returns True if all parameters are truthy, and False otherwise.\n\nExamples\nall_truthy(True, True, True) ➞ True\n\nall_truthy(True, False, True) ➞ False\n\nall_truthy(5, 4, 3, 2, 1, 0) ➞ False\n\nNotes\nTruthy values include non-empty sequences, numbers (except 0 in every numeric type), and basically every value that is not falsy.\nYou can check i",
    "tags": [
      "arrays",
      "loops",
      "validation"
    ],
    "title": "Check if All Values Are True"
  },
  {
    "_id": "38oPds8QTdn7mhGsR",
    "difficulty": 0.4957983193277311,
    "language": "python3",
    "summary": "The challange is simple. Return a random integer N such that a <= N <= b.\n\nExamples\nrandom_int(5, 9) ➞ 7\n\nrandom_int(5, 9) ➞ 9\n\nrandom_int(5, 9) ➞ 5\n\nNotes\nDon't forget to  return the result.\nReturn value must be an integer.\nIf you get stuck on a challenge, find help in the Resources tab.\nIf you're really stuck, unlock solutions in the Solutions tab.",
    "tags": [
      "functional_programming",
      "numbers"
    ],
    "title": "Random Integer Generator"
  },
  {
    "_id": "YsYysHoxaHZbv3vS8",
    "difficulty": 0.49645390070921985,
    "language": "python3",
    "summary": "Given a set containing one element, return the element.\n\nExamples\nelementfromset({\"edabit\"}) ➞ \"edabit\"\n\nelementfromset({True}) ➞ True\n\nelementfromset({11037}) ➞ 11037\n\nNotes\nLists, dictionaries, and other sets won't be elements because sets won't accept any mutable data types as elements.",
    "tags": [
      "language_fundamentals",
      "objects"
    ],
    "title": "Return Sole Element in a Set"
  },
  {
    "_id": "CHwX2o6rqrBsL4gzr",
    "difficulty": 0.49710982658959535,
    "language": "python3",
    "summary": "Check if a text txt is a title text or not. A title text is one which has all the words in the text start with an upper case letter.\n\nExamples\ncheck_title(\"A Mind Boggling Achievement\") ➞ True\n\ncheck_title(\"A Simple Java Script Program!\") ➞ True\n\ncheck_title(\"Water is transparent\") ➞ False\n\nNotes\nN/A",
    "tags": [
      "formatting",
      "validation",
      "strings",
      "language_fundamentals"
    ],
    "title": "Check If It's a Title String"
  },
  {
    "_id": "Jm4eKTENReSiQFw9t",
    "difficulty": 0.4971590909090909,
    "language": "python3",
    "summary": "Create a function that takes a list of numbers lst and returns an inverted list.\n\nExamples\ninvert_list([1, 2, 3, 4, 5]) ➞ [-1, -2, -3, -4, -5]\n\ninvert_list([1, -2, 3, -4, 5]) ➞ [-1, 2, -3, 4, -5]\n\ninvert_list([]) ➞ []\n\nNotes\nDon't forget to return the result.\nIf you get stuck on a challenge, find help in the Resources tab.\nIf you're really stuck, unlock soluti",
    "tags": [
      "arrays",
      "functional_programming",
      "language_fundamentals",
      "interview"
    ],
    "title": "Invert a List"
  },
  {
    "_id": "yeqgXCk6NTpsexQ5B",
    "difficulty": 0.4975609756097561,
    "language": "python3",
    "summary": "Create a function that takes a word and returns the new word without including the first character.\n\nExamples\nnew_word(\"apple\") ➞ \"pple\"\n\nnew_word(\"cherry\") ➞ \"herry\"\n\nnew_word(\"plum\") ➞ \"lum\"\n\nNotes\nThe input is always a valid word.",
    "tags": [
      "strings",
      "formatting",
      "language_fundamentals"
    ],
    "title": "Word without First Character"
  },
  {
    "_id": "DgL3Ka5tBwF9SC6zn",
    "difficulty": 0.5,
    "language": "python3",
    "summary": "Create a function that takes an equation (e.g. \"1+1\"), and returns the answer.\n\nExamples\nequation(\"1+1\") ➞ 2\n\nequation(\"7*4-2\") ➞ 26\n\nequation(\"1+1+1+1+1\") ➞ 5\n\nNotes\nSupported operators are +, -, and *.",
    "tags": [
      "math",
      "language_fundamentals"
    ],
    "title": "Solve the Equation"
  },
  {
    "_id": "r3T23PTQnZRgjWGFH",
    "difficulty": 0.5,
    "language": "python3",
    "summary": "Some basic arithmetic operators are +, -, *, /, and %. In this challenge you will be given three parameters, num1, num2, and an operator. Use the operator on number 1 and 2.\n\nExamples\noperate(1, 2, \"+\") ➞ 3\n1 + 2 = 3\n\noperate(7, 10, \"-\") ➞ -3\n7 - 10 = -3\n\noperate(20, 10, \"%\") ➞ 0\n20 % 10 = 0\n\nNotes\nThere will not be any divisions by zero.",
    "tags": [
      "math",
      "language_fundamentals"
    ],
    "title": "Many Operators!"
  },
  {
    "_id": "MKpSfBCXargD35J8p",
    "difficulty": 0.5,
    "language": "python3",
    "summary": "A taxi journey costs $3 for the first kilometer travelled. However, all kilometers travelled after that will cost $2 each.\n\nCreate a function which returns the distance that the taxi must've travelled, given the cost as a parameter.\n\nExamples\njourney_distance(3) ➞ 1\nThe first kilometer costs $3\n\njourney_distance(9) ➞ 4\nThe first kilometer costs $3 plus the oth",
    "tags": [
      "numbers",
      "math",
      "conditions"
    ],
    "title": "Taxi Journey"
  },
  {
    "_id": "pAFxfge35bT3zj4Bs",
    "difficulty": 0.5021156558533145,
    "language": "python3",
    "summary": "Write a function that accepts base (decimal), height (decimal) and shape (\"triangle\",  \"parallelogram\") as input and calculates the area of that shape.\n\nExamples\narea_shape(2, 3, \"triangle\") ➞ 3\n\narea_shape(8, 6, \"parallelogram\") ➞ 48\n\narea_shape(2.9, 1.3, \"parallelogram\") ➞ 3.77\n\nNotes\nArea of a triangle is 0.5 * b * h\nArea of a parallelogram is b * h\nAssume",
    "tags": [
      "algorithms",
      "math",
      "conditions",
      "geometry"
    ],
    "title": "Triangle and Parallelogram Area Finder"
  },
  {
    "_id": "u68XgCZcWGphs5R54",
    "difficulty": 0.50223752151463,
    "language": "python3",
    "summary": "Create a function that takes a number and return a list of three numbers: half of the number, quarter of the number and an eighth of the number.\n\nExamples\nhalfquartereighth(6) ➞ [3, 1.5, 0.75]\n\nhalfquartereighth(22) ➞ [11, 5.5, 2.75]\n\nhalfquartereighth(25) ➞ [12.5, 6.25, 3.125]\n\nNotes\nThe order of the list is: half, quarter, eighth.",
    "tags": [
      "math",
      "arrays"
    ],
    "title": "Half, Quarter and Eighth"
  },
  {
    "_id": "hPaBJ7KJZ8fZtjJgL",
    "difficulty": 0.5039836567926456,
    "language": "python3",
    "summary": "Write a function that takes an integer and returns a string with the given number of \"a\"s in Edabit.\n\nExamples\nhowmanytimes(5) ➞ \"Edaaaaabit\"\n\nhowmanytimes(0) ➞ \"Edbit\"\n\nhowmanytimes(12) ➞ \"Edaaaaaaaaaaaabit\"\n\nNotes\nThe string must start with \"Ed\" and end with \"bit\".\nYou'll only be given integers as test input.",
    "tags": [
      "formatting",
      "strings",
      "loops"
    ],
    "title": "Edaaaaabit"
  },
  {
    "_id": "YSJjPdkwrhQCfnkcZ",
    "difficulty": 0.5047021943573667,
    "language": "python3",
    "summary": "Create a function that takes a string txt and a number n and returns the repeated string n number of times.\n\nIf given argument txt is not a string, return Not A String !!\n\nExamples\nrepeat_string(\"Mubashir\", 2) ➞ \"MubashirMubashir\"\n\nrepeat_string(\"Matt\", 3) ➞ \"MattMattMatt\"\n\nrepeat_string(1990, 7) ➞ \"Not A String !!\"\n\nNotes\nDon't forget to return the result.\nIf",
    "tags": [
      "strings",
      "conditions",
      "logic",
      "language_fundamentals"
    ],
    "title": "Repeat String"
  },
  {
    "_id": "y9Rans4Ry5oW74cat",
    "difficulty": 0.5051178290883123,
    "language": "python3",
    "summary": "Create a function that accepts a list of numbers and return both the minimum and maximum numbers, in that order (as a list).\n\nExamples\nmin_max([1, 2, 3, 4, 5]) ➞ [1, 5]\n\nmin_max([2334454, 5]) ➞ [5, 2334454]\n\nmin_max([1]) ➞ [1, 1]\n\nNotes\nAll test lists will have at least one element and are valid.",
    "tags": [
      "arrays",
      "numbers",
      "language_fundamentals"
    ],
    "title": "Find the Smallest and Biggest Numbers"
  },
  {
    "_id": "rR2qf7ELnXoXESiz2",
    "difficulty": 0.5053407552279223,
    "language": "python3",
    "summary": "Create a function that returns True if a string contains any spaces.\n\nExamples\nhas_spaces(\"hello\") ➞ False\n\nhas_spaces(\"hello, world\") ➞ True\n\nhas_spaces(\" \") ➞ True\n\nhas_spaces(\"\") ➞ False\n\nhas_spaces(\",./!@#\") ➞ False\n\nNotes\nAn empty string does not contain any spaces.\nTry doing this without RegEx.",
    "tags": [
      "strings",
      "validation"
    ],
    "title": "Check String for Spaces"
  },
  {
    "_id": "sLb2Fs6aGRQBYAXqQ",
    "difficulty": 0.5057471264367817,
    "language": "python3",
    "summary": "Given a Rubik's Cube with a side length of n, return the number of individual stickers that are needed to cover the whole cube.\n\nPictures of Rubik's Cubes\n\nThe Rubik's cube of side length 1 has 6 stickers.\nThe Rubik's cube of side length 2 has 24 stickers.\nThe Rubik's cube of side length 3 has 54 stickers.\n\nExamples\nhowmanystickers(1) ➞ 6\n\nhowmanystickers(2) ➞",
    "tags": [
      "math",
      "algebra"
    ],
    "title": "Number of Stickers"
  },
  {
    "_id": "MNrEx87Bzsg6TfuMY",
    "difficulty": 0.5069860279441117,
    "language": "python3",
    "summary": "Many IDS (for emails or Google ID) are created using the person's name.\n\nCreate a function that will return a four-character ID using the person's first name and last name. The first character will be the first letter of the first name but in lowercase.\nThe next three characters will be the first three characters, but the first letter will be capitalized and t",
    "tags": [
      "strings",
      "formatting",
      "language_fundamentals"
    ],
    "title": "City School Creating IDS"
  },
  {
    "_id": "xdSKkXQkkMroNzq8C",
    "difficulty": 0.506993006993007,
    "language": "python3",
    "summary": "Create a function that counts how many D's are in a sentence.\n\nExamples\ncount_d(\"My friend Dylan got distracted in school.\") ➞ 4\n\ncount_d(\"Debris was scattered all over the yard.\") ➞ 3\n\ncount_d(\"The rodents hibernated in their den.\") ➞ 3\n\nNotes\nYour function must be case-insensitive.\nRemember to return the result.\nCheck the Resources for help.",
    "tags": [
      "algorithms",
      "strings",
      "language_fundamentals"
    ],
    "title": "How Many D's Are There?"
  },
  {
    "_id": "eXRfoKp8m9Q6qvpRv",
    "difficulty": 0.5095541401273885,
    "language": "python3",
    "summary": "Write a function that returns the sum of elements greater than 5, in the given list.\n\nExamples\nsum_five([1, 5, 20, 30, 4, 9, 18]) ➞ 77\n\nsum_five([1, 2, 3, 4]) ➞ 0\n\nsum_five([10, 12, 28, 47, 55, 100]) ➞ 252\n\nNotes\nFind all the elements greater than 5, not the elements greater than or equal to 5.",
    "tags": [
      "arrays",
      "math",
      "language_fundamentals"
    ],
    "title": "Sum Greater Than Five"
  },
  {
    "_id": "hegqYg42GC9FR927g",
    "difficulty": 0.5108108108108108,
    "language": "python3",
    "summary": "Create a function that takes a string and changes the word amazing to not amazing. Return the string without any change if the word edabit is part of the string.\n\nExamples\namazing_edabit(\"edabit is amazing.\") ➞ \"edabit is amazing.\"\n\namazing_edabit(\"Mubashir is amazing.\") ➞ \"Mubashir is not amazing.\"\n\namazing_edabit(\"Infinity is amazing.\") ➞ \"Infinity is not am",
    "tags": [
      "strings",
      "validation",
      "regex"
    ],
    "title": "Amazing Edabit!"
  },
  {
    "_id": "3JbLM2bRh8XNDABTH",
    "difficulty": 0.5114754098360655,
    "language": "python3",
    "summary": "Mubashir created a function that takes two numbers a and b and an operator o. His function should return the result of the corresponding mathematical function on both numbers. If the operator is not one of the specified characters +, -, /, *, or if there is a division by zero, the function should return None. Help him by fixing the code in the code tab to pass",
    "tags": [
      "bugs",
      "functional_programming",
      "numbers",
      "language_fundamentals"
    ],
    "title": "Fix Basic Calculator"
  },
  {
    "_id": "Mm4BaYNPaXHJKWA7M",
    "difficulty": 0.5132145052243393,
    "language": "python3",
    "summary": "Smash factor is a term in golf that relates to the amount of energy transferred from the club head to the golf ball. The formula for calculating smash factor is ball speed divided by club speed.\n\nCreate a function that takes ball speed bs and club speed cs as arguments and returns the smash factor to the nearest hundredth.\n\nExamples\nsmash_factor(139.4, 93.8) ➞",
    "tags": [
      "numbers",
      "math",
      "language_fundamentals"
    ],
    "title": "Smash Factor"
  },
  {
    "_id": "SKdpWwgKMAwMPHvRK",
    "difficulty": 0.5132414094987963,
    "language": "python3",
    "summary": "Here's an image of four models. Some of the cubes are hidden behind other cubes. Model one consists of one cube. Model two consists of four cubes, and so on...\n\nStack the Boxes\n\nWrite a function that takes a number n and returns the number of stacked boxes in a model n levels high, visible and invisible.\n\nExamples\nstack_boxes(1) ➞ 1\n\nstack_boxes(2) ➞ 4\n\nstack_",
    "tags": [
      "math",
      "numbers",
      "algebra",
      "algorithms",
      "logic"
    ],
    "title": "Stack the Boxes"
  },
  {
    "_id": "hmvH3d8E2pKhCjsu3",
    "difficulty": 0.513242662848962,
    "language": "python3",
    "summary": "You will be given a list, showing how far James travels away from his home for each day. He may choose to travel towards or away from his house, so negative values are to be expected.\n\nCreate a function which calculates how far James must walk to get back home.\n\nExamples\ndistance_home([2, 4, 2, 5]) ➞ 13\n\ndistance_home([-1, -4, -3, -2]) ➞ 10\n\ndistance_home([3,",
    "tags": [
      "numbers",
      "math"
    ],
    "title": "Make My Way Home"
  },
  {
    "_id": "9kkSyfN62E4At9wcy",
    "difficulty": 0.5132534188755699,
    "language": "python3",
    "summary": "Create a function that takes a list of values and returns the first and last values in a new list.\n\nExamples\nfirst_last([5, 10, 15, 20, 25]) ➞ [5, 25]\n\nfirst_last([\"edabit\", 13, None, False, True]) ➞ [\"edabit\", True]\n\nfirst_last([None, 4, \"6\", \"hello\", None]) ➞ [None, None]\n\nNotes\nTest input will always contain a minimum of two elements within the list.\nDon't",
    "tags": [
      "arrays",
      "validation",
      "language_fundamentals"
    ],
    "title": "Return the First and Last Elements in a List"
  },
  {
    "_id": "phEQ7teNSYSQdDHPr",
    "difficulty": 0.5144508670520231,
    "language": "python3",
    "summary": "You will need to write three unfinished logic gates. Continue to write the three logic gates: AND, OR, and NOT.\n\nExamples\nAND(1, 1) ➞ 1\nAND(0, 0) ➞ 0\n\nOR(1, 0) ➞ 1\nOR(1, 1) ➞ 1\n\nNOT(0) ➞ 1\nNOT(1) ➞ 0\n\nNotes\nCheck the Resourses tab for some help.",
    "tags": [
      "logic",
      "conditions"
    ],
    "title": "AND, OR and NOT"
  },
  {
    "_id": "fHwaeLLz2vN9XzFft",
    "difficulty": 0.5156363636363637,
    "language": "python3",
    "summary": "Create a function that can turn JPY (Japanese yen) to USD (American dollar).\n\nExamples\nyentousd(1) ➞ 0.01\n\nyentousd(500) ➞ 4.65\n\nyentousd(649) ➞ 6.04\n\nNotes\nEach JPY to USD conversion is JPY / 107.5\nRound the result to two decimal places.",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "Convert Yen to USD"
  },
  {
    "_id": "7shokLkiNu2PEpWtP",
    "difficulty": 0.5157593123209169,
    "language": "python3",
    "summary": "You can assign variables from lists like this:\n\nfirst, _ , last = [1, 2, 8]\n\nfirst   = lst[0]\n\n_   = ignores second value (2)\n\nlast   = lst[-1]\n\nprint(first) ➞ outputs 1\nprint(last) ➞ outputs 8\n\nUsing Destructuring Assignment (check the Resources tab), your task is to unpack the list writeyourcodehere into three variables, first, a variable to ignore all middl",
    "tags": [
      "language_fundamentals",
      "loops",
      "logic"
    ],
    "title": "Destructuring Assignment (Ignoring Values)"
  },
  {
    "_id": "F4iemEeFfsaFoMpAF",
    "difficulty": 0.5157894736842106,
    "language": "python3",
    "summary": "This is a list of single characters  with an unwanted  character at the end:\n\n[\"H\", \"e\", \"l\", \"l\", \"o\", \"!\", \"\\0\"]\n\nYou could also just type \"Hello!\" when initializing a variable, creating the string \"Hello!\"\n\nCreate a function that will return a string by combining the given character list, not including the unwanted final character.\n\nExamples\ncpp_txt([\"H\", \"",
    "tags": [
      "arrays",
      "language_fundamentals"
    ],
    "title": "C String to C++ String (in Python)"
  },
  {
    "_id": "68KgdtdwabrXydZFM",
    "difficulty": 0.5158371040723982,
    "language": "python3",
    "summary": "Try finding your ancestors and offspring with code.\n\nCreate a function that takes a number x and a character y (\"m\" for male, \"f\" for female), and returns the name of an ancestor (m/f) or descendant (m/f).\n\nIf the number is negative, return the related ancestor.\nIf positive, return the related descendant.\nYou are generation 0. In the case of 0 (male or female)",
    "tags": [
      "strings",
      "logic",
      "conditions",
      "objects"
    ],
    "title": "Which Generation Are You?"
  },
  {
    "_id": "2vvfEodtq4RYsbcrh",
    "difficulty": 0.5159100551548579,
    "language": "python3",
    "summary": "Create a function which validates whether a bridge is safe to walk on (i.e. has no gaps in it to fall through).\n\nExamples\nissafebridge(\"####\") ➞ True\n\nissafebridge(\"## ####\") ➞ False\n\nissafebridge(\"#\") ➞ True\n\nNotes\nYou can expect the bridge's ends connecting it to its surrounding.",
    "tags": [
      "language_fundamentals",
      "strings",
      "validation"
    ],
    "title": "Broken Bridge"
  },
  {
    "_id": "HJNhLoS4W8jdEYprh",
    "difficulty": 0.5168195718654435,
    "language": "python3",
    "summary": "Create a function that takes two numbers num1,  num2, and a list lst and returns a list containing all the numbers in lst greater than num1 and less than num2.\n\nExamples\nlist_between(3, 8, [1, 5, 95, 0, 4, 7]) ➞ [5, 4, 7]\n\nlist_between(1, 10, [1, 10, 25, 8, 11, 6]) ➞ [8, 6]\n\nlist_between(7, 32, [1, 2, 3, 78]) ➞ []\n\nNotes\nN/A",
    "tags": [
      "arrays",
      "numbers",
      "logic"
    ],
    "title": "Less Than, Greater Than"
  },
  {
    "_id": "DbFcBJiRz3GDm6xns",
    "difficulty": 0.5170340681362725,
    "language": "python3",
    "summary": "The abs() function returns the absolute value of a number. This means it returns a number's positive value. You can think of it as the distance away from zero.\n\nCreate a function that recreates this functionality.\n\nExamples\nabsolute(-5) ➞ 5\n\nabsolute(-3.14) ➞ 3.14\n\nabsolute(250) ➞ 250\n\nNotes\nTests will only include valid numbers.\nNote that positive numbers wil",
    "tags": [
      "language_fundamentals",
      "numbers",
      "math"
    ],
    "title": "Recreating the abs() Function"
  },
  {
    "_id": "9zsDKijmBffmnk9AP",
    "difficulty": 0.5172551366447237,
    "language": "python3",
    "summary": "You hired three programmers and you (hopefully) pay them. Create a function that takes three numbers (the hourly wage of each programmer) and returns the difference between the highest-paid programmer and the lowest-paid.\n\nExamples\nprogrammers(147, 33, 526) ➞ 493\n\nprogrammers(33, 72, 74) ➞ 41\n\nprogrammers(1, 5, 9) ➞ 8\n\nNotes\nDon't forget to return the result.",
    "tags": [
      "math",
      "algorithms",
      "numbers"
    ],
    "title": "The 3 Programmers Problem"
  },
  {
    "_id": "n26hBhqdRk9ToTboA",
    "difficulty": 0.518578352180937,
    "language": "python3",
    "summary": "Given any number of parameters (which is signified using args syntax), return True if none of the variables are falsy/empty*.\n\nExamples\nnothingisnothing(0, False, [], {}) ➞ False\n\nnothingisnothing(33, \"Hello\", (True, True, 3)) ➞ True\n\nnothingisnothing(True, None) ➞ False\n\nNotes\n*args allows a function to take any number of parameters.\nFalsy refers to values wh",
    "tags": [
      "language_fundamentals",
      "data_structures",
      "validation"
    ],
    "title": "Nothing is Nothing?"
  },
  {
    "_id": "D6Qbh5doP6RvopoF3",
    "difficulty": 0.5188768286927796,
    "language": "python3",
    "summary": "Write a function that returns 0 if the input is 1, and returns 1 if the input is 0.\n\nExamples\nflip(1) ➞ 0\n\nflip(0) ➞ 1\n\nNotes\nTry completing this challenge without using any:\nConditionals\nTernary operators\nNegations\nBit operators",
    "tags": [
      "control_flow",
      "logic"
    ],
    "title": "No Conditionals?"
  },
  {
    "_id": "vbPYZ6RiZEkiz24wx",
    "difficulty": 0.5206422018348624,
    "language": "python3",
    "summary": "Create a function that will work as the modulus operator % without using the modulus operator. The modulus operator is a way to determine the remainder of a division operation. Instead of returning the result of the division, the modulo operation returns the whole number remainder.\n\nExamples\nmod(5, 2) ➞ 1\n\nmod(218, 5) ➞ 3\n\nmod(6, 3) ➞ 0\n\nNotes\nDon't use the %",
    "tags": [
      "functional_programming"
    ],
    "title": "The Modulus Operator Function"
  },
  {
    "_id": "nJwANk5YKK4SbbTHd",
    "difficulty": 0.5207373271889401,
    "language": "python3",
    "summary": "Parity bits are used as very simple checksum to ensure that binary data isn't corrupted during transit. Here's how they work:\n\nIf a binary string has an odd number of 1s, the parity bit is a 1.\nIf a binary string has an even number of 1s, the parity bit is a 0.\nThe parity bit is appended to the end of the binary string.\n\nCreate a function that adds the correct",
    "tags": [
      "strings",
      "numbers",
      "logic"
    ],
    "title": "Adding Parity Bits"
  },
  {
    "_id": "5NMfCfBNqw3iiDeeR",
    "difficulty": 0.5217391304347826,
    "language": "python3",
    "summary": "Create a function that takes a 2D list lst and returns the sum of the minimum value in each row.\n\nExamples\nsum_minimums([\n  [1, 2, 3, 4, 5],\n  [5, 6, 7, 8, 9],\n  [20, 21, 34, 56, 100]\n] ➞ 26\n\nminimum value of the first row is 1\nminimum value of the second row is 5\nminimum value of the third row is 20\n\nNotes\nN/A",
    "tags": [
      "arrays",
      "logic",
      "loops",
      "numbers"
    ],
    "title": "Sum of Minimums"
  },
  {
    "_id": "iipAZ7sK8C5sRF8K6",
    "difficulty": 0.5222537878787878,
    "language": "python3",
    "summary": "A bartender is writing a simple program to determine whether he should serve drinks to someone. He only serves drinks to people 18 and older and when he's not on break.\n\nGiven the person's age, and whether break time is in session, create a function which returns whether he should serve drinks.\n\nExamples\nshouldservedrinks(17, True) ➞ False\n\nshouldservedrinks(1",
    "tags": [
      "logic",
      "language_fundamentals",
      "validation",
      "conditions"
    ],
    "title": "Drinks Allowed?"
  },
  {
    "_id": "xPB3jeeNRLqRQ3Dwe",
    "difficulty": 0.5233644859813084,
    "language": "python3",
    "summary": "Create a function to find None in a list of numbers. The return value should be the index where None is found. If None is not found in the list, then return -1.\n\nExamples\nfind_none([1, 2, None]) ➞ 2\n\nfind_none([None, 1, 2, 3, 4]) ➞ 0\n\nfind_none([0, 1, 2, 3, 4]) ➞ -1\n\nNotes\nNone will occur in the input list only once.",
    "tags": [
      "arrays",
      "numbers"
    ],
    "title": "Find None in a List"
  },
  {
    "_id": "mcC546MLnBjNLXTb8",
    "difficulty": 0.5235204855842185,
    "language": "python3",
    "summary": "Create a function that returns the last value of the last item in a list or string.\n\nExamples\nlast_ind([0, 4, 19, 34, 50, -9, 2]) ➞ 2\n\nlast_ind(\"The quick brown fox jumped over the lazy dog\") ➞ \"g\"\n\nlast_ind([]) ➞ None\n\nNotes\nLists/strings will be of varying size.\nReturn None if list/string is emtpy.",
    "tags": [
      "arrays",
      "data_structures",
      "loops"
    ],
    "title": "Return Last Item"
  },
  {
    "_id": "vAk9SBqYmj6hXKfrD",
    "difficulty": 0.5256338028169014,
    "language": "python3",
    "summary": "In this challenge, you have to implement a function that returns the given distance kilometers converted into miles. You have to round the result up to the fifth decimal digit.\n\nExamples\nkmtomiles(2) ➞ 1.24274\n\nkmtomiles(6) ➞ 3.72823\n\nkmtomiles(8) ➞ 4.97097\n\nNotes\nDon't forget to return the result.\nIf you get stuck on a challenge, find help in the Resources ta",
    "tags": [
      "math",
      "numbers",
      "language_fundamentals"
    ],
    "title": "Convert Kilometers to Miles"
  },
  {
    "_id": "Luhb2KStP2wiX6FMp",
    "difficulty": 0.5262390670553936,
    "language": "python3",
    "summary": "Create a function to return the amount of potatoes there are in a string.\n\nExamples\npotatoes(\"potato\") ➞ 1\n\npotatoes(\"potatopotato\") ➞ 2\n\npotatoes(\"potatoapple\") ➞ 1\n\nNotes\nN/A",
    "tags": [
      "strings",
      "language_fundamentals",
      "regex"
    ],
    "title": "Find the Amount of Potatoes"
  },
  {
    "_id": "NAhsYH4q4jtaQB7Bf",
    "difficulty": 0.526829268292683,
    "language": "python3",
    "summary": "Levers are simple machines with a rigid beam and a fulcrum. From the picture below, you can see that there are 3-types of levers: first class, second class and third class.\n\nIn a first class lever, the fulcrum is situated in the middle with the effort and the load being positioned opposite of each other.\nIn a second class lever, the fulcrum is situated in the",
    "tags": [
      "arrays",
      "objects",
      "physics",
      "conditions"
    ],
    "title": "First Class, Second Class and Third Class Levers"
  },
  {
    "_id": "pfuxt3J2p2tph3LJQ",
    "difficulty": 0.527363184079602,
    "language": "python3",
    "summary": "Given a letter and a list of words, return whether the letter does not appear in any of the words.\n\nExamples\nforbidden_letter(\"r\", [\"rock\", \"paper\", \"scissors\"]) ➞ False\n\nforbidden_letter(\"a\", [\"spoon\", \"fork\", \"knife\"]) ➞ True\n\nforbidden_letter(\"m\", []) ➞ True\n\nNotes\nAll inputs given will be in lowercase.\nYou will always be given a forbidden letter, but there",
    "tags": [
      "arrays",
      "strings",
      "loops",
      "validation"
    ],
    "title": "The Forbidden Letter"
  },
  {
    "_id": "fqn5FcLzEb4RBH9w7",
    "difficulty": 0.5276162790697675,
    "language": "python3",
    "summary": "Create a function that determines whether or not it's possible to split a pie fairly given these three parameters:\n\nTotal number of slices.\nNumber of recipients.\nHow many slices each person gets.\n\nThe function will be in this form:\n\nequal_slices(total slices, no. recipients, slices each)\n\nExamples\nequal_slices(11, 5, 2) ➞ True\n5 people x 2 slices each = 10 sli",
    "tags": [
      "algebra",
      "math",
      "validation"
    ],
    "title": "Slice of Pie"
  },
  {
    "_id": "zdo6JCL6Z5d2fT8JB",
    "difficulty": 0.5285594873223739,
    "language": "python3",
    "summary": "Write a function that returns True if a dictionary contains the specified key, and False otherwise.\n\nExamples\nhas_key({ \"a\": 44, \"b\": 45, \"c\": 46 }, \"d\") ➞ False\n\nhas_key({ \"craves\": True, \"midnight\": True, \"snack\": True }, \"morning\") ➞ False\n\nhas_key({ \"pot\": 1, \"tot\": 2, \"not\": 3 }, \"not\") ➞ True\n\nNotes\nN/A",
    "tags": [
      "objects",
      "language_fundamentals",
      "validation"
    ],
    "title": "Does the Dictionary Contain a Given Key?"
  },
  {
    "_id": "Fe4dD4xrdBJjQ7H9a",
    "difficulty": 0.5294117647058824,
    "language": "python3",
    "summary": "Backpack Bill and Wallet Will set off for the annual festival. As they approach the stalls, Bill retorts that he'll be able to bring home more stuff than Will. Taking this as a challenge, Will refutes and a competition spurs into action.\n\nBackpack Bill has an infinite inventory space, but a limited number of coins.\nWallet Will has an infinite number of coins,",
    "tags": [
      "numbers",
      "logic",
      "conditions"
    ],
    "title": "A Day at the Market"
  },
  {
    "_id": "BajbSekxzL2hudEWe",
    "difficulty": 0.5296066252587992,
    "language": "python3",
    "summary": "After an amazing performance, the crowd goes wild! People clap enthusiastically and most claps overlap with each other to create one homogeneous sound.\n\nAn overlapped clap is a clap which starts but doesn't finish, as in \"ClaClap\" (the first clap is cut short and there are overall 2 claps).\n\nGiven a string of what the overlapping claps sounded like, return how",
    "tags": [
      "strings",
      "language_fundamentals",
      "regex"
    ],
    "title": "Raucous Applause"
  },
  {
    "_id": "aj7JPnAuW8dy4ggdp",
    "difficulty": 0.5309050772626932,
    "language": "python3",
    "summary": "Check the principles of minimalist code in the [intro to the first challenge] (https://edabit.com/challenge/2XLjgZhmACph76Pkr).\n\nIn the Code tab you will find a code that is missing a single character in order to pass the tests. However, your goal is to submit a function as minimalist as possible. Use the tips in the tips section down below.\n\nWrite a function",
    "tags": [
      "conditions",
      "language_fundamentals",
      "logic"
    ],
    "title": "Minimal II: Boolean Redundancy"
  },
  {
    "_id": "dTxY9oQuNHAovpDCm",
    "difficulty": 0.5317095588235294,
    "language": "python3",
    "summary": "The challenge is to try and fix this buggy code, given the inputs True and False. See the examples below for the expected output.\n\nExamples\nhas_bugs(True) ➞ \"sad days\"\n\nhas_bugs(False) ➞ \"it's a good day\"\n\nNotes\nDon't overthink this challenge (look at the syntax and correct it).",
    "tags": [
      "bugs",
      "language_fundamentals"
    ],
    "title": "Buggy Code"
  },
  {
    "_id": "MSjfXQ4gvMzeezFgB",
    "difficulty": 0.5317919075144508,
    "language": "python3",
    "summary": "The 50-30-20 strategy is a simple way to budget, which involves spending 50% of after-tax income on needs, 30% after tax income on wants, and 20% after-tax income on savings or paying off debt.\n\nGiven the after-tax income as ati, what you are supposed to do is to make a function that will return a dictionary that shows how much a person needs to spend on needs",
    "tags": [
      "algebra",
      "arrays",
      "numbers",
      "data_structures",
      "objects"
    ],
    "title": "50-30-20 Strategy"
  },
  {
    "_id": "u5WsfTX8rXb2phrNp",
    "difficulty": 0.5327951564076691,
    "language": "python3",
    "summary": "Kinetic energy can be calculated with the following formula:\n\nKE = 1/2mv²\n\nm is mass in kg\nv is velocity in m/s\nKE is kinetic energy in J\n\nReturn the Kinetic Energy in Joules, given the mass and velocity. For the purposes of this challenge, round answers to the nearest integer.\n\nExamples\ncalckineticenergy(60, 3) ➞ 270\n\ncalckineticenergy(45, 10) ➞ 2250\n\ncalckin",
    "tags": [
      "physics",
      "math",
      "numbers"
    ],
    "title": "Kinetic Energy"
  },
  {
    "_id": "MaekZ28kEvH9ZxPga",
    "difficulty": 0.53360768175583,
    "language": "python3",
    "summary": "Create a function that takes a number as an argument and returns the square root of that number cubed.\n\nExamples\ncube_squareroot(81) ➞ 729\n\ncube_squareroot(1646089) ➞ 2111932187\n\ncube_squareroot(695556) ➞ 580093704\n\nNotes\nAll numbers will evenly square root, so don't worry about decimal numbers.",
    "tags": [
      "algebra",
      "math",
      "numbers"
    ],
    "title": "Cube the Square Root"
  },
  {
    "_id": "g5HP8CmfXd7am7NtX",
    "difficulty": 0.5341365461847389,
    "language": "python3",
    "summary": "Character recognition software often makes mistakes when documents (especially old ones written with a typewriter) are digitized.\n\nYour task is to correct the errors in the digitized text. You only have to handle the following mistakes:\n\nA is misinterpreted as 4\nS is misinterpreted as 5\nO is misinterpreted as 0\nI is misinterpreted as 1\n\nThe test cases contain",
    "tags": [
      "strings",
      "logic",
      "functional_programming"
    ],
    "title": "Keyboard Mistakes"
  },
  {
    "_id": "ZF6vZwPc5He5u5EFe",
    "difficulty": 0.5364864864864864,
    "language": "python3",
    "summary": "You will be given two extremely similar lists, but exactly one of the items in a list will be valued slightly higher than its counterpart (which means that evaluating the value > the other value will return True).\n\nCreate a function that returns whether the first list is slightly superior to the second list.\n\nExamples\nisfirstsuperior([1, 2, 4], [1, 2, 3]) ➞ Tr",
    "tags": [
      "language_fundamentals",
      "objects"
    ],
    "title": "Slightly Superior"
  },
  {
    "_id": "CAgmHcypCLFDSadGp",
    "difficulty": 0.5382642998027614,
    "language": "python3",
    "summary": "Write a function that returns True if a dictionary is empty, and False otherwise.\n\nExamples\nis_empty({}) ➞ True\n\nis_empty({ \"a\": 1 }) ➞ False\n\nNotes\nN/A",
    "tags": [
      "objects",
      "language_fundamentals",
      "validation"
    ],
    "title": "Is the Dictionary Empty?"
  },
  {
    "_id": "3Erjtkxt2eAW9yd5a",
    "difficulty": 0.5405405405405406,
    "language": "python3",
    "summary": "For each challenge of this series you do not need to submit a function. Instead, you need to submit a template string that can formatted in order to get a certain outcome.\n\nWrite a template string according to the following example:\n\nExample\na = \"John\"\nb = \"Joe\"\ntemplate = \"yourtemplatestringhere\"\n\ntemplate.format(a, b) ➞ \"Joe hit John and then John hit Joe.\"",
    "tags": [
      "formatting",
      "strings",
      "language_fundamentals"
    ],
    "title": "Format II: Argument Indices"
  },
  {
    "_id": "3yPvbEjskPuuSSCAC",
    "difficulty": 0.5412844036697247,
    "language": "python3",
    "summary": "Given a list of numbers, remove the largest and smallest numbers, and calculate the average of the remaining numbers.\n\nExamples\ntrimmed_averages([4, 5, 7, 100]) ➞ 6\nAverage of 5 and 7\n\ntrimmed_averages([10, 25, 5, 15, 20]) ➞ 15\nAverage of 10, 15 and 20\n\ntrimmed_averages([1, 1, 1]) ➞ 1\n1\n\nNotes\nRound to the nearest whole number.\nList size is greater than 2.",
    "tags": [
      "numbers",
      "math",
      "arrays"
    ],
    "title": "Trimmed Averages"
  },
  {
    "_id": "b36bBpsnzyDbd4mzF",
    "difficulty": 0.5425531914893617,
    "language": "python3",
    "summary": "Create a function that calculates the chance of being an imposter. The formula for the chances of being an imposter is 100 × (i / p) where i is the imposter count and p is the player count. Make sure to round the value to the nearest integer and return the value as a percentage.\n\nExamples\nimposter_formula(1, 10) ➞ \"10%\"\n\nimposter_formula(2, 5) ➞ \"40%\"\n\nimposte",
    "tags": [
      "algebra",
      "math"
    ],
    "title": "Among Us Imposter Formula"
  },
  {
    "_id": "EMjazHJw24y93kyD4",
    "difficulty": 0.5432727272727272,
    "language": "python3",
    "summary": "The ternary operator (sometimes called Conditional Expressions) in Python is an alternative to the if... else... statement.\n\nIt is written in the format:\n\nresultiftrue if condition else resultiffalse\n\nTernary operators are often more compact than multi-line if statements, and are useful for simple conditional tests.\n\nFor example:\n\nis_nice = True\n\nUsing ternary",
    "tags": [
      "conditions",
      "language_fundamentals",
      "validation"
    ],
    "title": "Using Ternary Operators"
  },
  {
    "_id": "GnkE6uyY4qjjZXaJs",
    "difficulty": 0.5434380776340111,
    "language": "python3",
    "summary": "Create a function that takes a positive integer n and returns the nth \"star number\".\n\nA star number is a centered figurate number that represents a centered hexagram (six-pointed star), such as the one that Chinese checkers is played on.\n\nstar numbers for 1, 2 and 3\n\nExamples\nstar_number(2) ➞ 13\nn = 2\n2nd star number = 13\n\nstar_number(3) ➞ 37\nn = 3\n3rd star nu",
    "tags": [
      "algebra",
      "math"
    ],
    "title": "Nth Star Number"
  },
  {
    "_id": "GuoJCiRJkr9CLRqJa",
    "difficulty": 0.5444839857651246,
    "language": "python3",
    "summary": "Given two lists, which represent two sandwiches, return whether both sandwiches use the same type of bread. The bread will always be found at the start and end of the list.\n\nExamples\nhassamebread(\n  [\"white bread\", \"lettuce\", \"white bread\"],\n  [\"white bread\", \"tomato\", \"white bread\"]\n) ➞ True\n\nhassamebread(\n  [\"brown bread\", \"chicken\", \"brown bread\"],\n  [\"whit",
    "tags": [
      "arrays",
      "language_fundamentals",
      "validation",
      "logic"
    ],
    "title": "Similar Bread"
  },
  {
    "_id": "SFE4q5pFTi8TBwj76",
    "difficulty": 0.5451977401129944,
    "language": "python3",
    "summary": "Given a dictionary containing counts of both upvotes and downvotes, return what vote count should be displayed. This is calculated by subtracting the number of downvotes from upvotes.\n\nExamples\ngetvotecount({ \"upvotes\": 13, \"downvotes\": 0 }) ➞ 13\n\ngetvotecount({ \"upvotes\": 2, \"downvotes\": 33 }) ➞ -31\n\ngetvotecount({ \"upvotes\": 132, \"downvotes\": 132 }) ➞ 0\n\nNot",
    "tags": [
      "language_fundamentals",
      "arrays",
      "numbers",
      "objects"
    ],
    "title": "Upvotes vs Downvotes"
  },
  {
    "_id": "ove5xwGAKfMxRmcbF",
    "difficulty": 0.5454545454545454,
    "language": "python3",
    "summary": "Write a function that validates whether two strings are identical. Make it case insensitive.\n\nExamples\nmatch(\"hello\", \"hELLo\") ➞ True\n\nmatch(\"motive\", \"emotive\") ➞ False\n\nmatch(\"venom\", \"VENOM\") ➞ True\n\nmatch(\"mask\", \"mAskinG\") ➞ False\n\nNotes\nN/A",
    "tags": [
      "strings",
      "validation",
      "language_fundamentals"
    ],
    "title": "Case Insensitive Comparison"
  },
  {
    "_id": "Ti98ADcrmxi3NP68f",
    "difficulty": 0.5459770114942529,
    "language": "python3",
    "summary": "Given a fraction as a string, return whether or not it is greater than 1 when evaluated.\n\nExamples\ngreaterthanone(\"1/2\") ➞ False\n\ngreaterthanone(\"7/4\") ➞ True\n\ngreaterthanone(\"10/10\") ➞ False\n\nNotes\nFractions must be strictly greater than 1 (see example #3).",
    "tags": [
      "language_fundamentals",
      "strings",
      "validation",
      "math"
    ],
    "title": "Fraction Greater Than One"
  },
  {
    "_id": "vJrhnikLPK9jhFbyH",
    "difficulty": 0.5478787878787879,
    "language": "python3",
    "summary": "For each challenge of this series you do not need to submit a function. Instead, you need to submit a template string that can formatted in order to get a certain outcome.\n\nWrite a template string according to the following example:\n\nExample\na = \"John\"\nb = \"Joe\"\nc = \"Jack\"\ntemplate = \"yourtemplatestringhere\"\ntemplate.format(a, b, c) ➞ \"Their names were: John,",
    "tags": [
      "strings",
      "formatting",
      "language_fundamentals"
    ],
    "title": "Format I: Template String"
  },
  {
    "_id": "gNnm5vWpz4uNnGx4v",
    "difficulty": 0.5493133583021224,
    "language": "python3",
    "summary": "Check the principles of minimalist code in the [intro to the first challenge] (https://edabit.com/challenge/2XLjgZhmACph76Pkr).\n\nIn the Code tab you will find a code that is missing a single character in order to pass the tests. However, your goal is to submit a function as minimalist as possible. Use the tips in the tips section below.\n\nWrite five adder funct",
    "tags": [
      "logic",
      "language_fundamentals",
      "closures",
      "higher_order_functions"
    ],
    "title": "Minimal VII: Lambda Functions"
  },
  {
    "_id": "T3p8AkyXcE9ALkWbA",
    "difficulty": 0.5499269361909401,
    "language": "python3",
    "summary": "Given a sandwich (as a list), return a list of fillings inside the sandwich. This involves ignoring the first and last elements.\n\nExamples\nget_fillings([\"bread\", \"ham\", \"cheese\", \"ham\", \"bread\"]) ➞ [\"ham\", \"cheese\", \"ham\"]\n\nget_fillings([\"bread\", \"sausage\", \"tomato\", \"bread\"]) ➞ [\"sausage\", \"tomato\"]\n\nget_fillings([\"bread\", \"lettuce\", \"bacon\", \"tomato\", \"bread",
    "tags": [
      "language_fundamentals",
      "arrays"
    ],
    "title": "Sandwich Fillings"
  },
  {
    "_id": "jsBijKCgbgeef64fw",
    "difficulty": 0.5500296033155714,
    "language": "python3",
    "summary": "Create a function that flips M's to W's (all uppercase).\n\nExamples\nwumbo(\"I LOVE MAKING CHALLENGES\") ➞ \"I LOVE WAKING CHALLENGES\"\n\nwumbo(\"MEET ME IN WARSAW\") ➞ \"WEET WE IN WARSAW\"\n\nwumbo(\"WUMBOLOGY\") ➞ \"WUWBOLOGY\"\n\nNotes\nN/A",
    "tags": [
      "strings",
      "formatting",
      "language_fundamentals"
    ],
    "title": "The Study of Wumbology"
  },
  {
    "_id": "Xrftj2hA822v4AKcK",
    "difficulty": 0.550185873605948,
    "language": "python3",
    "summary": "A leap year happens every four years, so it's a year that is perfectly divisible by four. However, if the year is a multiple of 100 (1800, 1900, etc), the year must be divisible by 400.\n\nWrite a function that determines if the year is a leap year or not.\n\nExamples\nleap_year(2020) ➞ True\n\nleap_year(2021) ➞ False\n\nleap_year(1968) ➞ True\n\nNotes\nN/A",
    "tags": [
      "algebra",
      "algorithms",
      "validation"
    ],
    "title": "Find Out the Leap Year"
  },
  {
    "_id": "M3oq3s8T7Nz7piBvc",
    "difficulty": 0.5514018691588785,
    "language": "python3",
    "summary": "Given a one word lowercase string txt, return another string such that even-indexed and odd-indexed characters are grouped and groups are space-separated.\n\nExamples\nevenoddstring(\"mubashir\") ➞ \"mbsi uahr\"\nLetters at even indexes = \"mbsi\"\nLetters at odd indexes = \"uahr\"\nJoin both strings with a space\n\nevenoddstring(\"edabit\") ➞ \"eai dbt\"\n\nevenoddstring(\"airforce",
    "tags": [
      "strings",
      "interview",
      "language_fundamentals",
      "sorting"
    ],
    "title": "Even and Odd Strings"
  },
  {
    "_id": "tdbDAiGLFyrTdo49q",
    "difficulty": 0.5515463917525774,
    "language": "python3",
    "summary": "Create a program that will take two lists of integers, a and b. Each list will consist of 3 positive integers, representing the dimensions of cuboids a and b. Find the difference of the cuboids' volumes.\n\nFor example, if the parameters passed are ([2, 2, 3], [5, 4, 1]), the volume of a is 12 and the volume of b is 20. Therefore, the function should return 8.",
    "tags": [
      "language_fundamentals",
      "math",
      "arrays"
    ],
    "title": "Difference of Volumes of Cuboids"
  },
  {
    "_id": "HcLCh8566zewZvZ2j",
    "difficulty": 0.5530586766541823,
    "language": "python3",
    "summary": "Create a function that returns a number, based on the string provided. Here is a list of all digits:\n\nString    |    Number\n----------|----------\n\"one\"     |     1\n\"two\"     |     2\n\"three\"  |     3\n\"four\"    |     4\n\"five\"     |     5\n\"six\"       |     6\n\"seven\" |     7\n\"eight\"  |     8\n\"nine\"    |     9\n\"zero\"    |     0\n\nExamples\nword(\"one\") ➞ 1\n\nword(\"two\"",
    "tags": [
      "numbers",
      "strings",
      "loops",
      "conditions"
    ],
    "title": "Word Numbers!"
  },
  {
    "_id": "bGHnhQr5bjH8kd8rG",
    "difficulty": 0.5537848605577689,
    "language": "python3",
    "summary": "Given a list, rotates the values clockwise by one (the last value is sent to the first position).\n\nCheck the examples for a better understanding.\n\nExamples\nrotatebyone([1, 2, 3, 4, 5]) ➞ [5, 1, 2, 3, 4]\n\nrotatebyone([6, 5, 8, 9, 7]) ➞ [7, 6, 5, 8, 9]\n\nrotatebyone([20, 15, 26, 8, 4]) ➞ [4, 20, 15, 26, 8]\n\nNotes\nAll lists are the same size, so it's not necessary",
    "tags": [
      "arrays",
      "data_structures"
    ],
    "title": "Rotate the List by One 🔄"
  },
  {
    "_id": "jjL3GT8aBWP24eAvm",
    "difficulty": 0.5540540540540541,
    "language": "python3",
    "summary": "We can descructure lists like this:\n\narr = [\"1\", \"2\", \"3\"]\na, b, c = arr\n\nbut what if the list has nested lists, like the following?\n\narr = [\"cars\", \"planes\", [\"trains\", [\"motorcycles\"]]]\n\ntrans1 = arr[0]\ntrans2 = arr[1]\ntrans3 = arr2\ntrans4 = arr2[0]\n\nprintln(trans1) # outputs \"cars\"\nprintln(trans2) # outputs \"planes\"\nprintln(trans3) # outputs \"trains\"\nprintl",
    "tags": [
      "language_fundamentals",
      "arrays"
    ],
    "title": "Destructuring Lists II"
  },
  {
    "_id": "jijxZNn98jE9C2EWo",
    "difficulty": 0.5549738219895288,
    "language": "python3",
    "summary": "A number is called Automorphic number if its square ends in the original number. Create a function that takes a number n and returns True if it is an Automorphic number, otherwise False.\n\nExamples\nautomorphic(1) ➞ True\n\nautomorphic(3) ➞ False\n3^2 = 9\n\nautomorphic(6) ➞ True\n6^2 = 36 (ends with 6)\n\nautomorpic(95) ➞ False\n95^2 = 9025 (does not end with 95)\n\nNotes",
    "tags": [
      "logic",
      "math",
      "numbers",
      "validation"
    ],
    "title": "Automorphic Number"
  },
  {
    "_id": "WCm54pW7ME7GxuzJm",
    "difficulty": 0.5550675675675676,
    "language": "python3",
    "summary": "Create a function that takes a number as an argument and returns the amount of digits it has.\n\nExamples\nfinddigitamount(123) ➞ 3\n\nfinddigitamount(56) ➞ 2\n\nfinddigitamount(7154) ➞ 4\n\nfinddigitamount(61217311514) ➞ 11\n\nfinddigitamount(0) ➞ 1\n\nNotes\nIf you get stuck on a challenge, find help in the Resources tab.\nIf you're really stuck, unlock solutions in the So",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "Find the Total Number of Digits the Given Number Has"
  },
  {
    "_id": "xA8FJW2cwjAnJ2ptt",
    "difficulty": 0.5554106910039114,
    "language": "python3",
    "summary": "Create a function that finds the word \"bomb\" in the given string (not case sensitive). If found, return \"Duck!!!\",  otherwise, return \"There is no bomb, relax.\".\n\nExamples\nbomb(\"There is a bomb.\") ➞ \"Duck!!!\"\n\nbomb(\"Hey, did you think there is a bomb?\") ➞ \"Duck!!!\"\n\nbomb(\"This goes boom!!!\") ➞ \"There is no bomb, relax.\"\n\nNotes\n\"bomb\" may appear in different ca",
    "tags": [
      "regex",
      "language_fundamentals",
      "strings"
    ],
    "title": "Find the Bomb"
  },
  {
    "_id": "dBqLSk6qvudNdZrSx",
    "difficulty": 0.5559701492537313,
    "language": "python3",
    "summary": "Create a function that determines if the temp of the water is considered boiling or not. temp will be measured in fahrenheit and celsius.\n\nExamples\nis_boiling(\"212F\") ➞ True\n\nis_boiling(\"100C\") ➞ True\n\nis_boiling(\"0F\") ➞ False\n\nNotes\nThe boiling point of water is 212F in fahrenheit and 100C in celsius.",
    "tags": [
      "strings",
      "conditions",
      "validation"
    ],
    "title": "Is the Water Boiling?"
  },
  {
    "_id": "DBq7SALYAgQASLcC4",
    "difficulty": 0.5566523605150214,
    "language": "python3",
    "summary": "Create a function that takes two strings as arguments and returns the number of times the first string (the single character) is found in the second string.\n\nExamples\nchar_count(\"a\", \"edabit\") ➞ 1\n\nchar_count(\"c\", \"Chamber of secrets\") ➞ 1\n\nchar_count(\"b\", \"big fat bubble\") ➞ 4\n\nNotes\nYour output must be case-sensitive (see second example).",
    "tags": [
      "loops",
      "strings",
      "language_fundamentals",
      "interview"
    ],
    "title": "Count Instances of a Character in a String"
  },
  {
    "_id": "vxKcxazrqgmNA64db",
    "difficulty": 0.5579793340987371,
    "language": "python3",
    "summary": "A word has been split into a left part and a right part. Re-form the word by adding both halves together, changing the first character to an uppercase letter.\n\nExamples\nget_word(\"seas\", \"onal\") ➞ \"Seasonal\"\n\nget_word(\"comp\", \"lete\") ➞ \"Complete\"\n\nget_word(\"lang\", \"uage\") ➞ \"Language\"\n\nNotes\nN/A",
    "tags": [
      "strings",
      "language_fundamentals",
      "formatting"
    ],
    "title": "Re-Form the Word"
  },
  {
    "_id": "kNwkZDtWiBdw3NCnL",
    "difficulty": 0.5582440373314898,
    "language": "python3",
    "summary": "Create a function that returns True if the first list can be nested inside the second.\n\nlist1 can be nested inside list2 if:\n\nlist1's min is greater than list2's min.\nlist1's max is less than list2's max.\n\nExamples\ncan_nest([1, 2, 3, 4], [0, 6]) ➞ True\n\ncan_nest([3, 1], [4, 0]) ➞ True\n\ncan_nest([9, 9, 8], [8, 9]) ➞ False\n\ncan_nest([1, 2, 3, 4], [2, 3]) ➞ False",
    "tags": [
      "arrays",
      "validation"
    ],
    "title": "Check if One Array can be Nested in Another"
  },
  {
    "_id": "6YN2ww3B4cQZ6rTmN",
    "difficulty": 0.5583333333333333,
    "language": "python3",
    "summary": "Write a function that returns True if a year is a leap, otherwise return False.\n\nA year is a \"leap year\" if it lasts 366 days, instead of 365 in a typical year. That extra day is added to the end of the shortest month, creating February 29.\n\nA leap year occurs every four years, and will take place if the year is a multiple of four. The exception to this is a y",
    "tags": [
      "math",
      "algebra",
      "conditions",
      "validation"
    ],
    "title": "Leap Year Function ⌚"
  },
  {
    "_id": "QvsZunrkusBvBovc5",
    "difficulty": 0.5586592178770949,
    "language": "python3",
    "summary": "Create a function that takes a list of integers and returns the sum of all the integers that have an even index, multiplied by the integer at the last index.\n\nFor example:\n[2, 3, 4, 5] ➞ 30\n(2 + 4) * 5 ➞ 30\n\n[1, 4, 5, 6, 7, 2, 3] ➞ 48\n(1 + 5 + 7 + 3) * 3 ➞ 48\n\nExamples\neven_last([]) ➞ 0\n\neven_last([1, 3, 3, 1, 10]) ➞ 140\n\neven_last([-11, 3, 3, 1, 10]) ➞ 20\n\nNo",
    "tags": [
      "arrays",
      "language_fundamentals",
      "numbers"
    ],
    "title": "Even Index Elements in a List"
  },
  {
    "_id": "bo4REhn9paGcFoMBs",
    "difficulty": 0.558974358974359,
    "language": "python3",
    "summary": "Create a function that determines the age difference between spouses in a household. The ages ages in years  of the parents and their children are given in a list.\n\nIf there is no difference in age between the parents, return \"No age difference between spouses.\". Otherwise, return the difference in years. Check the examples for more clarification.\n\nExamples\nag",
    "tags": [
      "language_fundamentals",
      "arrays",
      "sorting"
    ],
    "title": "Age Difference Between Spouses"
  },
  {
    "_id": "8wtTo5Czcgm9Q6bPc",
    "difficulty": 0.5590062111801242,
    "language": "python3",
    "summary": "Create a function that takes a list of integers as an argument and returns a unique number from that list. All numbers except unique ones have the same number of occurrences in the list.\n\nExamples\nfindsinglenumber([2, 2, 2, 3, 4, 4, 4]) ➞ 3\n\nfindsinglenumber([2]) ➞ 2\n\nfindsinglenumber([]) ➞ None\n\nfindsinglenumber([7, 13, 3, 6, 5, 4, 4, 13, 5, 3, 6, 7, 6, 5, 3,",
    "tags": [
      "arrays",
      "numbers",
      "language_fundamentals"
    ],
    "title": "Find Unique Number in List"
  },
  {
    "_id": "YA5sLYuTzQpWLF8xP",
    "difficulty": 0.5596330275229358,
    "language": "python3",
    "summary": "Create a function that takes a list. This list will contain numbers represented as strings.\n\nYour function should split this list into two new lists. The first list should contain only even numbers. The second only odd. Then, wrap these two lists in one main list and return it.\n\nReturn an empty list if there are no even numbers, or odd.\n\nExamples\ncleanuplist([",
    "tags": [
      "arrays",
      "numbers",
      "strings",
      "conditions"
    ],
    "title": "Cleaning Up Messy Lists"
  },
  {
    "_id": "RejGBWcKsKM2PANip",
    "difficulty": 0.5603210433910208,
    "language": "python3",
    "summary": "Create a function that counts the number of syllables a word has. Each syllable is separated with a dash -.\n\nExamples\nnumber_syllables(\"buf-fet\") ➞ 2\n\nnumber_syllables(\"beau-ti-ful\") ➞ 3\n\nnumber_syllables(\"mon-u-men-tal\") ➞ 4\n\nnumber_syllables(\"on-o-mat-o-poe-ia\") ➞ 6\n\nNotes\nDon't forget to return the result.\nIf you get stuck on a challenge, find help in the R",
    "tags": [
      "strings",
      "language_fundamentals"
    ],
    "title": "Count Syllables"
  },
  {
    "_id": "3XYv6RZbrbaoTWJ4H",
    "difficulty": 0.5605381165919282,
    "language": "python3",
    "summary": "Create a function that takes a positive integer n, and returns the sum of all the cubed values from 1 to n.\n\nFor example, if n is 3:\n\nsum_cubes(3) ➞ 36\n1 * 3 + 2 * 3 + 3 ** 3 = 36\n\nExamples\nsum_cubes(7) ➞ 784\n\nsum_cubes(8) ➞ 1296\n\nsum_cubes(9) ➞ 2025\n\nNotes\nInput n will be a positive integer.",
    "tags": [
      "numbers",
      "math",
      "language_fundamentals",
      "algorithms"
    ],
    "title": "Sum of Cubes"
  },
  {
    "_id": "gd9Yw3H4qGEt5xksN",
    "difficulty": 0.5615067686874632,
    "language": "python3",
    "summary": "Create a function that takes a list of numbers and returns a new list, sorted in ascending order (smallest to biggest).\n\nSort numbers list in ascending order.\nIf the function's argument is None or an empty list, return an empty list.\nReturn a new array of sorted numbers.\n\nExamples\nsortnumsascending([1, 2, 10, 50, 5]) ➞ [1, 2, 5, 10, 50]\n\nsortnumsascending([80,",
    "tags": [
      "sorting",
      "arrays",
      "numbers"
    ],
    "title": "Sort Numbers in Ascending Order"
  },
  {
    "_id": "zFmJTah4E9mxJyoFF",
    "difficulty": 0.5615898578036662,
    "language": "python3",
    "summary": "Create a function that takes a list and a string as arguments and returns the index of the string.\n\nExamples\nfind_index([\"hi\", \"edabit\", \"fgh\", \"abc\"], \"fgh\") ➞ 2\n\nfind_index([\"Red\", \"blue\", \"Blue\", \"Green\"], \"blue\") ➞ 1\n\nfind_index([\"a\", \"g\", \"y\", \"d\"], \"d\") ➞ 3\n\nfind_index([\"Pineapple\", \"Orange\", \"Grape\", \"Apple\"], \"Pineapple\") ➞ 0\n\nNotes\nDon't forget to ret",
    "tags": [
      "arrays",
      "strings",
      "language_fundamentals",
      "loops"
    ],
    "title": "Find the Index"
  },
  {
    "_id": "SwERCKpctjJDcDZRQ",
    "difficulty": 0.5625,
    "language": "python3",
    "summary": "Create a function that takes two lowercase strings str1 and str2 of alphabets from a to z and returns the sorted and longest string containing distinct alphabets.\n\nExamples\nstr1 = \"mubashir\"\nstr2 = \"edabit\"\n\nlongest_string(str1, str2) ➞ \"abdehimrstu\"\nContains sorted and distinct alphabets of given strings.\n\nstr1 = \"abcdefghijklmnopqrstuvwxyz\"\nstr2 = \"abcdefghi",
    "tags": [
      "strings",
      "sorting",
      "language_fundamentals",
      "logic"
    ],
    "title": "Simple Letters"
  },
  {
    "_id": "EYojuPCtvSzF2chkZ",
    "difficulty": 0.5633561643835616,
    "language": "python3",
    "summary": "Create a function that returns the selected filename from a path. Include the extension in your answer.\n\nExamples\ngetfilename(\"C:/Projects/piltests/ascii/edabit.txt\") ➞ \"edabit.txt\"\n\ngetfilename(\"C:/Users/johnsmith/Music/Beethoven5.mp3\") ➞ \"Beethoven_5.mp3\"\n\nget_filename(\"ffprobe.exe\") ➞ \"ffprobe.exe\"\n\nNotes\nTests will include both absolute and relative paths.",
    "tags": [
      "regex",
      "language_fundamentals",
      "arrays"
    ],
    "title": "Get the File Name"
  },
  {
    "_id": "XPnTdP9eDkwqAQeWq",
    "difficulty": 0.5634674922600619,
    "language": "python3",
    "summary": "You have two lists. One shows the names of the people names, while the other shows their occupation jobs. Your task is to create a dictionary displaying each person to their respective occupation.\n\nPerson | Job\n--- | ---\nAnnie | Teacher\nSteven | Engineer\nLisa | Doctor\nOsman | Cashier\n\nExample\nnames = [\"Dennis\", \"Vera\", \"Mabel\", \"Annette\", \"Sussan\"]\njobs = [\"Bu",
    "tags": [
      "data_structures"
    ],
    "title": "Assign Person to Occupation"
  },
  {
    "_id": "2TdPmSpLpa8NWh6m9",
    "difficulty": 0.5645617342130066,
    "language": "python3",
    "summary": "Check the principles of minimalist code in the [intro to the first challenge] (https://edabit.com/challenge/2XLjgZhmACph76Pkr).\n\nIn the Code tab you will find a code that is missing a single character in order to pass the tests. However, your goal is to submit a function as minimalist as possible. Use the tips in the tips section below.\n\nWrite a function that",
    "tags": [
      "language_fundamentals",
      "logic",
      "conditions"
    ],
    "title": "Minimal IV: if-elif-else Inferno"
  },
  {
    "_id": "F7iLaLDBHqshWSZz5",
    "difficulty": 0.5661016949152542,
    "language": "python3",
    "summary": "Create a function that takes as a parameter a list of \"stringified\" numbers and returns a list of numbers.\n\nExample:\n[\"1\", \"3\", \"3.6\"] ➞ [1, 3, 3.6]\n\nExamples\ntonumberlist([\"9.4\", \"4.2\"]) ➞ [9.4, 4.2]\n\ntonumberlist([\"99\", \"20\"]) ➞ [99, 20]\n\ntonumberlist([\"9.5\", \"8.8\"]) ➞ [9.5, 8.8]\n\nNotes\nSome inputs are floats.",
    "tags": [
      "arrays",
      "language_fundamentals",
      "strings"
    ],
    "title": "List of Strings to List of Numbers"
  },
  {
    "_id": "chg3zdRJDpTq33PhK",
    "difficulty": 0.5675675675675675,
    "language": "python3",
    "summary": "Create a function that validates whether a number n is  within the bounds of lower and upper. Return False if n is not an integer.\n\nExamples\nintwithinbounds(3, 1, 9) ➞ True\n\nintwithinbounds(6, 1, 6) ➞ False\n\nintwithinbounds(4.5, 3, 8) ➞ False\n\nNotes\nThe term \"within bounds\" means a number is considered equal or greater than a lower bound and lesser (but not eq",
    "tags": [
      "language_fundamentals",
      "validation",
      "numbers",
      "conditions"
    ],
    "title": "Integer in Range?"
  },
  {
    "_id": "YrNKDhmWPsm735J8L",
    "difficulty": 0.5683760683760684,
    "language": "python3",
    "summary": "A student learning Python was trying to make a function that sorts all the letters of a word, but their code is broken, and they can't figure out why.\n\nSpot and fix the error(s) in the code to make the function work. As an added challenge for those who are more advanced, see if you can shrink (the fixed version of) the student's code down to only a single line",
    "tags": [
      "bugs",
      "language_fundamentals",
      "sorting"
    ],
    "title": "Fix the Broken Code"
  },
  {
    "_id": "MWM3f4aKjPacPt2zw",
    "difficulty": 0.5698027314112292,
    "language": "python3",
    "summary": "Create a function which makes the last character of a string repeat n number of times.\n\nExamples\nmodify_last(\"Hello\", 3) ➞ \"Hellooo\"\n\nmodify_last(\"hey\", 6) ➞ \"heyyyyyy\"\n\nmodify_last(\"excuse me what?\", 5) ➞ \"excuse me what?????\"\n\nNotes\nTest will include numbers and punctuation.\nMake sure the code is not case sensitive.",
    "tags": [
      "strings",
      "language_fundamentals"
    ],
    "title": "Modifying the Last Character"
  },
  {
    "_id": "2f9vjBiynkBtF3TBi",
    "difficulty": 0.5702867889045604,
    "language": "python3",
    "summary": "In this challenge, you must verify the equality of two different values given the parameters a and b.\n\nBoth the value and  type of the parameters need to be equal. The possible types of the given parameters are:\nNumbers\nStrings\nBooleans (False or True)\nSpecial values: None\n\nWhat have you learned so far that will permit you to do two different checks (value and",
    "tags": [
      "logic",
      "language_fundamentals",
      "validation"
    ],
    "title": "Equality Check"
  },
  {
    "_id": "8WmqttqjeM5RmBqxG",
    "difficulty": 0.5705765407554672,
    "language": "python3",
    "summary": "For each challenge of this series you do not need to submit a function. Instead, you need to submit a template string that can formatted in order to get a certain outcome.\n\nWrite a template string according to the following example:\n\nExample\ntemplate = \"yourtemplatestringhere\"\ntemplate.format(\"name\", me = \"John\", him = \"Joe\") ➞ \"My name is John. His name is Jo",
    "tags": [
      "strings",
      "formatting",
      "language_fundamentals"
    ],
    "title": "Format III: Keyword Arguments"
  },
  {
    "_id": "NyuQDLrp7DqLoFL2X",
    "difficulty": 0.5723443223443223,
    "language": "python3",
    "summary": "Google's logo can be stretched depending on how many pages it lets you skip forward to.\n\nImage of Goooooooooogle\n\nLet's say we wanted to change the number of pages that Google could skip to. Create a function where given a number of pages n, return the word \"Google\" but with the correct number of \"o\"s.\n\nExamples\ngooglify(10) ➞ \"Goooooooooogle\"\n\ngooglify(23) ➞",
    "tags": [
      "strings",
      "formatting",
      "language_fundamentals"
    ],
    "title": "The Full Length of a Google"
  },
  {
    "_id": "S2ynd4skpSixPPXGe",
    "difficulty": 0.5729847494553377,
    "language": "python3",
    "summary": "Write a function that checks whether a person can watch an MA15+ rated movie. One of the following two conditions is required for admittance:\n\nThe person is at least 15 years old.\nThey have parental supervision.\n\nThe function accepts two parameters, age and is_supervised. Return a boolean.\n\nExamples\nacceptintomovie(14, True) ➞ True\n\nacceptintomovie(14, False)",
    "tags": [
      "conditions",
      "algorithms",
      "validation"
    ],
    "title": "Movie Theatre Admittance"
  },
  {
    "_id": "sEChDwmcHvWcMSmRM",
    "difficulty": 0.5730337078651685,
    "language": "python3",
    "summary": "Python will interpret empty values (e.g. 0, (), {}, [], \"\") as the boolean False. For example, the code \"cat\" if () else \"dog\" returns \"dog\", since () is False.\n\nOn the other hand, non-empty values are interpreted as True. For example, \"cat\" if (3, 2) else \"dog\" returns \"cat\" since (3, 2) is True.\n\nWrite a function that, given a list of values, returns the lis",
    "tags": [
      "logic",
      "language_fundamentals",
      "arrays"
    ],
    "title": "Find the Falsehoods"
  },
  {
    "_id": "5Fuf4WdJKhnHfs4ZR",
    "difficulty": 0.5763546798029556,
    "language": "python3",
    "summary": "Create a function which returns the length of a string, without using len().\n\nExamples\nlength(\"Hello World\") ➞ 11\n\nlength(\"Edabit\") ➞ 6\n\nlength(\"wash your hands!\") ➞ 16\n\nNotes\nN/A",
    "tags": [
      "loops",
      "language_fundamentals"
    ],
    "title": "Recreating a len() Function"
  },
  {
    "_id": "vgbrdMw85i4C5sgS8",
    "difficulty": 0.5774877650897227,
    "language": "python3",
    "summary": "Write a function that takes a list of drinks and returns a list of only drinks with no sugar in them. Drinks that contain sugar (in this challenge) are:\n\ncola\nfanta\n\nExamples\nskipthesugar([\"fanta\", \"cola\", \"water\"]) ➞ [\"water\"]\n\nskipthesugar([\"fanta\", \"cola\"]) ➞ []\n\nskipthesugar([\"lemonade\", \"beer\", \"water\"]) ➞ [\"lemonade\", \"beer\", \"water\"]\n\nNotes\nThe function",
    "tags": [
      "arrays",
      "language_fundamentals"
    ],
    "title": "Skip the Drinks with Too Much Sugar"
  },
  {
    "_id": "enTqHsZSsXKzB6E9e",
    "difficulty": 0.5778251599147122,
    "language": "python3",
    "summary": "Create a function that takes a list of numbers or letters and returns a string.\n\nExamples\nlisttostring([1, 2, 3, 4, 5, 6]) ➞ \"123456\"\n\nlisttostring([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) ➞ \"abcdef\"\n\nlisttostring([1, 2, 3, \"a\", \"s\", \"dAAAA\"]) ➞ \"123asdAAAA\"\n\nNotes\nN/A",
    "tags": [
      "arrays",
      "numbers",
      "strings",
      "language_fundamentals"
    ],
    "title": "Convert a List to a String"
  },
  {
    "_id": "3XtrKPMbxAf86QjjS",
    "difficulty": 0.577914798206278,
    "language": "python3",
    "summary": "Create a function that returns True if an input string contains only uppercase or only lowercase letters.\n\nExamples\nsame_case(\"hello\") ➞ True\n\nsame_case(\"HELLO\") ➞ True\n\nsame_case(\"Hello\") ➞ False\n\nsame_case(\"ketcHUp\") ➞ False\n\nNotes\nN/A",
    "tags": [
      "strings",
      "validation"
    ],
    "title": "Check if the Same Case"
  },
  {
    "_id": "6Pf5GGG6HnzbB95gf",
    "difficulty": 0.5780590717299579,
    "language": "python3",
    "summary": "Create a function that finds each factor of a given number n. Your solution should return a list of the number(s) that meet this criteria.\n\nExamples\nfind_factors(9) ➞ [1, 3, 9]\n9 has three factors 1, 3 and 9\n\nfind_factors(12) ➞ [1, 2, 3, 4, 6, 12]\n\nfind_factors(20) ➞ [1, 2, 4, 5, 10, 20]\n\nfind_factors(0) ➞ []\n0 has no factors\nNotes\nReturn an empty list if the",
    "tags": [
      "arrays",
      "numbers",
      "math",
      "loops"
    ],
    "title": "Factors of a Given Number"
  },
  {
    "_id": "edQcd9ZT3DLkePCSs",
    "difficulty": 0.5781990521327014,
    "language": "python3",
    "summary": "Given a list and an integer n, return the sum of the first n numbers in the list.\n\nWorked Example\nsumfirstn_nums([9, 8, 7, 6], 3) ➞ 24\nThe parameter n is specified as 3.\nThe first 3 numbers in the list are 9, 8 and 7.\nThe sum of these 3 numbers is 24 (9 + 8 + 7).\nReturn the answer.\n\nExamples\nsumfirstn_nums([1, 3, 2], 2) ➞ 4\n\nsumfirstn_nums([4, 2, 5, 7], 4) ➞ 1",
    "tags": [
      "arrays",
      "language_fundamentals",
      "numbers"
    ],
    "title": "Summing a Slice"
  },
  {
    "_id": "KPicBthv6WhHFGapg",
    "difficulty": 0.5782374100719424,
    "language": "python3",
    "summary": "Create a function that returns the number of syllables in a simple string. The string is made up of short repeated words like \"Lalalalalalala\" (which would have 7 syllables).\n\nExamples\ncount_syllables(\"Hehehehehehe\") ➞ 6\n\ncount_syllables(\"bobobobobobobobo\") ➞ 8\n\ncount_syllables(\"NANANA\") ➞ 3\n\nNotes\nFor simplicity, please note that each syllable will consist of",
    "tags": [
      "language_fundamentals",
      "strings",
      "regex"
    ],
    "title": "Count the Syllables"
  },
  {
    "_id": "NvK8xMFNbHrLPL28G",
    "difficulty": 0.5790297339593115,
    "language": "python3",
    "summary": "Create a function that takes a number as an argument and returns the highest digit in that number.\n\nExamples\nhighest_digit(379) ➞ 9\n\nhighest_digit(2) ➞ 2\n\nhighest_digit(377401) ➞ 7\n\nNotes\nDon't forget to return the result.\nIf you get stuck on a challenge, find help in the Resources tab.\nIf you're really stuck, unlock solutions in the Solutions tab.",
    "tags": [
      "numbers",
      "language_fundamentals"
    ],
    "title": "Highest Digit"
  },
  {
    "_id": "kZLQZKCKhn2MZNd9t",
    "difficulty": 0.5805369127516778,
    "language": "python3",
    "summary": "In a board game, a piece may advance 1-6 tiles forward depending on the number rolled on a six-sided dice. If you advance your piece onto the same tile as another player's piece, both of you earn a bonus.\n\nCan you reach your friend's tile number in the next roll? Create a function that returns if it's possible to earn a bonus when you roll the dice.\n\nExamples",
    "tags": [
      "numbers",
      "language_fundamentals",
      "validation",
      "conditions"
    ],
    "title": "Tile Teamwork Tactics"
  },
  {
    "_id": "TbhTAgZbNvBW2ecyt",
    "difficulty": 0.5823665893271461,
    "language": "python3",
    "summary": "Wild Roger is tasked with shooting down 6 bottles with 6 shots as fast as possible.\nHere are the different types of shots he could make:\nHe could use one pistol to shoot a bottle with a \"Bang!\" in 0.5 seconds.\nOr he could use both pistols at once with a \"BangBang!\" to shoot two bottles in 0.5 seconds.\n\nGiven a list of Bangs and BangBangs return the time (in se",
    "tags": [
      "arrays",
      "numbers"
    ],
    "title": "Cowboy Shootout"
  },
  {
    "_id": "o3LWAZtjARJHLtyyb",
    "difficulty": 0.5829281469475959,
    "language": "python3",
    "summary": "Given a string, create a function to reverse the case. All lower-cased letters should be upper-cased, and vice versa.\n\nExamples\nreverse_case(\"Happy Birthday\") ➞ \"hAPPY bIRTHDAY\"\n\nreverse_case(\"MANY THANKS\") ➞ \"many thanks\"\n\nreverse_case(\"sPoNtAnEoUs\") ➞ \"SpOnTaNeOuS\"\n\nNotes\nN/A",
    "tags": [
      "strings",
      "formatting",
      "loops"
    ],
    "title": "Reverse the Case"
  },
  {
    "_id": "wFpi2zFGxWxfj5mZS",
    "difficulty": 0.5833333333333334,
    "language": "python3",
    "summary": "Create a function which returns the number of True values in a list.\n\nExamples\ncount_true([True, False, False, True, False]) ➞ 2\n\ncount_true([False, False, False, False]) ➞ 0\n\ncount_true([]) ➞ 0\n\nNotes\nReturn 0 if given an empty list.\nAll list items are of the type bool (True or False).",
    "tags": [
      "arrays",
      "language_fundamentals"
    ],
    "title": "How Much is True?"
  },
  {
    "_id": "F3M4PhqC4JdX28Qmx",
    "difficulty": 0.5833333333333334,
    "language": "python3",
    "summary": "Mubashir  has started his journey from home. Given a string of directions (N=North, W=West, S=South, E=East), he will walk for one minute in each direction. Determine whether a set of directions will lead him back to the starting position or not.\n\nExamples\nbacktohome(\"EEWE\") ➞ False\n\nbacktohome(\"NENESSWW\") ➞ True\n\nbacktohome(\"NEESSW\") ➞ False\n\nNotes\nN/A",
    "tags": [
      "logic",
      "validation",
      "arrays",
      "strings"
    ],
    "title": "Back to Home?"
  },
  {
    "_id": "Jjpou65vd6t6xGwvN",
    "difficulty": 0.5837922895357985,
    "language": "python3",
    "summary": "Create a function which returns \"upper\" if all the letters in a word are uppercase, \"lower\" if lowercase and \"mixed\" for any mix of the two.\n\nExamples\nget_case(\"whisper...\") ➞ \"lower\"\n\nget_case(\"SHOUT!\") ➞ \"upper\"\n\nget_case(\"Indoor Voice\") ➞ \"mixed\"\n\nNotes\nIgnore punctuation, spaces and numbers.",
    "tags": [
      "language_fundamentals",
      "strings"
    ],
    "title": "Lowercase, Uppercase or Mixed?"
  },
  {
    "_id": "5T978H873HFZ7xKd8",
    "difficulty": 0.5853174603174603,
    "language": "python3",
    "summary": "Given a class for a BasicPlan, write the classes for StandardPlan and PremiumPlan which have class attributes of the following:\n\nBasicPlan | StandardPlan | Premium Plan |\n--- | --- | --- | ---\n|✓|✓ |✓|can_stream\n|✓|✓|✓|can_download\n|✓|✓|✓|has_SD\n| |✓|✓|has_HD\n| | |✓|has_UHD\n|1|2|4|numofdevices\n|$8.99|$12.99 |$15.99|price\n\nExamples\nBasicPlan.has_SD ➞ True\n\nPrem",
    "tags": [
      "classes",
      "objects",
      "language_fundamentals"
    ],
    "title": "Video Streaming Plans"
  },
  {
    "_id": "Y2AzE8m4n6RmqiSZh",
    "difficulty": 0.5857385398981324,
    "language": "python3",
    "summary": "Create a function that takes a number and returns a list with the digits of the number in reverse order.\n\nExamples\nreverse_list(1485979) ➞ [9, 7, 9, 5, 8, 4, 1]\n\nreverse_list(623478) ➞ [8, 7, 4, 3, 2, 6]\n\nreverse_list(12345) ➞ [5, 4, 3, 2, 1]\n\nNotes\nN/A",
    "tags": [
      "formatting",
      "language_fundamentals",
      "numbers",
      "arrays"
    ],
    "title": "Number to Reversed Array"
  },
  {
    "_id": "pYwnLBJHBbHaEEano",
    "difficulty": 0.5859872611464968,
    "language": "python3",
    "summary": "Create a function that returns the number of hashes and pluses in a string.\n\nExamples\nhashpluscount(\"###+\") ➞ [3, 1]\n\nhashpluscount(\"##+++#\") ➞ [3, 3]\n\nhashpluscount(\"#+++#+#++#\") ➞ [4, 6]\n\nhashpluscount(\"\") ➞ [0, 0]\n\nNotes\nReturn [0, 0] for an empty string.\nReturn in the order of [hashes, pluses].",
    "tags": [
      "strings",
      "loops",
      "regex"
    ],
    "title": "Hashes and Pluses"
  },
  {
    "_id": "CDqMdrTvfn2Wa8igp",
    "difficulty": 0.5861804222648752,
    "language": "python3",
    "summary": "Create a function that returns the next element in an arithmetic sequence. In an arithmetic sequence, each element is formed by adding the same constant to the previous element.\n\nExamples\nnext_element([3, 5, 7, 9]) ➞ 11\n\nnext_element([-5, -6, -7]) ➞ -8\n\nnext_element([2, 2, 2, 2, 2]) ➞ 2\n\nNotes\nAll input arrays will contain integers only.",
    "tags": [
      "arrays",
      "numbers",
      "math"
    ],
    "title": "Next Element in Arithmetic Sequence"
  },
  {
    "_id": "YisvASuJeaooFLesN",
    "difficulty": 0.5867768595041323,
    "language": "python3",
    "summary": "Given a list of 10 numbers, return the maximum possible total made by summing just  5 of the 10 numbers.\n\nExamples\nmax_total([1, 1, 0, 1, 3, 10, 10, 10, 10, 1]) ➞ 43\n\nmax_total([0, 0, 0, 0, 0, 0, 0, 0, 0, 100]) ➞ 100\n\nmax_total([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ 40\n\nNotes\nYou can select any 5 numbers from the given array to form maximum possible total.",
    "tags": [
      "arrays",
      "language_fundamentals"
    ],
    "title": "Maximum Possible Total"
  },
  {
    "_id": "H8DJtxMmzYdyZuYar",
    "difficulty": 0.5870967741935483,
    "language": "python3",
    "summary": "The insurance guy calls again. Apparently, they were informed by your spouse that some items were not stolen at all and you failed to mention this detail to them. This is a fraud attempt! You freeze and mumble something unintelligible. Find out what you said.\n\nGiven a dictionary with always the exact same 3 keys, return a string that concatenates all the value",
    "tags": [
      "arrays",
      "loops",
      "strings",
      "objects"
    ],
    "title": "Burglary Series (11): Say What"
  },
  {
    "_id": "mwGt38m3Q3KcsSaPY",
    "difficulty": 0.5876993166287016,
    "language": "python3",
    "summary": "Help fix all the bugs in the function increment_items! It is intended to add 1 to every element in the list!\n\nExamples\nincrement_items([0, 1, 2, 3]) ➞ [1, 2, 3, 4]\n\nincrement_items([2, 4, 6, 8]) ➞ [3, 5, 7, 9]\n\nincrement_items([-1, -2, -3, -4]) ➞ [0, -1, -2, -3]\n\nNotes\nMake sure to read every line carefully.",
    "tags": [
      "bugs",
      "arrays",
      "language_fundamentals"
    ],
    "title": "Fix the Bug: Simple List Manipulation"
  },
  {
    "_id": "qCsWceKoQ8tp2FMkr",
    "difficulty": 0.5890257558790594,
    "language": "python3",
    "summary": "Create a function that takes three numbers as arguments and returns True if it's a triangle and False if not.\n\nExamples\nis_triangle(2, 3, 4) ➞ True\n\nis_triangle(3, 4, 5) ➞ True\n\nis_triangle(4, 3, 8) ➞ False\n\nNotes\na, b and, c are the side lengths of the triangles.\nTest input will always be three positive numbers.",
    "tags": [
      "math",
      "conditions",
      "validation",
      "geometry"
    ],
    "title": "Is It a Triangle?"
  },
  {
    "_id": "ztaWHvk2586NGiMyg",
    "difficulty": 0.5891032917139614,
    "language": "python3",
    "summary": "A \"truthy\" value is a value that translates to True when evaluated in a Boolean context. All values are truthy unless they're defined as falsy.\n\nAll falsy values are as follows:\n\nFalse\nNone\n0\n[]\n{}\n\"\"\n\nCreate a function that takes an argument of any data type and returns 1 if it's truthy and 0 if it's falsy.\n\nExamples\nis_truthy(0) ➞ 0\n\nis_truthy(False) ➞ 0\n\nis",
    "tags": [
      "conditions",
      "control_flow",
      "validation",
      "language_fundamentals"
    ],
    "title": "Truthy or Falsy?"
  },
  {
    "_id": "GWBvmSJdciGAksuwS",
    "difficulty": 0.5892857142857143,
    "language": "python3",
    "summary": "Create a function that takes a string and returns the letters that occur only once.\n\nExamples\nfind_letters(\"monopoly\") ➞ [\"m\", \"n\", \"p\", \"l\", \"y\"]\n\nfind_letters(\"balloon\") ➞ [\"b\", \"a\", \"n\"]\n\nfind_letters(\"analysis\") ➞ [\"n\", \"l\", \"y\", \"i\"]\n\nNotes\nThe final list should not include letters that appear more than once in the string.\nReturn the letters in the sequen",
    "tags": [
      "strings",
      "interview"
    ],
    "title": "Find the Unique Letters"
  },
  {
    "_id": "bMdFkscm8ESR5GLtN",
    "difficulty": 0.5892857142857143,
    "language": "python3",
    "summary": "For this challenge, you will NOT be given a string. Your task isn't to add \"Do not\" before the given string. If there is no given string, you will not return \"Do not do anything.\" Do not check the examples to know how to do this challenge.\n\nExamples\nreverse_psychology(\"wash the dishes\") ➞ \"Do not wash the dishes.\"\n\nreverse_psychology(\"eat your lunch\") ➞ \"Do no",
    "tags": [
      "formatting",
      "strings",
      "language_fundamentals"
    ],
    "title": "Reverse Psychology"
  },
  {
    "_id": "TamJueJxoWNctcQoD",
    "difficulty": 0.5903381642512078,
    "language": "python3",
    "summary": "Write a function that returns True if both numbers are:\n\nSmaller than 0, OR ...\nGreater than 0, OR ...\nExactly 0\n\nOtherwise, return False.\n\nExamples\nboth(6, 2) ➞ True\n\nboth(0, 0) ➞ True\n\nboth(-1, 2) ➞ False\n\nboth(0, 2) ➞ False\n\nNotes\nInputs will always be two numbers.",
    "tags": [
      "numbers",
      "math",
      "validation",
      "conditions"
    ],
    "title": "Both Zero, Negative or Positive"
  },
  {
    "_id": "mCGfrpnjaktkh7tzS",
    "difficulty": 0.5904572564612326,
    "language": "python3",
    "summary": "In this challenge you will be given a relation between two numbers, written as a string. Write a function that determines if the relation is True or False.\n\nExamples\nisittrue(\"2=2\") ➞ True\n\nisittrue(\"84\") ➞ True\n\nNotes\nTests will only have three types of relations: =, >, and <\nMany approaches work here, but the eval() function is particularly useful!",
    "tags": [
      "strings",
      "numbers",
      "validation",
      "language_fundamentals"
    ],
    "title": "Is it True?"
  },
  {
    "_id": "stAFzKqQnWHztzrAW",
    "difficulty": 0.5908141962421712,
    "language": "python3",
    "summary": "Given a string of numbers separated by a comma and space, return the total sum of all the numbers.\n\nExamples\nadd_nums(\"2, 5, 1, 8, 4\") ➞ 20\n\nadd_nums(\"1, 2, 3, 4, 5, 6, 7\") ➞ 28\n\nadd_nums(\"10\") ➞ 10\n\nNotes\nNumbers will always be separated by a comma and space.\nYour function should accept negative numbers.",
    "tags": [
      "language_fundamentals",
      "numbers"
    ],
    "title": "Adding Numbers in a String"
  },
  {
    "_id": "ph2YANXMNHReKQawa",
    "difficulty": 0.5911764705882353,
    "language": "python3",
    "summary": "Create a function that takes a range object r, index i, and returns a list where the first element is the number of elements in the range object, and the second element is the element of the range object at the given  index.\n\nExamples\nlength_element(range(2, 4), 0) ➞ [2, 2]\n\nlength_element(range(12, 15, 2), 1) ➞ [2, 14]\n\nlength_element(range(40, 50, 3), 2) ➞ [",
    "tags": [
      "language_fundamentals",
      "conditions"
    ],
    "title": "Length and Element of  Range"
  },
  {
    "_id": "5SJdiGXZwRiFK5vEJ",
    "difficulty": 0.5923276983094928,
    "language": "python3",
    "summary": "Create a function that takes a string of lowercase characters and returns that string reversed and capitalized.\n\nExamples\nreverse_capitalize(\"abc\") ➞ \"CBA\"\n\nreverse_capitalize(\"hellothere\") ➞ \"EREHTOLLEH\"\n\nreverse_capitalize(\"input\") ➞ \"TUPNI\"\n\nNotes\nN/A",
    "tags": [
      "strings",
      "functional_programming"
    ],
    "title": "Reverse and Capitalize"
  },
  {
    "_id": "CDgTLtA9wMaRXmAN3",
    "difficulty": 0.5923694779116466,
    "language": "python3",
    "summary": "Create a function that takes a string and returns a string with spaces in between all of the characters.\n\nExamples\nspacemeout(\"space\") ➞ \"s p a c e\"\n\nspacemeout(\"far out\") ➞ \"f a r   o u t\"\n\nspacemeout(\"elongated musk\") ➞ \"e l o n g a t e d   m u s k\"\n\nNotes\nTreat a space as its own character (i.e. leave three spaces between words).",
    "tags": [
      "strings",
      "formatting",
      "language_fundamentals",
      "arrays"
    ],
    "title": "Spaces Between Each Character"
  },
  {
    "_id": "cdhAmaCLQQ9ktBGGA",
    "difficulty": 0.5924092409240924,
    "language": "python3",
    "summary": "Create a function that takes a list with numbers and return a list with the elements multiplied by two.\n\nExamples\ngetmultipliedlist([2, 5, 3]) ➞ [4, 10, 6]\n\ngetmultipliedlist([1, 86, -5]) ➞ [2, 172, -10]\n\ngetmultipliedlist([5, 382, 0]) ➞ [10, 764, 0]\n\nNotes\nN/A",
    "tags": [
      "arrays",
      "language_fundamentals"
    ],
    "title": "Multiply Every List Item by Two"
  },
  {
    "_id": "tRM2zKPMezqLnXyCx",
    "difficulty": 0.5929778933680104,
    "language": "python3",
    "summary": "Suppose I want to define a function that removes the last element of a list each time I call it, but does not mutate the original list. Fix the code so that the results are no longer mutating the list.\n\ndef minus_one(lst):\n\tarr.pop()\n\treturn arr\n\nExamples\nx = [1, 2, 3, 4, 5]\nminus_one(x) ➞ [1, 2, 3, 4]  # 1st time function is called.\nminus_one(x) ➞ [1, 2, 3]",
    "tags": [
      "arrays",
      "bugs"
    ],
    "title": "Fix the Error: Mutating Arrays"
  },
  {
    "_id": "NyTjy8nmHj9bmxMTC",
    "difficulty": 0.5932203389830508,
    "language": "python3",
    "summary": "Tom is a very methodic guy that loves geometry and pizza: he loves them so much that, before eating a pizza, he calculates its radius and its height. Now, he wants to know from you the total volume of pizza that he swallowed!\n\nYou are given the two parameters that Tom measured:\n\nradius\nheight\n\nHe tells you that if you multiply the height by the square of the r",
    "tags": [
      "math",
      "language_fundamentals",
      "geometry"
    ],
    "title": "Volume of a Pizza"
  },
  {
    "_id": "8qFxzmHjErwm3zmkG",
    "difficulty": 0.5940695296523517,
    "language": "python3",
    "summary": "Create a function that takes a whole number as input and returns the shape with that number's amount of sides. Here are the expected outputs to get from these inputs.\n\nInputs | Outputs\n--- | ---\n1 | \"circle\"\n2 | \"semi-circle\"\n3 | \"triangle\"\n4 | \"square\"\n5 | \"pentagon\"\n6 | \"hexagon\"\n7 | \"heptagon\"\n8 | \"octagon\"\n9 | \"nonagon\"\n10 | \"decagon\"\n\nExamples\nnsidedshape",
    "tags": [
      "math",
      "arrays",
      "geometry",
      "objects"
    ],
    "title": "Shapes With N Sides"
  },
  {
    "_id": "dcdy9QMBbryyWENcm",
    "difficulty": 0.5943271767810027,
    "language": "python3",
    "summary": "Per 6 coffee cups I buy, I get a 7th cup free. In total, I get 7 cups. Create a function that takes n cups bought and return the total number of cups I would get.\n\nExamples\ntotal_cups(6) ➞ 7\n\ntotal_cups(12) ➞ 14\n\ntotal_cups(213) ➞ 248\n\nNotes\nNumber of cups I bought + number of cups I got for free.\nOnly valid inputs will be given.",
    "tags": [
      "math",
      "logic",
      "numbers",
      "algorithms"
    ],
    "title": "Free Coffee Cups"
  },
  {
    "_id": "CD5nkQ6ah9xayR3cJ",
    "difficulty": 0.594327990135635,
    "language": "python3",
    "summary": "Create a function which returns the total of all odd numbers up to and including n. n will be given as an odd number.\n\nExamples\naddoddto_n(5) ➞ 9\n1 + 3 + 5 = 9\n\naddoddto_n(13) ➞ 49\n\naddoddto_n(47) ➞ 576\n\nNotes\nCuriously, the answers are all square numbers!",
    "tags": [
      "math",
      "loops"
    ],
    "title": "Sum of the Odd Numbers"
  },
  {
    "_id": "P9cJCAqjveWkJ4pSn",
    "difficulty": 0.5944584382871536,
    "language": "python3",
    "summary": "Create a function that takes two integers and checks if they are equal.\n\nExamples\nis_equal(5, 6) ➞ False\n\nis_equal(1, 1) ➞ True\n\nis_equal(\"1\", 1) ➞ False\n\nNotes\nIf there is a string then it should return False.",
    "tags": [
      "conditions",
      "logic",
      "language_fundamentals"
    ],
    "title": "Are the Numbers Equal?"
  },
  {
    "_id": "GWPQ7XcbFBeS72xmv",
    "difficulty": 0.5946564885496183,
    "language": "python3",
    "summary": "Andy, Ben and Charlotte are playing a board game. The three of them decided to come up with a new scoring system. A player's first initial (\"A\", \"B\" or \"C\") denotes that player scoring a single point. Given a string of capital letters, return a list of the players' scores.\n\nFor instance, if ABBACCCCAC is written when the game is over, then Andy scored 3 points",
    "tags": [
      "strings",
      "numbers"
    ],
    "title": "Scoring System"
  },
  {
    "_id": "qJbYAbrXXMmMAXRiC",
    "difficulty": 0.5950323974082073,
    "language": "python3",
    "summary": "When creating variables, the variable name must always start with a letter and cannot contain spaces, though numbers and underscores are allowed to be contained in it also.\n\nCreate a function which returns True if a given variable name is valid, otherwise return False.\n\nExamples\nvariable_valid(\"result\") ➞ True\n\nvariablevalid(\"oddnums\") ➞ True\n\nvariable_valid(\"",
    "tags": [
      "conditions",
      "strings",
      "validation",
      "regex"
    ],
    "title": "Valid Variable Names"
  },
  {
    "_id": "AaSXX4SKNdZ7mgqK7",
    "difficulty": 0.5952380952380952,
    "language": "python3",
    "summary": "Check the principles of minimalist code in the [intro to the first challenge] (https://edabit.com/challenge/2XLjgZhmACph76Pkr).\n\nIn the Code tab you will find a code that is missing a single character in order to pass the tests. However, your goal is to submit a function as minimalist as possible. Use the tips in the tips section below.\n\nWrite a function that",
    "tags": [
      "language_fundamentals",
      "logic",
      "conditions"
    ],
    "title": "Minimal IX: This or That"
  },
  {
    "_id": "ZMW4xHjMNf62snrkL",
    "difficulty": 0.5954063604240283,
    "language": "python3",
    "summary": "Create a function that takes a list of numbers and returns the second largest number.\n\nExamples\nsecond_largest([10, 40, 30, 20, 50]) ➞ 40\n\nsecond_largest([25, 143, 89, 13, 105]) ➞ 105\n\nsecond_largest([54, 23, 11, 17, 10]) ➞ 23\n\nNotes\nN/A",
    "tags": [
      "numbers",
      "arrays",
      "language_fundamentals"
    ],
    "title": "Find the Second Largest Number"
  },
  {
    "_id": "P7vMuQgQaA5DutThN",
    "difficulty": 0.5956937799043063,
    "language": "python3",
    "summary": "Given a list of numbers, negate all elements contained within.\n\nNegating a positive value -+n will return -n, because all +'s are removed.\nNegating a negative value --n will return n, because the first - turns the second minus into a +.\n\nExamples\nnegate([1, 2, 3, 4]) ➞ [-1, -2, -3, -4]\n\nnegate([-1, 2, -3, 4]) ➞ [1, -2, 3, -4]\n\nnegate([]) ➞ []\n\nNotes\nIf you get",
    "tags": [
      "arrays",
      "numbers",
      "language_fundamentals",
      "loops"
    ],
    "title": "Negate the List of Numbers"
  },
  {
    "_id": "5AqaG98wD38a9SMwM",
    "difficulty": 0.5959183673469388,
    "language": "python3",
    "summary": "The mean of a group of numbers is calculated by summing all numbers, and dividing this sum by the total count of numbers in the group. Given a sorted list of numbers, return the mean (rounded to one decimal place).\n\nExamples\nmean([1, 6, 6, 7, 8, 8, 9, 10, 10]) ➞ 7.2\n\nmean([1, 3, 8, 9, 9, 10]) ➞ 6.7\n\nmean([2, 3, 3, 6, 6, 8, 9, 10]) ➞ 5.9\n\nNotes\nN/A",
    "tags": [
      "arrays",
      "math",
      "numbers"
    ],
    "title": "Basic Statistics: Mean"
  },
  {
    "_id": "dQZmkrPaKdtSat5f9",
    "difficulty": 0.5967741935483871,
    "language": "python3",
    "summary": "Create a function that, given a string txt, finds a letter that has a single  occurrence. Return the letter in uppercase. If the input is empty, return an empty string \"\".\n\nExamples\nsingle_occurrence(\"EFFEAABbc\") ➞ \"C\"\n\nsingle_occurrence(\"AAAAVNNNNSS\") ➞ \"V\"\n\nsingle_occurrence(\"S\") ➞ \"S\"\n\nNotes\nThe function will not be case sensitive.",
    "tags": [
      "language_fundamentals",
      "strings"
    ],
    "title": "Single Occurrence"
  },
  {
    "_id": "aYuR3SoRzLcMo4zFR",
    "difficulty": 0.5971107544141252,
    "language": "python3",
    "summary": "In this challenge you will receive an input of the form:\n\n[[[[[[[[[[[]]]]]]]]]]]\n\nIn other words, a list containing a list containing a list containing... a list containing nothing.\n\nYour goal is to measure the depth of this list, where [] has a depth 1, [[]] has depth of 2, [[[]]] has depth 3, etc.\n\nExamples\nmeasurethedepth([]) ➞ 1\n\nmeasurethedepth([[]]) ➞ 2",
    "tags": [
      "arrays",
      "language_fundamentals",
      "strings"
    ],
    "title": "Measure the Depth of Emptiness"
  },
  {
    "_id": "BxKT4agPnm9ZNpDru",
    "difficulty": 0.598019801980198,
    "language": "python3",
    "summary": "Given a list of women and a list of men, either:\nReturn \"sizes don't match\" if the two lists have different sizes.\nIf the sizes match, return a list of pairs, with the first woman paired with the first man, second woman paired with the second man, etc.\n\nExamples\nzip_it([\"Elise\", \"Mary\"], [\"John\", \"Rick\"])\n ➞ [(\"Elise\", \"John\"), (\"Mary\", \"Rick\")]\n\nzip_it([\"Ana\"",
    "tags": [
      "arrays",
      "formatting",
      "sorting"
    ],
    "title": "Zip It, If You Can?"
  },
  {
    "_id": "b5hu2ckByEfAKdcN6",
    "difficulty": 0.5984,
    "language": "python3",
    "summary": "Write a function that takes an integer i and returns an integer with the integer backwards followed by the original integer.\n\nTo illustrate:\n123\n\nWe reverse 123 to get 321 and then add 123 to the end, resulting in 321123.\n\nExamples\nreverseandnot(123) ➞ 321123\n\nreverseandnot(152) ➞ 251152\n\nreverseandnot(123456789) ➞ 987654321123456789\n\nNotes\ni is a non-negative",
    "tags": [
      "strings",
      "language_fundamentals",
      "formatting"
    ],
    "title": "ReverseAndNot"
  },
  {
    "_id": "b4fsyhyiRptsBzhcm",
    "difficulty": 0.59875,
    "language": "python3",
    "summary": "Create a function that takes two parameters (start, stop), and returns the sum of all even numbers in the range.\n\nExamples\nsumevennumsinrange(10, 20) ➞ 90\n10, 12, 14, 16, 18, 20\n\nsumevennumsinrange(51, 150) ➞ 5050\n\nsumevennumsinrange(63, 97) ➞ 1360\n\nNotes\nRemember that the start and stop values are inclusive.",
    "tags": [
      "loops",
      "math",
      "numbers"
    ],
    "title": "Give Me the Even Numbers"
  },
  {
    "_id": "nZTLizuJjLPgr7Ak2",
    "difficulty": 0.599320882852292,
    "language": "python3",
    "summary": "A number added with its additive inverse equals zero. Create a function that returns a list of additive inverses.\n\nExamples\nadditive_inverse([5, -7, 8, 3]) ➞ [-5, 7, -8, -3]\n\nadditive_inverse([1, 1, 1, 1, 1]) ➞ [-1, -1, -1, -1, -1]\n\nadditive_inverse([-5, -25, 35]) ➞ [5, 25, -35]\n\nNotes\nDon't forget to return the result.\nIf you get stuck on a challenge, find he",
    "tags": [
      "arrays",
      "math",
      "higher_order_functions",
      "loops"
    ],
    "title": "Additive Inverse"
  },
  {
    "_id": "kMjKA72mfTqK2XvFy",
    "difficulty": 0.5995561192136969,
    "language": "python3",
    "summary": "Write a function to reverse a list.\n\nExamples\nreverse([1, 2, 3, 4]) ➞ [4, 3, 2, 1]\n\nreverse([9, 9, 2, 3, 4]) ➞ [4, 3, 2, 9, 9]\n\nreverse([]) ➞ []\n\nNotes\nDon't forget to return the result.\nIf you get stuck on a challenge, find help in the Resources tab.\nIf you're really stuck, unlock solutions in the Solutions tab.",
    "tags": [
      "arrays",
      "numbers",
      "language_fundamentals"
    ],
    "title": "Reverse a List"
  },
  {
    "_id": "sTbmSqFX7HxAesWor",
    "difficulty": 0.5995740149094781,
    "language": "python3",
    "summary": "Create a function that takes a list of words and transforms it into a list of each word's length.\n\nExamples\nword_lengths([\"hello\", \"world\"]) ➞ [5, 5]\n\nword_lengths([\"Halloween\", \"Thanksgiving\", \"Christmas\"]) ➞ [9, 12, 9]\n\nword_lengths([\"She\", \"sells\", \"seashells\", \"down\", \"by\", \"the\", \"seashore\"]) ➞ [3, 5, 9, 4, 2, 3, 8]\n\nNotes\nNo test case will contain punctu",
    "tags": [
      "arrays",
      "language_fundamentals"
    ],
    "title": "Array of Word Lengths"
  },
  {
    "_id": "iTX7sAMgekBWaq5J8",
    "difficulty": 0.5996691480562448,
    "language": "python3",
    "summary": "Write a function that takes the last number of a consecutive list of numbers and returns the total of all numbers up to and including it.\n\nExamples\naddupto(3) ➞ 6\n1 + 2 + 3 = 6\n\naddupto(10) ➞ 55\n1 + 2 + 3 + ... + 10 = 55\n\naddupto(7) ➞ 28\n1 + 2 + 3 + ... + 7 = 28\n\nNotes\nYou will only be given valid inputs.\nThere are two ways of doing this; try finding them both",
    "tags": [
      "math",
      "numbers",
      "loops"
    ],
    "title": "Add a Consecutive List of Numbers"
  },
  {
    "_id": "S7rcHsS52JJNXknTS",
    "difficulty": 0.6002024291497976,
    "language": "python3",
    "summary": "Given a dictionary of how many more pages each ink color can print, output the maximum number of pages the printer can print before any of the colors run out.\n\nExamples\nink_levels({\n  \"cyan\": 23,\n  \"magenta\": 12,\n  \"yellow\": 10\n}) ➞ 10\n\nink_levels({\n  \"cyan\": 432,\n  \"magenta\": 543,\n  \"yellow\": 777\n}) ➞ 432\n\nink_levels({\n  \"cyan\": 700,\n  \"magenta\": 700,\n  \"yell",
    "tags": [
      "arrays",
      "numbers"
    ],
    "title": "Printer Levels"
  },
  {
    "_id": "7uRSDAnfWmAF3JvLN",
    "difficulty": 0.6008425487098473,
    "language": "python3",
    "summary": "Write a function that takes a string name and a number num (either 0 or 1) and return \"Hello\" + name if  num is 1, otherwise return \"Bye\" + name.\n\nExamples\nsayhellobye(\"alon\", 1) ➞ \"Hello Alon\"\n\nsayhellobye(\"Tomi\", 0) ➞ \"Bye Tomi\"\n\nsayhellobye(\"jose\", 0) ➞ \"Bye Jose\"\n\nNotes\nThe name you return must be capitalized.",
    "tags": [
      "strings",
      "control_flow",
      "conditions"
    ],
    "title": "Say \"Hello\" Say \"Bye\""
  },
  {
    "_id": "aqDGJxTYCx7XWyPKc",
    "difficulty": 0.600997506234414,
    "language": "python3",
    "summary": "Create a function where given the number n, return the sum of all square numbers up to and including n.\n\nsquares_sum(3) ➞ 14\n1² + 2² + 3² =\n1 + 4 + 9 =\n14\n\nExamples\nsquares_sum(3) ➞ 14\n\nsquares_sum(12) ➞ 650\n\nsquares_sum(13) ➞ 819\n\nNotes\nRemember that n is included in the total.",
    "tags": [
      "loops",
      "numbers",
      "language_fundamentals",
      "math"
    ],
    "title": "Summing the Squares"
  },
  {
    "_id": "bp7HkgSqyTRggmu4R",
    "difficulty": 0.6012558869701727,
    "language": "python3",
    "summary": "The normal title() function in Python capitalises the first letter of every word in a given sentence, leaving all the other letters as lowercase.\n\nThe goal of this challenge is to create a reverse_title() function, which achieves the complete opposite! Make the first letter of every word lowercase, and the rest uppercase!\n\nExamples\nreverse_title(\"this is a tit",
    "tags": [
      "language_fundamentals",
      "strings"
    ],
    "title": "Reverse Titling"
  },
  {
    "_id": "PKPmS5zwefc7M5emK",
    "difficulty": 0.602872411489646,
    "language": "python3",
    "summary": "You are given 2 out of 3 angles in a triangle, in degrees.\n\nWrite a function that classifies the missing angle as either \"acute\", \"right\", or \"obtuse\" based on its degrees.\n\nAn acute angle is less than 90 degrees.\nA right angle is exactly 90 degrees.\nAn obtuse angle is greater than 90 degrees (but less than 180 degrees).\n\nFor example: missing_angle(11, 20) sho",
    "tags": [
      "algebra",
      "numbers",
      "math"
    ],
    "title": "Missing Third Angle"
  },
  {
    "_id": "Erhk4BdRwd6J4MXH9",
    "difficulty": 0.6030612244897959,
    "language": "python3",
    "summary": "A leap year has one day added to February for being synchronized with the seasonal year. A leap year appears with a regular frequency, which is determined by the rule below:\n\nA year must either be divisible by 400 or divisible by 4 and not 100.\n\nGiven a year you must implement a function that returns True if it's a leap year, or False if it's not.\n\nExamples\nis",
    "tags": [
      "math",
      "validation",
      "logic",
      "dates"
    ],
    "title": "Leap Years"
  },
  {
    "_id": "dMEAuGWoud3QjBwwx",
    "difficulty": 0.603448275862069,
    "language": "python3",
    "summary": "Scientists have discovered that in four decades, the world will EXPLODE! It will also take three decades to make a spaceship to travel to a new planet that can hold the entire world population.\n\nYou must calculate the number of people there will be in three decades from now.\n\nThe variable P is the world population now.\nAssume that every month, someone gives bi",
    "tags": [
      "algorithms",
      "loops",
      "math"
    ],
    "title": "Century Crisis"
  },
  {
    "_id": "jyGco3e82sNfYKvCj",
    "difficulty": 0.6036036036036037,
    "language": "python3",
    "summary": "Create a function that takes an integer n and reverses it.\n\nExamples\nrev(5121) ➞ \"1215\"\n\nrev(69) ➞ \"96\"\n\nrev(-122157) ➞ \"751221\"\n\nNotes\nThis challenge is about using two operators that are related to division.\nIf the number is negative, treat it like it's positive.",
    "tags": [
      "math",
      "numbers",
      "formatting"
    ],
    "title": "Reverse the Number"
  },
  {
    "_id": "63apGxfHchZDqJyw5",
    "difficulty": 0.6043397968605725,
    "language": "python3",
    "summary": "Write a function that takes two numbers and returns if they should be added, subtracted, multiplied or divided to get 24. If none of the operations can give 24, return None.\n\nExamples\noperation(15, 9) ➞ \"added\"\n\noperation(26, 2) ➞ \"subtracted\"\n\noperation(11, 11) ➞ None\n\nNotes\nOnly integers are used as test input.\nNumbers should be added, subtracted, divided or",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "Add, Subtract, Multiply or Divide?"
  },
  {
    "_id": "TcKJTwwo9PvwLNHYT",
    "difficulty": 0.6046747967479674,
    "language": "python3",
    "summary": "A palindrome is a word that is identical forward and backwards.\n\nmom\nracecar\nkayak\n\nGiven a word, create a function that checks whether it is a palindrome.\n\nExamples\nis_palindrome(\"mom\") ➞ True\n\nis_palindrome(\"scary\") ➞ False\n\nis_palindrome(\"reviver\") ➞ True\n\nis_palindrome(\"stressed\") ➞ False\n\nNotes\nAll test input is lower cased.",
    "tags": [
      "strings",
      "validation",
      "loops",
      "interview"
    ],
    "title": "Is the String a Palindrome?"
  },
  {
    "_id": "Hdthzjmr5fRqEX93E",
    "difficulty": 0.6052269601100413,
    "language": "python3",
    "summary": "Implement a function that returns a list containing all the consecutive numbers in ascendant order from the given value low up to the given value high (bounds included).\n\nExamples\nget_sequence(1, 5) ➞ [1, 2, 3, 4, 5]\n\nget_sequence(98, 100) ➞ [98, 99, 100]\n\nget_sequence(1000, 1000) ➞ [1000]\n\nNotes\nIf you get stuck on a challenge, find help in the Resources tab.",
    "tags": [
      "arrays",
      "loops",
      "language_fundamentals"
    ],
    "title": "List of Consecutive Numbers"
  },
  {
    "_id": "i3eLgCmDEPdBWPkrT",
    "difficulty": 0.6054490413723511,
    "language": "python3",
    "summary": "Create a function that takes three number arguments — one number as an input and two additional numbers representing the endpoints of a closed range — and return the number limited to this range.\n\nIf the number falls within the range, the number should be returned.\nIf the number is less than the lower limit of the range, the lower limit should be returned.\nIf ",
    "tags": [
      "numbers",
      "conditions",
      "logic"
    ],
    "title": "Limit a Number's Value"
  },
  {
    "_id": "Jx4mjwEoFdfYuF9ky",
    "difficulty": 0.6055634807417974,
    "language": "python3",
    "summary": "Write a function that takes an integer and:\nIf the number is a multiple of 3, return \"Hello\".\nIf the number is a multiple of 5, return \"World\".\nIf the number is a multiple of both 3 and 5, return \"Hello World\".\n\nExamples\nhello_world(3) ➞ \"Hello\"\n\nhello_world(5) ➞ \"World\"\n\nhello_world(15) ➞ \"Hello World\"\n\nNotes\nDon't forget to return the result.",
    "tags": [
      "math",
      "conditions",
      "strings"
    ],
    "title": "Hello; Hello World; World"
  },
  {
    "_id": "XDsAXdFN3QbQAXuiL",
    "difficulty": 0.6064154786150713,
    "language": "python3",
    "summary": "Create a function that finds the index of a given item.\n\nExamples\nsearch([1, 5, 3], 5) ➞ 1\n\nsearch([9, 8, 3], 3) ➞ 2\n\nsearch([1, 2, 3], 4) ➞ -1\n\nNotes\nIf the item is not present, return -1.",
    "tags": [
      "arrays",
      "language_fundamentals",
      "loops"
    ],
    "title": "Find the Index (Part 1)"
  },
  {
    "_id": "XyEiZbRPN6tEcmEhk",
    "difficulty": 0.6066666666666667,
    "language": "python3",
    "summary": "Create a function that takes the length of the side of an equilateral triangle in centimeters and returns the height of the triangle in millimeters.\n\nExamples\nheight(2) ➞ 17.3 mm\n\nheight(5) ➞ 43.3 mm\n\nheight(6.2) ➞ 53.7 mm\n\nNotes\nReturn the answer rounded to one decimal place and in the format shown in the examples above.",
    "tags": [
      "math",
      "strings",
      "geometry"
    ],
    "title": "Height of an Equilateral Triangle"
  },
  {
    "_id": "WWw5gG3c4RN8dr6QD",
    "difficulty": 0.6070087609511889,
    "language": "python3",
    "summary": "Create a function that takes in year and month as input, then return what year it would be after n-months has elapsed.\n\nExamples\nafternmonths(2020, 24) ➞ 2022\n\nafternmonths(1832, 2) ➞ 1832\n\nafternmonths(1444, 60) ➞ 1449\n\nNotes\nAssume that adding 12 months will always increment the year by 1.\nIf no value is given for year or months, return \"year missing\" or \"mo",
    "tags": [
      "math",
      "dates",
      "numbers"
    ],
    "title": "After N Months..."
  },
  {
    "_id": "EDDKCedujFqWJwsFZ",
    "difficulty": 0.6071428571428571,
    "language": "python3",
    "summary": "In mathematics and digital electronics, a binary number is a number expressed in the base-2 numeral system or binary numeral system. Given a list of ones and zeroes of a binary number, return the equivalent decimal value.\n\nExamples\nbinarytodecimal([0, 0, 0, 1]) ➞ 1\n\nbinarytodecimal([0, 0, 1, 0]) ➞ 2\n\nbinarytodecimal([1, 1, 1, 1, 1, 0, 1, 1, 0, 1]) ➞ 1005\n\nNote",
    "tags": [
      "numbers",
      "arrays",
      "math"
    ],
    "title": "Binary List to Decimal"
  },
  {
    "_id": "pzXrBSiQdMqvRWazp",
    "difficulty": 0.6076475477971738,
    "language": "python3",
    "summary": "Imagine you run a website that presents users with different coding challenges in levels Easy, Medium, and Hard, where users get points for completing challenges. An Easy challenge is worth 5 points, a Medium challenge is worth 10 points, and a Hard challenge is worth 20 points.\n\nCreate a function that takes the amount of challenges a user has completed for ea",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "Coding Website Score Calculator"
  },
  {
    "_id": "E4Te8KMYPy68u8YLC",
    "difficulty": 0.6107539450613676,
    "language": "python3",
    "summary": "Create a function that takes a dictionary argument sizes (contains width, length, height keys) and returns the volume of the box.\n\nExamples\nvolumeofbox({ \"width\": 2, \"length\": 5, \"height\": 1 }) ➞ 10\n\nvolumeofbox({ \"width\": 4, \"length\": 2, \"height\": 2 }) ➞ 16\n\nvolumeofbox({ \"width\": 2, \"length\": 3, \"height\": 5 }) ➞ 30\n\nNotes\nDon't forget to return the result.\nR",
    "tags": [
      "math",
      "objects",
      "geometry"
    ],
    "title": "Volume of a Box"
  },
  {
    "_id": "e3rZLdqi3WLYTDhtL",
    "difficulty": 0.6114199090449722,
    "language": "python3",
    "summary": "Create a function that searches for the index of a given item in a list. If the item is present, it should return the index, otherwise, it should return -1.\n\nExamples\nsearch([1, 2, 3, 4], 3) ➞ 2\n\nsearch([2, 4, 6, 8, 10], 8) ➞ 3\n\nsearch([1, 3, 5, 7, 9], 11) ➞ -1\n\nNotes\nIf the item is not present, return -1.\nThe given list is ordered.",
    "tags": [
      "recursion",
      "arrays",
      "language_fundamentals"
    ],
    "title": "Find the Index (Part #2)"
  },
  {
    "_id": "8BtPaRSGwbhF57yie",
    "difficulty": 0.6136363636363636,
    "language": "python3",
    "summary": "This challenge will help you interpret mathematical relationships both algebraically and geometrically.\n\nMatchstick Houses, Steps 1, 2 and 3\n\nCreate a function that takes a number (step) as an argument and returns the number of matchsticks in that step. See step 1, 2 and 3 in the image above.\n\nExamples\nmatch_houses(1) ➞ 6\n\nmatch_houses(4) ➞ 21\n\nmatch_houses(87",
    "tags": [
      "algebra",
      "logic",
      "math"
    ],
    "title": "Matchstick Houses"
  },
  {
    "_id": "X4i7hHGhKYbGkcHx6",
    "difficulty": 0.6136363636363636,
    "language": "python3",
    "summary": "Create a function that returns the average of a list composed of letters. First, find the number of the letter in the alphabet in order to find the average of the list.\n\nA = 1\nB = 2\nC = 3\nD = 4\nE = 5\n\naverage = total sum of all numbers / number of item in the set\n\nReturn the result rounded to two decimal points.\n\nExamples\naverage_index([\"a\", \"b\", \"c\", \"i\"]) ➞",
    "tags": [
      "arrays",
      "loops",
      "math"
    ],
    "title": "Find the Average of the Letters 📊"
  },
  {
    "_id": "dghm8ECRzffdwKHkA",
    "difficulty": 0.6147986942328618,
    "language": "python3",
    "summary": "Given a string of letters, how many capital letters are there?\n\nExamples\ncapital_letters(\"fvLzpxmgXSDrobbgMVrc\") ➞ 6\n\ncapital_letters(\"JMZWCneOTFLWYwBWxyFw\") ➞ 14\n\ncapital_letters(\"mqeytbbjwqemcdrdsyvq\") ➞ 0\n\nNotes\nN/A",
    "tags": [
      "strings",
      "loops",
      "language_fundamentals",
      "regex"
    ],
    "title": "Count the Capital Letters"
  },
  {
    "_id": "JnyMc9QDFS8T9kjs7",
    "difficulty": 0.6150627615062761,
    "language": "python3",
    "summary": "Given a 10x10 grid of numbers 1-100, return the Spotlight Sum, given a number n. The spotlight sum can be defined as the total of the 8 numbers immediately surrounding the number n on the grid, including n in the total.\n\nWorked Example\n[\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n  [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],\n  [21, 22, 23, 24, 25, 26, 27, 28, 29, 30],",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "Spotlight Sum"
  },
  {
    "_id": "5x4uruF77BzWFFiQM",
    "difficulty": 0.6171875,
    "language": "python3",
    "summary": "Given a pH value, return whether that value is \"alkaline\" (greater than 7), \"acidic\" (less than 7), or \"neutral\" (7). Return \"invalid\" if the value given is less than 0 or greater than 14.\n\nImage of a pH chart\n\nExamples\npH_name(5) ➞ \"acidic\"\n\npH_name(8.7) ➞ \"alkaline\"\n\npH_name(7) ➞ \"neutral\"\n\nNotes\nValues such as 6.9999 and 8.00001 should return \"acidic\" and \"",
    "tags": [
      "conditions",
      "language_fundamentals",
      "numbers"
    ],
    "title": "The pH Scale"
  },
  {
    "_id": "5ejvPTQeiioTTA9xZ",
    "difficulty": 0.6175226586102719,
    "language": "python3",
    "summary": "Create a function that checks if the argument is an integer or a string. Return \"int\" if it's an integer and \"str\" if it's a string.\n\nExamples\nintorstring(8) ➞ \"int\"\n\nintorstring(\"Hello\") ➞ \"str\"\n\nintorstring(9843532) ➞ \"int\"\n\nNotes\nInput will either be an integer or a string.",
    "tags": [
      "numbers",
      "strings",
      "language_fundamentals",
      "validation"
    ],
    "title": "String or Integer?"
  },
  {
    "_id": "6bMaDhnn34shBBpvi",
    "difficulty": 0.6204081632653061,
    "language": "python3",
    "summary": "Edabit allows for markdown formatting, meaning that it's possible to format words by surrounding text with special characters. For example, to get bold text, you surround the text with double asterisks, like this bold.\n\nHere is a list of the possible formatting options in Edabit and how to apply them:\nbold\n italics\n` inline code `\nstrikethrough\n\nChallenge\nGive",
    "tags": [
      "strings",
      "formatting",
      "conditions",
      "language_fundamentals"
    ],
    "title": "Edabit's Markdown Formatting"
  },
  {
    "_id": "8SBG29RYLwTbGxn7T",
    "difficulty": 0.621505376344086,
    "language": "python3",
    "summary": "Create a function that determines whether a shopping order is eligible for free shipping. An order is eligible for free shipping if the total cost of items purchased exceeds $50.00.\n\nExamples\nfree_shipping({ \"Shampoo\": 5.99, \"Rubber Ducks\": 15.99 }) ➞ False\n\nfree_shipping({ \"Flatscreen TV\": 399.99 }) ➞ True\n\nfree_shipping({ \"Monopoly\": 11.99, \"Secret Hitler\": ",
    "tags": [
      "objects",
      "validation"
    ],
    "title": "Online Shopping "
  },
  {
    "_id": "RixixSPn6psQKYpnP",
    "difficulty": 0.6222845129642607,
    "language": "python3",
    "summary": "This is a reverse coding challenge. Normally you're given explicit directions with how to create a function. Here, you must generate your own function to satisfy the relationship between the inputs and outputs.\n\nYour task is to create a function that, when fed the inputs below, produce the sample outputs shown.\n\nExamples\n[5, 7, 8, 2, 1], 2 ➞ [1, 1, 0, 0, 1]\n\n[",
    "tags": [
      "arrays",
      "math",
      "loops"
    ],
    "title": "Reverse Coding Challenge #3"
  },
  {
    "_id": "YANDMKMm9uRvvgPGa",
    "difficulty": 0.622349570200573,
    "language": "python3",
    "summary": "Write a function that returns True if two lists have the same number of unique elements, and False otherwise.\n\nTo illustrate:\n\nlst1 = [1, 3, 4, 4, 4]\nlst2 = [2, 5, 7]\n\nIn lst1, the number 4 appears three times, which means it contains three unique elements: [1, 3, 4]. Since lst1 and lst2 both contain the same number of unique elements, this example would retur",
    "tags": [
      "arrays",
      "language_fundamentals",
      "validation"
    ],
    "title": "Same Number of Unique Elements"
  },
  {
    "_id": "xtCXXhCWhJz3FmyXE",
    "difficulty": 0.6228373702422145,
    "language": "python3",
    "summary": "Write a function that receives two portions of a path and joins them. The portions will be joined with the \"/\" separator. There could be only one separator and if it is not present it should be added.\n\nExamples\njoin_path(\"portion1\", \"portion2\") ➞ \"portion1/portion2\"\n\njoin_path(\"portion1/\", \"portion2\") ➞ \"portion1/portion2\"\n\njoin_path(\"portion1\", \"/portion2\") ➞",
    "tags": [
      "strings",
      "language_fundamentals"
    ],
    "title": "Join Two Portions of a Path"
  },
  {
    "_id": "nXLfbkrdk9dvhCiRD",
    "difficulty": 0.6236559139784946,
    "language": "python3",
    "summary": "Create a function that takes two arguments of a list of numbers lst and a constant number n and returns the n largest numbers from the given list.\n\nExamples\nlargest_numbers(2, [4, 3, 2, 1]) ➞ [3, 4]\n\nlargest_numbers(1, [7, 19, 4, 2]) ➞ [19]\n\nlargest_numbers(3, [14, 12, 57, 11, 18, 16]) ➞ [16, 18, 57]\n\nlargest_numbers(0, [1, 3, 4, 2]) ➞ []\n\nNotes\nThe returned l",
    "tags": [
      "arrays",
      "numbers",
      "conditions",
      "algorithms"
    ],
    "title": "Largest Numbers"
  },
  {
    "_id": "PqqHEyZjwt8PQ2RNm",
    "difficulty": 0.6238244514106583,
    "language": "python3",
    "summary": "A word is on the loose and now has tried to hide amongst a crowd of tall letters! Help write a function to detect what the word is, knowing the following rules:\n\nThe wanted word is in lowercase.\nThe crowd of letters is all in uppercase.\nNote that the word will be spread out amongst the random letters, but their letters remain in the same order.\n\nExamples\ndetec",
    "tags": [
      "strings",
      "language_fundamentals"
    ],
    "title": "What's Hiding Amongst the Crowd?"
  },
  {
    "_id": "hBFo8jAu5E7824esW",
    "difficulty": 0.624009900990099,
    "language": "python3",
    "summary": "Create a function that takes a string and returns the word count. The string will be a sentence.\n\nExamples\ncount_words(\"Just an example here move along\") ➞ 6\n\ncount_words(\"This is a test\") ➞ 4\n\ncount_words(\"What an easy task, right\") ➞ 5\n\nNotes\nIf you get stuck on a challenge, find help in the Resources tab.\nIf you're really stuck, unlock solutions in the Solu",
    "tags": [
      "strings",
      "math",
      "numbers"
    ],
    "title": "Get Word Count"
  },
  {
    "_id": "QgAwpaFWD2jtxZ2wG",
    "difficulty": 0.625,
    "language": "python3",
    "summary": "Given an integer n. Your task is to find how many digits this integer contains without using str or len methods!\n\nExamples\nsum_digits(100) ➞ 3\n\nsum_digits(1000) ➞ 4\n\nsum_digits(1) ➞ 1\n\nNotes\nN/A",
    "tags": [
      "algorithms",
      "math",
      "conditions",
      "loops"
    ],
    "title": "How Many Digits?"
  },
  {
    "_id": "TkL6GTu9QMhYnv869",
    "difficulty": 0.6261636452719255,
    "language": "python3",
    "summary": "Create a function that adds a string ending to each member in a list.\n\nExamples\nadd_ending([\"clever\", \"meek\", \"hurried\", \"nice\"], \"ly\")\n➞ [\"cleverly\", \"meekly\", \"hurriedly\", \"nicely\"]\n\nadd_ending([\"new\", \"pander\", \"scoop\"], \"er\")\n➞ [\"newer\", \"panderer\", \"scooper\"]\n\nadd_ending([\"bend\", \"sharpen\", \"mean\"], \"ing\")\n➞ [\"bending\", \"sharpening\", \"meaning\"]\n\nNotes\nDon",
    "tags": [
      "arrays",
      "higher_order_functions",
      "loops",
      "strings"
    ],
    "title": "Word Endings"
  },
  {
    "_id": "GPRZauknkEbyRz5qM",
    "difficulty": 0.6268656716417911,
    "language": "python3",
    "summary": "Python has three main types of data structures formed by smaller objects:\nLists, written with [] square brackets, such as [1, 2, 4, 8].\nTuples, written with () parenthesis, such as (7, 8, 9).\nSets, written with {} curly brackets, such as {2, 3, 5, 7, 11, 13}.\n\nEach of these types has their own special properties and peculiarities that are worth knowing, but th",
    "tags": [
      "language_fundamentals",
      "data_structures",
      "arrays"
    ],
    "title": "Which One Is Your Type?"
  },
  {
    "_id": "MpHke3QqR4uC75rYS",
    "difficulty": 0.6272493573264781,
    "language": "python3",
    "summary": "Write a function that maps files to their extension names.\n\nExamples\nget_extension([\"code.html\", \"code.css\"])\n➞ [\"html\", \"css\"]\n\nget_extension([\"project1.jpg\", \"project1.pdf\", \"project1.mp3\"])\n➞ [\"jpg\", \"pdf\", \"mp3\"]\n\nget_extension([\"ruby.rb\", \"cplusplus.cpp\", \"python.py\", \"javascript.js\"])\n➞ [\"rb\", \"cpp\", \"py\", \"js\"]\n\nNotes\nN/A",
    "tags": [
      "strings",
      "higher_order_functions",
      "arrays"
    ],
    "title": "Get the File Extension"
  },
  {
    "_id": "XSMnRi9rvLb7wWc4v",
    "difficulty": 0.6273291925465838,
    "language": "python3",
    "summary": "Create a function that takes a list of numbers lst as an argument. Square each number in the list if the number is even and square root √ the number if it is odd.\nReturn the sum of the new list rounded to two decimal places.\n\nExample:\n[2, 4, 9]  ➞ 23\n2 ^ 2 + 4 ^ 2 + √9 = 4 + 16 + 3 = 23\n\nExamples\nlist_sum([1, 3, 3, 1, 10]) ➞ 105.46\n\nlist_sum([2, 3, 4, 5]) ➞ 23",
    "tags": [
      "arrays",
      "language_fundamentals",
      "numbers",
      "math"
    ],
    "title": "Sum of Numbers in a List"
  },
  {
    "_id": "bRHsthzPhax3ZoG9i",
    "difficulty": 0.6276346604215457,
    "language": "python3",
    "summary": "Create a function which takes in a sentence txt and a string of characters chars and return the sentence but with all the specified characters removed.\n\nExamples\nstrip_sentence(\"the quick brown fox jumps over the lazy dog\", \"aeiou\") ➞ \"th qck brwn fx jmps vr th lzy dg\"\n\nstrip_sentence(\"the hissing snakes sinisterly slither across the rustling leaves\", \"s\") ➞ \"",
    "tags": [
      "strings",
      "language_fundamentals",
      "formatting"
    ],
    "title": "Stripping a Sentence Down"
  },
  {
    "_id": "KSQPoma9iaz5bkSnv",
    "difficulty": 0.627906976744186,
    "language": "python3",
    "summary": "Given a number n, return a list containing several lists. Each list increments in size, from range 1 to n inclusive, contaning its length as the elements.\n\nExamples\npyramid_lists(1) ➞ [[1]]\n\npyramid_lists(3) ➞ [[1], [2, 2], [3, 3, 3]]\n\npyramid_lists(5) ➞ [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4], [5, 5, 5, 5, 5]]\n\nNotes\nn will be a positive integer.",
    "tags": [
      "arrays",
      "language_fundamentals",
      "loops"
    ],
    "title": "Pyramid Lists"
  },
  {
    "_id": "7k3Nc92ieHWufDP7a",
    "difficulty": 0.628140703517588,
    "language": "python3",
    "summary": "Create a function that returns the total number of parameters passed in.\n\nExamples\nnumber_args(\"a\", \"b\", \"c\") ➞ 3\n\nnumber_args(10, 20, 30, 40, 50) ➞ 5\n\nnumber_args(x, y) ➞ 2\n\nnumber_args() ➞ 0\n\nNotes\nHow can you express the input parameter so it takes a variable number of arguments?\nCheck the Resources tab for additional info.",
    "tags": [
      "language_fundamentals"
    ],
    "title": "Return the Total Number of Parameters"
  },
  {
    "_id": "h4SrMDnwPpmotn2cZ",
    "difficulty": 0.6281645569620253,
    "language": "python3",
    "summary": "Create a function that takes a list of numbers and returns the sum of its cubes.\n\nExamples\nsumofcubes([1, 5, 9]) ➞ 855\nSince 1^3 + 5^3 + 9^3 = 1 + 125 + 729 = 855\n\nsumofcubes([3, 4, 5]) ➞ 216\n\nsumofcubes([2]) ➞ 8\n\nsumofcubes([]) ➞ 0\n\nNotes\nIf given an empty list, return 0.",
    "tags": [
      "algebra",
      "arrays",
      "math",
      "loops",
      "geometry"
    ],
    "title": "Sum of Cubes"
  },
  {
    "_id": "i9jcFu2pGQjtJ3nea",
    "difficulty": 0.6282932416953035,
    "language": "python3",
    "summary": "Write a function that returns True if all characters in a string are identical and False otherwise.\n\nExamples\nis_identical(\"aaaaaa\") ➞ True\n\nis_identical(\"aabaaa\") ➞ False\n\nis_identical(\"ccccca\") ➞ False\n\nis_identical(\"kk\") ➞ True\n\nNotes\nN/A",
    "tags": [
      "strings",
      "validation"
    ],
    "title": "Check if a String Contains only Identical Characters"
  },
  {
    "_id": "x7d9TJ3G8jfv6jGak",
    "difficulty": 0.6286050618010595,
    "language": "python3",
    "summary": "Given a number and a dictionary with min and max properties, return True if the number lies within the given range (inclusive).\n\nExamples\nisinrange(4, { \"min\": 0, \"max\": 5 }) ➞ True\n\nisinrange(4, { \"min\": 4, \"max\": 5 }) ➞ True\n\nisinrange(4, { \"min\": 6, \"max\": 10 }) ➞ False\n\nisinrange(5, { \"min\": 5, \"max\": 5 }) ➞ True\n\nNotes\nNumbers can be positive or negative,",
    "tags": [
      "numbers",
      "language_fundamentals",
      "objects",
      "validation"
    ],
    "title": "Check if Number is within a Given Range"
  },
  {
    "_id": "sGrSbcXGeMGEc3HXR",
    "difficulty": 0.628757108042242,
    "language": "python3",
    "summary": "Create a function that returns the minimum number of elements removed to make the sum of all elements in a list even.\n\nExamples\nminimum_removals([1, 2, 3, 4, 5]) ➞ 1\n\nminimum_removals([5, 7, 9, 11]) ➞ 0\n\nminimum_removals([5, 7, 9, 12]) ➞ 1\n\nNotes\nIf the sum is already even, return 0 (see example #2).",
    "tags": [
      "arrays",
      "higher_order_functions",
      "loops"
    ],
    "title": "Minimum Removals to Make Sum Even"
  },
  {
    "_id": "42YDYc3Pfc9QXpk2x",
    "difficulty": 0.6292906178489702,
    "language": "python3",
    "summary": "Create a function that takes a list (slot machine outcome) and returns True if all elements in the list are identical, and False otherwise. The list will contain 4 elements.\n\nExamples\ntest_jackpot([\"@\", \"@\", \"@\", \"@\"]) ➞ True\n\ntest_jackpot([\"abc\", \"abc\", \"abc\", \"abc\"]) ➞ True\n\ntest_jackpot([\"SS\", \"SS\", \"SS\", \"SS\"]) ➞ True\n\ntest_jackpot([\"&&\", \"&\", \"&&&\", \"&&&&",
    "tags": [
      "arrays",
      "control_flow",
      "strings",
      "games"
    ],
    "title": "Hitting the Jackpot"
  },
  {
    "_id": "4eWMyqNw2TRojC5jQ",
    "difficulty": 0.6295857988165681,
    "language": "python3",
    "summary": "Create a function that takes a sentence and turns every \"i\" into \"wi\" and \"e\" into \"we\", and add \"owo\" at the end.\n\nExamples\nowofied(\"I'm gonna ride 'til I can't no more\")\n➞ \"I'm gonna rwidwe 'twil I can't no morwe owo\"\n\nowofied(\"Do you ever feel like a plastic bag\")\n➞ \"Do you wevwer fwewel lwikwe a plastwic bag owo\"\n\nowofied(\"Cause baby you're a firework\")\n➞",
    "tags": [
      "strings",
      "regex",
      "formatting"
    ],
    "title": "Owofied a Sentence"
  },
  {
    "_id": "ncqFJAp4bBiGwfBcg",
    "difficulty": 0.6310679611650486,
    "language": "python3",
    "summary": "Create a function that calculates the number of different squares in an n * n  square grid. Check the Resources tab.\n\nExamples\nnumber_squares(2) ➞ 5\n\nnumber_squares(4) ➞ 30\n\nnumber_squares(5) ➞ 55\n\nExplanation\nIf n = 0 then the number of squares is 0\nIf n = 1 then the number of squares is 1 + 0 = 1\nIf n = 2 then the number of squares is 2^2 + 1 = 4 + 1 = 5\nIf",
    "tags": [
      "math",
      "recursion"
    ],
    "title": "Number of Squares in an N * N Grid"
  },
  {
    "_id": "XRLdsjphEKnoejY8c",
    "difficulty": 0.6311475409836066,
    "language": "python3",
    "summary": "Given a number n, find if its 2nd, 4th and 8th roots are all integers (perfect roots), return True if it exists, False if not.\n\nExamples\nperfect_roots(256) ➞ True\n2nd root of 256 is 16\n4th root of 256 is 4\n8th root of 256 is 2\n\nperfect_roots(1000) ➞ False\n\nperfect_roots(6561) ➞ True\n\nNotes\nn > 1",
    "tags": [
      "algebra",
      "math",
      "numbers"
    ],
    "title": "Perfect Roots"
  },
  {
    "_id": "gKQ9E956yQujqSTZw",
    "difficulty": 0.6311475409836066,
    "language": "python3",
    "summary": "Mubashir needs your help in a simple task.\n\nGiven a list of numbers lst:\n\nCreate a dictionary for each given number.\nThe dictionary key will be the number converted to a string.\nThe value will be the corresponding character code converted to a string (check ASCII table).\nReturn a list of the resulting dictionaries.\n\nExamples\nnumtodict([118, 117, 120]) ➞ [{\"118",
    "tags": [
      "arrays",
      "interview",
      "strings"
    ],
    "title": "Numbers to Dictionaries"
  },
  {
    "_id": "MZHWZPrMSA3BNzfdq",
    "difficulty": 0.6316463805253043,
    "language": "python3",
    "summary": "Create a function that removes the first and last characters from a string.\n\nExamples\nremovefirstlast(\"hello\") ➞ \"ell\"\n\nremovefirstlast(\"maybe\") ➞ \"ayb\"\n\nremovefirstlast(\"benefit\") ➞ \"enefi\"\n\nremovefirstlast(\"a\") ➞ \"a\"\n\nNotes\nFor words with two or fewer letters (including an empty string), return the string itself (see example #4).",
    "tags": [
      "strings",
      "formatting",
      "language_fundamentals"
    ],
    "title": "Remove the First and Last Characters"
  },
  {
    "_id": "aQWEQDoWiNbryG8xs",
    "difficulty": 0.632,
    "language": "python3",
    "summary": "Create a function that takes a number num and returns the first 10 multiples of num with 1 added to it, separated by commas.\n\nExamples\nntablesplus_one(7) ➞ \"8,15,22,29,36,43,50,57,64,71\"\n\nntablesplus_one(1) ➞ \"2,3,4,5,6,7,8,9,10,11\"\n\nntablesplus_one(3) ➞ \"4,7,10,13,16,19,22,25,28,31\"\n\nNotes\nThere is no comma after the last number.",
    "tags": [
      "algorithms",
      "math",
      "numbers",
      "loops"
    ],
    "title": "N Tables + 1"
  },
  {
    "_id": "5zvW3EheSBGGsr65P",
    "difficulty": 0.6321070234113713,
    "language": "python3",
    "summary": "Create a function that takes a number as an argument and returns a list of numbers counting down from this number to zero.\n\nExamples\ncountdown(5) ➞ [5, 4, 3, 2, 1, 0]\n\ncountdown(1) ➞ [1, 0]\n\ncountdown(0) ➞ [0]\n\nNotes\nThe argument will always be greater than or equal to zero.",
    "tags": [
      "arrays",
      "loops"
    ],
    "title": "Generate a Countdown of Numbers in a List"
  },
  {
    "_id": "4opbMo6DJxem7PAZH",
    "difficulty": 0.6329896907216495,
    "language": "python3",
    "summary": "Given a sorted list of numbers, remove any numbers that are divisible by 13. Return the amended list.\n\nExamples\nunlucky_13([53, 182, 435, 591, 637]) ➞ [53, 435, 591]\n182 and 637 are divisible by 13.\n\nunlucky_13([24, 316, 393, 458, 1279]) ➞ [24, 316, 393, 458, 1279]\nNo numbers in the list are divisible by 13.\n\nunlucky_13([104, 351, 455, 806, 871]) ➞ []\nAll numb",
    "tags": [
      "language_fundamentals",
      "arrays",
      "numbers"
    ],
    "title": "Unlucky 13"
  },
  {
    "_id": "zY8WSKGcqmkGd73Wr",
    "difficulty": 0.6340782122905028,
    "language": "python3",
    "summary": "Given a dictionary of people and their ages, return how old the people would be after n years have passed. Use the absolute value of n.\n\nExamples\nafternyears({\n  \"Joel\" : 32,\n  \"Fred\" : 44,\n  \"Reginald\" : 65,\n  \"Susan\" : 33,\n  \"Julian\" : 13\n}, 1) ➞ {\n  \"Joel\" : 33,\n  \"Fred\" : 45,\n  \"Reginald\" : 66,\n  \"Susan\" : 34,\n  \"Julian\" : 14\n}\n\nafternyears({\n  \"Baby\" : 2,",
    "tags": [
      "arrays",
      "numbers"
    ],
    "title": "Ageing the Population..."
  },
  {
    "_id": "neMnxprBg6cM5Z4gr",
    "difficulty": 0.6354166666666666,
    "language": "python3",
    "summary": "In mathematics, an Arithmetic Progression (AP) is a sequence of numbers such that the difference between the consecutive terms is constant. Create a function that takes three arguments:\nThe first element of the sequence first\nConstant difference between the elements diff\nTotal numbers in the sequence n\n\nReturn the first n elements of the sequence with the give",
    "tags": [
      "arrays",
      "strings",
      "functional_programming",
      "language_fundamentals"
    ],
    "title": "Arithmetic Progression"
  },
  {
    "_id": "yn2u7ixy6GWq8K39S",
    "difficulty": 0.6355140186915887,
    "language": "python3",
    "summary": "Create a function to calculate the determinant of a 2 * 2 matrix. The determinant of the following matrix is: ad - bc:\n\n[[a, b], [c, d]]\n\nExamples\ncalc_determinant([\n  [1, 2],\n  [3, 4]\n]) ➞ -2\n\ncalc_determinant([\n  [5, 3],\n  [3, 1]\n]) ➞ -4\n\ncalc_determinant([\n  [1, 1],\n  [1, 1]\n]) ➞ 0\n\nNotes\nMatrix will be in 2 * 2 form only.",
    "tags": [
      "math",
      "arrays"
    ],
    "title": "Calculate Determinant of a 2x2 Matrix"
  },
  {
    "_id": "3Aggf4GSyFrecBnhB",
    "difficulty": 0.6357142857142857,
    "language": "python3",
    "summary": "Create a function which takes a number and returns the maximum value by rearranging its digits.\n\nExamples\nrotatemaxnumber(123) ➞ 321\n\nrotatemaxnumber(\"001\") ➞ 100\n\nrotatemaxnumber(999) ➞ 999\n\nNotes\nThe input number can be a digit or a string.",
    "tags": [
      "language_fundamentals",
      "logic",
      "math",
      "numbers"
    ],
    "title": "Rotate for Max Number"
  },
  {
    "_id": "42iCz77fPfD9SmdhB",
    "difficulty": 0.6362007168458781,
    "language": "python3",
    "summary": "Create a function that takes a dictionary as an argument and returns a string with facts about the city. The city facts will need to be extracted from the dictionaries three properties:\n\nname\npopulation\ncontinent\n\nThe string should have the following format: X has a population of Y and is situated in Z (where X is the city name, Y is the population and Z is th",
    "tags": [
      "objects",
      "strings",
      "language_fundamentals"
    ],
    "title": "Extract City Facts"
  },
  {
    "_id": "RvK4LTigc4jbRLJio",
    "difficulty": 0.636482939632546,
    "language": "python3",
    "summary": "Sam and Frodo need to be close. If they are side by side in the list, your function should return True. If there is a name between them, return False.\n\nExamples\nmiddle_earth([\"Frodo\", \"Sam\", \"Gandalf\"]) ➞ True\n\nmiddle_earth([\"Frodo\", \"Saruman\", \"Sam\"]) ➞ False\n\nmiddle_earth([\"Orc\", \"Sam\", \"Frodo\", \"Legolas\"]) ➞ True\n\nNotes\nNo matter who comes first, the result",
    "tags": [
      "arrays",
      "algorithms",
      "logic",
      "validation"
    ],
    "title": "Is Sam with Frodo?"
  },
  {
    "_id": "WAyXZpuqxtXG9swb3",
    "difficulty": 0.636604774535809,
    "language": "python3",
    "summary": "Create a function that filters out a list to include numbers that only have a certain number of digits.\n\nExamples\nfilterdigitlength([88, 232, 4, 9721, 555], 3) ➞ [232, 555]\nInclude only numbers with 3 digits.\n\nfilterdigitlength([2, 7, 8, 9, 1012], 1) ➞ [2, 7, 8, 9]\nInclude only numbers with 1 digit.\n\nfilterdigitlength([32, 88, 74, 91, 300, 4050], 1) ➞ []\nNo nu",
    "tags": [
      "arrays",
      "higher_order_functions",
      "numbers"
    ],
    "title": "Filter by Digit Length"
  },
  {
    "_id": "7399oChFnyFWNTBw8",
    "difficulty": 0.6366666666666667,
    "language": "python3",
    "summary": "Create a function that takes an array of hurdle heights and a jumper's jump height, and determine whether or not the hurdler can clear all the hurdles.\n\nA hurdler can clear a hurdle if their jump height is greater than or equal to the hurdle height.\n\nExamples\nhurdle_jump([1, 2, 3, 4, 5], 5) ➞ True\n\nhurdle_jump([5, 5, 3, 4, 5], 3) ➞ False\n\nhurdle_jump([5, 4, 5,",
    "tags": [
      "arrays",
      "conditions",
      "control_flow",
      "validation"
    ],
    "title": "Hurdle Jump"
  },
  {
    "_id": "2bPDDYW9RWaBxQxYY",
    "difficulty": 0.6368421052631579,
    "language": "python3",
    "summary": "Write a function that turns a comma-delimited list into an array of strings.\n\nExamples\nto_array(\"watermelon, raspberry, orange\")\n➞ [\"watermelon\", \"raspberry\", \"orange\"]\n\nto_array(\"x1, x2, x3, x4, x5\")\n➞ [\"x1\", \"x2\", \"x3\", \"x4\", \"x5\"]\n\nto_array(\"a, b, c, d\")\n➞ [\"a\", \"b\", \"c\", \"d\"]\n\nto_array(\"\")\n➞ []\n\nNotes\nReturn an empty list for an empty string.",
    "tags": [
      "strings",
      "loops"
    ],
    "title": "List from Comma-Delimited String"
  },
  {
    "_id": "eZ9Fimj4ddpr7Ypof",
    "difficulty": 0.6370967741935484,
    "language": "python3",
    "summary": "Create a function that takes a string s and modifies the given string as per the below examples:\n\nExamples\nmumbling(\"MubAshIr\") ➞ \"M-Uu-Bbb-Aaaa-Sssss-Hhhhhh-Iiiiiii-Rrrrrrrr\"\n\nmumbling(\"maTT\") ➞ \"M-Aa-Ttt-Tttt\"\n\nmumbling(\"EdaBit\") ➞ \"E-Dd-Aaa-Bbbb-Iiiii-Tttttt\"\n\nNotes\nN/A",
    "tags": [
      "logic",
      "loops",
      "strings",
      "interview"
    ],
    "title": "Mumbling Challenge"
  },
  {
    "_id": "ud5FBjsdGApJhJMtm",
    "difficulty": 0.6373831775700934,
    "language": "python3",
    "summary": "Create a function that takes in an array and returns True if all its values are even, and False otherwise.\n\nNot a big deal, your friend says. He writes the following code:\n\ndef checkalleven(lst):\n  return all(x % 2 == 0)\n\nThe code above leads to a Reference Error, with x being undefined. Fix the code above so that all tests pass:\n\nExamples\ncheckalleven([1, 2,",
    "tags": [
      "bugs",
      "arrays",
      "validation",
      "numbers"
    ],
    "title": "Find the Bug: Checking Even Numbers"
  },
  {
    "_id": "vsBznidKiKA96gp2J",
    "difficulty": 0.6376811594202898,
    "language": "python3",
    "summary": "Given a list of prices prices and a \"supposed\" total t, return True if there is a hidden fee added to the total (i.e. the total is greater than the sum of prices), otherwise return False.\n\nExamples\nhashiddenfee([\"$2\", \"$4\", \"$1\", \"$8\"], \"$15\") ➞ False\n\nhashiddenfee([\"$1\", \"$2\", \"$3\"], \"$6\") ➞ False\n\nhashiddenfee([\"$1\"], \"$4\") ➞ True\n\nNotes\nRemember that each p",
    "tags": [
      "arrays",
      "numbers",
      "language_fundamentals",
      "validation"
    ],
    "title": "No Hidden Fees"
  },
  {
    "_id": "kSmkcYLcWRnEEwXwX",
    "difficulty": 0.6382978723404256,
    "language": "python3",
    "summary": "You just returned home to find your mansion has been robbed! Given a dictionary of the stolen items, return the total amount of the burglary (number). If nothing was robbed, return the string \"Lucky you!\".\n\nExamples\ncalculate_losses({\n  \"tv\" : 30,\n  \"skate\" : 20,\n  \"stereo\" : 50,\n}) ➞ 100\n\ncalculate_losses({\n  \"painting\" : 20000,\n}) ➞ 20000\n\ncalculate_losses({",
    "tags": [
      "loops",
      "data_structures"
    ],
    "title": "Burglary Series (01):  Calculate Total Losses"
  },
  {
    "_id": "oTJaJ895ubqqpRPMh",
    "difficulty": 0.6386603995299648,
    "language": "python3",
    "summary": "Given two strings, create a function that returns the total number of unique characters from the combined string.\n\nExamples\ncount_unique(\"apple\", \"play\") ➞ 5\n\"appleplay\" has 5 unique characters:\n\"a\", \"e\", \"l\", \"p\", \"y\"\n\ncount_unique(\"sore\", \"zebra\") ➞ 7\n\ncount_unique(\"a\", \"soup\") ➞ 5\n\nNotes\nEach word will contain at least one letter.\nAll words will be lower ca",
    "tags": [
      "strings",
      "data_structures"
    ],
    "title": "Total Number of Unique Characters"
  },
  {
    "_id": "wBuZ2Qp9okzGeZc6e",
    "difficulty": 0.6388888888888888,
    "language": "python3",
    "summary": "Create a function that takes a string road and returns the car that's in first place. The road will be made of \"=\", and cars will be represented by letters in the alphabet.\n\nExamples\nfirst_place(\"====b===O===e===U=A==\") ➞ \"A\"\n\nfirst_place(\"e==B=Fe\") ➞ \"e\"\n\nfirst_place(\"proeNeoOJGnfl\") ➞ \"l\"\n\nNotes\nReturn None if there are no cars on the road or if there is no",
    "tags": [
      "strings",
      "language_fundamentals",
      "loops"
    ],
    "title": "Who's in First Place?"
  },
  {
    "_id": "cSwpsZqMoSMvQFizB",
    "difficulty": 0.6392742796157951,
    "language": "python3",
    "summary": "Write a function that returns True if all integers in a list are factors of a number, and False otherwise.\n\nExamples\ncheck_factors([2, 3, 4], 12) ➞ True\nSince 2, 3, and 4 are all factors of 12.\n\ncheck_factors([1, 2, 3, 8], 12) ➞ False\n8 is not a factor of 12.\n\ncheck_factors([1, 2, 50], 100) ➞ True\n\ncheck_factors([3, 6], 9) ➞ False\n\nNotes\nN/A",
    "tags": [
      "arrays",
      "validation",
      "loops"
    ],
    "title": "Check Factors"
  },
  {
    "_id": "S5BvgpwXkda8Xq7Xy",
    "difficulty": 0.6395348837209303,
    "language": "python3",
    "summary": "Darts is a target game played by throwing feathered darts at a circular board with numbered spaces. Our darts game is the simplest of all games. The score of a single turn is calculated based on the distance from the middle. You need to create a function that takes the dart location as two cartesian coordinates (x, y) and returns a score based on the distance",
    "tags": [
      "math",
      "language_fundamentals",
      "conditions",
      "control_flow"
    ],
    "title": "Primitive Darts Game"
  },
  {
    "_id": "onGPLPhXkLr3KCJpF",
    "difficulty": 0.6408450704225352,
    "language": "python3",
    "summary": "You are given a list of integers having both negative and positive values, except for one integer which can be negative or positive. Create a function to find out that integer.\n\nExamples\nlonely_integer([1, -1, 2, -2, 3]) ➞ 3\n3 has no matching negative appearance.\n\nlonely_integer([-3, 1, 2, 3, -1, -4, -2]) ➞ -4\n-4 has no matching positive appearance.\n\nlonely_in",
    "tags": [
      "numbers",
      "arrays",
      "functional_programming"
    ],
    "title": "Lonely Integer"
  },
  {
    "_id": "Fr79YnHiMG7Ybh2Mf",
    "difficulty": 0.6412459720730398,
    "language": "python3",
    "summary": "Given an integer list, transform it into a mirror.\n\nExamples\nmirror([0, 2, 4, 6]) ➞ [0, 2, 4, 6, 4, 2, 0]\n\nmirror([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5, 4, 3, 2, 1]\n\nmirror([3, 5, 6, 7, 8]) ➞ [3, 5, 6, 7, 8, 7, 6, 5, 3]\n\nNotes\nDo not repeat the last item of the given list.",
    "tags": [
      "arrays",
      "numbers",
      "logic"
    ],
    "title": "Mirror Array"
  },
  {
    "_id": "9McBqhfegQFYZ8Bwm",
    "difficulty": 0.6412508784258608,
    "language": "python3",
    "summary": "Create a function that takes a string as its argument and returns the string in reversed order.\n\nExamples\nreverse(\"Hello World\") ➞ \"dlroW olleH\"\n\nreverse(\"The quick brown fox.\") ➞ \".xof nworb kciuq ehT\"\n\nreverse(\"Edabit is really helpful!\") ➞ \"!lufpleh yllaer si tibadE\"\n\nNotes\nYou can expect a valid string for all test cases.",
    "tags": [
      "strings",
      "formatting",
      "sorting"
    ],
    "title": "Reverse the Order of a String"
  },
  {
    "_id": "gfZD8snWA8XfCudZ8",
    "difficulty": 0.6428571428571429,
    "language": "python3",
    "summary": "In semantic versioning a piece of software can be represented in a format like this example: 6.1.9.\n\nThe first number is the major version.\nThe second number is the minor version.\nThe third number is the patch (bug fixes).\n\nCreate three separate functions, one to retrieve each element in the semantic versioning specification.\n\nExamples\n6.1.9\nretrieve_major(\"6.",
    "tags": [
      "strings",
      "formatting"
    ],
    "title": "Semantic Versioning"
  },
  {
    "_id": "dSbdxuapwsRQQPuC6",
    "difficulty": 0.6429287863590772,
    "language": "python3",
    "summary": "Create a function that takes a number as its argument and returns a list of all its factors.\n\nExamples\nfactorize(12) ➞ [1, 2, 3, 4, 6, 12]\n\nfactorize(4) ➞ [1, 2, 4]\n\nfactorize(17) ➞ [1, 17]\n\nNotes\nThe input integer will be positive.\nA factor is a number that evenly divides into another number without leaving a remainder. The second example is a factor of 12, b",
    "tags": [
      "math",
      "numbers",
      "control_flow",
      "loops"
    ],
    "title": "Factorize a Number"
  },
  {
    "_id": "X9o2kweQFsSRXGh2c",
    "difficulty": 0.6434426229508197,
    "language": "python3",
    "summary": "Write a function that takes three string arguments (first, last, and word) and returns True if word is found between first and last in the list, otherwise False.\n\nExamples\nis_between(\"apple\", \"banana\", \"azure\") ➞ True\n\nis_between(\"monk\", \"monument\", \"monkey\") ➞ True\n\nis_between(\"bookend\", \"boolean\", \"boost\") ➞ False\n\nNotes\nAll letters will be in lowercase.\nAll",
    "tags": [
      "strings",
      "validation"
    ],
    "title": "Between Words"
  },
  {
    "_id": "YJWFLp5FD287hRGkz",
    "difficulty": 0.6434782608695652,
    "language": "python3",
    "summary": "Mubashir needs your help to find next integral perfect square after the one passed as a parameter.\n\nCreate a function which takes a given number n and returns next integral perfect square number. Return None if the given number is not a perfect square.\n\nExamples\nnext_square(121) ➞ 144\n\nnext_square(625) ➞ 676\n\nnext_square(114) ➞ None\n114 is not a perfect square",
    "tags": [
      "algebra",
      "math",
      "numbers",
      "interview"
    ],
    "title": "Next Perfect Square"
  },
  {
    "_id": "ancAxGEF9MsLWXDqe",
    "difficulty": 0.64375,
    "language": "python3",
    "summary": "Create a function which returns the type of triangle, given the side lengths. Return the following values if they match the criterea.\n\nNo sides equal: \"scalene\"\nTwo sides equal: \"isosceles\"\nAll sides equal: \"equilateral\"\nLess or more than 3 sides given: \"not a triangle\"\n\nExamples\ngettriangletype([2, 6, 5]) ➞ \"scalene\"\n\ngettriangletype([4, 4, 7]) ➞ \"isosceles\"",
    "tags": [
      "conditions",
      "math",
      "arrays",
      "geometry"
    ],
    "title": "What Type of Triangle?"
  },
  {
    "_id": "GXgsHZ9emoW5bhxhh",
    "difficulty": 0.6465968586387435,
    "language": "python3",
    "summary": "Create a function that returns only strings with unique characters.\n\nExamples\nfilter_unique([\"abb\", \"abc\", \"abcdb\", \"aea\", \"bbb\"]) ➞ [\"abc\"]\n\"b\" occurs in \"abb\" more than once, \"b\" occurs in \"abcdb\" more than once, etc.\n\nfilter_unique([\"88\", \"999\", \"989\", \"9988\", \"9898\"]) ➞ []\n\nfilter_unique([\"ABCDE\", \"DDEB\", \"BED\", \"CCA\", \"BAC\"]) ➞ [\"ABCDE\", \"BED\", \"BAC\"]\n\nNo",
    "tags": [
      "arrays",
      "strings",
      "higher_order_functions"
    ],
    "title": "Find Unique Character Strings"
  },
  {
    "_id": "TZ8J2ryBPd6i9ugqR",
    "difficulty": 0.6468506723283793,
    "language": "python3",
    "summary": "Write a function that returns True if two rooks can attack each other, and False otherwise.\n\nExamples\ncan_capture([\"A8\", \"E8\"]) ➞ True\n\ncan_capture([\"A1\", \"B2\"]) ➞ False\n\ncan_capture([\"H4\", \"H3\"]) ➞ True\n\ncan_capture([\"F5\", \"C8\"]) ➞ False\n\nNotes\nAssume no blocking pieces.\nTwo rooks can attack each other if they share the same row (letter) or column (number).",
    "tags": [
      "arrays",
      "games",
      "validation",
      "conditions"
    ],
    "title": "Capture the Rook"
  },
  {
    "_id": "ZsgNrF8jNde4YhmEw",
    "difficulty": 0.6472,
    "language": "python3",
    "summary": "Create a function to remove all None values from a list.\n\nExamples\nremove_none([\"a\", None, \"b\", None]) ➞ [\"a\", \"b\"]\n\nremove_none([None, None, None, None, None]) ➞ []\n\nremove_none([7, 8, None, 9]) ➞ [7, 8, 9]\n\nNotes\nN/A",
    "tags": [
      "language_fundamentals",
      "arrays",
      "formatting"
    ],
    "title": "Remove None from a List"
  },
  {
    "_id": "2kz9W4tqZyCNCAhik",
    "difficulty": 0.6474442988204456,
    "language": "python3",
    "summary": "Create a function to multiply all of the values in a list by the amount of values in the given list.\n\nExamples\nmultiplybylength([2, 3, 1, 0]) ➞ [8, 12, 4, 0]\n\nmultiplybylength([4, 1, 1]) ➞ ([12, 3, 3])\n\nmultiplybylength([1, 0, 3, 3, 7, 2, 1]) ➞  [7, 0, 21, 21, 49, 14, 7]\n\nmultiplybylength([0]) ➞ ([0])\n\nNotes\nAll of the values given are numbers.\nAll lists will",
    "tags": [
      "arrays",
      "algorithms",
      "math",
      "loops"
    ],
    "title": "Multiply by Length"
  },
  {
    "_id": "ckBxjio8rP2spfQFT",
    "difficulty": 0.6486042692939245,
    "language": "python3",
    "summary": "Something which is not true is false, but something which is not not true is true! Create a function where given n number of \"not\", evaluate whether it's True or False.\n\nExamples\nnotnotnot(1, True) ➞ False\nNot True.\n\nnotnotnot(2, False) ➞ False\nNot not False.\n\nnotnotnot(6, True) ➞ True\nNot not not not not not True.\n\nNotes\nEven though this challenge can be easi",
    "tags": [
      "logic",
      "validation"
    ],
    "title": "Not Not Not True"
  },
  {
    "_id": "bTtn7EGeQRErbuogs",
    "difficulty": 0.6486988847583643,
    "language": "python3",
    "summary": "Create a function that returns the number of decimal places a number has. Any zeros after the decimal point count towards the number of decimal places.\n\nExamples\ngetdecimalplaces(\"43.20\") ➞ 2\n\ngetdecimalplaces(\"400\") ➞ 0\n\ngetdecimalplaces(\"3.1\") ➞ 1\n\nNotes\nReturn 0 if the number doesn't have any decimal places (see example #2).",
    "tags": [
      "numbers",
      "strings",
      "regex"
    ],
    "title": "How Many Decimal Places?"
  },
  {
    "_id": "wfGpK8TAeiy8uRsvN",
    "difficulty": 0.648854961832061,
    "language": "python3",
    "summary": "Mubashir needs your help to count uppercase letters, lowercase letters, numbers and special characters in a given string.\n\nCreate a function which takes a string txt and returns a list of numbers with count of uppercase letters, lowercase letters, numbers and special characters.\n\nExamples\nfilter_string(\"$(#Mu12bas43hiR%@!\") ➞ [2, 6, 4, 8]\n2 uppercase letters\n6",
    "tags": [
      "strings",
      "regex",
      "interview",
      "language_fundamentals"
    ],
    "title": "Filter a String"
  },
  {
    "_id": "cqucnDiDA5J5vjGAJ",
    "difficulty": 0.6499442586399108,
    "language": "python3",
    "summary": "A value is omnipresent if it exists in every sublist inside the main list.\n\nTo illustrate:\n\n[[3, 4], [8, 3, 2], [3], [9, 3], [5, 3], [4, 3]]\n3 exists in every element inside this list, so is omnipresent.\n\nCreate a function that determines whether an input value is omnipresent for a given list.\n\nExamples\nis_omnipresent([[1, 1], [1, 3], [5, 1], [6, 1]], 1) ➞ Tru",
    "tags": [
      "arrays",
      "validation",
      "loops",
      "algorithms"
    ],
    "title": "Omnipresent Value"
  },
  {
    "_id": "C4vbzpksgsTbw87NC",
    "difficulty": 0.650319829424307,
    "language": "python3",
    "summary": "Create a function that keeps only strings with repeating identical characters (in other words, it has a set size of 1).\n\nExamples\nidentical_filter([\"aaaaaa\", \"bc\", \"d\", \"eeee\", \"xyz\"])\n➞ [\"aaaaaa\", \"d\", \"eeee\"]\n\nidentical_filter([\"88\", \"999\", \"22\", \"545\", \"133\"])\n➞ [\"88\", \"999\", \"22\"]\n\nidentical_filter([\"xxxxo\", \"oxo\", \"xox\", \"ooxxoo\", \"oxo\"])\n➞ []\n\nNotes\nA st",
    "tags": [
      "arrays",
      "strings",
      "loops",
      "language_fundamentals"
    ],
    "title": "Filter Repeating Character Strings"
  },
  {
    "_id": "KoEqRNp5q27xsy9KE",
    "difficulty": 0.6509129967776585,
    "language": "python3",
    "summary": "Create a function to extract the name of the subreddit from its URL.\n\nExamples\nsub_reddit(\"https://www.reddit.com/r/funny/\") ➞ \"funny\"\n\nsub_reddit(\"https://www.reddit.com/r/relationships/\") ➞ \"relationships\"\n\nsub_reddit(\"https://www.reddit.com/r/mildlyinteresting/\") ➞ \"mildlyinteresting\"\n\nNotes\nN/A",
    "tags": [
      "strings",
      "regex"
    ],
    "title": "Retrieve the Subreddit"
  },
  {
    "_id": "urmGYQsn4neGSKaat",
    "difficulty": 0.6509695290858726,
    "language": "python3",
    "summary": "Given two sets of two people's different interests, return whether both people have at least two things in common or have exact interests. Return True if there's a potential friend!\n\nExamples\nispotentialfriend(\n  {\"sports\", \"music\", \"chess\"},\n  {\"coding\", \"music\", \"netflix\", \"chess\"}\n) ➞ True\n\nispotentialfriend(\n  {\"cycling\", \"technology\", \"drawing\"},\n  {\"danc",
    "tags": [
      "language_fundamentals",
      "arrays",
      "validation"
    ],
    "title": "Potential Friend?"
  },
  {
    "_id": "3kBmP3bmA3i6u52Sw",
    "difficulty": 0.6510468594217348,
    "language": "python3",
    "summary": "List A is contained inside list B if each element in A also exists in B.\n\nThe number of times a number is present doesn't matter. In other words, if we transformed both lists into sets, A would be a subset of B.\n\nA = [3, 3, 9, 9, 9, 5]\nB = [1, 3, 9, 5, 8, 44, 44]\n\nA_Set = [3, 9, 5]\nB_Set = [1, 3, 9, 5, 8, 44]\n\nASet is a subset of BSet\n\nCreate a function that d",
    "tags": [
      "arrays",
      "logic",
      "validation"
    ],
    "title": "Check if One List is a Subset of Another"
  },
  {
    "_id": "smxnbDimHa2oXYocS",
    "difficulty": 0.6515323496027242,
    "language": "python3",
    "summary": "Create a function that takes two arguments (item, times). The first argument (item) is the item that needs repeating while the second argument (times) is the number of times the item is to be repeated. Return the result in a list.\n\nExamples\nrepeat(\"edabit\", 3) ➞ [\"edabit\", \"edabit\", \"edabit\"]\n\nrepeat(13, 5) ➞ [13, 13, 13, 13, 13]\n\nrepeat(\"7\", 2) ➞ [\"7\", \"7\"]\n\n",
    "tags": [
      "arrays",
      "loops"
    ],
    "title": "Repeat the Same Item Multiple Times"
  },
  {
    "_id": "ZB25oqbEQnjijbwse",
    "difficulty": 0.653250773993808,
    "language": "python3",
    "summary": "Write a function that returns True if there exists at least one number that is larger than or equal to n.\n\nExamples\nexists_higher([5, 3, 15, 22, 4], 10) ➞ True\n\nexists_higher([1, 2, 3, 4, 5], 8) ➞ False\n\nexists_higher([4, 3, 3, 3, 2, 2, 2], 4) ➞ True\n\nexists_higher([], 5) ➞ False\n\nNotes\nReturn False for an empty array []",
    "tags": [
      "higher_order_functions",
      "arrays",
      "validation"
    ],
    "title": "Exists a Number Higher?"
  },
  {
    "_id": "DHdbmfpvWprkB9ww5",
    "difficulty": 0.6534653465346535,
    "language": "python3",
    "summary": "Create a function that takes a year as an argument and returns the corresponding Chinese zodiac.\n\nExamples\nchinese_zodiac(2021) ➞ \"Ox\"\n\nchinese_zodiac(2020) ➞ \"Rat\"\n\nchinese_zodiac(1933) ➞ \"Rooster\"\n\nNotes\nThe list of animals used can vary slightly, so check the Resources tab for the list that you will need for this challenge.",
    "tags": [
      "conditions",
      "arrays",
      "language_fundamentals"
    ],
    "title": "Chinese Zodiac"
  },
  {
    "_id": "NYkju6Ztyea3wisxT",
    "difficulty": 0.6548837209302325,
    "language": "python3",
    "summary": "Create a function that returns the smaller number.\n\nExamples\nsmaller_num(\"21\", \"44\") ➞ \"21\"\n\nsmaller_num(\"1500\", \"1\") ➞ \"1\"\n\nsmaller_num(\"5\", \"5\") ➞ \"5\"\n\nNotes\nNumbers will be represented as strings, and your output should also be a string.\nIf both numbers tie, return either number.\nNumbers will be positive.\nBonus: See if you can do this without converting to",
    "tags": [
      "strings",
      "language_fundamentals"
    ],
    "title": "Smaller String Number"
  },
  {
    "_id": "YKgzPFZKt9XHXQHAu",
    "difficulty": 0.6558265582655827,
    "language": "python3",
    "summary": "Create a function which takes in a list of numbers and a number to find. Return the sum of every index in the list which matches the chosen number.\n\nExamples\nsumfoundindexes([0, 3, 3, 0, 0, 3], 3) ➞ 8\nThe number 3 was found at indexes 1, 2 and 5.\n8 = 1 + 2 + 5\n\nsumfoundindexes([1, 2, 3, 4, 5, 6], 3) ➞ 2\n\nsumfoundindexes([100, 100, 100, 100, 100], 100) ➞ 10\n\nsu",
    "tags": [
      "language_fundamentals",
      "arrays"
    ],
    "title": "Sum of Found Indexes"
  },
  {
    "_id": "Jv6KqxKp2F6p7YLhf",
    "difficulty": 0.6559633027522935,
    "language": "python3",
    "summary": "Zip codes consist of 5 consecutive digits. Given a string, write a function to determine whether the input is a valid zip code. A valid zip code is as follows:\n\nMust only contain numbers (no non-digits allowed).\nMust not contain any spaces.\nMust not be greater than 5 digits in length.\n\nExamples\nis_valid(\"59001\") ➞ True\n\nis_valid(\"853a7\") ➞ False\n\nis_valid(\"732",
    "tags": [
      "strings",
      "regex",
      "validation"
    ],
    "title": "Valid Zip Code"
  },
  {
    "_id": "mZyHqasaNyFp23RcS",
    "difficulty": 0.6560669456066945,
    "language": "python3",
    "summary": "Create a function that repeats each character in a string n times.\n\nExamples\nrepeat(\"mice\", 5) ➞ \"mmmmmiiiiiccccceeeee\"\n\nrepeat(\"hello\", 3) ➞ \"hhheeellllllooo\"\n\nrepeat(\"stop\", 1) ➞ \"stop\"\n\nNotes\nN/A",
    "tags": [
      "strings",
      "loops",
      "language_fundamentals"
    ],
    "title": "Repeating Letters N Times"
  },
  {
    "_id": "vb2WYqeRa9LvoxN8u",
    "difficulty": 0.6562060889929743,
    "language": "python3",
    "summary": "Given a number n, write a function that returns PI to n decimal places.\n\nExamples\nmy_pi(5) ➞ 3.14159\n\nmy_pi(4) ➞ 3.1416\n\nmy_pi(15) ➞ 3.141592653589793\n\nNotes\nn will not be above 15, to keep this challenge simple.\nRound up the last digit if the next digit in PI is greater or equal to 5 (see second example above).\nThe return value must be a number, not a string.",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "Pi to N Decimal Places"
  },
  {
    "_id": "Hm2m6Gg4piQ2Xe9Sa",
    "difficulty": 0.6565481352992194,
    "language": "python3",
    "summary": "Create a function that goes through the array, incrementing (+1) for each odd number and decrementing (-1) for each even number.\n\nExamples\ntransform([1, 2, 3, 4, 5]) ➞ [2, 1, 4, 3, 6]\n\ntransform([3, 3, 4, 3]) ➞ [4, 4, 3, 4]\n\ntransform([2, 2, 0, 8, 10]) ➞ [1, 1, -1, 7, 9]\n\nNotes\nN/A",
    "tags": [
      "arrays",
      "control_flow",
      "numbers",
      "language_fundamentals",
      "loops"
    ],
    "title": "Odd Up, Even Down"
  },
  {
    "_id": "Hxwhyjf3s4E3M8ZiG",
    "difficulty": 0.6576151121605667,
    "language": "python3",
    "summary": "Write a function  that takes all even-indexed characters and odd-indexed characters from a string and concatenates them together.\n\nTo illustrate:\nindex_shuffle(\"abcd\") ➞ \"acbd\"\n// \"ac\" (even-indexed) + \"bd\" (odd-indexed)\n\nExamples\nindex_shuffle(\"abcdefg\") ➞ \"acegbdf\"\n\nindex_shuffle(\"holiday\") ➞ \"hldyoia\"\n\nindex_shuffle(\"maybe\") ➞ \"myeab\"\n\nNotes\n0 should be tre",
    "tags": [
      "strings",
      "loops"
    ],
    "title": "Index Shuffle"
  },
  {
    "_id": "iLH5TYHpLZwR5MSmF",
    "difficulty": 0.6590909090909091,
    "language": "python3",
    "summary": "Given a list of cities and populations, return a list where all populations are rounded to the nearest million.\n\nExamples\nmillions_rounding([\n  [\"Nice\", 942208],\n  [\"Abu Dhabi\", 1482816],\n  [\"Naples\", 2186853],\n  [\"Vatican City\", 572]\n])\n\n[\n  [\"Nice\", 1000000],\n  [\"Abu Dhabi\", 1000000],\n  [\"Naples\", 2000000],\n  [\"Vatican City\", 0]\n]\n\nNotes\nRound down to 0 if a",
    "tags": [
      "language_fundamentals",
      "loops",
      "numbers",
      "objects"
    ],
    "title": "Rounding in Millions"
  },
  {
    "_id": "y8pj5GjGNarmYQ48d",
    "difficulty": 0.6608695652173913,
    "language": "python3",
    "summary": "Mubashir has a cat and a dog. He purchased both of them at the same time Human Years ago.\n\nCreate a function which takes an argument of human_years and returns [humanYears, catYears, dogYears] list.\n\nHuman Years\nHuman Years >= 1\nHuman Years are whole numbers only.\n\nCat Years\n15 cat years for first year.\n+9 cat years for second year.\n+4 cat years for each year",
    "tags": [
      "numbers",
      "math",
      "logic",
      "interview"
    ],
    "title": "Human, Cat and Dog Years 🧑🏻🐱🐶"
  },
  {
    "_id": "HoD8gWGKGtSADYYt6",
    "difficulty": 0.661037394451146,
    "language": "python3",
    "summary": "Create a function that returns the product of all odd integers in a list.\n\nExamples\nodd_product([3, 4, 1, 1, 5]) ➞ 15\n\nodd_product([5, 5, 8, 2, 4, 32]) ➞ 25\n\nodd_product([1, 2, 1, 2, 1, 2, 1, 2]) ➞ 1\n\nNotes\nN/A",
    "tags": [
      "arrays",
      "numbers"
    ],
    "title": "Product of All Odd Integers"
  },
  {
    "_id": "uFBNaJwtKXBH64oMG",
    "difficulty": 0.6612149532710281,
    "language": "python3",
    "summary": "Create two functions: isprefix(word, prefix-) and issuffix(word, -suffix).\n\nis_prefix should return True if it begins with the prefix argument.\nis_suffix should return True if it ends with the suffix argument.\n\nOtherwise return False.\n\nExamples\nis_prefix(\"automation\", \"auto-\") ➞ True\n\nis_suffix(\"arachnophobia\", \"-phobia\") ➞ True\n\nis_prefix(\"retrospect\", \"sub-\"",
    "tags": [
      "strings",
      "regex",
      "validation"
    ],
    "title": "Prefixes vs. Suffixes"
  },
  {
    "_id": "phMpXM9nu52bCjguS",
    "difficulty": 0.661641541038526,
    "language": "python3",
    "summary": "Given a total due and a list representing the amount of change in your pocket, determine whether or not you are able to pay for the item. Change will always be represented in the following order: quarters, dimes, nickels, pennies.\n\nTo illustrate: change_enough([25, 20, 5, 0], 4.25) should yield True, since having 25 quarters, 20 dimes, 5 nickels and 0 pennies",
    "tags": [
      "arrays",
      "math",
      "numbers"
    ],
    "title": "Convenience Store"
  },
  {
    "_id": "mwNDWczpQ5bm7vLKk",
    "difficulty": 0.6619217081850534,
    "language": "python3",
    "summary": "Return True if the sum of ASCII values of the first string is same as the sum of ASCII values of the second string, otherwise return False.\n\nExamples\nsame_ascii(\"a\", \"a\") ➞ True\n\nsame_ascii(\"AA\", \"B@\") ➞ True\n\nsame_ascii(\"EdAbIt\", \"EDABIT\") ➞ False\n\nNotes\nIf you need some help with ASCII codes, check the Resources tab for an image of all ASCII codes used in th",
    "tags": [
      "strings",
      "validation"
    ],
    "title": "Same ASCII?"
  },
  {
    "_id": "v3SgFw85GXis3hrXo",
    "difficulty": 0.6621951219512195,
    "language": "python3",
    "summary": "Write a function that returns True if the product of a list is divisible by the sum of that same list. Otherwise, return False.\n\nExamples\ndivisible([3, 2, 4, 2]) ➞ False\n\ndivisible([4, 2, 6]) ➞ True\n4 * 2 * 6 / 4 + 2 + 6\n\ndivisible([3, 5, 1]) ➞ False\n\nNotes\nN/A",
    "tags": [
      "numbers",
      "arrays",
      "validation",
      "math"
    ],
    "title": "Product Divisible by Sum?"
  },
  {
    "_id": "NgSdtW84XFAnSwAie",
    "difficulty": 0.6631799163179917,
    "language": "python3",
    "summary": "Write a function that takes a two-digit number and determines if it's the largest of two possible digit swaps.\n\nTo illustrate:\nlargest_swap(27) ➞ False\n\nlargest_swap(43) ➞ True\n\nIf 27 is our input, we should return False because swapping the digits gives us 72, and 72 > 27. On the other hand, swapping 43 gives us 34, and 43 > 34.\n\nExamples\nlargest_swap(14) ➞ F",
    "tags": [
      "numbers",
      "logic",
      "validation"
    ],
    "title": "Largest Swap"
  },
  {
    "_id": "E38dB8mn7Fi5o2Nme",
    "difficulty": 0.6639784946236559,
    "language": "python3",
    "summary": "Write a function that partitions the list into two sublists: one with all even integers, and the other with all odd integers. Return your result in the following format:\n\n[[evens], [odds]]\n\nExamples\nevenoddpartition([5, 8, 9, 2, 0]) ➞ [[8, 2, 0], [5, 9]]\n\nevenoddpartition([1, 0, 1, 0, 1, 0]) ➞ [[0, 0, 0], [1, 1, 1]]\n\nevenoddpartition([1, 3, 5, 7, 9]) ➞ [[], [1",
    "tags": [
      "arrays",
      "higher_order_functions"
    ],
    "title": "Even Odd Partition"
  },
  {
    "_id": "kB9HnJbeWS8NXYeWT",
    "difficulty": 0.6647398843930635,
    "language": "python3",
    "summary": "Create a function that takes in a two-dimensional list and returns the number of sub-lists with identical elements.\n\nExamples\ncount_identical([\n  [1],\n  [2],\n  [3],\n  [4]\n]) ➞ 4\n\nSingle-item lists still count as having identical elements.\n\ncount_identical([\n  [1, 2],\n  [2, 3],\n  [3, 4],\n  [4, 4]\n]) ➞ 1\n\ncount_identical([\n  [33, 33],\n  [5],\n  [\"a\", \"a\"],\n  [2,",
    "tags": [
      "arrays",
      "loops",
      "conditions"
    ],
    "title": "Identical Sublists"
  },
  {
    "_id": "mgx8mhNbxpeceLhwn",
    "difficulty": 0.6670574443141852,
    "language": "python3",
    "summary": "Write a function that returns True if a number is a palindrome.\n\nExamples\nis_palindrome(838) ➞ True\n\nis_palindrome(4433) ➞ False\n\nis_palindrome(443344) ➞ True\n\nNotes\nA palindrome is a number that remains the same when reversed.\nBonus: Try solving this without turning the number into a string.",
    "tags": [
      "numbers",
      "validation"
    ],
    "title": "Check if a Number is a Palindrome"
  },
  {
    "_id": "jB3EBCxPmHXYakNJu",
    "difficulty": 0.6683168316831684,
    "language": "python3",
    "summary": "Create a function that filters out a list of state names into two categories based on the second parameter.\n\nAbbreviations abb\nFull names full\n\nExamples\nfilterstatenames([\"Arizona\", \"CA\", \"NY\", \"Nevada\"], \"abb\")\n➞ [\"CA\", \"NY\"]\n\nfilterstatenames([\"Arizona\", \"CA\", \"NY\", \"Nevada\"], \"full\")\n➞ [\"Arizona\", \"Nevada\"]\n\nfilterstatenames([\"MT\", \"NJ\", \"TX\", \"ID\", \"IL\"],",
    "tags": [
      "arrays",
      "formatting",
      "loops"
    ],
    "title": "State Names and Abbreviations"
  },
  {
    "_id": "qm5KNKG8PLE7etcJg",
    "difficulty": 0.6695842450765864,
    "language": "python3",
    "summary": "Create a function that takes a list as an argument and returns True or False depending on whether the average of all elements in the list is a whole number or not.\n\nExamples\nisavgwhole([1, 3]) ➞ True\n\nisavgwhole([1, 2, 3, 4]) ➞ False\n\nisavgwhole([1, 5, 6]) ➞ True\n\nisavgwhole([1, 1, 1]) ➞ True\n\nisavgwhole([9, 2, 2, 5]) ➞ False\n\nNotes\nN/A",
    "tags": [
      "math",
      "arrays",
      "validation",
      "loops"
    ],
    "title": "Is the Average of All Elements a Whole Number?"
  },
  {
    "_id": "gQm9cM39c7RFHNRkv",
    "difficulty": 0.671147880041365,
    "language": "python3",
    "summary": "Create a function that takes a number (from 1 to 12) and returns its corresponding month name as a string. For example, if you're given 3 as input, your function should return \"March\", because March is the 3rd month.\n\nNumber | Month Name\n--- | ---\n1 | January\n2 | February\n3 | March\n4 | April\n5 | May\n6 | June\n7 | July\n8 | August\n9 | September\n10 | October\n11 |",
    "tags": [
      "arrays",
      "dates",
      "conditions",
      "formatting"
    ],
    "title": "Convert Number to Corresponding Month Name"
  },
  {
    "_id": "ojTbScdCu9DQ6MCEa",
    "difficulty": 0.6728754365541327,
    "language": "python3",
    "summary": "Create a function that returns the total number of steps it takes to transform each element to the maximal element in the list. Each step consists of incrementing a digit by one.\n\nExamples\nincrementtotop([3, 4, 5]) ➞ 3\nMaximal element in the array is 5.\nTo transform 3 to 5 requires 2 steps: 3 -> 4, 4 -> 5.\nTo transform 4 to 5 requires 1 step: 4 -> 5.\nTotal ste",
    "tags": [
      "arrays",
      "logic",
      "loops"
    ],
    "title": "Increment to Top"
  },
  {
    "_id": "5eHy5yapqz8kP94ih",
    "difficulty": 0.6730926989335521,
    "language": "python3",
    "summary": "Take a list of integers (positive or negative or both) and return the sum of the absolute value of each element.\n\nExamples\ngetabssum([2, -1, 4, 8, 10]) ➞ 25\n\ngetabssum([-3, -4, -10, -2, -3]) ➞ 22\n\ngetabssum([2, 4, 6, 8, 10]) ➞ 30\n\ngetabssum([-1]) ➞ 1\n\nNotes\nThe term \"absolute value\" means to remove any negative sign in front of a number, and to think of all nu",
    "tags": [
      "arrays",
      "math",
      "numbers",
      "loops"
    ],
    "title": "Absolute Sum"
  },
  {
    "_id": "GZMFr9cbntWRCdose",
    "difficulty": 0.6737064413938754,
    "language": "python3",
    "summary": "Create a function that takes an initial word and extracts any words that start with the same letters as the initial word.\n\nExamples\ndictionary(\"bu\", [\"button\", \"breakfast\", \"border\"]) ➞ [\"button\"]\n\ndictionary(\"tri\", [\"triplet\", \"tries\", \"trip\", \"piano\", \"tree\"]) ➞ [\"triplet\", \"tries\", trip\"]\n\ndictionary(\"beau\", [\"pastry\", \"delicious\", \"name\", \"boring\"]) ➞ []",
    "tags": [
      "strings",
      "conditions"
    ],
    "title": "Little Dictionary"
  },
  {
    "_id": "tWNFvb8u7RDnuwSjq",
    "difficulty": 0.6739834472831954,
    "language": "python3",
    "summary": "Create a function that takes a list of numbers and returns only the even values.\n\nExamples\nno_odds([1, 2, 3, 4, 5, 6, 7, 8]) ➞ [2, 4, 6, 8]\n\nno_odds([43, 65, 23, 89, 53, 9, 6]) ➞ [6]\n\nno_odds([718, 991, 449, 644, 380, 440]) ➞ [718, 644, 380, 440]\n\nNotes\nReturn all even numbers in the order they were given.\nAll test cases contain valid numbers ranging from 1 to",
    "tags": [
      "arrays",
      "math",
      "validation",
      "numbers"
    ],
    "title": "Eliminate Odd Numbers within a List"
  },
  {
    "_id": "WppCaiLw6QbvXhe6m",
    "difficulty": 0.6743607954545454,
    "language": "python3",
    "summary": "Create a function that takes a list of strings and returns the words that are exactly four letters.\n\nExamples\nisfourletters([\"Tomato\", \"Potato\", \"Pair\"]) ➞ [\"Pair\"]\n\nisfourletters([\"Kangaroo\", \"Bear\", \"Fox\"]) ➞ [\"Bear\"]\n\nisfourletters([\"Ryan\", \"Kieran\", \"Jason\", \"Matt\"]) ➞ [\"Ryan\", \"Matt\"]\n\nNotes\nYou can expect valid strings for all test cases.",
    "tags": [
      "strings",
      "arrays",
      "validation",
      "conditions"
    ],
    "title": "Return the Four Letter Strings"
  },
  {
    "_id": "ffAjNJepykEBF3ueo",
    "difficulty": 0.6752136752136753,
    "language": "python3",
    "summary": "Create a function to count the number of 1s in a 2D list.\n\nExamples\ncount_ones([\n  [1, 0],\n  [0, 0]\n]) ➞ 1\n\ncount_ones([\n  [1, 1, 1],\n  [0, 0, 1],\n  [1, 1, 1]\n]) ➞ 7\n\ncount_ones([\n  [1, 2, 3],\n  [0, 2, 1],\n  [5, 7, 33]\n]) ➞ 2\n\nNotes\nN/A",
    "tags": [
      "arrays",
      "loops"
    ],
    "title": "Count Ones in a 2D Array"
  },
  {
    "_id": "nL7Cc7MGLZWDJDmDW",
    "difficulty": 0.6760687527545174,
    "language": "python3",
    "summary": "Create a function that takes two strings and returns True if the first string ends with the second string; otherwise return False.\n\nExamples\ncheck_ending(\"abc\", \"bc\") ➞ True\n\ncheck_ending(\"abc\", \"d\") ➞ False\n\ncheck_ending(\"samurai\", \"zi\") ➞ False\n\ncheck_ending(\"feminine\", \"nine\") ➞ True\n\ncheck_ending(\"convention\", \"tio\") ➞ False\n\nNotes\nAll test cases are valid",
    "tags": [
      "validation",
      "strings"
    ],
    "title": "Check if String Ending Matches Second String"
  },
  {
    "_id": "u3R5FqsRv5qyKF6qq",
    "difficulty": 0.6766132040283477,
    "language": "python3",
    "summary": "Create a function that takes an array of numbers and returns the mean (average) of all those numbers.\n\nExamples\nmean([1, 0, 4, 5, 2, 4, 1, 2, 3, 3, 3]) ➞ 2.55\n\nmean([2, 3, 2, 3]) ➞ 2.50\n\nmean([3, 3, 3, 3, 3]) ➞ 3.00\n\nNotes\nRound to two decimal places.\nYou can expect a number ranging from 0 to 10,000.",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "Calculate the Mean"
  },
  {
    "_id": "CGsWyXpZ3EHrdpQmA",
    "difficulty": 0.6790720154664089,
    "language": "python3",
    "summary": "Create a function that takes a list of names and returns a list with only the first letter capitalized.\n\nExamples\ncap_me([\"mavis\", \"senaida\", \"letty\"]) ➞ [\"Mavis\", \"Senaida\", \"Letty\"]\n\ncap_me([\"samuel\", \"MABELLE\", \"letitia\", \"meridith\"]) ➞ [\"Samuel\", \"Mabelle\", \"Letitia\", \"Meridith\"]\n\ncap_me([\"Slyvia\", \"Kristal\", \"Sharilyn\", \"Calista\"]) ➞ [\"Slyvia\", \"Kristal\",",
    "tags": [
      "loops",
      "arrays",
      "formatting"
    ],
    "title": "Capitalize the Names"
  },
  {
    "_id": "KJao8LSNmRF5Qhan4",
    "difficulty": 0.6794532627865961,
    "language": "python3",
    "summary": "Create a function that takes a list of lists with integers or floats. Return a new (single) list with the largest numbers from each.\n\nExamples\nfindLargestNums([[4, 2, 7, 1], [20, 70, 40, 90], [1, 2, 0]]) ➞ [7, 90, 2]\n\nfindLargestNums([[-34, -54, -74], [-32, -2, -65], [-54, 7, -43]]) ➞ [-34, -2, 7]\n\nfindLargestNums([[0.4321, 0.7634, 0.652], [1.324, 9.32, 2.5423",
    "tags": [
      "arrays",
      "sorting",
      "loops",
      "numbers"
    ],
    "title": "Find the Largest Numbers in a Group of Lists"
  },
  {
    "_id": "D69v5RSgzFPqsyfwf",
    "difficulty": 0.6810035842293907,
    "language": "python3",
    "summary": "Create a function which takes in a word and spells it out, by consecutively adding letters until the full word is completed.\n\nExamples\nspelling(\"bee\") ➞ [\"b\", \"be\", \"bee\"]\n\nspelling(\"happy\") ➞ [\"h\", \"ha\", \"hap\", \"happ\", \"happy\"]\n\nspelling(\"eagerly\") ➞ [\"e\", \"ea\", \"eag\", \"eage\", \"eager\", \"eagerl\", \"eagerly\"]\n\nNotes\nN/A",
    "tags": [
      "strings",
      "arrays"
    ],
    "title": "Spelling it Out"
  },
  {
    "_id": "5feMy3LidqWTZ2k76",
    "difficulty": 0.6832386363636364,
    "language": "python3",
    "summary": "Two sisters are eating chocolate, whose pieces are represented as subarrays of [l x w].\n\nWrite a function that returns True if the total area of chocolate is the same for each sister.\n\nTo illustrate:\ntest_fairness([[4, 3], [2, 4], [1, 2]],\n[[6, 2], [4, 2], [1, 1], [1, 1]])\n➞ True\n\n// Agatha's pieces: [4, 3], [2, 4], [1, 2]\n// Bertha's pieces: [6, 2], [4, 2], [",
    "tags": [
      "arrays",
      "conditions"
    ],
    "title": "Chocolate Dilemma"
  },
  {
    "_id": "vFw6kgYqJxgdHqAPk",
    "difficulty": 0.6842105263157895,
    "language": "python3",
    "summary": "Create a function that returns the index of the first vowel in a string.\n\nExamples\nfirst_vowel(\"apple\") ➞ 0\n\nfirst_vowel(\"hello\") ➞ 1\n\nfirst_vowel(\"STRAWBERRY\") ➞ 3\n\nfirst_vowel(\"pInEaPPLe\") ➞ 1\n\nNotes\nInput will be single words.\nCharacters in words will be upper or lower case.\n\"y\" is not considered a vowel.\nInput always contains a vowel.",
    "tags": [
      "strings",
      "language_fundamentals",
      "loops",
      "regex"
    ],
    "title": "Return the Index of the First Vowel"
  },
  {
    "_id": "cRgZr9MRfwYWhkET6",
    "difficulty": 0.6873545384018619,
    "language": "python3",
    "summary": "Write a function that finds the sum of a list. Make your function recursive.\n\nExamples\nsum_recursively([1, 2, 3, 4]) ➞ 10\n\nsum_recursively([1, 2]) ➞ 3\n\nsum_recursively([1]) ➞ 1\n\nsum_recursively([]) ➞ 0\n\nNotes\nReturn 0 for an empty list.\nCheck the Resources tab for info on recursion.",
    "tags": [
      "recursion",
      "numbers",
      "arrays",
      "language_fundamentals"
    ],
    "title": "Recursion: Array Sum"
  },
  {
    "_id": "HhmkKonCLTyAhAcwK",
    "difficulty": 0.6880733944954128,
    "language": "python3",
    "summary": "Given two strings, repeatedly cycle through all of the letters in the first string until it is the same length as the second string.\n\nExamples\nstring_cycling(\"abc\", \"hello\") ➞ \"abcab\"\n\nstring_cycling(\"programming\", \"edabit\") ➞ \"progra\"\n\nstring_cycling(\"ha\", \"good morning\") ➞ \"hahahahahaha\"\n\nNotes\nAll tests will include valid strings.",
    "tags": [
      "loops",
      "strings"
    ],
    "title": "Cycling Through Strings"
  },
  {
    "_id": "2wJrWniq8yz79Yvgv",
    "difficulty": 0.6890756302521008,
    "language": "python3",
    "summary": "A Narcissistic Number is a number that is the sum of its own digits each raised to the power of the number of digits.\n\nFor example, take 153 (3 digits), which is narcisstic:\n\n1^3 + 5^3 + 3^3 = 1 + 125 + 27 = 153\n\n1652  (4 digits), is non-narcisstic:\n\n1^4 + 6^4 + 5^4 + 2^4 = 1 + 1296 + 625 + 16 = 1938\n\nCreate a function which returns True or False depending upo",
    "tags": [
      "language_fundamentals",
      "math",
      "numbers",
      "logic",
      "validation"
    ],
    "title": "Narcissistic Number"
  },
  {
    "_id": "52ZJEy5fc6zmeGYcM",
    "difficulty": 0.6909090909090909,
    "language": "python3",
    "summary": "Given a list of either entirely odd integers or entirely even integers except for a single Outlier Number. Create a function to return this number.\n\nExamples\noutlier_number([2, 3, 4]) ➞ 3\n2 and 4 are even numbers.\n3 is an outlier number.\n\noutlier_number([1, 2, 3]) ➞ 2\n\noutlier_number([4, 1, 3, 5, 9]) ➞ 4\n\nNotes\nList size will always be >=3.",
    "tags": [
      "arrays",
      "numbers",
      "math"
    ],
    "title": "Outlier Number"
  },
  {
    "_id": "brEiwFtbN2k59Ndrn",
    "difficulty": 0.6909581646423751,
    "language": "python3",
    "summary": "You are in charge of the barbecue grill. A vegetarian skewer is a skewer that has only vegetables (-o). A non-vegetarian skewer is a skewer with at least one piece of meat (-x).\n\nFor example, the grill below has 4 non-vegetarian skewers and 1 vegetarian skewer (the one in the middle).\n\n[\"--xo--x--ox--\",\n\"--xx--x--xx--\",\n\"--oo--o--oo--\",      <<< vegetarian ske",
    "tags": [
      "strings",
      "formatting"
    ],
    "title": "Barbecue Skewers"
  },
  {
    "_id": "H4m227Nz2fXoxYHNg",
    "difficulty": 0.6929824561403509,
    "language": "python3",
    "summary": "Create a function that takes a list lst and returns the types of values (data types) in a new list.\n\nExamples\nlistvaluestypes([1, 10]) ➞ [\"int\", \"int\"])\n\nlistvaluestypes([[\"hello\" , 1] , 10]) ➞ [\"list\", \"int\"])\n\nlistvaluestypes([\"shashwat\", 10, 90]) ➞ [\"str\", \"int\", \"int\"])\n\nNotes\nCheck the Resources tab for help if needed.",
    "tags": [
      "higher_order_functions",
      "sorting",
      "arrays",
      "algorithms",
      "loops"
    ],
    "title": "Return Types"
  },
  {
    "_id": "MpaWRHpnu7uK7nYgB",
    "difficulty": 0.6947368421052632,
    "language": "python3",
    "summary": "Mubashir was reading about Doubleton Numbers on Wikipedia.\n\nA natural number is a \"Doubleton Number\", if it contains exactly two distinct digits. For example, 23, 35, 100, 12121 are doubleton numbers, and 123 and 114455 are not.\n\nCreate a function which takes a number n and finds the next doubleton number.\n\nExamples\ndoubleton(10) ➞ 12\n12 has only two distinct",
    "tags": [
      "numbers",
      "validation",
      "strings",
      "interview"
    ],
    "title": "Doubleton Number"
  },
  {
    "_id": "uBPCq2HEd8K5EGnyF",
    "difficulty": 0.6981519507186859,
    "language": "python3",
    "summary": "Create a function that takes a number as an argument. Add up all the numbers from 1 to the number you passed to the function. For example, if the input is 4 then your function should return 10 because 1 + 2 + 3 + 4 = 10.\n\nExamples\nadd_up(4) ➞ 10\n\nadd_up(13) ➞ 91\n\nadd_up(600) ➞ 180300\n\nNotes\nExpect any positive number between 1 and 1000.",
    "tags": [
      "algorithms",
      "math",
      "recursion",
      "numbers"
    ],
    "title": "Add up the Numbers from a Single Number"
  },
  {
    "_id": "5pBHzWb8Psot9EQNk",
    "difficulty": 0.7102803738317757,
    "language": "python3",
    "summary": "Create a function that takes a string str and performs simple encoding as per the following method:\n\nReplace all single occurrence characters with [\nReplace all characters with two or more occurrences with ]\n\nReturn the final string after modification.\n\nExamples\nsimple_encoder(\"Mubashir\") ➞ \"[[[[[[[[\"\n'[' for each character\n\nsimple_encoder(\"Matt\") ➞ \"[[]]\"\n']'",
    "tags": [
      "cryptography",
      "arrays",
      "strings",
      "language_fundamentals"
    ],
    "title": "Simple Encoder"
  },
  {
    "_id": "FPpoW245mW2reusF6",
    "difficulty": 0.72,
    "language": "python3",
    "summary": "Given a list of integers lst, return the sum of all the integers that have an even index, multiplied by the integer at the last index.\n\nIf the sequence is empty, you should return 0.\n\nExamples\neven_last([2, 3, 4, 5]) ➞ 30\nnumbers at even index = 2, 4\nnumber at last index = 5\n25 + 45 = 10 + 20 = 30\n\neven_last([1, 3, 3, 1, 10]) ➞ 140\n\neven_last([]) ➞ 0\n\nNotes\nN/",
    "tags": [
      "arrays",
      "math",
      "logic",
      "numbers"
    ],
    "title": "Even and Last"
  },
  {
    "_id": "2bEWYcqKxTe84x3AB",
    "difficulty": 0.7215189873417721,
    "language": "python3",
    "summary": "Create a function which returns the word in the string, but with all the fog letters removed. However, if the string is clear from fog, return \"It's a clear day!\".\n\nExamples\nclear_fog(\"sky\") ➞ \"It's a clear day!\"\n\nclear_fog(\"fogfogFFfoooofftogffreogffesGgfOogfog\") ➞ \"trees\"\n\nclear_fog(\"fogFogFogffoObirdsanffodthebffoeffoesGGGfOgFog\") ➞ \"birdsandthebees\"\n\nNotes",
    "tags": [
      "formatting",
      "strings",
      "regex"
    ],
    "title": "Clear the Fog"
  },
  {
    "_id": "yRxAeYFMgykFjjmCz",
    "difficulty": 0.7222222222222222,
    "language": "python3",
    "summary": "Create a function that takes a string of name and checks how much good is the given name. A preloaded dictionary of alphabet scores is available in the Code tab. Add up the letters of your name to get the total score.\n\nscores = {\"A\": 100, \"B\": 14, \"C\": 9, \"D\": 28, \"E\": 145, \"F\": 12, \"G\": 3,\n          \"H\": 10, \"I\": 200, \"J\": 100, \"K\": 114, \"L\": 100, \"M\": 25,",
    "tags": [
      "strings",
      "validation",
      "interview",
      "language_fundamentals",
      "objects"
    ],
    "title": "How Good is Your Name?"
  },
  {
    "_id": "P76RqHjfSPpiG2Ce2",
    "difficulty": 0.7226890756302521,
    "language": "python3",
    "summary": "Given a list with an even amount of numbers, return True if the sum of two numbers in the list is even and False if the sum of two numbers in the list is odd.\n\nTo illustrate:\n\n11, 15, 6, 8, 9, 10\n\n11 + 15 = 26 = True\n15 + 6 = 21 = False\n6 + 8 = 14 = True\n\nExamples\noddsumlist([11, 15, 6, 8, 9, 10]) ➞ [True, False, True, False, False]\n\noddsumlist([12, 21, 5, 9,",
    "tags": [
      "data_structures",
      "math",
      "arrays"
    ],
    "title": "Sum of Even Pairs in List"
  },
  {
    "_id": "zT9GM9opQXK4qPuC4",
    "difficulty": 0.7358490566037735,
    "language": "python3",
    "summary": "Given a 2D-list of letters lst and a list of indexes idx, find the letters on given indexes and return as a string.\n\nlst = [\n  [\"m\", \"u\", \"b\"],\n  [\"a\", \"s\", \"h\"],\n  [\"i\", \"r\", \"1\"]\n]\n\nidx = [1, 3, 5, 8]\n\nYou have to find the characters in these indexes of the given list if you think of the indexes as:\n\n[\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n]\nlist_index(lst,",
    "tags": [
      "arrays",
      "loops",
      "functional_programming",
      "language_fundamentals"
    ],
    "title": "List Index"
  },
  {
    "_id": "2iETeoJq2dyEmH87R",
    "difficulty": 0.7603305785123967,
    "language": "python3",
    "summary": "Mubashir needs your help to count a specific digit in a list.\n\nYou have to create a function that takes two integers n and d and makes a list of squares of all numbers from 0...<= n and returns the count of the digits d in the list.\n\nExamples\ncount_digits(10, 1) ➞ 4\nSquared list from 0 to 10 = [0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nDigit 1 appeared 4 times",
    "tags": [
      "logic",
      "math",
      "numbers",
      "loops"
    ],
    "title": "Simple Counting"
  },
  {
    "_id": "3xcAQ3CfLAcbEtXys",
    "difficulty": 0.7721943048576214,
    "language": "python3",
    "summary": "The left shift operation is similar to multiplication by powers of two.\n\nSample calculation using the left shift operator ( << ):\n10 << 3 = 10 * 2^3 = 10 * 8 = 80\n-32 << 2 = -32 * 2^2 = -32 * 4 = -128\n5 << 2 = 5 * 2^2 = 5 * 4 = 20\n\nWrite a function that mimics (without the use of <<) the left shift operator and returns the result from the two given integers.",
    "tags": [
      "bit_operations",
      "numbers",
      "math"
    ],
    "title": "Left Shift by Powers of Two"
  },
  {
    "_id": "RYykpckz6nw5zBoLG",
    "difficulty": 0.7788461538461539,
    "language": "python3",
    "summary": "Write the regular expression that matches all alphabetic characters in a string. Use the character class \\w in your expression.\n\nExample\ntxt = \"^&$Regular#$%Expressions$%$$%^\"\npattern = \"yourregularexpressionhere\"\n\n\" \".join(re.findall(pattern, txt)) ➞ \"Regular Expressions\"\n\nNotes\nYou don't need to write a function, just the pattern.\nDo not remove import re fro",
    "tags": [
      "regex",
      "strings"
    ],
    "title": "RegEx X-A: Word Character Class"
  },
  {
    "_id": "mtfCmMo9fL5yqB3Sy",
    "difficulty": 0.7931034482758621,
    "language": "python3",
    "summary": "Mubashir created a simple timer but he needs your help to make it readable inside a microcontroller.\n\nCreate a function that takes the number of seconds and returns the timer in \"00:00:00\" format.\n\nExamples\nsimple_timer(0) ➞ \"00:00:00\"\n\nsimple_timer(59) ➞ \"00:00:59\"\n\nsimple_timer(60) ➞ \"00:01:00\"\n\nsimple_timer(3599) ➞ \"00:59:59\"\n\nNotes\nN/A",
    "tags": [
      "strings",
      "numbers",
      "logic",
      "math"
    ],
    "title": "A Simple Timer"
  },
  {
    "_id": "swRynR33w7ycQemyc",
    "difficulty": 0.8157894736842105,
    "language": "python3",
    "summary": "Given a number, return the total sum of that number multiplied by every number between 1 and 10. Do not use the sum() built-in function.\n\nExamples\nmulti_sum(1) ➞ 55\n1 x 1 + 1 x 2 + 1 x 3 ...... 1 x 9 + 1 x 10 = 55\n\nmulti_sum(6) ➞ 330\n6 x 1 + 6 x 2 + 6 x 3 ...... 6 x 9 + 6 x 10 = 330\n\nmulti_sum(10) ➞ 550\n\nmulti_sum(8) ➞ 440\n\nmulti_sum(2) ➞ 110\n\nNotes\nUse recurs",
    "tags": [
      "math",
      "numbers",
      "recursion"
    ],
    "title": "Recursion: Sum of Multiplication"
  },
  {
    "_id": "67nLEyXHRZMpBjnbZ",
    "difficulty": 0.8214285714285714,
    "language": "python3",
    "summary": "No description.\nGuess the code from test cases.\n\nExamples\nrunningathlete([\"run\", \"jump\", \"run\", \"jump\", \"run\"], \"||\") ➞ \"||_\"\n\nrunningathlete([\"run\", \"jump\", \"run\", \"run\", \"run\"], \"||\") ➞ \"|/_\"\n\nrunningathlete([\"jump\", \"jump\", \"jump\", \"jump\", \"jump\"], \"||\") ➞ \"x|x|x\"\n\nrunningathlete([\"run\", \"run\", \"run\", \"run\", \"run\"], \"||\") ➞ \"//_\"\n\nNotes\nN/A",
    "tags": [
      "regex",
      "strings",
      "language_fundamentals",
      "interview"
    ],
    "title": "Running Athlete 🏃"
  },
  {
    "_id": "mXozEFbyHeqmL6FZE",
    "difficulty": 0.8241758241758241,
    "language": "python3",
    "summary": "Mubashir was walking through a straight street with exactly n identical houses on both sides. House numbers in the street look like this:\n\n1 |   | 6\n\n3 |   | 4\n\n5 |   | 2\n\nHe noticed that Even numbered houses increase on the right while Odd numbered houses decrease on the left.\n\nCreate a function that takes a house number house and length of the street n and r",
    "tags": [
      "math",
      "numbers",
      "logic",
      "interview"
    ],
    "title": "Opposite House 🏘️"
  },
  {
    "_id": "YEeywMm2eMtae4WDW",
    "difficulty": 0.8896753346668719,
    "language": "python3",
    "summary": "Here is a trainwreck of a photo:\n\nYou FAILEDPASSED the Exam Required mark is 85% Your score 85%\n\nThe challenge is to fix all of the bugs in this incredibly messy code, which the code in the image might've actually looked like (probably not)! The code given will output the same middle two lines as in the image shown above.\nFirst parameter is the user's score.\nS",
    "tags": [
      "bugs",
      "conditions",
      "logic"
    ],
    "title": "You FAILEDPASSED the Exam"
  },
  {
    "_id": "bNp4kd4rFfysPepkp",
    "difficulty": 0.8931895093062606,
    "language": "python3",
    "summary": "Create a function that takes an angle in radians and converts it into degrees.\n\nExamples\nto_degree(math.pi) ➞ 180\n\nto_degree(math.pi/2) ➞ 90\n\nto_degree(math.pi/4) ➞ 45\n\nNotes\nThe input angles are in radians.\nCheck out the Resources tab.\nThere are 360 degrees and 2 pi radians in a circle. So to convert degrees to radians, divide by 360 and multiply by 2 * pi (a",
    "tags": [
      "math",
      "language_fundamentals"
    ],
    "title": "Radian to Degree"
  },
  {
    "_id": "iZXfuFLiKJZXAqui5",
    "difficulty": 0.901541095890411,
    "language": "python3",
    "summary": "Write a function that returns the length of a string. Make your function recursive.\n\nExamples\nlength(\"apple\") ➞ 5\n\nlength(\"make\") ➞ 4\n\nlength(\"a\") ➞ 1\n\nlength(\"\") ➞ 0\n\nNotes\nCheck the Resources tab for info on recursion.",
    "tags": [
      "recursion",
      "strings",
      "language_fundamentals"
    ],
    "title": "Recursion: Length of a String"
  },
  {
    "_id": "gt9LLufDCMHKMioh2",
    "difficulty": 0.9946555819477435,
    "language": "python3",
    "summary": "Write a function that stutters a word as if someone is struggling to read it. The first two letters are repeated twice with an ellipsis ... and space after each, and then the word is pronounced with a question mark ?.\n\nExamples\nstutter(\"incredible\") ➞ \"in... in... incredible?\"\n\nstutter(\"enthusiastic\") ➞ \"en... en... enthusiastic?\"\n\nstutter(\"outstanding\") ➞ \"ou",
    "tags": [
      "algorithms",
      "formatting",
      "strings",
      "language_fundamentals"
    ],
    "title": "Stuttering Function"
  },
  {
    "_id": "cXnkmRdxqJrwdsP4n",
    "difficulty": 1.0209003215434083,
    "language": "python3",
    "summary": "Create a function that takes two arguments: the original price and the discount percentage as integers and returns the final price after the discount.\n\nAlternative Text\n\nExamples\ndis(1500, 50) ➞ 750\n\ndis(89, 20) ➞ 71.2\n\ndis(100, 75) ➞ 25\n\nNotes\nYour answer should be rounded to two decimal places.",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "Find the Discount"
  },
  {
    "_id": "2X2uZysLJ3CpsxLDD",
    "difficulty": 1.0264227642276422,
    "language": "python3",
    "summary": "Create a function that takes an angle in radians and returns the corresponding angle in degrees rounded to one decimal place.\n\nExamples\nradianstodegrees(1) ➞ 57.3\n\nradianstodegrees(20) ➞ 1145.9\n\nradianstodegrees(50) ➞ 2864.8\n\nNotes\nThe number π can be loaded from the math module with from math import pi.",
    "tags": [
      "math",
      "logic",
      "numbers"
    ],
    "title": "Radians to Degrees"
  },
  {
    "_id": "4me7LifXBwj5rhL4n",
    "difficulty": 1.0352,
    "language": "python3",
    "summary": "Given the radius of a circle and the area of a square, return True if the circumference of the circle is greater than the square's perimeter and False if the square's perimeter is greater than the circumference of the circle.\n\nExamples\ncircleorsquare(16, 625) ➞ True\n\ncircleorsquare(5, 100) ➞ False\n\ncircleorsquare(8, 144) ➞ True\n\nNotes\nYou can use Pi to 2 decim",
    "tags": [
      "geometry",
      "validation"
    ],
    "title": "Circle or Square"
  },
  {
    "_id": "HYjQKDXFfeppcWmLX",
    "difficulty": 1.0428781744571218,
    "language": "python3",
    "summary": "In this challenge, establish if a given integer num is a Curzon number. If 1 plus 2 elevated to num is exactly divisible by 1 plus 2 multiplied by num, then num is a Curzon number.\n\nGiven a non-negative integer num, implement a function that returns True if num is a Curzon number, or False otherwise.\n\nExamples\nis_curzon(5) ➞ True\n2 ** 5 + 1 = 33\n2 * 5 + 1 = 11",
    "tags": [
      "numbers",
      "math",
      "validation"
    ],
    "title": "Curzon Numbers"
  },
  {
    "_id": "8pDH2SRutPoaQghgc",
    "difficulty": 1.053629823413996,
    "language": "python3",
    "summary": "Luke Skywalker has family and friends. Help him remind them who is who. Given a string with a name, return the relation of that person to Luke.\n\nPerson | Relation\n:--- | :---\nDarth Vader | father\nLeia | sister\nHan | brother in law\nR2D2 | droid\n\nExamples\nrelationtoluke(\"Darth Vader\") ➞ \"Luke, I am your father.\"\n\nrelationtoluke(\"Leia\") ➞ \"Luke, I am your sister.",
    "tags": [
      "conditions",
      "formatting",
      "strings",
      "objects"
    ],
    "title": "Luke, I Am Your ..."
  },
  {
    "_id": "gzmFeaXwFv8X6pBGq",
    "difficulty": 1.0614334470989761,
    "language": "python3",
    "summary": "When resistors are connected together in series, the same current passes through each resistor in the chain and the total resistance, RT, of the circuit must be equal to the sum of all the individual resistors added together. That is:\n\nRT = R1 + R2 + R3 ...\n\nCreate a function that takes an array of values resistance that are connected in series, and calculates",
    "tags": [
      "math",
      "loops",
      "physics",
      "arrays"
    ],
    "title": "Sum of Resistance in Series Circuits"
  },
  {
    "_id": "NM8JbG5K2ajKjkqpj",
    "difficulty": 1.0700757575757576,
    "language": "python3",
    "summary": "Create a function that takes a list of numbers lst, a string s and return a list of numbers as per the following rules:\n\n\"Asc\" returns a sorted list in ascending order.\n\"Des\" returns a sorted list in descending order.\n\"None\" returns a list without any modification.\n\nExamples\nascdesnone([4, 3, 2, 1], \"Asc\" ) ➞ [1, 2, 3, 4]\n\nascdesnone([7, 8, 11, 66], \"Des\") ➞ [",
    "tags": [
      "arrays",
      "numbers",
      "sorting"
    ],
    "title": "Let's Sort This List!"
  },
  {
    "_id": "uKPc5faEzQkMwLYPP",
    "difficulty": 1.0711974110032363,
    "language": "python3",
    "summary": "Create a function that takes the number of daily average recovered cases recovers, daily average newcases, current activecases,  and returns the number of days it will take to reach zero cases.\n\nExamples\nend_corona(4000, 2000, 77000) ➞ 39\n\nend_corona(3000, 2000, 50699) ➞ 51\n\nend_corona(30000, 25000, 390205) ➞ 79\n\nNotes\nThe number of people who recover per day",
    "tags": [
      "numbers",
      "math"
    ],
    "title": "End Corona!"
  },
  {
    "_id": "ZdnwC3PsXPQTdTiKf",
    "difficulty": 1.0740740740740742,
    "language": "python3",
    "summary": "Create a function that takes two numbers and a mathematical operator + - / * and will perform a calculation with the given numbers.\n\nExamples\ncalculator(2, \"+\", 2) ➞ 4\n\ncalculator(2, \"*\", 2) ➞ 4\n\ncalculator(4, \"/\", 2) ➞ 2\n\nNotes\nIf the input tries to divide by 0, return: \"Can't divide by 0!\"",
    "tags": [
      "algebra",
      "math",
      "numbers"
    ],
    "title": "Basic Calculator"
  },
  {
    "_id": "FF6kYPHdAcJnoosr5",
    "difficulty": 1.0755042775292363,
    "language": "python3",
    "summary": "Create a function that takes an integer and returns the factorial of that integer. That is, the integer multiplied by all positive lower integers.\n\nExamples\nfactorial(3) ➞ 6\n\nfactorial(5) ➞ 120\n\nfactorial(13) ➞ 6227020800\n\nNotes\nAssume all inputs are greater than or equal to 0.",
    "tags": [
      "algebra",
      "math",
      "numbers",
      "recursion"
    ],
    "title": "Return the Factorial"
  },
  {
    "_id": "YK9fWNBbRJ9PEc4wR",
    "difficulty": 1.0755148741418765,
    "language": "python3",
    "summary": "Create a function that takes two lists and insert the second list in the middle of the first list.\n\nExamples\ntuck_in([1, 10], [2, 3, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\ntuck_in([15,150], [45, 75, 35]) ➞ [15, 45, 75, 35, 150]\n\ntuck_in([[1, 2], [5, 6]], [[3, 4]]) ➞ [[1, 2], [3, 4], [5, 6]]\n\nNotes\nThe first list always has two elements.",
    "tags": [
      "formatting",
      "arrays"
    ],
    "title": "Tuck in List"
  },
  {
    "_id": "9ZAHTYWTP5c7FW4RY",
    "difficulty": 1.0768136557610242,
    "language": "python3",
    "summary": "The vertical bar | is the equivalent to \"or\" in RegEx.  The regular expression x|y matches either \"x\" or \"y\". Write the regular expression that will match all red flag and blue flag in a string. You must use | in your expression. Flags can come in any order.\n\nExamples\ntxt1 = \"red flag blue flag\"\ntxt2 = \"yellow flag red flag blue flag green flag\"\ntxt3 = \"pink f",
    "tags": [
      "regex",
      "formatting"
    ],
    "title": "RegEx XV: Alternation"
  },
  {
    "_id": "tgEWKRQD8hu5dD3pX",
    "difficulty": 1.0769230769230769,
    "language": "python3",
    "summary": "Create a function that takes in a current mood and return a sentence in the following format: \"Today, I am feeling {mood}\". However, if no argument is passed, return \"Today, I am feeling neutral\".\n\nExamples\nmood_today(\"happy\") ➞ \"Today, I am feeling happy\"\n\nmood_today(\"sad\") ➞ \"Today, I am feeling sad\"\n\nmood_today() ➞ \"Today, I am feeling neutral\"\n\nNotes\nCheck",
    "tags": [
      "language_fundamentals",
      "strings"
    ],
    "title": "Default Mood"
  },
  {
    "_id": "2hsyXkzDRewGSPpPE",
    "difficulty": 1.0776545166402536,
    "language": "python3",
    "summary": "Create a function that returns a base-2 (binary) representation of a base-10 (decimal) string number. To convert is simple: ((2) means base-2 and (10) means base-10) 010101001(2) = 1 + 8 + 32 + 128.\n\nGoing from right to left, the value of the most right bit is 1, now from that every bit to the left will be x2 the value, value of an 8 bit binary numbers are (25",
    "tags": [
      "bit_operations",
      "logic",
      "numbers",
      "loops"
    ],
    "title": "Convert a Number to Base-2"
  },
  {
    "_id": "iP4ixkQffELyHvHi5",
    "difficulty": 1.0777479892761395,
    "language": "python3",
    "summary": "Given radius r and height h (in cm), calculate the mass of a cylinder when it's filled with water and the cylinder itself doesn't weigh anything. The desired output should be given in kg and rounded to two decimal places.\n\nHow to solve:\n\nCalculate the volume of the cylinder.\nConvert cm³ into dm³.\n1dm³ = 1L, 1L is 1Kg.\n\nExamples\nweight(4, 10) ➞ 0.5\n\nweight(30,",
    "tags": [
      "physics",
      "math"
    ],
    "title": "How Heavy Is It?"
  },
  {
    "_id": "6nSckbgCx9hjTwmcw",
    "difficulty": 1.0780456852791878,
    "language": "python3",
    "summary": "Christmas Eve is almost upon us, so naturally we need to prepare some milk and cookies for Santa! Create a function that accepts a Date object and returns True if it's Christmas Eve (December 24th) and False otherwise.\n\nExamples\ntimeformilkandcookies(datetime.date(2013, 12, 24)) ➞ True\n\ntimeformilkandcookies(datetime.date(2013, 1, 23)) ➞ False\n\ntimeformilkandc",
    "tags": [
      "validation",
      "dates"
    ],
    "title": "Is it Time for Milk and Cookies?"
  },
  {
    "_id": "Ns4Sjh7KK58ofAph8",
    "difficulty": 1.0781065088757396,
    "language": "python3",
    "summary": "Create a function that validates whether three given integers form a Pythagorean triplet. The sum of the squares of the two smallest integers must equal the square of the largest number to be validated.\n\nExamples\nis_triplet(3, 4, 5) ➞ True\n3² + 4² = 25\n5² = 25\n\nis_triplet(13, 5, 12) ➞ True\n5² + 12² = 169\n13² = 169\n\nis_triplet(1, 2, 3) ➞ False\n1² + 2² = 5\n3² =",
    "tags": [
      "math",
      "validation",
      "numbers",
      "geometry"
    ],
    "title": "Pythagorean Triplet"
  },
  {
    "_id": "GbyPdqNnp75Wci7Cn",
    "difficulty": 1.0781345878502762,
    "language": "python3",
    "summary": "Count the amount of ones in the binary representation of an integer. For example, since 12 is 1100 in binary, the return value should be 2.\n\nExamples\ncount_ones(0) ➞ 0\n\ncount_ones(100) ➞ 3\n\ncount_ones(999) ➞ 8\n\nNotes\nThe input will always be a valid integer (number).",
    "tags": [
      "formatting",
      "numbers"
    ],
    "title": "Count Ones in Binary Representation of Integer"
  },
  {
    "_id": "p88k8yHRPTMPt4bBo",
    "difficulty": 1.0781586890901251,
    "language": "python3",
    "summary": "Create a function that takes a string and returns the number (count) of vowels contained within it.\n\nExamples\ncount_vowels(\"Celebration\") ➞ 5\n\ncount_vowels(\"Palm\") ➞ 1\n\ncount_vowels(\"Prediction\") ➞ 4\n\nNotes\na, e, i, o, u are considered vowles (not y).\nAll test cases are one word and only contain letters.",
    "tags": [
      "regex",
      "strings",
      "loops",
      "interview"
    ],
    "title": "How Many Vowels?"
  },
  {
    "_id": "QFXMcwaQZ8FTAuEtg",
    "difficulty": 1.078285335981463,
    "language": "python3",
    "summary": "Create a function that takes a single character as an argument and returns the char code of its lowercased / uppercased counterpart.\n\nExamples\nGiven that:\n  \"A\" char code is: 65\n  \"a\" char code is: 97\n\ncounterpartCharCode(\"A\") ➞ 97\n\ncounterpartCharCode(\"a\") ➞ 65\n\nNotes\nThe argument will always be a single character.\nNot all inputs will have a counterpart (e.g.",
    "tags": [
      "strings",
      "formatting"
    ],
    "title": "Find ASCII Charcode of Inverse Case Character"
  },
  {
    "_id": "nWtgKSNGQ3sB52rQ8",
    "difficulty": 1.0782997762863535,
    "language": "python3",
    "summary": "Create a function that takes three arguments a, b, c and returns the sum of the numbers that are evenly divided by c from the range a, b inclusive.\n\nExamples\nevenly_divisible(1, 10, 20) ➞ 0\nNo number between 1 and 10 can be evenly divided by 20.\n\nevenly_divisible(1, 10, 2) ➞ 30\n2 + 4 + 6 + 8 + 10 = 30\n\nevenly_divisible(1, 10, 3) ➞ 18\n3 + 6 + 9 = 18\n\nNotes\nRetu",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "Sum of Evenly Divisible Numbers from a Range"
  },
  {
    "_id": "eA94BuKYjwMoNQSE2",
    "difficulty": 1.0783250162725102,
    "language": "python3",
    "summary": "Create a function that returns True if a given inequality expression is correct and False otherwise.\n\nExamples\ncorrect_signs(\"3  44 > 33 > 1\") ➞ False\n\ncorrect_signs(\"1  3\") ➞ True\n\nNotes\nN/A",
    "tags": [
      "strings",
      "regex",
      "validation"
    ],
    "title": "Correct Inequality Signs"
  },
  {
    "_id": "Ggq8GtYPeHJQg4v7q",
    "difficulty": 1.0783460282916213,
    "language": "python3",
    "summary": "Create a function that replaces all the vowels in a string with a specified character.\n\nExamples\nreplace_vowels(\"the aardvark\", \"#\") ➞ \"th# ##rdv#rk\"\n\nreplace_vowels(\"minnie mouse\", \"?\") ➞ \"m?nn?? m??s?\"\n\nreplace_vowels(\"shakespeare\", \"\") ➞ \"shkspr\"\n\nNotes\nAll characters will be in lower case.",
    "tags": [
      "strings",
      "regex"
    ],
    "title": "Vowel Replacer"
  },
  {
    "_id": "iRCwdDBkNcHM5QeAm",
    "difficulty": 1.078391274710293,
    "language": "python3",
    "summary": "Write a function that takes a credit card number and only displays the last four characters. The rest of the card number must be replaced by **.\n\nExamples\ncard_hide(\"1234123456785678\") ➞ \"**5678\"\n\ncard_hide(\"8754456321113213\") ➞ \"**3213\"\n\ncard_hide(\"35123413355523\") ➞ \"**5523\"\n\nExamples\nEnsure you return a string.\nThe length of the string must remain the same",
    "tags": [
      "strings",
      "numbers",
      "formatting"
    ],
    "title": "Hiding the Card Number"
  },
  {
    "_id": "JSJEuuWduBB5hEX6k",
    "difficulty": 1.0783938814531548,
    "language": "python3",
    "summary": "Create a function that takes a string, checks if it has the same number of \"x\"s and \"o\"s and returns either True or False.\n\nReturn a boolean value (True or False).\nReturn True if the amount of x's and o's are the same.\nReturn False if they aren't the same amount.\nThe string can contain any character.\nWhen \"x\" and \"o\" are not in the string, return True.\n\nExampl",
    "tags": [
      "strings",
      "conditions",
      "language_fundamentals",
      "validation",
      "regex"
    ],
    "title": "Xs and Os, Nobody Knows"
  },
  {
    "_id": "pKSL3HtApPYAJ72CJ",
    "difficulty": 1.0784143518518519,
    "language": "python3",
    "summary": "Create a function that takes a string (will be a person's first and last name) and returns a string with the first and last name swapped.\n\nExamples\nname_shuffle(\"Donald Trump\") ➞ \"Trump Donald\"\n\nname_shuffle(\"Rosie O'Donnell\") ➞ \"O'Donnell Rosie\"\n\nname_shuffle(\"Seymour Butts\") ➞ \"Butts Seymour\"\n\nNotes\nThere will be exactly one space between the first and last",
    "tags": [
      "strings",
      "sorting"
    ],
    "title": "Shuffle the Name"
  },
  {
    "_id": "9TcXrWEGH3DaCgPBs",
    "difficulty": 1.0784248841826605,
    "language": "python3",
    "summary": "Create a function that takes a list and finds the integer which appears an odd number of times.\n\nExamples\nfind_odd([1, 1, 2, -2, 5, 2, 4, 4, -1, -2, 5]) ➞ -1\n\nfind_odd([20, 1, 1, 2, 2, 3, 3, 5, 5, 4, 20, 4, 5]) ➞ 5\n\nfind_odd([10]) ➞ 10\n\nNotes\nThere will always only be one integer that appears an odd number of times.",
    "tags": [
      "math",
      "loops",
      "arrays",
      "bit_operations"
    ],
    "title": "Find the Odd Integer"
  },
  {
    "_id": "nfWirHJzNRBMAp9Df",
    "difficulty": 1.0784412955465588,
    "language": "python3",
    "summary": "Hamming distance is the number of characters that differ between two strings.\n\nTo illustrate:\nString1: \"abcbba\"\nString2: \"abcbda\"\n\nHamming Distance: 1 - \"b\" vs. \"d\" is the only difference.\n\nCreate a function that computes the hamming distance between two strings.\n\nExamples\nhamming_distance(\"abcde\", \"bcdef\") ➞ 5\n\nhamming_distance(\"abcde\", \"abcde\") ➞ 0\n\nhamming_",
    "tags": [
      "strings",
      "loops"
    ],
    "title": "Hamming Distance"
  },
  {
    "_id": "nunJurLEibCyn8fzn",
    "difficulty": 1.0784470682409446,
    "language": "python3",
    "summary": "Create a function that takes a list of non-negative integers and strings and return a new list without the strings.\n\nExamples\nfilter_list([1, 2, \"a\", \"b\"]) ➞ [1, 2]\n\nfilter_list([1, \"a\", \"b\", 0, 15]) ➞ [1, 0, 15]\n\nfilter_list([1, 2, \"aasf\", \"1\", \"123\", 123]) ➞ [1, 2, 123]\n\nNotes\nZero is a non-negative integer.\nThe given list only has integers and strings.\nNumb",
    "tags": [
      "loops",
      "arrays",
      "formatting"
    ],
    "title": "Filter out Strings from an Array"
  },
  {
    "_id": "9hQogtkbZSSJ8tYsG",
    "difficulty": 1.078449053201082,
    "language": "python3",
    "summary": "The \"Reverser\" takes a string as input and returns that string in reverse order, with the opposite case.\n\nExamples\nreverse(\"Hello World\") ➞ \"DLROw OLLEh\"\n\nreverse(\"ReVeRsE\") ➞ \"eSrEvEr\"\n\nreverse(\"Radar\") ➞ \"RADAr\"\n\nNotes\nThere will be no punctuation in any of the test cases.",
    "tags": [
      "strings",
      "formatting",
      "language_fundamentals"
    ],
    "title": "The Reverser!"
  },
  {
    "_id": "7sdNcax4GsLSrNQbM",
    "difficulty": 1.0784505208333333,
    "language": "python3",
    "summary": "You can assign variables from lists like this:\n\nlst = [1, 2, 3, 4, 5, 6]\nfirst = lst[0]\nmiddle = lst[1:-1]\nlast = lst[-1]\n\nprint(first) ➞ outputs 1\nprint(middle) ➞ outputs [2, 3, 4, 5]\nprint(last) ➞ outputs 6\n\nWith Python 3, you can assign variables from lists in a much more succinct way. Create variables first, middle and last from the given list using destru",
    "tags": [
      "language_fundamentals",
      "arrays"
    ],
    "title": "Unpacking Lists"
  },
  {
    "_id": "S9KCN5kqoDbhNdKh5",
    "difficulty": 1.0784598619687613,
    "language": "python3",
    "summary": "Create a function to calculate how many characters in total are needed to make up the shape. You will be given a list of strings which make up a shape in the compiler (i.e. a square, a rectangle or a line).\n\nExamples\ncount_characters([\n  \"###\",\n  \"###\",\n  \"###\"\n]) ➞ 9\n\ncount_characters([\n  \"22222222\",\n  \"22222222\",\n]) ➞ 16\n\ncount_characters([\n  \"--------------",
    "tags": [
      "strings",
      "arrays",
      "language_fundamentals"
    ],
    "title": "Characters in Shapes"
  },
  {
    "_id": "pPyAgyeNEvQsBytaR",
    "difficulty": 1.0784725136382711,
    "language": "python3",
    "summary": "Write a function that calculates the factorial of a number recursively.\n\nExamples\nfactorial(5) ➞ 120\n\nfactorial(3) ➞ 6\n\nfactorial(1) ➞ 1\n\nfactorial(0) ➞ 1\n\nNotes\nN/A",
    "tags": [
      "recursion",
      "numbers"
    ],
    "title": "Recursion: Factorials"
  },
  {
    "_id": "nTW4KgmJxpLDXcWPt",
    "difficulty": 1.0784753363228698,
    "language": "python3",
    "summary": "Write a function that moves all elements of one type to the end of the list.\n\nExamples\nmovetoend([1, 3, 2, 4, 4, 1], 1) ➞ [3, 2, 4, 4, 1, 1]\nMove all the 1s to the end of the array.\n\nmovetoend([7, 8, 9, 1, 2, 3, 4], 9) ➞ [7, 8, 1, 2, 3, 4, 9]\n\nmovetoend([\"a\", \"a\", \"a\", \"b\"], \"a\") ➞ [\"b\", \"a\", \"a\", \"a\"]\n\nNotes\nKeep the order of the un-moved items the same.",
    "tags": [
      "arrays",
      "higher_order_functions"
    ],
    "title": "Moving to the End"
  },
  {
    "_id": "HpqLxNqqRvMQoz8ME",
    "difficulty": 1.0784797630799605,
    "language": "python3",
    "summary": "Create a function that takes a string and returns a string in which each character is repeated once.\n\nExamples\ndouble_char(\"String\") ➞ \"SSttrriinngg\"\n\ndouble_char(\"Hello World!\") ➞ \"HHeelllloo  WWoorrlldd!!\"\n\ndoublechar(\"1234! \") ➞ \"11223344!!__  \"\n\nNotes\nAll test cases contain valid strings. Don't worry about spaces, special characters or numbers. They're all",
    "tags": [
      "strings",
      "formatting"
    ],
    "title": "Repeating Letters"
  },
  {
    "_id": "NLY7zGMYocsTbeS6n",
    "difficulty": 1.0784956605593057,
    "language": "python3",
    "summary": "Create a function that reverses a boolean value and returns the string \"boolean expected\" if another variable type is given.\n\nExamples\nreverse(True) ➞ False\n\nreverse(False) ➞ True\n\nreverse(0) ➞ \"boolean expected\"\n\nreverse(None) ➞ \"boolean expected\"\n\nNotes\nDon't forget to return the result.\nIf you get stuck on a challenge, find help in the Resources tab.\nIf you",
    "tags": [
      "logic",
      "conditions",
      "language_fundamentals"
    ],
    "title": "Flip the Boolean"
  },
  {
    "_id": "4t6YAJS8dtT7RQjta",
    "difficulty": 1.0785002929115408,
    "language": "python3",
    "summary": "Create a function that returns the thickness (in meters) of a piece of paper after folding it n number of times. The paper starts off with a thickness of 0.5mm.\n\nExamples\nnum_layers(1) ➞ \"0.001m\"\nPaper folded once is 1mm (equal to 0.001m)\n\nnum_layers(4) ➞ \"0.008m\"\nPaper folded 4 times is 8mm (equal to 0.008m)\n\nnum_layers(21) ➞ \"1048.576m\"\nPaper folded 21 times",
    "tags": [
      "formatting",
      "math",
      "algebra",
      "numbers"
    ],
    "title": "Folding a Piece of Paper"
  },
  {
    "_id": "rQkriLJBc9CbfRbJb",
    "difficulty": 1.0785113433596738,
    "language": "python3",
    "summary": "Create a function that takes a single string as argument and returns an ordered list containing the indexes of all capital letters in the string.\n\nExamples\nindexofcaps(\"eDaBiT\") ➞ [1, 3, 5]\n\nindexofcaps(\"eQuINoX\") ➞ [1, 3, 4, 6]\n\nindexofcaps(\"determine\") ➞ []\n\nindexofcaps(\"STRIKE\") ➞ [0, 1, 2, 3, 4, 5]\n\nindexofcaps(\"sUn\") ➞ [1]\n\nNotes\nReturn an empty list if n",
    "tags": [
      "strings",
      "formatting"
    ],
    "title": "Return the Index of All Capital Letters"
  },
  {
    "_id": "si2H6WC5YX99cn6LQ",
    "difficulty": 1.0785242849889998,
    "language": "python3",
    "summary": "Write a function that finds the sum of the first n natural numbers. Make your function recursive.\n\nExamples\nsum_numbers(5) ➞ 15\n1 + 2 + 3 + 4 + 5 = 15\n\nsum_numbers(1) ➞ 1\n\nsum_numbers(12) ➞ 78\n\nNotes\nAssume the input number is always positive.\nCheck the Resources tab for info on recursion.",
    "tags": [
      "recursion",
      "math",
      "numbers",
      "language_fundamentals"
    ],
    "title": "Recursion:  Sum"
  },
  {
    "_id": "eJLwXpuaffjFnzENN",
    "difficulty": 1.0785288270377733,
    "language": "python3",
    "summary": "Using list comprehensions,  create a function that finds all even numbers from 1 to the given number.\n\nExamples\nfindevennums(8) ➞ [2, 4, 6, 8]\n\nfindevennums(4) ➞ [2, 4]\n\nfindevennums(2) ➞ [2]\n\nTry to use list comprehensions in your solution. Here's an example:\n\nvals = [expression\n  for value in collection\n    if condition]\n\nThis is equivalent to:\n\nvals = []\nfo",
    "tags": [
      "arrays",
      "conditions",
      "numbers"
    ],
    "title": "Even Number Generator"
  },
  {
    "_id": "EfEpbcGjXQYDFcdxF",
    "difficulty": 1.078544061302682,
    "language": "python3",
    "summary": "Create a function that takes a list of strings and integers, and filters out the list so that it returns a list of integers only.\n\nExamples\nfilter_list([1, 2, 3, \"a\", \"b\", 4]) ➞ [1, 2, 3, 4]\n\nfilter_list([\"A\", 0, \"Edabit\", 1729, \"Python\", \"1729\"]) ➞ [0, 1729]\n\nfilter_list([\"Nothing\", \"here\"]) ➞ []\n\nNotes\nDon't overthink this one.",
    "tags": [
      "conditions",
      "loops",
      "strings",
      "arrays"
    ],
    "title": "Filter Strings from Array"
  },
  {
    "_id": "gr4ihixfTaoEmZiin",
    "difficulty": 1.078546307151231,
    "language": "python3",
    "summary": "Given a list of numbers, create a function which returns the list but with each element's index in the list added to itself. This means you add 0 to the number at index 0, add 1 to the number at index 1, etc...\n\nExamples\nadd_indexes([0, 0, 0, 0, 0]) ➞ [0, 1, 2, 3, 4]\n\nadd_indexes([1, 2, 3, 4, 5]) ➞ [1, 3, 5, 7, 9]\n\nadd_indexes([5, 4, 3, 2, 1]) ➞ [5, 5, 5, 5, 5",
    "tags": [
      "loops",
      "arrays",
      "language_fundamentals",
      "numbers"
    ],
    "title": "Add the Index"
  },
  {
    "_id": "LMjficQtWW36a3by3",
    "difficulty": 1.078551912568306,
    "language": "python3",
    "summary": "Given a list of numbers and a value n, write a function that returns the probability of choosing a number greater than or equal to n from the list. The probability should be expressed as a percentage, rounded to one decimal place.\n\nExamples\nprobability([5, 1, 8, 9], 6) ➞ 50.0\n\nprobability([7, 4, 17, 14, 12, 3], 16) ➞ 16.7\n\nprobability([4, 6, 2, 9, 15, 18, 8, 2",
    "tags": [
      "arrays",
      "math"
    ],
    "title": "Probabilities (Part 1)"
  },
  {
    "_id": "uXPF7XM4KoiiSnjuA",
    "difficulty": 1.0785525154457194,
    "language": "python3",
    "summary": "Create a function that takes the height and radius of a cone as arguments and returns the volume of the cone rounded to the nearest hundredth. See the resources tab for the formula.\n\nVolume of a Cone Image\n\nExamples\ncone_volume(3, 2) ➞ 12.57\n\ncone_volume(15, 6) ➞ 565.49\n\ncone_volume(18, 0) ➞ 0\n\nNotes\nReturn  approximate answer by rounding the answer to the nea",
    "tags": [
      "math",
      "numbers",
      "geometry"
    ],
    "title": "Volume of a Cone"
  },
  {
    "_id": "PbDLFCa4qp5knYN43",
    "difficulty": 1.0785627283800243,
    "language": "python3",
    "summary": "This Triangular Number Sequence is generated from a pattern of dots that form a triangle. The first 5 numbers of the sequence, or dots, are:\n\n1, 3, 6, 10, 15\n\nThis means that the first triangle has just one dot, the second one has three dots, the third one has 6 dots and so on.\n\nWrite a function that returns the number of dots when given its corresponding tria",
    "tags": [
      "algorithms",
      "loops",
      "math",
      "algebra"
    ],
    "title": "Triangular Number Sequence"
  },
  {
    "_id": "oMCNzA4DcgpsnXTRJ",
    "difficulty": 1.0785699858614421,
    "language": "python3",
    "summary": "Create a function that takes a list of numbers between 1 and 10 (excluding one number) and returns the missing number.\n\nExamples\nmissing_num([1, 2, 3, 4, 6, 7, 8, 9, 10]) ➞ 5\n\nmissing_num([7, 2, 3, 6, 5, 9, 1, 4, 8]) ➞ 10\n\nmissing_num([10, 5, 1, 2, 4, 6, 8, 3, 9]) ➞ 7\n\nNotes\nThe list of numbers will be unsorted (not in order).\nOnly one number will be missing.",
    "tags": [
      "sorting",
      "algorithms",
      "math",
      "numbers",
      "interview"
    ],
    "title": "Find the Missing Number"
  },
  {
    "_id": "S26tvW7BPrJsyJApt",
    "difficulty": 1.0785714285714285,
    "language": "python3",
    "summary": "Write a function that takes a list and a number as arguments. Add the number to the end of the list, then remove the first element of the list. The function should then return the updated list.\n\nExamples\nnextinline([5, 6, 7, 8, 9], 1) ➞ [6, 7, 8, 9, 1]\n\nnextinline([7, 6, 3, 23, 17], 10) ➞ [6, 3, 23, 17, 10]\n\nnextinline([1, 10, 20, 42 ], 6) ➞ [10, 20, 42, 6]\n\nn",
    "tags": [
      "numbers",
      "arrays",
      "conditions"
    ],
    "title": "Stand in Line"
  },
  {
    "_id": "ff2R7SymbB6PfjpPm",
    "difficulty": 1.0785714285714285,
    "language": "python3",
    "summary": "Create the function that takes a list of dictionaries and returns the sum of people's budgets.\n\nExamples\nget_budgets([\n  { \"name\": \"John\", \"age\": 21, \"budget\": 23000 },\n  { \"name\": \"Steve\",  \"age\": 32, \"budget\": 40000 },\n  { \"name\": \"Martin\",  \"age\": 16, \"budget\": 2700 }\n]) ➞ 65700\n\nget_budgets([\n  { \"name\": \"John\",  \"age\": 21, \"budget\": 29000 },\n  { \"name\": \"",
    "tags": [
      "objects",
      "arrays",
      "numbers"
    ],
    "title": "Get Sum of People's Budget"
  },
  {
    "_id": "4Agr8CTY7x2rAhh5n",
    "difficulty": 1.0785928143712575,
    "language": "python3",
    "summary": "Create a function that takes a string  and returns a string with its letters in alphabetical order.\n\nExamples\nalphabet_soup(\"hello\") ➞ \"ehllo\"\n\nalphabet_soup(\"edabit\") ➞ \"abdeit\"\n\nalphabet_soup(\"hacker\") ➞ \"acehkr\"\n\nalphabet_soup(\"geek\") ➞ \"eegk\"\n\nalphabet_soup(\"javascript\") ➞ \"aacijprstv\"\n\nNotes\nYou can assume numbers and punctuation symbols won't be included",
    "tags": [
      "strings",
      "sorting",
      "formatting"
    ],
    "title": "Alphabet Soup"
  },
  {
    "_id": "k8X82wXfFsNKfyPFT",
    "difficulty": 1.0785973397823458,
    "language": "python3",
    "summary": "The Code tab has code which attempts to add a clone of a list to itself. There is no error message, but the results are not as intended. Can you fix the code?\n\nExamples\nclone([1, 1]) ➞ [1, 1, [1, 1]]\n\nclone([1, 2, 3]) ➞ [1, 2, 3, [1, 2, 3]]\n\nclone([\"x\", \"y\"]) ➞ [\"x\", \"y\", [\"x\", \"y\"]]\n\nNotes\nN/A",
    "tags": [
      "bugs",
      "arrays"
    ],
    "title": "Clone a List"
  },
  {
    "_id": "hYiCzkLBBQSeF8fKF",
    "difficulty": 1.0786618444846292,
    "language": "python3",
    "summary": "In BlackJack, cards are counted with -1, 0, 1 values:\n2, 3, 4, 5, 6 are counted as +1\n7, 8, 9 are counted as 0\n10, J, Q, K, A are counted as -1\n\nCreate a function that counts the number and returns it from the list of cards provided.\n\nExamples\ncount([5, 9, 10, 3, \"J\", \"A\", 4, 8, 5]) ➞ 1\n\ncount([\"A\", \"A\", \"K\", \"Q\", \"Q\", \"J\"]) ➞ -6\n\ncount([\"A\", 5, 5, 2, 6, 2, 3,",
    "tags": [
      "algebra",
      "games",
      "conditions",
      "loops"
    ],
    "title": "Card Counting (BlackJack)"
  },
  {
    "_id": "K4Pqh67Y9gpixPfjo",
    "difficulty": 1.0786696514230891,
    "language": "python3",
    "summary": "ATM machines allow 4 or 6 digit PIN codes and PIN codes cannot contain anything but exactly 4 digits or exactly 6 digits. Your task is to create a function that takes a string and returns True if the PIN is valid and False if it's not.\n\nExamples\nisvalidPIN(\"1234\") ➞ True\n\nisvalidPIN(\"12345\") ➞ False\n\nisvalidPIN(\"a234\") ➞ False\n\nisvalidPIN(\"\") ➞ False\n\nNotes\nSo",
    "tags": [
      "regex",
      "validation"
    ],
    "title": "ATM PIN Code Validation"
  },
  {
    "_id": "HjpihSKFBfRCCg86J",
    "difficulty": 1.0786802030456852,
    "language": "python3",
    "summary": "Suppose that you invest $10,000 for 10 years at an interest rate of 6% compounded monthly. What will be the value of your investment at the end of the 10 year period?\n\nCreate a function that accepts the principal p, the term in years t, the interest rate r, and the number of compounding periods per year n. The function returns the value at the end of term roun",
    "tags": [
      "algebra",
      "math"
    ],
    "title": "Compound Interest"
  },
  {
    "_id": "DG2HLRqxFXxbaEDX4",
    "difficulty": 1.0786813186813187,
    "language": "python3",
    "summary": "Write a function that takes a list of elements and returns only the integers.\n\nExamples\nreturnonlyinteger([9, 2, \"space\", \"car\", \"lion\", 16]) ➞ [9, 2, 16]\n\nreturnonlyinteger([\"hello\", 81, \"basketball\", 123, \"fox\"]) ➞ [81, 123]\n\nreturnonlyinteger([10, \"121\", 56, 20, \"car\", 3, \"lion\"]) ➞ [10, 56, 20, 3]\n\nreturnonlyinteger([\"String\",  True,  3.3,  1]) ➞ [1]\n\nNote",
    "tags": [
      "arrays",
      "sorting",
      "loops",
      "language_fundamentals"
    ],
    "title": "Return Only the Integer"
  },
  {
    "_id": "PwGFjiSG3kXzp8rjw",
    "difficulty": 1.0787075393537697,
    "language": "python3",
    "summary": "Write a function that returns the number of users in a chatroom based on the following rules:\n\nIf there is no one, return \"no one online\".\nIf there is 1 person, return \"user1 online\".\nIf there are 2 people, return user1 and user2 online\".\nIf there are n>2 people, return the first two names and add \"and n-2 more online\".\n\nFor example, if there are 5 users, retu",
    "tags": [
      "arrays",
      "control_flow"
    ],
    "title": "Chat Room Status"
  },
  {
    "_id": "X3pz4ccSx2k7HikBL",
    "difficulty": 1.07871198568873,
    "language": "python3",
    "summary": "Wild Roger is participating in a Western Showdown, meaning he has to draw (pull out and shoot) his gun faster than his opponent in a gun standoff.\n\nGiven two strings,p1 and p2, return which person drew their gun the fastest. If both are drawn at the same time, return \"tie\".\n\nExamples\nshowdown(\n  \"   Bang!        \",\n  \"        Bang!   \"\n) ➞ \"p1\"\n\np1 draws his g",
    "tags": [
      "strings",
      "conditions"
    ],
    "title": "Western Showdown"
  },
  {
    "_id": "vf4Htv8Cc7GPQAuTP",
    "difficulty": 1.0787172011661808,
    "language": "python3",
    "summary": "Create a function that takes three parameters where:\n\nx is the start of the range (inclusive).\ny is the end of the range (inclusive).\nn is the divisor to be checked against.\n\nReturn an ordered list with numbers in the range that are divisible by the third parameter n. Return an empty list if there are no numbers that are divisible by n.\n\nExamples\nlist_operatio",
    "tags": [
      "arrays",
      "numbers",
      "math"
    ],
    "title": "List Operation"
  },
  {
    "_id": "YzcnFjMEKQfyHAg6B",
    "difficulty": 1.078722190530519,
    "language": "python3",
    "summary": "Create a function that takes in two lists and returns True if the second list follows the first list by one element, and False otherwise. In other words, determine  if the second list is the first list shifted to the right by 1.\n\nExamples\nsimon_says([1, 2], [5, 1]) ➞ True\n\nsimon_says([1, 2], [5, 5]) ➞ False\n\nsimon_says([1, 2, 3, 4, 5], [0, 1, 2, 3, 4]) ➞ True",
    "tags": [
      "arrays",
      "validation",
      "games"
    ],
    "title": "Simon Says"
  },
  {
    "_id": "m9bcZKy4niMmsg3JX",
    "difficulty": 1.078729281767956,
    "language": "python3",
    "summary": "A group of friends have decided to start a secret society. The name will be the first letter of each of their names, sorted in alphabetical order.\n\nCreate a function that takes in a list of names and returns the name of the secret society.\n\nExamples\nsociety_name([\"Adam\", \"Sarah\", \"Malcolm\"]) ➞ \"AMS\"\n\nsociety_name([\"Harry\", \"Newt\", \"Luna\", \"Cho\"]) ➞ \"CHLN\"\n\nsoc",
    "tags": [
      "strings",
      "arrays"
    ],
    "title": "Secret Society"
  },
  {
    "_id": "vTGXrd5ntYRk3t6Ma",
    "difficulty": 1.0787309048178613,
    "language": "python3",
    "summary": "An isogram is a word that has no repeating letters, consecutive or nonconsecutive. Create a function that takes a string and returns either True or False depending on whether or not it's an \"isogram\".\n\nExamples\nis_isogram(\"Algorism\") ➞ True\n\nis_isogram(\"PasSword\") ➞ False\nNot case sensitive.\n\nis_isogram(\"Consecutive\") ➞ False\n\nNotes\nIgnore letter case (should",
    "tags": [
      "strings",
      "validation",
      "loops"
    ],
    "title": "Is the Word an Isogram?"
  },
  {
    "_id": "EFwDXErjDywXp56WG",
    "difficulty": 1.0787490580256216,
    "language": "python3",
    "summary": "Create a function that takes a string and returns True or False, depending on whether the characters are in order or not.\n\nExamples\nisinorder(\"abc\") ➞ True\n\nisinorder(\"edabit\") ➞ False\n\nisinorder(\"123\") ➞ True\n\nisinorder(\"xyzz\") ➞ True\n\nNotes\nYou don't have to handle empty strings.",
    "tags": [
      "logic",
      "strings",
      "validation"
    ],
    "title": "Is the String in Order?"
  },
  {
    "_id": "NZwFY7HyeBTM25guM",
    "difficulty": 1.0787492762015054,
    "language": "python3",
    "summary": "Create a function to convert a list of percentages to their decimal equivalents.\n\nExamples\nconverttodecimal([\"1%\", \"2%\", \"3%\"]) ➞ [0.01, 0.02, 0.03]\n\nconverttodecimal([\"45%\", \"32%\", \"97%\", \"33%\"]) ➞ [0.45, 0.32, 0.97, 0.33]\n\nconverttodecimal([\"33%\", \"98.1%\", \"56.44%\", \"100%\"]) ➞ [0.33, 0.981, 0.5644, 1]\n\nNotes\nN/A",
    "tags": [
      "strings",
      "numbers"
    ],
    "title": "Convert to Decimal Notation"
  },
  {
    "_id": "EZMCpHaNFg2Yfsnxx",
    "difficulty": 1.0787537184906841,
    "language": "python3",
    "summary": "Given a list of numbers, write a function that returns a list that...\n\nHas all duplicate elements removed.\nIs sorted from least to greatest value.\n\nExamples\nunique_sort([1, 2, 4, 3]) ➞ [1, 2, 3, 4]\n\nunique_sort([1, 4, 4, 4, 4, 4, 3, 2, 1, 2]) ➞ [1, 2, 3, 4]\n\nunique_sort([6, 7, 3, 2, 1]) ➞ [1, 2, 3, 6, 7]\n\nNotes\nN/A",
    "tags": [
      "arrays",
      "data_structures",
      "sorting",
      "numbers",
      "loops"
    ],
    "title": "Purge and Organize"
  },
  {
    "_id": "zqMREZ2MQd9M5jNfM",
    "difficulty": 1.0787576261785912,
    "language": "python3",
    "summary": "Create a function that takes a number as an argument and returns True or False depending on whether the number is symmetrical or not. A number is symmetrical when it is the same as its reverse.\n\nExamples\nis_symmetrical(7227) ➞ True\n\nis_symmetrical(12567) ➞ False\n\nis_symmetrical(44444444) ➞ True\n\nis_symmetrical(9939) ➞ False\n\nis_symmetrical(1112111) ➞ True\n\nNot",
    "tags": [
      "conditions",
      "numbers",
      "validation"
    ],
    "title": "Is the Number Symmetrical?"
  },
  {
    "_id": "QiPr3M5tsqfsbYcCQ",
    "difficulty": 1.0787671232876712,
    "language": "python3",
    "summary": "Create a function that squares every digit of a number.\n\nExamples\nsquare_digits(9119) ➞ 811181\n\nsquare_digits(2483) ➞ 416649\n\nsquare_digits(3212) ➞ 9414\n\nNotes\nThe function receives an integer and must return an integer.",
    "tags": [
      "numbers",
      "algorithms",
      "math",
      "language_fundamentals"
    ],
    "title": "Square Every Digit"
  },
  {
    "_id": "TcJXTPJBsfJ2Wgkk4",
    "difficulty": 1.0787671232876712,
    "language": "python3",
    "summary": "A salesman has a number of cities to visit. They want to calculate the total number of possible paths they could take, visiting each city once before returning home. Return the total number of possible paths a salesman can travel, given n cities.\n\nIf we have cities A, B and C, possible paths would be:\n\nA -> B -> C\nA -> C -> B\nB -> A -> C\nB -> C -> A\nC -> B ->",
    "tags": [
      "recursion",
      "algorithms",
      "math",
      "logic"
    ],
    "title": "Travelling Salesman Problem"
  },
  {
    "_id": "t2WH2HdrQhCcJrezL",
    "difficulty": 1.0787766450417053,
    "language": "python3",
    "summary": "Create a function that returns the list of numbers from a given range. But for multiples of three, return “Eda” instead of the number and for the multiples of five, return “Bit”. For numbers which are multiples of both three and five, return “EdaBit”.\n\nExamples\neda_bit(0, 10) ➞ [\"EdaBit\", 1, 2, \"Eda\", 4, \"Bit\", \"Eda\", 7, 8, \"Eda\", \"Bit\" ]\n\neda_bit(14, 20) ➞ [1",
    "tags": [
      "algorithms",
      "math"
    ],
    "title": "\"EdaBit\" Challenge"
  },
  {
    "_id": "QEDPxbfHjvWXQQtpH",
    "difficulty": 1.0788072417465389,
    "language": "python3",
    "summary": "Create a function that returns the number of palindrome numbers in a specified range (inclusive).\n\nFor example, between 8 and 34, there are 5 palindromes: 8, 9, 11, 22 and 33. Between 1550 and 1552 there is exactly one palindrome: 1551.\n\nExamples\ncount_palindromes(1, 10) ➞ 9\n\ncount_palindromes(555, 556) ➞ 1\n\ncount_palindromes(878, 898) ➞ 3\n\nNotes\nSingle-digit",
    "tags": [
      "strings",
      "control_flow",
      "numbers"
    ],
    "title": "Count Palindrome Numbers in a Range"
  },
  {
    "_id": "hFNhDGNt8CNjSNnG9",
    "difficulty": 1.0788232028864835,
    "language": "python3",
    "summary": "A set is a collection of unique items. A set can be formed from a list from removing all duplicate items.\n\n[1, 3, 3, 5, 5, 5]\noriginal list\n\n[1, 3, 5]\noriginal list transformed into a set\n\nCreate a function that sorts a list and removes all duplicate items from it.\n\nExamples\nsetify([1, 3, 3, 5, 5]) ➞ [1, 3, 5]\n\nsetify([4, 4, 4, 4]) ➞ [4]\n\nsetify([5, 7, 8, 9, 1",
    "tags": [
      "arrays",
      "loops"
    ],
    "title": "Transform into a List with No Duplicates"
  },
  {
    "_id": "HvkPdhijquecKASdF",
    "difficulty": 1.0788667687595712,
    "language": "python3",
    "summary": "Create a function that takes a dictionary of student names and returns a list of student names in alphabetical order.\n\nExamples\ngetstudentnames({\n  \"Student 1\" : \"Steve\",\n  \"Student 2\" : \"Becky\",\n  \"Student 3\" : \"John\"\n}) ➞ [\"Becky\", \"John\", \"Steve\"]\n\nNotes\nDon't forget to return your result.\nIf you get stuck on a challenge, find help in the Resources tab.\nIf",
    "tags": [
      "arrays",
      "objects",
      "data_structures",
      "loops"
    ],
    "title": "Get Student Names"
  },
  {
    "_id": "SKorutJdWGBzXJDRt",
    "difficulty": 1.0788732394366196,
    "language": "python3",
    "summary": "In this exercise you will have to:\n\nTake a list of names.\nAdd \"Hello\" to every name.\nMake one big string with all greetings.\n\nThe solution should be one string with a comma in between every \"Hello (Name)\".\n\nExamples\ngreet_people([\"Joe\"]) ➞ \"Hello Joe\"\n\ngreet_people([\"Angela\", \"Joe\"]) ➞ \"Hello Angela, Hello Joe\"\n\ngreet_people([\"Frank\", \"Angela\", \"Joe\"]) ➞ \"Hell",
    "tags": [
      "loops",
      "strings",
      "arrays"
    ],
    "title": "Say Hello to Guests"
  },
  {
    "_id": "tNFTY9ggpTkeHvBaN",
    "difficulty": 1.078875171467764,
    "language": "python3",
    "summary": "Given a list of boxes, create a function that returns the total volume of all those boxes combined together. A box is represented by a list with three elements: length, width and height.\n\nFor instance, total_volume([2, 3, 2], [6, 6, 7], [1, 2, 1]) should return 266 since  (2 x 3 x 2) + (6 x 6 x 7) + (1 x 2 x 1) = 12 + 252 + 2 = 266.\n\nExamples\ntotal_volume([4, ",
    "tags": [
      "arrays",
      "math",
      "geometry"
    ],
    "title": "Total Volume of All Boxes"
  },
  {
    "_id": "BZ4mMcEz3aqosEtbC",
    "difficulty": 1.078906652913873,
    "language": "python3",
    "summary": "Create a function that returns the mean of all digits.\n\nExamples\nmean(42) ➞ 3\n\nmean(12345) ➞ 3\n\nmean(666) ➞ 6\n\nNotes\nThe mean of all digits is the sum of digits / how many digits there are (e.g. mean of digits in 512 is (5+1+2)/3(number of digits) = 8/3=2).\nThe mean will always be an integer.",
    "tags": [
      "loops",
      "logic",
      "algorithms",
      "math"
    ],
    "title": "Find the Mean of All Digits"
  },
  {
    "_id": "DQy6FL26FeNDecqNr",
    "difficulty": 1.0789224952741021,
    "language": "python3",
    "summary": "You're in the midst of creating a typing game.\n\nCreate a function that takes in two lists: the list of user-typed words, and the list of correctly-typed words and outputs a list containing 1s (correctly-typed words) and -1s (incorrectly-typed words).\nInputs:\nUser-typed: [\"cat\", \"blue\", \"skt\", \"umbrells\", \"paddy\"]\nCorrect: [\"cat\", \"blue\", \"sky\", \"umbrella\", \"pa",
    "tags": [
      "arrays",
      "loops",
      "games"
    ],
    "title": "Typing Game"
  },
  {
    "_id": "MvgCxPkSgtQ8hQjwx",
    "difficulty": 1.0789367700362464,
    "language": "python3",
    "summary": "Create a function that takes a string and returns a new string with all vowels removed.\n\nExamples\nremove_vowels(\"I have never seen a thin person drinking Diet Coke.\")\n➞ \" hv nvr sn  thn prsn drnkng Dt Ck.\"\n\nremove_vowels(\"We're gonna build a wall!\")\n➞ \"W'r gnn bld  wll!\"\n\nremove_vowels(\"Happy Thanksgiving to all--even the haters and losers!\")\n➞ \"Hppy Thnksgvng",
    "tags": [
      "formatting",
      "regex",
      "strings"
    ],
    "title": "Remove Every Vowel from a String"
  },
  {
    "_id": "TiqTew3PcofZgdbR4",
    "difficulty": 1.0789855072463768,
    "language": "python3",
    "summary": "A decimal number can be represented as a sequence of bits. To illustrate:\n\n6 = 00000110\n23 = 00010111\n\nFrom the bitwise representation of numbers, we can calculate the bitwise AND, bitwise OR and bitwise XOR. Using the example above:\n\nbitwise_and(6, 23) ➞ 00000110\n\nbitwise_or(6, 23) ➞ 00010111\n\nbitwise_xor(6, 23) ➞ 00010001\n\nWrite three functions to calculate",
    "tags": [
      "language_fundamentals",
      "logic",
      "bit_operations"
    ],
    "title": "Bitwise Operations"
  },
  {
    "_id": "58DYAThA2dxnAsMpL",
    "difficulty": 1.0789889415481833,
    "language": "python3",
    "summary": "Create a function which returns a list of booleans, from a given number. Iterating through the number one digit at a time, append True if the digit is 1 and False if it is 0.\n\nExamples\ninteger_boolean(\"100101\") ➞ [True, False, False, True, False, True]\n\ninteger_boolean(\"10\") ➞ [True, False]\n\ninteger_boolean(\"001\") ➞ [False, False, True]\n\nNotes\nExpect numbers w",
    "tags": [
      "data_structures",
      "strings",
      "arrays",
      "loops"
    ],
    "title": "True Ones, False Zeros"
  },
  {
    "_id": "763oGpb5JvctX5tAc",
    "difficulty": 1.0789946140035906,
    "language": "python3",
    "summary": "Create a function that takes two strings and returns either True or False depending on whether they're anagrams or not.\n\nExamples\nis_anagram(\"cristian\", \"Cristina\") ➞ True\n\nis_anagram(\"Dave Barry\", \"Ray Adverb\") ➞ True\n\nis_anagram(\"Nope\", \"Note\") ➞ False\n\nNotes\nShould be case insensitive.",
    "tags": [
      "strings",
      "math",
      "validation",
      "interview"
    ],
    "title": "Check for Anagrams"
  },
  {
    "_id": "qoTaJb8w9GwmqqGzq",
    "difficulty": 1.0790251107828657,
    "language": "python3",
    "summary": "Create a function that returns True if the first list is a subset of the second. Return False otherwise.\n\nExamples\nis_subset([3, 2, 5], [5, 3, 7, 9, 2]) ➞ True\n\nis_subset([8, 9], [7, 1, 9, 8, 4, 5, 6]) ➞ True\n\nis_subset([1, 2], [3, 5, 9, 1]) ➞ False\n\nNotes\nBoth lists will contain only unique values.",
    "tags": [
      "arrays",
      "loops",
      "validation"
    ],
    "title": "Is One List a Subset of Another?"
  },
  {
    "_id": "3ex9eCDEBqdxvfQvD",
    "difficulty": 1.0790378006872852,
    "language": "python3",
    "summary": "Check the principles of minimalist code in the [intro to the first challenge] (https://edabit.com/challenge/2XLjgZhmACph76Pkr).\n\nIn the Code tab you will find a code that is missing a single character in order to pass the tests. However, your goal is to submit a function as minimalist as possible. Use the tips in the tips section below.\n\nWrite a function that",
    "tags": [
      "logic",
      "language_fundamentals",
      "conditions"
    ],
    "title": "Minimal VI: Ternary Operator"
  },
  {
    "_id": "Ay9wPrqRJnBmvbFmi",
    "difficulty": 1.0790378006872852,
    "language": "python3",
    "summary": "Given two integers a and b, return how many times a can be halved while still being greater than b.\n\nExamples\nhalve_count(1324, 98) ➞ 3\n(1324 -> 662 -> 331 -> 165.5)\n\nhalve_count(624, 8) ➞ 6\n(624 -> 312 -> 156 -> 78 -> 39 -> 19.5 -> 9.75)\n\nhalve_count(1000, 3) ➞ 8\n(1000 -> 500 -> 250 -> 125 -> 62.5 -> 31.25 -> 15.625 -> 7.8125 -> 3.90625)\n\nNotes\nInteger a can",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "Halve and Halve Again"
  },
  {
    "_id": "TApvBKg2WiAXPnwLS",
    "difficulty": 1.0790774299835255,
    "language": "python3",
    "summary": "Given an unsorted list, create a function that returns the nth smallest integer (the smallest integer is the first smallest, the second smallest integer is the second smallest, etc).\n\nExamples\nnth_smallest([1, 3, 5, 7], 1) ➞ 1\n\nnth_smallest([1, 3, 5, 7], 3) ➞ 5\n\nnth_smallest([1, 3, 5, 7], 5) ➞ None\n\nnth_smallest([7, 3, 5, 1], 2) ➞ 3\n\nNotes\nn will always be >=",
    "tags": [
      "arrays",
      "sorting",
      "language_fundamentals",
      "logic"
    ],
    "title": "Nth Smallest Integer"
  },
  {
    "_id": "cH5ce3f4QgnreDW4v",
    "difficulty": 1.0791015625,
    "language": "python3",
    "summary": "Given an list of scrabble tiles (as dictionaries), create a function that outputs the maximum possible score a player can achieve by summing up the total number of points for all the tiles in their hand. Each hand contains 7 scrabble tiles.\n\nHere's an example hand:\n[\n  { \"tile\": \"N\", \"score\": 1 },\n  { \"tile\": \"K\", \"score\": 5 },\n  { \"tile\": \"Z\", \"score\": 10 },",
    "tags": [
      "objects",
      "games",
      "loops",
      "math"
    ],
    "title": "Scrabble Hand"
  },
  {
    "_id": "5eFNKcyZnuj2Bgh7q",
    "difficulty": 1.0791111111111111,
    "language": "python3",
    "summary": "A number n is automorphic if n^2 ends in n.\n\nFor example: n=5, n^2=25\n\nCreate a function that takes a number and returns True if the number is automorphic, False if it isn't.\n\nExamples\nis_automorphic(5) ➞ True\n\nis_automorphic(8) ➞ False\n\nis_automorphic(76) ➞ True\n\nNotes\nN/A",
    "tags": [
      "algebra",
      "validation",
      "numbers"
    ],
    "title": "Automorphic Numbers"
  },
  {
    "_id": "xW6X8cQSHrcjpTXsn",
    "difficulty": 1.0791284403669725,
    "language": "python3",
    "summary": "Write a function that returns the lexicographically first and lexicographically last rearrangements of a lowercase string. Output the results in the following manner:\n\nfirstandlast(string) ➞ [first, last]\n\nExamples\nfirstandlast(\"marmite\") ➞ [\"aeimmrt\", \"trmmiea\"]\n\nfirstandlast(\"bench\") ➞ [\"bcehn\", \"nhecb\"]\n\nfirstandlast(\"scoop\") ➞ [\"coops\", \"spooc\"]\n\nNotes\nLex",
    "tags": [
      "strings",
      "sorting",
      "arrays"
    ],
    "title": "Lexicographically First and Last"
  },
  {
    "_id": "T7DpLzEkAkcxKijzR",
    "difficulty": 1.079162656400385,
    "language": "python3",
    "summary": "A typical car can hold four passengers and one driver, allowing five people to travel around. Given n number of people, return how many cars are needed to seat everyone comfortably.\n\nExamples\ncars_needed(5) ➞ 1\n\ncars_needed(11) ➞ 3\n\ncars_needed(0) ➞ 0\n\nNotes\nIt's likely there will be a few people left over and some cars won't be filled to max capacity.",
    "tags": [
      "numbers",
      "math",
      "algorithms"
    ],
    "title": "Four Passengers and a Driver"
  },
  {
    "_id": "jzCGNwLpmrHQKmtyJ",
    "difficulty": 1.0792207792207793,
    "language": "python3",
    "summary": "Create a function that takes a number as input and returns True if the sum of its digits has the same parity as the entire number. Otherwise, return False.\n\nExamples\nparity_analysis(243) ➞ True\n243 is odd and so is 9 (2 + 4 + 3)\n\nparity_analysis(12) ➞ False\n12 is even but 3 is odd (1 + 2)\n\nparity_analysis(3) ➞ True\n3 is odd and 3 is odd and 3 is odd (3)\n\nNotes",
    "tags": [
      "conditions",
      "language_fundamentals",
      "validation"
    ],
    "title": "Same Parity?"
  },
  {
    "_id": "HSHHkdRYXfgfZSqri",
    "difficulty": 1.0792393026941363,
    "language": "python3",
    "summary": "Create a function that takes damage and speed (attacks per second) and returns the amount of damage after a given time.\n\nExamples\ndamage(40, 5, \"second\") ➞ 200\n\ndamage(100, 1, \"minute\") ➞ 6000\n\ndamage(1, 100, \"hour\") ➞ 720000\n\nNotes\nReturn \"invalid\" if damage or speed is negative.",
    "tags": [
      "math",
      "conditions"
    ],
    "title": "Calculating Damage"
  },
  {
    "_id": "82BssjYWrugBjRsux",
    "difficulty": 1.079243353783231,
    "language": "python3",
    "summary": "Return the sum of all items in a list, where each item is multiplied by its index (zero-based). For empty lists, return 0.\n\nExamples\nindex_multiplier([1, 2, 3, 4, 5]) ➞ 40\n(10 + 21 + 32 + 43 + 5*4)\n\nindex_multiplier([-3, 0, 8, -6]) ➞ -2\n(-30 + 01 + 82 + -63)\n\nNotes\nAll items in the list will be integers.",
    "tags": [
      "arrays",
      "numbers"
    ],
    "title": "Index Multiplier"
  },
  {
    "_id": "ASpHKyuSXZL3MjL92",
    "difficulty": 1.0792474344355758,
    "language": "python3",
    "summary": "Create a function that takes an integer and returns a list from 1 to the given number, where:\n\nIf the number can be divided evenly by 4, amplify it by 10 (i.e. return 10 times the number).\nIf the number cannot be divided evenly by 4, simply return the number.\n\nExamples\namplify(4) ➞ [1, 2, 3, 40]\n\namplify(3) ➞ [1, 2, 3]\n\namplify(25) ➞ [1, 2, 3, 40, 5, 6, 7, 80,",
    "tags": [
      "algebra",
      "arrays",
      "math",
      "loops"
    ],
    "title": "Amplify the Multiples of Four"
  },
  {
    "_id": "a55ygB8Bwj9tx6Hym",
    "difficulty": 1.0792540792540792,
    "language": "python3",
    "summary": "Return the smallest number of steps it takes to convert a string entirely into uppercase or entirely into lower case, whichever takes the fewest number of steps. A step consists of changing one character from lower to upper case, or vice versa.\n\nExamples\nstepstoconvert(\"abC\") ➞ 1\n\"abC\" converted to \"abc\" in 1 step\n\nstepstoconvert(\"abCBA\") ➞ 2\n\"abCBA\" converted",
    "tags": [
      "strings",
      "loops"
    ],
    "title": "Upper or Lower Case"
  },
  {
    "_id": "GaXXfmpM72yCHag9T",
    "difficulty": 1.0792707094728498,
    "language": "python3",
    "summary": "Create a function that takes a list of numbers and returns the number that's unique.\n\nExamples\nunique([3, 3, 3, 7, 3, 3]) ➞ 7\n\nunique([0, 0, 0.77, 0, 0]) ➞ 0.77\n\nunique([0, 1, 1, 1, 1, 1, 1, 1]) ➞ 0\n\nNotes\nTest cases will always have exactly one unique number while all others are the same.",
    "tags": [
      "numbers",
      "arrays",
      "algorithms"
    ],
    "title": "Which Number Is Not like the Others?"
  },
  {
    "_id": "nC7iHBbN8FEPy2EJ2",
    "difficulty": 1.0793378995433789,
    "language": "python3",
    "summary": "Your task is to create a Circle constructor that creates a circle  with a radius provided by an argument. The circles constructed must have two getters getArea() (PIr^2) and getPerimeter() (2PI*r) which give both respective areas and perimeter (circumference).\n\nFor help with this class, I have provided you with a Rectangle constructor which you can use as a ba",
    "tags": [
      "objects",
      "classes",
      "math",
      "geometry"
    ],
    "title": "Make a Circle with OOP"
  },
  {
    "_id": "ncLp4ZXvz4x4oEHYh",
    "difficulty": 1.0793388429752067,
    "language": "python3",
    "summary": "Given two unique integer lists a and b, and an integer target value v, create a function to determine whether there is a pair of numbers that add up to the target value v, where one number comes from one list a and the other comes from the second list b.\n\nReturn True if there is a pair that adds up to the target value and False otherwise.\n\nExamples\nsumoftwo([1",
    "tags": [
      "arrays",
      "validation",
      "numbers"
    ],
    "title": "Determine If Two Numbers Add up to a Target Value"
  },
  {
    "_id": "b2xiGxPe2otyCtT2o",
    "difficulty": 1.079343365253078,
    "language": "python3",
    "summary": "Imagine a messaging device with only one button. For the letter A, you press the button one time, for E, you press it five times, for G, it's pressed seven times, etc, etc.\n\nWrite a function that takes a string (the message) and returns the total number of times the button is pressed.\n\nExamples\nhowmanytimes(\"abde\") ➞ 12\n\nhowmanytimes(\"azy\") ➞ 52\n\nhowmanytimes(",
    "tags": [
      "logic",
      "math",
      "loops"
    ],
    "title": "One Button Messaging Device"
  },
  {
    "_id": "93o6y6WKFpQKoDg4T",
    "difficulty": 1.079348211122919,
    "language": "python3",
    "summary": "Create a function that takes a list of strings and return a list, sorted from shortest to longest.\n\nExamples\nsortbylength([\"Google\", \"Apple\", \"Microsoft\"])\n➞ [\"Apple\", \"Google\", \"Microsoft\"]\n\nsortbylength([\"Leonardo\", \"Michelangelo\", \"Raphael\", \"Donatello\"])\n➞ [\"Raphael\", \"Leonardo\", \"Donatello\", \"Michelangelo\"]\n\nsortbylength([\"Turing\", \"Einstein\", \"Jung\"])\n➞",
    "tags": [
      "arrays",
      "sorting",
      "algorithms"
    ],
    "title": "Sort a List by String Length"
  },
  {
    "_id": "ZCaMMqDuJBi6NZgYF",
    "difficulty": 1.0793650793650793,
    "language": "python3",
    "summary": "Write a program that takes a temperature input in celsius and converts it to Fahrenheit and Kelvin. Return the converted temperature values in a list.\n\nThe formula to calculate the temperature in Fahrenheit from Celsius is:\n\nF = C*9/5 +32\n\nThe formula to calculate the temperature in Kelvin from Celsius is:\n\nK = C + 273.15\n\nExamples\ntemp_conversion(0) ➞ [32, 27",
    "tags": [
      "numbers",
      "math"
    ],
    "title": "Temperature Conversion"
  },
  {
    "_id": "f6LeKowjWQHm5637D",
    "difficulty": 1.0793871866295264,
    "language": "python3",
    "summary": "Create a function that moves all capital letters to the front of a word.\n\nExamples\ncaptofront(\"hApPy\") ➞ \"APhpy\"\n\ncaptofront(\"moveMENT\") ➞ \"MENTmove\"\n\ncaptofront(\"shOrtCAKE\") ➞ \"OCAKEshrt\"\n\nNotes\nKeep the original relative order of the upper and lower case letters the same.",
    "tags": [
      "strings",
      "formatting",
      "regex"
    ],
    "title": "Move Capital Letters to the Front"
  },
  {
    "_id": "GBv4nB8SzkAnrM3B9",
    "difficulty": 1.0793878527020564,
    "language": "python3",
    "summary": "Create a function that counts the number of times a particular letter shows up in the word search.\n\nExamples\nletter_counter([\n  [\"D\", \"E\", \"Y\", \"H\", \"A\", \"D\"],\n  [\"C\", \"B\", \"Z\", \"Y\", \"J\", \"K\"],\n  [\"D\", \"B\", \"C\", \"A\", \"M\", \"N\"],\n  [\"F\", \"G\", \"G\", \"R\", \"S\", \"R\"],\n  [\"V\", \"X\", \"H\", \"A\", \"S\", \"S\"]\n], \"D\") ➞ 3\n\n\"D\" shows up 3 times: twice in the first row, once in",
    "tags": [
      "arrays",
      "higher_order_functions"
    ],
    "title": "Count Letters in a Word Search"
  },
  {
    "_id": "e8TFAMbTTaEr7JSgd",
    "difficulty": 1.0793878527020564,
    "language": "python3",
    "summary": "Write a function that takes a string as an argument and returns the left most digit in the string.\n\nExamples\nleft_digit(\"TrAdE2W1n95!\") ➞ 2\n\nleft_digit(\"V3r1ta$\") ➞ 3\n\nleft_digit(\"U//DertHe1nflu3nC3\") ➞ 1\n\nleft_digit(\"J@v@5cR1PT\") ➞ 5\n\nNotes\nEach string will have at least two numbers.",
    "tags": [
      "strings",
      "sorting",
      "numbers"
    ],
    "title": "Most Left Digit"
  },
  {
    "_id": "wPMgjmQMoCwm3G6mt",
    "difficulty": 1.0793918918918919,
    "language": "python3",
    "summary": "You are given a list of dates in the format Dec 11 and a month in the format Dec as arguments. Each date represents a video that was uploaded on that day. Return the number of uploads for a given month.\n\nExamples\nupload_count([\"Sept 22\", \"Sept 21\", \"Oct 15\"], \"Sept\") ➞ 2\n\nupload_count([\"Sept 22\", \"Sept 21\", \"Oct 15\"], \"Oct\") ➞ 1\n\nNotes\nIf you only pay attentio",
    "tags": [
      "data_structures",
      "loops",
      "strings"
    ],
    "title": "YouTube Upload Count"
  },
  {
    "_id": "vqMFpARj3DvELLDmZ",
    "difficulty": 1.079425113464448,
    "language": "python3",
    "summary": "Write a function that removes any non-letters from a string, returning a well-known film title.\n\nExamples\nletters_only(\"R!=:~0o0./c&}9k`60=y\") ➞ \"Rocky\"\n\nletters_only(\"^,]%4B|@56a![0{2m>b1&4i4\") ➞ \"Bambi\"\n\nletters_only(\"^U)6$22>8p).\") ➞ \"Up\"\n\nNotes\nSee the Resources section for more information on Python string methods.",
    "tags": [
      "strings",
      "regex",
      "formatting"
    ],
    "title": "Letters Only"
  },
  {
    "_id": "st8HBr2HMup6mD6z5",
    "difficulty": 1.0794334975369457,
    "language": "python3",
    "summary": "Create a function that calculates the profit margin given costprice and salesprice. Return the result as a percentage formated string, and rounded to one decimals. To calculate profit margin you subtract the cost from the sales price, then divide by salesprice.\n\nExamples\nprofit_margin(50, 50) ➞ \"0.0%\"\n\nprofit_margin(28, 39) ➞ \"28.2%\"\n\nprofit_margin(33, 84) ➞ \"",
    "tags": [
      "math",
      "formatting",
      "numbers",
      "strings"
    ],
    "title": "Profit Margin"
  },
  {
    "_id": "cx7eFvQBzjauLgwgZ",
    "difficulty": 1.079445727482679,
    "language": "python3",
    "summary": "A museum wants to get rid of some exhibitions. Katya, the interior architect, comes up with a plan to remove the most boring exhibitions. She gives them a rating, and removes the one with the lowest rating. Just as she finishes rating the exhibitions, she's called off to an important meeting. She asks you to write a program that tells her the ratings of the it",
    "tags": [
      "sorting",
      "arrays",
      "formatting",
      "numbers"
    ],
    "title": "The Museum of Incredibly DULL Things"
  },
  {
    "_id": "MojpPTZYQyN5L2i4a",
    "difficulty": 1.0794633642930858,
    "language": "python3",
    "summary": "You work in a toy car workshop, and your job is to build toy cars from a collection of parts. Each toy car needs 4 wheels, 1 car body, and 2 figures of people to be placed inside. Given the total number of wheels, car bodies and figures available, how many complete toy cars can you make?\n\nExamples\ncars(2, 48, 76) ➞ 0\n2 wheels, 48 car bodies, 76 figures\n\ncars(4",
    "tags": [
      "math"
    ],
    "title": "Toy Car Workshop"
  },
  {
    "_id": "Njeob2pNQYsCd69fN",
    "difficulty": 1.0794701986754967,
    "language": "python3",
    "summary": "I'm trying to watch some lectures to study for my next exam but I keep getting distracted by meme compilations, vine compilations, anime, and more on my favorite video platform.\n\nYour job is to help me create a function that takes a string and checks to see if it contains the following words or phrases:\n\n\"anime\"\n\"meme\"\n\"vines\"\n\"roasts\"\n\"Danny DeVito\"\n\nIf it do",
    "tags": [
      "strings",
      "conditions",
      "loops"
    ],
    "title": "Hot Pics of Danny DeVito!"
  },
  {
    "_id": "b8wRDMWgMZTN2nmfx",
    "difficulty": 1.0794994479205005,
    "language": "python3",
    "summary": "Create a function that takes three integer arguments (a, b, c)  and returns the number of equal values.\n\nExamples\nequal(3, 4, 3) ➞ 2\n\nequal(1, 1, 1) ➞ 3\n\nequal(3, 4, 1) ➞ 0\n\nNotes\nYour function must return 0, 2 or 3.",
    "tags": [
      "algorithms",
      "conditions",
      "numbers"
    ],
    "title": "Equality of 3 Values"
  },
  {
    "_id": "KT8ApJ2EJcLz4K3t2",
    "difficulty": 1.0795847750865053,
    "language": "python3",
    "summary": "For this challenge, you are supposed to find the sum of the digits of a two-digit number. Sounds easy, right? But for this challenge, I expect you to find the sum of the digits mathematically.\n\nSure, you can convert the number into a string and then manipulate it so it returns the sum of the digits, but the point of this challenge is to see if you know how to",
    "tags": [
      "algebra",
      "logic",
      "math",
      "numbers"
    ],
    "title": "Sum of Two Digit Numbers"
  },
  {
    "_id": "pihNcNQXiYHSRW8Cv",
    "difficulty": 1.0796178343949046,
    "language": "python3",
    "summary": "Create a function that returns a list of strings sorted by length in ascending order.\n\nExamples\nsortbylength([\"a\", \"ccc\", \"dddd\", \"bb\"]) ➞ [\"a\", \"bb\", \"ccc\", \"dddd\"]\n\nsortbylength([\"apple\", \"pie\", \"shortcake\"]) ➞ [\"pie\", \"apple\", \"shortcake\"]\n\nsortbylength([\"may\", \"april\", \"september\", \"august\"]) ➞ [\"may\", \"april\", \"august\", \"september\"]\n\nsortbylength([]) ➞ []",
    "tags": [
      "arrays",
      "sorting",
      "language_fundamentals"
    ],
    "title": "Sort by String Length"
  },
  {
    "_id": "sMtSzctTWs766rRL8",
    "difficulty": 1.0796178343949046,
    "language": "python3",
    "summary": "You will be implementing a basic case of the map-reduce pattern in programming. Given a vector stored as a list of integers, find the magnitude of the vector. Use the standard distance formula for n-dimensional Cartesian coordinates.\n\nExamples\nmagnitude([3, 4]) ➞ 5\n\nmagnitude([0, 0, -10]) ➞ 10\n\nmagnitude([]) ➞ 0\n\nmagnitude([2, 3, 6, 1, 8] ) ➞ 10.67707825203131",
    "tags": [
      "functional_programming",
      "higher_order_functions",
      "math",
      "arrays"
    ],
    "title": "An Introduction to the Map-Reduce Pattern"
  },
  {
    "_id": "pxSX4ywwGLFwXDRGy",
    "difficulty": 1.0796296296296297,
    "language": "python3",
    "summary": "Remove enemies from the list of people, even if the enemy shows up twice.\n\nExamples\nremove_enemies([\"Fred\"], []) ➞ [\"Fred\"]\n\nremove_enemies([\"Adam\", \"Emmy\", \"Tanya\", \"Emmy\"], [\"Emmy\"]) ➞ [\"Adam\", \"Tanya\"]\n\nremove_enemies([\"John\", \"Emily\", \"Steve\", \"Sam\"], [\"Sam\", \"John\"]) ➞ [\"Emily\", \"Steve\"]\n\nNotes\nAll names to be removed will be in the enemies list; simply r",
    "tags": [
      "arrays",
      "language_fundamentals"
    ],
    "title": "Removing Enemies"
  },
  {
    "_id": "pimnBHXJNtQffq4Cf",
    "difficulty": 1.079642248722317,
    "language": "python3",
    "summary": "Write a function that creates a dictionary with each (key, value) pair being the (lower case, upper case) versions of a letter, respectively.\n\nExamples\nmapping([\"p\", \"s\"]) ➞ { \"p\": \"P\", \"s\": \"S\" }\n\nmapping([\"a\", \"b\", \"c\"]) ➞ { \"a\": \"A\", \"b\": \"B\", \"c\": \"C\" }\n\nmapping([\"a\", \"v\", \"y\", \"z\"]) ➞ { \"a\": \"A\", \"v\": \"V\", \"y\": \"Y\", \"z\": \"Z\" }\n\nNotes\nN/A",
    "tags": [
      "objects",
      "arrays",
      "language_fundamentals"
    ],
    "title": "Lowercase and Uppercase Map"
  },
  {
    "_id": "WrpwKSu9XiiCEEDGC",
    "difficulty": 1.079676674364896,
    "language": "python3",
    "summary": "Write a function that returns True if the binary string can be rearranged to form a string of alternating 0s and 1s.\n\nExamples\ncan_alternate(\"0001111\") ➞ True\nCan make: \"1010101\"\n\ncan_alternate(\"01001\") ➞ True\nCan make: \"01010\"\n\ncan_alternate(\"010001\") ➞ False\n\ncan_alternate(\"1111\") ➞ False\n\nNotes\nNo substring of the output may contain more than one consecutiv",
    "tags": [
      "strings",
      "validation",
      "logic"
    ],
    "title": "Alternating Ones and Zeroes"
  },
  {
    "_id": "Kh7Bm9X7Q4rYB8uT7",
    "difficulty": 1.079685746352413,
    "language": "python3",
    "summary": "Create a function which validates whether a 3 character string is a vowel sandwich. In order to have a valid sandwich, the string must satisfy the following rules:\nThe first and last characters must be a consonant.\nThe character in the middle must be a vowel.\n\nExamples\nisvowelsandwich(\"cat\") ➞ True\n\nisvowelsandwich(\"ear\") ➞ False\n\nisvowelsandwich(\"bake\") ➞ Fal",
    "tags": [
      "strings",
      "language_fundamentals",
      "validation",
      "regex",
      "conditions"
    ],
    "title": "Vowel Sandwich"
  },
  {
    "_id": "53phFTw72XLmxJ7Jt",
    "difficulty": 1.0797101449275361,
    "language": "python3",
    "summary": "Mary wants to run a 25-mile marathon. When she attempts to sign up for the marathon, she notices the sign-up sheet doesn't directly state the marathon's length. Instead, the marathon's length is listed in small, different portions. Help Mary find out how long the marathon actually is.\n\nReturn True if the marathon is 25 miles long, otherwise, return False.\n\nExa",
    "tags": [
      "algebra",
      "arrays",
      "math",
      "validation"
    ],
    "title": "25-Mile Marathon"
  },
  {
    "_id": "p94KFBXAzJ3ZxmFmw",
    "difficulty": 1.0797153024911033,
    "language": "python3",
    "summary": "Create a function that takes a string as input and capitalizes a letter if its ASCII code is even and returns its lower case version if its ASCII code is odd.\n\nExamples\nascii_capitalize(\"to be or not to be!\") ➞ \"To Be oR NoT To Be!\"\n\nascii_capitalize(\"THE LITTLE MERMAID\") ➞ \"THe LiTTLe meRmaiD\"\n\nascii_capitalize(\"Oh what a beautiful morning.\") ➞ \"oH wHaT a Bea",
    "tags": [
      "strings",
      "higher_order_functions"
    ],
    "title": "Capitalize by ASCII"
  },
  {
    "_id": "QXrpKvEvJA2Yxj2fo",
    "difficulty": 1.0797280593325094,
    "language": "python3",
    "summary": "Create a function that returns the number of argument it was called with.\n\nExamples\nnum_args() ➞ 0\n\nnum_args(\"foo\") ➞ 1\n\nnum_args(\"foo\", \"bar\") ➞ 2\n\nnum_args(True, False) ➞ 2\n\nnum_args({}) ➞ 1\n\nNotes\nIf you get stuck on a challenge, find help in the Resources tab.\nIf you're really stuck, unlock solutions in the Solutions tab.",
    "tags": [
      "language_fundamentals",
      "functional_programming"
    ],
    "title": "Count the Arguments"
  },
  {
    "_id": "fDkAuAwR4PMWZwBKs",
    "difficulty": 1.0797656602073007,
    "language": "python3",
    "summary": "Write a function that searches a list of names (unsorted) for the name \"Bob\" and returns the location in the list. If Bob is not in the list, return -1.\n\nExamples\nfind_bob([\"Jimmy\", \"Layla\", \"Bob\"]) ➞ 2\n\nfind_bob([\"Bob\", \"Layla\", \"Kaitlyn\", \"Patricia\"]) ➞ 0\n\nfind_bob([\"Jimmy\", \"Layla\", \"James\"]) ➞ -1\n\nNotes\nAssume all names start with a capital letter and are",
    "tags": [
      "data_structures",
      "language_fundamentals",
      "arrays"
    ],
    "title": "Where is Bob!?!"
  },
  {
    "_id": "qtrWYen8ezSTGBA5n",
    "difficulty": 1.0797665369649805,
    "language": "python3",
    "summary": "Additional spaces have been added to a sentence. Return the correct sentence by removing them. All words should be separated by one space, and there should be no spaces at the beginning or end of the sentence.\n\nExamples\ncorrect_spacing(\"The film   starts       at      midnight. \")\n➞ \"The film starts at midnight.\"\n\ncorrect_spacing(\"The     waves were crashing",
    "tags": [
      "strings",
      "formatting"
    ],
    "title": "Fix the Spacing"
  },
  {
    "_id": "HBKAGJZ62JkCTgYX3",
    "difficulty": 1.0797912005965697,
    "language": "python3",
    "summary": "Write a function that retrieves the last n elements from a list.\n\nExamples\nlast([1, 2, 3, 4, 5], 1) ➞ [5]\n\nlast([4, 3, 9, 9, 7, 6], 3) ➞ [9, 7, 6]\n\nlast([1, 2, 3, 4, 5], 7) ➞ \"invalid\"\n\nlast([1, 2, 3, 4, 5], 0) ➞ []\n\nNotes\nReturn \"invalid\" if n exceeds the length of the list.\nReturn an empty list if n == 0.",
    "tags": [
      "arrays",
      "language_fundamentals"
    ],
    "title": "Retrieve the Last N Elements"
  },
  {
    "_id": "KKmM4ob5wwPwf8kgS",
    "difficulty": 1.0797940797940797,
    "language": "python3",
    "summary": "Create a function that returns the frequency distribution of a list. This function should return an object, where the keys are the unique elements and the values are the frequency in which those elements occur.\n\nExamples\nget_frequencies([\"A\", \"B\", \"A\", \"A\", \"A\"]) ➞ { \"A\" : 4, \"B\" : 1 }\n\nget_frequencies([1, 2, 3, 3, 2]) ➞ { 1: 1, 2: 2, 3: 2 }\n\nget_frequencies([",
    "tags": [
      "objects",
      "loops",
      "language_fundamentals"
    ],
    "title": "Frequency Distribution"
  },
  {
    "_id": "MbPpxYWMRihFeaNPB",
    "difficulty": 1.0798004987531171,
    "language": "python3",
    "summary": "Create a function that returns the sum of all even elements in a 2D matrix.\n\nExamples\nsumofevens([\n  [1, 0, 2],\n  [5, 5, 7],\n  [9, 4, 3]\n]) ➞ 6\n\n// 2 + 4 = 6\n\nsumofevens([\n  [1, 1],\n  [1, 1]\n]) ➞ 0\n\nsumofevens([\n  [42, 9],\n  [16, 8]\n]) ➞ 66\n\nsumofevens([\n  [],\n  [],\n  []\n]) ➞ 0\n\nNotes\nSubmatrices will be of equal length.\nReturn 0 if the 2D matrix only consists",
    "tags": [
      "arrays",
      "loops",
      "control_flow",
      "math"
    ],
    "title": "Sum of all Evens in a Matrix"
  },
  {
    "_id": "PGXeFPN6buQDXXwPm",
    "difficulty": 1.0798611111111112,
    "language": "python3",
    "summary": "Given a square matrix (i.e. same number of rows as columns), its trace is the sum of the entries in the main diagonal (i.e. the diagonal line from the top left to the bottom right).\n\nAs an example, for:\n\n[\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n]\n\n... the trace is 1 + 5 + 9 = 15.\n\nWrite a function that takes a square matrix and computes its trace.\n\nExamples\ntra",
    "tags": [
      "arrays",
      "math",
      "language_fundamentals"
    ],
    "title": "Trace That Matrix"
  },
  {
    "_id": "pHp9qkjY53JNTGCG4",
    "difficulty": 1.0798696006519968,
    "language": "python3",
    "summary": "Write a function that takes a year and returns its corresponding century.\n\nExamples\ncenturyfromyear(2005) ➞ 21\n\ncenturyfromyear(1950) ➞ 20\n\ncenturyfromyear(1900) ➞ 19\n\nNotes\nFor guidance on the year boundaries for each century:\nThe 19th century are the years from 1801 to 1900.\nThe 20th century are the years from 1901 to 2000.",
    "tags": [
      "algorithms",
      "dates",
      "math"
    ],
    "title": "Convert Year to Century"
  },
  {
    "_id": "D7HGFCXhomSGsFTLK",
    "difficulty": 1.0799045915324985,
    "language": "python3",
    "summary": "Create a function that converts two lists of x- and y- coordinates into a list of (x, y) coordinates.\n\nExamples\nconvert_cartesian([1, 5, 3, 3, 4], [5, 8, 9, 1, 0])\n➞ [[1, 5], [5, 8], [3, 9], [3, 1], [4, 0]]\n\nconvert_cartesian([9, 8, 3], [1, 1, 1])\n➞ [[9, 1], [8, 1], [3, 1]]\n\nNotes\nEach coordinate is a list, not a tuple.\nx and y arrays will always be the same l",
    "tags": [
      "arrays",
      "numbers"
    ],
    "title": "X and Y Coordinates"
  },
  {
    "_id": "r8jXYt5dQ3puspQfJ",
    "difficulty": 1.0799200799200799,
    "language": "python3",
    "summary": "Write a function that takes a string, breaks it up and returns it with vowels first, consonants second. For any character that's not a vowel (like special characters or spaces), treat them like consonants.\n\nExamples\nsplit(\"abcde\") ➞ \"aebcd\"\n\nsplit(\"Hello!\") ➞ \"eoHll!\"\n\nsplit(\"What's the time?\") ➞ \"aeieWht's th tm?\"\n\nNotes\nVowels are a, e, i, o, u.\nDefine a sep",
    "tags": [
      "control_flow",
      "conditions",
      "functional_programming",
      "regex"
    ],
    "title": "Split a String Based on Vowels and Consonants"
  },
  {
    "_id": "L4HM6uMHDCnepz5HK",
    "difficulty": 1.0799584631360333,
    "language": "python3",
    "summary": "Create a function that takes date  in the format yyyy/mm/dd as an input and returns \"Bonfire toffee\" if the date is October 31, else return \"toffee\".\n\nExamples\nhalloween(\"2013/10/31\") ➞ \"Bonfire toffee\"\n\nhalloween(\"2012/07/31\") ➞ \"toffee\"\n\nhalloween(\"2011/10/12\") ➞ \"toffee\"\n\nNotes\nN/A",
    "tags": [
      "strings",
      "numbers"
    ],
    "title": "Halloween Day"
  },
  {
    "_id": "KEz3TAQfh9WxSZMLH",
    "difficulty": 1.0801248699271593,
    "language": "python3",
    "summary": "Write a function that takes a string and calculates the number of letters and digits within it. Return the result in a dictionary.\n\nExamples\ncount_all(\"Hello World\") ➞ { \"LETTERS\":  10, \"DIGITS\": 0 }\n\ncount_all(\"H3ll0 Wor1d\") ➞ { \"LETTERS\":  7, \"DIGITS\": 3 }\n\ncount_all(\"149990\") ➞ { \"LETTERS\": 0, \"DIGITS\": 6 }\n\nNotes\nTests contain only alphanumeric characters.",
    "tags": [
      "conditions",
      "data_structures",
      "objects",
      "regex"
    ],
    "title": "Count the Letters and Digits"
  },
  {
    "_id": "MhQbon8XzsG3wJHdP",
    "difficulty": 1.0802005012531328,
    "language": "python3",
    "summary": "Create a function that takes a number a and finds the missing exponent x so that a when raised to the power of x is equal to b.\n\nExamples\nsolveforexp(4, 1024) ➞ 5\n\nsolveforexp(2, 1024) ➞ 10\n\nsolveforexp(9, 3486784401) ➞ 10\n\nNotes\na is raised to the power of what in order to equal b?",
    "tags": [
      "algorithms",
      "numbers",
      "math"
    ],
    "title": "Solving Exponential Equations With Logarithms"
  },
  {
    "_id": "L9nvCobbYyGgKpWi8",
    "difficulty": 1.080218778486782,
    "language": "python3",
    "summary": "Write two functions:\n\nto_list(), which converts a number to a list of its digits.\nto_number(), which converts a list of digits back to its number.\n\nExamples\nto_list(235) ➞ [2, 3, 5]\n\nto_list(0) ➞ [0]\n\nto_number([2, 3, 5]) ➞ 235\n\nto_number([0]) ➞ 0\n\nNotes\nAll test cases will be weakly positive numbers: >= 0",
    "tags": [
      "arrays",
      "numbers"
    ],
    "title": "Numbers to Arrays and Vice Versa"
  },
  {
    "_id": "Fw4fFSnTJfCsPBJ5u",
    "difficulty": 1.0802292263610316,
    "language": "python3",
    "summary": "Create a function which calculates how many numbers are missing from an ordered number line.\n\nhowmanymissing([1, 2, 3, 8, 9]) ➞ 4\n\nThe number line starts at 1 and ends at 9 (so the numbers 0 and 10 aren't missing from it).\nThe numbers missing from this line are 4, 5, 6, and 7.\n4 numbers are missing.\n\nExamples\nhowmanymissing([1, 3]) ➞ 1\n\nhowmanymissing([7, 10,",
    "tags": [
      "arrays",
      "numbers"
    ],
    "title": "One, Two, Skip a Few"
  },
  {
    "_id": "dEokmCfykvXgcJ3pi",
    "difficulty": 1.080316742081448,
    "language": "python3",
    "summary": "Write two functions:\n\nfirst_arg() should return the first parameter passed in.\nlast_arg() should return the last parameter passed in.\n\nExamples\nfirst_arg(1, 2, 3) ➞ 1\n\nlast_arg(1, 2, 3) ➞ 3\n\nfirst_arg(8) ➞ 8\n\nlast_arg(8) ➞ 8\n\nNotes\nReturn None if the function takes no parameters.\nIf the function only takes in one parameter, the firstarg and lastarg functions s",
    "tags": [
      "language_fundamentals"
    ],
    "title": "Return First and Last Parameter"
  },
  {
    "_id": "nqvuJue4TevAERzCs",
    "difficulty": 1.0803474484256244,
    "language": "python3",
    "summary": "Write a regular expression that matches a string if it contains at least one digit.\n\nExamples\nhas_digit(\"c8\") ➞ True\n\nhas_digit(\"23cc4\") ➞ True\n\nhas_digit(\"abwekz\") ➞ False\n\nhas_digit(\"sdfkxi\") ➞ False\n\nNotes\nThis challenge is designed to use RegEx only.",
    "tags": [
      "strings",
      "regex",
      "validation"
    ],
    "title": "Regex Series: String Contains at Least One Digit"
  },
  {
    "_id": "jhghtvT2s58FnDr5T",
    "difficulty": 1.0803571428571428,
    "language": "python3",
    "summary": "Create a function which concantenates the number 7 to the end of every chord in a list. Ignore all chords which already end with 7.\n\nExamples\njazzify([\"G\", \"F\", \"C\"]) ➞ [\"G7\", \"F7\", \"C7\"]\n\njazzify([\"Dm\", \"G\", \"E\", \"A\"]) ➞ [\"Dm7\", \"G7\", \"E7\", \"A7\"]\n\njazzify([\"F7\", \"E7\", \"A7\", \"Ab7\", \"Gm7\", \"C7\"]) ➞ [\"F7\", \"E7\", \"A7\", \"Ab7\", \"Gm7\", \"C7\"]\n\njazzify([]) ➞ []\n\nNotes",
    "tags": [
      "language_fundamentals",
      "loops",
      "arrays"
    ],
    "title": "Instant JAZZ"
  },
  {
    "_id": "i6hY9JSjQK4jcaB6i",
    "difficulty": 1.080392156862745,
    "language": "python3",
    "summary": "Create a function that inverts the rgb values of a given tuple.\n\nExamples\ncolor_invert((255, 255, 255)) ➞ (0, 0, 0)\n(255, 255, 255) is the color white.\nThe opposite is (0, 0, 0), which is black.\n\ncolor_invert((0, 0, 0)) ➞ (255, 255, 255)\n\ncolor_invert((165, 170, 221)) ➞ (90, 85, 34))\n\nNotes\nMust return a tuple.\n255 is the max value of a single color channel.",
    "tags": [
      "data_structures",
      "algebra"
    ],
    "title": "Invert Colors"
  },
  {
    "_id": "nSPuYmPSJZvHStrZq",
    "difficulty": 1.0803949224259521,
    "language": "python3",
    "summary": "Given a list, return True if there are more odd numbers than even numbers, otherwise return False.\n\nExamples\noddeven([1, 2, 3, 4, 5, 6, 7, 8, 9]) ➞ True\n\noddeven([1]) ➞ True\n\noddeven([13452394823795273847528572346]) ➞ False\n\nNotes\nAll lists will have at least 1 item.",
    "tags": [
      "math",
      "validation",
      "numbers"
    ],
    "title": "Return Odd > Even"
  },
  {
    "_id": "cMyMt377ReBsoTHnz",
    "difficulty": 1.0804597701149425,
    "language": "python3",
    "summary": "Write a function that converts a dictionary into a list of keys-values tuples.\n\nExamples\ndicttolist({\n  \"D\": 1,\n  \"B\": 2,\n  \"C\": 3\n}) ➞ [(\"B\", 2), (\"C\", 3), (\"D\", 1)]\n\ndicttolist({\n  \"likes\": 2,\n  \"dislikes\": 3,\n  \"followers\": 10\n}) ➞ [(\"dislikes\", 3), (\"followers\", 10), (\"likes\", 2)]\n\nNotes\nReturn the elements in the list in alphabetical order.",
    "tags": [
      "objects",
      "arrays"
    ],
    "title": "Convert Key, Values in a Dictionary to List"
  },
  {
    "_id": "kGEHEnj7qQf3KHd6F",
    "difficulty": 1.0805111821086262,
    "language": "python3",
    "summary": "Create a function that returns True if the given string has any of the following:\nOnly letters and no numbers.\nOnly numbers and no letters.\n\nIf a string has both numbers and letters, or contains characters which don't fit into any category, return False\n\nExamples\nalphanumeric_restriction(\"Bold\") ➞ True\n\nalphanumeric_restriction(\"123454321\") ➞ True\n\nalphanumeri",
    "tags": [
      "language_fundamentals",
      "validation",
      "strings",
      "regex"
    ],
    "title": "Alphanumeric Restriction"
  },
  {
    "_id": "rj7E4k6vSNZ9KpT9c",
    "difficulty": 1.08051689860835,
    "language": "python3",
    "summary": "A factor chain is a list where each previous element is a factor of the next  consecutive element. The following is a factor chain:\n\n[3, 6, 12, 36]\n\n3 is a factor of 6\n6 is a factor of 12\n12 is a factor of 36\n\nCreate a function that determines whether or not a list is a factor chain.\n\nExamples\nfactor_chain([1, 2, 4, 8, 16, 32]) ➞ True\n\nfactor_chain([1, 1, 1, 1",
    "tags": [
      "arrays",
      "loops",
      "validation"
    ],
    "title": "Factor Chain"
  },
  {
    "_id": "6o5wkfmSaFXCJYqDx",
    "difficulty": 1.0805194805194804,
    "language": "python3",
    "summary": "Create a function, that will for a given a, b, c, do the following:\n\nAdd a to itself b times.\nCheck if the result is divisible by c.\n\nExamples\nabcmath(42, 5, 10) ➞ False\n42+42 = 84,84+84 = 168,168+168 = 336,336+336 = 672, 672+672 = 1344\n1344 is not divisible by 10\n\nabcmath(5, 2, 1) ➞ True\n\nabcmath(1, 2, 3) ➞ False\n\nNotes\n\"if the result is divisible by c\", mean",
    "tags": [
      "algebra",
      "math",
      "validation",
      "loops"
    ],
    "title": "Multi-division"
  },
  {
    "_id": "Ddmh9KYg7xA4m9uE7",
    "difficulty": 1.0806302131603336,
    "language": "python3",
    "summary": "Write a function that transforms all letters from [a, m] to 0 and letters from [n, z] to 1 in a string.\n\nExamples\nconvert_binary(\"house\") ➞ \"01110\"\n\nconvert_binary(\"excLAIM\") ➞ \"0100000\"\n\nconvert_binary(\"moon\") ➞ \"0111\"\n\nNotes\nConversion should be case insensitive (see example #2).",
    "tags": [
      "strings",
      "regex"
    ],
    "title": "Transforming Words into Binary Strings"
  },
  {
    "_id": "RxHMzNBx3HHNMydno",
    "difficulty": 1.0808080808080809,
    "language": "python3",
    "summary": "A snail goes up the stairs. Every step, he must go up the step, then go across to the next step. He wants to reach the top of the tower.\n\nWrite a function that returns the distance the snail must travel to the top of the tower given the height and length of each step and the height of the tower.\n\nExamples\ntotal_distance(0.2, 0.4, 100.0) ➞ 300.0\nTotal distance",
    "tags": [
      "algebra",
      "math",
      "numbers"
    ],
    "title": "Snail Goes Up the Stairs"
  },
  {
    "_id": "4Y5Zk5f9LckvWjFf3",
    "difficulty": 1.0808189655172413,
    "language": "python3",
    "summary": "Write a function that reverses all the words in a sentence that start with a particular letter.\n\nExamples\nspecial_reverse(\"word searches are super fun\", \"s\")\n➞ \"word sehcraes are repus fun\"\n\nspecial_reverse(\"first man to walk on the moon\", \"m\")\n➞ \"first nam to walk on the noom\"\n\nspecial_reverse(\"peter piper picked pickled peppers\", \"p\")\n➞ \"retep repip dekcip d",
    "tags": [
      "strings",
      "higher_order_functions"
    ],
    "title": "Reverse Words Starting With a Particular Letter"
  },
  {
    "_id": "L3FeQq5NZgtFrkMsB",
    "difficulty": 1.0813397129186604,
    "language": "python3",
    "summary": "In this challenge, you have to convert a weight weighed on a planet of the Solar System to the corresponding weight on another planet.\n\nTo convert the weight, you have to divide it by the gravitational force of the planet on which is weighed and multiply the result (the mass) for the gravitational force of the other planet. See the table below for a list of gr",
    "tags": [
      "math",
      "objects",
      "physics"
    ],
    "title": "Planetary Weight Converter"
  },
  {
    "_id": "9szPm9Mg5D2vJyTvf",
    "difficulty": 1.0813480534572923,
    "language": "python3",
    "summary": "Write a function that takes three arguments (x, y, z) and returns a list containing x sublists (e.g. [[], [], []]), each containing y number of z items.\n\nx Number of sublists contained within the main list.\ny Number of items contained within each sublist.\nz Item contained within each sublist.\n\nExamples\nmatrix(3, 2, 3) ➞ [[3, 3], [3, 3], [3, 3]]\n\nmatrix(2, 1, \"",
    "tags": [
      "arrays",
      "loops",
      "data_structures",
      "language_fundamentals"
    ],
    "title": "Return a List of Sublists"
  },
  {
    "_id": "GPodAAMFqz9sLWmAy",
    "difficulty": 1.0814132104454686,
    "language": "python3",
    "summary": "Given a two digit number, return True if that number contains one even and one odd digit.\n\nExamples\noneoddone_even(12) ➞ True\n\noneoddone_even(55) ➞ False\n\noneoddone_even(22) ➞ False\n\nNotes\nN/A",
    "tags": [
      "numbers",
      "validation"
    ],
    "title": "One Odd and One Even"
  },
  {
    "_id": "LLJ2PoZ4ea5hyAeTp",
    "difficulty": 1.0814814814814815,
    "language": "python3",
    "summary": "Write a DECIMATOR* function which takes a string and decimates* it (i.e. it removes the last 1/10 of the characters).\n\nAlways round up: if the string has 21 characters, 1/10 of the characters would be 2.1 characters, hence the DECIMATOR* removes 3 characters. The DECIMATOR* shows no mercy!\n\nExamples\nDECIMATOR(\"1234567890\") ➞ \"123456789\"\n10 characters, removed",
    "tags": [
      "strings",
      "language_fundamentals"
    ],
    "title": "The DECIMATOR"
  },
  {
    "_id": "WsHSAEBQW6F7nsMjr",
    "difficulty": 1.0815109343936382,
    "language": "python3",
    "summary": "Given a list of integers, replace every number with the average mean of the whole list.\n\nExamples\nflattenthecurve([1, 2, 3, 4, 5]) ➞ [3, 3, 3, 3, 3]\n\nflattenthecurve([0, 0, 0, 2, 7, 3]) ➞ [2, 2, 2, 2, 2, 2]\n\nflattenthecurve([4]) ➞ [4]\n\nflattenthecurve([]) ➞ []\n\nNotes\nRound averages to 1 decimal point.\nReturn an empty list if given an empty list (see example #4",
    "tags": [
      "numbers",
      "arrays",
      "language_fundamentals"
    ],
    "title": "Flatten the Curve"
  },
  {
    "_id": "yXekCk3qRWYR5AHif",
    "difficulty": 1.0816023738872405,
    "language": "python3",
    "summary": "Write a function, that replaces all vowels in a string with a specified vowel.\n\nExamples\nvow_replace(\"apples and bananas\", \"u\") ➞ \"upplus und bununus\"\n\nvow_replace(\"cheese casserole\", \"o\") ➞ \"chooso cossorolo\"\n\nvow_replace(\"stuffed jalapeno poppers\", \"e\") ➞ \"steffed jelepene peppers\"\n\nNotes\nAll words will be lowercase.\n\"Y\" is not considered a vowel.",
    "tags": [
      "strings",
      "language_fundamentals"
    ],
    "title": "Apples and Bananas"
  },
  {
    "_id": "bHTb8p5nybCrjFPze",
    "difficulty": 1.0816326530612246,
    "language": "python3",
    "summary": "Write a function that, given the start startnum and end endnum values, return a list containing all the numbers inclusive to that range. See examples below.\n\nExamples\ninclusive_list(1, 5) ➞ [1, 2, 3, 4, 5]\n\ninclusive_list(2, 8) ➞ [2, 3, 4, 5, 6, 7, 8]\n\ninclusive_list(10, 20) ➞ [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n\ninclusive_list(17, 5) ➞ [17]\n\nNotes\nTh",
    "tags": [
      "arrays",
      "numbers",
      "math"
    ],
    "title": "Inclusive List Ranges"
  },
  {
    "_id": "raN9mCseAYJvoJQtQ",
    "difficulty": 1.0816326530612246,
    "language": "python3",
    "summary": "I am trying to filter out empty arrays from an array. In other words, I want to transform something that looks like this: [\"a\", \"b\", [], [], [1, 2, 3]] to look like [\"a\", \"b\", [1, 2, 3]]. My code looks like this:\n\ndef removeemptyarrays(arr):\n    return [x for x in arr if len(x) != 0]\n\nHowever, it seems that I've run into a problem, with an error message of obj",
    "tags": [
      "arrays",
      "bugs"
    ],
    "title": "Fix the Error: Filtering out Empty Arrays"
  },
  {
    "_id": "9f3Mi6vHNcm8vRcSh",
    "difficulty": 1.081720430107527,
    "language": "python3",
    "summary": "Given a number, return a list containing the two halves of the number. If the number is odd, make the rightmost number higher.\n\nExamples\nnumber_split(4) ➞ [2, 2]\n\nnumber_split(10) ➞ [5, 5]\n\nnumber_split(11) ➞ [5, 6]\n\nnumber_split(-9) ➞ [-5, -4]\n\nNotes\nAll numbers will be integers.\nYou can expect negative numbers too.",
    "tags": [
      "numbers",
      "arrays",
      "math"
    ],
    "title": "Number Split"
  },
  {
    "_id": "8MiJwz7fdaWRiRDYc",
    "difficulty": 1.0818385650224216,
    "language": "python3",
    "summary": "A number n is apocalyptic if 2^n contains a string of 3 consecutive 6s (666 being the presumptive \"number of the beast\").\n\nCreate a function that takes a number n as input. If the number is apocalyptic, find the index of 666 in 2^n, and return \"Repent! X days until the Apocalypse!\" (X being the index). If not, return \"Crisis averted. Resume sinning.\".\n\nExample",
    "tags": [
      "numbers",
      "math",
      "validation"
    ],
    "title": "Apocalyptic Numbers"
  },
  {
    "_id": "YK9PpDRfyBTEarNyR",
    "difficulty": 1.081911262798635,
    "language": "python3",
    "summary": "Programmer Pete is trying to turn two lists inside one list into one without messing the order of the list nor the type and because he's pretty advanced he made it without blinking but I want you to make it too.\n\nExamples\none_list([[1, 2], [3, 4]]) ➞ [1, 2, 3, 4]\n\none_list([[\"a\", \"b\"], [\"c\", \"d\"]]) ➞ [\"a\", \"b\", \"c\", \"d\"]\n\none_list([[True, False], [False, False",
    "tags": [
      "arrays",
      "logic"
    ],
    "title": "Two Lists inside a List to One"
  },
  {
    "_id": "K9w9hEd9Pn7DtMzjs",
    "difficulty": 1.0819672131147542,
    "language": "python3",
    "summary": "Create a function that accepts a string of space separated integers and returns the highest and lowest integers (as a string).\n\nExamples\nhigh_low(\"1 2 3 4 5\") ➞ \"5 1\"\n\nhigh_low(\"1 2 -3 4 5\") ➞ \"5 -3\"\n\nhigh_low(\"1 9 3 4 -5\") ➞ \"9 -5\"\n\nhigh_low(\"13\") ➞ \"13 13\"\n\nNotes\nAll integers are valid, no need to validate them.\nThere will always be at least one integer in t",
    "tags": [
      "math",
      "sorting",
      "algorithms",
      "numbers"
    ],
    "title": "Return the Highest and Lowest Numbers"
  },
  {
    "_id": "PTh7tBusAZRgjAWEZ",
    "difficulty": 1.0819672131147542,
    "language": "python3",
    "summary": "The insurance guy calls again and apologizes. They found another policy made by your spouse, but this one is limited to cover a particular maximum in losses (for example, 50,000€). You send a bill to your spouse for the difference you lost.\n\nGiven an dict of the stolen items and a limit, return the difference between the total value of those items and the limi",
    "tags": [
      "objects",
      "arrays",
      "loops"
    ],
    "title": "Burglary Series (10): Calculate Difference"
  },
  {
    "_id": "XqxeeB4nYpS53noTA",
    "difficulty": 1.08207343412527,
    "language": "python3",
    "summary": "Your task is to create a fence worth $1 million. You are given the price of the material (per character), meaning the length of the fence will change depending on the cost of the material.\n\nCreate a function which constructs this pricey pricey fence, using the letter \"H\" to build.\n\nconstruct_fence(\"$50,000\") ➞ \"HHHHHHHHHHHHHHHHHHHHHHHHHHHH\"\n20 fence posts were",
    "tags": [
      "strings",
      "numbers"
    ],
    "title": "The Million Dollar Fence"
  },
  {
    "_id": "SLCqbNTy4aacoNjvw",
    "difficulty": 1.0820854132002218,
    "language": "python3",
    "summary": "Create a function that takes a list of items, removes all duplicate items and returns a new list in the same sequential order as the old list (minus duplicates).\n\nExamples\nremove_dups([1, 0, 1, 0]) ➞ [1, 0]\n\nremove_dups([\"The\", \"big\", \"cat\"]) ➞ [\"The\", \"big\", \"cat\"]\n\nremove_dups([\"John\", \"Taylor\", \"John\"]) ➞ [\"John\", \"Taylor\"]\n\nNotes\nTests contain lists with b",
    "tags": [
      "arrays",
      "strings",
      "interview",
      "language_fundamentals"
    ],
    "title": "Remove Duplicates from a List"
  },
  {
    "_id": "YnsBcniRG9k77SSvA",
    "difficulty": 1.082191780821918,
    "language": "python3",
    "summary": "Imagine a school that kids attend for 6 years. In each year, there are five groups started, marked with the letters a, b, c, d, e. For the first year, the groups are 1a, 1b, 1c, 1d, 1e and for the last year, the groups are 6a, 6b, 6c, 6d, 6e.\n\nWrite a function that returns the groups in the school by year (as a string), separated with a comma and a space in th",
    "tags": [
      "loops",
      "language_fundamentals"
    ],
    "title": "Intro to Nested Loops"
  },
  {
    "_id": "9b4h6mK9CBMLwyGiY",
    "difficulty": 1.0823680823680824,
    "language": "python3",
    "summary": "In this challenge, you have to find the distance between two points placed on a Cartesian plane. Knowing the coordinates of both the points, you have to apply the Pythagorean theorem to find the distance between them.\n\nTwo points on a Cartesian plane\n\nGiven two dictionaries a and b being the two points coordinates (x and y), implement a function that returns t",
    "tags": [
      "math",
      "algebra",
      "language_fundamentals",
      "geometry",
      "objects"
    ],
    "title": "Distance Between Two Points"
  },
  {
    "_id": "uWpS5xMjzZFAkiQzL",
    "difficulty": 1.0825082508250825,
    "language": "python3",
    "summary": "Given an integer, return \"odd\" if the sum of all odd digits is greater than the sum of all even digits. Return \"even\" if the sum of even digits is greater than the sum of odd digits, and \"equal\" if both sums are the same.\n\nExamples\noddsvsevens(97428) ➞ \"odd\"\nodd = 16 (9+7)\neven = 14 (4+2+8)\n\noddsvsevens(81961) ➞ \"even\"\nodd = 11 (1+9+1)\neven = 14 (8+6)\n\noddsvse",
    "tags": [
      "language_fundamentals",
      "math"
    ],
    "title": "Odds vs. Evens"
  },
  {
    "_id": "AnjPhyJ7qyKCHgfrn",
    "difficulty": 1.0825688073394495,
    "language": "python3",
    "summary": "Your friend is trying to write a function that removes all vowels from a string. They write:\n\ndef remove_vowels(string):\n  vowels = \"aeiou\"\n    for vowel in vowels[1]:\n      string.replace(vowel, \"\", 1)\n    return string\n\nHowever, it seems that it doesn't work? Fix your friend's code so that it actually does remove all vowels.\n\nExamples\nremove_vowels(\"ben\") ➞",
    "tags": [
      "strings",
      "regex",
      "bugs"
    ],
    "title": "Fix the Error: Vowel Edition"
  },
  {
    "_id": "whEretKtpEbEBAAfr",
    "difficulty": 1.0825688073394495,
    "language": "python3",
    "summary": "Write a function that takes a list of strings and a pattern (string) and returns the the strings that contain the pattern in alphabetical order. If the pattern is an empty string, return all the strings passed in the input list.\n\nExamples\ncms_selector([\"WordPress\", \"Joomla\", \"Drupal\"], \"w\") ➞ [\"WordPress\"]\n\ncms_selector([\"WordPress\", \"Joomla\", \"Drupal\", \"Magen",
    "tags": [
      "arrays",
      "strings",
      "formatting"
    ],
    "title": "CMS Selector Based on a Given String"
  },
  {
    "_id": "xrR8zHmdTvEWqdr5g",
    "difficulty": 1.0828025477707006,
    "language": "python3",
    "summary": "Given the shortest side of a 30° by 60° by 90° triangle, find out the other two sides. Return the longest side and medium-length side in that order.\n\nExamples\nreturnsides(1) ➞ (2, 1.73)\n\nreturnsides(2) ➞ (4, 3.46)\n\nreturnsides(3) ➞ (6, 5.2)\n\nNotes\n30 60 90 triangles always follow this rule: let's say the shortest side length is x units, the hypotenuse would be",
    "tags": [
      "geometry",
      "math"
    ],
    "title": "Find the Other Two Side Lengths"
  },
  {
    "_id": "cecCndEfA7sREySmL",
    "difficulty": 1.0829015544041452,
    "language": "python3",
    "summary": "This challenge has five miniature exercises to help practice proficiency in string slicing. Check the examples below for a visual indicator of how to slice the strings. Good luck!\n\nExamples\ntxt = \"abcdefghijklmnopqrstuvwxyz\"\n\nchallenge1(txt) ➞ \"abcde\"\nFirst 5 characters of the string.\n\nchallenge2(txt) ➞ \"vwxyz\"\nLast 5 characters of the string.\n\nchallenge3(txt)",
    "tags": [
      "language_fundamentals",
      "strings"
    ],
    "title": "String Slice-athon"
  },
  {
    "_id": "YGhrwfg6k6zHnmeDh",
    "difficulty": 1.0829207920792079,
    "language": "python3",
    "summary": "Create a function that applies a discount d to every number in the list.\n\nExamples\nget_discounts([2, 4, 6, 11], \"50%\") ➞ [1, 2, 3, 5.5]\n\nget_discounts([10, 20, 40, 80], \"75%\") ➞ [7.5, 15, 30, 60]\n\nget_discounts([100], \"45%\") ➞ [45]\n\nNotes\nThe discount is the percentage of the original price (i.e the discount of \"75%\" to 12 would be 9 as opposed to taking off 7",
    "tags": [
      "arrays",
      "algorithms",
      "language_fundamentals"
    ],
    "title": "Applying Discounts"
  },
  {
    "_id": "GP8Tywnn2gucEfSMf",
    "difficulty": 1.0829875518672198,
    "language": "python3",
    "summary": "Create a function that takes a number as an argument and returns the appropriate error message. You should do this without using the switch or if statements.\n\nThe input error will be 1 to 5:\n\n1 >> \"Check the fan\"\n2 >> \"Emergency stop\"\n3 >> \"Pump Error\"\n4 >> \"c\"\n5 >> \"Temperature Sensor Error\"\n\n For any other value, return \"101\" (you can use an if statment here",
    "tags": [
      "strings",
      "conditions"
    ],
    "title": "Error Messages"
  },
  {
    "_id": "wtBko8Bc8o8Tmra3q",
    "difficulty": 1.0830188679245283,
    "language": "python3",
    "summary": "A half life is the amount of time for half of a radioactive substance to decay.\nAfter 1 half life, 50% of a substance will be left.\nAfter 2 half lives, 25% of a substance will be left.\nAfter 3 half lives, 12.5% of a substance will be left, etc...\n\nCreate a function which calculates the remaining mass and the number of years that it took for the substance to de",
    "tags": [
      "math",
      "physics"
    ],
    "title": "Radioactive Decay"
  },
  {
    "_id": "QCKgMRsZR5cyitfY8",
    "difficulty": 1.0833333333333333,
    "language": "python3",
    "summary": "Create a function that takes a value as an argument and return the type of this value.\n\nExamples\nget_type(1) ➞ \"int\"\n\nget_type(\"a\") ➞ \"str\"\n\nget_type(true) ➞ \"bool\"\n\nget_type([]) ➞ \"list\"\n\nget_type(None) ➞ \"NoneType\"\n\nNotes\nN/A",
    "tags": [
      "strings",
      "validation"
    ],
    "title": "Type of Value"
  },
  {
    "_id": "e6fL5EiwGZcsW7C5D",
    "difficulty": 1.0833333333333333,
    "language": "python3",
    "summary": "Create a function that converts a string of letters to their respective number in the alphabet.\n\nA | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | ... |\n--- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---\n0 | 1 | 2 | 3",
    "tags": [
      "algorithms",
      "formatting",
      "logic",
      "strings"
    ],
    "title": "Numbered Alphabet"
  },
  {
    "_id": "X5K95S2nEmTrsJCPD",
    "difficulty": 1.0835579514824798,
    "language": "python3",
    "summary": "Create a function that changes specific words into emoticons. Given a sentence as a string, replace the words smile, grin, sad and mad with their corresponding emoticons.\n\nword | emoticon\n--- | ---\n smile | :D\n grin | :)\n sad | :(\n mad | :P\n\nExamples\nemotify(\"Make me smile\") ➞ \"Make me :D\"\n\nemotify(\"Make me grin\") ➞ \"Make me :)\"\n\nemotify(\"Make me sad\") ➞ \"Make",
    "tags": [
      "conditions",
      "language_fundamentals",
      "strings",
      "formatting"
    ],
    "title": "Emotify the Sentence"
  },
  {
    "_id": "2JHYavYqynX8ZCmMG",
    "difficulty": 1.0836012861736335,
    "language": "python3",
    "summary": "Create a function to that compares two words based on the sum of their ASCII codes and returns the word with the smaller ASCII sum.\n\nExamples\nascii_sort([\"hey\", \"man\"]) ➞ \"man\"\n[\"h\", \"e\", \"y\"] ➞ sum([104, 101, 121]) ➞ 326\n[\"m\", \"a\", \"n\"] ➞ sum([109, 97, 110]) ➞ 316\n\nascii_sort([\"majorly\", \"then\"]) ➞ \"then\"\n\nascii_sort([\"victory\", \"careless\"]) ➞ \"victory\"\n\nNote",
    "tags": [
      "strings",
      "loops"
    ],
    "title": "Compare by ASCII Codes"
  },
  {
    "_id": "hPCtfpyXDDawsz6xw",
    "difficulty": 1.0836012861736335,
    "language": "python3",
    "summary": "Create a function that ends the first word of a phrase with \"ed\", essentially verbifying a noun.\n\nExamples\nverbify(\"cheese burger\") ➞ \"cheesed burger\"\n\nverbify(\"salt water\") ➞ \"salted water\"\n\nverbify(\"orange juice\") ➞ \"oranged juice\"\n\nverbify(\"shredded cheese\") ➞ \"shredded cheese\"\n\nNotes\nChange only the first word.\nNote that some words may already end in \"e\" o",
    "tags": [
      "strings",
      "language_fundamentals",
      "regex"
    ],
    "title": "Verbed Nouns"
  },
  {
    "_id": "TJxPyuusqjtWF9rff",
    "difficulty": 1.083657587548638,
    "language": "python3",
    "summary": "Given a list of numbers, return a list which contains all the even numbers in the orginal list, which also have even indices.\n\nExamples\ngetonlyevens([1, 3, 2, 6, 4, 8]) ➞ [2, 4]\n\ngetonlyevens([0, 1, 2, 3, 4]) ➞ [0, 2, 4]\n\ngetonlyevens([1, 2, 3, 4, 5]) ➞ []\n\nNotes\nLists start at index 0.",
    "tags": [
      "arrays",
      "numbers",
      "language_fundamentals"
    ],
    "title": "Even All the Way"
  },
  {
    "_id": "Ff84aGq6e7gjKYh8H",
    "difficulty": 1.0836820083682008,
    "language": "python3",
    "summary": "You are given the length of a video in minutes. The format is mm:ss (e.g.: \"02:54\"). Create a function that takes the video length and return it in seconds.\n\nExamples\nminutestoseconds(\"01:00\") ➞ 60\n\nminutestoseconds(\"13:56\") ➞ 836\n\nminutestoseconds(\"10:60\") ➞ False\n\nNotes\nThe video length is given as a string.\nIf the number of seconds is 60 or over, return Fal",
    "tags": [
      "math",
      "strings",
      "numbers"
    ],
    "title": "Video Length in Seconds"
  },
  {
    "_id": "xPmfKHShmuKL5Qf9u",
    "difficulty": 1.0837696335078535,
    "language": "python3",
    "summary": "Given a list with an odd number of elements, return whether the scale will tip \"left\" or \"right\" based on the sum of the numbers. The scale will tip on the direction of the largest total. If both sides are equal, return \"balanced\".\n\nExamples\nscale_tip([0, 0, \"I\", 1, 1]) ➞ \"right\"\n0  4 so it will tip left\n\nscale_tip([5, 5, 5, 0, \"I\", 10, 2, 2, 1]) ➞ \"balanced\"",
    "tags": [
      "arrays",
      "algorithms",
      "conditions"
    ],
    "title": "Balancing Scales"
  },
  {
    "_id": "rMr8yRxS8TeF9pDyn",
    "difficulty": 1.0838509316770186,
    "language": "python3",
    "summary": "There's a great war between the even and odd numbers. Many numbers already lost their life in this war and it's your task to end this. You have to determine which group sums larger: the even, or the odd. The larger group wins.\n\nCreate a function that takes a list of integers, sums the even and odd numbers separately, then returns the difference between sum of",
    "tags": [
      "arrays",
      "loops",
      "numbers",
      "higher_order_functions"
    ],
    "title": "War of Numbers"
  },
  {
    "_id": "5raq8tMwYrXq2ncwf",
    "difficulty": 1.0838852097130243,
    "language": "python3",
    "summary": "Dividing by 0 is a huge mistake and should be avoided at all costs.\n\nCreate a function that when given a math expression as a string, return True if at any point, the expression involves dividing by 0.\n\nExamples\ncatchzerodivision(\"2 / 0\") ➞ True\n\ncatchzerodivision(\"4 / (2 + 3 - 5)\") ➞ True\n\ncatchzerodivision(\"2 * 5 - 10\") ➞ False\n\nNotes\nMultiplication signs wi",
    "tags": [
      "math",
      "numbers",
      "validation",
      "language_fundamentals"
    ],
    "title": "Preventing the Collapse of the Universe"
  },
  {
    "_id": "6LwzPRc6LrauEgr7H",
    "difficulty": 1.084,
    "language": "python3",
    "summary": "Given a string worm create a function that takes the length of the worm and converts it into millimeters. Each - represents one centimeter.\n\nExamples\nworm_length(\"----------\") ➞ \"100 mm.\"\n\nworm_length(\"\") ➞ \"invalid\"\n\nwormlength(\"-------\") ➞ \"invalid\"\n\nNotes\nReturn \"invalid\" if an empty string is given or if the string has characters other than -.",
    "tags": [
      "strings"
    ],
    "title": "Length of Worm"
  },
  {
    "_id": "YSTk5RMQQeocbAteg",
    "difficulty": 1.0841346153846154,
    "language": "python3",
    "summary": "A tetrahedron is a pyramid with a triangular base and three sides. A tetrahedral number is a number of items within a tetrahedron.\n\nCreate a function that takes an integer n and returns the nth tetrahedral number.\n\nAlternative Text\n\nExamples\ntetra(2) ➞ 4\n\ntetra(5) ➞ 35\n\ntetra(6) ➞ 56\n\nNotes\nThere is a formula for the nth tetrahedral number.",
    "tags": [
      "math",
      "numbers",
      "logic"
    ],
    "title": "Find the nth Tetrahedral Number"
  },
  {
    "_id": "ZDDyfBFBWMotQSYin",
    "difficulty": 1.0842293906810037,
    "language": "python3",
    "summary": "A number n is a Harshad (also called Niven) number if it is divisible by the sum of its digits. For example, 666 is divisible by 6 + 6 + 6, so it is a Harshad number.\n\nExamples\nis_harshad(209) ➞ True\n\nis_harshad(41) ➞ False\n\nis_harshad(12255) ➞ True\n\nNotes\nN/A",
    "tags": [
      "numbers",
      "math",
      "strings",
      "validation"
    ],
    "title": "Harshad Numbers"
  },
  {
    "_id": "jQGT8CNFcMXr55jeb",
    "difficulty": 1.0842391304347827,
    "language": "python3",
    "summary": "Lists can be mixed with various types. Your task for this challenge is to sum all the number elements in the given list. Create a function that takes a list and returns the sum of all numbers in the list.\n\nExamples\nnumbers_sum([1, 2, \"13\", \"4\", \"645\"]) ➞ 3\n\nnumbers_sum([True, False, \"123\", \"75\"]) ➞ 0\n\nnumbers_sum([1, 2, 3, 4, 5, True]) ➞ 15\n\nNotes\nCheck the Re",
    "tags": [
      "arrays",
      "algebra",
      "validation",
      "conditions"
    ],
    "title": "Sum of Number Elements in a List"
  },
  {
    "_id": "nr35Bm5BRQYHZrt5n",
    "difficulty": 1.0846023688663282,
    "language": "python3",
    "summary": "Create a function that determines if there is an upward trend.\n\nExamples\nupward_trend([1, 2, 3, 4]) ➞ True\n\nupward_trend([1, 2, 6, 5, 7, 8]) ➞ False\n\nupward_trend([1, 2, 3, \"4\"]) ➞ \"Strings not permitted!\"\n\nupward_trend([1, 2, 3, 6, 7]) ➞ True\n\nNotes\nIf there is a string element in the list, return \"Strings not permitted!\".\nThe numbers don't have to be consecu",
    "tags": [
      "math",
      "logic",
      "arrays",
      "validation"
    ],
    "title": "Is There an Upward Trend?"
  },
  {
    "_id": "QB6kPXQkFgMkzcc2h",
    "difficulty": 1.0847457627118644,
    "language": "python3",
    "summary": "Create a function that will remove the letters \"a\", \"b\" and \"c\" from the given string and return the modified version. If the given string does not contain \"a\", \"b\", or \"c\", return None.\n\nExamples\nremove_abc(\"This might be a bit hard\") ➞ \"This might e  it hrd\"\n\nremove_abc(\"hello world!\") ➞ None\n\nremove_abc(\"\") ➞ None\n\nNotes\nIf the given string does not contain",
    "tags": [
      "strings",
      "loops",
      "regex"
    ],
    "title": "Remove the Letters ABC"
  },
  {
    "_id": "9AwG82owS6bT84Bj2",
    "difficulty": 1.0847953216374269,
    "language": "python3",
    "summary": "An employee working at a very bizzare company, earns one penny on their first day. However, for every day that passes, their base amount doubles, so they earn two pennies on the second day and four pennies on the third day (totalling 7 pennies). Given a number of days, return how many pennies the employee accumulates.\n\nExamples\ndoubled_pay(1) ➞ 1\n\ndoubled_pay(",
    "tags": [
      "math",
      "loops",
      "numbers"
    ],
    "title": "Doubled Pay"
  },
  {
    "_id": "gHrMmA7emP6CFAMnb",
    "difficulty": 1.0849514563106797,
    "language": "python3",
    "summary": "In this challenge, you have to establish if a number is apocalyptic. A positive integer n greater than 0 is apocalyptic when 2 elevated to n contains one or more occurrences of 666 into it.\n\nGiven an integer n, implement a function that returns:\n\"Safe\" if n is not apocalyptic.\n\"Single\" if into 2^n there's a single occurence of 666.\n\"Double\" if into 2^n there a",
    "tags": [
      "numbers",
      "strings",
      "validation"
    ],
    "title": "Apocalyptic Numbers"
  },
  {
    "_id": "DcXTvFs7Zvc3PDTzX",
    "difficulty": 1.085,
    "language": "python3",
    "summary": "Parity bits are used as very simple checksum to ensure that binary data isn't corrupted during transit. Here's how they work:\n\nIf a binary string has an odd number of 1s, the parity bit is a 1.\nIf a binary string has an even number of 1s, the parity bit is a 0.\nThe parity bit is appended to the end of the binary string.\n\nCreate a function that validates whethe",
    "tags": [
      "validation",
      "numbers",
      "strings"
    ],
    "title": "Parity Bit Validation"
  },
  {
    "_id": "bKfxE7SWnRKTpyZQT",
    "difficulty": 1.0850340136054422,
    "language": "python3",
    "summary": "Create a function that takes a string and replaces the vowels with another character.\n\na = 1\ne = 2\ni = 3\no = 4\nu = 5\n\nExamples\nreplace_vowel(\"karachi\") ➞ \"k1r1ch3\"\n\nreplace_vowel(\"chembur\") ➞ \"ch2mb5r\"\n\nreplace_vowel(\"khandbari\") ➞ \"kh1ndb1ri\"\n\nNotes\nThe input will always be in lowercase.",
    "tags": [
      "strings",
      "regex",
      "language_fundamentals"
    ],
    "title": "Replace Vowel With Another Character"
  },
  {
    "_id": "njFHutF5BjifxNR9e",
    "difficulty": 1.0851063829787233,
    "language": "python3",
    "summary": "Your friend is trying to write a function to accomplish the following transformations:\n\nx = [3, 3, 3, 3, 3, 3, 3]\n\n// Each time x is called, the following results are shown:\n\nchange(x, 0)  // [3, 3, 3, 3, 3, 3, 3]\nchange(x, 1)  // [3, 2, 2, 2, 2, 2, 3]\nchange(x, 2)  // [3, 2, 1, 1, 1, 2, 3]\nchange(x, 3)  // [3, 2, 1, 0, 1, 2, 3]\nNote: The change() function sho",
    "tags": [
      "bugs",
      "scope",
      "loops"
    ],
    "title": "Fix the Code: Un-Mutating a List"
  },
  {
    "_id": "JFLADuABfkeoz8mqN",
    "difficulty": 1.0851612903225807,
    "language": "python3",
    "summary": "Create a method in the Person class which returns how another person's age compares. Given the objects p1, p2 and p3, which will be initialised with the attributes name and age, return a sentence in the following format:\n\n* {other_person} is {older than / younger than / the same age as} me. *\n\nExamples\np1 = Person(\"Samuel\", 24)\np2 = Person(\"Joel\", 36)\np3 = Per",
    "tags": [
      "classes",
      "conditions",
      "language_fundamentals",
      "objects"
    ],
    "title": "Older Than Me"
  },
  {
    "_id": "EoS5M5Smi8NPtzCWE",
    "difficulty": 1.0852017937219731,
    "language": "python3",
    "summary": "Create a function based on the input and output. Look at the examples, there is a pattern.\n\nExamples\nsecret(\"div*2\") ➞ \"\"\n\nsecret(\"p*1\") ➞ \"\"\n\nsecret(\"li*3\") ➞ \"\"\n\nNotes\nInput is a string.",
    "tags": [
      "strings",
      "language_fundamentals"
    ],
    "title": "Secret Function 2.0"
  },
  {
    "_id": "B7rfWiJKrwft9yXXC",
    "difficulty": 1.0852575488454708,
    "language": "python3",
    "summary": "Create a function that takes any non-negative number as an argument and returns it with its digits in descending order. Descending order is when you sort from highest to lowest.\n\nExamples\nsort_descending(123) ➞ 321\n\nsort_descending(1254859723) ➞ 9875543221\n\nsort_descending(73065) ➞ 76530\n\nNotes\nYou can expect non-negative numbers for all test cases.",
    "tags": [
      "formatting",
      "sorting",
      "numbers"
    ],
    "title": "Sort Numbers in Descending Order"
  },
  {
    "_id": "AcEnqyHp9q3Dd92Hn",
    "difficulty": 1.085308056872038,
    "language": "python3",
    "summary": "Given a string of numbers separated by a comma and space, return the product of the numbers.\n\nExamples\nmultiply_nums(\"2, 3\") ➞ 6\n\nmultiply_nums(\"1, 2, 3, 4\") ➞ 24\n\nmultiply_nums(\"54, 75, 453, 0\") ➞ 0\n\nmultiply_nums(\"10, -2\") ➞ -20\n\nNotes\nBonus: Try to complete this challenge in one line!",
    "tags": [
      "language_fundamentals",
      "numbers",
      "strings"
    ],
    "title": "Multiplying Numbers in a String"
  },
  {
    "_id": "5q3FdCvrXtwQRoGmP",
    "difficulty": 1.0853658536585367,
    "language": "python3",
    "summary": "Create a function that counts the number of towers.\n\nExamples\ncount_towers([\n  [\"     ##         \"],\n  [\"##   ##        ##\"],\n  [\"##   ##   ##   ##\"],\n  [\"##   ##   ##   ##\"]\n]) ➞ 4\n\ncount_towers([\n  [\"                         ##\"],\n  [\"##             ##   ##   ##\"],\n  [\"##        ##   ##   ##   ##\"],\n  [\"##   ##   ##   ##   ##   ##\"]\n]) ➞ 6\n\ncount_towers([",
    "tags": [
      "arrays",
      "strings"
    ],
    "title": "Count the Towers"
  },
  {
    "_id": "yvwdxFcxkT5hiTgfr",
    "difficulty": 1.0855855855855856,
    "language": "python3",
    "summary": "As you complete questions on Edabit, you gain experience points depending on the difficulty of the question. The points for each difficulty are as follows:\n\nDifficulty | Experience Points\n--- | ---\nVery Easy | 5XP\nEasy | 10XP\nMedium | 20XP\nHard | 40XP\nVery Hard | 80XP\n\nGiven a dictionary of how many questions a person has completed of each difficulty, return h",
    "tags": [
      "arrays",
      "numbers",
      "strings"
    ],
    "title": "Edabit Experience Points"
  },
  {
    "_id": "KbFxyTPiP4GMvxw68",
    "difficulty": 1.0857449088960343,
    "language": "python3",
    "summary": "Write a function that returns the longest sequence of consecutive zeroes in a binary string.\n\nExamples\nlongest_zero(\"01100001011000\") ➞ \"0000\"\n\nlongest_zero(\"100100100\") ➞ \"00\"\n\nlongest_zero(\"11111\") ➞ \"\"\n\nNotes\nIf no zeroes exist in the input, return an empty string.",
    "tags": [
      "strings",
      "loops",
      "language_fundamentals"
    ],
    "title": "Longest Sequence of Consecutive Zeroes"
  },
  {
    "_id": "pj5yRacNC8huzhy85",
    "difficulty": 1.0857699805068226,
    "language": "python3",
    "summary": "Write a function that removes all capitals letters from a sentence except the first letter, put quotation marks around the sentence and add \", whispered Edabit.\" at the end.\n\nExamples\nshhh(\"HI THERE!\") ➞ '\"Hi there!\", whispered Edabit.'\n\nshhh(\"tHaT'S Pretty awesOme\") ➞ '\"That's pretty awesome\", whispered Edabit.'\n\nshhh(\"\") ➞ '\"\", whispered Edabit.'\n\nNotes\nDon'",
    "tags": [
      "formatting",
      "language_fundamentals",
      "strings"
    ],
    "title": "Shhh Be Quiet Function"
  },
  {
    "_id": "xCFHFha5sBmzsNARH",
    "difficulty": 1.0860389610389611,
    "language": "python3",
    "summary": "Write a function that reverses a string. Make your function recursive.\n\nExamples\nreverse(\"hello\") ➞ \"olleh\"\n\nreverse(\"world\") ➞ \"dlrow\"\n\nreverse(\"a\") ➞ \"a\"\n\nreverse(\"\") ➞ \"\"\n\nNotes\nFor non-base cases, your function must call itself at least once.\nCheck the Resources tab for info on recursion.",
    "tags": [
      "recursion",
      "strings",
      "language_fundamentals"
    ],
    "title": "Recursion: Reverse a String"
  },
  {
    "_id": "xRzyWsdzMEeGqsJMK",
    "difficulty": 1.0861070911722142,
    "language": "python3",
    "summary": "Usually when you sign up for an account to buy something, your credit card number, phone number or answer to a secret question is partially obscured in some way. Since someone could look over your shoulder, you don't want that shown on your screen. Hence, the website masks these strings.\n\nYour task is to create a function that takes a string, transforms all bu",
    "tags": [
      "strings",
      "formatting",
      "validation"
    ],
    "title": "Maskify the String"
  },
  {
    "_id": "JQHEYvFJPv4eSAjox",
    "difficulty": 1.0863013698630137,
    "language": "python3",
    "summary": "Check the principles of minimalist code in the [intro to the first challenge] (https://edabit.com/challenge/2XLjgZhmACph76Pkr).\n\nIn the Code tab you will find a code that is missing a single character in order to pass the tests. However, your goal is to submit a function as minimalist as possible. Use the tips in the tips section below.\n\nWrite a function that",
    "tags": [
      "logic",
      "language_fundamentals",
      "conditions",
      "validation"
    ],
    "title": "Minimal V: Membership Operator"
  },
  {
    "_id": "dCnX639Sheqdxqjm2",
    "difficulty": 1.0863787375415281,
    "language": "python3",
    "summary": "If two or more resistors are connected in parallel, the overall resistance of the circuit reduces. It is possible to calculate the total resistance of a parallel circuit by using this formula:\n\n1/RTotal = 1/R1 + 1/R2 + 1/R3 ...\n\nCreate a function that takes a list of parallel resistance values, and calculates the total resistance of the circuit.\n\nWorked Exampl",
    "tags": [
      "math",
      "physics",
      "loops",
      "arrays"
    ],
    "title": "Sum of Resistance in Parallel Circuits"
  },
  {
    "_id": "DJa7PoKDhTTmwnxJg",
    "difficulty": 1.0865633074935401,
    "language": "python3",
    "summary": "Given a list of integers, find the pair of adjacent elements that have the largest product and return that product.\n\nExamples\nadjacent_product([3, 6, -2, -5, 7, 3] ) ➞ 21\n\nadjacent_product([5, 6, -4, 2, 3, 2, -23]) ➞ 30\n\nadjacent_product([0, -1, 1, 24, 1, -4, 8, 10]) ➞ 80\n\nNotes\nN/A",
    "tags": [
      "algorithms",
      "algebra",
      "math",
      "numbers"
    ],
    "title": "Max Adjacent Product"
  },
  {
    "_id": "X4v5Bh89P3inLEHH4",
    "difficulty": 1.086734693877551,
    "language": "python3",
    "summary": "Given a list of directions to spin, \"left\" or \"right\", return an integer of how many full 360° rotations were made. Note that each word in the list counts as a 90° rotation in that direction.\n\nWorked Example\nspin_around([\"right\", \"right\", \"right\", \"right\", \"left\", \"right\"]) ➞ 1\nYou spun right 4 times (90 * 4 = 360)\nYou spun left once (360 - 90 = 270)\nBut you s",
    "tags": [
      "arrays",
      "language_fundamentals"
    ],
    "title": "Spin Around, Touch the Ground"
  },
  {
    "_id": "88RHBqSA84yT3fdLM",
    "difficulty": 1.0870748299319728,
    "language": "python3",
    "summary": "Create a function that takes a single word string and does the following:\n\nConcatenates inator to the end if the word ends with a consonant, otherwise, concatenate -inator instead.\n\nAdds the word length of the original word to the end, supplied with \"000\".\n\nThe examples should make this clear.\n\nExamples\ninator_inator(\"Shrink\") ➞ \"Shrinkinator 6000\"\n\ninator_ina",
    "tags": [
      "formatting",
      "strings"
    ],
    "title": "Functioninator 8000"
  },
  {
    "_id": "xYpG6ry6CLqgcwRWC",
    "difficulty": 1.0870748299319728,
    "language": "python3",
    "summary": "Create a function that takes a list of numbers and returns the sum of the two lowest positive numbers.\n\nExamples\nsumtwosmallest_nums([19, 5, 42, 2, 77]) ➞ 7\n\nsumtwosmallest_nums([10, 343445353, 3453445, 3453545353453]) ➞ 3453455\n\nsumtwosmallest_nums([2, 9, 6, -1]) ➞ 8\n\nsumtwosmallest_nums([879, 953, 694, -847, 342, 221, -91, -723, 791, -587]) ➞ 563\n\nsumtwosmal",
    "tags": [
      "arrays",
      "math",
      "numbers"
    ],
    "title": "Return the Sum of the Two Smallest Numbers"
  },
  {
    "_id": "6pFZZ9CdSFDGhvNBc",
    "difficulty": 1.087248322147651,
    "language": "python3",
    "summary": "Create a function that returns \"even\" if a number has an even number of factors and \"odd\" if a number has an odd number of factors.\n\nExamples\nfactor_group(33) ➞ \"even\"\n\nfactor_group(36) ➞ \"odd\"\n\nfactor_group(7) ➞ \"even\"\n\nNotes\nYou don't need to actually calculate the factors to solve this problem.\nThink about why a number would have an odd number of factors.",
    "tags": [
      "math",
      "validation",
      "logic"
    ],
    "title": "Even or Odd Number of Factors"
  },
  {
    "_id": "e9nBwAjkdMX9LQd4f",
    "difficulty": 1.0874200426439233,
    "language": "python3",
    "summary": "Fixed quantifiers indicate numbers of characters or expressions to match.\n\nx{n} matches exactly \"n\" occurrences of the preceding item \"x\":\n\nre.findall(\"a{2}\", \"candy\") ➞ []\nre.findall(\"a{2}\", \"caandy\") ➞ [\"aa\"]\n\nx{n,} matches at least \"n\" occurrences of the preceding item \"x\":\nre.findall(\"a{2,}\", \"candy\") ➞ []\nre.findall(\"a{2,}\", \"caandy\") ➞ [\"aa\"]\nre.findall(",
    "tags": [
      "regex"
    ],
    "title": "RegEx XVIII: Fixed Quantifiers"
  },
  {
    "_id": "DGpxmRkADuZaWHJxZ",
    "difficulty": 1.0874604847207587,
    "language": "python3",
    "summary": "Steve and Maurice have racing snails. They each have three, a slow s, medium m and fast f one. Although Steve's snails are all a bit stronger than Maurice's, Maurice has a trick up his sleeve. His plan is:\n\nRound 1: [s, f] Sacrifice his slowest snail against Steve's fastest.\nRound 2: [m, s] Use his middle snail against Steve's slowest.\nRound 3: [f, m] Use his",
    "tags": [
      "arrays",
      "games",
      "validation"
    ],
    "title": "Snail Race"
  },
  {
    "_id": "fYMjhe7BnijXwfNpF",
    "difficulty": 1.0875912408759123,
    "language": "python3",
    "summary": "Create a function that takes a string and returns the first character of every word if the length is even and the middle character if the length is odd.\n\nExamples\nstmid(\"Alexa have to paid\") ➞ \"ehtp\"\n\nstmid(\"Th3 0n3 4nd 0n1y\") ➞ \"hnn0\"\n\nstmid(\"who is the winner\") ➞ \"hihw\"\n\nNotes\nN/A",
    "tags": [
      "strings",
      "math"
    ],
    "title": "First N Mid"
  },
  {
    "_id": "iqaQLvS7yfGR2wJyL",
    "difficulty": 1.0876095118898623,
    "language": "python3",
    "summary": "Create a function that will return an integer number corresponding to the amount of digits in the given integer num.\n\nExamples\nnumofdigits(1000) ➞ 4\n\nnumofdigits(12) ➞ 2\n\nnumofdigits(1305981031) ➞ 10\n\nnumofdigits(0) ➞ 1\n\nNotes\nTry to solve this challenge without using strings!",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "Find Number of Digits in Number"
  },
  {
    "_id": "LByfZDbfkYTyZs8cD",
    "difficulty": 1.0876288659793814,
    "language": "python3",
    "summary": "Given the side length x find the area of a hexagon.\n\nFormula to find the area of a hexagon\n\nExamples\nareaofhexagon(1) ➞ 2.6\n\nareaofhexagon(2) ➞ 10.4\n\nareaofhexagon(3) ➞ 23.4\n\nNotes\nReturn None if the side length given is not a positive integer.\nRound to the nearest tenth.",
    "tags": [
      "algorithms",
      "math",
      "geometry"
    ],
    "title": "Find the Area of a (Regular) Hexagon"
  },
  {
    "_id": "nPdPSgSsGfdyRbHkd",
    "difficulty": 1.08801624915369,
    "language": "python3",
    "summary": "Create a function that takes a string as an argument and returns a coded (h4ck3r 5p34k) version of the string.\n\nExamples\nhacker_speak(\"javascript is cool\") ➞ \"j4v45cr1pt 15 c00l\"\n\nhacker_speak(\"programming is fun\") ➞ \"pr0gr4mm1ng 15 fun\"\n\nhacker_speak(\"become a coder\") ➞ \"b3c0m3 4 c0d3r\"\n\nNotes\nIn order to work properly, the function should replace all \"a\"s wi",
    "tags": [
      "arrays",
      "functional_programming",
      "control_flow",
      "conditions"
    ],
    "title": "H4ck3r Sp34k"
  },
  {
    "_id": "Dm7iqogzdGJTsaHZg",
    "difficulty": 1.088089330024814,
    "language": "python3",
    "summary": "Write a function that retrieves all words that begin with a vowel.\n\nExamples\nretrieve(\"A simple life is a happy life for me.\") ➞ [\"a\", \"is\", \"a\"]\n\nretrieve(\"Exercising is a healthy way to burn off energy.\")\n➞ [\"exercising\", \"is\", \"a\", \"off\", \"energy\"]\n\nretrieve(\"The poor ostrich was ostracized.\")\n➞ [\"ostrich\", \"ostracized\"]\n\nretrieve(\"\")\n➞ []\n\nNotes\nMake all w",
    "tags": [
      "strings",
      "regex"
    ],
    "title": "Words that Start with a Vowel"
  },
  {
    "_id": "X8fNb5EouWxrMMjZL",
    "difficulty": 1.088235294117647,
    "language": "python3",
    "summary": "Create a function, example:\n\n10 is number\n\n10 is even - 10 / 2 = 5\n5 is odd - 5 * 3 + 1 = 16\n16 is even - 16 / 2 = 8\n8 is even - 8 / 2 = 4\n4 is even - 4 / 2 = 2\n2 is even - 2 / 2 = 1 -> if reach 1, return 6 steps\n\nConsider the following operation on an arbitrary positive integer:\nif n is even -> n / 2\nif n is odd -> n * 3 + 1\n\nExamples\ncollatz(2) ➞ 1\n\ncollatz(",
    "tags": [
      "algebra",
      "algorithms",
      "numbers",
      "loops",
      "recursion"
    ],
    "title": "The Collatz Conjecture"
  },
  {
    "_id": "6LjNTxQb6gtbS77FD",
    "difficulty": 1.0883720930232559,
    "language": "python3",
    "summary": "Noddy has written a mysterious function which takes in a word and returns True if it's passed a specific test. Solve the riddle of what Noddy's function is by having a look at some of the examples below.\n\nExamples\nnoddy_function(\"FANTASTIC\") ➞ True\n\nnoddy_function(\"wonderful\") ➞ False\n\nnoddy_function(\"NODDY\") ➞ False\n\nNotes\nCheck the Tests tab for more example",
    "tags": [
      "strings",
      "validation"
    ],
    "title": "Noddy's Mystery Function"
  },
  {
    "_id": "RTZRnXCJkfALTTdqt",
    "difficulty": 1.0883912787271657,
    "language": "python3",
    "summary": "Create a function that takes a list of positive and negative numbers. Return a list where the first element is the count of positive numbers and the second element is the sum of negative numbers.\n\nExamples\nsum_neg([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15]) ➞ [10, -65]\nThere are a total of 10 positive numbers.\nThe sum of all negative numbers equa",
    "tags": [
      "arrays",
      "conditions",
      "numbers"
    ],
    "title": "Positive Count / Negative Sum"
  },
  {
    "_id": "q3JMk2yqXfNyHWE9c",
    "difficulty": 1.0886654478976234,
    "language": "python3",
    "summary": "Create a function that takes a word and returns True if the word has two consecutive identical letters.\n\nExamples\ndouble_letters(\"loop\") ➞ True\n\ndouble_letters(\"yummy\") ➞ True\n\ndouble_letters(\"orange\") ➞ False\n\ndouble_letters(\"munchkin\") ➞ False\n\nNotes\nN/A",
    "tags": [
      "strings",
      "regex",
      "validation"
    ],
    "title": "Double Letters"
  },
  {
    "_id": "uS8tMvEyvTXD88wps",
    "difficulty": 1.088939566704675,
    "language": "python3",
    "summary": "Write a function that takes a string of one or more words as an argument and returns the same string, but with all five or more letter words reversed. Strings passed in will consist of only letters and spaces. Spaces will be included only when more than one word is present.\n\nExamples\nreverse(\"Reverse\") ➞ \"esreveR\"\n\nreverse(\"This is a typical sentence.\") ➞ \"Thi",
    "tags": [
      "formatting",
      "sorting",
      "strings",
      "regex",
      "loops"
    ],
    "title": "Reverse the Order of Words with Five Letters or More"
  },
  {
    "_id": "bPHcgMpkf9WvbwbAo",
    "difficulty": 1.089567966280295,
    "language": "python3",
    "summary": "Create a function that takes a list of 10 numbers (between 0 and 9) and returns a string of those numbers formatted as a phone number (e.g. (555) 555-5555).\n\nExamples\nformatphonenumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) ➞ \"(123) 456-7890\"\n\nformatphonenumber([5, 1, 9, 5, 5, 5, 4, 4, 6, 8]) ➞ \"(519) 555-4468\"\n\nformatphonenumber([3, 4, 5, 5, 0, 1, 2, 5, 2, 7]) ➞ \"(3",
    "tags": [
      "formatting",
      "arrays",
      "numbers"
    ],
    "title": "Phone Number Formatting"
  },
  {
    "_id": "suhHcPgaKdb9YCrve",
    "difficulty": 1.089820359281437,
    "language": "python3",
    "summary": "Create a function to determine if the sum of all the individual even digits are greater than the sum of all the individual odd digits in a string of numbers.\n\nIf the sum of odd numbers is greater than the sum of even numbers, return \"Odd is greater than Even\".\nIf the sum of even numbers is greater than the odd numbers, return \"Even is greater than Odd\".\nIf the",
    "tags": [
      "arrays",
      "algorithms",
      "language_fundamentals",
      "numbers",
      "strings"
    ],
    "title": "Even or Odd: Which is Greater?"
  },
  {
    "_id": "sCH5gcyoRqq3Gfzyi",
    "difficulty": 1.0899122807017543,
    "language": "python3",
    "summary": "Create a function which validates whether a given number exists, and could represent a real life quantity. Inputs will be given as a string.\n\nExamples\nvalidstrnumber(\"3.2\") ➞ True\n\nvalidstrnumber(\"324\") ➞ True\n\nvalidstrnumber(\"54..4\") ➞ False\n\nvalidstrnumber(\"number\") ➞ False\n\nNotes\nAccept numbers such as .5 and 0003.",
    "tags": [
      "numbers",
      "language_fundamentals",
      "validation"
    ],
    "title": "Does a Number Exist?"
  },
  {
    "_id": "3f2qF2CgM32zvQTwa",
    "difficulty": 1.0904392764857882,
    "language": "python3",
    "summary": "Given a simple math expression as a string, neatly format it as an equation.\n\nExamples\nformat_math(\"3 + 4\") ➞ \"3 + 4 = 7\"\n\nformat_math(\"3 - 2\") ➞ \"3 - 2 = 1\"\n\nformat_math(\"4 x 5\") ➞ \"4 x 5 = 20\"\n\nformat_math(\"6 / 3\") ➞ \"6 / 3 = 2\"\n\nNotes\nYou will need to deal with addition, subtraction, multiplication and division.\nDivision will have whole number answers (and",
    "tags": [
      "strings",
      "formatting",
      "math"
    ],
    "title": "Neatly Formatted Math"
  },
  {
    "_id": "GoGbZtXDYPDCfeBz8",
    "difficulty": 1.0909090909090908,
    "language": "python3",
    "summary": "You are to read each part of the date into its own integer type variable. The year should be a 4 digit number. You can assume the user enters a correct date (no error checking required).\n\nDetermine whether the entered date is a magic date. Here are the rules for a magic date:\n\nmm * dd is a 1-digit number that matches the last digit of yyyy or\nmm * dd is a 2-di",
    "tags": [
      "dates",
      "numbers",
      "validation"
    ],
    "title": "Magic Date"
  },
  {
    "_id": "nFA52oAmxjebgpPQy",
    "difficulty": 1.0909090909090908,
    "language": "python3",
    "summary": "Given a word, write a function that returns the first index and the last index of a character.\n\nExamples\nchar_index(\"hello\", \"l\") ➞ [2, 3]\nThe first \"l\" has index 2, the last \"l\" has index 3.\n\nchar_index(\"circumlocution\", \"c\") ➞ [0, 8]\nThe first \"c\" has index 0, the last \"c\" has index 8.\n\nchar_index(\"happy\", \"h\") ➞ [0, 0]\nOnly one \"h\" exists, so the first and ",
    "tags": [
      "language_fundamentals",
      "arrays"
    ],
    "title": "First and Last Index"
  },
  {
    "_id": "NzTTMBsyiYHWRyBhS",
    "difficulty": 1.0911854103343466,
    "language": "python3",
    "summary": "For each challenge of this series you do not need to submit a function. Instead, you need to submit a template string that can formatted in order to get a certain outcome.\n\nWrite a three templates string according to the following example. All final strings must have a length of 20 characters:\n\nExample\nstarry = \"yourtemplatestringhere\"\ndash = \"yourtemplatestri",
    "tags": [
      "formatting",
      "strings",
      "language_fundamentals"
    ],
    "title": "Format VI: Padding"
  },
  {
    "_id": "9YmYQTdPSdr8K8Bnz",
    "difficulty": 1.0912280701754387,
    "language": "python3",
    "summary": "Write a function that takes a list and returns a new list with unique positive (more than 0) numbers.\n\nExamples\nunique_lst([-5, 1, -7, -5, -2, 3, 3, -5, -1, -1]) ➞ [1, 3]\n\nunique_lst([3, -3, -3, 5, 5, -6, -2, -4, -1, 3]) ➞ [3, 5]\n\nunique_lst([10, 6, -12, 13, 5, 5, 13, 6, 5]) ➞ [10, 6, 13, 5]\n\nNotes\nReturn the elements in the order that they are found in the li",
    "tags": [
      "loops",
      "numbers",
      "formatting",
      "arrays"
    ],
    "title": "Find Unique Positive Numbers from Array"
  },
  {
    "_id": "MiAnCNYivnAc9AFXn",
    "difficulty": 1.0913705583756346,
    "language": "python3",
    "summary": "Create a function that changes all the elements in a list as follows:\n\nAdd 1 to all even integers, nothing to odd integers.\nConcatenates \"!\" to all strings and capitalises them.\nChanges all boolean values to its opposite.\n\nExamples\nchange_types([\"a\", 12, True]) ➞ [\"A!\", 13, False]\n\nchange_types([13, \"13\", \"12\", \"twelve\"]) ➞ [13, \"13!\", \"12!\", \"Twelve!\"]\n\nchang",
    "tags": [
      "arrays",
      "conditions"
    ],
    "title": "Changing Mixed Types"
  },
  {
    "_id": "fxoMBTRoi3yNdruWE",
    "difficulty": 1.0914962325080733,
    "language": "python3",
    "summary": "Create a function that returns True if an asterisk * is inside a box.\n\nExamples\nin_box([\n  \"###\",\n  \"#*#\",\n  \"###\"\n]) ➞ True\n\nin_box([\n  \"####\",\n  \"#* #\",\n  \"#  #\",\n  \"####\"\n]) ➞ True\n\nin_box([\n  \"*####\",\n  \"# #\",\n  \"#  #*\",\n  \"####\"\n]) ➞ false\n\nin_box([\n  \"#####\",\n  \"#   #\",\n  \"#   #\",\n  \"#   #\",\n  \"#####\"\n]) ➞ False\n\nNotes\nThe asterisk may be in the array, h",
    "tags": [
      "sorting",
      "formatting",
      "validation",
      "loops"
    ],
    "title": "Something in the Box?"
  },
  {
    "_id": "8jwMviqNvedEmyBic",
    "difficulty": 1.0915750915750915,
    "language": "python3",
    "summary": "Write the regular expression that will match a string if there are no spaces right before the last ending punctuation ?. Use the character class \\S in your expression.\n\nExample\ntxt1 = \"Can read a spray chart and a balance sheet. 1 part Executive, 1 part entrepreneur, 2 parts geek and 3 parts baseball coach. Too many parts?\"\ntxt2 = \"Can read a spray chart and a",
    "tags": [
      "regex",
      "validation"
    ],
    "title": "RegEx XI-C: Whitespace Character Class"
  },
  {
    "_id": "GQjKJtG6dqeyBSCqX",
    "difficulty": 1.091743119266055,
    "language": "python3",
    "summary": "Given three lists of integers: lst1, lst2, lst3, return the sum of integers which are common in all three lists.\n\nExamples\nsum_common([1, 2, 3], [5, 3, 2], [7, 3, 2]) ➞ 5\n// 2 & 3 are common in all 3 lists.\n\nsum_common([1, 2, 2, 3], [5, 3, 2, 2], [7, 3, 2, 2]) ➞ 7\n// 2, 2 & 3 are common in all 3 lists.\n\nsum_common([1], [1], [2]) ➞ 0\n\nNotes\nN/A",
    "tags": [
      "arrays",
      "interview",
      "math",
      "numbers"
    ],
    "title": "Three Lists!"
  },
  {
    "_id": "9tkmnkgWyxaWeRTNt",
    "difficulty": 1.0918984280532043,
    "language": "python3",
    "summary": "Create a function that takes an array of numbers and return its median. If the input array is even length, take the average of the two medians, else, take the single median.\n\nExamples\nmedian([2, 5, 6, 2, 6, 3, 4]) ➞ 4\n\nmedian([21.4323, 432.54, 432.3, 542.4567]) ➞ 432.4\n\nmedian([-23, -43, -29, -53, -67]) ➞ -43\n\nNotes\nInput can be any negative or positive number",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "Calculate the Median"
  },
  {
    "_id": "XrQnBBLaGRkXZuM8n",
    "difficulty": 1.0919540229885059,
    "language": "python3",
    "summary": "Create a function that takes two inputs: indexes (a list of integers) and string (a string). The function should return another string with the letters of string at each index in indexes in order.\n\nExamples\nindex_filter([2, 3, 8, 11], \"Autumn in New York\") ➞ \"tune\"\n\nindex_filter([0, 1, 5, 7, 4, 2], \"Cry me a river\") ➞ \"creamy\"\n\nindex_filter([9, -9, 2, 27, 36,",
    "tags": [
      "arrays",
      "strings"
    ],
    "title": "Index Filtering"
  },
  {
    "_id": "WLKF79mxKnhjtrFRB",
    "difficulty": 1.0920096852300243,
    "language": "python3",
    "summary": "In this challenge you will be given a list of numbers. Your task is to \"marry\" each pair of adjacent numbers by adding them, and return the list of \"couples\" (i.e. sums).\n\nIf the list has an odd length, one number is (sadly) left out, so you should return \"bad match\".\n\nExamples\nisgoodmatch([1, 2, 4, 7]) ➞ [1+2, 4+7] ➞ [3, 11]\n\nisgoodmatch([5, 7, 9, -1, 4, 2])",
    "tags": [
      "algebra",
      "arrays",
      "math",
      "sorting"
    ],
    "title": "Good Match?"
  },
  {
    "_id": "Fx7hyoNTZNMGzc3uj",
    "difficulty": 1.0922619047619047,
    "language": "python3",
    "summary": "Create a sorting function which sorts numbers not by numerical order, but by number length! This means sorting numbers with the least digits first, up to the numbers with the most digits.\n\nExamples\nnumberlensort([1, 54, 1, 2, 463, 2]) ➞ [1, 1, 2, 2, 54, 463]\n\nnumberlensort([999, 421, 22, 990, 32]) ➞ [22, 32, 999, 421, 990]\n\nnumberlensort([9, 8, 7, 6, 5, 4, 31,",
    "tags": [
      "numbers",
      "sorting"
    ],
    "title": "Number Length Sort"
  },
  {
    "_id": "5rnrzDzjmw9658872",
    "difficulty": 1.0923076923076922,
    "language": "python3",
    "summary": "For each challenge of this series you do not need to submit a function. Instead, you need to submit a template string that can be formatted in order to get a certain outcome.\n\nWrite three template strings according to the following example. All final strings must have a length of 30 characters. Notice the period . at the end of the strings:\n\nExample\nname = \"Jo",
    "tags": [
      "strings",
      "formatting",
      "language_fundamentals"
    ],
    "title": "Format V: Alignment"
  },
  {
    "_id": "KExMohNcKkJYeTE2E",
    "difficulty": 1.0924657534246576,
    "language": "python3",
    "summary": "Create a function that takes two vectors as lists and checks if the two vectors are orthogonal or not. The return value is boolean. Two vectors first and second are orthogonal if their dot product is equal to zero.\n\nExamples\nis_orthogonal([1, 2], [2, -1]) ➞ True\n\nis_orthogonal([3, -1], [7, 5]) ➞ False\n\nis_orthogonal([1, 2, 0], [2, -1, 10]) ➞ True\n\nNotes\nThe tw",
    "tags": [
      "math",
      "language_fundamentals",
      "validation"
    ],
    "title": "Orthogonal Vector"
  },
  {
    "_id": "z5zpTucxpMLL72FCx",
    "difficulty": 1.0925324675324675,
    "language": "python3",
    "summary": "Write a function to return the city from each of these vacation spots.\n\nExamples\ngrab_city(\"[Last Day!] Beer Festival [Munich]\") ➞ \"Munich\"\n\ngrab_city(\"Cheese Factory Tour [Portland]\") ➞ \"Portland\"\n\ngrab_city(\"50% Off! 5-Day Trip to Onsen [Kyoto]\") ➞ \"Kyoto\"\n\nNotes\nThere may be additional brackets, but the city will always be in the last bracket pair.",
    "tags": [
      "regex",
      "strings"
    ],
    "title": "Grab the City"
  },
  {
    "_id": "Jgeq7puc9mBBgr9SF",
    "difficulty": 1.0925925925925926,
    "language": "python3",
    "summary": "Create a function which adds zeros to the start of a binary string, so that its length is a mutiple of 8.\n\nExamples\ncomplete_binary(\"1100\") ➞ \"00001100\"\n\ncomplete_binary(\"1101100\") ➞ \"01101100\"\n\ncomplete_binary(\"110010100010\") ➞ \"0000110010100010\"\n\nNotes\nReturn the same string if its length is already a multiple of 8.",
    "tags": [
      "language_fundamentals",
      "strings",
      "formatting"
    ],
    "title": "Complete the Binary Number"
  },
  {
    "_id": "dFz2PDjQkXZ9FhEaz",
    "difficulty": 1.092687074829932,
    "language": "python3",
    "summary": "Create a function that accepts a list of two strings and checks if the letters in the second string are present in the first string.\n\nExamples\nletter_check([\"trances\", \"nectar\"]) ➞ True\n\nletter_check([\"compadres\", \"DRAPES\"]) ➞ True\n\nletter_check([\"parses\", \"parsecs\"]) ➞ False\n\nNotes\nFunction should not be case sensitive (as indicated in the second example).\nBo",
    "tags": [
      "strings",
      "validation",
      "regex"
    ],
    "title": "Are Letters in the Second String Present in the First?"
  },
  {
    "_id": "tnKZCAkdnZpiuDiWA",
    "difficulty": 1.0926879505664264,
    "language": "python3",
    "summary": "Create a function that takes a string and returns a new string with its first and last characters swapped, except under three conditions:\n\nIf the length of the string is less than two, return \"Incompatible.\".\nIf the argument is not a string, return \"Incompatible.\".\nIf the first and last characters are the same, return \"Two's a pair.\".\n\nExamples\nflipendchars(\"C",
    "tags": [
      "strings",
      "arrays",
      "conditions",
      "validation"
    ],
    "title": "Switcharoo"
  },
  {
    "_id": "vaufKtjX3gKoq9PeS",
    "difficulty": 1.093167701863354,
    "language": "python3",
    "summary": "Create a function that calculates the missing value of 3 inputs using Ohm's law. The inputs are v, r or i (aka: voltage, resistance and current).\n\nOhm's law:\nV = R * I\n\nReturn the missing value rounded to two decimal places.\n\nExamples\nohms_law(12, 220, None) ➞ 0.05\n\nohms_law(230, None, 2) ➞ 115\n\nohms_law(None, 220, 0.02) ➞ 4.4\n\nohms_law(None, None, 10) ➞ \"Inva",
    "tags": [
      "math",
      "physics"
    ],
    "title": "Calculate the Missing Value with Ohm's Law"
  },
  {
    "_id": "CB3pKsWR3b7tvvxmN",
    "difficulty": 1.0937081659973227,
    "language": "python3",
    "summary": "A palindrome is a word, phrase, number or other sequence of characters which reads the same backward or forward, such as madam or kayak.\n\nWrite a function that takes a string and determines whether it's a palindrome or not. The function should return a boolean (True or False value).\n\nExamples\nis_palindrome(\"Neuquen\") ➞ True\n\nis_palindrome(\"Not a palindrome\") ➞",
    "tags": [
      "strings",
      "validation"
    ],
    "title": "Check if the String is a Palindrome"
  },
  {
    "_id": "towwrEJ7zr8xKGSr5",
    "difficulty": 1.09375,
    "language": "python3",
    "summary": "Mubashir created a simple robot that is navigated by a series of North, East, South, and West [n, e, s, w] commands. The robot is designed for only two destinations:\n\nDestination No. 1: e, n, e, e, n\nDestination No. 2: w, n, w, n, w, w, n\n\nCreate a function that takes a list of commands and returns true if the robot reaches any of the destinations, false other",
    "tags": [
      "algorithms",
      "logic",
      "validation",
      "language_fundamentals"
    ],
    "title": "Robot Path 🤖"
  },
  {
    "_id": "mJB9CYyGsADLQPjnx",
    "difficulty": 1.0937840785169028,
    "language": "python3",
    "summary": "Create a function that accepts a string as an argument and returns the first non-repeated character.\n\nExamples\nfirstnonrepeated_character(\"g\") ➞ \"g\"\n\nfirstnonrepeated_character(\"it was then the frothy word met the round night\") ➞ \"a\"\n\nfirstnonrepeated_character(\"the quick brown fox jumps then quickly blows air\") ➞ \"f\"\n\nfirstnonrepeated_character(\"hheelloo\") ➞",
    "tags": [
      "strings",
      "loops",
      "language_fundamentals",
      "interview"
    ],
    "title": "Find the First Non-Repeated Character"
  },
  {
    "_id": "kgMEhkNNjRmBTAAPz",
    "difficulty": 1.0940366972477065,
    "language": "python3",
    "summary": "Create a function that takes a string, removes all \"special\" characters (e.g. ! @ # $ % ^ & \\ *) and returns the new string. The only non-alphanumeric characters allowed are dashes -, underscores _ and spaces.\n\nExamples\nremovespecialcharacters(\"The quick brown fox!\") ➞ \"The quick brown fox\"\n\nremovespecialcharacters(\"%fd76$fd(-)6GvKlO.\") ➞ \"fd76fd-6GvKlO\"\n\nremo",
    "tags": [
      "strings",
      "formatting",
      "regex",
      "arrays"
    ],
    "title": "Remove the Special Characters from a String"
  },
  {
    "_id": "qCLK8BomNpXTtFYTn",
    "difficulty": 1.094375595805529,
    "language": "python3",
    "summary": "Create a function that takes a list of numbers and returns a list where each number is the sum of itself + all previous numbers in the list.\n\nExamples\ncumulative_sum([1, 2, 3]) ➞ [1, 3, 6]\n\ncumulative_sum([1, -2, 3]) ➞ [1, -1, 2]\n\ncumulative_sum([3, 3, -2, 408, 3, 3]) ➞ [3, 6, 4, 412, 415, 418]\n\nNotes\nReturn an empty list if the input is an empty list.",
    "tags": [
      "arrays",
      "math",
      "numbers",
      "loops"
    ],
    "title": "Cumulative List Sum"
  },
  {
    "_id": "527uLRjSofaTsMu36",
    "difficulty": 1.094810379241517,
    "language": "python3",
    "summary": "Create a function that takes a string and returns the middle character(s). If the word's length is odd, return the middle character. If the word's length is even, return the middle two characters.\n\nExamples\nget_middle(\"test\") ➞ \"es\"\n\nget_middle(\"testing\") ➞ \"t\"\n\nget_middle(\"middle\") ➞ \"dd\"\n\nget_middle(\"A\") ➞ \"A\"\n\nNotes\nAll test cases contain a single word (as",
    "tags": [
      "strings",
      "formatting",
      "math",
      "regex"
    ],
    "title": "Return the Middle Character(s) of a String"
  },
  {
    "_id": "GZhSDwwLwakxjpnoB",
    "difficulty": 1.0951219512195123,
    "language": "python3",
    "summary": "Check the principles of minimalist code in the [intro to the first challenge] (https://edabit.com/challenge/2XLjgZhmACph76Pkr).\n\nIn the Code tab you will find a code that is missing a single character in order to pass the tests. However, your goal is to submit a function as minimalist as possible. Use the tips in the tips section below.\n\nWrite a function that",
    "tags": [
      "logic",
      "language_fundamentals",
      "conditions"
    ],
    "title": "Minimal VIII: This and That"
  },
  {
    "_id": "HWxNGdeoPxzievGa3",
    "difficulty": 1.0951612903225807,
    "language": "python3",
    "summary": "A pair of strings form a strange pair if both of the following are true:\n\nThe 1st string's first letter = 2nd string's last letter.\nThe 1st string's last letter = 2nd string's first letter.\n\nCreate a function that returns True if a pair of strings constitutes a strange pair, and False otherwise.\n\nExamples\nisstrangepair(\"ratio\", \"orator\") ➞ True\n\"ratio\" ends wi",
    "tags": [
      "strings",
      "language_fundamentals",
      "validation"
    ],
    "title": "Strange Pair"
  },
  {
    "_id": "dcX6gmNguEi472uFE",
    "difficulty": 1.0952380952380953,
    "language": "python3",
    "summary": "Create a function that takes a number num and returns its double factorial. Mathematically, the formulas for double factorial are as follows.\n\nIf num is even:\n\nnum !! = num ( num - 2)( num - 4)( num - 6) ... (4)(2)\n\nIf num is odd:\n\nnum !! = num ( num - 2)(num - 4)(num - 6) ... (3)(1)\n\nIf num = 0 or num = -1, then num !! = 1 by convention.\n\nExamples\ndouble_fact",
    "tags": [
      "recursion",
      "numbers"
    ],
    "title": "Double Factorial"
  },
  {
    "_id": "gJSkZgCahFmCmQj3C",
    "difficulty": 1.0954063604240283,
    "language": "python3",
    "summary": "Create a function that returns the original value from a list with too many sub-lists.\n\nExamples\nde_nest([[[[[[[[[[[[3]]]]]]]]]]]]) ➞ 3\n\nde_nest([[[[[[[True]]]]]]]) ➞ True\n\nde_nest([[[[[[[[[[[[[[[[[\"edabit\"]]]]]]]]]]]]]]]]]) ➞ \"edabit\"\n\nNotes\nYou only need to retrieve one element.",
    "tags": [
      "arrays",
      "formatting",
      "loops"
    ],
    "title": "Extremely Over-Nested"
  },
  {
    "_id": "6DwrhEGSa6WDixA5u",
    "difficulty": 1.0960548885077186,
    "language": "python3",
    "summary": "A number is narcissistic when the sum of its digits, with each digit raised to the power of digits quantity, is equal to the number itself.\n\n153 ➞ 3 digits ➞ 1³ + 5³ + 3³ = 1 + 125 + 27 = 153 ➞ Narcissistic\n84 ➞ 2 digits ➞ 8² + 4² = 64 + 16 = 80 ➞ Not narcissistic\n\nGiven a positive integer n, implement a function that returns True if the number is narcissistic",
    "tags": [
      "numbers",
      "language_fundamentals",
      "validation"
    ],
    "title": "Narcissistic Numbers"
  },
  {
    "_id": "iK2F9DNAiTor2wFob",
    "difficulty": 1.096774193548387,
    "language": "python3",
    "summary": "Turn each character in a string s into its ASCII character code and join them together to create a number.\n\nFor example, for string \"abc\", the number is 979899. We will call this number \"num1\".\n\"abc\" ➞ \"a\" = 97, \"B\" = 98, \"C\" = 99 ➞ 979899\n\nThen replace any incidence of the number 7 with the number 1, and call this number \"num2\":\n\nnum1 = 979899\n\nnum2 = 919899",
    "tags": [
      "algorithms",
      "language_fundamentals",
      "math",
      "numbers"
    ],
    "title": "Character Code Math"
  },
  {
    "_id": "nzc3MX32Mwx4qAya3",
    "difficulty": 1.0972477064220183,
    "language": "python3",
    "summary": "Write a function that reverses the sublist between the start and end index (inclusive). The rest of the list should be kept the same.\n\nExamples\nranged_reversal([1, 2, 3, 4, 5, 6], 1, 3) ➞ [1, 4, 3, 2, 5, 6]\n\nranged_reversal([1, 2, 3, 4, 5, 6], 0, 4) ➞ [5, 4, 3, 2, 1, 6]\n\nranged_reversal([9, 8, 7, 4], 0, 0) ➞ [9, 8, 7, 4]\n\nNotes\nLists will be zero-indexed.\nThe",
    "tags": [
      "arrays",
      "language_fundamentals"
    ],
    "title": "Ranged Reversal"
  },
  {
    "_id": "i5kcGmT7gFKkf3mTi",
    "difficulty": 1.0982905982905984,
    "language": "python3",
    "summary": "Create a function that returns the data type of a given variable. These are the seven data types this challenge will be testing for:\n\nList\nDictionary\nString\nInteger\nFloat\nBoolean\nDate\n\nExamples\ndata_type([1, 2, 3, 4]) ➞ \"list\"\n\ndata_type({'key': \"value\"}) ➞ \"dictionary\"\n\ndata_type(\"This is an example string.\") ➞ \"string\"\n\ndata_type(datetime.date(2018,1,1)) ➞ \"",
    "tags": [
      "validation",
      "language_fundamentals"
    ],
    "title": "What's the Data Type?"
  },
  {
    "_id": "JBkfqYW4iYwmgvwTf",
    "difficulty": 1.0987261146496816,
    "language": "python3",
    "summary": "Create a function that returns True if a number is prime, and False otherwise. A prime number is any positive integer that is evenly divisible by only two divisors: 1 and itself.\n\nThe first ten prime numbers are:\n\n2, 3, 5, 7, 11, 13, 17, 19, 23, 29\n\nExamples\nis_prime(31) ➞ True\n\nis_prime(18) ➞ False\n\nis_prime(11) ➞ True\n\nNotes\nA prime number has no other facto",
    "tags": [
      "math",
      "validation"
    ],
    "title": "Check if a Number is Prime"
  },
  {
    "_id": "xzB3QsE8nRnxhBLce",
    "difficulty": 1.099290780141844,
    "language": "python3",
    "summary": "Create three functions that will do three things:\nMultiply one number by the sine of another number.\nMultiply one number by the COSINE of another number.\nMultiply one number by the tangent of another number.\n\nIn each function, you will be given 2 numbers: x and y. Another important thing to note, the numbers will be in degrees, not radians. That is extremely i",
    "tags": [
      "algebra",
      "math",
      "numbers"
    ],
    "title": "Sine, Cosine and Tangent"
  },
  {
    "_id": "Rvxp6owt97Tq7Qr9t",
    "difficulty": 1.0994152046783625,
    "language": "python3",
    "summary": "Regular Expressions (RegEx) are a powerful tool used to match or search for a pattern in a string. To use them in Python you need to import the re module. You can do this by adding the following line at the top of your file:\n\nimport re\n\nWrite a regular expression that will match any file located within the \"users/edabit\" directory. You must use RegEx line anch",
    "tags": [
      "formatting",
      "regex",
      "arrays",
      "validation"
    ],
    "title": "RegEx II: Line Anchors"
  },
  {
    "_id": "h9hp2vGKbHJBzN87i",
    "difficulty": 1.0997732426303855,
    "language": "python3",
    "summary": "Create a function that takes a phrase and transforms each word using the following rules:\n\nKeep first and last character the same.\nTransform middle characters into a dash -.\n\nExamples\npartially_hide(\"skies were pretty\") ➞ \"s---s w--e p----y\"\n\npartially_hide(\"red is not my color\") ➞ \"r-d is n-t my c---r\"\n\npartially_hide(\"She rolled her eyes\") ➞ \"S-e r----d h-r ",
    "tags": [
      "arrays",
      "strings",
      "formatting"
    ],
    "title": "Partially Hidden String"
  },
  {
    "_id": "kxrhqiE5so3AMXWS7",
    "difficulty": 1.1,
    "language": "python3",
    "summary": "A man has n number of apples. If he eats a percentage p  of the apples (if apples are available), his children will share the remainder of the apples. Create a function to determine the number of 'whole' apples his children got. If his children did not get any apple, return \"The children didn't get any apples\".\n\nExamples\ngetnumberof_apples(10, \"90%\") ➞ 1\n\ngetn",
    "tags": [
      "language_fundamentals",
      "math"
    ],
    "title": "Number of Apples Left"
  },
  {
    "_id": "zDei9LFWkX9d7wXyb",
    "difficulty": 1.1009174311926606,
    "language": "python3",
    "summary": "A man named Thomas Malthus described what is now called a Malthusian Catastrophe. According to him, food production grows by a fixed amount, but population grows by a percentage. So, the food supply would soon be insufficient for the population.\n\nYour job is to find out when that will occur. For this challenge, assume 1 population needs 1 unit of food producti",
    "tags": [
      "conditions",
      "dates",
      "math",
      "numbers"
    ],
    "title": "Malthusian Catastrophe"
  },
  {
    "_id": "u3kiw2gTY3S3ngJqo",
    "difficulty": 1.1011673151750974,
    "language": "python3",
    "summary": "Create a function that takes a list of names of superheroes and superheroines and returns a list of only the names of superheroes ending in \"man\" in alphabetical order.\n\nExamples\nsuperheroes([\"Batman\", \"Superman\", \"Spider-man\", \"Hulk\", \"Wolverine\", \"Wonder-Woman\"])\n➞ [\"Batman\", \"Spider-man\", \"Superman\"]\n\nsuperheroes([\"Catwoman\", \"Deadpool\", \"Dr.Strange\", \"Capt",
    "tags": [
      "arrays",
      "regex"
    ],
    "title": "Superheroes"
  },
  {
    "_id": "hxr3ZyPw2bZzrHEsf",
    "difficulty": 1.1033163265306123,
    "language": "python3",
    "summary": "Create a function that takes a string as an argument and converts the first character of each word to uppercase. Return the newly formatted string.\n\nExamples\nmake_title(\"This is a title\") ➞ \"This Is A Title\"\n\nmake_title(\"capitalize every word\") ➞ \"Capitalize Every Word\"\n\nmake_title(\"I Like Pizza\") ➞ \"I Like Pizza\"\n\nmake_title(\"PIZZA PIZZA PIZZA\") ➞ \"PIZZA PIZZ",
    "tags": [
      "formatting",
      "strings",
      "loops",
      "regex"
    ],
    "title": "Capitalize the First Letter of Each Word"
  },
  {
    "_id": "ZaEFRDBZ7ZMTiSEce",
    "difficulty": 1.10352422907489,
    "language": "python3",
    "summary": "You're given a string of words. You need to find the word \"Nemo\", and return a string like this: \"I found Nemo at [the order of the word you find nemo]!\".\n\nIf you can't find Nemo, return \"I can't find Nemo :(\".\n\nExamples\nfind_nemo(\"I am finding Nemo !\") ➞ \"I found Nemo at 4!\"\n\nfind_nemo(\"Nemo is me\") ➞ \"I found Nemo at 1!\"\n\nfind_nemo(\"I Nemo am\") ➞ \"I found Ne",
    "tags": [
      "arrays",
      "formatting",
      "strings"
    ],
    "title": "Finding Nemo"
  },
  {
    "_id": "o3AfiJgKNinPCFZ7k",
    "difficulty": 1.1045241809672386,
    "language": "python3",
    "summary": "Create a function that divides a string into parts of size n.\n\nExamples\npartition(\"chew\", 2) ➞ [\"ch\", \"ew\"]\n\npartition(\"thematic\", 4) ➞ [\"them\", \"atic\"]\n\npartition(\"c++\", 2) ➞ [\"c+\", \"+\"]\n\nNotes\nFor inputs that do not split evenly into N-sized parts, the last element in the array will have a \"leftover\" string (see example #3).",
    "tags": [
      "strings",
      "arrays"
    ],
    "title": "N-Sized Parts"
  },
  {
    "_id": "L7NK7McEQ9yEpTXRE",
    "difficulty": 1.1047120418848169,
    "language": "python3",
    "summary": "This is more informational than a challenge. You can actually switch 2 variables with the XOR operation ^. XOR works with two arguments. It turns both arguments into their binary representations, and for each bit, returns 1 if they are different, 0 otherwise.\n\nThe return value is the decimal representation of the new binary string. So, if you don't know how to",
    "tags": [
      "bit_operations",
      "language_fundamentals"
    ],
    "title": "XOR Swap Algorithm"
  },
  {
    "_id": "XZQw3zto7keDWPa5v",
    "difficulty": 1.1062039957939012,
    "language": "python3",
    "summary": "Create a function that takes the month and year (as integers) and returns the number of days in that month.\n\nExamples\nday_amount(2, 2018) ➞ 28\n\nday_amount(4, 654) ➞ 30\n\nday_amount(2, 200) ➞ 28\n\nday_amount(2, 1000) ➞ 28\n\nNotes\nDon't forget about leap years!",
    "tags": [
      "conditions",
      "dates"
    ],
    "title": "Days in a Month"
  },
  {
    "_id": "izfXy5SGfeekmKExH",
    "difficulty": 1.108,
    "language": "python3",
    "summary": "Write a function that takes two lists and adds the first element in the first list with the first element in the second list, the second element in the first list with the second element in the second list, etc, etc. Return True if all element combinations add up to the same number. Otherwise, return False.\n\nExamples\npuzzle_pieces([1, 2, 3, 4], [4, 3, 2, 1]) ➞",
    "tags": [
      "arrays",
      "higher_order_functions",
      "validation",
      "loops"
    ],
    "title": "Puzzle Pieces"
  },
  {
    "_id": "HXdh6znk86SHqhkz9",
    "difficulty": 1.1081560283687943,
    "language": "python3",
    "summary": "Fibonacci numbers are created in the following way:\n\nF(0) = 0\nF(1) = 1\n...\nF(n) = F(n-2) + F(n-1)\n\nWrite a function that calculates the nth Fibonacci number.\n\nExamples\nfib(0) ➞ 0\n\nfib(1) ➞ 1\n\nfib(2) ➞ 1\n\nfib(8) ➞ 21\n\nNotes\nN/A",
    "tags": [
      "numbers",
      "recursion"
    ],
    "title": "Recursion: Fibonacci Numbers"
  },
  {
    "_id": "w9bSQFALfQto9sboQ",
    "difficulty": 1.1081967213114754,
    "language": "python3",
    "summary": "Write a function that returns the greatest common divisor (GCD) of two integers.\n\nExamples\ngcd(32, 8) ➞ 8\n\ngcd(8, 12) ➞ 4\n\ngcd(17, 13) ➞ 1\n\nNotes\nBoth values will be positive.\nThe GCD is the largest factor that divides both numbers.",
    "tags": [
      "numbers",
      "math",
      "recursion"
    ],
    "title": "GCD of Two Numbers"
  },
  {
    "_id": "ZDSrKXGH4dG9M4iuP",
    "difficulty": 1.1083333333333334,
    "language": "python3",
    "summary": "Create a function that takes a string s and returns a list of two-paired characters. If the string has an odd number of characters, add an asterisk * in the final pair.\n\nSee the below examples for a better understanding:\n\nExamples\nstring_pairs(\"mubashir\") ➞ [\"mu\", \"ba\", \"sh\", \"ir\"]\n\nstring_pairs(\"edabit\") ➞ [\"ed\", \"ab\", \"it\"]\n\nstring_pairs(\"airforces\") ➞ [\"ai\"",
    "tags": [
      "strings",
      "language_fundamentals",
      "arrays",
      "conditions"
    ],
    "title": "String Pairs"
  },
  {
    "_id": "GrPXERNbrjyCmHPDg",
    "difficulty": 1.1096153846153847,
    "language": "python3",
    "summary": "Create a function that takes a string and returns the number of alphanumeric characters that occur more than once.\n\nExamples\nduplicate_count(\"abcde\") ➞ 0\n\nduplicate_count(\"aabbcde)\" ➞ 2\n\nduplicate_count(\"Indivisibilities\") ➞ 2\n\nduplicate_count(\"Aa\") ➞ 0\nCase sensitive\n\nNotes\nDuplicate characters are case sensitive.\nThe input string will contain only alphanumer",
    "tags": [
      "strings",
      "validation",
      "interview"
    ],
    "title": "Count the Number of Duplicate Characters"
  },
  {
    "_id": "fA99WMH2xBndowm5a",
    "difficulty": 1.1117021276595744,
    "language": "python3",
    "summary": "Write a regular expression that matches a string if and only if it is a valid zip code.\n\nExamples\n\"32554\" ➞ True\n\n\"92 342\" ➞ False\nInvalid: contains a whitespace\n\n\"9@342\" ➞ False\nInvalid: contains a non-numeric character\n\n\"923444\" ➞ False\nInvalid: length is not 5\n\nNotes\nZipcodes must be 5 digits long exactly and only contain numbers.\nNot allowed: non-numeric c",
    "tags": [
      "strings",
      "regex"
    ],
    "title": "Regex Series: 5-Digit Zip Code"
  },
  {
    "_id": "6gtZYiqMWjSgLHAou",
    "difficulty": 1.1123321123321124,
    "language": "python3",
    "summary": "Create a function that takes a number as an argument and returns a string formatted to separate thousands.\n\nExamples\nformat_num(1000) ➞ \"1,000\"\n\nformat_num(100000) ➞ \"100,000\"\n\nformat_num(20) ➞ \"20\"\n\nNotes\nYou can expect a valid number for all test cases.",
    "tags": [
      "formatting",
      "numbers",
      "strings",
      "regex"
    ],
    "title": "Format Number with Comma(s) Separating Thousands"
  },
  {
    "_id": "JsLu5qWsJtuJuBZT4",
    "difficulty": 1.1130063965884862,
    "language": "python3",
    "summary": "Create a function that takes a string as the first argument, and a (string) specification as a second argument. If the specification is \"word\", return a string with each word reversed while maintaining their original order. If the specification is \"sentence\", reverse the order of the words in the string, while keeping the words intact.\n\nExamples\ntxt = \"There's",
    "tags": [
      "language_fundamentals",
      "strings"
    ],
    "title": "String Flips"
  },
  {
    "_id": "YqeS2Ta52jyjS7cD7",
    "difficulty": 1.1135265700483092,
    "language": "python3",
    "summary": "Check the principles of minimalist code in the [intro to the first challenge] (https://edabit.com/challenge/2XLjgZhmACph76Pkr).\n\nIn the Code tab you will find a code that is missing a single character in order to pass the tests. However, your goal is to submit a function as minimalist as possible. Use the tips in the tips section below.\n\nWrite a function that",
    "tags": [
      "logic",
      "language_fundamentals",
      "conditions"
    ],
    "title": "Minimal III: You're a Boolean Now"
  },
  {
    "_id": "veFgC7QFEBmG6xE3G",
    "difficulty": 1.1162790697674418,
    "language": "python3",
    "summary": "Carlos is a huge fan of something he calls smooth sentences.\n\nA smooth sentence is one where the last letter of each word is identical to the first letter the following word (and not case sensitive, so \"A\" would be the same as \"a\").\n\nThe following would be a smooth sentence \"Carlos swam masterfully\" because \"Carlos\" ends with an \"s\" and swam begins with an \"s\"",
    "tags": [
      "strings",
      "validation"
    ],
    "title": "Smooth Sentences"
  },
  {
    "_id": "cWQ5Qf98dQPoPJTjX",
    "difficulty": 1.1169590643274854,
    "language": "python3",
    "summary": "Create a function that takes in a sentence and a character to find. Return a dictionary of each word in the sentence, with the number of the specified character as the value.\n\nExamples\nfind_occurrences(\"Hello World\", \"o\") ➞ {\n  \"hello\" : 1,\n  \"world\" : 1\n}\n\nfind_occurrences(\"Create a nice JUICY function\", \"c\") ➞  {\n  \"create\" : 1,\n  \"a\" : 0,\n  \"nice\" : 1,\n  \"j",
    "tags": [
      "arrays",
      "data_structures",
      "algorithms"
    ],
    "title": "Letter Occurrences Per Word"
  },
  {
    "_id": "eAnhzXPeGbobqk2P2",
    "difficulty": 1.1188589540412044,
    "language": "python3",
    "summary": "Create a function that takes in a year and returns the correct century.\n\nExamples\ncentury(1756) ➞ \"18th century\"\n\ncentury(1555) ➞ \"16th century\"\n\ncentury(1000) ➞ \"10th century\"\n\ncentury(1001) ➞ \"11th century\"\n\ncentury(2005) ➞ \"21st century\"\n\nNotes\nAll years will be between 1000 and 2010.\nThe 11th century is between 1001 and 1100.\nThe 18th century is between 17",
    "tags": [
      "strings",
      "numbers",
      "control_flow"
    ],
    "title": "Get the Century"
  },
  {
    "_id": "BmZ6PGMJiLWMzgvos",
    "difficulty": 1.1193853427895981,
    "language": "python3",
    "summary": "A list is special if every even index contains an even number and every odd index contains an odd number. Create a function that returns True if an array is special, and False otherwise.\n\nExamples\nisspecialarray([2, 7, 4, 9, 6, 1, 6, 3]) ➞ True\nEven indices: [2, 4, 6, 6]; Odd indices: [7, 9, 1, 3]\n\nisspecialarray([2, 7, 9, 1, 6, 1, 6, 3]) ➞ False\nIndex 2 has a",
    "tags": [
      "arrays",
      "validation",
      "higher_order_functions",
      "conditions",
      "loops"
    ],
    "title": "Special Lists"
  },
  {
    "_id": "7D9HHHCb6Qag4ozbz",
    "difficulty": 1.12,
    "language": "python3",
    "summary": "Write a function that returns the position of the second occurrence of \"zip\" in a string, or -1 if it does not occur at least twice. Your code should be general enough to pass every possible case where \"zip\" can occur in a string.\n\nExamples\nfind_zip(\"all zip files are zipped\") ➞ 18\n\nfind_zip(\"all zip files are compressed\") ➞ -1\n\nNotes\nUppercase \"Zip\" is not th",
    "tags": [
      "loops",
      "logic",
      "strings"
    ],
    "title": "Find the Second Occurrence of \"zip\" in a String"
  },
  {
    "_id": "X8SvemhZykdgKj5uD",
    "difficulty": 1.1203703703703705,
    "language": "python3",
    "summary": "Given a number between 1-26, return what letter is at that position in the alphabet. Return \"invalid\" if the number given is not within that range, or isn't an integer.\n\nExamples\nletteratposition(1) ➞ \"a\"\n\nletteratposition(26.0) ➞ \"z\"\n\nletteratposition(0) ➞ \"invalid\"\n\nletteratposition(4.5) ➞ \"invalid\"\n\nNotes\nReturn a lowercase letter.\nNumbers that end with \".0",
    "tags": [
      "numbers",
      "language_fundamentals"
    ],
    "title": "Position in the Alphabet"
  },
  {
    "_id": "YRwZvg5Pkgw4pEWC5",
    "difficulty": 1.1206896551724137,
    "language": "python3",
    "summary": "Create a function that always returns True for every item in a given list. However, if an element is the word \"flick\", switch to always returning the opposite boolean value.\n\nExamples\nflick_switch([\"edabit\", \"flick\", \"eda\", \"bit\"]) ➞ [True, False, False, False]\n\nflick_switch([\"flick\", 11037, 3.14, 53]) ➞[False, False, False, False]\n\nflick_switch(False, False,",
    "tags": [
      "arrays",
      "logic",
      "loops"
    ],
    "title": "Flick Switch"
  },
  {
    "_id": "nT4y8naTzHgknsW6h",
    "difficulty": 1.122093023255814,
    "language": "python3",
    "summary": "Create a function that transforms a string of upvote counts into a list of numbers. Each k represents a thousand.\n\nExamples\ntransform_upvotes(\"6.8k 13.5k\") ➞ [6800, 13500]\n\ntransform_upvotes(\"5.5k 8.9k 32\") ➞ [5500, 8900, 32]\n\ntransform_upvotes(\"20.3k 3.8k 7.7k 992\") ➞ [20300, 3800, 7700, 992]\n\nNotes\nReturn the upvotes as a list.",
    "tags": [
      "strings",
      "higher_order_functions",
      "arrays"
    ],
    "title": "Transform Upvotes"
  },
  {
    "_id": "FJk4mJwRk2TYZhkeQ",
    "difficulty": 1.122238586156112,
    "language": "python3",
    "summary": "Create a function that takes a string and returns a new string with each new character accumulating by +1. Separate each set with a dash.\n\nExamples\naccum(\"abcd\") ➞ \"A-Bb-Ccc-Dddd\"\n\naccum(\"RqaEzty\") ➞ \"R-Qq-Aaa-Eeee-Zzzzz-Tttttt-Yyyyyyy\"\n\naccum(\"cwAt\") ➞ \"C-Ww-Aaa-Tttt\"\n\nNotes\nCapitalize the first letter of each set.\nAll tests contain valid strings with alphabe",
    "tags": [
      "strings",
      "formatting",
      "loops"
    ],
    "title": "Compounding Letters"
  },
  {
    "_id": "hwTRPKBat82XmcJWk",
    "difficulty": 1.1238095238095238,
    "language": "python3",
    "summary": "Given a character and a value between 0 and 100, return a string that represents a simple progress bar.\n\nThe value represents a percentage.\nThe bar should begin and end with \"|\"\nRepeat the character to fill the bar, with each character equivalent to 10%\nUse spaces to pad the bar to a length of 10 characters.\nA single space comes after the bar, then a message w",
    "tags": [
      "strings",
      "formatting"
    ],
    "title": "ASCII Charts (Part 1: Progress Bar)"
  },
  {
    "_id": "GTNuLE2uDoS7sLuGQ",
    "difficulty": 1.1280788177339902,
    "language": "python3",
    "summary": "Alliteration refers to a sequence of words that begin with the same letter. For this exercise, a sentence is correctly alliterated if all words strictly greater than or equal to 3 characters begin with the same letter.\n\nExamples\nalliteration_correct(\"She swam to the shore.\") ➞ True\nAll words >= 4 letters long begins with \"s\"\n\nalliteration_correct(\"Maybel manag",
    "tags": [
      "strings",
      "validation"
    ],
    "title": "Amazing Alliteration"
  },
  {
    "_id": "bukvPQFPos5Hc3zyv",
    "difficulty": 1.1372549019607843,
    "language": "python3",
    "summary": "Create a function that counts the number of adverbs in a sentence. An adverb is a word that ends with ly.\n\nExamples\ncount_adverbs(\"She ran hurriedly towards the stadium.\") ➞ 1\n\ncount_adverbs(\"She ate the lasagna heartily and noisily.\") ➞ 2\n\ncount_adverbs(\"He hates potatoes.\") ➞ 0\n\ncount_adverbs(\"He was happily, crazily, foolishly over the moon.\") ➞ 3\n\nNotes\nDo",
    "tags": [
      "strings",
      "regex",
      "loops"
    ],
    "title": "Counting Adverbs"
  },
  {
    "_id": "JJHD7FeBxBEaK87hG",
    "difficulty": 1.1433224755700326,
    "language": "python3",
    "summary": "Regular Expressions (RegEx) are a powerful tool used to match or search for a pattern in a string. To use them in Python you need to import the re module. You can do this by adding the following line at the top of your file:\n\nimport re\n\nWrite a regular expression that will match the files with the extension .py or .pyw. You must use the RegEx line anchor $, wh",
    "tags": [
      "formatting",
      "regex",
      "validation"
    ],
    "title": "RegEx I: Line Anchors"
  },
  {
    "_id": "EyH8JgtSdsmc5Jgqz",
    "difficulty": 1.1478260869565218,
    "language": "python3",
    "summary": "In music, notes can be written out in multiple ways (especially for notes on the black keys). Although these notes are spelled out differently, they still are the same note physically.\n\nC# = Db, D# = Eb, F# = Gb, G# = Ab, A# = Bb\n\nGiven a musical note, create a function that returns its enharmonic equivalent. The examples below should make this clear.\n\nExample",
    "tags": [
      "strings",
      "formatting"
    ],
    "title": "Enharmonic Equivalents"
  },
  {
    "_id": "EJ2RqF9AEmk64mLsv",
    "difficulty": 1.1553398058252426,
    "language": "python3",
    "summary": "Given a lottery ticket (ticket), represented by a list of 2-value lists, create a function to find out if you've won the jackpot.\n\nTo do this, you must first count the \"mini-wins\" on your ticket. Each sublist has both a string and a number within it. If the character code of any of the characters in the string matches the number, you get a mini-win. Note you c",
    "tags": [
      "language_fundamentals",
      "numbers",
      "strings",
      "arrays"
    ],
    "title": "Lottery Ticket"
  },
  {
    "_id": "2XH27tbCq4Zyuz7xB",
    "difficulty": 1.1578044596912522,
    "language": "python3",
    "summary": "Create a function that takes a sequence of either strings or integers, removes the surrounding duplicates and returns a list of items without any items with the same value next to each other and preserves the original order of items.\n\nExamples\nuniqueinorder(\"AAAABBBCCDAABBB\") ➞ [\"A\", \"B\", \"C\", \"D\", \"A\", \"B\"]\n\nuniqueinorder(\"ABBCcAD\") ➞ [\"A\", \"B\", \"C\", \"c\", \"A\"",
    "tags": [
      "formatting",
      "sorting",
      "loops"
    ],
    "title": "Remove Surrounding Duplicate Items"
  },
  {
    "_id": "3A6x5GjWmT4t8pssL",
    "difficulty": 1.1582867783985102,
    "language": "python3",
    "summary": "Given a dictionary containing the names and ages of a group of people, return the name of the oldest person.\n\nExamples\noldest({\n  \"Emma\": 71,\n  \"Jack\": 45,\n  \"Amy\": 15,\n  \"Ben\": 29\n}) ➞ \"Emma\"\n\noldest({\n  \"Max\": 9,\n  \"Josh\": 13,\n  \"Sam\": 48,\n  \"Anne\": 33\n}) ➞ \"Sam\"\n\nNotes\nAll ages will be different.",
    "tags": [
      "data_structures",
      "objects",
      "language_fundamentals"
    ],
    "title": "Who's The Oldest?"
  },
  {
    "_id": "pNqfKq7etZ5mQMmy8",
    "difficulty": 1.1585623678646935,
    "language": "python3",
    "summary": "Write a function that calculates the GCD (Greatest Common Divisor) of two numbers recursively.\n\nExamples\ngcd(10, 20) ➞ 10\n\ngcd(1, 3) ➞ 1\n\ngcd(5, 7) ➞ 1\n\ngcd(2, 6) ➞ 2\n\nNotes\nN/A",
    "tags": [
      "recursion",
      "math"
    ],
    "title": "Recursion: GCD"
  },
  {
    "_id": "RzPWeLCkFe5y4rg7W",
    "difficulty": 1.158974358974359,
    "language": "python3",
    "summary": "For each challenge of this series you do not need to submit a function. Instead, you need to submit a template string that can formatted in order to get a certain outcome.\n\nWrite a template string according to the following example. Notice that the template will be formatted twice:\n\nExample\na = \"John\"\nb = \"Joe\"\ntemplate = \"yourtemplatestringhere\"\n\ntemplate.for",
    "tags": [
      "strings",
      "language_fundamentals",
      "formatting"
    ],
    "title": "Format IV: Escaping Curly Braces"
  },
  {
    "_id": "wZQzNPXkLrHMj4mmz",
    "difficulty": 1.1598173515981736,
    "language": "python3",
    "summary": "Create a function that takes numbers b and m as arguments and returns the derivative of the function f(x)=x^b with respect to x evaluated at  x=m, where b and m are constants.\n\nExamples\nderivative(1, 4) ➞ 1\n\nderivative(3, -2) ➞ 12\n\nderivative(4, -3) ➞ -108\n\nNotes\n^ in the context of this challenge means \"to the power of\", also known as the \"exponent\" operator.",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "Derivative of a Function"
  },
  {
    "_id": "zRm6YDfQHoesdc3rb",
    "difficulty": 1.1635220125786163,
    "language": "python3",
    "summary": "Let there be a square matrix, where each square is a rectangle, and a combination of more squares are also rectangles. To find the number of rectangles, Pete sat down and started counting... but that's highly inefficient.\n\nCreate a function that takes the order of the matrix as input and returns the number of rectangles in them.\n\nExamples\nrectangles(1) ➞ 1\n\nre",
    "tags": [
      "algorithms",
      "math",
      "numbers"
    ],
    "title": "How Many Rectangles?"
  },
  {
    "_id": "egMp3GWyN8TPptbZA",
    "difficulty": 1.1868131868131868,
    "language": "python3",
    "summary": "YouTube currently displays a like and a dislike button, allowing you to express your opinions about particular content. It's set up in such a way that you cannot like and dislike a video at the same time.\n\nThere are two other interesting rules to be noted about the interface:\n\nPressing a button, which is already active, will undo your press.\nIf you press the l",
    "tags": [
      "loops",
      "arrays",
      "conditions",
      "logic"
    ],
    "title": "Likes vs. Dislikes"
  },
  {
    "_id": "ZsLDkJfLGFkmjS2jE",
    "difficulty": 1.191304347826087,
    "language": "python3",
    "summary": "You will be given a list of numbers which represent your character's altitude above sea level at regular intervals:\nPositive numbers represent height above the water.\n0 is sea level.\nNegative numbers represent depth below the water's surface.\n\nCreate a function which returns whether your character survives their unsupervised diving experience, given a list of",
    "tags": [
      "conditions",
      "arrays",
      "numbers",
      "loops",
      "games"
    ],
    "title": "Hold Your Breath!"
  },
  {
    "_id": "xRMQG4Sxewx5agDRr",
    "difficulty": 1.192090395480226,
    "language": "python3",
    "summary": "Create a function that finds the highest integer in the list using recursion.\n\nExamples\nfind_highest([-1, 3, 5, 6, 99, 12, 2]) ➞ 99\n\nfind_highest([0, 12, 4, 87]) ➞ 87\n\nfind_highest([8]) ➞ 8\n\nNotes\nPlease use the recursion to solve this (not the max() method).",
    "tags": [
      "recursion",
      "numbers",
      "data_structures"
    ],
    "title": "Find the Highest Integer in the List Using Recursion"
  },
  {
    "_id": "3DAkZHv2LZjgqWbvW",
    "difficulty": 1.216572504708098,
    "language": "python3",
    "summary": "A graph is a set of nodes and edges that connect those nodes.\n\nGraph Example\n\nThere are two types of graphs; directed and undirected. In an undirected graph, the edges between nodes have no particular direction (like a two-way street) whereas in a directed graph, each edge has a direction associated with it (like a one-way street).\n\nFor two nodes in a graph to",
    "tags": [
      "arrays",
      "algorithms",
      "math",
      "validation",
      "data_structures"
    ],
    "title": "Finding Adjacent Nodes"
  },
  {
    "_id": "AJGqpNL2yAyhbdpvB",
    "difficulty": 1.231863442389758,
    "language": "python3",
    "summary": "In electronics, a digital-to-analog converter (DAC, D/A, or D-to-A) is a system that converts a binary representation of that signal into an analog output. An 8 bit converter can represent a maximum of  2^8 different values, with each successive value differing by 1/256 of the full scale value, this becomes the system resolution.\n\nCreate a function that takes",
    "tags": [
      "functional_programming"
    ],
    "title": "Virtual DAC"
  },
  {
    "_id": "pfn6QRn6eiTHEPpSs",
    "difficulty": 1.2437779195915764,
    "language": "python3",
    "summary": "Python got drunk and the built-in functions str() and int() are acting odd:\n\nstr(4) ➞ 4\n\nstr(\"4\") ➞ 4\n\nint(\"4\") ➞ \"4\"\n\nint(4) ➞ \"4\"\n\nYou need to create two functions to substitute str() and int(). A function called inttostr() that converts integers into strings and a function called strtoint() that converts strings into integers.\n\nExamples:\ninttostr(4) ➞ \"4\"",
    "tags": [
      "language_fundamentals",
      "numbers",
      "strings"
    ],
    "title": "Drunken Python"
  },
  {
    "_id": "noqQNSr5o9qzvXWzL",
    "difficulty": 1.25,
    "language": "python3",
    "summary": "The right shift operation is similar to floor division by powers of two.\n\nSample calculation using the right shift operator ( >> ):\n\n80 >> 3 = floor(80/2^3) = floor(80/8) = 10\n-24 >> 2 = floor(-24/2^2) = floor(-24/4) = -6\n-5 >> 1 = floor(-5/2^1) = floor(-5/2) = -3\n\nWrite a function that mimics (without the use of >>) the right shift operator and returns the re",
    "tags": [
      "bit_operations",
      "numbers"
    ],
    "title": "Right Shift by Division"
  },
  {
    "_id": "2zKetgAJp4WRFXiDT",
    "difficulty": 1.2628865979381443,
    "language": "python3",
    "summary": "Create a function that takes a number num and returns its length.\n\nExamples\nnumber_length(10) ➞ 2\n\nnumber_length(5000) ➞ 4\n\nnumber_length(0) ➞ 1\n\nNotes\nThe use of the len() function is prohibited.",
    "tags": [
      "numbers"
    ],
    "title": "Length of Number"
  },
  {
    "_id": "5KqHNS9wS97zN7Xyy",
    "difficulty": 1.275092936802974,
    "language": "python3",
    "summary": "Create a function that takes a dictionary of objects like { \"name\": \"John\", \"notes\": [3, 5, 4] } and returns a dictionary of objects like { \"name\": \"John\", \"top_note\": 5 }.\n\nExamples\ntopnote({ \"name\": \"John\", \"notes\": [3, 5, 4] }) ➞ { \"name\": \"John\", \"topnote\": 5 }\n\ntopnote({ \"name\": \"Max\", \"notes\": [1, 4, 6] }) ➞ { \"name\": \"Max\", \"topnote\": 6 }\n\ntopnote({ \"na",
    "tags": [
      "arrays",
      "objects",
      "functional_programming"
    ],
    "title": "Get Students with Names and Top Notes"
  },
  {
    "_id": "WXqH9qvvGkmx4dMvp",
    "difficulty": 1.2753373528567327,
    "language": "python3",
    "summary": "Create a function that takes a number as an argument and returns \"Fizz\", \"Buzz\" or \"FizzBuzz\".\n\nIf the number is a multiple of 3 the output should be \"Fizz\".\nIf the number given is a multiple of 5, the output should be \"Buzz\".\nIf the number given is a multiple of both 3 and 5, the output should be \"FizzBuzz\".\nIf the number is not a multiple of either 3 or 5, t",
    "tags": [
      "math",
      "sorting",
      "logic",
      "language_fundamentals",
      "interview"
    ],
    "title": "FizzBuzz Interview Question"
  },
  {
    "_id": "3Ekam9jvbNKHDtx4K",
    "difficulty": 1.2840909090909092,
    "language": "python3",
    "summary": "Write a function that takes coordinates of two points on a two-dimensional plane and returns the length of the line segment connecting those two points.\n\nExamples\nline_length([15, 7], [22, 11]) ➞ 8.06\n\nline_length([0, 0], [0, 0]) ➞ 0\n\nline_length([0, 0], [1, 1]) ➞ 1.41\n\nNotes\nThe order of the given numbers is X, Y.\nThis challenge is easier than it looks.",
    "tags": [
      "arrays",
      "geometry",
      "math",
      "numbers"
    ],
    "title": "Geometry 1: Length of Line Segment"
  },
  {
    "_id": "2wQPKcSipXmK4idwD",
    "difficulty": 1.2907180385288968,
    "language": "python3",
    "summary": "Your spouse is not concerned with the loss of material possessions but rather with his/her favorite pet. Is it gone?!\n\nGiven a dictionary of the stolen items and a string in lower cases representing the name of the pet (e.g. \"rambo\"), return:\n\n\"Rambo is gone...\" if the name is on the list.\n\"Rambo is here!\" if the name is not on the list.\n\nNote that the first l",
    "tags": [
      "strings",
      "data_structures"
    ],
    "title": "Burglary Series (03): Is It Gone?"
  },
  {
    "_id": "5XXXppAdfcGaootD9",
    "difficulty": 1.2912280701754386,
    "language": "python3",
    "summary": "Write a function that takes a list of numbers and returns a list with two elements:\n\nThe first element should be the sum of all even numbers in the list.\nThe second element should be the sum of all odd numbers in the list.\n\nExample\nsumoddand_even([1, 2, 3, 4, 5, 6]) ➞ [12, 9]\n2 + 4 + 6 = 12 and 1 + 3 + 5 = 9\n\nsumoddand_even([-1, -2, -3, -4, -5, -6]) ➞ [-12, -9",
    "tags": [
      "arrays",
      "data_structures",
      "higher_order_functions",
      "math"
    ],
    "title": "Sum of Odd and Even Numbers"
  },
  {
    "_id": "guR6aa2zytfZvywMS",
    "difficulty": 1.2923076923076924,
    "language": "python3",
    "summary": "In cricket, an over consists of six deliveries a bowler bowls from one end. Create a function that takes the number of balls balls bowled by a bowler and calculates the number of overs and balls bowled by him/her. Return the value as a float, in the format overs.balls.\n\nExamples\ntotal_overs(2400) ➞ 400\n\ntotal_overs(164) ➞ 27.2\n27 overs and 2 balls were bowled",
    "tags": [
      "numbers",
      "math"
    ],
    "title": "Cricket Balls to Overs!"
  },
  {
    "_id": "NNhkGocuPMcryW7GP",
    "difficulty": 1.2984094925523857,
    "language": "python3",
    "summary": "Imagine a circle and two squares: a smaller and a bigger one. For the smaller one, the circle is a circumcircle and for the bigger one, an incircle.\n\nScale\n\nCreate a function, that takes an integer (radius of the circle) and returns the area of the square inside the circle.\n\nExamples\nsquareareasdifference(5) ➞ 50\n\nsquareareasdifference(6) ➞ 72\n\nsquareareasdiff",
    "tags": [
      "algebra",
      "math",
      "geometry"
    ],
    "title": "A Circle and Two Squares"
  },
  {
    "_id": "YfoKQWNeYETb9PYpw",
    "difficulty": 1.301111111111111,
    "language": "python3",
    "summary": "You work for a manufacturer, and have been asked to calculate the total profit made on the sales of a product. You are given a dictionary containing the cost price per unit (in dollars), sell price per unit (in dollars), and the starting inventory. Return the total profit made, rounded to the nearest dollar.\n\nExamples\nprofit({\n  \"cost_price\": 32.67,\n  \"sell_pr",
    "tags": [
      "data_structures",
      "language_fundamentals",
      "objects",
      "math"
    ],
    "title": "Calculate the Profit"
  },
  {
    "_id": "Cjtm4CpLzHDerQMfX",
    "difficulty": 1.3018867924528301,
    "language": "python3",
    "summary": "Create a function that takes a country's name and its area as arguments and returns the area of the country's proportion of the total world's landmass.\n\nExamples\nareaofcountry(\"Russia\", 17098242) ➞ \"Russia is 11.48% of the total world's landmass\"\n\nareaofcountry(\"USA\", 9372610), \"USA is 6.29% of the total world's landmass\"\n\nareaofcountry(\"Iran\", 1648195) ➞ \"Ira",
    "tags": [
      "math",
      "strings",
      "formatting",
      "numbers"
    ],
    "title": "Get the Area of a Country"
  },
  {
    "_id": "o2AKq4xy3nfZabKXL",
    "difficulty": 1.3074448529411764,
    "language": "python3",
    "summary": "A quadratic equation a x² + b x + c = 0 has either 0, 1, or 2 distinct solutions for real values of x. Given a, b and c, you should return the number of solutions to the equation.\n\nExamples\nsolutions(1, 0, -1) ➞ 2\n// x² - 1 = 0 has two solutions (x = 1 and x = -1).\n\nsolutions(1, 0, 0) ➞ 1\n// x² = 0 has one solution (x = 0).\n\nsolutions(1, 0, 1) ➞ 0\n// x² + 1 =",
    "tags": [
      "algebra",
      "math",
      "algorithms"
    ],
    "title": "How Many Solutions Does This Quadratic Have?"
  },
  {
    "_id": "co4nwXSvnCjGEu8vp",
    "difficulty": 1.3075703527546572,
    "language": "python3",
    "summary": "Create a function that converts a date formatted as MM/DD/YYYY to  YYYYDDMM.\n\nExamples\nformat_date(\"11/12/2019\") ➞ \"20191211\"\n\nformat_date(\"12/31/2019\") ➞ \"20193112\"\n\nformat_date(\"01/15/2019\") ➞ \"20191501\"\n\nNotes\nReturn value should be a string.",
    "tags": [
      "formatting",
      "dates",
      "arrays"
    ],
    "title": "Date Format"
  },
  {
    "_id": "2RtztnzMDdyAj2MD3",
    "difficulty": 1.3131955484896662,
    "language": "python3",
    "summary": "Create a function that takes two number strings and returns their sum as a string.\n\nExamples\nadd(\"111\", \"111\") ➞ \"222\"\n\nadd(\"10\", \"80\") ➞ \"90\"\n\nadd(\"\", \"20\") ➞ \"Invalid Operation\"\n\nNotes\nIf any input is \"\" or None, return \"Invalid Operation\".",
    "tags": [
      "math",
      "numbers",
      "conditions"
    ],
    "title": "Adding Numbers"
  },
  {
    "_id": "BuwHwPvt92yw574zB",
    "difficulty": 1.3143150860961192,
    "language": "python3",
    "summary": "Create a function that takes two numbers as arguments (num, length) and returns a list of multiples of num until the list length reaches length.\n\nExamples\nlistofmultiples(7, 5) ➞ [7, 14, 21, 28, 35]\n\nlistofmultiples(12, 10) ➞ [12, 24, 36, 48, 60, 72, 84, 96, 108, 120]\n\nlistofmultiples(17, 6) ➞ [17, 34, 51, 68, 85, 102]\n\nNotes\nNotice that num is also included i",
    "tags": [
      "arrays",
      "numbers",
      "math",
      "loops"
    ],
    "title": "List of Multiples"
  },
  {
    "_id": "MDWFcHCTiJfHmwTFx",
    "difficulty": 1.3186274509803921,
    "language": "python3",
    "summary": "Create a function to find only the root value of x in any quadratic equation ax^2 + bx  + c. The function will take three arguments:\n\na as the coefficient of x^2\nb as the coefficient of x\nc as the constant term\n\nExamples\nquadratic_equation(1, 2, -3) ➞ 1\n\nquadratic_equation(2, -7, 3) ➞ 3\n\nquadratic_equation(1, -12, -28) ➞ 14\n\nNotes\nQuadratic equation is always",
    "tags": [
      "algebra",
      "conditions",
      "math"
    ],
    "title": "Quadratic Equation"
  },
  {
    "_id": "ta8GBizBNbRGo5iC6",
    "difficulty": 1.3207964601769913,
    "language": "python3",
    "summary": "Create methods for the Calculator class that can do the following:\n\nAdd two numbers.\nSubtract two numbers.\nMultiply two numbers.\nDivide two numbers.\n\nExamples\ncalculator = Calculator()\n\ncalculator.add(10, 5) ➞ 15\n\ncalculator.subtract(10, 5) ➞ 5\n\ncalculator.multiply(10, 5) ➞ 50\n\ncalculator.divide(10, 5) ➞ 2\n\nNotes\nThe methods should return the result of the cal",
    "tags": [
      "classes",
      "math",
      "numbers"
    ],
    "title": "Simple OOP Calculator"
  },
  {
    "_id": "YSikG4DEsnxahg2u4",
    "difficulty": 1.3216783216783217,
    "language": "python3",
    "summary": "Create a function get_days that takes two dates and returns the number of days between the first and second date.\n\nExamples\nget_days(\n  datetime.date(2019, 6, 14),  # June 14, 2019\n  datetime.date(2019, 6, 20)  # June 20, 2019\n) ➞ 6\n\nget_days(\n  datetime.date(2018, 12, 29),  # December 29, 2018\n  datetime.date(2019, 1, 1)  # January 1, 2019\n) ➞ 3\nDates may not",
    "tags": [
      "dates",
      "language_fundamentals"
    ],
    "title": "How Many Days Between Two Dates"
  },
  {
    "_id": "2bTdN8sr3PQKkLHur",
    "difficulty": 1.3217821782178218,
    "language": "python3",
    "summary": "You are given two numbers a and b. Create a function that returns the next number greater than a and b and divisible by b.\n\nExamples\ndivisiblebyb(17, 8) ➞ 24\n\ndivisiblebyb(98, 3) ➞ 99\n\ndivisiblebyb(14, 11) ➞ 22\n\nNotes\na will always be greater than b.",
    "tags": [
      "math",
      "algebra"
    ],
    "title": "Next Number Greater Than A and B and Divisible by B"
  },
  {
    "_id": "xR248CxGSsSrNK5Za",
    "difficulty": 1.3239795918367347,
    "language": "python3",
    "summary": "Write a function that accepts the height and  width (m, n) and an optional proc s and generates a list with m elements. Each element is a string consisting of either:\n\nThe default character (hash #) repeating n times (if no proc is given).\nThe character passed in through the proc repeating n times.\n\nExamples\nmake_rug(3, 5, '#') ➞ [\n  \"#####\",\n  \"#####\",\n  \"###",
    "tags": [
      "language_fundamentals",
      "arrays",
      "loops"
    ],
    "title": "Designing Rugs"
  },
  {
    "_id": "TQrHYN9CNQD9miZwj",
    "difficulty": 1.3248945147679325,
    "language": "python3",
    "summary": "When importing objects from a module in Python, the syntax usually is as follows:\n\nfrom module_name import object\n\nGiven a string of an incorrect import statement, return the fixed string. All import statements will be the wrong way round.\n\nExamples\nfiximport(\"import object from modulename\") ➞ \"from module_name import object\"\n\nfix_import(\"import randint from r",
    "tags": [
      "strings",
      "regex"
    ],
    "title": "Incorrect Import Statement"
  },
  {
    "_id": "QgSMSMpfcEebAyCye",
    "difficulty": 1.3288888888888888,
    "language": "python3",
    "summary": "One cause for speeding is the desire to shorten the time spent traveling. In long distance trips, speeding does save an appreciable amount of time. However, the same cannot be said about short distance trips.\n\nCreate a function that calculates the amount of time saved were you traveling with an average speed that is above the speed-limit as compared to traveli",
    "tags": [
      "math",
      "physics"
    ],
    "title": "Return the Time Saved by Speeding"
  },
  {
    "_id": "hGzNSr5CSEpTsmy5W",
    "difficulty": 1.3299492385786802,
    "language": "python3",
    "summary": "Create a function that subtracts 1 from n (unless it ends in 0) k number of times.  If n ends in 0,  remove the 0.\n\nTo illustrate:\nn = 22\nk = 3\n\nThis means our number is 22 and we have to repeat the algorithm three times. 22 does not end in 0 so we continue subtracting 1.\n\n22 - 1 = 21\nk = 1\n21 - 1 = 20\nk = 2\n\nNow 20 ends in 0, so we can remove it. We get 2; k",
    "tags": [
      "math",
      "algorithms",
      "logic"
    ],
    "title": "Unusual Subtraction"
  },
  {
    "_id": "BuCaGYh8keiWJGmcC",
    "difficulty": 1.3333333333333333,
    "language": "python3",
    "summary": "Create a function that will take a HEX number and returns the binary equivalent (as a string).\n\nExamples\nto_binary(0xFF) ➞ \"11111111\"\n\nto_binary(0xAA) ➞ \"10101010\"\n\nto_binary(0xFA) ➞ \"11111010\"\n\nNotes\nThe number will be always an 8-bit number.",
    "tags": [
      "bit_operations"
    ],
    "title": "Hex to Binary"
  },
  {
    "_id": "8oNKM4osgxYyrFtGL",
    "difficulty": 1.3341584158415842,
    "language": "python3",
    "summary": "Create a function that takes a list as an argument and returns a new nested list for each element in the original list. The nested list must be filled with the corresponding element (string or number) in the original list and each nested list has the same amount of elements as the original list.\n\nExamples\nmultiply([4, 5]) ➞ [[4, 4], [5, 5]]\n\nmultiply([\"\", \"%\",",
    "tags": [
      "arrays",
      "language_fundamentals"
    ],
    "title": "List Multiplier"
  },
  {
    "_id": "jpW2fAzfPtop8AYfW",
    "difficulty": 1.336283185840708,
    "language": "python3",
    "summary": "Write a function that transforms a list of characters into a list of dictionaries, where:\n\nThe keys are the characters themselves.\nThe values are the ASCII codes of those characters.\n\nExamples\nto_dict([\"a\", \"b\", \"c\"]) ➞ [{\"a\": 97}, {\"b\": 98}, {\"c\": 99}]\n\nto_dict([\"^\"]) ➞ [{\"^\": 94}]\n\nto_dict([]) ➞ []\n\nNotes\nN/A",
    "tags": [
      "objects",
      "higher_order_functions"
    ],
    "title": "Characters and ASCII Code Dictionary"
  },
  {
    "_id": "5zDR5LyznNPsnEuYJ",
    "difficulty": 1.3371212121212122,
    "language": "python3",
    "summary": "The caret ^, when found at the start of a characer set, is the equivalent to \"not\" in RegEx.  The regular expression `` matches any characters except \"a\", \"b\" and \"c\". Write the regular expression that matches any characters except letters, digits and spaces. You must use a negated character set in your expression.\n\nExamples\ntxt = \" alice15@gmail.com \"\npattern",
    "tags": [
      "regex",
      "strings"
    ],
    "title": "RegEx XVI: Negation"
  },
  {
    "_id": "Axim3Ld5zu9RFLZKr",
    "difficulty": 1.3377837116154874,
    "language": "python3",
    "summary": "Write a function that inverts the keys and values of a dictionary.\n\nExamples\ninvert({ \"z\": \"q\", \"w\": \"f\" })\n➞ { \"q\": \"z\", \"f\": \"w\" }\n\ninvert({ \"a\": 1, \"b\": 2, \"c\": 3 })\n➞ { 1: \"a\", 2: \"b\", 3: \"c\" }\n\ninvert({ \"zebra\": \"koala\", \"horse\": \"camel\" })\n➞ { \"koala\": \"zebra\", \"camel\": \"horse\" }\n\nNotes\nN/A",
    "tags": [
      "objects"
    ],
    "title": "Invert Keys and Values"
  },
  {
    "_id": "pa65DgwG5HMbtf6iY",
    "difficulty": 1.3383561643835618,
    "language": "python3",
    "summary": "Create a class that takes the following four arguements for a particular football player:\nname\nage\nheight\nweight\n\nAlso, create three functions for the class that returns the following strings:\nget_age() returns \"name is age age\"\nget_height() returns \"name is heightcm\"\nget_weight() returns \"name weighs weightkg\"\n\nExamples\n p1 = player(\"David Jones\", 25, 175, 75",
    "tags": [
      "classes",
      "objects",
      "strings"
    ],
    "title": "Classes For Fetching Information on a Sports Player"
  },
  {
    "_id": "Aj377wZtxWya7gjK9",
    "difficulty": 1.3388429752066116,
    "language": "python3",
    "summary": "Create a function that returns the sum of missing numbers from the given list.\n\nExamples\nsummissingnumbers([4, 3, 8, 1, 2]) ➞ 18\n5 + 6 + 7 = 18\n\nsummissingnumbers([17, 16, 15, 10, 11, 12]) ➞ 27\n13 + 14 = 27\n\nsummissingnumbers([1, 2, 3, 4, 5]) ➞ 0\nNo Missing Numbers (i.e. all numbers in [1, 5] are present in the list)\n\nNotes\nThe numerical range to consider when",
    "tags": [
      "arrays",
      "math",
      "numbers"
    ],
    "title": "Sum of Missing Numbers"
  },
  {
    "_id": "gB7nt6WzZy8TymCah",
    "difficulty": 1.3391442155309032,
    "language": "python3",
    "summary": "Create the instance attributes fullname and email in the Employee class. Given a person's first and last names:\n\nForm the fullname by simply joining the first and last name together, separated by a space.\nForm the email by joining the first and last name together with a . in between, and follow it with @company.com at the end. Make sure the entire email is in",
    "tags": [
      "classes",
      "objects",
      "strings",
      "language_fundamentals"
    ],
    "title": "Fullname and Email"
  },
  {
    "_id": "wvuk7d2mWgZEmFFYD",
    "difficulty": 1.3395872420262664,
    "language": "python3",
    "summary": "Create a function that returns the number of characters shared between two words.\n\nExamples\nshared_letters(\"apple\", \"meaty\") ➞ 2\nSince \"ea\" is shared between \"apple\" and \"meaty\".\n\nshared_letters(\"fan\", \"forsook\") ➞ 1\n\nshared_letters(\"spout\", \"shout\") ➞ 4\n\nNotes\nN/A",
    "tags": [
      "arrays",
      "strings"
    ],
    "title": "Letters Shared Between Two Words"
  },
  {
    "_id": "2hvruws6kgiKj98Rv",
    "difficulty": 1.3402061855670102,
    "language": "python3",
    "summary": "A strong Scottish accent makes every vowel similar to an \"e\", so you should replace every vowel with an \"e\". Additionally, it is being screamed, so it should be in block capitals.\n\nCreate a function that takes a string and returns a string.\n\nExamples\ntoscottishscreaming(\"hello world\") ➞ \"HELLE WERLD\"\n\ntoscottishscreaming(\"Mr. Fox was very naughty\") ➞ \"MR. FEX",
    "tags": [
      "strings",
      "formatting",
      "regex"
    ],
    "title": "Scottish Screaming"
  },
  {
    "_id": "eADRy5SA5QbasA3Qt",
    "difficulty": 1.3418647166361974,
    "language": "python3",
    "summary": "A number is said to be Harshad if it's exactly divisible by the sum of its digits. Create a function that determines whether a number is a Harshad or not.\n\nExamples\nis_harshad(75) ➞ False\n7 + 5 = 12\n75 is not exactly divisible by 12\n\nis_harshad(171) ➞ True\n1 + 7 + 1 = 9\n9 exactly divides 171\n\nis_harshad(481) ➞ True\n\nis_harshad(89) ➞ False\n\nis_harshad(516) ➞ Tr",
    "tags": [
      "math",
      "numbers",
      "strings",
      "loops"
    ],
    "title": "Harshad Number"
  },
  {
    "_id": "8rEEHcmq8rRaTksd7",
    "difficulty": 1.3421667965705377,
    "language": "python3",
    "summary": "Given two lines, determine whether or not they are parallel.\n\nLines are represented by a list [a, b, c], which corresponds to the line ax+by=c.\n\nExamples\nlinesareparallel([1, 2, 3], [1, 2, 4]) ➞ true\nx+2y=3 and x+2y=4 are parallel.\n\nlinesareparallel([2, 4, 1], [4, 2, 1]) ➞ false\n2x+4y=1 and 4x+2y=1 are not parallel.\n\nlinesareparallel([0, 1, 5], [0, 1, 5]) ➞ tr",
    "tags": [
      "algebra",
      "math",
      "validation"
    ],
    "title": "Check If Lines Are Parallel"
  },
  {
    "_id": "X6xZ2EaqqQbGF7Bwv",
    "difficulty": 1.3434856175972927,
    "language": "python3",
    "summary": "Given an int, figure out how many ones, threes and nines you could fit into the number. You must create a class. You will make variables (self.ones, self.threes, self.nines) to do this.\n\nExamples\nn1 = onesthreesnines(5)\nn1.nines ➞ 0\n\nn1.ones ➞ 5\n\nn1.threes ➞ 1\n\nNotes\nDo not use the math module.\nSee version #2 of this series.",
    "tags": [
      "classes",
      "numbers",
      "math"
    ],
    "title": "Ones, Threes and Nines (Version #1)"
  },
  {
    "_id": "McZF4JRhPus5DtRA4",
    "difficulty": 1.3444730077120823,
    "language": "python3",
    "summary": "Transcribe the given DNA strand into corresponding mRNA - a type of RNA,  that will be formed from it after transcription. DNA has the bases A, T, G and C, while RNA converts to U, A, C and G respectively.\n\nExamples\ndnatorna(\"ATTAGCGCGATATACGCGTAC\") ➞ \"UAAUCGCGCUAUAUGCGCAUG\"\n\ndnatorna(\"CGATATA\") ➞ \"GCUAUAU\"\n\ndnatorna(\"GTCATACGACGTA\") ➞ \"CAGUAUGCUGCAU\"\n\nNotes\nT",
    "tags": [
      "algorithms",
      "conditions",
      "language_fundamentals",
      "strings"
    ],
    "title": "Transcribe to mRNA"
  },
  {
    "_id": "kzoTToex5vRyjdrid",
    "difficulty": 1.3453608247422681,
    "language": "python3",
    "summary": "Write the regular expression that will match all non-digit characters of a string. Use the character class \\D in your expression.\n\nExample\ntxt = \"242Edabit2345can3443be3254324addictive!\"\npattern = \"yourregularexpressionhere\"\n\n\" \".join(re.findall(pattern, txt)) ➞ \"Edabit can be addictive!\"\n\nNotes\nYou don't need to write a function, just the pattern.\nDo not remo",
    "tags": [
      "regex",
      "language_fundamentals",
      "formatting"
    ],
    "title": "RegEx VIII-B: Digit Character Class"
  },
  {
    "_id": "iBqJcagS56wmDpe4x",
    "difficulty": 1.3453908984830805,
    "language": "python3",
    "summary": "The volume of a spherical shell is the difference between the enclosed volume of the outer sphere and the enclosed volume of the inner sphere:\n\nVolume of Inner Sphere Formula\n\nCreate a function that takes r1 and r2 as arguments and returns the volume of a spherical shell rounded to the nearest thousandth.\n\nSpherical Shell Image\n\nExamples\nvol_shell(3, 3) ➞ 0\n\nv",
    "tags": [
      "math",
      "numbers",
      "geometry"
    ],
    "title": "Volume of a Spherical Shell"
  },
  {
    "_id": "x6McEkHer8A3Hke2q",
    "difficulty": 1.3463740458015268,
    "language": "python3",
    "summary": "Welcome to the beginning of this collection on Computer Science Algorithms. Admittedly there are other challenges on Edabit that deal with recursion and algorithmic processes, but these particular challenges are designed to give examples and to educate users on the topics being covered.\n\nRecursion\nIn computer science, \"recursion\" is the act of writing a functi",
    "tags": [
      "algorithms",
      "logic",
      "recursion",
      "math"
    ],
    "title": "Algorithms I: Introduction to Recursion"
  },
  {
    "_id": "iPGKNLj6R6bQzdnq7",
    "difficulty": 1.3470437017994858,
    "language": "python3",
    "summary": "For each challenge of this series you do not need to submit a function. Instead, you need to submit a template string that can formatted in order to get a certain outcome.\n\nWrite three lists and a template string according to the following example. Notice the keyword argument elem:\n\nExample\nlst1 = [yourlisthere]\nlst2 = [yourlisthere]\nlst3 = [yourlisthere]\ntemp",
    "tags": [
      "formatting",
      "strings",
      "language_fundamentals"
    ],
    "title": "Format IX: Unpacking Lists"
  },
  {
    "_id": "SfEretprfmbbcTChT",
    "difficulty": 1.3484848484848484,
    "language": "python3",
    "summary": "Given an input string, reverse the string word by word.\n\nExamples\nreverse_words(\"the sky is blue\") ➞ \"blue is sky the\"\n\nreverse_words(\"  hello world!  \") ➞ \"world! hello\"\n\nreverse_words(\"a good   example\") ➞ \"example good a\"\n\nNotes\nA word is defined as a sequence of non-space characters.\nThe input string may contain leading or trailing spaces. However, your re",
    "tags": [
      "strings",
      "formatting"
    ],
    "title": "Reverse Words in a String"
  },
  {
    "_id": "SaC7tapGFxssdayWE",
    "difficulty": 1.3485477178423237,
    "language": "python3",
    "summary": "Every quadratic curve y = a x² + b x + c has a vertex point: the turning point where the curve stops heading down and starts going up.\n\nGiven the values a, b and c, you need to return the coordinates of the vertex. Return your answers rounded to 2 decimal places.\n\nExamples\nfind_vertex(1, 0, 25)  ➞ [0, 25]\nThe vertex of y=x²+25 is at (0, 25).\n\nfind_vertex(-1, 0",
    "tags": [
      "algebra",
      "math"
    ],
    "title": "Find the Vertex of a Quadratic"
  },
  {
    "_id": "93o8dzshnn2fDHdpX",
    "difficulty": 1.348623853211009,
    "language": "python3",
    "summary": "A list is given. Return a new list having the sum of all its elements except itself. For more clarity, check the examples below.\n\nClarification\n[1, 2, 3, 4] = for first element => sum will be 2+3+4 = [9]\n[1, 2, 3, 4] = for second element => sum will be 1+3+4 = [9, 8]\n[1, 2, 3, 4] = for third element => sum will be 1+2+4 = [9, 8, 7]\n[1, 2, 3, 4] = for fourth el",
    "tags": [
      "arrays"
    ],
    "title": "Sum of List Elements Except Itself"
  },
  {
    "_id": "R7d5JE7NQCSnajuni",
    "difficulty": 1.3493975903614457,
    "language": "python3",
    "summary": "You prepare a list to send to the insurance company. As you finish, you notice you misformatted it. Given a dictionary with at least one key/value pair, convert all the values to numbers.\n\nExamples\nconverttonumber({ \"piano\": \"200\" }) ➞ { \"piano\": 200 }\n\nconverttonumber({ \"piano\": \"200\", \"tv\": \"300\" }) ➞ { \"piano\": 200, \"tv\": 300 }\n\nconverttonumber({ \"piano\": \"",
    "tags": [
      "objects",
      "loops",
      "arrays",
      "numbers"
    ],
    "title": "Burglary Series (06): Convert to Number"
  },
  {
    "_id": "qaNmoG4dAXRL5JqvA",
    "difficulty": 1.3504672897196262,
    "language": "python3",
    "summary": "Create a function that takes a list containing nested lists as an argument. Each sublist has 2 elements. The first element is the numerator and the second element is the denominator. Return the sum of the fractions rounded to the nearest whole number.\n\nExamples\nsum_fractions([[18, 13], [4, 5]]) ➞ 2\n\nsum_fractions([[36, 4], [22, 60]]) ➞ 9\n\nsum_fractions([[11, 2",
    "tags": [
      "algorithms",
      "arrays",
      "data_structures"
    ],
    "title": "Sum Fractions"
  },
  {
    "_id": "7RPtGySfZLkEHB8ac",
    "difficulty": 1.3504823151125402,
    "language": "python3",
    "summary": "It takes 21 seconds to wash your hands and help prevent the spread of COVID-19.\n\nCreate a function that takes the number of times a person washes their hands per day N and the number of months they follow this routine nM and calculates the duration in minutes and seconds that person spends washing their hands.\n\nExamples\nwash_hands(8, 7) ➞ \"588 minutes and 0 se",
    "tags": [
      "numbers",
      "math"
    ],
    "title": "Wash Your Hands :)"
  },
  {
    "_id": "xG2KB9T7mHgycGCSz",
    "difficulty": 1.3507014028056112,
    "language": "python3",
    "summary": "Create a function  to test if a string is a valid pin or not.\n\nA valid pin has:\nExactly 4 or 6 characters.\nOnly numerical characters (0-9).\nNo whitespace.\n\nExamples\nvalid(\"1234\") ➞ True\n\nvalid(\"45135\") ➞ False\n\nvalid(\"89abc1\") ➞ False\n\nvalid(\"900876\") ➞ True\n\nvalid(\" 4983\") ➞ False\n\nNotes\nEmpty strings should return False when tested.",
    "tags": [
      "validation",
      "strings"
    ],
    "title": "Validate Pin"
  },
  {
    "_id": "aqA6KSHRCwfE44Q9m",
    "difficulty": 1.351981351981352,
    "language": "python3",
    "summary": "October 22nd is CAPS LOCK DAY. Apart from that day, every sentence should be lowercase, so write a function to normalize a sentence.\n\nCreate a function that takes a string. If the string is all uppercase characters, convert it to lowercase and add an exclamation mark at the end.\n\nExamples\nnormalize(\"CAPS LOCK DAY IS OVER\") ➞ \"Caps lock day is over!\"\n\nnormalize",
    "tags": [
      "strings",
      "language_fundamentals",
      "formatting"
    ],
    "title": "CAPS LOCK DAY is over!"
  },
  {
    "_id": "cyzbSvpfSzDjGi4TB",
    "difficulty": 1.3527272727272728,
    "language": "python3",
    "summary": "In mathematics, the harmonic series is the divergent infinite series:\n\nAlternative Text\n\nIts name derives from the concept of overtones, or harmonics in music.\n\nCreate a function that, given a precision parameter, returns the value of the harmonic series.\n\nExamples\nharmonic(3) ➞ 1.833\n\nharmonic(1) ➞ 1.0\n\nharmonic(5) ➞ 2.283\n\nNotes\nRound the result to the third",
    "tags": [
      "algebra",
      "math",
      "numbers"
    ],
    "title": "Harmonic Series"
  },
  {
    "_id": "GiXejjZrExmeAPtp7",
    "difficulty": 1.3532338308457712,
    "language": "python3",
    "summary": "Create a function (named fifth) that takes some  arguments and returns the type of the fifth argument. In case the arguments were less than 5, return \"Not enough arguments\".\n\nExamples\nfifth(1, 2, 3, 4, 5) ➞ int\n\nfifth(\"a\", 2, 3, [1, 2, 3], \"five\") ➞ str\n\nfifth() ➞ \"Not enough arguments\"\n\nNotes\nDon't get confused between zero-indexing and one-indexing.\nIf you g",
    "tags": [
      "language_fundamentals",
      "conditions"
    ],
    "title": "The Fifth Argument"
  },
  {
    "_id": "yL5WmWTCNwwb4GnR7",
    "difficulty": 1.3535108958837772,
    "language": "python3",
    "summary": "In each input list, every number repeats at least once, except for two. Write a function that returns the two unique numbers.\n\nExamples\nreturn_unique([1, 9, 8, 8, 7, 6, 1, 6]) ➞ [9, 7]\n\nreturn_unique([5, 5, 2, 4, 4, 4, 9, 9, 9, 1]) ➞ [2, 1]\n\nreturn_unique([9, 5, 6, 8, 7, 7, 1, 1, 1, 1, 1, 9, 8]) ➞ [5, 6]\n\nNotes\nKeep the same ordering in the output.",
    "tags": [
      "loops",
      "arrays",
      "conditions"
    ],
    "title": "Two Distinct Elements"
  },
  {
    "_id": "R5F99DeuhqYxbGyMM",
    "difficulty": 1.353846153846154,
    "language": "python3",
    "summary": "Create a function that builds a word from the scrambled letters contained in the first list. Use the second list to establish each position of the letters in the first list. Return a string from the unscrambled letters (that made-up the word).\n\nExamples\nword_builder([\"g\", \"e\", \"o\"], [1, 0, 2]) ➞ \"ego\"\n\nword_builder([\"e\", \"t\", \"s\", \"t\"], [3, 0, 2, 1]) ➞ \"test\"",
    "tags": [
      "arrays",
      "strings",
      "formatting"
    ],
    "title": "New Word Builder"
  },
  {
    "_id": "uK4Dw7Pise5uCfKqo",
    "difficulty": 1.355140186915888,
    "language": "python3",
    "summary": "Create a Book class that has two attributes:\n\n.title\n.author\n\nand two methods:\n\nA method named .get_title() that returns: \"Title: \" + the instance title.\nA method named .get_author() that returns: \"Author: \" + the instance author.\n\nand instantiate this class by creating 3 new books:\n\nPride and Prejudice - Jane Austen (PP)\nHamlet - William Shakespeare (H)\nWar a",
    "tags": [
      "objects",
      "language_fundamentals",
      "classes"
    ],
    "title": "Book Shelf"
  },
  {
    "_id": "6dnhESWBcTMMF3gsa",
    "difficulty": 1.3570391872278664,
    "language": "python3",
    "summary": "Create a function that takes two parameters and, if both parameters are strings, add them as if they were integers or if the two parameters are integers, concatenate them.\n\nExamples\nstupid_addition(1, 2) ➞ \"12\"\n\nstupid_addition(\"1\", \"2\") ➞ 3\n\nstupid_addition(\"1\", 2) ➞ None\n\nNotes\nIf the two parameters are different data types, return None.\nAll parameters will",
    "tags": [
      "validation",
      "strings",
      "numbers",
      "conditions"
    ],
    "title": "Stupid Addition"
  },
  {
    "_id": "rprukfcGWqnvKZR9g",
    "difficulty": 1.3595890410958904,
    "language": "python3",
    "summary": "Create a class named User and create a way to check the number of users (number of instances) were created, so that the value can be accessed as a class attribute.\n\nExamples\nu1 = User(\"johnsmith10\")\nUser.user_count ➞ 1\n\nu2 = User(\"marysue1989\")\nUser.user_count ➞ 2\n\nu3 = User(\"milan_rodrick\")\nUser.user_count ➞ 3\n\nMake sure that the usernames are accessible via",
    "tags": [
      "classes",
      "objects",
      "language_fundamentals"
    ],
    "title": "Count Number of Instances"
  },
  {
    "_id": "6NoaFGKJgRW6oXhLC",
    "difficulty": 1.36,
    "language": "python3",
    "summary": "Create a function that takes a string and returns the sum of vowels, where some vowels are considered numbers.\n\nVowel | Number\n:--- | ---\nA | 4\nE | 3\nI | 1\nO | 0\nU | 0\n\nExamples\nsumofvowels(\"Let\\'s test this function.\") ➞ 8\n\nsumofvowels(\"Do I get the correct output?\") ➞ 10\n\nsumofvowels(\"I love edabit!\") ➞ 12\n\nNotes\nVowels are case-insensitive (e.g. A = 4 and a",
    "tags": [
      "logic",
      "numbers",
      "math",
      "language_fundamentals"
    ],
    "title": "Sum of v0w3ls"
  },
  {
    "_id": "JiLom4d6aBk7wAJcZ",
    "difficulty": 1.3625429553264605,
    "language": "python3",
    "summary": "In this challenge, you have to establish if a given integer n is a Sastry number. If the number resulting from the concatenation of an integer n with its successor is a perfect square, then n is a Sastry Number.\n\nGiven a positive integer n, implement a function that returns True if n is a Sastry number, or False if it's not.\n\nExamples\nis_sastry(183) ➞ True\nCon",
    "tags": [
      "numbers",
      "math",
      "validation",
      "algorithms"
    ],
    "title": "Sastry Numbers"
  },
  {
    "_id": "7PtLRCT5aL9uiqxPs",
    "difficulty": 1.36318407960199,
    "language": "python3",
    "summary": "Your job is to create a function, that takes 3 numbers: a, b, c and returns True if the last digit of a * b = the last digit of c. Check the examples below for an explanation.\n\nExamples\nlast_dig(25, 21, 125) ➞ True\nThe last digit of 25 is 5, the last digit of 21 is 1, and the last\ndigit of 125 is 5, and the last digit of 5*1 = 5, which is equal\nto the last dig",
    "tags": [
      "algebra",
      "logic",
      "validation",
      "numbers"
    ],
    "title": "Last Digit Ultimate"
  },
  {
    "_id": "baBNZFCozmjNhbp9Q",
    "difficulty": 1.3643122676579926,
    "language": "python3",
    "summary": "Create a function that takes a number (step) as an argument and returns the amount of boxes in that step of the sequence.\n\nBox Sequence Image\n\nStep 0: Start with 0\nStep 1: Add 3\nStep 2: Subtract 1\nRepeat Step 1 & 2 ...\n\nExamples\nbox_seq(0) ➞ 0\n\nbox_seq(1) ➞ 3\n\nbox_seq(2) ➞ 2\n\nNotes\nStep (the input) is always a positive integer (or zero).",
    "tags": [
      "algebra",
      "algorithms",
      "loops"
    ],
    "title": "Algebra Sequence — Boxes"
  },
  {
    "_id": "jwzgYjymYK7Gmro93",
    "difficulty": 1.36432350718065,
    "language": "python3",
    "summary": "Create a function that returns the indices of all occurrences of an item in the list.\n\nExamples\nget_indices([\"a\", \"a\", \"b\", \"a\", \"b\", \"a\"], \"a\") ➞ [0, 1, 3, 5]\n\nget_indices([1, 5, 5, 2, 7], 7) ➞ [4]\n\nget_indices([1, 5, 5, 2, 7], 5) ➞ [1, 2]\n\nget_indices([1, 5, 5, 2, 7], 8) ➞ []\n\nNotes\nIf an element does not exist in a list, return [].\nLists are zero-indexed.\nV",
    "tags": [
      "arrays",
      "language_fundamentals"
    ],
    "title": "All Occurrences of an Element in a List"
  },
  {
    "_id": "n5Ar5F2CJMpGRXz3o",
    "difficulty": 1.364795918367347,
    "language": "python3",
    "summary": "Stalactites hang from the ceiling of a cave while stalagmites grow from the floor.\n\nCreate a function that determines whether the input represents \"stalactites\" or \"stalagmites\". If it represents both, return \"both\". Input will be a 2D list, with 1 representing a piece of rock, and 0 representing air space.\n\nExamples\nmineral_formation([\n  [0, 1, 0, 1],\n  [0, 1",
    "tags": [
      "arrays",
      "validation"
    ],
    "title": "Stalactites or Stalagmites?"
  },
  {
    "_id": "vAS4Hp4wzSEnQs3tZ",
    "difficulty": 1.365068493150685,
    "language": "python3",
    "summary": "Suppose you have a guest list of students and the country they are from, stored as key-value pairs in a dictionary.\n\nGUEST_LIST = {\n\"Randy\": \"Germany\",\n\"Karla\": \"France\",\n\"Wendy\": \"Japan\",\n\"Norman\": \"England\",\n\"Sam\": \"Argentina\"\n}\n\nWrite a function that takes in a name and returns a name tag, that should read:\n\n\"Hi! I'm [name], and I'm from [country].\"\n\nIf the",
    "tags": [
      "objects",
      "formatting"
    ],
    "title": "International Greetings"
  },
  {
    "_id": "K5277r6RmsJRSz27t",
    "difficulty": 1.3652173913043477,
    "language": "python3",
    "summary": "The challenge is to recreate the functionality of the title() method into a function called emphasise(). The title() method capitalises the first letter of every word.\n\nExamples\nemphasise(\"hello world\") ➞ \"Hello World\"\n\nemphasise(\"GOOD MORNING\") ➞ \"Good Morning\"\n\nemphasise(\"99 red balloons!\") ➞ \"99 Red Balloons!\"\n\nNotes\nYou won't run into any issues when deali",
    "tags": [
      "strings",
      "loops",
      "regex"
    ],
    "title": "Emphasise the Words"
  },
  {
    "_id": "7QvH8PJgQ5x4qNGLh",
    "difficulty": 1.365482233502538,
    "language": "python3",
    "summary": "Create a function where given the number n to count down from, and some words txt, return a countdown sequence as a string leading up to the words at the end.\n\nPut a full stop after each number and uppercase and add an exclamation mark to the word. See the examples below for clarification!\n\nExamples\ncountdown(10, \"Blast Off\") ➞ \"10. 9. 8. 7. 6. 5. 4. 3. 2. 1.",
    "tags": [
      "formatting",
      "strings",
      "numbers"
    ],
    "title": "Making a Countdown"
  },
  {
    "_id": "kbtju9wk5pjGYMmHF",
    "difficulty": 1.365566037735849,
    "language": "python3",
    "summary": "Write a class called Name and create the following attributes given a first name and last name (as fname and lname):\n\nAn attribute called fullname which returns the first and last names.\nA attribute called initials which returns the first letters of the first and last name. Put a . between the two letters.\n\nRemember to allow the attributes fname and lname to b",
    "tags": [
      "classes",
      "objects",
      "language_fundamentals"
    ],
    "title": "Name Classes"
  },
  {
    "_id": "PgsQAdNvsEAkese8X",
    "difficulty": 1.366093366093366,
    "language": "python3",
    "summary": "Write a function that converts a dictionary into a list, where each element represents a key-value pair.\n\nExamples\nto_list({ a: 1, b: 2 }) ➞ [[\"a\", 1], [\"b\", 2]]\n\nto_list({ shrimp: 15, tots: 12 }) ➞ [[\"shrimp\", 15], [\"tots\", 12]]\n\nto_list({}) ➞ []\n\nNotes\nReturn an empty list if the dictionary  is empty.\nSort the list alphabetically by key.",
    "tags": [
      "arrays",
      "language_fundamentals",
      "objects"
    ],
    "title": "Converting Dictionaries to Lists"
  },
  {
    "_id": "ycaiA3qTXJWyDz6Dq",
    "difficulty": 1.3666666666666667,
    "language": "python3",
    "summary": "Make two functions:\n\nconsonants(word) which returns the number of consonants in a word when called.\nvowels(word) which returns the number of vowels in a word when called.\n\nExamples\nvowels('Jameel SAEB') ➞ 5\n\nconsonants('He|\\o mY Fr*end') ➞ 7\n\nconsonants(\"Smithsonian\") ➞ 7\nvowels(\"Smithsonian\") ➞ 4\n\nNotes\nVowels are: a, e, i, o, u.\nSpaces and special character",
    "tags": [
      "language_fundamentals",
      "regex",
      "strings"
    ],
    "title": "Extending The String"
  },
  {
    "_id": "jdJ5HYuhmrr89nhkB",
    "difficulty": 1.3672787979966612,
    "language": "python3",
    "summary": "Write a function that returns a lambda expression, which adds n to its input\n\nExamples\nadds1 = adds_n(1)\n\nadds1(3) ➞ 4\nadds1(5.7) ➞ 6.7\n\nadds10 = adds_n(10)\n\nadds10(44) ➞ 54\nadds10(20) ➞ 30\n\nNotes\nN/A",
    "tags": [
      "language_fundamentals",
      "higher_order_functions"
    ],
    "title": "All About Lambda Expressions: Adding"
  },
  {
    "_id": "nn7JKRBfq8iDcX8ZB",
    "difficulty": 1.368,
    "language": "python3",
    "summary": "Write a function that returns a lambda expression, which transforms its input by adding a particular suffix at the end.\n\nExamples\naddly = addsuffix(\"ly\")\n\nadd_ly(\"hopeless\") ➞ \"hopelessly\"\nadd_ly(\"total\") ➞ \"totally\"\n\naddless = addsuffix(\"less\")\n\nadd_less(\"fear\") ➞ \"fearless\"\nadd_less(\"ruth\") ➞ \"ruthless\"\n\nNotes\nN/A",
    "tags": [
      "language_fundamentals",
      "closures",
      "higher_order_functions"
    ],
    "title": "All About Lambda Expressions: Adding Suffixes"
  },
  {
    "_id": "MTGTSJvAi2iwd2Ygs",
    "difficulty": 1.3689839572192513,
    "language": "python3",
    "summary": "Create a function that takes a division equation d and checks if it will return a whole number without decimals after dividing.\n\nExamples\nvalid_division(\"6/3\") ➞ True\n\nvalid_division(\"30/25\") ➞ False\n\nvalid_division(\"0/3\") ➞ True\n\nNotes\nReturn \"invalid\" if division by zero.",
    "tags": [
      "math",
      "validation"
    ],
    "title": "Valid Division"
  },
  {
    "_id": "2FR33kRmz87xRMZuq",
    "difficulty": 1.3703703703703705,
    "language": "python3",
    "summary": "Build a function that creates histograms. Every bar needs to be on a new line and its lenght corresponds to the numbers in the list passed as an argument. The  second argument of the function represents the character that needs to be used.\n\nhistogram(lst, char) -> str\n\nExamples\nhistogram([1, 3, 4], \"#\") ➞ \"#\\n###\\n####\"\n\nhistogram([6, 2, 15, 3], \"=\") ➞ \"======",
    "tags": [
      "data_structures",
      "logic",
      "strings"
    ],
    "title": "Histogram Function"
  },
  {
    "_id": "LdXYzf5d3xJgYZur8",
    "difficulty": 1.3734939759036144,
    "language": "python3",
    "summary": "Create a function that takes three values:\n\nh hours\nm minutes\ns seconds\n\nReturn the value that's the longest duration.\n\nExamples\nlongest_time(1, 59, 3598) ➞ 1\n\nlongest_time(2, 300, 15000) ➞ 300\n\nlongest_time(15, 955, 59400) ➞ 59400\n\nNotes\nNo two durations will be the same.",
    "tags": [
      "numbers",
      "dates",
      "math",
      "conditions"
    ],
    "title": "A Long Long Time"
  },
  {
    "_id": "woA74HtrheoQva87R",
    "difficulty": 1.3742203742203742,
    "language": "python3",
    "summary": "Create a function that concatenates n input lists, where n is variable.\n\nExamples\nconcat([1, 2, 3], [4, 5], [6, 7]) ➞ [1, 2, 3, 4, 5, 6, 7]\n\nconcat([1], [2], [3], [4], [5], [6], [7]) ➞ [1, 2, 3, 4, 5, 6, 7]\n\nconcat([1, 2], [3, 4]) ➞ [1, 2, 3, 4]\n\nconcat([4, 4, 4, 4, 4]) ➞ [4, 4, 4, 4, 4]\n\nNotes\nLists should be concatenated in order of the arguments.",
    "tags": [
      "language_fundamentals",
      "arrays"
    ],
    "title": "Concatenate Variable Number of Input Lists"
  },
  {
    "_id": "pjgDmRqh2fbBBwo77",
    "difficulty": 1.3745318352059925,
    "language": "python3",
    "summary": "Syncopation means an emphasis on a weak beat of a bar of music; most commonly, beats 2 and 4 (and all other even-numbered beats if applicable).\n\nYou will be given a string representing beats, where hashtags # represent emphasized beats. Create a function that returns if the line of music contains any syncopation, and False otherwise.\n\nExamples\nhas_syncopation(",
    "tags": [
      "strings",
      "loops",
      "validation"
    ],
    "title": "Syncopated Rhythm"
  },
  {
    "_id": "oiHH7qocTyM3JqNf8",
    "difficulty": 1.3747178329571106,
    "language": "python3",
    "summary": "Write a function that changes every letter to the next letter:\n\n\"a\" becomes \"b\"\n\"b\" becomes \"c\"\n\"d\" becomes \"e\"\nand so on ...\n\nExamples\nmove(\"hello\") ➞ \"ifmmp\"\n\nmove(\"bye\") ➞ \"czf\"\n\nmove(\"welcome\") ➞ \"xfmdpnf\"\n\nNotes\nThere will be no z's in the tests.",
    "tags": [
      "strings",
      "formatting",
      "cryptography"
    ],
    "title": "Change Every Letter to the Next Letter"
  },
  {
    "_id": "Mv5qSgZKTLrLt9zzW",
    "difficulty": 1.375796178343949,
    "language": "python3",
    "summary": "A fruit juice company tags their fruit juices by concatenating the first three letters of the words in a flavor's name, with its capacity.\n\nCreate a function that creates product IDs for different fruit juices.\n\nExamples\ngetdrinkID(\"apple\", \"500ml\") ➞ \"APP500\"\n\ngetdrinkID(\"pineapple\", \"45ml\") ➞ \"PIN45\"\n\ngetdrinkID(\"passion fruit\", \"750ml\") ➞ \"PASFRU750\"\n\nNotes",
    "tags": [
      "strings",
      "loops"
    ],
    "title": "Fruit Juices"
  },
  {
    "_id": "Rg26hsPPXXqpho3g2",
    "difficulty": 1.3759036144578314,
    "language": "python3",
    "summary": "Your function will be passed two functions, f and g, that don't take any parameters. Your function has  to call them, and return a string which indicates which function returned the larger number.\n\nIf f returns the larger number, return the string f.\nIf g returns the larger number, return the string g.\nIf the functions return the same number, return the string",
    "tags": [
      "higher_order_functions",
      "language_fundamentals",
      "numbers"
    ],
    "title": "Which Function Returns the Larger Number?"
  },
  {
    "_id": "a6XHqehbttHnjE7bK",
    "difficulty": 1.3761467889908257,
    "language": "python3",
    "summary": "A repdigit is a positive number composed out of the same digit. Create a function that takes an integer and returns whether it's a repdigit or not.\n\nExamples\nis_repdigit(66) ➞ True\n\nis_repdigit(0) ➞ True\n\nis_repdigit(-11) ➞ False\n\nNotes\nThe number 0 should return True (even though it's not a positive number).\nCheck the Resources tab for more info on repdigits.",
    "tags": [
      "algebra",
      "functional_programming",
      "math",
      "numbers",
      "validation"
    ],
    "title": "Is the Number a Repdigit"
  },
  {
    "_id": "3wLZvWf4sFerNQmo7",
    "difficulty": 1.3781902552204177,
    "language": "python3",
    "summary": "Given two strings comprised of + and -, return a new string which shows how the two strings interact in the following way:\nWhen positives and positives interact, they remain positive.\nWhen negatives and negatives interact, they remain negative.\nBut when negatives and positives interact, they become neutral, and are shown as the number 0.\n\nWorked Example\nneutra",
    "tags": [
      "loops",
      "strings",
      "conditions"
    ],
    "title": "Neutralisation"
  },
  {
    "_id": "sLq6GDa4NzDWRD9hY",
    "difficulty": 1.3790849673202614,
    "language": "python3",
    "summary": "Create a function that counts the integer's number of digits.\n\nExamples\ncount(318) ➞ 3\n\ncount(-92563) ➞ 5\n\ncount(4666) ➞ 4\n\ncount(-314890) ➞ 6\n\ncount(654321) ➞ 6\n\ncount(638476) ➞ 6\n\nNotes\nSolve this without using strings.\nAlternatively, you can solve this via a recursive approach.\nA recursive version of this challenge can be found via this link.",
    "tags": [
      "math",
      "numbers",
      "loops"
    ],
    "title": "Integer Digits Count"
  },
  {
    "_id": "NMHFTCMqW6j8sXkNd",
    "difficulty": 1.3799582463465554,
    "language": "python3",
    "summary": "Create a function that takes a list of two numbers and checks if the square root of the first number is equal to the cube root of the second number.\n\nExamples\nchecksquareand_cube([4, 8]) ➞ True\n\nchecksquareand_cube([16, 48]) ➞ False\n\nchecksquareand_cube([9, 27]) ➞ True\n\nNotes\nRemember to return either True or False.\nAll lists contain two positive numbers.",
    "tags": [
      "math",
      "numbers",
      "arrays",
      "validation",
      "geometry"
    ],
    "title": "Squares and Cubes"
  },
  {
    "_id": "vfTJHRxAGeMxkvxni",
    "difficulty": 1.3800494641384995,
    "language": "python3",
    "summary": "Create a function that takes in a list of intervals and returns how many intervals overlap with a given point.\n\nAn interval overlaps a particular point if the point exists inside the interval, or on the interval's boundary. For example the point 3 overlaps with the interval [2, 4] (it is inside) and [2, 3] (it is on the boundary).\n\nTo illustrate:\ncount_overlap",
    "tags": [
      "validation",
      "arrays",
      "algorithms"
    ],
    "title": "Intersecting Intervals"
  },
  {
    "_id": "wZojj7RuwnNDL4Seh",
    "difficulty": 1.3800738007380073,
    "language": "python3",
    "summary": "Create a function that checks if the box is completely filled with the asterisk symbol *.\n\nExamples\ncompletely_filled([\n  \"#####\",\n  \"#*#\",\n  \"#*#\",\n  \"#*#\",\n  \"#####\"\n]) ➞ True\n\ncompletely_filled([\n  \"#####\",\n  \"#* *#\",\n  \"#*#\",\n  \"#*#\",\n  \"#####\"\n]) ➞ False\n\ncompletely_filled([\n  \"###\",\n  \"#*#\",\n  \"###\"\n]) ➞ True\n\ncompletely_filled([\n  \"##\",\n  \"##\"\n]) ➞ True",
    "tags": [
      "strings",
      "formatting",
      "validation"
    ],
    "title": "Box Completely Filled?"
  },
  {
    "_id": "x44ZRvQtJ6TyZQhwx",
    "difficulty": 1.3807040417209908,
    "language": "python3",
    "summary": "A pandigital number contains all digits (0-9) at least once. Write a function that takes an integer, returning True if the integer is pandigital, and False otherwise.\n\nExamples\nis_pandigital(98140723568910) ➞ True\n\nis_pandigital(90864523148909) ➞ False\n7 is missing.\n\nis_pandigital(112233445566778899) ➞ False\n\nNotes\nThink about the properties of a pandigital nu",
    "tags": [
      "numbers",
      "math",
      "validation"
    ],
    "title": "Pandigital Numbers"
  },
  {
    "_id": "H3t4MkT9wGdL9P6Y3",
    "difficulty": 1.3809135399673735,
    "language": "python3",
    "summary": "Create a function that determines whether a number is Oddish or Evenish. A number is Oddish if the sum of all of its digits is odd, and a number is Evenish if the sum of all of its digits is even. If a number is Oddish, return \"Oddish\". Otherwise, return \"Evenish\".\n\nFor example, oddishorevenish(121) should return \"Evenish\", since 1 + 2 + 1 = 4. oddishorevenish",
    "tags": [
      "numbers",
      "math",
      "validation",
      "conditions"
    ],
    "title": "Oddish vs. Evenish"
  },
  {
    "_id": "JcmSuBX2EaPfRkqZ8",
    "difficulty": 1.3815028901734103,
    "language": "python3",
    "summary": "Create a function that takes a list of dictionaries (groceries) which calculates the total price and returns it as a number. A grocery dictionary has a product, a quantity and a price, for example:\n\n{\n  \"product\": \"Milk\",\n  \"quantity\": 1,\n  \"price\": 1.50\n}\n\nExamples\n1 bottle of milk:\ngettotalprice([\n  { \"product\": \"Milk\", \"quantity\": 1, \"price\": 1.50 }\n]) ➞ 1.",
    "tags": [
      "math",
      "logic",
      "arrays",
      "objects"
    ],
    "title": "Calculate the Total Price of Groceries"
  },
  {
    "_id": "jWk79SoDXnfm8ymhw",
    "difficulty": 1.381619937694704,
    "language": "python3",
    "summary": "Create a function that takes a string and censors words over four characters with *.\n\nExamples\ncensor(\"The code is fourty\") ➞ \"The code is **\"\n\ncensor(\"Two plus three is five\") ➞ \"Two plus * is five\"\n\ncensor(\"aaaa aaaaa 1234 12345\") ➞ \"aaaa * 1234 *\"\n\nNotes\nDon't censor words with exactly four characters.\nIf all words have four characters or less, return the o",
    "tags": [
      "strings",
      "conditions"
    ],
    "title": "Censor Words Longer Than Four Characters"
  },
  {
    "_id": "2yHQwkecEHZBfHcmN",
    "difficulty": 1.3818040435458787,
    "language": "python3",
    "summary": "To train for an upcoming marathon, Johnny goes on one long-distance run each Saturday. He wants to track how often the number of miles he runs exceeds the previous Saturday. This is called a progress day.\n\nCreate a function that takes in a list of miles run every Saturday and returns Johnny's total number of progress days.\n\nExamples\nprogress_days([3, 4, 1, 2])",
    "tags": [
      "arrays",
      "numbers",
      "loops"
    ],
    "title": "Is Johnny Making Progress?"
  },
  {
    "_id": "K3qMssK6mF34ctXE5",
    "difficulty": 1.3823529411764706,
    "language": "python3",
    "summary": "Create a function that takes an integer and outputs an n x n square solely consisting of the integer n.\n\nExamples\nsquare_patch(3) ➞ [\n  [3, 3, 3],\n  [3, 3, 3],\n  [3, 3, 3]\n]\n\nsquare_patch(5) ➞ [\n  [5, 5, 5, 5, 5],\n  [5, 5, 5, 5, 5],\n  [5, 5, 5, 5, 5],\n  [5, 5, 5, 5, 5],\n  [5, 5, 5, 5, 5]\n]\n\nsquare_patch(1) ➞ [\n  [1]\n]\n\nsquare_patch(0) ➞ []\n\nNotes\nn >= 0.\nIf n ",
    "tags": [
      "arrays",
      "loops",
      "language_fundamentals"
    ],
    "title": "Perfect Square Patch"
  },
  {
    "_id": "fDfh3WJPPiiJwgTrW",
    "difficulty": 1.3825910931174088,
    "language": "python3",
    "summary": "Return the total number of lists inside a given list.\n\nExamples\nnumofsublists([[1, 2, 3]]) ➞ 1\n\nnumofsublists([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) ➞ 3\n\nnumofsublists([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]) ➞ 4\n\nnumofsublists([1, 2, 3]) ➞ 0\n\nNotes\nN/A",
    "tags": [
      "arrays",
      "language_fundamentals"
    ],
    "title": "Number of Lists in a List"
  },
  {
    "_id": "rix73vi9mFYWWqPoA",
    "difficulty": 1.3829787234042554,
    "language": "python3",
    "summary": "You are given two lists that each contain data that represents the min and max weather temperatures for each day of the week.\n\nThe records list contains the all-time record low/high temperatures for that day of the week.\n\n[[record low, record high], ...]\n\nThe current week list contains the daily low/high temperatures for each day of the current week.\n\n[[daily",
    "tags": [
      "loops",
      "arrays"
    ],
    "title": "Record Temperatures"
  },
  {
    "_id": "Hs7YDjZALCEPRPD6Z",
    "difficulty": 1.383941605839416,
    "language": "python3",
    "summary": "In the Code tab is a function which is meant to return how many uppercase letters there are in a list of various words. Fix the list comprehension so that the code functions normally!\n\nExamples\ncount_uppercase([\"SOLO\", \"hello\", \"Tea\", \"wHat\"]) ➞ 6\n\ncount_uppercase([\"little\", \"lower\", \"down\"]) ➞ 0\n\ncount_uppercase([\"EDAbit\", \"Educate\", \"Coding\"]) ➞ 5\n\nNotes\nChe",
    "tags": [
      "language_fundamentals",
      "bugs",
      "arrays"
    ],
    "title": "Buggy Uppercase Counting"
  },
  {
    "_id": "tNRvtHKZxvqPRnAeF",
    "difficulty": 1.3849056603773584,
    "language": "python3",
    "summary": "Write a function that counts the number of times a specific digit occurs in a range (inclusive). The function will look like:\n\ndigit_occurrences(start, end, digit) ➞ number of times digit occurs\n\nExamples\ndigit_occurrences(51, 55, 5) ➞ 6\n[51, 52, 53, 54, 55] : 5 occurs 6 times\n\ndigit_occurrences(1, 8, 9) ➞ 0\n\ndigit_occurrences(-8, -1, 8) ➞ 1\n\ndigit_occurrences",
    "tags": [
      "numbers",
      "strings"
    ],
    "title": "Count a Specific Digit"
  },
  {
    "_id": "n4KPv4eaLmkYeD6gq",
    "difficulty": 1.3849206349206349,
    "language": "python3",
    "summary": "In mathematics, interval is the difference between the largest number and the smallest number in a list.\n\nTo illustrate:\n\nA = (3, 5, 7, 23, 11, 42, 80)\n\nInterval of A = 80 - 3 = 77\n\nCreate a function that takes a list and returns \":)\" if the interval of the list is equal to any other element; otherwise return \":(\".\n\nExamples\nface_interval([1, 2, 5, 8, 3, 9]) ➞",
    "tags": [
      "algorithms",
      "math",
      "sorting",
      "validation"
    ],
    "title": "Face Interval"
  },
  {
    "_id": "mHRyhyazjCoze5jSL",
    "difficulty": 1.3854748603351956,
    "language": "python3",
    "summary": "Write a function to replace all instances of character c1 with character c2 and vice versa.\n\nExamples\ndouble_swap(\"aabbccc\", \"a\", \"b\") ➞ \"bbaaccc\"\n\ndouble_swap(\"random w#rds writt&n h&r&\", \"#\", \"&\")\n➞ \"random w&rds writt#n h#r#\"\n\ndouble_swap(\"128 895 556 788 999\", \"8\", \"9\")\n➞ \"129 985 556 799 888\"\n\nNotes\nBoth characters will show up at least once in the string",
    "tags": [
      "strings",
      "regex"
    ],
    "title": "Double Character Swap"
  },
  {
    "_id": "J6riiW5W6GMYQfCpb",
    "difficulty": 1.3859649122807018,
    "language": "python3",
    "summary": "Write a function that has two parameters: orders and  cost. Return any orders that are greater than the cost.\n\nExamples\nexpensive_orders({ \"a\": 3000, \"b\": 200, \"c\": 1050 }, 1000)\n➞ { \"a\": 3000, \"c\": 1050 }\n\nexpensive_orders({ \"Gucci Fur\": 24600, \"Teak Dining Table\": 3200, \"Louis Vutton Bag\": 5550, \"Dolce Gabana Heels\": 4000 }, 20000)\n➞ { \"Gucci Fur\": 24600 }",
    "tags": [
      "objects"
    ],
    "title": "Expensive Orders"
  },
  {
    "_id": "9sN5tvXZjYCsKb4Mx",
    "difficulty": 1.3866666666666667,
    "language": "python3",
    "summary": "Create a function that takes the volume of a cube and returns the length of the cube's main diagonal, rounded to two decimal places.\n\nExamples\ncube_diagonal(8) ➞ 3.46\n\ncube_diagonal(343) ➞ 12.12\n\ncube_diagonal(1157.625) ➞ 18.19\n\nNotes\nUse the sqrt function in the math module.",
    "tags": [
      "math",
      "geometry"
    ],
    "title": "Diagonal of a Cube"
  },
  {
    "_id": "zgu7m6W7i3z5SYwa6",
    "difficulty": 1.3871635610766047,
    "language": "python3",
    "summary": "Write a function that takes a list of two numbers and determines if the sum of the digits in each number are equal to each other.\n\nExamples\nis_equal([105, 42]) ➞ True\n1 + 0 + 5 = 6\n4 + 2 = 6\n\nis_equal([21, 35]) ➞ False\n\nis_equal([0, 0]) ➞ True\n\nNotes\nN/A",
    "tags": [
      "arrays",
      "language_fundamentals",
      "validation",
      "conditions"
    ],
    "title": "Are the Sum of Digits in the Numbers Equal?"
  },
  {
    "_id": "x5o7jTvzXjujvrh6t",
    "difficulty": 1.3876500857632934,
    "language": "python3",
    "summary": "The iterated square root of a number is the number of times the square root function must be applied to bring the number strictly under 2.\n\nGiven an integer, return its iterated square root. Return \"invalid\" if it is negative.\n\nExamples\ni_sqrt(1) ➞ 0\n\ni_sqrt(2) ➞ 1\n\ni_sqrt(7) ➞ 2\n\ni_sqrt(27) ➞ 3\n\ni_sqrt(256) ➞ 4\n\ni_sqrt(-1) ➞ \"invalid\"\n\nNotes\nIdea for iterated",
    "tags": [
      "loops",
      "numbers",
      "math"
    ],
    "title": "Iterated Square Root"
  },
  {
    "_id": "mgBdGGw7StxF2tBqu",
    "difficulty": 1.388768898488121,
    "language": "python3",
    "summary": "Create a function that returns the amount of duplicate characters in a string. It will be case sensitive and spaces are included. If there are no duplicates, return 0.\n\nExamples\nduplicates(\"Hello World!\") ➞ 3\n\nduplicates(\"foobar\") ➞ 1\n\nduplicates(\"helicopter\") ➞ 1\n\nduplicates(\"birthday\") ➞ 0\nIf there are no duplicates, return 0\n\nNotes\nMake sure to only start c",
    "tags": [
      "arrays",
      "strings",
      "loops"
    ],
    "title": "Count the Number of Duplicate Characters"
  },
  {
    "_id": "o7LPd9dAE5x9k7zFj",
    "difficulty": 1.389937106918239,
    "language": "python3",
    "summary": "A logarithm is kind of like reverse exponents. There is a base and a number in a logarithm. The point of a logarithm is to find out what power you have to raise the base to get the number next to the base. For example:\n\nlog base 5 of 25 = x\n\nThis is the same thing as saying 5 to the xth power is 25, which is 2 (so x would be 2). Using this example, your functi",
    "tags": [
      "algebra",
      "numbers",
      "math"
    ],
    "title": "Logarithms - Basic"
  },
  {
    "_id": "QCXxnDHsfF7gtkxze",
    "difficulty": 1.3899441340782124,
    "language": "python3",
    "summary": "This is a reverse coding challenge. Normally you're given explicit directions with how to create a function. Here, you must generate your own function to satisfy the relationship between the inputs and outputs.\n\nYour task is to create a function that, when fed the inputs below, produce the sample outputs shown.\n\nExamples\nmystery_func(152) ➞ 10\n\nmystery_func(83",
    "tags": [
      "numbers",
      "loops",
      "algorithms"
    ],
    "title": "Reverse Coding Challenge #6"
  },
  {
    "_id": "E882au3CJba2jfQyT",
    "difficulty": 1.3924050632911393,
    "language": "python3",
    "summary": "Create a function that takes two lists of numbers sorted in ascending order and returns a list of numbers which are common to both the input lists.\n\nExamples\ncommon_elements([-1, 3, 4, 6, 7, 9], [1, 3]) ➞ [3]\n\ncommon_elements([1, 3, 4, 6, 7, 9], [1, 2, 3, 4, 7, 10]) ➞ [1, 3, 4, 7]\n\ncommon_elements([1, 2, 2, 2, 3, 4, 5], [1, 2, 4, 5]) ➞ [1, 2, 4, 5]\n\ncommon_ele",
    "tags": [
      "loops",
      "arrays",
      "logic",
      "language_fundamentals",
      "data_structures"
    ],
    "title": "Finding Common Elements"
  },
  {
    "_id": "646cCaFig6AP89YRo",
    "difficulty": 1.3924646781789638,
    "language": "python3",
    "summary": "Write a program that returns a list of all the numbers from 1 to an integer argument. But for multiples of three use “Fizz” instead of the number and for the multiples of five use “Buzz”. For numbers which are multiples of both three and five use “FizzBuzz”.\n\nExample\nfizz_buzz(10) ➞ [1, 2, \"Fizz\", 4, \"Buzz\", \"Fizz\", 7, 8, \"Fizz\", \"Buzz\"]\n\nfizz_buzz(15) ➞ [1, 2",
    "tags": [
      "logic",
      "algorithms",
      "interview"
    ],
    "title": "The Fizz Buzz Test"
  },
  {
    "_id": "TkbgxTEn7rxd9hmx7",
    "difficulty": 1.3927392739273927,
    "language": "python3",
    "summary": "Write a Composer class that has three instance variables:\n\nname\ndob\ncountry\n\nAdd an additional class variable .count which counts the total number of instances created.\n\nExamples\nJust finished writing the Composer class\nComposer.count ➞ 0\n\nc1 = Composer(\"Ludvig van Beethoven\", 1770, \"Germany\")\nComposer.count ➞ 1\n\nc2 = Composer(\"Wolfgang Amadeus Mozart\", 1756,",
    "tags": [
      "objects",
      "language_fundamentals",
      "classes"
    ],
    "title": "Counting Instances Created from a Class"
  },
  {
    "_id": "rwPguhgju54AMR2kM",
    "difficulty": 1.3937947494033414,
    "language": "python3",
    "summary": "Given a string, create a function that outputs a list, building and deconstructing the string letter by letter. See the examples below for some helpful guidance.\n\nExamples\nconstruct_deconstruct(\"Hello\") ➞ [\n  \"H\",\n  \"He\",\n  \"Hel\",\n  \"Hell\",\n  \"Hello\",\n  \"Hell\",\n  \"Hel\",\n  \"He\",\n  \"H\"\n]\n\nconstruct_deconstruct(\"edabit\") ➞ [\n  \"e\",\n  \"ed\",\n  \"eda\",\n  \"edab\",\n  \"e",
    "tags": [
      "language_fundamentals",
      "strings",
      "arrays",
      "loops"
    ],
    "title": "Construct and Deconstruct"
  },
  {
    "_id": "qeyinsjZHCPEddbfe",
    "difficulty": 1.393939393939394,
    "language": "python3",
    "summary": "John is playing a dice game. The rules are as follows.\n\nRoll two dice.\nAdd the numbers on the dice together.\nAdd the total to your overall score.\nRepeat this for three rounds.\n\nBut if you roll DOUBLES, your score is instantly wiped to 0 and your game ends immediately!\n\nCreate a function that takes in a list of tuples as input, and return John's score after his",
    "tags": [
      "arrays",
      "algorithms",
      "games",
      "loops"
    ],
    "title": "Don't Roll Doubles!"
  },
  {
    "_id": "aoN2XoAfQzPQeRNRt",
    "difficulty": 1.3940886699507389,
    "language": "python3",
    "summary": "Write a function that does the following things: adding, subtracting, dividing, or multiplying values. It is simply referred to as variable operation variable. Of course, the variables have to be defined, but in this challenge, the variable will be defined for you. All you have to do is look at the variable, do some string to integer conversions use some if co",
    "tags": [
      "conditions",
      "language_fundamentals",
      "math"
    ],
    "title": "Operations"
  },
  {
    "_id": "oGkwLhmpys95rjtQ2",
    "difficulty": 1.39419795221843,
    "language": "python3",
    "summary": "Create a function that takes a list of items and checks if the last item matches the rest of the list.\n\nExamples\nmatchlastitem([\"rsq\", \"6hi\", \"g\", \"rsq6hig\"]) ➞ True\nThe last item is the rest joined.\n\nmatchlastitem([1, 1, 1, \"11\"]) ➞ False\nThe last item should be \"111\".\n\nmatchlastitem([8, \"thunder\", True, \"8thunderTrue\"]) ➞ True\n\nNotes\nThe list is always fille",
    "tags": [
      "arrays",
      "validation",
      "strings"
    ],
    "title": "Match the Last Item"
  },
  {
    "_id": "ucsJxQNrkYnpzPaFj",
    "difficulty": 1.3945868945868947,
    "language": "python3",
    "summary": "Create a function that returns the number of times a character appears in each word in a sentence. Treat upper and lower case characters of the same letter as being identical (e.g. a exists in Anna twice, not once).\n\nExamples\nchar_appears(\"She sells sea shells by the seashore.\", \"s\")\n➞ [1, 2, 1, 2, 0, 0, 2]\n\"s\" shows up once in \"She\", twice in \"sells\", once in",
    "tags": [
      "arrays",
      "strings"
    ],
    "title": "Number of Times a Character Appears"
  },
  {
    "_id": "ZrAnDiPTbmrJMHWHD",
    "difficulty": 1.39568345323741,
    "language": "python3",
    "summary": "Given a string containing mostly spaces and one non-space character, return whether the character is positioned in the very centre of the string. This means the number of spaces on both sides should be the same.\n\nExamples\nis_central(\"  #  \") ➞ True\n\nis_central(\" 2    \") ➞ False\n\nis_central(\"@\") ➞ True\n\nNotes\nOnly one character other than spaces will be given a",
    "tags": [
      "strings",
      "validation"
    ],
    "title": "In the Centre?"
  },
  {
    "_id": "jt8XTr75xxowgi6KM",
    "difficulty": 1.3957597173144876,
    "language": "python3",
    "summary": "Create a function that takes an list of student dictionaries and returns a list of their top notes. If student does not have notes then let's assume their top note is equal to 0.\n\nExamples\ngetstudenttop_notes([\n  {\n    \"id\": 1,\n    \"name\": \"Jacek\",\n    \"notes\": [5, 3, 4, 2, 5, 5]\n  },\n  {\n    \"id\": 2,\n    \"name\": \"Ewa\",\n    \"notes\": [2, 3, 3, 3, 2, 5]\n  },\n  {",
    "tags": [
      "arrays",
      "objects"
    ],
    "title": "Get Student Top Notes"
  },
  {
    "_id": "oQ99uE4iPNbEnf9QZ",
    "difficulty": 1.3990147783251232,
    "language": "python3",
    "summary": "Given a known number of unique items, how many ways could we arrange them in a row?\n\nCreate a function that takes an integer n and returns the number of digits of the number of possible permutations for n unique items. For instance, 5 unique items could be arranged in 120 unique ways. 120 has 3 digits, hence the integer 3 is returned.\n\nExamples\nnopermsdigits(0",
    "tags": [
      "recursion",
      "higher_order_functions",
      "math"
    ],
    "title": "Combinatorial Exploration"
  },
  {
    "_id": "qbCavpBpk8KSWM37s",
    "difficulty": 1.4,
    "language": "python3",
    "summary": "Given a list of integers, return the largest gap between elements of the sorted version of that list.\n\nHere's an illustrative example. Consider the list:\n\n[9, 4, 26, 26, 0, 0, 5, 20, 6, 25, 5]\n\n... which, after sorting, becomes the list:\n\n[0, 0, 4, 5, 5, 6, 9, 20, 25, 26, 26]\n\n... so that we now see that the largest gap in the list is the gap of 11 between 9 a",
    "tags": [
      "arrays",
      "sorting",
      "numbers",
      "math"
    ],
    "title": "Largest Gap"
  },
  {
    "_id": "riF3RkrcKpBp3sKCX",
    "difficulty": 1.4,
    "language": "python3",
    "summary": "Create a function which adds spaces before every capital in a word. Uncapitalize the whole string afterwards.\n\nExamples\ncap_space(\"helloWorld\") ➞ \"hello world\"\n\ncap_space(\"iLoveMyTeapot\") ➞ \"i love my teapot\"\n\ncap_space(\"stayIndoors\") ➞ \"stay indoors\"\n\nNotes\nThe first letter will stay uncapitalized.",
    "tags": [
      "strings",
      "loops"
    ],
    "title": "Capital Split"
  },
  {
    "_id": "2NPjN7DDvyi6f5CHF",
    "difficulty": 1.4010416666666667,
    "language": "python3",
    "summary": "Create a function that takes two arguments: a father's current age fage and his son's current age sage. Сalculate how many years ago the father was twice as old as his son, or in how many years he will be twice as old.\n\nExamples\nage_difference(36, 7) ➞ 22\n22 years from now, the father will be 58 years old and his son will be 29 years old.\n\nage_difference(55, 3",
    "tags": [
      "algorithms",
      "numbers",
      "language_fundamentals"
    ],
    "title": "Father and Son Ages"
  },
  {
    "_id": "ksZrMdraPqHjvbaE6",
    "difficulty": 1.4011299435028248,
    "language": "python3",
    "summary": "Write a function that finds the largest even number in a list. Return -1 if not found. The use of built-in functions max() and sorted() are prohibited.\n\nExamples\nlargest_even([3, 7, 2, 1, 7, 9, 10, 13]) ➞ 10\n\nlargest_even([1, 3, 5, 7]) ➞ -1\n\nlargest_even([0, 19, 18973623]) ➞ 0\n\nNotes\nConsider using the modulo operator % or the bitwise and operator &.",
    "tags": [
      "algorithms",
      "numbers",
      "loops",
      "recursion"
    ],
    "title": "Find The Largest Even Number"
  },
  {
    "_id": "xmyWLvzP5df6okDTG",
    "difficulty": 1.4023809523809523,
    "language": "python3",
    "summary": "You are given one input: A list containing eight 1's and/or 0's. Write a function that takes an 8 bit binary number and convert it to decimal.\n\nExamples\nbinarytodecimal([1, 1, 1, 1, 1, 1, 1, 1]) ➞ 255\n\nbinarytodecimal([0, 0, 0, 0, 0, 0, 0, 0]) ➞ 0\n\nbinarytodecimal([1, 0, 1, 1, 1, 1, 0, 0]) ➞ 188\n\nNotes\nReturn an integer.",
    "tags": [
      "loops",
      "math"
    ],
    "title": "Binary to Decimal Converter"
  },
  {
    "_id": "FqFGnnffKRo8LKQKP",
    "difficulty": 1.4029850746268657,
    "language": "python3",
    "summary": "Mubashir needs your help to find the Simple Numbers in a given range.\n\nA number X, that has an N amount of digits (which we'll enumerate as d1, d2, ..., dN), is Simple if the following equation holds true:\n\nX = d1^1 + d2^2 + ... + dN^N\n\nExamples of Simple Numbers:\n89 = 8^1 + 9^2\n\n135 = 1^1 + 3^2 + 5^3\n\nCreate a function which returns a list of all the Simple N",
    "tags": [
      "math",
      "numbers",
      "interview",
      "logic"
    ],
    "title": "Simple Numbers"
  },
  {
    "_id": "aSZ28TjivazB3aErL",
    "difficulty": 1.4031413612565444,
    "language": "python3",
    "summary": "Check if the given string consists of only letters and spaces and if every letter is in lower case.\n\nExamples\nletters_only(\"PYTHON\") ➞ False\n\nletters_only(\"python\") ➞ True\n\nletters_only(\"12321313\") ➞ False\n\nletters_only(\"i have spaces\") ➞ True\n\nletters_only(\"i have numbers(1-10)\") ➞ False\n\nletters_only(\"\") ➞ False\n\nNotes\nEmpty arguments will always return Fals",
    "tags": [
      "logic",
      "regex",
      "strings",
      "conditions",
      "validation"
    ],
    "title": "Letters Only"
  },
  {
    "_id": "eoSXSf4C3gTbNJJEr",
    "difficulty": 1.4033898305084747,
    "language": "python3",
    "summary": "In music, cadences act as punctuation in musical phrases, and help to mark the end of phrases. Cadences are the two chords at the end of a phrase. The different cadences are as follows:\n\nV followed by I is a Perfect Cadence\nIV followed by I is a Plagal Cadence\nV followed by Any chord other than I is an Interrupted Cadence\nAny chord followed by V is an Imperfec",
    "tags": [
      "arrays",
      "strings",
      "algorithms",
      "loops"
    ],
    "title": "Musical Cadences"
  },
  {
    "_id": "HnrmZxpGRoPkmZsfs",
    "difficulty": 1.4042553191489362,
    "language": "python3",
    "summary": "Given the parameters day, month and year, return whether that date is a valid date.\n\nExamples\nisvaliddate(35, 2, 2020) ➞ False\nFebruary doesn't have 35 days.\n\nisvaliddate(8, 3, 2020) ➞ True\n8th March 2020 is a real date.\n\nisvaliddate(31, 6, 1980) ➞ False\nJune only has 30 days.\n\nNotes\nTry using the datetime module to complete this challenge (see the Resources t",
    "tags": [
      "dates",
      "validation"
    ],
    "title": "Impossible Date"
  },
  {
    "_id": "nrrrYN8ZwhYjhvtS4",
    "difficulty": 1.404494382022472,
    "language": "python3",
    "summary": "Create a function that takes a word and extends all vowels by a number num.\n\nExamples\nextend_vowels(\"Hello\", 5) ➞ \"Heeeeeelloooooo\"\n\nextend_vowels(\"Edabit\", 3) ➞ \"EEEEdaaaabiiiit\"\n\nextend_vowels(\"Extend\", 0) ➞ \"Extend\"\n\nNotes\nReturn \"invalid\" if num is not an integer.",
    "tags": [
      "strings",
      "regex"
    ],
    "title": "Extend the Vowels"
  },
  {
    "_id": "qKAcMAkWXvXKAxXut",
    "difficulty": 1.4050632911392404,
    "language": "python3",
    "summary": "Lets assume for the purposes of this challenge that for every layer of fabric you wear when it's cold outside (coats, cardigans, etc), the temperature increases by a tenth of the total.\n\nGiven n number of layers and a given temperature, return the temperature inside of all those warm fuzzy layers. Round to the nearest tenth of a degree.\n\ncalcbundledtemp(2, \"10",
    "tags": [
      "math",
      "loops",
      "strings"
    ],
    "title": "Bundle Up!"
  },
  {
    "_id": "nRAxMKDgcBTDeLzPz",
    "difficulty": 1.4056603773584906,
    "language": "python3",
    "summary": "Write a function that takes two lists (lst1 and lst2) and an int n, and returns True if the second list equals the first list shifted by n positions. Otherwise, return False.\n\nExamples\ncircular_shift([1, 2, 3, 4], [3, 4, 1, 2], 2) ➞ True\n\ncircular_shift([1, 1], [1, 1], 6) ➞ True\n\ncircular_shift([0, 1, 2, 3, 4, 5], [3, 4, 5, 2, 1, 0], 3) ➞ False\n\nNotes\nThe two",
    "tags": [
      "arrays",
      "validation"
    ],
    "title": "Circular Shift"
  },
  {
    "_id": "EWgdCtSDmRqJPrzoz",
    "difficulty": 1.4057971014492754,
    "language": "python3",
    "summary": "Given a list of lists, return a new list of lists containing every element, except for the outer elements.\n\nExamples\npeellayeroff([\n  [\"a\", \"b\", \"c\", \"d\"],\n  [\"e\", \"f\", \"g\", \"h\"],\n  [\"i\", \"j\", \"k\", \"l\"],\n  [\"m\", \"n\", \"o\", \"p\"]\n]) ➞ [\n  [\"f\", \"g\"],\n  [\"j\", \"k\"]\n]\n\npeellayeroff([\n  [1, 2, 3, 4, 5],\n  [6, 7, 8, 9, 10],\n  [11, 12, 13, 14, 15],\n  [16, 17, 18, 19, 2",
    "tags": [
      "arrays",
      "loops",
      "language_fundamentals"
    ],
    "title": "Peeling off the Outer Layers"
  },
  {
    "_id": "vSpfEnRHo3hi6ZTRk",
    "difficulty": 1.40625,
    "language": "python3",
    "summary": "What's the probability of someone making a certain amount of free throws in a row given their free throw success percentage? If Sally makes 50% of her free shot throws.  Then Sally's probability of making 5 in a row would be 3%.\n\nExamples\nfree_throws(75%, 5) ➞ 24%\n\nfree_throws(25%, 3) ➞ 2%\n\nfree_throws(90%, 30) ➞ 4%\n\nNotes\nThe success rate is a string.\nThe fun",
    "tags": [
      "math"
    ],
    "title": "Free Throw Probability"
  },
  {
    "_id": "FJ8SmixDM6z3epzGy",
    "difficulty": 1.4067114093959732,
    "language": "python3",
    "summary": "Create a function that tests whether or not an integer is a perfect number. A perfect number is a number that can be written as the sum of its factors, excluding the number itself.\n\nFor example, 6 is a perfect number, since 1 + 2 + 3 = 6, where 1, 2, and 3 are all factors of 6. Similarly, 28 is a perfect number, since 1 + 2 + 4 + 7 + 14 = 28.\n\nExamples\ncheck_p",
    "tags": [
      "numbers",
      "math",
      "validation"
    ],
    "title": "Perfect Number"
  },
  {
    "_id": "KqR5XyJSJcJFnD5uF",
    "difficulty": 1.4067357512953367,
    "language": "python3",
    "summary": "The median of a group of numbers is the middle number when the group is sorted. If the size of the group is even, the median is the average of the middle two numbers. Given a sorted list of numbers, return the median (rounded to one decimal place if the median isn't an integer).\n\nExamples\nmedian([1, 2, 4, 5, 6, 8, 8, 8, 10]) ➞ 6\n\nmedian([2, 2, 6, 8, 8, 10, 10]",
    "tags": [
      "arrays",
      "math",
      "numbers"
    ],
    "title": "Basic Statistics: Median"
  },
  {
    "_id": "WPojigJER35bJT6YH",
    "difficulty": 1.4078212290502794,
    "language": "python3",
    "summary": "Write a function that takes an integer n, reverses the binary representation of that integer, and returns the new integer from the reversed binary.\n\nExamples\nreversedbinaryinteger(10) ➞ 5\n10 = 1010 -> 0101 = 5\n\nreversedbinaryinteger(12) ➞ 3\n12 = 1100 -> 0011 = 3\n\nreversedbinaryinteger(25) ➞ 19\n25 = 11001 -> 10011 = 19\n\nreversedbinaryinteger(45) ➞ 45\n45 = 10110",
    "tags": [
      "bit_operations",
      "language_fundamentals"
    ],
    "title": "Reversing a Binary String"
  },
  {
    "_id": "7ZFrHepr336TBMsF5",
    "difficulty": 1.4088050314465408,
    "language": "python3",
    "summary": "Create a function that takes an old price old, a new price new, and returns what percent the price decreased or increased. Round the percentage to the nearest whole percent.\n\nExamples\npercentage_changed(\"$800\", \"$600\") ➞ \"25% decrease\"\n\npercentage_changed(\"$1000\", \"$840\") ➞ \"16% decrease\"\n\npercentage_changed(\"$100\", \"$950\") ➞ \"850% increase\"\n\nNotes\nN/A",
    "tags": [
      "math"
    ],
    "title": "Percentage Changed"
  },
  {
    "_id": "Aw2QK8vHY7Xk8Keto",
    "difficulty": 1.4090909090909092,
    "language": "python3",
    "summary": "Write a function that finds the longest word in a sentence. If two or more words are found, return the first longest word. Characters such as apostophe, comma, period (and the like) count as part of the word (e.g. O'Connor is 8 characters long).\n\nExamples\nlongest_word(\"Margaret's toy is a pretty doll.\") ➞ \"Margaret's\"\n\nlongest_word(\"A thing of beauty is a joy",
    "tags": [
      "arrays",
      "language_fundamentals",
      "strings"
    ],
    "title": "Longest Word"
  },
  {
    "_id": "hgjdb2nm4ZwuCjtHE",
    "difficulty": 1.4092219020172911,
    "language": "python3",
    "summary": "Create a function that takes an input (e.g. \"5 + 4\") and returns True if it's a mathematical expression or False if not.\n\nExamples\nmath_expr(\"4 + 5\") ➞ True\n\nmath_expr(\"4*6\") ➞ True\n\nmath_expr(\"4*no\") ➞ False\n\nNotes\nShould only work with the following operations: +, -, *, /, %\nYou don't need to test for floats.\nint1 and int2 will only be from 0-9.",
    "tags": [
      "regex",
      "validation",
      "strings"
    ],
    "title": "Check if a String is a Mathematical Expression"
  },
  {
    "_id": "qkBR9guzewqTztLPM",
    "difficulty": 1.4098360655737705,
    "language": "python3",
    "summary": "Create a function that takes two strings, a and b. Return the number of times the two strings contain the same two letters at the same index. The two letters must appear at consecutive indices.\n\nFor example, if a = \"bboiizz\" and b = \"bbuiiz\", your function should return 3, since the \"bb\", \"ii\", and \"iz\" appear at the same place in both strings.\n\nExamples\nstrma",
    "tags": [
      "strings",
      "arrays",
      "language_fundamentals"
    ],
    "title": "String Match by Two Letters"
  },
  {
    "_id": "Qqd2symFeFe4y5YGG",
    "difficulty": 1.410344827586207,
    "language": "python3",
    "summary": "The 2nd of February 2020 is a palindromic date in both dd/mm/yyyy and mm/dd/yyyy format (02/02/2020). Given a date in dd/mm/yyyy format, return True if the date is palindromic in both date formats, otherwise return False.\n\nExamples\npalindromic_date(\"02/02/2020\") ➞ True\n\npalindromic_date(\"11/12/2019\") ➞ False\n\npalindromic_date(\"11/02/2011\") ➞ False\nAlthough 11/",
    "tags": [
      "dates",
      "strings",
      "validation"
    ],
    "title": "Palindromic Dates"
  },
  {
    "_id": "rnvBtoNMBtznXLhs8",
    "difficulty": 1.4111842105263157,
    "language": "python3",
    "summary": "You have a pack of 5 randomly numbered cards, which can range from 0-9. You can win if you can produce a higher two-digit number from your cards, than your opponent. Return True if your cards win that round.\n\nWorked Example\nwin_round([2, 5, 2, 6, 9], [3, 7, 3, 1, 2]) ➞ True\nYour cards can make the number 96\nYour opponent can make the number 73\nYou win the roun",
    "tags": [
      "arrays",
      "numbers",
      "games",
      "validation"
    ],
    "title": "Numbered Cards"
  },
  {
    "_id": "3Eia4oLLCcyyLN2L7",
    "difficulty": 1.4113475177304964,
    "language": "python3",
    "summary": "Create a function that replaces all consecutively repeated letters in a word with single letters.\n\nExamples\nremove_repeats(\"aaabbbccc\") ➞ \"abc\"\n\nremove_repeats(\"bookkeeper\") ➞ \"bokeper\"\n\nremove_repeats(\"nananana\") ➞ \"nananana\"\n\nNotes\nN/A",
    "tags": [
      "strings",
      "loops"
    ],
    "title": "Remove Repeated Letters"
  },
  {
    "_id": "Abo5qakEcntamMZ8p",
    "difficulty": 1.4115044247787611,
    "language": "python3",
    "summary": "Given a string indicating a range of letters, return a string which includes all the letters in that range, including the last letter. Note that if the range is given in capital letters, return the string in capitals also!\n\nExamples\ngimmetheletters(\"a-z\") ➞ \"abcdefghijklmnopqrstuvwxyz\"\n\ngimmetheletters(\"h-o\") ➞ \"hijklmno\"\n\ngimmetheletters(\"Q-Z\") ➞ \"QRSTUVWXYZ\"",
    "tags": [
      "strings",
      "language_fundamentals"
    ],
    "title": "From A to Z"
  },
  {
    "_id": "6CGomPbu3dK536PH2",
    "difficulty": 1.411764705882353,
    "language": "python3",
    "summary": "Create a function that takes in a list and returns a list of the accumulating sum.\n\nExamples\naccumulating_list([1, 2, 3, 4]) ➞ [1, 3, 6, 10]\n[1, 3, 6, 10] can be written as  [1, 1 + 2, 1 + 2 + 3, 1 + 2 + 3 + 4]\n\naccumulating_list([1, 5, 7]) ➞ [1, 6, 13]\n\naccumulating_list([1, 0, 1, 0, 1]) ➞ [1, 1, 2, 2, 3]\n\naccumulating_list([]) ➞ []\n\nNotes\nAn empty list input",
    "tags": [
      "arrays",
      "closures",
      "loops"
    ],
    "title": "Accumulating List"
  },
  {
    "_id": "oKjqFFzaybbs8csiE",
    "difficulty": 1.4124783362218372,
    "language": "python3",
    "summary": "Create a function that determines whether elements in an array can be re-arranged to form a consecutive list of numbers where each number appears exactly once.\n\nExamples\ncons([5, 1, 4, 3, 2]) ➞ True\n// Can be re-arranged to form [1, 2, 3, 4, 5]\n\ncons([5, 1, 4, 3, 2, 8]) ➞ False\n\ncons([5, 6, 7, 8, 9, 9]) ➞ False\n// 9 appears twice\n\nNotes\nN/A",
    "tags": [
      "arrays",
      "loops",
      "sorting",
      "validation"
    ],
    "title": "Consecutive Numbers"
  },
  {
    "_id": "Mm8SK7DCvzissCF2s",
    "difficulty": 1.4131736526946108,
    "language": "python3",
    "summary": "Create a function that takes a string and returns True if the sum of the  position of every letter in the alphabet  is even and False if the sum is odd.\n\nExamples\nis_alpha(\"i'am king\")  ➞ True\n9 + 1 + 13 + 11 + 9 + 14 + 7 = 64 (even)\n\nis_alpha(\"True\") ➞ True\n20 + 18 + 21 + 5= 64 (even)\n\nis_alpha(\"alexa\") ➞ False\n1 + 12 + 5 + 24 + 1= 43 (odd)\n\nNotes\nCase insens",
    "tags": [
      "strings",
      "sorting",
      "validation"
    ],
    "title": "Is the Sum of Letters Even or Odd?"
  },
  {
    "_id": "ke4FSMdG2XYxbGQny",
    "difficulty": 1.4133456904541242,
    "language": "python3",
    "summary": "Create a function that performs an even-odd transform to a list, n times. Each even-odd transformation:\n\nAdds two (+2) to each odd integer.\nSubtracts two (-2) from each even integer.\n\nExamples\nevenoddtransform([3, 4, 9], 3) ➞ [9, -2, 15]\nSince [3, 4, 9] => [5, 2, 11] => [7, 0, 13] => [9, -2, 15]\n\nevenoddtransform([0, 0, 0], 10) ➞ [-20, -20, -20]\n\nevenoddtransf",
    "tags": [
      "arrays",
      "control_flow",
      "loops"
    ],
    "title": "Odd Up, Even Down — N Times"
  },
  {
    "_id": "c4WKPr4upiKx8GwJK",
    "difficulty": 1.414012738853503,
    "language": "python3",
    "summary": "Given a list nums where each integer is between 1 and 100, return another list containing only duplicate numbers from the given nums list.\n\nExamples\nduplicate_nums([1, 2, 3, 4, 3, 5, 6]) ➞ [3]\n\nduplicate_nums([81, 72, 43, 72, 81, 99, 99, 100, 12, 54]) ➞ [72, 81, 99]\n\nduplicate_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ None\n\nNotes\nThe given list won't contain the",
    "tags": [
      "algorithms",
      "arrays",
      "loops"
    ],
    "title": "Return Duplicate Numbers"
  },
  {
    "_id": "xzfmTCRFAvDeSetCJ",
    "difficulty": 1.4146341463414633,
    "language": "python3",
    "summary": "For each challenge of this series you do not need to submit a function. Instead, you need to submit a template string that can formatted in order to get a certain outcome.\n\nWrite three dictionaries and a template string according to the following example. Notice the article \"a\" in the third example:\n\nExample\ndic1 = {\"yourkeys\": \"yourvalues\"}\ndic2 = {\"yourkeys\"",
    "tags": [
      "strings",
      "language_fundamentals",
      "formatting"
    ],
    "title": "Format X: Unpacking Dictionaries"
  },
  {
    "_id": "BokhFunYBvsvHEjfx",
    "difficulty": 1.4149377593360997,
    "language": "python3",
    "summary": "Create a function that takes a list of numbers and return \"Boom!\" if the digit 7 appears in the list. Otherwise, return \"there is no 7 in the list\".\n\nExamples\nseven_boom([1, 2, 3, 4, 5, 6, 7]) ➞ \"Boom!\"\n7 contains the number seven.\n\nseven_boom([8, 6, 33, 100]) ➞ \"there is no 7 in the array\"\nNone of the items contain 7 within them.\n\nseven_boom([2, 55, 60, 97, 8",
    "tags": [
      "arrays",
      "loops",
      "numbers",
      "regex"
    ],
    "title": "Seven Boom!"
  },
  {
    "_id": "vAwDW47yngWh8iMwN",
    "difficulty": 1.4152046783625731,
    "language": "python3",
    "summary": "Create a function that capitalizes the last letter of every word.\n\nExamples\ncap_last(\"hello\") ➞ \"hellO\"\n\ncap_last(\"My Name Is Edabit\") ➞ \"MY NamE IS EdabiT\"\n\ncap_last(\"HELp THe LASt LETTERs CAPITALISe\") ➞ \"HELP THE LAST LETTERS CAPITALISE\"\n\nNotes\nThere won't be any cases of punctuation in the tests.",
    "tags": [
      "strings",
      "formatting",
      "language_fundamentals"
    ],
    "title": "Capitalize the Last Letter"
  },
  {
    "_id": "8xLnFm4HW4bzJrqjc",
    "difficulty": 1.4157509157509158,
    "language": "python3",
    "summary": "The digit distance between two numbers is the total value of the difference between each pair of digits.\n\nTo illustrate:\ndigit_distance(234, 489) ➞ 12\nSince |2 - 4| + |3 - 8| + |4 - 9| = 2 + 5 + 5\n\nCreate a function that returns the digit distance between two integers.\n\nExamples\ndigit_distance(121, 599) ➞ 19\n\ndigit_distance(12, 12) ➞ 0\n\ndigit_distance(10, 20)",
    "tags": [
      "numbers",
      "arrays"
    ],
    "title": "Digit Distance"
  },
  {
    "_id": "XfSvKco6KZFRfgQyj",
    "difficulty": 1.4166666666666667,
    "language": "python3",
    "summary": "A train has a maximum capacity of n passengers overall, which means each carriage's capacity will share an equal proportion of the maximum capacity.\n\nCreate a function which returns the index of the first carriage which holds 50% or less of its maximum capacity. If no such carriage exists, return -1.\n\nWorked Example\nfindaseat(200, [35, 23, 18, 10, 40]) ➞ 2\n\nTh",
    "tags": [
      "loops",
      "numbers",
      "interview"
    ],
    "title": "Crowded Carriage Capacity"
  },
  {
    "_id": "55MKEWCYzhxSTdnEr",
    "difficulty": 1.4170984455958548,
    "language": "python3",
    "summary": "Create a function that takes two numbers as arguments and returns the Greatest Common Divisor (GCD) of the two numbers.\n\nExamples\ngcd(3, 5) ➞ 1\n\ngcd(14, 28) ➞ 14\n\ngcd(4, 18) ➞ 2\n\nNotes\nThe GCD is the highest number that can divide both arguments without a remainder.",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "GCD and LCM ( Part 1)"
  },
  {
    "_id": "cH3WN6TsqEC3qDg8f",
    "difficulty": 1.4190871369294606,
    "language": "python3",
    "summary": "Create a function that takes three numbers — the width and height of a rectangle, and the radius of a circle and returns True if the rectangle can fit inside the circle, False if it can't.\n\nExamples\nrectangleincircle(8, 6, 5) ➞ True\n\nrectangleincircle(5, 9, 5) ➞ False\n\nrectangleincircle(4, 7, 4) ➞ False\n\nNotes\nN/A",
    "tags": [
      "math",
      "validation",
      "geometry"
    ],
    "title": "Rectangle in Circle"
  },
  {
    "_id": "8qD23E6XRMaWhyJ5z",
    "difficulty": 1.4201183431952662,
    "language": "python3",
    "summary": "You will be given a string of characters containing only the three characters: ( ) :\n\nCreate a function that returns a number based on the number of sad and smiley faces there are.\nThe happy faces :) and (: are worth 1.\nThe sad faces :( and ): are worth -1.\n\nWorked Example\nhappiness_number(\":):(\") ➞ -1\nThe first 2 characters are :)        +1      Total: 1\n2nd",
    "tags": [
      "strings",
      "language_fundamentals"
    ],
    "title": "Smiley Faces :)"
  },
  {
    "_id": "vKPepKYAvx2Rao3zt",
    "difficulty": 1.4219653179190752,
    "language": "python3",
    "summary": "A built-in timer inside your car can count the length of your ride in minutes and you have started your ride at 00:00.\n\nGiven the number of minutes n at the end of the ride, calculate the current time. Return the sum of digits that the digital timer in the format hh:mm will show at the end of the ride.\n\nExamples\ncar_timer(240) ➞ 4\n240 minutes have passed since",
    "tags": [
      "numbers",
      "conditions",
      "algorithms"
    ],
    "title": "Car Timer 🏎️"
  },
  {
    "_id": "zW9JME7XNew4tgCCE",
    "difficulty": 1.4221105527638191,
    "language": "python3",
    "summary": "Write a function that, given the startofrange and endofrange values, returns an array containing all the numbers inclusive to that range. See examples below.\n\nExamples\nreversibleinclusivelist(1, 5) ➞ [1, 2, 3, 4, 5]\n\nreversibleinclusivelist(2, 8) ➞ [2, 3, 4, 5, 6, 7, 8]\n\nreversibleinclusivelist(10, 20) ➞ [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n\nreversible",
    "tags": [
      "math",
      "numbers",
      "scope",
      "loops"
    ],
    "title": "Reversible Inclusive List Ranges"
  },
  {
    "_id": "bGRYmEZvzWFK2sbek",
    "difficulty": 1.423728813559322,
    "language": "python3",
    "summary": "Given a string containing unique letters, return a sorted string with the letters that don't appear in the string.\n\nExamples\ngetmissingletters(\"abcdefgpqrstuvwxyz\") ➞ \"hijklmno\"\n\ngetmissingletters(\"zyxwvutsrq\") ➞ \"abcdefghijklmnop\"\n\ngetmissingletters(\"abc\") ➞ \"defghijklmnopqrstuvwxyz\"\n\ngetmissingletters(\"abcdefghijklmnopqrstuvwxyz\") ➞ \"\"\n\nNotes\nThe combination",
    "tags": [
      "strings",
      "loops"
    ],
    "title": "Missing Letters"
  },
  {
    "_id": "wuQWimjDwkpnd4xJL",
    "difficulty": 1.4242424242424243,
    "language": "python3",
    "summary": "Given a list of even length, copy the half with the higher sum of numbers to the other half of the list. If the sum of the first half equals the sum of the second half, return the original list.\n\nExamples\nbalanced([1, 2, 4, 6, 3, 1]) ➞ [6, 3, 1, 6, 3, 1]\n1 + 2 + 4  9 + 0 + 13 + 10  sol = [88, 3 ,27 ,5 ,88 ,3 ,27 ,5]\n\nbalanced([7, 5, 2, 6, 1, 0, 1, 5, 2, 7, 0,",
    "tags": [
      "arrays",
      "conditions",
      "math"
    ],
    "title": "Balanced List"
  },
  {
    "_id": "j9MQxad5iZ5tZ8gsk",
    "difficulty": 1.4266666666666667,
    "language": "python3",
    "summary": "Juan, today he learned to graph quadratic equations, so he chooses to speed up the process and avoid having to write a lot of steps in his notebook to find the vertex, just help him locate the vertex.\n\nOk, I am going to give you some advantages, the first is that you will not have to perform so many steps, the equations will have an easy structure to avoid so",
    "tags": [
      "algebra",
      "math",
      "algorithms",
      "arrays",
      "strings"
    ],
    "title": "Just Find the Vertex"
  },
  {
    "_id": "QWAqDyd9RXqyrNyo3",
    "difficulty": 1.4279835390946503,
    "language": "python3",
    "summary": "Create a function which takes a sentence and returns its abbreviation. Get all of the words over or equal to n characters in length and return the first letter of each, capitalised and overall returned as a single string.\n\nExamples\nabbreviate(\"do it yourself\") ➞ \"Y\"\n\nabbreviate(\"do it yourself\", 2) ➞ \"DIY\"\n\"do\" and \"it\" are included because the second paramete",
    "tags": [
      "strings",
      "formatting"
    ],
    "title": "Abbreviating a Sentence"
  },
  {
    "_id": "ffeLkHfoGDbApgNSA",
    "difficulty": 1.4310344827586208,
    "language": "python3",
    "summary": "A Character Set will match any characters within a pair of brackets [ ] . You can specify a range of characters by using a hyphen.\n\n[abcd] == [a-d]\n\nIf the hyphen appears as the first or last character then it is considered a literal hyphen.\n\ntxt = \"non-profit\"\npattern = \"[abc-]\"\n\nre.findall(pattern, txt) ➞ [\"-\"]\n\nYou can also use character classes in a charac",
    "tags": [
      "regex"
    ],
    "title": "RegEx XIV: Character Sets"
  },
  {
    "_id": "R4D59C9CQbJvqWaKd",
    "difficulty": 1.4310344827586208,
    "language": "python3",
    "summary": "A baseball  player's batting average is calculated by the following formula:\n\nBA = (number of hits) / (number of official at-bats)\n\nBatting averages are always expressed rounded to the nearest thousandth with no leading zero. The top 3 MLB batting averages of all-time are:\n\nTy Cobb .366\nRogers Hornsby .358\nShoeless Joe Jackson .356\n\nThe given list represents a",
    "tags": [
      "arrays",
      "formatting",
      "strings",
      "numbers"
    ],
    "title": "Baseball Batting Average"
  },
  {
    "_id": "hC6yGEPvtN2izt3c9",
    "difficulty": 1.4324942791762014,
    "language": "python3",
    "summary": "A Sudoku is a 9x9 grid that is completed when every 3x3 square, row and column consist of the numbers 1-9.\n\nFor this task, you will be given a completed 3x3 square, in the form of a two-dimensional list. Create a function that checks to make sure this 3x3 square contains each  number from 1-9 exactly once. Make sure there are no duplicates, and no numbers outs",
    "tags": [
      "arrays",
      "games",
      "validation"
    ],
    "title": "Mini Sudoku"
  },
  {
    "_id": "nrjJcg6XMcoCvKH8y",
    "difficulty": 1.4325699745547074,
    "language": "python3",
    "summary": "Write a function that returns True if all subsets in a list belong to a given set.\n\nExamples\nvalidate_subsets([[1, 2], [2, 3], [1, 3]], [1, 2, 3]) ➞ True\n\nvalidate_subsets([[1, 2, 3], [2], [3], []], [1, 2, 3]) ➞ True\n\nvalidate_subsets([[1, 2], [2, 3], [1, 4]], [1, 2, 3]) ➞ False\n\nvalidate_subsets([[1, 2, 3, 4]], [1, 2, 3]) ➞ False\n\nNotes\nThe empty set and the",
    "tags": [
      "validation",
      "higher_order_functions"
    ],
    "title": "Subset Validation"
  },
  {
    "_id": "kPDSPe9cHwbE2jANs",
    "difficulty": 1.4328358208955223,
    "language": "python3",
    "summary": "The image below shows a sequence of larger and larger houses of cards, with the total number of cards included for each:\n\nHouse of Cards\n\nGiven the tower height n, return the number of cards needed to construct a full house of cards.\n\nExamples\ncards_needed(3) ➞ 15\n\ncards_needed(4) ➞ 26\n\ncards_needed(0) ➞ 0\n\nNotes\nThe height will always be equal or greater than",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "House of Cards"
  },
  {
    "_id": "5NJnNKCvC3ApnHxCC",
    "difficulty": 1.4329896907216495,
    "language": "python3",
    "summary": "Mubashir has written a mysterious function that takes two numbers a and b and returns multiplication?. Solve the riddle of what Mubashir's function is by having a look at some of the examples below.\n\nExamples\nmubashir_function(0, 1) ➞ 0\n\nmubashir_function(1, 2) ➞ 2\n\nmubashir_function(10, 10) ➞ 1\n\nNotes\nCheck the Tests tab for more examples.\nThis isn't really a",
    "tags": [
      "logic",
      "math",
      "numbers",
      "interview"
    ],
    "title": "Mubashir's Mystery Challenge"
  },
  {
    "_id": "wsCshmu5zkN5BfeAC",
    "difficulty": 1.4330708661417322,
    "language": "python3",
    "summary": "Create a function that takes a number n and checks if each digit is divisible by the digit on its left. Return a boolean array depending on the condition checks.\n\nExamples\ndivisiblebyleft(73312) ➞ [False, False, True, False, True]\nno element left to 7 = False\n3/7 = False\n3/3 = True\n1/3 = False\n2/1 = True\n\ndivisiblebyleft(1) ➞ [False]\n\ndivisiblebyleft(635) ➞ [F",
    "tags": [
      "logic",
      "numbers",
      "math",
      "validation"
    ],
    "title": "Divisible by Left Digit?"
  },
  {
    "_id": "ET2voBkuSPLb3mFSD",
    "difficulty": 1.4342857142857144,
    "language": "python3",
    "summary": "Given a list of numbers and a positive value for n, return the sum of every nth number in the list.\n\nExamples\nsumeverynth([4, 8, 6, 6, 7, 9, 3], 1) ➞ 43\n4+8+6+6+7+9+3 = 43\n\nsumeverynth([7, 3, 10, 4, 5, 8, 4, 9, 6, 9, 10, 1, 4], 4) ➞ 14\n4+9+1 = 14\n\nsumeverynth([10, 6, 5, 4, 5, 2, 3, 3, 8, 10, 7, 2], 8) ➞ 3\n3\n\nsumeverynth([6, 8, 9, 4, 6, 4, 7, 1, 5, 6, 10, 2], 1",
    "tags": [
      "arrays",
      "math",
      "numbers"
    ],
    "title": "Sum of Every Nth Number"
  },
  {
    "_id": "mPpcATtDMYiegZ3Jw",
    "difficulty": 1.4345114345114345,
    "language": "python3",
    "summary": "Given three numbers, x, y and z, determine whether they are the edges of a right angled triangle.\n\nExamples\nright_triangle(3, 4, 5) ➞ True\nThis is the classic example of a \"nice\" right angled triangle.\n\nright_triangle(145, 105, 100) ➞ True\nThis is a less famous example.\n\nright_triangle(70, 130, 110) ➞ False\nThis isn't a right angled triangle.\nNotes\nNotice the",
    "tags": [
      "math",
      "algebra",
      "validation"
    ],
    "title": "Is This a Right Angled Triangle?"
  },
  {
    "_id": "u9rnDxsJRDdvRmFai",
    "difficulty": 1.4345794392523366,
    "language": "python3",
    "summary": "Write the regular expression that will match all open compound words (separated by a space) starting with the word best and with a second word that begins with a b. Use the character class \\s in your expression.\n\nExample\ntxt = \"best buy best car best friend best-boy bestguest best dressed best bet best man best deal best boyfriend\"\npattern = \"yourregularexpres",
    "tags": [
      "regex",
      "formatting"
    ],
    "title": "RegEx XI-A: Whitespace Character Class"
  },
  {
    "_id": "TAhuay457cw5AekBe",
    "difficulty": 1.434782608695652,
    "language": "python3",
    "summary": "Mubashir can talk with monkeys. You can also learn their simple language.\n\nCreate a function that takes a string txt and returns the string in monkeys language. You have to figure out their language from test cases.\n\nExamples\nmonkey_talk(\"Mubashir Hassan\") ➞ \"Ook ook.\"\n\nmonkey_talk(\"Hello\") ➞ \"Ook.\"\n\nmonkey_talk(\"Matt\") ➞ \"Ook.\"\n\nmonkey_talk(\"Everyone\") ➞ \"Eek",
    "tags": [
      "strings",
      "logic",
      "interview",
      "language_fundamentals"
    ],
    "title": "Let's Talk Like a Monkey 🐵"
  },
  {
    "_id": "HLdBD3XrBcapupuE6",
    "difficulty": 1.438095238095238,
    "language": "python3",
    "summary": "Given a number, n, return a function which adds n to the number passed to it.\n\nExamples\nadd(10)(20) ➞ 30\n\nadd(0)(20) ➞ 20\n\nadd(-30)(80) ➞ 50\n\nNotes\nAll numbers used in the tests will be integers (whole numbers).\nReturning a function from a function is a key part of understanding higher order functions (functions which operate on and return functions).",
    "tags": [
      "higher_order_functions",
      "language_fundamentals",
      "numbers",
      "closures"
    ],
    "title": "Returning an \"Add\" Function"
  },
  {
    "_id": "ZwsHZLRqx3TLFk3CR",
    "difficulty": 1.4389312977099236,
    "language": "python3",
    "summary": "Create a function that takes a list of factorial expressions and returns the sum.\n\nExamples\neval_factorial([\"2!\", \"3!\"]) ➞ 8\n\neval_factorial([\"5!\", \"4!\", \"2!\"]) ➞ 146\n\neval_factorial([\"0!\", \"1!\"]) ➞ 2\n\nNotes\n0! and 1! both equal 1.",
    "tags": [
      "strings",
      "formatting",
      "numbers",
      "math"
    ],
    "title": "Evaluating Factorials"
  },
  {
    "_id": "fmQ9QvPBWL7N9hSkq",
    "difficulty": 1.4401709401709402,
    "language": "python3",
    "summary": "Write a function that takes a string, and returns a new string with any duplicate consecutive letters removed.\n\nExamples\nunstretch(\"ppoeemm\") ➞ \"poem\"\n\nunstretch(\"wiiiinnnnd\") ➞ \"wind\"\n\nunstretch(\"ttiiitllleeee\") ➞ \"title\"\n\nunstretch(\"cccccaaarrrbbonnnnn\") ➞ \"carbon\"\n\nNotes\nFinal strings won't include words with double letters (e.g. \"passing\", \"lottery\").",
    "tags": [
      "strings",
      "formatting",
      "loops"
    ],
    "title": "Stretched Words"
  },
  {
    "_id": "G5qw2KiTkHrAudsST",
    "difficulty": 1.4411764705882353,
    "language": "python3",
    "summary": "Mubashir needs your help in a simple task.\n\nCreate a function which takes a number n and return its decimal part.\n\nExamples\ndecimal_part(1.2) ➞ 0.2\n\ndecimal_part(-3.73) ➞ 0.73\n\ndecimal_part(10) ➞ 0\n\nNotes\nDon't forget to return the result.\nIf you get stuck on a challenge, find help in the Resources tab.\nIf you're really stuck, unlock solutions in the Solutions",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "A Simple Task"
  },
  {
    "_id": "pdMwiMpYkJkn8WY83",
    "difficulty": 1.44206008583691,
    "language": "python3",
    "summary": "Write a function that recursively determines if a string is a palindrome.\n\nExamples\nis_palindrome(\"abcba\") ➞ True\n\nis_palindrome(\"b\") ➞ True\n\nis_palindrome(\"\") ➞ True\n\nis_palindrome(\"ad\") ➞ False\n\nNotes\nAn empty string counts as a palindrome.",
    "tags": [
      "recursion",
      "strings",
      "validation"
    ],
    "title": "Recursion: String Palindromes"
  },
  {
    "_id": "u69RtTqe6jJTEyu8r",
    "difficulty": 1.4444444444444444,
    "language": "python3",
    "summary": "Create a function that takes the values Dd (Dielectric Outer Diameter), Dc (Inner Conductor Diameter) and er (Dielectric Constant) and calculates the Coaxial Cable Impedance.\n\nExamples\nimpedance_calculator(20.7, 2, 4) ➞ 70.0\n\nimpedance_calculator(5.3, 1.2, 2.2) ➞ 60.0\n\nimpedance_calculator(4.48, 1.33, 2.2) ➞ 50.0\n\nNotes\nIf you get stuck on a challenge, find he",
    "tags": [
      "math",
      "physics"
    ],
    "title": "Coaxial Cable Impedance"
  },
  {
    "_id": "HvsBiHLGcsv2ex3gv",
    "difficulty": 1.4452380952380952,
    "language": "python3",
    "summary": "Create a function that takes a string of four numbers. These numbers represent two separate points on a graph known as the x-axis (horizontal axis) and y-axis (vertical axis).\n\nThe order of coordinates in the string corresponds as follows:\n\n\"x1,y1,x2,y2\"\n\nCalculate the distance between x and y.\n\nExamples\nshortestDistance(\"1,1,2,1\") ➞ 1\n\nshortestDistance(\"1,1,3",
    "tags": [
      "math",
      "numbers",
      "strings"
    ],
    "title": "Calculate the Shortest Distance Between Two Points"
  },
  {
    "_id": "XYvyirQMkmPHGLaZi",
    "difficulty": 1.4455696202531645,
    "language": "python3",
    "summary": "Given an number, return a string of the word \"Boom\", which varies in the following ways:\n\nThe string should include n number of \"o\"s, unless n is below 2 (in that case, return \"boom\").\nIf n is evenly divisible by 2, add an exclamation mark to the end.\nIf n is evenly divisible by 5, return the string in ALL CAPS.\n\nThe example below should help clarify these ins",
    "tags": [
      "strings",
      "formatting",
      "algorithms"
    ],
    "title": "Explosion Intensity"
  },
  {
    "_id": "XgJ3L3GF7o2dEaPAW",
    "difficulty": 1.4464882943143813,
    "language": "python3",
    "summary": "Given two strings, return a string containing only the letters shared between the two.\n\nExamples\nshared_letters(\"house\", \"home\") ➞ \"eho\"\n\nshared_letters(\"Micky\", \"mouse\") ➞ \"m\"\n\nshared_letters(\"house\", \"villa\") ➞ \"\"\n\nNotes\nIf none of the letters are shared, return an empty string.\nThe function should be case insensitive (e.g. comparing A and a should return a)",
    "tags": [
      "strings",
      "conditions",
      "algorithms"
    ],
    "title": "Find the Shared Letters between Two Strings"
  },
  {
    "_id": "egWRSXEE8dbKujvHw",
    "difficulty": 1.4464944649446494,
    "language": "python3",
    "summary": "Create a function that returns True if the given circles are intersecting, otherwise return False. The circles are given as two lists containing the values in the following order:\n\nRadius of the circle.\nCenter position on the x-axis.\nCenter position on the y-axis.\n\nExamples\niscirclecollision([10, 0, 0], [10, 10, 10]) ➞ True\n\niscirclecollision([1, 0, 0], [1, 10",
    "tags": [
      "games",
      "algebra",
      "algorithms",
      "math"
    ],
    "title": "Simple Circle Collision Detection"
  },
  {
    "_id": "qM6zWQM7gdfPgE9Hh",
    "difficulty": 1.446685878962536,
    "language": "python3",
    "summary": "Given a dictionary of some items with star ratings and a specified star rating, return a new dictionary of items which match the specified star rating. Return \"No results found\" if no item matches the star rating given.\n\nExamples\nfilterbyrating({\n  \"Luxury Chocolates\" : \"*\",\n  \"Tasty Chocolates\" : \"**\",\n  \"Aunty May Chocolates\" : \"*\",\n  \"Generic Chocolates\" :",
    "tags": [
      "arrays",
      "data_structures",
      "objects"
    ],
    "title": "Filtering by Star Rating"
  },
  {
    "_id": "en35WbjkDF9ej59FW",
    "difficulty": 1.446927374301676,
    "language": "python3",
    "summary": "Given a list of numbers, of any length, create a function which counts how many of those numbers pass the following criterea:\nThe first and last digits of a number must add to 10.\n\nExamples\nendsaddto_10([19, 46, 2098]) ➞ 3\n\nendsaddto_10([33, 44, -55]) ➞ 1\n\nendsaddto_10([]) ➞ 0\n\nNotes\nAll items in the list will be numbers.\nIgnore negative signs (see example #2)",
    "tags": [
      "loops",
      "arrays",
      "numbers"
    ],
    "title": "Adding Both Ends Together"
  },
  {
    "_id": "y4bdq5HcynRkkZvKK",
    "difficulty": 1.4471544715447155,
    "language": "python3",
    "summary": "Write a function that takes in a string s and returns a function that returns s.\n\nExamples\nf1 = redundant(\"apple\")\nf1() ➞ \"apple\"\n\nf2 = redundant(\"pear\")\nf2() ➞ \"pear\"\n\nf3 = redundant(\"\")\nf3() ➞ \"\"\n\nNotes\nYour function should return a function, not a string.",
    "tags": [
      "language_fundamentals",
      "functional_programming",
      "closures"
    ],
    "title": "A Redundant Function"
  },
  {
    "_id": "5FoNY2Z7B5wSCDTA4",
    "difficulty": 1.4489795918367347,
    "language": "python3",
    "summary": "Mubashir needs your help to find out next happy year.\n\nA Happy Year is the year with only distinct digits. Create a function that takes an integer year and returns the next happy year.\n\nExamples\nhappy_year(2017) ➞ 2018\n2018 has all distinct digits\n\nhappy_year(1990) ➞ 2013\n\nhappy_year(2021) ➞ 2031\n\nNotes\nN/A",
    "tags": [
      "algorithms",
      "numbers",
      "loops",
      "logic"
    ],
    "title": "Next Happy Year"
  },
  {
    "_id": "KcnQtNoX5uC6PzpEF",
    "difficulty": 1.45,
    "language": "python3",
    "summary": "Create a function that takes a list of numbers lst and a number n. Return True if the sum of any two elements is equal to the given number. Otherwise, return False.\n\nExamples\ncheck_sum([10, 12, 4, 7, 9, 11], 16) ➞ True\n\ncheck_sum([4, 5, 6, 7, 8, 9], 13) ➞ True\n\ncheck_sum([0, 98, 76, 23], 174) ➞ True\n\ncheck_sum([0, 9, 7, 23, 19, 18, 17, 66], 39) ➞ False\n\ncheck_",
    "tags": [
      "arrays",
      "validation",
      "numbers",
      "loops"
    ],
    "title": "Sum of Two Numbers  in List Equal to Given Number"
  },
  {
    "_id": "tK44PSWFuFzthwNJj",
    "difficulty": 1.45,
    "language": "python3",
    "summary": "A night club will give you a word. For entrance, you need to provide the right number according to the provided word.\n\nEvery given word will have a doubled letter, like \"dd\" in addiction. To answer the right number you need to find the doubled letter's position in the alphabets and multiply this number with 4.\n\nCreate a function that takes the argument of word",
    "tags": [
      "numbers",
      "logic",
      "regex"
    ],
    "title": "Club Entry"
  },
  {
    "_id": "Bb9PaM4B87L39SdAo",
    "difficulty": 1.4505208333333333,
    "language": "python3",
    "summary": "Create a function takes in two lists and returns an intersection list and a union list.\n\nIntersection List: Elements shared by both.\nUnion List: Elements that exist in first or second list, or both (not exclusive OR).\n\nWhile the input lists may have duplicate numbers, the returned intersection and union lists should be set-ified - that is, contain no duplicate",
    "tags": [
      "arrays",
      "functional_programming"
    ],
    "title": "Union and Intersection of Lists"
  },
  {
    "_id": "a7WiKcyrTtggTym3f",
    "difficulty": 1.4508928571428572,
    "language": "python3",
    "summary": "Create a function that takes two numbers as arguments and return the LCM of the two numbers.\n\nExamples\nlcm(3, 5) ➞ 15\n\nlcm(14, 28) ➞ 28\n\nlcm(4, 6) ➞ 12\n\nNotes\nDon't forget to return the result.\nYou may want to use the GCD function to make this a little easier.\nLCM stands for least common multiple, the smallest multiple of both integers.",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "GCD and LCM (Part 2)"
  },
  {
    "_id": "fyyJRDHcTe9REs4Ni",
    "difficulty": 1.4516129032258065,
    "language": "python3",
    "summary": "Create a function that takes three arguments (first dictionary, second dictionary, key) in order to:\n\nReturn the boolean True if both dictionaries have the same values for the same keys.\nIf the dictionaries don't match, return the string \"Not the same\", or the string \"One's empty\" if only one of the dictionaries contains the given key.\n\nExamples\ndict_first = {",
    "tags": [
      "logic",
      "strings",
      "algorithms",
      "objects"
    ],
    "title": "Are They the Same?"
  },
  {
    "_id": "8Ko5tPg8Ch5SRCAhA",
    "difficulty": 1.452991452991453,
    "language": "python3",
    "summary": "Create a function that, given a number, returns the corresponding value of that index in the Fibonacci series.\n\nThe Fibonacci Sequence is the series of numbers:\n\n1, 1, 2, 3, 5, 8, 13, 21, 34, ...\n\nThe next number is found by adding the two numbers before it:\n\nThe 2 is found by adding the two numbers before it (1+1).\nThe 3 is found by adding the two numbers bef",
    "tags": [
      "algebra",
      "algorithms",
      "loops",
      "recursion"
    ],
    "title": "The Fibonacci Number"
  },
  {
    "_id": "5fjAbvQwW3akZDior",
    "difficulty": 1.453287197231834,
    "language": "python3",
    "summary": "Create a function that will remove any repeated charcter(s) in a word passed to the function.\n\nExamples\nunrepeated(\"hello\") ➞ \"helo\"\n\nunrepeated(\"aaaaa\") ➞ \"a\"\n\nunrepeated(\"WWE!!!\") ➞ \"WE!\"\n\nunrepeated(\"call 911\") ➞ \"cal 91\"\n\nNotes\nNo more than two words will be passed in the tests.\nInput includes special characters and numbers.",
    "tags": [
      "strings",
      "data_structures"
    ],
    "title": "Remove Repeated Characters"
  },
  {
    "_id": "K6oxe3bvPqaQWxkFw",
    "difficulty": 1.453531598513011,
    "language": "python3",
    "summary": "Create a function which takes in a number n as input and returns all numbers up to and including n joined together in a string. Separate each digit from each other with the character \"-\".\n\nExamples\njoin_digits(4) ➞ \"1-2-3-4\"\n\njoin_digits(11) ➞ \"1-2-3-4-5-6-7-8-9-1-0-1-1\"\n\njoin_digits(15) ➞ \"1-2-3-4-5-6-7-8-9-1-0-1-1-1-2-1-3-1-4-1-5\"\n\nNotes\nRemember to start at",
    "tags": [
      "strings",
      "numbers",
      "loops"
    ],
    "title": "Joining Digits Together"
  },
  {
    "_id": "DjyqoxE3WYPe7qYCy",
    "difficulty": 1.4538461538461538,
    "language": "python3",
    "summary": "Given a string, reverse all the words which have odd length. The even length words are not changed.\n\nExamples\nreverse_odd(\"Bananas\") ➞ \"sananaB\"\n\nreverse_odd(\"One two three four\") ➞ \"enO owt eerht four\"\n\nreverse_odd(\"Make sure uoy only esrever sdrow of ddo length\")\n➞ \"Make sure you only reverse words of odd length\"\n\nNotes\nThere is exactly one space between eac",
    "tags": [
      "strings",
      "loops",
      "formatting"
    ],
    "title": "Reverse the Odd Length Words"
  },
  {
    "_id": "xCXdch4XLpXZZagxm",
    "difficulty": 1.4541484716157205,
    "language": "python3",
    "summary": "Given a range of years as a string, return the number of leap years there are within the range (inclusive).\n\nExamples\nnumofleapyears(\"1980-1984\") ➞ 2\n1980 and 1984 are leapyears.\n\nnumofleapyears(\"2000-2020\") ➞ 6\n\nnumofleapyears(\"1600-2000\") ➞ 98\n\nNotes\nRemember that a hyphen separates the years.\nCheck the Resources tab for help on checking whether a year is a",
    "tags": [
      "numbers",
      "dates",
      "strings"
    ],
    "title": "Number of Leap Years"
  },
  {
    "_id": "frC4AdY2u4tm9aTRz",
    "difficulty": 1.454183266932271,
    "language": "python3",
    "summary": "The central tendency measures (mean, mode and median) sometimes aren't enough descriptives in a data set analysis. For example, given two lists A=[15, 15, 15, 14, 16] and B=[2, 7, 14, 22, 30] the mean is μ=15 in both cases, however the values of second list are clearly more spread out from the average value. The standard deviation (also called sigma_, the gree",
    "tags": [
      "math",
      "arrays",
      "numbers"
    ],
    "title": "Standard Deviation"
  },
  {
    "_id": "nHxBoXmRYq5vnoEnq",
    "difficulty": 1.4564102564102563,
    "language": "python3",
    "summary": "Write a function that recursively returns the number of vowels in a string.\n\nIf it wasn't clear enough already, you should use recursion in your solution.\n\nExamples\nvowels(\"apple\") ➞ 2\n\nvowels(\"cheesecake\") ➞ 5\n\nvowels(\"bbb\") ➞ 0\n\nvowels(\"\") ➞ 0\n\nNotes\nRecursive functions call themselves.\nAll letters will be in lower case.\nFor this challenge, the vowels are a,",
    "tags": [
      "recursion",
      "strings",
      "regex"
    ],
    "title": "Recursion: Count Vowels"
  },
  {
    "_id": "sfqudQHQ3HPpd7dZb",
    "difficulty": 1.4566037735849056,
    "language": "python3",
    "summary": "Create a function which takes two strings (p1 and p2 ⁠— which represent player 1 and ) as arguments and returns a string stating the winner in a game of Rock, Paper, Scissors.\n\nEach argument will contain a single string: \"Rock\", \"Paper\", or \"Scissors\". Return the winner according to the following rules:\n\nRock beats Scissors\nScissors beats Paper\nPaper beats Roc",
    "tags": [
      "games",
      "conditions",
      "data_structures"
    ],
    "title": "Rock, Paper, Scissors"
  },
  {
    "_id": "ziaNsc7J4ySFY6rF6",
    "difficulty": 1.4566037735849056,
    "language": "python3",
    "summary": "A ship has to transport cargo from one place to another, while picking up cargo along the way. Given the total amount of cargo and the types of cargo holds in the ship as lists, create a function that returns True if all the cargo can fit on the ship, and False if it can't.\n\n \"S\" means 50 cargo space.\n \"M\" means 100 cargo space.\n \"L\" means 200 cargo space.\n\nEx",
    "tags": [
      "logic",
      "math",
      "strings"
    ],
    "title": "Does the Cargo Fit? (Part 1)"
  },
  {
    "_id": "od6i73gJxc6xGFzsz",
    "difficulty": 1.4581497797356828,
    "language": "python3",
    "summary": "A number is considered slidey if for every digit in the number, the next digit from that has an absolute difference of one. Check the examples below.\n\nExamples\nis_slidey(123454321) ➞ True\n\nis_slidey(54345) ➞ True\n\nis_slidey(987654321) ➞ True\n\nis_slidey(1123) ➞ False\n\nis_slidey(1357) ➞ False\n\nNotes\nA number cannot slide properly if there is a \"flat surface\" (ex",
    "tags": [
      "numbers",
      "validation"
    ],
    "title": "Slidey Numbers"
  },
  {
    "_id": "ZmjLLhFc4TqaMPSki",
    "difficulty": 1.458984375,
    "language": "python3",
    "summary": "There are three towers. The objective of the game is to move all the disks over to tower #3, but you can't place a larger disk onto a smaller disk. To play the game or learn more about the Tower of Hanoi, check the Resources tab.\n\nTower of Hanoi\n\nCreate a function that takes a number discs as an argument and returns the minimum amount of steps needed to comple",
    "tags": [
      "algorithms",
      "math",
      "numbers",
      "games",
      "interview"
    ],
    "title": "Tower of Hanoi"
  },
  {
    "_id": "mCNwMqca9R3hBY6fY",
    "difficulty": 1.4594594594594594,
    "language": "python3",
    "summary": "It is important to be happy! Therefore, you must create a function that takes a sentence containing sad faces and turn them into happy ones! This involves changing only the mouths.\n\nSad face examples: :(   8(   x(   ;(\nHappy face examples: :)   8)   x)   ;)\n\nMake sure to only change the face if there are eyes before them, round(3.4) wouldn't become round)3.4)",
    "tags": [
      "strings",
      "formatting",
      "regex"
    ],
    "title": "Turn That Frown Upside Down"
  },
  {
    "_id": "e3KZvJbSXeHXtJA7c",
    "difficulty": 1.459807073954984,
    "language": "python3",
    "summary": "Create a function that returns the sum of missing numbers.\n\nExamples\nsummissingnumbers([1, 3, 5, 7, 10]) ➞ 29\n2 + 4 + 6 + 8 + 9\n\nsummissingnumbers([10, 7, 5, 3, 1]) ➞ 29\n\nsummissingnumbers([10, 20, 30, 40, 50, 60]) ➞ 1575\n\nNotes\nThe minimum and maximum value of the given list are the inclusive bounds of the numeric range to consider when searching for missing",
    "tags": [
      "math",
      "numbers",
      "sorting"
    ],
    "title": "Sum of Missing Numbers"
  },
  {
    "_id": "Z8REdTE5P57f4q7dK",
    "difficulty": 1.4601769911504425,
    "language": "python3",
    "summary": "A Collatz sequence is generated like this. Start with a positive number. If it's even, halve it. If it's odd, multiply it by three and add one. Repeat the process with the resulting number. The Collatz Conjecture is that every sequence eventually reaches 1 (continuing past 1 just results in an endless repeat of the sequence 4, 2, 1).\n\nThe length of the sequenc",
    "tags": [
      "control_flow",
      "language_fundamentals"
    ],
    "title": "Collatz Conjecture"
  },
  {
    "_id": "6M4gYkxWTsE6Rxhge",
    "difficulty": 1.460377358490566,
    "language": "python3",
    "summary": "Create a function thats takes a list and returns True if every number is prime. Otherwise, return False.\n\nExamples\nall_prime([7, 5, 2, 4, 6]) ➞ False\n\nall_prime([2, 3, 5, 7, 13, 17, 19, 23, 29]) ➞ True\n\nall_prime([1, 5, 3]) ➞ False\n\nNotes\n1 is not a prime number.",
    "tags": [
      "algebra",
      "validation",
      "math"
    ],
    "title": "All Numbers in List Are Prime"
  },
  {
    "_id": "T2G9LR2qNw4rFNu9t",
    "difficulty": 1.4606741573033708,
    "language": "python3",
    "summary": "Given a list and chunk size \"n\", create a function such that it divides the list into many sublists where each sublist is of length size \"n\".\n\nExamples\nchunk([1, 2, 3, 4], 2) ➞ [\n  [1, 2], [3, 4]\n]\n\nchunk([1, 2, 3, 4, 5, 6, 7], 3) ➞ [\n  [1, 2, 3], [4, 5, 6], [7]\n]\n\nchunk([1, 2, 3, 4 ,5], 10) ➞ [\n  [1, 2, 3, 4, 5]\n]\n\nNotes\nRemember that number of sublists may n",
    "tags": [
      "arrays",
      "conditions",
      "loops"
    ],
    "title": "List Chunking"
  },
  {
    "_id": "mz7mpEnMByAvBzMrc",
    "difficulty": 1.4610244988864143,
    "language": "python3",
    "summary": "Write a function that returns True if an integer can be expressed as a power of base value 2 and False otherwise.\n\nExamples\npoweroftwo(32) ➞ True\n\npoweroftwo(1) ➞ True\n\npoweroftwo(18) ➞ False\n\nNotes\nN/A",
    "tags": [
      "numbers",
      "math",
      "validation"
    ],
    "title": "Power of Two"
  },
  {
    "_id": "iMRN9YGK4mcYja9rY",
    "difficulty": 1.461111111111111,
    "language": "python3",
    "summary": "Create a function that takes a list and returns a list of the accumulating product.\n\nExamples\naccumulating_product([1, 2, 3, 4]) ➞ [1, 2, 6, 24]\n[1, 2, 6, 24] can be written as [1, 1 x 2, 1 x 2 x 3, 1 x 2 x 3 x 4]\n\naccumulating_product([1, 5, 7]) ➞ [1, 5, 35]\n\naccumulating_product([1, 0, 1, 0]) ➞ [1, 0, 0, 0]\n\naccumulating_product([]) ➞ []\n\nNotes\nAn empty list",
    "tags": [
      "arrays",
      "numbers"
    ],
    "title": "Accumulating Product"
  },
  {
    "_id": "cGaTqHsPfR5H6YBuj",
    "difficulty": 1.4618644067796611,
    "language": "python3",
    "summary": "Given a list of ingredients i and a flavour i as input, create a function that returns the list, but with the elements bread around the selected ingredient.\n\nExamples\nmake_sandwich([\"tuna\", \"ham\", \"tomato\"], \"ham\") ➞ [\"tuna\", \"bread\", \"ham\", \"bread\", \"tomato\"]\n\nmake_sandwich([\"cheese\", \"lettuce\"], \"cheese\") ➞ [\"bread\", \"cheese\", \"bread\", \"lettuce\"]\n\nmake_sandw",
    "tags": [
      "arrays",
      "loops"
    ],
    "title": "Making a Sandwich"
  },
  {
    "_id": "Bm3JCT6rFrnAhHohy",
    "difficulty": 1.4621359223300971,
    "language": "python3",
    "summary": "Create a function that takes a string and replaces each letter with its appropriate position in the alphabet. \"a\" is 1, \"b\" is 2, \"c\" is 3, etc, etc.\n\nExamples\nalphabet_index(\"Wow, does that work?\")\n➞ \"23 15 23 4 15 5 19 20 8 1 20 23 15 18 11\"\n\nalphabet_index(\"The river stole the gods.\")\n➞ \"20 8 5 18 9 22 5 18 19 20 15 12 5 20 8 5 7 15 4 19\"\n\nalphabet_index(\"W",
    "tags": [
      "strings",
      "formatting"
    ],
    "title": "Replace Letters With Position In Alphabet"
  },
  {
    "_id": "SgKy45GqofsiDDeNs",
    "difficulty": 1.4623655913978495,
    "language": "python3",
    "summary": "By default quantifiers like * and + are \"greedy\", meaning that they try to match as many characters as possible. Using ? after the quantifier makes the quantifier \"lazy\": meaning that it will stop as soon as it finds a match.\ntxt = \"1232 2133424 809890 548\"\nre.findall(\".+\\s\", txt) ➞ [\"1232 2133424 809890 \"]\nre.findall(\".+?\\s\", txt) ➞ [\"1232 \", \"2133424 \", \"809",
    "tags": [
      "regex"
    ],
    "title": "RegEx XIX: Greedy vs Lazy Quantifiers"
  },
  {
    "_id": "MKyeDtmX9GsKh2n9q",
    "difficulty": 1.4642857142857142,
    "language": "python3",
    "summary": "Create a function that generates a poker deck.\n\nA poker deck contains 52 cards in total, 13 cards for each of the four suits (♦ diamonds, ♠ clubs, ♥ hearts and ♣ spades) ranked 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K, A.\n\nYour function should return a list (deck) containing each card as a tuple in the following format:\n\n(rank, suit)\n\nWhere  rank is a number from 2",
    "tags": [
      "arrays",
      "games",
      "loops",
      "sorting"
    ],
    "title": "Poker Deck"
  },
  {
    "_id": "mhcjnns2WWiHWexP7",
    "difficulty": 1.4672131147540983,
    "language": "python3",
    "summary": "In a board game, a player may pick up a card with several left or right facing arrows, with the number of arrows indicating the number of tiles to move. The player should move either left or right, depending on the arrow's direction.\n\nGiven a list of the arrows contained on a player's cards, return a singular string of arrowheads that are equivalent to all of",
    "tags": [
      "strings",
      "algorithms",
      "arrays"
    ],
    "title": "Back and Forth"
  },
  {
    "_id": "H2EyqacEnijCozCWs",
    "difficulty": 1.468609865470852,
    "language": "python3",
    "summary": "Write a function that returns the first n vowels of a string.\n\nExamples\nfirstnvowels(\"sharpening skills\", 3) ➞ \"aei\"\n\nfirstnvowels(\"major league\", 5) ➞ \"aoeau\"\n\nfirstnvowels(\"hostess\", 5) ➞ \"invalid\"\n\nNotes\nReturn \"invalid\" if the n exceeds the number of vowels in a string.\nVowels are: a, e, i, o, u",
    "tags": [
      "strings",
      "regex",
      "loops"
    ],
    "title": "First N Vowels"
  },
  {
    "_id": "iRvRtg2xxL9BnSEvf",
    "difficulty": 1.4709976798143851,
    "language": "python3",
    "summary": "Create a Person class which will have three properties:\nName\nList of foods they like\nList of foods they hate\n\nIn this class, create the method taste():\nIt will take in a food name as a string.\nReturn {personname} eats the {foodname}.\nIf the food is in the person's like list, add 'and loves it!' to the end.\nIf it is in the person's hate list, add 'and hates it!",
    "tags": [
      "classes",
      "objects"
    ],
    "title": "Food for Everyone!"
  },
  {
    "_id": "ENJTPoWCyEGgnXYjM",
    "difficulty": 1.4719101123595506,
    "language": "python3",
    "summary": "Create a function that calculates what percentage of the box is filled in. Give your answer as a string percentage rounded to the nearest integer.\n\nExamples\npercent_filled([\n  \"####\",\n  \"#  #\",\n  \"#o #\",\n  \"####\"\n]) ➞ \"25%\"\n\nOne element out of four spaces.\n\npercent_filled([\n  \"#######\",\n  \"#o oo #\",\n  \"#######\"\n]) ➞ \"60%\"\n\nThree elements out of five spaces.\n\np",
    "tags": [
      "arrays",
      "logic",
      "strings"
    ],
    "title": "Percentage of Box Filled In"
  },
  {
    "_id": "wh4zW4YNaeDGJadiC",
    "difficulty": 1.4719101123595506,
    "language": "python3",
    "summary": "You are given two numbers, a and b. Write a function which uses an expression to return the expected output. I am not going to tell you what the expression is because that will spoil the fun!  :)\n\nExamples\ncrazyfunction(10, 20) ➞ 30\n\ncrazyfunction(17, 35) ➞ 50\n\ncrazyfunction(61, 233) ➞ 212\n\nNotes\nHint: Notice the tags?",
    "tags": [
      "bit_operations",
      "cryptography"
    ],
    "title": "Come Check Out This Crazy Function"
  },
  {
    "_id": "Lv3K85ynggbKTbr23",
    "difficulty": 1.4729241877256318,
    "language": "python3",
    "summary": "Captain Obvious is asked to implement a simple function that given two decimal numbers A and B returns their sum.\n\n\"Easy one!\" he thinks, but soon he discovers that his function fails over the fifty percent of given test cases! He suspects the test cases are wrong, but his calculator is saying they're correct! What's happening?\n\nCan you help Captain Obvious to",
    "tags": [
      "bugs",
      "numbers",
      "math"
    ],
    "title": "Sum of Decimals"
  },
  {
    "_id": "J2apiSnJE4RaGTj6x",
    "difficulty": 1.4742268041237114,
    "language": "python3",
    "summary": "Given what is supposed to be typed and what is actually typed, write a function that returns the broken key(s). The function looks like:\n\nfindbrokenkeys(correct phrase, what you actually typed)\n\nExamples\nfindbrokenkeys(\"happy birthday\", \"hawwy birthday\") ➞ [\"p\"]\n\nfindbrokenkeys(\"starry night\", \"starrq light\") ➞ [\"y\", \"n\"]\n\nfindbrokenkeys(\"beethoven\", \"affthoif",
    "tags": [
      "strings",
      "arrays"
    ],
    "title": "Broken Keyboard"
  },
  {
    "_id": "K4ifFgsgRitT7MDiz",
    "difficulty": 1.4747474747474747,
    "language": "python3",
    "summary": "For each challenge of this series you do not need to submit a function. Instead, you need to submit a template string that can formatted in order to get a certain outcome.\n\nWrite a template string according to the following example. Notice the period . at the end of the strings:\n\nExample\ntemplate = \"yourtemplatestringhere\"\ntemplate.format(\"name\", \"Johnny\", \"$\"",
    "tags": [
      "formatting",
      "strings",
      "language_fundamentals"
    ],
    "title": "Format VIII: Dynamic Formatting"
  },
  {
    "_id": "Mwh3zhKFu332qBhQa",
    "difficulty": 1.4752475247524752,
    "language": "python3",
    "summary": "Mubashir was trying to figure out a sequence of numbers given below:\n\nN | Result\n--- | ---\n1 | 90\n2 | 240\n3 | 450\n4 | 720\n5 | 1050\n\nIf you can figure this out then help him by creating a function that takes a number n and returns the nth number of the sequence.\n\nExamples\nguess_sequence(1) ➞ 90\n\nguess_sequence(2) ➞ 240\n\nguess_sequence(3) ➞ 450\n\nNotes\nN/A",
    "tags": [
      "algorithms",
      "logic",
      "math",
      "numbers"
    ],
    "title": "Guess the Sequence"
  },
  {
    "_id": "gDtHS9cAy8Fs2X7pH",
    "difficulty": 1.4757281553398058,
    "language": "python3",
    "summary": "Given a list, create a function that returns a dictionary detailing how many times each element was repeated.\n\nExamples\ncount_repetitions([\"cat\", \"dog\", \"cat\", \"cow\", \"cow\", \"cow\"]) ➞ { cow: 3, cat: 2, dog: 1 }\n\ncount_repetitions([1, 5, 5, 5, 12, 12, 0, 0, 0, 0, 0, 0]) ➞ { 0: 6, 5: 3, 12: 2, 1: 1 }\n\ncount_repetitions([\"Infinity\", \"null\", \"Infinity\", \"null\", \"n",
    "tags": [
      "arrays",
      "objects",
      "numbers",
      "loops"
    ],
    "title": "Count How Many Times an Element is Repeated"
  },
  {
    "_id": "LuBtaT9dwStbd7mnK",
    "difficulty": 1.4758842443729903,
    "language": "python3",
    "summary": "Given a list of strings (depicting a skyline of several buildings), return in meters the height of the tallest building. Each line in the list represents 20m.\n\nExamples\ntallestbuildingheight([\n  \"            ##\",\n  \"            ##\",\n  \"            ##\",\n  \"###   ###   ##\",\n  \"###   ###   ###\",\n  \"###   ###   ###\",\n  \"###   ###   ###\"\n]) ➞ \"140m\"\n\nTallest buildi",
    "tags": [
      "arrays",
      "algorithms",
      "strings"
    ],
    "title": "Height of the Tallest Building"
  },
  {
    "_id": "CvChvza6kwweMjNRr",
    "difficulty": 1.4781199351701784,
    "language": "python3",
    "summary": "You have a list of item codes with the following format: \"letters\"\n\nCreate a function that splits these strings into their alphabetic and numeric parts.\n\nExamples\nsplit_code(\"TEWA8392\") ➞ [\"TEWA\", 8392]\n\nsplit_code(\"MMU778\") ➞ [\"MMU\", 778]\n\nsplit_code(\"SRPE5532\") ➞ [\"SRPE\", 5532]\n\nNotes\nN/A",
    "tags": [
      "strings",
      "regex"
    ],
    "title": "Split Item Codes"
  },
  {
    "_id": "3eEjDZtxDtaiZccf9",
    "difficulty": 1.4796163069544364,
    "language": "python3",
    "summary": "This question is inspired by the popular Uno card game.\n\nWrite a function that takes in two arguments: (1) a player's current hand and (2) the current face-up card on the table. The function will return True if the player can make a play, or False if the player has to draw from the deck.\n\nA player can make a play if either:\n\nThey have a card that is the same c",
    "tags": [
      "arrays",
      "games"
    ],
    "title": "Uno (Part 1)"
  },
  {
    "_id": "RcauxLL2SqHYpzZrz",
    "difficulty": 1.4808743169398908,
    "language": "python3",
    "summary": "In this challenge you will be given a list containing equations, with each equation written as a string. Here's an example:\n\n[\"1+1=2\", \"2+2=3\", \"5*5=10\", \"3/3=1\"]\n\nIf you do the math, you'll see that the equations \"1+1=2\" and \"3/3=1\" are actually true while \"2+2=3\" and \"5*5=10\" are false nonsense.\n\nWrite a function which, given a list of equations as above, re",
    "tags": [
      "math",
      "strings",
      "language_fundamentals",
      "algebra"
    ],
    "title": "Find the True Equations"
  },
  {
    "_id": "wZzZ9NtugwsnQEQeM",
    "difficulty": 1.4810996563573884,
    "language": "python3",
    "summary": "A standard-sized golf course has 18 holes. Each hole is given a par, which is the expected number of strokes (hits) that a good player would use to complete a hole. Golf also uses different terms for a player being over/under par for a particular hole:\n\n\"eagle\" = 2 under par (-2)\n\"birdie\" = 1 under par (-1)\n\"bogey\" = 1 over par (+1)\n\"double-bogey\" = 2 over par",
    "tags": [
      "arrays",
      "conditions",
      "language_fundamentals"
    ],
    "title": "What's My Golf Score?"
  },
  {
    "_id": "C85NXJxetcYoF5eoy",
    "difficulty": 1.4814814814814814,
    "language": "python3",
    "summary": "Create a function that returns how often it has been called.\n\nExamples\ncounter() ➞ 0\n\ncounter() ➞ 1\n\ncounter() ➞ 2\n\ncounter() ➞ 3\n\nNotes\nA global variable is needed for this task.",
    "tags": [
      "language_fundamentals"
    ],
    "title": "Global Variable"
  },
  {
    "_id": "xYRNzJB7kAXXEQSdF",
    "difficulty": 1.4814814814814814,
    "language": "python3",
    "summary": "Create a function that returns a list of the given string but offset by spaces. Here are some more precise instructions:\n\nKeep adding spaces on the left until you have the same number of spaces as the word length.\nThen keep removing spaces until you reach the original word.\n\nBelow are some helpful examples!\n\nExamples\nwiggle_string(\"hello\") ➞ [\n  \"hello\",\n  \" h",
    "tags": [
      "loops",
      "arrays",
      "strings"
    ],
    "title": "Wiggled Strings"
  },
  {
    "_id": "aBbZfPAM8pKRZjC6p",
    "difficulty": 1.4821428571428572,
    "language": "python3",
    "summary": "Fruit salads are served best when the fruits are sliced and diced into small chunks!\n\nFor this challenge, slice each fruit in half and sort the chunks alphabetically. This recipe tastes best when the chunks are joined together to make a string.\n\nWorked Example\nfruit_salad([\"apple\", \"pear\", \"grapes\"]) ➞ \"apargrapepesple\"\n\nChunks: [\"ap\", \"ple\", \"pe\", \"ar\", \"gra\"",
    "tags": [
      "arrays",
      "loops",
      "strings",
      "sorting"
    ],
    "title": "Fruit Salad 🍇🍓🍎"
  },
  {
    "_id": "jgrDqqNm8z2kzJ6mH",
    "difficulty": 1.4827586206896552,
    "language": "python3",
    "summary": "Create a function that takes a list of objects and calculate the total based on the quantity of items purchased. Apply a 6% sales tax for each item when appropriate.\n\nExamples\ncheckout([\n  { \"desc\": \"potato chips\", \"prc\": 2, \"qty\": 2, \"taxable\": false },\n  { \"desc\": \"soda\", \"prc\": 3, \"qty\": 2, \"taxable\": false },\n  { \"desc\": \"paper plates\", \"prc\": 5, \"qty\": 1,",
    "tags": [
      "arrays",
      "objects"
    ],
    "title": "Shopping for Memorial Day!"
  },
  {
    "_id": "egHeSWSjHTgzMysBX",
    "difficulty": 1.484076433121019,
    "language": "python3",
    "summary": "Create a function that takes a number as an argument and returns half of it.\n\nExamples\nhalfafraction(\"1/2\") ➞ \"1/4\"\n\nhalfafraction(\"6/8\") ➞ \"3/8\"\n\nhalfafraction(\"3/8\") ➞ \"3/16\"\n\nNotes\nAlways return the simplified fraction.",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "Divide a Fraction by Two"
  },
  {
    "_id": "zNNtsPBCE5FFXW7wn",
    "difficulty": 1.4842105263157894,
    "language": "python3",
    "summary": "Given a list of values, return a list with each value replaced with the empty value of the same type.\n\nMore explicitly:\n\nReplace integers (e.g. 1, 3), whose type is int, with 0\nReplace floats (e.g. 3.14, 2.17), whose type is float, with 0.0\nReplace strings (e.g. \"abcde\", \"x\"), whose type is str, with \"\"\nReplace booleans (True, False), whose type is bool, with",
    "tags": [
      "language_fundamentals",
      "arrays"
    ],
    "title": "Emptying the Values"
  },
  {
    "_id": "994QjWPmdhaR94DeF",
    "difficulty": 1.4845360824742269,
    "language": "python3",
    "summary": "Create a function which constructs a rectangular birthday cake, based on someone's name and age! Build it out of strings in a list and makes sure to surround the birthday message with the character that fits the rule:\n\nIf the age is an even number, surround the message with \"#\".\nIf the age is an odd number, surround the message with \"*\".\n\nOther important rules",
    "tags": [
      "arrays",
      "formatting"
    ],
    "title": "Birthday Cake"
  },
  {
    "_id": "2gFkEsAqNZrs4yeck",
    "difficulty": 1.4850746268656716,
    "language": "python3",
    "summary": "Write a function that returns all the elements in an array that are strictly greater than their adjacent left and right neighbors.\n\nExamples\nmini_peaks([4, 5, 2, 1, 4, 9, 7, 2]) ➞ [5, 9]\n5 has neighbours 4 and 2, both are less than 5.\n\nmini_peaks([1, 2, 1, 1, 3, 2, 5, 4, 4]) ➞ [2, 3, 5]\n\nmini_peaks([1, 2, 3, 4, 5, 6]) ➞ []\n\nNotes\nDo not count boundary numbers,",
    "tags": [
      "arrays",
      "loops"
    ],
    "title": "Mini Peaks"
  },
  {
    "_id": "kmruefq3dhdqxtLeM",
    "difficulty": 1.4854368932038835,
    "language": "python3",
    "summary": "Create a function that sums the total number of digits between two numbers, inclusive. For example, between the numbers 19 and 22 we have:\n\n19, 20, 21, 22\n(1 + 9) + (2 + 0) + (2 + 1) + (2 + 2) = 19\n\nExamples\nsum_digits(7, 8) ➞ 15\n\nsum_digits(17, 20) ➞ 29\n\nsum_digits(10, 12) ➞ 6\n\nNotes\nN/A",
    "tags": [
      "numbers",
      "loops"
    ],
    "title": "Sum of Digits Between Two Numbers"
  },
  {
    "_id": "ecwE3tQK9Na8GJ9pN",
    "difficulty": 1.4875,
    "language": "python3",
    "summary": "A number sequence is as follows:\n\n5, 100, 6, 200, 7, 400, 8, 800, 9, 1600, 10, 3200, ...\n\nGiven that 5 is at position 1, create a function that returns the number found at position n in the sequence.\n\nExamples\nlittle_big(4) ➞ 200\n\nlittle_big(5) ➞ 7\n\nlittle_big(28) ➞ 819200\n\nNotes\nYou can expect to be only given valid inputs.",
    "tags": [
      "math",
      "numbers",
      "loops"
    ],
    "title": "Little Big Sequence"
  },
  {
    "_id": "7nfSdzzpvTta8hhNe",
    "difficulty": 1.4878048780487805,
    "language": "python3",
    "summary": "Write a function that maps a string into a list of name, string, and occupation pairs.\n\nExamples\norganize(\"Jameel Saeb, 15, CEO of facebook\") ➞ {\n  \"name\": \"Jameel Saeb\",\n  \"age\": 15,\n  \"occupation\": \"CEO of facebook\"\n}\n\norganize(\"John Mayer, 41, Singer, Emily Blunt, 36, Actor\") ➞ {\n  \"name\": \"John Mayer\",\n  \"age\": 41,\n  \"occupation\": \"Singer\"\n}\n\norganize(\"\")",
    "tags": [
      "higher_order_functions",
      "objects"
    ],
    "title": "Names, Ages and Occupations"
  },
  {
    "_id": "zYr4v5gb43kJPje9g",
    "difficulty": 1.4880382775119618,
    "language": "python3",
    "summary": "Create a function to partition a list from left to right.\n\nExamples\nmoving_partition([-1, -1, -1, -1])\n➞ [[[-1], [-1, -1, -1]], [[-1, -1], [-1, -1]], [[-1, -1, -1], [-1]]]\n\nmoving_partition([1, 2, 3, 4, 5])\n➞ [[[1], [2, 3, 4, 5]], [[1, 2], [3, 4, 5]], [[1, 2, 3], [4, 5]], [[1, 2, 3, 4], [5]]]\n\nmoving_partition([]) ➞ []\n\nNotes\nWith an n input, your output shoul",
    "tags": [
      "arrays",
      "higher_order_functions"
    ],
    "title": "Moving Partition"
  },
  {
    "_id": "NaMpXuFbi5gjg3jwF",
    "difficulty": 1.4880546075085324,
    "language": "python3",
    "summary": "Joseph is in the middle of packing for a vacation. He's having a bit of trouble finding all of his socks, though.\n\nWrite a function that returns the number of sock pairs he has. A sock pair consists of two of the same letter, such as \"AA\". The socks are represented as an unordered sequence.\n\nExamples\nsock_pairs(\"AA\") ➞ 1\n\nsock_pairs(\"ABABC\") ➞ 2\n\nsock_pairs(\"C",
    "tags": [
      "strings",
      "arrays"
    ],
    "title": "Sock Pairs"
  },
  {
    "_id": "DGK42TmQiocZqifxi",
    "difficulty": 1.4885496183206106,
    "language": "python3",
    "summary": "Create a function that finds the reverse complement of a ribonucleic acid (RNA) strand. The RNA will be represented as a string containing only the characters \"A\", \"C\", \"G\" and \"U\". Since RNA can only (canonically) allow pairings of A/U and G/C, the complement of an RNA would be as follows:\n\noriginal -> complement\n\"AAA\" -> \"UUU\"\n\"UUU\" -> \"AAA\"\n\"GGG\" -> \"CCC\"\n\"",
    "tags": [
      "algorithms",
      "loops"
    ],
    "title": "RNA Reverse Complement"
  },
  {
    "_id": "WsGjnhMdjsvzyuk5q",
    "difficulty": 1.4891304347826086,
    "language": "python3",
    "summary": "Create a function that takes a string and returns dashes on both sides of every vowel (a e i o u).\n\nExamples\ndashed(\"Edabit\") ➞ \"-E-d-a-b-i-t\"\n\ndashed(\"Carpe Diem\") ➞ \"C-a-rp-e- D-i--e-m\"\n\ndashed(\"Fight for your right to party!\") ➞ \"F-i-ght f-o-r y-o--u-r r-i-ght t-o- p-a-rty!\"\n\nNotes\nA string can contain uppercase and lowercase vowels.\nY is not considered a v",
    "tags": [
      "strings",
      "logic",
      "formatting",
      "regex"
    ],
    "title": "Dashed Vowels"
  },
  {
    "_id": "zxAXEgpjQ3XrLs2K7",
    "difficulty": 1.4893617021276595,
    "language": "python3",
    "summary": "Given two lists, merge them to one list and sort the new list in the same order as the first list.\n\nExamples\nmerge_sort([1, 2, 3], [5, 4, 6]) ➞ [1, 2, 3, 4, 5, 6]\n\nmerge_sort([8, 6, 4, 2], [-2, -6, 0, -4]) ➞ [8, 6, 4, 2, 0, -2, -4, -6]\n\nmerge_sort([120, 180, 200], [190, 175, 130]) ➞ [120, 130, 175, 180, 190, 200]\n\nNotes\nYou'll  always get two lists as argument",
    "tags": [
      "arrays",
      "sorting"
    ],
    "title": "Merge Lists in Order"
  },
  {
    "_id": "MxNcFpABB68JCxSwA",
    "difficulty": 1.4895833333333333,
    "language": "python3",
    "summary": "Legendre's formula finds the exponent of the largest power of some prime p that divides (is a factor of) the factorial of some number n.\n\nLegendre's formula example (p = 2 and n = 27):\n\nLegendre's Formula\n\nSo 2^23 is the largest power of 2 that divides 27!.\n\nThe formula returns the sum of many fractions (rounded down) with n as the numerator and a steadily inc",
    "tags": [
      "algebra",
      "math",
      "numbers"
    ],
    "title": "Legendre's Formula"
  },
  {
    "_id": "p8tqXx7eiRk78g8zS",
    "difficulty": 1.49,
    "language": "python3",
    "summary": "Create a regular expression  to check whether the given string is a valid floating numeric character or not.\n\nExamples\npattern = \"yourregularexpressionhere\"\n\nbool(re.match(pattern, \"12.12\")) ➞ True\nbool(re.match(pattern, \"12.\")) ➞ False\nbool(re.match(pattern, \".1\")) ➞ True\nbool(re.match(pattern, \"-.1\")) ➞ True\nbool(re.match(pattern, \"+4.4\")) ➞ True\nbool(re.mat",
    "tags": [
      "regex",
      "strings",
      "logic",
      "validation"
    ],
    "title": "RegEx Exercise #6: Float Number"
  },
  {
    "_id": "G7m26EdX3AABCSQBv",
    "difficulty": 1.490066225165563,
    "language": "python3",
    "summary": "Given a very long string of ASCII characters, split the string up into equal sized groups of size width. To properly display the image, join up the groups with the newline character \\n and return the output string.\n\nSee the miniature examples below for clarity!\n\nExamples\nformat_ascii(\"0123456789\", 2) ➞ \"01\\n23\\n45\\n67\\n89\"\n\nformat_ascii(\"......................",
    "tags": [
      "algorithms",
      "loops",
      "strings"
    ],
    "title": "ASCII Art!"
  },
  {
    "_id": "uugzpwJXKdiESZbjM",
    "difficulty": 1.4902439024390244,
    "language": "python3",
    "summary": "Create a function that determines whether or not a player is holding a Full House in their hand. A hand is represented as a list of 5 cards. A full house is defined as a pair of cards and a three-of-a-kind.\n\nTo illustrate: [\"A\", \"A\", \"A\", \"K\", \"K\"] would be a Full House, since the player holds 3 aces and 2 kings.\n\nExamples\nisfullhouse([\"A\", \"A\", \"A\", \"K\", \"K\"]",
    "tags": [
      "arrays",
      "games",
      "validation"
    ],
    "title": "Poker Full House"
  },
  {
    "_id": "o9jhv8LxsL8KsGgga",
    "difficulty": 1.4910394265232976,
    "language": "python3",
    "summary": "Create a function that returns True an input array can be completely sorted by only sorting within the bounds [0, n] (inclusive), where n smaller than or equal to the array's length, and False otherwise.\n\nExamples\nbound_sort([1, 6, 5, 3, 8, 9], [0, 3]) ➞ True\nIf [1, 6, 5, 3] is sorted to [1, 3, 5, 6], the array is completely sorted.\n\nbound_sort([1, 6, 5, 3, 8,",
    "tags": [
      "arrays",
      "sorting",
      "validation"
    ],
    "title": "Bound Sort"
  },
  {
    "_id": "9HWMgvjF7p3zhWBdk",
    "difficulty": 1.4912790697674418,
    "language": "python3",
    "summary": "Create a function that takes a dictionary and returns the keys and values as separate lists.\n\nExamples\nkeysandvalues({ \"a\": 1, \"b\": 2, \"c\": 3 })\n➞ [[\"a\", \"b\", \"c\"], [1, 2, 3]]\n\nkeysandvalues({ \"a\": \"Apple\", \"b\": \"Microsoft\", \"c\": \"Google\" })\n➞ [[\"a\", \"b\", \"c\"], [\"Apple\", \"Microsoft\", \"Google\"]]\n\nkeysandvalues({ \"key1\": True, \"key2\": False, \"key3\": True })\n➞ [[",
    "tags": [
      "objects",
      "formatting",
      "language_fundamentals"
    ],
    "title": "Return the Objects Keys and Values"
  },
  {
    "_id": "MFteyMABeuGaga3a7",
    "difficulty": 1.4914529914529915,
    "language": "python3",
    "summary": "When coloring a striped pattern, you may start by coloring each square sequentially, meaning you spend time needing to switch coloring pencils.\n\nCreate a function where given a list of colors cols, return how long it takes to color the whole pattern. Note the following times:\n\nIt takes 1 second to switch between pencils.\nIt takes 2 seconds to * color a square*",
    "tags": [
      "arrays",
      "algorithms"
    ],
    "title": "Switching Between Pencils"
  },
  {
    "_id": "x3pW72MfFLi2GYh6g",
    "difficulty": 1.4917127071823204,
    "language": "python3",
    "summary": "Given a list of numbers, representing the height of a mountain a certain intervals, return whether this mountain is scalable.\n\nA mountain can be considered scalable if each number is within 5 units of the next number in either direction.\n\nExamples\nis_scalable([1, 2, 4, 6, 7, 8]) ➞ True\n\nis_scalable([40, 45, 50, 45, 47, 52]) ➞ True\n\nis_scalable([2, 9, 11, 10, 1",
    "tags": [
      "loops",
      "arrays",
      "numbers",
      "validation"
    ],
    "title": "Scalable Mountain?"
  },
  {
    "_id": "MeScMZ7GqAgyfvNKp",
    "difficulty": 1.492063492063492,
    "language": "python3",
    "summary": "In the image below, squares are either empty or filled with a circle.\n\nSteps vs Empty Squarest\n\nCreate a function that takes a number step (which equals HALF the width of a square) and returns the amount of empty squares. The image shows the squares with step 1, 2 and 3. The return value is the number of cells not on a diagonal, which is 0 for the first square",
    "tags": [
      "algebra",
      "math",
      "validation"
    ],
    "title": "The Empty Square Sequence"
  },
  {
    "_id": "eboWapTruZFxmdcwp",
    "difficulty": 1.4921630094043887,
    "language": "python3",
    "summary": "A list is positive dominant if it contains strictly more unique positive values than unique negative values. Write a function that returns True if a list is positive dominant.\n\nExamples\nispositivedominant([1, 1, 1, 1, -3, -4]) ➞ False\nThere is only 1 unique positive value (1).\nThere are 2 unique negative values (-3, -4)\n\nispositivedominant([5, 99, 832, -3, -4]",
    "tags": [
      "arrays",
      "validation"
    ],
    "title": "Positive Dominant"
  },
  {
    "_id": "ZhCcXKviB6FZ3zz6B",
    "difficulty": 1.4921875,
    "language": "python3",
    "summary": "We have two character classes to match tabs in RegEx: \\t is used to match horizontal tabs while \\v matches vertical tabs.  Vertical tabs were once a thing but are rarely used anymore. We generally use horizontal tabs which are produced by the tab key on our keyboards.\n\nWrite the regular expression that will help us find how many tabs immediately followed by on",
    "tags": [
      "regex"
    ],
    "title": "RegEx XII: Tab Character Class"
  },
  {
    "_id": "T3CDjiW46KT8si6A8",
    "difficulty": 1.4927536231884058,
    "language": "python3",
    "summary": "Create a function that takes a list and returns the product of the largest and second largest number.\n\nExamples\nproduct([2, 3, 1, -1, 2]) ➞ 6\n2 * 3 = 6\n\nproduct([-2, -2, -1, -1]) ➞ 2\n-2 * - 1 = 2\nNot 1, because you can only use -1 one time.\n\nproduct([8, 8, 8]) ➞ 64\n8 * 8 = 64\nYou can repeat here because there is only one value.\n\nproduct([2, 8, 8, 8]) ➞ 16\n2 *",
    "tags": [
      "math",
      "language_fundamentals"
    ],
    "title": "Product of Two Largest Numbers"
  },
  {
    "_id": "eraBhwF8HkJDAa2pS",
    "difficulty": 1.4929577464788732,
    "language": "python3",
    "summary": "A group of pirates each have a distribution of gold coins, which can be represented as a list:\n\n[3, 9, 4, 5, 5]\nPirate 1 has 3 gold, Pirate 2 has 9 gold, etc.\n\nThe difference between each pirate's share of gold and that of the richest pirate is represented as:\n\n[6, 0, 5, 4, 4]\nSince 6 = 9 - 3, 0 = 9 - 9, 4 = 9 - 5, etc.\n\nPirates have a keen sense of fairness, ",
    "tags": [
      "arrays",
      "validation",
      "loops"
    ],
    "title": "Gold Distribution"
  },
  {
    "_id": "n4yvHn6ybn45bBwXj",
    "difficulty": 1.4941176470588236,
    "language": "python3",
    "summary": "Write a regular expression that matches only an even number. Numbers will be presented as strings.\n\nExamples\n\"2341\" ➞ false\n\n\"132\" ➞ true\n\n\"29\" ➞ false\n\n\"5578\" ➞ true\n\nNotes\nThis challenge is designed for RegEx only.",
    "tags": [
      "strings",
      "regex",
      "validation"
    ],
    "title": "Regex Series: Even Number?"
  },
  {
    "_id": "B2jcSh2RG4GpQYuBz",
    "difficulty": 1.494208494208494,
    "language": "python3",
    "summary": "Create a function that accepts a string and returns True if it's in the format of a proper phone number and False if it's not. Assume any number between 0-9 (in the appropriate spots) will produce a valid phone number.\n\nThis is what a valid phone number looks like:\n\n(123) 456-7890\n\nExamples\nisvalidphone_number(\"(123) 456-7890\") ➞ True\n\nisvalidphone_number(\"111",
    "tags": [
      "strings",
      "validation",
      "regex",
      "formatting"
    ],
    "title": "Is the Phone Number Formatted Correctly?"
  },
  {
    "_id": "7QPHWACcDihT3AM6b",
    "difficulty": 1.4945054945054945,
    "language": "python3",
    "summary": "You are given an input array of bigrams, and an array of words.\n\nWrite a function that returns True if every single bigram from this array can be found at least once in an array of words.\n\nExamples\ncan_find([\"at\", \"be\", \"th\", \"au\"], [\"beautiful\", \"the\", \"hat\"]) ➞ True\n\ncan_find([\"ay\", \"be\", \"ta\", \"cu\"], [\"maybe\", \"beta\", \"abet\", \"course\"]) ➞ False\n\"cu\" does no",
    "tags": [
      "strings",
      "higher_order_functions",
      "validation"
    ],
    "title": "Do All Bigrams Exist?"
  },
  {
    "_id": "TCbrjfMm2dPzQDbz5",
    "difficulty": 1.4948805460750854,
    "language": "python3",
    "summary": "Write a function that inserts a white space between every instance of a lower character followed immediately by an upper character.\n\nExamples\ninsert_whitespace(\"SheWalksToTheBeach\") ➞ \"She Walks To The Beach\"\n\ninsert_whitespace(\"MarvinTalksTooMuch\") ➞ \"Marvin Talks Too Much\"\n\ninsert_whitespace(\"TheGreatestUpsetInHistory\") ➞ \"The Greatest Upset In History\"\n\nNot",
    "tags": [
      "regex",
      "formatting",
      "strings"
    ],
    "title": "White Spaces Between Lower and Uppercase Letters"
  },
  {
    "_id": "4BRGyox5xi8Kp7AAE",
    "difficulty": 1.494949494949495,
    "language": "python3",
    "summary": "Create a function that takes a code of chess board square and return his color.\n\nAlternative Text\n\nExamples\nchess_board(\"a1\") ➞ \"black\"\n\nchess_board(\"e5\") ➞ \"black\"\n\nchess_board(\"d1\") ➞ \"white\"\n\nNotes\nN/A",
    "tags": [
      "algebra",
      "algorithms",
      "logic"
    ],
    "title": "Chess Board Squares"
  },
  {
    "_id": "v34oCTbkrceCZjgRE",
    "difficulty": 1.4954128440366972,
    "language": "python3",
    "summary": "The right shift operation is similar to floor division by powers of two, thus, the process is repetitive and can be done recursively.\n\nSample calculation using the right shift operator ( >> ):\n80 >> 3 = floor(80/2^3) = floor(80/8) = 10\n-24 >> 2 = floor(-24/2^2) = floor(-24/4) = -6\n-5 >> 1 = floor(-5/2^1) = floor(-5/2) = -3\n\nWrite a function that mimics (withou",
    "tags": [
      "recursion",
      "numbers",
      "bit_operations"
    ],
    "title": "Recursion: Right Shift by Division"
  },
  {
    "_id": "iA5aeTFGLcxx94Wjh",
    "difficulty": 1.4954545454545454,
    "language": "python3",
    "summary": "Create a function that takes two arguments: a list lst and a number num. If an element occurs in lst more than num times, remove the extra occurrence(s) and return the result.\n\nExamples\ndelete_occurrences([1, 1, 1, 1], 2) ➞ [1, 1]\n\ndelete_occurrences([13, True, 13, None], 1) ➞ [13, True, None]\n\ndelete_occurrences([True, True, True], 3) ➞ [True, True, True]\n\nNo",
    "tags": [
      "data_structures",
      "arrays"
    ],
    "title": "Delete Occurrences of Extra Elements in a List"
  },
  {
    "_id": "fpJXv7Qn9LCxX8FYq",
    "difficulty": 1.4963503649635037,
    "language": "python3",
    "summary": "Create a function that returns the value of x (the \"unknown\" in the equation). Each equation will be formatted like this:\n\nx + 6 = 12\n\nExamples\nsolve(\"x + 43 = 50\") ➞ 7\n\nsolve(\"x - 9 = 10\") ➞ 19\n\nsolve(\"x + 300 = 100\") ➞ -200\n\nNotes\n\"x\" will always be in the same place (you will not find an equation like 6 + x = 12).\nEvery equation will include either subtract",
    "tags": [
      "math",
      "algebra"
    ],
    "title": "Solve a Linear Equation"
  },
  {
    "_id": "nLNCPwzcbvrHmt4MF",
    "difficulty": 1.4966887417218544,
    "language": "python3",
    "summary": "The Fibonacci Sequence is the sequence of numbers (Fibonacci Numbers) whose sum is the two preceding numbers (e.g. 0, 1, 1, 2, 3, etc). Using 0 and 1 as the starting values, create a function that returns a list containing all of the Fibonacci numbers less than 255.\n\nExamples\n\nOn generating a Fibonacci number where input is the two preceding values starting fr",
    "tags": [
      "math",
      "loops"
    ],
    "title": "Fibonacci Sequence"
  },
  {
    "_id": "ZZsnGAjYLyosG9zmH",
    "difficulty": 1.497191011235955,
    "language": "python3",
    "summary": "Create a function that outputs the results of a flashcard. A flashcard is a list of three elements: a number, an operator symbol, and another number. Return the mathematical result of that expression.\n\nThere are 4 operators: + (addition), - (subtraction), x (multiplication), and / (division). If the flashcard displays a number being divided by zero, e.g. [3, \"",
    "tags": [
      "arrays",
      "conditions"
    ],
    "title": "Flash Cards"
  },
  {
    "_id": "yGBevdRmXvSyTaBSA",
    "difficulty": 1.497584541062802,
    "language": "python3",
    "summary": "You will be given a list of drinks, with each drink being a dictionary with two properties: name and price. Create a function that has the drinks list as an argument and return the drinks dictionaries sorted by price in ascending order.\n\nAssume that the following array of drink objects needs to be sorted:\n\ndrinks = [\n  {\"name\": \"lemonade\", \"price\": 50},\n  {\"na",
    "tags": [
      "objects",
      "sorting"
    ],
    "title": "Drink Sorting"
  },
  {
    "_id": "ANsubgd5zPGxov3u8",
    "difficulty": 1.4980237154150198,
    "language": "python3",
    "summary": "Create a function that takes in a list of full names and returns the initials.\n\nExamples\ninitialize([\"Stephen Hawking\"]) ➞ [\"S. H.\"]\n\ninitialize([\"Harry Potter\", \"Ron Weasley\"]) ➞ [\"H. P.\", \"R. W.\"]\n\ninitialize([\"Sherlock Holmes\", \"John Watson\", \"Irene Adler\"]) ➞ [\"S. H.\", \"J. W.\", \"I. A.\"]\n\nNotes\nEach initial is followed by a dot.\nNames will always be made of",
    "tags": [
      "arrays",
      "formatting"
    ],
    "title": "Initialize"
  },
  {
    "_id": "ZQhRtfh9CB8aSwvrc",
    "difficulty": 1.4981684981684982,
    "language": "python3",
    "summary": "For each number in a list, check if that number is greater than the sum of all numbers that appear before it in the list. If all numbers in the list pass this test, return True. Return False otherwise.\n\nExamples\ngreaterthansum([2, 3, 7, 13, 28]) ➞ True\n\n3 > 2 = True\n7 > 2 + 3 = True\n13 > 2 + 3 + 7 = True\n28 > 2 + 3 + 7 + 13 = True\n\ngreaterthansum([1, 2, 4, 6,",
    "tags": [
      "arrays",
      "language_fundamentals"
    ],
    "title": "Greater Than the Sum?"
  },
  {
    "_id": "cXfcK7iXpuZ67taSh",
    "difficulty": 1.4986945169712793,
    "language": "python3",
    "summary": "This is a reverse coding challenge. Normally you're given explicit directions with how to create a function. Here, you must generate your own function to satisfy the relationship between the inputs and outputs.\n\nYour task is to create a function that, when fed the inputs below, produce the sample outputs shown.\n\nExamples\n\"A4B5C2\" ➞ \"AAAABBBBBCC\"\n\n\"C2F1E5\" ➞ \"C",
    "tags": [
      "strings",
      "loops"
    ],
    "title": "Reverse Coding Challenge #1"
  },
  {
    "_id": "Fe6wvtjcNFwuANuLu",
    "difficulty": 1.5,
    "language": "python3",
    "summary": "A game of table tennis almost always sounds like Ping! followed by Pong! Therefore,  you know that Player 2 has won if you hear Pong! as the last sound (since Player 1 didn't return the ball back).\n\nGiven a list of Ping!, create a function that inserts Pong! in between each element. Also:\nIf win equals True, end the list with Pong!.\nIf win equals False, end wi",
    "tags": [
      "games",
      "arrays",
      "algorithms"
    ],
    "title": "Ping Pong!"
  },
  {
    "_id": "KNcoiggMPCXcj3aML",
    "difficulty": 1.5,
    "language": "python3",
    "summary": "Captain Hook and his crew are currently resting at Origin Shore. They are about to embark on their next adventure to an undisclosed location (x, y) to find treasure.\n\nCaptain Hook's ship can only move exactly north, south, east or west. It takes exactly 1 day for the ship to travel 1 unit in one of the four cardinal directions.\n\nAfter every 5 days, the crew wi",
    "tags": [
      "math",
      "numbers",
      "arrays"
    ],
    "title": "A Pirate's Tale"
  },
  {
    "_id": "djDJHv3nwWsRM9mtu",
    "difficulty": 1.5,
    "language": "python3",
    "summary": "Given a sentence spelling out a word, return True if the spelled letters match the word at the end of the string.\n\nExamples\nvalidate_spelling(\"C. Y. T. O. P. L. A. S. M. Cytoplasm?\") ➞ True\n\nvalidate_spelling(\"P. H. A. R. A. O. H. Pharaoh!\") ➞ True\n\nvalidate_spelling(\"H. A. N. K. E. R. C. H. E. I. F. Handkerchief.\") ➞ False\n\nNotes\nThe word at the end is always",
    "tags": [
      "strings",
      "validation",
      "regex"
    ],
    "title": "Spelling Bee"
  },
  {
    "_id": "TDrfRh63jMCmqzGjv",
    "difficulty": 1.5,
    "language": "python3",
    "summary": "Given two lists, return whether the two lists are opposites of each other. That means both lists are comprised only from elements a and b and the occurrences of these elements are swapped between the two lists.\n\nExamples\nisantilist([\"1\", \"0\", \"0\", \"1\"], [\"0\", \"1\", \"1\", \"0\"]) ➞ True\n\nisantilist([\"apples\", \"bananas\", \"bananas\"], [\"bananas\", \"apples\", \"apples\"])",
    "tags": [
      "arrays",
      "loops",
      "validation"
    ],
    "title": "Anti Lists"
  },
  {
    "_id": "XsqET8hSTBG2AR5kM",
    "difficulty": 1.5021276595744681,
    "language": "python3",
    "summary": "Given two words, the letter distance is calculated by taking the absolute value of the difference in character codes and summing up the difference.\n\nIf one word is longer than another, add the difference in lengths towards the score.\n\nTo illustrate:\n\nletter_distance(\"house\", \"fly\") = dist(\"h\", \"f\") + dist(\"o\", \"l\") + dist(\"u\", \"y\") + dist(house.length, fly.len",
    "tags": [
      "strings",
      "loops"
    ],
    "title": "Letter Distance"
  },
  {
    "_id": "3JX75W5Xvun63RH9H",
    "difficulty": 1.5027932960893855,
    "language": "python3",
    "summary": "Given a number n, return a sentence which describes the number in the following ways.\n\nAlways start the string with \"The most\".\nIf n is evenly divisible by 1, add \"brilliant\" to the sentence.\nIf n is evenly divisble by 2, add \"exciting\" to the sentence.\n... 3, add \"fantastic\" to the sentence.\n... 4, add \"virtuous\" to the sentence.\n... 5, add \"heart-warming\" ..",
    "tags": [
      "control_flow",
      "numbers",
      "strings",
      "math"
    ],
    "title": "The Most Brilliant Exciting Fantastic Number"
  },
  {
    "_id": "HpJCBwggQMDLWTHsM",
    "difficulty": 1.5035971223021583,
    "language": "python3",
    "summary": "Create a function that takes in a sentence and returns the average length of each word in that sentence. Round your result to two decimal places.\n\nExamples\naveragewordlength(\"A B C.\") ➞ 1.00\n\naveragewordlength(\"What a gorgeous day.\") ➞ 4.00\n\naveragewordlength(\"Dude, this is so awesome!\") ➞ 3.80\n\nNotes\nIgnore punctuation when counting the length of a word.",
    "tags": [
      "strings",
      "math"
    ],
    "title": "Average Word Length"
  },
  {
    "_id": "Hg2gFcJDg7Rz5bd5m",
    "difficulty": 1.504,
    "language": "python3",
    "summary": "Write a function that takes as input two different dictionaries and filters the keys in each dictionary to only keep keys that exist in both dictionaries. Store your result as a list with two dictionaries.\n\nExamples\ndict1 = {\"a\": 5, \"b\": 13, \"c\": 7}\ndict2 = {\"b\": 5, \"c\": 8, \"d\": 91, \"e\": 99}\ndict3 = {\"a\": 1, \"b\": 34}\ndict4 = {\"c\": 9, \"d\": 8}\n\nintersection(dict",
    "tags": [
      "objects",
      "language_fundamentals"
    ],
    "title": "Intersection of Two Dictionaries"
  },
  {
    "_id": "G2QnBrxvpq9FacFuo",
    "difficulty": 1.5061728395061729,
    "language": "python3",
    "summary": "A floor plan is arranged as follows:\nFour rooms, which all lead into the hallway.\nIt's impossible to move between rooms without first going into the hallway.\n\nRoom\n\nCreate a function that validates whether the path between rooms is possible. The hallway will be given as the letter \"H\".\n\nExamples\npossible_path([1, \"H\", 2, \"H\", 3, \"H\", 4]) ➞ True\n\npossible_path(",
    "tags": [
      "loops",
      "algorithms",
      "validation"
    ],
    "title": "Hall Monitor"
  },
  {
    "_id": "LDQvCxTPv4iiY8B2A",
    "difficulty": 1.5069767441860464,
    "language": "python3",
    "summary": "The number 6090609 has a special property: if you turn the number upside down (imagine rotating your screen 180 degrees), you get 6090609 again.\n\nWrite a function that takes a string on the digits 0, 6, 9 and decides if the number is the same upside down.\n\nExamples\nsame_upsidedown(\"6090609\") ➞ True\n\nsame_upsidedown(\"9669\") ➞ False\nBecomes 6996 when upside down",
    "tags": [
      "strings",
      "sorting",
      "numbers",
      "validation"
    ],
    "title": "Is It the Same Upside Down?"
  },
  {
    "_id": "WBNgokx2TJTq2aD2N",
    "difficulty": 1.5076923076923077,
    "language": "python3",
    "summary": "Write a function that returns the smallest N-digit number which is a multiple of the specified value.\n\nExamples\nsmallest(3, 8) ➞ 104\nSmallest 3-digit integer that is a multiple of 8\n\nsmallest(5, 12) ➞ 10008\n\nsmallest(7, 1) ➞ 1000000\n\nsmallest(2, 3) ➞ 12\n\nNotes\nN/A",
    "tags": [
      "numbers",
      "math"
    ],
    "title": "Smallest N Digit Number"
  },
  {
    "_id": "kiX7WjSFeTmBYcEgK",
    "difficulty": 1.507936507936508,
    "language": "python3",
    "summary": "Create a function that takes an integer list and return the biggest between positive sum, negative sum, or 0s count. The major is understood as the greatest absolute.\n\nl = [1,2,3,4,0,0,-3,-2], the function has to return 10, because:\nPositive sum = 1+2+3+4 = 10\nNegative sum = (-3)+(-2) = -5\n0s count = 2 (there are two zeros in list)\n\nExamples\nmajor_sum([1, 2, 3",
    "tags": [
      "arrays",
      "conditions",
      "logic",
      "loops"
    ],
    "title": "The Major Sum"
  },
  {
    "_id": "tjMNAEgkNvM5eyEqJ",
    "difficulty": 1.5084745762711864,
    "language": "python3",
    "summary": "You are given two inputs:\n\nA array of abbreviations.\nAn array of words.\n\nWrite a function that returns True if each abbreviation uniquely identifies a word, and False otherwise.\n\nExamples\nunique_abbrev([\"ho\", \"h\", \"ha\"], [\"house\", \"hope\", \"happy\"]) ➞ False\n// \"ho\" and \"h\" are ambiguous and can identify either \"house\" or \"hope\"\n\nunique_abbrev([\"s\", \"t\", \"v\"], [",
    "tags": [
      "strings",
      "higher_order_functions"
    ],
    "title": "Abbreviations Unique?"
  },
  {
    "_id": "928sxbEt8gyZ5uBBt",
    "difficulty": 1.5087209302325582,
    "language": "python3",
    "summary": "Wurst is the best. Create a function that takes a string and replaces every mention of any type of sausage with the German word \"Wurst,\" unless—of course—the sausage is already a type of German \"Wurst\" (i.e. \"Bratwurst\", see below), then leave the sausage name unchanged.\n\nGerman Wursts   | Convert to Wurst\n--- | ---\nBratwurst | Kielbasa\nKochwurst | Chorizo\nLeb",
    "tags": [
      "regex",
      "strings"
    ],
    "title": "Wurst Is Better"
  },
  {
    "_id": "QWsXrQzCPegnNyYgg",
    "difficulty": 1.5087719298245614,
    "language": "python3",
    "summary": "Create a function that takes numbers b, m, and n as arguments and returns the definite integral of the function f(x)=(b+1)*x^b with respect to x from x=m to x=n, where b, m, and n are constants.\n\nExamples\nintegral(0, 2, 5) ➞ 3\n\nintegral(2, 4, 7) ➞ 279\n\nintegral(5, 9, 3) ➞ -530712\n\nNotes\n^ in the context of this challenge means \"to the power of\", also known as",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "Integral of a Function"
  },
  {
    "_id": "9BJzrtpdMP8JFQg74",
    "difficulty": 1.5089285714285714,
    "language": "python3",
    "summary": "Create a function that given a list, it returns the index where if split in two-subarrays (last element of the first array has index of (foundIndex-1)), the sum of them are equal.\n\nExamples\ntwins([10, 20, 30, 5, 40, 50, 40, 15]) ➞ 5\nfoundIndex 5 : [10+20+30+5+40]=[50+40+15]\n\ntwins([1, 2, 3, 4, 5, 5]) ➞ 4\n[1, 2, 3, 4] [5, 5]\n\ntwins([3, 3]) ➞ 1\n\nNotes\nReturn onl",
    "tags": [
      "data_structures",
      "algorithms",
      "arrays"
    ],
    "title": "The List Twins"
  },
  {
    "_id": "XGKSYNExDBRWLzDmm",
    "difficulty": 1.509433962264151,
    "language": "python3",
    "summary": "Ok, the challenge is kind of easy, right?\n\nThe problem is not adding, the problem is that the numbers are not in order, create a function that organizes the numbers and adds the numbers in the range between X and Y.\n\nHere is an example:\n\nX = -10 | Y=1\n\nSo this will be the range of numbers:\n\n-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1\n\nThis will be your resul",
    "tags": [
      "algebra",
      "algorithms",
      "language_fundamentals"
    ],
    "title": "Just Another Sum Problem But...  😰😱"
  },
  {
    "_id": "2SPQuzZTskcBpXpv4",
    "difficulty": 1.5100401606425702,
    "language": "python3",
    "summary": "Welcome to part two of the collection for  Computer Science Algorithms. This challenge will deal further with writing recursive functions by covering the Euclidean Algorithm. The \"Euclidean Algorithm\" is a method for finding the greatest common divisor (GCD) of two numbers. It was originally described by the Greek mathematician Euclid.\n\nAlgorithm\nFor the sake",
    "tags": [
      "algorithms",
      "math",
      "logic",
      "recursion"
    ],
    "title": "Algorithms II: The Euclidean Algorithm"
  },
  {
    "_id": "hQRuQguN4bKyM2gik",
    "difficulty": 1.5108695652173914,
    "language": "python3",
    "summary": "Mubashir needs your help in a simple task. Create a function which takes two positive integers a and b. These numbers are simultaneously decreased by 1 until the smaller one reaches 0.\n\nDuring this process, the greater number can be divisible by the smaller one. Your task is to count how many times it will happen.\n\nExample 1\na = 3, b = 5  # 5 is not divisible",
    "tags": [
      "numbers",
      "interview",
      "language_fundamentals",
      "algorithms"
    ],
    "title": "A Simple Check"
  },
  {
    "_id": "iHfq7KA8MBuZqBGgo",
    "difficulty": 1.510948905109489,
    "language": "python3",
    "summary": "Suppose a swimming pool blueprint can be represented as a 2D list, where 1s represent the pool and 0s represent the rest of the backyard.\n\n[[0, 0, 0, 0, 0, 0, 0, 0],\n[0, 1, 1, 1, 1, 1, 0, 0],\n[0, 1, 1, 1, 1, 1, 0, 0],\n[0, 1, 1, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 0, 0, 0, 0]]\nLegitimate\n\nSuppose a pool is considered legitimate if it does not touch any of the four bor",
    "tags": [
      "arrays",
      "higher_order_functions",
      "validation"
    ],
    "title": "Swimming Pool"
  },
  {
    "_id": "J7HPbiP9WRTCteazx",
    "difficulty": 1.5110132158590308,
    "language": "python3",
    "summary": "Write a function that transforms an array into an array of its differences repeatedly until there exists only one element left. A difference is A[n+1] - A[n].\n\nTo illustrate:\n[5, 1, 9, 3, 4, 0]\n\n[-4, 8, -6, 1, -4]\n1 - 5 = -4; 9 - 1 = 8; 3 - 9 = -6; etc.\n\n[12, -14, 7, -5]\n\n[-26, 21, -12]\n\n[47, -33]\n\n-80\n\nExamples\nn_differences([5, 1, 9, 3, 4, 0]) ➞ -80\n\nn_diffe",
    "tags": [
      "arrays",
      "loops"
    ],
    "title": "N Differences"
  },
  {
    "_id": "3pzKWEg5oiaMemDdP",
    "difficulty": 1.5132743362831858,
    "language": "python3",
    "summary": "You call your spouse to inform his/her most precious item is gone! Given a dictionary of stolen items, return the most expensive item on the items.\n\nExamples\nmostexpensiveitem({\n  \"piano\": 2000,\n}) ➞ \"piano\"\n\nmostexpensiveitem({\n  \"tv\": 30,\n  \"skate\": 20,\n}) ➞ \"tv\"\n\nmostexpensiveitem({\n  \"tv\": 30,\n  \"skate\": 20,\n  \"stereo\": 50,\n}) ➞ \"stereo\"\n\nNotes\nThere will",
    "tags": [
      "objects",
      "loops",
      "arrays",
      "math"
    ],
    "title": "Burglary Series (02): Most Valuable Item"
  },
  {
    "_id": "aHGLnfW7xdMrhJZpo",
    "difficulty": 1.5151515151515151,
    "language": "python3",
    "summary": "Wait, a very hard challenge for returning the sum of two numbers? Well in this one, the numbers can have 1000 digits!\n\nSo, what's the twist? You have to do the summation as if you're doing it manually on a piece of paper, thus, the conversion of the numeric string to numeric literal is basically disallowed.\n\nCreate a function that:\nTakes two numbers as strings",
    "tags": [
      "math",
      "algorithms",
      "numbers"
    ],
    "title": "Return the Sum of Two Numbers (With a Twist)"
  },
  {
    "_id": "dqJYvDRTyXzQPGimc",
    "difficulty": 1.515625,
    "language": "python3",
    "summary": "Unfair hurdles are hurdles which are either too high, or way too close together.\n\nCreate a function which takes in a list of strings, representing hurdles, and return whether they are unfair. For the purposes of this challenge, unfair hurdles are:\nAt least 4 characters tall.\nStrictly less than 4 spaces apart.\n\nExamples\nHurdle are good distance apart but are wa",
    "tags": [
      "strings",
      "arrays",
      "validation",
      "logic"
    ],
    "title": "Unfair Hurdles"
  },
  {
    "_id": "SdGE4ZBtuMKyxDqQ6",
    "difficulty": 1.5157894736842106,
    "language": "python3",
    "summary": "Create a function that takes a string and returns the first character that repeats. If there is no repeat of a character, then return \"-1\".\n\nExamples\nfirst_repeat(\"legolas\") ➞ \"l\"\n\nfirst_repeat(\"Gandalf\") ➞ \"a\"\n\nfirst_repeat(\"Balrog\") ➞ \"-1\"\n\nfirst_repeat(\"Isildur\") ➞ \"-1\"\n\nNotes\nTests are case sensitive.",
    "tags": [
      "strings",
      "logic",
      "loops"
    ],
    "title": "Find First Character That Repeats"
  },
  {
    "_id": "kAQT4vMX2iEAcs8uJ",
    "difficulty": 1.5172413793103448,
    "language": "python3",
    "summary": "Given a list of words, return the longest word which can fit on a 7 segment display.\n\nImage of a 7 segment display\n\nLetters which do not fit on a 7 segment display are k, m, v, w and x.\nTherefore, do not count words which include these letters.\n\nExamples\nlongest7segmentword([\"knighthood\", \"parental\", \"fridge\", \"clingfilm\"]) ➞ \"parental\"\n\nlongest7segmentword([\"",
    "tags": [
      "arrays",
      "loops",
      "strings"
    ],
    "title": "Longest Word in a 7 Segment Display"
  },
  {
    "_id": "QDw3YayxCNqGaC9ji",
    "difficulty": 1.5185185185185186,
    "language": "python3",
    "summary": "Create a function that takes an amount of monetary change (e.g. 47 cents) and breaks down the most efficient way that change can be made using USD quarters, dimes, nickels and pennies. Your function should return a dictionary.\n\nCoin | Value\n:--- | :---\nPenny | 0.01\nNickel | 0.05\nDime | 0.10\nQuarter | 0.25\n\nExamples\nmake_change(47) ➞ { \"q\": 1, \"d\": 2, \"n\": 0, \"",
    "tags": [
      "algebra",
      "arrays",
      "loops",
      "math",
      "objects"
    ],
    "title": "Making Change"
  },
  {
    "_id": "NybeH5L7wFPYeynCn",
    "difficulty": 1.5188679245283019,
    "language": "python3",
    "summary": "Given a string, return a sorted list of words formed from the first three letters, then the next three letters, shifting by only one.\n\nWorked Example\nthreelettercollection(\"edabit\") ➞ [\"abi\", \"bit\", \"dab\", \"eda\"]\n1st word: \"eda\"\n2nd word: \"dab\"\n3rd word: \"abi\"\n4th word: \"bit\"\nRemember to sort the list!\n\nExamples\nthreelettercollection(\"slap\") ➞ [\"lap\", \"sla\"]",
    "tags": [
      "loops",
      "strings",
      "arrays",
      "algorithms"
    ],
    "title": "Triple Letter Groupings"
  },
  {
    "_id": "cGqjxKhNqZPZ76zac",
    "difficulty": 1.5196078431372548,
    "language": "python3",
    "summary": "Remember the game Battleship? Ships are floating in a matrix. You have to fire torpedos at their suspected coordinates, to try and hit them.\n\nCreate a function that takes a list of lists (matrix) and a coordinate as a string. If the coordinate contains only water  \".\", return \"splash\" and if the coordinate contains a ship \"*\", return \"BOOM\".\n\nInstruction text",
    "tags": [
      "games",
      "arrays",
      "language_fundamentals",
      "validation"
    ],
    "title": "You Sunk My Battleship!"
  },
  {
    "_id": "TBCujkw9D8hrEgFc4",
    "difficulty": 1.5206489675516224,
    "language": "python3",
    "summary": "Create a function that accepts a string, checks if it's a valid email address and returns either  True or False, depending on the evaluation.\n\nThe string must contain an @ character.\nThe string must contain a . character.\nThe @ must have at least one character in front of it.\n  e.g. \"e@edabit.com\" is valid while \"@edabit.com\" is invalid.\nThe . and the @ must b",
    "tags": [
      "validation",
      "strings",
      "logic",
      "regex"
    ],
    "title": "Basic E-Mail Validation"
  },
  {
    "_id": "kzZD8Xp3EC7bipfxe",
    "difficulty": 1.5219123505976095,
    "language": "python3",
    "summary": "Create a function that outputs the result of a math expression in words.\n\nExamples\nworded_math(\"One plus one\") ➞ \"Two\"\n\nworded_math(\"zero Plus one\") ➞ \"One\"\n\nworded_math(\"one minus one\") ➞ \"Zero\"\n\nNotes\nExpect only the operations plus and minus.\nExpect to only get numbers and answers from 0 to 2.\nThe first letter of the answer must be capitalised.",
    "tags": [
      "strings",
      "math"
    ],
    "title": "One Plus One"
  },
  {
    "_id": "i35wfM7KEdpnK45mD",
    "difficulty": 1.5222929936305734,
    "language": "python3",
    "summary": "Create a function that takes a \"base number\" as an argument. This function should return another function which takes a new argument, and returns the sum of the \"base number\" and the new argument.\n\nPlease check the examples below for a clearer representation of the behavior expected.\n\nExamples\n\nCalling makeplusfunction(5) returns a new function that takes an i",
    "tags": [
      "functional_programming",
      "higher_order_functions",
      "closures"
    ],
    "title": "Function Factory"
  },
  {
    "_id": "cAYMDMFgTHuZJw2o4",
    "difficulty": 1.5224358974358974,
    "language": "python3",
    "summary": "Suppose an image can be represented as a 2D list of 0s and 1s. Create a function to reverse an image. Replace the 0s with 1s and vice versa.\n\nExamples\nreverse_image([\n  [1, 0, 0],\n  [0, 1, 0],\n  [0, 0, 1]\n]) ➞ [\n  [0, 1, 1],\n  [1, 0, 1],\n  [1, 1, 0]\n]\n\nreverse_image([\n  [1, 1, 1],\n  [0, 0, 0]\n]) ➞ [\n  [0, 0, 0],\n  [1, 1, 1]\n]\n\nreverse_image([\n  [1, 0, 0],\n  [1",
    "tags": [
      "arrays",
      "closures",
      "loops"
    ],
    "title": "Negative Image"
  },
  {
    "_id": "oF8T7Apf7jfagC4fD",
    "difficulty": 1.5224719101123596,
    "language": "python3",
    "summary": "In this challenge, you are given a list and in turn, you must obtain a smaller list, following three steps:\n\nSplit the list into two parts of equal length. If the given list has an odd length, then you have to eliminate the number in the middle of the list for obtaining two equal parts.\nSum each number of the first part with each number of the reversed second",
    "tags": [
      "math",
      "arrays",
      "algorithms"
    ],
    "title": "The Antipodes Average"
  },
  {
    "_id": "SQo9Jx5ih2iHG8JAn",
    "difficulty": 1.5227272727272727,
    "language": "python3",
    "summary": "Create a function that expands a number into a string as shown below:\n\n25 ➞ \"20 + 5\"\n70701 ➞ \"70000 + 700 + 1\"\n685 ➞ \"600 + 80 + 5\"\n\nExamples\nexpanded_form(70304) ➞ \"70000 + 300 + 4\"\n\nexpanded_form(1037903) ➞ \"1000000 + 30000 + 7000 + 900 + 3\"\n\nexpanded_form(802539) ➞ \"800000 + 2000 + 500 + 30 + 9\"\n\nNotes\nN/A",
    "tags": [
      "arrays",
      "language_fundamentals",
      "numbers",
      "math"
    ],
    "title": "Expand a Number I"
  },
  {
    "_id": "GJcGhBinX2hr5Wq6m",
    "difficulty": 1.5238095238095237,
    "language": "python3",
    "summary": "Create a function that takes a list lst of numbers and moves all zeros to the end, preserving the order of the other elements.\n\nExamples\nmove_zeros([1, 0, 1, 2, 0, 1, 3]) ➞ [1, 1, 2, 1, 3, 0, 0]\n\nmove_zeros([0, 1, None, 2, false, 1, 0]) ➞ [1, None, 2, false, 1, 0, 0]\n\nmove_zeros(['a', 0, 0, 'b', 'c', 'd', 0, 1, 0, 1, 0, 3, 0, 1, 9, 0, 0, 0, 0, 9]) ➞ ['a', 'b',",
    "tags": [
      "arrays",
      "interview",
      "sorting"
    ],
    "title": "Move Zeroes"
  },
  {
    "_id": "covbapJ32obi9PuSy",
    "difficulty": 1.5238095238095237,
    "language": "python3",
    "summary": "Create a function that returns an array that expands by 1 from 1 to the value of the input, and then reduces back to 1. Items in the lists will be the same as the length of the lists.\n\nExamples\ndiamond_arrays(1) ➞ [[1]]\n\ndiamond_arrays(2) ➞ [[1], [2, 2], [1]]\n\ndiamond_arrays(5) ➞ [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4], [5, 5, 5, 5, 5], [4, 4, 4, 4], [3, 3, 3],",
    "tags": [
      "arrays",
      "loops",
      "numbers"
    ],
    "title": "Diamond Shaped Array"
  },
  {
    "_id": "uCGpBF99YYJNv6q7L",
    "difficulty": 1.5241379310344827,
    "language": "python3",
    "summary": "Write the regular expression that matches all the words in the string bellow. Use dot . in your expression.\n\nExample\npattern = \"yourregularexpressionhere\"\ntxt = \"eta, edu, etc, ele, epa, eye, exe, emf, ete, eon, era\"\n\nre.findall(pattern, txt) ➞ [\"eta\", \"edu\", \"etc\", \"ele\", \"epa\", \"eye\", \"exe\", \"emf\", \"ete\", \"eon\", \"era\"]\n\nNotes\nYou don't need to write a functi",
    "tags": [
      "language_fundamentals",
      "formatting",
      "regex"
    ],
    "title": "RegEx IX: Dot"
  },
  {
    "_id": "do3MBKp3AqnnnCBMQ",
    "difficulty": 1.524390243902439,
    "language": "python3",
    "summary": "Create a function that produces a random number that contains all numbers from one to five, without any duplicates.\n\nExamples\n12345\n\n21345\n\n51234\n\nNotes\nN/A",
    "tags": [
      "algorithms",
      "loops",
      "logic",
      "math",
      "numbers"
    ],
    "title": "Random Number Generator"
  },
  {
    "_id": "aEMgdg3zgznbnDMpz",
    "difficulty": 1.5263157894736843,
    "language": "python3",
    "summary": "Some characters do not change after a rotation of 180 degrees. They can be read, although sometimes in a different way. For example, uppercase letters \"H\", \"I\", \"N\", \"O\", \"S\", \"X\", \"Z\" after rotation are not changed, the letter \"M\" becomes a \"W\", and vice versa.\n\nSo, the word \"WOW\" turns into the word \"MOM\". On the other hand, the word \"HOME\" cannot be rotated",
    "tags": [
      "strings",
      "validation",
      "regex",
      "logic"
    ],
    "title": "Rotated Words"
  },
  {
    "_id": "kPKNb4c3QjCf5tHRM",
    "difficulty": 1.5265957446808511,
    "language": "python3",
    "summary": "In this question you will be given a table as below, where the first row lists the names of products, and each of row after that lists the sales of the product for each day (over some time range).\n\n[\n  [\"A\", \"B\", \"C\"],\n  [ 2 ,  7 ,  1 ],\n  [ 3 ,  6 ,  6 ],\n  [ 4 ,  5 ,  5 ]\n]\n\nWrite a function that receives:\nA sales table sales_table as shown above.\nThe name o",
    "tags": [
      "arrays",
      "data_structures",
      "language_fundamentals",
      "loops"
    ],
    "title": "Total Sales of Product"
  },
  {
    "_id": "jyqcRv6giw8an8KB2",
    "difficulty": 1.5277777777777777,
    "language": "python3",
    "summary": "Write a function that takes a string input and returns the string in a reversed case and order.\n\nExamples\ninvert(\"dLROW YM sI HsEt\") ➞ \"TeSh iS my worlD\"\n\ninvert(\"ytInIUgAsnOc\") ➞ \"CoNSaGuiNiTY\"\n\ninvert(\"step on NO PETS\") ➞ \"step on NO PETS\"\n\ninvert(\"XeLPMoC YTiReTXeD\") ➞ \"dExtErIty cOmplEx\"\n\nNotes\nNo empty strings and will neither contain special characters n",
    "tags": [
      "arrays",
      "strings",
      "loops",
      "language_fundamentals"
    ],
    "title": "Case and Index Inverter"
  },
  {
    "_id": "KspbYHCtFZCcav7zx",
    "difficulty": 1.5303030303030303,
    "language": "python3",
    "summary": "The facts are:\n\nYou've just finished dinner.\nYou love spicy food but your friend hates it.\n\nGiven your friend's unfortunate taste preferences, you decide to split the bill only for non-spicy items. You will pay in full for the spicy dishes.\n\nGiven two ordered lists, one classifying the dishes as spicy vs. non-spicy and the other listing their prices, write a f",
    "tags": [
      "arrays",
      "higher_order_functions"
    ],
    "title": "Spicy Food"
  },
  {
    "_id": "CXtsRKiRyAcGe2iEj",
    "difficulty": 1.530612244897959,
    "language": "python3",
    "summary": "POV: You are in an exam and time has just run out. While the teacher's back is turned, you hastily take the opportunity to finish scribbling down the last few words of the conclusion.\n\nFor this challenge, it takes 0.5 seconds to write a character (not including spaces). Given the full sentence and the unfinished sentence as inputs, return the time it takes to",
    "tags": [
      "strings",
      "loops"
    ],
    "title": "Finish the Sentence You're On!"
  },
  {
    "_id": "frRRffQGSrPTknfxY",
    "difficulty": 1.530612244897959,
    "language": "python3",
    "summary": "Given a number, create a function that returns a new number based on these rules:\nFor each digit, replace it by the number of times it appears in the number.\nThe final instance of the number will be an integer, not a string.\n\nWorked Example\ndigit_count(136116) ➞ 312332\nThe number 1 appears thrice, so replace all 1s with 3s.\nThe number 3 appears only once, so r",
    "tags": [
      "numbers",
      "language_fundamentals",
      "loops"
    ],
    "title": "Keeping Count"
  },
  {
    "_id": "hD8vgeNkjXy5trX6h",
    "difficulty": 1.530909090909091,
    "language": "python3",
    "summary": "Create a function that returns all combinations of size n from a list. Sort the list in ascending lexicographical order.\n\nExamples\ncombo([1, 2, 3, 4], 1) ➞ [[1], [2], [3], [4]]\n\ncombo([1, 2, 3, 4], 2) ➞ [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n\ncombo([1, 2, 3, 4], 5) ➞ []\n\ncombo([1, 2, 3, 4], 0) ➞ [[]]\n\nNotes\nLexicographical order: Compare the first el",
    "tags": [
      "arrays",
      "language_fundamentals"
    ],
    "title": "Generate N-Size Combinations from a List"
  },
  {
    "_id": "gfo2RDnW7atsvQqnY",
    "difficulty": 1.5310880829015545,
    "language": "python3",
    "summary": "Create a function that takes a list of strings and return the number of smiley faces contained within it. These are the components that make up a valid smiley:\nA smiley has eyes. Eyes can be : or ;.\nA smiley has a nose but it doesn't have to. A nose can be - or ~.\nA smiley has a mouth which can be ) or D.\n\nNo other characters are allowed except for those menti",
    "tags": [
      "strings",
      "regex",
      "loops"
    ],
    "title": "Count the Smiley Faces  :)"
  },
  {
    "_id": "AjZBGWyPaA7rXFhi6",
    "difficulty": 1.532,
    "language": "python3",
    "summary": "Write a function that returns the minimum number of swaps to convert the first binary string into the second.\n\nExamples\nmin_swaps(\"1100\", \"1001\") ➞ 1\n\nmin_swaps(\"110011\", \"010111\") ➞ 1\n\nmin_swaps(\"10011001\", \"01100110\") ➞ 4\n\nNotes\nBoth binary strings will be of equal length.\nBoth binary strings will have an equal number of zeroes and ones.\nA swap is switching",
    "tags": [
      "strings",
      "logic",
      "recursion",
      "loops"
    ],
    "title": "Converting One Binary String to Another"
  },
  {
    "_id": "6pjjWy5ST2eMKtGkh",
    "difficulty": 1.533112582781457,
    "language": "python3",
    "summary": "Write a function that replaces all letters within a specified range with the hash symbol #.\n\nExamples\nreplace(\"abcdef\", \"c-e\") ➞ \"ab###f\"\n\nreplace(\"rattle\", \"r-z\") ➞ \"#a##le\"\n\nreplace(\"microscopic\", \"i-i\") ➞ \"m#croscop#c\"\n\nreplace(\"\", \"a-z\") ➞ \"\"\n\nNotes\nThe range will always be in order, a.k.a. for m-n, character m will always come before or equal n.\nStrings w",
    "tags": [
      "language_fundamentals",
      "strings"
    ],
    "title": "Replacing Letters with Hashes"
  },
  {
    "_id": "uerTkWm9K3oMtMZKz",
    "difficulty": 1.533112582781457,
    "language": "python3",
    "summary": "Create a function which takes a list of objects from the class IceCream and returns the sweetness value of the sweetest icecream. Note that there is a class is provided for you in the Tests tab.\n\nclass IceCream:\n  def init(self, flavor, num_sprinkles):\n    self.flavor = flavor\n    self.numsprinkles = numsprinkles\n\nEach sprinkle has a sweetness value of 1\nCheck",
    "tags": [
      "objects",
      "classes",
      "numbers"
    ],
    "title": "The Sweetest Ice Cream"
  },
  {
    "_id": "NQToxLLFCjugHWBoZ",
    "difficulty": 1.5333333333333334,
    "language": "python3",
    "summary": "Write a function that sorts a list of characters alphabetically in ascending order (a-z) by the character at the n-th character.\n\nExamples\nsortbycharacter([\"az16\", \"by35\", \"cx24\"], 2) ➞ [\"cx24\", \"by35\", \"az16\"]\n// By 2nd character: [\"x\", \"y\", \"z\"] is in alphabetical order.\n\nsortbycharacter([\"mayor\", \"apple\", \"petal\"], 5) ➞ [\"apple\", \"petal\", \"mayor\"]\nBy 5th ch",
    "tags": [
      "sorting",
      "arrays"
    ],
    "title": "Sort By Index of Character"
  },
  {
    "_id": "mwicBKcq3gTGhsGsW",
    "difficulty": 1.5333333333333334,
    "language": "python3",
    "summary": "What does the word LFAND represent? It represents the word Finland, because F is in  LAND!\n\nCreate a function which replicates this to create brand new original word riddles! For the purposes of this challenge, take the string of letters before the word \"in\", and insert it into the 2nd letter position of the word formed after the word \"in\".\n\nSee the examples b",
    "tags": [
      "strings",
      "language_fundamentals"
    ],
    "title": "Word Riddles"
  },
  {
    "_id": "23htQEtZobC8cfwcm",
    "difficulty": 1.5342019543973942,
    "language": "python3",
    "summary": "Create a function that returns True if smaller lists can concatenate to form the target list and False otherwise.\n\nExamples\ncanConcatenate([[1, 2, 3, 4], [5, 6], [7]], [1, 2, 3, 4, 5, 6, 7]) ➞ True\n\ncanConcatenate([[2, 1, 3], [5, 4, 7, 6]], [7, 6, 5, 4, 3, 2, 1]) ➞ True\n\ncanConcatenate([[2, 1, 3], [5, 4, 7, 6, 7]], [1, 2, 3, 4, 5, 6, 7]) ➞ False\nDuplicate 7s n",
    "tags": [
      "arrays",
      "sorting",
      "validation"
    ],
    "title": "Concatenate to Form Target List"
  },
  {
    "_id": "WkuuwqySmcPDncxDs",
    "difficulty": 1.5342465753424657,
    "language": "python3",
    "summary": "For each challenge of this series you do not need to submit a function. Instead, you need to submit a template string that can formatted in order to get a certain outcome.\n\nWrite a template string according to the following example. All final strings must have a length of 20 characters:\n\nExample\ntemplate = \"yourtemplatestringhere\"\ntemplate.format(fname = \"John",
    "tags": [
      "strings",
      "formatting",
      "language_fundamentals"
    ],
    "title": "Format VII: Truncating Strings"
  },
  {
    "_id": "RqhLJk82ySnmxxJBi",
    "difficulty": 1.5384615384615385,
    "language": "python3",
    "summary": "A number num, that elevated to the power of another number k \"ends\" with the same num, it's automorphic.\n\n5² = 25\nIt's automorphic because \"25\" ends with \"5\"\n\n5³  = 125\nIt's automorphic because \"125\" ends with \"5\"\n\n76⁴ = 33362176\nIt's automorphic because \"33362176\" ends with \"76\"\n\nA number can have various powers that make it automorphic (i.e. look at number 5",
    "tags": [
      "numbers",
      "logic",
      "conditions",
      "loops"
    ],
    "title": "Numerical Morphisms"
  },
  {
    "_id": "F64txHnfYj4e4MpAN",
    "difficulty": 1.5396825396825398,
    "language": "python3",
    "summary": "The Russian schoty is type of abacus (counting tool) that is used by sliding threaded beads along horizontal wires. An example schoty would have 7 wires, each holding 10 beads. Each bead, when moved to the left, would count as 1 unit. Starting from the bottom wire and moving up, the units increase by a factor of 10. If we use \"O\" for a bead and \"-\" to show the",
    "tags": [
      "strings",
      "arrays",
      "loops"
    ],
    "title": "Read the Abacus (Part 1: Russian Schoty)"
  },
  {
    "_id": "EPXH424t2SSjMzms5",
    "difficulty": 1.5403508771929824,
    "language": "python3",
    "summary": "Create a function that takes both a string and a list of integers as arguments. Rearrange the letters in the string to be in the order specified by the index numbers. Return the \"remixed\" string.\n\nExamples\nremix(\"abcd\", [0, 3, 1, 2]) ➞ \"acdb\"\n\nThe string you'll be returning will have: \"a\" at index 0, \"b\" at index 3, \"c\" at index 1, \"d\" at index 2, because the ",
    "tags": [
      "strings",
      "arrays",
      "formatting",
      "loops"
    ],
    "title": "Remix the String"
  },
  {
    "_id": "e9bCjrGRzDtr6CfNm",
    "difficulty": 1.5405405405405406,
    "language": "python3",
    "summary": "Consider the equation ax-b=bx-3a+4 where a and b are constants. Create a function that takes numbers a and b as arguments, and returns the solution of the equation.\n\nIf the equation does not have a solution, return \"No solution\".\nIf any number satisfies the equation, return \"Any number\".\n\nExamples\nsolve(1, 2) ➞ -3.0\n\nsolve(-4, -6) ➞ 5.0\n\nsolve(4, 1) ➞ -2.333",
    "tags": [
      "algebra",
      "math"
    ],
    "title": "Solving Linear Equations (Part 2)"
  },
  {
    "_id": "6CvfzetG9PNG9ANPu",
    "difficulty": 1.5416666666666667,
    "language": "python3",
    "summary": "In Mubashir Cipher, encoding is done by simply replacing paired letters from the provided key.\n\nCreate a function that takes a string containing the message to be encoded with a fixed given 2D list of letters key.\n\nThere are some variations on the rules of encipherment. One version of the cipher rules are outlined below:\n\nkey = [['m', 'c'], ['u', 'e'], ['b', '",
    "tags": [
      "algorithms",
      "cryptography",
      "logic",
      "strings",
      "loops"
    ],
    "title": "Mubashir Cipher"
  },
  {
    "_id": "A9iPfSEZ9fCrPQSwC",
    "difficulty": 1.5426356589147288,
    "language": "python3",
    "summary": "Count the amount of coordinates on a two-dimensional grid that are inside a given circle. The function has four arguments: the points (provided as a list of dictionaries), the circle's center x, y and the circle's radius.\n\nExamples\npointsincircle([\n  { \"x\": 0, \"y\": 0 },\n  { \"x\": 1, \"y\": 1 },\n  { \"x\": 0, \"y\": 5 },\n  { \"x\": 10, \"y\": 10 }\n], 0, 0, 5) ➞ 2\n\nNotes\nO",
    "tags": [
      "math",
      "arrays"
    ],
    "title": "Count the Points in a Circle"
  },
  {
    "_id": "qLMZ2hEvrhRSSSnQw",
    "difficulty": 1.5448275862068965,
    "language": "python3",
    "summary": "Graded lexicographic order (grlex order for short) is a way of ordering words that:\n\nFirst orders words by length.\nThen orders words of the same size by their dictionary order.\n\nFor example, in grlex order:\n\"tray\" < \"trapped\" since \"tray\" has lenght 4 while \"trapped\" has lenght 7.\n\"trap\" < \"tray\" since both have lenght 4, but \"trap\" comes before \"tray\" in the",
    "tags": [
      "math",
      "sorting",
      "strings",
      "conditions"
    ],
    "title": "Order by Length First"
  },
  {
    "_id": "SFAjxGWk9AbfwbXFN",
    "difficulty": 1.546218487394958,
    "language": "python3",
    "summary": "Create a function that will find all primes below a given number. Return the result as a list.\n\nExamples\nprimesbelownum(5) ➞ [2, 3, 5]\n\nprimesbelownum(10) ➞ [2, 3, 5, 7]\n\nprimesbelownum(20) ➞ [2, 3, 5, 7, 11, 13, 17, 19]\n\nNotes\nIf n is a prime, include it in the list.",
    "tags": [
      "algebra",
      "math",
      "numbers",
      "loops"
    ],
    "title": "Primes Below a Given Number"
  },
  {
    "_id": "9Q5nsEy2E2apYHwX8",
    "difficulty": 1.5485232067510548,
    "language": "python3",
    "summary": "In this challenge, you will learn about classes in python.\n\nPython classes are easy to understand. They are almost the same as JavaScript classes, with a different syntax and different constructor function names. Constructors define some variables in your class; in Python that is def init (self). Other functions are defined the same as normal.\n\nI want you to c",
    "tags": [
      "classes",
      "language_fundamentals"
    ],
    "title": "Python Classes Mini Challenge"
  },
  {
    "_id": "K4aKGbfmzgyNNYEcM",
    "difficulty": 1.5486111111111112,
    "language": "python3",
    "summary": "Given the number n and a list of interior angles angles, return whether or not it's possible to make a convex polygon with n sides with the angles given. Remember that angles must be under 180°.\n\nisshapepossible(3, [80, 70, 30]) ➞ True\n\nTriangle with the angles 80, 70 and 30\n\nA shape with 3 sides and the angles 80°, 70° and 30° is a possible shape.\n\nExamples\ni",
    "tags": [
      "validation",
      "math"
    ],
    "title": "A Possible Shape?"
  },
  {
    "_id": "pDmDP9KhXmBTcScT6",
    "difficulty": 1.548780487804878,
    "language": "python3",
    "summary": "Create a function that takes an email address and returns the name in the address.\n\nThe \"name\" is the letters/alphabetical characters before the @ in the address.\nThe \"name\" will not always be an actual name.\nEmail addresses will end in something like @domain.com\n\nExamples\nget_name(\"yourname@example.com\") ➞ \"yourname\"\n\nget_name(\"john64@gmail.com\") ➞ \"john\"\n\nge",
    "tags": [
      "logic",
      "strings"
    ],
    "title": "Retrieve Name from Email Address"
  },
  {
    "_id": "ic9aKYukaRH2MjDyk",
    "difficulty": 1.548951048951049,
    "language": "python3",
    "summary": "Create a function that takes a string of words and return a string sorted alphabetically by the last character of each word.\n\nExamples\nsortbylast(\"herb camera dynamic\") ➞ \"camera herb dynamic\"\n\nsortbylast(\"stab traction artist approach\") ➞ \"stab approach traction artist\"\n\nsortbylast(\"sample partner autonomy swallow trend\") ➞ \"trend sample partner swallow auton",
    "tags": [
      "strings",
      "sorting"
    ],
    "title": "Sort a String by Its Last Character"
  },
  {
    "_id": "yqeCTqSemWx5rJ7LZ",
    "difficulty": 1.5490196078431373,
    "language": "python3",
    "summary": "Given a string containing a key signature written in shorthand, create a function which replaces the shorthand with its full written name.\n\nA lowercase letter denotes a minor key.\nAn uppercase letter denotes a major key.\n\nSee the examples below for a more helpful guide!\n\nExamples\nfullkeyname(\"Prelude in C\") ➞ \"Prelude in C major\"\n\nfullkeyname(\"Fugue in c\") ➞ \"",
    "tags": [
      "strings",
      "formatting"
    ],
    "title": "Shorthand for Key Signatures"
  },
  {
    "_id": "gexKmNTD65LihEQKC",
    "difficulty": 1.5492957746478873,
    "language": "python3",
    "summary": "Arun was playing random games with numbers, and he realized that four is a number whose English reformation (i.e. FOUR, also has four letters). He noticed an interesting pattern.\n\nArun starts with a few chosen strings and lands upon a number that has the same number of letters in it as the magnitude of the number (e.g. Alienware-Computers has nineteen letters",
    "tags": [
      "language_fundamentals",
      "interview",
      "math",
      "validation"
    ],
    "title": "Arun's Super Cool Strings"
  },
  {
    "_id": "DnDLacMAgrxrq8mc3",
    "difficulty": 1.549738219895288,
    "language": "python3",
    "summary": "Create a function which replaces the last n words with \"blah\". Add \"...\" to the last blah.\n\nExamples\nblah_blah(\"A function is a block of code which only runs when it is called\",  5) ➞ \"A function is a block of code which only blah blah blah blah blah...\"\n\nblah_blah(\"one two three four five\", 2) ➞ \"one two three blah blah...\"\n\nblah_blah(\"Sphinx of black quartz",
    "tags": [
      "strings",
      "formatting"
    ],
    "title": "Blah, Blah, Blah..."
  },
  {
    "_id": "mYGipMffRTYxYmv5i",
    "difficulty": 1.55,
    "language": "python3",
    "summary": "Mubashir needs your help to make a simple equation. Create a function which takes three numbers: a, b and c, and returns an equation as a string using simple arithmetic operators (+, -, *, /).\n\nReturn any one of the possible answers to pass the tests. If there is no equation between a,b and c then return \"\".\n\nExamples\nsimple_equation(1, 2, 3) ➞ \"1+2=3\" or \"2+1",
    "tags": [
      "algorithms",
      "algebra",
      "math",
      "numbers"
    ],
    "title": "A Simple Equation"
  },
  {
    "_id": "59kkN3yDnFKHYfgMm",
    "difficulty": 1.55,
    "language": "python3",
    "summary": "Given a string, return if a given letter always appears immediately before another given letter.\n\nWorked Example\nbest_friend(\"he headed to the store\", \"h\", \"e\") ➞ True\n\nAll occurences of \"h\": [\"he\", \"headed\", \"the\"]\nAll occurences of \"h\" have an \"e\" after it.\nReturn True\n\nExamples\nbest_friend(\"he headed to the store\", \"h\", \"e\") ➞ True\n\nbest_friend(\"i found an",
    "tags": [
      "strings",
      "loops",
      "regex"
    ],
    "title": "A Letter's Best Friend"
  },
  {
    "_id": "exeY2wDuEW4rFeYvL",
    "difficulty": 1.550420168067227,
    "language": "python3",
    "summary": "Create an ordered 2D list (matrix). A matrix is ordered if its (0, 0) element is 1, its (0, 1) element is 2, and so on. Your function needs to create an a × b matrix. a is the first argument and b is the second.\n\nExamples\nordered_matrix(5, 5) ➞ [\n  [1 ,2 ,3 ,4 ,5],\n  [6 ,7 ,8 ,9 ,10],\n  [11, 12, 13, 14, 15],\n  [16, 17, 18, 19, 20],\n  [21, 22, 23, 24, 25]\n]\n\nor",
    "tags": [
      "arrays",
      "math"
    ],
    "title": "An Ordered Matrix"
  },
  {
    "_id": "TJHwPqtA7DRGKJitB",
    "difficulty": 1.5508982035928143,
    "language": "python3",
    "summary": "In probability theory, a probability matrix is a matrix such that:\nThe matrix is a square matrix (same number of rows as columns).\nAll entries are probabilities, i.e. numbers between 0 and 1.\nAll rows add up to 1.\n\nThe following is an example of a probability matrix:\n[\n  [0.5, 0.5, 0.0],\n  [0.2, 0.5, 0.3],\n  [0.1, 0.2, 0.7]\n]\nNote that though all rows add up t",
    "tags": [
      "arrays",
      "math",
      "numbers",
      "validation"
    ],
    "title": "Is it a Probability Matrix?"
  },
  {
    "_id": "NwjjtsruLzTxEgAkL",
    "difficulty": 1.5514018691588785,
    "language": "python3",
    "summary": "Indira first year computer science student is taking an intro to RegEx class. Her professor gives her the assignment to write a function that checks whether an input date as a string is in the format yyyy/mm/dd. She has written a regular expression but the regular expression does not seem to be correct. Help her fix the error.\n\nExamples\nassignment(\"12/1/1\") ➞",
    "tags": [
      "regex",
      "strings",
      "bugs",
      "validation"
    ],
    "title": "Bug: Regular Expression"
  },
  {
    "_id": "bTQyk8xSumqLSzeXX",
    "difficulty": 1.5517241379310345,
    "language": "python3",
    "summary": "There has been a masterdata issue which affected the prices of the products. All prices need to be checked if they are a valid number and zero or higher (>= 0). Products with a price of 0 are free and is a valid price.\n\nThe return value should be a Boolean.\n\nExamples\nhasvalidprice({ \"product\": \"Milk\", 'price': 1.50 }) ➞ True\n\nhasvalidprice({ \"product\": \"Cheese",
    "tags": [
      "bugs",
      "conditions",
      "control_flow",
      "logic"
    ],
    "title": "Find the Bugs: Returning Valid Prices"
  },
  {
    "_id": "bRWLNW6MvsJWW2iQC",
    "difficulty": 1.553191489361702,
    "language": "python3",
    "summary": "Write three regular expressions: one called \"nothing\" that will match only an empty string, one called \"anything\" that will match any string empty or not, and one called \"something\" that will match non-empty strings only.\n\nExample\ntxt1 = \"\"\ntxt2 = \"This is not an empty string.\"\n\nnothing = \"yourregularexpressionhere\"\nanything = \"yourregularexpressionhere\"\nsomet",
    "tags": [
      "regex"
    ],
    "title": "RegEx Exercise #0: Existentialism"
  },
  {
    "_id": "FjiriGn8gc5RE8Xm2",
    "difficulty": 1.554054054054054,
    "language": "python3",
    "summary": "Write a function that takes fuel (liters), fuelusage (liters/100km), passengers, aircon (boolean) and returns maximum distance that car can travel.\n\nfuel is the number of liters of fuel in the fuel tank.\nfuel_usage is basic fuel consumption per 100 km (with the driver inside only).\nEvery additional passenger is increasing basic fuel consumption by 5%.\nIf the a",
    "tags": [
      "algebra",
      "algorithms",
      "math",
      "numbers"
    ],
    "title": "Maximum Travel Distance"
  },
  {
    "_id": "Gdoh8rdoaB9jJLLAn",
    "difficulty": 1.5543478260869565,
    "language": "python3",
    "summary": "Create a function that takes an expression exp and an upper limit i as arguments and returns the sum of that expression up to the i'th term (recall sigma from math class).\n\nExamples\nsummation(\"n\", 10) ➞ 55\n\nsummation(\"1/n\", 50) ➞ 4.5\n\nsummation(\"n**n\", 6) ➞ 50069\n\nNotes\nAssume the lower limit is  i = 1.\nRound your answer to the nearest tenth.",
    "tags": [
      "math",
      "loops"
    ],
    "title": "Summation of the First n Terms"
  },
  {
    "_id": "wW2z9bRi2bTeAbcqY",
    "difficulty": 1.5555555555555556,
    "language": "python3",
    "summary": "Consider the equation ax+1=b+x where a and b are constants. Create a function that takes numbers a and b as arguments, and returns the solution of the equation.\nIf the equation does not have a solution, return \"No solution\".\nIf any number satisfies the equation, return \"Any number\".\n\nExamples\nsolve(4, 7) ➞ 2.0\n\nsolve(9, 5) ➞ 0.5\n\nsolve(12, -4) ➞ -0.455\n\nNotes",
    "tags": [
      "algebra",
      "math"
    ],
    "title": "Solving Linear Equations (Part 1)"
  },
  {
    "_id": "TTdhB3jbKFxb3bDXv",
    "difficulty": 1.5560538116591929,
    "language": "python3",
    "summary": "Create two functions: a left-shift function and a right-shift function. Each function will take in a list and a single parameter: the number of shifts.\n\n[1, 2, 3, 4, 5]\n\n[2, 3, 4, 5, 1]  # left shift of 1\n[5, 1, 2, 3, 4]  # left shift of 4\n\n[5, 1, 2, 3, 4]  # right shift of 1\n[3, 4, 5, 1, 2]  # right shift of 3\n\nExamples\nleft_shift([1, 2, 3, 4], 1) ➞ [2, 3, 4,",
    "tags": [
      "arrays",
      "language_fundamentals"
    ],
    "title": "Left, Right Shift"
  },
  {
    "_id": "nh3daaT8LHbv8mKXA",
    "difficulty": 1.5560747663551402,
    "language": "python3",
    "summary": "Create a program that converts a phone number with letters to one with only numbers.\n\nNumber | Letter\n--- | ---\n0 | none\n1 | none\n2 | ABC\n3 | DEF\n4 | GHI\n5 | JKL\n6 | MNO\n7 | PQRS\n8 | TUV\n9 | WXYZ\n\nExamples\ntexttonum(\"123-647-EYES\") ➞ \"123-647-3937\"\n\ntexttonum(\"(325)444-TEST\") ➞ \"(325)444-8378\"\n\ntexttonum(\"653-TRY-THIS\") ➞ \"653-879-8447\"\n\ntexttonum(\"435-224-761",
    "tags": [
      "formatting",
      "language_fundamentals",
      "strings",
      "regex"
    ],
    "title": "Phone Number Word Decoder"
  },
  {
    "_id": "CqNoAPcQrckobTacs",
    "difficulty": 1.5562913907284768,
    "language": "python3",
    "summary": "Create a function that takes a list of increasing letters and return the missing letter.\n\nExamples\nmissing_letter([\"a\", \"b\", \"c\", \"e\", \"f\", \"g\"]) ➞ \"d\"\n\nmissing_letter([\"O\", \"Q\", \"R\", \"S\"]) ➞ \"P\"\n\nmissing_letter([\"t\", \"u\", \"v\", \"w\", \"x\", \"z\"]) ➞ \"y\"\n\nmissing_letter([\"m\", \"o\"]) ➞ \"n\"\n\nNotes\nTests will always have exactly one letter missing.\nThe length of the te",
    "tags": [
      "math",
      "arrays",
      "algorithms"
    ],
    "title": "Find the Missing Letter"
  },
  {
    "_id": "hZi6AhWEzGASB7tWR",
    "difficulty": 1.5566343042071198,
    "language": "python3",
    "summary": "Write a function that takes a list and determines whether it's strictly increasing, strictly decreasing, or neither.\n\nExamples\ncheck([1, 2, 3]) ➞ \"increasing\"\n\ncheck([3, 2, 1]) ➞ \"decreasing\"\n\ncheck([1, 2, 1]) ➞ \"neither\"\n\ncheck([1, 1, 2]) ➞ \"neither\"\n\nNotes\nThe last example does NOT count as strictly increasing, since 1-indexed 1 is not strictly greater than ",
    "tags": [
      "arrays",
      "conditions",
      "control_flow",
      "loops"
    ],
    "title": "Strictly Increasing or Decreasing"
  },
  {
    "_id": "9ED9zbHHhaPaBz2xi",
    "difficulty": 1.5588235294117647,
    "language": "python3",
    "summary": "Consider a sequence where the first two numbers are 0 and 1 and the next number of the sequence is the sum of the previous two numbers modulo three.\n\nCreate a function that finds the nth element of the sequence.\n\nExamples\nnormal_sequence(1) ➞ 0\n\nnormal_sequence(2) ➞ 1\n\nnormal_sequence(3) ➞ 1\n(0+1)%3 = 1\n\nnormal_sequence(20) ➞ 2\n\nNotes\n1 ≤ N ≤ 10^19\nA hint in c",
    "tags": [
      "algorithms",
      "logic",
      "math",
      "numbers"
    ],
    "title": "A Normal Sequence"
  },
  {
    "_id": "8NyNftbNXd6CZCDXf",
    "difficulty": 1.5593220338983051,
    "language": "python3",
    "summary": "Let's say that there exists a machine that gives out free coins, but with a twist!\n\nSeparating two people is a wall, and this machine is placed in such a way that both people are able to access it. Spending a coin in this machine will give the person on the other side 3 coins and vice versa.\n\nIf both people continually spend coins for each other (SHARING), the",
    "tags": [
      "loops",
      "algorithms",
      "interview",
      "language_fundamentals"
    ],
    "title": "Coin Co-Operation"
  },
  {
    "_id": "smLmHK89zNoeaDSZp",
    "difficulty": 1.559375,
    "language": "python3",
    "summary": "A country can be said as being big if it is:\nBig in terms of population.\nBig in terms of area.\n\nAdd to the Country class so that it contains the attribute is_big. Set it to True if either criterea are met:\nPopulation is greater than 250 million.\nArea is larger than 3 million square km.\n\nAlso, create a method which compares a country's population density to ano",
    "tags": [
      "classes",
      "objects",
      "math"
    ],
    "title": "Big Countries"
  },
  {
    "_id": "czjjch48tZYjTDmtH",
    "difficulty": 1.5602409638554218,
    "language": "python3",
    "summary": "For this task, you will write two validators.\n\nShift Validator: When each element is translated (added or subtracted) by a constant.\nMultiple Validator: When each element is multiplied (by a positive or negative number) by a constant.\n\nA few examples to illustrate these respective functions:\n\nExamples\nis_shifted([1, 2, 3], [2, 3, 4]) ➞ True\nEach element is shi",
    "tags": [
      "validation",
      "higher_order_functions"
    ],
    "title": "Shift and Multiple Validators"
  },
  {
    "_id": "4bX7qAqELq9XJeB26",
    "difficulty": 1.560693641618497,
    "language": "python3",
    "summary": "Create a function that converts dash/underscore delimited words into camel casing. The first word within the output should be capitalized only if the original word was capitalized.\n\nExamples\ntocamelcase(\"A-B-C\") ➞ \"ABC\"\n\ntocamelcase(\"the-stealth-warrior\") ➞ \"theStealthWarrior\"\n\ntocamelcase(\"TheStealthWarrior\") ➞ \"TheStealthWarrior\"\n\nNotes\nAn empty string as in",
    "tags": [
      "strings",
      "formatting",
      "regex"
    ],
    "title": "Convert String to camelCase"
  },
  {
    "_id": "Yfm3h3nT3apARd4gC",
    "difficulty": 1.5614035087719298,
    "language": "python3",
    "summary": "Create a function that takes a list consisting of dice rolls from 1-6. Return the sum of your rolls with the following conditions:\n\nIf a 1 is rolled, that is bad luck. The next roll counts as 0.\nIf a 6 is rolled, that is good luck. The next roll is multiplied by 2.\nThe list length will always be 3 or higher.\n\nExamples\nrolls([1, 2, 3]) ➞ 4\nThe second roll, 2, c",
    "tags": [
      "algorithms",
      "conditions",
      "games",
      "math"
    ],
    "title": "Dice Gambling"
  },
  {
    "_id": "H6J4o4jqGbffYXe3Y",
    "difficulty": 1.5616438356164384,
    "language": "python3",
    "summary": "Write a function which takes a list of numbers and returns a list of tuples that is a subset of product of the list with itself and first member of each tuple is less than or equall to the second one.\n\nIn mathematical terms:\n\nA x A = {(x,y)| x∈A and y∈A}\n\n{(x,y)| x>=y, (x,y) ∈ A x A }\n\nExamples\nrelation_list([0, 1, 2, 3]) ➞ [(0, 0), (0, 1), (0, 2), (0, 3), (1,",
    "tags": [
      "math",
      "loops"
    ],
    "title": "Subset of a Cartasian Product"
  },
  {
    "_id": "iG5vcwd282T4t7h6r",
    "difficulty": 1.5625,
    "language": "python3",
    "summary": "Create a function that takes a list of strings and returns a dictionary.\n\nExamples\nstrtodict([\"1=one\", \"2=two\", \"3=three\", \"4=four\"]) ➞ {\"1\": \"one\", \"2\": \"two\", \"3\": \"three\", \"4\": \"four\"}\n\nstrtodict([\"dog=bark\", \"cat=meow\", \"cow=moo\"]) ➞ {\"dog\": \"bark\", \"cat\": \"meow\", \"cow\": \"moo\"}\n\nstrtodict([\"bob=human\", \"lola=dog\", \"mittens=cat\", \"todd=frog\"]) ➞ {\"bob\": \"hu",
    "tags": [
      "data_structures",
      "arrays",
      "sorting"
    ],
    "title": "String to Dictionary"
  },
  {
    "_id": "dYHH7CmYeWGXdEhCx",
    "difficulty": 1.5642857142857143,
    "language": "python3",
    "summary": "In this challenge, you have to build a word from the scrambled letters contained in the first given list. For establishing how to assign the spots to the letters, you will use the positions contained in the second given list.\n\nletters = [\"e\", \"t\", \"s\", \"t\"]\npositions = [1, 3, 2, 0]\n\nStep 1 ➞ Letter \"e\" goes to index 1 ➞ _  e  _   _\nStep 2 ➞ Letter \"t\" goes to ",
    "tags": [
      "arrays",
      "sorting"
    ],
    "title": "Word Builder"
  },
  {
    "_id": "xzisrRDwWT8prHtiQ",
    "difficulty": 1.565217391304348,
    "language": "python3",
    "summary": "Create a function that takes an array of integers and returns all pairs of integers that have a difference of two. The resulting array should be sorted in ascending order of values.\n\nExamples\ndifference_two([1, 2, 3, 4]) ➞ [[1, 3], [2, 4]]\n\ndifference_two([1, 23, 3, 4, 7]) ➞ [[1, 3]]\n\ndifference_two([4, 3, 1, 5, 6]) ➞ [[1, 3], [3, 5], [4, 6]]\n\nNotes\nAssume the",
    "tags": [
      "arrays",
      "numbers"
    ],
    "title": "Two is the Difference"
  },
  {
    "_id": "q7BdzRw4j7zFfFb4R",
    "difficulty": 1.5662983425414365,
    "language": "python3",
    "summary": "Create a function that takes two lists and combines them by alternatingly taking elements from each list in turn.\n\nThe lists may be of different lengths, with at least one character / digit.\nThe first list will contain string characters (lowercase, a-z).\nThe second list will contain integers (all positive).\n\nExamples\nmerge_arrays([\"a\", \"b\", \"c\", \"d\", \"e\"], [1,",
    "tags": [
      "arrays",
      "formatting",
      "loops"
    ],
    "title": "Merge Two Lists"
  },
  {
    "_id": "9CdF5hA7jRARpBwcF",
    "difficulty": 1.5684931506849316,
    "language": "python3",
    "summary": "Given a word, create a dictionary that stores the indexes of each letter in a list.\n\nMake sure the letters are the keys.\nMake sure the letters are symbols.\nMake sure the indexes are stored in a list and those lists are values.\n\nExamples\nmap_letters(\"dodo\") ➞ { \"d\": [0, 2], \"o\": [1, 3] }\n\nmap_letters(\"froggy\") ➞ { \"f\":  [0], \"r\": [1], \"o\": [2], \"g\": [3, 4], \"y\"",
    "tags": [
      "strings",
      "objects",
      "language_fundamentals",
      "loops"
    ],
    "title": "Map the Letters in a String"
  },
  {
    "_id": "Qjn6B93kXLj2Kq5jB",
    "difficulty": 1.5689655172413792,
    "language": "python3",
    "summary": "Create a function which simplifies a given fraction into its simplest ratio. Return the fraction as a string.\n\nExamples\nsimplify_frac(\"2/4\") ➞ \"1/2\"\n\nsimplify_frac(\"15/25\") ➞ \"3/5\"\n\nsimplify_frac(\"4/9\") ➞ \"4/9\"\n\nNotes\nFractions are given as strings.\nReturn the same fraction if it is already in its simplified ratio (see example #3).",
    "tags": [
      "math",
      "strings",
      "numbers"
    ],
    "title": "Simplifying to Simplest Ratio"
  },
  {
    "_id": "GGAKNYFg2JEwxzcqk",
    "difficulty": 1.5698924731182795,
    "language": "python3",
    "summary": "The anti-divisors are numbers that do not divide a given number by the largest possible margin, and they can be found following a simple set of rules:\n\nEvery number greater than 1 and lower than n is checked.\nEvery checked number must not be a divisor of n.\nIf the checked number is odd and it is a divisor of n * 2 - 1 or n * 2 + 1 it's an anti-divisor.\nIf the ",
    "tags": [
      "numbers",
      "math",
      "algorithms",
      "conditions"
    ],
    "title": "Anti-Divisors of a Number"
  },
  {
    "_id": "fW52x9Gh5iMKNfWMt",
    "difficulty": 1.57,
    "language": "python3",
    "summary": "The Recamán Sequence is a numeric sequence that starts always with 0. The position of a positive integer in the sequence, or Recamán Index, can be established with the following algorithm:\n\nFor every number to find, two variables are considered: the value of the last element of the sequence (last element from now on), and the actual sequence length (length fro",
    "tags": [
      "algorithms",
      "loops",
      "numbers"
    ],
    "title": "The Recamán Sequence"
  },
  {
    "_id": "mrKbfWBjQA2c3amwN",
    "difficulty": 1.5714285714285714,
    "language": "python3",
    "summary": "Create a function that takes an integer n and returns multiplication table of 1 to n numbers up to nth multiple.\n\nExamples\nmult_table(2) ➞ [\n  [1, 2],\n  [2, 4]\n]\n\nmult_table(3) ➞ [\n  [1, 2, 3],\n  [2, 4, 6],\n  [3, 6, 9]\n]\n\nmult_table(5) ➞ [\n  [1, 2, 3, 4, 5],\n  [2, 4, 6, 8, 10],\n  [3, 6, 9, 12, 15],\n  [4, 8, 12, 16, 20],\n  [5, 10, 15, 20, 25]\n]\n\nNotes\nN/A",
    "tags": [
      "numbers",
      "arrays",
      "math"
    ],
    "title": "Multiplication Table"
  },
  {
    "_id": "uRSeMB39t2g2jNpW9",
    "difficulty": 1.5714285714285714,
    "language": "python3",
    "summary": "At school, we used to play with our calculators and send each other secret messages. The trick was to enter a special number and turn the calculator upside-down. LOL ... I mean 707!\n\nGiven a number, create a function that converts it into a word by turning the integer 180 degrees around.\n\nExamples\nturn_calc(707) ➞ \"LOL\"\n\nturn_calc(5508) ➞ \"BOSS\"\n\nturn_calc(304",
    "tags": [
      "numbers",
      "strings",
      "loops"
    ],
    "title": "Hidden Calculator Words"
  },
  {
    "_id": "z3wYnBQPgBTzy87WA",
    "difficulty": 1.5714285714285714,
    "language": "python3",
    "summary": "Create a function which simulates the game \"rock, paper, scissors\". The function takes the input of both players (rock, paper or scissors), first parameter from first player, socond from second player. The function returns the result as such:\n\n\"Player 1 wins\"\n\"Player 2 wins\"\n\"TIE\" (if both inputs are the same)\n\nThe rules of rock, paper, scissors, if not known:",
    "tags": [
      "data_structures",
      "games"
    ],
    "title": "Simulate the Game \"Rock,  Paper,  Scissors\""
  },
  {
    "_id": "djLTSAc6h4bt6ehWu",
    "difficulty": 1.5724637681159421,
    "language": "python3",
    "summary": "Using Camel Case (or camelCase) is where the first word is in lower case, and all words after it have their first letter capitalised. Note that there are no spaces in between words!\n\nCreate a function that takes a string and returns it back in camelCase.\n\nExamples\ncamelCasing(\"Hello World\") ➞ \"helloWorld\"\n\ncamelCasing(\"snake_case\") ➞ \"snakeCase\"\n\ncamelCasing(\"",
    "tags": [
      "strings",
      "formatting"
    ],
    "title": "Changing a String into camelCase"
  },
  {
    "_id": "LgvppFDZoMpBKf8JW",
    "difficulty": 1.5733333333333333,
    "language": "python3",
    "summary": "Write a function that takes the number of seconds and returns the digital format clock time as a string. Time should be counted from 00:00:00.\n\nExamples\ndigital_clock(5025) ➞ \"01:23:45\"\n5025 seconds is 1 hour, 23 mins, 45 secs.\n\ndigital_clock(61201) ➞ \"17:00:01\"\nNo AM/PM. 24h format.\n\ndigital_clock(87000) ➞ \"00:10:00\"\nIt's 00:10 next day.\n\nNotes\nseconds is alw",
    "tags": [
      "algebra",
      "strings",
      "math",
      "numbers"
    ],
    "title": "Time Conversion"
  },
  {
    "_id": "LgXMXThsKcYtdYHrb",
    "difficulty": 1.5735849056603775,
    "language": "python3",
    "summary": "Write a function that splits a string into substrings of size n, adding a specified delimiter between each of the pieces.\n\nExamples\nsplitanddelimit(\"bellow\", 2, \"&\") ➞ \"be&ll&ow\"\n\nsplitanddelimit(\"magnify\", 3, \":\") ➞ \"mag:nif:y\"\n\nsplitanddelimit(\"poisonous\", 2, \"~\") ➞ \"po~is~on~ou~s\"\n\nNotes\nN/A",
    "tags": [
      "strings",
      "regex"
    ],
    "title": "Split and Delimit"
  },
  {
    "_id": "9QbhjtbkXp3QZNuDu",
    "difficulty": 1.5736040609137056,
    "language": "python3",
    "summary": "In this challenge, you have to find the last 15 palindromes of all numbers starting from ten and up to a given limit, including the limit in the search.\n\nGiven an integer limit being the upper limit of the range of interest, implement a function that returns the last 15 palindromes numbers lower or equal to limit as a list sorted ascendingly.\n\nExamples\ngenerat",
    "tags": [
      "algorithms",
      "arrays",
      "numbers",
      "loops"
    ],
    "title": "Generate a List of 15 Palindrome Numbers"
  },
  {
    "_id": "bHfb35MfsjyM6DJge",
    "difficulty": 1.5740740740740742,
    "language": "python3",
    "summary": "Suppose you are directionally challenged, and get lost easily. As a result, sometimes you walk in circles or make U-turns. You might take a sub-optimal route. Create a function that returns the difference in length between your path and the optimal path. Both paths reach the same destination.\n\nYou start at (0,0) and reach your destination by the end of the inp",
    "tags": [
      "arrays",
      "control_flow"
    ],
    "title": "Directionally Challenged"
  },
  {
    "_id": "TY2mJcZR8LBWepu7T",
    "difficulty": 1.5746268656716418,
    "language": "python3",
    "summary": "In a game of RisiKo! (the Italian version of the popular board game Risk!), the players throw six-sided dice to conquer territories around a World map.\n\nWhen two players contend a territory there is a battle, and they throw from 1 up to 3 dice, with each die being an army sent to fight. To establish who loses armies after the battle, the dice are compared star",
    "tags": [
      "games",
      "sorting",
      "data_structures",
      "arrays"
    ],
    "title": "Playing RisiKo!"
  },
  {
    "_id": "KYGpco9NFmJRyMQqj",
    "difficulty": 1.5747126436781609,
    "language": "python3",
    "summary": "Create a function that returns the smallest number of letter removals so that two strings are anagrams of each other.\n\nExamples\nmin_removals(\"abcde\", \"cab\") ➞ 2\nRemove \"d\", \"e\" to make \"abc\" and \"cab\".\n\nmin_removals(\"deafk\", \"kfeap\") ➞ 2\nRemove \"d\" and \"p\" from the first and second word, respectively.\n\nmin_removals(\"acb\", \"ghi\") ➞ 6\nRemove all letters from bot",
    "tags": [
      "strings",
      "data_structures"
    ],
    "title": "Minimum Removals to Make Two Strings Anagrams"
  },
  {
    "_id": "bDn2nC9GHwZMwFxRN",
    "difficulty": 1.5748502994011977,
    "language": "python3",
    "summary": "Write a regular expression that ensures the word \"end\" is inside of another word (e.g. \"bending\"). You must use RegEx boundary assertions. Non-word characters such as !, ?, etc. cannot be boundaries.\n\nExamples\npattern = \"yourregularexpressionhere\"\n\nbool(re.search(pattern, \"The end of the story.\")) ➞ False\nbool(re.search(pattern, \"Endings are pointless.\")) ➞ Fa",
    "tags": [
      "formatting",
      "regex",
      "validation"
    ],
    "title": "RegEx III: Boundary Assertions"
  },
  {
    "_id": "Sdu9JRQtL45qXmJtr",
    "difficulty": 1.575,
    "language": "python3",
    "summary": "Mubashir is getting old but he wants to celebrate his 20th or 21st birthday only. It is possible with some basic maths skills. He just needs to select the correct number base with your help!\n\nFor example, if his current age is 22, that's exactly 20 - in base 11.  Similarly, 65 is exactly 21 - in base 32 and so on.\n\nCreate a function that takes his current age",
    "tags": [
      "algorithms",
      "logic",
      "math",
      "numbers"
    ],
    "title": "Happy Birthday! 🍩"
  },
  {
    "_id": "46Raiu9C7caNsgjqH",
    "difficulty": 1.5757575757575757,
    "language": "python3",
    "summary": "Create a function that checks if the given arguments are of the same type. Return True if they are and False if they're not.\n\nExamples\ncompare_data(1, 6, 5, 3, 7, 9) ➞ True\n\ncompare_data(1, 6, 5, 3, \"7\", 9) ➞ False\n\ncompare_data([]) ➞ True\n\ncompare_data([1], (1)) ➞ False\n\nNotes\nIf no input is given or only one input, return True.\nUse the (\\*args)  construct to",
    "tags": [
      "data_structures",
      "validation"
    ],
    "title": "Check That Input Type Is the Same"
  },
  {
    "_id": "9Kuah39g997SvZmex",
    "difficulty": 1.5772357723577235,
    "language": "python3",
    "summary": "Create a function that takes in a sentence as input and returns the most common last vowel in the sentence as a single character string.\n\nExamples\ncommonlastvowel(\"Hello World!\") ➞ \"o\"\n\ncommonlastvowel(\"Watch the characters dance!\") ➞ \"e\"\n\ncommonlastvowel(\"OOI UUI EEI AAI\") ➞ \"i\"\n\nNotes\nThere will only be one common last vowel in each sentence.\nIf the word has",
    "tags": [
      "strings",
      "algorithms"
    ],
    "title": "Most Common Last Vowel"
  },
  {
    "_id": "oK2e5Xet35ZFZNLX6",
    "difficulty": 1.5774647887323943,
    "language": "python3",
    "summary": "Create a function that takes a string and checks if every single character is preceded and followed  by a character adjacent to it in the english alphabet.\n\nExample: \"b\" should be preceded and followed by ether \"a\" or \"c\" (abc || cba || aba || cbc == True but abf || zbc  == False).\n\nExamples\nneighboring(\"aba\") ➞ True\n\nneighboring(\"abcdedcba\") ➞ True\n\nneighbori",
    "tags": [
      "higher_order_functions",
      "language_fundamentals",
      "formatting",
      "loops",
      "validation"
    ],
    "title": "Neighboring Letters"
  },
  {
    "_id": "Q5bu2bXxXxfWtvmjy",
    "difficulty": 1.5780346820809248,
    "language": "python3",
    "summary": "Given a string of letters in the English alphabet, return the letter that's missing from the string. The missing letter will make the string be in alphabetical order (from A to Z).\n\nIf there are no missing letters in the string, return \"No Missing Letter\".\n\nExamples\nmissing_letter(\"abdefg\") ➞ \"c\"\n\nmissing_letter(\"mnopqs\") ➞ \"r\"\n\nmissing_letter(\"tuvxyz\") ➞ \"w\"",
    "tags": [
      "loops",
      "strings",
      "validation"
    ],
    "title": "What's the Missing Letter?"
  },
  {
    "_id": "hAsdEPWwufWoJos32",
    "difficulty": 1.5784753363228698,
    "language": "python3",
    "summary": "Create a function that transforms sentences ending  with multiple question marks ? or exclamation marks ! into a sentence only ending with one without changing punctuation in the middle of the sentences.\n\nExamples\nno_yelling(\"What went wrong?????????\") ➞ \"What went wrong?\"\n\nno_yelling(\"Oh my goodness!!!\") ➞ \"Oh my goodness!\"\n\nno_yelling(\"I just!!! can!!! not!!",
    "tags": [
      "strings",
      "regex",
      "recursion"
    ],
    "title": "No Yelling"
  },
  {
    "_id": "TjozEDjS7u5udR942",
    "difficulty": 1.578512396694215,
    "language": "python3",
    "summary": "Create a function which sorts a list of authors by their last name. The list may include initials and fullnames, but note that there will be a mix of upper and lowercase.\n\nExamples\nsort_authors([\"J. K. Rowling\", \"w. s.\", \"lewis carroll\", \"M. M.\"]) ➞ [\"lewis carroll\", \"M. M.\", \"J. K. Rowling\", \"w. s.\"]\n\nsort_authors([\"J. L.\", \"J. B. priestley\", \"L. C.\", \"Suzann",
    "tags": [
      "sorting",
      "arrays"
    ],
    "title": "Author Sorting"
  },
  {
    "_id": "BDcaZaqCuBCczeKZL",
    "difficulty": 1.5789473684210527,
    "language": "python3",
    "summary": "Create a function that creates a pattern as a 2D list for a given number.\n\nExamples\n >\n >>\n >>>\n >>\n >\n\narrow(3) ➞ [\">\", \">>\", \">>>\", \">>\", \">\"]\n\n >\n >>\n >>>\n >>>>\n >>>>\n >>>\n >>\n >\n\narrow(4) ➞ [\">\", \">>\", \">>>\", \">>>>\", \">>>>\", \">>>\", \">>\", \">\"]\n\nNotes\nFunction argument will always be a number greater than 0.\nOdd numbers will have a single \"peak\" (see example",
    "tags": [
      "algorithms",
      "arrays"
    ],
    "title": "Arrow Pattern"
  },
  {
    "_id": "nugyAtjRNQPTHLJNR",
    "difficulty": 1.5789473684210527,
    "language": "python3",
    "summary": "Suppose that you add all of the page numbers in a book.  If the total is 21, the book would have only 6 pages because 1 + 2 + 3 + 4 + 5 + 6 = 21.  If I had said the total is 25,\nthat would be impossible because the next number in the series is 28 (21 + 7).\n\nCreate a function that has as it's argument the sum of all the page numbers and returns\nTrue if it is a",
    "tags": [
      "numbers",
      "math",
      "validation"
    ],
    "title": "Pages in a Book"
  },
  {
    "_id": "pzQXHMqizBmaLDCHc",
    "difficulty": 1.5789473684210527,
    "language": "python3",
    "summary": "It's a Pokemon battle! Your task is to calculate the damage that a particular move would do using the following formula (not the actual one from the game):\n\ndamage = 50 * (attack / defense) * effectiveness\n\nattack = your attack power\ndefense = the opponent's defense\neffectiveness = the effectiveness of the attack based on the matchup (see explanation below)\n\nE",
    "tags": [
      "conditions",
      "math",
      "logic",
      "games"
    ],
    "title": "Pokemon Damage Calculator"
  },
  {
    "_id": "SChr3sBY5ZKwHBHLH",
    "difficulty": 1.5794392523364487,
    "language": "python3",
    "summary": "In this challenge you will be given a list similar to the following:\n\n[[3], 4, [2], [5], 1, 6]\n\nIn words, elements of the list are either an integer or a list containing a single integer.\nIf you try to sort this list via sorted([[3], 4, [2], [5], 1, 6]), Python will whine about not being able to compare integers and lists.\n\nHowever, us humans can clearly see t",
    "tags": [
      "sorting",
      "arrays",
      "language_fundamentals"
    ],
    "title": "Sort the Unsortable"
  },
  {
    "_id": "JPfqYkt6KGhpwfYK7",
    "difficulty": 1.5808080808080809,
    "language": "python3",
    "summary": "Create a function that replaces \"the\" in the sentence with \"an\" or \"a\". Remember that if the next word begins with a vowel, use \"an\". In the case of a consonant, use \"a\".\n\nExamples\nreplace_the(\"the dog and the envelope\") ➞ \"a dog and an envelope\"\n\nreplace_the(\"the boy ran at the wall\") ➞ \"a boy ran at a wall\"\n\nreplace_the(\"the egg, the spoon and the espionage\"",
    "tags": [
      "strings",
      "formatting",
      "regex"
    ],
    "title": "Substituting the The"
  },
  {
    "_id": "AWYR47h7vCCwDmoXF",
    "difficulty": 1.5808823529411764,
    "language": "python3",
    "summary": "In (American) Football, a team can score if they manage to kick a ball through the goal (i.e. above the crossbar and between the uprights).\n\nCreate a function that returns True if the ball 0 goes through the goal. You will be given a list of lists.\n\nExamples\nisgoalscored([\n  [\"  #     #  \"],\n  [\"  #  0  #  \"],\n  [\"  #     #  \"],\n  [\"  #######  \"],\n  [\"     #",
    "tags": [
      "arrays",
      "strings",
      "validation"
    ],
    "title": "Scoring a Field Goal"
  },
  {
    "_id": "Box2A6Rb94ao8wAye",
    "difficulty": 1.5813953488372092,
    "language": "python3",
    "summary": "Create a function that finds each number in the given list that is greater than every number that comes after it. Your solution should return a list of the number(s) that meet these criteria.\n\nExamples\nleader([2, 3, 20, 15, 8, 3]) ➞ [20, 15, 8, 3]\nNote that 20 is greater than all the elements to it's\nright side, similarly 15 and so on.\n\nleader([2, 3, 20, 15, 8",
    "tags": [
      "arrays",
      "language_fundamentals",
      "loops"
    ],
    "title": "Leader in a List"
  },
  {
    "_id": "sTJoRiHpQJvmqscGP",
    "difficulty": 1.582191780821918,
    "language": "python3",
    "summary": "Create a function that takes a list of booleans that represent whether or not a player has logged into a game that day. Output the longest streak of consecutive logged in days.\n\nExamples\ndaily_streak([True, True, False, True]) ➞ 2\n\ndaily_streak([False, False, False]) ➞ 0\n\ndaily_streak([True, True, True, False, True, True]) ➞ 3\n\nNotes\nReturn your output as an i",
    "tags": [
      "arrays",
      "logic"
    ],
    "title": "Longest Daily Streak"
  },
  {
    "_id": "Nh8xqtHAzoiaEyKrv",
    "difficulty": 1.5822784810126582,
    "language": "python3",
    "summary": "Mubashir is not so good with the English language. He needs your help to correct his sentences.\n\nStart each sentence with an uppercase alphabet.\nFor every uppercase letter (other than the first alphabet), you have to place a fullstop(.) followed by an empty space.\nThere must be only one space between the words and sentences.\nSentence must end with a full stop(",
    "tags": [
      "sorting",
      "validation",
      "language_fundamentals",
      "conditions",
      "regex"
    ],
    "title": "Correct My Sentence"
  },
  {
    "_id": "PGqy3SRaobbtFfspW",
    "difficulty": 1.5824175824175823,
    "language": "python3",
    "summary": "Mubashir needs your help to write a simple algorithm of multiplication.\n\nGiven an array of integers lst and an integer n, find out a pair of numbers [x, y] from a given array such that x * y = n .\n\nIf the pair is not found, return None.\n\nExamples\nsimple_pair([1, 2, 3], 3) ➞ [1, 3]\n\nsimple_pair([1, 2, 3], 6) ➞ [2, 3]\n\nsimple_pair([1, 2, 3], 9) ➞ None\nNotes\nN/A",
    "tags": [
      "algebra",
      "interview",
      "math",
      "numbers"
    ],
    "title": "A Simple Pair"
  },
  {
    "_id": "QugwmQ8WH6x4oqMD9",
    "difficulty": 1.5825242718446602,
    "language": "python3",
    "summary": "Create a function that takes four lists as arguments and returns a count of the total number of identical lists.\n\nExamples\ncountidenticallists([0, 0, 0], [0, 1, 2], [0, 0, 0], [2, 1, 0]) ➞ 2\n\ncountidenticallists([0, 1, 0], [0, 1, 2], [0, 2, 0], [2, 1, 0]) ➞ 0\n\ncountidenticallists([0, 1, 2], [0, 1, 2], [0, 1, 2], [2, 1, 0]) ➞ 3\n\nNotes\nDon't forget to return the",
    "tags": [
      "algorithms",
      "arrays"
    ],
    "title": "Count Number of Identical Lists"
  },
  {
    "_id": "p6uXeD7JC7cmxeD2Z",
    "difficulty": 1.5833333333333333,
    "language": "python3",
    "summary": "Abigail and Benson are playing Rock, Paper, Scissors.\n\nEach game is represented by an array of length 2, where the first element represents what Abigail played and the second element represents what Benson played.\n\nGiven a sequence of games, determine who wins the most number of matches. If they tie, output \"Tie\".\n\nR stands for Rock\nP stands for Paper\nS stands",
    "tags": [
      "conditions",
      "control_flow",
      "loops",
      "arrays",
      "games"
    ],
    "title": "Rock, Paper, Scissors!"
  },
  {
    "_id": "H9gjahbSRbbGEpYta",
    "difficulty": 1.5833333333333333,
    "language": "python3",
    "summary": "Create a function that takes two numbers n1 n2 and multiplies them without using *.\n\nExamples\nmultiply(3, 2) ➞ 6\n\nmultiply(4, 10) ➞ 40\n\nmultiply(-2, 4) ➞ -8\n\nNotes\nDo not use * for this challenge.",
    "tags": [
      "numbers",
      "math"
    ],
    "title": "Recreating Multiplication"
  },
  {
    "_id": "PbucHZpWm6ZGEtqki",
    "difficulty": 1.583756345177665,
    "language": "python3",
    "summary": "Create a function that returns the subarrays of n consecutive elements from the original element that sum up to k. The function will have the following form: sliding_sum(lst, n, k)\n\nTo illustrate:\n\nsliding_sum([3, 4, 1, 9, 9, 0, 3, 5, 4], 3, 8) ➞ [[3, 4, 1], [0, 3, 5]]\nWhere [3, 4, 1] and [0, 3, 5] are the only subarrays that sum to 8 with length 3.\n\nExamples\n",
    "tags": [
      "arrays",
      "language_fundamentals"
    ],
    "title": "Sliding Sum"
  },
  {
    "_id": "5WvxKLK55JvT8NLfR",
    "difficulty": 1.5849056603773586,
    "language": "python3",
    "summary": "A square matrix (same number of rows as columns) is called row diagonally dominant if \"the absolute value of each entry in the main diagonal is strictly larger than the sum of the absolute values of the other entries in that row\".\n\nTo illustrate ...\n\n[\n  [10, 3, 6],\n  [2, -9, -6],\n  [1, -1, 4]\n]\n\nThe absolute values from top left to bottom right are:\n\n10 = Fir",
    "tags": [
      "arrays",
      "math",
      "language_fundamentals",
      "validation"
    ],
    "title": "Diagonal Domination"
  },
  {
    "_id": "n3zH5NvzPXb2qd5N5",
    "difficulty": 1.5851063829787233,
    "language": "python3",
    "summary": "Given an number, return a string which contains varying amounts of the word 'MEGA' depending on the given number's order of magnitude.\n\nIf the number is less than 100, return \"not a mega milestone\".\nOtherwise, start with the string \"MEGA milestone\".\nFor every order of magnitude over 100 that the number is, add the word \"MEGA\" to the start of the string.\n\nSee t",
    "tags": [
      "strings",
      "numbers",
      "formatting"
    ],
    "title": "Mega Milestones"
  },
  {
    "_id": "7Xu4Bx57v36oCZpT4",
    "difficulty": 1.5854700854700854,
    "language": "python3",
    "summary": "Return the coordinates ([row, col]) of the element that differs from the rest.\n\nExamples\nwhereiswaldo([\n  [\"A\", \"A\", \"A\"],\n  [\"A\", \"A\", \"A\"],\n  [\"A\", \"B\", \"A\"]\n]) ➞ [3, 2]\n\nwhereiswaldo([\n  [\"c\", \"c\", \"c\", \"c\"],\n  [\"c\", \"c\", \"c\", \"d\"]\n]) ➞ [2, 4]\n\nwhereiswaldo([\n  [\"O\", \"O\", \"O\", \"O\"],\n  [\"O\", \"O\", \"O\", \"O\"],\n  [\"O\", \"O\", \"O\", \"O\"],\n  [\"O\", \"O\", \"O\", \"O\"],\n  [",
    "tags": [
      "arrays",
      "functional_programming"
    ],
    "title": "Where's Waldo?"
  },
  {
    "_id": "nqNWZ7ayzZoRMZu8Z",
    "difficulty": 1.5857142857142856,
    "language": "python3",
    "summary": "Create a function that takes a list of dictionary like { name: \"John\", notes: [3, 5, 4]} and returns a list of dictionary  like { name: \"John\", avgNote: 4 }. If student has no notes (an empty array) then  avgNote is zero.\n\nExamples\n[\n  { name: \"John\", notes: [3, 5, 4]}\n] ➞ [\n  { name: \"John\", avgNote: 4 }\n]\n\nNotes\nRound the avgNote to a whole number.",
    "tags": [
      "arrays",
      "objects"
    ],
    "title": "Get Students with Names and Notes Average"
  },
  {
    "_id": "w5eFnzhADpLZSuCM3",
    "difficulty": 1.5858585858585859,
    "language": "python3",
    "summary": "Write a function that returns a list of elements [number, multiplicity]. The multiplicity of a number refers to the number of times it occurs in the list.\n\nTo illustrate:\n[5, 5, 1, 1, 5, 5, 3]\n[[5, 4], [1, 2], [3, 1]]\n\nSince 5 appears 4 times, 1 appears twice, and 3 appearance once.\n\nThe final list should only include unique elements, and the elements should b",
    "tags": [
      "arrays",
      "language_fundamentals"
    ],
    "title": "Multiplicity of Numbers"
  },
  {
    "_id": "28aPKtEcWJPMwb9mm",
    "difficulty": 1.5862068965517242,
    "language": "python3",
    "summary": "Mubashir needs your help to learn Python Programming. Help him by modifying a given string txt as follows:\n\nReverse the string given.\nReplace each letter to its position in the alphabet for example (a = 1, b = 2, c = 3, ...).\nJoin the array and convert it to a number.\nConvert the number to binary.\nConvert the string back to a number.\n\nSee below example for mor",
    "tags": [
      "algorithms",
      "interview",
      "numbers",
      "strings"
    ],
    "title": "A Simple Modification"
  },
  {
    "_id": "SqbyWYwqChQroXfhu",
    "difficulty": 1.5865384615384615,
    "language": "python3",
    "summary": "This challenge concerns square matrices (same number of rows and columns) as the below example illustrates:\n\n[\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n]\n\nThe entries in the diagonal line from the top left to the bottom right form the main diagonal of the matrix. In this case, 1,5,9 form the main diagonal.\n\nWrite a function that returns the matrix obtained by rep",
    "tags": [
      "arrays",
      "language_fundamentals",
      "math",
      "loops"
    ],
    "title": "The Bottom of the Matrix"
  },
  {
    "_id": "AqcGgqbMFhSqn44Qx",
    "difficulty": 1.5870967741935484,
    "language": "python3",
    "summary": "Your job is to make a \"Twitter link\" regular expression rx. This RegEx searches a tweet to find the @handle and the #handle. Only return the @ and # handles.\n\nExamples\ntweet(\"Visit us at @edabit\") ➞ \"@edabit\"\n\ntweet(\"Follow @JavaScript\") ➞ \"@JavaScript\"\n\ntweet(\"#Honesty is the best @policy!!\") ➞ \"#Honesty @policy\"\n\nNotes\nMake sure the RegEx doesn't return . ,",
    "tags": [
      "regex",
      "formatting"
    ],
    "title": "Twitter Link Finder"
  },
  {
    "_id": "XYYdtkhGPXXJ3QQNB",
    "difficulty": 1.5898617511520738,
    "language": "python3",
    "summary": "Create a function that takes a list of strings and returns a list with only the strings that have numbers in them. If there are no strings  containing numbers, return an empty list.\n\nExamples\nnuminstr([\"1a\", \"a\", \"2b\", \"b\"]) ➞ [\"1a\", \"2b\"]\n\nnuminstr([\"abc\", \"abc10\"]) ➞ [\"abc10\"]\n\nnuminstr([\"abc\", \"ab10c\", \"a10bc\", \"bcd\"]) ➞ [\"ab10c\", \"a10bc\"]\n\nnuminstr([\"this",
    "tags": [
      "arrays",
      "numbers",
      "strings",
      "loops",
      "regex"
    ],
    "title": "Numbers in Strings"
  },
  {
    "_id": "SaZodzHyFoSv9XKPX",
    "difficulty": 1.5901639344262295,
    "language": "python3",
    "summary": "Mubashir was playing with dominos. He concluded that:\n\nIf the first domino is pushed over, it will keep tipping next dominos to its right.\nReaction will stop if a domino is already tipped over, or if there is an empty space.\n\nMubashir\n\nCreate a function which takes a string of current status of the dominos and returns the string after dominos chain reaction.",
    "tags": [
      "algorithms",
      "strings",
      "validation"
    ],
    "title": "Domino Chain"
  },
  {
    "_id": "8cJnRPxtjNP64k5fq",
    "difficulty": 1.5904761904761904,
    "language": "python3",
    "summary": "You will be given a list of dancing couples, with the woman first and man second, as well as a parameter \"men\" or \"women\".\nIf the parameter is \"men\", the men reverse their positions (first moves to last, last moves to first, etc), while women keep their positions.\nIf the parameter is \"women\", the women reverse their positions, while men keep their positions.",
    "tags": [
      "arrays",
      "sorting"
    ],
    "title": "A Simple Dance"
  },
  {
    "_id": "EjjBGn7hkmhgxqJej",
    "difficulty": 1.5905511811023623,
    "language": "python3",
    "summary": "A word nest is created by taking a starting word, and generating a new string by placing the word inside itself. This process is then repeated.\n\nNesting 3 times with the word \"incredible\":\n\nstart  = incredible\nfirst  = incre|incredible|dible\nsecond = increin|incredible|credibledible\nthird  = increinincr|incredible|ediblecredibledible\n\nThe final nest is \"increi",
    "tags": [
      "language_fundamentals",
      "strings"
    ],
    "title": "Word Nests"
  },
  {
    "_id": "HaxQfQTEpo7BFE5rz",
    "difficulty": 1.5909090909090908,
    "language": "python3",
    "summary": "Create a function which validates whether a given list alternates between positive and negative numbers.\n\nExamples\nalternateposneg([3, -2, 5, -5, 2, -8]) ➞ True\n\nalternateposneg([-6, 1, -1, 4, -3]) ➞ True\n\nalternateposneg([4, 4, -2, 3, -6, 10]) ➞ False\n\nNotes\n It doesn't matter if a list begins/ends with a positive or negative, as long as it alternates.\nIf a l",
    "tags": [
      "arrays",
      "numbers",
      "loops",
      "validation"
    ],
    "title": "Positives and Negatives"
  },
  {
    "_id": "Rbs2G5PaJtmYdLTJM",
    "difficulty": 1.5909090909090908,
    "language": "python3",
    "summary": "A pronic number (or otherwise called as heteromecic) is a number which is a product of two consecutive integers, that is, a number of the form n(n + 1). Create a function that determines whether a number is pronic or not.\n\nExamples\nis_heteromecic(0) ➞ True\n0 * (0 + 1) = 0 * 1 = 0\n\nis_heteromecic(2) ➞ True\n1 * (1 + 1) = 1 * 2 = 2\n\nis_heteromecic(7) ➞ False\n\nis_",
    "tags": [
      "math",
      "numbers",
      "loops",
      "validation"
    ],
    "title": "Pronic Number"
  },
  {
    "_id": "WixXhsdqcNHe3vTn3",
    "difficulty": 1.5917159763313609,
    "language": "python3",
    "summary": "A positive number's population is the sum of 1's in its binary representation.\n\nAn evil number has an even numbered population.\nAn odious number has an odd numbered population.\nA number is pernicious if its population is a prime number.\n\nCreate a function that takes a number as an argument and returns a sorted list of all its descriptors (\"Evil\", \"Odious\", or",
    "tags": [
      "conditions",
      "language_fundamentals"
    ],
    "title": "No Good Numbers"
  },
  {
    "_id": "bJxNHk7aovkx8Q776",
    "difficulty": 1.5918367346938775,
    "language": "python3",
    "summary": "Mubashir and his friend Matt found some gold piles. They decided to follow simple rules to distribute the gold among them.\nGold will be divided into n piles.\nEach person will choose bigger gold pile either from far left or far right.\nIf the weight of both piles is equal then the person will choose left pile.\n\nHelp them by creating a function that takes an arra",
    "tags": [
      "algorithms",
      "arrays",
      "logic",
      "numbers"
    ],
    "title": "Gold Distribution"
  },
  {
    "_id": "nmoohLwP962r6P355",
    "difficulty": 1.592920353982301,
    "language": "python3",
    "summary": "In this challenge, you have to establish if the digits of a given number form a straight arithmetic sequence (either increasing or decreasing). A straight sequence has an equal step between every pair of digits.\n\nGiven an integer n, implement a function that returns:\n\"Not Straight\" if n is lower than 100 or if its digits are not an arithmetic sequence.\n\"Trivia",
    "tags": [
      "numbers",
      "math",
      "validation"
    ],
    "title": "Straight Digital Numbers"
  },
  {
    "_id": "q7rHnH9Jhf35NqSjG",
    "difficulty": 1.5932203389830508,
    "language": "python3",
    "summary": "Mubashir needs your help to find out trailing zeros after calculating factorial of a given number.\n\nCreate a function which takes a number n and calculates the number of trailing zeros in factorial of the given number.\n\nn! = 1 * 2 * 3 * ... * n\n\nExamples\ntrailing_zeros(0) ➞ 0\n0! = 1\nNo trailing zero.\n\ntrailing_zeros(6) ➞ 1\n6! = 120\n1 trailing zero.\n\ntrailing_z",
    "tags": [
      "math",
      "numbers",
      "algebra",
      "algorithms",
      "recursion"
    ],
    "title": "Trailing Zeros"
  },
  {
    "_id": "rSa8y4gxJtBqbMrPW",
    "difficulty": 1.5936073059360731,
    "language": "python3",
    "summary": "Write a function that returns the least common multiple (LCM) of two integers.\n\nExamples\nlcm(9, 18) ➞ 18\n\nlcm(8, 5) ➞ 40\n\nlcm(17, 11) ➞ 187\n\nNotes\nBoth values will be positive.\nThe LCM is the smallest integer that is divisible by both numbers such that the remainder is zero.",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "LCM of Two Numbers"
  },
  {
    "_id": "DC2s6hM8yE7RvBr3S",
    "difficulty": 1.5945945945945945,
    "language": "python3",
    "summary": "Two matrices must have an equal number of rows and columns to be subtracted. In which case, the subtracted of two matrices A and B will be a matrix which has the same number of rows and columns as A and B.\n\nThe result of the subtraction of A and B, denoted A - B is computed by subtracting corresponding elements of A and B.\n\nCreate a function that takes 2 x 2D",
    "tags": [
      "algebra",
      "math",
      "interview",
      "arrays"
    ],
    "title": "Matrix Subtraction"
  },
  {
    "_id": "veCWQHJNgeZQCNbdY",
    "difficulty": 1.5947712418300655,
    "language": "python3",
    "summary": "Create a function that takes a number and returns one digit that is the result of summing all the digits of the input number. When the sum of the digits consists of more than one digit, repeat summing until you get one digit.\n\nExamples\nroot_digit(123) ➞ 6\n1 + 2 + 3 = 6\n\nroot_digit(999888777) ➞ 9\n\nroot_digit(1238763636555555555555 ➞ 6\n\nNotes\nRecursion is allowe",
    "tags": [
      "numbers",
      "recursion",
      "strings",
      "math"
    ],
    "title": "Digits Sum Root"
  },
  {
    "_id": "fvHLv9f5t6xoTWwXT",
    "difficulty": 1.5948275862068966,
    "language": "python3",
    "summary": "Given a string including a bunch of characters and numbers, return the sum of all the numbers in the string. Note that multiple digits next to each other are counted as a whole number rather than separate digits.\n\nExamples\ngrabnumbersum(\"aeiou250abc10\") ➞ 260\n\ngrabnumbersum(\"one1two2twenty20\") ➞ 23\n\ngrabnumbersum(\"900uwu50uwuuwuuwu25uwu25\") ➞ 1000\n\nNotes\nRemem",
    "tags": [
      "strings",
      "numbers"
    ],
    "title": "Grab the Numbers"
  },
  {
    "_id": "qjB3KLrK6JkmBkMZR",
    "difficulty": 1.5965909090909092,
    "language": "python3",
    "summary": "In chess, queens can move any number of squares horizontally, vertically or diagonally.\n\nGiven the location of your queen and your opponents' queen, determine whether or not you're able to capture your opponent's queen. Your location and your opponents' location are the first and second elements of the list, respectively.\n\nExamples\ncan_capture([\"A1\", \"H8\"]) ➞",
    "tags": [
      "arrays",
      "strings",
      "control_flow",
      "games"
    ],
    "title": "The Conquering Queen"
  },
  {
    "_id": "GZ5gCe5jnbNRWqc5J",
    "difficulty": 1.596774193548387,
    "language": "python3",
    "summary": "Every month, Microny™️ (a big entertainment corporation) publishes a few free videogames on their web store. You are working on a script that will notify you whenever the new games are available for download. There is not a fixed date for the new releases, but you know that it happens every first Tuesday of every month.\n\nWrite a function that, given a year and",
    "tags": [
      "dates",
      "math",
      "numbers"
    ],
    "title": "First Tuesday of the Month"
  },
  {
    "_id": "5uMJmbN2uihcyEu75",
    "difficulty": 1.5975609756097562,
    "language": "python3",
    "summary": "Write a function that takes a list of hours and returns the total weekly salary.\n\nThe first element of the list is the number of hours spent at work on Monday.\nThe second element of the list is the number of hours spent at work on Tuesday, etc.\nA worker earns $10 an hour for the first 8 hours.\nFor every overtime hour, he's earning $15.\nOn Saturday and Sunday, ",
    "tags": [
      "algebra",
      "arrays",
      "math",
      "numbers"
    ],
    "title": "Weekly Salary"
  },
  {
    "_id": "wbhjXmdbPSxCSE5hW",
    "difficulty": 1.5984251968503937,
    "language": "python3",
    "summary": "A magic sigil is a glyph which represents a desire one wishes to manifest in their lives. There are many ways to create a sigil, but the most common is to write out a specific desire (e.g. \"I HAVE WONDERFUL FRIENDS WHO LOVE ME\"), remove all vowels, remove any duplicate letters and then design a glyph from what remains.\n\nUsing the sentence above as an example,",
    "tags": [
      "strings",
      "loops",
      "formatting",
      "regex"
    ],
    "title": "Magic Sigil Generator"
  },
  {
    "_id": "EL3vnd5MWyPwE4ucu",
    "difficulty": 1.6,
    "language": "python3",
    "summary": "Create a function to return the Nth number in the Fibonacci sequence as a string.\n\nExamples\nfibonacci(10) ➞ \"55\"\n\nfibonacci(20) ➞ \"6765\"\n\nfibonacci(30) ➞ \"832040\"\n\nfibonacci(40) ➞ \"102334155\"\n\nfibonacci(50) ➞ \"12586269025\"\n\nfibonacci(60) ➞ \"1548008755920\"\nNotes\n\nYour function is expected to calculate numbers greater than the 64-bit unsigned integer limit where",
    "tags": [
      "loops",
      "interview",
      "numbers",
      "math"
    ],
    "title": "Nth Fibonacci Number"
  },
  {
    "_id": "avBHBMAwf9ibDpfNM",
    "difficulty": 1.6,
    "language": "python3",
    "summary": "Write a function that makes an HTTP GET request for the given url. Return the media type / content-type from the HTTP Response Header as a string.\n\nExample\ncontent_type(\"https://edabit.com\") ➞ \"text/html; charset=utf-8\"\n\nNotes\nYou may want to make use of and import requests.\nDo not cheat and just print out the answer, you must fetch this from edabit.com.\nRetur",
    "tags": [
      "strings",
      "language_fundamentals"
    ],
    "title": "Indicate the Media Type from HTTP Response Header"
  },
  {
    "_id": "25zkiePFYRpickxnB",
    "difficulty": 1.6003616636528029,
    "language": "python3",
    "summary": "A boomerang is a V-shaped sequence that is either upright or upside down. Specifically, a boomerang can be defined as: sub-list of length 3, with the first and last digits being the same and the middle digit being different.\n\nSome boomerang examples:\n\n[3, 7, 3], [1, -1, 1], [5, 6, 5]\n\nCreate a function that returns the total number of boomerangs in a list.\n\nTo",
    "tags": [
      "arrays",
      "loops"
    ],
    "title": "Number of Boomerangs"
  },
  {
    "_id": "yFEMocjdiRjPhoDqv",
    "difficulty": 1.6025641025641026,
    "language": "python3",
    "summary": "Create a function that returns True if there's at least one prime number in the given range (n1 to n2), False otherwise.\n\nExamples\nprimeinrange(10, 15) ➞ True\nPrime numbers in range: 11, 13\n\nprimeinrange(62, 66) ➞ False\nNo prime numbers in range.\n\nprimeinrange(3, 5) ➞ True\nPrime numbers in range: 3, 5\n\nNotes\nn2 is always greater than n1.\nn1 and n2 are always p",
    "tags": [
      "algebra",
      "algorithms",
      "math",
      "numbers"
    ],
    "title": "Any Prime Number in Range"
  },
  {
    "_id": "vYYfFAAfjoc8crCqu",
    "difficulty": 1.6035502958579881,
    "language": "python3",
    "summary": "Write a function to create a Christmas tree based on height h.\n\nExamples\ntree(1) ➞ [\n\t\"#\"\n]\n\ntree(2) ➞ [\n  \" # \",\n  \"###\"\n]\n\ntree(5) ➞ [\n  \"    #    \",\n  \"   ###   \",\n  \"  #####  \",\n  \" ####### \",\n  \"#########\"\n]\n\ntree(0) ➞ []\n\nNotes\nN/A",
    "tags": [
      "formatting",
      "strings"
    ],
    "title": "Christmas Tree"
  },
  {
    "_id": "dsAPLuCpkKCBELk24",
    "difficulty": 1.6047904191616766,
    "language": "python3",
    "summary": "You have a list of integers, and for each index you want to find the product of every integer except the integer at that index.\n\nCreate a function that takes a list of integers and returns a list of the products.\n\nExamples\nget_products([1, 7, 3, 4]) ➞ [84, 12, 28, 21]\n\nget_products([1, 2, 6, 5, 9]) ➞ [540, 270, 90, 108, 60]\n\nget_products([1, 2, 3, 0, 5]) ➞ [0,",
    "tags": [
      "arrays",
      "loops",
      "math"
    ],
    "title": "Product of All Other Numbers"
  },
  {
    "_id": "hzQ6dEJ2GfscAZzND",
    "difficulty": 1.605263157894737,
    "language": "python3",
    "summary": "Create a function  that takes a number as its parameter and returns another function. The returned function must take a list of numbers as its parameter, and return a list of the numbers divided by the number that was passed into the first function.\n\nExamples\nfirst = factory(15)\nreturns a function first.\n\nlst = [30, 45, 60]\n30 / 15 = 2, 45 / 15 = 3, 60 / 15 =",
    "tags": [
      "functional_programming",
      "arrays",
      "closures"
    ],
    "title": "First Class Function"
  },
  {
    "_id": "GP6CEr9a5CMqPHY7C",
    "difficulty": 1.6065573770491803,
    "language": "python3",
    "summary": "Create a function that turns a list of words into a comma separated list, where the last word is separated by the word \"and\".\n\nExamples\nwordstosentence([\"edabit\"]) ➞ \"edabit\"\n\nwordstosentence([\"Hello\", \"\", \"Bye\"]) ➞ \"Hello and Bye\"\n\nwordstosentence([\"Hello\", \"Bye\", \"See you soon\"]) ➞ \"Hello, Bye and See you soon\"\n\nNotes\nNone values, empty lists or lists with o",
    "tags": [
      "arrays",
      "algorithms",
      "strings",
      "formatting"
    ],
    "title": "Words to Sentence"
  },
  {
    "_id": "JgYPQrYdivmqN4KKX",
    "difficulty": 1.608695652173913,
    "language": "python3",
    "summary": "Body Mass Index (BMI) is found by taking your weight in kilograms and dividing by the square of your height in meters. The BMI categories are:\n\nUnderweight: <18.5\nNormal weight: 18.5–24.9\nOverweight: 25–29.9\nObesity: BMI of 30 or greater\n\nCreate a function that will accept weight and height (in kilos, pounds, meters, or inches) and return the BMI and the assoc",
    "tags": [
      "strings",
      "math"
    ],
    "title": "Body Mass Index"
  },
  {
    "_id": "cEzT2e8tLpwYnrstP",
    "difficulty": 1.608832807570978,
    "language": "python3",
    "summary": "Create a function that takes:\n\nA list of keys.\nA list of values (same size).\nTrue, if key and value should be swapped, else False.\n\nThe function returns the constructed dict. Empty lists return an empty dict.\n\nExamples\nswap_d([1, 2, 3], [\"one\", \"two\", \"three\"], False)\n➞ { 1: \"one\", 2: \"two\", 3: \"three\" }\n\nswap_d([1, 2, 3], [\"one\", \"two\", \"three\"], True)\n➞ { \"o",
    "tags": [
      "data_structures",
      "objects"
    ],
    "title": "Generating and Swapping Key-Value-Pairs in Dictionary"
  },
  {
    "_id": "HhSS3YReRhBxZAnzk",
    "difficulty": 1.6091954022988506,
    "language": "python3",
    "summary": "Python's range function can only generate a list of integers, your task is to generate a list of floats. Generate a list of values between 0 and an endpoint n spaced at  i intervals.\n\nExamples\ngen_values(2, 0.25) ➞ [0.0, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0]\n\ngen_values(1, 0.1) ➞ [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\n\ngen_values(20, 2)",
    "tags": [
      "loops",
      "math",
      "numbers"
    ],
    "title": "Generate Floats"
  },
  {
    "_id": "pyDemMDspSSFdWsh4",
    "difficulty": 1.6103896103896105,
    "language": "python3",
    "summary": "In Digital Decipher, decoding is done by the simple subtraction of numbers in the key and the corresponding characters on a given list. You may want to solve this challenge before proceeding further.\n\nCreate a function that takes two arguments; a positive integer and a list of integers and returns a decoded message as string.\n\nAssign a unique number to each le",
    "tags": [
      "cryptography",
      "algorithms",
      "logic"
    ],
    "title": "Digital Decipher"
  },
  {
    "_id": "xBPCwB8c4rYrGqY3v",
    "difficulty": 1.610738255033557,
    "language": "python3",
    "summary": "Your function will get a list with a number sequence. However, one item will be missing. It's your job to find out which one is not in the list.\n\nTo illustrate, given the list [1, 3, 4, 5], 2 is missing so the output must be 2.\n\nExamples\nmissing([1, 3, 4, 5]) ➞ 2\n\nmissing([2, 4, 6, 8, 10, 14, 16]) ➞ 12\n\nmissing([1.5, 2, 3]) ➞ 2.5\n\nNotes\nThe missing item will n",
    "tags": [
      "algorithms",
      "numbers"
    ],
    "title": "The Missing Link of an Arithmetic Progression"
  },
  {
    "_id": "d4YpsSWkDvgefxBc4",
    "difficulty": 1.6111111111111112,
    "language": "python3",
    "summary": "Create a function that takes a list of card numbers and checks if the sum of their value exceeds 21. If the sum exceeds 21, return True and if the sum is under or equal to 21, return False. Values of the cards are as follows:\n\n2-10 are their value.\nJ-K (face cards) count as 10.\nAces count either as 1 or 11 - play conservatively, so that if giving an ace a valu",
    "tags": [
      "arrays",
      "conditions",
      "games",
      "loops"
    ],
    "title": "Blackjack "
  },
  {
    "_id": "ePaMPXuKScJNs34Ay",
    "difficulty": 1.6111111111111112,
    "language": "python3",
    "summary": "This challenge concerns some functionality of the sum method that is easy to overlook.\n\nAs we all know, sum([4, 14, 17, 10]) is an alternative way of writing 4 + 14 + 17 + 10.\n\nSo far, nothing particularly interesting. However, things get more noteworthy when one recalls that in Python the addition + isn't just used to add numbers.\n\nFor example, the code:\n\n[1,",
    "tags": [
      "math",
      "language_fundamentals",
      "arrays"
    ],
    "title": "Add It Up!"
  },
  {
    "_id": "czLhTsGjScMTDtZxJ",
    "difficulty": 1.6119402985074627,
    "language": "python3",
    "summary": "In mathematics, primorial, denoted by “#”, is a function from natural numbers to natural numbers similar to the factorial function, but rather than successively multiplying positive integers, the function only multiplies prime numbers.\n\nCreate a function that takes an integer n and returns its primorial.\n\nExamples\nprimorial(1) ➞ 2\nFirst prime number = 2\n\nprimo",
    "tags": [
      "math",
      "logic",
      "numbers",
      "interview"
    ],
    "title": "Primorial of a Number"
  },
  {
    "_id": "AeWbFdxSwAf5nhQpG",
    "difficulty": 1.6130952380952381,
    "language": "python3",
    "summary": "If you take an integer and form the product of it's individual digits, you get a smaller number. Keep doing this and eventually you end up with a single digit.\n\nThe number of steps it takes to reach this point is the integer's multiplicative persistence. For example, 347 has a persistence of 3: 347 = 84, 84 = 32, 32 = 6.\n\nDevise a function that returns the per",
    "tags": [
      "numbers",
      "math",
      "recursion"
    ],
    "title": "Persistence"
  },
  {
    "_id": "hjZTbJNzKiSxTtbik",
    "difficulty": 1.614864864864865,
    "language": "python3",
    "summary": "Create a function that sorts words by a given string.\n\nExamples\nsortbystring([\"poof\", \"floof\", \"loop\"], \"flatp\")\n➞ [\"floof\", \"loop\", \"poof\"]\n\nsortbystring([\"small\", \"big\", \"medium\"], \"sazymtb\")\n➞ [\"small\", \"medium\", \"big\"]\n\nsortbystring([\"apple\", \"banana\", \"cherry\", \"date\"], \"dbca\")\n➞ [\"date\", \"banana\", \"cherry\", \"apple\"]\n\nNotes\nThe string may have excess lett",
    "tags": [
      "sorting",
      "strings"
    ],
    "title": "Sort Words by a String"
  },
  {
    "_id": "rk4nyFSXc6vcSWMWH",
    "difficulty": 1.614864864864865,
    "language": "python3",
    "summary": "Create a function that returns True if each pair of adjacent numbers in a list shares at least one digit and False otherwise.\n\nExamples\nshared_digits([33, 53, 6351, 12, 2242, 44]) ➞ True\n33 and 53 share 3, 53 and 6351 share 3 and 5, etc.\n\nshared_digits([1, 11, 12, 13, 14, 15, 16]) ➞ True\n\nshared_digits([33, 44, 55, 66, 77]) ➞ False\n\nshared_digits([1, 12, 123, ",
    "tags": [
      "arrays",
      "strings",
      "validation"
    ],
    "title": "Shared Digits"
  },
  {
    "_id": "cv5vRuexCzi4hvxdd",
    "difficulty": 1.6153846153846154,
    "language": "python3",
    "summary": "You have a dictionary with years 2015-2020 as keys and some albums released for each year as key values. Write a function that takes an album and returns the year in which it was released.\n\nExamples\nrelease_year(\"Ode to Joy\") ➞ 2019\n\nrelease_year(\"Honeymoon\") ➞ 2015\n\nreleaseyear(\"Fakealbum\") ➞ \"Unknown\"\n\nNotes\nAlbums dictionary is made for you.\nIf the album is",
    "tags": [
      "data_structures",
      "language_fundamentals"
    ],
    "title": "Reverse Dictionary"
  },
  {
    "_id": "3gziWsCxqGwGGZmr5",
    "difficulty": 1.6166666666666667,
    "language": "python3",
    "summary": "Given two integers as arguments, create a function that finds the largest prime within the range of the two integers.\n\nExamples\nfat_prime(2, 10) ➞ 7\nrange [2, 3, 4, 5, 6, 7, 8, 9, 10] and the largest prime is 7.\n\nfat_prime(10, 2) ➞ 7\n[10, 9, 8, 7, 6, 5, 4, 3, 2, 1] and the largest prime is 7.\n\nfat_prime(4, 24) ➞ 23\nrange [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, ",
    "tags": [
      "math",
      "loops",
      "logic"
    ],
    "title": "Find the Largest Prime within a Range"
  },
  {
    "_id": "YXjx9G5uQ4CdYPuB4",
    "difficulty": 1.6176470588235294,
    "language": "python3",
    "summary": "Mubashir needs your help to compare two lists.\n\nFirst list lst1 contains some numbers and second list lst2 contains squared values of numbers given in the first list.\n\nCreate a function which takes these two lists and returns True if all square values are available, False otherwise.\n\nlst1 = [121, 144, 19, 161, 19, 144, 19, 11]\nlst2 = [121, 14641, 20736, 361, 2",
    "tags": [
      "math",
      "numbers",
      "arrays",
      "interview"
    ],
    "title": "A Simple Comparison"
  },
  {
    "_id": "i98e9Czup3kbfoHm3",
    "difficulty": 1.6180758017492711,
    "language": "python3",
    "summary": "Create a function that takes a string as an argument. The function must return a string containing 1s and 0s based on the string argument's words. If any word in the argument is not equal to \"zero\" or \"one\" (case insensitive), you should ignore it. The returned string's length should be a multiple of 8, if the string is not a multiple of 8 you should remove th",
    "tags": [
      "loops",
      "logic",
      "arrays",
      "formatting"
    ],
    "title": "Convert \"Zero\" and \"One\" to \"1\" and \"0\""
  },
  {
    "_id": "MYZu2j5zKndMB2zdg",
    "difficulty": 1.6185567010309279,
    "language": "python3",
    "summary": "Given a sentence, create a function that replaces every \"a\" with \"an absolute\". It should return the string itself if it doesn't have any \"a\".\n\nExamples\nabsolute(\"I am a champion!!!\") ➞ \"I am an absolute champion!!!\"\n\nabsolute(\"Such an amazing bowler.\") ➞ \"Such an amazing bowler.\"\n\nabsolute(\"A man with no haters.\") ➞ \"An absolute man with no haters.\"\n\nNotes\nWa",
    "tags": [
      "regex",
      "conditions",
      "strings",
      "formatting"
    ],
    "title": "An Absolute"
  },
  {
    "_id": "n4JA3je7FEFfZKaWp",
    "difficulty": 1.619047619047619,
    "language": "python3",
    "summary": "You landed your dream job. They pay in geometric progression (see resources). In your first month of work, you will get your first paycheck first_month. For every month after, your paycheck will be multiplier times bigger than the previous paycheck.\n\nCreate a function that takes the first_month's paycheck and the multiplier and returns the number of months it",
    "tags": [
      "loops",
      "math",
      "algebra"
    ],
    "title": "When Will You Save a Million?"
  },
  {
    "_id": "MfypAQedEAun4oQFA",
    "difficulty": 1.6205357142857142,
    "language": "python3",
    "summary": "Each number in the Perrin sequence is created by summing the numbers two positions and three positions before it. The first three numbers are (3, 0, 2), and the sequence is extended as follows:\n\nP(0) P(1) P(2) P(3) P(4) P(5) P(6) P(7) ... P(n)\n3, 0, 2, 3, 2, 5, 5, 7, ...\n\nGiven a value for n, return the Perrin number P(n).\n\nExamples\nperrin(1) ➞ 0\n\nperrin(8) ➞",
    "tags": [
      "algorithms",
      "arrays",
      "recursion"
    ],
    "title": "The Perrin Sequence"
  },
  {
    "_id": "yYE8bJ5jhJgAoc5ir",
    "difficulty": 1.6208333333333333,
    "language": "python3",
    "summary": "Create a function that takes an integer and returns its multiplicative persistence, which is the number of times you must multiply the digits in num until you reach a single digit.\n\nExamples\nbugger(39) ➞ 3\nBecause 3 * 9 = 27, 2 * 7 = 14, 1 * 4 = 4 and 4 has only one digit.\n\nbugger(999) ➞ 4\nBecause 9 * 9 * 9 = 729, 7 * 2 * 9 = 126, 1 * 2 * 6 = 12, and finally 1",
    "tags": [
      "numbers",
      "math",
      "loops",
      "recursion"
    ],
    "title": "Persistent Little Bugger"
  },
  {
    "_id": "wNMyGvSuBucrvHrmC",
    "difficulty": 1.621212121212121,
    "language": "python3",
    "summary": "Create a function that takes a string as an argument and tells the number of repitions of a substring. It is exactly vice versa to repeating a string function (i.e. if a string \"k\" is given and asked to make a larger string \"z\" such that \"k\" is repated \"n' times).\n\nIn this scenario, we do the opposite. Given the final string, and ask the number of times the su",
    "tags": [
      "strings",
      "algorithms"
    ],
    "title": "Find Number of Repetitions of Substring"
  },
  {
    "_id": "aiSKWWjjxTeJTqxZL",
    "difficulty": 1.6222222222222222,
    "language": "python3",
    "summary": "Sadly, the mathematical world is biased in favor of square matrices. As such, this challenge will help rectangular matrices by making them square.\n\nFor example, for the matrix:\n\n[\n  [1, 2],\n  [3, 4],\n  [5, 6]\n]\n\nThis can be done by padding it with a column of zeroes on the right to get:\n\n[\n  [1, 2, 0],\n  [3, 4, 0],\n  [5, 6, 0]\n]\n\nWhile for the matrix:\n\n[\n  [1,",
    "tags": [
      "arrays",
      "language_fundamentals",
      "logic"
    ],
    "title": "Complete the Square (Matrix)"
  },
  {
    "_id": "TCQkKzgi8FFYYG4kR",
    "difficulty": 1.6266666666666667,
    "language": "python3",
    "summary": "Create a function that takes a string of words (or just one word) and converts each word from camelCase to snake_case.\n\nExamples\ncameltosnake(\"magicCarrots\") ➞ \"magic_carrots\"\n\ncameltosnake(\"greatApples for aSmellyRhino\") ➞ \"greatapples for asmelly_rhino\"\n\ncameltosnake(\"thatsGreat\") ➞ \"thats_great\"\n\nNotes\nYou won't get more than two capitals in a row (e.g. \"DI",
    "tags": [
      "strings",
      "regex",
      "formatting",
      "language_fundamentals"
    ],
    "title": "Convert camelCase to snake_case"
  },
  {
    "_id": "HDGiiCmSgJeeu3388",
    "difficulty": 1.6290322580645162,
    "language": "python3",
    "summary": "A fuse melts when a current in an electrical device exceeds the fuse's rating, breaking the circuit and preventing the heat from building up too much (which can cause a fire). The ideal fuse to choose is higher than the device's current output, yet as close as possible to it as well.\n\nGiven a list of fuse ratings, and the device's current output, return which",
    "tags": [
      "numbers",
      "algorithms"
    ],
    "title": "Choosing a Fuse"
  },
  {
    "_id": "JgD9KHBYrDnKrGJ7a",
    "difficulty": 1.6296296296296295,
    "language": "python3",
    "summary": "Mubashir is not good in python programming. By mistake, he swapped keys and data values in the dictionary.\n\nGiven a dictionary, return a dictionary with the original values and the list of keys. See below example for a better understanding:\n\nGiven Dictionary\ndict = {\n  \"Mubashir\": \"Name\",\n  \"31\": \"Age\",\n  \"Male\": \"Sex\",\n  \"Pilot\": \"Job\",\n  \"Matt\": \"Name\",\n  \"4",
    "tags": [
      "interview",
      "language_fundamentals",
      "logic",
      "functional_programming"
    ],
    "title": "Swap Dictionary"
  },
  {
    "_id": "hzs9hZXpgYdGM3iwB",
    "difficulty": 1.6308724832214765,
    "language": "python3",
    "summary": "Create a function that alternates the case of the letters in a string (known as Spongecase).\n\nExamples\nalternating_caps(\"Hello\") ➞ \"HeLlO\"\n\nalternating_caps(\"How are you?\") ➞ \"HoW aRe YoU?\"\n\nalternating_caps(\"OMG this website is awesome!\") ➞ \"OmG tHiS wEbSiTe Is AwEsOmE!\"\n\nNotes\nThe first letter should always be UPPERCASE.\nIgnore spaces.",
    "tags": [
      "conditions",
      "formatting",
      "strings"
    ],
    "title": "AlTeRnAtInG cApS"
  },
  {
    "_id": "vC7vwZdPAYqkcFH7J",
    "difficulty": 1.6333333333333333,
    "language": "python3",
    "summary": "A keyboard and a mouse cost in total  x, knowing that the keyboard costs y more than the mouse, calculate the price of the mouse. Round the price of the mouse.\n\nExamples\nKM({\"Total\": \"10.00$\", \"Difference\": \"0.40$\", \"Mouse\": \"?\"})\n➞ {\"Total\": \"10.00$\", \"Difference\":\"0.40$\", \"Mouse\": \"4.8$\"}\n\nKM({\"Total\": \"90.00$\", \"Difference\": \"5.40$\", \"Mouse\": \"?\"})\n➞ {\"Tota",
    "tags": [
      "logic",
      "math",
      "language_fundamentals"
    ],
    "title": "Key - Mouse (Logic)"
  },
  {
    "_id": "cgyHTJDW5brpXGDy6",
    "difficulty": 1.6349206349206349,
    "language": "python3",
    "summary": "Create a function that takes time1 and time2 and return how many hours have passed between the two times.\n\nExamples\nhours_passed(\"3:00 AM\", \"9:00 AM\") ➞ \"6 hours\"\n\nhours_passed(\"2:00 PM\", \"4:00 PM\") ➞ \"2 hours\"\n\nhours_passed(\"1:00 AM\", \"3:00 PM\") ➞ \"14 hours\"\n\nNotes\ntime1 will always be the starting time and time2 the ending time. Return \"no time passed\" if ti",
    "tags": [
      "strings",
      "dates"
    ],
    "title": "Hours Passed"
  },
  {
    "_id": "9ZAk3EEoQ9YPGGYhA",
    "difficulty": 1.6375,
    "language": "python3",
    "summary": "Create a function that returns any of the items you can afford in the store with the money you have in your wallet. Sort the list in alphabetical order.\n\nExamples\nitems_purchase({\n  \"Water\": \"$1\",\n  \"Bread\": \"$3\",\n  \"TV\": \"$1,000\",\n  \"Fertilizer\": \"$20\"\n}, \"$300\") ➞ [\"Bread\", \"Fertilizer\", \"Water\"]\n\nitems_purchase({\n  \"Apple\": \"$4\",\n  \"Honey\": \"$3\",\n  \"Fan\": \"",
    "tags": [
      "arrays",
      "data_structures",
      "objects"
    ],
    "title": "Got Enough Money?"
  },
  {
    "_id": "GYJcHcgbpKYE75vYd",
    "difficulty": 1.6388888888888888,
    "language": "python3",
    "summary": "Create a function that takes an integer and returns it as an ordinal number. An Ordinal Number is a number that tells the position of something in a list, such as 1st, 2nd, 3rd, 4th, 5th, etc.\n\nExamples\nreturnendof_number(553) ➞ \"553-RD\"\n\nreturnendof_number(34) ➞ \"34-TH\"\n\nreturnendof_number(1231) ➞ \"1231-ST\"\n\nreturnendof_number(22) ➞ \"22-ND\"\n\nreturnendof_numbe",
    "tags": [
      "control_flow",
      "strings",
      "numbers"
    ],
    "title": "Return the End Letters of Numbers"
  },
  {
    "_id": "EyzmkffNRiEBtjAmf",
    "difficulty": 1.6391752577319587,
    "language": "python3",
    "summary": "Write the function that takes three dimensions of a brick: height(a), width(b) and depth(c) and returns True if this brick can fit into a hole with the width(w) and height(h).\n\nExamples\ndoesbrickfit(1, 1, 1, 1, 1) ➞ True\n\ndoesbrickfit(1, 2, 1, 1, 1) ➞ True\n\ndoesbrickfit(1, 2, 2, 1, 1) ➞ False\n\nNotes\nYou can turn the brick with any side towards the hole.\nWe ass",
    "tags": [
      "conditions",
      "validation",
      "math",
      "geometry"
    ],
    "title": "Check If the Brick Fits through the Hole"
  },
  {
    "_id": "WFmZesxp2GXQcT8PE",
    "difficulty": 1.64,
    "language": "python3",
    "summary": "In Digital Cipher, encoding is done by the simple addition of numbers in the key and the corresponding characters on a string input.\n\nCreate a function that takes two arguments; a positive integer and a string and returns an encoded list of integers as message.\n\nAssign a unique number to each letter of the alphabet.\n\n a  b  c  d  e  f  g  h  i  j  k  l  m\n 1",
    "tags": [
      "cryptography",
      "algorithms",
      "logic"
    ],
    "title": "Digital Cipher"
  },
  {
    "_id": "kSHpZ3KguSDSb5cwx",
    "difficulty": 1.6411483253588517,
    "language": "python3",
    "summary": "Your local bank has decided to upgrade its ATM machines by incorporating motion sensor technology. The machines now interpret a series of consecutive dance moves in place of a PIN number.\n\nCreate a function that converts a customer's PIN number to its dance equivalent. There is one dance move per digit in the PIN number. A list of dance moves is given in the c",
    "tags": [
      "arrays",
      "strings"
    ],
    "title": "Dance for Cash"
  },
  {
    "_id": "RzrKedEonc3BJGhY5",
    "difficulty": 1.6428571428571428,
    "language": "python3",
    "summary": "Mubashir needs your help to plant some trees. He can give you three parameters of the land:\nwidth of the land w\nlength of the land l\ngap between the trees g\n\nYou have to create an algorithm to return the number of trees which can be planted on the edges of the given land in a symmetrical layout shown below (unsymmetrical gap = x, tree = o, gap = -):\n\nw=3, l=3,",
    "tags": [
      "algorithms",
      "logic",
      "numbers",
      "interview"
    ],
    "title": "Plant Trees 🌲"
  },
  {
    "_id": "4s9kNQFfk4D4Lbm4q",
    "difficulty": 1.6435643564356435,
    "language": "python3",
    "summary": "Create a function that follows the \"ABACABADABACABA\" rule up to a certain letter.\n\nThe abacabadabacaba pattern is where you start with the first letter (a), and with each new letter, you add the letter in the middle and the others at the start and end.\n\nFor instance:\n\nA ➞ A\nB ➞ ABA\nC ➞ ABACABA\nD ➞ ABACABADABACABA\nE ➞ ABACABADABACABAEABACABADABACABA\nF ➞ ABACABA",
    "tags": [
      "recursion",
      "algorithms"
    ],
    "title": "ABACABADABACABA"
  },
  {
    "_id": "ozMMLxJRPXBwm3yTP",
    "difficulty": 1.6456692913385826,
    "language": "python3",
    "summary": "Create a function that checks if a given integer is exactly the factorial of an  integer or not. True if it is, False otherwise.\n\nExamples\nis_factorial(2) ➞ True\n2 = 2 * 1 = 2!\n\nis_factorial(27) ➞ False\n\nis_factorial(24) ➞ True\n24 = 4 * 3 * 2 * 1 = 4!\n\nNotes\nNo error handling is necessary. Inputs are all positive integers.\nAlternatively, you can solve this wit",
    "tags": [
      "math",
      "loops",
      "validation",
      "recursion"
    ],
    "title": "Is the Input Factorial of an Integer?"
  },
  {
    "_id": "sw5LQa7meG4DGzaeg",
    "difficulty": 1.6470588235294117,
    "language": "python3",
    "summary": "Mubashir was reading about  currying functions. He needs your help to multiply a list of numbers using currying functions.\n\nCreate a function which takes a list lst of integers as an argument. This function must return another function, which takes a single integer as an argument and returns a new list.\n\nThe returned list should consist of each of the elements",
    "tags": [
      "functional_programming",
      "arrays",
      "interview",
      "numbers",
      "closures"
    ],
    "title": "Currying Functions"
  },
  {
    "_id": "eKJ8E6wnd9GMWxGaZ",
    "difficulty": 1.65,
    "language": "python3",
    "summary": "Given a number, return a string which is formatted into US Dollars and cents!\n\nRemember that:\nYou should round to two digits after the decimal point (even for integers).\nThousandths should be separated by commas.\n\nExamples\ndolladollabills(10) ➞ \"$10.00\"\n\ndolladollabills(1000000) ➞ \"$1,000,000.00\"\n\ndolladollabills(-314159.2653) ➞ \"-$314,159.27\"\n\ndolladollabills",
    "tags": [
      "formatting",
      "strings",
      "numbers"
    ],
    "title": "Money Formatting"
  },
  {
    "_id": "GX3pQxvbTJApWYgRJ",
    "difficulty": 1.6513157894736843,
    "language": "python3",
    "summary": "A Kaprekar Number is a positive integer that is equal to a number formed by first squaring, then splitting and summing its two lexicographical parts:\n\nIf the quantity of digits of the squared number is even, the left and right parts will have the same length.\nIf the quantity of digits of the squared number is odd, then the right part will be the longer half, w",
    "tags": [
      "numbers",
      "strings"
    ],
    "title": "Kaprekar Numbers"
  },
  {
    "_id": "LQgpGFMK9t9MELvph",
    "difficulty": 1.6515151515151516,
    "language": "python3",
    "summary": "Given a square list (n\\*n size) implement a function that returns a new list containing two lists equal to the two diagonals, in the following order:\n\ndiagonal 1 = from upper-left to lower-right corner\ndiagonal 2 = from upper-right to lower-left corner\n\nExamples\nget_diagonals([ [1, 2], [3, 4] ]) ➞ [ [1, 4], [2, 3] ]\n\nget_diagonals([ [\"a\", \"b\", \"c\"], [\"d\", \"e\",",
    "tags": [
      "arrays",
      "loops",
      "language_fundamentals"
    ],
    "title": "Get the Diagonals"
  },
  {
    "_id": "6FaERG8x8Y6MYmoYF",
    "difficulty": 1.6527777777777777,
    "language": "python3",
    "summary": "Greed is a dice game played with five six-sided dices. Your mission is to score a throw according to these rules:\n\n Three 1's => 1000 points\n Three 6's =>  600 points\n Three 5's =>  500 points\n Three 4's =>  400 points\n Three 3's =>  300 points\n Three 2's =>  200 points\n One   1   =>  100 points\n One   5   =>   50 point\n\nSee the below examples for a better und",
    "tags": [
      "numbers",
      "validation",
      "games"
    ],
    "title": "Dice Score"
  },
  {
    "_id": "epMcaSNzBFSF5uB89",
    "difficulty": 1.6544502617801047,
    "language": "python3",
    "summary": "You are given a list of scores. The even-indexed numbers are your scores at each turn. The odd-indexed numbers are your opponent's scores.\n\nCreate a function that turns this list of scores into a list of who is currently winning.\n\nTo illustrate (You - Y, Opponent - O):\n\nScores: [5, 15, 17, 35, 16, 40, 66, 12, 10, 9]\n\nY scores: [5, 17, 16, 66, 10]\nO scores: [15",
    "tags": [
      "arrays",
      "loops"
    ],
    "title": "Who is Currently Winning"
  },
  {
    "_id": "7RrPMoWifqRHPPqj2",
    "difficulty": 1.6545454545454545,
    "language": "python3",
    "summary": "Traditional safes use a three-wheel locking mechanism, with the safe combination entered using a dial on the door of the safe. The dial is marked with clockwise increments between 0 and 99. The three-number combination is entered by first dialling to the right (clockwise), then to the left (anti-clockwise), and then to the right (clockwise) again. Combination",
    "tags": [
      "language_fundamentals",
      "math",
      "arrays"
    ],
    "title": "Safecracker"
  },
  {
    "_id": "QCgDtyfajCT4PGhFK",
    "difficulty": 1.6549295774647887,
    "language": "python3",
    "summary": "Write a function that returns the extended form of the prime factorization of a number. Return in the format [a, b, c, d, ...], where each element of the list is an integer.\n\nExamples\nprime_factorization(216) ➞ [2, 2, 2, 3, 3, 3]\n\nprime_factorization(64) ➞ [2, 2, 2, 2, 2, 2]\n\nprime_factorization(23) ➞ [23]\n\nNotes\nN/A",
    "tags": [
      "numbers",
      "math"
    ],
    "title": "List of Prime Factors"
  },
  {
    "_id": "gdzS7pXsPexY8j4A3",
    "difficulty": 1.6566265060240963,
    "language": "python3",
    "summary": "Create a function that takes in a list of integers and returns the number of even or odd digits for each number, depending on the parameter.\n\nExamples\ncount_digits([22, 53, 99, 61, 777, 8], \"odd\") ➞ [0, 2, 2, 1, 3, 0]\n\ncount_digits([22, 53, 99, 61, 777, 8], \"even\") ➞ [2, 0, 0, 1, 0, 1]\n\ncount_digits([54, 113, 89, 10], \"odd\") ➞ [1, 3, 1, 1]\n\ncount_digits([54, 1",
    "tags": [
      "arrays",
      "higher_order_functions"
    ],
    "title": "Number of Even or Odd Digits"
  },
  {
    "_id": "tMiJJkuAFDfsdmdZK",
    "difficulty": 1.6588235294117648,
    "language": "python3",
    "summary": "Create two functions tocamelcase() and tosnakecase() that each take a single string and convert it into either camelCase or snake_case. If you're not sure what these terms mean, check the Resources tab above.\n\nExamples\ntocamelcase(\"hello_edabit\") ➞ \"helloEdabit\"\n\ntosnakecase(\"helloEdabit\") ➞ \"hello_edabit\"\n\ntocamelcase(\"ismodalopen\") ➞ \"isModalOpen\"\n\ntosnakeca",
    "tags": [
      "algorithms",
      "regex",
      "formatting",
      "strings"
    ],
    "title": "camelCase  ⇄  snake_case"
  },
  {
    "_id": "jjPGM3a22AgzcBFCx",
    "difficulty": 1.6650717703349283,
    "language": "python3",
    "summary": "Our fleet managed to get one of the enemy's top-secret codes from the remains of its fallen ship. The codes were immediately sent over to our code-breaking base over at Bleckley Park ;) for analysis. The team found that each code contains 25 numbers with one missing. The missing number corresponds to a letter in the English alphabet. Your job is to find a more",
    "tags": [
      "cryptography",
      "logic",
      "numbers",
      "arrays"
    ],
    "title": "Crypto Wars: Missing Number"
  },
  {
    "_id": "Cm9fAzNkWWdzit23N",
    "difficulty": 1.6650943396226414,
    "language": "python3",
    "summary": "\n\nThe wave (known as a Mexican wave in the English-speaking world outside North America) is an example of metachronal rhythm achieved in a packed stadium when successive groups of spectators briefly stand, yell, and raise their arms.\n\nCreate a function that takes a string and turns it into a Mexican Wave.\n\nExamples\nwave(\"edabit\") ➞ [\"Edabit\", \"eDabit\", \"edAbit",
    "tags": [
      "loops",
      "arrays",
      "strings"
    ],
    "title": "Mexican Wave Simulator"
  },
  {
    "_id": "yKMxg88HGXmLhirht",
    "difficulty": 1.6666666666666667,
    "language": "python3",
    "summary": "Create a function add_letters that takes a list/array of letters a, and returns the \"sum\" of them.\n\nTo add two letters, take their number value, add them together, and convert it back together. For example, a would be 1, b would be 2, etc. So to add b and c, take 2 + 3 = 5, and then get the fifth letter of the alphabet (e).\n\nSo then d + e + f would be 4 + 5 +",
    "tags": [
      "arrays",
      "logic"
    ],
    "title": "Adding Up Letters"
  },
  {
    "_id": "yXipH35Xv4cBa8pnm",
    "difficulty": 1.6666666666666667,
    "language": "python3",
    "summary": "In microwave ovens, when buttons are pressed from 0-9, it will add that number to the microwave oven timer (starting from the left). All microwave ovens have the functionality where you can hit a \"+30\" button and it will add 30 seconds to the timer to cook your food. If you want to heat something for 5 mins, you can hit the \"+30\" button 10 times instead of thi",
    "tags": [
      "numbers",
      "validation",
      "math"
    ],
    "title": "Microwave Buttons"
  },
  {
    "_id": "JXnrdo4naPg9pYSvm",
    "difficulty": 1.6703296703296704,
    "language": "python3",
    "summary": "Given a fraction (given in the format \"1/2\" for example) and n number of decimal places, return a sentence in the following format:\n\n\"{fraction} rounded to {n} decimal places is {answer}\"\n\nExamples\nfrac_round(\"1/3\", 5) ➞ \"1/3 rounded to 5 decimal places is 0.33333\"\n\nfrac_round(\"2/8\", 4) ➞ \"2/8 rounded to 4 decimal places is 0.2500\"\n\nfrac_round(\"22/7\", 2) ➞ \"22",
    "tags": [
      "formatting",
      "strings",
      "numbers"
    ],
    "title": "Fractions and Rounding"
  },
  {
    "_id": "kdhgEC2ECXAfoXWQP",
    "difficulty": 1.6715328467153285,
    "language": "python3",
    "summary": "In this challenge, you have to obtain a sentence from the elements of a given matrix. In the matrix, each word of the sentence follows a columnar order from the top to the bottom, instead of the usual left-to-right order: it's time for transposition!\n\nGiven a matrix mtx, implement a function that returns the complete sentence as a string, with the words separa",
    "tags": [
      "arrays"
    ],
    "title": "Enter the Matrix"
  },
  {
    "_id": "6rztMMwkt6ijzqcF6",
    "difficulty": 1.6734693877551021,
    "language": "python3",
    "summary": "This challenge concerns strings such as:\n\n\"repeatedrepeatedrepeated\"\n\n... that are obtained by repeating a smaller string, which in this case is the string \"repeated\".\n\nOn a related note, since the string above is made of 3 repetitions, one way to produce this string is via the code 3 * \"repeated\".\n\nWrite a function that, given a string, either:\nReturns False",
    "tags": [
      "strings",
      "language_fundamentals",
      "numbers"
    ],
    "title": "💥repeatedrepeatedrepeated💥"
  },
  {
    "_id": "wYcTcJSQJzca39apZ",
    "difficulty": 1.677685950413223,
    "language": "python3",
    "summary": "Create a function that takes a string (the string to truncate) and a number (the maximum length of the truncated string) as arguments and returns the truncated string at the given length.\n\nExamples\ntruncate(\"Lorem ipsum dolor sit amet.\", 11) ➞ \"Lorem ipsum\"\n\ntruncate(\"Lorem ipsum dolor sit amet.\", 16) ➞ \"Lorem ipsum\"\n\ntruncate(\"Lorem ipsum dolor sit amet.\", 17",
    "tags": [
      "strings",
      "formatting"
    ],
    "title": "Truncate String at a Given Length"
  },
  {
    "_id": "39utPCHvtWqt5vaz9",
    "difficulty": 1.6790123456790123,
    "language": "python3",
    "summary": "You will be given a list of string \"east\" formatted differently every time. Create a function that returns \"west\" wherever there is \"east\". Format the string according to the input. Check the examples below to better understand the question.\n\nExamples\ndirection([\"east\", \"EAST\", \"eastEAST\"]) ➞ [\"west\", \"WEST\", \"westWEST\"]\n\ndirection([\"eAsT EaSt\", \"EaSt eAsT\"])",
    "tags": [
      "arrays",
      "strings",
      "regex",
      "formatting"
    ],
    "title": "East or West"
  },
  {
    "_id": "ADb5MFBAHiu5p83zv",
    "difficulty": 1.681081081081081,
    "language": "python3",
    "summary": "Create a function that takes a number of a guitar string and the number of the fret and returns the corresponding frequency of the note.\n\nCheck the Resources Tab, for the correct frequencies per string.\nThe formula to calculate the frequency is: String Frequency * 2**(fret/12).\nRound the frequency to the nearest hundreth.\nFor this challenge, we use \"Standard T",
    "tags": [
      "math",
      "numbers",
      "algorithms"
    ],
    "title": "Fret Frequencies on the Guitar"
  },
  {
    "_id": "g3BokS6KZgyYT8Hjm",
    "difficulty": 1.6857142857142857,
    "language": "python3",
    "summary": "The left shift operation is similar to multiplication by powers of two, thus, the process is repetitive and can be done recursively.\n\nSample calculation using the left shift operator ( << ):\n10 << 3 = 10 * 2^3 = 10 * 8 = 80\n-32 << 2 = -32 * 2^2 = -32 * 4 = -128\n5 << 2 = 5 * 2^2 = 5 * 4 = 20\n\nWrite a recursive function that mimics (without the use of <<) the le",
    "tags": [
      "recursion",
      "bit_operations",
      "numbers"
    ],
    "title": "Recursion: Left Shift By Powers of Two"
  },
  {
    "_id": "neZRK58MeM3b5kMzL",
    "difficulty": 1.6865671641791045,
    "language": "python3",
    "summary": "A company asks a small-scale manufacturer to produce packaging in which they can ship their cooking oil. The company also gives the design for how the vessel should look (the shaded portion filled in the image below). Depending upon the volume of oil to be packaged, the company requires vessels of varying height.\n\nCreate a function to determine what the height",
    "tags": [
      "algorithms",
      "logic",
      "math",
      "numbers",
      "geometry"
    ],
    "title": "Make a Vessel of Height"
  },
  {
    "_id": "HNjRjrNPueF5vRh9S",
    "difficulty": 1.6875,
    "language": "python3",
    "summary": "The Hamming Code is used to correct errors in data transmissions. Create a function that takes a string containing the message and returns an encoded message using hamming code.\n\nThere are some variations on the rules of encipherment. One version of the cipher rules are outlined below:\n\nhamming_code(\"hey\") ➞\n\"000111111000111000000000000111111000000111000111000",
    "tags": [
      "cryptography",
      "numbers",
      "strings",
      "logic"
    ],
    "title": "Hamming Code"
  },
  {
    "_id": "pSrCZFim6Y8HcS9Yc",
    "difficulty": 1.6887417218543046,
    "language": "python3",
    "summary": "Create a function that converts Celsius to Fahrenheit and vice versa.\n\nExamples\nconvert(\"35C\") ➞ \"95F\"\n\nconvert(\"19F\") ➞ \"-7C\"\n\nconvert(\"33\") ➞ \"Error\"\n\nNotes\nRound to the nearest integer.\nIf the input is incorrect, return \"Error\".\nFor the formulae to convert back and forth, check the Resources tab.",
    "tags": [
      "algorithms",
      "numbers",
      "math",
      "control_flow"
    ],
    "title": "Temperature Converter"
  },
  {
    "_id": "pEozhEet5c8aFJdso",
    "difficulty": 1.6901408450704225,
    "language": "python3",
    "summary": "Create a function that, given a string with at least three characters, returns an array of its:\n\nLength.\nFirst character.\nLast character.\nMiddle character, if the string has an odd number of characters. Middle TWO characters, if the string has an even number of characters.\nIndex of the second occurrence of the second character in the format \"@ index #\" and \"no",
    "tags": [
      "strings",
      "arrays"
    ],
    "title": "All About Strings"
  },
  {
    "_id": "6BXmvwJ5SGjby3x9Z",
    "difficulty": 1.6911764705882353,
    "language": "python3",
    "summary": "Create a function that takes time1 and time2 and return how many hours have passed between the two times.\n\nExamples\nhours_passed(\"3:00 AM\", \"9:00 AM\") ➞ \"6 hours\"\n\nhours_passed(\"2:00 PM\", \"4:00 PM\") ➞ \"2 hours\"\n\nhours_passed(\"1:00 AM\", \"3:00 PM\") ➞ \"14 hours\"\n\nNotes\ntime1 will always be the starting time and time2 the ending time.\nReturn \"no time passed\" if ti",
    "tags": [
      "strings",
      "data_structures",
      "dates"
    ],
    "title": "Amateur Hour"
  },
  {
    "_id": "Wm8Zin8gQGsupNmbJ",
    "difficulty": 1.6940639269406392,
    "language": "python3",
    "summary": "Create a function that takes a string of 1's and 0's (binary) as an argument and return the equivalent decoded ASCII text. Characters can be in the range of \"00000000\" to \"11111111\", which means every eight digits of binary input represents a single character.\n\na = 01100001\nb = 01100010\nc = 01100011\n\nIf you were to combine these characters into the string \"abc",
    "tags": [
      "strings",
      "formatting"
    ],
    "title": "Binary to ASCII Conversion"
  },
  {
    "_id": "qKBfL9pQBaqXvKTfW",
    "difficulty": 1.702127659574468,
    "language": "python3",
    "summary": "Create a function that takes a list as an argument and return a list of the sum of each of its slices. A list's slices are groups of consecutive values that add up to a maximum of 100. No slice's total sum should exceed 100.\n\nExamples\nsumofslices([10, 29, 13, 14, 15, 16, 17, 31, 20, 10, 29, 13, 14, 15, 16, 17, 31, 20, 100])\n➞ [97, 78, 87, 68, 100]\n\nFirst slice",
    "tags": [
      "algorithms",
      "arrays",
      "loops"
    ],
    "title": "Sum of Slices of a List (Part 1)"
  },
  {
    "_id": "CNpZrDFf3Ct7MzQrw",
    "difficulty": 1.7065637065637065,
    "language": "python3",
    "summary": "Create a function that takes two integers and returns true if a digit repeats three times in a row at any place in num1 AND that same digit repeats two times in a row in num2.\n\nExamples\ntrouble(451999277, 41177722899) ➞ True\n\ntrouble(1222345, 12345) ➞ False\n\ntrouble(666789, 12345667) ➞ True\n\ntrouble(33789, 12345337) ➞ False\n\nNotes\nYou can expect every test cas",
    "tags": [
      "validation",
      "algorithms",
      "regex"
    ],
    "title": "Triple + Double = So Much Trouble"
  },
  {
    "_id": "htpi99zeTsvjWNujz",
    "difficulty": 1.7083333333333333,
    "language": "python3",
    "summary": "Given two integers a and b, return how many times a can be halved while still being greater than b.\n\nExamples\nhalve_count(4666, 544) ➞ 3\n(4666 -> 2333 -> 1166.5 -> 583.25)\n\nhalve_count(624, 8) ➞ 6\n(624 -> 312 -> 156 -> 78 -> 39 -> 19.5 -> 9.75)\n\nhalve_count(1000, 3) ➞ 8\n(1000 -> 500 -> 250 -> 125 -> 62.5 -> 31.25 -> 15.625 -> 7.8125 -> 3.90625)\n\nNotes\nInteger",
    "tags": [
      "recursion",
      "numbers"
    ],
    "title": "Recursion: Halve and Halve Again"
  },
  {
    "_id": "W73q9yML66xXbFfGY",
    "difficulty": 1.7096774193548387,
    "language": "python3",
    "summary": "A coloured triangle is created from different rows of colours (Red, Green or Blue). Successive rows, each containing one fewer colour than the last, are generated by considering the two touching colours in the previous row. If these colours are identical, the same colour is used in the new row. If colours are different, the missing colour is used in the new ro",
    "tags": [
      "games",
      "language_fundamentals",
      "strings"
    ],
    "title": "Coloured Triangles"
  },
  {
    "_id": "KcD3bABvuryCfZAYv",
    "difficulty": 1.71,
    "language": "python3",
    "summary": "Write a function that returns the most frequent character in a list of words.\n\nExamples\nmostfrequentchar([\"apple\", \"bandage\", \"yodel\", \"make\"])\n➞ [\"a\", \"e\"]\n\nmostfrequentchar([\"music\", \"madness\", \"maniac\", \"motion\"])\n➞ [\"m\"]\n\nmostfrequentchar([\"the\", \"hills\", \"are\", \"alive\", \"with\", \"the\", \"sound\", \"of\", \"music\"])\n➞ [\"e\", \"h\", \"i\"]\n\nNotes\nIf multiple character",
    "tags": [
      "arrays",
      "strings",
      "regex"
    ],
    "title": "Return the Most Frequent Character"
  },
  {
    "_id": "LMJ6HEjMuLpTd6Zzs",
    "difficulty": 1.71,
    "language": "python3",
    "summary": "A named capturing group will match \"x\" in (?Px) and will store the match under the name name.\n\nLet's see an example. To extract the United States area code from a phone number, we could use:\n\ntxt = \"(214) 987-6482\"\nm = re.match(\"\\((?P\\d{3})\\)\", txt)\n\nm.group(\"area\") ➞ 214\n\nWrite a regular expression to match the year, month and day in a string. Store the match",
    "tags": [
      "regex",
      "formatting"
    ],
    "title": "RegEx XXII: Named Groups"
  },
  {
    "_id": "NpJMkLRfApRCK7Js6",
    "difficulty": 1.7112676056338028,
    "language": "python3",
    "summary": "Create a recursive function that determines whether a word is a palindrome or not.\n\nExamples\nis_palindrome(\"madam\") ➞ true\n\nis_palindrome(\"adieu\") ➞ false\n\nis_palindrome(\"rotor\") ➞ true\n\nNotes\nAll inputs are in lowercase.\nYou are expected to solve this challenge via recursion.\nYou can check on the Resources tab for more details about recursion.",
    "tags": [
      "recursion",
      "strings",
      "validation"
    ],
    "title": "Recursion: Palindrome Word"
  },
  {
    "_id": "tX5ZhY5EkduHAPZBh",
    "difficulty": 1.7117117117117118,
    "language": "python3",
    "summary": "Given a list of integers lst, implement a function that returns the index of the number nearest to the given value n. If two numbers equally distant from n are found, the function will return the greatest of them.\n\nExamples\nnearest_element(10, [1, 100, 1000]) ➞ 0\n1 is the number nearest to 10.\n\nnearest_element(50, [100, 49, 51]) ➞ 2\n49 and 51 are equally dista",
    "tags": [
      "arrays",
      "loops"
    ],
    "title": "The Nearest Element"
  },
  {
    "_id": "7Wv3FjAZAL5gqKquG",
    "difficulty": 1.7125,
    "language": "python3",
    "summary": "Create a function that returns an Earned Run Average (ERA). An ERA is calculated by multiplying 9 by the quotient of Earned Runs Allowed er divided by ip Innings Pitched.\n\nIn baseball statistics, innings are represented with a fractional part of .1 (1/3) or .2 (2/3) to represent the number of outs in an inning. A whole number or a number with a fractional part",
    "tags": [
      "math",
      "strings",
      "numbers"
    ],
    "title": "Calculate an Earned Run Average"
  },
  {
    "_id": "oLmAshdKHWLP3ck7e",
    "difficulty": 1.7142857142857142,
    "language": "python3",
    "summary": "Given a list of numbers, return the pair of numbers that give the minimum absolute difference. Return the pair as a list, sorted in ascending order. If multiple pairs have the same difference, return the pair with the smallest sum.\n\nExamples\nmindifferencepair([40, 16, 8, 17, 15]) ➞ [15, 16]\n[15, 16] has smaller sum than [16, 17]\n\nmindifferencepair([1, -31, -27",
    "tags": [
      "arrays",
      "language_fundamentals"
    ],
    "title": "Minimum Difference Pair"
  },
  {
    "_id": "w4fikTnBs8zhuLRY4",
    "difficulty": 1.7142857142857142,
    "language": "python3",
    "summary": "In abstract set theory, a construction due to von Neumann represents the natural numbers by sets, as follows:\n\n0 = \\[ \\] is the empty set\n1 = 0 ∪ \\[ 0 \\] = \\[ 0 \\] = \\[ \\[ \\] \\]\n2 = 1 ∪ \\[ 1 \\] = \\[ 0, 1 \\] = \\[ \\[ \\], \\[ \\[ \\] \\] \\]\nn = n−1 ∪ \\[ n−1 \\] = ...\n\nWrite a function that receives an integer n and produces the representing set.\n\nExamples\nrep_set(0) ➞",
    "tags": [
      "arrays",
      "math",
      "numbers",
      "recursion"
    ],
    "title": "Natural Emptiness"
  },
  {
    "_id": "M8jNckAgpC5ZFkhhG",
    "difficulty": 1.7194444444444446,
    "language": "python3",
    "summary": "Create a function that finds the reverse complement of a ribonucleic acid (RNA) strand. The RNA will be represented as a string containing only the characters \"A\", \"C\", \"G\" and \"U\". Since RNA can only (canonically) allow pairings of A/U and G/C, the complement of an RNA would be as follows:\n\nOriginal | Complement\n:--- | :---\n\"AAA\" | \"UUU\"\n\"UUU\" | \"AAA\"\n\"GGG\" |",
    "tags": [
      "algorithms",
      "arrays",
      "control_flow"
    ],
    "title": "RNA Reverse Complement"
  },
  {
    "_id": "Amjj4KNzaBEGk76P3",
    "difficulty": 1.72,
    "language": "python3",
    "summary": "Mubashir was testing how atoms can react in their ionic state during nuclear fusion. He observed that atoms can introduce different elements with Hydrogen at high temperatures and inside a pressurized chamber. During his experiment, elements started precipitating inside the chamber. Help him find the total number of molecules of Water H2O, Carbon Dioxide CO2 a",
    "tags": [
      "conditions",
      "math",
      "numbers",
      "logic"
    ],
    "title": "Chemical Reactions"
  },
  {
    "_id": "vfuZia9ufckGzhGZh",
    "difficulty": 1.7211538461538463,
    "language": "python3",
    "summary": "Create a function that determins if a given sequence is linear, quadratic or cubic. The input will be a list of numbers of varied lengths. The function should return \"Linear\", \"Quadratic\" or \"Cubic\".\n\nExamples\nseq_level(1, 2, 3, 4, 5) ➞ \"Linear\"\n\nseq_level(3, 6, 10, 15, 21) ➞ \"Quadratic\"\n\nseq_level(4, 14, 40, 88, 164) ➞ \"Cubic\"\n\nNotes\nN/A",
    "tags": [
      "recursion",
      "algorithms",
      "math"
    ],
    "title": "Is the Sequence Linear, Quadratic or Cubic?"
  },
  {
    "_id": "yGhSu82pSoGjZCRDy",
    "difficulty": 1.7215189873417722,
    "language": "python3",
    "summary": "A number is left-heavy if the digits on the left side are larger than the digits on the right. It is right-heavy if the digits on the right side are larger than the digits on the left. Else, it is balanced.\n\nCreate a function that takes in an integer and classifies it into one of the three mutually exclusive categories: left, right or balanced. For inputs with",
    "tags": [
      "numbers",
      "arrays"
    ],
    "title": "Numeric Seesaw"
  },
  {
    "_id": "hpJsoWBBHWKZ9NcAi",
    "difficulty": 1.7282608695652173,
    "language": "python3",
    "summary": "In the world of birding there are four-letter codes for the common names of birds. These codes are created by some simple rules:\n\nIf the bird's name has only one word, the code takes the first four letters of that word.\nIf the name is made up of two words, the code takes the first two letters of each word.\nIf the name is made up of three words, the code is cre",
    "tags": [
      "arrays",
      "regex",
      "strings"
    ],
    "title": "Bird Names to Four Letter Bird Codes"
  },
  {
    "_id": "pyMScvcjbxG7rMcNT",
    "difficulty": 1.7282608695652173,
    "language": "python3",
    "summary": "Create a function that takes a list and returns the sum of all the items in that list.\n\nExamples\nsum_list([1, 2, 3]) ➞ 6\n1 + 2 + 3 = 6\n\nsum_list([1, [2, [1]], 3]) ➞ 7\n1 + 2 + 1 + 3 = 7\n\nNotes\nAn item in the list can be another list.\nTry solving it in a recursive approach without using the built-in sum() function.",
    "tags": [
      "arrays",
      "language_fundamentals",
      "recursion"
    ],
    "title": "Sum of the Items in a List"
  },
  {
    "_id": "bfz7kTgPujtfcHR9d",
    "difficulty": 1.7357142857142858,
    "language": "python3",
    "summary": "Create a function which replaces all the x's in the string in the following ways:\n\nReplace all x's with \"cks\" UNLESS:\nThe word begins with \"x\", therefore replace it with \"z\".\nThe word is just the letter \"x\", therefore replace it with \"ecks\".\n\nExamples\nx_pronounce(\"Inside the box was a xylophone\") ➞ \"Inside the bocks was a zylophone\"\n\nx_pronounce(\"The x ray is",
    "tags": [
      "strings",
      "formatting",
      "conditions",
      "regex"
    ],
    "title": "Pronouncing the Xs"
  },
  {
    "_id": "2Tr4gAzWimWvGpJW7",
    "difficulty": 1.736842105263158,
    "language": "python3",
    "summary": "Given a list of random digits of any length, return if the number n appears times times in a row.\n\nWorked Example\nisthereconsecutive([1, 3, 5, 5, 3, 3, 1], 3, 2) ➞ True\nSecond parameter is the number to look out for (3).\nThird parameter means you need to find the number 3 twice in a row.\nReturn True if it can be found.\n\nExamples\nisthereconsecutive([1, 2, 3, 4,",
    "tags": [
      "arrays",
      "numbers",
      "validation"
    ],
    "title": "Consecutive Numbers"
  },
  {
    "_id": "dWeA6vWdrPYtwhxoS",
    "difficulty": 1.7432432432432432,
    "language": "python3",
    "summary": "Create a function that takes a multidimensional list and returns the total count of numbers in that list.\n\nExamples\ncount_number([[\"\", 17.2, 5, \"edabit\"]]) ➞ 2\n17.2 and 5.\n\ncount_number([[[[[2, 14]]], 2, 3, 4]]) ➞ 5\n2, 14, 2, 3 and 4.\n\ncount_number([[\"number\"]]) ➞ 0\n\nNotes\nInput may be a list of numbers, strings and empty lists.",
    "tags": [
      "language_fundamentals",
      "arrays",
      "recursion",
      "data_structures",
      "regex"
    ],
    "title": "Total Count of Numbers  in a MultiDimensional List"
  },
  {
    "_id": "wyr9gCiBtFM7YLauK",
    "difficulty": 1.7445887445887447,
    "language": "python3",
    "summary": "Create a function that takes a list of strings representing times ('hours:minutes:seconds') and returns their sum as a list of integers ([hours, minutes, seconds]).\n\nExamples\ntime_sum([\"1:23:45\"]) ➞ [1, 23, 45]\n\ntime_sum([\"1:03:45\", \"1:23:05\"]) ➞ [2, 26, 50]\n\ntime_sum([\"5:39:42\", \"10:02:08\", \"8:26:33\"]) ➞ [24, 8, 23]\n\nNotes\nIf the input is an empty list, retur",
    "tags": [
      "arrays",
      "loops",
      "algorithms"
    ],
    "title": "Sum of a List of Times"
  },
  {
    "_id": "ysgbRFTPujx8v37yF",
    "difficulty": 1.7457627118644068,
    "language": "python3",
    "summary": "Imagine this triangle:\n\n    1\n   2 3\n  4 5 6\n 7 8 9 10\n...\n\nCreate a function that takes a number n and returns the sum of all numbers in nth row.\n\nExamples\nrow_sum(1) ➞ 1\n\nrow_sum(2) ➞ 5\n\nrow_sum(4) ➞ 34\n\nNotes\n1 <= N <= 1000",
    "tags": [
      "algorithms",
      "logic",
      "math",
      "numbers",
      "recursion"
    ],
    "title": "Simple Row Sum"
  },
  {
    "_id": "srEFhCNueikMKs3oT",
    "difficulty": 1.746031746031746,
    "language": "python3",
    "summary": "Create a function that takes a number n as an argument and checks whether the given number can be expressed as a sum of two or more consecutive positive numbers.\n\nExamples\nconsecutiveSum(9) ➞ True\n9 can be expressed as a sum of (2 + 3 + 4) or (4 + 5).\n\nconsecutiveSum(10) ➞ True\n10 can be expressed as a sum of 1 + 2 + 3 + 4.\n\nconsecutiveSum(64) ➞ False\n\nNotes\nN",
    "tags": [
      "math",
      "numbers",
      "logic",
      "validation",
      "bit_operations"
    ],
    "title": "Consecutive Sum Check"
  },
  {
    "_id": "pDQ8sTXDxesqiTRuY",
    "difficulty": 1.7473684210526317,
    "language": "python3",
    "summary": "Write a regular expression that will help us count how many tall people work in your company. You must use RegEx positive lookbehind.\n\nExample\nlst = [\"tall height\", \"tall height\", \"short height\", \"medium height\", \"tall height\"]\npattern = \"yourregularexpressionhere\"\n\nlen(re.findall(pattern, \", \".join(lst))) ➞ 3\n\nNotes\nYou don't need to write a function just the",
    "tags": [
      "language_fundamentals",
      "formatting",
      "regex"
    ],
    "title": "RegEx VI: Positive lookbehind"
  },
  {
    "_id": "zzibM5MaxDNvQCrEk",
    "difficulty": 1.7675350701402806,
    "language": "python3",
    "summary": "A ship has to transport cargo from one place to another, while picking up cargo along the way. Given the total amount of cargo and the types of cargo holds in the ship as lists, create a function that returns True if each weight of cargo can fit in one hold, and False if it can't.\n\n\"S\" means 50 cargo space.\n\"M\" means 100 cargo space.\n\"L\" means 200 cargo space.",
    "tags": [
      "arrays",
      "logic",
      "numbers",
      "strings",
      "validation"
    ],
    "title": "Does the Cargo Fit? (Part 2)"
  },
  {
    "_id": "joCBaJztZrdxi9HjR",
    "difficulty": 1.7711598746081505,
    "language": "python3",
    "summary": "Try to imagine a world in which you might have to stay home for 14 days at any given time. Do you have enough TP to make it through?\n\nAlthough the number of squares per roll of TP varies significantly, we'll assume each roll has 500 sheets, and the average person uses 57 sheets per day.\n\nCreate a function that will receive a dictionary with two key/values:\n\"pe",
    "tags": [
      "objects",
      "math",
      "conditions"
    ],
    "title": "Can You Spare a Square?"
  },
  {
    "_id": "aW8mz7Tky3gGiuQsX",
    "difficulty": 1.7716535433070866,
    "language": "python3",
    "summary": "Given a positive number x:\np = (p1, p2, …)\nSet of prime factors of x\nIf the square of every item in p is also a factor of x, then x is said to be a powerful number.\n\nCreate a function that takes a number and returns True if it's powerful, False if it's not.\n\nExamples\nis_powerful(36) ➞ True\np = (2, 3) (prime factors of 36)\n2^2 = 4 (factor of 36)\n3^2 = 9 (factor",
    "tags": [
      "conditions",
      "math",
      "numbers",
      "validation"
    ],
    "title": "Powerful Numbers"
  },
  {
    "_id": "temD7SmTyhdmME75i",
    "difficulty": 1.7872763419483102,
    "language": "python3",
    "summary": "Create a function that converts a word to a bitstring and then to a boolean list based on the following criteria:\n\nLocate the position of the letter in the English alphabet (from 1 to 26).\nOdd positions will be represented as 1 and 0 otherwise.\nConvert the represented positions to boolean values, 1 for True and 0 for False.\nStore the conversions into an array.",
    "tags": [
      "strings",
      "objects",
      "arrays"
    ],
    "title": "Word to Bitstring to Boolean List"
  },
  {
    "_id": "qgtKJx6tEMwP4JSAQ",
    "difficulty": 1.796875,
    "language": "python3",
    "summary": "Jack and Jill are twins.  When they are 10 years of age, Jack leaves earth in his spaceship bound for Altair IV, some 17 light-years distant. Though not equipped with warp drive, Jack's ship is still capable of attaining near light speed.  When he returns to earth he finds that Jill has grown to adulthood while he, Jack, remains a young boy.\n\nAlbert Einstein h",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "The Twins Paradox"
  },
  {
    "_id": "MtktG9Dz7z9vBCFYM",
    "difficulty": 1.8600451467268624,
    "language": "python3",
    "summary": "Write a function that takes an IP address and returns the domain name using PTR DNS records.\n\nExample\nget_domain(\"8.8.8.8\") ➞ \"dns.google\"\n\nget_domain(\"8.8.4.4\") ➞ \"dns.google\"\n\nNotes\nYou may want to import socket.\nDon't cheat and just print the domain name, you need to make a real DNS request.\nReturn as a string.",
    "tags": [
      "formatting",
      "language_fundamentals"
    ],
    "title": "Find Domain Name From DNS Pointer (PTR) Records Using IP Address"
  },
  {
    "_id": "Y5Ji2HDnQTX7MxeHt",
    "difficulty": 1.8763736263736264,
    "language": "python3",
    "summary": "This challenge is based on the classic videogame \"Snake\".\n\nAssume the game screen is an n * n square, and the snake starts the game with length 1 (i.e. just the head) positioned on the top left corner.\n\nFor example, if n = 7 the game looks something like this:\n\nIn this version of the game, the length of the snake doubles each time it eats food (e.g. if the len",
    "tags": [
      "algorithms",
      "math",
      "logic",
      "games",
      "loops"
    ],
    "title": "The Snake — Area Filling"
  },
  {
    "_id": "peezjw73G8BBGfHdW",
    "difficulty": 1.8877005347593583,
    "language": "python3",
    "summary": "Create a function to perform basic arithmetic operations that includes addition, subtraction, multiplication and division on a string number (e.g. \"12 + 24\" or \"23 - 21\" or \"12 // 12\" or \"12 * 21\").\n\nHere, we have 1 followed by a space, operator followed by another space and 2. For the challenge, we are going to have only two numbers between 1 valid operator.",
    "tags": [
      "arrays",
      "strings",
      "control_flow"
    ],
    "title": "Basic Arithmetic Operations on a String Number"
  },
  {
    "_id": "5bYXQfpyoithnQisa",
    "difficulty": 1.898652982681206,
    "language": "python3",
    "summary": "Create a function that takes a string as an argument and returns the Morse code equivalent.\n\nExamples\nencode_morse(\"EDABBIT CHALLENGE\") ➞ \". -.. .- -... -... .. -   -.-. .... .- .-.. .-.. . -. --. .\"\n\nencode_morse(\"HELP ME !\") ➞ \".... . .-.. .--.   -- .   -.-.--\"\n\nThis dictionary can be used for coding:\n\nchartodots = {\n  'A': '.-', 'B': '-...', 'C': '-.-.', 'D",
    "tags": [
      "arrays",
      "conditions",
      "loops"
    ],
    "title": "Encode Morse"
  },
  {
    "_id": "yvJbdkmKHvCNtcZy9",
    "difficulty": 1.9013062409288823,
    "language": "python3",
    "summary": "A number is said to be Disarium if the sum of its digits raised to their respective positions is the number itself.\n\nCreate a function that determines whether a number is a Disarium or not.\n\nExamples\nis_disarium(75) ➞ False\n7^1 + 5^2 = 7 + 25 = 32\n\nis_disarium(135) ➞ True\n1^1 + 3^2 + 5^3 = 1 + 9 + 125 = 135\n\nis_disarium(544) ➞ False\n\nis_disarium(518) ➞ True\n\ni",
    "tags": [
      "numbers",
      "loops",
      "strings",
      "validation",
      "math"
    ],
    "title": "Disarium Number"
  },
  {
    "_id": "st8mDxreMcuWxuz8c",
    "difficulty": 1.9066100667070953,
    "language": "python3",
    "summary": "Write a function that takes a positive integer num and calculates how many dots exist in a pentagonal shape around the center dot on the Nth iteration.\n\nIn the image below you can see the first iteration is only a single dot. On the second, there are 6 dots. On the third, there are 16 dots, and on the fourth there are 31 dots.\n\nalt text\n\nReturn the number of d",
    "tags": [
      "logic",
      "recursion",
      "numbers",
      "geometry"
    ],
    "title": "Pentagonal Number"
  },
  {
    "_id": "JzBLDzrcGCzDjkk5n",
    "difficulty": 1.9070262597586942,
    "language": "python3",
    "summary": "Make a function that encrypts a given input with these steps:\n\nInput: \"apple\"\n\nStep 1: Reverse the input: \"elppa\"\n\nStep 2: Replace all vowels using the following chart:\n\na => 0\ne => 1\ni => 2\no => 2\nu => 3\n\n\"1lpp0\"\n\nStep 3: Add \"aca\" to the end of the word: \"1lpp0aca\"\n\nOutput: \"1lpp0aca\"\n\nExamples\nencrypt(\"banana\") ➞ \"0n0n0baca\"\n\nencrypt(\"karaca\") ➞ \"0c0r0kaca\"",
    "tags": [
      "algorithms",
      "formatting",
      "cryptography",
      "regex"
    ],
    "title": "The Karaca's Encryption Algorithm"
  },
  {
    "_id": "Xkc2iAjwCap2z9N5D",
    "difficulty": 1.9084842707340324,
    "language": "python3",
    "summary": "Given the month and year as numbers, return whether that month contains a Friday 13th.\n\nExamples\nhasfriday13(3, 2020) ➞ True\n\nhasfriday13(10, 2017) ➞ True\n\nhasfriday13(1, 1985) ➞ False\n\nNotes\nJanuary will be given as 1, February as 2, etc ...\nCheck Resources for some helpful tutorials on Python's datetime module.",
    "tags": [
      "dates",
      "language_fundamentals",
      "validation"
    ],
    "title": "Friday the 13th"
  },
  {
    "_id": "KQ5H9aFBZDKEJuP6C",
    "difficulty": 1.9116465863453815,
    "language": "python3",
    "summary": "Write a regular expression that will help us count how many bad cookies are produced every day. You must use RegEx negative lookbehind.\n\nExample\nlst = [\"bad cookie\", \"good cookie\", \"bad cookie\", \"good cookie\", \"good cookie\"]\npattern = \"yourregularexpressionhere\"\n\nlen(re.findall(pattern, \", \".join(lst))) ➞ 2\n\nNotes\nYou don't need to write a function, just the p",
    "tags": [
      "regex",
      "language_fundamentals",
      "formatting"
    ],
    "title": "RegEx VII-A: Negative Lookbehind"
  },
  {
    "_id": "mHLAmj4vmRuXrT8Nb",
    "difficulty": 1.913594470046083,
    "language": "python3",
    "summary": "Write a function that returns True if two arrays, when combined, form a consecutive sequence. A consecutive sequence is a sequence without any gaps in the integers, e.g. 1, 2, 3, 4, 5 is a consecutive sequence, but 1, 2, 4, 5 is not.\n\nExamples\nconsecutive_combo([7, 4, 5, 1], [2, 3, 6]) ➞ True\n\nconsecutive_combo([1, 4, 6, 5], [2, 7, 8, 9]) ➞ False\n\nconsecutive_",
    "tags": [
      "arrays",
      "validation"
    ],
    "title": "Combined Consecutive Sequence"
  },
  {
    "_id": "76ibd8jZxvhAwDskb",
    "difficulty": 1.922872340425532,
    "language": "python3",
    "summary": "A city skyline can be represented as a 2-D list with 1s representing buildings. In the example below, the height of the tallest building is 4 (second-most right column).\n\n[[0, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 1, 0],\n[0, 0, 1, 0, 1, 0],\n[0, 1, 1, 1, 1, 0],\n[1, 1, 1, 1, 1, 1]]\n\nCreate a function that takes a skyline (2-D list of 0's and 1's) and returns the height o",
    "tags": [
      "arrays",
      "higher_order_functions"
    ],
    "title": "Tallest Skyscraper"
  },
  {
    "_id": "fJaZYmdovhzHa7ri3",
    "difficulty": 1.9264705882352942,
    "language": "python3",
    "summary": "The Collatz sequence is as follows:\nStart with some given integer n.\nIf it is even, the next number will be n divided by 2.\nIf it is odd, multiply it by 3 and add 1 to make the next number.\nThe sequence stops when it reaches 1.\n\nAccording to the Collatz conjecture, it will always reach 1. If that's true, you can construct a finite sequence following the aforem",
    "tags": [
      "recursion",
      "algorithms",
      "conditions",
      "numbers"
    ],
    "title": "The Collatz Sequence"
  },
  {
    "_id": "KHPFPaKpXmDeRoYQ3",
    "difficulty": 1.933806146572104,
    "language": "python3",
    "summary": "Write a function that takes a list of lists and returns the value of all of the symbols in it, where each symbol adds or takes something from the total score. Symbol values:\n\n# = 5\nO = 3\nX = 1\n! = -1\n!! = -3\n!!! = -5\n\nA list of lists containing 2 #s, a O, and a !!! would equal (0 + 5 + 5 + 3 - 5) 8.\n\nIf the final score is negative, return 0 (e.g. 3 #s, 3 !!s,",
    "tags": [
      "strings",
      "numbers",
      "math",
      "functional_programming"
    ],
    "title": "Add the Values of the Symbols in a Matrix"
  },
  {
    "_id": "ehyZvt6AJF4rKFfXT",
    "difficulty": 1.9354375896700144,
    "language": "python3",
    "summary": "Someone has attempted to censor my strings by replacing every vowel with a `, lk* th*s`. Luckily, I've been able to find the vowels that were removed.\n\nGiven a censored string and a string of the censored vowels, return the original uncensored string.\n\nExample\nuncensor(\"Whr dd my vwls g?\", \"eeioeo\") ➞ \"Where did my vowels go?\"\n\nuncensor(\"abcd\", \"\") ➞ \"abcd\"\n\nu",
    "tags": [
      "strings",
      "formatting",
      "algorithms"
    ],
    "title": "C*ns*r*d Str*ngs"
  },
  {
    "_id": "fExBQZQLEqfBj2Qgk",
    "difficulty": 1.935483870967742,
    "language": "python3",
    "summary": "Help the drunken programmer fix his code! The RegEx string should be designed so it can reliably test if a string has an \"A\" at the beginning and end (case insensitive) as well as a \"P\" somewhere in between (also case insensitive).\n\nDue to the use of fullmatch, no ending $ or beginning ^ match character is permitted anywhere except for the middle. Also, requir",
    "tags": [
      "regex",
      "bugs"
    ],
    "title": "RegEx Repairs!"
  },
  {
    "_id": "g6yjSfTpDkX2STnSX",
    "difficulty": 1.9372599231754162,
    "language": "python3",
    "summary": "Create a function that takes a strings characters as ASCII and returns each characters hexadecimal value as a string.\n\nExamples\nconverttohex(\"hello world\") ➞ \"68 65 6c 6c 6f 20 77 6f 72 6c 64\"\n\nconverttohex(\"Big Boi\") ➞ \"42 69 67 20 42 6f 69\"\n\nconverttohex(\"Marty Poppinson\") ➞ \"4d 61 72 74 79 20 50 6f 70 70 69 6e 73 6f 6e\"\n\nNotes\nEach byte must be seperated by",
    "tags": [
      "loops",
      "logic",
      "strings"
    ],
    "title": "Convert to Hex"
  },
  {
    "_id": "7vN8ZRw43yuWNoy3Y",
    "difficulty": 1.943444730077121,
    "language": "python3",
    "summary": "Create a function which takes in an encoded string and returns a dictionary according to the following example:\n\nExamples\nparse_code(\"John000Doe000123\") ➞ {\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe\",\n  \"id\": \"123\"\n}\n\nparse_code(\"michael0smith004331\") ➞ {\n  \"first_name\": \"michael\",\n  \"last_name\": \"smith\",\n  \"id\": \"4331\"\n}\n\nparse_code(\"Thomas00LEE0000043\") ➞",
    "tags": [
      "strings",
      "formatting",
      "objects",
      "regex"
    ],
    "title": "Encoded String Parse"
  },
  {
    "_id": "6pEGXsuCAxbWTRkgc",
    "difficulty": 1.9437340153452685,
    "language": "python3",
    "summary": "\"Loves me, loves me not\" is a traditional game in which a person plucks off all the petals of a flower one by one, saying the phrase \"Loves me\" and \"Loves me not\" when determining whether the one that they love, loves them back.\n\nGiven a number of petals, return a string which repeats the phrases \"Loves me\" and \"Loves me not\" for every alternating petal, and r",
    "tags": [
      "strings",
      "loops"
    ],
    "title": "Loves Me, Loves Me Not..."
  },
  {
    "_id": "ksiA6Q34iXgTcMeZF",
    "difficulty": 1.944141689373297,
    "language": "python3",
    "summary": "A financial institution provides professional services to banks and claims charges from the customers based on the number of man-days provided. Internally, it has set a scheme to motivate and reward staff to meet and exceed targeted billable utilization and revenues by paying a bonus for each day claimed from customers in excess of a threshold target.\n\nThis qu",
    "tags": [
      "conditions",
      "math"
    ],
    "title": "Calculated Bonus"
  },
  {
    "_id": "pQavNkBbdmvSMmx5x",
    "difficulty": 1.9455022980958634,
    "language": "python3",
    "summary": "Create a function that returns the majority vote in a list. A majority vote is an element that occurs > N/2 times in a list (where N is the length of the list).\n\nExamples\nmajority_vote([\"A\", \"A\", \"B\"]) ➞ \"A\"\n\nmajority_vote([\"A\", \"A\", \"A\", \"B\", \"C\", \"A\"]) ➞ \"A\"\n\nmajority_vote([\"A\", \"B\", \"B\", \"A\", \"C\", \"C\"]) ➞ None\n\nNotes\nThe frequency of the majority element mu",
    "tags": [
      "arrays",
      "loops"
    ],
    "title": "Majority Vote"
  },
  {
    "_id": "f3jX2BwzAuR8DXsy4",
    "difficulty": 1.9464668094218416,
    "language": "python3",
    "summary": "Create a function that takes an integer n and returns the factorial of factorials. See below examples for a better understanding:\n\nExamples\nfactoffact(4) ➞ 288\n4! * 3! * 2! * 1! = 288\n\nfactoffact(5) ➞ 34560\n\nfactoffact(6) ➞ 24883200\n\nNotes\nN/A",
    "tags": [
      "math",
      "numbers",
      "loops",
      "language_fundamentals"
    ],
    "title": "Factorial of Factorials"
  },
  {
    "_id": "zJSF5EfPe69e9sJAc",
    "difficulty": 1.946702800361337,
    "language": "python3",
    "summary": "Create a function that takes a string txt and censors any word from a given list lst. The text removed must be replaced by the given character char.\n\nExamples\ncensor_string(\"Today is a Wednesday!\", [\"Today\", \"a\"], \"-\") ➞ \"----- is - Wednesday!\"\n\ncensor_string(\"The cow jumped over the moon.\", [\"cow\", \"over\"], \"\"), \"The * jumped * the moon.\")\n\ncensor_string(\"Why",
    "tags": [
      "strings",
      "language_fundamentals",
      "formatting"
    ],
    "title": "Censor Words from List"
  },
  {
    "_id": "LR98GCwLGYPSv8Afb",
    "difficulty": 1.9495412844036697,
    "language": "python3",
    "summary": "Given a list of words in the singular form, return a set of those words in the plural form if they appear more than once in the list.\n\nExamples\npluralize([\"cow\", \"pig\", \"cow\", \"cow\"]) ➞ { \"cows\", \"pig\" }\n\npluralize([\"table\", \"table\", \"table\"]) ➞ { \"tables\" }\n\npluralize([\"chair\", \"pencil\", \"arm\"]) ➞ { \"chair\", \"pencil\", \"arm\" }\n\nNotes\nThis is an oversimplificat",
    "tags": [
      "strings",
      "arrays",
      "loops"
    ],
    "title": "Pluralize!"
  },
  {
    "_id": "6JNHBeGxY8dhTaPhs",
    "difficulty": 1.9523809523809523,
    "language": "python3",
    "summary": "A Collatz sequence is generated by repeatedly applying the following rules to an integer and then to each resulting integer in turn:\n\nIf even: divide by 2.\nIf odd: multiply by 3, then add 1.\n\nThe Collatz algorithm has been tested and found to always reach 1 for all positive integers.\n\nCreate a function that, when given two positive integers a b, returns the st",
    "tags": [
      "loops",
      "numbers"
    ],
    "title": "3n + 1 Problem (Collatz Conjecture)"
  },
  {
    "_id": "gH3QMvF3czMDjENkk",
    "difficulty": 1.9537275064267352,
    "language": "python3",
    "summary": "Create a function that takes a list and string. The function should remove the letters in the string from the list, to an certain extent, and return the list.\n\nExamples\nremove_letters([\"s\", \"t\", \"r\", \"i\", \"n\", \"g\", \"w\"], \"string\") ➞ [\"w\"]\n\nremove_letters([\"b\", \"b\", \"l\", \"l\", \"g\", \"n\", \"o\", \"a\", \"w\"], \"balloon\") ➞ [\"b\", \"g\", \"w\"]\n\nremove_letters([\"d\", \"b\", \"t\",",
    "tags": [
      "arrays",
      "logic",
      "strings"
    ],
    "title": "Remove The Word!"
  },
  {
    "_id": "wcdS7MEL5gvr5SGsh",
    "difficulty": 1.9538461538461538,
    "language": "python3",
    "summary": "Given a name, return the letter with the highest index in alphabetical order, with its corresponding index, in the form of a string. You are prohibited to use max(), nor reassign a value to the alphabet list is allowed.\n\nExamples\nalphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\",",
    "tags": [
      "numbers",
      "language_fundamentals",
      "sorting"
    ],
    "title": "Highest Index (With a Twist)"
  },
  {
    "_id": "fNQEi9Y2adsERgn98",
    "difficulty": 1.9550561797752808,
    "language": "python3",
    "summary": "Write a function that takes the coordinates of three points in the form of a 2d array  and returns the perimeter of the triangle. The given points are the vertices of a triangle on a two-dimensional plane.\n\nExamples\nperimeter([[15, 7], [5, 22], [11, 1]]) ➞ 47.08\n\nperimeter([[0, 0], [0, 1], [1, 0]]) ➞ 3.41\n\nperimeter([[-10, -10], [10, 10 ], [-10, 10]]) ➞ 68.28",
    "tags": [
      "algebra",
      "arrays",
      "geometry",
      "math"
    ],
    "title": "Geometry 3: Perimeter of a Triangle"
  },
  {
    "_id": "JD9vSKZGrxQhLbA9r",
    "difficulty": 1.956989247311828,
    "language": "python3",
    "summary": "Mubashir needs your help to construct a building which will be a pile of n cubes. The cube at the bottom will have a volume of n^3, the cube above will have volume of (n-1)^3 and so on until the top which will have a volume of 1^3.\n\nGiven the total volume m of the building, can you find the number of cubes n required for the building?\n\nIn other words, you have",
    "tags": [
      "numbers",
      "algorithms",
      "loops",
      "math"
    ],
    "title": "Pile of Cubes"
  },
  {
    "_id": "3A3mHS5B3NNZddQL2",
    "difficulty": 1.9623655913978495,
    "language": "python3",
    "summary": "Create a function to check if a candidate is qualified in an imaginary coding interview of an imaginary tech startup.\n\nThe criteria for a candidate to be qualified in the coding interview is:\n\nThe candidate should have complete all the questions.\nThe maximum time given to complete the interview is 120 minutes.\nThe maximum time given for very easy questions is",
    "tags": [
      "arrays",
      "conditions",
      "interview"
    ],
    "title": "Imaginary Coding Interview"
  },
  {
    "_id": "PxxZprxCjDrzaTcLQ",
    "difficulty": 1.9624664879356568,
    "language": "python3",
    "summary": "Given a sentence as txt, return True if any two adjacent words have this property: One word ends with a vowel, while the word immediately after begins with a vowel (a e i o u).\n\nExamples\nvowel_links(\"a very large appliance\") ➞ True\n\nvowel_links(\"go to edabit\") ➞ True\n\nvowel_links(\"an open fire\") ➞ False\n\nvowel_links(\"a sudden applause\") ➞ False\n\nNotes\nYou can",
    "tags": [
      "regex",
      "strings",
      "loops",
      "validation"
    ],
    "title": "Vowel to Vowel Links"
  },
  {
    "_id": "M47FDJLjfNoZ6k6gF",
    "difficulty": 1.9636363636363636,
    "language": "python3",
    "summary": "There are three cups on a table, at positions A, B, and C. At the start, there is a ball hidden under the cup at position B.\n\nImage of cups where ball is under middle cup\n\nHowever, I perform several swaps on the cups, which is notated as two letters. For example, if I swap the cups at positions A and B, I could notate this as AB or BA.\n\nCreate a function that",
    "tags": [
      "algorithms",
      "logic",
      "interview"
    ],
    "title": "Cup Swapping"
  },
  {
    "_id": "abdsaD6gwjgAgevsG",
    "difficulty": 1.9641657334826428,
    "language": "python3",
    "summary": "Create a function that takes in n,  a, b and returns the number of positive values raised to the nth power that lie in the range [a, b], inclusive.\n\nExamples\npower_ranger(2, 49, 65) ➞ 2\n2 squares (n^2) lie between 49 and 65, 49 (7^2) and 64 (8^2)\n\npower_ranger(3, 1, 27) ➞ 3\n3 cubes (n^3) lie between 1 and 27, 1 (1^3), 8 (2^3) and 27 (3^3)\n\npower_ranger(10, 1,",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "Power Ranger"
  },
  {
    "_id": "z39yXccJGLAy3BDNX",
    "difficulty": 1.9655172413793103,
    "language": "python3",
    "summary": "You will be given a list of 32-bit unsigned integers. Flip all the bits 1 -> 0 and 0  -> 1  and return the result as an unsigned integer.\n\nWorked Example\nn = 4\n4 is 0100 in binary. We are working in 32 bits so:\n00000000000000000000000000000100 = 4\n11111111111111111111111111111011 = 4294967291\nreturn 4294967291\n\nExamples\nflipping_bits(2147483647) ➞ 2147483648",
    "tags": [
      "bit_operations",
      "formatting"
    ],
    "title": "Flipping Bits"
  },
  {
    "_id": "oq2FxAx5bJZgPLk9r",
    "difficulty": 1.9659574468085106,
    "language": "python3",
    "summary": "Given a list of integers representing the color of each sock, determine how many pairs of socks with matching colors there are. For example, there are 7  socks with colors [1, 2, 1, 2, 1, 3, 2]. There is one pair of color 1  and one of color 2. There are three odd socks left, one of each color. The number of pairs is 2.\n\nCreate a function that returns an integ",
    "tags": [
      "arrays",
      "algorithms"
    ],
    "title": "Sales by Match"
  },
  {
    "_id": "AvP94XqJvPjoMk5PT",
    "difficulty": 1.9673913043478262,
    "language": "python3",
    "summary": "There are many different styles of music and many albums exhibit multiple styles. Create a function that takes a list of musical styles from albums and returns how many styles are unique.\n\nExamples\nunique_styles([\n  \"Dub,Dancehall\",\n  \"Industrial,Heavy Metal\",\n  \"Techno,Dubstep\",\n  \"Synth-pop,Euro-Disco\",\n  \"Industrial,Techno,Minimal\"\n]) ➞ 9\n\nunique_styles([",
    "tags": [
      "arrays",
      "functional_programming",
      "loops"
    ],
    "title": "How Many Unique Styles?"
  },
  {
    "_id": "HXkpnCxJgxkFwaReT",
    "difficulty": 1.9680232558139534,
    "language": "python3",
    "summary": "Given a function that accepts unlimited arguments, check and count how many data types are in those arguments. Finally return the total in a list.\n\nList order is:\n\n[int, str, bool, list, tuple, dictionary]\n\nExamples\ncount_datatypes(1, 45, \"Hi\", False) ➞ [2, 1, 1, 0, 0, 0]\n\ncount_datatypes([10, 20], (\"t\", \"Ok\"), 2, 3, 1) ➞ [3, 0, 0, 1, 1, 0]\n\ncount_datatypes(\"H",
    "tags": [
      "conditions",
      "loops",
      "arrays"
    ],
    "title": "Count and Identify Data Types"
  },
  {
    "_id": "pqpkRBP4YT5dwBDHm",
    "difficulty": 1.9680365296803652,
    "language": "python3",
    "summary": "Given a list of numbers, create a function which removes a quarter from the total from every number in the list, and adds it to the smallest number.\n\nExamples\nshowthelove([4, 1, 4]) ➞ [3, 3, 3]\n\nshowthelove([16, 10, 8]) ➞ [12, 7.5, 14.5]\n\nshowthelove([2, 100]) ➞ [27, 75]\n\nNotes\nThere will only be one smallest number in a given list.",
    "tags": [
      "arrays",
      "numbers"
    ],
    "title": "Sharing is Caring"
  },
  {
    "_id": "jwzAdBnJnBxCe4AXP",
    "difficulty": 1.9682791435368754,
    "language": "python3",
    "summary": "Given a number, return the difference between the maximum and minimum numbers that can be formed when the digits are rearranged.\n\nExamples\nrearranged_difference(972882) ➞ 760833\n988722 - 227889 = 760833\n\nrearranged_difference(3320707) ➞ 7709823\n7733200 - 23377 = 7709823\n\nrearranged_difference(90010) ➞ 90981\n91000 - 19 = 90981\n\nNotes\nN/A",
    "tags": [
      "sorting",
      "numbers"
    ],
    "title": "Rearrange the Number"
  },
  {
    "_id": "dZhxErwMfyWymXbPN",
    "difficulty": 1.970873786407767,
    "language": "python3",
    "summary": "Create a function that, given a phrase and a number of letters guessed, returns a string with hyphens - for every letter of the phrase not guessed, and each letter guessed in place.\n\nExamples\nhangman(\"helicopter\", [\"o\", \"e\", \"s\"]) ➞ \"-e---o--e-\"\n\nhangman(\"tree\", [\"r\", \"t\", \"e\"]) ➞ \"tree\"\n\nhangman(\"Python rules\", [\"a\", \"n\", \"p\", \"r\", \"z\"]) ➞ \"P----n r----\"\n\nhan",
    "tags": [
      "language_fundamentals",
      "games",
      "loops",
      "strings"
    ],
    "title": "The Hangman Game"
  },
  {
    "_id": "D6XfxhRobdQvbKX4v",
    "difficulty": 1.9711359404096833,
    "language": "python3",
    "summary": "You are given three inputs: a string, one letter, and a second letter.\n\nWrite a function that returns True if every instance of the first letter occurs before every instance of the second letter.\n\nExamples\nfirstbeforesecond(\"a rabbit jumps joyfully\", \"a\", \"j\") ➞ True\nEvery instance of \"a\" occurs before every instance of \"j\".\n\nfirstbeforesecond(\"knaves knew abo",
    "tags": [
      "strings",
      "validation"
    ],
    "title": "First Before Second Letter"
  },
  {
    "_id": "RvCEzuqacuBA94ZfP",
    "difficulty": 1.971830985915493,
    "language": "python3",
    "summary": "Create a function that is a Hashtag Generator by using the following rules:\n\nThe output must start with a hashtag (#).\nEach word in the output must have its first letter capitalized.\nIf the final result, a single string,  is longer than 140 characters, the function should return false.\nIf either the input (str) or the result is an empty string, the function sh",
    "tags": [
      "algorithms",
      "strings",
      "language_fundamentals"
    ],
    "title": "Hashtag Generator"
  },
  {
    "_id": "W8imhL66osEpK2ANs",
    "difficulty": 1.9723502304147464,
    "language": "python3",
    "summary": "Given a predetermined rate from a dictionary,  write the function that will return the time it takes for a certain amount of people to paint a certain amount of walls. Return the minutes as an integer. No rounding is necessary.\n\nExample\n// It takes 22 minutes for 10 people to paint 10 walls.\n// How many minutes does it take 14 people to paint 14 walls?\n\nlet ra",
    "tags": [
      "math",
      "objects"
    ],
    "title": "Paint the Walls"
  },
  {
    "_id": "GaJkMnuHLuPmXZK7h",
    "difficulty": 1.9736147757255937,
    "language": "python3",
    "summary": "Create a function that takes in two words as input and returns a list of three elements, in the following order:\n\nShared letters between two words.\nLetters unique to word 1.\nLetters unique to word 2.\n\nEach element should have unique letters, and have each letter be alphabetically sorted.\n\nExamples\nletters(\"sharp\", \"soap\") ➞ [\"aps\", \"hr\", \"o\"]\n\nletters(\"board\",",
    "tags": [
      "strings",
      "arrays"
    ],
    "title": "Shared vs. Unique Letters"
  },
  {
    "_id": "qrSc3vKCqyFcz9ptr",
    "difficulty": 1.9745762711864407,
    "language": "python3",
    "summary": "Given a number, find the \"round\" of each digit of the number. An integer is called \"round\" if all its digits except the leftmost (most significant) are equal to zero.\nRound numbers: 4000, 1, 9, 800, 90\nNot round numbers: 110, 707, 222, 1001\n\nCreate a function that takes a number and returns the \"round\" of each digit (except if the digit is zero) as a string. C",
    "tags": [
      "algorithms",
      "math"
    ],
    "title": "Sum of Round Numbers"
  },
  {
    "_id": "9p5tMqyYENTmD9Nh5",
    "difficulty": 1.976608187134503,
    "language": "python3",
    "summary": "Create a function that determines whether a string is a valid hex code.\n\nA hex code must begin with a pound key # and is exactly 6 characters in length. Each character must be a digit from 0-9 or an alphabetic character from A-F. All alphabetic characters may be uppercase or lowercase.\n\nExamples\nisvalidhex_code(\"#CD5C5C\") ➞ True\n\nisvalidhex_code(\"#EAECEE\") ➞ T",
    "tags": [
      "strings",
      "regex",
      "validation"
    ],
    "title": "Valid Hex Code"
  },
  {
    "_id": "arFpErP9oz36oTcXW",
    "difficulty": 1.9770992366412214,
    "language": "python3",
    "summary": "Create a function based on the input and output. Look at the examples, there is a pattern.\n\nExamples\nsecret(\"p.one.two.three\") ➞ \"\"\n\nsecret(\"p.one\") ➞ \"\"\n\nsecret(\"p.four.five\") ➞ \"\"\n\nNotes\nInput is a string.",
    "tags": [
      "strings",
      "arrays"
    ],
    "title": "Secret Function 4.0"
  },
  {
    "_id": "2nx4JCytABfczdYGt",
    "difficulty": 1.9772727272727273,
    "language": "python3",
    "summary": "In this challenge, you must build a function that inflects an infinitive regular Italian verb of the first conjugation form to the present tense, including the personal subjective pronoun.\n\nAll first conjugation Italian verbs share the same suffix: ARE. The first thing to do is separate the verb root from the suffix.\nRoot of \"programmare\" (to code) = \"programm",
    "tags": [
      "strings",
      "formatting",
      "conditions"
    ],
    "title": "Italian Grammar: Present Tense of First Conjugation Verbs"
  },
  {
    "_id": "WS6hR6b9EZzuDTD26",
    "difficulty": 1.9783001808318263,
    "language": "python3",
    "summary": "Given a common phrase, return False if any individual word in the phrase contains duplicate letters. Return True otherwise.\n\nExamples\nnoduplicateletters(\"Fortune favours the bold.\") ➞ True\n\nnoduplicateletters(\"You can lead a horse to water, but you can't make him drink.\") ➞ True\n\nnoduplicateletters(\"Look before you leap.\") ➞ False\nDuplicate letters in \"Look\" a",
    "tags": [
      "language_fundamentals",
      "strings",
      "validation",
      "loops"
    ],
    "title": "Words With Duplicate Letters"
  },
  {
    "_id": "GAbxxcsKoLGKtwjRB",
    "difficulty": 1.9826989619377162,
    "language": "python3",
    "summary": "Create a function that takes a list of numbers and returns the sum of all prime numbers in the list.\n\nExamples\nsum_primes([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ 17\n\nsum_primes([2, 3, 4, 11, 20, 50, 71]) ➞ 87\n\nsum_primes([]) ➞ None\n\nNotes\nGiven numbers won't exceed 101.\nA prime number is a number which has exactly two divisors.",
    "tags": [
      "algebra",
      "numbers",
      "arrays"
    ],
    "title": "Sum of Prime Numbers"
  },
  {
    "_id": "2t6NvMe27HtSmqC4F",
    "difficulty": 1.9834710743801653,
    "language": "python3",
    "summary": "Write three functions:\n\nboolean_and\nboolean_or\nboolean_xor\n\nThese functions should evaluate an array of True and False values, starting from the leftmost element and evaluating pairwise.\n\nExamples\nboolean_and([True, True, False, True]) ➞ False\n[True, True, False, True] => [True, False, True] => [False, True] => False\n\nboolean_or([True, True, False, False]) ➞ T",
    "tags": [
      "arrays",
      "logic"
    ],
    "title": "Boolean Chain"
  },
  {
    "_id": "q3zrcjja7uWHejxf6",
    "difficulty": 1.9838709677419355,
    "language": "python3",
    "summary": "Create a function that takes a string containing integers as well as other characters and return the sum of the negative integers only.\n\nExamples\nnegative_sum(\"-12 13%14&-11\") ➞ -23\n-12 + -11 = -23\n\nnegative_sum(\"22 13%14&-11-22 13 12\") ➞ -33\n-11 + -22 = -33\n\nNotes\nThere is at least one negative integer.",
    "tags": [
      "strings",
      "language_fundamentals",
      "regex",
      "algorithms"
    ],
    "title": "Sum of Negative Integers"
  },
  {
    "_id": "sg7j2sT8yBbY7eFYG",
    "difficulty": 1.984375,
    "language": "python3",
    "summary": "Create a class with couple functions like these examples.\nmagic.replace(\"string\", 'char', char') is a function that replaces all of the specified characters with another characters.\nmagic.str_length(\"string\") is a function that returns the length of the string.\nmagic.trim(\"      string      \") is  a function that returns a string that truncates spaces at both",
    "tags": [
      "higher_order_functions",
      "closures",
      "functional_programming",
      "language_fundamentals",
      "classes"
    ],
    "title": "Magic Function"
  },
  {
    "_id": "7ZWinyRcC4AoxbqdG",
    "difficulty": 1.9849624060150375,
    "language": "python3",
    "summary": "Given a positive integer n, compute the nth term in the Fibonacci sequence. For those of you that have been living under a rock in the mathematical world, here's the definition:\n\nThe first and second terms are 1.\nnth term is the (n-1)th term + the (n-2)th term. So the 3rd term is the 1st term + the 2nd term, the 4th term is the 3rd term + the 2nd term, etc.\n\nT",
    "tags": [
      "loops",
      "math",
      "numbers"
    ],
    "title": "Fibonacci Sequence"
  },
  {
    "_id": "LaBMjgbMjf5BajczX",
    "difficulty": 1.9853372434017595,
    "language": "python3",
    "summary": "Write a function that counts how many concentric layers a rug.\n\nExamples\ncount_layers([\n  \"AAAA\",\n  \"ABBA\",\n  \"AAAA\"\n]) ➞ 2\n\ncount_layers([\n  \"AAAAAAAAA\",\n  \"ABBBBBBBA\",\n  \"ABBAAABBA\",\n  \"ABBBBBBBA\",\n  \"AAAAAAAAA\"\n]) ➞ 3\n\ncount_layers([\n  \"AAAAAAAAAAA\",\n  \"AABBBBBBBAA\",\n  \"AABCCCCCBAA\",\n  \"AABCAAACBAA\",\n  \"AABCADACBAA\",\n  \"AABCAAACBAA\",\n  \"AABCCCCCBAA\",\n  \"AAB",
    "tags": [
      "strings",
      "logic"
    ],
    "title": "Layers in a Rug"
  },
  {
    "_id": "bm6sQhgQ7KESi6gff",
    "difficulty": 1.9858156028368794,
    "language": "python3",
    "summary": "You are given two strings s and t. String t is generated by randomly shuffling string s and then adding one more letter at a random position. Return the letter that was added to t.\n\nExamples\nfindthedifference(\"abcd\", \"abcde\") ➞ \"e\"\n\nfindthedifference(\"\", \"y\") ➞ \"y\"\n\nfindthedifference(\"ae\", \"aea\") ➞ \"a\"\n\nNotes\nN/A",
    "tags": [
      "algorithms",
      "strings"
    ],
    "title": "Find the Difference"
  },
  {
    "_id": "dy3WWJr34gSGRPLee",
    "difficulty": 1.9868995633187774,
    "language": "python3",
    "summary": "Create a function that creates a box based on dimension n.\n\nExamples\nmake_box(5) ➞ [\n  \"#####\",\n  \"#   #\",\n  \"#   #\",\n  \"#   #\",\n  \"#####\"\n]\n\nmake_box(3) ➞ [\n  \"###\",\n  \"# #\",\n  \"###\"\n]\n\nmake_box(2) ➞ [\n  \"##\",\n  \"##\"\n]\n\nmake_box(1) ➞ [\n  \"#\"\n]\n\nNotes\nN/A",
    "tags": [
      "strings",
      "formatting"
    ],
    "title": "Making a Box"
  },
  {
    "_id": "tPNqhkqeQaCZGcBLo",
    "difficulty": 1.9871794871794872,
    "language": "python3",
    "summary": "And who cursed the most in the fight between you and your spouse?\n\nGiven a dict with three rounds, with nested dicts as your score per round, return  who cursed the most based on the following:\n\n   If you, return \"ME!\"\n   If your spouse, return \"SPOUSE!\"\n   If a draw, return \"DRAW!\"\n\nExamples\ndeterminewhocursedthemost({\n  \"round1\": { \"me\": 10, \"spouse\": 5 },",
    "tags": [
      "objects",
      "arrays",
      "loops"
    ],
    "title": "Burglary Series (16): Nested Objects (Dicts)"
  },
  {
    "_id": "Q72X3J8jq7SzSSXui",
    "difficulty": 1.9872611464968153,
    "language": "python3",
    "summary": "Create a function that returns the whole of the first sentence which contains a specific word. Include the full stop at the end of the sentence.\n\nExamples\ntxt = \"I have a cat. I have a mat. Things are going swell.\"\n\nsentence_searcher(txt, \"have\") ➞ \"I have a cat.\"\n\nsentence_searcher(txt, \"MAT\") ➞ \"I have a mat.\"\n\nsentence_searcher(txt, \"things\") ➞ \"Things are",
    "tags": [
      "strings",
      "regex",
      "loops"
    ],
    "title": "Sentence Searcher"
  },
  {
    "_id": "yXZhG7zq6dWhWhirt",
    "difficulty": 1.9878048780487805,
    "language": "python3",
    "summary": "Create a function that takes a list and returns a new list containing only prime numbers.\n\nExamples\nfilter_primes([7, 9, 3, 9, 10, 11, 27]) ➞ [7, 3, 11]\n\nfilter_primes([10007, 1009, 1007, 27, 147, 77, 1001, 70]) ➞ [10007, 1009]\n\nfilter_primes([1009, 10, 10, 10, 3, 33, 9, 4, 1, 61, 63, 69, 1087, 1091, 1093, 1097]) ➞ [1009, 3, 61, 1087, 1091, 1093, 1097]\n\nNotes",
    "tags": [
      "algorithms",
      "arrays",
      "numbers"
    ],
    "title": "Filter Primes from a List"
  },
  {
    "_id": "NtsqbRPqtPYhR8tJe",
    "difficulty": 1.988235294117647,
    "language": "python3",
    "summary": "A block sequence in three dimensions. We can write a formula for this one:\n\nSequence Step 1 - 5\n\nCreate a function that takes a number (step) as an argument and returns the amount of blocks in that step.\n\nExamples\nblocks(1) ➞ 5\n\nblocks(5) ➞ 39\n\nblocks(2) ➞ 12\n\nNotes\nStep 0 obviously has to return 0.\nThe input is always a positive integer.\nCheck the Resources t",
    "tags": [
      "math",
      "numbers",
      "algorithms"
    ],
    "title": "3D Visual Block Sequence"
  },
  {
    "_id": "GP6cjzQ3xs9gJ8Q2b",
    "difficulty": 1.9886363636363635,
    "language": "python3",
    "summary": "Mubashir was reading about Polydivisible Numbers on Wikipedia.\n\nIn mathematics a Polydivisible Number (or magic number) is a number in a given number base with digits abcde... that has the following properties:\n\nIts first digit a is not 0.\nThe number formed by its first two digits ab is a multiple of 2.\nThe number formed by its first three digits abc is a mult",
    "tags": [
      "algebra",
      "math",
      "numbers",
      "validation"
    ],
    "title": "Polydivisible Numbers"
  },
  {
    "_id": "8Fwv2f8My4kcNjMZh",
    "difficulty": 1.9887218045112782,
    "language": "python3",
    "summary": "Given an integer between 0 and 26, make a variable (self.answer). That variable would be assigned to a string in this format:\n\n\"nines:your answer, threes:your answer, ones:your answer\"\n\nYou need to find out how many ones, threes, and nines it would at least take for the number of each to add up to the given integer when multiplied by one, three or nine (depend",
    "tags": [
      "classes",
      "math",
      "numbers",
      "strings"
    ],
    "title": "Ones, Threes and Nines (Version #2)"
  },
  {
    "_id": "GwCAximybWF6ANdLY",
    "difficulty": 1.9895104895104896,
    "language": "python3",
    "summary": "A pie chart is a circular graphical representation of a dataset, where each category frequency is represented by a slice (or circular sector) with an amplitude in degrees given by the single frequency percentage over the total of frequencies. You can obtain the degrees of sectors following these steps:\n\nCalculate frequencies total.\nCalculate percentage of ever",
    "tags": [
      "data_structures",
      "math",
      "objects"
    ],
    "title": "Building a Pie Chart"
  },
  {
    "_id": "AdJNWPbfL9LunsNh9",
    "difficulty": 1.9901960784313726,
    "language": "python3",
    "summary": "Your task, is to create N x N multiplication table, of size n provided in parameter.\n\nFor example, when n is 5, the multiplication table is:\n\n1, 2, 3, 4, 5\n2, 4, 6, 8, 10\n3, 6, 9, 12, 15\n4, 8, 12, 16, 20\n5, 10, 15, 20, 25\n\nThis example will result in:\n\n[[1, 2, 3, 4, 5], [2, 4, 6, 8, 10], [3, 6, 9, 12, 15], [4, 8, 12, 16, 20], [5, 10, 15, 20, 25]]\n\nExamples\nmul",
    "tags": [
      "algorithms",
      "language_fundamentals",
      "numbers",
      "math",
      "arrays"
    ],
    "title": "Multiplication Table"
  },
  {
    "_id": "kS8tfJD2ggohQbWx7",
    "difficulty": 1.991304347826087,
    "language": "python3",
    "summary": "Create a function that takes a list of names in the format \"First Name Last Name\" (e.g. \"John Doe\"), and returns a list of these names sorted by the length of their last names. If the length of multiple last names are the same, then proceed to sort alphabetically.\n\nExamples\nlastnamelensort([\n  \"Jennifer Figueroa\",\n  \"Heather Mcgee\",\n  \"Amanda Schwartz\",\n  \"Nic",
    "tags": [
      "algorithms",
      "control_flow",
      "strings",
      "sorting"
    ],
    "title": "Sort Names According to the Length of Their Last Names"
  },
  {
    "_id": "eyJ4mN6RpyiRTvSob",
    "difficulty": 1.9915254237288136,
    "language": "python3",
    "summary": "Given a word, create a function which returns whether or not it's possible to create a palindrome by rearranging the letters in the word.\n\nExamples\nispalindromepossible(\"rearcac\") ➞ True\nYou can make \"racecar\"\n\nispalindromepossible(\"suhbeusheff\") ➞ True\nYou can make \"sfuehbheufs\" (not a real word but still a palindrome)\n\nispalindromepossible(\"palindrome\") ➞ Fa",
    "tags": [
      "algorithms",
      "strings",
      "validation"
    ],
    "title": "Palindromic Anagrams"
  },
  {
    "_id": "BYDZmaM6e4TQrgneb",
    "difficulty": 1.9916666666666667,
    "language": "python3",
    "summary": "In mathematics, the Fibonacci numbers, commonly denoted Fn, form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1:\n\nFibonacci Sequence\n\nand\n\nFibonacci Sequence 2\n\nfor  n > 1\n\nThe beginning of the sequence is thus:\n\n0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ...\n\nThe function fib_fas",
    "tags": [
      "algorithms",
      "loops",
      "math"
    ],
    "title": "Fast Fibonacci"
  },
  {
    "_id": "DqLngKnnJcZyPMctn",
    "difficulty": 1.9928057553956835,
    "language": "python3",
    "summary": "Create a function that takes a list of integers that represent the amount in dollars that a single stock is worth, and return the maximum profit that could have been made by buying stock on day x and selling stock on day y where y>x.\n\nIf given the following list:\n\n[44, 30, 24, 32, 35, 30, 40, 38, 15]\n\n... your program should return 16 because at index 2 the st",
    "tags": [
      "algorithms",
      "arrays",
      "data_structures"
    ],
    "title": "Stock Picker"
  },
  {
    "_id": "shf4iTJTbQ7sethFA",
    "difficulty": 1.9928571428571429,
    "language": "python3",
    "summary": "There are two players, Alice and Bob, each with a 3-by-3 grid. A referee tells Alice to fill out one particular row in the grid (say the second row) by putting either a 1 or a 0 in each box, such that the sum of the numbers in that row is odd. The referee tells Bob to fill out one column in the grid (say the first column) by putting either a 1 or a 0 in each b",
    "tags": [
      "algorithms",
      "math",
      "validation",
      "games"
    ],
    "title": "The Magic Square Game"
  },
  {
    "_id": "jwiJNMiCW6P5d2XXA",
    "difficulty": 1.9930394431554523,
    "language": "python3",
    "summary": "Create a function that returns True if two lines rhyme and False otherwise. For the purposes of this exercise, two lines rhyme if the last word from each sentence contains the same vowels.\n\nExamples\ndoes_rhyme(\"Sam I am!\", \"Green eggs and ham.\") ➞ True\n\ndoes_rhyme(\"Sam I am!\", \"Green eggs and HAM.\") ➞ True\nCapitalization and punctuation should not matter.\n\ndoe",
    "tags": [
      "strings",
      "regex",
      "validation"
    ],
    "title": "Rhyme Time"
  },
  {
    "_id": "CsvdwQvNe8hYomcwB",
    "difficulty": 1.9932885906040267,
    "language": "python3",
    "summary": "Create a function similar to Processings \"map\" function (check the Resources tab), in which a value and it's range is taken and remapped to a new range.\n\nThe function takes 5 numbers:\nValue: value\nRange: low1 and high1\nRange: low2 and high2\n\nExamples\nremap(7, 2, 12, 0, 100) ➞ 50\n\nremap(17, 5, 55, 100, 30) ➞ 83.2\n\nremap(50, 1, 51, 0, 100) ➞ 98\n\nNotes\nYour test",
    "tags": [
      "algorithms",
      "math",
      "numbers"
    ],
    "title": "Re-Map a Number from One Range to Another"
  },
  {
    "_id": "pn7QpvW2fW9grvYYE",
    "difficulty": 1.9940298507462686,
    "language": "python3",
    "summary": "A fulcrum of a list is an integer such that all elements to the left of it and all elements to the right of it sum to the same value. Write a function that finds the fulcrum of a list.\n\nTo illustrate:\nfind_fulcrum([3, 1, 5, 2, 4, 6, -1]) ➞ 2\n// Since [3, 1, 5] and [4, 6, -1] both sum to 9\n\nExamples\nfind_fulcrum([1, 2, 4, 9, 10, -10, -9, 3]) ➞ 4\n\nfind_fulcrum([",
    "tags": [
      "arrays",
      "loops"
    ],
    "title": "Find the Fulcrum"
  },
  {
    "_id": "QoavwQhmrDpXJhBW9",
    "difficulty": 1.9940711462450593,
    "language": "python3",
    "summary": "Create a function that flips a horizontal list into a vertical list, and a vertical list into a horizontal list.\n\nIn other words, take an 1 x n list (1 row + n columns) and flip it into a n x 1 list (n rows and 1 column), and vice versa.\n\nExamples\nflip_list([1, 2, 3, 4]) ➞ [[1], [2], [3], [4]]\nTake a horizontal list and flip it vertical.\n\nflip_list([[5], [6], ",
    "tags": [
      "arrays",
      "formatting",
      "loops"
    ],
    "title": "Flip the Array"
  },
  {
    "_id": "arobBz954ZDxkDC9M",
    "difficulty": 1.9954545454545454,
    "language": "python3",
    "summary": "Given an integer, create a function that returns the next prime. If the number is prime, return the number itself.\n\nExamples\nnext_prime(12) ➞ 13\n\nnext_prime(24) ➞ 29\n\nnext_prime(11) ➞ 11\n11 is a prime, so we return the number itself.\n\nNotes\nN/A",
    "tags": [
      "math",
      "numbers",
      "loops"
    ],
    "title": "Next Prime"
  },
  {
    "_id": "QuxCNBLcGJReCawjz",
    "difficulty": 1.9957537154989384,
    "language": "python3",
    "summary": "A number/string is a palindrome if the digits/characters are the same when read both forward and backward. Examples include \"racecar\" and 12321.  Given a positive number n, check if n or the binary representation of n is palindromic. Return the following:\n\n\"Decimal only.\" if only n is a palindrome.\n\"Binary only.\" if only the binary representation of n is a pal",
    "tags": [
      "numbers",
      "strings"
    ],
    "title": "Decimal and Binary Palindromes"
  },
  {
    "_id": "3r7z6pkGnd4u7eZAd",
    "difficulty": 2,
    "language": "python3",
    "summary": "Given a list of math equations (given as strings), return the percentage of correct answers as a string. Round to the nearest whole number.\n\nExamples\nmark_maths([\"2+2=4\", \"3+2=5\", \"10-3=3\", \"5+5=10\"]) ➞ \"75%\"\n\nmark_maths([\"1-2=-2\"]), \"0%\"\n\nmark_maths([\"2+3=5\", \"4+4=9\", \"3-1=2\"]) ➞ \"67%\"\n\nNotes\nYou can expect only addition and subtraction.\nNote how there aren't",
    "tags": [
      "arrays",
      "strings",
      "formatting",
      "math"
    ],
    "title": "Math Marking"
  },
  {
    "_id": "3W2TRbuD2cnBoXuby",
    "difficulty": 2,
    "language": "python3",
    "summary": "Write a function that returns a list of strings populated from the slices of n-length characters of the given word (a slice after another while n-length applies onto the word).\n\nExamples\ncollect(\"intercontinentalisationalism\", 6)\n➞ [\"ationa\", \"interc\", \"ntalis\", \"ontine\"]\n\ncollect(\"strengths\", 3)\n➞ [\"eng\", \"str\", \"ths\"]\n\ncollect(\"pneumonoultramicroscopicsilico",
    "tags": [
      "arrays",
      "sorting",
      "strings"
    ],
    "title": "N-Length Letter Groups"
  },
  {
    "_id": "7DtnB5qA9DafKpvJP",
    "difficulty": 2,
    "language": "python3",
    "summary": "Your goal is to create a function that returns a list with a string for each of the 108 tiles in the following format:\n\n\"rank suit\"\n\nWhere rank is a number from 1 to 9 and suit is one of the three suits (tong, tiao, wan), both written in the pinyin transcription of Mandarin Chinese (for numbers see table below).\n\nNumber|Character|Pinyin\n--- | --- | ---\n1|一|yi",
    "tags": [
      "arrays",
      "games",
      "loops"
    ],
    "title": "Mahjong Tiles"
  },
  {
    "_id": "7jHaJKK7Yw3SPTJRF",
    "difficulty": 2,
    "language": "python3",
    "summary": "You are given two lists. The elements in lst1 threw a party and started to mix around. However, one of the element got lost! Your task is to return the element which was lost.\n\nExamples\nmissing([1, 2, 3, 4, 5, 6, 7, 8], [1, 3, 4, 5, 6, 7, 8]) ➞ 2\n\nmissing([True, True, False, False, True], [False, True, False, True]) ➞ True\n\nmissing([\"Jane\", \"is\", \"pretty\", \"ug",
    "tags": [
      "arrays"
    ],
    "title": "Who Left the List?"
  },
  {
    "_id": "9cNxcMjfEMzKYoBZY",
    "difficulty": 2,
    "language": "python3",
    "summary": "Given a positive number x, if all the positive divisors of x (excluding x) add up to x, then x is said to be a perfect number.\n\nFor example, the set of positive divisors of 6 excluding 6 itself is (1, 2, 3). The sum of this set is 6. Therefore, 6 is a perfect number.\n\nGiven a positive number x, if all the positive divisors of x add up to a second number y, and",
    "tags": [
      "conditions",
      "math",
      "numbers"
    ],
    "title": "Perfect or Amicable?"
  },
  {
    "_id": "HrCuzAKE6skEYgDmf",
    "difficulty": 2,
    "language": "python3",
    "summary": "Write a function that pairs the first number in an array with the last, the second number with the second to last, etc.\n\nExamples\npairs([1, 2, 3, 4, 5, 6, 7]) ➞ [[1, 7], [2, 6], [3, 5], [4, 4]]\n\npairs([1, 2, 3, 4, 5, 6]) ➞ [[1, 6], [2, 5], [3, 4]]\n\npairs([5, 9, 8, 1, 2]) ➞ [[5, 2], [9, 1], [8, 8]]\n\npairs([]) ➞ []\n\nNotes\nIf the list has an odd length, repeat th",
    "tags": [
      "arrays",
      "loops"
    ],
    "title": "Beginning and End Pairs"
  },
  {
    "_id": "HyLkfdagDGc99ZhbF",
    "difficulty": 2,
    "language": "python3",
    "summary": "Create a function that takes a number n (integer greater than zero) as an argument, and returns 2 if n is odd and 8 if n is even.\n\nYou can only use the following arithmetic operators: addition of numbers +, subtraction of numbers -, multiplication of number `, division of number /, and exponentiation *`.\n\nYou are not allowed to use any other methods in this ch",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "Alternating between Numbers Two and Eight with a Catch"
  },
  {
    "_id": "LhMkMu46rG8EweYf7",
    "difficulty": 2,
    "language": "python3",
    "summary": "Write a function that sort each string in a list by the letter in alphabetic ascending order (a-z).\n\nExamples\nsortbyletter([\"932c\", \"832u32\", \"2344b\"])\n➞ [\"2344b\", \"932c\", \"832u32\"]\n\nsortbyletter([\"99a\", \"78b\", \"c2345\", \"11d\"])\n➞ [\"99a\", \"78b\", \"c2345\", \"11d\"]\n\nsortbyletter([\"572z\", \"5y5\", \"304q2\"])\n➞ [\"304q2\", \"5y5\", \"572z\"]\n\nsortbyletter([])\n➞ []\n\nNotes\nEach",
    "tags": [
      "strings",
      "sorting"
    ],
    "title": "Sort by the Letters"
  },
  {
    "_id": "NYEaXXCnSj9jteNWA",
    "difficulty": 2,
    "language": "python3",
    "summary": "If a person traveled up a hill for 18mins at 20mph and then traveled back down the same path at 60mph then their average speed traveled was 30mph.\n\nWrite a function that returns the average speed traveled given an uphill time, uphill rate and a downhill rate. Uphill time is given in minutes. Return the rate as an integer (mph). No rounding is necessary.\n\nExamp",
    "tags": [
      "math"
    ],
    "title": "Up the Hill, Down the Hill"
  },
  {
    "_id": "RvZfGXR3TQHjLy7mN",
    "difficulty": 2,
    "language": "python3",
    "summary": "Write the regular expression that matches all street addresses. All street addresses begin with a number. Use the character class \\d in your expression.\n\nExample\ntxt = \"123 Redding Dr. 1560 Knoxville Ave. 3030 Norwalk Dr. 5 South St.\"\npattern = \"yourregularexpressionhere\"\n\nlen(re.findall(pattern, txt)) ➞ [\"123 Redding Dr.\", \"1560 Knoxville Ave\", \"3030 Norwalk",
    "tags": [
      "language_fundamentals",
      "regex",
      "formatting"
    ],
    "title": "RegEx VIII-A: Digit Character Class"
  },
  {
    "_id": "kDKNRcmZfRFKxSkjz",
    "difficulty": 2,
    "language": "python3",
    "summary": "lPaeesh le pemu mnxit ehess rtnisg! Oh, sorry, that was supposed to say: Please help me unmix these strings!\n\nSomehow my strings have all become mixed up; every pair of characters has been swapped. Help me undo this so I can understand my strings again.\n\nExamples\nunmix(\"123456\") ➞ \"214365\"\n\nunmix(\"hTsii  s aimex dpus rtni.g\") ➞ \"This is a mixed up string.\"\n\nun",
    "tags": [
      "strings",
      "formatting"
    ],
    "title": "Unmix My Strings"
  },
  {
    "_id": "zkKNmC66ASvSm5wJA",
    "difficulty": 2,
    "language": "python3",
    "summary": "Write a function that takes a number and returns the perimeter of either a circle or a square. The input will be in the form (letter l, number num) where the letter will be either \"s\" for square, or \"c\" for circle, and the number will be the side of the square or the radius of the circle.\n\nUse the following formulas:\n\nPerimeter of a square: 4 * side.\nPerimeter",
    "tags": [
      "numbers",
      "logic",
      "conditions",
      "geometry",
      "math"
    ],
    "title": "Perimeters with a Catch"
  },
  {
    "_id": "EcBpRwgYsbmEWXKB9",
    "difficulty": 2,
    "language": "python3",
    "summary": "Write a function that takes a number and returns True if it's a prime; False otherwise. The number can be 2^64-1 (2 to the power of 63, not XOR). With the standard technique it would be O(2^64-1), which is much too large for the 10 second time limit imposed by Edabit.\n\nSieve of Eratosthenes\n\nExamples\nprime(7) ➞ True\n\nprime(56963) ➞ True\n\nprime(5151512515524) ➞",
    "tags": [
      "math",
      "validation"
    ],
    "title": "Is the Number a Prime? (with a twist)"
  },
  {
    "_id": "ix39oLQv3Zfppfvkg",
    "difficulty": 2,
    "language": "python3",
    "summary": "The main condition of matrix multiplication is that the number of columns of the 1st matrix must equal to the number of rows of the 2nd one.\nAs a result of multiplication you will get a new matrix that has the same quantity of rows as the 1st one has and the same quantity of columns as the 2nd one.\nFor example if you multiply a matrix of \"n\" \\* \"k\" by \"k\" \\* \"",
    "tags": [
      "algebra",
      "algorithms",
      "math",
      "arrays"
    ],
    "title": "Matrix Multiplication"
  },
  {
    "_id": "u4rHyBDs5RM2PfNxy",
    "difficulty": 2.0042372881355934,
    "language": "python3",
    "summary": "Create a function that counts the number of blocks of two or more adjacent 1s in a list.\n\nExamples\ncount_ones([1, 0, 0, 1, 1, 0, 1, 1, 1]) ➞ 2\nTwo instances: [1, 1] (middle) and [1, 1, 1] (end)\n\ncount_ones([1, 0, 1, 0, 1, 0, 1, 0]) ➞ 0\n\ncount_ones([1, 1, 1, 1, 0, 0, 0, 0]) ➞ 1\n\ncount_ones([0, 0, 0]) ➞ 0\n\nNotes\nA single 1 by itself (surrounded by a zero on its ",
    "tags": [
      "arrays",
      "regex",
      "strings"
    ],
    "title": "Number of Two or More Consecutive Ones"
  },
  {
    "_id": "sDvjdcBrbHoXKvDsZ",
    "difficulty": 2.00451467268623,
    "language": "python3",
    "summary": "Write a function that returns True if a given name can generate an array of words.\n\nExamples\nanagram(\"Justin Bieber\", [\"injures\", \"ebb\", \"it\"]) ➞ True\n\nanagram(\"Natalie Portman\", [\"ornamental\", \"pita\"]) ➞ True\n\nanagram(\"Chris Pratt\", [\"chirps\", \"rat\"]) ➞ False\nNot all letters are used\n\nanagram(\"Jeff Goldblum\", [\"jog\", \"meld\", \"bluffs\"]) ➞ False\n\"s\" does not ex",
    "tags": [
      "strings",
      "arrays",
      "validation"
    ],
    "title": "Generating Words from Names"
  },
  {
    "_id": "JPdKrztrcL7DpooDr",
    "difficulty": 2.00625,
    "language": "python3",
    "summary": "A Collatz sequence is generated by repeatedly applying the following rules to an integer and then to each resulting integer in turn:\n\nIf even: divide by 2.\nIf odd: multiply by 3, then add 1.\n\nThe Collatz conjecture states that, for any initial positive integer, you will eventually reach the number 1.\n\nWrite a function that, for an initial positive integer n, r",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "Collatz Calculator"
  },
  {
    "_id": "qQnWXBsQaH73yY8r4",
    "difficulty": 2.0078328981723237,
    "language": "python3",
    "summary": "The Kempner Function, applied to a composite number, permits to find the smallest integer greater than zero whose factorial is exactly divided by the number.\n\nkempner(6) ➞ 3\n\n1! = 1 % 6 > 0\n2! = 2 % 6 > 0\n3! = 6 % 6 === 0\n\nkempner(10) ➞ 5\n\n1! = 1 % 10 > 0\n2! = 2 % 10 > 0\n3! = 6 % 10 > 0\n4! = 24 % 10 > 0\n5! = 120 % 10 === 0\n\nA Kempner Function applied to a prim",
    "tags": [
      "math",
      "numbers",
      "recursion",
      "higher_order_functions"
    ],
    "title": "The Kempner Function"
  },
  {
    "_id": "kfXz49avvohsYSxoe",
    "difficulty": 2.0078740157480315,
    "language": "python3",
    "summary": "Welcome to part three of the collection for Computer Science Algorithms. Once more we'll be delving into recursion by covering the topic of Binary Searches.\n\nA \"Binary Search\" is a search algorithm that is used on an already sorted array. It  compares the target value to the middle element of an array. If they don't match, the half in which the target cannot l",
    "tags": [
      "algorithms",
      "recursion",
      "arrays"
    ],
    "title": "Algorithms III: Binary Search"
  },
  {
    "_id": "HBuWYyh5YCmDKF4uH",
    "difficulty": 2.0090909090909093,
    "language": "python3",
    "summary": "An almost-sorted sequence is a sequence that is strictly increasing or strictly decreasing if you remove a single element from the list (no more, no less). Write a function that returns True if a list is almost-sorted, and False otherwise.\n\nFor example, if you remove 80 from the first example, it is perfectly sorted in ascending order. Similarly, if you remove",
    "tags": [
      "arrays",
      "validation",
      "sorting"
    ],
    "title": "Almost Sorted Sequence"
  },
  {
    "_id": "uv6NvSydCGB7jKAyu",
    "difficulty": 2.00990099009901,
    "language": "python3",
    "summary": "Hermione has come up with a precise formula for determining whether or not a phrase was ssspoken by a parssseltongue (a reference from the Harry Potter universe; the language of ssserpents and those who can converse with them).\n\nEach word in a sssentence must contain either:\n\nTwo or more consecutive instances of the letter \"s\" (i.e. must be together ss..), or.",
    "tags": [
      "strings",
      "validation",
      "regex"
    ],
    "title": "Parseltongue"
  },
  {
    "_id": "QcswPnY2cAbrfwuWE",
    "difficulty": 2.0105820105820107,
    "language": "python3",
    "summary": "Create a function that filters out factorials from a list. A factorial is a number that can be represented in the following manner:\n\nn! = n * (n-1) * (n-2) * ... * 3 * 2 * 1\n\nRecursively, this can be represented as:\n\nn! = n * (n-1)!\n\nExamples\nfilter_factorials([1, 2, 3, 4, 5, 6, 7]) ➞ [1, 2, 6]\n\nfilter_factorials([1, 4, 120]) ➞ [1, 120]\n\nfilter_factorials([8,",
    "tags": [
      "arrays",
      "math"
    ],
    "title": "Factorials"
  },
  {
    "_id": "bwCDG9X8cJiAdvfxE",
    "difficulty": 2.0106951871657754,
    "language": "python3",
    "summary": "Write a function that adds two numbers. The catch, however, is that the numbers will be strings.\n\nExamples\naddstrnums(\"4\", \"5\") ➞ \"9\"\n\naddstrnums(\"abcdefg\", \"3\") ➞ \"-1\"\n\naddstrnums(\"1\", \"\") ➞ \"1\"\n\naddstrnums(\"1874682736267235927359283579235789257\", \"32652983572985729\") ➞ \"1874682736267235927391936562808774986\"\n\nNotes\nIf there are any non-numerical characters,",
    "tags": [
      "strings",
      "numbers",
      "language_fundamentals",
      "math"
    ],
    "title": "Add Two String Numbers"
  },
  {
    "_id": "TZXG9RfcZ7T3o43QF",
    "difficulty": 2.010752688172043,
    "language": "python3",
    "summary": "Write a function that returns True if every consecutive sequence of ones is followed by a consecutive sequence of zeroes of the same length.\n\nExamples\nsame_length(\"110011100010\") ➞ True\n\nsame_length(\"101010110\") ➞ False\n\nsame_length(\"111100001100\") ➞ True\n\nsame_length(\"111\") ➞ False\n\nNotes\nN/A",
    "tags": [
      "strings",
      "loops",
      "regex",
      "validation"
    ],
    "title": "Ones and Zeroes"
  },
  {
    "_id": "wEr6R9kc5oG88FRYy",
    "difficulty": 2.011406844106464,
    "language": "python3",
    "summary": "Create a function that takes the width, height and character and returns a picture frame as a 2D list.\n\nExamples\nget_frame(4, 5, \"#\") ➞ [\n  [\"####\"],\n  [\"#  #\"],\n  [\"#  #\"],\n  [\"#  #\"],\n  [\"####\"]\n]\nFrame is 4 characters wide and 5 characters tall.\n\nget_frame(10, 3, \"*\") ➞ [\n  [\"**\"],\n  [\"*        *\"],\n  [\"**\"]\n]\nFrame is 10 characters and wide and 3 character",
    "tags": [
      "arrays",
      "strings",
      "formatting",
      "loops"
    ],
    "title": "Creating a Picture Frame"
  },
  {
    "_id": "S4uZaKhcDa7pJ33nu",
    "difficulty": 2.0114942528735633,
    "language": "python3",
    "summary": "Create a function which takes in a date as a string, and returns the date a week after.\n\nExamples\nweek_after(\"12/03/2020\") ➞ \"19/03/2020\"\n\nweek_after(\"21/12/1989\") ➞ \"28/12/1989\"\n\nweek_after(\"01/01/2000\") ➞ \"08/01/2000\"\n\nNotes\nNote that dates will be given in day/month/year format.\nSingle digit numbers should be zero padded.\nSee Resources for some helpful tuto",
    "tags": [
      "dates",
      "strings",
      "formatting"
    ],
    "title": "A Week Later"
  },
  {
    "_id": "Q9EkExy6BYLnqBCQB",
    "difficulty": 2.011904761904762,
    "language": "python3",
    "summary": "Create a function to reproduce the wrap around effect shown:\n\nExamples\nwrap_around(\"Hello, World!\", 2) ➞ \"llo, World!He\"\n\nwrap_around(\"From what I gathered\", -4) ➞ \"eredFrom what I gath\"\n\nwrap_around(\"Excelsior\", 30) ➞ \"elsiorExc\"\n\nwrap_around(\"Nonscience\", -116) ➞ \"cienceNons\"\n\nNotes\nThe offset can be negative.\nThe offset can be greater than the length of str",
    "tags": [
      "strings",
      "formatting",
      "language_fundamentals"
    ],
    "title": "Wrap Around"
  },
  {
    "_id": "kKFuf9hfo2qnu7pBe",
    "difficulty": 2.012244897959184,
    "language": "python3",
    "summary": "Create a function that finds a target number in a list of prime numbers. Implement a binary search algorithm in your function. The target number will be from 2 through 97. If the target is prime then return \"yes\" else return \"no\".\n\nExamples\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\nis_prime(prime",
    "tags": [
      "algorithms",
      "validation",
      "interview"
    ],
    "title": "Algorithms:  Binary Search"
  },
  {
    "_id": "3oqStN7bevcT72fgk",
    "difficulty": 2.0123456790123457,
    "language": "python3",
    "summary": "Write a function that, given a date (in the format MM/DD/YYYY), returns the day of the week as a string. Each day name must be one of the following strings: \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", or \"Saturday\".\n\nTo illustrate, the day of the week for \"12/07/2016\" is \"Wednesday\".\n\nExamples\nget_day(\"12/07/2016\") ➞ \"Wednesday\"\n\nget_day(",
    "tags": [
      "dates",
      "formatting",
      "language_fundamentals"
    ],
    "title": "Get the Date"
  },
  {
    "_id": "gzhiy45fsNGW4sJKc",
    "difficulty": 2.013157894736842,
    "language": "python3",
    "summary": "You might get text that looks like it's all English characters but it very well may not be: pànts != pants\n\nTo ensure that you only get the characters you want in a string you will need to use the character classes that accept hexadecimal digits.\n\nWrite a regular expression that will match the word \"edabit\". Use the hexadecimal character classes \\x or \\u in yo",
    "tags": [
      "regex",
      "formatting",
      "validation"
    ],
    "title": "RegEx XIII: Hexadecimal Character Class"
  },
  {
    "_id": "tQPApXhwoQ6zztxWJ",
    "difficulty": 2.013550135501355,
    "language": "python3",
    "summary": "You are given a list of strings consisting of grocery items, with prices in parentheses. Return a list of prices in float format.\n\nExamples\nget_prices([\"salad ($4.99)\"]) ➞ [4.99]\n\nget_prices([\n  \"artichokes ($1.99)\",\n  \"rotiserrie chicken ($5.99)\",\n  \"gum ($0.75)\"\n])\n\n➞ [1.99, 5.99, 0.75]\n\nget_prices([\n  \"ice cream ($5.99)\",\n  \"banana ($0.20)\",\n  \"sandwich ($8",
    "tags": [
      "regex",
      "strings"
    ],
    "title": "Grocery Store Prices"
  },
  {
    "_id": "KQe5w8AdSLbweW8ck",
    "difficulty": 2.013793103448276,
    "language": "python3",
    "summary": "Create a function that returns the characters from a list or string r on odd or even positions, depending on the specifier s. The specifier will be \"odd\" for items on odd positions (1, 3, 5, ...) and \"even\" for items on even positions (2, 4, 6, ...).\n\nExamples\ncharatpos([2, 4, 6, 8, 10], \"even\") ➞ [4, 8]\n4 & 8 occupy the 2nd & 4th positions\n\ncharatpos(\"EDABIT\"",
    "tags": [
      "arrays",
      "functional_programming",
      "validation"
    ],
    "title": "Oddly or Evenly Positioned"
  },
  {
    "_id": "MKP8QxzuDaqYAJ6sZ",
    "difficulty": 2.013937282229965,
    "language": "python3",
    "summary": "You are in the process of creating a chat application and want to add an anonymous name feature. This anonymous name feature will create an alias that consists of two capitalized words beginning with the same letter as the users first name.\n\nCreate a function that determines if the list of users is mapped to a list of anonymous names correctly.\n\nExamples\niscor",
    "tags": [
      "strings",
      "arrays",
      "loops"
    ],
    "title": "Anonymous Name"
  },
  {
    "_id": "QEL3QAY9ZhSkZcEih",
    "difficulty": 2.0144927536231885,
    "language": "python3",
    "summary": "Create two functions:\n\nThe first is is_odd() to check if a given number is odd using bitwise operator.\nThe second is is_even() to check if a given input is even using regular expressions.\n\nUse of  % operator is disallowed.\n\nExamples\nis_odd(3) ➞ \"Yes\"\nUse Bitwise Operator\n\nis_odd(58) ➞ \"No\"\nUse Bitwise Operator\n\nis_even(\"0\") ➞ \"Yes\"\nUse Regular Expression\n\nis_e",
    "tags": [
      "conditions",
      "regex",
      "bit_operations",
      "validation"
    ],
    "title": "Bitwise Operator to Check Odd, Regular Expression to Check Even"
  },
  {
    "_id": "Nda8BQHhZSajpnt5z",
    "difficulty": 2.015748031496063,
    "language": "python3",
    "summary": "Write a function that returns the greatest common divisor of all list elements. If the greatest common divisor is 1, return 1.\n\nExamples\nGCD([10, 20, 40]) ➞ 10\n\nGCD([1, 2, 3, 100]) ➞ 1\n\nGCD([1024, 192, 2048, 512]) ➞ 64\n\nNotes\nList elements are always greater than 0.\nThere is a minimum of two list elements given.",
    "tags": [
      "algebra",
      "algorithms",
      "math",
      "numbers"
    ],
    "title": "Common Divisor of List"
  },
  {
    "_id": "b67PHXfgMwpD9rAeg",
    "difficulty": 2.016574585635359,
    "language": "python3",
    "summary": "Create a function that takes a string as an argument and returns True if each letter in the string is surrounded by a plus sign.  Return False otherwise.\n\nExamples\nplus_sign(\"+f+d+c+#+f+\") ➞ True\n\nplus_sign(\"+d+=3=+s+\") ➞ True\n\nplus_sign(\"f++d+g+8+\") ➞ False\n\nplus_sign(\"+s+7+fg+r+8+\") ➞ False\n\nNotes\nFor clarity, each letter must have a plus sign on both sides.",
    "tags": [
      "regex",
      "strings",
      "conditions",
      "validation"
    ],
    "title": "Know Your Neighbor"
  },
  {
    "_id": "64w3Mpumi7kTA82Sv",
    "difficulty": 2.0166666666666666,
    "language": "python3",
    "summary": "Create a function that takes a string and determine if it's a valid sequence by either returning True or False. The string will be composed of + and = symbols with several characters between them (e.g. \"++d+===+c++==a\") and for the string to be True, each letter must be surrounded by a + symbol. So the string to the left would be False.\n\nExamples\nsimple_symbol",
    "tags": [
      "regex",
      "validation"
    ],
    "title": "Simple Symbols"
  },
  {
    "_id": "oTzuXDWL26gnY5a5P",
    "difficulty": 2.0168539325842696,
    "language": "python3",
    "summary": "Create a function that finds how many prime numbers there are, up to the given integer.\n\nExamples\nprime_numbers(10) ➞ 4\n2, 3, 5 and 7\n\nprime_numbers(20) ➞ 8\n2, 3, 5, 7, 11, 13, 17 and 19\n\nprime_numbers(30) ➞ 10\n2, 3, 5, 7, 11, 13, 17, 19, 23 and 29\n\nNotes\nN/A",
    "tags": [
      "algebra",
      "algorithms",
      "conditions",
      "math",
      "loops"
    ],
    "title": "How Many \"Prime Numbers\" Are There?"
  },
  {
    "_id": "Fm7ap2w3exqunF9aJ",
    "difficulty": 2.017094017094017,
    "language": "python3",
    "summary": "Create a function which counts how many lone 1s appear in a given number. Lone means the number doesn't appear twice or more in a row.\n\nExamples\ncountloneones(101) ➞ 2\n\ncountloneones(1191) ➞ 1\n\ncountloneones(1111) ➞ 0\n\ncountloneones(462) ➞ 0\n\nNotes\nTests will include positive whole numbers only.",
    "tags": [
      "algorithms",
      "loops",
      "numbers",
      "regex"
    ],
    "title": "Count the Lone Ones"
  },
  {
    "_id": "nb836onw9bek4FPDt",
    "difficulty": 2.017094017094017,
    "language": "python3",
    "summary": "Given a sentence, return the number of words which have the same first and last letter.\n\nExamples\ncountsameends(\"Pop! goes the balloon\") ➞ 1\n\ncountsameends(\"And the crowd goes wild!\") ➞ 0\n\ncountsameends(\"No I am not in a gang.\") ➞ 1\n\nNotes\nDon't count single character words (such as \"I\" and \"A\" in example #3).\nThe function should not be case sensitive, meaning",
    "tags": [
      "strings",
      "loops",
      "regex"
    ],
    "title": "Same on Both Ends"
  },
  {
    "_id": "bupEio82q8NMnovZx",
    "difficulty": 2.017467248908297,
    "language": "python3",
    "summary": "A robot has been given a list of movement instructions. Each instruction is either left, right, up or down, followed by a distance to move. The robot starts at [0, 0]. You want to calculate where the robot will end up and return the its final position as a list.\n\nTo illustrate, if the robot is given the following instructions:\n\n[\"right 10\", \"up 50\", \"left 30\",",
    "tags": [
      "loops",
      "strings",
      "arrays"
    ],
    "title": "Track the Robot (Part 1)"
  },
  {
    "_id": "6hnrKRh7fZfMC5CKY",
    "difficulty": 2.0176470588235293,
    "language": "python3",
    "summary": "Given a number with an even number of digits, return a new number according to the rules below:\n\nSplit the number into groups of two digit numbers. If the number has an odd number of digits, return \"invalid\".\nFor each group of two digit numbers, concatenate the last digit to a string to the same number of times as the value of the first digit.\nReturn the resul",
    "tags": [
      "math",
      "numbers",
      "algorithms"
    ],
    "title": "Look and Say Numbers"
  },
  {
    "_id": "biJPWHr486Y4cPLnD",
    "difficulty": 2.018181818181818,
    "language": "python3",
    "summary": "Write a function that divides a list into chunks of size n, where n is the length of each chunk.\n\nExamples\nchunkify([2, 3, 4, 5], 2) ➞ [[2, 3], [4, 5]]\n\nchunkify([2, 3, 4, 5, 6], 2) ➞ [[2, 3], [4, 5], [6]]\n\nchunkify([2, 3, 4, 5, 6, 7], 3) ➞ [[2, 3, 4], [5, 6, 7]]\n\nchunkify([2, 3, 4, 5, 6, 7], 1) ➞ [[2], [3], [4], [5], [6], [7]]\n\nchunkify([2, 3, 4, 5, 6, 7], 7)",
    "tags": [
      "arrays",
      "formatting",
      "loops"
    ],
    "title": "Divide Array into Chunks"
  },
  {
    "_id": "T2hxBoqBHQT9kovji",
    "difficulty": 2.018867924528302,
    "language": "python3",
    "summary": "Given an integer n, return any list containing n unique integers such that they add up to 0.\n\nExamples\nlistwithzero_sum(5) ➞ [-7, -1, 1, 3, 4] or [-5, -1, 1, 2, 3] or [-3, -1, 2, -2, 4]\n\nlistwithzero_sum(3) ➞ [-1, 0, 1]\n\nlistwithzero_sum(1) ➞ [0]\n\nNotes\nN/A",
    "tags": [
      "arrays",
      "conditions",
      "math"
    ],
    "title": "List with Zero Sum"
  },
  {
    "_id": "MSX7AHcNiCZpCsiXY",
    "difficulty": 2.02,
    "language": "python3",
    "summary": "Create a function which returns how many Friday 13ths there are in a given year.\n\nExamples\nhow_unlucky(2020) ➞ 2\n\nhow_unlucky(2026) ➞ 3\n\nhow_unlucky(2016) ➞ 1\n\nNotes\nCheck Resources for some helpful tutorials on the Python datetime module.",
    "tags": [
      "dates",
      "language_fundamentals"
    ],
    "title": "Unlucky Years"
  },
  {
    "_id": "knWLLoi87YbCmKJS4",
    "difficulty": 2.020408163265306,
    "language": "python3",
    "summary": "Given any number, we can create a new number by adding the sums of squares of digits of that number. For example, given 203, our new number is 4 + 0 + 9 = 13. If we repeat this process, we get a sequence of numbers:\n\n203 -> 13 -> 10 -> 1 -> 1\n\nSometimes, like with 203, the sequence reaches (and stays at) 1. Numbers like this are called happy.\n\nNot all numbers ",
    "tags": [
      "loops",
      "validation"
    ],
    "title": "Happy Numbers"
  },
  {
    "_id": "kjJWvK9XtdbEJ2EKe",
    "difficulty": 2.0206896551724136,
    "language": "python3",
    "summary": "Python has a beautiful built-in function sorted that sorts an iterable, usually an array of numbers, sorting them in ascending order, but using key= you can sort the iterable in different ways.\n\nCreate a function that takes an array of integers as an argument and returns the same array in ascending order. Using sorted() would be easy, but for this challenge YO",
    "tags": [
      "algorithms",
      "logic",
      "sorting",
      "language_fundamentals"
    ],
    "title": "Sorting Time"
  },
  {
    "_id": "3y2FmfjhbiQPPYbcn",
    "difficulty": 2.021551724137931,
    "language": "python3",
    "summary": "Once a water balloon pops, is soaks the area around it. The ground gets drier the further away you travel from the balloon.\n\nThe effect of a water balloon popping can be modeled using a list. Create a function that takes a list which takes the pre-pop state and returns the state after the balloon is popped. The pre-pop state will contain at most a single ballo",
    "tags": [
      "arrays",
      "loops"
    ],
    "title": "Water Balloon "
  },
  {
    "_id": "AJPB4jA3G5YxegGrk",
    "difficulty": 2.0234375,
    "language": "python3",
    "summary": "This problem is a continuation of Uno Part 1 (although you don't need to complete that problem to complete this one).\n\nIt's your turn to play again. Create a function that takes as its arguments (1) your hand (a list of cards), and (2) the face-up card. In Uno, you are able to play a card from your hand if either:\n\nOne of the card colors in your hand matches t",
    "tags": [
      "arrays",
      "games",
      "conditions",
      "loops"
    ],
    "title": "Uno (Part 2)"
  },
  {
    "_id": "26P2iwW5WfwPGJyWE",
    "difficulty": 2.0238095238095237,
    "language": "python3",
    "summary": "Suppose a student can earn 100% on an exam by getting the answers all correct or all incorrect. Given a potentially incomplete answer key and the student's answers, write a function that determines whether or not a student can still score 100%. Incomplete questions are marked with an underscore, \"_\".\n\n[\"A\", \"\", \"C\", \"\", \"B\"]   # answer key\n[\"A\", \"D\", \"C\", \"E\",",
    "tags": [
      "arrays",
      "validation"
    ],
    "title": "All or Nothing"
  },
  {
    "_id": "QjG5EFS9pZe4iavPz",
    "difficulty": 2.0238095238095237,
    "language": "python3",
    "summary": "The Fibonacci sequence is a classic use case for recursive functions since the value of the sequence at a given index is dependent on the sum of the last two values. However, the recursion tree created by solving the Fibonacci sequence recursively can grow quite fast. Therefore it can be important to think about the implications of running a function recursive",
    "tags": [
      "algebra",
      "math",
      "numbers"
    ],
    "title": "Fibonacci !Recursion"
  },
  {
    "_id": "Cp3JRpooAqfA4kGkv",
    "difficulty": 2.024390243902439,
    "language": "python3",
    "summary": "We have two lists N and P,  where N represents the value of a node in Binary Tree, and P is the parent of _N.\n\nN | P\n--- | ---\n1 | 2\n3 | 2\n6 | 8\n9 | 8\n2 | 5\n8 | 5\n5 | -1\n\nWrite a function to find the node type of the node within this Binary Tree, ordered by the value of the node. Output one of the following:\n\nRoot: If node is root node.\nLeaf: If node is leaf n",
    "tags": [
      "algorithms",
      "arrays",
      "conditions",
      "interview"
    ],
    "title": "Binary Tree Nodes"
  },
  {
    "_id": "eomsubuQLmwASWbMB",
    "difficulty": 2.0246913580246915,
    "language": "python3",
    "summary": "Write a method that when passed a date as \"dd mm yyyy\" and returns the date's weekday name in the Dutch culture.\n\nExamples\nweekday_dutch(\"21 9 1970\") ➞ \"maandag\"\n\nweekday_dutch(\"2 9 1945\") ➞ \"zondag\"\n\nweekday_dutch(\"9 11 2001\") ➞ \"dinsdag\"\n\nNotes\nCheck the Resources tab for help.\nYou can assume the specified date is valid.",
    "tags": [
      "arrays",
      "dates"
    ],
    "title": "The Day in Dutch"
  },
  {
    "_id": "Emdzxs23PRzSDuvk3",
    "difficulty": 2.0255681818181817,
    "language": "python3",
    "summary": "Pizza Points\n\nGoogle is launching a network of autonomous pizza delivery drones and wants you to create a flexible rewards system (Pizza Points™) that can be tweaked in the future. The rules are simple: if a customer has made at least N orders of at least Y price, they get a FREE pizza!\n\nCreate a function that takes a dictionary of customers, a minimum number",
    "tags": [
      "games",
      "objects"
    ],
    "title": "Pizza Points™ 🍕"
  },
  {
    "_id": "6sSWKcy8ttDTvkvsL",
    "difficulty": 2.0264550264550265,
    "language": "python3",
    "summary": "If today was Monday, in two days, it would be Wednesday.\n\nCreate a function that takes in a list of days as input and the number of days to increment by. Return a list of days after n number of days has passed.\n\nExamples\nafterndays([\"Thursday\", \"Monday\"], 4) ➞ [\"Monday\", \"Friday\"]\n\nafterndays([\"Sunday\", \"Sunday\", \"Sunday\"], 1) ➞ [\"Monday\", \"Monday\", \"Monday\"]",
    "tags": [
      "dates",
      "arrays"
    ],
    "title": "In N Days..."
  },
  {
    "_id": "9SLvXXz8ED7B6joJg",
    "difficulty": 2.0275229357798166,
    "language": "python3",
    "summary": "From point A, an object is moving towards point B at constant velocity va (in km/hr). From point B, another object is moving towards point A at constant velocity vb (in km/hr). Knowing this and the distance between point A and B (in km), write a function that returns how much time passes until both objects meet.\n\nFormat the output like this:\n\n\"2h 23min 34s\"\n\nE",
    "tags": [
      "algebra",
      "numbers"
    ],
    "title": "Let's Meet!"
  },
  {
    "_id": "rBMsnM8HuGNSwkBCR",
    "difficulty": 2.0279329608938546,
    "language": "python3",
    "summary": "Create a function that takes a string containing money in dollars and pounds sterling (seperated by comma) and returns the sum of dollar bills only, as an integer.\n\nFor the input string:\n\nEach amount is prefixed by the currency symbol: $ for dollars and £ for pounds.\nThousands are represented by the suffix k.\n\ni.e. $4k = $4,000 and £40k = £40,000\n\nExamples\nadd",
    "tags": [
      "strings",
      "language_fundamentals"
    ],
    "title": "Add  Dollar Bills"
  },
  {
    "_id": "s7XRjapA8R4qwJrG2",
    "difficulty": 2.028169014084507,
    "language": "python3",
    "summary": "Given a sentence of all lowercase words, reverse all the letters in each word, but leave the first and last letters as they are.\n\nExamples\nmix_middle(\"the quick brown fox jumps high\") ➞ \"the qciuk bworn fox jpmus hgih\"\n\nmix_middle(\"this sentence is quite muddled\") ➞ \"tihs scnetnee is qtiue melddud\"\n\nmix_middle(\"buying a first-class ticket\") ➞ \"bniyug a fsalc-t",
    "tags": [
      "loops",
      "strings"
    ],
    "title": "Muddled Middles"
  },
  {
    "_id": "MhtcQNMbkP82ZKJpm",
    "difficulty": 2.0283018867924527,
    "language": "python3",
    "summary": "Create a function that takes a list of students and returns an dictionary representing their notes distribution. Have in mind that all invalid notes should not be count in the distribution. Valid notes are: 1, 2, 3, 4, 5\n\nExamples\n[\n  {\n    name: \"Steve\",\n    notes: [5, 5, 3, -1, 6]\n  },\n  {\n    name: \"John\",\n    notes: [3, 2, 5, 0, -3]\n  }\n] ➞ {\n  5: 3,\n  3:",
    "tags": [
      "arrays",
      "objects"
    ],
    "title": "Get Notes Distribution"
  },
  {
    "_id": "stXWy2iufNhBo9sTW",
    "difficulty": 2.0288461538461537,
    "language": "python3",
    "summary": "Rondo Form is a type of musical structure, in which there is a recurring theme/refrain, notated as A. Here are the rules for valid rondo forms:\nRondo forms always start and end with an A section.\nIn between the A sections, there should be contrasting sections notated as B, then C, then D, etc... No letter should be skipped.\nThere shouldn't be any repeats in th",
    "tags": [
      "strings",
      "loops",
      "validation"
    ],
    "title": "Valid Rondo Form?"
  },
  {
    "_id": "E9FwvGyad5CDbiH4C",
    "difficulty": 2.028985507246377,
    "language": "python3",
    "summary": "Create a function that takes a 2D array as an argument and returns the number of people whose view is blocked by a tall person. The concert stage is pointed towards the top of the 2D array and the tall person (represented by a 2) blocks the view of all the people (represented by a 1) behind them.\n\nExamples\nblock([\n  [1, 1, 1, 1, 1],\n  [1, 1, 1, 1, 1],\n  [1, 1,",
    "tags": [
      "loops",
      "arrays"
    ],
    "title": "Tall People"
  },
  {
    "_id": "FJy63LnHHPH9dkEbA",
    "difficulty": 2.028985507246377,
    "language": "python3",
    "summary": "An ultrarelativistic particle is one whose speed v is very close to the speed of light c (or equivalently, one whose β = v/c is very close to 1). But a number like 0.9999999999999999999 is inconvenient to work with: calculators round it to 1, and trying to write it in scientific notation does the same (because any 9 you stop at gets rounded up by the following",
    "tags": [
      "math",
      "algebra"
    ],
    "title": "How Close to the Speed of Light?"
  },
  {
    "_id": "uAZcCxNj3TtqvxP34",
    "difficulty": 2.029166666666667,
    "language": "python3",
    "summary": "The mode of a group of numbers is the value (or values) that occur most often (values have to occur more than once). Given a sorted list of numbers, return a list of all modes in ascending order.\n\nExamples\nmode([4, 5, 6, 6, 6, 7, 7, 9, 10]) ➞ [6]\n\nmode([4, 5, 5, 6, 7, 8, 8, 9, 9]) ➞ [5, 8, 9]\n\nmode([1, 2, 2, 3, 6, 6, 7, 9]) ➞ [2, 6]\n\nNotes\nIn this challenge, a",
    "tags": [
      "arrays",
      "numbers",
      "math"
    ],
    "title": "Basic Statistics: Mode"
  },
  {
    "_id": "2PMS2CcnQQw487hDg",
    "difficulty": 2.0296296296296297,
    "language": "python3",
    "summary": "Write a regular expression that will match the states that voted yes to President Trump's impeachment. You must use RegEx positive lookahead.\n\nExample\ntxt = \"Texas = no, California = yes, Florida = yes, Michigan = no\"\npattern = \"yourregularexpressionhere\"\n\nre.findall(pattern, txt) ➞ [\"California\", \"Florida\"]\n\nNotes\nYou don't need to write a function, just the",
    "tags": [
      "language_fundamentals",
      "regex",
      "strings"
    ],
    "title": "RegEx IV: Positive Lookahead"
  },
  {
    "_id": "Yfksxs7kyJf6B3yvK",
    "difficulty": 2.0317460317460316,
    "language": "python3",
    "summary": "Given a list of integers, return the smallest positive integer not present in the list.\n\nHere is a representative example. Consider the list:\n\n[-2, 6, 4, 5, 7, -1, 7, 1, 3, 6, 6, -2, 9, 10, 2, 2]\n\nAfter reordering, the list becomes:\n\n[-2, -2, -1, 1, 2, 2, 3, 4, 5, 6, 6, 6, 7, 7, 9, 10]\n\n... from which we see that the smallest missing positive integer is 8.\n\nEx",
    "tags": [
      "numbers",
      "math",
      "arrays"
    ],
    "title": "Smallest Missing Positive Integer"
  },
  {
    "_id": "vC4P2jGR6wxED7MBL",
    "difficulty": 2.0331753554502368,
    "language": "python3",
    "summary": "Create a function that retrieves every number that is strictly larger than every number that follows it.\n\nExamples\nlargerthanright([3, 13, 11, 2, 1, 9, 5]) ➞ [13, 11, 9, 5]\n13 is larger than all numbers to its right, etc.\n\nlargerthanright([5, 5, 5, 5, 5, 5]) ➞ [5]\nMust be strictly larger.\nAlways include the last number.\n\nlargerthanright([5, 9, 8, 7]) ➞ [9, 8,",
    "tags": [
      "arrays",
      "loops"
    ],
    "title": "Larger than All Numbers to Their Right"
  },
  {
    "_id": "t56Nk2kJkQ6H4xzgX",
    "difficulty": 2.033333333333333,
    "language": "python3",
    "summary": "Write a function that swaps the X and Y coordinates in a string.\n\nExamples\nswap_xy(\"(1, 2), (3, 4)\") ➞ \"(2, 1), (4, 3)\"\n\nswap_xy(\"(11, 23), (43, 99)\") ➞ \"(23, 11), (99, 43)\"\n\nswap_xy(\"(-5, -3), (7, 4)\") ➞ \"(-3, -5), (4, 7)\"\n\nNotes\nSome numbers have multiple digits.\nSome numbers will be negative.",
    "tags": [
      "strings",
      "regex"
    ],
    "title": "Swap X and Y Coordinates"
  },
  {
    "_id": "oFNJeSzzcTgMwLFy5",
    "difficulty": 2.0344827586206895,
    "language": "python3",
    "summary": "Write a function that takes a string \"a + bi\" and returns a tuple (a, b).\n\nExamples\ncomplextotuple(\"1 + 2i\") ➞ (1, 2)\n\ncomplextotuple(\"6 + 9i\") ➞ (6, 9)\n\ncomplextotuple(\"-7 - 2i\") ➞ (-7, -2)\n\nNotes\nAll strings are going to have the (±)a ± bi format, (where a and b are integers).",
    "tags": [
      "math",
      "numbers",
      "strings",
      "logic"
    ],
    "title": "Complex Numbers"
  },
  {
    "_id": "nm8zFcqcQ9Rzu45Fm",
    "difficulty": 2.035019455252918,
    "language": "python3",
    "summary": "Create a function to bridge shuffle two lists. To bridge shuffle, you interleave the elements from both lists in an alternating fashion, like so:\n\nList 1 = [\"A\", \"A\", \"A\"]\nList 2 = [\"B\", \"B\", \"B\"]\n\nShuffled List = [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"]\n\nThis can still work with two lists of uneven length. We simply tack on the extra elements from the longer list, like",
    "tags": [
      "arrays",
      "loops"
    ],
    "title": "Bridge Shuffle"
  },
  {
    "_id": "JFfA3Zhuprom6RGgt",
    "difficulty": 2.0350877192982457,
    "language": "python3",
    "summary": "Create a function that sums up all the elements in the list recursively. The use of the sum() built-in function is not allowed, thus, the approach is recursive.\n\nExamples\nrecur_add([1, 2, 3, 4, 10, 11]) ➞ 31\n\nrecur_add([-3, 4, 11, 10, 21, 32, -9]) ➞ 66\n\nrecur_add([-21, -7, 19, 3, 4, -8]) ➞ -10\n\nNotes\nYou're expected to solve this challenge using a recursive ap",
    "tags": [
      "recursion",
      "arrays"
    ],
    "title": "Recursion: List Summation"
  },
  {
    "_id": "haaS4SBv42N3btcg5",
    "difficulty": 2.0352941176470587,
    "language": "python3",
    "summary": "Hash algorithms are easy to do one way, but essentially impossible to do in reverse. For example, if you hash something simple, like password123, it will give you a long code, unique to that word or phrase. Ideally, there's no way to do this in reverse. You can't take the hash code and go back to the word or phrase you started with.\n\nMake a function that retur",
    "tags": [
      "cryptography",
      "strings",
      "algorithms"
    ],
    "title": "Get SHA-256 Hash"
  },
  {
    "_id": "72XK73LFkd7wuakwZ",
    "difficulty": 2.035502958579882,
    "language": "python3",
    "summary": "In this challenge, you have to separate integers into two families, establishing if they are Junction Numbers or Self Numbers. Given a number n:\n\nIf exists at least a single number which added to the sum of its digits is equal to n, then n is a Junction Number.\n\nIf there are not numbers which added to the sum of their digits are equal to n, then n is a Self Nu",
    "tags": [
      "numbers",
      "loops"
    ],
    "title": "Junction or Self?"
  },
  {
    "_id": "qujNfKFH9JkpwzuLt",
    "difficulty": 2.0357142857142856,
    "language": "python3",
    "summary": "Find the index of a string within a hex encoded string.\n\nYou will be given a string which needs to be found in another string which has previously been translated into hex. You will need to return the first index of the needle within the hex encoded string.\n\nExamples\nfirst_index(\"68 65 6c 6c 6f 20 77 6f 72 6c 64\", \"world\") ➞ 6\n\nfirst_index(\"47 6f 6f 64 62 79 6",
    "tags": [
      "formatting",
      "functional_programming"
    ],
    "title": "Needle in a Hex String"
  },
  {
    "_id": "CD2fqbytBuXrbqJkL",
    "difficulty": 2.0358974358974358,
    "language": "python3",
    "summary": "Write a function that returns True if it's possible to build a phrase txt1 using only the characters from another phrase txt2.\n\nExamples\ncan_build(\"got 2 go\", \"gogogo 2 today\") ➞ True\n\ncan_build(\"sit on top\", \"its a moo point\") ➞ True\n\ncan_build(\"long high add or\", \"highway road go long\") ➞ False\n\ncan_build(\"fill tuck mid\", \"truck falls dim\") ➞ False\n\nNotes\nAl",
    "tags": [
      "strings",
      "validation"
    ],
    "title": "Fridge Poetry"
  },
  {
    "_id": "ThvNE5FZRX6JbGoTo",
    "difficulty": 2.036036036036036,
    "language": "python3",
    "summary": "Create a function that inverts words or the phrase depending on the value of parameter type. A \"P\" means to invert the entire phrase, while a \"W\" means to invert every word in the phrase. See the following examples for clarity.\n\nExamples\ninverter(\"This is Valhalla\", \"P\") ➞ \"Valhalla is this\"\n\ninverter(\"One fine day to start\", \"W\") ➞ \"Eno enif yad ot trats\"\n\nin",
    "tags": [
      "arrays",
      "algorithms",
      "strings"
    ],
    "title": "Phrase or Word Inverse"
  },
  {
    "_id": "rMwssAueJjn9FmjZC",
    "difficulty": 2.036036036036036,
    "language": "python3",
    "summary": "Create a function that determines how many number pairs are there embedded in a space-separated string. The first numeric value in the space-separated string represents the count of the numbers, thus, excluded in the pairings.\n\nExamples\nnumber_pairs(\"7 1 2 1 2 1 3 2\") ➞ 2\n(1, 1), (2, 2)\n\nnumber_pairs(\"9 10 20 20 10 10 30 50 10 20\") ➞ 3\n(10, 10), (20, 20), (10,",
    "tags": [
      "arrays",
      "strings",
      "numbers"
    ],
    "title": "Number Pairs"
  },
  {
    "_id": "wwN7EwvqXKCSxzyCE",
    "difficulty": 2.0362116991643453,
    "language": "python3",
    "summary": "Create a function that reorders the digits of each numerical element in a list based on ascending (asc) or descending (desc) order.\n\nExamples\nreorder_digits([515, 341, 98, 44, 211], \"asc\") ➞ [155, 134, 89, 44, 112]\n\nreorder_digits([515, 341, 98, 44, 211], \"desc\") ➞ [551, 431, 98, 44, 211]\n\nreorder_digits([63251, 78221], \"asc\") ➞ [12356, 12278]\n\nreorder_digits(",
    "tags": [
      "functional_programming",
      "higher_order_functions",
      "arrays",
      "sorting"
    ],
    "title": "Reorder Digits"
  },
  {
    "_id": "zZyeau2MYcEc8Fdtk",
    "difficulty": 2.0364372469635628,
    "language": "python3",
    "summary": "Create a function that takes two integers, num and n, and returns an integer which is divisible by n and is the closest to num. If there are two numbers equidistant from num and divisible by n, select the larger one.\n\nExamples\nround_number(33, 25) ➞ 25\n\nround_number(46, 7) ➞ 49\n\nround_number(133, 14) ➞ 140\n\nNotes\nn will always be a positive number.",
    "tags": [
      "numbers",
      "logic",
      "arrays"
    ],
    "title": "Round to Closest N"
  },
  {
    "_id": "GmCW4ziDMvxqnxnAj",
    "difficulty": 2.036842105263158,
    "language": "python3",
    "summary": "Given a dictionary of student names and a list of their test scores over the semester, return a list of all the students who passed the course (in alphabetical order). However, there is one more thing to mention: the pass mark is 100% in everything!\n\nExamples\nwho_passed({\n  \"John\" : [\"5/5\", \"50/50\", \"10/10\", \"10/10\"],\n  \"Sarah\" : [\"4/8\", \"50/57\", \"7/10\", \"10/1",
    "tags": [
      "arrays",
      "data_structures",
      "loops",
      "sorting"
    ],
    "title": "Super Strict Grading"
  },
  {
    "_id": "2C23JH5cC4pfnCKvi",
    "difficulty": 2.0368852459016393,
    "language": "python3",
    "summary": "Create a function that takes in two lists and determines whether there exists a flush.\n\nThe first list represents the 5 cards dealt on the table.\nThe second list represents the 2 cards in your hand.\n\nNotation: card number and suit (abbreviated as S = Spades, H = Hearts, D = Diamonds, C = Clubs) separated by an underscore.\n\nExamples\ncheckflush([\"AS\", \"JH\", \"7D\"",
    "tags": [
      "arrays",
      "conditions",
      "control_flow",
      "games",
      "regex"
    ],
    "title": "Poker Flush?"
  },
  {
    "_id": "EHzL3v25wYp7E4AFC",
    "difficulty": 2.037037037037037,
    "language": "python3",
    "summary": "Write a function that returns True if you can use the letters of the first string to create the second string. Letters are case sensitive.\n\nExamples\ncan_build(\"aPPleAL\", \"PAL\") ➞ True\n\ncan_build(\"aPPleAL\", \"apple\") ➞ False\n\ncan_build(\"a\", \"\") ➞ True\n\ncan_build(\"aa\", \"aaa\") ➞ False\n\nNotes\nLetters in the first string can be used only once.",
    "tags": [
      "strings",
      "validation"
    ],
    "title": "Ransom Letter"
  },
  {
    "_id": "ZsBPGxuBsbbHfPSkk",
    "difficulty": 2.037037037037037,
    "language": "python3",
    "summary": "Given an array of users, each defined by an object with the following properties: name, score, reputation create a function that sorts the array to form the correct leaderboard.\n\nThe leaderboard takes into consideration the score of each user of course, but an emphasis is put on their reputation in the community, so to get the trueScore, you should add the rep",
    "tags": [
      "arrays",
      "objects",
      "sorting"
    ],
    "title": "Leaderboard Sort"
  },
  {
    "_id": "p5zThyFbZQMKmthxJ",
    "difficulty": 2.0377358490566038,
    "language": "python3",
    "summary": "Write a function that takes initial speed (v in m/s) and throw angle (a in degrees) and returns the maximum height and maximum range reached by javelin as a string.\n\nExamples\njavelin_throw(36.7, 45) ➞ \"Ymax=34m, Xmax=137m\"\n\njavelin_throw(51.3, 20) ➞ \"Ymax=16m, Xmax=172m\"\n\njavelin_throw(100.1, 89) ➞ \"Ymax=511m, Xmax=36m\"\n\nNotes\nJavelin starts moving at h=0m.\nGr",
    "tags": [
      "physics",
      "math"
    ],
    "title": "Javelin Parabolic Throw"
  },
  {
    "_id": "7DjphCrJvFiKRcpdm",
    "difficulty": 2.037974683544304,
    "language": "python3",
    "summary": "Write a function that returns the total number of integers covered from a list of intervals (inclusive). In other words, return the number of different inteters in the lists.\n\nExamples\ncovered_integers([[80, 81], [1, 2], [9, 11]]) ➞ 7\nSeven integers are covered: 1, 2, 9, 10, 11, 80, 81\n\ncovered_integers([[3, 6], [4, 6], [5, 6]]) ➞ 4\n\ncovered_integers([[1, 2],",
    "tags": [
      "arrays",
      "higher_order_functions"
    ],
    "title": "Number of Covered Integers"
  },
  {
    "_id": "pTtzfmR2z7jqYXJDf",
    "difficulty": 2.0385964912280703,
    "language": "python3",
    "summary": "Create a function that determines whether it is possible to build a palindrome from the characters in a string.\n\nExamples\npossible_palindrome(\"acabbaa\") ➞ True\nCan make the following palindrome: \"aabcbaa\"\n\npossible_palindrome(\"aacbdbc\") ➞ True\nCan make the following palindrome: \"abcdcba\"\n\npossible_palindrome(\"aacbdb\") ➞ False\n\npossible_palindrome(\"abacbb\") ➞ F",
    "tags": [
      "strings",
      "regex",
      "validation"
    ],
    "title": "Possible Palindrome"
  },
  {
    "_id": "ZJGBGyZRNrbNtXJok",
    "difficulty": 2.0390625,
    "language": "python3",
    "summary": "Given a letter, created a function which returns the nearest vowel to the letter. If two vowels are equidistant to the given letter, return the earlier vowel.\n\nExamples\nnearest_vowel(\"b\") ➞ \"a\"\n\nnearest_vowel(\"s\") ➞ \"u\"\n\nnearest_vowel(\"c\") ➞ \"a\"\n\nnearest_vowel(\"i\") ➞ \"i\"\n\nNotes\nAll letters will be given in lowercase.\nThere will be no alphabet wrapping involved",
    "tags": [
      "strings",
      "loops"
    ],
    "title": "Nearest Vowel"
  },
  {
    "_id": "bYDPYX9ajWC6PNGCp",
    "difficulty": 2.0391304347826087,
    "language": "python3",
    "summary": "This robot roams around a 2D grid. It starts at (0, 0) facing North. After each time it moves, the robot rotates 90 degrees clockwise. Given the amount the robot has moved each time, you have to calculate the robot's final position.\n\nTo illustrate, if the robot is given the movements 20, 30, 10, 40 then it will move:\n\n20 steps North, now at (0, 20)\n30 steps Ea",
    "tags": [
      "loops",
      "conditions",
      "logic"
    ],
    "title": "Track the Robot (Part 2)"
  },
  {
    "_id": "dRjHygERcDJpiDzze",
    "difficulty": 2.04040404040404,
    "language": "python3",
    "summary": "Write a function that repeats the shorter string until it is equal to the length of the longer string.\n\nExamples\nlengthen(\"abcdefg\", \"ab\") ➞ \"abababa\"\n\nlengthen(\"ingenius\", \"forest\") ➞ \"forestfo\"\n\nlengthen(\"clap\", \"skipping\") ➞ \"clapclap\"\n\nNotes\nBoth strings will differ in length.\nBoth strings will contain at least one character.",
    "tags": [
      "strings",
      "loops"
    ],
    "title": "Repeat the Shorter String"
  },
  {
    "_id": "kozqCJFi4de2JnR26",
    "difficulty": 2.0412371134020617,
    "language": "python3",
    "summary": "A Fibonacci string is a precedence of the Fibonacci series. It works with any two characters of the English alphabet (as opposed to the numbers 0 and 1 in the Fibonacci series) as the initial items and concatenates them together as it progresses in a similar fashion as the Fibonacci series.\n\nExamples\nfib_str(3, [\"j\", \"h\"]) ➞ \"j, h, hj\"\n\nfib_str(5, [\"e\", \"a\"])",
    "tags": [
      "arrays",
      "strings"
    ],
    "title": "Fibonacci String"
  },
  {
    "_id": "urWWbekesALbsjzvz",
    "difficulty": 2.0416666666666665,
    "language": "python3",
    "summary": "Create a function that sorts the given array of band names discounting the articles \"The\", \"A\", \"An\" if the first word of the name categorically belongs to.\n\nExamples\nbandnamessort([\"The New Yardbirds\", \"The Beatles\", \"The Square Roots\", \"On A Friday\", \"An Irony\"])\n➞ [\"The Beatles\", \"An Irony\", \"The New Yardbirds\", \"On A Friday\", \"The Square Roots\"]\n\nbandnames",
    "tags": [
      "arrays",
      "regex",
      "strings"
    ],
    "title": "Sorting Band Names without Articles"
  },
  {
    "_id": "7pJZTgFstEt53f9TD",
    "difficulty": 2.0418848167539267,
    "language": "python3",
    "summary": "Create a function that transposes a 2D matrix.\n\nExamples\ntranspose_matrix([\n  [1, 1, 1],\n  [2, 2, 2],\n  [3, 3, 3]\n]) ➞ [\n  [1, 2, 3],\n  [1, 2, 3],\n  [1, 2, 3]\n]\n\ntranspose_matrix([\n  [5, 5],\n  [6, 7],\n  [9, 1]\n]) ➞ [\n  [5, 6, 9],\n  [5, 7, 1]\n]\n\nNotes\nN/A",
    "tags": [
      "arrays",
      "math"
    ],
    "title": "Matrix Transpose"
  },
  {
    "_id": "vBwRuR4mF5yQ4cNuc",
    "difficulty": 2.0419847328244276,
    "language": "python3",
    "summary": "Create a function that takes a list of \"mostly\" numbers, counts the amount of missing numbers and returns their sum. Watch out for strings!\n\nExamples\ncountmissingnums([\"1\", \"3\", \"5\", \"7\", \"9\"]) ➞ 4\n1+1+1+1\n\ncountmissingnums([\"7\", \"3\", \"1\", \"9\", \"5\"]) ➞ 4\n\ncountmissingnums([\"1\", \"5\", \"B\", \"9\", \"z\"]) ➞ 6\n\nNotes\nThe data might be dirty! Clean out any filthy strin",
    "tags": [
      "math",
      "numbers",
      "validation"
    ],
    "title": "Count Missing Numbers"
  },
  {
    "_id": "M8hDPzNZdie8aBMcb",
    "difficulty": 2.042105263157895,
    "language": "python3",
    "summary": "Implement a function count_substring that counts the number of substrings that begin with character \"A\" and ends with character \"X\".\n\nFor example, given the input string \"CAXAAYXZA\", there are four substrings that begin with \"A\" and ends with \"X\", namely: \"AX\", \"AXAAYX\", \"AAYX\", and \"AYX\".\n\nExamples\ncount_substring(\"CAXAAYXZA\") ➞  4\n\ncount_substring(\"AAXOXXA\")",
    "tags": [
      "strings",
      "loops"
    ],
    "title": "Count Substring"
  },
  {
    "_id": "Lx9mL2uBWwtJFv94a",
    "difficulty": 2.0422535211267605,
    "language": "python3",
    "summary": "Create a checker board generator, which takes as inputs n and 2 elements to generate an n x n checkerboard with those two elements as alternating squares.\n\nExamples\nchecker_board(2, 7, 6) ➞ [\n  [7, 6],\n  [6, 7]\n]\n\nchecker_board(3, \"A\", \"B\") ➞ [\n  [\"A\", \"B\", \"A\"],\n  [\"B\", \"A\", \"B\"],\n  [\"A\", \"B\", \"A\"]\n]\n\nchecker_board(4, \"c\", \"d\") ➞ [\n  [\"c\", \"d\", \"c\", \"d\"],\n  [",
    "tags": [
      "arrays",
      "higher_order_functions",
      "games"
    ],
    "title": "Checkerboard Generator"
  },
  {
    "_id": "uL5njLuwFxAiKLXaT",
    "difficulty": 2.0428571428571427,
    "language": "python3",
    "summary": "A new 'hacky' phone is launched, which has the feature of connecting to any Wi-Fi network from any distance away, as long as there aren't any obstructions between the hotspot and the phone. Given a string, return how many Wi-Fi hotspots I'm able to connect to.\n\nThe phone is represented as a P.\nA hotspot is represented as an *.\nAn obstruction is represented as",
    "tags": [
      "strings",
      "loops",
      "algorithms",
      "regex"
    ],
    "title": "Get Free Wi-Fi Anywhere You Go"
  },
  {
    "_id": "APNhiaMCuRSwALN63",
    "difficulty": 2.043189368770764,
    "language": "python3",
    "summary": "A string is an almost-palindrome if, by changing only one character, you can make it a palindrome. Create a function that returns True if a string is an almost-palindrome and False otherwise.\n\nExamples\nalmost_palindrome(\"abcdcbg\") ➞ True\nTransformed to \"abcdcba\" by changing \"g\" to \"a\".\n\nalmost_palindrome(\"abccia\") ➞ True\nTransformed to \"abccba\" by changing \"b\"",
    "tags": [
      "strings",
      "validation"
    ],
    "title": "Almost Palindrome"
  },
  {
    "_id": "fsNMnyjMkErQtvpMW",
    "difficulty": 2.0444444444444443,
    "language": "python3",
    "summary": "What do the numbers 4, 6, 8, 9 and 0 have in common? They all have holes in them! Notice how the number 8 contains not one, but two holes.\n\nGiven a list of numbers, sort the list in accordance to how many holes occur in the number. It should be sorted in ascending order.\n\nExamples\nholey_sort([44, 4, 444, 4444]) ➞ [4, 44, 444, 4444]\n\nholey_sort([100, 888, 1660,",
    "tags": [
      "sorting",
      "numbers"
    ],
    "title": "Holey Sort"
  },
  {
    "_id": "9gmNpQ3m9BTYm3FKr",
    "difficulty": 2.044776119402985,
    "language": "python3",
    "summary": "Given a list of numbers, return whether it is possible to make the number 7 by adding any three different numbers together.\n\nExamples\nlucky_seven([2, 4, 3, 8, 9, 1]) ➞ True\n\nlucky_seven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ True\n\nlucky_seven([0, 0, 0, 2, 3]) ➞ False\nYou cannot repeat the same number to make 2 + 2 + 3 = 7\n\nlucky_seven([0, 0, 7]) ➞ False\nYou need t",
    "tags": [
      "numbers",
      "loops",
      "algorithms",
      "validation"
    ],
    "title": "Lucky Seven"
  },
  {
    "_id": "bdsWZ29zJfJ2Roymv",
    "difficulty": 2.0454545454545454,
    "language": "python3",
    "summary": "Write a function that swaps the first pair (1st and 2nd characters) with the second pair (3rd and 4th characters) for every quadruplet substring.\n\nExamples\nswap_two(\"ABCDEFGH\") ➞ \"CDABGHEF\"\n\nswap_two(\"AABBCCDDEEFF\") ➞ \"BBAADDCCFFEE\"\n\nswap_two(\"munchkins\") ➞ \"ncmuinhks\"\n\nswap_two(\"FFGGHHI\") ➞ \"GGFFHHI\"\n\nNotes\nKeep leftover strings in the same order.",
    "tags": [
      "regex",
      "strings"
    ],
    "title": "Swapping Two by Two"
  },
  {
    "_id": "gphnuvoHDANN2Fmca",
    "difficulty": 2.0454545454545454,
    "language": "python3",
    "summary": "Write a function that sorts only the odd numbers in a list in ascending order, keeping the even numbers in their current place.\n\nFor example, if our input list is: [5, 2, 6, 6, 1, 4, 9, 3]:\n\n[, 2, 6, 6, , 4, , ]  # Keep evens in place.\n\nSort odds: [5, 1, 9, 3] => [1, 3, 5, 9]\n\n[1, 2, 6, 6, 3, 4, 5, 9] # Final list.\n\nExamples\nodd_sort([7, 5, 2, 3, 1]) ➞ [1, 3,",
    "tags": [
      "sorting",
      "arrays"
    ],
    "title": "Sort Odds Keeping Evens in Place"
  },
  {
    "_id": "Egh2HES8eqPTTX9Q2",
    "difficulty": 2.045918367346939,
    "language": "python3",
    "summary": "Write a function that accepts a string and an n and returns a cipher by rolling each character forward (n > 0) or backward (n < 0) n times.\n\nNote: Think of the letters as a connected loop, so rolling a backwards once will yield z, and rolling z forward once will yield a. If you roll 26 times in either direction, you should end up back where you started.\n\nExamp",
    "tags": [
      "arrays",
      "cryptography"
    ],
    "title": "Rolling Cipher"
  },
  {
    "_id": "NJw4mENpSaMz3eqh2",
    "difficulty": 2.045918367346939,
    "language": "python3",
    "summary": "In this challenge, you have to establish if a given number is undulating. A number n is undulating when the following conditions are all true:\n\nn has at least three digits.\nn has exactly two different digits.\nThe two digits of n are alternating without repeating groups.\n\nIf we think of the first digit of an undulating number as an \"A\", and the  second digit as",
    "tags": [
      "numbers",
      "conditions",
      "regex",
      "validation"
    ],
    "title": "ABA Integers: the Undulating Numbers"
  },
  {
    "_id": "6brSyFwWnb9Msu7kX",
    "difficulty": 2.046511627906977,
    "language": "python3",
    "summary": "Write a function that sorts the positive numbers in ascending order, and keeps the negative numbers untouched.\n\nExamples\nposnegsort([6, 3, -2, 5, -8, 2, -2]) ➞ [2, 3, -2, 5, -8, 6, -2]\n\nposnegsort([6, 5, 4, -1, 3, 2, -1, 1]) ➞ [1, 2, 3, -1, 4, 5, -1, 6]\n\nposnegsort([-5, -5, -5, -5, 7, -5]) ➞ [-5, -5, -5, -5, 7, -5]\n\nposnegsort([]) ➞ []\n\nNotes\nIf given an empty",
    "tags": [
      "sorting",
      "loops",
      "control_flow",
      "algorithms",
      "interview"
    ],
    "title": "Sort Positives, Keep Negatives"
  },
  {
    "_id": "NWR5BK4BYqDkumNiB",
    "difficulty": 2.046728971962617,
    "language": "python3",
    "summary": "In this challenge, you have to verify if a number is exactly divisible by a combination of its digits. There are three possible conditions to test:\n\nThe given number is exactly divisible by each of its digits excluding the zeros.\nThe given number is exactly divisible by the sum of its digits.\nThe given number is exactly divisible by the product of its digits.\n",
    "tags": [
      "numbers",
      "math",
      "conditions",
      "validation"
    ],
    "title": "Digital Division"
  },
  {
    "_id": "H5AQQhFhvLWMp9giA",
    "difficulty": 2.0470588235294116,
    "language": "python3",
    "summary": "Write the regular expression that will match all whitespaces at the beginning or the end of a string so that the re.sub() fuction in the tests (you do not need to write it) will function like the .trim() method. Use the character class \\s in your expression.\n\nExample\ntxt1 = \"    Hello World    \"\ntxt2 = \"    We need more space   \"\npattern = \"yourregularexpressi",
    "tags": [
      "regex"
    ],
    "title": "RegEx XI-B: Whitespace Character Class"
  },
  {
    "_id": "zE37mNeG4cn6HesaP",
    "difficulty": 2.0473933649289098,
    "language": "python3",
    "summary": "An anagram is a word, x, formed by rearranging the letters that make up another word, y, and using up all the letters in y at the same frequency. For example, \"dear\" is an anagram of \"read\" and \"plead\" is an anagram of \"paled\".\n\nThe Hamming distance between two strings is the number of positions at which they differ. Hamming distances can only be calculated fo",
    "tags": [
      "strings",
      "validation",
      "conditions"
    ],
    "title": "Farthest Hamming Anagrams"
  },
  {
    "_id": "JsisSTswerLQqJ73X",
    "difficulty": 2.0476190476190474,
    "language": "python3",
    "summary": "Given a list and a set, return a sorted list with its items in ascending order but prioritize the elements in the set over the other items in the list.\n\nExamples\npriority_sort([5, 4, 3, 2, 1], {2, 3}) ➞ [2, 3, 1, 4, 5]\n\npriority_sort([5, 4, 3, 2, 1], {3, 6}) ➞ [3, 1, 2, 4, 5]\n\npriority_sort([-5, -4, -3, -2, -1, 0], {-4, -3}) ➞ [-4, -3, -5, -2, -1, 0]\n\nNotes\nIf",
    "tags": [
      "sorting",
      "language_fundamentals",
      "conditions"
    ],
    "title": "Priority Sort"
  },
  {
    "_id": "eBTCwYHpdaHciieuP",
    "difficulty": 2.0476190476190474,
    "language": "python3",
    "summary": "Given two strings, s1 and s2, select only the characters in each string where the character in the same position in the other string is in uppercase. Return these as a single string.\n\nTo illustrate, given the strings s1 = \"heLLo\" and s2 = \"GUlp\", we select the letters \"he\" from s1, because \"G\" and \"U\" are uppercase. We then select \"lp\" from s2, because \"LL\" is",
    "tags": [
      "strings",
      "formatting"
    ],
    "title": "A Capital Challenge"
  },
  {
    "_id": "3cyb3mdBKw67LpGP7",
    "difficulty": 2.0476190476190474,
    "language": "python3",
    "summary": "Given a number, insert duplicate digits on both sides of all digits which appear in a group of 1.\n\nWorked Example\nnumbersneedfriends_too(22733) ➞ 2277733\n\nThe number can be split into groups 22, 7, and 33.\n7 appears on its own.\nPut 7s on both sides to create 777.\nPut the numbers together and return the result.\n\nExamples\nnumbersneedfriends_too(123) ➞ 111222333",
    "tags": [
      "numbers",
      "loops"
    ],
    "title": "Lonely Numbers"
  },
  {
    "_id": "2tkcbQgPJZPPpzg2i",
    "difficulty": 2.04778156996587,
    "language": "python3",
    "summary": "What do the digits 0, 4, 6, 8, and 9 have in common? Well, they are whole numbers... and they are also hole numbers (not actually a thing until now). Hole numbers are numbers with holes in their shapes (8 is special in that it contains two holes).\n\n14 is a hole number with one hole. 88 is a hole number with four holes.\n\nYour task is to create a function with a",
    "tags": [
      "numbers",
      "strings",
      "algorithms"
    ],
    "title": "Hole Number Sequence"
  },
  {
    "_id": "fRjfrCYXWJAaQqFXF",
    "difficulty": 2.048780487804878,
    "language": "python3",
    "summary": "A Primorial is a product of the first n prime numbers (e.g. 2 x 3 x 5 = 30). 2, 3, 5, 7, 11, 13 are prime numbers. If n was 3, you'd multiply 2 x 3 x 5 = 30 or Primorial = 30.\n\nCreate a function that returns the Primorial of a number.\n\nExamples\nprimorial(1) ➞ 2\n\nprimorial(2) ➞ 6\n\nprimorial(8) ➞ 9699690\n\nNotes\nN/A",
    "tags": [
      "algorithms",
      "loops",
      "numbers"
    ],
    "title": "Find the Primorial"
  },
  {
    "_id": "NY9KKZezoKXrQNFEJ",
    "difficulty": 2.048780487804878,
    "language": "python3",
    "summary": "In linear algebra, the determinant is a scalar value that can be computed from the elements of a square matrix and encodes certain properties of the linear transformation described by the matrix.\n\nCreate a function that takes a square list as an argument and returns a number (determinant).\n\nExamples\nget_det([\n  [ 0, 1],\n  [ 1, 1]\n]) ➞ -1\n\nget_det([\n  [69, 0],",
    "tags": [
      "algebra",
      "algorithms",
      "interview",
      "math"
    ],
    "title": "Determinant of Square Matrix"
  },
  {
    "_id": "RWLWKmGcbp6drWgKB",
    "difficulty": 2.0489130434782608,
    "language": "python3",
    "summary": "Atticus has been invited to a dinner party, and he decides to purchase a bottle of wine. However, he has little knowledge of how to choose a good bottle. Being a very frugal gentleman (yet disliking looking like a cheapskate), he decides to use a very simple rule. In any selection of two or more wines, he will always buy the second-cheapest.\n\nGiven a list of w",
    "tags": [
      "arrays",
      "objects",
      "sorting"
    ],
    "title": "The Frugal Gentleman"
  },
  {
    "_id": "r6ywkSJHWqA7EK5fG",
    "difficulty": 2.049382716049383,
    "language": "python3",
    "summary": "Write a method that accepts two integer parameters rows and cols. The output is a 2d array of numbers displayed in column-major order, meaning the numbers shown increase sequentially down each column and wrap to the top of the next column to the right once the bottom of the current column is reached.\n\nExamples\nprintGrid(3, 6) ➞ [\n  [1, 4, 7, 10, 13, 16],\n  [2,",
    "tags": [
      "loops",
      "language_fundamentals",
      "arrays"
    ],
    "title": "Print Grid"
  },
  {
    "_id": "f6X7pa38iQyoytJgr",
    "difficulty": 2.05,
    "language": "python3",
    "summary": "The weight of an English word can be calculated by summing the ASCII code point for each character in the word, excluding any punctuation:\n\n\"Wouldn't\" = 87 + 111 + 117 + 108 + 100 + 110 + 116 = 749\n\nWrite a function that takes a sentence as a string, returning True if all word weights increase for each word in the sentence, and False if any word weight decreas",
    "tags": [
      "arrays",
      "strings",
      "language_fundamentals",
      "validation"
    ],
    "title": "Increasing Word Weights"
  },
  {
    "_id": "7eQNpraoWR3JxZMKB",
    "difficulty": 2.050632911392405,
    "language": "python3",
    "summary": "Create a function that subtracts one positive integer from another, without using any arithmetic operators such as -, %, /, +, etc.\n\nExamples\nmy_sub(5, 9) ➞ 4\n\nmy_sub(10, 30) ➞ 20\n\nmy_sub(0, 0) ➞ 0\n\nNotes\nDo not multiply by -1.\nUse bitwise operations only: <<, |, ~, &, etc.",
    "tags": [
      "numbers",
      "math",
      "bit_operations"
    ],
    "title": "Subtract Without Subtract"
  },
  {
    "_id": "2yHQ5C4HovBAennjQ",
    "difficulty": 2.0508474576271185,
    "language": "python3",
    "summary": "Given a, b and c, find the roots of the equation ax^2 +bx +c = 0 and then add them together.\n\nRound your answer to two decimal places.\nIf there is only one real root return 1.\nIf there are no real roots, return 0.\n\nExamples\nfindrootssum(2, 4, -6) ➞ -2.00\n\nfindrootssum(3, 4, -3) ➞ -1.33\n\nfindrootssum(4, 3, -8) ➞ -0.75\n\nNotes\nThe Discriminant of a quadratic equa",
    "tags": [
      "algebra",
      "math"
    ],
    "title": "Sum Quadratic Roots"
  },
  {
    "_id": "vLRpikwB9dqaR3HAj",
    "difficulty": 2.0510204081632653,
    "language": "python3",
    "summary": "Given two lists smlst and biglst, we say smlst is an ordered sublist of biglst if all the elements of smlst can be found in biglst, and in the same order.\n\nExamples:\n[4, 3, 2] is an ordered sublist of [5, 4, 3, 2, 1].\n[5, 3, 1] is an ordered sublist of [5, 4, 3, 2, 1].\n[5, 3, 1] is not and ordered sublist of [1, 2, 3, 4, 5] since elements are not in the same -",
    "tags": [
      "sorting",
      "arrays",
      "language_fundamentals",
      "loops",
      "validation"
    ],
    "title": "Is It an Ordered Sublist?"
  },
  {
    "_id": "PSg77AZJGACk4a7gt",
    "difficulty": 2.0510204081632653,
    "language": "python3",
    "summary": "For this challenge, forget how to add two numbers together. The best explanation on what to do for this function is this meme:\n\nAlternative Text\n\nExamples\nmeme_sum(26, 39) ➞ 515\n2+3 = 5, 6+9 = 15\n26 + 39 = 515\n\nmeme_sum(122, 81) ➞ 1103\n1+0 = 1, 2+8 = 10, 2+1 = 3\n122 + 81 = 1103\n\nmeme_sum(1222, 30277) ➞ 31499\n\nNotes\nN/A",
    "tags": [
      "numbers",
      "math"
    ],
    "title": "Meme Sum :)"
  },
  {
    "_id": "d54ESyh48HKacmTwb",
    "difficulty": 2.051282051282051,
    "language": "python3",
    "summary": "Create a function that takes a list of numbers and returns the greatest common factor of those numbers.\n\nExamples\ngcd([84, 70, 42, 56]) ➞ 14\n\ngcd([19, 38, 76, 133]) ➞ 19\n\ngcd([120, 300, 95, 425, 625]) ➞ 5\n\nNotes\nThe GCD is the largest factor that divides all numbers in the list.",
    "tags": [
      "numbers",
      "arrays",
      "math"
    ],
    "title": "Find Greatest Common Divisor of N Numbers"
  },
  {
    "_id": "vZJJjYWtzYCBEnnGY",
    "difficulty": 2.0514285714285716,
    "language": "python3",
    "summary": "Briscola is an Italian card game, played with a deck of 40 cards that has four suits (hearts, diamonds, clubs, and spades), so that there are ten cards per suit: the Ace, the numbered cards from 2 up to 7, and the three face-cards (Jack, Queen, and King). In this challenge, the notation used for the cards is a string containing the card value (with the upper-c",
    "tags": [
      "games",
      "arrays",
      "data_structures"
    ],
    "title": "Briscola! (Part I)"
  },
  {
    "_id": "XALogvSrMr3LRwXPH",
    "difficulty": 2.0516129032258066,
    "language": "python3",
    "summary": "Given a list of 10 numbers, return whether or not the list is shuffled sufficiently enough. In this case, if 3 or more numbers appear consecutively (ascending or descending), return False.\n\nExamples\nisshuffledwell([1, 2, 3, 5, 8, 6, 9, 10, 7, 4]) ➞ False\n1, 2, 3 appear consecutively\n\nisshuffledwell([3, 5, 1, 9, 8, 7, 6, 4, 2, 10]) ➞ False\n9, 8, 7, 6 appear con",
    "tags": [
      "arrays",
      "validation",
      "numbers",
      "loops"
    ],
    "title": "Shuffled Properly?"
  },
  {
    "_id": "q5FRS7dT2mrEQGG2J",
    "difficulty": 2.0516129032258066,
    "language": "python3",
    "summary": "Write a function that returns True if there exists a row that is identical to a column in a 2-D matrix.\n\nTo illustrate:\n[\n  [1, 2, 3, 4],\n  [2, 4, 9, 8],\n  [5, 9, 7, 7],\n  [6, 8, 1, 0]\n]\n\n2nd row + 2nd column are identical: [2, 4, 9, 8]\n\nExamples\nhas_identical([\n  [4, 4, 4, 4],\n  [2, 4, 9, 8],\n  [5, 4, 7, 7],\n  [6, 4, 1, 0]\n]) ➞ true\n\nhas_identical([\n  [4, 4,",
    "tags": [
      "arrays",
      "validation"
    ],
    "title": "Identical Row and Column?"
  },
  {
    "_id": "SYmHGXX2P26xu7JFR",
    "difficulty": 2.0524193548387095,
    "language": "python3",
    "summary": "Given three groups of numbers, return a list containing all numbers that appear in more than one group (in ascending order).\n\nExamples\nnumber_groups([7, 8, 7, 3, 4], [2, 9, 1, 2, 1], [5, 6, 6, 6, 5]) ➞ []\n\nnumber_groups([3, 8, 8, 1, 1], [9, 1, 1, 9, 9], [10, 7, 6, 6, 3]) ➞ [1, 3]\n\nnumber_groups([4, 10, 9, 2, 2], [5, 3, 7, 3, 8], [6, 2, 9, 4, 2]) ➞ [2, 4, 9]\n\nn",
    "tags": [
      "arrays",
      "numbers"
    ],
    "title": "Number Groups"
  },
  {
    "_id": "TFG9f75apGi3SS49v",
    "difficulty": 2.0526315789473686,
    "language": "python3",
    "summary": "In the game Set, three cards form a set if each of the cards are identical or completely different for each of the four properties. All three cards must:\n\nHave the same color  or different colors.\nHave the same number or different numbers.\nHave the same shades or different shades.\nHave the same shape or different shapes.\n\nThe four properties are:\n\nColors: red,",
    "tags": [
      "objects",
      "games",
      "validation"
    ],
    "title": "Validating a Set in the Set Game"
  },
  {
    "_id": "MZujakkMLw3nLbp7s",
    "difficulty": 2.0526315789473686,
    "language": "python3",
    "summary": "You are given a list of prime factors lst and a target. When each number in the list is raised to an appropriate power their product will be equal to the target.\n\nYour role is to return the exponents. All these lists will have a length of three. Basically, it is three numbers whose product is equal to challenge. The only difference is what you are expected to",
    "tags": [
      "algebra",
      "numbers",
      "math"
    ],
    "title": "Return Exponents of Prime Factors"
  },
  {
    "_id": "fnLXJnqoDFTJNZk5r",
    "difficulty": 2.0531914893617023,
    "language": "python3",
    "summary": "Write a sorting function that takes in a list of names and sorts them by last name either alphabetically (ASC) or reverse-alphabetically (DESC).\n\nExamples\nsort_contacts([\n  \"John Locke\",\n  \"Thomas Aquinas\",\n  \"David Hume\",\n  \"Rene Descartes\"\n], \"ASC\") ➞ [\n  \"Thomas Aquinas\",\n  \"Rene Descartes\",\n  \"David Hume\",\n  \"John Locke\"\n]\n\nAquinas (A)  Erdos (ER) > Euler",
    "tags": [
      "sorting",
      "arrays"
    ],
    "title": "Contact List"
  },
  {
    "_id": "YzZdaqcMsCmndxFcC",
    "difficulty": 2.0532544378698225,
    "language": "python3",
    "summary": "If you have a triangular shape cut from a piece of cardboard, the centroid of the triangle\nwould be the spot where it balances on the point of a pencil. The location of the centroid is easy to calculate if you know the x, y coordinates of the vertices:\n\nThe x coordinate of the centroid is at (x1 + x2 + x3) / 3\nThe y coordinate of the centroid is at (y1 + y2 +",
    "tags": [
      "algebra",
      "math"
    ],
    "title": "Centroid of a Triangle"
  },
  {
    "_id": "bBExn57vLEsXgHC5m",
    "difficulty": 2.0551724137931036,
    "language": "python3",
    "summary": "Create a function that returns True if three points belong to the same line, and False otherwise. Each point is represented by a list consisting of an x- and y-coordinates.\n\nExamples\nsame_line([[0, 0], [1, 1], [3, 3]]) ➞ True\n\nsame_line([[-2, -1], [2, 1], [0, 0]]) ➞ True\n\nsame_line([[-2, 0], [-10, 0], [-8, 0]]) ➞ True\n\nsame_line([[0, 0], [1, 1], [1, 2]]) ➞ Fal",
    "tags": [
      "arrays",
      "math",
      "validation"
    ],
    "title": "Determine if Three Points are on a Line"
  },
  {
    "_id": "QKyR63wENr4RMF9L7",
    "difficulty": 2.0555555555555554,
    "language": "python3",
    "summary": "Create a function that tweaks letters by one forward (+1) or backwards (-1) according to a list.\n\nExamples\ntweak_letters(\"apple\", [0, 1, -1, 0, -1]) ➞ \"aqold\"\n\"p\" + 1 => \"q\"; \"p\" - 1 => \"o\"; \"e\" - 1 => \"d\"\n\ntweak_letters(\"many\", [0, 0, 0, -1]) ➞ \"manx\"\n\ntweak_letters(\"rhino\", [1, 1, 1, 1, 1]) ➞ \"sijop\"\n\nNotes\nN/A",
    "tags": [
      "strings",
      "arrays"
    ],
    "title": "Tweaking Letters"
  },
  {
    "_id": "hfivDc24QmqWWc5Ws",
    "difficulty": 2.056768558951965,
    "language": "python3",
    "summary": "Given num as input, return a list with all primes up to num included.\n\nAlternative Text\n\nExamples\neratosthenes(1) ➞ []\n\neratosthenes(10) ➞ [2, 3, 5, 7]\n\neratosthenes(20) ➞ [2, 3, 5, 7, 11, 13, 17, 19]\n\neratosthenes(0) ➞ []\n\nNotes\nCheck the Resources tab for info on the meaning of \"Eratosthenes\".\nTry solving this challenge using Eratosthenes sieve.",
    "tags": [
      "algorithms",
      "arrays",
      "math",
      "numbers"
    ],
    "title": "Sieve of Eratosthenes"
  },
  {
    "_id": "pa7tTr3g4XaNkHoWC",
    "difficulty": 2.057471264367816,
    "language": "python3",
    "summary": "Write a function that converts a sentence into pig latin.\n\nRules for converting to pig latin:\n\nFor words that begin with a vowel (a, e, i, o, u), add \"way\".\nOtherwise, move all letters before the first vowel to the end and add \"ay\".\nFor simplicity, no punctuation will be present in the inputs.\n\nExamples\npiglatinsentence(\"this is pig latin\") ➞ \"isthay isway igp",
    "tags": [
      "strings",
      "loops",
      "regex"
    ],
    "title": "pigLatin 3.0"
  },
  {
    "_id": "tL7KkXikEZKFDurwD",
    "difficulty": 2.0579710144927534,
    "language": "python3",
    "summary": "Create a function that takes a list with temperature type, temperature, and a second temperature type. The temperature types can be Celsius, Fahrenheit, or Kelvin. Return the temperature type (in the list) converted into the second temperature type.\n\nExamples\nconverter([\"fahrenheit\", 3] , \"kelvin\") ➞ 257.0\n\nconverter([\"celsius\", 10] , \"fahrenheit\") ➞ 50.0\n\ncon",
    "tags": [
      "numbers",
      "conditions"
    ],
    "title": "Temperature Converter"
  },
  {
    "_id": "MAzBohC2PxchT3wqK",
    "difficulty": 2.058139534883721,
    "language": "python3",
    "summary": "Given two sentences, return whether they are shadows of each other. This means that all of the word lengths are the same, but the corresponding words don't share any common letters.\n\nExamples\nshadow_sentence(\"they are round\", \"fold two times\") ➞ True\n\nshadow_sentence(\"own a boat\", \"buy my wine\") ➞ False\nNo words share common letters, but \"a\" and \"my\" have diff",
    "tags": [
      "strings",
      "loops",
      "validation"
    ],
    "title": "Shadow Sentences"
  },
  {
    "_id": "6LAgr6EGHKoZWGhjd",
    "difficulty": 2.0588235294117645,
    "language": "python3",
    "summary": "You face 1 out of the 4 compass directions: N, S, E or W.\n\nA left turn is a counter-clockwise turn. e.g. N (left-turn) ➞ W.\nA right turn is a clockwise turn. e.g. N (right-turn) ➞ E.\n\nCreate a function that takes in a starting direction and a sequence of left and right turns, and outputs the final direction faced.\n\nExamples\nfinal_direction(\"N\", [\"L\", \"L\", \"L\"]",
    "tags": [
      "arrays",
      "control_flow"
    ],
    "title": "Compass Directions"
  },
  {
    "_id": "juHLpxMYzfcREeMDo",
    "difficulty": 2.0588235294117645,
    "language": "python3",
    "summary": "Given a list of numbers and a value for n, split the numbers into n-sized groups. If we imagine that these groups are stacked on top of each other (see below), return the column number that has the greatest sum. If two or more columns have the same sum, return the one with the smallest column number.\n\nExample\nnums = [4, 14, 12, 7, 14, 16, 5, 13, 7, 16, 11, 19]",
    "tags": [
      "arrays",
      "language_fundamentals"
    ],
    "title": "Column With Maximum Sum"
  },
  {
    "_id": "LSpPdiycJ75MiwvgQ",
    "difficulty": 2.0588235294117645,
    "language": "python3",
    "summary": "How many ways are there to navigate through a grid (w * h)?\n\nGrid\n\nSuppose you're on a 4 × 6 grid, and want to go from the bottom left to the top right. How many different paths can you take? Avoid backtracking, you can only move right or up.\n\nCreate a function that takes width and height and returns the amount of possibilities.\n\nExamples\ngrid_pos([1, 1]) ➞ 2",
    "tags": [
      "algorithms",
      "numbers",
      "logic"
    ],
    "title": "Through the Grid"
  },
  {
    "_id": "SKS6J8AHck7gq3Jbj",
    "difficulty": 2.059171597633136,
    "language": "python3",
    "summary": "You have a list of strings, each consisting of a book title and an author's name.\n\nTo illustrate:\n[\n  [\"   Death of a Salesman - Arthur Miller    \"],\n  [\"   Macbeth - William Shakespeare    \"],\n  [\"    A Separate Peace - John Knowles     \"],\n  [\" Lord of the Flies - William Golding\"],\n  [\"A Tale of Two Cities - Charles Dickens\"]\n]\n\nCreate a function that takes",
    "tags": [
      "strings",
      "regex",
      "arrays",
      "formatting"
    ],
    "title": "Tidy Title and Author Strings"
  },
  {
    "_id": "zwDTaEry2WiY5n4G6",
    "difficulty": 2.0594059405940595,
    "language": "python3",
    "summary": "In this challenge, it's time to ban some impenitent digit!\n\nYour job is to delete the digits of a given number that, within their name written in English, contain a given vowel.\n\nGiven an integer n, and a string ban being the vowel to search, implement a function that returns:\nIf the given vowel is not present in the name of any of the digits of n, the same n.",
    "tags": [
      "strings",
      "conditions",
      "arrays",
      "numbers"
    ],
    "title": "Digital Vowel Ban"
  },
  {
    "_id": "e5S2DtfJafpybGhKc",
    "difficulty": 2.0597014925373136,
    "language": "python3",
    "summary": "Create a function that receives a square n\\*n matrix and returns that matrix after it has been rotated 90 degrees in the clockwise direction.\n\nExamples\nrotate([\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n]) ➞ [\n  [7, 4, 1],\n  [8, 5, 2],\n  [9, 6, 3]\n]\n\nrotate([\n  [\"a\", \"b\", \"c\", \"d\"],\n  [\"e\", \"f\", \"g\", \"h\"],\n  [\"i\", \"j\", \"k\", \"l\"],\n  [\"m\", \"n\", \"o\", \"p\"]\n]) ➞ [\n  [\"",
    "tags": [
      "arrays"
    ],
    "title": "Rotate a Matrix 90 Degrees Clockwise"
  },
  {
    "_id": "Es985FEDzEQ2tkM75",
    "difficulty": 2.0597826086956523,
    "language": "python3",
    "summary": "Create a function that takes two arguments (text, key) and returns a new encrypted text using the key. For example, if the input is \"a\" and the key is 1, it should move that letter 1 step in alphabetic order so the output would be \"b\".\n\nExamples\ncaesar_cipher(\"hello\", 5) ➞ \"mjqqt\"\n\ncaesar_cipher(\"hello world\", 1) ➞ \"ifmmp xpsme\"\n\ncaesar_cipher(\"a\", 2) ➞ \"c\"\n\nN",
    "tags": [
      "cryptography",
      "strings",
      "loops"
    ],
    "title": "Caesar Cipher"
  },
  {
    "_id": "YTf8DZbTkzJ3kizNa",
    "difficulty": 2.0598290598290596,
    "language": "python3",
    "summary": "A Harshad number is a number which is divisible by the sum of its digits. For example, 132 is divisible by 6 (1+3+2).\n\nA subset of the Harshad numbers are the Moran numbers. Moran numbers yield a prime when divided by the sum of their digits. For example, 133 divided by 7 (1+3+3) yields 19, a prime.\n\nCreate a function that takes a number and returns \"M\" if the",
    "tags": [
      "algebra",
      "math",
      "numbers",
      "validation"
    ],
    "title": "Moran Numbers"
  },
  {
    "_id": "9zf6scCreprSaQAPq",
    "difficulty": 2.0602409638554215,
    "language": "python3",
    "summary": "Given a list of math expressions, create a function which sorts the list by their answer. It should be sorted in ascending order.\n\nExamples\nsortbyanswer([\"1 + 1\", \"1 + 7\", \"1 + 5\", \"1 + 4\"]) ➞ [\"1 + 1\", \"1 + 4\", \"1 + 5\", \"1 + 7\"]\n\nsortbyanswer([\"4 - 4\", \"2 - 2\", \"5 - 5\", \"10 - 10\"]) ➞ [\"4 - 4\", \"2 - 2\", \"5 - 5\", \"10 - 10\"]\n\nsortbyanswer([\"2 + 2\", \"2 - 2\", \"2 *",
    "tags": [
      "math",
      "arrays",
      "language_fundamentals"
    ],
    "title": "Sort by Answer"
  },
  {
    "_id": "sMApDJSFkvXqF4u83",
    "difficulty": 2.060344827586207,
    "language": "python3",
    "summary": "An interprime number is a composite number which is equidistant from two consecutive primes. For example, the interprime 6 is 1 point after 5, a prime, and 1 point before the next prime, 7. Another interprime is 93, which lies midway between primes 89 and 97.\n\nCreate a function that takes a number n as input. If n is an interprime number, return a list contain",
    "tags": [
      "algebra",
      "math",
      "numbers"
    ],
    "title": "Interprime Numbers"
  },
  {
    "_id": "WQjynmyMXcR83Dd8K",
    "difficulty": 2.0604651162790697,
    "language": "python3",
    "summary": "Mona has created a method to sort a list in ascending order.\n\nStarting from the left of the list, she compares numbers by pairs. If the first pair is ordered [smaller number, larger number], she moves on. If the first pair is ordered [larger number, smaller number], she swaps the two integers before moving on to the next pair. She repeats this process until sh",
    "tags": [
      "sorting",
      "scope",
      "loops"
    ],
    "title": "Mona's Sort"
  },
  {
    "_id": "xmyNqzxAgpE47zXEt",
    "difficulty": 2.060747663551402,
    "language": "python3",
    "summary": "A word is alphabetically sorted if all of the letters in it are in consecutive alphabetical order. Some examples of alphabetically sorted words: abhors (a is before b, b is before h, h is before o, etc.), ghost, accent, hoop.\n\nCreate a function that takes in a sentence as input and returns True if there is at least one alphabetically sorted word inside that ha",
    "tags": [
      "sorting",
      "strings",
      "validation",
      "regex"
    ],
    "title": "Alphabetically Sorted"
  },
  {
    "_id": "RejeSPe68ajYzzgXM",
    "difficulty": 2.061224489795918,
    "language": "python3",
    "summary": "Create a function that, when given a list of individual [finite-state automaton] (https://en.wikipedia.org/wiki/Finite-state_machine) instructions, generates an FSA in the form described in [this challenge] (https://edabit.com/challenge/86CrsZ2rRMnCsDSza). Each instruction will be a list of three elements: The first element will be the current state, the secon",
    "tags": [
      "data_structures",
      "functional_programming",
      "arrays"
    ],
    "title": "FSA: Individual Instructions"
  },
  {
    "_id": "KSiC4iNjDHFiGS5oh",
    "difficulty": 2.06140350877193,
    "language": "python3",
    "summary": "A number n becomes a super-d number when, for any digit d from 2 up to 9, the result of d * nᵈ contains d consecutive digits equal to d.\n\nGiven a positive integer n, implement a function that returns:\n\"Super-d Number\" if n is a super-d number, replacing the letter d with the digit (any from 2 up to 9) that makes it super;\n\"Normal Number\" if n is not a super-d",
    "tags": [
      "algorithms",
      "numbers"
    ],
    "title": "Super-d Numbers"
  },
  {
    "_id": "XoBSfW4j6PNKerpBa",
    "difficulty": 2.06140350877193,
    "language": "python3",
    "summary": "Create a function that decomposes an integer into its prime factors, ordered from smallest to largest.\n\nFor instance:\n\ncomplete_factorization(24) = [2, 2, 2, 3]\nSince 24 = 8 x 3 = 2^3 x 3 = 2 x 2 x 2 x 3\n\nExamples\ncomplete_factorization(10) ➞ [2, 5]\n\ncomplete_factorization(9) ➞ [3, 3]\n\ncomplete_factorization(72) ➞ [2, 2, 2, 3, 3]\n\nNotes\n1 is not considered a p",
    "tags": [
      "arrays",
      "math"
    ],
    "title": "Complete Prime Factorization"
  },
  {
    "_id": "Jy6HPgir6TWvZKrjR",
    "difficulty": 2.0615384615384613,
    "language": "python3",
    "summary": "The geometric mean of numbers a and b is the square root of their product (i.e. √(ab)). For example, the geometric mean of 2 and 8 is √(2\\*8)=4.\n\nTwo integers (a and b) are randomly (and independently) chosen between 1 and n (inclusive) where n is an integer greater than one. Create a function that takes a number  n as an argument and returns the probability t",
    "tags": [
      "math",
      "numbers",
      "geometry"
    ],
    "title": "Geometric Mean"
  },
  {
    "_id": "r9y4yrSAGRaqTT7nM",
    "difficulty": 2.0616740088105727,
    "language": "python3",
    "summary": "Create a function that takes a list of lists and return the length of the missing list.\n\nExamples\nfind_missing([[1], [1, 2], [4, 5, 1, 1], [5, 6, 7, 8, 9]]) ➞ 3\n\nfind_missing([[5, 6, 7, 8, 9], [1, 2], [4, 5, 1, 1], [1]]) ➞ 3\n\nfind_missing([[4, 4, 4, 4], [1], [3, 3, 3]]) ➞ 2\n\nNotes\nTest input lists won't always be sorted in order of length.\nIf the list of lists",
    "tags": [
      "arrays",
      "algorithms"
    ],
    "title": "What's the Length of the Missing List?"
  },
  {
    "_id": "Ggj8t3fBCzjBHvFR7",
    "difficulty": 2.0618556701030926,
    "language": "python3",
    "summary": "Write a regular expression that will match all the positive numbers in a string with numbers separated by spaces. You must use RegEx negative lookbehind.\n\ntxt = \"23 -43 34 -44 45 -55 56\"\npattern = \"yourregularexpressionhere\"\n\nre.findall(pattern, txt) ➞ [\"23\", \"34\", \"45\", \"56\"]\n\nNotes\nYou don't need to write a function, just the pattern.\nDo not remove import re",
    "tags": [
      "language_fundamentals",
      "formatting",
      "regex"
    ],
    "title": "RegEx VII-B: Negative Lookbehind"
  },
  {
    "_id": "gSXYqtEFxLgQxoHvt",
    "difficulty": 2.0618556701030926,
    "language": "python3",
    "summary": "Create a function that returns the smallest number of changes it takes to transform one number into one with identical digits. A step is incrementing or decrementing a digit by one.\n\nExamples\nsmallest_transform(399) ➞ 6\n399 transformed to 999 in 6 steps.\n\nsmallest_transform(1234) ➞ 4\n1234 can be transformed to either 2222 or 3333 using 4 steps.\n\nsmallest_trans",
    "tags": [
      "arrays",
      "scope"
    ],
    "title": "Smallest Transform"
  },
  {
    "_id": "xFme9FBuvHLveh5nE",
    "difficulty": 2.063063063063063,
    "language": "python3",
    "summary": "A number is Zygodrome if it can be partitioned into clusters of repeating digits with a length equals or greater than two (as to say that repeating digits need to be placed as  an adjacent pair or a greater group, and that no single digits are allowed).\n\nGiven a non-negative integer num, implement a function that returns True if num is a Zygodrome number, or F",
    "tags": [
      "numbers",
      "validation"
    ],
    "title": "Zygodromes"
  },
  {
    "_id": "2TbW2br5FyNrByPHc",
    "difficulty": 2.0631578947368423,
    "language": "python3",
    "summary": "Write the regular expression that will help us count how many div elements are there in a string. Use the character class \\W in your expression.\n\nExample\ntxt1 = \"Hello.My name is George.\"\ntxt2 = \"The Word for Todayaardvark\"\ntxt3 = \"\"\npattern = \"yourregularexpressionhere\"\n\nlen(re.findall(pattern, txt1)) ➞ 2\nlen(re.findall(pattern, txt2)) ➞ 2\nlen(re.findall(patt",
    "tags": [
      "regex",
      "formatting"
    ],
    "title": "RegEx X-B: Word Character Class"
  },
  {
    "_id": "ya4diBApyLQKG7TQK",
    "difficulty": 2.0632911392405062,
    "language": "python3",
    "summary": "You will be given a string consisting of a list of integers and their relationships to their neighboring integers. For instance:\n\n\"-15-15=5\") ➞ False\nThis is False because 0 is not less than -5.\n\nvalidate_relationships(\"-159990, >=, <=`\nTests will not contain any spaces.",
    "tags": [
      "strings",
      "conditions",
      "validation"
    ],
    "title": "Validate the Relationships Between Integers in a String"
  },
  {
    "_id": "vSkfpeFw54mvGJeuD",
    "difficulty": 2.0634146341463415,
    "language": "python3",
    "summary": "The following is the Lychrel test.\n\nStart with any positive number. Add the number with the number formed by reversing its digits. Is the sum a palindrome? If not, repeat the process.\n\nFor most numbers, a palindrome is produced after a few iterations (7 or fewer) of the process above. Numbers that never reach a palindrome are called Lychrel* numbers. No number",
    "tags": [
      "algebra",
      "math",
      "numbers"
    ],
    "title": "Lychrel Numbers"
  },
  {
    "_id": "GPibesdkGf433vHBX",
    "difficulty": 2.0634920634920637,
    "language": "python3",
    "summary": "Goldbach's Conjecture is amongst the oldest and well-known unsolved mathematical problems. In correspondence with Leonhard Euler in 1742, German mathematician Christian Goldbach made a conjecture, which states:\n\n\"Every even whole number greater than 2 is the sum of two prime numbers.\"\n\nEven though it's been thoroughly tested and analyzed and seems to be true,",
    "tags": [
      "arrays",
      "math",
      "numbers",
      "logic"
    ],
    "title": "Goldbach Conjecture"
  },
  {
    "_id": "QdEAMeXNJAivcTMiT",
    "difficulty": 2.0636363636363635,
    "language": "python3",
    "summary": "You work in a factory, and your job is to take items from a conveyor belt and pack them into boxes.  Each box can hold a maximum of 10 kgs. Given a list containing the weight (in kg) of each item, how many boxes would you need to pack all of the items?\n\nExample\nboxes([2, 1, 2, 5, 4, 3, 6, 1, 1, 9, 3, 2]) ➞ 5\n\nBox 1 = [2, 1, 2, 5] (10kg)\nBox 2 = [4, 3] (7kg)\nBo",
    "tags": [
      "arrays",
      "math"
    ],
    "title": "How Many Boxes?"
  },
  {
    "_id": "6cj6i2DACHTbtNnCD",
    "difficulty": 2.0638297872340425,
    "language": "python3",
    "summary": "Create a function that takes a list lst and a number n and returns a list of two integers whose product is that of the number n.\n\nExamples\ntwo_product([1, 2, 3, 4, 13, 5], 39) ➞ [3, 13]\n\ntwo_product([11, 2, 7, 3, 5, 0], 55) ➞ [5, 11]\n\ntwo_product([100, 12, 4, 1, 2], 15) ➞ None\n\nNotes\nNo duplicates.\nSort the number.\nTry doing this with 0(n) time complexity.\nThe",
    "tags": [
      "conditions",
      "data_structures",
      "loops"
    ],
    "title": "Two Product Problem (Part 2)"
  },
  {
    "_id": "DnESns4PgWK4GAYbu",
    "difficulty": 2.0638297872340425,
    "language": "python3",
    "summary": "Create a function that takes a positive integer number (one of base2, base8, or base16) and converts the integer into the given base and returns a string using recursion.\n\nExamples\nintegertostring(10 , 2) ➞ \"1010\"\nBase = 2\n\nintegertostring(1642 , 8) ➞ \"3152\"\nBase = 8\n\nintegertostring(212 , 16) ➞ \"d4\"\nBase = 16\n\nNotes\nInput is a positive integer and base = 2, 8",
    "tags": [
      "recursion",
      "logic"
    ],
    "title": "Positive Integer Into Base 2, 8 and 16"
  },
  {
    "_id": "pyKqBxTT9BMLxTFeZ",
    "difficulty": 2.0638297872340425,
    "language": "python3",
    "summary": "Create a class that imitates a select screen. For simplicity, the cursor can only move right!\n\nIn the display method, return a string representation of the list, but with square brackets around the currently selected element. Also, create the method totheright, which moves the cursor one element to the right.\n\nThe cursor should start at index 0.\n\nExamples\nmenu",
    "tags": [
      "classes",
      "objects",
      "arrays"
    ],
    "title": "To the Right, to the Right!"
  },
  {
    "_id": "JAdCy7nMK8urjv9rL",
    "difficulty": 2.0642857142857145,
    "language": "python3",
    "summary": "Write a function that returns True if you can partition a list into one element and the rest, such that this element is equal to the product of all other elements excluding itself.\n\nExamples\ncan_partition([2, 8, 4, 1]) ➞ True\n8 = 2 x 4 x 1\n\ncan_partition([-1, -10, 1, -2, 20]) ➞ False\n\ncan_partition([-1, -20, 5, -1, -2, 2]) ➞ True\n\nNotes\nThe list may contain du",
    "tags": [
      "arrays",
      "logic",
      "loops"
    ],
    "title": "Product of Remaining Elements"
  },
  {
    "_id": "8LZdBwmpBiLJ5Sobt",
    "difficulty": 2.064327485380117,
    "language": "python3",
    "summary": "Create a function that returns all pairs of numbers in a list that sum to a target. Sort the pairs in ascending order with respect to the smaller number, then order each pair in this order: [smaller, larger].\n\nExamples\nall_pairs([2, 4, 5, 3], 7) ➞ [[2, 5], [3, 4]]\n2 + 5 = 7, 3 + 4 = 7\n\nall_pairs([5, 3, 9, 2, 1], 3) ➞ [[1, 2]]\n\nall_pairs([4, 5, 1, 3, 6, 8], 9) ",
    "tags": [
      "arrays",
      "algorithms",
      "sorting"
    ],
    "title": "All Pairs that Sum to Target"
  },
  {
    "_id": "q3fWZxXGRxSQo5viw",
    "difficulty": 2.064814814814815,
    "language": "python3",
    "summary": "A snail fell into a bucket and wanted to crawl out. Assuming we already know the snail can climb 5cm per minute, the snail can crawl for 30 minutes continuously and then needs to rest for 10 minutes. When it is resting it will slide down 30cm.\n\nHow many minutes will it take for the snail to crawl out from different depths? Create a function that takes the buck",
    "tags": [
      "algorithms",
      "math"
    ],
    "title": "Snail Crawl out of the Bucket"
  },
  {
    "_id": "9S9k2h4ZnDeyzXEgW",
    "difficulty": 2.064935064935065,
    "language": "python3",
    "summary": "Excel column names are in the following format:\n\nA, B, ..., Z, AA, ..., AZ, BA, ..., ZZ, AAA, AAB, ...\n\nWrite a function that returns the column number from the row name.\n\nExamples\ncolumn(\"A\") ➞ 1\n\ncolumn(\"Z\") ➞ 26\n\ncolumn(\"AA\") ➞ 27\n\ncolumn(\"BA\") ➞ 53\n\nNotes\nN/A",
    "tags": [
      "loops",
      "strings"
    ],
    "title": "Get the Excel Column"
  },
  {
    "_id": "NbZ2cMeEfH3KpQRku",
    "difficulty": 2.0655737704918034,
    "language": "python3",
    "summary": "You are given a list of 0s and 1s, like the one below:\n\n[0, 1, 0, 0, 0, 1, 1, 1, 0, 1]\n\nThe first element, a 0, and the last element, a 1 are both unhappy.\nThe second element, a 1 is unhappy.\nThe second-to-last element, a 0 is unhappy.\nAll other numbers in this list are happy.\n\nA 1 is unhappy if the digit to its left and the digit to its right are both 0s.\nA 0",
    "tags": [
      "arrays",
      "loops",
      "numbers"
    ],
    "title": "Happy Numbers"
  },
  {
    "_id": "qFkX2BvZPRWi3Amh6",
    "difficulty": 2.0655737704918034,
    "language": "python3",
    "summary": "Create a function that returns the right diagonal of a matrix if the sum of the right diagonal is greater than or equal to the sum of the left diagonal, else returns the left diagonal.\n\nExamples\ncompare_diagonals([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) ➞ [3, 5, 7]\n\nNotes\nThe matrix will be a square matrix of any order.",
    "tags": [
      "arrays",
      "loops"
    ],
    "title": "Compare Diagonal"
  },
  {
    "_id": "7jcWz9Kmr4rTSwdjK",
    "difficulty": 2.065934065934066,
    "language": "python3",
    "summary": "Write a function to find all the prime factors of a given integer. The function must return a list containing all the prime factors, sorted in ascending order. Remember that 1 is neither prime nor composite and should not be included in your output list.\n\nExamples\nprime_factorize(25) ➞ [5, 5]\n\nprime_factorize(19) ➞ [19]\n\nprime_factorize(77) ➞ [7, 11]\n\nNotes\nOu",
    "tags": [
      "math",
      "recursion",
      "logic",
      "numbers"
    ],
    "title": "Factor Tractor"
  },
  {
    "_id": "f4dnSXMewhHeB6Mgw",
    "difficulty": 2.065934065934066,
    "language": "python3",
    "summary": "In this challenge, you have to establish if an integer num is Alternating. To be Alternating, num must be positive and every digit in its sequence must have a different parity than its next and its previous digit.\n\nGiven an integer num, implement a function that returns True is num is an Alternating number, or False if it's not.\n\nExamples\nis_alternating(123) ➞",
    "tags": [
      "numbers",
      "validation"
    ],
    "title": "The Alternating Numbers"
  },
  {
    "_id": "4gDNqQB355FFGFFWN",
    "difficulty": 2.066666666666667,
    "language": "python3",
    "summary": "Odd numbers like to hangout with odd numbers. Even numbers like to hangout with even numbers.\n\nA spot is an insertion between two numbers in a list. Given a list of n integers in length, there are n-1 spots available.\n\nFor instance:\n\n[3, 4, 9, 10, 1]  # List of 5 digits can also be thought of as...\n\n[3, _ , 4, _ , 9, , 10, , 1]  # ...a list of 4 spots.\n\nAfter ",
    "tags": [
      "arrays",
      "higher_order_functions",
      "logic",
      "loops"
    ],
    "title": "Even vs. Odds"
  },
  {
    "_id": "KEsQGp7LsP3KwmqJ7",
    "difficulty": 2.066666666666667,
    "language": "python3",
    "summary": "Given a list of distinct integers, create a function that checks if the list is sorted and rotated clockwise. If so, return \"YES\"; otherwise return \"NO\".\n\nExamples\ncheck([3, 4, 5, 1, 2]) ➞ \"YES\"\nThe above list is sorted and rotated.\nSorted list: [1, 2, 3, 4, 5].\nRotating this sorted list clockwise\nby 3 positions, we get: [3, 4, 5, 1, 2].\n\ncheck([1, 2, 3]) ➞ \"N",
    "tags": [
      "arrays",
      "conditions",
      "algorithms"
    ],
    "title": "Check If an Array Is Sorted and Rotated"
  },
  {
    "_id": "N7zMhraJLCEMsmeTW",
    "difficulty": 2.066666666666667,
    "language": "python3",
    "summary": "Create a function that returns the minimum number of swaps it takes to transform a binary string into a string of alternating 0s and 1s. A swap is switching from a 0 to a 1 or vice versa.\n\nExamples\nmin_swaps(\"010010111\") ➞ 4\n\nTwo possible conversions:\n1. \"101010101\" (4 swaps)\n2. \"010101010\" (5 swaps)\n\nmin_swaps(\"10101010\") ➞ 0\n\nmin_swaps(\"10010\") ➞ 2\n\nNotes\nN/",
    "tags": [
      "strings",
      "loops"
    ],
    "title": "Minimum Swaps to Alternate a Binary String"
  },
  {
    "_id": "kpKKFZcvHX3C68zyN",
    "difficulty": 2.066666666666667,
    "language": "python3",
    "summary": "Two players draw a pair of numbered cards so that both players can form a 2 digit number. A winner can be decided if one player's number is larger than the other.\n\nHowever, there is a rule where a player can swap any one of their cards with any one of the other player's cards in a gamble to get a higher number! Note that it is illegal to swap the order of your",
    "tags": [
      "games",
      "numbers",
      "algorithms",
      "validation"
    ],
    "title": "Swapping Cards"
  },
  {
    "_id": "nfPNbisehCjuC8mkd",
    "difficulty": 2.066666666666667,
    "language": "python3",
    "summary": "Using markdown, it's possible to format links such as https://edabit.com/challenges, into something tidier like this. Notice how the text \"Go to the challenges!\" appears when hovering over the link.\n\nThis was achieved by using this code:\n\nthis\n\nGiven the url, the new name and optionally the hover_text, return the tidied up hyperlink as a string.\n\nExamples\ntidy",
    "tags": [
      "formatting",
      "strings"
    ],
    "title": "Tidy Hyperlinks"
  },
  {
    "_id": "zW6TypLCnKKNrAqt8",
    "difficulty": 2.0670391061452515,
    "language": "python3",
    "summary": "Create two functions:\n\nLeftside function: Returns count of numbers strictly smaller than n on the left.\nRightside function: Returns count of numbers strictly smaller than n on the right.\n\nExamples\nleft_side([5, 2, 1, 4, 8, 7]) ➞ [0, 0, 0, 2, 4, 4]\n\nright_side([5, 2, 1, 4, 8, 7]) ➞ [3, 1, 0, 0, 1, 0]\n\nleft_side([1, 2, 3, -1]) ➞ [0, 1, 2, 0]\n\nright_side([1, 2, 3",
    "tags": [
      "arrays",
      "loops"
    ],
    "title": "Left Side, Right Side"
  },
  {
    "_id": "6DppMcokmzJ3TtNNB",
    "difficulty": 2.067415730337079,
    "language": "python3",
    "summary": "Create a function which takes every letter in every word, and puts it in alphabetical order. Note how the original word lengths must stay the same.\n\nExamples\ntrue_alphabetic(\"hello world\") ➞ \"dehll loorw\"\n\ntrue_alphabetic(\"edabit is awesome\") ➞ \"aabdee ei imosstw\"\n\ntrue_alphabetic(\"have a nice day\") ➞ \"aaac d eehi nvy\"\n\nNotes\nAll sentences will be in lowercase",
    "tags": [
      "strings",
      "loops"
    ],
    "title": "True Alphabetical Order"
  },
  {
    "_id": "8HxYSzxMyN9pJb23g",
    "difficulty": 2.0675675675675675,
    "language": "python3",
    "summary": "Create a function that accepts txt and cases as parameters where the string is split into N distinct cases of equal length as shown:\n\nExamples\nsplitncases(\"Strengthened\", 6) ➞ [\"St\", \"re\", \"ng\", \"th\", \"en\", \"ed\"]\n\nsplitncases(\"Unscrupulous\", 2) ➞ [\"Unscru\", \"pulous\" ]\n\nsplitncases(\"Flavorless\", 1) ➞ [\"Flavorless\" ]\n\nNotes\nIf it's not possible to split the stri",
    "tags": [
      "arrays",
      "strings",
      "formatting"
    ],
    "title": "Split the String into N Cases of Equal Length"
  },
  {
    "_id": "jtN8gQ5KDoqEJ8HMx",
    "difficulty": 2.068702290076336,
    "language": "python3",
    "summary": "A number can eat the number to the right of it if it's smaller than itself. After eating that number, it becomes the sum of itself and that number. Your job is to create a function that returns the final list after the leftmost element has finished \"eating\".\n\nExamples\n[5, 3, 7] ➞ [8, 7] ➞ [15]\n\n5 eats 3 to become 8\n8 eats 7 to become 15\n[5, 3, 9] ➞ [8, 9]\n\n5 e",
    "tags": [
      "arrays",
      "math",
      "logic"
    ],
    "title": "Seven Ate Nine"
  },
  {
    "_id": "ESAWnF3ySrFusHhYF",
    "difficulty": 2.0689655172413794,
    "language": "python3",
    "summary": "Create a function that takes a list of any length. Modify each element (capitalize, reverse, hyphenate).\n\nExamples\nedit_words([\"new york city\"]) ➞ [\"YTIC KR-OY WEN\"]\n\nedit_words([\"null\", \"undefined\"]) ➞ [\"LL-UN\", \"DENIF-EDNU\"]\n\nedit_words([\"hello\", \"\", \"world\"]) ➞ [\"OLL-EH\", \"-\", \"DLR-OW\"]\n\nedit_words([\"\"]) ➞ [\"-\"]\n\nNotes\nInput list values can be any type.",
    "tags": [
      "arrays",
      "formatting",
      "loops",
      "sorting",
      "strings"
    ],
    "title": "Modify Words"
  },
  {
    "_id": "JDhs7peiN8nAnnFWz",
    "difficulty": 2.0693069306930694,
    "language": "python3",
    "summary": "Create a function that validates a password to conform to the following rules:\n\nLength between 6 and 24 characters.\nAt least one uppercase letter (A-Z).\nAt least one lowercase letter (a-z).\nAt least one digit (0-9).\nMaximum of 2 repeated characters.\n  \"aa\" is OK 👍\n  \"aaa\" is NOT OK 👎\nSupported special characters:\n  ! @ # $ % ^ & * ( ) + = _ - { } [ ] : ; \" '",
    "tags": [
      "validation",
      "conditions",
      "regex"
    ],
    "title": "Password Validation"
  },
  {
    "_id": "iZQR8D7JwmfpHDPSP",
    "difficulty": 2.0697674418604652,
    "language": "python3",
    "summary": "Create a function that returns the lowest neighbor of a given (x, y) coordinate element in a 2D list. The function will be passed three parameters.\n\n vec,  x,  y\n\nvec will be a 2D list holding integer values and will always be symmetrical in size (e.g. 2x2, 3x3, 4x4).\nx will hold the row coordinate, while y will hold the column coordinate.\n\nYou will have to ch",
    "tags": [
      "algorithms",
      "arrays",
      "loops",
      "math"
    ],
    "title": "Find the Lowest Neighbor of a 2D Vector Element"
  },
  {
    "_id": "hv572GaPtbqwhJpTb",
    "difficulty": 2.0704225352112675,
    "language": "python3",
    "summary": "In this challenge, you must think about words as elastics. What happens when do you tend an elastic applying a constant traction force at both ends? Every part (or letter, in this case) of the elastic will expand, with the minimum expansion at the ends, and the maximum expansion in the center.\n\nIf the word has an odd length, the effective central character of ",
    "tags": [
      "strings",
      "formatting"
    ],
    "title": "Elastic Words"
  },
  {
    "_id": "BbBwirMcezbqa2Adw",
    "difficulty": 2.0714285714285716,
    "language": "python3",
    "summary": "For a list of ranges, find the maximum range that is contained in all the ranges. If there is no such range, return \"No overlapping\".\n\nExamples\noverlapping([(1, 7), (2, 8), (0, 4)]) ➞ (2, 4)\n\noverlapping([(5, 10), (2, 15), (10, 12)]) ➞ (10, 10)\n\noverlapping([(11, 18), (3, 7), (2, 20), (5, 16)]) ➞ \"No overlapping\"\n\nNotes\nBoth ends are inclusive for all ranges.",
    "tags": [
      "language_fundamentals",
      "arrays"
    ],
    "title": "Find the Overlapping Range"
  },
  {
    "_id": "MENr66EcwwrDrMXkP",
    "difficulty": 2.0714285714285716,
    "language": "python3",
    "summary": "Create a function to generate all string character permutations.\n\nExamples\npermutations(\"AB\") ➞ \"AB BA\"\n\npermutations(\"CD\") ➞ \"CD DC\"\n\npermutations(\"EF\") ➞ \"EF FE\"\n\npermutations(\"NOT\") ➞ \"NOT NTO ONT OTN TNO TON\"\n\npermutations(\"RAM\") ➞ \"AMR ARM MAR MRA RAM RMA\"\n\npermutations(\"YAW\") ➞ \"AWY AYW WAY WYA YAW YWA\"\n\nNotes\nSort your results in alphabetical order befo",
    "tags": [
      "algorithms",
      "interview",
      "loops",
      "strings"
    ],
    "title": "Generate All String Character Permutations"
  },
  {
    "_id": "vuSXW3iEnEQNZXjAP",
    "difficulty": 2.0714285714285716,
    "language": "python3",
    "summary": "Create a function that takes a number and returns a string like square.\n\nExamples\ncreate_square(-1) ➞ \"\"\n\ncreate_square(0) ➞ \"\"\n\ncreate_square(1) ➞ \"#\"\n\ncreate_square(2) ➞ \"##\\n##\"\n\ncreate_square(3) ➞ \"###\\n# #\\n###\"\n\ncreate_square(4) ➞ \"####\\n#  #\\n#  #\\n####\"\n\n\"\n\n####\"\n\nNotes\nN/A",
    "tags": [
      "strings",
      "formatting"
    ],
    "title": "String Like Square"
  },
  {
    "_id": "yy2orcPr9CqAsrc24",
    "difficulty": 2.0714285714285716,
    "language": "python3",
    "summary": "Watson likes to challenge Sherlock's math ability. He will provide a starting and ending value describing a range of integers. Sherlock must determine the number of square integers within that range, inclusive of the endpoints (note that a square integer is an integer which is the square of an integer, e.g. 1, 4, 9, 16, 25, 36, 49).\n\nFor example, the range is",
    "tags": [
      "algorithms",
      "math"
    ],
    "title": "Sherlock and Squares"
  },
  {
    "_id": "6QYwhZstMuHYtZRbT",
    "difficulty": 2.0714285714285716,
    "language": "python3",
    "summary": "Given two integers create a function that counts the number of primes between the two given integers.\n\nExamples\nprime_count(1, 10) ➞ 4\nrange = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprimes = [2, 3, 5, 7]\nanswer = 4\n\nprime_count(1, 100) ➞ 25\n\nprime_count(1, 1000) ➞ 168\n\nNotes\nIf there are no primes within the given range, return 0.",
    "tags": [
      "loops",
      "math",
      "logic"
    ],
    "title": "Count the Primes within a Range"
  },
  {
    "_id": "BL47ShAQm5C4jR6iA",
    "difficulty": 2.0714285714285716,
    "language": "python3",
    "summary": "Time to call your lover to inform him/her  what he/she lost in the burglary.\n\nGiven a dictionary of the stolen objects, return the 3rd most expensive item on the list. If that is not possible, because there are not enough items, return False.\n\nExamples\nthirdmostexpensive({}) ➞ False\n\nthirdmostexpensive({\"piano\": 100}) ➞ False\n\nthirdmostexpensive({\"piano\": 100,",
    "tags": [
      "objects",
      "arrays",
      "loops"
    ],
    "title": "Burglary Series (05): Third Most Expensive"
  },
  {
    "_id": "FLgJEC8SK2AJYLC6y",
    "difficulty": 2.072463768115942,
    "language": "python3",
    "summary": "A floor plan is arranged as follows:\nYou may freely move between rooms 1 and 2.\nYou may freely move between rooms 3 and 4.\nHowever, you can enter the hallway to move between rooms 2 and 4.\n\nFloor Plan\n\nCreate a function that validates whether the route taken between rooms is possible. The hallway will be given as the letter \"H\".\n\nExamples\npossible_path([1, 2,",
    "tags": [
      "validation",
      "interview",
      "objects",
      "algorithms"
    ],
    "title": "Hall Monitor 2"
  },
  {
    "_id": "APuNqTanobCNtaHSe",
    "difficulty": 2.073170731707317,
    "language": "python3",
    "summary": "Create a function that takes a single Hexadecimal number as an argument and returns the equivalent six-digit binary number to light the display. Consider the six-digit binary number as an incoming input from a serial port. The segment display is a common cathode segment display that means you need to give a  logical 1 to light up each segment.\n\nAlternative Tex",
    "tags": [
      "functional_programming",
      "loops"
    ],
    "title": "Seven Segment Display"
  },
  {
    "_id": "wL2YJua2eBJfs4yGa",
    "difficulty": 2.074074074074074,
    "language": "python3",
    "summary": "In a letter to Lord Bowden in 1837, Charles Babbage asked, \"What is the smallest positive integer whose square ends in 269,696?\". He thought the answer was 99,736 whose square is 9,947,269,696. Was he right?\n\nWrite a function that takes a positive integer n and returns the smallest number whose square ends with n. One small twist, if n == 269696 return \"Babbag",
    "tags": [
      "algorithms",
      "logic",
      "math"
    ],
    "title": "Smallest Square Ending"
  },
  {
    "_id": "bWNZ3y98NwZRKk5rj",
    "difficulty": 2.074626865671642,
    "language": "python3",
    "summary": "Create a function that returns a number which can block the player from reaching 3 in a row in a game of Tic Tac Toe. The number given as an argument will correspond to a grid of Tic Tac Toe: topleft is 0, topright is 2, bottomleft is 6, and bottomright is 8.\n\nCreate a function that takes two numbers a, b and returns another number.\nThis number should be the f",
    "tags": [
      "logic",
      "games",
      "algorithms"
    ],
    "title": "Block the Square in Tic Tac Toe"
  },
  {
    "_id": "PbP5X4WuBiGbcjDDx",
    "difficulty": 2.074626865671642,
    "language": "python3",
    "summary": "Create a function that takes an lst and returns the sum of the numbers between two \"1\"s.\n\nExamples\nspace_apart([1, 0, 1, \"1\", 4, 3, 2, 3, 2, \"1\"]) ➞ 14\n\nspace_apart([\"1\", 9, 20, 38, \"1\"]) ➞ 67\n\nspace_apart([3, 2, 9, \"1\", 0, 0, -1, \"1\"]) ➞ \"invalid\"\n\nNotes\nReturn \"invalid\" if:\n  A negative number exists inside lst.\n  The number of \"1\"s does not equal 2.\nIgnore",
    "tags": [
      "arrays",
      "conditions"
    ],
    "title": "Spaces Apart"
  },
  {
    "_id": "Z6kRGLpYgSuFQJ7Rx",
    "difficulty": 2.075,
    "language": "python3",
    "summary": "Write a function that will return the longest word in a sentence. In cases where more than one word is found, return the first one.\n\nExamples\nfind_longest(\"A thing of beauty is a joy forever.\") ➞ \"forever\"\n\nfind_longest(\"Forgetfulness is by all means powerless!\") ➞ \"forgetfulness\"\n\nfind_longest(\"\\\"Strengths\\\" is the longest and most commonly used word that con",
    "tags": [
      "arrays",
      "strings",
      "validation",
      "recursion"
    ],
    "title": "Find the Longest Word"
  },
  {
    "_id": "jTBQTDQ568ppnGvq7",
    "difficulty": 2.075,
    "language": "python3",
    "summary": "Write a function that sorts a list of integers by their digit length in descending order, then settles ties by sorting numbers with the same digit length in ascending order.\n\nExamples\ndigit_sort([77, 23, 5, 7, 101])\n➞ [101, 23, 77, 5, 7]\n\ndigit_sort([1, 5, 9, 2, 789, 563, 444])\n➞ [444, 563, 789, 1, 2, 5, 9]\n\ndigit_sort([53219, 3772, 564, 32, 1])\n➞ [53219, 3772",
    "tags": [
      "sorting",
      "arrays"
    ],
    "title": "Sort by Digit Length, then By Number Itself"
  },
  {
    "_id": "guYAC7xacyWEaTq7X",
    "difficulty": 2.0754716981132075,
    "language": "python3",
    "summary": "If a number is autobiographical, then the number's digits describe itself. The first digit is the amount of times the digit 0 appears, the second digit is the amount of times the digit 1 appears, the third digit is the amount of times the digit 2 appears, etc. This repeats for all digits of the number. The number 6210001000 is autobiographical, because it has",
    "tags": [
      "numbers",
      "conditions",
      "loops",
      "validation"
    ],
    "title": "Numbers That are Also Writers"
  },
  {
    "_id": "vQpLcEAWG6hHu6E5Z",
    "difficulty": 2.0754716981132075,
    "language": "python3",
    "summary": "The Fibonacci sequence is a classic use case for recursive functions since the value of the sequence at a given index is dependent on the last two values. More precisely, it's dependent on the sum of the previous two values.\n\nWrite a function named fib that takes an integer n as its input. It should return the Fibonacci sequence's value at index n.\n\nExamples\nf",
    "tags": [
      "recursion",
      "math"
    ],
    "title": "Fibonacci Recursion"
  },
  {
    "_id": "EftMQCKvs4XQb7sqF",
    "difficulty": 2.076923076923077,
    "language": "python3",
    "summary": "The Chi-Squared (χ²) goodness of fit test estimates if an empirical (observed) distribution fits a theoretical (expected) distribution within reasonable margins. For example, to figure out if a die is loaded you could roll it many times and note the results. Because of randomness, you can't expect to get the same frequency for all faces, but if one or more fac",
    "tags": [
      "math",
      "numbers",
      "validation"
    ],
    "title": "Is the Die Loaded"
  },
  {
    "_id": "MNePwAcuoKG9Cza8G",
    "difficulty": 2.0773638968481376,
    "language": "python3",
    "summary": "Create a function that builds a staircase given the height and the type of building block.\n\nExamples\nbuild_staircase(3, \"#\") ➞ [\n  [\"#\", \"\", \"\"],\n  [\"#\", \"#\", \"_\"],\n  [\"#\", \"#\", \"#\"]\n]\n\nbuild_staircase(4, \"#\") ➞ [\n  [\"#\", \"\", \"\", \"_\"],\n  [\"#\", \"#\", \"\", \"\"],\n  [\"#\", \"#\", \"#\", \"_\"],\n  [\"#\", \"#\", \"#\", \"#\"]\n]\n\nbuild_staircase(3, \"A\") ➞ [\n  [\"A\", \"\", \"\"],\n  [\"A\", \"",
    "tags": [
      "formatting",
      "strings",
      "arrays"
    ],
    "title": "Building a Staircase"
  },
  {
    "_id": "kiGRxYGqzhoj9Gmit",
    "difficulty": 2.078125,
    "language": "python3",
    "summary": "Create a function that takes a string (morse code) as an argument and returns an unencrypted string.\n\nExamples\ndecode_morse(\".... . .-.. .--.   -- .   -.-.--\") ➞ \"HELP ME !\"\n\ndecode_morse(\"-.-. .... .- .-.. .-.. . -. --. .\") ➞ \"CHALLENGE\"\n\ndecode_morse(\". -.. .- -... -... .. -   -.-. .... .- .-.. .-.. . -. --. .\") ➞ \"EDABBIT CHALLENGE\"\n\nThe following dict can",
    "tags": [
      "conditions",
      "arrays",
      "loops"
    ],
    "title": "Morse Code Decoded"
  },
  {
    "_id": "MbbX7qJJeEnQu9bKr",
    "difficulty": 2.078125,
    "language": "python3",
    "summary": "Given a string text. Write a function that returns the character with the highest frequency. If more than 1 character has the same highest frequency, return all those characters as an array sorted in ascending order. If there is no repetition in characters, return \"No Repetition\".\n\nExamples\nmax_occur(\"Computer Science\") ➞ ['e']\n\nmax_occur(\"Edabit\") ➞ \"No Repet",
    "tags": [
      "algorithms",
      "arrays",
      "logic",
      "sorting"
    ],
    "title": "Maximum Occurrence"
  },
  {
    "_id": "rRKbaDKxzBhaLAFJZ",
    "difficulty": 2.0795454545454546,
    "language": "python3",
    "summary": "A number n is called uban if its name (in English) does not contain the letter \"u\". In particular, it cannot contain the terms \"four\", \"hundred\", and \"thousand\", so the uban number following 99 is 1,000,000.\n\nExamples\nis_uban(456) ➞ False\n\nis_uban(25) ➞ True\n\nis_uban(1098) ➞ False\n\nNotes\nN/A",
    "tags": [
      "math",
      "numbers",
      "strings",
      "validation"
    ],
    "title": "Uban Numbers"
  },
  {
    "_id": "94DMDTYe89i6TLCZh",
    "difficulty": 2.08,
    "language": "python3",
    "summary": "Create a function that takes a number that represents a person's programming language score, and returns an alphabetised list of programming languages they are proficient in. Arbitrarily assigned points for each language are listed below:\n\nLanguage | Points\n--- | ---\nC# | 1\nC++ | 2\nJava | 4\nJavaScript  |  8\nPHP | 16\nPython | 32\nRuby | 64\nSwift | 128\n\nExamples",
    "tags": [
      "numbers",
      "arrays",
      "bit_operations"
    ],
    "title": "Programming Polyglot"
  },
  {
    "_id": "FwCZpyTZDH3QExXE2",
    "difficulty": 2.08,
    "language": "python3",
    "summary": "Create a function that returns the amount of Fibonacci numbers strictly smaller than the given integer. In mathematics, the Fibonacci numbers commonly denoted Fn, form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. Thus:\n\nF0=0 and F1=1\n\nand\n\nFn=F(n-1)+F(n-2)\n\nfor n > 1\n\nThe beginnin",
    "tags": [
      "algebra",
      "algorithms",
      "math",
      "numbers"
    ],
    "title": "Amount of Fibonacci Numbers"
  },
  {
    "_id": "mm85tt2CxSa4Jhd7t",
    "difficulty": 2.08,
    "language": "python3",
    "summary": "Create a function that takes a list of integers lst and sort the elements of the list by decreasing frequency of the elements. If two elements have the same frequency, sort them by increasing value.\n\nExamples\nsort_freq([2, 3, 5, 3, 7, 9, 5, 3, 7]) ➞ [3, 3, 3, 5, 5, 7, 7, 2, 9]\n\nsort_freq([1, 2, 3, 0, 5, 0, 1, 6, 8, 8, 6, 9, 1]) ➞ [1, 1, 1, 0, 0, 6, 6, 8, 8, 2,",
    "tags": [
      "sorting",
      "numbers"
    ],
    "title": "Sort by Frequency"
  },
  {
    "_id": "uxCqPKsjtxCCqvCZJ",
    "difficulty": 2.08,
    "language": "python3",
    "summary": "The goal is to test if a consecutive sequence is formed. A consecutive sequence is defined as sequence of incrementing numbers (e.g. 1, 2, 3 or 5, 6, 7, 8). The twist is that you have to consider the combination of vectors as shown.\n\n[3 5 1 -5 ]  =>  [3+4  5+3  1+8  15-5]  =  [7 8 9 10]  =>  true\n[4 3 8 15]\n\nAlso important is that the vectors can be of differe",
    "tags": [
      "arrays",
      "logic",
      "validation"
    ],
    "title": "Combined Vector Sequence"
  },
  {
    "_id": "7NCfAsF2Y4wamHvHx",
    "difficulty": 2.0804597701149423,
    "language": "python3",
    "summary": "Two lists are part of the same zipper if the ending is identical. The identical section can be thought of as being \"zipped-up\". Below, [2, 2, 4] is \"zipped-up\".\n\nList 1: [3, 5, 8, 9, 2, 2, 4]\nList 2: [1, 7, 2, 2, 4]\n\nCreate a function that takes in two lists. Return False if none of the list is \"zipped.\" Return True if the lists are identical. Otherwise, retur",
    "tags": [
      "arrays",
      "control_flow"
    ],
    "title": "Zipping Up a List"
  },
  {
    "_id": "h6QH6ZuXqTXEdaoEG",
    "difficulty": 2.081967213114754,
    "language": "python3",
    "summary": "This challenge is more about geometry and trig than code-writing, but some may find it interesting.\n\nA circle has a circumference of 100 meters. A regular polygon, let's say a square, inscribed inside this circle has a perimeter of about 90 meters. As you increase the number of sides of the regular polygon, it's perimeter will become arbitrarily close to 100 m",
    "tags": [
      "math",
      "algebra",
      "geometry"
    ],
    "title": "Squaring the Circle"
  },
  {
    "_id": "yTcByt5gEnzF5av9X",
    "difficulty": 2.081967213114754,
    "language": "python3",
    "summary": "Create a function that takes a string and returns a string ordered by the length of the words. From shortest to longest word. If there are words with the same amount of letters, order them alphabetically.\n\nExamples\nsortbylength(\"Hello my friend\") ➞ \"my Hello friend\"\n\nsortbylength(\"Have a wonderful day\") ➞ \"a day Have wonderful\"\n\nsortbylength(\"My son loves pine",
    "tags": [
      "strings",
      "sorting",
      "arrays",
      "language_fundamentals"
    ],
    "title": "Sort by Length"
  },
  {
    "_id": "RfTvjipaoKBgEZvdZ",
    "difficulty": 2.081967213114754,
    "language": "python3",
    "summary": "Oh no! I've lost my glasses, but paradoxically, I need glasses to find my glasses!\n\nPlease help me out by showing me the index in the list which contains my glasses. They look like two capital Os, with any number of dashes in between!\n\nThis means that both O--O and O------------O are valid glasses, but not O----#--O for example!\nSearch thoroughly, maybe you'll",
    "tags": [
      "regex",
      "strings",
      "arrays"
    ],
    "title": "Where Are My Glasses?"
  },
  {
    "_id": "37BFkDdipm8qCk2WA",
    "difficulty": 2.0833333333333335,
    "language": "python3",
    "summary": "Write a function that takes a username and password and checks the list for a match. The list stores the passwords as a hash using the SHA1 algorithm. Return True for a match and False otherwise.\n\nExamples\nuserpassdb = [{\"username\" : \"myUsername\", \"pass_hash\" : \"5413ee24723bba2c5a6ba2d0196c78b3ee4628d1\"}]\n\ncheck_pass(\"myUsername\", \"myPassword\") ➞ True\n\ncheck_p",
    "tags": [
      "cryptography",
      "arrays",
      "conditions",
      "validation"
    ],
    "title": "Check Password Hash"
  },
  {
    "_id": "SBrK5GrreE43HgLD4",
    "difficulty": 2.0833333333333335,
    "language": "python3",
    "summary": "Write a function that takes in a word and splits the consonants one by one, but keeps the vowels in a cluster.\n\nExamples\nsplit(\"beautifully\") ➞ [\"b\", \"eau\", \"t\", \"i\", \"f\", \"u\", \"l\", \"l\", \"y\"]\n\nsplit(\"spoonful\") ➞ [\"s\", \"p\", \"oo\", \"n\", \"f\", \"u\", \"l\"]\n\nsplit(\"swimming\") ➞ [\"s\", \"w\", \"i\", \"m\", \"m\", \"i\", \"n\", \"g\"]\n\nNotes\nVowels are: a, e, i, o, u.\nAll letters will",
    "tags": [
      "strings",
      "regex"
    ],
    "title": "Cluster Vowels, Single Out Consonants"
  },
  {
    "_id": "oCe79PHB7yoqkbNYb",
    "difficulty": 2.0833333333333335,
    "language": "python3",
    "summary": "A number has a breakpoint if it can be split in a way where the digits on the left side and the digits on the right side sum to the same number.\n\nFor instance, the number 35190 can be sliced between the digits 351 and 90, since 3 + 5 + 1 = 9 and 9 + 0 = 9. On the other hand, the number 555 does not have a breakpoint (you must split between digits).\n\nCreate a f",
    "tags": [
      "arrays",
      "loops",
      "validation"
    ],
    "title": "Break Point"
  },
  {
    "_id": "voxWDZ9NSv8CXifec",
    "difficulty": 2.0833333333333335,
    "language": "python3",
    "summary": "At a lemonade stand, each lemonade costs $5. Customers are standing in a queue to buy from you, and order one at a time (in the order specified by bills).\n\nEach customer will only buy one lemonade and pay with either a $5, $10, or $20 bill. You must provide the correct change to each customer so that the net transaction is that the customer pays $5.\n\nReturn Tr",
    "tags": [
      "logic",
      "math",
      "numbers",
      "loops",
      "conditions"
    ],
    "title": "Lemonade Stand"
  },
  {
    "_id": "jJuMKJcS4TwoKA6Ju",
    "difficulty": 2.0833333333333335,
    "language": "python3",
    "summary": "You're able to call numbers like 1-800-flowers which replace the characters with the associated numbers on a cellular device keyboard.\n\nConversion\nabc  = 2\ndef  = 3\nghi  = 4\njkl  = 5\nmno  = 6\npqrs = 7\ntuv  = 8\nwxyz = 9\n\nThis is your task:\n\nCreate a function that takes a string as argument.\nConvert all letters to numbers by using a cellular device keyboard as r",
    "tags": [
      "arrays",
      "strings",
      "numbers",
      "formatting",
      "regex"
    ],
    "title": "String to Phone Number"
  },
  {
    "_id": "ZmLuQ2dhsQuxLtCYc",
    "difficulty": 2.0833333333333335,
    "language": "python3",
    "summary": "Create a function that calculates an energy bill.\n\nGiven a billing start date and end date,  start and end meter reading,  a unit price in pence, and a standing charge (a daily rental fee for your meter) as arguments, calculate your bill.\n\nAn energy bill is calculated by multiplying the difference between meter readings with the unit price and adding the numbe",
    "tags": [
      "dates",
      "math",
      "numbers"
    ],
    "title": "Energy Bill Calculator"
  },
  {
    "_id": "tbz5ji3ocwzAeLQNa",
    "difficulty": 2.084507042253521,
    "language": "python3",
    "summary": "Given a two-dimensional list of maze and a list of directions. Your task is to follow the given directions.\nIf you can reach the endpoint before all your moves have gone, return \"Finish\".\nIf you hit any walls or go outside the maze border, return \"Dead\".\nIf you find yourself still in the maze after using all the moves, return \"Lost\".\n\nThe maze list will look l",
    "tags": [
      "games",
      "arrays",
      "logic",
      "loops"
    ],
    "title": "Maze Escape"
  },
  {
    "_id": "4QLMtW9tzMcvG7Cxa",
    "difficulty": 2.0847457627118646,
    "language": "python3",
    "summary": "Create a function that takes a list of resistors and calculates the output of total resistance if the circuit is connected in parallel or in series.\n\nExamples\nresistance_calculator([10, 20, 30, 40, 50]) ➞ [4.38, 150]\n\nresistance_calculator([25, 14, 65, 18]) ➞ [5.48, 122]\n\nresistance_calculator([10, 10]) ➞ [5, 20]\n\nresistance_calculator([0, 0, 0, 0]) ➞ [0, 0]",
    "tags": [
      "arrays",
      "numbers"
    ],
    "title": "Series and Parallel Resistor Calculator"
  },
  {
    "_id": "nn7Na6zHLEHS9R8j2",
    "difficulty": 2.084967320261438,
    "language": "python3",
    "summary": "Create a function that takes a list and returns the number of ALL elements within it (including those within the sub-level list(s)).\n\nExamples\ndeep_count([1, 2, 3]) ➞ 3\n\ndeep_count([[1], [2], [3]]) ➞ 6\n\ndeep_count([\"x\", \"y\", [\"z\"]]) ➞ 4\n\ndeep_count([\"a\", \"b\", [\"c\", \"d\", [\"e\"]]]) ➞ 7\n\nNotes\nIn the examples above, notice how the sub-lists within the main list co",
    "tags": [
      "arrays",
      "recursion",
      "algorithms"
    ],
    "title": "Deep List Count"
  },
  {
    "_id": "ia95ckhN5ztgfJHe4",
    "difficulty": 2.0851063829787235,
    "language": "python3",
    "summary": "In JavaScript, there are two types of comments:\n\nSingle-line comments start with //\nMulti-line or inline comments start with / and end with /\n\nThe input will be a sequence of //, / and /. Every / must have a / that immediately follows it. To add, there can be no single-line comments in between multi-line comments in between the / and /.\n\nCreate a function that",
    "tags": [
      "strings",
      "regex",
      "validation"
    ],
    "title": "Valid JavaScript Comments"
  },
  {
    "_id": "af6XnEimLZTcwxJTP",
    "difficulty": 2.0853658536585367,
    "language": "python3",
    "summary": "Given a sentence with numbers representing a word's location embedded within each word, return the sorted sentence.\n\nExamples\nrearrange(\"is2 Thi1s T4est 3a\") ➞ \"This is a Test\"\n\nrearrange(\"4of Fo1r pe6ople g3ood th5e the2\") ➞ \"For the good of the people\"\n\nrearrange(\" \") ➞ \" \"\n\nNotes\nOnly the integers 1-9 will be used.",
    "tags": [
      "algorithms",
      "logic",
      "sorting",
      "strings"
    ],
    "title": "Rearrange the Sentence"
  },
  {
    "_id": "Rp6MLyZsGoTeM3QZQ",
    "difficulty": 2.085714285714286,
    "language": "python3",
    "summary": "This is based on Helen Yu's Making a Box challenge. This challenge is the same execpt that instead of a list of strings, your function should output a matrix of characters.\n\nExamples\nchar_box(1) ➞ [\n  [\"#\"]\n]\n\nchar_box(4) ➞ [\n  [\"#\", \"#\", \"#\", \"#\"],\n  [\"#\", \" \", \" \", \"#\"],\n  [\"#\", \" \", \" \", \"#\"],\n  [\"#\", \"#\", \"#\", \"#\"]\n]\n\nchar_box(2) ➞ [\n  [\"#\", \"#\"],\n  [\"#\",",
    "tags": [
      "validation",
      "formatting"
    ],
    "title": "Making a Box 2.0!"
  },
  {
    "_id": "SxevRSmRcshgwnAKp",
    "difficulty": 2.085889570552147,
    "language": "python3",
    "summary": "You will be given a dictionary with various products and their respective prices. Return a list of the products with a minimum price of 500 in descending order.\n\nExamples\npricey_prod({\"Computer\" : 600, \"TV\" : 800, \"Radio\" : 50}) ➞ [\"TV\", \"Computer\"]\n\npricey_prod({\"Bike1\" : 510, \"Bike2\" : 401, \"Bike3\" : 501}) ➞ [\"Bike1\", \"Bike3\"]\n\npricey_prod({\"Loafers\" : 50, \"",
    "tags": [
      "objects",
      "data_structures",
      "arrays",
      "sorting"
    ],
    "title": "Pricey Products"
  },
  {
    "_id": "jSjjhzRg5MvTRPabx",
    "difficulty": 2.086206896551724,
    "language": "python3",
    "summary": "Given a list of strings (nouns), list them up in a complete sentence.\n\nExamples\nsentence([\"orange\", \"apple\", \"pear\"]) ➞ \"An orange, an apple and a pear.\"\n\nsentence([\"keyboard\", \"mouse\"]) ➞ \"A keyboard and a mouse.\"\n\nsentence([\"car\", \"plane\", \"truck\", \"boat\"]) ➞ \"A car, a plane, a truck and a boat.\"\n\nNotes\nThe sentence starts with a capital letter.\nDo not chang",
    "tags": [
      "strings",
      "arrays"
    ],
    "title": "List Up a List of Strings in a Proper Way"
  },
  {
    "_id": "aQ3mnvDmcaTJfSbZh",
    "difficulty": 2.0875,
    "language": "python3",
    "summary": "Burrows-Wheeler transform (BWT) is an algorithm which is used in data compression. Given a string text, BWT of text is a modified version of the string with same length as text. It can then be used to efficiently find substrings of text (which won't be covered here). We will just find the BWT of text.\n\nBuild Burrows-Wheeler-Matrix (BWM) containing all rotation",
    "tags": [
      "cryptography",
      "formatting",
      "strings",
      "sorting"
    ],
    "title": "Burrows-Wheeler Transform"
  },
  {
    "_id": "6hh5BsRivRwMhiZrt",
    "difficulty": 2.087719298245614,
    "language": "python3",
    "summary": "Create a function that takes a number and returns the sum of factors of factors of the given number.\n\nExamples\nsum_ff(69) ➞ 3, 23 ➞ 0\nBoth 3 and 23 are prime numbers and have no factors\nother than 1 and themselves so the result is 0.\n\nsum_ff(12) ➞ 2, 4, 6 ➞ (0) + (2) + (2+3) ➞ 12\n\nsum_ff(420) ➞ 2,4, 6, 10, 12 ... ➞ (2) + (2+3) + (2+5) + (2+3+4+6) ... ➞ 1175\n\ns",
    "tags": [
      "loops",
      "math",
      "numbers"
    ],
    "title": "Sum of Factors of Factors"
  },
  {
    "_id": "NjpPt2b88s3SBuenX",
    "difficulty": 2.087719298245614,
    "language": "python3",
    "summary": "Create a function that takes a list of dictionaries like [{ \"name\": \"John\", \"notes\": [3, 5, 4]},  { \"name\": \"Mich\", \"notes\": [1, 3, 5]}] and returns a list of dictionaries like [{ \"name\": \"John\", \"topnote\": 5 }, {\"name\": \"Mich\", \"topnote\": 5}].\n\nIf a student has no notes (an empty list), return  top_note:  0.\n\nExamples\ngetnameandtopnote([{ \"name\": \"John\", \"not",
    "tags": [
      "arrays",
      "functional_programming",
      "objects"
    ],
    "title": "Get Students with Names and Top Notes II"
  },
  {
    "_id": "mFtJNuH6rveGXtiJd",
    "difficulty": 2.088607594936709,
    "language": "python3",
    "summary": "Matryoshka dolls are traditionally wooden dolls that can be nested by fitting smaller dolls into larger ones. Suppose lists can be nested similarly, placing smaller lists into larger ones, in the following sense:\n\nList A can be nested inside List B if:\n\nmin(list A) > min(list B)\nmax(list A)  1 = min(B)` and\nmax(A) = 9 < 10 = max(B)\n\nCreate a function that retu",
    "tags": [
      "arrays",
      "logic",
      "sorting",
      "validation"
    ],
    "title": "Matryoshka Dolls"
  },
  {
    "_id": "r7kZBzW3si9rJrLXh",
    "difficulty": 2.088607594936709,
    "language": "python3",
    "summary": "Each letter in a sentence is worth its position in the alphabet (i.e. a = 1, b = 2, c = 3, etc...). However, if a word is all in UPPERCASE, the value of that word is doubled.\n\nCreate a function which returns the value of a sentence.\n\ngetsentencevalue(\"abc ABC Abc\") ➞ 24\na = 1, b = 2, c = 3\n\nabc = 1 + 2 + 3 = 6\nABC = (1+2+3) * 2 = 12 (ALL letters are in upperca",
    "tags": [
      "strings",
      "algorithms"
    ],
    "title": "Expensive Words"
  },
  {
    "_id": "4Pe4nySfRnWPCjEwr",
    "difficulty": 2.09,
    "language": "python3",
    "summary": "Write a function that returns True if the first string is the second string stretched, and False otherwise. A stretch is to repeat each character in a string the same number of times.\n\nExamples\nis_stretched(\"pppaaannndddaaa\", \"panda\") ➞ True\n\nis_stretched(\"sssshhiipp\", \"ship\") ➞ False\n\nis_stretched(\"magnet\", \"magnet\") ➞ True\n\nis_stretched(\"magneto\", \"magnet\")",
    "tags": [
      "strings",
      "validation"
    ],
    "title": "Is a String Stretched?"
  },
  {
    "_id": "7AA54JmzruLMwG6do",
    "difficulty": 2.0901639344262297,
    "language": "python3",
    "summary": "An ice cream sandwich is a string that is formed by two identical ends and a different middle.\n\nSome examples of ice cream sandwiches:\n\"AABBBAA\"\n\n\"3&&3\"\n\n\"yyyyymmmmmmmmyyyyy\"\n\n\"hhhhhhhhmhhhhhhhh\"\n\nNotice how left and right ends of the sandwich are identical in both length and in repeating character). The middle section is distinctly different.\n\nNot ice cream s",
    "tags": [
      "strings",
      "language_fundamentals",
      "validation"
    ],
    "title": "Ice Cream Sandwich"
  },
  {
    "_id": "9RvRFtg67AkYiy3vN",
    "difficulty": 2.090909090909091,
    "language": "python3",
    "summary": "Create a left rotation and a right rotation function that returns all the left rotations and right rotations of a string.\n\nExamples\nleft_rotations(\"abc\") ➞ [\"abc\", \"bca\", \"cab\"]\n\nright_rotations(\"abc\") ➞ [\"abc\", \"cab\", \"bca\"]\n\nleft_rotations(\"abcdef\")\n➞ [\"abcdef\", \"bcdefa\", \"cdefab\", \"defabc\", \"efabcd\", \"fabcde\"]\n\nright_rotations(\"abcdef\")\n➞ [\"abcdef\", \"fabcde",
    "tags": [
      "strings",
      "loops",
      "arrays"
    ],
    "title": "All Rotations of a String"
  },
  {
    "_id": "ZsCu4cAeZ2b9n59AH",
    "difficulty": 2.090909090909091,
    "language": "python3",
    "summary": "0 represents the dog.\nEach list represents a house and each 1 represents an empty room.\nReturn the house and the room where it is located, there can be only one dog lost per building.\n\nExamples\nlost_dog([1, 1, 1, 1, 1, 1],  [1, 1, 1, 1, 1, 1],  [1, 1, 1, 1, 1, 1],  [1, 1, 1, 1, 1, 1])\n➞ \"Dog not found!\"\n\nlost_dog([1, 1, 1, 1, 1, 1],  [0, 1, 1, 1, 1, 1],  [1, 0",
    "tags": [
      "loops",
      "math",
      "language_fundamentals",
      "logic",
      "arrays"
    ],
    "title": "Find the Lost Dog"
  },
  {
    "_id": "4AtqpqKdXAFofa566",
    "difficulty": 2.091666666666667,
    "language": "python3",
    "summary": "Create a function that takes in a number as a string n and returns the number without trailing and leading zeros.\n\nTrailing Zeros are the zeros after a decimal point which don't affect the value\n(e.g. the last three zeros in 3.4000 and 3.04000).\nLeading Zeros are the zeros before a whole number which don't affect the value (e.g. the first three zeros in 000234",
    "tags": [
      "strings",
      "formatting",
      "regex",
      "numbers"
    ],
    "title": "Remove Trailing and Leading Zeros"
  },
  {
    "_id": "xng23q8WgoRFNnZM4",
    "difficulty": 2.0919540229885056,
    "language": "python3",
    "summary": "Words can be grouped together when one word can be found within another (e.g. eat is in heat and theater). Given a list of words, return a dictionary that groups together each word with a list of all other words that contain it. Each group of words should be returned in alphabetical order.\n\nExamples\nword_groups([\"grates\", \"rat\", \"rates\", \"rations\"]) ➞ {\n  \"rat",
    "tags": [
      "arrays",
      "conditions"
    ],
    "title": "Words Inside Words"
  },
  {
    "_id": "EcKeYPWNGWgPZhsxk",
    "difficulty": 2.092485549132948,
    "language": "python3",
    "summary": "This is a reverse coding challenge. Normally you're given explicit directions with how to create a function. Here, you must generate your own function to satisfy the relationship between the inputs and outputs.\n\nYour task is to create a function that, when fed the inputs below, produce the sample outputs shown.\n\nExamples\n832 ➞ 594\n\n51 ➞ 36\n\n7977 ➞ 198\n\n1 ➞ 0",
    "tags": [
      "numbers",
      "math",
      "logic"
    ],
    "title": "Reverse Coding Challenge #5"
  },
  {
    "_id": "QyKRBtaMDWofm5D3u",
    "difficulty": 2.0933333333333333,
    "language": "python3",
    "summary": "Create a function that  converts color in RGB format to Hex format.\n\nExamples\nrgbtohex(\"rgb(0, 128, 192)\") ➞ \"#0080c0\"\n\nrgbtohex(\"rgb(45, 255, 192)\") ➞ \"#2dffc0\"\n\nrgbtohex(\"rgb(0, 0, 0)\") ➞ \"#000000\"\n\nNotes\nThe Hex format should be displayed in lowercase.",
    "tags": [
      "arrays",
      "objects",
      "strings"
    ],
    "title": "RGB to Hex Color Converter"
  },
  {
    "_id": "TiLa2PopTZxYHrxGb",
    "difficulty": 2.09375,
    "language": "python3",
    "summary": "YouTube offers different playback speed options for users. This allows users to increase or decrease the speed of the video content. Given the actual duration and playback speed of the video, calculate the playback duration of the video.\n\nExamples\nplayback_duration(\"00:30:00\", 2) ➞ \"00:15:00\"\n\nplayback_duration(\"01:20:00\", 1.5) ➞ \"00:53:20\"\n\nplayback_duration(",
    "tags": [
      "conditions",
      "logic",
      "numbers",
      "validation"
    ],
    "title": "Playback Duration"
  },
  {
    "_id": "rGAcibgZ6u9MtasfW",
    "difficulty": 2.0943396226415096,
    "language": "python3",
    "summary": "A happy number is a number which yields a 1 by repeatedly summing up the square of its digit. If such a process results in an endless cycle of numbers containing 4, the number is said to be an unhappy number.\n\nCreate a function that accepts a number and determines whether the number is a happy number or not. Return True if so, False otherwise.\n\nExamples\nis_hap",
    "tags": [
      "strings",
      "arrays",
      "loops",
      "math",
      "validation"
    ],
    "title": "Happy Number"
  },
  {
    "_id": "D9RrvPomL2JeGXm3q",
    "difficulty": 2.094674556213018,
    "language": "python3",
    "summary": "Create a function that splits a string into an array of identical clusters.\n\nExamples\nsplit_groups(\"555\") ➞ [\"555\"]\n\nsplit_groups(\"5556667788\") ➞ [\"555\", \"666\", \"77\", \"88\"]\n\nsplit_groups(\"aaabbbaabbab\") ➞ [\"aaa\", \"bbb\", \"aa\", \"bb\", \"a\", \"b\"]\n\nsplitgroups(\"abbbcc88999&&!!!\") ➞ [\"a\", \"bbb\", \"cc\", \"88\", \"999\", \"&&\", \"!!!\", \"_\"]\n\nNotes\nEach cluster should only hav",
    "tags": [
      "regex",
      "strings"
    ],
    "title": "Split String by Identical Characters"
  },
  {
    "_id": "vZDgbWkcevrwzLh8W",
    "difficulty": 2.0952380952380953,
    "language": "python3",
    "summary": "Words with ae in them (where the underscore represents any letters) are pronounced like ay. Given a sentence, create a function which replaces all instances of ae with a ay.\n\nExamples\npronouncethea_e(\"i want to bake a cake\") ➞ \"i want to bayk a cayk\"\n\npronouncethea_e(\"cinnamon flakes\") ➞ \"cinnamon flayks\"\n\npronouncethea_e(\"bravely escape and inflate\") ➞ \"brayv",
    "tags": [
      "regex",
      "strings"
    ],
    "title": "Pronouncing A_E"
  },
  {
    "_id": "KdcCd2Xi96bMa4F8A",
    "difficulty": 2.0952380952380953,
    "language": "python3",
    "summary": "Anna is a strange girl. She likes certain boys, but not others. You have to figure out why she likes some, and not the others.\n\nExamples\nanna_likes(\"David\") ➞ False\n\nanna_likes(\"Samuel\") ➞ True\n\nanna_likes(\"Gary\") ➞ False\n\nNotes\nAll names / inputs are valid.\nAnna likes her own name.\nCheck the Tests tab for all 100 examples.\nTry to solve this one using RegEx.",
    "tags": [
      "regex",
      "strings",
      "validation"
    ],
    "title": "Anna Likes Daniel"
  },
  {
    "_id": "iasdc3ihqt9hkZWfi",
    "difficulty": 2.096774193548387,
    "language": "python3",
    "summary": "When a person receives a blood transfusion, it is essential to make sure that the donor's blood type is compatible with the receiver's blood type. Receiving a blood type that is not compatible with your own can be life-threating, so blood banks always make sure to note the type of blood they receive from donors so that they can ensure a safe transfusion.\n\nBloo",
    "tags": [
      "strings",
      "conditions",
      "validation"
    ],
    "title": "Blood Types"
  },
  {
    "_id": "pnd7xPYuvogkNfHg6",
    "difficulty": 2.0974358974358975,
    "language": "python3",
    "summary": "Given a dictionary with students and the grades that they made on the tests that they took, determine which student has the best Test Average. The key will be the student's name and the value will be a list of their grades. You will only have to return the student's name. You do not need to return their Test Average.\n\nExamples\ngetbeststudent({\n  \"John\": [100, ",
    "tags": [
      "objects",
      "arrays",
      "sorting",
      "loops"
    ],
    "title": "Get Student with Best Test Avg."
  },
  {
    "_id": "kEww9Hjds5Zkgjyfj",
    "difficulty": 2.097560975609756,
    "language": "python3",
    "summary": "Write a function that replaces each integer with the next largest in the list.\n\nExamples\nreplacenextlargest([5, 7, 3, 2, 8]) ➞ [7, 8, 5, 3, -1]\n\nreplacenextlargest([2, 3, 4, 5]) ➞ [3, 4, 5, -1]\n\nreplacenextlargest([1, 0, -1, 8, -72]) ➞ [8, 1, 0, -1, -1]\n\nNotes\nReplace the maximum with -1.\nElements in the list will be unique.",
    "tags": [
      "arrays",
      "loops"
    ],
    "title": "Replace With Next Largest Number"
  },
  {
    "_id": "zeHgBRuYyxp9TFry4",
    "difficulty": 2.097826086956522,
    "language": "python3",
    "summary": "Write a function that returns True if all the strings in a list can be formed by using only the characters from the longest string.\n\nExamples\ncan_form([\"mast\", \"manifest\", \"met\", \"fan\"]) ➞ True\n\ncan_form([\"may\", \"master\", \"same\", \"reams\"]) ➞ False\n\ncan_form([\"may\", \"same\", \"reams\", \"mastery\"]) ➞ True\n\nNotes\nThere will only be one unique longest string.",
    "tags": [
      "strings",
      "validation"
    ],
    "title": "Letters Formed from the Longest Word"
  },
  {
    "_id": "7L9RgoJHuYf85DWib",
    "difficulty": 2.0980392156862746,
    "language": "python3",
    "summary": "Create a function that takes a multi-dimensional list and converts it (recursively) into a single-dimensional list and returns it. Use a RECURSIVE approach.\n\nExamples\nflatten([[17.2, 5, \"code\"]]) ➞ [17.2, 5, \"code\"]\n\nflatten([[[[[2, 14, \"rubber\"]]], 2, 3, 4]])) ➞ [2, 14, \"rubber\", 2, 3, 4]\n\nflatten([[\"dimension\"]]) ➞ [\"dimension\"]\n\nNotes\nInput contains at leas",
    "tags": [
      "recursion",
      "arrays"
    ],
    "title": "Multidimensional List Into Single Dimensional List"
  },
  {
    "_id": "xmwdk2qwyZEt7ph49",
    "difficulty": 2.0987654320987654,
    "language": "python3",
    "summary": "Python's len() method will return the number of elements in a list. For example, the list below contains 2 elements:\n\n[1, [2, 3]]\n2 elements, number 1 and list [2, 3]\nSuppose we instead wanted to know the total number of non-nested items in the nested list. In the above case, [1, [2, 3]] contains 3 non-nested items, 1, 2 and 3.\n\nCreate a function that returns ",
    "tags": [
      "recursion",
      "arrays"
    ],
    "title": "Length of a Nested List"
  },
  {
    "_id": "s45bQoPtMoZcj7rnR",
    "difficulty": 2.0991735537190084,
    "language": "python3",
    "summary": "Write a function that returns the closest palindrome number to an integer. If two palindrome numbers tie in absolute distance, return the smaller number.\n\nExamples\nclosest_palindrome(887) ➞ 888\n\nclosest_palindrome(100) ➞ 99\n99 and 101 are equally distant, so we return the smaller palindrome.\n\nclosest_palindrome(888) ➞ 888\n\nclosest_palindrome(27) ➞ 22\n\nNotes\nIf",
    "tags": [
      "numbers",
      "loops"
    ],
    "title": "Closest Palindrome Number"
  },
  {
    "_id": "9WZcCNNCbaLvmHR3P",
    "difficulty": 2.1,
    "language": "python3",
    "summary": "A new number is a number that is not a permutation of any smaller number.  869 is not a new number because it is just a permutation of smaller numbers, 689 and 698. 509 is a new number because it can't be formed by a permutation of any smaller number (leading zeros not allowed).\n\nWrite a function that takes a non-negative integer and returns True if the intege",
    "tags": [
      "numbers",
      "validation",
      "math"
    ],
    "title": "New Numbers"
  },
  {
    "_id": "Grwj3q6oBfeXxhLq5",
    "difficulty": 2.1,
    "language": "python3",
    "summary": "A sexy (from sex, the Latin word for six) prime triplet is a group of three primes that differ by each other by 6, with the sum of the smallest prime plus 18 being a composite number.\n\nYou must implement a function that returns a list of triplets (triplets being lists in turn) found in a range, which included bounds are the two given integers low and high.\n\nEx",
    "tags": [
      "numbers",
      "math",
      "arrays"
    ],
    "title": "Unashamed Primes: Sexy Triplets"
  },
  {
    "_id": "cpuah2wBP7t6aStSb",
    "difficulty": 2.1,
    "language": "python3",
    "summary": "Given a list, write a function to calculate it's depth. Assume a normal list has a depth of 1.\n\nExamples\ndepth([1, 2, 3, 4]) ➞ 1\n\ndepth([1, [2, 3, 4]]) ➞ 2\n\ndepth([1, [2, [3, 4]]]) ➞ 3\n\ndepth([1, [2, [3, [4]]]]) ➞ 4\n\nNotes\nN/A",
    "tags": [
      "arrays",
      "recursion"
    ],
    "title": "Calculate Depth of Array"
  },
  {
    "_id": "eQT6bDsast8zNzcwB",
    "difficulty": 2.1,
    "language": "python3",
    "summary": "Bit masking is a technique used to \"hide\" certain parts of a number. It's great to use if you want to convey lots of information in a single integer. It takes a number n, converts it to its binary form, and then returns the digit at the index b of that binary number. Note that digit 0 is really the last digit since the least significant (smallest) digit is las",
    "tags": [
      "bit_operations",
      "numbers"
    ],
    "title": "Bit Masking"
  },
  {
    "_id": "SeShBxdG2rhGf4Y5L",
    "difficulty": 2.100502512562814,
    "language": "python3",
    "summary": "Write a function that returns the longest common ending between two strings.\n\nExamples\nlongestcommonending(\"multiplication\", \"ration\") ➞ \"ation\"\n\nlongestcommonending(\"potent\", \"tent\") ➞ \"tent\"\n\nlongestcommonending(\"skyscraper\", \"carnivore\") ➞ \"\"\n\nNotes\nReturn an empty string if there exists no common ending.",
    "tags": [
      "strings",
      "loops"
    ],
    "title": "Longest Common Ending"
  },
  {
    "_id": "eRY7eBD8dan54acgG",
    "difficulty": 2.10062893081761,
    "language": "python3",
    "summary": "Create a function that returns True if the two-dimensional n x n input array has a checker-board pattern.\n\nExamples\nis_checkerboard([\n  [1, 1],\n  [0, 1]\n]) ➞ False\n\nis_checkerboard([\n  [0, 1],\n  [1, 0]\n]) ➞ True\n\nis_checkerboard([\n  [1, 0, 1, 0, 1],\n  [0, 1, 0, 1, 0],\n  [1, 0, 1, 0, 1],\n  [0, 1, 0, 1, 0],\n  [1, 0, 1, 1, 1]\n]) ➞ False\n\nis_checkerboard([\n  [1, 0",
    "tags": [
      "arrays",
      "validation",
      "games"
    ],
    "title": "Checkerboard Pattern"
  },
  {
    "_id": "fPX7FGgzGLFLsorgu",
    "difficulty": 2.1009174311926606,
    "language": "python3",
    "summary": "A number is gapful if it is at least 3 digits long and is divisible by the number formed by stringing the first and last numbers together. The smallest number that fits this description is 100. First digit is 1, last digit is 0, forming 10, which is a factor of 100. Therefore, 100 is gapful.\n\nCreate a function that takes a number n and returns the closest gapf",
    "tags": [
      "algebra",
      "math",
      "numbers"
    ],
    "title": "Mind  the Gap"
  },
  {
    "_id": "cBMTHwEzq7bJJj3dE",
    "difficulty": 2.101123595505618,
    "language": "python3",
    "summary": "Write a function that determines if a list is circular. A list is circular if its sublists can be reordered such that each sublist's last element is equal to the next sublist's first element.\n\nFor example, the list [[1, 1, 1], [9, 2, 3, 4], [4, 1], [1, 2, 5, 7, 9]] is circular because we can re-arrange the elements to create the following list:\n\n[[9, 2, 3, 4],",
    "tags": [
      "arrays",
      "sorting"
    ],
    "title": "Is the List Circular?"
  },
  {
    "_id": "ANdoCvhhaEibypkDE",
    "difficulty": 2.101449275362319,
    "language": "python3",
    "summary": "Create a function that returns the sum of the digits formed from the first and last digits, all the way to the center of the number.\n\nWorked Example\nclosinginsum(2520) ➞ 72\n\nThe first and last digits are 2 and 0.\n2 and 0 form 20.\nThe second digit is 5 and the second to last digit is 2.\n5 and 2 form 52.\n\n20 + 52 = 72\n\nExamples\nclosinginsum(121) ➞ 13\n11 + 2\n\nclo",
    "tags": [
      "algorithms",
      "recursion",
      "loops",
      "numbers"
    ],
    "title": "Closing in Sum"
  },
  {
    "_id": "9aryEsSK9xLM8JPrR",
    "difficulty": 2.1016949152542375,
    "language": "python3",
    "summary": "In this challenge, you must build a program that generates the last character of an Italian Codice Fiscale, an alphanumeric identifying ID code.\n\nThe last character, also called check letter or CIN (Control Internal Number), is calculated after converting every other character into a numeric value, in relation to the parity of their natural position into the s",
    "tags": [
      "strings",
      "algorithms"
    ],
    "title": "The Fiscal Code (Part II): the Check Letter"
  },
  {
    "_id": "CZYyhsQ3ZmvN3Hq7X",
    "difficulty": 2.1016949152542375,
    "language": "python3",
    "summary": "The Euler's phi function (from the Greek letter φ, also called Euler's totient function) counts the positive integers that are coprime of a given number n, from 1 to n - 1. Two numbers are coprime when their greater common divisor is equal to 1. Look at the example below.\n\ndivisors of 6 ➞ [1, 2, 3, 6]\n\ndivisors of 5 ➞ [1, 5] ➞ g.c.d. = 1\ndivisors of 4 ➞ [1, 2,",
    "tags": [
      "numbers",
      "algorithms",
      "math",
      "higher_order_functions"
    ],
    "title": "Euler's Phi Function"
  },
  {
    "_id": "rPnq2ugsM7zsWr3Pf",
    "difficulty": 2.1018518518518516,
    "language": "python3",
    "summary": "Taking each four digit number of a list in turn, return the number that you are on when all of the digits 0-9 have been discovered. If not all of the digits can be found, return \"Missing digits!\".\n\nExamples\nfindalldigits([5175, 4538, 2926, 5057, 6401, 4376, 2280, 6137, 8798, 9083]) ➞ 5057\ndigits found:  517-  4-38  29-6  -0\n\nfindalldigits([5719, 7218, 3989, 81",
    "tags": [
      "arrays",
      "numbers"
    ],
    "title": "Find All Digits"
  },
  {
    "_id": "9S8qp4XKG2qwQMdrb",
    "difficulty": 2.1019417475728157,
    "language": "python3",
    "summary": "Write a function that returns the number of ways a person can climb n stairs, where the person may only climb 1 or 2 steps at a time.\n\nTo illustrate, if n = 4 there are 5 ways to climb:\n[1, 1, 1, 1]\n[2, 1, 1]\n[1, 2, 1]\n[1, 1, 2]\n[2, 2]\n\nExamples\nwaystoclimb(1) ➞ 1\n\nwaystoclimb(2) ➞ 2\n\nwaystoclimb(5) ➞ 8\n\nNotes\nA staircase of height 0 should return 1.",
    "tags": [
      "recursion",
      "algorithms"
    ],
    "title": "Staircase of Recursion"
  },
  {
    "_id": "8xwqLZuTAsLpNSPEn",
    "difficulty": 2.103896103896104,
    "language": "python3",
    "summary": "You are given a dictionary of names and the amount of points they have. Return a dictionary with the same names, but instead of points, return what prize they get.\n\n\"Gold\", \"Silver\", or \"Bronze\" to the 1st, 2nd and 3rd place respectively. For all the other names, return \"Participation\" for the prize.\n\nExamples\naward_prizes({\n  \"Joshua\" : 45,\n  \"Alex\" : 39,\n  \"",
    "tags": [
      "arrays",
      "numbers",
      "sorting"
    ],
    "title": "Awarding Prizes"
  },
  {
    "_id": "iXabTtWEX8xegqFds",
    "difficulty": 2.103896103896104,
    "language": "python3",
    "summary": "Write a function that sorts a given list in an aletrnative fashion. The result should be a list sorted in ascending order (number then letter). Lists will contain equal amounts of integer numbers and single characters.\n\nExamples\nalternate_sort([\"a\", \"b\", \"c\", 1, 2, 3]) ➞ [1, \"a\", 2, \"b\", 3, \"c\"]\n\nalternate_sort([-2, \"f\", \"A\", 0, 100, \"z\"]) ➞ [-2, \"A\", 0, \"f\",",
    "tags": [
      "sorting",
      "arrays"
    ],
    "title": "Alternate Sort"
  },
  {
    "_id": "NZH544exC2stzCycu",
    "difficulty": 2.1041666666666665,
    "language": "python3",
    "summary": "Create a function double unique_fract(), which should sum all irreducible regular fractions between 0 and 1, in the numerator and denominator of which there are only single-digit numbers: 1/2, 1/3, 1/4, ... 2/3, 2/4, ... 8/9.\n\nExamples\nunique_fract() ➞ sum\n\nNotes\nOf the fractions 1/2 2/4 3/6 4/8, only 1/2 is included in the sum.\nDon't include any values >= 1.",
    "tags": [
      "algorithms",
      "math",
      "loops"
    ],
    "title": "Amount of Unique Fractions"
  },
  {
    "_id": "fB4T399jry7rPofvT",
    "difficulty": 2.1041666666666665,
    "language": "python3",
    "summary": "Create a function that takes a dictionary representing student information and calculates the Grade Point Average using the formula explained below, and returns the following string:\n\nsol_format  = a\na = \"{studentname from dict} GPA for {studentsemester from dict} is calculated_gpa\"\n\nFormula Grade Point Average\n\nQuality Points :  A -> 4  B -> 3  C -> 2  D -> 1",
    "tags": [
      "arrays",
      "logic",
      "language_fundamentals"
    ],
    "title": "Grade Point Average"
  },
  {
    "_id": "rzburChL8YYe98vaP",
    "difficulty": 2.1044776119402986,
    "language": "python3",
    "summary": "The look-and-say sequence is generated by describing each group of identical digits in the previous term. If we start at \"1\", the first five terms in the sequence are:\n\n\"1\" = \"one 1\" = \"11\"\n\"11\" = \"two 1's\" = \"21\"\n\"21\" = \"one 2, one 1\" = \"1211\"\n\"1211\" = \"one 1, one 2, two 1's\" = \"111221\"\n\"111221\" = \"three 1's, two 2's, one 1\" = \"312211\"\n\nGiven a term (as a str",
    "tags": [
      "language_fundamentals",
      "strings"
    ],
    "title": "Look-And-Say Sequence"
  },
  {
    "_id": "soYjr9KM2YkGurtiT",
    "difficulty": 2.1044776119402986,
    "language": "python3",
    "summary": "Simon asks you to perform operations on a list of numbers that only he tells you. You should ignore all other instructions given. Create a function which evaluates a list of commands (written in plain English) if the command begins with Simon says. Return the result as an integer.\n\nExamples\nsimon_says([\n  \"Simon says add 4\",\n  \"Simon says add 6\",\n  \"Then add 5",
    "tags": [
      "strings",
      "arrays",
      "numbers"
    ],
    "title": "Simon Says"
  },
  {
    "_id": "FDxu6i6J2GnivsrBq",
    "difficulty": 2.1052631578947367,
    "language": "python3",
    "summary": "There are two types of potions:\n\nGrowing potion: \"A\"\nShrinking potion: \"B\"\n\nIf \"A\" immediately follows a digit, add 1 to the digit.\nIf \"B\" immediately follows a digit, subtract 1 from the digit.\n\nCreate a function that returns a string according to these rules, removing the potions once they've been consumed.\n\nExamples\nafter_potion(\"3A78B51\") ➞ \"47751\"\n3 grows",
    "tags": [
      "strings",
      "higher_order_functions"
    ],
    "title": "Growing and Shrinking Potions"
  },
  {
    "_id": "a3hPXPfA2o98WBvxD",
    "difficulty": 2.1052631578947367,
    "language": "python3",
    "summary": "Create a function that takes a number as an argument and returns n instances of the Fibonacci sequence as a list.\n\nFibonacci numbers: F(n) = F(n-1) + F(n-2) with F(0) = 0 and F(1) = 1. So the easy explanation is: The next element is the sum of the two previous elements.\n\nIf you want to read more about this sequence, take a look at the On-Line Encyclopedia of I",
    "tags": [
      "algorithms",
      "arrays",
      "numbers",
      "loops"
    ],
    "title": "Instances of the Fibonacci Sequence"
  },
  {
    "_id": "yrpugdAEmJ8TTqTkf",
    "difficulty": 2.1052631578947367,
    "language": "python3",
    "summary": "Create a function based on the input and output. Look at the examples, there is a pattern.\n\nExamples\nsecret(24) ➞ 8\n\nsecret(42) ➞ 8\n\nsecret(15) ➞ -4\n\nsecret(52) ➞ 15\n\nNotes\nnum >= 10 and  num <= 52\n*, ` and -` can be helpful.",
    "tags": [
      "logic",
      "language_fundamentals",
      "numbers",
      "math"
    ],
    "title": "Secret Function"
  },
  {
    "_id": "XTXZRmvXbhmhSfiPf",
    "difficulty": 2.1052631578947367,
    "language": "python3",
    "summary": "The function is given a list of numbers where each number appears three times except for one which appears only one time. Find the single number and return it.\n\nExamples\nsingle_number([2, 2, 3, 2]) ➞ 3\n\nsingle_number([0, 1, 0, 1, 0, 1, 99]) ➞ 99\n\nsingle_number([-1, 2, -4, 20, -1, 2, -4, -4, 2, -1]) ➞ 20\n\nNotes\nTo run under 12 seconds the function needs to be e",
    "tags": [
      "arrays",
      "algorithms",
      "conditions",
      "numbers"
    ],
    "title": "Find the Single Number"
  },
  {
    "_id": "sQN3Jb43teMbC7rGJ",
    "difficulty": 2.1052631578947367,
    "language": "python3",
    "summary": "In linear algebra, the transpose of a matrix is an operator which flips a matrix over its diagonal; that is, it switches the row and column indices of the matrix A by producing another matrix, often denoted by A^T.\n\nCreate a function that takes a 2D matrix m and returns a 2D matrix (matrix A^T).\n\nExamples\nmakeTranspose([\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n]",
    "tags": [
      "arrays",
      "algorithms",
      "algebra",
      "interview"
    ],
    "title": "Matrix Transpose"
  },
  {
    "_id": "XcQ5zTsFiHh6m28FW",
    "difficulty": 2.1052631578947367,
    "language": "python3",
    "summary": "Create a function that takes a string txt and expands it as per the following rules:\n\nThe numeric values represent the occurrence of each letter preceding that numeric value.\n\nstring_expansion(\"3M2u5b2a1s1h2i1r\") ➞ \"MMMuubbbbbaashiir\"\n\nThe first occurrence of a numeric value should be the number of times each character behind it is repeated, until the next num",
    "tags": [
      "strings",
      "language_fundamentals",
      "interview",
      "logic",
      "regex"
    ],
    "title": "String Expansion"
  },
  {
    "_id": "8WcHytN6EEy3mMycG",
    "difficulty": 2.105769230769231,
    "language": "python3",
    "summary": "Create a function that takes a string and replaces every letter with the letter following it in the alphabet (\"c\" becomes \"d\", \"z\" becomes \"a\", \"b\" becomes \"c\", etc). Then capitalize every vowel (a, e, i, o, u) and return the new modified string.\n\nExamples\nmangle(\"Fun times!\") ➞ \"GvO Ujnft!\"\n\nmangle(\"The quick brown fox.\") ➞ \"UIf rvjdl cspxO gpy.\"\n\nmangle(\"Ome",
    "tags": [
      "strings",
      "formatting",
      "regex"
    ],
    "title": "Mangle The String"
  },
  {
    "_id": "hbrEwrcSAQTbP9fKS",
    "difficulty": 2.106060606060606,
    "language": "python3",
    "summary": "Create a function that returns the nth catalan number.In combinatorial mathematics, the Catalan numbers form a sequence of natural numbers that occur in various counting problems, often involving recursively-defined objects. They are named after the Belgian mathematician Eugène Charles Catalan (1814–1894). For more info, check out the resource tab.\n\nExamples\ng",
    "tags": [
      "math",
      "language_fundamentals"
    ],
    "title": "Catalan Number"
  },
  {
    "_id": "2TF3FbDiwcN6juq9W",
    "difficulty": 2.106382978723404,
    "language": "python3",
    "summary": "Given a date, return how many days date is away from 2021 (end date not included). date will be in mm/dd/yyyy format.\n\nExamples\ndaysuntil2021(\"12/28/2020\") ➞ \"3 days\"\n\ndaysuntil2021(\"1/1/2020\") ➞ \"366 days\"\n\ndaysuntil2021(\"2/28/2020\") ➞ \"308 days\"\n\nNotes\nAll given dates will be in the year 2020.",
    "tags": [
      "dates"
    ],
    "title": "How Many Days Until 2021?"
  },
  {
    "_id": "eKhy6Af4v3Yr8RfBE",
    "difficulty": 2.106382978723404,
    "language": "python3",
    "summary": "Given a string, reverse its order, change lowercase letters to uppercase and increment uppercase letters by one (e.g. A becomes B, C becomes D, Z becomes A).\n\nExamples\nchange_string(\"ApPle\") ➞ \"ELQPB\"\n\nchange_string(\"draGON\") ➞ \"OPHARD\"\n\nchange_string(\"ZebrA\") ➞ \"BRBEA\"\n\nNotes\nRemember capital \"Z\" becomes \"A\".",
    "tags": [
      "strings"
    ],
    "title": "Change the Word"
  },
  {
    "_id": "BFEvGzLwewCn558ZT",
    "difficulty": 2.107142857142857,
    "language": "python3",
    "summary": "Heading off to the Tree Arboretum of Various Heights, I bring along my camera to snap up a few photos. Ideally, I'd want to take a picture of as many trees as possible, but the taller trees may cover up the shorter trees behind it.\n\nA tree is hidden if it is shorter or the same height as the tree in front.\n\nGiven a list of tree heights, create a function which",
    "tags": [
      "algorithms",
      "loops",
      "arrays",
      "numbers"
    ],
    "title": "Tree Photography"
  },
  {
    "_id": "PxAEK82SYsuLuYDsr",
    "difficulty": 2.10752688172043,
    "language": "python3",
    "summary": "A point on the screen (pt1) wants to move a certain distance (dist) closer to another point on the screen (pt2) The function  has three arguments, two of which are dictionaries with x & y values, and the third being the distance, e.g. {'x':50, 'y':60}, {'x': 100, 'y': 100}, 10. The expected result is a similar dictionary with the new co-ordinate.\n\nExamples\nget",
    "tags": [
      "games",
      "algebra",
      "objects",
      "math"
    ],
    "title": "Calculate Next Position of One Point Moving Towards Another"
  },
  {
    "_id": "trPQbGEb9p2yjMAWb",
    "difficulty": 2.1076923076923078,
    "language": "python3",
    "summary": "In this challenge, you have to verify that every, or some, of the given variables, pass a given test condition. There are seven parameters:\n\ntest: A string being the condition to verify.\nval: A string with two possible values:\n  everybody if every variable has to pass the test;\n  somebody if at least one of the variables has to pass the test.\na, b, c, d, e: Th",
    "tags": [
      "conditions",
      "validation"
    ],
    "title": "Every Value Needs Some Testing (To Pass)"
  },
  {
    "_id": "9v34qtFufkqPmzeDu",
    "difficulty": 2.108108108108108,
    "language": "python3",
    "summary": "Given a list of integers, find the length of the longest range of consecutive integers that are contained in the sorted version of the list.\n\nHere's an illustrative example. Consider the list:\n\n[4, 9, 10, 5, 17, 3, 8, 11, 1, 12, 18, 20]\n\n... which, after sorting, becomes:\n\n[1, 2, 4, 5, 8, 9, 10, 11, 12, 17, 18, 20]\n\nThe longest consecutive subsequence is now c",
    "tags": [
      "arrays",
      "sorting",
      "conditions"
    ],
    "title": "Longest Range in the List (Casual Version)"
  },
  {
    "_id": "ivWdkjsHtKSMZuNEc",
    "difficulty": 2.1085526315789473,
    "language": "python3",
    "summary": "Create a function that accepts a string as an argument. Find its shortest word(s) and return them as a list sorted alphabetically (if there are multiple shortest words).\n\nExamples\nfindshortestwords(\"I think the solution is fairly obvious.\") ➞ [\"i\"]\n\nfindshortestwords(\"Chase two rabbits, catch none.\") ➞ [\"two\"]\n\nfindshortestwords(\"We become what we think about.",
    "tags": [
      "loops",
      "regex",
      "strings",
      "language_fundamentals"
    ],
    "title": "Find the Shortest Word(s) in a Sentence"
  },
  {
    "_id": "hJsTYi8dL7rDWukqv",
    "difficulty": 2.109090909090909,
    "language": "python3",
    "summary": "Arun is obsessed with primes, especially five. He considers a number to be luckiest if it has the highest number of five in it. If two numbers have the same frequency of five, Arun considers the larger of them to be luckiest, and if there is no five in any number, the first given number is considered luckiest. Help him choose the luckiest number.\n\nExamples\nget",
    "tags": [
      "algorithms",
      "arrays"
    ],
    "title": "Count 5s and Win"
  },
  {
    "_id": "536BN4JhtgLb65TXr",
    "difficulty": 2.1095890410958904,
    "language": "python3",
    "summary": "Create a function that can convert from normal notation to tally-mark notation and vice versa. In tally-mark notation, a number can be decomposed as the sum of 5s + remainder.\n\nThe function will look like this: switch_notation([current scores], desired notation)\n\nEx.1 Normal: 3, 24, 4, 9\nEx.1 Tally: 3, 55554, 4, 54\n\nEx.2 Normal: 2, 12, 2, 4\nEx.2 Tally: 2, 552,",
    "tags": [
      "arrays",
      "strings"
    ],
    "title": "Tally Marks"
  },
  {
    "_id": "PvRttLNygmjEzeZtb",
    "difficulty": 2.1095890410958904,
    "language": "python3",
    "summary": "Quantifiers indicate numbers of characters or expressions to match.\n\nx* matches the preceding item \"x\" 0 or more times:\n\nre.findall(\"bo*\", \"A ghost boooooed\") ➞ [\"booooo\"]\n\nx+ matches the preceding item \"x\" 1 or more times. Equivalent to {1,}:\n\nre.findall(\"a+\", \"caaaaaaandy\") ➞ [\"aaaaaa\"]\n\nx? matches the preceding item \"x\" 0 or 1 times. If used immediately aft",
    "tags": [
      "regex",
      "formatting"
    ],
    "title": "RegEx XVII: Quantifiers"
  },
  {
    "_id": "S9A7PeacnDpvXLgYe",
    "difficulty": 2.1097560975609757,
    "language": "python3",
    "summary": "An abecedarian word is a word where all of its letters are arranged in alphabetical order. Examples of these words include:\nEmpty\nForty\nAlmost\n\nGiven a list of words, create a function which returns the longest abecedarian word. If no word in a list matches the criterea, return an empty string.\n\nExamples\nlongest_abecedarian([\"ace\", \"spades\", \"hearts\", \"clubs\"]",
    "tags": [
      "arrays",
      "strings",
      "loops"
    ],
    "title": "Longest Abecedarian Word"
  },
  {
    "_id": "c5aZLMAvq3ctPkBcD",
    "difficulty": 2.110091743119266,
    "language": "python3",
    "summary": "Suppose a hash # represents the BACKSPACE key being pressed. Write a function that transforms a string containing # into a string without any #.\n\nExamples\nerase(\"he##l#hel#llo\") ➞ \"hello\"\n\nerase(\"major# spar##ks\") ➞ \"majo spks\"\n\nerase(\"si###t boy\") ➞ \"t boy\"\n\nerase(\"####\") ➞ \"\"\n\nNotes\nIn addition to characters, backspaces can also remove whitespaces.\nIf the nu",
    "tags": [
      "strings",
      "regex",
      "scope"
    ],
    "title": "Backspace Attack"
  },
  {
    "_id": "2fZETLANpgp6uhTjG",
    "difficulty": 2.111111111111111,
    "language": "python3",
    "summary": "Given a list of five values, calculate the average star rating, rounded to two decimal places. The list contains user votes per star, so the first element [0] contains the number of 1-star ratings and the last element [4], the number of 5-star ratings.\n\nReturn the average score in [brackets], followed by a space and asterisks' * to represent the star rating, r",
    "tags": [
      "arrays",
      "logic",
      "math",
      "numbers"
    ],
    "title": "Star Ratings"
  },
  {
    "_id": "CRv9LQS3Mtizzdka3",
    "difficulty": 2.111111111111111,
    "language": "python3",
    "summary": "Write a function that returns the closest chapter to the current page you are at. If two chapters are similarly close, return whichever has the higher page.\n\nExamples\nclosesttopage({\n  \"Chapter 1\" : 1,\n  \"Chapter 2\" : 15,\n  \"Chapter 3\" : 37\n}, 10) ➞ \"Chapter 2\"\n\nclosesttopage({\n  \"New Beginnings\" : 1,\n  \"Strange Developments\" : 62,\n  \"The End?\" : 194,\n  \"The T",
    "tags": [
      "arrays",
      "strings",
      "numbers",
      "validation"
    ],
    "title": "Pages and Chapters"
  },
  {
    "_id": "crpyJZJq2k78tiHNd",
    "difficulty": 2.111111111111111,
    "language": "python3",
    "summary": "Create a function that takes the length, width,  height (in meters) and output unit and returns the volume of a pyramid to three decimal places in the correct unit.\n\nExamples\npyramid_volume(4, 6, 20, \"centimeters\") ➞ \"160000000.000 cubic centimeters\"\n\npyramid_volume(1843, 1823, 923, \"kilometers\") ➞ \"1.034 cubic kilometers\"\n\npyramid_volume(18, 412, 93, \"millime",
    "tags": [
      "strings",
      "math",
      "conditions",
      "formatting",
      "interview"
    ],
    "title": "Calculate the Volume of a Pyramid"
  },
  {
    "_id": "czGN5qceLFWba2j6F",
    "difficulty": 2.111111111111111,
    "language": "python3",
    "summary": "In this challenge, you have to establish if a given number is self-describing. To be self-describing, a positive number must have an even quantity of digits, because it has to be split into separated pairs of adjacent digits x and y, and each pair can be interpreted as a declaration: among the digits of the number, there are x instances of the digit equal to y",
    "tags": [
      "numbers",
      "arrays",
      "conditions",
      "loops"
    ],
    "title": "Digital Egomania: the Self-Describing Numbers"
  },
  {
    "_id": "dHn3wtGxhxCTs36SS",
    "difficulty": 2.111111111111111,
    "language": "python3",
    "summary": "Watch the video about Gauss's Addition in the Resources tab to see how you can use the formula for your function.\n\nGauss\n\nCreate a function that adds all the numbers together from 1 to n or, if two numbers are given: n to m. The input can be in any order.\n\nExamples\ngauss([100]) ➞ 5050 # From the video\n\ngauss([5001, 7000]) ➞ 12001000 # Also ^^\n\ngauss([1975, 165",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "Gauss's Addition"
  },
  {
    "_id": "iuenzEsAejQ4ZPqzJ",
    "difficulty": 2.1125827814569536,
    "language": "python3",
    "summary": "This is a reverse coding challenge. Normally you're given explicit directions with how to create a function. Here, you must generate your own function to satisfy the relationship between the inputs and outputs.\n\nYour task is to create a function that, when fed the inputs below, produce the sample outputs shown.\n\nExamples\n3 ➞ 21\n\n9 ➞ 2221\n\n17 ➞ 22221\n\n24 ➞ 2222",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "Reverse Coding Challenge #2"
  },
  {
    "_id": "Q8XSxTfzP3HLS57h5",
    "difficulty": 2.112676056338028,
    "language": "python3",
    "summary": "Each character in the English Alphabet has an ASCII Char Code.\n\nGiven a sentence, return the sentence with one change:\n\nFor a word, if the sum of its letter's char codes is above the global average sum of char codes (i.e if the sum of char codes for a word is 205) and on average, a word in the sentence has a char code sum of 189, capitalise the word.\n\nFor exam",
    "tags": [
      "math",
      "logic",
      "strings",
      "conditions"
    ],
    "title": "ASCII Capitals"
  },
  {
    "_id": "K3bpLf794wSSrHmdc",
    "difficulty": 2.1140350877192984,
    "language": "python3",
    "summary": "Create a function that takes in a sentence and returns a running list of consonants per word and vowels per word.\n\nExamples\nstring_code(\"Happy Birthday To Me!\")\n➞ [\"4 6 1 1\", \"1 2 1 1\"]\n\nConsonants - 4 : [H, p, p, y], 6 : [B, r, t, h, d, y], 1: [T], 1 : [M]\nVowels - 1: [a], 2 : [i, a], 1: [o], 1: [e]\n\nstring_code(\"I'd like to drink my first glass of champagne.",
    "tags": [
      "strings",
      "regex",
      "higher_order_functions"
    ],
    "title": "Consonant-Vowel Coding"
  },
  {
    "_id": "5EeHDHMx9WbjnnbJZ",
    "difficulty": 2.1142857142857143,
    "language": "python3",
    "summary": "Create a function that takes a timestamp for the start time sa and stop time st in HH:MM:SS format and returns the measured amount of elapsed time between start and stop times.\n\nExamples\nelapsed_time(\"11:00:00\", \"12:00:00\") ➞ \"01:00:00\"\n\nelapsed_time(\"13:01:43\", \"21:41:57\") ➞ \"08:40:14\"\n\nelapsed_time(\"17:34:43\", \"17:34:42\") ➞ \"23:59:59\"\n\nNotes\nAll times will b",
    "tags": [
      "numbers",
      "strings"
    ],
    "title": "Calculate Elapsed Time"
  },
  {
    "_id": "m7mJib8kvoyDXgk4i",
    "difficulty": 2.1153846153846154,
    "language": "python3",
    "summary": "You are given a sequence of integers. Your job is to take a continuous chunk of this sequence, such that the sum of its elements is maximized. You only need to return the maximum sum attained.\n\nFor example, suppose you are given the sequence (3, -10, 4, -1, 2, 3, 6, -7). You get the maximum sum by taking the elements (4, -1, 2, 3, 6) which sums to 14.\n\nExample",
    "tags": [
      "loops",
      "math"
    ],
    "title": "Maximum Sum"
  },
  {
    "_id": "8WvpPQto44PqNLSqJ",
    "difficulty": 2.1159420289855073,
    "language": "python3",
    "summary": "John realised that many of his tweets on Twitter are under 140 characters. He wishes to make full use of the allocated space by using any of the remaining space by filling it in with lolololol until he hits 140 characters.\n\nFor example, if his message is:\n\n\"What a wonderful day!\"\n\nHe instead wants to tweet:\n\n\"What a wonderful day!lololololololololololololololo",
    "tags": [
      "strings",
      "formatting"
    ],
    "title": "Twitter Messages"
  },
  {
    "_id": "35JtGyWLFhxGkHNnj",
    "difficulty": 2.1176470588235294,
    "language": "python3",
    "summary": "Create a function that takes a list and a number and selectively reverse the order of the list based on the number you're given (second argument). If you're given the arguments [1,2,3,4,5,6] and 2, you would return the list [2,1, 4,3, 6,5].\n\nExamples\nsel_reverse([1,2,3,4,5,6], 2) ➞ [2,1, 4,3, 6,5]\n\nsel_reverse([2,4,6,8,10,12,14,16], 3) ➞ [6,4,2, 12,10,8, 16,14",
    "tags": [
      "algorithms",
      "arrays",
      "numbers"
    ],
    "title": "Selective List Reversal"
  },
  {
    "_id": "J9wWjJXT9MLvosN4F",
    "difficulty": 2.1176470588235294,
    "language": "python3",
    "summary": "Create a function that takes a matrix of size (m, n) and returns a matrix of size (m+2, n+2) with a pad of 0s around the perimeter.\n\nExamples\npad_matrix([[]]) ➞ [[0, 0], [0, 0], [0, 0]]\n\npad_matrix([[9]]) ➞ [\n  [0, 0, 0],\n  [0, 9, 0],\n  [0, 0, 0]\n]\n\npad_matrix([[\"hi\", True]]) ➞ [\n  [0, 0, 0, 0],\n  [0, \"hi\", True, 0],\n  [0, 0, 0, 0]\n]\n\npad_matrix([\n  [1, 2, 5],",
    "tags": [
      "arrays",
      "logic"
    ],
    "title": "Matrix Padder"
  },
  {
    "_id": "MNJvhq2fXLFbhuti8",
    "difficulty": 2.1176470588235294,
    "language": "python3",
    "summary": "Create a function that takes in a list of integers and returns the integers that are either palindromes or  almost-palindromes. An almost-palindrome is any integer that can be rearranged to form a palindrome.\n\nFor example, the numbers 677 and 338 are both almost-palindromes, since they can be rearranged to form 767 and 383, respectively.\n\nExamples\npalindrome_s",
    "tags": [
      "arrays",
      "strings",
      "higher_order_functions"
    ],
    "title": "Almost-Palindrome Sieve"
  },
  {
    "_id": "rShXJNT2WQQiSiRx6",
    "difficulty": 2.1176470588235294,
    "language": "python3",
    "summary": "Create a function that takes two strings and returns True if either of the strings appears at the very end of the other string. Return False otherwise. The character * is a wildcard, so it can take the place of any character.\n\nExamples\noverlap(\"ABC\", \"Ican'tsingmyABC\") ➞ True\n\noverlap(\"abc\", \"Ican'tsingmyABC\") ➞ True\n\noverlap(\"Ican'tsingmyABC\", \"abc\") ➞ True",
    "tags": [
      "conditions",
      "logic",
      "strings",
      "validation"
    ],
    "title": "Is One String in the Other?"
  },
  {
    "_id": "RJarAhzhTHonSXWci",
    "difficulty": 2.1176470588235294,
    "language": "python3",
    "summary": "Create a function that takes the memory size (MS is a string type) as an argument and returns the actual memory size.\n\nExamples\nactualmemorysize(32GB) ➞ 29.76GB\n\nactualmemorysize(2GB) ➞ 1.86GB\n\nactualmemorysize(512MB) ➞ 476MB\n\nNotes\nThe actual storage loss on a USB device is 7% of the overall memory size!\nIf the actual memory size was greater than 1 GB, round",
    "tags": [
      "algebra",
      "strings",
      "math"
    ],
    "title": "The Actual Memory Size of your USB Flash Drive"
  },
  {
    "_id": "J78uGTQoN7E5F4nCA",
    "difficulty": 2.1184210526315788,
    "language": "python3",
    "summary": "Below is an example of a repeating cycle.\n\nisrepeatingcycle([1, 2, 3, 1, 2], 3) ➞ True\nSince the first two elements of [1, 2, 3] equals [1, 2]\n\nBelow is an example of a non-repeating cycle.\n\nisrepeatingcycle([1, 2, 3, 1, 3], 3) ➞ False\nSince [1, 2, 3] != [1, 3]\n\nYou are tasked with writing a function that takes in two inputs:\n\nA list of integers.\nThe length of",
    "tags": [
      "arrays",
      "validation"
    ],
    "title": "Repeating Cycle"
  },
  {
    "_id": "W8QKA4YpzmeLeZWMX",
    "difficulty": 2.119047619047619,
    "language": "python3",
    "summary": "Create a function that takes a number and return a string with the number in expanded notation (AKA expanded form). See the resources tab for details on expanded notation.\n\nExamples\nexpand(13) ➞ \"10 + 3\"\n\nexpand(86) ➞ \"80 + 6\"\n\nexpand(17000000) ➞ \"10000000 + 7000000\"\n\nexpand(5325) ➞ \"5000 + 300 + 20 + 5\"\n\nNotes\nYou can expect only whole numbers greater than 0 ",
    "tags": [
      "math",
      "algorithms",
      "strings",
      "numbers"
    ],
    "title": "Express Number in Expanded Notation"
  },
  {
    "_id": "iZgvZoGZLkDPmAtNu",
    "difficulty": 2.119565217391304,
    "language": "python3",
    "summary": "A semiprime is a composite number that is the product of two primes. Apart from these two primes, its only other proper (non-self) divisor is 1.\n\nThe two prime factors of a semiprime can be the same number (e.g. the semiprime 49 is the product of 7x7). A semiprime that has two distinct prime factors is called a squarefree semiprime.\n\nCreate a function that tak",
    "tags": [
      "math",
      "validation",
      "numbers"
    ],
    "title": "Semiprimes"
  },
  {
    "_id": "5qmRdEpAm6NQqc9JL",
    "difficulty": 2.12,
    "language": "python3",
    "summary": "In this challenge, you are given a date and you have to determine the correspondent season in a certain hemisphere of Earth.\n\nYou have to use the ranges given by the meteorological seasons definition, accordingly to the following table:\n\n| Start | End | North Hemisphere | South Hemisphere |\n|---|---|---|---|\n| March, 1 | May, 31 | Spring | Autumn |\n| June, 1 |",
    "tags": [
      "dates",
      "data_structures",
      "conditions"
    ],
    "title": "Seasons on Earth"
  },
  {
    "_id": "pqtqDvRSKNWHAMsF2",
    "difficulty": 2.1206896551724137,
    "language": "python3",
    "summary": "Create a function that takes three lists and returns one list where all passed arrays are combined into nested lists.\n\nThese lists should be combined based on indexes: the first nested list should contain only the items on index 0, the second list on index 1, and so on.\n\nIf any list contains fewer items than necessary, supplement the missing item with \"*\".\n\nEx",
    "tags": [
      "arrays",
      "data_structures",
      "loops"
    ],
    "title": "Combine Arrays"
  },
  {
    "_id": "DTqHDf3srwsCifC7j",
    "difficulty": 2.121212121212121,
    "language": "python3",
    "summary": "Write a function that retrieves the top 3 longest words of a newspaper headline and transforms them into hashtags. If multiple words tie for the same length, retrieve the word that occurs first.\n\nExamples\ngethashtags(\"How the Avocado Became the Fruit of the Global Trade\")\n➞ [\"#avocado\", \"#became\", \"#global\"]\n\ngethashtags(\"Why You Will Probably Pay More for You",
    "tags": [
      "strings",
      "sorting",
      "regex"
    ],
    "title": "Headline Hash Tags"
  },
  {
    "_id": "oaN8o42vuzsdnCf4x",
    "difficulty": 2.122137404580153,
    "language": "python3",
    "summary": "Create a function that takes a list of words, scores the words based on the Scrabble scoring table below, and returns a list of the highest scoring words. The words on resulting list should be in the same relative order as the original list.\n\nLetter | Points\n--- | ---\nA | 1\nB | 3\nC | 3\nD | 2\nE | 1\nF | 4\nG | 2\nH | 4\nI | 1\nJ | 8\nK | 5\nL | 2\nM | 3\nN | 1\nO | 1\nP |",
    "tags": [
      "games",
      "sorting"
    ],
    "title": "Scrabble Scores (Part 1)"
  },
  {
    "_id": "f9yjvFSp3HQC6kQxz",
    "difficulty": 2.1222222222222222,
    "language": "python3",
    "summary": "The factorial of a positive number n is the product of all numbers from 1 to n.\n\n5! = 5 x 4 x 3 x 2 x 1 = 120\n\nThe semifactorial (also known as the double factorial) of a positive number n is the product of all numbers from 1 to n that have the same parity (i.e. odd or even) as n.\n\n12!! = 12 x 10 x 8 x 6 x 4 x 2 = 46,080\n\n7!! = 7 x 5 x 3 x 1 = 105\n\nThe alterna",
    "tags": [
      "math",
      "numbers",
      "recursion",
      "algebra"
    ],
    "title": "Alt Facts, Semi Facts"
  },
  {
    "_id": "LQFweeNkSNE6nwodn",
    "difficulty": 2.122448979591837,
    "language": "python3",
    "summary": "You are given a list representing the number of 0s, 1s, 2s, ..., 9s you have. The function will look like:\n\ncan_build([#0s, #1s, #2s, ..., #9s], [num1, num2, ...])\n\nWrite a function that returns True if you can build the following numbers using only the digits you have.\n\nExamples\ncan_build([0, 1, 2, 2, 3, 0, 0, 0, 1, 1], [123, 444, 92]) ➞ True\n\nYou have: one 1",
    "tags": [
      "arrays",
      "higher_order_functions",
      "loops",
      "validation"
    ],
    "title": "Can You Make the Numbers?"
  },
  {
    "_id": "JQnFS4sEoEFX4vP3q",
    "difficulty": 2.122448979591837,
    "language": "python3",
    "summary": "Mubashir needs your help in a simple task of multiplication of elements in a given list.\n\nCreate a function which takes a list of integers lst and a positive integer k  and returns the minimum and maximum possible product of k elements taken from the list. If enough elements are not available in the list, return None.\n\nExamples\nproduct_pair([1, -2, -3, 4, 6, 7",
    "tags": [
      "algorithms",
      "arrays",
      "logic",
      "loops"
    ],
    "title": "A Product Pair"
  },
  {
    "_id": "auLEvdvBT5PRnALvn",
    "difficulty": 2.1228070175438596,
    "language": "python3",
    "summary": "In Mirror Cipher, encoding is done by switching message characters with its mirror opposite character of the key.\n\nCreate a function that takes two arguments; a message and an optional key, and return the encoded message.\n\nThere are some variations on the rules of encipherment. One version of the cipher rules are outlined below:\n\nmessage = \"Mubashir Hassan\"\nke",
    "tags": [
      "algorithms",
      "cryptography",
      "logic",
      "strings"
    ],
    "title": "Mirror Cipher"
  },
  {
    "_id": "7EFFraFvCYCfsdco8",
    "difficulty": 2.123456790123457,
    "language": "python3",
    "summary": "Create a function that decomposes an address string into a list of five substrings:\n\nStreet Number\nStreet Name\nCity Name\nState\nZip Code\n\nExamples\ndecompose_address(\"557 Farmer Rd Corner, MT 59105\")\n➞ [\"557\", \"Farmer Rd\", \"Corner\", \"MT\", \"59105\"]\n\ndecompose_address(\"3315 Vanity St Beverly Hills, CA 90210\")\n➞ [\"3315\", \"Vanity St\", \"Beverly Hills\", \"CA\", \"90210\"]",
    "tags": [
      "strings",
      "regex"
    ],
    "title": "Decompose Address"
  },
  {
    "_id": "3JyZjPzJKrPYBjP6a",
    "difficulty": 2.125,
    "language": "python3",
    "summary": "Create a function that takes number of units consumed by the customer and returns calculated Electricity Bill as per following conditions:\n\nFirst 100 Units will be charged at $1/unit.\nNext 100 Units will be charged at $2/unit.\nNext 100 Units will be charged at $3/unit.\nNext 200 Units will be charged at $4/unit.\nNext Units will be charged at $5/unit.\n10% tax to",
    "tags": [
      "math",
      "numbers",
      "conditions"
    ],
    "title": "Electricity Bill"
  },
  {
    "_id": "E8TSTy4R5eWEkkaKf",
    "difficulty": 2.125,
    "language": "python3",
    "summary": "Create a function that takes a string (IPv4 address in standard dot-decimal format) and returns True if the IP is valid or False if it's not. For information on IPv4 formatting, please refer to the resources in the Resources tab.\n\nExamples\nis_valid(\"1.2.3.4\") ➞ True\n\nis_valid(\"1.2.3\") ➞ False\n\nis_valid(\"1.2.3.4.5\") ➞ False\n\nis_valid(\"123.45.67.89\") ➞ True\n\nis_",
    "tags": [
      "validation",
      "algorithms",
      "regex",
      "strings"
    ],
    "title": "IPv4 Validation"
  },
  {
    "_id": "RBzzMdGPwnpSxCTCs",
    "difficulty": 2.125,
    "language": "python3",
    "summary": "Create a function that returns the count of all bridges in a two-dimensional grid.\n\nBridge B should be counted if:\n\nIt connects from one end of the grid to the one opposite to it.\nIt is unobstructed.\n\nExample\n\"#########/#       #/#   #   #/#   #   #/#### ####/#   #   #/#   #   #/#       #/#########\"\n\nIn this case the number 4 is returned because, when unravele",
    "tags": [
      "strings",
      "loops"
    ],
    "title": "Broken Bridge II"
  },
  {
    "_id": "vaCKHWRA9tf98EYLm",
    "difficulty": 2.125,
    "language": "python3",
    "summary": "Write a function that takes a number n and a string s as arguments and returns the nth term of the Red/Yellow sequence. s will ask the function what to return, all, red or yellow.\n\nalt text\n\nExamples\nry_seq(2, \"all\") ➞ 5\n\nry_seq(3, \"yellow\") ➞ 8\n\nry_seq(28, \"red\") ➞ 55\n\nry_seq(1, \"blue\") ➞ False\n\nNotes\nIf s is not \"all\", \"yellow\" or \"red\", return False.\nIf n i",
    "tags": [
      "algebra",
      "math",
      "numbers"
    ],
    "title": "The Red/Yellow Sequence"
  },
  {
    "_id": "KMuRsbTKgZXoedMRN",
    "difficulty": 2.1267605633802815,
    "language": "python3",
    "summary": "Suppose a pair of identical characters serve as book ends for all characters in between them. Write a function that returns the total number of unique characters (books, so to speak) between all pairs of book ends.\n\nThe function will look like:\n\ncountuniquebooks(\"stringSequence\", \"bookEnd\")\n\nExamples\ncountuniquebooks(\"AZYWABBCATTTA\", \"A\") ➞ 4\n\n1st bookend grou",
    "tags": [
      "strings",
      "regex",
      "higher_order_functions"
    ],
    "title": "Books and Book Ends"
  },
  {
    "_id": "HZZp3NCaZ5r67zboj",
    "difficulty": 2.1272727272727274,
    "language": "python3",
    "summary": "Musical instruments have a range of notes to play, some instruments having a much larger range than others.\n\nGiven the following ranges for the instrument, create a function that returns True if a given note is within a given instrument's range. Otherwise, return False.\n\nInstrument | Range\n--- | ---\nPiccolo | D4-C7\nTuba | D1-F4\nGuitar | E3-E6\nPiano | A0-C8\nVio",
    "tags": [
      "conditions",
      "validation"
    ],
    "title": "Musical Instrument Note Ranges"
  },
  {
    "_id": "HsgZzcjC6h62u9D2B",
    "difficulty": 2.1272727272727274,
    "language": "python3",
    "summary": "In recreational mathematics, a square array of numbers, usually positive integers, is called a magic square if the sums of the numbers in each row, each column, and both main diagonals are the same.\n\nCreate a function that takes a square list as an argument and returns a Boolean (if it is: True, if it isn't: False).\n\nExamples\nismagicsquare([\n  [2, 7, 6],\n  [9,",
    "tags": [
      "arrays",
      "interview",
      "loops",
      "math"
    ],
    "title": "Magic Square"
  },
  {
    "_id": "fEwyy78jfqSfj5c2k",
    "difficulty": 2.127450980392157,
    "language": "python3",
    "summary": "A perfect number is a number that is equal to the sum of all its proper (non-self) divisors. Take 6 for example:\n6 = 1 + 2 + 3\n\nA number that is equal to the sum of all its proper divisors -- provided that one of them is negative -- is not quite perfect, but admirable.\n\nTo illustrate. The proper divisors of 12 are 1, 2, 3, 4, 6, totalling 16. However, if 2 is",
    "tags": [
      "math",
      "numbers",
      "validation",
      "algorithms"
    ],
    "title": "Not Quite Perfect"
  },
  {
    "_id": "AN6TWQvfshAt8x3wk",
    "difficulty": 2.127659574468085,
    "language": "python3",
    "summary": "Create a function brackets() that takes a string and checks that the brackets in the math expression are correct. The function should return True or False.\n\nExamples\nbrackets(\"(a*(b-c)..... )\") ➞ True\n\nbrackets(\")(a-b-45/7*(a-34))\") ➞ False\n\nbrackets(\"sin(90...)+.............cos1)\") ➞ False\n\nNotes\nThe string may not contain brackets, then return True.\nString m",
    "tags": [
      "strings",
      "logic",
      "validation"
    ],
    "title": "Clear Brackets"
  },
  {
    "_id": "tDswMNY7X9h7tyTS4",
    "difficulty": 2.127659574468085,
    "language": "python3",
    "summary": "Mubashir was reading about Pascal's triangle on Wikipedia.\n\nIn mathematics, Pascal's triangle is a triangular array of the binomial coefficients that arises in probability theory, combinatorics, and algebra.\n\nMubashir\n\nFormula for Pascal's triangle is given by:\n\nMubashir\n\nwhere n denotes a row of the triangle, and k is the position of a term in the row.\n\nCreat",
    "tags": [
      "math",
      "numbers",
      "algebra",
      "algorithms"
    ],
    "title": "Pascal's Triangle"
  },
  {
    "_id": "hTfzPzgNvf4bGphH8",
    "difficulty": 2.127906976744186,
    "language": "python3",
    "summary": "Write a function that receives the time in 12-hour AM/PM format and returns a string representation of the time in military (24-hour) format.\n\nExamples\nconvert_time(“07:05:45PM”) ➞ “19:05:45”\n\nconvert_time(“12:40:22AM”) ➞ “00:40:22”\n\nconvert_time(“12:45:54PM”) ➞ “12:45:54”\n\nNotes\nMidnight is 12:00:00AM on a 12-hour clock, and 00:00:00 on a 24-hour clock.\nNoon ",
    "tags": [
      "strings",
      "numbers",
      "dates"
    ],
    "title": "24-Hour Time"
  },
  {
    "_id": "nEP2PymH3uZtgAXwd",
    "difficulty": 2.128205128205128,
    "language": "python3",
    "summary": "This is a reverse coding challenge. Normally you're given explicit directions with how to create a function. Here, you must generate your own function to satisfy the relationship between the inputs and outputs.\n\nYour task is to create a function that, when fed the inputs below, produce the sample outputs shown.\n\nExamples\n\"hello\" ➞ [4, 1, 3, 3, 1]\n\n\"maybe\" ➞ [4",
    "tags": [
      "arrays",
      "strings"
    ],
    "title": "Reverse Coding Challenge #4"
  },
  {
    "_id": "y5WQ54rzwEg3iga9f",
    "difficulty": 2.128205128205128,
    "language": "python3",
    "summary": "For this question, treat people as existing only on integers.\n\nTwo ice cream stands: A and B each occupy a spot on the beach, from [0, 100]. Their positions are represented with coordinates (A, B). One position could be:\n\n[32, 69]\n\nPeople are distributed equally from [0, 100], and will purchase ice cream  from the stand closest to them.\n\nFor (A, B) above, we h",
    "tags": [
      "arrays",
      "math"
    ],
    "title": "Ice Cream Stand"
  },
  {
    "_id": "s2NZBSsYDzQKCJa3z",
    "difficulty": 2.1285714285714286,
    "language": "python3",
    "summary": "The Fibonacci sequence, as you know, is generated by iterative addition of the sum of the last two elements of the sequence to the end of the sequence, starting with [0, 1].\n\nFibonacci = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, …]\n\nThe iccanobiF sequence (see Resources tab for more info) is generated in a similar way — except that the digits of the last",
    "tags": [
      "math",
      "loops",
      "numbers"
    ],
    "title": "iccanobiF  Numbers"
  },
  {
    "_id": "dLYhGnWQ5Q8DRmnbR",
    "difficulty": 2.129032258064516,
    "language": "python3",
    "summary": "Create a function that counts the number of digits in a number. Conversion of the number to a string is not allowed, thus, the approach is either recursive or iterative.\n\nExamples\ndigits_count(4666) ➞ 4\n\ndigits_count(544) ➞ 3\n\ndigits_count(121317) ➞ 6\n\ndigits_count(0) ➞ 1\n\ndigits_count(12345) ➞ 5\n\ndigits_count(1289396387328) ➞ 13\n\nNotes\nAll inputs are integers",
    "tags": [
      "numbers",
      "logic"
    ],
    "title": "Count The Digits"
  },
  {
    "_id": "SmM8CSnsTTEF3mhX3",
    "difficulty": 2.1297709923664123,
    "language": "python3",
    "summary": "A word-chain is an array of words, where the next word is formed by changing exactly one letter from the previous word. We do not add or subtract letters from words, only change them.\n\nCreate a function that returns True if an array is a word-chain and False otherwise.\n\nExamples\niswordchain([\"meal\", \"seal\", \"seat\", \"beat\", \"beet\"]) ➞ True\nChange \"m\" in \"meal\" ",
    "tags": [
      "arrays",
      "strings",
      "validation"
    ],
    "title": "Word Chain"
  },
  {
    "_id": "cGB2rkiLYC8jdWn8P",
    "difficulty": 2.130081300813008,
    "language": "python3",
    "summary": "Starting from the left side of an integer, adjacent digits pair up in \"battle\" and the larger digit wins. If two digits are the same, they both lose. A lone digit automatically wins.\n\nCreate a function that returns the victorious digits.\n\nTo illustrate:\nbattle_outcome(578921445) ➞ 7925\n[57]: 7 wins; [89] 9 wins; [21] 2 wins;\n[44] neither wins; 5 (automatically",
    "tags": [
      "numbers",
      "games",
      "loops"
    ],
    "title": "Digits Battle!"
  },
  {
    "_id": "dZpAwipzG3w4NYwDE",
    "difficulty": 2.130081300813008,
    "language": "python3",
    "summary": "You will be given a collection of five cards (representing a player's hand in poker). If your hand contains at least one pair, return a list of two elements: True and the card number of the highest pair (trivial if there only exists a single pair). Else, return False.\n\nExamples\nhighest_pair([\"A\", \"A\", \"Q\", \"Q\", \"6\" ]) ➞ [True, \"A\"]\n\nhighest_pair([\"J\", \"6\", \"3\"",
    "tags": [
      "arrays",
      "conditions",
      "games",
      "loops"
    ],
    "title": "Highest Pair"
  },
  {
    "_id": "rSpNwuYZSjZS6AsMv",
    "difficulty": 2.130081300813008,
    "language": "python3",
    "summary": "Create a function that takes an imgur link (as a string) and extracts the unique id and type. Return an object containing the unique id, and a string indicating what type of link it is.\n\nThe link could be pointing to:\n\nAn album (e.g. http://imgur.com/a/cjh4E)\nA gallery (e.g. http://imgur.com/gallery/59npG)\nAn image (e.g. http://imgur.com/OzZUNMM)\nAn image (dir",
    "tags": [
      "regex",
      "formatting",
      "objects"
    ],
    "title": "Imgur URL Parser"
  },
  {
    "_id": "6Tggg9hG4ZgfnWjBK",
    "difficulty": 2.1320754716981134,
    "language": "python3",
    "summary": "The general form of the equation of a circle is x²+y²+ax+by+c=0 where a, b, and c are constants.\n\nCreate a function that takes numbers a, b and c as arguments, and returns a list [(xc, yc), r] where (xc, yc) is the center and r is the radius.\n\nExamples\ncircle(-4, -6, -12) ➞ [(2, 3), 5]\n\ncircle(8, -2, -32) ➞ [(-4, 1), 7]\n\ncircle(16, 4, 67) ➞ [(-8, -2), 1]\n\nNote",
    "tags": [
      "algebra",
      "math",
      "geometry"
    ],
    "title": "Finding the Center and Radius of a Circle"
  },
  {
    "_id": "j2HauiSdDadkjxjsQ",
    "difficulty": 2.1324503311258276,
    "language": "python3",
    "summary": "In the class Employee, implement the instance attributes as firstname, lastname and salary.\n\nCreate the method from_string() which parses a string containing these attributes and assigns them to the correct properties. Properties will be separated by a dash.\n\nExamples\nemp1 = Employee(\"Mary\", \"Sue\", 60000)\nemp2 = Employee.from_string(\"John-Smith-55000\")\nemp1.fi",
    "tags": [
      "objects",
      "classes",
      "language_fundamentals"
    ],
    "title": "Employee Parsing"
  },
  {
    "_id": "7AQgJookgCdbom2Zd",
    "difficulty": 2.133663366336634,
    "language": "python3",
    "summary": "Create a function that takes a string of words and moves the first letter of each word to the end of it, then adds 'ay' to the end of the word. This is called \"Pig Latin\" and it gets more complicated than the rules in this particular challenge. I've intentionally kept things simple, otherwise this would turn into an extremely tedious challenge.\n\nMove the first",
    "tags": [
      "algorithms",
      "strings",
      "formatting"
    ],
    "title": "Basic Pig Latin Translation"
  },
  {
    "_id": "G2hLjbHqwCo9TaS6T",
    "difficulty": 2.133720930232558,
    "language": "python3",
    "summary": "Create a function that reverses letters in a string but keeps digits in their current order.\n\nExamples\nreverse(\"ab89c\") ➞ \"cb89a\"\n\nreverse(\"jkl5mn923o\") ➞ \"onm5lk923j\"\n\nreverse(\"123a45\") ➞ \"123a45\"\n\nNotes\nN/A",
    "tags": [
      "strings",
      "logic",
      "formatting",
      "loops"
    ],
    "title": "Reverse Letters, Keep Numbers in Place"
  },
  {
    "_id": "KFKziCxeTiCLfzMao",
    "difficulty": 2.1339285714285716,
    "language": "python3",
    "summary": "Given the complete factorization of a number, create a function that converts this list of factors to a string.\n\nTo illustrate: 24's complete factorization is [2, 2, 2, 3], which should be converted to \"2^3 x 3\".\n\nExamples\nstring_factor([2, 2, 2, 3, 3]) ➞ \"2^3 x 3^2\"\n\nstring_factor([2, 7]) ➞ \"2 x 7\"\n\nstring_factor([2, 3, 3]) ➞ \"2 x 3^2\"\n\nNotes\nFactors should b",
    "tags": [
      "arrays",
      "strings",
      "loops",
      "conditions"
    ],
    "title": "String Factoring"
  },
  {
    "_id": "5XNKfyxBosjSXCWLn",
    "difficulty": 2.134831460674157,
    "language": "python3",
    "summary": "In this challenge, you have to establish if a positive integer is a Modest number, accordingly to the following algorithm:\nDivide the number into two left and right partitions.\nFor each combination of left and right parts, you have to check if a condition is true: the remainder of the number divided by the right part is equal to the left part.\nIf at least a co",
    "tags": [
      "numbers",
      "algorithms",
      "loops",
      "validation"
    ],
    "title": "The Humble Sequence of the Modest Numbers"
  },
  {
    "_id": "pboAYDuTv7ziJgtxC",
    "difficulty": 2.1349693251533743,
    "language": "python3",
    "summary": "A briefcase has a 4-digit rolling-lock. Each digit is a number from 0-9 that can be rolled either forwards or backwards.\n\nCreate a function that returns the smallest number of turns it takes to transform the lock from the current combination to the target combination. One turn is equivalent to rolling a number forwards or backwards by one.\n\nTo illustrate:\n\ncur",
    "tags": [
      "arrays",
      "higher_order_functions"
    ],
    "title": "Briefcase Lock"
  },
  {
    "_id": "P8YXBzJNysQAi8ePr",
    "difficulty": 2.1354166666666665,
    "language": "python3",
    "summary": "In this challenge, you have to establish if the digits of a given number form a sequence (ascending or descending).\n\nGiven an integer n, implement a function that returns a string:\n\n\"Metadrome\" if the digits of n form an ascending sequence without repeating digits.\n\"Plaindrome\" if the digits of n form an ascending sequence with repeating digits.\n\"Katadrome\" if",
    "tags": [
      "numbers",
      "sorting",
      "conditions",
      "validation"
    ],
    "title": "Digitaldrome"
  },
  {
    "_id": "auryyL7A5qFmmoekT",
    "difficulty": 2.1354166666666665,
    "language": "python3",
    "summary": "This is a method commonly taught in primary schools, used to verify the correctness of an operation; usually (as in this exercise) the multiplication.\n\nEvery number involved in the multiplication is replaced by its digital root (reiterated sum of its digits until a single-digit number is obtained). After this, the digital roots of factors are multiplied, and a",
    "tags": [
      "math",
      "numbers",
      "logic",
      "language_fundamentals"
    ],
    "title": "Casting Out Nines"
  },
  {
    "_id": "yi2RNQshfhnJvDMSW",
    "difficulty": 2.1358024691358026,
    "language": "python3",
    "summary": "Write a function that squishes a list from the left or the right.\n\nExamples\nsquish([1, 2, 3, 4, 5], \"left\")\n➞ [[1, 2, 3, 4, 5], [3, 3, 4, 5], [6, 4, 5], [10, 5], [15]]\n\nsquish([1, 2, 3, 4, 5], \"right\")\n➞ [[1, 2, 3, 4, 5], [1, 2, 3, 9], [1, 2, 12], [1, 14], [15]]\n\nsquish([1, 0, 2, -3], \"left\")\n➞ [[1, 0, 2, -3], [1, 2, -3], [3, -3], [0]]\n\nsquish([1, 0, 2, -3], \"",
    "tags": [
      "arrays",
      "higher_order_functions"
    ],
    "title": "Squishing a List"
  },
  {
    "_id": "SGnrEgcwoAFm5jTcD",
    "difficulty": 2.1363636363636362,
    "language": "python3",
    "summary": "Mubashir needs your help to find out Increasing and Decreasing numbers for a given range.\n\nIncreasing Numbers\nNumbers whose digits, when read from left to right, are never less than the previous digit. See below some examples of increasing numbers:\n\n1111\n123456\n125788999\n\nDecreasing Numbers\nNumbers whose digits, when read from left to right, are never greater",
    "tags": [
      "algorithms",
      "numbers",
      "loops",
      "logic"
    ],
    "title": "Increasing or Decreasing Numbers"
  },
  {
    "_id": "Eou5gLqeXZu5mKjeA",
    "difficulty": 2.1365638766519823,
    "language": "python3",
    "summary": "Create a function that takes a string and replaces every nth instance of oldchar with newchar. Your function will have four parameters:\n\ntxt — The original input text to be processed.\nnth — The nth instance to be replaced.\nold_char — The character being replaced.\nnewchar — The character replacing oldchar.\n\nIn other words, if txt is \"abababa\", nth is 3, oldchar",
    "tags": [
      "algorithms",
      "strings",
      "formatting",
      "regex"
    ],
    "title": "Replace Every Nth Instance of a Character"
  },
  {
    "_id": "7kZhB4FpJfYHnQYBq",
    "difficulty": 2.1367521367521367,
    "language": "python3",
    "summary": "Create a function that takes an array of three numbers and returns the Least Common Multiple (LCM).\n\nThe LCM is the smallest positive number that is a multiple of two or more numbers. In our case, we are dealing with three numbers.\n\nMultiples of 3 are: 3, 6, 9, 12, and so on.\nMultiples of 4 are: 4, 8,12, and so on.\nMultiples of 12 are: 12, and so on.\n\nThus, th",
    "tags": [
      "arrays",
      "algorithms",
      "numbers",
      "math"
    ],
    "title": "Find the LCM of Three Numbers"
  },
  {
    "_id": "YkpJGRyZST63bPLXk",
    "difficulty": 2.1392405063291138,
    "language": "python3",
    "summary": "Your open-plan office building has a scrolling message screen on the far wall. One day, you notice that the messages are starting to glitch. Some of the lower case letters are being replaced by their position in the alphabet (\"a\" = 1, \"b\" = 2, ..., \"z\" = 26). Given the glitched text, return the corrected message.\n\nExamples\nmessage_glitch(\"T21e19d1y's m1r11e20i",
    "tags": [
      "strings",
      "cryptography",
      "formatting"
    ],
    "title": "Message Screen Glitch"
  },
  {
    "_id": "rAZ27AY2X7a6r5KWp",
    "difficulty": 2.13953488372093,
    "language": "python3",
    "summary": "What is the percentage you can score on a test, which singlehandedly brings down the class average by 5%? Given a list of your classmates scores, create a function that returns the answer. Round to the nearest percent.\n\nExamples\ntakedownaverage([\"95%\", \"83%\", \"90%\", \"87%\", \"88%\", \"93%\"]) ➞ \"54%\"\n\ntakedownaverage([\"10%\"]) ➞ \"0%\"\n\ntakedownaverage([\"53%\", \"79%\"])",
    "tags": [
      "arrays",
      "math",
      "numbers"
    ],
    "title": "Bring Down the Class Average"
  },
  {
    "_id": "yC2HzHNRymWQmCj6N",
    "difficulty": 2.13953488372093,
    "language": "python3",
    "summary": "Mubashir needs your help in a simple task.\n\nGiven a list of integers lst and an integer k, find the lowest positive integer x so that exactly k elements of the given list are less than or equal to x. Return None if the condition does not match.\n\nSee below examples for a better understanding:\n\nExamples\nlessorequal([3, 7, 6, 1, 10, 3, 20], 4) ➞ 6\n1, 3, 3, 6 = 4",
    "tags": [
      "numbers",
      "math",
      "logic",
      "interview"
    ],
    "title": "Less or Equal"
  },
  {
    "_id": "LiCPx79xnbH22MSt9",
    "difficulty": 2.14,
    "language": "python3",
    "summary": "Create a function that takes an even number (will always be greater than 4) and return a list of all pairs of prime numbers which add up to the given number.\n\nExamples\nprimepairlist(10) ➞ [\"3+7\", \"5+5\"]\n\nprimepairlist(50) ➞ [\"3+47\", \"7+43\", \"13+37\", \"19+31\"]\n\nprimepairlist(100) ➞ [\"3+97\", \"11+89\", \"17+83\", \"29+71\", \"41+59\", \"47+53\"]\n\nNotes\nN/A",
    "tags": [
      "math",
      "numbers",
      "arrays"
    ],
    "title": "Add up to Even Number with Primes"
  },
  {
    "_id": "4gwtMXd9r5WXx7iBR",
    "difficulty": 2.140625,
    "language": "python3",
    "summary": "In this challenge you will be given a nested list, such as the following:\n\n[1, [2, 3], [4, [5, 6]], [7, [8, [9, 0]]]]\n\nJust look at all those brackets... so confusing!\n\nThe goal is simple: write a function that turns a nested list as above into its flattened version, which in this example is:\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n\nExamples\nflatten([[6, 7], [4, 5]])",
    "tags": [
      "language_fundamentals",
      "arrays",
      "strings"
    ],
    "title": "Flatten the Nested List"
  },
  {
    "_id": "yCGJEcij4LaXLcKXE",
    "difficulty": 2.141025641025641,
    "language": "python3",
    "summary": "On a vacation abroad, you see a souvenir shop and decide to head inside. There are snow globes, postcards, fridge magnets and all the other goodies you'd typically find.\n\nGiven a list of prices of things in the store and the amount of money you have, return the maximum number of items you could possibly buy.\n\nExamples\nmaximum_items([\"$1\", \"$1\", \"$2\"], \"$3\") ➞",
    "tags": [
      "loops",
      "arrays",
      "algorithms"
    ],
    "title": "Souvenir Shop"
  },
  {
    "_id": "sG3RY2QQ2qtarAGQD",
    "difficulty": 2.1411764705882352,
    "language": "python3",
    "summary": "Write a function that removes the last vowel in each word in a sentence.\n\nExamples\nremovelastvowel(\"Those who dare to fail miserably can achieve greatly.\")\n➞ \"Thos wh dar t fal miserbly cn achiev gretly.\"\n\nremovelastvowel(\"Love is a serious mental disease.\")\n➞ \"Lov s  serios mentl diseas\"\n\nremovelastvowel(\"Get busy living or get busy dying.\")\n➞ \"Gt bsy livng r",
    "tags": [
      "formatting",
      "strings"
    ],
    "title": "Remove the Last Vowel"
  },
  {
    "_id": "LF6LyPmjcuLnSjgiL",
    "difficulty": 2.141732283464567,
    "language": "python3",
    "summary": "Create a function that takes two strings and determines if an anagram of the first string is in the second string. Anagrams of \"bag\" are \"bag\", \"bga\", \"abg\", \"agb\", \"gab\", \"gba\". Since none of those anagrams are in \"grab\", the answer is false. A \"g\", \"a\", and \"b\" are in the string \"grab\", but they're split up by the \"r\".\n\nExamples\nanastrstr(\"car\", \"race\") ➞ Tr",
    "tags": [
      "strings",
      "validation",
      "regex"
    ],
    "title": "Find an Anagram of a String in Another String"
  },
  {
    "_id": "G5FXsvc8hD6DqnCKx",
    "difficulty": 2.142857142857143,
    "language": "python3",
    "summary": "Create a function that converts 12-hour time to 24-hour time or vice versa. Return the output as a string.\n\nExamples\nconvert_time(\"12:00 am\") ➞ \"0:00\"\n\nconvert_time(\"6:20 pm\") ➞ \"18:20\"\n\nconvert_time(\"21:00\") ➞ \"9:00 pm\"\n\nconvert_time(\"5:05\") ➞ \"5:05 am\"\n\nNotes\nA 12-hour time input will be denoted with an am or pm suffix.\nA 24-hour input time contains no suffi",
    "tags": [
      "strings",
      "dates",
      "formatting"
    ],
    "title": "12 vs 24 Hours"
  },
  {
    "_id": "e6JrHM6LuyAdeQrLm",
    "difficulty": 2.142857142857143,
    "language": "python3",
    "summary": "On a crime scene, there are many pieces of evidence that point to a particular person having the murder weapon and motive to kill poor old Tom (although not poor at all).\n\nCreate a function that takes phrases/words as clues and forms a sentence formatted to have the murder's name, verb, \"Tom as\", Reason.\n\nSn|Weapon|Verb to be used|Reason\n:---|:---|:---|:---\n1|",
    "tags": [
      "strings",
      "formatting"
    ],
    "title": "No Sh*t Sherlock"
  },
  {
    "_id": "kjQGrpw9gfhMhPMF4",
    "difficulty": 2.144230769230769,
    "language": "python3",
    "summary": "Strings can be segregated into both their letter and digit components.\n\nA double palindrome is when a string's letter component and digit component are both palindromes.\nA single-palindrome is when either (but not both) the letter component or the digit component are palindromes.\n\nTo illustrate:\n\"cab97ac79\"\ndouble-palindrome: \"cabac\" and \"9779\" are both palind",
    "tags": [
      "strings",
      "regex"
    ],
    "title": "Double Palindromes"
  },
  {
    "_id": "NfhWZbpcyydySzXeq",
    "difficulty": 2.144578313253012,
    "language": "python3",
    "summary": "When two numbers are added together, the strange Lunar arithmetic is used on the Moon. The Lunar sum of two numbers is not determined by the sum of their individual digits, but by the highest digit of the two taken into account at each step, in columnar form.\n\n2  4  6  +\n3  1  7  =\n\n3  4  7\n\n3 > 2 | 4 > 1 | 7 > 6\n\n1  3  4  +\n   5  4  =\n\n1  5  4\n\n1 > 0 | 5 > 3 ",
    "tags": [
      "math",
      "numbers",
      "arrays"
    ],
    "title": "Return the Sum of Two Numbers (on the Moon)"
  },
  {
    "_id": "2EK5GMSqSEv436Tc8",
    "difficulty": 2.1451612903225805,
    "language": "python3",
    "summary": "Write a function that returns the minimum number of swaps to create an alternating binary string. The input will have the same number of zeroes and ones.\n\nExamples\nmin_swaps(\"101010\") ➞ 0\n\nmin_swaps(\"10001110\") ➞ 1\nSwap the 0 at index 2 for the 1 at index 5.\n\nmin_swaps(\"11110000\") ➞ 2\n\nNotes\nN/A",
    "tags": [
      "strings",
      "loops"
    ],
    "title": "Minimum Swaps to Alternate a Binary String"
  },
  {
    "_id": "tbEwDviZBadDSeGSz",
    "difficulty": 2.1463414634146343,
    "language": "python3",
    "summary": "Given is a dict with the Morse alphabet, added a code for space between words. Write a function, which takes a string, either out of letters or out of Morse code from the dictionary. The function outputs an encrypted letter string of a decrypted Mmorse code.\n\nExamples\nmorse(\"F Mueller\") ➞ \"..-. ..... -- ..- . .-.. .-.. . .-.\"\n\nmorse(\".-.. --- .... -. ..... ..-",
    "tags": [
      "data_structures",
      "cryptography"
    ],
    "title": "Morse Alphabet"
  },
  {
    "_id": "LMnRCtjk4RQbX3DXw",
    "difficulty": 2.146788990825688,
    "language": "python3",
    "summary": "A no-intersecting ones matrix is one where no two ones exist on the same row or column.\n\nTo illustrate:\n[\n  [1, 0, 0, 0, 0],\n  [0, 1, 0, 0, 0],\n  [0, 0, 0, 1, 0],\n  [0, 0, 0, 0, 0],\n  [0, 0, 1, 0, 0]\n]\n\nThe list below is not a non-intersecting ones matrix:\n\n[\n  [1, 0, 0, 0, 0],\n  [0, 1, 0, 0, 0],\n  [0, 0, 0, 1, 0],\n  [0, 1, 0, 0, 0],\n  [0, 0, 0, 0, 0]\n]\n\n// Co",
    "tags": [
      "arrays",
      "validation",
      "higher_order_functions"
    ],
    "title": "No Intersecting Ones"
  },
  {
    "_id": "yuC2mGkipHza74nFL",
    "difficulty": 2.15,
    "language": "python3",
    "summary": "Given a number n, return whether it can be expressed as the sum of two powers of two. That means the sum of these types of 'doubling' numbers 1, 2, 4, 8, 16, 32, etc ...\n\nExamples\ntwopowersof_two(9) ➞ True\nCan be expressed as 1 + 8 (2^0 + 2^3).\n\ntwopowersof_two(32) ➞ True\nCan be expressed as 16 + 16 (2^4 + 2^4)\n\ntwopowersof_two(68) ➞ True\nCan be expressed as 6",
    "tags": [
      "math",
      "numbers",
      "algorithms"
    ],
    "title": "Two Powers of Two"
  },
  {
    "_id": "CoSFaDzSxrSjsZ8F6",
    "difficulty": 2.1515151515151514,
    "language": "python3",
    "summary": "Write a function that, given the start startnum and end endnum values, return a list containing all the numbers inclusive to that range. See examples below.\n\nExamples\ninclusive_list(1, 5) ➞ [1, 2, 3, 4, 5]\n\ninclusive_list(2, 8) ➞ [2, 3, 4, 5, 6, 7, 8]\n\ninclusive_list(10, 20) ➞ [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n\ninclusive_list(17, 5) ➞ [17]\n\nNotes\nTh",
    "tags": [
      "recursion",
      "arrays",
      "sorting"
    ],
    "title": "Recursion: Inclusive List Ranges"
  },
  {
    "_id": "LPTb7HCWzofKdfM6S",
    "difficulty": 2.152,
    "language": "python3",
    "summary": "Create a function that takes a list and returns the most frequently occurring element contained within it.\n\nExamples\nfind_frequent([3, 7, 3]) ➞ 3\n\nfind_frequent([None, \"hello\", True, None]) ➞ None\n\nfind_frequent([False, \"up\", \"down\", \"left\", \"right\", True, False]) ➞ False\n\nNotes\nN/A",
    "tags": [
      "arrays",
      "loops"
    ],
    "title": "Find the Most Frequent Element in a List"
  },
  {
    "_id": "ZFLmA6Xjt8gNxg4KR",
    "difficulty": 2.1522842639593907,
    "language": "python3",
    "summary": "Create a function that takes a list of integers (positive / negative) and return the sum of the numbers that repeat consecutively (return your result as a list).\n\nExamples\nsum_consecutives([0, 7, 7, 7, 5, 4, 9, 9, 0]) ➞ [0, 21, 5, 4, 18, 0]\n\nsum_consecutives([4, 4, 5, 6, 8, 8, 8]) ➞ [8, 5, 6, 24]\n\nsum_consecutives([-5, -5, 7, 7, 12, 0]) ➞ [-10, 14, 12, 0]\n\nNot",
    "tags": [
      "arrays",
      "numbers",
      "math"
    ],
    "title": "Sum Consecutive Integers"
  },
  {
    "_id": "gXENPxHbrqLEurbWS",
    "difficulty": 2.154471544715447,
    "language": "python3",
    "summary": "Create a function that returns the prime factorization of an integer as a sorted list of tuples. Include the multiplicity of each prime in the tuples:\n\n\\[(prime\\0, mult\\0), ..., (prime\\k, mult\\k)]\nwhere prime\\0 < prime\\1 < ... < prime\\_k\n\nExamples\nfactorize(4) ➞ [(2, 2)]\n\nfactorize(10) ➞ [(2, 1), (5, 1)]\n\nfactorize(60) ➞ [(2, 2), (3, 1), (5, 1)]\n\nNotes\nDon't w",
    "tags": [
      "algorithms",
      "math",
      "numbers"
    ],
    "title": "Prime Factorization"
  },
  {
    "_id": "gSGzRjyB3vC6bnMaZ",
    "difficulty": 2.154471544715447,
    "language": "python3",
    "summary": "Write a function that returns True if exactly one word in the list differs in length from the rest. Return False in all other cases.\n\nExamples\noddoneout([\"silly\", \"mom\", \"let\", \"the\"]) ➞ True\n\noddoneout([\"swanky\", \"rhino\", \"moment\"]) ➞ True\n\noddoneout([\"the\", \"them\", \"theme\"]) ➞ False\n\noddoneout([\"very\", \"to\", \"an\", \"some\"]) ➞ False\n\nNotes\nThe length of the li",
    "tags": [
      "arrays",
      "validation"
    ],
    "title": "Odd One Out"
  },
  {
    "_id": "tEgFCtLjRZKaGokzJ",
    "difficulty": 2.1555555555555554,
    "language": "python3",
    "summary": "Write a function that converts a string into star shorthand. If a character is repeated n times, convert it into character*n.\n\nExamples\ntostarshorthand(\"abbccc\") ➞ \"ab2c3\"\n\ntostarshorthand(\"77777geff\") ➞ \"75gef2\"\n\ntostarshorthand(\"abc\") ➞ \"abc\"\n\ntostarshorthand(\"\") ➞ \"\"\n\nNotes\nLeave lone occurrences of a character as is.\nReturn an empty string if given an empt",
    "tags": [
      "strings",
      "regex",
      "formatting",
      "loops"
    ],
    "title": "Star Shorthand"
  },
  {
    "_id": "TQfjTjj383kLhPnjE",
    "difficulty": 2.15625,
    "language": "python3",
    "summary": "Given a tic-tac-toe board, create a function that determines whether X won, O won, or there's a tie.\n\nThe board is represented as a 2-dimensional list. A board does not have to be completely filled. Blank squares are represented with the letter \"B\". For each board, X begins and O goes second.\n\nExamples\nwho_won([\n  [\"X\", \"O\", \"B\"],\n  [\"B\", \"X\", \"O\"],\n  [\"B\", \"B",
    "tags": [
      "arrays",
      "games"
    ],
    "title": "Tic Tac Toe"
  },
  {
    "_id": "w53kCGX4JSpH8py9o",
    "difficulty": 2.15625,
    "language": "python3",
    "summary": "Create a function that takes a list of player 1's words p1 and a list of player 2's words p2. Player 1 will always play first and will give a word. Player 2 must then give another word that begins with the end letter of the last word used. The first player to use a duplicate word, or use a word that does not begin with the last word's end, loses.\n\nExamples\nwor",
    "tags": [
      "strings",
      "arrays",
      "games"
    ],
    "title": "Word Game Using First/Last Letter"
  },
  {
    "_id": "cwsSZhKx3QCduei7y",
    "difficulty": 2.1578947368421053,
    "language": "python3",
    "summary": "Write a function containing an expression, in terms of n, for the nth term of the sequence that has the following first six terms:\n\n2, 6, 13, 23, 36, 52 ...and the sequence continues.\n\nExamples\nseq(1) ➞ 2\n\nseq(2) ➞ 6\n\nseq(6) ➞ 52\n\nNotes\nThe parameter n is always >= 0.",
    "tags": [
      "math",
      "numbers",
      "loops"
    ],
    "title": "The Nth Term of the Sequence"
  },
  {
    "_id": "brJHwyof9NWpXFgS8",
    "difficulty": 2.1584158415841586,
    "language": "python3",
    "summary": "Create a function bill_count that takes two arguments. The first argument is the amount of money the user has and the second is the list of money bills available. Return the minimum count of money bills required to equal the user money amount.\n\nbill_count(1001, [1, 10, 20])\nUser Money = €1000 and Bills Available = [€1, €10, €20]\n\nbill_count(1001, [1, 10, 20])",
    "tags": [
      "logic",
      "math",
      "numbers"
    ],
    "title": "Money Bill Count"
  },
  {
    "_id": "JEeb2htN9GKMb79wZ",
    "difficulty": 2.1587301587301586,
    "language": "python3",
    "summary": "Imagine you have three numbers: a, b, and c. c is equal to either a or b, but you don't know which one. Your task is to create a function that returns whatever number c isn't, out of a and b. So, if c is equal to a, return b, and if c is equal to b, return a. Here's what makes this challenge difficult: you cannot use any if statements.\n\nExamples\nswap(1, 0, 0)",
    "tags": [
      "bit_operations",
      "control_flow",
      "language_fundamentals"
    ],
    "title": "Swap the Numbers"
  },
  {
    "_id": "xekTcdZjaRMzvvova",
    "difficulty": 2.1610169491525424,
    "language": "python3",
    "summary": "Write a function that returns True if it is possible to build a string with a particular scrabble hand.\n\nExamples\ncan_build(\"quavers\", [\"S\", \"U\", \"Q\", \"V\", \"A\", \"#\", \"#\"]) ➞ True\n\ncan_build(\"move\", [\"M\", \"U\", \"T\", \"V\", \"E\", \"J\", \"#\"]) ➞ True\n\ncan_build(\"move\", [\"M\", \"U\", \"T\", \"V\", \"E\", \"J\", \"S\"]) ➞ False\n\ncan_build(\"sharp\", [\"S\", \"K\", \"H\", \"#\", \"#\", \"F\", \"F\"])",
    "tags": [
      "strings",
      "validation",
      "games"
    ],
    "title": "Wild Tiles"
  },
  {
    "_id": "Be4gGbqXMcjpkhfQg",
    "difficulty": 2.161290322580645,
    "language": "python3",
    "summary": "Create a function that converts dates from one of five string formats:\n\n\"January 9, 2019\" (MM D, YYYY)\n\"Jan 9, 2019\" (MM D, YYYY)\n\"01/09/2019\"  (MM/DD/YYYY)\n\"01-09-2019\"  (MM-DD-YYYY)\n\"01.09.2019\" (MM.DD.YYYY)\n\nThe return value will be a list formatted like: [MM, DD, YYYY], where MM, DD, and YYYY are all integers. Using the examples above:\n\nExamples\nconvert_da",
    "tags": [
      "strings",
      "regex",
      "dates"
    ],
    "title": "Reformatting the Date"
  },
  {
    "_id": "Hmx32xScJEm9mMH3B",
    "difficulty": 2.161764705882353,
    "language": "python3",
    "summary": "Create a function that takes a list of date dictionaries and return the \"longest streak\" (i.e. longest number of consecutive days in a row).\n\nExample\nlongest_streak([\n  {\n    \"date\": \"2019-09-18\"\n  },\n  {\n    \"date\": \"2019-09-19\"\n  },\n  {\n    \"date\": \"2019-09-20\"\n  },\n  {\n    \"date\": \"2019-09-26\"\n  },\n  {\n    \"date\": \"2019-09-27\"\n  },\n  {\n    \"date\": \"2019-09-",
    "tags": [
      "dates",
      "objects",
      "loops",
      "games"
    ],
    "title": "Longest Streak"
  },
  {
    "_id": "YifX9gJwnu5MS9brs",
    "difficulty": 2.1627906976744184,
    "language": "python3",
    "summary": "Create a function that given a type of curve will generate a list containing a samples amount of numbers calculated from said curve.\n\nIt's easier to see with a visual representation:\n\ngraph of the 3 curves\n\nIf samples = 3 and curve = \"pow\", we would sample 3 points along the x axis [0, 0.5, 1] and figure out the value of y, in the case of the pow curve the val",
    "tags": [
      "algebra",
      "arrays",
      "math"
    ],
    "title": "Sample Points from a Curve"
  },
  {
    "_id": "GbWjX2zEGvSFeBBoZ",
    "difficulty": 2.1636363636363636,
    "language": "python3",
    "summary": "Create a function that takes a string with at least one sentence in it and returns a string with the part(s) after the comma at the beginning of the sentence(s).\n\nExamples\nreverselegoyoda(\"Hit you with my stick, I shall.\")\n➞ \"I shall hit you with my stick.\"\n\nreverselegoyoda(\"Rejected me, my crush has. Ketamine, I need.\")\n➞ \"My crush has rejected me. I need ket",
    "tags": [
      "strings",
      "formatting"
    ],
    "title": "Reverse LEGO Yoda"
  },
  {
    "_id": "A8wX28kwTyPiz59AJ",
    "difficulty": 2.1639344262295084,
    "language": "python3",
    "summary": "In this challenge, you have to deal with a matrix that is moving from the left to the right by a given amount of times, shifting its items as in a conveyor belt. At the end of the last list inside the matrix, there's a warp tunnel. The warp tunnel made appear the elements pushed through by the shifts at the beginning of the matrix, in the same order as they we",
    "tags": [
      "arrays",
      "data_structures",
      "loops"
    ],
    "title": "Conveyor Belts, Warp Tunnels"
  },
  {
    "_id": "8Eopb7GeRi7YExgwJ",
    "difficulty": 2.164383561643836,
    "language": "python3",
    "summary": "A spoonerism is when the first letters / sounds of two words are transposed onto one another. Create a function that takes a two-word string and performs a spoonerism on the phrase.\n\nExamples\nspoonerise(\"history lecture\") ➞ \"listory hecture\"\n\nspoonerise(\"loud noises\") ➞ \"noud loises\"\n\nspoonerise(\"chow mein\") ➞ \"mow chein\"\n\nspoonerise(\"edabit rules!\") ➞ \"redabi",
    "tags": [
      "strings",
      "conditions",
      "regex"
    ],
    "title": "Spoonerisms"
  },
  {
    "_id": "aFXQoAF8LWkhEcdfK",
    "difficulty": 2.1666666666666665,
    "language": "python3",
    "summary": "Your job is to figure out why Daniel likes Wendy, and some other girls. If you look at the Tests tab you'll notice that Daniel doesn't like many girls.\n\nCreate a function that returns whether he likes her True, or not False.\n\nExamples\ndaniel_likes(\"Imani\") ➞ False\n\ndaniel_likes(\"Margo\") ➞ True\n\ndaniel_likes(\"Sandra\") ➞ False\n\nNotes\nDaniel likes his own name.\nI",
    "tags": [
      "strings",
      "algorithms",
      "numbers",
      "validation"
    ],
    "title": "Daniel Likes Wendy"
  },
  {
    "_id": "izhpciCCMsMgKrsKN",
    "difficulty": 2.1666666666666665,
    "language": "python3",
    "summary": "This number sequence can start with any positive integer n. s is the sum of the individual digits in n. If s divides into n evenly then the next term of the series is n//s. Otherwise the next term is n*s. Eventually the series will reach a dead end with two numbers alternating: 58, 754, 12064, 928, 17632, 928, 17632. This series has a length of 5 with 17632 as",
    "tags": [
      "loops",
      "numbers"
    ],
    "title": "Dead End Number Sequence"
  },
  {
    "_id": "sARz4TDdxCuqK6pja",
    "difficulty": 2.1666666666666665,
    "language": "python3",
    "summary": "Mubashir needs your help to identify the spread of a deadly virus. He can provide you with the following parameters:\n\nA two-dimensional array persons, containing affected persons 'V' and unaffected persons 'P'.\nNumber of hours n, each infected person is spreading the virus to one person up, down, left and right each hour.\n\nYour function should return the updat",
    "tags": [
      "algorithms",
      "arrays",
      "logic",
      "language_fundamentals"
    ],
    "title": "Deadly Virus"
  },
  {
    "_id": "xiB2Y4EzEEkXYQchs",
    "difficulty": 2.168067226890756,
    "language": "python3",
    "summary": "A \"magic square\" is a square divided into smaller squares each containing a number, such that the numbers in each vertical, horizontal, and diagonal row add up to the same value.\n\n3x3 Magic Square\n\nWrite a function that takes a 2D list, checks if it's a magic square and returns either True or False depending on the result.\n\nExamples\nismagicsquare([\n  [8, 1, 6]",
    "tags": [
      "algorithms",
      "arrays",
      "data_structures",
      "loops"
    ],
    "title": "Check Magic Square"
  },
  {
    "_id": "ZSC4mb3kR9EHv7q7a",
    "difficulty": 2.1686746987951806,
    "language": "python3",
    "summary": "Find out if a right-angled triangle can be made given some facts about the shape.\n\nGiven varying information about a shape, create a function that returns True if the shape could be a right-angle triangle and False if not.\nYou will be given a list of numbers and a string stating whether the numbers are angles or sides.\nThe information may indicate more than on",
    "tags": [
      "math",
      "validation",
      "geometry"
    ],
    "title": "Is It a Right-Angled Triangle?"
  },
  {
    "_id": "LEFxqpwii5DRLMZRJ",
    "difficulty": 2.169230769230769,
    "language": "python3",
    "summary": "In this challenge, you have to find all the subsequences of consecutive numbers that, when their numbers are added between them, are equals to the given number.\n\nGiven a positive integer n, implement a function that returns a matrix containing every sequence of consecutive numbers smaller than n, sorted ascendingly by their first term, whose sum is equal to n.",
    "tags": [
      "arrays",
      "loops",
      "numbers"
    ],
    "title": "Make a Number"
  },
  {
    "_id": "97Shytt5nzjX4YWzJ",
    "difficulty": 2.169642857142857,
    "language": "python3",
    "summary": "Write a function that takes a string of brackets and checks whether they're balanced or not.\n\nThe sequence is balanced if:\nIt contains no unmatched brackets.\nThe subset of brackets enclosed within the confines of a matched pair of brackets is also balanced.\n\nExamples\nisBalanced(\"{[()]}\") ➞ True\n\nisBalanced(\"[()]{}\") ➞ True\n\nisBalanced(\"{[([)]]}\") ➞ False\n\nNote",
    "tags": [
      "logic",
      "strings",
      "validation"
    ],
    "title": "Balanced Brackets"
  },
  {
    "_id": "M3qFgRyBpeTFjZbr3",
    "difficulty": 2.1702127659574466,
    "language": "python3",
    "summary": "Create a function that takes a name of a chemical compound as a string and returns the molar mass of the compound. For this challenge only, required data is included below.\n\nData\nH -> 1\nB -> 10\nO -> 16\nS -> 32\nN -> 14\nCl -> 35\n\nWater = \"H2 O\"\nBoricAcid = \"H3 B O3\"\nSulfuricAcid = \"H2 S O4\"\nNitricAcid = \"H N O3\"\nHydroChloricAcid = \"H Cl\"\nExamples\nmolar_mass(\"Sul",
    "tags": [
      "strings",
      "language_fundamentals"
    ],
    "title": "Molar Mass of Chemical Compound"
  },
  {
    "_id": "vLuPSuCWNTuxDJuJt",
    "difficulty": 2.1724137931034484,
    "language": "python3",
    "summary": "Write a function that returns the smallest integer in a list with its corresponding index and its parity. Even though this challenge can be achieved easily with the modulo operator %, index() and min() methods, these have been restricted to augment the challenge's level of difficulty.\n\nOutput Structure\n{\"@index \" + indexofsmallest: smallest_integer, \"parity\":",
    "tags": [
      "arrays",
      "logic",
      "loops"
    ],
    "title": "Parity of the Smallest Integer"
  },
  {
    "_id": "AGgQTPNy6G5cxz4KK",
    "difficulty": 2.173469387755102,
    "language": "python3",
    "summary": "Create a function that takes a binary string and returns the text. The eight bits on the binary string represent 1 character on the ASCII table. For further info, check out the resource tab.\n\nExamples\nbinarytotext(\"01101110011011110110010001100101\") ➞ \"node\"\n\nbinarytotext('0111001001100101011000010110001101110100') ➞ \"react\"\n\nbinarytotext(\"01110000011110010111",
    "tags": [
      "strings",
      "language_fundamentals"
    ],
    "title": "Binary To Text"
  },
  {
    "_id": "u9nd9D3HYcLxNZr7x",
    "difficulty": 2.1782178217821784,
    "language": "python3",
    "summary": "Create a function which returns the indices where the monotonicity of a 1-D list changes. If there are none, return an empty list. A monotonic list is one that is either non-increasing or non-decreasing.\n\nExamples\ngroup_monotonic([0, 1]) ➞ []\n\ngroup_monotonic([0, 2, 1]) ➞ [1]\n\ngroup_monotonic([0, 1, 1, 0]) ➞ [2]\n\nNotes\nTrivially, all points and line-segments a",
    "tags": [
      "algorithms",
      "math"
    ],
    "title": "Group Monotonicity"
  },
  {
    "_id": "jSxo7n5c8J42zrwMB",
    "difficulty": 2.180722891566265,
    "language": "python3",
    "summary": "For math class, Matt needs to find out if a shape can fit inside another shape, based solely on their area. The only problem is, HE SUCKS AT MATH! He has asked you, his older brother, to make a program that will answer all his math questions.\n\nWrite a function that takes two shapes, with different inputs, and returns True if the second shape has an area smalle",
    "tags": [
      "algebra",
      "math",
      "validation",
      "geometry"
    ],
    "title": "Shape in Shape"
  },
  {
    "_id": "4KtBxyNbar9S57x6K",
    "difficulty": 2.1818181818181817,
    "language": "python3",
    "summary": "Create a function that takes a string containing integers as well as other characters and return the sum of the positive integers only.\n\nExamples\npositive_sum(\"-12#-33 13%14&-11\") ➞ 27\n13 + 14 = 27\n\npositive_sum(\"22 13%14&-11-22 13 12 0\") ➞ 74\n22 + 13 + 14 + 13 + 12 = 74\n\npositive_sum(\"0 12 12 2\") ➞ 26\n\nNotes\nThere is at least one positive integer.\nEach intege",
    "tags": [
      "strings",
      "regex"
    ],
    "title": "Sum of Positive Integers"
  },
  {
    "_id": "uCKJi6X3KTH9zuSc3",
    "difficulty": 2.1838235294117645,
    "language": "python3",
    "summary": "Write a function that takes an integer n and turns it into the ouput. No further instructions.\n\nExamples\nmystery_func(521) ➞ \"151211\"\n\nmystery_func(5211255) ➞ \"1512211225\"\n\nmystery_func(513515) ➞ \"151113151115\"\n\nNotes\nThe result has to do with counting something.\nCheck the Tests tab for some extra hints.",
    "tags": [
      "algorithms",
      "loops"
    ],
    "title": "Mystery Challenge"
  },
  {
    "_id": "ZMYDhgbGTqnuLgPWT",
    "difficulty": 2.1842105263157894,
    "language": "python3",
    "summary": "Create a function that takes an unsorted list of numbers and returns the number of unique triplets whose sum is equal to the variable n.\n\nExamples\ntriplet_sum([1, 0, 2, 6, 3, 9, 3], n = 11) ➞ 2\nSince we found two unique triplets that equate to 11: 0+2+9 and 2+6+3\n\ntriplet_sum([1, 2, 6, 3, 4, 5, 9, 10, 11], n = 20) ➞ 5\n\ntriplet_sum([5, 2, 8], n = 2) ➞ 0\n\nNotes",
    "tags": [
      "loops",
      "arrays",
      "numbers",
      "logic"
    ],
    "title": "Triplet Sum"
  },
  {
    "_id": "LL9RJMMqKD9fCB2HN",
    "difficulty": 2.1875,
    "language": "python3",
    "summary": "Create a function that takes a string and checks if it's a palindrome using Stack. The stack class is created for you.\n\nExamples\nis_palindrome(\"radar\") ➞ True\n\nis_palindrome(\"utsab\") ➞ False\n\nis_palindrome(\"kayak\") ➞ True\n\nNotes\nInput is always a valid word.",
    "tags": [
      "algorithms",
      "data_structures",
      "validation"
    ],
    "title": "Checking Palindrome String Using Stack"
  },
  {
    "_id": "BjenoBXegjjzoLDjn",
    "difficulty": 2.189189189189189,
    "language": "python3",
    "summary": "Create a function that takes a number n as an argument and returns the largest integer that is less than or equal to n and has the highest digit sum (see examples below for a better understanding).\n\nExamples\nlargestdigitsum(100) ➞ 99\nDigit Sum for 99 = 9 + 9 = 18\nAll numbers from 0 to 98 and 100 itself have digit sum lesser than 18.\n\nlargestdigitsum(48) ➞ 48\nD",
    "tags": [
      "numbers",
      "math"
    ],
    "title": "Sum of Largest Integer"
  },
  {
    "_id": "vcxcY5cKC7Cfkt7fi",
    "difficulty": 2.192982456140351,
    "language": "python3",
    "summary": "You are driving in a roundabout. At the moment you enter, you don't know which one of the exits you have to take. At the moment your GPS (or the person next to you) shouts that you should leave the roundabout, there's a moment of time where you need to react, turn on your indicator light, and exit the roundabout.\n\nAssuming the roundabouts are of equal size, th",
    "tags": [
      "algorithms",
      "math",
      "numbers"
    ],
    "title": "Roundabout"
  },
  {
    "_id": "7weXDcQiwtQksC9Eu",
    "difficulty": 2.1944444444444446,
    "language": "python3",
    "summary": "Create a function that takes a list. This list can have all kinds of primitives, even other lists. The function should return a single, flat, one-dimensional, list with all elements. Here are the conditions:\n\nIf the item is a List, include each item in it and the following still apply:\nIf the item is a Primitive, include it as is.\n\nExamples\nflatten_list([1, 2,",
    "tags": [
      "recursion",
      "arrays"
    ],
    "title": "Flatten a List"
  },
  {
    "_id": "57oGnnqP5sxW2KHi4",
    "difficulty": 2.196078431372549,
    "language": "python3",
    "summary": "Images can be described as a 3D list.\n\nThis image has only one white pixel:\n\n[\n  [[255, 255, 255]]\n]\n\nThis one is a 2 by 2 black image:\n\n[\n  [[0, 0, 0], [0, 0, 0]],\n  [[0, 0, 0], [0, 0, 0]]\n]\n\nYour task is to create a function that takes a 3D list representation of an image and returns the inverse of that.\n\nFor example, white becomes black, black becomes white",
    "tags": [
      "arrays",
      "loops",
      "logic",
      "data_structures"
    ],
    "title": "Image Manipulation: Invert (Part 1)"
  },
  {
    "_id": "f24TDCGbYRjGfALQp",
    "difficulty": 2.1964285714285716,
    "language": "python3",
    "summary": "Create a  function that tests if a number is the exact upper bound of the factorial of n. If so, return a list containing the exact factorial bound and n, or otherwise, the string \"Not exact!\".\n\nExamples\nis_exact(6) ➞ [6, 3]\n\nis_exact(24) ➞ [24, 4]\n\nis_exact(125) ➞ \"Not exact!\"\n\nis_exact(720) ➞ [720, 6]\n\nis_exact(1024) ➞ \"Not exact!\"\n\nis_exact(40320) ➞ [40320,",
    "tags": [
      "loops",
      "numbers",
      "validation"
    ],
    "title": "Exact Factorial Bounds"
  },
  {
    "_id": "8wkZkoTzEx7yayWTZ",
    "difficulty": 2.2,
    "language": "python3",
    "summary": "The number 10213223 is self-descriptive. Count the number of zeros, ones, twos, and threes that are contained in this number and you have 1 zero, 2 ones, 3 twos, 2 threes, but that is a replica of the number itself 10|21|32|23.\n\nWrite a function that returns True if its argument is a self-descriptive number, False if not.\n\nExamples\nself_descriptive(22) ➞ True",
    "tags": [
      "loops",
      "numbers",
      "validation"
    ],
    "title": "Self-Descriptive Numbers"
  },
  {
    "_id": "RdenTLqyWW9a6L5aL",
    "difficulty": 2.2,
    "language": "python3",
    "summary": "A number is said to be Harshad if it's exactly divisible by the sum of its digits. Create a function that determines whether a number is a Harshad or not.\n\nExamples\nis_harshad(75) ➞ False\n7 + 5 = 12\n75 is not exactly divisible by 12\n\nis_harshad(171) ➞ True\n1 + 7 + 1 = 9\n9 exactly divides 171\n\nis_harshad(481) ➞ True\n\nis_harshad(89) ➞ False\n\nis_harshad(516) ➞ Tr",
    "tags": [
      "recursion",
      "strings",
      "numbers",
      "validation"
    ],
    "title": "Recursion: Harshad Number"
  },
  {
    "_id": "n53MYmznGpPLxM4K2",
    "difficulty": 2.2037037037037037,
    "language": "python3",
    "summary": "You have to get a new driver's license. You show up at the office at the same time as four other people. The office says they will see everyone in alphabetical order and it takes 20 minutes for them to process each new license. All of the agents are available now, and they can each see one customer at a time. How long will it take for you to walk out with your",
    "tags": [
      "arrays",
      "sorting",
      "logic"
    ],
    "title": "New Driving License"
  },
  {
    "_id": "b9sTvowiouGsiaZE3",
    "difficulty": 2.206611570247934,
    "language": "python3",
    "summary": "Create a function that accepts a string and groups repeated, consecutive values. The groups should have the following structure:  [[value, firstindex, lastindex, timesrepeated],  ...,  [value, firstindex, lastindex, timesrepeated]].\n\nvalue: Character being assessed.\nfirst_index: Index of characters first appearance.\nlast_index: Index of characters last appeara",
    "tags": [
      "loops",
      "strings"
    ],
    "title": "Find Repeating"
  },
  {
    "_id": "JeuzbpbwnbNx5oszm",
    "difficulty": 2.2083333333333335,
    "language": "python3",
    "summary": "A robot moves around a 2D grid. At the start, it is at [0, 0], facing east. It is controlled by a sequence of instructions:\n. means take one step forwards in the current direction.\n`` means turn 90 degrees clockwise.\n\nYour job is to process the instructions and return the final position of the robot.\n\nExample\nFor example, if the robot is given the sequence of",
    "tags": [
      "loops",
      "logic",
      "algorithms"
    ],
    "title": "Track the Robot (Part 3)"
  },
  {
    "_id": "2hk7hFz6haBahtnof",
    "difficulty": 2.209090909090909,
    "language": "python3",
    "summary": "Standard competition ranking (also known as \"1224\" ranking) assigns the same rank to matching values. Rank numbers are increased each time, so ranks are sometimes skipped. If we have 5 scores (the highest score having a rank of 1):\n\nNo matching values:\nScores = [99, 98, 97, 96, 95]\nRank = 1,  2,  3,  4,  5\n\nWith matching values:\nScores = [99, 98, 98, 96, 95]\nR",
    "tags": [
      "data_structures",
      "objects"
    ],
    "title": "Standard Competition Ranking"
  },
  {
    "_id": "vMyTyXa9NKnn8PPFQ",
    "difficulty": 2.2162162162162162,
    "language": "python3",
    "summary": "Create a function that returns the count of all possible paths from top left to bottom right of an m * n matrix with the constraints that from each cell you can either move to the right or down.\n\nExamples\ncalc(2, 2) ➞ 2\n\ncalc(3, 3) ➞ 6\n\ncalc(4, 4) ➞ 20\n\nNote:\nm may not be equal to n.",
    "tags": [
      "arrays",
      "logic",
      "math"
    ],
    "title": "Maneuvering in a Cave"
  },
  {
    "_id": "B3523o5xoTfTvsvYc",
    "difficulty": 2.217391304347826,
    "language": "python3",
    "summary": "Reverse the string without affecting special characters and numbers.\n\nExamples\nrev_specstring(\"AFC#47GH$Ieu\"➞ \"ueI#47HG$CFA\")\n\nrev_specstring(\"guyhiuj1234!@#$%rtyhghu\" ➞ \"uhghytr1234!@#$%juihyug\")\n\nrev_specstring(\"12!@\" ➞ \"12!@\")\n\nNotes\nTry with for loops.",
    "tags": [
      "logic",
      "strings",
      "regex"
    ],
    "title": "Reverse String Without Affecting Special Characters"
  },
  {
    "_id": "fXS3JYMnk3yupk5En",
    "difficulty": 2.217391304347826,
    "language": "python3",
    "summary": "Create a function that takes a string of words and returns the highest scoring word. Each letter of a word scores points according to it's position in the alphabet: a = 1, b = 2, c = 3, etc.\n\nExamples\nword_rank(\"The quick brown fox.\") ➞ \"brown\"\n\nword_rank(\"Nancy is very pretty.\") ➞ \"pretty\"\n\nword_rank(\"Check back tomorrow, man!\") ➞ \"tomorrow\"\n\nword_rank(\"Wedne",
    "tags": [
      "algorithms",
      "strings",
      "arrays",
      "numbers"
    ],
    "title": "WordRank Scoring System"
  },
  {
    "_id": "hDT4TR9JAoQ3BPuCH",
    "difficulty": 2.2242990654205608,
    "language": "python3",
    "summary": "Given a list of people objects, create a function that sorts the list by an attribute name. The attribute to sort by will be given as a string.\n\nThe Person class will only include these attributes in the following order:\nfirstname\nlastname\nage\n\nExamples\np1 = Person(\"Michael\", \"Smith\", 40)\np2 = Person(\"Alice\", \"Waters\", 21)\np3 = Person(\"Zoey\", \"Jones\", 29)\n\npeo",
    "tags": [
      "language_fundamentals",
      "objects",
      "classes"
    ],
    "title": "People Sort"
  },
  {
    "_id": "4hFDo2uytDJmvKMfG",
    "difficulty": 2.227272727272727,
    "language": "python3",
    "summary": "In this challenge, you have to implement an algorithm to establish if a given positive integer num is a Happy number, and how many steps of the algorithm are needed to establish it.\n\nYou have to repeatedly transform the given num into the sum of its squared digits:\nIf after the transformation the new number is equal to 1, num is a Happy number and the algorith",
    "tags": [
      "algorithms",
      "numbers",
      "loops",
      "recursion"
    ],
    "title": "The Happy Function"
  },
  {
    "_id": "6pdkWtD3ME22P78xb",
    "difficulty": 2.230769230769231,
    "language": "python3",
    "summary": "Create a function that counts the embedded names in the string and determines the equality. The names are embedded in a string of mixed special symbols and characters. The names to be counted to are adjoined with the ampersand symbol & and as the second parameter. See the following examples for more details.\n\nExamples\nequal_count(\"Peter!@#$Paul&*#Peter!--@|#$P",
    "tags": [
      "strings",
      "objects"
    ],
    "title": "Name Count Equality"
  },
  {
    "_id": "fczDux2XoTjM7CbLQ",
    "difficulty": 2.230769230769231,
    "language": "python3",
    "summary": "Create a function that takes a number as an argument and returns True if the number is a valid credit card number, False otherwise.\n\nCredit card numbers must be between 14-19 digits in length, and pass the Luhn test, described below:\n\nRemove the last digit (this is the \"check digit\").\nReverse the number.\nDouble the value of each digit in odd-numbered positions",
    "tags": [
      "validation",
      "numbers"
    ],
    "title": "Validate Credit Card Number"
  },
  {
    "_id": "wx2FFjZ4EdXHAjAqF",
    "difficulty": 2.2318840579710146,
    "language": "python3",
    "summary": "The requests module is an HTTP library. You will be using it here to retrieve movie titles from the imdb.com website. See Resources for more details, but all you need for this challenge is get() and .text. The movie title can be easily located in the text of the web page because it is preceded by the HTML tag: ` and followed by the tag: `.\n\nThe requests module",
    "tags": [
      "strings"
    ],
    "title": "HTTP Requests"
  },
  {
    "_id": "9jhTpvYgTCJyD46hA",
    "difficulty": 2.238095238095238,
    "language": "python3",
    "summary": "Create a function that identifies the very first item that has recurred in the string argument passed. It returns the identified item with the index where it first appeared and the very next index where it resurfaced ⁠— entirely as an dictionary; or as an empty dictionary if the argument is either None, an empty string, or no recurring item exists.\n\nExamples\nr",
    "tags": [
      "arrays",
      "objects",
      "validation",
      "logic"
    ],
    "title": "First Recurrence Index"
  },
  {
    "_id": "x3niK6ccbeQ5cC5kC",
    "difficulty": 2.238095238095238,
    "language": "python3",
    "summary": "Create a function that takes two timestamps as input, and returns a string describing the time elapsed between them (in days, hours, minutes, seconds as appropriate).\n\nExamples\nelapsed(1559813526, 1559899926) ➞ \"1 day\"\n\nelapsed(1559681004, 1559899926) ➞ \"2 days, 12 hours, 48 minutes, 42 seconds\"\n\nelapsed(1558773066, 1559899926) ➞ \"13 days, 1 hour, 1 minute\"\n\nN",
    "tags": [
      "algebra",
      "strings"
    ],
    "title": "Time Elapsed"
  },
  {
    "_id": "8J5dFWruwZ6bboBTh",
    "difficulty": 2.245614035087719,
    "language": "python3",
    "summary": "In this challenge, the goal is recomposing scrambled strings made of two or more words.\n\nEvery string has to be reversed not in its totality, but by vowels or consonants clusters in the order they are found; after splitting the string in groups, and reversing every group with more than a letter, you'll obtain the correct sequence:\n\nString = \"KiKdaola\"\n\nSeparat",
    "tags": [
      "strings",
      "regex",
      "formatting",
      "arrays"
    ],
    "title": "Recomposing Strings"
  },
  {
    "_id": "FhmzcAxoydTybNjyA",
    "difficulty": 2.2470588235294118,
    "language": "python3",
    "summary": "Write a function that returns the number of times you must carry a digit when you sum together two integers.\n\nExamples\ncarry_digits(36, 135) ➞ 1\nYou carry the 1 when you sum 6 and 5 together.\n\ncarry_digits(671, 329) ➞ 3\n\ncarry_digits(1111, 3333) ➞ 0\n\ncarry_digits(53214, 56905) ➞ 3\n\nNotes\nCount all carry operations (even those on leading digits).",
    "tags": [
      "numbers",
      "math",
      "control_flow"
    ],
    "title": "Carrying the Digits"
  },
  {
    "_id": "ofuahH9E4pcRDNChd",
    "difficulty": 2.25,
    "language": "python3",
    "summary": "Create a function to emulate a Reverse Polish Notation calculator.\n\nExamples\nrpn([1, 2, \"\", 4,5, \"\" , \"+\"]) ➞ 22\n\nrpn([1,1,\"+\"]) ➞ 2\n\nrpn([16,16, \"/\" ]) ➞ 1\n\nNotes\nLearn more about Reverse Polish Notation in Resources.",
    "tags": [
      "algebra",
      "algorithms"
    ],
    "title": "Reverse Polish Notation"
  },
  {
    "_id": "wnir5Hst7HTGKByKx",
    "difficulty": 2.25531914893617,
    "language": "python3",
    "summary": "Edward has a string s of lowercase English letters that he repeated infinitely many times. Given an integer n, find and print the number of letter \"a\"s in the first n letters of Edward's infinite string. For example, if the string s=abcac and n=10, the substring we consider is abcacabcac, the first 10 characters of his infinite string. There are 4 occurrences",
    "tags": [
      "math",
      "strings"
    ],
    "title": "Repeated String"
  },
  {
    "_id": "DZ4oPbYvwSmmAaLGB",
    "difficulty": 2.2567567567567566,
    "language": "python3",
    "summary": "Create a function that takes multiple arguments, including the first and last name of a person. It should return a dictionary containing all the information which was given in an orderly manner.\n\nExamples\nbuildprofile(\"Isaac\", \"Newton\",  location=\"Kensington\", field=[\"physics\", \"math\", \"astronomy\", \"theology\"] ) ➞ { \"firstname\": \"Isaac\", \"last_name\": \"Newton\",",
    "tags": [
      "loops",
      "logic",
      "strings"
    ],
    "title": "Building Profiles"
  },
  {
    "_id": "cvxXvwRnEpekYbzzP",
    "difficulty": 2.261904761904762,
    "language": "python3",
    "summary": "In this challenge, you have to establish if a given number is Brilliant. A Brilliant number is a semiprime that can be obtained only by multiplicating two, and only two, different primes with the same number of digits.\n\nA semiprime can be:\n\nA composite number equal to the product of two different primes.\nA composite number equal to the square of a prime.\n\nGive",
    "tags": [
      "higher_order_functions",
      "numbers",
      "math",
      "loops"
    ],
    "title": "Shiny Semiprimes: Brilliant Numbers"
  },
  {
    "_id": "5FTMMxKmkQtuY9KBP",
    "difficulty": 2.262295081967213,
    "language": "python3",
    "summary": "Write a function that returns the number of distinct items inside a box. Do not count items outside the box.\n\nThere are four boundaries for a box and those boundaries start with a \"#\" and end with a \"#\". Look for horizontal and vertical consecutive hashes.\n\nExamples\ncount([\n  \"??????\",\n  \"?####?\",\n  \"?#&!#?\",\n  \"@#^Z#?\",\n  \"$####?\"\n]) ➞ 4\n\ncount([\n  \"??????\",",
    "tags": [
      "strings",
      "formatting",
      "regex"
    ],
    "title": "Inside, not Outside a Box"
  },
  {
    "_id": "ntJXZh4W8khX9nLPG",
    "difficulty": 2.267605633802817,
    "language": "python3",
    "summary": "Create a function that recursively counts the integer's number of digits.\n\nExamples\ncount(318) ➞ 3\n\ncount(-92563) ➞ 5\n\ncount(4666) ➞ 4\n\ncount(-314890) ➞ 6\n\ncount(654321) ➞ 6\n\ncount(638476) ➞ 6\n\nNotes\nYou are expected to solve this challenge via recursion.\nYou can check on the Resources tab for more details about recursion.\nA non-recursive version of this chall",
    "tags": [
      "recursion",
      "math"
    ],
    "title": "Recursion: Integer Digits Count"
  },
  {
    "_id": "m9zn9v3Q6oG8zBdja",
    "difficulty": 2.277227722772277,
    "language": "python3",
    "summary": "Hello there, I... seem to not remember who I am, my memories is all... cloudy, although maybe if I could piece it together...\n\nOh! Maybe you could help me make a class that helps me remember things. Maybe a method called add that would add to my memory if I would recall things and a remember method that would let me recall a specific memory.\n\nBut you have to m",
    "tags": [
      "classes",
      "language_fundamentals"
    ],
    "title": "Wait... Who Am I?"
  },
  {
    "_id": "dLnZLi8FjaK6qKcvv",
    "difficulty": 2.2783783783783784,
    "language": "python3",
    "summary": "This challenge is an English twist on the Japanese word game Shiritori. The basic premise is to follow two rules:\n\nFirst character of next word must match last character of previous word.\nThe word must not have already been said.\n\nBelow is an example of a Shiritori game:\n[\"word\", \"dowry\", \"yodel\", \"leader\", \"righteous\", \"serpent\"]  #valid!\n\n[\"motive\", \"beach\"]",
    "tags": [
      "control_flow",
      "games",
      "classes",
      "strings"
    ],
    "title": "Shiritori Game"
  },
  {
    "_id": "BMQTfsHiNJypyEXcn",
    "difficulty": 2.278688524590164,
    "language": "python3",
    "summary": "In number theory, a prime number is balanced if it is equidistant from the prime before it and the prime after it. It is therefore the arithmetic mean of those primes. For example, 5 is a balanced prime, two units away from 3, and two from 7. 211 is 12 units away from the previous prime, 199, and 12 away from the next, 223.\n\nA prime that is greater than the ar",
    "tags": [
      "math",
      "numbers",
      "validation"
    ],
    "title": "Primal Strength"
  },
  {
    "_id": "cx2KeDmEZDyeFsSfT",
    "difficulty": 2.28,
    "language": "python3",
    "summary": "This challenge involves a series that can start with any string of digits. The next term in the series is found by adding the digits of the previous term, appending that sum to the previous term, and then truncating the leftmost digits so that the number of digits in the terms is always the same.\n\nLet's start with \"1234\". The sum of the digits is 10. Appending",
    "tags": [
      "loops",
      "strings"
    ],
    "title": "A Periodic Series"
  },
  {
    "_id": "QitxdAHfkav9snvoP",
    "difficulty": 2.282051282051282,
    "language": "python3",
    "summary": "Create the function defined_adder which takes a number num (integer or float) as an argument, and returns another function. This returned function should take another number (integer or float) as an argument and add the original num to that number, then return it.\n\nAlso create the function undefinedadder, which is an exact replica of definedadder, except in th",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "Adder Functions"
  },
  {
    "_id": "Rww5GiNRH3b2BRC83",
    "difficulty": 2.283582089552239,
    "language": "python3",
    "summary": "You are to create a special regex that will detect if an HTML GET request is valid or not (with some gotchas). Strings are formated like so:\n\nname1=val1&name2=val2&name3=val3&name4=val4\n\nYou need to detect requests with the four names: \"val\", \"id\", \"desc\", \"time\" (each value can have a different order).\n\nExample #1\n\"val=val1&id=val2&desc=val3&time=val4\"\n\n\"id=v",
    "tags": [
      "regex",
      "strings",
      "validation"
    ],
    "title": "Regex HTML Get Request Checker"
  },
  {
    "_id": "ZPL6q5aXAcxEcNBZD",
    "difficulty": 2.2857142857142856,
    "language": "python3",
    "summary": "Mubashir was playing with some numbers. He observed some funny numbers.\n\nFunny Numbers\n89 --> 8¹ + 9² = 89 * 1\n\n695 --> 6² + 9³ + 5⁴ = 1390 = 695 * 2\n\n46288 --> 4³ + 6⁴ + 2⁵ + 8⁶ + 8⁷ = 2360688 = 46288 * 51\n\nCreate a function which takes a number n and a positive integer p and returns a positive integer k, such as the sum of the digits of n taken to the succes",
    "tags": [
      "math",
      "numbers",
      "logic",
      "functional_programming"
    ],
    "title": "Funny Numbers"
  },
  {
    "_id": "RbiTp6EE8ReczcStp",
    "difficulty": 2.286206896551724,
    "language": "python3",
    "summary": "Write a function that moves all the zeroes to the end of a list.  Do this without returning a copy of the input list.\n\nExamples\nzeroestoend([1, 2, 0, 0, 4, 0, 5]) ➞ [1, 2, 4, 5, 0, 0, 0]\n\nzeroestoend([0, 0, 2, 0, 5]) ➞ [2, 5, 0, 0, 0]\n\nzeroestoend([4, 4, 5]) ➞ [4, 4, 5]\n\nzeroestoend([0, 0]) ➞ [0, 0]\n\nNotes\nYou must mutate the original list.\nKeep the relative o",
    "tags": [
      "arrays",
      "language_fundamentals"
    ],
    "title": "Mutations Only: Zeroes to the End"
  },
  {
    "_id": "yPsS82tug9a8CoLaP",
    "difficulty": 2.286697247706422,
    "language": "python3",
    "summary": "Write a function that returns a character mapping from a word.\n\nExamples\ncharacter_mapping(\"abcd\") ➞ [0, 1, 2, 3]\n\ncharacter_mapping(\"abb\") ➞ [0, 1, 1]\n\ncharacter_mapping(\"babbcb\") ➞ [0, 1, 0, 0, 2, 0]\n\ncharacter_mapping(\"hmmmmm\") ➞ [0, 1, 1, 1, 1, 1]\n\nNotes\nStart your counter at 0, and increment by 1 each time you encounter a new character.\nIdentical characte",
    "tags": [
      "data_structures",
      "strings"
    ],
    "title": "Unique Character Mapping"
  },
  {
    "_id": "kusqKDBnX8g2uxRj8",
    "difficulty": 2.287128712871287,
    "language": "python3",
    "summary": "Write a function that takes a string and returns a string with the correct case for character titles in the Game of Thrones series.\nThe words and, the, of and in should be lowercase.\nAll other words should have the first character as uppercase and the rest lowercase.\n\nExamples\ncorrect_title(\"jOn SnoW, kINg IN thE noRth.\")\n➞ \"Jon Snow, King in the North.\"\n\ncorr",
    "tags": [
      "strings",
      "formatting",
      "language_fundamentals"
    ],
    "title": "Game of Thrones: Character Titles"
  },
  {
    "_id": "hmt2HMc4XNYrwPkDh",
    "difficulty": 2.292307692307692,
    "language": "python3",
    "summary": "Write a recursive function that takes a string input and returns the string in a reversed case and order.\n\nExamples\ninvert(\"dLROW YM sI HsEt\") ➞ \"TeSh iS my worlD\"\n\ninvert(\"ytInIUgAsnOc\") ➞ \"CoNSaGuiNiTY\"\n\ninvert(\"step on NO PETS\") ➞ \"step on NO PETS\"\n\ninvert(\"XeLPMoC YTiReTXeD\") ➞ \"dExtErIty cOmplEx\"\n\nNotes\nNo empty strings and will neither contain special ch",
    "tags": [
      "recursion",
      "strings",
      "validation"
    ],
    "title": "Recursion: Case and Index Inverter"
  },
  {
    "_id": "aifM22oGtRKShsFWB",
    "difficulty": 2.2950819672131146,
    "language": "python3",
    "summary": "A number is said to be Disarium if the sum of its digits raised to their respective positions is the number itself. Create a function that determines whether a number is a Disarium or not.\n\nExamples\nis_disarium(75) ➞ False\n7^1 + 5^2 = 7 + 25 = 32\n\nis_disarium(135) ➞ True\n1^1 + 3^2 + 5^3 = 1 + 9 + 125 = 135\n\nis_disarium(544) ➞ False\n\nis_disarium(518) ➞ True\n\nis",
    "tags": [
      "recursion",
      "numbers",
      "math",
      "validation"
    ],
    "title": "Recursion: Disarium Number"
  },
  {
    "_id": "vASK6xk6hbxJTyJQo",
    "difficulty": 2.296875,
    "language": "python3",
    "summary": "Mubashir is eating a watermelon.\n\nHe spits out all watermelon seeds if seeds are more than five.\nHe can swallow all watermelon seeds if seeds are less than or equal to five.\nHe can eat 1/4 of a watermelon each time.\n\nGiven a 2D array of watermelon where 0 is representing juicy watermelon while 1 is representing seed, return total number of seeds spit-out. See",
    "tags": [
      "arrays",
      "validation",
      "numbers",
      "loops"
    ],
    "title": "A Watermelon 🍉"
  },
  {
    "_id": "vD3qsTmmgXp8inbh8",
    "difficulty": 2.2972972972972974,
    "language": "python3",
    "summary": "Mubashir needs your help to equalize (make all list elements the same) a list.\n\nCreate a function that takes a list of integers lst and a constant c and returns minimum number of operations required to equalize the given list.\n\nRules\nYou can choose any integer x to equalize the given list.\nPick a contiguous sublist of length not greater than the given c\n\nExamp",
    "tags": [
      "algorithms",
      "arrays",
      "logic",
      "loops"
    ],
    "title": "Equalize a List"
  },
  {
    "_id": "iwh4T95yXJgMSH6AP",
    "difficulty": 2.297872340425532,
    "language": "python3",
    "summary": "In a 2 dimensional list, each value represents the height of a building located there. You are allowed to increase the height of any number of buildings, by any amount (the amounts can be different for different buildings).\n\nAt the end, the \"skyline\" when viewed from all four directions of the grid, i.e. top, bottom, left, and right, must be the same as the sk",
    "tags": [
      "arrays",
      "loops",
      "math"
    ],
    "title": "Max Increase While Keeping City Skyline"
  },
  {
    "_id": "gXwRi9orArjTKxRJL",
    "difficulty": 2.3095238095238093,
    "language": "python3",
    "summary": "Harshad/Niven numbers are positive numbers that are divisible by the sum of their digits. All single-digit numbers are Harshad numbers.\n\nFor example, 27 is a Harshad number as 2 + 7 = 9, and 9 is a divisor of 27.\n\nHarshad numbers can occur in consecutive clusters. The numbers 1 through 10 are Harshad numbers. The numbers 132 and 133 are both Harshad numbers. T",
    "tags": [
      "algebra",
      "math",
      "numbers",
      "validation"
    ],
    "title": "Harshad Numbers"
  },
  {
    "_id": "TYB56MbvfuPoPahqn",
    "difficulty": 2.3125,
    "language": "python3",
    "summary": "Topsy turvy numbers are numbers that when inverted (rotated 180 degrees) are unchanged. The most recent topsy turvy years were 1961 and 1881. The next one won't be until 6009. Mathemeticians have shown little interest in these numbers, but Edabitians are always up for a challenge:\n\nWrite a function that accepts two non-negative integers and returns a list of a",
    "tags": [
      "numbers",
      "strings",
      "loops"
    ],
    "title": "Topsy Turvy Numbers"
  },
  {
    "_id": "55f9SDtxuLgSaJdcK",
    "difficulty": 2.313131313131313,
    "language": "python3",
    "summary": "We can assign a value to each character in a word, based on their position in the alphabet (a = 1, b = 2, ... , z = 26).  A balanced word is one where the sum of values on the left-hand side of the word equals the sum of values on the right-hand side. For odd length words, the middle character (balance point) is ignored.\n\nWrite a function that returns True if",
    "tags": [
      "strings",
      "validation"
    ],
    "title": "Balanced Words"
  },
  {
    "_id": "k9usvZ8wfty4HwqX2",
    "difficulty": 2.325,
    "language": "python3",
    "summary": "Create a function to check whether a given number is Cuban Prime. A cuban prime is a prime number that is a solution to one of two different specific equations involving third powers of x and y. For this challenge we are only concerned with the cuban numbers from the first equation. We ignore the cuban numbers from the  second equation.\n\nEquation Form\np = (x^3",
    "tags": [
      "math",
      "language_fundamentals"
    ],
    "title": "Cuban Prime"
  },
  {
    "_id": "9TkNRu9ALS6DAy8jK",
    "difficulty": 2.325301204819277,
    "language": "python3",
    "summary": "Create a function that takes a list, finds the most repeated element(s) within it and returns it/them in a list. The function should work for both integers and strings mixed together within the input list (e.g. [1, 1, \"a\"]).\n\nExamples\nhighest_occurrence([2, 3, 2, 5, 6, 7, 2]) ➞ [2]\n\nhighest_occurrence([1, 2, 3, 3, \"a\", \"b\", \"b\", \"c\"]) ➞ [3, \"b\"]\n\nhighest_occur",
    "tags": [
      "arrays",
      "numbers",
      "strings"
    ],
    "title": "Find Highest Occurrence"
  },
  {
    "_id": "FDzEFbNE2q3eKL8dm",
    "difficulty": 2.3255813953488373,
    "language": "python3",
    "summary": "The ABACABA pattern is a recursive fractal pattern that shows up in many places in the real world (such as in geometry, art, music, poetry, number systems, literature and higher dimensions).\n\nCreate a function that takes a number n as an argument and returns a string that represents the full pattern.\n\nExamples\nabacaba_pattern(1) ➞ \"A\"\n\nabacaba_pattern(2) ➞ \"AB",
    "tags": [
      "recursion",
      "geometry"
    ],
    "title": "ABACABA Pattern"
  },
  {
    "_id": "LbimHKR6izFH6EM26",
    "difficulty": 2.329113924050633,
    "language": "python3",
    "summary": "A cannon sits in an open field ready to fire. You know the location of the cannon in cartesian coordinates. You know the direction that the barrel is pointed as a clockwise bearing from the north. You also know the distance that the cannonball will travel.\n\nDevise a function that finds the coordinates of the spot where the cannonball strikes its target. Round",
    "tags": [
      "trigonometry",
      "math"
    ],
    "title": "Cannon Fire"
  },
  {
    "_id": "zQespQxTsiGoeMNP3",
    "difficulty": 2.330508474576271,
    "language": "python3",
    "summary": "You are given an input list of strings, ordered by ascending length.\n\nWrite a function that returns True if, for each pair of consecutive strings, the second string can be formed from the first by adding a single letter either at the beginning or end.\n\nExamples\ncan_build([\"a\", \"at\", \"ate\", \"late\", \"plate\", \"plates\"]) ➞ True\n\ncan_build([\"a\", \"at\", \"ate\", \"late\"",
    "tags": [
      "strings",
      "validation",
      "arrays"
    ],
    "title": "Building up a Word"
  },
  {
    "_id": "bH5qdje5xgTYn4ypJ",
    "difficulty": 2.3333333333333335,
    "language": "python3",
    "summary": "Mubashir (as always) needs your help to complete his assignment.\n\nYou are given two positive integers n and m. You have to perform some basic mathematical operations on n to obtain m. These are your options:\n\n(n-1)/2   - if (n-1) is divisible by 2\nn/2       - if n is divisible by 2\nn*2\n\nCreate a function that returns the minimum number of steps required to tra",
    "tags": [
      "numbers",
      "validation",
      "math",
      "logic"
    ],
    "title": "Numbers Transformation"
  },
  {
    "_id": "ouWxFayrk3ySG6jsg",
    "difficulty": 2.338235294117647,
    "language": "python3",
    "summary": "Create a function that takes a Tic-tac-toe board and returns \"X\" if the X's are placed in a way that there are three X's in a row or returns \"O\" if there is three O's in a row.\n\nExamples\nwho_won([\n  [\"O\", \"X\", \"O\"],\n  [\"X\", \"X\", \"O\"],\n  [\"O\", \"X\", \"X\"]\n]) ➞ \"X\"\n\nwho_won([\n  [\"O\", \"O\", \"X\"],\n  [\"X\", \"O\", \"X\"],\n  [\"O\", \"X\", \"O\"]\n]) ➞ \"O\"\n\nNotes\nThere are no Ties",
    "tags": [
      "arrays",
      "games",
      "validation"
    ],
    "title": "Tic-Tac-Toe"
  },
  {
    "_id": "S7rdJsn6vkfC9BzcR",
    "difficulty": 2.3401709401709403,
    "language": "python3",
    "summary": "Create a class Employee that will take a full name as argument, as well as a set of none, one or more keywords. Each instance should have a name and a lastname attributes plus one more attribute for each of the keywords, if any.\n\nExamples\njohn = Employee(\"John Doe\")\nmary = Employee(\"Mary Major\", salary=120000)\nrichard = Employee(\"Richard Roe\", salary=110000, h",
    "tags": [
      "classes",
      "loops"
    ],
    "title": "Employee Class with Keywords"
  },
  {
    "_id": "vfJujzoYBtgLC8frK",
    "difficulty": 2.3404255319148937,
    "language": "python3",
    "summary": "In this challenge, you have to find the numeric value of a given word. Instead of the usual sum of Unicode values, you have to convert the whole word into a decimal number from a base equal to ten plus the position in the alphabet of the \"highest\" letter of the word (counting from a = 1 to z = 26).\n\nHere's an illustrative example. In the word \"Edabit\" the high",
    "tags": [
      "numbers",
      "strings",
      "formatting"
    ],
    "title": "The Secret Bases of Words"
  },
  {
    "_id": "hoxv8zaQJNMWJqnt3",
    "difficulty": 2.340659340659341,
    "language": "python3",
    "summary": "A pronic number (or otherwise called as heteromecic) is a number which is a product of two consecutive integers, that is, a number of the form n(n + 1). Create a function that determines whether a number is pronic or not.\n\nExamples\nis_heteromecic(0) ➞ True\n0 * (0 + 1) = 0 * 1 = 0\n\nis_heteromecic(2) ➞ True\n1 * (1 + 1) = 1 * 2 = 2\n\nis_heteromecic(7) ➞ False\n\nis_",
    "tags": [
      "recursion",
      "numbers",
      "math",
      "validation"
    ],
    "title": "Recursion: Pronic Number"
  },
  {
    "_id": "WFCecGWDJNc7Lspw7",
    "difficulty": 2.340909090909091,
    "language": "python3",
    "summary": "Create a function whose argument is the time in 12 hour format (hh:mm:ss). The function returns the smaller angle between the hour and minute hands in degrees, rounded to three decimal points.\n\nExamples\nclock(\"12:00:00\") ➞ 0.0\n\nclock(\"12:15:00\") ➞ 82.5\n\nclock(\"12:32:44\") ➞ 179.967\n\nclock(\"03:33:33\") ➞ 94.525\n\nNotes\nN/A",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "Clock Hands"
  },
  {
    "_id": "2ZAewKE6qEdfBJ9zm",
    "difficulty": 2.34375,
    "language": "python3",
    "summary": "Define a match and a repl to create a swapcase() method.\n\nExamples\nre.sub(match, repl, \"hello\") ➞ \"HELLO\"\n\nre.sub(match, repl, \"wOw|WoW\") ➞ \"WoW|wOw\"\nSpecial characters are left alone.\n\nNotes\nN/A",
    "tags": [
      "regex",
      "strings"
    ],
    "title": "RegEx swapcase()"
  },
  {
    "_id": "vYqGnNuXqznAZ4KR2",
    "difficulty": 2.3454545454545452,
    "language": "python3",
    "summary": "You are playing a game of JavaScript & Jackalopes with your friends, and need to roll dice as part of the game. None of you actually own dice, but you do have a computer handy!\n\nYou'll be given a string representing the number of dice to roll, how many faces each die has, and a \"modifier\" to apply to the final result after adding up all the dice. For example, ",
    "tags": [
      "strings",
      "games"
    ],
    "title": "Range of Rolled Dice"
  },
  {
    "_id": "r8yrCWBqQrb3wmYo5",
    "difficulty": 2.3529411764705883,
    "language": "python3",
    "summary": "A Capturing Group will match the characters or expressions within the parenthesis (). The matches will also be stored, and can be backreferenced by a backlash followed by its number. For example, \\1 will access the first capturing group that appears in the expression.\n\ntxt1 = \"foo, you are such a foo\"\ntxt2 = \"foo, you are such a bar\"\ntxt3 = \"bar, you are such",
    "tags": [
      "regex",
      "formatting"
    ],
    "title": "RegEx XX: Capturing Groups"
  },
  {
    "_id": "dRA9E9HxJdbuB4yCx",
    "difficulty": 2.3552631578947367,
    "language": "python3",
    "summary": "Create a function that takes the dimensions of two triangles (as lists) and checks if the first triangle fits into the second one.\n\nExamples\ndoestrianglefit([1, 1, 1], [1, 1, 1]) ➞ True\n\ndoestrianglefit([1, 1, 1], [2, 2, 2]) ➞ True\n\ndoestrianglefit([1, 2, 3], [1, 2, 2]) ➞ False\n\ndoestrianglefit([1, 2, 4], [1, 2, 6]) ➞ False\n\nNotes\nTriangle fits if it has the s",
    "tags": [
      "conditions",
      "validation",
      "arrays",
      "geometry",
      "math"
    ],
    "title": "Does the Triangle Fit into the Triangular Hole?"
  },
  {
    "_id": "tA2XfGGZiscWb3q9S",
    "difficulty": 2.3559322033898304,
    "language": "python3",
    "summary": "Given a YouTube URL, extract the video ID and return it as a string.\n\nExamples\nyoutube_id(\"https://www.youtube.com/watch?v=XPEr1cArWRg\") ➞ \"XPEr1cArWRg\"\n\nyoutube_id(\"https://youtu.be/BCDEDi5gDPo\") ➞ \"BCDEDi5gDPo\"\n\nyoutube_id(\"https://youtube.com/watch?t=4m40s&v=vxP3bY-XxY4\") ➞ \"vxP3bY-XxY4\"\n\nNotes\nAll input are valid YouTube links.",
    "tags": [
      "regex",
      "strings"
    ],
    "title": "YouTube Video ID Extractor"
  },
  {
    "_id": "FkXNcJMwTsEfgBdxJ",
    "difficulty": 2.3636363636363638,
    "language": "python3",
    "summary": "In this challenge, create a matrix that simulates how a series of points are placed on a portion of the cartesian plane.\n\nYou are given two objects as parameters:\n\ndim contains the dimension of the regular matrix to build:\n  The property h is the height, or the total number of rows.\n  The property w is the width, or the total number of columns.\n\ncnt contains t",
    "tags": [
      "arrays",
      "loops"
    ],
    "title": "Cartesian Matrix"
  },
  {
    "_id": "zXACKeaEzLK9XwBwp",
    "difficulty": 2.3636363636363638,
    "language": "python3",
    "summary": "You bought a few bunches of fruit over the weekend. Create a function that splits a bunch into singular objects inside a list.\n\nExamples\nsplit_bunches([\n  { \"name\": \"grapes\", \"quantity\": 2 }\n]) ➞ [\n  { \"name\": \"grapes\", \"quantity\": 1 },\n  { \"name\": \"grapes\", \"quantity\": 1 }\n]\n\nsplit_bunches([\n  { \"name\": \"currants\", \"quantity\": 1 },\n  { \"name\": \"grapes\", \"quan",
    "tags": [
      "arrays",
      "objects",
      "loops"
    ],
    "title": "Splitting Objects Inside a List"
  },
  {
    "_id": "rheD8p46h8gKdE8GE",
    "difficulty": 2.364485981308411,
    "language": "python3",
    "summary": "Images can be described as 3D lists.\n\nThis image has only one white pixel:\n\n[\n  [[255, 255, 255]]\n]\n\nThis one is a 2 by 2 black image:\n\n[\n  [[0, 0, 0], [0, 0, 0]],\n  [[0, 0, 0], [0, 0, 0]]\n]\n\nYour task is to create a function that takes a 3D list representation of an image and returns the grayscale version of that.\n\nExamples\ngrayscale([\n  [[0, 0, 0], [0, 0, 15",
    "tags": [
      "algorithms",
      "arrays",
      "logic",
      "loops"
    ],
    "title": "Image Manipulation: 255 Shades of Grey (Part 2)"
  },
  {
    "_id": "HwwspgCBsYQhMcafw",
    "difficulty": 2.36734693877551,
    "language": "python3",
    "summary": "We define super digit of an integer x using the following rules:\n\nIf x has only 1 digit, then its super digit is x.\nOtherwise, the super digit of x is equal to the super digit of the sum of the digits of x.\n\nFor example, the super digit of x will be calculated as:\n\n  super_digit(9875)    9+8+7+5 = 29\n  super_digit(29)      2 + 9 = 11\n  super_digit(11)      1 +",
    "tags": [
      "recursion",
      "math",
      "numbers",
      "algorithms"
    ],
    "title": "Recursive Digit"
  },
  {
    "_id": "nsAkCCkh2fyW3fhPG",
    "difficulty": 2.3703703703703702,
    "language": "python3",
    "summary": "The bookstore from [this collection] (https://edabit.com/collection/dnXtkLPZpX25t227q), in a desperate attempt to avoid getting hacked, changed from exec() to eval(). Create a query that stores the users dictionary in the res variable.\n\nExamples\nparam = \"your text here\"\n\nusers = {\n  \"user1\": \"password\",\n  \"user2\": \"password\"\n}\n\nres = eval(\"search(\"%s\")\" % para",
    "tags": [
      "logic",
      "games",
      "data_structures"
    ],
    "title": "Injection II: Using Eval"
  },
  {
    "_id": "y3CEwBrJqqkeefgnt",
    "difficulty": 2.3714285714285714,
    "language": "python3",
    "summary": "You are implementing a battle system for a simple role-playing game. A hero is fighting various monsters, and you have to determine the battle's outcome for each engaged skirmish. Hero and monsters share some stats:\n\nHP or Health Points: The amount of damage the character can sustain. If it reaches 0 (or less) the character dies.\nATT or Attack: The character o",
    "tags": [
      "games",
      "conditions",
      "logic",
      "loops"
    ],
    "title": "Heroes vs. Monsters: a Role Playing Game Battle System"
  },
  {
    "_id": "5Q2RRBNJ8KcjCkPwP",
    "difficulty": 2.3793103448275863,
    "language": "python3",
    "summary": "Create a function that takes a list of character inputs from a Tic Tac Toe game. Inputs will be taken from player1 as \"X\", player2 as \"O\", and empty spaces as \"#\". The program will return the winner or tie results.\n\nExamples\ntictactoe([\n  [\"X\", \"O\", \"O\"],\n  [\"O\", \"X\", \"O\"],\n  [\"O\", \"#\", \"X\"]\n]) ➞ \"Player 1 wins\"\n\ntictactoe([\n  [\"X\", \"O\", \"O\"],\n  [\"O\", \"X\", \"O\"",
    "tags": [
      "validation",
      "arrays",
      "games"
    ],
    "title": "Tic Tac Toe"
  },
  {
    "_id": "HrQoXJYqpYZ2Rqvtb",
    "difficulty": 2.38255033557047,
    "language": "python3",
    "summary": "Create a function that takes one, two or more numbers as arguments and adds them together to get a new number.  The function then repeatedly multiplies the digits of the new number by each other, yielding a new number, until the product is only 1 digit long. Return the final product.\n\nExamples\nsumdigprod(16, 28) ➞ 6\n16 + 28 = 44\n4 * 4 =  16\n1 * 6 = 6\n\nsumdigpr",
    "tags": [
      "math",
      "arrays",
      "numbers"
    ],
    "title": "Product of Digits of Sum"
  },
  {
    "_id": "ZF9e922XuRaMu43Wp",
    "difficulty": 2.3846153846153846,
    "language": "python3",
    "summary": "Write a function which takes an integer steps and returns a string representing an upward stair with steps representing the number of the steps in the stair. Each step will be represented by combinations of underscore(s), newline(s), and vertical line(s).\n\nSo, if you print the result for a stair with three steps, it will look something like this:\n\n      _",
    "tags": [
      "formatting",
      "strings"
    ],
    "title": "Create a Stair"
  },
  {
    "_id": "muW5mtzWbYGEbNFzQ",
    "difficulty": 2.3870967741935485,
    "language": "python3",
    "summary": "Create a function that takes a dict with the size, the weight in kg, the age, how much sport the person does and whether the person is male or female:\n\ndict = {\n  \"gender\": \"male\",\n  \"height\": 180,\n  \"weight\": 80,\n  \"age\": 20,\n  \"sport\": 3\n}\n  Return the basal metabolic rate of the person rounded to one decimal place.\nThe formula is:\n\nBMR for Men: 66.47 + (13.",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "Basal Metabolic Rate"
  },
  {
    "_id": "5ou6SKDtFRZugbpda",
    "difficulty": 2.3906056860321385,
    "language": "python3",
    "summary": "The additive persistence of an integer, n, is the number of times you have to replace n with the sum of its digits until n becomes a single digit integer.\n\nThe multiplicative persistence of an integer, n, is the number of times you have to replace n with the product of its digits until n becomes a single digit integer.\n\nCreate two functions that take an intege",
    "tags": [
      "math",
      "numbers",
      "loops"
    ],
    "title": "Persistence"
  },
  {
    "_id": "CEyp3FZD5zsaqSwoy",
    "difficulty": 2.392857142857143,
    "language": "python3",
    "summary": "Given a Binary Search Tree (BST) implementation, complete the minimum, and maximum  function which is present in the BST class. Here you have to  find the max value, min value of the whole tree.\n\nExamples\ndata = [10, 4 , 20 , 1 , 5]\n\nmaximum()  ➞ 20\n      10\n      /   \\\n    4    20\n  /  \\\n1    5\n\ndata = [100, 70, 200, 34, 80, 300]\n\nminimum() ➞ 34\n\n       100",
    "tags": [
      "data_structures",
      "arrays",
      "language_fundamentals"
    ],
    "title": "Minimum and Maximum Value in BST"
  },
  {
    "_id": "9YfCbQpRPqRLzPCcg",
    "difficulty": 2.395348837209302,
    "language": "python3",
    "summary": "In a video game, a meteor will fall toward the main character's home planet. Given the meteor's trajectory as a string in the form y = mx + b and the character's position as a tuple of (x, y), return True if the meteor will hit  the character and False if it will not.\n\nExamples\nwill_hit(\"y = 2x - 5\", (0, 0)) ➞ False\n\nwill_hit(\"y = -4x + 6\", (1, 2)) ➞ True\n\nwil",
    "tags": [
      "algebra",
      "algorithms",
      "games",
      "math",
      "validation"
    ],
    "title": "It's a Meteor!"
  },
  {
    "_id": "kpPkYohYvGJWWEb6Q",
    "difficulty": 2.3962264150943398,
    "language": "python3",
    "summary": "Write a function that gets a string number and a fret of a 6-string guitar in 'standard tuning' and return the corresponding note. For this challenge we use a 24 fret model.\n\nThe notes are:\n\nC, C#/Db, D, D#/Eb, E, F, F#/Gb, G, G#/Ab, A, A#/Bb, B\n\nTry not to use a 2 dimensional list. Look at the image on the bottom to see the note names on the guitar neck.\n\nExa",
    "tags": [
      "algorithms",
      "numbers"
    ],
    "title": "Strings & Frets"
  },
  {
    "_id": "2jcxK7gpn6Z474kjz",
    "difficulty": 2.3973509933774833,
    "language": "python3",
    "summary": "You're head of security at a casino that has money being stolen from it. You get the data in the form of strings and you have to set off an alarm if a thief is detected.\nIf there is no guard between thief and money, return \"ALARM!\"\nIf the money is protected, return \"Safe\"\n\nString Components\nx - Empty Space\nT - Thief\nG - Guard\n$ - Money\n\nExamples\nsecurity(\"xxxx",
    "tags": [
      "games",
      "logic",
      "validation",
      "regex"
    ],
    "title": "Casino Security"
  },
  {
    "_id": "YLf984Eod74ha4Tok",
    "difficulty": 2.3979591836734695,
    "language": "python3",
    "summary": "In a calendar year, it is exactly 365.25 days. But, eventually, this will lead to confusion because humans normally count by exact divisibility of 1 and not with decimal points. So, to avoid the latter, it was decided to add up all 0.25 days every four-year cycle, make that year to sum up to 366 days (including February 29 as an intercalary day), thus, called",
    "tags": [
      "algorithms",
      "math",
      "numbers",
      "validation"
    ],
    "title": "Is It a Leap Year?"
  },
  {
    "_id": "MGALfBAXhXqqdFyqo",
    "difficulty": 2.4481525625744935,
    "language": "python3",
    "summary": "The Atbash cipher is an encryption method in which each letter of a word is replaced with its \"mirror\" letter in the alphabet: A  Z; B  Y; C  X; etc.\n\nCreate a function that takes a string and applies the Atbash cipher to it.\n\nExamples\natbash(\"apple\") ➞ \"zkkov\"\n\natbash(\"Hello world!\") ➞ \"Svool dliow!\"\n\natbash(\"Christmas is the 25th of December\") ➞ \"Xsirhgnzh r",
    "tags": [
      "strings",
      "formatting",
      "cryptography"
    ],
    "title": "Atbash Cipher"
  },
  {
    "_id": "QN4RMpAnktNvMCWwg",
    "difficulty": 2.456403269754768,
    "language": "python3",
    "summary": "An identity matrix is defined as a square matrix with 1s running from the top left of the square to the bottom right. The rest are 0s. The identity matrix has applications ranging from machine learning to the general theory of relativity.\n\nCreate a function that takes an integer n and returns the identity matrix of n x n dimensions. For this challenge, if the",
    "tags": [
      "arrays"
    ],
    "title": "Identity Matrix"
  },
  {
    "_id": "xbjDMxzpFcsAWKp97",
    "difficulty": 2.466108149276466,
    "language": "python3",
    "summary": "Create a function that determines whether each seat can \"see\" the front-stage. A number can \"see\" the front-stage if it is strictly greater than the number before it.\n\nEveryone can see the front-stage in the example below:\n\nFRONT STAGE\n[[1, 2, 3, 2, 1, 1],\n[2, 4, 4, 3, 2, 2],\n[5, 5, 5, 5, 4, 4],\n[6, 6, 7, 6, 5, 5]]\n\nStarting from the left, the 6 > 5 > 2 > 1, s",
    "tags": [
      "arrays",
      "validation",
      "loops"
    ],
    "title": "Concert Seats"
  },
  {
    "_id": "AHgupTs2ELjAehzHv",
    "difficulty": 2.4705882352941178,
    "language": "python3",
    "summary": "Write three regular expressions:\nOne called opening_tags that will match all HTML opening tags including attributes.\nOne called closing_tags that will match all HTML closing tags.\nOne called all_tags that will match all HTML tags opening or closing, their attributes and their content (as long as their content is in the same line). Please, check the example bel",
    "tags": [
      "regex"
    ],
    "title": "RegEx Exercise #2: HTML Tags"
  },
  {
    "_id": "YqLBEZJR9ySndYQpH",
    "difficulty": 2.474285714285714,
    "language": "python3",
    "summary": "Create a function that will build a staircase using the underscore _ and hash # symbols. A positive value denotes the staircase's upward direction and downwards for a negative value.\n\nExamples\nstaircase(3) ➞ \"_#\\n##\\n###\"\n__\n_\n\nstaircase(7) ➞ \"_#\\n##\\n###\\n####\\n#####\\n######\\n#######\"\n__\n_\n__\n_\n__\n_\n\nstaircase(2) ➞ \"_#\\n##\"\n_\n\nstaircase(-8) ➞ \"########\\n#####",
    "tags": [
      "strings",
      "logic",
      "arrays"
    ],
    "title": "Underscore-Hash Staircase"
  },
  {
    "_id": "ZvjGe7dQAbvbxoPGZ",
    "difficulty": 2.4935064935064934,
    "language": "python3",
    "summary": "RGB is a color model that defines color by the combination of Red, Green, and Blue. An RGB tuple is composed of three numbers that specify the intensity of each color. Because it uses 8 bits (0s or 1s) for each color, each intensity can be transformed into a hexadecimal number with two digits at most.\n\nThere are 256 possible shades for each color, since \"11111",
    "tags": [
      "formatting",
      "numbers"
    ],
    "title": "RGB or Hex Colour"
  },
  {
    "_id": "SHdu4GwBQehhDm4xT",
    "difficulty": 2.4947049924357034,
    "language": "python3",
    "summary": "A prison can be represented as a list of cells. Each cell contains exactly one prisoner. A 1 represents an unlocked cell and a 0 represents a locked cell.\n\n[1, 1, 0, 0, 0, 1, 0]\n\nStarting inside the leftmost cell, you are tasked with seeing how many prisoners you can set free, with a catch. Each time you free a prisoner, the locked cells become unlocked, and t",
    "tags": [
      "arrays",
      "games",
      "logic",
      "loops"
    ],
    "title": "Prison Break"
  },
  {
    "_id": "vQgmyjcjMoMu9YGGW",
    "difficulty": 2.5019607843137255,
    "language": "python3",
    "summary": "Create a function that returns the simplified version of a fraction.\n\nExamples\nsimplify(\"4/6\") ➞ \"2/3\"\n\nsimplify(\"10/11\") ➞ \"10/11\"\n\nsimplify(\"100/400\") ➞ \"1/4\"\n\nsimplify(\"8/4\") ➞ \"2\"\n\nNotes\nA fraction is simplified if there are no common factors (except 1) between the numerator and the denominator. For example, 4/6 is not simplified, since 4 and 6 both share",
    "tags": [
      "math",
      "strings",
      "validation"
    ],
    "title": "Simplified Fractions"
  },
  {
    "_id": "Fpymv2HieqEd7ptAq",
    "difficulty": 2.5037481259370313,
    "language": "python3",
    "summary": "Write a function that groups a string into parentheses cluster. Each cluster should be balanced.\n\nExamples\nsplit(\"()()()\") ➞ [\"()\", \"()\", \"()\"]\n\nsplit(\"((()))\") ➞ [\"((()))\"]\n\nsplit(\"((()))(())()()(()())\") ➞ [\"((()))\", \"(())\", \"()\", \"()\", \"(()())\"]\n\nsplit(\"((())())(()(()()))\") ➞ [\"((())())\", \"(()(()()))\"]\n\nNotes\nAll input strings will only contain parentheses.",
    "tags": [
      "strings",
      "data_structures"
    ],
    "title": "Parentheses Clusters"
  },
  {
    "_id": "uwFHSRewNpmBNvbME",
    "difficulty": 2.5046728971962615,
    "language": "python3",
    "summary": "Write a function that selects all words that have all the same vowels (in any order and/or number) as the first word, including the first word.\n\nExamples\nsamevowelgroup([\"toe\", \"ocelot\", \"maniac\"]) ➞ [\"toe\", \"ocelot\"]\n\nsamevowelgroup([\"many\", \"carriage\", \"emit\", \"apricot\", \"animal\"]) ➞ [\"many\"]\n\nsamevowelgroup([\"hoops\", \"chuff\", \"bot\", \"bottom\"]) ➞ [\"hoops\", \"",
    "tags": [
      "objects",
      "strings",
      "sorting"
    ],
    "title": "Vowel Families"
  },
  {
    "_id": "xxqSGobjKXo3hDM4h",
    "difficulty": 2.506666666666667,
    "language": "python3",
    "summary": "Write a function that takes a string as an argument and returns a list of all the words inflected by \"-ing\". Your function should also exclude all the mono-syllabic words ending in \"-ing\" (e.g. bing, sing, sling, ...). Although these words end in \"-ing\", the \"-ing\" is not an inflection affix.\n\nExamples\ning_extractor(\"coming bringing Letting sing\") ➞ [\"coming\",",
    "tags": [
      "regex",
      "strings"
    ],
    "title": "Extracting Words with \"-ing\"  Inflection"
  },
  {
    "_id": "A8gEGRXqMwRWQJvBf",
    "difficulty": 2.5108108108108107,
    "language": "python3",
    "summary": "Given a 3x3 matrix of a completed tic-tac-toe game, create a function that returns whether the game is a win for \"X\", \"O\", or a \"Draw\", where \"X\" and \"O\" represent themselves on the matrix, and \"E\" represents an empty spot.\n\nExamples\ntictactoe([\n  [\"X\", \"O\", \"X\"],\n  [\"O\", \"X\",  \"O\"],\n  [\"O\", \"X\",  \"X\"]\n]) ➞ \"X\"\n\ntictactoe([\n  [\"O\", \"O\", \"O\"],\n  [\"O\", \"X\", \"X\"]",
    "tags": [
      "arrays",
      "games",
      "logic",
      "numbers"
    ],
    "title": "Tic Tac Toe"
  },
  {
    "_id": "6vSZmN66xhMRDX8YT",
    "difficulty": 2.512555391432792,
    "language": "python3",
    "summary": "Create a function that takes a list of numbers or strings and returns a list with the items from the original list stored into sublists. Items of the same value should be in the same sublist.\n\nExamples\nadvanced_sort([2, 1, 2, 1]) ➞ [[2, 2], [1, 1]]\n\nadvanced_sort([5, 4, 5, 5, 4, 3]) ➞ [[5, 5, 5], [4, 4], [3]]\n\nadvanced_sort([\"b\", \"a\", \"b\", \"a\", \"c\"]) ➞ [[\"b\",",
    "tags": [
      "algorithms",
      "arrays",
      "sorting",
      "loops"
    ],
    "title": "Advanced List Sort"
  },
  {
    "_id": "8vBvgJMc2uQJpD6d7",
    "difficulty": 2.5199004975124377,
    "language": "python3",
    "summary": "Create a function that returns a list containing the prime factors of whatever integer is passed to it.\n\nExamples\nprime_factors(20) ➞ [2, 2, 5]\n\nprime_factors(100) ➞ [2, 2, 5, 5]\n\nprime_factors(8912234) ➞ [2, 47, 94811]\n\nNotes\nImplement your solution using trial division.\nYour solution should not require recursion.",
    "tags": [
      "math",
      "numbers",
      "algorithms",
      "loops"
    ],
    "title": "Prime Factorization of an Integer"
  },
  {
    "_id": "mJpjpgxkxvTY4Qbwf",
    "difficulty": 2.52,
    "language": "python3",
    "summary": "Create a function that takes a 5x5 2D list and returns True if it has at least one Bingo, and False if it doesn't.\n\nExamples\nbingo_check([\n  [45, \"x\", 31, 74, 87],\n  [64, \"x\", 47, 32, 90],\n  [37, \"x\", 68, 83, 54],\n  [67, \"x\", 98, 39, 44],\n  [21, \"x\", 24, 30, 52]\n]) ➞ True\n\nbingo_check([\n  [\"x\", 43, 31, 74, 87],\n  [64, \"x\", 47, 32, 90],\n  [37, 65, \"x\", 83, 54],",
    "tags": [
      "arrays",
      "algorithms",
      "conditions"
    ],
    "title": "Bingo Check"
  },
  {
    "_id": "ZwmfET5azpvBTWoQT",
    "difficulty": 2.525,
    "language": "python3",
    "summary": "A word nest is created by taking a starting word, and generating a new string by placing the word inside itself. This process is then repeated.\n\nNesting 3 times with the word \"incredible\":\n\nstart  = incredible\nfirst  = incre(incredible)dible\nsecond = increin(incredible)credibledible\nthird  = increinincr(incredible)ediblecredibledible\n\nThe final nest is increin",
    "tags": [
      "conditions",
      "strings",
      "language_fundamentals",
      "regex"
    ],
    "title": "Word Nests (Part 2)"
  },
  {
    "_id": "PLdJr4S9LoKHHjDJC",
    "difficulty": 2.5256410256410255,
    "language": "python3",
    "summary": "Matt wants to make Rubik Cubes. These Rubiks should be in the shape of a full cube, and it shouldn't have any missing parts.\n\nThis is a full cube:\n\nFull\n\nThis is not a full cube:\n\nFull\n\nAnd he asks his friend to draw some patterns. When his friend gives him these Rubik's Cube patterns, he realizes that some of them are wrong or missing. Help him identify them!",
    "tags": [
      "algorithms",
      "geometry",
      "math",
      "arrays"
    ],
    "title": "Check Rubik's Cubes"
  },
  {
    "_id": "Q7oecYfjkq7tHwPoA",
    "difficulty": 2.526315789473684,
    "language": "python3",
    "summary": "You are in some climbing competition. You start with some stamina which is a positive integer number. And you have obstacles in a list. Each number in list represents obstacle height.\n\nWhile climbing up you lose 2 stamina for up to 1 meter climbed. So if you climb 0.3m up you lose 2 stamina, if you climb 1m you lose 2 stamina, if you climb 1.8m you lose 4 stam",
    "tags": [
      "algorithms",
      "arrays",
      "conditions",
      "logic"
    ],
    "title": "Climbing Competition"
  },
  {
    "_id": "EuHGfJfCeLyx9BEdG",
    "difficulty": 2.526315789473684,
    "language": "python3",
    "summary": "Ava, Mark, Sheila, and Pete are at a party. However, Ava and Sheila are only staying if there are at least 4 people, Pete is only staying if there's 1 person, and Mark is only staying if there are at least 5 people. Therefore, Mark leaves, which makes Ava and Sheila leave, and Pete is left alone.\n\nGiven a list with the preferences of every person at a party fo",
    "tags": [
      "recursion",
      "numbers"
    ],
    "title": "Party People Part I: Make it Recursive"
  },
  {
    "_id": "whmsRve8YQ23wZuh4",
    "difficulty": 2.5269461077844313,
    "language": "python3",
    "summary": "In this challenge, sort a list containing a series of dates given as strings. Each date is given in the format DD-MM-YYYY_HH:MM:\n\n\"12-02-2012_13:44\"\n\nThe priority of criteria used for sorting will be:\nYear\nMonth\nDay\nHours\nMinutes\n\nGiven a list lst and a string mode, implement a function that returns:\nif mode is equal to \"ASC\", the list lst sorted ascendigly;\ni",
    "tags": [
      "dates",
      "strings",
      "sorting"
    ],
    "title": "Sort the Dates"
  },
  {
    "_id": "pEG8G4se5WBQkckF2",
    "difficulty": 2.5283018867924527,
    "language": "python3",
    "summary": "Write a function that sorts the words in a given string lexicographically (lexical sort) and by length in reverse order.\n\nExamples\nreverse_sort(\"You've rocked the pragmatic world in the making!\")\n ➞ \"pragmatic making! You've rocked world the the in\"\n\nreverse_sort(\"Tesh makes my world worth enjoying and living for.\")\n ➞ \"enjoying living worth world makes Tesh f",
    "tags": [
      "sorting",
      "strings"
    ],
    "title": "Reverse Sort: Lexical and Length"
  },
  {
    "_id": "cToBLderwJrpqML8w",
    "difficulty": 2.5294117647058822,
    "language": "python3",
    "summary": "Create a function that takes a list of football clubs with properties: name, wins, loss, draws, scored, conceded, and returns the team name with the highest number of points. If two teams have the same number of points, return the team with the largest goal difference.\n\nHow to Calculate Points and Goal Difference\nteam = { \"name\": \"Manchester United\", \"wins\": 3",
    "tags": [
      "objects",
      "sorting",
      "arrays"
    ],
    "title": "Premier League Champions"
  },
  {
    "_id": "2iibnCci6G42f8Mjr",
    "difficulty": 2.5297029702970297,
    "language": "python3",
    "summary": "The classic game of Mastermind is played on a tray on which the Mastermind conceals a code and the Guesser has 10 tries to guess it. The code is a sequence of 4 (or 6, sometimes more) pegs of different colors. Each guess is a corresponding sequence of 4 (or more) pegs of different colors. A guess is \"correct\" when the color of every peg in the guess exactly ma",
    "tags": [
      "algorithms",
      "games",
      "logic"
    ],
    "title": "Mastermind"
  },
  {
    "_id": "eznq7gLhLWmKKdsx9",
    "difficulty": 2.5301204819277108,
    "language": "python3",
    "summary": "A retailer is having a store-wide \"buy 2, get 1 free\" sale. For legal reasons, they can't charge their customers $0 for an article so a discount is applied to all products instead. For example, if a customer gets three products a, b and c:\n\nProduct A | Product B | Product C\n:--- | :--- | ---\n$15.99 | $23.50 | $10.75\n\nShe gets the cheapest one for free, so she",
    "tags": [
      "math",
      "arrays"
    ],
    "title": "Sales Season"
  },
  {
    "_id": "RX6eLpSqZENJcGAWf",
    "difficulty": 2.5319148936170213,
    "language": "python3",
    "summary": "Create a function whose return value always passes equality checks.\n\nExamples\nequals == 0 ➞ True\n\nequals() == [] ➞ True\n\nequals() == (lambda: 1) ➞ True\n\nNotes\nThe challenge is passable.",
    "tags": [
      "games",
      "logic",
      "language_fundamentals",
      "validation"
    ],
    "title": "Messing with Equality"
  },
  {
    "_id": "bPzBa5JKvb6XFyKMs",
    "difficulty": 2.5319148936170213,
    "language": "python3",
    "summary": "Primiera (from the french word prime, \"prize\") is a combination of cards of Scopa, a popular Italian card game.\n\nFor establishing the value of the Primiera, a separate point scale is used for selecting the best cards in the player's deck, in each of the four suits and totaling those four cards point values. A Primiera requires at least one card for each suit,",
    "tags": [
      "games",
      "arrays",
      "conditions"
    ],
    "title": "The Primiera"
  },
  {
    "_id": "x3t264gonaSRXT8GL",
    "difficulty": 2.533333333333333,
    "language": "python3",
    "summary": "Given an integer n, create a function that returns the length of the repeating cycle of the sequence 1/n. If the cycle is non-repetitive, return -1.\n\nrepeating_cycle(13) ➞ 6\n1/13 = 0.076923 076923 076923 076923 ...\nlength of 076923 is 6.\n\nExamples\nrepeating_cycle(5) ➞ -1\n1/5 = 0.2 (non-repeative)\n\nrepeating_cycle(33) ➞ 2\n1/33 = 0.03 03 03 03 03 03 03 03\nlength",
    "tags": [
      "algorithms",
      "control_flow",
      "math",
      "numbers"
    ],
    "title": "Repeating Cycle"
  },
  {
    "_id": "jYNstx2QfB5MjGrox",
    "difficulty": 2.533333333333333,
    "language": "python3",
    "summary": "Create a function that takes three integer parameters: a number n,  number of iterations, and step. You have to implement an algorithm, which increases the given number as explained below:\n\nn = 143726, iterations = 16, step = 3\nsimpleIncrement(n, iterations, step) ➞ 243826\n\nStep 1: We start from the first digit and increment the 4th digit because the step is 3",
    "tags": [
      "algorithms",
      "logic",
      "loops",
      "numbers"
    ],
    "title": "Not a Simple Increment"
  },
  {
    "_id": "iLLqX4nC2HT2xxg3F",
    "difficulty": 2.535211267605634,
    "language": "python3",
    "summary": "You are given a list which may contain sublists. Your task is to find the depth of the  deepest sublist.\n\n[a] = 1 depth\n[[a]] = 2 depth\n[[[a]]] = 3 depth, etc\n\nExamples\ndeepest([1, [2, 3], 4, [5, 6]]) ➞ 2\n\ndeepest([[[[[[[[[[1]]]]]]]]]]) ➞ 10\n\ndeepest([1, 4, [1, 4, [1, 4, [1, 4, [5]]]]]) ➞ 5\n\nNotes\nN/A",
    "tags": [
      "arrays"
    ],
    "title": "Deepest Sublist"
  },
  {
    "_id": "EJRa8efMPoCwzLNRW",
    "difficulty": 2.536842105263158,
    "language": "python3",
    "summary": "Juan loves the Dakti song and wants to memorize the chorus of the song. His friend sent him the chorus in phrases, but the phrases are somewhat strange; they do not have an order and they have numbers. His friend helps Juan organize the chorus of the song.\n\nUse RegEx, natural sorting, sorting, or lambda functions; your imagination has no limits.\n\nFirst, organi",
    "tags": [
      "sorting",
      "strings",
      "arrays",
      "regex"
    ],
    "title": "Dakti  🌊🌴"
  },
  {
    "_id": "quMt6typruySiNSAJ",
    "difficulty": 2.537037037037037,
    "language": "python3",
    "summary": "An out-shuffle, also known as an out Faro shuffle or a perfect shuffle, is a controlled method for shuffling playing cards. It is performed by splitting the deck into two equal halves and interleaving them together perfectly, with the condition that the top card of the deck remains in place.\n\nUsing a list to represent a deck of cards, an out-shuffle looks like",
    "tags": [
      "arrays",
      "math",
      "loops"
    ],
    "title": "How Many Shuffles?"
  },
  {
    "_id": "yiEHCxMC9byCqEPNX",
    "difficulty": 2.5377358490566038,
    "language": "python3",
    "summary": "A palindrome is a series of letters or numbers that reads equivocally backwards. Write a recursive function that determines whether a given string is a palindrome or not.\n\nExamples\nis_palindrome(\"Go hang a salami, I'm a lasagna hog!\") ➞ True\n\nis_palindrome(\"This phrase, surely, is not a palindrome!\") ➞ False\n\nis_palindrome(\"Eva, can I see bees in a cave?\") ➞ T",
    "tags": [
      "recursion",
      "strings",
      "validation",
      "logic"
    ],
    "title": "Recursion: Palindrome Phrase"
  },
  {
    "_id": "A5QFgYzzyxT2Fb5j4",
    "difficulty": 2.5384615384615383,
    "language": "python3",
    "summary": "Modify the inefficient code in the Code tab so it can pass the tests.\n\nExamples\nmod(base, exp, k) ➞ (base(2exp)) % k\n\nmod(10, 1, 99 ) ➞ 1\n\nmod(3, 2, 15 ) ➞ 6\n\nmod(123, 20, 1234 ) ➞ 391\n\nNotes\nTry using loops.",
    "tags": [
      "math",
      "bugs",
      "loops"
    ],
    "title": "Modular Arithmetic (Part #1)"
  },
  {
    "_id": "zrkRjdSwTvbijMXJs",
    "difficulty": 2.5384615384615383,
    "language": "python3",
    "summary": "“To the future or to the past, to a time when thought is free, when men are different from one another and do not live alone — to a time when truth exists and what is done cannot be undone: From the age of uniformity, from the age of solitude, from the age of Big Brother, from the age of doublethink — greetings!” ⁠— Winston Smith's secret writings in George Or",
    "tags": [
      "cryptography",
      "numbers",
      "strings",
      "formatting"
    ],
    "title": "One Time Pad Training Program, Pt. 1"
  },
  {
    "_id": "YJhKbvRDnakuBxn8e",
    "difficulty": 2.5384615384615383,
    "language": "python3",
    "summary": "You are stuck in a multi-storey car parking lot. Your task is to exit the carpark using only the staircases. Exit is always at the bottom right of the ground floor.\n\nCreate a function that takes a two-dimensional list where:\n\nFree carparking spaces are represented by a 0\nStaircases are represented by a 1\nYour starting position is represented by a 2 and can be",
    "tags": [
      "games",
      "arrays",
      "logic"
    ],
    "title": "Car Park Exit"
  },
  {
    "_id": "sKNcrdJT4MpPfESrM",
    "difficulty": 2.54,
    "language": "python3",
    "summary": "Your computer might have been infected by a virus! Create a function that finds the viruses in files and removes them from your computer.\n\nExamples\nremove_virus(\"PC Files: spotifysetup.exe, virus.exe, dog.jpg\") ➞ \"PC Files: spotifysetup.exe, dog.jpg\"\n\nremove_virus(\"PC Files: antivirus.exe, cat.pdf, lethalmalware.exe, dangerousvirus.exe \") ➞ \"PC Files: antiviru",
    "tags": [
      "strings",
      "formatting"
    ],
    "title": "Remove the Computer Virus"
  },
  {
    "_id": "mHpy3KZ9rjRApverX",
    "difficulty": 2.5405405405405403,
    "language": "python3",
    "summary": "There was supposed to be a challenge here, but the only things present are random tests. Pass them anyways.\n\nExamples\nimport random\n\nmanipulate() == random.randrange(1000) ➞ True\n\nmanipulate() == random.randrange(2024) ➞ True\n\nmanipulate() == random.randrange(60049) ➞ True\n\nNotes\nThe challenge is passable.",
    "tags": [
      "logic",
      "games",
      "language_fundamentals"
    ],
    "title": "Manipulating Randomness"
  },
  {
    "_id": "6FGu55pesinTfcD23",
    "difficulty": 2.542372881355932,
    "language": "python3",
    "summary": "Given a dictionary containing up to six phrases, return a list containing the matching phrases according to the given string (p).\nIgnore any digit that is placed after or before the given string.\nWhether the first letter is capitalized or not, if all letters of the word match the given string (p), it is valid.\nIf it does not match the given string (p) then Non",
    "tags": [
      "arrays",
      "formatting",
      "objects",
      "scope"
    ],
    "title": "Find the Pattern"
  },
  {
    "_id": "i747Wtc7pCukr8GRC",
    "difficulty": 2.5425531914893615,
    "language": "python3",
    "summary": "Write two functions:\n\nOne that returns the maximum product of three numbers in a list.\nOne that returns the minimum product of three numbers in a list.\n\nExamples\nmax_product([-8, -9, 1, 2, 7]) ➞ 504\n\nmax_product([-8, 1, 2, 7, 9]) ➞ 126\n\nmin_product([1, -1, 1, 1]) ➞ -1\n\nmin_product([-5, -3, -1, 0, 4]) ➞ -15\n\nNotes\nN/A",
    "tags": [
      "numbers",
      "arrays"
    ],
    "title": "Maximum and Minimum Product Triplets"
  },
  {
    "_id": "XKEDTh2NMtTLSyCc2",
    "difficulty": 2.5428571428571427,
    "language": "python3",
    "summary": "Create a function that takes a number and checks whethers the given number is a valid credit card number using Luhn Algorithm. The return value is boolean.\n\nExamples\nvalidcreditcard(4111111111111111) ➞ True\nVisa Card\n\nvalidcreditcard(6451623895684318) ➞ False\nNot a valid credit card number.\n\nvalidcreditcard(6451623895684318) ➞ False\n\nNotes\nAmerican Express/VIS",
    "tags": [
      "algorithms",
      "logic",
      "validation"
    ],
    "title": "Mod 10 Algorithm"
  },
  {
    "_id": "XhyPkjEDQ3Mz5AFaH",
    "difficulty": 2.5428571428571427,
    "language": "python3",
    "summary": "Given an input string s and a pattern p, implement regular expression matching with support for \".\" and \"*\" .\n\nExamples\nis_match(\"aa\", \"a\") ➞ false\n\"a\" does not match the entire string \"aa\".\n\nis_match(\"aa\", \"a*\") ➞ true\n\"*\" means zero or more of the preceding element, \"a\".\nTherefore, by repeating \"a\" once, it becomes \"aa\".\n\nis_match(\"ab\", \".*\") ➞ true\n\".\" mean",
    "tags": [
      "algorithms",
      "higher_order_functions",
      "logic",
      "regex"
    ],
    "title": "Regular Expression Matching"
  },
  {
    "_id": "XDgNNWhxKemaurSGB",
    "difficulty": 2.543859649122807,
    "language": "python3",
    "summary": "Given two positive integers n and k, generate all binaries between the integers 0 and (2^n) - 1 , inclusives. These binaries will be sorted in descending order according to the number of existing 1s on it, if there is a tie, we choose the lowest numerical value. Return the k-th element from the sorted list created.\n\nFor n = 3 and k = 5 for exemple, the numbers",
    "tags": [
      "algorithms",
      "logic",
      "sorting",
      "data_structures"
    ],
    "title": "K-th Element of a Binary Sorted List"
  },
  {
    "_id": "WxkFoXTLYiAq57uDq",
    "difficulty": 2.5454545454545454,
    "language": "python3",
    "summary": "The insurance guy calls. They were about to pay you all that fortune you've been anxiously waiting for, but they detected further irregularities; the list of stolen items is misformatted and appears to contain other entries that don't belong there. Find and remove them.\n\nYou receive a dict  with nested dicts with strings as values. Convert their values to numb",
    "tags": [
      "objects",
      "arrays",
      "loops"
    ],
    "title": "Burglary Series (23): Find and Remove"
  },
  {
    "_id": "KLke67efuam6ajLrt",
    "difficulty": 2.546666666666667,
    "language": "python3",
    "summary": "An out-shuffle, also known as an out faro shuffle or a perfect shuffle, is a controlled method for shuffling playing cards. It is performed by splitting the deck into two equal halves and interleaving them together perfectly, with the condition that the top card of the deck remains in place.\n\nUsing an array to represent a deck of cards, an out-shuffle looks li",
    "tags": [
      "loops",
      "logic",
      "validation"
    ],
    "title": "The Out-Shuffle"
  },
  {
    "_id": "skTzXTTNQqjMnncfY",
    "difficulty": 2.5494505494505493,
    "language": "python3",
    "summary": "A non-capturing group will match \"x\" in (?:x), however the match won't be stored, meaning you won't be able to access it using backreference, and it won't be output separately when using re.findall().\n\nLet's see an example of the difference between capturing and non-capturing groups:\n\ntxt = \"red car, blue car, yellow car, green car, red car, red bike, blue bik",
    "tags": [
      "regex"
    ],
    "title": "RegEx XXI: Non-Capturing Groups"
  },
  {
    "_id": "gQgFJiNy8ZDCqaZb4",
    "difficulty": 2.55,
    "language": "python3",
    "summary": "Given two words, overlap them in such a way, morphing the last few letters of the first word with the first few letters of the second word. Return the shortest overlapped word possible.\n\nExamples\noverlap(\"sweden\", \"denmark\") ➞ \"swedenmark\"\n\noverlap(\"edabit\", \"iterate\") ➞ \"edabiterate\"\n\noverlap(\"honey\", \"milk\") ➞ \"honeymilk\"\n\noverlap(\"dodge\", \"dodge\") ➞ \"dodge\"",
    "tags": [
      "strings",
      "loops",
      "algorithms"
    ],
    "title": "Word Overlapping"
  },
  {
    "_id": "ojNRprg7fKpWJpj47",
    "difficulty": 2.550387596899225,
    "language": "python3",
    "summary": "Given a sentence, create a function which shifts the first letter of each word to the next word in the sentence (shifting right).\n\nExamples\nshift_sentence(\"create a function\") ➞ \"freate c aunction\"\n\nshift_sentence(\"it should shift the sentence\") ➞ \"st ihould shift she tentence\"\n\nshift_sentence(\"the output is not very legible\") ➞ \"lhe tutput os iot nery vegible",
    "tags": [
      "strings",
      "loops"
    ],
    "title": "First Letter Shift"
  },
  {
    "_id": "Wd9cCvFKC3fHzgqSx",
    "difficulty": 2.550724637681159,
    "language": "python3",
    "summary": "Create a function that takes a number num and returns each place value in the number.\n\nExamples\nnum_split(39) ➞ [30, 9]\n\nnum_split(-434) ➞ [-400, -30, -4]\n\nnum_split(100) ➞ [100, 0, 0]\n\nNotes\nN/A",
    "tags": [
      "arrays",
      "numbers"
    ],
    "title": "Splitting Up Numbers"
  },
  {
    "_id": "n5znbTz2vRcjqmnWt",
    "difficulty": 2.550724637681159,
    "language": "python3",
    "summary": "Dice eyes\n\nWrite a function that returns the dice with the correct amount of eyes in a single string.\n\n6 can be written as:\n\nO-O\nO-O\nO-O\n\nOr:\n\nO-O/O-O/O-O  // with slashes and dashes\n\nAnd 1:\n\n---/-O-/---\n\nYour function will have to return the dice as shown in the image. Look at the examples and the Tests tab what is asked. Multiple dice are separated by a comm",
    "tags": [
      "numbers",
      "loops"
    ],
    "title": "Roll the Dice"
  },
  {
    "_id": "hZ4HzhboCJ5dDiNve",
    "difficulty": 2.5511811023622046,
    "language": "python3",
    "summary": "Create a function that takes a string and returns the reversed string. However there's a few rules to follow in order to make the challenge interesting:\n\nThe UPPERCASE/lowercase positions must be kept in the same order as the original string (see example #1 and #2).\nSpaces must be kept in the same order as the original string (see example #3).\n\nExamples\nspecia",
    "tags": [
      "strings",
      "formatting"
    ],
    "title": "Reverse the String (with a catch)"
  },
  {
    "_id": "Z3iMJBCPFr5LHQbwh",
    "difficulty": 2.5526315789473686,
    "language": "python3",
    "summary": "A perfect square binomial is a trinomial that when factored gives you the square of a binomial. For example, the trinomial x²+2x+1 is a perfect square binomial because it factors to (x+1)².\n\nThree integers (a,  b, and c) are randomly (and independently) chosen between 1 and n (inclusive) where n is an integer greater than one. Create a function that takes a nu",
    "tags": [
      "algebra",
      "math"
    ],
    "title": "Perfect Square Binomial"
  },
  {
    "_id": "abEZ5AEPaDBHFjfJG",
    "difficulty": 2.5526315789473686,
    "language": "python3",
    "summary": "Create a function that takes a string and returns True or False depending on whether or not the given formula is correct.\n\nExamples\nformula(\"6 * 4 = 24\") ➞ True\n\nformula(\"18 / 17 = 2\") ➞ False\n\nformula(\"\") ➞ None\n\nNotes\nYou have to figure out what a is.\nIgnore the spaces.\nIf the input is an empty string \"\", return None.\nYou do not need to dynamically find the",
    "tags": [
      "algebra",
      "math",
      "numbers",
      "validation"
    ],
    "title": "Check if the Formula is Correct"
  },
  {
    "_id": "mnTE5D8oKQLGKKwLQ",
    "difficulty": 2.5538461538461537,
    "language": "python3",
    "summary": "Create a function that takes a list of 4 tuples. Each tuple consists of two numbers representing the x coordinate and y coordinate of a point on the Cartesian plane. Return True if these 4 points form a rectangle, False if they don't. Rectangles can be upright or tilted.\n\nExamples\nis_rectangle([(-1, -2), (-1, 3), (1, -1), (-3, 2)]) ➞ True\n\nis_rectangle([(-1, -",
    "tags": [
      "algebra",
      "math",
      "validation"
    ],
    "title": "Rectangle or Not? (Part 2)"
  },
  {
    "_id": "76pRYoqrmEQQtFAME",
    "difficulty": 2.5555555555555554,
    "language": "python3",
    "summary": "In this challenge, you have to establish if a given integer is an Astonishing number. An Astonishing number is an integer that, when partitioned into two parts a (left) and b (right), is equal to the sum of the consecutive numbers from a up to b (if a is lower than b), or from b up to a (if a is greater than b).\n\nGiven a positive integer num, implement a funct",
    "tags": [
      "numbers",
      "math",
      "loops"
    ],
    "title": "Astonishing Numbers"
  },
  {
    "_id": "86CrsZ2rRMnCsDSza",
    "difficulty": 2.5555555555555554,
    "language": "python3",
    "summary": "Create a [finite-state automaton] (https://en.wikipedia.org/wiki/Finite-state_machine) that determines whether a binary number is divisible by five. The finite-state automaton from [this challenge] (https://edabit.com/challenge/mmiLWJzP3mvhjME7b) can be constructed as follows:\n\nExample FSA\ndivisible = {\n  \"S0\": [\"S0\", \"S1\"],\n  \"S1\": [\"S2\", \"S0\"],\n  \"S2\": [\"S1\"",
    "tags": [
      "data_structures",
      "functional_programming",
      "math"
    ],
    "title": "FSA: Creating Machines"
  },
  {
    "_id": "p8iNsRCtj3AdJsYjS",
    "difficulty": 2.5555555555555554,
    "language": "python3",
    "summary": "Given a column title as it appears in an Excel sheet return its corresponding column number.\n\nThe number is computed in the following way:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28\n...\n\nExamples\ntitletonumber(\"A\") ➞ 1\n\ntitletonumber(\"R\") ➞ 18\n\ntitletonumber(\"AB\") ➞ 28\n\nNotes\n1 <= len(s) <= 7\ns consists only of uppercase English letters.",
    "tags": [
      "language_fundamentals",
      "numbers",
      "strings"
    ],
    "title": "Excel Sheet Column Number"
  },
  {
    "_id": "oo5zkiydtRB344ZcL",
    "difficulty": 2.5555555555555554,
    "language": "python3",
    "summary": "Create a function that returns how many times it's been called previously. Do not use a global variable.\n\nExamples\ncounter() ➞ 0\n\ncounter() ➞ 1\n\ncounter() ➞ 2\n\nNotes\nThe first time it's called, the function should return 0.",
    "tags": [
      "language_fundamentals"
    ],
    "title": "Creating a Counter"
  },
  {
    "_id": "o7u9hqTW5AY3SoZgT",
    "difficulty": 2.5569620253164556,
    "language": "python3",
    "summary": "Create a function which replaces all instances of \"nts\" with \"nce\" and vice versa if they are at the end of a word.\n\nExamples\nswitcheroo(\"The elephants in France were chased by ants!\") ➞ \"The elephance in Frants were chased by ance!\"\n\nswitcheroo(\"While he rants, I fall into a trance...\") ➞ \"While he rance, I fall into a trants...\"\n\nswitcheroo(\"Bounced over the",
    "tags": [
      "strings",
      "regex"
    ],
    "title": "A Subtle Switcheroo"
  },
  {
    "_id": "ZeeWN5NdFa8ALJq5G",
    "difficulty": 2.5576923076923075,
    "language": "python3",
    "summary": "Create a function that returns which chapter is nearest to the page you're on. If two chapters are equidistant, return the chapter with the higher page number.\n\nExamples\nnearest_chapter({\n  \"Chapter 1\" : 1,\n  \"Chapter 2\" : 15,\n  \"Chapter 3\" : 37\n}, 10) ➞ \"Chapter 2\"\n\nnearest_chapter({\n  \"New Beginnings\" : 1,\n  \"Strange Developments\" : 62,\n  \"The End?\" : 194,",
    "tags": [
      "objects",
      "math",
      "loops"
    ],
    "title": "Nearest Chapter"
  },
  {
    "_id": "djJpmZPPBx3JaAqcK",
    "difficulty": 2.5576923076923075,
    "language": "python3",
    "summary": "Maya numeral system was vigesimal (base 20) and positional: units, tens, hundreds (and so on) were read as descendant progressive powers of 20, instead of 10 like we do with our decimal system. Some examples:\n\n39 => (1 x 20¹) + (19 x 20º)\n815 => (2 x 20²) + (0 x 20¹) + (15 x 20º)\n16125 => (2 x 20³) + (0 x 20²) + (6 x 20¹) + (5 x 20º)\n\nEvery digit (as to say th",
    "tags": [
      "math",
      "formatting",
      "numbers"
    ],
    "title": "Maya Number System"
  },
  {
    "_id": "cQJxwn6iCAuEJ3EKd",
    "difficulty": 2.5606060606060606,
    "language": "python3",
    "summary": "Create a function that will recursively count the number of digits of a number. Conversion of the number to a string is not allowed, thus, the approach is recursive.\n\nExamples\ndigits_count(4666) ➞ 4\n\ndigits_count(544) ➞ 3\n\ndigits_count(121317) ➞ 6\n\ndigits_count(0) ➞ 1\n\ndigits_count(12345) ➞ 5\n\ndigits_count(1289396387328) ➞ 13\n\nNotes\nAll inputs are integers but",
    "tags": [
      "recursion",
      "numbers"
    ],
    "title": "Recursion: Count The Digits"
  },
  {
    "_id": "JBTLDxvdzpjyJA4Nv",
    "difficulty": 2.5636363636363635,
    "language": "python3",
    "summary": "Steve has a string of lowercase characters in range ascii[[\"a\"..\"z\"]]. He wants to reduce the string to its shortest length by doing a series of operations. In each operation, he selects a pair of adjacent lowercase letters that match, and he deletes them. For instance, the string aab could be shortened to b in one operation.\n\nSteve’s task is to delete as many",
    "tags": [
      "algorithms",
      "regex"
    ],
    "title": "Super Reduced String"
  },
  {
    "_id": "fRZMqCpyxpSgmriQ6",
    "difficulty": 2.5636363636363635,
    "language": "python3",
    "summary": "Create a function that takes a string consisting of lowercase letters, uppercase letters and numbers and returns the string sorted in the same way as the examples below.\n\nExamples\nsorting(\"eA2a1E\") ➞ \"aAeE12\"\n// Don't repeat letters.\n\nsorting(\"Re4r\") ➞ \"erR4\"\n\nsorting(\"6jnM31Q\") ➞ \"jMnQ136\"\n\nsorting(\"846ZIbo\") ➞ \"bIoZ468\"\n\nNotes\nDon't repeat letters (numbers c",
    "tags": [
      "sorting",
      "strings",
      "algorithms"
    ],
    "title": "Sort the String"
  },
  {
    "_id": "72KukSssxk2eHrWqx",
    "difficulty": 2.5641025641025643,
    "language": "python3",
    "summary": "Create a function that extracts the characters from a list (or a string) on odd or even positions, depending on the specifier. The string \"odd\" for items on odd positions (... 5, 3, 1) and \"even\" for even positions (... 6, 4, 2) from the last item of that list or string.\n\nExamples\ncharatpos([2, 4, 6, 8, 10], \"even\") ➞ [4, 8]\n4 & 8 occupy the 4th & 2nd position",
    "tags": [
      "algorithms",
      "arrays",
      "logic"
    ],
    "title": "Oddly or Evenly Positioned From Last"
  },
  {
    "_id": "7FyTyi68Df2CxLx6C",
    "difficulty": 2.5652173913043477,
    "language": "python3",
    "summary": "Create a Pizza class with the attributes order_number and ingredients (which is given as a list). Only the ingredients will be given as input.\n\nYou should also make it so that its possible to choose a ready made pizza flavour rather than typing out the ingredients manually! As well as creating this Pizza class, hard-code the following pizza flavours.\n\nName | I",
    "tags": [
      "classes",
      "objects",
      "language_fundamentals"
    ],
    "title": "Freshly Made Pizzas"
  },
  {
    "_id": "7soAnzpZToSxztnDr",
    "difficulty": 2.5652173913043477,
    "language": "python3",
    "summary": "The shift left operation is similar to multiplication by powers of two. This can also be achieved with repetitive addition, thus, the process can be done recursively.\n\nSample calculation using the shift left operator <<:\n\n10 << 3 = 10 * 2^3 = 10 * 8 = 80\n-32 << 2 = -32 * 2^2 = -32 * 4 = -128\n5 << 2 = 5 * 2^2 = 5 * 4 = 20\n\nCreate a recursive function that mimic",
    "tags": [
      "recursion",
      "numbers"
    ],
    "title": "Recursion: Shift Left by Addition"
  },
  {
    "_id": "ruPm4LX6fEvvLJk9j",
    "difficulty": 2.5652173913043477,
    "language": "python3",
    "summary": "A number is Esthetic if, in any base from base2 up to base10, the absolute difference between every pair of its adjacent digits is constantly equal to 1.\n\nnum = 441 (base10)\nAdjacent pairs of digits:\n|4, 4|, |4, 1|\nThe absolute difference is not constant\n441 is not Esthetic in base10\n\n441 in base4 = 12321\nAdjacent pairs of digits:\n|1, 2|, |2, 3|, |3, 2|, |2, 1",
    "tags": [
      "arrays",
      "numbers",
      "loops"
    ],
    "title": "Esthetic Numbers"
  },
  {
    "_id": "7DrvnMeY2Ebzk2mfH",
    "difficulty": 2.566666666666667,
    "language": "python3",
    "summary": "Write three regular expressions that will be passed to re.sub() in order to modify the body element in our HTML file:\nOne called body_insert that will be used to add elements immediately after the body element opening tag: ``.\nOne called body_append that will be used to add elements immediately before the body element closing tag: ``.\nOne called body_rewrite t",
    "tags": [
      "regex"
    ],
    "title": "RegEx Exercise #4: Edit the Body Element"
  },
  {
    "_id": "7yo5FJX4xFbNxim5q",
    "difficulty": 2.5681818181818183,
    "language": "python3",
    "summary": "Harry is a postman. He's got a post office with a size of n*m(a  matrix / 2D list). Each slot at the 2D list represents the number of letters in that spot. Harry can only go right and down. He starts at (0, 0), and ends at (n-1, m-1). n represents the height, and m the length. Return the maximum amount of letters he can pick up. He can only pick up letters if",
    "tags": [
      "logic",
      "arrays",
      "math"
    ],
    "title": "Postman Harry"
  },
  {
    "_id": "N5gBcQZQwJFwb8Z2k",
    "difficulty": 2.5689655172413794,
    "language": "python3",
    "summary": "Create a function that uses bisection search to compute the approximative value of the square root of a number.\nUse any integer or float as an argument.\nUse a delta variable of 0.01 to know when a result is valid (i.e. if the result squared is between n - delta and n + delta, it's considered valid).\n\nExamples\nbisec_sqrt(69) ➞ 8.307\n\nbisec_sqrt(16) ➞ 4.0\n\nbisec",
    "tags": [
      "algebra",
      "math",
      "recursion"
    ],
    "title": "Get Sqrt of a Number Using Bisection Search"
  },
  {
    "_id": "YsD3af7LgaH6JRSCH",
    "difficulty": 2.5702479338842976,
    "language": "python3",
    "summary": "In this challenge, you have to add a variable amount of hours, minutes and seconds to a given time, obtaining, in turn, a new adjusted time.\n\nGiven a string now being a timestamp in the format hh:mm:ss, and three integers hrs, mins and sec being the hours, minutes and seconds to add, implement a function that returns a string being the newly adjusted timestamp",
    "tags": [
      "dates",
      "strings",
      "formatting"
    ],
    "title": "To Adjust the Time"
  },
  {
    "_id": "5ZDz5nDDPdfg5BH8K",
    "difficulty": 2.5707070707070705,
    "language": "python3",
    "summary": "Starting with either 3 or 5 and given these operations:\nadd 5\nmultiply by 3\n\nYou should say if it is possible to reach the target number n.\n\nExamples\nonly5and_3(14) ➞ True\n14 = 3*3 + 5\n\nonly5and_3(25) ➞ True\n25 = 5+5+5+5+5\n\nonly5and_3(7) ➞ False\nThere exists no path to the target number 7\n\nNotes\nYou can solve this problem by recursion or algebra.",
    "tags": [
      "algebra",
      "algorithms",
      "recursion",
      "validation"
    ],
    "title": "Fives and Threes Only"
  },
  {
    "_id": "f48nSAebxBNMfmc9D",
    "difficulty": 2.5714285714285716,
    "language": "python3",
    "summary": "Write a function that receives a list of words and a mask.  Return a list of words, sorted alphabetically, that match the given mask.\n\nExamples\nscrambled([”red”, “dee”, “cede”, “reed”, “creed”, “decree”], “re*”) ➞ [“creed”]\n\nscrambled([”red”, “dee”, “cede”, “reed”, “creed”, “decree”], “*”) ➞ [“dee”, “ree”]\n\nNotes\nThe length of a mask will never exceed the leng",
    "tags": [
      "strings",
      "arrays",
      "regex"
    ],
    "title": "Scrambled Letters"
  },
  {
    "_id": "MiCMj8HvevYzGSb8J",
    "difficulty": 2.573529411764706,
    "language": "python3",
    "summary": "A Fibonacci Word is a specific sequence of binary digits (or symbols from any two-letter alphabet). The Fibonacci Word is formed by repeated concatenation in the same way that the Fibonacci numbers are formed by repeated addition.\n\nCreate a function that takes a number n as an argument and returns the first n elements of the Fibonacci Word sequence.\n\nIf n < 2,",
    "tags": [
      "numbers",
      "math",
      "strings"
    ],
    "title": "Fibonacci Word"
  },
  {
    "_id": "WpjKZ54MgfMbjoWKi",
    "difficulty": 2.5737704918032787,
    "language": "python3",
    "summary": "Escape velocity is the minimum speed needed for a free, non-propelled object to escape from the gravitational influence of a massive body, that is, to achieve an infinite distance from it. Escape velocity is a function of the mass of the body and distance to the center of mass of the body.\n\nObjective\nCreate a function that takes a planet as an argument and ret",
    "tags": [
      "physics",
      "math"
    ],
    "title": "Escape Velocity I"
  },
  {
    "_id": "738WMYrYWPXeBgzFs",
    "difficulty": 2.5757575757575757,
    "language": "python3",
    "summary": "Sherlock considers a string to be valid if all characters of the string appear the same number of times. It is also valid if he can remove just 1 character at 1 index in the string, and the remaining characters will occur the same number of times. Given a string txt, determine if it is valid. If so, return \"YES\", otherwise return \"NO\".\n\nFor example, If txt = \"",
    "tags": [
      "algorithms",
      "strings",
      "validation"
    ],
    "title": "Sherlock and the Valid String"
  },
  {
    "_id": "9cuQrhEMwiESfKznk",
    "difficulty": 2.5757575757575757,
    "language": "python3",
    "summary": "This is a companion to my previous challenge.\n\nGiven an English description of an integer in the range 0 to 999, devise a function that returns the integer in numeric form.\n\nExamples\neng2nums(\"four\") ➞  4\n\neng2nums(\"forty\") ➞ 40\n\neng2nums(\"six hundred\") ➞ 600\n\neng2nums(\"one hundred fifteen\") ➞ 115\n\neng2nums(\"seven hundred sixty seven\") ➞ 767\n\nNotes\nNo hyphens",
    "tags": [
      "conditions",
      "numbers",
      "strings"
    ],
    "title": "English to Numbers"
  },
  {
    "_id": "zM5ZTgCbk4hWsEBwQ",
    "difficulty": 2.577777777777778,
    "language": "python3",
    "summary": "The Connell sequence can be represented as a growing series of alternating numbered lines:\n\nIf the line number is odd, the line contains a quantity of odd numbers equal to the line number, sorted ascendingly.\nIf the line number is even, the line contains a quantity of even numbers equal to the line number, sorted ascendingly.\n\nEvery number in a line is equal t",
    "tags": [
      "numbers",
      "arrays",
      "loops"
    ],
    "title": "The Connell Sequence"
  },
  {
    "_id": "yK9ZzTb5AJ2wYoz7u",
    "difficulty": 2.5789473684210527,
    "language": "python3",
    "summary": "Floyd's triangle is a right-angled triangular array of natural numbers. It's defined by filling the rows of the triangle with consecutive numbers, starting with a 1 in the top left corner:\n\nFloyd's triangle\n\nWrite a function that takes an integer n and returns Floyd's triangle's rows as a list of lists. Your function should return one of two possibilities:\nIf",
    "tags": [
      "algorithms",
      "conditions",
      "math"
    ],
    "title": "Floyd's Triangle"
  },
  {
    "_id": "8BQKa98d3s9Kis4vv",
    "difficulty": 2.5806451612903225,
    "language": "python3",
    "summary": "Write a function that takes in three parameters: r, c, i, where:\n\nr and c are the number of rows and columns to initialize a zero matrix.\ni represents the list of incrementing operations (+1).\n\nAnd returns the resulting matrix after applying all the increment operations. Each increment operation will add 1 to the rows or columns specified in the incrementing l",
    "tags": [
      "arrays",
      "higher_order_functions"
    ],
    "title": "Incrementing Rows and Columns"
  },
  {
    "_id": "7cJ8q3gRoYEj2A3jn",
    "difficulty": 2.5833333333333335,
    "language": "python3",
    "summary": "Mubashir needs your help to find out a wrong number in a 2D list.\n\nImagine a 2D list of numbers given below:\n\nlst = [\n  [1, 2, 3, 6 ],\n  [4, 5, 6, 15],\n  [7, 8, 9, 24],\n  [12,15,18,45]\n]\n\nYou can notice that:\nThe end number of each row is the sum of each row's previous numbers.\nThe end number of each column is the sum of each column's previous numbers.\n\nSee be",
    "tags": [
      "algorithms",
      "math",
      "numbers",
      "loops"
    ],
    "title": "Wrong Number"
  },
  {
    "_id": "HTaZiWnsCGgehpgdr",
    "difficulty": 2.5873015873015874,
    "language": "python3",
    "summary": "Traveling through Europe one needs to pay attention to how the license plate in the given country is displayed. When crossing the border you need to park on the shoulder, unscrew the plate, re-group the characters according to the local regulations, attach it back and proceed with the journey.\n\nCreate a solution that can format the dmv number into a plate numb",
    "tags": [
      "formatting",
      "strings"
    ],
    "title": "License Plate"
  },
  {
    "_id": "q5jCspdCvmSjKE9HZ",
    "difficulty": 2.5873015873015874,
    "language": "python3",
    "summary": "Create a function that takes an array of more than three numbers as an argument and returns the Least Common Multiple (LCM).\n\nExamples\nlcmoflist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ 2550\n\nlcmoflist([13, 6, 17, 18, 19, 20, 37]) ➞ 27965340\n\nlcmoflist([44, 64, 12, 17, 65]) ➞ 2333760\n\nNotes\nThe LCM is the smallest positive number that is a multiple of two or more nu",
    "tags": [
      "numbers",
      "math"
    ],
    "title": "LCM of More Than Three Numbers"
  },
  {
    "_id": "NC888jKPkquSDqaaH",
    "difficulty": 2.588785046728972,
    "language": "python3",
    "summary": "You are in the midst of organizing all of your coding projects. It's a mess! Every file you've ever created is located in the same folder.\n\nTo clean it up, you've decided that you will use one of two organization methods.\n\nThe prefix method: You will group all files with the same project name under the same folder.\nThe suffix method: You will group all files w",
    "tags": [
      "strings",
      "regex"
    ],
    "title": "Cleaning Project Files"
  },
  {
    "_id": "MYvrDLiageo5NvnxH",
    "difficulty": 2.5892857142857144,
    "language": "python3",
    "summary": "In order to improve your Python skills, you decide to go to an online bookstore that exclusively sells beginner Python books. You can search through the site by setting the param variable to a string containing your keyword(s); however, you notice that an error is thrown whenever your search contains a double quote.\n\nYou look through the site's Python code and",
    "tags": [
      "logic",
      "games",
      "data_structures"
    ],
    "title": "Injection I: Avoid Exec"
  },
  {
    "_id": "yPzfgnDsPWXwH7dMq",
    "difficulty": 2.5894736842105264,
    "language": "python3",
    "summary": "Your task is to create a class to handle paginated content in a website. A pagination is used to divide long lists of content in a series of pages.\n\nExample\n\nThe pagination class will accept 2 parameters:\n\nitems (default: []): A list of contents to paginate.\n\npageSize (default: 10): The amount of items to show in each page.\n\nSo for example we could initialize",
    "tags": [
      "math",
      "objects",
      "numbers",
      "classes"
    ],
    "title": "Pagination Class with OOP"
  },
  {
    "_id": "d6wR7bcs4M6QdzpFj",
    "difficulty": 2.592,
    "language": "python3",
    "summary": "Write four functions that directly mutate a list:\n\nrepeat(lst, n): Repeat lst n times.\nadd(lst, x): Adds x to the end of the lst.\nremove(lst, m, n): Removes all elements between indices m and n inclusive in lst.\nconcat(lst, x): concatenates lst with x (another list).\n\nExamples\nlst = [1, 2, 3, 4]\n\nrepeat(lst, 3) ➞ [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\n\nadd(lst,",
    "tags": [
      "language_fundamentals",
      "arrays"
    ],
    "title": "Exploring Mutable Methods"
  },
  {
    "_id": "Av2u6FKvzFvrtGEKS",
    "difficulty": 2.6041666666666665,
    "language": "python3",
    "summary": "Given a linked list class, implement a method called reverse() that reverses the linked list.\n\nExamples\nInput: 10 -> 20 -> 30 -> 40 -> None\n\nOutput: 40 -> 30 -> 20 -> 10 -> None\n\nNotes\nJust implement the reverse() function and DO NOT modify any other code in the Code tab, which has nothing but the starter code.",
    "tags": [
      "data_structures",
      "loops"
    ],
    "title": "Reverse a Linked List"
  },
  {
    "_id": "TmasgxCm6iz3gTGHk",
    "difficulty": 2.608695652173913,
    "language": "python3",
    "summary": "Write a function that returns the length of the shortest sublist whose sum of all elements strictly exceeds n.\n\nExamples\nmin_length([5, 8, 2, -1, 3, 4], 9) ➞ 2\n\nmin_length([3, -1, 4, -2, -7, 2], 4) ➞ 3\nShortest sublist whose sum exceeds 4 is: [3, -1, 4]\n\nmin_length([1, 0, 0, 0, 1], 1) ➞ 5\n\nmin_length([0, 1, 1, 0], 2) ➞ -1\n\nNotes\nThe sublist should be composed",
    "tags": [
      "arrays",
      "loops"
    ],
    "title": "Shortest Subarray Whose Sum Exceeds N"
  },
  {
    "_id": "uWW8cZymSkrREdDpQ",
    "difficulty": 2.608695652173913,
    "language": "python3",
    "summary": "Create a function that gets every pair of numbers from an array that sums up to eight and returns it as an array of pairs (sorted ascendingly). See the following examples for more details.\n\nExamples\nsums_up([1, 2, 3, 4, 5]) ➞ {\"pairs\": [[3, 5]]}\n\nsums_up([1, 2, 3, 7, 9]) ➞ {\"pairs\": [[1, 7]]}\n\nsums_up([10, 9, 7, 2, 8]) ➞ {\"pairs\": []}\n\nsums_up([1, 6, 5, 4, 8,",
    "tags": [
      "arrays",
      "algorithms",
      "numbers",
      "objects"
    ],
    "title": "Eight Sums Up"
  },
  {
    "_id": "e5XZ82bAk2rBo9EfS",
    "difficulty": 2.609375,
    "language": "python3",
    "summary": "Given a series of lists, with each individual list containing the time of the alarm set and the sleep duration, return what time to sleep.\n\nExamples\nbed_time([\"07:50\", \"07:50\"]) ➞ [\"00:00\"]\nThe second argument means 7 hours, 50 minutes sleep duration.\n\nbed_time([\"06:15\", \"10:00\"], [\"08:00\", \"10:00\"], [\"09:30\", \"10:00\"]) ➞ [\"20:15\", \"22:00\", \"23:30\"]\nThe second",
    "tags": [
      "arrays",
      "logic",
      "numbers",
      "strings"
    ],
    "title": "When to Sleep?"
  },
  {
    "_id": "di7ZjxgvLgz72PvCS",
    "difficulty": 2.6097560975609757,
    "language": "python3",
    "summary": "Given an array of strings and an original string, write a function to output an array of boolean values - True if the word can be formed from the original word by swapping two letters only once and False otherwise.\n\nExamples\nvalidate_swaps([\"BACDE\", \"EBCDA\", \"BCDEA\", \"ACBED\"], \"ABCDE\")\n➞ [True, True, False, False]\n\nSwap \"A\" and \"B\" from \"ABCDE\" to get \"BACDE\".",
    "tags": [
      "arrays",
      "validation",
      "loops"
    ],
    "title": "Single Letter Swaps"
  },
  {
    "_id": "TcKZnbdgx7q6LLoFR",
    "difficulty": 2.610169491525424,
    "language": "python3",
    "summary": "Write a function that returns an array of strings populated from the slices of n-length characters of the given word (a slice after another while n-length applies onto the word).\n\nExamples\ncollect(\"intercontinentalisationalism\", 6)\n➞ [\"ationa\", \"interc\", \"ntalis\", \"ontine\"]\n\ncollect(\"strengths\", 3)\n➞ [\"eng\", \"str\", \"ths\"]\n\ncollect(\"pneumonoultramicroscopicsili",
    "tags": [
      "recursion",
      "sorting",
      "strings",
      "arrays"
    ],
    "title": "Recursion: N-Length Letter Groups"
  },
  {
    "_id": "pwAdsffHkxdhSwXKc",
    "difficulty": 2.6125,
    "language": "python3",
    "summary": "Write a regular expression that will match the states that voted no to President Trump's impeachment. You must use RegEx negative lookahead. You are not allowed to use positive lookaheads.\n\nExample\ntxt = \"Texas = no, California = yes, Florida = yes, Michigan = no\"\npattern = \"yourregularexpressionhere\"\n\nre.findall(pattern, txt) ➞ [\"Texas\", \"Michigan\"]\n\nNotes\nYo",
    "tags": [
      "regex",
      "formatting",
      "strings"
    ],
    "title": "RegEx V: Negative Lookahead"
  },
  {
    "_id": "dfep4NR2twAFTdt9k",
    "difficulty": 2.6136363636363638,
    "language": "python3",
    "summary": "Create a function that multiplies two matricies (n x n each).\n\nExamples\nmatrix_mult([[4, 2],[3, 1]], [[5, 6], [3, 8]]) ➞ [[26, 40], [18, 26]]\n\nmatrix_mult([[3, 6],[4, 5]], [[8, 1], [7, 2]]) ➞ [[66, 15], [67, 14]]\n\nmatrix_mult([[7, 5],[2, 2]], [[6, 7], [3, 2]]) ➞ [[57, 59], [18, 18]]\n\nNotes\nLimit yourself to 2 x 2 matricies.",
    "tags": [
      "algorithms",
      "arrays",
      "functional_programming",
      "loops"
    ],
    "title": "Matrix Multiplication"
  },
  {
    "_id": "FeNrBCG9rSdNeJTuX",
    "difficulty": 2.617283950617284,
    "language": "python3",
    "summary": "Write a function that makes the first number as large as possible by swapping out its digits for digits in the second number.\n\nTo illustrate:\nmax_possible(9328, 456) ➞ 9658\n9658 is the largest possible number built from swaps from 456.\n3 replaced with 6 and 2 replaced with 5.\n\nExamples\nmax_possible(523, 76) ➞ 763\n\nmax_possible(9132, 5564) ➞ 9655\n\nmax_possible(",
    "tags": [
      "higher_order_functions",
      "strings"
    ],
    "title": "Maximize the First Number"
  },
  {
    "_id": "i7w7dmtCkaRoB2pzy",
    "difficulty": 2.6176470588235294,
    "language": "python3",
    "summary": "In XOR Cipher, encoding is done by an XOR operation on two given strings. If the strings are of different lengths then the output should be the length of the shorter string. Cut the length of the longer string to the same size as the smaller string before XOR operation.\n\nGiven two strings of msg1 and msg2, return the encoded message.\n\nExamples\nxor_cipher(\"11\",",
    "tags": [
      "cryptography",
      "algorithms",
      "strings",
      "logic",
      "bit_operations"
    ],
    "title": "XOR Cipher"
  },
  {
    "_id": "Sf7iS6JhA7nadm6CR",
    "difficulty": 2.6216216216216215,
    "language": "python3",
    "summary": "Mubashir was trying to understand Divisibility Rule on Wikipedia which states :\n\n\"A divisibility rule is a shorthand way of determining whether a given integer is divisible by a fixed divisor without performing the division, usually by examining its digits.\"\n\nHe came up with an important fact for Divisibility by 13 rule on Wikipedia, which states that if you d",
    "tags": [
      "math",
      "loops",
      "logic",
      "numbers"
    ],
    "title": "Divisibility Rule"
  },
  {
    "_id": "662nTYb83Lg3oNN79",
    "difficulty": 2.625,
    "language": "python3",
    "summary": "Given a list of four points in the plane, determine if they are the vertices of a parallelogram.\n\nExamples\nis_parallelogram([(0, 0), (1, 0), (1, 1), (0, 1)]) ➞ True\n\nis_parallelogram([(0, 0), (2, 0), (1, 1), (0, 1)]) ➞ False\n\nis_parallelogram([(0, 0), (1, 1), (1, 4), (0, 3)]) ➞ True\n\nis_parallelogram([(0, 0), (1, 2), (2, 1), (3, 3)]) ➞ True\n\nis_parallelogram([",
    "tags": [
      "math",
      "algebra",
      "validation"
    ],
    "title": "Is It a Parallelogram?"
  },
  {
    "_id": "bd2fLqAxHfGTx86Qx",
    "difficulty": 2.627906976744186,
    "language": "python3",
    "summary": "An input string can be completed if additional letters can be added and no letters need to be taken away to match the word. Furthermore, the order of the letters in the input string must be the same as the order of letters in the final word.\n\nCreate a function that, given an input string, determines if the word can be completed.\n\nExamples\ncan_complete(\"butl\", ",
    "tags": [
      "strings",
      "validation",
      "regex",
      "loops"
    ],
    "title": "Complete the Word"
  },
  {
    "_id": "pkw5zmXmQ9qg9LYAi",
    "difficulty": 2.627906976744186,
    "language": "python3",
    "summary": "You have received an encrypted message from space. Your task is to decrypt the message with the following simple rules:\n\nMessage string will consist of capital letters, numbers, and brackets only.\nWhen there's a block of code inside the brackets, such as [10AB], it means you need to repeat the letters AB for 10 times.\nMessage can be embedded in multiple layers",
    "tags": [
      "strings",
      "regex",
      "recursion",
      "loops"
    ],
    "title": "Message from Space"
  },
  {
    "_id": "Pf2kDoCRvEL8qzKTs",
    "difficulty": 2.628205128205128,
    "language": "python3",
    "summary": "Create a function that takes in the size of the line and the number of people waiting and places people in an S-shape ordering. The demonstration below will make it clear:\n\nOrdering numbers 1-15 in a [5,3] space.\n\norder_people([5, 3], 15) ➞ [\n  [1, 2, 3],\n  [6, 5, 4],\n  [7, 8, 9],\n  [12, 11, 10],\n  [13, 14, 15]\n]\n\nIf there is extra room, leave those spots blan",
    "tags": [
      "arrays",
      "loops"
    ],
    "title": "Ordering People in a Line"
  },
  {
    "_id": "RR4j9e3rv4cEinewC",
    "difficulty": 2.6315789473684212,
    "language": "python3",
    "summary": "This fabled hat company has 5 production lines running simultaneously. The speed of each production line varies depending on the style and quality of the hat being produced. You will be given the number of hats required and a list of production line speeds.\n\nYour job is to devise a function that will find the number of minutes elapsed for exactly n hats to be",
    "tags": [
      "loops",
      "math"
    ],
    "title": "The Susquehanna Hat Company"
  },
  {
    "_id": "tgd8bCn8QtrqL4sdy",
    "difficulty": 2.6315789473684212,
    "language": "python3",
    "summary": "Given a 2D array of mines, replace the question mark with the number of mines that immediately surround it. This includes the diagonals, meaning it is possible for it to be surrounded by 8 mines maximum.\n\nThe key is as follows:\nAn empty space: \"-\"\nA mine: \"#\"\nNumber showing number of mines surrounding it: \"?\"\n\nExamples\nminesweeper([\n  [\"-\", \"#\", \"-\"],\n  [\"-\",",
    "tags": [
      "games",
      "arrays"
    ],
    "title": "Simple Minesweeper"
  },
  {
    "_id": "u9mxp7LLxogAjAGDN",
    "difficulty": 2.6339285714285716,
    "language": "python3",
    "summary": "A numbers factor length is simply its total number of factors.\n\nFor instance:\n\n3: 1, 3\n3's factor length = 2\n\n8: 1, 2, 4, 8\n8's factor length = 4\n\n36 : 1, 2, 3, 4, 6, 9, 12, 18, 36\n36's factor length = 9\n\nCreate a function that sorts a list by factor length in descending order. If multiple numbers have the same factor length, sort these numbers in descending o",
    "tags": [
      "arrays",
      "sorting",
      "loops"
    ],
    "title": "Sort by Factor Length"
  },
  {
    "_id": "CYReZKzYxNBDs7Kce",
    "difficulty": 2.6341463414634148,
    "language": "python3",
    "summary": "A palindrome is a number that is the same when reversed, 2770772 for example. A palindrome can often be formed by adding a number to it's reverse: 641 + 146 = 787 (a palindrome). Using 78 as the seed, it takes 4 steps to produce a palindrome:\n\n78 + 87 = 165\n165 + 561 = 726\n726 + 627 = 1353\n1353 + 3531 = 4884 (a palindrome)\n\nAbout 97% of integers less than 10,0",
    "tags": [
      "loops",
      "strings",
      "numbers"
    ],
    "title": "Palindrome Sequence"
  },
  {
    "_id": "5h5uAmaAWY3jSHA7k",
    "difficulty": 2.64,
    "language": "python3",
    "summary": "A mountain is a list with exactly one peak.\n\nAll numbers to the left of the peak are increasing.\nAll numbers to the right of the peak are decreasing.\nThe peak CANNOT be on the boundary.\n\nA valley is a list with exactly one trough.\n\nAll numbers to the left of the trough are decreasing.\nAll numbers to the right of the trough are increasing.\nThe trough CANNOT be ",
    "tags": [
      "arrays",
      "functional_programming",
      "higher_order_functions"
    ],
    "title": "Mountains or Valleys"
  },
  {
    "_id": "eSBCbWrG3PY9YYF7c",
    "difficulty": 2.6403508771929824,
    "language": "python3",
    "summary": "In early recorded Chinese history, time was reckoned using the sexagenary (60-year) cycle, generated from two subcycles:\n\nFive heavenly stems (elements) in this order: wood, fire, earth, metal, water. The stems change every two years.\nTwelve earthly branches (animals) in this order: rat, ox, tiger, rabbit, dragon, snake, horse, sheep, monkey, rooster, dog, pig",
    "tags": [
      "language_fundamentals",
      "loops"
    ],
    "title": "Sexagenary Cycle (Chinese Zodiac)"
  },
  {
    "_id": "yuPWwSbCGPm2KzSzx",
    "difficulty": 2.640449438202247,
    "language": "python3",
    "summary": "Create a class Smoothie and do the following:\nCreate an instance attribute called ingredients.\nCreate a get_cost method which calculates the total cost of the ingredients used to make the smoothie.\nCreate a getprice method which returns the number from getcost plus the number from get_cost multiplied by 1.5. Round to two decimal places.\nCreate a get_name metho",
    "tags": [
      "classes",
      "formatting",
      "objects",
      "data_structures"
    ],
    "title": "Fruit Smoothie"
  },
  {
    "_id": "dMcvdFzSvvqdLJBEC",
    "difficulty": 2.641509433962264,
    "language": "python3",
    "summary": "John wants to save money for his first car. He puts money in his piggy bank every day. Every day, he puts in $1 more than the previous day. Every Monday he starts with a new value ⁠— $1 more than the previous Monday.\n\nWeek 1 (starting at $1)\nDay | Amount | Sum\n:--- | --- | ---\nMonday | $1 | $1\nTuesday | $2 | $3\nWednesday | $3 | $6\nThursday | $4 | $10\nFriday  |",
    "tags": [
      "algebra",
      "math",
      "loops"
    ],
    "title": "Piggy Bank"
  },
  {
    "_id": "vCRP3WXbJ9erKFsiK",
    "difficulty": 2.6416666666666666,
    "language": "python3",
    "summary": "It's time to send and receive secret messages.\n\nCreate a single function that takes a string or a list and returns a coded or decoded message.\n\nThe first letter of the string, or the first element of the list represents the Character Code of that letter. The next elements are the differences between the characters:\ne.g. A +3 --> C or z -1 --> y.\n\nExamples\ndif_",
    "tags": [
      "strings",
      "arrays",
      "loops",
      "cryptography"
    ],
    "title": "Difference Cipher"
  },
  {
    "_id": "vLLXeQH5tgyvbzYZS",
    "difficulty": 2.6422018348623855,
    "language": "python3",
    "summary": "A Pythagorean triple is a set of three integer numbers that form a right triangle. The sum of the squares of the two smaller numbers should equal the square of the largest number. Given three numbers a, b and c (c being the largest):\na^2 + b^2 = c^2\nFurthermore, a Pythagorean triple is said to be primitive if the three numbers are pairwise coprime - that is, t",
    "tags": [
      "algebra",
      "conditions",
      "higher_order_functions",
      "math"
    ],
    "title": "Primitive Pythagorean Triples"
  },
  {
    "_id": "C45TKLcGxh8dnbgqM",
    "difficulty": 2.6449704142011834,
    "language": "python3",
    "summary": "Julius Caesar protected his confidential information by encrypting it using a cipher. Caesar's cipher (check Resources tab for more info) shifts each letter by a number of letters. If the shift takes you past the end of the alphabet, just rotate back to the front of the alphabet. In the case of a rotation by 3, w, x, y and z would map to z, a, b and c.\n\nCreate",
    "tags": [
      "algorithms",
      "strings",
      "cryptography"
    ],
    "title": "Caesar's Cipher"
  },
  {
    "_id": "kD2CfnakBqfNpBHnX",
    "difficulty": 2.6451612903225805,
    "language": "python3",
    "summary": "The function is given a map with 1 representing land, 0 representing water. A land cell can have four neighbors along its edges. Compute the total perimeter of shore-lines that are defined by land cells touching water or the outer edges of the map. Each cell edge has a length equal to 1. An isolated cell without neighbors has a total perimeter length of 4.\n\nEx",
    "tags": [
      "arrays",
      "conditions",
      "language_fundamentals",
      "loops"
    ],
    "title": "Land Perimeter"
  },
  {
    "_id": "Bb9hTXYuvqx3aCm8d",
    "difficulty": 2.6458333333333335,
    "language": "python3",
    "summary": "In this challenge, you have to establish the points scored by two players (called Player A and Player Z) after an ASCII game session.\n\nThe two players place randomly the 26 letters of the English alphabet in a string and ten integers (ranged from 0 up to 25) in a list. Each integer represents the index of a letter to eliminate into the opponent's string so tha",
    "tags": [
      "control_flow",
      "data_structures",
      "strings",
      "objects"
    ],
    "title": "Alphabet Clash (Battle of the ASCII Values)"
  },
  {
    "_id": "Azhkq898ZtmfyCGif",
    "difficulty": 2.6470588235294117,
    "language": "python3",
    "summary": "Create a function which converts an ordered number list into a list of ranges (represented as strings). Note how some lists have some numbers missing.\n\nExamples\nnumberstoranges([1, 2, 3, 4, 5]) ➞ [\"1-5\"]\n\nnumberstoranges([3, 4, 5, 10, 11, 12]) ➞ [\"3-5\", \"10-12\"]\n\nnumberstoranges([1, 2, 3, 4, 99, 100]) ➞ [\"1-4\", \"99-100\"]\n\nnumberstoranges([1, 3, 4, 5, 6, 7, 8])",
    "tags": [
      "numbers",
      "arrays"
    ],
    "title": "Free Range"
  },
  {
    "_id": "vnzjuqjCf4MFHGLJp",
    "difficulty": 2.648936170212766,
    "language": "python3",
    "summary": "Create a function that takes a string and shifts the letters to the right by an amount n but not the whitespace.\n\nExamples\nshift_letters(\"Boom\", 2) ➞ \"omBo\"\n\nshift_letters(\"This is a test\",  4) ➞ \"test Th i sisa\"\n\nshift_letters(\"A B C D E F G H\", 5) ➞  \"D E F G H A B C\"\n\nNotes\nKeep the case as it is.\nn can be larger than the total number of letters.",
    "tags": [
      "algorithms",
      "logic",
      "strings"
    ],
    "title": "Letter Shifting"
  },
  {
    "_id": "k87ztfzqrpPHvgNWR",
    "difficulty": 2.6491228070175437,
    "language": "python3",
    "summary": "Given a list of strings depicting a row of buildings, create a function which sets the gap between buildings as a given amount.\n\nExamples\nwiden_streets([\n  \"###   ## #\",\n  \"### # ## #\",\n  \"### # ## #\",\n  \"### # ## #\",\n  \"### # ## #\"\n], 3) ➞\n[\n  \"###       ##   #\",\n  \"###   #   ##   #\",\n  \"###   #   ##   #\",\n  \"###   #   ##   #\",\n  \"###   #   ##   #\"\n]\n\nwiden_s",
    "tags": [
      "arrays",
      "strings",
      "formatting"
    ],
    "title": "Widen the Streets!"
  },
  {
    "_id": "9fbbjaLt22Zfvjjau",
    "difficulty": 2.652173913043478,
    "language": "python3",
    "summary": "In Paul Cipher, only alpha characters will be encoded with the following rules:\n\nAll alpha characters will be treated as uppercase letters.\nThe first alpha character will not change (except for switching to upper case).\nAll subsequent alpha characters will be shifted toward \"Z\" by the alphabetical position of the previous alpha character (wrap back to \"A\" if \"",
    "tags": [
      "cryptography",
      "functional_programming",
      "math",
      "algorithms"
    ],
    "title": "Paul Cipher"
  },
  {
    "_id": "dKLJ4uvssAJwRDtCo",
    "difficulty": 2.6545454545454548,
    "language": "python3",
    "summary": "Your task is to create a function that simulates a vending machine.\n\nGiven an amount of money (in cents ¢ to make it simpler) and a product_number, the vending machine should output the correct product name and give back the correct amount of change.\n\nThe coins used for the change are the following: [500, 200, 100, 50, 20, 10]\n\nThe return value is a dictionary",
    "tags": [
      "arrays",
      "objects",
      "recursion",
      "loops",
      "interview"
    ],
    "title": "Vending Machine"
  },
  {
    "_id": "ZWEnJEy2DoJF9Ejqa",
    "difficulty": 2.6554054054054053,
    "language": "python3",
    "summary": "A string contains the word \"edabit\" if a subsequence of its characters spell \"edabit\".\n\nWrite a function that accepts a string and returns “YES” if the string contains a subsequence of the word edabit or \"NO\" if it does not.\n\nExamples\nedabitinstring(“eddaaabt”) ➞ “NO”\n\nedabitinstring(“edwardisabletodoit”) ➞ “YES”\n\nedabitinstring(“abecdfghijklmnopqrstuvwxyz”) ➞",
    "tags": [
      "strings",
      "validation"
    ],
    "title": "Is Edabit in the String?"
  },
  {
    "_id": "4jNjHdZ2hmMh23pRg",
    "difficulty": 2.660377358490566,
    "language": "python3",
    "summary": "Create a function that takes in an array of grass heights and a variable sequence of lawn mower cuts and outputs the array of successive grass heights.\n\nIf after a cut, any single element in the array reaches zero or negative, return \"Done\"  instead of the array of new heights.\n\nA demo:\ncutting_grass([3, 4, 4, 4], 1, 1, 1) ➞ [[2, 3, 3, 3], [1, 2, 2, 2], \"Done\"",
    "tags": [
      "arrays",
      "language_fundamentals",
      "higher_order_functions"
    ],
    "title": "Mowing the Lawn"
  },
  {
    "_id": "dKeLAqAxpddbkvNhh",
    "difficulty": 2.6666666666666665,
    "language": "python3",
    "summary": "A group of n friends are going to see a movie. They would like to find a spot where they can sit next to each other in the same row. A movie theater's seat layout can be represented as a 2-D matrix, where 0s represent empty seats and 1s represent taken seats.\n\n[[1, 0, 0, 0, 1, 1, 1],\n[1, 1, 1, 0, 1, 1, 1],\n[1, 0, 1, 0, 1, 0, 1],\n[1, 1, 0, 1, 1, 0, 1],\n[1, 0, 1",
    "tags": [
      "arrays",
      "higher_order_functions",
      "loops"
    ],
    "title": "Movie Theater Seating"
  },
  {
    "_id": "dHGpjWHJ265BCthiM",
    "difficulty": 2.6666666666666665,
    "language": "python3",
    "summary": "Create a function that takes the current day (e.g. \"2019-09-30\"), a list of date dictionaries and returns the \"current streak\" (i.e. number of consecutive days in a row).\n\nExamples\ncurrent_streak(\"2019-09-23\", [\n  {\n    \"date\": \"2019-09-18\"\n  },\n  {\n    \"date\": \"2019-09-19\"\n  },\n  {\n    \"date\": \"2019-09-21\"\n  },\n  {\n    \"date\": \"2019-09-22\"\n  },\n  {\n    \"date\"",
    "tags": [
      "dates",
      "loops",
      "objects",
      "games"
    ],
    "title": "Current Streak"
  },
  {
    "_id": "hpgTmtkEiKfm5xxGy",
    "difficulty": 2.6666666666666665,
    "language": "python3",
    "summary": "This challenge deals with finding and counting the number of paths between points on a rectilinear grid. A starting point (x, y) with non-negative integer coordinates is provided. You are only allowed to move horizontally and vertically along the grid. Hence, from (x, y) you may move to (x+1, y), (x-1, y), (x, y+1), or (x, y-1). Your goal is to return to the o",
    "tags": [
      "recursion",
      "algorithms"
    ],
    "title": "Number of Paths Between Points"
  },
  {
    "_id": "hY6BMxxEYycT83GPs",
    "difficulty": 2.6666666666666665,
    "language": "python3",
    "summary": "Given a positive number as a string, multiply the number by 11 and also return it as a string. However, there is a catch:\n\nYou are NOT ALLOWED to simply cast the number into an integer!\n\nNow, how is this challenge even possible? Despite this, there is still a way to solve it, and it involves thinking about how someone might multiply by 11 in their head. See th",
    "tags": [
      "loops",
      "algorithms",
      "numbers",
      "math",
      "logic"
    ],
    "title": "Multiply by 11"
  },
  {
    "_id": "gbybFzt2tLa5zfpHc",
    "difficulty": 2.670886075949367,
    "language": "python3",
    "summary": "Write a function that returns all sets of three elements that sum to 0.\n\nExamples\nthree_sum([0, 1, -1, -1, 2]) ➞ [[0, 1, -1], [-1, -1, 2]]\n\nthree_sum([0, 0, 0, 5, -5]) ➞ [[0, 0, 0], [0, 5, -5]]\n\nthree_sum([1, 2, 3]) ➞ []\n\nthree_sum([1]) ➞ []\n\nNotes\nThe original list may contain duplicate numbers.\nEach three-element sublist in your output should be distinct.\nSu",
    "tags": [
      "arrays",
      "loops",
      "math"
    ],
    "title": "Three Sum Problem"
  },
  {
    "_id": "HSKvp4qYA2AhDWxn6",
    "difficulty": 2.6714285714285713,
    "language": "python3",
    "summary": "In Text Twist, players try to score points by forming words using the letters from a 6-letter scrambled word. They win the round if they can successfully unscramble the 6-letter word.\n\nCreate a function that takes in an array of already-guessed words, the unscrambled 6-letter word and returns the total number of points the player scored in a particular round u",
    "tags": [
      "strings",
      "higher_order_functions",
      "games"
    ],
    "title": "Text Twist!"
  },
  {
    "_id": "MvtxpxtFDrzEtA9k5",
    "difficulty": 2.672566371681416,
    "language": "python3",
    "summary": "A number may not be a palindrome, but its descendant can be. A number's direct child is created by summing each pair of adjacent digits to create the digits of the next number.\n\nFor instance, 123312 is not a palindrome, but its next child 363 is, where: 3 = 1 + 2; 6 = 3 + 3; 3 = 1 + 2.\n\nCreate a function that returns True if the number itself is a palindrome o",
    "tags": [
      "arrays",
      "recursion",
      "higher_order_functions",
      "validation"
    ],
    "title": "Palindrome Descendant"
  },
  {
    "_id": "FT5Zd4mayPa5ghpPt",
    "difficulty": 2.675675675675676,
    "language": "python3",
    "summary": "Create a function that converts RGB to HEX and vice versa.\n\ncolorconversion(\"#ff09d3\") converts the string param from HEX to RGB. colorconversion({\"r\": 235, \"g\": 64, \"b\": 52}) converts the dict param from RGB to HEX.\n\nExamples\ncolor_conversion(\"#ffffff\") ➞ {\"r\": 255, \"g\": 255, \"b\": 255}\n\ncolor_conversion(\"#ff0025\") ➞ {\"r\": 255, \"g\": 0, \"b\": 37}\n\ncolor_conversi",
    "tags": [
      "math",
      "numbers",
      "objects",
      "validation"
    ],
    "title": "[Color Conversion] RGB to HEX and HEX to RGB"
  },
  {
    "_id": "oepiudBYC7PT7TXAM",
    "difficulty": 2.6805555555555554,
    "language": "python3",
    "summary": "Create a function that takes in a Roman numeral as a string and converts it to an integer, returning the result. The function should work for all Roman numerals representing positive integers less than 4000.\n\nThe following table shows how digits will be represented in Roman numeral notation:\n\nPlace value | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9\n--- | --- | --- | --",
    "tags": [
      "numbers",
      "strings",
      "math"
    ],
    "title": "Roman Numerals"
  },
  {
    "_id": "yyCGJKP442qtTD9Ek",
    "difficulty": 2.688888888888889,
    "language": "python3",
    "summary": "Every number can be expressed as the sum between unique powers of two. For example, the number 21 can be expressed as 1 + 4 + 16, which can also be written as 2^0 + 2^2 + 2^4.\n\nCreate a function that returns a sorted list of powers of two, which add together to make n.\n\nExamples\nsumsofpowersoftwo(21) ➞ [1, 4, 16]\n\nsumsofpowersoftwo(8) ➞ [8]\n\nsumsofpowersoftwo(",
    "tags": [
      "numbers",
      "algorithms",
      "math",
      "bit_operations"
    ],
    "title": "Sums of Powers of Two"
  },
  {
    "_id": "ZipMJJocMyozDZ6iP",
    "difficulty": 2.69,
    "language": "python3",
    "summary": "Create a function that groups a list of numbers based on a size parameter. The size represents the maximum length of each sub-list.\n\n[1, 2, 3, 4, 5, 6], 3\n[[1, 3, 5], [2, 4, 6]]\nDivide list into groups of size 3.\n\n[1, 2, 3, 4, 5, 6], 2\n[[1, 4], [2, 5], [3, 6]]\nDivide list into groups of size 2.\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 4\n[[1, 4, 7, 10], [2, 5, 8, ",
    "tags": [
      "arrays",
      "closures",
      "scope"
    ],
    "title": "Group in Order"
  },
  {
    "_id": "4wJc7maZhYCSgzyRS",
    "difficulty": 2.6923076923076925,
    "language": "python3",
    "summary": "Create a function that takes a list lst and a number N and returns a list of two integers from lst whose product is that of the number N.\n\nExamples\ntwo_product([1, 2, -1, 4, 5], 20) ➞ [4, 5]\n\ntwo_product([1, 2, 3, 4, 5], 10) ➞ [2, 5]\n\ntwo_product([100, 12, 4, 1, 2], 15) ➞ None\n\nNote:\nTry doing this with 0(N) time complexity.\nNo duplicates.\nIn the list there ca",
    "tags": [
      "loops",
      "conditions",
      "data_structures",
      "math"
    ],
    "title": "Two Product Problem"
  },
  {
    "_id": "mub4u2WsjHnw3sLqT",
    "difficulty": 2.6923076923076925,
    "language": "python3",
    "summary": "Create a function which takes a parameter n and returns a function such that it, when called n times, returns the string \"edabit\".\n\nExamples\nlambda_depth(0) ➞ \"edabit\"\n\nlambda_depth(1)() ➞ \"edabit\"\n\nlambda_depth(2)()() ➞ \"edabit\"\n\ntype(lambda_depth(2)()) ➞\n\nNotes\nnum will always be a non-negative integer.\nIf num == 0, return \"edabit\".\nIf num > 0, return a func",
    "tags": [
      "functional_programming",
      "higher_order_functions",
      "recursion"
    ],
    "title": "Lambda Expressions All the Way Down"
  },
  {
    "_id": "4afgmFpLP6CpwtRMY",
    "difficulty": 2.6941176470588237,
    "language": "python3",
    "summary": "Write a sudoku validator. This function should return True if the 2-D array represents a valid sudoku and False otherwise. To be a valid sudoku:\n\nEach row must have the digits from 1 to 9 exactly once.\nEach column must have the digits from 1 to 9 exactly once.\nEach 3x3 box must have the digits from 1 to 9 exactly once.\n\nExamples\nsudoku_validator([\n  [ 1, 5, 2,",
    "tags": [
      "higher_order_functions",
      "validation",
      "functional_programming"
    ],
    "title": "Sudoku Validation"
  },
  {
    "_id": "GC7JWFhDdhyTsptZ8",
    "difficulty": 2.6956521739130435,
    "language": "python3",
    "summary": "Sexy primes are primes that differ by 6.\n\nFor example, (5, 11) comprise a sexy prime pair, while (5, 11, 17) comprise a set of sexy prime triplets.\n\nCreate a function that takes two numbers as argument, the set length n (2 for pairs, 3 for triplets), and the limit. Return a list of sorted tuples of sexy primes up to (but excluding) the limit.\n\nExamples\nsexy_pr",
    "tags": [
      "algebra",
      "validation",
      "math",
      "numbers"
    ],
    "title": "Sexy Primes"
  },
  {
    "_id": "otJN6Bt4qR7kN4Jxt",
    "difficulty": 2.697674418604651,
    "language": "python3",
    "summary": "Create a function that can nest a flat list to represent an incremental depth level sequence.\n\nExamples\nincremental_depth([1, 2]) ➞ [1, [2]]\n\nincremental_depth([1, 2, 3, 4, 5]) ➞ [1, [2, [3, [4, [5]]]]]\n\nincremental_depth([1, 3, 2, 6]) ➞ [1, [3, [2, [6]]]]\n\nincremental_depth([\"dog\", \"cat\", \"cow\"]) ➞ [\"dog\", [\"cat\", [\"cow\"]]]\n\nNotes\nThe elements do not matter t",
    "tags": [
      "arrays",
      "loops",
      "recursion"
    ],
    "title": "Flat List Depth Nesting"
  },
  {
    "_id": "jowQ2aeZut4vGyHyP",
    "difficulty": 2.6989247311827955,
    "language": "python3",
    "summary": "Given a slope of a line, calculate and return the value of the angle of line (relative to the y -axis). For example, a horizontal line would be 90 degrees.\n\nExamples\nconvert(1) ➞ 45\n\nconvert(0) ➞ 90\n\nconvert(-1) ➞ 135\n\nNotes\nAll values returned should be in degrees.\nAll values returned should be rounded to the nearest whole number.\nThe value to return must be",
    "tags": [
      "algebra",
      "math",
      "numbers"
    ],
    "title": "Slope to Angle Conversion"
  },
  {
    "_id": "fRB5QRYn5WC8jMGTe",
    "difficulty": 2.7,
    "language": "python3",
    "summary": "In this challenge, the goal is to calculate what time it is in two different cities. You're given a string citya and the related string timestamp (time in citya) with the date formatted in full U.S. notation, as in this example:\n\n\"July 21, 1983 23:01\"\n\nYou have to return a new timestamp with date and corresponding time in city_b, formatted as in this example:",
    "tags": [
      "dates",
      "formatting"
    ],
    "title": "Time Around the World"
  },
  {
    "_id": "snZDZ8nxwGCJCka5M",
    "difficulty": 2.7,
    "language": "python3",
    "summary": "In this challenge, you have to obtain a pyramidal version of a given string, transforming the string into a list containing a series of string slices that progressively increase or decrease steadily from the left to the right. Every slice containing two or more characters must have a space between every pair of characters, to permit a hypothetical vertical ali",
    "tags": [
      "formatting",
      "strings",
      "math"
    ],
    "title": "Pyramidal Strings"
  },
  {
    "_id": "PirFJDfGk4vpsdkeE",
    "difficulty": 2.7012987012987013,
    "language": "python3",
    "summary": "Bobby is troubleshooting a challenge he is attempting on Edabit. He needs to devise a function whose argument is the size of a square array. The function must return the array with the diagonals set to 1 and all the other members set to 0.  His code is in the Code tab. Two of the lines contain bugs. Can you help him?\n\nExamples\nhelp_bobby(1) ➞ [[1]]\n\nhelp_bobby",
    "tags": [
      "bugs",
      "arrays"
    ],
    "title": "Help Bobby Fix His Code"
  },
  {
    "_id": "oRwcjPMkyznd2ybRW",
    "difficulty": 2.701492537313433,
    "language": "python3",
    "summary": "Write a function that returns all numbers less than or equal to N with the maximum product of digits.\n\nExamples\nmax_product(8) ➞ [8]\n\nmax_product(27) ➞ [27]\n\nmax_product(211) ➞ [99, 199]\n\nmax_product(9578) ➞ [8999]\n\nNotes\nSearch for numbers in the range: [0, n].",
    "tags": [
      "numbers",
      "math"
    ],
    "title": "Maximum Product of Digits"
  },
  {
    "_id": "zp64GNJQpZyGpYWL8",
    "difficulty": 2.7058823529411766,
    "language": "python3",
    "summary": "Nesting level, in this challenge, refers to the depth of parentheses around an integer. For example, in the string \"(5((10)8))\", 5 has a nesting level of 1 because it has one set of parentheses around it, 10 has a nesting level of 3 because it has 3 sets of parentheses around it, and 8 has a nesting level of 2.\n\nWe can score this string by multiplying each num",
    "tags": [
      "strings",
      "logic"
    ],
    "title": "Scoring Strings"
  },
  {
    "_id": "LMoP4Jhpm9kx4WQ3a",
    "difficulty": 2.7058823529411766,
    "language": "python3",
    "summary": "Write a function that will return True if a given string (divided and grouped into a size) will contain a set of consecutive ascending numbers, otherwise, return False.\n\nExamples\nis_ascending(\"123124125\") ➞ True\nContains a set of consecutive ascending numbers\nif grouped into 3's : 123, 124, 125\n\nis_ascending(\"101112131415\") ➞ True\nContains a set of consecutive",
    "tags": [
      "arrays",
      "sorting",
      "strings",
      "validation"
    ],
    "title": "Consecutive Ascending Numbers"
  },
  {
    "_id": "HzeTvQqnH2afZs6GY",
    "difficulty": 2.7066666666666666,
    "language": "python3",
    "summary": "Create a function that takes in size and direction and generates a diagonal rug.\n\nThe size is the n parameter, and all rugs are square n x n. The direction is whether the diagonal part begins on the left or the right side.\n\nExamples\ngenerate_rug(4, \"left\") ➞ [\n  [0, 1, 2, 3],\n  [1, 0, 1, 2],\n  [2, 1, 0, 1],\n  [3, 2, 1, 0]\n]\n\ngenerate_rug(5, \"right\") ➞ [\n  [4,",
    "tags": [
      "arrays",
      "loops"
    ],
    "title": "Diagonal Rug"
  },
  {
    "_id": "cBzYRBbBA7gHwKpor",
    "difficulty": 2.7088607594936707,
    "language": "python3",
    "summary": "Mubashir is going on a secret mission. He needs your help but you have to learn how to encode a secret password to communicate safely with other agents. Create a function that takes an argument message and returns the encoded password.\n\nThere are some variations on the rules of encipherment. One version of the cipher rules are outlined below:\n\nsecret_password(",
    "tags": [
      "algorithms",
      "cryptography",
      "strings"
    ],
    "title": "Secret Agent Password"
  },
  {
    "_id": "zoJeCZCgmA8pS2iAi",
    "difficulty": 2.7115384615384617,
    "language": "python3",
    "summary": "Create a function that takes a list of functions and sorts them in ascending order based on how many calls are needed for them to return a non-function.\n\nExamples\nf1 = lambda: \"hello\"\nf1() ➞ \"hello\"\n\nf2 = lambda: lambda: \"edabit\"\nf2()() ➞ \"edabit\"\n\nf3 = lambda: lambda: lambda: \"user\"\nf3()()() ➞ \"user\"\n\nfunc_sort([f2, f3, f1]) ➞ [f1, f2, f3]\n[f2, f3, f1] ➞ [2,",
    "tags": [
      "closures",
      "higher_order_functions",
      "functional_programming"
    ],
    "title": "Sort by Number of Calls"
  },
  {
    "_id": "cBPj6yfALGfmeZQLG",
    "difficulty": 2.712121212121212,
    "language": "python3",
    "summary": "Create a function that converts a string into a matrix of characters that can be read vertically. Add spaces when characters are missing.\n\nExamples\nvertical_txt(\"Holy bananas\") ➞ [\n  [\"H\", \"b\"],\n  [\"o\", \"a\"],\n  [\"l\", \"n\"],\n  [\"y\", \"a\"],\n  [\" \", \"n\"],\n  [\" \", \"a\"],\n  [\" \", \"s\"]\n]\n\nvertical_txt(\"Hello fellas\") ➞ [\n\t[\"H\", \"f\"],\n  [\"e\", \"e\"],\n  [\"l\", \"l\"],\n  [\"l\",",
    "tags": [
      "arrays",
      "formatting"
    ],
    "title": "Vertical Text"
  },
  {
    "_id": "J9fCHDa3yYJWnK3A7",
    "difficulty": 2.7142857142857144,
    "language": "python3",
    "summary": "A happy number is a number which yields a 1 by repeatedly summing up the square of its digit. If such a process results in an endless cycle of numbers containing 4, the number is said to be an unhappy number.\n\nCreate a function that accepts a number and determines whether the number is a happy number or not. Return True if so, False otherwise.\n\nExamples\nis_hap",
    "tags": [
      "arrays",
      "recursion",
      "validation"
    ],
    "title": "Recursion: Happy Number"
  },
  {
    "_id": "cvsGAmtHJBNDJFBpB",
    "difficulty": 2.7154471544715446,
    "language": "python3",
    "summary": "In Block Dude, the main character can climb boxes, but only if they are stacked in a particular way so that he is able to climb them one at a time. More specifically, he can only climb UP or DOWN one box at a time.\n\nLet 1s represent the boxes, and 0 represent the background. Write a function that returns True if block dude can travel from the left side to the",
    "tags": [
      "arrays",
      "games",
      "higher_order_functions",
      "validation"
    ],
    "title": "Block Dude"
  },
  {
    "_id": "CdcS3feCCEHxtDr2a",
    "difficulty": 2.7205882352941178,
    "language": "python3",
    "summary": "Create a function that returns True if an array of pairs are sufficient for a clear ordering of all items.\n\nTo illustrate:\nclear_ordering([[\"D\", \"A\"], [\"C\", \"B\"], [\"A\", \"C\"]]) ➞ True\nSince unequivocally: \"D\" < \"A\" < \"C\" < \"B\"\n\nOn the other hand:\nclear_ordering([[\"D\", \"A\"], [\"B\", \"A\"], [\"C\", \"D\"]]) ➞ False\nSince we know that \"C\" < \"D\" < \"A\", and we know \"B\" < \"",
    "tags": [
      "arrays",
      "logic"
    ],
    "title": "Are Pairs Sufficient for a Clear Ordering?"
  },
  {
    "_id": "Dp9oYY4faMbdzufxR",
    "difficulty": 2.7222222222222223,
    "language": "python3",
    "summary": "2048 is a game where you need to slide numbered tiles (natural powers of 2) up, down, left or right on a square grid to combine them in a tile with the number 2048.\n\nThe sliding procedure is described by the following rules:\n\nTiles slide as far as possible in the chosen direction until they are stopped by either another tile or the edge of the grid.\nIf two til",
    "tags": [
      "algorithms",
      "arrays",
      "loops",
      "games"
    ],
    "title": "2048 Tiles Slide"
  },
  {
    "_id": "iHdZmimb82rAvEDkG",
    "difficulty": 2.7222222222222223,
    "language": "python3",
    "summary": "Write a function that returns the largest even integer in a list with its corresponding index and the parity of that index, but determining the parity of that index is limited to not using the modulo operator %.\n\nOutput Structure:\n\nYou have to return a Dictionary.\n\n{\"@odd|even index \" + indexoflargest: largest_integer}\n\nExamples\nbitwise_index([107, 19, 36, -18",
    "tags": [
      "arrays",
      "bit_operations",
      "logic",
      "loops"
    ],
    "title": "Index Parity of Largest Even"
  },
  {
    "_id": "JmyD5D4KnhzmMPEKz",
    "difficulty": 2.723076923076923,
    "language": "python3",
    "summary": "In this challenge, establish which type of constrained writing is applied to a sentence. There are four possible types to detect:\n\nPangram: the sentence contains all the 26 letters of the English alphabet.\nHeterogram: the sentence doesn't have multiple instances of its letters (as to say that every letter is unique).\nTautogram: every word of the sentence start",
    "tags": [
      "strings",
      "validation",
      "logic"
    ],
    "title": "Constrained Writing"
  },
  {
    "_id": "C3z6t5DxzZQLk3mRf",
    "difficulty": 2.7241379310344827,
    "language": "python3",
    "summary": "Create a function that takes guitar strings as an array of frequencies, starting at the first string (High E) and ending in the sixth string (Low E).\n\nThe function must return the display of a tuner for each string, in the same order, as an array.\n\nYou can find the frequencies of the strings on the Wikipedia page (check the Resources tab).\n\nThe guitar strings",
    "tags": [
      "algorithms",
      "numbers",
      "validation",
      "arrays"
    ],
    "title": "Guitar Tuner"
  },
  {
    "_id": "Rn3g3hokznLu8ZtDP",
    "difficulty": 2.7260273972602738,
    "language": "python3",
    "summary": "Write a function which increments a string to create a new string.\n\nIf the string ends with a number, the number should be incremented by 1.\nIf the string doesn't end with a number, 1 should be added to the new string.\nIf the number has leading zeros, the amount of digits should be considered.\n\nExamples\nincrement_string(\"foo\") ➞ \"foo1\"\n\nincrement_string(\"fooba",
    "tags": [
      "strings",
      "arrays"
    ],
    "title": "String Incrementer"
  },
  {
    "_id": "kZSi2XWDpu83miexy",
    "difficulty": 2.730769230769231,
    "language": "python3",
    "summary": "Create a function that takes a string and returns the right answer.\n\nExamples\npost_fix(\"2 2 +\") ➞ 4\n\npost_fix(\"2 2 /\") ➞ 1\n\npost_fix(\"8 4 / 9 * 3 1 * /\") ➞ 54\n\nNotes\nThe operators + - * / may be supported.\nOutput always returns an integer.",
    "tags": [
      "math",
      "strings"
    ],
    "title": "Fix the Right Answer"
  },
  {
    "_id": "sHJmjMcZPiCsEujk6",
    "difficulty": 2.732142857142857,
    "language": "python3",
    "summary": "In this challenge, transform a string into a series of words (or sequences of characters) separated by a single space, with each word having the same length given by the first 15 digits of the decimal representation of Pi:\n\n3.14159265358979\n\nIf a string contains more characters than the total quantity given by the sum of the Pi digits, the unused characters ar",
    "tags": [
      "strings",
      "formatting",
      "algorithms"
    ],
    "title": "Pilish Strings"
  },
  {
    "_id": "hCAStny5sJwYP3evS",
    "difficulty": 2.7346938775510203,
    "language": "python3",
    "summary": "A Natural Number String Sequence is a string containing all numbers, starting from 0, joined without spaces or other delimitators between them.\n\n\"01234567891011121314151617181920...\"\n\nIf you think of the sequence as a list, any number has a natural position index it occupies within a string long enough to contain it based on the real position in the numeric se",
    "tags": [
      "numbers",
      "strings",
      "arrays",
      "regex"
    ],
    "title": "Early Birds"
  },
  {
    "_id": "rBHTZ3HTCZQ6r5XP4",
    "difficulty": 2.735294117647059,
    "language": "python3",
    "summary": "Create a function that expands a decimal number into a string as shown below:\n\n25.24 ➞ \"20 + 5 + 2/10 + 4/100\"\n70701.05 ➞ \"70000 + 700 + 1 + 5/100\"\n685.27 ➞ \"600 + 80 + 5 + 2/10 + 7/100\"\n\nExamples\nexpanded_form(87.04) ➞ \"80 + 7 + 4/100\"\n\nexpanded_form(123.025) ➞ \"100 + 20 + 3 + 2/100 + 5/1000\"\n\nexpanded_form(50.270) ➞ \"50 + 2/10 + 7/100\"\n\nNotes\nN/A",
    "tags": [
      "algorithms",
      "language_fundamentals",
      "math",
      "numbers",
      "arrays"
    ],
    "title": "Expand a Number II"
  },
  {
    "_id": "qwDPeZeufrHo2ejAY",
    "difficulty": 2.736111111111111,
    "language": "python3",
    "summary": "Given a string containing an algebraic equation, calculate and return the value of x. You'll only be given equations for simple addition and subtraction.\n\nExamples\neval_algebra(\"2 + x = 19\") ➞ 17\n\neval_algebra(\"4 - x = 1\") ➞ 3\n\neval_algebra(\"23 + 1 = x\") ➞ 24\n\nNotes\nThere are spaces between every number and symbol in the string.\nx may be a negative number.",
    "tags": [
      "strings",
      "algebra",
      "math",
      "numbers"
    ],
    "title": "Evaluating Simple Algebra"
  },
  {
    "_id": "7WpdYfZPNFCM4oBvd",
    "difficulty": 2.736842105263158,
    "language": "python3",
    "summary": "Make a function that takes a 2D list and returns True if it is a Magic Square and False if it is not. A Magic Square is an arrangement of numbers in a square in such a way that the sum of each row, column, and diagonal is one constant number, the \"magic constant\".\n\nExamples\nis_magic([[2, 7, 6], [9, 5, 1], [4, 3, 8]]) ➞ True\n\nRows: 2+7+6 = 9+5+1 = 4+3+8 = 15\nCo",
    "tags": [
      "arrays",
      "validation",
      "numbers",
      "geometry",
      "games"
    ],
    "title": "Magic Square Check"
  },
  {
    "_id": "xZqLfi4gih5SWWsn4",
    "difficulty": 2.738095238095238,
    "language": "python3",
    "summary": "Traveling through Europe one needs to pay attention to how the license plate in the given country is displayed. When crossing the border you need to park on the shoulder, unscrew the plate, re-group the characters according to the local regulations, attach it back and proceed with the journey.\n\nCreate a solution that can format the dmv number into a plate numb",
    "tags": [
      "recursion",
      "strings",
      "regex",
      "logic"
    ],
    "title": "Recursion: License Plate"
  },
  {
    "_id": "jh4jiKNfkHiA6DXDM",
    "difficulty": 2.739130434782609,
    "language": "python3",
    "summary": "Mubashir was reading about Proper and Improper Fractions on Wikipedia. He concluded that if n is the numerator and d is the denominator of a given fraction, the fraction can be called as Proper Fraction if and only if GCD(n,d)==1.\n\nFor example 5/16 is a proper fraction, while 6/16 is an improper fraction, as both 6 and 16 are divisible by 2, thus the fraction",
    "tags": [
      "logic",
      "math",
      "numbers",
      "language_fundamentals"
    ],
    "title": "Proper and Improper Fractions"
  },
  {
    "_id": "YN33GEpLQqa5imcFx",
    "difficulty": 2.7395833333333335,
    "language": "python3",
    "summary": "The goal of this challenge is to return Pascal's triangle up to number 29. Pascal's triangle is the sum of the two upper corners.\n\n   1 1\n  1 2 1\n 1 3 3 1\n\nThere will always be the 1 in the first\nplace and the row in the second.\n\nPascal's Triangle\n\nCreate a function that returns a row from Pascal's triangle. To find the row and column you can use n!/(k!*(n-k)!",
    "tags": [
      "algebra",
      "math",
      "algorithms",
      "loops"
    ],
    "title": "Pascal's Triangle"
  },
  {
    "_id": "tRHaoWNaHBJCYD5Nx",
    "difficulty": 2.7404580152671754,
    "language": "python3",
    "summary": "Create a function that returns True if two strings share the same letter pattern, and False otherwise.\n\nExamples\nsameletterpattern(\"ABAB\", \"CDCD\") ➞ True\n\nsameletterpattern(\"ABCBA\", \"BCDCB\") ➞ True\n\nsameletterpattern(\"FFGG\", \"CDCD\") ➞ False\n\nsameletterpattern(\"FFFF\", \"ABCD\") ➞ False\n\nNotes\nN/A",
    "tags": [
      "strings",
      "validation",
      "regex"
    ],
    "title": "Same Letter Patterns "
  },
  {
    "_id": "hah7DaHKswkT8Tjtq",
    "difficulty": 2.7419354838709675,
    "language": "python3",
    "summary": "A numeric string s is beautiful if it can be split into a sequence of two or more positive integers, a[1], a[2], ...a[n], satisfying the following conditions:\n\na[i] - a[i-1] = 1 for any 1 < i <= n (i.e. each element in the sequence is one more than the previous element).\nNo a[i] contains a leading zero. For example, we can split s = 10203 into the sequence {1,",
    "tags": [
      "strings",
      "algorithms"
    ],
    "title": "Separate the Numbers"
  },
  {
    "_id": "dix2XgYpxcsmaukA7",
    "difficulty": 2.742857142857143,
    "language": "python3",
    "summary": "Create a function that takes a positive integer and returns a string expressing how the number can be made by multiplying powers of its prime factors.\n\nExamples\nexpress_factors(2) ➞ \"2\"\n\nexpress_factors(4) ➞ \"2^2\"\n\nexpress_factors(10) ➞ \"2 x 5\"\n\nexpress_factors(60) ➞ \"2^2 x 3 x 5\"\n\nNotes\nAll inputs will be positive integers in the range 1 < n < 10,000.\nIf a fa",
    "tags": [
      "algorithms",
      "formatting",
      "math"
    ],
    "title": "Powerful Prime Factor"
  },
  {
    "_id": "m42wuSJtbRYC2HmRP",
    "difficulty": 2.742857142857143,
    "language": "python3",
    "summary": "Comparing two numbers written in index form like 2^11 and 3^7 is not difficult, as any calculator would confirm that 2^11 = 2048   519432^525806 would be much more difficult, as both numbers contain over three million digits.\n\nCreate a function that takes Base-Exponent pairs and returns the line number which has the greatest numerical value.\n\nExamples\nlargest_",
    "tags": [
      "math",
      "numbers",
      "logic"
    ],
    "title": "Largest Exponential"
  },
  {
    "_id": "sRE3RGnWs7AHqGMkR",
    "difficulty": 2.742857142857143,
    "language": "python3",
    "summary": "Write five regular expressions:\nOne called integers that will match all whole numbers, positive or negative.\nOne called floats that will match all decimal numbers, positive or negative.\nOne called positive that will match all positive numbers, whole or decimal.\nOne called negative that will match all negative numbers, whole or decimal.\nOne called numbers that",
    "tags": [
      "regex"
    ],
    "title": "RegEx Exercise #3: Find the Numbers"
  },
  {
    "_id": "aQWPiDnfwdE7xnqDq",
    "difficulty": 2.744186046511628,
    "language": "python3",
    "summary": "Create a function that can take 1, 2, or 3 arguments (like the range function) and returns a tuple. This should be able to return float values (as opposed to the range function which can't take float values as a step).\n\nExamples\ndrange(1.2, 5.9, 0.45) ➞ (1.2, 1.65, 2.1, 2.55, 3.0, 3.45, 3.9, 4.35, 4.8, 5.25, 5.7)\n\ndrange(10) ➞ (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n\nd",
    "tags": [
      "algebra",
      "data_structures",
      "numbers"
    ],
    "title": "Decimal Range Function"
  },
  {
    "_id": "Q3wtRQjhNtPBQC9Da",
    "difficulty": 2.744186046511628,
    "language": "python3",
    "summary": "Mubashir needs your help in his maths homework.\n\nCreate a function which takes a list of Complex Numbers and returns the sum as a string.\n\nExamples\nsum_complex([\"2+3i\", \"3-i\"]) ➞ \"5+2i\"\n\nsum_complex([\"1\", \"1\"]) ➞ \"2\"\n\nsum_complex([\"i\", \"2i\", \"3i\"]) ➞ \"6i\"\n\nNotes\nN/A",
    "tags": [
      "math",
      "strings",
      "numbers",
      "arrays"
    ],
    "title": "Complex Numbers Sum"
  },
  {
    "_id": "Ld4xBpqBXqygwQ5St",
    "difficulty": 2.7464788732394365,
    "language": "python3",
    "summary": "Your task is to write a program which allows teachers to create a multiple choice test in a class called Testpaper and to be also able to assign a minimum pass mark. The testpaper's subject should also be included. The attributes are in the following order:\n\nsubject\nmarkscheme\npass_mark\n\nAs well as that, we need to create student objects to take the test itsel",
    "tags": [
      "classes",
      "objects",
      "numbers",
      "formatting"
    ],
    "title": "Multiple Choice Tests"
  },
  {
    "_id": "9dLCLhkaJ459CpfhG",
    "difficulty": 2.75,
    "language": "python3",
    "summary": "Write a regular expression that matches numbers whose digits are not repeated (i.e. digits are distinct).\n\nExamples\npattern = \"yourregularexpressionhere\"\n\nbool(re.match(pattern, \"123\")) ➞ True\n\nbool(re.match(pattern, \"112233\")) ➞ False\n\nbool(re.match(pattern, \"1025\")) ➞ True\n\nNotes\nYou don't need to write a function, just the pattern.\nInput is a number as a st",
    "tags": [
      "regex",
      "strings",
      "validation"
    ],
    "title": "RegEx Exercise #7: Distinct Digits"
  },
  {
    "_id": "HoFKikySJb4MebyYd",
    "difficulty": 2.75,
    "language": "python3",
    "summary": "Suppose any nxm matrix of 0s and 1s can be transformed into a second matrix, where each number in position (i, j) in the new matrix is the sum of 1s in row i and column j in the original matrix, excluding itself (if it is a 1).\n\n[[1, 0, 0, 0, 1],\n[0, 1, 0, 0, 0],\n[0, 0, 0, 1, 0],\n[0, 1, 0, 1, 0],\n[0, 1, 0, 0, 0]]\n\n[1, 5, 2, 4, 1],\n[2, 4, 1, 3, 2],\n[2, 4, 1, 1,",
    "tags": [
      "arrays",
      "loops",
      "higher_order_functions"
    ],
    "title": "Intersecting Rows and Columns "
  },
  {
    "_id": "QNvtMEBzxz5DvyXTe",
    "difficulty": 2.75,
    "language": "python3",
    "summary": "Create a function that determines the minimum number of characters needed to make a strong password.\n\nA password is considered strong if it satisfies the following criteria:\n\nIts length is at least 6.\nIt contains at least one digit.\nIt contains at least one lowercase English character.\nIt contains at least one uppercase English character.\nIt contains at least",
    "tags": [
      "validation",
      "strings"
    ],
    "title": "Strong Password"
  },
  {
    "_id": "WCpSBQ5y8q7QfWTnD",
    "difficulty": 2.75,
    "language": "python3",
    "summary": "Most Italian verbs fall into one of three categories: those ending in are, those ending in ere, and those ending in ire. How a verb is inflected depends on what category it belongs to.\n\nA simple way to inflect an Italian verb is: delete the are/ere/ire ending to get the verb base, append a part specific to its category, and append a part common to all verbs. F",
    "tags": [
      "strings",
      "formatting"
    ],
    "title": "Learn Italian Verbs!"
  },
  {
    "_id": "AgGWvdPi56x5nriQW",
    "difficulty": 2.75,
    "language": "python3",
    "summary": "Create a function that takes a list of pyramid numbers and returns the maximum sum of consecutive numbers from the top to the bottom of the pyramid.\n\n                        /3/\n                        \\7\\ 4\n                       2 \\4\\ 6\n                      8 5 \\9\\ 3\n\nLongest slide down sum is 3 + 7 + 4 + 9 = 23\n\nExamples\nlongest_slide([[3], [7, 4], [2, 4,",
    "tags": [
      "numbers",
      "algorithms",
      "functional_programming"
    ],
    "title": "Longest Slide of Pyramid"
  },
  {
    "_id": "z9tnydD5Fix3g3mas",
    "difficulty": 2.753086419753086,
    "language": "python3",
    "summary": "Create a function that checks if the sub-lists in a list adhere to the specified pattern.\n\nExamples\ncheck_pattern([[1, 1], [2, 2], [1, 1], [2, 2]], \"ABAB\") ➞ True\n\ncheck_pattern([[1, 2], [1, 3], [1, 4], [1, 2]], \"ABCA\") ➞ True\n\ncheck_pattern([[1, 2, 3], [1, 2, 3], [3, 2, 1], [3, 2, 1]], \"AABB\") ➞ True\n\ncheck_pattern([[8, 8, 8, 8], [7, 7, 7, 7], [6, 6, 6, 6], [",
    "tags": [
      "arrays",
      "functional_programming"
    ],
    "title": "Fit the Pattern"
  },
  {
    "_id": "ajpDcExmmPy4Qaezi",
    "difficulty": 2.7586206896551726,
    "language": "python3",
    "summary": "The 2019/20 season of the English Premier League (EPL) saw Liverpool FC win the title for the first time despite their bitter rivals, Manchester United, having won 13 titles!\n\nCreate a function that receives an alphabetically sorted array of the results achieved by each team in that season and the name of one of the teams. The function should return a string g",
    "tags": [
      "arrays",
      "data_structures",
      "sorting"
    ],
    "title": "Who Won the League?"
  },
  {
    "_id": "F77JQs68RSeTBiGtv",
    "difficulty": 2.759259259259259,
    "language": "python3",
    "summary": "Given an nxn grid of consecutive numbers, return the grid's Diamond Sum. The diamond sum is defined as the sum of the numbers making up the diagonals between adjacent sides.\n\nExamples\ndiamond_sum(1) ➞ 1\n\n[1]\n\ndiamond_sum(3) ➞ 20\n\n[\n  [1, _, 3],\n  [, 5, ],\n  [7, _, 9]\n]\n\nThe numbers behind the underscores make up the Diamond Sum.\n2 + 4 + 6 + 8 = 20\n\ndiamond_sum",
    "tags": [
      "numbers",
      "math",
      "objects",
      "arrays"
    ],
    "title": "Diamond Sum"
  },
  {
    "_id": "fTXXkQ7bfuQDjgNyH",
    "difficulty": 2.761904761904762,
    "language": "python3",
    "summary": "Each year has 365 or 366 days. Given a string date representing a Gregorian calendar date formatted as month/day/year, return the day-number of the year.\n\nExamples\ndayofyear(\"11/16/2020\") ➞ 321\n\ndayofyear(\"1/9/2019\") ➞ 9\n\ndayofyear(\"3/1/2004\") ➞ 61\n\ndayofyear(\"12/31/2000\") ➞ 366\n\nNotes\nAll input strings in tests are valid dates.",
    "tags": [
      "dates",
      "formatting",
      "numbers",
      "strings"
    ],
    "title": "Day Number of Year"
  },
  {
    "_id": "aMTXfakahQ45oZbJP",
    "difficulty": 2.7625,
    "language": "python3",
    "summary": "A complete bracelet is a list with at least one subsequence (pattern) repeating at least two times, and completely - the subsequence cannot be cut-off at any point. The subsequence must have length two or greater.\n\nComplete bracelets:\n\n[1, 2, 3, 3, 1, 2, 3, 3]  # Pattern: [1, 2, 3, 3]\n\n[1, 2, 1, 2, 1, 2, 1, 2]  # Pattern: [1, 2] or [1, 2, 1, 2]\n\n[1, 1, 6, 1, 1",
    "tags": [
      "arrays",
      "loops",
      "scope",
      "validation"
    ],
    "title": "The Complete Bracelet"
  },
  {
    "_id": "DQjTuqfcv4ZdHMMf6",
    "difficulty": 2.763157894736842,
    "language": "python3",
    "summary": "6174 is known as one of Kaprekar's constants, after the Indian mathematician D. R. Kaprekar. Number 6174  is notable for the following rule:\n\nTake any four-digit number, using at least two different digits (leading zeros are allowed).\nArrange the digits in descending and then in ascending order to get two four-digit numbers, adding leading zeros if necessary.",
    "tags": [
      "sorting",
      "recursion",
      "numbers",
      "arrays"
    ],
    "title": "Kaprekar's Constant"
  },
  {
    "_id": "JEt4kwPtY6CGPsT9t",
    "difficulty": 2.764705882352941,
    "language": "python3",
    "summary": "Create a function that takes a mathematical expression as a string, list of numbers on which the mathematical expression is to be calculated and return the result as a list of string.\n\nExamples\nmathematical(\"f(y)=y+1\",[1,2]) ➞ [\"f(1)=2\",\"f(2)=3\"]\n\nmathematical(\"f(y)=y^2\",[1,2,3]) ➞ [\"f(1)=1\",\"f(2)=4\",\"f(3)=9\"]\n\nmathematical(\"f(y)=yx3\",[1,2,3]) ➞ [\"f(1)=3\",\"f(2",
    "tags": [
      "math",
      "strings",
      "language_fundamentals"
    ],
    "title": "Calculating Mathematical  Expression"
  },
  {
    "_id": "kQayLoFNx4QgWahHu",
    "difficulty": 2.764705882352941,
    "language": "python3",
    "summary": "R, a programming language used for Statistics and Data Analysis, has the function order, which returns a list with the indices needed to sort the original vector(∗).\n\nFor example:\n\nmy_list = [1, 3, 3, 9, 8]\nOrdered would be: [0, 1, 2, 4, 3]\n\nIn plain words, order tells you what elements to look at in your original vector to sort it. The list mylist[0] + mylist",
    "tags": [
      "sorting",
      "arrays"
    ],
    "title": "Sorting in R: Order (Part I)"
  },
  {
    "_id": "KBmKcorkjbuXds6Jo",
    "difficulty": 2.764705882352941,
    "language": "python3",
    "summary": "Mubashir needs to assemble a parcel of ordered chocolates. He got two types of chocolates:\nSmall chocolates (2 grams each)\nBig chocolates (5 grams each)\n\nCreate a function that takes three parameters: Number of small available chocolates nsmall, number of big chocolates available nbig and desired weight (in grams) of the final parcel order.\n\nThe function shoul",
    "tags": [
      "algorithms",
      "logic",
      "functional_programming"
    ],
    "title": "Chocolates Parcel"
  },
  {
    "_id": "A52kaKXg42bB7PKHE",
    "difficulty": 2.7701149425287355,
    "language": "python3",
    "summary": "Write a function that sorts list while keeping the list structure.\nNumbers should be first then letters both in ascending order.\n\nExamples\nnumthenchar([\n\t[1, 2, 4, 3, \"a\", \"b\"],\n  [6, \"c\", 5], [7, \"d\"],\n  [\"f\", \"e\", 8]\n]) ➞ [\n  [1, 2, 3, 4, 5, 6],\n  [7, 8, \"a\"],\n  [\"b\", \"c\"], [\"d\", \"e\", \"f\"]\n]\n\nnumthenchar([\n  [1, 2, 4.4, \"f\", \"a\", \"b\"],\n  [0], [0.5, \"d\",\"X\",3",
    "tags": [
      "arrays",
      "sorting"
    ],
    "title": "Numbers First, Letters Second"
  },
  {
    "_id": "4AzBbuPLxKfJd7aeG",
    "difficulty": 2.7708333333333335,
    "language": "python3",
    "summary": "Create a function that takes an encryption key (a string with an even number of characters) and a message to encrypt. Group the letters of the key by two:\n\n\"gaderypoluki\" -> \"ga de ry po lu ki\"\n\nNow take the message for encryption. If the message character appears in the key, replace it with an adjacent character in the grouped version of the key. If the messa",
    "tags": [
      "algorithms",
      "cryptography",
      "strings"
    ],
    "title": "Gaderypoluki Cipher"
  },
  {
    "_id": "Ygt4LGupxDAqXNrhS",
    "difficulty": 2.7714285714285714,
    "language": "python3",
    "summary": "Given a grid of numbers, return a grid of the Spotlight Sum of each number. The spotlight sum can be defined as the total of all numbers immediately surrounding the number on the grid, including the number in the total.\n\nExamples\nspotlight_map([\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n]) ➞ [\n  [12, 21, 16],\n  [27, 45, 33],\n  [24, 39, 28]\n]\n\nspotlight_map([\n  [2,",
    "tags": [
      "algorithms",
      "arrays",
      "higher_order_functions",
      "conditions"
    ],
    "title": "Spotlight Map"
  },
  {
    "_id": "uHcc8Gg4jwSax5qd4",
    "difficulty": 2.7714285714285714,
    "language": "python3",
    "summary": "Ted works as a computer programmer at Minecraft Inc. His boss has just given him an important assignment to update the code for the minecart tracks by the end of April. However, he has recently had to self-isolate due to Covid-19 and has left the code for the tracks BACK AT WORK!! He has the shorthand for the tracks he's supposed to look at, and where the cart",
    "tags": [
      "classes",
      "games"
    ],
    "title": "Minecart Tracks"
  },
  {
    "_id": "s89T6kpDGf8Pc6mzf",
    "difficulty": 2.774193548387097,
    "language": "python3",
    "summary": "The table below shows which of the segments a through g are illuminated on the seven segment display for the digits 0 through 9. When the number on the display changes, some of the segments may stay on, some may stay off, and others change state (on to off, or off to on).\n\nCreate a function that accepts a string of digits, and for each transition of one\ndigi",
    "tags": [
      "logic",
      "numbers"
    ],
    "title": "Seven Segment Display"
  },
  {
    "_id": "P9Bzzc8BoEPXkwW5G",
    "difficulty": 2.774193548387097,
    "language": "python3",
    "summary": "Mubashir shuffled a given string of letters by mistake. Some letters in the input string are representing a digit (from zero to nine). Help him to recover all the digits.\n\nOnly consecutive letters can be used. \"OTNE\" cannot be recovered to 1.\nEvery letter has to start with an increasing index. \"ONENO\" results to 11, because E can be used two times.\nYou can ign",
    "tags": [
      "strings",
      "logic",
      "loops",
      "algorithms"
    ],
    "title": "Digits Recovery"
  },
  {
    "_id": "XjgoXNmnz59txiQp3",
    "difficulty": 2.775,
    "language": "python3",
    "summary": "About a month ago I stumbled upon an interesting problem — something called the 25 split. In the problem, you had to break up 25 into parts that add to it, and, from those parts, try to create the biggest product.\n\nFor example, 3 * 22 = 66 or 5 * 5 * 5 * 5 * 5 = 3125. With this first part, return the value of the biggest product possible using natural number p",
    "tags": [
      "algebra",
      "math",
      "numbers",
      "control_flow"
    ],
    "title": "Split 25 (Part 1)"
  },
  {
    "_id": "WpRhk6tKJFmvJA6cq",
    "difficulty": 2.7755102040816326,
    "language": "python3",
    "summary": "Due to unforseen circumstances in Suburbia, the trains will be delayed by a further 10 minutes.\n\nCreate a function that will help to plan out and manage these delays! Create a function called manage_delays that does the following:\n\nParameters will be the train object, a destination and number of minutes the delay is.\nIncrement to the train object's expected_ti",
    "tags": [
      "classes",
      "objects",
      "dates"
    ],
    "title": "The Trains Are Delayed Again"
  },
  {
    "_id": "aHDrvGQS6TtJeMEWn",
    "difficulty": 2.7777777777777777,
    "language": "python3",
    "summary": "This challenge is a variant of the classic max sum sublist problem found in this challenge.\n\nAs the name states and given a list of numbers, the goal of that problem is to find the sublist (i.e. sequence of adjacent items) with the largest sum.\n\nFor example:\n\n[1, 6, -1, -5, -2, 5, -1, 4, -7, 1, 2, 3]\n\nThe max sum sublist is [5, -1, 4] which has sum 5 - 1 + 4 =",
    "tags": [
      "algorithms",
      "arrays",
      "math",
      "numbers"
    ],
    "title": "Pair of Sublists with Max Sum (Casual Version)"
  },
  {
    "_id": "eDQDChGrv6y4fd44j",
    "difficulty": 2.7777777777777777,
    "language": "python3",
    "summary": "A billboard is an m * n list, where each list element consists of either one letter or a blank space. You are given a phrase and the billboard dimensions. Create a function that determines whether you can place the complete phrase on the billboard.\n\nThere are two rules:\n\nIf there is a space between two words:\n   If they are on the same row, you must put a spac",
    "tags": [
      "arrays",
      "validation"
    ],
    "title": "Billboard"
  },
  {
    "_id": "FbQqXepHC4wxrWgYg",
    "difficulty": 2.7794117647058822,
    "language": "python3",
    "summary": "Given a number, return all its prime divisors in a list. Create a function that takes a number as an argument and returns all its prime divisors.\n\nTo illustrate:\n\nIf n = 27\nAll divisors are: [3, 9, 27]\nFinally, from that list of divisors, return the prime ones: [3]\n\nExamples\nprime_divisors(27) ➞ [3]\n\nprime_divisors(99) ➞ [3, 11]\n\nprime_divisors(3457) ➞ [3457]",
    "tags": [
      "math",
      "algorithms",
      "numbers"
    ],
    "title": "Prime Divisors"
  },
  {
    "_id": "XnByzPPcGo5CuTmZ4",
    "difficulty": 2.7837837837837838,
    "language": "python3",
    "summary": "In The Netherlands we have PostNL, the postal company. They use KixCodes, a fast way to deliver letters and packages that can be scanned during the process.\n\nKix Code\n\nThe code is a combination of: \"Postal code\", \"House/box/call number\" and \"House appendage / suffix\"\n\nIf there is a character between the house number and the suffix, we need to replace that with",
    "tags": [
      "algorithms",
      "formatting",
      "regex"
    ],
    "title": "KixCodes in the Netherlands"
  },
  {
    "_id": "vudQZFD64nDWkKz8a",
    "difficulty": 2.788732394366197,
    "language": "python3",
    "summary": "Given a sentence, return a list of strings which gradually reveals the next letter in every word at the same time. Use underscores to hide the remaining letters.\n\nExamples\ngrantthehint(\"Mary Queen of Scots\") ➞ [\n  \"_ _  __\",\n  \"M_ Q_ o S__\",\n  \"Ma_ Qu_ of Sc__\",\n  \"Mar_ Que_ of Sco_\",\n  \"Mary Quee_ of Scot_\",\n  \"Mary Queen of Scots\"\n]\n\ngrantthehint(\"The Life o",
    "tags": [
      "arrays",
      "strings",
      "loops"
    ],
    "title": "Give Me a Hint"
  },
  {
    "_id": "9CWPv99o4EjZgHnkq",
    "difficulty": 2.789473684210526,
    "language": "python3",
    "summary": "Write a function that divides a list into chunks such that the sum of each chunk is <= n. Start from the left side of the list and move to the right.\n\nExamples\ndivide([1, 2, 3, 4, 1, 0, 2, 2], 5)\n➞ [[1, 2], [3], [4, 1, 0], [2, 2]]\n\ndivide([1, 0, 1, 1, -1, 0, 0], 1)\n➞ [[1, 0], [1], [1, -1, 0, 0]]\n\ndivide([2, 1, 0, -1, 0, 0, 2, 1, 3], 3)\n➞ [[2, 1, 0, -1, 0, 0],",
    "tags": [
      "arrays",
      "functional_programming"
    ],
    "title": "Dividing into Chunks of Maximum Sum N"
  },
  {
    "_id": "uojwbCn2yyqqk9Wpf",
    "difficulty": 2.789473684210526,
    "language": "python3",
    "summary": "A positive number greater than 1 can be defined untouchable when it's not equal to the sum of the proper divisors (called also aliquot sum) of any other positive number, in a range starting from 2 and ending with the square of the given number (bounds included).\n\nGiven an integer number, implement a function that returns:\nTrue if the given number is untouchabl",
    "tags": [
      "numbers",
      "math",
      "algorithms"
    ],
    "title": "Untouchable Numbers"
  },
  {
    "_id": "xWW8PMuLN8hmAgLMJ",
    "difficulty": 2.792452830188679,
    "language": "python3",
    "summary": "Mathematical expressions are usually written with infix notation, where the operator is in-between the two operands. Postfix notation, on the other hand, is where the operator follows the operands. As we use operator precedence to determine the order of calculation (e.g. multiplication/division is evaluated before addition/subtraction), we can change the posit",
    "tags": [
      "logic",
      "math"
    ],
    "title": "Postfix Notation (Part 1: Evaluation)"
  },
  {
    "_id": "es6qJTs5zYf8nEBkG",
    "difficulty": 2.7927927927927927,
    "language": "python3",
    "summary": "Create a function that determines whether four coordinates properly create a rectangle. A rectangle has 4 sides and has 90 degrees for each angle. Coordinates are given as strings containing an x- and a y- coordinate: \"(x, y)\".\n\nFor this problem, assume none of the rectangles are tilted.\n\nis_rectangle([\"(0, 0)\", \"(0, 1)\", \"(1, 0)\", \"(1,1)\"]) ➞ True\n\nExamples\ni",
    "tags": [
      "math",
      "strings",
      "validation"
    ],
    "title": "Rectangle or Not? "
  },
  {
    "_id": "LQ9btnAxu7hArLcv7",
    "difficulty": 2.7941176470588234,
    "language": "python3",
    "summary": "Write a function that diagonally orders numbers in a n x n matrix, depending on which of the four corners you originate from: upper-left (ul), upper-right (ur), lower-left (ll), lower-right (lr).\n\nExamples\ndiagonalize(3, \"ul\") ➞ [\n  [0, 1, 2],\n  [1, 2, 3],\n  [2, 3, 4]\n]\n\ndiagonalize(4, \"ur\") ➞ [\n  [3, 2, 1, 0],\n  [4, 3, 2, 1],\n  [5, 4, 3, 2],\n  [6, 5, 4, 3]\n]",
    "tags": [
      "arrays",
      "functional_programming"
    ],
    "title": "Diagonal Matrices"
  },
  {
    "_id": "htMy9tkX4wFWHZtsY",
    "difficulty": 2.7941176470588234,
    "language": "python3",
    "summary": "Create a function that takes two times of day (hours, minutes, seconds) and returns the number of occurences of palindrome timestamps within that range, inclusive.\n\nA palindrome timestamp should be read the same hours : minutes : seconds as seconds : minutes : hours, keeping in mind the seconds and hours digits will reverse. For example, 02 : 11 : 20 is a pali",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "Palindrome Timestamps"
  },
  {
    "_id": "KZFEAv8Sqh9zW5eLS",
    "difficulty": 2.7954545454545454,
    "language": "python3",
    "summary": "A list that represents a Binary Tree is in the following form:\n\nbinarytree = [val, lstleft, lst_right]\n\nWhen lstleft is the left side of the tree and lstright is the right side of the tree.\n\nTo illustrate:\n\nlist1 = [3, [ 8, [ 5, None, None], None], [ 7, None, None]]\n\nlist1 represents the following Binary Tree:\n\n                    3\n                   / \\",
    "tags": [
      "recursion",
      "data_structures",
      "validation"
    ],
    "title": "Find Value in a Binary Tree"
  },
  {
    "_id": "B6M8jqcq3nP4gDPEi",
    "difficulty": 2.7966101694915255,
    "language": "python3",
    "summary": "Write a function that extracts the max value of a number in a list. If there are two or more max values, return it as a list, otherwise, return the number. This process could be relatively easy with some of the built-in list functions but the required approach is recursive.\n\nExamples\niso_group([31, 7, 2, 13, 7, 9, 10, 13]) ➞ 31\n\niso_group([1, 3, 9, 5, 1, 7, 9,",
    "tags": [
      "recursion",
      "arrays"
    ],
    "title": "Recursion: Isolated or Grouped?"
  },
  {
    "_id": "WyttgdGuQGaRBqhhP",
    "difficulty": 2.8,
    "language": "python3",
    "summary": "Given an incomplete palindrome as a string, return the minimum letters needed to be added on to the end to make the string a palindrome.\n\nExamples\nminpalindromesteps(\"race\") ➞ 3\nAdd 3 letters: \"car\" to make \"racecar\"\n\nminpalindromesteps(\"mada\") ➞ 1\nAdd 1 letter: \"m\" to make \"madam\"\n\nminpalindromesteps(\"mirror\") ➞ 3\nAdd 3 letters: \"rim\" to make \"mirrorrim\"\n\nNot",
    "tags": [
      "strings",
      "algorithms"
    ],
    "title": "Minimum Steps to a Palindrome"
  },
  {
    "_id": "eMRXLJLpaSTxZvsKN",
    "difficulty": 2.8,
    "language": "python3",
    "summary": "Due to a huge scandal about the Laddersons Ladder Factory creating faulty ladders, the Occupational Safety and Health Administration require your help in determining whether a ladder is safe enough for use in the work place! It is vital that a ladder passes all criterea:\n\nThe ladder must be at least 5 characters wide.\nThe ladder mustn't have more than a 2 char",
    "tags": [
      "arrays",
      "strings",
      "validation"
    ],
    "title": "An OSHA Approved Ladder?"
  },
  {
    "_id": "rbeuWab36FAiLj65m",
    "difficulty": 2.8,
    "language": "python3",
    "summary": "Write a function that groups words by the number of capital letters and returns a dictionary of object entries whose keys are the number of capital letters and the values are the groups.\n\nExamples\ngrouping([\"HaPPy\", \"mOOdy\", \"yummy\", \"mayBE\"]) ➞ {\n  0: [\"yummy\"],\n  2: [\"mayBE\", \"mOOdy\"],\n  3: [\"HaPPy\"]\n}\n\ngrouping([\"eeny\", \"meeny\", \"miny\", \"moe\"]) ➞ {\n  0: [\"e",
    "tags": [
      "objects",
      "sorting",
      "strings"
    ],
    "title": "Capitalization Families"
  },
  {
    "_id": "u5JrjKv9BNLLPSKJs",
    "difficulty": 2.8,
    "language": "python3",
    "summary": "In the Recursive Staircase Problem, your task is to find the number of ways of climbing a staircase of n stairs, with a set s possible steps. The example below shows that if n was 2 and s was { 1, 2 }, the answer would be 2:\n\n       _\n   _ |2  You could either go from step 0-2 (because the set s contains 2), or\n_ | 1    you could go from 0-1-2 (because the set",
    "tags": [
      "recursion",
      "conditions"
    ],
    "title": "The Recursive Staircase Problem"
  },
  {
    "_id": "xFKwv7pAzEdNehwrt",
    "difficulty": 2.8,
    "language": "python3",
    "summary": "Brackets and parentheses in mathematical expressions have to conform to certain logical rules. Every opening bracket must have a closing mate somewhere further down the line. Although brackets can be nested, different types cannot overlap:\n\n([+3]-1) makes sense because each set of brackets contains or is contained by another set.\n([+3)-1] makes no sense becaus",
    "tags": [
      "logic",
      "validation"
    ],
    "title": "Bracket Logic"
  },
  {
    "_id": "yLMAdJjCXM5SGusit",
    "difficulty": 2.8,
    "language": "python3",
    "summary": "Create strings that, when evaluated with eval(), equal the number associated with the string name. The only alphanumeric characters allowed is the substring \"chr\".\n\nExamples\nzero = \"write\"\none = \"your\"\ntwo = \"strings\"\nfifty = \"here\"\n\neval(zero) ➞ 0\n\neval(one) ➞ 1\n\neval(two) ➞ 2\n\neval(fifty) ➞ 50\n\nNotes\nHint: The equality operator returns a boolean value, and b",
    "tags": [
      "language_fundamentals",
      "games",
      "logic"
    ],
    "title": "PyFrick: Numbers"
  },
  {
    "_id": "tY5fmSbk85N8digXQ",
    "difficulty": 2.80188679245283,
    "language": "python3",
    "summary": "Write a function that replaces every row and column that contains at least one 1 into a row/column that is filled entirely with 1s.\n\nSolve this without returning a copy of the input list.\n\nExamples\nones_infection([\n  [0, 0, 1],\n  [0, 0, 0],\n  [0, 0, 0]\n]) ➞ [\n  [1, 1, 1],\n  [0, 0, 1],\n  [0, 0, 1]\n]\n\nones_infection([\n  [1, 0, 1, 0],\n  [0, 1, 0, 0],\n  [0, 0, 0,",
    "tags": [
      "arrays",
      "language_fundamentals"
    ],
    "title": "Infection of the Ones"
  },
  {
    "_id": "9AMT6SC4Jz8tExihs",
    "difficulty": 2.8035714285714284,
    "language": "python3",
    "summary": "Create a function to generate all nonconsecutive binary strings where nonconsecutive is defined as a string where no consecutive ones are present, and where n governs the length of each binary string.\n\nExamples\ngenerate_nonconsecutive(1) ➞ \"0 1\"\n\ngenerate_nonconsecutive(2) ➞ \"00 01 10\"\n\ngenerate_nonconsecutive(3) ➞ \"000 001 010 100 101\"\n\ngenerate_nonconsecutiv",
    "tags": [
      "formatting",
      "loops",
      "strings",
      "interview"
    ],
    "title": "Generate All Nonconsecutive Binary Strings"
  },
  {
    "_id": "sZkMrkgnRN3z4CxxB",
    "difficulty": 2.8048780487804876,
    "language": "python3",
    "summary": "Make a Rectangle class with four parameters, an x, a y (representing the top-left corner of the rectangle), a width and a height exclusively in that order.\n\nLastly, make a function intersecting that takes two Rectangle objects and returns True if those objects are intersecting (colliding), else return False.\n\nIMPORTANT: horizontal axis goes from left to right",
    "tags": [
      "math",
      "classes"
    ],
    "title": "Rectangle Collision Detection"
  },
  {
    "_id": "5xPh4eEAtpMdXNoaH",
    "difficulty": 2.8076923076923075,
    "language": "python3",
    "summary": "Given a string s, return the length of the longest palindrome that can be built with those letters.\n\nExamples\nlongest_palindrome(\"a\") ➞ 1\n\nlongest_palindrome(\"bb\") ➞ 2\n\nlongest_palindrome(\"abccccdd\") ➞ 7\n\nlongest_palindrome(\"\") ➞ 0\n\nNotes\nN/A",
    "tags": [
      "loops",
      "strings"
    ],
    "title": "Longest Palindrome"
  },
  {
    "_id": "jDjDgRPpp9cTEPkKH",
    "difficulty": 2.8076923076923075,
    "language": "python3",
    "summary": "Write a function that calculates overtime and pay associated with overtime.\nWorking 9 to 5: regular hours\nAfter 5pm is overtime\n\nYour function gets a list with 4 values:\nStart of working day, in decimal format, (24-hour day notation)\nEnd of working day. (Same format)\nHourly rate\nOvertime multiplier\n\nYour function should spit out:\n$ + earned that day (rounded t",
    "tags": [
      "algebra",
      "arrays",
      "math",
      "numbers"
    ],
    "title": "Working 9 to 5"
  },
  {
    "_id": "mfKmMv28DicrAhrkJ",
    "difficulty": 2.8076923076923075,
    "language": "python3",
    "summary": "In this challenge, you have to mix two or more colors to get a brand new color from their average rgb values.\n\nEach color will be represented in its hexadecimal notation, and so as a string starting with # containing three pairs of alphanumeric characters, equals to the three rgb values (in base 16) of red, green and blue.\n\nTo obtain the new color, you need to",
    "tags": [
      "numbers",
      "strings",
      "formatting"
    ],
    "title": "Hexadecimal Color Mixer"
  },
  {
    "_id": "4kwft4k6zebmM2BDX",
    "difficulty": 2.8095238095238093,
    "language": "python3",
    "summary": "The Edabit Medical Industries are developing a new drug, the Edabitin™, which will (hopefully) increase the programming skills of patients. Various tests are carried out on different programmers: for a week some are given the Edabitin™, while others are supplied simple generic Tutorial powder. After a week, the number of programmers able to solve ten exercises",
    "tags": [
      "algorithms",
      "data_structures",
      "math",
      "objects"
    ],
    "title": "Epidemiology: the Chi-Squared Test"
  },
  {
    "_id": "sKXWQym3xg6uBLrpY",
    "difficulty": 2.811320754716981,
    "language": "python3",
    "summary": "The median of a data sample is the value that separates the higher half and the lower half of the data. For example, the median of [1, 2, 3] is 2, and the median of [1, 2, 3, 4] is 2.5 (because (2 + 3) / 2 = 2.5). Another way of saying \"median\" is to say \"Q2\" (it's the second quartile). Q1 and Q3 are the medians of the values above or below the Q2. The IQR is",
    "tags": [
      "math",
      "numbers",
      "algorithms",
      "sorting"
    ],
    "title": "Interquartile Range (IQR)"
  },
  {
    "_id": "mDuDhhMWrdHJSGdtm",
    "difficulty": 2.814814814814815,
    "language": "python3",
    "summary": "You are given a number n. Determine whether n has exactly 3 divisors or not.\n\nExamples\nisexactlythree(4) ➞ True\n4 has only 3 divisors: 1, 2 and 4\n\nisexactlythree(12) ➞ False\n12 has 6 divisors: 1, 2, 3, 4, 6, 12\n\nisexactlythree(25) ➞ True\n5 has only 3 divisors: 1, 5, 25\n\nNotes\n1 ≤ n ≤ 10^12",
    "tags": [
      "algebra",
      "math",
      "numbers",
      "validation"
    ],
    "title": "Exactly Three"
  },
  {
    "_id": "X9CsA6955cKRApBNH",
    "difficulty": 2.8155339805825244,
    "language": "python3",
    "summary": "A consecutive-run is a list of adjacent, consecutive integers. This list can be either increasing or decreasing. Create a function that takes a list of numbers and returns the length of the longest consecutive-run.\n\nTo illustrate:\n\nlongestRun([1, 2, 3, 5, 6, 7, 8, 9]) ➞ 5\nTwo consecutive runs: [1, 2, 3] and [5, 6, 7, 8, 9] (longest).\n\nExamples\nlongest_run([1, ",
    "tags": [
      "arrays",
      "control_flow",
      "logic",
      "loops"
    ],
    "title": "Longest Consecutive Run"
  },
  {
    "_id": "vhzXonKmxnFd5ib7s",
    "difficulty": 2.8157894736842106,
    "language": "python3",
    "summary": "Create a function that multiplies two matrices (n x m) and (p x q) and returns:\n\n\"invalid\" if the matrices are not multiplicable (i.e. if m is not equal to p).\nThe multiplication matrix (n x q) otherwise.\n\nExamples\nmatrix_multiply([[1, 2]], [[3], [4]]) ➞ [[11]]\n\nmatrix_multiply([[0, 0], [0, 1]], [[1, 2], [3, 4], [5, 6]]) ➞ \"invalid\"\n\nmatrix_multiply([[4, 2], [",
    "tags": [
      "algorithms",
      "arrays",
      "loops",
      "math"
    ],
    "title": "Matrix Multiplication (Part 2)"
  },
  {
    "_id": "2iQhC3t4SDZ6LGMWw",
    "difficulty": 2.8181818181818183,
    "language": "python3",
    "summary": "Given a list of 2D points [x, y], create a function that returns True if those points can be on the bounds of a rectangle, False otherwise.\n\nExamples\nonrectanglebounds([[0, 1], [1, 0], [1, 1], [0, 0]]) ➞ True\n\nonrectanglebounds([[0, 1], [1, 0], [1, 1], [0.5, 0.5]]) ➞ False\n\nonrectanglebounds([[0, 1], [10, 0], [10, 1]]) ➞ True\n\nonrectanglebounds([[0, 1]]) ➞ Tru",
    "tags": [
      "math",
      "arrays"
    ],
    "title": "Points on Rectangle Bounds"
  },
  {
    "_id": "437h8sNsWAPCcMRSg",
    "difficulty": 2.8181818181818183,
    "language": "python3",
    "summary": "Write a function that returns True if the given number num is a product of any two prime numbers.\n\nExamples\nproductofprimes(2059) ➞ True\n29*71=2059\n\nproductofprimes(10) ➞ True\n2*5=10\n\nproductofprimes(25) ➞ True\n5*5=25\n\nproductofprimes(999) ➞ False\nThere are no prime numbers.\n\nNotes\nnum is always greater than 0.\n0 and 1 aren't prime numbers.",
    "tags": [
      "algebra",
      "math",
      "numbers",
      "validation"
    ],
    "title": "Product of Two Prime Numbers"
  },
  {
    "_id": "bEnXQt8GLoNik54Ed",
    "difficulty": 2.8205128205128207,
    "language": "python3",
    "summary": "Given a string s formed from zeros and ones, return the maximum score after splitting the string into two non-empty substrings (left and right).\n\nThe score after splitting a string is the number of zeros in the left substring plus the number of ones in the right substring.\n\nExamples\nmax_score(\"00111\") ➞ 5\nleft = \"00\", right = \"111\" ➞ 2 + 3 ➞ 5\n\nmax_score(\"1111",
    "tags": [
      "algorithms",
      "conditions",
      "loops",
      "strings"
    ],
    "title": "Maximum Score From Two Parts of a String"
  },
  {
    "_id": "BpKbaegMQJ5xRADtb",
    "difficulty": 2.8225806451612905,
    "language": "python3",
    "summary": "In this challenge, you have to establish if an integer is an Unprimeable number. To be Unprimeable, when a single digit of a composite number is exchanged with any digit from 0 up to 9, the new number obtained must not be a prime:\n\nnumber = 14\n\nNumbers obtained changing the first digit (1):\n\n04 (4), 14, 24, 34, 44, 54, 64, 74, 84, 94\nLeading zeros are not cons",
    "tags": [
      "loops",
      "numbers",
      "conditions"
    ],
    "title": "The Unprimeables"
  },
  {
    "_id": "oxf7b7vroXvWBJ9Nq",
    "difficulty": 2.826923076923077,
    "language": "python3",
    "summary": "We all love a little bargain.\n\nYour function will get a price, and a load of discounts. Your job is to write the function so that it calculates the maximum possible discount.\n\nThe price is a Number.\nThe load of discounts is a string like: 15%, 8, 50%.\nSo, percentages, with %, and amounts, without %.\nYou have to think about the order of applying the discounts.",
    "tags": [
      "algorithms",
      "numbers",
      "math"
    ],
    "title": "Discount! Discount! Discount!"
  },
  {
    "_id": "rihSbQq6x8R2D4aoa",
    "difficulty": 2.836734693877551,
    "language": "python3",
    "summary": "As you know, the function range() returns a range of numbers, but it doesn't work on alphabets. In this challenge, we try to fill this gap.\n\nWrite a function alpha-range() which takes three arguments start, stop, and step (which its default value is one). The function must return a list of alphabetical characters, ranging from start character to stop character",
    "tags": [
      "arrays",
      "strings"
    ],
    "title": "Alpha-Range"
  },
  {
    "_id": "RxHjtFqu3w8L9i5fx",
    "difficulty": 2.8372093023255816,
    "language": "python3",
    "summary": "The Bell number is the number of ways a list of n items can be partitioned into non-empty sublists. See the resources section for an in-depth explanation.\n\nCreate a function that takes a number n and returns the corresponding Bell number.\n\nExamples\nbell(1) ➞ 1\nsample_lst = [1]\npossible_partitions = [[[1]]]\n\nbell(2) ➞ 2\nsample_lst = [1, 2]\npossible_partitions =",
    "tags": [
      "loops",
      "math"
    ],
    "title": "Bell Number"
  },
  {
    "_id": "6RHxTTndfASnPyp8Z",
    "difficulty": 2.8375,
    "language": "python3",
    "summary": "The function is given an array of characters. Compress the array into a string using the following rules. For each group of consecutively repeating characters:\nIf the number of repeating characters is one, append the string with only this character.\nIf the number n of repeating characters x is greater than one, append the string with \"x\" + str(n).\n\nExamples\nco",
    "tags": [
      "arrays",
      "control_flow",
      "language_fundamentals",
      "strings"
    ],
    "title": "String Compression from Characters Array"
  },
  {
    "_id": "RJySHrDkBjSAj5gzq",
    "difficulty": 2.838709677419355,
    "language": "python3",
    "summary": "A permutation of a list is a way to reorder its entries. For instance, [1, 2, 3] has permutations:\n\n[1, 2, 3] [1, 3, 2] [2, 1, 3] [2, 3, 1] [3, 1, 2] [3, 2, 1]\n\nThis challenge is about nested permutations (nespers, for short) which are the same idea as permutations, but now for nested lists.\n\nFor example, the nespers of [1, [2, 3]] are:\n\n[1, [2, 3]] [1, [3, 2]",
    "tags": [
      "arrays",
      "math",
      "logic"
    ],
    "title": "Counting Nespers"
  },
  {
    "_id": "Cgnn4Gas3QpP4QcSL",
    "difficulty": 2.84,
    "language": "python3",
    "summary": "Create a function that takes an integer parameter, n, and returns the sum of all the digits in each integer in the range 0 to 10^n - 1 inclusive.\n\n If n is 1, the range is 0 to 9.\n if n is 2, the range is 0 to 99.\n if n is 12, the range is 0 to 999999999999.\n\nn will always be >= 0. For this challenge, the value of n will be limited to 10000, but the solution s",
    "tags": [
      "math",
      "numbers",
      "algebra"
    ],
    "title": "Sum the Digits of All Integers 0 to 10^n - 1"
  },
  {
    "_id": "SsvcNbR9nzYauMxcK",
    "difficulty": 2.8421052631578947,
    "language": "python3",
    "summary": "Mubashir Hassan recently published Clockwise Cipher. The purpose of this challenge is to take text encrypted by this technique and restore the original text.\n\nExamples\ndecipher_square(\"Ms ussahr nHaaib\") ➞ \"Mubashir Hassan\"\n\ndecipher_square(\"Eisadng  tm    i   zbia a\") ➞ \"Edabit is amazing\"\n\ndecipher_square(\"acer\") ➞ \"acre\"\n\nNotes\nLength of the input ciphertex",
    "tags": [
      "algorithms",
      "cryptography",
      "logic"
    ],
    "title": "Decipher Text Encoded with Clockwise Square Technique"
  },
  {
    "_id": "KgBqna3XhRkoL2mo7",
    "difficulty": 2.8452380952380953,
    "language": "python3",
    "summary": "Given a string s consisting from digits and #, translate s to English lowercase characters as follows:\n\nCharacters (\"a\" to \"i\") are represented by (\"1\" to \"9\").\nCharacters (\"j\" to \"z\") are represented by (\"10#\" to \"26#\").\n\nExamples\ndecrypt(\"10#11#12\") ➞ \"jkab\"\n\ndecrypt(\"1326#\") ➞ \"acz\"\n\ndecrypt(\"25#\") ➞ \"y\"\n\nNotes\nN/A",
    "tags": [
      "conditions",
      "cryptography",
      "loops",
      "strings"
    ],
    "title": "Decrypt the String from Digits to Letters"
  },
  {
    "_id": "3ucrYGBkvJwjbFL4G",
    "difficulty": 2.8461538461538463,
    "language": "python3",
    "summary": "Write a function that, given the start and end values, returns an array containing all the numbers inclusive to that range. See examples below.\n\nExamples\nreversibleinclusivelist(1, 5) ➞ [1, 2, 3, 4, 5]\n\nreversibleinclusivelist(2, 8) ➞ [2, 3, 4, 5, 6, 7, 8]\n\nreversibleinclusivelist(10, 20) ➞ [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n\nreversibleinclusivelist(",
    "tags": [
      "recursion",
      "numbers",
      "logic",
      "math"
    ],
    "title": "Recursion: Reversible Inclusive List Ranges"
  },
  {
    "_id": "NmZaXN5BH7miSAz6s",
    "difficulty": 2.8461538461538463,
    "language": "python3",
    "summary": "An arcade game player wants to climb to the top of the leaderboard and track their ranking. The game uses Dense Ranking, so its leaderboard works like this:\nThe player with the highest score is ranked number 1 on the leaderboard.\nPlayers who have equal scores receive the same ranking number, and the next player(s) receive the immediately following ranking numb",
    "tags": [
      "algorithms",
      "arrays"
    ],
    "title": "Climbing the Leaderboard"
  },
  {
    "_id": "FiPf9yTEfo5aBikPF",
    "difficulty": 2.8461538461538463,
    "language": "python3",
    "summary": "Given an amount of money and a list of coins denominations, create a function that counts how many different ways you can make change with the given money.\n\nExamples\ncoins_combinations(4, [1, 2]) ➞ 3\n1+1+1+1 = 4\n1+1+2 = 4\n2+2 = 4\n\ncoins_combinations(10, [5, 2, 3]) ➞ 4\n\ncoins_combinations(11, [5, 7]) ➞ 0\n\nNotes\nOrder of coins does not matter (i.e. 1+1+2 == 2+1+",
    "tags": [
      "arrays",
      "numbers",
      "logic"
    ],
    "title": "Coins Combinations"
  },
  {
    "_id": "GGibsZwLpLQJrxw8v",
    "difficulty": 2.85,
    "language": "python3",
    "summary": "A lucky number is a number of a sequence generated by a sieve algorithm: if a number in the positive integers series survives to the sieve filtering algorithm, it's lucky and survives, otherwise it disappears from the sequence.\n\nFirst you must obtain a list of numbers, from 1 to the needed size.\nFirst number is 1 and it survives: next to him there is number 2,",
    "tags": [
      "algorithms",
      "numbers",
      "math"
    ],
    "title": "Get the Lucky Number"
  },
  {
    "_id": "dSrisJKHB78aj2d7L",
    "difficulty": 2.85,
    "language": "python3",
    "summary": "Given the perimeter and the area of a triangle, devise a function that returns the length of the sides of all triangles that fit those specifications. The length of the sides must be integers. Sort results in ascending order.\n\ntriangle(perimeter, area) ➞ [[s1, s2, s3]]\n\nExamples\ntriangle(12, 6) ➞ [[3, 4, 5]]\n\ntriangle(45, 97.42786) ➞ [[15, 15, 15]]\n\ntriangle(7",
    "tags": [
      "trigonometry",
      "loops",
      "math"
    ],
    "title": "Triangle Challenge"
  },
  {
    "_id": "5D3iXJSkSreRzNS8W",
    "difficulty": 2.85,
    "language": "python3",
    "summary": "A local news station needs your help to generate the scrolling text for the headlines!\n\nCreate a function that returns a list of strings, where each string contains a single frame of what the scrolling text will look like.\n\nText will scroll from right to left.\nThe screen will have a width of n characters.\nStart and stop when no letters appear on the screen.\n\nT",
    "tags": [
      "strings",
      "loops"
    ],
    "title": "Breaking News!"
  },
  {
    "_id": "dcFp6EuCm8J2HNKFG",
    "difficulty": 2.8529411764705883,
    "language": "python3",
    "summary": "Write a function that returns the sum of all the elements included in the root list.\n\nExamples\nfunc([ [], [] ,[] ]) ➞ 3\n1 + 1 + 1 = 3\nThe three empty lists inside the root list.\n\nfunc([ [3], [2] ,[1,2] ]) ➞ 7\n1 + 1 + 1 = 3\nThe three lists inside the root list.\n1 + 1 + 2 = 4\nThe elements inside the previous lists.\n4 + 3 = 7\n\nfunc([]) ➞ 0\nThe root list is empty",
    "tags": [
      "arrays",
      "logic",
      "algebra",
      "math"
    ],
    "title": "Sum of Elements"
  },
  {
    "_id": "ZvFgCEBqRbBimD7qZ",
    "difficulty": 2.8536585365853657,
    "language": "python3",
    "summary": "Tenpin bowling scores can range from 0 (all gutter balls) to 300 (a perfect game). If you are unfamiliar with scorekeeping, please see the Resources tab for a quick description.\n\nA complete record of a 10 frame bowling game can be given as a list of the number of pins knocked down by each ball in sequence from the beginning to the end of the game.\n\nCreate a fu",
    "tags": [
      "games",
      "numbers"
    ],
    "title": "Bowling Scorekeeping"
  },
  {
    "_id": "jmZe7R4ibXkrQbogr",
    "difficulty": 2.8536585365853657,
    "language": "python3",
    "summary": "Write a regular expression that checks to see if a password is valid. For a password to be valid, it must meet the following requirments:\n\nThe password must contain at least one uppercase character.\nThe password must contain at least one lowercase character.\nThe password must contain at least one number.\nThe password must contain at least one special character",
    "tags": [
      "regex",
      "validation"
    ],
    "title": "Validate Password"
  },
  {
    "_id": "8gE6FCdnWbECiR7ze",
    "difficulty": 2.857142857142857,
    "language": "python3",
    "summary": "In numbers theory, a positive composite integer is a Smith number if its digital root is equal to the digital root of the sum of its prime factors, with factors being counted by multiplicity. Trivially, every prime is also a Smith number, having just one prime factor that is equal to itself. If two Smith numbers are consecutive in the integer series, then they",
    "tags": [
      "numbers",
      "math",
      "higher_order_functions",
      "loops"
    ],
    "title": "The Smiths"
  },
  {
    "_id": "CxxaYAGcuk8TyA9Jt",
    "difficulty": 2.857142857142857,
    "language": "python3",
    "summary": "Write a function that takes a string of source code and checks whether the braces/parentheses are balanced. Every ( or { must be closed by a } or ) in the opposite order. Return the index at which an imbalance occurs, or -1 if the string is balanced. If any ( or { are never closed, return the string's length.\n\nExamples\ncheck_balance(\"if (a(4) > 9) { foo(a(2));",
    "tags": [
      "strings",
      "validation",
      "data_structures",
      "algorithms"
    ],
    "title": "Check for Balance"
  },
  {
    "_id": "i5KL9xzKt6WSBsds9",
    "difficulty": 2.857142857142857,
    "language": "python3",
    "summary": "Create a function that takes the name of a chess piece, its position and a target position. The function should return True if the piece can move to the target and False if it can't.\n\nThe possible inputs are \"Pawn\", \"Knight\", \"Bishop\", \"Rook\", \"Queen\" and \"King\".\n\nExamples\ncan_move(\"Rook\", \"A8\", \"H8\") ➞ True\n\ncan_move(\"Bishop\", \"A7\", \"G1\") ➞ True\n\ncan_move(\"Qu",
    "tags": [
      "games",
      "logic",
      "algorithms",
      "validation"
    ],
    "title": "Chess Pieces"
  },
  {
    "_id": "ik9CtowAndmAiStze",
    "difficulty": 2.857142857142857,
    "language": "python3",
    "summary": "The function is given a string. Sort the characters and return a new string. Sorting conditions:\nMost frequent move in front.\nFor the same frequency upper case characters move in front.\nFor the same frequency and case sort them alphabetically.\n\nExamples\nfrequency_sort(\"tree\") ➞ \"eert\"\n\nfrequency_sort(\"cccaaa\") ➞ \"aaaccc\"\n\nfrequency_sort(\"Aabb\") ➞ \"bbAa\"\n\nNotes",
    "tags": [
      "algorithms",
      "conditions",
      "sorting",
      "strings"
    ],
    "title": "Sort Characters by Frequency, Case, Alphabet"
  },
  {
    "_id": "qGw8PGpMywu9PJti5",
    "difficulty": 2.8636363636363638,
    "language": "python3",
    "summary": "You have three rods numbered from 1 to 3. A few disks of different sizes are strung on the first rod. Disks are ranged by size from the smallest one on top to the largest at the bottom.\n\nCreate a function that shows how to transfer the entire stack of n disks from first to the third rod, obeying the following rules:\n\nEach move consists of taking the upper disk",
    "tags": [
      "recursion",
      "logic"
    ],
    "title": "Tower of Hanoi: Find All Moves"
  },
  {
    "_id": "sibD9TFg7pmQuzJxW",
    "difficulty": 2.8636363636363638,
    "language": "python3",
    "summary": "In statistics a stem-and-leaf plot is a graphical representation of values distribution in a dataset,  usually implemented for a small set of values. In this exercise we'll build a simple plot for positive integer values following the steps below.\n\n1) You must separate each value in two parts: the stem, equal to all number digits but last and the leaf, equal t",
    "tags": [
      "numbers",
      "data_structures",
      "formatting"
    ],
    "title": "Stems and Leaves"
  },
  {
    "_id": "H7Z8enQWipfBMXTx7",
    "difficulty": 2.864864864864865,
    "language": "python3",
    "summary": "A Fibonacci string is a precedence of the Fibonacci series. It works with any two characters of the English alphabet (as opposed to the numbers 0 and 1 in the Fibonacci series) as the initial items and concatenates them together as it progresses similarly to that of the Fibonacci series.\n\nExamples\nfib_str(3, [\"j\", \"h\"]) ➞ \"j, h, hj\"\n\nfib_str(5, [\"e\", \"a\"]) ➞ \"",
    "tags": [
      "recursion",
      "strings"
    ],
    "title": "Recursion: Fibonacci String"
  },
  {
    "_id": "SQZoHFDfizBTP4HSx",
    "difficulty": 2.8666666666666667,
    "language": "python3",
    "summary": "Create a function that takes a string txt containing only letters from a to z in lowercase and returns the missing letter(s) in alphabetical order a-z.\nA set of letters is given by abcdefghijklmnopqrstuvwxyz.\nTwo sets of alphabets means two or more alphabets.\n\nExamples\nmissing_alphabets(\"abcdefghijklmnopqrstuvwxy\") ➞ \"z\"\n\"z\" is missing.\n\nmissing_alphabets(\"aab",
    "tags": [
      "strings",
      "logic",
      "validation"
    ],
    "title": "Find Missing Alphabets"
  },
  {
    "_id": "hfBoDAN8YMz7cxGqB",
    "difficulty": 2.8666666666666667,
    "language": "python3",
    "summary": "In the garden, we have a house. We don't know how big the house is going to get. The garden is 50' x 50'. If you want to walk around the house, you'll need 3 feet so the house cannot be bigger than the width & depth of the garden minus the path to walk around it.\n\nWe Have a House\n\nIn this example you can see the arguments your function is going to get (in red)",
    "tags": [
      "algorithms",
      "math",
      "numbers"
    ],
    "title": "We Have a House"
  },
  {
    "_id": "jWHkKc2pYmgobRL8R",
    "difficulty": 2.8666666666666667,
    "language": "python3",
    "summary": "Write a function that takes in a string and for each character, returns the distance to the nearest vowel in the string. If the character is a vowel itself, return 0.\n\nExamples\ndistancetonearest_vowel(\"aaaaa\") ➞ [0, 0, 0, 0, 0]\n\ndistancetonearest_vowel(\"babbb\") ➞ [1, 0, 1, 2, 3]\n\ndistancetonearest_vowel(\"abcdabcd\") ➞ [0, 1, 2, 1, 0, 1, 2, 3]\n\ndistancetonearest",
    "tags": [
      "strings",
      "loops"
    ],
    "title": "Distance to Nearest Vowel"
  },
  {
    "_id": "YrNbakR7Y4vLz6bFs",
    "difficulty": 2.8666666666666667,
    "language": "python3",
    "summary": "Create a function that, given a list of string lists, returns an list of all combinations as concatenated strings.\n\nThe function is called with a list of lists containing strings.\nThe task is to combine each string of each array with each string of each other list.\nIf one of the string lists is empty, the function will return an empty list.\n\nThe function will",
    "tags": [
      "strings",
      "algorithms",
      "arrays"
    ],
    "title": "Combinator"
  },
  {
    "_id": "dDpXd5NGzCZQKoeA7",
    "difficulty": 2.8703703703703702,
    "language": "python3",
    "summary": "Create a function that takes a function func and counts its arguments. Examining a function's bytecode using code is disabled.\n\nExamples\nnum_args(lambda: \"\") ➞ 0\n\nnum_args(lambda x: \"\") ➞ 1\n\nnum_args(lambda x, y: \"\") ➞ 2\n\nNotes\nAll random test function expressions will be constructed using +, -, *, and /.\nNone of the parameters of func will have default values",
    "tags": [
      "closures",
      "functional_programming",
      "higher_order_functions"
    ],
    "title": "How Many Arguments?"
  },
  {
    "_id": "gPJTSqmJ4qQPxRg5a",
    "difficulty": 2.870967741935484,
    "language": "python3",
    "summary": "By looking at the inputs and outputs below, try to figure out the pattern and write a function to execute it for any number.\n\nExamples\nfunc(3456) ➞ 2\n\nfunc(89265) ➞ 5\n\nfunc(97) ➞ 12\n\nfunc(2113) ➞ -9\n\nNotes\nN/A",
    "tags": [
      "cryptography",
      "numbers"
    ],
    "title": "Find the Pattern and Write the Function"
  },
  {
    "_id": "Jjbbjqm3JuA6WnPYH",
    "difficulty": 2.8727272727272726,
    "language": "python3",
    "summary": "Python offers some bit operations but not bit rotation. To complete that, create a function that takes three parameters:\n\nn: Integer, which in binary representaion should be rotated.\nm:  Number of rotation steps that should be performed.\nd: Boolean value; True = rotation right, False = rotation left.\n\nYour function should return an integer as a result of its r",
    "tags": [
      "bit_operations",
      "strings"
    ],
    "title": "Bit Rotation"
  },
  {
    "_id": "md4AF8HwJrhrhA5zm",
    "difficulty": 2.8727272727272726,
    "language": "python3",
    "summary": "In colour theory, colour harmony refers to an aesthetically pleasing combination of colours. The standard colour wheel shows the 12 primary, secondary and tertiary colours.  Starting with red, and moving clockwise, the colours are:\n\ncolours = [\"red\", \"red-orange\", \"orange\", \"yellow-orange\", \"yellow\", \"yellow-green\",  \"green\", \"blue-green\", \"blue\", \"blue-violet",
    "tags": [
      "arrays",
      "language_fundamentals"
    ],
    "title": "Colour Harmony"
  },
  {
    "_id": "7BYXC8befjYqzhMsc",
    "difficulty": 2.8773006134969323,
    "language": "python3",
    "summary": "Kathleen owns a beautiful rug store. She likes to group the rugs into 4 mutually exclusive categories.\n\nimperfect\nhorizontally symmetric\nvertically symmetric\nperfect\n\nAn imperfect rug is one that is neither horizontally nor vertically symmetric. Here is an example of an imperfect rug:\n\n[\n  [\"a\", \"a\", \"a\", \"a\"],\n  [\"a\", \"a\", \"a\", \"a\"],\n  [\"a\", \"a\", \"b\", \"b\"]\n]",
    "tags": [
      "arrays",
      "loops"
    ],
    "title": "Symmetrical Patterns"
  },
  {
    "_id": "79tuQhjqs8fT7zKCY",
    "difficulty": 2.878787878787879,
    "language": "python3",
    "summary": "Postfix notation is a mathematical notation in which operators follow their operands. In other words, pfexp1 pfexp2 op, where pfexp1 and pfexp2 are both postfix expressions.\n\nSome examples:\n2 2 + is the postfix notation of the expression 2 + 2.\n2 3 * 1 - 5 / is the postfix notation of the expression ((2 * 3) - 1) / 5.\n\nHere you have to compute the result from",
    "tags": [
      "data_structures",
      "language_fundamentals",
      "math"
    ],
    "title": "Postfix Notation"
  },
  {
    "_id": "k3jQJWTzHMwTx8tmi",
    "difficulty": 2.88,
    "language": "python3",
    "summary": "The bookstore from [this collection] (https://edabit.com/collection/dnXtkLPZpX25t227q) has increased their security again. After setting the variable res, an if statement checks if res is equal to the users dictionary. If it is, it sends an error. Create a query that copies users to res.\n\nExamples\nparam = \"your text here\"\n\nusers = {\n  \"user1\": \"password\",\n  \"u",
    "tags": [
      "logic",
      "games",
      "data_structures"
    ],
    "title": "Injection III: Cheating the System"
  },
  {
    "_id": "9yk63KrKDHzNFWKBJ",
    "difficulty": 2.880952380952381,
    "language": "python3",
    "summary": "A folder system on a computer might look something like the picture below.\n\nIn this challenge, folder systems will be represented by dictionaries where the keys are folders X and the value at X is the list of subfolders of X. For example, the picture above becomes the dictionary.\n\n{\n  \"A\": [\"B\", \"C\", \"D\"],\n  \"B\": [\"E\", \"F\"],\n  \"D\": [\"G\", \"H\"],\n  \"G\": [\"I\", \"J\"",
    "tags": [
      "data_structures",
      "algorithms",
      "validation"
    ],
    "title": "Folder Challenge (Part #1)"
  },
  {
    "_id": "kfwTnnJjo3SKG2pYx",
    "difficulty": 2.883720930232558,
    "language": "python3",
    "summary": "Replace the numbers in a string with their binary form.\n\nExamples\nreplace_nums(\"I have 2 sheep.\") ➞ \"I have 10 sheep.\"\n\nreplace_nums(\"My father was born in 1974.10.25.\") ➞ \"My father was born in 11110110110.1010.11001.\"\n\nreplace_nums(\"10hell76o4 boi\") ➞ \"1010hell1001100o100 boi\"\n\nNotes\nThere are possibly two or more numbers in a single word (I do not recommend",
    "tags": [
      "strings",
      "algorithms",
      "loops",
      "regex"
    ],
    "title": "Translate from Human to Programmer"
  },
  {
    "_id": "7gHfNSoKXLA8CNBNK",
    "difficulty": 2.8846153846153846,
    "language": "python3",
    "summary": "Create a function that takes a number maxden and returns the total number of fully simplified proper fractions that exist with denominator less than or equal to maxden.\n\nYou only need to return the number of fractions; NOT the fractions themselves. In the examples below, I list the fractions simply for your reference.\n\nExamples\nsimpropfrac(10) ➞ 31\n1/2, 1/3, 2",
    "tags": [
      "math",
      "algorithms",
      "loops",
      "numbers"
    ],
    "title": "Simplified Proper Fractions"
  },
  {
    "_id": "87YxyfFJ4cw4DsrvB",
    "difficulty": 2.8870967741935485,
    "language": "python3",
    "summary": "Create a function that takes in parameter n and generates an n x n (where n is odd) concentric rug.\n\nThe center of a concentric rug is 0, and the rug \"fans-out\", as show in the examples below.\n\nExamples\ngenerate_rug(1) ➞ [\n  [0]\n]\n\ngenerate_rug(3) ➞ [\n  [1, 1, 1],\n  [1, 0, 1],\n  [1, 1, 1]\n]\n\ngenerate_rug(5) ➞ [\n  [2, 2, 2, 2, 2],\n  [2, 1, 1, 1, 2],\n  [2, 1, 0,",
    "tags": [
      "arrays",
      "loops",
      "functional_programming"
    ],
    "title": "Concentric Rugs"
  },
  {
    "_id": "HaMCeHeJkaWvMg7LS",
    "difficulty": 2.891891891891892,
    "language": "python3",
    "summary": "A long stretch of beach is represented by a string of two characters 0 - free, 1 - occupied. Due to recent restrictions, a new person cannot take place next to another. There has to be one free place between two people lounging on the beach. Create a function to compute how many new people at most can settle in on the given beach.\n\nExamples\nsun_loungers(\"10001",
    "tags": [
      "conditions",
      "loops",
      "strings"
    ],
    "title": "Sun Loungers"
  },
  {
    "_id": "xRM8yTQRL3W6Wtdfi",
    "difficulty": 2.891891891891892,
    "language": "python3",
    "summary": "Create a function that returns the number of (real) solutions of ax^4+bx^2+c=0.\nThe function will take three arguments: a as the coefficient of x^4, b as the coefficient of x^2, and c as the constant term.\n\nExamples\nquartic_equation(1, -5, 4) ➞ 4\n\nquartic_equation(4, 3, -1) ➞ 2\n\nquartic_equation(1, 10, 9) ➞ 0\n\nNotes\nHint: Try substitution t=x^2.",
    "tags": [
      "algebra",
      "math"
    ],
    "title": "Quartic Equation"
  },
  {
    "_id": "xXenZR2hWFE7Jb9vR",
    "difficulty": 2.8947368421052633,
    "language": "python3",
    "summary": "Given two strings s and t, create a function to determine if they are isomorphic. Two strings are isomorphic if the characters in s can be replaced to get t. All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.\n\nExample",
    "tags": [
      "conditions",
      "strings",
      "validation"
    ],
    "title": "Isomorphic Strings"
  },
  {
    "_id": "zeuvB4YRvu47w8e8f",
    "difficulty": 2.8958333333333335,
    "language": "python3",
    "summary": "Say you want to traverse a list of integers starting at the first item and using each value as a pointer of what item to visit next. For example, you would traverse the list [1, 4, 3, 0, 2] in the following manner:\n\nList\n\nBecause you visit every item once and go back to the starting point, the list [1, 4, 3, 0, 2] is a \"full cycle\".\n\nCreate a function that ret",
    "tags": [
      "algorithms",
      "validation"
    ],
    "title": "Is This a Full Cycle?"
  },
  {
    "_id": "8tDW5gt4SAX2LKALJ",
    "difficulty": 2.896551724137931,
    "language": "python3",
    "summary": "This is a sequel to Chain Reaction (Part #1),\nwith the same setup, but a different flavor.\n\nAs in the previous part, you will be given a rectangular array representing a \"map\" with three types of spaces:\n\"+\" bombs: when activated, their explosion activates any bombs directly above, below, left, or right of the \"+\" bomb.\n\"x\" bombs: when activated, their explosi",
    "tags": [
      "arrays",
      "games"
    ],
    "title": "Chain Reaction (Part #2)"
  },
  {
    "_id": "wEDHiAcALvS2KuRBJ",
    "difficulty": 2.8976377952755907,
    "language": "python3",
    "summary": "A stack machine processes instructions by pushing and popping values to an internal stack.\nA simple example of this is a calculator.\n\nThe argument passed to run(instructions) will always be a string containing a series of instructions.\nThe instruction set of the calculator will be this:\n+: Pop the last 2 values from the stack, add them, and push the result ont",
    "tags": [
      "algorithms",
      "math",
      "numbers",
      "classes",
      "data_structures"
    ],
    "title": "Stack Calculator"
  },
  {
    "_id": "Nr33pizZC2XdHXAm6",
    "difficulty": 2.8979591836734695,
    "language": "python3",
    "summary": "Create a function that, given 2 dates, returns the names of the months that are present between them (inclusive).\n\nExamples\n  Input\n     january = datetime.date(2017, 1, 1)\n   march = datetime.date(2017, 3, 1)\n\n  monthsInterval(january, march)\n\n  Output\n    ['January', 'February', 'March']\n\n  Input\n     december = datetime.date(2017, 12, 1)\n   january = dateti",
    "tags": [
      "arrays",
      "dates",
      "sorting"
    ],
    "title": "Get the Months Between Two Dates"
  },
  {
    "_id": "FmowTJecDKQMRqsHS",
    "difficulty": 2.9,
    "language": "python3",
    "summary": "You're given a 2D list / matrix of a crop field. Each crop needs a water source. Each water source hydrates the 8 tiles aound it. With \"w\" representing a water source, and \"c\" representing a crop, is every crop hydrated?\n\nExamples\ncrop_hydrated([\n  [ \"w\", \"c\" ],\n  [ \"w\", \"c\" ],\n  [ \"c\", \"c\" ]\n]) ➞ True\n\ncrop_hydrated([\n  [ \"c\", \"c\", \"c\" ]\n]) ➞ False\nThere isn\"",
    "tags": [
      "arrays",
      "conditions",
      "loops",
      "strings",
      "validation"
    ],
    "title": "Crop Fields"
  },
  {
    "_id": "ivSPJNgW4ChfbrKbR",
    "difficulty": 2.9027777777777777,
    "language": "python3",
    "summary": "The Japanese soroban is type of abacus (counting tool) that is used by sliding threaded beads up and down wires. The soroban is divided into an upper deck (where each bead is worth 5 units) and a lower deck (where beads are worth 1 unit). Working from the right and moving to the left, units increase by a factor of 10. If we use \"O\" for a bead and \"|\" to show t",
    "tags": [
      "strings",
      "arrays",
      "loops"
    ],
    "title": "Read the Abacus (Part 2: Japanese Soroban)"
  },
  {
    "_id": "YPdFTfDehZpQ3iu6g",
    "difficulty": 2.904255319148936,
    "language": "python3",
    "summary": "Create a function that will take either a string containing a roman numeral, or an integer.\n\nGiven a string, return the integer value of that roman numeral.\nGiven an integer, return the equivalent roman numeral.\n\nSymbols to Values\nI ➞ 1\n\nV ➞ 5\n\nX ➞ 10\n\nL ➞ 50\n\nC ➞ 100\n\nD ➞ 500\n\nM ➞ 1000\n\nExamples\nroman_numerals(\"V\") ➞ 5\n\nroman_numerals(\"IV\") ➞ 4\n\nroman_numeral",
    "tags": [
      "algorithms",
      "strings",
      "numbers"
    ],
    "title": "Roman Numeral Conversion"
  },
  {
    "_id": "Kk5Ku4CtipaFtATPT",
    "difficulty": 2.9047619047619047,
    "language": "python3",
    "summary": "\"coconuts\" has 8 letters.\nA byte in binary has 8 bits.\nA byte can represent a character.\n\nWe can use the word \"coconuts\" to communicate with each other in binary if we use upper case letters as 1s and lower case letters as 0s.\n\nCreate a function that translates a word in plain text, into Coconut.\n\nWorked Example\nThe binary for \"coconuts\" is\n01100011 01101111 0",
    "tags": [
      "loops",
      "strings"
    ],
    "title": "Coconut Communication"
  },
  {
    "_id": "Z2mhqFLe9g9ouZY64",
    "difficulty": 2.9056603773584904,
    "language": "python3",
    "summary": "Given two non-empty lists, write a function that determines whether the second list is a subsequence of the first list.\n\nFor instance, the numbers [1, 3, 4] form a subsequence of the list [1, 2, 3, 4], and so do the numbers [2, 4].\n\nExamples\nisvalidsubsequence([1, 1, 6, 1],[1, 1, 1, 6]) ➞ False\n\nisvalidsubsequence([5, 1, 22, 25, 6, -1, 8, 10], [22, 25, 6]) ➞ T",
    "tags": [
      "loops",
      "algorithms",
      "validation"
    ],
    "title": "Validate Subsequences"
  },
  {
    "_id": "XKSwuu4ddzBvkXjvf",
    "difficulty": 2.90625,
    "language": "python3",
    "summary": "A word value can be established summing up all the numeric values of every single character (excluding spaces and punctuation): a value from 1 (\"a\") to 26 (\"z\") is given to letters, while numbers have their literal values, from 0 to 9. The sentence value is the sum of the values of the words.\n\nsentence = \"ABC ! abc ... @ 123\"\nRemove spaces, punctuation and any",
    "tags": [
      "strings",
      "numbers",
      "validation",
      "scope"
    ],
    "title": "Sentence Primeness"
  },
  {
    "_id": "C7zzxvMcT5LKxLxXc",
    "difficulty": 2.9072847682119205,
    "language": "python3",
    "summary": "This is a reverse-coding challenge. Create a function that outputs the correct list from the input. Use the following examples to crack the code.\n\nExamples\ndecode(\"hello\") ➞ [5, 2, 9, 9, 3]\n\ndecode(\"wonderful\") ➞ [11, 3, 2, 1, 2, 6, 3, 9, 9]\n\ndecode(\"something challenging\") ➞ [7, 3, 10, 2, 8, 5, 6, 2, 4, 5, 18, 5, 16, 9, 9, 2, 2, 4, 6, 2, 4]\n\nNotes\nN/A",
    "tags": [
      "algorithms",
      "arrays",
      "logic"
    ],
    "title": "Crack the Code"
  },
  {
    "_id": "ygeGjszQEdEXE8R8d",
    "difficulty": 2.909090909090909,
    "language": "python3",
    "summary": "Create a function which takes a parameter mat, where mat is a matrix (list of lists) such that all but one entry equals 0 (and the non-zero entry equals 1). The function, after being passed a matrix, should be repeatedly callable with the following str commands:\n\n\"up\" ➞ Move the 1 to the cell above it.\n\"down\" ➞ Move the 1 to the cell below it.\n\"left\" ➞ Move th",
    "tags": [
      "arrays",
      "closures",
      "functional_programming"
    ],
    "title": "Matrix Movement"
  },
  {
    "_id": "YcqAY72nZNPtvofuJ",
    "difficulty": 2.9107142857142856,
    "language": "python3",
    "summary": "Write a function that receives a list of x integers and returns a list of x integers in the Nth term of a quadratic number sequence (where x is the length of the incoming list).\n\nExamples\nquad_sequence([48, 65, 84]) ➞ [105, 128, 153]\n\nquad_sequence([0, 1, 6, 15, 28]) ➞ [45, 66, 91, 120, 153]\n\nquad_sequence([9, 20, 33, 48]) ➞ [65, 84, 105, 128]\n\nNotes\nBoth posi",
    "tags": [
      "algebra",
      "math",
      "numbers"
    ],
    "title": "Quad Sequence"
  },
  {
    "_id": "W7S25BPmjEMSzpnaB",
    "difficulty": 2.915492957746479,
    "language": "python3",
    "summary": "N-bonacci numbers are generalisations of the fibonacci sequence, where the next term is always the sum of the previous N terms. By convention, the first (N-1) terms are all 0 and the Nth term is 1.\n\nThe initial 10 terms of the first 5 N-bonacci sequences are therefore:\n\n1-bonacci = 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...\n2-bonacci = 0, 1, 1, 2, 3, 5, 8, 13, 21, 34,",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "N-bonacci Numbers"
  },
  {
    "_id": "QHuaoQuAJfWn2W9oX",
    "difficulty": 2.9166666666666665,
    "language": "python3",
    "summary": "Create a function that takes a character from a to h as the column number and an integer from 1 to 8 as the row number which together represent the location of a queen on a normal-sized chess board. Return this two dimensional 8x8 list.\n\nThis list must consist of zeroes and ones. The ones are placed in positions where the queen can move in one move and zeroes ",
    "tags": [
      "arrays",
      "loops",
      "games"
    ],
    "title": "Queen Threat"
  },
  {
    "_id": "KveKxSD9t8fX7ybSt",
    "difficulty": 2.917525773195876,
    "language": "python3",
    "summary": "A countdown sequence is a descending sequence of k integers from k down to 1 (e.g. 5, 4, 3, 2, 1). Write a function that returns a list [x, y] where x is the number that represents how many of countdown sequences are in a given list and y is a list of those sequences in order which they appear in the list.\n\nExamples\nfinal_countdown([4, 8, 3, 2, 1, 2]) ➞ [1, [[",
    "tags": [
      "arrays",
      "algorithms",
      "loops"
    ],
    "title": "Count the Countdown Sequences"
  },
  {
    "_id": "82AvsFFQprj43XCDS",
    "difficulty": 2.9176470588235293,
    "language": "python3",
    "summary": "For this challenge, the input will be a (long) string.\n\nA word encountered for the first time is a stranger. A word encountered thrice becomes an acquaintance. A word encountered 5 times becomes a friend.\n\nCreate a function that takes the string and returns a list of two lists. The first is a list of acquaintances in the order they became an acquaintance (see",
    "tags": [
      "regex",
      "strings",
      "conditions",
      "language_fundamentals"
    ],
    "title": "Stranger Danger"
  },
  {
    "_id": "c9i3mdjuwwzMF3Por",
    "difficulty": 2.918032786885246,
    "language": "python3",
    "summary": "A prime number is a number whose only proper (non-self) divisor is 1 (example 13).\n\nAn emirp (prime spelled backwards) is a non-palindromic prime which, when its digits are reversed, makes another prime. E.g. 13 is a prime, and so is 31. Both are therefore emirps.\n\nA bemirp is a prime which is an emirp (makes another prime with its digits reversed), but additi",
    "tags": [
      "conditions",
      "math",
      "numbers"
    ],
    "title": "I Put My Prime Down, Flip It and Reverse It"
  },
  {
    "_id": "deX6bsFyLWsccPakq",
    "difficulty": 2.918918918918919,
    "language": "python3",
    "summary": "Write a regular expression to find all the times in a string. Times will be in 24-hours format with hours and minutes and optionally seconds: hh:mm(:ss). Match only valid times.\n\nExample\ntxt1 = \"Breakfast at 09:00 in the room 123:456.\"\ntxt2 = \"The incident took place last Wednesday at 00:56:41.\"\ntxt3 = \"We will have two meetings: from 10:30 to 11:00 and from 1",
    "tags": [
      "regex"
    ],
    "title": "RegEx Exercise #1: Find the Times"
  },
  {
    "_id": "6TJmj5gYEWBxPiuLD",
    "difficulty": 2.9215686274509802,
    "language": "python3",
    "summary": "Create a function that reads a list of integers stored which will be in the following format: [[K, r1, r2, r3, ...]], where K represents the number of desks in a classroom, and the rest of the integers in the list will be in sorted order and will represent the desks that are already occupied. All of the desks will be arranged in two columns, where desk #1 is a",
    "tags": [
      "algorithms",
      "data_structures",
      "arrays",
      "loops"
    ],
    "title": "Seating Students"
  },
  {
    "_id": "XPCqS7GYYouXg5ut9",
    "difficulty": 2.923076923076923,
    "language": "python3",
    "summary": "Create a function that takes in a positive integer n and returns the simplified square root of n as a tuple of positive integers (a, b), where a⋅sqrt(b) = sqrt(n) and b is as small as possible.\n\nExamples\nsimplify_sqrt(72) ➞ (6, 2)\n\nsimplify_sqrt(160) ➞ (4, 10)\n\nsimplify_sqrt(36) ➞ (6, 1)\n\nsimplify_sqrt(35) ➞ (1, 35)\n\nA common way to simplify square roots is to",
    "tags": [
      "algebra",
      "math",
      "numbers"
    ],
    "title": "Simplified Square Root"
  },
  {
    "_id": "jecvfH5eyGLrSwzNh",
    "difficulty": 2.9239130434782608,
    "language": "python3",
    "summary": "Create a function that takes a string containing both the name and number of animals and plants that may or may not be found in Chitwan National Park. The function should return an list of tuples where the first element in the tuple is the animal name and the second element in the tuple is a number of that particular animal that is found in Chitwan National Pa",
    "tags": [
      "logic",
      "language_fundamentals",
      "regex"
    ],
    "title": "Fauna in Chitwan National Park"
  },
  {
    "_id": "gnaxzuGNPnxKkJo39",
    "difficulty": 2.926829268292683,
    "language": "python3",
    "summary": "The Christian holiday of Easter Sunday is a movable feast. It can occur on any date from March 22 to April 25. The date depends on the timing between the Paschal Full Moon and the spring equinox. It wasn't until the late 19th century that a formula was developed to accurately predict Easter's date for a given year.\n\nYour task is to use this formula, also known",
    "tags": [
      "algorithms",
      "math"
    ],
    "title": "Dates of Easter"
  },
  {
    "_id": "jgpfraMtc9nrrPZkL",
    "difficulty": 2.9282296650717705,
    "language": "python3",
    "summary": "Given a 2D array of some suspended blocks (represented as hastags), return another 2D array which shows the end result once gravity is switched on.\n\nExamples\nswitchgravityon([\n  [\"-\", \"#\", \"#\", \"-\"],\n  [\"-\", \"-\", \"-\", \"-\"],\n  [\"-\", \"-\", \"-\", \"-\"],\n  [\"-\", \"-\", \"-\", \"-\"]\n]) ➞ [\n  [\"-\", \"-\", \"-\", \"-\"],\n  [\"-\", \"-\", \"-\", \"-\"],\n  [\"-\", \"-\", \"-\", \"-\"],\n  [\"-\", \"#\",",
    "tags": [
      "physics",
      "arrays",
      "logic",
      "loops"
    ],
    "title": "Switch on the Gravity"
  },
  {
    "_id": "amYH2SMto4yZw9E6n",
    "difficulty": 2.9285714285714284,
    "language": "python3",
    "summary": "Write a function that returns True if the phone number is in a valid format. Valid formats are as follows:\n\nWith Country Code | Without Country Code\n--- | ---\n+1-892-445-7663 | 892-445-7663\n1-892-445-7663 | (892) 445-7663\n1 (892) 445-7663 | 892.567.8901\n1.892.567.8901 | 1/892/567/8901\n1 892 567 8901 | 892/567/8901\n18925678901 | 892 567 8901\n\nExamples\nvalidate(",
    "tags": [
      "regex",
      "strings",
      "validation"
    ],
    "title": "Validate Phone Numbers"
  },
  {
    "_id": "LyzKTyYdKF4oDf5bG",
    "difficulty": 2.9295774647887325,
    "language": "python3",
    "summary": "Write a recursive function that will return the longest word in a sentence. In cases where more than one word is found, return the first one.\n\nExamples\nfind_longest(\"I will and ever will be gratefully and perpetually loving you Tesh!\") ➞ \"perpetually\"\n\nfind_longest(\"A thing of beauty is a joy forever.\") ➞ \"forever\"\n\nfind_longest(\"Forgetfulness is by all means",
    "tags": [
      "recursion",
      "strings",
      "arrays"
    ],
    "title": "Recursion: Find The Longest Word"
  },
  {
    "_id": "YcKh5TokDmm8MZ9Dk",
    "difficulty": 2.9295774647887325,
    "language": "python3",
    "summary": "Create a function that takes two strings. The first string contains a sentence containing the letters of the second string in a consecutive sequence but in a different order. The hidden anagram must contain all the letters, including duplicates, from the second string in any order and must not contain any other alphabetic characters.\n\nWrite a function to find",
    "tags": [
      "arrays",
      "formatting",
      "loops",
      "sorting"
    ],
    "title": "Hidden Anagram"
  },
  {
    "_id": "mrrKngM2fqDEDMXtS",
    "difficulty": 2.9305555555555554,
    "language": "python3",
    "summary": "A broken bridge can be represented by 1s and 0s, where contiguous 0s represent holes. You can walk across a bridge with a hole with a maximum width of 1, but any holes bigger than that you must fix first. For example, the bridge below is walkeable:\n\n[1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1]\n\nThis bridge is not:\n\n[1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1",
    "tags": [
      "arrays",
      "validation",
      "higher_order_functions"
    ],
    "title": "Broken Bridge"
  },
  {
    "_id": "C4nht9fQk7tN8mkPa",
    "difficulty": 2.934640522875817,
    "language": "python3",
    "summary": "Write a function that returns True if the knights are placed on a chessboard such that no knight can capture another knight. Here, 0s represent empty squares and 1s represent knights.\n\nExamples\ncannot_capture([\n  [0, 0, 0, 1, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 1, 0, 0, 0, 1, 0, 0],\n  [0, 0, 0, 0, 1, 0, 1, 0],\n  [0, 1, 0, 0, 0, 1, 0, 0],\n  [0, 0, 0,",
    "tags": [
      "validation",
      "arrays",
      "games"
    ],
    "title": "Knights on a Board"
  },
  {
    "_id": "zXsRYvw6RvTFcDNfu",
    "difficulty": 2.9361702127659575,
    "language": "python3",
    "summary": "Two consecutive integers a and b are considered a Ruth-Aaron pair if the sum of the prime factors of a is equal to the sum of the prime factors of b.\n\nTwo definitions exist:\n\nSumming up distinct prime factors. For example, 24 and 25 constitute a Ruth-Aaron pair by this definition. 8 and 9 do not.\n\nP24 = [2, 3]  # sum = 5\n\nP25 = [5]  # sum = 5, equal to 24\n\nP8",
    "tags": [
      "math",
      "numbers",
      "validation"
    ],
    "title": "Ruth and Aaron"
  },
  {
    "_id": "2rQcGmSYvXRtxSuHn",
    "difficulty": 2.9375,
    "language": "python3",
    "summary": "Create a function which takes 2 parameters:\nA matrix mat with m rows and n columns, containing data of any type.\nAn optional integer parameter turns giving the number of clockwise 90 degree rotations by which to transform the matrix (defaults to 1).\n\nThe function should return a new matrix with the elements rotated clockwise or counter-clockwise by the number",
    "tags": [
      "algorithms",
      "arrays",
      "data_structures"
    ],
    "title": "Right Rotation"
  },
  {
    "_id": "mmiLWJzP3mvhjME7b",
    "difficulty": 2.9375,
    "language": "python3",
    "summary": "Create a function which checks if a binary number is divisible by three by implementing the following [finite-state automaton] (https://en.wikipedia.org/wiki/Finite-state_machine):\n\nThe function should implement the following commands:\n\n0, 1 ➞ The next digit in the number.\n\"state\" ➞ The automaton's current state: \"S0\", \"S1\", or \"S2\".\n\"stop\" ➞ Whether the autom",
    "tags": [
      "closures",
      "functional_programming",
      "higher_order_functions"
    ],
    "title": "FSA: Divisible by Three"
  },
  {
    "_id": "XuKxpgCfnu7XQDbky",
    "difficulty": 2.9423076923076925,
    "language": "python3",
    "summary": "Write a function that takes in two floating-point numbers s and p and returns a tuple of two floating-point numbers (x, y), where x + y = s and x * y = p. Round x and y to three decimal places.\n\nIf there are multiple solutions, return the solution with the lesser x (or lesser y, if the x values are equal).\n\nImaginary/complex number solutions are not allowed. I",
    "tags": [
      "algebra",
      "math",
      "numbers"
    ],
    "title": "Sum and Product"
  },
  {
    "_id": "KgMGKAmRxamRszMxy",
    "difficulty": 2.9473684210526314,
    "language": "python3",
    "summary": "In Spartans Cipher, encoding is done by writing the text horizontally, across the strap in the plaintext word of a message. In ancient times, Spartans and Greeks invented an interesting way of encryption called Scytale.\n\nThe ancient Greeks, and the Spartans in particular, are said to have used this cipher to communicate during military campaigns.\n\nCreate a fun",
    "tags": [
      "algorithms",
      "cryptography",
      "strings",
      "logic"
    ],
    "title": "Spartans Cipher"
  },
  {
    "_id": "uPAmqwiHmvwpwoBom",
    "difficulty": 2.9475806451612905,
    "language": "python3",
    "summary": "Create a function that takes an Arabic number and converts it into a Roman number.\n\nExamples\nconverttoroman(2) ➞ \"II\"\n\nconverttoroman(12) ➞ \"XII\"\n\nconverttoroman(16) ➞ \"XVI\"\n\nNotes\nAll roman numerals should be returned as uppercase.\nThe largest number that can be represented in this notation is 3,999.",
    "tags": [
      "arrays",
      "data_structures",
      "numbers"
    ],
    "title": "Roman Numeral Converter"
  },
  {
    "_id": "BcjsjPPmPEMQwB86Y",
    "difficulty": 2.9504950495049505,
    "language": "python3",
    "summary": "Write two functions:\n\nOne to retrieve all unique substrings that start and end with a vowel.\nOne to retrieve all unique substrings that start and end with a consonant.\n\nThe resulting array should be sorted in lexicographic ascending order (same order as a dictionary).\n\nExamples\ngetvowelsubstrings(\"apple\")\n➞ [\"a\", \"apple\", \"e\"]\n\ngetvowelsubstrings(\"hmm\") ➞ []",
    "tags": [
      "strings",
      "loops"
    ],
    "title": "Substring Consonant-Vowel Groups"
  },
  {
    "_id": "YwXwxa6xmoonFRKQJ",
    "difficulty": 2.951219512195122,
    "language": "python3",
    "summary": "The Josephus Problem is a mathematical problem in which a circle is made, its circumference formed of n people.\n\nStarting from the person in the 0th position, each person eliminates the person to their left (the next person in the circle). The next living person then does the same, and the process is repeated until there is only one person left alive..\n\nFind t",
    "tags": [
      "arrays",
      "conditions",
      "loops",
      "numbers"
    ],
    "title": "The Josephus Problem"
  },
  {
    "_id": "N5JhvabK6DTD5t6gS",
    "difficulty": 2.9516129032258065,
    "language": "python3",
    "summary": "In Edabit, you can surround text with asterisks, double asterisks, underscores and tildes to add formatting to certain words.\n\nComplete the function markdown() so it takes a symbol as input, and returns a function which applies that formatting to a given word in a given sentence.\n\nExamples\nitalicise = markdown(\"*\")\n\nitalicise(\"Hello there!\", \"Hello\") ➞ \"Hello",
    "tags": [
      "closures",
      "loops",
      "strings"
    ],
    "title": "Automatic Markdown"
  },
  {
    "_id": "ntpgCFga2rRzB53QZ",
    "difficulty": 2.9529411764705884,
    "language": "python3",
    "summary": "Create a function that will build a staircase using the underscore _ and hash # symbols. A positive value denotes the staircase's upward direction and downwards for a negative value.\n\nExamples\nstaircase(3) ➞ \"_#\\n##\\n###\"\n__\n_\n\nstaircase(7) ➞ \"_#\\n##\\n###\\n####\\n#####\\n######\\n#######\"\n__\n_\n__\n_\n__\n_\n\nstaircase(2) ➞ \"_#\\n##\"\n_\n\nstaircase(-8) ➞ \"########\\n#####",
    "tags": [
      "recursion",
      "strings"
    ],
    "title": "Recursion: Underscore-Hash Staircase"
  },
  {
    "_id": "YjwJ6BfujKtmuTMqW",
    "difficulty": 2.9615384615384617,
    "language": "python3",
    "summary": "Four friends are playing a simple dice game (players are denoted p1, p2, p3 and p4). In each round, all players roll a pair of six-sided dice. The player with the lowest total score is removed. If the lowest score is shared by two or more players, the player in that group with the lowest score from their first dice is removed. If the lowest score is still shar",
    "tags": [
      "arrays",
      "games"
    ],
    "title": "The Dice Game"
  },
  {
    "_id": "28wYr5mXCa5hMimHZ",
    "difficulty": 2.961904761904762,
    "language": "python3",
    "summary": "For this exercise, keep in mind the following two terms (mutually exclusive):\n\ninitials = 1 character\nwords = 2+ characters (no dots allowed)\n\nA valid name is a name written in one of the following ways:\n\nH. Wells\nH. G. Wells\nHerbert G. Wells\nHerbert George Wells\n\nThe following names are invalid:\n\nHerbert  or Wells (single names not allowed)\nH Wells or H. G We",
    "tags": [
      "regex",
      "conditions",
      "functional_programming"
    ],
    "title": "Valid Name"
  },
  {
    "_id": "EtmvnHZvJL9SzfhjJ",
    "difficulty": 2.9635036496350367,
    "language": "python3",
    "summary": "Create a function that takes a URL (string), removes duplicate query parameters and parameters specified within the 2nd argument (which will be an optional list).\n\nExamples\nstripurlparams(\"https://edabit.com?a=1&b=2&a=2\") ➞ \"https://edabit.com?a=2&b=2\"\n\nstripurlparams(\"https://edabit.com?a=1&b=2&a=2\", [\"b\"]) ➞ \"https://edabit.com?a=2\"\n\nstripurlparams(\"https://",
    "tags": [
      "regex",
      "strings",
      "algorithms"
    ],
    "title": "Strip URL Query Parameters"
  },
  {
    "_id": "FSRLWWcvPRRdnuDpv",
    "difficulty": 2.9644444444444447,
    "language": "python3",
    "summary": "Jake is a very habitual person. He eats breakfast at 7:00 a.m. each morning, lunch at 12:00 p.m. and dinner at 7:00 p.m. in the evening.\n\nCreate a function that takes in the current time as a string and determines the duration of time before Jake's next meal. Represent this as a list with the first and second elements representing hours and minutes, respective",
    "tags": [
      "strings",
      "arrays",
      "dates"
    ],
    "title": "Jake's Meal Time"
  },
  {
    "_id": "kjph2fGDWmLKY2n2J",
    "difficulty": 2.9657534246575343,
    "language": "python3",
    "summary": "Given an RGB(A) CSS color, determine whether its format is valid or not. Create a function that takes a string (e.g. \"rgb(0, 0, 0)\") and return True if it's format is correct, otherwise return False.\n\nExamples\nvalid_color(\"rgb(0,0,0)\") ➞ True\n\nvalid_color(\"rgb(0,,0)\") ➞ False\n\nvalid_color(\"rgb(255,256,255)\") ➞ False\n\nvalid_color(\"rgba(0,0,0,0.123456789)\") ➞ Tr",
    "tags": [
      "regex",
      "conditions",
      "validation"
    ],
    "title": "Is It a Valid RGB(A) Color?"
  },
  {
    "_id": "oyS6TX4NXzpbfjL4a",
    "difficulty": 2.9702970297029703,
    "language": "python3",
    "summary": "This challenge is based on the game Scrabble. Each word you play is scored based on the point value of each tile/letter (see first table), as well as additional points conferred by any special squares your tiles land on (see second table).\n\nCreate a function that takes a list representing a row of squares in a Scrabble board, and a string representing the word",
    "tags": [
      "algorithms",
      "games",
      "conditions"
    ],
    "title": "Scrabble Scores (Part 2)"
  },
  {
    "_id": "68omQmgQEwv8558ZK",
    "difficulty": 2.9722222222222223,
    "language": "python3",
    "summary": "You were bored, so you decided to try out a new game you recently downloaded. There are five types of characters, each with their own level of attack power, defense, and speed. There are also five types of armor,  weapons, and boots. Each type of item has a different cost of gold and a different level of attack power, defense or speed.\n\nCreate a function that",
    "tags": [
      "games",
      "numbers"
    ],
    "title": "Battle Game"
  },
  {
    "_id": "L24crt5ZA3rdjcmxv",
    "difficulty": 2.9741379310344827,
    "language": "python3",
    "summary": "Each person in Italy has an unique identifying ID code issued by the national tax office after the birth registration: the Fiscal Code (Codice Fiscale). Check the Resources tab for more info on this.\n\nGiven a dictionary containing the personal data of a person (name, surname, gender and date of birth) return the 11 code characters as a string following these s",
    "tags": [
      "strings",
      "algorithms",
      "formatting",
      "objects"
    ],
    "title": "The Fiscal Code"
  },
  {
    "_id": "K9MuSPs9W4zCJq6EM",
    "difficulty": 2.9906832298136647,
    "language": "python3",
    "summary": "Given an element in a list, write a function to determine the length of a particular element's sorting cycle. Given one element in the list, a sorting cycle is the number of swaps it takes so that the last displaced swapped item is back in its correct order.\n\nWhat is the length of 9's sorting cycle?\n\n[1, 9, 8, 4, 7, 2, 6, 3, 5]\n[1, 5, 8, 4, 7, 2, 6, 3, 9]  # 9",
    "tags": [
      "sorting",
      "language_fundamentals"
    ],
    "title": "Length of Sorting Cycle"
  },
  {
    "_id": "mZqMnS3FsL2MPyFMg",
    "difficulty": 2.9919137466307277,
    "language": "python3",
    "summary": "Write a function that accepts a positive integer between 0 and 999 inclusive and returns a string representation of that integer written in English.\n\nExamples\nnumtoeng(0) ➞ \"zero\"\n\nnumtoeng(18) ➞ \"eighteen\"\n\nnumtoeng(126) ➞ \"one hundred twenty six\"\n\nnumtoeng(909) ➞ \"nine hundred nine\"\n\nNotes\nThere are no hyphens used (e.g. \"thirty five\" not \"thirty-five\").\nThe",
    "tags": [
      "algorithms",
      "data_structures",
      "strings"
    ],
    "title": "Numbers to English"
  },
  {
    "_id": "TsRjbMRoNCM3GHuDk",
    "difficulty": 3,
    "language": "python3",
    "summary": "The syllabic structure of Persian language is CV(C)(C). C stands for consonants and V stands for Vowels. The CV(C)(C) means that there are three types of syllables in Persian:\nCV\nCVC\nCVCC\n\nWrite a function that takes the phonetic transcriotion of a Persian word as an argument and returns the syllabified word based on the syllabic structure. In other word, put",
    "tags": [
      "regex",
      "strings"
    ],
    "title": "Syllabification"
  },
  {
    "_id": "RB6iWFrCd6rXWH3vi",
    "difficulty": 3.038022813688213,
    "language": "python3",
    "summary": "Given a string of digits, return the longest substring with alternating odd/even or even/odd digits. If two or more substrings have the same length, return the substring that occurs first.\n\nExamples\nlongest_substring(\"225424272163254474441338664823\") ➞ \"272163254\"\nsubstrings = 254, 272163254, 474, 41, 38, 23\n\nlongest_substring(\"594127169973391692147228678476\")",
    "tags": [
      "language_fundamentals",
      "math",
      "regex"
    ],
    "title": "Longest Alternating Substring"
  },
  {
    "_id": "L2nw2N2YqZCboiaYM",
    "difficulty": 3.050925925925926,
    "language": "python3",
    "summary": "Create a solution that checks if a given string consists of a sub-string pattern repeated multiple times to return True or False.\n\nExamples\nrepeated(\"a\") ➞ False\n\nrepeated(\"ababab\") ➞ True\n\nrepeated(\"aba\") ➞ False\n\nrepeated(\"abcabcabcabc\") ➞ True\n\nrepeated(\"aaxxtaaxztaaxxt\") ➞ False\n\nNotes\nAdroit programmers can solve this in one line.",
    "tags": [
      "conditions",
      "strings",
      "validation"
    ],
    "title": "Repeated Sub-String Pattern"
  },
  {
    "_id": "YDgtdP69Mn9pC73xN",
    "difficulty": 3.0555555555555554,
    "language": "python3",
    "summary": "This challenge is based on the game Minesweeper.\n\nCreate a function that takes a list of # and -, where each hash (#) represents a mine and each dash (-) represents a mine-free spot. Return a list where each dash is replaced by a digit indicating the number of mines immediately adjacent to the spot (horizontally, vertically, and diagonally).\n\nExamples\nnum_grid",
    "tags": [
      "arrays",
      "loops",
      "games"
    ],
    "title": "Minesweeper I — Grid"
  },
  {
    "_id": "sKKSaJfQNfc2oc7BS",
    "difficulty": 3.0707070707070705,
    "language": "python3",
    "summary": "Given two simultaneous linear equations in this form: ax + by = c, dx + ey = f, devise a function that returns the values of x and y as (x, y). The numbers a through f are non-zero integers. If there is not a unique solution or if there is no solution at all, return False. Input is given as: [[a, b, c], [d, e, f]]. Solutions, if they exist, will be integers.",
    "tags": [
      "algebra",
      "math"
    ],
    "title": "Simultaneous Linear Equations"
  },
  {
    "_id": "PYEuCAdGJsRS9AABA",
    "difficulty": 3.0987654320987654,
    "language": "python3",
    "summary": "Write a class called CoffeeShop, which has three instance variables:\n\nname : a string (basically, of the shop)\nmenu : a list of items (of dict type), with each item containing the item (name of the item), type (whether a food or a drink) and price.\norders : an empty list\n\nand seven methods:\n\nadd_order: adds the name of the item to the end of the orders list if",
    "tags": [
      "classes",
      "objects",
      "arrays"
    ],
    "title": "Coffee Shop"
  },
  {
    "_id": "aFLqW5hqqRmM4QXZq",
    "difficulty": 3.108108108108108,
    "language": "python3",
    "summary": "Given a dictionary containing quarterly sales values for a year, return a string representing a bar chart of the sales by quarter.\n\nQuarter names (Q1, Q2, Q3, Q4) should appear on the left.\nQuarters should be sorted in descending order by value.\nQuarters with the same value should be shown in their yearly order (Q1 -> Q4).\nBars should begin with a \"|\".\nRepeat",
    "tags": [
      "strings",
      "formatting",
      "objects"
    ],
    "title": "ASCII Charts (Part 2: Bar Chart)"
  },
  {
    "_id": "c6FoPFprcNW6u5oAn",
    "difficulty": 3.111731843575419,
    "language": "python3",
    "summary": "The Farey sequence of order n is the set of all fractions with a denominator between 1 and n, reduced and returned in ascending order. Given n, return the Farey sequence as a list, with each fraction being represented by a string in the form \"numerator/denominator\".\n\nExamples\nfarey(1) ➞ [\"0/1\", \"1/1\"]\n\nfarey(4) ➞ [\"0/1\", \"1/4\", \"1/3\", \"1/2\", \"2/3\", \"3/4\", \"1/1",
    "tags": [
      "math"
    ],
    "title": "Farey Sequence"
  },
  {
    "_id": "BfSj2nBc33aCQrbSg",
    "difficulty": 3.1259445843828715,
    "language": "python3",
    "summary": "A left-truncatable prime is a prime number that contains no 0 digits and, when the first digit is successively removed, the result is always prime.\n\nA right-truncatable prime is a prime number that contains no 0 digits and, when the last digit is successively removed, the result is always prime.\n\nCreate a function that takes an integer as an argument and:\n\nIf",
    "tags": [
      "math",
      "numbers",
      "loops"
    ],
    "title": "Truncatable Primes"
  },
  {
    "_id": "Yp8crKmgxZ3HiSBAZ",
    "difficulty": 3.142857142857143,
    "language": "python3",
    "summary": "Create a function that takes in a nested list and an element and returns the frequency of that element by nested level.\n\nExamples\nfreq_count([1, 4, 4, [1, 1, [1, 2, 1, 1]]], 1)\n➞ [[0, 1], [1, 2], [2, 3]]\nThe list has one 1 at level 0, 2 1's at level 1, and 3 1's at level 2.\n\nfreq_count([1, 5, 5, [5, [1, 2, 1, 1], 5, 5], 5, [5]], 5)\n➞ [[0, 3], [1, 4], [2, 0]]",
    "tags": [
      "arrays",
      "recursion",
      "language_fundamentals",
      "loops"
    ],
    "title": "Frequency by Level of Nesting"
  },
  {
    "_id": "v2eHXTn2qobw2WYJP",
    "difficulty": 3.142857142857143,
    "language": "python3",
    "summary": "Create a function that takes a list representation of a Minesweeper board, and returns another board where the value of each cell is the amount of its neighbouring mines.\n\nExamples\nThe input may look like this:\n\n[\n  [0, 1, 0, 0],\n  [0, 0, 1, 0],\n  [0, 1, 0, 1],\n  [1, 1, 0, 0]\n]\n\nThe 0 represents an empty space  .\nThe 1 represents a mine.\n\nYou will have to repl",
    "tags": [
      "arrays",
      "games",
      "loops",
      "functional_programming",
      "numbers"
    ],
    "title": "Minesweeper Number of Neighbouring Mines"
  },
  {
    "_id": "4xZFisQX8NnYB3nv4",
    "difficulty": 3.15,
    "language": "python3",
    "summary": "Given a list of seats, return the maximum number of new people which can be seated, as long as there is at least a gap of 2 seats between people.\n\nEmpty seats are given as 0.\nOccupied seats are given as 1.\nDon't move any seats which are already occupied, even if they are less than 2 seats apart. Consider only the gaps between new seats and existing seats.\n\nExa",
    "tags": [
      "loops",
      "algorithms",
      "arrays",
      "interview"
    ],
    "title": "Cinemas in 2021"
  },
  {
    "_id": "grorumaEjyFDmZQCx",
    "difficulty": 3.1530612244897958,
    "language": "python3",
    "summary": "A wristband can have 4 patterns:\n\nhorizontal: each item in a row is identical.\nvertical: each item in each column is identical.\ndiagonal left: each item is identical to the one on it's upper left or bottom right.\ndiagonal right: each item is identical to the one on it's upper right or bottom left.\n\nYou are shown an incomplete section of a wristband.\n\nWrite a f",
    "tags": [
      "arrays",
      "validation",
      "functional_programming",
      "loops"
    ],
    "title": "Patterned Wristband"
  },
  {
    "_id": "XQwPPHE6ZSu4Er9ht",
    "difficulty": 3.162037037037037,
    "language": "python3",
    "summary": "A number is Economical if the quantity of digits of its prime factorization (including exponents greater than 1) is equal to or lower than the digit quantity of the number itself.\n\nGiven an integer n, implement a function that returns a string:\n\"Equidigital\" if the quantity of digits of the prime factorization (including exponents greater than 1) is equal to t",
    "tags": [
      "numbers",
      "math",
      "loops",
      "conditions"
    ],
    "title": "Economical Numbers"
  },
  {
    "_id": "4AjWvJdZpFEMbGALd",
    "difficulty": 3.1630252100840335,
    "language": "python3",
    "summary": "A group of n prisoners stand in a circle awaiting execution. Starting from an arbitrary position(0), the executioner kills every kth person until one person remains standing, who is then granted freedom (see examples).\n\nCreate a function that takes 2 arguments — the number of people to be executed n, and the step size k, and returns the original position (inde",
    "tags": [
      "loops",
      "recursion",
      "math"
    ],
    "title": "Josephus Permutation"
  },
  {
    "_id": "ZsAXt5Kj5EP4v3ack",
    "difficulty": 3.176470588235294,
    "language": "python3",
    "summary": "Create a function based on the input and output. Look at the examples, there is a pattern.\n\nExamples\nsecret(\"div>p.a$$*2\") ➞ ``\nOnly whitespace in the entire string ===  One whitespace before each class. Total \" \" === 2\n\nsecret(\"ul>li.b$*3\") ➞ ``\nOnly whitespace in the entire string === One whitespace before each class. Total \" \" === 3\n\nsecret(\"p>h1.c$$$*2\") ➞",
    "tags": [
      "strings",
      "language_fundamentals"
    ],
    "title": "Secret Function 3.0"
  },
  {
    "_id": "L9Zh7dWsENnE9P6qc",
    "difficulty": 3.1770833333333335,
    "language": "python3",
    "summary": "Given n people find the survivor, starting from the first person he kills the person to the left and the next surviving person kills the person to his left, this keeps happening until 1 person survives return that person's number.\n\nExamples\njosephus(1) ➞ 1\n\njosephus(8) ➞ 1\n\njosephus(41) ➞ 19\n\nNotes\nCheck the rescources if you are confused about the instruction",
    "tags": [
      "algebra",
      "math"
    ],
    "title": "Simplified Josephus"
  },
  {
    "_id": "9Px2rkc9TPhK54wDb",
    "difficulty": 3.1964285714285716,
    "language": "python3",
    "summary": "In the ECG Sequence (that always starts with the numbers 1 and 2), every number that succeeds is the smallest not already present in the sequence and that shares a factor (excluding 1) with its preceding number. Every number in the ECG Sequence (besides 1 and 2) has a different index from its natural index in a normal numeric sequence. See the example below to",
    "tags": [
      "numbers",
      "math"
    ],
    "title": "The ECG Sequence"
  },
  {
    "_id": "i7TaDyRQQZCY3g2JG",
    "difficulty": 3.2010869565217392,
    "language": "python3",
    "summary": "Given a list of integers, create a function that will find the smallest positive integer that is evenly divisible by all the members of the list. In other words, find the least common multiple (LCM).\n\nExamples\nlcm([1, 2, 3, 4, 5, 6, 7, 8, 9]) ➞ 2520\n\nlcm([5]) ➞ 5\n\nlcm([5, 7, 11]) ➞ 385\n\nlcm([5, 7, 11, 35, 55, 77]) ➞ 385\n\nNotes\nN/A",
    "tags": [
      "math",
      "numbers",
      "arrays"
    ],
    "title": "Least Common Multiple"
  },
  {
    "_id": "C6pHyc4iN6BNzmhsM",
    "difficulty": 3.2016129032258065,
    "language": "python3",
    "summary": "In this challenge, you have to establish which kind of Poker combination is present in a deck of five cards. Every card is a string containing the card value (with the upper-case initial for face-cards) and the lower-case initial for suits, as in the examples below:\n\n\"Ah\" ➞ Ace of hearts\n\"Ks\" ➞ King of spades\n\"3d\" ➞ Three of diamonds\n\"Qc\" ➞ Queen of clubs\n\nThe",
    "tags": [
      "games",
      "data_structures",
      "conditions"
    ],
    "title": "Poker Hand Ranking"
  },
  {
    "_id": "T4q8P8cxvBtaLPW4q",
    "difficulty": 3.2073578595317724,
    "language": "python3",
    "summary": "Create a function that takes an integer argument and returns a list of prime numbers found in the decimal representation of that number.\n\nFor example, extract_primes(1717) returns [7, 7, 17, 17, 71].\n\nThe list should be in acending order. If a prime number appears more than once, every occurance should be listed. If no prime numbers are found, return an empty",
    "tags": [
      "numbers",
      "algorithms",
      "math",
      "cryptography"
    ],
    "title": "Find All Prime Numbers in Decimal Integer"
  },
  {
    "_id": "CMDy4pvnTZkFwJmmx",
    "difficulty": 3.2111111111111112,
    "language": "python3",
    "summary": "Create a class Sudoku that takes a string as an argument. The string will contain the numbers of a regular 9x9 sudoku board left to right and top to bottom, with zeros filling up the empty cells.\n\nAttributes\nAn instance of the class Sudoku will have one attribute:\nboard: a list representing the board, with sublits for each row, with the numbers as integers. Em",
    "tags": [
      "classes",
      "strings",
      "games",
      "arrays"
    ],
    "title": "Sudoku Parser"
  },
  {
    "_id": "JzXH3QnwHmpptadQr",
    "difficulty": 3.231578947368421,
    "language": "python3",
    "summary": "Given a number (positive, negative, or 0), return the logical negation (as a 1 or 0) of that number. Do so using only bitwise operators:\n\n(~, &, |, ^, >>, <<, etc) and +\n\nAny of these characters/constructs are not allowed:\n\nif, do, while, for, -, not, or, and, is, [,] and any functions.\n\nExamples\nbitwiselogicalnegation(1) ➞ 0\n\nbitwiselogicalnegation(5) ➞ 0\n\nbi",
    "tags": [
      "logic",
      "bit_operations"
    ],
    "title": "Bitwise Logical Negation"
  },
  {
    "_id": "35oc64XJBuysTs2h9",
    "difficulty": 3.2325581395348837,
    "language": "python3",
    "summary": "In statistic a quartile is a type of quantile, more specifically is any of the three values (q1, q2 or q3) that divide the items of a sorted frequency distribution (that starts at q0 with the lowest value and ends at q4 with the highest value) into four classes with each containing one fourth of the total population.\n\nThere are three main methods used for calc",
    "tags": [
      "math",
      "numbers",
      "arrays"
    ],
    "title": "Calculate the Quartiles"
  },
  {
    "_id": "5S97Me79PDAefLEXv",
    "difficulty": 3.235294117647059,
    "language": "python3",
    "summary": "Given a piece of code with a function assigned by lambda, rewrite it into a function assigned by def. The code given would be in string.\n\nOverview\nThis is a quick example of a lambda expression:\n\nfunc = lambda a, b: a * (b - 2)\n\n... is the same as ...\n\ndef func(a, b):\n  return a * (b - 2)\n\nExamples\nlambdatodef(\"func = lambda w: w + 'lambda'\") ➞ \"def func(w):\\n",
    "tags": [
      "strings",
      "regex"
    ],
    "title": "Convert from lambda to def"
  },
  {
    "_id": "j9zed4GnykS48W6vh",
    "difficulty": 3.24024024024024,
    "language": "python3",
    "summary": "Imagine you took all the numbers between 0 and n and concatenated them together into a long string. How many digits are there between 0 and n? Write a function that can calculate this.\n\nThere are 0 digits between 0 and 1, there are 9 digits between 0 and 10 and there are 189 digits between 0 and 100.\n\nExamples\ndigits(1) ➞ 0\n\ndigits(10) ➞ 9\n\ndigits(100) ➞ 189",
    "tags": [
      "numbers",
      "math",
      "loops"
    ],
    "title": "How Many Digits between 1 and N"
  },
  {
    "_id": "cvA35yPFAggr7rtve",
    "difficulty": 3.240740740740741,
    "language": "python3",
    "summary": "This is a sequel to part #1, with the same setup, but a different goal.\n\nA folder system on a computer might look something like the picture below:\n\nIn this challenge, folder systems will be represented by dictionaries where the keys are folders X and the value at X is the list of subfolders of X.\n\nFor example, the picture above becomes the dictionary:\n\n{\n\t\"A\"",
    "tags": [
      "algorithms",
      "data_structures",
      "logic"
    ],
    "title": "Folder Challenge (Part #2)"
  },
  {
    "_id": "KjCnfEm8WzJcnuPYt",
    "difficulty": 3.2459016393442623,
    "language": "python3",
    "summary": "You are given a list of binary integers and k, the number of flips allowed.\n\nWrite a function that returns the indices of zeroes of which, when flipped, return the longest contiguous sequence of ones.\n\nExamples\nzero_indices([1, 0, 1, 1, 0, 0, 0, 1], 1) ➞ [1]\n\nzero_indices([1, 0, 0, 0, 0, 1], 1) ➞ [1]\n\nzero_indices([1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0], 3) ➞ [6,",
    "tags": [
      "arrays",
      "loops"
    ],
    "title": "Indices of Zeroes for the Longest Run of Contiguous Ones"
  },
  {
    "_id": "k2aWnLjrFoXbvjJdb",
    "difficulty": 3.2467532467532467,
    "language": "python3",
    "summary": "The Vigenere Cipher is a poly-alphabetic substitution cipher that uses a set of shift ciphers and a keyword.\n\nOne of the simplest ciphers is the Caesar/shift cipher, where each letter in the plaintext message is replaced by the letter a particular number of positions up, or downstream in the alphabet. Shift 1 Caesar cipher:\n\n | | | | | | | | | | | | | | | | |",
    "tags": [
      "arrays",
      "loops",
      "strings",
      "cryptography"
    ],
    "title": "Vigenere Cipher"
  },
  {
    "_id": "58RNhygGNrKjPXwna",
    "difficulty": 3.25,
    "language": "python3",
    "summary": "Write a function that returns the longest non-repeating substring for a string input.\n\nExamples\nlongestnonrepeatingsubstring(\"abcabcbb\") ➞ \"abc\"\n\nlongestnonrepeatingsubstring(\"aaaaaa\") ➞ \"a\"\n\nlongestnonrepeatingsubstring(\"abcde\") ➞ \"abcde\"\n\nlongestnonrepeatingsubstring(\"abcda\") ➞ \"abcd\"\n\nNotes\nIf multiple substrings tie in length, return the one which occurs f",
    "tags": [
      "strings",
      "loops"
    ],
    "title": "Longest Substring with Non-repeating Characters"
  },
  {
    "_id": "zhqL89ZWgbxbixsdD",
    "difficulty": 3.25,
    "language": "python3",
    "summary": "Create a recursive function that tests if a number is the exact upper bound of the factorial of n. If so, return a list that  contains the exact factorial bound and n, or otherwise, the string \"Not exact!\".\n\nExamples\nis_exact(6) ➞ [6, 3]\n\nis_exact(24) ➞ [24, 4]\n\nis_exact(125) ➞ \"Not exact!\"\n\nis_exact(720) ➞ [720, 6]\n\nis_exact(1024) ➞ \"Not exact!\"\n\nis_exact(403",
    "tags": [
      "recursion",
      "numbers",
      "math"
    ],
    "title": "Recursion: Exact Factorial Bounds"
  },
  {
    "_id": "2C3gtb4treAFyWJMg",
    "difficulty": 3.2551724137931033,
    "language": "python3",
    "summary": "The Polybius Square cipher is a simple substitution cipher that makes use of a 5x5 square grid. The letters A-Z are written into the grid, with \"I\" and \"J\" typically sharing a slot (as there are 26 letters and only 25 slots).\n\n| |1|2|3|4|5\n---|---|---|---|---|---\n1|A|B|C|D|E\n2|F|G|H|I/J|K\n3|L|M|N|O|P\n4|Q|R|S|T|U\n5|V|W|X|Y|Z\n\nTo encipher a message, each letter",
    "tags": [
      "cryptography",
      "arrays",
      "strings"
    ],
    "title": "Polybius Square (Basic)"
  },
  {
    "_id": "YxnrZQwKyrzgcMvT4",
    "difficulty": 3.2586206896551726,
    "language": "python3",
    "summary": "Create a function to rotate a two-dimensional matrix of N * N integer elements num times, where if num is positive, the rotation is clockwise, and if not, counterclockwise.\n\nExamples\nrotate_transform([\n  [2, 4],\n  [0, 0]\n], 1) ➞ [\n  [0, 2],\n  [0, 4]\n]\n\nrotate_transform([\n  [2, 4],\n  [0, 0]\n], -1) ➞ [\n  [4, 0],\n  [2, 0]\n]\n\nNotes\nN/A",
    "tags": [
      "algorithms",
      "arrays",
      "interview",
      "loops"
    ],
    "title": "Rotate-Transform the Two-Dimensional Matrix"
  },
  {
    "_id": "u7ykayCJjyQXAk7gw",
    "difficulty": 3.2586206896551726,
    "language": "python3",
    "summary": "Mubashir needs your help to find out number of animals hidden in a given string txt.\n\nYou are provided with an array of animals given below:\n\nanimals = [\"dog\", \"cat\", \"bat\", \"cock\", \"cow\", \"pig\",\n\"fox\", \"ant\", \"bird\", \"lion\", \"wolf\", \"deer\", \"bear\",\n\"frog\", \"hen\", \"mole\", \"duck\", \"goat\"]\n\nRule: Return the maximum number of animal names. See the below example:",
    "tags": [
      "validation",
      "strings",
      "regex",
      "language_fundamentals"
    ],
    "title": "🦁🐱 Count Animals 🐶🐺"
  },
  {
    "_id": "PCtTk9RRPPKXCxnAx",
    "difficulty": 3.261904761904762,
    "language": "python3",
    "summary": "The modulo operation can also be done by repetitive subtraction or addition. In this challenge, you're going to create a function that mimics such an operation and returns the modulo of the two given numbers by recursively subtracting or adding them.\n\nExamples\nmodulo(100, 25) ➞ 0\n\nmodulo(-51, -4) ➞ -3\n\nmodulo(3, 9) ➞ 3\n\nmodulo(-21, 5) ➞ -1\n-1 instead of 4 (whi",
    "tags": [
      "recursion",
      "math"
    ],
    "title": "Recursion: Modulo by Subtraction"
  },
  {
    "_id": "rFK7WftrcrEu6rbu8",
    "difficulty": 3.261904761904762,
    "language": "python3",
    "summary": "Given a Binary Search Tree (BST) implementation, complete the traverse function which is present in the BST class. Here you have to perform the level-order traversal on BST which is another term for Breadth First Traversal.\n\nExamples\ntraverse() ➞  [10, 4, 20, 1, 5]\n\n      10\n      /   \\\n    4    20\n  /  \\\n1    5\n\ntraverse() ➞ [100, 70, 200, 34, 80, 300]",
    "tags": [
      "loops",
      "logic",
      "data_structures"
    ],
    "title": "Level Order Traversal"
  },
  {
    "_id": "9iLhKgqZn5exBrmWm",
    "difficulty": 3.263392857142857,
    "language": "python3",
    "summary": "Write a function that returns True if a string consists of ascending AND consecutive numbers.\n\nExamples\nascending(\"232425\") ➞ True\nConsecutive numbers 23, 24, 25\n\nascending(\"2324256\") ➞ False\nNo matter how this string is divided, the numbers are not consecutive.\n\nascending(\"444445\") ➞ True\nConsecutive numbers 444 and 445.\n\nNotes\nA number can consist of any num",
    "tags": [
      "strings",
      "higher_order_functions"
    ],
    "title": "Ascending Consecutive Numbers"
  },
  {
    "_id": "siuKPSYXjjic9zEF2",
    "difficulty": 3.2708333333333335,
    "language": "python3",
    "summary": "Aluminum foil has a thickness of 0.025mm.  A roll is formed by tightly winding it around a tube with an outside diameter of 4cm.  Given the length of the foil in cm, write a function that returns the diameter of the roll in cm measured at its thickest point. Round the result to four places.\n\nExamples\nfoil(0) ➞ 4.0\n\nfoil(50) ➞ 4.02\n\nfoil(4321) ➞ 5.4575\n\nfoil(10",
    "tags": [
      "loops",
      "math",
      "numbers"
    ],
    "title": "Aluminum Foil"
  },
  {
    "_id": "28mJ6NgqbQS4YRgDc",
    "difficulty": 3.275,
    "language": "python3",
    "summary": "In the trading card game Magic: the Gathering, players must use a resource called mana to cast spells. There are six types of mana in Magic: white (W), blue (U), black (B), red (R), green (G), and colorless (C). The mana cost of a spell indicates the amount and type(s) of mana that must be paid to cast the spell.\n\nIf the mana cost contains a number (such as \"3",
    "tags": [
      "strings",
      "games",
      "validation"
    ],
    "title": "MTG Mana Cost"
  },
  {
    "_id": "n2y4i74e9mFdwHNCi",
    "difficulty": 3.275,
    "language": "python3",
    "summary": "Write a recursive function that filters the items in a list (given as parameter arr) by positional parity (odd or even), given as parameter par, starting from the opposite end. Return a list of items on odd positions (... 5, 3, 1) or on even positions (... 6, 4, 2) and counting from the last item in the list.\n\nExamples\ngetitemsat([2, 4, 6, 8, 10], \"odd\") ➞ [2,",
    "tags": [
      "recursion",
      "strings",
      "arrays"
    ],
    "title": "Recursion: Reversed List Index"
  },
  {
    "_id": "rBNPRqYMApGLTgmBe",
    "difficulty": 3.2777777777777777,
    "language": "python3",
    "summary": "Write a function that returns the amount of possible combinations when drawing the given amount of cards from a deck of cards.\n\nThe function must take two inputs:\n    k is the amount of cards to draw.\n    n the total amount of cards in the deck.\n\nFor example, a poker hand can be described as a 5-combination (k = 5) of cards from a 52 card deck (n = 52). The 5",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "Combinations"
  },
  {
    "_id": "e69u7eJYnSz3kiLAn",
    "difficulty": 3.282051282051282,
    "language": "python3",
    "summary": "Create a function that:\nCreates a sha256 hash from a list of strings.\nSorts the hash, alphas first digits second.\nReturns a new sha256 hash from the sorted string.\n\nExamples\nhash_ops([\"string1\", \"string2\", \"string3\"]) ➞ \"2d3b990149219819705bfe290571a9dcf5cf2a2528a2c711a57bd430ce32497f\"\n\nhash_ops([\"quick\", \"brown\", \"fox\"] ) ➞ \"7a2f7fdf31a4b14dd4f67e5ca8da3dabd7",
    "tags": [
      "cryptography",
      "arrays",
      "sorting",
      "strings"
    ],
    "title": "Hash Juggling"
  },
  {
    "_id": "fbqmyDjCigbYhWLJa",
    "difficulty": 3.282258064516129,
    "language": "python3",
    "summary": "Write a function that divides a phrase into word buckets, with each bucket containing n or fewer characters. Only include full words inside each bucket.\n\nExamples\nsplitintobuckets(\"she sells sea shells by the sea\", 10)\n➞ [\"she sells\", \"sea shells\", \"by the sea\"]\n\nsplitintobuckets(\"the mouse jumped over the cheese\", 7)\n➞ [\"the\", \"mouse\", \"jumped\", \"over\", \"the\"",
    "tags": [
      "strings",
      "control_flow"
    ],
    "title": "Word Buckets"
  },
  {
    "_id": "EXNAxFGgDDtE3SbQf",
    "difficulty": 3.2857142857142856,
    "language": "python3",
    "summary": "An out-shuffle, also known as an out faro shuffle or a perfect shuffle, is a controlled method for shuffling playing cards. It is performed by splitting the deck into two equal halves and interleaving them together perfectly, with the condition that the top card of the deck remains in place.\n\nUsing an array to represent a deck of cards, an out-shuffle looks li",
    "tags": [
      "recursion",
      "numbers",
      "logic"
    ],
    "title": "Recursion: The Out-Shuffle"
  },
  {
    "_id": "bmYrX5N9DBF27Fx63",
    "difficulty": 3.2857142857142856,
    "language": "python3",
    "summary": "The factors said to have the greatest impact on someone's mood are: weather, meals, and sleep. Your task is, given a list of sublists of different values for: Mood, Weather, Meals, and Sleep, determine which other variable has had the greatest impact on the mood.\n\nExamples\ngreatest_impact([\n  [1, 1, 3, 10],\n  [1, 1, 3, 10],\n  [1, 1, 3, 10]\n]) ➞ \"Weather\"\n\nAs i",
    "tags": [
      "algorithms",
      "arrays"
    ],
    "title": "What Gives a Bad Mood?"
  },
  {
    "_id": "FEK7892zgj4nPJvkE",
    "difficulty": 3.2903225806451615,
    "language": "python3",
    "summary": "A prime gap of length n is a run of n-1 consecutive composite numbers between two successive primes. See this Resource for more information.\n\nThe prime numbers are not regularly spaced. For example gap between:\n2 and 3 is 1\n3 and 5 is 2\n7 and 11 is 4\n\nCreate a function with following parameters:\n\ng (integer >= 2)\nGap between the consecutive primes\n\na (integer",
    "tags": [
      "numbers",
      "algorithms",
      "functional_programming"
    ],
    "title": "Prime Gaps"
  },
  {
    "_id": "HqpZQPZiHbPK4HgEB",
    "difficulty": 3.290909090909091,
    "language": "python3",
    "summary": "Maxie is the largest number that can be obtained by swapping two digits, Minnie is the smallest.  Write a function that takes a number and returns Maxie and Minnie. Leading zeros are not permitted.\n\nExamples\nmaxmin(12340) ➞ (42310, 10342)\n\nmaxmin(98761) ➞ (98761, 18769)\n\nmaxmin(9000) ➞ (9000, 9000)\nSometimes no swap needed.\n\nmaxmin(11321) ➞ (31121, 11123)\n\nNot",
    "tags": [
      "numbers",
      "strings"
    ],
    "title": "Maxie and Minnie"
  },
  {
    "_id": "Zx9L2dpHr2nMjaKXp",
    "difficulty": 3.2916666666666665,
    "language": "python3",
    "summary": "In this challenge, you have to create functions to encode and decode variable-length quantities. A variable-length quantity (VLQ) is a universal code that uses an arbitrary number of binary octets (eight-bit bytes) to represent an arbitrarily large integer. A VLQ is essentially a base-128 representation of an unsigned integer with the addition of the eighth bi",
    "tags": [
      "algorithms",
      "bit_operations",
      "data_structures"
    ],
    "title": "Variable Length Quantity (VLQ) Encoding"
  },
  {
    "_id": "KETgxWCWtrk7oLM49",
    "difficulty": 3.2972972972972974,
    "language": "python3",
    "summary": "Four football teams face each other in a tournament and you must determine the final classification. Depending on the match result, a team gets a certain amount of points:\n\nA win is worth 3 points.\nA draw is worth 1 point.\nA defeat is worth 0 points.\n\nEach team faces another once, for a total of six played games. For each game the result is provided with the f",
    "tags": [
      "formatting",
      "sorting",
      "data_structures",
      "objects"
    ],
    "title": "Football Tournament Scores"
  },
  {
    "_id": "xEGFoPmMm28h7HQ7a",
    "difficulty": 3.2989690721649483,
    "language": "python3",
    "summary": "Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\n\nAlternative Text\n\nExamples\nletter_combinations(\"23\") ➞ [\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"]",
    "tags": [
      "arrays",
      "algorithms",
      "loops",
      "logic"
    ],
    "title": "Phone Letter Combinations"
  },
  {
    "_id": "Kv8DMmwfuKTLyZD5E",
    "difficulty": 3.3,
    "language": "python3",
    "summary": "Create a function which creates a square dartboard of side length n. The value of a number should increase, the closer it is to the centre of the board.\n\nExamples\nmake_dartboard(3) ➞ [\n  111,\n  121,\n  111\n]\n\nmake_dartboard(8) ➞ [\n  11111111,\n  12222221,\n  12333321,\n  12344321,\n  12344321,\n  12333321,\n  12222221,\n  11111111\n]\n\nmake_dartboard(5) ➞ [\n  11111,\n  1",
    "tags": [
      "arrays",
      "numbers",
      "loops"
    ],
    "title": "Making a Simple Dartboard"
  },
  {
    "_id": "NrWECd98HTub87cHq",
    "difficulty": 3.3,
    "language": "python3",
    "summary": "Create a function that returns the area of the overlap between two rectangles. The function will receive two rectangles, each with the coordinates of the lower left corner followed by the width and the height rect = [x, y, width, height].\n\nExamples\noverlapping_rectangles([ 2, 1, 3, 4 ], [ 3, 2, 2, 5 ]) ➞ 6\n\noverlapping_rectangles([ 2, -9, 11, 5 ], [ 5, -11, 2,",
    "tags": [
      "algebra",
      "math",
      "objects",
      "geometry"
    ],
    "title": "Area of Overlapping Rectangles"
  },
  {
    "_id": "RoEn338P4xAf7mNNg",
    "difficulty": 3.303030303030303,
    "language": "python3",
    "summary": "Given a rectangular grid of m by n spaces, signaled by 0s, and a number of points, signaled by 1, 2, 3..., return the number of moves for the shortest path that starts at 1 and goes over all the other points in ascending order.\n\nExamples\nshortest_path([\n  (\"001\"),\n  (\"002\"),\n  (\"003\")\n]) ➞ 2\n\nshortest_path([\n  (\"00000\"),\n  (\"01006\"),\n  (\"02000\"),\n  (\"30050\"),",
    "tags": [
      "arrays",
      "logic",
      "loops"
    ],
    "title": "The Shortest Path"
  },
  {
    "_id": "pmYNSpKyijrq2i5nu",
    "difficulty": 3.308270676691729,
    "language": "python3",
    "summary": "You're given a dartboard divided into sections, each section has a unique score. That means there won't be two sections with the same score.\n\nThrowing a certain amount of valid darts, find how many solutions there are to reach the target score. Your function will be passed three parameters...\n\nSections: A list of values for the sections (e.g. [3, 6, 8, 11, 15,",
    "tags": [
      "arrays",
      "loops",
      "recursion"
    ],
    "title": "Throwing <N> Amount of Darts  Find All Possible Combinations to Reach a Target Score"
  },
  {
    "_id": "eHwd6medMrY3QXM8k",
    "difficulty": 3.309090909090909,
    "language": "python3",
    "summary": "Write a function that will return True if a given string (divided and grouped into a size) will contain a set of consecutive numbers (regardless of orientation: whether ascending or descending), otherwise, return False.\n\nExamples\nis_consecutive(\"121314151617\") ➞ True\nContains a set of consecutive ascending numbers\nif grouped into 2's : 12, 13, 14, 15, 16, 17",
    "tags": [
      "arrays",
      "loops",
      "numbers",
      "sorting",
      "validation"
    ],
    "title": "Consecutive Number Series"
  },
  {
    "_id": "EWZqYT4QGMYotfQTu",
    "difficulty": 3.319672131147541,
    "language": "python3",
    "summary": "Tap code is a way to communicate messages via a series of taps (or knocks) for each letter in the message. Letters are arranged in a 5x5 polybius square, with the letter \"K\" being moved to the space with \"C\".\n\n   1  2  3  4  5\n1  A  B C\\K D  E\n2  F  G  H  I  J\n3  L  M  N  O  P\n4  Q  R  S  T  U\n5  V  W  X  Y  Z\n\nEach letter is translated by tapping out the row",
    "tags": [
      "cryptography",
      "math"
    ],
    "title": "Tap Code Translation"
  },
  {
    "_id": "BDjhphREEa6Ds44Ty",
    "difficulty": 3.3333333333333335,
    "language": "python3",
    "summary": "A large flat field measures 50x50 kilometers. At a time t = 0, a bomb explodes somewhere on the field. There are 3 scattered sensors with synchronized clocks that record the exact time (in seconds) that the sound of the exploding bomb reaches them.\n\nGiven the x, y coordinates of each of the 3 sensors and the recorded time of each, find the location of the bomb",
    "tags": [
      "algebra",
      "algorithms",
      "arrays"
    ],
    "title": "Where's the Bomb?"
  },
  {
    "_id": "F9r7cuye3EbNRBtjx",
    "difficulty": 3.3333333333333335,
    "language": "python3",
    "summary": "The function is given a string with some square brackets in it. You need to build the outcome string using the rule: k[substring] is replaced by the substring inside the square brackets being repeated exactly k times.\n\nExamples\nstring_builder(\"3[a]2[bc]\") ➞ \"aaabcbc\"\n\nstring_builder(\"3[a2[c]]\") ➞ \"accaccacc\"\n\nstring_builder(\"2[abc]3[cd]ef\") ➞ \"abcabccdcdcdef\"",
    "tags": [
      "conditions",
      "formatting",
      "regex",
      "strings"
    ],
    "title": "Casual String Builder"
  },
  {
    "_id": "oFqkxLiqeSGL8xmBn",
    "difficulty": 3.3421052631578947,
    "language": "python3",
    "summary": "The function input is two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list, in which the digits are also stored in reversed order. The class ListNode, building block of the linked list, is defined in the",
    "tags": [
      "classes",
      "data_structures",
      "loops",
      "numbers"
    ],
    "title": "Add Two Numbers"
  },
  {
    "_id": "FnyAGdwgcH4whynjR",
    "difficulty": 3.343283582089552,
    "language": "python3",
    "summary": "Create a function that returns all sublists in a list that sum to a particular value. Return the sublists in the following order:\n\nFirst by ascending length.\nSecond by comparing element-by-element, starting from the leftmost one. Put the list with the smaller element first in the pairwise comparison.\n\nThe following example will illustrate:\nget_subsets([-3, -2,",
    "tags": [
      "arrays",
      "higher_order_functions",
      "sorting"
    ],
    "title": "All Subsets that Add to a Value"
  },
  {
    "_id": "D93PLXfXyfzByMnTm",
    "difficulty": 3.3461538461538463,
    "language": "python3",
    "summary": "The function is given four points with (x, y) coordinates in no particular order. Determine if these points make a square and return True / False.\n\nA square has four equal sides with positive length and four 90-degree angles.\n\nExamples\nvalid_square((0, 0), (1, 1), (1, 0), (0, 1)) ➞ True\n\nvalid_square((0, 0), (1, 1), (1, 0), (0, 12)) ➞ False\n\nvalid_square((1, 0",
    "tags": [
      "algorithms",
      "conditions",
      "geometry",
      "math",
      "validation"
    ],
    "title": "Four Points Make a Square"
  },
  {
    "_id": "ARRBHsfXtnydhwtgt",
    "difficulty": 3.347826086956522,
    "language": "python3",
    "summary": "The function is given an array of characters. Recursively compress the array into a string using the following rules. For each group of consecutively repeating characters:\nIf the number of repeating characters is one, append the string with only this character.\nIf the number n of repeating characters x is greater than one, append the string with \"x\" + str(n).",
    "tags": [
      "recursion",
      "strings",
      "arrays"
    ],
    "title": "Recursion: String Compression from Character Array"
  },
  {
    "_id": "Y4gwcGfcGb3SKz6Tu",
    "difficulty": 3.3529411764705883,
    "language": "python3",
    "summary": "Given a string of letters, create a function that returns a list with the separator that yields the longest possible substring, provided that:\nThe substring starts and ends with the separator.\nThe separator doesn't occur inside the substring other than at the ends.\n\nIf two or more separators yield substrings with the same length, they should appear in alphabet",
    "tags": [
      "strings",
      "regex"
    ],
    "title": "The Longest Substring"
  },
  {
    "_id": "vcFgGJHxhTwRiLK5d",
    "difficulty": 3.3529411764705883,
    "language": "python3",
    "summary": "Given a positive integer n, implement a function that finds the smallest number that is evenly divisible by the integers 1 through n inclusive.\n\nExamples\nsmallest(1) ➞ 1\n\nsmallest(5) ➞ 60\n\nsmallest(10) ➞ 2520\n\nsmallest(20) ➞ 232792560\n\nNotes\nN/A",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "The Smallest Number"
  },
  {
    "_id": "Mb8KmicGqpP3zDcQ5",
    "difficulty": 3.353982300884956,
    "language": "python3",
    "summary": "This classic problem dates back to Roman times. There are 41 soldiers arranged in a circle. Every third soldier is to be killed by their captors, continuing around the circle until only one soldier remains. He is to be freed. Assuming you would like to stay alive, at what position in the circle would you stand?\n\nGeneralize this problem by creating a function t",
    "tags": [
      "loops",
      "recursion",
      "algorithms"
    ],
    "title": "The Josephus Problem"
  },
  {
    "_id": "hvPiBiwE9TfLnsfz4",
    "difficulty": 3.3548387096774195,
    "language": "python3",
    "summary": "A Fibonacci word is a specific sequence of binary digits (or symbols from any two-letter alphabet). The Fibonacci word is formed via repeated concatenation in the same fashion that the Fibonacci numbers are formed via repeated addition.\n\nCreate a function that takes a number n as an argument and returns the first n elements of the Fibonacci word sequence.\n\nExa",
    "tags": [
      "arrays",
      "recursion",
      "strings"
    ],
    "title": "Recursion: Fibonacci Word"
  },
  {
    "_id": "dBBhtQqKZb2eDERHg",
    "difficulty": 3.357142857142857,
    "language": "python3",
    "summary": "Write a recursive function that accepts an integer n and return a sequence of n integers as a string, descending from n to 1 and then ascending back from 1 to n as in the examples below:\n\nExamples\nnumber_sequence(1) ➞ \"1\"\n\nnumber_sequence(2) ➞ \"1 1\"\n\nnumber_sequence(3) ➞ \"2 1 2\"\n\nnumber_sequence(4) ➞ \"2 1 1 2\"\n\nnumber_sequence(9) ➞ \"5 4 3 2 1 2 3 4 5\"\n\nnumber_",
    "tags": [
      "recursion",
      "numbers"
    ],
    "title": "Number Sequence"
  },
  {
    "_id": "7Y2C8g3fXXyK2R9Bn",
    "difficulty": 3.357142857142857,
    "language": "python3",
    "summary": "A Keyword Cipher is a monoalphabetic cipher which uses a keyword to provide encryption on given string of message.\n\nCreate a function that takes two arguments: a string message and a string key, and returns an encoded message.\n\nFor the encryption key, the keyword is placed at the beginning, followed by the rest of the characters in the alphabet in order (in ot",
    "tags": [
      "cryptography",
      "logic",
      "strings"
    ],
    "title": "Keyword Cipher"
  },
  {
    "_id": "Akx92Ldcy78xp5zCF",
    "difficulty": 3.357142857142857,
    "language": "python3",
    "summary": "The function is given two strings t - template, s - to be sorted. Sort the characters in s such that if the character is present in t then it is sorted according to the order in t and other characters are sorted alphabetically after the ones found in t.\n\nExamples\ncustom_sort(\"edc\", \"abcdefzyx\") ➞ \"edcabfxyz\"\n\ncustom_sort(\"fby\", \"abcdefzyx\") ➞ \"fbyacdexz\"\n\ncust",
    "tags": [
      "algorithms",
      "conditions",
      "sorting",
      "strings"
    ],
    "title": "Sort a String with the Given Template"
  },
  {
    "_id": "jyHs9YRnrPgLwKiaL",
    "difficulty": 3.3582089552238807,
    "language": "python3",
    "summary": "Before you start, please try the first part of this challenge: Split 25 (Part #1)\n\nAfter you completed the first part, you may have realized you could go higher by not using natural numbers. You could use negatives and positives, eventually reaching infinity, like so: -25 * 25 * 50 * -25 so on and so on continuing to add more factors. You could also use fracti",
    "tags": [
      "algebra",
      "control_flow",
      "math",
      "numbers"
    ],
    "title": "Split 25 (Part #2)"
  },
  {
    "_id": "qNQkYzY8GpiFMmndh",
    "difficulty": 3.359550561797753,
    "language": "python3",
    "summary": "Write a function that connects each previous word to the next word by the shared letters. Return the resulting string (removing duplicate characters in the overlap) and the minimum number of shared letters across all pairs of strings.\n\nExamples\njoin([\"oven\", \"envier\", \"erase\", \"serious\"]) ➞ [\"ovenvieraserious\", 2]\n\njoin([\"move\", \"over\", \"very\"]) ➞ [\"movery\", 3",
    "tags": [
      "strings",
      "higher_order_functions",
      "loops"
    ],
    "title": "Connecting Words"
  },
  {
    "_id": "9cY7ymbp5mtrKdxyR",
    "difficulty": 3.366336633663366,
    "language": "python3",
    "summary": "An English text needs to be encrypted using Edabit’s encryption scheme. First, the spaces are removed from the text. Let L be the length of this text. Then, characters are written into a grid, whose rows and columns have the following constraints:\n\nFor example, the sentence \"if man was meant to stay on the ground god would have given us roots\", after removing",
    "tags": [
      "cryptography",
      "strings",
      "validation"
    ],
    "title": "Edabit's Encryption Scheme"
  },
  {
    "_id": "BeCSQjqycsY8JadFT",
    "difficulty": 3.3666666666666667,
    "language": "python3",
    "summary": "Create a recursive function that identifies the very first item that has recurred in the string argument passed. It returns the identified item with the index where it first appeared and the very next index where it resurfaced - entirely as an object; or an empty object if the passed argument is either None, an empty string, or no recurring item exists.\n\nExamp",
    "tags": [
      "recursion",
      "objects",
      "algorithms",
      "arrays"
    ],
    "title": "Recursion: First Recurrence Index"
  },
  {
    "_id": "aRXEq8DPQNuGENc68",
    "difficulty": 3.36734693877551,
    "language": "python3",
    "summary": "A tank has pure water flowing into it at 10 l/min. The contents of the tank are kept thoroughly mixed, and the contents flow out at 10 l/min. Salt is added to the tank at a rate of 0.1 kg/min. Initially, the tank contains 10 kg of salt in 100 l of water.\n\nDevise a function whose argument is time t. The function returns the amount of salt (kg) left in the tank",
    "tags": [
      "algebra",
      "loops"
    ],
    "title": "Salt Water"
  },
  {
    "_id": "2nciiXZN4HCuNEmAi",
    "difficulty": 3.3684210526315788,
    "language": "python3",
    "summary": "The nesting of lists can be viewed indirectly as curves and barriers of the real data embedded in lists, thus, defeats the very purpose of directly accessing them thru indexes and slices. In this challenge, a function is required to flatten those curves (i.e. level, iron, compress, raze, topple) and expose those data as a single list and not as a list of lists",
    "tags": [
      "recursion",
      "arrays"
    ],
    "title": "Recursion: Flatten the Curves"
  },
  {
    "_id": "xzaREqFLW3tZdGnTA",
    "difficulty": 3.3684210526315788,
    "language": "python3",
    "summary": "Create a function that takes two arguments as input:\nA positive integer that describes the size of a grid. For example, when the value of the argument is 10, a 10x10 grid will be used.\nA list of one or more tuples of size 3. Each tuple represents a block of the grid, and the meanings of the tuple's elements are: 1. The x coordinate. 2. The y coordinate. 3. The",
    "tags": [
      "algorithms",
      "arrays"
    ],
    "title": "The Most Overlapped Block of the Grid"
  },
  {
    "_id": "eoK63mG5tJDu439nJ",
    "difficulty": 3.371794871794872,
    "language": "python3",
    "summary": "Let's update our previous word-chain definition. In this 2.0 version, a word-chain is an array of words, where the next word is formed by either:\n\nChanging exactly one letter from the previous word\nAdding or subtracting one letter\n\nNote: You can only do one (not both) for each word change.\n\nExamples\nisWordChain([\"row\", \"crow\", \"crown\", \"brown\", \"brawn\"]) ➞ Tru",
    "tags": [
      "arrays",
      "strings",
      "validation"
    ],
    "title": "Word Chain 2.0"
  },
  {
    "_id": "ojBNREQrg7EW9ZzYx",
    "difficulty": 3.372093023255814,
    "language": "python3",
    "summary": "Arun recently started eating chocolates. The shopkeeper tells Arun that for every three chocolates Arun eats, he will give him one chocolate in exchange for three chocolate wrappers. Now, Arun is confused about how many chocolates he can eat.\n\nGiven the totalmoney Arun has and the costofonechocolate, help him figure out how many chocolates he can eat.\n\nExample",
    "tags": [
      "logic",
      "regex",
      "strings",
      "algorithms"
    ],
    "title": "Eat Chocolates"
  },
  {
    "_id": "CMqa7tAtffudQ7hs4",
    "difficulty": 3.3777777777777778,
    "language": "python3",
    "summary": "Given a shuffled list l, return a sequence of transpositions which sorts the list (as in sorted(l)). A transposition is a pair of indices (i, j) representing that l[i] and l[j] be swapped. Specifically, the output is a list of transpositions to be applied. Transpositions are applied as in:\n\ndef apply_transpositions(l, swaps):\n  for i, j in swaps:\n  l[i], l[j]",
    "tags": [
      "algorithms",
      "arrays",
      "sorting",
      "loops"
    ],
    "title": "Give Steps to Sort a List"
  },
  {
    "_id": "6b8Px5m82nAgudhsy",
    "difficulty": 3.3783783783783785,
    "language": "python3",
    "summary": "Write a function that returns the next largest number that can be created from the same digits as the input.\n\nExamples\nnext_number(19) ➞ 91\n\nnext_number(3542) ➞ 4235\n\nnext_number(5432) ➞ 5432\n\nnext_number(58943) ➞ 59348\n\nNotes\nIf no larger number can be formed, return the number itself.\nBonus: See if you can do this without generating all digit permutations.",
    "tags": [
      "numbers",
      "sorting"
    ],
    "title": "Next Largest Number"
  },
  {
    "_id": "E9Wkppxyo763XywBe",
    "difficulty": 3.3797468354430378,
    "language": "python3",
    "summary": "A binary clock displays the time of day in binary format. Modern binary clocks have six columns of lights; two for each of the hours, minutes and seconds. The photo below shows a binary clock displaying the time \"12:15:45\":\n\nThe binary values increase from the bottom to the top row. Lights on the bottom row have a value of 1, lights on the row above have a val",
    "tags": [
      "arrays",
      "strings"
    ],
    "title": "Building a Binary Clock"
  },
  {
    "_id": "DottLgHxGke8fW8uK",
    "difficulty": 3.3823529411764706,
    "language": "python3",
    "summary": "Write a function that efficiently calculates nPr (number of permutations of r items from a set of size n) and another function that efficiently calculates nCr (number of combinations of r items from a set of size n, regardless of order).\n\nThe formula for calculating nPr is n!/(n-r)! (\"!\" is the factorial operation).\nThe formula for calculating nCr is n!/(r!(n-",
    "tags": [
      "numbers",
      "math",
      "algebra"
    ],
    "title": "nPr and nCr"
  },
  {
    "_id": "cHzvB5KCWCK3oCLGL",
    "difficulty": 3.382716049382716,
    "language": "python3",
    "summary": "Conway's Game of Life\n\nThe goal of this challenge is to implement the logic used in Conway's Game of Life. Wikipedia will give a better understanding of what it is and how it works (check the resources tab above).\n\nRules\nFor a space that's \"populated\":\n    Each cell with 0 or 1 neighbours dies, as if by solitude.\n    Each cell with 2 or 3 neighbours survives.",
    "tags": [
      "arrays",
      "games",
      "loops",
      "conditions"
    ],
    "title": "Conway's Game of Life"
  },
  {
    "_id": "B5J4Bfgg7PoDHBBZQ",
    "difficulty": 3.386861313868613,
    "language": "python3",
    "summary": "Create a function that takes four tuples. The first three are (x, y) coordinates of three corners of a triangle. Return True if the fourth tuple — the (x, y) coordinates of a test point — lies within the triangle, False if it doesn't.\n\nExamples\nwithin_triangle((1, 4), (5, 6), (6, 1), (4, 5)) ➞ True\n\nwithin_triangle((1, 4), (5, 6), (6, 1), (3, 2)) ➞ False\n\nwith",
    "tags": [
      "algebra",
      "math",
      "validation"
    ],
    "title": "Point Within Triangle"
  },
  {
    "_id": "KudhhsvJygnEzx8tZ",
    "difficulty": 3.388888888888889,
    "language": "python3",
    "summary": "You are given data containing information for the first 100 Pokémon as well as special effectiveness relationships. Use this data to define a function that takes two Pokémon numbers and calculates which Pokémon wins based on their types.\n\nHow to calculate?\n Given two Pokémon, say \\#3 (Venusaur) and \\#6 (Charizard), use the given data to obtain their respective",
    "tags": [
      "games",
      "loops",
      "math",
      "strings"
    ],
    "title": "Pokémon Specials Contest"
  },
  {
    "_id": "6kseWBaSTv6GgaKDS",
    "difficulty": 3.4,
    "language": "python3",
    "summary": "Create a function which returns the next letters alphabetically in a given string. If the last letter is a \"Z\", change the rest of the letters accordingly.\n\nExamples\nnext_letters(\"A\") ➞ \"B\"\n\nnext_letters(\"ABC\") ➞ \"ABD\"\n\nnext_letters(\"Z\") ➞ \"AA\"\n\nnext_letters(\"CAZ\") ➞ \"CBA\"\n\nnext_letters(\"\") ➞ \"A\"\n\nNotes\nTests will all be in CAPITALS.\nEmpty inputs should return",
    "tags": [
      "strings",
      "loops"
    ],
    "title": "Next in the Alphabet"
  },
  {
    "_id": "88WesDgd2Ge9JEiJM",
    "difficulty": 3.4,
    "language": "python3",
    "summary": "Find the length of the longest sub-sequence of two distinct numbers whose difference is 1. A sub-sequence can be made by deleting any numbers in between.\n\nExamples\nalmost_uniform([1, 3, 2, 2, 5, 2, 3, 7]) ➞ 5\n[3, 2, 2, 2, 3]\n\nalmost_uniform([1, 2, 3, 4]) ➞ 2\n[1, 2] or [2, 3] or [3, 4]\n\nalmost_uniform([1, 1, 1, 1]) ➞ 0\nThere is no sub-sequence of two distinct n",
    "tags": [
      "arrays",
      "conditions",
      "loops"
    ],
    "title": "Almost Uniform Sequence"
  },
  {
    "_id": "mt4E3MYkoJASY8TE6",
    "difficulty": 3.4,
    "language": "python3",
    "summary": "Given a keypad that has the following layout:\n\n┌───┬───┬───┐\n│ 1 │ 2 │ 3 │\n├───┼───┼───┤\n│ 4 │ 5 │ 6 │\n├───┼───┼───┤\n│ 7 │ 8 │ 9 │\n└───┼───┼───┘\n    │ 0 │\n    └───┘\n\nYour secret agent Mubashir has already given you a pincode. However, he also said it's possible that each of the digits he saw could be another adjacent digit (horizontally or vertically, but not",
    "tags": [
      "algorithms",
      "games",
      "numbers"
    ],
    "title": "Crack the Pin Code"
  },
  {
    "_id": "Sjti2fmLY6sLJHr9p",
    "difficulty": 3.40625,
    "language": "python3",
    "summary": "Create a function that takes in two positive integers start and n and returns a list of the first n terms of the look-and-say sequence starting at the given start.\n\nEach term of the look-and-say sequence (except for the first term) is created from the previous term using the following process.\n\nStart with a term in the sequence (for example, 111312211):\n\n11131",
    "tags": [
      "numbers",
      "strings"
    ],
    "title": "Look-and-Say Sequence"
  },
  {
    "_id": "MFFuPFnjT8ihniKtL",
    "difficulty": 3.409090909090909,
    "language": "python3",
    "summary": "When a bug jumps to a height y, its position can be plotted as a quadratic function with x as the time, and y as the vertical distance traveled. For example, for a bug that jumps 9 cm up and is back on the ground after 6 seconds, its trajectory can be plotted as:\n\nbug jump quadratic plot\n\nCreate a function that, given the max height of a vertical jump in cm an",
    "tags": [
      "math"
    ],
    "title": "Parabolic Jumps"
  },
  {
    "_id": "qWrWPA8rcs6hpSp8H",
    "difficulty": 3.411764705882353,
    "language": "python3",
    "summary": "Create a function that returns the determinant of a given square matrix.\n\nExamples\ndeterminant([[3]]) ➞ 3\n\ndeterminant([[1, 0], [5, 4]]) ➞ 4\n\ndeterminant([[3, 0], [2, 2]]) ➞ 6\n\ndeterminant([[4, 8, 6], [2, 4, 3], [6, 2, 1]]) ➞ 0\n\nNotes\nAll inputs are square integer matrices.",
    "tags": [
      "math",
      "algorithms",
      "algebra",
      "arrays"
    ],
    "title": "Matrix Determinant"
  },
  {
    "_id": "LtwvpqeRY2gQcMQyy",
    "difficulty": 3.413793103448276,
    "language": "python3",
    "summary": "Write a function that takes in a string representation of an integer or decimal number and returns the number of significant figures in the number.\n\nSignificant figures are an important part of science because they provide an easy way to show the precision of a measurement at a glance. In general, the more significant figures a number has, the more precise the",
    "tags": [
      "numbers",
      "strings"
    ],
    "title": "Significant Figures"
  },
  {
    "_id": "WH8AfHodqyj4gSB8K",
    "difficulty": 3.4146341463414633,
    "language": "python3",
    "summary": "An authentic vowel skewer is a skewer with a delicious and juicy mix of consonants and vowels. However, the way they are made must be just right:\nSkewers must begin and end with a consonant.\nSkewers must alternate between consonants and vowels.\nThere must be an even spacing between each letter on the skewer, so that there is a consistent flavour throughout.\n\nC",
    "tags": [
      "strings",
      "algorithms",
      "validation",
      "loops"
    ],
    "title": "Vowel Skewers"
  },
  {
    "_id": "BHBXNfeMsA43d8Tys",
    "difficulty": 3.4166666666666665,
    "language": "python3",
    "summary": "As far as we currently know, approximations for the mathematical constant pi (π) in the history of mathematics started surfacing with Ancient Babylonians, who found its correct truncation up to 1 decimal place. During the 5th century, the Chinese mathematician Zu Chongzhi raised it to 7 decimal places and from the 18th century onwards the number of correct pi",
    "tags": [
      "algebra",
      "math",
      "loops"
    ],
    "title": "First n Digits of Pi"
  },
  {
    "_id": "5GW5Kb2RpGwhHax2W",
    "difficulty": 3.418032786885246,
    "language": "python3",
    "summary": "Create a function that takes a two-dimensional list as an argument and returns a one-dimensional list with the values of the original 2d list that are arranged by spiralling through it (starting from the top-left).\n\nExamples\nspiral_transposition([\n  [7, 2],\n  [5, 0]\n])\n\n➞ [7, 2, 0, 5]\n\nspiral_transposition([\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n])\n\n➞ [1, 2, 3",
    "tags": [
      "arrays",
      "loops",
      "math",
      "recursion"
    ],
    "title": "Spiral Transposition"
  },
  {
    "_id": "HdrqkdT4r9DeKPjCM",
    "difficulty": 3.4242424242424243,
    "language": "python3",
    "summary": "The centered polygonal numbers are a family of sequences of 2-dimensional figurate numbers, each formed by a central dot, surrounded by polygonal layers with a constant number of sides. Each side of a polygonal layer contains one dot more than a side in the previous layer.\n\n |\n| -\nCentered triangular numbers | Centered square numbers\n |\nCentered pentagonal num",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "Centered Polygonal Number"
  },
  {
    "_id": "PPz4PqTJ5mXXa4MrW",
    "difficulty": 3.4242424242424243,
    "language": "python3",
    "summary": "The Ulam sequence starts with:\n\nulam = [1, 2]\n\nThe next number in the sequence is the smallest positive number that is equal to the sum of 2 distinct numbers (that are already in the sequence) exactly one way. Trivially, this is 3, as there are only 2 numbers in the starting sequence.\n\nulam = [1, 2, 3]\n\nThe next number is 4, which is the sum of 3+1. 4 is also",
    "tags": [
      "loops",
      "numbers",
      "logic",
      "algebra"
    ],
    "title": "Ulam Sequence"
  },
  {
    "_id": "FgAsxMCaEzvKhnuAH",
    "difficulty": 3.425,
    "language": "python3",
    "summary": "Create a function that takes an array of strings of arbitrary dimensionality (], [, [], etc) and returns the deep_sum of every separate number in each string in the array.\n\nExamples\ndeep_sum([\"1\",  \"five\",  \"2wenty\",  \"thr33\"]) ➞ 36\n\ndeep_sum([[\"1X2\",  \"t3n\"], [\"1024\", \"5\", \"64\"]]) ➞ 1099\n\ndeep_sum([[[\"1\"], \"10v3\"],  [\"738h\"],  [[\"s0\"],  [\"1mu4ch3\"], \"-1s0\"]])",
    "tags": [
      "language_fundamentals",
      "objects",
      "arrays"
    ],
    "title": "Deep Arithmetic"
  },
  {
    "_id": "QAdcyGAKfGitdyYgp",
    "difficulty": 3.4285714285714284,
    "language": "python3",
    "summary": "A bacterial culture on day 1 has only one bacterium with mass 1. Every day, some number of bacteria will split (possibly zero or all). When a bacterium of mass m splits, it becomes two bacteria of mass m/2 each. Also, every night, the mass of every bacteria will increase by one.\n\nWrite a function that determines the minimum number of nights for the culture to",
    "tags": [
      "loops",
      "math",
      "logic"
    ],
    "title": "Bacterial Growth"
  },
  {
    "_id": "cXoBRe9RdDGeLNfaD",
    "difficulty": 3.4285714285714284,
    "language": "python3",
    "summary": "You will be given a simple string expression representing an addition or subtraction in 8-bit 2's complement arithmetic.  Write a function that returns the result in base 10 followed by a binary representation. If any of the values are outside the range of 8-bit 2's complement, return \"Overflow\".\n\nExamples\neight_bit(\"3 + 12\") ➞ (15, \"11 + 1100 = 1111\")\n\neight_",
    "tags": [
      "bit_operations",
      "numbers"
    ],
    "title": "8 Bit Arithmetic"
  },
  {
    "_id": "CzrTZKEdfHTvhRphg",
    "difficulty": 3.433333333333333,
    "language": "python3",
    "summary": "Create a function that takes a string representing a fraction, and return a string representing that input as a mixed number.\n\nMixed numbers are of the form 1 2/3 — note the space between the whole number portion and the fraction portion.\nResulting fractions should be fully reduced (see example #2).\nIf a result is a whole number with no fractional remainder, r",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "Fraction to Mixed Number"
  },
  {
    "_id": "uusYhAkGc9W2ufBwc",
    "difficulty": 3.433333333333333,
    "language": "python3",
    "summary": "When escaping a compound system, such as a moon orbiting a planet or a planet orbiting a sun, a rocket that leaves at escape velocity (ve1) for the first (orbiting) body, (e.g. Earth) will not travel to an infinite distance because it needs an even higher speed to escape gravity of the second body (e.g. the Sun). Near the Earth, the rocket's trajectory will ap",
    "tags": [
      "physics",
      "math",
      "strings"
    ],
    "title": "Escape Velocity II"
  },
  {
    "_id": "p43BqirGAPu7xxbhZ",
    "difficulty": 3.4358974358974357,
    "language": "python3",
    "summary": "You are a skilled diamondsmith whose business is getting better by the day. Eventually, you decided that you needed to scale to keep up with demand.\n\nBuild a diamond-cutting machine (i.e. write a function that takes in a positive integer representing the raw stone's carat).\nThe output would be the finished diamond and tag indicating its quality, arranged in a",
    "tags": [
      "arrays",
      "conditions"
    ],
    "title": "Build a Diamond Machine"
  },
  {
    "_id": "tfbKAYwHq2ot2FK3i",
    "difficulty": 3.4423076923076925,
    "language": "python3",
    "summary": "Let's define a non-repeating integer as one whose digits are all distinct. 97653 is non-repeating while 97252 is not (it has two 2's). Among the binary numbers, there are only two positive non-repeating integers: 1 and 10. Ternary (base 3) has ten: 1, 2, 10, 20, 12, 21, 102, 201, 120, 210.\n\nWrite a function that has as it's argument the base or radix and retur",
    "tags": [
      "algorithms",
      "math",
      "numbers"
    ],
    "title": "Non-Repeating Integers"
  },
  {
    "_id": "Fz92j7nQEkoRXhRE7",
    "difficulty": 3.4444444444444446,
    "language": "python3",
    "summary": "A frog wants to cross a river. Unfortunately, he can't jump across in a single leap. Luckily, there are n stones in the river.\n\nThe frog can jump from the near bank to stone 1 and from stone n to the far bank. He can also jump from stone to stone, forward and backward. However, on each stone, a number j is written and he must only jump exactly j stones backwar",
    "tags": [
      "algorithms",
      "arrays",
      "conditions",
      "loops"
    ],
    "title": "The Jumping Frog"
  },
  {
    "_id": "68nepPvgJyw2229vW",
    "difficulty": 3.4482758620689653,
    "language": "python3",
    "summary": "Given a list of elements, swap the elements of the list pairwise. If the list is of odd length, first swap pairwise until the last element, and then the last element must be swapped with the element in the list which has the highest ASCII representation score in the modified list (e.g. ASCII representation of \"Arun\" would be: 65 + 114 + 117 + 110 = 406).\n\nIf t",
    "tags": [
      "algorithms",
      "arrays",
      "data_structures",
      "language_fundamentals"
    ],
    "title": "Pairwise Swap"
  },
  {
    "_id": "EcAKCvatiTzZx5Wov",
    "difficulty": 3.4482758620689653,
    "language": "python3",
    "summary": "A resistor is a common electrical component found in every electronic circuit. Usually a resistor has a color-based code (as painted bands over it) to decipher through a table.\n\nColor | Digits | Magnitude | Tolerance | T.C.R.\n|---|---|---|---|---|---|\n| Black | 0 | 0 | - | -\n| Brown|  1| 1 | +/-1% | 100ppm/k\n| Red | 2 | 2 |+/-2% | 50ppm/k\n| Orange | 3 | 3 | -",
    "tags": [
      "conditions",
      "formatting"
    ],
    "title": "The Resistor Colors"
  },
  {
    "_id": "pGRAtBbwSMjpXNGnP",
    "difficulty": 3.4482758620689653,
    "language": "python3",
    "summary": "The function is given a list of words and a new alphabet (English letters in different order). Determine if the list of words is sorted lexicographically. The words consist of lower case letters.\n\nExamples\nis_sorted([\"hello\", \"edabitlot\"], \"hlabcdefgijkmnopqrstuvwxyz\") ➞ True\n\nis_sorted([\"word\", \"world\", \"row\"], \"worldabcefghijkmnpqstuvxyz\") ➞ False\n\nis_sorted",
    "tags": [
      "arrays",
      "conditions",
      "sorting",
      "strings",
      "validation"
    ],
    "title": "Sorted List of Words"
  },
  {
    "_id": "fa6nXmaD9iwHZXqTJ",
    "difficulty": 3.45,
    "language": "python3",
    "summary": "I admit, this challenge is somehow strange. The objective is to find out if a given list is True or False. Here are some True lists:\n\n[12, 40, 4, 6420, 20, 24, 400, 24]\n[12.3, 46, 4, 7383, 23, 27, 529, 27.6]\n[14, 80, 6, 12840, 40, 46, 1600, 48]\n\nAnd here some False lists:\n\n[18.1, 162, 9, 26091, 81, 90, 6561, 97]\n[14.5, 90, 18, 14445, 18, 51, 2025, 54]\n[19.2, 1",
    "tags": [
      "arrays",
      "numbers",
      "math",
      "validation"
    ],
    "title": "True or False Array?"
  },
  {
    "_id": "QXdpyJxh9iXT2LW2y",
    "difficulty": 3.4523809523809526,
    "language": "python3",
    "summary": "In mathematics, a semiprime is a natural number that is the product of two prime numbers. The two primes in the product may equal each other, so the semiprimes include the squares of prime numbers.\n\nCreate a function that takes a number n as an argument and returns two lists, one list with all the semiprimes < n and the other with all the semiprimes < n and th",
    "tags": [
      "numbers",
      "math"
    ],
    "title": "Semiprimes"
  },
  {
    "_id": "cPxexgGxmCMi4kas8",
    "difficulty": 3.4545454545454546,
    "language": "python3",
    "summary": "This is the first challenge of the \"Four Vectors\" collection. Four Vectors are vectors with four components that are used to describe relativistic physics. For details please refer to this wiki entry.\n\nIn this challenge, create a class FourVector with the following properties:\nIf called with a list of length 4 as a parameter, it uses the list entries as compon",
    "tags": [
      "physics",
      "math",
      "classes"
    ],
    "title": "Four Vectors Part 1: Basic Operations"
  },
  {
    "_id": "zqr6f8dRD84K8Lvzk",
    "difficulty": 3.4545454545454546,
    "language": "python3",
    "summary": "As stated on the On-Line Encyclopedia of Integer Sequences:\n\n> The hexagonal lattice is the familiar 2-dimensional lattice in which each point has 6 neighbors.\n\nA centered hexagonal number is a centered figurate number that represents a hexagon with a dot in the center and all other dots surrounding the center dot in a hexagonal lattice.\n\nAt the end of that we",
    "tags": [
      "numbers",
      "strings",
      "formatting"
    ],
    "title": "Centered Hexagonal Number"
  },
  {
    "_id": "LhAgbJ7nv3EDSLuYa",
    "difficulty": 3.456140350877193,
    "language": "python3",
    "summary": "The Golomb sequence is uniquely defined by the following rules:\n\nAll terms are positive integers.\nNo term is smaller than any previous term.\nThe nth term is equal to the total number of times that the integer n appears within the sequence.\n\nWrite a function that returns the first n terms of the Golomb sequence as a list.\n\nExamples\ngolomb(1) ➞ [1]\n\ngolomb(8) ➞",
    "tags": [
      "arrays",
      "math",
      "numbers",
      "algorithms"
    ],
    "title": "Golomb Sequence"
  },
  {
    "_id": "kBXHbwQZPiLmwjrMy",
    "difficulty": 3.465909090909091,
    "language": "python3",
    "summary": "Pig latin has two very simple rules:\n\nIf a word starts with a consonant move the first letter(s) of the word, till you reach a vowel, to the end of the word and add \"ay\" to the end.\n   have ➞ avehay\n   cram ➞ amcray\n   take ➞ aketay\n   cat ➞ atcay\n   shrimp ➞ impshray\n   trebuchet ➞ ebuchettray\nIf a word starts with a vowel add \"yay\" to the end of the word.",
    "tags": [
      "algorithms",
      "loops",
      "logic",
      "strings"
    ],
    "title": "English to Pig Latin Translator"
  },
  {
    "_id": "5pYkwf948KBQ3pNwz",
    "difficulty": 3.466666666666667,
    "language": "python3",
    "summary": "This challenge requires you to find the most common words. There will be two leyword arguments passed in text and n. Return the most common words in the form of a dictionary.\n\ntext would be the variable containing all the words, while n is a number that means return the top n most common words from text. In case n exceeds the total number of unique words, retu",
    "tags": [
      "algorithms",
      "objects"
    ],
    "title": "Most Common Words"
  },
  {
    "_id": "FWh2fGH7aRWALMf3o",
    "difficulty": 3.466666666666667,
    "language": "python3",
    "summary": "Create a function that takes a string (without spaces) and a word list, cleaves the string into words based on the list, and returns the correctly spaced version of the string (a sentence). If a section of the string is encountered that can't be found on the word list, return \"Cleaving stalled: Word not found\".\n\nExamples\nword_list = [\"about\", \"be\", \"hell\", \"if",
    "tags": [
      "strings",
      "validation"
    ],
    "title": "String Cleaver"
  },
  {
    "_id": "6Ran7nuFijxkXD95o",
    "difficulty": 3.46875,
    "language": "python3",
    "summary": "Given a sentence containing few instances of \"Ctrl + C\" and \"Ctrl + V\", return the sentence after those keyboard shortcuts have been applied! Note that:\n\nIn this case, \"Ctrl + C\" will copy all text behind it.\nIn this case, \"Ctrl + V\" will do nothing if there is no \"Ctrl + C\" before it.\nA \"Ctrl + C\" which follows another \"Ctrl + C\" will overwrite what it copies",
    "tags": [
      "strings",
      "formatting"
    ],
    "title": "Ctrl + C, Ctrl + V"
  },
  {
    "_id": "tftN3EdkSPfXxzWpi",
    "difficulty": 3.4705882352941178,
    "language": "python3",
    "summary": "Create a function that returns the sentence that contains the word at index n. Remember to include the full stop at the end.\n\nWorked Example\ntxt = \"I have a dog. I have a log. There is no stopping me now.\"\n\nsentence_searcher(txt, 7) ➞ \"I have a log.\"\nThe word at index 7 is \"log\".\nThe full sentence that contains the word at index 7 is \"I have a log.\"\nReturn the",
    "tags": [
      "loops",
      "strings"
    ],
    "title": "Sentence Searcher II"
  },
  {
    "_id": "L2CW7yoxZK3RWB2Kc",
    "difficulty": 3.4705882352941178,
    "language": "python3",
    "summary": "In Nico Cipher, encoding is done by creating a numeric key and assigning each letter position of the message with the provided key.\n\nCreate a function that takes two arguments, key and message, and returns the encoded message.\n\nThere are some variations on the rules of encipherment. One version of the cipher rules are outlined below:\n\nmessage = \"mubashirhassan",
    "tags": [
      "cryptography",
      "logic",
      "strings",
      "algorithms"
    ],
    "title": "Nico Cipher"
  },
  {
    "_id": "8jYLBswq9jnttZeox",
    "difficulty": 3.473684210526316,
    "language": "python3",
    "summary": "Langton's ant is a two-dimensional Turing machine invented in the late 1980s. The ant starts out on a grid of black and white cells and follows a simple set of rules that has complex emergent behavior.\n\nLangton's ant\n\nThe ant can travel in any of the four cardinal directions on each step. The ant moves according to the following rules:\n\nAt a white square (1),",
    "tags": [
      "games",
      "algorithms",
      "arrays"
    ],
    "title": "Langton's Ant"
  },
  {
    "_id": "JHubqEB54KxbWP3sR",
    "difficulty": 3.4814814814814814,
    "language": "python3",
    "summary": "Given the formula for a straight line y = ax + b and the x, y coordinates of a point, find the distance between that point and the line. Round the result to two decimal points.\n\nExamples\ndist(\"y=(-3/4)x-5/4\", 5, 2) ➞ 5.6\n\ndist(\"y=(5+1/3)x-2.3\", 1, 4) ➞ 0.18\n\ndist(\"y=2.2x-(3+1/5)\", 3, -2) ➞ 2.23\n\nNotes\nCheck the Resources.",
    "tags": [
      "math"
    ],
    "title": "Distance between Point and a Line"
  },
  {
    "_id": "FGzWE8vNyxtTrw3Qg",
    "difficulty": 3.4814814814814814,
    "language": "python3",
    "summary": "The function is given a rectangular matrix consisting of zeros and ones. Count the number of different regions and return the result. A separate region is a collection of ones interconnected horizontally and vertically. A region can have holes in it.\n\nExamples\nnum_regions([\n  [1, 1, 1, 1, 0],\n  [1, 1, 0, 1, 0],\n  [1, 1, 0, 0, 0],\n  [0, 0, 0, 0, 0]\n]) ➞ 1\n\nnum_",
    "tags": [
      "algorithms",
      "arrays",
      "conditions",
      "loops"
    ],
    "title": "Number of Separate Regions"
  },
  {
    "_id": "v3iQ4XiW385SrkWKo",
    "difficulty": 3.4823529411764707,
    "language": "python3",
    "summary": "When two blocks of the same \"type\" are adjacent to each other, the entire contiguous block disappears (pops off). If this occurs, this can allow previously separated blocks to be in contact with each other, setting off a chain reaction. This will continue until each block is surrounded by a different block.\n\nHere's a demonstration:\n[\"A\", \"B\", \"C\", \"C\", \"B\", \"D",
    "tags": [
      "games",
      "arrays",
      "regex",
      "loops"
    ],
    "title": "Popping Blocks"
  },
  {
    "_id": "TrP8spqHxMiLWfsg8",
    "difficulty": 3.4871794871794872,
    "language": "python3",
    "summary": "Binary Search Tree is a node-based binary tree data structure which has the following properties:\n\nThe left subtree of a node contains only nodes with keys lesser than the node's key.\nThe right subtree of a node contains only nodes with keys greater than the node’s key.\nThe left and right subtree each must also be a binary search tree.\n\nCreate a class that con",
    "tags": [
      "algorithms",
      "data_structures",
      "classes",
      "interview"
    ],
    "title": "Binary Search Tree"
  },
  {
    "_id": "66xK46dhKFCe5REDg",
    "difficulty": 3.5,
    "language": "python3",
    "summary": "Given a list containing three strings, representing the rows of an O's and X's board from top to bottom, return the row and column position of the winning move for X's. Return False if the game cannot be won.\n\nExamples\nxando(board = [\" | | \", \" |X| \", \"X| | \"]) ➞  [1, 3]\n\nBoard becomes:\n|   |\n|X |\nX |   |\n\nxando(board = [\"X|X|O\", \"O|X| \", \"X|O| \"]) ➞ [3, 3]\n\nB",
    "tags": [
      "games",
      "arrays"
    ],
    "title": "O's and X's"
  },
  {
    "_id": "Gmt2QbusvNdzfiFWu",
    "difficulty": 3.5,
    "language": "python3",
    "summary": "Create a function that takes a list of positive integers and returns a string as:\n\np1, sum of all ij of the list for which p1 is a prime factor.\np2, sum of all ij of the list for which p2 is a prime factor, ... .\npn, sum of all ij of the list for which pn is a prime factor.\n\nExamples\nsum_prime([12, 15]) ➞ \"(2 12)(3 27)(5 15)\"\n2 is a prime factor of 12 results",
    "tags": [
      "arrays",
      "numbers",
      "logic",
      "math"
    ],
    "title": "Prime Factors with Sum"
  },
  {
    "_id": "RuwpKTa8grNSQkqX5",
    "difficulty": 3.5,
    "language": "python3",
    "summary": "Performing division on a fraction often results in an infinitely repeating decimal.\n\n1/3=.3333333...  1/7=.142857142857...\nCreate a function that takes a decimal in string form with the repeating part in parentheses and returns the equivalent fraction in string form and in lowest terms.\n\nExamples\nfractions(\"0.(6)\") ➞ \"2/3\"\n\nfractions(\"1.(1)\") ➞ \"10/9\"\n\nfractio",
    "tags": [
      "math",
      "strings",
      "numbers"
    ],
    "title": "Repeating Decimals to Fractions"
  },
  {
    "_id": "maj2uLxrdXmBN7QDa",
    "difficulty": 3.5,
    "language": "python3",
    "summary": "Your chess teacher wants to know if a bishop can reach a certain spot on the board in the given amount of moves.\n\nGiven a starting square start, ending square end and the maximum number of moves allowed n. Return True if the ending square can be reached from the starting square within the given amount of moves. Keep in mind the chessboard goes from a1 to h8 (8",
    "tags": [
      "algorithms",
      "math",
      "games",
      "validation"
    ],
    "title": "Bishop Challenge"
  },
  {
    "_id": "xsBX7vABGoL9m8Z4e",
    "difficulty": 3.5,
    "language": "python3",
    "summary": "Create a function that will increment every time format found in a string (for example 00:42:33,120) by a specific time (for example 00:00:30,550). The result between the examples is 00:43:03,670.\n\nRules\nThe function must take 2 arguments: a string from where to search time format and a string that respects the format hours:minutes:seconds,milliseconds.\nThe fu",
    "tags": [
      "algorithms",
      "regex",
      "strings",
      "formatting"
    ],
    "title": "Synchronize the Subtitles"
  },
  {
    "_id": "yFqZ8YNTPumtuiNQr",
    "difficulty": 3.5,
    "language": "python3",
    "summary": "You're creating a conlang called Eadibitan. But you're too lazy to come up with your own phonology, grammar and orthography. So you've decided to automatize the proccess.\n\nWrite a function that translates an English word into Eadibitan.\n\nEnglish syllables should be analysed according to the following rules:\nSyllables will follow the pattern (C)(C)V(V(V))(C), w",
    "tags": [
      "strings",
      "formatting",
      "cryptography"
    ],
    "title": "Lazy Conlanging"
  },
  {
    "_id": "zbqRGhB3sTDPgySiv",
    "difficulty": 3.5,
    "language": "python3",
    "summary": "Modify the inefficient code in the Code tab so it can pass the tests.\n\nExamples\nmod(1, 1) ➞ 1\n\nmod(5, 5) ➞ 34\n\nmod(13, 27 ) ➞ 522956314\n\nmod(8000, 30) ➞ 9157958657951075573395300940314\n\nNotes\nThe variables will be natural numbers.\nIf necessary, there is a hint in the Tests tab.",
    "tags": [
      "math",
      "bugs"
    ],
    "title": "Modular Arithmetic (Part #2)"
  },
  {
    "_id": "gLjL4aLT2ZwbMXafq",
    "difficulty": 3.5,
    "language": "python3",
    "summary": "Find all swap pairs between two lists such that the sums of lists after the swap are equal. The input is two lists of integers, not necessarily of the same length. The output is a set of tuples {(numfroml1, numfroml2), ..}. If there is no pair found return an empty set.\n\nExamples\nfair_swap([1, 1], [2, 2]) ➞ {(1, 2)}\n\nfair_swap([1, 2], [2, 3]) ➞ {(1, 2), (2, 3)",
    "tags": [
      "algorithms",
      "conditions",
      "loops",
      "numbers"
    ],
    "title": "Fair Swap between Two Lists"
  },
  {
    "_id": "v2k5hKnb4d5srYFvE",
    "difficulty": 3.5,
    "language": "python3",
    "summary": "The function is given a string containing digits from 2 to 9. Return a set of all possible letter combinations that could represent the digit-string.\n\nDigits to Letters Mapping\nd = { \"2\": \"abc\", \"3\": \"def\", \"4\": \"ghi\", \"5\": \"jkl\", \"6\": \"mno\", \"7\": \"pqrs\", \"8\": \"tuv\", \"9\": \"wxyz\" }\n\nExamples\nletters_combinations(\"23\") ➞ { \"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd",
    "tags": [
      "conditions",
      "data_structures",
      "strings"
    ],
    "title": "Letter Combinations of Digits from the Phone Pad"
  },
  {
    "_id": "Wk9xXZiqqH8MrewgA",
    "difficulty": 3.5,
    "language": "python3",
    "summary": "Write a function that converts a bitmap image of a digital clock (represented as a string of the form: hh:mm) into its representational bit string. A bitmap image is a by-product of parsing bits (0's and 1's) from a canvas which is basically an image in black on a white background, where 0 represents the white background and 1 represents the black pixel (it's",
    "tags": [
      "strings",
      "validation",
      "regex"
    ],
    "title": "Bitmap Image Conversion"
  },
  {
    "_id": "smipscEToiyJRJFiJ",
    "difficulty": 3.5,
    "language": "python3",
    "summary": "A string is said to be a \"special\" string if either of two conditions are met:\n\nAll of the characters are the same (e.g. \"aaa\").\nAll characters, except the middle one, are the (e.g. \"aadaa\").\n\nA special substring is any substring of a string that meets one of those criteria. Given a string, determine how many special substrings can be formed from it.\n\nGiven th",
    "tags": [
      "strings",
      "data_structures"
    ],
    "title": "Special String"
  },
  {
    "_id": "qosZ7W2qppFo7MhNB",
    "difficulty": 3.515151515151515,
    "language": "python3",
    "summary": "A hexagonal grid is a commonly used game board design based on hexagonal tiling. In the following grid, the two marked locations have a minimum distance of 6 because at least 6 steps are needed to reach the second location starting from the first one.\n\nWrite a function that takes a hexagonal grid with two marked locations as input and returns their distance.",
    "tags": [
      "games",
      "logic",
      "arrays"
    ],
    "title": "Hexagonal Grid: Distance"
  },
  {
    "_id": "DpFmDxcyesPfPoFMn",
    "difficulty": 3.5185185185185186,
    "language": "python3",
    "summary": "The International Standard Book Number (ISBN) is a unique identifying number given to each published book. ISBNs assigned after January 2007 are 13 digits long (ISBN-13), however books with 10-digit ISBNs are still in wide use.\n\nAn ISBN-10 is verified this way:\n\nisbn10 = \"0330301624\"\n\nLine up the digits with the numbers 10 to 1:\n\n| | | | | | | | | | |\n---|---|",
    "tags": [
      "algorithms",
      "validation",
      "loops"
    ],
    "title": "International Standard Book Numbers"
  },
  {
    "_id": "xFQrHSHYAzw9hYECy",
    "difficulty": 3.5185185185185186,
    "language": "python3",
    "summary": "Someone is typing on the sticky keyboard. Occasionally a key gets stuck and more than intended number of characters of a particular letter is being added into the string. The function input contains original and typed strings. Determine if the typed string has been made from the original. Return True if it is and False if the typed string cannot have been made",
    "tags": [
      "conditions",
      "logic",
      "strings",
      "validation"
    ],
    "title": "Sticky Keys Typing"
  },
  {
    "_id": "yssd27bpgZBAw3oJ6",
    "difficulty": 3.5238095238095237,
    "language": "python3",
    "summary": "Create a function that takes the number of people u in a room and calculates the probability that any two people in the room share the same birthday. Round the result to two decimal places.\n\nExamples\nprobability(7) ➞ 0.06\n\nprobability(15) ➞ 0.25\n\nprobability(12) ➞ 0.17\n\nNotes\nu < 40\n1 year = 365 days not 366",
    "tags": [
      "math",
      "language_fundamentals",
      "logic"
    ],
    "title": "Calculating Probability"
  },
  {
    "_id": "JihgdpMYQWpS9SLZa",
    "difficulty": 3.5238095238095237,
    "language": "python3",
    "summary": "Your goal is to know the score of the hand, either by getting three cards of the same rank (like 8s or Jacks) or the same suit (e.g. hearts(H) or spades(S)). The value of your hand is calculated by adding up the total of your cards in any one suit.\n\nRegular cards are worth their number, face cards are worth 10, and Aces are worth 11, but remember, only one of",
    "tags": [
      "conditions",
      "validation",
      "strings",
      "games"
    ],
    "title": "Card Game 31 Score Validator"
  },
  {
    "_id": "y9q4ZbaThohALNqqJ",
    "difficulty": 3.526315789473684,
    "language": "python3",
    "summary": "The function is given a non-negative integer n. Determine if there exist two non-negative integers a and b such that a2 + b2 == n, return True / False.\n\nExamples\nsquares_sum(0) ➞ True\n0^2 + 0^2 == 0\n\nsquares_sum(1) ➞ True\n0^2 + 1^2 == 1\n\nsquares_sum(2) ➞ True\n1^2 + 1^2 == 2\n\nsquares_sum(3) ➞ False\nChecking 0, 1 we can’t make the sum of squares equal to 3.\n\nsqu",
    "tags": [
      "algorithms",
      "math",
      "numbers",
      "validation"
    ],
    "title": "Sum of Two Square Numbers"
  },
  {
    "_id": "yKxKe74BBRDbRRPHx",
    "difficulty": 3.5277777777777777,
    "language": "python3",
    "summary": "Most people don't know about magic methods, which is sad, because they are incredibly powerful and are used in built-in functions such as int(), print(), repr(), and even iteration and indexing.\n\nUse magic methods (don't forget init) to create a Number class.\n\nExamples\nint     # Used in the \"int\" method\nfloat   # Used in the \"float\" method\nstr     # Used in th",
    "tags": [
      "classes",
      "objects"
    ],
    "title": "Magic Methods in Classes"
  },
  {
    "_id": "W8rasxGkqr6JHEdiv",
    "difficulty": 3.5294117647058822,
    "language": "python3",
    "summary": "Many British visitors to edabit will be familiar with Countdown, a quiz program that ran for many years on UK television. One of its challenges required contestants to come up with an expression (using some randomly generated numbers) to meet or get as close as possible to a chosen target number.\n\nThis challenge is a simplified version of that. Write a functio",
    "tags": [
      "algorithms",
      "data_structures",
      "math"
    ],
    "title": "Simplified Countdown"
  },
  {
    "_id": "wqBnr3CDYByA5GLxo",
    "difficulty": 3.5344827586206895,
    "language": "python3",
    "summary": "Write a function that takes in a string and returns all possible combinations. Return the final result in alphabetical order.\n\nExamples\nunravel(\"a[b|c]\") ➞ [\"ab\", \"ac\"]\n\nunravel(\"a[b|c]de[f|g]\") ➞ [\"abdef\", \"acdef\", \"abdeg\", \"acdeg\"]\n\nunravel(\"a[b]c[d]\") ➞ [\"abcd\"]\n\nunravel(\"a[b|c|d|e]f\") ➞ [\"abf\", \"acf\", \"adf\", \"aef\"]\n\nunravel(\"apple [pear|grape]\") ➞ [\"apple",
    "tags": [
      "logic",
      "strings",
      "regex"
    ],
    "title": "Unravel all the Possibilities"
  },
  {
    "_id": "pN7iSYmghjdnHiMvT",
    "difficulty": 3.5348837209302326,
    "language": "python3",
    "summary": "In this challenge, you have to build a class that will store and manipulate the data of a simplified clone of Battleship, the popular strategy game.\n\nThe game is played on a 5x5 square board, with rows indexed by uppercase letters from A to E (from top to bottom), and columns indexed by numbers from 1 to 5 (from left to right).\n\nRules of the Game\nThere are two",
    "tags": [
      "classes",
      "arrays",
      "data_structures",
      "games"
    ],
    "title": "Do Classes Dream of Electric Ship?"
  },
  {
    "_id": "38SP9cjt6BfRbLowA",
    "difficulty": 3.5384615384615383,
    "language": "python3",
    "summary": "In this challenge, you'll write a function that calculates the double dot product of a pair of dyadics. What's a dyadic? And what's the double dot product?\n\nFirst, let's talk about (Euclidean) vectors. A vector is a geometric object. Its existence doesn't depend on the choice of the coordinate system, or indeed on choosing a coordinate system at all!\n\nBut coor",
    "tags": [
      "algebra",
      "arrays",
      "geometry",
      "math"
    ],
    "title": "Double Dot Product"
  },
  {
    "_id": "E8c4ZMwme85YX3wM7",
    "difficulty": 3.5384615384615383,
    "language": "python3",
    "summary": "Starting from zero, the n'th term a(n) is the previous term minus n (i.e. a(n) = a(n-1) - n) but only if this is both positive and has not been previousely generated. If the conditions don't hold then a(n) = a(n-1) + n.\n\nCreate a function that takes a number n as an argument and returns a list with the first n numbers in the Recaman's Sequence, as well as a li",
    "tags": [
      "numbers",
      "math"
    ],
    "title": "Recaman's Sequence"
  },
  {
    "_id": "oFwoAA62gRvX5agEN",
    "difficulty": 3.5384615384615383,
    "language": "python3",
    "summary": "Given a knapsack with a certain weight capacity, fill it with loot from a list of items to achieve the highest value possible.\n\nThe function takes two parameters: an integer specifying the maximum weight the knapsack can hold, and a list of dictionary items to choose from. Each item has a name, a weight, and a value. The total weight of all chosen items cannot",
    "tags": [
      "algorithms",
      "recursion",
      "objects"
    ],
    "title": "A Knapsack"
  },
  {
    "_id": "mm2fm6ynbR7HQQm9z",
    "difficulty": 3.5416666666666665,
    "language": "python3",
    "summary": "Knights can jump across the board.\n\nKnights in Chess\n\nCreate a function that takes a square where a knight jumps from as a string and returns all the possible squares the knight can land on as a string. Ignore capturing and further Chess rules. Be aware of the sides of the board. Knights don't go over the edge, obviously.\n\nExamples\nknights_jump(\"F4\") ➞ \"E2,G2,",
    "tags": [
      "algorithms",
      "arrays",
      "logic",
      "games"
    ],
    "title": "Knights Jump"
  },
  {
    "_id": "XAMKeMw7imaB3zo67",
    "difficulty": 3.5454545454545454,
    "language": "python3",
    "summary": "A grid of letters may contain a word hidden somewhere within it. The letters of the word may be traced from the starting letter by moving a single letter at a time, up, down, left or right. For example, suppose we are looking for the word BISCUIT in this grid:\n\n[\n  [\"B\",\"I\",\"T\",\"R\"],\n  [\"I\",\"U\",\"A\",\"S\"],\n  [\"S\",\"C\",\"V\",\"W\"],\n  [\"D\",\"O\",\"N\",\"E\"]\n]\nThe word star",
    "tags": [
      "algorithms",
      "arrays",
      "recursion"
    ],
    "title": "Trace the Path of the Word"
  },
  {
    "_id": "wFtiFC9FCBPyh6eew",
    "difficulty": 3.5454545454545454,
    "language": "python3",
    "summary": "Create a function that determines the number of partitions of a natural number.\n\nA partition of a number n is an unordered sum of one or more numbers which totals n.\nFor example, the partitions of the number 4 are:\n\n1 + 1 + 1 + 1 = 4\n1 + 1 + 2 = 4\n1 + 3 = 4\n2 + 2 = 4\n4 = 4\n\nSince partitions are unordered, the sums 1 + 1 + 2 = 1 + 2 + 1 = 2 + 1 + 1 = 4 are cons",
    "tags": [
      "math",
      "logic",
      "algorithms"
    ],
    "title": "Partitions of a Natural Number"
  },
  {
    "_id": "LanWAvTtQetP5xyDu",
    "difficulty": 3.547169811320755,
    "language": "python3",
    "summary": "Given a list of coins, father needs to distibute them amongst his three children. Write a function to return if the coins can be distributed so that each recieve equal value of money from father. If it can be distributed return True otherwise return False.\n\n[1, 2, 3, 2, 2, 2, 3] ➞ True\n\nAmount to be distributed to each child = (1+2+3+2+4+3)/3 => 15/3 => 5\nPoss",
    "tags": [
      "loops",
      "arrays",
      "logic",
      "validation"
    ],
    "title": "Coin Trouble"
  },
  {
    "_id": "ENxiMBnKzf5HQgin2",
    "difficulty": 3.55,
    "language": "python3",
    "summary": "Create a function that returns the nth row of Pascal's triangle:\n\nPascals triangle\n\nExamples\npascal_row(0) ➞ [1]\n\npascal_row(1) ➞ [1, 1]\n\npascal_row(5) ➞ [1, 5, 10, 10, 5, 1]\n\npascal_row(10) ➞ [1, 10, 45, 120, 210, 252, 210, 120, 45, 10, 1]\n\nNotes\nInput will include large numbers (the formula n choose k, or n!/(k!*(n-k)!) won't do).",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "Pascal's Triangle Rows"
  },
  {
    "_id": "vjkRfBeJtmisqmY99",
    "difficulty": 3.55,
    "language": "python3",
    "summary": "You are given a list of 9 7-letter words.  You are also given the\nmiddle letter of one of the 6 of them which fit together in a\nsort of star pattern as follows:\n\nWord 1 fits diagonally downwards from left to right. Its 1st letter is\nthe last letter of word 5; 3rd letter the 5th of word 3;last letter the\nlast letter of word 4.\n\nWord 2 fits diagonally downwards",
    "tags": [
      "algorithms",
      "loops",
      "strings"
    ],
    "title": "Fit the Words Together"
  },
  {
    "_id": "cg5p7B5AKh9b7mupc",
    "difficulty": 3.55,
    "language": "python3",
    "summary": "The function is given two strings s1 and s2. Determine if one of the permutations of characters of s1 is a substring of s2, return True / False.\n\nExamples\ncheck_inclusion(\"ab\", \"edabitbooo\") ➞ True\n\"ab\" is in s2.\n\ncheck_inclusion(\"ab\", \"edaoboat\") ➞ False\nneither \"ab\" or \"ba\" is in s2.\n\ncheck_inclusion(\"adc\", \"dcda\") ➞ True\n\"cda\" is a permutation of \"adc\" and",
    "tags": [
      "algorithms",
      "conditions",
      "loops",
      "strings"
    ],
    "title": "Inclusion of a Shuffled String Into another String"
  },
  {
    "_id": "uxLZMo6PBXJk7rmdC",
    "difficulty": 3.5531914893617023,
    "language": "python3",
    "summary": "Road systems can be imagined as a graph of intersections connected by lines. The advantage of this is it makes it easier to find the shortest path between any two intersections.\n\nTask\nWrite a function that takes as arguments:\nA string representing JSON graph of the road system\nThe starting intersection (node)\nThe ending intersection (node)\n\nAnd returns a dicti",
    "tags": [
      "algorithms",
      "data_structures"
    ],
    "title": "Road Navigation"
  },
  {
    "_id": "PzyssSgqopkBjzTY2",
    "difficulty": 3.5588235294117645,
    "language": "python3",
    "summary": "A maze can be represented by a 2D matrix, where 0s represent walkeable areas, and 1s represent walls. You start on the upper left corner and the exit is on the most lower right cell.\n\nCreate a function that returns true if you can walk from one end of the maze to the other. You can only move up, down, left and right. You cannot move diagonally.\n\nExamples\ncan_e",
    "tags": [
      "arrays",
      "functional_programming",
      "higher_order_functions",
      "games"
    ],
    "title": "Can You Exit the Maze?"
  },
  {
    "_id": "3dECspHz4fD7ijhky",
    "difficulty": 3.5652173913043477,
    "language": "python3",
    "summary": "Create a function that takes a list of integers and returns the range of consecutive numbers separated by dash a - between starting and ending numbers.\n\nSeparate different ranges by , commas.\nA range of numbers will be considered if three or more consecutive numbers are found in the list (see example #1).\n\nExamples\nnumbers_range([-6, -3, -2, -1, 0, 1, 7, 8, 9,",
    "tags": [
      "strings",
      "numbers"
    ],
    "title": "Range of Numbers"
  },
  {
    "_id": "t78eBofspi4nBCY4E",
    "difficulty": 3.566666666666667,
    "language": "python3",
    "summary": "Create a function that allows you to convert from a positive base 10 integer to any other base from 2 to 26, and also does the reverse, converts from base 2 to 26 back to base 10. The digits in the new base will be the lower case letters a-z with a=0 and z=25. If the number is out of range for the base specified, return the error message shown in the examples.",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "Number Base Converter"
  },
  {
    "_id": "MWAvDdT7rJczZuPMj",
    "difficulty": 3.5714285714285716,
    "language": "python3",
    "summary": "You are presented with a rectangular grid of capital letters. Within this grid a target word occurs a number of times. The word may be positioned horizontally left to right, right to left; vertically down to up or up to down and diagonally left to right downwards, right to left downwards, right to left upwards or left to right upwards.\n\nWrite a function which",
    "tags": [
      "arrays",
      "algorithms"
    ],
    "title": "Find the Word"
  },
  {
    "_id": "dFosbGy8sFFCEx2Ne",
    "difficulty": 3.5714285714285716,
    "language": "python3",
    "summary": "R, a programming language used for Statistics and Data Analysis, has the function rank, which returns the rank for each value in a vector.\n\nFor example:\n\nmy_list = [1, 3, 3, 9, 8]\nRanked would be: [0, 1.5, 1.5, 4, 3]\n\nWhen two or more values have the same rank, they are assigned the mean of their rankings. Here, the two 3s have ranks 1 and 2, so both are assig",
    "tags": [
      "sorting",
      "arrays"
    ],
    "title": "Sorting in R: Rank (Part II)"
  },
  {
    "_id": "wJnPYPoS8TaHQDbM3",
    "difficulty": 3.5714285714285716,
    "language": "python3",
    "summary": "Las Vegas style dice have 6 sides numbered 1 to 6. When rolling 2 dice, a six is 5 times more likely than a two because a six can be rolled 5 different ways (1 + 5, 5 + 1, 2 + 4, 4 + 2, 3 + 3), while a two can only be rolled 1 way (1 + 1).\n\nCreate a function that accepts two arguments:the number of dice rolled, and the outcome of the roll. The function returns",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "Roll the Dice"
  },
  {
    "_id": "rsAGjGQ43qpEGschi",
    "difficulty": 3.576923076923077,
    "language": "python3",
    "summary": "Create a function that finds a root of a polynomial curve. Do this using the Newton-Raphson method.\n\nYour input will be a list of coefficients for a 3rd order polynomial: c(0)x^3 + c(1)x^2 + c(2)*x + c(3)\nRound your answer to three decimal places (nearest 0.001). Choose x = 0.0 as an initial guess. Twenty iterations of the algorithm are sufficient for accuracy",
    "tags": [
      "algorithms",
      "arrays",
      "math"
    ],
    "title": "Newton-Raphson method"
  },
  {
    "_id": "JQgfPmxmxuAHHcNwp",
    "difficulty": 3.5789473684210527,
    "language": "python3",
    "summary": "Given a list of numbers create a solution to check if this list could become non-decreasing by modifying at most 1 element; return True or False as the result of the evaluation. A list is non-decreasing if each element (except the last one) is less or equal to the next one.\n\nExamples\nnon_decreasing([4, 2, 3]) ➞ True\n\nnon_decreasing([4, 2, 1]) ➞ False\n\nnon_decr",
    "tags": [
      "arrays",
      "conditions",
      "loops",
      "validation"
    ],
    "title": "Non-Decreasing List"
  },
  {
    "_id": "vq3x6QP77d7Qwe8be",
    "difficulty": 3.5789473684210527,
    "language": "python3",
    "summary": "Create a function that takes an array of numbers, and returns the size of the biggest square patch of odd numbers. See examples for a clearer picture.\n\nExamples\noddsquarepatch([\n  [1, 2, 4, 9],\n  [4, 5, 5, 7],\n  [3, 6, 1, 7]\n]) ➞ 2\n\nThe 2x2 square at the lower right\n([5, 7] on the 2nd row, [1, 7] on the third).\n\noddsquarepatch([[1, 2, 4, 9]]) ➞ 1\n\nAn array wit",
    "tags": [
      "arrays",
      "validation",
      "loops"
    ],
    "title": "Odd Square Patch"
  },
  {
    "_id": "XzT5P3rQ47z3B8NC8",
    "difficulty": 3.5789473684210527,
    "language": "python3",
    "summary": "In Condi Cipher, encoding is done by shifting a string of messages in correspondence with a given key in the plaintext.\n\nCreate a function that takes three arguments, key, shift and message, and returns the encoded message.\n\nThere are some variations on the rules of encipherment. One version of the cipher rules are outlined below:\n\nmessage = \"on.,\"\nshift = 10",
    "tags": [
      "cryptography",
      "algorithms",
      "strings",
      "logic"
    ],
    "title": "Condi Cipher"
  },
  {
    "_id": "Sws7TmBqGJZfReepJ",
    "difficulty": 3.5789473684210527,
    "language": "python3",
    "summary": "Given two strings, that may or may not be of the same length, determine the minimum number of character deletions required to make an anagram. Any characters can be deleted from either of the strings.\n\nExamples\nmake_anagram(\"cde\", \"abc\") ➞ 4\nRemove d and e from cde to get c.\nRemove a and b from abc to get c.\nIt takes 4 deletions to make both strings anagrams.",
    "tags": [
      "formatting",
      "strings"
    ],
    "title": "Make Anagram"
  },
  {
    "_id": "qYrTDRY7AN2RHxvXg",
    "difficulty": 3.5806451612903225,
    "language": "python3",
    "summary": "Consider a right triangle. Its area and hypotenuse are known.\n\nCreate a function that returns the two missing sides. The first input is the area and the second input is the hypotenuse. Return your answer as a list (the shorter side first). If there is no such right triangle, return \"Does not exist\".\n\nExamples\nf(3, 6) ➞ [1.015, 5.914]\n\nf(30, 12) ➞ [5.675, 10.57",
    "tags": [
      "math",
      "geometry"
    ],
    "title": "Finding the Missing Sides of a Right Triangle"
  },
  {
    "_id": "GTnW4bQAZQ38oHuyi",
    "difficulty": 3.5833333333333335,
    "language": "python3",
    "summary": "Write a function that returns the smallest integer in a list with its corresponding index and its parity. Although these tasks can be equivocally achievable with the use of some built-in and list functions, the purpose and intent of this challenge is for you to solve it recursively.\n\nOutput Structure:\n{\"@index \" + indexofsmallest: smallest_integer, \"parity\": \"",
    "tags": [
      "recursion",
      "arrays"
    ],
    "title": "Recursion: Parity of the Smallest Integer"
  },
  {
    "_id": "uE5YuLZvpJu9TRnax",
    "difficulty": 3.5833333333333335,
    "language": "python3",
    "summary": "Create a function that takes a mathematical expression in prefix notation as a string and evaluates the expression.\n\nExamples\nprefix(\"+ 5 4\") ➞  9\n\nprefix(\"* 12 2\") ➞  24\n\nprefix(\"+ -10 10\") ➞  0\n\nNotes\nThe mathematical expression is valid.\nCheck the Resources.\nUse // for division.",
    "tags": [
      "data_structures",
      "arrays",
      "language_fundamentals"
    ],
    "title": "Prefix Notation Evaluation"
  },
  {
    "_id": "qJcbCe2mGotP9svkg",
    "difficulty": 3.5833333333333335,
    "language": "python3",
    "summary": "Create a function that takes a list and returns a string.\n0 Repeat the actual decrypted value (using like this : 014 to repeat 14 times).\n  Warning: When you start a repeat you can't stop it to add other numbers.\n1, 2, 3, 4 = g, o, l, e\n5 Corresponding to up case of letter before this.\n6 Add a point to the end.\n7 Change case of the first letter.\n8 Reverse the",
    "tags": [
      "data_structures",
      "algorithms"
    ],
    "title": "Number to Google"
  },
  {
    "_id": "m8cikaKtFFsCZgsbL",
    "difficulty": 3.5853658536585367,
    "language": "python3",
    "summary": "Given a set of 3 jugs of water that have capacities of a, b, and c liters, find the minimum number of operations performed before each jug has x, y, and z liters. Only jug C will start completely filled.\n\nAn operation is any of the following: A jug is emptied, a jug is filled, or water is poured from one jug to another until one of the jugs is either empty or ",
    "tags": [
      "algorithms",
      "data_structures",
      "conditions",
      "loops"
    ],
    "title": "Water Jug Puzzle"
  },
  {
    "_id": "MfZWgFzoc5Je3g56z",
    "difficulty": 3.588235294117647,
    "language": "python3",
    "summary": "Create a function that takes two numbers as an argument and returns the minimum number of steps that we need to do inside a range of numbers to obtain a secret number.\n\nThe first number, ran, allow us to define the range of numbers that will be used to determine the secret number. The range runs from 0 up to ran2 (the number ran2 is part of the range).\n\nThe se",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "Number Translation"
  },
  {
    "_id": "FATFWknwgmyc7vDcf",
    "difficulty": 3.59375,
    "language": "python3",
    "summary": "My friend required some help with an assignment in school and I thought this would be a nice addition to be added as a challenge here as well.\n\nCreate a function that takes a sentence and returns a modified sentence abided by these rules:\nIf you encounter a date within the sentence, in the format DD/MM/YY or DD.MM.YY, you have to change it over to DD/MM/YYYY o",
    "tags": [
      "formatting",
      "strings",
      "regex"
    ],
    "title": "One Small Favor"
  },
  {
    "_id": "bf3QRDxH9Ns2SZWZw",
    "difficulty": 3.59375,
    "language": "python3",
    "summary": "In this challenge you will be given a rectangular list representing a \"map\" with three types of spaces:\n\"+\" bombs: When activated, their explosion activates any bombs directly above, below, left, or right of the \"+\" bomb.\n\"x\" bombs: When activated, their explosion activates any bombs placed in any of the four diagonal directions next to the \"x\" bomb.\nEmpty spa",
    "tags": [
      "arrays",
      "games",
      "validation"
    ],
    "title": "Chain Reaction (Part #1)"
  },
  {
    "_id": "k7YPvRyJt9NHbrvzu",
    "difficulty": 3.59375,
    "language": "python3",
    "summary": "Scoring plays in American football count as either 2, 3, 6, 7, or 8 points. Write a function that has as it's argument a football score and returns the number of possible ways that score can be achieved. Order is not important.\n\nExamples\nfootball(4) ➞ 1\n2+2\n\nfootball(6) ➞ 3\n2+2+2 or 3+3 or 6\n\nfootball(7) ➞ 2\n2+2+3 or 7\n\nfootball(9) ➞ 4\n2+2+2+3 or 3+3+3 or 3+6",
    "tags": [
      "algorithms",
      "numbers",
      "recursion"
    ],
    "title": "Football Scores"
  },
  {
    "_id": "8xZxYsG7LDpcpXXZ9",
    "difficulty": 3.6,
    "language": "python3",
    "summary": "Write three regular expressions that will be passed to re.match() in order to test a password strength:\nOne called invalid that will match a password if it's shorter than 6 characters or longer than 30 characters, if it contains any disallowed characters, or if it does not contain at least one character from each category.\nOne called weak that will match a val",
    "tags": [
      "regex",
      "validation"
    ],
    "title": "RegEx Exercise #5: Password Validation"
  },
  {
    "_id": "Lay8xqSkQgKrKbYbD",
    "difficulty": 3.6,
    "language": "python3",
    "summary": "A staircase is given with a non-negative cost per each step. Once you pay the cost, you can either climb one or two steps. Create a solution to find the minimum sum of costs to reach the top (finishing the payments including cost[-2] or cost[-1]). You can either start at cost[0] or cost[1].\n\nExamples\nclimbing_stairs([0, 2, 2, 1]) ➞ 2\n\nclimbing_stairs([0, 2, 3,",
    "tags": [
      "arrays",
      "control_flow",
      "logic",
      "loops"
    ],
    "title": "Climbing Stairs"
  },
  {
    "_id": "vdx5oXuTsos4vLvrn",
    "difficulty": 3.6,
    "language": "python3",
    "summary": "A modified Kaprekar number is a positive whole number with a special property. If you square it, then split the number into two integers and sum those integers, you have the same value you started with.\n\nConsider a positive whole number n with d digits. We square n to arrive at a number that is either 2 * d digits long or (2 * d) - 1 digits long. Split the str",
    "tags": [
      "algorithms",
      "numbers"
    ],
    "title": "Modified Kaprekar Numbers"
  },
  {
    "_id": "7WZhxYTBCHzMbyhfL",
    "difficulty": 3.604651162790698,
    "language": "python3",
    "summary": "You will be given the location of a knight, and an end location. The knight can move in a \"L\" shape. \"L\" shape movement means that the knight can change it's x coordinate by 2 and it's y coordinate by 1 or it can change it's y coordinate by 2 and it's x coordinate by 1 (you can add and subtract from the x/y).\n\nFor example, if the knight is at the position (0, ",
    "tags": [
      "algorithms",
      "games"
    ],
    "title": "BFS Chess!"
  },
  {
    "_id": "Ym27MyQQMRWGvEGeP",
    "difficulty": 3.608695652173913,
    "language": "python3",
    "summary": "Write a function that will return True if a given string (divided and grouped into a size) will contain a set of consecutive numbers (regardless of orientation: whether ascending or descending), otherwise, return False.\n\nIMPORTANT\nThe expected solution for this challenge is done recursively. Please check out the Resources tab for more details about recursion i",
    "tags": [
      "recursion",
      "sorting",
      "strings",
      "numbers",
      "validation"
    ],
    "title": "Recursion: Consecutive Number Series"
  },
  {
    "_id": "qTmbTWqHNTtDMKD4G",
    "difficulty": 3.6097560975609757,
    "language": "python3",
    "summary": "It's been a long day for Matt. After working on Edabit for quite a bit, he decided to go out and get a beer at the local bar a few miles down the road. However, what Matt didn't realise, was that with too much drinks you can't find the way home properly anymore. Your goal is to help Matt get back home by telling him how long the path to his house is if he driv",
    "tags": [
      "algorithms",
      "loops"
    ],
    "title": "Help Matt Get Home!"
  },
  {
    "_id": "4GT8pM8JQHW97bYzi",
    "difficulty": 3.611111111111111,
    "language": "python3",
    "summary": "In this challenge, write a funcion loneliestnumber to find the last Lonely_ number inside a sequence. A number is Lonely if the distance from its closest Prime sets a new record of the sequence.\n\nSequence = from 0 to 3\n\nAny number lower than 3 doesn't have a Prime preceeding it...\n...so that you'll consider only its next closest Prime.\n\n0 has distance 2 from i",
    "tags": [
      "classes",
      "numbers",
      "loops"
    ],
    "title": "A Lonely Class for Lonely Numbers"
  },
  {
    "_id": "pyJCJj7DvJTpbDPDP",
    "difficulty": 3.611111111111111,
    "language": "python3",
    "summary": "Your task is to calculate the number of days between two dates. The dates will be in the format DDMMYYYY. You are not allowed to import any modules, especially the datetime module. The days will not include the end date in calculation.\n\nRemember to consider all leap years and leap months. The order of the larger date and smaller date don't matter, as the days",
    "tags": [
      "algorithms",
      "conditions",
      "dates",
      "logic"
    ],
    "title": "How Many Days between Two Dates?"
  },
  {
    "_id": "bEz8JJdiwFK74p849",
    "difficulty": 3.611111111111111,
    "language": "python3",
    "summary": "Implement a class iterator to flatten a nested list of lists of integers. Each list element is either an integer or a list. There can be many levels of nested lists in lists.\n\nThe class initializes with a nested list. It also has two methods:\n\nnext() returns an integer in the order of appearance.\nhasNext() returns True / False regarding if all integers have be",
    "tags": [
      "classes",
      "conditions",
      "data_structures"
    ],
    "title": "Flatten Nested List Iterator"
  },
  {
    "_id": "C9Hboff46QSMZBRiL",
    "difficulty": 3.6153846153846154,
    "language": "python3",
    "summary": "Given a set S of allowed letters, an S-string is a string written using only those letters.\nFor example, if S={\"d\",\"g\"} then \"dgggdgdggd\" is an S-string but \"dag\" is not.\n\nFor a fixed set S and max string size M (chosen so that we need only deal with finitely many strings) one can order those strings according to their dictionary/lexicographic order.\n\nFor exam",
    "tags": [
      "math",
      "logic",
      "sorting"
    ],
    "title": "Kth String in Lexicographic Order"
  },
  {
    "_id": "xuuQfgva9CKDH6iwH",
    "difficulty": 3.625,
    "language": "python3",
    "summary": "You will be given a matrix representing a field g and two numbers x, y coordinate.\n\nThere are three types of possible characters in the matrix:\nx representing a rock.\no representing a dirt space.\n+ representing a grassed space.\n\nYou have to simulate grass growing from the position (x, y). Grass can grow in all four directions (up, left, right, down). Grass can",
    "tags": [
      "algorithms",
      "recursion"
    ],
    "title": "Plant the Grass"
  },
  {
    "_id": "iBpNyaBepmtQRhTyz",
    "difficulty": 3.627906976744186,
    "language": "python3",
    "summary": "The columnar cipher is a transposition cipher that works like this.\n\nStart with a secret message:\n\nmsg = \"Meet me by the lake at midnight. Bring shovel.\"\n\nTransform uppercase letters into lowercase and remove punctuation and spaces:\n\nmsg = \"meetmebythelakeatmidnightbringshovel\"\n\nThen, pick a keyword made out of distinct letters:\n\nkeyword = \"python\"\n\nBreak up t",
    "tags": [
      "arrays",
      "loops",
      "strings",
      "cryptography"
    ],
    "title": "Columnar Cipher"
  },
  {
    "_id": "WBsxNXnqeFr4es9oh",
    "difficulty": 3.64,
    "language": "python3",
    "summary": "In Clockwise Cipher, encoding is done by placing message characters in the corner cells of a square and moving in a clockwise direction.\n\nCreate a function that takes an argument message, and returns the encoded message.\n\nThere are some variations on the rules of encipherment. One version of the cipher rules are outlined below:\n\nmessage = \"Mubashir Hassan\"\n\ncl",
    "tags": [
      "algorithms",
      "cryptography",
      "logic",
      "strings"
    ],
    "title": "Clockwise Cipher"
  },
  {
    "_id": "CszujsGawysQPJoyZ",
    "difficulty": 3.642857142857143,
    "language": "python3",
    "summary": "You're working for Jaffar in the newest game of Prince of Persia. The prince is coming to get the princess and you have to stop him. He's entering the castle on a horse, don't ask me why he's riding a horse... he just is!\n\nYou're standing next to the cannon and you have to check if the aim / velocity / height is ok for hitting the prince on his horse.\n\nYour fu",
    "tags": [
      "algebra",
      "math",
      "numbers",
      "validation"
    ],
    "title": "Prince of Persia Turned Around"
  },
  {
    "_id": "K7NbqZBYD5xzZLro9",
    "difficulty": 3.642857142857143,
    "language": "python3",
    "summary": "Create a function that takes a range of numbers and returns the sum of each digit from start to stop.\n\nExamples\ndigits_sum(1, 10) ➞ 46\ntotal numbers in the range are = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\nsum of each digits is = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 1 + 0 = 46\n\ndigits_sum(1, 20) ➞ 102\n\ndigits_sum(1, 100) ➞ 901\n\nNotes\nstart and stop are inclusive in the",
    "tags": [
      "numbers",
      "math",
      "algebra",
      "recursion"
    ],
    "title": "Sum of Digits"
  },
  {
    "_id": "eSxvC27HnDtM6MCCb",
    "difficulty": 3.6470588235294117,
    "language": "python3",
    "summary": "You are given a base (int), a list of values (list), and a num (int) to be converted.\n\nYou are to use the values to translate the number into the base. Return False if there aren't enough/too little values in the value list (it should have the same length as the base). The values in value list starts with elements representing values from zero to base - 1. Ret",
    "tags": [
      "algorithms",
      "numbers"
    ],
    "title": "Base-10 to Base N with Custom Values"
  },
  {
    "_id": "JNuL8uT3RTxrR2RFv",
    "difficulty": 3.6470588235294117,
    "language": "python3",
    "summary": "The function is given three parameters:\n\"alphabet\" a string of 26 lower-case letter,\n\"s\" a string of lower-case letters to be encoded,\nshifts a list of integers of the same length as \"s\".\n\nTo encode the string one has to perform n rounds (the length of \"s\"):\nFirst round – shift first letter s[0] by shifts[0] amount according to the \"alphabet\". The shift is cir",
    "tags": [
      "algorithms",
      "cryptography",
      "logic",
      "strings"
    ],
    "title": "Shifting Letters Cypher"
  },
  {
    "_id": "G48hHNYT8o8ZRXbrS",
    "difficulty": 3.652173913043478,
    "language": "python3",
    "summary": "Sherlock considers a string to be valid if all characters of the string appear the same number of times. It is also valid if he can remove just one character at one index in the string s, and the remaining characters will occur the same number of times.\n\nGiven a string, determine if it is valid. If so, return \"YES\", otherwise return \"NO\".\n\ns= abc\nThis is a val",
    "tags": [
      "strings",
      "regex",
      "validation"
    ],
    "title": "Sherlock and the Valid String"
  },
  {
    "_id": "J67xWvM4jFhn9nEpJ",
    "difficulty": 3.6666666666666665,
    "language": "python3",
    "summary": "Make a function that takes a integer, size, returns 2D list that is a Magic Square with side lengths of size\n\n A Magic Square is an arrangement of numbers in a square in such a way that the sum of each row, column, and diagonal is one constant number, the \"magic constant.\"\nFor this challenge I will be testing with the assumption that your magic squares are mad",
    "tags": [
      "algorithms",
      "arrays",
      "geometry",
      "games"
    ],
    "title": "Magic Square Gen"
  },
  {
    "_id": "bLuYNNrRxy9xfopvP",
    "difficulty": 3.6666666666666665,
    "language": "python3",
    "summary": "In a Yahtzee game, the player has to score points rolling five dice trying to obtain a specific combination in every of the thirteen turns of the game.\n\n| Turn | Name | Points |\n|--|--|--|\n| 1 | Aces | Sum of all dice showing 1\n| 2 | Twos | Sum of all dice showing 2\n| 3 | Threes | Sum of all dice showing 3\n| 4 | Fours | Sum of all dice showing 4\n| 5 | Fives | ",
    "tags": [
      "games",
      "arrays",
      "data_structures"
    ],
    "title": "Yahtzee Score Calculator"
  },
  {
    "_id": "uhLCMpDLcyozWqSRP",
    "difficulty": 3.6666666666666665,
    "language": "python3",
    "summary": "Given a list of airline tickets represented by pairs of departure and arrival airports \\[from, to], reconstruct the itinerary in order. All of the tickets belong to a man who departs from A. Thus, the itinerary must begin with A.\n\nExamples\nfind_path([[\"C\", \"F\"], [\"A\", \"C\"], [\"I\", \"Z\"], [\"F\", \"I\"]]) ➞ [\"A\", \"C\", \"F\", \"I\", \"Z\"]\n\nfind_path([[\"A\",\"C\"], [\"A\",\"B\"],",
    "tags": [
      "logic",
      "loops",
      "algorithms",
      "arrays",
      "sorting"
    ],
    "title": "Find Possible Path Sort by Alphabetical Order"
  },
  {
    "_id": "yfTyMb3SSumPQeuhm",
    "difficulty": 3.6666666666666665,
    "language": "python3",
    "summary": "Write a function that efficiently calculates Fibonacci terms.\n\nExamples\nfibonacci(1) ➞ 1\n\nfibonacci(2) ➞ 1\n\nfibonacci(4) ➞ 3\n\nfibonacci(64) ➞ 10610209857723\n\nNotes\nThe input will always be a power of two.",
    "tags": [
      "loops",
      "math"
    ],
    "title": "Exponential Fibonacci"
  },
  {
    "_id": "KFmbbjCghuiDrWWa4",
    "difficulty": 3.6666666666666665,
    "language": "python3",
    "summary": "The function is given a list of three strings representing a board. The characters can be \"X\", \"O\", \" \". The first player writes \"X\" at first turn. If a player has three marks in a row, column or a diagonal, the game stops. Given the board evaluate if this state can be achieved in line with the rules, return True / False.\n\nExamples\nvalidatetictac_toe([\"X  \", \"",
    "tags": [
      "algorithms",
      "games",
      "strings",
      "validation"
    ],
    "title": "Validate the Tic-Tac-Toe Game State"
  },
  {
    "_id": "btN6uQc3BTmLgSw5G",
    "difficulty": 3.6842105263157894,
    "language": "python3",
    "summary": "In this challenge, transform a string into a spiral contained inside a regular square matrix. To build the matrix, you are given the dimension of its side:\nIf the side of the matrix is odd, the spiral starting point will be the exact center of the matrix.\nIf the side of the matrix is even, the spiral starting point will be placed in the lower columns half of t",
    "tags": [
      "strings",
      "arrays"
    ],
    "title": "Spiral Matrix"
  },
  {
    "_id": "ch3ZsbzJt56krcvhy",
    "difficulty": 3.6923076923076925,
    "language": "python3",
    "summary": "This is a big integer challenge.  You are given an integer which is a perfect square.  It is composed of 40 or more digits. Compose a function which will find the exact square root of this integer.\n\nExamples\nsquare_root(152415787532388367501905199875019052100) ➞ 12345678901234567890\n\nsquare_root(10203040506070809101112131413121110090807060504030201) ➞ 10101010",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "Big Squares"
  },
  {
    "_id": "oQGhFdj2HHnFEjtAx",
    "difficulty": 3.6956521739130435,
    "language": "python3",
    "summary": "In this challenge you are given a string and a slice made from that string. Make a function that returns an expression that can be used to make that slice. Your answer must contain only the minimum number of keystrokes needed to make the slice.\n\nExamples\nslicer(\"abcd\", \"b\") ➞ \"[1]\"\n\nslicer(\"abcdefg\", \"cb\") ➞ \"[2:0:-1]\"\n\nslicer(\"abcdefg\", \"be\") ➞ \"[1::3]\"\n\nslic",
    "tags": [
      "language_fundamentals",
      "strings"
    ],
    "title": "Slicing Strings"
  },
  {
    "_id": "Pjffmm9TTr7CxGDRn",
    "difficulty": 3.6956521739130435,
    "language": "python3",
    "summary": "Write a function that will return True if a given string (divided and grouped into a size) will contain a set of consecutive ascending numbers, otherwise, return False.\n\nIMPORTANT\nThe expected solution for this challenge is done recursively. Please check out the Resources tab for more details about recursion if it needs be.\n\nExamples\nis_ascending(\"123124125\")",
    "tags": [
      "recursion",
      "strings",
      "numbers",
      "arrays"
    ],
    "title": "Recursion: Consecutive Ascending Numbers"
  },
  {
    "_id": "rX9ZdzWuj3ZbyCCd5",
    "difficulty": 3.7,
    "language": "python3",
    "summary": "Given a positive number as a string, multiply the number by 11 and also return it as a string. However, there is a catch:\n\nYou are NOT ALLOWED to simply cast the numeric string into an integer!\n\nNow, how is this challenge even possible? Despite this, there is still a way to solve it, and it involves thinking about how someone might multiply by 11 in their head",
    "tags": [
      "recursion",
      "strings",
      "logic",
      "math",
      "numbers"
    ],
    "title": "Recursion: Multiply By 11"
  },
  {
    "_id": "nimEZ6nfJ2vqzYBTL",
    "difficulty": 3.7027027027027026,
    "language": "python3",
    "summary": "Create a function that returns the product of two integers. This process of multiplication can be achieved via repetitive addition, thus, the process can be done recursively.\n\nExamples\nmultiply(10, 2) ➞ 20\n\nmultiply(-51, -4) ➞ 204\n\nmultiply(3, 9) ➞ 27\n\nmultiply(-21, 5) ➞ -105\n\nmultiply(1024, 7) ➞ 7168\n\nmultiply(273, -6) ➞ -1638\n\nNotes\nYou're expected to solve",
    "tags": [
      "recursion",
      "math"
    ],
    "title": "Recursion: Multiplication by Addition"
  },
  {
    "_id": "NhPYFqfQcFXWvdH8t",
    "difficulty": 3.7037037037037037,
    "language": "python3",
    "summary": "A positive integer multiplied times its inverse is always equal to 1:  17(1/17)==1.  Modular arithmetic has a similar inverse function, although, for modulus m, we are confined to integers from 0 to m-1. The modular multiplicative inverse of 3 modulus 5 is equal to 2 because (32)%5==1. Another example: the modular inverse of 17 modulus 1000007 is equal to 5882",
    "tags": [
      "math",
      "numbers",
      "cryptography"
    ],
    "title": "Modular Inverse"
  },
  {
    "_id": "C3cJAoyWWhtFveK2y",
    "difficulty": 3.7058823529411766,
    "language": "python3",
    "summary": "In Spartans Cipher, encoding is done by writing the text horizontally, across the strap in the plaintext word of a message. In ancient times, Spartans and Greeks invented interesting way of encryption called Scytale. The detailed description of the encoding algorithm is provided by Mubashir in his challenge. You are encouraged to solve that one first.\n\nIn this",
    "tags": [
      "algorithms",
      "cryptography",
      "logic",
      "strings"
    ],
    "title": "Spartans Decipher"
  },
  {
    "_id": "CK6mdHahiJBjuiDBi",
    "difficulty": 3.7083333333333335,
    "language": "python3",
    "summary": "You arrive at the supermarket checkout and you've only got a limited number of shopping bags with you. Miser that you are, you hate buying extra bags when you've got dozens at home that you forgot to bring with you!! Can you fit all your shopping into the bags you've got with you?\n\nEach bag can carry a maximum of 10kg and each item you've purchased weighs betw",
    "tags": [
      "algorithms",
      "logic",
      "validation"
    ],
    "title": "Need Help With Your Packing?"
  },
  {
    "_id": "vSo5XWNqKiBuN5zGr",
    "difficulty": 3.7096774193548385,
    "language": "python3",
    "summary": "Create a function that returns the integral part from the result of a division between two numbers. This process of division can be achieved via repetitive subtraction, thus, it can be done recursively.\n\nExamples\ndivide(10, 2) ➞ 5\n\ndivide(-51, -4) ➞ 12\n\ndivide(3, 9) ➞ 0\n\ndivide(-21, 5) ➞ -4\n\ndivide(1024, 7) ➞ 146\n\ndivide(273, -6) ➞ -45\n\nNotes\nThere will be no",
    "tags": [
      "recursion",
      "numbers"
    ],
    "title": "Recursion: Integer Division"
  },
  {
    "_id": "SbXSM5HwdkgENLEwY",
    "difficulty": 3.7142857142857144,
    "language": "python3",
    "summary": "Implement a class Selfie that can store the current state of the object in the form of binary string. It can take multiple pictures and then recover to a state it was before. During testing an object will be provided with new attributes and their values. It will store its state. Then the values will be changed. Then it will be given new attributes. It will sto",
    "tags": [
      "classes",
      "objects"
    ],
    "title": "Class That Takes Selfies"
  },
  {
    "_id": "XmQjSjbsfLg3y33ES",
    "difficulty": 3.7142857142857144,
    "language": "python3",
    "summary": "A courthouse has a backlog of several cases that need to be heard, and is trying to set up an efficient schedule to clear this backlog. You will be given the following inputs:\nA dictionary cases whose values are the number of court sessions each case needs to be concluded.\nAn integer maxdailysessions which gives the maximum number of court sessions that can be",
    "tags": [
      "algorithms",
      "math",
      "logic"
    ],
    "title": "Legal Backlog"
  },
  {
    "_id": "Gmk5awcwHZJoqs6ZW",
    "difficulty": 3.71875,
    "language": "python3",
    "summary": "An island is a region of contiguous ones. A contiguous one is a 1 that is touched by at least one other 1, either horizontally, vertically or diagonally. Given a piece of the map, represented by a 2-D list, create a function that returns the area of the largest island.\n\nTo illustrate, if we were given the following piece of the map, we should return 4.\n\n[\n  [0",
    "tags": [
      "arrays",
      "data_structures",
      "logic",
      "games"
    ],
    "title": "Largest Island"
  },
  {
    "_id": "JZfyYujftavv6APLs",
    "difficulty": 3.72,
    "language": "python3",
    "summary": "Mathematically, a fraction can be defined as the ratio a/b, where a and b are integers and b is non zero.\n\nIn this challenge, we are going to implement a Fraction class and some methods to support arithmetic and comparison operations on them. Write a Fraction class that meets the following requirements:\n\nInitialisation: Create a Fraction object with a as numer",
    "tags": [
      "classes",
      "language_fundamentals",
      "math",
      "validation"
    ],
    "title": "A Fraction Class"
  },
  {
    "_id": "ioH6dhs3RiyeEx5EE",
    "difficulty": 3.72,
    "language": "python3",
    "summary": "Write a function that takes two numbers, boundaries of a range, and returns a list of functions which calculate the following:\n\nn1 <= k < n2\nif k – even, then f(x) = x + k\nif k –  odd, then f(x) = x * k\n\nExamples\nf1, f2 = makefunlst(5, 7)\nprint((f1(4), f2(14))) ➞ (20, 20)\n\nNotes\nThis question is from an evaluation procedure at an interview. A person who can so",
    "tags": [
      "higher_order_functions",
      "language_fundamentals",
      "loops",
      "interview"
    ],
    "title": "List of Functions"
  },
  {
    "_id": "3tCPFQxdC5NTm5PsG",
    "difficulty": 3.727272727272727,
    "language": "python3",
    "summary": "You are given a list of (x, y) co-ordinates. Any three of these could be the vertices of an isosceles triangle. Create a function that determines how many isosceles triangles can be drawn from this scattering of points. Vertices can be shared by multiple triangles.\n\nExamples\nfind_triangles([(0, 0), (0, 4), (2, 2)]) ➞ 1\n\nfind_triangles([(-10, -10), (-7, 3), (-3",
    "tags": [
      "conditions"
    ],
    "title": "Triangle Search"
  },
  {
    "_id": "kPHmvQPLbdEKYeM9L",
    "difficulty": 3.727272727272727,
    "language": "python3",
    "summary": "You are given a list asteroids of integers representing asteroids in a row.\n\nFor each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.\n\nFind out the state of the asteroids after all collisions. If two asteroids meet, the smaller one wi",
    "tags": [
      "games",
      "arrays",
      "loops",
      "recursion"
    ],
    "title": "Asteroid Collision"
  },
  {
    "_id": "W3Hptw6ieTtrWNw4H",
    "difficulty": 3.7333333333333334,
    "language": "python3",
    "summary": "The basic Polybius Square is a 5x5 square grid with the letters A-Z written into the grid. \"I\" and \"J\" typically share a slot (as there are 26 letters and only 25 slots).\n\n| |1|2|3|4|5\n---|---|---|---|---|---\n1|A|B|C|D|E\n2|F|G|H|I/J|K\n3|L|M|N|O|P\n4|Q|R|S|T|U\n5|V|W|X|Y|Z\n\nThe Bifid cipher uses the Polybius square but adds a layer of complexity.\n\nStart with a se",
    "tags": [
      "arrays",
      "cryptography",
      "loops"
    ],
    "title": "Polybius Square, Bifid Cipher"
  },
  {
    "_id": "JznGzgQqBPXZPWged",
    "difficulty": 3.735294117647059,
    "language": "python3",
    "summary": "Resistors are electrical components that add resistance to a circuit. Resistance is measured in ohms. When resistors are connected in series, the total resistance is merely the sum of the individual resistances:\n\nRtotal = R1 + R2 + R3 + ...\n\nWhen resistors are connected in parallel, the reciprocal of the total resistance is equal to the sum of the reciprocals",
    "tags": [
      "algorithms",
      "data_structures",
      "strings"
    ],
    "title": "Resistor Networks"
  },
  {
    "_id": "ackLoH8oorMDCLaAf",
    "difficulty": 3.736842105263158,
    "language": "python3",
    "summary": "Given an integer n, return the number of trailing zeroes in n!.\n\nExamples\ntrailing_zeroes(6) ➞ 1\nfactorial(6) = 720\n\ntrailing_zeroes(30) ➞ 7\nfactorial(30) = 265252859812191058636308480000000\n\nNotes\nCreate a solution that works in logarithmic time complexity.",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "Factorial Trailing Zeroes"
  },
  {
    "_id": "4WNkqa5Pb6Lh6ZXvs",
    "difficulty": 3.742857142857143,
    "language": "python3",
    "summary": "You will be given a polynomial expression in string form. The expression will contain any of the following operations, written using standard mathematical notation for a single variable, \"x\", as illustrated in the examples below:\n\naddition: x + 1\nsubtraction: x – 2\nmultiplication: 3x\ndivision: x / 4\nexponentation: x^5\nbrackets: x(x + 1)\n\nYour task is to write",
    "tags": [
      "algebra",
      "strings"
    ],
    "title": "Evaluate Polynomials from String"
  },
  {
    "_id": "3zfPQEyvKTHdktmxu",
    "difficulty": 3.75,
    "language": "python3",
    "summary": "For a given list, determine the biggest possible sum between consecutive terms, as well as the initial and final position of the terms.\n\nExamples\nbig_sub([4, -3, 5, -7, 5]) ➞ [6 (sum), 0 (start), 2 (end)]\n\nbig_sub([4, -3, -5, 7, 5]) ➞ [12, 3, 4]\n\nbig_sub([2, -3, 2, -3, 2]) ➞ [2, 4, 4]\n\nNotes\nIf the biggest sum is repeated at several intervals, return the start",
    "tags": [
      "arrays",
      "loops"
    ],
    "title": "Biggest Sublist"
  },
  {
    "_id": "iN48LCvtsQFftc7L9",
    "difficulty": 3.7567567567567566,
    "language": "python3",
    "summary": "This challenge involves finding words in an 8x8 grid. Given a string of 64 letters and a list of words to find, convert the string to an 8x8 list, and return True if all words in the string can be found in the list. Return False otherwise. Words can be read in any direction (horizontally, vertically or diagonally).\n\nExample\nletters = \"PSUWHATSLPACKAGENYOLRDVLF",
    "tags": [
      "arrays",
      "strings",
      "language_fundamentals"
    ],
    "title": "Word Search (Part 1)"
  },
  {
    "_id": "X5dZShpH7hfoRn7bJ",
    "difficulty": 3.769230769230769,
    "language": "python3",
    "summary": "A centrifuge, as you probably know, is a laboratory device used to separate fluids based on density. The separation is achieved through centripetal force by spinning a collection of test tubes at high speeds. This means, the configuration needs to be in balance.\n\nCreate a function that takes two numbers as arguments n and k and returns True if the configuratio",
    "tags": [
      "algorithms",
      "math",
      "numbers",
      "validation"
    ],
    "title": "The Centrifuge Problem"
  },
  {
    "_id": "QacMMhJCdSaCFf4AZ",
    "difficulty": 3.7777777777777777,
    "language": "python3",
    "summary": "Write a function that takes an integer sequence represented by a list of integers as a parameter and return a function of that sequence. This function should take an index (starting at 1, not zero), and return the sequence term at that index.\n\nThe test sequences given will have at least five terms and will start at the beginning of the sequence. They will be e",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "Arithmetic and Geometric Sequence Function Generator"
  },
  {
    "_id": "Y8uyMM8ax37wQLkNQ",
    "difficulty": 3.7777777777777777,
    "language": "python3",
    "summary": "Write a function that accepts an integer n and returns an n * n spiral matrix.\n\nExamples\nmatrix(2) ➞ [\n  [1, 2],\n  [4, 3]\n]\n\nmatrix(3) ➞ [\n  [1, 2, 3],\n  [8, 9, 4],\n  [7, 6, 5]\n]\n\nmatrix(4) ➞ [\n  [1,  2,  3,  4],\n  [12, 13, 14, 5],\n  [11, 16, 15, 6],\n  [10,  9,  8, 7]\n]\n\nNotes\nIn the examples, traverse the matrix in the clock-wise direction to observe the spir",
    "tags": [
      "arrays",
      "loops",
      "math",
      "conditions"
    ],
    "title": "Spiral Matrix Printing"
  },
  {
    "_id": "LM5d2b6YG5vXuYiME",
    "difficulty": 3.7857142857142856,
    "language": "python3",
    "summary": "You are playing a video game. Your screen can be represented as a 2D array, where 0s represent walkeable areas and 1s represent unwalkeable areas. You are currently searching for the entrance to a cave that is located on the right side of the screen. Your character starts anywhere in the leftmost column.\n\nCreate a function that determines if you can enter the",
    "tags": [
      "arrays",
      "games",
      "functional_programming"
    ],
    "title": "Can You Enter the Cave?"
  },
  {
    "_id": "Psu3YC5dLjpmDqduX",
    "difficulty": 3.7916666666666665,
    "language": "python3",
    "summary": "Given a unordered list of the vertices of a convex polygon, find its area.\n\nExamples\npolygon([[2, 5], [5, 1], [-4, 3]]) ➞ 15.0\n\npolygon([[-1, 1], [1, 1], [-1, -1], [1, -1]]) ➞ 4.0\n\npolygon([[2, 2], [11, 2], [4, 10], [9, 7]]) ➞ 45.5\n\npolygon([[5, 3], [3, 4], [12, 8], [5, 11], [9, 5]]) ➞ 39.0\n\nNotes\nA convex polygon has all interior angles less than 180 degrees.",
    "tags": [
      "algebra",
      "algorithms",
      "math",
      "trigonometry"
    ],
    "title": "Area of a Polygon"
  },
  {
    "_id": "XmaXgtudeBvovssAZ",
    "difficulty": 3.8,
    "language": "python3",
    "summary": "This problem went viral in China, spreading on Weibo. The problem is to solve for the area shown in red between the semicircle and the rectangle’s diagonal.\n\nCreate a function that takes a number r as an the length of the side and returns the area rounded to the nearest thousandth.\n\nThe shaded part\n\nExamples\nredArea(0) ➞ 0\n\nredArea(4) ➞ 1.252\n\nredArea(25) ➞ 48",
    "tags": [
      "algorithms",
      "math",
      "numbers"
    ],
    "title": "Solve for the Red Area"
  },
  {
    "_id": "5RN3TNyGMWRgynLLa",
    "difficulty": 3.8095238095238093,
    "language": "python3",
    "summary": "A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.\n\nA prime",
    "tags": [
      "numbers",
      "math"
    ],
    "title": "Happy Numbers & More"
  },
  {
    "_id": "8dkfsFEDNAbTqhAgc",
    "difficulty": 3.8125,
    "language": "python3",
    "summary": "Declare a division() function that gets two natural numbers (a, b)  and return a string containing the rational number a / b in the form of a decimal fraction, possibly periodic.\n\nExamples\ndivision(2, 5) ➞ \"0.4\"\n\ndivision(1, 6) ➞ \"0.1(6)\"\n\ndivision(1, 3) ➞ \"0.(3)\"\n\ndivision(1, 7) ➞ \"0.(142857)\"\n\ndivision(1, 77) ➞ \"0.(012987)\"\n\nNotes\nThe length of a periodic fr",
    "tags": [
      "algorithms",
      "logic",
      "math"
    ],
    "title": "Rational Number"
  },
  {
    "_id": "WY7r2XtarpupNDWE8",
    "difficulty": 3.8125,
    "language": "python3",
    "summary": "Create a function (given the number of discs and the move number) that returns as a tuple the towers with their correct disks in order.\n\nWhat is Tower of Hanoi?\nTower of Hanoi is a problem in occursion, where you have to move a certain amount of discs from one peg (or tower) to the final peg. The discs are stacked on pegs with each disc being smaller than the",
    "tags": [
      "algebra",
      "recursion"
    ],
    "title": "Tower of Hanoi Moves"
  },
  {
    "_id": "XunDiCaZBepCKX9wL",
    "difficulty": 3.8125,
    "language": "python3",
    "summary": "This string, \"sadbpstcrdvaefikkgoenqrt\" has a five letter word embedded within it.\n\nHere's a clue on how to find it:\n\nThe string can be broken up from left to right into a series of overlapping letter triplets.\nThe letter values for each triplet are summed with a=1, b=2, ..., z=26.\nThe values of the triplets that contain the letters of the secret word as the m",
    "tags": [
      "algorithms",
      "loops",
      "math"
    ],
    "title": "Find the Secret Word"
  },
  {
    "_id": "sBgZBmQ9Z5gCCuvbN",
    "difficulty": 3.8125,
    "language": "python3",
    "summary": "Consider the infinite sequence of integers: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... Find the nth digit in the string where all numbers are placed one after another without spaces. Digits counting starts from 1.\n\nExamples\nfindnthdigit(3) ➞ 3\nFirst digit of number 3\n\nfindnthdigit(10) ➞ 1\nFirst digit of number 10\n\nfindnthdigit(11) ➞ 0\nSecond digit of number 10\n\nfi",
    "tags": [
      "language_fundamentals",
      "loops",
      "math",
      "numbers"
    ],
    "title": "Nth Digit of the Infinite Integers Sequence"
  },
  {
    "_id": "gptsLnjpW8q3jfY4o",
    "difficulty": 3.8181818181818183,
    "language": "python3",
    "summary": "Create a function that takes a integer number n and returns the formula for (a+b)^n as a string.\n\nExamples\nFormula(0) ➞ \"1\"\n\nFormula(1) ➞ \"a+b\"\n\nFormula(2) ➞ \"a^2+2ab+b^2\"\n\nFormula(-2) ➞ \"1/(a^2+2ab+b^2)\"\n\nFormula(3) ➞ \"a^3+3a^2b+3ab^2+b^3\"\n\nFormula(5) ➞ \"a^5+5a^4b+10a^3b^2+10a^2b^3+5ab^4+b^5\"\n\nNotes\nDon't put the following in your string:\nspaces\n*\n^1\na^0\nb^0",
    "tags": [
      "strings",
      "logic",
      "math",
      "algebra"
    ],
    "title": "(a+b)^n Formula"
  },
  {
    "_id": "tttgECA8YLYinLMED",
    "difficulty": 3.823529411764706,
    "language": "python3",
    "summary": "The Farey sequence of order n is the set of all fractions with a denominator between 1 and n (reduced to its lowest terms and ordered ascendingly). Given an n, write a function that returns the Farey sequence as a list, with a string representation of each fraction of the form \"numerator/denominator\".\n\nExamples\nfarey(1) ➞ [\"0/1\", \"1/1\"]\n\nfarey(5) ➞ [\"0/1\", \"1/",
    "tags": [
      "recursion",
      "arrays",
      "logic"
    ],
    "title": "Recursion: Farey Sequence"
  },
  {
    "_id": "SLDdtB8cpKAHLWrgF",
    "difficulty": 3.8275862068965516,
    "language": "python3",
    "summary": "In this challenge, you have to permutate an expression that includes three variable values a, b and c. You are given a set of three unique numbers to substitute for letters so there are six possible different expression variations, and you have to find which one returns the greater result.\n\nexpr = \"(a - b) * c\" | nums = [1, 2, 3]\n\nPermutation #1 ➞ (1 - 2) * 3",
    "tags": [
      "math",
      "strings",
      "higher_order_functions"
    ],
    "title": "Permutations of an Expression"
  },
  {
    "_id": "FHHwde93c2xjnePgp",
    "difficulty": 3.8333333333333335,
    "language": "python3",
    "summary": "The goal is to test if a consecutive sequence can be formed. A consecutive sequence is defined as a sequence of incrementing numbers (e.g. 1, 2, 3 or 5, 6, 7, 8). The twist is that you have to consider the combination of lists as shown. You can combine any two elements from different lists.\n\n[-5 1 3 5 ] => [3 5 1 -5 ] => [3+4  5+3  1+8  15-5] = [7 8 9 10] => T",
    "tags": [
      "arrays",
      "logic"
    ],
    "title": "Any Combined List Sequence"
  },
  {
    "_id": "23cT6Qa4J35ewFeQT",
    "difficulty": 3.8333333333333335,
    "language": "python3",
    "summary": "The function is given a string representing an expression of many fractions addition and subtraction. Compute the arithmetic result and return the string in the form of an irreducible fraction. Even if the result is an integer, e.g. 3, return it as 3/1.\n\nExamples\nfractions_addition(\"-1/2+1/2\") ➞ \"0/1\"\n\nfractions_addition(\"-1/2+1/2+1/3\") ➞ \"1/3\"\n\nfractions_addi",
    "tags": [
      "algorithms",
      "numbers",
      "regex",
      "strings"
    ],
    "title": "Fractions Addition and Subtraction"
  },
  {
    "_id": "jT7PY2yTWTuxcqpJe",
    "difficulty": 3.84,
    "language": "python3",
    "summary": "Given a matrix of m * n elements (m rows, n columns), return all elements of the matrix in spiral order.\n\nExamples\nspiral_order([\n  [ 1, 2, 3 ],\n  [ 4, 5, 6 ],\n  [ 7, 8, 9 ]\n]) ➞ [1, 2, 3, 6, 9, 8, 7, 4, 5]\n\nspiral_order([\n  [1, 2, 3, 4],\n  [5, 6, 7, 8],\n  [9,10,11,12]\n]) ➞ [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7]\n\nNotes\nNA",
    "tags": [
      "arrays",
      "higher_order_functions",
      "logic"
    ],
    "title": "Spiral Matrix"
  },
  {
    "_id": "7mp5P99QqnQHePe3P",
    "difficulty": 3.8421052631578947,
    "language": "python3",
    "summary": "Given a positive integer, return its corresponding column title displayed in Excel sheets.\n\nFor example:\n\n1 -> A\n2 -> B\n3 -> C\n...\n26 -> Z\n27 -> AA\n28 -> AB\n...\n\nExamples\nconverttotitle(1) ➞ \"A\"\n\nconverttotitle(18) ➞ \"R\"\n\nconverttotitle(28) ➞ \"AB\"\n\nconverttotitle(52) ➞ \"AZ\"\n\nconverttotitle(701) ➞ \"ZY\"\n\nNotes\nN/A",
    "tags": [
      "numbers",
      "strings"
    ],
    "title": "Excel Sheet Column Title"
  },
  {
    "_id": "RwCRpmhL7WTzpr6df",
    "difficulty": 3.8421052631578947,
    "language": "python3",
    "summary": "The function is given an integer n. Find out if any permutation of digits of n such that the first digit is not 0 is equal to 2^k, return True / False.\n\nExamples\ncheck_power2(1) ➞ True\n2^0 == 1\n\ncheck_power2(13) ➞ False\nNeither 13 or 31 is a power of 2.\n\ncheck_power2(61) ➞ True\n2^4 == 16\n\ncheck_power2(33) ➞ False\n33 is not a power of 2.\n\ncheck_power2(562) ➞ Tr",
    "tags": [
      "algorithms",
      "conditions",
      "logic",
      "numbers",
      "validation"
    ],
    "title": "Check If a Permutation of Digits Is a Power of Two"
  },
  {
    "_id": "5MkQrfcNnWcv33a52",
    "difficulty": 3.8461538461538463,
    "language": "python3",
    "summary": "The 2nd of February 2020 is a palindromic date in both dd/mm/yyyy and mm/dd/yyyy format (02/02/2020).\n\nFebruary 2, 2020 is the only 2-digit month and day palindromic date that will occur in the 21st century.  The next occurrence of a 2-digit month and day palindromic date will be December 12, 2121, which is exactly 101 years from the last occurrence.  101 is a",
    "tags": [
      "algorithms",
      "dates"
    ],
    "title": "Next Palindromic Date"
  },
  {
    "_id": "ZT2mRQeYigSW2mojW",
    "difficulty": 3.85,
    "language": "python3",
    "summary": "Haikus are poems formed by three lines of 5, 7, and 5 syllables. Your task is to write a function that determines if a given poem scans as a Haiku.\n\nHow to count syllables:\nEvery syllable must contain at least one vowel.\nIf two or more vowels appear back to back, they should be counted as a single vowel (e.g. \"fair\").\nIf an \"e\" appears at the end of a word, it",
    "tags": [
      "regex",
      "validation",
      "strings"
    ],
    "title": "Is This a Haiku?"
  },
  {
    "_id": "WoPJpe3RzxGhLSXkv",
    "difficulty": 3.8518518518518516,
    "language": "python3",
    "summary": "In this challenge you must create a program which takes a number n and returns the length or number of digits in all numbers from 1 to n concatenated.\n\nExamples\nconcatenation_sum(5) ➞ 5\n\nconcatenation_sum(10) ➞ 11\n\nconcatenation_sum(13) ➞ 17\n\nNotes\nKeep in mind that the output is the number of digits in the concatenated number. For example, if the input was 5,",
    "tags": [
      "math",
      "numbers",
      "logic"
    ],
    "title": "Sum of 1-N Succession"
  },
  {
    "_id": "RgdAjTADFg2r4wne3",
    "difficulty": 3.857142857142857,
    "language": "python3",
    "summary": "In this challenge, you are given a list of one or more arithmetic operators and a list of  numbers. Take each of the operators and mate it with any three separate numbers in the list to create a valid equation. Your answer should contain all possible equations.\n\nExamples\njumbled([[\"+\"], [2, 1, 3]]) ➞ [\"1+2=3\"]\n\njumbled([\"+\", \"\"], [36, 28, 71, 4, 12, 7, 11]]) ➞",
    "tags": [
      "arrays",
      "loops",
      "sorting"
    ],
    "title": "Jumbled Equations"
  },
  {
    "_id": "kZc52L98eWmNXyS6r",
    "difficulty": 3.8636363636363638,
    "language": "python3",
    "summary": "Create a function that takes a string of plain text (English alphabet) all in lowercase, encryption function, and converts the plain text into ciphertext using the affine encryption function.\n\nEncryption Function\nIn the affine cipher, the letters of an alphabet of size m are first mapped to the integers in the range 0 … m − 1. It then uses modular arithmetic t",
    "tags": [
      "math",
      "cryptography",
      "language_fundamentals"
    ],
    "title": "Affine Cipher Encrypt"
  },
  {
    "_id": "TywKAYPPjhRsLMk98",
    "difficulty": 3.8666666666666667,
    "language": "python3",
    "summary": "In Hill Cipher, encoding is done by using the input string of a key and a message which are turned into matrices and then back to the encoded message.\n\nCreate a function that takes two arguments, key and message, and returns the encoded message.\n\nAssign a unique number to each letter of the alphabet.\n\n a  b  c  d  e  f  g  h  i  j  k  l  m\n 0  1  2  3  4  5  6",
    "tags": [
      "cryptography",
      "strings",
      "arrays",
      "algorithms",
      "logic"
    ],
    "title": "Hill Cipher"
  },
  {
    "_id": "FPNLQWdiShE7HsFki",
    "difficulty": 3.8666666666666667,
    "language": "python3",
    "summary": "A spider web is defined by rings numbered from 0-4 from the center and radials labeled clock-wise from the top as A-H.\n\nCreate a function that takes the coordinates of spider and fly and returns the shortest path for the spider to get to the fly.\n\nIt's worth noting that the shortest path should be calculated \"geometrically\", not by counting the number of point",
    "tags": [
      "algorithms",
      "logic",
      "strings",
      "validation"
    ],
    "title": "Spider🕷️vs. 🦟 Fly"
  },
  {
    "_id": "zydQcyEw35KuntMcK",
    "difficulty": 3.8666666666666667,
    "language": "python3",
    "summary": "The function is given an integer n. Make a list lst = [1, 2, 3, ..., n]. Consider all possible permutations of lst. Find out how many permutations are such that all prime numbers from the list are located at prime-index positions, imagining that the list indices are 1-based. The number of such permutations can be large, thus return n_permutations % (10**9 + 7)",
    "tags": [
      "algorithms",
      "arrays",
      "logic",
      "math"
    ],
    "title": "Prime Numbers at Prime Indices"
  },
  {
    "_id": "4eRim6495deGXZrgF",
    "difficulty": 3.869565217391304,
    "language": "python3",
    "summary": "Given three lists (daily sales of product A, daily sales of product B, daily sales targets), return a string representing a stacked column chart of the total sales (with targets) for each day of the week.\n\nAll sales are rounded to the nearest 10 units.\nEach column uses \"+\" for product A, \"*\" for product B, and an underscore (\"_\") for the target line.\nThe y-axi",
    "tags": [
      "strings"
    ],
    "title": "ASCII Charts (Part 3: Column Chart)"
  },
  {
    "_id": "ub2KJNfsgjBMFJeqd",
    "difficulty": 3.878787878787879,
    "language": "python3",
    "summary": "In this challenge we're going to build a board for a Minesweeper game using OOP. Create two classes: Game and Cell.\n\nGame should take in 3 arguments: number of rows, number of columns and total number of mines, set the default values to 14, 18 and 40 respectively. Each instance should have attributes .rows, .cols and  .mines, equivalent to the values of the th",
    "tags": [
      "classes",
      "games",
      "loops",
      "arrays"
    ],
    "title": "OOP Minesweeper"
  },
  {
    "_id": "BP4nrcAhaZzKeDq5y",
    "difficulty": 3.8823529411764706,
    "language": "python3",
    "summary": "An anagram is a word formed by rearranging the letters of a different word using all the original letters exactly once.\n\nThe function is given two strings: s - to search in, p - a template word. Find the starting indexes of anagrams of p among substrings of the given s.\n\nExamples\nfind_anagrams(\"cbaebabacd\", \"abc\") ➞ [0, 6]\nAnagrams: \"cba\", \"bac\"\n\nfind_anagrams",
    "tags": [
      "algorithms",
      "logic",
      "strings"
    ],
    "title": "Find All Anagrams in a String"
  },
  {
    "_id": "xjC7TM77RbrT6PhQ2",
    "difficulty": 3.888888888888889,
    "language": "python3",
    "summary": "Deep inside a secure mountain facility there exists a group of switches arranged\nin a horizontal row. The rightmost switch can be flipped on or off at any time.\nAny other switch can be toggled only if the switch to its immediate right is\nturned on and all other switches to the right are turned off.\n\nAll the switches are initially off. Improvise a function that",
    "tags": [
      "logic",
      "algorithms"
    ],
    "title": "Doomsday Switches"
  },
  {
    "_id": "PMbf4ktWRLTrh4YQA",
    "difficulty": 3.892857142857143,
    "language": "python3",
    "summary": "Create a function that returns the date in DDMMYYYY format after a specific date. Consider leap years and leap months (e.g. February 29th). Please do not import anything (such as datetime).\n\nExamples\naddndaystoa_date(\"15041984\", 6038) ➞ \"26102000\"\n\naddndaystoa_date(\"26102000\", 6038)) ➞ \"08052017\"\n\naddndaystoa_date(\"01011900\", 30) ➞ \"31011900\"\n\nNotes\nRemember t",
    "tags": [
      "algorithms",
      "loops",
      "conditions",
      "dates"
    ],
    "title": "What's the Date after N Days?"
  },
  {
    "_id": "SD4DDZ66S9HE8yXgi",
    "difficulty": 3.892857142857143,
    "language": "python3",
    "summary": "Given a string containing just the characters ( and ), find the length of the longest valid (well-formed) parentheses substring.\n\nExamples\nlongestvalidparentheses(\"(()\") ➞ 2\nLongest valid parentheses substring is \"()\"\n\nlongestvalidparentheses(\")()())\") ➞ 4\nLongest valid parentheses substring is \"()()\"\n\nlongestvalidparentheses(\"()))))(()())(\") ➞ 6\n\nNotes\nN/A",
    "tags": [
      "algorithms",
      "higher_order_functions",
      "logic",
      "strings"
    ],
    "title": "Longest Valid Parentheses"
  },
  {
    "_id": "3tXhgp8BSCkgJvbLc",
    "difficulty": 3.9,
    "language": "python3",
    "summary": "A popular puzzle is where you are given a list of word fragments and have to combine them to form a set of words such that each fragment is used only once.\n\nFor this challenge, write a function that takes a list of fragments and returns a sorted list of 20 words which can be made from them.\n\nExample\nfind_words([\"er\", \"haw\", \"as\", \"dock\", \"yuc\", \"prim\", \"ia\", \"",
    "tags": [
      "algorithms",
      "loops",
      "math",
      "strings"
    ],
    "title": "Find the Words That Fit the Fragments"
  },
  {
    "_id": "4qyMEPtE86Kv8sztw",
    "difficulty": 3.9130434782608696,
    "language": "python3",
    "summary": "Adding fractional binary numbers  is similar to adding decimals. The places to the right of the decimal point (or binary point) are halves, quarters, eighths instead of tenths, hundredths, thousandths, etc.\n\nImprovise a function that takes two fractional binary numbers and produces their base-10 sum. The sum can be a whole number, a fraction, or a mixed number",
    "tags": [
      "numbers"
    ],
    "title": "Binary Sums"
  },
  {
    "_id": "KCmjq9m5dKoRFyHBd",
    "difficulty": 3.923076923076923,
    "language": "python3",
    "summary": "This challenge concerns non-convex polygons, such as the two polygons depicted below.\nNon-convex polygons\n\nOne special property of non-convex polygons is that, for some of their vertices, the angle around that vertex that is contained inside the polygon is a reflex angle, i.e. an angle of more than 180 degrees. For this reason:\nIn the left polygon above we say",
    "tags": [
      "math",
      "trigonometry",
      "algebra"
    ],
    "title": "Finding the Inside Angle"
  },
  {
    "_id": "y9m4td5SnnZFwCFdB",
    "difficulty": 3.923076923076923,
    "language": "python3",
    "summary": "In Trifid Cipher, encoding is done by using a table to fractionate each plaintext letter into a trigram, mixes the constituents of the trigrams, and then applies the table in reverse to turn these mixed trigrams into ciphertext letters.\n\nCreate a function that takes three arguments; a 27 letter key, a break period, and a string containing the message to be enc",
    "tags": [
      "cryptography",
      "logic",
      "strings",
      "algorithms",
      "numbers"
    ],
    "title": "Trifid Cipher"
  },
  {
    "_id": "Rep3fHbrLGKDatZ2L",
    "difficulty": 3.925925925925926,
    "language": "python3",
    "summary": "You will be given a string that is made up of some repeated pattern of characters. However, one of the characters in the string will be missing and replaced by an underscore. Write a function that returns the missing character.\n\nExamples\ncompletepattern(\"ABCABCACAB\") ➞ \"B\"\n\ncompletepattern(\"ABAABAABA\") ➞ \"A\"\n\ncompletepattern(\"X+XX+XX+X\") ➞ \"*\"\n\nNotes\nThe patte",
    "tags": [
      "strings"
    ],
    "title": "Complete the Pattern"
  },
  {
    "_id": "JD3bZQMfqN5ySwd67",
    "difficulty": 3.9310344827586206,
    "language": "python3",
    "summary": "A Vampire Number is a positive integer greater than 99, that rearranged in all of its possible digits permutations, with every permutation being split into two parts, is equal to the product of at least one of its permutations.\n\nIf the number has an even quantity of digits, left and right parts will have the same length in every permutation;\nIf the number has",
    "tags": [
      "numbers",
      "algorithms",
      "recursion",
      "higher_order_functions"
    ],
    "title": "Vampire Numbers"
  },
  {
    "_id": "riTNEpgoXmjtm2htL",
    "difficulty": 3.933333333333333,
    "language": "python3",
    "summary": "The function is given an integer n. Count the numbers with unique digits in the range 0 <= num < pow(10, n).\n\nExamples\nnumswithunique_digits(2) ➞ 91\nThere are 100 numbers in total (from 0 to 99 inclusive).\nThe following 9 numbers should not be counted:\n11, 22, 33, 44, 55, 66, 77, 88, 99\nThus 100 – 9 ➞ 91\n\nNotes\nN/A",
    "tags": [
      "math",
      "numbers",
      "loops"
    ],
    "title": "Calculate How Many Numbers with Unique Digits"
  },
  {
    "_id": "MrySrdhd93xLGoRJj",
    "difficulty": 3.933333333333333,
    "language": "python3",
    "summary": "The function is given a string with lower-case characters. Split the string into as many substrings as possible such that each character appears in only one substring. Return the list of lengths of the resulting substrings.\n\nExamples\nsplit_string(\"abbccc\"), [1, 2, 3]\n\"a\", \"bb\", \"ccc\"\n\nsplit_string(\"abbacdceef\"), [4, 3, 2, 1]\n\"abba\", \"cdc\", \"ee\", \"f\"\n\nsplit_str",
    "tags": [
      "algorithms",
      "conditions",
      "recursion",
      "strings"
    ],
    "title": "Split the String into Substrings with Non-overlapping Characters"
  },
  {
    "_id": "XLCjkZrWtqTqTjr8R",
    "difficulty": 3.933333333333333,
    "language": "python3",
    "summary": "The function is given a balanced parentheses string. Each open \"(\" has corresponding closed \")\". Compute the total score based on the following rules:\nSubstring s = \"()\" has score 1,\nSubstring \"s1s2\" has total score as score of \"s1\" + score of \"s2\",\nSubstring \"(s)\" has total score as 2 *  score of \"s\".\n\nCalculate the total score of the given expression and ret",
    "tags": [
      "algorithms",
      "logic",
      "regex",
      "strings"
    ],
    "title": "Evaluate the Group of Parentheses"
  },
  {
    "_id": "A9uWEWtYEfTCcPvjE",
    "difficulty": 3.9375,
    "language": "python3",
    "summary": "Create a function that returns a list of the most important items purchasable with a given budget. You will be given a dictionary dct containing items and their respective price and importance, and you will also be given a budget b to restrict the number of items you can buy. The importance can only be from 1-10, whereas the price and budget can be anything.",
    "tags": [
      "arrays",
      "logic",
      "numbers"
    ],
    "title": "Sorting by Price and Importance"
  },
  {
    "_id": "QjPx2StBs65wQxJKW",
    "difficulty": 3.9375,
    "language": "python3",
    "summary": "The function is given a string consisting from letters and digits. Each letter in the string can be changed to lower-case and upper-case; the digits stay as they are in their positions. Generate all possible strings and return them as set.\n\nExamples\ngen_strings(\"1A2\") ➞ { \"1A2\", \"1a2\" }\n\ngen_strings(\"a1B\") ➞ { \"A1B\", \"A1b\", \"a1B\", \"a1b\" }\n\ngen_strings(\"1a2bC3\"",
    "tags": [
      "algorithms",
      "conditions",
      "loops",
      "strings"
    ],
    "title": "Generate Different Strings"
  },
  {
    "_id": "GDhC264fpcFGjv93E",
    "difficulty": 3.9411764705882355,
    "language": "python3",
    "summary": "Given the number of dice and the sum we want to get the chance of, return the chance rounded to 2 decimals, formatted as shown (with the % at the end).\n\nExamples\nchance(3, 6) ➞ \"4.63%\"\nThere is approximately 4.63% chance for rolling 6 with 3 dice.\n\nchance(5, 20) ➞ \"8.37%\"\n\nchance(2, 7) ➞ \"16.67%\"\n\nNotes\nN/A",
    "tags": [
      "algorithms",
      "games",
      "loops",
      "math"
    ],
    "title": "Chance of a Specific Sum for N Dice"
  },
  {
    "_id": "dF6SN2HKs8rieJxge",
    "difficulty": 3.9411764705882355,
    "language": "python3",
    "summary": "The function is given a string consisting of a mix of three characters representing which direction a domino is tilted:\n\"R\" tilted to the right\n\"L\" tilted to the left\n\"I\" standing up, not tilted\n\nThe string represents the initial state of the assembly. After a time click the overall state can change. The tilted dominoes tend to tilt their standing-up neighbors",
    "tags": [
      "algorithms",
      "logic",
      "regex",
      "strings"
    ],
    "title": "Let the Dominoes Fall Down"
  },
  {
    "_id": "3PrZh48QcFF7F9nBZ",
    "difficulty": 3.9473684210526314,
    "language": "python3",
    "summary": "Create a function that takes a first-degree equation as  a string and solves it. If there would be more than one solution, the function must return \"Infinite solutions\".\n\nExamples\nsolver(\"2*x + 1 = x\") ➞ -1.0\n\nsolver(\"7*x + x - 4 = 0\") ➞ 0.5\n\nsolver(\"x = x\") ➞ \"Infinite solutions\"\n\nNotes\nThe given variable is always \"x\".",
    "tags": [
      "algebra",
      "math",
      "algorithms"
    ],
    "title": "First-Degree Equation"
  },
  {
    "_id": "3RuQwqfrzSR6afAgz",
    "difficulty": 3.95,
    "language": "python3",
    "summary": "In Rail Fence Cipher encoding is done by by placing each character successively in a diagonal along a set of rails.\n\nCreate a function that takes two arguments; a string and the number of rails, and returns the encoded message.\n\nmessage = \"WEAREDISCOVEREDFLEEATONCE\"\nrails = 3\n\nrailfencecipher(message, rails) ➞ \"WECRLTEERDSOEEFEAOCAIVDEN\"\n\nIn above example, giv",
    "tags": [
      "cryptography",
      "algorithms",
      "strings"
    ],
    "title": "Rail Fence Cipher"
  },
  {
    "_id": "WD5afSjoPDub5bc6J",
    "difficulty": 3.9523809523809526,
    "language": "python3",
    "summary": "In number theory, the Padovan sequence is the sequence of integers P(n) defined by the initial values:\n\nP(0) = P(1) = P(2) = 1\n\nAnd the recurrence relation:\n\nP(n) = P(n-2) + P(n-3)\n\nAs with any sequence defined by a recurrence relation, Padovan numbers P(m) for m<0 can be defined by rewriting the recurrence relation as:\n\nP(m) = P(m+3) - P(m+1)\n\nObjective\nCreat",
    "tags": [
      "numbers",
      "math"
    ],
    "title": "Padovan Sequence"
  },
  {
    "_id": "fuort7EEZz4pWjjQk",
    "difficulty": 3.9545454545454546,
    "language": "python3",
    "summary": "Create a function that takes a list of numbers with unknowns and returns its sum.\n\nExamples\nadd([\"9\", \"-8\", \"8a\", \"-8a\", \"9de\", \"-9de\"]) ➞ [\"1.0\"]\n\nadd([\"8a\", \"-7a\", \"8de\", \"-7de\", \"0.1a\", \"7\"]) ➞ [\"7.0\", 1.1a\", \"1.0de\"]\n\nadd([\"-7\", \"7\", \"8de\", \"-7de\"]) ➞ [\"1.0de\"]\n\nNotes\nNumbers and unknowns will be a string and output should be too.",
    "tags": [
      "math",
      "algebra",
      "numbers",
      "logic"
    ],
    "title": "Adding Numbers with Unknowns"
  },
  {
    "_id": "5hiiBo2RNRqCcRk2u",
    "difficulty": 3.9565217391304346,
    "language": "python3",
    "summary": "Write a function that extracts the upper and lower bounds of the elements in the list, value-wise, including its corresponding index, list-wise. Although these tasks are achievable with the use of some built-in Array functions, the purpose and intent of this challenge is for your to solve it recursively.\n\nOutput Structure:\n[{index: lowerbound}, {index: upperbo",
    "tags": [
      "recursion",
      "arrays"
    ],
    "title": "Recursion: Extreme Indices and Values"
  },
  {
    "_id": "cWa7EnvQByXk6ALWK",
    "difficulty": 3.9615384615384617,
    "language": "python3",
    "summary": "The golden ratio is ubiquitous in math, science, art, and nature. This challenge is concerned with the number itself, which is 1.618033988 to 10 significant digits. Implement a function that calculates the golden ratio to 100 significant digits using only integers, strings and basic arithmetic operations: +, -, *, //\n\nExamples\ngolden_ratio() ➞ 1.618033988+90 m",
    "tags": [
      "math",
      "numbers",
      "strings"
    ],
    "title": "The Golden Ratio"
  },
  {
    "_id": "ZoMQqRJZ3c34TEiBS",
    "difficulty": 3.966666666666667,
    "language": "python3",
    "summary": "The Playfair cipher is a substitution cipher that uses digraphs (pairs of letters) instead of single letters, and makes use of symmetrical encryption.\n\nThere are some variations on the rules of encipherment. One version of the cipher\nrules is outlined below:\n\nA 5x5 Polybius square is constructed, deranged with a keyword.\n\nkeyword = python\n\n  First, fill in the",
    "tags": [
      "algorithms",
      "cryptography",
      "loops"
    ],
    "title": "Playfair Cipher"
  },
  {
    "_id": "zNogspvazYRnQuqeS",
    "difficulty": 3.966666666666667,
    "language": "python3",
    "summary": "In this challenge, you are tasked to return the syllables of a word in a list. To find a syllables, if one consonant follows a vowel, divide the word between the vowel and the consonant. if two consonants follow a vowel, divide the word between the two consonants. However, when the last letter is \"e\", if the letter before it is a consonant, it would become a s",
    "tags": [
      "algorithms",
      "regex",
      "validation",
      "logic"
    ],
    "title": "Syllables of a Word"
  },
  {
    "_id": "5DhQ5d8QHYJGobeby",
    "difficulty": 4,
    "language": "python3",
    "summary": "A brick in the shape of a cube sits on a heated surface capable of heating the bottom of the brick to a constant temperature of 90 degrees. The air around the brick is a constant 25 degrees. A perpendicular section through the center of the brick is a 10x10 array showing the temperature at each of 100 points.\n\nLet's specify that we can determine the temperatur",
    "tags": [
      "arrays",
      "loops",
      "math"
    ],
    "title": "A Hot Brick"
  },
  {
    "_id": "GAg5sxrwDs5Mg7N9G",
    "difficulty": 4,
    "language": "python3",
    "summary": "Create a function that takes a temperature scale and a  temperature measurement as arguments and returns a list with the conversion of such measurement to different scales.\n\nName | Input | Symbol\n:--- | --- | ---\nCelsius | cel | degC\nFahrenheit | fah | degF\nKelvin | kel | K\nRankine | ran | degR\nDelisle | del | degDe\nNewton | new | degN\nRéaumur | rea | degRe\nRø",
    "tags": [
      "physics",
      "math"
    ],
    "title": "Conversion of Units of Temperature"
  },
  {
    "_id": "LQGos6vtz3WDCQ32M",
    "difficulty": 4,
    "language": "python3",
    "summary": "The number 6174 is a really mysterious number. At first glance, it might not seem so obvious. But as we are about to see, anyone who can subtract can uncover the mystery that makes 6174 so special.\n\nIn 1949 the mathematician D. R. Kaprekar devised a process now known as Kaprekar's operation. First choose a four digit number where the digits are not all the sam",
    "tags": [
      "numbers",
      "math"
    ],
    "title": "The Mysterious Number 6174"
  },
  {
    "_id": "pMbki4f2BA8R5vbXs",
    "difficulty": 4,
    "language": "python3",
    "summary": "Finding an even integer in an list is kind of trivial and superficial to most programming enthusiasts. This challenge will take it to the next level.\n\nWrite a function that returns the largest even integer in a list with its corresponding index and the parity of that index, but determining the parity of that index is limited to not using the modulo operator %.",
    "tags": [
      "recursion",
      "arrays",
      "numbers"
    ],
    "title": "Recursion: Index Parity of Largest Even"
  },
  {
    "_id": "urbmPbcjGPygd9G8u",
    "difficulty": 4,
    "language": "python3",
    "summary": "Create a function that takes a number n and returns all the terms of the Baum-Sweet sequence, from 0 to n (included).\n\nThe Baum-Sweet sequence is the sequence of numbers bi such that bi = 1 if the binary representation of i contains no block of consecutive 0 of odd length, and bi = 0 otherwise.\n\nExamples\nbaum_sweet(0) ➞ \"0\"\n\nbaum_sweet(1) ➞ \"01\"\n\nbaum_sweet(10",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "Baum-Sweet Sequence"
  },
  {
    "_id": "ycoDry6Mwh6uaorM2",
    "difficulty": 4,
    "language": "python3",
    "summary": "A black hole is a region of spacetime where gravity is so strong that nothing⁠ — no particles or even electromagnetic radiation such as light ⁠— can escape from it.\n\nThe Schwarzschild radius (sometimes historically referred to as the gravitational radius) is a physical parameter that shows up in the Schwarzschild solution to Einstein's field equations, corresp",
    "tags": [
      "physics",
      "math"
    ],
    "title": "Black Holes"
  },
  {
    "_id": "xTKQ3zYZ7gY7fBpr9",
    "difficulty": 4,
    "language": "python3",
    "summary": "This challenge is an extension of Helen Yu's  Can You Exit the Maze? and Can You Enter the Cave?. Most of the test cases come from her challenge with a few new ones of my own.\n\nInstead of finding a path through the maze, you must find all connected paths - paths where you can walk from one cell to another either by doing up or down or left or right. Not diagon",
    "tags": [
      "functional_programming",
      "arrays"
    ],
    "title": "How Many Paths?"
  },
  {
    "_id": "hPtHit4fyRJffu5nw",
    "difficulty": 4,
    "language": "python3",
    "summary": "In Ragbaby Cipher, encoding is done by a string of keys and their position in the plaintext word of a message.\n\nCreate a function that takes two arguments, key and message, and returns the encoded message.\n\nThere are some variations on the rules of encipherment. One version of the cipher rules are outlined below:\n\nmessage = \"This is an example.\"\nkey = \"cipher\"",
    "tags": [
      "cryptography",
      "algorithms",
      "strings",
      "logic"
    ],
    "title": "Ragbaby Cipher"
  },
  {
    "_id": "hS2g8KDw2sk6QjKgb",
    "difficulty": 4,
    "language": "python3",
    "summary": "The function is given a list of particles. The absolute value represents the particle mass. The sign of value represents the direction of movement:\nPositive values move to the right.\nNegative values move to the left.\n\nA positive value located on the left will collide with a negative value immediately located on the right. The particle with the greater mass wil",
    "tags": [
      "algorithms",
      "games",
      "logic",
      "loops"
    ],
    "title": "Moving Particles Absorb Each Other after Collisions"
  },
  {
    "_id": "JtpjP92afQGEKyCim",
    "difficulty": 4,
    "language": "python3",
    "summary": "The function is given a list of lists of certain length n. Each element in the list is a cell marked by the list index from 0 to n - 1. Each cell contains keys - as list of integers - to other cells in the list. The cell 0 is open; that is where you find first keys to other cells. Open those cells and find new keys again. Go open other cells with new keys. Kee",
    "tags": [
      "algorithms",
      "arrays",
      "games",
      "logic"
    ],
    "title": "Open All Cells If Possible"
  },
  {
    "_id": "g7sh7oLoArRLmM2ky",
    "difficulty": 4.033333333333333,
    "language": "python3",
    "summary": "This challenge makes use of a modified Baconian (Francis Bacon) cipher. The following is an example of a (modified) Baconian ciphertext:\n\nciphertext = \"KNowlEDgE ITsElf Is power.\"\n\nThe peculiar capitalisation might, at first glance, suggest that either the lowercase or uppercase letters contain, or code for, the hidden message (upper = \"KNEDEITEI\", lower = \"ow",
    "tags": [
      "conditions",
      "cryptography",
      "loops",
      "strings"
    ],
    "title": "Hidden in Plain Sight"
  },
  {
    "_id": "F3QP7JBD5aCrFD8aj",
    "difficulty": 4.055555555555555,
    "language": "python3",
    "summary": "Ava, Mark, Sheila, and Pete are at a party. However, Ava and Sheila are only staying if there are at least 4 people, Pete is only staying if there's 1 person, and Mark is only staying if there are at least 5 people. Therefore, Mark leaves, which makes Ava and Sheila leave, and Pete is left alone.\n\nGiven a list with the preferences of every person at a party fo",
    "tags": [
      "algorithms",
      "loops",
      "numbers"
    ],
    "title": "Party People Part II: Make it Efficient"
  },
  {
    "_id": "3oyGFABKKpk2XMhMN",
    "difficulty": 4.066666666666666,
    "language": "python3",
    "summary": "Ben draws shape(s) with 1s in a list of lists. Ben wants to calculate the area of the shape(s) he has drawn. However, his shapes are not always a valid shape. A valid shape should be enclosed.\n\nIf the shape is not enclosed (invalid), it would have an area of 0. If the shape is just a dot (a single '1' is enclosed on a point), it would be an infinitely small po",
    "tags": [
      "algorithms",
      "arrays",
      "numbers"
    ],
    "title": "Area of a List"
  },
  {
    "_id": "q9gmGpcurXFcso2kg",
    "difficulty": 4.066666666666666,
    "language": "python3",
    "summary": "Modify the inefficient code in the Code tab so it can pass the tests.\n\nExamples\nmod(7, 6) ➞ 0\n\nmod(8, 6) ➞ 0\n\nmod(9, 6) ➞ 0\n\nmod(32345453245, 25433) ➞ 10232\n\nNotes\nThe variables will be natural numbers.\nIf the loop has to sweep the entire range ran it will overload.",
    "tags": [
      "math",
      "algebra",
      "bugs"
    ],
    "title": "Modular Arithmetic (Part #4)"
  },
  {
    "_id": "hM9eDtYLEX8GnuhFZ",
    "difficulty": 4.071428571428571,
    "language": "python3",
    "summary": "A simple random number generator or, as more properly called, a linear congruential generator can be demonstrated by the equation x1 = (a*x0+1)%65535. a, x0, and x1 are non-negative integers less than 65535.  The equation is seeded with x0.  The first number generated, x1, is then used as the seed for the next round and so on.  If we choose a=7 and x0=12345 th",
    "tags": [
      "algorithms",
      "games",
      "math"
    ],
    "title": "Random Number Generator"
  },
  {
    "_id": "FKfPSYG6q7qko9i8b",
    "difficulty": 4.083333333333333,
    "language": "python3",
    "summary": "A weird number is a natural number that is abundant but not semiperfect. An abundant number is a number for which the sum of its proper divisors is greater than the number itself. A positive divisor of n which is different from n is called a proper divisor  of n. A semiperfect number is a natural number n that is equal to the sum of all or some of its proper d",
    "tags": [
      "numbers",
      "math"
    ],
    "title": "Weird Numbers"
  },
  {
    "_id": "wx8DuvZ98BAcPAT8i",
    "difficulty": 4.1,
    "language": "python3",
    "summary": "There are 3 adjacent slots - L, M and R - which can each hold a number of discs. L can hold 3 discs, M can hold 2 and L 3. The total number of discs can vary  from 3 to 5, and the discs are numbered 1, 2, 3 and up to 5. From a given  configuration of discs, it is possible to move 1 disc at a time provided the disc concerned is top of its slot and there is an a",
    "tags": [
      "algorithms",
      "data_structures",
      "games"
    ],
    "title": "Move the Discs"
  },
  {
    "_id": "q5ewAererA4kxMdpw",
    "difficulty": 4.1,
    "language": "python3",
    "summary": "In this challenge, we make use of the FourVector class we created in the first three challenges of this series (part 1, part 2, and part 3). We will turn to a (simplified) two-body decay, i.e. one particle decays into two daughter particles. This is a typical situation e.g. in particle physics experiments.\n\nPlease extend the FourVector class by a method GetInv",
    "tags": [
      "physics",
      "math",
      "classes"
    ],
    "title": "Four Vectors Part 4: 2 Body Decay"
  },
  {
    "_id": "Mkt3yqQMsw9e3Jmjq",
    "difficulty": 4.125,
    "language": "python3",
    "summary": "Write a function which, given a permutation of [0, 1, ..., n-1] ( n>0) represented by a shuffled list, returns the permutation in disjoint cycle form as a set of tuples.\n\nA permutation is a particular (re)ordering of a set of objects. For example, [1,3,0,4] is a permutation on the 4 objects [0,1,2,3].\nIn this problem, we represent permutations on n objects as",
    "tags": [
      "math",
      "algorithms",
      "loops",
      "data_structures"
    ],
    "title": "Permutation as Disjoint Cycle Form"
  },
  {
    "_id": "TdH9bXNiRLTyY8mjR",
    "difficulty": 4.125,
    "language": "python3",
    "summary": "In this challenge, you will be given a set of points in the plane, which we can visualize as on the left below:\n\nBy connecting the points, one obtains a convex polygon containing all points, as on the right.\n\nWrite a function that, given a set of points, returns only the outer points (i.e. the vertices of the polygon (in the illustration, these are points circ",
    "tags": [
      "math",
      "trigonometry",
      "algebra"
    ],
    "title": "Find the Outer Points"
  },
  {
    "_id": "WE7CmHLGdz7jzkJX6",
    "difficulty": 4.125,
    "language": "python3",
    "summary": "A complex number is a number that can be expressed in the form a + bj, where a and b are real numbers, and j is a solution of the equation x² = −1. Because no real number satisfies this equation, j is called an imaginary number. For the complex number  a + bj, a is called the real part, and b is called the imaginary part.\n\nCreate a function that takes a list o",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "Complex Numbers"
  },
  {
    "_id": "F4dSNMqPCa2QztPWw",
    "difficulty": 4.133333333333334,
    "language": "python3",
    "summary": "Write a function that checks if a given sequence of digits is an additive sequence, i.e. if the sequence can be split into a sequence of numbers where each number is the sum of the previous two numbers.\n\nFor example:\n\n\"12988110101891\"\n\n... is an additive sequence since it can be split into the sequence:\n\n129, 881, 1010, 1891\n\n... and 129 + 881 = 1010, 881 + 10",
    "tags": [
      "algebra",
      "algorithms",
      "math",
      "numbers",
      "validation"
    ],
    "title": "Additive Number"
  },
  {
    "_id": "kvJrazoaQN7iwNeGw",
    "difficulty": 4.133333333333334,
    "language": "python3",
    "summary": "Write a function that can simulate a crawling snake.\n\nAlternative Text\n\nInput\nfield — A rectangular matrix, list of lists, consisting of numbers corresponding to: 0 – empty cell, 1 – food, 2 – the head of the snake.\nmoves — A list of tuples.\n\nEach tuple represents the following moves:\n(1, 0) — Down\n(0, 1) — Right\n(-1, 0) — Up\n(0, -1) — Left\n\nOutput\nThe final p",
    "tags": [
      "games",
      "language_fundamentals",
      "loops"
    ],
    "title": "Snake Game"
  },
  {
    "_id": "C9LBX4DpgNj2nmLb3",
    "difficulty": 4.136363636363637,
    "language": "python3",
    "summary": "This challenge involves finding words in an 8x8 grid. Given a string of 64 letters and a list of words to find, convert the string to an 8x8 list, and return True if all words can be found in the list. Return False otherwise. Words can be read in any direction (horizontally, vertically or diagonally), and can also wrap over the same column, row or diagonal.\n\nE",
    "tags": [
      "arrays",
      "strings"
    ],
    "title": "Word Search (Part 2)"
  },
  {
    "_id": "PgivAghJdMY7HM2pK",
    "difficulty": 4.136363636363637,
    "language": "python3",
    "summary": "In this challenge, we extend the FourVector class we created in the first installment of the FourVector collection.\n\nSo, please add the following features to the class FourVector:\nSupport multiplication of Four Vectors (FV). This should include multiplication of two FVs as well as multiplications 'scalar times FV' and 'FV times scalar'. Think about magic metho",
    "tags": [
      "physics",
      "math",
      "classes"
    ],
    "title": "Four Vectors Part 2: Multiplication and Lengthes"
  },
  {
    "_id": "aiD5rAhqGLzefNCm9",
    "difficulty": 4.137931034482759,
    "language": "python3",
    "summary": "Make a function that returns True if an integer is prime or False if the number is composite. All test cases are of very large numbers, so trial division won't cut it.\n\nExamples\nis_prime(308860934436978480666476812207644303437) ➞ True\nThe only factors for this number are 1 and itself.\n\nis_prime(27464981106643782905056206820270083251) ➞ False\nThis equals 138030",
    "tags": [
      "numbers",
      "cryptography",
      "algorithms"
    ],
    "title": "Huge Prime Numbers"
  },
  {
    "_id": "qRnX8DpgWJJfbq3xT",
    "difficulty": 4.142857142857143,
    "language": "python3",
    "summary": "Connect Four is a two-player connection board game, in which the players choose a color and then take turns dropping colored discs into a seven-column, six-row vertically suspended grid.\n\nThe game has two players: yellow and red while columns are named from \"A\" to \"G\". The first player who connects four items of the same color is the winner.\n\nAlternative Text",
    "tags": [
      "algorithms",
      "games",
      "logic",
      "validation",
      "strings"
    ],
    "title": "Connect Four Winner"
  },
  {
    "_id": "mQRuBEp8tauB6jaDN",
    "difficulty": 4.15,
    "language": "python3",
    "summary": "As a programmer in a forensic laboratory, you have been asked to write a function to decode a bitmap image of a digital clock to determine what time it was when the image was created. The bitmap image has been converted to a string of binary digits 0 or 1 where 0 represents a white background pixel and 1 represents a black pixel. You must convert this binary s",
    "tags": [
      "arrays",
      "data_structures",
      "strings"
    ],
    "title": "Character Recognition ⁠— What's the Time?"
  },
  {
    "_id": "E4z58TQyDtjRRZbe5",
    "difficulty": 4.15,
    "language": "python3",
    "summary": "The function is given a string consisting from \"0\", \"1\" characters. The string represents a parking area:\n\"1\" - the slot is occupied,\n\"0\" - the slot is vacant.\n\nFind a vacant slot such that it has the maximum distance from an occupied one. It can be at the ends of the area or between two \"1\"s. Return the maximum distance as integer.\n\nExamples\nmax_distance(\"01\"",
    "tags": [
      "algorithms",
      "logic",
      "loops",
      "strings"
    ],
    "title": "Maxim Distance to the Nearest Occupied Slot"
  },
  {
    "_id": "SnxEJqKzvsEpufRR8",
    "difficulty": 4.1875,
    "language": "python3",
    "summary": "Find the roots of the equation Ax^3 + Bx^2 + Cx + D = 0. The function is given with the four coefficients A, B, C, D and returns a sorted tuple (x1, x2, x3) of roots.\n\nExamples\nfind_roots(1, 13, -109, 95) ➞ (-19, 1, 5)\n\nfind_roots(1, -9, -169, 561) ➞ (-11, 3, 17)\n\nfind_roots(16, -80, -416, 1920) ➞ (-5, 4, 6)\n\nNotes\nAll roots in the Tests are integers.\nYou may",
    "tags": [
      "math",
      "algorithms",
      "numbers"
    ],
    "title": "Roots of Cubic Equation"
  },
  {
    "_id": "zpQBqTuoFFbbL2pM2",
    "difficulty": 4.230769230769231,
    "language": "python3",
    "summary": "Merge two sorted linked-lists and return it as a new sorted linked-list. The new linked-list should be made by splicing together the nodes of two linked-lists.\n\nAlternative Text\n\nInput\nThe class for nodes of the singly-linked list is defined in the Tests tab. The linked-lists are made from the data of ordinary lists and provided into the function. Each node co",
    "tags": [
      "classes",
      "data_structures"
    ],
    "title": "Merge Two Sorted Lists"
  },
  {
    "_id": "w9aHZ5tABb7vPTLLr",
    "difficulty": 4.285714285714286,
    "language": "python3",
    "summary": "Create a function that counts how many n-digit numbers have the same sum of the first half and second half of the digits (“lucky” numbers). The number n is even. For example, for n = 6, the numbers \"001010\", \"112220\", \"000000\" are lucky.\n\nExamples\nlucky_ticket(2) ➞ 10\n\nlucky_ticket(4) ➞ 670\n\nlucky_ticket(12) ➞ 39581170420\n\nNotes\nThe function should be really e",
    "tags": [
      "algorithms",
      "logic",
      "numbers",
      "math"
    ],
    "title": "Number of Lucky Tickets"
  },
  {
    "_id": "rrzfvgZysom6yERdf",
    "difficulty": 4.294117647058823,
    "language": "python3",
    "summary": "In the card game poker, a hand consists of five cards and are ranked, from lowest to highest, in the following way:\n\nS.No.|Hand Rank|Explanation\n---|---|---\n1|High Card| Highest value card.\n2|One Pair| Two cards of the same value.\n3|Two Pairs|Two different pairs.\n4|Three of a Kind| Three cards of the same value.\n5|Straight| All cards are consecutive values.\n6|",
    "tags": [
      "arrays",
      "games",
      "logic"
    ],
    "title": "Poker Hands"
  },
  {
    "_id": "yQ27P5P3x8fXzCetN",
    "difficulty": 4.294117647058823,
    "language": "python3",
    "summary": "Consider this unremarkable list of integers: [525, 238, 401]. It does have one unusual trait⁠—every member of the list represents one common number but in a different number base. In this case, that common number is 197 (base 10).\n\n197 = 525 in base 6\n197 = 238 in base 9\n197 = 401 in base 7\n\nSometimes there is more than one possible common number. The list [10",
    "tags": [
      "numbers",
      "math"
    ],
    "title": "Number Base Puzzle"
  },
  {
    "_id": "zpxHSwZJTpasGtwbb",
    "difficulty": 4.3,
    "language": "python3",
    "summary": "The bookstore from this collection is adamant in using eval(), but has moved the users dictionary into a class to prevent copying. The checkauser(name) function returns entries in users which match a given username. Create a query that copies users to res.\n\nExamples\nres = eval(\"checkauser({})\".format(user_name),\n           {'checkauser': checkauser})\n\nprint(re",
    "tags": [
      "classes",
      "data_structures",
      "games",
      "logic"
    ],
    "title": "Injection IV.E: Inside the Class"
  },
  {
    "_id": "im47j9ax22Z5MgqvW",
    "difficulty": 4.315789473684211,
    "language": "python3",
    "summary": "Create a function that takes a numeral (just digits without separators (e.g. 19093 instead of 19,093) and returns the standard way of reading a number, complete with punctuation.\n\nExamples\nsaythenumber(0) ➞ \"Zero.\"\n\nsaythenumber(11) ➞ \"Eleven.\"\n\nsaythenumber(1043283) ➞ \"One million, forty three thousand, two hundred and eighty three.\"\n\nsaythenumber(90376000010",
    "tags": [
      "algorithms",
      "logic",
      "numbers",
      "data_structures"
    ],
    "title": "Say the Number!"
  },
  {
    "_id": "5NaYQXAvzCyQh3aQq",
    "difficulty": 4.333333333333333,
    "language": "python3",
    "summary": "Ogmo is a wizard that has been imprisoned in a dungeon. He needs your help.\n\nCreate a function that takes the map of a dungeon as an argument and prints a new map that indicates the shortest path to escape from the dungeon, as well as the minimum number of steps to reach the exit and the escape sequence.\n\nOgmo starts inside the dungeon in the position indicate",
    "tags": [
      "arrays",
      "games"
    ],
    "title": "Escape the Dungeon I"
  },
  {
    "_id": "Zzmb2LRbjzq3b2kYw",
    "difficulty": 4.333333333333333,
    "language": "python3",
    "summary": "A trie is a specialized type of tree data structure. When used in the context of a dictionary, each node stores the entire alphabet, and words can be reTRIEved by traversing down a branch part of the tree. The structure of a trie tree is a set of linked tries emanating from a head trie. Each trie contains a set of pointers (child tries), one for each alphabeti",
    "tags": [
      "classes",
      "data_structures",
      "recursion"
    ],
    "title": "Fancy a Dictionary? Give it a Trie!"
  },
  {
    "_id": "gmSobpNTMTTHbXmZM",
    "difficulty": 4.333333333333333,
    "language": "python3",
    "summary": "You are given a list of distinct (x, y) coordinates. Create a function that returns how many rectangles these points form on the plane.\n\nExamples\nrectangles([(1, 1), (2, 1), (1, 2), (2, 2)]) ➞ 1\n\nrectangles([(1, 1), (2, 1), (1, 2), (2, 2), (3, 1), (3, 2)]) ➞ 3\n\nrectangles([(1, 1), (1, 2), (2, 1), (2, 2), (3, 1), (3, 2), (3, 3), (2, 3), (1, 3)]) ➞ 10\nNote: We h",
    "tags": [
      "geometry",
      "math"
    ],
    "title": "Finding the Number of Rectangles"
  },
  {
    "_id": "Hp963APDWtKgtASEh",
    "difficulty": 4.357142857142857,
    "language": "python3",
    "summary": "Ogmo has been imprisoned in a dungeon (again). He needs your help (again). Clearly, Ogmo has many enemies who like dungeons.\n\nCreate a function that takes the map of a dungeon as an argument and prints a new map that indicates the shortest path to escape from the dungeon, as well as the minimum number of steps to reach the exit and the escape sequence. This ti",
    "tags": [
      "arrays",
      "games"
    ],
    "title": "Escape the Dungeon II"
  },
  {
    "_id": "hmLQQ3sj2x7oLKNAR",
    "difficulty": 4.357142857142857,
    "language": "python3",
    "summary": "Given two integers (dividend and divisor), divide two integers without using multiplication, division, and mod operator. Return the quotient after dividing the dividend by divisor.\n\nThe integer division should truncate toward zero, which means losing its fractional part. For example, truncate(8.345) = 8 and truncate(-2.7335) = -2.\n\nAssume we are dealing with a",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "Divide Two Integers"
  },
  {
    "_id": "tGksx5LM9d7E9R7Hr",
    "difficulty": 4.363636363636363,
    "language": "python3",
    "summary": "A fraction like 5x-4/(x-2)(x+1) can be expressed as the sum of 2 partial fractions of the form A/(x-2), B/(x+1) where A and B are non-zero integers. When added together, the partial fractions are equivalent to the original.\n\nGiven a fraction input as a string (e.g. 5x-4/(x-2)(x+1)), write a function that returns a list of partial fractions in string form such",
    "tags": [
      "algebra",
      "logic",
      "numbers"
    ],
    "title": "Simplified Linear Partial Fractions"
  },
  {
    "_id": "wHASn6mJgBYGXxLJ6",
    "difficulty": 4.384615384615385,
    "language": "python3",
    "summary": "Create a function that takes a string of ciphertext (English alphabet) all in lowercase, encryption function, and converts it into plain text using the affine decryption function.\n\nDecryption Function\nIn the affine cipher, the letters of an alphabet of size m are first mapped to the integers in the range 0 … m − 1. It then uses modular arithmetic to transform",
    "tags": [
      "cryptography",
      "math",
      "language_fundamentals"
    ],
    "title": "Affine Cipher Decrypt"
  },
  {
    "_id": "wE7yE3icnAsJunAiA",
    "difficulty": 4.384615384615385,
    "language": "python3",
    "summary": "The function is given two numbers begin, end that define a range of numbers, inclusive. Starting from begin apply bitwise & to the next one until the end to compute the outcome and return it.\n\nExamples\nbitwise_and(0, 1) ➞ 0\ninput  = 0:0b0 & 1:0b1\noutput = 0:0b0\n\nbitwise_and(1, 1) ➞ 1\ninput  = 1:0b1\noutput = 1:0b1\n\nbitwise_and(5, 7) ➞ 4\ninput  = 5:0b101 & 6:0b1",
    "tags": [
      "bit_operations",
      "loops",
      "math",
      "numbers"
    ],
    "title": "Bitwise AND of Numbers in the Range"
  },
  {
    "_id": "8bazXCaYM987Wvj7S",
    "difficulty": 4.4,
    "language": "python3",
    "summary": "In Iterative Rotation Cipher encoding is done by performing a series of character and substring rotations on a string input.\n\nCreate a function that takes two arguments; a positive integer and a string and returns a coded message.\n\nmessage = If you wish to make an apple pie from scratch, you must first invent the universe.\n\niterative_ciph(10, message)➞ `10 hu",
    "tags": [
      "cryptography",
      "logic",
      "strings"
    ],
    "title": "Iterative Rotation Cipher"
  },
  {
    "_id": "25c8MJwZCoA65brmA",
    "difficulty": 4.416666666666667,
    "language": "python3",
    "summary": "Create a function which returns the state of a board after n moves. There are different types of blocks on the board, which are represented as strings.\n\n> is a pusher which moves right every turn, and pushes a block to the right if it occupies the same space as it.\n'#' is a block which can be pushed by the pusher. If a block is pushed onto another block, then",
    "tags": [
      "arrays",
      "games",
      "loops"
    ],
    "title": "Block Pusher"
  },
  {
    "_id": "CSnS4wEJpJopBrJiv",
    "difficulty": 4.428571428571429,
    "language": "python3",
    "summary": "The function is given an unsorted list of timestamps as strings in military format: \"00:00:00\" -> \"23:59:59\". Find two timestamps that have a minimum duration between them among all possible pairs from the list. It's possible that more than one pair can have the minimum duration. Thus return the set of tuples, e.g. {(t1, t2), (t3, t4), etc}.\n\nThe digital clock",
    "tags": [
      "algorithms",
      "arrays",
      "dates",
      "strings"
    ],
    "title": "Find Time Stamps with Minimum Difference"
  },
  {
    "_id": "TuG3DuZnC5MhGSfaY",
    "difficulty": 4.4375,
    "language": "python3",
    "summary": "For this challenge, you are given a string of letters in alphabetical order and an index.  If a list of all the permutations of those letters are put in lexicographical order, a legitimate word is located at the given index. You are to identify that word.\n\nFor example:\n\njumble(\"isn\", 4) ➞ sin\"\n\nThe permutations are:\n\n[\"ins\", \"isn\", \"nis\", \"nsi\", \"sin\", \"sni\"]",
    "tags": [
      "algorithms",
      "numbers",
      "strings"
    ],
    "title": "Jumbled Words"
  },
  {
    "_id": "4cZ5G3vt85S4BeXen",
    "difficulty": 4.454545454545454,
    "language": "python3",
    "summary": "A certain security system is responsible for maintaining a code capable of generating a key for each respective lock key = code % lock .This security system  has a key ( mainkey ) and its respective lock( mainlock ) that are fixed  and serve as a base to update all the others. To maintain security, after a certain lock is accessed 10 times with the wrong key t",
    "tags": [
      "logic",
      "cryptography"
    ],
    "title": "Password Challenge"
  },
  {
    "_id": "uGCJekBQnEq2Sui72",
    "difficulty": 4.454545454545454,
    "language": "python3",
    "summary": "Find rational representation of a decimal number. The input number is given as string in the form whole.between(period). The output should be a tuple numerator, denominator such that gcd(numerator, denominator) == 1.\n\nExamples\nfind_fraction(\"0.4\") ➞ (2, 5)\n\nfind_fraction(\"0.1(6)\") ➞ (1, 6)\n\nfind_fraction(\"0.(3)\") ➞ (1, 3)\n\nfind_fraction(\"0.(142857)\") ➞ (1, 7)",
    "tags": [
      "math",
      "numbers",
      "regex"
    ],
    "title": "Decimal to Rational"
  },
  {
    "_id": "bk2PxuvpGdMM8ynfs",
    "difficulty": 4.454545454545454,
    "language": "python3",
    "summary": "The function is given the number of jobs and a list of prerequisites. Each job is labeled from 0 to jobs - 1. The list of dependencies has lists of pairs [j, i] meaning that job j can start after the job i has been completed. A job can depend on multiple jobs to be completed or have no dependencies at all. If a job is not dependent on another job, it can be co",
    "tags": [
      "algorithms",
      "conditions",
      "games",
      "validation"
    ],
    "title": "Dependable Jobs Schedule"
  },
  {
    "_id": "TRZusuXkmgsubhkXD",
    "difficulty": 4.466666666666667,
    "language": "python3",
    "summary": "Suppose you have a sheet of paper measuring 8x10. You want to cut it exactly in half while maintaining its rectangular shape. You can do this in two ways. You can cut it in half preserving its long dimension of 10.\n\nWe will call this a long cut:\n\n[8, 10] ➞ long cut ➞ [4, 10]\n\nOr you can cut it in half preserving its short dimension. This is a short cut:\n\n[8, 1",
    "tags": [
      "geometry",
      "numbers"
    ],
    "title": "Cutting a Sheet of Paper"
  },
  {
    "_id": "ZBivv5GpQb2FwKCG6",
    "difficulty": 4.466666666666667,
    "language": "python3",
    "summary": "Create a function that takes a number and a direction of rotation as an argument and returns a spiral of prime number.\n\nGiven a number n and a direction of rotation, clockwise cw or counterclockwise ccw, the program must print a n*n matrix where each element of the matrix will be a prime number. The element in coordinates (0, 0) will be the starting point, and",
    "tags": [
      "math",
      "numbers"
    ],
    "title": "Primes Spiral"
  },
  {
    "_id": "rTAPCmsCJdnW6FEnc",
    "difficulty": 4.5,
    "language": "python3",
    "summary": "Write a function that computes the sum of ksign(sin(kk)) with begink  0 else -1, ( sine of naturalnum equal to zero only for n=0). Sum of consecutive numbers can be computed by the formula (n1 + n2) * (n2 – n1 + 1) / 2 when all numbers have the same sign.\n\nThe main point of this challenge is that it's hard to predict the sign of sin(k*k) for k. The sum of cons",
    "tags": [
      "algorithms",
      "loops",
      "numbers"
    ],
    "title": "Sum up Sequence of Numbers"
  },
  {
    "_id": "sggnPGKhbY6Hg8q3y",
    "difficulty": 4.5,
    "language": "python3",
    "summary": "Create a function that takes a matrix as an argument and returns the number of \"islands\" in the matrix, as well as the quantity of \"islands\" by type.\n\nYou are given a matrix of nxm elements.\nEach element represents either water (0) or land (1).\nYou must determine the total number of \"islands\" in the matrix (or map, if you want).\nAn island is a formation of one",
    "tags": [
      "algorithms",
      "math"
    ],
    "title": "The Islands"
  },
  {
    "_id": "7fe6MAGJveyK2Fqao",
    "difficulty": 4.5,
    "language": "python3",
    "summary": "The function is given a string of digits. Make a list of numbers from these digits such that:\nThe length of the list is at least three.\nAll numbers put together make the original string. (Thus one can only cut the string without permutations).\nStarting from the third number, each number equal to the sum of two previous numbers, i.e. lst[i - 2] + lst[i - 1] ==",
    "tags": [
      "algorithms",
      "arrays",
      "numbers",
      "strings"
    ],
    "title": "Split the String into Fibonacci Type of Sequence"
  },
  {
    "_id": "NZtL4MGkpCfiwShhp",
    "difficulty": 4.523809523809524,
    "language": "python3",
    "summary": "Given a string representing an infix expression, return the postfix equivalent. The operands stay in their original order, and any parentheses are removed. Only the operator order is changed. Operands and operators will be separated by a single space, with the exception of parentheses (see examples).\n\nExamples\ninfixtopostfix(\"7 + 3\") ➞ \"7 3 +\"\n\ninfixtopostfix(",
    "tags": [
      "logic",
      "math"
    ],
    "title": "Postfix Notation (Part 2: Infix to Postfix)"
  },
  {
    "_id": "DuLmT8se3ToGsXtR7",
    "difficulty": 4.538461538461538,
    "language": "python3",
    "summary": "The bookstore from [this collection] (https://edabit.com/collection/dnXtkLPZpX25t227q) is adamant in using eval(), but has moved the users dictionary into a function to prevent copying. The exists() function returns entries in users which match a given username. Create a query that copies users to res.\n\nExamples\nfrom re import *\n\nparam = \"your text here\"\n\ndef",
    "tags": [
      "data_structures",
      "games",
      "logic"
    ],
    "title": "Injection IV: Inside the Function"
  },
  {
    "_id": "s3PWkuNbHzYCbgM7C",
    "difficulty": 4.538461538461538,
    "language": "python3",
    "summary": "The function is given a string consisting of digits. Create a function that generates a set of all possible valid IP-addresses using all digits. The address has four groups. Each group is a number from 0 to 255 inclusive; the number cannot have leading zeros unless it equals zero.\n\nFor example, \"0.1.2.201\" and \"192.168.1.1\" are valid IP addresses while \"3.011.",
    "tags": [
      "algorithms",
      "conditions",
      "numbers",
      "strings"
    ],
    "title": "Generate Valid IP Addresses"
  },
  {
    "_id": "xoJNSP7wASckEnBQb",
    "difficulty": 4.538461538461538,
    "language": "python3",
    "summary": "The function is given a string representing a linear equation with one unknown. Find the value of x that is a valid solution of the equation. Return the sting x=val. Three outcomes are possible:\nxval is an integer or a float (round xval to 2 decimals)\n\"Infinite solutions\" for situations 0*x=0\n\"No solution\" for situations 0*x=num, (num != 0)\n\nExamples\nfind_x(\"4",
    "tags": [
      "algorithms",
      "math",
      "regex",
      "strings"
    ],
    "title": "Solve a Linear Equation"
  },
  {
    "_id": "4WLDvt7QyA3Su3cSC",
    "difficulty": 4.545454545454546,
    "language": "python3",
    "summary": "An employee receives a spending bill from the credit card company. He needs to modify the amounts for certain activities before submitting it to the employer for reimbursement. The input is a multiline string. Each line has the following form:\n\nactivity_description = $amount\n\nActivities fall into four categories:\nactivity = {\n  \"secret\": [\"bribery\", \"spying\",",
    "tags": [
      "regex",
      "strings"
    ],
    "title": "Correct the Spending Bill"
  },
  {
    "_id": "tNBgMoebvrhQ7ft6J",
    "difficulty": 4.545454545454546,
    "language": "python3",
    "summary": "Create a function that finds a number n so that n mod y = x,  given a list of x-y pairs, where (0 ≤ n ≤ product of all y's).\n\nThis challenge is related to the Chinese Remainder Theorem, which states that there is one and only one integer n that is congruent with a number of divisors (called moduli) and their remainders for n so long as those moduli are coprime",
    "tags": [
      "math",
      "numbers",
      "algorithms"
    ],
    "title": "Chinese Remainders"
  },
  {
    "_id": "2TLhrrdnNQtxGqKyz",
    "difficulty": 4.545454545454546,
    "language": "python3",
    "summary": "Consider the following list:\n\n[1, 12, 123, 1234, 12345, 123456, 1234567, 12345678, 123456789, 12345678910, 1234567891011 ...]\n\nIf we join these numbers, you will end up with an infinite sequence:\n\n112123123412345123456 ... to infinity.\n\nGiven a number n, return the element at nth index of the sequence. You can assume that the indexes start from 1 (not 0).\n\nExa",
    "tags": [
      "algorithms",
      "numbers",
      "math"
    ],
    "title": "Infinite Sequence"
  },
  {
    "_id": "ZTCnCw4Jb8c2sTBGq",
    "difficulty": 4.545454545454546,
    "language": "python3",
    "summary": "The function is given two lists of equal length a, b. Shuffle the first list a such that the count of a[i] > b[i] for 0 <= i < len_a is at its maximum. Return the shuffled list a.\n\nExamples\nshuffle_a([3, 5], [4, 2]) ➞ [5, 3]\n\nshuffle_a([2, 7, 11, 15], [1, 10, 4, 11]) ➞ [2, 11, 7, 15]\n\nshuffle_a([12, 24, 8, 32], [13, 25, 32, 11]) ➞ [24, 32, 8, 12]\n\nNotes\nMultip",
    "tags": [
      "algorithms",
      "arrays",
      "logic",
      "numbers"
    ],
    "title": "Shuffle the List to Maximize Count of Greater Values"
  },
  {
    "_id": "gMdFzt9YoXtAJMtFc",
    "difficulty": 4.555555555555555,
    "language": "python3",
    "summary": "The function is given a rectangular grid of buildings height. One can look from the left and from the top to the district and see vertical and horizontal skylines. Each shorter building can be increased in such a way such that the two skylines are not affected. Determine the total maximum increase in all buildings whenever possible.\n\nExamples\nmax_increase([[0,",
    "tags": [
      "algorithms",
      "arrays",
      "logic",
      "loops"
    ],
    "title": "The District Skylines"
  },
  {
    "_id": "LLieA2XafALFxXRT5",
    "difficulty": 4.5625,
    "language": "python3",
    "summary": "This is a direct sequel to Chain Reaction (Part #2),\nwhich was an easier particular case of this challenge (my suggestion is to try that one first).\n\nAs in the previous part, you will be given a rectangular array representing a \"map\" with three types of spaces:\n\"+\" bombs: when activated, their explosion activates any bombs directly above, below, left, or right",
    "tags": [
      "arrays",
      "games"
    ],
    "title": "Chain Reaction (Part #3)"
  },
  {
    "_id": "n2pny2vEkp52jHMcn",
    "difficulty": 4.583333333333333,
    "language": "python3",
    "summary": "The function is given a linked list node1->node2->node3->node4->node5->None. Relink the original list such that first all odd nodes and then all even nodes follow each other preserving the original order of appearance. The changed list should be: node1->node3->node5->node2->node4->None. The Linked List Class is defined in the Tests tab:\n\nclass ListNode:\n    de",
    "tags": [
      "algorithms",
      "classes",
      "control_flow",
      "data_structures"
    ],
    "title": "Regroup the Linked List"
  },
  {
    "_id": "oPWMciRe9EEXv69bn",
    "difficulty": 4.583333333333333,
    "language": "python3",
    "summary": "The function is given two parameters: a list of integers and the group’s length. Determine if it is possible to split all numbers from the list into groups of the specified length such that there are consecutive numbers in each group, return True / False.\n\nExamples\nconsecutive_nums([1, 3, 5], 1) ➞ True\nIt is always possible to create groups of length 1.\n\nconse",
    "tags": [
      "algorithms",
      "arrays",
      "logic",
      "numbers"
    ],
    "title": "Split the List into Groups of Consecutive Numbers"
  },
  {
    "_id": "zK2gCQDheiqbGPcNx",
    "difficulty": 4.6,
    "language": "python3",
    "summary": "Your function is given a list of rows (the wall). Each row consists of bricks of differing lengths. The sum of brick’s lengths in each row is the same. Imagine a vertical line inside the interval (0, totalrowlen), i.e. not at the most left or most right points, inside. This line crosses a certain number of bricks at some rows. If the line passes at a point whe",
    "tags": [
      "algorithms",
      "arrays",
      "control_flow",
      "logic"
    ],
    "title": "The Wall is Built from Bricks of Random Lengths"
  },
  {
    "_id": "eCZyNtJaCkjTMGj2H",
    "difficulty": 4.636363636363637,
    "language": "python3",
    "summary": "The function is given a rectangular list of lists of numbers. Make a list from these numbers in the order of connecting diagonals like a snake before the strike. Starting from the left-up corner:\nFirst diagonal, going up: 0\nSecond diagonal, going down: 0 -> 1\nThird diagonal, going up: 2 -> 1 -> 0\netc, alternate between going up and going down\nLast diagonal: ro",
    "tags": [
      "algorithms",
      "arrays",
      "loops",
      "logic"
    ],
    "title": "Diagonal Snake from a Rectangular Matrix"
  },
  {
    "_id": "8snGvxcJRYiZ6dy7L",
    "difficulty": 4.636363636363637,
    "language": "python3",
    "summary": "The function is given a string consisting of a collection of three characters:\n\"(\" open bracket\n\")\" closed bracket\n\"J\" Joker, which can be replaced by \"(\", \")\" or \"\"\n\nDevelop a solution to determine if the given string represents a proper sequence of parenthesis; return True / False. Each open bracket on the left should have a corresponding closed bracket on t",
    "tags": [
      "algorithms",
      "data_structures",
      "strings",
      "validation"
    ],
    "title": "Closed Brackets String"
  },
  {
    "_id": "TbRxK3t7egwhN4Nmp",
    "difficulty": 4.642857142857143,
    "language": "python3",
    "summary": "Write a function that only accepts integers and returns the English representation.\n\nThe function will be tested for large integers on the interval (-1e+93, 1e+93).\nHyphens are not used (i.e. \"fifty four\" not \"fifty-four\")\nThe word 'and' is not used (i.e. \"five hundred six\" not \"five hundred and six\").\nCommas should be used to separate groups of numbers (see e",
    "tags": [
      "algorithms",
      "arrays",
      "strings"
    ],
    "title": "Large Numbers to English"
  },
  {
    "_id": "hL99axe3LyRGFWEjd",
    "difficulty": 4.666666666666667,
    "language": "python3",
    "summary": "Functions in Python are first class citizens. This means that they support operations such as being passed as an argument, returned from a function, modified, and assigned to a variable.\n\nA decorator is a design pattern in Python that allows a user to add new functionality to an existing object without modifying its structure. Create a function decorator that",
    "tags": [
      "functional_programming",
      "math"
    ],
    "title": "Function Decorator"
  },
  {
    "_id": "Z5DYeNnETEFAw7Z98",
    "difficulty": 4.666666666666667,
    "language": "python3",
    "summary": "In this challenge, you have to perform reverse steps of Iterative Rotation Cipher. Decoding is done by performing a series of character and substring rotations on a string input.\n\nCreate a function that takes a string of encoded message eMessage and returns a decoded message.\n\nEncoded Message = 10 hu fmo a,ys vi utie mr snehn rni tvte .ysushou teI fwea pmapi a",
    "tags": [
      "cryptography",
      "strings",
      "logic"
    ],
    "title": "Iterative Rotation Decipher"
  },
  {
    "_id": "5k25ZqnuFgtgHNAqh",
    "difficulty": 4.6923076923076925,
    "language": "python3",
    "summary": "When a message, expressed as a long stream of 0s and 1s, is sent to you, one or more of its bits might get flipped on the way. If that's the case, it can be useful to have some way of figuring out if and where a \"bit flip\" happened so as to flip it back. One solution is to include in the message some form of meta-information about the message itself than can h",
    "tags": [
      "bit_operations",
      "logic",
      "numbers"
    ],
    "title": "Error Detection Part 1: The Hamming Checker"
  },
  {
    "_id": "i9gdwWMehKoTwkSeH",
    "difficulty": 4.6923076923076925,
    "language": "python3",
    "summary": "This game is played with a random string of digits 0-9.  The object is to reduce the string to zero length by removing digits from the left end of the string.  Removals are governed by one simple rule.  If the leftmost digit is n, you can remove up to n digits from the left end (inclusive).  After doing this the new leftmost digit is reduced by the number of d",
    "tags": [
      "games",
      "numbers",
      "arrays"
    ],
    "title": "The Simple Game"
  },
  {
    "_id": "answn8heoA5fYoszt",
    "difficulty": 4.714285714285714,
    "language": "python3",
    "summary": "A Sudoku puzzle contains 81 \"cells\" of numbers in a 9 x 9 grid. One helpful approach to solving a Sudoku puzzle is to make a class that represents each cell in the puzzle along with three different formats of the Sudoku puzzle representing each region type:\n\nrow\ncolumn\nbox\n\nKeep in mind that the definition for a cell's region is as follows:\nEach cell has a \"re",
    "tags": [
      "classes",
      "arrays",
      "algorithms",
      "higher_order_functions"
    ],
    "title": "Sudoku Cell"
  },
  {
    "_id": "vKg8vbzyMA2arvdNz",
    "difficulty": 4.714285714285714,
    "language": "python3",
    "summary": "Alex and Cindy, two students who recently spent some time on treasure hunting. Apart from scrap metal, they found a number of boxes full of old coins. Boxes are of different value and now are lined up in a row. Cindy proposes an idea to divide the treasure into two parts. She thinks that a fair way is that she and Alex take turns, and each of them chooses one",
    "tags": [
      "algorithms",
      "arrays",
      "functional_programming",
      "data_structures"
    ],
    "title": "Helping Alex with Treasure"
  },
  {
    "_id": "GMGeJ2kX2MnyEmt7n",
    "difficulty": 4.7272727272727275,
    "language": "python3",
    "summary": "A number is finitely expressible if you can write it in floating point form and only use a finite number of digits.\n1/3 is not finitely expressible in base 10 as it requires an infinite number of digits to write out: 0.333333 ...\n3/2 is finitely expressible in base 10 as it requires only two digits: 1.5\n\nCreate a function that takes in a rational number in the",
    "tags": [
      "algorithms",
      "math",
      "validation"
    ],
    "title": "Finitely Expressible Rational Numbers in a Number Base"
  },
  {
    "_id": "KrZPqBmjsJ3u7ic3t",
    "difficulty": 4.733333333333333,
    "language": "python3",
    "summary": "Knowing that S(n) is the sum of the first n terms in the fibonacci series, and that G(n) is the sum of the first n terms in the \"S\" series, create a function that returns the value of G(n), for 20000 >= n >= 20.\n\nThe entries will be the value of n and the value of A(n).\n\nSeries representation:\n\nFibonacci ➞ A(1),  A(2),  A(3), ..., A(n)\nS(n) ➞ A(1) + A(2) + A(3",
    "tags": [
      "algebra",
      "math"
    ],
    "title": "Fibonacci Sum"
  },
  {
    "_id": "CGr9MDwQPqN5ypbrT",
    "difficulty": 4.75,
    "language": "python3",
    "summary": "Create a function that takes a number n and returns the last four digits of nth Fibonacci number.\n\nIn this challenge, the given number n may be huge (billions or so). Hence an algorithm looping for n iterations will not fit into the allotted time. Therefore you have to find out the algorithm which finds the answer in O(log n) time.\n\nExamples\nfibonacci(6) ➞ 8",
    "tags": [
      "algebra",
      "algorithms",
      "logic",
      "loops",
      "numbers"
    ],
    "title": "Last Digits of a Huge Fibonacci Number"
  },
  {
    "_id": "LQMKcSTw9swdWFMR7",
    "difficulty": 4.75,
    "language": "python3",
    "summary": "In this challenge, we extend the FourVector class we created in the first and second installment of the FourVector collection. We will now add Lorentz transformations namely \"Pure Rotations\" and \"Pure Boosts\". For details on this operation, please refer to the Wiki page linked in the Resources.\n\nSo, please add the following features to the class FourVector:\n\nA",
    "tags": [
      "physics",
      "math",
      "classes"
    ],
    "title": "Four Vectors Part 3: Lorentz Transformations"
  },
  {
    "_id": "PCuFMovzywF9D84Zx",
    "difficulty": 4.75,
    "language": "python3",
    "summary": "Cubic splines are used to smoothly connect the dots. Write implementation of the class Curve that:\n\nAccepts a list or set of tuples (x, y).\nBuilds n-1 splines for n unique knots.\nComputes y for given x.\nFinds min and max of the curve.\nSupports knot addition and removal.\nSupports overloaded operators +, -.\n\nMore detailed description of the class with names of m",
    "tags": [
      "math",
      "classes",
      "loops",
      "control_flow"
    ],
    "title": "Cubic Splines"
  },
  {
    "_id": "dDuAF2pz5XceNcKt7",
    "difficulty": 4.75,
    "language": "python3",
    "summary": "The bookstore from this collection is adamant in using eval(), but made it difficult to access the dictionary of users to prevent copying. The dictionary hacker911 holds the username and password for all users. The bookstore doesn't allow the string user to contain h, k, or a digit, hoping it will keep the dictionary inaccessible from the eval() procedure. The",
    "tags": [
      "data_structures",
      "logic",
      "strings"
    ],
    "title": "Injection VI: Characters Restriction"
  },
  {
    "_id": "p8wmynz3NZL9wTngn",
    "difficulty": 4.75,
    "language": "python3",
    "summary": "In this challenge, you are given a list of strings composed of the letters a-j. This list is special because it is a list of consecutive prime numbers which have been treated to a simple substitution cipher. Each of the numbers (0-9) have been substituted by one of the letters a-j. The substitution scheme is the same for all members of the list.\n\nYour task is",
    "tags": [
      "cryptography",
      "numbers",
      "math"
    ],
    "title": "Cryptoprimes"
  },
  {
    "_id": "qJynivbD7ANE3kiYY",
    "difficulty": 4.769230769230769,
    "language": "python3",
    "summary": "Create a function that takes a chess position (black pieces to move next) and returns the status of the black king.\n\nThe black king is safe if no white pieces threaten it.\nThe black king is checked if one white piece threatens it and the king can escape to an unthreatened square.\nThe black king is double-checked if two white pieces threaten it and the king can",
    "tags": [
      "arrays",
      "games"
    ],
    "title": "King's Escape"
  },
  {
    "_id": "C4RszMKBC9xHsh6Cf",
    "difficulty": 4.8,
    "language": "python3",
    "summary": "Find how many reflective prime pairs exist in a given range for each base in a given range. You'll be given two integers as parameters — ceiling range for primes and ceiling range for bases (ranges include the parameters). By \"reflective\" I mean two distinct numbers who are each other's reflection in the same base (e.g. 37 and 73).\n\nPalindromic numbers like 10",
    "tags": [
      "algorithms",
      "math",
      "numbers"
    ],
    "title": "Reflective Prime Pairs for a Range of Bases"
  },
  {
    "_id": "BjCsxBGf8qyCPiHNC",
    "difficulty": 4.8,
    "language": "python3",
    "summary": "There is a legend that near the city of Hanoi in Vietnam there is a monastery with a bronze plate and three rods on it.\n\nAt the creation of the world, God strung 64 disks of various diameters of pure gold on the first rod.  He placed the largest disk on the plate, and put each smaller disk on a larger one.\n\nThere was a prophecy that the moment the monks of the",
    "tags": [
      "algorithms",
      "algebra",
      "logic"
    ],
    "title": "Help the Hanoi Monks With Their Towers"
  },
  {
    "_id": "X5Eh7is6iebbpgb9r",
    "difficulty": 4.8,
    "language": "python3",
    "summary": "The bookstore from [this collection] (https://edabit.com/collection/dnXtkLPZpX25t227q), in an attempt to avoid further attacks, has consulted an expert who advised them to start hashing their passwords. Misunderstanding what the expert meant, the bookstore has thus hashed their admin password and required it for access to the users dictionary.\n\nThe function ha",
    "tags": [
      "algorithms",
      "data_structures",
      "games",
      "logic"
    ],
    "title": "Injection V: Hashing Passwords"
  },
  {
    "_id": "b547GCkBTCk8oGkMn",
    "difficulty": 4.8,
    "language": "python3",
    "summary": "Write a function that efficiently calculates the last digits of Fibonacci terms.\n\nExamples\nfibonacci(4, 2) ➞ 3\n\nfibonacci(524288, 15) ➞ 122520212016581\n\nfibonacci(524289, 18) ➞ 459462970016204514\n\nNotes\nThe input will not be limited to powers of two.",
    "tags": [
      "loops",
      "math",
      "numbers"
    ],
    "title": "Exponential Fibonacci (Part 2)"
  },
  {
    "_id": "LkD2sM45i269Nr8NL",
    "difficulty": 4.818181818181818,
    "language": "python3",
    "summary": "Every polygon has an official name. Individual polygons are named according to the number of sides, combining a Greek-derived numerical prefix with the suffix -gon, e.g. pentagon, dodecagon.\n\nWrite a function that takes an integer n as argument and returns the official name of a n-sided polygon.\n\nThe following prefixes table is used to construct the name of a",
    "tags": [
      "strings",
      "data_structures"
    ],
    "title": "Who's That Polygon?"
  },
  {
    "_id": "4F42dyFb9MLeLWc2y",
    "difficulty": 4.833333333333333,
    "language": "python3",
    "summary": "RSA cryptography is a method by which two parties can securely share information without having to exchange any \"secret codes\" that would allow an attacker to compromise security. The process revolves around picking two prime numbers, p and q, which are used to calculate public and private keys. The public key is used to encrypt a message, but is useless at de",
    "tags": [
      "algorithms",
      "cryptography",
      "math"
    ],
    "title": "RSA Cryptography"
  },
  {
    "_id": "tiMW5ZRSM72vmbcqc",
    "difficulty": 4.833333333333333,
    "language": "python3",
    "summary": "The function is given a list of tuples. Each tuple has two numbers tpl[0]  (n3, n4) -> ...  for each pair of consecutive tuples `n2  (3, 4) => len_chain = 2\n\nlenlongestchain([(-15, -11), (17, 22), (8, 12), (-11, -10), (-4, -1)]) ➞ 4\n(-15, -11) -> (-4, -1) -> (8, 12) -> (17, 22) => len_chain = 4\n\nlenlongestchain([(-5, 0), (-4, 0), (4, 5), (3, 4), (-1, 1), (-6,",
    "tags": [
      "algorithms",
      "arrays",
      "conditions",
      "logic"
    ],
    "title": "Find the Maximum Length of a Chain Consisting from the Given Pairs"
  },
  {
    "_id": "nD9YtJvTj8LR7Kci6",
    "difficulty": 4.857142857142857,
    "language": "python3",
    "summary": "In physics and mathematics, the heat equation is a partial differential equation that describes how the distribution of some quantity (such as heat) evolves over time in a solid medium.\n\nWrite a function that simulates the temperature distribution over time using Finite difference method with Explicit scheme.\n\nThe input for the function is a dictionary with pr",
    "tags": [
      "loops",
      "math"
    ],
    "title": "Heat Equation"
  },
  {
    "_id": "2p7enujJ5vkYHuGwy",
    "difficulty": 4.875,
    "language": "python3",
    "summary": "A perfectly round coin travels along the given curve by rolling over it. Write a function that computes the number of rotations made by the coin during the trip from point start to point finish. The length of the trip can be approximated as the sum of piece-wise linear intervals.\n\nAlternative Text\n\nExamples\nrotations(0, 10, 0.01, 1, lambda x: 2)  ➞  1.59\n\nFunc",
    "tags": [
      "loops",
      "math",
      "physics"
    ],
    "title": "Coin Rotations"
  },
  {
    "_id": "NNyQBoYDMa3ER8cjs",
    "difficulty": 4.875,
    "language": "python3",
    "summary": "A self-driven electric car needs to make a delivery from point A to point B. The path consists of intervals with a traffic light at the end of each interval. Before the journey, the car calculates the expected, lucky, unlucky time travel estimates and uploads this information to the server.\n\nTravel through an interval can be modeled as having these parts:\nInit",
    "tags": [
      "classes",
      "loops",
      "math"
    ],
    "title": "Expected Travel Time"
  },
  {
    "_id": "2rSa7H6pDB5ZRsxJp",
    "difficulty": 4.875,
    "language": "python3",
    "summary": "A gene is represented by an 8-character long string containing: \"A\", \"C\", \"G\", \"T\". Gene mutation is defined as when a single character is changed in the gene string.\n\nFor example, `\"AACCGGTT\" -> \"AACCGGTA\"` is a mutation because only the last character is different.\n\nAlso, there is a list of genes, bank, which contains all the valid / allowed gene mutations.",
    "tags": [
      "algorithms",
      "logic",
      "regex",
      "strings"
    ],
    "title": "Minimum Number of Genetic Mutations"
  },
  {
    "_id": "fdyTMPLpRHkQJmKSC",
    "difficulty": 4.888888888888889,
    "language": "python3",
    "summary": "Implement the class Shape that receives perimeter and density function into init method. The list of consecutive corners defines shape of a 2-dimensional object. The density function defines the mass distribution inside the shape. To compute mass in a certain point m(x, y) = smallsquare * density(x, y). The init_ method calls other internal methods that comput",
    "tags": [
      "classes",
      "physics"
    ],
    "title": "Center of Mass"
  },
  {
    "_id": "k9GSNAEL5mS4yPtLv",
    "difficulty": 4.888888888888889,
    "language": "python3",
    "summary": "This challenge is a continuation of [Error Detection Part 1: The Hamming Checker\n](https://edabit.com/challenge/5k25ZqnuFgtgHNAqh). To recap:\nEvery redundant bit in a Hamming block informs about the parity of the numbers of 1s inside its region: a 0 indicates an even number of 1s, and a 1 indicates an odd number of 1s.\nRedundant bits are always placed in power",
    "tags": [
      "logic",
      "bit_operations"
    ],
    "title": "Error Detection Part 2: The Hamming Coder"
  },
  {
    "_id": "BuZLPB2H7n4aDBQRj",
    "difficulty": 4.888888888888889,
    "language": "python3",
    "summary": "In Nico Cipher, encoding is done by creating a numeric key and assigning each letter position of the message with the provided key. The detailed description of the encoding algorithm is provided by Mubashir in his challenge. You are encouraged to solve that one first.\n\nIn this challenge, the function is given the encoded message and the key. Create a reversed",
    "tags": [
      "algorithms",
      "cryptography",
      "logic",
      "strings"
    ],
    "title": "Nico Decipher"
  },
  {
    "_id": "r5YdmWsXYBftgJFND",
    "difficulty": 4.9,
    "language": "python3",
    "summary": "This challenge is based on Strong Password Checker. See Notes at the bottom of this page for info on the adaptation.\n\nIn this challenge, a password is considered strong if the following three conditions are met:\n\nNeeds to have exactly 20 characters.\nIt contains at least one lowercase letter, one uppercase letter and one digit.\nIt does not contain three repeati",
    "tags": [
      "functional_programming",
      "higher_order_functions",
      "logic",
      "numbers"
    ],
    "title": "Strong Password Checker (Version 2.0)"
  },
  {
    "_id": "nNgzWWhy2zqEv6vZM",
    "difficulty": 4.9,
    "language": "python3",
    "summary": "Ken-Ken is a puzzle game similar to Sudoku. It consists board filled with digits 1-9 and can have no two identical digits in the same row or column. The board is then split into jigsaw-like shapes (cages), each with a target number and mathematical operator, for which the digits that fill it (order doesn't matter) must match.\n\nFor addition +, the digits must s",
    "tags": [
      "algorithms",
      "arrays",
      "logic",
      "math",
      "numbers"
    ],
    "title": "Ken-Ken Helper"
  },
  {
    "_id": "xAZZ49engLXKo4cmW",
    "difficulty": 4.909090909090909,
    "language": "python3",
    "summary": "This challenge is a harder version of a previous challenge (which you should solve first), solving the same problem, but with much harder tests which require the solution to be pretty efficient (see Notes below).\n\nThe problem in question is the max sum sublist pair problem which, given a list of numbers, tries to find the pair of sublists with the maximum poss",
    "tags": [
      "algorithms",
      "arrays",
      "math",
      "numbers"
    ],
    "title": "Pair of Sublists with Max Sum (Hardcore Version)"
  },
  {
    "_id": "aWWts8Eo5tQdXmiaj",
    "difficulty": 4.909090909090909,
    "language": "python3",
    "summary": "Initially, the string consists of a single character. There are two operations:\nCopy the entire string into a buffer. It is not allowed to copy a part of the current string.\nPaste the buffer content at the end of the string. The string length increases.\n\nEach operation counts as one.\n\nThe function is given n the length of the required string. Determine the min",
    "tags": [
      "algorithms",
      "conditions",
      "logic",
      "math"
    ],
    "title": "Minimum Number of Copy / Paste Operations"
  },
  {
    "_id": "36jXRwMcJztHDcFgw",
    "difficulty": 5,
    "language": "python3",
    "summary": "The bookstore from this collection is adamant in using eval(), but has moved the user’s records into a file to prevent copying. For security, the bookstore also creates several files with fake user records to obscure the intruder. The checkuser(username) function returns entries for users which match a given username.\n\nCreate a query that copies all user recor",
    "tags": [
      "data_structures",
      "games",
      "logic",
      "strings"
    ],
    "title": "Injection IV.F: Inside the File"
  },
  {
    "_id": "6hfKCpeH2jL6QSDGT",
    "difficulty": 5,
    "language": "python3",
    "summary": "Write a function that counts the number of separate elements in the region.\n\nInput\nA rectangular matrix, list of lists, with zero/one in each cell. A connected element is a collection of ones that share the border via an edge. Separate elements do not touch each other even via a corner. The elements don’t have holes.\n\nOutput\nThe number of separate elements.\n\nE",
    "tags": [
      "algorithms",
      "arrays",
      "loops",
      "math"
    ],
    "title": "Count Elements"
  },
  {
    "_id": "9bTzMLzKk7AaCqJtA",
    "difficulty": 5,
    "language": "python3",
    "summary": "The middle-square method is a method of generating pseudorandom numbers. In practice, it's not a good method, since its period is usually very short and it has some severe weaknesses. The defects associated with the original middle-square generator can be rectified by running the middle square with a Weyl sequence, which prevents convergence to zero.\n\nWrite a",
    "tags": [
      "algorithms",
      "bit_operations",
      "math"
    ],
    "title": "Middle Square Weyl Sequence PRNG"
  },
  {
    "_id": "H2NCAro2tdbGavzg7",
    "difficulty": 5,
    "language": "python3",
    "summary": "A password is considered strong if all the following conditions are met:\n\nIt has at least 8 characters and at most 20 characters.\nIt contains at least one lowercase letter, one uppercase letter and one digit.\nIt must NOT contain three repeating characters in a row (e.g. \"...aaa...\" is weak, but \"...aa...a...\" is strong, assuming other conditions are met).\n\nWri",
    "tags": [
      "logic",
      "numbers",
      "higher_order_functions",
      "functional_programming"
    ],
    "title": "Strong Password Checker"
  },
  {
    "_id": "JiuvoGhEXax8mh35Q",
    "difficulty": 5,
    "language": "python3",
    "summary": "Python language does not have goto keyword. In other languages such statements exist. For example in C++: the goto statement transfers control to the location specified by label. The goto statement must be in the same function as the label it is referring, it may appear before or after the label.\n\nOne good use of goto is to exit from a deeply nested routine. F",
    "tags": [
      "logic",
      "strings"
    ],
    "title": "Functions with goto Logic"
  },
  {
    "_id": "dZQ2GvzoJRaNhvs8B",
    "difficulty": 5,
    "language": "python3",
    "summary": "This challenge is a harder version of a previous challenge, but now with an additional efficiency requirement (see the \"The catch\" discussion below). We first recall the problem:\n\nGiven a list of integers, find the length of the longest range of consecutive integers that are contained in the sorted version of the list.\n\nHere's an illustrative example. Consider",
    "tags": [
      "arrays",
      "algorithms",
      "numbers"
    ],
    "title": "Longest Range in the List (Hardcore Version)"
  },
  {
    "_id": "tnjY9dCGCQxtgJgau",
    "difficulty": 5,
    "language": "python3",
    "summary": "A Pythagorean Triple is comprised of three positive integers, a,  b,  c, such that a2 + b2 = c**2.  One special case is when a and b differ by only 1.  The first five examples of this are:\n\n(3, 4, 5), (20, 21, 29), (119, 120, 169), (696, 697, 985), (4059, 4060, 5741)\n\nDevise a function that takes an integer n and returns the nth member of this sequence.\n\nExamp",
    "tags": [
      "algebra",
      "geometry",
      "numbers"
    ],
    "title": "Pythagorean Triples Subset"
  },
  {
    "_id": "3vhXY6fdDhYpfE4vF",
    "difficulty": 5,
    "language": "python3",
    "summary": "In Clockwise Cipher, encoding is done by placing message characters in the corner cells of a square and moving in a clockwise direction. The detailed description of the encoding algorithm is provided by Mubashir in his challenge. You are encouraged to solve that one first.\n\nIn this challenge, the function is given the encoded message. Create a reversed solutio",
    "tags": [
      "algorithms",
      "cryptography",
      "logic",
      "strings"
    ],
    "title": "Clockwise Decipher"
  },
  {
    "_id": "Cxk52Bi3KZDYhYxsR",
    "difficulty": 5,
    "language": "python3",
    "summary": "The function is given a square matrix of relations n by n. Each element is numbered from 0 to n - 1. An element i is directly connected to an element j if relationsi == 1. Element A is connected to element B and element B is connected to C, then A is indirectly connected to C. A region consists of all directly and indirectly connected elements. Find the number",
    "tags": [
      "algorithms",
      "arrays",
      "conditions",
      "logic"
    ],
    "title": "Number of Connected Regions"
  },
  {
    "_id": "SY2PNuQNcF8YYXJEP",
    "difficulty": 5,
    "language": "python3",
    "summary": "There are n functions to be executed on a single processor. They have id = range(n), from 0 to n - 1. The processor decides how to queue the functions for execution. In the end, there is a log of when a particular function started to run and when it was finished. There are two events: \"s\"-start, \"e\"-end. The log entries have the following format, a tuple: (fun",
    "tags": [
      "algorithms",
      "control_flow",
      "data_structures",
      "loops"
    ],
    "title": "Functions Runtime on a Single-Core CPU"
  },
  {
    "_id": "gJTwR9cYKFWLaXTp4",
    "difficulty": 5,
    "language": "python3",
    "summary": "The function is given two equal size matrices of integers. Each cell holds a pixel: 1 represents a black pixel, 0 represents a white pixel. One of the images can be shifted in any two directions (up, down, left, right) relative to another image by any number of cells, e.g. (2 up, 1 right) or (1 down, 0 left). Determine the maxim possible overlap of black pixel",
    "tags": [
      "algorithms",
      "arrays",
      "conditions",
      "data_structures"
    ],
    "title": "Maximum Overlap of Two Images"
  }
]